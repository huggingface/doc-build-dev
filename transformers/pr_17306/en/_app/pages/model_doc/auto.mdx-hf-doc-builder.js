import{S as gqt,i as hqt,s as pqt,e as a,k as l,w as F,t as o,M as uqt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as _qt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as gJr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function bqt(y){let g,v,p,m,u,d,h,Eo,Fi,Lf,at,Ti,Mi,pL,yf,Oe,We,Ei,Sn,uL,Rn,Pn,_L,Ci,Bn,bL,wi,xf,ya;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Fi=a("code"),Lf=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Ti=a("code"),Mi=o('"new-model"'),pL=o(")."),yf=l(),Oe=a("p"),We=o("Likewise, if your "),Ei=a("code"),Sn=o("NewModel"),uL=o(" is a subclass of "),Rn=a("a"),Pn=o("PreTrainedModel"),_L=o(`, make sure its
`),Ci=a("code"),Bn=o("config_class"),bL=o(` attribute is set to the same class you use when registering the model (here
`),wi=a("code"),xf=o("NewModelConfig"),ya=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var zk=s(p);m=r(zk,"NewModelConfig"),zk.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ai=s(d);h=r(Ai,"PretrainedConfig"),Ai.forEach(t),Eo=r(Ae,`, make sure its
`),Fi=n(Ae,"CODE",{});var Wk=s(Fi);Lf=r(Wk,"model_type"),Wk.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Ti=n(Ae,"CODE",{});var Qk=s(Ti);Mi=r(Qk,'"new-model"'),Qk.forEach(t),pL=r(Ae,")."),Ae.forEach(t),yf=i(Qe),Oe=n(Qe,"P",{});var Co=s(Oe);We=r(Co,"Likewise, if your "),Ei=n(Co,"CODE",{});var xa=s(Ei);Sn=r(xa,"NewModel"),xa.forEach(t),uL=r(Co," is a subclass of "),Rn=n(Co,"A",{href:!0});var Hk=s(Rn);Pn=r(Hk,"PreTrainedModel"),Hk.forEach(t),_L=r(Co,`, make sure its
`),Ci=n(Co,"CODE",{});var $f=s(Ci);Bn=r($f,"config_class"),$f.forEach(t),bL=r(Co,` attribute is set to the same class you use when registering the model (here
`),wi=n(Co,"CODE",{});var Uk=s(wi);xf=r(Uk,"NewModelConfig"),Uk.forEach(t),ya=r(Co,")."),Co.forEach(t),this.h()},h(){c(Rn,"href","/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Eo),e(g,Fi),e(Fi,Lf),e(g,at),e(g,Ti),e(Ti,Mi),e(g,pL),b(Qe,yf,Ae),b(Qe,Oe,Ae),e(Oe,We),e(Oe,Ei),e(Ei,Sn),e(Oe,uL),e(Oe,Rn),e(Rn,Pn),e(Oe,_L),e(Oe,Ci),e(Ci,Bn),e(Oe,bL),e(Oe,wi),e(wi,xf),e(Oe,ya)},d(Qe){Qe&&t(g),Qe&&t(yf),Qe&&t(Oe)}}}function vqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tqt(y){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Mqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eqt(y){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Cqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Aqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $qt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ejt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ojt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ajt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function njt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ljt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ijt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function djt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ujt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _jt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ejt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ajt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ljt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $jt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ijt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Njt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Djt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ojt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ujt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Dt(y){let g,v,p,m,u,d,h,Eo,Fi,Lf,at,Ti,Mi,pL,yf,Oe,We,Ei,Sn,uL,Rn,Pn,_L,Ci,Bn,bL,wi,xf,ya,Qe,Ae,zk,Ai,Wk,Qk,Co,xa,Hk,$f,Uk,gze,KDe,Li,kf,Xre,vL,hze,zre,pze,ZDe,In,uze,Wre,_ze,bze,Qre,vze,Fze,eGe,FL,oGe,Jk,Tze,rGe,Sf,tGe,yi,Rf,Hre,TL,Mze,Ure,Eze,aGe,wo,ML,Cze,EL,wze,Yk,Aze,Lze,yze,CL,xze,Jre,$ze,kze,Sze,wr,wL,Rze,Yre,Pze,Bze,xi,Ize,Kre,Nze,qze,Zre,jze,Dze,Gze,A,Pf,ete,Oze,Vze,Kk,Xze,zze,Wze,Bf,ote,Qze,Hze,Zk,Uze,Jze,Yze,If,rte,Kze,Zze,eS,eWe,oWe,rWe,Nf,tte,tWe,aWe,oS,nWe,sWe,lWe,qf,ate,iWe,dWe,rS,cWe,fWe,mWe,jf,nte,gWe,hWe,tS,pWe,uWe,_We,Df,ste,bWe,vWe,aS,FWe,TWe,MWe,Gf,lte,EWe,CWe,nS,wWe,AWe,LWe,Of,ite,yWe,xWe,sS,$We,kWe,SWe,Vf,dte,RWe,PWe,lS,BWe,IWe,NWe,Xf,cte,qWe,jWe,iS,DWe,GWe,OWe,zf,fte,VWe,XWe,dS,zWe,WWe,QWe,Wf,mte,HWe,UWe,cS,JWe,YWe,KWe,Qf,gte,ZWe,eQe,fS,oQe,rQe,tQe,Hf,hte,aQe,nQe,mS,sQe,lQe,iQe,Uf,pte,dQe,cQe,gS,fQe,mQe,gQe,Jf,ute,hQe,pQe,hS,uQe,_Qe,bQe,Yf,_te,vQe,FQe,pS,TQe,MQe,EQe,Kf,bte,CQe,wQe,uS,AQe,LQe,yQe,Zf,vte,xQe,$Qe,_S,kQe,SQe,RQe,em,Fte,PQe,BQe,bS,IQe,NQe,qQe,om,Tte,jQe,DQe,vS,GQe,OQe,VQe,rm,Mte,XQe,zQe,FS,WQe,QQe,HQe,tm,Ete,UQe,JQe,TS,YQe,KQe,ZQe,am,Cte,eHe,oHe,MS,rHe,tHe,aHe,nm,wte,nHe,sHe,ES,lHe,iHe,dHe,sm,Ate,cHe,fHe,CS,mHe,gHe,hHe,lm,Lte,pHe,uHe,wS,_He,bHe,vHe,im,yte,FHe,THe,AS,MHe,EHe,CHe,dm,xte,wHe,AHe,LS,LHe,yHe,xHe,cm,$te,$He,kHe,yS,SHe,RHe,PHe,fm,kte,BHe,IHe,xS,NHe,qHe,jHe,mm,Ste,DHe,GHe,$S,OHe,VHe,XHe,gm,Rte,zHe,WHe,kS,QHe,HHe,UHe,hm,Pte,JHe,YHe,SS,KHe,ZHe,eUe,pm,Bte,oUe,rUe,RS,tUe,aUe,nUe,um,Ite,sUe,lUe,PS,iUe,dUe,cUe,_m,Nte,fUe,mUe,BS,gUe,hUe,pUe,bm,qte,uUe,_Ue,IS,bUe,vUe,FUe,vm,jte,TUe,MUe,NS,EUe,CUe,wUe,Fm,Dte,AUe,LUe,qS,yUe,xUe,$Ue,Tm,Gte,kUe,SUe,jS,RUe,PUe,BUe,Mm,Ote,IUe,NUe,DS,qUe,jUe,DUe,Em,Vte,GUe,OUe,GS,VUe,XUe,zUe,Cm,Xte,WUe,QUe,OS,HUe,UUe,JUe,wm,zte,YUe,KUe,VS,ZUe,eJe,oJe,Am,Wte,rJe,tJe,XS,aJe,nJe,sJe,Lm,Qte,lJe,iJe,zS,dJe,cJe,fJe,ym,Hte,mJe,gJe,WS,hJe,pJe,uJe,xm,Ute,_Je,bJe,QS,vJe,FJe,TJe,$m,Jte,MJe,EJe,HS,CJe,wJe,AJe,km,Yte,LJe,yJe,US,xJe,$Je,kJe,Sm,Kte,SJe,RJe,JS,PJe,BJe,IJe,Rm,Zte,NJe,qJe,YS,jJe,DJe,GJe,Pm,eae,OJe,VJe,KS,XJe,zJe,WJe,Bm,oae,QJe,HJe,ZS,UJe,JJe,YJe,Im,rae,KJe,ZJe,eR,eYe,oYe,rYe,Nm,tae,tYe,aYe,oR,nYe,sYe,lYe,qm,aae,iYe,dYe,rR,cYe,fYe,mYe,jm,nae,gYe,hYe,tR,pYe,uYe,_Ye,Dm,sae,bYe,vYe,aR,FYe,TYe,MYe,Gm,lae,EYe,CYe,nR,wYe,AYe,LYe,Om,iae,yYe,xYe,sR,$Ye,kYe,SYe,Vm,dae,RYe,PYe,lR,BYe,IYe,NYe,Xm,cae,qYe,jYe,iR,DYe,GYe,OYe,zm,fae,VYe,XYe,dR,zYe,WYe,QYe,Wm,mae,HYe,UYe,cR,JYe,YYe,KYe,Qm,gae,ZYe,eKe,fR,oKe,rKe,tKe,Hm,hae,aKe,nKe,mR,sKe,lKe,iKe,Um,pae,dKe,cKe,gR,fKe,mKe,gKe,Jm,uae,hKe,pKe,hR,uKe,_Ke,bKe,Ym,_ae,vKe,FKe,pR,TKe,MKe,EKe,Km,bae,CKe,wKe,uR,AKe,LKe,yKe,Zm,vae,xKe,$Ke,_R,kKe,SKe,RKe,eg,Fae,PKe,BKe,bR,IKe,NKe,qKe,og,Tae,jKe,DKe,vR,GKe,OKe,VKe,rg,Mae,XKe,zKe,FR,WKe,QKe,HKe,tg,Eae,UKe,JKe,TR,YKe,KKe,ZKe,ag,Cae,eZe,oZe,MR,rZe,tZe,aZe,ng,wae,nZe,sZe,ER,lZe,iZe,dZe,sg,Aae,cZe,fZe,CR,mZe,gZe,hZe,lg,Lae,pZe,uZe,wR,_Ze,bZe,vZe,ig,yae,FZe,TZe,AR,MZe,EZe,CZe,dg,xae,wZe,AZe,LR,LZe,yZe,xZe,cg,$ae,$Ze,kZe,yR,SZe,RZe,PZe,fg,kae,BZe,IZe,xR,NZe,qZe,jZe,mg,Sae,DZe,GZe,$R,OZe,VZe,XZe,gg,Rae,zZe,WZe,kR,QZe,HZe,UZe,hg,Pae,JZe,YZe,SR,KZe,ZZe,eeo,pg,Bae,oeo,reo,RR,teo,aeo,neo,ug,Iae,seo,leo,PR,ieo,deo,ceo,_g,Nae,feo,meo,BR,geo,heo,peo,bg,qae,ueo,_eo,IR,beo,veo,Feo,vg,jae,Teo,Meo,NR,Eeo,Ceo,weo,Fg,Dae,Aeo,Leo,qR,yeo,xeo,$eo,Tg,Gae,keo,Seo,jR,Reo,Peo,Beo,Mg,Oae,Ieo,Neo,DR,qeo,jeo,Deo,Eg,Vae,Geo,Oeo,GR,Veo,Xeo,zeo,Cg,Xae,Weo,Qeo,OR,Heo,Ueo,Jeo,wg,zae,Yeo,Keo,VR,Zeo,eoo,ooo,Ag,Wae,roo,too,XR,aoo,noo,soo,Lg,Qae,loo,ioo,zR,doo,coo,foo,yg,Hae,moo,goo,WR,hoo,poo,uoo,xg,Uae,_oo,boo,QR,voo,Foo,Too,$g,Jae,Moo,Eoo,HR,Coo,woo,Aoo,kg,Yae,Loo,yoo,UR,xoo,$oo,koo,Sg,Kae,Soo,Roo,JR,Poo,Boo,Ioo,Rg,Zae,Noo,qoo,YR,joo,Doo,Goo,Pg,ene,Ooo,Voo,KR,Xoo,zoo,Woo,Bg,one,Qoo,Hoo,ZR,Uoo,Joo,Yoo,Ig,rne,Koo,Zoo,eP,ero,oro,rro,Ng,tne,tro,aro,oP,nro,sro,lro,qg,ane,iro,dro,rP,cro,fro,mro,jg,gro,Dg,AL,hro,nne,pro,nGe,$i,Gg,sne,LL,uro,lne,_ro,sGe,Ao,yL,bro,xL,vro,tP,Fro,Tro,Mro,$L,Ero,ine,Cro,wro,Aro,Ar,kL,Lro,dne,yro,xro,$a,$ro,cne,kro,Sro,fne,Rro,Pro,mne,Bro,Iro,Nro,k,Nn,gne,qro,jro,aP,Dro,Gro,nP,Oro,Vro,Xro,qn,hne,zro,Wro,sP,Qro,Hro,lP,Uro,Jro,Yro,jn,pne,Kro,Zro,iP,eto,oto,dP,rto,tto,ato,Og,une,nto,sto,cP,lto,ito,dto,Dn,_ne,cto,fto,fP,mto,gto,mP,hto,pto,uto,Vg,bne,_to,bto,gP,vto,Fto,Tto,Xg,vne,Mto,Eto,hP,Cto,wto,Ato,zg,Fne,Lto,yto,pP,xto,$to,kto,Gn,Tne,Sto,Rto,uP,Pto,Bto,_P,Ito,Nto,qto,On,Mne,jto,Dto,bP,Gto,Oto,vP,Vto,Xto,zto,Vn,Ene,Wto,Qto,FP,Hto,Uto,TP,Jto,Yto,Kto,Wg,Cne,Zto,eao,MP,oao,rao,tao,Qg,wne,aao,nao,EP,sao,lao,iao,Hg,Ane,dao,cao,CP,fao,mao,gao,Xn,Lne,hao,pao,wP,uao,_ao,AP,bao,vao,Fao,Ug,yne,Tao,Mao,LP,Eao,Cao,wao,zn,xne,Aao,Lao,yP,yao,xao,xP,$ao,kao,Sao,Wn,$ne,Rao,Pao,$P,Bao,Iao,kP,Nao,qao,jao,Qn,kne,Dao,Gao,SP,Oao,Vao,RP,Xao,zao,Wao,Jg,Sne,Qao,Hao,PP,Uao,Jao,Yao,Hn,Rne,Kao,Zao,BP,eno,ono,IP,rno,tno,ano,Un,Pne,nno,sno,NP,lno,ino,qP,dno,cno,fno,Jn,Bne,mno,gno,jP,hno,pno,DP,uno,_no,bno,Yn,Ine,vno,Fno,GP,Tno,Mno,OP,Eno,Cno,wno,Kn,Nne,Ano,Lno,VP,yno,xno,XP,$no,kno,Sno,Zn,qne,Rno,Pno,zP,Bno,Ino,WP,Nno,qno,jno,Yg,jne,Dno,Gno,QP,Ono,Vno,Xno,es,Dne,zno,Wno,HP,Qno,Hno,UP,Uno,Jno,Yno,Kg,Gne,Kno,Zno,JP,eso,oso,rso,os,One,tso,aso,YP,nso,sso,KP,lso,iso,dso,rs,Vne,cso,fso,ZP,mso,gso,eB,hso,pso,uso,ts,Xne,_so,bso,oB,vso,Fso,rB,Tso,Mso,Eso,Zg,zne,Cso,wso,tB,Aso,Lso,yso,as,Wne,xso,$so,aB,kso,Sso,nB,Rso,Pso,Bso,ns,Qne,Iso,Nso,sB,qso,jso,lB,Dso,Gso,Oso,eh,Hne,Vso,Xso,iB,zso,Wso,Qso,ss,Une,Hso,Uso,dB,Jso,Yso,cB,Kso,Zso,elo,ls,Jne,olo,rlo,fB,tlo,alo,mB,nlo,slo,llo,is,Yne,ilo,dlo,gB,clo,flo,hB,mlo,glo,hlo,ds,Kne,plo,ulo,pB,_lo,blo,uB,vlo,Flo,Tlo,cs,Zne,Mlo,Elo,_B,Clo,wlo,bB,Alo,Llo,ylo,fs,ese,xlo,$lo,vB,klo,Slo,FB,Rlo,Plo,Blo,ms,ose,Ilo,Nlo,TB,qlo,jlo,MB,Dlo,Glo,Olo,gs,rse,Vlo,Xlo,EB,zlo,Wlo,CB,Qlo,Hlo,Ulo,oh,tse,Jlo,Ylo,wB,Klo,Zlo,eio,hs,ase,oio,rio,AB,tio,aio,LB,nio,sio,lio,rh,nse,iio,dio,yB,cio,fio,mio,th,sse,gio,hio,xB,pio,uio,_io,ps,lse,bio,vio,$B,Fio,Tio,kB,Mio,Eio,Cio,us,ise,wio,Aio,SB,Lio,yio,RB,xio,$io,kio,_s,dse,Sio,Rio,PB,Pio,Bio,BB,Iio,Nio,qio,ah,cse,jio,Dio,IB,Gio,Oio,Vio,bs,fse,Xio,zio,NB,Wio,Qio,qB,Hio,Uio,Jio,vs,mse,Yio,Kio,jB,Zio,edo,DB,odo,rdo,tdo,Fs,gse,ado,ndo,GB,sdo,ldo,OB,ido,ddo,cdo,Ts,hse,fdo,mdo,VB,gdo,hdo,XB,pdo,udo,_do,Ms,pse,bdo,vdo,zB,Fdo,Tdo,WB,Mdo,Edo,Cdo,nh,use,wdo,Ado,QB,Ldo,ydo,xdo,Es,_se,$do,kdo,HB,Sdo,Rdo,UB,Pdo,Bdo,Ido,sh,bse,Ndo,qdo,JB,jdo,Ddo,Gdo,lh,vse,Odo,Vdo,YB,Xdo,zdo,Wdo,ih,Fse,Qdo,Hdo,KB,Udo,Jdo,Ydo,dh,Tse,Kdo,Zdo,ZB,eco,oco,rco,Cs,Mse,tco,aco,eI,nco,sco,oI,lco,ico,dco,ch,Ese,cco,fco,rI,mco,gco,hco,ws,Cse,pco,uco,tI,_co,bco,aI,vco,Fco,Tco,As,wse,Mco,Eco,nI,Cco,wco,sI,Aco,Lco,yco,Ls,Ase,xco,$co,lI,kco,Sco,iI,Rco,Pco,Bco,ys,Lse,Ico,Nco,dI,qco,jco,cI,Dco,Gco,Oco,xs,yse,Vco,Xco,fI,zco,Wco,mI,Qco,Hco,Uco,$s,xse,Jco,Yco,gI,Kco,Zco,hI,efo,ofo,rfo,fh,$se,tfo,afo,pI,nfo,sfo,lfo,mh,kse,ifo,dfo,uI,cfo,ffo,mfo,ks,Sse,gfo,hfo,_I,pfo,ufo,bI,_fo,bfo,vfo,Ss,Rse,Ffo,Tfo,vI,Mfo,Efo,FI,Cfo,wfo,Afo,Rs,Pse,Lfo,yfo,TI,xfo,$fo,MI,kfo,Sfo,Rfo,gh,Bse,Pfo,Bfo,EI,Ifo,Nfo,qfo,hh,Ise,jfo,Dfo,CI,Gfo,Ofo,Vfo,ph,Nse,Xfo,zfo,wI,Wfo,Qfo,Hfo,Ps,qse,Ufo,Jfo,AI,Yfo,Kfo,LI,Zfo,emo,omo,Bs,jse,rmo,tmo,yI,amo,nmo,xI,smo,lmo,imo,uh,Dse,dmo,cmo,$I,fmo,mmo,gmo,_h,Gse,hmo,pmo,kI,umo,_mo,bmo,bh,Ose,vmo,Fmo,SI,Tmo,Mmo,Emo,Is,Vse,Cmo,wmo,RI,Amo,Lmo,PI,ymo,xmo,$mo,vh,Xse,kmo,Smo,BI,Rmo,Pmo,Bmo,Fh,zse,Imo,Nmo,II,qmo,jmo,Dmo,Ns,Wse,Gmo,Omo,NI,Vmo,Xmo,qI,zmo,Wmo,Qmo,qs,Qse,Hmo,Umo,jI,Jmo,Ymo,DI,Kmo,Zmo,ego,js,Hse,ogo,rgo,GI,tgo,ago,OI,ngo,sgo,lgo,Ds,Use,igo,dgo,VI,cgo,fgo,XI,mgo,ggo,hgo,Th,pgo,Mh,SL,ugo,Jse,_go,lGe,ki,Eh,Yse,RL,bgo,Kse,vgo,iGe,Lo,PL,Fgo,BL,Tgo,zI,Mgo,Ego,Cgo,IL,wgo,Zse,Ago,Lgo,ygo,He,NL,xgo,ele,$go,kgo,ka,Sgo,ole,Rgo,Pgo,rle,Bgo,Igo,tle,Ngo,qgo,jgo,Y,Ch,ale,Dgo,Ggo,WI,Ogo,Vgo,Xgo,wh,nle,zgo,Wgo,QI,Qgo,Hgo,Ugo,Ah,sle,Jgo,Ygo,HI,Kgo,Zgo,eho,Lh,lle,oho,rho,UI,tho,aho,nho,yh,ile,sho,lho,JI,iho,dho,cho,xh,dle,fho,mho,YI,gho,hho,pho,$h,cle,uho,_ho,KI,bho,vho,Fho,kh,fle,Tho,Mho,ZI,Eho,Cho,who,Sh,mle,Aho,Lho,eN,yho,xho,$ho,Rh,gle,kho,Sho,oN,Rho,Pho,Bho,Ph,hle,Iho,Nho,rN,qho,jho,Dho,Bh,ple,Gho,Oho,tN,Vho,Xho,zho,Ih,ule,Who,Qho,aN,Hho,Uho,Jho,Nh,_le,Yho,Kho,nN,Zho,epo,opo,qh,ble,rpo,tpo,sN,apo,npo,spo,jh,vle,lpo,ipo,lN,dpo,cpo,fpo,Dh,Fle,mpo,gpo,iN,hpo,ppo,upo,Gh,Tle,_po,bpo,dN,vpo,Fpo,Tpo,Oh,Mle,Mpo,Epo,cN,Cpo,wpo,Apo,Vh,Ele,Lpo,ypo,fN,xpo,$po,kpo,Xh,Cle,Spo,Rpo,mN,Ppo,Bpo,Ipo,zh,wle,Npo,qpo,gN,jpo,Dpo,Gpo,Wh,Ale,Opo,Vpo,hN,Xpo,zpo,Wpo,Qh,Lle,Qpo,Hpo,pN,Upo,Jpo,Ypo,Hh,yle,Kpo,Zpo,uN,euo,ouo,ruo,Uh,xle,tuo,auo,_N,nuo,suo,luo,Jh,$le,iuo,duo,bN,cuo,fuo,muo,Yh,kle,guo,huo,vN,puo,uuo,_uo,Kh,Sle,buo,vuo,FN,Fuo,Tuo,Muo,Zh,Rle,Euo,Cuo,TN,wuo,Auo,Luo,ep,Ple,yuo,xuo,MN,$uo,kuo,Suo,op,Ble,Ruo,Puo,EN,Buo,Iuo,Nuo,rp,quo,tp,juo,ap,qL,Duo,Ile,Guo,dGe,Si,np,Nle,jL,Ouo,qle,Vuo,cGe,yo,DL,Xuo,GL,zuo,CN,Wuo,Quo,Huo,OL,Uuo,jle,Juo,Yuo,Kuo,Ue,VL,Zuo,Dle,e_o,o_o,Ri,r_o,Gle,t_o,a_o,Ole,n_o,s_o,l_o,he,sp,Vle,i_o,d_o,wN,c_o,f_o,m_o,lp,Xle,g_o,h_o,zle,p_o,u_o,__o,ip,Wle,b_o,v_o,AN,F_o,T_o,M_o,dp,Qle,E_o,C_o,LN,w_o,A_o,L_o,cp,Hle,y_o,x_o,yN,$_o,k_o,S_o,fp,Ule,R_o,P_o,xN,B_o,I_o,N_o,mp,Jle,q_o,j_o,$N,D_o,G_o,O_o,gp,Yle,V_o,X_o,kN,z_o,W_o,Q_o,hp,Kle,H_o,U_o,SN,J_o,Y_o,K_o,pp,Zle,Z_o,e1o,RN,o1o,r1o,t1o,up,eie,a1o,n1o,PN,s1o,l1o,i1o,_p,oie,d1o,c1o,BN,f1o,m1o,g1o,bp,rie,h1o,p1o,IN,u1o,_1o,b1o,vp,tie,v1o,F1o,NN,T1o,M1o,E1o,Fp,aie,C1o,w1o,qN,A1o,L1o,y1o,Tp,nie,x1o,$1o,jN,k1o,S1o,R1o,Mp,sie,P1o,B1o,DN,I1o,N1o,q1o,Ep,j1o,Cp,D1o,wp,XL,G1o,lie,O1o,fGe,Pi,Ap,iie,zL,V1o,die,X1o,mGe,xo,WL,z1o,Bi,W1o,GN,Q1o,H1o,ON,U1o,J1o,Y1o,QL,K1o,cie,Z1o,e2o,o2o,nt,HL,r2o,fie,t2o,a2o,Ii,n2o,mie,s2o,l2o,VN,i2o,d2o,c2o,Lp,f2o,Je,UL,m2o,gie,g2o,h2o,Sa,p2o,hie,u2o,_2o,pie,b2o,v2o,uie,F2o,T2o,M2o,x,yp,_ie,E2o,C2o,XN,w2o,A2o,L2o,xp,bie,y2o,x2o,zN,$2o,k2o,S2o,$p,vie,R2o,P2o,WN,B2o,I2o,N2o,kp,Fie,q2o,j2o,QN,D2o,G2o,O2o,Sp,Tie,V2o,X2o,HN,z2o,W2o,Q2o,Rp,Mie,H2o,U2o,UN,J2o,Y2o,K2o,Pp,Eie,Z2o,ebo,JN,obo,rbo,tbo,Bp,Cie,abo,nbo,YN,sbo,lbo,ibo,Ip,wie,dbo,cbo,KN,fbo,mbo,gbo,Np,Aie,hbo,pbo,ZN,ubo,_bo,bbo,qp,Lie,vbo,Fbo,eq,Tbo,Mbo,Ebo,jp,yie,Cbo,wbo,oq,Abo,Lbo,ybo,Dp,xie,xbo,$bo,rq,kbo,Sbo,Rbo,Gp,$ie,Pbo,Bbo,tq,Ibo,Nbo,qbo,Op,kie,jbo,Dbo,aq,Gbo,Obo,Vbo,Vp,Sie,Xbo,zbo,nq,Wbo,Qbo,Hbo,Xp,Rie,Ubo,Jbo,sq,Ybo,Kbo,Zbo,zp,Pie,evo,ovo,lq,rvo,tvo,avo,Wp,Bie,nvo,svo,iq,lvo,ivo,dvo,Qp,Iie,cvo,fvo,dq,mvo,gvo,hvo,Hp,Nie,pvo,uvo,cq,_vo,bvo,vvo,Up,qie,Fvo,Tvo,fq,Mvo,Evo,Cvo,Jp,jie,wvo,Avo,mq,Lvo,yvo,xvo,Yp,Die,$vo,kvo,gq,Svo,Rvo,Pvo,Kp,Gie,Bvo,Ivo,hq,Nvo,qvo,jvo,Zp,Oie,Dvo,Gvo,pq,Ovo,Vvo,Xvo,eu,Vie,zvo,Wvo,uq,Qvo,Hvo,Uvo,ou,Xie,Jvo,Yvo,_q,Kvo,Zvo,e3o,ru,zie,o3o,r3o,bq,t3o,a3o,n3o,tu,Wie,s3o,l3o,vq,i3o,d3o,c3o,au,Qie,f3o,m3o,Fq,g3o,h3o,p3o,nu,Hie,u3o,_3o,Tq,b3o,v3o,F3o,su,Uie,T3o,M3o,Mq,E3o,C3o,w3o,Gs,Jie,A3o,L3o,Eq,y3o,x3o,Cq,$3o,k3o,S3o,lu,Yie,R3o,P3o,wq,B3o,I3o,N3o,iu,Kie,q3o,j3o,Aq,D3o,G3o,O3o,du,Zie,V3o,X3o,Lq,z3o,W3o,Q3o,cu,ede,H3o,U3o,yq,J3o,Y3o,K3o,fu,ode,Z3o,e0o,xq,o0o,r0o,t0o,mu,rde,a0o,n0o,$q,s0o,l0o,i0o,gu,tde,d0o,c0o,kq,f0o,m0o,g0o,hu,ade,h0o,p0o,Sq,u0o,_0o,b0o,pu,nde,v0o,F0o,Rq,T0o,M0o,E0o,uu,sde,C0o,w0o,Pq,A0o,L0o,y0o,_u,lde,x0o,$0o,Bq,k0o,S0o,R0o,bu,ide,P0o,B0o,Iq,I0o,N0o,q0o,vu,dde,j0o,D0o,Nq,G0o,O0o,V0o,Fu,cde,X0o,z0o,qq,W0o,Q0o,H0o,Tu,fde,U0o,J0o,jq,Y0o,K0o,Z0o,Mu,mde,eFo,oFo,Dq,rFo,tFo,aFo,Eu,gde,nFo,sFo,Gq,lFo,iFo,dFo,Cu,hde,cFo,fFo,Oq,mFo,gFo,hFo,wu,pde,pFo,uFo,Vq,_Fo,bFo,vFo,Au,ude,FFo,TFo,Xq,MFo,EFo,CFo,Lu,_de,wFo,AFo,zq,LFo,yFo,xFo,yu,bde,$Fo,kFo,Wq,SFo,RFo,PFo,xu,vde,BFo,IFo,Qq,NFo,qFo,jFo,$u,Fde,DFo,GFo,Hq,OFo,VFo,XFo,ku,Tde,zFo,WFo,Uq,QFo,HFo,UFo,Su,Mde,JFo,YFo,Jq,KFo,ZFo,e6o,Ru,Ede,o6o,r6o,Yq,t6o,a6o,n6o,Pu,Cde,s6o,l6o,Kq,i6o,d6o,c6o,Bu,wde,f6o,m6o,Zq,g6o,h6o,p6o,Iu,Ade,u6o,_6o,ej,b6o,v6o,F6o,Nu,Lde,T6o,M6o,oj,E6o,C6o,w6o,qu,yde,A6o,L6o,rj,y6o,x6o,$6o,ju,xde,k6o,S6o,tj,R6o,P6o,B6o,Du,$de,I6o,N6o,aj,q6o,j6o,D6o,Gu,kde,G6o,O6o,nj,V6o,X6o,z6o,Ou,Sde,W6o,Q6o,sj,H6o,U6o,J6o,Vu,Rde,Y6o,K6o,lj,Z6o,eTo,oTo,Xu,Pde,rTo,tTo,ij,aTo,nTo,sTo,zu,Bde,lTo,iTo,dj,dTo,cTo,fTo,Wu,Ide,mTo,gTo,cj,hTo,pTo,uTo,Qu,Nde,_To,bTo,fj,vTo,FTo,TTo,Hu,qde,MTo,ETo,mj,CTo,wTo,ATo,Uu,jde,LTo,yTo,gj,xTo,$To,kTo,Ju,Dde,STo,RTo,hj,PTo,BTo,ITo,Yu,Gde,NTo,qTo,pj,jTo,DTo,GTo,Ku,Ode,OTo,VTo,uj,XTo,zTo,WTo,Zu,Vde,QTo,HTo,_j,UTo,JTo,YTo,e_,Xde,KTo,ZTo,bj,e7o,o7o,r7o,o_,zde,t7o,a7o,vj,n7o,s7o,l7o,r_,Wde,i7o,d7o,Fj,c7o,f7o,m7o,t_,Qde,g7o,h7o,Tj,p7o,u7o,_7o,a_,Hde,b7o,v7o,Mj,F7o,T7o,M7o,n_,Ude,E7o,C7o,Ej,w7o,A7o,L7o,s_,Jde,y7o,x7o,Cj,$7o,k7o,S7o,l_,Yde,R7o,P7o,wj,B7o,I7o,N7o,i_,Kde,q7o,j7o,Aj,D7o,G7o,O7o,d_,Zde,V7o,X7o,Lj,z7o,W7o,Q7o,c_,ece,H7o,U7o,yj,J7o,Y7o,K7o,f_,oce,Z7o,eMo,xj,oMo,rMo,tMo,m_,rce,aMo,nMo,$j,sMo,lMo,iMo,g_,tce,dMo,cMo,kj,fMo,mMo,gMo,h_,ace,hMo,pMo,Sj,uMo,_Mo,bMo,p_,nce,vMo,FMo,Rj,TMo,MMo,EMo,u_,sce,CMo,wMo,Pj,AMo,LMo,yMo,__,lce,xMo,$Mo,Bj,kMo,SMo,RMo,b_,ice,PMo,BMo,Ij,IMo,NMo,qMo,v_,dce,jMo,DMo,Nj,GMo,OMo,VMo,F_,cce,XMo,zMo,qj,WMo,QMo,HMo,T_,fce,UMo,JMo,jj,YMo,KMo,ZMo,M_,mce,e4o,o4o,Dj,r4o,t4o,a4o,E_,gce,n4o,s4o,Gj,l4o,i4o,d4o,C_,hce,c4o,f4o,Oj,m4o,g4o,h4o,w_,p4o,pce,u4o,_4o,uce,b4o,v4o,A_,gGe,Ni,L_,_ce,JL,F4o,bce,T4o,hGe,$o,YL,M4o,qi,E4o,Vj,C4o,w4o,Xj,A4o,L4o,y4o,KL,x4o,vce,$4o,k4o,S4o,st,ZL,R4o,Fce,P4o,B4o,ji,I4o,Tce,N4o,q4o,zj,j4o,D4o,G4o,y_,O4o,Ye,ey,V4o,Mce,X4o,z4o,Ra,W4o,Ece,Q4o,H4o,Cce,U4o,J4o,wce,Y4o,K4o,Z4o,G,x_,Ace,eEo,oEo,Wj,rEo,tEo,aEo,$_,Lce,nEo,sEo,Qj,lEo,iEo,dEo,k_,yce,cEo,fEo,Hj,mEo,gEo,hEo,S_,xce,pEo,uEo,Uj,_Eo,bEo,vEo,R_,$ce,FEo,TEo,Jj,MEo,EEo,CEo,P_,kce,wEo,AEo,Yj,LEo,yEo,xEo,B_,Sce,$Eo,kEo,Kj,SEo,REo,PEo,I_,Rce,BEo,IEo,Zj,NEo,qEo,jEo,N_,Pce,DEo,GEo,eD,OEo,VEo,XEo,q_,Bce,zEo,WEo,oD,QEo,HEo,UEo,j_,Ice,JEo,YEo,rD,KEo,ZEo,eCo,D_,Nce,oCo,rCo,tD,tCo,aCo,nCo,G_,qce,sCo,lCo,aD,iCo,dCo,cCo,O_,jce,fCo,mCo,nD,gCo,hCo,pCo,V_,Dce,uCo,_Co,sD,bCo,vCo,FCo,X_,Gce,TCo,MCo,lD,ECo,CCo,wCo,z_,Oce,ACo,LCo,iD,yCo,xCo,$Co,W_,Vce,kCo,SCo,dD,RCo,PCo,BCo,Q_,Xce,ICo,NCo,cD,qCo,jCo,DCo,H_,zce,GCo,OCo,fD,VCo,XCo,zCo,U_,Wce,WCo,QCo,mD,HCo,UCo,JCo,J_,Qce,YCo,KCo,gD,ZCo,e5o,o5o,Y_,Hce,r5o,t5o,hD,a5o,n5o,s5o,K_,Uce,l5o,i5o,pD,d5o,c5o,f5o,Z_,Jce,m5o,g5o,uD,h5o,p5o,u5o,e1,Yce,_5o,b5o,_D,v5o,F5o,T5o,o1,Kce,M5o,E5o,bD,C5o,w5o,A5o,r1,Zce,L5o,y5o,vD,x5o,$5o,k5o,t1,efe,S5o,R5o,FD,P5o,B5o,I5o,a1,ofe,N5o,q5o,TD,j5o,D5o,G5o,n1,rfe,O5o,V5o,MD,X5o,z5o,W5o,s1,tfe,Q5o,H5o,ED,U5o,J5o,Y5o,l1,afe,K5o,Z5o,CD,ewo,owo,rwo,i1,nfe,two,awo,wD,nwo,swo,lwo,d1,sfe,iwo,dwo,AD,cwo,fwo,mwo,c1,lfe,gwo,hwo,LD,pwo,uwo,_wo,f1,ife,bwo,vwo,yD,Fwo,Two,Mwo,m1,dfe,Ewo,Cwo,xD,wwo,Awo,Lwo,g1,cfe,ywo,xwo,$D,$wo,kwo,Swo,h1,ffe,Rwo,Pwo,kD,Bwo,Iwo,Nwo,p1,mfe,qwo,jwo,SD,Dwo,Gwo,Owo,u1,gfe,Vwo,Xwo,RD,zwo,Wwo,Qwo,_1,hfe,Hwo,Uwo,PD,Jwo,Ywo,Kwo,b1,Zwo,pfe,eAo,oAo,ufe,rAo,tAo,v1,pGe,Di,F1,_fe,oy,aAo,bfe,nAo,uGe,ko,ry,sAo,Gi,lAo,BD,iAo,dAo,ID,cAo,fAo,mAo,ty,gAo,vfe,hAo,pAo,uAo,lt,ay,_Ao,Ffe,bAo,vAo,Oi,FAo,Tfe,TAo,MAo,ND,EAo,CAo,wAo,T1,AAo,Ke,ny,LAo,Mfe,yAo,xAo,Pa,$Ao,Efe,kAo,SAo,Cfe,RAo,PAo,wfe,BAo,IAo,NAo,z,M1,Afe,qAo,jAo,qD,DAo,GAo,OAo,E1,Lfe,VAo,XAo,jD,zAo,WAo,QAo,C1,yfe,HAo,UAo,DD,JAo,YAo,KAo,w1,xfe,ZAo,eLo,GD,oLo,rLo,tLo,A1,$fe,aLo,nLo,OD,sLo,lLo,iLo,L1,kfe,dLo,cLo,VD,fLo,mLo,gLo,y1,Sfe,hLo,pLo,XD,uLo,_Lo,bLo,x1,Rfe,vLo,FLo,zD,TLo,MLo,ELo,$1,Pfe,CLo,wLo,WD,ALo,LLo,yLo,k1,Bfe,xLo,$Lo,QD,kLo,SLo,RLo,S1,Ife,PLo,BLo,HD,ILo,NLo,qLo,R1,Nfe,jLo,DLo,UD,GLo,OLo,VLo,P1,qfe,XLo,zLo,JD,WLo,QLo,HLo,B1,jfe,ULo,JLo,YD,YLo,KLo,ZLo,I1,Dfe,eyo,oyo,KD,ryo,tyo,ayo,N1,Gfe,nyo,syo,ZD,lyo,iyo,dyo,q1,Ofe,cyo,fyo,eG,myo,gyo,hyo,j1,Vfe,pyo,uyo,oG,_yo,byo,vyo,D1,Xfe,Fyo,Tyo,rG,Myo,Eyo,Cyo,G1,zfe,wyo,Ayo,tG,Lyo,yyo,xyo,O1,Wfe,$yo,kyo,aG,Syo,Ryo,Pyo,V1,Qfe,Byo,Iyo,nG,Nyo,qyo,jyo,X1,Hfe,Dyo,Gyo,sG,Oyo,Vyo,Xyo,z1,Ufe,zyo,Wyo,lG,Qyo,Hyo,Uyo,W1,Jfe,Jyo,Yyo,iG,Kyo,Zyo,e8o,Q1,Yfe,o8o,r8o,dG,t8o,a8o,n8o,H1,Kfe,s8o,l8o,cG,i8o,d8o,c8o,U1,Zfe,f8o,m8o,fG,g8o,h8o,p8o,J1,eme,u8o,_8o,mG,b8o,v8o,F8o,Y1,ome,T8o,M8o,gG,E8o,C8o,w8o,K1,rme,A8o,L8o,hG,y8o,x8o,$8o,Z1,tme,k8o,S8o,pG,R8o,P8o,B8o,e2,ame,I8o,N8o,uG,q8o,j8o,D8o,o2,nme,G8o,O8o,_G,V8o,X8o,z8o,r2,sme,W8o,Q8o,bG,H8o,U8o,J8o,t2,lme,Y8o,K8o,vG,Z8o,e9o,o9o,a2,ime,r9o,t9o,FG,a9o,n9o,s9o,n2,dme,l9o,i9o,TG,d9o,c9o,f9o,s2,m9o,cme,g9o,h9o,fme,p9o,u9o,l2,_Ge,Vi,i2,mme,sy,_9o,gme,b9o,bGe,So,ly,v9o,Xi,F9o,MG,T9o,M9o,EG,E9o,C9o,w9o,iy,A9o,hme,L9o,y9o,x9o,it,dy,$9o,pme,k9o,S9o,zi,R9o,ume,P9o,B9o,CG,I9o,N9o,q9o,d2,j9o,Ze,cy,D9o,_me,G9o,O9o,Ba,V9o,bme,X9o,z9o,vme,W9o,Q9o,Fme,H9o,U9o,J9o,Q,c2,Tme,Y9o,K9o,wG,Z9o,exo,oxo,f2,Mme,rxo,txo,AG,axo,nxo,sxo,m2,Eme,lxo,ixo,LG,dxo,cxo,fxo,g2,Cme,mxo,gxo,yG,hxo,pxo,uxo,h2,wme,_xo,bxo,xG,vxo,Fxo,Txo,p2,Ame,Mxo,Exo,$G,Cxo,wxo,Axo,u2,Lme,Lxo,yxo,kG,xxo,$xo,kxo,_2,yme,Sxo,Rxo,SG,Pxo,Bxo,Ixo,b2,xme,Nxo,qxo,RG,jxo,Dxo,Gxo,v2,$me,Oxo,Vxo,PG,Xxo,zxo,Wxo,F2,kme,Qxo,Hxo,BG,Uxo,Jxo,Yxo,T2,Sme,Kxo,Zxo,IG,e$o,o$o,r$o,M2,Rme,t$o,a$o,NG,n$o,s$o,l$o,E2,Pme,i$o,d$o,qG,c$o,f$o,m$o,C2,Bme,g$o,h$o,jG,p$o,u$o,_$o,w2,Ime,b$o,v$o,DG,F$o,T$o,M$o,A2,Nme,E$o,C$o,GG,w$o,A$o,L$o,L2,qme,y$o,x$o,OG,$$o,k$o,S$o,y2,jme,R$o,P$o,VG,B$o,I$o,N$o,x2,Dme,q$o,j$o,XG,D$o,G$o,O$o,$2,Gme,V$o,X$o,zG,z$o,W$o,Q$o,k2,Ome,H$o,U$o,WG,J$o,Y$o,K$o,S2,Vme,Z$o,eko,QG,oko,rko,tko,R2,Xme,ako,nko,HG,sko,lko,iko,P2,zme,dko,cko,UG,fko,mko,gko,B2,Wme,hko,pko,JG,uko,_ko,bko,I2,Qme,vko,Fko,YG,Tko,Mko,Eko,N2,Hme,Cko,wko,KG,Ako,Lko,yko,q2,Ume,xko,$ko,ZG,kko,Sko,Rko,j2,Jme,Pko,Bko,eO,Iko,Nko,qko,D2,Yme,jko,Dko,oO,Gko,Oko,Vko,G2,Kme,Xko,zko,Zme,Wko,Qko,Hko,O2,ege,Uko,Jko,rO,Yko,Kko,Zko,V2,oge,eSo,oSo,tO,rSo,tSo,aSo,X2,rge,nSo,sSo,aO,lSo,iSo,dSo,z2,tge,cSo,fSo,nO,mSo,gSo,hSo,W2,pSo,age,uSo,_So,nge,bSo,vSo,Q2,vGe,Wi,H2,sge,fy,FSo,lge,TSo,FGe,Ro,my,MSo,Qi,ESo,sO,CSo,wSo,lO,ASo,LSo,ySo,gy,xSo,ige,$So,kSo,SSo,dt,hy,RSo,dge,PSo,BSo,Hi,ISo,cge,NSo,qSo,iO,jSo,DSo,GSo,U2,OSo,eo,py,VSo,fge,XSo,zSo,Ia,WSo,mge,QSo,HSo,gge,USo,JSo,hge,YSo,KSo,ZSo,pe,J2,pge,eRo,oRo,dO,rRo,tRo,aRo,Y2,uge,nRo,sRo,cO,lRo,iRo,dRo,K2,_ge,cRo,fRo,fO,mRo,gRo,hRo,Z2,bge,pRo,uRo,mO,_Ro,bRo,vRo,eb,vge,FRo,TRo,gO,MRo,ERo,CRo,ob,Fge,wRo,ARo,hO,LRo,yRo,xRo,rb,Tge,$Ro,kRo,pO,SRo,RRo,PRo,tb,Mge,BRo,IRo,uO,NRo,qRo,jRo,ab,Ege,DRo,GRo,_O,ORo,VRo,XRo,nb,Cge,zRo,WRo,bO,QRo,HRo,URo,sb,wge,JRo,YRo,vO,KRo,ZRo,ePo,lb,Age,oPo,rPo,FO,tPo,aPo,nPo,ib,Lge,sPo,lPo,TO,iPo,dPo,cPo,db,yge,fPo,mPo,MO,gPo,hPo,pPo,cb,xge,uPo,_Po,EO,bPo,vPo,FPo,fb,$ge,TPo,MPo,CO,EPo,CPo,wPo,mb,kge,APo,LPo,wO,yPo,xPo,$Po,gb,kPo,Sge,SPo,RPo,Rge,PPo,BPo,hb,TGe,Ui,pb,Pge,uy,IPo,Bge,NPo,MGe,Po,_y,qPo,Ji,jPo,AO,DPo,GPo,LO,OPo,VPo,XPo,by,zPo,Ige,WPo,QPo,HPo,ct,vy,UPo,Nge,JPo,YPo,Yi,KPo,qge,ZPo,eBo,yO,oBo,rBo,tBo,ub,aBo,oo,Fy,nBo,jge,sBo,lBo,Na,iBo,Dge,dBo,cBo,Gge,fBo,mBo,Oge,gBo,hBo,pBo,N,_b,Vge,uBo,_Bo,xO,bBo,vBo,FBo,bb,Xge,TBo,MBo,$O,EBo,CBo,wBo,vb,zge,ABo,LBo,kO,yBo,xBo,$Bo,Fb,Wge,kBo,SBo,SO,RBo,PBo,BBo,Tb,Qge,IBo,NBo,RO,qBo,jBo,DBo,Mb,Hge,GBo,OBo,PO,VBo,XBo,zBo,Eb,Uge,WBo,QBo,BO,HBo,UBo,JBo,Cb,Jge,YBo,KBo,IO,ZBo,eIo,oIo,wb,Yge,rIo,tIo,NO,aIo,nIo,sIo,Ab,Kge,lIo,iIo,qO,dIo,cIo,fIo,Lb,Zge,mIo,gIo,jO,hIo,pIo,uIo,yb,ehe,_Io,bIo,DO,vIo,FIo,TIo,xb,ohe,MIo,EIo,GO,CIo,wIo,AIo,$b,rhe,LIo,yIo,OO,xIo,$Io,kIo,kb,the,SIo,RIo,VO,PIo,BIo,IIo,Sb,ahe,NIo,qIo,XO,jIo,DIo,GIo,Rb,nhe,OIo,VIo,zO,XIo,zIo,WIo,Pb,she,QIo,HIo,WO,UIo,JIo,YIo,Bb,lhe,KIo,ZIo,QO,eNo,oNo,rNo,Ib,ihe,tNo,aNo,HO,nNo,sNo,lNo,Nb,dhe,iNo,dNo,UO,cNo,fNo,mNo,qb,che,gNo,hNo,JO,pNo,uNo,_No,jb,fhe,bNo,vNo,YO,FNo,TNo,MNo,Db,mhe,ENo,CNo,KO,wNo,ANo,LNo,Gb,ghe,yNo,xNo,ZO,$No,kNo,SNo,Ob,hhe,RNo,PNo,eV,BNo,INo,NNo,Vb,phe,qNo,jNo,oV,DNo,GNo,ONo,Xb,uhe,VNo,XNo,rV,zNo,WNo,QNo,zb,_he,HNo,UNo,tV,JNo,YNo,KNo,Wb,bhe,ZNo,eqo,aV,oqo,rqo,tqo,Qb,vhe,aqo,nqo,nV,sqo,lqo,iqo,Hb,Fhe,dqo,cqo,sV,fqo,mqo,gqo,Ub,The,hqo,pqo,lV,uqo,_qo,bqo,Jb,Mhe,vqo,Fqo,iV,Tqo,Mqo,Eqo,Yb,Ehe,Cqo,wqo,dV,Aqo,Lqo,yqo,Kb,Che,xqo,$qo,cV,kqo,Sqo,Rqo,Zb,whe,Pqo,Bqo,fV,Iqo,Nqo,qqo,ev,Ahe,jqo,Dqo,mV,Gqo,Oqo,Vqo,ov,Lhe,Xqo,zqo,gV,Wqo,Qqo,Hqo,rv,yhe,Uqo,Jqo,hV,Yqo,Kqo,Zqo,tv,xhe,ejo,ojo,pV,rjo,tjo,ajo,av,$he,njo,sjo,uV,ljo,ijo,djo,nv,khe,cjo,fjo,_V,mjo,gjo,hjo,sv,She,pjo,ujo,bV,_jo,bjo,vjo,lv,Rhe,Fjo,Tjo,vV,Mjo,Ejo,Cjo,iv,Phe,wjo,Ajo,FV,Ljo,yjo,xjo,dv,Bhe,$jo,kjo,TV,Sjo,Rjo,Pjo,cv,Ihe,Bjo,Ijo,MV,Njo,qjo,jjo,fv,Djo,Nhe,Gjo,Ojo,qhe,Vjo,Xjo,mv,EGe,Ki,gv,jhe,Ty,zjo,Dhe,Wjo,CGe,Bo,My,Qjo,Zi,Hjo,EV,Ujo,Jjo,CV,Yjo,Kjo,Zjo,Ey,eDo,Ghe,oDo,rDo,tDo,ft,Cy,aDo,Ohe,nDo,sDo,ed,lDo,Vhe,iDo,dDo,wV,cDo,fDo,mDo,hv,gDo,ro,wy,hDo,Xhe,pDo,uDo,qa,_Do,zhe,bDo,vDo,Whe,FDo,TDo,Qhe,MDo,EDo,CDo,Z,pv,Hhe,wDo,ADo,AV,LDo,yDo,xDo,uv,Uhe,$Do,kDo,LV,SDo,RDo,PDo,_v,Jhe,BDo,IDo,yV,NDo,qDo,jDo,bv,Yhe,DDo,GDo,xV,ODo,VDo,XDo,vv,Khe,zDo,WDo,$V,QDo,HDo,UDo,Fv,Zhe,JDo,YDo,kV,KDo,ZDo,eGo,Tv,epe,oGo,rGo,SV,tGo,aGo,nGo,Mv,ope,sGo,lGo,RV,iGo,dGo,cGo,Ev,rpe,fGo,mGo,PV,gGo,hGo,pGo,Cv,tpe,uGo,_Go,BV,bGo,vGo,FGo,wv,ape,TGo,MGo,IV,EGo,CGo,wGo,Av,npe,AGo,LGo,NV,yGo,xGo,$Go,Lv,spe,kGo,SGo,qV,RGo,PGo,BGo,yv,lpe,IGo,NGo,jV,qGo,jGo,DGo,xv,ipe,GGo,OGo,DV,VGo,XGo,zGo,$v,dpe,WGo,QGo,GV,HGo,UGo,JGo,kv,cpe,YGo,KGo,OV,ZGo,eOo,oOo,Sv,fpe,rOo,tOo,VV,aOo,nOo,sOo,Rv,mpe,lOo,iOo,XV,dOo,cOo,fOo,Pv,gpe,mOo,gOo,zV,hOo,pOo,uOo,Bv,hpe,_Oo,bOo,WV,vOo,FOo,TOo,Iv,ppe,MOo,EOo,QV,COo,wOo,AOo,Nv,upe,LOo,yOo,HV,xOo,$Oo,kOo,qv,_pe,SOo,ROo,UV,POo,BOo,IOo,jv,bpe,NOo,qOo,JV,jOo,DOo,GOo,Dv,vpe,OOo,VOo,YV,XOo,zOo,WOo,Gv,Fpe,QOo,HOo,KV,UOo,JOo,YOo,Ov,Tpe,KOo,ZOo,ZV,eVo,oVo,rVo,Vv,Mpe,tVo,aVo,eX,nVo,sVo,lVo,Xv,iVo,Epe,dVo,cVo,Cpe,fVo,mVo,zv,wGe,od,Wv,wpe,Ay,gVo,Ape,hVo,AGe,Io,Ly,pVo,rd,uVo,oX,_Vo,bVo,rX,vVo,FVo,TVo,yy,MVo,Lpe,EVo,CVo,wVo,mt,xy,AVo,ype,LVo,yVo,td,xVo,xpe,$Vo,kVo,tX,SVo,RVo,PVo,Qv,BVo,to,$y,IVo,$pe,NVo,qVo,ja,jVo,kpe,DVo,GVo,Spe,OVo,VVo,Rpe,XVo,zVo,WVo,Zr,Hv,Ppe,QVo,HVo,aX,UVo,JVo,YVo,Uv,Bpe,KVo,ZVo,nX,eXo,oXo,rXo,Jv,Ipe,tXo,aXo,sX,nXo,sXo,lXo,Yv,Npe,iXo,dXo,lX,cXo,fXo,mXo,Kv,qpe,gXo,hXo,iX,pXo,uXo,_Xo,Zv,bXo,jpe,vXo,FXo,Dpe,TXo,MXo,e3,LGe,ad,o3,Gpe,ky,EXo,Ope,CXo,yGe,No,Sy,wXo,nd,AXo,dX,LXo,yXo,cX,xXo,$Xo,kXo,Ry,SXo,Vpe,RXo,PXo,BXo,gt,Py,IXo,Xpe,NXo,qXo,sd,jXo,zpe,DXo,GXo,fX,OXo,VXo,XXo,r3,zXo,ao,By,WXo,Wpe,QXo,HXo,Da,UXo,Qpe,JXo,YXo,Hpe,KXo,ZXo,Upe,ezo,ozo,rzo,H,t3,Jpe,tzo,azo,mX,nzo,szo,lzo,a3,Ype,izo,dzo,gX,czo,fzo,mzo,n3,Kpe,gzo,hzo,hX,pzo,uzo,_zo,s3,Zpe,bzo,vzo,pX,Fzo,Tzo,Mzo,l3,eue,Ezo,Czo,uX,wzo,Azo,Lzo,i3,oue,yzo,xzo,_X,$zo,kzo,Szo,d3,rue,Rzo,Pzo,bX,Bzo,Izo,Nzo,c3,tue,qzo,jzo,vX,Dzo,Gzo,Ozo,f3,aue,Vzo,Xzo,FX,zzo,Wzo,Qzo,m3,nue,Hzo,Uzo,TX,Jzo,Yzo,Kzo,g3,sue,Zzo,eWo,MX,oWo,rWo,tWo,h3,lue,aWo,nWo,EX,sWo,lWo,iWo,p3,iue,dWo,cWo,CX,fWo,mWo,gWo,u3,due,hWo,pWo,wX,uWo,_Wo,bWo,_3,cue,vWo,FWo,AX,TWo,MWo,EWo,b3,fue,CWo,wWo,LX,AWo,LWo,yWo,v3,mue,xWo,$Wo,yX,kWo,SWo,RWo,F3,gue,PWo,BWo,xX,IWo,NWo,qWo,T3,hue,jWo,DWo,$X,GWo,OWo,VWo,M3,pue,XWo,zWo,kX,WWo,QWo,HWo,E3,uue,UWo,JWo,SX,YWo,KWo,ZWo,C3,_ue,eQo,oQo,RX,rQo,tQo,aQo,w3,bue,nQo,sQo,PX,lQo,iQo,dQo,A3,vue,cQo,fQo,BX,mQo,gQo,hQo,L3,Fue,pQo,uQo,IX,_Qo,bQo,vQo,y3,Tue,FQo,TQo,NX,MQo,EQo,CQo,x3,Mue,wQo,AQo,qX,LQo,yQo,xQo,$3,Eue,$Qo,kQo,jX,SQo,RQo,PQo,k3,Cue,BQo,IQo,DX,NQo,qQo,jQo,S3,wue,DQo,GQo,GX,OQo,VQo,XQo,R3,Aue,zQo,WQo,OX,QQo,HQo,UQo,P3,Lue,JQo,YQo,VX,KQo,ZQo,eHo,B3,yue,oHo,rHo,XX,tHo,aHo,nHo,I3,xue,sHo,lHo,zX,iHo,dHo,cHo,N3,$ue,fHo,mHo,WX,gHo,hHo,pHo,q3,uHo,kue,_Ho,bHo,Sue,vHo,FHo,j3,xGe,ld,D3,Rue,Iy,THo,Pue,MHo,$Ge,qo,Ny,EHo,id,CHo,QX,wHo,AHo,HX,LHo,yHo,xHo,qy,$Ho,Bue,kHo,SHo,RHo,ht,jy,PHo,Iue,BHo,IHo,dd,NHo,Nue,qHo,jHo,UX,DHo,GHo,OHo,G3,VHo,no,Dy,XHo,que,zHo,WHo,Ga,QHo,jue,HHo,UHo,Due,JHo,YHo,Gue,KHo,ZHo,eUo,V,O3,Oue,oUo,rUo,JX,tUo,aUo,nUo,V3,Vue,sUo,lUo,YX,iUo,dUo,cUo,X3,Xue,fUo,mUo,KX,gUo,hUo,pUo,z3,zue,uUo,_Uo,ZX,bUo,vUo,FUo,W3,Wue,TUo,MUo,ez,EUo,CUo,wUo,Q3,Que,AUo,LUo,oz,yUo,xUo,$Uo,H3,Hue,kUo,SUo,rz,RUo,PUo,BUo,U3,Uue,IUo,NUo,tz,qUo,jUo,DUo,J3,Jue,GUo,OUo,az,VUo,XUo,zUo,Y3,Yue,WUo,QUo,nz,HUo,UUo,JUo,K3,Kue,YUo,KUo,sz,ZUo,eJo,oJo,Z3,Zue,rJo,tJo,lz,aJo,nJo,sJo,e0,e_e,lJo,iJo,iz,dJo,cJo,fJo,o0,o_e,mJo,gJo,dz,hJo,pJo,uJo,r0,r_e,_Jo,bJo,cz,vJo,FJo,TJo,t0,t_e,MJo,EJo,fz,CJo,wJo,AJo,a0,a_e,LJo,yJo,mz,xJo,$Jo,kJo,n0,n_e,SJo,RJo,gz,PJo,BJo,IJo,s0,s_e,NJo,qJo,hz,jJo,DJo,GJo,l0,l_e,OJo,VJo,pz,XJo,zJo,WJo,i0,i_e,QJo,HJo,uz,UJo,JJo,YJo,d0,d_e,KJo,ZJo,_z,eYo,oYo,rYo,c0,c_e,tYo,aYo,bz,nYo,sYo,lYo,f0,f_e,iYo,dYo,vz,cYo,fYo,mYo,m0,m_e,gYo,hYo,Fz,pYo,uYo,_Yo,g0,g_e,bYo,vYo,Tz,FYo,TYo,MYo,h0,h_e,EYo,CYo,Mz,wYo,AYo,LYo,p0,p_e,yYo,xYo,Ez,$Yo,kYo,SYo,u0,u_e,RYo,PYo,Cz,BYo,IYo,NYo,_0,__e,qYo,jYo,wz,DYo,GYo,OYo,b0,b_e,VYo,XYo,Az,zYo,WYo,QYo,v0,v_e,HYo,UYo,Lz,JYo,YYo,KYo,F0,F_e,ZYo,eKo,yz,oKo,rKo,tKo,T0,T_e,aKo,nKo,xz,sKo,lKo,iKo,M0,M_e,dKo,cKo,$z,fKo,mKo,gKo,E0,E_e,hKo,pKo,kz,uKo,_Ko,bKo,C0,C_e,vKo,FKo,Sz,TKo,MKo,EKo,w0,w_e,CKo,wKo,Rz,AKo,LKo,yKo,A0,A_e,xKo,$Ko,Pz,kKo,SKo,RKo,L0,L_e,PKo,BKo,Bz,IKo,NKo,qKo,y0,jKo,y_e,DKo,GKo,x_e,OKo,VKo,x0,kGe,cd,$0,$_e,Gy,XKo,k_e,zKo,SGe,jo,Oy,WKo,fd,QKo,Iz,HKo,UKo,Nz,JKo,YKo,KKo,Vy,ZKo,S_e,eZo,oZo,rZo,pt,Xy,tZo,R_e,aZo,nZo,md,sZo,P_e,lZo,iZo,qz,dZo,cZo,fZo,k0,mZo,so,zy,gZo,B_e,hZo,pZo,Oa,uZo,I_e,_Zo,bZo,N_e,vZo,FZo,q_e,TZo,MZo,EZo,j_e,S0,D_e,CZo,wZo,jz,AZo,LZo,yZo,R0,xZo,G_e,$Zo,kZo,O_e,SZo,RZo,P0,RGe,gd,B0,V_e,Wy,PZo,X_e,BZo,PGe,Do,Qy,IZo,hd,NZo,Dz,qZo,jZo,Gz,DZo,GZo,OZo,Hy,VZo,z_e,XZo,zZo,WZo,ut,Uy,QZo,W_e,HZo,UZo,pd,JZo,Q_e,YZo,KZo,Oz,ZZo,eer,oer,I0,rer,lo,Jy,ter,H_e,aer,ner,Va,ser,U_e,ler,ier,J_e,der,cer,Y_e,fer,mer,ger,Fe,N0,K_e,her,per,Vz,uer,_er,ber,q0,Z_e,ver,Fer,Xz,Ter,Mer,Eer,j0,e1e,Cer,wer,zz,Aer,Ler,yer,D0,o1e,xer,$er,Wz,ker,Ser,Rer,Os,r1e,Per,Ber,Qz,Ier,Ner,Hz,qer,jer,Der,G0,t1e,Ger,Oer,Uz,Ver,Xer,zer,Vs,a1e,Wer,Qer,Jz,Her,Uer,Yz,Jer,Yer,Ker,_t,n1e,Zer,eor,Kz,oor,ror,Zz,tor,aor,eW,nor,sor,lor,O0,s1e,ior,dor,oW,cor,mor,gor,V0,l1e,hor,por,rW,uor,_or,bor,X0,i1e,vor,For,tW,Tor,Mor,Eor,z0,d1e,Cor,wor,aW,Aor,Lor,yor,W0,c1e,xor,$or,nW,kor,Sor,Ror,Q0,f1e,Por,Bor,sW,Ior,Nor,qor,H0,m1e,jor,Dor,lW,Gor,Oor,Vor,U0,Xor,g1e,zor,Wor,h1e,Qor,Hor,J0,BGe,ud,Y0,p1e,Yy,Uor,u1e,Jor,IGe,Go,Ky,Yor,_d,Kor,iW,Zor,err,dW,orr,rrr,trr,Zy,arr,_1e,nrr,srr,lrr,bt,e8,irr,b1e,drr,crr,bd,frr,v1e,mrr,grr,cW,hrr,prr,urr,K0,_rr,io,o8,brr,F1e,vrr,Frr,Xa,Trr,T1e,Mrr,Err,M1e,Crr,wrr,E1e,Arr,Lrr,yrr,C1e,Z0,w1e,xrr,$rr,fW,krr,Srr,Rrr,eF,Prr,A1e,Brr,Irr,L1e,Nrr,qrr,oF,NGe,vd,rF,y1e,r8,jrr,x1e,Drr,qGe,Oo,t8,Grr,Fd,Orr,mW,Vrr,Xrr,gW,zrr,Wrr,Qrr,a8,Hrr,$1e,Urr,Jrr,Yrr,vt,n8,Krr,k1e,Zrr,etr,Td,otr,S1e,rtr,ttr,hW,atr,ntr,str,tF,ltr,co,s8,itr,R1e,dtr,ctr,za,ftr,P1e,mtr,gtr,B1e,htr,ptr,I1e,utr,_tr,btr,N1e,aF,q1e,vtr,Ftr,pW,Ttr,Mtr,Etr,nF,Ctr,j1e,wtr,Atr,D1e,Ltr,ytr,sF,jGe,Md,lF,G1e,l8,xtr,O1e,$tr,DGe,Vo,i8,ktr,Ed,Str,uW,Rtr,Ptr,_W,Btr,Itr,Ntr,d8,qtr,V1e,jtr,Dtr,Gtr,Ft,c8,Otr,X1e,Vtr,Xtr,Cd,ztr,z1e,Wtr,Qtr,bW,Htr,Utr,Jtr,iF,Ytr,fo,f8,Ktr,W1e,Ztr,ear,Wa,oar,Q1e,rar,tar,H1e,aar,nar,U1e,sar,lar,iar,Pe,dF,J1e,dar,car,vW,far,mar,gar,cF,Y1e,har,par,FW,uar,_ar,bar,fF,K1e,Far,Tar,TW,Mar,Ear,Car,mF,Z1e,war,Aar,MW,Lar,yar,xar,gF,e2e,$ar,kar,EW,Sar,Rar,Par,hF,o2e,Bar,Iar,CW,Nar,qar,jar,pF,r2e,Dar,Gar,wW,Oar,Var,Xar,uF,t2e,zar,War,AW,Qar,Har,Uar,_F,a2e,Jar,Yar,LW,Kar,Zar,enr,bF,onr,n2e,rnr,tnr,s2e,anr,nnr,vF,GGe,wd,FF,l2e,m8,snr,i2e,lnr,OGe,Xo,g8,inr,Ad,dnr,yW,cnr,fnr,xW,mnr,gnr,hnr,h8,pnr,d2e,unr,_nr,bnr,Tt,p8,vnr,c2e,Fnr,Tnr,Ld,Mnr,f2e,Enr,Cnr,$W,wnr,Anr,Lnr,TF,ynr,mo,u8,xnr,m2e,$nr,knr,Qa,Snr,g2e,Rnr,Pnr,h2e,Bnr,Inr,p2e,Nnr,qnr,jnr,et,MF,u2e,Dnr,Gnr,kW,Onr,Vnr,Xnr,EF,_2e,znr,Wnr,SW,Qnr,Hnr,Unr,CF,b2e,Jnr,Ynr,RW,Knr,Znr,esr,wF,v2e,osr,rsr,PW,tsr,asr,nsr,AF,F2e,ssr,lsr,BW,isr,dsr,csr,LF,fsr,T2e,msr,gsr,M2e,hsr,psr,yF,VGe,yd,xF,E2e,_8,usr,C2e,_sr,XGe,zo,b8,bsr,xd,vsr,IW,Fsr,Tsr,NW,Msr,Esr,Csr,v8,wsr,w2e,Asr,Lsr,ysr,Mt,F8,xsr,A2e,$sr,ksr,$d,Ssr,L2e,Rsr,Psr,qW,Bsr,Isr,Nsr,$F,qsr,go,T8,jsr,y2e,Dsr,Gsr,Ha,Osr,x2e,Vsr,Xsr,$2e,zsr,Wsr,k2e,Qsr,Hsr,Usr,Le,kF,S2e,Jsr,Ysr,jW,Ksr,Zsr,elr,SF,R2e,olr,rlr,DW,tlr,alr,nlr,RF,P2e,slr,llr,GW,ilr,dlr,clr,PF,B2e,flr,mlr,OW,glr,hlr,plr,BF,I2e,ulr,_lr,VW,blr,vlr,Flr,IF,N2e,Tlr,Mlr,XW,Elr,Clr,wlr,NF,q2e,Alr,Llr,zW,ylr,xlr,$lr,qF,j2e,klr,Slr,WW,Rlr,Plr,Blr,jF,D2e,Ilr,Nlr,QW,qlr,jlr,Dlr,DF,G2e,Glr,Olr,HW,Vlr,Xlr,zlr,GF,Wlr,O2e,Qlr,Hlr,V2e,Ulr,Jlr,OF,zGe,kd,VF,X2e,M8,Ylr,z2e,Klr,WGe,Wo,E8,Zlr,Sd,eir,UW,oir,rir,JW,tir,air,nir,C8,sir,W2e,lir,iir,dir,Et,w8,cir,Q2e,fir,mir,Rd,gir,H2e,hir,pir,YW,uir,_ir,bir,XF,vir,ho,A8,Fir,U2e,Tir,Mir,Ua,Eir,J2e,Cir,wir,Y2e,Air,Lir,K2e,yir,xir,$ir,L8,zF,Z2e,kir,Sir,KW,Rir,Pir,Bir,WF,ebe,Iir,Nir,ZW,qir,jir,Dir,QF,Gir,obe,Oir,Vir,rbe,Xir,zir,HF,QGe,Pd,UF,tbe,y8,Wir,abe,Qir,HGe,Qo,x8,Hir,Bd,Uir,eQ,Jir,Yir,oQ,Kir,Zir,edr,$8,odr,nbe,rdr,tdr,adr,Ct,k8,ndr,sbe,sdr,ldr,Id,idr,lbe,ddr,cdr,rQ,fdr,mdr,gdr,JF,hdr,po,S8,pdr,ibe,udr,_dr,Ja,bdr,dbe,vdr,Fdr,cbe,Tdr,Mdr,fbe,Edr,Cdr,wdr,ot,YF,mbe,Adr,Ldr,tQ,ydr,xdr,$dr,KF,gbe,kdr,Sdr,aQ,Rdr,Pdr,Bdr,ZF,hbe,Idr,Ndr,nQ,qdr,jdr,Ddr,e6,pbe,Gdr,Odr,sQ,Vdr,Xdr,zdr,o6,ube,Wdr,Qdr,lQ,Hdr,Udr,Jdr,r6,Ydr,_be,Kdr,Zdr,bbe,ecr,ocr,t6,UGe,Nd,a6,vbe,R8,rcr,Fbe,tcr,JGe,Ho,P8,acr,qd,ncr,iQ,scr,lcr,dQ,icr,dcr,ccr,B8,fcr,Tbe,mcr,gcr,hcr,wt,I8,pcr,Mbe,ucr,_cr,jd,bcr,Ebe,vcr,Fcr,cQ,Tcr,Mcr,Ecr,n6,Ccr,uo,N8,wcr,Cbe,Acr,Lcr,Ya,ycr,wbe,xcr,$cr,Abe,kcr,Scr,Lbe,Rcr,Pcr,Bcr,Dd,s6,ybe,Icr,Ncr,fQ,qcr,jcr,Dcr,l6,xbe,Gcr,Ocr,mQ,Vcr,Xcr,zcr,i6,$be,Wcr,Qcr,gQ,Hcr,Ucr,Jcr,d6,Ycr,kbe,Kcr,Zcr,Sbe,efr,ofr,c6,YGe,Gd,f6,Rbe,q8,rfr,Pbe,tfr,KGe,Uo,j8,afr,Od,nfr,hQ,sfr,lfr,pQ,ifr,dfr,cfr,D8,ffr,Bbe,mfr,gfr,hfr,At,G8,pfr,Ibe,ufr,_fr,Vd,bfr,Nbe,vfr,Ffr,uQ,Tfr,Mfr,Efr,m6,Cfr,_o,O8,wfr,qbe,Afr,Lfr,Ka,yfr,jbe,xfr,$fr,Dbe,kfr,Sfr,Gbe,Rfr,Pfr,Bfr,V8,g6,Obe,Ifr,Nfr,_Q,qfr,jfr,Dfr,h6,Vbe,Gfr,Ofr,bQ,Vfr,Xfr,zfr,p6,Wfr,Xbe,Qfr,Hfr,zbe,Ufr,Jfr,u6,ZGe,Xd,_6,Wbe,X8,Yfr,Qbe,Kfr,eOe,Jo,z8,Zfr,zd,emr,vQ,omr,rmr,FQ,tmr,amr,nmr,W8,smr,Hbe,lmr,imr,dmr,Lt,Q8,cmr,Ube,fmr,mmr,Wd,gmr,Jbe,hmr,pmr,TQ,umr,_mr,bmr,b6,vmr,bo,H8,Fmr,Ybe,Tmr,Mmr,Za,Emr,Kbe,Cmr,wmr,Zbe,Amr,Lmr,eve,ymr,xmr,$mr,ove,v6,rve,kmr,Smr,MQ,Rmr,Pmr,Bmr,F6,Imr,tve,Nmr,qmr,ave,jmr,Dmr,T6,oOe,Qd,M6,nve,U8,Gmr,sve,Omr,rOe,Yo,J8,Vmr,Hd,Xmr,EQ,zmr,Wmr,CQ,Qmr,Hmr,Umr,Y8,Jmr,lve,Ymr,Kmr,Zmr,yt,K8,egr,ive,ogr,rgr,Ud,tgr,dve,agr,ngr,wQ,sgr,lgr,igr,E6,dgr,vo,Z8,cgr,cve,fgr,mgr,en,ggr,fve,hgr,pgr,mve,ugr,_gr,gve,bgr,vgr,Fgr,on,C6,hve,Tgr,Mgr,AQ,Egr,Cgr,wgr,w6,pve,Agr,Lgr,LQ,ygr,xgr,$gr,A6,uve,kgr,Sgr,yQ,Rgr,Pgr,Bgr,L6,_ve,Igr,Ngr,xQ,qgr,jgr,Dgr,y6,Ggr,bve,Ogr,Vgr,vve,Xgr,zgr,x6,tOe,Jd,$6,Fve,e9,Wgr,Tve,Qgr,aOe,Ko,o9,Hgr,Yd,Ugr,$Q,Jgr,Ygr,kQ,Kgr,Zgr,ehr,r9,ohr,Mve,rhr,thr,ahr,xt,t9,nhr,Eve,shr,lhr,Kd,ihr,Cve,dhr,chr,SQ,fhr,mhr,ghr,k6,hhr,Fo,a9,phr,wve,uhr,_hr,rn,bhr,Ave,vhr,Fhr,Lve,Thr,Mhr,yve,Ehr,Chr,whr,xve,S6,$ve,Ahr,Lhr,RQ,yhr,xhr,$hr,R6,khr,kve,Shr,Rhr,Sve,Phr,Bhr,P6,nOe,Zd,B6,Rve,n9,Ihr,Pve,Nhr,sOe,Zo,s9,qhr,ec,jhr,PQ,Dhr,Ghr,BQ,Ohr,Vhr,Xhr,l9,zhr,Bve,Whr,Qhr,Hhr,$t,i9,Uhr,Ive,Jhr,Yhr,oc,Khr,Nve,Zhr,epr,IQ,opr,rpr,tpr,I6,apr,Lr,d9,npr,qve,spr,lpr,tn,ipr,jve,dpr,cpr,Dve,fpr,mpr,Gve,gpr,hpr,ppr,q,N6,Ove,upr,_pr,NQ,bpr,vpr,Fpr,q6,Vve,Tpr,Mpr,qQ,Epr,Cpr,wpr,j6,Xve,Apr,Lpr,jQ,ypr,xpr,$pr,D6,zve,kpr,Spr,DQ,Rpr,Ppr,Bpr,G6,Wve,Ipr,Npr,GQ,qpr,jpr,Dpr,O6,Qve,Gpr,Opr,OQ,Vpr,Xpr,zpr,V6,Hve,Wpr,Qpr,VQ,Hpr,Upr,Jpr,X6,Uve,Ypr,Kpr,XQ,Zpr,eur,our,z6,Jve,rur,tur,zQ,aur,nur,sur,W6,Yve,lur,iur,WQ,dur,cur,fur,Q6,Kve,mur,gur,QQ,hur,pur,uur,H6,Zve,_ur,bur,HQ,vur,Fur,Tur,U6,e3e,Mur,Eur,UQ,Cur,wur,Aur,J6,o3e,Lur,yur,JQ,xur,$ur,kur,Y6,r3e,Sur,Rur,YQ,Pur,Bur,Iur,K6,t3e,Nur,qur,KQ,jur,Dur,Gur,Z6,a3e,Our,Vur,ZQ,Xur,zur,Wur,Xs,n3e,Qur,Hur,eH,Uur,Jur,oH,Yur,Kur,Zur,eT,s3e,e_r,o_r,rH,r_r,t_r,a_r,oT,l3e,n_r,s_r,tH,l_r,i_r,d_r,rT,i3e,c_r,f_r,aH,m_r,g_r,h_r,tT,d3e,p_r,u_r,nH,__r,b_r,v_r,aT,c3e,F_r,T_r,sH,M_r,E_r,C_r,nT,f3e,w_r,A_r,lH,L_r,y_r,x_r,sT,m3e,$_r,k_r,iH,S_r,R_r,P_r,lT,g3e,B_r,I_r,dH,N_r,q_r,j_r,iT,h3e,D_r,G_r,cH,O_r,V_r,X_r,dT,p3e,z_r,W_r,fH,Q_r,H_r,U_r,cT,u3e,J_r,Y_r,mH,K_r,Z_r,e1r,fT,_3e,o1r,r1r,gH,t1r,a1r,n1r,mT,b3e,s1r,l1r,hH,i1r,d1r,c1r,gT,v3e,f1r,m1r,pH,g1r,h1r,p1r,hT,F3e,u1r,_1r,uH,b1r,v1r,F1r,pT,T3e,T1r,M1r,_H,E1r,C1r,w1r,uT,M3e,A1r,L1r,bH,y1r,x1r,$1r,_T,E3e,k1r,S1r,vH,R1r,P1r,B1r,bT,C3e,I1r,N1r,FH,q1r,j1r,D1r,vT,w3e,G1r,O1r,TH,V1r,X1r,z1r,FT,A3e,W1r,Q1r,MH,H1r,U1r,J1r,TT,L3e,Y1r,K1r,EH,Z1r,e2r,o2r,MT,y3e,r2r,t2r,CH,a2r,n2r,s2r,ET,x3e,l2r,i2r,wH,d2r,c2r,f2r,CT,$3e,m2r,g2r,AH,h2r,p2r,u2r,wT,k3e,_2r,b2r,LH,v2r,F2r,T2r,AT,S3e,M2r,E2r,yH,C2r,w2r,A2r,LT,R3e,L2r,y2r,xH,x2r,$2r,k2r,yT,P3e,S2r,R2r,$H,P2r,B2r,I2r,xT,lOe,rc,$T,B3e,c9,N2r,I3e,q2r,iOe,er,f9,j2r,tc,D2r,kH,G2r,O2r,SH,V2r,X2r,z2r,m9,W2r,N3e,Q2r,H2r,U2r,kt,g9,J2r,q3e,Y2r,K2r,ac,Z2r,j3e,ebr,obr,RH,rbr,tbr,abr,kT,nbr,yr,h9,sbr,D3e,lbr,ibr,an,dbr,G3e,cbr,fbr,O3e,mbr,gbr,V3e,hbr,pbr,ubr,se,ST,X3e,_br,bbr,PH,vbr,Fbr,Tbr,RT,z3e,Mbr,Ebr,BH,Cbr,wbr,Abr,PT,W3e,Lbr,ybr,IH,xbr,$br,kbr,BT,Q3e,Sbr,Rbr,NH,Pbr,Bbr,Ibr,IT,H3e,Nbr,qbr,qH,jbr,Dbr,Gbr,NT,U3e,Obr,Vbr,jH,Xbr,zbr,Wbr,qT,J3e,Qbr,Hbr,DH,Ubr,Jbr,Ybr,jT,Y3e,Kbr,Zbr,GH,evr,ovr,rvr,DT,K3e,tvr,avr,OH,nvr,svr,lvr,GT,Z3e,ivr,dvr,VH,cvr,fvr,mvr,OT,e0e,gvr,hvr,XH,pvr,uvr,_vr,VT,o0e,bvr,vvr,zH,Fvr,Tvr,Mvr,XT,r0e,Evr,Cvr,WH,wvr,Avr,Lvr,zT,t0e,yvr,xvr,QH,$vr,kvr,Svr,WT,a0e,Rvr,Pvr,HH,Bvr,Ivr,Nvr,QT,n0e,qvr,jvr,UH,Dvr,Gvr,Ovr,HT,s0e,Vvr,Xvr,JH,zvr,Wvr,Qvr,UT,l0e,Hvr,Uvr,YH,Jvr,Yvr,Kvr,JT,i0e,Zvr,e3r,KH,o3r,r3r,t3r,YT,d0e,a3r,n3r,ZH,s3r,l3r,i3r,KT,c0e,d3r,c3r,eU,f3r,m3r,g3r,ZT,f0e,h3r,p3r,oU,u3r,_3r,b3r,e7,m0e,v3r,F3r,rU,T3r,M3r,E3r,o7,dOe,nc,r7,g0e,p9,C3r,h0e,w3r,cOe,or,u9,A3r,sc,L3r,tU,y3r,x3r,aU,$3r,k3r,S3r,_9,R3r,p0e,P3r,B3r,I3r,St,b9,N3r,u0e,q3r,j3r,lc,D3r,_0e,G3r,O3r,nU,V3r,X3r,z3r,t7,W3r,xr,v9,Q3r,b0e,H3r,U3r,nn,J3r,v0e,Y3r,K3r,F0e,Z3r,e0r,T0e,o0r,r0r,t0r,Me,a7,M0e,a0r,n0r,sU,s0r,l0r,i0r,n7,E0e,d0r,c0r,lU,f0r,m0r,g0r,s7,C0e,h0r,p0r,iU,u0r,_0r,b0r,l7,w0e,v0r,F0r,dU,T0r,M0r,E0r,i7,A0e,C0r,w0r,cU,A0r,L0r,y0r,d7,L0e,x0r,$0r,fU,k0r,S0r,R0r,c7,y0e,P0r,B0r,mU,I0r,N0r,q0r,f7,x0e,j0r,D0r,gU,G0r,O0r,V0r,m7,$0e,X0r,z0r,hU,W0r,Q0r,H0r,g7,k0e,U0r,J0r,pU,Y0r,K0r,Z0r,h7,S0e,eFr,oFr,uU,rFr,tFr,aFr,p7,R0e,nFr,sFr,_U,lFr,iFr,dFr,u7,P0e,cFr,fFr,bU,mFr,gFr,hFr,_7,fOe,ic,b7,B0e,F9,pFr,I0e,uFr,mOe,rr,T9,_Fr,dc,bFr,vU,vFr,FFr,FU,TFr,MFr,EFr,M9,CFr,N0e,wFr,AFr,LFr,Rt,E9,yFr,q0e,xFr,$Fr,cc,kFr,j0e,SFr,RFr,TU,PFr,BFr,IFr,v7,NFr,$r,C9,qFr,D0e,jFr,DFr,sn,GFr,G0e,OFr,VFr,O0e,XFr,zFr,V0e,WFr,QFr,HFr,ln,F7,X0e,UFr,JFr,MU,YFr,KFr,ZFr,T7,z0e,e6r,o6r,EU,r6r,t6r,a6r,M7,W0e,n6r,s6r,CU,l6r,i6r,d6r,E7,Q0e,c6r,f6r,wU,m6r,g6r,h6r,C7,gOe,fc,w7,H0e,w9,p6r,U0e,u6r,hOe,tr,A9,_6r,mc,b6r,AU,v6r,F6r,LU,T6r,M6r,E6r,L9,C6r,J0e,w6r,A6r,L6r,Pt,y9,y6r,Y0e,x6r,$6r,gc,k6r,K0e,S6r,R6r,yU,P6r,B6r,I6r,A7,N6r,kr,x9,q6r,Z0e,j6r,D6r,dn,G6r,eFe,O6r,V6r,oFe,X6r,z6r,rFe,W6r,Q6r,H6r,ie,L7,tFe,U6r,J6r,xU,Y6r,K6r,Z6r,y7,aFe,eTr,oTr,$U,rTr,tTr,aTr,x7,nFe,nTr,sTr,kU,lTr,iTr,dTr,$7,sFe,cTr,fTr,SU,mTr,gTr,hTr,k7,lFe,pTr,uTr,RU,_Tr,bTr,vTr,S7,iFe,FTr,TTr,PU,MTr,ETr,CTr,R7,dFe,wTr,ATr,BU,LTr,yTr,xTr,P7,cFe,$Tr,kTr,IU,STr,RTr,PTr,B7,fFe,BTr,ITr,NU,NTr,qTr,jTr,I7,mFe,DTr,GTr,qU,OTr,VTr,XTr,N7,gFe,zTr,WTr,jU,QTr,HTr,UTr,q7,hFe,JTr,YTr,DU,KTr,ZTr,e7r,j7,pFe,o7r,r7r,GU,t7r,a7r,n7r,D7,uFe,s7r,l7r,OU,i7r,d7r,c7r,G7,_Fe,f7r,m7r,VU,g7r,h7r,p7r,O7,bFe,u7r,_7r,XU,b7r,v7r,F7r,V7,vFe,T7r,M7r,zU,E7r,C7r,w7r,X7,FFe,A7r,L7r,WU,y7r,x7r,$7r,z7,TFe,k7r,S7r,QU,R7r,P7r,B7r,W7,MFe,I7r,N7r,HU,q7r,j7r,D7r,Q7,pOe,hc,H7,EFe,$9,G7r,CFe,O7r,uOe,ar,k9,V7r,pc,X7r,UU,z7r,W7r,JU,Q7r,H7r,U7r,S9,J7r,wFe,Y7r,K7r,Z7r,Bt,R9,eMr,AFe,oMr,rMr,uc,tMr,LFe,aMr,nMr,YU,sMr,lMr,iMr,U7,dMr,Sr,P9,cMr,yFe,fMr,mMr,cn,gMr,xFe,hMr,pMr,$Fe,uMr,_Mr,kFe,bMr,vMr,FMr,ye,J7,SFe,TMr,MMr,KU,EMr,CMr,wMr,Y7,RFe,AMr,LMr,ZU,yMr,xMr,$Mr,K7,PFe,kMr,SMr,eJ,RMr,PMr,BMr,Z7,BFe,IMr,NMr,oJ,qMr,jMr,DMr,eM,IFe,GMr,OMr,rJ,VMr,XMr,zMr,oM,NFe,WMr,QMr,tJ,HMr,UMr,JMr,rM,qFe,YMr,KMr,aJ,ZMr,e4r,o4r,tM,jFe,r4r,t4r,nJ,a4r,n4r,s4r,aM,DFe,l4r,i4r,sJ,d4r,c4r,f4r,nM,GFe,m4r,g4r,lJ,h4r,p4r,u4r,sM,_Oe,_c,lM,OFe,B9,_4r,VFe,b4r,bOe,nr,I9,v4r,bc,F4r,iJ,T4r,M4r,dJ,E4r,C4r,w4r,N9,A4r,XFe,L4r,y4r,x4r,It,q9,$4r,zFe,k4r,S4r,vc,R4r,WFe,P4r,B4r,cJ,I4r,N4r,q4r,iM,j4r,Rr,j9,D4r,QFe,G4r,O4r,fn,V4r,HFe,X4r,z4r,UFe,W4r,Q4r,JFe,H4r,U4r,J4r,te,dM,YFe,Y4r,K4r,fJ,Z4r,eEr,oEr,cM,KFe,rEr,tEr,mJ,aEr,nEr,sEr,fM,ZFe,lEr,iEr,gJ,dEr,cEr,fEr,mM,e6e,mEr,gEr,hJ,hEr,pEr,uEr,gM,o6e,_Er,bEr,pJ,vEr,FEr,TEr,hM,r6e,MEr,EEr,uJ,CEr,wEr,AEr,pM,t6e,LEr,yEr,_J,xEr,$Er,kEr,uM,a6e,SEr,REr,bJ,PEr,BEr,IEr,_M,n6e,NEr,qEr,vJ,jEr,DEr,GEr,bM,s6e,OEr,VEr,FJ,XEr,zEr,WEr,vM,l6e,QEr,HEr,TJ,UEr,JEr,YEr,FM,i6e,KEr,ZEr,MJ,eCr,oCr,rCr,TM,d6e,tCr,aCr,EJ,nCr,sCr,lCr,MM,c6e,iCr,dCr,CJ,cCr,fCr,mCr,EM,f6e,gCr,hCr,wJ,pCr,uCr,_Cr,CM,m6e,bCr,vCr,AJ,FCr,TCr,MCr,wM,g6e,ECr,CCr,LJ,wCr,ACr,LCr,AM,h6e,yCr,xCr,yJ,$Cr,kCr,SCr,LM,p6e,RCr,PCr,xJ,BCr,ICr,NCr,yM,u6e,qCr,jCr,$J,DCr,GCr,OCr,xM,_6e,VCr,XCr,kJ,zCr,WCr,QCr,$M,b6e,HCr,UCr,SJ,JCr,YCr,KCr,kM,v6e,ZCr,e5r,RJ,o5r,r5r,t5r,SM,F6e,a5r,n5r,PJ,s5r,l5r,i5r,RM,T6e,d5r,c5r,BJ,f5r,m5r,g5r,PM,M6e,h5r,p5r,IJ,u5r,_5r,b5r,BM,vOe,Fc,IM,E6e,D9,v5r,C6e,F5r,FOe,sr,G9,T5r,Tc,M5r,NJ,E5r,C5r,qJ,w5r,A5r,L5r,O9,y5r,w6e,x5r,$5r,k5r,Nt,V9,S5r,A6e,R5r,P5r,Mc,B5r,L6e,I5r,N5r,jJ,q5r,j5r,D5r,NM,G5r,Pr,X9,O5r,y6e,V5r,X5r,mn,z5r,x6e,W5r,Q5r,$6e,H5r,U5r,k6e,J5r,Y5r,K5r,ue,qM,S6e,Z5r,ewr,DJ,owr,rwr,twr,jM,R6e,awr,nwr,GJ,swr,lwr,iwr,DM,P6e,dwr,cwr,OJ,fwr,mwr,gwr,GM,B6e,hwr,pwr,VJ,uwr,_wr,bwr,OM,I6e,vwr,Fwr,XJ,Twr,Mwr,Ewr,VM,N6e,Cwr,wwr,zJ,Awr,Lwr,ywr,XM,q6e,xwr,$wr,WJ,kwr,Swr,Rwr,zM,j6e,Pwr,Bwr,QJ,Iwr,Nwr,qwr,WM,D6e,jwr,Dwr,HJ,Gwr,Owr,Vwr,QM,G6e,Xwr,zwr,UJ,Wwr,Qwr,Hwr,HM,O6e,Uwr,Jwr,JJ,Ywr,Kwr,Zwr,UM,V6e,eAr,oAr,YJ,rAr,tAr,aAr,JM,X6e,nAr,sAr,KJ,lAr,iAr,dAr,YM,z6e,cAr,fAr,ZJ,mAr,gAr,hAr,KM,W6e,pAr,uAr,eY,_Ar,bAr,vAr,ZM,Q6e,FAr,TAr,oY,MAr,EAr,CAr,e4,H6e,wAr,AAr,rY,LAr,yAr,xAr,o4,TOe,Ec,r4,U6e,z9,$Ar,J6e,kAr,MOe,lr,W9,SAr,Cc,RAr,tY,PAr,BAr,aY,IAr,NAr,qAr,Q9,jAr,Y6e,DAr,GAr,OAr,qt,H9,VAr,K6e,XAr,zAr,wc,WAr,Z6e,QAr,HAr,nY,UAr,JAr,YAr,t4,KAr,Br,U9,ZAr,eTe,eLr,oLr,gn,rLr,oTe,tLr,aLr,rTe,nLr,sLr,tTe,lLr,iLr,dLr,J9,a4,aTe,cLr,fLr,sY,mLr,gLr,hLr,n4,nTe,pLr,uLr,lY,_Lr,bLr,vLr,s4,EOe,Ac,l4,sTe,Y9,FLr,lTe,TLr,COe,ir,K9,MLr,Lc,ELr,iY,CLr,wLr,dY,ALr,LLr,yLr,Z9,xLr,iTe,$Lr,kLr,SLr,jt,ex,RLr,dTe,PLr,BLr,yc,ILr,cTe,NLr,qLr,cY,jLr,DLr,GLr,i4,OLr,Ir,ox,VLr,fTe,XLr,zLr,hn,WLr,mTe,QLr,HLr,gTe,ULr,JLr,hTe,YLr,KLr,ZLr,pTe,d4,uTe,eyr,oyr,fY,ryr,tyr,ayr,c4,wOe,xc,f4,_Te,rx,nyr,bTe,syr,AOe,dr,tx,lyr,$c,iyr,mY,dyr,cyr,gY,fyr,myr,gyr,ax,hyr,vTe,pyr,uyr,_yr,Dt,nx,byr,FTe,vyr,Fyr,kc,Tyr,TTe,Myr,Eyr,hY,Cyr,wyr,Ayr,m4,Lyr,Nr,sx,yyr,MTe,xyr,$yr,pn,kyr,ETe,Syr,Ryr,CTe,Pyr,Byr,wTe,Iyr,Nyr,qyr,de,g4,ATe,jyr,Dyr,pY,Gyr,Oyr,Vyr,h4,LTe,Xyr,zyr,uY,Wyr,Qyr,Hyr,p4,yTe,Uyr,Jyr,_Y,Yyr,Kyr,Zyr,u4,xTe,e8r,o8r,bY,r8r,t8r,a8r,_4,$Te,n8r,s8r,vY,l8r,i8r,d8r,b4,kTe,c8r,f8r,FY,m8r,g8r,h8r,v4,STe,p8r,u8r,TY,_8r,b8r,v8r,F4,RTe,F8r,T8r,MY,M8r,E8r,C8r,T4,PTe,w8r,A8r,EY,L8r,y8r,x8r,M4,BTe,$8r,k8r,CY,S8r,R8r,P8r,E4,ITe,B8r,I8r,wY,N8r,q8r,j8r,C4,NTe,D8r,G8r,AY,O8r,V8r,X8r,w4,qTe,z8r,W8r,LY,Q8r,H8r,U8r,A4,jTe,J8r,Y8r,yY,K8r,Z8r,e9r,L4,DTe,o9r,r9r,xY,t9r,a9r,n9r,y4,GTe,s9r,l9r,$Y,i9r,d9r,c9r,x4,OTe,f9r,m9r,kY,g9r,h9r,p9r,$4,VTe,u9r,_9r,SY,b9r,v9r,F9r,k4,XTe,T9r,M9r,RY,E9r,C9r,w9r,S4,zTe,A9r,L9r,PY,y9r,x9r,$9r,R4,LOe,Sc,P4,WTe,lx,k9r,QTe,S9r,yOe,cr,ix,R9r,Rc,P9r,BY,B9r,I9r,IY,N9r,q9r,j9r,dx,D9r,HTe,G9r,O9r,V9r,Gt,cx,X9r,UTe,z9r,W9r,Pc,Q9r,JTe,H9r,U9r,NY,J9r,Y9r,K9r,B4,Z9r,qr,fx,exr,YTe,oxr,rxr,un,txr,KTe,axr,nxr,ZTe,sxr,lxr,e7e,ixr,dxr,cxr,ce,I4,o7e,fxr,mxr,qY,gxr,hxr,pxr,N4,r7e,uxr,_xr,jY,bxr,vxr,Fxr,q4,t7e,Txr,Mxr,DY,Exr,Cxr,wxr,j4,a7e,Axr,Lxr,GY,yxr,xxr,$xr,D4,n7e,kxr,Sxr,OY,Rxr,Pxr,Bxr,G4,s7e,Ixr,Nxr,VY,qxr,jxr,Dxr,O4,l7e,Gxr,Oxr,XY,Vxr,Xxr,zxr,V4,i7e,Wxr,Qxr,zY,Hxr,Uxr,Jxr,X4,d7e,Yxr,Kxr,WY,Zxr,e$r,o$r,z4,c7e,r$r,t$r,QY,a$r,n$r,s$r,W4,f7e,l$r,i$r,HY,d$r,c$r,f$r,Q4,m7e,m$r,g$r,UY,h$r,p$r,u$r,H4,g7e,_$r,b$r,JY,v$r,F$r,T$r,U4,h7e,M$r,E$r,YY,C$r,w$r,A$r,J4,p7e,L$r,y$r,KY,x$r,$$r,k$r,Y4,u7e,S$r,R$r,ZY,P$r,B$r,I$r,K4,_7e,N$r,q$r,eK,j$r,D$r,G$r,Z4,b7e,O$r,V$r,oK,X$r,z$r,W$r,eE,v7e,Q$r,H$r,rK,U$r,J$r,Y$r,oE,F7e,K$r,Z$r,tK,ekr,okr,rkr,rE,xOe,Bc,tE,T7e,mx,tkr,M7e,akr,$Oe,fr,gx,nkr,Ic,skr,aK,lkr,ikr,nK,dkr,ckr,fkr,hx,mkr,E7e,gkr,hkr,pkr,Ot,px,ukr,C7e,_kr,bkr,Nc,vkr,w7e,Fkr,Tkr,sK,Mkr,Ekr,Ckr,aE,wkr,jr,ux,Akr,A7e,Lkr,ykr,_n,xkr,L7e,$kr,kkr,y7e,Skr,Rkr,x7e,Pkr,Bkr,Ikr,$7e,nE,k7e,Nkr,qkr,lK,jkr,Dkr,Gkr,sE,kOe,qc,lE,S7e,_x,Okr,R7e,Vkr,SOe,mr,bx,Xkr,jc,zkr,iK,Wkr,Qkr,dK,Hkr,Ukr,Jkr,vx,Ykr,P7e,Kkr,Zkr,eSr,Vt,Fx,oSr,B7e,rSr,tSr,Dc,aSr,I7e,nSr,sSr,cK,lSr,iSr,dSr,iE,cSr,Dr,Tx,fSr,N7e,mSr,gSr,bn,hSr,q7e,pSr,uSr,j7e,_Sr,bSr,D7e,vSr,FSr,TSr,G7e,dE,O7e,MSr,ESr,fK,CSr,wSr,ASr,cE,ROe,Gc,fE,V7e,Mx,LSr,X7e,ySr,POe,gr,Ex,xSr,Oc,$Sr,mK,kSr,SSr,gK,RSr,PSr,BSr,Cx,ISr,z7e,NSr,qSr,jSr,Xt,wx,DSr,W7e,GSr,OSr,Vc,VSr,Q7e,XSr,zSr,hK,WSr,QSr,HSr,mE,USr,Gr,Ax,JSr,H7e,YSr,KSr,vn,ZSr,U7e,eRr,oRr,J7e,rRr,tRr,Y7e,aRr,nRr,sRr,oe,gE,K7e,lRr,iRr,pK,dRr,cRr,fRr,hE,Z7e,mRr,gRr,uK,hRr,pRr,uRr,pE,eMe,_Rr,bRr,_K,vRr,FRr,TRr,uE,oMe,MRr,ERr,bK,CRr,wRr,ARr,_E,rMe,LRr,yRr,vK,xRr,$Rr,kRr,bE,tMe,SRr,RRr,FK,PRr,BRr,IRr,vE,aMe,NRr,qRr,TK,jRr,DRr,GRr,FE,nMe,ORr,VRr,MK,XRr,zRr,WRr,TE,sMe,QRr,HRr,EK,URr,JRr,YRr,ME,lMe,KRr,ZRr,CK,ePr,oPr,rPr,EE,iMe,tPr,aPr,wK,nPr,sPr,lPr,CE,dMe,iPr,dPr,AK,cPr,fPr,mPr,wE,cMe,gPr,hPr,LK,pPr,uPr,_Pr,AE,fMe,bPr,vPr,yK,FPr,TPr,MPr,LE,mMe,EPr,CPr,xK,wPr,APr,LPr,yE,gMe,yPr,xPr,$K,$Pr,kPr,SPr,xE,hMe,RPr,PPr,kK,BPr,IPr,NPr,$E,pMe,qPr,jPr,SK,DPr,GPr,OPr,kE,uMe,VPr,XPr,RK,zPr,WPr,QPr,SE,_Me,HPr,UPr,PK,JPr,YPr,KPr,RE,bMe,ZPr,eBr,BK,oBr,rBr,tBr,PE,vMe,aBr,nBr,IK,sBr,lBr,iBr,BE,FMe,dBr,cBr,NK,fBr,mBr,gBr,IE,TMe,hBr,pBr,qK,uBr,_Br,bBr,NE,MMe,vBr,FBr,jK,TBr,MBr,EBr,qE,EMe,CBr,wBr,DK,ABr,LBr,yBr,jE,CMe,xBr,$Br,GK,kBr,SBr,RBr,DE,BOe,Xc,GE,wMe,Lx,PBr,AMe,BBr,IOe,hr,yx,IBr,zc,NBr,OK,qBr,jBr,VK,DBr,GBr,OBr,xx,VBr,LMe,XBr,zBr,WBr,zt,$x,QBr,yMe,HBr,UBr,Wc,JBr,xMe,YBr,KBr,XK,ZBr,eIr,oIr,OE,rIr,Or,kx,tIr,$Me,aIr,nIr,Fn,sIr,kMe,lIr,iIr,SMe,dIr,cIr,RMe,fIr,mIr,gIr,xe,VE,PMe,hIr,pIr,zK,uIr,_Ir,bIr,XE,BMe,vIr,FIr,WK,TIr,MIr,EIr,zE,IMe,CIr,wIr,QK,AIr,LIr,yIr,WE,NMe,xIr,$Ir,HK,kIr,SIr,RIr,QE,qMe,PIr,BIr,UK,IIr,NIr,qIr,HE,jMe,jIr,DIr,JK,GIr,OIr,VIr,UE,DMe,XIr,zIr,YK,WIr,QIr,HIr,JE,GMe,UIr,JIr,KK,YIr,KIr,ZIr,YE,OMe,eNr,oNr,ZK,rNr,tNr,aNr,KE,VMe,nNr,sNr,eZ,lNr,iNr,dNr,ZE,NOe,Qc,eC,XMe,Sx,cNr,zMe,fNr,qOe,pr,Rx,mNr,Hc,gNr,oZ,hNr,pNr,rZ,uNr,_Nr,bNr,Px,vNr,WMe,FNr,TNr,MNr,Wt,Bx,ENr,QMe,CNr,wNr,Uc,ANr,HMe,LNr,yNr,tZ,xNr,$Nr,kNr,oC,SNr,Vr,Ix,RNr,UMe,PNr,BNr,Tn,INr,JMe,NNr,qNr,YMe,jNr,DNr,KMe,GNr,ONr,VNr,Ee,rC,ZMe,XNr,zNr,aZ,WNr,QNr,HNr,tC,e4e,UNr,JNr,nZ,YNr,KNr,ZNr,aC,o4e,eqr,oqr,sZ,rqr,tqr,aqr,nC,r4e,nqr,sqr,lZ,lqr,iqr,dqr,sC,t4e,cqr,fqr,iZ,mqr,gqr,hqr,lC,a4e,pqr,uqr,dZ,_qr,bqr,vqr,iC,n4e,Fqr,Tqr,cZ,Mqr,Eqr,Cqr,dC,s4e,wqr,Aqr,fZ,Lqr,yqr,xqr,cC,l4e,$qr,kqr,mZ,Sqr,Rqr,Pqr,fC,i4e,Bqr,Iqr,gZ,Nqr,qqr,jqr,mC,d4e,Dqr,Gqr,hZ,Oqr,Vqr,Xqr,gC,c4e,zqr,Wqr,pZ,Qqr,Hqr,Uqr,hC,f4e,Jqr,Yqr,uZ,Kqr,Zqr,ejr,pC,jOe,Jc,uC,m4e,Nx,ojr,g4e,rjr,DOe,ur,qx,tjr,Yc,ajr,_Z,njr,sjr,bZ,ljr,ijr,djr,jx,cjr,h4e,fjr,mjr,gjr,Qt,Dx,hjr,p4e,pjr,ujr,Kc,_jr,u4e,bjr,vjr,vZ,Fjr,Tjr,Mjr,_C,Ejr,Xr,Gx,Cjr,_4e,wjr,Ajr,Mn,Ljr,b4e,yjr,xjr,v4e,$jr,kjr,F4e,Sjr,Rjr,Pjr,$e,bC,T4e,Bjr,Ijr,FZ,Njr,qjr,jjr,vC,M4e,Djr,Gjr,TZ,Ojr,Vjr,Xjr,FC,E4e,zjr,Wjr,MZ,Qjr,Hjr,Ujr,TC,C4e,Jjr,Yjr,EZ,Kjr,Zjr,eDr,MC,w4e,oDr,rDr,CZ,tDr,aDr,nDr,EC,A4e,sDr,lDr,wZ,iDr,dDr,cDr,CC,L4e,fDr,mDr,AZ,gDr,hDr,pDr,wC,y4e,uDr,_Dr,LZ,bDr,vDr,FDr,AC,x4e,TDr,MDr,yZ,EDr,CDr,wDr,LC,$4e,ADr,LDr,xZ,yDr,xDr,$Dr,yC,GOe,Zc,xC,k4e,Ox,kDr,S4e,SDr,OOe,_r,Vx,RDr,ef,PDr,$Z,BDr,IDr,kZ,NDr,qDr,jDr,Xx,DDr,R4e,GDr,ODr,VDr,Ht,zx,XDr,P4e,zDr,WDr,of,QDr,B4e,HDr,UDr,SZ,JDr,YDr,KDr,$C,ZDr,zr,Wx,eGr,I4e,oGr,rGr,En,tGr,N4e,aGr,nGr,q4e,sGr,lGr,j4e,iGr,dGr,cGr,ke,kC,D4e,fGr,mGr,RZ,gGr,hGr,pGr,SC,G4e,uGr,_Gr,PZ,bGr,vGr,FGr,RC,O4e,TGr,MGr,BZ,EGr,CGr,wGr,PC,V4e,AGr,LGr,IZ,yGr,xGr,$Gr,BC,X4e,kGr,SGr,NZ,RGr,PGr,BGr,IC,z4e,IGr,NGr,qZ,qGr,jGr,DGr,NC,W4e,GGr,OGr,jZ,VGr,XGr,zGr,qC,Q4e,WGr,QGr,DZ,HGr,UGr,JGr,jC,H4e,YGr,KGr,GZ,ZGr,eOr,oOr,DC,U4e,rOr,tOr,OZ,aOr,nOr,sOr,GC,VOe,rf,OC,J4e,Qx,lOr,Y4e,iOr,XOe,br,Hx,dOr,tf,cOr,VZ,fOr,mOr,XZ,gOr,hOr,pOr,Ux,uOr,K4e,_Or,bOr,vOr,Ut,Jx,FOr,Z4e,TOr,MOr,af,EOr,eEe,COr,wOr,zZ,AOr,LOr,yOr,VC,xOr,Wr,Yx,$Or,oEe,kOr,SOr,Cn,ROr,rEe,POr,BOr,tEe,IOr,NOr,aEe,qOr,jOr,DOr,Se,XC,nEe,GOr,OOr,WZ,VOr,XOr,zOr,zC,sEe,WOr,QOr,QZ,HOr,UOr,JOr,WC,lEe,YOr,KOr,HZ,ZOr,eVr,oVr,QC,iEe,rVr,tVr,UZ,aVr,nVr,sVr,HC,dEe,lVr,iVr,JZ,dVr,cVr,fVr,UC,cEe,mVr,gVr,YZ,hVr,pVr,uVr,JC,fEe,_Vr,bVr,KZ,vVr,FVr,TVr,YC,mEe,MVr,EVr,ZZ,CVr,wVr,AVr,KC,gEe,LVr,yVr,eee,xVr,$Vr,kVr,ZC,hEe,SVr,RVr,oee,PVr,BVr,IVr,e5,zOe,nf,o5,pEe,Kx,NVr,uEe,qVr,WOe,vr,Zx,jVr,sf,DVr,ree,GVr,OVr,tee,VVr,XVr,zVr,e$,WVr,_Ee,QVr,HVr,UVr,Jt,o$,JVr,bEe,YVr,KVr,lf,ZVr,vEe,eXr,oXr,aee,rXr,tXr,aXr,r5,nXr,Qr,r$,sXr,FEe,lXr,iXr,wn,dXr,TEe,cXr,fXr,MEe,mXr,gXr,EEe,hXr,pXr,uXr,Re,t5,CEe,_Xr,bXr,nee,vXr,FXr,TXr,a5,wEe,MXr,EXr,see,CXr,wXr,AXr,n5,AEe,LXr,yXr,lee,xXr,$Xr,kXr,s5,LEe,SXr,RXr,iee,PXr,BXr,IXr,l5,yEe,NXr,qXr,dee,jXr,DXr,GXr,i5,xEe,OXr,VXr,cee,XXr,zXr,WXr,d5,$Ee,QXr,HXr,fee,UXr,JXr,YXr,c5,kEe,KXr,ZXr,mee,ezr,ozr,rzr,f5,SEe,tzr,azr,gee,nzr,szr,lzr,m5,REe,izr,dzr,hee,czr,fzr,mzr,g5,QOe,df,h5,PEe,t$,gzr,BEe,hzr,HOe,Fr,a$,pzr,cf,uzr,pee,_zr,bzr,uee,vzr,Fzr,Tzr,n$,Mzr,IEe,Ezr,Czr,wzr,Yt,s$,Azr,NEe,Lzr,yzr,ff,xzr,qEe,$zr,kzr,_ee,Szr,Rzr,Pzr,p5,Bzr,Hr,l$,Izr,jEe,Nzr,qzr,An,jzr,DEe,Dzr,Gzr,GEe,Ozr,Vzr,OEe,Xzr,zzr,Wzr,Ve,u5,VEe,Qzr,Hzr,bee,Uzr,Jzr,Yzr,_5,XEe,Kzr,Zzr,vee,eWr,oWr,rWr,b5,zEe,tWr,aWr,Fee,nWr,sWr,lWr,v5,WEe,iWr,dWr,Tee,cWr,fWr,mWr,F5,QEe,gWr,hWr,Mee,pWr,uWr,_Wr,T5,HEe,bWr,vWr,Eee,FWr,TWr,MWr,M5,UEe,EWr,CWr,Cee,wWr,AWr,LWr,E5,JEe,yWr,xWr,wee,$Wr,kWr,SWr,C5,UOe,mf,w5,YEe,i$,RWr,KEe,PWr,JOe,Tr,d$,BWr,gf,IWr,Aee,NWr,qWr,Lee,jWr,DWr,GWr,c$,OWr,ZEe,VWr,XWr,zWr,Kt,f$,WWr,eCe,QWr,HWr,hf,UWr,oCe,JWr,YWr,yee,KWr,ZWr,eQr,A5,oQr,Ur,m$,rQr,rCe,tQr,aQr,Ln,nQr,tCe,sQr,lQr,aCe,iQr,dQr,nCe,cQr,fQr,mQr,Xe,L5,sCe,gQr,hQr,xee,pQr,uQr,_Qr,y5,lCe,bQr,vQr,$ee,FQr,TQr,MQr,x5,iCe,EQr,CQr,kee,wQr,AQr,LQr,$5,dCe,yQr,xQr,See,$Qr,kQr,SQr,k5,cCe,RQr,PQr,Ree,BQr,IQr,NQr,S5,fCe,qQr,jQr,Pee,DQr,GQr,OQr,R5,mCe,VQr,XQr,Bee,zQr,WQr,QQr,P5,gCe,HQr,UQr,Iee,JQr,YQr,KQr,B5,YOe,pf,I5,hCe,g$,ZQr,pCe,eHr,KOe,Mr,h$,oHr,uf,rHr,Nee,tHr,aHr,qee,nHr,sHr,lHr,p$,iHr,uCe,dHr,cHr,fHr,Zt,u$,mHr,_Ce,gHr,hHr,_f,pHr,bCe,uHr,_Hr,jee,bHr,vHr,FHr,N5,THr,Jr,_$,MHr,vCe,EHr,CHr,yn,wHr,FCe,AHr,LHr,TCe,yHr,xHr,MCe,$Hr,kHr,SHr,ECe,q5,CCe,RHr,PHr,Dee,BHr,IHr,NHr,j5,ZOe,bf,D5,wCe,b$,qHr,ACe,jHr,eVe,Er,v$,DHr,vf,GHr,Gee,OHr,VHr,Oee,XHr,zHr,WHr,F$,QHr,LCe,HHr,UHr,JHr,ea,T$,YHr,yCe,KHr,ZHr,Ff,eUr,xCe,oUr,rUr,Vee,tUr,aUr,nUr,G5,sUr,Yr,M$,lUr,$Ce,iUr,dUr,xn,cUr,kCe,fUr,mUr,SCe,gUr,hUr,RCe,pUr,uUr,_Ur,E$,O5,PCe,bUr,vUr,Xee,FUr,TUr,MUr,V5,BCe,EUr,CUr,zee,wUr,AUr,LUr,X5,oVe,Tf,z5,ICe,C$,yUr,NCe,xUr,rVe,Cr,w$,$Ur,Mf,kUr,Wee,SUr,RUr,Qee,PUr,BUr,IUr,A$,NUr,qCe,qUr,jUr,DUr,oa,L$,GUr,jCe,OUr,VUr,Ef,XUr,DCe,zUr,WUr,Hee,QUr,HUr,UUr,W5,JUr,Kr,y$,YUr,GCe,KUr,ZUr,$n,eJr,OCe,oJr,rJr,VCe,tJr,aJr,XCe,nJr,sJr,lJr,zCe,Q5,WCe,iJr,dJr,Uee,cJr,fJr,mJr,H5,tVe;return d=new re({}),ya=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),vL=new re({}),FL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Sf=new gJr({props:{warning:!0,$$slots:{default:[bqt]},$$scope:{ctx:y}}}),TL=new re({}),ML=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/configuration_auto.py#L594"}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/configuration_auto.py#L617"}}),jg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[vqt]},$$scope:{ctx:y}}}),AL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/configuration_auto.py#L740"}}),LL=new re({}),yL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/tokenization_auto.py#L399"}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17306/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/tokenization_auto.py#L413"}}),Th=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Fqt]},$$scope:{ctx:y}}}),SL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/tokenization_auto.py#L612"}}),RL=new re({}),PL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17306/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),rp=new gJr({props:{$$slots:{default:[Tqt]},$$scope:{ctx:y}}}),tp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Mqt]},$$scope:{ctx:y}}}),qL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/processing_auto.py#L88"}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/processing_auto.py#L102"}}),Ep=new gJr({props:{$$slots:{default:[Eqt]},$$scope:{ctx:y}}}),Cp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Cqt]},$$scope:{ctx:y}}}),XL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/processing_auto.py#L255"}}),zL=new re({}),WL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L758"}}),HL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),Lp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[wqt]},$$scope:{ctx:y}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),A_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Aqt]},$$scope:{ctx:y}}}),JL=new re({}),YL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L765"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),y_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Lqt]},$$scope:{ctx:y}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),v1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[yqt]},$$scope:{ctx:y}}}),oy=new re({}),ry=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L780"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),T1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[xqt]},$$scope:{ctx:y}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),l2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[$qt]},$$scope:{ctx:y}}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L787"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),d2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[kqt]},$$scope:{ctx:y}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),Q2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Sqt]},$$scope:{ctx:y}}}),fy=new re({}),my=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L794"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),U2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Rqt]},$$scope:{ctx:y}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),hb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Pqt]},$$scope:{ctx:y}}}),uy=new re({}),_y=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L803"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),ub=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Bqt]},$$scope:{ctx:y}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),mv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Iqt]},$$scope:{ctx:y}}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L848"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),hv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Nqt]},$$scope:{ctx:y}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),zv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[qqt]},$$scope:{ctx:y}}}),Ay=new re({}),Ly=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L855"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[jqt]},$$scope:{ctx:y}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),e3=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Dqt]},$$scope:{ctx:y}}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L841"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),r3=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Gqt]},$$scope:{ctx:y}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),j3=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Oqt]},$$scope:{ctx:y}}}),Iy=new re({}),Ny=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L812"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Vqt]},$$scope:{ctx:y}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),x0=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Xqt]},$$scope:{ctx:y}}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L819"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[zqt]},$$scope:{ctx:y}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),P0=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Wqt]},$$scope:{ctx:y}}}),Wy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L864"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17306/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17306/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17306/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17306/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),I0=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Qqt]},$$scope:{ctx:y}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),J0=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Hqt]},$$scope:{ctx:y}}}),Yy=new re({}),Ky=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L903"}}),e8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),K0=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Uqt]},$$scope:{ctx:y}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),oF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Jqt]},$$scope:{ctx:y}}}),r8=new re({}),t8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L830"}}),n8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),tF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[Yqt]},$$scope:{ctx:y}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),sF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Kqt]},$$scope:{ctx:y}}}),l8=new re({}),i8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L910"}}),c8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),iF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Zqt]},$$scope:{ctx:y}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),vF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[ejt]},$$scope:{ctx:y}}}),m8=new re({}),g8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L933"}}),p8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),TF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[ojt]},$$scope:{ctx:y}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),yF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[rjt]},$$scope:{ctx:y}}}),_8=new re({}),b8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L917"}}),F8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),$F=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[tjt]},$$scope:{ctx:y}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),OF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[ajt]},$$scope:{ctx:y}}}),M8=new re({}),E8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L924"}}),w8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),XF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[njt]},$$scope:{ctx:y}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[sjt]},$$scope:{ctx:y}}}),y8=new re({}),x8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L942"}}),k8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[ljt]},$$scope:{ctx:y}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),t6=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[ijt]},$$scope:{ctx:y}}}),R8=new re({}),P8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L949"}}),I8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),n6=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[djt]},$$scope:{ctx:y}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),c6=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[cjt]},$$scope:{ctx:y}}}),q8=new re({}),j8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L896"}}),G8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),m6=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[fjt]},$$scope:{ctx:y}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),u6=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[mjt]},$$scope:{ctx:y}}}),X8=new re({}),z8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L871"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),b6=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[gjt]},$$scope:{ctx:y}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),T6=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[hjt]},$$scope:{ctx:y}}}),U8=new re({}),J8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L878"}}),K8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),E6=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[pjt]},$$scope:{ctx:y}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),x6=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[ujt]},$$scope:{ctx:y}}}),e9=new re({}),o9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_auto.py#L887"}}),t9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),k6=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[_jt]},$$scope:{ctx:y}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),P6=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[bjt]},$$scope:{ctx:y}}}),n9=new re({}),s9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),i9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),I6=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[vjt]},$$scope:{ctx:y}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),xT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Fjt]},$$scope:{ctx:y}}}),c9=new re({}),f9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),g9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),kT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Tjt]},$$scope:{ctx:y}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),o7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Mjt]},$$scope:{ctx:y}}}),p9=new re({}),u9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),b9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),t7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Ejt]},$$scope:{ctx:y}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),_7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Cjt]},$$scope:{ctx:y}}}),F9=new re({}),T9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),E9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),v7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[wjt]},$$scope:{ctx:y}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),C7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Ajt]},$$scope:{ctx:y}}}),w9=new re({}),A9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),y9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),A7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Ljt]},$$scope:{ctx:y}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),Q7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[yjt]},$$scope:{ctx:y}}}),$9=new re({}),k9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),R9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),U7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[xjt]},$$scope:{ctx:y}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),sM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[$jt]},$$scope:{ctx:y}}}),B9=new re({}),I9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),q9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),iM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[kjt]},$$scope:{ctx:y}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),BM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Sjt]},$$scope:{ctx:y}}}),D9=new re({}),G9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),V9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),NM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Rjt]},$$scope:{ctx:y}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),o4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Pjt]},$$scope:{ctx:y}}}),z9=new re({}),W9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),H9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),t4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Bjt]},$$scope:{ctx:y}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),s4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Ijt]},$$scope:{ctx:y}}}),Y9=new re({}),K9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),i4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Njt]},$$scope:{ctx:y}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),c4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[qjt]},$$scope:{ctx:y}}}),rx=new re({}),tx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),m4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[jjt]},$$scope:{ctx:y}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),R4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Djt]},$$scope:{ctx:y}}}),lx=new re({}),ix=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),B4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Gjt]},$$scope:{ctx:y}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Ojt]},$$scope:{ctx:y}}}),mx=new re({}),gx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Vjt]},$$scope:{ctx:y}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),sE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Xjt]},$$scope:{ctx:y}}}),_x=new re({}),bx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),iE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[zjt]},$$scope:{ctx:y}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),cE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Wjt]},$$scope:{ctx:y}}}),Mx=new re({}),Ex=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),mE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Qjt]},$$scope:{ctx:y}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),DE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Hjt]},$$scope:{ctx:y}}}),Lx=new re({}),yx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),$x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),OE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Ujt]},$$scope:{ctx:y}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),ZE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Jjt]},$$scope:{ctx:y}}}),Sx=new re({}),Rx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Yjt]},$$scope:{ctx:y}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),pC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Kjt]},$$scope:{ctx:y}}}),Nx=new re({}),qx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Zjt]},$$scope:{ctx:y}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),yC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[eDt]},$$scope:{ctx:y}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),$C=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[oDt]},$$scope:{ctx:y}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),GC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[rDt]},$$scope:{ctx:y}}}),Qx=new re({}),Hx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),VC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[tDt]},$$scope:{ctx:y}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[aDt]},$$scope:{ctx:y}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),o$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[nDt]},$$scope:{ctx:y}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),g5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[sDt]},$$scope:{ctx:y}}}),t$=new re({}),a$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),s$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),p5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[lDt]},$$scope:{ctx:y}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),C5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[iDt]},$$scope:{ctx:y}}}),i$=new re({}),d$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),f$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),A5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[dDt]},$$scope:{ctx:y}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),B5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[cDt]},$$scope:{ctx:y}}}),g$=new re({}),h$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),u$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),N5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[fDt]},$$scope:{ctx:y}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),j5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[mDt]},$$scope:{ctx:y}}}),b$=new re({}),v$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),T$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17306/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),G5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[gDt]},$$scope:{ctx:y}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[hDt]},$$scope:{ctx:y}}}),C$=new re({}),w$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),L$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17306/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17306/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[pDt]},$$scope:{ctx:y}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17306/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17306/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17306/src/transformers/models/auto/auto_factory.py#L417"}}),H5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[uDt]},$$scope:{ctx:y}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Fi=o("Auto Classes"),Lf=l(),at=a("p"),Ti=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Mi=a("code"),pL=o("from_pretrained()"),yf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),Ei=o("Instantiating one of "),Sn=a("a"),uL=o("AutoConfig"),Rn=o(", "),Pn=a("a"),_L=o("AutoModel"),Ci=o(`, and
`),Bn=a("a"),bL=o("AutoTokenizer"),wi=o(" will directly create a class of the relevant architecture. For instance"),xf=l(),F(ya.$$.fragment),Qe=l(),Ae=a("p"),zk=o("will create a model that is an instance of "),Ai=a("a"),Wk=o("BertModel"),Qk=o("."),Co=l(),xa=a("p"),Hk=o("There is one class of "),$f=a("code"),Uk=o("AutoModel"),gze=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),KDe=l(),Li=a("h2"),kf=a("a"),Xre=a("span"),F(vL.$$.fragment),hze=l(),zre=a("span"),pze=o("Extending the Auto Classes"),ZDe=l(),In=a("p"),uze=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Wre=a("code"),_ze=o("NewModel"),bze=o(", make sure you have a "),Qre=a("code"),vze=o("NewModelConfig"),Fze=o(` then you can add those to the auto
classes like this:`),eGe=l(),F(FL.$$.fragment),oGe=l(),Jk=a("p"),Tze=o("You will then be able to use the auto classes like you would usually do!"),rGe=l(),F(Sf.$$.fragment),tGe=l(),yi=a("h2"),Rf=a("a"),Hre=a("span"),F(TL.$$.fragment),Mze=l(),Ure=a("span"),Eze=o("AutoConfig"),aGe=l(),wo=a("div"),F(ML.$$.fragment),Cze=l(),EL=a("p"),wze=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Yk=a("a"),Aze=o("from_pretrained()"),Lze=o(" class method."),yze=l(),CL=a("p"),xze=o("This class cannot be instantiated directly using "),Jre=a("code"),$ze=o("__init__()"),kze=o(" (throws an error)."),Sze=l(),wr=a("div"),F(wL.$$.fragment),Rze=l(),Yre=a("p"),Pze=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Bze=l(),xi=a("p"),Ize=o("The configuration class to instantiate is selected based on the "),Kre=a("code"),Nze=o("model_type"),qze=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Zre=a("code"),jze=o("pretrained_model_name_or_path"),Dze=o(":"),Gze=l(),A=a("ul"),Pf=a("li"),ete=a("strong"),Oze=o("albert"),Vze=o(" \u2014 "),Kk=a("a"),Xze=o("AlbertConfig"),zze=o(" (ALBERT model)"),Wze=l(),Bf=a("li"),ote=a("strong"),Qze=o("bart"),Hze=o(" \u2014 "),Zk=a("a"),Uze=o("BartConfig"),Jze=o(" (BART model)"),Yze=l(),If=a("li"),rte=a("strong"),Kze=o("beit"),Zze=o(" \u2014 "),eS=a("a"),eWe=o("BeitConfig"),oWe=o(" (BEiT model)"),rWe=l(),Nf=a("li"),tte=a("strong"),tWe=o("bert"),aWe=o(" \u2014 "),oS=a("a"),nWe=o("BertConfig"),sWe=o(" (BERT model)"),lWe=l(),qf=a("li"),ate=a("strong"),iWe=o("bert-generation"),dWe=o(" \u2014 "),rS=a("a"),cWe=o("BertGenerationConfig"),fWe=o(" (Bert Generation model)"),mWe=l(),jf=a("li"),nte=a("strong"),gWe=o("big_bird"),hWe=o(" \u2014 "),tS=a("a"),pWe=o("BigBirdConfig"),uWe=o(" (BigBird model)"),_We=l(),Df=a("li"),ste=a("strong"),bWe=o("bigbird_pegasus"),vWe=o(" \u2014 "),aS=a("a"),FWe=o("BigBirdPegasusConfig"),TWe=o(" (BigBird-Pegasus model)"),MWe=l(),Gf=a("li"),lte=a("strong"),EWe=o("blenderbot"),CWe=o(" \u2014 "),nS=a("a"),wWe=o("BlenderbotConfig"),AWe=o(" (Blenderbot model)"),LWe=l(),Of=a("li"),ite=a("strong"),yWe=o("blenderbot-small"),xWe=o(" \u2014 "),sS=a("a"),$We=o("BlenderbotSmallConfig"),kWe=o(" (BlenderbotSmall model)"),SWe=l(),Vf=a("li"),dte=a("strong"),RWe=o("bloom"),PWe=o(" \u2014 "),lS=a("a"),BWe=o("BloomConfig"),IWe=o(" (BLOOM model)"),NWe=l(),Xf=a("li"),cte=a("strong"),qWe=o("camembert"),jWe=o(" \u2014 "),iS=a("a"),DWe=o("CamembertConfig"),GWe=o(" (CamemBERT model)"),OWe=l(),zf=a("li"),fte=a("strong"),VWe=o("canine"),XWe=o(" \u2014 "),dS=a("a"),zWe=o("CanineConfig"),WWe=o(" (CANINE model)"),QWe=l(),Wf=a("li"),mte=a("strong"),HWe=o("clip"),UWe=o(" \u2014 "),cS=a("a"),JWe=o("CLIPConfig"),YWe=o(" (CLIP model)"),KWe=l(),Qf=a("li"),gte=a("strong"),ZWe=o("convbert"),eQe=o(" \u2014 "),fS=a("a"),oQe=o("ConvBertConfig"),rQe=o(" (ConvBERT model)"),tQe=l(),Hf=a("li"),hte=a("strong"),aQe=o("convnext"),nQe=o(" \u2014 "),mS=a("a"),sQe=o("ConvNextConfig"),lQe=o(" (ConvNeXT model)"),iQe=l(),Uf=a("li"),pte=a("strong"),dQe=o("ctrl"),cQe=o(" \u2014 "),gS=a("a"),fQe=o("CTRLConfig"),mQe=o(" (CTRL model)"),gQe=l(),Jf=a("li"),ute=a("strong"),hQe=o("cvt"),pQe=o(" \u2014 "),hS=a("a"),uQe=o("CvtConfig"),_Qe=o(" (CvT model)"),bQe=l(),Yf=a("li"),_te=a("strong"),vQe=o("data2vec-audio"),FQe=o(" \u2014 "),pS=a("a"),TQe=o("Data2VecAudioConfig"),MQe=o(" (Data2VecAudio model)"),EQe=l(),Kf=a("li"),bte=a("strong"),CQe=o("data2vec-text"),wQe=o(" \u2014 "),uS=a("a"),AQe=o("Data2VecTextConfig"),LQe=o(" (Data2VecText model)"),yQe=l(),Zf=a("li"),vte=a("strong"),xQe=o("data2vec-vision"),$Qe=o(" \u2014 "),_S=a("a"),kQe=o("Data2VecVisionConfig"),SQe=o(" (Data2VecVision model)"),RQe=l(),em=a("li"),Fte=a("strong"),PQe=o("deberta"),BQe=o(" \u2014 "),bS=a("a"),IQe=o("DebertaConfig"),NQe=o(" (DeBERTa model)"),qQe=l(),om=a("li"),Tte=a("strong"),jQe=o("deberta-v2"),DQe=o(" \u2014 "),vS=a("a"),GQe=o("DebertaV2Config"),OQe=o(" (DeBERTa-v2 model)"),VQe=l(),rm=a("li"),Mte=a("strong"),XQe=o("decision_transformer"),zQe=o(" \u2014 "),FS=a("a"),WQe=o("DecisionTransformerConfig"),QQe=o(" (Decision Transformer model)"),HQe=l(),tm=a("li"),Ete=a("strong"),UQe=o("deit"),JQe=o(" \u2014 "),TS=a("a"),YQe=o("DeiTConfig"),KQe=o(" (DeiT model)"),ZQe=l(),am=a("li"),Cte=a("strong"),eHe=o("detr"),oHe=o(" \u2014 "),MS=a("a"),rHe=o("DetrConfig"),tHe=o(" (DETR model)"),aHe=l(),nm=a("li"),wte=a("strong"),nHe=o("distilbert"),sHe=o(" \u2014 "),ES=a("a"),lHe=o("DistilBertConfig"),iHe=o(" (DistilBERT model)"),dHe=l(),sm=a("li"),Ate=a("strong"),cHe=o("dpr"),fHe=o(" \u2014 "),CS=a("a"),mHe=o("DPRConfig"),gHe=o(" (DPR model)"),hHe=l(),lm=a("li"),Lte=a("strong"),pHe=o("dpt"),uHe=o(" \u2014 "),wS=a("a"),_He=o("DPTConfig"),bHe=o(" (DPT model)"),vHe=l(),im=a("li"),yte=a("strong"),FHe=o("electra"),THe=o(" \u2014 "),AS=a("a"),MHe=o("ElectraConfig"),EHe=o(" (ELECTRA model)"),CHe=l(),dm=a("li"),xte=a("strong"),wHe=o("encoder-decoder"),AHe=o(" \u2014 "),LS=a("a"),LHe=o("EncoderDecoderConfig"),yHe=o(" (Encoder decoder model)"),xHe=l(),cm=a("li"),$te=a("strong"),$He=o("flaubert"),kHe=o(" \u2014 "),yS=a("a"),SHe=o("FlaubertConfig"),RHe=o(" (FlauBERT model)"),PHe=l(),fm=a("li"),kte=a("strong"),BHe=o("flava"),IHe=o(" \u2014 "),xS=a("a"),NHe=o("FlavaConfig"),qHe=o(" (FLAVA model)"),jHe=l(),mm=a("li"),Ste=a("strong"),DHe=o("fnet"),GHe=o(" \u2014 "),$S=a("a"),OHe=o("FNetConfig"),VHe=o(" (FNet model)"),XHe=l(),gm=a("li"),Rte=a("strong"),zHe=o("fsmt"),WHe=o(" \u2014 "),kS=a("a"),QHe=o("FSMTConfig"),HHe=o(" (FairSeq Machine-Translation model)"),UHe=l(),hm=a("li"),Pte=a("strong"),JHe=o("funnel"),YHe=o(" \u2014 "),SS=a("a"),KHe=o("FunnelConfig"),ZHe=o(" (Funnel Transformer model)"),eUe=l(),pm=a("li"),Bte=a("strong"),oUe=o("glpn"),rUe=o(" \u2014 "),RS=a("a"),tUe=o("GLPNConfig"),aUe=o(" (GLPN model)"),nUe=l(),um=a("li"),Ite=a("strong"),sUe=o("gpt2"),lUe=o(" \u2014 "),PS=a("a"),iUe=o("GPT2Config"),dUe=o(" (OpenAI GPT-2 model)"),cUe=l(),_m=a("li"),Nte=a("strong"),fUe=o("gpt_neo"),mUe=o(" \u2014 "),BS=a("a"),gUe=o("GPTNeoConfig"),hUe=o(" (GPT Neo model)"),pUe=l(),bm=a("li"),qte=a("strong"),uUe=o("gpt_neox"),_Ue=o(" \u2014 "),IS=a("a"),bUe=o("GPTNeoXConfig"),vUe=o(" (GPT NeoX model)"),FUe=l(),vm=a("li"),jte=a("strong"),TUe=o("gptj"),MUe=o(" \u2014 "),NS=a("a"),EUe=o("GPTJConfig"),CUe=o(" (GPT-J model)"),wUe=l(),Fm=a("li"),Dte=a("strong"),AUe=o("hubert"),LUe=o(" \u2014 "),qS=a("a"),yUe=o("HubertConfig"),xUe=o(" (Hubert model)"),$Ue=l(),Tm=a("li"),Gte=a("strong"),kUe=o("ibert"),SUe=o(" \u2014 "),jS=a("a"),RUe=o("IBertConfig"),PUe=o(" (I-BERT model)"),BUe=l(),Mm=a("li"),Ote=a("strong"),IUe=o("imagegpt"),NUe=o(" \u2014 "),DS=a("a"),qUe=o("ImageGPTConfig"),jUe=o(" (ImageGPT model)"),DUe=l(),Em=a("li"),Vte=a("strong"),GUe=o("layoutlm"),OUe=o(" \u2014 "),GS=a("a"),VUe=o("LayoutLMConfig"),XUe=o(" (LayoutLM model)"),zUe=l(),Cm=a("li"),Xte=a("strong"),WUe=o("layoutlmv2"),QUe=o(" \u2014 "),OS=a("a"),HUe=o("LayoutLMv2Config"),UUe=o(" (LayoutLMv2 model)"),JUe=l(),wm=a("li"),zte=a("strong"),YUe=o("layoutlmv3"),KUe=o(" \u2014 "),VS=a("a"),ZUe=o("LayoutLMv3Config"),eJe=o(" (LayoutLMv3 model)"),oJe=l(),Am=a("li"),Wte=a("strong"),rJe=o("led"),tJe=o(" \u2014 "),XS=a("a"),aJe=o("LEDConfig"),nJe=o(" (LED model)"),sJe=l(),Lm=a("li"),Qte=a("strong"),lJe=o("levit"),iJe=o(" \u2014 "),zS=a("a"),dJe=o("LevitConfig"),cJe=o(" (LeViT model)"),fJe=l(),ym=a("li"),Hte=a("strong"),mJe=o("longformer"),gJe=o(" \u2014 "),WS=a("a"),hJe=o("LongformerConfig"),pJe=o(" (Longformer model)"),uJe=l(),xm=a("li"),Ute=a("strong"),_Je=o("longt5"),bJe=o(" \u2014 "),QS=a("a"),vJe=o("LongT5Config"),FJe=o(" (LongT5 model)"),TJe=l(),$m=a("li"),Jte=a("strong"),MJe=o("luke"),EJe=o(" \u2014 "),HS=a("a"),CJe=o("LukeConfig"),wJe=o(" (LUKE model)"),AJe=l(),km=a("li"),Yte=a("strong"),LJe=o("lxmert"),yJe=o(" \u2014 "),US=a("a"),xJe=o("LxmertConfig"),$Je=o(" (LXMERT model)"),kJe=l(),Sm=a("li"),Kte=a("strong"),SJe=o("m2m_100"),RJe=o(" \u2014 "),JS=a("a"),PJe=o("M2M100Config"),BJe=o(" (M2M100 model)"),IJe=l(),Rm=a("li"),Zte=a("strong"),NJe=o("marian"),qJe=o(" \u2014 "),YS=a("a"),jJe=o("MarianConfig"),DJe=o(" (Marian model)"),GJe=l(),Pm=a("li"),eae=a("strong"),OJe=o("maskformer"),VJe=o(" \u2014 "),KS=a("a"),XJe=o("MaskFormerConfig"),zJe=o(" (MaskFormer model)"),WJe=l(),Bm=a("li"),oae=a("strong"),QJe=o("mbart"),HJe=o(" \u2014 "),ZS=a("a"),UJe=o("MBartConfig"),JJe=o(" (mBART model)"),YJe=l(),Im=a("li"),rae=a("strong"),KJe=o("mctct"),ZJe=o(" \u2014 "),eR=a("a"),eYe=o("MCTCTConfig"),oYe=o(" (M-CTC-T model)"),rYe=l(),Nm=a("li"),tae=a("strong"),tYe=o("megatron-bert"),aYe=o(" \u2014 "),oR=a("a"),nYe=o("MegatronBertConfig"),sYe=o(" (Megatron-BERT model)"),lYe=l(),qm=a("li"),aae=a("strong"),iYe=o("mobilebert"),dYe=o(" \u2014 "),rR=a("a"),cYe=o("MobileBertConfig"),fYe=o(" (MobileBERT model)"),mYe=l(),jm=a("li"),nae=a("strong"),gYe=o("mpnet"),hYe=o(" \u2014 "),tR=a("a"),pYe=o("MPNetConfig"),uYe=o(" (MPNet model)"),_Ye=l(),Dm=a("li"),sae=a("strong"),bYe=o("mt5"),vYe=o(" \u2014 "),aR=a("a"),FYe=o("MT5Config"),TYe=o(" (MT5 model)"),MYe=l(),Gm=a("li"),lae=a("strong"),EYe=o("nystromformer"),CYe=o(" \u2014 "),nR=a("a"),wYe=o("NystromformerConfig"),AYe=o(" (Nystr\xF6mformer model)"),LYe=l(),Om=a("li"),iae=a("strong"),yYe=o("openai-gpt"),xYe=o(" \u2014 "),sR=a("a"),$Ye=o("OpenAIGPTConfig"),kYe=o(" (OpenAI GPT model)"),SYe=l(),Vm=a("li"),dae=a("strong"),RYe=o("opt"),PYe=o(" \u2014 "),lR=a("a"),BYe=o("OPTConfig"),IYe=o(" (OPT model)"),NYe=l(),Xm=a("li"),cae=a("strong"),qYe=o("pegasus"),jYe=o(" \u2014 "),iR=a("a"),DYe=o("PegasusConfig"),GYe=o(" (Pegasus model)"),OYe=l(),zm=a("li"),fae=a("strong"),VYe=o("perceiver"),XYe=o(" \u2014 "),dR=a("a"),zYe=o("PerceiverConfig"),WYe=o(" (Perceiver model)"),QYe=l(),Wm=a("li"),mae=a("strong"),HYe=o("plbart"),UYe=o(" \u2014 "),cR=a("a"),JYe=o("PLBartConfig"),YYe=o(" (PLBart model)"),KYe=l(),Qm=a("li"),gae=a("strong"),ZYe=o("poolformer"),eKe=o(" \u2014 "),fR=a("a"),oKe=o("PoolFormerConfig"),rKe=o(" (PoolFormer model)"),tKe=l(),Hm=a("li"),hae=a("strong"),aKe=o("prophetnet"),nKe=o(" \u2014 "),mR=a("a"),sKe=o("ProphetNetConfig"),lKe=o(" (ProphetNet model)"),iKe=l(),Um=a("li"),pae=a("strong"),dKe=o("qdqbert"),cKe=o(" \u2014 "),gR=a("a"),fKe=o("QDQBertConfig"),mKe=o(" (QDQBert model)"),gKe=l(),Jm=a("li"),uae=a("strong"),hKe=o("rag"),pKe=o(" \u2014 "),hR=a("a"),uKe=o("RagConfig"),_Ke=o(" (RAG model)"),bKe=l(),Ym=a("li"),_ae=a("strong"),vKe=o("realm"),FKe=o(" \u2014 "),pR=a("a"),TKe=o("RealmConfig"),MKe=o(" (REALM model)"),EKe=l(),Km=a("li"),bae=a("strong"),CKe=o("reformer"),wKe=o(" \u2014 "),uR=a("a"),AKe=o("ReformerConfig"),LKe=o(" (Reformer model)"),yKe=l(),Zm=a("li"),vae=a("strong"),xKe=o("regnet"),$Ke=o(" \u2014 "),_R=a("a"),kKe=o("RegNetConfig"),SKe=o(" (RegNet model)"),RKe=l(),eg=a("li"),Fae=a("strong"),PKe=o("rembert"),BKe=o(" \u2014 "),bR=a("a"),IKe=o("RemBertConfig"),NKe=o(" (RemBERT model)"),qKe=l(),og=a("li"),Tae=a("strong"),jKe=o("resnet"),DKe=o(" \u2014 "),vR=a("a"),GKe=o("ResNetConfig"),OKe=o(" (ResNet model)"),VKe=l(),rg=a("li"),Mae=a("strong"),XKe=o("retribert"),zKe=o(" \u2014 "),FR=a("a"),WKe=o("RetriBertConfig"),QKe=o(" (RetriBERT model)"),HKe=l(),tg=a("li"),Eae=a("strong"),UKe=o("roberta"),JKe=o(" \u2014 "),TR=a("a"),YKe=o("RobertaConfig"),KKe=o(" (RoBERTa model)"),ZKe=l(),ag=a("li"),Cae=a("strong"),eZe=o("roformer"),oZe=o(" \u2014 "),MR=a("a"),rZe=o("RoFormerConfig"),tZe=o(" (RoFormer model)"),aZe=l(),ng=a("li"),wae=a("strong"),nZe=o("segformer"),sZe=o(" \u2014 "),ER=a("a"),lZe=o("SegformerConfig"),iZe=o(" (SegFormer model)"),dZe=l(),sg=a("li"),Aae=a("strong"),cZe=o("sew"),fZe=o(" \u2014 "),CR=a("a"),mZe=o("SEWConfig"),gZe=o(" (SEW model)"),hZe=l(),lg=a("li"),Lae=a("strong"),pZe=o("sew-d"),uZe=o(" \u2014 "),wR=a("a"),_Ze=o("SEWDConfig"),bZe=o(" (SEW-D model)"),vZe=l(),ig=a("li"),yae=a("strong"),FZe=o("speech-encoder-decoder"),TZe=o(" \u2014 "),AR=a("a"),MZe=o("SpeechEncoderDecoderConfig"),EZe=o(" (Speech Encoder decoder model)"),CZe=l(),dg=a("li"),xae=a("strong"),wZe=o("speech_to_text"),AZe=o(" \u2014 "),LR=a("a"),LZe=o("Speech2TextConfig"),yZe=o(" (Speech2Text model)"),xZe=l(),cg=a("li"),$ae=a("strong"),$Ze=o("speech_to_text_2"),kZe=o(" \u2014 "),yR=a("a"),SZe=o("Speech2Text2Config"),RZe=o(" (Speech2Text2 model)"),PZe=l(),fg=a("li"),kae=a("strong"),BZe=o("splinter"),IZe=o(" \u2014 "),xR=a("a"),NZe=o("SplinterConfig"),qZe=o(" (Splinter model)"),jZe=l(),mg=a("li"),Sae=a("strong"),DZe=o("squeezebert"),GZe=o(" \u2014 "),$R=a("a"),OZe=o("SqueezeBertConfig"),VZe=o(" (SqueezeBERT model)"),XZe=l(),gg=a("li"),Rae=a("strong"),zZe=o("swin"),WZe=o(" \u2014 "),kR=a("a"),QZe=o("SwinConfig"),HZe=o(" (Swin Transformer model)"),UZe=l(),hg=a("li"),Pae=a("strong"),JZe=o("t5"),YZe=o(" \u2014 "),SR=a("a"),KZe=o("T5Config"),ZZe=o(" (T5 model)"),eeo=l(),pg=a("li"),Bae=a("strong"),oeo=o("tapas"),reo=o(" \u2014 "),RR=a("a"),teo=o("TapasConfig"),aeo=o(" (TAPAS model)"),neo=l(),ug=a("li"),Iae=a("strong"),seo=o("trajectory_transformer"),leo=o(" \u2014 "),PR=a("a"),ieo=o("TrajectoryTransformerConfig"),deo=o(" (Trajectory Transformer model)"),ceo=l(),_g=a("li"),Nae=a("strong"),feo=o("transfo-xl"),meo=o(" \u2014 "),BR=a("a"),geo=o("TransfoXLConfig"),heo=o(" (Transformer-XL model)"),peo=l(),bg=a("li"),qae=a("strong"),ueo=o("trocr"),_eo=o(" \u2014 "),IR=a("a"),beo=o("TrOCRConfig"),veo=o(" (TrOCR model)"),Feo=l(),vg=a("li"),jae=a("strong"),Teo=o("unispeech"),Meo=o(" \u2014 "),NR=a("a"),Eeo=o("UniSpeechConfig"),Ceo=o(" (UniSpeech model)"),weo=l(),Fg=a("li"),Dae=a("strong"),Aeo=o("unispeech-sat"),Leo=o(" \u2014 "),qR=a("a"),yeo=o("UniSpeechSatConfig"),xeo=o(" (UniSpeechSat model)"),$eo=l(),Tg=a("li"),Gae=a("strong"),keo=o("van"),Seo=o(" \u2014 "),jR=a("a"),Reo=o("VanConfig"),Peo=o(" (VAN model)"),Beo=l(),Mg=a("li"),Oae=a("strong"),Ieo=o("vilt"),Neo=o(" \u2014 "),DR=a("a"),qeo=o("ViltConfig"),jeo=o(" (ViLT model)"),Deo=l(),Eg=a("li"),Vae=a("strong"),Geo=o("vision-encoder-decoder"),Oeo=o(" \u2014 "),GR=a("a"),Veo=o("VisionEncoderDecoderConfig"),Xeo=o(" (Vision Encoder decoder model)"),zeo=l(),Cg=a("li"),Xae=a("strong"),Weo=o("vision-text-dual-encoder"),Qeo=o(" \u2014 "),OR=a("a"),Heo=o("VisionTextDualEncoderConfig"),Ueo=o(" (VisionTextDualEncoder model)"),Jeo=l(),wg=a("li"),zae=a("strong"),Yeo=o("visual_bert"),Keo=o(" \u2014 "),VR=a("a"),Zeo=o("VisualBertConfig"),eoo=o(" (VisualBERT model)"),ooo=l(),Ag=a("li"),Wae=a("strong"),roo=o("vit"),too=o(" \u2014 "),XR=a("a"),aoo=o("ViTConfig"),noo=o(" (ViT model)"),soo=l(),Lg=a("li"),Qae=a("strong"),loo=o("vit_mae"),ioo=o(" \u2014 "),zR=a("a"),doo=o("ViTMAEConfig"),coo=o(" (ViTMAE model)"),foo=l(),yg=a("li"),Hae=a("strong"),moo=o("wav2vec2"),goo=o(" \u2014 "),WR=a("a"),hoo=o("Wav2Vec2Config"),poo=o(" (Wav2Vec2 model)"),uoo=l(),xg=a("li"),Uae=a("strong"),_oo=o("wav2vec2-conformer"),boo=o(" \u2014 "),QR=a("a"),voo=o("Wav2Vec2ConformerConfig"),Foo=o(" (Wav2Vec2-Conformer model)"),Too=l(),$g=a("li"),Jae=a("strong"),Moo=o("wavlm"),Eoo=o(" \u2014 "),HR=a("a"),Coo=o("WavLMConfig"),woo=o(" (WavLM model)"),Aoo=l(),kg=a("li"),Yae=a("strong"),Loo=o("xglm"),yoo=o(" \u2014 "),UR=a("a"),xoo=o("XGLMConfig"),$oo=o(" (XGLM model)"),koo=l(),Sg=a("li"),Kae=a("strong"),Soo=o("xlm"),Roo=o(" \u2014 "),JR=a("a"),Poo=o("XLMConfig"),Boo=o(" (XLM model)"),Ioo=l(),Rg=a("li"),Zae=a("strong"),Noo=o("xlm-prophetnet"),qoo=o(" \u2014 "),YR=a("a"),joo=o("XLMProphetNetConfig"),Doo=o(" (XLM-ProphetNet model)"),Goo=l(),Pg=a("li"),ene=a("strong"),Ooo=o("xlm-roberta"),Voo=o(" \u2014 "),KR=a("a"),Xoo=o("XLMRobertaConfig"),zoo=o(" (XLM-RoBERTa model)"),Woo=l(),Bg=a("li"),one=a("strong"),Qoo=o("xlm-roberta-xl"),Hoo=o(" \u2014 "),ZR=a("a"),Uoo=o("XLMRobertaXLConfig"),Joo=o(" (XLM-RoBERTa-XL model)"),Yoo=l(),Ig=a("li"),rne=a("strong"),Koo=o("xlnet"),Zoo=o(" \u2014 "),eP=a("a"),ero=o("XLNetConfig"),oro=o(" (XLNet model)"),rro=l(),Ng=a("li"),tne=a("strong"),tro=o("yolos"),aro=o(" \u2014 "),oP=a("a"),nro=o("YolosConfig"),sro=o(" (YOLOS model)"),lro=l(),qg=a("li"),ane=a("strong"),iro=o("yoso"),dro=o(" \u2014 "),rP=a("a"),cro=o("YosoConfig"),fro=o(" (YOSO model)"),mro=l(),F(jg.$$.fragment),gro=l(),Dg=a("div"),F(AL.$$.fragment),hro=l(),nne=a("p"),pro=o("Register a new configuration for this class."),nGe=l(),$i=a("h2"),Gg=a("a"),sne=a("span"),F(LL.$$.fragment),uro=l(),lne=a("span"),_ro=o("AutoTokenizer"),sGe=l(),Ao=a("div"),F(yL.$$.fragment),bro=l(),xL=a("p"),vro=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tP=a("a"),Fro=o("AutoTokenizer.from_pretrained()"),Tro=o(" class method."),Mro=l(),$L=a("p"),Ero=o("This class cannot be instantiated directly using "),ine=a("code"),Cro=o("__init__()"),wro=o(" (throws an error)."),Aro=l(),Ar=a("div"),F(kL.$$.fragment),Lro=l(),dne=a("p"),yro=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),xro=l(),$a=a("p"),$ro=o("The tokenizer class to instantiate is selected based on the "),cne=a("code"),kro=o("model_type"),Sro=o(` property of the config object (either
passed as an argument or loaded from `),fne=a("code"),Rro=o("pretrained_model_name_or_path"),Pro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mne=a("code"),Bro=o("pretrained_model_name_or_path"),Iro=o(":"),Nro=l(),k=a("ul"),Nn=a("li"),gne=a("strong"),qro=o("albert"),jro=o(" \u2014 "),aP=a("a"),Dro=o("AlbertTokenizer"),Gro=o(" or "),nP=a("a"),Oro=o("AlbertTokenizerFast"),Vro=o(" (ALBERT model)"),Xro=l(),qn=a("li"),hne=a("strong"),zro=o("bart"),Wro=o(" \u2014 "),sP=a("a"),Qro=o("BartTokenizer"),Hro=o(" or "),lP=a("a"),Uro=o("BartTokenizerFast"),Jro=o(" (BART model)"),Yro=l(),jn=a("li"),pne=a("strong"),Kro=o("barthez"),Zro=o(" \u2014 "),iP=a("a"),eto=o("BarthezTokenizer"),oto=o(" or "),dP=a("a"),rto=o("BarthezTokenizerFast"),tto=o(" (BARThez model)"),ato=l(),Og=a("li"),une=a("strong"),nto=o("bartpho"),sto=o(" \u2014 "),cP=a("a"),lto=o("BartphoTokenizer"),ito=o(" (BARTpho model)"),dto=l(),Dn=a("li"),_ne=a("strong"),cto=o("bert"),fto=o(" \u2014 "),fP=a("a"),mto=o("BertTokenizer"),gto=o(" or "),mP=a("a"),hto=o("BertTokenizerFast"),pto=o(" (BERT model)"),uto=l(),Vg=a("li"),bne=a("strong"),_to=o("bert-generation"),bto=o(" \u2014 "),gP=a("a"),vto=o("BertGenerationTokenizer"),Fto=o(" (Bert Generation model)"),Tto=l(),Xg=a("li"),vne=a("strong"),Mto=o("bert-japanese"),Eto=o(" \u2014 "),hP=a("a"),Cto=o("BertJapaneseTokenizer"),wto=o(" (BertJapanese model)"),Ato=l(),zg=a("li"),Fne=a("strong"),Lto=o("bertweet"),yto=o(" \u2014 "),pP=a("a"),xto=o("BertweetTokenizer"),$to=o(" (BERTweet model)"),kto=l(),Gn=a("li"),Tne=a("strong"),Sto=o("big_bird"),Rto=o(" \u2014 "),uP=a("a"),Pto=o("BigBirdTokenizer"),Bto=o(" or "),_P=a("a"),Ito=o("BigBirdTokenizerFast"),Nto=o(" (BigBird model)"),qto=l(),On=a("li"),Mne=a("strong"),jto=o("bigbird_pegasus"),Dto=o(" \u2014 "),bP=a("a"),Gto=o("PegasusTokenizer"),Oto=o(" or "),vP=a("a"),Vto=o("PegasusTokenizerFast"),Xto=o(" (BigBird-Pegasus model)"),zto=l(),Vn=a("li"),Ene=a("strong"),Wto=o("blenderbot"),Qto=o(" \u2014 "),FP=a("a"),Hto=o("BlenderbotTokenizer"),Uto=o(" or "),TP=a("a"),Jto=o("BlenderbotTokenizerFast"),Yto=o(" (Blenderbot model)"),Kto=l(),Wg=a("li"),Cne=a("strong"),Zto=o("blenderbot-small"),eao=o(" \u2014 "),MP=a("a"),oao=o("BlenderbotSmallTokenizer"),rao=o(" (BlenderbotSmall model)"),tao=l(),Qg=a("li"),wne=a("strong"),aao=o("bloom"),nao=o(" \u2014 "),EP=a("a"),sao=o("BloomTokenizerFast"),lao=o(" (BLOOM model)"),iao=l(),Hg=a("li"),Ane=a("strong"),dao=o("byt5"),cao=o(" \u2014 "),CP=a("a"),fao=o("ByT5Tokenizer"),mao=o(" (ByT5 model)"),gao=l(),Xn=a("li"),Lne=a("strong"),hao=o("camembert"),pao=o(" \u2014 "),wP=a("a"),uao=o("CamembertTokenizer"),_ao=o(" or "),AP=a("a"),bao=o("CamembertTokenizerFast"),vao=o(" (CamemBERT model)"),Fao=l(),Ug=a("li"),yne=a("strong"),Tao=o("canine"),Mao=o(" \u2014 "),LP=a("a"),Eao=o("CanineTokenizer"),Cao=o(" (CANINE model)"),wao=l(),zn=a("li"),xne=a("strong"),Aao=o("clip"),Lao=o(" \u2014 "),yP=a("a"),yao=o("CLIPTokenizer"),xao=o(" or "),xP=a("a"),$ao=o("CLIPTokenizerFast"),kao=o(" (CLIP model)"),Sao=l(),Wn=a("li"),$ne=a("strong"),Rao=o("convbert"),Pao=o(" \u2014 "),$P=a("a"),Bao=o("ConvBertTokenizer"),Iao=o(" or "),kP=a("a"),Nao=o("ConvBertTokenizerFast"),qao=o(" (ConvBERT model)"),jao=l(),Qn=a("li"),kne=a("strong"),Dao=o("cpm"),Gao=o(" \u2014 "),SP=a("a"),Oao=o("CpmTokenizer"),Vao=o(" or "),RP=a("a"),Xao=o("CpmTokenizerFast"),zao=o(" (CPM model)"),Wao=l(),Jg=a("li"),Sne=a("strong"),Qao=o("ctrl"),Hao=o(" \u2014 "),PP=a("a"),Uao=o("CTRLTokenizer"),Jao=o(" (CTRL model)"),Yao=l(),Hn=a("li"),Rne=a("strong"),Kao=o("data2vec-text"),Zao=o(" \u2014 "),BP=a("a"),eno=o("RobertaTokenizer"),ono=o(" or "),IP=a("a"),rno=o("RobertaTokenizerFast"),tno=o(" (Data2VecText model)"),ano=l(),Un=a("li"),Pne=a("strong"),nno=o("deberta"),sno=o(" \u2014 "),NP=a("a"),lno=o("DebertaTokenizer"),ino=o(" or "),qP=a("a"),dno=o("DebertaTokenizerFast"),cno=o(" (DeBERTa model)"),fno=l(),Jn=a("li"),Bne=a("strong"),mno=o("deberta-v2"),gno=o(" \u2014 "),jP=a("a"),hno=o("DebertaV2Tokenizer"),pno=o(" or "),DP=a("a"),uno=o("DebertaV2TokenizerFast"),_no=o(" (DeBERTa-v2 model)"),bno=l(),Yn=a("li"),Ine=a("strong"),vno=o("distilbert"),Fno=o(" \u2014 "),GP=a("a"),Tno=o("DistilBertTokenizer"),Mno=o(" or "),OP=a("a"),Eno=o("DistilBertTokenizerFast"),Cno=o(" (DistilBERT model)"),wno=l(),Kn=a("li"),Nne=a("strong"),Ano=o("dpr"),Lno=o(" \u2014 "),VP=a("a"),yno=o("DPRQuestionEncoderTokenizer"),xno=o(" or "),XP=a("a"),$no=o("DPRQuestionEncoderTokenizerFast"),kno=o(" (DPR model)"),Sno=l(),Zn=a("li"),qne=a("strong"),Rno=o("electra"),Pno=o(" \u2014 "),zP=a("a"),Bno=o("ElectraTokenizer"),Ino=o(" or "),WP=a("a"),Nno=o("ElectraTokenizerFast"),qno=o(" (ELECTRA model)"),jno=l(),Yg=a("li"),jne=a("strong"),Dno=o("flaubert"),Gno=o(" \u2014 "),QP=a("a"),Ono=o("FlaubertTokenizer"),Vno=o(" (FlauBERT model)"),Xno=l(),es=a("li"),Dne=a("strong"),zno=o("fnet"),Wno=o(" \u2014 "),HP=a("a"),Qno=o("FNetTokenizer"),Hno=o(" or "),UP=a("a"),Uno=o("FNetTokenizerFast"),Jno=o(" (FNet model)"),Yno=l(),Kg=a("li"),Gne=a("strong"),Kno=o("fsmt"),Zno=o(" \u2014 "),JP=a("a"),eso=o("FSMTTokenizer"),oso=o(" (FairSeq Machine-Translation model)"),rso=l(),os=a("li"),One=a("strong"),tso=o("funnel"),aso=o(" \u2014 "),YP=a("a"),nso=o("FunnelTokenizer"),sso=o(" or "),KP=a("a"),lso=o("FunnelTokenizerFast"),iso=o(" (Funnel Transformer model)"),dso=l(),rs=a("li"),Vne=a("strong"),cso=o("gpt2"),fso=o(" \u2014 "),ZP=a("a"),mso=o("GPT2Tokenizer"),gso=o(" or "),eB=a("a"),hso=o("GPT2TokenizerFast"),pso=o(" (OpenAI GPT-2 model)"),uso=l(),ts=a("li"),Xne=a("strong"),_so=o("gpt_neo"),bso=o(" \u2014 "),oB=a("a"),vso=o("GPT2Tokenizer"),Fso=o(" or "),rB=a("a"),Tso=o("GPT2TokenizerFast"),Mso=o(" (GPT Neo model)"),Eso=l(),Zg=a("li"),zne=a("strong"),Cso=o("gpt_neox"),wso=o(" \u2014 "),tB=a("a"),Aso=o("GPTNeoXTokenizerFast"),Lso=o(" (GPT NeoX model)"),yso=l(),as=a("li"),Wne=a("strong"),xso=o("gptj"),$so=o(" \u2014 "),aB=a("a"),kso=o("GPT2Tokenizer"),Sso=o(" or "),nB=a("a"),Rso=o("GPT2TokenizerFast"),Pso=o(" (GPT-J model)"),Bso=l(),ns=a("li"),Qne=a("strong"),Iso=o("herbert"),Nso=o(" \u2014 "),sB=a("a"),qso=o("HerbertTokenizer"),jso=o(" or "),lB=a("a"),Dso=o("HerbertTokenizerFast"),Gso=o(" (HerBERT model)"),Oso=l(),eh=a("li"),Hne=a("strong"),Vso=o("hubert"),Xso=o(" \u2014 "),iB=a("a"),zso=o("Wav2Vec2CTCTokenizer"),Wso=o(" (Hubert model)"),Qso=l(),ss=a("li"),Une=a("strong"),Hso=o("ibert"),Uso=o(" \u2014 "),dB=a("a"),Jso=o("RobertaTokenizer"),Yso=o(" or "),cB=a("a"),Kso=o("RobertaTokenizerFast"),Zso=o(" (I-BERT model)"),elo=l(),ls=a("li"),Jne=a("strong"),olo=o("layoutlm"),rlo=o(" \u2014 "),fB=a("a"),tlo=o("LayoutLMTokenizer"),alo=o(" or "),mB=a("a"),nlo=o("LayoutLMTokenizerFast"),slo=o(" (LayoutLM model)"),llo=l(),is=a("li"),Yne=a("strong"),ilo=o("layoutlmv2"),dlo=o(" \u2014 "),gB=a("a"),clo=o("LayoutLMv2Tokenizer"),flo=o(" or "),hB=a("a"),mlo=o("LayoutLMv2TokenizerFast"),glo=o(" (LayoutLMv2 model)"),hlo=l(),ds=a("li"),Kne=a("strong"),plo=o("layoutlmv3"),ulo=o(" \u2014 "),pB=a("a"),_lo=o("LayoutLMv3Tokenizer"),blo=o(" or "),uB=a("a"),vlo=o("LayoutLMv3TokenizerFast"),Flo=o(" (LayoutLMv3 model)"),Tlo=l(),cs=a("li"),Zne=a("strong"),Mlo=o("layoutxlm"),Elo=o(" \u2014 "),_B=a("a"),Clo=o("LayoutXLMTokenizer"),wlo=o(" or "),bB=a("a"),Alo=o("LayoutXLMTokenizerFast"),Llo=o(" (LayoutXLM model)"),ylo=l(),fs=a("li"),ese=a("strong"),xlo=o("led"),$lo=o(" \u2014 "),vB=a("a"),klo=o("LEDTokenizer"),Slo=o(" or "),FB=a("a"),Rlo=o("LEDTokenizerFast"),Plo=o(" (LED model)"),Blo=l(),ms=a("li"),ose=a("strong"),Ilo=o("longformer"),Nlo=o(" \u2014 "),TB=a("a"),qlo=o("LongformerTokenizer"),jlo=o(" or "),MB=a("a"),Dlo=o("LongformerTokenizerFast"),Glo=o(" (Longformer model)"),Olo=l(),gs=a("li"),rse=a("strong"),Vlo=o("longt5"),Xlo=o(" \u2014 "),EB=a("a"),zlo=o("T5Tokenizer"),Wlo=o(" or "),CB=a("a"),Qlo=o("T5TokenizerFast"),Hlo=o(" (LongT5 model)"),Ulo=l(),oh=a("li"),tse=a("strong"),Jlo=o("luke"),Ylo=o(" \u2014 "),wB=a("a"),Klo=o("LukeTokenizer"),Zlo=o(" (LUKE model)"),eio=l(),hs=a("li"),ase=a("strong"),oio=o("lxmert"),rio=o(" \u2014 "),AB=a("a"),tio=o("LxmertTokenizer"),aio=o(" or "),LB=a("a"),nio=o("LxmertTokenizerFast"),sio=o(" (LXMERT model)"),lio=l(),rh=a("li"),nse=a("strong"),iio=o("m2m_100"),dio=o(" \u2014 "),yB=a("a"),cio=o("M2M100Tokenizer"),fio=o(" (M2M100 model)"),mio=l(),th=a("li"),sse=a("strong"),gio=o("marian"),hio=o(" \u2014 "),xB=a("a"),pio=o("MarianTokenizer"),uio=o(" (Marian model)"),_io=l(),ps=a("li"),lse=a("strong"),bio=o("mbart"),vio=o(" \u2014 "),$B=a("a"),Fio=o("MBartTokenizer"),Tio=o(" or "),kB=a("a"),Mio=o("MBartTokenizerFast"),Eio=o(" (mBART model)"),Cio=l(),us=a("li"),ise=a("strong"),wio=o("mbart50"),Aio=o(" \u2014 "),SB=a("a"),Lio=o("MBart50Tokenizer"),yio=o(" or "),RB=a("a"),xio=o("MBart50TokenizerFast"),$io=o(" (mBART-50 model)"),kio=l(),_s=a("li"),dse=a("strong"),Sio=o("megatron-bert"),Rio=o(" \u2014 "),PB=a("a"),Pio=o("BertTokenizer"),Bio=o(" or "),BB=a("a"),Iio=o("BertTokenizerFast"),Nio=o(" (Megatron-BERT model)"),qio=l(),ah=a("li"),cse=a("strong"),jio=o("mluke"),Dio=o(" \u2014 "),IB=a("a"),Gio=o("MLukeTokenizer"),Oio=o(" (mLUKE model)"),Vio=l(),bs=a("li"),fse=a("strong"),Xio=o("mobilebert"),zio=o(" \u2014 "),NB=a("a"),Wio=o("MobileBertTokenizer"),Qio=o(" or "),qB=a("a"),Hio=o("MobileBertTokenizerFast"),Uio=o(" (MobileBERT model)"),Jio=l(),vs=a("li"),mse=a("strong"),Yio=o("mpnet"),Kio=o(" \u2014 "),jB=a("a"),Zio=o("MPNetTokenizer"),edo=o(" or "),DB=a("a"),odo=o("MPNetTokenizerFast"),rdo=o(" (MPNet model)"),tdo=l(),Fs=a("li"),gse=a("strong"),ado=o("mt5"),ndo=o(" \u2014 "),GB=a("a"),sdo=o("MT5Tokenizer"),ldo=o(" or "),OB=a("a"),ido=o("MT5TokenizerFast"),ddo=o(" (MT5 model)"),cdo=l(),Ts=a("li"),hse=a("strong"),fdo=o("nystromformer"),mdo=o(" \u2014 "),VB=a("a"),gdo=o("AlbertTokenizer"),hdo=o(" or "),XB=a("a"),pdo=o("AlbertTokenizerFast"),udo=o(" (Nystr\xF6mformer model)"),_do=l(),Ms=a("li"),pse=a("strong"),bdo=o("openai-gpt"),vdo=o(" \u2014 "),zB=a("a"),Fdo=o("OpenAIGPTTokenizer"),Tdo=o(" or "),WB=a("a"),Mdo=o("OpenAIGPTTokenizerFast"),Edo=o(" (OpenAI GPT model)"),Cdo=l(),nh=a("li"),use=a("strong"),wdo=o("opt"),Ado=o(" \u2014 "),QB=a("a"),Ldo=o("GPT2Tokenizer"),ydo=o(" (OPT model)"),xdo=l(),Es=a("li"),_se=a("strong"),$do=o("pegasus"),kdo=o(" \u2014 "),HB=a("a"),Sdo=o("PegasusTokenizer"),Rdo=o(" or "),UB=a("a"),Pdo=o("PegasusTokenizerFast"),Bdo=o(" (Pegasus model)"),Ido=l(),sh=a("li"),bse=a("strong"),Ndo=o("perceiver"),qdo=o(" \u2014 "),JB=a("a"),jdo=o("PerceiverTokenizer"),Ddo=o(" (Perceiver model)"),Gdo=l(),lh=a("li"),vse=a("strong"),Odo=o("phobert"),Vdo=o(" \u2014 "),YB=a("a"),Xdo=o("PhobertTokenizer"),zdo=o(" (PhoBERT model)"),Wdo=l(),ih=a("li"),Fse=a("strong"),Qdo=o("plbart"),Hdo=o(" \u2014 "),KB=a("a"),Udo=o("PLBartTokenizer"),Jdo=o(" (PLBart model)"),Ydo=l(),dh=a("li"),Tse=a("strong"),Kdo=o("prophetnet"),Zdo=o(" \u2014 "),ZB=a("a"),eco=o("ProphetNetTokenizer"),oco=o(" (ProphetNet model)"),rco=l(),Cs=a("li"),Mse=a("strong"),tco=o("qdqbert"),aco=o(" \u2014 "),eI=a("a"),nco=o("BertTokenizer"),sco=o(" or "),oI=a("a"),lco=o("BertTokenizerFast"),ico=o(" (QDQBert model)"),dco=l(),ch=a("li"),Ese=a("strong"),cco=o("rag"),fco=o(" \u2014 "),rI=a("a"),mco=o("RagTokenizer"),gco=o(" (RAG model)"),hco=l(),ws=a("li"),Cse=a("strong"),pco=o("realm"),uco=o(" \u2014 "),tI=a("a"),_co=o("RealmTokenizer"),bco=o(" or "),aI=a("a"),vco=o("RealmTokenizerFast"),Fco=o(" (REALM model)"),Tco=l(),As=a("li"),wse=a("strong"),Mco=o("reformer"),Eco=o(" \u2014 "),nI=a("a"),Cco=o("ReformerTokenizer"),wco=o(" or "),sI=a("a"),Aco=o("ReformerTokenizerFast"),Lco=o(" (Reformer model)"),yco=l(),Ls=a("li"),Ase=a("strong"),xco=o("rembert"),$co=o(" \u2014 "),lI=a("a"),kco=o("RemBertTokenizer"),Sco=o(" or "),iI=a("a"),Rco=o("RemBertTokenizerFast"),Pco=o(" (RemBERT model)"),Bco=l(),ys=a("li"),Lse=a("strong"),Ico=o("retribert"),Nco=o(" \u2014 "),dI=a("a"),qco=o("RetriBertTokenizer"),jco=o(" or "),cI=a("a"),Dco=o("RetriBertTokenizerFast"),Gco=o(" (RetriBERT model)"),Oco=l(),xs=a("li"),yse=a("strong"),Vco=o("roberta"),Xco=o(" \u2014 "),fI=a("a"),zco=o("RobertaTokenizer"),Wco=o(" or "),mI=a("a"),Qco=o("RobertaTokenizerFast"),Hco=o(" (RoBERTa model)"),Uco=l(),$s=a("li"),xse=a("strong"),Jco=o("roformer"),Yco=o(" \u2014 "),gI=a("a"),Kco=o("RoFormerTokenizer"),Zco=o(" or "),hI=a("a"),efo=o("RoFormerTokenizerFast"),ofo=o(" (RoFormer model)"),rfo=l(),fh=a("li"),$se=a("strong"),tfo=o("speech_to_text"),afo=o(" \u2014 "),pI=a("a"),nfo=o("Speech2TextTokenizer"),sfo=o(" (Speech2Text model)"),lfo=l(),mh=a("li"),kse=a("strong"),ifo=o("speech_to_text_2"),dfo=o(" \u2014 "),uI=a("a"),cfo=o("Speech2Text2Tokenizer"),ffo=o(" (Speech2Text2 model)"),mfo=l(),ks=a("li"),Sse=a("strong"),gfo=o("splinter"),hfo=o(" \u2014 "),_I=a("a"),pfo=o("SplinterTokenizer"),ufo=o(" or "),bI=a("a"),_fo=o("SplinterTokenizerFast"),bfo=o(" (Splinter model)"),vfo=l(),Ss=a("li"),Rse=a("strong"),Ffo=o("squeezebert"),Tfo=o(" \u2014 "),vI=a("a"),Mfo=o("SqueezeBertTokenizer"),Efo=o(" or "),FI=a("a"),Cfo=o("SqueezeBertTokenizerFast"),wfo=o(" (SqueezeBERT model)"),Afo=l(),Rs=a("li"),Pse=a("strong"),Lfo=o("t5"),yfo=o(" \u2014 "),TI=a("a"),xfo=o("T5Tokenizer"),$fo=o(" or "),MI=a("a"),kfo=o("T5TokenizerFast"),Sfo=o(" (T5 model)"),Rfo=l(),gh=a("li"),Bse=a("strong"),Pfo=o("tapas"),Bfo=o(" \u2014 "),EI=a("a"),Ifo=o("TapasTokenizer"),Nfo=o(" (TAPAS model)"),qfo=l(),hh=a("li"),Ise=a("strong"),jfo=o("tapex"),Dfo=o(" \u2014 "),CI=a("a"),Gfo=o("TapexTokenizer"),Ofo=o(" (TAPEX model)"),Vfo=l(),ph=a("li"),Nse=a("strong"),Xfo=o("transfo-xl"),zfo=o(" \u2014 "),wI=a("a"),Wfo=o("TransfoXLTokenizer"),Qfo=o(" (Transformer-XL model)"),Hfo=l(),Ps=a("li"),qse=a("strong"),Ufo=o("vilt"),Jfo=o(" \u2014 "),AI=a("a"),Yfo=o("BertTokenizer"),Kfo=o(" or "),LI=a("a"),Zfo=o("BertTokenizerFast"),emo=o(" (ViLT model)"),omo=l(),Bs=a("li"),jse=a("strong"),rmo=o("visual_bert"),tmo=o(" \u2014 "),yI=a("a"),amo=o("BertTokenizer"),nmo=o(" or "),xI=a("a"),smo=o("BertTokenizerFast"),lmo=o(" (VisualBERT model)"),imo=l(),uh=a("li"),Dse=a("strong"),dmo=o("wav2vec2"),cmo=o(" \u2014 "),$I=a("a"),fmo=o("Wav2Vec2CTCTokenizer"),mmo=o(" (Wav2Vec2 model)"),gmo=l(),_h=a("li"),Gse=a("strong"),hmo=o("wav2vec2-conformer"),pmo=o(" \u2014 "),kI=a("a"),umo=o("Wav2Vec2CTCTokenizer"),_mo=o(" (Wav2Vec2-Conformer model)"),bmo=l(),bh=a("li"),Ose=a("strong"),vmo=o("wav2vec2_phoneme"),Fmo=o(" \u2014 "),SI=a("a"),Tmo=o("Wav2Vec2PhonemeCTCTokenizer"),Mmo=o(" (Wav2Vec2Phoneme model)"),Emo=l(),Is=a("li"),Vse=a("strong"),Cmo=o("xglm"),wmo=o(" \u2014 "),RI=a("a"),Amo=o("XGLMTokenizer"),Lmo=o(" or "),PI=a("a"),ymo=o("XGLMTokenizerFast"),xmo=o(" (XGLM model)"),$mo=l(),vh=a("li"),Xse=a("strong"),kmo=o("xlm"),Smo=o(" \u2014 "),BI=a("a"),Rmo=o("XLMTokenizer"),Pmo=o(" (XLM model)"),Bmo=l(),Fh=a("li"),zse=a("strong"),Imo=o("xlm-prophetnet"),Nmo=o(" \u2014 "),II=a("a"),qmo=o("XLMProphetNetTokenizer"),jmo=o(" (XLM-ProphetNet model)"),Dmo=l(),Ns=a("li"),Wse=a("strong"),Gmo=o("xlm-roberta"),Omo=o(" \u2014 "),NI=a("a"),Vmo=o("XLMRobertaTokenizer"),Xmo=o(" or "),qI=a("a"),zmo=o("XLMRobertaTokenizerFast"),Wmo=o(" (XLM-RoBERTa model)"),Qmo=l(),qs=a("li"),Qse=a("strong"),Hmo=o("xlm-roberta-xl"),Umo=o(" \u2014 "),jI=a("a"),Jmo=o("RobertaTokenizer"),Ymo=o(" or "),DI=a("a"),Kmo=o("RobertaTokenizerFast"),Zmo=o(" (XLM-RoBERTa-XL model)"),ego=l(),js=a("li"),Hse=a("strong"),ogo=o("xlnet"),rgo=o(" \u2014 "),GI=a("a"),tgo=o("XLNetTokenizer"),ago=o(" or "),OI=a("a"),ngo=o("XLNetTokenizerFast"),sgo=o(" (XLNet model)"),lgo=l(),Ds=a("li"),Use=a("strong"),igo=o("yoso"),dgo=o(" \u2014 "),VI=a("a"),cgo=o("AlbertTokenizer"),fgo=o(" or "),XI=a("a"),mgo=o("AlbertTokenizerFast"),ggo=o(" (YOSO model)"),hgo=l(),F(Th.$$.fragment),pgo=l(),Mh=a("div"),F(SL.$$.fragment),ugo=l(),Jse=a("p"),_go=o("Register a new tokenizer in this mapping."),lGe=l(),ki=a("h2"),Eh=a("a"),Yse=a("span"),F(RL.$$.fragment),bgo=l(),Kse=a("span"),vgo=o("AutoFeatureExtractor"),iGe=l(),Lo=a("div"),F(PL.$$.fragment),Fgo=l(),BL=a("p"),Tgo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),zI=a("a"),Mgo=o("AutoFeatureExtractor.from_pretrained()"),Ego=o(" class method."),Cgo=l(),IL=a("p"),wgo=o("This class cannot be instantiated directly using "),Zse=a("code"),Ago=o("__init__()"),Lgo=o(" (throws an error)."),ygo=l(),He=a("div"),F(NL.$$.fragment),xgo=l(),ele=a("p"),$go=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),kgo=l(),ka=a("p"),Sgo=o("The feature extractor class to instantiate is selected based on the "),ole=a("code"),Rgo=o("model_type"),Pgo=o(` property of the config object
(either passed as an argument or loaded from `),rle=a("code"),Bgo=o("pretrained_model_name_or_path"),Igo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tle=a("code"),Ngo=o("pretrained_model_name_or_path"),qgo=o(":"),jgo=l(),Y=a("ul"),Ch=a("li"),ale=a("strong"),Dgo=o("beit"),Ggo=o(" \u2014 "),WI=a("a"),Ogo=o("BeitFeatureExtractor"),Vgo=o(" (BEiT model)"),Xgo=l(),wh=a("li"),nle=a("strong"),zgo=o("clip"),Wgo=o(" \u2014 "),QI=a("a"),Qgo=o("CLIPFeatureExtractor"),Hgo=o(" (CLIP model)"),Ugo=l(),Ah=a("li"),sle=a("strong"),Jgo=o("convnext"),Ygo=o(" \u2014 "),HI=a("a"),Kgo=o("ConvNextFeatureExtractor"),Zgo=o(" (ConvNeXT model)"),eho=l(),Lh=a("li"),lle=a("strong"),oho=o("cvt"),rho=o(" \u2014 "),UI=a("a"),tho=o("ConvNextFeatureExtractor"),aho=o(" (CvT model)"),nho=l(),yh=a("li"),ile=a("strong"),sho=o("data2vec-audio"),lho=o(" \u2014 "),JI=a("a"),iho=o("Wav2Vec2FeatureExtractor"),dho=o(" (Data2VecAudio model)"),cho=l(),xh=a("li"),dle=a("strong"),fho=o("data2vec-vision"),mho=o(" \u2014 "),YI=a("a"),gho=o("BeitFeatureExtractor"),hho=o(" (Data2VecVision model)"),pho=l(),$h=a("li"),cle=a("strong"),uho=o("deit"),_ho=o(" \u2014 "),KI=a("a"),bho=o("DeiTFeatureExtractor"),vho=o(" (DeiT model)"),Fho=l(),kh=a("li"),fle=a("strong"),Tho=o("detr"),Mho=o(" \u2014 "),ZI=a("a"),Eho=o("DetrFeatureExtractor"),Cho=o(" (DETR model)"),who=l(),Sh=a("li"),mle=a("strong"),Aho=o("dpt"),Lho=o(" \u2014 "),eN=a("a"),yho=o("DPTFeatureExtractor"),xho=o(" (DPT model)"),$ho=l(),Rh=a("li"),gle=a("strong"),kho=o("flava"),Sho=o(" \u2014 "),oN=a("a"),Rho=o("FlavaFeatureExtractor"),Pho=o(" (FLAVA model)"),Bho=l(),Ph=a("li"),hle=a("strong"),Iho=o("glpn"),Nho=o(" \u2014 "),rN=a("a"),qho=o("GLPNFeatureExtractor"),jho=o(" (GLPN model)"),Dho=l(),Bh=a("li"),ple=a("strong"),Gho=o("hubert"),Oho=o(" \u2014 "),tN=a("a"),Vho=o("Wav2Vec2FeatureExtractor"),Xho=o(" (Hubert model)"),zho=l(),Ih=a("li"),ule=a("strong"),Who=o("imagegpt"),Qho=o(" \u2014 "),aN=a("a"),Hho=o("ImageGPTFeatureExtractor"),Uho=o(" (ImageGPT model)"),Jho=l(),Nh=a("li"),_le=a("strong"),Yho=o("layoutlmv2"),Kho=o(" \u2014 "),nN=a("a"),Zho=o("LayoutLMv2FeatureExtractor"),epo=o(" (LayoutLMv2 model)"),opo=l(),qh=a("li"),ble=a("strong"),rpo=o("layoutlmv3"),tpo=o(" \u2014 "),sN=a("a"),apo=o("LayoutLMv3FeatureExtractor"),npo=o(" (LayoutLMv3 model)"),spo=l(),jh=a("li"),vle=a("strong"),lpo=o("levit"),ipo=o(" \u2014 "),lN=a("a"),dpo=o("LevitFeatureExtractor"),cpo=o(" (LeViT model)"),fpo=l(),Dh=a("li"),Fle=a("strong"),mpo=o("maskformer"),gpo=o(" \u2014 "),iN=a("a"),hpo=o("MaskFormerFeatureExtractor"),ppo=o(" (MaskFormer model)"),upo=l(),Gh=a("li"),Tle=a("strong"),_po=o("mctct"),bpo=o(" \u2014 "),dN=a("a"),vpo=o("MCTCTFeatureExtractor"),Fpo=o(" (M-CTC-T model)"),Tpo=l(),Oh=a("li"),Mle=a("strong"),Mpo=o("perceiver"),Epo=o(" \u2014 "),cN=a("a"),Cpo=o("PerceiverFeatureExtractor"),wpo=o(" (Perceiver model)"),Apo=l(),Vh=a("li"),Ele=a("strong"),Lpo=o("poolformer"),ypo=o(" \u2014 "),fN=a("a"),xpo=o("PoolFormerFeatureExtractor"),$po=o(" (PoolFormer model)"),kpo=l(),Xh=a("li"),Cle=a("strong"),Spo=o("regnet"),Rpo=o(" \u2014 "),mN=a("a"),Ppo=o("ConvNextFeatureExtractor"),Bpo=o(" (RegNet model)"),Ipo=l(),zh=a("li"),wle=a("strong"),Npo=o("resnet"),qpo=o(" \u2014 "),gN=a("a"),jpo=o("ConvNextFeatureExtractor"),Dpo=o(" (ResNet model)"),Gpo=l(),Wh=a("li"),Ale=a("strong"),Opo=o("segformer"),Vpo=o(" \u2014 "),hN=a("a"),Xpo=o("SegformerFeatureExtractor"),zpo=o(" (SegFormer model)"),Wpo=l(),Qh=a("li"),Lle=a("strong"),Qpo=o("speech_to_text"),Hpo=o(" \u2014 "),pN=a("a"),Upo=o("Speech2TextFeatureExtractor"),Jpo=o(" (Speech2Text model)"),Ypo=l(),Hh=a("li"),yle=a("strong"),Kpo=o("swin"),Zpo=o(" \u2014 "),uN=a("a"),euo=o("ViTFeatureExtractor"),ouo=o(" (Swin Transformer model)"),ruo=l(),Uh=a("li"),xle=a("strong"),tuo=o("van"),auo=o(" \u2014 "),_N=a("a"),nuo=o("ConvNextFeatureExtractor"),suo=o(" (VAN model)"),luo=l(),Jh=a("li"),$le=a("strong"),iuo=o("vilt"),duo=o(" \u2014 "),bN=a("a"),cuo=o("ViltFeatureExtractor"),fuo=o(" (ViLT model)"),muo=l(),Yh=a("li"),kle=a("strong"),guo=o("vit"),huo=o(" \u2014 "),vN=a("a"),puo=o("ViTFeatureExtractor"),uuo=o(" (ViT model)"),_uo=l(),Kh=a("li"),Sle=a("strong"),buo=o("vit_mae"),vuo=o(" \u2014 "),FN=a("a"),Fuo=o("ViTFeatureExtractor"),Tuo=o(" (ViTMAE model)"),Muo=l(),Zh=a("li"),Rle=a("strong"),Euo=o("wav2vec2"),Cuo=o(" \u2014 "),TN=a("a"),wuo=o("Wav2Vec2FeatureExtractor"),Auo=o(" (Wav2Vec2 model)"),Luo=l(),ep=a("li"),Ple=a("strong"),yuo=o("wav2vec2-conformer"),xuo=o(" \u2014 "),MN=a("a"),$uo=o("Wav2Vec2FeatureExtractor"),kuo=o(" (Wav2Vec2-Conformer model)"),Suo=l(),op=a("li"),Ble=a("strong"),Ruo=o("yolos"),Puo=o(" \u2014 "),EN=a("a"),Buo=o("YolosFeatureExtractor"),Iuo=o(" (YOLOS model)"),Nuo=l(),F(rp.$$.fragment),quo=l(),F(tp.$$.fragment),juo=l(),ap=a("div"),F(qL.$$.fragment),Duo=l(),Ile=a("p"),Guo=o("Register a new feature extractor for this class."),dGe=l(),Si=a("h2"),np=a("a"),Nle=a("span"),F(jL.$$.fragment),Ouo=l(),qle=a("span"),Vuo=o("AutoProcessor"),cGe=l(),yo=a("div"),F(DL.$$.fragment),Xuo=l(),GL=a("p"),zuo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),CN=a("a"),Wuo=o("AutoProcessor.from_pretrained()"),Quo=o(" class method."),Huo=l(),OL=a("p"),Uuo=o("This class cannot be instantiated directly using "),jle=a("code"),Juo=o("__init__()"),Yuo=o(" (throws an error)."),Kuo=l(),Ue=a("div"),F(VL.$$.fragment),Zuo=l(),Dle=a("p"),e_o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),o_o=l(),Ri=a("p"),r_o=o("The processor class to instantiate is selected based on the "),Gle=a("code"),t_o=o("model_type"),a_o=o(` property of the config object (either
passed as an argument or loaded from `),Ole=a("code"),n_o=o("pretrained_model_name_or_path"),s_o=o(" if possible):"),l_o=l(),he=a("ul"),sp=a("li"),Vle=a("strong"),i_o=o("clip"),d_o=o(" \u2014 "),wN=a("a"),c_o=o("CLIPProcessor"),f_o=o(" (CLIP model)"),m_o=l(),lp=a("li"),Xle=a("strong"),g_o=o("flava"),h_o=o(" \u2014 "),zle=a("code"),p_o=o("FLAVAProcessor"),u_o=o(" (FLAVA model)"),__o=l(),ip=a("li"),Wle=a("strong"),b_o=o("layoutlmv2"),v_o=o(" \u2014 "),AN=a("a"),F_o=o("LayoutLMv2Processor"),T_o=o(" (LayoutLMv2 model)"),M_o=l(),dp=a("li"),Qle=a("strong"),E_o=o("layoutlmv3"),C_o=o(" \u2014 "),LN=a("a"),w_o=o("LayoutLMv3Processor"),A_o=o(" (LayoutLMv3 model)"),L_o=l(),cp=a("li"),Hle=a("strong"),y_o=o("layoutxlm"),x_o=o(" \u2014 "),yN=a("a"),$_o=o("LayoutXLMProcessor"),k_o=o(" (LayoutXLM model)"),S_o=l(),fp=a("li"),Ule=a("strong"),R_o=o("sew"),P_o=o(" \u2014 "),xN=a("a"),B_o=o("Wav2Vec2Processor"),I_o=o(" (SEW model)"),N_o=l(),mp=a("li"),Jle=a("strong"),q_o=o("sew-d"),j_o=o(" \u2014 "),$N=a("a"),D_o=o("Wav2Vec2Processor"),G_o=o(" (SEW-D model)"),O_o=l(),gp=a("li"),Yle=a("strong"),V_o=o("speech_to_text"),X_o=o(" \u2014 "),kN=a("a"),z_o=o("Speech2TextProcessor"),W_o=o(" (Speech2Text model)"),Q_o=l(),hp=a("li"),Kle=a("strong"),H_o=o("speech_to_text_2"),U_o=o(" \u2014 "),SN=a("a"),J_o=o("Speech2Text2Processor"),Y_o=o(" (Speech2Text2 model)"),K_o=l(),pp=a("li"),Zle=a("strong"),Z_o=o("trocr"),e1o=o(" \u2014 "),RN=a("a"),o1o=o("TrOCRProcessor"),r1o=o(" (TrOCR model)"),t1o=l(),up=a("li"),eie=a("strong"),a1o=o("unispeech"),n1o=o(" \u2014 "),PN=a("a"),s1o=o("Wav2Vec2Processor"),l1o=o(" (UniSpeech model)"),i1o=l(),_p=a("li"),oie=a("strong"),d1o=o("unispeech-sat"),c1o=o(" \u2014 "),BN=a("a"),f1o=o("Wav2Vec2Processor"),m1o=o(" (UniSpeechSat model)"),g1o=l(),bp=a("li"),rie=a("strong"),h1o=o("vilt"),p1o=o(" \u2014 "),IN=a("a"),u1o=o("ViltProcessor"),_1o=o(" (ViLT model)"),b1o=l(),vp=a("li"),tie=a("strong"),v1o=o("vision-text-dual-encoder"),F1o=o(" \u2014 "),NN=a("a"),T1o=o("VisionTextDualEncoderProcessor"),M1o=o(" (VisionTextDualEncoder model)"),E1o=l(),Fp=a("li"),aie=a("strong"),C1o=o("wav2vec2"),w1o=o(" \u2014 "),qN=a("a"),A1o=o("Wav2Vec2Processor"),L1o=o(" (Wav2Vec2 model)"),y1o=l(),Tp=a("li"),nie=a("strong"),x1o=o("wav2vec2-conformer"),$1o=o(" \u2014 "),jN=a("a"),k1o=o("Wav2Vec2Processor"),S1o=o(" (Wav2Vec2-Conformer model)"),R1o=l(),Mp=a("li"),sie=a("strong"),P1o=o("wavlm"),B1o=o(" \u2014 "),DN=a("a"),I1o=o("Wav2Vec2Processor"),N1o=o(" (WavLM model)"),q1o=l(),F(Ep.$$.fragment),j1o=l(),F(Cp.$$.fragment),D1o=l(),wp=a("div"),F(XL.$$.fragment),G1o=l(),lie=a("p"),O1o=o("Register a new processor for this class."),fGe=l(),Pi=a("h2"),Ap=a("a"),iie=a("span"),F(zL.$$.fragment),V1o=l(),die=a("span"),X1o=o("AutoModel"),mGe=l(),xo=a("div"),F(WL.$$.fragment),z1o=l(),Bi=a("p"),W1o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GN=a("a"),Q1o=o("from_pretrained()"),H1o=o(" class method or the "),ON=a("a"),U1o=o("from_config()"),J1o=o(` class
method.`),Y1o=l(),QL=a("p"),K1o=o("This class cannot be instantiated directly using "),cie=a("code"),Z1o=o("__init__()"),e2o=o(" (throws an error)."),o2o=l(),nt=a("div"),F(HL.$$.fragment),r2o=l(),fie=a("p"),t2o=o("Instantiates one of the base model classes of the library from a configuration."),a2o=l(),Ii=a("p"),n2o=o(`Note:
Loading a model from its configuration file does `),mie=a("strong"),s2o=o("not"),l2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VN=a("a"),i2o=o("from_pretrained()"),d2o=o(" to load the model weights."),c2o=l(),F(Lp.$$.fragment),f2o=l(),Je=a("div"),F(UL.$$.fragment),m2o=l(),gie=a("p"),g2o=o("Instantiate one of the base model classes of the library from a pretrained model."),h2o=l(),Sa=a("p"),p2o=o("The model class to instantiate is selected based on the "),hie=a("code"),u2o=o("model_type"),_2o=o(` property of the config object (either
passed as an argument or loaded from `),pie=a("code"),b2o=o("pretrained_model_name_or_path"),v2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uie=a("code"),F2o=o("pretrained_model_name_or_path"),T2o=o(":"),M2o=l(),x=a("ul"),yp=a("li"),_ie=a("strong"),E2o=o("albert"),C2o=o(" \u2014 "),XN=a("a"),w2o=o("AlbertModel"),A2o=o(" (ALBERT model)"),L2o=l(),xp=a("li"),bie=a("strong"),y2o=o("bart"),x2o=o(" \u2014 "),zN=a("a"),$2o=o("BartModel"),k2o=o(" (BART model)"),S2o=l(),$p=a("li"),vie=a("strong"),R2o=o("beit"),P2o=o(" \u2014 "),WN=a("a"),B2o=o("BeitModel"),I2o=o(" (BEiT model)"),N2o=l(),kp=a("li"),Fie=a("strong"),q2o=o("bert"),j2o=o(" \u2014 "),QN=a("a"),D2o=o("BertModel"),G2o=o(" (BERT model)"),O2o=l(),Sp=a("li"),Tie=a("strong"),V2o=o("bert-generation"),X2o=o(" \u2014 "),HN=a("a"),z2o=o("BertGenerationEncoder"),W2o=o(" (Bert Generation model)"),Q2o=l(),Rp=a("li"),Mie=a("strong"),H2o=o("big_bird"),U2o=o(" \u2014 "),UN=a("a"),J2o=o("BigBirdModel"),Y2o=o(" (BigBird model)"),K2o=l(),Pp=a("li"),Eie=a("strong"),Z2o=o("bigbird_pegasus"),ebo=o(" \u2014 "),JN=a("a"),obo=o("BigBirdPegasusModel"),rbo=o(" (BigBird-Pegasus model)"),tbo=l(),Bp=a("li"),Cie=a("strong"),abo=o("blenderbot"),nbo=o(" \u2014 "),YN=a("a"),sbo=o("BlenderbotModel"),lbo=o(" (Blenderbot model)"),ibo=l(),Ip=a("li"),wie=a("strong"),dbo=o("blenderbot-small"),cbo=o(" \u2014 "),KN=a("a"),fbo=o("BlenderbotSmallModel"),mbo=o(" (BlenderbotSmall model)"),gbo=l(),Np=a("li"),Aie=a("strong"),hbo=o("bloom"),pbo=o(" \u2014 "),ZN=a("a"),ubo=o("BloomModel"),_bo=o(" (BLOOM model)"),bbo=l(),qp=a("li"),Lie=a("strong"),vbo=o("camembert"),Fbo=o(" \u2014 "),eq=a("a"),Tbo=o("CamembertModel"),Mbo=o(" (CamemBERT model)"),Ebo=l(),jp=a("li"),yie=a("strong"),Cbo=o("canine"),wbo=o(" \u2014 "),oq=a("a"),Abo=o("CanineModel"),Lbo=o(" (CANINE model)"),ybo=l(),Dp=a("li"),xie=a("strong"),xbo=o("clip"),$bo=o(" \u2014 "),rq=a("a"),kbo=o("CLIPModel"),Sbo=o(" (CLIP model)"),Rbo=l(),Gp=a("li"),$ie=a("strong"),Pbo=o("convbert"),Bbo=o(" \u2014 "),tq=a("a"),Ibo=o("ConvBertModel"),Nbo=o(" (ConvBERT model)"),qbo=l(),Op=a("li"),kie=a("strong"),jbo=o("convnext"),Dbo=o(" \u2014 "),aq=a("a"),Gbo=o("ConvNextModel"),Obo=o(" (ConvNeXT model)"),Vbo=l(),Vp=a("li"),Sie=a("strong"),Xbo=o("ctrl"),zbo=o(" \u2014 "),nq=a("a"),Wbo=o("CTRLModel"),Qbo=o(" (CTRL model)"),Hbo=l(),Xp=a("li"),Rie=a("strong"),Ubo=o("cvt"),Jbo=o(" \u2014 "),sq=a("a"),Ybo=o("CvtModel"),Kbo=o(" (CvT model)"),Zbo=l(),zp=a("li"),Pie=a("strong"),evo=o("data2vec-audio"),ovo=o(" \u2014 "),lq=a("a"),rvo=o("Data2VecAudioModel"),tvo=o(" (Data2VecAudio model)"),avo=l(),Wp=a("li"),Bie=a("strong"),nvo=o("data2vec-text"),svo=o(" \u2014 "),iq=a("a"),lvo=o("Data2VecTextModel"),ivo=o(" (Data2VecText model)"),dvo=l(),Qp=a("li"),Iie=a("strong"),cvo=o("data2vec-vision"),fvo=o(" \u2014 "),dq=a("a"),mvo=o("Data2VecVisionModel"),gvo=o(" (Data2VecVision model)"),hvo=l(),Hp=a("li"),Nie=a("strong"),pvo=o("deberta"),uvo=o(" \u2014 "),cq=a("a"),_vo=o("DebertaModel"),bvo=o(" (DeBERTa model)"),vvo=l(),Up=a("li"),qie=a("strong"),Fvo=o("deberta-v2"),Tvo=o(" \u2014 "),fq=a("a"),Mvo=o("DebertaV2Model"),Evo=o(" (DeBERTa-v2 model)"),Cvo=l(),Jp=a("li"),jie=a("strong"),wvo=o("decision_transformer"),Avo=o(" \u2014 "),mq=a("a"),Lvo=o("DecisionTransformerModel"),yvo=o(" (Decision Transformer model)"),xvo=l(),Yp=a("li"),Die=a("strong"),$vo=o("deit"),kvo=o(" \u2014 "),gq=a("a"),Svo=o("DeiTModel"),Rvo=o(" (DeiT model)"),Pvo=l(),Kp=a("li"),Gie=a("strong"),Bvo=o("detr"),Ivo=o(" \u2014 "),hq=a("a"),Nvo=o("DetrModel"),qvo=o(" (DETR model)"),jvo=l(),Zp=a("li"),Oie=a("strong"),Dvo=o("distilbert"),Gvo=o(" \u2014 "),pq=a("a"),Ovo=o("DistilBertModel"),Vvo=o(" (DistilBERT model)"),Xvo=l(),eu=a("li"),Vie=a("strong"),zvo=o("dpr"),Wvo=o(" \u2014 "),uq=a("a"),Qvo=o("DPRQuestionEncoder"),Hvo=o(" (DPR model)"),Uvo=l(),ou=a("li"),Xie=a("strong"),Jvo=o("dpt"),Yvo=o(" \u2014 "),_q=a("a"),Kvo=o("DPTModel"),Zvo=o(" (DPT model)"),e3o=l(),ru=a("li"),zie=a("strong"),o3o=o("electra"),r3o=o(" \u2014 "),bq=a("a"),t3o=o("ElectraModel"),a3o=o(" (ELECTRA model)"),n3o=l(),tu=a("li"),Wie=a("strong"),s3o=o("flaubert"),l3o=o(" \u2014 "),vq=a("a"),i3o=o("FlaubertModel"),d3o=o(" (FlauBERT model)"),c3o=l(),au=a("li"),Qie=a("strong"),f3o=o("flava"),m3o=o(" \u2014 "),Fq=a("a"),g3o=o("FlavaModel"),h3o=o(" (FLAVA model)"),p3o=l(),nu=a("li"),Hie=a("strong"),u3o=o("fnet"),_3o=o(" \u2014 "),Tq=a("a"),b3o=o("FNetModel"),v3o=o(" (FNet model)"),F3o=l(),su=a("li"),Uie=a("strong"),T3o=o("fsmt"),M3o=o(" \u2014 "),Mq=a("a"),E3o=o("FSMTModel"),C3o=o(" (FairSeq Machine-Translation model)"),w3o=l(),Gs=a("li"),Jie=a("strong"),A3o=o("funnel"),L3o=o(" \u2014 "),Eq=a("a"),y3o=o("FunnelModel"),x3o=o(" or "),Cq=a("a"),$3o=o("FunnelBaseModel"),k3o=o(" (Funnel Transformer model)"),S3o=l(),lu=a("li"),Yie=a("strong"),R3o=o("glpn"),P3o=o(" \u2014 "),wq=a("a"),B3o=o("GLPNModel"),I3o=o(" (GLPN model)"),N3o=l(),iu=a("li"),Kie=a("strong"),q3o=o("gpt2"),j3o=o(" \u2014 "),Aq=a("a"),D3o=o("GPT2Model"),G3o=o(" (OpenAI GPT-2 model)"),O3o=l(),du=a("li"),Zie=a("strong"),V3o=o("gpt_neo"),X3o=o(" \u2014 "),Lq=a("a"),z3o=o("GPTNeoModel"),W3o=o(" (GPT Neo model)"),Q3o=l(),cu=a("li"),ede=a("strong"),H3o=o("gpt_neox"),U3o=o(" \u2014 "),yq=a("a"),J3o=o("GPTNeoXModel"),Y3o=o(" (GPT NeoX model)"),K3o=l(),fu=a("li"),ode=a("strong"),Z3o=o("gptj"),e0o=o(" \u2014 "),xq=a("a"),o0o=o("GPTJModel"),r0o=o(" (GPT-J model)"),t0o=l(),mu=a("li"),rde=a("strong"),a0o=o("hubert"),n0o=o(" \u2014 "),$q=a("a"),s0o=o("HubertModel"),l0o=o(" (Hubert model)"),i0o=l(),gu=a("li"),tde=a("strong"),d0o=o("ibert"),c0o=o(" \u2014 "),kq=a("a"),f0o=o("IBertModel"),m0o=o(" (I-BERT model)"),g0o=l(),hu=a("li"),ade=a("strong"),h0o=o("imagegpt"),p0o=o(" \u2014 "),Sq=a("a"),u0o=o("ImageGPTModel"),_0o=o(" (ImageGPT model)"),b0o=l(),pu=a("li"),nde=a("strong"),v0o=o("layoutlm"),F0o=o(" \u2014 "),Rq=a("a"),T0o=o("LayoutLMModel"),M0o=o(" (LayoutLM model)"),E0o=l(),uu=a("li"),sde=a("strong"),C0o=o("layoutlmv2"),w0o=o(" \u2014 "),Pq=a("a"),A0o=o("LayoutLMv2Model"),L0o=o(" (LayoutLMv2 model)"),y0o=l(),_u=a("li"),lde=a("strong"),x0o=o("layoutlmv3"),$0o=o(" \u2014 "),Bq=a("a"),k0o=o("LayoutLMv3Model"),S0o=o(" (LayoutLMv3 model)"),R0o=l(),bu=a("li"),ide=a("strong"),P0o=o("led"),B0o=o(" \u2014 "),Iq=a("a"),I0o=o("LEDModel"),N0o=o(" (LED model)"),q0o=l(),vu=a("li"),dde=a("strong"),j0o=o("levit"),D0o=o(" \u2014 "),Nq=a("a"),G0o=o("LevitModel"),O0o=o(" (LeViT model)"),V0o=l(),Fu=a("li"),cde=a("strong"),X0o=o("longformer"),z0o=o(" \u2014 "),qq=a("a"),W0o=o("LongformerModel"),Q0o=o(" (Longformer model)"),H0o=l(),Tu=a("li"),fde=a("strong"),U0o=o("longt5"),J0o=o(" \u2014 "),jq=a("a"),Y0o=o("LongT5Model"),K0o=o(" (LongT5 model)"),Z0o=l(),Mu=a("li"),mde=a("strong"),eFo=o("luke"),oFo=o(" \u2014 "),Dq=a("a"),rFo=o("LukeModel"),tFo=o(" (LUKE model)"),aFo=l(),Eu=a("li"),gde=a("strong"),nFo=o("lxmert"),sFo=o(" \u2014 "),Gq=a("a"),lFo=o("LxmertModel"),iFo=o(" (LXMERT model)"),dFo=l(),Cu=a("li"),hde=a("strong"),cFo=o("m2m_100"),fFo=o(" \u2014 "),Oq=a("a"),mFo=o("M2M100Model"),gFo=o(" (M2M100 model)"),hFo=l(),wu=a("li"),pde=a("strong"),pFo=o("marian"),uFo=o(" \u2014 "),Vq=a("a"),_Fo=o("MarianModel"),bFo=o(" (Marian model)"),vFo=l(),Au=a("li"),ude=a("strong"),FFo=o("maskformer"),TFo=o(" \u2014 "),Xq=a("a"),MFo=o("MaskFormerModel"),EFo=o(" (MaskFormer model)"),CFo=l(),Lu=a("li"),_de=a("strong"),wFo=o("mbart"),AFo=o(" \u2014 "),zq=a("a"),LFo=o("MBartModel"),yFo=o(" (mBART model)"),xFo=l(),yu=a("li"),bde=a("strong"),$Fo=o("mctct"),kFo=o(" \u2014 "),Wq=a("a"),SFo=o("MCTCTModel"),RFo=o(" (M-CTC-T model)"),PFo=l(),xu=a("li"),vde=a("strong"),BFo=o("megatron-bert"),IFo=o(" \u2014 "),Qq=a("a"),NFo=o("MegatronBertModel"),qFo=o(" (Megatron-BERT model)"),jFo=l(),$u=a("li"),Fde=a("strong"),DFo=o("mobilebert"),GFo=o(" \u2014 "),Hq=a("a"),OFo=o("MobileBertModel"),VFo=o(" (MobileBERT model)"),XFo=l(),ku=a("li"),Tde=a("strong"),zFo=o("mpnet"),WFo=o(" \u2014 "),Uq=a("a"),QFo=o("MPNetModel"),HFo=o(" (MPNet model)"),UFo=l(),Su=a("li"),Mde=a("strong"),JFo=o("mt5"),YFo=o(" \u2014 "),Jq=a("a"),KFo=o("MT5Model"),ZFo=o(" (MT5 model)"),e6o=l(),Ru=a("li"),Ede=a("strong"),o6o=o("nystromformer"),r6o=o(" \u2014 "),Yq=a("a"),t6o=o("NystromformerModel"),a6o=o(" (Nystr\xF6mformer model)"),n6o=l(),Pu=a("li"),Cde=a("strong"),s6o=o("openai-gpt"),l6o=o(" \u2014 "),Kq=a("a"),i6o=o("OpenAIGPTModel"),d6o=o(" (OpenAI GPT model)"),c6o=l(),Bu=a("li"),wde=a("strong"),f6o=o("opt"),m6o=o(" \u2014 "),Zq=a("a"),g6o=o("OPTModel"),h6o=o(" (OPT model)"),p6o=l(),Iu=a("li"),Ade=a("strong"),u6o=o("pegasus"),_6o=o(" \u2014 "),ej=a("a"),b6o=o("PegasusModel"),v6o=o(" (Pegasus model)"),F6o=l(),Nu=a("li"),Lde=a("strong"),T6o=o("perceiver"),M6o=o(" \u2014 "),oj=a("a"),E6o=o("PerceiverModel"),C6o=o(" (Perceiver model)"),w6o=l(),qu=a("li"),yde=a("strong"),A6o=o("plbart"),L6o=o(" \u2014 "),rj=a("a"),y6o=o("PLBartModel"),x6o=o(" (PLBart model)"),$6o=l(),ju=a("li"),xde=a("strong"),k6o=o("poolformer"),S6o=o(" \u2014 "),tj=a("a"),R6o=o("PoolFormerModel"),P6o=o(" (PoolFormer model)"),B6o=l(),Du=a("li"),$de=a("strong"),I6o=o("prophetnet"),N6o=o(" \u2014 "),aj=a("a"),q6o=o("ProphetNetModel"),j6o=o(" (ProphetNet model)"),D6o=l(),Gu=a("li"),kde=a("strong"),G6o=o("qdqbert"),O6o=o(" \u2014 "),nj=a("a"),V6o=o("QDQBertModel"),X6o=o(" (QDQBert model)"),z6o=l(),Ou=a("li"),Sde=a("strong"),W6o=o("reformer"),Q6o=o(" \u2014 "),sj=a("a"),H6o=o("ReformerModel"),U6o=o(" (Reformer model)"),J6o=l(),Vu=a("li"),Rde=a("strong"),Y6o=o("regnet"),K6o=o(" \u2014 "),lj=a("a"),Z6o=o("RegNetModel"),eTo=o(" (RegNet model)"),oTo=l(),Xu=a("li"),Pde=a("strong"),rTo=o("rembert"),tTo=o(" \u2014 "),ij=a("a"),aTo=o("RemBertModel"),nTo=o(" (RemBERT model)"),sTo=l(),zu=a("li"),Bde=a("strong"),lTo=o("resnet"),iTo=o(" \u2014 "),dj=a("a"),dTo=o("ResNetModel"),cTo=o(" (ResNet model)"),fTo=l(),Wu=a("li"),Ide=a("strong"),mTo=o("retribert"),gTo=o(" \u2014 "),cj=a("a"),hTo=o("RetriBertModel"),pTo=o(" (RetriBERT model)"),uTo=l(),Qu=a("li"),Nde=a("strong"),_To=o("roberta"),bTo=o(" \u2014 "),fj=a("a"),vTo=o("RobertaModel"),FTo=o(" (RoBERTa model)"),TTo=l(),Hu=a("li"),qde=a("strong"),MTo=o("roformer"),ETo=o(" \u2014 "),mj=a("a"),CTo=o("RoFormerModel"),wTo=o(" (RoFormer model)"),ATo=l(),Uu=a("li"),jde=a("strong"),LTo=o("segformer"),yTo=o(" \u2014 "),gj=a("a"),xTo=o("SegformerModel"),$To=o(" (SegFormer model)"),kTo=l(),Ju=a("li"),Dde=a("strong"),STo=o("sew"),RTo=o(" \u2014 "),hj=a("a"),PTo=o("SEWModel"),BTo=o(" (SEW model)"),ITo=l(),Yu=a("li"),Gde=a("strong"),NTo=o("sew-d"),qTo=o(" \u2014 "),pj=a("a"),jTo=o("SEWDModel"),DTo=o(" (SEW-D model)"),GTo=l(),Ku=a("li"),Ode=a("strong"),OTo=o("speech_to_text"),VTo=o(" \u2014 "),uj=a("a"),XTo=o("Speech2TextModel"),zTo=o(" (Speech2Text model)"),WTo=l(),Zu=a("li"),Vde=a("strong"),QTo=o("splinter"),HTo=o(" \u2014 "),_j=a("a"),UTo=o("SplinterModel"),JTo=o(" (Splinter model)"),YTo=l(),e_=a("li"),Xde=a("strong"),KTo=o("squeezebert"),ZTo=o(" \u2014 "),bj=a("a"),e7o=o("SqueezeBertModel"),o7o=o(" (SqueezeBERT model)"),r7o=l(),o_=a("li"),zde=a("strong"),t7o=o("swin"),a7o=o(" \u2014 "),vj=a("a"),n7o=o("SwinModel"),s7o=o(" (Swin Transformer model)"),l7o=l(),r_=a("li"),Wde=a("strong"),i7o=o("t5"),d7o=o(" \u2014 "),Fj=a("a"),c7o=o("T5Model"),f7o=o(" (T5 model)"),m7o=l(),t_=a("li"),Qde=a("strong"),g7o=o("tapas"),h7o=o(" \u2014 "),Tj=a("a"),p7o=o("TapasModel"),u7o=o(" (TAPAS model)"),_7o=l(),a_=a("li"),Hde=a("strong"),b7o=o("trajectory_transformer"),v7o=o(" \u2014 "),Mj=a("a"),F7o=o("TrajectoryTransformerModel"),T7o=o(" (Trajectory Transformer model)"),M7o=l(),n_=a("li"),Ude=a("strong"),E7o=o("transfo-xl"),C7o=o(" \u2014 "),Ej=a("a"),w7o=o("TransfoXLModel"),A7o=o(" (Transformer-XL model)"),L7o=l(),s_=a("li"),Jde=a("strong"),y7o=o("unispeech"),x7o=o(" \u2014 "),Cj=a("a"),$7o=o("UniSpeechModel"),k7o=o(" (UniSpeech model)"),S7o=l(),l_=a("li"),Yde=a("strong"),R7o=o("unispeech-sat"),P7o=o(" \u2014 "),wj=a("a"),B7o=o("UniSpeechSatModel"),I7o=o(" (UniSpeechSat model)"),N7o=l(),i_=a("li"),Kde=a("strong"),q7o=o("van"),j7o=o(" \u2014 "),Aj=a("a"),D7o=o("VanModel"),G7o=o(" (VAN model)"),O7o=l(),d_=a("li"),Zde=a("strong"),V7o=o("vilt"),X7o=o(" \u2014 "),Lj=a("a"),z7o=o("ViltModel"),W7o=o(" (ViLT model)"),Q7o=l(),c_=a("li"),ece=a("strong"),H7o=o("vision-text-dual-encoder"),U7o=o(" \u2014 "),yj=a("a"),J7o=o("VisionTextDualEncoderModel"),Y7o=o(" (VisionTextDualEncoder model)"),K7o=l(),f_=a("li"),oce=a("strong"),Z7o=o("visual_bert"),eMo=o(" \u2014 "),xj=a("a"),oMo=o("VisualBertModel"),rMo=o(" (VisualBERT model)"),tMo=l(),m_=a("li"),rce=a("strong"),aMo=o("vit"),nMo=o(" \u2014 "),$j=a("a"),sMo=o("ViTModel"),lMo=o(" (ViT model)"),iMo=l(),g_=a("li"),tce=a("strong"),dMo=o("vit_mae"),cMo=o(" \u2014 "),kj=a("a"),fMo=o("ViTMAEModel"),mMo=o(" (ViTMAE model)"),gMo=l(),h_=a("li"),ace=a("strong"),hMo=o("wav2vec2"),pMo=o(" \u2014 "),Sj=a("a"),uMo=o("Wav2Vec2Model"),_Mo=o(" (Wav2Vec2 model)"),bMo=l(),p_=a("li"),nce=a("strong"),vMo=o("wav2vec2-conformer"),FMo=o(" \u2014 "),Rj=a("a"),TMo=o("Wav2Vec2ConformerModel"),MMo=o(" (Wav2Vec2-Conformer model)"),EMo=l(),u_=a("li"),sce=a("strong"),CMo=o("wavlm"),wMo=o(" \u2014 "),Pj=a("a"),AMo=o("WavLMModel"),LMo=o(" (WavLM model)"),yMo=l(),__=a("li"),lce=a("strong"),xMo=o("xglm"),$Mo=o(" \u2014 "),Bj=a("a"),kMo=o("XGLMModel"),SMo=o(" (XGLM model)"),RMo=l(),b_=a("li"),ice=a("strong"),PMo=o("xlm"),BMo=o(" \u2014 "),Ij=a("a"),IMo=o("XLMModel"),NMo=o(" (XLM model)"),qMo=l(),v_=a("li"),dce=a("strong"),jMo=o("xlm-prophetnet"),DMo=o(" \u2014 "),Nj=a("a"),GMo=o("XLMProphetNetModel"),OMo=o(" (XLM-ProphetNet model)"),VMo=l(),F_=a("li"),cce=a("strong"),XMo=o("xlm-roberta"),zMo=o(" \u2014 "),qj=a("a"),WMo=o("XLMRobertaModel"),QMo=o(" (XLM-RoBERTa model)"),HMo=l(),T_=a("li"),fce=a("strong"),UMo=o("xlm-roberta-xl"),JMo=o(" \u2014 "),jj=a("a"),YMo=o("XLMRobertaXLModel"),KMo=o(" (XLM-RoBERTa-XL model)"),ZMo=l(),M_=a("li"),mce=a("strong"),e4o=o("xlnet"),o4o=o(" \u2014 "),Dj=a("a"),r4o=o("XLNetModel"),t4o=o(" (XLNet model)"),a4o=l(),E_=a("li"),gce=a("strong"),n4o=o("yolos"),s4o=o(" \u2014 "),Gj=a("a"),l4o=o("YolosModel"),i4o=o(" (YOLOS model)"),d4o=l(),C_=a("li"),hce=a("strong"),c4o=o("yoso"),f4o=o(" \u2014 "),Oj=a("a"),m4o=o("YosoModel"),g4o=o(" (YOSO model)"),h4o=l(),w_=a("p"),p4o=o("The model is set in evaluation mode by default using "),pce=a("code"),u4o=o("model.eval()"),_4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uce=a("code"),b4o=o("model.train()"),v4o=l(),F(A_.$$.fragment),gGe=l(),Ni=a("h2"),L_=a("a"),_ce=a("span"),F(JL.$$.fragment),F4o=l(),bce=a("span"),T4o=o("AutoModelForPreTraining"),hGe=l(),$o=a("div"),F(YL.$$.fragment),M4o=l(),qi=a("p"),E4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Vj=a("a"),C4o=o("from_pretrained()"),w4o=o(" class method or the "),Xj=a("a"),A4o=o("from_config()"),L4o=o(` class
method.`),y4o=l(),KL=a("p"),x4o=o("This class cannot be instantiated directly using "),vce=a("code"),$4o=o("__init__()"),k4o=o(" (throws an error)."),S4o=l(),st=a("div"),F(ZL.$$.fragment),R4o=l(),Fce=a("p"),P4o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),B4o=l(),ji=a("p"),I4o=o(`Note:
Loading a model from its configuration file does `),Tce=a("strong"),N4o=o("not"),q4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zj=a("a"),j4o=o("from_pretrained()"),D4o=o(" to load the model weights."),G4o=l(),F(y_.$$.fragment),O4o=l(),Ye=a("div"),F(ey.$$.fragment),V4o=l(),Mce=a("p"),X4o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),z4o=l(),Ra=a("p"),W4o=o("The model class to instantiate is selected based on the "),Ece=a("code"),Q4o=o("model_type"),H4o=o(` property of the config object (either
passed as an argument or loaded from `),Cce=a("code"),U4o=o("pretrained_model_name_or_path"),J4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wce=a("code"),Y4o=o("pretrained_model_name_or_path"),K4o=o(":"),Z4o=l(),G=a("ul"),x_=a("li"),Ace=a("strong"),eEo=o("albert"),oEo=o(" \u2014 "),Wj=a("a"),rEo=o("AlbertForPreTraining"),tEo=o(" (ALBERT model)"),aEo=l(),$_=a("li"),Lce=a("strong"),nEo=o("bart"),sEo=o(" \u2014 "),Qj=a("a"),lEo=o("BartForConditionalGeneration"),iEo=o(" (BART model)"),dEo=l(),k_=a("li"),yce=a("strong"),cEo=o("bert"),fEo=o(" \u2014 "),Hj=a("a"),mEo=o("BertForPreTraining"),gEo=o(" (BERT model)"),hEo=l(),S_=a("li"),xce=a("strong"),pEo=o("big_bird"),uEo=o(" \u2014 "),Uj=a("a"),_Eo=o("BigBirdForPreTraining"),bEo=o(" (BigBird model)"),vEo=l(),R_=a("li"),$ce=a("strong"),FEo=o("bloom"),TEo=o(" \u2014 "),Jj=a("a"),MEo=o("BloomForCausalLM"),EEo=o(" (BLOOM model)"),CEo=l(),P_=a("li"),kce=a("strong"),wEo=o("camembert"),AEo=o(" \u2014 "),Yj=a("a"),LEo=o("CamembertForMaskedLM"),yEo=o(" (CamemBERT model)"),xEo=l(),B_=a("li"),Sce=a("strong"),$Eo=o("ctrl"),kEo=o(" \u2014 "),Kj=a("a"),SEo=o("CTRLLMHeadModel"),REo=o(" (CTRL model)"),PEo=l(),I_=a("li"),Rce=a("strong"),BEo=o("data2vec-text"),IEo=o(" \u2014 "),Zj=a("a"),NEo=o("Data2VecTextForMaskedLM"),qEo=o(" (Data2VecText model)"),jEo=l(),N_=a("li"),Pce=a("strong"),DEo=o("deberta"),GEo=o(" \u2014 "),eD=a("a"),OEo=o("DebertaForMaskedLM"),VEo=o(" (DeBERTa model)"),XEo=l(),q_=a("li"),Bce=a("strong"),zEo=o("deberta-v2"),WEo=o(" \u2014 "),oD=a("a"),QEo=o("DebertaV2ForMaskedLM"),HEo=o(" (DeBERTa-v2 model)"),UEo=l(),j_=a("li"),Ice=a("strong"),JEo=o("distilbert"),YEo=o(" \u2014 "),rD=a("a"),KEo=o("DistilBertForMaskedLM"),ZEo=o(" (DistilBERT model)"),eCo=l(),D_=a("li"),Nce=a("strong"),oCo=o("electra"),rCo=o(" \u2014 "),tD=a("a"),tCo=o("ElectraForPreTraining"),aCo=o(" (ELECTRA model)"),nCo=l(),G_=a("li"),qce=a("strong"),sCo=o("flaubert"),lCo=o(" \u2014 "),aD=a("a"),iCo=o("FlaubertWithLMHeadModel"),dCo=o(" (FlauBERT model)"),cCo=l(),O_=a("li"),jce=a("strong"),fCo=o("flava"),mCo=o(" \u2014 "),nD=a("a"),gCo=o("FlavaForPreTraining"),hCo=o(" (FLAVA model)"),pCo=l(),V_=a("li"),Dce=a("strong"),uCo=o("fnet"),_Co=o(" \u2014 "),sD=a("a"),bCo=o("FNetForPreTraining"),vCo=o(" (FNet model)"),FCo=l(),X_=a("li"),Gce=a("strong"),TCo=o("fsmt"),MCo=o(" \u2014 "),lD=a("a"),ECo=o("FSMTForConditionalGeneration"),CCo=o(" (FairSeq Machine-Translation model)"),wCo=l(),z_=a("li"),Oce=a("strong"),ACo=o("funnel"),LCo=o(" \u2014 "),iD=a("a"),yCo=o("FunnelForPreTraining"),xCo=o(" (Funnel Transformer model)"),$Co=l(),W_=a("li"),Vce=a("strong"),kCo=o("gpt2"),SCo=o(" \u2014 "),dD=a("a"),RCo=o("GPT2LMHeadModel"),PCo=o(" (OpenAI GPT-2 model)"),BCo=l(),Q_=a("li"),Xce=a("strong"),ICo=o("ibert"),NCo=o(" \u2014 "),cD=a("a"),qCo=o("IBertForMaskedLM"),jCo=o(" (I-BERT model)"),DCo=l(),H_=a("li"),zce=a("strong"),GCo=o("layoutlm"),OCo=o(" \u2014 "),fD=a("a"),VCo=o("LayoutLMForMaskedLM"),XCo=o(" (LayoutLM model)"),zCo=l(),U_=a("li"),Wce=a("strong"),WCo=o("longformer"),QCo=o(" \u2014 "),mD=a("a"),HCo=o("LongformerForMaskedLM"),UCo=o(" (Longformer model)"),JCo=l(),J_=a("li"),Qce=a("strong"),YCo=o("lxmert"),KCo=o(" \u2014 "),gD=a("a"),ZCo=o("LxmertForPreTraining"),e5o=o(" (LXMERT model)"),o5o=l(),Y_=a("li"),Hce=a("strong"),r5o=o("megatron-bert"),t5o=o(" \u2014 "),hD=a("a"),a5o=o("MegatronBertForPreTraining"),n5o=o(" (Megatron-BERT model)"),s5o=l(),K_=a("li"),Uce=a("strong"),l5o=o("mobilebert"),i5o=o(" \u2014 "),pD=a("a"),d5o=o("MobileBertForPreTraining"),c5o=o(" (MobileBERT model)"),f5o=l(),Z_=a("li"),Jce=a("strong"),m5o=o("mpnet"),g5o=o(" \u2014 "),uD=a("a"),h5o=o("MPNetForMaskedLM"),p5o=o(" (MPNet model)"),u5o=l(),e1=a("li"),Yce=a("strong"),_5o=o("openai-gpt"),b5o=o(" \u2014 "),_D=a("a"),v5o=o("OpenAIGPTLMHeadModel"),F5o=o(" (OpenAI GPT model)"),T5o=l(),o1=a("li"),Kce=a("strong"),M5o=o("retribert"),E5o=o(" \u2014 "),bD=a("a"),C5o=o("RetriBertModel"),w5o=o(" (RetriBERT model)"),A5o=l(),r1=a("li"),Zce=a("strong"),L5o=o("roberta"),y5o=o(" \u2014 "),vD=a("a"),x5o=o("RobertaForMaskedLM"),$5o=o(" (RoBERTa model)"),k5o=l(),t1=a("li"),efe=a("strong"),S5o=o("splinter"),R5o=o(" \u2014 "),FD=a("a"),P5o=o("SplinterForPreTraining"),B5o=o(" (Splinter model)"),I5o=l(),a1=a("li"),ofe=a("strong"),N5o=o("squeezebert"),q5o=o(" \u2014 "),TD=a("a"),j5o=o("SqueezeBertForMaskedLM"),D5o=o(" (SqueezeBERT model)"),G5o=l(),n1=a("li"),rfe=a("strong"),O5o=o("t5"),V5o=o(" \u2014 "),MD=a("a"),X5o=o("T5ForConditionalGeneration"),z5o=o(" (T5 model)"),W5o=l(),s1=a("li"),tfe=a("strong"),Q5o=o("tapas"),H5o=o(" \u2014 "),ED=a("a"),U5o=o("TapasForMaskedLM"),J5o=o(" (TAPAS model)"),Y5o=l(),l1=a("li"),afe=a("strong"),K5o=o("transfo-xl"),Z5o=o(" \u2014 "),CD=a("a"),ewo=o("TransfoXLLMHeadModel"),owo=o(" (Transformer-XL model)"),rwo=l(),i1=a("li"),nfe=a("strong"),two=o("unispeech"),awo=o(" \u2014 "),wD=a("a"),nwo=o("UniSpeechForPreTraining"),swo=o(" (UniSpeech model)"),lwo=l(),d1=a("li"),sfe=a("strong"),iwo=o("unispeech-sat"),dwo=o(" \u2014 "),AD=a("a"),cwo=o("UniSpeechSatForPreTraining"),fwo=o(" (UniSpeechSat model)"),mwo=l(),c1=a("li"),lfe=a("strong"),gwo=o("visual_bert"),hwo=o(" \u2014 "),LD=a("a"),pwo=o("VisualBertForPreTraining"),uwo=o(" (VisualBERT model)"),_wo=l(),f1=a("li"),ife=a("strong"),bwo=o("vit_mae"),vwo=o(" \u2014 "),yD=a("a"),Fwo=o("ViTMAEForPreTraining"),Two=o(" (ViTMAE model)"),Mwo=l(),m1=a("li"),dfe=a("strong"),Ewo=o("wav2vec2"),Cwo=o(" \u2014 "),xD=a("a"),wwo=o("Wav2Vec2ForPreTraining"),Awo=o(" (Wav2Vec2 model)"),Lwo=l(),g1=a("li"),cfe=a("strong"),ywo=o("wav2vec2-conformer"),xwo=o(" \u2014 "),$D=a("a"),$wo=o("Wav2Vec2ConformerForPreTraining"),kwo=o(" (Wav2Vec2-Conformer model)"),Swo=l(),h1=a("li"),ffe=a("strong"),Rwo=o("xlm"),Pwo=o(" \u2014 "),kD=a("a"),Bwo=o("XLMWithLMHeadModel"),Iwo=o(" (XLM model)"),Nwo=l(),p1=a("li"),mfe=a("strong"),qwo=o("xlm-roberta"),jwo=o(" \u2014 "),SD=a("a"),Dwo=o("XLMRobertaForMaskedLM"),Gwo=o(" (XLM-RoBERTa model)"),Owo=l(),u1=a("li"),gfe=a("strong"),Vwo=o("xlm-roberta-xl"),Xwo=o(" \u2014 "),RD=a("a"),zwo=o("XLMRobertaXLForMaskedLM"),Wwo=o(" (XLM-RoBERTa-XL model)"),Qwo=l(),_1=a("li"),hfe=a("strong"),Hwo=o("xlnet"),Uwo=o(" \u2014 "),PD=a("a"),Jwo=o("XLNetLMHeadModel"),Ywo=o(" (XLNet model)"),Kwo=l(),b1=a("p"),Zwo=o("The model is set in evaluation mode by default using "),pfe=a("code"),eAo=o("model.eval()"),oAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=a("code"),rAo=o("model.train()"),tAo=l(),F(v1.$$.fragment),pGe=l(),Di=a("h2"),F1=a("a"),_fe=a("span"),F(oy.$$.fragment),aAo=l(),bfe=a("span"),nAo=o("AutoModelForCausalLM"),uGe=l(),ko=a("div"),F(ry.$$.fragment),sAo=l(),Gi=a("p"),lAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BD=a("a"),iAo=o("from_pretrained()"),dAo=o(" class method or the "),ID=a("a"),cAo=o("from_config()"),fAo=o(` class
method.`),mAo=l(),ty=a("p"),gAo=o("This class cannot be instantiated directly using "),vfe=a("code"),hAo=o("__init__()"),pAo=o(" (throws an error)."),uAo=l(),lt=a("div"),F(ay.$$.fragment),_Ao=l(),Ffe=a("p"),bAo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vAo=l(),Oi=a("p"),FAo=o(`Note:
Loading a model from its configuration file does `),Tfe=a("strong"),TAo=o("not"),MAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ND=a("a"),EAo=o("from_pretrained()"),CAo=o(" to load the model weights."),wAo=l(),F(T1.$$.fragment),AAo=l(),Ke=a("div"),F(ny.$$.fragment),LAo=l(),Mfe=a("p"),yAo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xAo=l(),Pa=a("p"),$Ao=o("The model class to instantiate is selected based on the "),Efe=a("code"),kAo=o("model_type"),SAo=o(` property of the config object (either
passed as an argument or loaded from `),Cfe=a("code"),RAo=o("pretrained_model_name_or_path"),PAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=a("code"),BAo=o("pretrained_model_name_or_path"),IAo=o(":"),NAo=l(),z=a("ul"),M1=a("li"),Afe=a("strong"),qAo=o("bart"),jAo=o(" \u2014 "),qD=a("a"),DAo=o("BartForCausalLM"),GAo=o(" (BART model)"),OAo=l(),E1=a("li"),Lfe=a("strong"),VAo=o("bert"),XAo=o(" \u2014 "),jD=a("a"),zAo=o("BertLMHeadModel"),WAo=o(" (BERT model)"),QAo=l(),C1=a("li"),yfe=a("strong"),HAo=o("bert-generation"),UAo=o(" \u2014 "),DD=a("a"),JAo=o("BertGenerationDecoder"),YAo=o(" (Bert Generation model)"),KAo=l(),w1=a("li"),xfe=a("strong"),ZAo=o("big_bird"),eLo=o(" \u2014 "),GD=a("a"),oLo=o("BigBirdForCausalLM"),rLo=o(" (BigBird model)"),tLo=l(),A1=a("li"),$fe=a("strong"),aLo=o("bigbird_pegasus"),nLo=o(" \u2014 "),OD=a("a"),sLo=o("BigBirdPegasusForCausalLM"),lLo=o(" (BigBird-Pegasus model)"),iLo=l(),L1=a("li"),kfe=a("strong"),dLo=o("blenderbot"),cLo=o(" \u2014 "),VD=a("a"),fLo=o("BlenderbotForCausalLM"),mLo=o(" (Blenderbot model)"),gLo=l(),y1=a("li"),Sfe=a("strong"),hLo=o("blenderbot-small"),pLo=o(" \u2014 "),XD=a("a"),uLo=o("BlenderbotSmallForCausalLM"),_Lo=o(" (BlenderbotSmall model)"),bLo=l(),x1=a("li"),Rfe=a("strong"),vLo=o("bloom"),FLo=o(" \u2014 "),zD=a("a"),TLo=o("BloomForCausalLM"),MLo=o(" (BLOOM model)"),ELo=l(),$1=a("li"),Pfe=a("strong"),CLo=o("camembert"),wLo=o(" \u2014 "),WD=a("a"),ALo=o("CamembertForCausalLM"),LLo=o(" (CamemBERT model)"),yLo=l(),k1=a("li"),Bfe=a("strong"),xLo=o("ctrl"),$Lo=o(" \u2014 "),QD=a("a"),kLo=o("CTRLLMHeadModel"),SLo=o(" (CTRL model)"),RLo=l(),S1=a("li"),Ife=a("strong"),PLo=o("data2vec-text"),BLo=o(" \u2014 "),HD=a("a"),ILo=o("Data2VecTextForCausalLM"),NLo=o(" (Data2VecText model)"),qLo=l(),R1=a("li"),Nfe=a("strong"),jLo=o("electra"),DLo=o(" \u2014 "),UD=a("a"),GLo=o("ElectraForCausalLM"),OLo=o(" (ELECTRA model)"),VLo=l(),P1=a("li"),qfe=a("strong"),XLo=o("gpt2"),zLo=o(" \u2014 "),JD=a("a"),WLo=o("GPT2LMHeadModel"),QLo=o(" (OpenAI GPT-2 model)"),HLo=l(),B1=a("li"),jfe=a("strong"),ULo=o("gpt_neo"),JLo=o(" \u2014 "),YD=a("a"),YLo=o("GPTNeoForCausalLM"),KLo=o(" (GPT Neo model)"),ZLo=l(),I1=a("li"),Dfe=a("strong"),eyo=o("gpt_neox"),oyo=o(" \u2014 "),KD=a("a"),ryo=o("GPTNeoXForCausalLM"),tyo=o(" (GPT NeoX model)"),ayo=l(),N1=a("li"),Gfe=a("strong"),nyo=o("gptj"),syo=o(" \u2014 "),ZD=a("a"),lyo=o("GPTJForCausalLM"),iyo=o(" (GPT-J model)"),dyo=l(),q1=a("li"),Ofe=a("strong"),cyo=o("marian"),fyo=o(" \u2014 "),eG=a("a"),myo=o("MarianForCausalLM"),gyo=o(" (Marian model)"),hyo=l(),j1=a("li"),Vfe=a("strong"),pyo=o("mbart"),uyo=o(" \u2014 "),oG=a("a"),_yo=o("MBartForCausalLM"),byo=o(" (mBART model)"),vyo=l(),D1=a("li"),Xfe=a("strong"),Fyo=o("megatron-bert"),Tyo=o(" \u2014 "),rG=a("a"),Myo=o("MegatronBertForCausalLM"),Eyo=o(" (Megatron-BERT model)"),Cyo=l(),G1=a("li"),zfe=a("strong"),wyo=o("openai-gpt"),Ayo=o(" \u2014 "),tG=a("a"),Lyo=o("OpenAIGPTLMHeadModel"),yyo=o(" (OpenAI GPT model)"),xyo=l(),O1=a("li"),Wfe=a("strong"),$yo=o("opt"),kyo=o(" \u2014 "),aG=a("a"),Syo=o("OPTForCausalLM"),Ryo=o(" (OPT model)"),Pyo=l(),V1=a("li"),Qfe=a("strong"),Byo=o("pegasus"),Iyo=o(" \u2014 "),nG=a("a"),Nyo=o("PegasusForCausalLM"),qyo=o(" (Pegasus model)"),jyo=l(),X1=a("li"),Hfe=a("strong"),Dyo=o("plbart"),Gyo=o(" \u2014 "),sG=a("a"),Oyo=o("PLBartForCausalLM"),Vyo=o(" (PLBart model)"),Xyo=l(),z1=a("li"),Ufe=a("strong"),zyo=o("prophetnet"),Wyo=o(" \u2014 "),lG=a("a"),Qyo=o("ProphetNetForCausalLM"),Hyo=o(" (ProphetNet model)"),Uyo=l(),W1=a("li"),Jfe=a("strong"),Jyo=o("qdqbert"),Yyo=o(" \u2014 "),iG=a("a"),Kyo=o("QDQBertLMHeadModel"),Zyo=o(" (QDQBert model)"),e8o=l(),Q1=a("li"),Yfe=a("strong"),o8o=o("reformer"),r8o=o(" \u2014 "),dG=a("a"),t8o=o("ReformerModelWithLMHead"),a8o=o(" (Reformer model)"),n8o=l(),H1=a("li"),Kfe=a("strong"),s8o=o("rembert"),l8o=o(" \u2014 "),cG=a("a"),i8o=o("RemBertForCausalLM"),d8o=o(" (RemBERT model)"),c8o=l(),U1=a("li"),Zfe=a("strong"),f8o=o("roberta"),m8o=o(" \u2014 "),fG=a("a"),g8o=o("RobertaForCausalLM"),h8o=o(" (RoBERTa model)"),p8o=l(),J1=a("li"),eme=a("strong"),u8o=o("roformer"),_8o=o(" \u2014 "),mG=a("a"),b8o=o("RoFormerForCausalLM"),v8o=o(" (RoFormer model)"),F8o=l(),Y1=a("li"),ome=a("strong"),T8o=o("speech_to_text_2"),M8o=o(" \u2014 "),gG=a("a"),E8o=o("Speech2Text2ForCausalLM"),C8o=o(" (Speech2Text2 model)"),w8o=l(),K1=a("li"),rme=a("strong"),A8o=o("transfo-xl"),L8o=o(" \u2014 "),hG=a("a"),y8o=o("TransfoXLLMHeadModel"),x8o=o(" (Transformer-XL model)"),$8o=l(),Z1=a("li"),tme=a("strong"),k8o=o("trocr"),S8o=o(" \u2014 "),pG=a("a"),R8o=o("TrOCRForCausalLM"),P8o=o(" (TrOCR model)"),B8o=l(),e2=a("li"),ame=a("strong"),I8o=o("xglm"),N8o=o(" \u2014 "),uG=a("a"),q8o=o("XGLMForCausalLM"),j8o=o(" (XGLM model)"),D8o=l(),o2=a("li"),nme=a("strong"),G8o=o("xlm"),O8o=o(" \u2014 "),_G=a("a"),V8o=o("XLMWithLMHeadModel"),X8o=o(" (XLM model)"),z8o=l(),r2=a("li"),sme=a("strong"),W8o=o("xlm-prophetnet"),Q8o=o(" \u2014 "),bG=a("a"),H8o=o("XLMProphetNetForCausalLM"),U8o=o(" (XLM-ProphetNet model)"),J8o=l(),t2=a("li"),lme=a("strong"),Y8o=o("xlm-roberta"),K8o=o(" \u2014 "),vG=a("a"),Z8o=o("XLMRobertaForCausalLM"),e9o=o(" (XLM-RoBERTa model)"),o9o=l(),a2=a("li"),ime=a("strong"),r9o=o("xlm-roberta-xl"),t9o=o(" \u2014 "),FG=a("a"),a9o=o("XLMRobertaXLForCausalLM"),n9o=o(" (XLM-RoBERTa-XL model)"),s9o=l(),n2=a("li"),dme=a("strong"),l9o=o("xlnet"),i9o=o(" \u2014 "),TG=a("a"),d9o=o("XLNetLMHeadModel"),c9o=o(" (XLNet model)"),f9o=l(),s2=a("p"),m9o=o("The model is set in evaluation mode by default using "),cme=a("code"),g9o=o("model.eval()"),h9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=a("code"),p9o=o("model.train()"),u9o=l(),F(l2.$$.fragment),_Ge=l(),Vi=a("h2"),i2=a("a"),mme=a("span"),F(sy.$$.fragment),_9o=l(),gme=a("span"),b9o=o("AutoModelForMaskedLM"),bGe=l(),So=a("div"),F(ly.$$.fragment),v9o=l(),Xi=a("p"),F9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MG=a("a"),T9o=o("from_pretrained()"),M9o=o(" class method or the "),EG=a("a"),E9o=o("from_config()"),C9o=o(` class
method.`),w9o=l(),iy=a("p"),A9o=o("This class cannot be instantiated directly using "),hme=a("code"),L9o=o("__init__()"),y9o=o(" (throws an error)."),x9o=l(),it=a("div"),F(dy.$$.fragment),$9o=l(),pme=a("p"),k9o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),S9o=l(),zi=a("p"),R9o=o(`Note:
Loading a model from its configuration file does `),ume=a("strong"),P9o=o("not"),B9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CG=a("a"),I9o=o("from_pretrained()"),N9o=o(" to load the model weights."),q9o=l(),F(d2.$$.fragment),j9o=l(),Ze=a("div"),F(cy.$$.fragment),D9o=l(),_me=a("p"),G9o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),O9o=l(),Ba=a("p"),V9o=o("The model class to instantiate is selected based on the "),bme=a("code"),X9o=o("model_type"),z9o=o(` property of the config object (either
passed as an argument or loaded from `),vme=a("code"),W9o=o("pretrained_model_name_or_path"),Q9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=a("code"),H9o=o("pretrained_model_name_or_path"),U9o=o(":"),J9o=l(),Q=a("ul"),c2=a("li"),Tme=a("strong"),Y9o=o("albert"),K9o=o(" \u2014 "),wG=a("a"),Z9o=o("AlbertForMaskedLM"),exo=o(" (ALBERT model)"),oxo=l(),f2=a("li"),Mme=a("strong"),rxo=o("bart"),txo=o(" \u2014 "),AG=a("a"),axo=o("BartForConditionalGeneration"),nxo=o(" (BART model)"),sxo=l(),m2=a("li"),Eme=a("strong"),lxo=o("bert"),ixo=o(" \u2014 "),LG=a("a"),dxo=o("BertForMaskedLM"),cxo=o(" (BERT model)"),fxo=l(),g2=a("li"),Cme=a("strong"),mxo=o("big_bird"),gxo=o(" \u2014 "),yG=a("a"),hxo=o("BigBirdForMaskedLM"),pxo=o(" (BigBird model)"),uxo=l(),h2=a("li"),wme=a("strong"),_xo=o("camembert"),bxo=o(" \u2014 "),xG=a("a"),vxo=o("CamembertForMaskedLM"),Fxo=o(" (CamemBERT model)"),Txo=l(),p2=a("li"),Ame=a("strong"),Mxo=o("convbert"),Exo=o(" \u2014 "),$G=a("a"),Cxo=o("ConvBertForMaskedLM"),wxo=o(" (ConvBERT model)"),Axo=l(),u2=a("li"),Lme=a("strong"),Lxo=o("data2vec-text"),yxo=o(" \u2014 "),kG=a("a"),xxo=o("Data2VecTextForMaskedLM"),$xo=o(" (Data2VecText model)"),kxo=l(),_2=a("li"),yme=a("strong"),Sxo=o("deberta"),Rxo=o(" \u2014 "),SG=a("a"),Pxo=o("DebertaForMaskedLM"),Bxo=o(" (DeBERTa model)"),Ixo=l(),b2=a("li"),xme=a("strong"),Nxo=o("deberta-v2"),qxo=o(" \u2014 "),RG=a("a"),jxo=o("DebertaV2ForMaskedLM"),Dxo=o(" (DeBERTa-v2 model)"),Gxo=l(),v2=a("li"),$me=a("strong"),Oxo=o("distilbert"),Vxo=o(" \u2014 "),PG=a("a"),Xxo=o("DistilBertForMaskedLM"),zxo=o(" (DistilBERT model)"),Wxo=l(),F2=a("li"),kme=a("strong"),Qxo=o("electra"),Hxo=o(" \u2014 "),BG=a("a"),Uxo=o("ElectraForMaskedLM"),Jxo=o(" (ELECTRA model)"),Yxo=l(),T2=a("li"),Sme=a("strong"),Kxo=o("flaubert"),Zxo=o(" \u2014 "),IG=a("a"),e$o=o("FlaubertWithLMHeadModel"),o$o=o(" (FlauBERT model)"),r$o=l(),M2=a("li"),Rme=a("strong"),t$o=o("fnet"),a$o=o(" \u2014 "),NG=a("a"),n$o=o("FNetForMaskedLM"),s$o=o(" (FNet model)"),l$o=l(),E2=a("li"),Pme=a("strong"),i$o=o("funnel"),d$o=o(" \u2014 "),qG=a("a"),c$o=o("FunnelForMaskedLM"),f$o=o(" (Funnel Transformer model)"),m$o=l(),C2=a("li"),Bme=a("strong"),g$o=o("ibert"),h$o=o(" \u2014 "),jG=a("a"),p$o=o("IBertForMaskedLM"),u$o=o(" (I-BERT model)"),_$o=l(),w2=a("li"),Ime=a("strong"),b$o=o("layoutlm"),v$o=o(" \u2014 "),DG=a("a"),F$o=o("LayoutLMForMaskedLM"),T$o=o(" (LayoutLM model)"),M$o=l(),A2=a("li"),Nme=a("strong"),E$o=o("longformer"),C$o=o(" \u2014 "),GG=a("a"),w$o=o("LongformerForMaskedLM"),A$o=o(" (Longformer model)"),L$o=l(),L2=a("li"),qme=a("strong"),y$o=o("luke"),x$o=o(" \u2014 "),OG=a("a"),$$o=o("LukeForMaskedLM"),k$o=o(" (LUKE model)"),S$o=l(),y2=a("li"),jme=a("strong"),R$o=o("mbart"),P$o=o(" \u2014 "),VG=a("a"),B$o=o("MBartForConditionalGeneration"),I$o=o(" (mBART model)"),N$o=l(),x2=a("li"),Dme=a("strong"),q$o=o("megatron-bert"),j$o=o(" \u2014 "),XG=a("a"),D$o=o("MegatronBertForMaskedLM"),G$o=o(" (Megatron-BERT model)"),O$o=l(),$2=a("li"),Gme=a("strong"),V$o=o("mobilebert"),X$o=o(" \u2014 "),zG=a("a"),z$o=o("MobileBertForMaskedLM"),W$o=o(" (MobileBERT model)"),Q$o=l(),k2=a("li"),Ome=a("strong"),H$o=o("mpnet"),U$o=o(" \u2014 "),WG=a("a"),J$o=o("MPNetForMaskedLM"),Y$o=o(" (MPNet model)"),K$o=l(),S2=a("li"),Vme=a("strong"),Z$o=o("nystromformer"),eko=o(" \u2014 "),QG=a("a"),oko=o("NystromformerForMaskedLM"),rko=o(" (Nystr\xF6mformer model)"),tko=l(),R2=a("li"),Xme=a("strong"),ako=o("perceiver"),nko=o(" \u2014 "),HG=a("a"),sko=o("PerceiverForMaskedLM"),lko=o(" (Perceiver model)"),iko=l(),P2=a("li"),zme=a("strong"),dko=o("qdqbert"),cko=o(" \u2014 "),UG=a("a"),fko=o("QDQBertForMaskedLM"),mko=o(" (QDQBert model)"),gko=l(),B2=a("li"),Wme=a("strong"),hko=o("reformer"),pko=o(" \u2014 "),JG=a("a"),uko=o("ReformerForMaskedLM"),_ko=o(" (Reformer model)"),bko=l(),I2=a("li"),Qme=a("strong"),vko=o("rembert"),Fko=o(" \u2014 "),YG=a("a"),Tko=o("RemBertForMaskedLM"),Mko=o(" (RemBERT model)"),Eko=l(),N2=a("li"),Hme=a("strong"),Cko=o("roberta"),wko=o(" \u2014 "),KG=a("a"),Ako=o("RobertaForMaskedLM"),Lko=o(" (RoBERTa model)"),yko=l(),q2=a("li"),Ume=a("strong"),xko=o("roformer"),$ko=o(" \u2014 "),ZG=a("a"),kko=o("RoFormerForMaskedLM"),Sko=o(" (RoFormer model)"),Rko=l(),j2=a("li"),Jme=a("strong"),Pko=o("squeezebert"),Bko=o(" \u2014 "),eO=a("a"),Iko=o("SqueezeBertForMaskedLM"),Nko=o(" (SqueezeBERT model)"),qko=l(),D2=a("li"),Yme=a("strong"),jko=o("tapas"),Dko=o(" \u2014 "),oO=a("a"),Gko=o("TapasForMaskedLM"),Oko=o(" (TAPAS model)"),Vko=l(),G2=a("li"),Kme=a("strong"),Xko=o("wav2vec2"),zko=o(" \u2014 "),Zme=a("code"),Wko=o("Wav2Vec2ForMaskedLM"),Qko=o(" (Wav2Vec2 model)"),Hko=l(),O2=a("li"),ege=a("strong"),Uko=o("xlm"),Jko=o(" \u2014 "),rO=a("a"),Yko=o("XLMWithLMHeadModel"),Kko=o(" (XLM model)"),Zko=l(),V2=a("li"),oge=a("strong"),eSo=o("xlm-roberta"),oSo=o(" \u2014 "),tO=a("a"),rSo=o("XLMRobertaForMaskedLM"),tSo=o(" (XLM-RoBERTa model)"),aSo=l(),X2=a("li"),rge=a("strong"),nSo=o("xlm-roberta-xl"),sSo=o(" \u2014 "),aO=a("a"),lSo=o("XLMRobertaXLForMaskedLM"),iSo=o(" (XLM-RoBERTa-XL model)"),dSo=l(),z2=a("li"),tge=a("strong"),cSo=o("yoso"),fSo=o(" \u2014 "),nO=a("a"),mSo=o("YosoForMaskedLM"),gSo=o(" (YOSO model)"),hSo=l(),W2=a("p"),pSo=o("The model is set in evaluation mode by default using "),age=a("code"),uSo=o("model.eval()"),_So=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=a("code"),bSo=o("model.train()"),vSo=l(),F(Q2.$$.fragment),vGe=l(),Wi=a("h2"),H2=a("a"),sge=a("span"),F(fy.$$.fragment),FSo=l(),lge=a("span"),TSo=o("AutoModelForSeq2SeqLM"),FGe=l(),Ro=a("div"),F(my.$$.fragment),MSo=l(),Qi=a("p"),ESo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sO=a("a"),CSo=o("from_pretrained()"),wSo=o(" class method or the "),lO=a("a"),ASo=o("from_config()"),LSo=o(` class
method.`),ySo=l(),gy=a("p"),xSo=o("This class cannot be instantiated directly using "),ige=a("code"),$So=o("__init__()"),kSo=o(" (throws an error)."),SSo=l(),dt=a("div"),F(hy.$$.fragment),RSo=l(),dge=a("p"),PSo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),BSo=l(),Hi=a("p"),ISo=o(`Note:
Loading a model from its configuration file does `),cge=a("strong"),NSo=o("not"),qSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=a("a"),jSo=o("from_pretrained()"),DSo=o(" to load the model weights."),GSo=l(),F(U2.$$.fragment),OSo=l(),eo=a("div"),F(py.$$.fragment),VSo=l(),fge=a("p"),XSo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zSo=l(),Ia=a("p"),WSo=o("The model class to instantiate is selected based on the "),mge=a("code"),QSo=o("model_type"),HSo=o(` property of the config object (either
passed as an argument or loaded from `),gge=a("code"),USo=o("pretrained_model_name_or_path"),JSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=a("code"),YSo=o("pretrained_model_name_or_path"),KSo=o(":"),ZSo=l(),pe=a("ul"),J2=a("li"),pge=a("strong"),eRo=o("bart"),oRo=o(" \u2014 "),dO=a("a"),rRo=o("BartForConditionalGeneration"),tRo=o(" (BART model)"),aRo=l(),Y2=a("li"),uge=a("strong"),nRo=o("bigbird_pegasus"),sRo=o(" \u2014 "),cO=a("a"),lRo=o("BigBirdPegasusForConditionalGeneration"),iRo=o(" (BigBird-Pegasus model)"),dRo=l(),K2=a("li"),_ge=a("strong"),cRo=o("blenderbot"),fRo=o(" \u2014 "),fO=a("a"),mRo=o("BlenderbotForConditionalGeneration"),gRo=o(" (Blenderbot model)"),hRo=l(),Z2=a("li"),bge=a("strong"),pRo=o("blenderbot-small"),uRo=o(" \u2014 "),mO=a("a"),_Ro=o("BlenderbotSmallForConditionalGeneration"),bRo=o(" (BlenderbotSmall model)"),vRo=l(),eb=a("li"),vge=a("strong"),FRo=o("encoder-decoder"),TRo=o(" \u2014 "),gO=a("a"),MRo=o("EncoderDecoderModel"),ERo=o(" (Encoder decoder model)"),CRo=l(),ob=a("li"),Fge=a("strong"),wRo=o("fsmt"),ARo=o(" \u2014 "),hO=a("a"),LRo=o("FSMTForConditionalGeneration"),yRo=o(" (FairSeq Machine-Translation model)"),xRo=l(),rb=a("li"),Tge=a("strong"),$Ro=o("led"),kRo=o(" \u2014 "),pO=a("a"),SRo=o("LEDForConditionalGeneration"),RRo=o(" (LED model)"),PRo=l(),tb=a("li"),Mge=a("strong"),BRo=o("longt5"),IRo=o(" \u2014 "),uO=a("a"),NRo=o("LongT5ForConditionalGeneration"),qRo=o(" (LongT5 model)"),jRo=l(),ab=a("li"),Ege=a("strong"),DRo=o("m2m_100"),GRo=o(" \u2014 "),_O=a("a"),ORo=o("M2M100ForConditionalGeneration"),VRo=o(" (M2M100 model)"),XRo=l(),nb=a("li"),Cge=a("strong"),zRo=o("marian"),WRo=o(" \u2014 "),bO=a("a"),QRo=o("MarianMTModel"),HRo=o(" (Marian model)"),URo=l(),sb=a("li"),wge=a("strong"),JRo=o("mbart"),YRo=o(" \u2014 "),vO=a("a"),KRo=o("MBartForConditionalGeneration"),ZRo=o(" (mBART model)"),ePo=l(),lb=a("li"),Age=a("strong"),oPo=o("mt5"),rPo=o(" \u2014 "),FO=a("a"),tPo=o("MT5ForConditionalGeneration"),aPo=o(" (MT5 model)"),nPo=l(),ib=a("li"),Lge=a("strong"),sPo=o("pegasus"),lPo=o(" \u2014 "),TO=a("a"),iPo=o("PegasusForConditionalGeneration"),dPo=o(" (Pegasus model)"),cPo=l(),db=a("li"),yge=a("strong"),fPo=o("plbart"),mPo=o(" \u2014 "),MO=a("a"),gPo=o("PLBartForConditionalGeneration"),hPo=o(" (PLBart model)"),pPo=l(),cb=a("li"),xge=a("strong"),uPo=o("prophetnet"),_Po=o(" \u2014 "),EO=a("a"),bPo=o("ProphetNetForConditionalGeneration"),vPo=o(" (ProphetNet model)"),FPo=l(),fb=a("li"),$ge=a("strong"),TPo=o("t5"),MPo=o(" \u2014 "),CO=a("a"),EPo=o("T5ForConditionalGeneration"),CPo=o(" (T5 model)"),wPo=l(),mb=a("li"),kge=a("strong"),APo=o("xlm-prophetnet"),LPo=o(" \u2014 "),wO=a("a"),yPo=o("XLMProphetNetForConditionalGeneration"),xPo=o(" (XLM-ProphetNet model)"),$Po=l(),gb=a("p"),kPo=o("The model is set in evaluation mode by default using "),Sge=a("code"),SPo=o("model.eval()"),RPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rge=a("code"),PPo=o("model.train()"),BPo=l(),F(hb.$$.fragment),TGe=l(),Ui=a("h2"),pb=a("a"),Pge=a("span"),F(uy.$$.fragment),IPo=l(),Bge=a("span"),NPo=o("AutoModelForSequenceClassification"),MGe=l(),Po=a("div"),F(_y.$$.fragment),qPo=l(),Ji=a("p"),jPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AO=a("a"),DPo=o("from_pretrained()"),GPo=o(" class method or the "),LO=a("a"),OPo=o("from_config()"),VPo=o(` class
method.`),XPo=l(),by=a("p"),zPo=o("This class cannot be instantiated directly using "),Ige=a("code"),WPo=o("__init__()"),QPo=o(" (throws an error)."),HPo=l(),ct=a("div"),F(vy.$$.fragment),UPo=l(),Nge=a("p"),JPo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),YPo=l(),Yi=a("p"),KPo=o(`Note:
Loading a model from its configuration file does `),qge=a("strong"),ZPo=o("not"),eBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=a("a"),oBo=o("from_pretrained()"),rBo=o(" to load the model weights."),tBo=l(),F(ub.$$.fragment),aBo=l(),oo=a("div"),F(Fy.$$.fragment),nBo=l(),jge=a("p"),sBo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lBo=l(),Na=a("p"),iBo=o("The model class to instantiate is selected based on the "),Dge=a("code"),dBo=o("model_type"),cBo=o(` property of the config object (either
passed as an argument or loaded from `),Gge=a("code"),fBo=o("pretrained_model_name_or_path"),mBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=a("code"),gBo=o("pretrained_model_name_or_path"),hBo=o(":"),pBo=l(),N=a("ul"),_b=a("li"),Vge=a("strong"),uBo=o("albert"),_Bo=o(" \u2014 "),xO=a("a"),bBo=o("AlbertForSequenceClassification"),vBo=o(" (ALBERT model)"),FBo=l(),bb=a("li"),Xge=a("strong"),TBo=o("bart"),MBo=o(" \u2014 "),$O=a("a"),EBo=o("BartForSequenceClassification"),CBo=o(" (BART model)"),wBo=l(),vb=a("li"),zge=a("strong"),ABo=o("bert"),LBo=o(" \u2014 "),kO=a("a"),yBo=o("BertForSequenceClassification"),xBo=o(" (BERT model)"),$Bo=l(),Fb=a("li"),Wge=a("strong"),kBo=o("big_bird"),SBo=o(" \u2014 "),SO=a("a"),RBo=o("BigBirdForSequenceClassification"),PBo=o(" (BigBird model)"),BBo=l(),Tb=a("li"),Qge=a("strong"),IBo=o("bigbird_pegasus"),NBo=o(" \u2014 "),RO=a("a"),qBo=o("BigBirdPegasusForSequenceClassification"),jBo=o(" (BigBird-Pegasus model)"),DBo=l(),Mb=a("li"),Hge=a("strong"),GBo=o("bloom"),OBo=o(" \u2014 "),PO=a("a"),VBo=o("BloomForSequenceClassification"),XBo=o(" (BLOOM model)"),zBo=l(),Eb=a("li"),Uge=a("strong"),WBo=o("camembert"),QBo=o(" \u2014 "),BO=a("a"),HBo=o("CamembertForSequenceClassification"),UBo=o(" (CamemBERT model)"),JBo=l(),Cb=a("li"),Jge=a("strong"),YBo=o("canine"),KBo=o(" \u2014 "),IO=a("a"),ZBo=o("CanineForSequenceClassification"),eIo=o(" (CANINE model)"),oIo=l(),wb=a("li"),Yge=a("strong"),rIo=o("convbert"),tIo=o(" \u2014 "),NO=a("a"),aIo=o("ConvBertForSequenceClassification"),nIo=o(" (ConvBERT model)"),sIo=l(),Ab=a("li"),Kge=a("strong"),lIo=o("ctrl"),iIo=o(" \u2014 "),qO=a("a"),dIo=o("CTRLForSequenceClassification"),cIo=o(" (CTRL model)"),fIo=l(),Lb=a("li"),Zge=a("strong"),mIo=o("data2vec-text"),gIo=o(" \u2014 "),jO=a("a"),hIo=o("Data2VecTextForSequenceClassification"),pIo=o(" (Data2VecText model)"),uIo=l(),yb=a("li"),ehe=a("strong"),_Io=o("deberta"),bIo=o(" \u2014 "),DO=a("a"),vIo=o("DebertaForSequenceClassification"),FIo=o(" (DeBERTa model)"),TIo=l(),xb=a("li"),ohe=a("strong"),MIo=o("deberta-v2"),EIo=o(" \u2014 "),GO=a("a"),CIo=o("DebertaV2ForSequenceClassification"),wIo=o(" (DeBERTa-v2 model)"),AIo=l(),$b=a("li"),rhe=a("strong"),LIo=o("distilbert"),yIo=o(" \u2014 "),OO=a("a"),xIo=o("DistilBertForSequenceClassification"),$Io=o(" (DistilBERT model)"),kIo=l(),kb=a("li"),the=a("strong"),SIo=o("electra"),RIo=o(" \u2014 "),VO=a("a"),PIo=o("ElectraForSequenceClassification"),BIo=o(" (ELECTRA model)"),IIo=l(),Sb=a("li"),ahe=a("strong"),NIo=o("flaubert"),qIo=o(" \u2014 "),XO=a("a"),jIo=o("FlaubertForSequenceClassification"),DIo=o(" (FlauBERT model)"),GIo=l(),Rb=a("li"),nhe=a("strong"),OIo=o("fnet"),VIo=o(" \u2014 "),zO=a("a"),XIo=o("FNetForSequenceClassification"),zIo=o(" (FNet model)"),WIo=l(),Pb=a("li"),she=a("strong"),QIo=o("funnel"),HIo=o(" \u2014 "),WO=a("a"),UIo=o("FunnelForSequenceClassification"),JIo=o(" (Funnel Transformer model)"),YIo=l(),Bb=a("li"),lhe=a("strong"),KIo=o("gpt2"),ZIo=o(" \u2014 "),QO=a("a"),eNo=o("GPT2ForSequenceClassification"),oNo=o(" (OpenAI GPT-2 model)"),rNo=l(),Ib=a("li"),ihe=a("strong"),tNo=o("gpt_neo"),aNo=o(" \u2014 "),HO=a("a"),nNo=o("GPTNeoForSequenceClassification"),sNo=o(" (GPT Neo model)"),lNo=l(),Nb=a("li"),dhe=a("strong"),iNo=o("gptj"),dNo=o(" \u2014 "),UO=a("a"),cNo=o("GPTJForSequenceClassification"),fNo=o(" (GPT-J model)"),mNo=l(),qb=a("li"),che=a("strong"),gNo=o("ibert"),hNo=o(" \u2014 "),JO=a("a"),pNo=o("IBertForSequenceClassification"),uNo=o(" (I-BERT model)"),_No=l(),jb=a("li"),fhe=a("strong"),bNo=o("layoutlm"),vNo=o(" \u2014 "),YO=a("a"),FNo=o("LayoutLMForSequenceClassification"),TNo=o(" (LayoutLM model)"),MNo=l(),Db=a("li"),mhe=a("strong"),ENo=o("layoutlmv2"),CNo=o(" \u2014 "),KO=a("a"),wNo=o("LayoutLMv2ForSequenceClassification"),ANo=o(" (LayoutLMv2 model)"),LNo=l(),Gb=a("li"),ghe=a("strong"),yNo=o("layoutlmv3"),xNo=o(" \u2014 "),ZO=a("a"),$No=o("LayoutLMv3ForSequenceClassification"),kNo=o(" (LayoutLMv3 model)"),SNo=l(),Ob=a("li"),hhe=a("strong"),RNo=o("led"),PNo=o(" \u2014 "),eV=a("a"),BNo=o("LEDForSequenceClassification"),INo=o(" (LED model)"),NNo=l(),Vb=a("li"),phe=a("strong"),qNo=o("longformer"),jNo=o(" \u2014 "),oV=a("a"),DNo=o("LongformerForSequenceClassification"),GNo=o(" (Longformer model)"),ONo=l(),Xb=a("li"),uhe=a("strong"),VNo=o("mbart"),XNo=o(" \u2014 "),rV=a("a"),zNo=o("MBartForSequenceClassification"),WNo=o(" (mBART model)"),QNo=l(),zb=a("li"),_he=a("strong"),HNo=o("megatron-bert"),UNo=o(" \u2014 "),tV=a("a"),JNo=o("MegatronBertForSequenceClassification"),YNo=o(" (Megatron-BERT model)"),KNo=l(),Wb=a("li"),bhe=a("strong"),ZNo=o("mobilebert"),eqo=o(" \u2014 "),aV=a("a"),oqo=o("MobileBertForSequenceClassification"),rqo=o(" (MobileBERT model)"),tqo=l(),Qb=a("li"),vhe=a("strong"),aqo=o("mpnet"),nqo=o(" \u2014 "),nV=a("a"),sqo=o("MPNetForSequenceClassification"),lqo=o(" (MPNet model)"),iqo=l(),Hb=a("li"),Fhe=a("strong"),dqo=o("nystromformer"),cqo=o(" \u2014 "),sV=a("a"),fqo=o("NystromformerForSequenceClassification"),mqo=o(" (Nystr\xF6mformer model)"),gqo=l(),Ub=a("li"),The=a("strong"),hqo=o("openai-gpt"),pqo=o(" \u2014 "),lV=a("a"),uqo=o("OpenAIGPTForSequenceClassification"),_qo=o(" (OpenAI GPT model)"),bqo=l(),Jb=a("li"),Mhe=a("strong"),vqo=o("perceiver"),Fqo=o(" \u2014 "),iV=a("a"),Tqo=o("PerceiverForSequenceClassification"),Mqo=o(" (Perceiver model)"),Eqo=l(),Yb=a("li"),Ehe=a("strong"),Cqo=o("plbart"),wqo=o(" \u2014 "),dV=a("a"),Aqo=o("PLBartForSequenceClassification"),Lqo=o(" (PLBart model)"),yqo=l(),Kb=a("li"),Che=a("strong"),xqo=o("qdqbert"),$qo=o(" \u2014 "),cV=a("a"),kqo=o("QDQBertForSequenceClassification"),Sqo=o(" (QDQBert model)"),Rqo=l(),Zb=a("li"),whe=a("strong"),Pqo=o("reformer"),Bqo=o(" \u2014 "),fV=a("a"),Iqo=o("ReformerForSequenceClassification"),Nqo=o(" (Reformer model)"),qqo=l(),ev=a("li"),Ahe=a("strong"),jqo=o("rembert"),Dqo=o(" \u2014 "),mV=a("a"),Gqo=o("RemBertForSequenceClassification"),Oqo=o(" (RemBERT model)"),Vqo=l(),ov=a("li"),Lhe=a("strong"),Xqo=o("roberta"),zqo=o(" \u2014 "),gV=a("a"),Wqo=o("RobertaForSequenceClassification"),Qqo=o(" (RoBERTa model)"),Hqo=l(),rv=a("li"),yhe=a("strong"),Uqo=o("roformer"),Jqo=o(" \u2014 "),hV=a("a"),Yqo=o("RoFormerForSequenceClassification"),Kqo=o(" (RoFormer model)"),Zqo=l(),tv=a("li"),xhe=a("strong"),ejo=o("squeezebert"),ojo=o(" \u2014 "),pV=a("a"),rjo=o("SqueezeBertForSequenceClassification"),tjo=o(" (SqueezeBERT model)"),ajo=l(),av=a("li"),$he=a("strong"),njo=o("tapas"),sjo=o(" \u2014 "),uV=a("a"),ljo=o("TapasForSequenceClassification"),ijo=o(" (TAPAS model)"),djo=l(),nv=a("li"),khe=a("strong"),cjo=o("transfo-xl"),fjo=o(" \u2014 "),_V=a("a"),mjo=o("TransfoXLForSequenceClassification"),gjo=o(" (Transformer-XL model)"),hjo=l(),sv=a("li"),She=a("strong"),pjo=o("xlm"),ujo=o(" \u2014 "),bV=a("a"),_jo=o("XLMForSequenceClassification"),bjo=o(" (XLM model)"),vjo=l(),lv=a("li"),Rhe=a("strong"),Fjo=o("xlm-roberta"),Tjo=o(" \u2014 "),vV=a("a"),Mjo=o("XLMRobertaForSequenceClassification"),Ejo=o(" (XLM-RoBERTa model)"),Cjo=l(),iv=a("li"),Phe=a("strong"),wjo=o("xlm-roberta-xl"),Ajo=o(" \u2014 "),FV=a("a"),Ljo=o("XLMRobertaXLForSequenceClassification"),yjo=o(" (XLM-RoBERTa-XL model)"),xjo=l(),dv=a("li"),Bhe=a("strong"),$jo=o("xlnet"),kjo=o(" \u2014 "),TV=a("a"),Sjo=o("XLNetForSequenceClassification"),Rjo=o(" (XLNet model)"),Pjo=l(),cv=a("li"),Ihe=a("strong"),Bjo=o("yoso"),Ijo=o(" \u2014 "),MV=a("a"),Njo=o("YosoForSequenceClassification"),qjo=o(" (YOSO model)"),jjo=l(),fv=a("p"),Djo=o("The model is set in evaluation mode by default using "),Nhe=a("code"),Gjo=o("model.eval()"),Ojo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qhe=a("code"),Vjo=o("model.train()"),Xjo=l(),F(mv.$$.fragment),EGe=l(),Ki=a("h2"),gv=a("a"),jhe=a("span"),F(Ty.$$.fragment),zjo=l(),Dhe=a("span"),Wjo=o("AutoModelForMultipleChoice"),CGe=l(),Bo=a("div"),F(My.$$.fragment),Qjo=l(),Zi=a("p"),Hjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EV=a("a"),Ujo=o("from_pretrained()"),Jjo=o(" class method or the "),CV=a("a"),Yjo=o("from_config()"),Kjo=o(` class
method.`),Zjo=l(),Ey=a("p"),eDo=o("This class cannot be instantiated directly using "),Ghe=a("code"),oDo=o("__init__()"),rDo=o(" (throws an error)."),tDo=l(),ft=a("div"),F(Cy.$$.fragment),aDo=l(),Ohe=a("p"),nDo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sDo=l(),ed=a("p"),lDo=o(`Note:
Loading a model from its configuration file does `),Vhe=a("strong"),iDo=o("not"),dDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wV=a("a"),cDo=o("from_pretrained()"),fDo=o(" to load the model weights."),mDo=l(),F(hv.$$.fragment),gDo=l(),ro=a("div"),F(wy.$$.fragment),hDo=l(),Xhe=a("p"),pDo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uDo=l(),qa=a("p"),_Do=o("The model class to instantiate is selected based on the "),zhe=a("code"),bDo=o("model_type"),vDo=o(` property of the config object (either
passed as an argument or loaded from `),Whe=a("code"),FDo=o("pretrained_model_name_or_path"),TDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=a("code"),MDo=o("pretrained_model_name_or_path"),EDo=o(":"),CDo=l(),Z=a("ul"),pv=a("li"),Hhe=a("strong"),wDo=o("albert"),ADo=o(" \u2014 "),AV=a("a"),LDo=o("AlbertForMultipleChoice"),yDo=o(" (ALBERT model)"),xDo=l(),uv=a("li"),Uhe=a("strong"),$Do=o("bert"),kDo=o(" \u2014 "),LV=a("a"),SDo=o("BertForMultipleChoice"),RDo=o(" (BERT model)"),PDo=l(),_v=a("li"),Jhe=a("strong"),BDo=o("big_bird"),IDo=o(" \u2014 "),yV=a("a"),NDo=o("BigBirdForMultipleChoice"),qDo=o(" (BigBird model)"),jDo=l(),bv=a("li"),Yhe=a("strong"),DDo=o("camembert"),GDo=o(" \u2014 "),xV=a("a"),ODo=o("CamembertForMultipleChoice"),VDo=o(" (CamemBERT model)"),XDo=l(),vv=a("li"),Khe=a("strong"),zDo=o("canine"),WDo=o(" \u2014 "),$V=a("a"),QDo=o("CanineForMultipleChoice"),HDo=o(" (CANINE model)"),UDo=l(),Fv=a("li"),Zhe=a("strong"),JDo=o("convbert"),YDo=o(" \u2014 "),kV=a("a"),KDo=o("ConvBertForMultipleChoice"),ZDo=o(" (ConvBERT model)"),eGo=l(),Tv=a("li"),epe=a("strong"),oGo=o("data2vec-text"),rGo=o(" \u2014 "),SV=a("a"),tGo=o("Data2VecTextForMultipleChoice"),aGo=o(" (Data2VecText model)"),nGo=l(),Mv=a("li"),ope=a("strong"),sGo=o("deberta-v2"),lGo=o(" \u2014 "),RV=a("a"),iGo=o("DebertaV2ForMultipleChoice"),dGo=o(" (DeBERTa-v2 model)"),cGo=l(),Ev=a("li"),rpe=a("strong"),fGo=o("distilbert"),mGo=o(" \u2014 "),PV=a("a"),gGo=o("DistilBertForMultipleChoice"),hGo=o(" (DistilBERT model)"),pGo=l(),Cv=a("li"),tpe=a("strong"),uGo=o("electra"),_Go=o(" \u2014 "),BV=a("a"),bGo=o("ElectraForMultipleChoice"),vGo=o(" (ELECTRA model)"),FGo=l(),wv=a("li"),ape=a("strong"),TGo=o("flaubert"),MGo=o(" \u2014 "),IV=a("a"),EGo=o("FlaubertForMultipleChoice"),CGo=o(" (FlauBERT model)"),wGo=l(),Av=a("li"),npe=a("strong"),AGo=o("fnet"),LGo=o(" \u2014 "),NV=a("a"),yGo=o("FNetForMultipleChoice"),xGo=o(" (FNet model)"),$Go=l(),Lv=a("li"),spe=a("strong"),kGo=o("funnel"),SGo=o(" \u2014 "),qV=a("a"),RGo=o("FunnelForMultipleChoice"),PGo=o(" (Funnel Transformer model)"),BGo=l(),yv=a("li"),lpe=a("strong"),IGo=o("ibert"),NGo=o(" \u2014 "),jV=a("a"),qGo=o("IBertForMultipleChoice"),jGo=o(" (I-BERT model)"),DGo=l(),xv=a("li"),ipe=a("strong"),GGo=o("longformer"),OGo=o(" \u2014 "),DV=a("a"),VGo=o("LongformerForMultipleChoice"),XGo=o(" (Longformer model)"),zGo=l(),$v=a("li"),dpe=a("strong"),WGo=o("megatron-bert"),QGo=o(" \u2014 "),GV=a("a"),HGo=o("MegatronBertForMultipleChoice"),UGo=o(" (Megatron-BERT model)"),JGo=l(),kv=a("li"),cpe=a("strong"),YGo=o("mobilebert"),KGo=o(" \u2014 "),OV=a("a"),ZGo=o("MobileBertForMultipleChoice"),eOo=o(" (MobileBERT model)"),oOo=l(),Sv=a("li"),fpe=a("strong"),rOo=o("mpnet"),tOo=o(" \u2014 "),VV=a("a"),aOo=o("MPNetForMultipleChoice"),nOo=o(" (MPNet model)"),sOo=l(),Rv=a("li"),mpe=a("strong"),lOo=o("nystromformer"),iOo=o(" \u2014 "),XV=a("a"),dOo=o("NystromformerForMultipleChoice"),cOo=o(" (Nystr\xF6mformer model)"),fOo=l(),Pv=a("li"),gpe=a("strong"),mOo=o("qdqbert"),gOo=o(" \u2014 "),zV=a("a"),hOo=o("QDQBertForMultipleChoice"),pOo=o(" (QDQBert model)"),uOo=l(),Bv=a("li"),hpe=a("strong"),_Oo=o("rembert"),bOo=o(" \u2014 "),WV=a("a"),vOo=o("RemBertForMultipleChoice"),FOo=o(" (RemBERT model)"),TOo=l(),Iv=a("li"),ppe=a("strong"),MOo=o("roberta"),EOo=o(" \u2014 "),QV=a("a"),COo=o("RobertaForMultipleChoice"),wOo=o(" (RoBERTa model)"),AOo=l(),Nv=a("li"),upe=a("strong"),LOo=o("roformer"),yOo=o(" \u2014 "),HV=a("a"),xOo=o("RoFormerForMultipleChoice"),$Oo=o(" (RoFormer model)"),kOo=l(),qv=a("li"),_pe=a("strong"),SOo=o("squeezebert"),ROo=o(" \u2014 "),UV=a("a"),POo=o("SqueezeBertForMultipleChoice"),BOo=o(" (SqueezeBERT model)"),IOo=l(),jv=a("li"),bpe=a("strong"),NOo=o("xlm"),qOo=o(" \u2014 "),JV=a("a"),jOo=o("XLMForMultipleChoice"),DOo=o(" (XLM model)"),GOo=l(),Dv=a("li"),vpe=a("strong"),OOo=o("xlm-roberta"),VOo=o(" \u2014 "),YV=a("a"),XOo=o("XLMRobertaForMultipleChoice"),zOo=o(" (XLM-RoBERTa model)"),WOo=l(),Gv=a("li"),Fpe=a("strong"),QOo=o("xlm-roberta-xl"),HOo=o(" \u2014 "),KV=a("a"),UOo=o("XLMRobertaXLForMultipleChoice"),JOo=o(" (XLM-RoBERTa-XL model)"),YOo=l(),Ov=a("li"),Tpe=a("strong"),KOo=o("xlnet"),ZOo=o(" \u2014 "),ZV=a("a"),eVo=o("XLNetForMultipleChoice"),oVo=o(" (XLNet model)"),rVo=l(),Vv=a("li"),Mpe=a("strong"),tVo=o("yoso"),aVo=o(" \u2014 "),eX=a("a"),nVo=o("YosoForMultipleChoice"),sVo=o(" (YOSO model)"),lVo=l(),Xv=a("p"),iVo=o("The model is set in evaluation mode by default using "),Epe=a("code"),dVo=o("model.eval()"),cVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cpe=a("code"),fVo=o("model.train()"),mVo=l(),F(zv.$$.fragment),wGe=l(),od=a("h2"),Wv=a("a"),wpe=a("span"),F(Ay.$$.fragment),gVo=l(),Ape=a("span"),hVo=o("AutoModelForNextSentencePrediction"),AGe=l(),Io=a("div"),F(Ly.$$.fragment),pVo=l(),rd=a("p"),uVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oX=a("a"),_Vo=o("from_pretrained()"),bVo=o(" class method or the "),rX=a("a"),vVo=o("from_config()"),FVo=o(` class
method.`),TVo=l(),yy=a("p"),MVo=o("This class cannot be instantiated directly using "),Lpe=a("code"),EVo=o("__init__()"),CVo=o(" (throws an error)."),wVo=l(),mt=a("div"),F(xy.$$.fragment),AVo=l(),ype=a("p"),LVo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),yVo=l(),td=a("p"),xVo=o(`Note:
Loading a model from its configuration file does `),xpe=a("strong"),$Vo=o("not"),kVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=a("a"),SVo=o("from_pretrained()"),RVo=o(" to load the model weights."),PVo=l(),F(Qv.$$.fragment),BVo=l(),to=a("div"),F($y.$$.fragment),IVo=l(),$pe=a("p"),NVo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qVo=l(),ja=a("p"),jVo=o("The model class to instantiate is selected based on the "),kpe=a("code"),DVo=o("model_type"),GVo=o(` property of the config object (either
passed as an argument or loaded from `),Spe=a("code"),OVo=o("pretrained_model_name_or_path"),VVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=a("code"),XVo=o("pretrained_model_name_or_path"),zVo=o(":"),WVo=l(),Zr=a("ul"),Hv=a("li"),Ppe=a("strong"),QVo=o("bert"),HVo=o(" \u2014 "),aX=a("a"),UVo=o("BertForNextSentencePrediction"),JVo=o(" (BERT model)"),YVo=l(),Uv=a("li"),Bpe=a("strong"),KVo=o("fnet"),ZVo=o(" \u2014 "),nX=a("a"),eXo=o("FNetForNextSentencePrediction"),oXo=o(" (FNet model)"),rXo=l(),Jv=a("li"),Ipe=a("strong"),tXo=o("megatron-bert"),aXo=o(" \u2014 "),sX=a("a"),nXo=o("MegatronBertForNextSentencePrediction"),sXo=o(" (Megatron-BERT model)"),lXo=l(),Yv=a("li"),Npe=a("strong"),iXo=o("mobilebert"),dXo=o(" \u2014 "),lX=a("a"),cXo=o("MobileBertForNextSentencePrediction"),fXo=o(" (MobileBERT model)"),mXo=l(),Kv=a("li"),qpe=a("strong"),gXo=o("qdqbert"),hXo=o(" \u2014 "),iX=a("a"),pXo=o("QDQBertForNextSentencePrediction"),uXo=o(" (QDQBert model)"),_Xo=l(),Zv=a("p"),bXo=o("The model is set in evaluation mode by default using "),jpe=a("code"),vXo=o("model.eval()"),FXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=a("code"),TXo=o("model.train()"),MXo=l(),F(e3.$$.fragment),LGe=l(),ad=a("h2"),o3=a("a"),Gpe=a("span"),F(ky.$$.fragment),EXo=l(),Ope=a("span"),CXo=o("AutoModelForTokenClassification"),yGe=l(),No=a("div"),F(Sy.$$.fragment),wXo=l(),nd=a("p"),AXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dX=a("a"),LXo=o("from_pretrained()"),yXo=o(" class method or the "),cX=a("a"),xXo=o("from_config()"),$Xo=o(` class
method.`),kXo=l(),Ry=a("p"),SXo=o("This class cannot be instantiated directly using "),Vpe=a("code"),RXo=o("__init__()"),PXo=o(" (throws an error)."),BXo=l(),gt=a("div"),F(Py.$$.fragment),IXo=l(),Xpe=a("p"),NXo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qXo=l(),sd=a("p"),jXo=o(`Note:
Loading a model from its configuration file does `),zpe=a("strong"),DXo=o("not"),GXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=a("a"),OXo=o("from_pretrained()"),VXo=o(" to load the model weights."),XXo=l(),F(r3.$$.fragment),zXo=l(),ao=a("div"),F(By.$$.fragment),WXo=l(),Wpe=a("p"),QXo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),HXo=l(),Da=a("p"),UXo=o("The model class to instantiate is selected based on the "),Qpe=a("code"),JXo=o("model_type"),YXo=o(` property of the config object (either
passed as an argument or loaded from `),Hpe=a("code"),KXo=o("pretrained_model_name_or_path"),ZXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=a("code"),ezo=o("pretrained_model_name_or_path"),ozo=o(":"),rzo=l(),H=a("ul"),t3=a("li"),Jpe=a("strong"),tzo=o("albert"),azo=o(" \u2014 "),mX=a("a"),nzo=o("AlbertForTokenClassification"),szo=o(" (ALBERT model)"),lzo=l(),a3=a("li"),Ype=a("strong"),izo=o("bert"),dzo=o(" \u2014 "),gX=a("a"),czo=o("BertForTokenClassification"),fzo=o(" (BERT model)"),mzo=l(),n3=a("li"),Kpe=a("strong"),gzo=o("big_bird"),hzo=o(" \u2014 "),hX=a("a"),pzo=o("BigBirdForTokenClassification"),uzo=o(" (BigBird model)"),_zo=l(),s3=a("li"),Zpe=a("strong"),bzo=o("bloom"),vzo=o(" \u2014 "),pX=a("a"),Fzo=o("BloomForTokenClassification"),Tzo=o(" (BLOOM model)"),Mzo=l(),l3=a("li"),eue=a("strong"),Ezo=o("camembert"),Czo=o(" \u2014 "),uX=a("a"),wzo=o("CamembertForTokenClassification"),Azo=o(" (CamemBERT model)"),Lzo=l(),i3=a("li"),oue=a("strong"),yzo=o("canine"),xzo=o(" \u2014 "),_X=a("a"),$zo=o("CanineForTokenClassification"),kzo=o(" (CANINE model)"),Szo=l(),d3=a("li"),rue=a("strong"),Rzo=o("convbert"),Pzo=o(" \u2014 "),bX=a("a"),Bzo=o("ConvBertForTokenClassification"),Izo=o(" (ConvBERT model)"),Nzo=l(),c3=a("li"),tue=a("strong"),qzo=o("data2vec-text"),jzo=o(" \u2014 "),vX=a("a"),Dzo=o("Data2VecTextForTokenClassification"),Gzo=o(" (Data2VecText model)"),Ozo=l(),f3=a("li"),aue=a("strong"),Vzo=o("deberta"),Xzo=o(" \u2014 "),FX=a("a"),zzo=o("DebertaForTokenClassification"),Wzo=o(" (DeBERTa model)"),Qzo=l(),m3=a("li"),nue=a("strong"),Hzo=o("deberta-v2"),Uzo=o(" \u2014 "),TX=a("a"),Jzo=o("DebertaV2ForTokenClassification"),Yzo=o(" (DeBERTa-v2 model)"),Kzo=l(),g3=a("li"),sue=a("strong"),Zzo=o("distilbert"),eWo=o(" \u2014 "),MX=a("a"),oWo=o("DistilBertForTokenClassification"),rWo=o(" (DistilBERT model)"),tWo=l(),h3=a("li"),lue=a("strong"),aWo=o("electra"),nWo=o(" \u2014 "),EX=a("a"),sWo=o("ElectraForTokenClassification"),lWo=o(" (ELECTRA model)"),iWo=l(),p3=a("li"),iue=a("strong"),dWo=o("flaubert"),cWo=o(" \u2014 "),CX=a("a"),fWo=o("FlaubertForTokenClassification"),mWo=o(" (FlauBERT model)"),gWo=l(),u3=a("li"),due=a("strong"),hWo=o("fnet"),pWo=o(" \u2014 "),wX=a("a"),uWo=o("FNetForTokenClassification"),_Wo=o(" (FNet model)"),bWo=l(),_3=a("li"),cue=a("strong"),vWo=o("funnel"),FWo=o(" \u2014 "),AX=a("a"),TWo=o("FunnelForTokenClassification"),MWo=o(" (Funnel Transformer model)"),EWo=l(),b3=a("li"),fue=a("strong"),CWo=o("gpt2"),wWo=o(" \u2014 "),LX=a("a"),AWo=o("GPT2ForTokenClassification"),LWo=o(" (OpenAI GPT-2 model)"),yWo=l(),v3=a("li"),mue=a("strong"),xWo=o("ibert"),$Wo=o(" \u2014 "),yX=a("a"),kWo=o("IBertForTokenClassification"),SWo=o(" (I-BERT model)"),RWo=l(),F3=a("li"),gue=a("strong"),PWo=o("layoutlm"),BWo=o(" \u2014 "),xX=a("a"),IWo=o("LayoutLMForTokenClassification"),NWo=o(" (LayoutLM model)"),qWo=l(),T3=a("li"),hue=a("strong"),jWo=o("layoutlmv2"),DWo=o(" \u2014 "),$X=a("a"),GWo=o("LayoutLMv2ForTokenClassification"),OWo=o(" (LayoutLMv2 model)"),VWo=l(),M3=a("li"),pue=a("strong"),XWo=o("layoutlmv3"),zWo=o(" \u2014 "),kX=a("a"),WWo=o("LayoutLMv3ForTokenClassification"),QWo=o(" (LayoutLMv3 model)"),HWo=l(),E3=a("li"),uue=a("strong"),UWo=o("longformer"),JWo=o(" \u2014 "),SX=a("a"),YWo=o("LongformerForTokenClassification"),KWo=o(" (Longformer model)"),ZWo=l(),C3=a("li"),_ue=a("strong"),eQo=o("megatron-bert"),oQo=o(" \u2014 "),RX=a("a"),rQo=o("MegatronBertForTokenClassification"),tQo=o(" (Megatron-BERT model)"),aQo=l(),w3=a("li"),bue=a("strong"),nQo=o("mobilebert"),sQo=o(" \u2014 "),PX=a("a"),lQo=o("MobileBertForTokenClassification"),iQo=o(" (MobileBERT model)"),dQo=l(),A3=a("li"),vue=a("strong"),cQo=o("mpnet"),fQo=o(" \u2014 "),BX=a("a"),mQo=o("MPNetForTokenClassification"),gQo=o(" (MPNet model)"),hQo=l(),L3=a("li"),Fue=a("strong"),pQo=o("nystromformer"),uQo=o(" \u2014 "),IX=a("a"),_Qo=o("NystromformerForTokenClassification"),bQo=o(" (Nystr\xF6mformer model)"),vQo=l(),y3=a("li"),Tue=a("strong"),FQo=o("qdqbert"),TQo=o(" \u2014 "),NX=a("a"),MQo=o("QDQBertForTokenClassification"),EQo=o(" (QDQBert model)"),CQo=l(),x3=a("li"),Mue=a("strong"),wQo=o("rembert"),AQo=o(" \u2014 "),qX=a("a"),LQo=o("RemBertForTokenClassification"),yQo=o(" (RemBERT model)"),xQo=l(),$3=a("li"),Eue=a("strong"),$Qo=o("roberta"),kQo=o(" \u2014 "),jX=a("a"),SQo=o("RobertaForTokenClassification"),RQo=o(" (RoBERTa model)"),PQo=l(),k3=a("li"),Cue=a("strong"),BQo=o("roformer"),IQo=o(" \u2014 "),DX=a("a"),NQo=o("RoFormerForTokenClassification"),qQo=o(" (RoFormer model)"),jQo=l(),S3=a("li"),wue=a("strong"),DQo=o("squeezebert"),GQo=o(" \u2014 "),GX=a("a"),OQo=o("SqueezeBertForTokenClassification"),VQo=o(" (SqueezeBERT model)"),XQo=l(),R3=a("li"),Aue=a("strong"),zQo=o("xlm"),WQo=o(" \u2014 "),OX=a("a"),QQo=o("XLMForTokenClassification"),HQo=o(" (XLM model)"),UQo=l(),P3=a("li"),Lue=a("strong"),JQo=o("xlm-roberta"),YQo=o(" \u2014 "),VX=a("a"),KQo=o("XLMRobertaForTokenClassification"),ZQo=o(" (XLM-RoBERTa model)"),eHo=l(),B3=a("li"),yue=a("strong"),oHo=o("xlm-roberta-xl"),rHo=o(" \u2014 "),XX=a("a"),tHo=o("XLMRobertaXLForTokenClassification"),aHo=o(" (XLM-RoBERTa-XL model)"),nHo=l(),I3=a("li"),xue=a("strong"),sHo=o("xlnet"),lHo=o(" \u2014 "),zX=a("a"),iHo=o("XLNetForTokenClassification"),dHo=o(" (XLNet model)"),cHo=l(),N3=a("li"),$ue=a("strong"),fHo=o("yoso"),mHo=o(" \u2014 "),WX=a("a"),gHo=o("YosoForTokenClassification"),hHo=o(" (YOSO model)"),pHo=l(),q3=a("p"),uHo=o("The model is set in evaluation mode by default using "),kue=a("code"),_Ho=o("model.eval()"),bHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=a("code"),vHo=o("model.train()"),FHo=l(),F(j3.$$.fragment),xGe=l(),ld=a("h2"),D3=a("a"),Rue=a("span"),F(Iy.$$.fragment),THo=l(),Pue=a("span"),MHo=o("AutoModelForQuestionAnswering"),$Ge=l(),qo=a("div"),F(Ny.$$.fragment),EHo=l(),id=a("p"),CHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QX=a("a"),wHo=o("from_pretrained()"),AHo=o(" class method or the "),HX=a("a"),LHo=o("from_config()"),yHo=o(` class
method.`),xHo=l(),qy=a("p"),$Ho=o("This class cannot be instantiated directly using "),Bue=a("code"),kHo=o("__init__()"),SHo=o(" (throws an error)."),RHo=l(),ht=a("div"),F(jy.$$.fragment),PHo=l(),Iue=a("p"),BHo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),IHo=l(),dd=a("p"),NHo=o(`Note:
Loading a model from its configuration file does `),Nue=a("strong"),qHo=o("not"),jHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),DHo=o("from_pretrained()"),GHo=o(" to load the model weights."),OHo=l(),F(G3.$$.fragment),VHo=l(),no=a("div"),F(Dy.$$.fragment),XHo=l(),que=a("p"),zHo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WHo=l(),Ga=a("p"),QHo=o("The model class to instantiate is selected based on the "),jue=a("code"),HHo=o("model_type"),UHo=o(` property of the config object (either
passed as an argument or loaded from `),Due=a("code"),JHo=o("pretrained_model_name_or_path"),YHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=a("code"),KHo=o("pretrained_model_name_or_path"),ZHo=o(":"),eUo=l(),V=a("ul"),O3=a("li"),Oue=a("strong"),oUo=o("albert"),rUo=o(" \u2014 "),JX=a("a"),tUo=o("AlbertForQuestionAnswering"),aUo=o(" (ALBERT model)"),nUo=l(),V3=a("li"),Vue=a("strong"),sUo=o("bart"),lUo=o(" \u2014 "),YX=a("a"),iUo=o("BartForQuestionAnswering"),dUo=o(" (BART model)"),cUo=l(),X3=a("li"),Xue=a("strong"),fUo=o("bert"),mUo=o(" \u2014 "),KX=a("a"),gUo=o("BertForQuestionAnswering"),hUo=o(" (BERT model)"),pUo=l(),z3=a("li"),zue=a("strong"),uUo=o("big_bird"),_Uo=o(" \u2014 "),ZX=a("a"),bUo=o("BigBirdForQuestionAnswering"),vUo=o(" (BigBird model)"),FUo=l(),W3=a("li"),Wue=a("strong"),TUo=o("bigbird_pegasus"),MUo=o(" \u2014 "),ez=a("a"),EUo=o("BigBirdPegasusForQuestionAnswering"),CUo=o(" (BigBird-Pegasus model)"),wUo=l(),Q3=a("li"),Que=a("strong"),AUo=o("camembert"),LUo=o(" \u2014 "),oz=a("a"),yUo=o("CamembertForQuestionAnswering"),xUo=o(" (CamemBERT model)"),$Uo=l(),H3=a("li"),Hue=a("strong"),kUo=o("canine"),SUo=o(" \u2014 "),rz=a("a"),RUo=o("CanineForQuestionAnswering"),PUo=o(" (CANINE model)"),BUo=l(),U3=a("li"),Uue=a("strong"),IUo=o("convbert"),NUo=o(" \u2014 "),tz=a("a"),qUo=o("ConvBertForQuestionAnswering"),jUo=o(" (ConvBERT model)"),DUo=l(),J3=a("li"),Jue=a("strong"),GUo=o("data2vec-text"),OUo=o(" \u2014 "),az=a("a"),VUo=o("Data2VecTextForQuestionAnswering"),XUo=o(" (Data2VecText model)"),zUo=l(),Y3=a("li"),Yue=a("strong"),WUo=o("deberta"),QUo=o(" \u2014 "),nz=a("a"),HUo=o("DebertaForQuestionAnswering"),UUo=o(" (DeBERTa model)"),JUo=l(),K3=a("li"),Kue=a("strong"),YUo=o("deberta-v2"),KUo=o(" \u2014 "),sz=a("a"),ZUo=o("DebertaV2ForQuestionAnswering"),eJo=o(" (DeBERTa-v2 model)"),oJo=l(),Z3=a("li"),Zue=a("strong"),rJo=o("distilbert"),tJo=o(" \u2014 "),lz=a("a"),aJo=o("DistilBertForQuestionAnswering"),nJo=o(" (DistilBERT model)"),sJo=l(),e0=a("li"),e_e=a("strong"),lJo=o("electra"),iJo=o(" \u2014 "),iz=a("a"),dJo=o("ElectraForQuestionAnswering"),cJo=o(" (ELECTRA model)"),fJo=l(),o0=a("li"),o_e=a("strong"),mJo=o("flaubert"),gJo=o(" \u2014 "),dz=a("a"),hJo=o("FlaubertForQuestionAnsweringSimple"),pJo=o(" (FlauBERT model)"),uJo=l(),r0=a("li"),r_e=a("strong"),_Jo=o("fnet"),bJo=o(" \u2014 "),cz=a("a"),vJo=o("FNetForQuestionAnswering"),FJo=o(" (FNet model)"),TJo=l(),t0=a("li"),t_e=a("strong"),MJo=o("funnel"),EJo=o(" \u2014 "),fz=a("a"),CJo=o("FunnelForQuestionAnswering"),wJo=o(" (Funnel Transformer model)"),AJo=l(),a0=a("li"),a_e=a("strong"),LJo=o("gptj"),yJo=o(" \u2014 "),mz=a("a"),xJo=o("GPTJForQuestionAnswering"),$Jo=o(" (GPT-J model)"),kJo=l(),n0=a("li"),n_e=a("strong"),SJo=o("ibert"),RJo=o(" \u2014 "),gz=a("a"),PJo=o("IBertForQuestionAnswering"),BJo=o(" (I-BERT model)"),IJo=l(),s0=a("li"),s_e=a("strong"),NJo=o("layoutlmv2"),qJo=o(" \u2014 "),hz=a("a"),jJo=o("LayoutLMv2ForQuestionAnswering"),DJo=o(" (LayoutLMv2 model)"),GJo=l(),l0=a("li"),l_e=a("strong"),OJo=o("layoutlmv3"),VJo=o(" \u2014 "),pz=a("a"),XJo=o("LayoutLMv3ForQuestionAnswering"),zJo=o(" (LayoutLMv3 model)"),WJo=l(),i0=a("li"),i_e=a("strong"),QJo=o("led"),HJo=o(" \u2014 "),uz=a("a"),UJo=o("LEDForQuestionAnswering"),JJo=o(" (LED model)"),YJo=l(),d0=a("li"),d_e=a("strong"),KJo=o("longformer"),ZJo=o(" \u2014 "),_z=a("a"),eYo=o("LongformerForQuestionAnswering"),oYo=o(" (Longformer model)"),rYo=l(),c0=a("li"),c_e=a("strong"),tYo=o("lxmert"),aYo=o(" \u2014 "),bz=a("a"),nYo=o("LxmertForQuestionAnswering"),sYo=o(" (LXMERT model)"),lYo=l(),f0=a("li"),f_e=a("strong"),iYo=o("mbart"),dYo=o(" \u2014 "),vz=a("a"),cYo=o("MBartForQuestionAnswering"),fYo=o(" (mBART model)"),mYo=l(),m0=a("li"),m_e=a("strong"),gYo=o("megatron-bert"),hYo=o(" \u2014 "),Fz=a("a"),pYo=o("MegatronBertForQuestionAnswering"),uYo=o(" (Megatron-BERT model)"),_Yo=l(),g0=a("li"),g_e=a("strong"),bYo=o("mobilebert"),vYo=o(" \u2014 "),Tz=a("a"),FYo=o("MobileBertForQuestionAnswering"),TYo=o(" (MobileBERT model)"),MYo=l(),h0=a("li"),h_e=a("strong"),EYo=o("mpnet"),CYo=o(" \u2014 "),Mz=a("a"),wYo=o("MPNetForQuestionAnswering"),AYo=o(" (MPNet model)"),LYo=l(),p0=a("li"),p_e=a("strong"),yYo=o("nystromformer"),xYo=o(" \u2014 "),Ez=a("a"),$Yo=o("NystromformerForQuestionAnswering"),kYo=o(" (Nystr\xF6mformer model)"),SYo=l(),u0=a("li"),u_e=a("strong"),RYo=o("qdqbert"),PYo=o(" \u2014 "),Cz=a("a"),BYo=o("QDQBertForQuestionAnswering"),IYo=o(" (QDQBert model)"),NYo=l(),_0=a("li"),__e=a("strong"),qYo=o("reformer"),jYo=o(" \u2014 "),wz=a("a"),DYo=o("ReformerForQuestionAnswering"),GYo=o(" (Reformer model)"),OYo=l(),b0=a("li"),b_e=a("strong"),VYo=o("rembert"),XYo=o(" \u2014 "),Az=a("a"),zYo=o("RemBertForQuestionAnswering"),WYo=o(" (RemBERT model)"),QYo=l(),v0=a("li"),v_e=a("strong"),HYo=o("roberta"),UYo=o(" \u2014 "),Lz=a("a"),JYo=o("RobertaForQuestionAnswering"),YYo=o(" (RoBERTa model)"),KYo=l(),F0=a("li"),F_e=a("strong"),ZYo=o("roformer"),eKo=o(" \u2014 "),yz=a("a"),oKo=o("RoFormerForQuestionAnswering"),rKo=o(" (RoFormer model)"),tKo=l(),T0=a("li"),T_e=a("strong"),aKo=o("splinter"),nKo=o(" \u2014 "),xz=a("a"),sKo=o("SplinterForQuestionAnswering"),lKo=o(" (Splinter model)"),iKo=l(),M0=a("li"),M_e=a("strong"),dKo=o("squeezebert"),cKo=o(" \u2014 "),$z=a("a"),fKo=o("SqueezeBertForQuestionAnswering"),mKo=o(" (SqueezeBERT model)"),gKo=l(),E0=a("li"),E_e=a("strong"),hKo=o("xlm"),pKo=o(" \u2014 "),kz=a("a"),uKo=o("XLMForQuestionAnsweringSimple"),_Ko=o(" (XLM model)"),bKo=l(),C0=a("li"),C_e=a("strong"),vKo=o("xlm-roberta"),FKo=o(" \u2014 "),Sz=a("a"),TKo=o("XLMRobertaForQuestionAnswering"),MKo=o(" (XLM-RoBERTa model)"),EKo=l(),w0=a("li"),w_e=a("strong"),CKo=o("xlm-roberta-xl"),wKo=o(" \u2014 "),Rz=a("a"),AKo=o("XLMRobertaXLForQuestionAnswering"),LKo=o(" (XLM-RoBERTa-XL model)"),yKo=l(),A0=a("li"),A_e=a("strong"),xKo=o("xlnet"),$Ko=o(" \u2014 "),Pz=a("a"),kKo=o("XLNetForQuestionAnsweringSimple"),SKo=o(" (XLNet model)"),RKo=l(),L0=a("li"),L_e=a("strong"),PKo=o("yoso"),BKo=o(" \u2014 "),Bz=a("a"),IKo=o("YosoForQuestionAnswering"),NKo=o(" (YOSO model)"),qKo=l(),y0=a("p"),jKo=o("The model is set in evaluation mode by default using "),y_e=a("code"),DKo=o("model.eval()"),GKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x_e=a("code"),OKo=o("model.train()"),VKo=l(),F(x0.$$.fragment),kGe=l(),cd=a("h2"),$0=a("a"),$_e=a("span"),F(Gy.$$.fragment),XKo=l(),k_e=a("span"),zKo=o("AutoModelForTableQuestionAnswering"),SGe=l(),jo=a("div"),F(Oy.$$.fragment),WKo=l(),fd=a("p"),QKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Iz=a("a"),HKo=o("from_pretrained()"),UKo=o(" class method or the "),Nz=a("a"),JKo=o("from_config()"),YKo=o(` class
method.`),KKo=l(),Vy=a("p"),ZKo=o("This class cannot be instantiated directly using "),S_e=a("code"),eZo=o("__init__()"),oZo=o(" (throws an error)."),rZo=l(),pt=a("div"),F(Xy.$$.fragment),tZo=l(),R_e=a("p"),aZo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),nZo=l(),md=a("p"),sZo=o(`Note:
Loading a model from its configuration file does `),P_e=a("strong"),lZo=o("not"),iZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=a("a"),dZo=o("from_pretrained()"),cZo=o(" to load the model weights."),fZo=l(),F(k0.$$.fragment),mZo=l(),so=a("div"),F(zy.$$.fragment),gZo=l(),B_e=a("p"),hZo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),pZo=l(),Oa=a("p"),uZo=o("The model class to instantiate is selected based on the "),I_e=a("code"),_Zo=o("model_type"),bZo=o(` property of the config object (either
passed as an argument or loaded from `),N_e=a("code"),vZo=o("pretrained_model_name_or_path"),FZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=a("code"),TZo=o("pretrained_model_name_or_path"),MZo=o(":"),EZo=l(),j_e=a("ul"),S0=a("li"),D_e=a("strong"),CZo=o("tapas"),wZo=o(" \u2014 "),jz=a("a"),AZo=o("TapasForQuestionAnswering"),LZo=o(" (TAPAS model)"),yZo=l(),R0=a("p"),xZo=o("The model is set in evaluation mode by default using "),G_e=a("code"),$Zo=o("model.eval()"),kZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=a("code"),SZo=o("model.train()"),RZo=l(),F(P0.$$.fragment),RGe=l(),gd=a("h2"),B0=a("a"),V_e=a("span"),F(Wy.$$.fragment),PZo=l(),X_e=a("span"),BZo=o("AutoModelForImageClassification"),PGe=l(),Do=a("div"),F(Qy.$$.fragment),IZo=l(),hd=a("p"),NZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Dz=a("a"),qZo=o("from_pretrained()"),jZo=o(" class method or the "),Gz=a("a"),DZo=o("from_config()"),GZo=o(` class
method.`),OZo=l(),Hy=a("p"),VZo=o("This class cannot be instantiated directly using "),z_e=a("code"),XZo=o("__init__()"),zZo=o(" (throws an error)."),WZo=l(),ut=a("div"),F(Uy.$$.fragment),QZo=l(),W_e=a("p"),HZo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UZo=l(),pd=a("p"),JZo=o(`Note:
Loading a model from its configuration file does `),Q_e=a("strong"),YZo=o("not"),KZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=a("a"),ZZo=o("from_pretrained()"),eer=o(" to load the model weights."),oer=l(),F(I0.$$.fragment),rer=l(),lo=a("div"),F(Jy.$$.fragment),ter=l(),H_e=a("p"),aer=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ner=l(),Va=a("p"),ser=o("The model class to instantiate is selected based on the "),U_e=a("code"),ler=o("model_type"),ier=o(` property of the config object (either
passed as an argument or loaded from `),J_e=a("code"),der=o("pretrained_model_name_or_path"),cer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=a("code"),fer=o("pretrained_model_name_or_path"),mer=o(":"),ger=l(),Fe=a("ul"),N0=a("li"),K_e=a("strong"),her=o("beit"),per=o(" \u2014 "),Vz=a("a"),uer=o("BeitForImageClassification"),_er=o(" (BEiT model)"),ber=l(),q0=a("li"),Z_e=a("strong"),ver=o("convnext"),Fer=o(" \u2014 "),Xz=a("a"),Ter=o("ConvNextForImageClassification"),Mer=o(" (ConvNeXT model)"),Eer=l(),j0=a("li"),e1e=a("strong"),Cer=o("cvt"),wer=o(" \u2014 "),zz=a("a"),Aer=o("CvtForImageClassification"),Ler=o(" (CvT model)"),yer=l(),D0=a("li"),o1e=a("strong"),xer=o("data2vec-vision"),$er=o(" \u2014 "),Wz=a("a"),ker=o("Data2VecVisionForImageClassification"),Ser=o(" (Data2VecVision model)"),Rer=l(),Os=a("li"),r1e=a("strong"),Per=o("deit"),Ber=o(" \u2014 "),Qz=a("a"),Ier=o("DeiTForImageClassification"),Ner=o(" or "),Hz=a("a"),qer=o("DeiTForImageClassificationWithTeacher"),jer=o(" (DeiT model)"),Der=l(),G0=a("li"),t1e=a("strong"),Ger=o("imagegpt"),Oer=o(" \u2014 "),Uz=a("a"),Ver=o("ImageGPTForImageClassification"),Xer=o(" (ImageGPT model)"),zer=l(),Vs=a("li"),a1e=a("strong"),Wer=o("levit"),Qer=o(" \u2014 "),Jz=a("a"),Her=o("LevitForImageClassification"),Uer=o(" or "),Yz=a("a"),Jer=o("LevitForImageClassificationWithTeacher"),Yer=o(" (LeViT model)"),Ker=l(),_t=a("li"),n1e=a("strong"),Zer=o("perceiver"),eor=o(" \u2014 "),Kz=a("a"),oor=o("PerceiverForImageClassificationLearned"),ror=o(" or "),Zz=a("a"),tor=o("PerceiverForImageClassificationFourier"),aor=o(" or "),eW=a("a"),nor=o("PerceiverForImageClassificationConvProcessing"),sor=o(" (Perceiver model)"),lor=l(),O0=a("li"),s1e=a("strong"),ior=o("poolformer"),dor=o(" \u2014 "),oW=a("a"),cor=o("PoolFormerForImageClassification"),mor=o(" (PoolFormer model)"),gor=l(),V0=a("li"),l1e=a("strong"),hor=o("regnet"),por=o(" \u2014 "),rW=a("a"),uor=o("RegNetForImageClassification"),_or=o(" (RegNet model)"),bor=l(),X0=a("li"),i1e=a("strong"),vor=o("resnet"),For=o(" \u2014 "),tW=a("a"),Tor=o("ResNetForImageClassification"),Mor=o(" (ResNet model)"),Eor=l(),z0=a("li"),d1e=a("strong"),Cor=o("segformer"),wor=o(" \u2014 "),aW=a("a"),Aor=o("SegformerForImageClassification"),Lor=o(" (SegFormer model)"),yor=l(),W0=a("li"),c1e=a("strong"),xor=o("swin"),$or=o(" \u2014 "),nW=a("a"),kor=o("SwinForImageClassification"),Sor=o(" (Swin Transformer model)"),Ror=l(),Q0=a("li"),f1e=a("strong"),Por=o("van"),Bor=o(" \u2014 "),sW=a("a"),Ior=o("VanForImageClassification"),Nor=o(" (VAN model)"),qor=l(),H0=a("li"),m1e=a("strong"),jor=o("vit"),Dor=o(" \u2014 "),lW=a("a"),Gor=o("ViTForImageClassification"),Oor=o(" (ViT model)"),Vor=l(),U0=a("p"),Xor=o("The model is set in evaluation mode by default using "),g1e=a("code"),zor=o("model.eval()"),Wor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h1e=a("code"),Qor=o("model.train()"),Hor=l(),F(J0.$$.fragment),BGe=l(),ud=a("h2"),Y0=a("a"),p1e=a("span"),F(Yy.$$.fragment),Uor=l(),u1e=a("span"),Jor=o("AutoModelForVision2Seq"),IGe=l(),Go=a("div"),F(Ky.$$.fragment),Yor=l(),_d=a("p"),Kor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iW=a("a"),Zor=o("from_pretrained()"),err=o(" class method or the "),dW=a("a"),orr=o("from_config()"),rrr=o(` class
method.`),trr=l(),Zy=a("p"),arr=o("This class cannot be instantiated directly using "),_1e=a("code"),nrr=o("__init__()"),srr=o(" (throws an error)."),lrr=l(),bt=a("div"),F(e8.$$.fragment),irr=l(),b1e=a("p"),drr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),crr=l(),bd=a("p"),frr=o(`Note:
Loading a model from its configuration file does `),v1e=a("strong"),mrr=o("not"),grr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=a("a"),hrr=o("from_pretrained()"),prr=o(" to load the model weights."),urr=l(),F(K0.$$.fragment),_rr=l(),io=a("div"),F(o8.$$.fragment),brr=l(),F1e=a("p"),vrr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Frr=l(),Xa=a("p"),Trr=o("The model class to instantiate is selected based on the "),T1e=a("code"),Mrr=o("model_type"),Err=o(` property of the config object (either
passed as an argument or loaded from `),M1e=a("code"),Crr=o("pretrained_model_name_or_path"),wrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=a("code"),Arr=o("pretrained_model_name_or_path"),Lrr=o(":"),yrr=l(),C1e=a("ul"),Z0=a("li"),w1e=a("strong"),xrr=o("vision-encoder-decoder"),$rr=o(" \u2014 "),fW=a("a"),krr=o("VisionEncoderDecoderModel"),Srr=o(" (Vision Encoder decoder model)"),Rrr=l(),eF=a("p"),Prr=o("The model is set in evaluation mode by default using "),A1e=a("code"),Brr=o("model.eval()"),Irr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L1e=a("code"),Nrr=o("model.train()"),qrr=l(),F(oF.$$.fragment),NGe=l(),vd=a("h2"),rF=a("a"),y1e=a("span"),F(r8.$$.fragment),jrr=l(),x1e=a("span"),Drr=o("AutoModelForVisualQuestionAnswering"),qGe=l(),Oo=a("div"),F(t8.$$.fragment),Grr=l(),Fd=a("p"),Orr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),mW=a("a"),Vrr=o("from_pretrained()"),Xrr=o(" class method or the "),gW=a("a"),zrr=o("from_config()"),Wrr=o(` class
method.`),Qrr=l(),a8=a("p"),Hrr=o("This class cannot be instantiated directly using "),$1e=a("code"),Urr=o("__init__()"),Jrr=o(" (throws an error)."),Yrr=l(),vt=a("div"),F(n8.$$.fragment),Krr=l(),k1e=a("p"),Zrr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),etr=l(),Td=a("p"),otr=o(`Note:
Loading a model from its configuration file does `),S1e=a("strong"),rtr=o("not"),ttr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=a("a"),atr=o("from_pretrained()"),ntr=o(" to load the model weights."),str=l(),F(tF.$$.fragment),ltr=l(),co=a("div"),F(s8.$$.fragment),itr=l(),R1e=a("p"),dtr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),ctr=l(),za=a("p"),ftr=o("The model class to instantiate is selected based on the "),P1e=a("code"),mtr=o("model_type"),gtr=o(` property of the config object (either
passed as an argument or loaded from `),B1e=a("code"),htr=o("pretrained_model_name_or_path"),ptr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=a("code"),utr=o("pretrained_model_name_or_path"),_tr=o(":"),btr=l(),N1e=a("ul"),aF=a("li"),q1e=a("strong"),vtr=o("vilt"),Ftr=o(" \u2014 "),pW=a("a"),Ttr=o("ViltForQuestionAnswering"),Mtr=o(" (ViLT model)"),Etr=l(),nF=a("p"),Ctr=o("The model is set in evaluation mode by default using "),j1e=a("code"),wtr=o("model.eval()"),Atr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D1e=a("code"),Ltr=o("model.train()"),ytr=l(),F(sF.$$.fragment),jGe=l(),Md=a("h2"),lF=a("a"),G1e=a("span"),F(l8.$$.fragment),xtr=l(),O1e=a("span"),$tr=o("AutoModelForAudioClassification"),DGe=l(),Vo=a("div"),F(i8.$$.fragment),ktr=l(),Ed=a("p"),Str=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),uW=a("a"),Rtr=o("from_pretrained()"),Ptr=o(" class method or the "),_W=a("a"),Btr=o("from_config()"),Itr=o(` class
method.`),Ntr=l(),d8=a("p"),qtr=o("This class cannot be instantiated directly using "),V1e=a("code"),jtr=o("__init__()"),Dtr=o(" (throws an error)."),Gtr=l(),Ft=a("div"),F(c8.$$.fragment),Otr=l(),X1e=a("p"),Vtr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Xtr=l(),Cd=a("p"),ztr=o(`Note:
Loading a model from its configuration file does `),z1e=a("strong"),Wtr=o("not"),Qtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=a("a"),Htr=o("from_pretrained()"),Utr=o(" to load the model weights."),Jtr=l(),F(iF.$$.fragment),Ytr=l(),fo=a("div"),F(f8.$$.fragment),Ktr=l(),W1e=a("p"),Ztr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ear=l(),Wa=a("p"),oar=o("The model class to instantiate is selected based on the "),Q1e=a("code"),rar=o("model_type"),tar=o(` property of the config object (either
passed as an argument or loaded from `),H1e=a("code"),aar=o("pretrained_model_name_or_path"),nar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=a("code"),sar=o("pretrained_model_name_or_path"),lar=o(":"),iar=l(),Pe=a("ul"),dF=a("li"),J1e=a("strong"),dar=o("data2vec-audio"),car=o(" \u2014 "),vW=a("a"),far=o("Data2VecAudioForSequenceClassification"),mar=o(" (Data2VecAudio model)"),gar=l(),cF=a("li"),Y1e=a("strong"),har=o("hubert"),par=o(" \u2014 "),FW=a("a"),uar=o("HubertForSequenceClassification"),_ar=o(" (Hubert model)"),bar=l(),fF=a("li"),K1e=a("strong"),Far=o("sew"),Tar=o(" \u2014 "),TW=a("a"),Mar=o("SEWForSequenceClassification"),Ear=o(" (SEW model)"),Car=l(),mF=a("li"),Z1e=a("strong"),war=o("sew-d"),Aar=o(" \u2014 "),MW=a("a"),Lar=o("SEWDForSequenceClassification"),yar=o(" (SEW-D model)"),xar=l(),gF=a("li"),e2e=a("strong"),$ar=o("unispeech"),kar=o(" \u2014 "),EW=a("a"),Sar=o("UniSpeechForSequenceClassification"),Rar=o(" (UniSpeech model)"),Par=l(),hF=a("li"),o2e=a("strong"),Bar=o("unispeech-sat"),Iar=o(" \u2014 "),CW=a("a"),Nar=o("UniSpeechSatForSequenceClassification"),qar=o(" (UniSpeechSat model)"),jar=l(),pF=a("li"),r2e=a("strong"),Dar=o("wav2vec2"),Gar=o(" \u2014 "),wW=a("a"),Oar=o("Wav2Vec2ForSequenceClassification"),Var=o(" (Wav2Vec2 model)"),Xar=l(),uF=a("li"),t2e=a("strong"),zar=o("wav2vec2-conformer"),War=o(" \u2014 "),AW=a("a"),Qar=o("Wav2Vec2ConformerForSequenceClassification"),Har=o(" (Wav2Vec2-Conformer model)"),Uar=l(),_F=a("li"),a2e=a("strong"),Jar=o("wavlm"),Yar=o(" \u2014 "),LW=a("a"),Kar=o("WavLMForSequenceClassification"),Zar=o(" (WavLM model)"),enr=l(),bF=a("p"),onr=o("The model is set in evaluation mode by default using "),n2e=a("code"),rnr=o("model.eval()"),tnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s2e=a("code"),anr=o("model.train()"),nnr=l(),F(vF.$$.fragment),GGe=l(),wd=a("h2"),FF=a("a"),l2e=a("span"),F(m8.$$.fragment),snr=l(),i2e=a("span"),lnr=o("AutoModelForAudioFrameClassification"),OGe=l(),Xo=a("div"),F(g8.$$.fragment),inr=l(),Ad=a("p"),dnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),yW=a("a"),cnr=o("from_pretrained()"),fnr=o(" class method or the "),xW=a("a"),mnr=o("from_config()"),gnr=o(` class
method.`),hnr=l(),h8=a("p"),pnr=o("This class cannot be instantiated directly using "),d2e=a("code"),unr=o("__init__()"),_nr=o(" (throws an error)."),bnr=l(),Tt=a("div"),F(p8.$$.fragment),vnr=l(),c2e=a("p"),Fnr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Tnr=l(),Ld=a("p"),Mnr=o(`Note:
Loading a model from its configuration file does `),f2e=a("strong"),Enr=o("not"),Cnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=a("a"),wnr=o("from_pretrained()"),Anr=o(" to load the model weights."),Lnr=l(),F(TF.$$.fragment),ynr=l(),mo=a("div"),F(u8.$$.fragment),xnr=l(),m2e=a("p"),$nr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),knr=l(),Qa=a("p"),Snr=o("The model class to instantiate is selected based on the "),g2e=a("code"),Rnr=o("model_type"),Pnr=o(` property of the config object (either
passed as an argument or loaded from `),h2e=a("code"),Bnr=o("pretrained_model_name_or_path"),Inr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p2e=a("code"),Nnr=o("pretrained_model_name_or_path"),qnr=o(":"),jnr=l(),et=a("ul"),MF=a("li"),u2e=a("strong"),Dnr=o("data2vec-audio"),Gnr=o(" \u2014 "),kW=a("a"),Onr=o("Data2VecAudioForAudioFrameClassification"),Vnr=o(" (Data2VecAudio model)"),Xnr=l(),EF=a("li"),_2e=a("strong"),znr=o("unispeech-sat"),Wnr=o(" \u2014 "),SW=a("a"),Qnr=o("UniSpeechSatForAudioFrameClassification"),Hnr=o(" (UniSpeechSat model)"),Unr=l(),CF=a("li"),b2e=a("strong"),Jnr=o("wav2vec2"),Ynr=o(" \u2014 "),RW=a("a"),Knr=o("Wav2Vec2ForAudioFrameClassification"),Znr=o(" (Wav2Vec2 model)"),esr=l(),wF=a("li"),v2e=a("strong"),osr=o("wav2vec2-conformer"),rsr=o(" \u2014 "),PW=a("a"),tsr=o("Wav2Vec2ConformerForAudioFrameClassification"),asr=o(" (Wav2Vec2-Conformer model)"),nsr=l(),AF=a("li"),F2e=a("strong"),ssr=o("wavlm"),lsr=o(" \u2014 "),BW=a("a"),isr=o("WavLMForAudioFrameClassification"),dsr=o(" (WavLM model)"),csr=l(),LF=a("p"),fsr=o("The model is set in evaluation mode by default using "),T2e=a("code"),msr=o("model.eval()"),gsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M2e=a("code"),hsr=o("model.train()"),psr=l(),F(yF.$$.fragment),VGe=l(),yd=a("h2"),xF=a("a"),E2e=a("span"),F(_8.$$.fragment),usr=l(),C2e=a("span"),_sr=o("AutoModelForCTC"),XGe=l(),zo=a("div"),F(b8.$$.fragment),bsr=l(),xd=a("p"),vsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),IW=a("a"),Fsr=o("from_pretrained()"),Tsr=o(" class method or the "),NW=a("a"),Msr=o("from_config()"),Esr=o(` class
method.`),Csr=l(),v8=a("p"),wsr=o("This class cannot be instantiated directly using "),w2e=a("code"),Asr=o("__init__()"),Lsr=o(" (throws an error)."),ysr=l(),Mt=a("div"),F(F8.$$.fragment),xsr=l(),A2e=a("p"),$sr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ksr=l(),$d=a("p"),Ssr=o(`Note:
Loading a model from its configuration file does `),L2e=a("strong"),Rsr=o("not"),Psr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=a("a"),Bsr=o("from_pretrained()"),Isr=o(" to load the model weights."),Nsr=l(),F($F.$$.fragment),qsr=l(),go=a("div"),F(T8.$$.fragment),jsr=l(),y2e=a("p"),Dsr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Gsr=l(),Ha=a("p"),Osr=o("The model class to instantiate is selected based on the "),x2e=a("code"),Vsr=o("model_type"),Xsr=o(` property of the config object (either
passed as an argument or loaded from `),$2e=a("code"),zsr=o("pretrained_model_name_or_path"),Wsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k2e=a("code"),Qsr=o("pretrained_model_name_or_path"),Hsr=o(":"),Usr=l(),Le=a("ul"),kF=a("li"),S2e=a("strong"),Jsr=o("data2vec-audio"),Ysr=o(" \u2014 "),jW=a("a"),Ksr=o("Data2VecAudioForCTC"),Zsr=o(" (Data2VecAudio model)"),elr=l(),SF=a("li"),R2e=a("strong"),olr=o("hubert"),rlr=o(" \u2014 "),DW=a("a"),tlr=o("HubertForCTC"),alr=o(" (Hubert model)"),nlr=l(),RF=a("li"),P2e=a("strong"),slr=o("mctct"),llr=o(" \u2014 "),GW=a("a"),ilr=o("MCTCTForCTC"),dlr=o(" (M-CTC-T model)"),clr=l(),PF=a("li"),B2e=a("strong"),flr=o("sew"),mlr=o(" \u2014 "),OW=a("a"),glr=o("SEWForCTC"),hlr=o(" (SEW model)"),plr=l(),BF=a("li"),I2e=a("strong"),ulr=o("sew-d"),_lr=o(" \u2014 "),VW=a("a"),blr=o("SEWDForCTC"),vlr=o(" (SEW-D model)"),Flr=l(),IF=a("li"),N2e=a("strong"),Tlr=o("unispeech"),Mlr=o(" \u2014 "),XW=a("a"),Elr=o("UniSpeechForCTC"),Clr=o(" (UniSpeech model)"),wlr=l(),NF=a("li"),q2e=a("strong"),Alr=o("unispeech-sat"),Llr=o(" \u2014 "),zW=a("a"),ylr=o("UniSpeechSatForCTC"),xlr=o(" (UniSpeechSat model)"),$lr=l(),qF=a("li"),j2e=a("strong"),klr=o("wav2vec2"),Slr=o(" \u2014 "),WW=a("a"),Rlr=o("Wav2Vec2ForCTC"),Plr=o(" (Wav2Vec2 model)"),Blr=l(),jF=a("li"),D2e=a("strong"),Ilr=o("wav2vec2-conformer"),Nlr=o(" \u2014 "),QW=a("a"),qlr=o("Wav2Vec2ConformerForCTC"),jlr=o(" (Wav2Vec2-Conformer model)"),Dlr=l(),DF=a("li"),G2e=a("strong"),Glr=o("wavlm"),Olr=o(" \u2014 "),HW=a("a"),Vlr=o("WavLMForCTC"),Xlr=o(" (WavLM model)"),zlr=l(),GF=a("p"),Wlr=o("The model is set in evaluation mode by default using "),O2e=a("code"),Qlr=o("model.eval()"),Hlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V2e=a("code"),Ulr=o("model.train()"),Jlr=l(),F(OF.$$.fragment),zGe=l(),kd=a("h2"),VF=a("a"),X2e=a("span"),F(M8.$$.fragment),Ylr=l(),z2e=a("span"),Klr=o("AutoModelForSpeechSeq2Seq"),WGe=l(),Wo=a("div"),F(E8.$$.fragment),Zlr=l(),Sd=a("p"),eir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UW=a("a"),oir=o("from_pretrained()"),rir=o(" class method or the "),JW=a("a"),tir=o("from_config()"),air=o(` class
method.`),nir=l(),C8=a("p"),sir=o("This class cannot be instantiated directly using "),W2e=a("code"),lir=o("__init__()"),iir=o(" (throws an error)."),dir=l(),Et=a("div"),F(w8.$$.fragment),cir=l(),Q2e=a("p"),fir=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mir=l(),Rd=a("p"),gir=o(`Note:
Loading a model from its configuration file does `),H2e=a("strong"),hir=o("not"),pir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=a("a"),uir=o("from_pretrained()"),_ir=o(" to load the model weights."),bir=l(),F(XF.$$.fragment),vir=l(),ho=a("div"),F(A8.$$.fragment),Fir=l(),U2e=a("p"),Tir=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Mir=l(),Ua=a("p"),Eir=o("The model class to instantiate is selected based on the "),J2e=a("code"),Cir=o("model_type"),wir=o(` property of the config object (either
passed as an argument or loaded from `),Y2e=a("code"),Air=o("pretrained_model_name_or_path"),Lir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=a("code"),yir=o("pretrained_model_name_or_path"),xir=o(":"),$ir=l(),L8=a("ul"),zF=a("li"),Z2e=a("strong"),kir=o("speech-encoder-decoder"),Sir=o(" \u2014 "),KW=a("a"),Rir=o("SpeechEncoderDecoderModel"),Pir=o(" (Speech Encoder decoder model)"),Bir=l(),WF=a("li"),ebe=a("strong"),Iir=o("speech_to_text"),Nir=o(" \u2014 "),ZW=a("a"),qir=o("Speech2TextForConditionalGeneration"),jir=o(" (Speech2Text model)"),Dir=l(),QF=a("p"),Gir=o("The model is set in evaluation mode by default using "),obe=a("code"),Oir=o("model.eval()"),Vir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rbe=a("code"),Xir=o("model.train()"),zir=l(),F(HF.$$.fragment),QGe=l(),Pd=a("h2"),UF=a("a"),tbe=a("span"),F(y8.$$.fragment),Wir=l(),abe=a("span"),Qir=o("AutoModelForAudioXVector"),HGe=l(),Qo=a("div"),F(x8.$$.fragment),Hir=l(),Bd=a("p"),Uir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),eQ=a("a"),Jir=o("from_pretrained()"),Yir=o(" class method or the "),oQ=a("a"),Kir=o("from_config()"),Zir=o(` class
method.`),edr=l(),$8=a("p"),odr=o("This class cannot be instantiated directly using "),nbe=a("code"),rdr=o("__init__()"),tdr=o(" (throws an error)."),adr=l(),Ct=a("div"),F(k8.$$.fragment),ndr=l(),sbe=a("p"),sdr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ldr=l(),Id=a("p"),idr=o(`Note:
Loading a model from its configuration file does `),lbe=a("strong"),ddr=o("not"),cdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=a("a"),fdr=o("from_pretrained()"),mdr=o(" to load the model weights."),gdr=l(),F(JF.$$.fragment),hdr=l(),po=a("div"),F(S8.$$.fragment),pdr=l(),ibe=a("p"),udr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),_dr=l(),Ja=a("p"),bdr=o("The model class to instantiate is selected based on the "),dbe=a("code"),vdr=o("model_type"),Fdr=o(` property of the config object (either
passed as an argument or loaded from `),cbe=a("code"),Tdr=o("pretrained_model_name_or_path"),Mdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=a("code"),Edr=o("pretrained_model_name_or_path"),Cdr=o(":"),wdr=l(),ot=a("ul"),YF=a("li"),mbe=a("strong"),Adr=o("data2vec-audio"),Ldr=o(" \u2014 "),tQ=a("a"),ydr=o("Data2VecAudioForXVector"),xdr=o(" (Data2VecAudio model)"),$dr=l(),KF=a("li"),gbe=a("strong"),kdr=o("unispeech-sat"),Sdr=o(" \u2014 "),aQ=a("a"),Rdr=o("UniSpeechSatForXVector"),Pdr=o(" (UniSpeechSat model)"),Bdr=l(),ZF=a("li"),hbe=a("strong"),Idr=o("wav2vec2"),Ndr=o(" \u2014 "),nQ=a("a"),qdr=o("Wav2Vec2ForXVector"),jdr=o(" (Wav2Vec2 model)"),Ddr=l(),e6=a("li"),pbe=a("strong"),Gdr=o("wav2vec2-conformer"),Odr=o(" \u2014 "),sQ=a("a"),Vdr=o("Wav2Vec2ConformerForXVector"),Xdr=o(" (Wav2Vec2-Conformer model)"),zdr=l(),o6=a("li"),ube=a("strong"),Wdr=o("wavlm"),Qdr=o(" \u2014 "),lQ=a("a"),Hdr=o("WavLMForXVector"),Udr=o(" (WavLM model)"),Jdr=l(),r6=a("p"),Ydr=o("The model is set in evaluation mode by default using "),_be=a("code"),Kdr=o("model.eval()"),Zdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bbe=a("code"),ecr=o("model.train()"),ocr=l(),F(t6.$$.fragment),UGe=l(),Nd=a("h2"),a6=a("a"),vbe=a("span"),F(R8.$$.fragment),rcr=l(),Fbe=a("span"),tcr=o("AutoModelForMaskedImageModeling"),JGe=l(),Ho=a("div"),F(P8.$$.fragment),acr=l(),qd=a("p"),ncr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),iQ=a("a"),scr=o("from_pretrained()"),lcr=o(" class method or the "),dQ=a("a"),icr=o("from_config()"),dcr=o(` class
method.`),ccr=l(),B8=a("p"),fcr=o("This class cannot be instantiated directly using "),Tbe=a("code"),mcr=o("__init__()"),gcr=o(" (throws an error)."),hcr=l(),wt=a("div"),F(I8.$$.fragment),pcr=l(),Mbe=a("p"),ucr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),_cr=l(),jd=a("p"),bcr=o(`Note:
Loading a model from its configuration file does `),Ebe=a("strong"),vcr=o("not"),Fcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=a("a"),Tcr=o("from_pretrained()"),Mcr=o(" to load the model weights."),Ecr=l(),F(n6.$$.fragment),Ccr=l(),uo=a("div"),F(N8.$$.fragment),wcr=l(),Cbe=a("p"),Acr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Lcr=l(),Ya=a("p"),ycr=o("The model class to instantiate is selected based on the "),wbe=a("code"),xcr=o("model_type"),$cr=o(` property of the config object (either
passed as an argument or loaded from `),Abe=a("code"),kcr=o("pretrained_model_name_or_path"),Scr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=a("code"),Rcr=o("pretrained_model_name_or_path"),Pcr=o(":"),Bcr=l(),Dd=a("ul"),s6=a("li"),ybe=a("strong"),Icr=o("deit"),Ncr=o(" \u2014 "),fQ=a("a"),qcr=o("DeiTForMaskedImageModeling"),jcr=o(" (DeiT model)"),Dcr=l(),l6=a("li"),xbe=a("strong"),Gcr=o("swin"),Ocr=o(" \u2014 "),mQ=a("a"),Vcr=o("SwinForMaskedImageModeling"),Xcr=o(" (Swin Transformer model)"),zcr=l(),i6=a("li"),$be=a("strong"),Wcr=o("vit"),Qcr=o(" \u2014 "),gQ=a("a"),Hcr=o("ViTForMaskedImageModeling"),Ucr=o(" (ViT model)"),Jcr=l(),d6=a("p"),Ycr=o("The model is set in evaluation mode by default using "),kbe=a("code"),Kcr=o("model.eval()"),Zcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sbe=a("code"),efr=o("model.train()"),ofr=l(),F(c6.$$.fragment),YGe=l(),Gd=a("h2"),f6=a("a"),Rbe=a("span"),F(q8.$$.fragment),rfr=l(),Pbe=a("span"),tfr=o("AutoModelForObjectDetection"),KGe=l(),Uo=a("div"),F(j8.$$.fragment),afr=l(),Od=a("p"),nfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),hQ=a("a"),sfr=o("from_pretrained()"),lfr=o(" class method or the "),pQ=a("a"),ifr=o("from_config()"),dfr=o(` class
method.`),cfr=l(),D8=a("p"),ffr=o("This class cannot be instantiated directly using "),Bbe=a("code"),mfr=o("__init__()"),gfr=o(" (throws an error)."),hfr=l(),At=a("div"),F(G8.$$.fragment),pfr=l(),Ibe=a("p"),ufr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),_fr=l(),Vd=a("p"),bfr=o(`Note:
Loading a model from its configuration file does `),Nbe=a("strong"),vfr=o("not"),Ffr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),Tfr=o("from_pretrained()"),Mfr=o(" to load the model weights."),Efr=l(),F(m6.$$.fragment),Cfr=l(),_o=a("div"),F(O8.$$.fragment),wfr=l(),qbe=a("p"),Afr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Lfr=l(),Ka=a("p"),yfr=o("The model class to instantiate is selected based on the "),jbe=a("code"),xfr=o("model_type"),$fr=o(` property of the config object (either
passed as an argument or loaded from `),Dbe=a("code"),kfr=o("pretrained_model_name_or_path"),Sfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=a("code"),Rfr=o("pretrained_model_name_or_path"),Pfr=o(":"),Bfr=l(),V8=a("ul"),g6=a("li"),Obe=a("strong"),Ifr=o("detr"),Nfr=o(" \u2014 "),_Q=a("a"),qfr=o("DetrForObjectDetection"),jfr=o(" (DETR model)"),Dfr=l(),h6=a("li"),Vbe=a("strong"),Gfr=o("yolos"),Ofr=o(" \u2014 "),bQ=a("a"),Vfr=o("YolosForObjectDetection"),Xfr=o(" (YOLOS model)"),zfr=l(),p6=a("p"),Wfr=o("The model is set in evaluation mode by default using "),Xbe=a("code"),Qfr=o("model.eval()"),Hfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zbe=a("code"),Ufr=o("model.train()"),Jfr=l(),F(u6.$$.fragment),ZGe=l(),Xd=a("h2"),_6=a("a"),Wbe=a("span"),F(X8.$$.fragment),Yfr=l(),Qbe=a("span"),Kfr=o("AutoModelForImageSegmentation"),eOe=l(),Jo=a("div"),F(z8.$$.fragment),Zfr=l(),zd=a("p"),emr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),vQ=a("a"),omr=o("from_pretrained()"),rmr=o(" class method or the "),FQ=a("a"),tmr=o("from_config()"),amr=o(` class
method.`),nmr=l(),W8=a("p"),smr=o("This class cannot be instantiated directly using "),Hbe=a("code"),lmr=o("__init__()"),imr=o(" (throws an error)."),dmr=l(),Lt=a("div"),F(Q8.$$.fragment),cmr=l(),Ube=a("p"),fmr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),mmr=l(),Wd=a("p"),gmr=o(`Note:
Loading a model from its configuration file does `),Jbe=a("strong"),hmr=o("not"),pmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),umr=o("from_pretrained()"),_mr=o(" to load the model weights."),bmr=l(),F(b6.$$.fragment),vmr=l(),bo=a("div"),F(H8.$$.fragment),Fmr=l(),Ybe=a("p"),Tmr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Mmr=l(),Za=a("p"),Emr=o("The model class to instantiate is selected based on the "),Kbe=a("code"),Cmr=o("model_type"),wmr=o(` property of the config object (either
passed as an argument or loaded from `),Zbe=a("code"),Amr=o("pretrained_model_name_or_path"),Lmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=a("code"),ymr=o("pretrained_model_name_or_path"),xmr=o(":"),$mr=l(),ove=a("ul"),v6=a("li"),rve=a("strong"),kmr=o("detr"),Smr=o(" \u2014 "),MQ=a("a"),Rmr=o("DetrForSegmentation"),Pmr=o(" (DETR model)"),Bmr=l(),F6=a("p"),Imr=o("The model is set in evaluation mode by default using "),tve=a("code"),Nmr=o("model.eval()"),qmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ave=a("code"),jmr=o("model.train()"),Dmr=l(),F(T6.$$.fragment),oOe=l(),Qd=a("h2"),M6=a("a"),nve=a("span"),F(U8.$$.fragment),Gmr=l(),sve=a("span"),Omr=o("AutoModelForSemanticSegmentation"),rOe=l(),Yo=a("div"),F(J8.$$.fragment),Vmr=l(),Hd=a("p"),Xmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),EQ=a("a"),zmr=o("from_pretrained()"),Wmr=o(" class method or the "),CQ=a("a"),Qmr=o("from_config()"),Hmr=o(` class
method.`),Umr=l(),Y8=a("p"),Jmr=o("This class cannot be instantiated directly using "),lve=a("code"),Ymr=o("__init__()"),Kmr=o(" (throws an error)."),Zmr=l(),yt=a("div"),F(K8.$$.fragment),egr=l(),ive=a("p"),ogr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),rgr=l(),Ud=a("p"),tgr=o(`Note:
Loading a model from its configuration file does `),dve=a("strong"),agr=o("not"),ngr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=a("a"),sgr=o("from_pretrained()"),lgr=o(" to load the model weights."),igr=l(),F(E6.$$.fragment),dgr=l(),vo=a("div"),F(Z8.$$.fragment),cgr=l(),cve=a("p"),fgr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),mgr=l(),en=a("p"),ggr=o("The model class to instantiate is selected based on the "),fve=a("code"),hgr=o("model_type"),pgr=o(` property of the config object (either
passed as an argument or loaded from `),mve=a("code"),ugr=o("pretrained_model_name_or_path"),_gr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=a("code"),bgr=o("pretrained_model_name_or_path"),vgr=o(":"),Fgr=l(),on=a("ul"),C6=a("li"),hve=a("strong"),Tgr=o("beit"),Mgr=o(" \u2014 "),AQ=a("a"),Egr=o("BeitForSemanticSegmentation"),Cgr=o(" (BEiT model)"),wgr=l(),w6=a("li"),pve=a("strong"),Agr=o("data2vec-vision"),Lgr=o(" \u2014 "),LQ=a("a"),ygr=o("Data2VecVisionForSemanticSegmentation"),xgr=o(" (Data2VecVision model)"),$gr=l(),A6=a("li"),uve=a("strong"),kgr=o("dpt"),Sgr=o(" \u2014 "),yQ=a("a"),Rgr=o("DPTForSemanticSegmentation"),Pgr=o(" (DPT model)"),Bgr=l(),L6=a("li"),_ve=a("strong"),Igr=o("segformer"),Ngr=o(" \u2014 "),xQ=a("a"),qgr=o("SegformerForSemanticSegmentation"),jgr=o(" (SegFormer model)"),Dgr=l(),y6=a("p"),Ggr=o("The model is set in evaluation mode by default using "),bve=a("code"),Ogr=o("model.eval()"),Vgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vve=a("code"),Xgr=o("model.train()"),zgr=l(),F(x6.$$.fragment),tOe=l(),Jd=a("h2"),$6=a("a"),Fve=a("span"),F(e9.$$.fragment),Wgr=l(),Tve=a("span"),Qgr=o("AutoModelForInstanceSegmentation"),aOe=l(),Ko=a("div"),F(o9.$$.fragment),Hgr=l(),Yd=a("p"),Ugr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),$Q=a("a"),Jgr=o("from_pretrained()"),Ygr=o(" class method or the "),kQ=a("a"),Kgr=o("from_config()"),Zgr=o(` class
method.`),ehr=l(),r9=a("p"),ohr=o("This class cannot be instantiated directly using "),Mve=a("code"),rhr=o("__init__()"),thr=o(" (throws an error)."),ahr=l(),xt=a("div"),F(t9.$$.fragment),nhr=l(),Eve=a("p"),shr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),lhr=l(),Kd=a("p"),ihr=o(`Note:
Loading a model from its configuration file does `),Cve=a("strong"),dhr=o("not"),chr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),fhr=o("from_pretrained()"),mhr=o(" to load the model weights."),ghr=l(),F(k6.$$.fragment),hhr=l(),Fo=a("div"),F(a9.$$.fragment),phr=l(),wve=a("p"),uhr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),_hr=l(),rn=a("p"),bhr=o("The model class to instantiate is selected based on the "),Ave=a("code"),vhr=o("model_type"),Fhr=o(` property of the config object (either
passed as an argument or loaded from `),Lve=a("code"),Thr=o("pretrained_model_name_or_path"),Mhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=a("code"),Ehr=o("pretrained_model_name_or_path"),Chr=o(":"),whr=l(),xve=a("ul"),S6=a("li"),$ve=a("strong"),Ahr=o("maskformer"),Lhr=o(" \u2014 "),RQ=a("a"),yhr=o("MaskFormerForInstanceSegmentation"),xhr=o(" (MaskFormer model)"),$hr=l(),R6=a("p"),khr=o("The model is set in evaluation mode by default using "),kve=a("code"),Shr=o("model.eval()"),Rhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sve=a("code"),Phr=o("model.train()"),Bhr=l(),F(P6.$$.fragment),nOe=l(),Zd=a("h2"),B6=a("a"),Rve=a("span"),F(n9.$$.fragment),Ihr=l(),Pve=a("span"),Nhr=o("TFAutoModel"),sOe=l(),Zo=a("div"),F(s9.$$.fragment),qhr=l(),ec=a("p"),jhr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),PQ=a("a"),Dhr=o("from_pretrained()"),Ghr=o(" class method or the "),BQ=a("a"),Ohr=o("from_config()"),Vhr=o(` class
method.`),Xhr=l(),l9=a("p"),zhr=o("This class cannot be instantiated directly using "),Bve=a("code"),Whr=o("__init__()"),Qhr=o(" (throws an error)."),Hhr=l(),$t=a("div"),F(i9.$$.fragment),Uhr=l(),Ive=a("p"),Jhr=o("Instantiates one of the base model classes of the library from a configuration."),Yhr=l(),oc=a("p"),Khr=o(`Note:
Loading a model from its configuration file does `),Nve=a("strong"),Zhr=o("not"),epr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),opr=o("from_pretrained()"),rpr=o(" to load the model weights."),tpr=l(),F(I6.$$.fragment),apr=l(),Lr=a("div"),F(d9.$$.fragment),npr=l(),qve=a("p"),spr=o("Instantiate one of the base model classes of the library from a pretrained model."),lpr=l(),tn=a("p"),ipr=o("The model class to instantiate is selected based on the "),jve=a("code"),dpr=o("model_type"),cpr=o(` property of the config object (either
passed as an argument or loaded from `),Dve=a("code"),fpr=o("pretrained_model_name_or_path"),mpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=a("code"),gpr=o("pretrained_model_name_or_path"),hpr=o(":"),ppr=l(),q=a("ul"),N6=a("li"),Ove=a("strong"),upr=o("albert"),_pr=o(" \u2014 "),NQ=a("a"),bpr=o("TFAlbertModel"),vpr=o(" (ALBERT model)"),Fpr=l(),q6=a("li"),Vve=a("strong"),Tpr=o("bart"),Mpr=o(" \u2014 "),qQ=a("a"),Epr=o("TFBartModel"),Cpr=o(" (BART model)"),wpr=l(),j6=a("li"),Xve=a("strong"),Apr=o("bert"),Lpr=o(" \u2014 "),jQ=a("a"),ypr=o("TFBertModel"),xpr=o(" (BERT model)"),$pr=l(),D6=a("li"),zve=a("strong"),kpr=o("blenderbot"),Spr=o(" \u2014 "),DQ=a("a"),Rpr=o("TFBlenderbotModel"),Ppr=o(" (Blenderbot model)"),Bpr=l(),G6=a("li"),Wve=a("strong"),Ipr=o("blenderbot-small"),Npr=o(" \u2014 "),GQ=a("a"),qpr=o("TFBlenderbotSmallModel"),jpr=o(" (BlenderbotSmall model)"),Dpr=l(),O6=a("li"),Qve=a("strong"),Gpr=o("camembert"),Opr=o(" \u2014 "),OQ=a("a"),Vpr=o("TFCamembertModel"),Xpr=o(" (CamemBERT model)"),zpr=l(),V6=a("li"),Hve=a("strong"),Wpr=o("clip"),Qpr=o(" \u2014 "),VQ=a("a"),Hpr=o("TFCLIPModel"),Upr=o(" (CLIP model)"),Jpr=l(),X6=a("li"),Uve=a("strong"),Ypr=o("convbert"),Kpr=o(" \u2014 "),XQ=a("a"),Zpr=o("TFConvBertModel"),eur=o(" (ConvBERT model)"),our=l(),z6=a("li"),Jve=a("strong"),rur=o("convnext"),tur=o(" \u2014 "),zQ=a("a"),aur=o("TFConvNextModel"),nur=o(" (ConvNeXT model)"),sur=l(),W6=a("li"),Yve=a("strong"),lur=o("ctrl"),iur=o(" \u2014 "),WQ=a("a"),dur=o("TFCTRLModel"),cur=o(" (CTRL model)"),fur=l(),Q6=a("li"),Kve=a("strong"),mur=o("data2vec-vision"),gur=o(" \u2014 "),QQ=a("a"),hur=o("TFData2VecVisionModel"),pur=o(" (Data2VecVision model)"),uur=l(),H6=a("li"),Zve=a("strong"),_ur=o("deberta"),bur=o(" \u2014 "),HQ=a("a"),vur=o("TFDebertaModel"),Fur=o(" (DeBERTa model)"),Tur=l(),U6=a("li"),e3e=a("strong"),Mur=o("deberta-v2"),Eur=o(" \u2014 "),UQ=a("a"),Cur=o("TFDebertaV2Model"),wur=o(" (DeBERTa-v2 model)"),Aur=l(),J6=a("li"),o3e=a("strong"),Lur=o("distilbert"),yur=o(" \u2014 "),JQ=a("a"),xur=o("TFDistilBertModel"),$ur=o(" (DistilBERT model)"),kur=l(),Y6=a("li"),r3e=a("strong"),Sur=o("dpr"),Rur=o(" \u2014 "),YQ=a("a"),Pur=o("TFDPRQuestionEncoder"),Bur=o(" (DPR model)"),Iur=l(),K6=a("li"),t3e=a("strong"),Nur=o("electra"),qur=o(" \u2014 "),KQ=a("a"),jur=o("TFElectraModel"),Dur=o(" (ELECTRA model)"),Gur=l(),Z6=a("li"),a3e=a("strong"),Our=o("flaubert"),Vur=o(" \u2014 "),ZQ=a("a"),Xur=o("TFFlaubertModel"),zur=o(" (FlauBERT model)"),Wur=l(),Xs=a("li"),n3e=a("strong"),Qur=o("funnel"),Hur=o(" \u2014 "),eH=a("a"),Uur=o("TFFunnelModel"),Jur=o(" or "),oH=a("a"),Yur=o("TFFunnelBaseModel"),Kur=o(" (Funnel Transformer model)"),Zur=l(),eT=a("li"),s3e=a("strong"),e_r=o("gpt2"),o_r=o(" \u2014 "),rH=a("a"),r_r=o("TFGPT2Model"),t_r=o(" (OpenAI GPT-2 model)"),a_r=l(),oT=a("li"),l3e=a("strong"),n_r=o("gptj"),s_r=o(" \u2014 "),tH=a("a"),l_r=o("TFGPTJModel"),i_r=o(" (GPT-J model)"),d_r=l(),rT=a("li"),i3e=a("strong"),c_r=o("hubert"),f_r=o(" \u2014 "),aH=a("a"),m_r=o("TFHubertModel"),g_r=o(" (Hubert model)"),h_r=l(),tT=a("li"),d3e=a("strong"),p_r=o("layoutlm"),u_r=o(" \u2014 "),nH=a("a"),__r=o("TFLayoutLMModel"),b_r=o(" (LayoutLM model)"),v_r=l(),aT=a("li"),c3e=a("strong"),F_r=o("led"),T_r=o(" \u2014 "),sH=a("a"),M_r=o("TFLEDModel"),E_r=o(" (LED model)"),C_r=l(),nT=a("li"),f3e=a("strong"),w_r=o("longformer"),A_r=o(" \u2014 "),lH=a("a"),L_r=o("TFLongformerModel"),y_r=o(" (Longformer model)"),x_r=l(),sT=a("li"),m3e=a("strong"),$_r=o("lxmert"),k_r=o(" \u2014 "),iH=a("a"),S_r=o("TFLxmertModel"),R_r=o(" (LXMERT model)"),P_r=l(),lT=a("li"),g3e=a("strong"),B_r=o("marian"),I_r=o(" \u2014 "),dH=a("a"),N_r=o("TFMarianModel"),q_r=o(" (Marian model)"),j_r=l(),iT=a("li"),h3e=a("strong"),D_r=o("mbart"),G_r=o(" \u2014 "),cH=a("a"),O_r=o("TFMBartModel"),V_r=o(" (mBART model)"),X_r=l(),dT=a("li"),p3e=a("strong"),z_r=o("mobilebert"),W_r=o(" \u2014 "),fH=a("a"),Q_r=o("TFMobileBertModel"),H_r=o(" (MobileBERT model)"),U_r=l(),cT=a("li"),u3e=a("strong"),J_r=o("mpnet"),Y_r=o(" \u2014 "),mH=a("a"),K_r=o("TFMPNetModel"),Z_r=o(" (MPNet model)"),e1r=l(),fT=a("li"),_3e=a("strong"),o1r=o("mt5"),r1r=o(" \u2014 "),gH=a("a"),t1r=o("TFMT5Model"),a1r=o(" (MT5 model)"),n1r=l(),mT=a("li"),b3e=a("strong"),s1r=o("openai-gpt"),l1r=o(" \u2014 "),hH=a("a"),i1r=o("TFOpenAIGPTModel"),d1r=o(" (OpenAI GPT model)"),c1r=l(),gT=a("li"),v3e=a("strong"),f1r=o("opt"),m1r=o(" \u2014 "),pH=a("a"),g1r=o("TFOPTModel"),h1r=o(" (OPT model)"),p1r=l(),hT=a("li"),F3e=a("strong"),u1r=o("pegasus"),_1r=o(" \u2014 "),uH=a("a"),b1r=o("TFPegasusModel"),v1r=o(" (Pegasus model)"),F1r=l(),pT=a("li"),T3e=a("strong"),T1r=o("rembert"),M1r=o(" \u2014 "),_H=a("a"),E1r=o("TFRemBertModel"),C1r=o(" (RemBERT model)"),w1r=l(),uT=a("li"),M3e=a("strong"),A1r=o("roberta"),L1r=o(" \u2014 "),bH=a("a"),y1r=o("TFRobertaModel"),x1r=o(" (RoBERTa model)"),$1r=l(),_T=a("li"),E3e=a("strong"),k1r=o("roformer"),S1r=o(" \u2014 "),vH=a("a"),R1r=o("TFRoFormerModel"),P1r=o(" (RoFormer model)"),B1r=l(),bT=a("li"),C3e=a("strong"),I1r=o("speech_to_text"),N1r=o(" \u2014 "),FH=a("a"),q1r=o("TFSpeech2TextModel"),j1r=o(" (Speech2Text model)"),D1r=l(),vT=a("li"),w3e=a("strong"),G1r=o("swin"),O1r=o(" \u2014 "),TH=a("a"),V1r=o("TFSwinModel"),X1r=o(" (Swin Transformer model)"),z1r=l(),FT=a("li"),A3e=a("strong"),W1r=o("t5"),Q1r=o(" \u2014 "),MH=a("a"),H1r=o("TFT5Model"),U1r=o(" (T5 model)"),J1r=l(),TT=a("li"),L3e=a("strong"),Y1r=o("tapas"),K1r=o(" \u2014 "),EH=a("a"),Z1r=o("TFTapasModel"),e2r=o(" (TAPAS model)"),o2r=l(),MT=a("li"),y3e=a("strong"),r2r=o("transfo-xl"),t2r=o(" \u2014 "),CH=a("a"),a2r=o("TFTransfoXLModel"),n2r=o(" (Transformer-XL model)"),s2r=l(),ET=a("li"),x3e=a("strong"),l2r=o("vit"),i2r=o(" \u2014 "),wH=a("a"),d2r=o("TFViTModel"),c2r=o(" (ViT model)"),f2r=l(),CT=a("li"),$3e=a("strong"),m2r=o("vit_mae"),g2r=o(" \u2014 "),AH=a("a"),h2r=o("TFViTMAEModel"),p2r=o(" (ViTMAE model)"),u2r=l(),wT=a("li"),k3e=a("strong"),_2r=o("wav2vec2"),b2r=o(" \u2014 "),LH=a("a"),v2r=o("TFWav2Vec2Model"),F2r=o(" (Wav2Vec2 model)"),T2r=l(),AT=a("li"),S3e=a("strong"),M2r=o("xlm"),E2r=o(" \u2014 "),yH=a("a"),C2r=o("TFXLMModel"),w2r=o(" (XLM model)"),A2r=l(),LT=a("li"),R3e=a("strong"),L2r=o("xlm-roberta"),y2r=o(" \u2014 "),xH=a("a"),x2r=o("TFXLMRobertaModel"),$2r=o(" (XLM-RoBERTa model)"),k2r=l(),yT=a("li"),P3e=a("strong"),S2r=o("xlnet"),R2r=o(" \u2014 "),$H=a("a"),P2r=o("TFXLNetModel"),B2r=o(" (XLNet model)"),I2r=l(),F(xT.$$.fragment),lOe=l(),rc=a("h2"),$T=a("a"),B3e=a("span"),F(c9.$$.fragment),N2r=l(),I3e=a("span"),q2r=o("TFAutoModelForPreTraining"),iOe=l(),er=a("div"),F(f9.$$.fragment),j2r=l(),tc=a("p"),D2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kH=a("a"),G2r=o("from_pretrained()"),O2r=o(" class method or the "),SH=a("a"),V2r=o("from_config()"),X2r=o(` class
method.`),z2r=l(),m9=a("p"),W2r=o("This class cannot be instantiated directly using "),N3e=a("code"),Q2r=o("__init__()"),H2r=o(" (throws an error)."),U2r=l(),kt=a("div"),F(g9.$$.fragment),J2r=l(),q3e=a("p"),Y2r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),K2r=l(),ac=a("p"),Z2r=o(`Note:
Loading a model from its configuration file does `),j3e=a("strong"),ebr=o("not"),obr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),rbr=o("from_pretrained()"),tbr=o(" to load the model weights."),abr=l(),F(kT.$$.fragment),nbr=l(),yr=a("div"),F(h9.$$.fragment),sbr=l(),D3e=a("p"),lbr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ibr=l(),an=a("p"),dbr=o("The model class to instantiate is selected based on the "),G3e=a("code"),cbr=o("model_type"),fbr=o(` property of the config object (either
passed as an argument or loaded from `),O3e=a("code"),mbr=o("pretrained_model_name_or_path"),gbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V3e=a("code"),hbr=o("pretrained_model_name_or_path"),pbr=o(":"),ubr=l(),se=a("ul"),ST=a("li"),X3e=a("strong"),_br=o("albert"),bbr=o(" \u2014 "),PH=a("a"),vbr=o("TFAlbertForPreTraining"),Fbr=o(" (ALBERT model)"),Tbr=l(),RT=a("li"),z3e=a("strong"),Mbr=o("bart"),Ebr=o(" \u2014 "),BH=a("a"),Cbr=o("TFBartForConditionalGeneration"),wbr=o(" (BART model)"),Abr=l(),PT=a("li"),W3e=a("strong"),Lbr=o("bert"),ybr=o(" \u2014 "),IH=a("a"),xbr=o("TFBertForPreTraining"),$br=o(" (BERT model)"),kbr=l(),BT=a("li"),Q3e=a("strong"),Sbr=o("camembert"),Rbr=o(" \u2014 "),NH=a("a"),Pbr=o("TFCamembertForMaskedLM"),Bbr=o(" (CamemBERT model)"),Ibr=l(),IT=a("li"),H3e=a("strong"),Nbr=o("ctrl"),qbr=o(" \u2014 "),qH=a("a"),jbr=o("TFCTRLLMHeadModel"),Dbr=o(" (CTRL model)"),Gbr=l(),NT=a("li"),U3e=a("strong"),Obr=o("distilbert"),Vbr=o(" \u2014 "),jH=a("a"),Xbr=o("TFDistilBertForMaskedLM"),zbr=o(" (DistilBERT model)"),Wbr=l(),qT=a("li"),J3e=a("strong"),Qbr=o("electra"),Hbr=o(" \u2014 "),DH=a("a"),Ubr=o("TFElectraForPreTraining"),Jbr=o(" (ELECTRA model)"),Ybr=l(),jT=a("li"),Y3e=a("strong"),Kbr=o("flaubert"),Zbr=o(" \u2014 "),GH=a("a"),evr=o("TFFlaubertWithLMHeadModel"),ovr=o(" (FlauBERT model)"),rvr=l(),DT=a("li"),K3e=a("strong"),tvr=o("funnel"),avr=o(" \u2014 "),OH=a("a"),nvr=o("TFFunnelForPreTraining"),svr=o(" (Funnel Transformer model)"),lvr=l(),GT=a("li"),Z3e=a("strong"),ivr=o("gpt2"),dvr=o(" \u2014 "),VH=a("a"),cvr=o("TFGPT2LMHeadModel"),fvr=o(" (OpenAI GPT-2 model)"),mvr=l(),OT=a("li"),e0e=a("strong"),gvr=o("layoutlm"),hvr=o(" \u2014 "),XH=a("a"),pvr=o("TFLayoutLMForMaskedLM"),uvr=o(" (LayoutLM model)"),_vr=l(),VT=a("li"),o0e=a("strong"),bvr=o("lxmert"),vvr=o(" \u2014 "),zH=a("a"),Fvr=o("TFLxmertForPreTraining"),Tvr=o(" (LXMERT model)"),Mvr=l(),XT=a("li"),r0e=a("strong"),Evr=o("mobilebert"),Cvr=o(" \u2014 "),WH=a("a"),wvr=o("TFMobileBertForPreTraining"),Avr=o(" (MobileBERT model)"),Lvr=l(),zT=a("li"),t0e=a("strong"),yvr=o("mpnet"),xvr=o(" \u2014 "),QH=a("a"),$vr=o("TFMPNetForMaskedLM"),kvr=o(" (MPNet model)"),Svr=l(),WT=a("li"),a0e=a("strong"),Rvr=o("openai-gpt"),Pvr=o(" \u2014 "),HH=a("a"),Bvr=o("TFOpenAIGPTLMHeadModel"),Ivr=o(" (OpenAI GPT model)"),Nvr=l(),QT=a("li"),n0e=a("strong"),qvr=o("roberta"),jvr=o(" \u2014 "),UH=a("a"),Dvr=o("TFRobertaForMaskedLM"),Gvr=o(" (RoBERTa model)"),Ovr=l(),HT=a("li"),s0e=a("strong"),Vvr=o("t5"),Xvr=o(" \u2014 "),JH=a("a"),zvr=o("TFT5ForConditionalGeneration"),Wvr=o(" (T5 model)"),Qvr=l(),UT=a("li"),l0e=a("strong"),Hvr=o("tapas"),Uvr=o(" \u2014 "),YH=a("a"),Jvr=o("TFTapasForMaskedLM"),Yvr=o(" (TAPAS model)"),Kvr=l(),JT=a("li"),i0e=a("strong"),Zvr=o("transfo-xl"),e3r=o(" \u2014 "),KH=a("a"),o3r=o("TFTransfoXLLMHeadModel"),r3r=o(" (Transformer-XL model)"),t3r=l(),YT=a("li"),d0e=a("strong"),a3r=o("vit_mae"),n3r=o(" \u2014 "),ZH=a("a"),s3r=o("TFViTMAEForPreTraining"),l3r=o(" (ViTMAE model)"),i3r=l(),KT=a("li"),c0e=a("strong"),d3r=o("xlm"),c3r=o(" \u2014 "),eU=a("a"),f3r=o("TFXLMWithLMHeadModel"),m3r=o(" (XLM model)"),g3r=l(),ZT=a("li"),f0e=a("strong"),h3r=o("xlm-roberta"),p3r=o(" \u2014 "),oU=a("a"),u3r=o("TFXLMRobertaForMaskedLM"),_3r=o(" (XLM-RoBERTa model)"),b3r=l(),e7=a("li"),m0e=a("strong"),v3r=o("xlnet"),F3r=o(" \u2014 "),rU=a("a"),T3r=o("TFXLNetLMHeadModel"),M3r=o(" (XLNet model)"),E3r=l(),F(o7.$$.fragment),dOe=l(),nc=a("h2"),r7=a("a"),g0e=a("span"),F(p9.$$.fragment),C3r=l(),h0e=a("span"),w3r=o("TFAutoModelForCausalLM"),cOe=l(),or=a("div"),F(u9.$$.fragment),A3r=l(),sc=a("p"),L3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tU=a("a"),y3r=o("from_pretrained()"),x3r=o(" class method or the "),aU=a("a"),$3r=o("from_config()"),k3r=o(` class
method.`),S3r=l(),_9=a("p"),R3r=o("This class cannot be instantiated directly using "),p0e=a("code"),P3r=o("__init__()"),B3r=o(" (throws an error)."),I3r=l(),St=a("div"),F(b9.$$.fragment),N3r=l(),u0e=a("p"),q3r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),j3r=l(),lc=a("p"),D3r=o(`Note:
Loading a model from its configuration file does `),_0e=a("strong"),G3r=o("not"),O3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),V3r=o("from_pretrained()"),X3r=o(" to load the model weights."),z3r=l(),F(t7.$$.fragment),W3r=l(),xr=a("div"),F(v9.$$.fragment),Q3r=l(),b0e=a("p"),H3r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),U3r=l(),nn=a("p"),J3r=o("The model class to instantiate is selected based on the "),v0e=a("code"),Y3r=o("model_type"),K3r=o(` property of the config object (either
passed as an argument or loaded from `),F0e=a("code"),Z3r=o("pretrained_model_name_or_path"),e0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T0e=a("code"),o0r=o("pretrained_model_name_or_path"),r0r=o(":"),t0r=l(),Me=a("ul"),a7=a("li"),M0e=a("strong"),a0r=o("bert"),n0r=o(" \u2014 "),sU=a("a"),s0r=o("TFBertLMHeadModel"),l0r=o(" (BERT model)"),i0r=l(),n7=a("li"),E0e=a("strong"),d0r=o("camembert"),c0r=o(" \u2014 "),lU=a("a"),f0r=o("TFCamembertForCausalLM"),m0r=o(" (CamemBERT model)"),g0r=l(),s7=a("li"),C0e=a("strong"),h0r=o("ctrl"),p0r=o(" \u2014 "),iU=a("a"),u0r=o("TFCTRLLMHeadModel"),_0r=o(" (CTRL model)"),b0r=l(),l7=a("li"),w0e=a("strong"),v0r=o("gpt2"),F0r=o(" \u2014 "),dU=a("a"),T0r=o("TFGPT2LMHeadModel"),M0r=o(" (OpenAI GPT-2 model)"),E0r=l(),i7=a("li"),A0e=a("strong"),C0r=o("gptj"),w0r=o(" \u2014 "),cU=a("a"),A0r=o("TFGPTJForCausalLM"),L0r=o(" (GPT-J model)"),y0r=l(),d7=a("li"),L0e=a("strong"),x0r=o("openai-gpt"),$0r=o(" \u2014 "),fU=a("a"),k0r=o("TFOpenAIGPTLMHeadModel"),S0r=o(" (OpenAI GPT model)"),R0r=l(),c7=a("li"),y0e=a("strong"),P0r=o("opt"),B0r=o(" \u2014 "),mU=a("a"),I0r=o("TFOPTForCausalLM"),N0r=o(" (OPT model)"),q0r=l(),f7=a("li"),x0e=a("strong"),j0r=o("rembert"),D0r=o(" \u2014 "),gU=a("a"),G0r=o("TFRemBertForCausalLM"),O0r=o(" (RemBERT model)"),V0r=l(),m7=a("li"),$0e=a("strong"),X0r=o("roberta"),z0r=o(" \u2014 "),hU=a("a"),W0r=o("TFRobertaForCausalLM"),Q0r=o(" (RoBERTa model)"),H0r=l(),g7=a("li"),k0e=a("strong"),U0r=o("roformer"),J0r=o(" \u2014 "),pU=a("a"),Y0r=o("TFRoFormerForCausalLM"),K0r=o(" (RoFormer model)"),Z0r=l(),h7=a("li"),S0e=a("strong"),eFr=o("transfo-xl"),oFr=o(" \u2014 "),uU=a("a"),rFr=o("TFTransfoXLLMHeadModel"),tFr=o(" (Transformer-XL model)"),aFr=l(),p7=a("li"),R0e=a("strong"),nFr=o("xlm"),sFr=o(" \u2014 "),_U=a("a"),lFr=o("TFXLMWithLMHeadModel"),iFr=o(" (XLM model)"),dFr=l(),u7=a("li"),P0e=a("strong"),cFr=o("xlnet"),fFr=o(" \u2014 "),bU=a("a"),mFr=o("TFXLNetLMHeadModel"),gFr=o(" (XLNet model)"),hFr=l(),F(_7.$$.fragment),fOe=l(),ic=a("h2"),b7=a("a"),B0e=a("span"),F(F9.$$.fragment),pFr=l(),I0e=a("span"),uFr=o("TFAutoModelForImageClassification"),mOe=l(),rr=a("div"),F(T9.$$.fragment),_Fr=l(),dc=a("p"),bFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vU=a("a"),vFr=o("from_pretrained()"),FFr=o(" class method or the "),FU=a("a"),TFr=o("from_config()"),MFr=o(` class
method.`),EFr=l(),M9=a("p"),CFr=o("This class cannot be instantiated directly using "),N0e=a("code"),wFr=o("__init__()"),AFr=o(" (throws an error)."),LFr=l(),Rt=a("div"),F(E9.$$.fragment),yFr=l(),q0e=a("p"),xFr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$Fr=l(),cc=a("p"),kFr=o(`Note:
Loading a model from its configuration file does `),j0e=a("strong"),SFr=o("not"),RFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=a("a"),PFr=o("from_pretrained()"),BFr=o(" to load the model weights."),IFr=l(),F(v7.$$.fragment),NFr=l(),$r=a("div"),F(C9.$$.fragment),qFr=l(),D0e=a("p"),jFr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),DFr=l(),sn=a("p"),GFr=o("The model class to instantiate is selected based on the "),G0e=a("code"),OFr=o("model_type"),VFr=o(` property of the config object (either
passed as an argument or loaded from `),O0e=a("code"),XFr=o("pretrained_model_name_or_path"),zFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V0e=a("code"),WFr=o("pretrained_model_name_or_path"),QFr=o(":"),HFr=l(),ln=a("ul"),F7=a("li"),X0e=a("strong"),UFr=o("convnext"),JFr=o(" \u2014 "),MU=a("a"),YFr=o("TFConvNextForImageClassification"),KFr=o(" (ConvNeXT model)"),ZFr=l(),T7=a("li"),z0e=a("strong"),e6r=o("data2vec-vision"),o6r=o(" \u2014 "),EU=a("a"),r6r=o("TFData2VecVisionForImageClassification"),t6r=o(" (Data2VecVision model)"),a6r=l(),M7=a("li"),W0e=a("strong"),n6r=o("swin"),s6r=o(" \u2014 "),CU=a("a"),l6r=o("TFSwinForImageClassification"),i6r=o(" (Swin Transformer model)"),d6r=l(),E7=a("li"),Q0e=a("strong"),c6r=o("vit"),f6r=o(" \u2014 "),wU=a("a"),m6r=o("TFViTForImageClassification"),g6r=o(" (ViT model)"),h6r=l(),F(C7.$$.fragment),gOe=l(),fc=a("h2"),w7=a("a"),H0e=a("span"),F(w9.$$.fragment),p6r=l(),U0e=a("span"),u6r=o("TFAutoModelForMaskedLM"),hOe=l(),tr=a("div"),F(A9.$$.fragment),_6r=l(),mc=a("p"),b6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AU=a("a"),v6r=o("from_pretrained()"),F6r=o(" class method or the "),LU=a("a"),T6r=o("from_config()"),M6r=o(` class
method.`),E6r=l(),L9=a("p"),C6r=o("This class cannot be instantiated directly using "),J0e=a("code"),w6r=o("__init__()"),A6r=o(" (throws an error)."),L6r=l(),Pt=a("div"),F(y9.$$.fragment),y6r=l(),Y0e=a("p"),x6r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$6r=l(),gc=a("p"),k6r=o(`Note:
Loading a model from its configuration file does `),K0e=a("strong"),S6r=o("not"),R6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=a("a"),P6r=o("from_pretrained()"),B6r=o(" to load the model weights."),I6r=l(),F(A7.$$.fragment),N6r=l(),kr=a("div"),F(x9.$$.fragment),q6r=l(),Z0e=a("p"),j6r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),D6r=l(),dn=a("p"),G6r=o("The model class to instantiate is selected based on the "),eFe=a("code"),O6r=o("model_type"),V6r=o(` property of the config object (either
passed as an argument or loaded from `),oFe=a("code"),X6r=o("pretrained_model_name_or_path"),z6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=a("code"),W6r=o("pretrained_model_name_or_path"),Q6r=o(":"),H6r=l(),ie=a("ul"),L7=a("li"),tFe=a("strong"),U6r=o("albert"),J6r=o(" \u2014 "),xU=a("a"),Y6r=o("TFAlbertForMaskedLM"),K6r=o(" (ALBERT model)"),Z6r=l(),y7=a("li"),aFe=a("strong"),eTr=o("bert"),oTr=o(" \u2014 "),$U=a("a"),rTr=o("TFBertForMaskedLM"),tTr=o(" (BERT model)"),aTr=l(),x7=a("li"),nFe=a("strong"),nTr=o("camembert"),sTr=o(" \u2014 "),kU=a("a"),lTr=o("TFCamembertForMaskedLM"),iTr=o(" (CamemBERT model)"),dTr=l(),$7=a("li"),sFe=a("strong"),cTr=o("convbert"),fTr=o(" \u2014 "),SU=a("a"),mTr=o("TFConvBertForMaskedLM"),gTr=o(" (ConvBERT model)"),hTr=l(),k7=a("li"),lFe=a("strong"),pTr=o("deberta"),uTr=o(" \u2014 "),RU=a("a"),_Tr=o("TFDebertaForMaskedLM"),bTr=o(" (DeBERTa model)"),vTr=l(),S7=a("li"),iFe=a("strong"),FTr=o("deberta-v2"),TTr=o(" \u2014 "),PU=a("a"),MTr=o("TFDebertaV2ForMaskedLM"),ETr=o(" (DeBERTa-v2 model)"),CTr=l(),R7=a("li"),dFe=a("strong"),wTr=o("distilbert"),ATr=o(" \u2014 "),BU=a("a"),LTr=o("TFDistilBertForMaskedLM"),yTr=o(" (DistilBERT model)"),xTr=l(),P7=a("li"),cFe=a("strong"),$Tr=o("electra"),kTr=o(" \u2014 "),IU=a("a"),STr=o("TFElectraForMaskedLM"),RTr=o(" (ELECTRA model)"),PTr=l(),B7=a("li"),fFe=a("strong"),BTr=o("flaubert"),ITr=o(" \u2014 "),NU=a("a"),NTr=o("TFFlaubertWithLMHeadModel"),qTr=o(" (FlauBERT model)"),jTr=l(),I7=a("li"),mFe=a("strong"),DTr=o("funnel"),GTr=o(" \u2014 "),qU=a("a"),OTr=o("TFFunnelForMaskedLM"),VTr=o(" (Funnel Transformer model)"),XTr=l(),N7=a("li"),gFe=a("strong"),zTr=o("layoutlm"),WTr=o(" \u2014 "),jU=a("a"),QTr=o("TFLayoutLMForMaskedLM"),HTr=o(" (LayoutLM model)"),UTr=l(),q7=a("li"),hFe=a("strong"),JTr=o("longformer"),YTr=o(" \u2014 "),DU=a("a"),KTr=o("TFLongformerForMaskedLM"),ZTr=o(" (Longformer model)"),e7r=l(),j7=a("li"),pFe=a("strong"),o7r=o("mobilebert"),r7r=o(" \u2014 "),GU=a("a"),t7r=o("TFMobileBertForMaskedLM"),a7r=o(" (MobileBERT model)"),n7r=l(),D7=a("li"),uFe=a("strong"),s7r=o("mpnet"),l7r=o(" \u2014 "),OU=a("a"),i7r=o("TFMPNetForMaskedLM"),d7r=o(" (MPNet model)"),c7r=l(),G7=a("li"),_Fe=a("strong"),f7r=o("rembert"),m7r=o(" \u2014 "),VU=a("a"),g7r=o("TFRemBertForMaskedLM"),h7r=o(" (RemBERT model)"),p7r=l(),O7=a("li"),bFe=a("strong"),u7r=o("roberta"),_7r=o(" \u2014 "),XU=a("a"),b7r=o("TFRobertaForMaskedLM"),v7r=o(" (RoBERTa model)"),F7r=l(),V7=a("li"),vFe=a("strong"),T7r=o("roformer"),M7r=o(" \u2014 "),zU=a("a"),E7r=o("TFRoFormerForMaskedLM"),C7r=o(" (RoFormer model)"),w7r=l(),X7=a("li"),FFe=a("strong"),A7r=o("tapas"),L7r=o(" \u2014 "),WU=a("a"),y7r=o("TFTapasForMaskedLM"),x7r=o(" (TAPAS model)"),$7r=l(),z7=a("li"),TFe=a("strong"),k7r=o("xlm"),S7r=o(" \u2014 "),QU=a("a"),R7r=o("TFXLMWithLMHeadModel"),P7r=o(" (XLM model)"),B7r=l(),W7=a("li"),MFe=a("strong"),I7r=o("xlm-roberta"),N7r=o(" \u2014 "),HU=a("a"),q7r=o("TFXLMRobertaForMaskedLM"),j7r=o(" (XLM-RoBERTa model)"),D7r=l(),F(Q7.$$.fragment),pOe=l(),hc=a("h2"),H7=a("a"),EFe=a("span"),F($9.$$.fragment),G7r=l(),CFe=a("span"),O7r=o("TFAutoModelForSeq2SeqLM"),uOe=l(),ar=a("div"),F(k9.$$.fragment),V7r=l(),pc=a("p"),X7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UU=a("a"),z7r=o("from_pretrained()"),W7r=o(" class method or the "),JU=a("a"),Q7r=o("from_config()"),H7r=o(` class
method.`),U7r=l(),S9=a("p"),J7r=o("This class cannot be instantiated directly using "),wFe=a("code"),Y7r=o("__init__()"),K7r=o(" (throws an error)."),Z7r=l(),Bt=a("div"),F(R9.$$.fragment),eMr=l(),AFe=a("p"),oMr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rMr=l(),uc=a("p"),tMr=o(`Note:
Loading a model from its configuration file does `),LFe=a("strong"),aMr=o("not"),nMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),sMr=o("from_pretrained()"),lMr=o(" to load the model weights."),iMr=l(),F(U7.$$.fragment),dMr=l(),Sr=a("div"),F(P9.$$.fragment),cMr=l(),yFe=a("p"),fMr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mMr=l(),cn=a("p"),gMr=o("The model class to instantiate is selected based on the "),xFe=a("code"),hMr=o("model_type"),pMr=o(` property of the config object (either
passed as an argument or loaded from `),$Fe=a("code"),uMr=o("pretrained_model_name_or_path"),_Mr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kFe=a("code"),bMr=o("pretrained_model_name_or_path"),vMr=o(":"),FMr=l(),ye=a("ul"),J7=a("li"),SFe=a("strong"),TMr=o("bart"),MMr=o(" \u2014 "),KU=a("a"),EMr=o("TFBartForConditionalGeneration"),CMr=o(" (BART model)"),wMr=l(),Y7=a("li"),RFe=a("strong"),AMr=o("blenderbot"),LMr=o(" \u2014 "),ZU=a("a"),yMr=o("TFBlenderbotForConditionalGeneration"),xMr=o(" (Blenderbot model)"),$Mr=l(),K7=a("li"),PFe=a("strong"),kMr=o("blenderbot-small"),SMr=o(" \u2014 "),eJ=a("a"),RMr=o("TFBlenderbotSmallForConditionalGeneration"),PMr=o(" (BlenderbotSmall model)"),BMr=l(),Z7=a("li"),BFe=a("strong"),IMr=o("encoder-decoder"),NMr=o(" \u2014 "),oJ=a("a"),qMr=o("TFEncoderDecoderModel"),jMr=o(" (Encoder decoder model)"),DMr=l(),eM=a("li"),IFe=a("strong"),GMr=o("led"),OMr=o(" \u2014 "),rJ=a("a"),VMr=o("TFLEDForConditionalGeneration"),XMr=o(" (LED model)"),zMr=l(),oM=a("li"),NFe=a("strong"),WMr=o("marian"),QMr=o(" \u2014 "),tJ=a("a"),HMr=o("TFMarianMTModel"),UMr=o(" (Marian model)"),JMr=l(),rM=a("li"),qFe=a("strong"),YMr=o("mbart"),KMr=o(" \u2014 "),aJ=a("a"),ZMr=o("TFMBartForConditionalGeneration"),e4r=o(" (mBART model)"),o4r=l(),tM=a("li"),jFe=a("strong"),r4r=o("mt5"),t4r=o(" \u2014 "),nJ=a("a"),a4r=o("TFMT5ForConditionalGeneration"),n4r=o(" (MT5 model)"),s4r=l(),aM=a("li"),DFe=a("strong"),l4r=o("pegasus"),i4r=o(" \u2014 "),sJ=a("a"),d4r=o("TFPegasusForConditionalGeneration"),c4r=o(" (Pegasus model)"),f4r=l(),nM=a("li"),GFe=a("strong"),m4r=o("t5"),g4r=o(" \u2014 "),lJ=a("a"),h4r=o("TFT5ForConditionalGeneration"),p4r=o(" (T5 model)"),u4r=l(),F(sM.$$.fragment),_Oe=l(),_c=a("h2"),lM=a("a"),OFe=a("span"),F(B9.$$.fragment),_4r=l(),VFe=a("span"),b4r=o("TFAutoModelForSequenceClassification"),bOe=l(),nr=a("div"),F(I9.$$.fragment),v4r=l(),bc=a("p"),F4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iJ=a("a"),T4r=o("from_pretrained()"),M4r=o(" class method or the "),dJ=a("a"),E4r=o("from_config()"),C4r=o(` class
method.`),w4r=l(),N9=a("p"),A4r=o("This class cannot be instantiated directly using "),XFe=a("code"),L4r=o("__init__()"),y4r=o(" (throws an error)."),x4r=l(),It=a("div"),F(q9.$$.fragment),$4r=l(),zFe=a("p"),k4r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),S4r=l(),vc=a("p"),R4r=o(`Note:
Loading a model from its configuration file does `),WFe=a("strong"),P4r=o("not"),B4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),I4r=o("from_pretrained()"),N4r=o(" to load the model weights."),q4r=l(),F(iM.$$.fragment),j4r=l(),Rr=a("div"),F(j9.$$.fragment),D4r=l(),QFe=a("p"),G4r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),O4r=l(),fn=a("p"),V4r=o("The model class to instantiate is selected based on the "),HFe=a("code"),X4r=o("model_type"),z4r=o(` property of the config object (either
passed as an argument or loaded from `),UFe=a("code"),W4r=o("pretrained_model_name_or_path"),Q4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=a("code"),H4r=o("pretrained_model_name_or_path"),U4r=o(":"),J4r=l(),te=a("ul"),dM=a("li"),YFe=a("strong"),Y4r=o("albert"),K4r=o(" \u2014 "),fJ=a("a"),Z4r=o("TFAlbertForSequenceClassification"),eEr=o(" (ALBERT model)"),oEr=l(),cM=a("li"),KFe=a("strong"),rEr=o("bert"),tEr=o(" \u2014 "),mJ=a("a"),aEr=o("TFBertForSequenceClassification"),nEr=o(" (BERT model)"),sEr=l(),fM=a("li"),ZFe=a("strong"),lEr=o("camembert"),iEr=o(" \u2014 "),gJ=a("a"),dEr=o("TFCamembertForSequenceClassification"),cEr=o(" (CamemBERT model)"),fEr=l(),mM=a("li"),e6e=a("strong"),mEr=o("convbert"),gEr=o(" \u2014 "),hJ=a("a"),hEr=o("TFConvBertForSequenceClassification"),pEr=o(" (ConvBERT model)"),uEr=l(),gM=a("li"),o6e=a("strong"),_Er=o("ctrl"),bEr=o(" \u2014 "),pJ=a("a"),vEr=o("TFCTRLForSequenceClassification"),FEr=o(" (CTRL model)"),TEr=l(),hM=a("li"),r6e=a("strong"),MEr=o("deberta"),EEr=o(" \u2014 "),uJ=a("a"),CEr=o("TFDebertaForSequenceClassification"),wEr=o(" (DeBERTa model)"),AEr=l(),pM=a("li"),t6e=a("strong"),LEr=o("deberta-v2"),yEr=o(" \u2014 "),_J=a("a"),xEr=o("TFDebertaV2ForSequenceClassification"),$Er=o(" (DeBERTa-v2 model)"),kEr=l(),uM=a("li"),a6e=a("strong"),SEr=o("distilbert"),REr=o(" \u2014 "),bJ=a("a"),PEr=o("TFDistilBertForSequenceClassification"),BEr=o(" (DistilBERT model)"),IEr=l(),_M=a("li"),n6e=a("strong"),NEr=o("electra"),qEr=o(" \u2014 "),vJ=a("a"),jEr=o("TFElectraForSequenceClassification"),DEr=o(" (ELECTRA model)"),GEr=l(),bM=a("li"),s6e=a("strong"),OEr=o("flaubert"),VEr=o(" \u2014 "),FJ=a("a"),XEr=o("TFFlaubertForSequenceClassification"),zEr=o(" (FlauBERT model)"),WEr=l(),vM=a("li"),l6e=a("strong"),QEr=o("funnel"),HEr=o(" \u2014 "),TJ=a("a"),UEr=o("TFFunnelForSequenceClassification"),JEr=o(" (Funnel Transformer model)"),YEr=l(),FM=a("li"),i6e=a("strong"),KEr=o("gpt2"),ZEr=o(" \u2014 "),MJ=a("a"),eCr=o("TFGPT2ForSequenceClassification"),oCr=o(" (OpenAI GPT-2 model)"),rCr=l(),TM=a("li"),d6e=a("strong"),tCr=o("gptj"),aCr=o(" \u2014 "),EJ=a("a"),nCr=o("TFGPTJForSequenceClassification"),sCr=o(" (GPT-J model)"),lCr=l(),MM=a("li"),c6e=a("strong"),iCr=o("layoutlm"),dCr=o(" \u2014 "),CJ=a("a"),cCr=o("TFLayoutLMForSequenceClassification"),fCr=o(" (LayoutLM model)"),mCr=l(),EM=a("li"),f6e=a("strong"),gCr=o("longformer"),hCr=o(" \u2014 "),wJ=a("a"),pCr=o("TFLongformerForSequenceClassification"),uCr=o(" (Longformer model)"),_Cr=l(),CM=a("li"),m6e=a("strong"),bCr=o("mobilebert"),vCr=o(" \u2014 "),AJ=a("a"),FCr=o("TFMobileBertForSequenceClassification"),TCr=o(" (MobileBERT model)"),MCr=l(),wM=a("li"),g6e=a("strong"),ECr=o("mpnet"),CCr=o(" \u2014 "),LJ=a("a"),wCr=o("TFMPNetForSequenceClassification"),ACr=o(" (MPNet model)"),LCr=l(),AM=a("li"),h6e=a("strong"),yCr=o("openai-gpt"),xCr=o(" \u2014 "),yJ=a("a"),$Cr=o("TFOpenAIGPTForSequenceClassification"),kCr=o(" (OpenAI GPT model)"),SCr=l(),LM=a("li"),p6e=a("strong"),RCr=o("rembert"),PCr=o(" \u2014 "),xJ=a("a"),BCr=o("TFRemBertForSequenceClassification"),ICr=o(" (RemBERT model)"),NCr=l(),yM=a("li"),u6e=a("strong"),qCr=o("roberta"),jCr=o(" \u2014 "),$J=a("a"),DCr=o("TFRobertaForSequenceClassification"),GCr=o(" (RoBERTa model)"),OCr=l(),xM=a("li"),_6e=a("strong"),VCr=o("roformer"),XCr=o(" \u2014 "),kJ=a("a"),zCr=o("TFRoFormerForSequenceClassification"),WCr=o(" (RoFormer model)"),QCr=l(),$M=a("li"),b6e=a("strong"),HCr=o("tapas"),UCr=o(" \u2014 "),SJ=a("a"),JCr=o("TFTapasForSequenceClassification"),YCr=o(" (TAPAS model)"),KCr=l(),kM=a("li"),v6e=a("strong"),ZCr=o("transfo-xl"),e5r=o(" \u2014 "),RJ=a("a"),o5r=o("TFTransfoXLForSequenceClassification"),r5r=o(" (Transformer-XL model)"),t5r=l(),SM=a("li"),F6e=a("strong"),a5r=o("xlm"),n5r=o(" \u2014 "),PJ=a("a"),s5r=o("TFXLMForSequenceClassification"),l5r=o(" (XLM model)"),i5r=l(),RM=a("li"),T6e=a("strong"),d5r=o("xlm-roberta"),c5r=o(" \u2014 "),BJ=a("a"),f5r=o("TFXLMRobertaForSequenceClassification"),m5r=o(" (XLM-RoBERTa model)"),g5r=l(),PM=a("li"),M6e=a("strong"),h5r=o("xlnet"),p5r=o(" \u2014 "),IJ=a("a"),u5r=o("TFXLNetForSequenceClassification"),_5r=o(" (XLNet model)"),b5r=l(),F(BM.$$.fragment),vOe=l(),Fc=a("h2"),IM=a("a"),E6e=a("span"),F(D9.$$.fragment),v5r=l(),C6e=a("span"),F5r=o("TFAutoModelForMultipleChoice"),FOe=l(),sr=a("div"),F(G9.$$.fragment),T5r=l(),Tc=a("p"),M5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NJ=a("a"),E5r=o("from_pretrained()"),C5r=o(" class method or the "),qJ=a("a"),w5r=o("from_config()"),A5r=o(` class
method.`),L5r=l(),O9=a("p"),y5r=o("This class cannot be instantiated directly using "),w6e=a("code"),x5r=o("__init__()"),$5r=o(" (throws an error)."),k5r=l(),Nt=a("div"),F(V9.$$.fragment),S5r=l(),A6e=a("p"),R5r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),P5r=l(),Mc=a("p"),B5r=o(`Note:
Loading a model from its configuration file does `),L6e=a("strong"),I5r=o("not"),N5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),q5r=o("from_pretrained()"),j5r=o(" to load the model weights."),D5r=l(),F(NM.$$.fragment),G5r=l(),Pr=a("div"),F(X9.$$.fragment),O5r=l(),y6e=a("p"),V5r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),X5r=l(),mn=a("p"),z5r=o("The model class to instantiate is selected based on the "),x6e=a("code"),W5r=o("model_type"),Q5r=o(` property of the config object (either
passed as an argument or loaded from `),$6e=a("code"),H5r=o("pretrained_model_name_or_path"),U5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k6e=a("code"),J5r=o("pretrained_model_name_or_path"),Y5r=o(":"),K5r=l(),ue=a("ul"),qM=a("li"),S6e=a("strong"),Z5r=o("albert"),ewr=o(" \u2014 "),DJ=a("a"),owr=o("TFAlbertForMultipleChoice"),rwr=o(" (ALBERT model)"),twr=l(),jM=a("li"),R6e=a("strong"),awr=o("bert"),nwr=o(" \u2014 "),GJ=a("a"),swr=o("TFBertForMultipleChoice"),lwr=o(" (BERT model)"),iwr=l(),DM=a("li"),P6e=a("strong"),dwr=o("camembert"),cwr=o(" \u2014 "),OJ=a("a"),fwr=o("TFCamembertForMultipleChoice"),mwr=o(" (CamemBERT model)"),gwr=l(),GM=a("li"),B6e=a("strong"),hwr=o("convbert"),pwr=o(" \u2014 "),VJ=a("a"),uwr=o("TFConvBertForMultipleChoice"),_wr=o(" (ConvBERT model)"),bwr=l(),OM=a("li"),I6e=a("strong"),vwr=o("distilbert"),Fwr=o(" \u2014 "),XJ=a("a"),Twr=o("TFDistilBertForMultipleChoice"),Mwr=o(" (DistilBERT model)"),Ewr=l(),VM=a("li"),N6e=a("strong"),Cwr=o("electra"),wwr=o(" \u2014 "),zJ=a("a"),Awr=o("TFElectraForMultipleChoice"),Lwr=o(" (ELECTRA model)"),ywr=l(),XM=a("li"),q6e=a("strong"),xwr=o("flaubert"),$wr=o(" \u2014 "),WJ=a("a"),kwr=o("TFFlaubertForMultipleChoice"),Swr=o(" (FlauBERT model)"),Rwr=l(),zM=a("li"),j6e=a("strong"),Pwr=o("funnel"),Bwr=o(" \u2014 "),QJ=a("a"),Iwr=o("TFFunnelForMultipleChoice"),Nwr=o(" (Funnel Transformer model)"),qwr=l(),WM=a("li"),D6e=a("strong"),jwr=o("longformer"),Dwr=o(" \u2014 "),HJ=a("a"),Gwr=o("TFLongformerForMultipleChoice"),Owr=o(" (Longformer model)"),Vwr=l(),QM=a("li"),G6e=a("strong"),Xwr=o("mobilebert"),zwr=o(" \u2014 "),UJ=a("a"),Wwr=o("TFMobileBertForMultipleChoice"),Qwr=o(" (MobileBERT model)"),Hwr=l(),HM=a("li"),O6e=a("strong"),Uwr=o("mpnet"),Jwr=o(" \u2014 "),JJ=a("a"),Ywr=o("TFMPNetForMultipleChoice"),Kwr=o(" (MPNet model)"),Zwr=l(),UM=a("li"),V6e=a("strong"),eAr=o("rembert"),oAr=o(" \u2014 "),YJ=a("a"),rAr=o("TFRemBertForMultipleChoice"),tAr=o(" (RemBERT model)"),aAr=l(),JM=a("li"),X6e=a("strong"),nAr=o("roberta"),sAr=o(" \u2014 "),KJ=a("a"),lAr=o("TFRobertaForMultipleChoice"),iAr=o(" (RoBERTa model)"),dAr=l(),YM=a("li"),z6e=a("strong"),cAr=o("roformer"),fAr=o(" \u2014 "),ZJ=a("a"),mAr=o("TFRoFormerForMultipleChoice"),gAr=o(" (RoFormer model)"),hAr=l(),KM=a("li"),W6e=a("strong"),pAr=o("xlm"),uAr=o(" \u2014 "),eY=a("a"),_Ar=o("TFXLMForMultipleChoice"),bAr=o(" (XLM model)"),vAr=l(),ZM=a("li"),Q6e=a("strong"),FAr=o("xlm-roberta"),TAr=o(" \u2014 "),oY=a("a"),MAr=o("TFXLMRobertaForMultipleChoice"),EAr=o(" (XLM-RoBERTa model)"),CAr=l(),e4=a("li"),H6e=a("strong"),wAr=o("xlnet"),AAr=o(" \u2014 "),rY=a("a"),LAr=o("TFXLNetForMultipleChoice"),yAr=o(" (XLNet model)"),xAr=l(),F(o4.$$.fragment),TOe=l(),Ec=a("h2"),r4=a("a"),U6e=a("span"),F(z9.$$.fragment),$Ar=l(),J6e=a("span"),kAr=o("TFAutoModelForNextSentencePrediction"),MOe=l(),lr=a("div"),F(W9.$$.fragment),SAr=l(),Cc=a("p"),RAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tY=a("a"),PAr=o("from_pretrained()"),BAr=o(" class method or the "),aY=a("a"),IAr=o("from_config()"),NAr=o(` class
method.`),qAr=l(),Q9=a("p"),jAr=o("This class cannot be instantiated directly using "),Y6e=a("code"),DAr=o("__init__()"),GAr=o(" (throws an error)."),OAr=l(),qt=a("div"),F(H9.$$.fragment),VAr=l(),K6e=a("p"),XAr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zAr=l(),wc=a("p"),WAr=o(`Note:
Loading a model from its configuration file does `),Z6e=a("strong"),QAr=o("not"),HAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=a("a"),UAr=o("from_pretrained()"),JAr=o(" to load the model weights."),YAr=l(),F(t4.$$.fragment),KAr=l(),Br=a("div"),F(U9.$$.fragment),ZAr=l(),eTe=a("p"),eLr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oLr=l(),gn=a("p"),rLr=o("The model class to instantiate is selected based on the "),oTe=a("code"),tLr=o("model_type"),aLr=o(` property of the config object (either
passed as an argument or loaded from `),rTe=a("code"),nLr=o("pretrained_model_name_or_path"),sLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=a("code"),lLr=o("pretrained_model_name_or_path"),iLr=o(":"),dLr=l(),J9=a("ul"),a4=a("li"),aTe=a("strong"),cLr=o("bert"),fLr=o(" \u2014 "),sY=a("a"),mLr=o("TFBertForNextSentencePrediction"),gLr=o(" (BERT model)"),hLr=l(),n4=a("li"),nTe=a("strong"),pLr=o("mobilebert"),uLr=o(" \u2014 "),lY=a("a"),_Lr=o("TFMobileBertForNextSentencePrediction"),bLr=o(" (MobileBERT model)"),vLr=l(),F(s4.$$.fragment),EOe=l(),Ac=a("h2"),l4=a("a"),sTe=a("span"),F(Y9.$$.fragment),FLr=l(),lTe=a("span"),TLr=o("TFAutoModelForTableQuestionAnswering"),COe=l(),ir=a("div"),F(K9.$$.fragment),MLr=l(),Lc=a("p"),ELr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iY=a("a"),CLr=o("from_pretrained()"),wLr=o(" class method or the "),dY=a("a"),ALr=o("from_config()"),LLr=o(` class
method.`),yLr=l(),Z9=a("p"),xLr=o("This class cannot be instantiated directly using "),iTe=a("code"),$Lr=o("__init__()"),kLr=o(" (throws an error)."),SLr=l(),jt=a("div"),F(ex.$$.fragment),RLr=l(),dTe=a("p"),PLr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),BLr=l(),yc=a("p"),ILr=o(`Note:
Loading a model from its configuration file does `),cTe=a("strong"),NLr=o("not"),qLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=a("a"),jLr=o("from_pretrained()"),DLr=o(" to load the model weights."),GLr=l(),F(i4.$$.fragment),OLr=l(),Ir=a("div"),F(ox.$$.fragment),VLr=l(),fTe=a("p"),XLr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zLr=l(),hn=a("p"),WLr=o("The model class to instantiate is selected based on the "),mTe=a("code"),QLr=o("model_type"),HLr=o(` property of the config object (either
passed as an argument or loaded from `),gTe=a("code"),ULr=o("pretrained_model_name_or_path"),JLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hTe=a("code"),YLr=o("pretrained_model_name_or_path"),KLr=o(":"),ZLr=l(),pTe=a("ul"),d4=a("li"),uTe=a("strong"),eyr=o("tapas"),oyr=o(" \u2014 "),fY=a("a"),ryr=o("TFTapasForQuestionAnswering"),tyr=o(" (TAPAS model)"),ayr=l(),F(c4.$$.fragment),wOe=l(),xc=a("h2"),f4=a("a"),_Te=a("span"),F(rx.$$.fragment),nyr=l(),bTe=a("span"),syr=o("TFAutoModelForTokenClassification"),AOe=l(),dr=a("div"),F(tx.$$.fragment),lyr=l(),$c=a("p"),iyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mY=a("a"),dyr=o("from_pretrained()"),cyr=o(" class method or the "),gY=a("a"),fyr=o("from_config()"),myr=o(` class
method.`),gyr=l(),ax=a("p"),hyr=o("This class cannot be instantiated directly using "),vTe=a("code"),pyr=o("__init__()"),uyr=o(" (throws an error)."),_yr=l(),Dt=a("div"),F(nx.$$.fragment),byr=l(),FTe=a("p"),vyr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Fyr=l(),kc=a("p"),Tyr=o(`Note:
Loading a model from its configuration file does `),TTe=a("strong"),Myr=o("not"),Eyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=a("a"),Cyr=o("from_pretrained()"),wyr=o(" to load the model weights."),Ayr=l(),F(m4.$$.fragment),Lyr=l(),Nr=a("div"),F(sx.$$.fragment),yyr=l(),MTe=a("p"),xyr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$yr=l(),pn=a("p"),kyr=o("The model class to instantiate is selected based on the "),ETe=a("code"),Syr=o("model_type"),Ryr=o(` property of the config object (either
passed as an argument or loaded from `),CTe=a("code"),Pyr=o("pretrained_model_name_or_path"),Byr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=a("code"),Iyr=o("pretrained_model_name_or_path"),Nyr=o(":"),qyr=l(),de=a("ul"),g4=a("li"),ATe=a("strong"),jyr=o("albert"),Dyr=o(" \u2014 "),pY=a("a"),Gyr=o("TFAlbertForTokenClassification"),Oyr=o(" (ALBERT model)"),Vyr=l(),h4=a("li"),LTe=a("strong"),Xyr=o("bert"),zyr=o(" \u2014 "),uY=a("a"),Wyr=o("TFBertForTokenClassification"),Qyr=o(" (BERT model)"),Hyr=l(),p4=a("li"),yTe=a("strong"),Uyr=o("camembert"),Jyr=o(" \u2014 "),_Y=a("a"),Yyr=o("TFCamembertForTokenClassification"),Kyr=o(" (CamemBERT model)"),Zyr=l(),u4=a("li"),xTe=a("strong"),e8r=o("convbert"),o8r=o(" \u2014 "),bY=a("a"),r8r=o("TFConvBertForTokenClassification"),t8r=o(" (ConvBERT model)"),a8r=l(),_4=a("li"),$Te=a("strong"),n8r=o("deberta"),s8r=o(" \u2014 "),vY=a("a"),l8r=o("TFDebertaForTokenClassification"),i8r=o(" (DeBERTa model)"),d8r=l(),b4=a("li"),kTe=a("strong"),c8r=o("deberta-v2"),f8r=o(" \u2014 "),FY=a("a"),m8r=o("TFDebertaV2ForTokenClassification"),g8r=o(" (DeBERTa-v2 model)"),h8r=l(),v4=a("li"),STe=a("strong"),p8r=o("distilbert"),u8r=o(" \u2014 "),TY=a("a"),_8r=o("TFDistilBertForTokenClassification"),b8r=o(" (DistilBERT model)"),v8r=l(),F4=a("li"),RTe=a("strong"),F8r=o("electra"),T8r=o(" \u2014 "),MY=a("a"),M8r=o("TFElectraForTokenClassification"),E8r=o(" (ELECTRA model)"),C8r=l(),T4=a("li"),PTe=a("strong"),w8r=o("flaubert"),A8r=o(" \u2014 "),EY=a("a"),L8r=o("TFFlaubertForTokenClassification"),y8r=o(" (FlauBERT model)"),x8r=l(),M4=a("li"),BTe=a("strong"),$8r=o("funnel"),k8r=o(" \u2014 "),CY=a("a"),S8r=o("TFFunnelForTokenClassification"),R8r=o(" (Funnel Transformer model)"),P8r=l(),E4=a("li"),ITe=a("strong"),B8r=o("layoutlm"),I8r=o(" \u2014 "),wY=a("a"),N8r=o("TFLayoutLMForTokenClassification"),q8r=o(" (LayoutLM model)"),j8r=l(),C4=a("li"),NTe=a("strong"),D8r=o("longformer"),G8r=o(" \u2014 "),AY=a("a"),O8r=o("TFLongformerForTokenClassification"),V8r=o(" (Longformer model)"),X8r=l(),w4=a("li"),qTe=a("strong"),z8r=o("mobilebert"),W8r=o(" \u2014 "),LY=a("a"),Q8r=o("TFMobileBertForTokenClassification"),H8r=o(" (MobileBERT model)"),U8r=l(),A4=a("li"),jTe=a("strong"),J8r=o("mpnet"),Y8r=o(" \u2014 "),yY=a("a"),K8r=o("TFMPNetForTokenClassification"),Z8r=o(" (MPNet model)"),e9r=l(),L4=a("li"),DTe=a("strong"),o9r=o("rembert"),r9r=o(" \u2014 "),xY=a("a"),t9r=o("TFRemBertForTokenClassification"),a9r=o(" (RemBERT model)"),n9r=l(),y4=a("li"),GTe=a("strong"),s9r=o("roberta"),l9r=o(" \u2014 "),$Y=a("a"),i9r=o("TFRobertaForTokenClassification"),d9r=o(" (RoBERTa model)"),c9r=l(),x4=a("li"),OTe=a("strong"),f9r=o("roformer"),m9r=o(" \u2014 "),kY=a("a"),g9r=o("TFRoFormerForTokenClassification"),h9r=o(" (RoFormer model)"),p9r=l(),$4=a("li"),VTe=a("strong"),u9r=o("xlm"),_9r=o(" \u2014 "),SY=a("a"),b9r=o("TFXLMForTokenClassification"),v9r=o(" (XLM model)"),F9r=l(),k4=a("li"),XTe=a("strong"),T9r=o("xlm-roberta"),M9r=o(" \u2014 "),RY=a("a"),E9r=o("TFXLMRobertaForTokenClassification"),C9r=o(" (XLM-RoBERTa model)"),w9r=l(),S4=a("li"),zTe=a("strong"),A9r=o("xlnet"),L9r=o(" \u2014 "),PY=a("a"),y9r=o("TFXLNetForTokenClassification"),x9r=o(" (XLNet model)"),$9r=l(),F(R4.$$.fragment),LOe=l(),Sc=a("h2"),P4=a("a"),WTe=a("span"),F(lx.$$.fragment),k9r=l(),QTe=a("span"),S9r=o("TFAutoModelForQuestionAnswering"),yOe=l(),cr=a("div"),F(ix.$$.fragment),R9r=l(),Rc=a("p"),P9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BY=a("a"),B9r=o("from_pretrained()"),I9r=o(" class method or the "),IY=a("a"),N9r=o("from_config()"),q9r=o(` class
method.`),j9r=l(),dx=a("p"),D9r=o("This class cannot be instantiated directly using "),HTe=a("code"),G9r=o("__init__()"),O9r=o(" (throws an error)."),V9r=l(),Gt=a("div"),F(cx.$$.fragment),X9r=l(),UTe=a("p"),z9r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),W9r=l(),Pc=a("p"),Q9r=o(`Note:
Loading a model from its configuration file does `),JTe=a("strong"),H9r=o("not"),U9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=a("a"),J9r=o("from_pretrained()"),Y9r=o(" to load the model weights."),K9r=l(),F(B4.$$.fragment),Z9r=l(),qr=a("div"),F(fx.$$.fragment),exr=l(),YTe=a("p"),oxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rxr=l(),un=a("p"),txr=o("The model class to instantiate is selected based on the "),KTe=a("code"),axr=o("model_type"),nxr=o(` property of the config object (either
passed as an argument or loaded from `),ZTe=a("code"),sxr=o("pretrained_model_name_or_path"),lxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e7e=a("code"),ixr=o("pretrained_model_name_or_path"),dxr=o(":"),cxr=l(),ce=a("ul"),I4=a("li"),o7e=a("strong"),fxr=o("albert"),mxr=o(" \u2014 "),qY=a("a"),gxr=o("TFAlbertForQuestionAnswering"),hxr=o(" (ALBERT model)"),pxr=l(),N4=a("li"),r7e=a("strong"),uxr=o("bert"),_xr=o(" \u2014 "),jY=a("a"),bxr=o("TFBertForQuestionAnswering"),vxr=o(" (BERT model)"),Fxr=l(),q4=a("li"),t7e=a("strong"),Txr=o("camembert"),Mxr=o(" \u2014 "),DY=a("a"),Exr=o("TFCamembertForQuestionAnswering"),Cxr=o(" (CamemBERT model)"),wxr=l(),j4=a("li"),a7e=a("strong"),Axr=o("convbert"),Lxr=o(" \u2014 "),GY=a("a"),yxr=o("TFConvBertForQuestionAnswering"),xxr=o(" (ConvBERT model)"),$xr=l(),D4=a("li"),n7e=a("strong"),kxr=o("deberta"),Sxr=o(" \u2014 "),OY=a("a"),Rxr=o("TFDebertaForQuestionAnswering"),Pxr=o(" (DeBERTa model)"),Bxr=l(),G4=a("li"),s7e=a("strong"),Ixr=o("deberta-v2"),Nxr=o(" \u2014 "),VY=a("a"),qxr=o("TFDebertaV2ForQuestionAnswering"),jxr=o(" (DeBERTa-v2 model)"),Dxr=l(),O4=a("li"),l7e=a("strong"),Gxr=o("distilbert"),Oxr=o(" \u2014 "),XY=a("a"),Vxr=o("TFDistilBertForQuestionAnswering"),Xxr=o(" (DistilBERT model)"),zxr=l(),V4=a("li"),i7e=a("strong"),Wxr=o("electra"),Qxr=o(" \u2014 "),zY=a("a"),Hxr=o("TFElectraForQuestionAnswering"),Uxr=o(" (ELECTRA model)"),Jxr=l(),X4=a("li"),d7e=a("strong"),Yxr=o("flaubert"),Kxr=o(" \u2014 "),WY=a("a"),Zxr=o("TFFlaubertForQuestionAnsweringSimple"),e$r=o(" (FlauBERT model)"),o$r=l(),z4=a("li"),c7e=a("strong"),r$r=o("funnel"),t$r=o(" \u2014 "),QY=a("a"),a$r=o("TFFunnelForQuestionAnswering"),n$r=o(" (Funnel Transformer model)"),s$r=l(),W4=a("li"),f7e=a("strong"),l$r=o("gptj"),i$r=o(" \u2014 "),HY=a("a"),d$r=o("TFGPTJForQuestionAnswering"),c$r=o(" (GPT-J model)"),f$r=l(),Q4=a("li"),m7e=a("strong"),m$r=o("longformer"),g$r=o(" \u2014 "),UY=a("a"),h$r=o("TFLongformerForQuestionAnswering"),p$r=o(" (Longformer model)"),u$r=l(),H4=a("li"),g7e=a("strong"),_$r=o("mobilebert"),b$r=o(" \u2014 "),JY=a("a"),v$r=o("TFMobileBertForQuestionAnswering"),F$r=o(" (MobileBERT model)"),T$r=l(),U4=a("li"),h7e=a("strong"),M$r=o("mpnet"),E$r=o(" \u2014 "),YY=a("a"),C$r=o("TFMPNetForQuestionAnswering"),w$r=o(" (MPNet model)"),A$r=l(),J4=a("li"),p7e=a("strong"),L$r=o("rembert"),y$r=o(" \u2014 "),KY=a("a"),x$r=o("TFRemBertForQuestionAnswering"),$$r=o(" (RemBERT model)"),k$r=l(),Y4=a("li"),u7e=a("strong"),S$r=o("roberta"),R$r=o(" \u2014 "),ZY=a("a"),P$r=o("TFRobertaForQuestionAnswering"),B$r=o(" (RoBERTa model)"),I$r=l(),K4=a("li"),_7e=a("strong"),N$r=o("roformer"),q$r=o(" \u2014 "),eK=a("a"),j$r=o("TFRoFormerForQuestionAnswering"),D$r=o(" (RoFormer model)"),G$r=l(),Z4=a("li"),b7e=a("strong"),O$r=o("xlm"),V$r=o(" \u2014 "),oK=a("a"),X$r=o("TFXLMForQuestionAnsweringSimple"),z$r=o(" (XLM model)"),W$r=l(),eE=a("li"),v7e=a("strong"),Q$r=o("xlm-roberta"),H$r=o(" \u2014 "),rK=a("a"),U$r=o("TFXLMRobertaForQuestionAnswering"),J$r=o(" (XLM-RoBERTa model)"),Y$r=l(),oE=a("li"),F7e=a("strong"),K$r=o("xlnet"),Z$r=o(" \u2014 "),tK=a("a"),ekr=o("TFXLNetForQuestionAnsweringSimple"),okr=o(" (XLNet model)"),rkr=l(),F(rE.$$.fragment),xOe=l(),Bc=a("h2"),tE=a("a"),T7e=a("span"),F(mx.$$.fragment),tkr=l(),M7e=a("span"),akr=o("TFAutoModelForVision2Seq"),$Oe=l(),fr=a("div"),F(gx.$$.fragment),nkr=l(),Ic=a("p"),skr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aK=a("a"),lkr=o("from_pretrained()"),ikr=o(" class method or the "),nK=a("a"),dkr=o("from_config()"),ckr=o(` class
method.`),fkr=l(),hx=a("p"),mkr=o("This class cannot be instantiated directly using "),E7e=a("code"),gkr=o("__init__()"),hkr=o(" (throws an error)."),pkr=l(),Ot=a("div"),F(px.$$.fragment),ukr=l(),C7e=a("p"),_kr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bkr=l(),Nc=a("p"),vkr=o(`Note:
Loading a model from its configuration file does `),w7e=a("strong"),Fkr=o("not"),Tkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=a("a"),Mkr=o("from_pretrained()"),Ekr=o(" to load the model weights."),Ckr=l(),F(aE.$$.fragment),wkr=l(),jr=a("div"),F(ux.$$.fragment),Akr=l(),A7e=a("p"),Lkr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ykr=l(),_n=a("p"),xkr=o("The model class to instantiate is selected based on the "),L7e=a("code"),$kr=o("model_type"),kkr=o(` property of the config object (either
passed as an argument or loaded from `),y7e=a("code"),Skr=o("pretrained_model_name_or_path"),Rkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x7e=a("code"),Pkr=o("pretrained_model_name_or_path"),Bkr=o(":"),Ikr=l(),$7e=a("ul"),nE=a("li"),k7e=a("strong"),Nkr=o("vision-encoder-decoder"),qkr=o(" \u2014 "),lK=a("a"),jkr=o("TFVisionEncoderDecoderModel"),Dkr=o(" (Vision Encoder decoder model)"),Gkr=l(),F(sE.$$.fragment),kOe=l(),qc=a("h2"),lE=a("a"),S7e=a("span"),F(_x.$$.fragment),Okr=l(),R7e=a("span"),Vkr=o("TFAutoModelForSpeechSeq2Seq"),SOe=l(),mr=a("div"),F(bx.$$.fragment),Xkr=l(),jc=a("p"),zkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),iK=a("a"),Wkr=o("from_pretrained()"),Qkr=o(" class method or the "),dK=a("a"),Hkr=o("from_config()"),Ukr=o(` class
method.`),Jkr=l(),vx=a("p"),Ykr=o("This class cannot be instantiated directly using "),P7e=a("code"),Kkr=o("__init__()"),Zkr=o(" (throws an error)."),eSr=l(),Vt=a("div"),F(Fx.$$.fragment),oSr=l(),B7e=a("p"),rSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tSr=l(),Dc=a("p"),aSr=o(`Note:
Loading a model from its configuration file does `),I7e=a("strong"),nSr=o("not"),sSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=a("a"),lSr=o("from_pretrained()"),iSr=o(" to load the model weights."),dSr=l(),F(iE.$$.fragment),cSr=l(),Dr=a("div"),F(Tx.$$.fragment),fSr=l(),N7e=a("p"),mSr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),gSr=l(),bn=a("p"),hSr=o("The model class to instantiate is selected based on the "),q7e=a("code"),pSr=o("model_type"),uSr=o(` property of the config object (either
passed as an argument or loaded from `),j7e=a("code"),_Sr=o("pretrained_model_name_or_path"),bSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D7e=a("code"),vSr=o("pretrained_model_name_or_path"),FSr=o(":"),TSr=l(),G7e=a("ul"),dE=a("li"),O7e=a("strong"),MSr=o("speech_to_text"),ESr=o(" \u2014 "),fK=a("a"),CSr=o("TFSpeech2TextForConditionalGeneration"),wSr=o(" (Speech2Text model)"),ASr=l(),F(cE.$$.fragment),ROe=l(),Gc=a("h2"),fE=a("a"),V7e=a("span"),F(Mx.$$.fragment),LSr=l(),X7e=a("span"),ySr=o("FlaxAutoModel"),POe=l(),gr=a("div"),F(Ex.$$.fragment),xSr=l(),Oc=a("p"),$Sr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mK=a("a"),kSr=o("from_pretrained()"),SSr=o(" class method or the "),gK=a("a"),RSr=o("from_config()"),PSr=o(` class
method.`),BSr=l(),Cx=a("p"),ISr=o("This class cannot be instantiated directly using "),z7e=a("code"),NSr=o("__init__()"),qSr=o(" (throws an error)."),jSr=l(),Xt=a("div"),F(wx.$$.fragment),DSr=l(),W7e=a("p"),GSr=o("Instantiates one of the base model classes of the library from a configuration."),OSr=l(),Vc=a("p"),VSr=o(`Note:
Loading a model from its configuration file does `),Q7e=a("strong"),XSr=o("not"),zSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("a"),WSr=o("from_pretrained()"),QSr=o(" to load the model weights."),HSr=l(),F(mE.$$.fragment),USr=l(),Gr=a("div"),F(Ax.$$.fragment),JSr=l(),H7e=a("p"),YSr=o("Instantiate one of the base model classes of the library from a pretrained model."),KSr=l(),vn=a("p"),ZSr=o("The model class to instantiate is selected based on the "),U7e=a("code"),eRr=o("model_type"),oRr=o(` property of the config object (either
passed as an argument or loaded from `),J7e=a("code"),rRr=o("pretrained_model_name_or_path"),tRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=a("code"),aRr=o("pretrained_model_name_or_path"),nRr=o(":"),sRr=l(),oe=a("ul"),gE=a("li"),K7e=a("strong"),lRr=o("albert"),iRr=o(" \u2014 "),pK=a("a"),dRr=o("FlaxAlbertModel"),cRr=o(" (ALBERT model)"),fRr=l(),hE=a("li"),Z7e=a("strong"),mRr=o("bart"),gRr=o(" \u2014 "),uK=a("a"),hRr=o("FlaxBartModel"),pRr=o(" (BART model)"),uRr=l(),pE=a("li"),eMe=a("strong"),_Rr=o("beit"),bRr=o(" \u2014 "),_K=a("a"),vRr=o("FlaxBeitModel"),FRr=o(" (BEiT model)"),TRr=l(),uE=a("li"),oMe=a("strong"),MRr=o("bert"),ERr=o(" \u2014 "),bK=a("a"),CRr=o("FlaxBertModel"),wRr=o(" (BERT model)"),ARr=l(),_E=a("li"),rMe=a("strong"),LRr=o("big_bird"),yRr=o(" \u2014 "),vK=a("a"),xRr=o("FlaxBigBirdModel"),$Rr=o(" (BigBird model)"),kRr=l(),bE=a("li"),tMe=a("strong"),SRr=o("blenderbot"),RRr=o(" \u2014 "),FK=a("a"),PRr=o("FlaxBlenderbotModel"),BRr=o(" (Blenderbot model)"),IRr=l(),vE=a("li"),aMe=a("strong"),NRr=o("blenderbot-small"),qRr=o(" \u2014 "),TK=a("a"),jRr=o("FlaxBlenderbotSmallModel"),DRr=o(" (BlenderbotSmall model)"),GRr=l(),FE=a("li"),nMe=a("strong"),ORr=o("clip"),VRr=o(" \u2014 "),MK=a("a"),XRr=o("FlaxCLIPModel"),zRr=o(" (CLIP model)"),WRr=l(),TE=a("li"),sMe=a("strong"),QRr=o("distilbert"),HRr=o(" \u2014 "),EK=a("a"),URr=o("FlaxDistilBertModel"),JRr=o(" (DistilBERT model)"),YRr=l(),ME=a("li"),lMe=a("strong"),KRr=o("electra"),ZRr=o(" \u2014 "),CK=a("a"),ePr=o("FlaxElectraModel"),oPr=o(" (ELECTRA model)"),rPr=l(),EE=a("li"),iMe=a("strong"),tPr=o("gpt2"),aPr=o(" \u2014 "),wK=a("a"),nPr=o("FlaxGPT2Model"),sPr=o(" (OpenAI GPT-2 model)"),lPr=l(),CE=a("li"),dMe=a("strong"),iPr=o("gpt_neo"),dPr=o(" \u2014 "),AK=a("a"),cPr=o("FlaxGPTNeoModel"),fPr=o(" (GPT Neo model)"),mPr=l(),wE=a("li"),cMe=a("strong"),gPr=o("gptj"),hPr=o(" \u2014 "),LK=a("a"),pPr=o("FlaxGPTJModel"),uPr=o(" (GPT-J model)"),_Pr=l(),AE=a("li"),fMe=a("strong"),bPr=o("longt5"),vPr=o(" \u2014 "),yK=a("a"),FPr=o("FlaxLongT5Model"),TPr=o(" (LongT5 model)"),MPr=l(),LE=a("li"),mMe=a("strong"),EPr=o("marian"),CPr=o(" \u2014 "),xK=a("a"),wPr=o("FlaxMarianModel"),APr=o(" (Marian model)"),LPr=l(),yE=a("li"),gMe=a("strong"),yPr=o("mbart"),xPr=o(" \u2014 "),$K=a("a"),$Pr=o("FlaxMBartModel"),kPr=o(" (mBART model)"),SPr=l(),xE=a("li"),hMe=a("strong"),RPr=o("mt5"),PPr=o(" \u2014 "),kK=a("a"),BPr=o("FlaxMT5Model"),IPr=o(" (MT5 model)"),NPr=l(),$E=a("li"),pMe=a("strong"),qPr=o("opt"),jPr=o(" \u2014 "),SK=a("a"),DPr=o("FlaxOPTModel"),GPr=o(" (OPT model)"),OPr=l(),kE=a("li"),uMe=a("strong"),VPr=o("pegasus"),XPr=o(" \u2014 "),RK=a("a"),zPr=o("FlaxPegasusModel"),WPr=o(" (Pegasus model)"),QPr=l(),SE=a("li"),_Me=a("strong"),HPr=o("roberta"),UPr=o(" \u2014 "),PK=a("a"),JPr=o("FlaxRobertaModel"),YPr=o(" (RoBERTa model)"),KPr=l(),RE=a("li"),bMe=a("strong"),ZPr=o("roformer"),eBr=o(" \u2014 "),BK=a("a"),oBr=o("FlaxRoFormerModel"),rBr=o(" (RoFormer model)"),tBr=l(),PE=a("li"),vMe=a("strong"),aBr=o("t5"),nBr=o(" \u2014 "),IK=a("a"),sBr=o("FlaxT5Model"),lBr=o(" (T5 model)"),iBr=l(),BE=a("li"),FMe=a("strong"),dBr=o("vision-text-dual-encoder"),cBr=o(" \u2014 "),NK=a("a"),fBr=o("FlaxVisionTextDualEncoderModel"),mBr=o(" (VisionTextDualEncoder model)"),gBr=l(),IE=a("li"),TMe=a("strong"),hBr=o("vit"),pBr=o(" \u2014 "),qK=a("a"),uBr=o("FlaxViTModel"),_Br=o(" (ViT model)"),bBr=l(),NE=a("li"),MMe=a("strong"),vBr=o("wav2vec2"),FBr=o(" \u2014 "),jK=a("a"),TBr=o("FlaxWav2Vec2Model"),MBr=o(" (Wav2Vec2 model)"),EBr=l(),qE=a("li"),EMe=a("strong"),CBr=o("xglm"),wBr=o(" \u2014 "),DK=a("a"),ABr=o("FlaxXGLMModel"),LBr=o(" (XGLM model)"),yBr=l(),jE=a("li"),CMe=a("strong"),xBr=o("xlm-roberta"),$Br=o(" \u2014 "),GK=a("a"),kBr=o("FlaxXLMRobertaModel"),SBr=o(" (XLM-RoBERTa model)"),RBr=l(),F(DE.$$.fragment),BOe=l(),Xc=a("h2"),GE=a("a"),wMe=a("span"),F(Lx.$$.fragment),PBr=l(),AMe=a("span"),BBr=o("FlaxAutoModelForCausalLM"),IOe=l(),hr=a("div"),F(yx.$$.fragment),IBr=l(),zc=a("p"),NBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OK=a("a"),qBr=o("from_pretrained()"),jBr=o(" class method or the "),VK=a("a"),DBr=o("from_config()"),GBr=o(` class
method.`),OBr=l(),xx=a("p"),VBr=o("This class cannot be instantiated directly using "),LMe=a("code"),XBr=o("__init__()"),zBr=o(" (throws an error)."),WBr=l(),zt=a("div"),F($x.$$.fragment),QBr=l(),yMe=a("p"),HBr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),UBr=l(),Wc=a("p"),JBr=o(`Note:
Loading a model from its configuration file does `),xMe=a("strong"),YBr=o("not"),KBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=a("a"),ZBr=o("from_pretrained()"),eIr=o(" to load the model weights."),oIr=l(),F(OE.$$.fragment),rIr=l(),Or=a("div"),F(kx.$$.fragment),tIr=l(),$Me=a("p"),aIr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nIr=l(),Fn=a("p"),sIr=o("The model class to instantiate is selected based on the "),kMe=a("code"),lIr=o("model_type"),iIr=o(` property of the config object (either
passed as an argument or loaded from `),SMe=a("code"),dIr=o("pretrained_model_name_or_path"),cIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RMe=a("code"),fIr=o("pretrained_model_name_or_path"),mIr=o(":"),gIr=l(),xe=a("ul"),VE=a("li"),PMe=a("strong"),hIr=o("bart"),pIr=o(" \u2014 "),zK=a("a"),uIr=o("FlaxBartForCausalLM"),_Ir=o(" (BART model)"),bIr=l(),XE=a("li"),BMe=a("strong"),vIr=o("bert"),FIr=o(" \u2014 "),WK=a("a"),TIr=o("FlaxBertForCausalLM"),MIr=o(" (BERT model)"),EIr=l(),zE=a("li"),IMe=a("strong"),CIr=o("big_bird"),wIr=o(" \u2014 "),QK=a("a"),AIr=o("FlaxBigBirdForCausalLM"),LIr=o(" (BigBird model)"),yIr=l(),WE=a("li"),NMe=a("strong"),xIr=o("electra"),$Ir=o(" \u2014 "),HK=a("a"),kIr=o("FlaxElectraForCausalLM"),SIr=o(" (ELECTRA model)"),RIr=l(),QE=a("li"),qMe=a("strong"),PIr=o("gpt2"),BIr=o(" \u2014 "),UK=a("a"),IIr=o("FlaxGPT2LMHeadModel"),NIr=o(" (OpenAI GPT-2 model)"),qIr=l(),HE=a("li"),jMe=a("strong"),jIr=o("gpt_neo"),DIr=o(" \u2014 "),JK=a("a"),GIr=o("FlaxGPTNeoForCausalLM"),OIr=o(" (GPT Neo model)"),VIr=l(),UE=a("li"),DMe=a("strong"),XIr=o("gptj"),zIr=o(" \u2014 "),YK=a("a"),WIr=o("FlaxGPTJForCausalLM"),QIr=o(" (GPT-J model)"),HIr=l(),JE=a("li"),GMe=a("strong"),UIr=o("opt"),JIr=o(" \u2014 "),KK=a("a"),YIr=o("FlaxOPTForCausalLM"),KIr=o(" (OPT model)"),ZIr=l(),YE=a("li"),OMe=a("strong"),eNr=o("roberta"),oNr=o(" \u2014 "),ZK=a("a"),rNr=o("FlaxRobertaForCausalLM"),tNr=o(" (RoBERTa model)"),aNr=l(),KE=a("li"),VMe=a("strong"),nNr=o("xglm"),sNr=o(" \u2014 "),eZ=a("a"),lNr=o("FlaxXGLMForCausalLM"),iNr=o(" (XGLM model)"),dNr=l(),F(ZE.$$.fragment),NOe=l(),Qc=a("h2"),eC=a("a"),XMe=a("span"),F(Sx.$$.fragment),cNr=l(),zMe=a("span"),fNr=o("FlaxAutoModelForPreTraining"),qOe=l(),pr=a("div"),F(Rx.$$.fragment),mNr=l(),Hc=a("p"),gNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oZ=a("a"),hNr=o("from_pretrained()"),pNr=o(" class method or the "),rZ=a("a"),uNr=o("from_config()"),_Nr=o(` class
method.`),bNr=l(),Px=a("p"),vNr=o("This class cannot be instantiated directly using "),WMe=a("code"),FNr=o("__init__()"),TNr=o(" (throws an error)."),MNr=l(),Wt=a("div"),F(Bx.$$.fragment),ENr=l(),QMe=a("p"),CNr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wNr=l(),Uc=a("p"),ANr=o(`Note:
Loading a model from its configuration file does `),HMe=a("strong"),LNr=o("not"),yNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=a("a"),xNr=o("from_pretrained()"),$Nr=o(" to load the model weights."),kNr=l(),F(oC.$$.fragment),SNr=l(),Vr=a("div"),F(Ix.$$.fragment),RNr=l(),UMe=a("p"),PNr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),BNr=l(),Tn=a("p"),INr=o("The model class to instantiate is selected based on the "),JMe=a("code"),NNr=o("model_type"),qNr=o(` property of the config object (either
passed as an argument or loaded from `),YMe=a("code"),jNr=o("pretrained_model_name_or_path"),DNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KMe=a("code"),GNr=o("pretrained_model_name_or_path"),ONr=o(":"),VNr=l(),Ee=a("ul"),rC=a("li"),ZMe=a("strong"),XNr=o("albert"),zNr=o(" \u2014 "),aZ=a("a"),WNr=o("FlaxAlbertForPreTraining"),QNr=o(" (ALBERT model)"),HNr=l(),tC=a("li"),e4e=a("strong"),UNr=o("bart"),JNr=o(" \u2014 "),nZ=a("a"),YNr=o("FlaxBartForConditionalGeneration"),KNr=o(" (BART model)"),ZNr=l(),aC=a("li"),o4e=a("strong"),eqr=o("bert"),oqr=o(" \u2014 "),sZ=a("a"),rqr=o("FlaxBertForPreTraining"),tqr=o(" (BERT model)"),aqr=l(),nC=a("li"),r4e=a("strong"),nqr=o("big_bird"),sqr=o(" \u2014 "),lZ=a("a"),lqr=o("FlaxBigBirdForPreTraining"),iqr=o(" (BigBird model)"),dqr=l(),sC=a("li"),t4e=a("strong"),cqr=o("electra"),fqr=o(" \u2014 "),iZ=a("a"),mqr=o("FlaxElectraForPreTraining"),gqr=o(" (ELECTRA model)"),hqr=l(),lC=a("li"),a4e=a("strong"),pqr=o("longt5"),uqr=o(" \u2014 "),dZ=a("a"),_qr=o("FlaxLongT5ForConditionalGeneration"),bqr=o(" (LongT5 model)"),vqr=l(),iC=a("li"),n4e=a("strong"),Fqr=o("mbart"),Tqr=o(" \u2014 "),cZ=a("a"),Mqr=o("FlaxMBartForConditionalGeneration"),Eqr=o(" (mBART model)"),Cqr=l(),dC=a("li"),s4e=a("strong"),wqr=o("mt5"),Aqr=o(" \u2014 "),fZ=a("a"),Lqr=o("FlaxMT5ForConditionalGeneration"),yqr=o(" (MT5 model)"),xqr=l(),cC=a("li"),l4e=a("strong"),$qr=o("roberta"),kqr=o(" \u2014 "),mZ=a("a"),Sqr=o("FlaxRobertaForMaskedLM"),Rqr=o(" (RoBERTa model)"),Pqr=l(),fC=a("li"),i4e=a("strong"),Bqr=o("roformer"),Iqr=o(" \u2014 "),gZ=a("a"),Nqr=o("FlaxRoFormerForMaskedLM"),qqr=o(" (RoFormer model)"),jqr=l(),mC=a("li"),d4e=a("strong"),Dqr=o("t5"),Gqr=o(" \u2014 "),hZ=a("a"),Oqr=o("FlaxT5ForConditionalGeneration"),Vqr=o(" (T5 model)"),Xqr=l(),gC=a("li"),c4e=a("strong"),zqr=o("wav2vec2"),Wqr=o(" \u2014 "),pZ=a("a"),Qqr=o("FlaxWav2Vec2ForPreTraining"),Hqr=o(" (Wav2Vec2 model)"),Uqr=l(),hC=a("li"),f4e=a("strong"),Jqr=o("xlm-roberta"),Yqr=o(" \u2014 "),uZ=a("a"),Kqr=o("FlaxXLMRobertaForMaskedLM"),Zqr=o(" (XLM-RoBERTa model)"),ejr=l(),F(pC.$$.fragment),jOe=l(),Jc=a("h2"),uC=a("a"),m4e=a("span"),F(Nx.$$.fragment),ojr=l(),g4e=a("span"),rjr=o("FlaxAutoModelForMaskedLM"),DOe=l(),ur=a("div"),F(qx.$$.fragment),tjr=l(),Yc=a("p"),ajr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_Z=a("a"),njr=o("from_pretrained()"),sjr=o(" class method or the "),bZ=a("a"),ljr=o("from_config()"),ijr=o(` class
method.`),djr=l(),jx=a("p"),cjr=o("This class cannot be instantiated directly using "),h4e=a("code"),fjr=o("__init__()"),mjr=o(" (throws an error)."),gjr=l(),Qt=a("div"),F(Dx.$$.fragment),hjr=l(),p4e=a("p"),pjr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ujr=l(),Kc=a("p"),_jr=o(`Note:
Loading a model from its configuration file does `),u4e=a("strong"),bjr=o("not"),vjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=a("a"),Fjr=o("from_pretrained()"),Tjr=o(" to load the model weights."),Mjr=l(),F(_C.$$.fragment),Ejr=l(),Xr=a("div"),F(Gx.$$.fragment),Cjr=l(),_4e=a("p"),wjr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ajr=l(),Mn=a("p"),Ljr=o("The model class to instantiate is selected based on the "),b4e=a("code"),yjr=o("model_type"),xjr=o(` property of the config object (either
passed as an argument or loaded from `),v4e=a("code"),$jr=o("pretrained_model_name_or_path"),kjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=a("code"),Sjr=o("pretrained_model_name_or_path"),Rjr=o(":"),Pjr=l(),$e=a("ul"),bC=a("li"),T4e=a("strong"),Bjr=o("albert"),Ijr=o(" \u2014 "),FZ=a("a"),Njr=o("FlaxAlbertForMaskedLM"),qjr=o(" (ALBERT model)"),jjr=l(),vC=a("li"),M4e=a("strong"),Djr=o("bart"),Gjr=o(" \u2014 "),TZ=a("a"),Ojr=o("FlaxBartForConditionalGeneration"),Vjr=o(" (BART model)"),Xjr=l(),FC=a("li"),E4e=a("strong"),zjr=o("bert"),Wjr=o(" \u2014 "),MZ=a("a"),Qjr=o("FlaxBertForMaskedLM"),Hjr=o(" (BERT model)"),Ujr=l(),TC=a("li"),C4e=a("strong"),Jjr=o("big_bird"),Yjr=o(" \u2014 "),EZ=a("a"),Kjr=o("FlaxBigBirdForMaskedLM"),Zjr=o(" (BigBird model)"),eDr=l(),MC=a("li"),w4e=a("strong"),oDr=o("distilbert"),rDr=o(" \u2014 "),CZ=a("a"),tDr=o("FlaxDistilBertForMaskedLM"),aDr=o(" (DistilBERT model)"),nDr=l(),EC=a("li"),A4e=a("strong"),sDr=o("electra"),lDr=o(" \u2014 "),wZ=a("a"),iDr=o("FlaxElectraForMaskedLM"),dDr=o(" (ELECTRA model)"),cDr=l(),CC=a("li"),L4e=a("strong"),fDr=o("mbart"),mDr=o(" \u2014 "),AZ=a("a"),gDr=o("FlaxMBartForConditionalGeneration"),hDr=o(" (mBART model)"),pDr=l(),wC=a("li"),y4e=a("strong"),uDr=o("roberta"),_Dr=o(" \u2014 "),LZ=a("a"),bDr=o("FlaxRobertaForMaskedLM"),vDr=o(" (RoBERTa model)"),FDr=l(),AC=a("li"),x4e=a("strong"),TDr=o("roformer"),MDr=o(" \u2014 "),yZ=a("a"),EDr=o("FlaxRoFormerForMaskedLM"),CDr=o(" (RoFormer model)"),wDr=l(),LC=a("li"),$4e=a("strong"),ADr=o("xlm-roberta"),LDr=o(" \u2014 "),xZ=a("a"),yDr=o("FlaxXLMRobertaForMaskedLM"),xDr=o(" (XLM-RoBERTa model)"),$Dr=l(),F(yC.$$.fragment),GOe=l(),Zc=a("h2"),xC=a("a"),k4e=a("span"),F(Ox.$$.fragment),kDr=l(),S4e=a("span"),SDr=o("FlaxAutoModelForSeq2SeqLM"),OOe=l(),_r=a("div"),F(Vx.$$.fragment),RDr=l(),ef=a("p"),PDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$Z=a("a"),BDr=o("from_pretrained()"),IDr=o(" class method or the "),kZ=a("a"),NDr=o("from_config()"),qDr=o(` class
method.`),jDr=l(),Xx=a("p"),DDr=o("This class cannot be instantiated directly using "),R4e=a("code"),GDr=o("__init__()"),ODr=o(" (throws an error)."),VDr=l(),Ht=a("div"),F(zx.$$.fragment),XDr=l(),P4e=a("p"),zDr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),WDr=l(),of=a("p"),QDr=o(`Note:
Loading a model from its configuration file does `),B4e=a("strong"),HDr=o("not"),UDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=a("a"),JDr=o("from_pretrained()"),YDr=o(" to load the model weights."),KDr=l(),F($C.$$.fragment),ZDr=l(),zr=a("div"),F(Wx.$$.fragment),eGr=l(),I4e=a("p"),oGr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rGr=l(),En=a("p"),tGr=o("The model class to instantiate is selected based on the "),N4e=a("code"),aGr=o("model_type"),nGr=o(` property of the config object (either
passed as an argument or loaded from `),q4e=a("code"),sGr=o("pretrained_model_name_or_path"),lGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=a("code"),iGr=o("pretrained_model_name_or_path"),dGr=o(":"),cGr=l(),ke=a("ul"),kC=a("li"),D4e=a("strong"),fGr=o("bart"),mGr=o(" \u2014 "),RZ=a("a"),gGr=o("FlaxBartForConditionalGeneration"),hGr=o(" (BART model)"),pGr=l(),SC=a("li"),G4e=a("strong"),uGr=o("blenderbot"),_Gr=o(" \u2014 "),PZ=a("a"),bGr=o("FlaxBlenderbotForConditionalGeneration"),vGr=o(" (Blenderbot model)"),FGr=l(),RC=a("li"),O4e=a("strong"),TGr=o("blenderbot-small"),MGr=o(" \u2014 "),BZ=a("a"),EGr=o("FlaxBlenderbotSmallForConditionalGeneration"),CGr=o(" (BlenderbotSmall model)"),wGr=l(),PC=a("li"),V4e=a("strong"),AGr=o("encoder-decoder"),LGr=o(" \u2014 "),IZ=a("a"),yGr=o("FlaxEncoderDecoderModel"),xGr=o(" (Encoder decoder model)"),$Gr=l(),BC=a("li"),X4e=a("strong"),kGr=o("longt5"),SGr=o(" \u2014 "),NZ=a("a"),RGr=o("FlaxLongT5ForConditionalGeneration"),PGr=o(" (LongT5 model)"),BGr=l(),IC=a("li"),z4e=a("strong"),IGr=o("marian"),NGr=o(" \u2014 "),qZ=a("a"),qGr=o("FlaxMarianMTModel"),jGr=o(" (Marian model)"),DGr=l(),NC=a("li"),W4e=a("strong"),GGr=o("mbart"),OGr=o(" \u2014 "),jZ=a("a"),VGr=o("FlaxMBartForConditionalGeneration"),XGr=o(" (mBART model)"),zGr=l(),qC=a("li"),Q4e=a("strong"),WGr=o("mt5"),QGr=o(" \u2014 "),DZ=a("a"),HGr=o("FlaxMT5ForConditionalGeneration"),UGr=o(" (MT5 model)"),JGr=l(),jC=a("li"),H4e=a("strong"),YGr=o("pegasus"),KGr=o(" \u2014 "),GZ=a("a"),ZGr=o("FlaxPegasusForConditionalGeneration"),eOr=o(" (Pegasus model)"),oOr=l(),DC=a("li"),U4e=a("strong"),rOr=o("t5"),tOr=o(" \u2014 "),OZ=a("a"),aOr=o("FlaxT5ForConditionalGeneration"),nOr=o(" (T5 model)"),sOr=l(),F(GC.$$.fragment),VOe=l(),rf=a("h2"),OC=a("a"),J4e=a("span"),F(Qx.$$.fragment),lOr=l(),Y4e=a("span"),iOr=o("FlaxAutoModelForSequenceClassification"),XOe=l(),br=a("div"),F(Hx.$$.fragment),dOr=l(),tf=a("p"),cOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VZ=a("a"),fOr=o("from_pretrained()"),mOr=o(" class method or the "),XZ=a("a"),gOr=o("from_config()"),hOr=o(` class
method.`),pOr=l(),Ux=a("p"),uOr=o("This class cannot be instantiated directly using "),K4e=a("code"),_Or=o("__init__()"),bOr=o(" (throws an error)."),vOr=l(),Ut=a("div"),F(Jx.$$.fragment),FOr=l(),Z4e=a("p"),TOr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),MOr=l(),af=a("p"),EOr=o(`Note:
Loading a model from its configuration file does `),eEe=a("strong"),COr=o("not"),wOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=a("a"),AOr=o("from_pretrained()"),LOr=o(" to load the model weights."),yOr=l(),F(VC.$$.fragment),xOr=l(),Wr=a("div"),F(Yx.$$.fragment),$Or=l(),oEe=a("p"),kOr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),SOr=l(),Cn=a("p"),ROr=o("The model class to instantiate is selected based on the "),rEe=a("code"),POr=o("model_type"),BOr=o(` property of the config object (either
passed as an argument or loaded from `),tEe=a("code"),IOr=o("pretrained_model_name_or_path"),NOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=a("code"),qOr=o("pretrained_model_name_or_path"),jOr=o(":"),DOr=l(),Se=a("ul"),XC=a("li"),nEe=a("strong"),GOr=o("albert"),OOr=o(" \u2014 "),WZ=a("a"),VOr=o("FlaxAlbertForSequenceClassification"),XOr=o(" (ALBERT model)"),zOr=l(),zC=a("li"),sEe=a("strong"),WOr=o("bart"),QOr=o(" \u2014 "),QZ=a("a"),HOr=o("FlaxBartForSequenceClassification"),UOr=o(" (BART model)"),JOr=l(),WC=a("li"),lEe=a("strong"),YOr=o("bert"),KOr=o(" \u2014 "),HZ=a("a"),ZOr=o("FlaxBertForSequenceClassification"),eVr=o(" (BERT model)"),oVr=l(),QC=a("li"),iEe=a("strong"),rVr=o("big_bird"),tVr=o(" \u2014 "),UZ=a("a"),aVr=o("FlaxBigBirdForSequenceClassification"),nVr=o(" (BigBird model)"),sVr=l(),HC=a("li"),dEe=a("strong"),lVr=o("distilbert"),iVr=o(" \u2014 "),JZ=a("a"),dVr=o("FlaxDistilBertForSequenceClassification"),cVr=o(" (DistilBERT model)"),fVr=l(),UC=a("li"),cEe=a("strong"),mVr=o("electra"),gVr=o(" \u2014 "),YZ=a("a"),hVr=o("FlaxElectraForSequenceClassification"),pVr=o(" (ELECTRA model)"),uVr=l(),JC=a("li"),fEe=a("strong"),_Vr=o("mbart"),bVr=o(" \u2014 "),KZ=a("a"),vVr=o("FlaxMBartForSequenceClassification"),FVr=o(" (mBART model)"),TVr=l(),YC=a("li"),mEe=a("strong"),MVr=o("roberta"),EVr=o(" \u2014 "),ZZ=a("a"),CVr=o("FlaxRobertaForSequenceClassification"),wVr=o(" (RoBERTa model)"),AVr=l(),KC=a("li"),gEe=a("strong"),LVr=o("roformer"),yVr=o(" \u2014 "),eee=a("a"),xVr=o("FlaxRoFormerForSequenceClassification"),$Vr=o(" (RoFormer model)"),kVr=l(),ZC=a("li"),hEe=a("strong"),SVr=o("xlm-roberta"),RVr=o(" \u2014 "),oee=a("a"),PVr=o("FlaxXLMRobertaForSequenceClassification"),BVr=o(" (XLM-RoBERTa model)"),IVr=l(),F(e5.$$.fragment),zOe=l(),nf=a("h2"),o5=a("a"),pEe=a("span"),F(Kx.$$.fragment),NVr=l(),uEe=a("span"),qVr=o("FlaxAutoModelForQuestionAnswering"),WOe=l(),vr=a("div"),F(Zx.$$.fragment),jVr=l(),sf=a("p"),DVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ree=a("a"),GVr=o("from_pretrained()"),OVr=o(" class method or the "),tee=a("a"),VVr=o("from_config()"),XVr=o(` class
method.`),zVr=l(),e$=a("p"),WVr=o("This class cannot be instantiated directly using "),_Ee=a("code"),QVr=o("__init__()"),HVr=o(" (throws an error)."),UVr=l(),Jt=a("div"),F(o$.$$.fragment),JVr=l(),bEe=a("p"),YVr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),KVr=l(),lf=a("p"),ZVr=o(`Note:
Loading a model from its configuration file does `),vEe=a("strong"),eXr=o("not"),oXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aee=a("a"),rXr=o("from_pretrained()"),tXr=o(" to load the model weights."),aXr=l(),F(r5.$$.fragment),nXr=l(),Qr=a("div"),F(r$.$$.fragment),sXr=l(),FEe=a("p"),lXr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iXr=l(),wn=a("p"),dXr=o("The model class to instantiate is selected based on the "),TEe=a("code"),cXr=o("model_type"),fXr=o(` property of the config object (either
passed as an argument or loaded from `),MEe=a("code"),mXr=o("pretrained_model_name_or_path"),gXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=a("code"),hXr=o("pretrained_model_name_or_path"),pXr=o(":"),uXr=l(),Re=a("ul"),t5=a("li"),CEe=a("strong"),_Xr=o("albert"),bXr=o(" \u2014 "),nee=a("a"),vXr=o("FlaxAlbertForQuestionAnswering"),FXr=o(" (ALBERT model)"),TXr=l(),a5=a("li"),wEe=a("strong"),MXr=o("bart"),EXr=o(" \u2014 "),see=a("a"),CXr=o("FlaxBartForQuestionAnswering"),wXr=o(" (BART model)"),AXr=l(),n5=a("li"),AEe=a("strong"),LXr=o("bert"),yXr=o(" \u2014 "),lee=a("a"),xXr=o("FlaxBertForQuestionAnswering"),$Xr=o(" (BERT model)"),kXr=l(),s5=a("li"),LEe=a("strong"),SXr=o("big_bird"),RXr=o(" \u2014 "),iee=a("a"),PXr=o("FlaxBigBirdForQuestionAnswering"),BXr=o(" (BigBird model)"),IXr=l(),l5=a("li"),yEe=a("strong"),NXr=o("distilbert"),qXr=o(" \u2014 "),dee=a("a"),jXr=o("FlaxDistilBertForQuestionAnswering"),DXr=o(" (DistilBERT model)"),GXr=l(),i5=a("li"),xEe=a("strong"),OXr=o("electra"),VXr=o(" \u2014 "),cee=a("a"),XXr=o("FlaxElectraForQuestionAnswering"),zXr=o(" (ELECTRA model)"),WXr=l(),d5=a("li"),$Ee=a("strong"),QXr=o("mbart"),HXr=o(" \u2014 "),fee=a("a"),UXr=o("FlaxMBartForQuestionAnswering"),JXr=o(" (mBART model)"),YXr=l(),c5=a("li"),kEe=a("strong"),KXr=o("roberta"),ZXr=o(" \u2014 "),mee=a("a"),ezr=o("FlaxRobertaForQuestionAnswering"),ozr=o(" (RoBERTa model)"),rzr=l(),f5=a("li"),SEe=a("strong"),tzr=o("roformer"),azr=o(" \u2014 "),gee=a("a"),nzr=o("FlaxRoFormerForQuestionAnswering"),szr=o(" (RoFormer model)"),lzr=l(),m5=a("li"),REe=a("strong"),izr=o("xlm-roberta"),dzr=o(" \u2014 "),hee=a("a"),czr=o("FlaxXLMRobertaForQuestionAnswering"),fzr=o(" (XLM-RoBERTa model)"),mzr=l(),F(g5.$$.fragment),QOe=l(),df=a("h2"),h5=a("a"),PEe=a("span"),F(t$.$$.fragment),gzr=l(),BEe=a("span"),hzr=o("FlaxAutoModelForTokenClassification"),HOe=l(),Fr=a("div"),F(a$.$$.fragment),pzr=l(),cf=a("p"),uzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pee=a("a"),_zr=o("from_pretrained()"),bzr=o(" class method or the "),uee=a("a"),vzr=o("from_config()"),Fzr=o(` class
method.`),Tzr=l(),n$=a("p"),Mzr=o("This class cannot be instantiated directly using "),IEe=a("code"),Ezr=o("__init__()"),Czr=o(" (throws an error)."),wzr=l(),Yt=a("div"),F(s$.$$.fragment),Azr=l(),NEe=a("p"),Lzr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yzr=l(),ff=a("p"),xzr=o(`Note:
Loading a model from its configuration file does `),qEe=a("strong"),$zr=o("not"),kzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=a("a"),Szr=o("from_pretrained()"),Rzr=o(" to load the model weights."),Pzr=l(),F(p5.$$.fragment),Bzr=l(),Hr=a("div"),F(l$.$$.fragment),Izr=l(),jEe=a("p"),Nzr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qzr=l(),An=a("p"),jzr=o("The model class to instantiate is selected based on the "),DEe=a("code"),Dzr=o("model_type"),Gzr=o(` property of the config object (either
passed as an argument or loaded from `),GEe=a("code"),Ozr=o("pretrained_model_name_or_path"),Vzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OEe=a("code"),Xzr=o("pretrained_model_name_or_path"),zzr=o(":"),Wzr=l(),Ve=a("ul"),u5=a("li"),VEe=a("strong"),Qzr=o("albert"),Hzr=o(" \u2014 "),bee=a("a"),Uzr=o("FlaxAlbertForTokenClassification"),Jzr=o(" (ALBERT model)"),Yzr=l(),_5=a("li"),XEe=a("strong"),Kzr=o("bert"),Zzr=o(" \u2014 "),vee=a("a"),eWr=o("FlaxBertForTokenClassification"),oWr=o(" (BERT model)"),rWr=l(),b5=a("li"),zEe=a("strong"),tWr=o("big_bird"),aWr=o(" \u2014 "),Fee=a("a"),nWr=o("FlaxBigBirdForTokenClassification"),sWr=o(" (BigBird model)"),lWr=l(),v5=a("li"),WEe=a("strong"),iWr=o("distilbert"),dWr=o(" \u2014 "),Tee=a("a"),cWr=o("FlaxDistilBertForTokenClassification"),fWr=o(" (DistilBERT model)"),mWr=l(),F5=a("li"),QEe=a("strong"),gWr=o("electra"),hWr=o(" \u2014 "),Mee=a("a"),pWr=o("FlaxElectraForTokenClassification"),uWr=o(" (ELECTRA model)"),_Wr=l(),T5=a("li"),HEe=a("strong"),bWr=o("roberta"),vWr=o(" \u2014 "),Eee=a("a"),FWr=o("FlaxRobertaForTokenClassification"),TWr=o(" (RoBERTa model)"),MWr=l(),M5=a("li"),UEe=a("strong"),EWr=o("roformer"),CWr=o(" \u2014 "),Cee=a("a"),wWr=o("FlaxRoFormerForTokenClassification"),AWr=o(" (RoFormer model)"),LWr=l(),E5=a("li"),JEe=a("strong"),yWr=o("xlm-roberta"),xWr=o(" \u2014 "),wee=a("a"),$Wr=o("FlaxXLMRobertaForTokenClassification"),kWr=o(" (XLM-RoBERTa model)"),SWr=l(),F(C5.$$.fragment),UOe=l(),mf=a("h2"),w5=a("a"),YEe=a("span"),F(i$.$$.fragment),RWr=l(),KEe=a("span"),PWr=o("FlaxAutoModelForMultipleChoice"),JOe=l(),Tr=a("div"),F(d$.$$.fragment),BWr=l(),gf=a("p"),IWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Aee=a("a"),NWr=o("from_pretrained()"),qWr=o(" class method or the "),Lee=a("a"),jWr=o("from_config()"),DWr=o(` class
method.`),GWr=l(),c$=a("p"),OWr=o("This class cannot be instantiated directly using "),ZEe=a("code"),VWr=o("__init__()"),XWr=o(" (throws an error)."),zWr=l(),Kt=a("div"),F(f$.$$.fragment),WWr=l(),eCe=a("p"),QWr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),HWr=l(),hf=a("p"),UWr=o(`Note:
Loading a model from its configuration file does `),oCe=a("strong"),JWr=o("not"),YWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=a("a"),KWr=o("from_pretrained()"),ZWr=o(" to load the model weights."),eQr=l(),F(A5.$$.fragment),oQr=l(),Ur=a("div"),F(m$.$$.fragment),rQr=l(),rCe=a("p"),tQr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),aQr=l(),Ln=a("p"),nQr=o("The model class to instantiate is selected based on the "),tCe=a("code"),sQr=o("model_type"),lQr=o(` property of the config object (either
passed as an argument or loaded from `),aCe=a("code"),iQr=o("pretrained_model_name_or_path"),dQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nCe=a("code"),cQr=o("pretrained_model_name_or_path"),fQr=o(":"),mQr=l(),Xe=a("ul"),L5=a("li"),sCe=a("strong"),gQr=o("albert"),hQr=o(" \u2014 "),xee=a("a"),pQr=o("FlaxAlbertForMultipleChoice"),uQr=o(" (ALBERT model)"),_Qr=l(),y5=a("li"),lCe=a("strong"),bQr=o("bert"),vQr=o(" \u2014 "),$ee=a("a"),FQr=o("FlaxBertForMultipleChoice"),TQr=o(" (BERT model)"),MQr=l(),x5=a("li"),iCe=a("strong"),EQr=o("big_bird"),CQr=o(" \u2014 "),kee=a("a"),wQr=o("FlaxBigBirdForMultipleChoice"),AQr=o(" (BigBird model)"),LQr=l(),$5=a("li"),dCe=a("strong"),yQr=o("distilbert"),xQr=o(" \u2014 "),See=a("a"),$Qr=o("FlaxDistilBertForMultipleChoice"),kQr=o(" (DistilBERT model)"),SQr=l(),k5=a("li"),cCe=a("strong"),RQr=o("electra"),PQr=o(" \u2014 "),Ree=a("a"),BQr=o("FlaxElectraForMultipleChoice"),IQr=o(" (ELECTRA model)"),NQr=l(),S5=a("li"),fCe=a("strong"),qQr=o("roberta"),jQr=o(" \u2014 "),Pee=a("a"),DQr=o("FlaxRobertaForMultipleChoice"),GQr=o(" (RoBERTa model)"),OQr=l(),R5=a("li"),mCe=a("strong"),VQr=o("roformer"),XQr=o(" \u2014 "),Bee=a("a"),zQr=o("FlaxRoFormerForMultipleChoice"),WQr=o(" (RoFormer model)"),QQr=l(),P5=a("li"),gCe=a("strong"),HQr=o("xlm-roberta"),UQr=o(" \u2014 "),Iee=a("a"),JQr=o("FlaxXLMRobertaForMultipleChoice"),YQr=o(" (XLM-RoBERTa model)"),KQr=l(),F(B5.$$.fragment),YOe=l(),pf=a("h2"),I5=a("a"),hCe=a("span"),F(g$.$$.fragment),ZQr=l(),pCe=a("span"),eHr=o("FlaxAutoModelForNextSentencePrediction"),KOe=l(),Mr=a("div"),F(h$.$$.fragment),oHr=l(),uf=a("p"),rHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Nee=a("a"),tHr=o("from_pretrained()"),aHr=o(" class method or the "),qee=a("a"),nHr=o("from_config()"),sHr=o(` class
method.`),lHr=l(),p$=a("p"),iHr=o("This class cannot be instantiated directly using "),uCe=a("code"),dHr=o("__init__()"),cHr=o(" (throws an error)."),fHr=l(),Zt=a("div"),F(u$.$$.fragment),mHr=l(),_Ce=a("p"),gHr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hHr=l(),_f=a("p"),pHr=o(`Note:
Loading a model from its configuration file does `),bCe=a("strong"),uHr=o("not"),_Hr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=a("a"),bHr=o("from_pretrained()"),vHr=o(" to load the model weights."),FHr=l(),F(N5.$$.fragment),THr=l(),Jr=a("div"),F(_$.$$.fragment),MHr=l(),vCe=a("p"),EHr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),CHr=l(),yn=a("p"),wHr=o("The model class to instantiate is selected based on the "),FCe=a("code"),AHr=o("model_type"),LHr=o(` property of the config object (either
passed as an argument or loaded from `),TCe=a("code"),yHr=o("pretrained_model_name_or_path"),xHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MCe=a("code"),$Hr=o("pretrained_model_name_or_path"),kHr=o(":"),SHr=l(),ECe=a("ul"),q5=a("li"),CCe=a("strong"),RHr=o("bert"),PHr=o(" \u2014 "),Dee=a("a"),BHr=o("FlaxBertForNextSentencePrediction"),IHr=o(" (BERT model)"),NHr=l(),F(j5.$$.fragment),ZOe=l(),bf=a("h2"),D5=a("a"),wCe=a("span"),F(b$.$$.fragment),qHr=l(),ACe=a("span"),jHr=o("FlaxAutoModelForImageClassification"),eVe=l(),Er=a("div"),F(v$.$$.fragment),DHr=l(),vf=a("p"),GHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gee=a("a"),OHr=o("from_pretrained()"),VHr=o(" class method or the "),Oee=a("a"),XHr=o("from_config()"),zHr=o(` class
method.`),WHr=l(),F$=a("p"),QHr=o("This class cannot be instantiated directly using "),LCe=a("code"),HHr=o("__init__()"),UHr=o(" (throws an error)."),JHr=l(),ea=a("div"),F(T$.$$.fragment),YHr=l(),yCe=a("p"),KHr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ZHr=l(),Ff=a("p"),eUr=o(`Note:
Loading a model from its configuration file does `),xCe=a("strong"),oUr=o("not"),rUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=a("a"),tUr=o("from_pretrained()"),aUr=o(" to load the model weights."),nUr=l(),F(G5.$$.fragment),sUr=l(),Yr=a("div"),F(M$.$$.fragment),lUr=l(),$Ce=a("p"),iUr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dUr=l(),xn=a("p"),cUr=o("The model class to instantiate is selected based on the "),kCe=a("code"),fUr=o("model_type"),mUr=o(` property of the config object (either
passed as an argument or loaded from `),SCe=a("code"),gUr=o("pretrained_model_name_or_path"),hUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RCe=a("code"),pUr=o("pretrained_model_name_or_path"),uUr=o(":"),_Ur=l(),E$=a("ul"),O5=a("li"),PCe=a("strong"),bUr=o("beit"),vUr=o(" \u2014 "),Xee=a("a"),FUr=o("FlaxBeitForImageClassification"),TUr=o(" (BEiT model)"),MUr=l(),V5=a("li"),BCe=a("strong"),EUr=o("vit"),CUr=o(" \u2014 "),zee=a("a"),wUr=o("FlaxViTForImageClassification"),AUr=o(" (ViT model)"),LUr=l(),F(X5.$$.fragment),oVe=l(),Tf=a("h2"),z5=a("a"),ICe=a("span"),F(C$.$$.fragment),yUr=l(),NCe=a("span"),xUr=o("FlaxAutoModelForVision2Seq"),rVe=l(),Cr=a("div"),F(w$.$$.fragment),$Ur=l(),Mf=a("p"),kUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Wee=a("a"),SUr=o("from_pretrained()"),RUr=o(" class method or the "),Qee=a("a"),PUr=o("from_config()"),BUr=o(` class
method.`),IUr=l(),A$=a("p"),NUr=o("This class cannot be instantiated directly using "),qCe=a("code"),qUr=o("__init__()"),jUr=o(" (throws an error)."),DUr=l(),oa=a("div"),F(L$.$$.fragment),GUr=l(),jCe=a("p"),OUr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VUr=l(),Ef=a("p"),XUr=o(`Note:
Loading a model from its configuration file does `),DCe=a("strong"),zUr=o("not"),WUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hee=a("a"),QUr=o("from_pretrained()"),HUr=o(" to load the model weights."),UUr=l(),F(W5.$$.fragment),JUr=l(),Kr=a("div"),F(y$.$$.fragment),YUr=l(),GCe=a("p"),KUr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ZUr=l(),$n=a("p"),eJr=o("The model class to instantiate is selected based on the "),OCe=a("code"),oJr=o("model_type"),rJr=o(` property of the config object (either
passed as an argument or loaded from `),VCe=a("code"),tJr=o("pretrained_model_name_or_path"),aJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XCe=a("code"),nJr=o("pretrained_model_name_or_path"),sJr=o(":"),lJr=l(),zCe=a("ul"),Q5=a("li"),WCe=a("strong"),iJr=o("vision-encoder-decoder"),dJr=o(" \u2014 "),Uee=a("a"),cJr=o("FlaxVisionEncoderDecoderModel"),fJr=o(" (Vision Encoder decoder model)"),mJr=l(),F(H5.$$.fragment),this.h()},l(f){const _=uqt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var x$=s(p);m=n(x$,"A",{id:!0,class:!0,href:!0});var QCe=s(m);u=n(QCe,"SPAN",{});var HCe=s(u);T(d.$$.fragment,HCe),HCe.forEach(t),QCe.forEach(t),h=i(x$),Eo=n(x$,"SPAN",{});var UCe=s(Eo);Fi=r(UCe,"Auto Classes"),UCe.forEach(t),x$.forEach(t),Lf=i(f),at=n(f,"P",{});var $$=s(at);Ti=r($$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Mi=n($$,"CODE",{});var JCe=s(Mi);pL=r(JCe,"from_pretrained()"),JCe.forEach(t),yf=r($$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),$$.forEach(t),Oe=i(f),We=n(f,"P",{});var kn=s(We);Ei=r(kn,"Instantiating one of "),Sn=n(kn,"A",{href:!0});var YCe=s(Sn);uL=r(YCe,"AutoConfig"),YCe.forEach(t),Rn=r(kn,", "),Pn=n(kn,"A",{href:!0});var KCe=s(Pn);_L=r(KCe,"AutoModel"),KCe.forEach(t),Ci=r(kn,`, and
`),Bn=n(kn,"A",{href:!0});var ZCe=s(Bn);bL=r(ZCe,"AutoTokenizer"),ZCe.forEach(t),wi=r(kn," will directly create a class of the relevant architecture. For instance"),kn.forEach(t),xf=i(f),T(ya.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var k$=s(Ae);zk=r(k$,"will create a model that is an instance of "),Ai=n(k$,"A",{href:!0});var e5e=s(Ai);Wk=r(e5e,"BertModel"),e5e.forEach(t),Qk=r(k$,"."),k$.forEach(t),Co=i(f),xa=n(f,"P",{});var S$=s(xa);Hk=r(S$,"There is one class of "),$f=n(S$,"CODE",{});var o5e=s($f);Uk=r(o5e,"AutoModel"),o5e.forEach(t),gze=r(S$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),S$.forEach(t),KDe=i(f),Li=n(f,"H2",{class:!0});var R$=s(Li);kf=n(R$,"A",{id:!0,class:!0,href:!0});var r5e=s(kf);Xre=n(r5e,"SPAN",{});var t5e=s(Xre);T(vL.$$.fragment,t5e),t5e.forEach(t),r5e.forEach(t),hze=i(R$),zre=n(R$,"SPAN",{});var a5e=s(zre);pze=r(a5e,"Extending the Auto Classes"),a5e.forEach(t),R$.forEach(t),ZDe=i(f),In=n(f,"P",{});var Cf=s(In);uze=r(Cf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Wre=n(Cf,"CODE",{});var n5e=s(Wre);_ze=r(n5e,"NewModel"),n5e.forEach(t),bze=r(Cf,", make sure you have a "),Qre=n(Cf,"CODE",{});var s5e=s(Qre);vze=r(s5e,"NewModelConfig"),s5e.forEach(t),Fze=r(Cf,` then you can add those to the auto
classes like this:`),Cf.forEach(t),eGe=i(f),T(FL.$$.fragment,f),oGe=i(f),Jk=n(f,"P",{});var l5e=s(Jk);Tze=r(l5e,"You will then be able to use the auto classes like you would usually do!"),l5e.forEach(t),rGe=i(f),T(Sf.$$.fragment,f),tGe=i(f),yi=n(f,"H2",{class:!0});var P$=s(yi);Rf=n(P$,"A",{id:!0,class:!0,href:!0});var i5e=s(Rf);Hre=n(i5e,"SPAN",{});var d5e=s(Hre);T(TL.$$.fragment,d5e),d5e.forEach(t),i5e.forEach(t),Mze=i(P$),Ure=n(P$,"SPAN",{});var c5e=s(Ure);Eze=r(c5e,"AutoConfig"),c5e.forEach(t),P$.forEach(t),aGe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(ML.$$.fragment,rt),Cze=i(rt),EL=n(rt,"P",{});var B$=s(EL);wze=r(B$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Yk=n(B$,"A",{href:!0});var f5e=s(Yk);Aze=r(f5e,"from_pretrained()"),f5e.forEach(t),Lze=r(B$," class method."),B$.forEach(t),yze=i(rt),CL=n(rt,"P",{});var I$=s(CL);xze=r(I$,"This class cannot be instantiated directly using "),Jre=n(I$,"CODE",{});var m5e=s(Jre);$ze=r(m5e,"__init__()"),m5e.forEach(t),kze=r(I$," (throws an error)."),I$.forEach(t),Sze=i(rt),wr=n(rt,"DIV",{class:!0});var tt=s(wr);T(wL.$$.fragment,tt),Rze=i(tt),Yre=n(tt,"P",{});var g5e=s(Yre);Pze=r(g5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),g5e.forEach(t),Bze=i(tt),xi=n(tt,"P",{});var wf=s(xi);Ize=r(wf,"The configuration class to instantiate is selected based on the "),Kre=n(wf,"CODE",{});var h5e=s(Kre);Nze=r(h5e,"model_type"),h5e.forEach(t),qze=r(wf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Zre=n(wf,"CODE",{});var p5e=s(Zre);jze=r(p5e,"pretrained_model_name_or_path"),p5e.forEach(t),Dze=r(wf,":"),wf.forEach(t),Gze=i(tt),A=n(tt,"UL",{});var L=s(A);Pf=n(L,"LI",{});var U5=s(Pf);ete=n(U5,"STRONG",{});var u5e=s(ete);Oze=r(u5e,"albert"),u5e.forEach(t),Vze=r(U5," \u2014 "),Kk=n(U5,"A",{href:!0});var _5e=s(Kk);Xze=r(_5e,"AlbertConfig"),_5e.forEach(t),zze=r(U5," (ALBERT model)"),U5.forEach(t),Wze=i(L),Bf=n(L,"LI",{});var J5=s(Bf);ote=n(J5,"STRONG",{});var b5e=s(ote);Qze=r(b5e,"bart"),b5e.forEach(t),Hze=r(J5," \u2014 "),Zk=n(J5,"A",{href:!0});var v5e=s(Zk);Uze=r(v5e,"BartConfig"),v5e.forEach(t),Jze=r(J5," (BART model)"),J5.forEach(t),Yze=i(L),If=n(L,"LI",{});var Y5=s(If);rte=n(Y5,"STRONG",{});var F5e=s(rte);Kze=r(F5e,"beit"),F5e.forEach(t),Zze=r(Y5," \u2014 "),eS=n(Y5,"A",{href:!0});var T5e=s(eS);eWe=r(T5e,"BeitConfig"),T5e.forEach(t),oWe=r(Y5," (BEiT model)"),Y5.forEach(t),rWe=i(L),Nf=n(L,"LI",{});var K5=s(Nf);tte=n(K5,"STRONG",{});var M5e=s(tte);tWe=r(M5e,"bert"),M5e.forEach(t),aWe=r(K5," \u2014 "),oS=n(K5,"A",{href:!0});var E5e=s(oS);nWe=r(E5e,"BertConfig"),E5e.forEach(t),sWe=r(K5," (BERT model)"),K5.forEach(t),lWe=i(L),qf=n(L,"LI",{});var Z5=s(qf);ate=n(Z5,"STRONG",{});var C5e=s(ate);iWe=r(C5e,"bert-generation"),C5e.forEach(t),dWe=r(Z5," \u2014 "),rS=n(Z5,"A",{href:!0});var w5e=s(rS);cWe=r(w5e,"BertGenerationConfig"),w5e.forEach(t),fWe=r(Z5," (Bert Generation model)"),Z5.forEach(t),mWe=i(L),jf=n(L,"LI",{});var ew=s(jf);nte=n(ew,"STRONG",{});var A5e=s(nte);gWe=r(A5e,"big_bird"),A5e.forEach(t),hWe=r(ew," \u2014 "),tS=n(ew,"A",{href:!0});var L5e=s(tS);pWe=r(L5e,"BigBirdConfig"),L5e.forEach(t),uWe=r(ew," (BigBird model)"),ew.forEach(t),_We=i(L),Df=n(L,"LI",{});var ow=s(Df);ste=n(ow,"STRONG",{});var y5e=s(ste);bWe=r(y5e,"bigbird_pegasus"),y5e.forEach(t),vWe=r(ow," \u2014 "),aS=n(ow,"A",{href:!0});var x5e=s(aS);FWe=r(x5e,"BigBirdPegasusConfig"),x5e.forEach(t),TWe=r(ow," (BigBird-Pegasus model)"),ow.forEach(t),MWe=i(L),Gf=n(L,"LI",{});var rw=s(Gf);lte=n(rw,"STRONG",{});var $5e=s(lte);EWe=r($5e,"blenderbot"),$5e.forEach(t),CWe=r(rw," \u2014 "),nS=n(rw,"A",{href:!0});var k5e=s(nS);wWe=r(k5e,"BlenderbotConfig"),k5e.forEach(t),AWe=r(rw," (Blenderbot model)"),rw.forEach(t),LWe=i(L),Of=n(L,"LI",{});var tw=s(Of);ite=n(tw,"STRONG",{});var S5e=s(ite);yWe=r(S5e,"blenderbot-small"),S5e.forEach(t),xWe=r(tw," \u2014 "),sS=n(tw,"A",{href:!0});var R5e=s(sS);$We=r(R5e,"BlenderbotSmallConfig"),R5e.forEach(t),kWe=r(tw," (BlenderbotSmall model)"),tw.forEach(t),SWe=i(L),Vf=n(L,"LI",{});var aw=s(Vf);dte=n(aw,"STRONG",{});var P5e=s(dte);RWe=r(P5e,"bloom"),P5e.forEach(t),PWe=r(aw," \u2014 "),lS=n(aw,"A",{href:!0});var B5e=s(lS);BWe=r(B5e,"BloomConfig"),B5e.forEach(t),IWe=r(aw," (BLOOM model)"),aw.forEach(t),NWe=i(L),Xf=n(L,"LI",{});var nw=s(Xf);cte=n(nw,"STRONG",{});var I5e=s(cte);qWe=r(I5e,"camembert"),I5e.forEach(t),jWe=r(nw," \u2014 "),iS=n(nw,"A",{href:!0});var N5e=s(iS);DWe=r(N5e,"CamembertConfig"),N5e.forEach(t),GWe=r(nw," (CamemBERT model)"),nw.forEach(t),OWe=i(L),zf=n(L,"LI",{});var sw=s(zf);fte=n(sw,"STRONG",{});var q5e=s(fte);VWe=r(q5e,"canine"),q5e.forEach(t),XWe=r(sw," \u2014 "),dS=n(sw,"A",{href:!0});var j5e=s(dS);zWe=r(j5e,"CanineConfig"),j5e.forEach(t),WWe=r(sw," (CANINE model)"),sw.forEach(t),QWe=i(L),Wf=n(L,"LI",{});var lw=s(Wf);mte=n(lw,"STRONG",{});var D5e=s(mte);HWe=r(D5e,"clip"),D5e.forEach(t),UWe=r(lw," \u2014 "),cS=n(lw,"A",{href:!0});var G5e=s(cS);JWe=r(G5e,"CLIPConfig"),G5e.forEach(t),YWe=r(lw," (CLIP model)"),lw.forEach(t),KWe=i(L),Qf=n(L,"LI",{});var iw=s(Qf);gte=n(iw,"STRONG",{});var O5e=s(gte);ZWe=r(O5e,"convbert"),O5e.forEach(t),eQe=r(iw," \u2014 "),fS=n(iw,"A",{href:!0});var V5e=s(fS);oQe=r(V5e,"ConvBertConfig"),V5e.forEach(t),rQe=r(iw," (ConvBERT model)"),iw.forEach(t),tQe=i(L),Hf=n(L,"LI",{});var dw=s(Hf);hte=n(dw,"STRONG",{});var X5e=s(hte);aQe=r(X5e,"convnext"),X5e.forEach(t),nQe=r(dw," \u2014 "),mS=n(dw,"A",{href:!0});var z5e=s(mS);sQe=r(z5e,"ConvNextConfig"),z5e.forEach(t),lQe=r(dw," (ConvNeXT model)"),dw.forEach(t),iQe=i(L),Uf=n(L,"LI",{});var cw=s(Uf);pte=n(cw,"STRONG",{});var W5e=s(pte);dQe=r(W5e,"ctrl"),W5e.forEach(t),cQe=r(cw," \u2014 "),gS=n(cw,"A",{href:!0});var Q5e=s(gS);fQe=r(Q5e,"CTRLConfig"),Q5e.forEach(t),mQe=r(cw," (CTRL model)"),cw.forEach(t),gQe=i(L),Jf=n(L,"LI",{});var fw=s(Jf);ute=n(fw,"STRONG",{});var H5e=s(ute);hQe=r(H5e,"cvt"),H5e.forEach(t),pQe=r(fw," \u2014 "),hS=n(fw,"A",{href:!0});var U5e=s(hS);uQe=r(U5e,"CvtConfig"),U5e.forEach(t),_Qe=r(fw," (CvT model)"),fw.forEach(t),bQe=i(L),Yf=n(L,"LI",{});var mw=s(Yf);_te=n(mw,"STRONG",{});var J5e=s(_te);vQe=r(J5e,"data2vec-audio"),J5e.forEach(t),FQe=r(mw," \u2014 "),pS=n(mw,"A",{href:!0});var Y5e=s(pS);TQe=r(Y5e,"Data2VecAudioConfig"),Y5e.forEach(t),MQe=r(mw," (Data2VecAudio model)"),mw.forEach(t),EQe=i(L),Kf=n(L,"LI",{});var gw=s(Kf);bte=n(gw,"STRONG",{});var K5e=s(bte);CQe=r(K5e,"data2vec-text"),K5e.forEach(t),wQe=r(gw," \u2014 "),uS=n(gw,"A",{href:!0});var Z5e=s(uS);AQe=r(Z5e,"Data2VecTextConfig"),Z5e.forEach(t),LQe=r(gw," (Data2VecText model)"),gw.forEach(t),yQe=i(L),Zf=n(L,"LI",{});var hw=s(Zf);vte=n(hw,"STRONG",{});var ewe=s(vte);xQe=r(ewe,"data2vec-vision"),ewe.forEach(t),$Qe=r(hw," \u2014 "),_S=n(hw,"A",{href:!0});var owe=s(_S);kQe=r(owe,"Data2VecVisionConfig"),owe.forEach(t),SQe=r(hw," (Data2VecVision model)"),hw.forEach(t),RQe=i(L),em=n(L,"LI",{});var pw=s(em);Fte=n(pw,"STRONG",{});var rwe=s(Fte);PQe=r(rwe,"deberta"),rwe.forEach(t),BQe=r(pw," \u2014 "),bS=n(pw,"A",{href:!0});var twe=s(bS);IQe=r(twe,"DebertaConfig"),twe.forEach(t),NQe=r(pw," (DeBERTa model)"),pw.forEach(t),qQe=i(L),om=n(L,"LI",{});var uw=s(om);Tte=n(uw,"STRONG",{});var awe=s(Tte);jQe=r(awe,"deberta-v2"),awe.forEach(t),DQe=r(uw," \u2014 "),vS=n(uw,"A",{href:!0});var nwe=s(vS);GQe=r(nwe,"DebertaV2Config"),nwe.forEach(t),OQe=r(uw," (DeBERTa-v2 model)"),uw.forEach(t),VQe=i(L),rm=n(L,"LI",{});var _w=s(rm);Mte=n(_w,"STRONG",{});var swe=s(Mte);XQe=r(swe,"decision_transformer"),swe.forEach(t),zQe=r(_w," \u2014 "),FS=n(_w,"A",{href:!0});var lwe=s(FS);WQe=r(lwe,"DecisionTransformerConfig"),lwe.forEach(t),QQe=r(_w," (Decision Transformer model)"),_w.forEach(t),HQe=i(L),tm=n(L,"LI",{});var bw=s(tm);Ete=n(bw,"STRONG",{});var hJr=s(Ete);UQe=r(hJr,"deit"),hJr.forEach(t),JQe=r(bw," \u2014 "),TS=n(bw,"A",{href:!0});var pJr=s(TS);YQe=r(pJr,"DeiTConfig"),pJr.forEach(t),KQe=r(bw," (DeiT model)"),bw.forEach(t),ZQe=i(L),am=n(L,"LI",{});var iwe=s(am);Cte=n(iwe,"STRONG",{});var uJr=s(Cte);eHe=r(uJr,"detr"),uJr.forEach(t),oHe=r(iwe," \u2014 "),MS=n(iwe,"A",{href:!0});var _Jr=s(MS);rHe=r(_Jr,"DetrConfig"),_Jr.forEach(t),tHe=r(iwe," (DETR model)"),iwe.forEach(t),aHe=i(L),nm=n(L,"LI",{});var dwe=s(nm);wte=n(dwe,"STRONG",{});var bJr=s(wte);nHe=r(bJr,"distilbert"),bJr.forEach(t),sHe=r(dwe," \u2014 "),ES=n(dwe,"A",{href:!0});var vJr=s(ES);lHe=r(vJr,"DistilBertConfig"),vJr.forEach(t),iHe=r(dwe," (DistilBERT model)"),dwe.forEach(t),dHe=i(L),sm=n(L,"LI",{});var cwe=s(sm);Ate=n(cwe,"STRONG",{});var FJr=s(Ate);cHe=r(FJr,"dpr"),FJr.forEach(t),fHe=r(cwe," \u2014 "),CS=n(cwe,"A",{href:!0});var TJr=s(CS);mHe=r(TJr,"DPRConfig"),TJr.forEach(t),gHe=r(cwe," (DPR model)"),cwe.forEach(t),hHe=i(L),lm=n(L,"LI",{});var fwe=s(lm);Lte=n(fwe,"STRONG",{});var MJr=s(Lte);pHe=r(MJr,"dpt"),MJr.forEach(t),uHe=r(fwe," \u2014 "),wS=n(fwe,"A",{href:!0});var EJr=s(wS);_He=r(EJr,"DPTConfig"),EJr.forEach(t),bHe=r(fwe," (DPT model)"),fwe.forEach(t),vHe=i(L),im=n(L,"LI",{});var mwe=s(im);yte=n(mwe,"STRONG",{});var CJr=s(yte);FHe=r(CJr,"electra"),CJr.forEach(t),THe=r(mwe," \u2014 "),AS=n(mwe,"A",{href:!0});var wJr=s(AS);MHe=r(wJr,"ElectraConfig"),wJr.forEach(t),EHe=r(mwe," (ELECTRA model)"),mwe.forEach(t),CHe=i(L),dm=n(L,"LI",{});var gwe=s(dm);xte=n(gwe,"STRONG",{});var AJr=s(xte);wHe=r(AJr,"encoder-decoder"),AJr.forEach(t),AHe=r(gwe," \u2014 "),LS=n(gwe,"A",{href:!0});var LJr=s(LS);LHe=r(LJr,"EncoderDecoderConfig"),LJr.forEach(t),yHe=r(gwe," (Encoder decoder model)"),gwe.forEach(t),xHe=i(L),cm=n(L,"LI",{});var hwe=s(cm);$te=n(hwe,"STRONG",{});var yJr=s($te);$He=r(yJr,"flaubert"),yJr.forEach(t),kHe=r(hwe," \u2014 "),yS=n(hwe,"A",{href:!0});var xJr=s(yS);SHe=r(xJr,"FlaubertConfig"),xJr.forEach(t),RHe=r(hwe," (FlauBERT model)"),hwe.forEach(t),PHe=i(L),fm=n(L,"LI",{});var pwe=s(fm);kte=n(pwe,"STRONG",{});var $Jr=s(kte);BHe=r($Jr,"flava"),$Jr.forEach(t),IHe=r(pwe," \u2014 "),xS=n(pwe,"A",{href:!0});var kJr=s(xS);NHe=r(kJr,"FlavaConfig"),kJr.forEach(t),qHe=r(pwe," (FLAVA model)"),pwe.forEach(t),jHe=i(L),mm=n(L,"LI",{});var uwe=s(mm);Ste=n(uwe,"STRONG",{});var SJr=s(Ste);DHe=r(SJr,"fnet"),SJr.forEach(t),GHe=r(uwe," \u2014 "),$S=n(uwe,"A",{href:!0});var RJr=s($S);OHe=r(RJr,"FNetConfig"),RJr.forEach(t),VHe=r(uwe," (FNet model)"),uwe.forEach(t),XHe=i(L),gm=n(L,"LI",{});var _we=s(gm);Rte=n(_we,"STRONG",{});var PJr=s(Rte);zHe=r(PJr,"fsmt"),PJr.forEach(t),WHe=r(_we," \u2014 "),kS=n(_we,"A",{href:!0});var BJr=s(kS);QHe=r(BJr,"FSMTConfig"),BJr.forEach(t),HHe=r(_we," (FairSeq Machine-Translation model)"),_we.forEach(t),UHe=i(L),hm=n(L,"LI",{});var bwe=s(hm);Pte=n(bwe,"STRONG",{});var IJr=s(Pte);JHe=r(IJr,"funnel"),IJr.forEach(t),YHe=r(bwe," \u2014 "),SS=n(bwe,"A",{href:!0});var NJr=s(SS);KHe=r(NJr,"FunnelConfig"),NJr.forEach(t),ZHe=r(bwe," (Funnel Transformer model)"),bwe.forEach(t),eUe=i(L),pm=n(L,"LI",{});var vwe=s(pm);Bte=n(vwe,"STRONG",{});var qJr=s(Bte);oUe=r(qJr,"glpn"),qJr.forEach(t),rUe=r(vwe," \u2014 "),RS=n(vwe,"A",{href:!0});var jJr=s(RS);tUe=r(jJr,"GLPNConfig"),jJr.forEach(t),aUe=r(vwe," (GLPN model)"),vwe.forEach(t),nUe=i(L),um=n(L,"LI",{});var Fwe=s(um);Ite=n(Fwe,"STRONG",{});var DJr=s(Ite);sUe=r(DJr,"gpt2"),DJr.forEach(t),lUe=r(Fwe," \u2014 "),PS=n(Fwe,"A",{href:!0});var GJr=s(PS);iUe=r(GJr,"GPT2Config"),GJr.forEach(t),dUe=r(Fwe," (OpenAI GPT-2 model)"),Fwe.forEach(t),cUe=i(L),_m=n(L,"LI",{});var Twe=s(_m);Nte=n(Twe,"STRONG",{});var OJr=s(Nte);fUe=r(OJr,"gpt_neo"),OJr.forEach(t),mUe=r(Twe," \u2014 "),BS=n(Twe,"A",{href:!0});var VJr=s(BS);gUe=r(VJr,"GPTNeoConfig"),VJr.forEach(t),hUe=r(Twe," (GPT Neo model)"),Twe.forEach(t),pUe=i(L),bm=n(L,"LI",{});var Mwe=s(bm);qte=n(Mwe,"STRONG",{});var XJr=s(qte);uUe=r(XJr,"gpt_neox"),XJr.forEach(t),_Ue=r(Mwe," \u2014 "),IS=n(Mwe,"A",{href:!0});var zJr=s(IS);bUe=r(zJr,"GPTNeoXConfig"),zJr.forEach(t),vUe=r(Mwe," (GPT NeoX model)"),Mwe.forEach(t),FUe=i(L),vm=n(L,"LI",{});var Ewe=s(vm);jte=n(Ewe,"STRONG",{});var WJr=s(jte);TUe=r(WJr,"gptj"),WJr.forEach(t),MUe=r(Ewe," \u2014 "),NS=n(Ewe,"A",{href:!0});var QJr=s(NS);EUe=r(QJr,"GPTJConfig"),QJr.forEach(t),CUe=r(Ewe," (GPT-J model)"),Ewe.forEach(t),wUe=i(L),Fm=n(L,"LI",{});var Cwe=s(Fm);Dte=n(Cwe,"STRONG",{});var HJr=s(Dte);AUe=r(HJr,"hubert"),HJr.forEach(t),LUe=r(Cwe," \u2014 "),qS=n(Cwe,"A",{href:!0});var UJr=s(qS);yUe=r(UJr,"HubertConfig"),UJr.forEach(t),xUe=r(Cwe," (Hubert model)"),Cwe.forEach(t),$Ue=i(L),Tm=n(L,"LI",{});var wwe=s(Tm);Gte=n(wwe,"STRONG",{});var JJr=s(Gte);kUe=r(JJr,"ibert"),JJr.forEach(t),SUe=r(wwe," \u2014 "),jS=n(wwe,"A",{href:!0});var YJr=s(jS);RUe=r(YJr,"IBertConfig"),YJr.forEach(t),PUe=r(wwe," (I-BERT model)"),wwe.forEach(t),BUe=i(L),Mm=n(L,"LI",{});var Awe=s(Mm);Ote=n(Awe,"STRONG",{});var KJr=s(Ote);IUe=r(KJr,"imagegpt"),KJr.forEach(t),NUe=r(Awe," \u2014 "),DS=n(Awe,"A",{href:!0});var ZJr=s(DS);qUe=r(ZJr,"ImageGPTConfig"),ZJr.forEach(t),jUe=r(Awe," (ImageGPT model)"),Awe.forEach(t),DUe=i(L),Em=n(L,"LI",{});var Lwe=s(Em);Vte=n(Lwe,"STRONG",{});var eYr=s(Vte);GUe=r(eYr,"layoutlm"),eYr.forEach(t),OUe=r(Lwe," \u2014 "),GS=n(Lwe,"A",{href:!0});var oYr=s(GS);VUe=r(oYr,"LayoutLMConfig"),oYr.forEach(t),XUe=r(Lwe," (LayoutLM model)"),Lwe.forEach(t),zUe=i(L),Cm=n(L,"LI",{});var ywe=s(Cm);Xte=n(ywe,"STRONG",{});var rYr=s(Xte);WUe=r(rYr,"layoutlmv2"),rYr.forEach(t),QUe=r(ywe," \u2014 "),OS=n(ywe,"A",{href:!0});var tYr=s(OS);HUe=r(tYr,"LayoutLMv2Config"),tYr.forEach(t),UUe=r(ywe," (LayoutLMv2 model)"),ywe.forEach(t),JUe=i(L),wm=n(L,"LI",{});var xwe=s(wm);zte=n(xwe,"STRONG",{});var aYr=s(zte);YUe=r(aYr,"layoutlmv3"),aYr.forEach(t),KUe=r(xwe," \u2014 "),VS=n(xwe,"A",{href:!0});var nYr=s(VS);ZUe=r(nYr,"LayoutLMv3Config"),nYr.forEach(t),eJe=r(xwe," (LayoutLMv3 model)"),xwe.forEach(t),oJe=i(L),Am=n(L,"LI",{});var $we=s(Am);Wte=n($we,"STRONG",{});var sYr=s(Wte);rJe=r(sYr,"led"),sYr.forEach(t),tJe=r($we," \u2014 "),XS=n($we,"A",{href:!0});var lYr=s(XS);aJe=r(lYr,"LEDConfig"),lYr.forEach(t),nJe=r($we," (LED model)"),$we.forEach(t),sJe=i(L),Lm=n(L,"LI",{});var kwe=s(Lm);Qte=n(kwe,"STRONG",{});var iYr=s(Qte);lJe=r(iYr,"levit"),iYr.forEach(t),iJe=r(kwe," \u2014 "),zS=n(kwe,"A",{href:!0});var dYr=s(zS);dJe=r(dYr,"LevitConfig"),dYr.forEach(t),cJe=r(kwe," (LeViT model)"),kwe.forEach(t),fJe=i(L),ym=n(L,"LI",{});var Swe=s(ym);Hte=n(Swe,"STRONG",{});var cYr=s(Hte);mJe=r(cYr,"longformer"),cYr.forEach(t),gJe=r(Swe," \u2014 "),WS=n(Swe,"A",{href:!0});var fYr=s(WS);hJe=r(fYr,"LongformerConfig"),fYr.forEach(t),pJe=r(Swe," (Longformer model)"),Swe.forEach(t),uJe=i(L),xm=n(L,"LI",{});var Rwe=s(xm);Ute=n(Rwe,"STRONG",{});var mYr=s(Ute);_Je=r(mYr,"longt5"),mYr.forEach(t),bJe=r(Rwe," \u2014 "),QS=n(Rwe,"A",{href:!0});var gYr=s(QS);vJe=r(gYr,"LongT5Config"),gYr.forEach(t),FJe=r(Rwe," (LongT5 model)"),Rwe.forEach(t),TJe=i(L),$m=n(L,"LI",{});var Pwe=s($m);Jte=n(Pwe,"STRONG",{});var hYr=s(Jte);MJe=r(hYr,"luke"),hYr.forEach(t),EJe=r(Pwe," \u2014 "),HS=n(Pwe,"A",{href:!0});var pYr=s(HS);CJe=r(pYr,"LukeConfig"),pYr.forEach(t),wJe=r(Pwe," (LUKE model)"),Pwe.forEach(t),AJe=i(L),km=n(L,"LI",{});var Bwe=s(km);Yte=n(Bwe,"STRONG",{});var uYr=s(Yte);LJe=r(uYr,"lxmert"),uYr.forEach(t),yJe=r(Bwe," \u2014 "),US=n(Bwe,"A",{href:!0});var _Yr=s(US);xJe=r(_Yr,"LxmertConfig"),_Yr.forEach(t),$Je=r(Bwe," (LXMERT model)"),Bwe.forEach(t),kJe=i(L),Sm=n(L,"LI",{});var Iwe=s(Sm);Kte=n(Iwe,"STRONG",{});var bYr=s(Kte);SJe=r(bYr,"m2m_100"),bYr.forEach(t),RJe=r(Iwe," \u2014 "),JS=n(Iwe,"A",{href:!0});var vYr=s(JS);PJe=r(vYr,"M2M100Config"),vYr.forEach(t),BJe=r(Iwe," (M2M100 model)"),Iwe.forEach(t),IJe=i(L),Rm=n(L,"LI",{});var Nwe=s(Rm);Zte=n(Nwe,"STRONG",{});var FYr=s(Zte);NJe=r(FYr,"marian"),FYr.forEach(t),qJe=r(Nwe," \u2014 "),YS=n(Nwe,"A",{href:!0});var TYr=s(YS);jJe=r(TYr,"MarianConfig"),TYr.forEach(t),DJe=r(Nwe," (Marian model)"),Nwe.forEach(t),GJe=i(L),Pm=n(L,"LI",{});var qwe=s(Pm);eae=n(qwe,"STRONG",{});var MYr=s(eae);OJe=r(MYr,"maskformer"),MYr.forEach(t),VJe=r(qwe," \u2014 "),KS=n(qwe,"A",{href:!0});var EYr=s(KS);XJe=r(EYr,"MaskFormerConfig"),EYr.forEach(t),zJe=r(qwe," (MaskFormer model)"),qwe.forEach(t),WJe=i(L),Bm=n(L,"LI",{});var jwe=s(Bm);oae=n(jwe,"STRONG",{});var CYr=s(oae);QJe=r(CYr,"mbart"),CYr.forEach(t),HJe=r(jwe," \u2014 "),ZS=n(jwe,"A",{href:!0});var wYr=s(ZS);UJe=r(wYr,"MBartConfig"),wYr.forEach(t),JJe=r(jwe," (mBART model)"),jwe.forEach(t),YJe=i(L),Im=n(L,"LI",{});var Dwe=s(Im);rae=n(Dwe,"STRONG",{});var AYr=s(rae);KJe=r(AYr,"mctct"),AYr.forEach(t),ZJe=r(Dwe," \u2014 "),eR=n(Dwe,"A",{href:!0});var LYr=s(eR);eYe=r(LYr,"MCTCTConfig"),LYr.forEach(t),oYe=r(Dwe," (M-CTC-T model)"),Dwe.forEach(t),rYe=i(L),Nm=n(L,"LI",{});var Gwe=s(Nm);tae=n(Gwe,"STRONG",{});var yYr=s(tae);tYe=r(yYr,"megatron-bert"),yYr.forEach(t),aYe=r(Gwe," \u2014 "),oR=n(Gwe,"A",{href:!0});var xYr=s(oR);nYe=r(xYr,"MegatronBertConfig"),xYr.forEach(t),sYe=r(Gwe," (Megatron-BERT model)"),Gwe.forEach(t),lYe=i(L),qm=n(L,"LI",{});var Owe=s(qm);aae=n(Owe,"STRONG",{});var $Yr=s(aae);iYe=r($Yr,"mobilebert"),$Yr.forEach(t),dYe=r(Owe," \u2014 "),rR=n(Owe,"A",{href:!0});var kYr=s(rR);cYe=r(kYr,"MobileBertConfig"),kYr.forEach(t),fYe=r(Owe," (MobileBERT model)"),Owe.forEach(t),mYe=i(L),jm=n(L,"LI",{});var Vwe=s(jm);nae=n(Vwe,"STRONG",{});var SYr=s(nae);gYe=r(SYr,"mpnet"),SYr.forEach(t),hYe=r(Vwe," \u2014 "),tR=n(Vwe,"A",{href:!0});var RYr=s(tR);pYe=r(RYr,"MPNetConfig"),RYr.forEach(t),uYe=r(Vwe," (MPNet model)"),Vwe.forEach(t),_Ye=i(L),Dm=n(L,"LI",{});var Xwe=s(Dm);sae=n(Xwe,"STRONG",{});var PYr=s(sae);bYe=r(PYr,"mt5"),PYr.forEach(t),vYe=r(Xwe," \u2014 "),aR=n(Xwe,"A",{href:!0});var BYr=s(aR);FYe=r(BYr,"MT5Config"),BYr.forEach(t),TYe=r(Xwe," (MT5 model)"),Xwe.forEach(t),MYe=i(L),Gm=n(L,"LI",{});var zwe=s(Gm);lae=n(zwe,"STRONG",{});var IYr=s(lae);EYe=r(IYr,"nystromformer"),IYr.forEach(t),CYe=r(zwe," \u2014 "),nR=n(zwe,"A",{href:!0});var NYr=s(nR);wYe=r(NYr,"NystromformerConfig"),NYr.forEach(t),AYe=r(zwe," (Nystr\xF6mformer model)"),zwe.forEach(t),LYe=i(L),Om=n(L,"LI",{});var Wwe=s(Om);iae=n(Wwe,"STRONG",{});var qYr=s(iae);yYe=r(qYr,"openai-gpt"),qYr.forEach(t),xYe=r(Wwe," \u2014 "),sR=n(Wwe,"A",{href:!0});var jYr=s(sR);$Ye=r(jYr,"OpenAIGPTConfig"),jYr.forEach(t),kYe=r(Wwe," (OpenAI GPT model)"),Wwe.forEach(t),SYe=i(L),Vm=n(L,"LI",{});var Qwe=s(Vm);dae=n(Qwe,"STRONG",{});var DYr=s(dae);RYe=r(DYr,"opt"),DYr.forEach(t),PYe=r(Qwe," \u2014 "),lR=n(Qwe,"A",{href:!0});var GYr=s(lR);BYe=r(GYr,"OPTConfig"),GYr.forEach(t),IYe=r(Qwe," (OPT model)"),Qwe.forEach(t),NYe=i(L),Xm=n(L,"LI",{});var Hwe=s(Xm);cae=n(Hwe,"STRONG",{});var OYr=s(cae);qYe=r(OYr,"pegasus"),OYr.forEach(t),jYe=r(Hwe," \u2014 "),iR=n(Hwe,"A",{href:!0});var VYr=s(iR);DYe=r(VYr,"PegasusConfig"),VYr.forEach(t),GYe=r(Hwe," (Pegasus model)"),Hwe.forEach(t),OYe=i(L),zm=n(L,"LI",{});var Uwe=s(zm);fae=n(Uwe,"STRONG",{});var XYr=s(fae);VYe=r(XYr,"perceiver"),XYr.forEach(t),XYe=r(Uwe," \u2014 "),dR=n(Uwe,"A",{href:!0});var zYr=s(dR);zYe=r(zYr,"PerceiverConfig"),zYr.forEach(t),WYe=r(Uwe," (Perceiver model)"),Uwe.forEach(t),QYe=i(L),Wm=n(L,"LI",{});var Jwe=s(Wm);mae=n(Jwe,"STRONG",{});var WYr=s(mae);HYe=r(WYr,"plbart"),WYr.forEach(t),UYe=r(Jwe," \u2014 "),cR=n(Jwe,"A",{href:!0});var QYr=s(cR);JYe=r(QYr,"PLBartConfig"),QYr.forEach(t),YYe=r(Jwe," (PLBart model)"),Jwe.forEach(t),KYe=i(L),Qm=n(L,"LI",{});var Ywe=s(Qm);gae=n(Ywe,"STRONG",{});var HYr=s(gae);ZYe=r(HYr,"poolformer"),HYr.forEach(t),eKe=r(Ywe," \u2014 "),fR=n(Ywe,"A",{href:!0});var UYr=s(fR);oKe=r(UYr,"PoolFormerConfig"),UYr.forEach(t),rKe=r(Ywe," (PoolFormer model)"),Ywe.forEach(t),tKe=i(L),Hm=n(L,"LI",{});var Kwe=s(Hm);hae=n(Kwe,"STRONG",{});var JYr=s(hae);aKe=r(JYr,"prophetnet"),JYr.forEach(t),nKe=r(Kwe," \u2014 "),mR=n(Kwe,"A",{href:!0});var YYr=s(mR);sKe=r(YYr,"ProphetNetConfig"),YYr.forEach(t),lKe=r(Kwe," (ProphetNet model)"),Kwe.forEach(t),iKe=i(L),Um=n(L,"LI",{});var Zwe=s(Um);pae=n(Zwe,"STRONG",{});var KYr=s(pae);dKe=r(KYr,"qdqbert"),KYr.forEach(t),cKe=r(Zwe," \u2014 "),gR=n(Zwe,"A",{href:!0});var ZYr=s(gR);fKe=r(ZYr,"QDQBertConfig"),ZYr.forEach(t),mKe=r(Zwe," (QDQBert model)"),Zwe.forEach(t),gKe=i(L),Jm=n(L,"LI",{});var eAe=s(Jm);uae=n(eAe,"STRONG",{});var eKr=s(uae);hKe=r(eKr,"rag"),eKr.forEach(t),pKe=r(eAe," \u2014 "),hR=n(eAe,"A",{href:!0});var oKr=s(hR);uKe=r(oKr,"RagConfig"),oKr.forEach(t),_Ke=r(eAe," (RAG model)"),eAe.forEach(t),bKe=i(L),Ym=n(L,"LI",{});var oAe=s(Ym);_ae=n(oAe,"STRONG",{});var rKr=s(_ae);vKe=r(rKr,"realm"),rKr.forEach(t),FKe=r(oAe," \u2014 "),pR=n(oAe,"A",{href:!0});var tKr=s(pR);TKe=r(tKr,"RealmConfig"),tKr.forEach(t),MKe=r(oAe," (REALM model)"),oAe.forEach(t),EKe=i(L),Km=n(L,"LI",{});var rAe=s(Km);bae=n(rAe,"STRONG",{});var aKr=s(bae);CKe=r(aKr,"reformer"),aKr.forEach(t),wKe=r(rAe," \u2014 "),uR=n(rAe,"A",{href:!0});var nKr=s(uR);AKe=r(nKr,"ReformerConfig"),nKr.forEach(t),LKe=r(rAe," (Reformer model)"),rAe.forEach(t),yKe=i(L),Zm=n(L,"LI",{});var tAe=s(Zm);vae=n(tAe,"STRONG",{});var sKr=s(vae);xKe=r(sKr,"regnet"),sKr.forEach(t),$Ke=r(tAe," \u2014 "),_R=n(tAe,"A",{href:!0});var lKr=s(_R);kKe=r(lKr,"RegNetConfig"),lKr.forEach(t),SKe=r(tAe," (RegNet model)"),tAe.forEach(t),RKe=i(L),eg=n(L,"LI",{});var aAe=s(eg);Fae=n(aAe,"STRONG",{});var iKr=s(Fae);PKe=r(iKr,"rembert"),iKr.forEach(t),BKe=r(aAe," \u2014 "),bR=n(aAe,"A",{href:!0});var dKr=s(bR);IKe=r(dKr,"RemBertConfig"),dKr.forEach(t),NKe=r(aAe," (RemBERT model)"),aAe.forEach(t),qKe=i(L),og=n(L,"LI",{});var nAe=s(og);Tae=n(nAe,"STRONG",{});var cKr=s(Tae);jKe=r(cKr,"resnet"),cKr.forEach(t),DKe=r(nAe," \u2014 "),vR=n(nAe,"A",{href:!0});var fKr=s(vR);GKe=r(fKr,"ResNetConfig"),fKr.forEach(t),OKe=r(nAe," (ResNet model)"),nAe.forEach(t),VKe=i(L),rg=n(L,"LI",{});var sAe=s(rg);Mae=n(sAe,"STRONG",{});var mKr=s(Mae);XKe=r(mKr,"retribert"),mKr.forEach(t),zKe=r(sAe," \u2014 "),FR=n(sAe,"A",{href:!0});var gKr=s(FR);WKe=r(gKr,"RetriBertConfig"),gKr.forEach(t),QKe=r(sAe," (RetriBERT model)"),sAe.forEach(t),HKe=i(L),tg=n(L,"LI",{});var lAe=s(tg);Eae=n(lAe,"STRONG",{});var hKr=s(Eae);UKe=r(hKr,"roberta"),hKr.forEach(t),JKe=r(lAe," \u2014 "),TR=n(lAe,"A",{href:!0});var pKr=s(TR);YKe=r(pKr,"RobertaConfig"),pKr.forEach(t),KKe=r(lAe," (RoBERTa model)"),lAe.forEach(t),ZKe=i(L),ag=n(L,"LI",{});var iAe=s(ag);Cae=n(iAe,"STRONG",{});var uKr=s(Cae);eZe=r(uKr,"roformer"),uKr.forEach(t),oZe=r(iAe," \u2014 "),MR=n(iAe,"A",{href:!0});var _Kr=s(MR);rZe=r(_Kr,"RoFormerConfig"),_Kr.forEach(t),tZe=r(iAe," (RoFormer model)"),iAe.forEach(t),aZe=i(L),ng=n(L,"LI",{});var dAe=s(ng);wae=n(dAe,"STRONG",{});var bKr=s(wae);nZe=r(bKr,"segformer"),bKr.forEach(t),sZe=r(dAe," \u2014 "),ER=n(dAe,"A",{href:!0});var vKr=s(ER);lZe=r(vKr,"SegformerConfig"),vKr.forEach(t),iZe=r(dAe," (SegFormer model)"),dAe.forEach(t),dZe=i(L),sg=n(L,"LI",{});var cAe=s(sg);Aae=n(cAe,"STRONG",{});var FKr=s(Aae);cZe=r(FKr,"sew"),FKr.forEach(t),fZe=r(cAe," \u2014 "),CR=n(cAe,"A",{href:!0});var TKr=s(CR);mZe=r(TKr,"SEWConfig"),TKr.forEach(t),gZe=r(cAe," (SEW model)"),cAe.forEach(t),hZe=i(L),lg=n(L,"LI",{});var fAe=s(lg);Lae=n(fAe,"STRONG",{});var MKr=s(Lae);pZe=r(MKr,"sew-d"),MKr.forEach(t),uZe=r(fAe," \u2014 "),wR=n(fAe,"A",{href:!0});var EKr=s(wR);_Ze=r(EKr,"SEWDConfig"),EKr.forEach(t),bZe=r(fAe," (SEW-D model)"),fAe.forEach(t),vZe=i(L),ig=n(L,"LI",{});var mAe=s(ig);yae=n(mAe,"STRONG",{});var CKr=s(yae);FZe=r(CKr,"speech-encoder-decoder"),CKr.forEach(t),TZe=r(mAe," \u2014 "),AR=n(mAe,"A",{href:!0});var wKr=s(AR);MZe=r(wKr,"SpeechEncoderDecoderConfig"),wKr.forEach(t),EZe=r(mAe," (Speech Encoder decoder model)"),mAe.forEach(t),CZe=i(L),dg=n(L,"LI",{});var gAe=s(dg);xae=n(gAe,"STRONG",{});var AKr=s(xae);wZe=r(AKr,"speech_to_text"),AKr.forEach(t),AZe=r(gAe," \u2014 "),LR=n(gAe,"A",{href:!0});var LKr=s(LR);LZe=r(LKr,"Speech2TextConfig"),LKr.forEach(t),yZe=r(gAe," (Speech2Text model)"),gAe.forEach(t),xZe=i(L),cg=n(L,"LI",{});var hAe=s(cg);$ae=n(hAe,"STRONG",{});var yKr=s($ae);$Ze=r(yKr,"speech_to_text_2"),yKr.forEach(t),kZe=r(hAe," \u2014 "),yR=n(hAe,"A",{href:!0});var xKr=s(yR);SZe=r(xKr,"Speech2Text2Config"),xKr.forEach(t),RZe=r(hAe," (Speech2Text2 model)"),hAe.forEach(t),PZe=i(L),fg=n(L,"LI",{});var pAe=s(fg);kae=n(pAe,"STRONG",{});var $Kr=s(kae);BZe=r($Kr,"splinter"),$Kr.forEach(t),IZe=r(pAe," \u2014 "),xR=n(pAe,"A",{href:!0});var kKr=s(xR);NZe=r(kKr,"SplinterConfig"),kKr.forEach(t),qZe=r(pAe," (Splinter model)"),pAe.forEach(t),jZe=i(L),mg=n(L,"LI",{});var uAe=s(mg);Sae=n(uAe,"STRONG",{});var SKr=s(Sae);DZe=r(SKr,"squeezebert"),SKr.forEach(t),GZe=r(uAe," \u2014 "),$R=n(uAe,"A",{href:!0});var RKr=s($R);OZe=r(RKr,"SqueezeBertConfig"),RKr.forEach(t),VZe=r(uAe," (SqueezeBERT model)"),uAe.forEach(t),XZe=i(L),gg=n(L,"LI",{});var _Ae=s(gg);Rae=n(_Ae,"STRONG",{});var PKr=s(Rae);zZe=r(PKr,"swin"),PKr.forEach(t),WZe=r(_Ae," \u2014 "),kR=n(_Ae,"A",{href:!0});var BKr=s(kR);QZe=r(BKr,"SwinConfig"),BKr.forEach(t),HZe=r(_Ae," (Swin Transformer model)"),_Ae.forEach(t),UZe=i(L),hg=n(L,"LI",{});var bAe=s(hg);Pae=n(bAe,"STRONG",{});var IKr=s(Pae);JZe=r(IKr,"t5"),IKr.forEach(t),YZe=r(bAe," \u2014 "),SR=n(bAe,"A",{href:!0});var NKr=s(SR);KZe=r(NKr,"T5Config"),NKr.forEach(t),ZZe=r(bAe," (T5 model)"),bAe.forEach(t),eeo=i(L),pg=n(L,"LI",{});var vAe=s(pg);Bae=n(vAe,"STRONG",{});var qKr=s(Bae);oeo=r(qKr,"tapas"),qKr.forEach(t),reo=r(vAe," \u2014 "),RR=n(vAe,"A",{href:!0});var jKr=s(RR);teo=r(jKr,"TapasConfig"),jKr.forEach(t),aeo=r(vAe," (TAPAS model)"),vAe.forEach(t),neo=i(L),ug=n(L,"LI",{});var FAe=s(ug);Iae=n(FAe,"STRONG",{});var DKr=s(Iae);seo=r(DKr,"trajectory_transformer"),DKr.forEach(t),leo=r(FAe," \u2014 "),PR=n(FAe,"A",{href:!0});var GKr=s(PR);ieo=r(GKr,"TrajectoryTransformerConfig"),GKr.forEach(t),deo=r(FAe," (Trajectory Transformer model)"),FAe.forEach(t),ceo=i(L),_g=n(L,"LI",{});var TAe=s(_g);Nae=n(TAe,"STRONG",{});var OKr=s(Nae);feo=r(OKr,"transfo-xl"),OKr.forEach(t),meo=r(TAe," \u2014 "),BR=n(TAe,"A",{href:!0});var VKr=s(BR);geo=r(VKr,"TransfoXLConfig"),VKr.forEach(t),heo=r(TAe," (Transformer-XL model)"),TAe.forEach(t),peo=i(L),bg=n(L,"LI",{});var MAe=s(bg);qae=n(MAe,"STRONG",{});var XKr=s(qae);ueo=r(XKr,"trocr"),XKr.forEach(t),_eo=r(MAe," \u2014 "),IR=n(MAe,"A",{href:!0});var zKr=s(IR);beo=r(zKr,"TrOCRConfig"),zKr.forEach(t),veo=r(MAe," (TrOCR model)"),MAe.forEach(t),Feo=i(L),vg=n(L,"LI",{});var EAe=s(vg);jae=n(EAe,"STRONG",{});var WKr=s(jae);Teo=r(WKr,"unispeech"),WKr.forEach(t),Meo=r(EAe," \u2014 "),NR=n(EAe,"A",{href:!0});var QKr=s(NR);Eeo=r(QKr,"UniSpeechConfig"),QKr.forEach(t),Ceo=r(EAe," (UniSpeech model)"),EAe.forEach(t),weo=i(L),Fg=n(L,"LI",{});var CAe=s(Fg);Dae=n(CAe,"STRONG",{});var HKr=s(Dae);Aeo=r(HKr,"unispeech-sat"),HKr.forEach(t),Leo=r(CAe," \u2014 "),qR=n(CAe,"A",{href:!0});var UKr=s(qR);yeo=r(UKr,"UniSpeechSatConfig"),UKr.forEach(t),xeo=r(CAe," (UniSpeechSat model)"),CAe.forEach(t),$eo=i(L),Tg=n(L,"LI",{});var wAe=s(Tg);Gae=n(wAe,"STRONG",{});var JKr=s(Gae);keo=r(JKr,"van"),JKr.forEach(t),Seo=r(wAe," \u2014 "),jR=n(wAe,"A",{href:!0});var YKr=s(jR);Reo=r(YKr,"VanConfig"),YKr.forEach(t),Peo=r(wAe," (VAN model)"),wAe.forEach(t),Beo=i(L),Mg=n(L,"LI",{});var AAe=s(Mg);Oae=n(AAe,"STRONG",{});var KKr=s(Oae);Ieo=r(KKr,"vilt"),KKr.forEach(t),Neo=r(AAe," \u2014 "),DR=n(AAe,"A",{href:!0});var ZKr=s(DR);qeo=r(ZKr,"ViltConfig"),ZKr.forEach(t),jeo=r(AAe," (ViLT model)"),AAe.forEach(t),Deo=i(L),Eg=n(L,"LI",{});var LAe=s(Eg);Vae=n(LAe,"STRONG",{});var eZr=s(Vae);Geo=r(eZr,"vision-encoder-decoder"),eZr.forEach(t),Oeo=r(LAe," \u2014 "),GR=n(LAe,"A",{href:!0});var oZr=s(GR);Veo=r(oZr,"VisionEncoderDecoderConfig"),oZr.forEach(t),Xeo=r(LAe," (Vision Encoder decoder model)"),LAe.forEach(t),zeo=i(L),Cg=n(L,"LI",{});var yAe=s(Cg);Xae=n(yAe,"STRONG",{});var rZr=s(Xae);Weo=r(rZr,"vision-text-dual-encoder"),rZr.forEach(t),Qeo=r(yAe," \u2014 "),OR=n(yAe,"A",{href:!0});var tZr=s(OR);Heo=r(tZr,"VisionTextDualEncoderConfig"),tZr.forEach(t),Ueo=r(yAe," (VisionTextDualEncoder model)"),yAe.forEach(t),Jeo=i(L),wg=n(L,"LI",{});var xAe=s(wg);zae=n(xAe,"STRONG",{});var aZr=s(zae);Yeo=r(aZr,"visual_bert"),aZr.forEach(t),Keo=r(xAe," \u2014 "),VR=n(xAe,"A",{href:!0});var nZr=s(VR);Zeo=r(nZr,"VisualBertConfig"),nZr.forEach(t),eoo=r(xAe," (VisualBERT model)"),xAe.forEach(t),ooo=i(L),Ag=n(L,"LI",{});var $Ae=s(Ag);Wae=n($Ae,"STRONG",{});var sZr=s(Wae);roo=r(sZr,"vit"),sZr.forEach(t),too=r($Ae," \u2014 "),XR=n($Ae,"A",{href:!0});var lZr=s(XR);aoo=r(lZr,"ViTConfig"),lZr.forEach(t),noo=r($Ae," (ViT model)"),$Ae.forEach(t),soo=i(L),Lg=n(L,"LI",{});var kAe=s(Lg);Qae=n(kAe,"STRONG",{});var iZr=s(Qae);loo=r(iZr,"vit_mae"),iZr.forEach(t),ioo=r(kAe," \u2014 "),zR=n(kAe,"A",{href:!0});var dZr=s(zR);doo=r(dZr,"ViTMAEConfig"),dZr.forEach(t),coo=r(kAe," (ViTMAE model)"),kAe.forEach(t),foo=i(L),yg=n(L,"LI",{});var SAe=s(yg);Hae=n(SAe,"STRONG",{});var cZr=s(Hae);moo=r(cZr,"wav2vec2"),cZr.forEach(t),goo=r(SAe," \u2014 "),WR=n(SAe,"A",{href:!0});var fZr=s(WR);hoo=r(fZr,"Wav2Vec2Config"),fZr.forEach(t),poo=r(SAe," (Wav2Vec2 model)"),SAe.forEach(t),uoo=i(L),xg=n(L,"LI",{});var RAe=s(xg);Uae=n(RAe,"STRONG",{});var mZr=s(Uae);_oo=r(mZr,"wav2vec2-conformer"),mZr.forEach(t),boo=r(RAe," \u2014 "),QR=n(RAe,"A",{href:!0});var gZr=s(QR);voo=r(gZr,"Wav2Vec2ConformerConfig"),gZr.forEach(t),Foo=r(RAe," (Wav2Vec2-Conformer model)"),RAe.forEach(t),Too=i(L),$g=n(L,"LI",{});var PAe=s($g);Jae=n(PAe,"STRONG",{});var hZr=s(Jae);Moo=r(hZr,"wavlm"),hZr.forEach(t),Eoo=r(PAe," \u2014 "),HR=n(PAe,"A",{href:!0});var pZr=s(HR);Coo=r(pZr,"WavLMConfig"),pZr.forEach(t),woo=r(PAe," (WavLM model)"),PAe.forEach(t),Aoo=i(L),kg=n(L,"LI",{});var BAe=s(kg);Yae=n(BAe,"STRONG",{});var uZr=s(Yae);Loo=r(uZr,"xglm"),uZr.forEach(t),yoo=r(BAe," \u2014 "),UR=n(BAe,"A",{href:!0});var _Zr=s(UR);xoo=r(_Zr,"XGLMConfig"),_Zr.forEach(t),$oo=r(BAe," (XGLM model)"),BAe.forEach(t),koo=i(L),Sg=n(L,"LI",{});var IAe=s(Sg);Kae=n(IAe,"STRONG",{});var bZr=s(Kae);Soo=r(bZr,"xlm"),bZr.forEach(t),Roo=r(IAe," \u2014 "),JR=n(IAe,"A",{href:!0});var vZr=s(JR);Poo=r(vZr,"XLMConfig"),vZr.forEach(t),Boo=r(IAe," (XLM model)"),IAe.forEach(t),Ioo=i(L),Rg=n(L,"LI",{});var NAe=s(Rg);Zae=n(NAe,"STRONG",{});var FZr=s(Zae);Noo=r(FZr,"xlm-prophetnet"),FZr.forEach(t),qoo=r(NAe," \u2014 "),YR=n(NAe,"A",{href:!0});var TZr=s(YR);joo=r(TZr,"XLMProphetNetConfig"),TZr.forEach(t),Doo=r(NAe," (XLM-ProphetNet model)"),NAe.forEach(t),Goo=i(L),Pg=n(L,"LI",{});var qAe=s(Pg);ene=n(qAe,"STRONG",{});var MZr=s(ene);Ooo=r(MZr,"xlm-roberta"),MZr.forEach(t),Voo=r(qAe," \u2014 "),KR=n(qAe,"A",{href:!0});var EZr=s(KR);Xoo=r(EZr,"XLMRobertaConfig"),EZr.forEach(t),zoo=r(qAe," (XLM-RoBERTa model)"),qAe.forEach(t),Woo=i(L),Bg=n(L,"LI",{});var jAe=s(Bg);one=n(jAe,"STRONG",{});var CZr=s(one);Qoo=r(CZr,"xlm-roberta-xl"),CZr.forEach(t),Hoo=r(jAe," \u2014 "),ZR=n(jAe,"A",{href:!0});var wZr=s(ZR);Uoo=r(wZr,"XLMRobertaXLConfig"),wZr.forEach(t),Joo=r(jAe," (XLM-RoBERTa-XL model)"),jAe.forEach(t),Yoo=i(L),Ig=n(L,"LI",{});var DAe=s(Ig);rne=n(DAe,"STRONG",{});var AZr=s(rne);Koo=r(AZr,"xlnet"),AZr.forEach(t),Zoo=r(DAe," \u2014 "),eP=n(DAe,"A",{href:!0});var LZr=s(eP);ero=r(LZr,"XLNetConfig"),LZr.forEach(t),oro=r(DAe," (XLNet model)"),DAe.forEach(t),rro=i(L),Ng=n(L,"LI",{});var GAe=s(Ng);tne=n(GAe,"STRONG",{});var yZr=s(tne);tro=r(yZr,"yolos"),yZr.forEach(t),aro=r(GAe," \u2014 "),oP=n(GAe,"A",{href:!0});var xZr=s(oP);nro=r(xZr,"YolosConfig"),xZr.forEach(t),sro=r(GAe," (YOLOS model)"),GAe.forEach(t),lro=i(L),qg=n(L,"LI",{});var OAe=s(qg);ane=n(OAe,"STRONG",{});var $Zr=s(ane);iro=r($Zr,"yoso"),$Zr.forEach(t),dro=r(OAe," \u2014 "),rP=n(OAe,"A",{href:!0});var kZr=s(rP);cro=r(kZr,"YosoConfig"),kZr.forEach(t),fro=r(OAe," (YOSO model)"),OAe.forEach(t),L.forEach(t),mro=i(tt),T(jg.$$.fragment,tt),tt.forEach(t),gro=i(rt),Dg=n(rt,"DIV",{class:!0});var aVe=s(Dg);T(AL.$$.fragment,aVe),hro=i(aVe),nne=n(aVe,"P",{});var SZr=s(nne);pro=r(SZr,"Register a new configuration for this class."),SZr.forEach(t),aVe.forEach(t),rt.forEach(t),nGe=i(f),$i=n(f,"H2",{class:!0});var nVe=s($i);Gg=n(nVe,"A",{id:!0,class:!0,href:!0});var RZr=s(Gg);sne=n(RZr,"SPAN",{});var PZr=s(sne);T(LL.$$.fragment,PZr),PZr.forEach(t),RZr.forEach(t),uro=i(nVe),lne=n(nVe,"SPAN",{});var BZr=s(lne);_ro=r(BZr,"AutoTokenizer"),BZr.forEach(t),nVe.forEach(t),sGe=i(f),Ao=n(f,"DIV",{class:!0});var zs=s(Ao);T(yL.$$.fragment,zs),bro=i(zs),xL=n(zs,"P",{});var sVe=s(xL);vro=r(sVe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tP=n(sVe,"A",{href:!0});var IZr=s(tP);Fro=r(IZr,"AutoTokenizer.from_pretrained()"),IZr.forEach(t),Tro=r(sVe," class method."),sVe.forEach(t),Mro=i(zs),$L=n(zs,"P",{});var lVe=s($L);Ero=r(lVe,"This class cannot be instantiated directly using "),ine=n(lVe,"CODE",{});var NZr=s(ine);Cro=r(NZr,"__init__()"),NZr.forEach(t),wro=r(lVe," (throws an error)."),lVe.forEach(t),Aro=i(zs),Ar=n(zs,"DIV",{class:!0});var Ws=s(Ar);T(kL.$$.fragment,Ws),Lro=i(Ws),dne=n(Ws,"P",{});var qZr=s(dne);yro=r(qZr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),qZr.forEach(t),xro=i(Ws),$a=n(Ws,"P",{});var vw=s($a);$ro=r(vw,"The tokenizer class to instantiate is selected based on the "),cne=n(vw,"CODE",{});var jZr=s(cne);kro=r(jZr,"model_type"),jZr.forEach(t),Sro=r(vw,` property of the config object (either
passed as an argument or loaded from `),fne=n(vw,"CODE",{});var DZr=s(fne);Rro=r(DZr,"pretrained_model_name_or_path"),DZr.forEach(t),Pro=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mne=n(vw,"CODE",{});var GZr=s(mne);Bro=r(GZr,"pretrained_model_name_or_path"),GZr.forEach(t),Iro=r(vw,":"),vw.forEach(t),Nro=i(Ws),k=n(Ws,"UL",{});var S=s(k);Nn=n(S,"LI",{});var N$=s(Nn);gne=n(N$,"STRONG",{});var OZr=s(gne);qro=r(OZr,"albert"),OZr.forEach(t),jro=r(N$," \u2014 "),aP=n(N$,"A",{href:!0});var VZr=s(aP);Dro=r(VZr,"AlbertTokenizer"),VZr.forEach(t),Gro=r(N$," or "),nP=n(N$,"A",{href:!0});var XZr=s(nP);Oro=r(XZr,"AlbertTokenizerFast"),XZr.forEach(t),Vro=r(N$," (ALBERT model)"),N$.forEach(t),Xro=i(S),qn=n(S,"LI",{});var q$=s(qn);hne=n(q$,"STRONG",{});var zZr=s(hne);zro=r(zZr,"bart"),zZr.forEach(t),Wro=r(q$," \u2014 "),sP=n(q$,"A",{href:!0});var WZr=s(sP);Qro=r(WZr,"BartTokenizer"),WZr.forEach(t),Hro=r(q$," or "),lP=n(q$,"A",{href:!0});var QZr=s(lP);Uro=r(QZr,"BartTokenizerFast"),QZr.forEach(t),Jro=r(q$," (BART model)"),q$.forEach(t),Yro=i(S),jn=n(S,"LI",{});var j$=s(jn);pne=n(j$,"STRONG",{});var HZr=s(pne);Kro=r(HZr,"barthez"),HZr.forEach(t),Zro=r(j$," \u2014 "),iP=n(j$,"A",{href:!0});var UZr=s(iP);eto=r(UZr,"BarthezTokenizer"),UZr.forEach(t),oto=r(j$," or "),dP=n(j$,"A",{href:!0});var JZr=s(dP);rto=r(JZr,"BarthezTokenizerFast"),JZr.forEach(t),tto=r(j$," (BARThez model)"),j$.forEach(t),ato=i(S),Og=n(S,"LI",{});var VAe=s(Og);une=n(VAe,"STRONG",{});var YZr=s(une);nto=r(YZr,"bartpho"),YZr.forEach(t),sto=r(VAe," \u2014 "),cP=n(VAe,"A",{href:!0});var KZr=s(cP);lto=r(KZr,"BartphoTokenizer"),KZr.forEach(t),ito=r(VAe," (BARTpho model)"),VAe.forEach(t),dto=i(S),Dn=n(S,"LI",{});var D$=s(Dn);_ne=n(D$,"STRONG",{});var ZZr=s(_ne);cto=r(ZZr,"bert"),ZZr.forEach(t),fto=r(D$," \u2014 "),fP=n(D$,"A",{href:!0});var eet=s(fP);mto=r(eet,"BertTokenizer"),eet.forEach(t),gto=r(D$," or "),mP=n(D$,"A",{href:!0});var oet=s(mP);hto=r(oet,"BertTokenizerFast"),oet.forEach(t),pto=r(D$," (BERT model)"),D$.forEach(t),uto=i(S),Vg=n(S,"LI",{});var XAe=s(Vg);bne=n(XAe,"STRONG",{});var ret=s(bne);_to=r(ret,"bert-generation"),ret.forEach(t),bto=r(XAe," \u2014 "),gP=n(XAe,"A",{href:!0});var tet=s(gP);vto=r(tet,"BertGenerationTokenizer"),tet.forEach(t),Fto=r(XAe," (Bert Generation model)"),XAe.forEach(t),Tto=i(S),Xg=n(S,"LI",{});var zAe=s(Xg);vne=n(zAe,"STRONG",{});var aet=s(vne);Mto=r(aet,"bert-japanese"),aet.forEach(t),Eto=r(zAe," \u2014 "),hP=n(zAe,"A",{href:!0});var net=s(hP);Cto=r(net,"BertJapaneseTokenizer"),net.forEach(t),wto=r(zAe," (BertJapanese model)"),zAe.forEach(t),Ato=i(S),zg=n(S,"LI",{});var WAe=s(zg);Fne=n(WAe,"STRONG",{});var set=s(Fne);Lto=r(set,"bertweet"),set.forEach(t),yto=r(WAe," \u2014 "),pP=n(WAe,"A",{href:!0});var iet=s(pP);xto=r(iet,"BertweetTokenizer"),iet.forEach(t),$to=r(WAe," (BERTweet model)"),WAe.forEach(t),kto=i(S),Gn=n(S,"LI",{});var G$=s(Gn);Tne=n(G$,"STRONG",{});var det=s(Tne);Sto=r(det,"big_bird"),det.forEach(t),Rto=r(G$," \u2014 "),uP=n(G$,"A",{href:!0});var cet=s(uP);Pto=r(cet,"BigBirdTokenizer"),cet.forEach(t),Bto=r(G$," or "),_P=n(G$,"A",{href:!0});var fet=s(_P);Ito=r(fet,"BigBirdTokenizerFast"),fet.forEach(t),Nto=r(G$," (BigBird model)"),G$.forEach(t),qto=i(S),On=n(S,"LI",{});var O$=s(On);Mne=n(O$,"STRONG",{});var met=s(Mne);jto=r(met,"bigbird_pegasus"),met.forEach(t),Dto=r(O$," \u2014 "),bP=n(O$,"A",{href:!0});var get=s(bP);Gto=r(get,"PegasusTokenizer"),get.forEach(t),Oto=r(O$," or "),vP=n(O$,"A",{href:!0});var het=s(vP);Vto=r(het,"PegasusTokenizerFast"),het.forEach(t),Xto=r(O$," (BigBird-Pegasus model)"),O$.forEach(t),zto=i(S),Vn=n(S,"LI",{});var V$=s(Vn);Ene=n(V$,"STRONG",{});var pet=s(Ene);Wto=r(pet,"blenderbot"),pet.forEach(t),Qto=r(V$," \u2014 "),FP=n(V$,"A",{href:!0});var uet=s(FP);Hto=r(uet,"BlenderbotTokenizer"),uet.forEach(t),Uto=r(V$," or "),TP=n(V$,"A",{href:!0});var _et=s(TP);Jto=r(_et,"BlenderbotTokenizerFast"),_et.forEach(t),Yto=r(V$," (Blenderbot model)"),V$.forEach(t),Kto=i(S),Wg=n(S,"LI",{});var QAe=s(Wg);Cne=n(QAe,"STRONG",{});var bet=s(Cne);Zto=r(bet,"blenderbot-small"),bet.forEach(t),eao=r(QAe," \u2014 "),MP=n(QAe,"A",{href:!0});var vet=s(MP);oao=r(vet,"BlenderbotSmallTokenizer"),vet.forEach(t),rao=r(QAe," (BlenderbotSmall model)"),QAe.forEach(t),tao=i(S),Qg=n(S,"LI",{});var HAe=s(Qg);wne=n(HAe,"STRONG",{});var Fet=s(wne);aao=r(Fet,"bloom"),Fet.forEach(t),nao=r(HAe," \u2014 "),EP=n(HAe,"A",{href:!0});var Tet=s(EP);sao=r(Tet,"BloomTokenizerFast"),Tet.forEach(t),lao=r(HAe," (BLOOM model)"),HAe.forEach(t),iao=i(S),Hg=n(S,"LI",{});var UAe=s(Hg);Ane=n(UAe,"STRONG",{});var Met=s(Ane);dao=r(Met,"byt5"),Met.forEach(t),cao=r(UAe," \u2014 "),CP=n(UAe,"A",{href:!0});var Eet=s(CP);fao=r(Eet,"ByT5Tokenizer"),Eet.forEach(t),mao=r(UAe," (ByT5 model)"),UAe.forEach(t),gao=i(S),Xn=n(S,"LI",{});var X$=s(Xn);Lne=n(X$,"STRONG",{});var Cet=s(Lne);hao=r(Cet,"camembert"),Cet.forEach(t),pao=r(X$," \u2014 "),wP=n(X$,"A",{href:!0});var wet=s(wP);uao=r(wet,"CamembertTokenizer"),wet.forEach(t),_ao=r(X$," or "),AP=n(X$,"A",{href:!0});var Aet=s(AP);bao=r(Aet,"CamembertTokenizerFast"),Aet.forEach(t),vao=r(X$," (CamemBERT model)"),X$.forEach(t),Fao=i(S),Ug=n(S,"LI",{});var JAe=s(Ug);yne=n(JAe,"STRONG",{});var Let=s(yne);Tao=r(Let,"canine"),Let.forEach(t),Mao=r(JAe," \u2014 "),LP=n(JAe,"A",{href:!0});var yet=s(LP);Eao=r(yet,"CanineTokenizer"),yet.forEach(t),Cao=r(JAe," (CANINE model)"),JAe.forEach(t),wao=i(S),zn=n(S,"LI",{});var z$=s(zn);xne=n(z$,"STRONG",{});var xet=s(xne);Aao=r(xet,"clip"),xet.forEach(t),Lao=r(z$," \u2014 "),yP=n(z$,"A",{href:!0});var $et=s(yP);yao=r($et,"CLIPTokenizer"),$et.forEach(t),xao=r(z$," or "),xP=n(z$,"A",{href:!0});var ket=s(xP);$ao=r(ket,"CLIPTokenizerFast"),ket.forEach(t),kao=r(z$," (CLIP model)"),z$.forEach(t),Sao=i(S),Wn=n(S,"LI",{});var W$=s(Wn);$ne=n(W$,"STRONG",{});var Set=s($ne);Rao=r(Set,"convbert"),Set.forEach(t),Pao=r(W$," \u2014 "),$P=n(W$,"A",{href:!0});var Ret=s($P);Bao=r(Ret,"ConvBertTokenizer"),Ret.forEach(t),Iao=r(W$," or "),kP=n(W$,"A",{href:!0});var Pet=s(kP);Nao=r(Pet,"ConvBertTokenizerFast"),Pet.forEach(t),qao=r(W$," (ConvBERT model)"),W$.forEach(t),jao=i(S),Qn=n(S,"LI",{});var Q$=s(Qn);kne=n(Q$,"STRONG",{});var Bet=s(kne);Dao=r(Bet,"cpm"),Bet.forEach(t),Gao=r(Q$," \u2014 "),SP=n(Q$,"A",{href:!0});var Iet=s(SP);Oao=r(Iet,"CpmTokenizer"),Iet.forEach(t),Vao=r(Q$," or "),RP=n(Q$,"A",{href:!0});var Net=s(RP);Xao=r(Net,"CpmTokenizerFast"),Net.forEach(t),zao=r(Q$," (CPM model)"),Q$.forEach(t),Wao=i(S),Jg=n(S,"LI",{});var YAe=s(Jg);Sne=n(YAe,"STRONG",{});var qet=s(Sne);Qao=r(qet,"ctrl"),qet.forEach(t),Hao=r(YAe," \u2014 "),PP=n(YAe,"A",{href:!0});var jet=s(PP);Uao=r(jet,"CTRLTokenizer"),jet.forEach(t),Jao=r(YAe," (CTRL model)"),YAe.forEach(t),Yao=i(S),Hn=n(S,"LI",{});var H$=s(Hn);Rne=n(H$,"STRONG",{});var Det=s(Rne);Kao=r(Det,"data2vec-text"),Det.forEach(t),Zao=r(H$," \u2014 "),BP=n(H$,"A",{href:!0});var Get=s(BP);eno=r(Get,"RobertaTokenizer"),Get.forEach(t),ono=r(H$," or "),IP=n(H$,"A",{href:!0});var Oet=s(IP);rno=r(Oet,"RobertaTokenizerFast"),Oet.forEach(t),tno=r(H$," (Data2VecText model)"),H$.forEach(t),ano=i(S),Un=n(S,"LI",{});var U$=s(Un);Pne=n(U$,"STRONG",{});var Vet=s(Pne);nno=r(Vet,"deberta"),Vet.forEach(t),sno=r(U$," \u2014 "),NP=n(U$,"A",{href:!0});var Xet=s(NP);lno=r(Xet,"DebertaTokenizer"),Xet.forEach(t),ino=r(U$," or "),qP=n(U$,"A",{href:!0});var zet=s(qP);dno=r(zet,"DebertaTokenizerFast"),zet.forEach(t),cno=r(U$," (DeBERTa model)"),U$.forEach(t),fno=i(S),Jn=n(S,"LI",{});var J$=s(Jn);Bne=n(J$,"STRONG",{});var Wet=s(Bne);mno=r(Wet,"deberta-v2"),Wet.forEach(t),gno=r(J$," \u2014 "),jP=n(J$,"A",{href:!0});var Qet=s(jP);hno=r(Qet,"DebertaV2Tokenizer"),Qet.forEach(t),pno=r(J$," or "),DP=n(J$,"A",{href:!0});var Het=s(DP);uno=r(Het,"DebertaV2TokenizerFast"),Het.forEach(t),_no=r(J$," (DeBERTa-v2 model)"),J$.forEach(t),bno=i(S),Yn=n(S,"LI",{});var Y$=s(Yn);Ine=n(Y$,"STRONG",{});var Uet=s(Ine);vno=r(Uet,"distilbert"),Uet.forEach(t),Fno=r(Y$," \u2014 "),GP=n(Y$,"A",{href:!0});var Jet=s(GP);Tno=r(Jet,"DistilBertTokenizer"),Jet.forEach(t),Mno=r(Y$," or "),OP=n(Y$,"A",{href:!0});var Yet=s(OP);Eno=r(Yet,"DistilBertTokenizerFast"),Yet.forEach(t),Cno=r(Y$," (DistilBERT model)"),Y$.forEach(t),wno=i(S),Kn=n(S,"LI",{});var K$=s(Kn);Nne=n(K$,"STRONG",{});var Ket=s(Nne);Ano=r(Ket,"dpr"),Ket.forEach(t),Lno=r(K$," \u2014 "),VP=n(K$,"A",{href:!0});var Zet=s(VP);yno=r(Zet,"DPRQuestionEncoderTokenizer"),Zet.forEach(t),xno=r(K$," or "),XP=n(K$,"A",{href:!0});var eot=s(XP);$no=r(eot,"DPRQuestionEncoderTokenizerFast"),eot.forEach(t),kno=r(K$," (DPR model)"),K$.forEach(t),Sno=i(S),Zn=n(S,"LI",{});var Z$=s(Zn);qne=n(Z$,"STRONG",{});var oot=s(qne);Rno=r(oot,"electra"),oot.forEach(t),Pno=r(Z$," \u2014 "),zP=n(Z$,"A",{href:!0});var rot=s(zP);Bno=r(rot,"ElectraTokenizer"),rot.forEach(t),Ino=r(Z$," or "),WP=n(Z$,"A",{href:!0});var tot=s(WP);Nno=r(tot,"ElectraTokenizerFast"),tot.forEach(t),qno=r(Z$," (ELECTRA model)"),Z$.forEach(t),jno=i(S),Yg=n(S,"LI",{});var KAe=s(Yg);jne=n(KAe,"STRONG",{});var aot=s(jne);Dno=r(aot,"flaubert"),aot.forEach(t),Gno=r(KAe," \u2014 "),QP=n(KAe,"A",{href:!0});var not=s(QP);Ono=r(not,"FlaubertTokenizer"),not.forEach(t),Vno=r(KAe," (FlauBERT model)"),KAe.forEach(t),Xno=i(S),es=n(S,"LI",{});var ek=s(es);Dne=n(ek,"STRONG",{});var sot=s(Dne);zno=r(sot,"fnet"),sot.forEach(t),Wno=r(ek," \u2014 "),HP=n(ek,"A",{href:!0});var lot=s(HP);Qno=r(lot,"FNetTokenizer"),lot.forEach(t),Hno=r(ek," or "),UP=n(ek,"A",{href:!0});var iot=s(UP);Uno=r(iot,"FNetTokenizerFast"),iot.forEach(t),Jno=r(ek," (FNet model)"),ek.forEach(t),Yno=i(S),Kg=n(S,"LI",{});var ZAe=s(Kg);Gne=n(ZAe,"STRONG",{});var dot=s(Gne);Kno=r(dot,"fsmt"),dot.forEach(t),Zno=r(ZAe," \u2014 "),JP=n(ZAe,"A",{href:!0});var cot=s(JP);eso=r(cot,"FSMTTokenizer"),cot.forEach(t),oso=r(ZAe," (FairSeq Machine-Translation model)"),ZAe.forEach(t),rso=i(S),os=n(S,"LI",{});var ok=s(os);One=n(ok,"STRONG",{});var fot=s(One);tso=r(fot,"funnel"),fot.forEach(t),aso=r(ok," \u2014 "),YP=n(ok,"A",{href:!0});var mot=s(YP);nso=r(mot,"FunnelTokenizer"),mot.forEach(t),sso=r(ok," or "),KP=n(ok,"A",{href:!0});var got=s(KP);lso=r(got,"FunnelTokenizerFast"),got.forEach(t),iso=r(ok," (Funnel Transformer model)"),ok.forEach(t),dso=i(S),rs=n(S,"LI",{});var rk=s(rs);Vne=n(rk,"STRONG",{});var hot=s(Vne);cso=r(hot,"gpt2"),hot.forEach(t),fso=r(rk," \u2014 "),ZP=n(rk,"A",{href:!0});var pot=s(ZP);mso=r(pot,"GPT2Tokenizer"),pot.forEach(t),gso=r(rk," or "),eB=n(rk,"A",{href:!0});var uot=s(eB);hso=r(uot,"GPT2TokenizerFast"),uot.forEach(t),pso=r(rk," (OpenAI GPT-2 model)"),rk.forEach(t),uso=i(S),ts=n(S,"LI",{});var tk=s(ts);Xne=n(tk,"STRONG",{});var _ot=s(Xne);_so=r(_ot,"gpt_neo"),_ot.forEach(t),bso=r(tk," \u2014 "),oB=n(tk,"A",{href:!0});var bot=s(oB);vso=r(bot,"GPT2Tokenizer"),bot.forEach(t),Fso=r(tk," or "),rB=n(tk,"A",{href:!0});var vot=s(rB);Tso=r(vot,"GPT2TokenizerFast"),vot.forEach(t),Mso=r(tk," (GPT Neo model)"),tk.forEach(t),Eso=i(S),Zg=n(S,"LI",{});var eLe=s(Zg);zne=n(eLe,"STRONG",{});var Fot=s(zne);Cso=r(Fot,"gpt_neox"),Fot.forEach(t),wso=r(eLe," \u2014 "),tB=n(eLe,"A",{href:!0});var Tot=s(tB);Aso=r(Tot,"GPTNeoXTokenizerFast"),Tot.forEach(t),Lso=r(eLe," (GPT NeoX model)"),eLe.forEach(t),yso=i(S),as=n(S,"LI",{});var ak=s(as);Wne=n(ak,"STRONG",{});var Mot=s(Wne);xso=r(Mot,"gptj"),Mot.forEach(t),$so=r(ak," \u2014 "),aB=n(ak,"A",{href:!0});var Eot=s(aB);kso=r(Eot,"GPT2Tokenizer"),Eot.forEach(t),Sso=r(ak," or "),nB=n(ak,"A",{href:!0});var Cot=s(nB);Rso=r(Cot,"GPT2TokenizerFast"),Cot.forEach(t),Pso=r(ak," (GPT-J model)"),ak.forEach(t),Bso=i(S),ns=n(S,"LI",{});var nk=s(ns);Qne=n(nk,"STRONG",{});var wot=s(Qne);Iso=r(wot,"herbert"),wot.forEach(t),Nso=r(nk," \u2014 "),sB=n(nk,"A",{href:!0});var Aot=s(sB);qso=r(Aot,"HerbertTokenizer"),Aot.forEach(t),jso=r(nk," or "),lB=n(nk,"A",{href:!0});var Lot=s(lB);Dso=r(Lot,"HerbertTokenizerFast"),Lot.forEach(t),Gso=r(nk," (HerBERT model)"),nk.forEach(t),Oso=i(S),eh=n(S,"LI",{});var oLe=s(eh);Hne=n(oLe,"STRONG",{});var yot=s(Hne);Vso=r(yot,"hubert"),yot.forEach(t),Xso=r(oLe," \u2014 "),iB=n(oLe,"A",{href:!0});var xot=s(iB);zso=r(xot,"Wav2Vec2CTCTokenizer"),xot.forEach(t),Wso=r(oLe," (Hubert model)"),oLe.forEach(t),Qso=i(S),ss=n(S,"LI",{});var sk=s(ss);Une=n(sk,"STRONG",{});var $ot=s(Une);Hso=r($ot,"ibert"),$ot.forEach(t),Uso=r(sk," \u2014 "),dB=n(sk,"A",{href:!0});var kot=s(dB);Jso=r(kot,"RobertaTokenizer"),kot.forEach(t),Yso=r(sk," or "),cB=n(sk,"A",{href:!0});var Sot=s(cB);Kso=r(Sot,"RobertaTokenizerFast"),Sot.forEach(t),Zso=r(sk," (I-BERT model)"),sk.forEach(t),elo=i(S),ls=n(S,"LI",{});var lk=s(ls);Jne=n(lk,"STRONG",{});var Rot=s(Jne);olo=r(Rot,"layoutlm"),Rot.forEach(t),rlo=r(lk," \u2014 "),fB=n(lk,"A",{href:!0});var Pot=s(fB);tlo=r(Pot,"LayoutLMTokenizer"),Pot.forEach(t),alo=r(lk," or "),mB=n(lk,"A",{href:!0});var Bot=s(mB);nlo=r(Bot,"LayoutLMTokenizerFast"),Bot.forEach(t),slo=r(lk," (LayoutLM model)"),lk.forEach(t),llo=i(S),is=n(S,"LI",{});var ik=s(is);Yne=n(ik,"STRONG",{});var Iot=s(Yne);ilo=r(Iot,"layoutlmv2"),Iot.forEach(t),dlo=r(ik," \u2014 "),gB=n(ik,"A",{href:!0});var Not=s(gB);clo=r(Not,"LayoutLMv2Tokenizer"),Not.forEach(t),flo=r(ik," or "),hB=n(ik,"A",{href:!0});var qot=s(hB);mlo=r(qot,"LayoutLMv2TokenizerFast"),qot.forEach(t),glo=r(ik," (LayoutLMv2 model)"),ik.forEach(t),hlo=i(S),ds=n(S,"LI",{});var dk=s(ds);Kne=n(dk,"STRONG",{});var jot=s(Kne);plo=r(jot,"layoutlmv3"),jot.forEach(t),ulo=r(dk," \u2014 "),pB=n(dk,"A",{href:!0});var Dot=s(pB);_lo=r(Dot,"LayoutLMv3Tokenizer"),Dot.forEach(t),blo=r(dk," or "),uB=n(dk,"A",{href:!0});var Got=s(uB);vlo=r(Got,"LayoutLMv3TokenizerFast"),Got.forEach(t),Flo=r(dk," (LayoutLMv3 model)"),dk.forEach(t),Tlo=i(S),cs=n(S,"LI",{});var ck=s(cs);Zne=n(ck,"STRONG",{});var Oot=s(Zne);Mlo=r(Oot,"layoutxlm"),Oot.forEach(t),Elo=r(ck," \u2014 "),_B=n(ck,"A",{href:!0});var Vot=s(_B);Clo=r(Vot,"LayoutXLMTokenizer"),Vot.forEach(t),wlo=r(ck," or "),bB=n(ck,"A",{href:!0});var Xot=s(bB);Alo=r(Xot,"LayoutXLMTokenizerFast"),Xot.forEach(t),Llo=r(ck," (LayoutXLM model)"),ck.forEach(t),ylo=i(S),fs=n(S,"LI",{});var fk=s(fs);ese=n(fk,"STRONG",{});var zot=s(ese);xlo=r(zot,"led"),zot.forEach(t),$lo=r(fk," \u2014 "),vB=n(fk,"A",{href:!0});var Wot=s(vB);klo=r(Wot,"LEDTokenizer"),Wot.forEach(t),Slo=r(fk," or "),FB=n(fk,"A",{href:!0});var Qot=s(FB);Rlo=r(Qot,"LEDTokenizerFast"),Qot.forEach(t),Plo=r(fk," (LED model)"),fk.forEach(t),Blo=i(S),ms=n(S,"LI",{});var mk=s(ms);ose=n(mk,"STRONG",{});var Hot=s(ose);Ilo=r(Hot,"longformer"),Hot.forEach(t),Nlo=r(mk," \u2014 "),TB=n(mk,"A",{href:!0});var Uot=s(TB);qlo=r(Uot,"LongformerTokenizer"),Uot.forEach(t),jlo=r(mk," or "),MB=n(mk,"A",{href:!0});var Jot=s(MB);Dlo=r(Jot,"LongformerTokenizerFast"),Jot.forEach(t),Glo=r(mk," (Longformer model)"),mk.forEach(t),Olo=i(S),gs=n(S,"LI",{});var gk=s(gs);rse=n(gk,"STRONG",{});var Yot=s(rse);Vlo=r(Yot,"longt5"),Yot.forEach(t),Xlo=r(gk," \u2014 "),EB=n(gk,"A",{href:!0});var Kot=s(EB);zlo=r(Kot,"T5Tokenizer"),Kot.forEach(t),Wlo=r(gk," or "),CB=n(gk,"A",{href:!0});var Zot=s(CB);Qlo=r(Zot,"T5TokenizerFast"),Zot.forEach(t),Hlo=r(gk," (LongT5 model)"),gk.forEach(t),Ulo=i(S),oh=n(S,"LI",{});var rLe=s(oh);tse=n(rLe,"STRONG",{});var ert=s(tse);Jlo=r(ert,"luke"),ert.forEach(t),Ylo=r(rLe," \u2014 "),wB=n(rLe,"A",{href:!0});var ort=s(wB);Klo=r(ort,"LukeTokenizer"),ort.forEach(t),Zlo=r(rLe," (LUKE model)"),rLe.forEach(t),eio=i(S),hs=n(S,"LI",{});var hk=s(hs);ase=n(hk,"STRONG",{});var rrt=s(ase);oio=r(rrt,"lxmert"),rrt.forEach(t),rio=r(hk," \u2014 "),AB=n(hk,"A",{href:!0});var trt=s(AB);tio=r(trt,"LxmertTokenizer"),trt.forEach(t),aio=r(hk," or "),LB=n(hk,"A",{href:!0});var art=s(LB);nio=r(art,"LxmertTokenizerFast"),art.forEach(t),sio=r(hk," (LXMERT model)"),hk.forEach(t),lio=i(S),rh=n(S,"LI",{});var tLe=s(rh);nse=n(tLe,"STRONG",{});var nrt=s(nse);iio=r(nrt,"m2m_100"),nrt.forEach(t),dio=r(tLe," \u2014 "),yB=n(tLe,"A",{href:!0});var srt=s(yB);cio=r(srt,"M2M100Tokenizer"),srt.forEach(t),fio=r(tLe," (M2M100 model)"),tLe.forEach(t),mio=i(S),th=n(S,"LI",{});var aLe=s(th);sse=n(aLe,"STRONG",{});var lrt=s(sse);gio=r(lrt,"marian"),lrt.forEach(t),hio=r(aLe," \u2014 "),xB=n(aLe,"A",{href:!0});var irt=s(xB);pio=r(irt,"MarianTokenizer"),irt.forEach(t),uio=r(aLe," (Marian model)"),aLe.forEach(t),_io=i(S),ps=n(S,"LI",{});var pk=s(ps);lse=n(pk,"STRONG",{});var drt=s(lse);bio=r(drt,"mbart"),drt.forEach(t),vio=r(pk," \u2014 "),$B=n(pk,"A",{href:!0});var crt=s($B);Fio=r(crt,"MBartTokenizer"),crt.forEach(t),Tio=r(pk," or "),kB=n(pk,"A",{href:!0});var frt=s(kB);Mio=r(frt,"MBartTokenizerFast"),frt.forEach(t),Eio=r(pk," (mBART model)"),pk.forEach(t),Cio=i(S),us=n(S,"LI",{});var uk=s(us);ise=n(uk,"STRONG",{});var mrt=s(ise);wio=r(mrt,"mbart50"),mrt.forEach(t),Aio=r(uk," \u2014 "),SB=n(uk,"A",{href:!0});var grt=s(SB);Lio=r(grt,"MBart50Tokenizer"),grt.forEach(t),yio=r(uk," or "),RB=n(uk,"A",{href:!0});var hrt=s(RB);xio=r(hrt,"MBart50TokenizerFast"),hrt.forEach(t),$io=r(uk," (mBART-50 model)"),uk.forEach(t),kio=i(S),_s=n(S,"LI",{});var _k=s(_s);dse=n(_k,"STRONG",{});var prt=s(dse);Sio=r(prt,"megatron-bert"),prt.forEach(t),Rio=r(_k," \u2014 "),PB=n(_k,"A",{href:!0});var urt=s(PB);Pio=r(urt,"BertTokenizer"),urt.forEach(t),Bio=r(_k," or "),BB=n(_k,"A",{href:!0});var _rt=s(BB);Iio=r(_rt,"BertTokenizerFast"),_rt.forEach(t),Nio=r(_k," (Megatron-BERT model)"),_k.forEach(t),qio=i(S),ah=n(S,"LI",{});var nLe=s(ah);cse=n(nLe,"STRONG",{});var brt=s(cse);jio=r(brt,"mluke"),brt.forEach(t),Dio=r(nLe," \u2014 "),IB=n(nLe,"A",{href:!0});var vrt=s(IB);Gio=r(vrt,"MLukeTokenizer"),vrt.forEach(t),Oio=r(nLe," (mLUKE model)"),nLe.forEach(t),Vio=i(S),bs=n(S,"LI",{});var bk=s(bs);fse=n(bk,"STRONG",{});var Frt=s(fse);Xio=r(Frt,"mobilebert"),Frt.forEach(t),zio=r(bk," \u2014 "),NB=n(bk,"A",{href:!0});var Trt=s(NB);Wio=r(Trt,"MobileBertTokenizer"),Trt.forEach(t),Qio=r(bk," or "),qB=n(bk,"A",{href:!0});var Mrt=s(qB);Hio=r(Mrt,"MobileBertTokenizerFast"),Mrt.forEach(t),Uio=r(bk," (MobileBERT model)"),bk.forEach(t),Jio=i(S),vs=n(S,"LI",{});var vk=s(vs);mse=n(vk,"STRONG",{});var Ert=s(mse);Yio=r(Ert,"mpnet"),Ert.forEach(t),Kio=r(vk," \u2014 "),jB=n(vk,"A",{href:!0});var Crt=s(jB);Zio=r(Crt,"MPNetTokenizer"),Crt.forEach(t),edo=r(vk," or "),DB=n(vk,"A",{href:!0});var wrt=s(DB);odo=r(wrt,"MPNetTokenizerFast"),wrt.forEach(t),rdo=r(vk," (MPNet model)"),vk.forEach(t),tdo=i(S),Fs=n(S,"LI",{});var Fk=s(Fs);gse=n(Fk,"STRONG",{});var Art=s(gse);ado=r(Art,"mt5"),Art.forEach(t),ndo=r(Fk," \u2014 "),GB=n(Fk,"A",{href:!0});var Lrt=s(GB);sdo=r(Lrt,"MT5Tokenizer"),Lrt.forEach(t),ldo=r(Fk," or "),OB=n(Fk,"A",{href:!0});var yrt=s(OB);ido=r(yrt,"MT5TokenizerFast"),yrt.forEach(t),ddo=r(Fk," (MT5 model)"),Fk.forEach(t),cdo=i(S),Ts=n(S,"LI",{});var Tk=s(Ts);hse=n(Tk,"STRONG",{});var xrt=s(hse);fdo=r(xrt,"nystromformer"),xrt.forEach(t),mdo=r(Tk," \u2014 "),VB=n(Tk,"A",{href:!0});var $rt=s(VB);gdo=r($rt,"AlbertTokenizer"),$rt.forEach(t),hdo=r(Tk," or "),XB=n(Tk,"A",{href:!0});var krt=s(XB);pdo=r(krt,"AlbertTokenizerFast"),krt.forEach(t),udo=r(Tk," (Nystr\xF6mformer model)"),Tk.forEach(t),_do=i(S),Ms=n(S,"LI",{});var Mk=s(Ms);pse=n(Mk,"STRONG",{});var Srt=s(pse);bdo=r(Srt,"openai-gpt"),Srt.forEach(t),vdo=r(Mk," \u2014 "),zB=n(Mk,"A",{href:!0});var Rrt=s(zB);Fdo=r(Rrt,"OpenAIGPTTokenizer"),Rrt.forEach(t),Tdo=r(Mk," or "),WB=n(Mk,"A",{href:!0});var Prt=s(WB);Mdo=r(Prt,"OpenAIGPTTokenizerFast"),Prt.forEach(t),Edo=r(Mk," (OpenAI GPT model)"),Mk.forEach(t),Cdo=i(S),nh=n(S,"LI",{});var sLe=s(nh);use=n(sLe,"STRONG",{});var Brt=s(use);wdo=r(Brt,"opt"),Brt.forEach(t),Ado=r(sLe," \u2014 "),QB=n(sLe,"A",{href:!0});var Irt=s(QB);Ldo=r(Irt,"GPT2Tokenizer"),Irt.forEach(t),ydo=r(sLe," (OPT model)"),sLe.forEach(t),xdo=i(S),Es=n(S,"LI",{});var Ek=s(Es);_se=n(Ek,"STRONG",{});var Nrt=s(_se);$do=r(Nrt,"pegasus"),Nrt.forEach(t),kdo=r(Ek," \u2014 "),HB=n(Ek,"A",{href:!0});var qrt=s(HB);Sdo=r(qrt,"PegasusTokenizer"),qrt.forEach(t),Rdo=r(Ek," or "),UB=n(Ek,"A",{href:!0});var jrt=s(UB);Pdo=r(jrt,"PegasusTokenizerFast"),jrt.forEach(t),Bdo=r(Ek," (Pegasus model)"),Ek.forEach(t),Ido=i(S),sh=n(S,"LI",{});var lLe=s(sh);bse=n(lLe,"STRONG",{});var Drt=s(bse);Ndo=r(Drt,"perceiver"),Drt.forEach(t),qdo=r(lLe," \u2014 "),JB=n(lLe,"A",{href:!0});var Grt=s(JB);jdo=r(Grt,"PerceiverTokenizer"),Grt.forEach(t),Ddo=r(lLe," (Perceiver model)"),lLe.forEach(t),Gdo=i(S),lh=n(S,"LI",{});var iLe=s(lh);vse=n(iLe,"STRONG",{});var Ort=s(vse);Odo=r(Ort,"phobert"),Ort.forEach(t),Vdo=r(iLe," \u2014 "),YB=n(iLe,"A",{href:!0});var Vrt=s(YB);Xdo=r(Vrt,"PhobertTokenizer"),Vrt.forEach(t),zdo=r(iLe," (PhoBERT model)"),iLe.forEach(t),Wdo=i(S),ih=n(S,"LI",{});var dLe=s(ih);Fse=n(dLe,"STRONG",{});var Xrt=s(Fse);Qdo=r(Xrt,"plbart"),Xrt.forEach(t),Hdo=r(dLe," \u2014 "),KB=n(dLe,"A",{href:!0});var zrt=s(KB);Udo=r(zrt,"PLBartTokenizer"),zrt.forEach(t),Jdo=r(dLe," (PLBart model)"),dLe.forEach(t),Ydo=i(S),dh=n(S,"LI",{});var cLe=s(dh);Tse=n(cLe,"STRONG",{});var Wrt=s(Tse);Kdo=r(Wrt,"prophetnet"),Wrt.forEach(t),Zdo=r(cLe," \u2014 "),ZB=n(cLe,"A",{href:!0});var Qrt=s(ZB);eco=r(Qrt,"ProphetNetTokenizer"),Qrt.forEach(t),oco=r(cLe," (ProphetNet model)"),cLe.forEach(t),rco=i(S),Cs=n(S,"LI",{});var Ck=s(Cs);Mse=n(Ck,"STRONG",{});var Hrt=s(Mse);tco=r(Hrt,"qdqbert"),Hrt.forEach(t),aco=r(Ck," \u2014 "),eI=n(Ck,"A",{href:!0});var Urt=s(eI);nco=r(Urt,"BertTokenizer"),Urt.forEach(t),sco=r(Ck," or "),oI=n(Ck,"A",{href:!0});var Jrt=s(oI);lco=r(Jrt,"BertTokenizerFast"),Jrt.forEach(t),ico=r(Ck," (QDQBert model)"),Ck.forEach(t),dco=i(S),ch=n(S,"LI",{});var fLe=s(ch);Ese=n(fLe,"STRONG",{});var Yrt=s(Ese);cco=r(Yrt,"rag"),Yrt.forEach(t),fco=r(fLe," \u2014 "),rI=n(fLe,"A",{href:!0});var Krt=s(rI);mco=r(Krt,"RagTokenizer"),Krt.forEach(t),gco=r(fLe," (RAG model)"),fLe.forEach(t),hco=i(S),ws=n(S,"LI",{});var wk=s(ws);Cse=n(wk,"STRONG",{});var Zrt=s(Cse);pco=r(Zrt,"realm"),Zrt.forEach(t),uco=r(wk," \u2014 "),tI=n(wk,"A",{href:!0});var ett=s(tI);_co=r(ett,"RealmTokenizer"),ett.forEach(t),bco=r(wk," or "),aI=n(wk,"A",{href:!0});var ott=s(aI);vco=r(ott,"RealmTokenizerFast"),ott.forEach(t),Fco=r(wk," (REALM model)"),wk.forEach(t),Tco=i(S),As=n(S,"LI",{});var Ak=s(As);wse=n(Ak,"STRONG",{});var rtt=s(wse);Mco=r(rtt,"reformer"),rtt.forEach(t),Eco=r(Ak," \u2014 "),nI=n(Ak,"A",{href:!0});var ttt=s(nI);Cco=r(ttt,"ReformerTokenizer"),ttt.forEach(t),wco=r(Ak," or "),sI=n(Ak,"A",{href:!0});var att=s(sI);Aco=r(att,"ReformerTokenizerFast"),att.forEach(t),Lco=r(Ak," (Reformer model)"),Ak.forEach(t),yco=i(S),Ls=n(S,"LI",{});var Lk=s(Ls);Ase=n(Lk,"STRONG",{});var ntt=s(Ase);xco=r(ntt,"rembert"),ntt.forEach(t),$co=r(Lk," \u2014 "),lI=n(Lk,"A",{href:!0});var stt=s(lI);kco=r(stt,"RemBertTokenizer"),stt.forEach(t),Sco=r(Lk," or "),iI=n(Lk,"A",{href:!0});var ltt=s(iI);Rco=r(ltt,"RemBertTokenizerFast"),ltt.forEach(t),Pco=r(Lk," (RemBERT model)"),Lk.forEach(t),Bco=i(S),ys=n(S,"LI",{});var yk=s(ys);Lse=n(yk,"STRONG",{});var itt=s(Lse);Ico=r(itt,"retribert"),itt.forEach(t),Nco=r(yk," \u2014 "),dI=n(yk,"A",{href:!0});var dtt=s(dI);qco=r(dtt,"RetriBertTokenizer"),dtt.forEach(t),jco=r(yk," or "),cI=n(yk,"A",{href:!0});var ctt=s(cI);Dco=r(ctt,"RetriBertTokenizerFast"),ctt.forEach(t),Gco=r(yk," (RetriBERT model)"),yk.forEach(t),Oco=i(S),xs=n(S,"LI",{});var xk=s(xs);yse=n(xk,"STRONG",{});var ftt=s(yse);Vco=r(ftt,"roberta"),ftt.forEach(t),Xco=r(xk," \u2014 "),fI=n(xk,"A",{href:!0});var mtt=s(fI);zco=r(mtt,"RobertaTokenizer"),mtt.forEach(t),Wco=r(xk," or "),mI=n(xk,"A",{href:!0});var gtt=s(mI);Qco=r(gtt,"RobertaTokenizerFast"),gtt.forEach(t),Hco=r(xk," (RoBERTa model)"),xk.forEach(t),Uco=i(S),$s=n(S,"LI",{});var $k=s($s);xse=n($k,"STRONG",{});var htt=s(xse);Jco=r(htt,"roformer"),htt.forEach(t),Yco=r($k," \u2014 "),gI=n($k,"A",{href:!0});var ptt=s(gI);Kco=r(ptt,"RoFormerTokenizer"),ptt.forEach(t),Zco=r($k," or "),hI=n($k,"A",{href:!0});var utt=s(hI);efo=r(utt,"RoFormerTokenizerFast"),utt.forEach(t),ofo=r($k," (RoFormer model)"),$k.forEach(t),rfo=i(S),fh=n(S,"LI",{});var mLe=s(fh);$se=n(mLe,"STRONG",{});var _tt=s($se);tfo=r(_tt,"speech_to_text"),_tt.forEach(t),afo=r(mLe," \u2014 "),pI=n(mLe,"A",{href:!0});var btt=s(pI);nfo=r(btt,"Speech2TextTokenizer"),btt.forEach(t),sfo=r(mLe," (Speech2Text model)"),mLe.forEach(t),lfo=i(S),mh=n(S,"LI",{});var gLe=s(mh);kse=n(gLe,"STRONG",{});var vtt=s(kse);ifo=r(vtt,"speech_to_text_2"),vtt.forEach(t),dfo=r(gLe," \u2014 "),uI=n(gLe,"A",{href:!0});var Ftt=s(uI);cfo=r(Ftt,"Speech2Text2Tokenizer"),Ftt.forEach(t),ffo=r(gLe," (Speech2Text2 model)"),gLe.forEach(t),mfo=i(S),ks=n(S,"LI",{});var kk=s(ks);Sse=n(kk,"STRONG",{});var Ttt=s(Sse);gfo=r(Ttt,"splinter"),Ttt.forEach(t),hfo=r(kk," \u2014 "),_I=n(kk,"A",{href:!0});var Mtt=s(_I);pfo=r(Mtt,"SplinterTokenizer"),Mtt.forEach(t),ufo=r(kk," or "),bI=n(kk,"A",{href:!0});var Ett=s(bI);_fo=r(Ett,"SplinterTokenizerFast"),Ett.forEach(t),bfo=r(kk," (Splinter model)"),kk.forEach(t),vfo=i(S),Ss=n(S,"LI",{});var Sk=s(Ss);Rse=n(Sk,"STRONG",{});var Ctt=s(Rse);Ffo=r(Ctt,"squeezebert"),Ctt.forEach(t),Tfo=r(Sk," \u2014 "),vI=n(Sk,"A",{href:!0});var wtt=s(vI);Mfo=r(wtt,"SqueezeBertTokenizer"),wtt.forEach(t),Efo=r(Sk," or "),FI=n(Sk,"A",{href:!0});var Att=s(FI);Cfo=r(Att,"SqueezeBertTokenizerFast"),Att.forEach(t),wfo=r(Sk," (SqueezeBERT model)"),Sk.forEach(t),Afo=i(S),Rs=n(S,"LI",{});var Rk=s(Rs);Pse=n(Rk,"STRONG",{});var Ltt=s(Pse);Lfo=r(Ltt,"t5"),Ltt.forEach(t),yfo=r(Rk," \u2014 "),TI=n(Rk,"A",{href:!0});var ytt=s(TI);xfo=r(ytt,"T5Tokenizer"),ytt.forEach(t),$fo=r(Rk," or "),MI=n(Rk,"A",{href:!0});var xtt=s(MI);kfo=r(xtt,"T5TokenizerFast"),xtt.forEach(t),Sfo=r(Rk," (T5 model)"),Rk.forEach(t),Rfo=i(S),gh=n(S,"LI",{});var hLe=s(gh);Bse=n(hLe,"STRONG",{});var $tt=s(Bse);Pfo=r($tt,"tapas"),$tt.forEach(t),Bfo=r(hLe," \u2014 "),EI=n(hLe,"A",{href:!0});var ktt=s(EI);Ifo=r(ktt,"TapasTokenizer"),ktt.forEach(t),Nfo=r(hLe," (TAPAS model)"),hLe.forEach(t),qfo=i(S),hh=n(S,"LI",{});var pLe=s(hh);Ise=n(pLe,"STRONG",{});var Stt=s(Ise);jfo=r(Stt,"tapex"),Stt.forEach(t),Dfo=r(pLe," \u2014 "),CI=n(pLe,"A",{href:!0});var Rtt=s(CI);Gfo=r(Rtt,"TapexTokenizer"),Rtt.forEach(t),Ofo=r(pLe," (TAPEX model)"),pLe.forEach(t),Vfo=i(S),ph=n(S,"LI",{});var uLe=s(ph);Nse=n(uLe,"STRONG",{});var Ptt=s(Nse);Xfo=r(Ptt,"transfo-xl"),Ptt.forEach(t),zfo=r(uLe," \u2014 "),wI=n(uLe,"A",{href:!0});var Btt=s(wI);Wfo=r(Btt,"TransfoXLTokenizer"),Btt.forEach(t),Qfo=r(uLe," (Transformer-XL model)"),uLe.forEach(t),Hfo=i(S),Ps=n(S,"LI",{});var Pk=s(Ps);qse=n(Pk,"STRONG",{});var Itt=s(qse);Ufo=r(Itt,"vilt"),Itt.forEach(t),Jfo=r(Pk," \u2014 "),AI=n(Pk,"A",{href:!0});var Ntt=s(AI);Yfo=r(Ntt,"BertTokenizer"),Ntt.forEach(t),Kfo=r(Pk," or "),LI=n(Pk,"A",{href:!0});var qtt=s(LI);Zfo=r(qtt,"BertTokenizerFast"),qtt.forEach(t),emo=r(Pk," (ViLT model)"),Pk.forEach(t),omo=i(S),Bs=n(S,"LI",{});var Bk=s(Bs);jse=n(Bk,"STRONG",{});var jtt=s(jse);rmo=r(jtt,"visual_bert"),jtt.forEach(t),tmo=r(Bk," \u2014 "),yI=n(Bk,"A",{href:!0});var Dtt=s(yI);amo=r(Dtt,"BertTokenizer"),Dtt.forEach(t),nmo=r(Bk," or "),xI=n(Bk,"A",{href:!0});var Gtt=s(xI);smo=r(Gtt,"BertTokenizerFast"),Gtt.forEach(t),lmo=r(Bk," (VisualBERT model)"),Bk.forEach(t),imo=i(S),uh=n(S,"LI",{});var _Le=s(uh);Dse=n(_Le,"STRONG",{});var Ott=s(Dse);dmo=r(Ott,"wav2vec2"),Ott.forEach(t),cmo=r(_Le," \u2014 "),$I=n(_Le,"A",{href:!0});var Vtt=s($I);fmo=r(Vtt,"Wav2Vec2CTCTokenizer"),Vtt.forEach(t),mmo=r(_Le," (Wav2Vec2 model)"),_Le.forEach(t),gmo=i(S),_h=n(S,"LI",{});var bLe=s(_h);Gse=n(bLe,"STRONG",{});var Xtt=s(Gse);hmo=r(Xtt,"wav2vec2-conformer"),Xtt.forEach(t),pmo=r(bLe," \u2014 "),kI=n(bLe,"A",{href:!0});var ztt=s(kI);umo=r(ztt,"Wav2Vec2CTCTokenizer"),ztt.forEach(t),_mo=r(bLe," (Wav2Vec2-Conformer model)"),bLe.forEach(t),bmo=i(S),bh=n(S,"LI",{});var vLe=s(bh);Ose=n(vLe,"STRONG",{});var Wtt=s(Ose);vmo=r(Wtt,"wav2vec2_phoneme"),Wtt.forEach(t),Fmo=r(vLe," \u2014 "),SI=n(vLe,"A",{href:!0});var Qtt=s(SI);Tmo=r(Qtt,"Wav2Vec2PhonemeCTCTokenizer"),Qtt.forEach(t),Mmo=r(vLe," (Wav2Vec2Phoneme model)"),vLe.forEach(t),Emo=i(S),Is=n(S,"LI",{});var Ik=s(Is);Vse=n(Ik,"STRONG",{});var Htt=s(Vse);Cmo=r(Htt,"xglm"),Htt.forEach(t),wmo=r(Ik," \u2014 "),RI=n(Ik,"A",{href:!0});var Utt=s(RI);Amo=r(Utt,"XGLMTokenizer"),Utt.forEach(t),Lmo=r(Ik," or "),PI=n(Ik,"A",{href:!0});var Jtt=s(PI);ymo=r(Jtt,"XGLMTokenizerFast"),Jtt.forEach(t),xmo=r(Ik," (XGLM model)"),Ik.forEach(t),$mo=i(S),vh=n(S,"LI",{});var FLe=s(vh);Xse=n(FLe,"STRONG",{});var Ytt=s(Xse);kmo=r(Ytt,"xlm"),Ytt.forEach(t),Smo=r(FLe," \u2014 "),BI=n(FLe,"A",{href:!0});var Ktt=s(BI);Rmo=r(Ktt,"XLMTokenizer"),Ktt.forEach(t),Pmo=r(FLe," (XLM model)"),FLe.forEach(t),Bmo=i(S),Fh=n(S,"LI",{});var TLe=s(Fh);zse=n(TLe,"STRONG",{});var Ztt=s(zse);Imo=r(Ztt,"xlm-prophetnet"),Ztt.forEach(t),Nmo=r(TLe," \u2014 "),II=n(TLe,"A",{href:!0});var eat=s(II);qmo=r(eat,"XLMProphetNetTokenizer"),eat.forEach(t),jmo=r(TLe," (XLM-ProphetNet model)"),TLe.forEach(t),Dmo=i(S),Ns=n(S,"LI",{});var Nk=s(Ns);Wse=n(Nk,"STRONG",{});var oat=s(Wse);Gmo=r(oat,"xlm-roberta"),oat.forEach(t),Omo=r(Nk," \u2014 "),NI=n(Nk,"A",{href:!0});var rat=s(NI);Vmo=r(rat,"XLMRobertaTokenizer"),rat.forEach(t),Xmo=r(Nk," or "),qI=n(Nk,"A",{href:!0});var tat=s(qI);zmo=r(tat,"XLMRobertaTokenizerFast"),tat.forEach(t),Wmo=r(Nk," (XLM-RoBERTa model)"),Nk.forEach(t),Qmo=i(S),qs=n(S,"LI",{});var qk=s(qs);Qse=n(qk,"STRONG",{});var aat=s(Qse);Hmo=r(aat,"xlm-roberta-xl"),aat.forEach(t),Umo=r(qk," \u2014 "),jI=n(qk,"A",{href:!0});var nat=s(jI);Jmo=r(nat,"RobertaTokenizer"),nat.forEach(t),Ymo=r(qk," or "),DI=n(qk,"A",{href:!0});var sat=s(DI);Kmo=r(sat,"RobertaTokenizerFast"),sat.forEach(t),Zmo=r(qk," (XLM-RoBERTa-XL model)"),qk.forEach(t),ego=i(S),js=n(S,"LI",{});var jk=s(js);Hse=n(jk,"STRONG",{});var lat=s(Hse);ogo=r(lat,"xlnet"),lat.forEach(t),rgo=r(jk," \u2014 "),GI=n(jk,"A",{href:!0});var iat=s(GI);tgo=r(iat,"XLNetTokenizer"),iat.forEach(t),ago=r(jk," or "),OI=n(jk,"A",{href:!0});var dat=s(OI);ngo=r(dat,"XLNetTokenizerFast"),dat.forEach(t),sgo=r(jk," (XLNet model)"),jk.forEach(t),lgo=i(S),Ds=n(S,"LI",{});var Dk=s(Ds);Use=n(Dk,"STRONG",{});var cat=s(Use);igo=r(cat,"yoso"),cat.forEach(t),dgo=r(Dk," \u2014 "),VI=n(Dk,"A",{href:!0});var fat=s(VI);cgo=r(fat,"AlbertTokenizer"),fat.forEach(t),fgo=r(Dk," or "),XI=n(Dk,"A",{href:!0});var mat=s(XI);mgo=r(mat,"AlbertTokenizerFast"),mat.forEach(t),ggo=r(Dk," (YOSO model)"),Dk.forEach(t),S.forEach(t),hgo=i(Ws),T(Th.$$.fragment,Ws),Ws.forEach(t),pgo=i(zs),Mh=n(zs,"DIV",{class:!0});var iVe=s(Mh);T(SL.$$.fragment,iVe),ugo=i(iVe),Jse=n(iVe,"P",{});var gat=s(Jse);_go=r(gat,"Register a new tokenizer in this mapping."),gat.forEach(t),iVe.forEach(t),zs.forEach(t),lGe=i(f),ki=n(f,"H2",{class:!0});var dVe=s(ki);Eh=n(dVe,"A",{id:!0,class:!0,href:!0});var hat=s(Eh);Yse=n(hat,"SPAN",{});var pat=s(Yse);T(RL.$$.fragment,pat),pat.forEach(t),hat.forEach(t),bgo=i(dVe),Kse=n(dVe,"SPAN",{});var uat=s(Kse);vgo=r(uat,"AutoFeatureExtractor"),uat.forEach(t),dVe.forEach(t),iGe=i(f),Lo=n(f,"DIV",{class:!0});var Qs=s(Lo);T(PL.$$.fragment,Qs),Fgo=i(Qs),BL=n(Qs,"P",{});var cVe=s(BL);Tgo=r(cVe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),zI=n(cVe,"A",{href:!0});var _at=s(zI);Mgo=r(_at,"AutoFeatureExtractor.from_pretrained()"),_at.forEach(t),Ego=r(cVe," class method."),cVe.forEach(t),Cgo=i(Qs),IL=n(Qs,"P",{});var fVe=s(IL);wgo=r(fVe,"This class cannot be instantiated directly using "),Zse=n(fVe,"CODE",{});var bat=s(Zse);Ago=r(bat,"__init__()"),bat.forEach(t),Lgo=r(fVe," (throws an error)."),fVe.forEach(t),ygo=i(Qs),He=n(Qs,"DIV",{class:!0});var ra=s(He);T(NL.$$.fragment,ra),xgo=i(ra),ele=n(ra,"P",{});var vat=s(ele);$go=r(vat,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),vat.forEach(t),kgo=i(ra),ka=n(ra,"P",{});var Fw=s(ka);Sgo=r(Fw,"The feature extractor class to instantiate is selected based on the "),ole=n(Fw,"CODE",{});var Fat=s(ole);Rgo=r(Fat,"model_type"),Fat.forEach(t),Pgo=r(Fw,` property of the config object
(either passed as an argument or loaded from `),rle=n(Fw,"CODE",{});var Tat=s(rle);Bgo=r(Tat,"pretrained_model_name_or_path"),Tat.forEach(t),Igo=r(Fw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tle=n(Fw,"CODE",{});var Mat=s(tle);Ngo=r(Mat,"pretrained_model_name_or_path"),Mat.forEach(t),qgo=r(Fw,":"),Fw.forEach(t),jgo=i(ra),Y=n(ra,"UL",{});var K=s(Y);Ch=n(K,"LI",{});var MLe=s(Ch);ale=n(MLe,"STRONG",{});var Eat=s(ale);Dgo=r(Eat,"beit"),Eat.forEach(t),Ggo=r(MLe," \u2014 "),WI=n(MLe,"A",{href:!0});var Cat=s(WI);Ogo=r(Cat,"BeitFeatureExtractor"),Cat.forEach(t),Vgo=r(MLe," (BEiT model)"),MLe.forEach(t),Xgo=i(K),wh=n(K,"LI",{});var ELe=s(wh);nle=n(ELe,"STRONG",{});var wat=s(nle);zgo=r(wat,"clip"),wat.forEach(t),Wgo=r(ELe," \u2014 "),QI=n(ELe,"A",{href:!0});var Aat=s(QI);Qgo=r(Aat,"CLIPFeatureExtractor"),Aat.forEach(t),Hgo=r(ELe," (CLIP model)"),ELe.forEach(t),Ugo=i(K),Ah=n(K,"LI",{});var CLe=s(Ah);sle=n(CLe,"STRONG",{});var Lat=s(sle);Jgo=r(Lat,"convnext"),Lat.forEach(t),Ygo=r(CLe," \u2014 "),HI=n(CLe,"A",{href:!0});var yat=s(HI);Kgo=r(yat,"ConvNextFeatureExtractor"),yat.forEach(t),Zgo=r(CLe," (ConvNeXT model)"),CLe.forEach(t),eho=i(K),Lh=n(K,"LI",{});var wLe=s(Lh);lle=n(wLe,"STRONG",{});var xat=s(lle);oho=r(xat,"cvt"),xat.forEach(t),rho=r(wLe," \u2014 "),UI=n(wLe,"A",{href:!0});var $at=s(UI);tho=r($at,"ConvNextFeatureExtractor"),$at.forEach(t),aho=r(wLe," (CvT model)"),wLe.forEach(t),nho=i(K),yh=n(K,"LI",{});var ALe=s(yh);ile=n(ALe,"STRONG",{});var kat=s(ile);sho=r(kat,"data2vec-audio"),kat.forEach(t),lho=r(ALe," \u2014 "),JI=n(ALe,"A",{href:!0});var Sat=s(JI);iho=r(Sat,"Wav2Vec2FeatureExtractor"),Sat.forEach(t),dho=r(ALe," (Data2VecAudio model)"),ALe.forEach(t),cho=i(K),xh=n(K,"LI",{});var LLe=s(xh);dle=n(LLe,"STRONG",{});var Rat=s(dle);fho=r(Rat,"data2vec-vision"),Rat.forEach(t),mho=r(LLe," \u2014 "),YI=n(LLe,"A",{href:!0});var Pat=s(YI);gho=r(Pat,"BeitFeatureExtractor"),Pat.forEach(t),hho=r(LLe," (Data2VecVision model)"),LLe.forEach(t),pho=i(K),$h=n(K,"LI",{});var yLe=s($h);cle=n(yLe,"STRONG",{});var Bat=s(cle);uho=r(Bat,"deit"),Bat.forEach(t),_ho=r(yLe," \u2014 "),KI=n(yLe,"A",{href:!0});var Iat=s(KI);bho=r(Iat,"DeiTFeatureExtractor"),Iat.forEach(t),vho=r(yLe," (DeiT model)"),yLe.forEach(t),Fho=i(K),kh=n(K,"LI",{});var xLe=s(kh);fle=n(xLe,"STRONG",{});var Nat=s(fle);Tho=r(Nat,"detr"),Nat.forEach(t),Mho=r(xLe," \u2014 "),ZI=n(xLe,"A",{href:!0});var qat=s(ZI);Eho=r(qat,"DetrFeatureExtractor"),qat.forEach(t),Cho=r(xLe," (DETR model)"),xLe.forEach(t),who=i(K),Sh=n(K,"LI",{});var $Le=s(Sh);mle=n($Le,"STRONG",{});var jat=s(mle);Aho=r(jat,"dpt"),jat.forEach(t),Lho=r($Le," \u2014 "),eN=n($Le,"A",{href:!0});var Dat=s(eN);yho=r(Dat,"DPTFeatureExtractor"),Dat.forEach(t),xho=r($Le," (DPT model)"),$Le.forEach(t),$ho=i(K),Rh=n(K,"LI",{});var kLe=s(Rh);gle=n(kLe,"STRONG",{});var Gat=s(gle);kho=r(Gat,"flava"),Gat.forEach(t),Sho=r(kLe," \u2014 "),oN=n(kLe,"A",{href:!0});var Oat=s(oN);Rho=r(Oat,"FlavaFeatureExtractor"),Oat.forEach(t),Pho=r(kLe," (FLAVA model)"),kLe.forEach(t),Bho=i(K),Ph=n(K,"LI",{});var SLe=s(Ph);hle=n(SLe,"STRONG",{});var Vat=s(hle);Iho=r(Vat,"glpn"),Vat.forEach(t),Nho=r(SLe," \u2014 "),rN=n(SLe,"A",{href:!0});var Xat=s(rN);qho=r(Xat,"GLPNFeatureExtractor"),Xat.forEach(t),jho=r(SLe," (GLPN model)"),SLe.forEach(t),Dho=i(K),Bh=n(K,"LI",{});var RLe=s(Bh);ple=n(RLe,"STRONG",{});var zat=s(ple);Gho=r(zat,"hubert"),zat.forEach(t),Oho=r(RLe," \u2014 "),tN=n(RLe,"A",{href:!0});var Wat=s(tN);Vho=r(Wat,"Wav2Vec2FeatureExtractor"),Wat.forEach(t),Xho=r(RLe," (Hubert model)"),RLe.forEach(t),zho=i(K),Ih=n(K,"LI",{});var PLe=s(Ih);ule=n(PLe,"STRONG",{});var Qat=s(ule);Who=r(Qat,"imagegpt"),Qat.forEach(t),Qho=r(PLe," \u2014 "),aN=n(PLe,"A",{href:!0});var Hat=s(aN);Hho=r(Hat,"ImageGPTFeatureExtractor"),Hat.forEach(t),Uho=r(PLe," (ImageGPT model)"),PLe.forEach(t),Jho=i(K),Nh=n(K,"LI",{});var BLe=s(Nh);_le=n(BLe,"STRONG",{});var Uat=s(_le);Yho=r(Uat,"layoutlmv2"),Uat.forEach(t),Kho=r(BLe," \u2014 "),nN=n(BLe,"A",{href:!0});var Jat=s(nN);Zho=r(Jat,"LayoutLMv2FeatureExtractor"),Jat.forEach(t),epo=r(BLe," (LayoutLMv2 model)"),BLe.forEach(t),opo=i(K),qh=n(K,"LI",{});var ILe=s(qh);ble=n(ILe,"STRONG",{});var Yat=s(ble);rpo=r(Yat,"layoutlmv3"),Yat.forEach(t),tpo=r(ILe," \u2014 "),sN=n(ILe,"A",{href:!0});var Kat=s(sN);apo=r(Kat,"LayoutLMv3FeatureExtractor"),Kat.forEach(t),npo=r(ILe," (LayoutLMv3 model)"),ILe.forEach(t),spo=i(K),jh=n(K,"LI",{});var NLe=s(jh);vle=n(NLe,"STRONG",{});var Zat=s(vle);lpo=r(Zat,"levit"),Zat.forEach(t),ipo=r(NLe," \u2014 "),lN=n(NLe,"A",{href:!0});var ent=s(lN);dpo=r(ent,"LevitFeatureExtractor"),ent.forEach(t),cpo=r(NLe," (LeViT model)"),NLe.forEach(t),fpo=i(K),Dh=n(K,"LI",{});var qLe=s(Dh);Fle=n(qLe,"STRONG",{});var ont=s(Fle);mpo=r(ont,"maskformer"),ont.forEach(t),gpo=r(qLe," \u2014 "),iN=n(qLe,"A",{href:!0});var rnt=s(iN);hpo=r(rnt,"MaskFormerFeatureExtractor"),rnt.forEach(t),ppo=r(qLe," (MaskFormer model)"),qLe.forEach(t),upo=i(K),Gh=n(K,"LI",{});var jLe=s(Gh);Tle=n(jLe,"STRONG",{});var tnt=s(Tle);_po=r(tnt,"mctct"),tnt.forEach(t),bpo=r(jLe," \u2014 "),dN=n(jLe,"A",{href:!0});var ant=s(dN);vpo=r(ant,"MCTCTFeatureExtractor"),ant.forEach(t),Fpo=r(jLe," (M-CTC-T model)"),jLe.forEach(t),Tpo=i(K),Oh=n(K,"LI",{});var DLe=s(Oh);Mle=n(DLe,"STRONG",{});var nnt=s(Mle);Mpo=r(nnt,"perceiver"),nnt.forEach(t),Epo=r(DLe," \u2014 "),cN=n(DLe,"A",{href:!0});var snt=s(cN);Cpo=r(snt,"PerceiverFeatureExtractor"),snt.forEach(t),wpo=r(DLe," (Perceiver model)"),DLe.forEach(t),Apo=i(K),Vh=n(K,"LI",{});var GLe=s(Vh);Ele=n(GLe,"STRONG",{});var lnt=s(Ele);Lpo=r(lnt,"poolformer"),lnt.forEach(t),ypo=r(GLe," \u2014 "),fN=n(GLe,"A",{href:!0});var int=s(fN);xpo=r(int,"PoolFormerFeatureExtractor"),int.forEach(t),$po=r(GLe," (PoolFormer model)"),GLe.forEach(t),kpo=i(K),Xh=n(K,"LI",{});var OLe=s(Xh);Cle=n(OLe,"STRONG",{});var dnt=s(Cle);Spo=r(dnt,"regnet"),dnt.forEach(t),Rpo=r(OLe," \u2014 "),mN=n(OLe,"A",{href:!0});var cnt=s(mN);Ppo=r(cnt,"ConvNextFeatureExtractor"),cnt.forEach(t),Bpo=r(OLe," (RegNet model)"),OLe.forEach(t),Ipo=i(K),zh=n(K,"LI",{});var VLe=s(zh);wle=n(VLe,"STRONG",{});var fnt=s(wle);Npo=r(fnt,"resnet"),fnt.forEach(t),qpo=r(VLe," \u2014 "),gN=n(VLe,"A",{href:!0});var mnt=s(gN);jpo=r(mnt,"ConvNextFeatureExtractor"),mnt.forEach(t),Dpo=r(VLe," (ResNet model)"),VLe.forEach(t),Gpo=i(K),Wh=n(K,"LI",{});var XLe=s(Wh);Ale=n(XLe,"STRONG",{});var gnt=s(Ale);Opo=r(gnt,"segformer"),gnt.forEach(t),Vpo=r(XLe," \u2014 "),hN=n(XLe,"A",{href:!0});var hnt=s(hN);Xpo=r(hnt,"SegformerFeatureExtractor"),hnt.forEach(t),zpo=r(XLe," (SegFormer model)"),XLe.forEach(t),Wpo=i(K),Qh=n(K,"LI",{});var zLe=s(Qh);Lle=n(zLe,"STRONG",{});var pnt=s(Lle);Qpo=r(pnt,"speech_to_text"),pnt.forEach(t),Hpo=r(zLe," \u2014 "),pN=n(zLe,"A",{href:!0});var unt=s(pN);Upo=r(unt,"Speech2TextFeatureExtractor"),unt.forEach(t),Jpo=r(zLe," (Speech2Text model)"),zLe.forEach(t),Ypo=i(K),Hh=n(K,"LI",{});var WLe=s(Hh);yle=n(WLe,"STRONG",{});var _nt=s(yle);Kpo=r(_nt,"swin"),_nt.forEach(t),Zpo=r(WLe," \u2014 "),uN=n(WLe,"A",{href:!0});var bnt=s(uN);euo=r(bnt,"ViTFeatureExtractor"),bnt.forEach(t),ouo=r(WLe," (Swin Transformer model)"),WLe.forEach(t),ruo=i(K),Uh=n(K,"LI",{});var QLe=s(Uh);xle=n(QLe,"STRONG",{});var vnt=s(xle);tuo=r(vnt,"van"),vnt.forEach(t),auo=r(QLe," \u2014 "),_N=n(QLe,"A",{href:!0});var Fnt=s(_N);nuo=r(Fnt,"ConvNextFeatureExtractor"),Fnt.forEach(t),suo=r(QLe," (VAN model)"),QLe.forEach(t),luo=i(K),Jh=n(K,"LI",{});var HLe=s(Jh);$le=n(HLe,"STRONG",{});var Tnt=s($le);iuo=r(Tnt,"vilt"),Tnt.forEach(t),duo=r(HLe," \u2014 "),bN=n(HLe,"A",{href:!0});var Mnt=s(bN);cuo=r(Mnt,"ViltFeatureExtractor"),Mnt.forEach(t),fuo=r(HLe," (ViLT model)"),HLe.forEach(t),muo=i(K),Yh=n(K,"LI",{});var ULe=s(Yh);kle=n(ULe,"STRONG",{});var Ent=s(kle);guo=r(Ent,"vit"),Ent.forEach(t),huo=r(ULe," \u2014 "),vN=n(ULe,"A",{href:!0});var Cnt=s(vN);puo=r(Cnt,"ViTFeatureExtractor"),Cnt.forEach(t),uuo=r(ULe," (ViT model)"),ULe.forEach(t),_uo=i(K),Kh=n(K,"LI",{});var JLe=s(Kh);Sle=n(JLe,"STRONG",{});var wnt=s(Sle);buo=r(wnt,"vit_mae"),wnt.forEach(t),vuo=r(JLe," \u2014 "),FN=n(JLe,"A",{href:!0});var Ant=s(FN);Fuo=r(Ant,"ViTFeatureExtractor"),Ant.forEach(t),Tuo=r(JLe," (ViTMAE model)"),JLe.forEach(t),Muo=i(K),Zh=n(K,"LI",{});var YLe=s(Zh);Rle=n(YLe,"STRONG",{});var Lnt=s(Rle);Euo=r(Lnt,"wav2vec2"),Lnt.forEach(t),Cuo=r(YLe," \u2014 "),TN=n(YLe,"A",{href:!0});var ynt=s(TN);wuo=r(ynt,"Wav2Vec2FeatureExtractor"),ynt.forEach(t),Auo=r(YLe," (Wav2Vec2 model)"),YLe.forEach(t),Luo=i(K),ep=n(K,"LI",{});var KLe=s(ep);Ple=n(KLe,"STRONG",{});var xnt=s(Ple);yuo=r(xnt,"wav2vec2-conformer"),xnt.forEach(t),xuo=r(KLe," \u2014 "),MN=n(KLe,"A",{href:!0});var $nt=s(MN);$uo=r($nt,"Wav2Vec2FeatureExtractor"),$nt.forEach(t),kuo=r(KLe," (Wav2Vec2-Conformer model)"),KLe.forEach(t),Suo=i(K),op=n(K,"LI",{});var ZLe=s(op);Ble=n(ZLe,"STRONG",{});var knt=s(Ble);Ruo=r(knt,"yolos"),knt.forEach(t),Puo=r(ZLe," \u2014 "),EN=n(ZLe,"A",{href:!0});var Snt=s(EN);Buo=r(Snt,"YolosFeatureExtractor"),Snt.forEach(t),Iuo=r(ZLe," (YOLOS model)"),ZLe.forEach(t),K.forEach(t),Nuo=i(ra),T(rp.$$.fragment,ra),quo=i(ra),T(tp.$$.fragment,ra),ra.forEach(t),juo=i(Qs),ap=n(Qs,"DIV",{class:!0});var mVe=s(ap);T(qL.$$.fragment,mVe),Duo=i(mVe),Ile=n(mVe,"P",{});var Rnt=s(Ile);Guo=r(Rnt,"Register a new feature extractor for this class."),Rnt.forEach(t),mVe.forEach(t),Qs.forEach(t),dGe=i(f),Si=n(f,"H2",{class:!0});var gVe=s(Si);np=n(gVe,"A",{id:!0,class:!0,href:!0});var Pnt=s(np);Nle=n(Pnt,"SPAN",{});var Bnt=s(Nle);T(jL.$$.fragment,Bnt),Bnt.forEach(t),Pnt.forEach(t),Ouo=i(gVe),qle=n(gVe,"SPAN",{});var Int=s(qle);Vuo=r(Int,"AutoProcessor"),Int.forEach(t),gVe.forEach(t),cGe=i(f),yo=n(f,"DIV",{class:!0});var Hs=s(yo);T(DL.$$.fragment,Hs),Xuo=i(Hs),GL=n(Hs,"P",{});var hVe=s(GL);zuo=r(hVe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),CN=n(hVe,"A",{href:!0});var Nnt=s(CN);Wuo=r(Nnt,"AutoProcessor.from_pretrained()"),Nnt.forEach(t),Quo=r(hVe," class method."),hVe.forEach(t),Huo=i(Hs),OL=n(Hs,"P",{});var pVe=s(OL);Uuo=r(pVe,"This class cannot be instantiated directly using "),jle=n(pVe,"CODE",{});var qnt=s(jle);Juo=r(qnt,"__init__()"),qnt.forEach(t),Yuo=r(pVe," (throws an error)."),pVe.forEach(t),Kuo=i(Hs),Ue=n(Hs,"DIV",{class:!0});var ta=s(Ue);T(VL.$$.fragment,ta),Zuo=i(ta),Dle=n(ta,"P",{});var jnt=s(Dle);e_o=r(jnt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),jnt.forEach(t),o_o=i(ta),Ri=n(ta,"P",{});var Jee=s(Ri);r_o=r(Jee,"The processor class to instantiate is selected based on the "),Gle=n(Jee,"CODE",{});var Dnt=s(Gle);t_o=r(Dnt,"model_type"),Dnt.forEach(t),a_o=r(Jee,` property of the config object (either
passed as an argument or loaded from `),Ole=n(Jee,"CODE",{});var Gnt=s(Ole);n_o=r(Gnt,"pretrained_model_name_or_path"),Gnt.forEach(t),s_o=r(Jee," if possible):"),Jee.forEach(t),l_o=i(ta),he=n(ta,"UL",{});var _e=s(he);sp=n(_e,"LI",{});var eye=s(sp);Vle=n(eye,"STRONG",{});var Ont=s(Vle);i_o=r(Ont,"clip"),Ont.forEach(t),d_o=r(eye," \u2014 "),wN=n(eye,"A",{href:!0});var Vnt=s(wN);c_o=r(Vnt,"CLIPProcessor"),Vnt.forEach(t),f_o=r(eye," (CLIP model)"),eye.forEach(t),m_o=i(_e),lp=n(_e,"LI",{});var oye=s(lp);Xle=n(oye,"STRONG",{});var Xnt=s(Xle);g_o=r(Xnt,"flava"),Xnt.forEach(t),h_o=r(oye," \u2014 "),zle=n(oye,"CODE",{});var znt=s(zle);p_o=r(znt,"FLAVAProcessor"),znt.forEach(t),u_o=r(oye," (FLAVA model)"),oye.forEach(t),__o=i(_e),ip=n(_e,"LI",{});var rye=s(ip);Wle=n(rye,"STRONG",{});var Wnt=s(Wle);b_o=r(Wnt,"layoutlmv2"),Wnt.forEach(t),v_o=r(rye," \u2014 "),AN=n(rye,"A",{href:!0});var Qnt=s(AN);F_o=r(Qnt,"LayoutLMv2Processor"),Qnt.forEach(t),T_o=r(rye," (LayoutLMv2 model)"),rye.forEach(t),M_o=i(_e),dp=n(_e,"LI",{});var tye=s(dp);Qle=n(tye,"STRONG",{});var Hnt=s(Qle);E_o=r(Hnt,"layoutlmv3"),Hnt.forEach(t),C_o=r(tye," \u2014 "),LN=n(tye,"A",{href:!0});var Unt=s(LN);w_o=r(Unt,"LayoutLMv3Processor"),Unt.forEach(t),A_o=r(tye," (LayoutLMv3 model)"),tye.forEach(t),L_o=i(_e),cp=n(_e,"LI",{});var aye=s(cp);Hle=n(aye,"STRONG",{});var Jnt=s(Hle);y_o=r(Jnt,"layoutxlm"),Jnt.forEach(t),x_o=r(aye," \u2014 "),yN=n(aye,"A",{href:!0});var Ynt=s(yN);$_o=r(Ynt,"LayoutXLMProcessor"),Ynt.forEach(t),k_o=r(aye," (LayoutXLM model)"),aye.forEach(t),S_o=i(_e),fp=n(_e,"LI",{});var nye=s(fp);Ule=n(nye,"STRONG",{});var Knt=s(Ule);R_o=r(Knt,"sew"),Knt.forEach(t),P_o=r(nye," \u2014 "),xN=n(nye,"A",{href:!0});var Znt=s(xN);B_o=r(Znt,"Wav2Vec2Processor"),Znt.forEach(t),I_o=r(nye," (SEW model)"),nye.forEach(t),N_o=i(_e),mp=n(_e,"LI",{});var sye=s(mp);Jle=n(sye,"STRONG",{});var est=s(Jle);q_o=r(est,"sew-d"),est.forEach(t),j_o=r(sye," \u2014 "),$N=n(sye,"A",{href:!0});var ost=s($N);D_o=r(ost,"Wav2Vec2Processor"),ost.forEach(t),G_o=r(sye," (SEW-D model)"),sye.forEach(t),O_o=i(_e),gp=n(_e,"LI",{});var lye=s(gp);Yle=n(lye,"STRONG",{});var rst=s(Yle);V_o=r(rst,"speech_to_text"),rst.forEach(t),X_o=r(lye," \u2014 "),kN=n(lye,"A",{href:!0});var tst=s(kN);z_o=r(tst,"Speech2TextProcessor"),tst.forEach(t),W_o=r(lye," (Speech2Text model)"),lye.forEach(t),Q_o=i(_e),hp=n(_e,"LI",{});var iye=s(hp);Kle=n(iye,"STRONG",{});var ast=s(Kle);H_o=r(ast,"speech_to_text_2"),ast.forEach(t),U_o=r(iye," \u2014 "),SN=n(iye,"A",{href:!0});var nst=s(SN);J_o=r(nst,"Speech2Text2Processor"),nst.forEach(t),Y_o=r(iye," (Speech2Text2 model)"),iye.forEach(t),K_o=i(_e),pp=n(_e,"LI",{});var dye=s(pp);Zle=n(dye,"STRONG",{});var sst=s(Zle);Z_o=r(sst,"trocr"),sst.forEach(t),e1o=r(dye," \u2014 "),RN=n(dye,"A",{href:!0});var lst=s(RN);o1o=r(lst,"TrOCRProcessor"),lst.forEach(t),r1o=r(dye," (TrOCR model)"),dye.forEach(t),t1o=i(_e),up=n(_e,"LI",{});var cye=s(up);eie=n(cye,"STRONG",{});var ist=s(eie);a1o=r(ist,"unispeech"),ist.forEach(t),n1o=r(cye," \u2014 "),PN=n(cye,"A",{href:!0});var dst=s(PN);s1o=r(dst,"Wav2Vec2Processor"),dst.forEach(t),l1o=r(cye," (UniSpeech model)"),cye.forEach(t),i1o=i(_e),_p=n(_e,"LI",{});var fye=s(_p);oie=n(fye,"STRONG",{});var cst=s(oie);d1o=r(cst,"unispeech-sat"),cst.forEach(t),c1o=r(fye," \u2014 "),BN=n(fye,"A",{href:!0});var fst=s(BN);f1o=r(fst,"Wav2Vec2Processor"),fst.forEach(t),m1o=r(fye," (UniSpeechSat model)"),fye.forEach(t),g1o=i(_e),bp=n(_e,"LI",{});var mye=s(bp);rie=n(mye,"STRONG",{});var mst=s(rie);h1o=r(mst,"vilt"),mst.forEach(t),p1o=r(mye," \u2014 "),IN=n(mye,"A",{href:!0});var gst=s(IN);u1o=r(gst,"ViltProcessor"),gst.forEach(t),_1o=r(mye," (ViLT model)"),mye.forEach(t),b1o=i(_e),vp=n(_e,"LI",{});var gye=s(vp);tie=n(gye,"STRONG",{});var hst=s(tie);v1o=r(hst,"vision-text-dual-encoder"),hst.forEach(t),F1o=r(gye," \u2014 "),NN=n(gye,"A",{href:!0});var pst=s(NN);T1o=r(pst,"VisionTextDualEncoderProcessor"),pst.forEach(t),M1o=r(gye," (VisionTextDualEncoder model)"),gye.forEach(t),E1o=i(_e),Fp=n(_e,"LI",{});var hye=s(Fp);aie=n(hye,"STRONG",{});var ust=s(aie);C1o=r(ust,"wav2vec2"),ust.forEach(t),w1o=r(hye," \u2014 "),qN=n(hye,"A",{href:!0});var _st=s(qN);A1o=r(_st,"Wav2Vec2Processor"),_st.forEach(t),L1o=r(hye," (Wav2Vec2 model)"),hye.forEach(t),y1o=i(_e),Tp=n(_e,"LI",{});var pye=s(Tp);nie=n(pye,"STRONG",{});var bst=s(nie);x1o=r(bst,"wav2vec2-conformer"),bst.forEach(t),$1o=r(pye," \u2014 "),jN=n(pye,"A",{href:!0});var vst=s(jN);k1o=r(vst,"Wav2Vec2Processor"),vst.forEach(t),S1o=r(pye," (Wav2Vec2-Conformer model)"),pye.forEach(t),R1o=i(_e),Mp=n(_e,"LI",{});var uye=s(Mp);sie=n(uye,"STRONG",{});var Fst=s(sie);P1o=r(Fst,"wavlm"),Fst.forEach(t),B1o=r(uye," \u2014 "),DN=n(uye,"A",{href:!0});var Tst=s(DN);I1o=r(Tst,"Wav2Vec2Processor"),Tst.forEach(t),N1o=r(uye," (WavLM model)"),uye.forEach(t),_e.forEach(t),q1o=i(ta),T(Ep.$$.fragment,ta),j1o=i(ta),T(Cp.$$.fragment,ta),ta.forEach(t),D1o=i(Hs),wp=n(Hs,"DIV",{class:!0});var uVe=s(wp);T(XL.$$.fragment,uVe),G1o=i(uVe),lie=n(uVe,"P",{});var Mst=s(lie);O1o=r(Mst,"Register a new processor for this class."),Mst.forEach(t),uVe.forEach(t),Hs.forEach(t),fGe=i(f),Pi=n(f,"H2",{class:!0});var _Ve=s(Pi);Ap=n(_Ve,"A",{id:!0,class:!0,href:!0});var Est=s(Ap);iie=n(Est,"SPAN",{});var Cst=s(iie);T(zL.$$.fragment,Cst),Cst.forEach(t),Est.forEach(t),V1o=i(_Ve),die=n(_Ve,"SPAN",{});var wst=s(die);X1o=r(wst,"AutoModel"),wst.forEach(t),_Ve.forEach(t),mGe=i(f),xo=n(f,"DIV",{class:!0});var Us=s(xo);T(WL.$$.fragment,Us),z1o=i(Us),Bi=n(Us,"P",{});var Yee=s(Bi);W1o=r(Yee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GN=n(Yee,"A",{href:!0});var Ast=s(GN);Q1o=r(Ast,"from_pretrained()"),Ast.forEach(t),H1o=r(Yee," class method or the "),ON=n(Yee,"A",{href:!0});var Lst=s(ON);U1o=r(Lst,"from_config()"),Lst.forEach(t),J1o=r(Yee,` class
method.`),Yee.forEach(t),Y1o=i(Us),QL=n(Us,"P",{});var bVe=s(QL);K1o=r(bVe,"This class cannot be instantiated directly using "),cie=n(bVe,"CODE",{});var yst=s(cie);Z1o=r(yst,"__init__()"),yst.forEach(t),e2o=r(bVe," (throws an error)."),bVe.forEach(t),o2o=i(Us),nt=n(Us,"DIV",{class:!0});var Tw=s(nt);T(HL.$$.fragment,Tw),r2o=i(Tw),fie=n(Tw,"P",{});var xst=s(fie);t2o=r(xst,"Instantiates one of the base model classes of the library from a configuration."),xst.forEach(t),a2o=i(Tw),Ii=n(Tw,"P",{});var Kee=s(Ii);n2o=r(Kee,`Note:
Loading a model from its configuration file does `),mie=n(Kee,"STRONG",{});var $st=s(mie);s2o=r($st,"not"),$st.forEach(t),l2o=r(Kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VN=n(Kee,"A",{href:!0});var kst=s(VN);i2o=r(kst,"from_pretrained()"),kst.forEach(t),d2o=r(Kee," to load the model weights."),Kee.forEach(t),c2o=i(Tw),T(Lp.$$.fragment,Tw),Tw.forEach(t),f2o=i(Us),Je=n(Us,"DIV",{class:!0});var aa=s(Je);T(UL.$$.fragment,aa),m2o=i(aa),gie=n(aa,"P",{});var Sst=s(gie);g2o=r(Sst,"Instantiate one of the base model classes of the library from a pretrained model."),Sst.forEach(t),h2o=i(aa),Sa=n(aa,"P",{});var Mw=s(Sa);p2o=r(Mw,"The model class to instantiate is selected based on the "),hie=n(Mw,"CODE",{});var Rst=s(hie);u2o=r(Rst,"model_type"),Rst.forEach(t),_2o=r(Mw,` property of the config object (either
passed as an argument or loaded from `),pie=n(Mw,"CODE",{});var Pst=s(pie);b2o=r(Pst,"pretrained_model_name_or_path"),Pst.forEach(t),v2o=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uie=n(Mw,"CODE",{});var Bst=s(uie);F2o=r(Bst,"pretrained_model_name_or_path"),Bst.forEach(t),T2o=r(Mw,":"),Mw.forEach(t),M2o=i(aa),x=n(aa,"UL",{});var $=s(x);yp=n($,"LI",{});var _ye=s(yp);_ie=n(_ye,"STRONG",{});var Ist=s(_ie);E2o=r(Ist,"albert"),Ist.forEach(t),C2o=r(_ye," \u2014 "),XN=n(_ye,"A",{href:!0});var Nst=s(XN);w2o=r(Nst,"AlbertModel"),Nst.forEach(t),A2o=r(_ye," (ALBERT model)"),_ye.forEach(t),L2o=i($),xp=n($,"LI",{});var bye=s(xp);bie=n(bye,"STRONG",{});var qst=s(bie);y2o=r(qst,"bart"),qst.forEach(t),x2o=r(bye," \u2014 "),zN=n(bye,"A",{href:!0});var jst=s(zN);$2o=r(jst,"BartModel"),jst.forEach(t),k2o=r(bye," (BART model)"),bye.forEach(t),S2o=i($),$p=n($,"LI",{});var vye=s($p);vie=n(vye,"STRONG",{});var Dst=s(vie);R2o=r(Dst,"beit"),Dst.forEach(t),P2o=r(vye," \u2014 "),WN=n(vye,"A",{href:!0});var Gst=s(WN);B2o=r(Gst,"BeitModel"),Gst.forEach(t),I2o=r(vye," (BEiT model)"),vye.forEach(t),N2o=i($),kp=n($,"LI",{});var Fye=s(kp);Fie=n(Fye,"STRONG",{});var Ost=s(Fie);q2o=r(Ost,"bert"),Ost.forEach(t),j2o=r(Fye," \u2014 "),QN=n(Fye,"A",{href:!0});var Vst=s(QN);D2o=r(Vst,"BertModel"),Vst.forEach(t),G2o=r(Fye," (BERT model)"),Fye.forEach(t),O2o=i($),Sp=n($,"LI",{});var Tye=s(Sp);Tie=n(Tye,"STRONG",{});var Xst=s(Tie);V2o=r(Xst,"bert-generation"),Xst.forEach(t),X2o=r(Tye," \u2014 "),HN=n(Tye,"A",{href:!0});var zst=s(HN);z2o=r(zst,"BertGenerationEncoder"),zst.forEach(t),W2o=r(Tye," (Bert Generation model)"),Tye.forEach(t),Q2o=i($),Rp=n($,"LI",{});var Mye=s(Rp);Mie=n(Mye,"STRONG",{});var Wst=s(Mie);H2o=r(Wst,"big_bird"),Wst.forEach(t),U2o=r(Mye," \u2014 "),UN=n(Mye,"A",{href:!0});var Qst=s(UN);J2o=r(Qst,"BigBirdModel"),Qst.forEach(t),Y2o=r(Mye," (BigBird model)"),Mye.forEach(t),K2o=i($),Pp=n($,"LI",{});var Eye=s(Pp);Eie=n(Eye,"STRONG",{});var Hst=s(Eie);Z2o=r(Hst,"bigbird_pegasus"),Hst.forEach(t),ebo=r(Eye," \u2014 "),JN=n(Eye,"A",{href:!0});var Ust=s(JN);obo=r(Ust,"BigBirdPegasusModel"),Ust.forEach(t),rbo=r(Eye," (BigBird-Pegasus model)"),Eye.forEach(t),tbo=i($),Bp=n($,"LI",{});var Cye=s(Bp);Cie=n(Cye,"STRONG",{});var Jst=s(Cie);abo=r(Jst,"blenderbot"),Jst.forEach(t),nbo=r(Cye," \u2014 "),YN=n(Cye,"A",{href:!0});var Yst=s(YN);sbo=r(Yst,"BlenderbotModel"),Yst.forEach(t),lbo=r(Cye," (Blenderbot model)"),Cye.forEach(t),ibo=i($),Ip=n($,"LI",{});var wye=s(Ip);wie=n(wye,"STRONG",{});var Kst=s(wie);dbo=r(Kst,"blenderbot-small"),Kst.forEach(t),cbo=r(wye," \u2014 "),KN=n(wye,"A",{href:!0});var Zst=s(KN);fbo=r(Zst,"BlenderbotSmallModel"),Zst.forEach(t),mbo=r(wye," (BlenderbotSmall model)"),wye.forEach(t),gbo=i($),Np=n($,"LI",{});var Aye=s(Np);Aie=n(Aye,"STRONG",{});var elt=s(Aie);hbo=r(elt,"bloom"),elt.forEach(t),pbo=r(Aye," \u2014 "),ZN=n(Aye,"A",{href:!0});var olt=s(ZN);ubo=r(olt,"BloomModel"),olt.forEach(t),_bo=r(Aye," (BLOOM model)"),Aye.forEach(t),bbo=i($),qp=n($,"LI",{});var Lye=s(qp);Lie=n(Lye,"STRONG",{});var rlt=s(Lie);vbo=r(rlt,"camembert"),rlt.forEach(t),Fbo=r(Lye," \u2014 "),eq=n(Lye,"A",{href:!0});var tlt=s(eq);Tbo=r(tlt,"CamembertModel"),tlt.forEach(t),Mbo=r(Lye," (CamemBERT model)"),Lye.forEach(t),Ebo=i($),jp=n($,"LI",{});var yye=s(jp);yie=n(yye,"STRONG",{});var alt=s(yie);Cbo=r(alt,"canine"),alt.forEach(t),wbo=r(yye," \u2014 "),oq=n(yye,"A",{href:!0});var nlt=s(oq);Abo=r(nlt,"CanineModel"),nlt.forEach(t),Lbo=r(yye," (CANINE model)"),yye.forEach(t),ybo=i($),Dp=n($,"LI",{});var xye=s(Dp);xie=n(xye,"STRONG",{});var slt=s(xie);xbo=r(slt,"clip"),slt.forEach(t),$bo=r(xye," \u2014 "),rq=n(xye,"A",{href:!0});var llt=s(rq);kbo=r(llt,"CLIPModel"),llt.forEach(t),Sbo=r(xye," (CLIP model)"),xye.forEach(t),Rbo=i($),Gp=n($,"LI",{});var $ye=s(Gp);$ie=n($ye,"STRONG",{});var ilt=s($ie);Pbo=r(ilt,"convbert"),ilt.forEach(t),Bbo=r($ye," \u2014 "),tq=n($ye,"A",{href:!0});var dlt=s(tq);Ibo=r(dlt,"ConvBertModel"),dlt.forEach(t),Nbo=r($ye," (ConvBERT model)"),$ye.forEach(t),qbo=i($),Op=n($,"LI",{});var kye=s(Op);kie=n(kye,"STRONG",{});var clt=s(kie);jbo=r(clt,"convnext"),clt.forEach(t),Dbo=r(kye," \u2014 "),aq=n(kye,"A",{href:!0});var flt=s(aq);Gbo=r(flt,"ConvNextModel"),flt.forEach(t),Obo=r(kye," (ConvNeXT model)"),kye.forEach(t),Vbo=i($),Vp=n($,"LI",{});var Sye=s(Vp);Sie=n(Sye,"STRONG",{});var mlt=s(Sie);Xbo=r(mlt,"ctrl"),mlt.forEach(t),zbo=r(Sye," \u2014 "),nq=n(Sye,"A",{href:!0});var glt=s(nq);Wbo=r(glt,"CTRLModel"),glt.forEach(t),Qbo=r(Sye," (CTRL model)"),Sye.forEach(t),Hbo=i($),Xp=n($,"LI",{});var Rye=s(Xp);Rie=n(Rye,"STRONG",{});var hlt=s(Rie);Ubo=r(hlt,"cvt"),hlt.forEach(t),Jbo=r(Rye," \u2014 "),sq=n(Rye,"A",{href:!0});var plt=s(sq);Ybo=r(plt,"CvtModel"),plt.forEach(t),Kbo=r(Rye," (CvT model)"),Rye.forEach(t),Zbo=i($),zp=n($,"LI",{});var Pye=s(zp);Pie=n(Pye,"STRONG",{});var ult=s(Pie);evo=r(ult,"data2vec-audio"),ult.forEach(t),ovo=r(Pye," \u2014 "),lq=n(Pye,"A",{href:!0});var _lt=s(lq);rvo=r(_lt,"Data2VecAudioModel"),_lt.forEach(t),tvo=r(Pye," (Data2VecAudio model)"),Pye.forEach(t),avo=i($),Wp=n($,"LI",{});var Bye=s(Wp);Bie=n(Bye,"STRONG",{});var blt=s(Bie);nvo=r(blt,"data2vec-text"),blt.forEach(t),svo=r(Bye," \u2014 "),iq=n(Bye,"A",{href:!0});var vlt=s(iq);lvo=r(vlt,"Data2VecTextModel"),vlt.forEach(t),ivo=r(Bye," (Data2VecText model)"),Bye.forEach(t),dvo=i($),Qp=n($,"LI",{});var Iye=s(Qp);Iie=n(Iye,"STRONG",{});var Flt=s(Iie);cvo=r(Flt,"data2vec-vision"),Flt.forEach(t),fvo=r(Iye," \u2014 "),dq=n(Iye,"A",{href:!0});var Tlt=s(dq);mvo=r(Tlt,"Data2VecVisionModel"),Tlt.forEach(t),gvo=r(Iye," (Data2VecVision model)"),Iye.forEach(t),hvo=i($),Hp=n($,"LI",{});var Nye=s(Hp);Nie=n(Nye,"STRONG",{});var Mlt=s(Nie);pvo=r(Mlt,"deberta"),Mlt.forEach(t),uvo=r(Nye," \u2014 "),cq=n(Nye,"A",{href:!0});var Elt=s(cq);_vo=r(Elt,"DebertaModel"),Elt.forEach(t),bvo=r(Nye," (DeBERTa model)"),Nye.forEach(t),vvo=i($),Up=n($,"LI",{});var qye=s(Up);qie=n(qye,"STRONG",{});var Clt=s(qie);Fvo=r(Clt,"deberta-v2"),Clt.forEach(t),Tvo=r(qye," \u2014 "),fq=n(qye,"A",{href:!0});var wlt=s(fq);Mvo=r(wlt,"DebertaV2Model"),wlt.forEach(t),Evo=r(qye," (DeBERTa-v2 model)"),qye.forEach(t),Cvo=i($),Jp=n($,"LI",{});var jye=s(Jp);jie=n(jye,"STRONG",{});var Alt=s(jie);wvo=r(Alt,"decision_transformer"),Alt.forEach(t),Avo=r(jye," \u2014 "),mq=n(jye,"A",{href:!0});var Llt=s(mq);Lvo=r(Llt,"DecisionTransformerModel"),Llt.forEach(t),yvo=r(jye," (Decision Transformer model)"),jye.forEach(t),xvo=i($),Yp=n($,"LI",{});var Dye=s(Yp);Die=n(Dye,"STRONG",{});var ylt=s(Die);$vo=r(ylt,"deit"),ylt.forEach(t),kvo=r(Dye," \u2014 "),gq=n(Dye,"A",{href:!0});var xlt=s(gq);Svo=r(xlt,"DeiTModel"),xlt.forEach(t),Rvo=r(Dye," (DeiT model)"),Dye.forEach(t),Pvo=i($),Kp=n($,"LI",{});var Gye=s(Kp);Gie=n(Gye,"STRONG",{});var $lt=s(Gie);Bvo=r($lt,"detr"),$lt.forEach(t),Ivo=r(Gye," \u2014 "),hq=n(Gye,"A",{href:!0});var klt=s(hq);Nvo=r(klt,"DetrModel"),klt.forEach(t),qvo=r(Gye," (DETR model)"),Gye.forEach(t),jvo=i($),Zp=n($,"LI",{});var Oye=s(Zp);Oie=n(Oye,"STRONG",{});var Slt=s(Oie);Dvo=r(Slt,"distilbert"),Slt.forEach(t),Gvo=r(Oye," \u2014 "),pq=n(Oye,"A",{href:!0});var Rlt=s(pq);Ovo=r(Rlt,"DistilBertModel"),Rlt.forEach(t),Vvo=r(Oye," (DistilBERT model)"),Oye.forEach(t),Xvo=i($),eu=n($,"LI",{});var Vye=s(eu);Vie=n(Vye,"STRONG",{});var Plt=s(Vie);zvo=r(Plt,"dpr"),Plt.forEach(t),Wvo=r(Vye," \u2014 "),uq=n(Vye,"A",{href:!0});var Blt=s(uq);Qvo=r(Blt,"DPRQuestionEncoder"),Blt.forEach(t),Hvo=r(Vye," (DPR model)"),Vye.forEach(t),Uvo=i($),ou=n($,"LI",{});var Xye=s(ou);Xie=n(Xye,"STRONG",{});var Ilt=s(Xie);Jvo=r(Ilt,"dpt"),Ilt.forEach(t),Yvo=r(Xye," \u2014 "),_q=n(Xye,"A",{href:!0});var Nlt=s(_q);Kvo=r(Nlt,"DPTModel"),Nlt.forEach(t),Zvo=r(Xye," (DPT model)"),Xye.forEach(t),e3o=i($),ru=n($,"LI",{});var zye=s(ru);zie=n(zye,"STRONG",{});var qlt=s(zie);o3o=r(qlt,"electra"),qlt.forEach(t),r3o=r(zye," \u2014 "),bq=n(zye,"A",{href:!0});var jlt=s(bq);t3o=r(jlt,"ElectraModel"),jlt.forEach(t),a3o=r(zye," (ELECTRA model)"),zye.forEach(t),n3o=i($),tu=n($,"LI",{});var Wye=s(tu);Wie=n(Wye,"STRONG",{});var Dlt=s(Wie);s3o=r(Dlt,"flaubert"),Dlt.forEach(t),l3o=r(Wye," \u2014 "),vq=n(Wye,"A",{href:!0});var Glt=s(vq);i3o=r(Glt,"FlaubertModel"),Glt.forEach(t),d3o=r(Wye," (FlauBERT model)"),Wye.forEach(t),c3o=i($),au=n($,"LI",{});var Qye=s(au);Qie=n(Qye,"STRONG",{});var Olt=s(Qie);f3o=r(Olt,"flava"),Olt.forEach(t),m3o=r(Qye," \u2014 "),Fq=n(Qye,"A",{href:!0});var Vlt=s(Fq);g3o=r(Vlt,"FlavaModel"),Vlt.forEach(t),h3o=r(Qye," (FLAVA model)"),Qye.forEach(t),p3o=i($),nu=n($,"LI",{});var Hye=s(nu);Hie=n(Hye,"STRONG",{});var Xlt=s(Hie);u3o=r(Xlt,"fnet"),Xlt.forEach(t),_3o=r(Hye," \u2014 "),Tq=n(Hye,"A",{href:!0});var zlt=s(Tq);b3o=r(zlt,"FNetModel"),zlt.forEach(t),v3o=r(Hye," (FNet model)"),Hye.forEach(t),F3o=i($),su=n($,"LI",{});var Uye=s(su);Uie=n(Uye,"STRONG",{});var Wlt=s(Uie);T3o=r(Wlt,"fsmt"),Wlt.forEach(t),M3o=r(Uye," \u2014 "),Mq=n(Uye,"A",{href:!0});var Qlt=s(Mq);E3o=r(Qlt,"FSMTModel"),Qlt.forEach(t),C3o=r(Uye," (FairSeq Machine-Translation model)"),Uye.forEach(t),w3o=i($),Gs=n($,"LI",{});var Gk=s(Gs);Jie=n(Gk,"STRONG",{});var Hlt=s(Jie);A3o=r(Hlt,"funnel"),Hlt.forEach(t),L3o=r(Gk," \u2014 "),Eq=n(Gk,"A",{href:!0});var Ult=s(Eq);y3o=r(Ult,"FunnelModel"),Ult.forEach(t),x3o=r(Gk," or "),Cq=n(Gk,"A",{href:!0});var Jlt=s(Cq);$3o=r(Jlt,"FunnelBaseModel"),Jlt.forEach(t),k3o=r(Gk," (Funnel Transformer model)"),Gk.forEach(t),S3o=i($),lu=n($,"LI",{});var Jye=s(lu);Yie=n(Jye,"STRONG",{});var Ylt=s(Yie);R3o=r(Ylt,"glpn"),Ylt.forEach(t),P3o=r(Jye," \u2014 "),wq=n(Jye,"A",{href:!0});var Klt=s(wq);B3o=r(Klt,"GLPNModel"),Klt.forEach(t),I3o=r(Jye," (GLPN model)"),Jye.forEach(t),N3o=i($),iu=n($,"LI",{});var Yye=s(iu);Kie=n(Yye,"STRONG",{});var Zlt=s(Kie);q3o=r(Zlt,"gpt2"),Zlt.forEach(t),j3o=r(Yye," \u2014 "),Aq=n(Yye,"A",{href:!0});var eit=s(Aq);D3o=r(eit,"GPT2Model"),eit.forEach(t),G3o=r(Yye," (OpenAI GPT-2 model)"),Yye.forEach(t),O3o=i($),du=n($,"LI",{});var Kye=s(du);Zie=n(Kye,"STRONG",{});var oit=s(Zie);V3o=r(oit,"gpt_neo"),oit.forEach(t),X3o=r(Kye," \u2014 "),Lq=n(Kye,"A",{href:!0});var rit=s(Lq);z3o=r(rit,"GPTNeoModel"),rit.forEach(t),W3o=r(Kye," (GPT Neo model)"),Kye.forEach(t),Q3o=i($),cu=n($,"LI",{});var Zye=s(cu);ede=n(Zye,"STRONG",{});var tit=s(ede);H3o=r(tit,"gpt_neox"),tit.forEach(t),U3o=r(Zye," \u2014 "),yq=n(Zye,"A",{href:!0});var ait=s(yq);J3o=r(ait,"GPTNeoXModel"),ait.forEach(t),Y3o=r(Zye," (GPT NeoX model)"),Zye.forEach(t),K3o=i($),fu=n($,"LI",{});var e8e=s(fu);ode=n(e8e,"STRONG",{});var nit=s(ode);Z3o=r(nit,"gptj"),nit.forEach(t),e0o=r(e8e," \u2014 "),xq=n(e8e,"A",{href:!0});var sit=s(xq);o0o=r(sit,"GPTJModel"),sit.forEach(t),r0o=r(e8e," (GPT-J model)"),e8e.forEach(t),t0o=i($),mu=n($,"LI",{});var o8e=s(mu);rde=n(o8e,"STRONG",{});var lit=s(rde);a0o=r(lit,"hubert"),lit.forEach(t),n0o=r(o8e," \u2014 "),$q=n(o8e,"A",{href:!0});var iit=s($q);s0o=r(iit,"HubertModel"),iit.forEach(t),l0o=r(o8e," (Hubert model)"),o8e.forEach(t),i0o=i($),gu=n($,"LI",{});var r8e=s(gu);tde=n(r8e,"STRONG",{});var dit=s(tde);d0o=r(dit,"ibert"),dit.forEach(t),c0o=r(r8e," \u2014 "),kq=n(r8e,"A",{href:!0});var cit=s(kq);f0o=r(cit,"IBertModel"),cit.forEach(t),m0o=r(r8e," (I-BERT model)"),r8e.forEach(t),g0o=i($),hu=n($,"LI",{});var t8e=s(hu);ade=n(t8e,"STRONG",{});var fit=s(ade);h0o=r(fit,"imagegpt"),fit.forEach(t),p0o=r(t8e," \u2014 "),Sq=n(t8e,"A",{href:!0});var mit=s(Sq);u0o=r(mit,"ImageGPTModel"),mit.forEach(t),_0o=r(t8e," (ImageGPT model)"),t8e.forEach(t),b0o=i($),pu=n($,"LI",{});var a8e=s(pu);nde=n(a8e,"STRONG",{});var git=s(nde);v0o=r(git,"layoutlm"),git.forEach(t),F0o=r(a8e," \u2014 "),Rq=n(a8e,"A",{href:!0});var hit=s(Rq);T0o=r(hit,"LayoutLMModel"),hit.forEach(t),M0o=r(a8e," (LayoutLM model)"),a8e.forEach(t),E0o=i($),uu=n($,"LI",{});var n8e=s(uu);sde=n(n8e,"STRONG",{});var pit=s(sde);C0o=r(pit,"layoutlmv2"),pit.forEach(t),w0o=r(n8e," \u2014 "),Pq=n(n8e,"A",{href:!0});var uit=s(Pq);A0o=r(uit,"LayoutLMv2Model"),uit.forEach(t),L0o=r(n8e," (LayoutLMv2 model)"),n8e.forEach(t),y0o=i($),_u=n($,"LI",{});var s8e=s(_u);lde=n(s8e,"STRONG",{});var _it=s(lde);x0o=r(_it,"layoutlmv3"),_it.forEach(t),$0o=r(s8e," \u2014 "),Bq=n(s8e,"A",{href:!0});var bit=s(Bq);k0o=r(bit,"LayoutLMv3Model"),bit.forEach(t),S0o=r(s8e," (LayoutLMv3 model)"),s8e.forEach(t),R0o=i($),bu=n($,"LI",{});var l8e=s(bu);ide=n(l8e,"STRONG",{});var vit=s(ide);P0o=r(vit,"led"),vit.forEach(t),B0o=r(l8e," \u2014 "),Iq=n(l8e,"A",{href:!0});var Fit=s(Iq);I0o=r(Fit,"LEDModel"),Fit.forEach(t),N0o=r(l8e," (LED model)"),l8e.forEach(t),q0o=i($),vu=n($,"LI",{});var i8e=s(vu);dde=n(i8e,"STRONG",{});var Tit=s(dde);j0o=r(Tit,"levit"),Tit.forEach(t),D0o=r(i8e," \u2014 "),Nq=n(i8e,"A",{href:!0});var Mit=s(Nq);G0o=r(Mit,"LevitModel"),Mit.forEach(t),O0o=r(i8e," (LeViT model)"),i8e.forEach(t),V0o=i($),Fu=n($,"LI",{});var d8e=s(Fu);cde=n(d8e,"STRONG",{});var Eit=s(cde);X0o=r(Eit,"longformer"),Eit.forEach(t),z0o=r(d8e," \u2014 "),qq=n(d8e,"A",{href:!0});var Cit=s(qq);W0o=r(Cit,"LongformerModel"),Cit.forEach(t),Q0o=r(d8e," (Longformer model)"),d8e.forEach(t),H0o=i($),Tu=n($,"LI",{});var c8e=s(Tu);fde=n(c8e,"STRONG",{});var wit=s(fde);U0o=r(wit,"longt5"),wit.forEach(t),J0o=r(c8e," \u2014 "),jq=n(c8e,"A",{href:!0});var Ait=s(jq);Y0o=r(Ait,"LongT5Model"),Ait.forEach(t),K0o=r(c8e," (LongT5 model)"),c8e.forEach(t),Z0o=i($),Mu=n($,"LI",{});var f8e=s(Mu);mde=n(f8e,"STRONG",{});var Lit=s(mde);eFo=r(Lit,"luke"),Lit.forEach(t),oFo=r(f8e," \u2014 "),Dq=n(f8e,"A",{href:!0});var yit=s(Dq);rFo=r(yit,"LukeModel"),yit.forEach(t),tFo=r(f8e," (LUKE model)"),f8e.forEach(t),aFo=i($),Eu=n($,"LI",{});var m8e=s(Eu);gde=n(m8e,"STRONG",{});var xit=s(gde);nFo=r(xit,"lxmert"),xit.forEach(t),sFo=r(m8e," \u2014 "),Gq=n(m8e,"A",{href:!0});var $it=s(Gq);lFo=r($it,"LxmertModel"),$it.forEach(t),iFo=r(m8e," (LXMERT model)"),m8e.forEach(t),dFo=i($),Cu=n($,"LI",{});var g8e=s(Cu);hde=n(g8e,"STRONG",{});var kit=s(hde);cFo=r(kit,"m2m_100"),kit.forEach(t),fFo=r(g8e," \u2014 "),Oq=n(g8e,"A",{href:!0});var Sit=s(Oq);mFo=r(Sit,"M2M100Model"),Sit.forEach(t),gFo=r(g8e," (M2M100 model)"),g8e.forEach(t),hFo=i($),wu=n($,"LI",{});var h8e=s(wu);pde=n(h8e,"STRONG",{});var Rit=s(pde);pFo=r(Rit,"marian"),Rit.forEach(t),uFo=r(h8e," \u2014 "),Vq=n(h8e,"A",{href:!0});var Pit=s(Vq);_Fo=r(Pit,"MarianModel"),Pit.forEach(t),bFo=r(h8e," (Marian model)"),h8e.forEach(t),vFo=i($),Au=n($,"LI",{});var p8e=s(Au);ude=n(p8e,"STRONG",{});var Bit=s(ude);FFo=r(Bit,"maskformer"),Bit.forEach(t),TFo=r(p8e," \u2014 "),Xq=n(p8e,"A",{href:!0});var Iit=s(Xq);MFo=r(Iit,"MaskFormerModel"),Iit.forEach(t),EFo=r(p8e," (MaskFormer model)"),p8e.forEach(t),CFo=i($),Lu=n($,"LI",{});var u8e=s(Lu);_de=n(u8e,"STRONG",{});var Nit=s(_de);wFo=r(Nit,"mbart"),Nit.forEach(t),AFo=r(u8e," \u2014 "),zq=n(u8e,"A",{href:!0});var qit=s(zq);LFo=r(qit,"MBartModel"),qit.forEach(t),yFo=r(u8e," (mBART model)"),u8e.forEach(t),xFo=i($),yu=n($,"LI",{});var _8e=s(yu);bde=n(_8e,"STRONG",{});var jit=s(bde);$Fo=r(jit,"mctct"),jit.forEach(t),kFo=r(_8e," \u2014 "),Wq=n(_8e,"A",{href:!0});var Dit=s(Wq);SFo=r(Dit,"MCTCTModel"),Dit.forEach(t),RFo=r(_8e," (M-CTC-T model)"),_8e.forEach(t),PFo=i($),xu=n($,"LI",{});var b8e=s(xu);vde=n(b8e,"STRONG",{});var Git=s(vde);BFo=r(Git,"megatron-bert"),Git.forEach(t),IFo=r(b8e," \u2014 "),Qq=n(b8e,"A",{href:!0});var Oit=s(Qq);NFo=r(Oit,"MegatronBertModel"),Oit.forEach(t),qFo=r(b8e," (Megatron-BERT model)"),b8e.forEach(t),jFo=i($),$u=n($,"LI",{});var v8e=s($u);Fde=n(v8e,"STRONG",{});var Vit=s(Fde);DFo=r(Vit,"mobilebert"),Vit.forEach(t),GFo=r(v8e," \u2014 "),Hq=n(v8e,"A",{href:!0});var Xit=s(Hq);OFo=r(Xit,"MobileBertModel"),Xit.forEach(t),VFo=r(v8e," (MobileBERT model)"),v8e.forEach(t),XFo=i($),ku=n($,"LI",{});var F8e=s(ku);Tde=n(F8e,"STRONG",{});var zit=s(Tde);zFo=r(zit,"mpnet"),zit.forEach(t),WFo=r(F8e," \u2014 "),Uq=n(F8e,"A",{href:!0});var Wit=s(Uq);QFo=r(Wit,"MPNetModel"),Wit.forEach(t),HFo=r(F8e," (MPNet model)"),F8e.forEach(t),UFo=i($),Su=n($,"LI",{});var T8e=s(Su);Mde=n(T8e,"STRONG",{});var Qit=s(Mde);JFo=r(Qit,"mt5"),Qit.forEach(t),YFo=r(T8e," \u2014 "),Jq=n(T8e,"A",{href:!0});var Hit=s(Jq);KFo=r(Hit,"MT5Model"),Hit.forEach(t),ZFo=r(T8e," (MT5 model)"),T8e.forEach(t),e6o=i($),Ru=n($,"LI",{});var M8e=s(Ru);Ede=n(M8e,"STRONG",{});var Uit=s(Ede);o6o=r(Uit,"nystromformer"),Uit.forEach(t),r6o=r(M8e," \u2014 "),Yq=n(M8e,"A",{href:!0});var Jit=s(Yq);t6o=r(Jit,"NystromformerModel"),Jit.forEach(t),a6o=r(M8e," (Nystr\xF6mformer model)"),M8e.forEach(t),n6o=i($),Pu=n($,"LI",{});var E8e=s(Pu);Cde=n(E8e,"STRONG",{});var Yit=s(Cde);s6o=r(Yit,"openai-gpt"),Yit.forEach(t),l6o=r(E8e," \u2014 "),Kq=n(E8e,"A",{href:!0});var Kit=s(Kq);i6o=r(Kit,"OpenAIGPTModel"),Kit.forEach(t),d6o=r(E8e," (OpenAI GPT model)"),E8e.forEach(t),c6o=i($),Bu=n($,"LI",{});var C8e=s(Bu);wde=n(C8e,"STRONG",{});var Zit=s(wde);f6o=r(Zit,"opt"),Zit.forEach(t),m6o=r(C8e," \u2014 "),Zq=n(C8e,"A",{href:!0});var edt=s(Zq);g6o=r(edt,"OPTModel"),edt.forEach(t),h6o=r(C8e," (OPT model)"),C8e.forEach(t),p6o=i($),Iu=n($,"LI",{});var w8e=s(Iu);Ade=n(w8e,"STRONG",{});var odt=s(Ade);u6o=r(odt,"pegasus"),odt.forEach(t),_6o=r(w8e," \u2014 "),ej=n(w8e,"A",{href:!0});var rdt=s(ej);b6o=r(rdt,"PegasusModel"),rdt.forEach(t),v6o=r(w8e," (Pegasus model)"),w8e.forEach(t),F6o=i($),Nu=n($,"LI",{});var A8e=s(Nu);Lde=n(A8e,"STRONG",{});var tdt=s(Lde);T6o=r(tdt,"perceiver"),tdt.forEach(t),M6o=r(A8e," \u2014 "),oj=n(A8e,"A",{href:!0});var adt=s(oj);E6o=r(adt,"PerceiverModel"),adt.forEach(t),C6o=r(A8e," (Perceiver model)"),A8e.forEach(t),w6o=i($),qu=n($,"LI",{});var L8e=s(qu);yde=n(L8e,"STRONG",{});var ndt=s(yde);A6o=r(ndt,"plbart"),ndt.forEach(t),L6o=r(L8e," \u2014 "),rj=n(L8e,"A",{href:!0});var sdt=s(rj);y6o=r(sdt,"PLBartModel"),sdt.forEach(t),x6o=r(L8e," (PLBart model)"),L8e.forEach(t),$6o=i($),ju=n($,"LI",{});var y8e=s(ju);xde=n(y8e,"STRONG",{});var ldt=s(xde);k6o=r(ldt,"poolformer"),ldt.forEach(t),S6o=r(y8e," \u2014 "),tj=n(y8e,"A",{href:!0});var idt=s(tj);R6o=r(idt,"PoolFormerModel"),idt.forEach(t),P6o=r(y8e," (PoolFormer model)"),y8e.forEach(t),B6o=i($),Du=n($,"LI",{});var x8e=s(Du);$de=n(x8e,"STRONG",{});var ddt=s($de);I6o=r(ddt,"prophetnet"),ddt.forEach(t),N6o=r(x8e," \u2014 "),aj=n(x8e,"A",{href:!0});var cdt=s(aj);q6o=r(cdt,"ProphetNetModel"),cdt.forEach(t),j6o=r(x8e," (ProphetNet model)"),x8e.forEach(t),D6o=i($),Gu=n($,"LI",{});var $8e=s(Gu);kde=n($8e,"STRONG",{});var fdt=s(kde);G6o=r(fdt,"qdqbert"),fdt.forEach(t),O6o=r($8e," \u2014 "),nj=n($8e,"A",{href:!0});var mdt=s(nj);V6o=r(mdt,"QDQBertModel"),mdt.forEach(t),X6o=r($8e," (QDQBert model)"),$8e.forEach(t),z6o=i($),Ou=n($,"LI",{});var k8e=s(Ou);Sde=n(k8e,"STRONG",{});var gdt=s(Sde);W6o=r(gdt,"reformer"),gdt.forEach(t),Q6o=r(k8e," \u2014 "),sj=n(k8e,"A",{href:!0});var hdt=s(sj);H6o=r(hdt,"ReformerModel"),hdt.forEach(t),U6o=r(k8e," (Reformer model)"),k8e.forEach(t),J6o=i($),Vu=n($,"LI",{});var S8e=s(Vu);Rde=n(S8e,"STRONG",{});var pdt=s(Rde);Y6o=r(pdt,"regnet"),pdt.forEach(t),K6o=r(S8e," \u2014 "),lj=n(S8e,"A",{href:!0});var udt=s(lj);Z6o=r(udt,"RegNetModel"),udt.forEach(t),eTo=r(S8e," (RegNet model)"),S8e.forEach(t),oTo=i($),Xu=n($,"LI",{});var R8e=s(Xu);Pde=n(R8e,"STRONG",{});var _dt=s(Pde);rTo=r(_dt,"rembert"),_dt.forEach(t),tTo=r(R8e," \u2014 "),ij=n(R8e,"A",{href:!0});var bdt=s(ij);aTo=r(bdt,"RemBertModel"),bdt.forEach(t),nTo=r(R8e," (RemBERT model)"),R8e.forEach(t),sTo=i($),zu=n($,"LI",{});var P8e=s(zu);Bde=n(P8e,"STRONG",{});var vdt=s(Bde);lTo=r(vdt,"resnet"),vdt.forEach(t),iTo=r(P8e," \u2014 "),dj=n(P8e,"A",{href:!0});var Fdt=s(dj);dTo=r(Fdt,"ResNetModel"),Fdt.forEach(t),cTo=r(P8e," (ResNet model)"),P8e.forEach(t),fTo=i($),Wu=n($,"LI",{});var B8e=s(Wu);Ide=n(B8e,"STRONG",{});var Tdt=s(Ide);mTo=r(Tdt,"retribert"),Tdt.forEach(t),gTo=r(B8e," \u2014 "),cj=n(B8e,"A",{href:!0});var Mdt=s(cj);hTo=r(Mdt,"RetriBertModel"),Mdt.forEach(t),pTo=r(B8e," (RetriBERT model)"),B8e.forEach(t),uTo=i($),Qu=n($,"LI",{});var I8e=s(Qu);Nde=n(I8e,"STRONG",{});var Edt=s(Nde);_To=r(Edt,"roberta"),Edt.forEach(t),bTo=r(I8e," \u2014 "),fj=n(I8e,"A",{href:!0});var Cdt=s(fj);vTo=r(Cdt,"RobertaModel"),Cdt.forEach(t),FTo=r(I8e," (RoBERTa model)"),I8e.forEach(t),TTo=i($),Hu=n($,"LI",{});var N8e=s(Hu);qde=n(N8e,"STRONG",{});var wdt=s(qde);MTo=r(wdt,"roformer"),wdt.forEach(t),ETo=r(N8e," \u2014 "),mj=n(N8e,"A",{href:!0});var Adt=s(mj);CTo=r(Adt,"RoFormerModel"),Adt.forEach(t),wTo=r(N8e," (RoFormer model)"),N8e.forEach(t),ATo=i($),Uu=n($,"LI",{});var q8e=s(Uu);jde=n(q8e,"STRONG",{});var Ldt=s(jde);LTo=r(Ldt,"segformer"),Ldt.forEach(t),yTo=r(q8e," \u2014 "),gj=n(q8e,"A",{href:!0});var ydt=s(gj);xTo=r(ydt,"SegformerModel"),ydt.forEach(t),$To=r(q8e," (SegFormer model)"),q8e.forEach(t),kTo=i($),Ju=n($,"LI",{});var j8e=s(Ju);Dde=n(j8e,"STRONG",{});var xdt=s(Dde);STo=r(xdt,"sew"),xdt.forEach(t),RTo=r(j8e," \u2014 "),hj=n(j8e,"A",{href:!0});var $dt=s(hj);PTo=r($dt,"SEWModel"),$dt.forEach(t),BTo=r(j8e," (SEW model)"),j8e.forEach(t),ITo=i($),Yu=n($,"LI",{});var D8e=s(Yu);Gde=n(D8e,"STRONG",{});var kdt=s(Gde);NTo=r(kdt,"sew-d"),kdt.forEach(t),qTo=r(D8e," \u2014 "),pj=n(D8e,"A",{href:!0});var Sdt=s(pj);jTo=r(Sdt,"SEWDModel"),Sdt.forEach(t),DTo=r(D8e," (SEW-D model)"),D8e.forEach(t),GTo=i($),Ku=n($,"LI",{});var G8e=s(Ku);Ode=n(G8e,"STRONG",{});var Rdt=s(Ode);OTo=r(Rdt,"speech_to_text"),Rdt.forEach(t),VTo=r(G8e," \u2014 "),uj=n(G8e,"A",{href:!0});var Pdt=s(uj);XTo=r(Pdt,"Speech2TextModel"),Pdt.forEach(t),zTo=r(G8e," (Speech2Text model)"),G8e.forEach(t),WTo=i($),Zu=n($,"LI",{});var O8e=s(Zu);Vde=n(O8e,"STRONG",{});var Bdt=s(Vde);QTo=r(Bdt,"splinter"),Bdt.forEach(t),HTo=r(O8e," \u2014 "),_j=n(O8e,"A",{href:!0});var Idt=s(_j);UTo=r(Idt,"SplinterModel"),Idt.forEach(t),JTo=r(O8e," (Splinter model)"),O8e.forEach(t),YTo=i($),e_=n($,"LI",{});var V8e=s(e_);Xde=n(V8e,"STRONG",{});var Ndt=s(Xde);KTo=r(Ndt,"squeezebert"),Ndt.forEach(t),ZTo=r(V8e," \u2014 "),bj=n(V8e,"A",{href:!0});var qdt=s(bj);e7o=r(qdt,"SqueezeBertModel"),qdt.forEach(t),o7o=r(V8e," (SqueezeBERT model)"),V8e.forEach(t),r7o=i($),o_=n($,"LI",{});var X8e=s(o_);zde=n(X8e,"STRONG",{});var jdt=s(zde);t7o=r(jdt,"swin"),jdt.forEach(t),a7o=r(X8e," \u2014 "),vj=n(X8e,"A",{href:!0});var Ddt=s(vj);n7o=r(Ddt,"SwinModel"),Ddt.forEach(t),s7o=r(X8e," (Swin Transformer model)"),X8e.forEach(t),l7o=i($),r_=n($,"LI",{});var z8e=s(r_);Wde=n(z8e,"STRONG",{});var Gdt=s(Wde);i7o=r(Gdt,"t5"),Gdt.forEach(t),d7o=r(z8e," \u2014 "),Fj=n(z8e,"A",{href:!0});var Odt=s(Fj);c7o=r(Odt,"T5Model"),Odt.forEach(t),f7o=r(z8e," (T5 model)"),z8e.forEach(t),m7o=i($),t_=n($,"LI",{});var W8e=s(t_);Qde=n(W8e,"STRONG",{});var Vdt=s(Qde);g7o=r(Vdt,"tapas"),Vdt.forEach(t),h7o=r(W8e," \u2014 "),Tj=n(W8e,"A",{href:!0});var Xdt=s(Tj);p7o=r(Xdt,"TapasModel"),Xdt.forEach(t),u7o=r(W8e," (TAPAS model)"),W8e.forEach(t),_7o=i($),a_=n($,"LI",{});var Q8e=s(a_);Hde=n(Q8e,"STRONG",{});var zdt=s(Hde);b7o=r(zdt,"trajectory_transformer"),zdt.forEach(t),v7o=r(Q8e," \u2014 "),Mj=n(Q8e,"A",{href:!0});var Wdt=s(Mj);F7o=r(Wdt,"TrajectoryTransformerModel"),Wdt.forEach(t),T7o=r(Q8e," (Trajectory Transformer model)"),Q8e.forEach(t),M7o=i($),n_=n($,"LI",{});var H8e=s(n_);Ude=n(H8e,"STRONG",{});var Qdt=s(Ude);E7o=r(Qdt,"transfo-xl"),Qdt.forEach(t),C7o=r(H8e," \u2014 "),Ej=n(H8e,"A",{href:!0});var Hdt=s(Ej);w7o=r(Hdt,"TransfoXLModel"),Hdt.forEach(t),A7o=r(H8e," (Transformer-XL model)"),H8e.forEach(t),L7o=i($),s_=n($,"LI",{});var U8e=s(s_);Jde=n(U8e,"STRONG",{});var Udt=s(Jde);y7o=r(Udt,"unispeech"),Udt.forEach(t),x7o=r(U8e," \u2014 "),Cj=n(U8e,"A",{href:!0});var Jdt=s(Cj);$7o=r(Jdt,"UniSpeechModel"),Jdt.forEach(t),k7o=r(U8e," (UniSpeech model)"),U8e.forEach(t),S7o=i($),l_=n($,"LI",{});var J8e=s(l_);Yde=n(J8e,"STRONG",{});var Ydt=s(Yde);R7o=r(Ydt,"unispeech-sat"),Ydt.forEach(t),P7o=r(J8e," \u2014 "),wj=n(J8e,"A",{href:!0});var Kdt=s(wj);B7o=r(Kdt,"UniSpeechSatModel"),Kdt.forEach(t),I7o=r(J8e," (UniSpeechSat model)"),J8e.forEach(t),N7o=i($),i_=n($,"LI",{});var Y8e=s(i_);Kde=n(Y8e,"STRONG",{});var Zdt=s(Kde);q7o=r(Zdt,"van"),Zdt.forEach(t),j7o=r(Y8e," \u2014 "),Aj=n(Y8e,"A",{href:!0});var ect=s(Aj);D7o=r(ect,"VanModel"),ect.forEach(t),G7o=r(Y8e," (VAN model)"),Y8e.forEach(t),O7o=i($),d_=n($,"LI",{});var K8e=s(d_);Zde=n(K8e,"STRONG",{});var oct=s(Zde);V7o=r(oct,"vilt"),oct.forEach(t),X7o=r(K8e," \u2014 "),Lj=n(K8e,"A",{href:!0});var rct=s(Lj);z7o=r(rct,"ViltModel"),rct.forEach(t),W7o=r(K8e," (ViLT model)"),K8e.forEach(t),Q7o=i($),c_=n($,"LI",{});var Z8e=s(c_);ece=n(Z8e,"STRONG",{});var tct=s(ece);H7o=r(tct,"vision-text-dual-encoder"),tct.forEach(t),U7o=r(Z8e," \u2014 "),yj=n(Z8e,"A",{href:!0});var act=s(yj);J7o=r(act,"VisionTextDualEncoderModel"),act.forEach(t),Y7o=r(Z8e," (VisionTextDualEncoder model)"),Z8e.forEach(t),K7o=i($),f_=n($,"LI",{});var e9e=s(f_);oce=n(e9e,"STRONG",{});var nct=s(oce);Z7o=r(nct,"visual_bert"),nct.forEach(t),eMo=r(e9e," \u2014 "),xj=n(e9e,"A",{href:!0});var sct=s(xj);oMo=r(sct,"VisualBertModel"),sct.forEach(t),rMo=r(e9e," (VisualBERT model)"),e9e.forEach(t),tMo=i($),m_=n($,"LI",{});var o9e=s(m_);rce=n(o9e,"STRONG",{});var lct=s(rce);aMo=r(lct,"vit"),lct.forEach(t),nMo=r(o9e," \u2014 "),$j=n(o9e,"A",{href:!0});var ict=s($j);sMo=r(ict,"ViTModel"),ict.forEach(t),lMo=r(o9e," (ViT model)"),o9e.forEach(t),iMo=i($),g_=n($,"LI",{});var r9e=s(g_);tce=n(r9e,"STRONG",{});var dct=s(tce);dMo=r(dct,"vit_mae"),dct.forEach(t),cMo=r(r9e," \u2014 "),kj=n(r9e,"A",{href:!0});var cct=s(kj);fMo=r(cct,"ViTMAEModel"),cct.forEach(t),mMo=r(r9e," (ViTMAE model)"),r9e.forEach(t),gMo=i($),h_=n($,"LI",{});var t9e=s(h_);ace=n(t9e,"STRONG",{});var fct=s(ace);hMo=r(fct,"wav2vec2"),fct.forEach(t),pMo=r(t9e," \u2014 "),Sj=n(t9e,"A",{href:!0});var mct=s(Sj);uMo=r(mct,"Wav2Vec2Model"),mct.forEach(t),_Mo=r(t9e," (Wav2Vec2 model)"),t9e.forEach(t),bMo=i($),p_=n($,"LI",{});var a9e=s(p_);nce=n(a9e,"STRONG",{});var gct=s(nce);vMo=r(gct,"wav2vec2-conformer"),gct.forEach(t),FMo=r(a9e," \u2014 "),Rj=n(a9e,"A",{href:!0});var hct=s(Rj);TMo=r(hct,"Wav2Vec2ConformerModel"),hct.forEach(t),MMo=r(a9e," (Wav2Vec2-Conformer model)"),a9e.forEach(t),EMo=i($),u_=n($,"LI",{});var n9e=s(u_);sce=n(n9e,"STRONG",{});var pct=s(sce);CMo=r(pct,"wavlm"),pct.forEach(t),wMo=r(n9e," \u2014 "),Pj=n(n9e,"A",{href:!0});var uct=s(Pj);AMo=r(uct,"WavLMModel"),uct.forEach(t),LMo=r(n9e," (WavLM model)"),n9e.forEach(t),yMo=i($),__=n($,"LI",{});var s9e=s(__);lce=n(s9e,"STRONG",{});var _ct=s(lce);xMo=r(_ct,"xglm"),_ct.forEach(t),$Mo=r(s9e," \u2014 "),Bj=n(s9e,"A",{href:!0});var bct=s(Bj);kMo=r(bct,"XGLMModel"),bct.forEach(t),SMo=r(s9e," (XGLM model)"),s9e.forEach(t),RMo=i($),b_=n($,"LI",{});var l9e=s(b_);ice=n(l9e,"STRONG",{});var vct=s(ice);PMo=r(vct,"xlm"),vct.forEach(t),BMo=r(l9e," \u2014 "),Ij=n(l9e,"A",{href:!0});var Fct=s(Ij);IMo=r(Fct,"XLMModel"),Fct.forEach(t),NMo=r(l9e," (XLM model)"),l9e.forEach(t),qMo=i($),v_=n($,"LI",{});var i9e=s(v_);dce=n(i9e,"STRONG",{});var Tct=s(dce);jMo=r(Tct,"xlm-prophetnet"),Tct.forEach(t),DMo=r(i9e," \u2014 "),Nj=n(i9e,"A",{href:!0});var Mct=s(Nj);GMo=r(Mct,"XLMProphetNetModel"),Mct.forEach(t),OMo=r(i9e," (XLM-ProphetNet model)"),i9e.forEach(t),VMo=i($),F_=n($,"LI",{});var d9e=s(F_);cce=n(d9e,"STRONG",{});var Ect=s(cce);XMo=r(Ect,"xlm-roberta"),Ect.forEach(t),zMo=r(d9e," \u2014 "),qj=n(d9e,"A",{href:!0});var Cct=s(qj);WMo=r(Cct,"XLMRobertaModel"),Cct.forEach(t),QMo=r(d9e," (XLM-RoBERTa model)"),d9e.forEach(t),HMo=i($),T_=n($,"LI",{});var c9e=s(T_);fce=n(c9e,"STRONG",{});var wct=s(fce);UMo=r(wct,"xlm-roberta-xl"),wct.forEach(t),JMo=r(c9e," \u2014 "),jj=n(c9e,"A",{href:!0});var Act=s(jj);YMo=r(Act,"XLMRobertaXLModel"),Act.forEach(t),KMo=r(c9e," (XLM-RoBERTa-XL model)"),c9e.forEach(t),ZMo=i($),M_=n($,"LI",{});var f9e=s(M_);mce=n(f9e,"STRONG",{});var Lct=s(mce);e4o=r(Lct,"xlnet"),Lct.forEach(t),o4o=r(f9e," \u2014 "),Dj=n(f9e,"A",{href:!0});var yct=s(Dj);r4o=r(yct,"XLNetModel"),yct.forEach(t),t4o=r(f9e," (XLNet model)"),f9e.forEach(t),a4o=i($),E_=n($,"LI",{});var m9e=s(E_);gce=n(m9e,"STRONG",{});var xct=s(gce);n4o=r(xct,"yolos"),xct.forEach(t),s4o=r(m9e," \u2014 "),Gj=n(m9e,"A",{href:!0});var $ct=s(Gj);l4o=r($ct,"YolosModel"),$ct.forEach(t),i4o=r(m9e," (YOLOS model)"),m9e.forEach(t),d4o=i($),C_=n($,"LI",{});var g9e=s(C_);hce=n(g9e,"STRONG",{});var kct=s(hce);c4o=r(kct,"yoso"),kct.forEach(t),f4o=r(g9e," \u2014 "),Oj=n(g9e,"A",{href:!0});var Sct=s(Oj);m4o=r(Sct,"YosoModel"),Sct.forEach(t),g4o=r(g9e," (YOSO model)"),g9e.forEach(t),$.forEach(t),h4o=i(aa),w_=n(aa,"P",{});var h9e=s(w_);p4o=r(h9e,"The model is set in evaluation mode by default using "),pce=n(h9e,"CODE",{});var Rct=s(pce);u4o=r(Rct,"model.eval()"),Rct.forEach(t),_4o=r(h9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uce=n(h9e,"CODE",{});var Pct=s(uce);b4o=r(Pct,"model.train()"),Pct.forEach(t),h9e.forEach(t),v4o=i(aa),T(A_.$$.fragment,aa),aa.forEach(t),Us.forEach(t),gGe=i(f),Ni=n(f,"H2",{class:!0});var vVe=s(Ni);L_=n(vVe,"A",{id:!0,class:!0,href:!0});var Bct=s(L_);_ce=n(Bct,"SPAN",{});var Ict=s(_ce);T(JL.$$.fragment,Ict),Ict.forEach(t),Bct.forEach(t),F4o=i(vVe),bce=n(vVe,"SPAN",{});var Nct=s(bce);T4o=r(Nct,"AutoModelForPreTraining"),Nct.forEach(t),vVe.forEach(t),hGe=i(f),$o=n(f,"DIV",{class:!0});var Js=s($o);T(YL.$$.fragment,Js),M4o=i(Js),qi=n(Js,"P",{});var Zee=s(qi);E4o=r(Zee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Vj=n(Zee,"A",{href:!0});var qct=s(Vj);C4o=r(qct,"from_pretrained()"),qct.forEach(t),w4o=r(Zee," class method or the "),Xj=n(Zee,"A",{href:!0});var jct=s(Xj);A4o=r(jct,"from_config()"),jct.forEach(t),L4o=r(Zee,` class
method.`),Zee.forEach(t),y4o=i(Js),KL=n(Js,"P",{});var FVe=s(KL);x4o=r(FVe,"This class cannot be instantiated directly using "),vce=n(FVe,"CODE",{});var Dct=s(vce);$4o=r(Dct,"__init__()"),Dct.forEach(t),k4o=r(FVe," (throws an error)."),FVe.forEach(t),S4o=i(Js),st=n(Js,"DIV",{class:!0});var Ew=s(st);T(ZL.$$.fragment,Ew),R4o=i(Ew),Fce=n(Ew,"P",{});var Gct=s(Fce);P4o=r(Gct,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Gct.forEach(t),B4o=i(Ew),ji=n(Ew,"P",{});var eoe=s(ji);I4o=r(eoe,`Note:
Loading a model from its configuration file does `),Tce=n(eoe,"STRONG",{});var Oct=s(Tce);N4o=r(Oct,"not"),Oct.forEach(t),q4o=r(eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zj=n(eoe,"A",{href:!0});var Vct=s(zj);j4o=r(Vct,"from_pretrained()"),Vct.forEach(t),D4o=r(eoe," to load the model weights."),eoe.forEach(t),G4o=i(Ew),T(y_.$$.fragment,Ew),Ew.forEach(t),O4o=i(Js),Ye=n(Js,"DIV",{class:!0});var na=s(Ye);T(ey.$$.fragment,na),V4o=i(na),Mce=n(na,"P",{});var Xct=s(Mce);X4o=r(Xct,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xct.forEach(t),z4o=i(na),Ra=n(na,"P",{});var Cw=s(Ra);W4o=r(Cw,"The model class to instantiate is selected based on the "),Ece=n(Cw,"CODE",{});var zct=s(Ece);Q4o=r(zct,"model_type"),zct.forEach(t),H4o=r(Cw,` property of the config object (either
passed as an argument or loaded from `),Cce=n(Cw,"CODE",{});var Wct=s(Cce);U4o=r(Wct,"pretrained_model_name_or_path"),Wct.forEach(t),J4o=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wce=n(Cw,"CODE",{});var Qct=s(wce);Y4o=r(Qct,"pretrained_model_name_or_path"),Qct.forEach(t),K4o=r(Cw,":"),Cw.forEach(t),Z4o=i(na),G=n(na,"UL",{});var O=s(G);x_=n(O,"LI",{});var p9e=s(x_);Ace=n(p9e,"STRONG",{});var Hct=s(Ace);eEo=r(Hct,"albert"),Hct.forEach(t),oEo=r(p9e," \u2014 "),Wj=n(p9e,"A",{href:!0});var Uct=s(Wj);rEo=r(Uct,"AlbertForPreTraining"),Uct.forEach(t),tEo=r(p9e," (ALBERT model)"),p9e.forEach(t),aEo=i(O),$_=n(O,"LI",{});var u9e=s($_);Lce=n(u9e,"STRONG",{});var Jct=s(Lce);nEo=r(Jct,"bart"),Jct.forEach(t),sEo=r(u9e," \u2014 "),Qj=n(u9e,"A",{href:!0});var Yct=s(Qj);lEo=r(Yct,"BartForConditionalGeneration"),Yct.forEach(t),iEo=r(u9e," (BART model)"),u9e.forEach(t),dEo=i(O),k_=n(O,"LI",{});var _9e=s(k_);yce=n(_9e,"STRONG",{});var Kct=s(yce);cEo=r(Kct,"bert"),Kct.forEach(t),fEo=r(_9e," \u2014 "),Hj=n(_9e,"A",{href:!0});var Zct=s(Hj);mEo=r(Zct,"BertForPreTraining"),Zct.forEach(t),gEo=r(_9e," (BERT model)"),_9e.forEach(t),hEo=i(O),S_=n(O,"LI",{});var b9e=s(S_);xce=n(b9e,"STRONG",{});var eft=s(xce);pEo=r(eft,"big_bird"),eft.forEach(t),uEo=r(b9e," \u2014 "),Uj=n(b9e,"A",{href:!0});var oft=s(Uj);_Eo=r(oft,"BigBirdForPreTraining"),oft.forEach(t),bEo=r(b9e," (BigBird model)"),b9e.forEach(t),vEo=i(O),R_=n(O,"LI",{});var v9e=s(R_);$ce=n(v9e,"STRONG",{});var rft=s($ce);FEo=r(rft,"bloom"),rft.forEach(t),TEo=r(v9e," \u2014 "),Jj=n(v9e,"A",{href:!0});var tft=s(Jj);MEo=r(tft,"BloomForCausalLM"),tft.forEach(t),EEo=r(v9e," (BLOOM model)"),v9e.forEach(t),CEo=i(O),P_=n(O,"LI",{});var F9e=s(P_);kce=n(F9e,"STRONG",{});var aft=s(kce);wEo=r(aft,"camembert"),aft.forEach(t),AEo=r(F9e," \u2014 "),Yj=n(F9e,"A",{href:!0});var nft=s(Yj);LEo=r(nft,"CamembertForMaskedLM"),nft.forEach(t),yEo=r(F9e," (CamemBERT model)"),F9e.forEach(t),xEo=i(O),B_=n(O,"LI",{});var T9e=s(B_);Sce=n(T9e,"STRONG",{});var sft=s(Sce);$Eo=r(sft,"ctrl"),sft.forEach(t),kEo=r(T9e," \u2014 "),Kj=n(T9e,"A",{href:!0});var lft=s(Kj);SEo=r(lft,"CTRLLMHeadModel"),lft.forEach(t),REo=r(T9e," (CTRL model)"),T9e.forEach(t),PEo=i(O),I_=n(O,"LI",{});var M9e=s(I_);Rce=n(M9e,"STRONG",{});var ift=s(Rce);BEo=r(ift,"data2vec-text"),ift.forEach(t),IEo=r(M9e," \u2014 "),Zj=n(M9e,"A",{href:!0});var dft=s(Zj);NEo=r(dft,"Data2VecTextForMaskedLM"),dft.forEach(t),qEo=r(M9e," (Data2VecText model)"),M9e.forEach(t),jEo=i(O),N_=n(O,"LI",{});var E9e=s(N_);Pce=n(E9e,"STRONG",{});var cft=s(Pce);DEo=r(cft,"deberta"),cft.forEach(t),GEo=r(E9e," \u2014 "),eD=n(E9e,"A",{href:!0});var fft=s(eD);OEo=r(fft,"DebertaForMaskedLM"),fft.forEach(t),VEo=r(E9e," (DeBERTa model)"),E9e.forEach(t),XEo=i(O),q_=n(O,"LI",{});var C9e=s(q_);Bce=n(C9e,"STRONG",{});var mft=s(Bce);zEo=r(mft,"deberta-v2"),mft.forEach(t),WEo=r(C9e," \u2014 "),oD=n(C9e,"A",{href:!0});var gft=s(oD);QEo=r(gft,"DebertaV2ForMaskedLM"),gft.forEach(t),HEo=r(C9e," (DeBERTa-v2 model)"),C9e.forEach(t),UEo=i(O),j_=n(O,"LI",{});var w9e=s(j_);Ice=n(w9e,"STRONG",{});var hft=s(Ice);JEo=r(hft,"distilbert"),hft.forEach(t),YEo=r(w9e," \u2014 "),rD=n(w9e,"A",{href:!0});var pft=s(rD);KEo=r(pft,"DistilBertForMaskedLM"),pft.forEach(t),ZEo=r(w9e," (DistilBERT model)"),w9e.forEach(t),eCo=i(O),D_=n(O,"LI",{});var A9e=s(D_);Nce=n(A9e,"STRONG",{});var uft=s(Nce);oCo=r(uft,"electra"),uft.forEach(t),rCo=r(A9e," \u2014 "),tD=n(A9e,"A",{href:!0});var _ft=s(tD);tCo=r(_ft,"ElectraForPreTraining"),_ft.forEach(t),aCo=r(A9e," (ELECTRA model)"),A9e.forEach(t),nCo=i(O),G_=n(O,"LI",{});var L9e=s(G_);qce=n(L9e,"STRONG",{});var bft=s(qce);sCo=r(bft,"flaubert"),bft.forEach(t),lCo=r(L9e," \u2014 "),aD=n(L9e,"A",{href:!0});var vft=s(aD);iCo=r(vft,"FlaubertWithLMHeadModel"),vft.forEach(t),dCo=r(L9e," (FlauBERT model)"),L9e.forEach(t),cCo=i(O),O_=n(O,"LI",{});var y9e=s(O_);jce=n(y9e,"STRONG",{});var Fft=s(jce);fCo=r(Fft,"flava"),Fft.forEach(t),mCo=r(y9e," \u2014 "),nD=n(y9e,"A",{href:!0});var Tft=s(nD);gCo=r(Tft,"FlavaForPreTraining"),Tft.forEach(t),hCo=r(y9e," (FLAVA model)"),y9e.forEach(t),pCo=i(O),V_=n(O,"LI",{});var x9e=s(V_);Dce=n(x9e,"STRONG",{});var Mft=s(Dce);uCo=r(Mft,"fnet"),Mft.forEach(t),_Co=r(x9e," \u2014 "),sD=n(x9e,"A",{href:!0});var Eft=s(sD);bCo=r(Eft,"FNetForPreTraining"),Eft.forEach(t),vCo=r(x9e," (FNet model)"),x9e.forEach(t),FCo=i(O),X_=n(O,"LI",{});var $9e=s(X_);Gce=n($9e,"STRONG",{});var Cft=s(Gce);TCo=r(Cft,"fsmt"),Cft.forEach(t),MCo=r($9e," \u2014 "),lD=n($9e,"A",{href:!0});var wft=s(lD);ECo=r(wft,"FSMTForConditionalGeneration"),wft.forEach(t),CCo=r($9e," (FairSeq Machine-Translation model)"),$9e.forEach(t),wCo=i(O),z_=n(O,"LI",{});var k9e=s(z_);Oce=n(k9e,"STRONG",{});var Aft=s(Oce);ACo=r(Aft,"funnel"),Aft.forEach(t),LCo=r(k9e," \u2014 "),iD=n(k9e,"A",{href:!0});var Lft=s(iD);yCo=r(Lft,"FunnelForPreTraining"),Lft.forEach(t),xCo=r(k9e," (Funnel Transformer model)"),k9e.forEach(t),$Co=i(O),W_=n(O,"LI",{});var S9e=s(W_);Vce=n(S9e,"STRONG",{});var yft=s(Vce);kCo=r(yft,"gpt2"),yft.forEach(t),SCo=r(S9e," \u2014 "),dD=n(S9e,"A",{href:!0});var xft=s(dD);RCo=r(xft,"GPT2LMHeadModel"),xft.forEach(t),PCo=r(S9e," (OpenAI GPT-2 model)"),S9e.forEach(t),BCo=i(O),Q_=n(O,"LI",{});var R9e=s(Q_);Xce=n(R9e,"STRONG",{});var $ft=s(Xce);ICo=r($ft,"ibert"),$ft.forEach(t),NCo=r(R9e," \u2014 "),cD=n(R9e,"A",{href:!0});var kft=s(cD);qCo=r(kft,"IBertForMaskedLM"),kft.forEach(t),jCo=r(R9e," (I-BERT model)"),R9e.forEach(t),DCo=i(O),H_=n(O,"LI",{});var P9e=s(H_);zce=n(P9e,"STRONG",{});var Sft=s(zce);GCo=r(Sft,"layoutlm"),Sft.forEach(t),OCo=r(P9e," \u2014 "),fD=n(P9e,"A",{href:!0});var Rft=s(fD);VCo=r(Rft,"LayoutLMForMaskedLM"),Rft.forEach(t),XCo=r(P9e," (LayoutLM model)"),P9e.forEach(t),zCo=i(O),U_=n(O,"LI",{});var B9e=s(U_);Wce=n(B9e,"STRONG",{});var Pft=s(Wce);WCo=r(Pft,"longformer"),Pft.forEach(t),QCo=r(B9e," \u2014 "),mD=n(B9e,"A",{href:!0});var Bft=s(mD);HCo=r(Bft,"LongformerForMaskedLM"),Bft.forEach(t),UCo=r(B9e," (Longformer model)"),B9e.forEach(t),JCo=i(O),J_=n(O,"LI",{});var I9e=s(J_);Qce=n(I9e,"STRONG",{});var Ift=s(Qce);YCo=r(Ift,"lxmert"),Ift.forEach(t),KCo=r(I9e," \u2014 "),gD=n(I9e,"A",{href:!0});var Nft=s(gD);ZCo=r(Nft,"LxmertForPreTraining"),Nft.forEach(t),e5o=r(I9e," (LXMERT model)"),I9e.forEach(t),o5o=i(O),Y_=n(O,"LI",{});var N9e=s(Y_);Hce=n(N9e,"STRONG",{});var qft=s(Hce);r5o=r(qft,"megatron-bert"),qft.forEach(t),t5o=r(N9e," \u2014 "),hD=n(N9e,"A",{href:!0});var jft=s(hD);a5o=r(jft,"MegatronBertForPreTraining"),jft.forEach(t),n5o=r(N9e," (Megatron-BERT model)"),N9e.forEach(t),s5o=i(O),K_=n(O,"LI",{});var q9e=s(K_);Uce=n(q9e,"STRONG",{});var Dft=s(Uce);l5o=r(Dft,"mobilebert"),Dft.forEach(t),i5o=r(q9e," \u2014 "),pD=n(q9e,"A",{href:!0});var Gft=s(pD);d5o=r(Gft,"MobileBertForPreTraining"),Gft.forEach(t),c5o=r(q9e," (MobileBERT model)"),q9e.forEach(t),f5o=i(O),Z_=n(O,"LI",{});var j9e=s(Z_);Jce=n(j9e,"STRONG",{});var Oft=s(Jce);m5o=r(Oft,"mpnet"),Oft.forEach(t),g5o=r(j9e," \u2014 "),uD=n(j9e,"A",{href:!0});var Vft=s(uD);h5o=r(Vft,"MPNetForMaskedLM"),Vft.forEach(t),p5o=r(j9e," (MPNet model)"),j9e.forEach(t),u5o=i(O),e1=n(O,"LI",{});var D9e=s(e1);Yce=n(D9e,"STRONG",{});var Xft=s(Yce);_5o=r(Xft,"openai-gpt"),Xft.forEach(t),b5o=r(D9e," \u2014 "),_D=n(D9e,"A",{href:!0});var zft=s(_D);v5o=r(zft,"OpenAIGPTLMHeadModel"),zft.forEach(t),F5o=r(D9e," (OpenAI GPT model)"),D9e.forEach(t),T5o=i(O),o1=n(O,"LI",{});var G9e=s(o1);Kce=n(G9e,"STRONG",{});var Wft=s(Kce);M5o=r(Wft,"retribert"),Wft.forEach(t),E5o=r(G9e," \u2014 "),bD=n(G9e,"A",{href:!0});var Qft=s(bD);C5o=r(Qft,"RetriBertModel"),Qft.forEach(t),w5o=r(G9e," (RetriBERT model)"),G9e.forEach(t),A5o=i(O),r1=n(O,"LI",{});var O9e=s(r1);Zce=n(O9e,"STRONG",{});var Hft=s(Zce);L5o=r(Hft,"roberta"),Hft.forEach(t),y5o=r(O9e," \u2014 "),vD=n(O9e,"A",{href:!0});var Uft=s(vD);x5o=r(Uft,"RobertaForMaskedLM"),Uft.forEach(t),$5o=r(O9e," (RoBERTa model)"),O9e.forEach(t),k5o=i(O),t1=n(O,"LI",{});var V9e=s(t1);efe=n(V9e,"STRONG",{});var Jft=s(efe);S5o=r(Jft,"splinter"),Jft.forEach(t),R5o=r(V9e," \u2014 "),FD=n(V9e,"A",{href:!0});var Yft=s(FD);P5o=r(Yft,"SplinterForPreTraining"),Yft.forEach(t),B5o=r(V9e," (Splinter model)"),V9e.forEach(t),I5o=i(O),a1=n(O,"LI",{});var X9e=s(a1);ofe=n(X9e,"STRONG",{});var Kft=s(ofe);N5o=r(Kft,"squeezebert"),Kft.forEach(t),q5o=r(X9e," \u2014 "),TD=n(X9e,"A",{href:!0});var Zft=s(TD);j5o=r(Zft,"SqueezeBertForMaskedLM"),Zft.forEach(t),D5o=r(X9e," (SqueezeBERT model)"),X9e.forEach(t),G5o=i(O),n1=n(O,"LI",{});var z9e=s(n1);rfe=n(z9e,"STRONG",{});var emt=s(rfe);O5o=r(emt,"t5"),emt.forEach(t),V5o=r(z9e," \u2014 "),MD=n(z9e,"A",{href:!0});var omt=s(MD);X5o=r(omt,"T5ForConditionalGeneration"),omt.forEach(t),z5o=r(z9e," (T5 model)"),z9e.forEach(t),W5o=i(O),s1=n(O,"LI",{});var W9e=s(s1);tfe=n(W9e,"STRONG",{});var rmt=s(tfe);Q5o=r(rmt,"tapas"),rmt.forEach(t),H5o=r(W9e," \u2014 "),ED=n(W9e,"A",{href:!0});var tmt=s(ED);U5o=r(tmt,"TapasForMaskedLM"),tmt.forEach(t),J5o=r(W9e," (TAPAS model)"),W9e.forEach(t),Y5o=i(O),l1=n(O,"LI",{});var Q9e=s(l1);afe=n(Q9e,"STRONG",{});var amt=s(afe);K5o=r(amt,"transfo-xl"),amt.forEach(t),Z5o=r(Q9e," \u2014 "),CD=n(Q9e,"A",{href:!0});var nmt=s(CD);ewo=r(nmt,"TransfoXLLMHeadModel"),nmt.forEach(t),owo=r(Q9e," (Transformer-XL model)"),Q9e.forEach(t),rwo=i(O),i1=n(O,"LI",{});var H9e=s(i1);nfe=n(H9e,"STRONG",{});var smt=s(nfe);two=r(smt,"unispeech"),smt.forEach(t),awo=r(H9e," \u2014 "),wD=n(H9e,"A",{href:!0});var lmt=s(wD);nwo=r(lmt,"UniSpeechForPreTraining"),lmt.forEach(t),swo=r(H9e," (UniSpeech model)"),H9e.forEach(t),lwo=i(O),d1=n(O,"LI",{});var U9e=s(d1);sfe=n(U9e,"STRONG",{});var imt=s(sfe);iwo=r(imt,"unispeech-sat"),imt.forEach(t),dwo=r(U9e," \u2014 "),AD=n(U9e,"A",{href:!0});var dmt=s(AD);cwo=r(dmt,"UniSpeechSatForPreTraining"),dmt.forEach(t),fwo=r(U9e," (UniSpeechSat model)"),U9e.forEach(t),mwo=i(O),c1=n(O,"LI",{});var J9e=s(c1);lfe=n(J9e,"STRONG",{});var cmt=s(lfe);gwo=r(cmt,"visual_bert"),cmt.forEach(t),hwo=r(J9e," \u2014 "),LD=n(J9e,"A",{href:!0});var fmt=s(LD);pwo=r(fmt,"VisualBertForPreTraining"),fmt.forEach(t),uwo=r(J9e," (VisualBERT model)"),J9e.forEach(t),_wo=i(O),f1=n(O,"LI",{});var Y9e=s(f1);ife=n(Y9e,"STRONG",{});var mmt=s(ife);bwo=r(mmt,"vit_mae"),mmt.forEach(t),vwo=r(Y9e," \u2014 "),yD=n(Y9e,"A",{href:!0});var gmt=s(yD);Fwo=r(gmt,"ViTMAEForPreTraining"),gmt.forEach(t),Two=r(Y9e," (ViTMAE model)"),Y9e.forEach(t),Mwo=i(O),m1=n(O,"LI",{});var K9e=s(m1);dfe=n(K9e,"STRONG",{});var hmt=s(dfe);Ewo=r(hmt,"wav2vec2"),hmt.forEach(t),Cwo=r(K9e," \u2014 "),xD=n(K9e,"A",{href:!0});var pmt=s(xD);wwo=r(pmt,"Wav2Vec2ForPreTraining"),pmt.forEach(t),Awo=r(K9e," (Wav2Vec2 model)"),K9e.forEach(t),Lwo=i(O),g1=n(O,"LI",{});var Z9e=s(g1);cfe=n(Z9e,"STRONG",{});var umt=s(cfe);ywo=r(umt,"wav2vec2-conformer"),umt.forEach(t),xwo=r(Z9e," \u2014 "),$D=n(Z9e,"A",{href:!0});var _mt=s($D);$wo=r(_mt,"Wav2Vec2ConformerForPreTraining"),_mt.forEach(t),kwo=r(Z9e," (Wav2Vec2-Conformer model)"),Z9e.forEach(t),Swo=i(O),h1=n(O,"LI",{});var exe=s(h1);ffe=n(exe,"STRONG",{});var bmt=s(ffe);Rwo=r(bmt,"xlm"),bmt.forEach(t),Pwo=r(exe," \u2014 "),kD=n(exe,"A",{href:!0});var vmt=s(kD);Bwo=r(vmt,"XLMWithLMHeadModel"),vmt.forEach(t),Iwo=r(exe," (XLM model)"),exe.forEach(t),Nwo=i(O),p1=n(O,"LI",{});var oxe=s(p1);mfe=n(oxe,"STRONG",{});var Fmt=s(mfe);qwo=r(Fmt,"xlm-roberta"),Fmt.forEach(t),jwo=r(oxe," \u2014 "),SD=n(oxe,"A",{href:!0});var Tmt=s(SD);Dwo=r(Tmt,"XLMRobertaForMaskedLM"),Tmt.forEach(t),Gwo=r(oxe," (XLM-RoBERTa model)"),oxe.forEach(t),Owo=i(O),u1=n(O,"LI",{});var rxe=s(u1);gfe=n(rxe,"STRONG",{});var Mmt=s(gfe);Vwo=r(Mmt,"xlm-roberta-xl"),Mmt.forEach(t),Xwo=r(rxe," \u2014 "),RD=n(rxe,"A",{href:!0});var Emt=s(RD);zwo=r(Emt,"XLMRobertaXLForMaskedLM"),Emt.forEach(t),Wwo=r(rxe," (XLM-RoBERTa-XL model)"),rxe.forEach(t),Qwo=i(O),_1=n(O,"LI",{});var txe=s(_1);hfe=n(txe,"STRONG",{});var Cmt=s(hfe);Hwo=r(Cmt,"xlnet"),Cmt.forEach(t),Uwo=r(txe," \u2014 "),PD=n(txe,"A",{href:!0});var wmt=s(PD);Jwo=r(wmt,"XLNetLMHeadModel"),wmt.forEach(t),Ywo=r(txe," (XLNet model)"),txe.forEach(t),O.forEach(t),Kwo=i(na),b1=n(na,"P",{});var axe=s(b1);Zwo=r(axe,"The model is set in evaluation mode by default using "),pfe=n(axe,"CODE",{});var Amt=s(pfe);eAo=r(Amt,"model.eval()"),Amt.forEach(t),oAo=r(axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=n(axe,"CODE",{});var Lmt=s(ufe);rAo=r(Lmt,"model.train()"),Lmt.forEach(t),axe.forEach(t),tAo=i(na),T(v1.$$.fragment,na),na.forEach(t),Js.forEach(t),pGe=i(f),Di=n(f,"H2",{class:!0});var TVe=s(Di);F1=n(TVe,"A",{id:!0,class:!0,href:!0});var ymt=s(F1);_fe=n(ymt,"SPAN",{});var xmt=s(_fe);T(oy.$$.fragment,xmt),xmt.forEach(t),ymt.forEach(t),aAo=i(TVe),bfe=n(TVe,"SPAN",{});var $mt=s(bfe);nAo=r($mt,"AutoModelForCausalLM"),$mt.forEach(t),TVe.forEach(t),uGe=i(f),ko=n(f,"DIV",{class:!0});var Ys=s(ko);T(ry.$$.fragment,Ys),sAo=i(Ys),Gi=n(Ys,"P",{});var ooe=s(Gi);lAo=r(ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BD=n(ooe,"A",{href:!0});var kmt=s(BD);iAo=r(kmt,"from_pretrained()"),kmt.forEach(t),dAo=r(ooe," class method or the "),ID=n(ooe,"A",{href:!0});var Smt=s(ID);cAo=r(Smt,"from_config()"),Smt.forEach(t),fAo=r(ooe,` class
method.`),ooe.forEach(t),mAo=i(Ys),ty=n(Ys,"P",{});var MVe=s(ty);gAo=r(MVe,"This class cannot be instantiated directly using "),vfe=n(MVe,"CODE",{});var Rmt=s(vfe);hAo=r(Rmt,"__init__()"),Rmt.forEach(t),pAo=r(MVe," (throws an error)."),MVe.forEach(t),uAo=i(Ys),lt=n(Ys,"DIV",{class:!0});var ww=s(lt);T(ay.$$.fragment,ww),_Ao=i(ww),Ffe=n(ww,"P",{});var Pmt=s(Ffe);bAo=r(Pmt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Pmt.forEach(t),vAo=i(ww),Oi=n(ww,"P",{});var roe=s(Oi);FAo=r(roe,`Note:
Loading a model from its configuration file does `),Tfe=n(roe,"STRONG",{});var Bmt=s(Tfe);TAo=r(Bmt,"not"),Bmt.forEach(t),MAo=r(roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ND=n(roe,"A",{href:!0});var Imt=s(ND);EAo=r(Imt,"from_pretrained()"),Imt.forEach(t),CAo=r(roe," to load the model weights."),roe.forEach(t),wAo=i(ww),T(T1.$$.fragment,ww),ww.forEach(t),AAo=i(Ys),Ke=n(Ys,"DIV",{class:!0});var sa=s(Ke);T(ny.$$.fragment,sa),LAo=i(sa),Mfe=n(sa,"P",{});var Nmt=s(Mfe);yAo=r(Nmt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Nmt.forEach(t),xAo=i(sa),Pa=n(sa,"P",{});var Aw=s(Pa);$Ao=r(Aw,"The model class to instantiate is selected based on the "),Efe=n(Aw,"CODE",{});var qmt=s(Efe);kAo=r(qmt,"model_type"),qmt.forEach(t),SAo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),Cfe=n(Aw,"CODE",{});var jmt=s(Cfe);RAo=r(jmt,"pretrained_model_name_or_path"),jmt.forEach(t),PAo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=n(Aw,"CODE",{});var Dmt=s(wfe);BAo=r(Dmt,"pretrained_model_name_or_path"),Dmt.forEach(t),IAo=r(Aw,":"),Aw.forEach(t),NAo=i(sa),z=n(sa,"UL",{});var W=s(z);M1=n(W,"LI",{});var nxe=s(M1);Afe=n(nxe,"STRONG",{});var Gmt=s(Afe);qAo=r(Gmt,"bart"),Gmt.forEach(t),jAo=r(nxe," \u2014 "),qD=n(nxe,"A",{href:!0});var Omt=s(qD);DAo=r(Omt,"BartForCausalLM"),Omt.forEach(t),GAo=r(nxe," (BART model)"),nxe.forEach(t),OAo=i(W),E1=n(W,"LI",{});var sxe=s(E1);Lfe=n(sxe,"STRONG",{});var Vmt=s(Lfe);VAo=r(Vmt,"bert"),Vmt.forEach(t),XAo=r(sxe," \u2014 "),jD=n(sxe,"A",{href:!0});var Xmt=s(jD);zAo=r(Xmt,"BertLMHeadModel"),Xmt.forEach(t),WAo=r(sxe," (BERT model)"),sxe.forEach(t),QAo=i(W),C1=n(W,"LI",{});var lxe=s(C1);yfe=n(lxe,"STRONG",{});var zmt=s(yfe);HAo=r(zmt,"bert-generation"),zmt.forEach(t),UAo=r(lxe," \u2014 "),DD=n(lxe,"A",{href:!0});var Wmt=s(DD);JAo=r(Wmt,"BertGenerationDecoder"),Wmt.forEach(t),YAo=r(lxe," (Bert Generation model)"),lxe.forEach(t),KAo=i(W),w1=n(W,"LI",{});var ixe=s(w1);xfe=n(ixe,"STRONG",{});var Qmt=s(xfe);ZAo=r(Qmt,"big_bird"),Qmt.forEach(t),eLo=r(ixe," \u2014 "),GD=n(ixe,"A",{href:!0});var Hmt=s(GD);oLo=r(Hmt,"BigBirdForCausalLM"),Hmt.forEach(t),rLo=r(ixe," (BigBird model)"),ixe.forEach(t),tLo=i(W),A1=n(W,"LI",{});var dxe=s(A1);$fe=n(dxe,"STRONG",{});var Umt=s($fe);aLo=r(Umt,"bigbird_pegasus"),Umt.forEach(t),nLo=r(dxe," \u2014 "),OD=n(dxe,"A",{href:!0});var Jmt=s(OD);sLo=r(Jmt,"BigBirdPegasusForCausalLM"),Jmt.forEach(t),lLo=r(dxe," (BigBird-Pegasus model)"),dxe.forEach(t),iLo=i(W),L1=n(W,"LI",{});var cxe=s(L1);kfe=n(cxe,"STRONG",{});var Ymt=s(kfe);dLo=r(Ymt,"blenderbot"),Ymt.forEach(t),cLo=r(cxe," \u2014 "),VD=n(cxe,"A",{href:!0});var Kmt=s(VD);fLo=r(Kmt,"BlenderbotForCausalLM"),Kmt.forEach(t),mLo=r(cxe," (Blenderbot model)"),cxe.forEach(t),gLo=i(W),y1=n(W,"LI",{});var fxe=s(y1);Sfe=n(fxe,"STRONG",{});var Zmt=s(Sfe);hLo=r(Zmt,"blenderbot-small"),Zmt.forEach(t),pLo=r(fxe," \u2014 "),XD=n(fxe,"A",{href:!0});var egt=s(XD);uLo=r(egt,"BlenderbotSmallForCausalLM"),egt.forEach(t),_Lo=r(fxe," (BlenderbotSmall model)"),fxe.forEach(t),bLo=i(W),x1=n(W,"LI",{});var mxe=s(x1);Rfe=n(mxe,"STRONG",{});var ogt=s(Rfe);vLo=r(ogt,"bloom"),ogt.forEach(t),FLo=r(mxe," \u2014 "),zD=n(mxe,"A",{href:!0});var rgt=s(zD);TLo=r(rgt,"BloomForCausalLM"),rgt.forEach(t),MLo=r(mxe," (BLOOM model)"),mxe.forEach(t),ELo=i(W),$1=n(W,"LI",{});var gxe=s($1);Pfe=n(gxe,"STRONG",{});var tgt=s(Pfe);CLo=r(tgt,"camembert"),tgt.forEach(t),wLo=r(gxe," \u2014 "),WD=n(gxe,"A",{href:!0});var agt=s(WD);ALo=r(agt,"CamembertForCausalLM"),agt.forEach(t),LLo=r(gxe," (CamemBERT model)"),gxe.forEach(t),yLo=i(W),k1=n(W,"LI",{});var hxe=s(k1);Bfe=n(hxe,"STRONG",{});var ngt=s(Bfe);xLo=r(ngt,"ctrl"),ngt.forEach(t),$Lo=r(hxe," \u2014 "),QD=n(hxe,"A",{href:!0});var sgt=s(QD);kLo=r(sgt,"CTRLLMHeadModel"),sgt.forEach(t),SLo=r(hxe," (CTRL model)"),hxe.forEach(t),RLo=i(W),S1=n(W,"LI",{});var pxe=s(S1);Ife=n(pxe,"STRONG",{});var lgt=s(Ife);PLo=r(lgt,"data2vec-text"),lgt.forEach(t),BLo=r(pxe," \u2014 "),HD=n(pxe,"A",{href:!0});var igt=s(HD);ILo=r(igt,"Data2VecTextForCausalLM"),igt.forEach(t),NLo=r(pxe," (Data2VecText model)"),pxe.forEach(t),qLo=i(W),R1=n(W,"LI",{});var uxe=s(R1);Nfe=n(uxe,"STRONG",{});var dgt=s(Nfe);jLo=r(dgt,"electra"),dgt.forEach(t),DLo=r(uxe," \u2014 "),UD=n(uxe,"A",{href:!0});var cgt=s(UD);GLo=r(cgt,"ElectraForCausalLM"),cgt.forEach(t),OLo=r(uxe," (ELECTRA model)"),uxe.forEach(t),VLo=i(W),P1=n(W,"LI",{});var _xe=s(P1);qfe=n(_xe,"STRONG",{});var fgt=s(qfe);XLo=r(fgt,"gpt2"),fgt.forEach(t),zLo=r(_xe," \u2014 "),JD=n(_xe,"A",{href:!0});var mgt=s(JD);WLo=r(mgt,"GPT2LMHeadModel"),mgt.forEach(t),QLo=r(_xe," (OpenAI GPT-2 model)"),_xe.forEach(t),HLo=i(W),B1=n(W,"LI",{});var bxe=s(B1);jfe=n(bxe,"STRONG",{});var ggt=s(jfe);ULo=r(ggt,"gpt_neo"),ggt.forEach(t),JLo=r(bxe," \u2014 "),YD=n(bxe,"A",{href:!0});var hgt=s(YD);YLo=r(hgt,"GPTNeoForCausalLM"),hgt.forEach(t),KLo=r(bxe," (GPT Neo model)"),bxe.forEach(t),ZLo=i(W),I1=n(W,"LI",{});var vxe=s(I1);Dfe=n(vxe,"STRONG",{});var pgt=s(Dfe);eyo=r(pgt,"gpt_neox"),pgt.forEach(t),oyo=r(vxe," \u2014 "),KD=n(vxe,"A",{href:!0});var ugt=s(KD);ryo=r(ugt,"GPTNeoXForCausalLM"),ugt.forEach(t),tyo=r(vxe," (GPT NeoX model)"),vxe.forEach(t),ayo=i(W),N1=n(W,"LI",{});var Fxe=s(N1);Gfe=n(Fxe,"STRONG",{});var _gt=s(Gfe);nyo=r(_gt,"gptj"),_gt.forEach(t),syo=r(Fxe," \u2014 "),ZD=n(Fxe,"A",{href:!0});var bgt=s(ZD);lyo=r(bgt,"GPTJForCausalLM"),bgt.forEach(t),iyo=r(Fxe," (GPT-J model)"),Fxe.forEach(t),dyo=i(W),q1=n(W,"LI",{});var Txe=s(q1);Ofe=n(Txe,"STRONG",{});var vgt=s(Ofe);cyo=r(vgt,"marian"),vgt.forEach(t),fyo=r(Txe," \u2014 "),eG=n(Txe,"A",{href:!0});var Fgt=s(eG);myo=r(Fgt,"MarianForCausalLM"),Fgt.forEach(t),gyo=r(Txe," (Marian model)"),Txe.forEach(t),hyo=i(W),j1=n(W,"LI",{});var Mxe=s(j1);Vfe=n(Mxe,"STRONG",{});var Tgt=s(Vfe);pyo=r(Tgt,"mbart"),Tgt.forEach(t),uyo=r(Mxe," \u2014 "),oG=n(Mxe,"A",{href:!0});var Mgt=s(oG);_yo=r(Mgt,"MBartForCausalLM"),Mgt.forEach(t),byo=r(Mxe," (mBART model)"),Mxe.forEach(t),vyo=i(W),D1=n(W,"LI",{});var Exe=s(D1);Xfe=n(Exe,"STRONG",{});var Egt=s(Xfe);Fyo=r(Egt,"megatron-bert"),Egt.forEach(t),Tyo=r(Exe," \u2014 "),rG=n(Exe,"A",{href:!0});var Cgt=s(rG);Myo=r(Cgt,"MegatronBertForCausalLM"),Cgt.forEach(t),Eyo=r(Exe," (Megatron-BERT model)"),Exe.forEach(t),Cyo=i(W),G1=n(W,"LI",{});var Cxe=s(G1);zfe=n(Cxe,"STRONG",{});var wgt=s(zfe);wyo=r(wgt,"openai-gpt"),wgt.forEach(t),Ayo=r(Cxe," \u2014 "),tG=n(Cxe,"A",{href:!0});var Agt=s(tG);Lyo=r(Agt,"OpenAIGPTLMHeadModel"),Agt.forEach(t),yyo=r(Cxe," (OpenAI GPT model)"),Cxe.forEach(t),xyo=i(W),O1=n(W,"LI",{});var wxe=s(O1);Wfe=n(wxe,"STRONG",{});var Lgt=s(Wfe);$yo=r(Lgt,"opt"),Lgt.forEach(t),kyo=r(wxe," \u2014 "),aG=n(wxe,"A",{href:!0});var ygt=s(aG);Syo=r(ygt,"OPTForCausalLM"),ygt.forEach(t),Ryo=r(wxe," (OPT model)"),wxe.forEach(t),Pyo=i(W),V1=n(W,"LI",{});var Axe=s(V1);Qfe=n(Axe,"STRONG",{});var xgt=s(Qfe);Byo=r(xgt,"pegasus"),xgt.forEach(t),Iyo=r(Axe," \u2014 "),nG=n(Axe,"A",{href:!0});var $gt=s(nG);Nyo=r($gt,"PegasusForCausalLM"),$gt.forEach(t),qyo=r(Axe," (Pegasus model)"),Axe.forEach(t),jyo=i(W),X1=n(W,"LI",{});var Lxe=s(X1);Hfe=n(Lxe,"STRONG",{});var kgt=s(Hfe);Dyo=r(kgt,"plbart"),kgt.forEach(t),Gyo=r(Lxe," \u2014 "),sG=n(Lxe,"A",{href:!0});var Sgt=s(sG);Oyo=r(Sgt,"PLBartForCausalLM"),Sgt.forEach(t),Vyo=r(Lxe," (PLBart model)"),Lxe.forEach(t),Xyo=i(W),z1=n(W,"LI",{});var yxe=s(z1);Ufe=n(yxe,"STRONG",{});var Rgt=s(Ufe);zyo=r(Rgt,"prophetnet"),Rgt.forEach(t),Wyo=r(yxe," \u2014 "),lG=n(yxe,"A",{href:!0});var Pgt=s(lG);Qyo=r(Pgt,"ProphetNetForCausalLM"),Pgt.forEach(t),Hyo=r(yxe," (ProphetNet model)"),yxe.forEach(t),Uyo=i(W),W1=n(W,"LI",{});var xxe=s(W1);Jfe=n(xxe,"STRONG",{});var Bgt=s(Jfe);Jyo=r(Bgt,"qdqbert"),Bgt.forEach(t),Yyo=r(xxe," \u2014 "),iG=n(xxe,"A",{href:!0});var Igt=s(iG);Kyo=r(Igt,"QDQBertLMHeadModel"),Igt.forEach(t),Zyo=r(xxe," (QDQBert model)"),xxe.forEach(t),e8o=i(W),Q1=n(W,"LI",{});var $xe=s(Q1);Yfe=n($xe,"STRONG",{});var Ngt=s(Yfe);o8o=r(Ngt,"reformer"),Ngt.forEach(t),r8o=r($xe," \u2014 "),dG=n($xe,"A",{href:!0});var qgt=s(dG);t8o=r(qgt,"ReformerModelWithLMHead"),qgt.forEach(t),a8o=r($xe," (Reformer model)"),$xe.forEach(t),n8o=i(W),H1=n(W,"LI",{});var kxe=s(H1);Kfe=n(kxe,"STRONG",{});var jgt=s(Kfe);s8o=r(jgt,"rembert"),jgt.forEach(t),l8o=r(kxe," \u2014 "),cG=n(kxe,"A",{href:!0});var Dgt=s(cG);i8o=r(Dgt,"RemBertForCausalLM"),Dgt.forEach(t),d8o=r(kxe," (RemBERT model)"),kxe.forEach(t),c8o=i(W),U1=n(W,"LI",{});var Sxe=s(U1);Zfe=n(Sxe,"STRONG",{});var Ggt=s(Zfe);f8o=r(Ggt,"roberta"),Ggt.forEach(t),m8o=r(Sxe," \u2014 "),fG=n(Sxe,"A",{href:!0});var Ogt=s(fG);g8o=r(Ogt,"RobertaForCausalLM"),Ogt.forEach(t),h8o=r(Sxe," (RoBERTa model)"),Sxe.forEach(t),p8o=i(W),J1=n(W,"LI",{});var Rxe=s(J1);eme=n(Rxe,"STRONG",{});var Vgt=s(eme);u8o=r(Vgt,"roformer"),Vgt.forEach(t),_8o=r(Rxe," \u2014 "),mG=n(Rxe,"A",{href:!0});var Xgt=s(mG);b8o=r(Xgt,"RoFormerForCausalLM"),Xgt.forEach(t),v8o=r(Rxe," (RoFormer model)"),Rxe.forEach(t),F8o=i(W),Y1=n(W,"LI",{});var Pxe=s(Y1);ome=n(Pxe,"STRONG",{});var zgt=s(ome);T8o=r(zgt,"speech_to_text_2"),zgt.forEach(t),M8o=r(Pxe," \u2014 "),gG=n(Pxe,"A",{href:!0});var Wgt=s(gG);E8o=r(Wgt,"Speech2Text2ForCausalLM"),Wgt.forEach(t),C8o=r(Pxe," (Speech2Text2 model)"),Pxe.forEach(t),w8o=i(W),K1=n(W,"LI",{});var Bxe=s(K1);rme=n(Bxe,"STRONG",{});var Qgt=s(rme);A8o=r(Qgt,"transfo-xl"),Qgt.forEach(t),L8o=r(Bxe," \u2014 "),hG=n(Bxe,"A",{href:!0});var Hgt=s(hG);y8o=r(Hgt,"TransfoXLLMHeadModel"),Hgt.forEach(t),x8o=r(Bxe," (Transformer-XL model)"),Bxe.forEach(t),$8o=i(W),Z1=n(W,"LI",{});var Ixe=s(Z1);tme=n(Ixe,"STRONG",{});var Ugt=s(tme);k8o=r(Ugt,"trocr"),Ugt.forEach(t),S8o=r(Ixe," \u2014 "),pG=n(Ixe,"A",{href:!0});var Jgt=s(pG);R8o=r(Jgt,"TrOCRForCausalLM"),Jgt.forEach(t),P8o=r(Ixe," (TrOCR model)"),Ixe.forEach(t),B8o=i(W),e2=n(W,"LI",{});var Nxe=s(e2);ame=n(Nxe,"STRONG",{});var Ygt=s(ame);I8o=r(Ygt,"xglm"),Ygt.forEach(t),N8o=r(Nxe," \u2014 "),uG=n(Nxe,"A",{href:!0});var Kgt=s(uG);q8o=r(Kgt,"XGLMForCausalLM"),Kgt.forEach(t),j8o=r(Nxe," (XGLM model)"),Nxe.forEach(t),D8o=i(W),o2=n(W,"LI",{});var qxe=s(o2);nme=n(qxe,"STRONG",{});var Zgt=s(nme);G8o=r(Zgt,"xlm"),Zgt.forEach(t),O8o=r(qxe," \u2014 "),_G=n(qxe,"A",{href:!0});var eht=s(_G);V8o=r(eht,"XLMWithLMHeadModel"),eht.forEach(t),X8o=r(qxe," (XLM model)"),qxe.forEach(t),z8o=i(W),r2=n(W,"LI",{});var jxe=s(r2);sme=n(jxe,"STRONG",{});var oht=s(sme);W8o=r(oht,"xlm-prophetnet"),oht.forEach(t),Q8o=r(jxe," \u2014 "),bG=n(jxe,"A",{href:!0});var rht=s(bG);H8o=r(rht,"XLMProphetNetForCausalLM"),rht.forEach(t),U8o=r(jxe," (XLM-ProphetNet model)"),jxe.forEach(t),J8o=i(W),t2=n(W,"LI",{});var Dxe=s(t2);lme=n(Dxe,"STRONG",{});var tht=s(lme);Y8o=r(tht,"xlm-roberta"),tht.forEach(t),K8o=r(Dxe," \u2014 "),vG=n(Dxe,"A",{href:!0});var aht=s(vG);Z8o=r(aht,"XLMRobertaForCausalLM"),aht.forEach(t),e9o=r(Dxe," (XLM-RoBERTa model)"),Dxe.forEach(t),o9o=i(W),a2=n(W,"LI",{});var Gxe=s(a2);ime=n(Gxe,"STRONG",{});var nht=s(ime);r9o=r(nht,"xlm-roberta-xl"),nht.forEach(t),t9o=r(Gxe," \u2014 "),FG=n(Gxe,"A",{href:!0});var sht=s(FG);a9o=r(sht,"XLMRobertaXLForCausalLM"),sht.forEach(t),n9o=r(Gxe," (XLM-RoBERTa-XL model)"),Gxe.forEach(t),s9o=i(W),n2=n(W,"LI",{});var Oxe=s(n2);dme=n(Oxe,"STRONG",{});var lht=s(dme);l9o=r(lht,"xlnet"),lht.forEach(t),i9o=r(Oxe," \u2014 "),TG=n(Oxe,"A",{href:!0});var iht=s(TG);d9o=r(iht,"XLNetLMHeadModel"),iht.forEach(t),c9o=r(Oxe," (XLNet model)"),Oxe.forEach(t),W.forEach(t),f9o=i(sa),s2=n(sa,"P",{});var Vxe=s(s2);m9o=r(Vxe,"The model is set in evaluation mode by default using "),cme=n(Vxe,"CODE",{});var dht=s(cme);g9o=r(dht,"model.eval()"),dht.forEach(t),h9o=r(Vxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=n(Vxe,"CODE",{});var cht=s(fme);p9o=r(cht,"model.train()"),cht.forEach(t),Vxe.forEach(t),u9o=i(sa),T(l2.$$.fragment,sa),sa.forEach(t),Ys.forEach(t),_Ge=i(f),Vi=n(f,"H2",{class:!0});var EVe=s(Vi);i2=n(EVe,"A",{id:!0,class:!0,href:!0});var fht=s(i2);mme=n(fht,"SPAN",{});var mht=s(mme);T(sy.$$.fragment,mht),mht.forEach(t),fht.forEach(t),_9o=i(EVe),gme=n(EVe,"SPAN",{});var ght=s(gme);b9o=r(ght,"AutoModelForMaskedLM"),ght.forEach(t),EVe.forEach(t),bGe=i(f),So=n(f,"DIV",{class:!0});var Ks=s(So);T(ly.$$.fragment,Ks),v9o=i(Ks),Xi=n(Ks,"P",{});var toe=s(Xi);F9o=r(toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MG=n(toe,"A",{href:!0});var hht=s(MG);T9o=r(hht,"from_pretrained()"),hht.forEach(t),M9o=r(toe," class method or the "),EG=n(toe,"A",{href:!0});var pht=s(EG);E9o=r(pht,"from_config()"),pht.forEach(t),C9o=r(toe,` class
method.`),toe.forEach(t),w9o=i(Ks),iy=n(Ks,"P",{});var CVe=s(iy);A9o=r(CVe,"This class cannot be instantiated directly using "),hme=n(CVe,"CODE",{});var uht=s(hme);L9o=r(uht,"__init__()"),uht.forEach(t),y9o=r(CVe," (throws an error)."),CVe.forEach(t),x9o=i(Ks),it=n(Ks,"DIV",{class:!0});var Lw=s(it);T(dy.$$.fragment,Lw),$9o=i(Lw),pme=n(Lw,"P",{});var _ht=s(pme);k9o=r(_ht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_ht.forEach(t),S9o=i(Lw),zi=n(Lw,"P",{});var aoe=s(zi);R9o=r(aoe,`Note:
Loading a model from its configuration file does `),ume=n(aoe,"STRONG",{});var bht=s(ume);P9o=r(bht,"not"),bht.forEach(t),B9o=r(aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),CG=n(aoe,"A",{href:!0});var vht=s(CG);I9o=r(vht,"from_pretrained()"),vht.forEach(t),N9o=r(aoe," to load the model weights."),aoe.forEach(t),q9o=i(Lw),T(d2.$$.fragment,Lw),Lw.forEach(t),j9o=i(Ks),Ze=n(Ks,"DIV",{class:!0});var la=s(Ze);T(cy.$$.fragment,la),D9o=i(la),_me=n(la,"P",{});var Fht=s(_me);G9o=r(Fht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Fht.forEach(t),O9o=i(la),Ba=n(la,"P",{});var yw=s(Ba);V9o=r(yw,"The model class to instantiate is selected based on the "),bme=n(yw,"CODE",{});var Tht=s(bme);X9o=r(Tht,"model_type"),Tht.forEach(t),z9o=r(yw,` property of the config object (either
passed as an argument or loaded from `),vme=n(yw,"CODE",{});var Mht=s(vme);W9o=r(Mht,"pretrained_model_name_or_path"),Mht.forEach(t),Q9o=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=n(yw,"CODE",{});var Eht=s(Fme);H9o=r(Eht,"pretrained_model_name_or_path"),Eht.forEach(t),U9o=r(yw,":"),yw.forEach(t),J9o=i(la),Q=n(la,"UL",{});var U=s(Q);c2=n(U,"LI",{});var Xxe=s(c2);Tme=n(Xxe,"STRONG",{});var Cht=s(Tme);Y9o=r(Cht,"albert"),Cht.forEach(t),K9o=r(Xxe," \u2014 "),wG=n(Xxe,"A",{href:!0});var wht=s(wG);Z9o=r(wht,"AlbertForMaskedLM"),wht.forEach(t),exo=r(Xxe," (ALBERT model)"),Xxe.forEach(t),oxo=i(U),f2=n(U,"LI",{});var zxe=s(f2);Mme=n(zxe,"STRONG",{});var Aht=s(Mme);rxo=r(Aht,"bart"),Aht.forEach(t),txo=r(zxe," \u2014 "),AG=n(zxe,"A",{href:!0});var Lht=s(AG);axo=r(Lht,"BartForConditionalGeneration"),Lht.forEach(t),nxo=r(zxe," (BART model)"),zxe.forEach(t),sxo=i(U),m2=n(U,"LI",{});var Wxe=s(m2);Eme=n(Wxe,"STRONG",{});var yht=s(Eme);lxo=r(yht,"bert"),yht.forEach(t),ixo=r(Wxe," \u2014 "),LG=n(Wxe,"A",{href:!0});var xht=s(LG);dxo=r(xht,"BertForMaskedLM"),xht.forEach(t),cxo=r(Wxe," (BERT model)"),Wxe.forEach(t),fxo=i(U),g2=n(U,"LI",{});var Qxe=s(g2);Cme=n(Qxe,"STRONG",{});var $ht=s(Cme);mxo=r($ht,"big_bird"),$ht.forEach(t),gxo=r(Qxe," \u2014 "),yG=n(Qxe,"A",{href:!0});var kht=s(yG);hxo=r(kht,"BigBirdForMaskedLM"),kht.forEach(t),pxo=r(Qxe," (BigBird model)"),Qxe.forEach(t),uxo=i(U),h2=n(U,"LI",{});var Hxe=s(h2);wme=n(Hxe,"STRONG",{});var Sht=s(wme);_xo=r(Sht,"camembert"),Sht.forEach(t),bxo=r(Hxe," \u2014 "),xG=n(Hxe,"A",{href:!0});var Rht=s(xG);vxo=r(Rht,"CamembertForMaskedLM"),Rht.forEach(t),Fxo=r(Hxe," (CamemBERT model)"),Hxe.forEach(t),Txo=i(U),p2=n(U,"LI",{});var Uxe=s(p2);Ame=n(Uxe,"STRONG",{});var Pht=s(Ame);Mxo=r(Pht,"convbert"),Pht.forEach(t),Exo=r(Uxe," \u2014 "),$G=n(Uxe,"A",{href:!0});var Bht=s($G);Cxo=r(Bht,"ConvBertForMaskedLM"),Bht.forEach(t),wxo=r(Uxe," (ConvBERT model)"),Uxe.forEach(t),Axo=i(U),u2=n(U,"LI",{});var Jxe=s(u2);Lme=n(Jxe,"STRONG",{});var Iht=s(Lme);Lxo=r(Iht,"data2vec-text"),Iht.forEach(t),yxo=r(Jxe," \u2014 "),kG=n(Jxe,"A",{href:!0});var Nht=s(kG);xxo=r(Nht,"Data2VecTextForMaskedLM"),Nht.forEach(t),$xo=r(Jxe," (Data2VecText model)"),Jxe.forEach(t),kxo=i(U),_2=n(U,"LI",{});var Yxe=s(_2);yme=n(Yxe,"STRONG",{});var qht=s(yme);Sxo=r(qht,"deberta"),qht.forEach(t),Rxo=r(Yxe," \u2014 "),SG=n(Yxe,"A",{href:!0});var jht=s(SG);Pxo=r(jht,"DebertaForMaskedLM"),jht.forEach(t),Bxo=r(Yxe," (DeBERTa model)"),Yxe.forEach(t),Ixo=i(U),b2=n(U,"LI",{});var Kxe=s(b2);xme=n(Kxe,"STRONG",{});var Dht=s(xme);Nxo=r(Dht,"deberta-v2"),Dht.forEach(t),qxo=r(Kxe," \u2014 "),RG=n(Kxe,"A",{href:!0});var Ght=s(RG);jxo=r(Ght,"DebertaV2ForMaskedLM"),Ght.forEach(t),Dxo=r(Kxe," (DeBERTa-v2 model)"),Kxe.forEach(t),Gxo=i(U),v2=n(U,"LI",{});var Zxe=s(v2);$me=n(Zxe,"STRONG",{});var Oht=s($me);Oxo=r(Oht,"distilbert"),Oht.forEach(t),Vxo=r(Zxe," \u2014 "),PG=n(Zxe,"A",{href:!0});var Vht=s(PG);Xxo=r(Vht,"DistilBertForMaskedLM"),Vht.forEach(t),zxo=r(Zxe," (DistilBERT model)"),Zxe.forEach(t),Wxo=i(U),F2=n(U,"LI",{});var e$e=s(F2);kme=n(e$e,"STRONG",{});var Xht=s(kme);Qxo=r(Xht,"electra"),Xht.forEach(t),Hxo=r(e$e," \u2014 "),BG=n(e$e,"A",{href:!0});var zht=s(BG);Uxo=r(zht,"ElectraForMaskedLM"),zht.forEach(t),Jxo=r(e$e," (ELECTRA model)"),e$e.forEach(t),Yxo=i(U),T2=n(U,"LI",{});var o$e=s(T2);Sme=n(o$e,"STRONG",{});var Wht=s(Sme);Kxo=r(Wht,"flaubert"),Wht.forEach(t),Zxo=r(o$e," \u2014 "),IG=n(o$e,"A",{href:!0});var Qht=s(IG);e$o=r(Qht,"FlaubertWithLMHeadModel"),Qht.forEach(t),o$o=r(o$e," (FlauBERT model)"),o$e.forEach(t),r$o=i(U),M2=n(U,"LI",{});var r$e=s(M2);Rme=n(r$e,"STRONG",{});var Hht=s(Rme);t$o=r(Hht,"fnet"),Hht.forEach(t),a$o=r(r$e," \u2014 "),NG=n(r$e,"A",{href:!0});var Uht=s(NG);n$o=r(Uht,"FNetForMaskedLM"),Uht.forEach(t),s$o=r(r$e," (FNet model)"),r$e.forEach(t),l$o=i(U),E2=n(U,"LI",{});var t$e=s(E2);Pme=n(t$e,"STRONG",{});var Jht=s(Pme);i$o=r(Jht,"funnel"),Jht.forEach(t),d$o=r(t$e," \u2014 "),qG=n(t$e,"A",{href:!0});var Yht=s(qG);c$o=r(Yht,"FunnelForMaskedLM"),Yht.forEach(t),f$o=r(t$e," (Funnel Transformer model)"),t$e.forEach(t),m$o=i(U),C2=n(U,"LI",{});var a$e=s(C2);Bme=n(a$e,"STRONG",{});var Kht=s(Bme);g$o=r(Kht,"ibert"),Kht.forEach(t),h$o=r(a$e," \u2014 "),jG=n(a$e,"A",{href:!0});var Zht=s(jG);p$o=r(Zht,"IBertForMaskedLM"),Zht.forEach(t),u$o=r(a$e," (I-BERT model)"),a$e.forEach(t),_$o=i(U),w2=n(U,"LI",{});var n$e=s(w2);Ime=n(n$e,"STRONG",{});var ept=s(Ime);b$o=r(ept,"layoutlm"),ept.forEach(t),v$o=r(n$e," \u2014 "),DG=n(n$e,"A",{href:!0});var opt=s(DG);F$o=r(opt,"LayoutLMForMaskedLM"),opt.forEach(t),T$o=r(n$e," (LayoutLM model)"),n$e.forEach(t),M$o=i(U),A2=n(U,"LI",{});var s$e=s(A2);Nme=n(s$e,"STRONG",{});var rpt=s(Nme);E$o=r(rpt,"longformer"),rpt.forEach(t),C$o=r(s$e," \u2014 "),GG=n(s$e,"A",{href:!0});var tpt=s(GG);w$o=r(tpt,"LongformerForMaskedLM"),tpt.forEach(t),A$o=r(s$e," (Longformer model)"),s$e.forEach(t),L$o=i(U),L2=n(U,"LI",{});var l$e=s(L2);qme=n(l$e,"STRONG",{});var apt=s(qme);y$o=r(apt,"luke"),apt.forEach(t),x$o=r(l$e," \u2014 "),OG=n(l$e,"A",{href:!0});var npt=s(OG);$$o=r(npt,"LukeForMaskedLM"),npt.forEach(t),k$o=r(l$e," (LUKE model)"),l$e.forEach(t),S$o=i(U),y2=n(U,"LI",{});var i$e=s(y2);jme=n(i$e,"STRONG",{});var spt=s(jme);R$o=r(spt,"mbart"),spt.forEach(t),P$o=r(i$e," \u2014 "),VG=n(i$e,"A",{href:!0});var lpt=s(VG);B$o=r(lpt,"MBartForConditionalGeneration"),lpt.forEach(t),I$o=r(i$e," (mBART model)"),i$e.forEach(t),N$o=i(U),x2=n(U,"LI",{});var d$e=s(x2);Dme=n(d$e,"STRONG",{});var ipt=s(Dme);q$o=r(ipt,"megatron-bert"),ipt.forEach(t),j$o=r(d$e," \u2014 "),XG=n(d$e,"A",{href:!0});var dpt=s(XG);D$o=r(dpt,"MegatronBertForMaskedLM"),dpt.forEach(t),G$o=r(d$e," (Megatron-BERT model)"),d$e.forEach(t),O$o=i(U),$2=n(U,"LI",{});var c$e=s($2);Gme=n(c$e,"STRONG",{});var cpt=s(Gme);V$o=r(cpt,"mobilebert"),cpt.forEach(t),X$o=r(c$e," \u2014 "),zG=n(c$e,"A",{href:!0});var fpt=s(zG);z$o=r(fpt,"MobileBertForMaskedLM"),fpt.forEach(t),W$o=r(c$e," (MobileBERT model)"),c$e.forEach(t),Q$o=i(U),k2=n(U,"LI",{});var f$e=s(k2);Ome=n(f$e,"STRONG",{});var mpt=s(Ome);H$o=r(mpt,"mpnet"),mpt.forEach(t),U$o=r(f$e," \u2014 "),WG=n(f$e,"A",{href:!0});var gpt=s(WG);J$o=r(gpt,"MPNetForMaskedLM"),gpt.forEach(t),Y$o=r(f$e," (MPNet model)"),f$e.forEach(t),K$o=i(U),S2=n(U,"LI",{});var m$e=s(S2);Vme=n(m$e,"STRONG",{});var hpt=s(Vme);Z$o=r(hpt,"nystromformer"),hpt.forEach(t),eko=r(m$e," \u2014 "),QG=n(m$e,"A",{href:!0});var ppt=s(QG);oko=r(ppt,"NystromformerForMaskedLM"),ppt.forEach(t),rko=r(m$e," (Nystr\xF6mformer model)"),m$e.forEach(t),tko=i(U),R2=n(U,"LI",{});var g$e=s(R2);Xme=n(g$e,"STRONG",{});var upt=s(Xme);ako=r(upt,"perceiver"),upt.forEach(t),nko=r(g$e," \u2014 "),HG=n(g$e,"A",{href:!0});var _pt=s(HG);sko=r(_pt,"PerceiverForMaskedLM"),_pt.forEach(t),lko=r(g$e," (Perceiver model)"),g$e.forEach(t),iko=i(U),P2=n(U,"LI",{});var h$e=s(P2);zme=n(h$e,"STRONG",{});var bpt=s(zme);dko=r(bpt,"qdqbert"),bpt.forEach(t),cko=r(h$e," \u2014 "),UG=n(h$e,"A",{href:!0});var vpt=s(UG);fko=r(vpt,"QDQBertForMaskedLM"),vpt.forEach(t),mko=r(h$e," (QDQBert model)"),h$e.forEach(t),gko=i(U),B2=n(U,"LI",{});var p$e=s(B2);Wme=n(p$e,"STRONG",{});var Fpt=s(Wme);hko=r(Fpt,"reformer"),Fpt.forEach(t),pko=r(p$e," \u2014 "),JG=n(p$e,"A",{href:!0});var Tpt=s(JG);uko=r(Tpt,"ReformerForMaskedLM"),Tpt.forEach(t),_ko=r(p$e," (Reformer model)"),p$e.forEach(t),bko=i(U),I2=n(U,"LI",{});var u$e=s(I2);Qme=n(u$e,"STRONG",{});var Mpt=s(Qme);vko=r(Mpt,"rembert"),Mpt.forEach(t),Fko=r(u$e," \u2014 "),YG=n(u$e,"A",{href:!0});var Ept=s(YG);Tko=r(Ept,"RemBertForMaskedLM"),Ept.forEach(t),Mko=r(u$e," (RemBERT model)"),u$e.forEach(t),Eko=i(U),N2=n(U,"LI",{});var _$e=s(N2);Hme=n(_$e,"STRONG",{});var Cpt=s(Hme);Cko=r(Cpt,"roberta"),Cpt.forEach(t),wko=r(_$e," \u2014 "),KG=n(_$e,"A",{href:!0});var wpt=s(KG);Ako=r(wpt,"RobertaForMaskedLM"),wpt.forEach(t),Lko=r(_$e," (RoBERTa model)"),_$e.forEach(t),yko=i(U),q2=n(U,"LI",{});var b$e=s(q2);Ume=n(b$e,"STRONG",{});var Apt=s(Ume);xko=r(Apt,"roformer"),Apt.forEach(t),$ko=r(b$e," \u2014 "),ZG=n(b$e,"A",{href:!0});var Lpt=s(ZG);kko=r(Lpt,"RoFormerForMaskedLM"),Lpt.forEach(t),Sko=r(b$e," (RoFormer model)"),b$e.forEach(t),Rko=i(U),j2=n(U,"LI",{});var v$e=s(j2);Jme=n(v$e,"STRONG",{});var ypt=s(Jme);Pko=r(ypt,"squeezebert"),ypt.forEach(t),Bko=r(v$e," \u2014 "),eO=n(v$e,"A",{href:!0});var xpt=s(eO);Iko=r(xpt,"SqueezeBertForMaskedLM"),xpt.forEach(t),Nko=r(v$e," (SqueezeBERT model)"),v$e.forEach(t),qko=i(U),D2=n(U,"LI",{});var F$e=s(D2);Yme=n(F$e,"STRONG",{});var $pt=s(Yme);jko=r($pt,"tapas"),$pt.forEach(t),Dko=r(F$e," \u2014 "),oO=n(F$e,"A",{href:!0});var kpt=s(oO);Gko=r(kpt,"TapasForMaskedLM"),kpt.forEach(t),Oko=r(F$e," (TAPAS model)"),F$e.forEach(t),Vko=i(U),G2=n(U,"LI",{});var T$e=s(G2);Kme=n(T$e,"STRONG",{});var Spt=s(Kme);Xko=r(Spt,"wav2vec2"),Spt.forEach(t),zko=r(T$e," \u2014 "),Zme=n(T$e,"CODE",{});var Rpt=s(Zme);Wko=r(Rpt,"Wav2Vec2ForMaskedLM"),Rpt.forEach(t),Qko=r(T$e," (Wav2Vec2 model)"),T$e.forEach(t),Hko=i(U),O2=n(U,"LI",{});var M$e=s(O2);ege=n(M$e,"STRONG",{});var Ppt=s(ege);Uko=r(Ppt,"xlm"),Ppt.forEach(t),Jko=r(M$e," \u2014 "),rO=n(M$e,"A",{href:!0});var Bpt=s(rO);Yko=r(Bpt,"XLMWithLMHeadModel"),Bpt.forEach(t),Kko=r(M$e," (XLM model)"),M$e.forEach(t),Zko=i(U),V2=n(U,"LI",{});var E$e=s(V2);oge=n(E$e,"STRONG",{});var Ipt=s(oge);eSo=r(Ipt,"xlm-roberta"),Ipt.forEach(t),oSo=r(E$e," \u2014 "),tO=n(E$e,"A",{href:!0});var Npt=s(tO);rSo=r(Npt,"XLMRobertaForMaskedLM"),Npt.forEach(t),tSo=r(E$e," (XLM-RoBERTa model)"),E$e.forEach(t),aSo=i(U),X2=n(U,"LI",{});var C$e=s(X2);rge=n(C$e,"STRONG",{});var qpt=s(rge);nSo=r(qpt,"xlm-roberta-xl"),qpt.forEach(t),sSo=r(C$e," \u2014 "),aO=n(C$e,"A",{href:!0});var jpt=s(aO);lSo=r(jpt,"XLMRobertaXLForMaskedLM"),jpt.forEach(t),iSo=r(C$e," (XLM-RoBERTa-XL model)"),C$e.forEach(t),dSo=i(U),z2=n(U,"LI",{});var w$e=s(z2);tge=n(w$e,"STRONG",{});var Dpt=s(tge);cSo=r(Dpt,"yoso"),Dpt.forEach(t),fSo=r(w$e," \u2014 "),nO=n(w$e,"A",{href:!0});var Gpt=s(nO);mSo=r(Gpt,"YosoForMaskedLM"),Gpt.forEach(t),gSo=r(w$e," (YOSO model)"),w$e.forEach(t),U.forEach(t),hSo=i(la),W2=n(la,"P",{});var A$e=s(W2);pSo=r(A$e,"The model is set in evaluation mode by default using "),age=n(A$e,"CODE",{});var Opt=s(age);uSo=r(Opt,"model.eval()"),Opt.forEach(t),_So=r(A$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=n(A$e,"CODE",{});var Vpt=s(nge);bSo=r(Vpt,"model.train()"),Vpt.forEach(t),A$e.forEach(t),vSo=i(la),T(Q2.$$.fragment,la),la.forEach(t),Ks.forEach(t),vGe=i(f),Wi=n(f,"H2",{class:!0});var wVe=s(Wi);H2=n(wVe,"A",{id:!0,class:!0,href:!0});var Xpt=s(H2);sge=n(Xpt,"SPAN",{});var zpt=s(sge);T(fy.$$.fragment,zpt),zpt.forEach(t),Xpt.forEach(t),FSo=i(wVe),lge=n(wVe,"SPAN",{});var Wpt=s(lge);TSo=r(Wpt,"AutoModelForSeq2SeqLM"),Wpt.forEach(t),wVe.forEach(t),FGe=i(f),Ro=n(f,"DIV",{class:!0});var Zs=s(Ro);T(my.$$.fragment,Zs),MSo=i(Zs),Qi=n(Zs,"P",{});var noe=s(Qi);ESo=r(noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sO=n(noe,"A",{href:!0});var Qpt=s(sO);CSo=r(Qpt,"from_pretrained()"),Qpt.forEach(t),wSo=r(noe," class method or the "),lO=n(noe,"A",{href:!0});var Hpt=s(lO);ASo=r(Hpt,"from_config()"),Hpt.forEach(t),LSo=r(noe,` class
method.`),noe.forEach(t),ySo=i(Zs),gy=n(Zs,"P",{});var AVe=s(gy);xSo=r(AVe,"This class cannot be instantiated directly using "),ige=n(AVe,"CODE",{});var Upt=s(ige);$So=r(Upt,"__init__()"),Upt.forEach(t),kSo=r(AVe," (throws an error)."),AVe.forEach(t),SSo=i(Zs),dt=n(Zs,"DIV",{class:!0});var xw=s(dt);T(hy.$$.fragment,xw),RSo=i(xw),dge=n(xw,"P",{});var Jpt=s(dge);PSo=r(Jpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jpt.forEach(t),BSo=i(xw),Hi=n(xw,"P",{});var soe=s(Hi);ISo=r(soe,`Note:
Loading a model from its configuration file does `),cge=n(soe,"STRONG",{});var Ypt=s(cge);NSo=r(Ypt,"not"),Ypt.forEach(t),qSo=r(soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=n(soe,"A",{href:!0});var Kpt=s(iO);jSo=r(Kpt,"from_pretrained()"),Kpt.forEach(t),DSo=r(soe," to load the model weights."),soe.forEach(t),GSo=i(xw),T(U2.$$.fragment,xw),xw.forEach(t),OSo=i(Zs),eo=n(Zs,"DIV",{class:!0});var ia=s(eo);T(py.$$.fragment,ia),VSo=i(ia),fge=n(ia,"P",{});var Zpt=s(fge);XSo=r(Zpt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zpt.forEach(t),zSo=i(ia),Ia=n(ia,"P",{});var $w=s(Ia);WSo=r($w,"The model class to instantiate is selected based on the "),mge=n($w,"CODE",{});var eut=s(mge);QSo=r(eut,"model_type"),eut.forEach(t),HSo=r($w,` property of the config object (either
passed as an argument or loaded from `),gge=n($w,"CODE",{});var out=s(gge);USo=r(out,"pretrained_model_name_or_path"),out.forEach(t),JSo=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=n($w,"CODE",{});var rut=s(hge);YSo=r(rut,"pretrained_model_name_or_path"),rut.forEach(t),KSo=r($w,":"),$w.forEach(t),ZSo=i(ia),pe=n(ia,"UL",{});var be=s(pe);J2=n(be,"LI",{});var L$e=s(J2);pge=n(L$e,"STRONG",{});var tut=s(pge);eRo=r(tut,"bart"),tut.forEach(t),oRo=r(L$e," \u2014 "),dO=n(L$e,"A",{href:!0});var aut=s(dO);rRo=r(aut,"BartForConditionalGeneration"),aut.forEach(t),tRo=r(L$e," (BART model)"),L$e.forEach(t),aRo=i(be),Y2=n(be,"LI",{});var y$e=s(Y2);uge=n(y$e,"STRONG",{});var nut=s(uge);nRo=r(nut,"bigbird_pegasus"),nut.forEach(t),sRo=r(y$e," \u2014 "),cO=n(y$e,"A",{href:!0});var sut=s(cO);lRo=r(sut,"BigBirdPegasusForConditionalGeneration"),sut.forEach(t),iRo=r(y$e," (BigBird-Pegasus model)"),y$e.forEach(t),dRo=i(be),K2=n(be,"LI",{});var x$e=s(K2);_ge=n(x$e,"STRONG",{});var lut=s(_ge);cRo=r(lut,"blenderbot"),lut.forEach(t),fRo=r(x$e," \u2014 "),fO=n(x$e,"A",{href:!0});var iut=s(fO);mRo=r(iut,"BlenderbotForConditionalGeneration"),iut.forEach(t),gRo=r(x$e," (Blenderbot model)"),x$e.forEach(t),hRo=i(be),Z2=n(be,"LI",{});var $$e=s(Z2);bge=n($$e,"STRONG",{});var dut=s(bge);pRo=r(dut,"blenderbot-small"),dut.forEach(t),uRo=r($$e," \u2014 "),mO=n($$e,"A",{href:!0});var cut=s(mO);_Ro=r(cut,"BlenderbotSmallForConditionalGeneration"),cut.forEach(t),bRo=r($$e," (BlenderbotSmall model)"),$$e.forEach(t),vRo=i(be),eb=n(be,"LI",{});var k$e=s(eb);vge=n(k$e,"STRONG",{});var fut=s(vge);FRo=r(fut,"encoder-decoder"),fut.forEach(t),TRo=r(k$e," \u2014 "),gO=n(k$e,"A",{href:!0});var mut=s(gO);MRo=r(mut,"EncoderDecoderModel"),mut.forEach(t),ERo=r(k$e," (Encoder decoder model)"),k$e.forEach(t),CRo=i(be),ob=n(be,"LI",{});var S$e=s(ob);Fge=n(S$e,"STRONG",{});var gut=s(Fge);wRo=r(gut,"fsmt"),gut.forEach(t),ARo=r(S$e," \u2014 "),hO=n(S$e,"A",{href:!0});var hut=s(hO);LRo=r(hut,"FSMTForConditionalGeneration"),hut.forEach(t),yRo=r(S$e," (FairSeq Machine-Translation model)"),S$e.forEach(t),xRo=i(be),rb=n(be,"LI",{});var R$e=s(rb);Tge=n(R$e,"STRONG",{});var put=s(Tge);$Ro=r(put,"led"),put.forEach(t),kRo=r(R$e," \u2014 "),pO=n(R$e,"A",{href:!0});var uut=s(pO);SRo=r(uut,"LEDForConditionalGeneration"),uut.forEach(t),RRo=r(R$e," (LED model)"),R$e.forEach(t),PRo=i(be),tb=n(be,"LI",{});var P$e=s(tb);Mge=n(P$e,"STRONG",{});var _ut=s(Mge);BRo=r(_ut,"longt5"),_ut.forEach(t),IRo=r(P$e," \u2014 "),uO=n(P$e,"A",{href:!0});var but=s(uO);NRo=r(but,"LongT5ForConditionalGeneration"),but.forEach(t),qRo=r(P$e," (LongT5 model)"),P$e.forEach(t),jRo=i(be),ab=n(be,"LI",{});var B$e=s(ab);Ege=n(B$e,"STRONG",{});var vut=s(Ege);DRo=r(vut,"m2m_100"),vut.forEach(t),GRo=r(B$e," \u2014 "),_O=n(B$e,"A",{href:!0});var Fut=s(_O);ORo=r(Fut,"M2M100ForConditionalGeneration"),Fut.forEach(t),VRo=r(B$e," (M2M100 model)"),B$e.forEach(t),XRo=i(be),nb=n(be,"LI",{});var I$e=s(nb);Cge=n(I$e,"STRONG",{});var Tut=s(Cge);zRo=r(Tut,"marian"),Tut.forEach(t),WRo=r(I$e," \u2014 "),bO=n(I$e,"A",{href:!0});var Mut=s(bO);QRo=r(Mut,"MarianMTModel"),Mut.forEach(t),HRo=r(I$e," (Marian model)"),I$e.forEach(t),URo=i(be),sb=n(be,"LI",{});var N$e=s(sb);wge=n(N$e,"STRONG",{});var Eut=s(wge);JRo=r(Eut,"mbart"),Eut.forEach(t),YRo=r(N$e," \u2014 "),vO=n(N$e,"A",{href:!0});var Cut=s(vO);KRo=r(Cut,"MBartForConditionalGeneration"),Cut.forEach(t),ZRo=r(N$e," (mBART model)"),N$e.forEach(t),ePo=i(be),lb=n(be,"LI",{});var q$e=s(lb);Age=n(q$e,"STRONG",{});var wut=s(Age);oPo=r(wut,"mt5"),wut.forEach(t),rPo=r(q$e," \u2014 "),FO=n(q$e,"A",{href:!0});var Aut=s(FO);tPo=r(Aut,"MT5ForConditionalGeneration"),Aut.forEach(t),aPo=r(q$e," (MT5 model)"),q$e.forEach(t),nPo=i(be),ib=n(be,"LI",{});var j$e=s(ib);Lge=n(j$e,"STRONG",{});var Lut=s(Lge);sPo=r(Lut,"pegasus"),Lut.forEach(t),lPo=r(j$e," \u2014 "),TO=n(j$e,"A",{href:!0});var yut=s(TO);iPo=r(yut,"PegasusForConditionalGeneration"),yut.forEach(t),dPo=r(j$e," (Pegasus model)"),j$e.forEach(t),cPo=i(be),db=n(be,"LI",{});var D$e=s(db);yge=n(D$e,"STRONG",{});var xut=s(yge);fPo=r(xut,"plbart"),xut.forEach(t),mPo=r(D$e," \u2014 "),MO=n(D$e,"A",{href:!0});var $ut=s(MO);gPo=r($ut,"PLBartForConditionalGeneration"),$ut.forEach(t),hPo=r(D$e," (PLBart model)"),D$e.forEach(t),pPo=i(be),cb=n(be,"LI",{});var G$e=s(cb);xge=n(G$e,"STRONG",{});var kut=s(xge);uPo=r(kut,"prophetnet"),kut.forEach(t),_Po=r(G$e," \u2014 "),EO=n(G$e,"A",{href:!0});var Sut=s(EO);bPo=r(Sut,"ProphetNetForConditionalGeneration"),Sut.forEach(t),vPo=r(G$e," (ProphetNet model)"),G$e.forEach(t),FPo=i(be),fb=n(be,"LI",{});var O$e=s(fb);$ge=n(O$e,"STRONG",{});var Rut=s($ge);TPo=r(Rut,"t5"),Rut.forEach(t),MPo=r(O$e," \u2014 "),CO=n(O$e,"A",{href:!0});var Put=s(CO);EPo=r(Put,"T5ForConditionalGeneration"),Put.forEach(t),CPo=r(O$e," (T5 model)"),O$e.forEach(t),wPo=i(be),mb=n(be,"LI",{});var V$e=s(mb);kge=n(V$e,"STRONG",{});var But=s(kge);APo=r(But,"xlm-prophetnet"),But.forEach(t),LPo=r(V$e," \u2014 "),wO=n(V$e,"A",{href:!0});var Iut=s(wO);yPo=r(Iut,"XLMProphetNetForConditionalGeneration"),Iut.forEach(t),xPo=r(V$e," (XLM-ProphetNet model)"),V$e.forEach(t),be.forEach(t),$Po=i(ia),gb=n(ia,"P",{});var X$e=s(gb);kPo=r(X$e,"The model is set in evaluation mode by default using "),Sge=n(X$e,"CODE",{});var Nut=s(Sge);SPo=r(Nut,"model.eval()"),Nut.forEach(t),RPo=r(X$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rge=n(X$e,"CODE",{});var qut=s(Rge);PPo=r(qut,"model.train()"),qut.forEach(t),X$e.forEach(t),BPo=i(ia),T(hb.$$.fragment,ia),ia.forEach(t),Zs.forEach(t),TGe=i(f),Ui=n(f,"H2",{class:!0});var LVe=s(Ui);pb=n(LVe,"A",{id:!0,class:!0,href:!0});var jut=s(pb);Pge=n(jut,"SPAN",{});var Dut=s(Pge);T(uy.$$.fragment,Dut),Dut.forEach(t),jut.forEach(t),IPo=i(LVe),Bge=n(LVe,"SPAN",{});var Gut=s(Bge);NPo=r(Gut,"AutoModelForSequenceClassification"),Gut.forEach(t),LVe.forEach(t),MGe=i(f),Po=n(f,"DIV",{class:!0});var el=s(Po);T(_y.$$.fragment,el),qPo=i(el),Ji=n(el,"P",{});var loe=s(Ji);jPo=r(loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AO=n(loe,"A",{href:!0});var Out=s(AO);DPo=r(Out,"from_pretrained()"),Out.forEach(t),GPo=r(loe," class method or the "),LO=n(loe,"A",{href:!0});var Vut=s(LO);OPo=r(Vut,"from_config()"),Vut.forEach(t),VPo=r(loe,` class
method.`),loe.forEach(t),XPo=i(el),by=n(el,"P",{});var yVe=s(by);zPo=r(yVe,"This class cannot be instantiated directly using "),Ige=n(yVe,"CODE",{});var Xut=s(Ige);WPo=r(Xut,"__init__()"),Xut.forEach(t),QPo=r(yVe," (throws an error)."),yVe.forEach(t),HPo=i(el),ct=n(el,"DIV",{class:!0});var kw=s(ct);T(vy.$$.fragment,kw),UPo=i(kw),Nge=n(kw,"P",{});var zut=s(Nge);JPo=r(zut,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zut.forEach(t),YPo=i(kw),Yi=n(kw,"P",{});var ioe=s(Yi);KPo=r(ioe,`Note:
Loading a model from its configuration file does `),qge=n(ioe,"STRONG",{});var Wut=s(qge);ZPo=r(Wut,"not"),Wut.forEach(t),eBo=r(ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=n(ioe,"A",{href:!0});var Qut=s(yO);oBo=r(Qut,"from_pretrained()"),Qut.forEach(t),rBo=r(ioe," to load the model weights."),ioe.forEach(t),tBo=i(kw),T(ub.$$.fragment,kw),kw.forEach(t),aBo=i(el),oo=n(el,"DIV",{class:!0});var da=s(oo);T(Fy.$$.fragment,da),nBo=i(da),jge=n(da,"P",{});var Hut=s(jge);sBo=r(Hut,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Hut.forEach(t),lBo=i(da),Na=n(da,"P",{});var Sw=s(Na);iBo=r(Sw,"The model class to instantiate is selected based on the "),Dge=n(Sw,"CODE",{});var Uut=s(Dge);dBo=r(Uut,"model_type"),Uut.forEach(t),cBo=r(Sw,` property of the config object (either
passed as an argument or loaded from `),Gge=n(Sw,"CODE",{});var Jut=s(Gge);fBo=r(Jut,"pretrained_model_name_or_path"),Jut.forEach(t),mBo=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=n(Sw,"CODE",{});var Yut=s(Oge);gBo=r(Yut,"pretrained_model_name_or_path"),Yut.forEach(t),hBo=r(Sw,":"),Sw.forEach(t),pBo=i(da),N=n(da,"UL",{});var j=s(N);_b=n(j,"LI",{});var z$e=s(_b);Vge=n(z$e,"STRONG",{});var Kut=s(Vge);uBo=r(Kut,"albert"),Kut.forEach(t),_Bo=r(z$e," \u2014 "),xO=n(z$e,"A",{href:!0});var Zut=s(xO);bBo=r(Zut,"AlbertForSequenceClassification"),Zut.forEach(t),vBo=r(z$e," (ALBERT model)"),z$e.forEach(t),FBo=i(j),bb=n(j,"LI",{});var W$e=s(bb);Xge=n(W$e,"STRONG",{});var e_t=s(Xge);TBo=r(e_t,"bart"),e_t.forEach(t),MBo=r(W$e," \u2014 "),$O=n(W$e,"A",{href:!0});var o_t=s($O);EBo=r(o_t,"BartForSequenceClassification"),o_t.forEach(t),CBo=r(W$e," (BART model)"),W$e.forEach(t),wBo=i(j),vb=n(j,"LI",{});var Q$e=s(vb);zge=n(Q$e,"STRONG",{});var r_t=s(zge);ABo=r(r_t,"bert"),r_t.forEach(t),LBo=r(Q$e," \u2014 "),kO=n(Q$e,"A",{href:!0});var t_t=s(kO);yBo=r(t_t,"BertForSequenceClassification"),t_t.forEach(t),xBo=r(Q$e," (BERT model)"),Q$e.forEach(t),$Bo=i(j),Fb=n(j,"LI",{});var H$e=s(Fb);Wge=n(H$e,"STRONG",{});var a_t=s(Wge);kBo=r(a_t,"big_bird"),a_t.forEach(t),SBo=r(H$e," \u2014 "),SO=n(H$e,"A",{href:!0});var n_t=s(SO);RBo=r(n_t,"BigBirdForSequenceClassification"),n_t.forEach(t),PBo=r(H$e," (BigBird model)"),H$e.forEach(t),BBo=i(j),Tb=n(j,"LI",{});var U$e=s(Tb);Qge=n(U$e,"STRONG",{});var s_t=s(Qge);IBo=r(s_t,"bigbird_pegasus"),s_t.forEach(t),NBo=r(U$e," \u2014 "),RO=n(U$e,"A",{href:!0});var l_t=s(RO);qBo=r(l_t,"BigBirdPegasusForSequenceClassification"),l_t.forEach(t),jBo=r(U$e," (BigBird-Pegasus model)"),U$e.forEach(t),DBo=i(j),Mb=n(j,"LI",{});var J$e=s(Mb);Hge=n(J$e,"STRONG",{});var i_t=s(Hge);GBo=r(i_t,"bloom"),i_t.forEach(t),OBo=r(J$e," \u2014 "),PO=n(J$e,"A",{href:!0});var d_t=s(PO);VBo=r(d_t,"BloomForSequenceClassification"),d_t.forEach(t),XBo=r(J$e," (BLOOM model)"),J$e.forEach(t),zBo=i(j),Eb=n(j,"LI",{});var Y$e=s(Eb);Uge=n(Y$e,"STRONG",{});var c_t=s(Uge);WBo=r(c_t,"camembert"),c_t.forEach(t),QBo=r(Y$e," \u2014 "),BO=n(Y$e,"A",{href:!0});var f_t=s(BO);HBo=r(f_t,"CamembertForSequenceClassification"),f_t.forEach(t),UBo=r(Y$e," (CamemBERT model)"),Y$e.forEach(t),JBo=i(j),Cb=n(j,"LI",{});var K$e=s(Cb);Jge=n(K$e,"STRONG",{});var m_t=s(Jge);YBo=r(m_t,"canine"),m_t.forEach(t),KBo=r(K$e," \u2014 "),IO=n(K$e,"A",{href:!0});var g_t=s(IO);ZBo=r(g_t,"CanineForSequenceClassification"),g_t.forEach(t),eIo=r(K$e," (CANINE model)"),K$e.forEach(t),oIo=i(j),wb=n(j,"LI",{});var Z$e=s(wb);Yge=n(Z$e,"STRONG",{});var h_t=s(Yge);rIo=r(h_t,"convbert"),h_t.forEach(t),tIo=r(Z$e," \u2014 "),NO=n(Z$e,"A",{href:!0});var p_t=s(NO);aIo=r(p_t,"ConvBertForSequenceClassification"),p_t.forEach(t),nIo=r(Z$e," (ConvBERT model)"),Z$e.forEach(t),sIo=i(j),Ab=n(j,"LI",{});var eke=s(Ab);Kge=n(eke,"STRONG",{});var u_t=s(Kge);lIo=r(u_t,"ctrl"),u_t.forEach(t),iIo=r(eke," \u2014 "),qO=n(eke,"A",{href:!0});var __t=s(qO);dIo=r(__t,"CTRLForSequenceClassification"),__t.forEach(t),cIo=r(eke," (CTRL model)"),eke.forEach(t),fIo=i(j),Lb=n(j,"LI",{});var oke=s(Lb);Zge=n(oke,"STRONG",{});var b_t=s(Zge);mIo=r(b_t,"data2vec-text"),b_t.forEach(t),gIo=r(oke," \u2014 "),jO=n(oke,"A",{href:!0});var v_t=s(jO);hIo=r(v_t,"Data2VecTextForSequenceClassification"),v_t.forEach(t),pIo=r(oke," (Data2VecText model)"),oke.forEach(t),uIo=i(j),yb=n(j,"LI",{});var rke=s(yb);ehe=n(rke,"STRONG",{});var F_t=s(ehe);_Io=r(F_t,"deberta"),F_t.forEach(t),bIo=r(rke," \u2014 "),DO=n(rke,"A",{href:!0});var T_t=s(DO);vIo=r(T_t,"DebertaForSequenceClassification"),T_t.forEach(t),FIo=r(rke," (DeBERTa model)"),rke.forEach(t),TIo=i(j),xb=n(j,"LI",{});var tke=s(xb);ohe=n(tke,"STRONG",{});var M_t=s(ohe);MIo=r(M_t,"deberta-v2"),M_t.forEach(t),EIo=r(tke," \u2014 "),GO=n(tke,"A",{href:!0});var E_t=s(GO);CIo=r(E_t,"DebertaV2ForSequenceClassification"),E_t.forEach(t),wIo=r(tke," (DeBERTa-v2 model)"),tke.forEach(t),AIo=i(j),$b=n(j,"LI",{});var ake=s($b);rhe=n(ake,"STRONG",{});var C_t=s(rhe);LIo=r(C_t,"distilbert"),C_t.forEach(t),yIo=r(ake," \u2014 "),OO=n(ake,"A",{href:!0});var w_t=s(OO);xIo=r(w_t,"DistilBertForSequenceClassification"),w_t.forEach(t),$Io=r(ake," (DistilBERT model)"),ake.forEach(t),kIo=i(j),kb=n(j,"LI",{});var nke=s(kb);the=n(nke,"STRONG",{});var A_t=s(the);SIo=r(A_t,"electra"),A_t.forEach(t),RIo=r(nke," \u2014 "),VO=n(nke,"A",{href:!0});var L_t=s(VO);PIo=r(L_t,"ElectraForSequenceClassification"),L_t.forEach(t),BIo=r(nke," (ELECTRA model)"),nke.forEach(t),IIo=i(j),Sb=n(j,"LI",{});var ske=s(Sb);ahe=n(ske,"STRONG",{});var y_t=s(ahe);NIo=r(y_t,"flaubert"),y_t.forEach(t),qIo=r(ske," \u2014 "),XO=n(ske,"A",{href:!0});var x_t=s(XO);jIo=r(x_t,"FlaubertForSequenceClassification"),x_t.forEach(t),DIo=r(ske," (FlauBERT model)"),ske.forEach(t),GIo=i(j),Rb=n(j,"LI",{});var lke=s(Rb);nhe=n(lke,"STRONG",{});var $_t=s(nhe);OIo=r($_t,"fnet"),$_t.forEach(t),VIo=r(lke," \u2014 "),zO=n(lke,"A",{href:!0});var k_t=s(zO);XIo=r(k_t,"FNetForSequenceClassification"),k_t.forEach(t),zIo=r(lke," (FNet model)"),lke.forEach(t),WIo=i(j),Pb=n(j,"LI",{});var ike=s(Pb);she=n(ike,"STRONG",{});var S_t=s(she);QIo=r(S_t,"funnel"),S_t.forEach(t),HIo=r(ike," \u2014 "),WO=n(ike,"A",{href:!0});var R_t=s(WO);UIo=r(R_t,"FunnelForSequenceClassification"),R_t.forEach(t),JIo=r(ike," (Funnel Transformer model)"),ike.forEach(t),YIo=i(j),Bb=n(j,"LI",{});var dke=s(Bb);lhe=n(dke,"STRONG",{});var P_t=s(lhe);KIo=r(P_t,"gpt2"),P_t.forEach(t),ZIo=r(dke," \u2014 "),QO=n(dke,"A",{href:!0});var B_t=s(QO);eNo=r(B_t,"GPT2ForSequenceClassification"),B_t.forEach(t),oNo=r(dke," (OpenAI GPT-2 model)"),dke.forEach(t),rNo=i(j),Ib=n(j,"LI",{});var cke=s(Ib);ihe=n(cke,"STRONG",{});var I_t=s(ihe);tNo=r(I_t,"gpt_neo"),I_t.forEach(t),aNo=r(cke," \u2014 "),HO=n(cke,"A",{href:!0});var N_t=s(HO);nNo=r(N_t,"GPTNeoForSequenceClassification"),N_t.forEach(t),sNo=r(cke," (GPT Neo model)"),cke.forEach(t),lNo=i(j),Nb=n(j,"LI",{});var fke=s(Nb);dhe=n(fke,"STRONG",{});var q_t=s(dhe);iNo=r(q_t,"gptj"),q_t.forEach(t),dNo=r(fke," \u2014 "),UO=n(fke,"A",{href:!0});var j_t=s(UO);cNo=r(j_t,"GPTJForSequenceClassification"),j_t.forEach(t),fNo=r(fke," (GPT-J model)"),fke.forEach(t),mNo=i(j),qb=n(j,"LI",{});var mke=s(qb);che=n(mke,"STRONG",{});var D_t=s(che);gNo=r(D_t,"ibert"),D_t.forEach(t),hNo=r(mke," \u2014 "),JO=n(mke,"A",{href:!0});var G_t=s(JO);pNo=r(G_t,"IBertForSequenceClassification"),G_t.forEach(t),uNo=r(mke," (I-BERT model)"),mke.forEach(t),_No=i(j),jb=n(j,"LI",{});var gke=s(jb);fhe=n(gke,"STRONG",{});var O_t=s(fhe);bNo=r(O_t,"layoutlm"),O_t.forEach(t),vNo=r(gke," \u2014 "),YO=n(gke,"A",{href:!0});var V_t=s(YO);FNo=r(V_t,"LayoutLMForSequenceClassification"),V_t.forEach(t),TNo=r(gke," (LayoutLM model)"),gke.forEach(t),MNo=i(j),Db=n(j,"LI",{});var hke=s(Db);mhe=n(hke,"STRONG",{});var X_t=s(mhe);ENo=r(X_t,"layoutlmv2"),X_t.forEach(t),CNo=r(hke," \u2014 "),KO=n(hke,"A",{href:!0});var z_t=s(KO);wNo=r(z_t,"LayoutLMv2ForSequenceClassification"),z_t.forEach(t),ANo=r(hke," (LayoutLMv2 model)"),hke.forEach(t),LNo=i(j),Gb=n(j,"LI",{});var pke=s(Gb);ghe=n(pke,"STRONG",{});var W_t=s(ghe);yNo=r(W_t,"layoutlmv3"),W_t.forEach(t),xNo=r(pke," \u2014 "),ZO=n(pke,"A",{href:!0});var Q_t=s(ZO);$No=r(Q_t,"LayoutLMv3ForSequenceClassification"),Q_t.forEach(t),kNo=r(pke," (LayoutLMv3 model)"),pke.forEach(t),SNo=i(j),Ob=n(j,"LI",{});var uke=s(Ob);hhe=n(uke,"STRONG",{});var H_t=s(hhe);RNo=r(H_t,"led"),H_t.forEach(t),PNo=r(uke," \u2014 "),eV=n(uke,"A",{href:!0});var U_t=s(eV);BNo=r(U_t,"LEDForSequenceClassification"),U_t.forEach(t),INo=r(uke," (LED model)"),uke.forEach(t),NNo=i(j),Vb=n(j,"LI",{});var _ke=s(Vb);phe=n(_ke,"STRONG",{});var J_t=s(phe);qNo=r(J_t,"longformer"),J_t.forEach(t),jNo=r(_ke," \u2014 "),oV=n(_ke,"A",{href:!0});var Y_t=s(oV);DNo=r(Y_t,"LongformerForSequenceClassification"),Y_t.forEach(t),GNo=r(_ke," (Longformer model)"),_ke.forEach(t),ONo=i(j),Xb=n(j,"LI",{});var bke=s(Xb);uhe=n(bke,"STRONG",{});var K_t=s(uhe);VNo=r(K_t,"mbart"),K_t.forEach(t),XNo=r(bke," \u2014 "),rV=n(bke,"A",{href:!0});var Z_t=s(rV);zNo=r(Z_t,"MBartForSequenceClassification"),Z_t.forEach(t),WNo=r(bke," (mBART model)"),bke.forEach(t),QNo=i(j),zb=n(j,"LI",{});var vke=s(zb);_he=n(vke,"STRONG",{});var e1t=s(_he);HNo=r(e1t,"megatron-bert"),e1t.forEach(t),UNo=r(vke," \u2014 "),tV=n(vke,"A",{href:!0});var o1t=s(tV);JNo=r(o1t,"MegatronBertForSequenceClassification"),o1t.forEach(t),YNo=r(vke," (Megatron-BERT model)"),vke.forEach(t),KNo=i(j),Wb=n(j,"LI",{});var Fke=s(Wb);bhe=n(Fke,"STRONG",{});var r1t=s(bhe);ZNo=r(r1t,"mobilebert"),r1t.forEach(t),eqo=r(Fke," \u2014 "),aV=n(Fke,"A",{href:!0});var t1t=s(aV);oqo=r(t1t,"MobileBertForSequenceClassification"),t1t.forEach(t),rqo=r(Fke," (MobileBERT model)"),Fke.forEach(t),tqo=i(j),Qb=n(j,"LI",{});var Tke=s(Qb);vhe=n(Tke,"STRONG",{});var a1t=s(vhe);aqo=r(a1t,"mpnet"),a1t.forEach(t),nqo=r(Tke," \u2014 "),nV=n(Tke,"A",{href:!0});var n1t=s(nV);sqo=r(n1t,"MPNetForSequenceClassification"),n1t.forEach(t),lqo=r(Tke," (MPNet model)"),Tke.forEach(t),iqo=i(j),Hb=n(j,"LI",{});var Mke=s(Hb);Fhe=n(Mke,"STRONG",{});var s1t=s(Fhe);dqo=r(s1t,"nystromformer"),s1t.forEach(t),cqo=r(Mke," \u2014 "),sV=n(Mke,"A",{href:!0});var l1t=s(sV);fqo=r(l1t,"NystromformerForSequenceClassification"),l1t.forEach(t),mqo=r(Mke," (Nystr\xF6mformer model)"),Mke.forEach(t),gqo=i(j),Ub=n(j,"LI",{});var Eke=s(Ub);The=n(Eke,"STRONG",{});var i1t=s(The);hqo=r(i1t,"openai-gpt"),i1t.forEach(t),pqo=r(Eke," \u2014 "),lV=n(Eke,"A",{href:!0});var d1t=s(lV);uqo=r(d1t,"OpenAIGPTForSequenceClassification"),d1t.forEach(t),_qo=r(Eke," (OpenAI GPT model)"),Eke.forEach(t),bqo=i(j),Jb=n(j,"LI",{});var Cke=s(Jb);Mhe=n(Cke,"STRONG",{});var c1t=s(Mhe);vqo=r(c1t,"perceiver"),c1t.forEach(t),Fqo=r(Cke," \u2014 "),iV=n(Cke,"A",{href:!0});var f1t=s(iV);Tqo=r(f1t,"PerceiverForSequenceClassification"),f1t.forEach(t),Mqo=r(Cke," (Perceiver model)"),Cke.forEach(t),Eqo=i(j),Yb=n(j,"LI",{});var wke=s(Yb);Ehe=n(wke,"STRONG",{});var m1t=s(Ehe);Cqo=r(m1t,"plbart"),m1t.forEach(t),wqo=r(wke," \u2014 "),dV=n(wke,"A",{href:!0});var g1t=s(dV);Aqo=r(g1t,"PLBartForSequenceClassification"),g1t.forEach(t),Lqo=r(wke," (PLBart model)"),wke.forEach(t),yqo=i(j),Kb=n(j,"LI",{});var Ake=s(Kb);Che=n(Ake,"STRONG",{});var h1t=s(Che);xqo=r(h1t,"qdqbert"),h1t.forEach(t),$qo=r(Ake," \u2014 "),cV=n(Ake,"A",{href:!0});var p1t=s(cV);kqo=r(p1t,"QDQBertForSequenceClassification"),p1t.forEach(t),Sqo=r(Ake," (QDQBert model)"),Ake.forEach(t),Rqo=i(j),Zb=n(j,"LI",{});var Lke=s(Zb);whe=n(Lke,"STRONG",{});var u1t=s(whe);Pqo=r(u1t,"reformer"),u1t.forEach(t),Bqo=r(Lke," \u2014 "),fV=n(Lke,"A",{href:!0});var _1t=s(fV);Iqo=r(_1t,"ReformerForSequenceClassification"),_1t.forEach(t),Nqo=r(Lke," (Reformer model)"),Lke.forEach(t),qqo=i(j),ev=n(j,"LI",{});var yke=s(ev);Ahe=n(yke,"STRONG",{});var b1t=s(Ahe);jqo=r(b1t,"rembert"),b1t.forEach(t),Dqo=r(yke," \u2014 "),mV=n(yke,"A",{href:!0});var v1t=s(mV);Gqo=r(v1t,"RemBertForSequenceClassification"),v1t.forEach(t),Oqo=r(yke," (RemBERT model)"),yke.forEach(t),Vqo=i(j),ov=n(j,"LI",{});var xke=s(ov);Lhe=n(xke,"STRONG",{});var F1t=s(Lhe);Xqo=r(F1t,"roberta"),F1t.forEach(t),zqo=r(xke," \u2014 "),gV=n(xke,"A",{href:!0});var T1t=s(gV);Wqo=r(T1t,"RobertaForSequenceClassification"),T1t.forEach(t),Qqo=r(xke," (RoBERTa model)"),xke.forEach(t),Hqo=i(j),rv=n(j,"LI",{});var $ke=s(rv);yhe=n($ke,"STRONG",{});var M1t=s(yhe);Uqo=r(M1t,"roformer"),M1t.forEach(t),Jqo=r($ke," \u2014 "),hV=n($ke,"A",{href:!0});var E1t=s(hV);Yqo=r(E1t,"RoFormerForSequenceClassification"),E1t.forEach(t),Kqo=r($ke," (RoFormer model)"),$ke.forEach(t),Zqo=i(j),tv=n(j,"LI",{});var kke=s(tv);xhe=n(kke,"STRONG",{});var C1t=s(xhe);ejo=r(C1t,"squeezebert"),C1t.forEach(t),ojo=r(kke," \u2014 "),pV=n(kke,"A",{href:!0});var w1t=s(pV);rjo=r(w1t,"SqueezeBertForSequenceClassification"),w1t.forEach(t),tjo=r(kke," (SqueezeBERT model)"),kke.forEach(t),ajo=i(j),av=n(j,"LI",{});var Ske=s(av);$he=n(Ske,"STRONG",{});var A1t=s($he);njo=r(A1t,"tapas"),A1t.forEach(t),sjo=r(Ske," \u2014 "),uV=n(Ske,"A",{href:!0});var L1t=s(uV);ljo=r(L1t,"TapasForSequenceClassification"),L1t.forEach(t),ijo=r(Ske," (TAPAS model)"),Ske.forEach(t),djo=i(j),nv=n(j,"LI",{});var Rke=s(nv);khe=n(Rke,"STRONG",{});var y1t=s(khe);cjo=r(y1t,"transfo-xl"),y1t.forEach(t),fjo=r(Rke," \u2014 "),_V=n(Rke,"A",{href:!0});var x1t=s(_V);mjo=r(x1t,"TransfoXLForSequenceClassification"),x1t.forEach(t),gjo=r(Rke," (Transformer-XL model)"),Rke.forEach(t),hjo=i(j),sv=n(j,"LI",{});var Pke=s(sv);She=n(Pke,"STRONG",{});var $1t=s(She);pjo=r($1t,"xlm"),$1t.forEach(t),ujo=r(Pke," \u2014 "),bV=n(Pke,"A",{href:!0});var k1t=s(bV);_jo=r(k1t,"XLMForSequenceClassification"),k1t.forEach(t),bjo=r(Pke," (XLM model)"),Pke.forEach(t),vjo=i(j),lv=n(j,"LI",{});var Bke=s(lv);Rhe=n(Bke,"STRONG",{});var S1t=s(Rhe);Fjo=r(S1t,"xlm-roberta"),S1t.forEach(t),Tjo=r(Bke," \u2014 "),vV=n(Bke,"A",{href:!0});var R1t=s(vV);Mjo=r(R1t,"XLMRobertaForSequenceClassification"),R1t.forEach(t),Ejo=r(Bke," (XLM-RoBERTa model)"),Bke.forEach(t),Cjo=i(j),iv=n(j,"LI",{});var Ike=s(iv);Phe=n(Ike,"STRONG",{});var P1t=s(Phe);wjo=r(P1t,"xlm-roberta-xl"),P1t.forEach(t),Ajo=r(Ike," \u2014 "),FV=n(Ike,"A",{href:!0});var B1t=s(FV);Ljo=r(B1t,"XLMRobertaXLForSequenceClassification"),B1t.forEach(t),yjo=r(Ike," (XLM-RoBERTa-XL model)"),Ike.forEach(t),xjo=i(j),dv=n(j,"LI",{});var Nke=s(dv);Bhe=n(Nke,"STRONG",{});var I1t=s(Bhe);$jo=r(I1t,"xlnet"),I1t.forEach(t),kjo=r(Nke," \u2014 "),TV=n(Nke,"A",{href:!0});var N1t=s(TV);Sjo=r(N1t,"XLNetForSequenceClassification"),N1t.forEach(t),Rjo=r(Nke," (XLNet model)"),Nke.forEach(t),Pjo=i(j),cv=n(j,"LI",{});var qke=s(cv);Ihe=n(qke,"STRONG",{});var q1t=s(Ihe);Bjo=r(q1t,"yoso"),q1t.forEach(t),Ijo=r(qke," \u2014 "),MV=n(qke,"A",{href:!0});var j1t=s(MV);Njo=r(j1t,"YosoForSequenceClassification"),j1t.forEach(t),qjo=r(qke," (YOSO model)"),qke.forEach(t),j.forEach(t),jjo=i(da),fv=n(da,"P",{});var jke=s(fv);Djo=r(jke,"The model is set in evaluation mode by default using "),Nhe=n(jke,"CODE",{});var D1t=s(Nhe);Gjo=r(D1t,"model.eval()"),D1t.forEach(t),Ojo=r(jke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qhe=n(jke,"CODE",{});var G1t=s(qhe);Vjo=r(G1t,"model.train()"),G1t.forEach(t),jke.forEach(t),Xjo=i(da),T(mv.$$.fragment,da),da.forEach(t),el.forEach(t),EGe=i(f),Ki=n(f,"H2",{class:!0});var xVe=s(Ki);gv=n(xVe,"A",{id:!0,class:!0,href:!0});var O1t=s(gv);jhe=n(O1t,"SPAN",{});var V1t=s(jhe);T(Ty.$$.fragment,V1t),V1t.forEach(t),O1t.forEach(t),zjo=i(xVe),Dhe=n(xVe,"SPAN",{});var X1t=s(Dhe);Wjo=r(X1t,"AutoModelForMultipleChoice"),X1t.forEach(t),xVe.forEach(t),CGe=i(f),Bo=n(f,"DIV",{class:!0});var ol=s(Bo);T(My.$$.fragment,ol),Qjo=i(ol),Zi=n(ol,"P",{});var doe=s(Zi);Hjo=r(doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EV=n(doe,"A",{href:!0});var z1t=s(EV);Ujo=r(z1t,"from_pretrained()"),z1t.forEach(t),Jjo=r(doe," class method or the "),CV=n(doe,"A",{href:!0});var W1t=s(CV);Yjo=r(W1t,"from_config()"),W1t.forEach(t),Kjo=r(doe,` class
method.`),doe.forEach(t),Zjo=i(ol),Ey=n(ol,"P",{});var $Ve=s(Ey);eDo=r($Ve,"This class cannot be instantiated directly using "),Ghe=n($Ve,"CODE",{});var Q1t=s(Ghe);oDo=r(Q1t,"__init__()"),Q1t.forEach(t),rDo=r($Ve," (throws an error)."),$Ve.forEach(t),tDo=i(ol),ft=n(ol,"DIV",{class:!0});var Rw=s(ft);T(Cy.$$.fragment,Rw),aDo=i(Rw),Ohe=n(Rw,"P",{});var H1t=s(Ohe);nDo=r(H1t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),H1t.forEach(t),sDo=i(Rw),ed=n(Rw,"P",{});var coe=s(ed);lDo=r(coe,`Note:
Loading a model from its configuration file does `),Vhe=n(coe,"STRONG",{});var U1t=s(Vhe);iDo=r(U1t,"not"),U1t.forEach(t),dDo=r(coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wV=n(coe,"A",{href:!0});var J1t=s(wV);cDo=r(J1t,"from_pretrained()"),J1t.forEach(t),fDo=r(coe," to load the model weights."),coe.forEach(t),mDo=i(Rw),T(hv.$$.fragment,Rw),Rw.forEach(t),gDo=i(ol),ro=n(ol,"DIV",{class:!0});var ca=s(ro);T(wy.$$.fragment,ca),hDo=i(ca),Xhe=n(ca,"P",{});var Y1t=s(Xhe);pDo=r(Y1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Y1t.forEach(t),uDo=i(ca),qa=n(ca,"P",{});var Pw=s(qa);_Do=r(Pw,"The model class to instantiate is selected based on the "),zhe=n(Pw,"CODE",{});var K1t=s(zhe);bDo=r(K1t,"model_type"),K1t.forEach(t),vDo=r(Pw,` property of the config object (either
passed as an argument or loaded from `),Whe=n(Pw,"CODE",{});var Z1t=s(Whe);FDo=r(Z1t,"pretrained_model_name_or_path"),Z1t.forEach(t),TDo=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=n(Pw,"CODE",{});var e2t=s(Qhe);MDo=r(e2t,"pretrained_model_name_or_path"),e2t.forEach(t),EDo=r(Pw,":"),Pw.forEach(t),CDo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);pv=n(ee,"LI",{});var Dke=s(pv);Hhe=n(Dke,"STRONG",{});var o2t=s(Hhe);wDo=r(o2t,"albert"),o2t.forEach(t),ADo=r(Dke," \u2014 "),AV=n(Dke,"A",{href:!0});var r2t=s(AV);LDo=r(r2t,"AlbertForMultipleChoice"),r2t.forEach(t),yDo=r(Dke," (ALBERT model)"),Dke.forEach(t),xDo=i(ee),uv=n(ee,"LI",{});var Gke=s(uv);Uhe=n(Gke,"STRONG",{});var t2t=s(Uhe);$Do=r(t2t,"bert"),t2t.forEach(t),kDo=r(Gke," \u2014 "),LV=n(Gke,"A",{href:!0});var a2t=s(LV);SDo=r(a2t,"BertForMultipleChoice"),a2t.forEach(t),RDo=r(Gke," (BERT model)"),Gke.forEach(t),PDo=i(ee),_v=n(ee,"LI",{});var Oke=s(_v);Jhe=n(Oke,"STRONG",{});var n2t=s(Jhe);BDo=r(n2t,"big_bird"),n2t.forEach(t),IDo=r(Oke," \u2014 "),yV=n(Oke,"A",{href:!0});var s2t=s(yV);NDo=r(s2t,"BigBirdForMultipleChoice"),s2t.forEach(t),qDo=r(Oke," (BigBird model)"),Oke.forEach(t),jDo=i(ee),bv=n(ee,"LI",{});var Vke=s(bv);Yhe=n(Vke,"STRONG",{});var l2t=s(Yhe);DDo=r(l2t,"camembert"),l2t.forEach(t),GDo=r(Vke," \u2014 "),xV=n(Vke,"A",{href:!0});var i2t=s(xV);ODo=r(i2t,"CamembertForMultipleChoice"),i2t.forEach(t),VDo=r(Vke," (CamemBERT model)"),Vke.forEach(t),XDo=i(ee),vv=n(ee,"LI",{});var Xke=s(vv);Khe=n(Xke,"STRONG",{});var d2t=s(Khe);zDo=r(d2t,"canine"),d2t.forEach(t),WDo=r(Xke," \u2014 "),$V=n(Xke,"A",{href:!0});var c2t=s($V);QDo=r(c2t,"CanineForMultipleChoice"),c2t.forEach(t),HDo=r(Xke," (CANINE model)"),Xke.forEach(t),UDo=i(ee),Fv=n(ee,"LI",{});var zke=s(Fv);Zhe=n(zke,"STRONG",{});var f2t=s(Zhe);JDo=r(f2t,"convbert"),f2t.forEach(t),YDo=r(zke," \u2014 "),kV=n(zke,"A",{href:!0});var m2t=s(kV);KDo=r(m2t,"ConvBertForMultipleChoice"),m2t.forEach(t),ZDo=r(zke," (ConvBERT model)"),zke.forEach(t),eGo=i(ee),Tv=n(ee,"LI",{});var Wke=s(Tv);epe=n(Wke,"STRONG",{});var g2t=s(epe);oGo=r(g2t,"data2vec-text"),g2t.forEach(t),rGo=r(Wke," \u2014 "),SV=n(Wke,"A",{href:!0});var h2t=s(SV);tGo=r(h2t,"Data2VecTextForMultipleChoice"),h2t.forEach(t),aGo=r(Wke," (Data2VecText model)"),Wke.forEach(t),nGo=i(ee),Mv=n(ee,"LI",{});var Qke=s(Mv);ope=n(Qke,"STRONG",{});var p2t=s(ope);sGo=r(p2t,"deberta-v2"),p2t.forEach(t),lGo=r(Qke," \u2014 "),RV=n(Qke,"A",{href:!0});var u2t=s(RV);iGo=r(u2t,"DebertaV2ForMultipleChoice"),u2t.forEach(t),dGo=r(Qke," (DeBERTa-v2 model)"),Qke.forEach(t),cGo=i(ee),Ev=n(ee,"LI",{});var Hke=s(Ev);rpe=n(Hke,"STRONG",{});var _2t=s(rpe);fGo=r(_2t,"distilbert"),_2t.forEach(t),mGo=r(Hke," \u2014 "),PV=n(Hke,"A",{href:!0});var b2t=s(PV);gGo=r(b2t,"DistilBertForMultipleChoice"),b2t.forEach(t),hGo=r(Hke," (DistilBERT model)"),Hke.forEach(t),pGo=i(ee),Cv=n(ee,"LI",{});var Uke=s(Cv);tpe=n(Uke,"STRONG",{});var v2t=s(tpe);uGo=r(v2t,"electra"),v2t.forEach(t),_Go=r(Uke," \u2014 "),BV=n(Uke,"A",{href:!0});var F2t=s(BV);bGo=r(F2t,"ElectraForMultipleChoice"),F2t.forEach(t),vGo=r(Uke," (ELECTRA model)"),Uke.forEach(t),FGo=i(ee),wv=n(ee,"LI",{});var Jke=s(wv);ape=n(Jke,"STRONG",{});var T2t=s(ape);TGo=r(T2t,"flaubert"),T2t.forEach(t),MGo=r(Jke," \u2014 "),IV=n(Jke,"A",{href:!0});var M2t=s(IV);EGo=r(M2t,"FlaubertForMultipleChoice"),M2t.forEach(t),CGo=r(Jke," (FlauBERT model)"),Jke.forEach(t),wGo=i(ee),Av=n(ee,"LI",{});var Yke=s(Av);npe=n(Yke,"STRONG",{});var E2t=s(npe);AGo=r(E2t,"fnet"),E2t.forEach(t),LGo=r(Yke," \u2014 "),NV=n(Yke,"A",{href:!0});var C2t=s(NV);yGo=r(C2t,"FNetForMultipleChoice"),C2t.forEach(t),xGo=r(Yke," (FNet model)"),Yke.forEach(t),$Go=i(ee),Lv=n(ee,"LI",{});var Kke=s(Lv);spe=n(Kke,"STRONG",{});var w2t=s(spe);kGo=r(w2t,"funnel"),w2t.forEach(t),SGo=r(Kke," \u2014 "),qV=n(Kke,"A",{href:!0});var A2t=s(qV);RGo=r(A2t,"FunnelForMultipleChoice"),A2t.forEach(t),PGo=r(Kke," (Funnel Transformer model)"),Kke.forEach(t),BGo=i(ee),yv=n(ee,"LI",{});var Zke=s(yv);lpe=n(Zke,"STRONG",{});var L2t=s(lpe);IGo=r(L2t,"ibert"),L2t.forEach(t),NGo=r(Zke," \u2014 "),jV=n(Zke,"A",{href:!0});var y2t=s(jV);qGo=r(y2t,"IBertForMultipleChoice"),y2t.forEach(t),jGo=r(Zke," (I-BERT model)"),Zke.forEach(t),DGo=i(ee),xv=n(ee,"LI",{});var eSe=s(xv);ipe=n(eSe,"STRONG",{});var x2t=s(ipe);GGo=r(x2t,"longformer"),x2t.forEach(t),OGo=r(eSe," \u2014 "),DV=n(eSe,"A",{href:!0});var $2t=s(DV);VGo=r($2t,"LongformerForMultipleChoice"),$2t.forEach(t),XGo=r(eSe," (Longformer model)"),eSe.forEach(t),zGo=i(ee),$v=n(ee,"LI",{});var oSe=s($v);dpe=n(oSe,"STRONG",{});var k2t=s(dpe);WGo=r(k2t,"megatron-bert"),k2t.forEach(t),QGo=r(oSe," \u2014 "),GV=n(oSe,"A",{href:!0});var S2t=s(GV);HGo=r(S2t,"MegatronBertForMultipleChoice"),S2t.forEach(t),UGo=r(oSe," (Megatron-BERT model)"),oSe.forEach(t),JGo=i(ee),kv=n(ee,"LI",{});var rSe=s(kv);cpe=n(rSe,"STRONG",{});var R2t=s(cpe);YGo=r(R2t,"mobilebert"),R2t.forEach(t),KGo=r(rSe," \u2014 "),OV=n(rSe,"A",{href:!0});var P2t=s(OV);ZGo=r(P2t,"MobileBertForMultipleChoice"),P2t.forEach(t),eOo=r(rSe," (MobileBERT model)"),rSe.forEach(t),oOo=i(ee),Sv=n(ee,"LI",{});var tSe=s(Sv);fpe=n(tSe,"STRONG",{});var B2t=s(fpe);rOo=r(B2t,"mpnet"),B2t.forEach(t),tOo=r(tSe," \u2014 "),VV=n(tSe,"A",{href:!0});var I2t=s(VV);aOo=r(I2t,"MPNetForMultipleChoice"),I2t.forEach(t),nOo=r(tSe," (MPNet model)"),tSe.forEach(t),sOo=i(ee),Rv=n(ee,"LI",{});var aSe=s(Rv);mpe=n(aSe,"STRONG",{});var N2t=s(mpe);lOo=r(N2t,"nystromformer"),N2t.forEach(t),iOo=r(aSe," \u2014 "),XV=n(aSe,"A",{href:!0});var q2t=s(XV);dOo=r(q2t,"NystromformerForMultipleChoice"),q2t.forEach(t),cOo=r(aSe," (Nystr\xF6mformer model)"),aSe.forEach(t),fOo=i(ee),Pv=n(ee,"LI",{});var nSe=s(Pv);gpe=n(nSe,"STRONG",{});var j2t=s(gpe);mOo=r(j2t,"qdqbert"),j2t.forEach(t),gOo=r(nSe," \u2014 "),zV=n(nSe,"A",{href:!0});var D2t=s(zV);hOo=r(D2t,"QDQBertForMultipleChoice"),D2t.forEach(t),pOo=r(nSe," (QDQBert model)"),nSe.forEach(t),uOo=i(ee),Bv=n(ee,"LI",{});var sSe=s(Bv);hpe=n(sSe,"STRONG",{});var G2t=s(hpe);_Oo=r(G2t,"rembert"),G2t.forEach(t),bOo=r(sSe," \u2014 "),WV=n(sSe,"A",{href:!0});var O2t=s(WV);vOo=r(O2t,"RemBertForMultipleChoice"),O2t.forEach(t),FOo=r(sSe," (RemBERT model)"),sSe.forEach(t),TOo=i(ee),Iv=n(ee,"LI",{});var lSe=s(Iv);ppe=n(lSe,"STRONG",{});var V2t=s(ppe);MOo=r(V2t,"roberta"),V2t.forEach(t),EOo=r(lSe," \u2014 "),QV=n(lSe,"A",{href:!0});var X2t=s(QV);COo=r(X2t,"RobertaForMultipleChoice"),X2t.forEach(t),wOo=r(lSe," (RoBERTa model)"),lSe.forEach(t),AOo=i(ee),Nv=n(ee,"LI",{});var iSe=s(Nv);upe=n(iSe,"STRONG",{});var z2t=s(upe);LOo=r(z2t,"roformer"),z2t.forEach(t),yOo=r(iSe," \u2014 "),HV=n(iSe,"A",{href:!0});var W2t=s(HV);xOo=r(W2t,"RoFormerForMultipleChoice"),W2t.forEach(t),$Oo=r(iSe," (RoFormer model)"),iSe.forEach(t),kOo=i(ee),qv=n(ee,"LI",{});var dSe=s(qv);_pe=n(dSe,"STRONG",{});var Q2t=s(_pe);SOo=r(Q2t,"squeezebert"),Q2t.forEach(t),ROo=r(dSe," \u2014 "),UV=n(dSe,"A",{href:!0});var H2t=s(UV);POo=r(H2t,"SqueezeBertForMultipleChoice"),H2t.forEach(t),BOo=r(dSe," (SqueezeBERT model)"),dSe.forEach(t),IOo=i(ee),jv=n(ee,"LI",{});var cSe=s(jv);bpe=n(cSe,"STRONG",{});var U2t=s(bpe);NOo=r(U2t,"xlm"),U2t.forEach(t),qOo=r(cSe," \u2014 "),JV=n(cSe,"A",{href:!0});var J2t=s(JV);jOo=r(J2t,"XLMForMultipleChoice"),J2t.forEach(t),DOo=r(cSe," (XLM model)"),cSe.forEach(t),GOo=i(ee),Dv=n(ee,"LI",{});var fSe=s(Dv);vpe=n(fSe,"STRONG",{});var Y2t=s(vpe);OOo=r(Y2t,"xlm-roberta"),Y2t.forEach(t),VOo=r(fSe," \u2014 "),YV=n(fSe,"A",{href:!0});var K2t=s(YV);XOo=r(K2t,"XLMRobertaForMultipleChoice"),K2t.forEach(t),zOo=r(fSe," (XLM-RoBERTa model)"),fSe.forEach(t),WOo=i(ee),Gv=n(ee,"LI",{});var mSe=s(Gv);Fpe=n(mSe,"STRONG",{});var Z2t=s(Fpe);QOo=r(Z2t,"xlm-roberta-xl"),Z2t.forEach(t),HOo=r(mSe," \u2014 "),KV=n(mSe,"A",{href:!0});var ebt=s(KV);UOo=r(ebt,"XLMRobertaXLForMultipleChoice"),ebt.forEach(t),JOo=r(mSe," (XLM-RoBERTa-XL model)"),mSe.forEach(t),YOo=i(ee),Ov=n(ee,"LI",{});var gSe=s(Ov);Tpe=n(gSe,"STRONG",{});var obt=s(Tpe);KOo=r(obt,"xlnet"),obt.forEach(t),ZOo=r(gSe," \u2014 "),ZV=n(gSe,"A",{href:!0});var rbt=s(ZV);eVo=r(rbt,"XLNetForMultipleChoice"),rbt.forEach(t),oVo=r(gSe," (XLNet model)"),gSe.forEach(t),rVo=i(ee),Vv=n(ee,"LI",{});var hSe=s(Vv);Mpe=n(hSe,"STRONG",{});var tbt=s(Mpe);tVo=r(tbt,"yoso"),tbt.forEach(t),aVo=r(hSe," \u2014 "),eX=n(hSe,"A",{href:!0});var abt=s(eX);nVo=r(abt,"YosoForMultipleChoice"),abt.forEach(t),sVo=r(hSe," (YOSO model)"),hSe.forEach(t),ee.forEach(t),lVo=i(ca),Xv=n(ca,"P",{});var pSe=s(Xv);iVo=r(pSe,"The model is set in evaluation mode by default using "),Epe=n(pSe,"CODE",{});var nbt=s(Epe);dVo=r(nbt,"model.eval()"),nbt.forEach(t),cVo=r(pSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cpe=n(pSe,"CODE",{});var sbt=s(Cpe);fVo=r(sbt,"model.train()"),sbt.forEach(t),pSe.forEach(t),mVo=i(ca),T(zv.$$.fragment,ca),ca.forEach(t),ol.forEach(t),wGe=i(f),od=n(f,"H2",{class:!0});var kVe=s(od);Wv=n(kVe,"A",{id:!0,class:!0,href:!0});var lbt=s(Wv);wpe=n(lbt,"SPAN",{});var ibt=s(wpe);T(Ay.$$.fragment,ibt),ibt.forEach(t),lbt.forEach(t),gVo=i(kVe),Ape=n(kVe,"SPAN",{});var dbt=s(Ape);hVo=r(dbt,"AutoModelForNextSentencePrediction"),dbt.forEach(t),kVe.forEach(t),AGe=i(f),Io=n(f,"DIV",{class:!0});var rl=s(Io);T(Ly.$$.fragment,rl),pVo=i(rl),rd=n(rl,"P",{});var foe=s(rd);uVo=r(foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oX=n(foe,"A",{href:!0});var cbt=s(oX);_Vo=r(cbt,"from_pretrained()"),cbt.forEach(t),bVo=r(foe," class method or the "),rX=n(foe,"A",{href:!0});var fbt=s(rX);vVo=r(fbt,"from_config()"),fbt.forEach(t),FVo=r(foe,` class
method.`),foe.forEach(t),TVo=i(rl),yy=n(rl,"P",{});var SVe=s(yy);MVo=r(SVe,"This class cannot be instantiated directly using "),Lpe=n(SVe,"CODE",{});var mbt=s(Lpe);EVo=r(mbt,"__init__()"),mbt.forEach(t),CVo=r(SVe," (throws an error)."),SVe.forEach(t),wVo=i(rl),mt=n(rl,"DIV",{class:!0});var Bw=s(mt);T(xy.$$.fragment,Bw),AVo=i(Bw),ype=n(Bw,"P",{});var gbt=s(ype);LVo=r(gbt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gbt.forEach(t),yVo=i(Bw),td=n(Bw,"P",{});var moe=s(td);xVo=r(moe,`Note:
Loading a model from its configuration file does `),xpe=n(moe,"STRONG",{});var hbt=s(xpe);$Vo=r(hbt,"not"),hbt.forEach(t),kVo=r(moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=n(moe,"A",{href:!0});var pbt=s(tX);SVo=r(pbt,"from_pretrained()"),pbt.forEach(t),RVo=r(moe," to load the model weights."),moe.forEach(t),PVo=i(Bw),T(Qv.$$.fragment,Bw),Bw.forEach(t),BVo=i(rl),to=n(rl,"DIV",{class:!0});var fa=s(to);T($y.$$.fragment,fa),IVo=i(fa),$pe=n(fa,"P",{});var ubt=s($pe);NVo=r(ubt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ubt.forEach(t),qVo=i(fa),ja=n(fa,"P",{});var Iw=s(ja);jVo=r(Iw,"The model class to instantiate is selected based on the "),kpe=n(Iw,"CODE",{});var _bt=s(kpe);DVo=r(_bt,"model_type"),_bt.forEach(t),GVo=r(Iw,` property of the config object (either
passed as an argument or loaded from `),Spe=n(Iw,"CODE",{});var bbt=s(Spe);OVo=r(bbt,"pretrained_model_name_or_path"),bbt.forEach(t),VVo=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=n(Iw,"CODE",{});var vbt=s(Rpe);XVo=r(vbt,"pretrained_model_name_or_path"),vbt.forEach(t),zVo=r(Iw,":"),Iw.forEach(t),WVo=i(fa),Zr=n(fa,"UL",{});var tl=s(Zr);Hv=n(tl,"LI",{});var uSe=s(Hv);Ppe=n(uSe,"STRONG",{});var Fbt=s(Ppe);QVo=r(Fbt,"bert"),Fbt.forEach(t),HVo=r(uSe," \u2014 "),aX=n(uSe,"A",{href:!0});var Tbt=s(aX);UVo=r(Tbt,"BertForNextSentencePrediction"),Tbt.forEach(t),JVo=r(uSe," (BERT model)"),uSe.forEach(t),YVo=i(tl),Uv=n(tl,"LI",{});var _Se=s(Uv);Bpe=n(_Se,"STRONG",{});var Mbt=s(Bpe);KVo=r(Mbt,"fnet"),Mbt.forEach(t),ZVo=r(_Se," \u2014 "),nX=n(_Se,"A",{href:!0});var Ebt=s(nX);eXo=r(Ebt,"FNetForNextSentencePrediction"),Ebt.forEach(t),oXo=r(_Se," (FNet model)"),_Se.forEach(t),rXo=i(tl),Jv=n(tl,"LI",{});var bSe=s(Jv);Ipe=n(bSe,"STRONG",{});var Cbt=s(Ipe);tXo=r(Cbt,"megatron-bert"),Cbt.forEach(t),aXo=r(bSe," \u2014 "),sX=n(bSe,"A",{href:!0});var wbt=s(sX);nXo=r(wbt,"MegatronBertForNextSentencePrediction"),wbt.forEach(t),sXo=r(bSe," (Megatron-BERT model)"),bSe.forEach(t),lXo=i(tl),Yv=n(tl,"LI",{});var vSe=s(Yv);Npe=n(vSe,"STRONG",{});var Abt=s(Npe);iXo=r(Abt,"mobilebert"),Abt.forEach(t),dXo=r(vSe," \u2014 "),lX=n(vSe,"A",{href:!0});var Lbt=s(lX);cXo=r(Lbt,"MobileBertForNextSentencePrediction"),Lbt.forEach(t),fXo=r(vSe," (MobileBERT model)"),vSe.forEach(t),mXo=i(tl),Kv=n(tl,"LI",{});var FSe=s(Kv);qpe=n(FSe,"STRONG",{});var ybt=s(qpe);gXo=r(ybt,"qdqbert"),ybt.forEach(t),hXo=r(FSe," \u2014 "),iX=n(FSe,"A",{href:!0});var xbt=s(iX);pXo=r(xbt,"QDQBertForNextSentencePrediction"),xbt.forEach(t),uXo=r(FSe," (QDQBert model)"),FSe.forEach(t),tl.forEach(t),_Xo=i(fa),Zv=n(fa,"P",{});var TSe=s(Zv);bXo=r(TSe,"The model is set in evaluation mode by default using "),jpe=n(TSe,"CODE",{});var $bt=s(jpe);vXo=r($bt,"model.eval()"),$bt.forEach(t),FXo=r(TSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=n(TSe,"CODE",{});var kbt=s(Dpe);TXo=r(kbt,"model.train()"),kbt.forEach(t),TSe.forEach(t),MXo=i(fa),T(e3.$$.fragment,fa),fa.forEach(t),rl.forEach(t),LGe=i(f),ad=n(f,"H2",{class:!0});var RVe=s(ad);o3=n(RVe,"A",{id:!0,class:!0,href:!0});var Sbt=s(o3);Gpe=n(Sbt,"SPAN",{});var Rbt=s(Gpe);T(ky.$$.fragment,Rbt),Rbt.forEach(t),Sbt.forEach(t),EXo=i(RVe),Ope=n(RVe,"SPAN",{});var Pbt=s(Ope);CXo=r(Pbt,"AutoModelForTokenClassification"),Pbt.forEach(t),RVe.forEach(t),yGe=i(f),No=n(f,"DIV",{class:!0});var al=s(No);T(Sy.$$.fragment,al),wXo=i(al),nd=n(al,"P",{});var goe=s(nd);AXo=r(goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dX=n(goe,"A",{href:!0});var Bbt=s(dX);LXo=r(Bbt,"from_pretrained()"),Bbt.forEach(t),yXo=r(goe," class method or the "),cX=n(goe,"A",{href:!0});var Ibt=s(cX);xXo=r(Ibt,"from_config()"),Ibt.forEach(t),$Xo=r(goe,` class
method.`),goe.forEach(t),kXo=i(al),Ry=n(al,"P",{});var PVe=s(Ry);SXo=r(PVe,"This class cannot be instantiated directly using "),Vpe=n(PVe,"CODE",{});var Nbt=s(Vpe);RXo=r(Nbt,"__init__()"),Nbt.forEach(t),PXo=r(PVe," (throws an error)."),PVe.forEach(t),BXo=i(al),gt=n(al,"DIV",{class:!0});var Nw=s(gt);T(Py.$$.fragment,Nw),IXo=i(Nw),Xpe=n(Nw,"P",{});var qbt=s(Xpe);NXo=r(qbt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qbt.forEach(t),qXo=i(Nw),sd=n(Nw,"P",{});var hoe=s(sd);jXo=r(hoe,`Note:
Loading a model from its configuration file does `),zpe=n(hoe,"STRONG",{});var jbt=s(zpe);DXo=r(jbt,"not"),jbt.forEach(t),GXo=r(hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=n(hoe,"A",{href:!0});var Dbt=s(fX);OXo=r(Dbt,"from_pretrained()"),Dbt.forEach(t),VXo=r(hoe," to load the model weights."),hoe.forEach(t),XXo=i(Nw),T(r3.$$.fragment,Nw),Nw.forEach(t),zXo=i(al),ao=n(al,"DIV",{class:!0});var ma=s(ao);T(By.$$.fragment,ma),WXo=i(ma),Wpe=n(ma,"P",{});var Gbt=s(Wpe);QXo=r(Gbt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Gbt.forEach(t),HXo=i(ma),Da=n(ma,"P",{});var qw=s(Da);UXo=r(qw,"The model class to instantiate is selected based on the "),Qpe=n(qw,"CODE",{});var Obt=s(Qpe);JXo=r(Obt,"model_type"),Obt.forEach(t),YXo=r(qw,` property of the config object (either
passed as an argument or loaded from `),Hpe=n(qw,"CODE",{});var Vbt=s(Hpe);KXo=r(Vbt,"pretrained_model_name_or_path"),Vbt.forEach(t),ZXo=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=n(qw,"CODE",{});var Xbt=s(Upe);ezo=r(Xbt,"pretrained_model_name_or_path"),Xbt.forEach(t),ozo=r(qw,":"),qw.forEach(t),rzo=i(ma),H=n(ma,"UL",{});var J=s(H);t3=n(J,"LI",{});var MSe=s(t3);Jpe=n(MSe,"STRONG",{});var zbt=s(Jpe);tzo=r(zbt,"albert"),zbt.forEach(t),azo=r(MSe," \u2014 "),mX=n(MSe,"A",{href:!0});var Wbt=s(mX);nzo=r(Wbt,"AlbertForTokenClassification"),Wbt.forEach(t),szo=r(MSe," (ALBERT model)"),MSe.forEach(t),lzo=i(J),a3=n(J,"LI",{});var ESe=s(a3);Ype=n(ESe,"STRONG",{});var Qbt=s(Ype);izo=r(Qbt,"bert"),Qbt.forEach(t),dzo=r(ESe," \u2014 "),gX=n(ESe,"A",{href:!0});var Hbt=s(gX);czo=r(Hbt,"BertForTokenClassification"),Hbt.forEach(t),fzo=r(ESe," (BERT model)"),ESe.forEach(t),mzo=i(J),n3=n(J,"LI",{});var CSe=s(n3);Kpe=n(CSe,"STRONG",{});var Ubt=s(Kpe);gzo=r(Ubt,"big_bird"),Ubt.forEach(t),hzo=r(CSe," \u2014 "),hX=n(CSe,"A",{href:!0});var Jbt=s(hX);pzo=r(Jbt,"BigBirdForTokenClassification"),Jbt.forEach(t),uzo=r(CSe," (BigBird model)"),CSe.forEach(t),_zo=i(J),s3=n(J,"LI",{});var wSe=s(s3);Zpe=n(wSe,"STRONG",{});var Ybt=s(Zpe);bzo=r(Ybt,"bloom"),Ybt.forEach(t),vzo=r(wSe," \u2014 "),pX=n(wSe,"A",{href:!0});var Kbt=s(pX);Fzo=r(Kbt,"BloomForTokenClassification"),Kbt.forEach(t),Tzo=r(wSe," (BLOOM model)"),wSe.forEach(t),Mzo=i(J),l3=n(J,"LI",{});var ASe=s(l3);eue=n(ASe,"STRONG",{});var Zbt=s(eue);Ezo=r(Zbt,"camembert"),Zbt.forEach(t),Czo=r(ASe," \u2014 "),uX=n(ASe,"A",{href:!0});var evt=s(uX);wzo=r(evt,"CamembertForTokenClassification"),evt.forEach(t),Azo=r(ASe," (CamemBERT model)"),ASe.forEach(t),Lzo=i(J),i3=n(J,"LI",{});var LSe=s(i3);oue=n(LSe,"STRONG",{});var ovt=s(oue);yzo=r(ovt,"canine"),ovt.forEach(t),xzo=r(LSe," \u2014 "),_X=n(LSe,"A",{href:!0});var rvt=s(_X);$zo=r(rvt,"CanineForTokenClassification"),rvt.forEach(t),kzo=r(LSe," (CANINE model)"),LSe.forEach(t),Szo=i(J),d3=n(J,"LI",{});var ySe=s(d3);rue=n(ySe,"STRONG",{});var tvt=s(rue);Rzo=r(tvt,"convbert"),tvt.forEach(t),Pzo=r(ySe," \u2014 "),bX=n(ySe,"A",{href:!0});var avt=s(bX);Bzo=r(avt,"ConvBertForTokenClassification"),avt.forEach(t),Izo=r(ySe," (ConvBERT model)"),ySe.forEach(t),Nzo=i(J),c3=n(J,"LI",{});var xSe=s(c3);tue=n(xSe,"STRONG",{});var nvt=s(tue);qzo=r(nvt,"data2vec-text"),nvt.forEach(t),jzo=r(xSe," \u2014 "),vX=n(xSe,"A",{href:!0});var svt=s(vX);Dzo=r(svt,"Data2VecTextForTokenClassification"),svt.forEach(t),Gzo=r(xSe," (Data2VecText model)"),xSe.forEach(t),Ozo=i(J),f3=n(J,"LI",{});var $Se=s(f3);aue=n($Se,"STRONG",{});var lvt=s(aue);Vzo=r(lvt,"deberta"),lvt.forEach(t),Xzo=r($Se," \u2014 "),FX=n($Se,"A",{href:!0});var ivt=s(FX);zzo=r(ivt,"DebertaForTokenClassification"),ivt.forEach(t),Wzo=r($Se," (DeBERTa model)"),$Se.forEach(t),Qzo=i(J),m3=n(J,"LI",{});var kSe=s(m3);nue=n(kSe,"STRONG",{});var dvt=s(nue);Hzo=r(dvt,"deberta-v2"),dvt.forEach(t),Uzo=r(kSe," \u2014 "),TX=n(kSe,"A",{href:!0});var cvt=s(TX);Jzo=r(cvt,"DebertaV2ForTokenClassification"),cvt.forEach(t),Yzo=r(kSe," (DeBERTa-v2 model)"),kSe.forEach(t),Kzo=i(J),g3=n(J,"LI",{});var SSe=s(g3);sue=n(SSe,"STRONG",{});var fvt=s(sue);Zzo=r(fvt,"distilbert"),fvt.forEach(t),eWo=r(SSe," \u2014 "),MX=n(SSe,"A",{href:!0});var mvt=s(MX);oWo=r(mvt,"DistilBertForTokenClassification"),mvt.forEach(t),rWo=r(SSe," (DistilBERT model)"),SSe.forEach(t),tWo=i(J),h3=n(J,"LI",{});var RSe=s(h3);lue=n(RSe,"STRONG",{});var gvt=s(lue);aWo=r(gvt,"electra"),gvt.forEach(t),nWo=r(RSe," \u2014 "),EX=n(RSe,"A",{href:!0});var hvt=s(EX);sWo=r(hvt,"ElectraForTokenClassification"),hvt.forEach(t),lWo=r(RSe," (ELECTRA model)"),RSe.forEach(t),iWo=i(J),p3=n(J,"LI",{});var PSe=s(p3);iue=n(PSe,"STRONG",{});var pvt=s(iue);dWo=r(pvt,"flaubert"),pvt.forEach(t),cWo=r(PSe," \u2014 "),CX=n(PSe,"A",{href:!0});var uvt=s(CX);fWo=r(uvt,"FlaubertForTokenClassification"),uvt.forEach(t),mWo=r(PSe," (FlauBERT model)"),PSe.forEach(t),gWo=i(J),u3=n(J,"LI",{});var BSe=s(u3);due=n(BSe,"STRONG",{});var _vt=s(due);hWo=r(_vt,"fnet"),_vt.forEach(t),pWo=r(BSe," \u2014 "),wX=n(BSe,"A",{href:!0});var bvt=s(wX);uWo=r(bvt,"FNetForTokenClassification"),bvt.forEach(t),_Wo=r(BSe," (FNet model)"),BSe.forEach(t),bWo=i(J),_3=n(J,"LI",{});var ISe=s(_3);cue=n(ISe,"STRONG",{});var vvt=s(cue);vWo=r(vvt,"funnel"),vvt.forEach(t),FWo=r(ISe," \u2014 "),AX=n(ISe,"A",{href:!0});var Fvt=s(AX);TWo=r(Fvt,"FunnelForTokenClassification"),Fvt.forEach(t),MWo=r(ISe," (Funnel Transformer model)"),ISe.forEach(t),EWo=i(J),b3=n(J,"LI",{});var NSe=s(b3);fue=n(NSe,"STRONG",{});var Tvt=s(fue);CWo=r(Tvt,"gpt2"),Tvt.forEach(t),wWo=r(NSe," \u2014 "),LX=n(NSe,"A",{href:!0});var Mvt=s(LX);AWo=r(Mvt,"GPT2ForTokenClassification"),Mvt.forEach(t),LWo=r(NSe," (OpenAI GPT-2 model)"),NSe.forEach(t),yWo=i(J),v3=n(J,"LI",{});var qSe=s(v3);mue=n(qSe,"STRONG",{});var Evt=s(mue);xWo=r(Evt,"ibert"),Evt.forEach(t),$Wo=r(qSe," \u2014 "),yX=n(qSe,"A",{href:!0});var Cvt=s(yX);kWo=r(Cvt,"IBertForTokenClassification"),Cvt.forEach(t),SWo=r(qSe," (I-BERT model)"),qSe.forEach(t),RWo=i(J),F3=n(J,"LI",{});var jSe=s(F3);gue=n(jSe,"STRONG",{});var wvt=s(gue);PWo=r(wvt,"layoutlm"),wvt.forEach(t),BWo=r(jSe," \u2014 "),xX=n(jSe,"A",{href:!0});var Avt=s(xX);IWo=r(Avt,"LayoutLMForTokenClassification"),Avt.forEach(t),NWo=r(jSe," (LayoutLM model)"),jSe.forEach(t),qWo=i(J),T3=n(J,"LI",{});var DSe=s(T3);hue=n(DSe,"STRONG",{});var Lvt=s(hue);jWo=r(Lvt,"layoutlmv2"),Lvt.forEach(t),DWo=r(DSe," \u2014 "),$X=n(DSe,"A",{href:!0});var yvt=s($X);GWo=r(yvt,"LayoutLMv2ForTokenClassification"),yvt.forEach(t),OWo=r(DSe," (LayoutLMv2 model)"),DSe.forEach(t),VWo=i(J),M3=n(J,"LI",{});var GSe=s(M3);pue=n(GSe,"STRONG",{});var xvt=s(pue);XWo=r(xvt,"layoutlmv3"),xvt.forEach(t),zWo=r(GSe," \u2014 "),kX=n(GSe,"A",{href:!0});var $vt=s(kX);WWo=r($vt,"LayoutLMv3ForTokenClassification"),$vt.forEach(t),QWo=r(GSe," (LayoutLMv3 model)"),GSe.forEach(t),HWo=i(J),E3=n(J,"LI",{});var OSe=s(E3);uue=n(OSe,"STRONG",{});var kvt=s(uue);UWo=r(kvt,"longformer"),kvt.forEach(t),JWo=r(OSe," \u2014 "),SX=n(OSe,"A",{href:!0});var Svt=s(SX);YWo=r(Svt,"LongformerForTokenClassification"),Svt.forEach(t),KWo=r(OSe," (Longformer model)"),OSe.forEach(t),ZWo=i(J),C3=n(J,"LI",{});var VSe=s(C3);_ue=n(VSe,"STRONG",{});var Rvt=s(_ue);eQo=r(Rvt,"megatron-bert"),Rvt.forEach(t),oQo=r(VSe," \u2014 "),RX=n(VSe,"A",{href:!0});var Pvt=s(RX);rQo=r(Pvt,"MegatronBertForTokenClassification"),Pvt.forEach(t),tQo=r(VSe," (Megatron-BERT model)"),VSe.forEach(t),aQo=i(J),w3=n(J,"LI",{});var XSe=s(w3);bue=n(XSe,"STRONG",{});var Bvt=s(bue);nQo=r(Bvt,"mobilebert"),Bvt.forEach(t),sQo=r(XSe," \u2014 "),PX=n(XSe,"A",{href:!0});var Ivt=s(PX);lQo=r(Ivt,"MobileBertForTokenClassification"),Ivt.forEach(t),iQo=r(XSe," (MobileBERT model)"),XSe.forEach(t),dQo=i(J),A3=n(J,"LI",{});var zSe=s(A3);vue=n(zSe,"STRONG",{});var Nvt=s(vue);cQo=r(Nvt,"mpnet"),Nvt.forEach(t),fQo=r(zSe," \u2014 "),BX=n(zSe,"A",{href:!0});var qvt=s(BX);mQo=r(qvt,"MPNetForTokenClassification"),qvt.forEach(t),gQo=r(zSe," (MPNet model)"),zSe.forEach(t),hQo=i(J),L3=n(J,"LI",{});var WSe=s(L3);Fue=n(WSe,"STRONG",{});var jvt=s(Fue);pQo=r(jvt,"nystromformer"),jvt.forEach(t),uQo=r(WSe," \u2014 "),IX=n(WSe,"A",{href:!0});var Dvt=s(IX);_Qo=r(Dvt,"NystromformerForTokenClassification"),Dvt.forEach(t),bQo=r(WSe," (Nystr\xF6mformer model)"),WSe.forEach(t),vQo=i(J),y3=n(J,"LI",{});var QSe=s(y3);Tue=n(QSe,"STRONG",{});var Gvt=s(Tue);FQo=r(Gvt,"qdqbert"),Gvt.forEach(t),TQo=r(QSe," \u2014 "),NX=n(QSe,"A",{href:!0});var Ovt=s(NX);MQo=r(Ovt,"QDQBertForTokenClassification"),Ovt.forEach(t),EQo=r(QSe," (QDQBert model)"),QSe.forEach(t),CQo=i(J),x3=n(J,"LI",{});var HSe=s(x3);Mue=n(HSe,"STRONG",{});var Vvt=s(Mue);wQo=r(Vvt,"rembert"),Vvt.forEach(t),AQo=r(HSe," \u2014 "),qX=n(HSe,"A",{href:!0});var Xvt=s(qX);LQo=r(Xvt,"RemBertForTokenClassification"),Xvt.forEach(t),yQo=r(HSe," (RemBERT model)"),HSe.forEach(t),xQo=i(J),$3=n(J,"LI",{});var USe=s($3);Eue=n(USe,"STRONG",{});var zvt=s(Eue);$Qo=r(zvt,"roberta"),zvt.forEach(t),kQo=r(USe," \u2014 "),jX=n(USe,"A",{href:!0});var Wvt=s(jX);SQo=r(Wvt,"RobertaForTokenClassification"),Wvt.forEach(t),RQo=r(USe," (RoBERTa model)"),USe.forEach(t),PQo=i(J),k3=n(J,"LI",{});var JSe=s(k3);Cue=n(JSe,"STRONG",{});var Qvt=s(Cue);BQo=r(Qvt,"roformer"),Qvt.forEach(t),IQo=r(JSe," \u2014 "),DX=n(JSe,"A",{href:!0});var Hvt=s(DX);NQo=r(Hvt,"RoFormerForTokenClassification"),Hvt.forEach(t),qQo=r(JSe," (RoFormer model)"),JSe.forEach(t),jQo=i(J),S3=n(J,"LI",{});var YSe=s(S3);wue=n(YSe,"STRONG",{});var Uvt=s(wue);DQo=r(Uvt,"squeezebert"),Uvt.forEach(t),GQo=r(YSe," \u2014 "),GX=n(YSe,"A",{href:!0});var Jvt=s(GX);OQo=r(Jvt,"SqueezeBertForTokenClassification"),Jvt.forEach(t),VQo=r(YSe," (SqueezeBERT model)"),YSe.forEach(t),XQo=i(J),R3=n(J,"LI",{});var KSe=s(R3);Aue=n(KSe,"STRONG",{});var Yvt=s(Aue);zQo=r(Yvt,"xlm"),Yvt.forEach(t),WQo=r(KSe," \u2014 "),OX=n(KSe,"A",{href:!0});var Kvt=s(OX);QQo=r(Kvt,"XLMForTokenClassification"),Kvt.forEach(t),HQo=r(KSe," (XLM model)"),KSe.forEach(t),UQo=i(J),P3=n(J,"LI",{});var ZSe=s(P3);Lue=n(ZSe,"STRONG",{});var Zvt=s(Lue);JQo=r(Zvt,"xlm-roberta"),Zvt.forEach(t),YQo=r(ZSe," \u2014 "),VX=n(ZSe,"A",{href:!0});var e3t=s(VX);KQo=r(e3t,"XLMRobertaForTokenClassification"),e3t.forEach(t),ZQo=r(ZSe," (XLM-RoBERTa model)"),ZSe.forEach(t),eHo=i(J),B3=n(J,"LI",{});var eRe=s(B3);yue=n(eRe,"STRONG",{});var o3t=s(yue);oHo=r(o3t,"xlm-roberta-xl"),o3t.forEach(t),rHo=r(eRe," \u2014 "),XX=n(eRe,"A",{href:!0});var r3t=s(XX);tHo=r(r3t,"XLMRobertaXLForTokenClassification"),r3t.forEach(t),aHo=r(eRe," (XLM-RoBERTa-XL model)"),eRe.forEach(t),nHo=i(J),I3=n(J,"LI",{});var oRe=s(I3);xue=n(oRe,"STRONG",{});var t3t=s(xue);sHo=r(t3t,"xlnet"),t3t.forEach(t),lHo=r(oRe," \u2014 "),zX=n(oRe,"A",{href:!0});var a3t=s(zX);iHo=r(a3t,"XLNetForTokenClassification"),a3t.forEach(t),dHo=r(oRe," (XLNet model)"),oRe.forEach(t),cHo=i(J),N3=n(J,"LI",{});var rRe=s(N3);$ue=n(rRe,"STRONG",{});var n3t=s($ue);fHo=r(n3t,"yoso"),n3t.forEach(t),mHo=r(rRe," \u2014 "),WX=n(rRe,"A",{href:!0});var s3t=s(WX);gHo=r(s3t,"YosoForTokenClassification"),s3t.forEach(t),hHo=r(rRe," (YOSO model)"),rRe.forEach(t),J.forEach(t),pHo=i(ma),q3=n(ma,"P",{});var tRe=s(q3);uHo=r(tRe,"The model is set in evaluation mode by default using "),kue=n(tRe,"CODE",{});var l3t=s(kue);_Ho=r(l3t,"model.eval()"),l3t.forEach(t),bHo=r(tRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=n(tRe,"CODE",{});var i3t=s(Sue);vHo=r(i3t,"model.train()"),i3t.forEach(t),tRe.forEach(t),FHo=i(ma),T(j3.$$.fragment,ma),ma.forEach(t),al.forEach(t),xGe=i(f),ld=n(f,"H2",{class:!0});var BVe=s(ld);D3=n(BVe,"A",{id:!0,class:!0,href:!0});var d3t=s(D3);Rue=n(d3t,"SPAN",{});var c3t=s(Rue);T(Iy.$$.fragment,c3t),c3t.forEach(t),d3t.forEach(t),THo=i(BVe),Pue=n(BVe,"SPAN",{});var f3t=s(Pue);MHo=r(f3t,"AutoModelForQuestionAnswering"),f3t.forEach(t),BVe.forEach(t),$Ge=i(f),qo=n(f,"DIV",{class:!0});var nl=s(qo);T(Ny.$$.fragment,nl),EHo=i(nl),id=n(nl,"P",{});var poe=s(id);CHo=r(poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QX=n(poe,"A",{href:!0});var m3t=s(QX);wHo=r(m3t,"from_pretrained()"),m3t.forEach(t),AHo=r(poe," class method or the "),HX=n(poe,"A",{href:!0});var g3t=s(HX);LHo=r(g3t,"from_config()"),g3t.forEach(t),yHo=r(poe,` class
method.`),poe.forEach(t),xHo=i(nl),qy=n(nl,"P",{});var IVe=s(qy);$Ho=r(IVe,"This class cannot be instantiated directly using "),Bue=n(IVe,"CODE",{});var h3t=s(Bue);kHo=r(h3t,"__init__()"),h3t.forEach(t),SHo=r(IVe," (throws an error)."),IVe.forEach(t),RHo=i(nl),ht=n(nl,"DIV",{class:!0});var jw=s(ht);T(jy.$$.fragment,jw),PHo=i(jw),Iue=n(jw,"P",{});var p3t=s(Iue);BHo=r(p3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),p3t.forEach(t),IHo=i(jw),dd=n(jw,"P",{});var uoe=s(dd);NHo=r(uoe,`Note:
Loading a model from its configuration file does `),Nue=n(uoe,"STRONG",{});var u3t=s(Nue);qHo=r(u3t,"not"),u3t.forEach(t),jHo=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(uoe,"A",{href:!0});var _3t=s(UX);DHo=r(_3t,"from_pretrained()"),_3t.forEach(t),GHo=r(uoe," to load the model weights."),uoe.forEach(t),OHo=i(jw),T(G3.$$.fragment,jw),jw.forEach(t),VHo=i(nl),no=n(nl,"DIV",{class:!0});var ga=s(no);T(Dy.$$.fragment,ga),XHo=i(ga),que=n(ga,"P",{});var b3t=s(que);zHo=r(b3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),b3t.forEach(t),WHo=i(ga),Ga=n(ga,"P",{});var Dw=s(Ga);QHo=r(Dw,"The model class to instantiate is selected based on the "),jue=n(Dw,"CODE",{});var v3t=s(jue);HHo=r(v3t,"model_type"),v3t.forEach(t),UHo=r(Dw,` property of the config object (either
passed as an argument or loaded from `),Due=n(Dw,"CODE",{});var F3t=s(Due);JHo=r(F3t,"pretrained_model_name_or_path"),F3t.forEach(t),YHo=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=n(Dw,"CODE",{});var T3t=s(Gue);KHo=r(T3t,"pretrained_model_name_or_path"),T3t.forEach(t),ZHo=r(Dw,":"),Dw.forEach(t),eUo=i(ga),V=n(ga,"UL",{});var X=s(V);O3=n(X,"LI",{});var aRe=s(O3);Oue=n(aRe,"STRONG",{});var M3t=s(Oue);oUo=r(M3t,"albert"),M3t.forEach(t),rUo=r(aRe," \u2014 "),JX=n(aRe,"A",{href:!0});var E3t=s(JX);tUo=r(E3t,"AlbertForQuestionAnswering"),E3t.forEach(t),aUo=r(aRe," (ALBERT model)"),aRe.forEach(t),nUo=i(X),V3=n(X,"LI",{});var nRe=s(V3);Vue=n(nRe,"STRONG",{});var C3t=s(Vue);sUo=r(C3t,"bart"),C3t.forEach(t),lUo=r(nRe," \u2014 "),YX=n(nRe,"A",{href:!0});var w3t=s(YX);iUo=r(w3t,"BartForQuestionAnswering"),w3t.forEach(t),dUo=r(nRe," (BART model)"),nRe.forEach(t),cUo=i(X),X3=n(X,"LI",{});var sRe=s(X3);Xue=n(sRe,"STRONG",{});var A3t=s(Xue);fUo=r(A3t,"bert"),A3t.forEach(t),mUo=r(sRe," \u2014 "),KX=n(sRe,"A",{href:!0});var L3t=s(KX);gUo=r(L3t,"BertForQuestionAnswering"),L3t.forEach(t),hUo=r(sRe," (BERT model)"),sRe.forEach(t),pUo=i(X),z3=n(X,"LI",{});var lRe=s(z3);zue=n(lRe,"STRONG",{});var y3t=s(zue);uUo=r(y3t,"big_bird"),y3t.forEach(t),_Uo=r(lRe," \u2014 "),ZX=n(lRe,"A",{href:!0});var x3t=s(ZX);bUo=r(x3t,"BigBirdForQuestionAnswering"),x3t.forEach(t),vUo=r(lRe," (BigBird model)"),lRe.forEach(t),FUo=i(X),W3=n(X,"LI",{});var iRe=s(W3);Wue=n(iRe,"STRONG",{});var $3t=s(Wue);TUo=r($3t,"bigbird_pegasus"),$3t.forEach(t),MUo=r(iRe," \u2014 "),ez=n(iRe,"A",{href:!0});var k3t=s(ez);EUo=r(k3t,"BigBirdPegasusForQuestionAnswering"),k3t.forEach(t),CUo=r(iRe," (BigBird-Pegasus model)"),iRe.forEach(t),wUo=i(X),Q3=n(X,"LI",{});var dRe=s(Q3);Que=n(dRe,"STRONG",{});var S3t=s(Que);AUo=r(S3t,"camembert"),S3t.forEach(t),LUo=r(dRe," \u2014 "),oz=n(dRe,"A",{href:!0});var R3t=s(oz);yUo=r(R3t,"CamembertForQuestionAnswering"),R3t.forEach(t),xUo=r(dRe," (CamemBERT model)"),dRe.forEach(t),$Uo=i(X),H3=n(X,"LI",{});var cRe=s(H3);Hue=n(cRe,"STRONG",{});var P3t=s(Hue);kUo=r(P3t,"canine"),P3t.forEach(t),SUo=r(cRe," \u2014 "),rz=n(cRe,"A",{href:!0});var B3t=s(rz);RUo=r(B3t,"CanineForQuestionAnswering"),B3t.forEach(t),PUo=r(cRe," (CANINE model)"),cRe.forEach(t),BUo=i(X),U3=n(X,"LI",{});var fRe=s(U3);Uue=n(fRe,"STRONG",{});var I3t=s(Uue);IUo=r(I3t,"convbert"),I3t.forEach(t),NUo=r(fRe," \u2014 "),tz=n(fRe,"A",{href:!0});var N3t=s(tz);qUo=r(N3t,"ConvBertForQuestionAnswering"),N3t.forEach(t),jUo=r(fRe," (ConvBERT model)"),fRe.forEach(t),DUo=i(X),J3=n(X,"LI",{});var mRe=s(J3);Jue=n(mRe,"STRONG",{});var q3t=s(Jue);GUo=r(q3t,"data2vec-text"),q3t.forEach(t),OUo=r(mRe," \u2014 "),az=n(mRe,"A",{href:!0});var j3t=s(az);VUo=r(j3t,"Data2VecTextForQuestionAnswering"),j3t.forEach(t),XUo=r(mRe," (Data2VecText model)"),mRe.forEach(t),zUo=i(X),Y3=n(X,"LI",{});var gRe=s(Y3);Yue=n(gRe,"STRONG",{});var D3t=s(Yue);WUo=r(D3t,"deberta"),D3t.forEach(t),QUo=r(gRe," \u2014 "),nz=n(gRe,"A",{href:!0});var G3t=s(nz);HUo=r(G3t,"DebertaForQuestionAnswering"),G3t.forEach(t),UUo=r(gRe," (DeBERTa model)"),gRe.forEach(t),JUo=i(X),K3=n(X,"LI",{});var hRe=s(K3);Kue=n(hRe,"STRONG",{});var O3t=s(Kue);YUo=r(O3t,"deberta-v2"),O3t.forEach(t),KUo=r(hRe," \u2014 "),sz=n(hRe,"A",{href:!0});var V3t=s(sz);ZUo=r(V3t,"DebertaV2ForQuestionAnswering"),V3t.forEach(t),eJo=r(hRe," (DeBERTa-v2 model)"),hRe.forEach(t),oJo=i(X),Z3=n(X,"LI",{});var pRe=s(Z3);Zue=n(pRe,"STRONG",{});var X3t=s(Zue);rJo=r(X3t,"distilbert"),X3t.forEach(t),tJo=r(pRe," \u2014 "),lz=n(pRe,"A",{href:!0});var z3t=s(lz);aJo=r(z3t,"DistilBertForQuestionAnswering"),z3t.forEach(t),nJo=r(pRe," (DistilBERT model)"),pRe.forEach(t),sJo=i(X),e0=n(X,"LI",{});var uRe=s(e0);e_e=n(uRe,"STRONG",{});var W3t=s(e_e);lJo=r(W3t,"electra"),W3t.forEach(t),iJo=r(uRe," \u2014 "),iz=n(uRe,"A",{href:!0});var Q3t=s(iz);dJo=r(Q3t,"ElectraForQuestionAnswering"),Q3t.forEach(t),cJo=r(uRe," (ELECTRA model)"),uRe.forEach(t),fJo=i(X),o0=n(X,"LI",{});var _Re=s(o0);o_e=n(_Re,"STRONG",{});var H3t=s(o_e);mJo=r(H3t,"flaubert"),H3t.forEach(t),gJo=r(_Re," \u2014 "),dz=n(_Re,"A",{href:!0});var U3t=s(dz);hJo=r(U3t,"FlaubertForQuestionAnsweringSimple"),U3t.forEach(t),pJo=r(_Re," (FlauBERT model)"),_Re.forEach(t),uJo=i(X),r0=n(X,"LI",{});var bRe=s(r0);r_e=n(bRe,"STRONG",{});var J3t=s(r_e);_Jo=r(J3t,"fnet"),J3t.forEach(t),bJo=r(bRe," \u2014 "),cz=n(bRe,"A",{href:!0});var Y3t=s(cz);vJo=r(Y3t,"FNetForQuestionAnswering"),Y3t.forEach(t),FJo=r(bRe," (FNet model)"),bRe.forEach(t),TJo=i(X),t0=n(X,"LI",{});var vRe=s(t0);t_e=n(vRe,"STRONG",{});var K3t=s(t_e);MJo=r(K3t,"funnel"),K3t.forEach(t),EJo=r(vRe," \u2014 "),fz=n(vRe,"A",{href:!0});var Z3t=s(fz);CJo=r(Z3t,"FunnelForQuestionAnswering"),Z3t.forEach(t),wJo=r(vRe," (Funnel Transformer model)"),vRe.forEach(t),AJo=i(X),a0=n(X,"LI",{});var FRe=s(a0);a_e=n(FRe,"STRONG",{});var e0t=s(a_e);LJo=r(e0t,"gptj"),e0t.forEach(t),yJo=r(FRe," \u2014 "),mz=n(FRe,"A",{href:!0});var o0t=s(mz);xJo=r(o0t,"GPTJForQuestionAnswering"),o0t.forEach(t),$Jo=r(FRe," (GPT-J model)"),FRe.forEach(t),kJo=i(X),n0=n(X,"LI",{});var TRe=s(n0);n_e=n(TRe,"STRONG",{});var r0t=s(n_e);SJo=r(r0t,"ibert"),r0t.forEach(t),RJo=r(TRe," \u2014 "),gz=n(TRe,"A",{href:!0});var t0t=s(gz);PJo=r(t0t,"IBertForQuestionAnswering"),t0t.forEach(t),BJo=r(TRe," (I-BERT model)"),TRe.forEach(t),IJo=i(X),s0=n(X,"LI",{});var MRe=s(s0);s_e=n(MRe,"STRONG",{});var a0t=s(s_e);NJo=r(a0t,"layoutlmv2"),a0t.forEach(t),qJo=r(MRe," \u2014 "),hz=n(MRe,"A",{href:!0});var n0t=s(hz);jJo=r(n0t,"LayoutLMv2ForQuestionAnswering"),n0t.forEach(t),DJo=r(MRe," (LayoutLMv2 model)"),MRe.forEach(t),GJo=i(X),l0=n(X,"LI",{});var ERe=s(l0);l_e=n(ERe,"STRONG",{});var s0t=s(l_e);OJo=r(s0t,"layoutlmv3"),s0t.forEach(t),VJo=r(ERe," \u2014 "),pz=n(ERe,"A",{href:!0});var l0t=s(pz);XJo=r(l0t,"LayoutLMv3ForQuestionAnswering"),l0t.forEach(t),zJo=r(ERe," (LayoutLMv3 model)"),ERe.forEach(t),WJo=i(X),i0=n(X,"LI",{});var CRe=s(i0);i_e=n(CRe,"STRONG",{});var i0t=s(i_e);QJo=r(i0t,"led"),i0t.forEach(t),HJo=r(CRe," \u2014 "),uz=n(CRe,"A",{href:!0});var d0t=s(uz);UJo=r(d0t,"LEDForQuestionAnswering"),d0t.forEach(t),JJo=r(CRe," (LED model)"),CRe.forEach(t),YJo=i(X),d0=n(X,"LI",{});var wRe=s(d0);d_e=n(wRe,"STRONG",{});var c0t=s(d_e);KJo=r(c0t,"longformer"),c0t.forEach(t),ZJo=r(wRe," \u2014 "),_z=n(wRe,"A",{href:!0});var f0t=s(_z);eYo=r(f0t,"LongformerForQuestionAnswering"),f0t.forEach(t),oYo=r(wRe," (Longformer model)"),wRe.forEach(t),rYo=i(X),c0=n(X,"LI",{});var ARe=s(c0);c_e=n(ARe,"STRONG",{});var m0t=s(c_e);tYo=r(m0t,"lxmert"),m0t.forEach(t),aYo=r(ARe," \u2014 "),bz=n(ARe,"A",{href:!0});var g0t=s(bz);nYo=r(g0t,"LxmertForQuestionAnswering"),g0t.forEach(t),sYo=r(ARe," (LXMERT model)"),ARe.forEach(t),lYo=i(X),f0=n(X,"LI",{});var LRe=s(f0);f_e=n(LRe,"STRONG",{});var h0t=s(f_e);iYo=r(h0t,"mbart"),h0t.forEach(t),dYo=r(LRe," \u2014 "),vz=n(LRe,"A",{href:!0});var p0t=s(vz);cYo=r(p0t,"MBartForQuestionAnswering"),p0t.forEach(t),fYo=r(LRe," (mBART model)"),LRe.forEach(t),mYo=i(X),m0=n(X,"LI",{});var yRe=s(m0);m_e=n(yRe,"STRONG",{});var u0t=s(m_e);gYo=r(u0t,"megatron-bert"),u0t.forEach(t),hYo=r(yRe," \u2014 "),Fz=n(yRe,"A",{href:!0});var _0t=s(Fz);pYo=r(_0t,"MegatronBertForQuestionAnswering"),_0t.forEach(t),uYo=r(yRe," (Megatron-BERT model)"),yRe.forEach(t),_Yo=i(X),g0=n(X,"LI",{});var xRe=s(g0);g_e=n(xRe,"STRONG",{});var b0t=s(g_e);bYo=r(b0t,"mobilebert"),b0t.forEach(t),vYo=r(xRe," \u2014 "),Tz=n(xRe,"A",{href:!0});var v0t=s(Tz);FYo=r(v0t,"MobileBertForQuestionAnswering"),v0t.forEach(t),TYo=r(xRe," (MobileBERT model)"),xRe.forEach(t),MYo=i(X),h0=n(X,"LI",{});var $Re=s(h0);h_e=n($Re,"STRONG",{});var F0t=s(h_e);EYo=r(F0t,"mpnet"),F0t.forEach(t),CYo=r($Re," \u2014 "),Mz=n($Re,"A",{href:!0});var T0t=s(Mz);wYo=r(T0t,"MPNetForQuestionAnswering"),T0t.forEach(t),AYo=r($Re," (MPNet model)"),$Re.forEach(t),LYo=i(X),p0=n(X,"LI",{});var kRe=s(p0);p_e=n(kRe,"STRONG",{});var M0t=s(p_e);yYo=r(M0t,"nystromformer"),M0t.forEach(t),xYo=r(kRe," \u2014 "),Ez=n(kRe,"A",{href:!0});var E0t=s(Ez);$Yo=r(E0t,"NystromformerForQuestionAnswering"),E0t.forEach(t),kYo=r(kRe," (Nystr\xF6mformer model)"),kRe.forEach(t),SYo=i(X),u0=n(X,"LI",{});var SRe=s(u0);u_e=n(SRe,"STRONG",{});var C0t=s(u_e);RYo=r(C0t,"qdqbert"),C0t.forEach(t),PYo=r(SRe," \u2014 "),Cz=n(SRe,"A",{href:!0});var w0t=s(Cz);BYo=r(w0t,"QDQBertForQuestionAnswering"),w0t.forEach(t),IYo=r(SRe," (QDQBert model)"),SRe.forEach(t),NYo=i(X),_0=n(X,"LI",{});var RRe=s(_0);__e=n(RRe,"STRONG",{});var A0t=s(__e);qYo=r(A0t,"reformer"),A0t.forEach(t),jYo=r(RRe," \u2014 "),wz=n(RRe,"A",{href:!0});var L0t=s(wz);DYo=r(L0t,"ReformerForQuestionAnswering"),L0t.forEach(t),GYo=r(RRe," (Reformer model)"),RRe.forEach(t),OYo=i(X),b0=n(X,"LI",{});var PRe=s(b0);b_e=n(PRe,"STRONG",{});var y0t=s(b_e);VYo=r(y0t,"rembert"),y0t.forEach(t),XYo=r(PRe," \u2014 "),Az=n(PRe,"A",{href:!0});var x0t=s(Az);zYo=r(x0t,"RemBertForQuestionAnswering"),x0t.forEach(t),WYo=r(PRe," (RemBERT model)"),PRe.forEach(t),QYo=i(X),v0=n(X,"LI",{});var BRe=s(v0);v_e=n(BRe,"STRONG",{});var $0t=s(v_e);HYo=r($0t,"roberta"),$0t.forEach(t),UYo=r(BRe," \u2014 "),Lz=n(BRe,"A",{href:!0});var k0t=s(Lz);JYo=r(k0t,"RobertaForQuestionAnswering"),k0t.forEach(t),YYo=r(BRe," (RoBERTa model)"),BRe.forEach(t),KYo=i(X),F0=n(X,"LI",{});var IRe=s(F0);F_e=n(IRe,"STRONG",{});var S0t=s(F_e);ZYo=r(S0t,"roformer"),S0t.forEach(t),eKo=r(IRe," \u2014 "),yz=n(IRe,"A",{href:!0});var R0t=s(yz);oKo=r(R0t,"RoFormerForQuestionAnswering"),R0t.forEach(t),rKo=r(IRe," (RoFormer model)"),IRe.forEach(t),tKo=i(X),T0=n(X,"LI",{});var NRe=s(T0);T_e=n(NRe,"STRONG",{});var P0t=s(T_e);aKo=r(P0t,"splinter"),P0t.forEach(t),nKo=r(NRe," \u2014 "),xz=n(NRe,"A",{href:!0});var B0t=s(xz);sKo=r(B0t,"SplinterForQuestionAnswering"),B0t.forEach(t),lKo=r(NRe," (Splinter model)"),NRe.forEach(t),iKo=i(X),M0=n(X,"LI",{});var qRe=s(M0);M_e=n(qRe,"STRONG",{});var I0t=s(M_e);dKo=r(I0t,"squeezebert"),I0t.forEach(t),cKo=r(qRe," \u2014 "),$z=n(qRe,"A",{href:!0});var N0t=s($z);fKo=r(N0t,"SqueezeBertForQuestionAnswering"),N0t.forEach(t),mKo=r(qRe," (SqueezeBERT model)"),qRe.forEach(t),gKo=i(X),E0=n(X,"LI",{});var jRe=s(E0);E_e=n(jRe,"STRONG",{});var q0t=s(E_e);hKo=r(q0t,"xlm"),q0t.forEach(t),pKo=r(jRe," \u2014 "),kz=n(jRe,"A",{href:!0});var j0t=s(kz);uKo=r(j0t,"XLMForQuestionAnsweringSimple"),j0t.forEach(t),_Ko=r(jRe," (XLM model)"),jRe.forEach(t),bKo=i(X),C0=n(X,"LI",{});var DRe=s(C0);C_e=n(DRe,"STRONG",{});var D0t=s(C_e);vKo=r(D0t,"xlm-roberta"),D0t.forEach(t),FKo=r(DRe," \u2014 "),Sz=n(DRe,"A",{href:!0});var G0t=s(Sz);TKo=r(G0t,"XLMRobertaForQuestionAnswering"),G0t.forEach(t),MKo=r(DRe," (XLM-RoBERTa model)"),DRe.forEach(t),EKo=i(X),w0=n(X,"LI",{});var GRe=s(w0);w_e=n(GRe,"STRONG",{});var O0t=s(w_e);CKo=r(O0t,"xlm-roberta-xl"),O0t.forEach(t),wKo=r(GRe," \u2014 "),Rz=n(GRe,"A",{href:!0});var V0t=s(Rz);AKo=r(V0t,"XLMRobertaXLForQuestionAnswering"),V0t.forEach(t),LKo=r(GRe," (XLM-RoBERTa-XL model)"),GRe.forEach(t),yKo=i(X),A0=n(X,"LI",{});var ORe=s(A0);A_e=n(ORe,"STRONG",{});var X0t=s(A_e);xKo=r(X0t,"xlnet"),X0t.forEach(t),$Ko=r(ORe," \u2014 "),Pz=n(ORe,"A",{href:!0});var z0t=s(Pz);kKo=r(z0t,"XLNetForQuestionAnsweringSimple"),z0t.forEach(t),SKo=r(ORe," (XLNet model)"),ORe.forEach(t),RKo=i(X),L0=n(X,"LI",{});var VRe=s(L0);L_e=n(VRe,"STRONG",{});var W0t=s(L_e);PKo=r(W0t,"yoso"),W0t.forEach(t),BKo=r(VRe," \u2014 "),Bz=n(VRe,"A",{href:!0});var Q0t=s(Bz);IKo=r(Q0t,"YosoForQuestionAnswering"),Q0t.forEach(t),NKo=r(VRe," (YOSO model)"),VRe.forEach(t),X.forEach(t),qKo=i(ga),y0=n(ga,"P",{});var XRe=s(y0);jKo=r(XRe,"The model is set in evaluation mode by default using "),y_e=n(XRe,"CODE",{});var H0t=s(y_e);DKo=r(H0t,"model.eval()"),H0t.forEach(t),GKo=r(XRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x_e=n(XRe,"CODE",{});var U0t=s(x_e);OKo=r(U0t,"model.train()"),U0t.forEach(t),XRe.forEach(t),VKo=i(ga),T(x0.$$.fragment,ga),ga.forEach(t),nl.forEach(t),kGe=i(f),cd=n(f,"H2",{class:!0});var NVe=s(cd);$0=n(NVe,"A",{id:!0,class:!0,href:!0});var J0t=s($0);$_e=n(J0t,"SPAN",{});var Y0t=s($_e);T(Gy.$$.fragment,Y0t),Y0t.forEach(t),J0t.forEach(t),XKo=i(NVe),k_e=n(NVe,"SPAN",{});var K0t=s(k_e);zKo=r(K0t,"AutoModelForTableQuestionAnswering"),K0t.forEach(t),NVe.forEach(t),SGe=i(f),jo=n(f,"DIV",{class:!0});var sl=s(jo);T(Oy.$$.fragment,sl),WKo=i(sl),fd=n(sl,"P",{});var _oe=s(fd);QKo=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Iz=n(_oe,"A",{href:!0});var Z0t=s(Iz);HKo=r(Z0t,"from_pretrained()"),Z0t.forEach(t),UKo=r(_oe," class method or the "),Nz=n(_oe,"A",{href:!0});var eFt=s(Nz);JKo=r(eFt,"from_config()"),eFt.forEach(t),YKo=r(_oe,` class
method.`),_oe.forEach(t),KKo=i(sl),Vy=n(sl,"P",{});var qVe=s(Vy);ZKo=r(qVe,"This class cannot be instantiated directly using "),S_e=n(qVe,"CODE",{});var oFt=s(S_e);eZo=r(oFt,"__init__()"),oFt.forEach(t),oZo=r(qVe," (throws an error)."),qVe.forEach(t),rZo=i(sl),pt=n(sl,"DIV",{class:!0});var Gw=s(pt);T(Xy.$$.fragment,Gw),tZo=i(Gw),R_e=n(Gw,"P",{});var rFt=s(R_e);aZo=r(rFt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rFt.forEach(t),nZo=i(Gw),md=n(Gw,"P",{});var boe=s(md);sZo=r(boe,`Note:
Loading a model from its configuration file does `),P_e=n(boe,"STRONG",{});var tFt=s(P_e);lZo=r(tFt,"not"),tFt.forEach(t),iZo=r(boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=n(boe,"A",{href:!0});var aFt=s(qz);dZo=r(aFt,"from_pretrained()"),aFt.forEach(t),cZo=r(boe," to load the model weights."),boe.forEach(t),fZo=i(Gw),T(k0.$$.fragment,Gw),Gw.forEach(t),mZo=i(sl),so=n(sl,"DIV",{class:!0});var ha=s(so);T(zy.$$.fragment,ha),gZo=i(ha),B_e=n(ha,"P",{});var nFt=s(B_e);hZo=r(nFt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),nFt.forEach(t),pZo=i(ha),Oa=n(ha,"P",{});var Ow=s(Oa);uZo=r(Ow,"The model class to instantiate is selected based on the "),I_e=n(Ow,"CODE",{});var sFt=s(I_e);_Zo=r(sFt,"model_type"),sFt.forEach(t),bZo=r(Ow,` property of the config object (either
passed as an argument or loaded from `),N_e=n(Ow,"CODE",{});var lFt=s(N_e);vZo=r(lFt,"pretrained_model_name_or_path"),lFt.forEach(t),FZo=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=n(Ow,"CODE",{});var iFt=s(q_e);TZo=r(iFt,"pretrained_model_name_or_path"),iFt.forEach(t),MZo=r(Ow,":"),Ow.forEach(t),EZo=i(ha),j_e=n(ha,"UL",{});var dFt=s(j_e);S0=n(dFt,"LI",{});var zRe=s(S0);D_e=n(zRe,"STRONG",{});var cFt=s(D_e);CZo=r(cFt,"tapas"),cFt.forEach(t),wZo=r(zRe," \u2014 "),jz=n(zRe,"A",{href:!0});var fFt=s(jz);AZo=r(fFt,"TapasForQuestionAnswering"),fFt.forEach(t),LZo=r(zRe," (TAPAS model)"),zRe.forEach(t),dFt.forEach(t),yZo=i(ha),R0=n(ha,"P",{});var WRe=s(R0);xZo=r(WRe,"The model is set in evaluation mode by default using "),G_e=n(WRe,"CODE",{});var mFt=s(G_e);$Zo=r(mFt,"model.eval()"),mFt.forEach(t),kZo=r(WRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=n(WRe,"CODE",{});var gFt=s(O_e);SZo=r(gFt,"model.train()"),gFt.forEach(t),WRe.forEach(t),RZo=i(ha),T(P0.$$.fragment,ha),ha.forEach(t),sl.forEach(t),RGe=i(f),gd=n(f,"H2",{class:!0});var jVe=s(gd);B0=n(jVe,"A",{id:!0,class:!0,href:!0});var hFt=s(B0);V_e=n(hFt,"SPAN",{});var pFt=s(V_e);T(Wy.$$.fragment,pFt),pFt.forEach(t),hFt.forEach(t),PZo=i(jVe),X_e=n(jVe,"SPAN",{});var uFt=s(X_e);BZo=r(uFt,"AutoModelForImageClassification"),uFt.forEach(t),jVe.forEach(t),PGe=i(f),Do=n(f,"DIV",{class:!0});var ll=s(Do);T(Qy.$$.fragment,ll),IZo=i(ll),hd=n(ll,"P",{});var voe=s(hd);NZo=r(voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Dz=n(voe,"A",{href:!0});var _Ft=s(Dz);qZo=r(_Ft,"from_pretrained()"),_Ft.forEach(t),jZo=r(voe," class method or the "),Gz=n(voe,"A",{href:!0});var bFt=s(Gz);DZo=r(bFt,"from_config()"),bFt.forEach(t),GZo=r(voe,` class
method.`),voe.forEach(t),OZo=i(ll),Hy=n(ll,"P",{});var DVe=s(Hy);VZo=r(DVe,"This class cannot be instantiated directly using "),z_e=n(DVe,"CODE",{});var vFt=s(z_e);XZo=r(vFt,"__init__()"),vFt.forEach(t),zZo=r(DVe," (throws an error)."),DVe.forEach(t),WZo=i(ll),ut=n(ll,"DIV",{class:!0});var Vw=s(ut);T(Uy.$$.fragment,Vw),QZo=i(Vw),W_e=n(Vw,"P",{});var FFt=s(W_e);HZo=r(FFt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),FFt.forEach(t),UZo=i(Vw),pd=n(Vw,"P",{});var Foe=s(pd);JZo=r(Foe,`Note:
Loading a model from its configuration file does `),Q_e=n(Foe,"STRONG",{});var TFt=s(Q_e);YZo=r(TFt,"not"),TFt.forEach(t),KZo=r(Foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=n(Foe,"A",{href:!0});var MFt=s(Oz);ZZo=r(MFt,"from_pretrained()"),MFt.forEach(t),eer=r(Foe," to load the model weights."),Foe.forEach(t),oer=i(Vw),T(I0.$$.fragment,Vw),Vw.forEach(t),rer=i(ll),lo=n(ll,"DIV",{class:!0});var pa=s(lo);T(Jy.$$.fragment,pa),ter=i(pa),H_e=n(pa,"P",{});var EFt=s(H_e);aer=r(EFt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),EFt.forEach(t),ner=i(pa),Va=n(pa,"P",{});var Xw=s(Va);ser=r(Xw,"The model class to instantiate is selected based on the "),U_e=n(Xw,"CODE",{});var CFt=s(U_e);ler=r(CFt,"model_type"),CFt.forEach(t),ier=r(Xw,` property of the config object (either
passed as an argument or loaded from `),J_e=n(Xw,"CODE",{});var wFt=s(J_e);der=r(wFt,"pretrained_model_name_or_path"),wFt.forEach(t),cer=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=n(Xw,"CODE",{});var AFt=s(Y_e);fer=r(AFt,"pretrained_model_name_or_path"),AFt.forEach(t),mer=r(Xw,":"),Xw.forEach(t),ger=i(pa),Fe=n(pa,"UL",{});var Te=s(Fe);N0=n(Te,"LI",{});var QRe=s(N0);K_e=n(QRe,"STRONG",{});var LFt=s(K_e);her=r(LFt,"beit"),LFt.forEach(t),per=r(QRe," \u2014 "),Vz=n(QRe,"A",{href:!0});var yFt=s(Vz);uer=r(yFt,"BeitForImageClassification"),yFt.forEach(t),_er=r(QRe," (BEiT model)"),QRe.forEach(t),ber=i(Te),q0=n(Te,"LI",{});var HRe=s(q0);Z_e=n(HRe,"STRONG",{});var xFt=s(Z_e);ver=r(xFt,"convnext"),xFt.forEach(t),Fer=r(HRe," \u2014 "),Xz=n(HRe,"A",{href:!0});var $Ft=s(Xz);Ter=r($Ft,"ConvNextForImageClassification"),$Ft.forEach(t),Mer=r(HRe," (ConvNeXT model)"),HRe.forEach(t),Eer=i(Te),j0=n(Te,"LI",{});var URe=s(j0);e1e=n(URe,"STRONG",{});var kFt=s(e1e);Cer=r(kFt,"cvt"),kFt.forEach(t),wer=r(URe," \u2014 "),zz=n(URe,"A",{href:!0});var SFt=s(zz);Aer=r(SFt,"CvtForImageClassification"),SFt.forEach(t),Ler=r(URe," (CvT model)"),URe.forEach(t),yer=i(Te),D0=n(Te,"LI",{});var JRe=s(D0);o1e=n(JRe,"STRONG",{});var RFt=s(o1e);xer=r(RFt,"data2vec-vision"),RFt.forEach(t),$er=r(JRe," \u2014 "),Wz=n(JRe,"A",{href:!0});var PFt=s(Wz);ker=r(PFt,"Data2VecVisionForImageClassification"),PFt.forEach(t),Ser=r(JRe," (Data2VecVision model)"),JRe.forEach(t),Rer=i(Te),Os=n(Te,"LI",{});var Ok=s(Os);r1e=n(Ok,"STRONG",{});var BFt=s(r1e);Per=r(BFt,"deit"),BFt.forEach(t),Ber=r(Ok," \u2014 "),Qz=n(Ok,"A",{href:!0});var IFt=s(Qz);Ier=r(IFt,"DeiTForImageClassification"),IFt.forEach(t),Ner=r(Ok," or "),Hz=n(Ok,"A",{href:!0});var NFt=s(Hz);qer=r(NFt,"DeiTForImageClassificationWithTeacher"),NFt.forEach(t),jer=r(Ok," (DeiT model)"),Ok.forEach(t),Der=i(Te),G0=n(Te,"LI",{});var YRe=s(G0);t1e=n(YRe,"STRONG",{});var qFt=s(t1e);Ger=r(qFt,"imagegpt"),qFt.forEach(t),Oer=r(YRe," \u2014 "),Uz=n(YRe,"A",{href:!0});var jFt=s(Uz);Ver=r(jFt,"ImageGPTForImageClassification"),jFt.forEach(t),Xer=r(YRe," (ImageGPT model)"),YRe.forEach(t),zer=i(Te),Vs=n(Te,"LI",{});var Vk=s(Vs);a1e=n(Vk,"STRONG",{});var DFt=s(a1e);Wer=r(DFt,"levit"),DFt.forEach(t),Qer=r(Vk," \u2014 "),Jz=n(Vk,"A",{href:!0});var GFt=s(Jz);Her=r(GFt,"LevitForImageClassification"),GFt.forEach(t),Uer=r(Vk," or "),Yz=n(Vk,"A",{href:!0});var OFt=s(Yz);Jer=r(OFt,"LevitForImageClassificationWithTeacher"),OFt.forEach(t),Yer=r(Vk," (LeViT model)"),Vk.forEach(t),Ker=i(Te),_t=n(Te,"LI",{});var Af=s(_t);n1e=n(Af,"STRONG",{});var VFt=s(n1e);Zer=r(VFt,"perceiver"),VFt.forEach(t),eor=r(Af," \u2014 "),Kz=n(Af,"A",{href:!0});var XFt=s(Kz);oor=r(XFt,"PerceiverForImageClassificationLearned"),XFt.forEach(t),ror=r(Af," or "),Zz=n(Af,"A",{href:!0});var zFt=s(Zz);tor=r(zFt,"PerceiverForImageClassificationFourier"),zFt.forEach(t),aor=r(Af," or "),eW=n(Af,"A",{href:!0});var WFt=s(eW);nor=r(WFt,"PerceiverForImageClassificationConvProcessing"),WFt.forEach(t),sor=r(Af," (Perceiver model)"),Af.forEach(t),lor=i(Te),O0=n(Te,"LI",{});var KRe=s(O0);s1e=n(KRe,"STRONG",{});var QFt=s(s1e);ior=r(QFt,"poolformer"),QFt.forEach(t),dor=r(KRe," \u2014 "),oW=n(KRe,"A",{href:!0});var HFt=s(oW);cor=r(HFt,"PoolFormerForImageClassification"),HFt.forEach(t),mor=r(KRe," (PoolFormer model)"),KRe.forEach(t),gor=i(Te),V0=n(Te,"LI",{});var ZRe=s(V0);l1e=n(ZRe,"STRONG",{});var UFt=s(l1e);hor=r(UFt,"regnet"),UFt.forEach(t),por=r(ZRe," \u2014 "),rW=n(ZRe,"A",{href:!0});var JFt=s(rW);uor=r(JFt,"RegNetForImageClassification"),JFt.forEach(t),_or=r(ZRe," (RegNet model)"),ZRe.forEach(t),bor=i(Te),X0=n(Te,"LI",{});var ePe=s(X0);i1e=n(ePe,"STRONG",{});var YFt=s(i1e);vor=r(YFt,"resnet"),YFt.forEach(t),For=r(ePe," \u2014 "),tW=n(ePe,"A",{href:!0});var KFt=s(tW);Tor=r(KFt,"ResNetForImageClassification"),KFt.forEach(t),Mor=r(ePe," (ResNet model)"),ePe.forEach(t),Eor=i(Te),z0=n(Te,"LI",{});var oPe=s(z0);d1e=n(oPe,"STRONG",{});var ZFt=s(d1e);Cor=r(ZFt,"segformer"),ZFt.forEach(t),wor=r(oPe," \u2014 "),aW=n(oPe,"A",{href:!0});var e6t=s(aW);Aor=r(e6t,"SegformerForImageClassification"),e6t.forEach(t),Lor=r(oPe," (SegFormer model)"),oPe.forEach(t),yor=i(Te),W0=n(Te,"LI",{});var rPe=s(W0);c1e=n(rPe,"STRONG",{});var o6t=s(c1e);xor=r(o6t,"swin"),o6t.forEach(t),$or=r(rPe," \u2014 "),nW=n(rPe,"A",{href:!0});var r6t=s(nW);kor=r(r6t,"SwinForImageClassification"),r6t.forEach(t),Sor=r(rPe," (Swin Transformer model)"),rPe.forEach(t),Ror=i(Te),Q0=n(Te,"LI",{});var tPe=s(Q0);f1e=n(tPe,"STRONG",{});var t6t=s(f1e);Por=r(t6t,"van"),t6t.forEach(t),Bor=r(tPe," \u2014 "),sW=n(tPe,"A",{href:!0});var a6t=s(sW);Ior=r(a6t,"VanForImageClassification"),a6t.forEach(t),Nor=r(tPe," (VAN model)"),tPe.forEach(t),qor=i(Te),H0=n(Te,"LI",{});var aPe=s(H0);m1e=n(aPe,"STRONG",{});var n6t=s(m1e);jor=r(n6t,"vit"),n6t.forEach(t),Dor=r(aPe," \u2014 "),lW=n(aPe,"A",{href:!0});var s6t=s(lW);Gor=r(s6t,"ViTForImageClassification"),s6t.forEach(t),Oor=r(aPe," (ViT model)"),aPe.forEach(t),Te.forEach(t),Vor=i(pa),U0=n(pa,"P",{});var nPe=s(U0);Xor=r(nPe,"The model is set in evaluation mode by default using "),g1e=n(nPe,"CODE",{});var l6t=s(g1e);zor=r(l6t,"model.eval()"),l6t.forEach(t),Wor=r(nPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h1e=n(nPe,"CODE",{});var i6t=s(h1e);Qor=r(i6t,"model.train()"),i6t.forEach(t),nPe.forEach(t),Hor=i(pa),T(J0.$$.fragment,pa),pa.forEach(t),ll.forEach(t),BGe=i(f),ud=n(f,"H2",{class:!0});var GVe=s(ud);Y0=n(GVe,"A",{id:!0,class:!0,href:!0});var d6t=s(Y0);p1e=n(d6t,"SPAN",{});var c6t=s(p1e);T(Yy.$$.fragment,c6t),c6t.forEach(t),d6t.forEach(t),Uor=i(GVe),u1e=n(GVe,"SPAN",{});var f6t=s(u1e);Jor=r(f6t,"AutoModelForVision2Seq"),f6t.forEach(t),GVe.forEach(t),IGe=i(f),Go=n(f,"DIV",{class:!0});var il=s(Go);T(Ky.$$.fragment,il),Yor=i(il),_d=n(il,"P",{});var Toe=s(_d);Kor=r(Toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iW=n(Toe,"A",{href:!0});var m6t=s(iW);Zor=r(m6t,"from_pretrained()"),m6t.forEach(t),err=r(Toe," class method or the "),dW=n(Toe,"A",{href:!0});var g6t=s(dW);orr=r(g6t,"from_config()"),g6t.forEach(t),rrr=r(Toe,` class
method.`),Toe.forEach(t),trr=i(il),Zy=n(il,"P",{});var OVe=s(Zy);arr=r(OVe,"This class cannot be instantiated directly using "),_1e=n(OVe,"CODE",{});var h6t=s(_1e);nrr=r(h6t,"__init__()"),h6t.forEach(t),srr=r(OVe," (throws an error)."),OVe.forEach(t),lrr=i(il),bt=n(il,"DIV",{class:!0});var zw=s(bt);T(e8.$$.fragment,zw),irr=i(zw),b1e=n(zw,"P",{});var p6t=s(b1e);drr=r(p6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),p6t.forEach(t),crr=i(zw),bd=n(zw,"P",{});var Moe=s(bd);frr=r(Moe,`Note:
Loading a model from its configuration file does `),v1e=n(Moe,"STRONG",{});var u6t=s(v1e);mrr=r(u6t,"not"),u6t.forEach(t),grr=r(Moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=n(Moe,"A",{href:!0});var _6t=s(cW);hrr=r(_6t,"from_pretrained()"),_6t.forEach(t),prr=r(Moe," to load the model weights."),Moe.forEach(t),urr=i(zw),T(K0.$$.fragment,zw),zw.forEach(t),_rr=i(il),io=n(il,"DIV",{class:!0});var ua=s(io);T(o8.$$.fragment,ua),brr=i(ua),F1e=n(ua,"P",{});var b6t=s(F1e);vrr=r(b6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),b6t.forEach(t),Frr=i(ua),Xa=n(ua,"P",{});var Ww=s(Xa);Trr=r(Ww,"The model class to instantiate is selected based on the "),T1e=n(Ww,"CODE",{});var v6t=s(T1e);Mrr=r(v6t,"model_type"),v6t.forEach(t),Err=r(Ww,` property of the config object (either
passed as an argument or loaded from `),M1e=n(Ww,"CODE",{});var F6t=s(M1e);Crr=r(F6t,"pretrained_model_name_or_path"),F6t.forEach(t),wrr=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=n(Ww,"CODE",{});var T6t=s(E1e);Arr=r(T6t,"pretrained_model_name_or_path"),T6t.forEach(t),Lrr=r(Ww,":"),Ww.forEach(t),yrr=i(ua),C1e=n(ua,"UL",{});var M6t=s(C1e);Z0=n(M6t,"LI",{});var sPe=s(Z0);w1e=n(sPe,"STRONG",{});var E6t=s(w1e);xrr=r(E6t,"vision-encoder-decoder"),E6t.forEach(t),$rr=r(sPe," \u2014 "),fW=n(sPe,"A",{href:!0});var C6t=s(fW);krr=r(C6t,"VisionEncoderDecoderModel"),C6t.forEach(t),Srr=r(sPe," (Vision Encoder decoder model)"),sPe.forEach(t),M6t.forEach(t),Rrr=i(ua),eF=n(ua,"P",{});var lPe=s(eF);Prr=r(lPe,"The model is set in evaluation mode by default using "),A1e=n(lPe,"CODE",{});var w6t=s(A1e);Brr=r(w6t,"model.eval()"),w6t.forEach(t),Irr=r(lPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L1e=n(lPe,"CODE",{});var A6t=s(L1e);Nrr=r(A6t,"model.train()"),A6t.forEach(t),lPe.forEach(t),qrr=i(ua),T(oF.$$.fragment,ua),ua.forEach(t),il.forEach(t),NGe=i(f),vd=n(f,"H2",{class:!0});var VVe=s(vd);rF=n(VVe,"A",{id:!0,class:!0,href:!0});var L6t=s(rF);y1e=n(L6t,"SPAN",{});var y6t=s(y1e);T(r8.$$.fragment,y6t),y6t.forEach(t),L6t.forEach(t),jrr=i(VVe),x1e=n(VVe,"SPAN",{});var x6t=s(x1e);Drr=r(x6t,"AutoModelForVisualQuestionAnswering"),x6t.forEach(t),VVe.forEach(t),qGe=i(f),Oo=n(f,"DIV",{class:!0});var dl=s(Oo);T(t8.$$.fragment,dl),Grr=i(dl),Fd=n(dl,"P",{});var Eoe=s(Fd);Orr=r(Eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),mW=n(Eoe,"A",{href:!0});var $6t=s(mW);Vrr=r($6t,"from_pretrained()"),$6t.forEach(t),Xrr=r(Eoe," class method or the "),gW=n(Eoe,"A",{href:!0});var k6t=s(gW);zrr=r(k6t,"from_config()"),k6t.forEach(t),Wrr=r(Eoe,` class
method.`),Eoe.forEach(t),Qrr=i(dl),a8=n(dl,"P",{});var XVe=s(a8);Hrr=r(XVe,"This class cannot be instantiated directly using "),$1e=n(XVe,"CODE",{});var S6t=s($1e);Urr=r(S6t,"__init__()"),S6t.forEach(t),Jrr=r(XVe," (throws an error)."),XVe.forEach(t),Yrr=i(dl),vt=n(dl,"DIV",{class:!0});var Qw=s(vt);T(n8.$$.fragment,Qw),Krr=i(Qw),k1e=n(Qw,"P",{});var R6t=s(k1e);Zrr=r(R6t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),R6t.forEach(t),etr=i(Qw),Td=n(Qw,"P",{});var Coe=s(Td);otr=r(Coe,`Note:
Loading a model from its configuration file does `),S1e=n(Coe,"STRONG",{});var P6t=s(S1e);rtr=r(P6t,"not"),P6t.forEach(t),ttr=r(Coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=n(Coe,"A",{href:!0});var B6t=s(hW);atr=r(B6t,"from_pretrained()"),B6t.forEach(t),ntr=r(Coe," to load the model weights."),Coe.forEach(t),str=i(Qw),T(tF.$$.fragment,Qw),Qw.forEach(t),ltr=i(dl),co=n(dl,"DIV",{class:!0});var _a=s(co);T(s8.$$.fragment,_a),itr=i(_a),R1e=n(_a,"P",{});var I6t=s(R1e);dtr=r(I6t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),I6t.forEach(t),ctr=i(_a),za=n(_a,"P",{});var Hw=s(za);ftr=r(Hw,"The model class to instantiate is selected based on the "),P1e=n(Hw,"CODE",{});var N6t=s(P1e);mtr=r(N6t,"model_type"),N6t.forEach(t),gtr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),B1e=n(Hw,"CODE",{});var q6t=s(B1e);htr=r(q6t,"pretrained_model_name_or_path"),q6t.forEach(t),ptr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=n(Hw,"CODE",{});var j6t=s(I1e);utr=r(j6t,"pretrained_model_name_or_path"),j6t.forEach(t),_tr=r(Hw,":"),Hw.forEach(t),btr=i(_a),N1e=n(_a,"UL",{});var D6t=s(N1e);aF=n(D6t,"LI",{});var iPe=s(aF);q1e=n(iPe,"STRONG",{});var G6t=s(q1e);vtr=r(G6t,"vilt"),G6t.forEach(t),Ftr=r(iPe," \u2014 "),pW=n(iPe,"A",{href:!0});var O6t=s(pW);Ttr=r(O6t,"ViltForQuestionAnswering"),O6t.forEach(t),Mtr=r(iPe," (ViLT model)"),iPe.forEach(t),D6t.forEach(t),Etr=i(_a),nF=n(_a,"P",{});var dPe=s(nF);Ctr=r(dPe,"The model is set in evaluation mode by default using "),j1e=n(dPe,"CODE",{});var V6t=s(j1e);wtr=r(V6t,"model.eval()"),V6t.forEach(t),Atr=r(dPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D1e=n(dPe,"CODE",{});var X6t=s(D1e);Ltr=r(X6t,"model.train()"),X6t.forEach(t),dPe.forEach(t),ytr=i(_a),T(sF.$$.fragment,_a),_a.forEach(t),dl.forEach(t),jGe=i(f),Md=n(f,"H2",{class:!0});var zVe=s(Md);lF=n(zVe,"A",{id:!0,class:!0,href:!0});var z6t=s(lF);G1e=n(z6t,"SPAN",{});var W6t=s(G1e);T(l8.$$.fragment,W6t),W6t.forEach(t),z6t.forEach(t),xtr=i(zVe),O1e=n(zVe,"SPAN",{});var Q6t=s(O1e);$tr=r(Q6t,"AutoModelForAudioClassification"),Q6t.forEach(t),zVe.forEach(t),DGe=i(f),Vo=n(f,"DIV",{class:!0});var cl=s(Vo);T(i8.$$.fragment,cl),ktr=i(cl),Ed=n(cl,"P",{});var woe=s(Ed);Str=r(woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),uW=n(woe,"A",{href:!0});var H6t=s(uW);Rtr=r(H6t,"from_pretrained()"),H6t.forEach(t),Ptr=r(woe," class method or the "),_W=n(woe,"A",{href:!0});var U6t=s(_W);Btr=r(U6t,"from_config()"),U6t.forEach(t),Itr=r(woe,` class
method.`),woe.forEach(t),Ntr=i(cl),d8=n(cl,"P",{});var WVe=s(d8);qtr=r(WVe,"This class cannot be instantiated directly using "),V1e=n(WVe,"CODE",{});var J6t=s(V1e);jtr=r(J6t,"__init__()"),J6t.forEach(t),Dtr=r(WVe," (throws an error)."),WVe.forEach(t),Gtr=i(cl),Ft=n(cl,"DIV",{class:!0});var Uw=s(Ft);T(c8.$$.fragment,Uw),Otr=i(Uw),X1e=n(Uw,"P",{});var Y6t=s(X1e);Vtr=r(Y6t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Y6t.forEach(t),Xtr=i(Uw),Cd=n(Uw,"P",{});var Aoe=s(Cd);ztr=r(Aoe,`Note:
Loading a model from its configuration file does `),z1e=n(Aoe,"STRONG",{});var K6t=s(z1e);Wtr=r(K6t,"not"),K6t.forEach(t),Qtr=r(Aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=n(Aoe,"A",{href:!0});var Z6t=s(bW);Htr=r(Z6t,"from_pretrained()"),Z6t.forEach(t),Utr=r(Aoe," to load the model weights."),Aoe.forEach(t),Jtr=i(Uw),T(iF.$$.fragment,Uw),Uw.forEach(t),Ytr=i(cl),fo=n(cl,"DIV",{class:!0});var ba=s(fo);T(f8.$$.fragment,ba),Ktr=i(ba),W1e=n(ba,"P",{});var eTt=s(W1e);Ztr=r(eTt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),eTt.forEach(t),ear=i(ba),Wa=n(ba,"P",{});var Jw=s(Wa);oar=r(Jw,"The model class to instantiate is selected based on the "),Q1e=n(Jw,"CODE",{});var oTt=s(Q1e);rar=r(oTt,"model_type"),oTt.forEach(t),tar=r(Jw,` property of the config object (either
passed as an argument or loaded from `),H1e=n(Jw,"CODE",{});var rTt=s(H1e);aar=r(rTt,"pretrained_model_name_or_path"),rTt.forEach(t),nar=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=n(Jw,"CODE",{});var tTt=s(U1e);sar=r(tTt,"pretrained_model_name_or_path"),tTt.forEach(t),lar=r(Jw,":"),Jw.forEach(t),iar=i(ba),Pe=n(ba,"UL",{});var ze=s(Pe);dF=n(ze,"LI",{});var cPe=s(dF);J1e=n(cPe,"STRONG",{});var aTt=s(J1e);dar=r(aTt,"data2vec-audio"),aTt.forEach(t),car=r(cPe," \u2014 "),vW=n(cPe,"A",{href:!0});var nTt=s(vW);far=r(nTt,"Data2VecAudioForSequenceClassification"),nTt.forEach(t),mar=r(cPe," (Data2VecAudio model)"),cPe.forEach(t),gar=i(ze),cF=n(ze,"LI",{});var fPe=s(cF);Y1e=n(fPe,"STRONG",{});var sTt=s(Y1e);har=r(sTt,"hubert"),sTt.forEach(t),par=r(fPe," \u2014 "),FW=n(fPe,"A",{href:!0});var lTt=s(FW);uar=r(lTt,"HubertForSequenceClassification"),lTt.forEach(t),_ar=r(fPe," (Hubert model)"),fPe.forEach(t),bar=i(ze),fF=n(ze,"LI",{});var mPe=s(fF);K1e=n(mPe,"STRONG",{});var iTt=s(K1e);Far=r(iTt,"sew"),iTt.forEach(t),Tar=r(mPe," \u2014 "),TW=n(mPe,"A",{href:!0});var dTt=s(TW);Mar=r(dTt,"SEWForSequenceClassification"),dTt.forEach(t),Ear=r(mPe," (SEW model)"),mPe.forEach(t),Car=i(ze),mF=n(ze,"LI",{});var gPe=s(mF);Z1e=n(gPe,"STRONG",{});var cTt=s(Z1e);war=r(cTt,"sew-d"),cTt.forEach(t),Aar=r(gPe," \u2014 "),MW=n(gPe,"A",{href:!0});var fTt=s(MW);Lar=r(fTt,"SEWDForSequenceClassification"),fTt.forEach(t),yar=r(gPe," (SEW-D model)"),gPe.forEach(t),xar=i(ze),gF=n(ze,"LI",{});var hPe=s(gF);e2e=n(hPe,"STRONG",{});var mTt=s(e2e);$ar=r(mTt,"unispeech"),mTt.forEach(t),kar=r(hPe," \u2014 "),EW=n(hPe,"A",{href:!0});var gTt=s(EW);Sar=r(gTt,"UniSpeechForSequenceClassification"),gTt.forEach(t),Rar=r(hPe," (UniSpeech model)"),hPe.forEach(t),Par=i(ze),hF=n(ze,"LI",{});var pPe=s(hF);o2e=n(pPe,"STRONG",{});var hTt=s(o2e);Bar=r(hTt,"unispeech-sat"),hTt.forEach(t),Iar=r(pPe," \u2014 "),CW=n(pPe,"A",{href:!0});var pTt=s(CW);Nar=r(pTt,"UniSpeechSatForSequenceClassification"),pTt.forEach(t),qar=r(pPe," (UniSpeechSat model)"),pPe.forEach(t),jar=i(ze),pF=n(ze,"LI",{});var uPe=s(pF);r2e=n(uPe,"STRONG",{});var uTt=s(r2e);Dar=r(uTt,"wav2vec2"),uTt.forEach(t),Gar=r(uPe," \u2014 "),wW=n(uPe,"A",{href:!0});var _Tt=s(wW);Oar=r(_Tt,"Wav2Vec2ForSequenceClassification"),_Tt.forEach(t),Var=r(uPe," (Wav2Vec2 model)"),uPe.forEach(t),Xar=i(ze),uF=n(ze,"LI",{});var _Pe=s(uF);t2e=n(_Pe,"STRONG",{});var bTt=s(t2e);zar=r(bTt,"wav2vec2-conformer"),bTt.forEach(t),War=r(_Pe," \u2014 "),AW=n(_Pe,"A",{href:!0});var vTt=s(AW);Qar=r(vTt,"Wav2Vec2ConformerForSequenceClassification"),vTt.forEach(t),Har=r(_Pe," (Wav2Vec2-Conformer model)"),_Pe.forEach(t),Uar=i(ze),_F=n(ze,"LI",{});var bPe=s(_F);a2e=n(bPe,"STRONG",{});var FTt=s(a2e);Jar=r(FTt,"wavlm"),FTt.forEach(t),Yar=r(bPe," \u2014 "),LW=n(bPe,"A",{href:!0});var TTt=s(LW);Kar=r(TTt,"WavLMForSequenceClassification"),TTt.forEach(t),Zar=r(bPe," (WavLM model)"),bPe.forEach(t),ze.forEach(t),enr=i(ba),bF=n(ba,"P",{});var vPe=s(bF);onr=r(vPe,"The model is set in evaluation mode by default using "),n2e=n(vPe,"CODE",{});var MTt=s(n2e);rnr=r(MTt,"model.eval()"),MTt.forEach(t),tnr=r(vPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s2e=n(vPe,"CODE",{});var ETt=s(s2e);anr=r(ETt,"model.train()"),ETt.forEach(t),vPe.forEach(t),nnr=i(ba),T(vF.$$.fragment,ba),ba.forEach(t),cl.forEach(t),GGe=i(f),wd=n(f,"H2",{class:!0});var QVe=s(wd);FF=n(QVe,"A",{id:!0,class:!0,href:!0});var CTt=s(FF);l2e=n(CTt,"SPAN",{});var wTt=s(l2e);T(m8.$$.fragment,wTt),wTt.forEach(t),CTt.forEach(t),snr=i(QVe),i2e=n(QVe,"SPAN",{});var ATt=s(i2e);lnr=r(ATt,"AutoModelForAudioFrameClassification"),ATt.forEach(t),QVe.forEach(t),OGe=i(f),Xo=n(f,"DIV",{class:!0});var fl=s(Xo);T(g8.$$.fragment,fl),inr=i(fl),Ad=n(fl,"P",{});var Loe=s(Ad);dnr=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),yW=n(Loe,"A",{href:!0});var LTt=s(yW);cnr=r(LTt,"from_pretrained()"),LTt.forEach(t),fnr=r(Loe," class method or the "),xW=n(Loe,"A",{href:!0});var yTt=s(xW);mnr=r(yTt,"from_config()"),yTt.forEach(t),gnr=r(Loe,` class
method.`),Loe.forEach(t),hnr=i(fl),h8=n(fl,"P",{});var HVe=s(h8);pnr=r(HVe,"This class cannot be instantiated directly using "),d2e=n(HVe,"CODE",{});var xTt=s(d2e);unr=r(xTt,"__init__()"),xTt.forEach(t),_nr=r(HVe," (throws an error)."),HVe.forEach(t),bnr=i(fl),Tt=n(fl,"DIV",{class:!0});var Yw=s(Tt);T(p8.$$.fragment,Yw),vnr=i(Yw),c2e=n(Yw,"P",{});var $Tt=s(c2e);Fnr=r($Tt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),$Tt.forEach(t),Tnr=i(Yw),Ld=n(Yw,"P",{});var yoe=s(Ld);Mnr=r(yoe,`Note:
Loading a model from its configuration file does `),f2e=n(yoe,"STRONG",{});var kTt=s(f2e);Enr=r(kTt,"not"),kTt.forEach(t),Cnr=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=n(yoe,"A",{href:!0});var STt=s($W);wnr=r(STt,"from_pretrained()"),STt.forEach(t),Anr=r(yoe," to load the model weights."),yoe.forEach(t),Lnr=i(Yw),T(TF.$$.fragment,Yw),Yw.forEach(t),ynr=i(fl),mo=n(fl,"DIV",{class:!0});var va=s(mo);T(u8.$$.fragment,va),xnr=i(va),m2e=n(va,"P",{});var RTt=s(m2e);$nr=r(RTt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),RTt.forEach(t),knr=i(va),Qa=n(va,"P",{});var Kw=s(Qa);Snr=r(Kw,"The model class to instantiate is selected based on the "),g2e=n(Kw,"CODE",{});var PTt=s(g2e);Rnr=r(PTt,"model_type"),PTt.forEach(t),Pnr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),h2e=n(Kw,"CODE",{});var BTt=s(h2e);Bnr=r(BTt,"pretrained_model_name_or_path"),BTt.forEach(t),Inr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p2e=n(Kw,"CODE",{});var ITt=s(p2e);Nnr=r(ITt,"pretrained_model_name_or_path"),ITt.forEach(t),qnr=r(Kw,":"),Kw.forEach(t),jnr=i(va),et=n(va,"UL",{});var ml=s(et);MF=n(ml,"LI",{});var FPe=s(MF);u2e=n(FPe,"STRONG",{});var NTt=s(u2e);Dnr=r(NTt,"data2vec-audio"),NTt.forEach(t),Gnr=r(FPe," \u2014 "),kW=n(FPe,"A",{href:!0});var qTt=s(kW);Onr=r(qTt,"Data2VecAudioForAudioFrameClassification"),qTt.forEach(t),Vnr=r(FPe," (Data2VecAudio model)"),FPe.forEach(t),Xnr=i(ml),EF=n(ml,"LI",{});var TPe=s(EF);_2e=n(TPe,"STRONG",{});var jTt=s(_2e);znr=r(jTt,"unispeech-sat"),jTt.forEach(t),Wnr=r(TPe," \u2014 "),SW=n(TPe,"A",{href:!0});var DTt=s(SW);Qnr=r(DTt,"UniSpeechSatForAudioFrameClassification"),DTt.forEach(t),Hnr=r(TPe," (UniSpeechSat model)"),TPe.forEach(t),Unr=i(ml),CF=n(ml,"LI",{});var MPe=s(CF);b2e=n(MPe,"STRONG",{});var GTt=s(b2e);Jnr=r(GTt,"wav2vec2"),GTt.forEach(t),Ynr=r(MPe," \u2014 "),RW=n(MPe,"A",{href:!0});var OTt=s(RW);Knr=r(OTt,"Wav2Vec2ForAudioFrameClassification"),OTt.forEach(t),Znr=r(MPe," (Wav2Vec2 model)"),MPe.forEach(t),esr=i(ml),wF=n(ml,"LI",{});var EPe=s(wF);v2e=n(EPe,"STRONG",{});var VTt=s(v2e);osr=r(VTt,"wav2vec2-conformer"),VTt.forEach(t),rsr=r(EPe," \u2014 "),PW=n(EPe,"A",{href:!0});var XTt=s(PW);tsr=r(XTt,"Wav2Vec2ConformerForAudioFrameClassification"),XTt.forEach(t),asr=r(EPe," (Wav2Vec2-Conformer model)"),EPe.forEach(t),nsr=i(ml),AF=n(ml,"LI",{});var CPe=s(AF);F2e=n(CPe,"STRONG",{});var zTt=s(F2e);ssr=r(zTt,"wavlm"),zTt.forEach(t),lsr=r(CPe," \u2014 "),BW=n(CPe,"A",{href:!0});var WTt=s(BW);isr=r(WTt,"WavLMForAudioFrameClassification"),WTt.forEach(t),dsr=r(CPe," (WavLM model)"),CPe.forEach(t),ml.forEach(t),csr=i(va),LF=n(va,"P",{});var wPe=s(LF);fsr=r(wPe,"The model is set in evaluation mode by default using "),T2e=n(wPe,"CODE",{});var QTt=s(T2e);msr=r(QTt,"model.eval()"),QTt.forEach(t),gsr=r(wPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M2e=n(wPe,"CODE",{});var HTt=s(M2e);hsr=r(HTt,"model.train()"),HTt.forEach(t),wPe.forEach(t),psr=i(va),T(yF.$$.fragment,va),va.forEach(t),fl.forEach(t),VGe=i(f),yd=n(f,"H2",{class:!0});var UVe=s(yd);xF=n(UVe,"A",{id:!0,class:!0,href:!0});var UTt=s(xF);E2e=n(UTt,"SPAN",{});var JTt=s(E2e);T(_8.$$.fragment,JTt),JTt.forEach(t),UTt.forEach(t),usr=i(UVe),C2e=n(UVe,"SPAN",{});var YTt=s(C2e);_sr=r(YTt,"AutoModelForCTC"),YTt.forEach(t),UVe.forEach(t),XGe=i(f),zo=n(f,"DIV",{class:!0});var gl=s(zo);T(b8.$$.fragment,gl),bsr=i(gl),xd=n(gl,"P",{});var xoe=s(xd);vsr=r(xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),IW=n(xoe,"A",{href:!0});var KTt=s(IW);Fsr=r(KTt,"from_pretrained()"),KTt.forEach(t),Tsr=r(xoe," class method or the "),NW=n(xoe,"A",{href:!0});var ZTt=s(NW);Msr=r(ZTt,"from_config()"),ZTt.forEach(t),Esr=r(xoe,` class
method.`),xoe.forEach(t),Csr=i(gl),v8=n(gl,"P",{});var JVe=s(v8);wsr=r(JVe,"This class cannot be instantiated directly using "),w2e=n(JVe,"CODE",{});var e7t=s(w2e);Asr=r(e7t,"__init__()"),e7t.forEach(t),Lsr=r(JVe," (throws an error)."),JVe.forEach(t),ysr=i(gl),Mt=n(gl,"DIV",{class:!0});var Zw=s(Mt);T(F8.$$.fragment,Zw),xsr=i(Zw),A2e=n(Zw,"P",{});var o7t=s(A2e);$sr=r(o7t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),o7t.forEach(t),ksr=i(Zw),$d=n(Zw,"P",{});var $oe=s($d);Ssr=r($oe,`Note:
Loading a model from its configuration file does `),L2e=n($oe,"STRONG",{});var r7t=s(L2e);Rsr=r(r7t,"not"),r7t.forEach(t),Psr=r($oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=n($oe,"A",{href:!0});var t7t=s(qW);Bsr=r(t7t,"from_pretrained()"),t7t.forEach(t),Isr=r($oe," to load the model weights."),$oe.forEach(t),Nsr=i(Zw),T($F.$$.fragment,Zw),Zw.forEach(t),qsr=i(gl),go=n(gl,"DIV",{class:!0});var Fa=s(go);T(T8.$$.fragment,Fa),jsr=i(Fa),y2e=n(Fa,"P",{});var a7t=s(y2e);Dsr=r(a7t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),a7t.forEach(t),Gsr=i(Fa),Ha=n(Fa,"P",{});var eA=s(Ha);Osr=r(eA,"The model class to instantiate is selected based on the "),x2e=n(eA,"CODE",{});var n7t=s(x2e);Vsr=r(n7t,"model_type"),n7t.forEach(t),Xsr=r(eA,` property of the config object (either
passed as an argument or loaded from `),$2e=n(eA,"CODE",{});var s7t=s($2e);zsr=r(s7t,"pretrained_model_name_or_path"),s7t.forEach(t),Wsr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k2e=n(eA,"CODE",{});var l7t=s(k2e);Qsr=r(l7t,"pretrained_model_name_or_path"),l7t.forEach(t),Hsr=r(eA,":"),eA.forEach(t),Usr=i(Fa),Le=n(Fa,"UL",{});var Be=s(Le);kF=n(Be,"LI",{});var APe=s(kF);S2e=n(APe,"STRONG",{});var i7t=s(S2e);Jsr=r(i7t,"data2vec-audio"),i7t.forEach(t),Ysr=r(APe," \u2014 "),jW=n(APe,"A",{href:!0});var d7t=s(jW);Ksr=r(d7t,"Data2VecAudioForCTC"),d7t.forEach(t),Zsr=r(APe," (Data2VecAudio model)"),APe.forEach(t),elr=i(Be),SF=n(Be,"LI",{});var LPe=s(SF);R2e=n(LPe,"STRONG",{});var c7t=s(R2e);olr=r(c7t,"hubert"),c7t.forEach(t),rlr=r(LPe," \u2014 "),DW=n(LPe,"A",{href:!0});var f7t=s(DW);tlr=r(f7t,"HubertForCTC"),f7t.forEach(t),alr=r(LPe," (Hubert model)"),LPe.forEach(t),nlr=i(Be),RF=n(Be,"LI",{});var yPe=s(RF);P2e=n(yPe,"STRONG",{});var m7t=s(P2e);slr=r(m7t,"mctct"),m7t.forEach(t),llr=r(yPe," \u2014 "),GW=n(yPe,"A",{href:!0});var g7t=s(GW);ilr=r(g7t,"MCTCTForCTC"),g7t.forEach(t),dlr=r(yPe," (M-CTC-T model)"),yPe.forEach(t),clr=i(Be),PF=n(Be,"LI",{});var xPe=s(PF);B2e=n(xPe,"STRONG",{});var h7t=s(B2e);flr=r(h7t,"sew"),h7t.forEach(t),mlr=r(xPe," \u2014 "),OW=n(xPe,"A",{href:!0});var p7t=s(OW);glr=r(p7t,"SEWForCTC"),p7t.forEach(t),hlr=r(xPe," (SEW model)"),xPe.forEach(t),plr=i(Be),BF=n(Be,"LI",{});var $Pe=s(BF);I2e=n($Pe,"STRONG",{});var u7t=s(I2e);ulr=r(u7t,"sew-d"),u7t.forEach(t),_lr=r($Pe," \u2014 "),VW=n($Pe,"A",{href:!0});var _7t=s(VW);blr=r(_7t,"SEWDForCTC"),_7t.forEach(t),vlr=r($Pe," (SEW-D model)"),$Pe.forEach(t),Flr=i(Be),IF=n(Be,"LI",{});var kPe=s(IF);N2e=n(kPe,"STRONG",{});var b7t=s(N2e);Tlr=r(b7t,"unispeech"),b7t.forEach(t),Mlr=r(kPe," \u2014 "),XW=n(kPe,"A",{href:!0});var v7t=s(XW);Elr=r(v7t,"UniSpeechForCTC"),v7t.forEach(t),Clr=r(kPe," (UniSpeech model)"),kPe.forEach(t),wlr=i(Be),NF=n(Be,"LI",{});var SPe=s(NF);q2e=n(SPe,"STRONG",{});var F7t=s(q2e);Alr=r(F7t,"unispeech-sat"),F7t.forEach(t),Llr=r(SPe," \u2014 "),zW=n(SPe,"A",{href:!0});var T7t=s(zW);ylr=r(T7t,"UniSpeechSatForCTC"),T7t.forEach(t),xlr=r(SPe," (UniSpeechSat model)"),SPe.forEach(t),$lr=i(Be),qF=n(Be,"LI",{});var RPe=s(qF);j2e=n(RPe,"STRONG",{});var M7t=s(j2e);klr=r(M7t,"wav2vec2"),M7t.forEach(t),Slr=r(RPe," \u2014 "),WW=n(RPe,"A",{href:!0});var E7t=s(WW);Rlr=r(E7t,"Wav2Vec2ForCTC"),E7t.forEach(t),Plr=r(RPe," (Wav2Vec2 model)"),RPe.forEach(t),Blr=i(Be),jF=n(Be,"LI",{});var PPe=s(jF);D2e=n(PPe,"STRONG",{});var C7t=s(D2e);Ilr=r(C7t,"wav2vec2-conformer"),C7t.forEach(t),Nlr=r(PPe," \u2014 "),QW=n(PPe,"A",{href:!0});var w7t=s(QW);qlr=r(w7t,"Wav2Vec2ConformerForCTC"),w7t.forEach(t),jlr=r(PPe," (Wav2Vec2-Conformer model)"),PPe.forEach(t),Dlr=i(Be),DF=n(Be,"LI",{});var BPe=s(DF);G2e=n(BPe,"STRONG",{});var A7t=s(G2e);Glr=r(A7t,"wavlm"),A7t.forEach(t),Olr=r(BPe," \u2014 "),HW=n(BPe,"A",{href:!0});var L7t=s(HW);Vlr=r(L7t,"WavLMForCTC"),L7t.forEach(t),Xlr=r(BPe," (WavLM model)"),BPe.forEach(t),Be.forEach(t),zlr=i(Fa),GF=n(Fa,"P",{});var IPe=s(GF);Wlr=r(IPe,"The model is set in evaluation mode by default using "),O2e=n(IPe,"CODE",{});var y7t=s(O2e);Qlr=r(y7t,"model.eval()"),y7t.forEach(t),Hlr=r(IPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V2e=n(IPe,"CODE",{});var x7t=s(V2e);Ulr=r(x7t,"model.train()"),x7t.forEach(t),IPe.forEach(t),Jlr=i(Fa),T(OF.$$.fragment,Fa),Fa.forEach(t),gl.forEach(t),zGe=i(f),kd=n(f,"H2",{class:!0});var YVe=s(kd);VF=n(YVe,"A",{id:!0,class:!0,href:!0});var $7t=s(VF);X2e=n($7t,"SPAN",{});var k7t=s(X2e);T(M8.$$.fragment,k7t),k7t.forEach(t),$7t.forEach(t),Ylr=i(YVe),z2e=n(YVe,"SPAN",{});var S7t=s(z2e);Klr=r(S7t,"AutoModelForSpeechSeq2Seq"),S7t.forEach(t),YVe.forEach(t),WGe=i(f),Wo=n(f,"DIV",{class:!0});var hl=s(Wo);T(E8.$$.fragment,hl),Zlr=i(hl),Sd=n(hl,"P",{});var koe=s(Sd);eir=r(koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UW=n(koe,"A",{href:!0});var R7t=s(UW);oir=r(R7t,"from_pretrained()"),R7t.forEach(t),rir=r(koe," class method or the "),JW=n(koe,"A",{href:!0});var P7t=s(JW);tir=r(P7t,"from_config()"),P7t.forEach(t),air=r(koe,` class
method.`),koe.forEach(t),nir=i(hl),C8=n(hl,"P",{});var KVe=s(C8);sir=r(KVe,"This class cannot be instantiated directly using "),W2e=n(KVe,"CODE",{});var B7t=s(W2e);lir=r(B7t,"__init__()"),B7t.forEach(t),iir=r(KVe," (throws an error)."),KVe.forEach(t),dir=i(hl),Et=n(hl,"DIV",{class:!0});var oA=s(Et);T(w8.$$.fragment,oA),cir=i(oA),Q2e=n(oA,"P",{});var I7t=s(Q2e);fir=r(I7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),I7t.forEach(t),mir=i(oA),Rd=n(oA,"P",{});var Soe=s(Rd);gir=r(Soe,`Note:
Loading a model from its configuration file does `),H2e=n(Soe,"STRONG",{});var N7t=s(H2e);hir=r(N7t,"not"),N7t.forEach(t),pir=r(Soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=n(Soe,"A",{href:!0});var q7t=s(YW);uir=r(q7t,"from_pretrained()"),q7t.forEach(t),_ir=r(Soe," to load the model weights."),Soe.forEach(t),bir=i(oA),T(XF.$$.fragment,oA),oA.forEach(t),vir=i(hl),ho=n(hl,"DIV",{class:!0});var Ta=s(ho);T(A8.$$.fragment,Ta),Fir=i(Ta),U2e=n(Ta,"P",{});var j7t=s(U2e);Tir=r(j7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),j7t.forEach(t),Mir=i(Ta),Ua=n(Ta,"P",{});var rA=s(Ua);Eir=r(rA,"The model class to instantiate is selected based on the "),J2e=n(rA,"CODE",{});var D7t=s(J2e);Cir=r(D7t,"model_type"),D7t.forEach(t),wir=r(rA,` property of the config object (either
passed as an argument or loaded from `),Y2e=n(rA,"CODE",{});var G7t=s(Y2e);Air=r(G7t,"pretrained_model_name_or_path"),G7t.forEach(t),Lir=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=n(rA,"CODE",{});var O7t=s(K2e);yir=r(O7t,"pretrained_model_name_or_path"),O7t.forEach(t),xir=r(rA,":"),rA.forEach(t),$ir=i(Ta),L8=n(Ta,"UL",{});var ZVe=s(L8);zF=n(ZVe,"LI",{});var NPe=s(zF);Z2e=n(NPe,"STRONG",{});var V7t=s(Z2e);kir=r(V7t,"speech-encoder-decoder"),V7t.forEach(t),Sir=r(NPe," \u2014 "),KW=n(NPe,"A",{href:!0});var X7t=s(KW);Rir=r(X7t,"SpeechEncoderDecoderModel"),X7t.forEach(t),Pir=r(NPe," (Speech Encoder decoder model)"),NPe.forEach(t),Bir=i(ZVe),WF=n(ZVe,"LI",{});var qPe=s(WF);ebe=n(qPe,"STRONG",{});var z7t=s(ebe);Iir=r(z7t,"speech_to_text"),z7t.forEach(t),Nir=r(qPe," \u2014 "),ZW=n(qPe,"A",{href:!0});var W7t=s(ZW);qir=r(W7t,"Speech2TextForConditionalGeneration"),W7t.forEach(t),jir=r(qPe," (Speech2Text model)"),qPe.forEach(t),ZVe.forEach(t),Dir=i(Ta),QF=n(Ta,"P",{});var jPe=s(QF);Gir=r(jPe,"The model is set in evaluation mode by default using "),obe=n(jPe,"CODE",{});var Q7t=s(obe);Oir=r(Q7t,"model.eval()"),Q7t.forEach(t),Vir=r(jPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rbe=n(jPe,"CODE",{});var H7t=s(rbe);Xir=r(H7t,"model.train()"),H7t.forEach(t),jPe.forEach(t),zir=i(Ta),T(HF.$$.fragment,Ta),Ta.forEach(t),hl.forEach(t),QGe=i(f),Pd=n(f,"H2",{class:!0});var eXe=s(Pd);UF=n(eXe,"A",{id:!0,class:!0,href:!0});var U7t=s(UF);tbe=n(U7t,"SPAN",{});var J7t=s(tbe);T(y8.$$.fragment,J7t),J7t.forEach(t),U7t.forEach(t),Wir=i(eXe),abe=n(eXe,"SPAN",{});var Y7t=s(abe);Qir=r(Y7t,"AutoModelForAudioXVector"),Y7t.forEach(t),eXe.forEach(t),HGe=i(f),Qo=n(f,"DIV",{class:!0});var pl=s(Qo);T(x8.$$.fragment,pl),Hir=i(pl),Bd=n(pl,"P",{});var Roe=s(Bd);Uir=r(Roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),eQ=n(Roe,"A",{href:!0});var K7t=s(eQ);Jir=r(K7t,"from_pretrained()"),K7t.forEach(t),Yir=r(Roe," class method or the "),oQ=n(Roe,"A",{href:!0});var Z7t=s(oQ);Kir=r(Z7t,"from_config()"),Z7t.forEach(t),Zir=r(Roe,` class
method.`),Roe.forEach(t),edr=i(pl),$8=n(pl,"P",{});var oXe=s($8);odr=r(oXe,"This class cannot be instantiated directly using "),nbe=n(oXe,"CODE",{});var eMt=s(nbe);rdr=r(eMt,"__init__()"),eMt.forEach(t),tdr=r(oXe," (throws an error)."),oXe.forEach(t),adr=i(pl),Ct=n(pl,"DIV",{class:!0});var tA=s(Ct);T(k8.$$.fragment,tA),ndr=i(tA),sbe=n(tA,"P",{});var oMt=s(sbe);sdr=r(oMt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),oMt.forEach(t),ldr=i(tA),Id=n(tA,"P",{});var Poe=s(Id);idr=r(Poe,`Note:
Loading a model from its configuration file does `),lbe=n(Poe,"STRONG",{});var rMt=s(lbe);ddr=r(rMt,"not"),rMt.forEach(t),cdr=r(Poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=n(Poe,"A",{href:!0});var tMt=s(rQ);fdr=r(tMt,"from_pretrained()"),tMt.forEach(t),mdr=r(Poe," to load the model weights."),Poe.forEach(t),gdr=i(tA),T(JF.$$.fragment,tA),tA.forEach(t),hdr=i(pl),po=n(pl,"DIV",{class:!0});var Ma=s(po);T(S8.$$.fragment,Ma),pdr=i(Ma),ibe=n(Ma,"P",{});var aMt=s(ibe);udr=r(aMt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),aMt.forEach(t),_dr=i(Ma),Ja=n(Ma,"P",{});var aA=s(Ja);bdr=r(aA,"The model class to instantiate is selected based on the "),dbe=n(aA,"CODE",{});var nMt=s(dbe);vdr=r(nMt,"model_type"),nMt.forEach(t),Fdr=r(aA,` property of the config object (either
passed as an argument or loaded from `),cbe=n(aA,"CODE",{});var sMt=s(cbe);Tdr=r(sMt,"pretrained_model_name_or_path"),sMt.forEach(t),Mdr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=n(aA,"CODE",{});var lMt=s(fbe);Edr=r(lMt,"pretrained_model_name_or_path"),lMt.forEach(t),Cdr=r(aA,":"),aA.forEach(t),wdr=i(Ma),ot=n(Ma,"UL",{});var ul=s(ot);YF=n(ul,"LI",{});var DPe=s(YF);mbe=n(DPe,"STRONG",{});var iMt=s(mbe);Adr=r(iMt,"data2vec-audio"),iMt.forEach(t),Ldr=r(DPe," \u2014 "),tQ=n(DPe,"A",{href:!0});var dMt=s(tQ);ydr=r(dMt,"Data2VecAudioForXVector"),dMt.forEach(t),xdr=r(DPe," (Data2VecAudio model)"),DPe.forEach(t),$dr=i(ul),KF=n(ul,"LI",{});var GPe=s(KF);gbe=n(GPe,"STRONG",{});var cMt=s(gbe);kdr=r(cMt,"unispeech-sat"),cMt.forEach(t),Sdr=r(GPe," \u2014 "),aQ=n(GPe,"A",{href:!0});var fMt=s(aQ);Rdr=r(fMt,"UniSpeechSatForXVector"),fMt.forEach(t),Pdr=r(GPe," (UniSpeechSat model)"),GPe.forEach(t),Bdr=i(ul),ZF=n(ul,"LI",{});var OPe=s(ZF);hbe=n(OPe,"STRONG",{});var mMt=s(hbe);Idr=r(mMt,"wav2vec2"),mMt.forEach(t),Ndr=r(OPe," \u2014 "),nQ=n(OPe,"A",{href:!0});var gMt=s(nQ);qdr=r(gMt,"Wav2Vec2ForXVector"),gMt.forEach(t),jdr=r(OPe," (Wav2Vec2 model)"),OPe.forEach(t),Ddr=i(ul),e6=n(ul,"LI",{});var VPe=s(e6);pbe=n(VPe,"STRONG",{});var hMt=s(pbe);Gdr=r(hMt,"wav2vec2-conformer"),hMt.forEach(t),Odr=r(VPe," \u2014 "),sQ=n(VPe,"A",{href:!0});var pMt=s(sQ);Vdr=r(pMt,"Wav2Vec2ConformerForXVector"),pMt.forEach(t),Xdr=r(VPe," (Wav2Vec2-Conformer model)"),VPe.forEach(t),zdr=i(ul),o6=n(ul,"LI",{});var XPe=s(o6);ube=n(XPe,"STRONG",{});var uMt=s(ube);Wdr=r(uMt,"wavlm"),uMt.forEach(t),Qdr=r(XPe," \u2014 "),lQ=n(XPe,"A",{href:!0});var _Mt=s(lQ);Hdr=r(_Mt,"WavLMForXVector"),_Mt.forEach(t),Udr=r(XPe," (WavLM model)"),XPe.forEach(t),ul.forEach(t),Jdr=i(Ma),r6=n(Ma,"P",{});var zPe=s(r6);Ydr=r(zPe,"The model is set in evaluation mode by default using "),_be=n(zPe,"CODE",{});var bMt=s(_be);Kdr=r(bMt,"model.eval()"),bMt.forEach(t),Zdr=r(zPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bbe=n(zPe,"CODE",{});var vMt=s(bbe);ecr=r(vMt,"model.train()"),vMt.forEach(t),zPe.forEach(t),ocr=i(Ma),T(t6.$$.fragment,Ma),Ma.forEach(t),pl.forEach(t),UGe=i(f),Nd=n(f,"H2",{class:!0});var rXe=s(Nd);a6=n(rXe,"A",{id:!0,class:!0,href:!0});var FMt=s(a6);vbe=n(FMt,"SPAN",{});var TMt=s(vbe);T(R8.$$.fragment,TMt),TMt.forEach(t),FMt.forEach(t),rcr=i(rXe),Fbe=n(rXe,"SPAN",{});var MMt=s(Fbe);tcr=r(MMt,"AutoModelForMaskedImageModeling"),MMt.forEach(t),rXe.forEach(t),JGe=i(f),Ho=n(f,"DIV",{class:!0});var _l=s(Ho);T(P8.$$.fragment,_l),acr=i(_l),qd=n(_l,"P",{});var Boe=s(qd);ncr=r(Boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),iQ=n(Boe,"A",{href:!0});var EMt=s(iQ);scr=r(EMt,"from_pretrained()"),EMt.forEach(t),lcr=r(Boe," class method or the "),dQ=n(Boe,"A",{href:!0});var CMt=s(dQ);icr=r(CMt,"from_config()"),CMt.forEach(t),dcr=r(Boe,` class
method.`),Boe.forEach(t),ccr=i(_l),B8=n(_l,"P",{});var tXe=s(B8);fcr=r(tXe,"This class cannot be instantiated directly using "),Tbe=n(tXe,"CODE",{});var wMt=s(Tbe);mcr=r(wMt,"__init__()"),wMt.forEach(t),gcr=r(tXe," (throws an error)."),tXe.forEach(t),hcr=i(_l),wt=n(_l,"DIV",{class:!0});var nA=s(wt);T(I8.$$.fragment,nA),pcr=i(nA),Mbe=n(nA,"P",{});var AMt=s(Mbe);ucr=r(AMt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),AMt.forEach(t),_cr=i(nA),jd=n(nA,"P",{});var Ioe=s(jd);bcr=r(Ioe,`Note:
Loading a model from its configuration file does `),Ebe=n(Ioe,"STRONG",{});var LMt=s(Ebe);vcr=r(LMt,"not"),LMt.forEach(t),Fcr=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=n(Ioe,"A",{href:!0});var yMt=s(cQ);Tcr=r(yMt,"from_pretrained()"),yMt.forEach(t),Mcr=r(Ioe," to load the model weights."),Ioe.forEach(t),Ecr=i(nA),T(n6.$$.fragment,nA),nA.forEach(t),Ccr=i(_l),uo=n(_l,"DIV",{class:!0});var Ea=s(uo);T(N8.$$.fragment,Ea),wcr=i(Ea),Cbe=n(Ea,"P",{});var xMt=s(Cbe);Acr=r(xMt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),xMt.forEach(t),Lcr=i(Ea),Ya=n(Ea,"P",{});var sA=s(Ya);ycr=r(sA,"The model class to instantiate is selected based on the "),wbe=n(sA,"CODE",{});var $Mt=s(wbe);xcr=r($Mt,"model_type"),$Mt.forEach(t),$cr=r(sA,` property of the config object (either
passed as an argument or loaded from `),Abe=n(sA,"CODE",{});var kMt=s(Abe);kcr=r(kMt,"pretrained_model_name_or_path"),kMt.forEach(t),Scr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=n(sA,"CODE",{});var SMt=s(Lbe);Rcr=r(SMt,"pretrained_model_name_or_path"),SMt.forEach(t),Pcr=r(sA,":"),sA.forEach(t),Bcr=i(Ea),Dd=n(Ea,"UL",{});var Noe=s(Dd);s6=n(Noe,"LI",{});var WPe=s(s6);ybe=n(WPe,"STRONG",{});var RMt=s(ybe);Icr=r(RMt,"deit"),RMt.forEach(t),Ncr=r(WPe," \u2014 "),fQ=n(WPe,"A",{href:!0});var PMt=s(fQ);qcr=r(PMt,"DeiTForMaskedImageModeling"),PMt.forEach(t),jcr=r(WPe," (DeiT model)"),WPe.forEach(t),Dcr=i(Noe),l6=n(Noe,"LI",{});var QPe=s(l6);xbe=n(QPe,"STRONG",{});var BMt=s(xbe);Gcr=r(BMt,"swin"),BMt.forEach(t),Ocr=r(QPe," \u2014 "),mQ=n(QPe,"A",{href:!0});var IMt=s(mQ);Vcr=r(IMt,"SwinForMaskedImageModeling"),IMt.forEach(t),Xcr=r(QPe," (Swin Transformer model)"),QPe.forEach(t),zcr=i(Noe),i6=n(Noe,"LI",{});var HPe=s(i6);$be=n(HPe,"STRONG",{});var NMt=s($be);Wcr=r(NMt,"vit"),NMt.forEach(t),Qcr=r(HPe," \u2014 "),gQ=n(HPe,"A",{href:!0});var qMt=s(gQ);Hcr=r(qMt,"ViTForMaskedImageModeling"),qMt.forEach(t),Ucr=r(HPe," (ViT model)"),HPe.forEach(t),Noe.forEach(t),Jcr=i(Ea),d6=n(Ea,"P",{});var UPe=s(d6);Ycr=r(UPe,"The model is set in evaluation mode by default using "),kbe=n(UPe,"CODE",{});var jMt=s(kbe);Kcr=r(jMt,"model.eval()"),jMt.forEach(t),Zcr=r(UPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sbe=n(UPe,"CODE",{});var DMt=s(Sbe);efr=r(DMt,"model.train()"),DMt.forEach(t),UPe.forEach(t),ofr=i(Ea),T(c6.$$.fragment,Ea),Ea.forEach(t),_l.forEach(t),YGe=i(f),Gd=n(f,"H2",{class:!0});var aXe=s(Gd);f6=n(aXe,"A",{id:!0,class:!0,href:!0});var GMt=s(f6);Rbe=n(GMt,"SPAN",{});var OMt=s(Rbe);T(q8.$$.fragment,OMt),OMt.forEach(t),GMt.forEach(t),rfr=i(aXe),Pbe=n(aXe,"SPAN",{});var VMt=s(Pbe);tfr=r(VMt,"AutoModelForObjectDetection"),VMt.forEach(t),aXe.forEach(t),KGe=i(f),Uo=n(f,"DIV",{class:!0});var bl=s(Uo);T(j8.$$.fragment,bl),afr=i(bl),Od=n(bl,"P",{});var qoe=s(Od);nfr=r(qoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),hQ=n(qoe,"A",{href:!0});var XMt=s(hQ);sfr=r(XMt,"from_pretrained()"),XMt.forEach(t),lfr=r(qoe," class method or the "),pQ=n(qoe,"A",{href:!0});var zMt=s(pQ);ifr=r(zMt,"from_config()"),zMt.forEach(t),dfr=r(qoe,` class
method.`),qoe.forEach(t),cfr=i(bl),D8=n(bl,"P",{});var nXe=s(D8);ffr=r(nXe,"This class cannot be instantiated directly using "),Bbe=n(nXe,"CODE",{});var WMt=s(Bbe);mfr=r(WMt,"__init__()"),WMt.forEach(t),gfr=r(nXe," (throws an error)."),nXe.forEach(t),hfr=i(bl),At=n(bl,"DIV",{class:!0});var lA=s(At);T(G8.$$.fragment,lA),pfr=i(lA),Ibe=n(lA,"P",{});var QMt=s(Ibe);ufr=r(QMt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),QMt.forEach(t),_fr=i(lA),Vd=n(lA,"P",{});var joe=s(Vd);bfr=r(joe,`Note:
Loading a model from its configuration file does `),Nbe=n(joe,"STRONG",{});var HMt=s(Nbe);vfr=r(HMt,"not"),HMt.forEach(t),Ffr=r(joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(joe,"A",{href:!0});var UMt=s(uQ);Tfr=r(UMt,"from_pretrained()"),UMt.forEach(t),Mfr=r(joe," to load the model weights."),joe.forEach(t),Efr=i(lA),T(m6.$$.fragment,lA),lA.forEach(t),Cfr=i(bl),_o=n(bl,"DIV",{class:!0});var Ca=s(_o);T(O8.$$.fragment,Ca),wfr=i(Ca),qbe=n(Ca,"P",{});var JMt=s(qbe);Afr=r(JMt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),JMt.forEach(t),Lfr=i(Ca),Ka=n(Ca,"P",{});var iA=s(Ka);yfr=r(iA,"The model class to instantiate is selected based on the "),jbe=n(iA,"CODE",{});var YMt=s(jbe);xfr=r(YMt,"model_type"),YMt.forEach(t),$fr=r(iA,` property of the config object (either
passed as an argument or loaded from `),Dbe=n(iA,"CODE",{});var KMt=s(Dbe);kfr=r(KMt,"pretrained_model_name_or_path"),KMt.forEach(t),Sfr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=n(iA,"CODE",{});var ZMt=s(Gbe);Rfr=r(ZMt,"pretrained_model_name_or_path"),ZMt.forEach(t),Pfr=r(iA,":"),iA.forEach(t),Bfr=i(Ca),V8=n(Ca,"UL",{});var sXe=s(V8);g6=n(sXe,"LI",{});var JPe=s(g6);Obe=n(JPe,"STRONG",{});var e4t=s(Obe);Ifr=r(e4t,"detr"),e4t.forEach(t),Nfr=r(JPe," \u2014 "),_Q=n(JPe,"A",{href:!0});var o4t=s(_Q);qfr=r(o4t,"DetrForObjectDetection"),o4t.forEach(t),jfr=r(JPe," (DETR model)"),JPe.forEach(t),Dfr=i(sXe),h6=n(sXe,"LI",{});var YPe=s(h6);Vbe=n(YPe,"STRONG",{});var r4t=s(Vbe);Gfr=r(r4t,"yolos"),r4t.forEach(t),Ofr=r(YPe," \u2014 "),bQ=n(YPe,"A",{href:!0});var t4t=s(bQ);Vfr=r(t4t,"YolosForObjectDetection"),t4t.forEach(t),Xfr=r(YPe," (YOLOS model)"),YPe.forEach(t),sXe.forEach(t),zfr=i(Ca),p6=n(Ca,"P",{});var KPe=s(p6);Wfr=r(KPe,"The model is set in evaluation mode by default using "),Xbe=n(KPe,"CODE",{});var a4t=s(Xbe);Qfr=r(a4t,"model.eval()"),a4t.forEach(t),Hfr=r(KPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zbe=n(KPe,"CODE",{});var n4t=s(zbe);Ufr=r(n4t,"model.train()"),n4t.forEach(t),KPe.forEach(t),Jfr=i(Ca),T(u6.$$.fragment,Ca),Ca.forEach(t),bl.forEach(t),ZGe=i(f),Xd=n(f,"H2",{class:!0});var lXe=s(Xd);_6=n(lXe,"A",{id:!0,class:!0,href:!0});var s4t=s(_6);Wbe=n(s4t,"SPAN",{});var l4t=s(Wbe);T(X8.$$.fragment,l4t),l4t.forEach(t),s4t.forEach(t),Yfr=i(lXe),Qbe=n(lXe,"SPAN",{});var i4t=s(Qbe);Kfr=r(i4t,"AutoModelForImageSegmentation"),i4t.forEach(t),lXe.forEach(t),eOe=i(f),Jo=n(f,"DIV",{class:!0});var vl=s(Jo);T(z8.$$.fragment,vl),Zfr=i(vl),zd=n(vl,"P",{});var Doe=s(zd);emr=r(Doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),vQ=n(Doe,"A",{href:!0});var d4t=s(vQ);omr=r(d4t,"from_pretrained()"),d4t.forEach(t),rmr=r(Doe," class method or the "),FQ=n(Doe,"A",{href:!0});var c4t=s(FQ);tmr=r(c4t,"from_config()"),c4t.forEach(t),amr=r(Doe,` class
method.`),Doe.forEach(t),nmr=i(vl),W8=n(vl,"P",{});var iXe=s(W8);smr=r(iXe,"This class cannot be instantiated directly using "),Hbe=n(iXe,"CODE",{});var f4t=s(Hbe);lmr=r(f4t,"__init__()"),f4t.forEach(t),imr=r(iXe," (throws an error)."),iXe.forEach(t),dmr=i(vl),Lt=n(vl,"DIV",{class:!0});var dA=s(Lt);T(Q8.$$.fragment,dA),cmr=i(dA),Ube=n(dA,"P",{});var m4t=s(Ube);fmr=r(m4t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),m4t.forEach(t),mmr=i(dA),Wd=n(dA,"P",{});var Goe=s(Wd);gmr=r(Goe,`Note:
Loading a model from its configuration file does `),Jbe=n(Goe,"STRONG",{});var g4t=s(Jbe);hmr=r(g4t,"not"),g4t.forEach(t),pmr=r(Goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(Goe,"A",{href:!0});var h4t=s(TQ);umr=r(h4t,"from_pretrained()"),h4t.forEach(t),_mr=r(Goe," to load the model weights."),Goe.forEach(t),bmr=i(dA),T(b6.$$.fragment,dA),dA.forEach(t),vmr=i(vl),bo=n(vl,"DIV",{class:!0});var wa=s(bo);T(H8.$$.fragment,wa),Fmr=i(wa),Ybe=n(wa,"P",{});var p4t=s(Ybe);Tmr=r(p4t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),p4t.forEach(t),Mmr=i(wa),Za=n(wa,"P",{});var cA=s(Za);Emr=r(cA,"The model class to instantiate is selected based on the "),Kbe=n(cA,"CODE",{});var u4t=s(Kbe);Cmr=r(u4t,"model_type"),u4t.forEach(t),wmr=r(cA,` property of the config object (either
passed as an argument or loaded from `),Zbe=n(cA,"CODE",{});var _4t=s(Zbe);Amr=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),Lmr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=n(cA,"CODE",{});var b4t=s(eve);ymr=r(b4t,"pretrained_model_name_or_path"),b4t.forEach(t),xmr=r(cA,":"),cA.forEach(t),$mr=i(wa),ove=n(wa,"UL",{});var v4t=s(ove);v6=n(v4t,"LI",{});var ZPe=s(v6);rve=n(ZPe,"STRONG",{});var F4t=s(rve);kmr=r(F4t,"detr"),F4t.forEach(t),Smr=r(ZPe," \u2014 "),MQ=n(ZPe,"A",{href:!0});var T4t=s(MQ);Rmr=r(T4t,"DetrForSegmentation"),T4t.forEach(t),Pmr=r(ZPe," (DETR model)"),ZPe.forEach(t),v4t.forEach(t),Bmr=i(wa),F6=n(wa,"P",{});var eBe=s(F6);Imr=r(eBe,"The model is set in evaluation mode by default using "),tve=n(eBe,"CODE",{});var M4t=s(tve);Nmr=r(M4t,"model.eval()"),M4t.forEach(t),qmr=r(eBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ave=n(eBe,"CODE",{});var E4t=s(ave);jmr=r(E4t,"model.train()"),E4t.forEach(t),eBe.forEach(t),Dmr=i(wa),T(T6.$$.fragment,wa),wa.forEach(t),vl.forEach(t),oOe=i(f),Qd=n(f,"H2",{class:!0});var dXe=s(Qd);M6=n(dXe,"A",{id:!0,class:!0,href:!0});var C4t=s(M6);nve=n(C4t,"SPAN",{});var w4t=s(nve);T(U8.$$.fragment,w4t),w4t.forEach(t),C4t.forEach(t),Gmr=i(dXe),sve=n(dXe,"SPAN",{});var A4t=s(sve);Omr=r(A4t,"AutoModelForSemanticSegmentation"),A4t.forEach(t),dXe.forEach(t),rOe=i(f),Yo=n(f,"DIV",{class:!0});var Fl=s(Yo);T(J8.$$.fragment,Fl),Vmr=i(Fl),Hd=n(Fl,"P",{});var Ooe=s(Hd);Xmr=r(Ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),EQ=n(Ooe,"A",{href:!0});var L4t=s(EQ);zmr=r(L4t,"from_pretrained()"),L4t.forEach(t),Wmr=r(Ooe," class method or the "),CQ=n(Ooe,"A",{href:!0});var y4t=s(CQ);Qmr=r(y4t,"from_config()"),y4t.forEach(t),Hmr=r(Ooe,` class
method.`),Ooe.forEach(t),Umr=i(Fl),Y8=n(Fl,"P",{});var cXe=s(Y8);Jmr=r(cXe,"This class cannot be instantiated directly using "),lve=n(cXe,"CODE",{});var x4t=s(lve);Ymr=r(x4t,"__init__()"),x4t.forEach(t),Kmr=r(cXe," (throws an error)."),cXe.forEach(t),Zmr=i(Fl),yt=n(Fl,"DIV",{class:!0});var fA=s(yt);T(K8.$$.fragment,fA),egr=i(fA),ive=n(fA,"P",{});var $4t=s(ive);ogr=r($4t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),$4t.forEach(t),rgr=i(fA),Ud=n(fA,"P",{});var Voe=s(Ud);tgr=r(Voe,`Note:
Loading a model from its configuration file does `),dve=n(Voe,"STRONG",{});var k4t=s(dve);agr=r(k4t,"not"),k4t.forEach(t),ngr=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=n(Voe,"A",{href:!0});var S4t=s(wQ);sgr=r(S4t,"from_pretrained()"),S4t.forEach(t),lgr=r(Voe," to load the model weights."),Voe.forEach(t),igr=i(fA),T(E6.$$.fragment,fA),fA.forEach(t),dgr=i(Fl),vo=n(Fl,"DIV",{class:!0});var Aa=s(vo);T(Z8.$$.fragment,Aa),cgr=i(Aa),cve=n(Aa,"P",{});var R4t=s(cve);fgr=r(R4t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),R4t.forEach(t),mgr=i(Aa),en=n(Aa,"P",{});var mA=s(en);ggr=r(mA,"The model class to instantiate is selected based on the "),fve=n(mA,"CODE",{});var P4t=s(fve);hgr=r(P4t,"model_type"),P4t.forEach(t),pgr=r(mA,` property of the config object (either
passed as an argument or loaded from `),mve=n(mA,"CODE",{});var B4t=s(mve);ugr=r(B4t,"pretrained_model_name_or_path"),B4t.forEach(t),_gr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=n(mA,"CODE",{});var I4t=s(gve);bgr=r(I4t,"pretrained_model_name_or_path"),I4t.forEach(t),vgr=r(mA,":"),mA.forEach(t),Fgr=i(Aa),on=n(Aa,"UL",{});var gA=s(on);C6=n(gA,"LI",{});var oBe=s(C6);hve=n(oBe,"STRONG",{});var N4t=s(hve);Tgr=r(N4t,"beit"),N4t.forEach(t),Mgr=r(oBe," \u2014 "),AQ=n(oBe,"A",{href:!0});var q4t=s(AQ);Egr=r(q4t,"BeitForSemanticSegmentation"),q4t.forEach(t),Cgr=r(oBe," (BEiT model)"),oBe.forEach(t),wgr=i(gA),w6=n(gA,"LI",{});var rBe=s(w6);pve=n(rBe,"STRONG",{});var j4t=s(pve);Agr=r(j4t,"data2vec-vision"),j4t.forEach(t),Lgr=r(rBe," \u2014 "),LQ=n(rBe,"A",{href:!0});var D4t=s(LQ);ygr=r(D4t,"Data2VecVisionForSemanticSegmentation"),D4t.forEach(t),xgr=r(rBe," (Data2VecVision model)"),rBe.forEach(t),$gr=i(gA),A6=n(gA,"LI",{});var tBe=s(A6);uve=n(tBe,"STRONG",{});var G4t=s(uve);kgr=r(G4t,"dpt"),G4t.forEach(t),Sgr=r(tBe," \u2014 "),yQ=n(tBe,"A",{href:!0});var O4t=s(yQ);Rgr=r(O4t,"DPTForSemanticSegmentation"),O4t.forEach(t),Pgr=r(tBe," (DPT model)"),tBe.forEach(t),Bgr=i(gA),L6=n(gA,"LI",{});var aBe=s(L6);_ve=n(aBe,"STRONG",{});var V4t=s(_ve);Igr=r(V4t,"segformer"),V4t.forEach(t),Ngr=r(aBe," \u2014 "),xQ=n(aBe,"A",{href:!0});var X4t=s(xQ);qgr=r(X4t,"SegformerForSemanticSegmentation"),X4t.forEach(t),jgr=r(aBe," (SegFormer model)"),aBe.forEach(t),gA.forEach(t),Dgr=i(Aa),y6=n(Aa,"P",{});var nBe=s(y6);Ggr=r(nBe,"The model is set in evaluation mode by default using "),bve=n(nBe,"CODE",{});var z4t=s(bve);Ogr=r(z4t,"model.eval()"),z4t.forEach(t),Vgr=r(nBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vve=n(nBe,"CODE",{});var W4t=s(vve);Xgr=r(W4t,"model.train()"),W4t.forEach(t),nBe.forEach(t),zgr=i(Aa),T(x6.$$.fragment,Aa),Aa.forEach(t),Fl.forEach(t),tOe=i(f),Jd=n(f,"H2",{class:!0});var fXe=s(Jd);$6=n(fXe,"A",{id:!0,class:!0,href:!0});var Q4t=s($6);Fve=n(Q4t,"SPAN",{});var H4t=s(Fve);T(e9.$$.fragment,H4t),H4t.forEach(t),Q4t.forEach(t),Wgr=i(fXe),Tve=n(fXe,"SPAN",{});var U4t=s(Tve);Qgr=r(U4t,"AutoModelForInstanceSegmentation"),U4t.forEach(t),fXe.forEach(t),aOe=i(f),Ko=n(f,"DIV",{class:!0});var Tl=s(Ko);T(o9.$$.fragment,Tl),Hgr=i(Tl),Yd=n(Tl,"P",{});var Xoe=s(Yd);Ugr=r(Xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),$Q=n(Xoe,"A",{href:!0});var J4t=s($Q);Jgr=r(J4t,"from_pretrained()"),J4t.forEach(t),Ygr=r(Xoe," class method or the "),kQ=n(Xoe,"A",{href:!0});var Y4t=s(kQ);Kgr=r(Y4t,"from_config()"),Y4t.forEach(t),Zgr=r(Xoe,` class
method.`),Xoe.forEach(t),ehr=i(Tl),r9=n(Tl,"P",{});var mXe=s(r9);ohr=r(mXe,"This class cannot be instantiated directly using "),Mve=n(mXe,"CODE",{});var K4t=s(Mve);rhr=r(K4t,"__init__()"),K4t.forEach(t),thr=r(mXe," (throws an error)."),mXe.forEach(t),ahr=i(Tl),xt=n(Tl,"DIV",{class:!0});var hA=s(xt);T(t9.$$.fragment,hA),nhr=i(hA),Eve=n(hA,"P",{});var Z4t=s(Eve);shr=r(Z4t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Z4t.forEach(t),lhr=i(hA),Kd=n(hA,"P",{});var zoe=s(Kd);ihr=r(zoe,`Note:
Loading a model from its configuration file does `),Cve=n(zoe,"STRONG",{});var eEt=s(Cve);dhr=r(eEt,"not"),eEt.forEach(t),chr=r(zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(zoe,"A",{href:!0});var oEt=s(SQ);fhr=r(oEt,"from_pretrained()"),oEt.forEach(t),mhr=r(zoe," to load the model weights."),zoe.forEach(t),ghr=i(hA),T(k6.$$.fragment,hA),hA.forEach(t),hhr=i(Tl),Fo=n(Tl,"DIV",{class:!0});var La=s(Fo);T(a9.$$.fragment,La),phr=i(La),wve=n(La,"P",{});var rEt=s(wve);uhr=r(rEt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),rEt.forEach(t),_hr=i(La),rn=n(La,"P",{});var pA=s(rn);bhr=r(pA,"The model class to instantiate is selected based on the "),Ave=n(pA,"CODE",{});var tEt=s(Ave);vhr=r(tEt,"model_type"),tEt.forEach(t),Fhr=r(pA,` property of the config object (either
passed as an argument or loaded from `),Lve=n(pA,"CODE",{});var aEt=s(Lve);Thr=r(aEt,"pretrained_model_name_or_path"),aEt.forEach(t),Mhr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=n(pA,"CODE",{});var nEt=s(yve);Ehr=r(nEt,"pretrained_model_name_or_path"),nEt.forEach(t),Chr=r(pA,":"),pA.forEach(t),whr=i(La),xve=n(La,"UL",{});var sEt=s(xve);S6=n(sEt,"LI",{});var sBe=s(S6);$ve=n(sBe,"STRONG",{});var lEt=s($ve);Ahr=r(lEt,"maskformer"),lEt.forEach(t),Lhr=r(sBe," \u2014 "),RQ=n(sBe,"A",{href:!0});var iEt=s(RQ);yhr=r(iEt,"MaskFormerForInstanceSegmentation"),iEt.forEach(t),xhr=r(sBe," (MaskFormer model)"),sBe.forEach(t),sEt.forEach(t),$hr=i(La),R6=n(La,"P",{});var lBe=s(R6);khr=r(lBe,"The model is set in evaluation mode by default using "),kve=n(lBe,"CODE",{});var dEt=s(kve);Shr=r(dEt,"model.eval()"),dEt.forEach(t),Rhr=r(lBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sve=n(lBe,"CODE",{});var cEt=s(Sve);Phr=r(cEt,"model.train()"),cEt.forEach(t),lBe.forEach(t),Bhr=i(La),T(P6.$$.fragment,La),La.forEach(t),Tl.forEach(t),nOe=i(f),Zd=n(f,"H2",{class:!0});var gXe=s(Zd);B6=n(gXe,"A",{id:!0,class:!0,href:!0});var fEt=s(B6);Rve=n(fEt,"SPAN",{});var mEt=s(Rve);T(n9.$$.fragment,mEt),mEt.forEach(t),fEt.forEach(t),Ihr=i(gXe),Pve=n(gXe,"SPAN",{});var gEt=s(Pve);Nhr=r(gEt,"TFAutoModel"),gEt.forEach(t),gXe.forEach(t),sOe=i(f),Zo=n(f,"DIV",{class:!0});var Ml=s(Zo);T(s9.$$.fragment,Ml),qhr=i(Ml),ec=n(Ml,"P",{});var Woe=s(ec);jhr=r(Woe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),PQ=n(Woe,"A",{href:!0});var hEt=s(PQ);Dhr=r(hEt,"from_pretrained()"),hEt.forEach(t),Ghr=r(Woe," class method or the "),BQ=n(Woe,"A",{href:!0});var pEt=s(BQ);Ohr=r(pEt,"from_config()"),pEt.forEach(t),Vhr=r(Woe,` class
method.`),Woe.forEach(t),Xhr=i(Ml),l9=n(Ml,"P",{});var hXe=s(l9);zhr=r(hXe,"This class cannot be instantiated directly using "),Bve=n(hXe,"CODE",{});var uEt=s(Bve);Whr=r(uEt,"__init__()"),uEt.forEach(t),Qhr=r(hXe," (throws an error)."),hXe.forEach(t),Hhr=i(Ml),$t=n(Ml,"DIV",{class:!0});var uA=s($t);T(i9.$$.fragment,uA),Uhr=i(uA),Ive=n(uA,"P",{});var _Et=s(Ive);Jhr=r(_Et,"Instantiates one of the base model classes of the library from a configuration."),_Et.forEach(t),Yhr=i(uA),oc=n(uA,"P",{});var Qoe=s(oc);Khr=r(Qoe,`Note:
Loading a model from its configuration file does `),Nve=n(Qoe,"STRONG",{});var bEt=s(Nve);Zhr=r(bEt,"not"),bEt.forEach(t),epr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(Qoe,"A",{href:!0});var vEt=s(IQ);opr=r(vEt,"from_pretrained()"),vEt.forEach(t),rpr=r(Qoe," to load the model weights."),Qoe.forEach(t),tpr=i(uA),T(I6.$$.fragment,uA),uA.forEach(t),apr=i(Ml),Lr=n(Ml,"DIV",{class:!0});var El=s(Lr);T(d9.$$.fragment,El),npr=i(El),qve=n(El,"P",{});var FEt=s(qve);spr=r(FEt,"Instantiate one of the base model classes of the library from a pretrained model."),FEt.forEach(t),lpr=i(El),tn=n(El,"P",{});var _A=s(tn);ipr=r(_A,"The model class to instantiate is selected based on the "),jve=n(_A,"CODE",{});var TEt=s(jve);dpr=r(TEt,"model_type"),TEt.forEach(t),cpr=r(_A,` property of the config object (either
passed as an argument or loaded from `),Dve=n(_A,"CODE",{});var MEt=s(Dve);fpr=r(MEt,"pretrained_model_name_or_path"),MEt.forEach(t),mpr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=n(_A,"CODE",{});var EEt=s(Gve);gpr=r(EEt,"pretrained_model_name_or_path"),EEt.forEach(t),hpr=r(_A,":"),_A.forEach(t),ppr=i(El),q=n(El,"UL",{});var D=s(q);N6=n(D,"LI",{});var iBe=s(N6);Ove=n(iBe,"STRONG",{});var CEt=s(Ove);upr=r(CEt,"albert"),CEt.forEach(t),_pr=r(iBe," \u2014 "),NQ=n(iBe,"A",{href:!0});var wEt=s(NQ);bpr=r(wEt,"TFAlbertModel"),wEt.forEach(t),vpr=r(iBe," (ALBERT model)"),iBe.forEach(t),Fpr=i(D),q6=n(D,"LI",{});var dBe=s(q6);Vve=n(dBe,"STRONG",{});var AEt=s(Vve);Tpr=r(AEt,"bart"),AEt.forEach(t),Mpr=r(dBe," \u2014 "),qQ=n(dBe,"A",{href:!0});var LEt=s(qQ);Epr=r(LEt,"TFBartModel"),LEt.forEach(t),Cpr=r(dBe," (BART model)"),dBe.forEach(t),wpr=i(D),j6=n(D,"LI",{});var cBe=s(j6);Xve=n(cBe,"STRONG",{});var yEt=s(Xve);Apr=r(yEt,"bert"),yEt.forEach(t),Lpr=r(cBe," \u2014 "),jQ=n(cBe,"A",{href:!0});var xEt=s(jQ);ypr=r(xEt,"TFBertModel"),xEt.forEach(t),xpr=r(cBe," (BERT model)"),cBe.forEach(t),$pr=i(D),D6=n(D,"LI",{});var fBe=s(D6);zve=n(fBe,"STRONG",{});var $Et=s(zve);kpr=r($Et,"blenderbot"),$Et.forEach(t),Spr=r(fBe," \u2014 "),DQ=n(fBe,"A",{href:!0});var kEt=s(DQ);Rpr=r(kEt,"TFBlenderbotModel"),kEt.forEach(t),Ppr=r(fBe," (Blenderbot model)"),fBe.forEach(t),Bpr=i(D),G6=n(D,"LI",{});var mBe=s(G6);Wve=n(mBe,"STRONG",{});var SEt=s(Wve);Ipr=r(SEt,"blenderbot-small"),SEt.forEach(t),Npr=r(mBe," \u2014 "),GQ=n(mBe,"A",{href:!0});var REt=s(GQ);qpr=r(REt,"TFBlenderbotSmallModel"),REt.forEach(t),jpr=r(mBe," (BlenderbotSmall model)"),mBe.forEach(t),Dpr=i(D),O6=n(D,"LI",{});var gBe=s(O6);Qve=n(gBe,"STRONG",{});var PEt=s(Qve);Gpr=r(PEt,"camembert"),PEt.forEach(t),Opr=r(gBe," \u2014 "),OQ=n(gBe,"A",{href:!0});var BEt=s(OQ);Vpr=r(BEt,"TFCamembertModel"),BEt.forEach(t),Xpr=r(gBe," (CamemBERT model)"),gBe.forEach(t),zpr=i(D),V6=n(D,"LI",{});var hBe=s(V6);Hve=n(hBe,"STRONG",{});var IEt=s(Hve);Wpr=r(IEt,"clip"),IEt.forEach(t),Qpr=r(hBe," \u2014 "),VQ=n(hBe,"A",{href:!0});var NEt=s(VQ);Hpr=r(NEt,"TFCLIPModel"),NEt.forEach(t),Upr=r(hBe," (CLIP model)"),hBe.forEach(t),Jpr=i(D),X6=n(D,"LI",{});var pBe=s(X6);Uve=n(pBe,"STRONG",{});var qEt=s(Uve);Ypr=r(qEt,"convbert"),qEt.forEach(t),Kpr=r(pBe," \u2014 "),XQ=n(pBe,"A",{href:!0});var jEt=s(XQ);Zpr=r(jEt,"TFConvBertModel"),jEt.forEach(t),eur=r(pBe," (ConvBERT model)"),pBe.forEach(t),our=i(D),z6=n(D,"LI",{});var uBe=s(z6);Jve=n(uBe,"STRONG",{});var DEt=s(Jve);rur=r(DEt,"convnext"),DEt.forEach(t),tur=r(uBe," \u2014 "),zQ=n(uBe,"A",{href:!0});var GEt=s(zQ);aur=r(GEt,"TFConvNextModel"),GEt.forEach(t),nur=r(uBe," (ConvNeXT model)"),uBe.forEach(t),sur=i(D),W6=n(D,"LI",{});var _Be=s(W6);Yve=n(_Be,"STRONG",{});var OEt=s(Yve);lur=r(OEt,"ctrl"),OEt.forEach(t),iur=r(_Be," \u2014 "),WQ=n(_Be,"A",{href:!0});var VEt=s(WQ);dur=r(VEt,"TFCTRLModel"),VEt.forEach(t),cur=r(_Be," (CTRL model)"),_Be.forEach(t),fur=i(D),Q6=n(D,"LI",{});var bBe=s(Q6);Kve=n(bBe,"STRONG",{});var XEt=s(Kve);mur=r(XEt,"data2vec-vision"),XEt.forEach(t),gur=r(bBe," \u2014 "),QQ=n(bBe,"A",{href:!0});var zEt=s(QQ);hur=r(zEt,"TFData2VecVisionModel"),zEt.forEach(t),pur=r(bBe," (Data2VecVision model)"),bBe.forEach(t),uur=i(D),H6=n(D,"LI",{});var vBe=s(H6);Zve=n(vBe,"STRONG",{});var WEt=s(Zve);_ur=r(WEt,"deberta"),WEt.forEach(t),bur=r(vBe," \u2014 "),HQ=n(vBe,"A",{href:!0});var QEt=s(HQ);vur=r(QEt,"TFDebertaModel"),QEt.forEach(t),Fur=r(vBe," (DeBERTa model)"),vBe.forEach(t),Tur=i(D),U6=n(D,"LI",{});var FBe=s(U6);e3e=n(FBe,"STRONG",{});var HEt=s(e3e);Mur=r(HEt,"deberta-v2"),HEt.forEach(t),Eur=r(FBe," \u2014 "),UQ=n(FBe,"A",{href:!0});var UEt=s(UQ);Cur=r(UEt,"TFDebertaV2Model"),UEt.forEach(t),wur=r(FBe," (DeBERTa-v2 model)"),FBe.forEach(t),Aur=i(D),J6=n(D,"LI",{});var TBe=s(J6);o3e=n(TBe,"STRONG",{});var JEt=s(o3e);Lur=r(JEt,"distilbert"),JEt.forEach(t),yur=r(TBe," \u2014 "),JQ=n(TBe,"A",{href:!0});var YEt=s(JQ);xur=r(YEt,"TFDistilBertModel"),YEt.forEach(t),$ur=r(TBe," (DistilBERT model)"),TBe.forEach(t),kur=i(D),Y6=n(D,"LI",{});var MBe=s(Y6);r3e=n(MBe,"STRONG",{});var KEt=s(r3e);Sur=r(KEt,"dpr"),KEt.forEach(t),Rur=r(MBe," \u2014 "),YQ=n(MBe,"A",{href:!0});var ZEt=s(YQ);Pur=r(ZEt,"TFDPRQuestionEncoder"),ZEt.forEach(t),Bur=r(MBe," (DPR model)"),MBe.forEach(t),Iur=i(D),K6=n(D,"LI",{});var EBe=s(K6);t3e=n(EBe,"STRONG",{});var eCt=s(t3e);Nur=r(eCt,"electra"),eCt.forEach(t),qur=r(EBe," \u2014 "),KQ=n(EBe,"A",{href:!0});var oCt=s(KQ);jur=r(oCt,"TFElectraModel"),oCt.forEach(t),Dur=r(EBe," (ELECTRA model)"),EBe.forEach(t),Gur=i(D),Z6=n(D,"LI",{});var CBe=s(Z6);a3e=n(CBe,"STRONG",{});var rCt=s(a3e);Our=r(rCt,"flaubert"),rCt.forEach(t),Vur=r(CBe," \u2014 "),ZQ=n(CBe,"A",{href:!0});var tCt=s(ZQ);Xur=r(tCt,"TFFlaubertModel"),tCt.forEach(t),zur=r(CBe," (FlauBERT model)"),CBe.forEach(t),Wur=i(D),Xs=n(D,"LI",{});var Xk=s(Xs);n3e=n(Xk,"STRONG",{});var aCt=s(n3e);Qur=r(aCt,"funnel"),aCt.forEach(t),Hur=r(Xk," \u2014 "),eH=n(Xk,"A",{href:!0});var nCt=s(eH);Uur=r(nCt,"TFFunnelModel"),nCt.forEach(t),Jur=r(Xk," or "),oH=n(Xk,"A",{href:!0});var sCt=s(oH);Yur=r(sCt,"TFFunnelBaseModel"),sCt.forEach(t),Kur=r(Xk," (Funnel Transformer model)"),Xk.forEach(t),Zur=i(D),eT=n(D,"LI",{});var wBe=s(eT);s3e=n(wBe,"STRONG",{});var lCt=s(s3e);e_r=r(lCt,"gpt2"),lCt.forEach(t),o_r=r(wBe," \u2014 "),rH=n(wBe,"A",{href:!0});var iCt=s(rH);r_r=r(iCt,"TFGPT2Model"),iCt.forEach(t),t_r=r(wBe," (OpenAI GPT-2 model)"),wBe.forEach(t),a_r=i(D),oT=n(D,"LI",{});var ABe=s(oT);l3e=n(ABe,"STRONG",{});var dCt=s(l3e);n_r=r(dCt,"gptj"),dCt.forEach(t),s_r=r(ABe," \u2014 "),tH=n(ABe,"A",{href:!0});var cCt=s(tH);l_r=r(cCt,"TFGPTJModel"),cCt.forEach(t),i_r=r(ABe," (GPT-J model)"),ABe.forEach(t),d_r=i(D),rT=n(D,"LI",{});var LBe=s(rT);i3e=n(LBe,"STRONG",{});var fCt=s(i3e);c_r=r(fCt,"hubert"),fCt.forEach(t),f_r=r(LBe," \u2014 "),aH=n(LBe,"A",{href:!0});var mCt=s(aH);m_r=r(mCt,"TFHubertModel"),mCt.forEach(t),g_r=r(LBe," (Hubert model)"),LBe.forEach(t),h_r=i(D),tT=n(D,"LI",{});var yBe=s(tT);d3e=n(yBe,"STRONG",{});var gCt=s(d3e);p_r=r(gCt,"layoutlm"),gCt.forEach(t),u_r=r(yBe," \u2014 "),nH=n(yBe,"A",{href:!0});var hCt=s(nH);__r=r(hCt,"TFLayoutLMModel"),hCt.forEach(t),b_r=r(yBe," (LayoutLM model)"),yBe.forEach(t),v_r=i(D),aT=n(D,"LI",{});var xBe=s(aT);c3e=n(xBe,"STRONG",{});var pCt=s(c3e);F_r=r(pCt,"led"),pCt.forEach(t),T_r=r(xBe," \u2014 "),sH=n(xBe,"A",{href:!0});var uCt=s(sH);M_r=r(uCt,"TFLEDModel"),uCt.forEach(t),E_r=r(xBe," (LED model)"),xBe.forEach(t),C_r=i(D),nT=n(D,"LI",{});var $Be=s(nT);f3e=n($Be,"STRONG",{});var _Ct=s(f3e);w_r=r(_Ct,"longformer"),_Ct.forEach(t),A_r=r($Be," \u2014 "),lH=n($Be,"A",{href:!0});var bCt=s(lH);L_r=r(bCt,"TFLongformerModel"),bCt.forEach(t),y_r=r($Be," (Longformer model)"),$Be.forEach(t),x_r=i(D),sT=n(D,"LI",{});var kBe=s(sT);m3e=n(kBe,"STRONG",{});var vCt=s(m3e);$_r=r(vCt,"lxmert"),vCt.forEach(t),k_r=r(kBe," \u2014 "),iH=n(kBe,"A",{href:!0});var FCt=s(iH);S_r=r(FCt,"TFLxmertModel"),FCt.forEach(t),R_r=r(kBe," (LXMERT model)"),kBe.forEach(t),P_r=i(D),lT=n(D,"LI",{});var SBe=s(lT);g3e=n(SBe,"STRONG",{});var TCt=s(g3e);B_r=r(TCt,"marian"),TCt.forEach(t),I_r=r(SBe," \u2014 "),dH=n(SBe,"A",{href:!0});var MCt=s(dH);N_r=r(MCt,"TFMarianModel"),MCt.forEach(t),q_r=r(SBe," (Marian model)"),SBe.forEach(t),j_r=i(D),iT=n(D,"LI",{});var RBe=s(iT);h3e=n(RBe,"STRONG",{});var ECt=s(h3e);D_r=r(ECt,"mbart"),ECt.forEach(t),G_r=r(RBe," \u2014 "),cH=n(RBe,"A",{href:!0});var CCt=s(cH);O_r=r(CCt,"TFMBartModel"),CCt.forEach(t),V_r=r(RBe," (mBART model)"),RBe.forEach(t),X_r=i(D),dT=n(D,"LI",{});var PBe=s(dT);p3e=n(PBe,"STRONG",{});var wCt=s(p3e);z_r=r(wCt,"mobilebert"),wCt.forEach(t),W_r=r(PBe," \u2014 "),fH=n(PBe,"A",{href:!0});var ACt=s(fH);Q_r=r(ACt,"TFMobileBertModel"),ACt.forEach(t),H_r=r(PBe," (MobileBERT model)"),PBe.forEach(t),U_r=i(D),cT=n(D,"LI",{});var BBe=s(cT);u3e=n(BBe,"STRONG",{});var LCt=s(u3e);J_r=r(LCt,"mpnet"),LCt.forEach(t),Y_r=r(BBe," \u2014 "),mH=n(BBe,"A",{href:!0});var yCt=s(mH);K_r=r(yCt,"TFMPNetModel"),yCt.forEach(t),Z_r=r(BBe," (MPNet model)"),BBe.forEach(t),e1r=i(D),fT=n(D,"LI",{});var IBe=s(fT);_3e=n(IBe,"STRONG",{});var xCt=s(_3e);o1r=r(xCt,"mt5"),xCt.forEach(t),r1r=r(IBe," \u2014 "),gH=n(IBe,"A",{href:!0});var $Ct=s(gH);t1r=r($Ct,"TFMT5Model"),$Ct.forEach(t),a1r=r(IBe," (MT5 model)"),IBe.forEach(t),n1r=i(D),mT=n(D,"LI",{});var NBe=s(mT);b3e=n(NBe,"STRONG",{});var kCt=s(b3e);s1r=r(kCt,"openai-gpt"),kCt.forEach(t),l1r=r(NBe," \u2014 "),hH=n(NBe,"A",{href:!0});var SCt=s(hH);i1r=r(SCt,"TFOpenAIGPTModel"),SCt.forEach(t),d1r=r(NBe," (OpenAI GPT model)"),NBe.forEach(t),c1r=i(D),gT=n(D,"LI",{});var qBe=s(gT);v3e=n(qBe,"STRONG",{});var RCt=s(v3e);f1r=r(RCt,"opt"),RCt.forEach(t),m1r=r(qBe," \u2014 "),pH=n(qBe,"A",{href:!0});var PCt=s(pH);g1r=r(PCt,"TFOPTModel"),PCt.forEach(t),h1r=r(qBe," (OPT model)"),qBe.forEach(t),p1r=i(D),hT=n(D,"LI",{});var jBe=s(hT);F3e=n(jBe,"STRONG",{});var BCt=s(F3e);u1r=r(BCt,"pegasus"),BCt.forEach(t),_1r=r(jBe," \u2014 "),uH=n(jBe,"A",{href:!0});var ICt=s(uH);b1r=r(ICt,"TFPegasusModel"),ICt.forEach(t),v1r=r(jBe," (Pegasus model)"),jBe.forEach(t),F1r=i(D),pT=n(D,"LI",{});var DBe=s(pT);T3e=n(DBe,"STRONG",{});var NCt=s(T3e);T1r=r(NCt,"rembert"),NCt.forEach(t),M1r=r(DBe," \u2014 "),_H=n(DBe,"A",{href:!0});var qCt=s(_H);E1r=r(qCt,"TFRemBertModel"),qCt.forEach(t),C1r=r(DBe," (RemBERT model)"),DBe.forEach(t),w1r=i(D),uT=n(D,"LI",{});var GBe=s(uT);M3e=n(GBe,"STRONG",{});var jCt=s(M3e);A1r=r(jCt,"roberta"),jCt.forEach(t),L1r=r(GBe," \u2014 "),bH=n(GBe,"A",{href:!0});var DCt=s(bH);y1r=r(DCt,"TFRobertaModel"),DCt.forEach(t),x1r=r(GBe," (RoBERTa model)"),GBe.forEach(t),$1r=i(D),_T=n(D,"LI",{});var OBe=s(_T);E3e=n(OBe,"STRONG",{});var GCt=s(E3e);k1r=r(GCt,"roformer"),GCt.forEach(t),S1r=r(OBe," \u2014 "),vH=n(OBe,"A",{href:!0});var OCt=s(vH);R1r=r(OCt,"TFRoFormerModel"),OCt.forEach(t),P1r=r(OBe," (RoFormer model)"),OBe.forEach(t),B1r=i(D),bT=n(D,"LI",{});var VBe=s(bT);C3e=n(VBe,"STRONG",{});var VCt=s(C3e);I1r=r(VCt,"speech_to_text"),VCt.forEach(t),N1r=r(VBe," \u2014 "),FH=n(VBe,"A",{href:!0});var XCt=s(FH);q1r=r(XCt,"TFSpeech2TextModel"),XCt.forEach(t),j1r=r(VBe," (Speech2Text model)"),VBe.forEach(t),D1r=i(D),vT=n(D,"LI",{});var XBe=s(vT);w3e=n(XBe,"STRONG",{});var zCt=s(w3e);G1r=r(zCt,"swin"),zCt.forEach(t),O1r=r(XBe," \u2014 "),TH=n(XBe,"A",{href:!0});var WCt=s(TH);V1r=r(WCt,"TFSwinModel"),WCt.forEach(t),X1r=r(XBe," (Swin Transformer model)"),XBe.forEach(t),z1r=i(D),FT=n(D,"LI",{});var zBe=s(FT);A3e=n(zBe,"STRONG",{});var QCt=s(A3e);W1r=r(QCt,"t5"),QCt.forEach(t),Q1r=r(zBe," \u2014 "),MH=n(zBe,"A",{href:!0});var HCt=s(MH);H1r=r(HCt,"TFT5Model"),HCt.forEach(t),U1r=r(zBe," (T5 model)"),zBe.forEach(t),J1r=i(D),TT=n(D,"LI",{});var WBe=s(TT);L3e=n(WBe,"STRONG",{});var UCt=s(L3e);Y1r=r(UCt,"tapas"),UCt.forEach(t),K1r=r(WBe," \u2014 "),EH=n(WBe,"A",{href:!0});var JCt=s(EH);Z1r=r(JCt,"TFTapasModel"),JCt.forEach(t),e2r=r(WBe," (TAPAS model)"),WBe.forEach(t),o2r=i(D),MT=n(D,"LI",{});var QBe=s(MT);y3e=n(QBe,"STRONG",{});var YCt=s(y3e);r2r=r(YCt,"transfo-xl"),YCt.forEach(t),t2r=r(QBe," \u2014 "),CH=n(QBe,"A",{href:!0});var KCt=s(CH);a2r=r(KCt,"TFTransfoXLModel"),KCt.forEach(t),n2r=r(QBe," (Transformer-XL model)"),QBe.forEach(t),s2r=i(D),ET=n(D,"LI",{});var HBe=s(ET);x3e=n(HBe,"STRONG",{});var ZCt=s(x3e);l2r=r(ZCt,"vit"),ZCt.forEach(t),i2r=r(HBe," \u2014 "),wH=n(HBe,"A",{href:!0});var e5t=s(wH);d2r=r(e5t,"TFViTModel"),e5t.forEach(t),c2r=r(HBe," (ViT model)"),HBe.forEach(t),f2r=i(D),CT=n(D,"LI",{});var UBe=s(CT);$3e=n(UBe,"STRONG",{});var o5t=s($3e);m2r=r(o5t,"vit_mae"),o5t.forEach(t),g2r=r(UBe," \u2014 "),AH=n(UBe,"A",{href:!0});var r5t=s(AH);h2r=r(r5t,"TFViTMAEModel"),r5t.forEach(t),p2r=r(UBe," (ViTMAE model)"),UBe.forEach(t),u2r=i(D),wT=n(D,"LI",{});var JBe=s(wT);k3e=n(JBe,"STRONG",{});var t5t=s(k3e);_2r=r(t5t,"wav2vec2"),t5t.forEach(t),b2r=r(JBe," \u2014 "),LH=n(JBe,"A",{href:!0});var a5t=s(LH);v2r=r(a5t,"TFWav2Vec2Model"),a5t.forEach(t),F2r=r(JBe," (Wav2Vec2 model)"),JBe.forEach(t),T2r=i(D),AT=n(D,"LI",{});var YBe=s(AT);S3e=n(YBe,"STRONG",{});var n5t=s(S3e);M2r=r(n5t,"xlm"),n5t.forEach(t),E2r=r(YBe," \u2014 "),yH=n(YBe,"A",{href:!0});var s5t=s(yH);C2r=r(s5t,"TFXLMModel"),s5t.forEach(t),w2r=r(YBe," (XLM model)"),YBe.forEach(t),A2r=i(D),LT=n(D,"LI",{});var KBe=s(LT);R3e=n(KBe,"STRONG",{});var l5t=s(R3e);L2r=r(l5t,"xlm-roberta"),l5t.forEach(t),y2r=r(KBe," \u2014 "),xH=n(KBe,"A",{href:!0});var i5t=s(xH);x2r=r(i5t,"TFXLMRobertaModel"),i5t.forEach(t),$2r=r(KBe," (XLM-RoBERTa model)"),KBe.forEach(t),k2r=i(D),yT=n(D,"LI",{});var ZBe=s(yT);P3e=n(ZBe,"STRONG",{});var d5t=s(P3e);S2r=r(d5t,"xlnet"),d5t.forEach(t),R2r=r(ZBe," \u2014 "),$H=n(ZBe,"A",{href:!0});var c5t=s($H);P2r=r(c5t,"TFXLNetModel"),c5t.forEach(t),B2r=r(ZBe," (XLNet model)"),ZBe.forEach(t),D.forEach(t),I2r=i(El),T(xT.$$.fragment,El),El.forEach(t),Ml.forEach(t),lOe=i(f),rc=n(f,"H2",{class:!0});var pXe=s(rc);$T=n(pXe,"A",{id:!0,class:!0,href:!0});var f5t=s($T);B3e=n(f5t,"SPAN",{});var m5t=s(B3e);T(c9.$$.fragment,m5t),m5t.forEach(t),f5t.forEach(t),N2r=i(pXe),I3e=n(pXe,"SPAN",{});var g5t=s(I3e);q2r=r(g5t,"TFAutoModelForPreTraining"),g5t.forEach(t),pXe.forEach(t),iOe=i(f),er=n(f,"DIV",{class:!0});var Cl=s(er);T(f9.$$.fragment,Cl),j2r=i(Cl),tc=n(Cl,"P",{});var Hoe=s(tc);D2r=r(Hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kH=n(Hoe,"A",{href:!0});var h5t=s(kH);G2r=r(h5t,"from_pretrained()"),h5t.forEach(t),O2r=r(Hoe," class method or the "),SH=n(Hoe,"A",{href:!0});var p5t=s(SH);V2r=r(p5t,"from_config()"),p5t.forEach(t),X2r=r(Hoe,` class
method.`),Hoe.forEach(t),z2r=i(Cl),m9=n(Cl,"P",{});var uXe=s(m9);W2r=r(uXe,"This class cannot be instantiated directly using "),N3e=n(uXe,"CODE",{});var u5t=s(N3e);Q2r=r(u5t,"__init__()"),u5t.forEach(t),H2r=r(uXe," (throws an error)."),uXe.forEach(t),U2r=i(Cl),kt=n(Cl,"DIV",{class:!0});var bA=s(kt);T(g9.$$.fragment,bA),J2r=i(bA),q3e=n(bA,"P",{});var _5t=s(q3e);Y2r=r(_5t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_5t.forEach(t),K2r=i(bA),ac=n(bA,"P",{});var Uoe=s(ac);Z2r=r(Uoe,`Note:
Loading a model from its configuration file does `),j3e=n(Uoe,"STRONG",{});var b5t=s(j3e);ebr=r(b5t,"not"),b5t.forEach(t),obr=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(Uoe,"A",{href:!0});var v5t=s(RH);rbr=r(v5t,"from_pretrained()"),v5t.forEach(t),tbr=r(Uoe," to load the model weights."),Uoe.forEach(t),abr=i(bA),T(kT.$$.fragment,bA),bA.forEach(t),nbr=i(Cl),yr=n(Cl,"DIV",{class:!0});var wl=s(yr);T(h9.$$.fragment,wl),sbr=i(wl),D3e=n(wl,"P",{});var F5t=s(D3e);lbr=r(F5t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),F5t.forEach(t),ibr=i(wl),an=n(wl,"P",{});var vA=s(an);dbr=r(vA,"The model class to instantiate is selected based on the "),G3e=n(vA,"CODE",{});var T5t=s(G3e);cbr=r(T5t,"model_type"),T5t.forEach(t),fbr=r(vA,` property of the config object (either
passed as an argument or loaded from `),O3e=n(vA,"CODE",{});var M5t=s(O3e);mbr=r(M5t,"pretrained_model_name_or_path"),M5t.forEach(t),gbr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V3e=n(vA,"CODE",{});var E5t=s(V3e);hbr=r(E5t,"pretrained_model_name_or_path"),E5t.forEach(t),pbr=r(vA,":"),vA.forEach(t),ubr=i(wl),se=n(wl,"UL",{});var le=s(se);ST=n(le,"LI",{});var eIe=s(ST);X3e=n(eIe,"STRONG",{});var C5t=s(X3e);_br=r(C5t,"albert"),C5t.forEach(t),bbr=r(eIe," \u2014 "),PH=n(eIe,"A",{href:!0});var w5t=s(PH);vbr=r(w5t,"TFAlbertForPreTraining"),w5t.forEach(t),Fbr=r(eIe," (ALBERT model)"),eIe.forEach(t),Tbr=i(le),RT=n(le,"LI",{});var oIe=s(RT);z3e=n(oIe,"STRONG",{});var A5t=s(z3e);Mbr=r(A5t,"bart"),A5t.forEach(t),Ebr=r(oIe," \u2014 "),BH=n(oIe,"A",{href:!0});var L5t=s(BH);Cbr=r(L5t,"TFBartForConditionalGeneration"),L5t.forEach(t),wbr=r(oIe," (BART model)"),oIe.forEach(t),Abr=i(le),PT=n(le,"LI",{});var rIe=s(PT);W3e=n(rIe,"STRONG",{});var y5t=s(W3e);Lbr=r(y5t,"bert"),y5t.forEach(t),ybr=r(rIe," \u2014 "),IH=n(rIe,"A",{href:!0});var x5t=s(IH);xbr=r(x5t,"TFBertForPreTraining"),x5t.forEach(t),$br=r(rIe," (BERT model)"),rIe.forEach(t),kbr=i(le),BT=n(le,"LI",{});var tIe=s(BT);Q3e=n(tIe,"STRONG",{});var $5t=s(Q3e);Sbr=r($5t,"camembert"),$5t.forEach(t),Rbr=r(tIe," \u2014 "),NH=n(tIe,"A",{href:!0});var k5t=s(NH);Pbr=r(k5t,"TFCamembertForMaskedLM"),k5t.forEach(t),Bbr=r(tIe," (CamemBERT model)"),tIe.forEach(t),Ibr=i(le),IT=n(le,"LI",{});var aIe=s(IT);H3e=n(aIe,"STRONG",{});var S5t=s(H3e);Nbr=r(S5t,"ctrl"),S5t.forEach(t),qbr=r(aIe," \u2014 "),qH=n(aIe,"A",{href:!0});var R5t=s(qH);jbr=r(R5t,"TFCTRLLMHeadModel"),R5t.forEach(t),Dbr=r(aIe," (CTRL model)"),aIe.forEach(t),Gbr=i(le),NT=n(le,"LI",{});var nIe=s(NT);U3e=n(nIe,"STRONG",{});var P5t=s(U3e);Obr=r(P5t,"distilbert"),P5t.forEach(t),Vbr=r(nIe," \u2014 "),jH=n(nIe,"A",{href:!0});var B5t=s(jH);Xbr=r(B5t,"TFDistilBertForMaskedLM"),B5t.forEach(t),zbr=r(nIe," (DistilBERT model)"),nIe.forEach(t),Wbr=i(le),qT=n(le,"LI",{});var sIe=s(qT);J3e=n(sIe,"STRONG",{});var I5t=s(J3e);Qbr=r(I5t,"electra"),I5t.forEach(t),Hbr=r(sIe," \u2014 "),DH=n(sIe,"A",{href:!0});var N5t=s(DH);Ubr=r(N5t,"TFElectraForPreTraining"),N5t.forEach(t),Jbr=r(sIe," (ELECTRA model)"),sIe.forEach(t),Ybr=i(le),jT=n(le,"LI",{});var lIe=s(jT);Y3e=n(lIe,"STRONG",{});var q5t=s(Y3e);Kbr=r(q5t,"flaubert"),q5t.forEach(t),Zbr=r(lIe," \u2014 "),GH=n(lIe,"A",{href:!0});var j5t=s(GH);evr=r(j5t,"TFFlaubertWithLMHeadModel"),j5t.forEach(t),ovr=r(lIe," (FlauBERT model)"),lIe.forEach(t),rvr=i(le),DT=n(le,"LI",{});var iIe=s(DT);K3e=n(iIe,"STRONG",{});var D5t=s(K3e);tvr=r(D5t,"funnel"),D5t.forEach(t),avr=r(iIe," \u2014 "),OH=n(iIe,"A",{href:!0});var G5t=s(OH);nvr=r(G5t,"TFFunnelForPreTraining"),G5t.forEach(t),svr=r(iIe," (Funnel Transformer model)"),iIe.forEach(t),lvr=i(le),GT=n(le,"LI",{});var dIe=s(GT);Z3e=n(dIe,"STRONG",{});var O5t=s(Z3e);ivr=r(O5t,"gpt2"),O5t.forEach(t),dvr=r(dIe," \u2014 "),VH=n(dIe,"A",{href:!0});var V5t=s(VH);cvr=r(V5t,"TFGPT2LMHeadModel"),V5t.forEach(t),fvr=r(dIe," (OpenAI GPT-2 model)"),dIe.forEach(t),mvr=i(le),OT=n(le,"LI",{});var cIe=s(OT);e0e=n(cIe,"STRONG",{});var X5t=s(e0e);gvr=r(X5t,"layoutlm"),X5t.forEach(t),hvr=r(cIe," \u2014 "),XH=n(cIe,"A",{href:!0});var z5t=s(XH);pvr=r(z5t,"TFLayoutLMForMaskedLM"),z5t.forEach(t),uvr=r(cIe," (LayoutLM model)"),cIe.forEach(t),_vr=i(le),VT=n(le,"LI",{});var fIe=s(VT);o0e=n(fIe,"STRONG",{});var W5t=s(o0e);bvr=r(W5t,"lxmert"),W5t.forEach(t),vvr=r(fIe," \u2014 "),zH=n(fIe,"A",{href:!0});var Q5t=s(zH);Fvr=r(Q5t,"TFLxmertForPreTraining"),Q5t.forEach(t),Tvr=r(fIe," (LXMERT model)"),fIe.forEach(t),Mvr=i(le),XT=n(le,"LI",{});var mIe=s(XT);r0e=n(mIe,"STRONG",{});var H5t=s(r0e);Evr=r(H5t,"mobilebert"),H5t.forEach(t),Cvr=r(mIe," \u2014 "),WH=n(mIe,"A",{href:!0});var U5t=s(WH);wvr=r(U5t,"TFMobileBertForPreTraining"),U5t.forEach(t),Avr=r(mIe," (MobileBERT model)"),mIe.forEach(t),Lvr=i(le),zT=n(le,"LI",{});var gIe=s(zT);t0e=n(gIe,"STRONG",{});var J5t=s(t0e);yvr=r(J5t,"mpnet"),J5t.forEach(t),xvr=r(gIe," \u2014 "),QH=n(gIe,"A",{href:!0});var Y5t=s(QH);$vr=r(Y5t,"TFMPNetForMaskedLM"),Y5t.forEach(t),kvr=r(gIe," (MPNet model)"),gIe.forEach(t),Svr=i(le),WT=n(le,"LI",{});var hIe=s(WT);a0e=n(hIe,"STRONG",{});var K5t=s(a0e);Rvr=r(K5t,"openai-gpt"),K5t.forEach(t),Pvr=r(hIe," \u2014 "),HH=n(hIe,"A",{href:!0});var Z5t=s(HH);Bvr=r(Z5t,"TFOpenAIGPTLMHeadModel"),Z5t.forEach(t),Ivr=r(hIe," (OpenAI GPT model)"),hIe.forEach(t),Nvr=i(le),QT=n(le,"LI",{});var pIe=s(QT);n0e=n(pIe,"STRONG",{});var ewt=s(n0e);qvr=r(ewt,"roberta"),ewt.forEach(t),jvr=r(pIe," \u2014 "),UH=n(pIe,"A",{href:!0});var owt=s(UH);Dvr=r(owt,"TFRobertaForMaskedLM"),owt.forEach(t),Gvr=r(pIe," (RoBERTa model)"),pIe.forEach(t),Ovr=i(le),HT=n(le,"LI",{});var uIe=s(HT);s0e=n(uIe,"STRONG",{});var rwt=s(s0e);Vvr=r(rwt,"t5"),rwt.forEach(t),Xvr=r(uIe," \u2014 "),JH=n(uIe,"A",{href:!0});var twt=s(JH);zvr=r(twt,"TFT5ForConditionalGeneration"),twt.forEach(t),Wvr=r(uIe," (T5 model)"),uIe.forEach(t),Qvr=i(le),UT=n(le,"LI",{});var _Ie=s(UT);l0e=n(_Ie,"STRONG",{});var awt=s(l0e);Hvr=r(awt,"tapas"),awt.forEach(t),Uvr=r(_Ie," \u2014 "),YH=n(_Ie,"A",{href:!0});var nwt=s(YH);Jvr=r(nwt,"TFTapasForMaskedLM"),nwt.forEach(t),Yvr=r(_Ie," (TAPAS model)"),_Ie.forEach(t),Kvr=i(le),JT=n(le,"LI",{});var bIe=s(JT);i0e=n(bIe,"STRONG",{});var swt=s(i0e);Zvr=r(swt,"transfo-xl"),swt.forEach(t),e3r=r(bIe," \u2014 "),KH=n(bIe,"A",{href:!0});var lwt=s(KH);o3r=r(lwt,"TFTransfoXLLMHeadModel"),lwt.forEach(t),r3r=r(bIe," (Transformer-XL model)"),bIe.forEach(t),t3r=i(le),YT=n(le,"LI",{});var vIe=s(YT);d0e=n(vIe,"STRONG",{});var iwt=s(d0e);a3r=r(iwt,"vit_mae"),iwt.forEach(t),n3r=r(vIe," \u2014 "),ZH=n(vIe,"A",{href:!0});var dwt=s(ZH);s3r=r(dwt,"TFViTMAEForPreTraining"),dwt.forEach(t),l3r=r(vIe," (ViTMAE model)"),vIe.forEach(t),i3r=i(le),KT=n(le,"LI",{});var FIe=s(KT);c0e=n(FIe,"STRONG",{});var cwt=s(c0e);d3r=r(cwt,"xlm"),cwt.forEach(t),c3r=r(FIe," \u2014 "),eU=n(FIe,"A",{href:!0});var fwt=s(eU);f3r=r(fwt,"TFXLMWithLMHeadModel"),fwt.forEach(t),m3r=r(FIe," (XLM model)"),FIe.forEach(t),g3r=i(le),ZT=n(le,"LI",{});var TIe=s(ZT);f0e=n(TIe,"STRONG",{});var mwt=s(f0e);h3r=r(mwt,"xlm-roberta"),mwt.forEach(t),p3r=r(TIe," \u2014 "),oU=n(TIe,"A",{href:!0});var gwt=s(oU);u3r=r(gwt,"TFXLMRobertaForMaskedLM"),gwt.forEach(t),_3r=r(TIe," (XLM-RoBERTa model)"),TIe.forEach(t),b3r=i(le),e7=n(le,"LI",{});var MIe=s(e7);m0e=n(MIe,"STRONG",{});var hwt=s(m0e);v3r=r(hwt,"xlnet"),hwt.forEach(t),F3r=r(MIe," \u2014 "),rU=n(MIe,"A",{href:!0});var pwt=s(rU);T3r=r(pwt,"TFXLNetLMHeadModel"),pwt.forEach(t),M3r=r(MIe," (XLNet model)"),MIe.forEach(t),le.forEach(t),E3r=i(wl),T(o7.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),dOe=i(f),nc=n(f,"H2",{class:!0});var _Xe=s(nc);r7=n(_Xe,"A",{id:!0,class:!0,href:!0});var uwt=s(r7);g0e=n(uwt,"SPAN",{});var _wt=s(g0e);T(p9.$$.fragment,_wt),_wt.forEach(t),uwt.forEach(t),C3r=i(_Xe),h0e=n(_Xe,"SPAN",{});var bwt=s(h0e);w3r=r(bwt,"TFAutoModelForCausalLM"),bwt.forEach(t),_Xe.forEach(t),cOe=i(f),or=n(f,"DIV",{class:!0});var Al=s(or);T(u9.$$.fragment,Al),A3r=i(Al),sc=n(Al,"P",{});var Joe=s(sc);L3r=r(Joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tU=n(Joe,"A",{href:!0});var vwt=s(tU);y3r=r(vwt,"from_pretrained()"),vwt.forEach(t),x3r=r(Joe," class method or the "),aU=n(Joe,"A",{href:!0});var Fwt=s(aU);$3r=r(Fwt,"from_config()"),Fwt.forEach(t),k3r=r(Joe,` class
method.`),Joe.forEach(t),S3r=i(Al),_9=n(Al,"P",{});var bXe=s(_9);R3r=r(bXe,"This class cannot be instantiated directly using "),p0e=n(bXe,"CODE",{});var Twt=s(p0e);P3r=r(Twt,"__init__()"),Twt.forEach(t),B3r=r(bXe," (throws an error)."),bXe.forEach(t),I3r=i(Al),St=n(Al,"DIV",{class:!0});var FA=s(St);T(b9.$$.fragment,FA),N3r=i(FA),u0e=n(FA,"P",{});var Mwt=s(u0e);q3r=r(Mwt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Mwt.forEach(t),j3r=i(FA),lc=n(FA,"P",{});var Yoe=s(lc);D3r=r(Yoe,`Note:
Loading a model from its configuration file does `),_0e=n(Yoe,"STRONG",{});var Ewt=s(_0e);G3r=r(Ewt,"not"),Ewt.forEach(t),O3r=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(Yoe,"A",{href:!0});var Cwt=s(nU);V3r=r(Cwt,"from_pretrained()"),Cwt.forEach(t),X3r=r(Yoe," to load the model weights."),Yoe.forEach(t),z3r=i(FA),T(t7.$$.fragment,FA),FA.forEach(t),W3r=i(Al),xr=n(Al,"DIV",{class:!0});var Ll=s(xr);T(v9.$$.fragment,Ll),Q3r=i(Ll),b0e=n(Ll,"P",{});var wwt=s(b0e);H3r=r(wwt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wwt.forEach(t),U3r=i(Ll),nn=n(Ll,"P",{});var TA=s(nn);J3r=r(TA,"The model class to instantiate is selected based on the "),v0e=n(TA,"CODE",{});var Awt=s(v0e);Y3r=r(Awt,"model_type"),Awt.forEach(t),K3r=r(TA,` property of the config object (either
passed as an argument or loaded from `),F0e=n(TA,"CODE",{});var Lwt=s(F0e);Z3r=r(Lwt,"pretrained_model_name_or_path"),Lwt.forEach(t),e0r=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T0e=n(TA,"CODE",{});var ywt=s(T0e);o0r=r(ywt,"pretrained_model_name_or_path"),ywt.forEach(t),r0r=r(TA,":"),TA.forEach(t),t0r=i(Ll),Me=n(Ll,"UL",{});var Ce=s(Me);a7=n(Ce,"LI",{});var EIe=s(a7);M0e=n(EIe,"STRONG",{});var xwt=s(M0e);a0r=r(xwt,"bert"),xwt.forEach(t),n0r=r(EIe," \u2014 "),sU=n(EIe,"A",{href:!0});var $wt=s(sU);s0r=r($wt,"TFBertLMHeadModel"),$wt.forEach(t),l0r=r(EIe," (BERT model)"),EIe.forEach(t),i0r=i(Ce),n7=n(Ce,"LI",{});var CIe=s(n7);E0e=n(CIe,"STRONG",{});var kwt=s(E0e);d0r=r(kwt,"camembert"),kwt.forEach(t),c0r=r(CIe," \u2014 "),lU=n(CIe,"A",{href:!0});var Swt=s(lU);f0r=r(Swt,"TFCamembertForCausalLM"),Swt.forEach(t),m0r=r(CIe," (CamemBERT model)"),CIe.forEach(t),g0r=i(Ce),s7=n(Ce,"LI",{});var wIe=s(s7);C0e=n(wIe,"STRONG",{});var Rwt=s(C0e);h0r=r(Rwt,"ctrl"),Rwt.forEach(t),p0r=r(wIe," \u2014 "),iU=n(wIe,"A",{href:!0});var Pwt=s(iU);u0r=r(Pwt,"TFCTRLLMHeadModel"),Pwt.forEach(t),_0r=r(wIe," (CTRL model)"),wIe.forEach(t),b0r=i(Ce),l7=n(Ce,"LI",{});var AIe=s(l7);w0e=n(AIe,"STRONG",{});var Bwt=s(w0e);v0r=r(Bwt,"gpt2"),Bwt.forEach(t),F0r=r(AIe," \u2014 "),dU=n(AIe,"A",{href:!0});var Iwt=s(dU);T0r=r(Iwt,"TFGPT2LMHeadModel"),Iwt.forEach(t),M0r=r(AIe," (OpenAI GPT-2 model)"),AIe.forEach(t),E0r=i(Ce),i7=n(Ce,"LI",{});var LIe=s(i7);A0e=n(LIe,"STRONG",{});var Nwt=s(A0e);C0r=r(Nwt,"gptj"),Nwt.forEach(t),w0r=r(LIe," \u2014 "),cU=n(LIe,"A",{href:!0});var qwt=s(cU);A0r=r(qwt,"TFGPTJForCausalLM"),qwt.forEach(t),L0r=r(LIe," (GPT-J model)"),LIe.forEach(t),y0r=i(Ce),d7=n(Ce,"LI",{});var yIe=s(d7);L0e=n(yIe,"STRONG",{});var jwt=s(L0e);x0r=r(jwt,"openai-gpt"),jwt.forEach(t),$0r=r(yIe," \u2014 "),fU=n(yIe,"A",{href:!0});var Dwt=s(fU);k0r=r(Dwt,"TFOpenAIGPTLMHeadModel"),Dwt.forEach(t),S0r=r(yIe," (OpenAI GPT model)"),yIe.forEach(t),R0r=i(Ce),c7=n(Ce,"LI",{});var xIe=s(c7);y0e=n(xIe,"STRONG",{});var Gwt=s(y0e);P0r=r(Gwt,"opt"),Gwt.forEach(t),B0r=r(xIe," \u2014 "),mU=n(xIe,"A",{href:!0});var Owt=s(mU);I0r=r(Owt,"TFOPTForCausalLM"),Owt.forEach(t),N0r=r(xIe," (OPT model)"),xIe.forEach(t),q0r=i(Ce),f7=n(Ce,"LI",{});var $Ie=s(f7);x0e=n($Ie,"STRONG",{});var Vwt=s(x0e);j0r=r(Vwt,"rembert"),Vwt.forEach(t),D0r=r($Ie," \u2014 "),gU=n($Ie,"A",{href:!0});var Xwt=s(gU);G0r=r(Xwt,"TFRemBertForCausalLM"),Xwt.forEach(t),O0r=r($Ie," (RemBERT model)"),$Ie.forEach(t),V0r=i(Ce),m7=n(Ce,"LI",{});var kIe=s(m7);$0e=n(kIe,"STRONG",{});var zwt=s($0e);X0r=r(zwt,"roberta"),zwt.forEach(t),z0r=r(kIe," \u2014 "),hU=n(kIe,"A",{href:!0});var Wwt=s(hU);W0r=r(Wwt,"TFRobertaForCausalLM"),Wwt.forEach(t),Q0r=r(kIe," (RoBERTa model)"),kIe.forEach(t),H0r=i(Ce),g7=n(Ce,"LI",{});var SIe=s(g7);k0e=n(SIe,"STRONG",{});var Qwt=s(k0e);U0r=r(Qwt,"roformer"),Qwt.forEach(t),J0r=r(SIe," \u2014 "),pU=n(SIe,"A",{href:!0});var Hwt=s(pU);Y0r=r(Hwt,"TFRoFormerForCausalLM"),Hwt.forEach(t),K0r=r(SIe," (RoFormer model)"),SIe.forEach(t),Z0r=i(Ce),h7=n(Ce,"LI",{});var RIe=s(h7);S0e=n(RIe,"STRONG",{});var Uwt=s(S0e);eFr=r(Uwt,"transfo-xl"),Uwt.forEach(t),oFr=r(RIe," \u2014 "),uU=n(RIe,"A",{href:!0});var Jwt=s(uU);rFr=r(Jwt,"TFTransfoXLLMHeadModel"),Jwt.forEach(t),tFr=r(RIe," (Transformer-XL model)"),RIe.forEach(t),aFr=i(Ce),p7=n(Ce,"LI",{});var PIe=s(p7);R0e=n(PIe,"STRONG",{});var Ywt=s(R0e);nFr=r(Ywt,"xlm"),Ywt.forEach(t),sFr=r(PIe," \u2014 "),_U=n(PIe,"A",{href:!0});var Kwt=s(_U);lFr=r(Kwt,"TFXLMWithLMHeadModel"),Kwt.forEach(t),iFr=r(PIe," (XLM model)"),PIe.forEach(t),dFr=i(Ce),u7=n(Ce,"LI",{});var BIe=s(u7);P0e=n(BIe,"STRONG",{});var Zwt=s(P0e);cFr=r(Zwt,"xlnet"),Zwt.forEach(t),fFr=r(BIe," \u2014 "),bU=n(BIe,"A",{href:!0});var eAt=s(bU);mFr=r(eAt,"TFXLNetLMHeadModel"),eAt.forEach(t),gFr=r(BIe," (XLNet model)"),BIe.forEach(t),Ce.forEach(t),hFr=i(Ll),T(_7.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),fOe=i(f),ic=n(f,"H2",{class:!0});var vXe=s(ic);b7=n(vXe,"A",{id:!0,class:!0,href:!0});var oAt=s(b7);B0e=n(oAt,"SPAN",{});var rAt=s(B0e);T(F9.$$.fragment,rAt),rAt.forEach(t),oAt.forEach(t),pFr=i(vXe),I0e=n(vXe,"SPAN",{});var tAt=s(I0e);uFr=r(tAt,"TFAutoModelForImageClassification"),tAt.forEach(t),vXe.forEach(t),mOe=i(f),rr=n(f,"DIV",{class:!0});var yl=s(rr);T(T9.$$.fragment,yl),_Fr=i(yl),dc=n(yl,"P",{});var Koe=s(dc);bFr=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vU=n(Koe,"A",{href:!0});var aAt=s(vU);vFr=r(aAt,"from_pretrained()"),aAt.forEach(t),FFr=r(Koe," class method or the "),FU=n(Koe,"A",{href:!0});var nAt=s(FU);TFr=r(nAt,"from_config()"),nAt.forEach(t),MFr=r(Koe,` class
method.`),Koe.forEach(t),EFr=i(yl),M9=n(yl,"P",{});var FXe=s(M9);CFr=r(FXe,"This class cannot be instantiated directly using "),N0e=n(FXe,"CODE",{});var sAt=s(N0e);wFr=r(sAt,"__init__()"),sAt.forEach(t),AFr=r(FXe," (throws an error)."),FXe.forEach(t),LFr=i(yl),Rt=n(yl,"DIV",{class:!0});var MA=s(Rt);T(E9.$$.fragment,MA),yFr=i(MA),q0e=n(MA,"P",{});var lAt=s(q0e);xFr=r(lAt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lAt.forEach(t),$Fr=i(MA),cc=n(MA,"P",{});var Zoe=s(cc);kFr=r(Zoe,`Note:
Loading a model from its configuration file does `),j0e=n(Zoe,"STRONG",{});var iAt=s(j0e);SFr=r(iAt,"not"),iAt.forEach(t),RFr=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=n(Zoe,"A",{href:!0});var dAt=s(TU);PFr=r(dAt,"from_pretrained()"),dAt.forEach(t),BFr=r(Zoe," to load the model weights."),Zoe.forEach(t),IFr=i(MA),T(v7.$$.fragment,MA),MA.forEach(t),NFr=i(yl),$r=n(yl,"DIV",{class:!0});var xl=s($r);T(C9.$$.fragment,xl),qFr=i(xl),D0e=n(xl,"P",{});var cAt=s(D0e);jFr=r(cAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cAt.forEach(t),DFr=i(xl),sn=n(xl,"P",{});var EA=s(sn);GFr=r(EA,"The model class to instantiate is selected based on the "),G0e=n(EA,"CODE",{});var fAt=s(G0e);OFr=r(fAt,"model_type"),fAt.forEach(t),VFr=r(EA,` property of the config object (either
passed as an argument or loaded from `),O0e=n(EA,"CODE",{});var mAt=s(O0e);XFr=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),zFr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V0e=n(EA,"CODE",{});var gAt=s(V0e);WFr=r(gAt,"pretrained_model_name_or_path"),gAt.forEach(t),QFr=r(EA,":"),EA.forEach(t),HFr=i(xl),ln=n(xl,"UL",{});var CA=s(ln);F7=n(CA,"LI",{});var IIe=s(F7);X0e=n(IIe,"STRONG",{});var hAt=s(X0e);UFr=r(hAt,"convnext"),hAt.forEach(t),JFr=r(IIe," \u2014 "),MU=n(IIe,"A",{href:!0});var pAt=s(MU);YFr=r(pAt,"TFConvNextForImageClassification"),pAt.forEach(t),KFr=r(IIe," (ConvNeXT model)"),IIe.forEach(t),ZFr=i(CA),T7=n(CA,"LI",{});var NIe=s(T7);z0e=n(NIe,"STRONG",{});var uAt=s(z0e);e6r=r(uAt,"data2vec-vision"),uAt.forEach(t),o6r=r(NIe," \u2014 "),EU=n(NIe,"A",{href:!0});var _At=s(EU);r6r=r(_At,"TFData2VecVisionForImageClassification"),_At.forEach(t),t6r=r(NIe," (Data2VecVision model)"),NIe.forEach(t),a6r=i(CA),M7=n(CA,"LI",{});var qIe=s(M7);W0e=n(qIe,"STRONG",{});var bAt=s(W0e);n6r=r(bAt,"swin"),bAt.forEach(t),s6r=r(qIe," \u2014 "),CU=n(qIe,"A",{href:!0});var vAt=s(CU);l6r=r(vAt,"TFSwinForImageClassification"),vAt.forEach(t),i6r=r(qIe," (Swin Transformer model)"),qIe.forEach(t),d6r=i(CA),E7=n(CA,"LI",{});var jIe=s(E7);Q0e=n(jIe,"STRONG",{});var FAt=s(Q0e);c6r=r(FAt,"vit"),FAt.forEach(t),f6r=r(jIe," \u2014 "),wU=n(jIe,"A",{href:!0});var TAt=s(wU);m6r=r(TAt,"TFViTForImageClassification"),TAt.forEach(t),g6r=r(jIe," (ViT model)"),jIe.forEach(t),CA.forEach(t),h6r=i(xl),T(C7.$$.fragment,xl),xl.forEach(t),yl.forEach(t),gOe=i(f),fc=n(f,"H2",{class:!0});var TXe=s(fc);w7=n(TXe,"A",{id:!0,class:!0,href:!0});var MAt=s(w7);H0e=n(MAt,"SPAN",{});var EAt=s(H0e);T(w9.$$.fragment,EAt),EAt.forEach(t),MAt.forEach(t),p6r=i(TXe),U0e=n(TXe,"SPAN",{});var CAt=s(U0e);u6r=r(CAt,"TFAutoModelForMaskedLM"),CAt.forEach(t),TXe.forEach(t),hOe=i(f),tr=n(f,"DIV",{class:!0});var $l=s(tr);T(A9.$$.fragment,$l),_6r=i($l),mc=n($l,"P",{});var ere=s(mc);b6r=r(ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AU=n(ere,"A",{href:!0});var wAt=s(AU);v6r=r(wAt,"from_pretrained()"),wAt.forEach(t),F6r=r(ere," class method or the "),LU=n(ere,"A",{href:!0});var AAt=s(LU);T6r=r(AAt,"from_config()"),AAt.forEach(t),M6r=r(ere,` class
method.`),ere.forEach(t),E6r=i($l),L9=n($l,"P",{});var MXe=s(L9);C6r=r(MXe,"This class cannot be instantiated directly using "),J0e=n(MXe,"CODE",{});var LAt=s(J0e);w6r=r(LAt,"__init__()"),LAt.forEach(t),A6r=r(MXe," (throws an error)."),MXe.forEach(t),L6r=i($l),Pt=n($l,"DIV",{class:!0});var wA=s(Pt);T(y9.$$.fragment,wA),y6r=i(wA),Y0e=n(wA,"P",{});var yAt=s(Y0e);x6r=r(yAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yAt.forEach(t),$6r=i(wA),gc=n(wA,"P",{});var ore=s(gc);k6r=r(ore,`Note:
Loading a model from its configuration file does `),K0e=n(ore,"STRONG",{});var xAt=s(K0e);S6r=r(xAt,"not"),xAt.forEach(t),R6r=r(ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=n(ore,"A",{href:!0});var $At=s(yU);P6r=r($At,"from_pretrained()"),$At.forEach(t),B6r=r(ore," to load the model weights."),ore.forEach(t),I6r=i(wA),T(A7.$$.fragment,wA),wA.forEach(t),N6r=i($l),kr=n($l,"DIV",{class:!0});var kl=s(kr);T(x9.$$.fragment,kl),q6r=i(kl),Z0e=n(kl,"P",{});var kAt=s(Z0e);j6r=r(kAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kAt.forEach(t),D6r=i(kl),dn=n(kl,"P",{});var AA=s(dn);G6r=r(AA,"The model class to instantiate is selected based on the "),eFe=n(AA,"CODE",{});var SAt=s(eFe);O6r=r(SAt,"model_type"),SAt.forEach(t),V6r=r(AA,` property of the config object (either
passed as an argument or loaded from `),oFe=n(AA,"CODE",{});var RAt=s(oFe);X6r=r(RAt,"pretrained_model_name_or_path"),RAt.forEach(t),z6r=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=n(AA,"CODE",{});var PAt=s(rFe);W6r=r(PAt,"pretrained_model_name_or_path"),PAt.forEach(t),Q6r=r(AA,":"),AA.forEach(t),H6r=i(kl),ie=n(kl,"UL",{});var fe=s(ie);L7=n(fe,"LI",{});var DIe=s(L7);tFe=n(DIe,"STRONG",{});var BAt=s(tFe);U6r=r(BAt,"albert"),BAt.forEach(t),J6r=r(DIe," \u2014 "),xU=n(DIe,"A",{href:!0});var IAt=s(xU);Y6r=r(IAt,"TFAlbertForMaskedLM"),IAt.forEach(t),K6r=r(DIe," (ALBERT model)"),DIe.forEach(t),Z6r=i(fe),y7=n(fe,"LI",{});var GIe=s(y7);aFe=n(GIe,"STRONG",{});var NAt=s(aFe);eTr=r(NAt,"bert"),NAt.forEach(t),oTr=r(GIe," \u2014 "),$U=n(GIe,"A",{href:!0});var qAt=s($U);rTr=r(qAt,"TFBertForMaskedLM"),qAt.forEach(t),tTr=r(GIe," (BERT model)"),GIe.forEach(t),aTr=i(fe),x7=n(fe,"LI",{});var OIe=s(x7);nFe=n(OIe,"STRONG",{});var jAt=s(nFe);nTr=r(jAt,"camembert"),jAt.forEach(t),sTr=r(OIe," \u2014 "),kU=n(OIe,"A",{href:!0});var DAt=s(kU);lTr=r(DAt,"TFCamembertForMaskedLM"),DAt.forEach(t),iTr=r(OIe," (CamemBERT model)"),OIe.forEach(t),dTr=i(fe),$7=n(fe,"LI",{});var VIe=s($7);sFe=n(VIe,"STRONG",{});var GAt=s(sFe);cTr=r(GAt,"convbert"),GAt.forEach(t),fTr=r(VIe," \u2014 "),SU=n(VIe,"A",{href:!0});var OAt=s(SU);mTr=r(OAt,"TFConvBertForMaskedLM"),OAt.forEach(t),gTr=r(VIe," (ConvBERT model)"),VIe.forEach(t),hTr=i(fe),k7=n(fe,"LI",{});var XIe=s(k7);lFe=n(XIe,"STRONG",{});var VAt=s(lFe);pTr=r(VAt,"deberta"),VAt.forEach(t),uTr=r(XIe," \u2014 "),RU=n(XIe,"A",{href:!0});var XAt=s(RU);_Tr=r(XAt,"TFDebertaForMaskedLM"),XAt.forEach(t),bTr=r(XIe," (DeBERTa model)"),XIe.forEach(t),vTr=i(fe),S7=n(fe,"LI",{});var zIe=s(S7);iFe=n(zIe,"STRONG",{});var zAt=s(iFe);FTr=r(zAt,"deberta-v2"),zAt.forEach(t),TTr=r(zIe," \u2014 "),PU=n(zIe,"A",{href:!0});var WAt=s(PU);MTr=r(WAt,"TFDebertaV2ForMaskedLM"),WAt.forEach(t),ETr=r(zIe," (DeBERTa-v2 model)"),zIe.forEach(t),CTr=i(fe),R7=n(fe,"LI",{});var WIe=s(R7);dFe=n(WIe,"STRONG",{});var QAt=s(dFe);wTr=r(QAt,"distilbert"),QAt.forEach(t),ATr=r(WIe," \u2014 "),BU=n(WIe,"A",{href:!0});var HAt=s(BU);LTr=r(HAt,"TFDistilBertForMaskedLM"),HAt.forEach(t),yTr=r(WIe," (DistilBERT model)"),WIe.forEach(t),xTr=i(fe),P7=n(fe,"LI",{});var QIe=s(P7);cFe=n(QIe,"STRONG",{});var UAt=s(cFe);$Tr=r(UAt,"electra"),UAt.forEach(t),kTr=r(QIe," \u2014 "),IU=n(QIe,"A",{href:!0});var JAt=s(IU);STr=r(JAt,"TFElectraForMaskedLM"),JAt.forEach(t),RTr=r(QIe," (ELECTRA model)"),QIe.forEach(t),PTr=i(fe),B7=n(fe,"LI",{});var HIe=s(B7);fFe=n(HIe,"STRONG",{});var YAt=s(fFe);BTr=r(YAt,"flaubert"),YAt.forEach(t),ITr=r(HIe," \u2014 "),NU=n(HIe,"A",{href:!0});var KAt=s(NU);NTr=r(KAt,"TFFlaubertWithLMHeadModel"),KAt.forEach(t),qTr=r(HIe," (FlauBERT model)"),HIe.forEach(t),jTr=i(fe),I7=n(fe,"LI",{});var UIe=s(I7);mFe=n(UIe,"STRONG",{});var ZAt=s(mFe);DTr=r(ZAt,"funnel"),ZAt.forEach(t),GTr=r(UIe," \u2014 "),qU=n(UIe,"A",{href:!0});var eLt=s(qU);OTr=r(eLt,"TFFunnelForMaskedLM"),eLt.forEach(t),VTr=r(UIe," (Funnel Transformer model)"),UIe.forEach(t),XTr=i(fe),N7=n(fe,"LI",{});var JIe=s(N7);gFe=n(JIe,"STRONG",{});var oLt=s(gFe);zTr=r(oLt,"layoutlm"),oLt.forEach(t),WTr=r(JIe," \u2014 "),jU=n(JIe,"A",{href:!0});var rLt=s(jU);QTr=r(rLt,"TFLayoutLMForMaskedLM"),rLt.forEach(t),HTr=r(JIe," (LayoutLM model)"),JIe.forEach(t),UTr=i(fe),q7=n(fe,"LI",{});var YIe=s(q7);hFe=n(YIe,"STRONG",{});var tLt=s(hFe);JTr=r(tLt,"longformer"),tLt.forEach(t),YTr=r(YIe," \u2014 "),DU=n(YIe,"A",{href:!0});var aLt=s(DU);KTr=r(aLt,"TFLongformerForMaskedLM"),aLt.forEach(t),ZTr=r(YIe," (Longformer model)"),YIe.forEach(t),e7r=i(fe),j7=n(fe,"LI",{});var KIe=s(j7);pFe=n(KIe,"STRONG",{});var nLt=s(pFe);o7r=r(nLt,"mobilebert"),nLt.forEach(t),r7r=r(KIe," \u2014 "),GU=n(KIe,"A",{href:!0});var sLt=s(GU);t7r=r(sLt,"TFMobileBertForMaskedLM"),sLt.forEach(t),a7r=r(KIe," (MobileBERT model)"),KIe.forEach(t),n7r=i(fe),D7=n(fe,"LI",{});var ZIe=s(D7);uFe=n(ZIe,"STRONG",{});var lLt=s(uFe);s7r=r(lLt,"mpnet"),lLt.forEach(t),l7r=r(ZIe," \u2014 "),OU=n(ZIe,"A",{href:!0});var iLt=s(OU);i7r=r(iLt,"TFMPNetForMaskedLM"),iLt.forEach(t),d7r=r(ZIe," (MPNet model)"),ZIe.forEach(t),c7r=i(fe),G7=n(fe,"LI",{});var eNe=s(G7);_Fe=n(eNe,"STRONG",{});var dLt=s(_Fe);f7r=r(dLt,"rembert"),dLt.forEach(t),m7r=r(eNe," \u2014 "),VU=n(eNe,"A",{href:!0});var cLt=s(VU);g7r=r(cLt,"TFRemBertForMaskedLM"),cLt.forEach(t),h7r=r(eNe," (RemBERT model)"),eNe.forEach(t),p7r=i(fe),O7=n(fe,"LI",{});var oNe=s(O7);bFe=n(oNe,"STRONG",{});var fLt=s(bFe);u7r=r(fLt,"roberta"),fLt.forEach(t),_7r=r(oNe," \u2014 "),XU=n(oNe,"A",{href:!0});var mLt=s(XU);b7r=r(mLt,"TFRobertaForMaskedLM"),mLt.forEach(t),v7r=r(oNe," (RoBERTa model)"),oNe.forEach(t),F7r=i(fe),V7=n(fe,"LI",{});var rNe=s(V7);vFe=n(rNe,"STRONG",{});var gLt=s(vFe);T7r=r(gLt,"roformer"),gLt.forEach(t),M7r=r(rNe," \u2014 "),zU=n(rNe,"A",{href:!0});var hLt=s(zU);E7r=r(hLt,"TFRoFormerForMaskedLM"),hLt.forEach(t),C7r=r(rNe," (RoFormer model)"),rNe.forEach(t),w7r=i(fe),X7=n(fe,"LI",{});var tNe=s(X7);FFe=n(tNe,"STRONG",{});var pLt=s(FFe);A7r=r(pLt,"tapas"),pLt.forEach(t),L7r=r(tNe," \u2014 "),WU=n(tNe,"A",{href:!0});var uLt=s(WU);y7r=r(uLt,"TFTapasForMaskedLM"),uLt.forEach(t),x7r=r(tNe," (TAPAS model)"),tNe.forEach(t),$7r=i(fe),z7=n(fe,"LI",{});var aNe=s(z7);TFe=n(aNe,"STRONG",{});var _Lt=s(TFe);k7r=r(_Lt,"xlm"),_Lt.forEach(t),S7r=r(aNe," \u2014 "),QU=n(aNe,"A",{href:!0});var bLt=s(QU);R7r=r(bLt,"TFXLMWithLMHeadModel"),bLt.forEach(t),P7r=r(aNe," (XLM model)"),aNe.forEach(t),B7r=i(fe),W7=n(fe,"LI",{});var nNe=s(W7);MFe=n(nNe,"STRONG",{});var vLt=s(MFe);I7r=r(vLt,"xlm-roberta"),vLt.forEach(t),N7r=r(nNe," \u2014 "),HU=n(nNe,"A",{href:!0});var FLt=s(HU);q7r=r(FLt,"TFXLMRobertaForMaskedLM"),FLt.forEach(t),j7r=r(nNe," (XLM-RoBERTa model)"),nNe.forEach(t),fe.forEach(t),D7r=i(kl),T(Q7.$$.fragment,kl),kl.forEach(t),$l.forEach(t),pOe=i(f),hc=n(f,"H2",{class:!0});var EXe=s(hc);H7=n(EXe,"A",{id:!0,class:!0,href:!0});var TLt=s(H7);EFe=n(TLt,"SPAN",{});var MLt=s(EFe);T($9.$$.fragment,MLt),MLt.forEach(t),TLt.forEach(t),G7r=i(EXe),CFe=n(EXe,"SPAN",{});var ELt=s(CFe);O7r=r(ELt,"TFAutoModelForSeq2SeqLM"),ELt.forEach(t),EXe.forEach(t),uOe=i(f),ar=n(f,"DIV",{class:!0});var Sl=s(ar);T(k9.$$.fragment,Sl),V7r=i(Sl),pc=n(Sl,"P",{});var rre=s(pc);X7r=r(rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UU=n(rre,"A",{href:!0});var CLt=s(UU);z7r=r(CLt,"from_pretrained()"),CLt.forEach(t),W7r=r(rre," class method or the "),JU=n(rre,"A",{href:!0});var wLt=s(JU);Q7r=r(wLt,"from_config()"),wLt.forEach(t),H7r=r(rre,` class
method.`),rre.forEach(t),U7r=i(Sl),S9=n(Sl,"P",{});var CXe=s(S9);J7r=r(CXe,"This class cannot be instantiated directly using "),wFe=n(CXe,"CODE",{});var ALt=s(wFe);Y7r=r(ALt,"__init__()"),ALt.forEach(t),K7r=r(CXe," (throws an error)."),CXe.forEach(t),Z7r=i(Sl),Bt=n(Sl,"DIV",{class:!0});var LA=s(Bt);T(R9.$$.fragment,LA),eMr=i(LA),AFe=n(LA,"P",{});var LLt=s(AFe);oMr=r(LLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),LLt.forEach(t),rMr=i(LA),uc=n(LA,"P",{});var tre=s(uc);tMr=r(tre,`Note:
Loading a model from its configuration file does `),LFe=n(tre,"STRONG",{});var yLt=s(LFe);aMr=r(yLt,"not"),yLt.forEach(t),nMr=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(tre,"A",{href:!0});var xLt=s(YU);sMr=r(xLt,"from_pretrained()"),xLt.forEach(t),lMr=r(tre," to load the model weights."),tre.forEach(t),iMr=i(LA),T(U7.$$.fragment,LA),LA.forEach(t),dMr=i(Sl),Sr=n(Sl,"DIV",{class:!0});var Rl=s(Sr);T(P9.$$.fragment,Rl),cMr=i(Rl),yFe=n(Rl,"P",{});var $Lt=s(yFe);fMr=r($Lt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$Lt.forEach(t),mMr=i(Rl),cn=n(Rl,"P",{});var yA=s(cn);gMr=r(yA,"The model class to instantiate is selected based on the "),xFe=n(yA,"CODE",{});var kLt=s(xFe);hMr=r(kLt,"model_type"),kLt.forEach(t),pMr=r(yA,` property of the config object (either
passed as an argument or loaded from `),$Fe=n(yA,"CODE",{});var SLt=s($Fe);uMr=r(SLt,"pretrained_model_name_or_path"),SLt.forEach(t),_Mr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kFe=n(yA,"CODE",{});var RLt=s(kFe);bMr=r(RLt,"pretrained_model_name_or_path"),RLt.forEach(t),vMr=r(yA,":"),yA.forEach(t),FMr=i(Rl),ye=n(Rl,"UL",{});var Ie=s(ye);J7=n(Ie,"LI",{});var sNe=s(J7);SFe=n(sNe,"STRONG",{});var PLt=s(SFe);TMr=r(PLt,"bart"),PLt.forEach(t),MMr=r(sNe," \u2014 "),KU=n(sNe,"A",{href:!0});var BLt=s(KU);EMr=r(BLt,"TFBartForConditionalGeneration"),BLt.forEach(t),CMr=r(sNe," (BART model)"),sNe.forEach(t),wMr=i(Ie),Y7=n(Ie,"LI",{});var lNe=s(Y7);RFe=n(lNe,"STRONG",{});var ILt=s(RFe);AMr=r(ILt,"blenderbot"),ILt.forEach(t),LMr=r(lNe," \u2014 "),ZU=n(lNe,"A",{href:!0});var NLt=s(ZU);yMr=r(NLt,"TFBlenderbotForConditionalGeneration"),NLt.forEach(t),xMr=r(lNe," (Blenderbot model)"),lNe.forEach(t),$Mr=i(Ie),K7=n(Ie,"LI",{});var iNe=s(K7);PFe=n(iNe,"STRONG",{});var qLt=s(PFe);kMr=r(qLt,"blenderbot-small"),qLt.forEach(t),SMr=r(iNe," \u2014 "),eJ=n(iNe,"A",{href:!0});var jLt=s(eJ);RMr=r(jLt,"TFBlenderbotSmallForConditionalGeneration"),jLt.forEach(t),PMr=r(iNe," (BlenderbotSmall model)"),iNe.forEach(t),BMr=i(Ie),Z7=n(Ie,"LI",{});var dNe=s(Z7);BFe=n(dNe,"STRONG",{});var DLt=s(BFe);IMr=r(DLt,"encoder-decoder"),DLt.forEach(t),NMr=r(dNe," \u2014 "),oJ=n(dNe,"A",{href:!0});var GLt=s(oJ);qMr=r(GLt,"TFEncoderDecoderModel"),GLt.forEach(t),jMr=r(dNe," (Encoder decoder model)"),dNe.forEach(t),DMr=i(Ie),eM=n(Ie,"LI",{});var cNe=s(eM);IFe=n(cNe,"STRONG",{});var OLt=s(IFe);GMr=r(OLt,"led"),OLt.forEach(t),OMr=r(cNe," \u2014 "),rJ=n(cNe,"A",{href:!0});var VLt=s(rJ);VMr=r(VLt,"TFLEDForConditionalGeneration"),VLt.forEach(t),XMr=r(cNe," (LED model)"),cNe.forEach(t),zMr=i(Ie),oM=n(Ie,"LI",{});var fNe=s(oM);NFe=n(fNe,"STRONG",{});var XLt=s(NFe);WMr=r(XLt,"marian"),XLt.forEach(t),QMr=r(fNe," \u2014 "),tJ=n(fNe,"A",{href:!0});var zLt=s(tJ);HMr=r(zLt,"TFMarianMTModel"),zLt.forEach(t),UMr=r(fNe," (Marian model)"),fNe.forEach(t),JMr=i(Ie),rM=n(Ie,"LI",{});var mNe=s(rM);qFe=n(mNe,"STRONG",{});var WLt=s(qFe);YMr=r(WLt,"mbart"),WLt.forEach(t),KMr=r(mNe," \u2014 "),aJ=n(mNe,"A",{href:!0});var QLt=s(aJ);ZMr=r(QLt,"TFMBartForConditionalGeneration"),QLt.forEach(t),e4r=r(mNe," (mBART model)"),mNe.forEach(t),o4r=i(Ie),tM=n(Ie,"LI",{});var gNe=s(tM);jFe=n(gNe,"STRONG",{});var HLt=s(jFe);r4r=r(HLt,"mt5"),HLt.forEach(t),t4r=r(gNe," \u2014 "),nJ=n(gNe,"A",{href:!0});var ULt=s(nJ);a4r=r(ULt,"TFMT5ForConditionalGeneration"),ULt.forEach(t),n4r=r(gNe," (MT5 model)"),gNe.forEach(t),s4r=i(Ie),aM=n(Ie,"LI",{});var hNe=s(aM);DFe=n(hNe,"STRONG",{});var JLt=s(DFe);l4r=r(JLt,"pegasus"),JLt.forEach(t),i4r=r(hNe," \u2014 "),sJ=n(hNe,"A",{href:!0});var YLt=s(sJ);d4r=r(YLt,"TFPegasusForConditionalGeneration"),YLt.forEach(t),c4r=r(hNe," (Pegasus model)"),hNe.forEach(t),f4r=i(Ie),nM=n(Ie,"LI",{});var pNe=s(nM);GFe=n(pNe,"STRONG",{});var KLt=s(GFe);m4r=r(KLt,"t5"),KLt.forEach(t),g4r=r(pNe," \u2014 "),lJ=n(pNe,"A",{href:!0});var ZLt=s(lJ);h4r=r(ZLt,"TFT5ForConditionalGeneration"),ZLt.forEach(t),p4r=r(pNe," (T5 model)"),pNe.forEach(t),Ie.forEach(t),u4r=i(Rl),T(sM.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),_Oe=i(f),_c=n(f,"H2",{class:!0});var wXe=s(_c);lM=n(wXe,"A",{id:!0,class:!0,href:!0});var eyt=s(lM);OFe=n(eyt,"SPAN",{});var oyt=s(OFe);T(B9.$$.fragment,oyt),oyt.forEach(t),eyt.forEach(t),_4r=i(wXe),VFe=n(wXe,"SPAN",{});var ryt=s(VFe);b4r=r(ryt,"TFAutoModelForSequenceClassification"),ryt.forEach(t),wXe.forEach(t),bOe=i(f),nr=n(f,"DIV",{class:!0});var Pl=s(nr);T(I9.$$.fragment,Pl),v4r=i(Pl),bc=n(Pl,"P",{});var are=s(bc);F4r=r(are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iJ=n(are,"A",{href:!0});var tyt=s(iJ);T4r=r(tyt,"from_pretrained()"),tyt.forEach(t),M4r=r(are," class method or the "),dJ=n(are,"A",{href:!0});var ayt=s(dJ);E4r=r(ayt,"from_config()"),ayt.forEach(t),C4r=r(are,` class
method.`),are.forEach(t),w4r=i(Pl),N9=n(Pl,"P",{});var AXe=s(N9);A4r=r(AXe,"This class cannot be instantiated directly using "),XFe=n(AXe,"CODE",{});var nyt=s(XFe);L4r=r(nyt,"__init__()"),nyt.forEach(t),y4r=r(AXe," (throws an error)."),AXe.forEach(t),x4r=i(Pl),It=n(Pl,"DIV",{class:!0});var xA=s(It);T(q9.$$.fragment,xA),$4r=i(xA),zFe=n(xA,"P",{});var syt=s(zFe);k4r=r(syt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),syt.forEach(t),S4r=i(xA),vc=n(xA,"P",{});var nre=s(vc);R4r=r(nre,`Note:
Loading a model from its configuration file does `),WFe=n(nre,"STRONG",{});var lyt=s(WFe);P4r=r(lyt,"not"),lyt.forEach(t),B4r=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(nre,"A",{href:!0});var iyt=s(cJ);I4r=r(iyt,"from_pretrained()"),iyt.forEach(t),N4r=r(nre," to load the model weights."),nre.forEach(t),q4r=i(xA),T(iM.$$.fragment,xA),xA.forEach(t),j4r=i(Pl),Rr=n(Pl,"DIV",{class:!0});var Bl=s(Rr);T(j9.$$.fragment,Bl),D4r=i(Bl),QFe=n(Bl,"P",{});var dyt=s(QFe);G4r=r(dyt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dyt.forEach(t),O4r=i(Bl),fn=n(Bl,"P",{});var $A=s(fn);V4r=r($A,"The model class to instantiate is selected based on the "),HFe=n($A,"CODE",{});var cyt=s(HFe);X4r=r(cyt,"model_type"),cyt.forEach(t),z4r=r($A,` property of the config object (either
passed as an argument or loaded from `),UFe=n($A,"CODE",{});var fyt=s(UFe);W4r=r(fyt,"pretrained_model_name_or_path"),fyt.forEach(t),Q4r=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=n($A,"CODE",{});var myt=s(JFe);H4r=r(myt,"pretrained_model_name_or_path"),myt.forEach(t),U4r=r($A,":"),$A.forEach(t),J4r=i(Bl),te=n(Bl,"UL",{});var ne=s(te);dM=n(ne,"LI",{});var uNe=s(dM);YFe=n(uNe,"STRONG",{});var gyt=s(YFe);Y4r=r(gyt,"albert"),gyt.forEach(t),K4r=r(uNe," \u2014 "),fJ=n(uNe,"A",{href:!0});var hyt=s(fJ);Z4r=r(hyt,"TFAlbertForSequenceClassification"),hyt.forEach(t),eEr=r(uNe," (ALBERT model)"),uNe.forEach(t),oEr=i(ne),cM=n(ne,"LI",{});var _Ne=s(cM);KFe=n(_Ne,"STRONG",{});var pyt=s(KFe);rEr=r(pyt,"bert"),pyt.forEach(t),tEr=r(_Ne," \u2014 "),mJ=n(_Ne,"A",{href:!0});var uyt=s(mJ);aEr=r(uyt,"TFBertForSequenceClassification"),uyt.forEach(t),nEr=r(_Ne," (BERT model)"),_Ne.forEach(t),sEr=i(ne),fM=n(ne,"LI",{});var bNe=s(fM);ZFe=n(bNe,"STRONG",{});var _yt=s(ZFe);lEr=r(_yt,"camembert"),_yt.forEach(t),iEr=r(bNe," \u2014 "),gJ=n(bNe,"A",{href:!0});var byt=s(gJ);dEr=r(byt,"TFCamembertForSequenceClassification"),byt.forEach(t),cEr=r(bNe," (CamemBERT model)"),bNe.forEach(t),fEr=i(ne),mM=n(ne,"LI",{});var vNe=s(mM);e6e=n(vNe,"STRONG",{});var vyt=s(e6e);mEr=r(vyt,"convbert"),vyt.forEach(t),gEr=r(vNe," \u2014 "),hJ=n(vNe,"A",{href:!0});var Fyt=s(hJ);hEr=r(Fyt,"TFConvBertForSequenceClassification"),Fyt.forEach(t),pEr=r(vNe," (ConvBERT model)"),vNe.forEach(t),uEr=i(ne),gM=n(ne,"LI",{});var FNe=s(gM);o6e=n(FNe,"STRONG",{});var Tyt=s(o6e);_Er=r(Tyt,"ctrl"),Tyt.forEach(t),bEr=r(FNe," \u2014 "),pJ=n(FNe,"A",{href:!0});var Myt=s(pJ);vEr=r(Myt,"TFCTRLForSequenceClassification"),Myt.forEach(t),FEr=r(FNe," (CTRL model)"),FNe.forEach(t),TEr=i(ne),hM=n(ne,"LI",{});var TNe=s(hM);r6e=n(TNe,"STRONG",{});var Eyt=s(r6e);MEr=r(Eyt,"deberta"),Eyt.forEach(t),EEr=r(TNe," \u2014 "),uJ=n(TNe,"A",{href:!0});var Cyt=s(uJ);CEr=r(Cyt,"TFDebertaForSequenceClassification"),Cyt.forEach(t),wEr=r(TNe," (DeBERTa model)"),TNe.forEach(t),AEr=i(ne),pM=n(ne,"LI",{});var MNe=s(pM);t6e=n(MNe,"STRONG",{});var wyt=s(t6e);LEr=r(wyt,"deberta-v2"),wyt.forEach(t),yEr=r(MNe," \u2014 "),_J=n(MNe,"A",{href:!0});var Ayt=s(_J);xEr=r(Ayt,"TFDebertaV2ForSequenceClassification"),Ayt.forEach(t),$Er=r(MNe," (DeBERTa-v2 model)"),MNe.forEach(t),kEr=i(ne),uM=n(ne,"LI",{});var ENe=s(uM);a6e=n(ENe,"STRONG",{});var Lyt=s(a6e);SEr=r(Lyt,"distilbert"),Lyt.forEach(t),REr=r(ENe," \u2014 "),bJ=n(ENe,"A",{href:!0});var yyt=s(bJ);PEr=r(yyt,"TFDistilBertForSequenceClassification"),yyt.forEach(t),BEr=r(ENe," (DistilBERT model)"),ENe.forEach(t),IEr=i(ne),_M=n(ne,"LI",{});var CNe=s(_M);n6e=n(CNe,"STRONG",{});var xyt=s(n6e);NEr=r(xyt,"electra"),xyt.forEach(t),qEr=r(CNe," \u2014 "),vJ=n(CNe,"A",{href:!0});var $yt=s(vJ);jEr=r($yt,"TFElectraForSequenceClassification"),$yt.forEach(t),DEr=r(CNe," (ELECTRA model)"),CNe.forEach(t),GEr=i(ne),bM=n(ne,"LI",{});var wNe=s(bM);s6e=n(wNe,"STRONG",{});var kyt=s(s6e);OEr=r(kyt,"flaubert"),kyt.forEach(t),VEr=r(wNe," \u2014 "),FJ=n(wNe,"A",{href:!0});var Syt=s(FJ);XEr=r(Syt,"TFFlaubertForSequenceClassification"),Syt.forEach(t),zEr=r(wNe," (FlauBERT model)"),wNe.forEach(t),WEr=i(ne),vM=n(ne,"LI",{});var ANe=s(vM);l6e=n(ANe,"STRONG",{});var Ryt=s(l6e);QEr=r(Ryt,"funnel"),Ryt.forEach(t),HEr=r(ANe," \u2014 "),TJ=n(ANe,"A",{href:!0});var Pyt=s(TJ);UEr=r(Pyt,"TFFunnelForSequenceClassification"),Pyt.forEach(t),JEr=r(ANe," (Funnel Transformer model)"),ANe.forEach(t),YEr=i(ne),FM=n(ne,"LI",{});var LNe=s(FM);i6e=n(LNe,"STRONG",{});var Byt=s(i6e);KEr=r(Byt,"gpt2"),Byt.forEach(t),ZEr=r(LNe," \u2014 "),MJ=n(LNe,"A",{href:!0});var Iyt=s(MJ);eCr=r(Iyt,"TFGPT2ForSequenceClassification"),Iyt.forEach(t),oCr=r(LNe," (OpenAI GPT-2 model)"),LNe.forEach(t),rCr=i(ne),TM=n(ne,"LI",{});var yNe=s(TM);d6e=n(yNe,"STRONG",{});var Nyt=s(d6e);tCr=r(Nyt,"gptj"),Nyt.forEach(t),aCr=r(yNe," \u2014 "),EJ=n(yNe,"A",{href:!0});var qyt=s(EJ);nCr=r(qyt,"TFGPTJForSequenceClassification"),qyt.forEach(t),sCr=r(yNe," (GPT-J model)"),yNe.forEach(t),lCr=i(ne),MM=n(ne,"LI",{});var xNe=s(MM);c6e=n(xNe,"STRONG",{});var jyt=s(c6e);iCr=r(jyt,"layoutlm"),jyt.forEach(t),dCr=r(xNe," \u2014 "),CJ=n(xNe,"A",{href:!0});var Dyt=s(CJ);cCr=r(Dyt,"TFLayoutLMForSequenceClassification"),Dyt.forEach(t),fCr=r(xNe," (LayoutLM model)"),xNe.forEach(t),mCr=i(ne),EM=n(ne,"LI",{});var $Ne=s(EM);f6e=n($Ne,"STRONG",{});var Gyt=s(f6e);gCr=r(Gyt,"longformer"),Gyt.forEach(t),hCr=r($Ne," \u2014 "),wJ=n($Ne,"A",{href:!0});var Oyt=s(wJ);pCr=r(Oyt,"TFLongformerForSequenceClassification"),Oyt.forEach(t),uCr=r($Ne," (Longformer model)"),$Ne.forEach(t),_Cr=i(ne),CM=n(ne,"LI",{});var kNe=s(CM);m6e=n(kNe,"STRONG",{});var Vyt=s(m6e);bCr=r(Vyt,"mobilebert"),Vyt.forEach(t),vCr=r(kNe," \u2014 "),AJ=n(kNe,"A",{href:!0});var Xyt=s(AJ);FCr=r(Xyt,"TFMobileBertForSequenceClassification"),Xyt.forEach(t),TCr=r(kNe," (MobileBERT model)"),kNe.forEach(t),MCr=i(ne),wM=n(ne,"LI",{});var SNe=s(wM);g6e=n(SNe,"STRONG",{});var zyt=s(g6e);ECr=r(zyt,"mpnet"),zyt.forEach(t),CCr=r(SNe," \u2014 "),LJ=n(SNe,"A",{href:!0});var Wyt=s(LJ);wCr=r(Wyt,"TFMPNetForSequenceClassification"),Wyt.forEach(t),ACr=r(SNe," (MPNet model)"),SNe.forEach(t),LCr=i(ne),AM=n(ne,"LI",{});var RNe=s(AM);h6e=n(RNe,"STRONG",{});var Qyt=s(h6e);yCr=r(Qyt,"openai-gpt"),Qyt.forEach(t),xCr=r(RNe," \u2014 "),yJ=n(RNe,"A",{href:!0});var Hyt=s(yJ);$Cr=r(Hyt,"TFOpenAIGPTForSequenceClassification"),Hyt.forEach(t),kCr=r(RNe," (OpenAI GPT model)"),RNe.forEach(t),SCr=i(ne),LM=n(ne,"LI",{});var PNe=s(LM);p6e=n(PNe,"STRONG",{});var Uyt=s(p6e);RCr=r(Uyt,"rembert"),Uyt.forEach(t),PCr=r(PNe," \u2014 "),xJ=n(PNe,"A",{href:!0});var Jyt=s(xJ);BCr=r(Jyt,"TFRemBertForSequenceClassification"),Jyt.forEach(t),ICr=r(PNe," (RemBERT model)"),PNe.forEach(t),NCr=i(ne),yM=n(ne,"LI",{});var BNe=s(yM);u6e=n(BNe,"STRONG",{});var Yyt=s(u6e);qCr=r(Yyt,"roberta"),Yyt.forEach(t),jCr=r(BNe," \u2014 "),$J=n(BNe,"A",{href:!0});var Kyt=s($J);DCr=r(Kyt,"TFRobertaForSequenceClassification"),Kyt.forEach(t),GCr=r(BNe," (RoBERTa model)"),BNe.forEach(t),OCr=i(ne),xM=n(ne,"LI",{});var INe=s(xM);_6e=n(INe,"STRONG",{});var Zyt=s(_6e);VCr=r(Zyt,"roformer"),Zyt.forEach(t),XCr=r(INe," \u2014 "),kJ=n(INe,"A",{href:!0});var e8t=s(kJ);zCr=r(e8t,"TFRoFormerForSequenceClassification"),e8t.forEach(t),WCr=r(INe," (RoFormer model)"),INe.forEach(t),QCr=i(ne),$M=n(ne,"LI",{});var NNe=s($M);b6e=n(NNe,"STRONG",{});var o8t=s(b6e);HCr=r(o8t,"tapas"),o8t.forEach(t),UCr=r(NNe," \u2014 "),SJ=n(NNe,"A",{href:!0});var r8t=s(SJ);JCr=r(r8t,"TFTapasForSequenceClassification"),r8t.forEach(t),YCr=r(NNe," (TAPAS model)"),NNe.forEach(t),KCr=i(ne),kM=n(ne,"LI",{});var qNe=s(kM);v6e=n(qNe,"STRONG",{});var t8t=s(v6e);ZCr=r(t8t,"transfo-xl"),t8t.forEach(t),e5r=r(qNe," \u2014 "),RJ=n(qNe,"A",{href:!0});var a8t=s(RJ);o5r=r(a8t,"TFTransfoXLForSequenceClassification"),a8t.forEach(t),r5r=r(qNe," (Transformer-XL model)"),qNe.forEach(t),t5r=i(ne),SM=n(ne,"LI",{});var jNe=s(SM);F6e=n(jNe,"STRONG",{});var n8t=s(F6e);a5r=r(n8t,"xlm"),n8t.forEach(t),n5r=r(jNe," \u2014 "),PJ=n(jNe,"A",{href:!0});var s8t=s(PJ);s5r=r(s8t,"TFXLMForSequenceClassification"),s8t.forEach(t),l5r=r(jNe," (XLM model)"),jNe.forEach(t),i5r=i(ne),RM=n(ne,"LI",{});var DNe=s(RM);T6e=n(DNe,"STRONG",{});var l8t=s(T6e);d5r=r(l8t,"xlm-roberta"),l8t.forEach(t),c5r=r(DNe," \u2014 "),BJ=n(DNe,"A",{href:!0});var i8t=s(BJ);f5r=r(i8t,"TFXLMRobertaForSequenceClassification"),i8t.forEach(t),m5r=r(DNe," (XLM-RoBERTa model)"),DNe.forEach(t),g5r=i(ne),PM=n(ne,"LI",{});var GNe=s(PM);M6e=n(GNe,"STRONG",{});var d8t=s(M6e);h5r=r(d8t,"xlnet"),d8t.forEach(t),p5r=r(GNe," \u2014 "),IJ=n(GNe,"A",{href:!0});var c8t=s(IJ);u5r=r(c8t,"TFXLNetForSequenceClassification"),c8t.forEach(t),_5r=r(GNe," (XLNet model)"),GNe.forEach(t),ne.forEach(t),b5r=i(Bl),T(BM.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),vOe=i(f),Fc=n(f,"H2",{class:!0});var LXe=s(Fc);IM=n(LXe,"A",{id:!0,class:!0,href:!0});var f8t=s(IM);E6e=n(f8t,"SPAN",{});var m8t=s(E6e);T(D9.$$.fragment,m8t),m8t.forEach(t),f8t.forEach(t),v5r=i(LXe),C6e=n(LXe,"SPAN",{});var g8t=s(C6e);F5r=r(g8t,"TFAutoModelForMultipleChoice"),g8t.forEach(t),LXe.forEach(t),FOe=i(f),sr=n(f,"DIV",{class:!0});var Il=s(sr);T(G9.$$.fragment,Il),T5r=i(Il),Tc=n(Il,"P",{});var sre=s(Tc);M5r=r(sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NJ=n(sre,"A",{href:!0});var h8t=s(NJ);E5r=r(h8t,"from_pretrained()"),h8t.forEach(t),C5r=r(sre," class method or the "),qJ=n(sre,"A",{href:!0});var p8t=s(qJ);w5r=r(p8t,"from_config()"),p8t.forEach(t),A5r=r(sre,` class
method.`),sre.forEach(t),L5r=i(Il),O9=n(Il,"P",{});var yXe=s(O9);y5r=r(yXe,"This class cannot be instantiated directly using "),w6e=n(yXe,"CODE",{});var u8t=s(w6e);x5r=r(u8t,"__init__()"),u8t.forEach(t),$5r=r(yXe," (throws an error)."),yXe.forEach(t),k5r=i(Il),Nt=n(Il,"DIV",{class:!0});var kA=s(Nt);T(V9.$$.fragment,kA),S5r=i(kA),A6e=n(kA,"P",{});var _8t=s(A6e);R5r=r(_8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_8t.forEach(t),P5r=i(kA),Mc=n(kA,"P",{});var lre=s(Mc);B5r=r(lre,`Note:
Loading a model from its configuration file does `),L6e=n(lre,"STRONG",{});var b8t=s(L6e);I5r=r(b8t,"not"),b8t.forEach(t),N5r=r(lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(lre,"A",{href:!0});var v8t=s(jJ);q5r=r(v8t,"from_pretrained()"),v8t.forEach(t),j5r=r(lre," to load the model weights."),lre.forEach(t),D5r=i(kA),T(NM.$$.fragment,kA),kA.forEach(t),G5r=i(Il),Pr=n(Il,"DIV",{class:!0});var Nl=s(Pr);T(X9.$$.fragment,Nl),O5r=i(Nl),y6e=n(Nl,"P",{});var F8t=s(y6e);V5r=r(F8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),F8t.forEach(t),X5r=i(Nl),mn=n(Nl,"P",{});var SA=s(mn);z5r=r(SA,"The model class to instantiate is selected based on the "),x6e=n(SA,"CODE",{});var T8t=s(x6e);W5r=r(T8t,"model_type"),T8t.forEach(t),Q5r=r(SA,` property of the config object (either
passed as an argument or loaded from `),$6e=n(SA,"CODE",{});var M8t=s($6e);H5r=r(M8t,"pretrained_model_name_or_path"),M8t.forEach(t),U5r=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k6e=n(SA,"CODE",{});var E8t=s(k6e);J5r=r(E8t,"pretrained_model_name_or_path"),E8t.forEach(t),Y5r=r(SA,":"),SA.forEach(t),K5r=i(Nl),ue=n(Nl,"UL",{});var ve=s(ue);qM=n(ve,"LI",{});var ONe=s(qM);S6e=n(ONe,"STRONG",{});var C8t=s(S6e);Z5r=r(C8t,"albert"),C8t.forEach(t),ewr=r(ONe," \u2014 "),DJ=n(ONe,"A",{href:!0});var w8t=s(DJ);owr=r(w8t,"TFAlbertForMultipleChoice"),w8t.forEach(t),rwr=r(ONe," (ALBERT model)"),ONe.forEach(t),twr=i(ve),jM=n(ve,"LI",{});var VNe=s(jM);R6e=n(VNe,"STRONG",{});var A8t=s(R6e);awr=r(A8t,"bert"),A8t.forEach(t),nwr=r(VNe," \u2014 "),GJ=n(VNe,"A",{href:!0});var L8t=s(GJ);swr=r(L8t,"TFBertForMultipleChoice"),L8t.forEach(t),lwr=r(VNe," (BERT model)"),VNe.forEach(t),iwr=i(ve),DM=n(ve,"LI",{});var XNe=s(DM);P6e=n(XNe,"STRONG",{});var y8t=s(P6e);dwr=r(y8t,"camembert"),y8t.forEach(t),cwr=r(XNe," \u2014 "),OJ=n(XNe,"A",{href:!0});var x8t=s(OJ);fwr=r(x8t,"TFCamembertForMultipleChoice"),x8t.forEach(t),mwr=r(XNe," (CamemBERT model)"),XNe.forEach(t),gwr=i(ve),GM=n(ve,"LI",{});var zNe=s(GM);B6e=n(zNe,"STRONG",{});var $8t=s(B6e);hwr=r($8t,"convbert"),$8t.forEach(t),pwr=r(zNe," \u2014 "),VJ=n(zNe,"A",{href:!0});var k8t=s(VJ);uwr=r(k8t,"TFConvBertForMultipleChoice"),k8t.forEach(t),_wr=r(zNe," (ConvBERT model)"),zNe.forEach(t),bwr=i(ve),OM=n(ve,"LI",{});var WNe=s(OM);I6e=n(WNe,"STRONG",{});var S8t=s(I6e);vwr=r(S8t,"distilbert"),S8t.forEach(t),Fwr=r(WNe," \u2014 "),XJ=n(WNe,"A",{href:!0});var R8t=s(XJ);Twr=r(R8t,"TFDistilBertForMultipleChoice"),R8t.forEach(t),Mwr=r(WNe," (DistilBERT model)"),WNe.forEach(t),Ewr=i(ve),VM=n(ve,"LI",{});var QNe=s(VM);N6e=n(QNe,"STRONG",{});var P8t=s(N6e);Cwr=r(P8t,"electra"),P8t.forEach(t),wwr=r(QNe," \u2014 "),zJ=n(QNe,"A",{href:!0});var B8t=s(zJ);Awr=r(B8t,"TFElectraForMultipleChoice"),B8t.forEach(t),Lwr=r(QNe," (ELECTRA model)"),QNe.forEach(t),ywr=i(ve),XM=n(ve,"LI",{});var HNe=s(XM);q6e=n(HNe,"STRONG",{});var I8t=s(q6e);xwr=r(I8t,"flaubert"),I8t.forEach(t),$wr=r(HNe," \u2014 "),WJ=n(HNe,"A",{href:!0});var N8t=s(WJ);kwr=r(N8t,"TFFlaubertForMultipleChoice"),N8t.forEach(t),Swr=r(HNe," (FlauBERT model)"),HNe.forEach(t),Rwr=i(ve),zM=n(ve,"LI",{});var UNe=s(zM);j6e=n(UNe,"STRONG",{});var q8t=s(j6e);Pwr=r(q8t,"funnel"),q8t.forEach(t),Bwr=r(UNe," \u2014 "),QJ=n(UNe,"A",{href:!0});var j8t=s(QJ);Iwr=r(j8t,"TFFunnelForMultipleChoice"),j8t.forEach(t),Nwr=r(UNe," (Funnel Transformer model)"),UNe.forEach(t),qwr=i(ve),WM=n(ve,"LI",{});var JNe=s(WM);D6e=n(JNe,"STRONG",{});var D8t=s(D6e);jwr=r(D8t,"longformer"),D8t.forEach(t),Dwr=r(JNe," \u2014 "),HJ=n(JNe,"A",{href:!0});var G8t=s(HJ);Gwr=r(G8t,"TFLongformerForMultipleChoice"),G8t.forEach(t),Owr=r(JNe," (Longformer model)"),JNe.forEach(t),Vwr=i(ve),QM=n(ve,"LI",{});var YNe=s(QM);G6e=n(YNe,"STRONG",{});var O8t=s(G6e);Xwr=r(O8t,"mobilebert"),O8t.forEach(t),zwr=r(YNe," \u2014 "),UJ=n(YNe,"A",{href:!0});var V8t=s(UJ);Wwr=r(V8t,"TFMobileBertForMultipleChoice"),V8t.forEach(t),Qwr=r(YNe," (MobileBERT model)"),YNe.forEach(t),Hwr=i(ve),HM=n(ve,"LI",{});var KNe=s(HM);O6e=n(KNe,"STRONG",{});var X8t=s(O6e);Uwr=r(X8t,"mpnet"),X8t.forEach(t),Jwr=r(KNe," \u2014 "),JJ=n(KNe,"A",{href:!0});var z8t=s(JJ);Ywr=r(z8t,"TFMPNetForMultipleChoice"),z8t.forEach(t),Kwr=r(KNe," (MPNet model)"),KNe.forEach(t),Zwr=i(ve),UM=n(ve,"LI",{});var ZNe=s(UM);V6e=n(ZNe,"STRONG",{});var W8t=s(V6e);eAr=r(W8t,"rembert"),W8t.forEach(t),oAr=r(ZNe," \u2014 "),YJ=n(ZNe,"A",{href:!0});var Q8t=s(YJ);rAr=r(Q8t,"TFRemBertForMultipleChoice"),Q8t.forEach(t),tAr=r(ZNe," (RemBERT model)"),ZNe.forEach(t),aAr=i(ve),JM=n(ve,"LI",{});var eqe=s(JM);X6e=n(eqe,"STRONG",{});var H8t=s(X6e);nAr=r(H8t,"roberta"),H8t.forEach(t),sAr=r(eqe," \u2014 "),KJ=n(eqe,"A",{href:!0});var U8t=s(KJ);lAr=r(U8t,"TFRobertaForMultipleChoice"),U8t.forEach(t),iAr=r(eqe," (RoBERTa model)"),eqe.forEach(t),dAr=i(ve),YM=n(ve,"LI",{});var oqe=s(YM);z6e=n(oqe,"STRONG",{});var J8t=s(z6e);cAr=r(J8t,"roformer"),J8t.forEach(t),fAr=r(oqe," \u2014 "),ZJ=n(oqe,"A",{href:!0});var Y8t=s(ZJ);mAr=r(Y8t,"TFRoFormerForMultipleChoice"),Y8t.forEach(t),gAr=r(oqe," (RoFormer model)"),oqe.forEach(t),hAr=i(ve),KM=n(ve,"LI",{});var rqe=s(KM);W6e=n(rqe,"STRONG",{});var K8t=s(W6e);pAr=r(K8t,"xlm"),K8t.forEach(t),uAr=r(rqe," \u2014 "),eY=n(rqe,"A",{href:!0});var Z8t=s(eY);_Ar=r(Z8t,"TFXLMForMultipleChoice"),Z8t.forEach(t),bAr=r(rqe," (XLM model)"),rqe.forEach(t),vAr=i(ve),ZM=n(ve,"LI",{});var tqe=s(ZM);Q6e=n(tqe,"STRONG",{});var e9t=s(Q6e);FAr=r(e9t,"xlm-roberta"),e9t.forEach(t),TAr=r(tqe," \u2014 "),oY=n(tqe,"A",{href:!0});var o9t=s(oY);MAr=r(o9t,"TFXLMRobertaForMultipleChoice"),o9t.forEach(t),EAr=r(tqe," (XLM-RoBERTa model)"),tqe.forEach(t),CAr=i(ve),e4=n(ve,"LI",{});var aqe=s(e4);H6e=n(aqe,"STRONG",{});var r9t=s(H6e);wAr=r(r9t,"xlnet"),r9t.forEach(t),AAr=r(aqe," \u2014 "),rY=n(aqe,"A",{href:!0});var t9t=s(rY);LAr=r(t9t,"TFXLNetForMultipleChoice"),t9t.forEach(t),yAr=r(aqe," (XLNet model)"),aqe.forEach(t),ve.forEach(t),xAr=i(Nl),T(o4.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),TOe=i(f),Ec=n(f,"H2",{class:!0});var xXe=s(Ec);r4=n(xXe,"A",{id:!0,class:!0,href:!0});var a9t=s(r4);U6e=n(a9t,"SPAN",{});var n9t=s(U6e);T(z9.$$.fragment,n9t),n9t.forEach(t),a9t.forEach(t),$Ar=i(xXe),J6e=n(xXe,"SPAN",{});var s9t=s(J6e);kAr=r(s9t,"TFAutoModelForNextSentencePrediction"),s9t.forEach(t),xXe.forEach(t),MOe=i(f),lr=n(f,"DIV",{class:!0});var ql=s(lr);T(W9.$$.fragment,ql),SAr=i(ql),Cc=n(ql,"P",{});var ire=s(Cc);RAr=r(ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tY=n(ire,"A",{href:!0});var l9t=s(tY);PAr=r(l9t,"from_pretrained()"),l9t.forEach(t),BAr=r(ire," class method or the "),aY=n(ire,"A",{href:!0});var i9t=s(aY);IAr=r(i9t,"from_config()"),i9t.forEach(t),NAr=r(ire,` class
method.`),ire.forEach(t),qAr=i(ql),Q9=n(ql,"P",{});var $Xe=s(Q9);jAr=r($Xe,"This class cannot be instantiated directly using "),Y6e=n($Xe,"CODE",{});var d9t=s(Y6e);DAr=r(d9t,"__init__()"),d9t.forEach(t),GAr=r($Xe," (throws an error)."),$Xe.forEach(t),OAr=i(ql),qt=n(ql,"DIV",{class:!0});var RA=s(qt);T(H9.$$.fragment,RA),VAr=i(RA),K6e=n(RA,"P",{});var c9t=s(K6e);XAr=r(c9t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),c9t.forEach(t),zAr=i(RA),wc=n(RA,"P",{});var dre=s(wc);WAr=r(dre,`Note:
Loading a model from its configuration file does `),Z6e=n(dre,"STRONG",{});var f9t=s(Z6e);QAr=r(f9t,"not"),f9t.forEach(t),HAr=r(dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=n(dre,"A",{href:!0});var m9t=s(nY);UAr=r(m9t,"from_pretrained()"),m9t.forEach(t),JAr=r(dre," to load the model weights."),dre.forEach(t),YAr=i(RA),T(t4.$$.fragment,RA),RA.forEach(t),KAr=i(ql),Br=n(ql,"DIV",{class:!0});var jl=s(Br);T(U9.$$.fragment,jl),ZAr=i(jl),eTe=n(jl,"P",{});var g9t=s(eTe);eLr=r(g9t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),g9t.forEach(t),oLr=i(jl),gn=n(jl,"P",{});var PA=s(gn);rLr=r(PA,"The model class to instantiate is selected based on the "),oTe=n(PA,"CODE",{});var h9t=s(oTe);tLr=r(h9t,"model_type"),h9t.forEach(t),aLr=r(PA,` property of the config object (either
passed as an argument or loaded from `),rTe=n(PA,"CODE",{});var p9t=s(rTe);nLr=r(p9t,"pretrained_model_name_or_path"),p9t.forEach(t),sLr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=n(PA,"CODE",{});var u9t=s(tTe);lLr=r(u9t,"pretrained_model_name_or_path"),u9t.forEach(t),iLr=r(PA,":"),PA.forEach(t),dLr=i(jl),J9=n(jl,"UL",{});var kXe=s(J9);a4=n(kXe,"LI",{});var nqe=s(a4);aTe=n(nqe,"STRONG",{});var _9t=s(aTe);cLr=r(_9t,"bert"),_9t.forEach(t),fLr=r(nqe," \u2014 "),sY=n(nqe,"A",{href:!0});var b9t=s(sY);mLr=r(b9t,"TFBertForNextSentencePrediction"),b9t.forEach(t),gLr=r(nqe," (BERT model)"),nqe.forEach(t),hLr=i(kXe),n4=n(kXe,"LI",{});var sqe=s(n4);nTe=n(sqe,"STRONG",{});var v9t=s(nTe);pLr=r(v9t,"mobilebert"),v9t.forEach(t),uLr=r(sqe," \u2014 "),lY=n(sqe,"A",{href:!0});var F9t=s(lY);_Lr=r(F9t,"TFMobileBertForNextSentencePrediction"),F9t.forEach(t),bLr=r(sqe," (MobileBERT model)"),sqe.forEach(t),kXe.forEach(t),vLr=i(jl),T(s4.$$.fragment,jl),jl.forEach(t),ql.forEach(t),EOe=i(f),Ac=n(f,"H2",{class:!0});var SXe=s(Ac);l4=n(SXe,"A",{id:!0,class:!0,href:!0});var T9t=s(l4);sTe=n(T9t,"SPAN",{});var M9t=s(sTe);T(Y9.$$.fragment,M9t),M9t.forEach(t),T9t.forEach(t),FLr=i(SXe),lTe=n(SXe,"SPAN",{});var E9t=s(lTe);TLr=r(E9t,"TFAutoModelForTableQuestionAnswering"),E9t.forEach(t),SXe.forEach(t),COe=i(f),ir=n(f,"DIV",{class:!0});var Dl=s(ir);T(K9.$$.fragment,Dl),MLr=i(Dl),Lc=n(Dl,"P",{});var cre=s(Lc);ELr=r(cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iY=n(cre,"A",{href:!0});var C9t=s(iY);CLr=r(C9t,"from_pretrained()"),C9t.forEach(t),wLr=r(cre," class method or the "),dY=n(cre,"A",{href:!0});var w9t=s(dY);ALr=r(w9t,"from_config()"),w9t.forEach(t),LLr=r(cre,` class
method.`),cre.forEach(t),yLr=i(Dl),Z9=n(Dl,"P",{});var RXe=s(Z9);xLr=r(RXe,"This class cannot be instantiated directly using "),iTe=n(RXe,"CODE",{});var A9t=s(iTe);$Lr=r(A9t,"__init__()"),A9t.forEach(t),kLr=r(RXe," (throws an error)."),RXe.forEach(t),SLr=i(Dl),jt=n(Dl,"DIV",{class:!0});var BA=s(jt);T(ex.$$.fragment,BA),RLr=i(BA),dTe=n(BA,"P",{});var L9t=s(dTe);PLr=r(L9t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),L9t.forEach(t),BLr=i(BA),yc=n(BA,"P",{});var fre=s(yc);ILr=r(fre,`Note:
Loading a model from its configuration file does `),cTe=n(fre,"STRONG",{});var y9t=s(cTe);NLr=r(y9t,"not"),y9t.forEach(t),qLr=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=n(fre,"A",{href:!0});var x9t=s(cY);jLr=r(x9t,"from_pretrained()"),x9t.forEach(t),DLr=r(fre," to load the model weights."),fre.forEach(t),GLr=i(BA),T(i4.$$.fragment,BA),BA.forEach(t),OLr=i(Dl),Ir=n(Dl,"DIV",{class:!0});var Gl=s(Ir);T(ox.$$.fragment,Gl),VLr=i(Gl),fTe=n(Gl,"P",{});var $9t=s(fTe);XLr=r($9t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$9t.forEach(t),zLr=i(Gl),hn=n(Gl,"P",{});var IA=s(hn);WLr=r(IA,"The model class to instantiate is selected based on the "),mTe=n(IA,"CODE",{});var k9t=s(mTe);QLr=r(k9t,"model_type"),k9t.forEach(t),HLr=r(IA,` property of the config object (either
passed as an argument or loaded from `),gTe=n(IA,"CODE",{});var S9t=s(gTe);ULr=r(S9t,"pretrained_model_name_or_path"),S9t.forEach(t),JLr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hTe=n(IA,"CODE",{});var R9t=s(hTe);YLr=r(R9t,"pretrained_model_name_or_path"),R9t.forEach(t),KLr=r(IA,":"),IA.forEach(t),ZLr=i(Gl),pTe=n(Gl,"UL",{});var P9t=s(pTe);d4=n(P9t,"LI",{});var lqe=s(d4);uTe=n(lqe,"STRONG",{});var B9t=s(uTe);eyr=r(B9t,"tapas"),B9t.forEach(t),oyr=r(lqe," \u2014 "),fY=n(lqe,"A",{href:!0});var I9t=s(fY);ryr=r(I9t,"TFTapasForQuestionAnswering"),I9t.forEach(t),tyr=r(lqe," (TAPAS model)"),lqe.forEach(t),P9t.forEach(t),ayr=i(Gl),T(c4.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),wOe=i(f),xc=n(f,"H2",{class:!0});var PXe=s(xc);f4=n(PXe,"A",{id:!0,class:!0,href:!0});var N9t=s(f4);_Te=n(N9t,"SPAN",{});var q9t=s(_Te);T(rx.$$.fragment,q9t),q9t.forEach(t),N9t.forEach(t),nyr=i(PXe),bTe=n(PXe,"SPAN",{});var j9t=s(bTe);syr=r(j9t,"TFAutoModelForTokenClassification"),j9t.forEach(t),PXe.forEach(t),AOe=i(f),dr=n(f,"DIV",{class:!0});var Ol=s(dr);T(tx.$$.fragment,Ol),lyr=i(Ol),$c=n(Ol,"P",{});var mre=s($c);iyr=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mY=n(mre,"A",{href:!0});var D9t=s(mY);dyr=r(D9t,"from_pretrained()"),D9t.forEach(t),cyr=r(mre," class method or the "),gY=n(mre,"A",{href:!0});var G9t=s(gY);fyr=r(G9t,"from_config()"),G9t.forEach(t),myr=r(mre,` class
method.`),mre.forEach(t),gyr=i(Ol),ax=n(Ol,"P",{});var BXe=s(ax);hyr=r(BXe,"This class cannot be instantiated directly using "),vTe=n(BXe,"CODE",{});var O9t=s(vTe);pyr=r(O9t,"__init__()"),O9t.forEach(t),uyr=r(BXe," (throws an error)."),BXe.forEach(t),_yr=i(Ol),Dt=n(Ol,"DIV",{class:!0});var NA=s(Dt);T(nx.$$.fragment,NA),byr=i(NA),FTe=n(NA,"P",{});var V9t=s(FTe);vyr=r(V9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),V9t.forEach(t),Fyr=i(NA),kc=n(NA,"P",{});var gre=s(kc);Tyr=r(gre,`Note:
Loading a model from its configuration file does `),TTe=n(gre,"STRONG",{});var X9t=s(TTe);Myr=r(X9t,"not"),X9t.forEach(t),Eyr=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=n(gre,"A",{href:!0});var z9t=s(hY);Cyr=r(z9t,"from_pretrained()"),z9t.forEach(t),wyr=r(gre," to load the model weights."),gre.forEach(t),Ayr=i(NA),T(m4.$$.fragment,NA),NA.forEach(t),Lyr=i(Ol),Nr=n(Ol,"DIV",{class:!0});var Vl=s(Nr);T(sx.$$.fragment,Vl),yyr=i(Vl),MTe=n(Vl,"P",{});var W9t=s(MTe);xyr=r(W9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),W9t.forEach(t),$yr=i(Vl),pn=n(Vl,"P",{});var qA=s(pn);kyr=r(qA,"The model class to instantiate is selected based on the "),ETe=n(qA,"CODE",{});var Q9t=s(ETe);Syr=r(Q9t,"model_type"),Q9t.forEach(t),Ryr=r(qA,` property of the config object (either
passed as an argument or loaded from `),CTe=n(qA,"CODE",{});var H9t=s(CTe);Pyr=r(H9t,"pretrained_model_name_or_path"),H9t.forEach(t),Byr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=n(qA,"CODE",{});var U9t=s(wTe);Iyr=r(U9t,"pretrained_model_name_or_path"),U9t.forEach(t),Nyr=r(qA,":"),qA.forEach(t),qyr=i(Vl),de=n(Vl,"UL",{});var me=s(de);g4=n(me,"LI",{});var iqe=s(g4);ATe=n(iqe,"STRONG",{});var J9t=s(ATe);jyr=r(J9t,"albert"),J9t.forEach(t),Dyr=r(iqe," \u2014 "),pY=n(iqe,"A",{href:!0});var Y9t=s(pY);Gyr=r(Y9t,"TFAlbertForTokenClassification"),Y9t.forEach(t),Oyr=r(iqe," (ALBERT model)"),iqe.forEach(t),Vyr=i(me),h4=n(me,"LI",{});var dqe=s(h4);LTe=n(dqe,"STRONG",{});var K9t=s(LTe);Xyr=r(K9t,"bert"),K9t.forEach(t),zyr=r(dqe," \u2014 "),uY=n(dqe,"A",{href:!0});var Z9t=s(uY);Wyr=r(Z9t,"TFBertForTokenClassification"),Z9t.forEach(t),Qyr=r(dqe," (BERT model)"),dqe.forEach(t),Hyr=i(me),p4=n(me,"LI",{});var cqe=s(p4);yTe=n(cqe,"STRONG",{});var ext=s(yTe);Uyr=r(ext,"camembert"),ext.forEach(t),Jyr=r(cqe," \u2014 "),_Y=n(cqe,"A",{href:!0});var oxt=s(_Y);Yyr=r(oxt,"TFCamembertForTokenClassification"),oxt.forEach(t),Kyr=r(cqe," (CamemBERT model)"),cqe.forEach(t),Zyr=i(me),u4=n(me,"LI",{});var fqe=s(u4);xTe=n(fqe,"STRONG",{});var rxt=s(xTe);e8r=r(rxt,"convbert"),rxt.forEach(t),o8r=r(fqe," \u2014 "),bY=n(fqe,"A",{href:!0});var txt=s(bY);r8r=r(txt,"TFConvBertForTokenClassification"),txt.forEach(t),t8r=r(fqe," (ConvBERT model)"),fqe.forEach(t),a8r=i(me),_4=n(me,"LI",{});var mqe=s(_4);$Te=n(mqe,"STRONG",{});var axt=s($Te);n8r=r(axt,"deberta"),axt.forEach(t),s8r=r(mqe," \u2014 "),vY=n(mqe,"A",{href:!0});var nxt=s(vY);l8r=r(nxt,"TFDebertaForTokenClassification"),nxt.forEach(t),i8r=r(mqe," (DeBERTa model)"),mqe.forEach(t),d8r=i(me),b4=n(me,"LI",{});var gqe=s(b4);kTe=n(gqe,"STRONG",{});var sxt=s(kTe);c8r=r(sxt,"deberta-v2"),sxt.forEach(t),f8r=r(gqe," \u2014 "),FY=n(gqe,"A",{href:!0});var lxt=s(FY);m8r=r(lxt,"TFDebertaV2ForTokenClassification"),lxt.forEach(t),g8r=r(gqe," (DeBERTa-v2 model)"),gqe.forEach(t),h8r=i(me),v4=n(me,"LI",{});var hqe=s(v4);STe=n(hqe,"STRONG",{});var ixt=s(STe);p8r=r(ixt,"distilbert"),ixt.forEach(t),u8r=r(hqe," \u2014 "),TY=n(hqe,"A",{href:!0});var dxt=s(TY);_8r=r(dxt,"TFDistilBertForTokenClassification"),dxt.forEach(t),b8r=r(hqe," (DistilBERT model)"),hqe.forEach(t),v8r=i(me),F4=n(me,"LI",{});var pqe=s(F4);RTe=n(pqe,"STRONG",{});var cxt=s(RTe);F8r=r(cxt,"electra"),cxt.forEach(t),T8r=r(pqe," \u2014 "),MY=n(pqe,"A",{href:!0});var fxt=s(MY);M8r=r(fxt,"TFElectraForTokenClassification"),fxt.forEach(t),E8r=r(pqe," (ELECTRA model)"),pqe.forEach(t),C8r=i(me),T4=n(me,"LI",{});var uqe=s(T4);PTe=n(uqe,"STRONG",{});var mxt=s(PTe);w8r=r(mxt,"flaubert"),mxt.forEach(t),A8r=r(uqe," \u2014 "),EY=n(uqe,"A",{href:!0});var gxt=s(EY);L8r=r(gxt,"TFFlaubertForTokenClassification"),gxt.forEach(t),y8r=r(uqe," (FlauBERT model)"),uqe.forEach(t),x8r=i(me),M4=n(me,"LI",{});var _qe=s(M4);BTe=n(_qe,"STRONG",{});var hxt=s(BTe);$8r=r(hxt,"funnel"),hxt.forEach(t),k8r=r(_qe," \u2014 "),CY=n(_qe,"A",{href:!0});var pxt=s(CY);S8r=r(pxt,"TFFunnelForTokenClassification"),pxt.forEach(t),R8r=r(_qe," (Funnel Transformer model)"),_qe.forEach(t),P8r=i(me),E4=n(me,"LI",{});var bqe=s(E4);ITe=n(bqe,"STRONG",{});var uxt=s(ITe);B8r=r(uxt,"layoutlm"),uxt.forEach(t),I8r=r(bqe," \u2014 "),wY=n(bqe,"A",{href:!0});var _xt=s(wY);N8r=r(_xt,"TFLayoutLMForTokenClassification"),_xt.forEach(t),q8r=r(bqe," (LayoutLM model)"),bqe.forEach(t),j8r=i(me),C4=n(me,"LI",{});var vqe=s(C4);NTe=n(vqe,"STRONG",{});var bxt=s(NTe);D8r=r(bxt,"longformer"),bxt.forEach(t),G8r=r(vqe," \u2014 "),AY=n(vqe,"A",{href:!0});var vxt=s(AY);O8r=r(vxt,"TFLongformerForTokenClassification"),vxt.forEach(t),V8r=r(vqe," (Longformer model)"),vqe.forEach(t),X8r=i(me),w4=n(me,"LI",{});var Fqe=s(w4);qTe=n(Fqe,"STRONG",{});var Fxt=s(qTe);z8r=r(Fxt,"mobilebert"),Fxt.forEach(t),W8r=r(Fqe," \u2014 "),LY=n(Fqe,"A",{href:!0});var Txt=s(LY);Q8r=r(Txt,"TFMobileBertForTokenClassification"),Txt.forEach(t),H8r=r(Fqe," (MobileBERT model)"),Fqe.forEach(t),U8r=i(me),A4=n(me,"LI",{});var Tqe=s(A4);jTe=n(Tqe,"STRONG",{});var Mxt=s(jTe);J8r=r(Mxt,"mpnet"),Mxt.forEach(t),Y8r=r(Tqe," \u2014 "),yY=n(Tqe,"A",{href:!0});var Ext=s(yY);K8r=r(Ext,"TFMPNetForTokenClassification"),Ext.forEach(t),Z8r=r(Tqe," (MPNet model)"),Tqe.forEach(t),e9r=i(me),L4=n(me,"LI",{});var Mqe=s(L4);DTe=n(Mqe,"STRONG",{});var Cxt=s(DTe);o9r=r(Cxt,"rembert"),Cxt.forEach(t),r9r=r(Mqe," \u2014 "),xY=n(Mqe,"A",{href:!0});var wxt=s(xY);t9r=r(wxt,"TFRemBertForTokenClassification"),wxt.forEach(t),a9r=r(Mqe," (RemBERT model)"),Mqe.forEach(t),n9r=i(me),y4=n(me,"LI",{});var Eqe=s(y4);GTe=n(Eqe,"STRONG",{});var Axt=s(GTe);s9r=r(Axt,"roberta"),Axt.forEach(t),l9r=r(Eqe," \u2014 "),$Y=n(Eqe,"A",{href:!0});var Lxt=s($Y);i9r=r(Lxt,"TFRobertaForTokenClassification"),Lxt.forEach(t),d9r=r(Eqe," (RoBERTa model)"),Eqe.forEach(t),c9r=i(me),x4=n(me,"LI",{});var Cqe=s(x4);OTe=n(Cqe,"STRONG",{});var yxt=s(OTe);f9r=r(yxt,"roformer"),yxt.forEach(t),m9r=r(Cqe," \u2014 "),kY=n(Cqe,"A",{href:!0});var xxt=s(kY);g9r=r(xxt,"TFRoFormerForTokenClassification"),xxt.forEach(t),h9r=r(Cqe," (RoFormer model)"),Cqe.forEach(t),p9r=i(me),$4=n(me,"LI",{});var wqe=s($4);VTe=n(wqe,"STRONG",{});var $xt=s(VTe);u9r=r($xt,"xlm"),$xt.forEach(t),_9r=r(wqe," \u2014 "),SY=n(wqe,"A",{href:!0});var kxt=s(SY);b9r=r(kxt,"TFXLMForTokenClassification"),kxt.forEach(t),v9r=r(wqe," (XLM model)"),wqe.forEach(t),F9r=i(me),k4=n(me,"LI",{});var Aqe=s(k4);XTe=n(Aqe,"STRONG",{});var Sxt=s(XTe);T9r=r(Sxt,"xlm-roberta"),Sxt.forEach(t),M9r=r(Aqe," \u2014 "),RY=n(Aqe,"A",{href:!0});var Rxt=s(RY);E9r=r(Rxt,"TFXLMRobertaForTokenClassification"),Rxt.forEach(t),C9r=r(Aqe," (XLM-RoBERTa model)"),Aqe.forEach(t),w9r=i(me),S4=n(me,"LI",{});var Lqe=s(S4);zTe=n(Lqe,"STRONG",{});var Pxt=s(zTe);A9r=r(Pxt,"xlnet"),Pxt.forEach(t),L9r=r(Lqe," \u2014 "),PY=n(Lqe,"A",{href:!0});var Bxt=s(PY);y9r=r(Bxt,"TFXLNetForTokenClassification"),Bxt.forEach(t),x9r=r(Lqe," (XLNet model)"),Lqe.forEach(t),me.forEach(t),$9r=i(Vl),T(R4.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),LOe=i(f),Sc=n(f,"H2",{class:!0});var IXe=s(Sc);P4=n(IXe,"A",{id:!0,class:!0,href:!0});var Ixt=s(P4);WTe=n(Ixt,"SPAN",{});var Nxt=s(WTe);T(lx.$$.fragment,Nxt),Nxt.forEach(t),Ixt.forEach(t),k9r=i(IXe),QTe=n(IXe,"SPAN",{});var qxt=s(QTe);S9r=r(qxt,"TFAutoModelForQuestionAnswering"),qxt.forEach(t),IXe.forEach(t),yOe=i(f),cr=n(f,"DIV",{class:!0});var Xl=s(cr);T(ix.$$.fragment,Xl),R9r=i(Xl),Rc=n(Xl,"P",{});var hre=s(Rc);P9r=r(hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BY=n(hre,"A",{href:!0});var jxt=s(BY);B9r=r(jxt,"from_pretrained()"),jxt.forEach(t),I9r=r(hre," class method or the "),IY=n(hre,"A",{href:!0});var Dxt=s(IY);N9r=r(Dxt,"from_config()"),Dxt.forEach(t),q9r=r(hre,` class
method.`),hre.forEach(t),j9r=i(Xl),dx=n(Xl,"P",{});var NXe=s(dx);D9r=r(NXe,"This class cannot be instantiated directly using "),HTe=n(NXe,"CODE",{});var Gxt=s(HTe);G9r=r(Gxt,"__init__()"),Gxt.forEach(t),O9r=r(NXe," (throws an error)."),NXe.forEach(t),V9r=i(Xl),Gt=n(Xl,"DIV",{class:!0});var jA=s(Gt);T(cx.$$.fragment,jA),X9r=i(jA),UTe=n(jA,"P",{});var Oxt=s(UTe);z9r=r(Oxt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Oxt.forEach(t),W9r=i(jA),Pc=n(jA,"P",{});var pre=s(Pc);Q9r=r(pre,`Note:
Loading a model from its configuration file does `),JTe=n(pre,"STRONG",{});var Vxt=s(JTe);H9r=r(Vxt,"not"),Vxt.forEach(t),U9r=r(pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=n(pre,"A",{href:!0});var Xxt=s(NY);J9r=r(Xxt,"from_pretrained()"),Xxt.forEach(t),Y9r=r(pre," to load the model weights."),pre.forEach(t),K9r=i(jA),T(B4.$$.fragment,jA),jA.forEach(t),Z9r=i(Xl),qr=n(Xl,"DIV",{class:!0});var zl=s(qr);T(fx.$$.fragment,zl),exr=i(zl),YTe=n(zl,"P",{});var zxt=s(YTe);oxr=r(zxt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zxt.forEach(t),rxr=i(zl),un=n(zl,"P",{});var DA=s(un);txr=r(DA,"The model class to instantiate is selected based on the "),KTe=n(DA,"CODE",{});var Wxt=s(KTe);axr=r(Wxt,"model_type"),Wxt.forEach(t),nxr=r(DA,` property of the config object (either
passed as an argument or loaded from `),ZTe=n(DA,"CODE",{});var Qxt=s(ZTe);sxr=r(Qxt,"pretrained_model_name_or_path"),Qxt.forEach(t),lxr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e7e=n(DA,"CODE",{});var Hxt=s(e7e);ixr=r(Hxt,"pretrained_model_name_or_path"),Hxt.forEach(t),dxr=r(DA,":"),DA.forEach(t),cxr=i(zl),ce=n(zl,"UL",{});var ge=s(ce);I4=n(ge,"LI",{});var yqe=s(I4);o7e=n(yqe,"STRONG",{});var Uxt=s(o7e);fxr=r(Uxt,"albert"),Uxt.forEach(t),mxr=r(yqe," \u2014 "),qY=n(yqe,"A",{href:!0});var Jxt=s(qY);gxr=r(Jxt,"TFAlbertForQuestionAnswering"),Jxt.forEach(t),hxr=r(yqe," (ALBERT model)"),yqe.forEach(t),pxr=i(ge),N4=n(ge,"LI",{});var xqe=s(N4);r7e=n(xqe,"STRONG",{});var Yxt=s(r7e);uxr=r(Yxt,"bert"),Yxt.forEach(t),_xr=r(xqe," \u2014 "),jY=n(xqe,"A",{href:!0});var Kxt=s(jY);bxr=r(Kxt,"TFBertForQuestionAnswering"),Kxt.forEach(t),vxr=r(xqe," (BERT model)"),xqe.forEach(t),Fxr=i(ge),q4=n(ge,"LI",{});var $qe=s(q4);t7e=n($qe,"STRONG",{});var Zxt=s(t7e);Txr=r(Zxt,"camembert"),Zxt.forEach(t),Mxr=r($qe," \u2014 "),DY=n($qe,"A",{href:!0});var e$t=s(DY);Exr=r(e$t,"TFCamembertForQuestionAnswering"),e$t.forEach(t),Cxr=r($qe," (CamemBERT model)"),$qe.forEach(t),wxr=i(ge),j4=n(ge,"LI",{});var kqe=s(j4);a7e=n(kqe,"STRONG",{});var o$t=s(a7e);Axr=r(o$t,"convbert"),o$t.forEach(t),Lxr=r(kqe," \u2014 "),GY=n(kqe,"A",{href:!0});var r$t=s(GY);yxr=r(r$t,"TFConvBertForQuestionAnswering"),r$t.forEach(t),xxr=r(kqe," (ConvBERT model)"),kqe.forEach(t),$xr=i(ge),D4=n(ge,"LI",{});var Sqe=s(D4);n7e=n(Sqe,"STRONG",{});var t$t=s(n7e);kxr=r(t$t,"deberta"),t$t.forEach(t),Sxr=r(Sqe," \u2014 "),OY=n(Sqe,"A",{href:!0});var a$t=s(OY);Rxr=r(a$t,"TFDebertaForQuestionAnswering"),a$t.forEach(t),Pxr=r(Sqe," (DeBERTa model)"),Sqe.forEach(t),Bxr=i(ge),G4=n(ge,"LI",{});var Rqe=s(G4);s7e=n(Rqe,"STRONG",{});var n$t=s(s7e);Ixr=r(n$t,"deberta-v2"),n$t.forEach(t),Nxr=r(Rqe," \u2014 "),VY=n(Rqe,"A",{href:!0});var s$t=s(VY);qxr=r(s$t,"TFDebertaV2ForQuestionAnswering"),s$t.forEach(t),jxr=r(Rqe," (DeBERTa-v2 model)"),Rqe.forEach(t),Dxr=i(ge),O4=n(ge,"LI",{});var Pqe=s(O4);l7e=n(Pqe,"STRONG",{});var l$t=s(l7e);Gxr=r(l$t,"distilbert"),l$t.forEach(t),Oxr=r(Pqe," \u2014 "),XY=n(Pqe,"A",{href:!0});var i$t=s(XY);Vxr=r(i$t,"TFDistilBertForQuestionAnswering"),i$t.forEach(t),Xxr=r(Pqe," (DistilBERT model)"),Pqe.forEach(t),zxr=i(ge),V4=n(ge,"LI",{});var Bqe=s(V4);i7e=n(Bqe,"STRONG",{});var d$t=s(i7e);Wxr=r(d$t,"electra"),d$t.forEach(t),Qxr=r(Bqe," \u2014 "),zY=n(Bqe,"A",{href:!0});var c$t=s(zY);Hxr=r(c$t,"TFElectraForQuestionAnswering"),c$t.forEach(t),Uxr=r(Bqe," (ELECTRA model)"),Bqe.forEach(t),Jxr=i(ge),X4=n(ge,"LI",{});var Iqe=s(X4);d7e=n(Iqe,"STRONG",{});var f$t=s(d7e);Yxr=r(f$t,"flaubert"),f$t.forEach(t),Kxr=r(Iqe," \u2014 "),WY=n(Iqe,"A",{href:!0});var m$t=s(WY);Zxr=r(m$t,"TFFlaubertForQuestionAnsweringSimple"),m$t.forEach(t),e$r=r(Iqe," (FlauBERT model)"),Iqe.forEach(t),o$r=i(ge),z4=n(ge,"LI",{});var Nqe=s(z4);c7e=n(Nqe,"STRONG",{});var g$t=s(c7e);r$r=r(g$t,"funnel"),g$t.forEach(t),t$r=r(Nqe," \u2014 "),QY=n(Nqe,"A",{href:!0});var h$t=s(QY);a$r=r(h$t,"TFFunnelForQuestionAnswering"),h$t.forEach(t),n$r=r(Nqe," (Funnel Transformer model)"),Nqe.forEach(t),s$r=i(ge),W4=n(ge,"LI",{});var qqe=s(W4);f7e=n(qqe,"STRONG",{});var p$t=s(f7e);l$r=r(p$t,"gptj"),p$t.forEach(t),i$r=r(qqe," \u2014 "),HY=n(qqe,"A",{href:!0});var u$t=s(HY);d$r=r(u$t,"TFGPTJForQuestionAnswering"),u$t.forEach(t),c$r=r(qqe," (GPT-J model)"),qqe.forEach(t),f$r=i(ge),Q4=n(ge,"LI",{});var jqe=s(Q4);m7e=n(jqe,"STRONG",{});var _$t=s(m7e);m$r=r(_$t,"longformer"),_$t.forEach(t),g$r=r(jqe," \u2014 "),UY=n(jqe,"A",{href:!0});var b$t=s(UY);h$r=r(b$t,"TFLongformerForQuestionAnswering"),b$t.forEach(t),p$r=r(jqe," (Longformer model)"),jqe.forEach(t),u$r=i(ge),H4=n(ge,"LI",{});var Dqe=s(H4);g7e=n(Dqe,"STRONG",{});var v$t=s(g7e);_$r=r(v$t,"mobilebert"),v$t.forEach(t),b$r=r(Dqe," \u2014 "),JY=n(Dqe,"A",{href:!0});var F$t=s(JY);v$r=r(F$t,"TFMobileBertForQuestionAnswering"),F$t.forEach(t),F$r=r(Dqe," (MobileBERT model)"),Dqe.forEach(t),T$r=i(ge),U4=n(ge,"LI",{});var Gqe=s(U4);h7e=n(Gqe,"STRONG",{});var T$t=s(h7e);M$r=r(T$t,"mpnet"),T$t.forEach(t),E$r=r(Gqe," \u2014 "),YY=n(Gqe,"A",{href:!0});var M$t=s(YY);C$r=r(M$t,"TFMPNetForQuestionAnswering"),M$t.forEach(t),w$r=r(Gqe," (MPNet model)"),Gqe.forEach(t),A$r=i(ge),J4=n(ge,"LI",{});var Oqe=s(J4);p7e=n(Oqe,"STRONG",{});var E$t=s(p7e);L$r=r(E$t,"rembert"),E$t.forEach(t),y$r=r(Oqe," \u2014 "),KY=n(Oqe,"A",{href:!0});var C$t=s(KY);x$r=r(C$t,"TFRemBertForQuestionAnswering"),C$t.forEach(t),$$r=r(Oqe," (RemBERT model)"),Oqe.forEach(t),k$r=i(ge),Y4=n(ge,"LI",{});var Vqe=s(Y4);u7e=n(Vqe,"STRONG",{});var w$t=s(u7e);S$r=r(w$t,"roberta"),w$t.forEach(t),R$r=r(Vqe," \u2014 "),ZY=n(Vqe,"A",{href:!0});var A$t=s(ZY);P$r=r(A$t,"TFRobertaForQuestionAnswering"),A$t.forEach(t),B$r=r(Vqe," (RoBERTa model)"),Vqe.forEach(t),I$r=i(ge),K4=n(ge,"LI",{});var Xqe=s(K4);_7e=n(Xqe,"STRONG",{});var L$t=s(_7e);N$r=r(L$t,"roformer"),L$t.forEach(t),q$r=r(Xqe," \u2014 "),eK=n(Xqe,"A",{href:!0});var y$t=s(eK);j$r=r(y$t,"TFRoFormerForQuestionAnswering"),y$t.forEach(t),D$r=r(Xqe," (RoFormer model)"),Xqe.forEach(t),G$r=i(ge),Z4=n(ge,"LI",{});var zqe=s(Z4);b7e=n(zqe,"STRONG",{});var x$t=s(b7e);O$r=r(x$t,"xlm"),x$t.forEach(t),V$r=r(zqe," \u2014 "),oK=n(zqe,"A",{href:!0});var $$t=s(oK);X$r=r($$t,"TFXLMForQuestionAnsweringSimple"),$$t.forEach(t),z$r=r(zqe," (XLM model)"),zqe.forEach(t),W$r=i(ge),eE=n(ge,"LI",{});var Wqe=s(eE);v7e=n(Wqe,"STRONG",{});var k$t=s(v7e);Q$r=r(k$t,"xlm-roberta"),k$t.forEach(t),H$r=r(Wqe," \u2014 "),rK=n(Wqe,"A",{href:!0});var S$t=s(rK);U$r=r(S$t,"TFXLMRobertaForQuestionAnswering"),S$t.forEach(t),J$r=r(Wqe," (XLM-RoBERTa model)"),Wqe.forEach(t),Y$r=i(ge),oE=n(ge,"LI",{});var Qqe=s(oE);F7e=n(Qqe,"STRONG",{});var R$t=s(F7e);K$r=r(R$t,"xlnet"),R$t.forEach(t),Z$r=r(Qqe," \u2014 "),tK=n(Qqe,"A",{href:!0});var P$t=s(tK);ekr=r(P$t,"TFXLNetForQuestionAnsweringSimple"),P$t.forEach(t),okr=r(Qqe," (XLNet model)"),Qqe.forEach(t),ge.forEach(t),rkr=i(zl),T(rE.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),xOe=i(f),Bc=n(f,"H2",{class:!0});var qXe=s(Bc);tE=n(qXe,"A",{id:!0,class:!0,href:!0});var B$t=s(tE);T7e=n(B$t,"SPAN",{});var I$t=s(T7e);T(mx.$$.fragment,I$t),I$t.forEach(t),B$t.forEach(t),tkr=i(qXe),M7e=n(qXe,"SPAN",{});var N$t=s(M7e);akr=r(N$t,"TFAutoModelForVision2Seq"),N$t.forEach(t),qXe.forEach(t),$Oe=i(f),fr=n(f,"DIV",{class:!0});var Wl=s(fr);T(gx.$$.fragment,Wl),nkr=i(Wl),Ic=n(Wl,"P",{});var ure=s(Ic);skr=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aK=n(ure,"A",{href:!0});var q$t=s(aK);lkr=r(q$t,"from_pretrained()"),q$t.forEach(t),ikr=r(ure," class method or the "),nK=n(ure,"A",{href:!0});var j$t=s(nK);dkr=r(j$t,"from_config()"),j$t.forEach(t),ckr=r(ure,` class
method.`),ure.forEach(t),fkr=i(Wl),hx=n(Wl,"P",{});var jXe=s(hx);mkr=r(jXe,"This class cannot be instantiated directly using "),E7e=n(jXe,"CODE",{});var D$t=s(E7e);gkr=r(D$t,"__init__()"),D$t.forEach(t),hkr=r(jXe," (throws an error)."),jXe.forEach(t),pkr=i(Wl),Ot=n(Wl,"DIV",{class:!0});var GA=s(Ot);T(px.$$.fragment,GA),ukr=i(GA),C7e=n(GA,"P",{});var G$t=s(C7e);_kr=r(G$t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),G$t.forEach(t),bkr=i(GA),Nc=n(GA,"P",{});var _re=s(Nc);vkr=r(_re,`Note:
Loading a model from its configuration file does `),w7e=n(_re,"STRONG",{});var O$t=s(w7e);Fkr=r(O$t,"not"),O$t.forEach(t),Tkr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=n(_re,"A",{href:!0});var V$t=s(sK);Mkr=r(V$t,"from_pretrained()"),V$t.forEach(t),Ekr=r(_re," to load the model weights."),_re.forEach(t),Ckr=i(GA),T(aE.$$.fragment,GA),GA.forEach(t),wkr=i(Wl),jr=n(Wl,"DIV",{class:!0});var Ql=s(jr);T(ux.$$.fragment,Ql),Akr=i(Ql),A7e=n(Ql,"P",{});var X$t=s(A7e);Lkr=r(X$t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),X$t.forEach(t),ykr=i(Ql),_n=n(Ql,"P",{});var OA=s(_n);xkr=r(OA,"The model class to instantiate is selected based on the "),L7e=n(OA,"CODE",{});var z$t=s(L7e);$kr=r(z$t,"model_type"),z$t.forEach(t),kkr=r(OA,` property of the config object (either
passed as an argument or loaded from `),y7e=n(OA,"CODE",{});var W$t=s(y7e);Skr=r(W$t,"pretrained_model_name_or_path"),W$t.forEach(t),Rkr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x7e=n(OA,"CODE",{});var Q$t=s(x7e);Pkr=r(Q$t,"pretrained_model_name_or_path"),Q$t.forEach(t),Bkr=r(OA,":"),OA.forEach(t),Ikr=i(Ql),$7e=n(Ql,"UL",{});var H$t=s($7e);nE=n(H$t,"LI",{});var Hqe=s(nE);k7e=n(Hqe,"STRONG",{});var U$t=s(k7e);Nkr=r(U$t,"vision-encoder-decoder"),U$t.forEach(t),qkr=r(Hqe," \u2014 "),lK=n(Hqe,"A",{href:!0});var J$t=s(lK);jkr=r(J$t,"TFVisionEncoderDecoderModel"),J$t.forEach(t),Dkr=r(Hqe," (Vision Encoder decoder model)"),Hqe.forEach(t),H$t.forEach(t),Gkr=i(Ql),T(sE.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),kOe=i(f),qc=n(f,"H2",{class:!0});var DXe=s(qc);lE=n(DXe,"A",{id:!0,class:!0,href:!0});var Y$t=s(lE);S7e=n(Y$t,"SPAN",{});var K$t=s(S7e);T(_x.$$.fragment,K$t),K$t.forEach(t),Y$t.forEach(t),Okr=i(DXe),R7e=n(DXe,"SPAN",{});var Z$t=s(R7e);Vkr=r(Z$t,"TFAutoModelForSpeechSeq2Seq"),Z$t.forEach(t),DXe.forEach(t),SOe=i(f),mr=n(f,"DIV",{class:!0});var Hl=s(mr);T(bx.$$.fragment,Hl),Xkr=i(Hl),jc=n(Hl,"P",{});var bre=s(jc);zkr=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),iK=n(bre,"A",{href:!0});var ekt=s(iK);Wkr=r(ekt,"from_pretrained()"),ekt.forEach(t),Qkr=r(bre," class method or the "),dK=n(bre,"A",{href:!0});var okt=s(dK);Hkr=r(okt,"from_config()"),okt.forEach(t),Ukr=r(bre,` class
method.`),bre.forEach(t),Jkr=i(Hl),vx=n(Hl,"P",{});var GXe=s(vx);Ykr=r(GXe,"This class cannot be instantiated directly using "),P7e=n(GXe,"CODE",{});var rkt=s(P7e);Kkr=r(rkt,"__init__()"),rkt.forEach(t),Zkr=r(GXe," (throws an error)."),GXe.forEach(t),eSr=i(Hl),Vt=n(Hl,"DIV",{class:!0});var VA=s(Vt);T(Fx.$$.fragment,VA),oSr=i(VA),B7e=n(VA,"P",{});var tkt=s(B7e);rSr=r(tkt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tkt.forEach(t),tSr=i(VA),Dc=n(VA,"P",{});var vre=s(Dc);aSr=r(vre,`Note:
Loading a model from its configuration file does `),I7e=n(vre,"STRONG",{});var akt=s(I7e);nSr=r(akt,"not"),akt.forEach(t),sSr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=n(vre,"A",{href:!0});var nkt=s(cK);lSr=r(nkt,"from_pretrained()"),nkt.forEach(t),iSr=r(vre," to load the model weights."),vre.forEach(t),dSr=i(VA),T(iE.$$.fragment,VA),VA.forEach(t),cSr=i(Hl),Dr=n(Hl,"DIV",{class:!0});var Ul=s(Dr);T(Tx.$$.fragment,Ul),fSr=i(Ul),N7e=n(Ul,"P",{});var skt=s(N7e);mSr=r(skt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),skt.forEach(t),gSr=i(Ul),bn=n(Ul,"P",{});var XA=s(bn);hSr=r(XA,"The model class to instantiate is selected based on the "),q7e=n(XA,"CODE",{});var lkt=s(q7e);pSr=r(lkt,"model_type"),lkt.forEach(t),uSr=r(XA,` property of the config object (either
passed as an argument or loaded from `),j7e=n(XA,"CODE",{});var ikt=s(j7e);_Sr=r(ikt,"pretrained_model_name_or_path"),ikt.forEach(t),bSr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D7e=n(XA,"CODE",{});var dkt=s(D7e);vSr=r(dkt,"pretrained_model_name_or_path"),dkt.forEach(t),FSr=r(XA,":"),XA.forEach(t),TSr=i(Ul),G7e=n(Ul,"UL",{});var ckt=s(G7e);dE=n(ckt,"LI",{});var Uqe=s(dE);O7e=n(Uqe,"STRONG",{});var fkt=s(O7e);MSr=r(fkt,"speech_to_text"),fkt.forEach(t),ESr=r(Uqe," \u2014 "),fK=n(Uqe,"A",{href:!0});var mkt=s(fK);CSr=r(mkt,"TFSpeech2TextForConditionalGeneration"),mkt.forEach(t),wSr=r(Uqe," (Speech2Text model)"),Uqe.forEach(t),ckt.forEach(t),ASr=i(Ul),T(cE.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),ROe=i(f),Gc=n(f,"H2",{class:!0});var OXe=s(Gc);fE=n(OXe,"A",{id:!0,class:!0,href:!0});var gkt=s(fE);V7e=n(gkt,"SPAN",{});var hkt=s(V7e);T(Mx.$$.fragment,hkt),hkt.forEach(t),gkt.forEach(t),LSr=i(OXe),X7e=n(OXe,"SPAN",{});var pkt=s(X7e);ySr=r(pkt,"FlaxAutoModel"),pkt.forEach(t),OXe.forEach(t),POe=i(f),gr=n(f,"DIV",{class:!0});var Jl=s(gr);T(Ex.$$.fragment,Jl),xSr=i(Jl),Oc=n(Jl,"P",{});var Fre=s(Oc);$Sr=r(Fre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mK=n(Fre,"A",{href:!0});var ukt=s(mK);kSr=r(ukt,"from_pretrained()"),ukt.forEach(t),SSr=r(Fre," class method or the "),gK=n(Fre,"A",{href:!0});var _kt=s(gK);RSr=r(_kt,"from_config()"),_kt.forEach(t),PSr=r(Fre,` class
method.`),Fre.forEach(t),BSr=i(Jl),Cx=n(Jl,"P",{});var VXe=s(Cx);ISr=r(VXe,"This class cannot be instantiated directly using "),z7e=n(VXe,"CODE",{});var bkt=s(z7e);NSr=r(bkt,"__init__()"),bkt.forEach(t),qSr=r(VXe," (throws an error)."),VXe.forEach(t),jSr=i(Jl),Xt=n(Jl,"DIV",{class:!0});var zA=s(Xt);T(wx.$$.fragment,zA),DSr=i(zA),W7e=n(zA,"P",{});var vkt=s(W7e);GSr=r(vkt,"Instantiates one of the base model classes of the library from a configuration."),vkt.forEach(t),OSr=i(zA),Vc=n(zA,"P",{});var Tre=s(Vc);VSr=r(Tre,`Note:
Loading a model from its configuration file does `),Q7e=n(Tre,"STRONG",{});var Fkt=s(Q7e);XSr=r(Fkt,"not"),Fkt.forEach(t),zSr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(Tre,"A",{href:!0});var Tkt=s(hK);WSr=r(Tkt,"from_pretrained()"),Tkt.forEach(t),QSr=r(Tre," to load the model weights."),Tre.forEach(t),HSr=i(zA),T(mE.$$.fragment,zA),zA.forEach(t),USr=i(Jl),Gr=n(Jl,"DIV",{class:!0});var Yl=s(Gr);T(Ax.$$.fragment,Yl),JSr=i(Yl),H7e=n(Yl,"P",{});var Mkt=s(H7e);YSr=r(Mkt,"Instantiate one of the base model classes of the library from a pretrained model."),Mkt.forEach(t),KSr=i(Yl),vn=n(Yl,"P",{});var WA=s(vn);ZSr=r(WA,"The model class to instantiate is selected based on the "),U7e=n(WA,"CODE",{});var Ekt=s(U7e);eRr=r(Ekt,"model_type"),Ekt.forEach(t),oRr=r(WA,` property of the config object (either
passed as an argument or loaded from `),J7e=n(WA,"CODE",{});var Ckt=s(J7e);rRr=r(Ckt,"pretrained_model_name_or_path"),Ckt.forEach(t),tRr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=n(WA,"CODE",{});var wkt=s(Y7e);aRr=r(wkt,"pretrained_model_name_or_path"),wkt.forEach(t),nRr=r(WA,":"),WA.forEach(t),sRr=i(Yl),oe=n(Yl,"UL",{});var ae=s(oe);gE=n(ae,"LI",{});var Jqe=s(gE);K7e=n(Jqe,"STRONG",{});var Akt=s(K7e);lRr=r(Akt,"albert"),Akt.forEach(t),iRr=r(Jqe," \u2014 "),pK=n(Jqe,"A",{href:!0});var Lkt=s(pK);dRr=r(Lkt,"FlaxAlbertModel"),Lkt.forEach(t),cRr=r(Jqe," (ALBERT model)"),Jqe.forEach(t),fRr=i(ae),hE=n(ae,"LI",{});var Yqe=s(hE);Z7e=n(Yqe,"STRONG",{});var ykt=s(Z7e);mRr=r(ykt,"bart"),ykt.forEach(t),gRr=r(Yqe," \u2014 "),uK=n(Yqe,"A",{href:!0});var xkt=s(uK);hRr=r(xkt,"FlaxBartModel"),xkt.forEach(t),pRr=r(Yqe," (BART model)"),Yqe.forEach(t),uRr=i(ae),pE=n(ae,"LI",{});var Kqe=s(pE);eMe=n(Kqe,"STRONG",{});var $kt=s(eMe);_Rr=r($kt,"beit"),$kt.forEach(t),bRr=r(Kqe," \u2014 "),_K=n(Kqe,"A",{href:!0});var kkt=s(_K);vRr=r(kkt,"FlaxBeitModel"),kkt.forEach(t),FRr=r(Kqe," (BEiT model)"),Kqe.forEach(t),TRr=i(ae),uE=n(ae,"LI",{});var Zqe=s(uE);oMe=n(Zqe,"STRONG",{});var Skt=s(oMe);MRr=r(Skt,"bert"),Skt.forEach(t),ERr=r(Zqe," \u2014 "),bK=n(Zqe,"A",{href:!0});var Rkt=s(bK);CRr=r(Rkt,"FlaxBertModel"),Rkt.forEach(t),wRr=r(Zqe," (BERT model)"),Zqe.forEach(t),ARr=i(ae),_E=n(ae,"LI",{});var eje=s(_E);rMe=n(eje,"STRONG",{});var Pkt=s(rMe);LRr=r(Pkt,"big_bird"),Pkt.forEach(t),yRr=r(eje," \u2014 "),vK=n(eje,"A",{href:!0});var Bkt=s(vK);xRr=r(Bkt,"FlaxBigBirdModel"),Bkt.forEach(t),$Rr=r(eje," (BigBird model)"),eje.forEach(t),kRr=i(ae),bE=n(ae,"LI",{});var oje=s(bE);tMe=n(oje,"STRONG",{});var Ikt=s(tMe);SRr=r(Ikt,"blenderbot"),Ikt.forEach(t),RRr=r(oje," \u2014 "),FK=n(oje,"A",{href:!0});var Nkt=s(FK);PRr=r(Nkt,"FlaxBlenderbotModel"),Nkt.forEach(t),BRr=r(oje," (Blenderbot model)"),oje.forEach(t),IRr=i(ae),vE=n(ae,"LI",{});var rje=s(vE);aMe=n(rje,"STRONG",{});var qkt=s(aMe);NRr=r(qkt,"blenderbot-small"),qkt.forEach(t),qRr=r(rje," \u2014 "),TK=n(rje,"A",{href:!0});var jkt=s(TK);jRr=r(jkt,"FlaxBlenderbotSmallModel"),jkt.forEach(t),DRr=r(rje," (BlenderbotSmall model)"),rje.forEach(t),GRr=i(ae),FE=n(ae,"LI",{});var tje=s(FE);nMe=n(tje,"STRONG",{});var Dkt=s(nMe);ORr=r(Dkt,"clip"),Dkt.forEach(t),VRr=r(tje," \u2014 "),MK=n(tje,"A",{href:!0});var Gkt=s(MK);XRr=r(Gkt,"FlaxCLIPModel"),Gkt.forEach(t),zRr=r(tje," (CLIP model)"),tje.forEach(t),WRr=i(ae),TE=n(ae,"LI",{});var aje=s(TE);sMe=n(aje,"STRONG",{});var Okt=s(sMe);QRr=r(Okt,"distilbert"),Okt.forEach(t),HRr=r(aje," \u2014 "),EK=n(aje,"A",{href:!0});var Vkt=s(EK);URr=r(Vkt,"FlaxDistilBertModel"),Vkt.forEach(t),JRr=r(aje," (DistilBERT model)"),aje.forEach(t),YRr=i(ae),ME=n(ae,"LI",{});var nje=s(ME);lMe=n(nje,"STRONG",{});var Xkt=s(lMe);KRr=r(Xkt,"electra"),Xkt.forEach(t),ZRr=r(nje," \u2014 "),CK=n(nje,"A",{href:!0});var zkt=s(CK);ePr=r(zkt,"FlaxElectraModel"),zkt.forEach(t),oPr=r(nje," (ELECTRA model)"),nje.forEach(t),rPr=i(ae),EE=n(ae,"LI",{});var sje=s(EE);iMe=n(sje,"STRONG",{});var Wkt=s(iMe);tPr=r(Wkt,"gpt2"),Wkt.forEach(t),aPr=r(sje," \u2014 "),wK=n(sje,"A",{href:!0});var Qkt=s(wK);nPr=r(Qkt,"FlaxGPT2Model"),Qkt.forEach(t),sPr=r(sje," (OpenAI GPT-2 model)"),sje.forEach(t),lPr=i(ae),CE=n(ae,"LI",{});var lje=s(CE);dMe=n(lje,"STRONG",{});var Hkt=s(dMe);iPr=r(Hkt,"gpt_neo"),Hkt.forEach(t),dPr=r(lje," \u2014 "),AK=n(lje,"A",{href:!0});var Ukt=s(AK);cPr=r(Ukt,"FlaxGPTNeoModel"),Ukt.forEach(t),fPr=r(lje," (GPT Neo model)"),lje.forEach(t),mPr=i(ae),wE=n(ae,"LI",{});var ije=s(wE);cMe=n(ije,"STRONG",{});var Jkt=s(cMe);gPr=r(Jkt,"gptj"),Jkt.forEach(t),hPr=r(ije," \u2014 "),LK=n(ije,"A",{href:!0});var Ykt=s(LK);pPr=r(Ykt,"FlaxGPTJModel"),Ykt.forEach(t),uPr=r(ije," (GPT-J model)"),ije.forEach(t),_Pr=i(ae),AE=n(ae,"LI",{});var dje=s(AE);fMe=n(dje,"STRONG",{});var Kkt=s(fMe);bPr=r(Kkt,"longt5"),Kkt.forEach(t),vPr=r(dje," \u2014 "),yK=n(dje,"A",{href:!0});var Zkt=s(yK);FPr=r(Zkt,"FlaxLongT5Model"),Zkt.forEach(t),TPr=r(dje," (LongT5 model)"),dje.forEach(t),MPr=i(ae),LE=n(ae,"LI",{});var cje=s(LE);mMe=n(cje,"STRONG",{});var eSt=s(mMe);EPr=r(eSt,"marian"),eSt.forEach(t),CPr=r(cje," \u2014 "),xK=n(cje,"A",{href:!0});var oSt=s(xK);wPr=r(oSt,"FlaxMarianModel"),oSt.forEach(t),APr=r(cje," (Marian model)"),cje.forEach(t),LPr=i(ae),yE=n(ae,"LI",{});var fje=s(yE);gMe=n(fje,"STRONG",{});var rSt=s(gMe);yPr=r(rSt,"mbart"),rSt.forEach(t),xPr=r(fje," \u2014 "),$K=n(fje,"A",{href:!0});var tSt=s($K);$Pr=r(tSt,"FlaxMBartModel"),tSt.forEach(t),kPr=r(fje," (mBART model)"),fje.forEach(t),SPr=i(ae),xE=n(ae,"LI",{});var mje=s(xE);hMe=n(mje,"STRONG",{});var aSt=s(hMe);RPr=r(aSt,"mt5"),aSt.forEach(t),PPr=r(mje," \u2014 "),kK=n(mje,"A",{href:!0});var nSt=s(kK);BPr=r(nSt,"FlaxMT5Model"),nSt.forEach(t),IPr=r(mje," (MT5 model)"),mje.forEach(t),NPr=i(ae),$E=n(ae,"LI",{});var gje=s($E);pMe=n(gje,"STRONG",{});var sSt=s(pMe);qPr=r(sSt,"opt"),sSt.forEach(t),jPr=r(gje," \u2014 "),SK=n(gje,"A",{href:!0});var lSt=s(SK);DPr=r(lSt,"FlaxOPTModel"),lSt.forEach(t),GPr=r(gje," (OPT model)"),gje.forEach(t),OPr=i(ae),kE=n(ae,"LI",{});var hje=s(kE);uMe=n(hje,"STRONG",{});var iSt=s(uMe);VPr=r(iSt,"pegasus"),iSt.forEach(t),XPr=r(hje," \u2014 "),RK=n(hje,"A",{href:!0});var dSt=s(RK);zPr=r(dSt,"FlaxPegasusModel"),dSt.forEach(t),WPr=r(hje," (Pegasus model)"),hje.forEach(t),QPr=i(ae),SE=n(ae,"LI",{});var pje=s(SE);_Me=n(pje,"STRONG",{});var cSt=s(_Me);HPr=r(cSt,"roberta"),cSt.forEach(t),UPr=r(pje," \u2014 "),PK=n(pje,"A",{href:!0});var fSt=s(PK);JPr=r(fSt,"FlaxRobertaModel"),fSt.forEach(t),YPr=r(pje," (RoBERTa model)"),pje.forEach(t),KPr=i(ae),RE=n(ae,"LI",{});var uje=s(RE);bMe=n(uje,"STRONG",{});var mSt=s(bMe);ZPr=r(mSt,"roformer"),mSt.forEach(t),eBr=r(uje," \u2014 "),BK=n(uje,"A",{href:!0});var gSt=s(BK);oBr=r(gSt,"FlaxRoFormerModel"),gSt.forEach(t),rBr=r(uje," (RoFormer model)"),uje.forEach(t),tBr=i(ae),PE=n(ae,"LI",{});var _je=s(PE);vMe=n(_je,"STRONG",{});var hSt=s(vMe);aBr=r(hSt,"t5"),hSt.forEach(t),nBr=r(_je," \u2014 "),IK=n(_je,"A",{href:!0});var pSt=s(IK);sBr=r(pSt,"FlaxT5Model"),pSt.forEach(t),lBr=r(_je," (T5 model)"),_je.forEach(t),iBr=i(ae),BE=n(ae,"LI",{});var bje=s(BE);FMe=n(bje,"STRONG",{});var uSt=s(FMe);dBr=r(uSt,"vision-text-dual-encoder"),uSt.forEach(t),cBr=r(bje," \u2014 "),NK=n(bje,"A",{href:!0});var _St=s(NK);fBr=r(_St,"FlaxVisionTextDualEncoderModel"),_St.forEach(t),mBr=r(bje," (VisionTextDualEncoder model)"),bje.forEach(t),gBr=i(ae),IE=n(ae,"LI",{});var vje=s(IE);TMe=n(vje,"STRONG",{});var bSt=s(TMe);hBr=r(bSt,"vit"),bSt.forEach(t),pBr=r(vje," \u2014 "),qK=n(vje,"A",{href:!0});var vSt=s(qK);uBr=r(vSt,"FlaxViTModel"),vSt.forEach(t),_Br=r(vje," (ViT model)"),vje.forEach(t),bBr=i(ae),NE=n(ae,"LI",{});var Fje=s(NE);MMe=n(Fje,"STRONG",{});var FSt=s(MMe);vBr=r(FSt,"wav2vec2"),FSt.forEach(t),FBr=r(Fje," \u2014 "),jK=n(Fje,"A",{href:!0});var TSt=s(jK);TBr=r(TSt,"FlaxWav2Vec2Model"),TSt.forEach(t),MBr=r(Fje," (Wav2Vec2 model)"),Fje.forEach(t),EBr=i(ae),qE=n(ae,"LI",{});var Tje=s(qE);EMe=n(Tje,"STRONG",{});var MSt=s(EMe);CBr=r(MSt,"xglm"),MSt.forEach(t),wBr=r(Tje," \u2014 "),DK=n(Tje,"A",{href:!0});var ESt=s(DK);ABr=r(ESt,"FlaxXGLMModel"),ESt.forEach(t),LBr=r(Tje," (XGLM model)"),Tje.forEach(t),yBr=i(ae),jE=n(ae,"LI",{});var Mje=s(jE);CMe=n(Mje,"STRONG",{});var CSt=s(CMe);xBr=r(CSt,"xlm-roberta"),CSt.forEach(t),$Br=r(Mje," \u2014 "),GK=n(Mje,"A",{href:!0});var wSt=s(GK);kBr=r(wSt,"FlaxXLMRobertaModel"),wSt.forEach(t),SBr=r(Mje," (XLM-RoBERTa model)"),Mje.forEach(t),ae.forEach(t),RBr=i(Yl),T(DE.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),BOe=i(f),Xc=n(f,"H2",{class:!0});var XXe=s(Xc);GE=n(XXe,"A",{id:!0,class:!0,href:!0});var ASt=s(GE);wMe=n(ASt,"SPAN",{});var LSt=s(wMe);T(Lx.$$.fragment,LSt),LSt.forEach(t),ASt.forEach(t),PBr=i(XXe),AMe=n(XXe,"SPAN",{});var ySt=s(AMe);BBr=r(ySt,"FlaxAutoModelForCausalLM"),ySt.forEach(t),XXe.forEach(t),IOe=i(f),hr=n(f,"DIV",{class:!0});var Kl=s(hr);T(yx.$$.fragment,Kl),IBr=i(Kl),zc=n(Kl,"P",{});var Mre=s(zc);NBr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OK=n(Mre,"A",{href:!0});var xSt=s(OK);qBr=r(xSt,"from_pretrained()"),xSt.forEach(t),jBr=r(Mre," class method or the "),VK=n(Mre,"A",{href:!0});var $St=s(VK);DBr=r($St,"from_config()"),$St.forEach(t),GBr=r(Mre,` class
method.`),Mre.forEach(t),OBr=i(Kl),xx=n(Kl,"P",{});var zXe=s(xx);VBr=r(zXe,"This class cannot be instantiated directly using "),LMe=n(zXe,"CODE",{});var kSt=s(LMe);XBr=r(kSt,"__init__()"),kSt.forEach(t),zBr=r(zXe," (throws an error)."),zXe.forEach(t),WBr=i(Kl),zt=n(Kl,"DIV",{class:!0});var QA=s(zt);T($x.$$.fragment,QA),QBr=i(QA),yMe=n(QA,"P",{});var SSt=s(yMe);HBr=r(SSt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),SSt.forEach(t),UBr=i(QA),Wc=n(QA,"P",{});var Ere=s(Wc);JBr=r(Ere,`Note:
Loading a model from its configuration file does `),xMe=n(Ere,"STRONG",{});var RSt=s(xMe);YBr=r(RSt,"not"),RSt.forEach(t),KBr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=n(Ere,"A",{href:!0});var PSt=s(XK);ZBr=r(PSt,"from_pretrained()"),PSt.forEach(t),eIr=r(Ere," to load the model weights."),Ere.forEach(t),oIr=i(QA),T(OE.$$.fragment,QA),QA.forEach(t),rIr=i(Kl),Or=n(Kl,"DIV",{class:!0});var Zl=s(Or);T(kx.$$.fragment,Zl),tIr=i(Zl),$Me=n(Zl,"P",{});var BSt=s($Me);aIr=r(BSt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BSt.forEach(t),nIr=i(Zl),Fn=n(Zl,"P",{});var HA=s(Fn);sIr=r(HA,"The model class to instantiate is selected based on the "),kMe=n(HA,"CODE",{});var ISt=s(kMe);lIr=r(ISt,"model_type"),ISt.forEach(t),iIr=r(HA,` property of the config object (either
passed as an argument or loaded from `),SMe=n(HA,"CODE",{});var NSt=s(SMe);dIr=r(NSt,"pretrained_model_name_or_path"),NSt.forEach(t),cIr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RMe=n(HA,"CODE",{});var qSt=s(RMe);fIr=r(qSt,"pretrained_model_name_or_path"),qSt.forEach(t),mIr=r(HA,":"),HA.forEach(t),gIr=i(Zl),xe=n(Zl,"UL",{});var Ne=s(xe);VE=n(Ne,"LI",{});var Eje=s(VE);PMe=n(Eje,"STRONG",{});var jSt=s(PMe);hIr=r(jSt,"bart"),jSt.forEach(t),pIr=r(Eje," \u2014 "),zK=n(Eje,"A",{href:!0});var DSt=s(zK);uIr=r(DSt,"FlaxBartForCausalLM"),DSt.forEach(t),_Ir=r(Eje," (BART model)"),Eje.forEach(t),bIr=i(Ne),XE=n(Ne,"LI",{});var Cje=s(XE);BMe=n(Cje,"STRONG",{});var GSt=s(BMe);vIr=r(GSt,"bert"),GSt.forEach(t),FIr=r(Cje," \u2014 "),WK=n(Cje,"A",{href:!0});var OSt=s(WK);TIr=r(OSt,"FlaxBertForCausalLM"),OSt.forEach(t),MIr=r(Cje," (BERT model)"),Cje.forEach(t),EIr=i(Ne),zE=n(Ne,"LI",{});var wje=s(zE);IMe=n(wje,"STRONG",{});var VSt=s(IMe);CIr=r(VSt,"big_bird"),VSt.forEach(t),wIr=r(wje," \u2014 "),QK=n(wje,"A",{href:!0});var XSt=s(QK);AIr=r(XSt,"FlaxBigBirdForCausalLM"),XSt.forEach(t),LIr=r(wje," (BigBird model)"),wje.forEach(t),yIr=i(Ne),WE=n(Ne,"LI",{});var Aje=s(WE);NMe=n(Aje,"STRONG",{});var zSt=s(NMe);xIr=r(zSt,"electra"),zSt.forEach(t),$Ir=r(Aje," \u2014 "),HK=n(Aje,"A",{href:!0});var WSt=s(HK);kIr=r(WSt,"FlaxElectraForCausalLM"),WSt.forEach(t),SIr=r(Aje," (ELECTRA model)"),Aje.forEach(t),RIr=i(Ne),QE=n(Ne,"LI",{});var Lje=s(QE);qMe=n(Lje,"STRONG",{});var QSt=s(qMe);PIr=r(QSt,"gpt2"),QSt.forEach(t),BIr=r(Lje," \u2014 "),UK=n(Lje,"A",{href:!0});var HSt=s(UK);IIr=r(HSt,"FlaxGPT2LMHeadModel"),HSt.forEach(t),NIr=r(Lje," (OpenAI GPT-2 model)"),Lje.forEach(t),qIr=i(Ne),HE=n(Ne,"LI",{});var yje=s(HE);jMe=n(yje,"STRONG",{});var USt=s(jMe);jIr=r(USt,"gpt_neo"),USt.forEach(t),DIr=r(yje," \u2014 "),JK=n(yje,"A",{href:!0});var JSt=s(JK);GIr=r(JSt,"FlaxGPTNeoForCausalLM"),JSt.forEach(t),OIr=r(yje," (GPT Neo model)"),yje.forEach(t),VIr=i(Ne),UE=n(Ne,"LI",{});var xje=s(UE);DMe=n(xje,"STRONG",{});var YSt=s(DMe);XIr=r(YSt,"gptj"),YSt.forEach(t),zIr=r(xje," \u2014 "),YK=n(xje,"A",{href:!0});var KSt=s(YK);WIr=r(KSt,"FlaxGPTJForCausalLM"),KSt.forEach(t),QIr=r(xje," (GPT-J model)"),xje.forEach(t),HIr=i(Ne),JE=n(Ne,"LI",{});var $je=s(JE);GMe=n($je,"STRONG",{});var ZSt=s(GMe);UIr=r(ZSt,"opt"),ZSt.forEach(t),JIr=r($je," \u2014 "),KK=n($je,"A",{href:!0});var eRt=s(KK);YIr=r(eRt,"FlaxOPTForCausalLM"),eRt.forEach(t),KIr=r($je," (OPT model)"),$je.forEach(t),ZIr=i(Ne),YE=n(Ne,"LI",{});var kje=s(YE);OMe=n(kje,"STRONG",{});var oRt=s(OMe);eNr=r(oRt,"roberta"),oRt.forEach(t),oNr=r(kje," \u2014 "),ZK=n(kje,"A",{href:!0});var rRt=s(ZK);rNr=r(rRt,"FlaxRobertaForCausalLM"),rRt.forEach(t),tNr=r(kje," (RoBERTa model)"),kje.forEach(t),aNr=i(Ne),KE=n(Ne,"LI",{});var Sje=s(KE);VMe=n(Sje,"STRONG",{});var tRt=s(VMe);nNr=r(tRt,"xglm"),tRt.forEach(t),sNr=r(Sje," \u2014 "),eZ=n(Sje,"A",{href:!0});var aRt=s(eZ);lNr=r(aRt,"FlaxXGLMForCausalLM"),aRt.forEach(t),iNr=r(Sje," (XGLM model)"),Sje.forEach(t),Ne.forEach(t),dNr=i(Zl),T(ZE.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),NOe=i(f),Qc=n(f,"H2",{class:!0});var WXe=s(Qc);eC=n(WXe,"A",{id:!0,class:!0,href:!0});var nRt=s(eC);XMe=n(nRt,"SPAN",{});var sRt=s(XMe);T(Sx.$$.fragment,sRt),sRt.forEach(t),nRt.forEach(t),cNr=i(WXe),zMe=n(WXe,"SPAN",{});var lRt=s(zMe);fNr=r(lRt,"FlaxAutoModelForPreTraining"),lRt.forEach(t),WXe.forEach(t),qOe=i(f),pr=n(f,"DIV",{class:!0});var ei=s(pr);T(Rx.$$.fragment,ei),mNr=i(ei),Hc=n(ei,"P",{});var Cre=s(Hc);gNr=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oZ=n(Cre,"A",{href:!0});var iRt=s(oZ);hNr=r(iRt,"from_pretrained()"),iRt.forEach(t),pNr=r(Cre," class method or the "),rZ=n(Cre,"A",{href:!0});var dRt=s(rZ);uNr=r(dRt,"from_config()"),dRt.forEach(t),_Nr=r(Cre,` class
method.`),Cre.forEach(t),bNr=i(ei),Px=n(ei,"P",{});var QXe=s(Px);vNr=r(QXe,"This class cannot be instantiated directly using "),WMe=n(QXe,"CODE",{});var cRt=s(WMe);FNr=r(cRt,"__init__()"),cRt.forEach(t),TNr=r(QXe," (throws an error)."),QXe.forEach(t),MNr=i(ei),Wt=n(ei,"DIV",{class:!0});var UA=s(Wt);T(Bx.$$.fragment,UA),ENr=i(UA),QMe=n(UA,"P",{});var fRt=s(QMe);CNr=r(fRt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fRt.forEach(t),wNr=i(UA),Uc=n(UA,"P",{});var wre=s(Uc);ANr=r(wre,`Note:
Loading a model from its configuration file does `),HMe=n(wre,"STRONG",{});var mRt=s(HMe);LNr=r(mRt,"not"),mRt.forEach(t),yNr=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=n(wre,"A",{href:!0});var gRt=s(tZ);xNr=r(gRt,"from_pretrained()"),gRt.forEach(t),$Nr=r(wre," to load the model weights."),wre.forEach(t),kNr=i(UA),T(oC.$$.fragment,UA),UA.forEach(t),SNr=i(ei),Vr=n(ei,"DIV",{class:!0});var oi=s(Vr);T(Ix.$$.fragment,oi),RNr=i(oi),UMe=n(oi,"P",{});var hRt=s(UMe);PNr=r(hRt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hRt.forEach(t),BNr=i(oi),Tn=n(oi,"P",{});var JA=s(Tn);INr=r(JA,"The model class to instantiate is selected based on the "),JMe=n(JA,"CODE",{});var pRt=s(JMe);NNr=r(pRt,"model_type"),pRt.forEach(t),qNr=r(JA,` property of the config object (either
passed as an argument or loaded from `),YMe=n(JA,"CODE",{});var uRt=s(YMe);jNr=r(uRt,"pretrained_model_name_or_path"),uRt.forEach(t),DNr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KMe=n(JA,"CODE",{});var _Rt=s(KMe);GNr=r(_Rt,"pretrained_model_name_or_path"),_Rt.forEach(t),ONr=r(JA,":"),JA.forEach(t),VNr=i(oi),Ee=n(oi,"UL",{});var we=s(Ee);rC=n(we,"LI",{});var Rje=s(rC);ZMe=n(Rje,"STRONG",{});var bRt=s(ZMe);XNr=r(bRt,"albert"),bRt.forEach(t),zNr=r(Rje," \u2014 "),aZ=n(Rje,"A",{href:!0});var vRt=s(aZ);WNr=r(vRt,"FlaxAlbertForPreTraining"),vRt.forEach(t),QNr=r(Rje," (ALBERT model)"),Rje.forEach(t),HNr=i(we),tC=n(we,"LI",{});var Pje=s(tC);e4e=n(Pje,"STRONG",{});var FRt=s(e4e);UNr=r(FRt,"bart"),FRt.forEach(t),JNr=r(Pje," \u2014 "),nZ=n(Pje,"A",{href:!0});var TRt=s(nZ);YNr=r(TRt,"FlaxBartForConditionalGeneration"),TRt.forEach(t),KNr=r(Pje," (BART model)"),Pje.forEach(t),ZNr=i(we),aC=n(we,"LI",{});var Bje=s(aC);o4e=n(Bje,"STRONG",{});var MRt=s(o4e);eqr=r(MRt,"bert"),MRt.forEach(t),oqr=r(Bje," \u2014 "),sZ=n(Bje,"A",{href:!0});var ERt=s(sZ);rqr=r(ERt,"FlaxBertForPreTraining"),ERt.forEach(t),tqr=r(Bje," (BERT model)"),Bje.forEach(t),aqr=i(we),nC=n(we,"LI",{});var Ije=s(nC);r4e=n(Ije,"STRONG",{});var CRt=s(r4e);nqr=r(CRt,"big_bird"),CRt.forEach(t),sqr=r(Ije," \u2014 "),lZ=n(Ije,"A",{href:!0});var wRt=s(lZ);lqr=r(wRt,"FlaxBigBirdForPreTraining"),wRt.forEach(t),iqr=r(Ije," (BigBird model)"),Ije.forEach(t),dqr=i(we),sC=n(we,"LI",{});var Nje=s(sC);t4e=n(Nje,"STRONG",{});var ARt=s(t4e);cqr=r(ARt,"electra"),ARt.forEach(t),fqr=r(Nje," \u2014 "),iZ=n(Nje,"A",{href:!0});var LRt=s(iZ);mqr=r(LRt,"FlaxElectraForPreTraining"),LRt.forEach(t),gqr=r(Nje," (ELECTRA model)"),Nje.forEach(t),hqr=i(we),lC=n(we,"LI",{});var qje=s(lC);a4e=n(qje,"STRONG",{});var yRt=s(a4e);pqr=r(yRt,"longt5"),yRt.forEach(t),uqr=r(qje," \u2014 "),dZ=n(qje,"A",{href:!0});var xRt=s(dZ);_qr=r(xRt,"FlaxLongT5ForConditionalGeneration"),xRt.forEach(t),bqr=r(qje," (LongT5 model)"),qje.forEach(t),vqr=i(we),iC=n(we,"LI",{});var jje=s(iC);n4e=n(jje,"STRONG",{});var $Rt=s(n4e);Fqr=r($Rt,"mbart"),$Rt.forEach(t),Tqr=r(jje," \u2014 "),cZ=n(jje,"A",{href:!0});var kRt=s(cZ);Mqr=r(kRt,"FlaxMBartForConditionalGeneration"),kRt.forEach(t),Eqr=r(jje," (mBART model)"),jje.forEach(t),Cqr=i(we),dC=n(we,"LI",{});var Dje=s(dC);s4e=n(Dje,"STRONG",{});var SRt=s(s4e);wqr=r(SRt,"mt5"),SRt.forEach(t),Aqr=r(Dje," \u2014 "),fZ=n(Dje,"A",{href:!0});var RRt=s(fZ);Lqr=r(RRt,"FlaxMT5ForConditionalGeneration"),RRt.forEach(t),yqr=r(Dje," (MT5 model)"),Dje.forEach(t),xqr=i(we),cC=n(we,"LI",{});var Gje=s(cC);l4e=n(Gje,"STRONG",{});var PRt=s(l4e);$qr=r(PRt,"roberta"),PRt.forEach(t),kqr=r(Gje," \u2014 "),mZ=n(Gje,"A",{href:!0});var BRt=s(mZ);Sqr=r(BRt,"FlaxRobertaForMaskedLM"),BRt.forEach(t),Rqr=r(Gje," (RoBERTa model)"),Gje.forEach(t),Pqr=i(we),fC=n(we,"LI",{});var Oje=s(fC);i4e=n(Oje,"STRONG",{});var IRt=s(i4e);Bqr=r(IRt,"roformer"),IRt.forEach(t),Iqr=r(Oje," \u2014 "),gZ=n(Oje,"A",{href:!0});var NRt=s(gZ);Nqr=r(NRt,"FlaxRoFormerForMaskedLM"),NRt.forEach(t),qqr=r(Oje," (RoFormer model)"),Oje.forEach(t),jqr=i(we),mC=n(we,"LI",{});var Vje=s(mC);d4e=n(Vje,"STRONG",{});var qRt=s(d4e);Dqr=r(qRt,"t5"),qRt.forEach(t),Gqr=r(Vje," \u2014 "),hZ=n(Vje,"A",{href:!0});var jRt=s(hZ);Oqr=r(jRt,"FlaxT5ForConditionalGeneration"),jRt.forEach(t),Vqr=r(Vje," (T5 model)"),Vje.forEach(t),Xqr=i(we),gC=n(we,"LI",{});var Xje=s(gC);c4e=n(Xje,"STRONG",{});var DRt=s(c4e);zqr=r(DRt,"wav2vec2"),DRt.forEach(t),Wqr=r(Xje," \u2014 "),pZ=n(Xje,"A",{href:!0});var GRt=s(pZ);Qqr=r(GRt,"FlaxWav2Vec2ForPreTraining"),GRt.forEach(t),Hqr=r(Xje," (Wav2Vec2 model)"),Xje.forEach(t),Uqr=i(we),hC=n(we,"LI",{});var zje=s(hC);f4e=n(zje,"STRONG",{});var ORt=s(f4e);Jqr=r(ORt,"xlm-roberta"),ORt.forEach(t),Yqr=r(zje," \u2014 "),uZ=n(zje,"A",{href:!0});var VRt=s(uZ);Kqr=r(VRt,"FlaxXLMRobertaForMaskedLM"),VRt.forEach(t),Zqr=r(zje," (XLM-RoBERTa model)"),zje.forEach(t),we.forEach(t),ejr=i(oi),T(pC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),jOe=i(f),Jc=n(f,"H2",{class:!0});var HXe=s(Jc);uC=n(HXe,"A",{id:!0,class:!0,href:!0});var XRt=s(uC);m4e=n(XRt,"SPAN",{});var zRt=s(m4e);T(Nx.$$.fragment,zRt),zRt.forEach(t),XRt.forEach(t),ojr=i(HXe),g4e=n(HXe,"SPAN",{});var WRt=s(g4e);rjr=r(WRt,"FlaxAutoModelForMaskedLM"),WRt.forEach(t),HXe.forEach(t),DOe=i(f),ur=n(f,"DIV",{class:!0});var ri=s(ur);T(qx.$$.fragment,ri),tjr=i(ri),Yc=n(ri,"P",{});var Are=s(Yc);ajr=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_Z=n(Are,"A",{href:!0});var QRt=s(_Z);njr=r(QRt,"from_pretrained()"),QRt.forEach(t),sjr=r(Are," class method or the "),bZ=n(Are,"A",{href:!0});var HRt=s(bZ);ljr=r(HRt,"from_config()"),HRt.forEach(t),ijr=r(Are,` class
method.`),Are.forEach(t),djr=i(ri),jx=n(ri,"P",{});var UXe=s(jx);cjr=r(UXe,"This class cannot be instantiated directly using "),h4e=n(UXe,"CODE",{});var URt=s(h4e);fjr=r(URt,"__init__()"),URt.forEach(t),mjr=r(UXe," (throws an error)."),UXe.forEach(t),gjr=i(ri),Qt=n(ri,"DIV",{class:!0});var YA=s(Qt);T(Dx.$$.fragment,YA),hjr=i(YA),p4e=n(YA,"P",{});var JRt=s(p4e);pjr=r(JRt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JRt.forEach(t),ujr=i(YA),Kc=n(YA,"P",{});var Lre=s(Kc);_jr=r(Lre,`Note:
Loading a model from its configuration file does `),u4e=n(Lre,"STRONG",{});var YRt=s(u4e);bjr=r(YRt,"not"),YRt.forEach(t),vjr=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=n(Lre,"A",{href:!0});var KRt=s(vZ);Fjr=r(KRt,"from_pretrained()"),KRt.forEach(t),Tjr=r(Lre," to load the model weights."),Lre.forEach(t),Mjr=i(YA),T(_C.$$.fragment,YA),YA.forEach(t),Ejr=i(ri),Xr=n(ri,"DIV",{class:!0});var ti=s(Xr);T(Gx.$$.fragment,ti),Cjr=i(ti),_4e=n(ti,"P",{});var ZRt=s(_4e);wjr=r(ZRt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ZRt.forEach(t),Ajr=i(ti),Mn=n(ti,"P",{});var KA=s(Mn);Ljr=r(KA,"The model class to instantiate is selected based on the "),b4e=n(KA,"CODE",{});var ePt=s(b4e);yjr=r(ePt,"model_type"),ePt.forEach(t),xjr=r(KA,` property of the config object (either
passed as an argument or loaded from `),v4e=n(KA,"CODE",{});var oPt=s(v4e);$jr=r(oPt,"pretrained_model_name_or_path"),oPt.forEach(t),kjr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=n(KA,"CODE",{});var rPt=s(F4e);Sjr=r(rPt,"pretrained_model_name_or_path"),rPt.forEach(t),Rjr=r(KA,":"),KA.forEach(t),Pjr=i(ti),$e=n(ti,"UL",{});var qe=s($e);bC=n(qe,"LI",{});var Wje=s(bC);T4e=n(Wje,"STRONG",{});var tPt=s(T4e);Bjr=r(tPt,"albert"),tPt.forEach(t),Ijr=r(Wje," \u2014 "),FZ=n(Wje,"A",{href:!0});var aPt=s(FZ);Njr=r(aPt,"FlaxAlbertForMaskedLM"),aPt.forEach(t),qjr=r(Wje," (ALBERT model)"),Wje.forEach(t),jjr=i(qe),vC=n(qe,"LI",{});var Qje=s(vC);M4e=n(Qje,"STRONG",{});var nPt=s(M4e);Djr=r(nPt,"bart"),nPt.forEach(t),Gjr=r(Qje," \u2014 "),TZ=n(Qje,"A",{href:!0});var sPt=s(TZ);Ojr=r(sPt,"FlaxBartForConditionalGeneration"),sPt.forEach(t),Vjr=r(Qje," (BART model)"),Qje.forEach(t),Xjr=i(qe),FC=n(qe,"LI",{});var Hje=s(FC);E4e=n(Hje,"STRONG",{});var lPt=s(E4e);zjr=r(lPt,"bert"),lPt.forEach(t),Wjr=r(Hje," \u2014 "),MZ=n(Hje,"A",{href:!0});var iPt=s(MZ);Qjr=r(iPt,"FlaxBertForMaskedLM"),iPt.forEach(t),Hjr=r(Hje," (BERT model)"),Hje.forEach(t),Ujr=i(qe),TC=n(qe,"LI",{});var Uje=s(TC);C4e=n(Uje,"STRONG",{});var dPt=s(C4e);Jjr=r(dPt,"big_bird"),dPt.forEach(t),Yjr=r(Uje," \u2014 "),EZ=n(Uje,"A",{href:!0});var cPt=s(EZ);Kjr=r(cPt,"FlaxBigBirdForMaskedLM"),cPt.forEach(t),Zjr=r(Uje," (BigBird model)"),Uje.forEach(t),eDr=i(qe),MC=n(qe,"LI",{});var Jje=s(MC);w4e=n(Jje,"STRONG",{});var fPt=s(w4e);oDr=r(fPt,"distilbert"),fPt.forEach(t),rDr=r(Jje," \u2014 "),CZ=n(Jje,"A",{href:!0});var mPt=s(CZ);tDr=r(mPt,"FlaxDistilBertForMaskedLM"),mPt.forEach(t),aDr=r(Jje," (DistilBERT model)"),Jje.forEach(t),nDr=i(qe),EC=n(qe,"LI",{});var Yje=s(EC);A4e=n(Yje,"STRONG",{});var gPt=s(A4e);sDr=r(gPt,"electra"),gPt.forEach(t),lDr=r(Yje," \u2014 "),wZ=n(Yje,"A",{href:!0});var hPt=s(wZ);iDr=r(hPt,"FlaxElectraForMaskedLM"),hPt.forEach(t),dDr=r(Yje," (ELECTRA model)"),Yje.forEach(t),cDr=i(qe),CC=n(qe,"LI",{});var Kje=s(CC);L4e=n(Kje,"STRONG",{});var pPt=s(L4e);fDr=r(pPt,"mbart"),pPt.forEach(t),mDr=r(Kje," \u2014 "),AZ=n(Kje,"A",{href:!0});var uPt=s(AZ);gDr=r(uPt,"FlaxMBartForConditionalGeneration"),uPt.forEach(t),hDr=r(Kje," (mBART model)"),Kje.forEach(t),pDr=i(qe),wC=n(qe,"LI",{});var Zje=s(wC);y4e=n(Zje,"STRONG",{});var _Pt=s(y4e);uDr=r(_Pt,"roberta"),_Pt.forEach(t),_Dr=r(Zje," \u2014 "),LZ=n(Zje,"A",{href:!0});var bPt=s(LZ);bDr=r(bPt,"FlaxRobertaForMaskedLM"),bPt.forEach(t),vDr=r(Zje," (RoBERTa model)"),Zje.forEach(t),FDr=i(qe),AC=n(qe,"LI",{});var eDe=s(AC);x4e=n(eDe,"STRONG",{});var vPt=s(x4e);TDr=r(vPt,"roformer"),vPt.forEach(t),MDr=r(eDe," \u2014 "),yZ=n(eDe,"A",{href:!0});var FPt=s(yZ);EDr=r(FPt,"FlaxRoFormerForMaskedLM"),FPt.forEach(t),CDr=r(eDe," (RoFormer model)"),eDe.forEach(t),wDr=i(qe),LC=n(qe,"LI",{});var oDe=s(LC);$4e=n(oDe,"STRONG",{});var TPt=s($4e);ADr=r(TPt,"xlm-roberta"),TPt.forEach(t),LDr=r(oDe," \u2014 "),xZ=n(oDe,"A",{href:!0});var MPt=s(xZ);yDr=r(MPt,"FlaxXLMRobertaForMaskedLM"),MPt.forEach(t),xDr=r(oDe," (XLM-RoBERTa model)"),oDe.forEach(t),qe.forEach(t),$Dr=i(ti),T(yC.$$.fragment,ti),ti.forEach(t),ri.forEach(t),GOe=i(f),Zc=n(f,"H2",{class:!0});var JXe=s(Zc);xC=n(JXe,"A",{id:!0,class:!0,href:!0});var EPt=s(xC);k4e=n(EPt,"SPAN",{});var CPt=s(k4e);T(Ox.$$.fragment,CPt),CPt.forEach(t),EPt.forEach(t),kDr=i(JXe),S4e=n(JXe,"SPAN",{});var wPt=s(S4e);SDr=r(wPt,"FlaxAutoModelForSeq2SeqLM"),wPt.forEach(t),JXe.forEach(t),OOe=i(f),_r=n(f,"DIV",{class:!0});var ai=s(_r);T(Vx.$$.fragment,ai),RDr=i(ai),ef=n(ai,"P",{});var yre=s(ef);PDr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$Z=n(yre,"A",{href:!0});var APt=s($Z);BDr=r(APt,"from_pretrained()"),APt.forEach(t),IDr=r(yre," class method or the "),kZ=n(yre,"A",{href:!0});var LPt=s(kZ);NDr=r(LPt,"from_config()"),LPt.forEach(t),qDr=r(yre,` class
method.`),yre.forEach(t),jDr=i(ai),Xx=n(ai,"P",{});var YXe=s(Xx);DDr=r(YXe,"This class cannot be instantiated directly using "),R4e=n(YXe,"CODE",{});var yPt=s(R4e);GDr=r(yPt,"__init__()"),yPt.forEach(t),ODr=r(YXe," (throws an error)."),YXe.forEach(t),VDr=i(ai),Ht=n(ai,"DIV",{class:!0});var ZA=s(Ht);T(zx.$$.fragment,ZA),XDr=i(ZA),P4e=n(ZA,"P",{});var xPt=s(P4e);zDr=r(xPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xPt.forEach(t),WDr=i(ZA),of=n(ZA,"P",{});var xre=s(of);QDr=r(xre,`Note:
Loading a model from its configuration file does `),B4e=n(xre,"STRONG",{});var $Pt=s(B4e);HDr=r($Pt,"not"),$Pt.forEach(t),UDr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=n(xre,"A",{href:!0});var kPt=s(SZ);JDr=r(kPt,"from_pretrained()"),kPt.forEach(t),YDr=r(xre," to load the model weights."),xre.forEach(t),KDr=i(ZA),T($C.$$.fragment,ZA),ZA.forEach(t),ZDr=i(ai),zr=n(ai,"DIV",{class:!0});var ni=s(zr);T(Wx.$$.fragment,ni),eGr=i(ni),I4e=n(ni,"P",{});var SPt=s(I4e);oGr=r(SPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SPt.forEach(t),rGr=i(ni),En=n(ni,"P",{});var eL=s(En);tGr=r(eL,"The model class to instantiate is selected based on the "),N4e=n(eL,"CODE",{});var RPt=s(N4e);aGr=r(RPt,"model_type"),RPt.forEach(t),nGr=r(eL,` property of the config object (either
passed as an argument or loaded from `),q4e=n(eL,"CODE",{});var PPt=s(q4e);sGr=r(PPt,"pretrained_model_name_or_path"),PPt.forEach(t),lGr=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=n(eL,"CODE",{});var BPt=s(j4e);iGr=r(BPt,"pretrained_model_name_or_path"),BPt.forEach(t),dGr=r(eL,":"),eL.forEach(t),cGr=i(ni),ke=n(ni,"UL",{});var je=s(ke);kC=n(je,"LI",{});var rDe=s(kC);D4e=n(rDe,"STRONG",{});var IPt=s(D4e);fGr=r(IPt,"bart"),IPt.forEach(t),mGr=r(rDe," \u2014 "),RZ=n(rDe,"A",{href:!0});var NPt=s(RZ);gGr=r(NPt,"FlaxBartForConditionalGeneration"),NPt.forEach(t),hGr=r(rDe," (BART model)"),rDe.forEach(t),pGr=i(je),SC=n(je,"LI",{});var tDe=s(SC);G4e=n(tDe,"STRONG",{});var qPt=s(G4e);uGr=r(qPt,"blenderbot"),qPt.forEach(t),_Gr=r(tDe," \u2014 "),PZ=n(tDe,"A",{href:!0});var jPt=s(PZ);bGr=r(jPt,"FlaxBlenderbotForConditionalGeneration"),jPt.forEach(t),vGr=r(tDe," (Blenderbot model)"),tDe.forEach(t),FGr=i(je),RC=n(je,"LI",{});var aDe=s(RC);O4e=n(aDe,"STRONG",{});var DPt=s(O4e);TGr=r(DPt,"blenderbot-small"),DPt.forEach(t),MGr=r(aDe," \u2014 "),BZ=n(aDe,"A",{href:!0});var GPt=s(BZ);EGr=r(GPt,"FlaxBlenderbotSmallForConditionalGeneration"),GPt.forEach(t),CGr=r(aDe," (BlenderbotSmall model)"),aDe.forEach(t),wGr=i(je),PC=n(je,"LI",{});var nDe=s(PC);V4e=n(nDe,"STRONG",{});var OPt=s(V4e);AGr=r(OPt,"encoder-decoder"),OPt.forEach(t),LGr=r(nDe," \u2014 "),IZ=n(nDe,"A",{href:!0});var VPt=s(IZ);yGr=r(VPt,"FlaxEncoderDecoderModel"),VPt.forEach(t),xGr=r(nDe," (Encoder decoder model)"),nDe.forEach(t),$Gr=i(je),BC=n(je,"LI",{});var sDe=s(BC);X4e=n(sDe,"STRONG",{});var XPt=s(X4e);kGr=r(XPt,"longt5"),XPt.forEach(t),SGr=r(sDe," \u2014 "),NZ=n(sDe,"A",{href:!0});var zPt=s(NZ);RGr=r(zPt,"FlaxLongT5ForConditionalGeneration"),zPt.forEach(t),PGr=r(sDe," (LongT5 model)"),sDe.forEach(t),BGr=i(je),IC=n(je,"LI",{});var lDe=s(IC);z4e=n(lDe,"STRONG",{});var WPt=s(z4e);IGr=r(WPt,"marian"),WPt.forEach(t),NGr=r(lDe," \u2014 "),qZ=n(lDe,"A",{href:!0});var QPt=s(qZ);qGr=r(QPt,"FlaxMarianMTModel"),QPt.forEach(t),jGr=r(lDe," (Marian model)"),lDe.forEach(t),DGr=i(je),NC=n(je,"LI",{});var iDe=s(NC);W4e=n(iDe,"STRONG",{});var HPt=s(W4e);GGr=r(HPt,"mbart"),HPt.forEach(t),OGr=r(iDe," \u2014 "),jZ=n(iDe,"A",{href:!0});var UPt=s(jZ);VGr=r(UPt,"FlaxMBartForConditionalGeneration"),UPt.forEach(t),XGr=r(iDe," (mBART model)"),iDe.forEach(t),zGr=i(je),qC=n(je,"LI",{});var dDe=s(qC);Q4e=n(dDe,"STRONG",{});var JPt=s(Q4e);WGr=r(JPt,"mt5"),JPt.forEach(t),QGr=r(dDe," \u2014 "),DZ=n(dDe,"A",{href:!0});var YPt=s(DZ);HGr=r(YPt,"FlaxMT5ForConditionalGeneration"),YPt.forEach(t),UGr=r(dDe," (MT5 model)"),dDe.forEach(t),JGr=i(je),jC=n(je,"LI",{});var cDe=s(jC);H4e=n(cDe,"STRONG",{});var KPt=s(H4e);YGr=r(KPt,"pegasus"),KPt.forEach(t),KGr=r(cDe," \u2014 "),GZ=n(cDe,"A",{href:!0});var ZPt=s(GZ);ZGr=r(ZPt,"FlaxPegasusForConditionalGeneration"),ZPt.forEach(t),eOr=r(cDe," (Pegasus model)"),cDe.forEach(t),oOr=i(je),DC=n(je,"LI",{});var fDe=s(DC);U4e=n(fDe,"STRONG",{});var eBt=s(U4e);rOr=r(eBt,"t5"),eBt.forEach(t),tOr=r(fDe," \u2014 "),OZ=n(fDe,"A",{href:!0});var oBt=s(OZ);aOr=r(oBt,"FlaxT5ForConditionalGeneration"),oBt.forEach(t),nOr=r(fDe," (T5 model)"),fDe.forEach(t),je.forEach(t),sOr=i(ni),T(GC.$$.fragment,ni),ni.forEach(t),ai.forEach(t),VOe=i(f),rf=n(f,"H2",{class:!0});var KXe=s(rf);OC=n(KXe,"A",{id:!0,class:!0,href:!0});var rBt=s(OC);J4e=n(rBt,"SPAN",{});var tBt=s(J4e);T(Qx.$$.fragment,tBt),tBt.forEach(t),rBt.forEach(t),lOr=i(KXe),Y4e=n(KXe,"SPAN",{});var aBt=s(Y4e);iOr=r(aBt,"FlaxAutoModelForSequenceClassification"),aBt.forEach(t),KXe.forEach(t),XOe=i(f),br=n(f,"DIV",{class:!0});var si=s(br);T(Hx.$$.fragment,si),dOr=i(si),tf=n(si,"P",{});var $re=s(tf);cOr=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VZ=n($re,"A",{href:!0});var nBt=s(VZ);fOr=r(nBt,"from_pretrained()"),nBt.forEach(t),mOr=r($re," class method or the "),XZ=n($re,"A",{href:!0});var sBt=s(XZ);gOr=r(sBt,"from_config()"),sBt.forEach(t),hOr=r($re,` class
method.`),$re.forEach(t),pOr=i(si),Ux=n(si,"P",{});var ZXe=s(Ux);uOr=r(ZXe,"This class cannot be instantiated directly using "),K4e=n(ZXe,"CODE",{});var lBt=s(K4e);_Or=r(lBt,"__init__()"),lBt.forEach(t),bOr=r(ZXe," (throws an error)."),ZXe.forEach(t),vOr=i(si),Ut=n(si,"DIV",{class:!0});var oL=s(Ut);T(Jx.$$.fragment,oL),FOr=i(oL),Z4e=n(oL,"P",{});var iBt=s(Z4e);TOr=r(iBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iBt.forEach(t),MOr=i(oL),af=n(oL,"P",{});var kre=s(af);EOr=r(kre,`Note:
Loading a model from its configuration file does `),eEe=n(kre,"STRONG",{});var dBt=s(eEe);COr=r(dBt,"not"),dBt.forEach(t),wOr=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=n(kre,"A",{href:!0});var cBt=s(zZ);AOr=r(cBt,"from_pretrained()"),cBt.forEach(t),LOr=r(kre," to load the model weights."),kre.forEach(t),yOr=i(oL),T(VC.$$.fragment,oL),oL.forEach(t),xOr=i(si),Wr=n(si,"DIV",{class:!0});var li=s(Wr);T(Yx.$$.fragment,li),$Or=i(li),oEe=n(li,"P",{});var fBt=s(oEe);kOr=r(fBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fBt.forEach(t),SOr=i(li),Cn=n(li,"P",{});var rL=s(Cn);ROr=r(rL,"The model class to instantiate is selected based on the "),rEe=n(rL,"CODE",{});var mBt=s(rEe);POr=r(mBt,"model_type"),mBt.forEach(t),BOr=r(rL,` property of the config object (either
passed as an argument or loaded from `),tEe=n(rL,"CODE",{});var gBt=s(tEe);IOr=r(gBt,"pretrained_model_name_or_path"),gBt.forEach(t),NOr=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=n(rL,"CODE",{});var hBt=s(aEe);qOr=r(hBt,"pretrained_model_name_or_path"),hBt.forEach(t),jOr=r(rL,":"),rL.forEach(t),DOr=i(li),Se=n(li,"UL",{});var De=s(Se);XC=n(De,"LI",{});var mDe=s(XC);nEe=n(mDe,"STRONG",{});var pBt=s(nEe);GOr=r(pBt,"albert"),pBt.forEach(t),OOr=r(mDe," \u2014 "),WZ=n(mDe,"A",{href:!0});var uBt=s(WZ);VOr=r(uBt,"FlaxAlbertForSequenceClassification"),uBt.forEach(t),XOr=r(mDe," (ALBERT model)"),mDe.forEach(t),zOr=i(De),zC=n(De,"LI",{});var gDe=s(zC);sEe=n(gDe,"STRONG",{});var _Bt=s(sEe);WOr=r(_Bt,"bart"),_Bt.forEach(t),QOr=r(gDe," \u2014 "),QZ=n(gDe,"A",{href:!0});var bBt=s(QZ);HOr=r(bBt,"FlaxBartForSequenceClassification"),bBt.forEach(t),UOr=r(gDe," (BART model)"),gDe.forEach(t),JOr=i(De),WC=n(De,"LI",{});var hDe=s(WC);lEe=n(hDe,"STRONG",{});var vBt=s(lEe);YOr=r(vBt,"bert"),vBt.forEach(t),KOr=r(hDe," \u2014 "),HZ=n(hDe,"A",{href:!0});var FBt=s(HZ);ZOr=r(FBt,"FlaxBertForSequenceClassification"),FBt.forEach(t),eVr=r(hDe," (BERT model)"),hDe.forEach(t),oVr=i(De),QC=n(De,"LI",{});var pDe=s(QC);iEe=n(pDe,"STRONG",{});var TBt=s(iEe);rVr=r(TBt,"big_bird"),TBt.forEach(t),tVr=r(pDe," \u2014 "),UZ=n(pDe,"A",{href:!0});var MBt=s(UZ);aVr=r(MBt,"FlaxBigBirdForSequenceClassification"),MBt.forEach(t),nVr=r(pDe," (BigBird model)"),pDe.forEach(t),sVr=i(De),HC=n(De,"LI",{});var uDe=s(HC);dEe=n(uDe,"STRONG",{});var EBt=s(dEe);lVr=r(EBt,"distilbert"),EBt.forEach(t),iVr=r(uDe," \u2014 "),JZ=n(uDe,"A",{href:!0});var CBt=s(JZ);dVr=r(CBt,"FlaxDistilBertForSequenceClassification"),CBt.forEach(t),cVr=r(uDe," (DistilBERT model)"),uDe.forEach(t),fVr=i(De),UC=n(De,"LI",{});var _De=s(UC);cEe=n(_De,"STRONG",{});var wBt=s(cEe);mVr=r(wBt,"electra"),wBt.forEach(t),gVr=r(_De," \u2014 "),YZ=n(_De,"A",{href:!0});var ABt=s(YZ);hVr=r(ABt,"FlaxElectraForSequenceClassification"),ABt.forEach(t),pVr=r(_De," (ELECTRA model)"),_De.forEach(t),uVr=i(De),JC=n(De,"LI",{});var bDe=s(JC);fEe=n(bDe,"STRONG",{});var LBt=s(fEe);_Vr=r(LBt,"mbart"),LBt.forEach(t),bVr=r(bDe," \u2014 "),KZ=n(bDe,"A",{href:!0});var yBt=s(KZ);vVr=r(yBt,"FlaxMBartForSequenceClassification"),yBt.forEach(t),FVr=r(bDe," (mBART model)"),bDe.forEach(t),TVr=i(De),YC=n(De,"LI",{});var vDe=s(YC);mEe=n(vDe,"STRONG",{});var xBt=s(mEe);MVr=r(xBt,"roberta"),xBt.forEach(t),EVr=r(vDe," \u2014 "),ZZ=n(vDe,"A",{href:!0});var $Bt=s(ZZ);CVr=r($Bt,"FlaxRobertaForSequenceClassification"),$Bt.forEach(t),wVr=r(vDe," (RoBERTa model)"),vDe.forEach(t),AVr=i(De),KC=n(De,"LI",{});var FDe=s(KC);gEe=n(FDe,"STRONG",{});var kBt=s(gEe);LVr=r(kBt,"roformer"),kBt.forEach(t),yVr=r(FDe," \u2014 "),eee=n(FDe,"A",{href:!0});var SBt=s(eee);xVr=r(SBt,"FlaxRoFormerForSequenceClassification"),SBt.forEach(t),$Vr=r(FDe," (RoFormer model)"),FDe.forEach(t),kVr=i(De),ZC=n(De,"LI",{});var TDe=s(ZC);hEe=n(TDe,"STRONG",{});var RBt=s(hEe);SVr=r(RBt,"xlm-roberta"),RBt.forEach(t),RVr=r(TDe," \u2014 "),oee=n(TDe,"A",{href:!0});var PBt=s(oee);PVr=r(PBt,"FlaxXLMRobertaForSequenceClassification"),PBt.forEach(t),BVr=r(TDe," (XLM-RoBERTa model)"),TDe.forEach(t),De.forEach(t),IVr=i(li),T(e5.$$.fragment,li),li.forEach(t),si.forEach(t),zOe=i(f),nf=n(f,"H2",{class:!0});var eze=s(nf);o5=n(eze,"A",{id:!0,class:!0,href:!0});var BBt=s(o5);pEe=n(BBt,"SPAN",{});var IBt=s(pEe);T(Kx.$$.fragment,IBt),IBt.forEach(t),BBt.forEach(t),NVr=i(eze),uEe=n(eze,"SPAN",{});var NBt=s(uEe);qVr=r(NBt,"FlaxAutoModelForQuestionAnswering"),NBt.forEach(t),eze.forEach(t),WOe=i(f),vr=n(f,"DIV",{class:!0});var ii=s(vr);T(Zx.$$.fragment,ii),jVr=i(ii),sf=n(ii,"P",{});var Sre=s(sf);DVr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ree=n(Sre,"A",{href:!0});var qBt=s(ree);GVr=r(qBt,"from_pretrained()"),qBt.forEach(t),OVr=r(Sre," class method or the "),tee=n(Sre,"A",{href:!0});var jBt=s(tee);VVr=r(jBt,"from_config()"),jBt.forEach(t),XVr=r(Sre,` class
method.`),Sre.forEach(t),zVr=i(ii),e$=n(ii,"P",{});var oze=s(e$);WVr=r(oze,"This class cannot be instantiated directly using "),_Ee=n(oze,"CODE",{});var DBt=s(_Ee);QVr=r(DBt,"__init__()"),DBt.forEach(t),HVr=r(oze," (throws an error)."),oze.forEach(t),UVr=i(ii),Jt=n(ii,"DIV",{class:!0});var tL=s(Jt);T(o$.$$.fragment,tL),JVr=i(tL),bEe=n(tL,"P",{});var GBt=s(bEe);YVr=r(GBt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),GBt.forEach(t),KVr=i(tL),lf=n(tL,"P",{});var Rre=s(lf);ZVr=r(Rre,`Note:
Loading a model from its configuration file does `),vEe=n(Rre,"STRONG",{});var OBt=s(vEe);eXr=r(OBt,"not"),OBt.forEach(t),oXr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),aee=n(Rre,"A",{href:!0});var VBt=s(aee);rXr=r(VBt,"from_pretrained()"),VBt.forEach(t),tXr=r(Rre," to load the model weights."),Rre.forEach(t),aXr=i(tL),T(r5.$$.fragment,tL),tL.forEach(t),nXr=i(ii),Qr=n(ii,"DIV",{class:!0});var di=s(Qr);T(r$.$$.fragment,di),sXr=i(di),FEe=n(di,"P",{});var XBt=s(FEe);lXr=r(XBt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XBt.forEach(t),iXr=i(di),wn=n(di,"P",{});var aL=s(wn);dXr=r(aL,"The model class to instantiate is selected based on the "),TEe=n(aL,"CODE",{});var zBt=s(TEe);cXr=r(zBt,"model_type"),zBt.forEach(t),fXr=r(aL,` property of the config object (either
passed as an argument or loaded from `),MEe=n(aL,"CODE",{});var WBt=s(MEe);mXr=r(WBt,"pretrained_model_name_or_path"),WBt.forEach(t),gXr=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=n(aL,"CODE",{});var QBt=s(EEe);hXr=r(QBt,"pretrained_model_name_or_path"),QBt.forEach(t),pXr=r(aL,":"),aL.forEach(t),uXr=i(di),Re=n(di,"UL",{});var Ge=s(Re);t5=n(Ge,"LI",{});var MDe=s(t5);CEe=n(MDe,"STRONG",{});var HBt=s(CEe);_Xr=r(HBt,"albert"),HBt.forEach(t),bXr=r(MDe," \u2014 "),nee=n(MDe,"A",{href:!0});var UBt=s(nee);vXr=r(UBt,"FlaxAlbertForQuestionAnswering"),UBt.forEach(t),FXr=r(MDe," (ALBERT model)"),MDe.forEach(t),TXr=i(Ge),a5=n(Ge,"LI",{});var EDe=s(a5);wEe=n(EDe,"STRONG",{});var JBt=s(wEe);MXr=r(JBt,"bart"),JBt.forEach(t),EXr=r(EDe," \u2014 "),see=n(EDe,"A",{href:!0});var YBt=s(see);CXr=r(YBt,"FlaxBartForQuestionAnswering"),YBt.forEach(t),wXr=r(EDe," (BART model)"),EDe.forEach(t),AXr=i(Ge),n5=n(Ge,"LI",{});var CDe=s(n5);AEe=n(CDe,"STRONG",{});var KBt=s(AEe);LXr=r(KBt,"bert"),KBt.forEach(t),yXr=r(CDe," \u2014 "),lee=n(CDe,"A",{href:!0});var ZBt=s(lee);xXr=r(ZBt,"FlaxBertForQuestionAnswering"),ZBt.forEach(t),$Xr=r(CDe," (BERT model)"),CDe.forEach(t),kXr=i(Ge),s5=n(Ge,"LI",{});var wDe=s(s5);LEe=n(wDe,"STRONG",{});var eIt=s(LEe);SXr=r(eIt,"big_bird"),eIt.forEach(t),RXr=r(wDe," \u2014 "),iee=n(wDe,"A",{href:!0});var oIt=s(iee);PXr=r(oIt,"FlaxBigBirdForQuestionAnswering"),oIt.forEach(t),BXr=r(wDe," (BigBird model)"),wDe.forEach(t),IXr=i(Ge),l5=n(Ge,"LI",{});var ADe=s(l5);yEe=n(ADe,"STRONG",{});var rIt=s(yEe);NXr=r(rIt,"distilbert"),rIt.forEach(t),qXr=r(ADe," \u2014 "),dee=n(ADe,"A",{href:!0});var tIt=s(dee);jXr=r(tIt,"FlaxDistilBertForQuestionAnswering"),tIt.forEach(t),DXr=r(ADe," (DistilBERT model)"),ADe.forEach(t),GXr=i(Ge),i5=n(Ge,"LI",{});var LDe=s(i5);xEe=n(LDe,"STRONG",{});var aIt=s(xEe);OXr=r(aIt,"electra"),aIt.forEach(t),VXr=r(LDe," \u2014 "),cee=n(LDe,"A",{href:!0});var nIt=s(cee);XXr=r(nIt,"FlaxElectraForQuestionAnswering"),nIt.forEach(t),zXr=r(LDe," (ELECTRA model)"),LDe.forEach(t),WXr=i(Ge),d5=n(Ge,"LI",{});var yDe=s(d5);$Ee=n(yDe,"STRONG",{});var sIt=s($Ee);QXr=r(sIt,"mbart"),sIt.forEach(t),HXr=r(yDe," \u2014 "),fee=n(yDe,"A",{href:!0});var lIt=s(fee);UXr=r(lIt,"FlaxMBartForQuestionAnswering"),lIt.forEach(t),JXr=r(yDe," (mBART model)"),yDe.forEach(t),YXr=i(Ge),c5=n(Ge,"LI",{});var xDe=s(c5);kEe=n(xDe,"STRONG",{});var iIt=s(kEe);KXr=r(iIt,"roberta"),iIt.forEach(t),ZXr=r(xDe," \u2014 "),mee=n(xDe,"A",{href:!0});var dIt=s(mee);ezr=r(dIt,"FlaxRobertaForQuestionAnswering"),dIt.forEach(t),ozr=r(xDe," (RoBERTa model)"),xDe.forEach(t),rzr=i(Ge),f5=n(Ge,"LI",{});var $De=s(f5);SEe=n($De,"STRONG",{});var cIt=s(SEe);tzr=r(cIt,"roformer"),cIt.forEach(t),azr=r($De," \u2014 "),gee=n($De,"A",{href:!0});var fIt=s(gee);nzr=r(fIt,"FlaxRoFormerForQuestionAnswering"),fIt.forEach(t),szr=r($De," (RoFormer model)"),$De.forEach(t),lzr=i(Ge),m5=n(Ge,"LI",{});var kDe=s(m5);REe=n(kDe,"STRONG",{});var mIt=s(REe);izr=r(mIt,"xlm-roberta"),mIt.forEach(t),dzr=r(kDe," \u2014 "),hee=n(kDe,"A",{href:!0});var gIt=s(hee);czr=r(gIt,"FlaxXLMRobertaForQuestionAnswering"),gIt.forEach(t),fzr=r(kDe," (XLM-RoBERTa model)"),kDe.forEach(t),Ge.forEach(t),mzr=i(di),T(g5.$$.fragment,di),di.forEach(t),ii.forEach(t),QOe=i(f),df=n(f,"H2",{class:!0});var rze=s(df);h5=n(rze,"A",{id:!0,class:!0,href:!0});var hIt=s(h5);PEe=n(hIt,"SPAN",{});var pIt=s(PEe);T(t$.$$.fragment,pIt),pIt.forEach(t),hIt.forEach(t),gzr=i(rze),BEe=n(rze,"SPAN",{});var uIt=s(BEe);hzr=r(uIt,"FlaxAutoModelForTokenClassification"),uIt.forEach(t),rze.forEach(t),HOe=i(f),Fr=n(f,"DIV",{class:!0});var ci=s(Fr);T(a$.$$.fragment,ci),pzr=i(ci),cf=n(ci,"P",{});var Pre=s(cf);uzr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pee=n(Pre,"A",{href:!0});var _It=s(pee);_zr=r(_It,"from_pretrained()"),_It.forEach(t),bzr=r(Pre," class method or the "),uee=n(Pre,"A",{href:!0});var bIt=s(uee);vzr=r(bIt,"from_config()"),bIt.forEach(t),Fzr=r(Pre,` class
method.`),Pre.forEach(t),Tzr=i(ci),n$=n(ci,"P",{});var tze=s(n$);Mzr=r(tze,"This class cannot be instantiated directly using "),IEe=n(tze,"CODE",{});var vIt=s(IEe);Ezr=r(vIt,"__init__()"),vIt.forEach(t),Czr=r(tze," (throws an error)."),tze.forEach(t),wzr=i(ci),Yt=n(ci,"DIV",{class:!0});var nL=s(Yt);T(s$.$$.fragment,nL),Azr=i(nL),NEe=n(nL,"P",{});var FIt=s(NEe);Lzr=r(FIt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),FIt.forEach(t),yzr=i(nL),ff=n(nL,"P",{});var Bre=s(ff);xzr=r(Bre,`Note:
Loading a model from its configuration file does `),qEe=n(Bre,"STRONG",{});var TIt=s(qEe);$zr=r(TIt,"not"),TIt.forEach(t),kzr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=n(Bre,"A",{href:!0});var MIt=s(_ee);Szr=r(MIt,"from_pretrained()"),MIt.forEach(t),Rzr=r(Bre," to load the model weights."),Bre.forEach(t),Pzr=i(nL),T(p5.$$.fragment,nL),nL.forEach(t),Bzr=i(ci),Hr=n(ci,"DIV",{class:!0});var fi=s(Hr);T(l$.$$.fragment,fi),Izr=i(fi),jEe=n(fi,"P",{});var EIt=s(jEe);Nzr=r(EIt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),EIt.forEach(t),qzr=i(fi),An=n(fi,"P",{});var sL=s(An);jzr=r(sL,"The model class to instantiate is selected based on the "),DEe=n(sL,"CODE",{});var CIt=s(DEe);Dzr=r(CIt,"model_type"),CIt.forEach(t),Gzr=r(sL,` property of the config object (either
passed as an argument or loaded from `),GEe=n(sL,"CODE",{});var wIt=s(GEe);Ozr=r(wIt,"pretrained_model_name_or_path"),wIt.forEach(t),Vzr=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OEe=n(sL,"CODE",{});var AIt=s(OEe);Xzr=r(AIt,"pretrained_model_name_or_path"),AIt.forEach(t),zzr=r(sL,":"),sL.forEach(t),Wzr=i(fi),Ve=n(fi,"UL",{});var To=s(Ve);u5=n(To,"LI",{});var SDe=s(u5);VEe=n(SDe,"STRONG",{});var LIt=s(VEe);Qzr=r(LIt,"albert"),LIt.forEach(t),Hzr=r(SDe," \u2014 "),bee=n(SDe,"A",{href:!0});var yIt=s(bee);Uzr=r(yIt,"FlaxAlbertForTokenClassification"),yIt.forEach(t),Jzr=r(SDe," (ALBERT model)"),SDe.forEach(t),Yzr=i(To),_5=n(To,"LI",{});var RDe=s(_5);XEe=n(RDe,"STRONG",{});var xIt=s(XEe);Kzr=r(xIt,"bert"),xIt.forEach(t),Zzr=r(RDe," \u2014 "),vee=n(RDe,"A",{href:!0});var $It=s(vee);eWr=r($It,"FlaxBertForTokenClassification"),$It.forEach(t),oWr=r(RDe," (BERT model)"),RDe.forEach(t),rWr=i(To),b5=n(To,"LI",{});var PDe=s(b5);zEe=n(PDe,"STRONG",{});var kIt=s(zEe);tWr=r(kIt,"big_bird"),kIt.forEach(t),aWr=r(PDe," \u2014 "),Fee=n(PDe,"A",{href:!0});var SIt=s(Fee);nWr=r(SIt,"FlaxBigBirdForTokenClassification"),SIt.forEach(t),sWr=r(PDe," (BigBird model)"),PDe.forEach(t),lWr=i(To),v5=n(To,"LI",{});var BDe=s(v5);WEe=n(BDe,"STRONG",{});var RIt=s(WEe);iWr=r(RIt,"distilbert"),RIt.forEach(t),dWr=r(BDe," \u2014 "),Tee=n(BDe,"A",{href:!0});var PIt=s(Tee);cWr=r(PIt,"FlaxDistilBertForTokenClassification"),PIt.forEach(t),fWr=r(BDe," (DistilBERT model)"),BDe.forEach(t),mWr=i(To),F5=n(To,"LI",{});var IDe=s(F5);QEe=n(IDe,"STRONG",{});var BIt=s(QEe);gWr=r(BIt,"electra"),BIt.forEach(t),hWr=r(IDe," \u2014 "),Mee=n(IDe,"A",{href:!0});var IIt=s(Mee);pWr=r(IIt,"FlaxElectraForTokenClassification"),IIt.forEach(t),uWr=r(IDe," (ELECTRA model)"),IDe.forEach(t),_Wr=i(To),T5=n(To,"LI",{});var NDe=s(T5);HEe=n(NDe,"STRONG",{});var NIt=s(HEe);bWr=r(NIt,"roberta"),NIt.forEach(t),vWr=r(NDe," \u2014 "),Eee=n(NDe,"A",{href:!0});var qIt=s(Eee);FWr=r(qIt,"FlaxRobertaForTokenClassification"),qIt.forEach(t),TWr=r(NDe," (RoBERTa model)"),NDe.forEach(t),MWr=i(To),M5=n(To,"LI",{});var qDe=s(M5);UEe=n(qDe,"STRONG",{});var jIt=s(UEe);EWr=r(jIt,"roformer"),jIt.forEach(t),CWr=r(qDe," \u2014 "),Cee=n(qDe,"A",{href:!0});var DIt=s(Cee);wWr=r(DIt,"FlaxRoFormerForTokenClassification"),DIt.forEach(t),AWr=r(qDe," (RoFormer model)"),qDe.forEach(t),LWr=i(To),E5=n(To,"LI",{});var jDe=s(E5);JEe=n(jDe,"STRONG",{});var GIt=s(JEe);yWr=r(GIt,"xlm-roberta"),GIt.forEach(t),xWr=r(jDe," \u2014 "),wee=n(jDe,"A",{href:!0});var OIt=s(wee);$Wr=r(OIt,"FlaxXLMRobertaForTokenClassification"),OIt.forEach(t),kWr=r(jDe," (XLM-RoBERTa model)"),jDe.forEach(t),To.forEach(t),SWr=i(fi),T(C5.$$.fragment,fi),fi.forEach(t),ci.forEach(t),UOe=i(f),mf=n(f,"H2",{class:!0});var aze=s(mf);w5=n(aze,"A",{id:!0,class:!0,href:!0});var VIt=s(w5);YEe=n(VIt,"SPAN",{});var XIt=s(YEe);T(i$.$$.fragment,XIt),XIt.forEach(t),VIt.forEach(t),RWr=i(aze),KEe=n(aze,"SPAN",{});var zIt=s(KEe);PWr=r(zIt,"FlaxAutoModelForMultipleChoice"),zIt.forEach(t),aze.forEach(t),JOe=i(f),Tr=n(f,"DIV",{class:!0});var mi=s(Tr);T(d$.$$.fragment,mi),BWr=i(mi),gf=n(mi,"P",{});var Ire=s(gf);IWr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Aee=n(Ire,"A",{href:!0});var WIt=s(Aee);NWr=r(WIt,"from_pretrained()"),WIt.forEach(t),qWr=r(Ire," class method or the "),Lee=n(Ire,"A",{href:!0});var QIt=s(Lee);jWr=r(QIt,"from_config()"),QIt.forEach(t),DWr=r(Ire,` class
method.`),Ire.forEach(t),GWr=i(mi),c$=n(mi,"P",{});var nze=s(c$);OWr=r(nze,"This class cannot be instantiated directly using "),ZEe=n(nze,"CODE",{});var HIt=s(ZEe);VWr=r(HIt,"__init__()"),HIt.forEach(t),XWr=r(nze," (throws an error)."),nze.forEach(t),zWr=i(mi),Kt=n(mi,"DIV",{class:!0});var lL=s(Kt);T(f$.$$.fragment,lL),WWr=i(lL),eCe=n(lL,"P",{});var UIt=s(eCe);QWr=r(UIt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),UIt.forEach(t),HWr=i(lL),hf=n(lL,"P",{});var Nre=s(hf);UWr=r(Nre,`Note:
Loading a model from its configuration file does `),oCe=n(Nre,"STRONG",{});var JIt=s(oCe);JWr=r(JIt,"not"),JIt.forEach(t),YWr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=n(Nre,"A",{href:!0});var YIt=s(yee);KWr=r(YIt,"from_pretrained()"),YIt.forEach(t),ZWr=r(Nre," to load the model weights."),Nre.forEach(t),eQr=i(lL),T(A5.$$.fragment,lL),lL.forEach(t),oQr=i(mi),Ur=n(mi,"DIV",{class:!0});var gi=s(Ur);T(m$.$$.fragment,gi),rQr=i(gi),rCe=n(gi,"P",{});var KIt=s(rCe);tQr=r(KIt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),KIt.forEach(t),aQr=i(gi),Ln=n(gi,"P",{});var iL=s(Ln);nQr=r(iL,"The model class to instantiate is selected based on the "),tCe=n(iL,"CODE",{});var ZIt=s(tCe);sQr=r(ZIt,"model_type"),ZIt.forEach(t),lQr=r(iL,` property of the config object (either
passed as an argument or loaded from `),aCe=n(iL,"CODE",{});var eNt=s(aCe);iQr=r(eNt,"pretrained_model_name_or_path"),eNt.forEach(t),dQr=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nCe=n(iL,"CODE",{});var oNt=s(nCe);cQr=r(oNt,"pretrained_model_name_or_path"),oNt.forEach(t),fQr=r(iL,":"),iL.forEach(t),mQr=i(gi),Xe=n(gi,"UL",{});var Mo=s(Xe);L5=n(Mo,"LI",{});var DDe=s(L5);sCe=n(DDe,"STRONG",{});var rNt=s(sCe);gQr=r(rNt,"albert"),rNt.forEach(t),hQr=r(DDe," \u2014 "),xee=n(DDe,"A",{href:!0});var tNt=s(xee);pQr=r(tNt,"FlaxAlbertForMultipleChoice"),tNt.forEach(t),uQr=r(DDe," (ALBERT model)"),DDe.forEach(t),_Qr=i(Mo),y5=n(Mo,"LI",{});var GDe=s(y5);lCe=n(GDe,"STRONG",{});var aNt=s(lCe);bQr=r(aNt,"bert"),aNt.forEach(t),vQr=r(GDe," \u2014 "),$ee=n(GDe,"A",{href:!0});var nNt=s($ee);FQr=r(nNt,"FlaxBertForMultipleChoice"),nNt.forEach(t),TQr=r(GDe," (BERT model)"),GDe.forEach(t),MQr=i(Mo),x5=n(Mo,"LI",{});var ODe=s(x5);iCe=n(ODe,"STRONG",{});var sNt=s(iCe);EQr=r(sNt,"big_bird"),sNt.forEach(t),CQr=r(ODe," \u2014 "),kee=n(ODe,"A",{href:!0});var lNt=s(kee);wQr=r(lNt,"FlaxBigBirdForMultipleChoice"),lNt.forEach(t),AQr=r(ODe," (BigBird model)"),ODe.forEach(t),LQr=i(Mo),$5=n(Mo,"LI",{});var VDe=s($5);dCe=n(VDe,"STRONG",{});var iNt=s(dCe);yQr=r(iNt,"distilbert"),iNt.forEach(t),xQr=r(VDe," \u2014 "),See=n(VDe,"A",{href:!0});var dNt=s(See);$Qr=r(dNt,"FlaxDistilBertForMultipleChoice"),dNt.forEach(t),kQr=r(VDe," (DistilBERT model)"),VDe.forEach(t),SQr=i(Mo),k5=n(Mo,"LI",{});var XDe=s(k5);cCe=n(XDe,"STRONG",{});var cNt=s(cCe);RQr=r(cNt,"electra"),cNt.forEach(t),PQr=r(XDe," \u2014 "),Ree=n(XDe,"A",{href:!0});var fNt=s(Ree);BQr=r(fNt,"FlaxElectraForMultipleChoice"),fNt.forEach(t),IQr=r(XDe," (ELECTRA model)"),XDe.forEach(t),NQr=i(Mo),S5=n(Mo,"LI",{});var zDe=s(S5);fCe=n(zDe,"STRONG",{});var mNt=s(fCe);qQr=r(mNt,"roberta"),mNt.forEach(t),jQr=r(zDe," \u2014 "),Pee=n(zDe,"A",{href:!0});var gNt=s(Pee);DQr=r(gNt,"FlaxRobertaForMultipleChoice"),gNt.forEach(t),GQr=r(zDe," (RoBERTa model)"),zDe.forEach(t),OQr=i(Mo),R5=n(Mo,"LI",{});var WDe=s(R5);mCe=n(WDe,"STRONG",{});var hNt=s(mCe);VQr=r(hNt,"roformer"),hNt.forEach(t),XQr=r(WDe," \u2014 "),Bee=n(WDe,"A",{href:!0});var pNt=s(Bee);zQr=r(pNt,"FlaxRoFormerForMultipleChoice"),pNt.forEach(t),WQr=r(WDe," (RoFormer model)"),WDe.forEach(t),QQr=i(Mo),P5=n(Mo,"LI",{});var QDe=s(P5);gCe=n(QDe,"STRONG",{});var uNt=s(gCe);HQr=r(uNt,"xlm-roberta"),uNt.forEach(t),UQr=r(QDe," \u2014 "),Iee=n(QDe,"A",{href:!0});var _Nt=s(Iee);JQr=r(_Nt,"FlaxXLMRobertaForMultipleChoice"),_Nt.forEach(t),YQr=r(QDe," (XLM-RoBERTa model)"),QDe.forEach(t),Mo.forEach(t),KQr=i(gi),T(B5.$$.fragment,gi),gi.forEach(t),mi.forEach(t),YOe=i(f),pf=n(f,"H2",{class:!0});var sze=s(pf);I5=n(sze,"A",{id:!0,class:!0,href:!0});var bNt=s(I5);hCe=n(bNt,"SPAN",{});var vNt=s(hCe);T(g$.$$.fragment,vNt),vNt.forEach(t),bNt.forEach(t),ZQr=i(sze),pCe=n(sze,"SPAN",{});var FNt=s(pCe);eHr=r(FNt,"FlaxAutoModelForNextSentencePrediction"),FNt.forEach(t),sze.forEach(t),KOe=i(f),Mr=n(f,"DIV",{class:!0});var hi=s(Mr);T(h$.$$.fragment,hi),oHr=i(hi),uf=n(hi,"P",{});var qre=s(uf);rHr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Nee=n(qre,"A",{href:!0});var TNt=s(Nee);tHr=r(TNt,"from_pretrained()"),TNt.forEach(t),aHr=r(qre," class method or the "),qee=n(qre,"A",{href:!0});var MNt=s(qee);nHr=r(MNt,"from_config()"),MNt.forEach(t),sHr=r(qre,` class
method.`),qre.forEach(t),lHr=i(hi),p$=n(hi,"P",{});var lze=s(p$);iHr=r(lze,"This class cannot be instantiated directly using "),uCe=n(lze,"CODE",{});var ENt=s(uCe);dHr=r(ENt,"__init__()"),ENt.forEach(t),cHr=r(lze," (throws an error)."),lze.forEach(t),fHr=i(hi),Zt=n(hi,"DIV",{class:!0});var dL=s(Zt);T(u$.$$.fragment,dL),mHr=i(dL),_Ce=n(dL,"P",{});var CNt=s(_Ce);gHr=r(CNt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CNt.forEach(t),hHr=i(dL),_f=n(dL,"P",{});var jre=s(_f);pHr=r(jre,`Note:
Loading a model from its configuration file does `),bCe=n(jre,"STRONG",{});var wNt=s(bCe);uHr=r(wNt,"not"),wNt.forEach(t),_Hr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=n(jre,"A",{href:!0});var ANt=s(jee);bHr=r(ANt,"from_pretrained()"),ANt.forEach(t),vHr=r(jre," to load the model weights."),jre.forEach(t),FHr=i(dL),T(N5.$$.fragment,dL),dL.forEach(t),THr=i(hi),Jr=n(hi,"DIV",{class:!0});var pi=s(Jr);T(_$.$$.fragment,pi),MHr=i(pi),vCe=n(pi,"P",{});var LNt=s(vCe);EHr=r(LNt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),LNt.forEach(t),CHr=i(pi),yn=n(pi,"P",{});var cL=s(yn);wHr=r(cL,"The model class to instantiate is selected based on the "),FCe=n(cL,"CODE",{});var yNt=s(FCe);AHr=r(yNt,"model_type"),yNt.forEach(t),LHr=r(cL,` property of the config object (either
passed as an argument or loaded from `),TCe=n(cL,"CODE",{});var xNt=s(TCe);yHr=r(xNt,"pretrained_model_name_or_path"),xNt.forEach(t),xHr=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MCe=n(cL,"CODE",{});var $Nt=s(MCe);$Hr=r($Nt,"pretrained_model_name_or_path"),$Nt.forEach(t),kHr=r(cL,":"),cL.forEach(t),SHr=i(pi),ECe=n(pi,"UL",{});var kNt=s(ECe);q5=n(kNt,"LI",{});var HDe=s(q5);CCe=n(HDe,"STRONG",{});var SNt=s(CCe);RHr=r(SNt,"bert"),SNt.forEach(t),PHr=r(HDe," \u2014 "),Dee=n(HDe,"A",{href:!0});var RNt=s(Dee);BHr=r(RNt,"FlaxBertForNextSentencePrediction"),RNt.forEach(t),IHr=r(HDe," (BERT model)"),HDe.forEach(t),kNt.forEach(t),NHr=i(pi),T(j5.$$.fragment,pi),pi.forEach(t),hi.forEach(t),ZOe=i(f),bf=n(f,"H2",{class:!0});var ize=s(bf);D5=n(ize,"A",{id:!0,class:!0,href:!0});var PNt=s(D5);wCe=n(PNt,"SPAN",{});var BNt=s(wCe);T(b$.$$.fragment,BNt),BNt.forEach(t),PNt.forEach(t),qHr=i(ize),ACe=n(ize,"SPAN",{});var INt=s(ACe);jHr=r(INt,"FlaxAutoModelForImageClassification"),INt.forEach(t),ize.forEach(t),eVe=i(f),Er=n(f,"DIV",{class:!0});var ui=s(Er);T(v$.$$.fragment,ui),DHr=i(ui),vf=n(ui,"P",{});var Dre=s(vf);GHr=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gee=n(Dre,"A",{href:!0});var NNt=s(Gee);OHr=r(NNt,"from_pretrained()"),NNt.forEach(t),VHr=r(Dre," class method or the "),Oee=n(Dre,"A",{href:!0});var qNt=s(Oee);XHr=r(qNt,"from_config()"),qNt.forEach(t),zHr=r(Dre,` class
method.`),Dre.forEach(t),WHr=i(ui),F$=n(ui,"P",{});var dze=s(F$);QHr=r(dze,"This class cannot be instantiated directly using "),LCe=n(dze,"CODE",{});var jNt=s(LCe);HHr=r(jNt,"__init__()"),jNt.forEach(t),UHr=r(dze," (throws an error)."),dze.forEach(t),JHr=i(ui),ea=n(ui,"DIV",{class:!0});var fL=s(ea);T(T$.$$.fragment,fL),YHr=i(fL),yCe=n(fL,"P",{});var DNt=s(yCe);KHr=r(DNt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DNt.forEach(t),ZHr=i(fL),Ff=n(fL,"P",{});var Gre=s(Ff);eUr=r(Gre,`Note:
Loading a model from its configuration file does `),xCe=n(Gre,"STRONG",{});var GNt=s(xCe);oUr=r(GNt,"not"),GNt.forEach(t),rUr=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=n(Gre,"A",{href:!0});var ONt=s(Vee);tUr=r(ONt,"from_pretrained()"),ONt.forEach(t),aUr=r(Gre," to load the model weights."),Gre.forEach(t),nUr=i(fL),T(G5.$$.fragment,fL),fL.forEach(t),sUr=i(ui),Yr=n(ui,"DIV",{class:!0});var _i=s(Yr);T(M$.$$.fragment,_i),lUr=i(_i),$Ce=n(_i,"P",{});var VNt=s($Ce);iUr=r(VNt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),VNt.forEach(t),dUr=i(_i),xn=n(_i,"P",{});var mL=s(xn);cUr=r(mL,"The model class to instantiate is selected based on the "),kCe=n(mL,"CODE",{});var XNt=s(kCe);fUr=r(XNt,"model_type"),XNt.forEach(t),mUr=r(mL,` property of the config object (either
passed as an argument or loaded from `),SCe=n(mL,"CODE",{});var zNt=s(SCe);gUr=r(zNt,"pretrained_model_name_or_path"),zNt.forEach(t),hUr=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RCe=n(mL,"CODE",{});var WNt=s(RCe);pUr=r(WNt,"pretrained_model_name_or_path"),WNt.forEach(t),uUr=r(mL,":"),mL.forEach(t),_Ur=i(_i),E$=n(_i,"UL",{});var cze=s(E$);O5=n(cze,"LI",{});var UDe=s(O5);PCe=n(UDe,"STRONG",{});var QNt=s(PCe);bUr=r(QNt,"beit"),QNt.forEach(t),vUr=r(UDe," \u2014 "),Xee=n(UDe,"A",{href:!0});var HNt=s(Xee);FUr=r(HNt,"FlaxBeitForImageClassification"),HNt.forEach(t),TUr=r(UDe," (BEiT model)"),UDe.forEach(t),MUr=i(cze),V5=n(cze,"LI",{});var JDe=s(V5);BCe=n(JDe,"STRONG",{});var UNt=s(BCe);EUr=r(UNt,"vit"),UNt.forEach(t),CUr=r(JDe," \u2014 "),zee=n(JDe,"A",{href:!0});var JNt=s(zee);wUr=r(JNt,"FlaxViTForImageClassification"),JNt.forEach(t),AUr=r(JDe," (ViT model)"),JDe.forEach(t),cze.forEach(t),LUr=i(_i),T(X5.$$.fragment,_i),_i.forEach(t),ui.forEach(t),oVe=i(f),Tf=n(f,"H2",{class:!0});var fze=s(Tf);z5=n(fze,"A",{id:!0,class:!0,href:!0});var YNt=s(z5);ICe=n(YNt,"SPAN",{});var KNt=s(ICe);T(C$.$$.fragment,KNt),KNt.forEach(t),YNt.forEach(t),yUr=i(fze),NCe=n(fze,"SPAN",{});var ZNt=s(NCe);xUr=r(ZNt,"FlaxAutoModelForVision2Seq"),ZNt.forEach(t),fze.forEach(t),rVe=i(f),Cr=n(f,"DIV",{class:!0});var bi=s(Cr);T(w$.$$.fragment,bi),$Ur=i(bi),Mf=n(bi,"P",{});var Ore=s(Mf);kUr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Wee=n(Ore,"A",{href:!0});var eqt=s(Wee);SUr=r(eqt,"from_pretrained()"),eqt.forEach(t),RUr=r(Ore," class method or the "),Qee=n(Ore,"A",{href:!0});var oqt=s(Qee);PUr=r(oqt,"from_config()"),oqt.forEach(t),BUr=r(Ore,` class
method.`),Ore.forEach(t),IUr=i(bi),A$=n(bi,"P",{});var mze=s(A$);NUr=r(mze,"This class cannot be instantiated directly using "),qCe=n(mze,"CODE",{});var rqt=s(qCe);qUr=r(rqt,"__init__()"),rqt.forEach(t),jUr=r(mze," (throws an error)."),mze.forEach(t),DUr=i(bi),oa=n(bi,"DIV",{class:!0});var gL=s(oa);T(L$.$$.fragment,gL),GUr=i(gL),jCe=n(gL,"P",{});var tqt=s(jCe);OUr=r(tqt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tqt.forEach(t),VUr=i(gL),Ef=n(gL,"P",{});var Vre=s(Ef);XUr=r(Vre,`Note:
Loading a model from its configuration file does `),DCe=n(Vre,"STRONG",{});var aqt=s(DCe);zUr=r(aqt,"not"),aqt.forEach(t),WUr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hee=n(Vre,"A",{href:!0});var nqt=s(Hee);QUr=r(nqt,"from_pretrained()"),nqt.forEach(t),HUr=r(Vre," to load the model weights."),Vre.forEach(t),UUr=i(gL),T(W5.$$.fragment,gL),gL.forEach(t),JUr=i(bi),Kr=n(bi,"DIV",{class:!0});var vi=s(Kr);T(y$.$$.fragment,vi),YUr=i(vi),GCe=n(vi,"P",{});var sqt=s(GCe);KUr=r(sqt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sqt.forEach(t),ZUr=i(vi),$n=n(vi,"P",{});var hL=s($n);eJr=r(hL,"The model class to instantiate is selected based on the "),OCe=n(hL,"CODE",{});var lqt=s(OCe);oJr=r(lqt,"model_type"),lqt.forEach(t),rJr=r(hL,` property of the config object (either
passed as an argument or loaded from `),VCe=n(hL,"CODE",{});var iqt=s(VCe);tJr=r(iqt,"pretrained_model_name_or_path"),iqt.forEach(t),aJr=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XCe=n(hL,"CODE",{});var dqt=s(XCe);nJr=r(dqt,"pretrained_model_name_or_path"),dqt.forEach(t),sJr=r(hL,":"),hL.forEach(t),lJr=i(vi),zCe=n(vi,"UL",{});var cqt=s(zCe);Q5=n(cqt,"LI",{});var YDe=s(Q5);WCe=n(YDe,"STRONG",{});var fqt=s(WCe);iJr=r(fqt,"vision-encoder-decoder"),fqt.forEach(t),dJr=r(YDe," \u2014 "),Uee=n(YDe,"A",{href:!0});var mqt=s(Uee);cJr=r(mqt,"FlaxVisionEncoderDecoderModel"),mqt.forEach(t),fJr=r(YDe," (Vision Encoder decoder model)"),YDe.forEach(t),cqt.forEach(t),mJr=i(vi),T(H5.$$.fragment,vi),vi.forEach(t),bi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(bDt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Sn,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.AutoConfig"),c(Pn,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.AutoModel"),c(Bn,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.AutoTokenizer"),c(Ai,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertModel"),c(kf,"id","extending-the-auto-classes"),c(kf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kf,"href","#extending-the-auto-classes"),c(Li,"class","relative group"),c(Rf,"id","transformers.AutoConfig"),c(Rf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rf,"href","#transformers.AutoConfig"),c(yi,"class","relative group"),c(Yk,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Kk,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertConfig"),c(Zk,"href","/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartConfig"),c(eS,"href","/docs/transformers/pr_17306/en/model_doc/beit#transformers.BeitConfig"),c(oS,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertConfig"),c(rS,"href","/docs/transformers/pr_17306/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(tS,"href","/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdConfig"),c(aS,"href","/docs/transformers/pr_17306/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(nS,"href","/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(sS,"href","/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(lS,"href","/docs/transformers/pr_17306/en/model_doc/bloom#transformers.BloomConfig"),c(iS,"href","/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertConfig"),c(dS,"href","/docs/transformers/pr_17306/en/model_doc/canine#transformers.CanineConfig"),c(cS,"href","/docs/transformers/pr_17306/en/model_doc/clip#transformers.CLIPConfig"),c(fS,"href","/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertConfig"),c(mS,"href","/docs/transformers/pr_17306/en/model_doc/convnext#transformers.ConvNextConfig"),c(gS,"href","/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.CTRLConfig"),c(hS,"href","/docs/transformers/pr_17306/en/model_doc/cvt#transformers.CvtConfig"),c(pS,"href","/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(uS,"href","/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(_S,"href","/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(bS,"href","/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaConfig"),c(vS,"href","/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(FS,"href","/docs/transformers/pr_17306/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(TS,"href","/docs/transformers/pr_17306/en/model_doc/deit#transformers.DeiTConfig"),c(MS,"href","/docs/transformers/pr_17306/en/model_doc/detr#transformers.DetrConfig"),c(ES,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertConfig"),c(CS,"href","/docs/transformers/pr_17306/en/model_doc/dpr#transformers.DPRConfig"),c(wS,"href","/docs/transformers/pr_17306/en/model_doc/dpt#transformers.DPTConfig"),c(AS,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraConfig"),c(LS,"href","/docs/transformers/pr_17306/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(yS,"href","/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertConfig"),c(xS,"href","/docs/transformers/pr_17306/en/model_doc/flava#transformers.FlavaConfig"),c($S,"href","/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetConfig"),c(kS,"href","/docs/transformers/pr_17306/en/model_doc/fsmt#transformers.FSMTConfig"),c(SS,"href","/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelConfig"),c(RS,"href","/docs/transformers/pr_17306/en/model_doc/glpn#transformers.GLPNConfig"),c(PS,"href","/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2Config"),c(BS,"href","/docs/transformers/pr_17306/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(IS,"href","/docs/transformers/pr_17306/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(NS,"href","/docs/transformers/pr_17306/en/model_doc/gptj#transformers.GPTJConfig"),c(qS,"href","/docs/transformers/pr_17306/en/model_doc/hubert#transformers.HubertConfig"),c(jS,"href","/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertConfig"),c(DS,"href","/docs/transformers/pr_17306/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(GS,"href","/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(OS,"href","/docs/transformers/pr_17306/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(VS,"href","/docs/transformers/pr_17306/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(XS,"href","/docs/transformers/pr_17306/en/model_doc/led#transformers.LEDConfig"),c(zS,"href","/docs/transformers/pr_17306/en/model_doc/levit#transformers.LevitConfig"),c(WS,"href","/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerConfig"),c(QS,"href","/docs/transformers/pr_17306/en/model_doc/longt5#transformers.LongT5Config"),c(HS,"href","/docs/transformers/pr_17306/en/model_doc/luke#transformers.LukeConfig"),c(US,"href","/docs/transformers/pr_17306/en/model_doc/lxmert#transformers.LxmertConfig"),c(JS,"href","/docs/transformers/pr_17306/en/model_doc/m2m_100#transformers.M2M100Config"),c(YS,"href","/docs/transformers/pr_17306/en/model_doc/marian#transformers.MarianConfig"),c(KS,"href","/docs/transformers/pr_17306/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(ZS,"href","/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartConfig"),c(eR,"href","/docs/transformers/pr_17306/en/model_doc/mctct#transformers.MCTCTConfig"),c(oR,"href","/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(rR,"href","/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(tR,"href","/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetConfig"),c(aR,"href","/docs/transformers/pr_17306/en/model_doc/mt5#transformers.MT5Config"),c(nR,"href","/docs/transformers/pr_17306/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(sR,"href","/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(lR,"href","/docs/transformers/pr_17306/en/model_doc/opt#transformers.OPTConfig"),c(iR,"href","/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.PegasusConfig"),c(dR,"href","/docs/transformers/pr_17306/en/model_doc/perceiver#transformers.PerceiverConfig"),c(cR,"href","/docs/transformers/pr_17306/en/model_doc/plbart#transformers.PLBartConfig"),c(fR,"href","/docs/transformers/pr_17306/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(mR,"href","/docs/transformers/pr_17306/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(gR,"href","/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(hR,"href","/docs/transformers/pr_17306/en/model_doc/rag#transformers.RagConfig"),c(pR,"href","/docs/transformers/pr_17306/en/model_doc/realm#transformers.RealmConfig"),c(uR,"href","/docs/transformers/pr_17306/en/model_doc/reformer#transformers.ReformerConfig"),c(_R,"href","/docs/transformers/pr_17306/en/model_doc/regnet#transformers.RegNetConfig"),c(bR,"href","/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertConfig"),c(vR,"href","/docs/transformers/pr_17306/en/model_doc/resnet#transformers.ResNetConfig"),c(FR,"href","/docs/transformers/pr_17306/en/model_doc/retribert#transformers.RetriBertConfig"),c(TR,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaConfig"),c(MR,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerConfig"),c(ER,"href","/docs/transformers/pr_17306/en/model_doc/segformer#transformers.SegformerConfig"),c(CR,"href","/docs/transformers/pr_17306/en/model_doc/sew#transformers.SEWConfig"),c(wR,"href","/docs/transformers/pr_17306/en/model_doc/sew-d#transformers.SEWDConfig"),c(AR,"href","/docs/transformers/pr_17306/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(LR,"href","/docs/transformers/pr_17306/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(yR,"href","/docs/transformers/pr_17306/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(xR,"href","/docs/transformers/pr_17306/en/model_doc/splinter#transformers.SplinterConfig"),c($R,"href","/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(kR,"href","/docs/transformers/pr_17306/en/model_doc/swin#transformers.SwinConfig"),c(SR,"href","/docs/transformers/pr_17306/en/model_doc/t5#transformers.T5Config"),c(RR,"href","/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasConfig"),c(PR,"href","/docs/transformers/pr_17306/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(BR,"href","/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(IR,"href","/docs/transformers/pr_17306/en/model_doc/trocr#transformers.TrOCRConfig"),c(NR,"href","/docs/transformers/pr_17306/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(qR,"href","/docs/transformers/pr_17306/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(jR,"href","/docs/transformers/pr_17306/en/model_doc/van#transformers.VanConfig"),c(DR,"href","/docs/transformers/pr_17306/en/model_doc/vilt#transformers.ViltConfig"),c(GR,"href","/docs/transformers/pr_17306/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(OR,"href","/docs/transformers/pr_17306/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(VR,"href","/docs/transformers/pr_17306/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(XR,"href","/docs/transformers/pr_17306/en/model_doc/vit#transformers.ViTConfig"),c(zR,"href","/docs/transformers/pr_17306/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(WR,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(QR,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(HR,"href","/docs/transformers/pr_17306/en/model_doc/wavlm#transformers.WavLMConfig"),c(UR,"href","/docs/transformers/pr_17306/en/model_doc/xglm#transformers.XGLMConfig"),c(JR,"href","/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMConfig"),c(YR,"href","/docs/transformers/pr_17306/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(KR,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(ZR,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(eP,"href","/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetConfig"),c(oP,"href","/docs/transformers/pr_17306/en/model_doc/yolos#transformers.YolosConfig"),c(rP,"href","/docs/transformers/pr_17306/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gg,"id","transformers.AutoTokenizer"),c(Gg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gg,"href","#transformers.AutoTokenizer"),c($i,"class","relative group"),c(tP,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(aP,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertTokenizer"),c(nP,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(sP,"href","/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartTokenizer"),c(lP,"href","/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartTokenizerFast"),c(iP,"href","/docs/transformers/pr_17306/en/model_doc/barthez#transformers.BarthezTokenizer"),c(dP,"href","/docs/transformers/pr_17306/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(cP,"href","/docs/transformers/pr_17306/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(fP,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertTokenizer"),c(mP,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertTokenizerFast"),c(gP,"href","/docs/transformers/pr_17306/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(hP,"href","/docs/transformers/pr_17306/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(pP,"href","/docs/transformers/pr_17306/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(uP,"href","/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(_P,"href","/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(bP,"href","/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(vP,"href","/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(FP,"href","/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(TP,"href","/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(MP,"href","/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(EP,"href","/docs/transformers/pr_17306/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(CP,"href","/docs/transformers/pr_17306/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(wP,"href","/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertTokenizer"),c(AP,"href","/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(LP,"href","/docs/transformers/pr_17306/en/model_doc/canine#transformers.CanineTokenizer"),c(yP,"href","/docs/transformers/pr_17306/en/model_doc/clip#transformers.CLIPTokenizer"),c(xP,"href","/docs/transformers/pr_17306/en/model_doc/clip#transformers.CLIPTokenizerFast"),c($P,"href","/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(kP,"href","/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(SP,"href","/docs/transformers/pr_17306/en/model_doc/cpm#transformers.CpmTokenizer"),c(RP,"href","/docs/transformers/pr_17306/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(PP,"href","/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(BP,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaTokenizer"),c(IP,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(NP,"href","/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaTokenizer"),c(qP,"href","/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(jP,"href","/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(DP,"href","/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(GP,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(OP,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(VP,"href","/docs/transformers/pr_17306/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(XP,"href","/docs/transformers/pr_17306/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(zP,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraTokenizer"),c(WP,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(QP,"href","/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(HP,"href","/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetTokenizer"),c(UP,"href","/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(JP,"href","/docs/transformers/pr_17306/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(YP,"href","/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelTokenizer"),c(KP,"href","/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eB,"href","/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(oB,"href","/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rB,"href","/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(tB,"href","/docs/transformers/pr_17306/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(aB,"href","/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nB,"href","/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(sB,"href","/docs/transformers/pr_17306/en/model_doc/herbert#transformers.HerbertTokenizer"),c(lB,"href","/docs/transformers/pr_17306/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(iB,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(dB,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cB,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fB,"href","/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(mB,"href","/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(gB,"href","/docs/transformers/pr_17306/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(hB,"href","/docs/transformers/pr_17306/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(pB,"href","/docs/transformers/pr_17306/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(uB,"href","/docs/transformers/pr_17306/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(_B,"href","/docs/transformers/pr_17306/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(bB,"href","/docs/transformers/pr_17306/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(vB,"href","/docs/transformers/pr_17306/en/model_doc/led#transformers.LEDTokenizer"),c(FB,"href","/docs/transformers/pr_17306/en/model_doc/led#transformers.LEDTokenizerFast"),c(TB,"href","/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerTokenizer"),c(MB,"href","/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(EB,"href","/docs/transformers/pr_17306/en/model_doc/mt5#transformers.T5Tokenizer"),c(CB,"href","/docs/transformers/pr_17306/en/model_doc/mt5#transformers.T5TokenizerFast"),c(wB,"href","/docs/transformers/pr_17306/en/model_doc/luke#transformers.LukeTokenizer"),c(AB,"href","/docs/transformers/pr_17306/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(LB,"href","/docs/transformers/pr_17306/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(yB,"href","/docs/transformers/pr_17306/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(xB,"href","/docs/transformers/pr_17306/en/model_doc/marian#transformers.MarianTokenizer"),c($B,"href","/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartTokenizer"),c(kB,"href","/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(SB,"href","/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(RB,"href","/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(PB,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertTokenizer"),c(BB,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertTokenizerFast"),c(IB,"href","/docs/transformers/pr_17306/en/model_doc/mluke#transformers.MLukeTokenizer"),c(NB,"href","/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(qB,"href","/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(jB,"href","/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(DB,"href","/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(GB,"href","/docs/transformers/pr_17306/en/model_doc/mt5#transformers.T5Tokenizer"),c(OB,"href","/docs/transformers/pr_17306/en/model_doc/mt5#transformers.T5TokenizerFast"),c(VB,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertTokenizer"),c(XB,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(zB,"href","/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(WB,"href","/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(QB,"href","/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(HB,"href","/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(UB,"href","/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(JB,"href","/docs/transformers/pr_17306/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(YB,"href","/docs/transformers/pr_17306/en/model_doc/phobert#transformers.PhobertTokenizer"),c(KB,"href","/docs/transformers/pr_17306/en/model_doc/plbart#transformers.PLBartTokenizer"),c(ZB,"href","/docs/transformers/pr_17306/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(eI,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertTokenizer"),c(oI,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertTokenizerFast"),c(rI,"href","/docs/transformers/pr_17306/en/model_doc/rag#transformers.RagTokenizer"),c(tI,"href","/docs/transformers/pr_17306/en/model_doc/realm#transformers.RealmTokenizer"),c(aI,"href","/docs/transformers/pr_17306/en/model_doc/realm#transformers.RealmTokenizerFast"),c(nI,"href","/docs/transformers/pr_17306/en/model_doc/reformer#transformers.ReformerTokenizer"),c(sI,"href","/docs/transformers/pr_17306/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(lI,"href","/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertTokenizer"),c(iI,"href","/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(dI,"href","/docs/transformers/pr_17306/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(cI,"href","/docs/transformers/pr_17306/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(fI,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaTokenizer"),c(mI,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(gI,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(hI,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(pI,"href","/docs/transformers/pr_17306/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(uI,"href","/docs/transformers/pr_17306/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(_I,"href","/docs/transformers/pr_17306/en/model_doc/splinter#transformers.SplinterTokenizer"),c(bI,"href","/docs/transformers/pr_17306/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(vI,"href","/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(FI,"href","/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(TI,"href","/docs/transformers/pr_17306/en/model_doc/mt5#transformers.T5Tokenizer"),c(MI,"href","/docs/transformers/pr_17306/en/model_doc/mt5#transformers.T5TokenizerFast"),c(EI,"href","/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasTokenizer"),c(CI,"href","/docs/transformers/pr_17306/en/model_doc/tapex#transformers.TapexTokenizer"),c(wI,"href","/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(AI,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertTokenizer"),c(LI,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertTokenizerFast"),c(yI,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertTokenizer"),c(xI,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertTokenizerFast"),c($I,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(kI,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(SI,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(RI,"href","/docs/transformers/pr_17306/en/model_doc/xglm#transformers.XGLMTokenizer"),c(PI,"href","/docs/transformers/pr_17306/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(BI,"href","/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMTokenizer"),c(II,"href","/docs/transformers/pr_17306/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(NI,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(qI,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(jI,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DI,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GI,"href","/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(OI,"href","/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(VI,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertTokenizer"),c(XI,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"id","transformers.AutoFeatureExtractor"),c(Eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eh,"href","#transformers.AutoFeatureExtractor"),c(ki,"class","relative group"),c(zI,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(WI,"href","/docs/transformers/pr_17306/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(QI,"href","/docs/transformers/pr_17306/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(HI,"href","/docs/transformers/pr_17306/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(UI,"href","/docs/transformers/pr_17306/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(JI,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(YI,"href","/docs/transformers/pr_17306/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(KI,"href","/docs/transformers/pr_17306/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(ZI,"href","/docs/transformers/pr_17306/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(eN,"href","/docs/transformers/pr_17306/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(oN,"href","/docs/transformers/pr_17306/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(rN,"href","/docs/transformers/pr_17306/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(tN,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(aN,"href","/docs/transformers/pr_17306/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(nN,"href","/docs/transformers/pr_17306/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(sN,"href","/docs/transformers/pr_17306/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(lN,"href","/docs/transformers/pr_17306/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(iN,"href","/docs/transformers/pr_17306/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(dN,"href","/docs/transformers/pr_17306/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(cN,"href","/docs/transformers/pr_17306/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(fN,"href","/docs/transformers/pr_17306/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(mN,"href","/docs/transformers/pr_17306/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gN,"href","/docs/transformers/pr_17306/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hN,"href","/docs/transformers/pr_17306/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(pN,"href","/docs/transformers/pr_17306/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(uN,"href","/docs/transformers/pr_17306/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(_N,"href","/docs/transformers/pr_17306/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bN,"href","/docs/transformers/pr_17306/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(vN,"href","/docs/transformers/pr_17306/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(FN,"href","/docs/transformers/pr_17306/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(TN,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(MN,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(EN,"href","/docs/transformers/pr_17306/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ap,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"id","transformers.AutoProcessor"),c(np,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(np,"href","#transformers.AutoProcessor"),c(Si,"class","relative group"),c(CN,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(wN,"href","/docs/transformers/pr_17306/en/model_doc/clip#transformers.CLIPProcessor"),c(AN,"href","/docs/transformers/pr_17306/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(LN,"href","/docs/transformers/pr_17306/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(yN,"href","/docs/transformers/pr_17306/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(xN,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($N,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kN,"href","/docs/transformers/pr_17306/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(SN,"href","/docs/transformers/pr_17306/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(RN,"href","/docs/transformers/pr_17306/en/model_doc/trocr#transformers.TrOCRProcessor"),c(PN,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BN,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(IN,"href","/docs/transformers/pr_17306/en/model_doc/vilt#transformers.ViltProcessor"),c(NN,"href","/docs/transformers/pr_17306/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(qN,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jN,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DN,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ap,"id","transformers.AutoModel"),c(Ap,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ap,"href","#transformers.AutoModel"),c(Pi,"class","relative group"),c(GN,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ON,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VN,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XN,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertModel"),c(zN,"href","/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartModel"),c(WN,"href","/docs/transformers/pr_17306/en/model_doc/beit#transformers.BeitModel"),c(QN,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertModel"),c(HN,"href","/docs/transformers/pr_17306/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(UN,"href","/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdModel"),c(JN,"href","/docs/transformers/pr_17306/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(YN,"href","/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(KN,"href","/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(ZN,"href","/docs/transformers/pr_17306/en/model_doc/bloom#transformers.BloomModel"),c(eq,"href","/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertModel"),c(oq,"href","/docs/transformers/pr_17306/en/model_doc/canine#transformers.CanineModel"),c(rq,"href","/docs/transformers/pr_17306/en/model_doc/clip#transformers.CLIPModel"),c(tq,"href","/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertModel"),c(aq,"href","/docs/transformers/pr_17306/en/model_doc/convnext#transformers.ConvNextModel"),c(nq,"href","/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.CTRLModel"),c(sq,"href","/docs/transformers/pr_17306/en/model_doc/cvt#transformers.CvtModel"),c(lq,"href","/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(iq,"href","/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(dq,"href","/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(cq,"href","/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaModel"),c(fq,"href","/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(mq,"href","/docs/transformers/pr_17306/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(gq,"href","/docs/transformers/pr_17306/en/model_doc/deit#transformers.DeiTModel"),c(hq,"href","/docs/transformers/pr_17306/en/model_doc/detr#transformers.DetrModel"),c(pq,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertModel"),c(uq,"href","/docs/transformers/pr_17306/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(_q,"href","/docs/transformers/pr_17306/en/model_doc/dpt#transformers.DPTModel"),c(bq,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraModel"),c(vq,"href","/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertModel"),c(Fq,"href","/docs/transformers/pr_17306/en/model_doc/flava#transformers.FlavaModel"),c(Tq,"href","/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetModel"),c(Mq,"href","/docs/transformers/pr_17306/en/model_doc/fsmt#transformers.FSMTModel"),c(Eq,"href","/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelModel"),c(Cq,"href","/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelBaseModel"),c(wq,"href","/docs/transformers/pr_17306/en/model_doc/glpn#transformers.GLPNModel"),c(Aq,"href","/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2Model"),c(Lq,"href","/docs/transformers/pr_17306/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(yq,"href","/docs/transformers/pr_17306/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(xq,"href","/docs/transformers/pr_17306/en/model_doc/gptj#transformers.GPTJModel"),c($q,"href","/docs/transformers/pr_17306/en/model_doc/hubert#transformers.HubertModel"),c(kq,"href","/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertModel"),c(Sq,"href","/docs/transformers/pr_17306/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Rq,"href","/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Pq,"href","/docs/transformers/pr_17306/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Bq,"href","/docs/transformers/pr_17306/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Iq,"href","/docs/transformers/pr_17306/en/model_doc/led#transformers.LEDModel"),c(Nq,"href","/docs/transformers/pr_17306/en/model_doc/levit#transformers.LevitModel"),c(qq,"href","/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerModel"),c(jq,"href","/docs/transformers/pr_17306/en/model_doc/longt5#transformers.LongT5Model"),c(Dq,"href","/docs/transformers/pr_17306/en/model_doc/luke#transformers.LukeModel"),c(Gq,"href","/docs/transformers/pr_17306/en/model_doc/lxmert#transformers.LxmertModel"),c(Oq,"href","/docs/transformers/pr_17306/en/model_doc/m2m_100#transformers.M2M100Model"),c(Vq,"href","/docs/transformers/pr_17306/en/model_doc/marian#transformers.MarianModel"),c(Xq,"href","/docs/transformers/pr_17306/en/model_doc/maskformer#transformers.MaskFormerModel"),c(zq,"href","/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartModel"),c(Wq,"href","/docs/transformers/pr_17306/en/model_doc/mctct#transformers.MCTCTModel"),c(Qq,"href","/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Hq,"href","/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Uq,"href","/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetModel"),c(Jq,"href","/docs/transformers/pr_17306/en/model_doc/mt5#transformers.MT5Model"),c(Yq,"href","/docs/transformers/pr_17306/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Kq,"href","/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Zq,"href","/docs/transformers/pr_17306/en/model_doc/opt#transformers.OPTModel"),c(ej,"href","/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.PegasusModel"),c(oj,"href","/docs/transformers/pr_17306/en/model_doc/perceiver#transformers.PerceiverModel"),c(rj,"href","/docs/transformers/pr_17306/en/model_doc/plbart#transformers.PLBartModel"),c(tj,"href","/docs/transformers/pr_17306/en/model_doc/poolformer#transformers.PoolFormerModel"),c(aj,"href","/docs/transformers/pr_17306/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(nj,"href","/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertModel"),c(sj,"href","/docs/transformers/pr_17306/en/model_doc/reformer#transformers.ReformerModel"),c(lj,"href","/docs/transformers/pr_17306/en/model_doc/regnet#transformers.RegNetModel"),c(ij,"href","/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertModel"),c(dj,"href","/docs/transformers/pr_17306/en/model_doc/resnet#transformers.ResNetModel"),c(cj,"href","/docs/transformers/pr_17306/en/model_doc/retribert#transformers.RetriBertModel"),c(fj,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaModel"),c(mj,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerModel"),c(gj,"href","/docs/transformers/pr_17306/en/model_doc/segformer#transformers.SegformerModel"),c(hj,"href","/docs/transformers/pr_17306/en/model_doc/sew#transformers.SEWModel"),c(pj,"href","/docs/transformers/pr_17306/en/model_doc/sew-d#transformers.SEWDModel"),c(uj,"href","/docs/transformers/pr_17306/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(_j,"href","/docs/transformers/pr_17306/en/model_doc/splinter#transformers.SplinterModel"),c(bj,"href","/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(vj,"href","/docs/transformers/pr_17306/en/model_doc/swin#transformers.SwinModel"),c(Fj,"href","/docs/transformers/pr_17306/en/model_doc/t5#transformers.T5Model"),c(Tj,"href","/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasModel"),c(Mj,"href","/docs/transformers/pr_17306/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Ej,"href","/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Cj,"href","/docs/transformers/pr_17306/en/model_doc/unispeech#transformers.UniSpeechModel"),c(wj,"href","/docs/transformers/pr_17306/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Aj,"href","/docs/transformers/pr_17306/en/model_doc/van#transformers.VanModel"),c(Lj,"href","/docs/transformers/pr_17306/en/model_doc/vilt#transformers.ViltModel"),c(yj,"href","/docs/transformers/pr_17306/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(xj,"href","/docs/transformers/pr_17306/en/model_doc/visual_bert#transformers.VisualBertModel"),c($j,"href","/docs/transformers/pr_17306/en/model_doc/vit#transformers.ViTModel"),c(kj,"href","/docs/transformers/pr_17306/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Sj,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Rj,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Pj,"href","/docs/transformers/pr_17306/en/model_doc/wavlm#transformers.WavLMModel"),c(Bj,"href","/docs/transformers/pr_17306/en/model_doc/xglm#transformers.XGLMModel"),c(Ij,"href","/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMModel"),c(Nj,"href","/docs/transformers/pr_17306/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(qj,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(jj,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Dj,"href","/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetModel"),c(Gj,"href","/docs/transformers/pr_17306/en/model_doc/yolos#transformers.YolosModel"),c(Oj,"href","/docs/transformers/pr_17306/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L_,"id","transformers.AutoModelForPreTraining"),c(L_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L_,"href","#transformers.AutoModelForPreTraining"),c(Ni,"class","relative group"),c(Vj,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xj,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zj,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wj,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Qj,"href","/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertForPreTraining"),c(Uj,"href","/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Jj,"href","/docs/transformers/pr_17306/en/model_doc/bloom#transformers.BloomForCausalLM"),c(Yj,"href","/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Zj,"href","/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(eD,"href","/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(oD,"href","/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(rD,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(tD,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraForPreTraining"),c(aD,"href","/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(nD,"href","/docs/transformers/pr_17306/en/model_doc/flava#transformers.FlavaForPreTraining"),c(sD,"href","/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetForPreTraining"),c(lD,"href","/docs/transformers/pr_17306/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(iD,"href","/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(dD,"href","/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(cD,"href","/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(fD,"href","/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(mD,"href","/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(gD,"href","/docs/transformers/pr_17306/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(hD,"href","/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(pD,"href","/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(uD,"href","/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(_D,"href","/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(bD,"href","/docs/transformers/pr_17306/en/model_doc/retribert#transformers.RetriBertModel"),c(vD,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(FD,"href","/docs/transformers/pr_17306/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(TD,"href","/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(MD,"href","/docs/transformers/pr_17306/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(CD,"href","/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(wD,"href","/docs/transformers/pr_17306/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(AD,"href","/docs/transformers/pr_17306/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(LD,"href","/docs/transformers/pr_17306/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(yD,"href","/docs/transformers/pr_17306/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(xD,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c($D,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(kD,"href","/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(SD,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(RD,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(PD,"href","/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F1,"id","transformers.AutoModelForCausalLM"),c(F1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F1,"href","#transformers.AutoModelForCausalLM"),c(Di,"class","relative group"),c(BD,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ID,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ND,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qD,"href","/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartForCausalLM"),c(jD,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertLMHeadModel"),c(DD,"href","/docs/transformers/pr_17306/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(GD,"href","/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(OD,"href","/docs/transformers/pr_17306/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(VD,"href","/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(XD,"href","/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(zD,"href","/docs/transformers/pr_17306/en/model_doc/bloom#transformers.BloomForCausalLM"),c(WD,"href","/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(QD,"href","/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(HD,"href","/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(UD,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraForCausalLM"),c(JD,"href","/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(YD,"href","/docs/transformers/pr_17306/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(KD,"href","/docs/transformers/pr_17306/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(ZD,"href","/docs/transformers/pr_17306/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(eG,"href","/docs/transformers/pr_17306/en/model_doc/marian#transformers.MarianForCausalLM"),c(oG,"href","/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartForCausalLM"),c(rG,"href","/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(tG,"href","/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(aG,"href","/docs/transformers/pr_17306/en/model_doc/opt#transformers.OPTForCausalLM"),c(nG,"href","/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(sG,"href","/docs/transformers/pr_17306/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(lG,"href","/docs/transformers/pr_17306/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(iG,"href","/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(dG,"href","/docs/transformers/pr_17306/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(cG,"href","/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(fG,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(mG,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(gG,"href","/docs/transformers/pr_17306/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(hG,"href","/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(pG,"href","/docs/transformers/pr_17306/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(uG,"href","/docs/transformers/pr_17306/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(_G,"href","/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(bG,"href","/docs/transformers/pr_17306/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(vG,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(FG,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(TG,"href","/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i2,"id","transformers.AutoModelForMaskedLM"),c(i2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i2,"href","#transformers.AutoModelForMaskedLM"),c(Vi,"class","relative group"),c(MG,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EG,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CG,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wG,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(AG,"href","/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(LG,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertForMaskedLM"),c(yG,"href","/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(xG,"href","/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c($G,"href","/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(kG,"href","/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(SG,"href","/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(RG,"href","/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(PG,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(BG,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(IG,"href","/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(NG,"href","/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(qG,"href","/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(jG,"href","/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(DG,"href","/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(GG,"href","/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(OG,"href","/docs/transformers/pr_17306/en/model_doc/luke#transformers.LukeForMaskedLM"),c(VG,"href","/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(XG,"href","/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(zG,"href","/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(WG,"href","/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(QG,"href","/docs/transformers/pr_17306/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(HG,"href","/docs/transformers/pr_17306/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(UG,"href","/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(JG,"href","/docs/transformers/pr_17306/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(YG,"href","/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(KG,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(ZG,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(eO,"href","/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(oO,"href","/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(rO,"href","/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(tO,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(aO,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(nO,"href","/docs/transformers/pr_17306/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H2,"id","transformers.AutoModelForSeq2SeqLM"),c(H2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Wi,"class","relative group"),c(sO,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lO,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iO,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dO,"href","/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(cO,"href","/docs/transformers/pr_17306/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(fO,"href","/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(mO,"href","/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(gO,"href","/docs/transformers/pr_17306/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(hO,"href","/docs/transformers/pr_17306/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(pO,"href","/docs/transformers/pr_17306/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(uO,"href","/docs/transformers/pr_17306/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(_O,"href","/docs/transformers/pr_17306/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(bO,"href","/docs/transformers/pr_17306/en/model_doc/marian#transformers.MarianMTModel"),c(vO,"href","/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(FO,"href","/docs/transformers/pr_17306/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(TO,"href","/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(MO,"href","/docs/transformers/pr_17306/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(EO,"href","/docs/transformers/pr_17306/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(CO,"href","/docs/transformers/pr_17306/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(wO,"href","/docs/transformers/pr_17306/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pb,"id","transformers.AutoModelForSequenceClassification"),c(pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pb,"href","#transformers.AutoModelForSequenceClassification"),c(Ui,"class","relative group"),c(AO,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LO,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yO,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xO,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c($O,"href","/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartForSequenceClassification"),c(kO,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertForSequenceClassification"),c(SO,"href","/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(RO,"href","/docs/transformers/pr_17306/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(PO,"href","/docs/transformers/pr_17306/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(BO,"href","/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(IO,"href","/docs/transformers/pr_17306/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(NO,"href","/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(qO,"href","/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(jO,"href","/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(DO,"href","/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(GO,"href","/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(OO,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(VO,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(XO,"href","/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(zO,"href","/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(WO,"href","/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(QO,"href","/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(HO,"href","/docs/transformers/pr_17306/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(UO,"href","/docs/transformers/pr_17306/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(JO,"href","/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(YO,"href","/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(KO,"href","/docs/transformers/pr_17306/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_17306/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(eV,"href","/docs/transformers/pr_17306/en/model_doc/led#transformers.LEDForSequenceClassification"),c(oV,"href","/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(rV,"href","/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(tV,"href","/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(aV,"href","/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17306/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17306/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(dV,"href","/docs/transformers/pr_17306/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17306/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17306/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gv,"id","transformers.AutoModelForMultipleChoice"),c(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gv,"href","#transformers.AutoModelForMultipleChoice"),c(Ki,"class","relative group"),c(EV,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CV,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wV,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AV,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(LV,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertForMultipleChoice"),c(yV,"href","/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(xV,"href","/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c($V,"href","/docs/transformers/pr_17306/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(kV,"href","/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(SV,"href","/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(RV,"href","/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(PV,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(BV,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(IV,"href","/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(NV,"href","/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(qV,"href","/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(jV,"href","/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(DV,"href","/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(GV,"href","/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(OV,"href","/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(VV,"href","/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(XV,"href","/docs/transformers/pr_17306/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(zV,"href","/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(WV,"href","/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(QV,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(HV,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(UV,"href","/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(JV,"href","/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(YV,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(KV,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(ZV,"href","/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(eX,"href","/docs/transformers/pr_17306/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wv,"id","transformers.AutoModelForNextSentencePrediction"),c(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wv,"href","#transformers.AutoModelForNextSentencePrediction"),c(od,"class","relative group"),c(oX,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rX,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tX,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aX,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(nX,"href","/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(sX,"href","/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(lX,"href","/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(iX,"href","/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o3,"id","transformers.AutoModelForTokenClassification"),c(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o3,"href","#transformers.AutoModelForTokenClassification"),c(ad,"class","relative group"),c(dX,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cX,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fX,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mX,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(gX,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertForTokenClassification"),c(hX,"href","/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(pX,"href","/docs/transformers/pr_17306/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(uX,"href","/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(_X,"href","/docs/transformers/pr_17306/en/model_doc/canine#transformers.CanineForTokenClassification"),c(bX,"href","/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(vX,"href","/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(FX,"href","/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(TX,"href","/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(MX,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(EX,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(CX,"href","/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(wX,"href","/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(AX,"href","/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(LX,"href","/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(yX,"href","/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(xX,"href","/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c($X,"href","/docs/transformers/pr_17306/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(kX,"href","/docs/transformers/pr_17306/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(SX,"href","/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(RX,"href","/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(PX,"href","/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(BX,"href","/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(IX,"href","/docs/transformers/pr_17306/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(NX,"href","/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(qX,"href","/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(jX,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(DX,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(GX,"href","/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(OX,"href","/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(VX,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(XX,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(zX,"href","/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(WX,"href","/docs/transformers/pr_17306/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D3,"id","transformers.AutoModelForQuestionAnswering"),c(D3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D3,"href","#transformers.AutoModelForQuestionAnswering"),c(ld,"class","relative group"),c(QX,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(YX,"href","/docs/transformers/pr_17306/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(KX,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(ZX,"href","/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(ez,"href","/docs/transformers/pr_17306/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(oz,"href","/docs/transformers/pr_17306/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(rz,"href","/docs/transformers/pr_17306/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(tz,"href","/docs/transformers/pr_17306/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(az,"href","/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(nz,"href","/docs/transformers/pr_17306/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(sz,"href","/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(lz,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(iz,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(dz,"href","/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(cz,"href","/docs/transformers/pr_17306/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(fz,"href","/docs/transformers/pr_17306/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(mz,"href","/docs/transformers/pr_17306/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(gz,"href","/docs/transformers/pr_17306/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(hz,"href","/docs/transformers/pr_17306/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(pz,"href","/docs/transformers/pr_17306/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(uz,"href","/docs/transformers/pr_17306/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(_z,"href","/docs/transformers/pr_17306/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(bz,"href","/docs/transformers/pr_17306/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(vz,"href","/docs/transformers/pr_17306/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(Fz,"href","/docs/transformers/pr_17306/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(Tz,"href","/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(Mz,"href","/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(Ez,"href","/docs/transformers/pr_17306/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(Cz,"href","/docs/transformers/pr_17306/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(wz,"href","/docs/transformers/pr_17306/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(Az,"href","/docs/transformers/pr_17306/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(Lz,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(yz,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(xz,"href","/docs/transformers/pr_17306/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c($z,"href","/docs/transformers/pr_17306/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_17306/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(Sz,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(Rz,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(Pz,"href","/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(Bz,"href","/docs/transformers/pr_17306/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($0,"id","transformers.AutoModelForTableQuestionAnswering"),c($0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($0,"href","#transformers.AutoModelForTableQuestionAnswering"),c(cd,"class","relative group"),c(Iz,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nz,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qz,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jz,"href","/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B0,"id","transformers.AutoModelForImageClassification"),c(B0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B0,"href","#transformers.AutoModelForImageClassification"),c(gd,"class","relative group"),c(Dz,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gz,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oz,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vz,"href","/docs/transformers/pr_17306/en/model_doc/beit#transformers.BeitForImageClassification"),c(Xz,"href","/docs/transformers/pr_17306/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(zz,"href","/docs/transformers/pr_17306/en/model_doc/cvt#transformers.CvtForImageClassification"),c(Wz,"href","/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(Qz,"href","/docs/transformers/pr_17306/en/model_doc/deit#transformers.DeiTForImageClassification"),c(Hz,"href","/docs/transformers/pr_17306/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(Uz,"href","/docs/transformers/pr_17306/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(Jz,"href","/docs/transformers/pr_17306/en/model_doc/levit#transformers.LevitForImageClassification"),c(Yz,"href","/docs/transformers/pr_17306/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(Kz,"href","/docs/transformers/pr_17306/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(Zz,"href","/docs/transformers/pr_17306/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(eW,"href","/docs/transformers/pr_17306/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(oW,"href","/docs/transformers/pr_17306/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(rW,"href","/docs/transformers/pr_17306/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(tW,"href","/docs/transformers/pr_17306/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(aW,"href","/docs/transformers/pr_17306/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(nW,"href","/docs/transformers/pr_17306/en/model_doc/swin#transformers.SwinForImageClassification"),c(sW,"href","/docs/transformers/pr_17306/en/model_doc/van#transformers.VanForImageClassification"),c(lW,"href","/docs/transformers/pr_17306/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y0,"id","transformers.AutoModelForVision2Seq"),c(Y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y0,"href","#transformers.AutoModelForVision2Seq"),c(ud,"class","relative group"),c(iW,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dW,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cW,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fW,"href","/docs/transformers/pr_17306/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rF,"id","transformers.AutoModelForVisualQuestionAnswering"),c(rF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rF,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(vd,"class","relative group"),c(mW,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gW,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hW,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pW,"href","/docs/transformers/pr_17306/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lF,"id","transformers.AutoModelForAudioClassification"),c(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lF,"href","#transformers.AutoModelForAudioClassification"),c(Md,"class","relative group"),c(uW,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bW,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vW,"href","/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(FW,"href","/docs/transformers/pr_17306/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(TW,"href","/docs/transformers/pr_17306/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(MW,"href","/docs/transformers/pr_17306/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(EW,"href","/docs/transformers/pr_17306/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(CW,"href","/docs/transformers/pr_17306/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(wW,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(AW,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(LW,"href","/docs/transformers/pr_17306/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FF,"id","transformers.AutoModelForAudioFrameClassification"),c(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FF,"href","#transformers.AutoModelForAudioFrameClassification"),c(wd,"class","relative group"),c(yW,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xW,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($W,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kW,"href","/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(SW,"href","/docs/transformers/pr_17306/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(RW,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(PW,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(BW,"href","/docs/transformers/pr_17306/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xF,"id","transformers.AutoModelForCTC"),c(xF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xF,"href","#transformers.AutoModelForCTC"),c(yd,"class","relative group"),c(IW,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NW,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qW,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jW,"href","/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(DW,"href","/docs/transformers/pr_17306/en/model_doc/hubert#transformers.HubertForCTC"),c(GW,"href","/docs/transformers/pr_17306/en/model_doc/mctct#transformers.MCTCTForCTC"),c(OW,"href","/docs/transformers/pr_17306/en/model_doc/sew#transformers.SEWForCTC"),c(VW,"href","/docs/transformers/pr_17306/en/model_doc/sew-d#transformers.SEWDForCTC"),c(XW,"href","/docs/transformers/pr_17306/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(zW,"href","/docs/transformers/pr_17306/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(WW,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(QW,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(HW,"href","/docs/transformers/pr_17306/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(kd,"class","relative group"),c(UW,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JW,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YW,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KW,"href","/docs/transformers/pr_17306/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(ZW,"href","/docs/transformers/pr_17306/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForAudioXVector"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForAudioXVector"),c(Pd,"class","relative group"),c(eQ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oQ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rQ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tQ,"href","/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(aQ,"href","/docs/transformers/pr_17306/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(nQ,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(sQ,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(lQ,"href","/docs/transformers/pr_17306/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a6,"id","transformers.AutoModelForMaskedImageModeling"),c(a6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a6,"href","#transformers.AutoModelForMaskedImageModeling"),c(Nd,"class","relative group"),c(iQ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dQ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cQ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fQ,"href","/docs/transformers/pr_17306/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(mQ,"href","/docs/transformers/pr_17306/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(gQ,"href","/docs/transformers/pr_17306/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f6,"id","transformers.AutoModelForObjectDetection"),c(f6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f6,"href","#transformers.AutoModelForObjectDetection"),c(Gd,"class","relative group"),c(hQ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pQ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uQ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Q,"href","/docs/transformers/pr_17306/en/model_doc/detr#transformers.DetrForObjectDetection"),c(bQ,"href","/docs/transformers/pr_17306/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_6,"id","transformers.AutoModelForImageSegmentation"),c(_6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_6,"href","#transformers.AutoModelForImageSegmentation"),c(Xd,"class","relative group"),c(vQ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FQ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/pr_17306/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M6,"id","transformers.AutoModelForSemanticSegmentation"),c(M6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M6,"href","#transformers.AutoModelForSemanticSegmentation"),c(Qd,"class","relative group"),c(EQ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CQ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wQ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AQ,"href","/docs/transformers/pr_17306/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(LQ,"href","/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(yQ,"href","/docs/transformers/pr_17306/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(xQ,"href","/docs/transformers/pr_17306/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($6,"id","transformers.AutoModelForInstanceSegmentation"),c($6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($6,"href","#transformers.AutoModelForInstanceSegmentation"),c(Jd,"class","relative group"),c($Q,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kQ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SQ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RQ,"href","/docs/transformers/pr_17306/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B6,"id","transformers.TFAutoModel"),c(B6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B6,"href","#transformers.TFAutoModel"),c(Zd,"class","relative group"),c(PQ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BQ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IQ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NQ,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.TFAlbertModel"),c(qQ,"href","/docs/transformers/pr_17306/en/model_doc/bart#transformers.TFBartModel"),c(jQ,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.TFBertModel"),c(DQ,"href","/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(GQ,"href","/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(OQ,"href","/docs/transformers/pr_17306/en/model_doc/camembert#transformers.TFCamembertModel"),c(VQ,"href","/docs/transformers/pr_17306/en/model_doc/clip#transformers.TFCLIPModel"),c(XQ,"href","/docs/transformers/pr_17306/en/model_doc/convbert#transformers.TFConvBertModel"),c(zQ,"href","/docs/transformers/pr_17306/en/model_doc/convnext#transformers.TFConvNextModel"),c(WQ,"href","/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.TFCTRLModel"),c(QQ,"href","/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(HQ,"href","/docs/transformers/pr_17306/en/model_doc/deberta#transformers.TFDebertaModel"),c(UQ,"href","/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(JQ,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(YQ,"href","/docs/transformers/pr_17306/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(KQ,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.TFElectraModel"),c(ZQ,"href","/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(eH,"href","/docs/transformers/pr_17306/en/model_doc/funnel#transformers.TFFunnelModel"),c(oH,"href","/docs/transformers/pr_17306/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(rH,"href","/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.TFGPT2Model"),c(tH,"href","/docs/transformers/pr_17306/en/model_doc/gptj#transformers.TFGPTJModel"),c(aH,"href","/docs/transformers/pr_17306/en/model_doc/hubert#transformers.TFHubertModel"),c(nH,"href","/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(sH,"href","/docs/transformers/pr_17306/en/model_doc/led#transformers.TFLEDModel"),c(lH,"href","/docs/transformers/pr_17306/en/model_doc/longformer#transformers.TFLongformerModel"),c(iH,"href","/docs/transformers/pr_17306/en/model_doc/lxmert#transformers.TFLxmertModel"),c(dH,"href","/docs/transformers/pr_17306/en/model_doc/marian#transformers.TFMarianModel"),c(cH,"href","/docs/transformers/pr_17306/en/model_doc/mbart#transformers.TFMBartModel"),c(fH,"href","/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(mH,"href","/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.TFMPNetModel"),c(gH,"href","/docs/transformers/pr_17306/en/model_doc/mt5#transformers.TFMT5Model"),c(hH,"href","/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(pH,"href","/docs/transformers/pr_17306/en/model_doc/opt#transformers.TFOPTModel"),c(uH,"href","/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.TFPegasusModel"),c(_H,"href","/docs/transformers/pr_17306/en/model_doc/rembert#transformers.TFRemBertModel"),c(bH,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.TFRobertaModel"),c(vH,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.TFRoFormerModel"),c(FH,"href","/docs/transformers/pr_17306/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(TH,"href","/docs/transformers/pr_17306/en/model_doc/swin#transformers.TFSwinModel"),c(MH,"href","/docs/transformers/pr_17306/en/model_doc/t5#transformers.TFT5Model"),c(EH,"href","/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TFTapasModel"),c(CH,"href","/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(wH,"href","/docs/transformers/pr_17306/en/model_doc/vit#transformers.TFViTModel"),c(AH,"href","/docs/transformers/pr_17306/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(LH,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(yH,"href","/docs/transformers/pr_17306/en/model_doc/xlm#transformers.TFXLMModel"),c(xH,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c($H,"href","/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($T,"id","transformers.TFAutoModelForPreTraining"),c($T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($T,"href","#transformers.TFAutoModelForPreTraining"),c(rc,"class","relative group"),c(kH,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(BH,"href","/docs/transformers/pr_17306/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(IH,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.TFBertForPreTraining"),c(NH,"href","/docs/transformers/pr_17306/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(qH,"href","/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(jH,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(DH,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(GH,"href","/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(OH,"href","/docs/transformers/pr_17306/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(VH,"href","/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(XH,"href","/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(zH,"href","/docs/transformers/pr_17306/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(WH,"href","/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(QH,"href","/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(HH,"href","/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(UH,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(JH,"href","/docs/transformers/pr_17306/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(YH,"href","/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(KH,"href","/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(ZH,"href","/docs/transformers/pr_17306/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(eU,"href","/docs/transformers/pr_17306/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oU,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(rU,"href","/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r7,"id","transformers.TFAutoModelForCausalLM"),c(r7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r7,"href","#transformers.TFAutoModelForCausalLM"),c(nc,"class","relative group"),c(tU,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aU,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nU,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sU,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(lU,"href","/docs/transformers/pr_17306/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(iU,"href","/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(dU,"href","/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(cU,"href","/docs/transformers/pr_17306/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(fU,"href","/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(mU,"href","/docs/transformers/pr_17306/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(gU,"href","/docs/transformers/pr_17306/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(hU,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(pU,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(uU,"href","/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(_U,"href","/docs/transformers/pr_17306/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(bU,"href","/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b7,"id","transformers.TFAutoModelForImageClassification"),c(b7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b7,"href","#transformers.TFAutoModelForImageClassification"),c(ic,"class","relative group"),c(vU,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FU,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TU,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MU,"href","/docs/transformers/pr_17306/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(EU,"href","/docs/transformers/pr_17306/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(CU,"href","/docs/transformers/pr_17306/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(wU,"href","/docs/transformers/pr_17306/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w7,"id","transformers.TFAutoModelForMaskedLM"),c(w7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w7,"href","#transformers.TFAutoModelForMaskedLM"),c(fc,"class","relative group"),c(AU,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LU,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yU,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xU,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c($U,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(kU,"href","/docs/transformers/pr_17306/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(SU,"href","/docs/transformers/pr_17306/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(RU,"href","/docs/transformers/pr_17306/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(PU,"href","/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(BU,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(IU,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(NU,"href","/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(qU,"href","/docs/transformers/pr_17306/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(jU,"href","/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(DU,"href","/docs/transformers/pr_17306/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(GU,"href","/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(OU,"href","/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(VU,"href","/docs/transformers/pr_17306/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(XU,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(zU,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(WU,"href","/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(QU,"href","/docs/transformers/pr_17306/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(HU,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(H7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(hc,"class","relative group"),c(UU,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/pr_17306/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(ZU,"href","/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(eJ,"href","/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(oJ,"href","/docs/transformers/pr_17306/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(rJ,"href","/docs/transformers/pr_17306/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(tJ,"href","/docs/transformers/pr_17306/en/model_doc/marian#transformers.TFMarianMTModel"),c(aJ,"href","/docs/transformers/pr_17306/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(nJ,"href","/docs/transformers/pr_17306/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(sJ,"href","/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(lJ,"href","/docs/transformers/pr_17306/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lM,"id","transformers.TFAutoModelForSequenceClassification"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.TFAutoModelForSequenceClassification"),c(_c,"class","relative group"),c(iJ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dJ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cJ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fJ,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(mJ,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(gJ,"href","/docs/transformers/pr_17306/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(hJ,"href","/docs/transformers/pr_17306/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(pJ,"href","/docs/transformers/pr_17306/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(uJ,"href","/docs/transformers/pr_17306/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(_J,"href","/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(bJ,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(vJ,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(FJ,"href","/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(TJ,"href","/docs/transformers/pr_17306/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(MJ,"href","/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(EJ,"href","/docs/transformers/pr_17306/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(CJ,"href","/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(wJ,"href","/docs/transformers/pr_17306/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(AJ,"href","/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(LJ,"href","/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(yJ,"href","/docs/transformers/pr_17306/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(xJ,"href","/docs/transformers/pr_17306/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c($J,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(kJ,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(SJ,"href","/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(RJ,"href","/docs/transformers/pr_17306/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(PJ,"href","/docs/transformers/pr_17306/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(BJ,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(IJ,"href","/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IM,"id","transformers.TFAutoModelForMultipleChoice"),c(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IM,"href","#transformers.TFAutoModelForMultipleChoice"),c(Fc,"class","relative group"),c(NJ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qJ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(GJ,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(OJ,"href","/docs/transformers/pr_17306/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(VJ,"href","/docs/transformers/pr_17306/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(XJ,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(zJ,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(WJ,"href","/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(QJ,"href","/docs/transformers/pr_17306/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(HJ,"href","/docs/transformers/pr_17306/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(UJ,"href","/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(JJ,"href","/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(YJ,"href","/docs/transformers/pr_17306/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(KJ,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(ZJ,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(eY,"href","/docs/transformers/pr_17306/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(oY,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(rY,"href","/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Ec,"class","relative group"),c(tY,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aY,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nY,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sY,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(lY,"href","/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(l4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Ac,"class","relative group"),c(iY,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dY,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cY,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/pr_17306/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f4,"id","transformers.TFAutoModelForTokenClassification"),c(f4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f4,"href","#transformers.TFAutoModelForTokenClassification"),c(xc,"class","relative group"),c(mY,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gY,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hY,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(uY,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(_Y,"href","/docs/transformers/pr_17306/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(bY,"href","/docs/transformers/pr_17306/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(vY,"href","/docs/transformers/pr_17306/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(FY,"href","/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(TY,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(MY,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(EY,"href","/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(CY,"href","/docs/transformers/pr_17306/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(wY,"href","/docs/transformers/pr_17306/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(AY,"href","/docs/transformers/pr_17306/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(LY,"href","/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(yY,"href","/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(xY,"href","/docs/transformers/pr_17306/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c($Y,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(kY,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(SY,"href","/docs/transformers/pr_17306/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(RY,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(PY,"href","/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P4,"id","transformers.TFAutoModelForQuestionAnswering"),c(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Sc,"class","relative group"),c(BY,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IY,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NY,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qY,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(jY,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(DY,"href","/docs/transformers/pr_17306/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(GY,"href","/docs/transformers/pr_17306/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(OY,"href","/docs/transformers/pr_17306/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(VY,"href","/docs/transformers/pr_17306/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(XY,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(zY,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(WY,"href","/docs/transformers/pr_17306/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(QY,"href","/docs/transformers/pr_17306/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(HY,"href","/docs/transformers/pr_17306/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(UY,"href","/docs/transformers/pr_17306/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(JY,"href","/docs/transformers/pr_17306/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(YY,"href","/docs/transformers/pr_17306/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(KY,"href","/docs/transformers/pr_17306/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(ZY,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(oK,"href","/docs/transformers/pr_17306/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(rK,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(tK,"href","/docs/transformers/pr_17306/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tE,"id","transformers.TFAutoModelForVision2Seq"),c(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tE,"href","#transformers.TFAutoModelForVision2Seq"),c(Bc,"class","relative group"),c(aK,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nK,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sK,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lK,"href","/docs/transformers/pr_17306/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(qc,"class","relative group"),c(iK,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dK,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cK,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fK,"href","/docs/transformers/pr_17306/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fE,"id","transformers.FlaxAutoModel"),c(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fE,"href","#transformers.FlaxAutoModel"),c(Gc,"class","relative group"),c(mK,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gK,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hK,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.FlaxAlbertModel"),c(uK,"href","/docs/transformers/pr_17306/en/model_doc/bart#transformers.FlaxBartModel"),c(_K,"href","/docs/transformers/pr_17306/en/model_doc/beit#transformers.FlaxBeitModel"),c(bK,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.FlaxBertModel"),c(vK,"href","/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(FK,"href","/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(TK,"href","/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(MK,"href","/docs/transformers/pr_17306/en/model_doc/clip#transformers.FlaxCLIPModel"),c(EK,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(CK,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.FlaxElectraModel"),c(wK,"href","/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(AK,"href","/docs/transformers/pr_17306/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(LK,"href","/docs/transformers/pr_17306/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(yK,"href","/docs/transformers/pr_17306/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(xK,"href","/docs/transformers/pr_17306/en/model_doc/marian#transformers.FlaxMarianModel"),c($K,"href","/docs/transformers/pr_17306/en/model_doc/mbart#transformers.FlaxMBartModel"),c(kK,"href","/docs/transformers/pr_17306/en/model_doc/mt5#transformers.FlaxMT5Model"),c(SK,"href","/docs/transformers/pr_17306/en/model_doc/opt#transformers.FlaxOPTModel"),c(RK,"href","/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(PK,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(BK,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(IK,"href","/docs/transformers/pr_17306/en/model_doc/t5#transformers.FlaxT5Model"),c(NK,"href","/docs/transformers/pr_17306/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(qK,"href","/docs/transformers/pr_17306/en/model_doc/vit#transformers.FlaxViTModel"),c(jK,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(DK,"href","/docs/transformers/pr_17306/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(GK,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GE,"id","transformers.FlaxAutoModelForCausalLM"),c(GE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Xc,"class","relative group"),c(OK,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VK,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XK,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zK,"href","/docs/transformers/pr_17306/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(WK,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(QK,"href","/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(HK,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(UK,"href","/docs/transformers/pr_17306/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(JK,"href","/docs/transformers/pr_17306/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(YK,"href","/docs/transformers/pr_17306/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(KK,"href","/docs/transformers/pr_17306/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(ZK,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(eZ,"href","/docs/transformers/pr_17306/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.FlaxAutoModelForPreTraining"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Qc,"class","relative group"),c(oZ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rZ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tZ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aZ,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(nZ,"href","/docs/transformers/pr_17306/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(sZ,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(lZ,"href","/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(iZ,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(dZ,"href","/docs/transformers/pr_17306/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(cZ,"href","/docs/transformers/pr_17306/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(fZ,"href","/docs/transformers/pr_17306/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(mZ,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(gZ,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(hZ,"href","/docs/transformers/pr_17306/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(pZ,"href","/docs/transformers/pr_17306/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(uZ,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uC,"id","transformers.FlaxAutoModelForMaskedLM"),c(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Jc,"class","relative group"),c(_Z,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bZ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vZ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FZ,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(TZ,"href","/docs/transformers/pr_17306/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(MZ,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(EZ,"href","/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(CZ,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(wZ,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(AZ,"href","/docs/transformers/pr_17306/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(LZ,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(yZ,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(xZ,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(xC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Zc,"class","relative group"),c($Z,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kZ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SZ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RZ,"href","/docs/transformers/pr_17306/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(PZ,"href","/docs/transformers/pr_17306/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(BZ,"href","/docs/transformers/pr_17306/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(IZ,"href","/docs/transformers/pr_17306/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(NZ,"href","/docs/transformers/pr_17306/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(qZ,"href","/docs/transformers/pr_17306/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(jZ,"href","/docs/transformers/pr_17306/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(DZ,"href","/docs/transformers/pr_17306/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(GZ,"href","/docs/transformers/pr_17306/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(OZ,"href","/docs/transformers/pr_17306/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(rf,"class","relative group"),c(VZ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XZ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zZ,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WZ,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(QZ,"href","/docs/transformers/pr_17306/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(HZ,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(UZ,"href","/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(JZ,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(YZ,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(KZ,"href","/docs/transformers/pr_17306/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(ZZ,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(eee,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(oee,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(nf,"class","relative group"),c(ree,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tee,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aee,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nee,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(see,"href","/docs/transformers/pr_17306/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(lee,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(iee,"href","/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(dee,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(cee,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(fee,"href","/docs/transformers/pr_17306/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(mee,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(gee,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(hee,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h5,"id","transformers.FlaxAutoModelForTokenClassification"),c(h5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(df,"class","relative group"),c(pee,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uee,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_ee,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bee,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(vee,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Fee,"href","/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Tee,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Mee,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Eee,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Cee,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(wee,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(w5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(mf,"class","relative group"),c(Aee,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lee,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yee,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xee,"href","/docs/transformers/pr_17306/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c($ee,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(kee,"href","/docs/transformers/pr_17306/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(See,"href","/docs/transformers/pr_17306/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Ree,"href","/docs/transformers/pr_17306/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Pee,"href","/docs/transformers/pr_17306/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Bee,"href","/docs/transformers/pr_17306/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Iee,"href","/docs/transformers/pr_17306/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(I5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(pf,"class","relative group"),c(Nee,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qee,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jee,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dee,"href","/docs/transformers/pr_17306/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D5,"id","transformers.FlaxAutoModelForImageClassification"),c(D5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D5,"href","#transformers.FlaxAutoModelForImageClassification"),c(bf,"class","relative group"),c(Gee,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oee,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vee,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xee,"href","/docs/transformers/pr_17306/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(zee,"href","/docs/transformers/pr_17306/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z5,"id","transformers.FlaxAutoModelForVision2Seq"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Tf,"class","relative group"),c(Wee,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qee,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hee,"href","/docs/transformers/pr_17306/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uee,"href","/docs/transformers/pr_17306/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Eo),e(Eo,Fi),b(f,Lf,_),b(f,at,_),e(at,Ti),e(at,Mi),e(Mi,pL),e(at,yf),b(f,Oe,_),b(f,We,_),e(We,Ei),e(We,Sn),e(Sn,uL),e(We,Rn),e(We,Pn),e(Pn,_L),e(We,Ci),e(We,Bn),e(Bn,bL),e(We,wi),b(f,xf,_),M(ya,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,zk),e(Ae,Ai),e(Ai,Wk),e(Ae,Qk),b(f,Co,_),b(f,xa,_),e(xa,Hk),e(xa,$f),e($f,Uk),e(xa,gze),b(f,KDe,_),b(f,Li,_),e(Li,kf),e(kf,Xre),M(vL,Xre,null),e(Li,hze),e(Li,zre),e(zre,pze),b(f,ZDe,_),b(f,In,_),e(In,uze),e(In,Wre),e(Wre,_ze),e(In,bze),e(In,Qre),e(Qre,vze),e(In,Fze),b(f,eGe,_),M(FL,f,_),b(f,oGe,_),b(f,Jk,_),e(Jk,Tze),b(f,rGe,_),M(Sf,f,_),b(f,tGe,_),b(f,yi,_),e(yi,Rf),e(Rf,Hre),M(TL,Hre,null),e(yi,Mze),e(yi,Ure),e(Ure,Eze),b(f,aGe,_),b(f,wo,_),M(ML,wo,null),e(wo,Cze),e(wo,EL),e(EL,wze),e(EL,Yk),e(Yk,Aze),e(EL,Lze),e(wo,yze),e(wo,CL),e(CL,xze),e(CL,Jre),e(Jre,$ze),e(CL,kze),e(wo,Sze),e(wo,wr),M(wL,wr,null),e(wr,Rze),e(wr,Yre),e(Yre,Pze),e(wr,Bze),e(wr,xi),e(xi,Ize),e(xi,Kre),e(Kre,Nze),e(xi,qze),e(xi,Zre),e(Zre,jze),e(xi,Dze),e(wr,Gze),e(wr,A),e(A,Pf),e(Pf,ete),e(ete,Oze),e(Pf,Vze),e(Pf,Kk),e(Kk,Xze),e(Pf,zze),e(A,Wze),e(A,Bf),e(Bf,ote),e(ote,Qze),e(Bf,Hze),e(Bf,Zk),e(Zk,Uze),e(Bf,Jze),e(A,Yze),e(A,If),e(If,rte),e(rte,Kze),e(If,Zze),e(If,eS),e(eS,eWe),e(If,oWe),e(A,rWe),e(A,Nf),e(Nf,tte),e(tte,tWe),e(Nf,aWe),e(Nf,oS),e(oS,nWe),e(Nf,sWe),e(A,lWe),e(A,qf),e(qf,ate),e(ate,iWe),e(qf,dWe),e(qf,rS),e(rS,cWe),e(qf,fWe),e(A,mWe),e(A,jf),e(jf,nte),e(nte,gWe),e(jf,hWe),e(jf,tS),e(tS,pWe),e(jf,uWe),e(A,_We),e(A,Df),e(Df,ste),e(ste,bWe),e(Df,vWe),e(Df,aS),e(aS,FWe),e(Df,TWe),e(A,MWe),e(A,Gf),e(Gf,lte),e(lte,EWe),e(Gf,CWe),e(Gf,nS),e(nS,wWe),e(Gf,AWe),e(A,LWe),e(A,Of),e(Of,ite),e(ite,yWe),e(Of,xWe),e(Of,sS),e(sS,$We),e(Of,kWe),e(A,SWe),e(A,Vf),e(Vf,dte),e(dte,RWe),e(Vf,PWe),e(Vf,lS),e(lS,BWe),e(Vf,IWe),e(A,NWe),e(A,Xf),e(Xf,cte),e(cte,qWe),e(Xf,jWe),e(Xf,iS),e(iS,DWe),e(Xf,GWe),e(A,OWe),e(A,zf),e(zf,fte),e(fte,VWe),e(zf,XWe),e(zf,dS),e(dS,zWe),e(zf,WWe),e(A,QWe),e(A,Wf),e(Wf,mte),e(mte,HWe),e(Wf,UWe),e(Wf,cS),e(cS,JWe),e(Wf,YWe),e(A,KWe),e(A,Qf),e(Qf,gte),e(gte,ZWe),e(Qf,eQe),e(Qf,fS),e(fS,oQe),e(Qf,rQe),e(A,tQe),e(A,Hf),e(Hf,hte),e(hte,aQe),e(Hf,nQe),e(Hf,mS),e(mS,sQe),e(Hf,lQe),e(A,iQe),e(A,Uf),e(Uf,pte),e(pte,dQe),e(Uf,cQe),e(Uf,gS),e(gS,fQe),e(Uf,mQe),e(A,gQe),e(A,Jf),e(Jf,ute),e(ute,hQe),e(Jf,pQe),e(Jf,hS),e(hS,uQe),e(Jf,_Qe),e(A,bQe),e(A,Yf),e(Yf,_te),e(_te,vQe),e(Yf,FQe),e(Yf,pS),e(pS,TQe),e(Yf,MQe),e(A,EQe),e(A,Kf),e(Kf,bte),e(bte,CQe),e(Kf,wQe),e(Kf,uS),e(uS,AQe),e(Kf,LQe),e(A,yQe),e(A,Zf),e(Zf,vte),e(vte,xQe),e(Zf,$Qe),e(Zf,_S),e(_S,kQe),e(Zf,SQe),e(A,RQe),e(A,em),e(em,Fte),e(Fte,PQe),e(em,BQe),e(em,bS),e(bS,IQe),e(em,NQe),e(A,qQe),e(A,om),e(om,Tte),e(Tte,jQe),e(om,DQe),e(om,vS),e(vS,GQe),e(om,OQe),e(A,VQe),e(A,rm),e(rm,Mte),e(Mte,XQe),e(rm,zQe),e(rm,FS),e(FS,WQe),e(rm,QQe),e(A,HQe),e(A,tm),e(tm,Ete),e(Ete,UQe),e(tm,JQe),e(tm,TS),e(TS,YQe),e(tm,KQe),e(A,ZQe),e(A,am),e(am,Cte),e(Cte,eHe),e(am,oHe),e(am,MS),e(MS,rHe),e(am,tHe),e(A,aHe),e(A,nm),e(nm,wte),e(wte,nHe),e(nm,sHe),e(nm,ES),e(ES,lHe),e(nm,iHe),e(A,dHe),e(A,sm),e(sm,Ate),e(Ate,cHe),e(sm,fHe),e(sm,CS),e(CS,mHe),e(sm,gHe),e(A,hHe),e(A,lm),e(lm,Lte),e(Lte,pHe),e(lm,uHe),e(lm,wS),e(wS,_He),e(lm,bHe),e(A,vHe),e(A,im),e(im,yte),e(yte,FHe),e(im,THe),e(im,AS),e(AS,MHe),e(im,EHe),e(A,CHe),e(A,dm),e(dm,xte),e(xte,wHe),e(dm,AHe),e(dm,LS),e(LS,LHe),e(dm,yHe),e(A,xHe),e(A,cm),e(cm,$te),e($te,$He),e(cm,kHe),e(cm,yS),e(yS,SHe),e(cm,RHe),e(A,PHe),e(A,fm),e(fm,kte),e(kte,BHe),e(fm,IHe),e(fm,xS),e(xS,NHe),e(fm,qHe),e(A,jHe),e(A,mm),e(mm,Ste),e(Ste,DHe),e(mm,GHe),e(mm,$S),e($S,OHe),e(mm,VHe),e(A,XHe),e(A,gm),e(gm,Rte),e(Rte,zHe),e(gm,WHe),e(gm,kS),e(kS,QHe),e(gm,HHe),e(A,UHe),e(A,hm),e(hm,Pte),e(Pte,JHe),e(hm,YHe),e(hm,SS),e(SS,KHe),e(hm,ZHe),e(A,eUe),e(A,pm),e(pm,Bte),e(Bte,oUe),e(pm,rUe),e(pm,RS),e(RS,tUe),e(pm,aUe),e(A,nUe),e(A,um),e(um,Ite),e(Ite,sUe),e(um,lUe),e(um,PS),e(PS,iUe),e(um,dUe),e(A,cUe),e(A,_m),e(_m,Nte),e(Nte,fUe),e(_m,mUe),e(_m,BS),e(BS,gUe),e(_m,hUe),e(A,pUe),e(A,bm),e(bm,qte),e(qte,uUe),e(bm,_Ue),e(bm,IS),e(IS,bUe),e(bm,vUe),e(A,FUe),e(A,vm),e(vm,jte),e(jte,TUe),e(vm,MUe),e(vm,NS),e(NS,EUe),e(vm,CUe),e(A,wUe),e(A,Fm),e(Fm,Dte),e(Dte,AUe),e(Fm,LUe),e(Fm,qS),e(qS,yUe),e(Fm,xUe),e(A,$Ue),e(A,Tm),e(Tm,Gte),e(Gte,kUe),e(Tm,SUe),e(Tm,jS),e(jS,RUe),e(Tm,PUe),e(A,BUe),e(A,Mm),e(Mm,Ote),e(Ote,IUe),e(Mm,NUe),e(Mm,DS),e(DS,qUe),e(Mm,jUe),e(A,DUe),e(A,Em),e(Em,Vte),e(Vte,GUe),e(Em,OUe),e(Em,GS),e(GS,VUe),e(Em,XUe),e(A,zUe),e(A,Cm),e(Cm,Xte),e(Xte,WUe),e(Cm,QUe),e(Cm,OS),e(OS,HUe),e(Cm,UUe),e(A,JUe),e(A,wm),e(wm,zte),e(zte,YUe),e(wm,KUe),e(wm,VS),e(VS,ZUe),e(wm,eJe),e(A,oJe),e(A,Am),e(Am,Wte),e(Wte,rJe),e(Am,tJe),e(Am,XS),e(XS,aJe),e(Am,nJe),e(A,sJe),e(A,Lm),e(Lm,Qte),e(Qte,lJe),e(Lm,iJe),e(Lm,zS),e(zS,dJe),e(Lm,cJe),e(A,fJe),e(A,ym),e(ym,Hte),e(Hte,mJe),e(ym,gJe),e(ym,WS),e(WS,hJe),e(ym,pJe),e(A,uJe),e(A,xm),e(xm,Ute),e(Ute,_Je),e(xm,bJe),e(xm,QS),e(QS,vJe),e(xm,FJe),e(A,TJe),e(A,$m),e($m,Jte),e(Jte,MJe),e($m,EJe),e($m,HS),e(HS,CJe),e($m,wJe),e(A,AJe),e(A,km),e(km,Yte),e(Yte,LJe),e(km,yJe),e(km,US),e(US,xJe),e(km,$Je),e(A,kJe),e(A,Sm),e(Sm,Kte),e(Kte,SJe),e(Sm,RJe),e(Sm,JS),e(JS,PJe),e(Sm,BJe),e(A,IJe),e(A,Rm),e(Rm,Zte),e(Zte,NJe),e(Rm,qJe),e(Rm,YS),e(YS,jJe),e(Rm,DJe),e(A,GJe),e(A,Pm),e(Pm,eae),e(eae,OJe),e(Pm,VJe),e(Pm,KS),e(KS,XJe),e(Pm,zJe),e(A,WJe),e(A,Bm),e(Bm,oae),e(oae,QJe),e(Bm,HJe),e(Bm,ZS),e(ZS,UJe),e(Bm,JJe),e(A,YJe),e(A,Im),e(Im,rae),e(rae,KJe),e(Im,ZJe),e(Im,eR),e(eR,eYe),e(Im,oYe),e(A,rYe),e(A,Nm),e(Nm,tae),e(tae,tYe),e(Nm,aYe),e(Nm,oR),e(oR,nYe),e(Nm,sYe),e(A,lYe),e(A,qm),e(qm,aae),e(aae,iYe),e(qm,dYe),e(qm,rR),e(rR,cYe),e(qm,fYe),e(A,mYe),e(A,jm),e(jm,nae),e(nae,gYe),e(jm,hYe),e(jm,tR),e(tR,pYe),e(jm,uYe),e(A,_Ye),e(A,Dm),e(Dm,sae),e(sae,bYe),e(Dm,vYe),e(Dm,aR),e(aR,FYe),e(Dm,TYe),e(A,MYe),e(A,Gm),e(Gm,lae),e(lae,EYe),e(Gm,CYe),e(Gm,nR),e(nR,wYe),e(Gm,AYe),e(A,LYe),e(A,Om),e(Om,iae),e(iae,yYe),e(Om,xYe),e(Om,sR),e(sR,$Ye),e(Om,kYe),e(A,SYe),e(A,Vm),e(Vm,dae),e(dae,RYe),e(Vm,PYe),e(Vm,lR),e(lR,BYe),e(Vm,IYe),e(A,NYe),e(A,Xm),e(Xm,cae),e(cae,qYe),e(Xm,jYe),e(Xm,iR),e(iR,DYe),e(Xm,GYe),e(A,OYe),e(A,zm),e(zm,fae),e(fae,VYe),e(zm,XYe),e(zm,dR),e(dR,zYe),e(zm,WYe),e(A,QYe),e(A,Wm),e(Wm,mae),e(mae,HYe),e(Wm,UYe),e(Wm,cR),e(cR,JYe),e(Wm,YYe),e(A,KYe),e(A,Qm),e(Qm,gae),e(gae,ZYe),e(Qm,eKe),e(Qm,fR),e(fR,oKe),e(Qm,rKe),e(A,tKe),e(A,Hm),e(Hm,hae),e(hae,aKe),e(Hm,nKe),e(Hm,mR),e(mR,sKe),e(Hm,lKe),e(A,iKe),e(A,Um),e(Um,pae),e(pae,dKe),e(Um,cKe),e(Um,gR),e(gR,fKe),e(Um,mKe),e(A,gKe),e(A,Jm),e(Jm,uae),e(uae,hKe),e(Jm,pKe),e(Jm,hR),e(hR,uKe),e(Jm,_Ke),e(A,bKe),e(A,Ym),e(Ym,_ae),e(_ae,vKe),e(Ym,FKe),e(Ym,pR),e(pR,TKe),e(Ym,MKe),e(A,EKe),e(A,Km),e(Km,bae),e(bae,CKe),e(Km,wKe),e(Km,uR),e(uR,AKe),e(Km,LKe),e(A,yKe),e(A,Zm),e(Zm,vae),e(vae,xKe),e(Zm,$Ke),e(Zm,_R),e(_R,kKe),e(Zm,SKe),e(A,RKe),e(A,eg),e(eg,Fae),e(Fae,PKe),e(eg,BKe),e(eg,bR),e(bR,IKe),e(eg,NKe),e(A,qKe),e(A,og),e(og,Tae),e(Tae,jKe),e(og,DKe),e(og,vR),e(vR,GKe),e(og,OKe),e(A,VKe),e(A,rg),e(rg,Mae),e(Mae,XKe),e(rg,zKe),e(rg,FR),e(FR,WKe),e(rg,QKe),e(A,HKe),e(A,tg),e(tg,Eae),e(Eae,UKe),e(tg,JKe),e(tg,TR),e(TR,YKe),e(tg,KKe),e(A,ZKe),e(A,ag),e(ag,Cae),e(Cae,eZe),e(ag,oZe),e(ag,MR),e(MR,rZe),e(ag,tZe),e(A,aZe),e(A,ng),e(ng,wae),e(wae,nZe),e(ng,sZe),e(ng,ER),e(ER,lZe),e(ng,iZe),e(A,dZe),e(A,sg),e(sg,Aae),e(Aae,cZe),e(sg,fZe),e(sg,CR),e(CR,mZe),e(sg,gZe),e(A,hZe),e(A,lg),e(lg,Lae),e(Lae,pZe),e(lg,uZe),e(lg,wR),e(wR,_Ze),e(lg,bZe),e(A,vZe),e(A,ig),e(ig,yae),e(yae,FZe),e(ig,TZe),e(ig,AR),e(AR,MZe),e(ig,EZe),e(A,CZe),e(A,dg),e(dg,xae),e(xae,wZe),e(dg,AZe),e(dg,LR),e(LR,LZe),e(dg,yZe),e(A,xZe),e(A,cg),e(cg,$ae),e($ae,$Ze),e(cg,kZe),e(cg,yR),e(yR,SZe),e(cg,RZe),e(A,PZe),e(A,fg),e(fg,kae),e(kae,BZe),e(fg,IZe),e(fg,xR),e(xR,NZe),e(fg,qZe),e(A,jZe),e(A,mg),e(mg,Sae),e(Sae,DZe),e(mg,GZe),e(mg,$R),e($R,OZe),e(mg,VZe),e(A,XZe),e(A,gg),e(gg,Rae),e(Rae,zZe),e(gg,WZe),e(gg,kR),e(kR,QZe),e(gg,HZe),e(A,UZe),e(A,hg),e(hg,Pae),e(Pae,JZe),e(hg,YZe),e(hg,SR),e(SR,KZe),e(hg,ZZe),e(A,eeo),e(A,pg),e(pg,Bae),e(Bae,oeo),e(pg,reo),e(pg,RR),e(RR,teo),e(pg,aeo),e(A,neo),e(A,ug),e(ug,Iae),e(Iae,seo),e(ug,leo),e(ug,PR),e(PR,ieo),e(ug,deo),e(A,ceo),e(A,_g),e(_g,Nae),e(Nae,feo),e(_g,meo),e(_g,BR),e(BR,geo),e(_g,heo),e(A,peo),e(A,bg),e(bg,qae),e(qae,ueo),e(bg,_eo),e(bg,IR),e(IR,beo),e(bg,veo),e(A,Feo),e(A,vg),e(vg,jae),e(jae,Teo),e(vg,Meo),e(vg,NR),e(NR,Eeo),e(vg,Ceo),e(A,weo),e(A,Fg),e(Fg,Dae),e(Dae,Aeo),e(Fg,Leo),e(Fg,qR),e(qR,yeo),e(Fg,xeo),e(A,$eo),e(A,Tg),e(Tg,Gae),e(Gae,keo),e(Tg,Seo),e(Tg,jR),e(jR,Reo),e(Tg,Peo),e(A,Beo),e(A,Mg),e(Mg,Oae),e(Oae,Ieo),e(Mg,Neo),e(Mg,DR),e(DR,qeo),e(Mg,jeo),e(A,Deo),e(A,Eg),e(Eg,Vae),e(Vae,Geo),e(Eg,Oeo),e(Eg,GR),e(GR,Veo),e(Eg,Xeo),e(A,zeo),e(A,Cg),e(Cg,Xae),e(Xae,Weo),e(Cg,Qeo),e(Cg,OR),e(OR,Heo),e(Cg,Ueo),e(A,Jeo),e(A,wg),e(wg,zae),e(zae,Yeo),e(wg,Keo),e(wg,VR),e(VR,Zeo),e(wg,eoo),e(A,ooo),e(A,Ag),e(Ag,Wae),e(Wae,roo),e(Ag,too),e(Ag,XR),e(XR,aoo),e(Ag,noo),e(A,soo),e(A,Lg),e(Lg,Qae),e(Qae,loo),e(Lg,ioo),e(Lg,zR),e(zR,doo),e(Lg,coo),e(A,foo),e(A,yg),e(yg,Hae),e(Hae,moo),e(yg,goo),e(yg,WR),e(WR,hoo),e(yg,poo),e(A,uoo),e(A,xg),e(xg,Uae),e(Uae,_oo),e(xg,boo),e(xg,QR),e(QR,voo),e(xg,Foo),e(A,Too),e(A,$g),e($g,Jae),e(Jae,Moo),e($g,Eoo),e($g,HR),e(HR,Coo),e($g,woo),e(A,Aoo),e(A,kg),e(kg,Yae),e(Yae,Loo),e(kg,yoo),e(kg,UR),e(UR,xoo),e(kg,$oo),e(A,koo),e(A,Sg),e(Sg,Kae),e(Kae,Soo),e(Sg,Roo),e(Sg,JR),e(JR,Poo),e(Sg,Boo),e(A,Ioo),e(A,Rg),e(Rg,Zae),e(Zae,Noo),e(Rg,qoo),e(Rg,YR),e(YR,joo),e(Rg,Doo),e(A,Goo),e(A,Pg),e(Pg,ene),e(ene,Ooo),e(Pg,Voo),e(Pg,KR),e(KR,Xoo),e(Pg,zoo),e(A,Woo),e(A,Bg),e(Bg,one),e(one,Qoo),e(Bg,Hoo),e(Bg,ZR),e(ZR,Uoo),e(Bg,Joo),e(A,Yoo),e(A,Ig),e(Ig,rne),e(rne,Koo),e(Ig,Zoo),e(Ig,eP),e(eP,ero),e(Ig,oro),e(A,rro),e(A,Ng),e(Ng,tne),e(tne,tro),e(Ng,aro),e(Ng,oP),e(oP,nro),e(Ng,sro),e(A,lro),e(A,qg),e(qg,ane),e(ane,iro),e(qg,dro),e(qg,rP),e(rP,cro),e(qg,fro),e(wr,mro),M(jg,wr,null),e(wo,gro),e(wo,Dg),M(AL,Dg,null),e(Dg,hro),e(Dg,nne),e(nne,pro),b(f,nGe,_),b(f,$i,_),e($i,Gg),e(Gg,sne),M(LL,sne,null),e($i,uro),e($i,lne),e(lne,_ro),b(f,sGe,_),b(f,Ao,_),M(yL,Ao,null),e(Ao,bro),e(Ao,xL),e(xL,vro),e(xL,tP),e(tP,Fro),e(xL,Tro),e(Ao,Mro),e(Ao,$L),e($L,Ero),e($L,ine),e(ine,Cro),e($L,wro),e(Ao,Aro),e(Ao,Ar),M(kL,Ar,null),e(Ar,Lro),e(Ar,dne),e(dne,yro),e(Ar,xro),e(Ar,$a),e($a,$ro),e($a,cne),e(cne,kro),e($a,Sro),e($a,fne),e(fne,Rro),e($a,Pro),e($a,mne),e(mne,Bro),e($a,Iro),e(Ar,Nro),e(Ar,k),e(k,Nn),e(Nn,gne),e(gne,qro),e(Nn,jro),e(Nn,aP),e(aP,Dro),e(Nn,Gro),e(Nn,nP),e(nP,Oro),e(Nn,Vro),e(k,Xro),e(k,qn),e(qn,hne),e(hne,zro),e(qn,Wro),e(qn,sP),e(sP,Qro),e(qn,Hro),e(qn,lP),e(lP,Uro),e(qn,Jro),e(k,Yro),e(k,jn),e(jn,pne),e(pne,Kro),e(jn,Zro),e(jn,iP),e(iP,eto),e(jn,oto),e(jn,dP),e(dP,rto),e(jn,tto),e(k,ato),e(k,Og),e(Og,une),e(une,nto),e(Og,sto),e(Og,cP),e(cP,lto),e(Og,ito),e(k,dto),e(k,Dn),e(Dn,_ne),e(_ne,cto),e(Dn,fto),e(Dn,fP),e(fP,mto),e(Dn,gto),e(Dn,mP),e(mP,hto),e(Dn,pto),e(k,uto),e(k,Vg),e(Vg,bne),e(bne,_to),e(Vg,bto),e(Vg,gP),e(gP,vto),e(Vg,Fto),e(k,Tto),e(k,Xg),e(Xg,vne),e(vne,Mto),e(Xg,Eto),e(Xg,hP),e(hP,Cto),e(Xg,wto),e(k,Ato),e(k,zg),e(zg,Fne),e(Fne,Lto),e(zg,yto),e(zg,pP),e(pP,xto),e(zg,$to),e(k,kto),e(k,Gn),e(Gn,Tne),e(Tne,Sto),e(Gn,Rto),e(Gn,uP),e(uP,Pto),e(Gn,Bto),e(Gn,_P),e(_P,Ito),e(Gn,Nto),e(k,qto),e(k,On),e(On,Mne),e(Mne,jto),e(On,Dto),e(On,bP),e(bP,Gto),e(On,Oto),e(On,vP),e(vP,Vto),e(On,Xto),e(k,zto),e(k,Vn),e(Vn,Ene),e(Ene,Wto),e(Vn,Qto),e(Vn,FP),e(FP,Hto),e(Vn,Uto),e(Vn,TP),e(TP,Jto),e(Vn,Yto),e(k,Kto),e(k,Wg),e(Wg,Cne),e(Cne,Zto),e(Wg,eao),e(Wg,MP),e(MP,oao),e(Wg,rao),e(k,tao),e(k,Qg),e(Qg,wne),e(wne,aao),e(Qg,nao),e(Qg,EP),e(EP,sao),e(Qg,lao),e(k,iao),e(k,Hg),e(Hg,Ane),e(Ane,dao),e(Hg,cao),e(Hg,CP),e(CP,fao),e(Hg,mao),e(k,gao),e(k,Xn),e(Xn,Lne),e(Lne,hao),e(Xn,pao),e(Xn,wP),e(wP,uao),e(Xn,_ao),e(Xn,AP),e(AP,bao),e(Xn,vao),e(k,Fao),e(k,Ug),e(Ug,yne),e(yne,Tao),e(Ug,Mao),e(Ug,LP),e(LP,Eao),e(Ug,Cao),e(k,wao),e(k,zn),e(zn,xne),e(xne,Aao),e(zn,Lao),e(zn,yP),e(yP,yao),e(zn,xao),e(zn,xP),e(xP,$ao),e(zn,kao),e(k,Sao),e(k,Wn),e(Wn,$ne),e($ne,Rao),e(Wn,Pao),e(Wn,$P),e($P,Bao),e(Wn,Iao),e(Wn,kP),e(kP,Nao),e(Wn,qao),e(k,jao),e(k,Qn),e(Qn,kne),e(kne,Dao),e(Qn,Gao),e(Qn,SP),e(SP,Oao),e(Qn,Vao),e(Qn,RP),e(RP,Xao),e(Qn,zao),e(k,Wao),e(k,Jg),e(Jg,Sne),e(Sne,Qao),e(Jg,Hao),e(Jg,PP),e(PP,Uao),e(Jg,Jao),e(k,Yao),e(k,Hn),e(Hn,Rne),e(Rne,Kao),e(Hn,Zao),e(Hn,BP),e(BP,eno),e(Hn,ono),e(Hn,IP),e(IP,rno),e(Hn,tno),e(k,ano),e(k,Un),e(Un,Pne),e(Pne,nno),e(Un,sno),e(Un,NP),e(NP,lno),e(Un,ino),e(Un,qP),e(qP,dno),e(Un,cno),e(k,fno),e(k,Jn),e(Jn,Bne),e(Bne,mno),e(Jn,gno),e(Jn,jP),e(jP,hno),e(Jn,pno),e(Jn,DP),e(DP,uno),e(Jn,_no),e(k,bno),e(k,Yn),e(Yn,Ine),e(Ine,vno),e(Yn,Fno),e(Yn,GP),e(GP,Tno),e(Yn,Mno),e(Yn,OP),e(OP,Eno),e(Yn,Cno),e(k,wno),e(k,Kn),e(Kn,Nne),e(Nne,Ano),e(Kn,Lno),e(Kn,VP),e(VP,yno),e(Kn,xno),e(Kn,XP),e(XP,$no),e(Kn,kno),e(k,Sno),e(k,Zn),e(Zn,qne),e(qne,Rno),e(Zn,Pno),e(Zn,zP),e(zP,Bno),e(Zn,Ino),e(Zn,WP),e(WP,Nno),e(Zn,qno),e(k,jno),e(k,Yg),e(Yg,jne),e(jne,Dno),e(Yg,Gno),e(Yg,QP),e(QP,Ono),e(Yg,Vno),e(k,Xno),e(k,es),e(es,Dne),e(Dne,zno),e(es,Wno),e(es,HP),e(HP,Qno),e(es,Hno),e(es,UP),e(UP,Uno),e(es,Jno),e(k,Yno),e(k,Kg),e(Kg,Gne),e(Gne,Kno),e(Kg,Zno),e(Kg,JP),e(JP,eso),e(Kg,oso),e(k,rso),e(k,os),e(os,One),e(One,tso),e(os,aso),e(os,YP),e(YP,nso),e(os,sso),e(os,KP),e(KP,lso),e(os,iso),e(k,dso),e(k,rs),e(rs,Vne),e(Vne,cso),e(rs,fso),e(rs,ZP),e(ZP,mso),e(rs,gso),e(rs,eB),e(eB,hso),e(rs,pso),e(k,uso),e(k,ts),e(ts,Xne),e(Xne,_so),e(ts,bso),e(ts,oB),e(oB,vso),e(ts,Fso),e(ts,rB),e(rB,Tso),e(ts,Mso),e(k,Eso),e(k,Zg),e(Zg,zne),e(zne,Cso),e(Zg,wso),e(Zg,tB),e(tB,Aso),e(Zg,Lso),e(k,yso),e(k,as),e(as,Wne),e(Wne,xso),e(as,$so),e(as,aB),e(aB,kso),e(as,Sso),e(as,nB),e(nB,Rso),e(as,Pso),e(k,Bso),e(k,ns),e(ns,Qne),e(Qne,Iso),e(ns,Nso),e(ns,sB),e(sB,qso),e(ns,jso),e(ns,lB),e(lB,Dso),e(ns,Gso),e(k,Oso),e(k,eh),e(eh,Hne),e(Hne,Vso),e(eh,Xso),e(eh,iB),e(iB,zso),e(eh,Wso),e(k,Qso),e(k,ss),e(ss,Une),e(Une,Hso),e(ss,Uso),e(ss,dB),e(dB,Jso),e(ss,Yso),e(ss,cB),e(cB,Kso),e(ss,Zso),e(k,elo),e(k,ls),e(ls,Jne),e(Jne,olo),e(ls,rlo),e(ls,fB),e(fB,tlo),e(ls,alo),e(ls,mB),e(mB,nlo),e(ls,slo),e(k,llo),e(k,is),e(is,Yne),e(Yne,ilo),e(is,dlo),e(is,gB),e(gB,clo),e(is,flo),e(is,hB),e(hB,mlo),e(is,glo),e(k,hlo),e(k,ds),e(ds,Kne),e(Kne,plo),e(ds,ulo),e(ds,pB),e(pB,_lo),e(ds,blo),e(ds,uB),e(uB,vlo),e(ds,Flo),e(k,Tlo),e(k,cs),e(cs,Zne),e(Zne,Mlo),e(cs,Elo),e(cs,_B),e(_B,Clo),e(cs,wlo),e(cs,bB),e(bB,Alo),e(cs,Llo),e(k,ylo),e(k,fs),e(fs,ese),e(ese,xlo),e(fs,$lo),e(fs,vB),e(vB,klo),e(fs,Slo),e(fs,FB),e(FB,Rlo),e(fs,Plo),e(k,Blo),e(k,ms),e(ms,ose),e(ose,Ilo),e(ms,Nlo),e(ms,TB),e(TB,qlo),e(ms,jlo),e(ms,MB),e(MB,Dlo),e(ms,Glo),e(k,Olo),e(k,gs),e(gs,rse),e(rse,Vlo),e(gs,Xlo),e(gs,EB),e(EB,zlo),e(gs,Wlo),e(gs,CB),e(CB,Qlo),e(gs,Hlo),e(k,Ulo),e(k,oh),e(oh,tse),e(tse,Jlo),e(oh,Ylo),e(oh,wB),e(wB,Klo),e(oh,Zlo),e(k,eio),e(k,hs),e(hs,ase),e(ase,oio),e(hs,rio),e(hs,AB),e(AB,tio),e(hs,aio),e(hs,LB),e(LB,nio),e(hs,sio),e(k,lio),e(k,rh),e(rh,nse),e(nse,iio),e(rh,dio),e(rh,yB),e(yB,cio),e(rh,fio),e(k,mio),e(k,th),e(th,sse),e(sse,gio),e(th,hio),e(th,xB),e(xB,pio),e(th,uio),e(k,_io),e(k,ps),e(ps,lse),e(lse,bio),e(ps,vio),e(ps,$B),e($B,Fio),e(ps,Tio),e(ps,kB),e(kB,Mio),e(ps,Eio),e(k,Cio),e(k,us),e(us,ise),e(ise,wio),e(us,Aio),e(us,SB),e(SB,Lio),e(us,yio),e(us,RB),e(RB,xio),e(us,$io),e(k,kio),e(k,_s),e(_s,dse),e(dse,Sio),e(_s,Rio),e(_s,PB),e(PB,Pio),e(_s,Bio),e(_s,BB),e(BB,Iio),e(_s,Nio),e(k,qio),e(k,ah),e(ah,cse),e(cse,jio),e(ah,Dio),e(ah,IB),e(IB,Gio),e(ah,Oio),e(k,Vio),e(k,bs),e(bs,fse),e(fse,Xio),e(bs,zio),e(bs,NB),e(NB,Wio),e(bs,Qio),e(bs,qB),e(qB,Hio),e(bs,Uio),e(k,Jio),e(k,vs),e(vs,mse),e(mse,Yio),e(vs,Kio),e(vs,jB),e(jB,Zio),e(vs,edo),e(vs,DB),e(DB,odo),e(vs,rdo),e(k,tdo),e(k,Fs),e(Fs,gse),e(gse,ado),e(Fs,ndo),e(Fs,GB),e(GB,sdo),e(Fs,ldo),e(Fs,OB),e(OB,ido),e(Fs,ddo),e(k,cdo),e(k,Ts),e(Ts,hse),e(hse,fdo),e(Ts,mdo),e(Ts,VB),e(VB,gdo),e(Ts,hdo),e(Ts,XB),e(XB,pdo),e(Ts,udo),e(k,_do),e(k,Ms),e(Ms,pse),e(pse,bdo),e(Ms,vdo),e(Ms,zB),e(zB,Fdo),e(Ms,Tdo),e(Ms,WB),e(WB,Mdo),e(Ms,Edo),e(k,Cdo),e(k,nh),e(nh,use),e(use,wdo),e(nh,Ado),e(nh,QB),e(QB,Ldo),e(nh,ydo),e(k,xdo),e(k,Es),e(Es,_se),e(_se,$do),e(Es,kdo),e(Es,HB),e(HB,Sdo),e(Es,Rdo),e(Es,UB),e(UB,Pdo),e(Es,Bdo),e(k,Ido),e(k,sh),e(sh,bse),e(bse,Ndo),e(sh,qdo),e(sh,JB),e(JB,jdo),e(sh,Ddo),e(k,Gdo),e(k,lh),e(lh,vse),e(vse,Odo),e(lh,Vdo),e(lh,YB),e(YB,Xdo),e(lh,zdo),e(k,Wdo),e(k,ih),e(ih,Fse),e(Fse,Qdo),e(ih,Hdo),e(ih,KB),e(KB,Udo),e(ih,Jdo),e(k,Ydo),e(k,dh),e(dh,Tse),e(Tse,Kdo),e(dh,Zdo),e(dh,ZB),e(ZB,eco),e(dh,oco),e(k,rco),e(k,Cs),e(Cs,Mse),e(Mse,tco),e(Cs,aco),e(Cs,eI),e(eI,nco),e(Cs,sco),e(Cs,oI),e(oI,lco),e(Cs,ico),e(k,dco),e(k,ch),e(ch,Ese),e(Ese,cco),e(ch,fco),e(ch,rI),e(rI,mco),e(ch,gco),e(k,hco),e(k,ws),e(ws,Cse),e(Cse,pco),e(ws,uco),e(ws,tI),e(tI,_co),e(ws,bco),e(ws,aI),e(aI,vco),e(ws,Fco),e(k,Tco),e(k,As),e(As,wse),e(wse,Mco),e(As,Eco),e(As,nI),e(nI,Cco),e(As,wco),e(As,sI),e(sI,Aco),e(As,Lco),e(k,yco),e(k,Ls),e(Ls,Ase),e(Ase,xco),e(Ls,$co),e(Ls,lI),e(lI,kco),e(Ls,Sco),e(Ls,iI),e(iI,Rco),e(Ls,Pco),e(k,Bco),e(k,ys),e(ys,Lse),e(Lse,Ico),e(ys,Nco),e(ys,dI),e(dI,qco),e(ys,jco),e(ys,cI),e(cI,Dco),e(ys,Gco),e(k,Oco),e(k,xs),e(xs,yse),e(yse,Vco),e(xs,Xco),e(xs,fI),e(fI,zco),e(xs,Wco),e(xs,mI),e(mI,Qco),e(xs,Hco),e(k,Uco),e(k,$s),e($s,xse),e(xse,Jco),e($s,Yco),e($s,gI),e(gI,Kco),e($s,Zco),e($s,hI),e(hI,efo),e($s,ofo),e(k,rfo),e(k,fh),e(fh,$se),e($se,tfo),e(fh,afo),e(fh,pI),e(pI,nfo),e(fh,sfo),e(k,lfo),e(k,mh),e(mh,kse),e(kse,ifo),e(mh,dfo),e(mh,uI),e(uI,cfo),e(mh,ffo),e(k,mfo),e(k,ks),e(ks,Sse),e(Sse,gfo),e(ks,hfo),e(ks,_I),e(_I,pfo),e(ks,ufo),e(ks,bI),e(bI,_fo),e(ks,bfo),e(k,vfo),e(k,Ss),e(Ss,Rse),e(Rse,Ffo),e(Ss,Tfo),e(Ss,vI),e(vI,Mfo),e(Ss,Efo),e(Ss,FI),e(FI,Cfo),e(Ss,wfo),e(k,Afo),e(k,Rs),e(Rs,Pse),e(Pse,Lfo),e(Rs,yfo),e(Rs,TI),e(TI,xfo),e(Rs,$fo),e(Rs,MI),e(MI,kfo),e(Rs,Sfo),e(k,Rfo),e(k,gh),e(gh,Bse),e(Bse,Pfo),e(gh,Bfo),e(gh,EI),e(EI,Ifo),e(gh,Nfo),e(k,qfo),e(k,hh),e(hh,Ise),e(Ise,jfo),e(hh,Dfo),e(hh,CI),e(CI,Gfo),e(hh,Ofo),e(k,Vfo),e(k,ph),e(ph,Nse),e(Nse,Xfo),e(ph,zfo),e(ph,wI),e(wI,Wfo),e(ph,Qfo),e(k,Hfo),e(k,Ps),e(Ps,qse),e(qse,Ufo),e(Ps,Jfo),e(Ps,AI),e(AI,Yfo),e(Ps,Kfo),e(Ps,LI),e(LI,Zfo),e(Ps,emo),e(k,omo),e(k,Bs),e(Bs,jse),e(jse,rmo),e(Bs,tmo),e(Bs,yI),e(yI,amo),e(Bs,nmo),e(Bs,xI),e(xI,smo),e(Bs,lmo),e(k,imo),e(k,uh),e(uh,Dse),e(Dse,dmo),e(uh,cmo),e(uh,$I),e($I,fmo),e(uh,mmo),e(k,gmo),e(k,_h),e(_h,Gse),e(Gse,hmo),e(_h,pmo),e(_h,kI),e(kI,umo),e(_h,_mo),e(k,bmo),e(k,bh),e(bh,Ose),e(Ose,vmo),e(bh,Fmo),e(bh,SI),e(SI,Tmo),e(bh,Mmo),e(k,Emo),e(k,Is),e(Is,Vse),e(Vse,Cmo),e(Is,wmo),e(Is,RI),e(RI,Amo),e(Is,Lmo),e(Is,PI),e(PI,ymo),e(Is,xmo),e(k,$mo),e(k,vh),e(vh,Xse),e(Xse,kmo),e(vh,Smo),e(vh,BI),e(BI,Rmo),e(vh,Pmo),e(k,Bmo),e(k,Fh),e(Fh,zse),e(zse,Imo),e(Fh,Nmo),e(Fh,II),e(II,qmo),e(Fh,jmo),e(k,Dmo),e(k,Ns),e(Ns,Wse),e(Wse,Gmo),e(Ns,Omo),e(Ns,NI),e(NI,Vmo),e(Ns,Xmo),e(Ns,qI),e(qI,zmo),e(Ns,Wmo),e(k,Qmo),e(k,qs),e(qs,Qse),e(Qse,Hmo),e(qs,Umo),e(qs,jI),e(jI,Jmo),e(qs,Ymo),e(qs,DI),e(DI,Kmo),e(qs,Zmo),e(k,ego),e(k,js),e(js,Hse),e(Hse,ogo),e(js,rgo),e(js,GI),e(GI,tgo),e(js,ago),e(js,OI),e(OI,ngo),e(js,sgo),e(k,lgo),e(k,Ds),e(Ds,Use),e(Use,igo),e(Ds,dgo),e(Ds,VI),e(VI,cgo),e(Ds,fgo),e(Ds,XI),e(XI,mgo),e(Ds,ggo),e(Ar,hgo),M(Th,Ar,null),e(Ao,pgo),e(Ao,Mh),M(SL,Mh,null),e(Mh,ugo),e(Mh,Jse),e(Jse,_go),b(f,lGe,_),b(f,ki,_),e(ki,Eh),e(Eh,Yse),M(RL,Yse,null),e(ki,bgo),e(ki,Kse),e(Kse,vgo),b(f,iGe,_),b(f,Lo,_),M(PL,Lo,null),e(Lo,Fgo),e(Lo,BL),e(BL,Tgo),e(BL,zI),e(zI,Mgo),e(BL,Ego),e(Lo,Cgo),e(Lo,IL),e(IL,wgo),e(IL,Zse),e(Zse,Ago),e(IL,Lgo),e(Lo,ygo),e(Lo,He),M(NL,He,null),e(He,xgo),e(He,ele),e(ele,$go),e(He,kgo),e(He,ka),e(ka,Sgo),e(ka,ole),e(ole,Rgo),e(ka,Pgo),e(ka,rle),e(rle,Bgo),e(ka,Igo),e(ka,tle),e(tle,Ngo),e(ka,qgo),e(He,jgo),e(He,Y),e(Y,Ch),e(Ch,ale),e(ale,Dgo),e(Ch,Ggo),e(Ch,WI),e(WI,Ogo),e(Ch,Vgo),e(Y,Xgo),e(Y,wh),e(wh,nle),e(nle,zgo),e(wh,Wgo),e(wh,QI),e(QI,Qgo),e(wh,Hgo),e(Y,Ugo),e(Y,Ah),e(Ah,sle),e(sle,Jgo),e(Ah,Ygo),e(Ah,HI),e(HI,Kgo),e(Ah,Zgo),e(Y,eho),e(Y,Lh),e(Lh,lle),e(lle,oho),e(Lh,rho),e(Lh,UI),e(UI,tho),e(Lh,aho),e(Y,nho),e(Y,yh),e(yh,ile),e(ile,sho),e(yh,lho),e(yh,JI),e(JI,iho),e(yh,dho),e(Y,cho),e(Y,xh),e(xh,dle),e(dle,fho),e(xh,mho),e(xh,YI),e(YI,gho),e(xh,hho),e(Y,pho),e(Y,$h),e($h,cle),e(cle,uho),e($h,_ho),e($h,KI),e(KI,bho),e($h,vho),e(Y,Fho),e(Y,kh),e(kh,fle),e(fle,Tho),e(kh,Mho),e(kh,ZI),e(ZI,Eho),e(kh,Cho),e(Y,who),e(Y,Sh),e(Sh,mle),e(mle,Aho),e(Sh,Lho),e(Sh,eN),e(eN,yho),e(Sh,xho),e(Y,$ho),e(Y,Rh),e(Rh,gle),e(gle,kho),e(Rh,Sho),e(Rh,oN),e(oN,Rho),e(Rh,Pho),e(Y,Bho),e(Y,Ph),e(Ph,hle),e(hle,Iho),e(Ph,Nho),e(Ph,rN),e(rN,qho),e(Ph,jho),e(Y,Dho),e(Y,Bh),e(Bh,ple),e(ple,Gho),e(Bh,Oho),e(Bh,tN),e(tN,Vho),e(Bh,Xho),e(Y,zho),e(Y,Ih),e(Ih,ule),e(ule,Who),e(Ih,Qho),e(Ih,aN),e(aN,Hho),e(Ih,Uho),e(Y,Jho),e(Y,Nh),e(Nh,_le),e(_le,Yho),e(Nh,Kho),e(Nh,nN),e(nN,Zho),e(Nh,epo),e(Y,opo),e(Y,qh),e(qh,ble),e(ble,rpo),e(qh,tpo),e(qh,sN),e(sN,apo),e(qh,npo),e(Y,spo),e(Y,jh),e(jh,vle),e(vle,lpo),e(jh,ipo),e(jh,lN),e(lN,dpo),e(jh,cpo),e(Y,fpo),e(Y,Dh),e(Dh,Fle),e(Fle,mpo),e(Dh,gpo),e(Dh,iN),e(iN,hpo),e(Dh,ppo),e(Y,upo),e(Y,Gh),e(Gh,Tle),e(Tle,_po),e(Gh,bpo),e(Gh,dN),e(dN,vpo),e(Gh,Fpo),e(Y,Tpo),e(Y,Oh),e(Oh,Mle),e(Mle,Mpo),e(Oh,Epo),e(Oh,cN),e(cN,Cpo),e(Oh,wpo),e(Y,Apo),e(Y,Vh),e(Vh,Ele),e(Ele,Lpo),e(Vh,ypo),e(Vh,fN),e(fN,xpo),e(Vh,$po),e(Y,kpo),e(Y,Xh),e(Xh,Cle),e(Cle,Spo),e(Xh,Rpo),e(Xh,mN),e(mN,Ppo),e(Xh,Bpo),e(Y,Ipo),e(Y,zh),e(zh,wle),e(wle,Npo),e(zh,qpo),e(zh,gN),e(gN,jpo),e(zh,Dpo),e(Y,Gpo),e(Y,Wh),e(Wh,Ale),e(Ale,Opo),e(Wh,Vpo),e(Wh,hN),e(hN,Xpo),e(Wh,zpo),e(Y,Wpo),e(Y,Qh),e(Qh,Lle),e(Lle,Qpo),e(Qh,Hpo),e(Qh,pN),e(pN,Upo),e(Qh,Jpo),e(Y,Ypo),e(Y,Hh),e(Hh,yle),e(yle,Kpo),e(Hh,Zpo),e(Hh,uN),e(uN,euo),e(Hh,ouo),e(Y,ruo),e(Y,Uh),e(Uh,xle),e(xle,tuo),e(Uh,auo),e(Uh,_N),e(_N,nuo),e(Uh,suo),e(Y,luo),e(Y,Jh),e(Jh,$le),e($le,iuo),e(Jh,duo),e(Jh,bN),e(bN,cuo),e(Jh,fuo),e(Y,muo),e(Y,Yh),e(Yh,kle),e(kle,guo),e(Yh,huo),e(Yh,vN),e(vN,puo),e(Yh,uuo),e(Y,_uo),e(Y,Kh),e(Kh,Sle),e(Sle,buo),e(Kh,vuo),e(Kh,FN),e(FN,Fuo),e(Kh,Tuo),e(Y,Muo),e(Y,Zh),e(Zh,Rle),e(Rle,Euo),e(Zh,Cuo),e(Zh,TN),e(TN,wuo),e(Zh,Auo),e(Y,Luo),e(Y,ep),e(ep,Ple),e(Ple,yuo),e(ep,xuo),e(ep,MN),e(MN,$uo),e(ep,kuo),e(Y,Suo),e(Y,op),e(op,Ble),e(Ble,Ruo),e(op,Puo),e(op,EN),e(EN,Buo),e(op,Iuo),e(He,Nuo),M(rp,He,null),e(He,quo),M(tp,He,null),e(Lo,juo),e(Lo,ap),M(qL,ap,null),e(ap,Duo),e(ap,Ile),e(Ile,Guo),b(f,dGe,_),b(f,Si,_),e(Si,np),e(np,Nle),M(jL,Nle,null),e(Si,Ouo),e(Si,qle),e(qle,Vuo),b(f,cGe,_),b(f,yo,_),M(DL,yo,null),e(yo,Xuo),e(yo,GL),e(GL,zuo),e(GL,CN),e(CN,Wuo),e(GL,Quo),e(yo,Huo),e(yo,OL),e(OL,Uuo),e(OL,jle),e(jle,Juo),e(OL,Yuo),e(yo,Kuo),e(yo,Ue),M(VL,Ue,null),e(Ue,Zuo),e(Ue,Dle),e(Dle,e_o),e(Ue,o_o),e(Ue,Ri),e(Ri,r_o),e(Ri,Gle),e(Gle,t_o),e(Ri,a_o),e(Ri,Ole),e(Ole,n_o),e(Ri,s_o),e(Ue,l_o),e(Ue,he),e(he,sp),e(sp,Vle),e(Vle,i_o),e(sp,d_o),e(sp,wN),e(wN,c_o),e(sp,f_o),e(he,m_o),e(he,lp),e(lp,Xle),e(Xle,g_o),e(lp,h_o),e(lp,zle),e(zle,p_o),e(lp,u_o),e(he,__o),e(he,ip),e(ip,Wle),e(Wle,b_o),e(ip,v_o),e(ip,AN),e(AN,F_o),e(ip,T_o),e(he,M_o),e(he,dp),e(dp,Qle),e(Qle,E_o),e(dp,C_o),e(dp,LN),e(LN,w_o),e(dp,A_o),e(he,L_o),e(he,cp),e(cp,Hle),e(Hle,y_o),e(cp,x_o),e(cp,yN),e(yN,$_o),e(cp,k_o),e(he,S_o),e(he,fp),e(fp,Ule),e(Ule,R_o),e(fp,P_o),e(fp,xN),e(xN,B_o),e(fp,I_o),e(he,N_o),e(he,mp),e(mp,Jle),e(Jle,q_o),e(mp,j_o),e(mp,$N),e($N,D_o),e(mp,G_o),e(he,O_o),e(he,gp),e(gp,Yle),e(Yle,V_o),e(gp,X_o),e(gp,kN),e(kN,z_o),e(gp,W_o),e(he,Q_o),e(he,hp),e(hp,Kle),e(Kle,H_o),e(hp,U_o),e(hp,SN),e(SN,J_o),e(hp,Y_o),e(he,K_o),e(he,pp),e(pp,Zle),e(Zle,Z_o),e(pp,e1o),e(pp,RN),e(RN,o1o),e(pp,r1o),e(he,t1o),e(he,up),e(up,eie),e(eie,a1o),e(up,n1o),e(up,PN),e(PN,s1o),e(up,l1o),e(he,i1o),e(he,_p),e(_p,oie),e(oie,d1o),e(_p,c1o),e(_p,BN),e(BN,f1o),e(_p,m1o),e(he,g1o),e(he,bp),e(bp,rie),e(rie,h1o),e(bp,p1o),e(bp,IN),e(IN,u1o),e(bp,_1o),e(he,b1o),e(he,vp),e(vp,tie),e(tie,v1o),e(vp,F1o),e(vp,NN),e(NN,T1o),e(vp,M1o),e(he,E1o),e(he,Fp),e(Fp,aie),e(aie,C1o),e(Fp,w1o),e(Fp,qN),e(qN,A1o),e(Fp,L1o),e(he,y1o),e(he,Tp),e(Tp,nie),e(nie,x1o),e(Tp,$1o),e(Tp,jN),e(jN,k1o),e(Tp,S1o),e(he,R1o),e(he,Mp),e(Mp,sie),e(sie,P1o),e(Mp,B1o),e(Mp,DN),e(DN,I1o),e(Mp,N1o),e(Ue,q1o),M(Ep,Ue,null),e(Ue,j1o),M(Cp,Ue,null),e(yo,D1o),e(yo,wp),M(XL,wp,null),e(wp,G1o),e(wp,lie),e(lie,O1o),b(f,fGe,_),b(f,Pi,_),e(Pi,Ap),e(Ap,iie),M(zL,iie,null),e(Pi,V1o),e(Pi,die),e(die,X1o),b(f,mGe,_),b(f,xo,_),M(WL,xo,null),e(xo,z1o),e(xo,Bi),e(Bi,W1o),e(Bi,GN),e(GN,Q1o),e(Bi,H1o),e(Bi,ON),e(ON,U1o),e(Bi,J1o),e(xo,Y1o),e(xo,QL),e(QL,K1o),e(QL,cie),e(cie,Z1o),e(QL,e2o),e(xo,o2o),e(xo,nt),M(HL,nt,null),e(nt,r2o),e(nt,fie),e(fie,t2o),e(nt,a2o),e(nt,Ii),e(Ii,n2o),e(Ii,mie),e(mie,s2o),e(Ii,l2o),e(Ii,VN),e(VN,i2o),e(Ii,d2o),e(nt,c2o),M(Lp,nt,null),e(xo,f2o),e(xo,Je),M(UL,Je,null),e(Je,m2o),e(Je,gie),e(gie,g2o),e(Je,h2o),e(Je,Sa),e(Sa,p2o),e(Sa,hie),e(hie,u2o),e(Sa,_2o),e(Sa,pie),e(pie,b2o),e(Sa,v2o),e(Sa,uie),e(uie,F2o),e(Sa,T2o),e(Je,M2o),e(Je,x),e(x,yp),e(yp,_ie),e(_ie,E2o),e(yp,C2o),e(yp,XN),e(XN,w2o),e(yp,A2o),e(x,L2o),e(x,xp),e(xp,bie),e(bie,y2o),e(xp,x2o),e(xp,zN),e(zN,$2o),e(xp,k2o),e(x,S2o),e(x,$p),e($p,vie),e(vie,R2o),e($p,P2o),e($p,WN),e(WN,B2o),e($p,I2o),e(x,N2o),e(x,kp),e(kp,Fie),e(Fie,q2o),e(kp,j2o),e(kp,QN),e(QN,D2o),e(kp,G2o),e(x,O2o),e(x,Sp),e(Sp,Tie),e(Tie,V2o),e(Sp,X2o),e(Sp,HN),e(HN,z2o),e(Sp,W2o),e(x,Q2o),e(x,Rp),e(Rp,Mie),e(Mie,H2o),e(Rp,U2o),e(Rp,UN),e(UN,J2o),e(Rp,Y2o),e(x,K2o),e(x,Pp),e(Pp,Eie),e(Eie,Z2o),e(Pp,ebo),e(Pp,JN),e(JN,obo),e(Pp,rbo),e(x,tbo),e(x,Bp),e(Bp,Cie),e(Cie,abo),e(Bp,nbo),e(Bp,YN),e(YN,sbo),e(Bp,lbo),e(x,ibo),e(x,Ip),e(Ip,wie),e(wie,dbo),e(Ip,cbo),e(Ip,KN),e(KN,fbo),e(Ip,mbo),e(x,gbo),e(x,Np),e(Np,Aie),e(Aie,hbo),e(Np,pbo),e(Np,ZN),e(ZN,ubo),e(Np,_bo),e(x,bbo),e(x,qp),e(qp,Lie),e(Lie,vbo),e(qp,Fbo),e(qp,eq),e(eq,Tbo),e(qp,Mbo),e(x,Ebo),e(x,jp),e(jp,yie),e(yie,Cbo),e(jp,wbo),e(jp,oq),e(oq,Abo),e(jp,Lbo),e(x,ybo),e(x,Dp),e(Dp,xie),e(xie,xbo),e(Dp,$bo),e(Dp,rq),e(rq,kbo),e(Dp,Sbo),e(x,Rbo),e(x,Gp),e(Gp,$ie),e($ie,Pbo),e(Gp,Bbo),e(Gp,tq),e(tq,Ibo),e(Gp,Nbo),e(x,qbo),e(x,Op),e(Op,kie),e(kie,jbo),e(Op,Dbo),e(Op,aq),e(aq,Gbo),e(Op,Obo),e(x,Vbo),e(x,Vp),e(Vp,Sie),e(Sie,Xbo),e(Vp,zbo),e(Vp,nq),e(nq,Wbo),e(Vp,Qbo),e(x,Hbo),e(x,Xp),e(Xp,Rie),e(Rie,Ubo),e(Xp,Jbo),e(Xp,sq),e(sq,Ybo),e(Xp,Kbo),e(x,Zbo),e(x,zp),e(zp,Pie),e(Pie,evo),e(zp,ovo),e(zp,lq),e(lq,rvo),e(zp,tvo),e(x,avo),e(x,Wp),e(Wp,Bie),e(Bie,nvo),e(Wp,svo),e(Wp,iq),e(iq,lvo),e(Wp,ivo),e(x,dvo),e(x,Qp),e(Qp,Iie),e(Iie,cvo),e(Qp,fvo),e(Qp,dq),e(dq,mvo),e(Qp,gvo),e(x,hvo),e(x,Hp),e(Hp,Nie),e(Nie,pvo),e(Hp,uvo),e(Hp,cq),e(cq,_vo),e(Hp,bvo),e(x,vvo),e(x,Up),e(Up,qie),e(qie,Fvo),e(Up,Tvo),e(Up,fq),e(fq,Mvo),e(Up,Evo),e(x,Cvo),e(x,Jp),e(Jp,jie),e(jie,wvo),e(Jp,Avo),e(Jp,mq),e(mq,Lvo),e(Jp,yvo),e(x,xvo),e(x,Yp),e(Yp,Die),e(Die,$vo),e(Yp,kvo),e(Yp,gq),e(gq,Svo),e(Yp,Rvo),e(x,Pvo),e(x,Kp),e(Kp,Gie),e(Gie,Bvo),e(Kp,Ivo),e(Kp,hq),e(hq,Nvo),e(Kp,qvo),e(x,jvo),e(x,Zp),e(Zp,Oie),e(Oie,Dvo),e(Zp,Gvo),e(Zp,pq),e(pq,Ovo),e(Zp,Vvo),e(x,Xvo),e(x,eu),e(eu,Vie),e(Vie,zvo),e(eu,Wvo),e(eu,uq),e(uq,Qvo),e(eu,Hvo),e(x,Uvo),e(x,ou),e(ou,Xie),e(Xie,Jvo),e(ou,Yvo),e(ou,_q),e(_q,Kvo),e(ou,Zvo),e(x,e3o),e(x,ru),e(ru,zie),e(zie,o3o),e(ru,r3o),e(ru,bq),e(bq,t3o),e(ru,a3o),e(x,n3o),e(x,tu),e(tu,Wie),e(Wie,s3o),e(tu,l3o),e(tu,vq),e(vq,i3o),e(tu,d3o),e(x,c3o),e(x,au),e(au,Qie),e(Qie,f3o),e(au,m3o),e(au,Fq),e(Fq,g3o),e(au,h3o),e(x,p3o),e(x,nu),e(nu,Hie),e(Hie,u3o),e(nu,_3o),e(nu,Tq),e(Tq,b3o),e(nu,v3o),e(x,F3o),e(x,su),e(su,Uie),e(Uie,T3o),e(su,M3o),e(su,Mq),e(Mq,E3o),e(su,C3o),e(x,w3o),e(x,Gs),e(Gs,Jie),e(Jie,A3o),e(Gs,L3o),e(Gs,Eq),e(Eq,y3o),e(Gs,x3o),e(Gs,Cq),e(Cq,$3o),e(Gs,k3o),e(x,S3o),e(x,lu),e(lu,Yie),e(Yie,R3o),e(lu,P3o),e(lu,wq),e(wq,B3o),e(lu,I3o),e(x,N3o),e(x,iu),e(iu,Kie),e(Kie,q3o),e(iu,j3o),e(iu,Aq),e(Aq,D3o),e(iu,G3o),e(x,O3o),e(x,du),e(du,Zie),e(Zie,V3o),e(du,X3o),e(du,Lq),e(Lq,z3o),e(du,W3o),e(x,Q3o),e(x,cu),e(cu,ede),e(ede,H3o),e(cu,U3o),e(cu,yq),e(yq,J3o),e(cu,Y3o),e(x,K3o),e(x,fu),e(fu,ode),e(ode,Z3o),e(fu,e0o),e(fu,xq),e(xq,o0o),e(fu,r0o),e(x,t0o),e(x,mu),e(mu,rde),e(rde,a0o),e(mu,n0o),e(mu,$q),e($q,s0o),e(mu,l0o),e(x,i0o),e(x,gu),e(gu,tde),e(tde,d0o),e(gu,c0o),e(gu,kq),e(kq,f0o),e(gu,m0o),e(x,g0o),e(x,hu),e(hu,ade),e(ade,h0o),e(hu,p0o),e(hu,Sq),e(Sq,u0o),e(hu,_0o),e(x,b0o),e(x,pu),e(pu,nde),e(nde,v0o),e(pu,F0o),e(pu,Rq),e(Rq,T0o),e(pu,M0o),e(x,E0o),e(x,uu),e(uu,sde),e(sde,C0o),e(uu,w0o),e(uu,Pq),e(Pq,A0o),e(uu,L0o),e(x,y0o),e(x,_u),e(_u,lde),e(lde,x0o),e(_u,$0o),e(_u,Bq),e(Bq,k0o),e(_u,S0o),e(x,R0o),e(x,bu),e(bu,ide),e(ide,P0o),e(bu,B0o),e(bu,Iq),e(Iq,I0o),e(bu,N0o),e(x,q0o),e(x,vu),e(vu,dde),e(dde,j0o),e(vu,D0o),e(vu,Nq),e(Nq,G0o),e(vu,O0o),e(x,V0o),e(x,Fu),e(Fu,cde),e(cde,X0o),e(Fu,z0o),e(Fu,qq),e(qq,W0o),e(Fu,Q0o),e(x,H0o),e(x,Tu),e(Tu,fde),e(fde,U0o),e(Tu,J0o),e(Tu,jq),e(jq,Y0o),e(Tu,K0o),e(x,Z0o),e(x,Mu),e(Mu,mde),e(mde,eFo),e(Mu,oFo),e(Mu,Dq),e(Dq,rFo),e(Mu,tFo),e(x,aFo),e(x,Eu),e(Eu,gde),e(gde,nFo),e(Eu,sFo),e(Eu,Gq),e(Gq,lFo),e(Eu,iFo),e(x,dFo),e(x,Cu),e(Cu,hde),e(hde,cFo),e(Cu,fFo),e(Cu,Oq),e(Oq,mFo),e(Cu,gFo),e(x,hFo),e(x,wu),e(wu,pde),e(pde,pFo),e(wu,uFo),e(wu,Vq),e(Vq,_Fo),e(wu,bFo),e(x,vFo),e(x,Au),e(Au,ude),e(ude,FFo),e(Au,TFo),e(Au,Xq),e(Xq,MFo),e(Au,EFo),e(x,CFo),e(x,Lu),e(Lu,_de),e(_de,wFo),e(Lu,AFo),e(Lu,zq),e(zq,LFo),e(Lu,yFo),e(x,xFo),e(x,yu),e(yu,bde),e(bde,$Fo),e(yu,kFo),e(yu,Wq),e(Wq,SFo),e(yu,RFo),e(x,PFo),e(x,xu),e(xu,vde),e(vde,BFo),e(xu,IFo),e(xu,Qq),e(Qq,NFo),e(xu,qFo),e(x,jFo),e(x,$u),e($u,Fde),e(Fde,DFo),e($u,GFo),e($u,Hq),e(Hq,OFo),e($u,VFo),e(x,XFo),e(x,ku),e(ku,Tde),e(Tde,zFo),e(ku,WFo),e(ku,Uq),e(Uq,QFo),e(ku,HFo),e(x,UFo),e(x,Su),e(Su,Mde),e(Mde,JFo),e(Su,YFo),e(Su,Jq),e(Jq,KFo),e(Su,ZFo),e(x,e6o),e(x,Ru),e(Ru,Ede),e(Ede,o6o),e(Ru,r6o),e(Ru,Yq),e(Yq,t6o),e(Ru,a6o),e(x,n6o),e(x,Pu),e(Pu,Cde),e(Cde,s6o),e(Pu,l6o),e(Pu,Kq),e(Kq,i6o),e(Pu,d6o),e(x,c6o),e(x,Bu),e(Bu,wde),e(wde,f6o),e(Bu,m6o),e(Bu,Zq),e(Zq,g6o),e(Bu,h6o),e(x,p6o),e(x,Iu),e(Iu,Ade),e(Ade,u6o),e(Iu,_6o),e(Iu,ej),e(ej,b6o),e(Iu,v6o),e(x,F6o),e(x,Nu),e(Nu,Lde),e(Lde,T6o),e(Nu,M6o),e(Nu,oj),e(oj,E6o),e(Nu,C6o),e(x,w6o),e(x,qu),e(qu,yde),e(yde,A6o),e(qu,L6o),e(qu,rj),e(rj,y6o),e(qu,x6o),e(x,$6o),e(x,ju),e(ju,xde),e(xde,k6o),e(ju,S6o),e(ju,tj),e(tj,R6o),e(ju,P6o),e(x,B6o),e(x,Du),e(Du,$de),e($de,I6o),e(Du,N6o),e(Du,aj),e(aj,q6o),e(Du,j6o),e(x,D6o),e(x,Gu),e(Gu,kde),e(kde,G6o),e(Gu,O6o),e(Gu,nj),e(nj,V6o),e(Gu,X6o),e(x,z6o),e(x,Ou),e(Ou,Sde),e(Sde,W6o),e(Ou,Q6o),e(Ou,sj),e(sj,H6o),e(Ou,U6o),e(x,J6o),e(x,Vu),e(Vu,Rde),e(Rde,Y6o),e(Vu,K6o),e(Vu,lj),e(lj,Z6o),e(Vu,eTo),e(x,oTo),e(x,Xu),e(Xu,Pde),e(Pde,rTo),e(Xu,tTo),e(Xu,ij),e(ij,aTo),e(Xu,nTo),e(x,sTo),e(x,zu),e(zu,Bde),e(Bde,lTo),e(zu,iTo),e(zu,dj),e(dj,dTo),e(zu,cTo),e(x,fTo),e(x,Wu),e(Wu,Ide),e(Ide,mTo),e(Wu,gTo),e(Wu,cj),e(cj,hTo),e(Wu,pTo),e(x,uTo),e(x,Qu),e(Qu,Nde),e(Nde,_To),e(Qu,bTo),e(Qu,fj),e(fj,vTo),e(Qu,FTo),e(x,TTo),e(x,Hu),e(Hu,qde),e(qde,MTo),e(Hu,ETo),e(Hu,mj),e(mj,CTo),e(Hu,wTo),e(x,ATo),e(x,Uu),e(Uu,jde),e(jde,LTo),e(Uu,yTo),e(Uu,gj),e(gj,xTo),e(Uu,$To),e(x,kTo),e(x,Ju),e(Ju,Dde),e(Dde,STo),e(Ju,RTo),e(Ju,hj),e(hj,PTo),e(Ju,BTo),e(x,ITo),e(x,Yu),e(Yu,Gde),e(Gde,NTo),e(Yu,qTo),e(Yu,pj),e(pj,jTo),e(Yu,DTo),e(x,GTo),e(x,Ku),e(Ku,Ode),e(Ode,OTo),e(Ku,VTo),e(Ku,uj),e(uj,XTo),e(Ku,zTo),e(x,WTo),e(x,Zu),e(Zu,Vde),e(Vde,QTo),e(Zu,HTo),e(Zu,_j),e(_j,UTo),e(Zu,JTo),e(x,YTo),e(x,e_),e(e_,Xde),e(Xde,KTo),e(e_,ZTo),e(e_,bj),e(bj,e7o),e(e_,o7o),e(x,r7o),e(x,o_),e(o_,zde),e(zde,t7o),e(o_,a7o),e(o_,vj),e(vj,n7o),e(o_,s7o),e(x,l7o),e(x,r_),e(r_,Wde),e(Wde,i7o),e(r_,d7o),e(r_,Fj),e(Fj,c7o),e(r_,f7o),e(x,m7o),e(x,t_),e(t_,Qde),e(Qde,g7o),e(t_,h7o),e(t_,Tj),e(Tj,p7o),e(t_,u7o),e(x,_7o),e(x,a_),e(a_,Hde),e(Hde,b7o),e(a_,v7o),e(a_,Mj),e(Mj,F7o),e(a_,T7o),e(x,M7o),e(x,n_),e(n_,Ude),e(Ude,E7o),e(n_,C7o),e(n_,Ej),e(Ej,w7o),e(n_,A7o),e(x,L7o),e(x,s_),e(s_,Jde),e(Jde,y7o),e(s_,x7o),e(s_,Cj),e(Cj,$7o),e(s_,k7o),e(x,S7o),e(x,l_),e(l_,Yde),e(Yde,R7o),e(l_,P7o),e(l_,wj),e(wj,B7o),e(l_,I7o),e(x,N7o),e(x,i_),e(i_,Kde),e(Kde,q7o),e(i_,j7o),e(i_,Aj),e(Aj,D7o),e(i_,G7o),e(x,O7o),e(x,d_),e(d_,Zde),e(Zde,V7o),e(d_,X7o),e(d_,Lj),e(Lj,z7o),e(d_,W7o),e(x,Q7o),e(x,c_),e(c_,ece),e(ece,H7o),e(c_,U7o),e(c_,yj),e(yj,J7o),e(c_,Y7o),e(x,K7o),e(x,f_),e(f_,oce),e(oce,Z7o),e(f_,eMo),e(f_,xj),e(xj,oMo),e(f_,rMo),e(x,tMo),e(x,m_),e(m_,rce),e(rce,aMo),e(m_,nMo),e(m_,$j),e($j,sMo),e(m_,lMo),e(x,iMo),e(x,g_),e(g_,tce),e(tce,dMo),e(g_,cMo),e(g_,kj),e(kj,fMo),e(g_,mMo),e(x,gMo),e(x,h_),e(h_,ace),e(ace,hMo),e(h_,pMo),e(h_,Sj),e(Sj,uMo),e(h_,_Mo),e(x,bMo),e(x,p_),e(p_,nce),e(nce,vMo),e(p_,FMo),e(p_,Rj),e(Rj,TMo),e(p_,MMo),e(x,EMo),e(x,u_),e(u_,sce),e(sce,CMo),e(u_,wMo),e(u_,Pj),e(Pj,AMo),e(u_,LMo),e(x,yMo),e(x,__),e(__,lce),e(lce,xMo),e(__,$Mo),e(__,Bj),e(Bj,kMo),e(__,SMo),e(x,RMo),e(x,b_),e(b_,ice),e(ice,PMo),e(b_,BMo),e(b_,Ij),e(Ij,IMo),e(b_,NMo),e(x,qMo),e(x,v_),e(v_,dce),e(dce,jMo),e(v_,DMo),e(v_,Nj),e(Nj,GMo),e(v_,OMo),e(x,VMo),e(x,F_),e(F_,cce),e(cce,XMo),e(F_,zMo),e(F_,qj),e(qj,WMo),e(F_,QMo),e(x,HMo),e(x,T_),e(T_,fce),e(fce,UMo),e(T_,JMo),e(T_,jj),e(jj,YMo),e(T_,KMo),e(x,ZMo),e(x,M_),e(M_,mce),e(mce,e4o),e(M_,o4o),e(M_,Dj),e(Dj,r4o),e(M_,t4o),e(x,a4o),e(x,E_),e(E_,gce),e(gce,n4o),e(E_,s4o),e(E_,Gj),e(Gj,l4o),e(E_,i4o),e(x,d4o),e(x,C_),e(C_,hce),e(hce,c4o),e(C_,f4o),e(C_,Oj),e(Oj,m4o),e(C_,g4o),e(Je,h4o),e(Je,w_),e(w_,p4o),e(w_,pce),e(pce,u4o),e(w_,_4o),e(w_,uce),e(uce,b4o),e(Je,v4o),M(A_,Je,null),b(f,gGe,_),b(f,Ni,_),e(Ni,L_),e(L_,_ce),M(JL,_ce,null),e(Ni,F4o),e(Ni,bce),e(bce,T4o),b(f,hGe,_),b(f,$o,_),M(YL,$o,null),e($o,M4o),e($o,qi),e(qi,E4o),e(qi,Vj),e(Vj,C4o),e(qi,w4o),e(qi,Xj),e(Xj,A4o),e(qi,L4o),e($o,y4o),e($o,KL),e(KL,x4o),e(KL,vce),e(vce,$4o),e(KL,k4o),e($o,S4o),e($o,st),M(ZL,st,null),e(st,R4o),e(st,Fce),e(Fce,P4o),e(st,B4o),e(st,ji),e(ji,I4o),e(ji,Tce),e(Tce,N4o),e(ji,q4o),e(ji,zj),e(zj,j4o),e(ji,D4o),e(st,G4o),M(y_,st,null),e($o,O4o),e($o,Ye),M(ey,Ye,null),e(Ye,V4o),e(Ye,Mce),e(Mce,X4o),e(Ye,z4o),e(Ye,Ra),e(Ra,W4o),e(Ra,Ece),e(Ece,Q4o),e(Ra,H4o),e(Ra,Cce),e(Cce,U4o),e(Ra,J4o),e(Ra,wce),e(wce,Y4o),e(Ra,K4o),e(Ye,Z4o),e(Ye,G),e(G,x_),e(x_,Ace),e(Ace,eEo),e(x_,oEo),e(x_,Wj),e(Wj,rEo),e(x_,tEo),e(G,aEo),e(G,$_),e($_,Lce),e(Lce,nEo),e($_,sEo),e($_,Qj),e(Qj,lEo),e($_,iEo),e(G,dEo),e(G,k_),e(k_,yce),e(yce,cEo),e(k_,fEo),e(k_,Hj),e(Hj,mEo),e(k_,gEo),e(G,hEo),e(G,S_),e(S_,xce),e(xce,pEo),e(S_,uEo),e(S_,Uj),e(Uj,_Eo),e(S_,bEo),e(G,vEo),e(G,R_),e(R_,$ce),e($ce,FEo),e(R_,TEo),e(R_,Jj),e(Jj,MEo),e(R_,EEo),e(G,CEo),e(G,P_),e(P_,kce),e(kce,wEo),e(P_,AEo),e(P_,Yj),e(Yj,LEo),e(P_,yEo),e(G,xEo),e(G,B_),e(B_,Sce),e(Sce,$Eo),e(B_,kEo),e(B_,Kj),e(Kj,SEo),e(B_,REo),e(G,PEo),e(G,I_),e(I_,Rce),e(Rce,BEo),e(I_,IEo),e(I_,Zj),e(Zj,NEo),e(I_,qEo),e(G,jEo),e(G,N_),e(N_,Pce),e(Pce,DEo),e(N_,GEo),e(N_,eD),e(eD,OEo),e(N_,VEo),e(G,XEo),e(G,q_),e(q_,Bce),e(Bce,zEo),e(q_,WEo),e(q_,oD),e(oD,QEo),e(q_,HEo),e(G,UEo),e(G,j_),e(j_,Ice),e(Ice,JEo),e(j_,YEo),e(j_,rD),e(rD,KEo),e(j_,ZEo),e(G,eCo),e(G,D_),e(D_,Nce),e(Nce,oCo),e(D_,rCo),e(D_,tD),e(tD,tCo),e(D_,aCo),e(G,nCo),e(G,G_),e(G_,qce),e(qce,sCo),e(G_,lCo),e(G_,aD),e(aD,iCo),e(G_,dCo),e(G,cCo),e(G,O_),e(O_,jce),e(jce,fCo),e(O_,mCo),e(O_,nD),e(nD,gCo),e(O_,hCo),e(G,pCo),e(G,V_),e(V_,Dce),e(Dce,uCo),e(V_,_Co),e(V_,sD),e(sD,bCo),e(V_,vCo),e(G,FCo),e(G,X_),e(X_,Gce),e(Gce,TCo),e(X_,MCo),e(X_,lD),e(lD,ECo),e(X_,CCo),e(G,wCo),e(G,z_),e(z_,Oce),e(Oce,ACo),e(z_,LCo),e(z_,iD),e(iD,yCo),e(z_,xCo),e(G,$Co),e(G,W_),e(W_,Vce),e(Vce,kCo),e(W_,SCo),e(W_,dD),e(dD,RCo),e(W_,PCo),e(G,BCo),e(G,Q_),e(Q_,Xce),e(Xce,ICo),e(Q_,NCo),e(Q_,cD),e(cD,qCo),e(Q_,jCo),e(G,DCo),e(G,H_),e(H_,zce),e(zce,GCo),e(H_,OCo),e(H_,fD),e(fD,VCo),e(H_,XCo),e(G,zCo),e(G,U_),e(U_,Wce),e(Wce,WCo),e(U_,QCo),e(U_,mD),e(mD,HCo),e(U_,UCo),e(G,JCo),e(G,J_),e(J_,Qce),e(Qce,YCo),e(J_,KCo),e(J_,gD),e(gD,ZCo),e(J_,e5o),e(G,o5o),e(G,Y_),e(Y_,Hce),e(Hce,r5o),e(Y_,t5o),e(Y_,hD),e(hD,a5o),e(Y_,n5o),e(G,s5o),e(G,K_),e(K_,Uce),e(Uce,l5o),e(K_,i5o),e(K_,pD),e(pD,d5o),e(K_,c5o),e(G,f5o),e(G,Z_),e(Z_,Jce),e(Jce,m5o),e(Z_,g5o),e(Z_,uD),e(uD,h5o),e(Z_,p5o),e(G,u5o),e(G,e1),e(e1,Yce),e(Yce,_5o),e(e1,b5o),e(e1,_D),e(_D,v5o),e(e1,F5o),e(G,T5o),e(G,o1),e(o1,Kce),e(Kce,M5o),e(o1,E5o),e(o1,bD),e(bD,C5o),e(o1,w5o),e(G,A5o),e(G,r1),e(r1,Zce),e(Zce,L5o),e(r1,y5o),e(r1,vD),e(vD,x5o),e(r1,$5o),e(G,k5o),e(G,t1),e(t1,efe),e(efe,S5o),e(t1,R5o),e(t1,FD),e(FD,P5o),e(t1,B5o),e(G,I5o),e(G,a1),e(a1,ofe),e(ofe,N5o),e(a1,q5o),e(a1,TD),e(TD,j5o),e(a1,D5o),e(G,G5o),e(G,n1),e(n1,rfe),e(rfe,O5o),e(n1,V5o),e(n1,MD),e(MD,X5o),e(n1,z5o),e(G,W5o),e(G,s1),e(s1,tfe),e(tfe,Q5o),e(s1,H5o),e(s1,ED),e(ED,U5o),e(s1,J5o),e(G,Y5o),e(G,l1),e(l1,afe),e(afe,K5o),e(l1,Z5o),e(l1,CD),e(CD,ewo),e(l1,owo),e(G,rwo),e(G,i1),e(i1,nfe),e(nfe,two),e(i1,awo),e(i1,wD),e(wD,nwo),e(i1,swo),e(G,lwo),e(G,d1),e(d1,sfe),e(sfe,iwo),e(d1,dwo),e(d1,AD),e(AD,cwo),e(d1,fwo),e(G,mwo),e(G,c1),e(c1,lfe),e(lfe,gwo),e(c1,hwo),e(c1,LD),e(LD,pwo),e(c1,uwo),e(G,_wo),e(G,f1),e(f1,ife),e(ife,bwo),e(f1,vwo),e(f1,yD),e(yD,Fwo),e(f1,Two),e(G,Mwo),e(G,m1),e(m1,dfe),e(dfe,Ewo),e(m1,Cwo),e(m1,xD),e(xD,wwo),e(m1,Awo),e(G,Lwo),e(G,g1),e(g1,cfe),e(cfe,ywo),e(g1,xwo),e(g1,$D),e($D,$wo),e(g1,kwo),e(G,Swo),e(G,h1),e(h1,ffe),e(ffe,Rwo),e(h1,Pwo),e(h1,kD),e(kD,Bwo),e(h1,Iwo),e(G,Nwo),e(G,p1),e(p1,mfe),e(mfe,qwo),e(p1,jwo),e(p1,SD),e(SD,Dwo),e(p1,Gwo),e(G,Owo),e(G,u1),e(u1,gfe),e(gfe,Vwo),e(u1,Xwo),e(u1,RD),e(RD,zwo),e(u1,Wwo),e(G,Qwo),e(G,_1),e(_1,hfe),e(hfe,Hwo),e(_1,Uwo),e(_1,PD),e(PD,Jwo),e(_1,Ywo),e(Ye,Kwo),e(Ye,b1),e(b1,Zwo),e(b1,pfe),e(pfe,eAo),e(b1,oAo),e(b1,ufe),e(ufe,rAo),e(Ye,tAo),M(v1,Ye,null),b(f,pGe,_),b(f,Di,_),e(Di,F1),e(F1,_fe),M(oy,_fe,null),e(Di,aAo),e(Di,bfe),e(bfe,nAo),b(f,uGe,_),b(f,ko,_),M(ry,ko,null),e(ko,sAo),e(ko,Gi),e(Gi,lAo),e(Gi,BD),e(BD,iAo),e(Gi,dAo),e(Gi,ID),e(ID,cAo),e(Gi,fAo),e(ko,mAo),e(ko,ty),e(ty,gAo),e(ty,vfe),e(vfe,hAo),e(ty,pAo),e(ko,uAo),e(ko,lt),M(ay,lt,null),e(lt,_Ao),e(lt,Ffe),e(Ffe,bAo),e(lt,vAo),e(lt,Oi),e(Oi,FAo),e(Oi,Tfe),e(Tfe,TAo),e(Oi,MAo),e(Oi,ND),e(ND,EAo),e(Oi,CAo),e(lt,wAo),M(T1,lt,null),e(ko,AAo),e(ko,Ke),M(ny,Ke,null),e(Ke,LAo),e(Ke,Mfe),e(Mfe,yAo),e(Ke,xAo),e(Ke,Pa),e(Pa,$Ao),e(Pa,Efe),e(Efe,kAo),e(Pa,SAo),e(Pa,Cfe),e(Cfe,RAo),e(Pa,PAo),e(Pa,wfe),e(wfe,BAo),e(Pa,IAo),e(Ke,NAo),e(Ke,z),e(z,M1),e(M1,Afe),e(Afe,qAo),e(M1,jAo),e(M1,qD),e(qD,DAo),e(M1,GAo),e(z,OAo),e(z,E1),e(E1,Lfe),e(Lfe,VAo),e(E1,XAo),e(E1,jD),e(jD,zAo),e(E1,WAo),e(z,QAo),e(z,C1),e(C1,yfe),e(yfe,HAo),e(C1,UAo),e(C1,DD),e(DD,JAo),e(C1,YAo),e(z,KAo),e(z,w1),e(w1,xfe),e(xfe,ZAo),e(w1,eLo),e(w1,GD),e(GD,oLo),e(w1,rLo),e(z,tLo),e(z,A1),e(A1,$fe),e($fe,aLo),e(A1,nLo),e(A1,OD),e(OD,sLo),e(A1,lLo),e(z,iLo),e(z,L1),e(L1,kfe),e(kfe,dLo),e(L1,cLo),e(L1,VD),e(VD,fLo),e(L1,mLo),e(z,gLo),e(z,y1),e(y1,Sfe),e(Sfe,hLo),e(y1,pLo),e(y1,XD),e(XD,uLo),e(y1,_Lo),e(z,bLo),e(z,x1),e(x1,Rfe),e(Rfe,vLo),e(x1,FLo),e(x1,zD),e(zD,TLo),e(x1,MLo),e(z,ELo),e(z,$1),e($1,Pfe),e(Pfe,CLo),e($1,wLo),e($1,WD),e(WD,ALo),e($1,LLo),e(z,yLo),e(z,k1),e(k1,Bfe),e(Bfe,xLo),e(k1,$Lo),e(k1,QD),e(QD,kLo),e(k1,SLo),e(z,RLo),e(z,S1),e(S1,Ife),e(Ife,PLo),e(S1,BLo),e(S1,HD),e(HD,ILo),e(S1,NLo),e(z,qLo),e(z,R1),e(R1,Nfe),e(Nfe,jLo),e(R1,DLo),e(R1,UD),e(UD,GLo),e(R1,OLo),e(z,VLo),e(z,P1),e(P1,qfe),e(qfe,XLo),e(P1,zLo),e(P1,JD),e(JD,WLo),e(P1,QLo),e(z,HLo),e(z,B1),e(B1,jfe),e(jfe,ULo),e(B1,JLo),e(B1,YD),e(YD,YLo),e(B1,KLo),e(z,ZLo),e(z,I1),e(I1,Dfe),e(Dfe,eyo),e(I1,oyo),e(I1,KD),e(KD,ryo),e(I1,tyo),e(z,ayo),e(z,N1),e(N1,Gfe),e(Gfe,nyo),e(N1,syo),e(N1,ZD),e(ZD,lyo),e(N1,iyo),e(z,dyo),e(z,q1),e(q1,Ofe),e(Ofe,cyo),e(q1,fyo),e(q1,eG),e(eG,myo),e(q1,gyo),e(z,hyo),e(z,j1),e(j1,Vfe),e(Vfe,pyo),e(j1,uyo),e(j1,oG),e(oG,_yo),e(j1,byo),e(z,vyo),e(z,D1),e(D1,Xfe),e(Xfe,Fyo),e(D1,Tyo),e(D1,rG),e(rG,Myo),e(D1,Eyo),e(z,Cyo),e(z,G1),e(G1,zfe),e(zfe,wyo),e(G1,Ayo),e(G1,tG),e(tG,Lyo),e(G1,yyo),e(z,xyo),e(z,O1),e(O1,Wfe),e(Wfe,$yo),e(O1,kyo),e(O1,aG),e(aG,Syo),e(O1,Ryo),e(z,Pyo),e(z,V1),e(V1,Qfe),e(Qfe,Byo),e(V1,Iyo),e(V1,nG),e(nG,Nyo),e(V1,qyo),e(z,jyo),e(z,X1),e(X1,Hfe),e(Hfe,Dyo),e(X1,Gyo),e(X1,sG),e(sG,Oyo),e(X1,Vyo),e(z,Xyo),e(z,z1),e(z1,Ufe),e(Ufe,zyo),e(z1,Wyo),e(z1,lG),e(lG,Qyo),e(z1,Hyo),e(z,Uyo),e(z,W1),e(W1,Jfe),e(Jfe,Jyo),e(W1,Yyo),e(W1,iG),e(iG,Kyo),e(W1,Zyo),e(z,e8o),e(z,Q1),e(Q1,Yfe),e(Yfe,o8o),e(Q1,r8o),e(Q1,dG),e(dG,t8o),e(Q1,a8o),e(z,n8o),e(z,H1),e(H1,Kfe),e(Kfe,s8o),e(H1,l8o),e(H1,cG),e(cG,i8o),e(H1,d8o),e(z,c8o),e(z,U1),e(U1,Zfe),e(Zfe,f8o),e(U1,m8o),e(U1,fG),e(fG,g8o),e(U1,h8o),e(z,p8o),e(z,J1),e(J1,eme),e(eme,u8o),e(J1,_8o),e(J1,mG),e(mG,b8o),e(J1,v8o),e(z,F8o),e(z,Y1),e(Y1,ome),e(ome,T8o),e(Y1,M8o),e(Y1,gG),e(gG,E8o),e(Y1,C8o),e(z,w8o),e(z,K1),e(K1,rme),e(rme,A8o),e(K1,L8o),e(K1,hG),e(hG,y8o),e(K1,x8o),e(z,$8o),e(z,Z1),e(Z1,tme),e(tme,k8o),e(Z1,S8o),e(Z1,pG),e(pG,R8o),e(Z1,P8o),e(z,B8o),e(z,e2),e(e2,ame),e(ame,I8o),e(e2,N8o),e(e2,uG),e(uG,q8o),e(e2,j8o),e(z,D8o),e(z,o2),e(o2,nme),e(nme,G8o),e(o2,O8o),e(o2,_G),e(_G,V8o),e(o2,X8o),e(z,z8o),e(z,r2),e(r2,sme),e(sme,W8o),e(r2,Q8o),e(r2,bG),e(bG,H8o),e(r2,U8o),e(z,J8o),e(z,t2),e(t2,lme),e(lme,Y8o),e(t2,K8o),e(t2,vG),e(vG,Z8o),e(t2,e9o),e(z,o9o),e(z,a2),e(a2,ime),e(ime,r9o),e(a2,t9o),e(a2,FG),e(FG,a9o),e(a2,n9o),e(z,s9o),e(z,n2),e(n2,dme),e(dme,l9o),e(n2,i9o),e(n2,TG),e(TG,d9o),e(n2,c9o),e(Ke,f9o),e(Ke,s2),e(s2,m9o),e(s2,cme),e(cme,g9o),e(s2,h9o),e(s2,fme),e(fme,p9o),e(Ke,u9o),M(l2,Ke,null),b(f,_Ge,_),b(f,Vi,_),e(Vi,i2),e(i2,mme),M(sy,mme,null),e(Vi,_9o),e(Vi,gme),e(gme,b9o),b(f,bGe,_),b(f,So,_),M(ly,So,null),e(So,v9o),e(So,Xi),e(Xi,F9o),e(Xi,MG),e(MG,T9o),e(Xi,M9o),e(Xi,EG),e(EG,E9o),e(Xi,C9o),e(So,w9o),e(So,iy),e(iy,A9o),e(iy,hme),e(hme,L9o),e(iy,y9o),e(So,x9o),e(So,it),M(dy,it,null),e(it,$9o),e(it,pme),e(pme,k9o),e(it,S9o),e(it,zi),e(zi,R9o),e(zi,ume),e(ume,P9o),e(zi,B9o),e(zi,CG),e(CG,I9o),e(zi,N9o),e(it,q9o),M(d2,it,null),e(So,j9o),e(So,Ze),M(cy,Ze,null),e(Ze,D9o),e(Ze,_me),e(_me,G9o),e(Ze,O9o),e(Ze,Ba),e(Ba,V9o),e(Ba,bme),e(bme,X9o),e(Ba,z9o),e(Ba,vme),e(vme,W9o),e(Ba,Q9o),e(Ba,Fme),e(Fme,H9o),e(Ba,U9o),e(Ze,J9o),e(Ze,Q),e(Q,c2),e(c2,Tme),e(Tme,Y9o),e(c2,K9o),e(c2,wG),e(wG,Z9o),e(c2,exo),e(Q,oxo),e(Q,f2),e(f2,Mme),e(Mme,rxo),e(f2,txo),e(f2,AG),e(AG,axo),e(f2,nxo),e(Q,sxo),e(Q,m2),e(m2,Eme),e(Eme,lxo),e(m2,ixo),e(m2,LG),e(LG,dxo),e(m2,cxo),e(Q,fxo),e(Q,g2),e(g2,Cme),e(Cme,mxo),e(g2,gxo),e(g2,yG),e(yG,hxo),e(g2,pxo),e(Q,uxo),e(Q,h2),e(h2,wme),e(wme,_xo),e(h2,bxo),e(h2,xG),e(xG,vxo),e(h2,Fxo),e(Q,Txo),e(Q,p2),e(p2,Ame),e(Ame,Mxo),e(p2,Exo),e(p2,$G),e($G,Cxo),e(p2,wxo),e(Q,Axo),e(Q,u2),e(u2,Lme),e(Lme,Lxo),e(u2,yxo),e(u2,kG),e(kG,xxo),e(u2,$xo),e(Q,kxo),e(Q,_2),e(_2,yme),e(yme,Sxo),e(_2,Rxo),e(_2,SG),e(SG,Pxo),e(_2,Bxo),e(Q,Ixo),e(Q,b2),e(b2,xme),e(xme,Nxo),e(b2,qxo),e(b2,RG),e(RG,jxo),e(b2,Dxo),e(Q,Gxo),e(Q,v2),e(v2,$me),e($me,Oxo),e(v2,Vxo),e(v2,PG),e(PG,Xxo),e(v2,zxo),e(Q,Wxo),e(Q,F2),e(F2,kme),e(kme,Qxo),e(F2,Hxo),e(F2,BG),e(BG,Uxo),e(F2,Jxo),e(Q,Yxo),e(Q,T2),e(T2,Sme),e(Sme,Kxo),e(T2,Zxo),e(T2,IG),e(IG,e$o),e(T2,o$o),e(Q,r$o),e(Q,M2),e(M2,Rme),e(Rme,t$o),e(M2,a$o),e(M2,NG),e(NG,n$o),e(M2,s$o),e(Q,l$o),e(Q,E2),e(E2,Pme),e(Pme,i$o),e(E2,d$o),e(E2,qG),e(qG,c$o),e(E2,f$o),e(Q,m$o),e(Q,C2),e(C2,Bme),e(Bme,g$o),e(C2,h$o),e(C2,jG),e(jG,p$o),e(C2,u$o),e(Q,_$o),e(Q,w2),e(w2,Ime),e(Ime,b$o),e(w2,v$o),e(w2,DG),e(DG,F$o),e(w2,T$o),e(Q,M$o),e(Q,A2),e(A2,Nme),e(Nme,E$o),e(A2,C$o),e(A2,GG),e(GG,w$o),e(A2,A$o),e(Q,L$o),e(Q,L2),e(L2,qme),e(qme,y$o),e(L2,x$o),e(L2,OG),e(OG,$$o),e(L2,k$o),e(Q,S$o),e(Q,y2),e(y2,jme),e(jme,R$o),e(y2,P$o),e(y2,VG),e(VG,B$o),e(y2,I$o),e(Q,N$o),e(Q,x2),e(x2,Dme),e(Dme,q$o),e(x2,j$o),e(x2,XG),e(XG,D$o),e(x2,G$o),e(Q,O$o),e(Q,$2),e($2,Gme),e(Gme,V$o),e($2,X$o),e($2,zG),e(zG,z$o),e($2,W$o),e(Q,Q$o),e(Q,k2),e(k2,Ome),e(Ome,H$o),e(k2,U$o),e(k2,WG),e(WG,J$o),e(k2,Y$o),e(Q,K$o),e(Q,S2),e(S2,Vme),e(Vme,Z$o),e(S2,eko),e(S2,QG),e(QG,oko),e(S2,rko),e(Q,tko),e(Q,R2),e(R2,Xme),e(Xme,ako),e(R2,nko),e(R2,HG),e(HG,sko),e(R2,lko),e(Q,iko),e(Q,P2),e(P2,zme),e(zme,dko),e(P2,cko),e(P2,UG),e(UG,fko),e(P2,mko),e(Q,gko),e(Q,B2),e(B2,Wme),e(Wme,hko),e(B2,pko),e(B2,JG),e(JG,uko),e(B2,_ko),e(Q,bko),e(Q,I2),e(I2,Qme),e(Qme,vko),e(I2,Fko),e(I2,YG),e(YG,Tko),e(I2,Mko),e(Q,Eko),e(Q,N2),e(N2,Hme),e(Hme,Cko),e(N2,wko),e(N2,KG),e(KG,Ako),e(N2,Lko),e(Q,yko),e(Q,q2),e(q2,Ume),e(Ume,xko),e(q2,$ko),e(q2,ZG),e(ZG,kko),e(q2,Sko),e(Q,Rko),e(Q,j2),e(j2,Jme),e(Jme,Pko),e(j2,Bko),e(j2,eO),e(eO,Iko),e(j2,Nko),e(Q,qko),e(Q,D2),e(D2,Yme),e(Yme,jko),e(D2,Dko),e(D2,oO),e(oO,Gko),e(D2,Oko),e(Q,Vko),e(Q,G2),e(G2,Kme),e(Kme,Xko),e(G2,zko),e(G2,Zme),e(Zme,Wko),e(G2,Qko),e(Q,Hko),e(Q,O2),e(O2,ege),e(ege,Uko),e(O2,Jko),e(O2,rO),e(rO,Yko),e(O2,Kko),e(Q,Zko),e(Q,V2),e(V2,oge),e(oge,eSo),e(V2,oSo),e(V2,tO),e(tO,rSo),e(V2,tSo),e(Q,aSo),e(Q,X2),e(X2,rge),e(rge,nSo),e(X2,sSo),e(X2,aO),e(aO,lSo),e(X2,iSo),e(Q,dSo),e(Q,z2),e(z2,tge),e(tge,cSo),e(z2,fSo),e(z2,nO),e(nO,mSo),e(z2,gSo),e(Ze,hSo),e(Ze,W2),e(W2,pSo),e(W2,age),e(age,uSo),e(W2,_So),e(W2,nge),e(nge,bSo),e(Ze,vSo),M(Q2,Ze,null),b(f,vGe,_),b(f,Wi,_),e(Wi,H2),e(H2,sge),M(fy,sge,null),e(Wi,FSo),e(Wi,lge),e(lge,TSo),b(f,FGe,_),b(f,Ro,_),M(my,Ro,null),e(Ro,MSo),e(Ro,Qi),e(Qi,ESo),e(Qi,sO),e(sO,CSo),e(Qi,wSo),e(Qi,lO),e(lO,ASo),e(Qi,LSo),e(Ro,ySo),e(Ro,gy),e(gy,xSo),e(gy,ige),e(ige,$So),e(gy,kSo),e(Ro,SSo),e(Ro,dt),M(hy,dt,null),e(dt,RSo),e(dt,dge),e(dge,PSo),e(dt,BSo),e(dt,Hi),e(Hi,ISo),e(Hi,cge),e(cge,NSo),e(Hi,qSo),e(Hi,iO),e(iO,jSo),e(Hi,DSo),e(dt,GSo),M(U2,dt,null),e(Ro,OSo),e(Ro,eo),M(py,eo,null),e(eo,VSo),e(eo,fge),e(fge,XSo),e(eo,zSo),e(eo,Ia),e(Ia,WSo),e(Ia,mge),e(mge,QSo),e(Ia,HSo),e(Ia,gge),e(gge,USo),e(Ia,JSo),e(Ia,hge),e(hge,YSo),e(Ia,KSo),e(eo,ZSo),e(eo,pe),e(pe,J2),e(J2,pge),e(pge,eRo),e(J2,oRo),e(J2,dO),e(dO,rRo),e(J2,tRo),e(pe,aRo),e(pe,Y2),e(Y2,uge),e(uge,nRo),e(Y2,sRo),e(Y2,cO),e(cO,lRo),e(Y2,iRo),e(pe,dRo),e(pe,K2),e(K2,_ge),e(_ge,cRo),e(K2,fRo),e(K2,fO),e(fO,mRo),e(K2,gRo),e(pe,hRo),e(pe,Z2),e(Z2,bge),e(bge,pRo),e(Z2,uRo),e(Z2,mO),e(mO,_Ro),e(Z2,bRo),e(pe,vRo),e(pe,eb),e(eb,vge),e(vge,FRo),e(eb,TRo),e(eb,gO),e(gO,MRo),e(eb,ERo),e(pe,CRo),e(pe,ob),e(ob,Fge),e(Fge,wRo),e(ob,ARo),e(ob,hO),e(hO,LRo),e(ob,yRo),e(pe,xRo),e(pe,rb),e(rb,Tge),e(Tge,$Ro),e(rb,kRo),e(rb,pO),e(pO,SRo),e(rb,RRo),e(pe,PRo),e(pe,tb),e(tb,Mge),e(Mge,BRo),e(tb,IRo),e(tb,uO),e(uO,NRo),e(tb,qRo),e(pe,jRo),e(pe,ab),e(ab,Ege),e(Ege,DRo),e(ab,GRo),e(ab,_O),e(_O,ORo),e(ab,VRo),e(pe,XRo),e(pe,nb),e(nb,Cge),e(Cge,zRo),e(nb,WRo),e(nb,bO),e(bO,QRo),e(nb,HRo),e(pe,URo),e(pe,sb),e(sb,wge),e(wge,JRo),e(sb,YRo),e(sb,vO),e(vO,KRo),e(sb,ZRo),e(pe,ePo),e(pe,lb),e(lb,Age),e(Age,oPo),e(lb,rPo),e(lb,FO),e(FO,tPo),e(lb,aPo),e(pe,nPo),e(pe,ib),e(ib,Lge),e(Lge,sPo),e(ib,lPo),e(ib,TO),e(TO,iPo),e(ib,dPo),e(pe,cPo),e(pe,db),e(db,yge),e(yge,fPo),e(db,mPo),e(db,MO),e(MO,gPo),e(db,hPo),e(pe,pPo),e(pe,cb),e(cb,xge),e(xge,uPo),e(cb,_Po),e(cb,EO),e(EO,bPo),e(cb,vPo),e(pe,FPo),e(pe,fb),e(fb,$ge),e($ge,TPo),e(fb,MPo),e(fb,CO),e(CO,EPo),e(fb,CPo),e(pe,wPo),e(pe,mb),e(mb,kge),e(kge,APo),e(mb,LPo),e(mb,wO),e(wO,yPo),e(mb,xPo),e(eo,$Po),e(eo,gb),e(gb,kPo),e(gb,Sge),e(Sge,SPo),e(gb,RPo),e(gb,Rge),e(Rge,PPo),e(eo,BPo),M(hb,eo,null),b(f,TGe,_),b(f,Ui,_),e(Ui,pb),e(pb,Pge),M(uy,Pge,null),e(Ui,IPo),e(Ui,Bge),e(Bge,NPo),b(f,MGe,_),b(f,Po,_),M(_y,Po,null),e(Po,qPo),e(Po,Ji),e(Ji,jPo),e(Ji,AO),e(AO,DPo),e(Ji,GPo),e(Ji,LO),e(LO,OPo),e(Ji,VPo),e(Po,XPo),e(Po,by),e(by,zPo),e(by,Ige),e(Ige,WPo),e(by,QPo),e(Po,HPo),e(Po,ct),M(vy,ct,null),e(ct,UPo),e(ct,Nge),e(Nge,JPo),e(ct,YPo),e(ct,Yi),e(Yi,KPo),e(Yi,qge),e(qge,ZPo),e(Yi,eBo),e(Yi,yO),e(yO,oBo),e(Yi,rBo),e(ct,tBo),M(ub,ct,null),e(Po,aBo),e(Po,oo),M(Fy,oo,null),e(oo,nBo),e(oo,jge),e(jge,sBo),e(oo,lBo),e(oo,Na),e(Na,iBo),e(Na,Dge),e(Dge,dBo),e(Na,cBo),e(Na,Gge),e(Gge,fBo),e(Na,mBo),e(Na,Oge),e(Oge,gBo),e(Na,hBo),e(oo,pBo),e(oo,N),e(N,_b),e(_b,Vge),e(Vge,uBo),e(_b,_Bo),e(_b,xO),e(xO,bBo),e(_b,vBo),e(N,FBo),e(N,bb),e(bb,Xge),e(Xge,TBo),e(bb,MBo),e(bb,$O),e($O,EBo),e(bb,CBo),e(N,wBo),e(N,vb),e(vb,zge),e(zge,ABo),e(vb,LBo),e(vb,kO),e(kO,yBo),e(vb,xBo),e(N,$Bo),e(N,Fb),e(Fb,Wge),e(Wge,kBo),e(Fb,SBo),e(Fb,SO),e(SO,RBo),e(Fb,PBo),e(N,BBo),e(N,Tb),e(Tb,Qge),e(Qge,IBo),e(Tb,NBo),e(Tb,RO),e(RO,qBo),e(Tb,jBo),e(N,DBo),e(N,Mb),e(Mb,Hge),e(Hge,GBo),e(Mb,OBo),e(Mb,PO),e(PO,VBo),e(Mb,XBo),e(N,zBo),e(N,Eb),e(Eb,Uge),e(Uge,WBo),e(Eb,QBo),e(Eb,BO),e(BO,HBo),e(Eb,UBo),e(N,JBo),e(N,Cb),e(Cb,Jge),e(Jge,YBo),e(Cb,KBo),e(Cb,IO),e(IO,ZBo),e(Cb,eIo),e(N,oIo),e(N,wb),e(wb,Yge),e(Yge,rIo),e(wb,tIo),e(wb,NO),e(NO,aIo),e(wb,nIo),e(N,sIo),e(N,Ab),e(Ab,Kge),e(Kge,lIo),e(Ab,iIo),e(Ab,qO),e(qO,dIo),e(Ab,cIo),e(N,fIo),e(N,Lb),e(Lb,Zge),e(Zge,mIo),e(Lb,gIo),e(Lb,jO),e(jO,hIo),e(Lb,pIo),e(N,uIo),e(N,yb),e(yb,ehe),e(ehe,_Io),e(yb,bIo),e(yb,DO),e(DO,vIo),e(yb,FIo),e(N,TIo),e(N,xb),e(xb,ohe),e(ohe,MIo),e(xb,EIo),e(xb,GO),e(GO,CIo),e(xb,wIo),e(N,AIo),e(N,$b),e($b,rhe),e(rhe,LIo),e($b,yIo),e($b,OO),e(OO,xIo),e($b,$Io),e(N,kIo),e(N,kb),e(kb,the),e(the,SIo),e(kb,RIo),e(kb,VO),e(VO,PIo),e(kb,BIo),e(N,IIo),e(N,Sb),e(Sb,ahe),e(ahe,NIo),e(Sb,qIo),e(Sb,XO),e(XO,jIo),e(Sb,DIo),e(N,GIo),e(N,Rb),e(Rb,nhe),e(nhe,OIo),e(Rb,VIo),e(Rb,zO),e(zO,XIo),e(Rb,zIo),e(N,WIo),e(N,Pb),e(Pb,she),e(she,QIo),e(Pb,HIo),e(Pb,WO),e(WO,UIo),e(Pb,JIo),e(N,YIo),e(N,Bb),e(Bb,lhe),e(lhe,KIo),e(Bb,ZIo),e(Bb,QO),e(QO,eNo),e(Bb,oNo),e(N,rNo),e(N,Ib),e(Ib,ihe),e(ihe,tNo),e(Ib,aNo),e(Ib,HO),e(HO,nNo),e(Ib,sNo),e(N,lNo),e(N,Nb),e(Nb,dhe),e(dhe,iNo),e(Nb,dNo),e(Nb,UO),e(UO,cNo),e(Nb,fNo),e(N,mNo),e(N,qb),e(qb,che),e(che,gNo),e(qb,hNo),e(qb,JO),e(JO,pNo),e(qb,uNo),e(N,_No),e(N,jb),e(jb,fhe),e(fhe,bNo),e(jb,vNo),e(jb,YO),e(YO,FNo),e(jb,TNo),e(N,MNo),e(N,Db),e(Db,mhe),e(mhe,ENo),e(Db,CNo),e(Db,KO),e(KO,wNo),e(Db,ANo),e(N,LNo),e(N,Gb),e(Gb,ghe),e(ghe,yNo),e(Gb,xNo),e(Gb,ZO),e(ZO,$No),e(Gb,kNo),e(N,SNo),e(N,Ob),e(Ob,hhe),e(hhe,RNo),e(Ob,PNo),e(Ob,eV),e(eV,BNo),e(Ob,INo),e(N,NNo),e(N,Vb),e(Vb,phe),e(phe,qNo),e(Vb,jNo),e(Vb,oV),e(oV,DNo),e(Vb,GNo),e(N,ONo),e(N,Xb),e(Xb,uhe),e(uhe,VNo),e(Xb,XNo),e(Xb,rV),e(rV,zNo),e(Xb,WNo),e(N,QNo),e(N,zb),e(zb,_he),e(_he,HNo),e(zb,UNo),e(zb,tV),e(tV,JNo),e(zb,YNo),e(N,KNo),e(N,Wb),e(Wb,bhe),e(bhe,ZNo),e(Wb,eqo),e(Wb,aV),e(aV,oqo),e(Wb,rqo),e(N,tqo),e(N,Qb),e(Qb,vhe),e(vhe,aqo),e(Qb,nqo),e(Qb,nV),e(nV,sqo),e(Qb,lqo),e(N,iqo),e(N,Hb),e(Hb,Fhe),e(Fhe,dqo),e(Hb,cqo),e(Hb,sV),e(sV,fqo),e(Hb,mqo),e(N,gqo),e(N,Ub),e(Ub,The),e(The,hqo),e(Ub,pqo),e(Ub,lV),e(lV,uqo),e(Ub,_qo),e(N,bqo),e(N,Jb),e(Jb,Mhe),e(Mhe,vqo),e(Jb,Fqo),e(Jb,iV),e(iV,Tqo),e(Jb,Mqo),e(N,Eqo),e(N,Yb),e(Yb,Ehe),e(Ehe,Cqo),e(Yb,wqo),e(Yb,dV),e(dV,Aqo),e(Yb,Lqo),e(N,yqo),e(N,Kb),e(Kb,Che),e(Che,xqo),e(Kb,$qo),e(Kb,cV),e(cV,kqo),e(Kb,Sqo),e(N,Rqo),e(N,Zb),e(Zb,whe),e(whe,Pqo),e(Zb,Bqo),e(Zb,fV),e(fV,Iqo),e(Zb,Nqo),e(N,qqo),e(N,ev),e(ev,Ahe),e(Ahe,jqo),e(ev,Dqo),e(ev,mV),e(mV,Gqo),e(ev,Oqo),e(N,Vqo),e(N,ov),e(ov,Lhe),e(Lhe,Xqo),e(ov,zqo),e(ov,gV),e(gV,Wqo),e(ov,Qqo),e(N,Hqo),e(N,rv),e(rv,yhe),e(yhe,Uqo),e(rv,Jqo),e(rv,hV),e(hV,Yqo),e(rv,Kqo),e(N,Zqo),e(N,tv),e(tv,xhe),e(xhe,ejo),e(tv,ojo),e(tv,pV),e(pV,rjo),e(tv,tjo),e(N,ajo),e(N,av),e(av,$he),e($he,njo),e(av,sjo),e(av,uV),e(uV,ljo),e(av,ijo),e(N,djo),e(N,nv),e(nv,khe),e(khe,cjo),e(nv,fjo),e(nv,_V),e(_V,mjo),e(nv,gjo),e(N,hjo),e(N,sv),e(sv,She),e(She,pjo),e(sv,ujo),e(sv,bV),e(bV,_jo),e(sv,bjo),e(N,vjo),e(N,lv),e(lv,Rhe),e(Rhe,Fjo),e(lv,Tjo),e(lv,vV),e(vV,Mjo),e(lv,Ejo),e(N,Cjo),e(N,iv),e(iv,Phe),e(Phe,wjo),e(iv,Ajo),e(iv,FV),e(FV,Ljo),e(iv,yjo),e(N,xjo),e(N,dv),e(dv,Bhe),e(Bhe,$jo),e(dv,kjo),e(dv,TV),e(TV,Sjo),e(dv,Rjo),e(N,Pjo),e(N,cv),e(cv,Ihe),e(Ihe,Bjo),e(cv,Ijo),e(cv,MV),e(MV,Njo),e(cv,qjo),e(oo,jjo),e(oo,fv),e(fv,Djo),e(fv,Nhe),e(Nhe,Gjo),e(fv,Ojo),e(fv,qhe),e(qhe,Vjo),e(oo,Xjo),M(mv,oo,null),b(f,EGe,_),b(f,Ki,_),e(Ki,gv),e(gv,jhe),M(Ty,jhe,null),e(Ki,zjo),e(Ki,Dhe),e(Dhe,Wjo),b(f,CGe,_),b(f,Bo,_),M(My,Bo,null),e(Bo,Qjo),e(Bo,Zi),e(Zi,Hjo),e(Zi,EV),e(EV,Ujo),e(Zi,Jjo),e(Zi,CV),e(CV,Yjo),e(Zi,Kjo),e(Bo,Zjo),e(Bo,Ey),e(Ey,eDo),e(Ey,Ghe),e(Ghe,oDo),e(Ey,rDo),e(Bo,tDo),e(Bo,ft),M(Cy,ft,null),e(ft,aDo),e(ft,Ohe),e(Ohe,nDo),e(ft,sDo),e(ft,ed),e(ed,lDo),e(ed,Vhe),e(Vhe,iDo),e(ed,dDo),e(ed,wV),e(wV,cDo),e(ed,fDo),e(ft,mDo),M(hv,ft,null),e(Bo,gDo),e(Bo,ro),M(wy,ro,null),e(ro,hDo),e(ro,Xhe),e(Xhe,pDo),e(ro,uDo),e(ro,qa),e(qa,_Do),e(qa,zhe),e(zhe,bDo),e(qa,vDo),e(qa,Whe),e(Whe,FDo),e(qa,TDo),e(qa,Qhe),e(Qhe,MDo),e(qa,EDo),e(ro,CDo),e(ro,Z),e(Z,pv),e(pv,Hhe),e(Hhe,wDo),e(pv,ADo),e(pv,AV),e(AV,LDo),e(pv,yDo),e(Z,xDo),e(Z,uv),e(uv,Uhe),e(Uhe,$Do),e(uv,kDo),e(uv,LV),e(LV,SDo),e(uv,RDo),e(Z,PDo),e(Z,_v),e(_v,Jhe),e(Jhe,BDo),e(_v,IDo),e(_v,yV),e(yV,NDo),e(_v,qDo),e(Z,jDo),e(Z,bv),e(bv,Yhe),e(Yhe,DDo),e(bv,GDo),e(bv,xV),e(xV,ODo),e(bv,VDo),e(Z,XDo),e(Z,vv),e(vv,Khe),e(Khe,zDo),e(vv,WDo),e(vv,$V),e($V,QDo),e(vv,HDo),e(Z,UDo),e(Z,Fv),e(Fv,Zhe),e(Zhe,JDo),e(Fv,YDo),e(Fv,kV),e(kV,KDo),e(Fv,ZDo),e(Z,eGo),e(Z,Tv),e(Tv,epe),e(epe,oGo),e(Tv,rGo),e(Tv,SV),e(SV,tGo),e(Tv,aGo),e(Z,nGo),e(Z,Mv),e(Mv,ope),e(ope,sGo),e(Mv,lGo),e(Mv,RV),e(RV,iGo),e(Mv,dGo),e(Z,cGo),e(Z,Ev),e(Ev,rpe),e(rpe,fGo),e(Ev,mGo),e(Ev,PV),e(PV,gGo),e(Ev,hGo),e(Z,pGo),e(Z,Cv),e(Cv,tpe),e(tpe,uGo),e(Cv,_Go),e(Cv,BV),e(BV,bGo),e(Cv,vGo),e(Z,FGo),e(Z,wv),e(wv,ape),e(ape,TGo),e(wv,MGo),e(wv,IV),e(IV,EGo),e(wv,CGo),e(Z,wGo),e(Z,Av),e(Av,npe),e(npe,AGo),e(Av,LGo),e(Av,NV),e(NV,yGo),e(Av,xGo),e(Z,$Go),e(Z,Lv),e(Lv,spe),e(spe,kGo),e(Lv,SGo),e(Lv,qV),e(qV,RGo),e(Lv,PGo),e(Z,BGo),e(Z,yv),e(yv,lpe),e(lpe,IGo),e(yv,NGo),e(yv,jV),e(jV,qGo),e(yv,jGo),e(Z,DGo),e(Z,xv),e(xv,ipe),e(ipe,GGo),e(xv,OGo),e(xv,DV),e(DV,VGo),e(xv,XGo),e(Z,zGo),e(Z,$v),e($v,dpe),e(dpe,WGo),e($v,QGo),e($v,GV),e(GV,HGo),e($v,UGo),e(Z,JGo),e(Z,kv),e(kv,cpe),e(cpe,YGo),e(kv,KGo),e(kv,OV),e(OV,ZGo),e(kv,eOo),e(Z,oOo),e(Z,Sv),e(Sv,fpe),e(fpe,rOo),e(Sv,tOo),e(Sv,VV),e(VV,aOo),e(Sv,nOo),e(Z,sOo),e(Z,Rv),e(Rv,mpe),e(mpe,lOo),e(Rv,iOo),e(Rv,XV),e(XV,dOo),e(Rv,cOo),e(Z,fOo),e(Z,Pv),e(Pv,gpe),e(gpe,mOo),e(Pv,gOo),e(Pv,zV),e(zV,hOo),e(Pv,pOo),e(Z,uOo),e(Z,Bv),e(Bv,hpe),e(hpe,_Oo),e(Bv,bOo),e(Bv,WV),e(WV,vOo),e(Bv,FOo),e(Z,TOo),e(Z,Iv),e(Iv,ppe),e(ppe,MOo),e(Iv,EOo),e(Iv,QV),e(QV,COo),e(Iv,wOo),e(Z,AOo),e(Z,Nv),e(Nv,upe),e(upe,LOo),e(Nv,yOo),e(Nv,HV),e(HV,xOo),e(Nv,$Oo),e(Z,kOo),e(Z,qv),e(qv,_pe),e(_pe,SOo),e(qv,ROo),e(qv,UV),e(UV,POo),e(qv,BOo),e(Z,IOo),e(Z,jv),e(jv,bpe),e(bpe,NOo),e(jv,qOo),e(jv,JV),e(JV,jOo),e(jv,DOo),e(Z,GOo),e(Z,Dv),e(Dv,vpe),e(vpe,OOo),e(Dv,VOo),e(Dv,YV),e(YV,XOo),e(Dv,zOo),e(Z,WOo),e(Z,Gv),e(Gv,Fpe),e(Fpe,QOo),e(Gv,HOo),e(Gv,KV),e(KV,UOo),e(Gv,JOo),e(Z,YOo),e(Z,Ov),e(Ov,Tpe),e(Tpe,KOo),e(Ov,ZOo),e(Ov,ZV),e(ZV,eVo),e(Ov,oVo),e(Z,rVo),e(Z,Vv),e(Vv,Mpe),e(Mpe,tVo),e(Vv,aVo),e(Vv,eX),e(eX,nVo),e(Vv,sVo),e(ro,lVo),e(ro,Xv),e(Xv,iVo),e(Xv,Epe),e(Epe,dVo),e(Xv,cVo),e(Xv,Cpe),e(Cpe,fVo),e(ro,mVo),M(zv,ro,null),b(f,wGe,_),b(f,od,_),e(od,Wv),e(Wv,wpe),M(Ay,wpe,null),e(od,gVo),e(od,Ape),e(Ape,hVo),b(f,AGe,_),b(f,Io,_),M(Ly,Io,null),e(Io,pVo),e(Io,rd),e(rd,uVo),e(rd,oX),e(oX,_Vo),e(rd,bVo),e(rd,rX),e(rX,vVo),e(rd,FVo),e(Io,TVo),e(Io,yy),e(yy,MVo),e(yy,Lpe),e(Lpe,EVo),e(yy,CVo),e(Io,wVo),e(Io,mt),M(xy,mt,null),e(mt,AVo),e(mt,ype),e(ype,LVo),e(mt,yVo),e(mt,td),e(td,xVo),e(td,xpe),e(xpe,$Vo),e(td,kVo),e(td,tX),e(tX,SVo),e(td,RVo),e(mt,PVo),M(Qv,mt,null),e(Io,BVo),e(Io,to),M($y,to,null),e(to,IVo),e(to,$pe),e($pe,NVo),e(to,qVo),e(to,ja),e(ja,jVo),e(ja,kpe),e(kpe,DVo),e(ja,GVo),e(ja,Spe),e(Spe,OVo),e(ja,VVo),e(ja,Rpe),e(Rpe,XVo),e(ja,zVo),e(to,WVo),e(to,Zr),e(Zr,Hv),e(Hv,Ppe),e(Ppe,QVo),e(Hv,HVo),e(Hv,aX),e(aX,UVo),e(Hv,JVo),e(Zr,YVo),e(Zr,Uv),e(Uv,Bpe),e(Bpe,KVo),e(Uv,ZVo),e(Uv,nX),e(nX,eXo),e(Uv,oXo),e(Zr,rXo),e(Zr,Jv),e(Jv,Ipe),e(Ipe,tXo),e(Jv,aXo),e(Jv,sX),e(sX,nXo),e(Jv,sXo),e(Zr,lXo),e(Zr,Yv),e(Yv,Npe),e(Npe,iXo),e(Yv,dXo),e(Yv,lX),e(lX,cXo),e(Yv,fXo),e(Zr,mXo),e(Zr,Kv),e(Kv,qpe),e(qpe,gXo),e(Kv,hXo),e(Kv,iX),e(iX,pXo),e(Kv,uXo),e(to,_Xo),e(to,Zv),e(Zv,bXo),e(Zv,jpe),e(jpe,vXo),e(Zv,FXo),e(Zv,Dpe),e(Dpe,TXo),e(to,MXo),M(e3,to,null),b(f,LGe,_),b(f,ad,_),e(ad,o3),e(o3,Gpe),M(ky,Gpe,null),e(ad,EXo),e(ad,Ope),e(Ope,CXo),b(f,yGe,_),b(f,No,_),M(Sy,No,null),e(No,wXo),e(No,nd),e(nd,AXo),e(nd,dX),e(dX,LXo),e(nd,yXo),e(nd,cX),e(cX,xXo),e(nd,$Xo),e(No,kXo),e(No,Ry),e(Ry,SXo),e(Ry,Vpe),e(Vpe,RXo),e(Ry,PXo),e(No,BXo),e(No,gt),M(Py,gt,null),e(gt,IXo),e(gt,Xpe),e(Xpe,NXo),e(gt,qXo),e(gt,sd),e(sd,jXo),e(sd,zpe),e(zpe,DXo),e(sd,GXo),e(sd,fX),e(fX,OXo),e(sd,VXo),e(gt,XXo),M(r3,gt,null),e(No,zXo),e(No,ao),M(By,ao,null),e(ao,WXo),e(ao,Wpe),e(Wpe,QXo),e(ao,HXo),e(ao,Da),e(Da,UXo),e(Da,Qpe),e(Qpe,JXo),e(Da,YXo),e(Da,Hpe),e(Hpe,KXo),e(Da,ZXo),e(Da,Upe),e(Upe,ezo),e(Da,ozo),e(ao,rzo),e(ao,H),e(H,t3),e(t3,Jpe),e(Jpe,tzo),e(t3,azo),e(t3,mX),e(mX,nzo),e(t3,szo),e(H,lzo),e(H,a3),e(a3,Ype),e(Ype,izo),e(a3,dzo),e(a3,gX),e(gX,czo),e(a3,fzo),e(H,mzo),e(H,n3),e(n3,Kpe),e(Kpe,gzo),e(n3,hzo),e(n3,hX),e(hX,pzo),e(n3,uzo),e(H,_zo),e(H,s3),e(s3,Zpe),e(Zpe,bzo),e(s3,vzo),e(s3,pX),e(pX,Fzo),e(s3,Tzo),e(H,Mzo),e(H,l3),e(l3,eue),e(eue,Ezo),e(l3,Czo),e(l3,uX),e(uX,wzo),e(l3,Azo),e(H,Lzo),e(H,i3),e(i3,oue),e(oue,yzo),e(i3,xzo),e(i3,_X),e(_X,$zo),e(i3,kzo),e(H,Szo),e(H,d3),e(d3,rue),e(rue,Rzo),e(d3,Pzo),e(d3,bX),e(bX,Bzo),e(d3,Izo),e(H,Nzo),e(H,c3),e(c3,tue),e(tue,qzo),e(c3,jzo),e(c3,vX),e(vX,Dzo),e(c3,Gzo),e(H,Ozo),e(H,f3),e(f3,aue),e(aue,Vzo),e(f3,Xzo),e(f3,FX),e(FX,zzo),e(f3,Wzo),e(H,Qzo),e(H,m3),e(m3,nue),e(nue,Hzo),e(m3,Uzo),e(m3,TX),e(TX,Jzo),e(m3,Yzo),e(H,Kzo),e(H,g3),e(g3,sue),e(sue,Zzo),e(g3,eWo),e(g3,MX),e(MX,oWo),e(g3,rWo),e(H,tWo),e(H,h3),e(h3,lue),e(lue,aWo),e(h3,nWo),e(h3,EX),e(EX,sWo),e(h3,lWo),e(H,iWo),e(H,p3),e(p3,iue),e(iue,dWo),e(p3,cWo),e(p3,CX),e(CX,fWo),e(p3,mWo),e(H,gWo),e(H,u3),e(u3,due),e(due,hWo),e(u3,pWo),e(u3,wX),e(wX,uWo),e(u3,_Wo),e(H,bWo),e(H,_3),e(_3,cue),e(cue,vWo),e(_3,FWo),e(_3,AX),e(AX,TWo),e(_3,MWo),e(H,EWo),e(H,b3),e(b3,fue),e(fue,CWo),e(b3,wWo),e(b3,LX),e(LX,AWo),e(b3,LWo),e(H,yWo),e(H,v3),e(v3,mue),e(mue,xWo),e(v3,$Wo),e(v3,yX),e(yX,kWo),e(v3,SWo),e(H,RWo),e(H,F3),e(F3,gue),e(gue,PWo),e(F3,BWo),e(F3,xX),e(xX,IWo),e(F3,NWo),e(H,qWo),e(H,T3),e(T3,hue),e(hue,jWo),e(T3,DWo),e(T3,$X),e($X,GWo),e(T3,OWo),e(H,VWo),e(H,M3),e(M3,pue),e(pue,XWo),e(M3,zWo),e(M3,kX),e(kX,WWo),e(M3,QWo),e(H,HWo),e(H,E3),e(E3,uue),e(uue,UWo),e(E3,JWo),e(E3,SX),e(SX,YWo),e(E3,KWo),e(H,ZWo),e(H,C3),e(C3,_ue),e(_ue,eQo),e(C3,oQo),e(C3,RX),e(RX,rQo),e(C3,tQo),e(H,aQo),e(H,w3),e(w3,bue),e(bue,nQo),e(w3,sQo),e(w3,PX),e(PX,lQo),e(w3,iQo),e(H,dQo),e(H,A3),e(A3,vue),e(vue,cQo),e(A3,fQo),e(A3,BX),e(BX,mQo),e(A3,gQo),e(H,hQo),e(H,L3),e(L3,Fue),e(Fue,pQo),e(L3,uQo),e(L3,IX),e(IX,_Qo),e(L3,bQo),e(H,vQo),e(H,y3),e(y3,Tue),e(Tue,FQo),e(y3,TQo),e(y3,NX),e(NX,MQo),e(y3,EQo),e(H,CQo),e(H,x3),e(x3,Mue),e(Mue,wQo),e(x3,AQo),e(x3,qX),e(qX,LQo),e(x3,yQo),e(H,xQo),e(H,$3),e($3,Eue),e(Eue,$Qo),e($3,kQo),e($3,jX),e(jX,SQo),e($3,RQo),e(H,PQo),e(H,k3),e(k3,Cue),e(Cue,BQo),e(k3,IQo),e(k3,DX),e(DX,NQo),e(k3,qQo),e(H,jQo),e(H,S3),e(S3,wue),e(wue,DQo),e(S3,GQo),e(S3,GX),e(GX,OQo),e(S3,VQo),e(H,XQo),e(H,R3),e(R3,Aue),e(Aue,zQo),e(R3,WQo),e(R3,OX),e(OX,QQo),e(R3,HQo),e(H,UQo),e(H,P3),e(P3,Lue),e(Lue,JQo),e(P3,YQo),e(P3,VX),e(VX,KQo),e(P3,ZQo),e(H,eHo),e(H,B3),e(B3,yue),e(yue,oHo),e(B3,rHo),e(B3,XX),e(XX,tHo),e(B3,aHo),e(H,nHo),e(H,I3),e(I3,xue),e(xue,sHo),e(I3,lHo),e(I3,zX),e(zX,iHo),e(I3,dHo),e(H,cHo),e(H,N3),e(N3,$ue),e($ue,fHo),e(N3,mHo),e(N3,WX),e(WX,gHo),e(N3,hHo),e(ao,pHo),e(ao,q3),e(q3,uHo),e(q3,kue),e(kue,_Ho),e(q3,bHo),e(q3,Sue),e(Sue,vHo),e(ao,FHo),M(j3,ao,null),b(f,xGe,_),b(f,ld,_),e(ld,D3),e(D3,Rue),M(Iy,Rue,null),e(ld,THo),e(ld,Pue),e(Pue,MHo),b(f,$Ge,_),b(f,qo,_),M(Ny,qo,null),e(qo,EHo),e(qo,id),e(id,CHo),e(id,QX),e(QX,wHo),e(id,AHo),e(id,HX),e(HX,LHo),e(id,yHo),e(qo,xHo),e(qo,qy),e(qy,$Ho),e(qy,Bue),e(Bue,kHo),e(qy,SHo),e(qo,RHo),e(qo,ht),M(jy,ht,null),e(ht,PHo),e(ht,Iue),e(Iue,BHo),e(ht,IHo),e(ht,dd),e(dd,NHo),e(dd,Nue),e(Nue,qHo),e(dd,jHo),e(dd,UX),e(UX,DHo),e(dd,GHo),e(ht,OHo),M(G3,ht,null),e(qo,VHo),e(qo,no),M(Dy,no,null),e(no,XHo),e(no,que),e(que,zHo),e(no,WHo),e(no,Ga),e(Ga,QHo),e(Ga,jue),e(jue,HHo),e(Ga,UHo),e(Ga,Due),e(Due,JHo),e(Ga,YHo),e(Ga,Gue),e(Gue,KHo),e(Ga,ZHo),e(no,eUo),e(no,V),e(V,O3),e(O3,Oue),e(Oue,oUo),e(O3,rUo),e(O3,JX),e(JX,tUo),e(O3,aUo),e(V,nUo),e(V,V3),e(V3,Vue),e(Vue,sUo),e(V3,lUo),e(V3,YX),e(YX,iUo),e(V3,dUo),e(V,cUo),e(V,X3),e(X3,Xue),e(Xue,fUo),e(X3,mUo),e(X3,KX),e(KX,gUo),e(X3,hUo),e(V,pUo),e(V,z3),e(z3,zue),e(zue,uUo),e(z3,_Uo),e(z3,ZX),e(ZX,bUo),e(z3,vUo),e(V,FUo),e(V,W3),e(W3,Wue),e(Wue,TUo),e(W3,MUo),e(W3,ez),e(ez,EUo),e(W3,CUo),e(V,wUo),e(V,Q3),e(Q3,Que),e(Que,AUo),e(Q3,LUo),e(Q3,oz),e(oz,yUo),e(Q3,xUo),e(V,$Uo),e(V,H3),e(H3,Hue),e(Hue,kUo),e(H3,SUo),e(H3,rz),e(rz,RUo),e(H3,PUo),e(V,BUo),e(V,U3),e(U3,Uue),e(Uue,IUo),e(U3,NUo),e(U3,tz),e(tz,qUo),e(U3,jUo),e(V,DUo),e(V,J3),e(J3,Jue),e(Jue,GUo),e(J3,OUo),e(J3,az),e(az,VUo),e(J3,XUo),e(V,zUo),e(V,Y3),e(Y3,Yue),e(Yue,WUo),e(Y3,QUo),e(Y3,nz),e(nz,HUo),e(Y3,UUo),e(V,JUo),e(V,K3),e(K3,Kue),e(Kue,YUo),e(K3,KUo),e(K3,sz),e(sz,ZUo),e(K3,eJo),e(V,oJo),e(V,Z3),e(Z3,Zue),e(Zue,rJo),e(Z3,tJo),e(Z3,lz),e(lz,aJo),e(Z3,nJo),e(V,sJo),e(V,e0),e(e0,e_e),e(e_e,lJo),e(e0,iJo),e(e0,iz),e(iz,dJo),e(e0,cJo),e(V,fJo),e(V,o0),e(o0,o_e),e(o_e,mJo),e(o0,gJo),e(o0,dz),e(dz,hJo),e(o0,pJo),e(V,uJo),e(V,r0),e(r0,r_e),e(r_e,_Jo),e(r0,bJo),e(r0,cz),e(cz,vJo),e(r0,FJo),e(V,TJo),e(V,t0),e(t0,t_e),e(t_e,MJo),e(t0,EJo),e(t0,fz),e(fz,CJo),e(t0,wJo),e(V,AJo),e(V,a0),e(a0,a_e),e(a_e,LJo),e(a0,yJo),e(a0,mz),e(mz,xJo),e(a0,$Jo),e(V,kJo),e(V,n0),e(n0,n_e),e(n_e,SJo),e(n0,RJo),e(n0,gz),e(gz,PJo),e(n0,BJo),e(V,IJo),e(V,s0),e(s0,s_e),e(s_e,NJo),e(s0,qJo),e(s0,hz),e(hz,jJo),e(s0,DJo),e(V,GJo),e(V,l0),e(l0,l_e),e(l_e,OJo),e(l0,VJo),e(l0,pz),e(pz,XJo),e(l0,zJo),e(V,WJo),e(V,i0),e(i0,i_e),e(i_e,QJo),e(i0,HJo),e(i0,uz),e(uz,UJo),e(i0,JJo),e(V,YJo),e(V,d0),e(d0,d_e),e(d_e,KJo),e(d0,ZJo),e(d0,_z),e(_z,eYo),e(d0,oYo),e(V,rYo),e(V,c0),e(c0,c_e),e(c_e,tYo),e(c0,aYo),e(c0,bz),e(bz,nYo),e(c0,sYo),e(V,lYo),e(V,f0),e(f0,f_e),e(f_e,iYo),e(f0,dYo),e(f0,vz),e(vz,cYo),e(f0,fYo),e(V,mYo),e(V,m0),e(m0,m_e),e(m_e,gYo),e(m0,hYo),e(m0,Fz),e(Fz,pYo),e(m0,uYo),e(V,_Yo),e(V,g0),e(g0,g_e),e(g_e,bYo),e(g0,vYo),e(g0,Tz),e(Tz,FYo),e(g0,TYo),e(V,MYo),e(V,h0),e(h0,h_e),e(h_e,EYo),e(h0,CYo),e(h0,Mz),e(Mz,wYo),e(h0,AYo),e(V,LYo),e(V,p0),e(p0,p_e),e(p_e,yYo),e(p0,xYo),e(p0,Ez),e(Ez,$Yo),e(p0,kYo),e(V,SYo),e(V,u0),e(u0,u_e),e(u_e,RYo),e(u0,PYo),e(u0,Cz),e(Cz,BYo),e(u0,IYo),e(V,NYo),e(V,_0),e(_0,__e),e(__e,qYo),e(_0,jYo),e(_0,wz),e(wz,DYo),e(_0,GYo),e(V,OYo),e(V,b0),e(b0,b_e),e(b_e,VYo),e(b0,XYo),e(b0,Az),e(Az,zYo),e(b0,WYo),e(V,QYo),e(V,v0),e(v0,v_e),e(v_e,HYo),e(v0,UYo),e(v0,Lz),e(Lz,JYo),e(v0,YYo),e(V,KYo),e(V,F0),e(F0,F_e),e(F_e,ZYo),e(F0,eKo),e(F0,yz),e(yz,oKo),e(F0,rKo),e(V,tKo),e(V,T0),e(T0,T_e),e(T_e,aKo),e(T0,nKo),e(T0,xz),e(xz,sKo),e(T0,lKo),e(V,iKo),e(V,M0),e(M0,M_e),e(M_e,dKo),e(M0,cKo),e(M0,$z),e($z,fKo),e(M0,mKo),e(V,gKo),e(V,E0),e(E0,E_e),e(E_e,hKo),e(E0,pKo),e(E0,kz),e(kz,uKo),e(E0,_Ko),e(V,bKo),e(V,C0),e(C0,C_e),e(C_e,vKo),e(C0,FKo),e(C0,Sz),e(Sz,TKo),e(C0,MKo),e(V,EKo),e(V,w0),e(w0,w_e),e(w_e,CKo),e(w0,wKo),e(w0,Rz),e(Rz,AKo),e(w0,LKo),e(V,yKo),e(V,A0),e(A0,A_e),e(A_e,xKo),e(A0,$Ko),e(A0,Pz),e(Pz,kKo),e(A0,SKo),e(V,RKo),e(V,L0),e(L0,L_e),e(L_e,PKo),e(L0,BKo),e(L0,Bz),e(Bz,IKo),e(L0,NKo),e(no,qKo),e(no,y0),e(y0,jKo),e(y0,y_e),e(y_e,DKo),e(y0,GKo),e(y0,x_e),e(x_e,OKo),e(no,VKo),M(x0,no,null),b(f,kGe,_),b(f,cd,_),e(cd,$0),e($0,$_e),M(Gy,$_e,null),e(cd,XKo),e(cd,k_e),e(k_e,zKo),b(f,SGe,_),b(f,jo,_),M(Oy,jo,null),e(jo,WKo),e(jo,fd),e(fd,QKo),e(fd,Iz),e(Iz,HKo),e(fd,UKo),e(fd,Nz),e(Nz,JKo),e(fd,YKo),e(jo,KKo),e(jo,Vy),e(Vy,ZKo),e(Vy,S_e),e(S_e,eZo),e(Vy,oZo),e(jo,rZo),e(jo,pt),M(Xy,pt,null),e(pt,tZo),e(pt,R_e),e(R_e,aZo),e(pt,nZo),e(pt,md),e(md,sZo),e(md,P_e),e(P_e,lZo),e(md,iZo),e(md,qz),e(qz,dZo),e(md,cZo),e(pt,fZo),M(k0,pt,null),e(jo,mZo),e(jo,so),M(zy,so,null),e(so,gZo),e(so,B_e),e(B_e,hZo),e(so,pZo),e(so,Oa),e(Oa,uZo),e(Oa,I_e),e(I_e,_Zo),e(Oa,bZo),e(Oa,N_e),e(N_e,vZo),e(Oa,FZo),e(Oa,q_e),e(q_e,TZo),e(Oa,MZo),e(so,EZo),e(so,j_e),e(j_e,S0),e(S0,D_e),e(D_e,CZo),e(S0,wZo),e(S0,jz),e(jz,AZo),e(S0,LZo),e(so,yZo),e(so,R0),e(R0,xZo),e(R0,G_e),e(G_e,$Zo),e(R0,kZo),e(R0,O_e),e(O_e,SZo),e(so,RZo),M(P0,so,null),b(f,RGe,_),b(f,gd,_),e(gd,B0),e(B0,V_e),M(Wy,V_e,null),e(gd,PZo),e(gd,X_e),e(X_e,BZo),b(f,PGe,_),b(f,Do,_),M(Qy,Do,null),e(Do,IZo),e(Do,hd),e(hd,NZo),e(hd,Dz),e(Dz,qZo),e(hd,jZo),e(hd,Gz),e(Gz,DZo),e(hd,GZo),e(Do,OZo),e(Do,Hy),e(Hy,VZo),e(Hy,z_e),e(z_e,XZo),e(Hy,zZo),e(Do,WZo),e(Do,ut),M(Uy,ut,null),e(ut,QZo),e(ut,W_e),e(W_e,HZo),e(ut,UZo),e(ut,pd),e(pd,JZo),e(pd,Q_e),e(Q_e,YZo),e(pd,KZo),e(pd,Oz),e(Oz,ZZo),e(pd,eer),e(ut,oer),M(I0,ut,null),e(Do,rer),e(Do,lo),M(Jy,lo,null),e(lo,ter),e(lo,H_e),e(H_e,aer),e(lo,ner),e(lo,Va),e(Va,ser),e(Va,U_e),e(U_e,ler),e(Va,ier),e(Va,J_e),e(J_e,der),e(Va,cer),e(Va,Y_e),e(Y_e,fer),e(Va,mer),e(lo,ger),e(lo,Fe),e(Fe,N0),e(N0,K_e),e(K_e,her),e(N0,per),e(N0,Vz),e(Vz,uer),e(N0,_er),e(Fe,ber),e(Fe,q0),e(q0,Z_e),e(Z_e,ver),e(q0,Fer),e(q0,Xz),e(Xz,Ter),e(q0,Mer),e(Fe,Eer),e(Fe,j0),e(j0,e1e),e(e1e,Cer),e(j0,wer),e(j0,zz),e(zz,Aer),e(j0,Ler),e(Fe,yer),e(Fe,D0),e(D0,o1e),e(o1e,xer),e(D0,$er),e(D0,Wz),e(Wz,ker),e(D0,Ser),e(Fe,Rer),e(Fe,Os),e(Os,r1e),e(r1e,Per),e(Os,Ber),e(Os,Qz),e(Qz,Ier),e(Os,Ner),e(Os,Hz),e(Hz,qer),e(Os,jer),e(Fe,Der),e(Fe,G0),e(G0,t1e),e(t1e,Ger),e(G0,Oer),e(G0,Uz),e(Uz,Ver),e(G0,Xer),e(Fe,zer),e(Fe,Vs),e(Vs,a1e),e(a1e,Wer),e(Vs,Qer),e(Vs,Jz),e(Jz,Her),e(Vs,Uer),e(Vs,Yz),e(Yz,Jer),e(Vs,Yer),e(Fe,Ker),e(Fe,_t),e(_t,n1e),e(n1e,Zer),e(_t,eor),e(_t,Kz),e(Kz,oor),e(_t,ror),e(_t,Zz),e(Zz,tor),e(_t,aor),e(_t,eW),e(eW,nor),e(_t,sor),e(Fe,lor),e(Fe,O0),e(O0,s1e),e(s1e,ior),e(O0,dor),e(O0,oW),e(oW,cor),e(O0,mor),e(Fe,gor),e(Fe,V0),e(V0,l1e),e(l1e,hor),e(V0,por),e(V0,rW),e(rW,uor),e(V0,_or),e(Fe,bor),e(Fe,X0),e(X0,i1e),e(i1e,vor),e(X0,For),e(X0,tW),e(tW,Tor),e(X0,Mor),e(Fe,Eor),e(Fe,z0),e(z0,d1e),e(d1e,Cor),e(z0,wor),e(z0,aW),e(aW,Aor),e(z0,Lor),e(Fe,yor),e(Fe,W0),e(W0,c1e),e(c1e,xor),e(W0,$or),e(W0,nW),e(nW,kor),e(W0,Sor),e(Fe,Ror),e(Fe,Q0),e(Q0,f1e),e(f1e,Por),e(Q0,Bor),e(Q0,sW),e(sW,Ior),e(Q0,Nor),e(Fe,qor),e(Fe,H0),e(H0,m1e),e(m1e,jor),e(H0,Dor),e(H0,lW),e(lW,Gor),e(H0,Oor),e(lo,Vor),e(lo,U0),e(U0,Xor),e(U0,g1e),e(g1e,zor),e(U0,Wor),e(U0,h1e),e(h1e,Qor),e(lo,Hor),M(J0,lo,null),b(f,BGe,_),b(f,ud,_),e(ud,Y0),e(Y0,p1e),M(Yy,p1e,null),e(ud,Uor),e(ud,u1e),e(u1e,Jor),b(f,IGe,_),b(f,Go,_),M(Ky,Go,null),e(Go,Yor),e(Go,_d),e(_d,Kor),e(_d,iW),e(iW,Zor),e(_d,err),e(_d,dW),e(dW,orr),e(_d,rrr),e(Go,trr),e(Go,Zy),e(Zy,arr),e(Zy,_1e),e(_1e,nrr),e(Zy,srr),e(Go,lrr),e(Go,bt),M(e8,bt,null),e(bt,irr),e(bt,b1e),e(b1e,drr),e(bt,crr),e(bt,bd),e(bd,frr),e(bd,v1e),e(v1e,mrr),e(bd,grr),e(bd,cW),e(cW,hrr),e(bd,prr),e(bt,urr),M(K0,bt,null),e(Go,_rr),e(Go,io),M(o8,io,null),e(io,brr),e(io,F1e),e(F1e,vrr),e(io,Frr),e(io,Xa),e(Xa,Trr),e(Xa,T1e),e(T1e,Mrr),e(Xa,Err),e(Xa,M1e),e(M1e,Crr),e(Xa,wrr),e(Xa,E1e),e(E1e,Arr),e(Xa,Lrr),e(io,yrr),e(io,C1e),e(C1e,Z0),e(Z0,w1e),e(w1e,xrr),e(Z0,$rr),e(Z0,fW),e(fW,krr),e(Z0,Srr),e(io,Rrr),e(io,eF),e(eF,Prr),e(eF,A1e),e(A1e,Brr),e(eF,Irr),e(eF,L1e),e(L1e,Nrr),e(io,qrr),M(oF,io,null),b(f,NGe,_),b(f,vd,_),e(vd,rF),e(rF,y1e),M(r8,y1e,null),e(vd,jrr),e(vd,x1e),e(x1e,Drr),b(f,qGe,_),b(f,Oo,_),M(t8,Oo,null),e(Oo,Grr),e(Oo,Fd),e(Fd,Orr),e(Fd,mW),e(mW,Vrr),e(Fd,Xrr),e(Fd,gW),e(gW,zrr),e(Fd,Wrr),e(Oo,Qrr),e(Oo,a8),e(a8,Hrr),e(a8,$1e),e($1e,Urr),e(a8,Jrr),e(Oo,Yrr),e(Oo,vt),M(n8,vt,null),e(vt,Krr),e(vt,k1e),e(k1e,Zrr),e(vt,etr),e(vt,Td),e(Td,otr),e(Td,S1e),e(S1e,rtr),e(Td,ttr),e(Td,hW),e(hW,atr),e(Td,ntr),e(vt,str),M(tF,vt,null),e(Oo,ltr),e(Oo,co),M(s8,co,null),e(co,itr),e(co,R1e),e(R1e,dtr),e(co,ctr),e(co,za),e(za,ftr),e(za,P1e),e(P1e,mtr),e(za,gtr),e(za,B1e),e(B1e,htr),e(za,ptr),e(za,I1e),e(I1e,utr),e(za,_tr),e(co,btr),e(co,N1e),e(N1e,aF),e(aF,q1e),e(q1e,vtr),e(aF,Ftr),e(aF,pW),e(pW,Ttr),e(aF,Mtr),e(co,Etr),e(co,nF),e(nF,Ctr),e(nF,j1e),e(j1e,wtr),e(nF,Atr),e(nF,D1e),e(D1e,Ltr),e(co,ytr),M(sF,co,null),b(f,jGe,_),b(f,Md,_),e(Md,lF),e(lF,G1e),M(l8,G1e,null),e(Md,xtr),e(Md,O1e),e(O1e,$tr),b(f,DGe,_),b(f,Vo,_),M(i8,Vo,null),e(Vo,ktr),e(Vo,Ed),e(Ed,Str),e(Ed,uW),e(uW,Rtr),e(Ed,Ptr),e(Ed,_W),e(_W,Btr),e(Ed,Itr),e(Vo,Ntr),e(Vo,d8),e(d8,qtr),e(d8,V1e),e(V1e,jtr),e(d8,Dtr),e(Vo,Gtr),e(Vo,Ft),M(c8,Ft,null),e(Ft,Otr),e(Ft,X1e),e(X1e,Vtr),e(Ft,Xtr),e(Ft,Cd),e(Cd,ztr),e(Cd,z1e),e(z1e,Wtr),e(Cd,Qtr),e(Cd,bW),e(bW,Htr),e(Cd,Utr),e(Ft,Jtr),M(iF,Ft,null),e(Vo,Ytr),e(Vo,fo),M(f8,fo,null),e(fo,Ktr),e(fo,W1e),e(W1e,Ztr),e(fo,ear),e(fo,Wa),e(Wa,oar),e(Wa,Q1e),e(Q1e,rar),e(Wa,tar),e(Wa,H1e),e(H1e,aar),e(Wa,nar),e(Wa,U1e),e(U1e,sar),e(Wa,lar),e(fo,iar),e(fo,Pe),e(Pe,dF),e(dF,J1e),e(J1e,dar),e(dF,car),e(dF,vW),e(vW,far),e(dF,mar),e(Pe,gar),e(Pe,cF),e(cF,Y1e),e(Y1e,har),e(cF,par),e(cF,FW),e(FW,uar),e(cF,_ar),e(Pe,bar),e(Pe,fF),e(fF,K1e),e(K1e,Far),e(fF,Tar),e(fF,TW),e(TW,Mar),e(fF,Ear),e(Pe,Car),e(Pe,mF),e(mF,Z1e),e(Z1e,war),e(mF,Aar),e(mF,MW),e(MW,Lar),e(mF,yar),e(Pe,xar),e(Pe,gF),e(gF,e2e),e(e2e,$ar),e(gF,kar),e(gF,EW),e(EW,Sar),e(gF,Rar),e(Pe,Par),e(Pe,hF),e(hF,o2e),e(o2e,Bar),e(hF,Iar),e(hF,CW),e(CW,Nar),e(hF,qar),e(Pe,jar),e(Pe,pF),e(pF,r2e),e(r2e,Dar),e(pF,Gar),e(pF,wW),e(wW,Oar),e(pF,Var),e(Pe,Xar),e(Pe,uF),e(uF,t2e),e(t2e,zar),e(uF,War),e(uF,AW),e(AW,Qar),e(uF,Har),e(Pe,Uar),e(Pe,_F),e(_F,a2e),e(a2e,Jar),e(_F,Yar),e(_F,LW),e(LW,Kar),e(_F,Zar),e(fo,enr),e(fo,bF),e(bF,onr),e(bF,n2e),e(n2e,rnr),e(bF,tnr),e(bF,s2e),e(s2e,anr),e(fo,nnr),M(vF,fo,null),b(f,GGe,_),b(f,wd,_),e(wd,FF),e(FF,l2e),M(m8,l2e,null),e(wd,snr),e(wd,i2e),e(i2e,lnr),b(f,OGe,_),b(f,Xo,_),M(g8,Xo,null),e(Xo,inr),e(Xo,Ad),e(Ad,dnr),e(Ad,yW),e(yW,cnr),e(Ad,fnr),e(Ad,xW),e(xW,mnr),e(Ad,gnr),e(Xo,hnr),e(Xo,h8),e(h8,pnr),e(h8,d2e),e(d2e,unr),e(h8,_nr),e(Xo,bnr),e(Xo,Tt),M(p8,Tt,null),e(Tt,vnr),e(Tt,c2e),e(c2e,Fnr),e(Tt,Tnr),e(Tt,Ld),e(Ld,Mnr),e(Ld,f2e),e(f2e,Enr),e(Ld,Cnr),e(Ld,$W),e($W,wnr),e(Ld,Anr),e(Tt,Lnr),M(TF,Tt,null),e(Xo,ynr),e(Xo,mo),M(u8,mo,null),e(mo,xnr),e(mo,m2e),e(m2e,$nr),e(mo,knr),e(mo,Qa),e(Qa,Snr),e(Qa,g2e),e(g2e,Rnr),e(Qa,Pnr),e(Qa,h2e),e(h2e,Bnr),e(Qa,Inr),e(Qa,p2e),e(p2e,Nnr),e(Qa,qnr),e(mo,jnr),e(mo,et),e(et,MF),e(MF,u2e),e(u2e,Dnr),e(MF,Gnr),e(MF,kW),e(kW,Onr),e(MF,Vnr),e(et,Xnr),e(et,EF),e(EF,_2e),e(_2e,znr),e(EF,Wnr),e(EF,SW),e(SW,Qnr),e(EF,Hnr),e(et,Unr),e(et,CF),e(CF,b2e),e(b2e,Jnr),e(CF,Ynr),e(CF,RW),e(RW,Knr),e(CF,Znr),e(et,esr),e(et,wF),e(wF,v2e),e(v2e,osr),e(wF,rsr),e(wF,PW),e(PW,tsr),e(wF,asr),e(et,nsr),e(et,AF),e(AF,F2e),e(F2e,ssr),e(AF,lsr),e(AF,BW),e(BW,isr),e(AF,dsr),e(mo,csr),e(mo,LF),e(LF,fsr),e(LF,T2e),e(T2e,msr),e(LF,gsr),e(LF,M2e),e(M2e,hsr),e(mo,psr),M(yF,mo,null),b(f,VGe,_),b(f,yd,_),e(yd,xF),e(xF,E2e),M(_8,E2e,null),e(yd,usr),e(yd,C2e),e(C2e,_sr),b(f,XGe,_),b(f,zo,_),M(b8,zo,null),e(zo,bsr),e(zo,xd),e(xd,vsr),e(xd,IW),e(IW,Fsr),e(xd,Tsr),e(xd,NW),e(NW,Msr),e(xd,Esr),e(zo,Csr),e(zo,v8),e(v8,wsr),e(v8,w2e),e(w2e,Asr),e(v8,Lsr),e(zo,ysr),e(zo,Mt),M(F8,Mt,null),e(Mt,xsr),e(Mt,A2e),e(A2e,$sr),e(Mt,ksr),e(Mt,$d),e($d,Ssr),e($d,L2e),e(L2e,Rsr),e($d,Psr),e($d,qW),e(qW,Bsr),e($d,Isr),e(Mt,Nsr),M($F,Mt,null),e(zo,qsr),e(zo,go),M(T8,go,null),e(go,jsr),e(go,y2e),e(y2e,Dsr),e(go,Gsr),e(go,Ha),e(Ha,Osr),e(Ha,x2e),e(x2e,Vsr),e(Ha,Xsr),e(Ha,$2e),e($2e,zsr),e(Ha,Wsr),e(Ha,k2e),e(k2e,Qsr),e(Ha,Hsr),e(go,Usr),e(go,Le),e(Le,kF),e(kF,S2e),e(S2e,Jsr),e(kF,Ysr),e(kF,jW),e(jW,Ksr),e(kF,Zsr),e(Le,elr),e(Le,SF),e(SF,R2e),e(R2e,olr),e(SF,rlr),e(SF,DW),e(DW,tlr),e(SF,alr),e(Le,nlr),e(Le,RF),e(RF,P2e),e(P2e,slr),e(RF,llr),e(RF,GW),e(GW,ilr),e(RF,dlr),e(Le,clr),e(Le,PF),e(PF,B2e),e(B2e,flr),e(PF,mlr),e(PF,OW),e(OW,glr),e(PF,hlr),e(Le,plr),e(Le,BF),e(BF,I2e),e(I2e,ulr),e(BF,_lr),e(BF,VW),e(VW,blr),e(BF,vlr),e(Le,Flr),e(Le,IF),e(IF,N2e),e(N2e,Tlr),e(IF,Mlr),e(IF,XW),e(XW,Elr),e(IF,Clr),e(Le,wlr),e(Le,NF),e(NF,q2e),e(q2e,Alr),e(NF,Llr),e(NF,zW),e(zW,ylr),e(NF,xlr),e(Le,$lr),e(Le,qF),e(qF,j2e),e(j2e,klr),e(qF,Slr),e(qF,WW),e(WW,Rlr),e(qF,Plr),e(Le,Blr),e(Le,jF),e(jF,D2e),e(D2e,Ilr),e(jF,Nlr),e(jF,QW),e(QW,qlr),e(jF,jlr),e(Le,Dlr),e(Le,DF),e(DF,G2e),e(G2e,Glr),e(DF,Olr),e(DF,HW),e(HW,Vlr),e(DF,Xlr),e(go,zlr),e(go,GF),e(GF,Wlr),e(GF,O2e),e(O2e,Qlr),e(GF,Hlr),e(GF,V2e),e(V2e,Ulr),e(go,Jlr),M(OF,go,null),b(f,zGe,_),b(f,kd,_),e(kd,VF),e(VF,X2e),M(M8,X2e,null),e(kd,Ylr),e(kd,z2e),e(z2e,Klr),b(f,WGe,_),b(f,Wo,_),M(E8,Wo,null),e(Wo,Zlr),e(Wo,Sd),e(Sd,eir),e(Sd,UW),e(UW,oir),e(Sd,rir),e(Sd,JW),e(JW,tir),e(Sd,air),e(Wo,nir),e(Wo,C8),e(C8,sir),e(C8,W2e),e(W2e,lir),e(C8,iir),e(Wo,dir),e(Wo,Et),M(w8,Et,null),e(Et,cir),e(Et,Q2e),e(Q2e,fir),e(Et,mir),e(Et,Rd),e(Rd,gir),e(Rd,H2e),e(H2e,hir),e(Rd,pir),e(Rd,YW),e(YW,uir),e(Rd,_ir),e(Et,bir),M(XF,Et,null),e(Wo,vir),e(Wo,ho),M(A8,ho,null),e(ho,Fir),e(ho,U2e),e(U2e,Tir),e(ho,Mir),e(ho,Ua),e(Ua,Eir),e(Ua,J2e),e(J2e,Cir),e(Ua,wir),e(Ua,Y2e),e(Y2e,Air),e(Ua,Lir),e(Ua,K2e),e(K2e,yir),e(Ua,xir),e(ho,$ir),e(ho,L8),e(L8,zF),e(zF,Z2e),e(Z2e,kir),e(zF,Sir),e(zF,KW),e(KW,Rir),e(zF,Pir),e(L8,Bir),e(L8,WF),e(WF,ebe),e(ebe,Iir),e(WF,Nir),e(WF,ZW),e(ZW,qir),e(WF,jir),e(ho,Dir),e(ho,QF),e(QF,Gir),e(QF,obe),e(obe,Oir),e(QF,Vir),e(QF,rbe),e(rbe,Xir),e(ho,zir),M(HF,ho,null),b(f,QGe,_),b(f,Pd,_),e(Pd,UF),e(UF,tbe),M(y8,tbe,null),e(Pd,Wir),e(Pd,abe),e(abe,Qir),b(f,HGe,_),b(f,Qo,_),M(x8,Qo,null),e(Qo,Hir),e(Qo,Bd),e(Bd,Uir),e(Bd,eQ),e(eQ,Jir),e(Bd,Yir),e(Bd,oQ),e(oQ,Kir),e(Bd,Zir),e(Qo,edr),e(Qo,$8),e($8,odr),e($8,nbe),e(nbe,rdr),e($8,tdr),e(Qo,adr),e(Qo,Ct),M(k8,Ct,null),e(Ct,ndr),e(Ct,sbe),e(sbe,sdr),e(Ct,ldr),e(Ct,Id),e(Id,idr),e(Id,lbe),e(lbe,ddr),e(Id,cdr),e(Id,rQ),e(rQ,fdr),e(Id,mdr),e(Ct,gdr),M(JF,Ct,null),e(Qo,hdr),e(Qo,po),M(S8,po,null),e(po,pdr),e(po,ibe),e(ibe,udr),e(po,_dr),e(po,Ja),e(Ja,bdr),e(Ja,dbe),e(dbe,vdr),e(Ja,Fdr),e(Ja,cbe),e(cbe,Tdr),e(Ja,Mdr),e(Ja,fbe),e(fbe,Edr),e(Ja,Cdr),e(po,wdr),e(po,ot),e(ot,YF),e(YF,mbe),e(mbe,Adr),e(YF,Ldr),e(YF,tQ),e(tQ,ydr),e(YF,xdr),e(ot,$dr),e(ot,KF),e(KF,gbe),e(gbe,kdr),e(KF,Sdr),e(KF,aQ),e(aQ,Rdr),e(KF,Pdr),e(ot,Bdr),e(ot,ZF),e(ZF,hbe),e(hbe,Idr),e(ZF,Ndr),e(ZF,nQ),e(nQ,qdr),e(ZF,jdr),e(ot,Ddr),e(ot,e6),e(e6,pbe),e(pbe,Gdr),e(e6,Odr),e(e6,sQ),e(sQ,Vdr),e(e6,Xdr),e(ot,zdr),e(ot,o6),e(o6,ube),e(ube,Wdr),e(o6,Qdr),e(o6,lQ),e(lQ,Hdr),e(o6,Udr),e(po,Jdr),e(po,r6),e(r6,Ydr),e(r6,_be),e(_be,Kdr),e(r6,Zdr),e(r6,bbe),e(bbe,ecr),e(po,ocr),M(t6,po,null),b(f,UGe,_),b(f,Nd,_),e(Nd,a6),e(a6,vbe),M(R8,vbe,null),e(Nd,rcr),e(Nd,Fbe),e(Fbe,tcr),b(f,JGe,_),b(f,Ho,_),M(P8,Ho,null),e(Ho,acr),e(Ho,qd),e(qd,ncr),e(qd,iQ),e(iQ,scr),e(qd,lcr),e(qd,dQ),e(dQ,icr),e(qd,dcr),e(Ho,ccr),e(Ho,B8),e(B8,fcr),e(B8,Tbe),e(Tbe,mcr),e(B8,gcr),e(Ho,hcr),e(Ho,wt),M(I8,wt,null),e(wt,pcr),e(wt,Mbe),e(Mbe,ucr),e(wt,_cr),e(wt,jd),e(jd,bcr),e(jd,Ebe),e(Ebe,vcr),e(jd,Fcr),e(jd,cQ),e(cQ,Tcr),e(jd,Mcr),e(wt,Ecr),M(n6,wt,null),e(Ho,Ccr),e(Ho,uo),M(N8,uo,null),e(uo,wcr),e(uo,Cbe),e(Cbe,Acr),e(uo,Lcr),e(uo,Ya),e(Ya,ycr),e(Ya,wbe),e(wbe,xcr),e(Ya,$cr),e(Ya,Abe),e(Abe,kcr),e(Ya,Scr),e(Ya,Lbe),e(Lbe,Rcr),e(Ya,Pcr),e(uo,Bcr),e(uo,Dd),e(Dd,s6),e(s6,ybe),e(ybe,Icr),e(s6,Ncr),e(s6,fQ),e(fQ,qcr),e(s6,jcr),e(Dd,Dcr),e(Dd,l6),e(l6,xbe),e(xbe,Gcr),e(l6,Ocr),e(l6,mQ),e(mQ,Vcr),e(l6,Xcr),e(Dd,zcr),e(Dd,i6),e(i6,$be),e($be,Wcr),e(i6,Qcr),e(i6,gQ),e(gQ,Hcr),e(i6,Ucr),e(uo,Jcr),e(uo,d6),e(d6,Ycr),e(d6,kbe),e(kbe,Kcr),e(d6,Zcr),e(d6,Sbe),e(Sbe,efr),e(uo,ofr),M(c6,uo,null),b(f,YGe,_),b(f,Gd,_),e(Gd,f6),e(f6,Rbe),M(q8,Rbe,null),e(Gd,rfr),e(Gd,Pbe),e(Pbe,tfr),b(f,KGe,_),b(f,Uo,_),M(j8,Uo,null),e(Uo,afr),e(Uo,Od),e(Od,nfr),e(Od,hQ),e(hQ,sfr),e(Od,lfr),e(Od,pQ),e(pQ,ifr),e(Od,dfr),e(Uo,cfr),e(Uo,D8),e(D8,ffr),e(D8,Bbe),e(Bbe,mfr),e(D8,gfr),e(Uo,hfr),e(Uo,At),M(G8,At,null),e(At,pfr),e(At,Ibe),e(Ibe,ufr),e(At,_fr),e(At,Vd),e(Vd,bfr),e(Vd,Nbe),e(Nbe,vfr),e(Vd,Ffr),e(Vd,uQ),e(uQ,Tfr),e(Vd,Mfr),e(At,Efr),M(m6,At,null),e(Uo,Cfr),e(Uo,_o),M(O8,_o,null),e(_o,wfr),e(_o,qbe),e(qbe,Afr),e(_o,Lfr),e(_o,Ka),e(Ka,yfr),e(Ka,jbe),e(jbe,xfr),e(Ka,$fr),e(Ka,Dbe),e(Dbe,kfr),e(Ka,Sfr),e(Ka,Gbe),e(Gbe,Rfr),e(Ka,Pfr),e(_o,Bfr),e(_o,V8),e(V8,g6),e(g6,Obe),e(Obe,Ifr),e(g6,Nfr),e(g6,_Q),e(_Q,qfr),e(g6,jfr),e(V8,Dfr),e(V8,h6),e(h6,Vbe),e(Vbe,Gfr),e(h6,Ofr),e(h6,bQ),e(bQ,Vfr),e(h6,Xfr),e(_o,zfr),e(_o,p6),e(p6,Wfr),e(p6,Xbe),e(Xbe,Qfr),e(p6,Hfr),e(p6,zbe),e(zbe,Ufr),e(_o,Jfr),M(u6,_o,null),b(f,ZGe,_),b(f,Xd,_),e(Xd,_6),e(_6,Wbe),M(X8,Wbe,null),e(Xd,Yfr),e(Xd,Qbe),e(Qbe,Kfr),b(f,eOe,_),b(f,Jo,_),M(z8,Jo,null),e(Jo,Zfr),e(Jo,zd),e(zd,emr),e(zd,vQ),e(vQ,omr),e(zd,rmr),e(zd,FQ),e(FQ,tmr),e(zd,amr),e(Jo,nmr),e(Jo,W8),e(W8,smr),e(W8,Hbe),e(Hbe,lmr),e(W8,imr),e(Jo,dmr),e(Jo,Lt),M(Q8,Lt,null),e(Lt,cmr),e(Lt,Ube),e(Ube,fmr),e(Lt,mmr),e(Lt,Wd),e(Wd,gmr),e(Wd,Jbe),e(Jbe,hmr),e(Wd,pmr),e(Wd,TQ),e(TQ,umr),e(Wd,_mr),e(Lt,bmr),M(b6,Lt,null),e(Jo,vmr),e(Jo,bo),M(H8,bo,null),e(bo,Fmr),e(bo,Ybe),e(Ybe,Tmr),e(bo,Mmr),e(bo,Za),e(Za,Emr),e(Za,Kbe),e(Kbe,Cmr),e(Za,wmr),e(Za,Zbe),e(Zbe,Amr),e(Za,Lmr),e(Za,eve),e(eve,ymr),e(Za,xmr),e(bo,$mr),e(bo,ove),e(ove,v6),e(v6,rve),e(rve,kmr),e(v6,Smr),e(v6,MQ),e(MQ,Rmr),e(v6,Pmr),e(bo,Bmr),e(bo,F6),e(F6,Imr),e(F6,tve),e(tve,Nmr),e(F6,qmr),e(F6,ave),e(ave,jmr),e(bo,Dmr),M(T6,bo,null),b(f,oOe,_),b(f,Qd,_),e(Qd,M6),e(M6,nve),M(U8,nve,null),e(Qd,Gmr),e(Qd,sve),e(sve,Omr),b(f,rOe,_),b(f,Yo,_),M(J8,Yo,null),e(Yo,Vmr),e(Yo,Hd),e(Hd,Xmr),e(Hd,EQ),e(EQ,zmr),e(Hd,Wmr),e(Hd,CQ),e(CQ,Qmr),e(Hd,Hmr),e(Yo,Umr),e(Yo,Y8),e(Y8,Jmr),e(Y8,lve),e(lve,Ymr),e(Y8,Kmr),e(Yo,Zmr),e(Yo,yt),M(K8,yt,null),e(yt,egr),e(yt,ive),e(ive,ogr),e(yt,rgr),e(yt,Ud),e(Ud,tgr),e(Ud,dve),e(dve,agr),e(Ud,ngr),e(Ud,wQ),e(wQ,sgr),e(Ud,lgr),e(yt,igr),M(E6,yt,null),e(Yo,dgr),e(Yo,vo),M(Z8,vo,null),e(vo,cgr),e(vo,cve),e(cve,fgr),e(vo,mgr),e(vo,en),e(en,ggr),e(en,fve),e(fve,hgr),e(en,pgr),e(en,mve),e(mve,ugr),e(en,_gr),e(en,gve),e(gve,bgr),e(en,vgr),e(vo,Fgr),e(vo,on),e(on,C6),e(C6,hve),e(hve,Tgr),e(C6,Mgr),e(C6,AQ),e(AQ,Egr),e(C6,Cgr),e(on,wgr),e(on,w6),e(w6,pve),e(pve,Agr),e(w6,Lgr),e(w6,LQ),e(LQ,ygr),e(w6,xgr),e(on,$gr),e(on,A6),e(A6,uve),e(uve,kgr),e(A6,Sgr),e(A6,yQ),e(yQ,Rgr),e(A6,Pgr),e(on,Bgr),e(on,L6),e(L6,_ve),e(_ve,Igr),e(L6,Ngr),e(L6,xQ),e(xQ,qgr),e(L6,jgr),e(vo,Dgr),e(vo,y6),e(y6,Ggr),e(y6,bve),e(bve,Ogr),e(y6,Vgr),e(y6,vve),e(vve,Xgr),e(vo,zgr),M(x6,vo,null),b(f,tOe,_),b(f,Jd,_),e(Jd,$6),e($6,Fve),M(e9,Fve,null),e(Jd,Wgr),e(Jd,Tve),e(Tve,Qgr),b(f,aOe,_),b(f,Ko,_),M(o9,Ko,null),e(Ko,Hgr),e(Ko,Yd),e(Yd,Ugr),e(Yd,$Q),e($Q,Jgr),e(Yd,Ygr),e(Yd,kQ),e(kQ,Kgr),e(Yd,Zgr),e(Ko,ehr),e(Ko,r9),e(r9,ohr),e(r9,Mve),e(Mve,rhr),e(r9,thr),e(Ko,ahr),e(Ko,xt),M(t9,xt,null),e(xt,nhr),e(xt,Eve),e(Eve,shr),e(xt,lhr),e(xt,Kd),e(Kd,ihr),e(Kd,Cve),e(Cve,dhr),e(Kd,chr),e(Kd,SQ),e(SQ,fhr),e(Kd,mhr),e(xt,ghr),M(k6,xt,null),e(Ko,hhr),e(Ko,Fo),M(a9,Fo,null),e(Fo,phr),e(Fo,wve),e(wve,uhr),e(Fo,_hr),e(Fo,rn),e(rn,bhr),e(rn,Ave),e(Ave,vhr),e(rn,Fhr),e(rn,Lve),e(Lve,Thr),e(rn,Mhr),e(rn,yve),e(yve,Ehr),e(rn,Chr),e(Fo,whr),e(Fo,xve),e(xve,S6),e(S6,$ve),e($ve,Ahr),e(S6,Lhr),e(S6,RQ),e(RQ,yhr),e(S6,xhr),e(Fo,$hr),e(Fo,R6),e(R6,khr),e(R6,kve),e(kve,Shr),e(R6,Rhr),e(R6,Sve),e(Sve,Phr),e(Fo,Bhr),M(P6,Fo,null),b(f,nOe,_),b(f,Zd,_),e(Zd,B6),e(B6,Rve),M(n9,Rve,null),e(Zd,Ihr),e(Zd,Pve),e(Pve,Nhr),b(f,sOe,_),b(f,Zo,_),M(s9,Zo,null),e(Zo,qhr),e(Zo,ec),e(ec,jhr),e(ec,PQ),e(PQ,Dhr),e(ec,Ghr),e(ec,BQ),e(BQ,Ohr),e(ec,Vhr),e(Zo,Xhr),e(Zo,l9),e(l9,zhr),e(l9,Bve),e(Bve,Whr),e(l9,Qhr),e(Zo,Hhr),e(Zo,$t),M(i9,$t,null),e($t,Uhr),e($t,Ive),e(Ive,Jhr),e($t,Yhr),e($t,oc),e(oc,Khr),e(oc,Nve),e(Nve,Zhr),e(oc,epr),e(oc,IQ),e(IQ,opr),e(oc,rpr),e($t,tpr),M(I6,$t,null),e(Zo,apr),e(Zo,Lr),M(d9,Lr,null),e(Lr,npr),e(Lr,qve),e(qve,spr),e(Lr,lpr),e(Lr,tn),e(tn,ipr),e(tn,jve),e(jve,dpr),e(tn,cpr),e(tn,Dve),e(Dve,fpr),e(tn,mpr),e(tn,Gve),e(Gve,gpr),e(tn,hpr),e(Lr,ppr),e(Lr,q),e(q,N6),e(N6,Ove),e(Ove,upr),e(N6,_pr),e(N6,NQ),e(NQ,bpr),e(N6,vpr),e(q,Fpr),e(q,q6),e(q6,Vve),e(Vve,Tpr),e(q6,Mpr),e(q6,qQ),e(qQ,Epr),e(q6,Cpr),e(q,wpr),e(q,j6),e(j6,Xve),e(Xve,Apr),e(j6,Lpr),e(j6,jQ),e(jQ,ypr),e(j6,xpr),e(q,$pr),e(q,D6),e(D6,zve),e(zve,kpr),e(D6,Spr),e(D6,DQ),e(DQ,Rpr),e(D6,Ppr),e(q,Bpr),e(q,G6),e(G6,Wve),e(Wve,Ipr),e(G6,Npr),e(G6,GQ),e(GQ,qpr),e(G6,jpr),e(q,Dpr),e(q,O6),e(O6,Qve),e(Qve,Gpr),e(O6,Opr),e(O6,OQ),e(OQ,Vpr),e(O6,Xpr),e(q,zpr),e(q,V6),e(V6,Hve),e(Hve,Wpr),e(V6,Qpr),e(V6,VQ),e(VQ,Hpr),e(V6,Upr),e(q,Jpr),e(q,X6),e(X6,Uve),e(Uve,Ypr),e(X6,Kpr),e(X6,XQ),e(XQ,Zpr),e(X6,eur),e(q,our),e(q,z6),e(z6,Jve),e(Jve,rur),e(z6,tur),e(z6,zQ),e(zQ,aur),e(z6,nur),e(q,sur),e(q,W6),e(W6,Yve),e(Yve,lur),e(W6,iur),e(W6,WQ),e(WQ,dur),e(W6,cur),e(q,fur),e(q,Q6),e(Q6,Kve),e(Kve,mur),e(Q6,gur),e(Q6,QQ),e(QQ,hur),e(Q6,pur),e(q,uur),e(q,H6),e(H6,Zve),e(Zve,_ur),e(H6,bur),e(H6,HQ),e(HQ,vur),e(H6,Fur),e(q,Tur),e(q,U6),e(U6,e3e),e(e3e,Mur),e(U6,Eur),e(U6,UQ),e(UQ,Cur),e(U6,wur),e(q,Aur),e(q,J6),e(J6,o3e),e(o3e,Lur),e(J6,yur),e(J6,JQ),e(JQ,xur),e(J6,$ur),e(q,kur),e(q,Y6),e(Y6,r3e),e(r3e,Sur),e(Y6,Rur),e(Y6,YQ),e(YQ,Pur),e(Y6,Bur),e(q,Iur),e(q,K6),e(K6,t3e),e(t3e,Nur),e(K6,qur),e(K6,KQ),e(KQ,jur),e(K6,Dur),e(q,Gur),e(q,Z6),e(Z6,a3e),e(a3e,Our),e(Z6,Vur),e(Z6,ZQ),e(ZQ,Xur),e(Z6,zur),e(q,Wur),e(q,Xs),e(Xs,n3e),e(n3e,Qur),e(Xs,Hur),e(Xs,eH),e(eH,Uur),e(Xs,Jur),e(Xs,oH),e(oH,Yur),e(Xs,Kur),e(q,Zur),e(q,eT),e(eT,s3e),e(s3e,e_r),e(eT,o_r),e(eT,rH),e(rH,r_r),e(eT,t_r),e(q,a_r),e(q,oT),e(oT,l3e),e(l3e,n_r),e(oT,s_r),e(oT,tH),e(tH,l_r),e(oT,i_r),e(q,d_r),e(q,rT),e(rT,i3e),e(i3e,c_r),e(rT,f_r),e(rT,aH),e(aH,m_r),e(rT,g_r),e(q,h_r),e(q,tT),e(tT,d3e),e(d3e,p_r),e(tT,u_r),e(tT,nH),e(nH,__r),e(tT,b_r),e(q,v_r),e(q,aT),e(aT,c3e),e(c3e,F_r),e(aT,T_r),e(aT,sH),e(sH,M_r),e(aT,E_r),e(q,C_r),e(q,nT),e(nT,f3e),e(f3e,w_r),e(nT,A_r),e(nT,lH),e(lH,L_r),e(nT,y_r),e(q,x_r),e(q,sT),e(sT,m3e),e(m3e,$_r),e(sT,k_r),e(sT,iH),e(iH,S_r),e(sT,R_r),e(q,P_r),e(q,lT),e(lT,g3e),e(g3e,B_r),e(lT,I_r),e(lT,dH),e(dH,N_r),e(lT,q_r),e(q,j_r),e(q,iT),e(iT,h3e),e(h3e,D_r),e(iT,G_r),e(iT,cH),e(cH,O_r),e(iT,V_r),e(q,X_r),e(q,dT),e(dT,p3e),e(p3e,z_r),e(dT,W_r),e(dT,fH),e(fH,Q_r),e(dT,H_r),e(q,U_r),e(q,cT),e(cT,u3e),e(u3e,J_r),e(cT,Y_r),e(cT,mH),e(mH,K_r),e(cT,Z_r),e(q,e1r),e(q,fT),e(fT,_3e),e(_3e,o1r),e(fT,r1r),e(fT,gH),e(gH,t1r),e(fT,a1r),e(q,n1r),e(q,mT),e(mT,b3e),e(b3e,s1r),e(mT,l1r),e(mT,hH),e(hH,i1r),e(mT,d1r),e(q,c1r),e(q,gT),e(gT,v3e),e(v3e,f1r),e(gT,m1r),e(gT,pH),e(pH,g1r),e(gT,h1r),e(q,p1r),e(q,hT),e(hT,F3e),e(F3e,u1r),e(hT,_1r),e(hT,uH),e(uH,b1r),e(hT,v1r),e(q,F1r),e(q,pT),e(pT,T3e),e(T3e,T1r),e(pT,M1r),e(pT,_H),e(_H,E1r),e(pT,C1r),e(q,w1r),e(q,uT),e(uT,M3e),e(M3e,A1r),e(uT,L1r),e(uT,bH),e(bH,y1r),e(uT,x1r),e(q,$1r),e(q,_T),e(_T,E3e),e(E3e,k1r),e(_T,S1r),e(_T,vH),e(vH,R1r),e(_T,P1r),e(q,B1r),e(q,bT),e(bT,C3e),e(C3e,I1r),e(bT,N1r),e(bT,FH),e(FH,q1r),e(bT,j1r),e(q,D1r),e(q,vT),e(vT,w3e),e(w3e,G1r),e(vT,O1r),e(vT,TH),e(TH,V1r),e(vT,X1r),e(q,z1r),e(q,FT),e(FT,A3e),e(A3e,W1r),e(FT,Q1r),e(FT,MH),e(MH,H1r),e(FT,U1r),e(q,J1r),e(q,TT),e(TT,L3e),e(L3e,Y1r),e(TT,K1r),e(TT,EH),e(EH,Z1r),e(TT,e2r),e(q,o2r),e(q,MT),e(MT,y3e),e(y3e,r2r),e(MT,t2r),e(MT,CH),e(CH,a2r),e(MT,n2r),e(q,s2r),e(q,ET),e(ET,x3e),e(x3e,l2r),e(ET,i2r),e(ET,wH),e(wH,d2r),e(ET,c2r),e(q,f2r),e(q,CT),e(CT,$3e),e($3e,m2r),e(CT,g2r),e(CT,AH),e(AH,h2r),e(CT,p2r),e(q,u2r),e(q,wT),e(wT,k3e),e(k3e,_2r),e(wT,b2r),e(wT,LH),e(LH,v2r),e(wT,F2r),e(q,T2r),e(q,AT),e(AT,S3e),e(S3e,M2r),e(AT,E2r),e(AT,yH),e(yH,C2r),e(AT,w2r),e(q,A2r),e(q,LT),e(LT,R3e),e(R3e,L2r),e(LT,y2r),e(LT,xH),e(xH,x2r),e(LT,$2r),e(q,k2r),e(q,yT),e(yT,P3e),e(P3e,S2r),e(yT,R2r),e(yT,$H),e($H,P2r),e(yT,B2r),e(Lr,I2r),M(xT,Lr,null),b(f,lOe,_),b(f,rc,_),e(rc,$T),e($T,B3e),M(c9,B3e,null),e(rc,N2r),e(rc,I3e),e(I3e,q2r),b(f,iOe,_),b(f,er,_),M(f9,er,null),e(er,j2r),e(er,tc),e(tc,D2r),e(tc,kH),e(kH,G2r),e(tc,O2r),e(tc,SH),e(SH,V2r),e(tc,X2r),e(er,z2r),e(er,m9),e(m9,W2r),e(m9,N3e),e(N3e,Q2r),e(m9,H2r),e(er,U2r),e(er,kt),M(g9,kt,null),e(kt,J2r),e(kt,q3e),e(q3e,Y2r),e(kt,K2r),e(kt,ac),e(ac,Z2r),e(ac,j3e),e(j3e,ebr),e(ac,obr),e(ac,RH),e(RH,rbr),e(ac,tbr),e(kt,abr),M(kT,kt,null),e(er,nbr),e(er,yr),M(h9,yr,null),e(yr,sbr),e(yr,D3e),e(D3e,lbr),e(yr,ibr),e(yr,an),e(an,dbr),e(an,G3e),e(G3e,cbr),e(an,fbr),e(an,O3e),e(O3e,mbr),e(an,gbr),e(an,V3e),e(V3e,hbr),e(an,pbr),e(yr,ubr),e(yr,se),e(se,ST),e(ST,X3e),e(X3e,_br),e(ST,bbr),e(ST,PH),e(PH,vbr),e(ST,Fbr),e(se,Tbr),e(se,RT),e(RT,z3e),e(z3e,Mbr),e(RT,Ebr),e(RT,BH),e(BH,Cbr),e(RT,wbr),e(se,Abr),e(se,PT),e(PT,W3e),e(W3e,Lbr),e(PT,ybr),e(PT,IH),e(IH,xbr),e(PT,$br),e(se,kbr),e(se,BT),e(BT,Q3e),e(Q3e,Sbr),e(BT,Rbr),e(BT,NH),e(NH,Pbr),e(BT,Bbr),e(se,Ibr),e(se,IT),e(IT,H3e),e(H3e,Nbr),e(IT,qbr),e(IT,qH),e(qH,jbr),e(IT,Dbr),e(se,Gbr),e(se,NT),e(NT,U3e),e(U3e,Obr),e(NT,Vbr),e(NT,jH),e(jH,Xbr),e(NT,zbr),e(se,Wbr),e(se,qT),e(qT,J3e),e(J3e,Qbr),e(qT,Hbr),e(qT,DH),e(DH,Ubr),e(qT,Jbr),e(se,Ybr),e(se,jT),e(jT,Y3e),e(Y3e,Kbr),e(jT,Zbr),e(jT,GH),e(GH,evr),e(jT,ovr),e(se,rvr),e(se,DT),e(DT,K3e),e(K3e,tvr),e(DT,avr),e(DT,OH),e(OH,nvr),e(DT,svr),e(se,lvr),e(se,GT),e(GT,Z3e),e(Z3e,ivr),e(GT,dvr),e(GT,VH),e(VH,cvr),e(GT,fvr),e(se,mvr),e(se,OT),e(OT,e0e),e(e0e,gvr),e(OT,hvr),e(OT,XH),e(XH,pvr),e(OT,uvr),e(se,_vr),e(se,VT),e(VT,o0e),e(o0e,bvr),e(VT,vvr),e(VT,zH),e(zH,Fvr),e(VT,Tvr),e(se,Mvr),e(se,XT),e(XT,r0e),e(r0e,Evr),e(XT,Cvr),e(XT,WH),e(WH,wvr),e(XT,Avr),e(se,Lvr),e(se,zT),e(zT,t0e),e(t0e,yvr),e(zT,xvr),e(zT,QH),e(QH,$vr),e(zT,kvr),e(se,Svr),e(se,WT),e(WT,a0e),e(a0e,Rvr),e(WT,Pvr),e(WT,HH),e(HH,Bvr),e(WT,Ivr),e(se,Nvr),e(se,QT),e(QT,n0e),e(n0e,qvr),e(QT,jvr),e(QT,UH),e(UH,Dvr),e(QT,Gvr),e(se,Ovr),e(se,HT),e(HT,s0e),e(s0e,Vvr),e(HT,Xvr),e(HT,JH),e(JH,zvr),e(HT,Wvr),e(se,Qvr),e(se,UT),e(UT,l0e),e(l0e,Hvr),e(UT,Uvr),e(UT,YH),e(YH,Jvr),e(UT,Yvr),e(se,Kvr),e(se,JT),e(JT,i0e),e(i0e,Zvr),e(JT,e3r),e(JT,KH),e(KH,o3r),e(JT,r3r),e(se,t3r),e(se,YT),e(YT,d0e),e(d0e,a3r),e(YT,n3r),e(YT,ZH),e(ZH,s3r),e(YT,l3r),e(se,i3r),e(se,KT),e(KT,c0e),e(c0e,d3r),e(KT,c3r),e(KT,eU),e(eU,f3r),e(KT,m3r),e(se,g3r),e(se,ZT),e(ZT,f0e),e(f0e,h3r),e(ZT,p3r),e(ZT,oU),e(oU,u3r),e(ZT,_3r),e(se,b3r),e(se,e7),e(e7,m0e),e(m0e,v3r),e(e7,F3r),e(e7,rU),e(rU,T3r),e(e7,M3r),e(yr,E3r),M(o7,yr,null),b(f,dOe,_),b(f,nc,_),e(nc,r7),e(r7,g0e),M(p9,g0e,null),e(nc,C3r),e(nc,h0e),e(h0e,w3r),b(f,cOe,_),b(f,or,_),M(u9,or,null),e(or,A3r),e(or,sc),e(sc,L3r),e(sc,tU),e(tU,y3r),e(sc,x3r),e(sc,aU),e(aU,$3r),e(sc,k3r),e(or,S3r),e(or,_9),e(_9,R3r),e(_9,p0e),e(p0e,P3r),e(_9,B3r),e(or,I3r),e(or,St),M(b9,St,null),e(St,N3r),e(St,u0e),e(u0e,q3r),e(St,j3r),e(St,lc),e(lc,D3r),e(lc,_0e),e(_0e,G3r),e(lc,O3r),e(lc,nU),e(nU,V3r),e(lc,X3r),e(St,z3r),M(t7,St,null),e(or,W3r),e(or,xr),M(v9,xr,null),e(xr,Q3r),e(xr,b0e),e(b0e,H3r),e(xr,U3r),e(xr,nn),e(nn,J3r),e(nn,v0e),e(v0e,Y3r),e(nn,K3r),e(nn,F0e),e(F0e,Z3r),e(nn,e0r),e(nn,T0e),e(T0e,o0r),e(nn,r0r),e(xr,t0r),e(xr,Me),e(Me,a7),e(a7,M0e),e(M0e,a0r),e(a7,n0r),e(a7,sU),e(sU,s0r),e(a7,l0r),e(Me,i0r),e(Me,n7),e(n7,E0e),e(E0e,d0r),e(n7,c0r),e(n7,lU),e(lU,f0r),e(n7,m0r),e(Me,g0r),e(Me,s7),e(s7,C0e),e(C0e,h0r),e(s7,p0r),e(s7,iU),e(iU,u0r),e(s7,_0r),e(Me,b0r),e(Me,l7),e(l7,w0e),e(w0e,v0r),e(l7,F0r),e(l7,dU),e(dU,T0r),e(l7,M0r),e(Me,E0r),e(Me,i7),e(i7,A0e),e(A0e,C0r),e(i7,w0r),e(i7,cU),e(cU,A0r),e(i7,L0r),e(Me,y0r),e(Me,d7),e(d7,L0e),e(L0e,x0r),e(d7,$0r),e(d7,fU),e(fU,k0r),e(d7,S0r),e(Me,R0r),e(Me,c7),e(c7,y0e),e(y0e,P0r),e(c7,B0r),e(c7,mU),e(mU,I0r),e(c7,N0r),e(Me,q0r),e(Me,f7),e(f7,x0e),e(x0e,j0r),e(f7,D0r),e(f7,gU),e(gU,G0r),e(f7,O0r),e(Me,V0r),e(Me,m7),e(m7,$0e),e($0e,X0r),e(m7,z0r),e(m7,hU),e(hU,W0r),e(m7,Q0r),e(Me,H0r),e(Me,g7),e(g7,k0e),e(k0e,U0r),e(g7,J0r),e(g7,pU),e(pU,Y0r),e(g7,K0r),e(Me,Z0r),e(Me,h7),e(h7,S0e),e(S0e,eFr),e(h7,oFr),e(h7,uU),e(uU,rFr),e(h7,tFr),e(Me,aFr),e(Me,p7),e(p7,R0e),e(R0e,nFr),e(p7,sFr),e(p7,_U),e(_U,lFr),e(p7,iFr),e(Me,dFr),e(Me,u7),e(u7,P0e),e(P0e,cFr),e(u7,fFr),e(u7,bU),e(bU,mFr),e(u7,gFr),e(xr,hFr),M(_7,xr,null),b(f,fOe,_),b(f,ic,_),e(ic,b7),e(b7,B0e),M(F9,B0e,null),e(ic,pFr),e(ic,I0e),e(I0e,uFr),b(f,mOe,_),b(f,rr,_),M(T9,rr,null),e(rr,_Fr),e(rr,dc),e(dc,bFr),e(dc,vU),e(vU,vFr),e(dc,FFr),e(dc,FU),e(FU,TFr),e(dc,MFr),e(rr,EFr),e(rr,M9),e(M9,CFr),e(M9,N0e),e(N0e,wFr),e(M9,AFr),e(rr,LFr),e(rr,Rt),M(E9,Rt,null),e(Rt,yFr),e(Rt,q0e),e(q0e,xFr),e(Rt,$Fr),e(Rt,cc),e(cc,kFr),e(cc,j0e),e(j0e,SFr),e(cc,RFr),e(cc,TU),e(TU,PFr),e(cc,BFr),e(Rt,IFr),M(v7,Rt,null),e(rr,NFr),e(rr,$r),M(C9,$r,null),e($r,qFr),e($r,D0e),e(D0e,jFr),e($r,DFr),e($r,sn),e(sn,GFr),e(sn,G0e),e(G0e,OFr),e(sn,VFr),e(sn,O0e),e(O0e,XFr),e(sn,zFr),e(sn,V0e),e(V0e,WFr),e(sn,QFr),e($r,HFr),e($r,ln),e(ln,F7),e(F7,X0e),e(X0e,UFr),e(F7,JFr),e(F7,MU),e(MU,YFr),e(F7,KFr),e(ln,ZFr),e(ln,T7),e(T7,z0e),e(z0e,e6r),e(T7,o6r),e(T7,EU),e(EU,r6r),e(T7,t6r),e(ln,a6r),e(ln,M7),e(M7,W0e),e(W0e,n6r),e(M7,s6r),e(M7,CU),e(CU,l6r),e(M7,i6r),e(ln,d6r),e(ln,E7),e(E7,Q0e),e(Q0e,c6r),e(E7,f6r),e(E7,wU),e(wU,m6r),e(E7,g6r),e($r,h6r),M(C7,$r,null),b(f,gOe,_),b(f,fc,_),e(fc,w7),e(w7,H0e),M(w9,H0e,null),e(fc,p6r),e(fc,U0e),e(U0e,u6r),b(f,hOe,_),b(f,tr,_),M(A9,tr,null),e(tr,_6r),e(tr,mc),e(mc,b6r),e(mc,AU),e(AU,v6r),e(mc,F6r),e(mc,LU),e(LU,T6r),e(mc,M6r),e(tr,E6r),e(tr,L9),e(L9,C6r),e(L9,J0e),e(J0e,w6r),e(L9,A6r),e(tr,L6r),e(tr,Pt),M(y9,Pt,null),e(Pt,y6r),e(Pt,Y0e),e(Y0e,x6r),e(Pt,$6r),e(Pt,gc),e(gc,k6r),e(gc,K0e),e(K0e,S6r),e(gc,R6r),e(gc,yU),e(yU,P6r),e(gc,B6r),e(Pt,I6r),M(A7,Pt,null),e(tr,N6r),e(tr,kr),M(x9,kr,null),e(kr,q6r),e(kr,Z0e),e(Z0e,j6r),e(kr,D6r),e(kr,dn),e(dn,G6r),e(dn,eFe),e(eFe,O6r),e(dn,V6r),e(dn,oFe),e(oFe,X6r),e(dn,z6r),e(dn,rFe),e(rFe,W6r),e(dn,Q6r),e(kr,H6r),e(kr,ie),e(ie,L7),e(L7,tFe),e(tFe,U6r),e(L7,J6r),e(L7,xU),e(xU,Y6r),e(L7,K6r),e(ie,Z6r),e(ie,y7),e(y7,aFe),e(aFe,eTr),e(y7,oTr),e(y7,$U),e($U,rTr),e(y7,tTr),e(ie,aTr),e(ie,x7),e(x7,nFe),e(nFe,nTr),e(x7,sTr),e(x7,kU),e(kU,lTr),e(x7,iTr),e(ie,dTr),e(ie,$7),e($7,sFe),e(sFe,cTr),e($7,fTr),e($7,SU),e(SU,mTr),e($7,gTr),e(ie,hTr),e(ie,k7),e(k7,lFe),e(lFe,pTr),e(k7,uTr),e(k7,RU),e(RU,_Tr),e(k7,bTr),e(ie,vTr),e(ie,S7),e(S7,iFe),e(iFe,FTr),e(S7,TTr),e(S7,PU),e(PU,MTr),e(S7,ETr),e(ie,CTr),e(ie,R7),e(R7,dFe),e(dFe,wTr),e(R7,ATr),e(R7,BU),e(BU,LTr),e(R7,yTr),e(ie,xTr),e(ie,P7),e(P7,cFe),e(cFe,$Tr),e(P7,kTr),e(P7,IU),e(IU,STr),e(P7,RTr),e(ie,PTr),e(ie,B7),e(B7,fFe),e(fFe,BTr),e(B7,ITr),e(B7,NU),e(NU,NTr),e(B7,qTr),e(ie,jTr),e(ie,I7),e(I7,mFe),e(mFe,DTr),e(I7,GTr),e(I7,qU),e(qU,OTr),e(I7,VTr),e(ie,XTr),e(ie,N7),e(N7,gFe),e(gFe,zTr),e(N7,WTr),e(N7,jU),e(jU,QTr),e(N7,HTr),e(ie,UTr),e(ie,q7),e(q7,hFe),e(hFe,JTr),e(q7,YTr),e(q7,DU),e(DU,KTr),e(q7,ZTr),e(ie,e7r),e(ie,j7),e(j7,pFe),e(pFe,o7r),e(j7,r7r),e(j7,GU),e(GU,t7r),e(j7,a7r),e(ie,n7r),e(ie,D7),e(D7,uFe),e(uFe,s7r),e(D7,l7r),e(D7,OU),e(OU,i7r),e(D7,d7r),e(ie,c7r),e(ie,G7),e(G7,_Fe),e(_Fe,f7r),e(G7,m7r),e(G7,VU),e(VU,g7r),e(G7,h7r),e(ie,p7r),e(ie,O7),e(O7,bFe),e(bFe,u7r),e(O7,_7r),e(O7,XU),e(XU,b7r),e(O7,v7r),e(ie,F7r),e(ie,V7),e(V7,vFe),e(vFe,T7r),e(V7,M7r),e(V7,zU),e(zU,E7r),e(V7,C7r),e(ie,w7r),e(ie,X7),e(X7,FFe),e(FFe,A7r),e(X7,L7r),e(X7,WU),e(WU,y7r),e(X7,x7r),e(ie,$7r),e(ie,z7),e(z7,TFe),e(TFe,k7r),e(z7,S7r),e(z7,QU),e(QU,R7r),e(z7,P7r),e(ie,B7r),e(ie,W7),e(W7,MFe),e(MFe,I7r),e(W7,N7r),e(W7,HU),e(HU,q7r),e(W7,j7r),e(kr,D7r),M(Q7,kr,null),b(f,pOe,_),b(f,hc,_),e(hc,H7),e(H7,EFe),M($9,EFe,null),e(hc,G7r),e(hc,CFe),e(CFe,O7r),b(f,uOe,_),b(f,ar,_),M(k9,ar,null),e(ar,V7r),e(ar,pc),e(pc,X7r),e(pc,UU),e(UU,z7r),e(pc,W7r),e(pc,JU),e(JU,Q7r),e(pc,H7r),e(ar,U7r),e(ar,S9),e(S9,J7r),e(S9,wFe),e(wFe,Y7r),e(S9,K7r),e(ar,Z7r),e(ar,Bt),M(R9,Bt,null),e(Bt,eMr),e(Bt,AFe),e(AFe,oMr),e(Bt,rMr),e(Bt,uc),e(uc,tMr),e(uc,LFe),e(LFe,aMr),e(uc,nMr),e(uc,YU),e(YU,sMr),e(uc,lMr),e(Bt,iMr),M(U7,Bt,null),e(ar,dMr),e(ar,Sr),M(P9,Sr,null),e(Sr,cMr),e(Sr,yFe),e(yFe,fMr),e(Sr,mMr),e(Sr,cn),e(cn,gMr),e(cn,xFe),e(xFe,hMr),e(cn,pMr),e(cn,$Fe),e($Fe,uMr),e(cn,_Mr),e(cn,kFe),e(kFe,bMr),e(cn,vMr),e(Sr,FMr),e(Sr,ye),e(ye,J7),e(J7,SFe),e(SFe,TMr),e(J7,MMr),e(J7,KU),e(KU,EMr),e(J7,CMr),e(ye,wMr),e(ye,Y7),e(Y7,RFe),e(RFe,AMr),e(Y7,LMr),e(Y7,ZU),e(ZU,yMr),e(Y7,xMr),e(ye,$Mr),e(ye,K7),e(K7,PFe),e(PFe,kMr),e(K7,SMr),e(K7,eJ),e(eJ,RMr),e(K7,PMr),e(ye,BMr),e(ye,Z7),e(Z7,BFe),e(BFe,IMr),e(Z7,NMr),e(Z7,oJ),e(oJ,qMr),e(Z7,jMr),e(ye,DMr),e(ye,eM),e(eM,IFe),e(IFe,GMr),e(eM,OMr),e(eM,rJ),e(rJ,VMr),e(eM,XMr),e(ye,zMr),e(ye,oM),e(oM,NFe),e(NFe,WMr),e(oM,QMr),e(oM,tJ),e(tJ,HMr),e(oM,UMr),e(ye,JMr),e(ye,rM),e(rM,qFe),e(qFe,YMr),e(rM,KMr),e(rM,aJ),e(aJ,ZMr),e(rM,e4r),e(ye,o4r),e(ye,tM),e(tM,jFe),e(jFe,r4r),e(tM,t4r),e(tM,nJ),e(nJ,a4r),e(tM,n4r),e(ye,s4r),e(ye,aM),e(aM,DFe),e(DFe,l4r),e(aM,i4r),e(aM,sJ),e(sJ,d4r),e(aM,c4r),e(ye,f4r),e(ye,nM),e(nM,GFe),e(GFe,m4r),e(nM,g4r),e(nM,lJ),e(lJ,h4r),e(nM,p4r),e(Sr,u4r),M(sM,Sr,null),b(f,_Oe,_),b(f,_c,_),e(_c,lM),e(lM,OFe),M(B9,OFe,null),e(_c,_4r),e(_c,VFe),e(VFe,b4r),b(f,bOe,_),b(f,nr,_),M(I9,nr,null),e(nr,v4r),e(nr,bc),e(bc,F4r),e(bc,iJ),e(iJ,T4r),e(bc,M4r),e(bc,dJ),e(dJ,E4r),e(bc,C4r),e(nr,w4r),e(nr,N9),e(N9,A4r),e(N9,XFe),e(XFe,L4r),e(N9,y4r),e(nr,x4r),e(nr,It),M(q9,It,null),e(It,$4r),e(It,zFe),e(zFe,k4r),e(It,S4r),e(It,vc),e(vc,R4r),e(vc,WFe),e(WFe,P4r),e(vc,B4r),e(vc,cJ),e(cJ,I4r),e(vc,N4r),e(It,q4r),M(iM,It,null),e(nr,j4r),e(nr,Rr),M(j9,Rr,null),e(Rr,D4r),e(Rr,QFe),e(QFe,G4r),e(Rr,O4r),e(Rr,fn),e(fn,V4r),e(fn,HFe),e(HFe,X4r),e(fn,z4r),e(fn,UFe),e(UFe,W4r),e(fn,Q4r),e(fn,JFe),e(JFe,H4r),e(fn,U4r),e(Rr,J4r),e(Rr,te),e(te,dM),e(dM,YFe),e(YFe,Y4r),e(dM,K4r),e(dM,fJ),e(fJ,Z4r),e(dM,eEr),e(te,oEr),e(te,cM),e(cM,KFe),e(KFe,rEr),e(cM,tEr),e(cM,mJ),e(mJ,aEr),e(cM,nEr),e(te,sEr),e(te,fM),e(fM,ZFe),e(ZFe,lEr),e(fM,iEr),e(fM,gJ),e(gJ,dEr),e(fM,cEr),e(te,fEr),e(te,mM),e(mM,e6e),e(e6e,mEr),e(mM,gEr),e(mM,hJ),e(hJ,hEr),e(mM,pEr),e(te,uEr),e(te,gM),e(gM,o6e),e(o6e,_Er),e(gM,bEr),e(gM,pJ),e(pJ,vEr),e(gM,FEr),e(te,TEr),e(te,hM),e(hM,r6e),e(r6e,MEr),e(hM,EEr),e(hM,uJ),e(uJ,CEr),e(hM,wEr),e(te,AEr),e(te,pM),e(pM,t6e),e(t6e,LEr),e(pM,yEr),e(pM,_J),e(_J,xEr),e(pM,$Er),e(te,kEr),e(te,uM),e(uM,a6e),e(a6e,SEr),e(uM,REr),e(uM,bJ),e(bJ,PEr),e(uM,BEr),e(te,IEr),e(te,_M),e(_M,n6e),e(n6e,NEr),e(_M,qEr),e(_M,vJ),e(vJ,jEr),e(_M,DEr),e(te,GEr),e(te,bM),e(bM,s6e),e(s6e,OEr),e(bM,VEr),e(bM,FJ),e(FJ,XEr),e(bM,zEr),e(te,WEr),e(te,vM),e(vM,l6e),e(l6e,QEr),e(vM,HEr),e(vM,TJ),e(TJ,UEr),e(vM,JEr),e(te,YEr),e(te,FM),e(FM,i6e),e(i6e,KEr),e(FM,ZEr),e(FM,MJ),e(MJ,eCr),e(FM,oCr),e(te,rCr),e(te,TM),e(TM,d6e),e(d6e,tCr),e(TM,aCr),e(TM,EJ),e(EJ,nCr),e(TM,sCr),e(te,lCr),e(te,MM),e(MM,c6e),e(c6e,iCr),e(MM,dCr),e(MM,CJ),e(CJ,cCr),e(MM,fCr),e(te,mCr),e(te,EM),e(EM,f6e),e(f6e,gCr),e(EM,hCr),e(EM,wJ),e(wJ,pCr),e(EM,uCr),e(te,_Cr),e(te,CM),e(CM,m6e),e(m6e,bCr),e(CM,vCr),e(CM,AJ),e(AJ,FCr),e(CM,TCr),e(te,MCr),e(te,wM),e(wM,g6e),e(g6e,ECr),e(wM,CCr),e(wM,LJ),e(LJ,wCr),e(wM,ACr),e(te,LCr),e(te,AM),e(AM,h6e),e(h6e,yCr),e(AM,xCr),e(AM,yJ),e(yJ,$Cr),e(AM,kCr),e(te,SCr),e(te,LM),e(LM,p6e),e(p6e,RCr),e(LM,PCr),e(LM,xJ),e(xJ,BCr),e(LM,ICr),e(te,NCr),e(te,yM),e(yM,u6e),e(u6e,qCr),e(yM,jCr),e(yM,$J),e($J,DCr),e(yM,GCr),e(te,OCr),e(te,xM),e(xM,_6e),e(_6e,VCr),e(xM,XCr),e(xM,kJ),e(kJ,zCr),e(xM,WCr),e(te,QCr),e(te,$M),e($M,b6e),e(b6e,HCr),e($M,UCr),e($M,SJ),e(SJ,JCr),e($M,YCr),e(te,KCr),e(te,kM),e(kM,v6e),e(v6e,ZCr),e(kM,e5r),e(kM,RJ),e(RJ,o5r),e(kM,r5r),e(te,t5r),e(te,SM),e(SM,F6e),e(F6e,a5r),e(SM,n5r),e(SM,PJ),e(PJ,s5r),e(SM,l5r),e(te,i5r),e(te,RM),e(RM,T6e),e(T6e,d5r),e(RM,c5r),e(RM,BJ),e(BJ,f5r),e(RM,m5r),e(te,g5r),e(te,PM),e(PM,M6e),e(M6e,h5r),e(PM,p5r),e(PM,IJ),e(IJ,u5r),e(PM,_5r),e(Rr,b5r),M(BM,Rr,null),b(f,vOe,_),b(f,Fc,_),e(Fc,IM),e(IM,E6e),M(D9,E6e,null),e(Fc,v5r),e(Fc,C6e),e(C6e,F5r),b(f,FOe,_),b(f,sr,_),M(G9,sr,null),e(sr,T5r),e(sr,Tc),e(Tc,M5r),e(Tc,NJ),e(NJ,E5r),e(Tc,C5r),e(Tc,qJ),e(qJ,w5r),e(Tc,A5r),e(sr,L5r),e(sr,O9),e(O9,y5r),e(O9,w6e),e(w6e,x5r),e(O9,$5r),e(sr,k5r),e(sr,Nt),M(V9,Nt,null),e(Nt,S5r),e(Nt,A6e),e(A6e,R5r),e(Nt,P5r),e(Nt,Mc),e(Mc,B5r),e(Mc,L6e),e(L6e,I5r),e(Mc,N5r),e(Mc,jJ),e(jJ,q5r),e(Mc,j5r),e(Nt,D5r),M(NM,Nt,null),e(sr,G5r),e(sr,Pr),M(X9,Pr,null),e(Pr,O5r),e(Pr,y6e),e(y6e,V5r),e(Pr,X5r),e(Pr,mn),e(mn,z5r),e(mn,x6e),e(x6e,W5r),e(mn,Q5r),e(mn,$6e),e($6e,H5r),e(mn,U5r),e(mn,k6e),e(k6e,J5r),e(mn,Y5r),e(Pr,K5r),e(Pr,ue),e(ue,qM),e(qM,S6e),e(S6e,Z5r),e(qM,ewr),e(qM,DJ),e(DJ,owr),e(qM,rwr),e(ue,twr),e(ue,jM),e(jM,R6e),e(R6e,awr),e(jM,nwr),e(jM,GJ),e(GJ,swr),e(jM,lwr),e(ue,iwr),e(ue,DM),e(DM,P6e),e(P6e,dwr),e(DM,cwr),e(DM,OJ),e(OJ,fwr),e(DM,mwr),e(ue,gwr),e(ue,GM),e(GM,B6e),e(B6e,hwr),e(GM,pwr),e(GM,VJ),e(VJ,uwr),e(GM,_wr),e(ue,bwr),e(ue,OM),e(OM,I6e),e(I6e,vwr),e(OM,Fwr),e(OM,XJ),e(XJ,Twr),e(OM,Mwr),e(ue,Ewr),e(ue,VM),e(VM,N6e),e(N6e,Cwr),e(VM,wwr),e(VM,zJ),e(zJ,Awr),e(VM,Lwr),e(ue,ywr),e(ue,XM),e(XM,q6e),e(q6e,xwr),e(XM,$wr),e(XM,WJ),e(WJ,kwr),e(XM,Swr),e(ue,Rwr),e(ue,zM),e(zM,j6e),e(j6e,Pwr),e(zM,Bwr),e(zM,QJ),e(QJ,Iwr),e(zM,Nwr),e(ue,qwr),e(ue,WM),e(WM,D6e),e(D6e,jwr),e(WM,Dwr),e(WM,HJ),e(HJ,Gwr),e(WM,Owr),e(ue,Vwr),e(ue,QM),e(QM,G6e),e(G6e,Xwr),e(QM,zwr),e(QM,UJ),e(UJ,Wwr),e(QM,Qwr),e(ue,Hwr),e(ue,HM),e(HM,O6e),e(O6e,Uwr),e(HM,Jwr),e(HM,JJ),e(JJ,Ywr),e(HM,Kwr),e(ue,Zwr),e(ue,UM),e(UM,V6e),e(V6e,eAr),e(UM,oAr),e(UM,YJ),e(YJ,rAr),e(UM,tAr),e(ue,aAr),e(ue,JM),e(JM,X6e),e(X6e,nAr),e(JM,sAr),e(JM,KJ),e(KJ,lAr),e(JM,iAr),e(ue,dAr),e(ue,YM),e(YM,z6e),e(z6e,cAr),e(YM,fAr),e(YM,ZJ),e(ZJ,mAr),e(YM,gAr),e(ue,hAr),e(ue,KM),e(KM,W6e),e(W6e,pAr),e(KM,uAr),e(KM,eY),e(eY,_Ar),e(KM,bAr),e(ue,vAr),e(ue,ZM),e(ZM,Q6e),e(Q6e,FAr),e(ZM,TAr),e(ZM,oY),e(oY,MAr),e(ZM,EAr),e(ue,CAr),e(ue,e4),e(e4,H6e),e(H6e,wAr),e(e4,AAr),e(e4,rY),e(rY,LAr),e(e4,yAr),e(Pr,xAr),M(o4,Pr,null),b(f,TOe,_),b(f,Ec,_),e(Ec,r4),e(r4,U6e),M(z9,U6e,null),e(Ec,$Ar),e(Ec,J6e),e(J6e,kAr),b(f,MOe,_),b(f,lr,_),M(W9,lr,null),e(lr,SAr),e(lr,Cc),e(Cc,RAr),e(Cc,tY),e(tY,PAr),e(Cc,BAr),e(Cc,aY),e(aY,IAr),e(Cc,NAr),e(lr,qAr),e(lr,Q9),e(Q9,jAr),e(Q9,Y6e),e(Y6e,DAr),e(Q9,GAr),e(lr,OAr),e(lr,qt),M(H9,qt,null),e(qt,VAr),e(qt,K6e),e(K6e,XAr),e(qt,zAr),e(qt,wc),e(wc,WAr),e(wc,Z6e),e(Z6e,QAr),e(wc,HAr),e(wc,nY),e(nY,UAr),e(wc,JAr),e(qt,YAr),M(t4,qt,null),e(lr,KAr),e(lr,Br),M(U9,Br,null),e(Br,ZAr),e(Br,eTe),e(eTe,eLr),e(Br,oLr),e(Br,gn),e(gn,rLr),e(gn,oTe),e(oTe,tLr),e(gn,aLr),e(gn,rTe),e(rTe,nLr),e(gn,sLr),e(gn,tTe),e(tTe,lLr),e(gn,iLr),e(Br,dLr),e(Br,J9),e(J9,a4),e(a4,aTe),e(aTe,cLr),e(a4,fLr),e(a4,sY),e(sY,mLr),e(a4,gLr),e(J9,hLr),e(J9,n4),e(n4,nTe),e(nTe,pLr),e(n4,uLr),e(n4,lY),e(lY,_Lr),e(n4,bLr),e(Br,vLr),M(s4,Br,null),b(f,EOe,_),b(f,Ac,_),e(Ac,l4),e(l4,sTe),M(Y9,sTe,null),e(Ac,FLr),e(Ac,lTe),e(lTe,TLr),b(f,COe,_),b(f,ir,_),M(K9,ir,null),e(ir,MLr),e(ir,Lc),e(Lc,ELr),e(Lc,iY),e(iY,CLr),e(Lc,wLr),e(Lc,dY),e(dY,ALr),e(Lc,LLr),e(ir,yLr),e(ir,Z9),e(Z9,xLr),e(Z9,iTe),e(iTe,$Lr),e(Z9,kLr),e(ir,SLr),e(ir,jt),M(ex,jt,null),e(jt,RLr),e(jt,dTe),e(dTe,PLr),e(jt,BLr),e(jt,yc),e(yc,ILr),e(yc,cTe),e(cTe,NLr),e(yc,qLr),e(yc,cY),e(cY,jLr),e(yc,DLr),e(jt,GLr),M(i4,jt,null),e(ir,OLr),e(ir,Ir),M(ox,Ir,null),e(Ir,VLr),e(Ir,fTe),e(fTe,XLr),e(Ir,zLr),e(Ir,hn),e(hn,WLr),e(hn,mTe),e(mTe,QLr),e(hn,HLr),e(hn,gTe),e(gTe,ULr),e(hn,JLr),e(hn,hTe),e(hTe,YLr),e(hn,KLr),e(Ir,ZLr),e(Ir,pTe),e(pTe,d4),e(d4,uTe),e(uTe,eyr),e(d4,oyr),e(d4,fY),e(fY,ryr),e(d4,tyr),e(Ir,ayr),M(c4,Ir,null),b(f,wOe,_),b(f,xc,_),e(xc,f4),e(f4,_Te),M(rx,_Te,null),e(xc,nyr),e(xc,bTe),e(bTe,syr),b(f,AOe,_),b(f,dr,_),M(tx,dr,null),e(dr,lyr),e(dr,$c),e($c,iyr),e($c,mY),e(mY,dyr),e($c,cyr),e($c,gY),e(gY,fyr),e($c,myr),e(dr,gyr),e(dr,ax),e(ax,hyr),e(ax,vTe),e(vTe,pyr),e(ax,uyr),e(dr,_yr),e(dr,Dt),M(nx,Dt,null),e(Dt,byr),e(Dt,FTe),e(FTe,vyr),e(Dt,Fyr),e(Dt,kc),e(kc,Tyr),e(kc,TTe),e(TTe,Myr),e(kc,Eyr),e(kc,hY),e(hY,Cyr),e(kc,wyr),e(Dt,Ayr),M(m4,Dt,null),e(dr,Lyr),e(dr,Nr),M(sx,Nr,null),e(Nr,yyr),e(Nr,MTe),e(MTe,xyr),e(Nr,$yr),e(Nr,pn),e(pn,kyr),e(pn,ETe),e(ETe,Syr),e(pn,Ryr),e(pn,CTe),e(CTe,Pyr),e(pn,Byr),e(pn,wTe),e(wTe,Iyr),e(pn,Nyr),e(Nr,qyr),e(Nr,de),e(de,g4),e(g4,ATe),e(ATe,jyr),e(g4,Dyr),e(g4,pY),e(pY,Gyr),e(g4,Oyr),e(de,Vyr),e(de,h4),e(h4,LTe),e(LTe,Xyr),e(h4,zyr),e(h4,uY),e(uY,Wyr),e(h4,Qyr),e(de,Hyr),e(de,p4),e(p4,yTe),e(yTe,Uyr),e(p4,Jyr),e(p4,_Y),e(_Y,Yyr),e(p4,Kyr),e(de,Zyr),e(de,u4),e(u4,xTe),e(xTe,e8r),e(u4,o8r),e(u4,bY),e(bY,r8r),e(u4,t8r),e(de,a8r),e(de,_4),e(_4,$Te),e($Te,n8r),e(_4,s8r),e(_4,vY),e(vY,l8r),e(_4,i8r),e(de,d8r),e(de,b4),e(b4,kTe),e(kTe,c8r),e(b4,f8r),e(b4,FY),e(FY,m8r),e(b4,g8r),e(de,h8r),e(de,v4),e(v4,STe),e(STe,p8r),e(v4,u8r),e(v4,TY),e(TY,_8r),e(v4,b8r),e(de,v8r),e(de,F4),e(F4,RTe),e(RTe,F8r),e(F4,T8r),e(F4,MY),e(MY,M8r),e(F4,E8r),e(de,C8r),e(de,T4),e(T4,PTe),e(PTe,w8r),e(T4,A8r),e(T4,EY),e(EY,L8r),e(T4,y8r),e(de,x8r),e(de,M4),e(M4,BTe),e(BTe,$8r),e(M4,k8r),e(M4,CY),e(CY,S8r),e(M4,R8r),e(de,P8r),e(de,E4),e(E4,ITe),e(ITe,B8r),e(E4,I8r),e(E4,wY),e(wY,N8r),e(E4,q8r),e(de,j8r),e(de,C4),e(C4,NTe),e(NTe,D8r),e(C4,G8r),e(C4,AY),e(AY,O8r),e(C4,V8r),e(de,X8r),e(de,w4),e(w4,qTe),e(qTe,z8r),e(w4,W8r),e(w4,LY),e(LY,Q8r),e(w4,H8r),e(de,U8r),e(de,A4),e(A4,jTe),e(jTe,J8r),e(A4,Y8r),e(A4,yY),e(yY,K8r),e(A4,Z8r),e(de,e9r),e(de,L4),e(L4,DTe),e(DTe,o9r),e(L4,r9r),e(L4,xY),e(xY,t9r),e(L4,a9r),e(de,n9r),e(de,y4),e(y4,GTe),e(GTe,s9r),e(y4,l9r),e(y4,$Y),e($Y,i9r),e(y4,d9r),e(de,c9r),e(de,x4),e(x4,OTe),e(OTe,f9r),e(x4,m9r),e(x4,kY),e(kY,g9r),e(x4,h9r),e(de,p9r),e(de,$4),e($4,VTe),e(VTe,u9r),e($4,_9r),e($4,SY),e(SY,b9r),e($4,v9r),e(de,F9r),e(de,k4),e(k4,XTe),e(XTe,T9r),e(k4,M9r),e(k4,RY),e(RY,E9r),e(k4,C9r),e(de,w9r),e(de,S4),e(S4,zTe),e(zTe,A9r),e(S4,L9r),e(S4,PY),e(PY,y9r),e(S4,x9r),e(Nr,$9r),M(R4,Nr,null),b(f,LOe,_),b(f,Sc,_),e(Sc,P4),e(P4,WTe),M(lx,WTe,null),e(Sc,k9r),e(Sc,QTe),e(QTe,S9r),b(f,yOe,_),b(f,cr,_),M(ix,cr,null),e(cr,R9r),e(cr,Rc),e(Rc,P9r),e(Rc,BY),e(BY,B9r),e(Rc,I9r),e(Rc,IY),e(IY,N9r),e(Rc,q9r),e(cr,j9r),e(cr,dx),e(dx,D9r),e(dx,HTe),e(HTe,G9r),e(dx,O9r),e(cr,V9r),e(cr,Gt),M(cx,Gt,null),e(Gt,X9r),e(Gt,UTe),e(UTe,z9r),e(Gt,W9r),e(Gt,Pc),e(Pc,Q9r),e(Pc,JTe),e(JTe,H9r),e(Pc,U9r),e(Pc,NY),e(NY,J9r),e(Pc,Y9r),e(Gt,K9r),M(B4,Gt,null),e(cr,Z9r),e(cr,qr),M(fx,qr,null),e(qr,exr),e(qr,YTe),e(YTe,oxr),e(qr,rxr),e(qr,un),e(un,txr),e(un,KTe),e(KTe,axr),e(un,nxr),e(un,ZTe),e(ZTe,sxr),e(un,lxr),e(un,e7e),e(e7e,ixr),e(un,dxr),e(qr,cxr),e(qr,ce),e(ce,I4),e(I4,o7e),e(o7e,fxr),e(I4,mxr),e(I4,qY),e(qY,gxr),e(I4,hxr),e(ce,pxr),e(ce,N4),e(N4,r7e),e(r7e,uxr),e(N4,_xr),e(N4,jY),e(jY,bxr),e(N4,vxr),e(ce,Fxr),e(ce,q4),e(q4,t7e),e(t7e,Txr),e(q4,Mxr),e(q4,DY),e(DY,Exr),e(q4,Cxr),e(ce,wxr),e(ce,j4),e(j4,a7e),e(a7e,Axr),e(j4,Lxr),e(j4,GY),e(GY,yxr),e(j4,xxr),e(ce,$xr),e(ce,D4),e(D4,n7e),e(n7e,kxr),e(D4,Sxr),e(D4,OY),e(OY,Rxr),e(D4,Pxr),e(ce,Bxr),e(ce,G4),e(G4,s7e),e(s7e,Ixr),e(G4,Nxr),e(G4,VY),e(VY,qxr),e(G4,jxr),e(ce,Dxr),e(ce,O4),e(O4,l7e),e(l7e,Gxr),e(O4,Oxr),e(O4,XY),e(XY,Vxr),e(O4,Xxr),e(ce,zxr),e(ce,V4),e(V4,i7e),e(i7e,Wxr),e(V4,Qxr),e(V4,zY),e(zY,Hxr),e(V4,Uxr),e(ce,Jxr),e(ce,X4),e(X4,d7e),e(d7e,Yxr),e(X4,Kxr),e(X4,WY),e(WY,Zxr),e(X4,e$r),e(ce,o$r),e(ce,z4),e(z4,c7e),e(c7e,r$r),e(z4,t$r),e(z4,QY),e(QY,a$r),e(z4,n$r),e(ce,s$r),e(ce,W4),e(W4,f7e),e(f7e,l$r),e(W4,i$r),e(W4,HY),e(HY,d$r),e(W4,c$r),e(ce,f$r),e(ce,Q4),e(Q4,m7e),e(m7e,m$r),e(Q4,g$r),e(Q4,UY),e(UY,h$r),e(Q4,p$r),e(ce,u$r),e(ce,H4),e(H4,g7e),e(g7e,_$r),e(H4,b$r),e(H4,JY),e(JY,v$r),e(H4,F$r),e(ce,T$r),e(ce,U4),e(U4,h7e),e(h7e,M$r),e(U4,E$r),e(U4,YY),e(YY,C$r),e(U4,w$r),e(ce,A$r),e(ce,J4),e(J4,p7e),e(p7e,L$r),e(J4,y$r),e(J4,KY),e(KY,x$r),e(J4,$$r),e(ce,k$r),e(ce,Y4),e(Y4,u7e),e(u7e,S$r),e(Y4,R$r),e(Y4,ZY),e(ZY,P$r),e(Y4,B$r),e(ce,I$r),e(ce,K4),e(K4,_7e),e(_7e,N$r),e(K4,q$r),e(K4,eK),e(eK,j$r),e(K4,D$r),e(ce,G$r),e(ce,Z4),e(Z4,b7e),e(b7e,O$r),e(Z4,V$r),e(Z4,oK),e(oK,X$r),e(Z4,z$r),e(ce,W$r),e(ce,eE),e(eE,v7e),e(v7e,Q$r),e(eE,H$r),e(eE,rK),e(rK,U$r),e(eE,J$r),e(ce,Y$r),e(ce,oE),e(oE,F7e),e(F7e,K$r),e(oE,Z$r),e(oE,tK),e(tK,ekr),e(oE,okr),e(qr,rkr),M(rE,qr,null),b(f,xOe,_),b(f,Bc,_),e(Bc,tE),e(tE,T7e),M(mx,T7e,null),e(Bc,tkr),e(Bc,M7e),e(M7e,akr),b(f,$Oe,_),b(f,fr,_),M(gx,fr,null),e(fr,nkr),e(fr,Ic),e(Ic,skr),e(Ic,aK),e(aK,lkr),e(Ic,ikr),e(Ic,nK),e(nK,dkr),e(Ic,ckr),e(fr,fkr),e(fr,hx),e(hx,mkr),e(hx,E7e),e(E7e,gkr),e(hx,hkr),e(fr,pkr),e(fr,Ot),M(px,Ot,null),e(Ot,ukr),e(Ot,C7e),e(C7e,_kr),e(Ot,bkr),e(Ot,Nc),e(Nc,vkr),e(Nc,w7e),e(w7e,Fkr),e(Nc,Tkr),e(Nc,sK),e(sK,Mkr),e(Nc,Ekr),e(Ot,Ckr),M(aE,Ot,null),e(fr,wkr),e(fr,jr),M(ux,jr,null),e(jr,Akr),e(jr,A7e),e(A7e,Lkr),e(jr,ykr),e(jr,_n),e(_n,xkr),e(_n,L7e),e(L7e,$kr),e(_n,kkr),e(_n,y7e),e(y7e,Skr),e(_n,Rkr),e(_n,x7e),e(x7e,Pkr),e(_n,Bkr),e(jr,Ikr),e(jr,$7e),e($7e,nE),e(nE,k7e),e(k7e,Nkr),e(nE,qkr),e(nE,lK),e(lK,jkr),e(nE,Dkr),e(jr,Gkr),M(sE,jr,null),b(f,kOe,_),b(f,qc,_),e(qc,lE),e(lE,S7e),M(_x,S7e,null),e(qc,Okr),e(qc,R7e),e(R7e,Vkr),b(f,SOe,_),b(f,mr,_),M(bx,mr,null),e(mr,Xkr),e(mr,jc),e(jc,zkr),e(jc,iK),e(iK,Wkr),e(jc,Qkr),e(jc,dK),e(dK,Hkr),e(jc,Ukr),e(mr,Jkr),e(mr,vx),e(vx,Ykr),e(vx,P7e),e(P7e,Kkr),e(vx,Zkr),e(mr,eSr),e(mr,Vt),M(Fx,Vt,null),e(Vt,oSr),e(Vt,B7e),e(B7e,rSr),e(Vt,tSr),e(Vt,Dc),e(Dc,aSr),e(Dc,I7e),e(I7e,nSr),e(Dc,sSr),e(Dc,cK),e(cK,lSr),e(Dc,iSr),e(Vt,dSr),M(iE,Vt,null),e(mr,cSr),e(mr,Dr),M(Tx,Dr,null),e(Dr,fSr),e(Dr,N7e),e(N7e,mSr),e(Dr,gSr),e(Dr,bn),e(bn,hSr),e(bn,q7e),e(q7e,pSr),e(bn,uSr),e(bn,j7e),e(j7e,_Sr),e(bn,bSr),e(bn,D7e),e(D7e,vSr),e(bn,FSr),e(Dr,TSr),e(Dr,G7e),e(G7e,dE),e(dE,O7e),e(O7e,MSr),e(dE,ESr),e(dE,fK),e(fK,CSr),e(dE,wSr),e(Dr,ASr),M(cE,Dr,null),b(f,ROe,_),b(f,Gc,_),e(Gc,fE),e(fE,V7e),M(Mx,V7e,null),e(Gc,LSr),e(Gc,X7e),e(X7e,ySr),b(f,POe,_),b(f,gr,_),M(Ex,gr,null),e(gr,xSr),e(gr,Oc),e(Oc,$Sr),e(Oc,mK),e(mK,kSr),e(Oc,SSr),e(Oc,gK),e(gK,RSr),e(Oc,PSr),e(gr,BSr),e(gr,Cx),e(Cx,ISr),e(Cx,z7e),e(z7e,NSr),e(Cx,qSr),e(gr,jSr),e(gr,Xt),M(wx,Xt,null),e(Xt,DSr),e(Xt,W7e),e(W7e,GSr),e(Xt,OSr),e(Xt,Vc),e(Vc,VSr),e(Vc,Q7e),e(Q7e,XSr),e(Vc,zSr),e(Vc,hK),e(hK,WSr),e(Vc,QSr),e(Xt,HSr),M(mE,Xt,null),e(gr,USr),e(gr,Gr),M(Ax,Gr,null),e(Gr,JSr),e(Gr,H7e),e(H7e,YSr),e(Gr,KSr),e(Gr,vn),e(vn,ZSr),e(vn,U7e),e(U7e,eRr),e(vn,oRr),e(vn,J7e),e(J7e,rRr),e(vn,tRr),e(vn,Y7e),e(Y7e,aRr),e(vn,nRr),e(Gr,sRr),e(Gr,oe),e(oe,gE),e(gE,K7e),e(K7e,lRr),e(gE,iRr),e(gE,pK),e(pK,dRr),e(gE,cRr),e(oe,fRr),e(oe,hE),e(hE,Z7e),e(Z7e,mRr),e(hE,gRr),e(hE,uK),e(uK,hRr),e(hE,pRr),e(oe,uRr),e(oe,pE),e(pE,eMe),e(eMe,_Rr),e(pE,bRr),e(pE,_K),e(_K,vRr),e(pE,FRr),e(oe,TRr),e(oe,uE),e(uE,oMe),e(oMe,MRr),e(uE,ERr),e(uE,bK),e(bK,CRr),e(uE,wRr),e(oe,ARr),e(oe,_E),e(_E,rMe),e(rMe,LRr),e(_E,yRr),e(_E,vK),e(vK,xRr),e(_E,$Rr),e(oe,kRr),e(oe,bE),e(bE,tMe),e(tMe,SRr),e(bE,RRr),e(bE,FK),e(FK,PRr),e(bE,BRr),e(oe,IRr),e(oe,vE),e(vE,aMe),e(aMe,NRr),e(vE,qRr),e(vE,TK),e(TK,jRr),e(vE,DRr),e(oe,GRr),e(oe,FE),e(FE,nMe),e(nMe,ORr),e(FE,VRr),e(FE,MK),e(MK,XRr),e(FE,zRr),e(oe,WRr),e(oe,TE),e(TE,sMe),e(sMe,QRr),e(TE,HRr),e(TE,EK),e(EK,URr),e(TE,JRr),e(oe,YRr),e(oe,ME),e(ME,lMe),e(lMe,KRr),e(ME,ZRr),e(ME,CK),e(CK,ePr),e(ME,oPr),e(oe,rPr),e(oe,EE),e(EE,iMe),e(iMe,tPr),e(EE,aPr),e(EE,wK),e(wK,nPr),e(EE,sPr),e(oe,lPr),e(oe,CE),e(CE,dMe),e(dMe,iPr),e(CE,dPr),e(CE,AK),e(AK,cPr),e(CE,fPr),e(oe,mPr),e(oe,wE),e(wE,cMe),e(cMe,gPr),e(wE,hPr),e(wE,LK),e(LK,pPr),e(wE,uPr),e(oe,_Pr),e(oe,AE),e(AE,fMe),e(fMe,bPr),e(AE,vPr),e(AE,yK),e(yK,FPr),e(AE,TPr),e(oe,MPr),e(oe,LE),e(LE,mMe),e(mMe,EPr),e(LE,CPr),e(LE,xK),e(xK,wPr),e(LE,APr),e(oe,LPr),e(oe,yE),e(yE,gMe),e(gMe,yPr),e(yE,xPr),e(yE,$K),e($K,$Pr),e(yE,kPr),e(oe,SPr),e(oe,xE),e(xE,hMe),e(hMe,RPr),e(xE,PPr),e(xE,kK),e(kK,BPr),e(xE,IPr),e(oe,NPr),e(oe,$E),e($E,pMe),e(pMe,qPr),e($E,jPr),e($E,SK),e(SK,DPr),e($E,GPr),e(oe,OPr),e(oe,kE),e(kE,uMe),e(uMe,VPr),e(kE,XPr),e(kE,RK),e(RK,zPr),e(kE,WPr),e(oe,QPr),e(oe,SE),e(SE,_Me),e(_Me,HPr),e(SE,UPr),e(SE,PK),e(PK,JPr),e(SE,YPr),e(oe,KPr),e(oe,RE),e(RE,bMe),e(bMe,ZPr),e(RE,eBr),e(RE,BK),e(BK,oBr),e(RE,rBr),e(oe,tBr),e(oe,PE),e(PE,vMe),e(vMe,aBr),e(PE,nBr),e(PE,IK),e(IK,sBr),e(PE,lBr),e(oe,iBr),e(oe,BE),e(BE,FMe),e(FMe,dBr),e(BE,cBr),e(BE,NK),e(NK,fBr),e(BE,mBr),e(oe,gBr),e(oe,IE),e(IE,TMe),e(TMe,hBr),e(IE,pBr),e(IE,qK),e(qK,uBr),e(IE,_Br),e(oe,bBr),e(oe,NE),e(NE,MMe),e(MMe,vBr),e(NE,FBr),e(NE,jK),e(jK,TBr),e(NE,MBr),e(oe,EBr),e(oe,qE),e(qE,EMe),e(EMe,CBr),e(qE,wBr),e(qE,DK),e(DK,ABr),e(qE,LBr),e(oe,yBr),e(oe,jE),e(jE,CMe),e(CMe,xBr),e(jE,$Br),e(jE,GK),e(GK,kBr),e(jE,SBr),e(Gr,RBr),M(DE,Gr,null),b(f,BOe,_),b(f,Xc,_),e(Xc,GE),e(GE,wMe),M(Lx,wMe,null),e(Xc,PBr),e(Xc,AMe),e(AMe,BBr),b(f,IOe,_),b(f,hr,_),M(yx,hr,null),e(hr,IBr),e(hr,zc),e(zc,NBr),e(zc,OK),e(OK,qBr),e(zc,jBr),e(zc,VK),e(VK,DBr),e(zc,GBr),e(hr,OBr),e(hr,xx),e(xx,VBr),e(xx,LMe),e(LMe,XBr),e(xx,zBr),e(hr,WBr),e(hr,zt),M($x,zt,null),e(zt,QBr),e(zt,yMe),e(yMe,HBr),e(zt,UBr),e(zt,Wc),e(Wc,JBr),e(Wc,xMe),e(xMe,YBr),e(Wc,KBr),e(Wc,XK),e(XK,ZBr),e(Wc,eIr),e(zt,oIr),M(OE,zt,null),e(hr,rIr),e(hr,Or),M(kx,Or,null),e(Or,tIr),e(Or,$Me),e($Me,aIr),e(Or,nIr),e(Or,Fn),e(Fn,sIr),e(Fn,kMe),e(kMe,lIr),e(Fn,iIr),e(Fn,SMe),e(SMe,dIr),e(Fn,cIr),e(Fn,RMe),e(RMe,fIr),e(Fn,mIr),e(Or,gIr),e(Or,xe),e(xe,VE),e(VE,PMe),e(PMe,hIr),e(VE,pIr),e(VE,zK),e(zK,uIr),e(VE,_Ir),e(xe,bIr),e(xe,XE),e(XE,BMe),e(BMe,vIr),e(XE,FIr),e(XE,WK),e(WK,TIr),e(XE,MIr),e(xe,EIr),e(xe,zE),e(zE,IMe),e(IMe,CIr),e(zE,wIr),e(zE,QK),e(QK,AIr),e(zE,LIr),e(xe,yIr),e(xe,WE),e(WE,NMe),e(NMe,xIr),e(WE,$Ir),e(WE,HK),e(HK,kIr),e(WE,SIr),e(xe,RIr),e(xe,QE),e(QE,qMe),e(qMe,PIr),e(QE,BIr),e(QE,UK),e(UK,IIr),e(QE,NIr),e(xe,qIr),e(xe,HE),e(HE,jMe),e(jMe,jIr),e(HE,DIr),e(HE,JK),e(JK,GIr),e(HE,OIr),e(xe,VIr),e(xe,UE),e(UE,DMe),e(DMe,XIr),e(UE,zIr),e(UE,YK),e(YK,WIr),e(UE,QIr),e(xe,HIr),e(xe,JE),e(JE,GMe),e(GMe,UIr),e(JE,JIr),e(JE,KK),e(KK,YIr),e(JE,KIr),e(xe,ZIr),e(xe,YE),e(YE,OMe),e(OMe,eNr),e(YE,oNr),e(YE,ZK),e(ZK,rNr),e(YE,tNr),e(xe,aNr),e(xe,KE),e(KE,VMe),e(VMe,nNr),e(KE,sNr),e(KE,eZ),e(eZ,lNr),e(KE,iNr),e(Or,dNr),M(ZE,Or,null),b(f,NOe,_),b(f,Qc,_),e(Qc,eC),e(eC,XMe),M(Sx,XMe,null),e(Qc,cNr),e(Qc,zMe),e(zMe,fNr),b(f,qOe,_),b(f,pr,_),M(Rx,pr,null),e(pr,mNr),e(pr,Hc),e(Hc,gNr),e(Hc,oZ),e(oZ,hNr),e(Hc,pNr),e(Hc,rZ),e(rZ,uNr),e(Hc,_Nr),e(pr,bNr),e(pr,Px),e(Px,vNr),e(Px,WMe),e(WMe,FNr),e(Px,TNr),e(pr,MNr),e(pr,Wt),M(Bx,Wt,null),e(Wt,ENr),e(Wt,QMe),e(QMe,CNr),e(Wt,wNr),e(Wt,Uc),e(Uc,ANr),e(Uc,HMe),e(HMe,LNr),e(Uc,yNr),e(Uc,tZ),e(tZ,xNr),e(Uc,$Nr),e(Wt,kNr),M(oC,Wt,null),e(pr,SNr),e(pr,Vr),M(Ix,Vr,null),e(Vr,RNr),e(Vr,UMe),e(UMe,PNr),e(Vr,BNr),e(Vr,Tn),e(Tn,INr),e(Tn,JMe),e(JMe,NNr),e(Tn,qNr),e(Tn,YMe),e(YMe,jNr),e(Tn,DNr),e(Tn,KMe),e(KMe,GNr),e(Tn,ONr),e(Vr,VNr),e(Vr,Ee),e(Ee,rC),e(rC,ZMe),e(ZMe,XNr),e(rC,zNr),e(rC,aZ),e(aZ,WNr),e(rC,QNr),e(Ee,HNr),e(Ee,tC),e(tC,e4e),e(e4e,UNr),e(tC,JNr),e(tC,nZ),e(nZ,YNr),e(tC,KNr),e(Ee,ZNr),e(Ee,aC),e(aC,o4e),e(o4e,eqr),e(aC,oqr),e(aC,sZ),e(sZ,rqr),e(aC,tqr),e(Ee,aqr),e(Ee,nC),e(nC,r4e),e(r4e,nqr),e(nC,sqr),e(nC,lZ),e(lZ,lqr),e(nC,iqr),e(Ee,dqr),e(Ee,sC),e(sC,t4e),e(t4e,cqr),e(sC,fqr),e(sC,iZ),e(iZ,mqr),e(sC,gqr),e(Ee,hqr),e(Ee,lC),e(lC,a4e),e(a4e,pqr),e(lC,uqr),e(lC,dZ),e(dZ,_qr),e(lC,bqr),e(Ee,vqr),e(Ee,iC),e(iC,n4e),e(n4e,Fqr),e(iC,Tqr),e(iC,cZ),e(cZ,Mqr),e(iC,Eqr),e(Ee,Cqr),e(Ee,dC),e(dC,s4e),e(s4e,wqr),e(dC,Aqr),e(dC,fZ),e(fZ,Lqr),e(dC,yqr),e(Ee,xqr),e(Ee,cC),e(cC,l4e),e(l4e,$qr),e(cC,kqr),e(cC,mZ),e(mZ,Sqr),e(cC,Rqr),e(Ee,Pqr),e(Ee,fC),e(fC,i4e),e(i4e,Bqr),e(fC,Iqr),e(fC,gZ),e(gZ,Nqr),e(fC,qqr),e(Ee,jqr),e(Ee,mC),e(mC,d4e),e(d4e,Dqr),e(mC,Gqr),e(mC,hZ),e(hZ,Oqr),e(mC,Vqr),e(Ee,Xqr),e(Ee,gC),e(gC,c4e),e(c4e,zqr),e(gC,Wqr),e(gC,pZ),e(pZ,Qqr),e(gC,Hqr),e(Ee,Uqr),e(Ee,hC),e(hC,f4e),e(f4e,Jqr),e(hC,Yqr),e(hC,uZ),e(uZ,Kqr),e(hC,Zqr),e(Vr,ejr),M(pC,Vr,null),b(f,jOe,_),b(f,Jc,_),e(Jc,uC),e(uC,m4e),M(Nx,m4e,null),e(Jc,ojr),e(Jc,g4e),e(g4e,rjr),b(f,DOe,_),b(f,ur,_),M(qx,ur,null),e(ur,tjr),e(ur,Yc),e(Yc,ajr),e(Yc,_Z),e(_Z,njr),e(Yc,sjr),e(Yc,bZ),e(bZ,ljr),e(Yc,ijr),e(ur,djr),e(ur,jx),e(jx,cjr),e(jx,h4e),e(h4e,fjr),e(jx,mjr),e(ur,gjr),e(ur,Qt),M(Dx,Qt,null),e(Qt,hjr),e(Qt,p4e),e(p4e,pjr),e(Qt,ujr),e(Qt,Kc),e(Kc,_jr),e(Kc,u4e),e(u4e,bjr),e(Kc,vjr),e(Kc,vZ),e(vZ,Fjr),e(Kc,Tjr),e(Qt,Mjr),M(_C,Qt,null),e(ur,Ejr),e(ur,Xr),M(Gx,Xr,null),e(Xr,Cjr),e(Xr,_4e),e(_4e,wjr),e(Xr,Ajr),e(Xr,Mn),e(Mn,Ljr),e(Mn,b4e),e(b4e,yjr),e(Mn,xjr),e(Mn,v4e),e(v4e,$jr),e(Mn,kjr),e(Mn,F4e),e(F4e,Sjr),e(Mn,Rjr),e(Xr,Pjr),e(Xr,$e),e($e,bC),e(bC,T4e),e(T4e,Bjr),e(bC,Ijr),e(bC,FZ),e(FZ,Njr),e(bC,qjr),e($e,jjr),e($e,vC),e(vC,M4e),e(M4e,Djr),e(vC,Gjr),e(vC,TZ),e(TZ,Ojr),e(vC,Vjr),e($e,Xjr),e($e,FC),e(FC,E4e),e(E4e,zjr),e(FC,Wjr),e(FC,MZ),e(MZ,Qjr),e(FC,Hjr),e($e,Ujr),e($e,TC),e(TC,C4e),e(C4e,Jjr),e(TC,Yjr),e(TC,EZ),e(EZ,Kjr),e(TC,Zjr),e($e,eDr),e($e,MC),e(MC,w4e),e(w4e,oDr),e(MC,rDr),e(MC,CZ),e(CZ,tDr),e(MC,aDr),e($e,nDr),e($e,EC),e(EC,A4e),e(A4e,sDr),e(EC,lDr),e(EC,wZ),e(wZ,iDr),e(EC,dDr),e($e,cDr),e($e,CC),e(CC,L4e),e(L4e,fDr),e(CC,mDr),e(CC,AZ),e(AZ,gDr),e(CC,hDr),e($e,pDr),e($e,wC),e(wC,y4e),e(y4e,uDr),e(wC,_Dr),e(wC,LZ),e(LZ,bDr),e(wC,vDr),e($e,FDr),e($e,AC),e(AC,x4e),e(x4e,TDr),e(AC,MDr),e(AC,yZ),e(yZ,EDr),e(AC,CDr),e($e,wDr),e($e,LC),e(LC,$4e),e($4e,ADr),e(LC,LDr),e(LC,xZ),e(xZ,yDr),e(LC,xDr),e(Xr,$Dr),M(yC,Xr,null),b(f,GOe,_),b(f,Zc,_),e(Zc,xC),e(xC,k4e),M(Ox,k4e,null),e(Zc,kDr),e(Zc,S4e),e(S4e,SDr),b(f,OOe,_),b(f,_r,_),M(Vx,_r,null),e(_r,RDr),e(_r,ef),e(ef,PDr),e(ef,$Z),e($Z,BDr),e(ef,IDr),e(ef,kZ),e(kZ,NDr),e(ef,qDr),e(_r,jDr),e(_r,Xx),e(Xx,DDr),e(Xx,R4e),e(R4e,GDr),e(Xx,ODr),e(_r,VDr),e(_r,Ht),M(zx,Ht,null),e(Ht,XDr),e(Ht,P4e),e(P4e,zDr),e(Ht,WDr),e(Ht,of),e(of,QDr),e(of,B4e),e(B4e,HDr),e(of,UDr),e(of,SZ),e(SZ,JDr),e(of,YDr),e(Ht,KDr),M($C,Ht,null),e(_r,ZDr),e(_r,zr),M(Wx,zr,null),e(zr,eGr),e(zr,I4e),e(I4e,oGr),e(zr,rGr),e(zr,En),e(En,tGr),e(En,N4e),e(N4e,aGr),e(En,nGr),e(En,q4e),e(q4e,sGr),e(En,lGr),e(En,j4e),e(j4e,iGr),e(En,dGr),e(zr,cGr),e(zr,ke),e(ke,kC),e(kC,D4e),e(D4e,fGr),e(kC,mGr),e(kC,RZ),e(RZ,gGr),e(kC,hGr),e(ke,pGr),e(ke,SC),e(SC,G4e),e(G4e,uGr),e(SC,_Gr),e(SC,PZ),e(PZ,bGr),e(SC,vGr),e(ke,FGr),e(ke,RC),e(RC,O4e),e(O4e,TGr),e(RC,MGr),e(RC,BZ),e(BZ,EGr),e(RC,CGr),e(ke,wGr),e(ke,PC),e(PC,V4e),e(V4e,AGr),e(PC,LGr),e(PC,IZ),e(IZ,yGr),e(PC,xGr),e(ke,$Gr),e(ke,BC),e(BC,X4e),e(X4e,kGr),e(BC,SGr),e(BC,NZ),e(NZ,RGr),e(BC,PGr),e(ke,BGr),e(ke,IC),e(IC,z4e),e(z4e,IGr),e(IC,NGr),e(IC,qZ),e(qZ,qGr),e(IC,jGr),e(ke,DGr),e(ke,NC),e(NC,W4e),e(W4e,GGr),e(NC,OGr),e(NC,jZ),e(jZ,VGr),e(NC,XGr),e(ke,zGr),e(ke,qC),e(qC,Q4e),e(Q4e,WGr),e(qC,QGr),e(qC,DZ),e(DZ,HGr),e(qC,UGr),e(ke,JGr),e(ke,jC),e(jC,H4e),e(H4e,YGr),e(jC,KGr),e(jC,GZ),e(GZ,ZGr),e(jC,eOr),e(ke,oOr),e(ke,DC),e(DC,U4e),e(U4e,rOr),e(DC,tOr),e(DC,OZ),e(OZ,aOr),e(DC,nOr),e(zr,sOr),M(GC,zr,null),b(f,VOe,_),b(f,rf,_),e(rf,OC),e(OC,J4e),M(Qx,J4e,null),e(rf,lOr),e(rf,Y4e),e(Y4e,iOr),b(f,XOe,_),b(f,br,_),M(Hx,br,null),e(br,dOr),e(br,tf),e(tf,cOr),e(tf,VZ),e(VZ,fOr),e(tf,mOr),e(tf,XZ),e(XZ,gOr),e(tf,hOr),e(br,pOr),e(br,Ux),e(Ux,uOr),e(Ux,K4e),e(K4e,_Or),e(Ux,bOr),e(br,vOr),e(br,Ut),M(Jx,Ut,null),e(Ut,FOr),e(Ut,Z4e),e(Z4e,TOr),e(Ut,MOr),e(Ut,af),e(af,EOr),e(af,eEe),e(eEe,COr),e(af,wOr),e(af,zZ),e(zZ,AOr),e(af,LOr),e(Ut,yOr),M(VC,Ut,null),e(br,xOr),e(br,Wr),M(Yx,Wr,null),e(Wr,$Or),e(Wr,oEe),e(oEe,kOr),e(Wr,SOr),e(Wr,Cn),e(Cn,ROr),e(Cn,rEe),e(rEe,POr),e(Cn,BOr),e(Cn,tEe),e(tEe,IOr),e(Cn,NOr),e(Cn,aEe),e(aEe,qOr),e(Cn,jOr),e(Wr,DOr),e(Wr,Se),e(Se,XC),e(XC,nEe),e(nEe,GOr),e(XC,OOr),e(XC,WZ),e(WZ,VOr),e(XC,XOr),e(Se,zOr),e(Se,zC),e(zC,sEe),e(sEe,WOr),e(zC,QOr),e(zC,QZ),e(QZ,HOr),e(zC,UOr),e(Se,JOr),e(Se,WC),e(WC,lEe),e(lEe,YOr),e(WC,KOr),e(WC,HZ),e(HZ,ZOr),e(WC,eVr),e(Se,oVr),e(Se,QC),e(QC,iEe),e(iEe,rVr),e(QC,tVr),e(QC,UZ),e(UZ,aVr),e(QC,nVr),e(Se,sVr),e(Se,HC),e(HC,dEe),e(dEe,lVr),e(HC,iVr),e(HC,JZ),e(JZ,dVr),e(HC,cVr),e(Se,fVr),e(Se,UC),e(UC,cEe),e(cEe,mVr),e(UC,gVr),e(UC,YZ),e(YZ,hVr),e(UC,pVr),e(Se,uVr),e(Se,JC),e(JC,fEe),e(fEe,_Vr),e(JC,bVr),e(JC,KZ),e(KZ,vVr),e(JC,FVr),e(Se,TVr),e(Se,YC),e(YC,mEe),e(mEe,MVr),e(YC,EVr),e(YC,ZZ),e(ZZ,CVr),e(YC,wVr),e(Se,AVr),e(Se,KC),e(KC,gEe),e(gEe,LVr),e(KC,yVr),e(KC,eee),e(eee,xVr),e(KC,$Vr),e(Se,kVr),e(Se,ZC),e(ZC,hEe),e(hEe,SVr),e(ZC,RVr),e(ZC,oee),e(oee,PVr),e(ZC,BVr),e(Wr,IVr),M(e5,Wr,null),b(f,zOe,_),b(f,nf,_),e(nf,o5),e(o5,pEe),M(Kx,pEe,null),e(nf,NVr),e(nf,uEe),e(uEe,qVr),b(f,WOe,_),b(f,vr,_),M(Zx,vr,null),e(vr,jVr),e(vr,sf),e(sf,DVr),e(sf,ree),e(ree,GVr),e(sf,OVr),e(sf,tee),e(tee,VVr),e(sf,XVr),e(vr,zVr),e(vr,e$),e(e$,WVr),e(e$,_Ee),e(_Ee,QVr),e(e$,HVr),e(vr,UVr),e(vr,Jt),M(o$,Jt,null),e(Jt,JVr),e(Jt,bEe),e(bEe,YVr),e(Jt,KVr),e(Jt,lf),e(lf,ZVr),e(lf,vEe),e(vEe,eXr),e(lf,oXr),e(lf,aee),e(aee,rXr),e(lf,tXr),e(Jt,aXr),M(r5,Jt,null),e(vr,nXr),e(vr,Qr),M(r$,Qr,null),e(Qr,sXr),e(Qr,FEe),e(FEe,lXr),e(Qr,iXr),e(Qr,wn),e(wn,dXr),e(wn,TEe),e(TEe,cXr),e(wn,fXr),e(wn,MEe),e(MEe,mXr),e(wn,gXr),e(wn,EEe),e(EEe,hXr),e(wn,pXr),e(Qr,uXr),e(Qr,Re),e(Re,t5),e(t5,CEe),e(CEe,_Xr),e(t5,bXr),e(t5,nee),e(nee,vXr),e(t5,FXr),e(Re,TXr),e(Re,a5),e(a5,wEe),e(wEe,MXr),e(a5,EXr),e(a5,see),e(see,CXr),e(a5,wXr),e(Re,AXr),e(Re,n5),e(n5,AEe),e(AEe,LXr),e(n5,yXr),e(n5,lee),e(lee,xXr),e(n5,$Xr),e(Re,kXr),e(Re,s5),e(s5,LEe),e(LEe,SXr),e(s5,RXr),e(s5,iee),e(iee,PXr),e(s5,BXr),e(Re,IXr),e(Re,l5),e(l5,yEe),e(yEe,NXr),e(l5,qXr),e(l5,dee),e(dee,jXr),e(l5,DXr),e(Re,GXr),e(Re,i5),e(i5,xEe),e(xEe,OXr),e(i5,VXr),e(i5,cee),e(cee,XXr),e(i5,zXr),e(Re,WXr),e(Re,d5),e(d5,$Ee),e($Ee,QXr),e(d5,HXr),e(d5,fee),e(fee,UXr),e(d5,JXr),e(Re,YXr),e(Re,c5),e(c5,kEe),e(kEe,KXr),e(c5,ZXr),e(c5,mee),e(mee,ezr),e(c5,ozr),e(Re,rzr),e(Re,f5),e(f5,SEe),e(SEe,tzr),e(f5,azr),e(f5,gee),e(gee,nzr),e(f5,szr),e(Re,lzr),e(Re,m5),e(m5,REe),e(REe,izr),e(m5,dzr),e(m5,hee),e(hee,czr),e(m5,fzr),e(Qr,mzr),M(g5,Qr,null),b(f,QOe,_),b(f,df,_),e(df,h5),e(h5,PEe),M(t$,PEe,null),e(df,gzr),e(df,BEe),e(BEe,hzr),b(f,HOe,_),b(f,Fr,_),M(a$,Fr,null),e(Fr,pzr),e(Fr,cf),e(cf,uzr),e(cf,pee),e(pee,_zr),e(cf,bzr),e(cf,uee),e(uee,vzr),e(cf,Fzr),e(Fr,Tzr),e(Fr,n$),e(n$,Mzr),e(n$,IEe),e(IEe,Ezr),e(n$,Czr),e(Fr,wzr),e(Fr,Yt),M(s$,Yt,null),e(Yt,Azr),e(Yt,NEe),e(NEe,Lzr),e(Yt,yzr),e(Yt,ff),e(ff,xzr),e(ff,qEe),e(qEe,$zr),e(ff,kzr),e(ff,_ee),e(_ee,Szr),e(ff,Rzr),e(Yt,Pzr),M(p5,Yt,null),e(Fr,Bzr),e(Fr,Hr),M(l$,Hr,null),e(Hr,Izr),e(Hr,jEe),e(jEe,Nzr),e(Hr,qzr),e(Hr,An),e(An,jzr),e(An,DEe),e(DEe,Dzr),e(An,Gzr),e(An,GEe),e(GEe,Ozr),e(An,Vzr),e(An,OEe),e(OEe,Xzr),e(An,zzr),e(Hr,Wzr),e(Hr,Ve),e(Ve,u5),e(u5,VEe),e(VEe,Qzr),e(u5,Hzr),e(u5,bee),e(bee,Uzr),e(u5,Jzr),e(Ve,Yzr),e(Ve,_5),e(_5,XEe),e(XEe,Kzr),e(_5,Zzr),e(_5,vee),e(vee,eWr),e(_5,oWr),e(Ve,rWr),e(Ve,b5),e(b5,zEe),e(zEe,tWr),e(b5,aWr),e(b5,Fee),e(Fee,nWr),e(b5,sWr),e(Ve,lWr),e(Ve,v5),e(v5,WEe),e(WEe,iWr),e(v5,dWr),e(v5,Tee),e(Tee,cWr),e(v5,fWr),e(Ve,mWr),e(Ve,F5),e(F5,QEe),e(QEe,gWr),e(F5,hWr),e(F5,Mee),e(Mee,pWr),e(F5,uWr),e(Ve,_Wr),e(Ve,T5),e(T5,HEe),e(HEe,bWr),e(T5,vWr),e(T5,Eee),e(Eee,FWr),e(T5,TWr),e(Ve,MWr),e(Ve,M5),e(M5,UEe),e(UEe,EWr),e(M5,CWr),e(M5,Cee),e(Cee,wWr),e(M5,AWr),e(Ve,LWr),e(Ve,E5),e(E5,JEe),e(JEe,yWr),e(E5,xWr),e(E5,wee),e(wee,$Wr),e(E5,kWr),e(Hr,SWr),M(C5,Hr,null),b(f,UOe,_),b(f,mf,_),e(mf,w5),e(w5,YEe),M(i$,YEe,null),e(mf,RWr),e(mf,KEe),e(KEe,PWr),b(f,JOe,_),b(f,Tr,_),M(d$,Tr,null),e(Tr,BWr),e(Tr,gf),e(gf,IWr),e(gf,Aee),e(Aee,NWr),e(gf,qWr),e(gf,Lee),e(Lee,jWr),e(gf,DWr),e(Tr,GWr),e(Tr,c$),e(c$,OWr),e(c$,ZEe),e(ZEe,VWr),e(c$,XWr),e(Tr,zWr),e(Tr,Kt),M(f$,Kt,null),e(Kt,WWr),e(Kt,eCe),e(eCe,QWr),e(Kt,HWr),e(Kt,hf),e(hf,UWr),e(hf,oCe),e(oCe,JWr),e(hf,YWr),e(hf,yee),e(yee,KWr),e(hf,ZWr),e(Kt,eQr),M(A5,Kt,null),e(Tr,oQr),e(Tr,Ur),M(m$,Ur,null),e(Ur,rQr),e(Ur,rCe),e(rCe,tQr),e(Ur,aQr),e(Ur,Ln),e(Ln,nQr),e(Ln,tCe),e(tCe,sQr),e(Ln,lQr),e(Ln,aCe),e(aCe,iQr),e(Ln,dQr),e(Ln,nCe),e(nCe,cQr),e(Ln,fQr),e(Ur,mQr),e(Ur,Xe),e(Xe,L5),e(L5,sCe),e(sCe,gQr),e(L5,hQr),e(L5,xee),e(xee,pQr),e(L5,uQr),e(Xe,_Qr),e(Xe,y5),e(y5,lCe),e(lCe,bQr),e(y5,vQr),e(y5,$ee),e($ee,FQr),e(y5,TQr),e(Xe,MQr),e(Xe,x5),e(x5,iCe),e(iCe,EQr),e(x5,CQr),e(x5,kee),e(kee,wQr),e(x5,AQr),e(Xe,LQr),e(Xe,$5),e($5,dCe),e(dCe,yQr),e($5,xQr),e($5,See),e(See,$Qr),e($5,kQr),e(Xe,SQr),e(Xe,k5),e(k5,cCe),e(cCe,RQr),e(k5,PQr),e(k5,Ree),e(Ree,BQr),e(k5,IQr),e(Xe,NQr),e(Xe,S5),e(S5,fCe),e(fCe,qQr),e(S5,jQr),e(S5,Pee),e(Pee,DQr),e(S5,GQr),e(Xe,OQr),e(Xe,R5),e(R5,mCe),e(mCe,VQr),e(R5,XQr),e(R5,Bee),e(Bee,zQr),e(R5,WQr),e(Xe,QQr),e(Xe,P5),e(P5,gCe),e(gCe,HQr),e(P5,UQr),e(P5,Iee),e(Iee,JQr),e(P5,YQr),e(Ur,KQr),M(B5,Ur,null),b(f,YOe,_),b(f,pf,_),e(pf,I5),e(I5,hCe),M(g$,hCe,null),e(pf,ZQr),e(pf,pCe),e(pCe,eHr),b(f,KOe,_),b(f,Mr,_),M(h$,Mr,null),e(Mr,oHr),e(Mr,uf),e(uf,rHr),e(uf,Nee),e(Nee,tHr),e(uf,aHr),e(uf,qee),e(qee,nHr),e(uf,sHr),e(Mr,lHr),e(Mr,p$),e(p$,iHr),e(p$,uCe),e(uCe,dHr),e(p$,cHr),e(Mr,fHr),e(Mr,Zt),M(u$,Zt,null),e(Zt,mHr),e(Zt,_Ce),e(_Ce,gHr),e(Zt,hHr),e(Zt,_f),e(_f,pHr),e(_f,bCe),e(bCe,uHr),e(_f,_Hr),e(_f,jee),e(jee,bHr),e(_f,vHr),e(Zt,FHr),M(N5,Zt,null),e(Mr,THr),e(Mr,Jr),M(_$,Jr,null),e(Jr,MHr),e(Jr,vCe),e(vCe,EHr),e(Jr,CHr),e(Jr,yn),e(yn,wHr),e(yn,FCe),e(FCe,AHr),e(yn,LHr),e(yn,TCe),e(TCe,yHr),e(yn,xHr),e(yn,MCe),e(MCe,$Hr),e(yn,kHr),e(Jr,SHr),e(Jr,ECe),e(ECe,q5),e(q5,CCe),e(CCe,RHr),e(q5,PHr),e(q5,Dee),e(Dee,BHr),e(q5,IHr),e(Jr,NHr),M(j5,Jr,null),b(f,ZOe,_),b(f,bf,_),e(bf,D5),e(D5,wCe),M(b$,wCe,null),e(bf,qHr),e(bf,ACe),e(ACe,jHr),b(f,eVe,_),b(f,Er,_),M(v$,Er,null),e(Er,DHr),e(Er,vf),e(vf,GHr),e(vf,Gee),e(Gee,OHr),e(vf,VHr),e(vf,Oee),e(Oee,XHr),e(vf,zHr),e(Er,WHr),e(Er,F$),e(F$,QHr),e(F$,LCe),e(LCe,HHr),e(F$,UHr),e(Er,JHr),e(Er,ea),M(T$,ea,null),e(ea,YHr),e(ea,yCe),e(yCe,KHr),e(ea,ZHr),e(ea,Ff),e(Ff,eUr),e(Ff,xCe),e(xCe,oUr),e(Ff,rUr),e(Ff,Vee),e(Vee,tUr),e(Ff,aUr),e(ea,nUr),M(G5,ea,null),e(Er,sUr),e(Er,Yr),M(M$,Yr,null),e(Yr,lUr),e(Yr,$Ce),e($Ce,iUr),e(Yr,dUr),e(Yr,xn),e(xn,cUr),e(xn,kCe),e(kCe,fUr),e(xn,mUr),e(xn,SCe),e(SCe,gUr),e(xn,hUr),e(xn,RCe),e(RCe,pUr),e(xn,uUr),e(Yr,_Ur),e(Yr,E$),e(E$,O5),e(O5,PCe),e(PCe,bUr),e(O5,vUr),e(O5,Xee),e(Xee,FUr),e(O5,TUr),e(E$,MUr),e(E$,V5),e(V5,BCe),e(BCe,EUr),e(V5,CUr),e(V5,zee),e(zee,wUr),e(V5,AUr),e(Yr,LUr),M(X5,Yr,null),b(f,oVe,_),b(f,Tf,_),e(Tf,z5),e(z5,ICe),M(C$,ICe,null),e(Tf,yUr),e(Tf,NCe),e(NCe,xUr),b(f,rVe,_),b(f,Cr,_),M(w$,Cr,null),e(Cr,$Ur),e(Cr,Mf),e(Mf,kUr),e(Mf,Wee),e(Wee,SUr),e(Mf,RUr),e(Mf,Qee),e(Qee,PUr),e(Mf,BUr),e(Cr,IUr),e(Cr,A$),e(A$,NUr),e(A$,qCe),e(qCe,qUr),e(A$,jUr),e(Cr,DUr),e(Cr,oa),M(L$,oa,null),e(oa,GUr),e(oa,jCe),e(jCe,OUr),e(oa,VUr),e(oa,Ef),e(Ef,XUr),e(Ef,DCe),e(DCe,zUr),e(Ef,WUr),e(Ef,Hee),e(Hee,QUr),e(Ef,HUr),e(oa,UUr),M(W5,oa,null),e(Cr,JUr),e(Cr,Kr),M(y$,Kr,null),e(Kr,YUr),e(Kr,GCe),e(GCe,KUr),e(Kr,ZUr),e(Kr,$n),e($n,eJr),e($n,OCe),e(OCe,oJr),e($n,rJr),e($n,VCe),e(VCe,tJr),e($n,aJr),e($n,XCe),e(XCe,nJr),e($n,sJr),e(Kr,lJr),e(Kr,zCe),e(zCe,Q5),e(Q5,WCe),e(WCe,iJr),e(Q5,dJr),e(Q5,Uee),e(Uee,cJr),e(Q5,fJr),e(Kr,mJr),M(H5,Kr,null),tVe=!0},p(f,[_]){const x$={};_&2&&(x$.$$scope={dirty:_,ctx:f}),Sf.$set(x$);const QCe={};_&2&&(QCe.$$scope={dirty:_,ctx:f}),jg.$set(QCe);const HCe={};_&2&&(HCe.$$scope={dirty:_,ctx:f}),Th.$set(HCe);const UCe={};_&2&&(UCe.$$scope={dirty:_,ctx:f}),rp.$set(UCe);const $$={};_&2&&($$.$$scope={dirty:_,ctx:f}),tp.$set($$);const JCe={};_&2&&(JCe.$$scope={dirty:_,ctx:f}),Ep.$set(JCe);const kn={};_&2&&(kn.$$scope={dirty:_,ctx:f}),Cp.$set(kn);const YCe={};_&2&&(YCe.$$scope={dirty:_,ctx:f}),Lp.$set(YCe);const KCe={};_&2&&(KCe.$$scope={dirty:_,ctx:f}),A_.$set(KCe);const ZCe={};_&2&&(ZCe.$$scope={dirty:_,ctx:f}),y_.$set(ZCe);const k$={};_&2&&(k$.$$scope={dirty:_,ctx:f}),v1.$set(k$);const e5e={};_&2&&(e5e.$$scope={dirty:_,ctx:f}),T1.$set(e5e);const S$={};_&2&&(S$.$$scope={dirty:_,ctx:f}),l2.$set(S$);const o5e={};_&2&&(o5e.$$scope={dirty:_,ctx:f}),d2.$set(o5e);const R$={};_&2&&(R$.$$scope={dirty:_,ctx:f}),Q2.$set(R$);const r5e={};_&2&&(r5e.$$scope={dirty:_,ctx:f}),U2.$set(r5e);const t5e={};_&2&&(t5e.$$scope={dirty:_,ctx:f}),hb.$set(t5e);const a5e={};_&2&&(a5e.$$scope={dirty:_,ctx:f}),ub.$set(a5e);const Cf={};_&2&&(Cf.$$scope={dirty:_,ctx:f}),mv.$set(Cf);const n5e={};_&2&&(n5e.$$scope={dirty:_,ctx:f}),hv.$set(n5e);const s5e={};_&2&&(s5e.$$scope={dirty:_,ctx:f}),zv.$set(s5e);const l5e={};_&2&&(l5e.$$scope={dirty:_,ctx:f}),Qv.$set(l5e);const P$={};_&2&&(P$.$$scope={dirty:_,ctx:f}),e3.$set(P$);const i5e={};_&2&&(i5e.$$scope={dirty:_,ctx:f}),r3.$set(i5e);const d5e={};_&2&&(d5e.$$scope={dirty:_,ctx:f}),j3.$set(d5e);const c5e={};_&2&&(c5e.$$scope={dirty:_,ctx:f}),G3.$set(c5e);const rt={};_&2&&(rt.$$scope={dirty:_,ctx:f}),x0.$set(rt);const B$={};_&2&&(B$.$$scope={dirty:_,ctx:f}),k0.$set(B$);const f5e={};_&2&&(f5e.$$scope={dirty:_,ctx:f}),P0.$set(f5e);const I$={};_&2&&(I$.$$scope={dirty:_,ctx:f}),I0.$set(I$);const m5e={};_&2&&(m5e.$$scope={dirty:_,ctx:f}),J0.$set(m5e);const tt={};_&2&&(tt.$$scope={dirty:_,ctx:f}),K0.$set(tt);const g5e={};_&2&&(g5e.$$scope={dirty:_,ctx:f}),oF.$set(g5e);const wf={};_&2&&(wf.$$scope={dirty:_,ctx:f}),tF.$set(wf);const h5e={};_&2&&(h5e.$$scope={dirty:_,ctx:f}),sF.$set(h5e);const p5e={};_&2&&(p5e.$$scope={dirty:_,ctx:f}),iF.$set(p5e);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),vF.$set(L);const U5={};_&2&&(U5.$$scope={dirty:_,ctx:f}),TF.$set(U5);const u5e={};_&2&&(u5e.$$scope={dirty:_,ctx:f}),yF.$set(u5e);const _5e={};_&2&&(_5e.$$scope={dirty:_,ctx:f}),$F.$set(_5e);const J5={};_&2&&(J5.$$scope={dirty:_,ctx:f}),OF.$set(J5);const b5e={};_&2&&(b5e.$$scope={dirty:_,ctx:f}),XF.$set(b5e);const v5e={};_&2&&(v5e.$$scope={dirty:_,ctx:f}),HF.$set(v5e);const Y5={};_&2&&(Y5.$$scope={dirty:_,ctx:f}),JF.$set(Y5);const F5e={};_&2&&(F5e.$$scope={dirty:_,ctx:f}),t6.$set(F5e);const T5e={};_&2&&(T5e.$$scope={dirty:_,ctx:f}),n6.$set(T5e);const K5={};_&2&&(K5.$$scope={dirty:_,ctx:f}),c6.$set(K5);const M5e={};_&2&&(M5e.$$scope={dirty:_,ctx:f}),m6.$set(M5e);const E5e={};_&2&&(E5e.$$scope={dirty:_,ctx:f}),u6.$set(E5e);const Z5={};_&2&&(Z5.$$scope={dirty:_,ctx:f}),b6.$set(Z5);const C5e={};_&2&&(C5e.$$scope={dirty:_,ctx:f}),T6.$set(C5e);const w5e={};_&2&&(w5e.$$scope={dirty:_,ctx:f}),E6.$set(w5e);const ew={};_&2&&(ew.$$scope={dirty:_,ctx:f}),x6.$set(ew);const A5e={};_&2&&(A5e.$$scope={dirty:_,ctx:f}),k6.$set(A5e);const L5e={};_&2&&(L5e.$$scope={dirty:_,ctx:f}),P6.$set(L5e);const ow={};_&2&&(ow.$$scope={dirty:_,ctx:f}),I6.$set(ow);const y5e={};_&2&&(y5e.$$scope={dirty:_,ctx:f}),xT.$set(y5e);const x5e={};_&2&&(x5e.$$scope={dirty:_,ctx:f}),kT.$set(x5e);const rw={};_&2&&(rw.$$scope={dirty:_,ctx:f}),o7.$set(rw);const $5e={};_&2&&($5e.$$scope={dirty:_,ctx:f}),t7.$set($5e);const k5e={};_&2&&(k5e.$$scope={dirty:_,ctx:f}),_7.$set(k5e);const tw={};_&2&&(tw.$$scope={dirty:_,ctx:f}),v7.$set(tw);const S5e={};_&2&&(S5e.$$scope={dirty:_,ctx:f}),C7.$set(S5e);const R5e={};_&2&&(R5e.$$scope={dirty:_,ctx:f}),A7.$set(R5e);const aw={};_&2&&(aw.$$scope={dirty:_,ctx:f}),Q7.$set(aw);const P5e={};_&2&&(P5e.$$scope={dirty:_,ctx:f}),U7.$set(P5e);const B5e={};_&2&&(B5e.$$scope={dirty:_,ctx:f}),sM.$set(B5e);const nw={};_&2&&(nw.$$scope={dirty:_,ctx:f}),iM.$set(nw);const I5e={};_&2&&(I5e.$$scope={dirty:_,ctx:f}),BM.$set(I5e);const N5e={};_&2&&(N5e.$$scope={dirty:_,ctx:f}),NM.$set(N5e);const sw={};_&2&&(sw.$$scope={dirty:_,ctx:f}),o4.$set(sw);const q5e={};_&2&&(q5e.$$scope={dirty:_,ctx:f}),t4.$set(q5e);const j5e={};_&2&&(j5e.$$scope={dirty:_,ctx:f}),s4.$set(j5e);const lw={};_&2&&(lw.$$scope={dirty:_,ctx:f}),i4.$set(lw);const D5e={};_&2&&(D5e.$$scope={dirty:_,ctx:f}),c4.$set(D5e);const G5e={};_&2&&(G5e.$$scope={dirty:_,ctx:f}),m4.$set(G5e);const iw={};_&2&&(iw.$$scope={dirty:_,ctx:f}),R4.$set(iw);const O5e={};_&2&&(O5e.$$scope={dirty:_,ctx:f}),B4.$set(O5e);const V5e={};_&2&&(V5e.$$scope={dirty:_,ctx:f}),rE.$set(V5e);const dw={};_&2&&(dw.$$scope={dirty:_,ctx:f}),aE.$set(dw);const X5e={};_&2&&(X5e.$$scope={dirty:_,ctx:f}),sE.$set(X5e);const z5e={};_&2&&(z5e.$$scope={dirty:_,ctx:f}),iE.$set(z5e);const cw={};_&2&&(cw.$$scope={dirty:_,ctx:f}),cE.$set(cw);const W5e={};_&2&&(W5e.$$scope={dirty:_,ctx:f}),mE.$set(W5e);const Q5e={};_&2&&(Q5e.$$scope={dirty:_,ctx:f}),DE.$set(Q5e);const fw={};_&2&&(fw.$$scope={dirty:_,ctx:f}),OE.$set(fw);const H5e={};_&2&&(H5e.$$scope={dirty:_,ctx:f}),ZE.$set(H5e);const U5e={};_&2&&(U5e.$$scope={dirty:_,ctx:f}),oC.$set(U5e);const mw={};_&2&&(mw.$$scope={dirty:_,ctx:f}),pC.$set(mw);const J5e={};_&2&&(J5e.$$scope={dirty:_,ctx:f}),_C.$set(J5e);const Y5e={};_&2&&(Y5e.$$scope={dirty:_,ctx:f}),yC.$set(Y5e);const gw={};_&2&&(gw.$$scope={dirty:_,ctx:f}),$C.$set(gw);const K5e={};_&2&&(K5e.$$scope={dirty:_,ctx:f}),GC.$set(K5e);const Z5e={};_&2&&(Z5e.$$scope={dirty:_,ctx:f}),VC.$set(Z5e);const hw={};_&2&&(hw.$$scope={dirty:_,ctx:f}),e5.$set(hw);const ewe={};_&2&&(ewe.$$scope={dirty:_,ctx:f}),r5.$set(ewe);const owe={};_&2&&(owe.$$scope={dirty:_,ctx:f}),g5.$set(owe);const pw={};_&2&&(pw.$$scope={dirty:_,ctx:f}),p5.$set(pw);const rwe={};_&2&&(rwe.$$scope={dirty:_,ctx:f}),C5.$set(rwe);const twe={};_&2&&(twe.$$scope={dirty:_,ctx:f}),A5.$set(twe);const uw={};_&2&&(uw.$$scope={dirty:_,ctx:f}),B5.$set(uw);const awe={};_&2&&(awe.$$scope={dirty:_,ctx:f}),N5.$set(awe);const nwe={};_&2&&(nwe.$$scope={dirty:_,ctx:f}),j5.$set(nwe);const _w={};_&2&&(_w.$$scope={dirty:_,ctx:f}),G5.$set(_w);const swe={};_&2&&(swe.$$scope={dirty:_,ctx:f}),X5.$set(swe);const lwe={};_&2&&(lwe.$$scope={dirty:_,ctx:f}),W5.$set(lwe);const bw={};_&2&&(bw.$$scope={dirty:_,ctx:f}),H5.$set(bw)},i(f){tVe||(E(d.$$.fragment,f),E(ya.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(Sf.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(wL.$$.fragment,f),E(jg.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(yL.$$.fragment,f),E(kL.$$.fragment,f),E(Th.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(NL.$$.fragment,f),E(rp.$$.fragment,f),E(tp.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(VL.$$.fragment,f),E(Ep.$$.fragment,f),E(Cp.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(Lp.$$.fragment,f),E(UL.$$.fragment,f),E(A_.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(y_.$$.fragment,f),E(ey.$$.fragment,f),E(v1.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(T1.$$.fragment,f),E(ny.$$.fragment,f),E(l2.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(d2.$$.fragment,f),E(cy.$$.fragment,f),E(Q2.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(U2.$$.fragment,f),E(py.$$.fragment,f),E(hb.$$.fragment,f),E(uy.$$.fragment,f),E(_y.$$.fragment,f),E(vy.$$.fragment,f),E(ub.$$.fragment,f),E(Fy.$$.fragment,f),E(mv.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(hv.$$.fragment,f),E(wy.$$.fragment,f),E(zv.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(Qv.$$.fragment,f),E($y.$$.fragment,f),E(e3.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(r3.$$.fragment,f),E(By.$$.fragment,f),E(j3.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(G3.$$.fragment,f),E(Dy.$$.fragment,f),E(x0.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(k0.$$.fragment,f),E(zy.$$.fragment,f),E(P0.$$.fragment,f),E(Wy.$$.fragment,f),E(Qy.$$.fragment,f),E(Uy.$$.fragment,f),E(I0.$$.fragment,f),E(Jy.$$.fragment,f),E(J0.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(e8.$$.fragment,f),E(K0.$$.fragment,f),E(o8.$$.fragment,f),E(oF.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(tF.$$.fragment,f),E(s8.$$.fragment,f),E(sF.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(iF.$$.fragment,f),E(f8.$$.fragment,f),E(vF.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(TF.$$.fragment,f),E(u8.$$.fragment,f),E(yF.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E($F.$$.fragment,f),E(T8.$$.fragment,f),E(OF.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(XF.$$.fragment,f),E(A8.$$.fragment,f),E(HF.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(JF.$$.fragment,f),E(S8.$$.fragment,f),E(t6.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(n6.$$.fragment,f),E(N8.$$.fragment,f),E(c6.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(m6.$$.fragment,f),E(O8.$$.fragment,f),E(u6.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(b6.$$.fragment,f),E(H8.$$.fragment,f),E(T6.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(E6.$$.fragment,f),E(Z8.$$.fragment,f),E(x6.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(k6.$$.fragment,f),E(a9.$$.fragment,f),E(P6.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(I6.$$.fragment,f),E(d9.$$.fragment,f),E(xT.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(kT.$$.fragment,f),E(h9.$$.fragment,f),E(o7.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(t7.$$.fragment,f),E(v9.$$.fragment,f),E(_7.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(v7.$$.fragment,f),E(C9.$$.fragment,f),E(C7.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(y9.$$.fragment,f),E(A7.$$.fragment,f),E(x9.$$.fragment,f),E(Q7.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(U7.$$.fragment,f),E(P9.$$.fragment,f),E(sM.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(iM.$$.fragment,f),E(j9.$$.fragment,f),E(BM.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(NM.$$.fragment,f),E(X9.$$.fragment,f),E(o4.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(H9.$$.fragment,f),E(t4.$$.fragment,f),E(U9.$$.fragment,f),E(s4.$$.fragment,f),E(Y9.$$.fragment,f),E(K9.$$.fragment,f),E(ex.$$.fragment,f),E(i4.$$.fragment,f),E(ox.$$.fragment,f),E(c4.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(m4.$$.fragment,f),E(sx.$$.fragment,f),E(R4.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(B4.$$.fragment,f),E(fx.$$.fragment,f),E(rE.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(aE.$$.fragment,f),E(ux.$$.fragment,f),E(sE.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(iE.$$.fragment,f),E(Tx.$$.fragment,f),E(cE.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(mE.$$.fragment,f),E(Ax.$$.fragment,f),E(DE.$$.fragment,f),E(Lx.$$.fragment,f),E(yx.$$.fragment,f),E($x.$$.fragment,f),E(OE.$$.fragment,f),E(kx.$$.fragment,f),E(ZE.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(oC.$$.fragment,f),E(Ix.$$.fragment,f),E(pC.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(_C.$$.fragment,f),E(Gx.$$.fragment,f),E(yC.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E($C.$$.fragment,f),E(Wx.$$.fragment,f),E(GC.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(VC.$$.fragment,f),E(Yx.$$.fragment,f),E(e5.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(r5.$$.fragment,f),E(r$.$$.fragment,f),E(g5.$$.fragment,f),E(t$.$$.fragment,f),E(a$.$$.fragment,f),E(s$.$$.fragment,f),E(p5.$$.fragment,f),E(l$.$$.fragment,f),E(C5.$$.fragment,f),E(i$.$$.fragment,f),E(d$.$$.fragment,f),E(f$.$$.fragment,f),E(A5.$$.fragment,f),E(m$.$$.fragment,f),E(B5.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(u$.$$.fragment,f),E(N5.$$.fragment,f),E(_$.$$.fragment,f),E(j5.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E(G5.$$.fragment,f),E(M$.$$.fragment,f),E(X5.$$.fragment,f),E(C$.$$.fragment,f),E(w$.$$.fragment,f),E(L$.$$.fragment,f),E(W5.$$.fragment,f),E(y$.$$.fragment,f),E(H5.$$.fragment,f),tVe=!0)},o(f){C(d.$$.fragment,f),C(ya.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(Sf.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(wL.$$.fragment,f),C(jg.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(yL.$$.fragment,f),C(kL.$$.fragment,f),C(Th.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(NL.$$.fragment,f),C(rp.$$.fragment,f),C(tp.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(VL.$$.fragment,f),C(Ep.$$.fragment,f),C(Cp.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(Lp.$$.fragment,f),C(UL.$$.fragment,f),C(A_.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(y_.$$.fragment,f),C(ey.$$.fragment,f),C(v1.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(T1.$$.fragment,f),C(ny.$$.fragment,f),C(l2.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(d2.$$.fragment,f),C(cy.$$.fragment,f),C(Q2.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(U2.$$.fragment,f),C(py.$$.fragment,f),C(hb.$$.fragment,f),C(uy.$$.fragment,f),C(_y.$$.fragment,f),C(vy.$$.fragment,f),C(ub.$$.fragment,f),C(Fy.$$.fragment,f),C(mv.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(hv.$$.fragment,f),C(wy.$$.fragment,f),C(zv.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(Qv.$$.fragment,f),C($y.$$.fragment,f),C(e3.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(r3.$$.fragment,f),C(By.$$.fragment,f),C(j3.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(G3.$$.fragment,f),C(Dy.$$.fragment,f),C(x0.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(k0.$$.fragment,f),C(zy.$$.fragment,f),C(P0.$$.fragment,f),C(Wy.$$.fragment,f),C(Qy.$$.fragment,f),C(Uy.$$.fragment,f),C(I0.$$.fragment,f),C(Jy.$$.fragment,f),C(J0.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(e8.$$.fragment,f),C(K0.$$.fragment,f),C(o8.$$.fragment,f),C(oF.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(tF.$$.fragment,f),C(s8.$$.fragment,f),C(sF.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(iF.$$.fragment,f),C(f8.$$.fragment,f),C(vF.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(TF.$$.fragment,f),C(u8.$$.fragment,f),C(yF.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C($F.$$.fragment,f),C(T8.$$.fragment,f),C(OF.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(XF.$$.fragment,f),C(A8.$$.fragment,f),C(HF.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(JF.$$.fragment,f),C(S8.$$.fragment,f),C(t6.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(n6.$$.fragment,f),C(N8.$$.fragment,f),C(c6.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(m6.$$.fragment,f),C(O8.$$.fragment,f),C(u6.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(b6.$$.fragment,f),C(H8.$$.fragment,f),C(T6.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(E6.$$.fragment,f),C(Z8.$$.fragment,f),C(x6.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(k6.$$.fragment,f),C(a9.$$.fragment,f),C(P6.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(I6.$$.fragment,f),C(d9.$$.fragment,f),C(xT.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(kT.$$.fragment,f),C(h9.$$.fragment,f),C(o7.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(t7.$$.fragment,f),C(v9.$$.fragment,f),C(_7.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(v7.$$.fragment,f),C(C9.$$.fragment,f),C(C7.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(y9.$$.fragment,f),C(A7.$$.fragment,f),C(x9.$$.fragment,f),C(Q7.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(U7.$$.fragment,f),C(P9.$$.fragment,f),C(sM.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(iM.$$.fragment,f),C(j9.$$.fragment,f),C(BM.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(NM.$$.fragment,f),C(X9.$$.fragment,f),C(o4.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(H9.$$.fragment,f),C(t4.$$.fragment,f),C(U9.$$.fragment,f),C(s4.$$.fragment,f),C(Y9.$$.fragment,f),C(K9.$$.fragment,f),C(ex.$$.fragment,f),C(i4.$$.fragment,f),C(ox.$$.fragment,f),C(c4.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(m4.$$.fragment,f),C(sx.$$.fragment,f),C(R4.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(B4.$$.fragment,f),C(fx.$$.fragment,f),C(rE.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(aE.$$.fragment,f),C(ux.$$.fragment,f),C(sE.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(iE.$$.fragment,f),C(Tx.$$.fragment,f),C(cE.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(mE.$$.fragment,f),C(Ax.$$.fragment,f),C(DE.$$.fragment,f),C(Lx.$$.fragment,f),C(yx.$$.fragment,f),C($x.$$.fragment,f),C(OE.$$.fragment,f),C(kx.$$.fragment,f),C(ZE.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(oC.$$.fragment,f),C(Ix.$$.fragment,f),C(pC.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(_C.$$.fragment,f),C(Gx.$$.fragment,f),C(yC.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C($C.$$.fragment,f),C(Wx.$$.fragment,f),C(GC.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(VC.$$.fragment,f),C(Yx.$$.fragment,f),C(e5.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(r5.$$.fragment,f),C(r$.$$.fragment,f),C(g5.$$.fragment,f),C(t$.$$.fragment,f),C(a$.$$.fragment,f),C(s$.$$.fragment,f),C(p5.$$.fragment,f),C(l$.$$.fragment,f),C(C5.$$.fragment,f),C(i$.$$.fragment,f),C(d$.$$.fragment,f),C(f$.$$.fragment,f),C(A5.$$.fragment,f),C(m$.$$.fragment,f),C(B5.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(u$.$$.fragment,f),C(N5.$$.fragment,f),C(_$.$$.fragment,f),C(j5.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C(G5.$$.fragment,f),C(M$.$$.fragment,f),C(X5.$$.fragment,f),C(C$.$$.fragment,f),C(w$.$$.fragment,f),C(L$.$$.fragment,f),C(W5.$$.fragment,f),C(y$.$$.fragment,f),C(H5.$$.fragment,f),tVe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Lf),f&&t(at),f&&t(Oe),f&&t(We),f&&t(xf),w(ya,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t(xa),f&&t(KDe),f&&t(Li),w(vL),f&&t(ZDe),f&&t(In),f&&t(eGe),w(FL,f),f&&t(oGe),f&&t(Jk),f&&t(rGe),w(Sf,f),f&&t(tGe),f&&t(yi),w(TL),f&&t(aGe),f&&t(wo),w(ML),w(wL),w(jg),w(AL),f&&t(nGe),f&&t($i),w(LL),f&&t(sGe),f&&t(Ao),w(yL),w(kL),w(Th),w(SL),f&&t(lGe),f&&t(ki),w(RL),f&&t(iGe),f&&t(Lo),w(PL),w(NL),w(rp),w(tp),w(qL),f&&t(dGe),f&&t(Si),w(jL),f&&t(cGe),f&&t(yo),w(DL),w(VL),w(Ep),w(Cp),w(XL),f&&t(fGe),f&&t(Pi),w(zL),f&&t(mGe),f&&t(xo),w(WL),w(HL),w(Lp),w(UL),w(A_),f&&t(gGe),f&&t(Ni),w(JL),f&&t(hGe),f&&t($o),w(YL),w(ZL),w(y_),w(ey),w(v1),f&&t(pGe),f&&t(Di),w(oy),f&&t(uGe),f&&t(ko),w(ry),w(ay),w(T1),w(ny),w(l2),f&&t(_Ge),f&&t(Vi),w(sy),f&&t(bGe),f&&t(So),w(ly),w(dy),w(d2),w(cy),w(Q2),f&&t(vGe),f&&t(Wi),w(fy),f&&t(FGe),f&&t(Ro),w(my),w(hy),w(U2),w(py),w(hb),f&&t(TGe),f&&t(Ui),w(uy),f&&t(MGe),f&&t(Po),w(_y),w(vy),w(ub),w(Fy),w(mv),f&&t(EGe),f&&t(Ki),w(Ty),f&&t(CGe),f&&t(Bo),w(My),w(Cy),w(hv),w(wy),w(zv),f&&t(wGe),f&&t(od),w(Ay),f&&t(AGe),f&&t(Io),w(Ly),w(xy),w(Qv),w($y),w(e3),f&&t(LGe),f&&t(ad),w(ky),f&&t(yGe),f&&t(No),w(Sy),w(Py),w(r3),w(By),w(j3),f&&t(xGe),f&&t(ld),w(Iy),f&&t($Ge),f&&t(qo),w(Ny),w(jy),w(G3),w(Dy),w(x0),f&&t(kGe),f&&t(cd),w(Gy),f&&t(SGe),f&&t(jo),w(Oy),w(Xy),w(k0),w(zy),w(P0),f&&t(RGe),f&&t(gd),w(Wy),f&&t(PGe),f&&t(Do),w(Qy),w(Uy),w(I0),w(Jy),w(J0),f&&t(BGe),f&&t(ud),w(Yy),f&&t(IGe),f&&t(Go),w(Ky),w(e8),w(K0),w(o8),w(oF),f&&t(NGe),f&&t(vd),w(r8),f&&t(qGe),f&&t(Oo),w(t8),w(n8),w(tF),w(s8),w(sF),f&&t(jGe),f&&t(Md),w(l8),f&&t(DGe),f&&t(Vo),w(i8),w(c8),w(iF),w(f8),w(vF),f&&t(GGe),f&&t(wd),w(m8),f&&t(OGe),f&&t(Xo),w(g8),w(p8),w(TF),w(u8),w(yF),f&&t(VGe),f&&t(yd),w(_8),f&&t(XGe),f&&t(zo),w(b8),w(F8),w($F),w(T8),w(OF),f&&t(zGe),f&&t(kd),w(M8),f&&t(WGe),f&&t(Wo),w(E8),w(w8),w(XF),w(A8),w(HF),f&&t(QGe),f&&t(Pd),w(y8),f&&t(HGe),f&&t(Qo),w(x8),w(k8),w(JF),w(S8),w(t6),f&&t(UGe),f&&t(Nd),w(R8),f&&t(JGe),f&&t(Ho),w(P8),w(I8),w(n6),w(N8),w(c6),f&&t(YGe),f&&t(Gd),w(q8),f&&t(KGe),f&&t(Uo),w(j8),w(G8),w(m6),w(O8),w(u6),f&&t(ZGe),f&&t(Xd),w(X8),f&&t(eOe),f&&t(Jo),w(z8),w(Q8),w(b6),w(H8),w(T6),f&&t(oOe),f&&t(Qd),w(U8),f&&t(rOe),f&&t(Yo),w(J8),w(K8),w(E6),w(Z8),w(x6),f&&t(tOe),f&&t(Jd),w(e9),f&&t(aOe),f&&t(Ko),w(o9),w(t9),w(k6),w(a9),w(P6),f&&t(nOe),f&&t(Zd),w(n9),f&&t(sOe),f&&t(Zo),w(s9),w(i9),w(I6),w(d9),w(xT),f&&t(lOe),f&&t(rc),w(c9),f&&t(iOe),f&&t(er),w(f9),w(g9),w(kT),w(h9),w(o7),f&&t(dOe),f&&t(nc),w(p9),f&&t(cOe),f&&t(or),w(u9),w(b9),w(t7),w(v9),w(_7),f&&t(fOe),f&&t(ic),w(F9),f&&t(mOe),f&&t(rr),w(T9),w(E9),w(v7),w(C9),w(C7),f&&t(gOe),f&&t(fc),w(w9),f&&t(hOe),f&&t(tr),w(A9),w(y9),w(A7),w(x9),w(Q7),f&&t(pOe),f&&t(hc),w($9),f&&t(uOe),f&&t(ar),w(k9),w(R9),w(U7),w(P9),w(sM),f&&t(_Oe),f&&t(_c),w(B9),f&&t(bOe),f&&t(nr),w(I9),w(q9),w(iM),w(j9),w(BM),f&&t(vOe),f&&t(Fc),w(D9),f&&t(FOe),f&&t(sr),w(G9),w(V9),w(NM),w(X9),w(o4),f&&t(TOe),f&&t(Ec),w(z9),f&&t(MOe),f&&t(lr),w(W9),w(H9),w(t4),w(U9),w(s4),f&&t(EOe),f&&t(Ac),w(Y9),f&&t(COe),f&&t(ir),w(K9),w(ex),w(i4),w(ox),w(c4),f&&t(wOe),f&&t(xc),w(rx),f&&t(AOe),f&&t(dr),w(tx),w(nx),w(m4),w(sx),w(R4),f&&t(LOe),f&&t(Sc),w(lx),f&&t(yOe),f&&t(cr),w(ix),w(cx),w(B4),w(fx),w(rE),f&&t(xOe),f&&t(Bc),w(mx),f&&t($Oe),f&&t(fr),w(gx),w(px),w(aE),w(ux),w(sE),f&&t(kOe),f&&t(qc),w(_x),f&&t(SOe),f&&t(mr),w(bx),w(Fx),w(iE),w(Tx),w(cE),f&&t(ROe),f&&t(Gc),w(Mx),f&&t(POe),f&&t(gr),w(Ex),w(wx),w(mE),w(Ax),w(DE),f&&t(BOe),f&&t(Xc),w(Lx),f&&t(IOe),f&&t(hr),w(yx),w($x),w(OE),w(kx),w(ZE),f&&t(NOe),f&&t(Qc),w(Sx),f&&t(qOe),f&&t(pr),w(Rx),w(Bx),w(oC),w(Ix),w(pC),f&&t(jOe),f&&t(Jc),w(Nx),f&&t(DOe),f&&t(ur),w(qx),w(Dx),w(_C),w(Gx),w(yC),f&&t(GOe),f&&t(Zc),w(Ox),f&&t(OOe),f&&t(_r),w(Vx),w(zx),w($C),w(Wx),w(GC),f&&t(VOe),f&&t(rf),w(Qx),f&&t(XOe),f&&t(br),w(Hx),w(Jx),w(VC),w(Yx),w(e5),f&&t(zOe),f&&t(nf),w(Kx),f&&t(WOe),f&&t(vr),w(Zx),w(o$),w(r5),w(r$),w(g5),f&&t(QOe),f&&t(df),w(t$),f&&t(HOe),f&&t(Fr),w(a$),w(s$),w(p5),w(l$),w(C5),f&&t(UOe),f&&t(mf),w(i$),f&&t(JOe),f&&t(Tr),w(d$),w(f$),w(A5),w(m$),w(B5),f&&t(YOe),f&&t(pf),w(g$),f&&t(KOe),f&&t(Mr),w(h$),w(u$),w(N5),w(_$),w(j5),f&&t(ZOe),f&&t(bf),w(b$),f&&t(eVe),f&&t(Er),w(v$),w(T$),w(G5),w(M$),w(X5),f&&t(oVe),f&&t(Tf),w(C$),f&&t(rVe),f&&t(Cr),w(w$),w(L$),w(W5),w(y$),w(H5)}}}const bDt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function vDt(y){return _qt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ADt extends gqt{constructor(g){super();hqt(this,g,vDt,_Dt,pqt,{})}}export{ADt as default,bDt as metadata};
