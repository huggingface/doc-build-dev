import{S as eg,i as tg,s as og,e as l,k as i,w as m,t as s,M as sg,c as a,d as o,m as h,a as n,x as y,h as r,b as d,G as e,g as f,y as g,L as rg,q as v,o as w,B as b,v as lg}from"../chunks/vendor-hf-doc-builder.js";import{I as R}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as $}from"../chunks/CodeBlock-hf-doc-builder.js";function ag(Nc){let Z,bl,X,we,es,Ue,pn,ts,mn,$l,ao,yn,_l,no,gn,El,be,vn,Ye,wn,bn,kl,ee,$e,os,Be,$n,ss,_n,Pl,io,En,Il,C,rs,kn,Pn,ls,In,On,as,Sn,Tn,ns,Cn,Ol,x,xn,ze,Ln,An,is,Dn,qn,hs,Rn,Nn,Sl,ho,us,Wn,Tl,te,_e,fs,Je,Fn,ds,Hn,Cl,uo,jn,xl,oe,Ee,cs,Ke,Gn,ps,Mn,Ll,fo,Un,Al,ke,Yn,ms,Bn,zn,Dl,co,Jn,ql,W,S,Kn,ys,Qn,Vn,gs,Zn,Xn,vs,ei,ti,ws,oi,si,ri,bs,li,ai,Qe,ni,$s,ii,hi,Rl,po,ui,Nl,Ve,Wl,mo,fi,Fl,Ze,Hl,se,Pe,_s,Xe,di,Es,ci,jl,yo,pi,Gl,F,ks,mi,yi,Ps,gi,vi,Is,wi,Ml,go,bi,Ul,H,$i,Os,_i,Ei,et,Ss,ki,Pi,Yl,re,Ie,Ts,tt,Ii,Cs,Oi,Bl,vo,Si,zl,wo,xs,Ti,Jl,j,Ls,Ci,xi,As,Li,Ai,Ds,Di,Kl,T,ot,qi,qs,Ri,Ni,Wi,st,Fi,Rs,Hi,ji,Gi,Ns,Mi,Ui,Ws,Yi,Ql,bo,Bi,Vl,G,zi,Fs,Ji,Ki,rt,Hs,Qi,Vi,Zl,le,Oe,js,lt,Zi,Gs,Xi,Xl,$o,eh,ea,I,th,Ms,oh,sh,Us,rh,lh,Ys,ah,nh,at,ih,hh,ta,_o,uh,oa,_,Bs,ae,fh,zs,dh,ch,Js,ph,mh,yh,Ks,nt,gh,it,vh,wh,bh,ht,Qs,$h,_h,ut,Eh,ne,Vs,kh,Ph,ft,Ih,Se,Zs,Oh,Sh,Xs,Th,Ch,xh,P,er,Lh,Ah,dt,Dh,ie,qh,tr,Rh,Nh,or,Wh,Fh,Hh,ct,jh,sr,Gh,Mh,Uh,pt,Yh,he,Bh,rr,zh,Jh,lr,Kh,Qh,Vh,c,ar,Zh,Xh,nr,eu,tu,mt,ou,ir,su,ru,yt,lu,Eo,au,gt,nu,iu,ue,hu,hr,uu,fu,ur,du,cu,pu,vt,mu,fr,yu,gu,dr,vu,wu,wt,bu,bt,$u,cr,_u,Eu,ku,$t,Pu,pr,Iu,Ou,_t,Su,ko,Tu,Et,Cu,xu,kt,Lu,mr,Au,Du,qu,Pt,Ru,yr,Nu,Wu,It,Fu,gr,Hu,ju,Ot,Gu,St,Mu,vr,Uu,Yu,Bu,fe,zu,wr,Ju,Ku,br,Qu,Vu,Zu,Tt,Xu,Ct,ef,xt,tf,of,sf,$r,rf,lf,Lt,af,_r,nf,hf,At,uf,Er,Dt,ff,kr,df,cf,pf,Pr,Ir,mf,sa,de,Te,Or,qt,yf,Sr,gf,ra,E,Tr,vf,wf,Cr,bf,$f,Rt,_f,xr,Ef,kf,Pf,Lr,If,Of,Po,Sf,ce,Nt,Tf,Ar,Cf,xf,Lf,pe,Af,Dr,Df,qf,qr,Rf,Nf,Wf,Wt,Ff,Rr,Hf,jf,Gf,Ft,Mf,Nr,Uf,Yf,Bf,N,zf,Wr,Jf,Kf,Ht,Fr,Qf,Vf,jt,Zf,Xf,la,Gt,ed,Io,td,aa,me,Ce,Hr,Mt,od,jr,sd,na,M,rd,Ut,ld,ad,Yt,nd,id,ia,L,hd,Gr,ud,fd,Mr,dd,cd,Ur,pd,md,ha,Bt,ua,Oo,yd,fa,zt,da,A,gd,Yr,vd,wd,Br,bd,$d,zr,_d,Ed,ca,So,kd,pa,U,Pd,Jr,Id,Od,Kr,Sd,Td,ma,Jt,ya,Y,Cd,Qr,xd,Ld,Vr,Ad,Dd,ga,B,qd,Zr,Rd,Nd,Xr,Wd,Fd,va,z,Hd,el,jd,Gd,tl,Md,Ud,wa,Kt,ba,ye,xe,ol,Qt,Yd,sl,Bd,$a,J,zd,Vt,Jd,Kd,Zt,Qd,Vd,_a,To,Xt,Zd,eo,Xd,ec,Ea,ge,Le,rl,to,tc,ll,oc,ka,K,sc,al,rc,lc,nl,ac,nc,Pa,Co,il,ic,Ia,xo,hc,Oa,D,Lo,oo,uc,fc,dc,hl,cc,pc,Ae,mc,ul,yc,gc,fl,vc,wc,so,bc,dl,$c,_c,Sa,De,Ec,cl,kc,Pc,Ta,ve,qe,pl,ro,Ic,ml,Oc,Ca,Ao,Sc,xa,Re,yl,Tc,Cc,gl,xc,La,lo,Aa;return Ue=new R({}),Be=new R({}),Je=new R({}),Ke=new R({}),Ve=new $({props:{code:"transformers-cli env",highlighted:'transformers-cli <span class="hljs-built_in">env</span>'}}),Ze=new $({props:{code:"python src/transformers/commands/transformers_cli.py env",highlighted:'python src/transformers/commands/transformers_cli.py <span class="hljs-built_in">env</span>'}}),Xe=new R({}),tt=new R({}),lt=new R({}),ut=new $({props:{code:`$ git clone git@github.com:<your Github handle>/transformers.git
$ cd transformers
$ git remote add upstream https://github.com/huggingface/transformers.git`,highlighted:`$ git <span class="hljs-built_in">clone</span> git@github.com:&lt;your Github handle&gt;/transformers.git
$ <span class="hljs-built_in">cd</span> transformers
$ git remote add upstream https://github.com/huggingface/transformers.git`}}),ft=new $({props:{code:"$ git checkout -b a-descriptive-name-for-my-changes",highlighted:"$ git checkout -b a-descriptive-name-for-my-changes"}}),dt=new $({props:{code:'$ pip install -e ".[dev]"',highlighted:'$ pip install -e <span class="hljs-string">&quot;.[dev]&quot;</span>'}}),pt=new $({props:{code:`$ git clone https://github.com/huggingface/datasets
$ cd datasets
$ pip install -e .`,highlighted:`$ git <span class="hljs-built_in">clone</span> https://github.com/huggingface/datasets
$ <span class="hljs-built_in">cd</span> datasets
$ pip install -e .`}}),mt=new $({props:{code:"$ pytest tests/<TEST_TO_RUN>.py",highlighted:"$ pytest tests/&lt;TEST_TO_RUN&gt;.py"}}),yt=new $({props:{code:"$ make test",highlighted:'$ make <span class="hljs-built_in">test</span>'}}),vt=new $({props:{code:"$ make fixup",highlighted:"$ make fixup"}}),wt=new $({props:{code:"$ make style",highlighted:"$ make style"}}),$t=new $({props:{code:"$ make quality",highlighted:"$ make quality"}}),_t=new $({props:{code:"$ make repo-consistency",highlighted:"$ make repo-consistency"}}),Pt=new $({props:{code:"$ pip install git+https://github.com/huggingface/doc-builder",highlighted:"$ pip install git+https://github.com/huggingface/doc-builder"}}),It=new $({props:{code:'$ pip install ".[docs]"',highlighted:'$ pip install <span class="hljs-string">&quot;.[docs]&quot;</span>'}}),Ot=new $({props:{code:"$ doc-builder build transformers docs/source/ --build_dir ~/tmp/test-build",highlighted:"$ doc-builder build transformers docs/source/ --build_dir ~/tmp/test-build"}}),Tt=new $({props:{code:`$ git add modified_file.py
$ git commit`,highlighted:`$ git add modified_file.py
$ git commit`}}),Lt=new $({props:{code:`$ git fetch upstream
$ git rebase upstream/main`,highlighted:`$ git fetch upstream
$ git rebase upstream/main`}}),At=new $({props:{code:"$ git push -u origin a-descriptive-name-for-my-changes",highlighted:"$ git push -u origin a-descriptive-name-for-my-changes"}}),qt=new R({}),Mt=new R({}),Bt=new $({props:{code:"$ python -m pytest -n auto --dist=loadfile -s -v ./tests/",highlighted:"$ python -m pytest -n auto --dist=loadfile -s -v ./tests/"}}),zt=new $({props:{code:`$ pip install -r examples/xxx/requirements.txt  # only needed the first time
$ python -m pytest -n auto --dist=loadfile -s -v ./examples/`,highlighted:`$ pip install -r examples/xxx/requirements.txt  <span class="hljs-comment"># only needed the first time</span>
$ python -m pytest -n auto --dist=loadfile -s -v ./examples/`}}),Jt=new $({props:{code:`$ RUN_SLOW=yes python -m pytest -n auto --dist=loadfile -s -v ./tests/
$ RUN_SLOW=yes python -m pytest -n auto --dist=loadfile -s -v ./examples/`,highlighted:`$ RUN_SLOW=<span class="hljs-built_in">yes</span> python -m pytest -n auto --dist=loadfile -s -v ./tests/
$ RUN_SLOW=<span class="hljs-built_in">yes</span> python -m pytest -n auto --dist=loadfile -s -v ./examples/`}}),Kt=new $({props:{code:`$ python -m unittest discover -s tests -t . -v
$ python -m unittest discover -s examples -t examples -v`,highlighted:`$ python -m unittest discover -s tests -t . -v
$ python -m unittest discover -s examples -t examples -v`}}),Qt=new R({}),to=new R({}),ro=new R({}),lo=new $({props:{code:`$ git checkout -b your-branch-for-syncing
$ git pull --squash --no-commit upstream main
$ git commit -m '<your message without GitHub references>'
$ git push --set-upstream origin your-branch-for-syncing`,highlighted:`<span class="hljs-symbol">$</span> git checkout -b your-branch-<span class="hljs-keyword">for</span>-syncing
<span class="hljs-symbol">$</span> git pull --squash --<span class="hljs-keyword">no</span>-commit upstream main
<span class="hljs-symbol">$</span> git commit -m <span class="hljs-string">&#x27;&lt;your message without GitHub references&gt;&#x27;</span>
<span class="hljs-symbol">$</span> git push --<span class="hljs-keyword">set</span>-upstream <span class="hljs-comment">origin your-branch-for-syncing</span>`}}),{c(){Z=l("meta"),bl=i(),X=l("h1"),we=l("a"),es=l("span"),m(Ue.$$.fragment),pn=i(),ts=l("span"),mn=s("How to contribute to transformers?"),$l=i(),ao=l("p"),yn=s(`Everyone is welcome to contribute, and we value everybody\u2019s contribution. Code
is thus not the only way to help the community. Answering questions, helping
others, reaching out and improving the documentations are immensely valuable to
the community.`),_l=i(),no=l("p"),gn=s(`It also helps us if you spread the word: reference the library from blog posts
on the awesome projects it made possible, shout out on Twitter every time it has
helped you, or simply star the repo to say \u201Cthank you\u201D.`),El=i(),be=l("p"),vn=s(`Whichever way you choose to contribute, please be mindful to respect our
`),Ye=l("a"),wn=s("code of conduct"),bn=s("."),kl=i(),ee=l("h2"),$e=l("a"),os=l("span"),m(Be.$$.fragment),$n=i(),ss=l("span"),_n=s("You can contribute in so many ways!"),Pl=i(),io=l("p"),En=s("There are 4 ways you can contribute to transformers:"),Il=i(),C=l("ul"),rs=l("li"),kn=s("Fixing outstanding issues with the existing code;"),Pn=i(),ls=l("li"),In=s("Implementing new models;"),On=i(),as=l("li"),Sn=s("Contributing to the examples or to the documentation;"),Tn=i(),ns=l("li"),Cn=s("Submitting issues related to bugs or desired new features."),Ol=i(),x=l("p"),xn=s("In particular there is a special "),ze=l("a"),Ln=s(`Good First
Issue`),An=s(` listing. It will give you a list of
open Issues that are open to anybody to work on. Just comment in the issue that you\u2019d like to work
on it. In that same listing you will also find some Issues with `),is=l("code"),Dn=s("Good Second Issue"),qn=s(` label. These are
typically slightly more complicated than the Issues with just `),hs=l("code"),Rn=s("Good First Issue"),Nn=s(` label. But if you
feel you know what you\u2019re doing, go for it.`),Sl=i(),ho=l("p"),us=l("em"),Wn=s("All are equally valuable to the community."),Tl=i(),te=l("h2"),_e=l("a"),fs=l("span"),m(Je.$$.fragment),Fn=i(),ds=l("span"),Hn=s("Submitting a new issue or feature request"),Cl=i(),uo=l("p"),jn=s(`Do your best to follow these guidelines when submitting an issue or a feature
request. It will make it easier for us to come back to you quickly and with good
feedback.`),xl=i(),oe=l("h3"),Ee=l("a"),cs=l("span"),m(Ke.$$.fragment),Gn=i(),ps=l("span"),Mn=s("Did you find a bug?"),Ll=i(),fo=l("p"),Un=s(`The \u{1F917} Transformers library is robust and reliable thanks to the users who notify us of
the problems they encounter. So thank you for reporting an issue.`),Al=i(),ke=l("p"),Yn=s("First, we would really appreciate it if you could "),ms=l("strong"),Bn=s(`make sure the bug was not
already reported`),zn=s(" (use the search bar on Github under Issues)."),Dl=i(),co=l("p"),Jn=s("Did not find it? :( So we can act quickly on it, please follow these steps:"),ql=i(),W=l("ul"),S=l("li"),Kn=s("Include your "),ys=l("strong"),Qn=s("OS type and version"),Vn=s(", the versions of "),gs=l("strong"),Zn=s("Python"),Xn=s(", "),vs=l("strong"),ei=s("PyTorch"),ti=s(` and
`),ws=l("strong"),oi=s("Tensorflow"),si=s(" when applicable;"),ri=i(),bs=l("li"),li=s(`A short, self-contained, code snippet that allows us to reproduce the bug in
less than 30s;`),ai=i(),Qe=l("li"),ni=s("Provide the "),$s=l("em"),ii=s("full"),hi=s(" traceback if an exception is raised."),Rl=i(),po=l("p"),ui=s("To get the OS and software versions automatically, you can run the following command:"),Nl=i(),m(Ve.$$.fragment),Wl=i(),mo=l("p"),fi=s("or from the root of the repository the following command:"),Fl=i(),m(Ze.$$.fragment),Hl=i(),se=l("h3"),Pe=l("a"),_s=l("span"),m(Xe.$$.fragment),di=i(),Es=l("span"),ci=s("Do you want to implement a new model?"),jl=i(),yo=l("p"),pi=s("Awesome! Please provide the following information:"),Gl=i(),F=l("ul"),ks=l("li"),mi=s("Short description of the model and link to the paper;"),yi=i(),Ps=l("li"),gi=s("Link to the implementation if it is open-source;"),vi=i(),Is=l("li"),wi=s("Link to the model weights if they are available."),Ml=i(),go=l("p"),bi=s(`If you are willing to contribute the model yourself, let us know so we can best
guide you.`),Ul=i(),H=l("p"),$i=s("We have added a "),Os=l("strong"),_i=s("detailed guide and templates"),Ei=s(` to guide you in the process of adding a new model. You can find them
in the `),et=l("a"),Ss=l("code"),ki=s("templates"),Pi=s(" folder."),Yl=i(),re=l("h3"),Ie=l("a"),Ts=l("span"),m(tt.$$.fragment),Ii=i(),Cs=l("span"),Oi=s("Do you want a new feature (that is not a model)?"),Bl=i(),vo=l("p"),Si=s("A world-class feature request addresses the following points:"),zl=i(),wo=l("ol"),xs=l("li"),Ti=s("Motivation first:"),Jl=i(),j=l("ul"),Ls=l("li"),Ci=s(`Is it related to a problem/frustration with the library? If so, please explain
why. Providing a code snippet that demonstrates the problem is best.`),xi=i(),As=l("li"),Li=s(`Is it related to something you would need for a project? We\u2019d love to hear
about it!`),Ai=i(),Ds=l("li"),Di=s(`Is it something you worked on and think could benefit the community?
Awesome! Tell us what problem it solved for you.`),Kl=i(),T=l("ol"),ot=l("li"),qi=s("Write a "),qs=l("em"),Ri=s("full paragraph"),Ni=s(" describing the feature;"),Wi=i(),st=l("li"),Fi=s("Provide a "),Rs=l("strong"),Hi=s("code snippet"),ji=s(" that demonstrates its future use;"),Gi=i(),Ns=l("li"),Mi=s("In case this is related to a paper, please attach a link;"),Ui=i(),Ws=l("li"),Yi=s("Attach any additional information (drawings, screenshots, etc.) you think may help."),Ql=i(),bo=l("p"),Bi=s(`If your issue is well written we\u2019re already 80% of the way there by the time you
post it.`),Vl=i(),G=l("p"),zi=s("We have added "),Fs=l("strong"),Ji=s("templates"),Ki=s(` to guide you in the process of adding a new example script for training or testing the
models in the library. You can find them in the `),rt=l("a"),Hs=l("code"),Qi=s("templates"),Vi=s(`
folder.`),Zl=i(),le=l("h2"),Oe=l("a"),js=l("span"),m(lt.$$.fragment),Zi=i(),Gs=l("span"),Xi=s("Start contributing! (Pull Requests)"),Xl=i(),$o=l("p"),eh=s(`Before writing code, we strongly advise you to search through the existing PRs or
issues to make sure that nobody is already working on the same thing. If you are
unsure, it is always a good idea to open an issue to get some feedback.`),ea=i(),I=l("p"),th=s("You will need basic "),Ms=l("code"),oh=s("git"),sh=s(` proficiency to be able to contribute to
\u{1F917} Transformers. `),Us=l("code"),rh=s("git"),lh=s(` is not the easiest tool to use but it has the greatest
manual. Type `),Ys=l("code"),ah=s("git --help"),nh=s(" in a shell and enjoy. If you prefer books, "),at=l("a"),ih=s(`Pro
Git`),hh=s(" is a very good reference."),ta=i(),_o=l("p"),uh=s("Follow these steps to start contributing:"),oa=i(),_=l("ol"),Bs=l("li"),ae=l("p"),fh=s("Verify that your python version is "),zs=l("code"),dh=s("3.8.x"),ch=s(" or lower with "),Js=l("code"),ph=s("python --version"),mh=s("."),yh=i(),Ks=l("li"),nt=l("p"),gh=s("Fork the "),it=l("a"),vh=s("repository"),wh=s(` by
clicking on the \u2018Fork\u2019 button on the repository\u2019s page. This creates a copy of the code
under your GitHub user account.`),bh=i(),ht=l("li"),Qs=l("p"),$h=s("Clone your fork to your local disk, and add the base repository as a remote:"),_h=i(),m(ut.$$.fragment),Eh=i(),ne=l("li"),Vs=l("p"),kh=s("Create a new branch to hold your development changes:"),Ph=i(),m(ft.$$.fragment),Ih=i(),Se=l("p"),Zs=l("strong"),Oh=s("Do not"),Sh=s(" work on the "),Xs=l("code"),Th=s("main"),Ch=s(" branch."),xh=i(),P=l("li"),er=l("p"),Lh=s("Set up a development environment by running the following command in a virtual environment:"),Ah=i(),m(dt.$$.fragment),Dh=i(),ie=l("p"),qh=s(`(If transformers was already installed in the virtual environment, remove
it with `),tr=l("code"),Rh=s("pip uninstall transformers"),Nh=s(` before reinstalling it in editable
mode with the `),or=l("code"),Wh=s("-e"),Fh=s(" flag.)"),Hh=i(),ct=l("p"),jh=s("To run the full test suite, you might need the additional dependency on "),sr=l("code"),Gh=s("datasets"),Mh=s(` which requires a separate source
install:`),Uh=i(),m(pt.$$.fragment),Yh=i(),he=l("p"),Bh=s("If you have already cloned that repo, you might need to "),rr=l("code"),zh=s("git pull"),Jh=s(" to get the most recent changes in the "),lr=l("code"),Kh=s("datasets"),Qh=s(`
library.`),Vh=i(),c=l("li"),ar=l("p"),Zh=s("Develop the features on your branch."),Xh=i(),nr=l("p"),eu=s(`As you work on the features, you should make sure that the test suite
passes. You should run the tests impacted by your changes like this:`),tu=i(),m(mt.$$.fragment),ou=i(),ir=l("p"),su=s(`You can also run the full suite with the following command, but it takes
a beefy machine to produce a result in a decent amount of time now that
Transformers has grown a lot. Here is the command for it:`),ru=i(),m(yt.$$.fragment),lu=i(),Eo=l("p"),au=s(`For more information about tests, check out the
`),gt=l("a"),nu=s("dedicated documentation"),iu=i(),ue=l("p"),hu=s("\u{1F917} Transformers relies on "),hr=l("code"),uu=s("black"),fu=s(" and "),ur=l("code"),du=s("isort"),cu=s(` to format its source code
consistently. After you make changes, apply automatic style corrections and code verifications
that can\u2019t be automated in one go with:`),pu=i(),m(vt.$$.fragment),mu=i(),fr=l("p"),yu=s("This target is also optimized to only work with files modified by the PR you\u2019re working on."),gu=i(),dr=l("p"),vu=s(`If you prefer to run the checks one after the other, the following command apply the
style corrections:`),wu=i(),m(wt.$$.fragment),bu=i(),bt=l("p"),$u=s("\u{1F917} Transformers also uses "),cr=l("code"),_u=s("flake8"),Eu=s(` and a few custom scripts to check for coding mistakes. Quality
control runs in CI, however you can also run the same checks with:`),ku=i(),m($t.$$.fragment),Pu=i(),pr=l("p"),Iu=s(`Finally we have a lot of scripts that check we didn\u2019t forget to update
some files when adding a new model, that you can run with`),Ou=i(),m(_t.$$.fragment),Su=i(),ko=l("p"),Tu=s(`To learn more about those checks and how to fix any issue with them, check out the
`),Et=l("a"),Cu=s("documentation"),xu=i(),kt=l("p"),Lu=s("If you\u2019re modifying documents under "),mr=l("code"),Au=s("docs/source"),Du=s(`, make sure to validate that
they can still be built. This check also runs in CI. To run a local check
make sure you have installed the documentation builder requirements. First you will need to clone the
repository containing our tools to build the documentation:`),qu=i(),m(Pt.$$.fragment),Ru=i(),yr=l("p"),Nu=s("Then, make sure you have all the dependencies to be able to build the doc with:"),Wu=i(),m(It.$$.fragment),Fu=i(),gr=l("p"),Hu=s("Finally run the following command from the root of the repository:"),ju=i(),m(Ot.$$.fragment),Gu=i(),St=l("p"),Mu=s("This will build the documentation in the "),vr=l("code"),Uu=s("~/tmp/test-build"),Yu=s(` folder where you can inspect the generated
Markdown files with your favorite editor. You won\u2019t be able to see the final rendering on the website
before your PR is merged, we are actively working on adding a tool for this.`),Bu=i(),fe=l("p"),zu=s("Once you\u2019re happy with your changes, add changed files using "),wr=l("code"),Ju=s("git add"),Ku=s(` and
make a commit with `),br=l("code"),Qu=s("git commit"),Vu=s(" to record your changes locally:"),Zu=i(),m(Tt.$$.fragment),Xu=i(),Ct=l("p"),ef=s("Please write "),xt=l("a"),tf=s(`good commit
messages`),of=s("."),sf=i(),$r=l("p"),rf=s(`It is a good idea to sync your copy of the code with the original
repository regularly. This way you can quickly account for changes:`),lf=i(),m(Lt.$$.fragment),af=i(),_r=l("p"),nf=s("Push the changes to your account using:"),hf=i(),m(At.$$.fragment),uf=i(),Er=l("li"),Dt=l("p"),ff=s("Once you are satisfied ("),kr=l("strong"),df=s("and the checklist below is happy too"),cf=s(`), go to the
webpage of your fork on GitHub. Click on \u2018Pull request\u2019 to send your changes
to the project maintainers for review.`),pf=i(),Pr=l("li"),Ir=l("p"),mf=s(`It\u2019s ok if maintainers ask you for changes. It happens to core contributors
too! So everyone can see the changes in the Pull request, work in your local
branch and push the changes to your fork. They will automatically appear in
the pull request.`),sa=i(),de=l("h3"),Te=l("a"),Or=l("span"),m(qt.$$.fragment),yf=i(),Sr=l("span"),gf=s("Checklist"),ra=i(),E=l("ol"),Tr=l("li"),vf=s("The title of your pull request should be a summary of its contribution;"),wf=i(),Cr=l("li"),bf=s(`If your pull request addresses an issue, please mention the issue number in
the pull request description to make sure they are linked (and people
consulting the issue know you are working on it);`),$f=i(),Rt=l("li"),_f=s("To indicate a work in progress please prefix the title with "),xr=l("code"),Ef=s("[WIP]"),kf=s(`. These
are useful to avoid duplicated work, and to differentiate it from PRs ready
to be merged;`),Pf=i(),Lr=l("li"),If=s("Make sure existing tests pass;"),Of=i(),Po=l("li"),Sf=s("Add high-coverage tests. No quality testing = no merge."),ce=l("ul"),Nt=l("li"),Tf=s(`If you are adding a new model, make sure that you use
`),Ar=l("code"),Cf=s("ModelTester.all_model_classes = (MyModel, MyModelWithLMHead,...)"),xf=s(", which triggers the common tests."),Lf=i(),pe=l("li"),Af=s("If you are adding new "),Dr=l("code"),Df=s("@slow"),qf=s(` tests, make sure they pass using
`),qr=l("code"),Rf=s("RUN_SLOW=1 python -m pytest tests/test_my_new_model.py"),Nf=s("."),Wf=i(),Wt=l("li"),Ff=s(`If you are adding a new tokenizer, write tests, and make sure
`),Rr=l("code"),Hf=s("RUN_SLOW=1 python -m pytest tests/test_tokenization_{your_model_name}.py"),jf=s(` passes.
CircleCI does not run the slow tests, but github actions does every night!`),Gf=i(),Ft=l("li"),Mf=s("All public methods must have informative docstrings that work nicely with sphinx. See "),Nr=l("code"),Uf=s("modeling_bert.py"),Yf=s(` for an
example.`),Bf=i(),N=l("li"),zf=s("Due to the rapidly growing repository, it is important to make sure that no files that would significantly weigh down the repository are added. This includes images, videos and other non-text files. We prefer to leverage a hf.co hosted "),Wr=l("code"),Jf=s("dataset"),Kf=s(` like
the ones hosted on `),Ht=l("a"),Fr=l("code"),Qf=s("hf-internal-testing"),Vf=s(` in which to place these files and reference
them by URL. We recommend putting them in the following dataset: `),jt=l("a"),Zf=s("huggingface/documentation-images"),Xf=s(`.
If an external contribution, feel free to add the images to your PR and ask a Hugging Face member to migrate your images
to this dataset.`),la=i(),Gt=l("p"),ed=s("See more about the checks run on a pull request in our "),Io=l("a"),td=s("PR guide"),aa=i(),me=l("h3"),Ce=l("a"),Hr=l("span"),m(Mt.$$.fragment),od=i(),jr=l("span"),sd=s("Tests"),na=i(),M=l("p"),rd=s(`An extensive test suite is included to test the library behavior and several examples. Library tests can be found in
the `),Ut=l("a"),ld=s("tests folder"),ad=s(` and examples tests in the
`),Yt=l("a"),nd=s("examples folder"),id=s("."),ia=i(),L=l("p"),hd=s("We like "),Gr=l("code"),ud=s("pytest"),fd=s(" and "),Mr=l("code"),dd=s("pytest-xdist"),cd=s(` because it\u2019s faster. From the root of the
repository, here\u2019s how to run tests with `),Ur=l("code"),pd=s("pytest"),md=s(" for the library:"),ha=i(),m(Bt.$$.fragment),ua=i(),Oo=l("p"),yd=s("and for the examples:"),fa=i(),m(zt.$$.fragment),da=i(),A=l("p"),gd=s("In fact, that\u2019s how "),Yr=l("code"),vd=s("make test"),wd=s(" and "),Br=l("code"),bd=s("make test-examples"),$d=s(" are implemented (sans the "),zr=l("code"),_d=s("pip install"),Ed=s(" line)!"),ca=i(),So=l("p"),kd=s(`You can specify a smaller set of tests in order to test only the feature
you\u2019re working on.`),pa=i(),U=l("p"),Pd=s("By default, slow tests are skipped. Set the "),Jr=l("code"),Id=s("RUN_SLOW"),Od=s(` environment variable to
`),Kr=l("code"),Sd=s("yes"),Td=s(` to run them. This will download many gigabytes of models \u2014 make sure you
have enough disk space and a good Internet connection, or a lot of patience!`),ma=i(),m(Jt.$$.fragment),ya=i(),Y=l("p"),Cd=s("Likewise, set the "),Qr=l("code"),xd=s("RUN_CUSTOM_TOKENIZERS"),Ld=s(" environment variable to "),Vr=l("code"),Ad=s("yes"),Dd=s(` to run
tests for custom tokenizers, which don\u2019t run by default either.`),ga=i(),B=l("p"),qd=s("\u{1F917} Transformers uses "),Zr=l("code"),Rd=s("pytest"),Nd=s(` as a test runner only. It doesn\u2019t use any
`),Xr=l("code"),Wd=s("pytest"),Fd=s("-specific features in the test suite itself."),va=i(),z=l("p"),Hd=s("This means "),el=l("code"),jd=s("unittest"),Gd=s(` is fully supported. Here\u2019s how to run tests with
`),tl=l("code"),Md=s("unittest"),Ud=s(":"),wa=i(),m(Kt.$$.fragment),ba=i(),ye=l("h3"),xe=l("a"),ol=l("span"),m(Qt.$$.fragment),Yd=i(),sl=l("span"),Bd=s("Style guide"),$a=i(),J=l("p"),zd=s("For documentation strings, \u{1F917} Transformers follows the "),Vt=l("a"),Jd=s("google style"),Kd=s(`.
Check our `),Zt=l("a"),Qd=s("documentation writing guide"),Vd=s(`
for more information.`),_a=i(),To=l("p"),Xt=l("strong"),Zd=s("This guide was heavily inspired by the awesome "),eo=l("a"),Xd=s("scikit-learn guide to contributing"),ec=s("."),Ea=i(),ge=l("h3"),Le=l("a"),rl=l("span"),m(to.$$.fragment),tc=i(),ll=l("span"),oc=s("Develop on Windows"),ka=i(),K=l("p"),sc=s("On windows, you need to configure git to transform Windows "),al=l("code"),rc=s("CRLF"),lc=s(" line endings to Linux "),nl=l("code"),ac=s("LF"),nc=s(" line endings:"),Pa=i(),Co=l("p"),il=l("code"),ic=s("git config core.autocrlf input"),Ia=i(),xo=l("p"),hc=s("One way one can run the make command on Window is to pass by MSYS2:"),Oa=i(),D=l("ol"),Lo=l("li"),oo=l("a"),uc=s("Download MSYS2"),fc=s(", we assume to have it installed in C:\\msys64"),dc=i(),hl=l("li"),cc=s("Open the command line C:\\msys64\\msys2.exe (it should be available from the start menu)"),pc=i(),Ae=l("li"),mc=s("Run in the shell: "),ul=l("code"),yc=s("pacman -Syu"),gc=s(" and install make with "),fl=l("code"),vc=s("pacman -S make"),wc=i(),so=l("li"),bc=s("Add "),dl=l("code"),$c=s("C:\\msys64\\usr\\bin"),_c=s(" to your PATH environment variable."),Sa=i(),De=l("p"),Ec=s("You can now use "),cl=l("code"),kc=s("make"),Pc=s(" from any terminal (Powershell, cmd.exe, etc) \u{1F389}"),Ta=i(),ve=l("h3"),qe=l("a"),pl=l("span"),m(ro.$$.fragment),Ic=i(),ml=l("span"),Oc=s("Syncing forked main with upstream (HuggingFace) main"),Ca=i(),Ao=l("p"),Sc=s(`To avoid pinging the upstream repository which adds reference notes to each upstream PR and sends unnecessary notifications to the developers involved in these PRs,
when syncing the main branch of a forked repository, please, follow these steps:`),xa=i(),Re=l("ol"),yl=l("li"),Tc=s("When possible, avoid syncing with the upstream using a branch and PR on the forked repository. Instead merge directly into the forked main."),Cc=i(),gl=l("li"),xc=s("If a PR is absolutely necessary, use the following steps after checking out your branch:"),La=i(),m(lo.$$.fragment),this.h()},l(t){const u=sg('[data-svelte="svelte-1phssyn"]',document.head);Z=a(u,"META",{name:!0,content:!0}),u.forEach(o),bl=h(t),X=a(t,"H1",{class:!0});var Da=n(X);we=a(Da,"A",{id:!0,class:!0,href:!0});var Wc=n(we);es=a(Wc,"SPAN",{});var Fc=n(es);y(Ue.$$.fragment,Fc),Fc.forEach(o),Wc.forEach(o),pn=h(Da),ts=a(Da,"SPAN",{});var Hc=n(ts);mn=r(Hc,"How to contribute to transformers?"),Hc.forEach(o),Da.forEach(o),$l=h(t),ao=a(t,"P",{});var jc=n(ao);yn=r(jc,`Everyone is welcome to contribute, and we value everybody\u2019s contribution. Code
is thus not the only way to help the community. Answering questions, helping
others, reaching out and improving the documentations are immensely valuable to
the community.`),jc.forEach(o),_l=h(t),no=a(t,"P",{});var Gc=n(no);gn=r(Gc,`It also helps us if you spread the word: reference the library from blog posts
on the awesome projects it made possible, shout out on Twitter every time it has
helped you, or simply star the repo to say \u201Cthank you\u201D.`),Gc.forEach(o),El=h(t),be=a(t,"P",{});var qa=n(be);vn=r(qa,`Whichever way you choose to contribute, please be mindful to respect our
`),Ye=a(qa,"A",{href:!0,rel:!0});var Mc=n(Ye);wn=r(Mc,"code of conduct"),Mc.forEach(o),bn=r(qa,"."),qa.forEach(o),kl=h(t),ee=a(t,"H2",{class:!0});var Ra=n(ee);$e=a(Ra,"A",{id:!0,class:!0,href:!0});var Uc=n($e);os=a(Uc,"SPAN",{});var Yc=n(os);y(Be.$$.fragment,Yc),Yc.forEach(o),Uc.forEach(o),$n=h(Ra),ss=a(Ra,"SPAN",{});var Bc=n(ss);_n=r(Bc,"You can contribute in so many ways!"),Bc.forEach(o),Ra.forEach(o),Pl=h(t),io=a(t,"P",{});var zc=n(io);En=r(zc,"There are 4 ways you can contribute to transformers:"),zc.forEach(o),Il=h(t),C=a(t,"UL",{});var Ne=n(C);rs=a(Ne,"LI",{});var Jc=n(rs);kn=r(Jc,"Fixing outstanding issues with the existing code;"),Jc.forEach(o),Pn=h(Ne),ls=a(Ne,"LI",{});var Kc=n(ls);In=r(Kc,"Implementing new models;"),Kc.forEach(o),On=h(Ne),as=a(Ne,"LI",{});var Qc=n(as);Sn=r(Qc,"Contributing to the examples or to the documentation;"),Qc.forEach(o),Tn=h(Ne),ns=a(Ne,"LI",{});var Vc=n(ns);Cn=r(Vc,"Submitting issues related to bugs or desired new features."),Vc.forEach(o),Ne.forEach(o),Ol=h(t),x=a(t,"P",{});var We=n(x);xn=r(We,"In particular there is a special "),ze=a(We,"A",{href:!0,rel:!0});var Zc=n(ze);Ln=r(Zc,`Good First
Issue`),Zc.forEach(o),An=r(We,` listing. It will give you a list of
open Issues that are open to anybody to work on. Just comment in the issue that you\u2019d like to work
on it. In that same listing you will also find some Issues with `),is=a(We,"CODE",{});var Xc=n(is);Dn=r(Xc,"Good Second Issue"),Xc.forEach(o),qn=r(We,` label. These are
typically slightly more complicated than the Issues with just `),hs=a(We,"CODE",{});var ep=n(hs);Rn=r(ep,"Good First Issue"),ep.forEach(o),Nn=r(We,` label. But if you
feel you know what you\u2019re doing, go for it.`),We.forEach(o),Sl=h(t),ho=a(t,"P",{});var tp=n(ho);us=a(tp,"EM",{});var op=n(us);Wn=r(op,"All are equally valuable to the community."),op.forEach(o),tp.forEach(o),Tl=h(t),te=a(t,"H2",{class:!0});var Na=n(te);_e=a(Na,"A",{id:!0,class:!0,href:!0});var sp=n(_e);fs=a(sp,"SPAN",{});var rp=n(fs);y(Je.$$.fragment,rp),rp.forEach(o),sp.forEach(o),Fn=h(Na),ds=a(Na,"SPAN",{});var lp=n(ds);Hn=r(lp,"Submitting a new issue or feature request"),lp.forEach(o),Na.forEach(o),Cl=h(t),uo=a(t,"P",{});var ap=n(uo);jn=r(ap,`Do your best to follow these guidelines when submitting an issue or a feature
request. It will make it easier for us to come back to you quickly and with good
feedback.`),ap.forEach(o),xl=h(t),oe=a(t,"H3",{class:!0});var Wa=n(oe);Ee=a(Wa,"A",{id:!0,class:!0,href:!0});var np=n(Ee);cs=a(np,"SPAN",{});var ip=n(cs);y(Ke.$$.fragment,ip),ip.forEach(o),np.forEach(o),Gn=h(Wa),ps=a(Wa,"SPAN",{});var hp=n(ps);Mn=r(hp,"Did you find a bug?"),hp.forEach(o),Wa.forEach(o),Ll=h(t),fo=a(t,"P",{});var up=n(fo);Un=r(up,`The \u{1F917} Transformers library is robust and reliable thanks to the users who notify us of
the problems they encounter. So thank you for reporting an issue.`),up.forEach(o),Al=h(t),ke=a(t,"P",{});var Fa=n(ke);Yn=r(Fa,"First, we would really appreciate it if you could "),ms=a(Fa,"STRONG",{});var fp=n(ms);Bn=r(fp,`make sure the bug was not
already reported`),fp.forEach(o),zn=r(Fa," (use the search bar on Github under Issues)."),Fa.forEach(o),Dl=h(t),co=a(t,"P",{});var dp=n(co);Jn=r(dp,"Did not find it? :( So we can act quickly on it, please follow these steps:"),dp.forEach(o),ql=h(t),W=a(t,"UL",{});var Do=n(W);S=a(Do,"LI",{});var Q=n(S);Kn=r(Q,"Include your "),ys=a(Q,"STRONG",{});var cp=n(ys);Qn=r(cp,"OS type and version"),cp.forEach(o),Vn=r(Q,", the versions of "),gs=a(Q,"STRONG",{});var pp=n(gs);Zn=r(pp,"Python"),pp.forEach(o),Xn=r(Q,", "),vs=a(Q,"STRONG",{});var mp=n(vs);ei=r(mp,"PyTorch"),mp.forEach(o),ti=r(Q,` and
`),ws=a(Q,"STRONG",{});var yp=n(ws);oi=r(yp,"Tensorflow"),yp.forEach(o),si=r(Q," when applicable;"),Q.forEach(o),ri=h(Do),bs=a(Do,"LI",{});var gp=n(bs);li=r(gp,`A short, self-contained, code snippet that allows us to reproduce the bug in
less than 30s;`),gp.forEach(o),ai=h(Do),Qe=a(Do,"LI",{});var Ha=n(Qe);ni=r(Ha,"Provide the "),$s=a(Ha,"EM",{});var vp=n($s);ii=r(vp,"full"),vp.forEach(o),hi=r(Ha," traceback if an exception is raised."),Ha.forEach(o),Do.forEach(o),Rl=h(t),po=a(t,"P",{});var wp=n(po);ui=r(wp,"To get the OS and software versions automatically, you can run the following command:"),wp.forEach(o),Nl=h(t),y(Ve.$$.fragment,t),Wl=h(t),mo=a(t,"P",{});var bp=n(mo);fi=r(bp,"or from the root of the repository the following command:"),bp.forEach(o),Fl=h(t),y(Ze.$$.fragment,t),Hl=h(t),se=a(t,"H3",{class:!0});var ja=n(se);Pe=a(ja,"A",{id:!0,class:!0,href:!0});var $p=n(Pe);_s=a($p,"SPAN",{});var _p=n(_s);y(Xe.$$.fragment,_p),_p.forEach(o),$p.forEach(o),di=h(ja),Es=a(ja,"SPAN",{});var Ep=n(Es);ci=r(Ep,"Do you want to implement a new model?"),Ep.forEach(o),ja.forEach(o),jl=h(t),yo=a(t,"P",{});var kp=n(yo);pi=r(kp,"Awesome! Please provide the following information:"),kp.forEach(o),Gl=h(t),F=a(t,"UL",{});var qo=n(F);ks=a(qo,"LI",{});var Pp=n(ks);mi=r(Pp,"Short description of the model and link to the paper;"),Pp.forEach(o),yi=h(qo),Ps=a(qo,"LI",{});var Ip=n(Ps);gi=r(Ip,"Link to the implementation if it is open-source;"),Ip.forEach(o),vi=h(qo),Is=a(qo,"LI",{});var Op=n(Is);wi=r(Op,"Link to the model weights if they are available."),Op.forEach(o),qo.forEach(o),Ml=h(t),go=a(t,"P",{});var Sp=n(go);bi=r(Sp,`If you are willing to contribute the model yourself, let us know so we can best
guide you.`),Sp.forEach(o),Ul=h(t),H=a(t,"P",{});var Ro=n(H);$i=r(Ro,"We have added a "),Os=a(Ro,"STRONG",{});var Tp=n(Os);_i=r(Tp,"detailed guide and templates"),Tp.forEach(o),Ei=r(Ro,` to guide you in the process of adding a new model. You can find them
in the `),et=a(Ro,"A",{href:!0,rel:!0});var Cp=n(et);Ss=a(Cp,"CODE",{});var xp=n(Ss);ki=r(xp,"templates"),xp.forEach(o),Cp.forEach(o),Pi=r(Ro," folder."),Ro.forEach(o),Yl=h(t),re=a(t,"H3",{class:!0});var Ga=n(re);Ie=a(Ga,"A",{id:!0,class:!0,href:!0});var Lp=n(Ie);Ts=a(Lp,"SPAN",{});var Ap=n(Ts);y(tt.$$.fragment,Ap),Ap.forEach(o),Lp.forEach(o),Ii=h(Ga),Cs=a(Ga,"SPAN",{});var Dp=n(Cs);Oi=r(Dp,"Do you want a new feature (that is not a model)?"),Dp.forEach(o),Ga.forEach(o),Bl=h(t),vo=a(t,"P",{});var qp=n(vo);Si=r(qp,"A world-class feature request addresses the following points:"),qp.forEach(o),zl=h(t),wo=a(t,"OL",{});var Rp=n(wo);xs=a(Rp,"LI",{});var Np=n(xs);Ti=r(Np,"Motivation first:"),Np.forEach(o),Rp.forEach(o),Jl=h(t),j=a(t,"UL",{});var No=n(j);Ls=a(No,"LI",{});var Wp=n(Ls);Ci=r(Wp,`Is it related to a problem/frustration with the library? If so, please explain
why. Providing a code snippet that demonstrates the problem is best.`),Wp.forEach(o),xi=h(No),As=a(No,"LI",{});var Fp=n(As);Li=r(Fp,`Is it related to something you would need for a project? We\u2019d love to hear
about it!`),Fp.forEach(o),Ai=h(No),Ds=a(No,"LI",{});var Hp=n(Ds);Di=r(Hp,`Is it something you worked on and think could benefit the community?
Awesome! Tell us what problem it solved for you.`),Hp.forEach(o),No.forEach(o),Kl=h(t),T=a(t,"OL",{start:!0});var Fe=n(T);ot=a(Fe,"LI",{});var Ma=n(ot);qi=r(Ma,"Write a "),qs=a(Ma,"EM",{});var jp=n(qs);Ri=r(jp,"full paragraph"),jp.forEach(o),Ni=r(Ma," describing the feature;"),Ma.forEach(o),Wi=h(Fe),st=a(Fe,"LI",{});var Ua=n(st);Fi=r(Ua,"Provide a "),Rs=a(Ua,"STRONG",{});var Gp=n(Rs);Hi=r(Gp,"code snippet"),Gp.forEach(o),ji=r(Ua," that demonstrates its future use;"),Ua.forEach(o),Gi=h(Fe),Ns=a(Fe,"LI",{});var Mp=n(Ns);Mi=r(Mp,"In case this is related to a paper, please attach a link;"),Mp.forEach(o),Ui=h(Fe),Ws=a(Fe,"LI",{});var Up=n(Ws);Yi=r(Up,"Attach any additional information (drawings, screenshots, etc.) you think may help."),Up.forEach(o),Fe.forEach(o),Ql=h(t),bo=a(t,"P",{});var Yp=n(bo);Bi=r(Yp,`If your issue is well written we\u2019re already 80% of the way there by the time you
post it.`),Yp.forEach(o),Vl=h(t),G=a(t,"P",{});var Wo=n(G);zi=r(Wo,"We have added "),Fs=a(Wo,"STRONG",{});var Bp=n(Fs);Ji=r(Bp,"templates"),Bp.forEach(o),Ki=r(Wo,` to guide you in the process of adding a new example script for training or testing the
models in the library. You can find them in the `),rt=a(Wo,"A",{href:!0,rel:!0});var zp=n(rt);Hs=a(zp,"CODE",{});var Jp=n(Hs);Qi=r(Jp,"templates"),Jp.forEach(o),zp.forEach(o),Vi=r(Wo,`
folder.`),Wo.forEach(o),Zl=h(t),le=a(t,"H2",{class:!0});var Ya=n(le);Oe=a(Ya,"A",{id:!0,class:!0,href:!0});var Kp=n(Oe);js=a(Kp,"SPAN",{});var Qp=n(js);y(lt.$$.fragment,Qp),Qp.forEach(o),Kp.forEach(o),Zi=h(Ya),Gs=a(Ya,"SPAN",{});var Vp=n(Gs);Xi=r(Vp,"Start contributing! (Pull Requests)"),Vp.forEach(o),Ya.forEach(o),Xl=h(t),$o=a(t,"P",{});var Zp=n($o);eh=r(Zp,`Before writing code, we strongly advise you to search through the existing PRs or
issues to make sure that nobody is already working on the same thing. If you are
unsure, it is always a good idea to open an issue to get some feedback.`),Zp.forEach(o),ea=h(t),I=a(t,"P",{});var V=n(I);th=r(V,"You will need basic "),Ms=a(V,"CODE",{});var Xp=n(Ms);oh=r(Xp,"git"),Xp.forEach(o),sh=r(V,` proficiency to be able to contribute to
\u{1F917} Transformers. `),Us=a(V,"CODE",{});var em=n(Us);rh=r(em,"git"),em.forEach(o),lh=r(V,` is not the easiest tool to use but it has the greatest
manual. Type `),Ys=a(V,"CODE",{});var tm=n(Ys);ah=r(tm,"git --help"),tm.forEach(o),nh=r(V," in a shell and enjoy. If you prefer books, "),at=a(V,"A",{href:!0,rel:!0});var om=n(at);ih=r(om,`Pro
Git`),om.forEach(o),hh=r(V," is a very good reference."),V.forEach(o),ta=h(t),_o=a(t,"P",{});var sm=n(_o);uh=r(sm,"Follow these steps to start contributing:"),sm.forEach(o),oa=h(t),_=a(t,"OL",{});var k=n(_);Bs=a(k,"LI",{});var rm=n(Bs);ae=a(rm,"P",{});var Fo=n(ae);fh=r(Fo,"Verify that your python version is "),zs=a(Fo,"CODE",{});var lm=n(zs);dh=r(lm,"3.8.x"),lm.forEach(o),ch=r(Fo," or lower with "),Js=a(Fo,"CODE",{});var am=n(Js);ph=r(am,"python --version"),am.forEach(o),mh=r(Fo,"."),Fo.forEach(o),rm.forEach(o),yh=h(k),Ks=a(k,"LI",{});var nm=n(Ks);nt=a(nm,"P",{});var Ba=n(nt);gh=r(Ba,"Fork the "),it=a(Ba,"A",{href:!0,rel:!0});var im=n(it);vh=r(im,"repository"),im.forEach(o),wh=r(Ba,` by
clicking on the \u2018Fork\u2019 button on the repository\u2019s page. This creates a copy of the code
under your GitHub user account.`),Ba.forEach(o),nm.forEach(o),bh=h(k),ht=a(k,"LI",{});var za=n(ht);Qs=a(za,"P",{});var hm=n(Qs);$h=r(hm,"Clone your fork to your local disk, and add the base repository as a remote:"),hm.forEach(o),_h=h(za),y(ut.$$.fragment,za),za.forEach(o),Eh=h(k),ne=a(k,"LI",{});var Ho=n(ne);Vs=a(Ho,"P",{});var um=n(Vs);kh=r(um,"Create a new branch to hold your development changes:"),um.forEach(o),Ph=h(Ho),y(ft.$$.fragment,Ho),Ih=h(Ho),Se=a(Ho,"P",{});var vl=n(Se);Zs=a(vl,"STRONG",{});var fm=n(Zs);Oh=r(fm,"Do not"),fm.forEach(o),Sh=r(vl," work on the "),Xs=a(vl,"CODE",{});var dm=n(Xs);Th=r(dm,"main"),dm.forEach(o),Ch=r(vl," branch."),vl.forEach(o),Ho.forEach(o),xh=h(k),P=a(k,"LI",{});var q=n(P);er=a(q,"P",{});var cm=n(er);Lh=r(cm,"Set up a development environment by running the following command in a virtual environment:"),cm.forEach(o),Ah=h(q),y(dt.$$.fragment,q),Dh=h(q),ie=a(q,"P",{});var jo=n(ie);qh=r(jo,`(If transformers was already installed in the virtual environment, remove
it with `),tr=a(jo,"CODE",{});var pm=n(tr);Rh=r(pm,"pip uninstall transformers"),pm.forEach(o),Nh=r(jo,` before reinstalling it in editable
mode with the `),or=a(jo,"CODE",{});var mm=n(or);Wh=r(mm,"-e"),mm.forEach(o),Fh=r(jo," flag.)"),jo.forEach(o),Hh=h(q),ct=a(q,"P",{});var Ja=n(ct);jh=r(Ja,"To run the full test suite, you might need the additional dependency on "),sr=a(Ja,"CODE",{});var ym=n(sr);Gh=r(ym,"datasets"),ym.forEach(o),Mh=r(Ja,` which requires a separate source
install:`),Ja.forEach(o),Uh=h(q),y(pt.$$.fragment,q),Yh=h(q),he=a(q,"P",{});var Go=n(he);Bh=r(Go,"If you have already cloned that repo, you might need to "),rr=a(Go,"CODE",{});var gm=n(rr);zh=r(gm,"git pull"),gm.forEach(o),Jh=r(Go," to get the most recent changes in the "),lr=a(Go,"CODE",{});var vm=n(lr);Kh=r(vm,"datasets"),vm.forEach(o),Qh=r(Go,`
library.`),Go.forEach(o),q.forEach(o),Vh=h(k),c=a(k,"LI",{});var p=n(c);ar=a(p,"P",{});var wm=n(ar);Zh=r(wm,"Develop the features on your branch."),wm.forEach(o),Xh=h(p),nr=a(p,"P",{});var bm=n(nr);eu=r(bm,`As you work on the features, you should make sure that the test suite
passes. You should run the tests impacted by your changes like this:`),bm.forEach(o),tu=h(p),y(mt.$$.fragment,p),ou=h(p),ir=a(p,"P",{});var $m=n(ir);su=r($m,`You can also run the full suite with the following command, but it takes
a beefy machine to produce a result in a decent amount of time now that
Transformers has grown a lot. Here is the command for it:`),$m.forEach(o),ru=h(p),y(yt.$$.fragment,p),lu=h(p),Eo=a(p,"P",{});var Lc=n(Eo);au=r(Lc,`For more information about tests, check out the
`),gt=a(Lc,"A",{href:!0,rel:!0});var _m=n(gt);nu=r(_m,"dedicated documentation"),_m.forEach(o),Lc.forEach(o),iu=h(p),ue=a(p,"P",{});var Mo=n(ue);hu=r(Mo,"\u{1F917} Transformers relies on "),hr=a(Mo,"CODE",{});var Em=n(hr);uu=r(Em,"black"),Em.forEach(o),fu=r(Mo," and "),ur=a(Mo,"CODE",{});var km=n(ur);du=r(km,"isort"),km.forEach(o),cu=r(Mo,` to format its source code
consistently. After you make changes, apply automatic style corrections and code verifications
that can\u2019t be automated in one go with:`),Mo.forEach(o),pu=h(p),y(vt.$$.fragment,p),mu=h(p),fr=a(p,"P",{});var Pm=n(fr);yu=r(Pm,"This target is also optimized to only work with files modified by the PR you\u2019re working on."),Pm.forEach(o),gu=h(p),dr=a(p,"P",{});var Im=n(dr);vu=r(Im,`If you prefer to run the checks one after the other, the following command apply the
style corrections:`),Im.forEach(o),wu=h(p),y(wt.$$.fragment,p),bu=h(p),bt=a(p,"P",{});var Ka=n(bt);$u=r(Ka,"\u{1F917} Transformers also uses "),cr=a(Ka,"CODE",{});var Om=n(cr);_u=r(Om,"flake8"),Om.forEach(o),Eu=r(Ka,` and a few custom scripts to check for coding mistakes. Quality
control runs in CI, however you can also run the same checks with:`),Ka.forEach(o),ku=h(p),y($t.$$.fragment,p),Pu=h(p),pr=a(p,"P",{});var Sm=n(pr);Iu=r(Sm,`Finally we have a lot of scripts that check we didn\u2019t forget to update
some files when adding a new model, that you can run with`),Sm.forEach(o),Ou=h(p),y(_t.$$.fragment,p),Su=h(p),ko=a(p,"P",{});var Ac=n(ko);Tu=r(Ac,`To learn more about those checks and how to fix any issue with them, check out the
`),Et=a(Ac,"A",{href:!0,rel:!0});var Tm=n(Et);Cu=r(Tm,"documentation"),Tm.forEach(o),Ac.forEach(o),xu=h(p),kt=a(p,"P",{});var Qa=n(kt);Lu=r(Qa,"If you\u2019re modifying documents under "),mr=a(Qa,"CODE",{});var Cm=n(mr);Au=r(Cm,"docs/source"),Cm.forEach(o),Du=r(Qa,`, make sure to validate that
they can still be built. This check also runs in CI. To run a local check
make sure you have installed the documentation builder requirements. First you will need to clone the
repository containing our tools to build the documentation:`),Qa.forEach(o),qu=h(p),y(Pt.$$.fragment,p),Ru=h(p),yr=a(p,"P",{});var xm=n(yr);Nu=r(xm,"Then, make sure you have all the dependencies to be able to build the doc with:"),xm.forEach(o),Wu=h(p),y(It.$$.fragment,p),Fu=h(p),gr=a(p,"P",{});var Lm=n(gr);Hu=r(Lm,"Finally run the following command from the root of the repository:"),Lm.forEach(o),ju=h(p),y(Ot.$$.fragment,p),Gu=h(p),St=a(p,"P",{});var Va=n(St);Mu=r(Va,"This will build the documentation in the "),vr=a(Va,"CODE",{});var Am=n(vr);Uu=r(Am,"~/tmp/test-build"),Am.forEach(o),Yu=r(Va,` folder where you can inspect the generated
Markdown files with your favorite editor. You won\u2019t be able to see the final rendering on the website
before your PR is merged, we are actively working on adding a tool for this.`),Va.forEach(o),Bu=h(p),fe=a(p,"P",{});var Uo=n(fe);zu=r(Uo,"Once you\u2019re happy with your changes, add changed files using "),wr=a(Uo,"CODE",{});var Dm=n(wr);Ju=r(Dm,"git add"),Dm.forEach(o),Ku=r(Uo,` and
make a commit with `),br=a(Uo,"CODE",{});var qm=n(br);Qu=r(qm,"git commit"),qm.forEach(o),Vu=r(Uo," to record your changes locally:"),Uo.forEach(o),Zu=h(p),y(Tt.$$.fragment,p),Xu=h(p),Ct=a(p,"P",{});var Za=n(Ct);ef=r(Za,"Please write "),xt=a(Za,"A",{href:!0,rel:!0});var Rm=n(xt);tf=r(Rm,`good commit
messages`),Rm.forEach(o),of=r(Za,"."),Za.forEach(o),sf=h(p),$r=a(p,"P",{});var Nm=n($r);rf=r(Nm,`It is a good idea to sync your copy of the code with the original
repository regularly. This way you can quickly account for changes:`),Nm.forEach(o),lf=h(p),y(Lt.$$.fragment,p),af=h(p),_r=a(p,"P",{});var Wm=n(_r);nf=r(Wm,"Push the changes to your account using:"),Wm.forEach(o),hf=h(p),y(At.$$.fragment,p),p.forEach(o),uf=h(k),Er=a(k,"LI",{});var Fm=n(Er);Dt=a(Fm,"P",{});var Xa=n(Dt);ff=r(Xa,"Once you are satisfied ("),kr=a(Xa,"STRONG",{});var Hm=n(kr);df=r(Hm,"and the checklist below is happy too"),Hm.forEach(o),cf=r(Xa,`), go to the
webpage of your fork on GitHub. Click on \u2018Pull request\u2019 to send your changes
to the project maintainers for review.`),Xa.forEach(o),Fm.forEach(o),pf=h(k),Pr=a(k,"LI",{});var jm=n(Pr);Ir=a(jm,"P",{});var Gm=n(Ir);mf=r(Gm,`It\u2019s ok if maintainers ask you for changes. It happens to core contributors
too! So everyone can see the changes in the Pull request, work in your local
branch and push the changes to your fork. They will automatically appear in
the pull request.`),Gm.forEach(o),jm.forEach(o),k.forEach(o),sa=h(t),de=a(t,"H3",{class:!0});var en=n(de);Te=a(en,"A",{id:!0,class:!0,href:!0});var Mm=n(Te);Or=a(Mm,"SPAN",{});var Um=n(Or);y(qt.$$.fragment,Um),Um.forEach(o),Mm.forEach(o),yf=h(en),Sr=a(en,"SPAN",{});var Ym=n(Sr);gf=r(Ym,"Checklist"),Ym.forEach(o),en.forEach(o),ra=h(t),E=a(t,"OL",{});var O=n(E);Tr=a(O,"LI",{});var Bm=n(Tr);vf=r(Bm,"The title of your pull request should be a summary of its contribution;"),Bm.forEach(o),wf=h(O),Cr=a(O,"LI",{});var zm=n(Cr);bf=r(zm,`If your pull request addresses an issue, please mention the issue number in
the pull request description to make sure they are linked (and people
consulting the issue know you are working on it);`),zm.forEach(o),$f=h(O),Rt=a(O,"LI",{});var tn=n(Rt);_f=r(tn,"To indicate a work in progress please prefix the title with "),xr=a(tn,"CODE",{});var Jm=n(xr);Ef=r(Jm,"[WIP]"),Jm.forEach(o),kf=r(tn,`. These
are useful to avoid duplicated work, and to differentiate it from PRs ready
to be merged;`),tn.forEach(o),Pf=h(O),Lr=a(O,"LI",{});var Km=n(Lr);If=r(Km,"Make sure existing tests pass;"),Km.forEach(o),Of=h(O),Po=a(O,"LI",{});var Dc=n(Po);Sf=r(Dc,"Add high-coverage tests. No quality testing = no merge."),ce=a(Dc,"UL",{});var Yo=n(ce);Nt=a(Yo,"LI",{});var on=n(Nt);Tf=r(on,`If you are adding a new model, make sure that you use
`),Ar=a(on,"CODE",{});var Qm=n(Ar);Cf=r(Qm,"ModelTester.all_model_classes = (MyModel, MyModelWithLMHead,...)"),Qm.forEach(o),xf=r(on,", which triggers the common tests."),on.forEach(o),Lf=h(Yo),pe=a(Yo,"LI",{});var Bo=n(pe);Af=r(Bo,"If you are adding new "),Dr=a(Bo,"CODE",{});var Vm=n(Dr);Df=r(Vm,"@slow"),Vm.forEach(o),qf=r(Bo,` tests, make sure they pass using
`),qr=a(Bo,"CODE",{});var Zm=n(qr);Rf=r(Zm,"RUN_SLOW=1 python -m pytest tests/test_my_new_model.py"),Zm.forEach(o),Nf=r(Bo,"."),Bo.forEach(o),Wf=h(Yo),Wt=a(Yo,"LI",{});var sn=n(Wt);Ff=r(sn,`If you are adding a new tokenizer, write tests, and make sure
`),Rr=a(sn,"CODE",{});var Xm=n(Rr);Hf=r(Xm,"RUN_SLOW=1 python -m pytest tests/test_tokenization_{your_model_name}.py"),Xm.forEach(o),jf=r(sn,` passes.
CircleCI does not run the slow tests, but github actions does every night!`),sn.forEach(o),Yo.forEach(o),Dc.forEach(o),Gf=h(O),Ft=a(O,"LI",{});var rn=n(Ft);Mf=r(rn,"All public methods must have informative docstrings that work nicely with sphinx. See "),Nr=a(rn,"CODE",{});var ey=n(Nr);Uf=r(ey,"modeling_bert.py"),ey.forEach(o),Yf=r(rn,` for an
example.`),rn.forEach(o),Bf=h(O),N=a(O,"LI",{});var He=n(N);zf=r(He,"Due to the rapidly growing repository, it is important to make sure that no files that would significantly weigh down the repository are added. This includes images, videos and other non-text files. We prefer to leverage a hf.co hosted "),Wr=a(He,"CODE",{});var ty=n(Wr);Jf=r(ty,"dataset"),ty.forEach(o),Kf=r(He,` like
the ones hosted on `),Ht=a(He,"A",{href:!0,rel:!0});var oy=n(Ht);Fr=a(oy,"CODE",{});var sy=n(Fr);Qf=r(sy,"hf-internal-testing"),sy.forEach(o),oy.forEach(o),Vf=r(He,` in which to place these files and reference
them by URL. We recommend putting them in the following dataset: `),jt=a(He,"A",{href:!0,rel:!0});var ry=n(jt);Zf=r(ry,"huggingface/documentation-images"),ry.forEach(o),Xf=r(He,`.
If an external contribution, feel free to add the images to your PR and ask a Hugging Face member to migrate your images
to this dataset.`),He.forEach(o),O.forEach(o),la=h(t),Gt=a(t,"P",{});var qc=n(Gt);ed=r(qc,"See more about the checks run on a pull request in our "),Io=a(qc,"A",{href:!0});var ly=n(Io);td=r(ly,"PR guide"),ly.forEach(o),qc.forEach(o),aa=h(t),me=a(t,"H3",{class:!0});var ln=n(me);Ce=a(ln,"A",{id:!0,class:!0,href:!0});var ay=n(Ce);Hr=a(ay,"SPAN",{});var ny=n(Hr);y(Mt.$$.fragment,ny),ny.forEach(o),ay.forEach(o),od=h(ln),jr=a(ln,"SPAN",{});var iy=n(jr);sd=r(iy,"Tests"),iy.forEach(o),ln.forEach(o),na=h(t),M=a(t,"P",{});var zo=n(M);rd=r(zo,`An extensive test suite is included to test the library behavior and several examples. Library tests can be found in
the `),Ut=a(zo,"A",{href:!0,rel:!0});var hy=n(Ut);ld=r(hy,"tests folder"),hy.forEach(o),ad=r(zo,` and examples tests in the
`),Yt=a(zo,"A",{href:!0,rel:!0});var uy=n(Yt);nd=r(uy,"examples folder"),uy.forEach(o),id=r(zo,"."),zo.forEach(o),ia=h(t),L=a(t,"P",{});var je=n(L);hd=r(je,"We like "),Gr=a(je,"CODE",{});var fy=n(Gr);ud=r(fy,"pytest"),fy.forEach(o),fd=r(je," and "),Mr=a(je,"CODE",{});var dy=n(Mr);dd=r(dy,"pytest-xdist"),dy.forEach(o),cd=r(je,` because it\u2019s faster. From the root of the
repository, here\u2019s how to run tests with `),Ur=a(je,"CODE",{});var cy=n(Ur);pd=r(cy,"pytest"),cy.forEach(o),md=r(je," for the library:"),je.forEach(o),ha=h(t),y(Bt.$$.fragment,t),ua=h(t),Oo=a(t,"P",{});var py=n(Oo);yd=r(py,"and for the examples:"),py.forEach(o),fa=h(t),y(zt.$$.fragment,t),da=h(t),A=a(t,"P",{});var Ge=n(A);gd=r(Ge,"In fact, that\u2019s how "),Yr=a(Ge,"CODE",{});var my=n(Yr);vd=r(my,"make test"),my.forEach(o),wd=r(Ge," and "),Br=a(Ge,"CODE",{});var yy=n(Br);bd=r(yy,"make test-examples"),yy.forEach(o),$d=r(Ge," are implemented (sans the "),zr=a(Ge,"CODE",{});var gy=n(zr);_d=r(gy,"pip install"),gy.forEach(o),Ed=r(Ge," line)!"),Ge.forEach(o),ca=h(t),So=a(t,"P",{});var vy=n(So);kd=r(vy,`You can specify a smaller set of tests in order to test only the feature
you\u2019re working on.`),vy.forEach(o),pa=h(t),U=a(t,"P",{});var Jo=n(U);Pd=r(Jo,"By default, slow tests are skipped. Set the "),Jr=a(Jo,"CODE",{});var wy=n(Jr);Id=r(wy,"RUN_SLOW"),wy.forEach(o),Od=r(Jo,` environment variable to
`),Kr=a(Jo,"CODE",{});var by=n(Kr);Sd=r(by,"yes"),by.forEach(o),Td=r(Jo,` to run them. This will download many gigabytes of models \u2014 make sure you
have enough disk space and a good Internet connection, or a lot of patience!`),Jo.forEach(o),ma=h(t),y(Jt.$$.fragment,t),ya=h(t),Y=a(t,"P",{});var Ko=n(Y);Cd=r(Ko,"Likewise, set the "),Qr=a(Ko,"CODE",{});var $y=n(Qr);xd=r($y,"RUN_CUSTOM_TOKENIZERS"),$y.forEach(o),Ld=r(Ko," environment variable to "),Vr=a(Ko,"CODE",{});var _y=n(Vr);Ad=r(_y,"yes"),_y.forEach(o),Dd=r(Ko,` to run
tests for custom tokenizers, which don\u2019t run by default either.`),Ko.forEach(o),ga=h(t),B=a(t,"P",{});var Qo=n(B);qd=r(Qo,"\u{1F917} Transformers uses "),Zr=a(Qo,"CODE",{});var Ey=n(Zr);Rd=r(Ey,"pytest"),Ey.forEach(o),Nd=r(Qo,` as a test runner only. It doesn\u2019t use any
`),Xr=a(Qo,"CODE",{});var ky=n(Xr);Wd=r(ky,"pytest"),ky.forEach(o),Fd=r(Qo,"-specific features in the test suite itself."),Qo.forEach(o),va=h(t),z=a(t,"P",{});var Vo=n(z);Hd=r(Vo,"This means "),el=a(Vo,"CODE",{});var Py=n(el);jd=r(Py,"unittest"),Py.forEach(o),Gd=r(Vo,` is fully supported. Here\u2019s how to run tests with
`),tl=a(Vo,"CODE",{});var Iy=n(tl);Md=r(Iy,"unittest"),Iy.forEach(o),Ud=r(Vo,":"),Vo.forEach(o),wa=h(t),y(Kt.$$.fragment,t),ba=h(t),ye=a(t,"H3",{class:!0});var an=n(ye);xe=a(an,"A",{id:!0,class:!0,href:!0});var Oy=n(xe);ol=a(Oy,"SPAN",{});var Sy=n(ol);y(Qt.$$.fragment,Sy),Sy.forEach(o),Oy.forEach(o),Yd=h(an),sl=a(an,"SPAN",{});var Ty=n(sl);Bd=r(Ty,"Style guide"),Ty.forEach(o),an.forEach(o),$a=h(t),J=a(t,"P",{});var Zo=n(J);zd=r(Zo,"For documentation strings, \u{1F917} Transformers follows the "),Vt=a(Zo,"A",{href:!0,rel:!0});var Cy=n(Vt);Jd=r(Cy,"google style"),Cy.forEach(o),Kd=r(Zo,`.
Check our `),Zt=a(Zo,"A",{href:!0,rel:!0});var xy=n(Zt);Qd=r(xy,"documentation writing guide"),xy.forEach(o),Vd=r(Zo,`
for more information.`),Zo.forEach(o),_a=h(t),To=a(t,"P",{});var Ly=n(To);Xt=a(Ly,"STRONG",{});var nn=n(Xt);Zd=r(nn,"This guide was heavily inspired by the awesome "),eo=a(nn,"A",{href:!0,rel:!0});var Ay=n(eo);Xd=r(Ay,"scikit-learn guide to contributing"),Ay.forEach(o),ec=r(nn,"."),nn.forEach(o),Ly.forEach(o),Ea=h(t),ge=a(t,"H3",{class:!0});var hn=n(ge);Le=a(hn,"A",{id:!0,class:!0,href:!0});var Dy=n(Le);rl=a(Dy,"SPAN",{});var qy=n(rl);y(to.$$.fragment,qy),qy.forEach(o),Dy.forEach(o),tc=h(hn),ll=a(hn,"SPAN",{});var Ry=n(ll);oc=r(Ry,"Develop on Windows"),Ry.forEach(o),hn.forEach(o),ka=h(t),K=a(t,"P",{});var Xo=n(K);sc=r(Xo,"On windows, you need to configure git to transform Windows "),al=a(Xo,"CODE",{});var Ny=n(al);rc=r(Ny,"CRLF"),Ny.forEach(o),lc=r(Xo," line endings to Linux "),nl=a(Xo,"CODE",{});var Wy=n(nl);ac=r(Wy,"LF"),Wy.forEach(o),nc=r(Xo," line endings:"),Xo.forEach(o),Pa=h(t),Co=a(t,"P",{});var Fy=n(Co);il=a(Fy,"CODE",{});var Hy=n(il);ic=r(Hy,"git config core.autocrlf input"),Hy.forEach(o),Fy.forEach(o),Ia=h(t),xo=a(t,"P",{});var jy=n(xo);hc=r(jy,"One way one can run the make command on Window is to pass by MSYS2:"),jy.forEach(o),Oa=h(t),D=a(t,"OL",{});var Me=n(D);Lo=a(Me,"LI",{});var Rc=n(Lo);oo=a(Rc,"A",{href:!0,rel:!0});var Gy=n(oo);uc=r(Gy,"Download MSYS2"),Gy.forEach(o),fc=r(Rc,", we assume to have it installed in C:\\msys64"),Rc.forEach(o),dc=h(Me),hl=a(Me,"LI",{});var My=n(hl);cc=r(My,"Open the command line C:\\msys64\\msys2.exe (it should be available from the start menu)"),My.forEach(o),pc=h(Me),Ae=a(Me,"LI",{});var wl=n(Ae);mc=r(wl,"Run in the shell: "),ul=a(wl,"CODE",{});var Uy=n(ul);yc=r(Uy,"pacman -Syu"),Uy.forEach(o),gc=r(wl," and install make with "),fl=a(wl,"CODE",{});var Yy=n(fl);vc=r(Yy,"pacman -S make"),Yy.forEach(o),wl.forEach(o),wc=h(Me),so=a(Me,"LI",{});var un=n(so);bc=r(un,"Add "),dl=a(un,"CODE",{});var By=n(dl);$c=r(By,"C:\\msys64\\usr\\bin"),By.forEach(o),_c=r(un," to your PATH environment variable."),un.forEach(o),Me.forEach(o),Sa=h(t),De=a(t,"P",{});var fn=n(De);Ec=r(fn,"You can now use "),cl=a(fn,"CODE",{});var zy=n(cl);kc=r(zy,"make"),zy.forEach(o),Pc=r(fn," from any terminal (Powershell, cmd.exe, etc) \u{1F389}"),fn.forEach(o),Ta=h(t),ve=a(t,"H3",{class:!0});var dn=n(ve);qe=a(dn,"A",{id:!0,class:!0,href:!0});var Jy=n(qe);pl=a(Jy,"SPAN",{});var Ky=n(pl);y(ro.$$.fragment,Ky),Ky.forEach(o),Jy.forEach(o),Ic=h(dn),ml=a(dn,"SPAN",{});var Qy=n(ml);Oc=r(Qy,"Syncing forked main with upstream (HuggingFace) main"),Qy.forEach(o),dn.forEach(o),Ca=h(t),Ao=a(t,"P",{});var Vy=n(Ao);Sc=r(Vy,`To avoid pinging the upstream repository which adds reference notes to each upstream PR and sends unnecessary notifications to the developers involved in these PRs,
when syncing the main branch of a forked repository, please, follow these steps:`),Vy.forEach(o),xa=h(t),Re=a(t,"OL",{});var cn=n(Re);yl=a(cn,"LI",{});var Zy=n(yl);Tc=r(Zy,"When possible, avoid syncing with the upstream using a branch and PR on the forked repository. Instead merge directly into the forked main."),Zy.forEach(o),Cc=h(cn),gl=a(cn,"LI",{});var Xy=n(gl);xc=r(Xy,"If a PR is absolutely necessary, use the following steps after checking out your branch:"),Xy.forEach(o),cn.forEach(o),La=h(t),y(lo.$$.fragment,t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(ng)),d(we,"id","how-to-contribute-to-transformers"),d(we,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(we,"href","#how-to-contribute-to-transformers"),d(X,"class","relative group"),d(Ye,"href","https://github.com/huggingface/transformers/blob/main/CODE_OF_CONDUCT.md"),d(Ye,"rel","nofollow"),d($e,"id","you-can-contribute-in-so-many-ways"),d($e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($e,"href","#you-can-contribute-in-so-many-ways"),d(ee,"class","relative group"),d(ze,"href","https://github.com/huggingface/transformers/contribute"),d(ze,"rel","nofollow"),d(_e,"id","submitting-a-new-issue-or-feature-request"),d(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_e,"href","#submitting-a-new-issue-or-feature-request"),d(te,"class","relative group"),d(Ee,"id","did-you-find-a-bug"),d(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ee,"href","#did-you-find-a-bug"),d(oe,"class","relative group"),d(Pe,"id","do-you-want-to-implement-a-new-model"),d(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pe,"href","#do-you-want-to-implement-a-new-model"),d(se,"class","relative group"),d(et,"href","https://github.com/huggingface/transformers/tree/main/templates"),d(et,"rel","nofollow"),d(Ie,"id","do-you-want-a-new-feature-that-is-not-a-model"),d(Ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ie,"href","#do-you-want-a-new-feature-that-is-not-a-model"),d(re,"class","relative group"),d(T,"start","2"),d(rt,"href","https://github.com/huggingface/transformers/tree/main/templates"),d(rt,"rel","nofollow"),d(Oe,"id","start-contributing-pull-requests"),d(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Oe,"href","#start-contributing-pull-requests"),d(le,"class","relative group"),d(at,"href","https://git-scm.com/book/en/v2"),d(at,"rel","nofollow"),d(it,"href","https://github.com/huggingface/transformers"),d(it,"rel","nofollow"),d(gt,"href","https://huggingface.co/docs/transformers/testing"),d(gt,"rel","nofollow"),d(Et,"href","https://huggingface.co/docs/transformers/pr_checks"),d(Et,"rel","nofollow"),d(xt,"href","https://chris.beams.io/posts/git-commit/"),d(xt,"rel","nofollow"),d(Te,"id","checklist"),d(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Te,"href","#checklist"),d(de,"class","relative group"),d(Ht,"href","https://huggingface.co/hf-internal-testing"),d(Ht,"rel","nofollow"),d(jt,"href","https://huggingface.co/datasets/huggingface/documentation-images"),d(jt,"rel","nofollow"),d(Io,"href","pr_checks"),d(Ce,"id","tests"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#tests"),d(me,"class","relative group"),d(Ut,"href","https://github.com/huggingface/transformers/tree/main/tests"),d(Ut,"rel","nofollow"),d(Yt,"href","https://github.com/huggingface/transformers/tree/main/examples"),d(Yt,"rel","nofollow"),d(xe,"id","style-guide"),d(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xe,"href","#style-guide"),d(ye,"class","relative group"),d(Vt,"href","https://google.github.io/styleguide/pyguide.html"),d(Vt,"rel","nofollow"),d(Zt,"href","https://github.com/huggingface/transformers/tree/main/docs#writing-documentation---specification"),d(Zt,"rel","nofollow"),d(eo,"href","https://github.com/scikit-learn/scikit-learn/blob/main/CONTRIBUTING.md"),d(eo,"rel","nofollow"),d(Le,"id","develop-on-windows"),d(Le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Le,"href","#develop-on-windows"),d(ge,"class","relative group"),d(oo,"href","https://www.msys2.org/"),d(oo,"rel","nofollow"),d(qe,"id","syncing-forked-main-with-upstream-huggingface-main"),d(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qe,"href","#syncing-forked-main-with-upstream-huggingface-main"),d(ve,"class","relative group")},m(t,u){e(document.head,Z),f(t,bl,u),f(t,X,u),e(X,we),e(we,es),g(Ue,es,null),e(X,pn),e(X,ts),e(ts,mn),f(t,$l,u),f(t,ao,u),e(ao,yn),f(t,_l,u),f(t,no,u),e(no,gn),f(t,El,u),f(t,be,u),e(be,vn),e(be,Ye),e(Ye,wn),e(be,bn),f(t,kl,u),f(t,ee,u),e(ee,$e),e($e,os),g(Be,os,null),e(ee,$n),e(ee,ss),e(ss,_n),f(t,Pl,u),f(t,io,u),e(io,En),f(t,Il,u),f(t,C,u),e(C,rs),e(rs,kn),e(C,Pn),e(C,ls),e(ls,In),e(C,On),e(C,as),e(as,Sn),e(C,Tn),e(C,ns),e(ns,Cn),f(t,Ol,u),f(t,x,u),e(x,xn),e(x,ze),e(ze,Ln),e(x,An),e(x,is),e(is,Dn),e(x,qn),e(x,hs),e(hs,Rn),e(x,Nn),f(t,Sl,u),f(t,ho,u),e(ho,us),e(us,Wn),f(t,Tl,u),f(t,te,u),e(te,_e),e(_e,fs),g(Je,fs,null),e(te,Fn),e(te,ds),e(ds,Hn),f(t,Cl,u),f(t,uo,u),e(uo,jn),f(t,xl,u),f(t,oe,u),e(oe,Ee),e(Ee,cs),g(Ke,cs,null),e(oe,Gn),e(oe,ps),e(ps,Mn),f(t,Ll,u),f(t,fo,u),e(fo,Un),f(t,Al,u),f(t,ke,u),e(ke,Yn),e(ke,ms),e(ms,Bn),e(ke,zn),f(t,Dl,u),f(t,co,u),e(co,Jn),f(t,ql,u),f(t,W,u),e(W,S),e(S,Kn),e(S,ys),e(ys,Qn),e(S,Vn),e(S,gs),e(gs,Zn),e(S,Xn),e(S,vs),e(vs,ei),e(S,ti),e(S,ws),e(ws,oi),e(S,si),e(W,ri),e(W,bs),e(bs,li),e(W,ai),e(W,Qe),e(Qe,ni),e(Qe,$s),e($s,ii),e(Qe,hi),f(t,Rl,u),f(t,po,u),e(po,ui),f(t,Nl,u),g(Ve,t,u),f(t,Wl,u),f(t,mo,u),e(mo,fi),f(t,Fl,u),g(Ze,t,u),f(t,Hl,u),f(t,se,u),e(se,Pe),e(Pe,_s),g(Xe,_s,null),e(se,di),e(se,Es),e(Es,ci),f(t,jl,u),f(t,yo,u),e(yo,pi),f(t,Gl,u),f(t,F,u),e(F,ks),e(ks,mi),e(F,yi),e(F,Ps),e(Ps,gi),e(F,vi),e(F,Is),e(Is,wi),f(t,Ml,u),f(t,go,u),e(go,bi),f(t,Ul,u),f(t,H,u),e(H,$i),e(H,Os),e(Os,_i),e(H,Ei),e(H,et),e(et,Ss),e(Ss,ki),e(H,Pi),f(t,Yl,u),f(t,re,u),e(re,Ie),e(Ie,Ts),g(tt,Ts,null),e(re,Ii),e(re,Cs),e(Cs,Oi),f(t,Bl,u),f(t,vo,u),e(vo,Si),f(t,zl,u),f(t,wo,u),e(wo,xs),e(xs,Ti),f(t,Jl,u),f(t,j,u),e(j,Ls),e(Ls,Ci),e(j,xi),e(j,As),e(As,Li),e(j,Ai),e(j,Ds),e(Ds,Di),f(t,Kl,u),f(t,T,u),e(T,ot),e(ot,qi),e(ot,qs),e(qs,Ri),e(ot,Ni),e(T,Wi),e(T,st),e(st,Fi),e(st,Rs),e(Rs,Hi),e(st,ji),e(T,Gi),e(T,Ns),e(Ns,Mi),e(T,Ui),e(T,Ws),e(Ws,Yi),f(t,Ql,u),f(t,bo,u),e(bo,Bi),f(t,Vl,u),f(t,G,u),e(G,zi),e(G,Fs),e(Fs,Ji),e(G,Ki),e(G,rt),e(rt,Hs),e(Hs,Qi),e(G,Vi),f(t,Zl,u),f(t,le,u),e(le,Oe),e(Oe,js),g(lt,js,null),e(le,Zi),e(le,Gs),e(Gs,Xi),f(t,Xl,u),f(t,$o,u),e($o,eh),f(t,ea,u),f(t,I,u),e(I,th),e(I,Ms),e(Ms,oh),e(I,sh),e(I,Us),e(Us,rh),e(I,lh),e(I,Ys),e(Ys,ah),e(I,nh),e(I,at),e(at,ih),e(I,hh),f(t,ta,u),f(t,_o,u),e(_o,uh),f(t,oa,u),f(t,_,u),e(_,Bs),e(Bs,ae),e(ae,fh),e(ae,zs),e(zs,dh),e(ae,ch),e(ae,Js),e(Js,ph),e(ae,mh),e(_,yh),e(_,Ks),e(Ks,nt),e(nt,gh),e(nt,it),e(it,vh),e(nt,wh),e(_,bh),e(_,ht),e(ht,Qs),e(Qs,$h),e(ht,_h),g(ut,ht,null),e(_,Eh),e(_,ne),e(ne,Vs),e(Vs,kh),e(ne,Ph),g(ft,ne,null),e(ne,Ih),e(ne,Se),e(Se,Zs),e(Zs,Oh),e(Se,Sh),e(Se,Xs),e(Xs,Th),e(Se,Ch),e(_,xh),e(_,P),e(P,er),e(er,Lh),e(P,Ah),g(dt,P,null),e(P,Dh),e(P,ie),e(ie,qh),e(ie,tr),e(tr,Rh),e(ie,Nh),e(ie,or),e(or,Wh),e(ie,Fh),e(P,Hh),e(P,ct),e(ct,jh),e(ct,sr),e(sr,Gh),e(ct,Mh),e(P,Uh),g(pt,P,null),e(P,Yh),e(P,he),e(he,Bh),e(he,rr),e(rr,zh),e(he,Jh),e(he,lr),e(lr,Kh),e(he,Qh),e(_,Vh),e(_,c),e(c,ar),e(ar,Zh),e(c,Xh),e(c,nr),e(nr,eu),e(c,tu),g(mt,c,null),e(c,ou),e(c,ir),e(ir,su),e(c,ru),g(yt,c,null),e(c,lu),e(c,Eo),e(Eo,au),e(Eo,gt),e(gt,nu),e(c,iu),e(c,ue),e(ue,hu),e(ue,hr),e(hr,uu),e(ue,fu),e(ue,ur),e(ur,du),e(ue,cu),e(c,pu),g(vt,c,null),e(c,mu),e(c,fr),e(fr,yu),e(c,gu),e(c,dr),e(dr,vu),e(c,wu),g(wt,c,null),e(c,bu),e(c,bt),e(bt,$u),e(bt,cr),e(cr,_u),e(bt,Eu),e(c,ku),g($t,c,null),e(c,Pu),e(c,pr),e(pr,Iu),e(c,Ou),g(_t,c,null),e(c,Su),e(c,ko),e(ko,Tu),e(ko,Et),e(Et,Cu),e(c,xu),e(c,kt),e(kt,Lu),e(kt,mr),e(mr,Au),e(kt,Du),e(c,qu),g(Pt,c,null),e(c,Ru),e(c,yr),e(yr,Nu),e(c,Wu),g(It,c,null),e(c,Fu),e(c,gr),e(gr,Hu),e(c,ju),g(Ot,c,null),e(c,Gu),e(c,St),e(St,Mu),e(St,vr),e(vr,Uu),e(St,Yu),e(c,Bu),e(c,fe),e(fe,zu),e(fe,wr),e(wr,Ju),e(fe,Ku),e(fe,br),e(br,Qu),e(fe,Vu),e(c,Zu),g(Tt,c,null),e(c,Xu),e(c,Ct),e(Ct,ef),e(Ct,xt),e(xt,tf),e(Ct,of),e(c,sf),e(c,$r),e($r,rf),e(c,lf),g(Lt,c,null),e(c,af),e(c,_r),e(_r,nf),e(c,hf),g(At,c,null),e(_,uf),e(_,Er),e(Er,Dt),e(Dt,ff),e(Dt,kr),e(kr,df),e(Dt,cf),e(_,pf),e(_,Pr),e(Pr,Ir),e(Ir,mf),f(t,sa,u),f(t,de,u),e(de,Te),e(Te,Or),g(qt,Or,null),e(de,yf),e(de,Sr),e(Sr,gf),f(t,ra,u),f(t,E,u),e(E,Tr),e(Tr,vf),e(E,wf),e(E,Cr),e(Cr,bf),e(E,$f),e(E,Rt),e(Rt,_f),e(Rt,xr),e(xr,Ef),e(Rt,kf),e(E,Pf),e(E,Lr),e(Lr,If),e(E,Of),e(E,Po),e(Po,Sf),e(Po,ce),e(ce,Nt),e(Nt,Tf),e(Nt,Ar),e(Ar,Cf),e(Nt,xf),e(ce,Lf),e(ce,pe),e(pe,Af),e(pe,Dr),e(Dr,Df),e(pe,qf),e(pe,qr),e(qr,Rf),e(pe,Nf),e(ce,Wf),e(ce,Wt),e(Wt,Ff),e(Wt,Rr),e(Rr,Hf),e(Wt,jf),e(E,Gf),e(E,Ft),e(Ft,Mf),e(Ft,Nr),e(Nr,Uf),e(Ft,Yf),e(E,Bf),e(E,N),e(N,zf),e(N,Wr),e(Wr,Jf),e(N,Kf),e(N,Ht),e(Ht,Fr),e(Fr,Qf),e(N,Vf),e(N,jt),e(jt,Zf),e(N,Xf),f(t,la,u),f(t,Gt,u),e(Gt,ed),e(Gt,Io),e(Io,td),f(t,aa,u),f(t,me,u),e(me,Ce),e(Ce,Hr),g(Mt,Hr,null),e(me,od),e(me,jr),e(jr,sd),f(t,na,u),f(t,M,u),e(M,rd),e(M,Ut),e(Ut,ld),e(M,ad),e(M,Yt),e(Yt,nd),e(M,id),f(t,ia,u),f(t,L,u),e(L,hd),e(L,Gr),e(Gr,ud),e(L,fd),e(L,Mr),e(Mr,dd),e(L,cd),e(L,Ur),e(Ur,pd),e(L,md),f(t,ha,u),g(Bt,t,u),f(t,ua,u),f(t,Oo,u),e(Oo,yd),f(t,fa,u),g(zt,t,u),f(t,da,u),f(t,A,u),e(A,gd),e(A,Yr),e(Yr,vd),e(A,wd),e(A,Br),e(Br,bd),e(A,$d),e(A,zr),e(zr,_d),e(A,Ed),f(t,ca,u),f(t,So,u),e(So,kd),f(t,pa,u),f(t,U,u),e(U,Pd),e(U,Jr),e(Jr,Id),e(U,Od),e(U,Kr),e(Kr,Sd),e(U,Td),f(t,ma,u),g(Jt,t,u),f(t,ya,u),f(t,Y,u),e(Y,Cd),e(Y,Qr),e(Qr,xd),e(Y,Ld),e(Y,Vr),e(Vr,Ad),e(Y,Dd),f(t,ga,u),f(t,B,u),e(B,qd),e(B,Zr),e(Zr,Rd),e(B,Nd),e(B,Xr),e(Xr,Wd),e(B,Fd),f(t,va,u),f(t,z,u),e(z,Hd),e(z,el),e(el,jd),e(z,Gd),e(z,tl),e(tl,Md),e(z,Ud),f(t,wa,u),g(Kt,t,u),f(t,ba,u),f(t,ye,u),e(ye,xe),e(xe,ol),g(Qt,ol,null),e(ye,Yd),e(ye,sl),e(sl,Bd),f(t,$a,u),f(t,J,u),e(J,zd),e(J,Vt),e(Vt,Jd),e(J,Kd),e(J,Zt),e(Zt,Qd),e(J,Vd),f(t,_a,u),f(t,To,u),e(To,Xt),e(Xt,Zd),e(Xt,eo),e(eo,Xd),e(Xt,ec),f(t,Ea,u),f(t,ge,u),e(ge,Le),e(Le,rl),g(to,rl,null),e(ge,tc),e(ge,ll),e(ll,oc),f(t,ka,u),f(t,K,u),e(K,sc),e(K,al),e(al,rc),e(K,lc),e(K,nl),e(nl,ac),e(K,nc),f(t,Pa,u),f(t,Co,u),e(Co,il),e(il,ic),f(t,Ia,u),f(t,xo,u),e(xo,hc),f(t,Oa,u),f(t,D,u),e(D,Lo),e(Lo,oo),e(oo,uc),e(Lo,fc),e(D,dc),e(D,hl),e(hl,cc),e(D,pc),e(D,Ae),e(Ae,mc),e(Ae,ul),e(ul,yc),e(Ae,gc),e(Ae,fl),e(fl,vc),e(D,wc),e(D,so),e(so,bc),e(so,dl),e(dl,$c),e(so,_c),f(t,Sa,u),f(t,De,u),e(De,Ec),e(De,cl),e(cl,kc),e(De,Pc),f(t,Ta,u),f(t,ve,u),e(ve,qe),e(qe,pl),g(ro,pl,null),e(ve,Ic),e(ve,ml),e(ml,Oc),f(t,Ca,u),f(t,Ao,u),e(Ao,Sc),f(t,xa,u),f(t,Re,u),e(Re,yl),e(yl,Tc),e(Re,Cc),e(Re,gl),e(gl,xc),f(t,La,u),g(lo,t,u),Aa=!0},p:rg,i(t){Aa||(v(Ue.$$.fragment,t),v(Be.$$.fragment,t),v(Je.$$.fragment,t),v(Ke.$$.fragment,t),v(Ve.$$.fragment,t),v(Ze.$$.fragment,t),v(Xe.$$.fragment,t),v(tt.$$.fragment,t),v(lt.$$.fragment,t),v(ut.$$.fragment,t),v(ft.$$.fragment,t),v(dt.$$.fragment,t),v(pt.$$.fragment,t),v(mt.$$.fragment,t),v(yt.$$.fragment,t),v(vt.$$.fragment,t),v(wt.$$.fragment,t),v($t.$$.fragment,t),v(_t.$$.fragment,t),v(Pt.$$.fragment,t),v(It.$$.fragment,t),v(Ot.$$.fragment,t),v(Tt.$$.fragment,t),v(Lt.$$.fragment,t),v(At.$$.fragment,t),v(qt.$$.fragment,t),v(Mt.$$.fragment,t),v(Bt.$$.fragment,t),v(zt.$$.fragment,t),v(Jt.$$.fragment,t),v(Kt.$$.fragment,t),v(Qt.$$.fragment,t),v(to.$$.fragment,t),v(ro.$$.fragment,t),v(lo.$$.fragment,t),Aa=!0)},o(t){w(Ue.$$.fragment,t),w(Be.$$.fragment,t),w(Je.$$.fragment,t),w(Ke.$$.fragment,t),w(Ve.$$.fragment,t),w(Ze.$$.fragment,t),w(Xe.$$.fragment,t),w(tt.$$.fragment,t),w(lt.$$.fragment,t),w(ut.$$.fragment,t),w(ft.$$.fragment,t),w(dt.$$.fragment,t),w(pt.$$.fragment,t),w(mt.$$.fragment,t),w(yt.$$.fragment,t),w(vt.$$.fragment,t),w(wt.$$.fragment,t),w($t.$$.fragment,t),w(_t.$$.fragment,t),w(Pt.$$.fragment,t),w(It.$$.fragment,t),w(Ot.$$.fragment,t),w(Tt.$$.fragment,t),w(Lt.$$.fragment,t),w(At.$$.fragment,t),w(qt.$$.fragment,t),w(Mt.$$.fragment,t),w(Bt.$$.fragment,t),w(zt.$$.fragment,t),w(Jt.$$.fragment,t),w(Kt.$$.fragment,t),w(Qt.$$.fragment,t),w(to.$$.fragment,t),w(ro.$$.fragment,t),w(lo.$$.fragment,t),Aa=!1},d(t){o(Z),t&&o(bl),t&&o(X),b(Ue),t&&o($l),t&&o(ao),t&&o(_l),t&&o(no),t&&o(El),t&&o(be),t&&o(kl),t&&o(ee),b(Be),t&&o(Pl),t&&o(io),t&&o(Il),t&&o(C),t&&o(Ol),t&&o(x),t&&o(Sl),t&&o(ho),t&&o(Tl),t&&o(te),b(Je),t&&o(Cl),t&&o(uo),t&&o(xl),t&&o(oe),b(Ke),t&&o(Ll),t&&o(fo),t&&o(Al),t&&o(ke),t&&o(Dl),t&&o(co),t&&o(ql),t&&o(W),t&&o(Rl),t&&o(po),t&&o(Nl),b(Ve,t),t&&o(Wl),t&&o(mo),t&&o(Fl),b(Ze,t),t&&o(Hl),t&&o(se),b(Xe),t&&o(jl),t&&o(yo),t&&o(Gl),t&&o(F),t&&o(Ml),t&&o(go),t&&o(Ul),t&&o(H),t&&o(Yl),t&&o(re),b(tt),t&&o(Bl),t&&o(vo),t&&o(zl),t&&o(wo),t&&o(Jl),t&&o(j),t&&o(Kl),t&&o(T),t&&o(Ql),t&&o(bo),t&&o(Vl),t&&o(G),t&&o(Zl),t&&o(le),b(lt),t&&o(Xl),t&&o($o),t&&o(ea),t&&o(I),t&&o(ta),t&&o(_o),t&&o(oa),t&&o(_),b(ut),b(ft),b(dt),b(pt),b(mt),b(yt),b(vt),b(wt),b($t),b(_t),b(Pt),b(It),b(Ot),b(Tt),b(Lt),b(At),t&&o(sa),t&&o(de),b(qt),t&&o(ra),t&&o(E),t&&o(la),t&&o(Gt),t&&o(aa),t&&o(me),b(Mt),t&&o(na),t&&o(M),t&&o(ia),t&&o(L),t&&o(ha),b(Bt,t),t&&o(ua),t&&o(Oo),t&&o(fa),b(zt,t),t&&o(da),t&&o(A),t&&o(ca),t&&o(So),t&&o(pa),t&&o(U),t&&o(ma),b(Jt,t),t&&o(ya),t&&o(Y),t&&o(ga),t&&o(B),t&&o(va),t&&o(z),t&&o(wa),b(Kt,t),t&&o(ba),t&&o(ye),b(Qt),t&&o($a),t&&o(J),t&&o(_a),t&&o(To),t&&o(Ea),t&&o(ge),b(to),t&&o(ka),t&&o(K),t&&o(Pa),t&&o(Co),t&&o(Ia),t&&o(xo),t&&o(Oa),t&&o(D),t&&o(Sa),t&&o(De),t&&o(Ta),t&&o(ve),b(ro),t&&o(Ca),t&&o(Ao),t&&o(xa),t&&o(Re),t&&o(La),b(lo,t)}}}const ng={local:"how-to-contribute-to-transformers",sections:[{local:"you-can-contribute-in-so-many-ways",title:"You can contribute in so many ways!"},{local:"submitting-a-new-issue-or-feature-request",sections:[{local:"did-you-find-a-bug",title:"Did you find a bug?"},{local:"do-you-want-to-implement-a-new-model",title:"Do you want to implement a new model?"},{local:"do-you-want-a-new-feature-that-is-not-a-model",title:"Do you want a new feature (that is not a model)?"}],title:"Submitting a new issue or feature request"},{local:"start-contributing-pull-requests",sections:[{local:"checklist",title:"Checklist"},{local:"tests",title:"Tests"},{local:"style-guide",title:"Style guide"},{local:"develop-on-windows",title:"Develop on Windows"},{local:"syncing-forked-main-with-upstream-huggingface-main",title:"Syncing forked main with upstream (HuggingFace) main"}],title:"Start contributing! (Pull Requests)"}],title:"How to contribute to transformers?"};function ig(Nc){return lg(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class dg extends eg{constructor(Z){super();tg(this,Z,ig,ag,og,{})}}export{dg as default,ng as metadata};
