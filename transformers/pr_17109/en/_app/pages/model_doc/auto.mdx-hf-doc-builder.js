import{S as Jqt,i as Yqt,s as Kqt,e as a,k as l,w as F,t as o,M as Zqt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as ejt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as VJr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function ojt(x){let g,v,p,m,u,d,h,Eo,Ti,yf,at,Mi,Ei,b6,xf,Oe,We,Ci,Sn,v6,Rn,Pn,F6,wi,Bn,T6,Ai,$f,ya;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ti=a("code"),yf=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Mi=a("code"),Ei=o('"new-model"'),b6=o(")."),xf=l(),Oe=a("p"),We=o("Likewise, if your "),Ci=a("code"),Sn=o("NewModel"),v6=o(" is a subclass of "),Rn=a("a"),Pn=o("PreTrainedModel"),F6=o(`, make sure its
`),wi=a("code"),Bn=o("config_class"),T6=o(` attribute is set to the same class you use when registering the model (here
`),Ai=a("code"),$f=o("NewModelConfig"),ya=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Uk=s(p);m=r(Uk,"NewModelConfig"),Uk.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Li=s(d);h=r(Li,"PretrainedConfig"),Li.forEach(t),Eo=r(Ae,`, make sure its
`),Ti=n(Ae,"CODE",{});var Jk=s(Ti);yf=r(Jk,"model_type"),Jk.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Mi=n(Ae,"CODE",{});var Yk=s(Mi);Ei=r(Yk,'"new-model"'),Yk.forEach(t),b6=r(Ae,")."),Ae.forEach(t),xf=i(Qe),Oe=n(Qe,"P",{});var Co=s(Oe);We=r(Co,"Likewise, if your "),Ci=n(Co,"CODE",{});var xa=s(Ci);Sn=r(xa,"NewModel"),xa.forEach(t),v6=r(Co," is a subclass of "),Rn=n(Co,"A",{href:!0});var Kk=s(Rn);Pn=r(Kk,"PreTrainedModel"),Kk.forEach(t),F6=r(Co,`, make sure its
`),wi=n(Co,"CODE",{});var kf=s(wi);Bn=r(kf,"config_class"),kf.forEach(t),T6=r(Co,` attribute is set to the same class you use when registering the model (here
`),Ai=n(Co,"CODE",{});var Zk=s(Ai);$f=r(Zk,"NewModelConfig"),Zk.forEach(t),ya=r(Co,")."),Co.forEach(t),this.h()},h(){c(Rn,"href","/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Eo),e(g,Ti),e(Ti,yf),e(g,at),e(g,Mi),e(Mi,Ei),e(g,b6),b(Qe,xf,Ae),b(Qe,Oe,Ae),e(Oe,We),e(Oe,Ci),e(Ci,Sn),e(Oe,v6),e(Oe,Rn),e(Rn,Pn),e(Oe,F6),e(Oe,wi),e(wi,Bn),e(Oe,T6),e(Oe,Ai),e(Ai,$f),e(Oe,ya)},d(Qe){Qe&&t(g),Qe&&t(xf),Qe&&t(Oe)}}}function rjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ajt(x){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function njt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sjt(x){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function ljt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ijt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function djt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ujt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _jt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ejt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ajt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ljt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $jt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ijt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Njt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Djt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ojt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ujt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Dt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ADt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Dt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ODt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eGt(x){let g,v,p,m,u,d,h,Eo,Ti,yf,at,Mi,Ei,b6,xf,Oe,We,Ci,Sn,v6,Rn,Pn,F6,wi,Bn,T6,Ai,$f,ya,Qe,Ae,Uk,Li,Jk,Yk,Co,xa,Kk,kf,Zk,Aze,fGe,yi,Sf,Kre,M6,Lze,Zre,yze,mGe,In,xze,ete,$ze,kze,ote,Sze,Rze,gGe,E6,hGe,eS,Pze,pGe,Rf,uGe,xi,Pf,rte,C6,Bze,tte,Ize,_Ge,wo,w6,Nze,A6,qze,oS,jze,Dze,Gze,L6,Oze,ate,Vze,Xze,zze,wr,y6,Wze,nte,Qze,Hze,$i,Uze,ste,Jze,Yze,lte,Kze,Zze,eWe,A,Bf,ite,oWe,rWe,rS,tWe,aWe,nWe,If,dte,sWe,lWe,tS,iWe,dWe,cWe,Nf,cte,fWe,mWe,aS,gWe,hWe,pWe,qf,fte,uWe,_We,nS,bWe,vWe,FWe,jf,mte,TWe,MWe,sS,EWe,CWe,wWe,Df,gte,AWe,LWe,lS,yWe,xWe,$We,Gf,hte,kWe,SWe,iS,RWe,PWe,BWe,Of,pte,IWe,NWe,dS,qWe,jWe,DWe,Vf,ute,GWe,OWe,cS,VWe,XWe,zWe,Xf,_te,WWe,QWe,fS,HWe,UWe,JWe,zf,bte,YWe,KWe,mS,ZWe,eQe,oQe,Wf,vte,rQe,tQe,gS,aQe,nQe,sQe,Qf,Fte,lQe,iQe,hS,dQe,cQe,fQe,Hf,Tte,mQe,gQe,pS,hQe,pQe,uQe,Uf,Mte,_Qe,bQe,uS,vQe,FQe,TQe,Jf,Ete,MQe,EQe,_S,CQe,wQe,AQe,Yf,Cte,LQe,yQe,bS,xQe,$Qe,kQe,Kf,wte,SQe,RQe,vS,PQe,BQe,IQe,Zf,Ate,NQe,qQe,FS,jQe,DQe,GQe,em,Lte,OQe,VQe,TS,XQe,zQe,WQe,om,yte,QQe,HQe,MS,UQe,JQe,YQe,rm,xte,KQe,ZQe,ES,eHe,oHe,rHe,tm,$te,tHe,aHe,CS,nHe,sHe,lHe,am,kte,iHe,dHe,wS,cHe,fHe,mHe,nm,Ste,gHe,hHe,AS,pHe,uHe,_He,sm,Rte,bHe,vHe,LS,FHe,THe,MHe,lm,Pte,EHe,CHe,yS,wHe,AHe,LHe,im,Bte,yHe,xHe,xS,$He,kHe,SHe,dm,Ite,RHe,PHe,$S,BHe,IHe,NHe,cm,Nte,qHe,jHe,kS,DHe,GHe,OHe,fm,qte,VHe,XHe,SS,zHe,WHe,QHe,mm,jte,HHe,UHe,RS,JHe,YHe,KHe,gm,Dte,ZHe,eUe,PS,oUe,rUe,tUe,hm,Gte,aUe,nUe,BS,sUe,lUe,iUe,pm,Ote,dUe,cUe,IS,fUe,mUe,gUe,um,Vte,hUe,pUe,NS,uUe,_Ue,bUe,_m,Xte,vUe,FUe,qS,TUe,MUe,EUe,bm,zte,CUe,wUe,jS,AUe,LUe,yUe,vm,Wte,xUe,$Ue,DS,kUe,SUe,RUe,Fm,Qte,PUe,BUe,GS,IUe,NUe,qUe,Tm,Hte,jUe,DUe,OS,GUe,OUe,VUe,Mm,Ute,XUe,zUe,VS,WUe,QUe,HUe,Em,Jte,UUe,JUe,XS,YUe,KUe,ZUe,Cm,Yte,eJe,oJe,zS,rJe,tJe,aJe,wm,Kte,nJe,sJe,WS,lJe,iJe,dJe,Am,Zte,cJe,fJe,QS,mJe,gJe,hJe,Lm,eae,pJe,uJe,HS,_Je,bJe,vJe,ym,oae,FJe,TJe,US,MJe,EJe,CJe,xm,rae,wJe,AJe,JS,LJe,yJe,xJe,$m,tae,$Je,kJe,YS,SJe,RJe,PJe,km,aae,BJe,IJe,KS,NJe,qJe,jJe,Sm,nae,DJe,GJe,ZS,OJe,VJe,XJe,Rm,sae,zJe,WJe,eR,QJe,HJe,UJe,Pm,lae,JJe,YJe,oR,KJe,ZJe,eYe,Bm,iae,oYe,rYe,rR,tYe,aYe,nYe,Im,dae,sYe,lYe,tR,iYe,dYe,cYe,Nm,cae,fYe,mYe,aR,gYe,hYe,pYe,qm,fae,uYe,_Ye,nR,bYe,vYe,FYe,jm,mae,TYe,MYe,sR,EYe,CYe,wYe,Dm,gae,AYe,LYe,lR,yYe,xYe,$Ye,Gm,hae,kYe,SYe,iR,RYe,PYe,BYe,Om,pae,IYe,NYe,dR,qYe,jYe,DYe,Vm,uae,GYe,OYe,cR,VYe,XYe,zYe,Xm,_ae,WYe,QYe,fR,HYe,UYe,JYe,zm,bae,YYe,KYe,mR,ZYe,eKe,oKe,Wm,vae,rKe,tKe,gR,aKe,nKe,sKe,Qm,Fae,lKe,iKe,hR,dKe,cKe,fKe,Hm,Tae,mKe,gKe,pR,hKe,pKe,uKe,Um,Mae,_Ke,bKe,uR,vKe,FKe,TKe,Jm,Eae,MKe,EKe,_R,CKe,wKe,AKe,Ym,Cae,LKe,yKe,bR,xKe,$Ke,kKe,Km,wae,SKe,RKe,vR,PKe,BKe,IKe,Zm,Aae,NKe,qKe,FR,jKe,DKe,GKe,eg,Lae,OKe,VKe,TR,XKe,zKe,WKe,og,yae,QKe,HKe,MR,UKe,JKe,YKe,rg,xae,KKe,ZKe,ER,eZe,oZe,rZe,tg,$ae,tZe,aZe,CR,nZe,sZe,lZe,ag,kae,iZe,dZe,wR,cZe,fZe,mZe,ng,Sae,gZe,hZe,AR,pZe,uZe,_Ze,sg,Rae,bZe,vZe,LR,FZe,TZe,MZe,lg,Pae,EZe,CZe,yR,wZe,AZe,LZe,ig,Bae,yZe,xZe,xR,$Ze,kZe,SZe,dg,Iae,RZe,PZe,$R,BZe,IZe,NZe,cg,Nae,qZe,jZe,kR,DZe,GZe,OZe,fg,qae,VZe,XZe,SR,zZe,WZe,QZe,mg,jae,HZe,UZe,RR,JZe,YZe,KZe,gg,Dae,ZZe,eeo,PR,oeo,reo,teo,hg,Gae,aeo,neo,BR,seo,leo,ieo,pg,Oae,deo,ceo,IR,feo,meo,geo,ug,Vae,heo,peo,NR,ueo,_eo,beo,_g,Xae,veo,Feo,qR,Teo,Meo,Eeo,bg,zae,Ceo,weo,jR,Aeo,Leo,yeo,vg,Wae,xeo,$eo,DR,keo,Seo,Reo,Fg,Qae,Peo,Beo,GR,Ieo,Neo,qeo,Tg,Hae,jeo,Deo,OR,Geo,Oeo,Veo,Mg,Uae,Xeo,zeo,VR,Weo,Qeo,Heo,Eg,Jae,Ueo,Jeo,XR,Yeo,Keo,Zeo,Cg,Yae,eoo,ooo,zR,roo,too,aoo,wg,Kae,noo,soo,WR,loo,ioo,doo,Ag,Zae,coo,foo,QR,moo,goo,hoo,Lg,ene,poo,uoo,HR,_oo,boo,voo,yg,one,Foo,Too,UR,Moo,Eoo,Coo,xg,rne,woo,Aoo,JR,Loo,yoo,xoo,$g,tne,$oo,koo,YR,Soo,Roo,Poo,kg,ane,Boo,Ioo,KR,Noo,qoo,joo,Sg,nne,Doo,Goo,ZR,Ooo,Voo,Xoo,Rg,sne,zoo,Woo,eP,Qoo,Hoo,Uoo,Pg,lne,Joo,Yoo,oP,Koo,Zoo,ero,Bg,ine,oro,rro,rP,tro,aro,nro,Ig,dne,sro,lro,tP,iro,dro,cro,Ng,cne,fro,mro,aP,gro,hro,pro,qg,fne,uro,_ro,nP,bro,vro,Fro,jg,mne,Tro,Mro,sP,Ero,Cro,wro,Dg,gne,Aro,Lro,lP,yro,xro,$ro,Gg,kro,Og,x6,Sro,hne,Rro,bGe,ki,Vg,pne,$6,Pro,une,Bro,vGe,Ao,k6,Iro,S6,Nro,iP,qro,jro,Dro,R6,Gro,_ne,Oro,Vro,Xro,Ar,P6,zro,bne,Wro,Qro,$a,Hro,vne,Uro,Jro,Fne,Yro,Kro,Tne,Zro,eto,oto,k,Nn,Mne,rto,tto,dP,ato,nto,cP,sto,lto,ito,qn,Ene,dto,cto,fP,fto,mto,mP,gto,hto,pto,jn,Cne,uto,_to,gP,bto,vto,hP,Fto,Tto,Mto,Xg,wne,Eto,Cto,pP,wto,Ato,Lto,Dn,Ane,yto,xto,uP,$to,kto,_P,Sto,Rto,Pto,zg,Lne,Bto,Ito,bP,Nto,qto,jto,Wg,yne,Dto,Gto,vP,Oto,Vto,Xto,Qg,xne,zto,Wto,FP,Qto,Hto,Uto,Gn,$ne,Jto,Yto,TP,Kto,Zto,MP,eao,oao,rao,On,kne,tao,aao,EP,nao,sao,CP,lao,iao,dao,Vn,Sne,cao,fao,wP,mao,gao,AP,hao,pao,uao,Hg,Rne,_ao,bao,LP,vao,Fao,Tao,Ug,Pne,Mao,Eao,yP,Cao,wao,Aao,Jg,Bne,Lao,yao,xP,xao,$ao,kao,Xn,Ine,Sao,Rao,$P,Pao,Bao,kP,Iao,Nao,qao,Yg,Nne,jao,Dao,SP,Gao,Oao,Vao,zn,qne,Xao,zao,RP,Wao,Qao,PP,Hao,Uao,Jao,Wn,jne,Yao,Kao,BP,Zao,eno,IP,ono,rno,tno,Qn,Dne,ano,nno,NP,sno,lno,qP,ino,dno,cno,Kg,Gne,fno,mno,jP,gno,hno,pno,Hn,One,uno,_no,DP,bno,vno,GP,Fno,Tno,Mno,Un,Vne,Eno,Cno,OP,wno,Ano,VP,Lno,yno,xno,Jn,Xne,$no,kno,XP,Sno,Rno,zP,Pno,Bno,Ino,Yn,zne,Nno,qno,WP,jno,Dno,QP,Gno,Ono,Vno,Kn,Wne,Xno,zno,HP,Wno,Qno,UP,Hno,Uno,Jno,Zn,Qne,Yno,Kno,JP,Zno,eso,YP,oso,rso,tso,Zg,Hne,aso,nso,KP,sso,lso,iso,es,Une,dso,cso,ZP,fso,mso,eB,gso,hso,pso,eh,Jne,uso,_so,oB,bso,vso,Fso,os,Yne,Tso,Mso,rB,Eso,Cso,tB,wso,Aso,Lso,rs,Kne,yso,xso,aB,$so,kso,nB,Sso,Rso,Pso,ts,Zne,Bso,Iso,sB,Nso,qso,lB,jso,Dso,Gso,oh,ese,Oso,Vso,iB,Xso,zso,Wso,as,ose,Qso,Hso,dB,Uso,Jso,cB,Yso,Kso,Zso,ns,rse,elo,olo,fB,rlo,tlo,mB,alo,nlo,slo,rh,tse,llo,ilo,gB,dlo,clo,flo,ss,ase,mlo,glo,hB,hlo,plo,pB,ulo,_lo,blo,ls,nse,vlo,Flo,uB,Tlo,Mlo,_B,Elo,Clo,wlo,is,sse,Alo,Llo,bB,ylo,xlo,vB,$lo,klo,Slo,ds,lse,Rlo,Plo,FB,Blo,Ilo,TB,Nlo,qlo,jlo,cs,ise,Dlo,Glo,MB,Olo,Vlo,EB,Xlo,zlo,Wlo,fs,dse,Qlo,Hlo,CB,Ulo,Jlo,wB,Ylo,Klo,Zlo,ms,cse,eio,oio,AB,rio,tio,LB,aio,nio,sio,gs,fse,lio,iio,yB,dio,cio,xB,fio,mio,gio,th,mse,hio,pio,$B,uio,_io,bio,hs,gse,vio,Fio,kB,Tio,Mio,SB,Eio,Cio,wio,ah,hse,Aio,Lio,RB,yio,xio,$io,nh,pse,kio,Sio,PB,Rio,Pio,Bio,ps,use,Iio,Nio,BB,qio,jio,IB,Dio,Gio,Oio,us,_se,Vio,Xio,NB,zio,Wio,qB,Qio,Hio,Uio,_s,bse,Jio,Yio,jB,Kio,Zio,DB,edo,odo,rdo,sh,vse,tdo,ado,GB,ndo,sdo,ldo,bs,Fse,ido,ddo,OB,cdo,fdo,VB,mdo,gdo,hdo,vs,Tse,pdo,udo,XB,_do,bdo,zB,vdo,Fdo,Tdo,Fs,Mse,Mdo,Edo,WB,Cdo,wdo,QB,Ado,Ldo,ydo,Ts,Ese,xdo,$do,HB,kdo,Sdo,UB,Rdo,Pdo,Bdo,Ms,Cse,Ido,Ndo,JB,qdo,jdo,YB,Ddo,Gdo,Odo,Es,wse,Vdo,Xdo,KB,zdo,Wdo,ZB,Qdo,Hdo,Udo,lh,Ase,Jdo,Ydo,eI,Kdo,Zdo,eco,Cs,Lse,oco,rco,oI,tco,aco,rI,nco,sco,lco,ih,yse,ico,dco,tI,cco,fco,mco,dh,xse,gco,hco,aI,pco,uco,_co,ch,$se,bco,vco,nI,Fco,Tco,Mco,fh,kse,Eco,Cco,sI,wco,Aco,Lco,ws,Sse,yco,xco,lI,$co,kco,iI,Sco,Rco,Pco,mh,Rse,Bco,Ico,dI,Nco,qco,jco,As,Pse,Dco,Gco,cI,Oco,Vco,fI,Xco,zco,Wco,Ls,Bse,Qco,Hco,mI,Uco,Jco,gI,Yco,Kco,Zco,ys,Ise,efo,ofo,hI,rfo,tfo,pI,afo,nfo,sfo,xs,Nse,lfo,ifo,uI,dfo,cfo,_I,ffo,mfo,gfo,$s,qse,hfo,pfo,bI,ufo,_fo,vI,bfo,vfo,Ffo,ks,jse,Tfo,Mfo,FI,Efo,Cfo,TI,wfo,Afo,Lfo,gh,Dse,yfo,xfo,MI,$fo,kfo,Sfo,hh,Gse,Rfo,Pfo,EI,Bfo,Ifo,Nfo,Ss,Ose,qfo,jfo,CI,Dfo,Gfo,wI,Ofo,Vfo,Xfo,Rs,Vse,zfo,Wfo,AI,Qfo,Hfo,LI,Ufo,Jfo,Yfo,Ps,Xse,Kfo,Zfo,yI,emo,omo,xI,rmo,tmo,amo,ph,zse,nmo,smo,$I,lmo,imo,dmo,uh,Wse,cmo,fmo,kI,mmo,gmo,hmo,_h,Qse,pmo,umo,SI,_mo,bmo,vmo,Bs,Hse,Fmo,Tmo,RI,Mmo,Emo,PI,Cmo,wmo,Amo,Is,Use,Lmo,ymo,BI,xmo,$mo,II,kmo,Smo,Rmo,bh,Jse,Pmo,Bmo,NI,Imo,Nmo,qmo,vh,Yse,jmo,Dmo,qI,Gmo,Omo,Vmo,Fh,Kse,Xmo,zmo,jI,Wmo,Qmo,Hmo,Ns,Zse,Umo,Jmo,DI,Ymo,Kmo,GI,Zmo,ego,ogo,Th,ele,rgo,tgo,OI,ago,ngo,sgo,Mh,ole,lgo,igo,VI,dgo,cgo,fgo,qs,rle,mgo,ggo,XI,hgo,pgo,zI,ugo,_go,bgo,js,tle,vgo,Fgo,WI,Tgo,Mgo,QI,Ego,Cgo,wgo,Ds,ale,Ago,Lgo,HI,ygo,xgo,UI,$go,kgo,Sgo,Gs,nle,Rgo,Pgo,JI,Bgo,Igo,YI,Ngo,qgo,jgo,Eh,Dgo,Ch,B6,Ggo,sle,Ogo,FGe,Si,wh,lle,I6,Vgo,ile,Xgo,TGe,Lo,N6,zgo,q6,Wgo,KI,Qgo,Hgo,Ugo,j6,Jgo,dle,Ygo,Kgo,Zgo,He,D6,eho,cle,oho,rho,ka,tho,fle,aho,nho,mle,sho,lho,gle,iho,dho,cho,Y,Ah,hle,fho,mho,ZI,gho,hho,pho,Lh,ple,uho,_ho,eN,bho,vho,Fho,yh,ule,Tho,Mho,oN,Eho,Cho,who,xh,_le,Aho,Lho,rN,yho,xho,$ho,$h,ble,kho,Sho,tN,Rho,Pho,Bho,kh,vle,Iho,Nho,aN,qho,jho,Dho,Sh,Fle,Gho,Oho,nN,Vho,Xho,zho,Rh,Tle,Who,Qho,sN,Hho,Uho,Jho,Ph,Mle,Yho,Kho,lN,Zho,epo,opo,Bh,Ele,rpo,tpo,iN,apo,npo,spo,Ih,Cle,lpo,ipo,dN,dpo,cpo,fpo,Nh,wle,mpo,gpo,cN,hpo,ppo,upo,qh,Ale,_po,bpo,fN,vpo,Fpo,Tpo,jh,Lle,Mpo,Epo,mN,Cpo,wpo,Apo,Dh,yle,Lpo,ypo,gN,xpo,$po,kpo,Gh,xle,Spo,Rpo,hN,Ppo,Bpo,Ipo,Oh,$le,Npo,qpo,pN,jpo,Dpo,Gpo,Vh,kle,Opo,Vpo,uN,Xpo,zpo,Wpo,Xh,Sle,Qpo,Hpo,_N,Upo,Jpo,Ypo,zh,Rle,Kpo,Zpo,bN,euo,ouo,ruo,Wh,Ple,tuo,auo,vN,nuo,suo,luo,Qh,Ble,iuo,duo,FN,cuo,fuo,muo,Hh,Ile,guo,huo,TN,puo,uuo,_uo,Uh,Nle,buo,vuo,MN,Fuo,Tuo,Muo,Jh,qle,Euo,Cuo,EN,wuo,Auo,Luo,Yh,jle,yuo,xuo,CN,$uo,kuo,Suo,Kh,Dle,Ruo,Puo,wN,Buo,Iuo,Nuo,Zh,Gle,quo,juo,AN,Duo,Guo,Ouo,ep,Ole,Vuo,Xuo,LN,zuo,Wuo,Quo,op,Vle,Huo,Uuo,yN,Juo,Yuo,Kuo,rp,Xle,Zuo,e_o,xN,o_o,r_o,t_o,tp,zle,a_o,n_o,$N,s_o,l_o,i_o,ap,d_o,np,c_o,sp,G6,f_o,Wle,m_o,MGe,Ri,lp,Qle,O6,g_o,Hle,h_o,EGe,yo,V6,p_o,X6,u_o,kN,__o,b_o,v_o,z6,F_o,Ule,T_o,M_o,E_o,Ue,W6,C_o,Jle,w_o,A_o,Pi,L_o,Yle,y_o,x_o,Kle,$_o,k_o,S_o,he,ip,Zle,R_o,P_o,SN,B_o,I_o,N_o,dp,eie,q_o,j_o,oie,D_o,G_o,O_o,cp,rie,V_o,X_o,RN,z_o,W_o,Q_o,fp,tie,H_o,U_o,PN,J_o,Y_o,K_o,mp,aie,Z_o,e1o,BN,o1o,r1o,t1o,gp,nie,a1o,n1o,IN,s1o,l1o,i1o,hp,sie,d1o,c1o,NN,f1o,m1o,g1o,pp,lie,h1o,p1o,qN,u1o,_1o,b1o,up,iie,v1o,F1o,jN,T1o,M1o,E1o,_p,die,C1o,w1o,DN,A1o,L1o,y1o,bp,cie,x1o,$1o,GN,k1o,S1o,R1o,vp,fie,P1o,B1o,ON,I1o,N1o,q1o,Fp,mie,j1o,D1o,VN,G1o,O1o,V1o,Tp,gie,X1o,z1o,XN,W1o,Q1o,H1o,Mp,hie,U1o,J1o,zN,Y1o,K1o,Z1o,Ep,pie,e2o,o2o,WN,r2o,t2o,a2o,Cp,uie,n2o,s2o,QN,l2o,i2o,d2o,wp,c2o,Ap,f2o,Lp,Q6,m2o,_ie,g2o,CGe,Bi,yp,bie,H6,h2o,vie,p2o,wGe,xo,U6,u2o,Ii,_2o,HN,b2o,v2o,UN,F2o,T2o,M2o,J6,E2o,Fie,C2o,w2o,A2o,nt,Y6,L2o,Tie,y2o,x2o,Ni,$2o,Mie,k2o,S2o,JN,R2o,P2o,B2o,xp,I2o,Je,K6,N2o,Eie,q2o,j2o,Sa,D2o,Cie,G2o,O2o,wie,V2o,X2o,Aie,z2o,W2o,Q2o,y,$p,Lie,H2o,U2o,YN,J2o,Y2o,K2o,kp,yie,Z2o,ebo,KN,obo,rbo,tbo,Sp,xie,abo,nbo,ZN,sbo,lbo,ibo,Rp,$ie,dbo,cbo,eq,fbo,mbo,gbo,Pp,kie,hbo,pbo,oq,ubo,_bo,bbo,Bp,Sie,vbo,Fbo,rq,Tbo,Mbo,Ebo,Ip,Rie,Cbo,wbo,tq,Abo,Lbo,ybo,Np,Pie,xbo,$bo,aq,kbo,Sbo,Rbo,qp,Bie,Pbo,Bbo,nq,Ibo,Nbo,qbo,jp,Iie,jbo,Dbo,sq,Gbo,Obo,Vbo,Dp,Nie,Xbo,zbo,lq,Wbo,Qbo,Hbo,Gp,qie,Ubo,Jbo,iq,Ybo,Kbo,Zbo,Op,jie,evo,ovo,dq,rvo,tvo,avo,Vp,Die,nvo,svo,cq,lvo,ivo,dvo,Xp,Gie,cvo,fvo,fq,mvo,gvo,hvo,zp,Oie,pvo,uvo,mq,_vo,bvo,vvo,Wp,Vie,Fvo,Tvo,gq,Mvo,Evo,Cvo,Qp,Xie,wvo,Avo,hq,Lvo,yvo,xvo,Hp,zie,$vo,kvo,pq,Svo,Rvo,Pvo,Up,Wie,Bvo,Ivo,uq,Nvo,qvo,jvo,Jp,Qie,Dvo,Gvo,_q,Ovo,Vvo,Xvo,Yp,Hie,zvo,Wvo,bq,Qvo,Hvo,Uvo,Kp,Uie,Jvo,Yvo,vq,Kvo,Zvo,e0o,Zp,Jie,o0o,r0o,Fq,t0o,a0o,n0o,eu,Yie,s0o,l0o,Tq,i0o,d0o,c0o,ou,Kie,f0o,m0o,Mq,g0o,h0o,p0o,ru,Zie,u0o,_0o,Eq,b0o,v0o,F0o,tu,ede,T0o,M0o,Cq,E0o,C0o,w0o,au,ode,A0o,L0o,wq,y0o,x0o,$0o,nu,rde,k0o,S0o,Aq,R0o,P0o,B0o,su,tde,I0o,N0o,Lq,q0o,j0o,D0o,lu,ade,G0o,O0o,yq,V0o,X0o,z0o,iu,nde,W0o,Q0o,xq,H0o,U0o,J0o,Os,sde,Y0o,K0o,$q,Z0o,eFo,kq,oFo,rFo,tFo,du,lde,aFo,nFo,Sq,sFo,lFo,iFo,cu,ide,dFo,cFo,Rq,fFo,mFo,gFo,fu,dde,hFo,pFo,Pq,uFo,_Fo,bFo,mu,cde,vFo,FFo,Bq,TFo,MFo,EFo,gu,fde,CFo,wFo,Iq,AFo,LFo,yFo,hu,mde,xFo,$Fo,Nq,kFo,SFo,RFo,pu,gde,PFo,BFo,qq,IFo,NFo,qFo,uu,hde,jFo,DFo,jq,GFo,OFo,VFo,_u,pde,XFo,zFo,Dq,WFo,QFo,HFo,bu,ude,UFo,JFo,Gq,YFo,KFo,ZFo,vu,_de,eTo,oTo,Oq,rTo,tTo,aTo,Fu,bde,nTo,sTo,Vq,lTo,iTo,dTo,Tu,vde,cTo,fTo,Xq,mTo,gTo,hTo,Mu,Fde,pTo,uTo,zq,_To,bTo,vTo,Eu,Tde,FTo,TTo,Wq,MTo,ETo,CTo,Cu,Mde,wTo,ATo,Qq,LTo,yTo,xTo,wu,Ede,$To,kTo,Hq,STo,RTo,PTo,Au,Cde,BTo,ITo,Uq,NTo,qTo,jTo,Lu,wde,DTo,GTo,Jq,OTo,VTo,XTo,yu,Ade,zTo,WTo,Yq,QTo,HTo,UTo,xu,Lde,JTo,YTo,Kq,KTo,ZTo,e7o,$u,yde,o7o,r7o,Zq,t7o,a7o,n7o,ku,xde,s7o,l7o,ej,i7o,d7o,c7o,Su,$de,f7o,m7o,oj,g7o,h7o,p7o,Ru,kde,u7o,_7o,rj,b7o,v7o,F7o,Pu,Sde,T7o,M7o,tj,E7o,C7o,w7o,Bu,Rde,A7o,L7o,aj,y7o,x7o,$7o,Iu,Pde,k7o,S7o,nj,R7o,P7o,B7o,Nu,Bde,I7o,N7o,sj,q7o,j7o,D7o,qu,Ide,G7o,O7o,lj,V7o,X7o,z7o,ju,Nde,W7o,Q7o,ij,H7o,U7o,J7o,Du,qde,Y7o,K7o,dj,Z7o,e9o,o9o,Gu,jde,r9o,t9o,cj,a9o,n9o,s9o,Ou,Dde,l9o,i9o,fj,d9o,c9o,f9o,Vu,Gde,m9o,g9o,mj,h9o,p9o,u9o,Xu,Ode,_9o,b9o,gj,v9o,F9o,T9o,zu,Vde,M9o,E9o,hj,C9o,w9o,A9o,Wu,Xde,L9o,y9o,pj,x9o,$9o,k9o,Qu,zde,S9o,R9o,uj,P9o,B9o,I9o,Hu,Wde,N9o,q9o,_j,j9o,D9o,G9o,Uu,Qde,O9o,V9o,bj,X9o,z9o,W9o,Ju,Hde,Q9o,H9o,vj,U9o,J9o,Y9o,Yu,Ude,K9o,Z9o,Fj,eMo,oMo,rMo,Ku,Jde,tMo,aMo,Tj,nMo,sMo,lMo,Zu,Yde,iMo,dMo,Mj,cMo,fMo,mMo,e_,Kde,gMo,hMo,Ej,pMo,uMo,_Mo,o_,Zde,bMo,vMo,Cj,FMo,TMo,MMo,r_,ece,EMo,CMo,wj,wMo,AMo,LMo,t_,oce,yMo,xMo,Aj,$Mo,kMo,SMo,a_,rce,RMo,PMo,Lj,BMo,IMo,NMo,n_,tce,qMo,jMo,yj,DMo,GMo,OMo,s_,ace,VMo,XMo,xj,zMo,WMo,QMo,l_,nce,HMo,UMo,$j,JMo,YMo,KMo,i_,sce,ZMo,eEo,kj,oEo,rEo,tEo,d_,lce,aEo,nEo,Sj,sEo,lEo,iEo,c_,ice,dEo,cEo,Rj,fEo,mEo,gEo,f_,dce,hEo,pEo,Pj,uEo,_Eo,bEo,m_,cce,vEo,FEo,Bj,TEo,MEo,EEo,g_,fce,CEo,wEo,Ij,AEo,LEo,yEo,h_,mce,xEo,$Eo,Nj,kEo,SEo,REo,p_,gce,PEo,BEo,qj,IEo,NEo,qEo,u_,hce,jEo,DEo,jj,GEo,OEo,VEo,__,pce,XEo,zEo,Dj,WEo,QEo,HEo,b_,uce,UEo,JEo,Gj,YEo,KEo,ZEo,v_,_ce,e4o,o4o,Oj,r4o,t4o,a4o,F_,bce,n4o,s4o,Vj,l4o,i4o,d4o,T_,vce,c4o,f4o,Xj,m4o,g4o,h4o,M_,Fce,p4o,u4o,zj,_4o,b4o,v4o,E_,Tce,F4o,T4o,Wj,M4o,E4o,C4o,C_,Mce,w4o,A4o,Qj,L4o,y4o,x4o,w_,Ece,$4o,k4o,Hj,S4o,R4o,P4o,A_,Cce,B4o,I4o,Uj,N4o,q4o,j4o,L_,wce,D4o,G4o,Jj,O4o,V4o,X4o,y_,z4o,Ace,W4o,Q4o,Lce,H4o,U4o,x_,AGe,qi,$_,yce,Z6,J4o,xce,Y4o,LGe,$o,eL,K4o,ji,Z4o,Yj,eCo,oCo,Kj,rCo,tCo,aCo,oL,nCo,$ce,sCo,lCo,iCo,st,rL,dCo,kce,cCo,fCo,Di,mCo,Sce,gCo,hCo,Zj,pCo,uCo,_Co,k_,bCo,Ye,tL,vCo,Rce,FCo,TCo,Ra,MCo,Pce,ECo,CCo,Bce,wCo,ACo,Ice,LCo,yCo,xCo,G,S_,Nce,$Co,kCo,eD,SCo,RCo,PCo,R_,qce,BCo,ICo,oD,NCo,qCo,jCo,P_,jce,DCo,GCo,rD,OCo,VCo,XCo,B_,Dce,zCo,WCo,tD,QCo,HCo,UCo,I_,Gce,JCo,YCo,aD,KCo,ZCo,e5o,N_,Oce,o5o,r5o,nD,t5o,a5o,n5o,q_,Vce,s5o,l5o,sD,i5o,d5o,c5o,j_,Xce,f5o,m5o,lD,g5o,h5o,p5o,D_,zce,u5o,_5o,iD,b5o,v5o,F5o,G_,Wce,T5o,M5o,dD,E5o,C5o,w5o,O_,Qce,A5o,L5o,cD,y5o,x5o,$5o,V_,Hce,k5o,S5o,fD,R5o,P5o,B5o,X_,Uce,I5o,N5o,mD,q5o,j5o,D5o,z_,Jce,G5o,O5o,gD,V5o,X5o,z5o,W_,Yce,W5o,Q5o,hD,H5o,U5o,J5o,Q_,Kce,Y5o,K5o,pD,Z5o,e3o,o3o,H_,Zce,r3o,t3o,uD,a3o,n3o,s3o,U_,efe,l3o,i3o,_D,d3o,c3o,f3o,J_,ofe,m3o,g3o,bD,h3o,p3o,u3o,Y_,rfe,_3o,b3o,vD,v3o,F3o,T3o,K_,tfe,M3o,E3o,FD,C3o,w3o,A3o,Z_,afe,L3o,y3o,TD,x3o,$3o,k3o,e1,nfe,S3o,R3o,MD,P3o,B3o,I3o,o1,sfe,N3o,q3o,ED,j3o,D3o,G3o,r1,lfe,O3o,V3o,CD,X3o,z3o,W3o,t1,ife,Q3o,H3o,wD,U3o,J3o,Y3o,a1,dfe,K3o,Z3o,AD,ewo,owo,rwo,n1,cfe,two,awo,LD,nwo,swo,lwo,s1,ffe,iwo,dwo,yD,cwo,fwo,mwo,l1,mfe,gwo,hwo,xD,pwo,uwo,_wo,i1,gfe,bwo,vwo,$D,Fwo,Two,Mwo,d1,hfe,Ewo,Cwo,kD,wwo,Awo,Lwo,c1,pfe,ywo,xwo,SD,$wo,kwo,Swo,f1,ufe,Rwo,Pwo,RD,Bwo,Iwo,Nwo,m1,_fe,qwo,jwo,PD,Dwo,Gwo,Owo,g1,bfe,Vwo,Xwo,BD,zwo,Wwo,Qwo,h1,vfe,Hwo,Uwo,ID,Jwo,Ywo,Kwo,p1,Ffe,Zwo,eAo,ND,oAo,rAo,tAo,u1,Tfe,aAo,nAo,qD,sAo,lAo,iAo,_1,Mfe,dAo,cAo,jD,fAo,mAo,gAo,b1,Efe,hAo,pAo,DD,uAo,_Ao,bAo,v1,Cfe,vAo,FAo,GD,TAo,MAo,EAo,F1,wfe,CAo,wAo,OD,AAo,LAo,yAo,T1,xAo,Afe,$Ao,kAo,Lfe,SAo,RAo,M1,yGe,Gi,E1,yfe,aL,PAo,xfe,BAo,xGe,ko,nL,IAo,Oi,NAo,VD,qAo,jAo,XD,DAo,GAo,OAo,sL,VAo,$fe,XAo,zAo,WAo,lt,lL,QAo,kfe,HAo,UAo,Vi,JAo,Sfe,YAo,KAo,zD,ZAo,e6o,o6o,C1,r6o,Ke,iL,t6o,Rfe,a6o,n6o,Pa,s6o,Pfe,l6o,i6o,Bfe,d6o,c6o,Ife,f6o,m6o,g6o,z,w1,Nfe,h6o,p6o,WD,u6o,_6o,b6o,A1,qfe,v6o,F6o,QD,T6o,M6o,E6o,L1,jfe,C6o,w6o,HD,A6o,L6o,y6o,y1,Dfe,x6o,$6o,UD,k6o,S6o,R6o,x1,Gfe,P6o,B6o,JD,I6o,N6o,q6o,$1,Ofe,j6o,D6o,YD,G6o,O6o,V6o,k1,Vfe,X6o,z6o,KD,W6o,Q6o,H6o,S1,Xfe,U6o,J6o,ZD,Y6o,K6o,Z6o,R1,zfe,eLo,oLo,eG,rLo,tLo,aLo,P1,Wfe,nLo,sLo,oG,lLo,iLo,dLo,B1,Qfe,cLo,fLo,rG,mLo,gLo,hLo,I1,Hfe,pLo,uLo,tG,_Lo,bLo,vLo,N1,Ufe,FLo,TLo,aG,MLo,ELo,CLo,q1,Jfe,wLo,ALo,nG,LLo,yLo,xLo,j1,Yfe,$Lo,kLo,sG,SLo,RLo,PLo,D1,Kfe,BLo,ILo,lG,NLo,qLo,jLo,G1,Zfe,DLo,GLo,iG,OLo,VLo,XLo,O1,eme,zLo,WLo,dG,QLo,HLo,ULo,V1,ome,JLo,YLo,cG,KLo,ZLo,eyo,X1,rme,oyo,ryo,fG,tyo,ayo,nyo,z1,tme,syo,lyo,mG,iyo,dyo,cyo,W1,ame,fyo,myo,gG,gyo,hyo,pyo,Q1,nme,uyo,_yo,hG,byo,vyo,Fyo,H1,sme,Tyo,Myo,pG,Eyo,Cyo,wyo,U1,lme,Ayo,Lyo,uG,yyo,xyo,$yo,J1,ime,kyo,Syo,_G,Ryo,Pyo,Byo,Y1,dme,Iyo,Nyo,bG,qyo,jyo,Dyo,K1,cme,Gyo,Oyo,vG,Vyo,Xyo,zyo,Z1,fme,Wyo,Qyo,FG,Hyo,Uyo,Jyo,e2,mme,Yyo,Kyo,TG,Zyo,e8o,o8o,o2,gme,r8o,t8o,MG,a8o,n8o,s8o,r2,hme,l8o,i8o,EG,d8o,c8o,f8o,t2,pme,m8o,g8o,CG,h8o,p8o,u8o,a2,ume,_8o,b8o,wG,v8o,F8o,T8o,n2,_me,M8o,E8o,AG,C8o,w8o,A8o,s2,bme,L8o,y8o,LG,x8o,$8o,k8o,l2,vme,S8o,R8o,yG,P8o,B8o,I8o,i2,Fme,N8o,q8o,xG,j8o,D8o,G8o,d2,O8o,Tme,V8o,X8o,Mme,z8o,W8o,c2,$Ge,Xi,f2,Eme,dL,Q8o,Cme,H8o,kGe,So,cL,U8o,zi,J8o,$G,Y8o,K8o,kG,Z8o,exo,oxo,fL,rxo,wme,txo,axo,nxo,it,mL,sxo,Ame,lxo,ixo,Wi,dxo,Lme,cxo,fxo,SG,mxo,gxo,hxo,m2,pxo,Ze,gL,uxo,yme,_xo,bxo,Ba,vxo,xme,Fxo,Txo,$me,Mxo,Exo,kme,Cxo,wxo,Axo,Q,g2,Sme,Lxo,yxo,RG,xxo,$xo,kxo,h2,Rme,Sxo,Rxo,PG,Pxo,Bxo,Ixo,p2,Pme,Nxo,qxo,BG,jxo,Dxo,Gxo,u2,Bme,Oxo,Vxo,IG,Xxo,zxo,Wxo,_2,Ime,Qxo,Hxo,NG,Uxo,Jxo,Yxo,b2,Nme,Kxo,Zxo,qG,e$o,o$o,r$o,v2,qme,t$o,a$o,jG,n$o,s$o,l$o,F2,jme,i$o,d$o,DG,c$o,f$o,m$o,T2,Dme,g$o,h$o,GG,p$o,u$o,_$o,M2,Gme,b$o,v$o,OG,F$o,T$o,M$o,E2,Ome,E$o,C$o,VG,w$o,A$o,L$o,C2,Vme,y$o,x$o,XG,$$o,k$o,S$o,w2,Xme,R$o,P$o,zG,B$o,I$o,N$o,A2,zme,q$o,j$o,WG,D$o,G$o,O$o,L2,Wme,V$o,X$o,QG,z$o,W$o,Q$o,y2,Qme,H$o,U$o,HG,J$o,Y$o,K$o,x2,Hme,Z$o,eko,UG,oko,rko,tko,$2,Ume,ako,nko,JG,sko,lko,iko,k2,Jme,dko,cko,YG,fko,mko,gko,S2,Yme,hko,pko,KG,uko,_ko,bko,R2,Kme,vko,Fko,ZG,Tko,Mko,Eko,P2,Zme,Cko,wko,eO,Ako,Lko,yko,B2,ege,xko,$ko,oO,kko,Sko,Rko,I2,oge,Pko,Bko,rO,Iko,Nko,qko,N2,rge,jko,Dko,tO,Gko,Oko,Vko,q2,tge,Xko,zko,aO,Wko,Qko,Hko,j2,age,Uko,Jko,nO,Yko,Kko,Zko,D2,nge,eSo,oSo,sO,rSo,tSo,aSo,G2,sge,nSo,sSo,lO,lSo,iSo,dSo,O2,lge,cSo,fSo,iO,mSo,gSo,hSo,V2,ige,pSo,uSo,dO,_So,bSo,vSo,X2,dge,FSo,TSo,cge,MSo,ESo,CSo,z2,fge,wSo,ASo,cO,LSo,ySo,xSo,W2,mge,$So,kSo,fO,SSo,RSo,PSo,Q2,gge,BSo,ISo,mO,NSo,qSo,jSo,H2,hge,DSo,GSo,gO,OSo,VSo,XSo,U2,zSo,pge,WSo,QSo,uge,HSo,USo,J2,SGe,Qi,Y2,_ge,hL,JSo,bge,YSo,RGe,Ro,pL,KSo,Hi,ZSo,hO,eRo,oRo,pO,rRo,tRo,aRo,uL,nRo,vge,sRo,lRo,iRo,dt,_L,dRo,Fge,cRo,fRo,Ui,mRo,Tge,gRo,hRo,uO,pRo,uRo,_Ro,K2,bRo,eo,bL,vRo,Mge,FRo,TRo,Ia,MRo,Ege,ERo,CRo,Cge,wRo,ARo,wge,LRo,yRo,xRo,pe,Z2,Age,$Ro,kRo,_O,SRo,RRo,PRo,eb,Lge,BRo,IRo,bO,NRo,qRo,jRo,ob,yge,DRo,GRo,vO,ORo,VRo,XRo,rb,xge,zRo,WRo,FO,QRo,HRo,URo,tb,$ge,JRo,YRo,TO,KRo,ZRo,ePo,ab,kge,oPo,rPo,MO,tPo,aPo,nPo,nb,Sge,sPo,lPo,EO,iPo,dPo,cPo,sb,Rge,fPo,mPo,CO,gPo,hPo,pPo,lb,Pge,uPo,_Po,wO,bPo,vPo,FPo,ib,Bge,TPo,MPo,AO,EPo,CPo,wPo,db,Ige,APo,LPo,LO,yPo,xPo,$Po,cb,Nge,kPo,SPo,yO,RPo,PPo,BPo,fb,qge,IPo,NPo,xO,qPo,jPo,DPo,mb,jge,GPo,OPo,$O,VPo,XPo,zPo,gb,Dge,WPo,QPo,kO,HPo,UPo,JPo,hb,Gge,YPo,KPo,SO,ZPo,eBo,oBo,pb,Oge,rBo,tBo,RO,aBo,nBo,sBo,ub,lBo,Vge,iBo,dBo,Xge,cBo,fBo,_b,PGe,Ji,bb,zge,vL,mBo,Wge,gBo,BGe,Po,FL,hBo,Yi,pBo,PO,uBo,_Bo,BO,bBo,vBo,FBo,TL,TBo,Qge,MBo,EBo,CBo,ct,ML,wBo,Hge,ABo,LBo,Ki,yBo,Uge,xBo,$Bo,IO,kBo,SBo,RBo,vb,PBo,oo,EL,BBo,Jge,IBo,NBo,Na,qBo,Yge,jBo,DBo,Kge,GBo,OBo,Zge,VBo,XBo,zBo,N,Fb,ehe,WBo,QBo,NO,HBo,UBo,JBo,Tb,ohe,YBo,KBo,qO,ZBo,eIo,oIo,Mb,rhe,rIo,tIo,jO,aIo,nIo,sIo,Eb,the,lIo,iIo,DO,dIo,cIo,fIo,Cb,ahe,mIo,gIo,GO,hIo,pIo,uIo,wb,nhe,_Io,bIo,OO,vIo,FIo,TIo,Ab,she,MIo,EIo,VO,CIo,wIo,AIo,Lb,lhe,LIo,yIo,XO,xIo,$Io,kIo,yb,ihe,SIo,RIo,zO,PIo,BIo,IIo,xb,dhe,NIo,qIo,WO,jIo,DIo,GIo,$b,che,OIo,VIo,QO,XIo,zIo,WIo,kb,fhe,QIo,HIo,HO,UIo,JIo,YIo,Sb,mhe,KIo,ZIo,UO,eNo,oNo,rNo,Rb,ghe,tNo,aNo,JO,nNo,sNo,lNo,Pb,hhe,iNo,dNo,YO,cNo,fNo,mNo,Bb,phe,gNo,hNo,KO,pNo,uNo,_No,Ib,uhe,bNo,vNo,ZO,FNo,TNo,MNo,Nb,_he,ENo,CNo,eV,wNo,ANo,LNo,qb,bhe,yNo,xNo,oV,$No,kNo,SNo,jb,vhe,RNo,PNo,rV,BNo,INo,NNo,Db,Fhe,qNo,jNo,tV,DNo,GNo,ONo,Gb,The,VNo,XNo,aV,zNo,WNo,QNo,Ob,Mhe,HNo,UNo,nV,JNo,YNo,KNo,Vb,Ehe,ZNo,eqo,sV,oqo,rqo,tqo,Xb,Che,aqo,nqo,lV,sqo,lqo,iqo,zb,whe,dqo,cqo,iV,fqo,mqo,gqo,Wb,Ahe,hqo,pqo,dV,uqo,_qo,bqo,Qb,Lhe,vqo,Fqo,cV,Tqo,Mqo,Eqo,Hb,yhe,Cqo,wqo,fV,Aqo,Lqo,yqo,Ub,xhe,xqo,$qo,mV,kqo,Sqo,Rqo,Jb,$he,Pqo,Bqo,gV,Iqo,Nqo,qqo,Yb,khe,jqo,Dqo,hV,Gqo,Oqo,Vqo,Kb,She,Xqo,zqo,pV,Wqo,Qqo,Hqo,Zb,Rhe,Uqo,Jqo,uV,Yqo,Kqo,Zqo,ev,Phe,ejo,ojo,_V,rjo,tjo,ajo,ov,Bhe,njo,sjo,bV,ljo,ijo,djo,rv,Ihe,cjo,fjo,vV,mjo,gjo,hjo,tv,Nhe,pjo,ujo,FV,_jo,bjo,vjo,av,qhe,Fjo,Tjo,TV,Mjo,Ejo,Cjo,nv,jhe,wjo,Ajo,MV,Ljo,yjo,xjo,sv,Dhe,$jo,kjo,EV,Sjo,Rjo,Pjo,lv,Ghe,Bjo,Ijo,CV,Njo,qjo,jjo,iv,Ohe,Djo,Gjo,wV,Ojo,Vjo,Xjo,dv,Vhe,zjo,Wjo,AV,Qjo,Hjo,Ujo,cv,Xhe,Jjo,Yjo,LV,Kjo,Zjo,eDo,fv,zhe,oDo,rDo,yV,tDo,aDo,nDo,mv,Whe,sDo,lDo,xV,iDo,dDo,cDo,gv,Qhe,fDo,mDo,$V,gDo,hDo,pDo,hv,uDo,Hhe,_Do,bDo,Uhe,vDo,FDo,pv,IGe,Zi,uv,Jhe,CL,TDo,Yhe,MDo,NGe,Bo,wL,EDo,ed,CDo,kV,wDo,ADo,SV,LDo,yDo,xDo,AL,$Do,Khe,kDo,SDo,RDo,ft,LL,PDo,Zhe,BDo,IDo,od,NDo,epe,qDo,jDo,RV,DDo,GDo,ODo,_v,VDo,ro,yL,XDo,ope,zDo,WDo,qa,QDo,rpe,HDo,UDo,tpe,JDo,YDo,ape,KDo,ZDo,eGo,Z,bv,npe,oGo,rGo,PV,tGo,aGo,nGo,vv,spe,sGo,lGo,BV,iGo,dGo,cGo,Fv,lpe,fGo,mGo,IV,gGo,hGo,pGo,Tv,ipe,uGo,_Go,NV,bGo,vGo,FGo,Mv,dpe,TGo,MGo,qV,EGo,CGo,wGo,Ev,cpe,AGo,LGo,jV,yGo,xGo,$Go,Cv,fpe,kGo,SGo,DV,RGo,PGo,BGo,wv,mpe,IGo,NGo,GV,qGo,jGo,DGo,Av,gpe,GGo,OGo,OV,VGo,XGo,zGo,Lv,hpe,WGo,QGo,VV,HGo,UGo,JGo,yv,ppe,YGo,KGo,XV,ZGo,eOo,oOo,xv,upe,rOo,tOo,zV,aOo,nOo,sOo,$v,_pe,lOo,iOo,WV,dOo,cOo,fOo,kv,bpe,mOo,gOo,QV,hOo,pOo,uOo,Sv,vpe,_Oo,bOo,HV,vOo,FOo,TOo,Rv,Fpe,MOo,EOo,UV,COo,wOo,AOo,Pv,Tpe,LOo,yOo,JV,xOo,$Oo,kOo,Bv,Mpe,SOo,ROo,YV,POo,BOo,IOo,Iv,Epe,NOo,qOo,KV,jOo,DOo,GOo,Nv,Cpe,OOo,VOo,ZV,XOo,zOo,WOo,qv,wpe,QOo,HOo,eX,UOo,JOo,YOo,jv,Ape,KOo,ZOo,oX,eVo,oVo,rVo,Dv,Lpe,tVo,aVo,rX,nVo,sVo,lVo,Gv,ype,iVo,dVo,tX,cVo,fVo,mVo,Ov,xpe,gVo,hVo,aX,pVo,uVo,_Vo,Vv,$pe,bVo,vVo,nX,FVo,TVo,MVo,Xv,kpe,EVo,CVo,sX,wVo,AVo,LVo,zv,Spe,yVo,xVo,lX,$Vo,kVo,SVo,Wv,Rpe,RVo,PVo,iX,BVo,IVo,NVo,Qv,qVo,Ppe,jVo,DVo,Bpe,GVo,OVo,Hv,qGe,rd,Uv,Ipe,xL,VVo,Npe,XVo,jGe,Io,$L,zVo,td,WVo,dX,QVo,HVo,cX,UVo,JVo,YVo,kL,KVo,qpe,ZVo,eXo,oXo,mt,SL,rXo,jpe,tXo,aXo,ad,nXo,Dpe,sXo,lXo,fX,iXo,dXo,cXo,Jv,fXo,to,RL,mXo,Gpe,gXo,hXo,ja,pXo,Ope,uXo,_Xo,Vpe,bXo,vXo,Xpe,FXo,TXo,MXo,Zr,Yv,zpe,EXo,CXo,mX,wXo,AXo,LXo,Kv,Wpe,yXo,xXo,gX,$Xo,kXo,SXo,Zv,Qpe,RXo,PXo,hX,BXo,IXo,NXo,e0,Hpe,qXo,jXo,pX,DXo,GXo,OXo,o0,Upe,VXo,XXo,uX,zXo,WXo,QXo,r0,HXo,Jpe,UXo,JXo,Ype,YXo,KXo,t0,DGe,nd,a0,Kpe,PL,ZXo,Zpe,ezo,GGe,No,BL,ozo,sd,rzo,_X,tzo,azo,bX,nzo,szo,lzo,IL,izo,eue,dzo,czo,fzo,gt,NL,mzo,oue,gzo,hzo,ld,pzo,rue,uzo,_zo,vX,bzo,vzo,Fzo,n0,Tzo,ao,qL,Mzo,tue,Ezo,Czo,Da,wzo,aue,Azo,Lzo,nue,yzo,xzo,sue,$zo,kzo,Szo,H,s0,lue,Rzo,Pzo,FX,Bzo,Izo,Nzo,l0,iue,qzo,jzo,TX,Dzo,Gzo,Ozo,i0,due,Vzo,Xzo,MX,zzo,Wzo,Qzo,d0,cue,Hzo,Uzo,EX,Jzo,Yzo,Kzo,c0,fue,Zzo,eWo,CX,oWo,rWo,tWo,f0,mue,aWo,nWo,wX,sWo,lWo,iWo,m0,gue,dWo,cWo,AX,fWo,mWo,gWo,g0,hue,hWo,pWo,LX,uWo,_Wo,bWo,h0,pue,vWo,FWo,yX,TWo,MWo,EWo,p0,uue,CWo,wWo,xX,AWo,LWo,yWo,u0,_ue,xWo,$Wo,$X,kWo,SWo,RWo,_0,bue,PWo,BWo,kX,IWo,NWo,qWo,b0,vue,jWo,DWo,SX,GWo,OWo,VWo,v0,Fue,XWo,zWo,RX,WWo,QWo,HWo,F0,Tue,UWo,JWo,PX,YWo,KWo,ZWo,T0,Mue,eQo,oQo,BX,rQo,tQo,aQo,M0,Eue,nQo,sQo,IX,lQo,iQo,dQo,E0,Cue,cQo,fQo,NX,mQo,gQo,hQo,C0,wue,pQo,uQo,qX,_Qo,bQo,vQo,w0,Aue,FQo,TQo,jX,MQo,EQo,CQo,A0,Lue,wQo,AQo,DX,LQo,yQo,xQo,L0,yue,$Qo,kQo,GX,SQo,RQo,PQo,y0,xue,BQo,IQo,OX,NQo,qQo,jQo,x0,$ue,DQo,GQo,VX,OQo,VQo,XQo,$0,kue,zQo,WQo,XX,QQo,HQo,UQo,k0,Sue,JQo,YQo,zX,KQo,ZQo,eHo,S0,Rue,oHo,rHo,WX,tHo,aHo,nHo,R0,Pue,sHo,lHo,QX,iHo,dHo,cHo,P0,Bue,fHo,mHo,HX,gHo,hHo,pHo,B0,Iue,uHo,_Ho,UX,bHo,vHo,FHo,I0,Nue,THo,MHo,JX,EHo,CHo,wHo,N0,que,AHo,LHo,YX,yHo,xHo,$Ho,q0,jue,kHo,SHo,KX,RHo,PHo,BHo,j0,Due,IHo,NHo,ZX,qHo,jHo,DHo,D0,Gue,GHo,OHo,ez,VHo,XHo,zHo,G0,WHo,Oue,QHo,HHo,Vue,UHo,JHo,O0,OGe,id,V0,Xue,jL,YHo,zue,KHo,VGe,qo,DL,ZHo,dd,eUo,oz,oUo,rUo,rz,tUo,aUo,nUo,GL,sUo,Wue,lUo,iUo,dUo,ht,OL,cUo,Que,fUo,mUo,cd,gUo,Hue,hUo,pUo,tz,uUo,_Uo,bUo,X0,vUo,no,VL,FUo,Uue,TUo,MUo,Ga,EUo,Jue,CUo,wUo,Yue,AUo,LUo,Kue,yUo,xUo,$Uo,V,z0,Zue,kUo,SUo,az,RUo,PUo,BUo,W0,e_e,IUo,NUo,nz,qUo,jUo,DUo,Q0,o_e,GUo,OUo,sz,VUo,XUo,zUo,H0,r_e,WUo,QUo,lz,HUo,UUo,JUo,U0,t_e,YUo,KUo,iz,ZUo,eJo,oJo,J0,a_e,rJo,tJo,dz,aJo,nJo,sJo,Y0,n_e,lJo,iJo,cz,dJo,cJo,fJo,K0,s_e,mJo,gJo,fz,hJo,pJo,uJo,Z0,l_e,_Jo,bJo,mz,vJo,FJo,TJo,eF,i_e,MJo,EJo,gz,CJo,wJo,AJo,oF,d_e,LJo,yJo,hz,xJo,$Jo,kJo,rF,c_e,SJo,RJo,pz,PJo,BJo,IJo,tF,f_e,NJo,qJo,uz,jJo,DJo,GJo,aF,m_e,OJo,VJo,_z,XJo,zJo,WJo,nF,g_e,QJo,HJo,bz,UJo,JJo,YJo,sF,h_e,KJo,ZJo,vz,eYo,oYo,rYo,lF,p_e,tYo,aYo,Fz,nYo,sYo,lYo,iF,u_e,iYo,dYo,Tz,cYo,fYo,mYo,dF,__e,gYo,hYo,Mz,pYo,uYo,_Yo,cF,b_e,bYo,vYo,Ez,FYo,TYo,MYo,fF,v_e,EYo,CYo,Cz,wYo,AYo,LYo,mF,F_e,yYo,xYo,wz,$Yo,kYo,SYo,gF,T_e,RYo,PYo,Az,BYo,IYo,NYo,hF,M_e,qYo,jYo,Lz,DYo,GYo,OYo,pF,E_e,VYo,XYo,yz,zYo,WYo,QYo,uF,C_e,HYo,UYo,xz,JYo,YYo,KYo,_F,w_e,ZYo,eKo,$z,oKo,rKo,tKo,bF,A_e,aKo,nKo,kz,sKo,lKo,iKo,vF,L_e,dKo,cKo,Sz,fKo,mKo,gKo,FF,y_e,hKo,pKo,Rz,uKo,_Ko,bKo,TF,x_e,vKo,FKo,Pz,TKo,MKo,EKo,MF,$_e,CKo,wKo,Bz,AKo,LKo,yKo,EF,k_e,xKo,$Ko,Iz,kKo,SKo,RKo,CF,S_e,PKo,BKo,Nz,IKo,NKo,qKo,wF,R_e,jKo,DKo,qz,GKo,OKo,VKo,AF,P_e,XKo,zKo,jz,WKo,QKo,HKo,LF,B_e,UKo,JKo,Dz,YKo,KKo,ZKo,yF,I_e,eZo,oZo,Gz,rZo,tZo,aZo,xF,N_e,nZo,sZo,Oz,lZo,iZo,dZo,$F,q_e,cZo,fZo,Vz,mZo,gZo,hZo,kF,pZo,j_e,uZo,_Zo,D_e,bZo,vZo,SF,XGe,fd,RF,G_e,XL,FZo,O_e,TZo,zGe,jo,zL,MZo,md,EZo,Xz,CZo,wZo,zz,AZo,LZo,yZo,WL,xZo,V_e,$Zo,kZo,SZo,pt,QL,RZo,X_e,PZo,BZo,gd,IZo,z_e,NZo,qZo,Wz,jZo,DZo,GZo,PF,OZo,so,HL,VZo,W_e,XZo,zZo,Oa,WZo,Q_e,QZo,HZo,H_e,UZo,JZo,U_e,YZo,KZo,ZZo,J_e,BF,Y_e,eer,oer,Qz,rer,ter,aer,IF,ner,K_e,ser,ler,Z_e,ier,der,NF,WGe,hd,qF,e1e,UL,cer,o1e,fer,QGe,Do,JL,mer,pd,ger,Hz,her,per,Uz,uer,_er,ber,YL,ver,r1e,Fer,Ter,Mer,ut,KL,Eer,t1e,Cer,wer,ud,Aer,a1e,Ler,yer,Jz,xer,$er,ker,jF,Ser,lo,ZL,Rer,n1e,Per,Ber,Va,Ier,s1e,Ner,qer,l1e,jer,Der,i1e,Ger,Oer,Ver,Fe,DF,d1e,Xer,zer,Yz,Wer,Qer,Her,GF,c1e,Uer,Jer,Kz,Yer,Ker,Zer,OF,f1e,eor,oor,Zz,ror,tor,aor,VF,m1e,nor,sor,eW,lor,ior,dor,Vs,g1e,cor,mor,oW,gor,hor,rW,por,uor,_or,XF,h1e,bor,vor,tW,For,Tor,Mor,Xs,p1e,Eor,Cor,aW,wor,Aor,nW,Lor,yor,xor,_t,u1e,$or,kor,sW,Sor,Ror,lW,Por,Bor,iW,Ior,Nor,qor,zF,_1e,jor,Dor,dW,Gor,Oor,Vor,WF,b1e,Xor,zor,cW,Wor,Qor,Hor,QF,v1e,Uor,Jor,fW,Yor,Kor,Zor,HF,F1e,err,orr,mW,rrr,trr,arr,UF,T1e,nrr,srr,gW,lrr,irr,drr,JF,M1e,crr,frr,hW,mrr,grr,hrr,YF,E1e,prr,urr,pW,_rr,brr,vrr,KF,Frr,C1e,Trr,Mrr,w1e,Err,Crr,ZF,HGe,_d,eT,A1e,ey,wrr,L1e,Arr,UGe,Go,oy,Lrr,bd,yrr,uW,xrr,$rr,_W,krr,Srr,Rrr,ry,Prr,y1e,Brr,Irr,Nrr,bt,ty,qrr,x1e,jrr,Drr,vd,Grr,$1e,Orr,Vrr,bW,Xrr,zrr,Wrr,oT,Qrr,io,ay,Hrr,k1e,Urr,Jrr,Xa,Yrr,S1e,Krr,Zrr,R1e,etr,otr,P1e,rtr,ttr,atr,B1e,rT,I1e,ntr,str,vW,ltr,itr,dtr,tT,ctr,N1e,ftr,mtr,q1e,gtr,htr,aT,JGe,Fd,nT,j1e,ny,ptr,D1e,utr,YGe,Oo,sy,_tr,Td,btr,FW,vtr,Ftr,TW,Ttr,Mtr,Etr,ly,Ctr,G1e,wtr,Atr,Ltr,vt,iy,ytr,O1e,xtr,$tr,Md,ktr,V1e,Str,Rtr,MW,Ptr,Btr,Itr,sT,Ntr,co,dy,qtr,X1e,jtr,Dtr,za,Gtr,z1e,Otr,Vtr,W1e,Xtr,ztr,Q1e,Wtr,Qtr,Htr,H1e,lT,U1e,Utr,Jtr,EW,Ytr,Ktr,Ztr,iT,ear,J1e,oar,rar,Y1e,tar,aar,dT,KGe,Ed,cT,K1e,cy,nar,Z1e,sar,ZGe,Vo,fy,lar,Cd,iar,CW,dar,car,wW,far,mar,gar,my,har,e2e,par,uar,_ar,Ft,gy,bar,o2e,Far,Tar,wd,Mar,r2e,Ear,Car,AW,war,Aar,Lar,fT,yar,fo,hy,xar,t2e,$ar,kar,Wa,Sar,a2e,Rar,Par,n2e,Bar,Iar,s2e,Nar,qar,jar,Pe,mT,l2e,Dar,Gar,LW,Oar,Var,Xar,gT,i2e,zar,War,yW,Qar,Har,Uar,hT,d2e,Jar,Yar,xW,Kar,Zar,enr,pT,c2e,onr,rnr,$W,tnr,anr,nnr,uT,f2e,snr,lnr,kW,inr,dnr,cnr,_T,m2e,fnr,mnr,SW,gnr,hnr,pnr,bT,g2e,unr,_nr,RW,bnr,vnr,Fnr,vT,h2e,Tnr,Mnr,PW,Enr,Cnr,wnr,FT,p2e,Anr,Lnr,BW,ynr,xnr,$nr,TT,knr,u2e,Snr,Rnr,_2e,Pnr,Bnr,MT,eOe,Ad,ET,b2e,py,Inr,v2e,Nnr,oOe,Xo,uy,qnr,Ld,jnr,IW,Dnr,Gnr,NW,Onr,Vnr,Xnr,_y,znr,F2e,Wnr,Qnr,Hnr,Tt,by,Unr,T2e,Jnr,Ynr,yd,Knr,M2e,Znr,esr,qW,osr,rsr,tsr,CT,asr,mo,vy,nsr,E2e,ssr,lsr,Qa,isr,C2e,dsr,csr,w2e,fsr,msr,A2e,gsr,hsr,psr,et,wT,L2e,usr,_sr,jW,bsr,vsr,Fsr,AT,y2e,Tsr,Msr,DW,Esr,Csr,wsr,LT,x2e,Asr,Lsr,GW,ysr,xsr,$sr,yT,$2e,ksr,Ssr,OW,Rsr,Psr,Bsr,xT,k2e,Isr,Nsr,VW,qsr,jsr,Dsr,$T,Gsr,S2e,Osr,Vsr,R2e,Xsr,zsr,kT,rOe,xd,ST,P2e,Fy,Wsr,B2e,Qsr,tOe,zo,Ty,Hsr,$d,Usr,XW,Jsr,Ysr,zW,Ksr,Zsr,elr,My,olr,I2e,rlr,tlr,alr,Mt,Ey,nlr,N2e,slr,llr,kd,ilr,q2e,dlr,clr,WW,flr,mlr,glr,RT,hlr,go,Cy,plr,j2e,ulr,_lr,Ha,blr,D2e,vlr,Flr,G2e,Tlr,Mlr,O2e,Elr,Clr,wlr,Le,PT,V2e,Alr,Llr,QW,ylr,xlr,$lr,BT,X2e,klr,Slr,HW,Rlr,Plr,Blr,IT,z2e,Ilr,Nlr,UW,qlr,jlr,Dlr,NT,W2e,Glr,Olr,JW,Vlr,Xlr,zlr,qT,Q2e,Wlr,Qlr,YW,Hlr,Ulr,Jlr,jT,H2e,Ylr,Klr,KW,Zlr,eir,oir,DT,U2e,rir,tir,ZW,air,nir,sir,GT,J2e,lir,iir,eQ,dir,cir,fir,OT,Y2e,mir,gir,oQ,hir,pir,uir,VT,K2e,_ir,bir,rQ,vir,Fir,Tir,XT,Mir,Z2e,Eir,Cir,ebe,wir,Air,zT,aOe,Sd,WT,obe,wy,Lir,rbe,yir,nOe,Wo,Ay,xir,Rd,$ir,tQ,kir,Sir,aQ,Rir,Pir,Bir,Ly,Iir,tbe,Nir,qir,jir,Et,yy,Dir,abe,Gir,Oir,Pd,Vir,nbe,Xir,zir,nQ,Wir,Qir,Hir,QT,Uir,ho,xy,Jir,sbe,Yir,Kir,Ua,Zir,lbe,edr,odr,ibe,rdr,tdr,dbe,adr,ndr,sdr,$y,HT,cbe,ldr,idr,sQ,ddr,cdr,fdr,UT,fbe,mdr,gdr,lQ,hdr,pdr,udr,JT,_dr,mbe,bdr,vdr,gbe,Fdr,Tdr,YT,sOe,Bd,KT,hbe,ky,Mdr,pbe,Edr,lOe,Qo,Sy,Cdr,Id,wdr,iQ,Adr,Ldr,dQ,ydr,xdr,$dr,Ry,kdr,ube,Sdr,Rdr,Pdr,Ct,Py,Bdr,_be,Idr,Ndr,Nd,qdr,bbe,jdr,Ddr,cQ,Gdr,Odr,Vdr,ZT,Xdr,po,By,zdr,vbe,Wdr,Qdr,Ja,Hdr,Fbe,Udr,Jdr,Tbe,Ydr,Kdr,Mbe,Zdr,ecr,ocr,ot,e7,Ebe,rcr,tcr,fQ,acr,ncr,scr,o7,Cbe,lcr,icr,mQ,dcr,ccr,fcr,r7,wbe,mcr,gcr,gQ,hcr,pcr,ucr,t7,Abe,_cr,bcr,hQ,vcr,Fcr,Tcr,a7,Lbe,Mcr,Ecr,pQ,Ccr,wcr,Acr,n7,Lcr,ybe,ycr,xcr,xbe,$cr,kcr,s7,iOe,qd,l7,$be,Iy,Scr,kbe,Rcr,dOe,Ho,Ny,Pcr,jd,Bcr,uQ,Icr,Ncr,_Q,qcr,jcr,Dcr,qy,Gcr,Sbe,Ocr,Vcr,Xcr,wt,jy,zcr,Rbe,Wcr,Qcr,Dd,Hcr,Pbe,Ucr,Jcr,bQ,Ycr,Kcr,Zcr,i7,efr,uo,Dy,ofr,Bbe,rfr,tfr,Ya,afr,Ibe,nfr,sfr,Nbe,lfr,ifr,qbe,dfr,cfr,ffr,Gd,d7,jbe,mfr,gfr,vQ,hfr,pfr,ufr,c7,Dbe,_fr,bfr,FQ,vfr,Ffr,Tfr,f7,Gbe,Mfr,Efr,TQ,Cfr,wfr,Afr,m7,Lfr,Obe,yfr,xfr,Vbe,$fr,kfr,g7,cOe,Od,h7,Xbe,Gy,Sfr,zbe,Rfr,fOe,Uo,Oy,Pfr,Vd,Bfr,MQ,Ifr,Nfr,EQ,qfr,jfr,Dfr,Vy,Gfr,Wbe,Ofr,Vfr,Xfr,At,Xy,zfr,Qbe,Wfr,Qfr,Xd,Hfr,Hbe,Ufr,Jfr,CQ,Yfr,Kfr,Zfr,p7,emr,_o,zy,omr,Ube,rmr,tmr,Ka,amr,Jbe,nmr,smr,Ybe,lmr,imr,Kbe,dmr,cmr,fmr,Wy,u7,Zbe,mmr,gmr,wQ,hmr,pmr,umr,_7,eve,_mr,bmr,AQ,vmr,Fmr,Tmr,b7,Mmr,ove,Emr,Cmr,rve,wmr,Amr,v7,mOe,zd,F7,tve,Qy,Lmr,ave,ymr,gOe,Jo,Hy,xmr,Wd,$mr,LQ,kmr,Smr,yQ,Rmr,Pmr,Bmr,Uy,Imr,nve,Nmr,qmr,jmr,Lt,Jy,Dmr,sve,Gmr,Omr,Qd,Vmr,lve,Xmr,zmr,xQ,Wmr,Qmr,Hmr,T7,Umr,bo,Yy,Jmr,ive,Ymr,Kmr,Za,Zmr,dve,egr,ogr,cve,rgr,tgr,fve,agr,ngr,sgr,mve,M7,gve,lgr,igr,$Q,dgr,cgr,fgr,E7,mgr,hve,ggr,hgr,pve,pgr,ugr,C7,hOe,Hd,w7,uve,Ky,_gr,_ve,bgr,pOe,Yo,Zy,vgr,Ud,Fgr,kQ,Tgr,Mgr,SQ,Egr,Cgr,wgr,e8,Agr,bve,Lgr,ygr,xgr,yt,o8,$gr,vve,kgr,Sgr,Jd,Rgr,Fve,Pgr,Bgr,RQ,Igr,Ngr,qgr,A7,jgr,vo,r8,Dgr,Tve,Ggr,Ogr,en,Vgr,Mve,Xgr,zgr,Eve,Wgr,Qgr,Cve,Hgr,Ugr,Jgr,on,L7,wve,Ygr,Kgr,PQ,Zgr,ehr,ohr,y7,Ave,rhr,thr,BQ,ahr,nhr,shr,x7,Lve,lhr,ihr,IQ,dhr,chr,fhr,$7,yve,mhr,ghr,NQ,hhr,phr,uhr,k7,_hr,xve,bhr,vhr,$ve,Fhr,Thr,S7,uOe,Yd,R7,kve,t8,Mhr,Sve,Ehr,_Oe,Ko,a8,Chr,Kd,whr,qQ,Ahr,Lhr,jQ,yhr,xhr,$hr,n8,khr,Rve,Shr,Rhr,Phr,xt,s8,Bhr,Pve,Ihr,Nhr,Zd,qhr,Bve,jhr,Dhr,DQ,Ghr,Ohr,Vhr,P7,Xhr,Fo,l8,zhr,Ive,Whr,Qhr,rn,Hhr,Nve,Uhr,Jhr,qve,Yhr,Khr,jve,Zhr,epr,opr,Dve,B7,Gve,rpr,tpr,GQ,apr,npr,spr,I7,lpr,Ove,ipr,dpr,Vve,cpr,fpr,N7,bOe,ec,q7,Xve,i8,mpr,zve,gpr,vOe,Zo,d8,hpr,oc,ppr,OQ,upr,_pr,VQ,bpr,vpr,Fpr,c8,Tpr,Wve,Mpr,Epr,Cpr,$t,f8,wpr,Qve,Apr,Lpr,rc,ypr,Hve,xpr,$pr,XQ,kpr,Spr,Rpr,j7,Ppr,Lr,m8,Bpr,Uve,Ipr,Npr,tn,qpr,Jve,jpr,Dpr,Yve,Gpr,Opr,Kve,Vpr,Xpr,zpr,q,D7,Zve,Wpr,Qpr,zQ,Hpr,Upr,Jpr,G7,e0e,Ypr,Kpr,WQ,Zpr,eur,our,O7,o0e,rur,tur,QQ,aur,nur,sur,V7,r0e,lur,iur,HQ,dur,cur,fur,X7,t0e,mur,gur,UQ,hur,pur,uur,z7,a0e,_ur,bur,JQ,vur,Fur,Tur,W7,n0e,Mur,Eur,YQ,Cur,wur,Aur,Q7,s0e,Lur,yur,KQ,xur,$ur,kur,H7,l0e,Sur,Rur,ZQ,Pur,Bur,Iur,U7,i0e,Nur,qur,eH,jur,Dur,Gur,J7,d0e,Our,Vur,oH,Xur,zur,Wur,Y7,c0e,Qur,Hur,rH,Uur,Jur,Yur,K7,f0e,Kur,Zur,tH,e_r,o_r,r_r,Z7,m0e,t_r,a_r,aH,n_r,s_r,l_r,e9,g0e,i_r,d_r,nH,c_r,f_r,m_r,o9,h0e,g_r,h_r,sH,p_r,u_r,__r,r9,p0e,b_r,v_r,lH,F_r,T_r,M_r,zs,u0e,E_r,C_r,iH,w_r,A_r,dH,L_r,y_r,x_r,t9,_0e,$_r,k_r,cH,S_r,R_r,P_r,a9,b0e,B_r,I_r,fH,N_r,q_r,j_r,n9,v0e,D_r,G_r,mH,O_r,V_r,X_r,s9,F0e,z_r,W_r,gH,Q_r,H_r,U_r,l9,T0e,J_r,Y_r,hH,K_r,Z_r,e1r,i9,M0e,o1r,r1r,pH,t1r,a1r,n1r,d9,E0e,s1r,l1r,uH,i1r,d1r,c1r,c9,C0e,f1r,m1r,_H,g1r,h1r,p1r,f9,w0e,u1r,_1r,bH,b1r,v1r,F1r,m9,A0e,T1r,M1r,vH,E1r,C1r,w1r,g9,L0e,A1r,L1r,FH,y1r,x1r,$1r,h9,y0e,k1r,S1r,TH,R1r,P1r,B1r,p9,x0e,I1r,N1r,MH,q1r,j1r,D1r,u9,$0e,G1r,O1r,EH,V1r,X1r,z1r,_9,k0e,W1r,Q1r,CH,H1r,U1r,J1r,b9,S0e,Y1r,K1r,wH,Z1r,e2r,o2r,v9,R0e,r2r,t2r,AH,a2r,n2r,s2r,F9,P0e,l2r,i2r,LH,d2r,c2r,f2r,T9,B0e,m2r,g2r,yH,h2r,p2r,u2r,M9,I0e,_2r,b2r,xH,v2r,F2r,T2r,E9,N0e,M2r,E2r,$H,C2r,w2r,A2r,C9,q0e,L2r,y2r,kH,x2r,$2r,k2r,w9,j0e,S2r,R2r,SH,P2r,B2r,I2r,A9,D0e,N2r,q2r,RH,j2r,D2r,G2r,L9,G0e,O2r,V2r,PH,X2r,z2r,W2r,y9,O0e,Q2r,H2r,BH,U2r,J2r,Y2r,x9,V0e,K2r,Z2r,IH,ebr,obr,rbr,$9,X0e,tbr,abr,NH,nbr,sbr,lbr,k9,z0e,ibr,dbr,qH,cbr,fbr,mbr,S9,FOe,tc,R9,W0e,g8,gbr,Q0e,hbr,TOe,er,h8,pbr,ac,ubr,jH,_br,bbr,DH,vbr,Fbr,Tbr,p8,Mbr,H0e,Ebr,Cbr,wbr,kt,u8,Abr,U0e,Lbr,ybr,nc,xbr,J0e,$br,kbr,GH,Sbr,Rbr,Pbr,P9,Bbr,yr,_8,Ibr,Y0e,Nbr,qbr,an,jbr,K0e,Dbr,Gbr,Z0e,Obr,Vbr,eFe,Xbr,zbr,Wbr,se,B9,oFe,Qbr,Hbr,OH,Ubr,Jbr,Ybr,I9,rFe,Kbr,Zbr,VH,evr,ovr,rvr,N9,tFe,tvr,avr,XH,nvr,svr,lvr,q9,aFe,ivr,dvr,zH,cvr,fvr,mvr,j9,nFe,gvr,hvr,WH,pvr,uvr,_vr,D9,sFe,bvr,vvr,QH,Fvr,Tvr,Mvr,G9,lFe,Evr,Cvr,HH,wvr,Avr,Lvr,O9,iFe,yvr,xvr,UH,$vr,kvr,Svr,V9,dFe,Rvr,Pvr,JH,Bvr,Ivr,Nvr,X9,cFe,qvr,jvr,YH,Dvr,Gvr,Ovr,z9,fFe,Vvr,Xvr,KH,zvr,Wvr,Qvr,W9,mFe,Hvr,Uvr,ZH,Jvr,Yvr,Kvr,Q9,gFe,Zvr,e0r,eU,o0r,r0r,t0r,H9,hFe,a0r,n0r,oU,s0r,l0r,i0r,U9,pFe,d0r,c0r,rU,f0r,m0r,g0r,J9,uFe,h0r,p0r,tU,u0r,_0r,b0r,Y9,_Fe,v0r,F0r,aU,T0r,M0r,E0r,K9,bFe,C0r,w0r,nU,A0r,L0r,y0r,Z9,vFe,x0r,$0r,sU,k0r,S0r,R0r,eM,FFe,P0r,B0r,lU,I0r,N0r,q0r,oM,TFe,j0r,D0r,iU,G0r,O0r,V0r,rM,MFe,X0r,z0r,dU,W0r,Q0r,H0r,tM,EFe,U0r,J0r,cU,Y0r,K0r,Z0r,aM,MOe,sc,nM,CFe,b8,eFr,wFe,oFr,EOe,or,v8,rFr,lc,tFr,fU,aFr,nFr,mU,sFr,lFr,iFr,F8,dFr,AFe,cFr,fFr,mFr,St,T8,gFr,LFe,hFr,pFr,ic,uFr,yFe,_Fr,bFr,gU,vFr,FFr,TFr,sM,MFr,xr,M8,EFr,xFe,CFr,wFr,nn,AFr,$Fe,LFr,yFr,kFe,xFr,$Fr,SFe,kFr,SFr,RFr,Me,lM,RFe,PFr,BFr,hU,IFr,NFr,qFr,iM,PFe,jFr,DFr,pU,GFr,OFr,VFr,dM,BFe,XFr,zFr,uU,WFr,QFr,HFr,cM,IFe,UFr,JFr,_U,YFr,KFr,ZFr,fM,NFe,eTr,oTr,bU,rTr,tTr,aTr,mM,qFe,nTr,sTr,vU,lTr,iTr,dTr,gM,jFe,cTr,fTr,FU,mTr,gTr,hTr,hM,DFe,pTr,uTr,TU,_Tr,bTr,vTr,pM,GFe,FTr,TTr,MU,MTr,ETr,CTr,uM,OFe,wTr,ATr,EU,LTr,yTr,xTr,_M,VFe,$Tr,kTr,CU,STr,RTr,PTr,bM,XFe,BTr,ITr,wU,NTr,qTr,jTr,vM,zFe,DTr,GTr,AU,OTr,VTr,XTr,FM,COe,dc,TM,WFe,E8,zTr,QFe,WTr,wOe,rr,C8,QTr,cc,HTr,LU,UTr,JTr,yU,YTr,KTr,ZTr,w8,e7r,HFe,o7r,r7r,t7r,Rt,A8,a7r,UFe,n7r,s7r,fc,l7r,JFe,i7r,d7r,xU,c7r,f7r,m7r,MM,g7r,$r,L8,h7r,YFe,p7r,u7r,sn,_7r,KFe,b7r,v7r,ZFe,F7r,T7r,eTe,M7r,E7r,C7r,ln,EM,oTe,w7r,A7r,$U,L7r,y7r,x7r,CM,rTe,$7r,k7r,kU,S7r,R7r,P7r,wM,tTe,B7r,I7r,SU,N7r,q7r,j7r,AM,aTe,D7r,G7r,RU,O7r,V7r,X7r,LM,AOe,mc,yM,nTe,y8,z7r,sTe,W7r,LOe,tr,x8,Q7r,gc,H7r,PU,U7r,J7r,BU,Y7r,K7r,Z7r,$8,e9r,lTe,o9r,r9r,t9r,Pt,k8,a9r,iTe,n9r,s9r,hc,l9r,dTe,i9r,d9r,IU,c9r,f9r,m9r,xM,g9r,kr,S8,h9r,cTe,p9r,u9r,dn,_9r,fTe,b9r,v9r,mTe,F9r,T9r,gTe,M9r,E9r,C9r,ie,$M,hTe,w9r,A9r,NU,L9r,y9r,x9r,kM,pTe,$9r,k9r,qU,S9r,R9r,P9r,SM,uTe,B9r,I9r,jU,N9r,q9r,j9r,RM,_Te,D9r,G9r,DU,O9r,V9r,X9r,PM,bTe,z9r,W9r,GU,Q9r,H9r,U9r,BM,vTe,J9r,Y9r,OU,K9r,Z9r,eMr,IM,FTe,oMr,rMr,VU,tMr,aMr,nMr,NM,TTe,sMr,lMr,XU,iMr,dMr,cMr,qM,MTe,fMr,mMr,zU,gMr,hMr,pMr,jM,ETe,uMr,_Mr,WU,bMr,vMr,FMr,DM,CTe,TMr,MMr,QU,EMr,CMr,wMr,GM,wTe,AMr,LMr,HU,yMr,xMr,$Mr,OM,ATe,kMr,SMr,UU,RMr,PMr,BMr,VM,LTe,IMr,NMr,JU,qMr,jMr,DMr,XM,yTe,GMr,OMr,YU,VMr,XMr,zMr,zM,xTe,WMr,QMr,KU,HMr,UMr,JMr,WM,$Te,YMr,KMr,ZU,ZMr,eEr,oEr,QM,kTe,rEr,tEr,eJ,aEr,nEr,sEr,HM,STe,lEr,iEr,oJ,dEr,cEr,fEr,UM,RTe,mEr,gEr,rJ,hEr,pEr,uEr,JM,yOe,pc,YM,PTe,R8,_Er,BTe,bEr,xOe,ar,P8,vEr,uc,FEr,tJ,TEr,MEr,aJ,EEr,CEr,wEr,B8,AEr,ITe,LEr,yEr,xEr,Bt,I8,$Er,NTe,kEr,SEr,_c,REr,qTe,PEr,BEr,nJ,IEr,NEr,qEr,KM,jEr,Sr,N8,DEr,jTe,GEr,OEr,cn,VEr,DTe,XEr,zEr,GTe,WEr,QEr,OTe,HEr,UEr,JEr,ye,ZM,VTe,YEr,KEr,sJ,ZEr,e4r,o4r,eE,XTe,r4r,t4r,lJ,a4r,n4r,s4r,oE,zTe,l4r,i4r,iJ,d4r,c4r,f4r,rE,WTe,m4r,g4r,dJ,h4r,p4r,u4r,tE,QTe,_4r,b4r,cJ,v4r,F4r,T4r,aE,HTe,M4r,E4r,fJ,C4r,w4r,A4r,nE,UTe,L4r,y4r,mJ,x4r,$4r,k4r,sE,JTe,S4r,R4r,gJ,P4r,B4r,I4r,lE,YTe,N4r,q4r,hJ,j4r,D4r,G4r,iE,KTe,O4r,V4r,pJ,X4r,z4r,W4r,dE,$Oe,bc,cE,ZTe,q8,Q4r,e7e,H4r,kOe,nr,j8,U4r,vc,J4r,uJ,Y4r,K4r,_J,Z4r,eCr,oCr,D8,rCr,o7e,tCr,aCr,nCr,It,G8,sCr,r7e,lCr,iCr,Fc,dCr,t7e,cCr,fCr,bJ,mCr,gCr,hCr,fE,pCr,Rr,O8,uCr,a7e,_Cr,bCr,fn,vCr,n7e,FCr,TCr,s7e,MCr,ECr,l7e,CCr,wCr,ACr,te,mE,i7e,LCr,yCr,vJ,xCr,$Cr,kCr,gE,d7e,SCr,RCr,FJ,PCr,BCr,ICr,hE,c7e,NCr,qCr,TJ,jCr,DCr,GCr,pE,f7e,OCr,VCr,MJ,XCr,zCr,WCr,uE,m7e,QCr,HCr,EJ,UCr,JCr,YCr,_E,g7e,KCr,ZCr,CJ,e5r,o5r,r5r,bE,h7e,t5r,a5r,wJ,n5r,s5r,l5r,vE,p7e,i5r,d5r,AJ,c5r,f5r,m5r,FE,u7e,g5r,h5r,LJ,p5r,u5r,_5r,TE,_7e,b5r,v5r,yJ,F5r,T5r,M5r,ME,b7e,E5r,C5r,xJ,w5r,A5r,L5r,EE,v7e,y5r,x5r,$J,$5r,k5r,S5r,CE,F7e,R5r,P5r,kJ,B5r,I5r,N5r,wE,T7e,q5r,j5r,SJ,D5r,G5r,O5r,AE,M7e,V5r,X5r,RJ,z5r,W5r,Q5r,LE,E7e,H5r,U5r,PJ,J5r,Y5r,K5r,yE,C7e,Z5r,e3r,BJ,o3r,r3r,t3r,xE,w7e,a3r,n3r,IJ,s3r,l3r,i3r,$E,A7e,d3r,c3r,NJ,f3r,m3r,g3r,kE,L7e,h3r,p3r,qJ,u3r,_3r,b3r,SE,y7e,v3r,F3r,jJ,T3r,M3r,E3r,RE,x7e,C3r,w3r,DJ,A3r,L3r,y3r,PE,$7e,x3r,$3r,GJ,k3r,S3r,R3r,BE,k7e,P3r,B3r,OJ,I3r,N3r,q3r,IE,S7e,j3r,D3r,VJ,G3r,O3r,V3r,NE,R7e,X3r,z3r,XJ,W3r,Q3r,H3r,qE,SOe,Tc,jE,P7e,V8,U3r,B7e,J3r,ROe,sr,X8,Y3r,Mc,K3r,zJ,Z3r,ewr,WJ,owr,rwr,twr,z8,awr,I7e,nwr,swr,lwr,Nt,W8,iwr,N7e,dwr,cwr,Ec,fwr,q7e,mwr,gwr,QJ,hwr,pwr,uwr,DE,_wr,Pr,Q8,bwr,j7e,vwr,Fwr,mn,Twr,D7e,Mwr,Ewr,G7e,Cwr,wwr,O7e,Awr,Lwr,ywr,ue,GE,V7e,xwr,$wr,HJ,kwr,Swr,Rwr,OE,X7e,Pwr,Bwr,UJ,Iwr,Nwr,qwr,VE,z7e,jwr,Dwr,JJ,Gwr,Owr,Vwr,XE,W7e,Xwr,zwr,YJ,Wwr,Qwr,Hwr,zE,Q7e,Uwr,Jwr,KJ,Ywr,Kwr,Zwr,WE,H7e,eAr,oAr,ZJ,rAr,tAr,aAr,QE,U7e,nAr,sAr,eY,lAr,iAr,dAr,HE,J7e,cAr,fAr,oY,mAr,gAr,hAr,UE,Y7e,pAr,uAr,rY,_Ar,bAr,vAr,JE,K7e,FAr,TAr,tY,MAr,EAr,CAr,YE,Z7e,wAr,AAr,aY,LAr,yAr,xAr,KE,e9e,$Ar,kAr,nY,SAr,RAr,PAr,ZE,o9e,BAr,IAr,sY,NAr,qAr,jAr,e4,r9e,DAr,GAr,lY,OAr,VAr,XAr,o4,t9e,zAr,WAr,iY,QAr,HAr,UAr,r4,a9e,JAr,YAr,dY,KAr,ZAr,e6r,t4,n9e,o6r,r6r,cY,t6r,a6r,n6r,a4,POe,Cc,n4,s9e,H8,s6r,l9e,l6r,BOe,lr,U8,i6r,wc,d6r,fY,c6r,f6r,mY,m6r,g6r,h6r,J8,p6r,i9e,u6r,_6r,b6r,qt,Y8,v6r,d9e,F6r,T6r,Ac,M6r,c9e,E6r,C6r,gY,w6r,A6r,L6r,s4,y6r,Br,K8,x6r,f9e,$6r,k6r,gn,S6r,m9e,R6r,P6r,g9e,B6r,I6r,h9e,N6r,q6r,j6r,Z8,l4,p9e,D6r,G6r,hY,O6r,V6r,X6r,i4,u9e,z6r,W6r,pY,Q6r,H6r,U6r,d4,IOe,Lc,c4,_9e,ex,J6r,b9e,Y6r,NOe,ir,ox,K6r,yc,Z6r,uY,eLr,oLr,_Y,rLr,tLr,aLr,rx,nLr,v9e,sLr,lLr,iLr,jt,tx,dLr,F9e,cLr,fLr,xc,mLr,T9e,gLr,hLr,bY,pLr,uLr,_Lr,f4,bLr,Ir,ax,vLr,M9e,FLr,TLr,hn,MLr,E9e,ELr,CLr,C9e,wLr,ALr,w9e,LLr,yLr,xLr,A9e,m4,L9e,$Lr,kLr,vY,SLr,RLr,PLr,g4,qOe,$c,h4,y9e,nx,BLr,x9e,ILr,jOe,dr,sx,NLr,kc,qLr,FY,jLr,DLr,TY,GLr,OLr,VLr,lx,XLr,$9e,zLr,WLr,QLr,Dt,ix,HLr,k9e,ULr,JLr,Sc,YLr,S9e,KLr,ZLr,MY,eyr,oyr,ryr,p4,tyr,Nr,dx,ayr,R9e,nyr,syr,pn,lyr,P9e,iyr,dyr,B9e,cyr,fyr,I9e,myr,gyr,hyr,de,u4,N9e,pyr,uyr,EY,_yr,byr,vyr,_4,q9e,Fyr,Tyr,CY,Myr,Eyr,Cyr,b4,j9e,wyr,Ayr,wY,Lyr,yyr,xyr,v4,D9e,$yr,kyr,AY,Syr,Ryr,Pyr,F4,G9e,Byr,Iyr,LY,Nyr,qyr,jyr,T4,O9e,Dyr,Gyr,yY,Oyr,Vyr,Xyr,M4,V9e,zyr,Wyr,xY,Qyr,Hyr,Uyr,E4,X9e,Jyr,Yyr,$Y,Kyr,Zyr,e8r,C4,z9e,o8r,r8r,kY,t8r,a8r,n8r,w4,W9e,s8r,l8r,SY,i8r,d8r,c8r,A4,Q9e,f8r,m8r,RY,g8r,h8r,p8r,L4,H9e,u8r,_8r,PY,b8r,v8r,F8r,y4,U9e,T8r,M8r,BY,E8r,C8r,w8r,x4,J9e,A8r,L8r,IY,y8r,x8r,$8r,$4,Y9e,k8r,S8r,NY,R8r,P8r,B8r,k4,K9e,I8r,N8r,qY,q8r,j8r,D8r,S4,Z9e,G8r,O8r,jY,V8r,X8r,z8r,R4,eMe,W8r,Q8r,DY,H8r,U8r,J8r,P4,oMe,Y8r,K8r,GY,Z8r,exr,oxr,B4,rMe,rxr,txr,OY,axr,nxr,sxr,I4,DOe,Rc,N4,tMe,cx,lxr,aMe,ixr,GOe,cr,fx,dxr,Pc,cxr,VY,fxr,mxr,XY,gxr,hxr,pxr,mx,uxr,nMe,_xr,bxr,vxr,Gt,gx,Fxr,sMe,Txr,Mxr,Bc,Exr,lMe,Cxr,wxr,zY,Axr,Lxr,yxr,q4,xxr,qr,hx,$xr,iMe,kxr,Sxr,un,Rxr,dMe,Pxr,Bxr,cMe,Ixr,Nxr,fMe,qxr,jxr,Dxr,ce,j4,mMe,Gxr,Oxr,WY,Vxr,Xxr,zxr,D4,gMe,Wxr,Qxr,QY,Hxr,Uxr,Jxr,G4,hMe,Yxr,Kxr,HY,Zxr,e$r,o$r,O4,pMe,r$r,t$r,UY,a$r,n$r,s$r,V4,uMe,l$r,i$r,JY,d$r,c$r,f$r,X4,_Me,m$r,g$r,YY,h$r,p$r,u$r,z4,bMe,_$r,b$r,KY,v$r,F$r,T$r,W4,vMe,M$r,E$r,ZY,C$r,w$r,A$r,Q4,FMe,L$r,y$r,eK,x$r,$$r,k$r,H4,TMe,S$r,R$r,oK,P$r,B$r,I$r,U4,MMe,N$r,q$r,rK,j$r,D$r,G$r,J4,EMe,O$r,V$r,tK,X$r,z$r,W$r,Y4,CMe,Q$r,H$r,aK,U$r,J$r,Y$r,K4,wMe,K$r,Z$r,nK,ekr,okr,rkr,Z4,AMe,tkr,akr,sK,nkr,skr,lkr,eC,LMe,ikr,dkr,lK,ckr,fkr,mkr,oC,yMe,gkr,hkr,iK,pkr,ukr,_kr,rC,xMe,bkr,vkr,dK,Fkr,Tkr,Mkr,tC,$Me,Ekr,Ckr,cK,wkr,Akr,Lkr,aC,kMe,ykr,xkr,fK,$kr,kkr,Skr,nC,OOe,Ic,sC,SMe,px,Rkr,RMe,Pkr,VOe,fr,ux,Bkr,Nc,Ikr,mK,Nkr,qkr,gK,jkr,Dkr,Gkr,_x,Okr,PMe,Vkr,Xkr,zkr,Ot,bx,Wkr,BMe,Qkr,Hkr,qc,Ukr,IMe,Jkr,Ykr,hK,Kkr,Zkr,eSr,lC,oSr,jr,vx,rSr,NMe,tSr,aSr,_n,nSr,qMe,sSr,lSr,jMe,iSr,dSr,DMe,cSr,fSr,mSr,GMe,iC,OMe,gSr,hSr,pK,pSr,uSr,_Sr,dC,XOe,jc,cC,VMe,Fx,bSr,XMe,vSr,zOe,mr,Tx,FSr,Dc,TSr,uK,MSr,ESr,_K,CSr,wSr,ASr,Mx,LSr,zMe,ySr,xSr,$Sr,Vt,Ex,kSr,WMe,SSr,RSr,Gc,PSr,QMe,BSr,ISr,bK,NSr,qSr,jSr,fC,DSr,Dr,Cx,GSr,HMe,OSr,VSr,bn,XSr,UMe,zSr,WSr,JMe,QSr,HSr,YMe,USr,JSr,YSr,KMe,mC,ZMe,KSr,ZSr,vK,eRr,oRr,rRr,gC,WOe,Oc,hC,eEe,wx,tRr,oEe,aRr,QOe,gr,Ax,nRr,Vc,sRr,FK,lRr,iRr,TK,dRr,cRr,fRr,Lx,mRr,rEe,gRr,hRr,pRr,Xt,yx,uRr,tEe,_Rr,bRr,Xc,vRr,aEe,FRr,TRr,MK,MRr,ERr,CRr,pC,wRr,Gr,xx,ARr,nEe,LRr,yRr,vn,xRr,sEe,$Rr,kRr,lEe,SRr,RRr,iEe,PRr,BRr,IRr,oe,uC,dEe,NRr,qRr,EK,jRr,DRr,GRr,_C,cEe,ORr,VRr,CK,XRr,zRr,WRr,bC,fEe,QRr,HRr,wK,URr,JRr,YRr,vC,mEe,KRr,ZRr,AK,ePr,oPr,rPr,FC,gEe,tPr,aPr,LK,nPr,sPr,lPr,TC,hEe,iPr,dPr,yK,cPr,fPr,mPr,MC,pEe,gPr,hPr,xK,pPr,uPr,_Pr,EC,uEe,bPr,vPr,$K,FPr,TPr,MPr,CC,_Ee,EPr,CPr,kK,wPr,APr,LPr,wC,bEe,yPr,xPr,SK,$Pr,kPr,SPr,AC,vEe,RPr,PPr,RK,BPr,IPr,NPr,LC,FEe,qPr,jPr,PK,DPr,GPr,OPr,yC,TEe,VPr,XPr,BK,zPr,WPr,QPr,xC,MEe,HPr,UPr,IK,JPr,YPr,KPr,$C,EEe,ZPr,eBr,NK,oBr,rBr,tBr,kC,CEe,aBr,nBr,qK,sBr,lBr,iBr,SC,wEe,dBr,cBr,jK,fBr,mBr,gBr,RC,AEe,hBr,pBr,DK,uBr,_Br,bBr,PC,LEe,vBr,FBr,GK,TBr,MBr,EBr,BC,yEe,CBr,wBr,OK,ABr,LBr,yBr,IC,xEe,xBr,$Br,VK,kBr,SBr,RBr,NC,$Ee,PBr,BBr,XK,IBr,NBr,qBr,qC,kEe,jBr,DBr,zK,GBr,OBr,VBr,jC,SEe,XBr,zBr,WK,WBr,QBr,HBr,DC,REe,UBr,JBr,QK,YBr,KBr,ZBr,GC,PEe,eIr,oIr,HK,rIr,tIr,aIr,OC,BEe,nIr,sIr,UK,lIr,iIr,dIr,VC,HOe,zc,XC,IEe,$x,cIr,NEe,fIr,UOe,hr,kx,mIr,Wc,gIr,JK,hIr,pIr,YK,uIr,_Ir,bIr,Sx,vIr,qEe,FIr,TIr,MIr,zt,Rx,EIr,jEe,CIr,wIr,Qc,AIr,DEe,LIr,yIr,KK,xIr,$Ir,kIr,zC,SIr,Or,Px,RIr,GEe,PIr,BIr,Fn,IIr,OEe,NIr,qIr,VEe,jIr,DIr,XEe,GIr,OIr,VIr,xe,WC,zEe,XIr,zIr,ZK,WIr,QIr,HIr,QC,WEe,UIr,JIr,eZ,YIr,KIr,ZIr,HC,QEe,eNr,oNr,oZ,rNr,tNr,aNr,UC,HEe,nNr,sNr,rZ,lNr,iNr,dNr,JC,UEe,cNr,fNr,tZ,mNr,gNr,hNr,YC,JEe,pNr,uNr,aZ,_Nr,bNr,vNr,KC,YEe,FNr,TNr,nZ,MNr,ENr,CNr,ZC,KEe,wNr,ANr,sZ,LNr,yNr,xNr,e5,ZEe,$Nr,kNr,lZ,SNr,RNr,PNr,o5,e4e,BNr,INr,iZ,NNr,qNr,jNr,r5,JOe,Hc,t5,o4e,Bx,DNr,r4e,GNr,YOe,pr,Ix,ONr,Uc,VNr,dZ,XNr,zNr,cZ,WNr,QNr,HNr,Nx,UNr,t4e,JNr,YNr,KNr,Wt,qx,ZNr,a4e,eqr,oqr,Jc,rqr,n4e,tqr,aqr,fZ,nqr,sqr,lqr,a5,iqr,Vr,jx,dqr,s4e,cqr,fqr,Tn,mqr,l4e,gqr,hqr,i4e,pqr,uqr,d4e,_qr,bqr,vqr,Ee,n5,c4e,Fqr,Tqr,mZ,Mqr,Eqr,Cqr,s5,f4e,wqr,Aqr,gZ,Lqr,yqr,xqr,l5,m4e,$qr,kqr,hZ,Sqr,Rqr,Pqr,i5,g4e,Bqr,Iqr,pZ,Nqr,qqr,jqr,d5,h4e,Dqr,Gqr,uZ,Oqr,Vqr,Xqr,c5,p4e,zqr,Wqr,_Z,Qqr,Hqr,Uqr,f5,u4e,Jqr,Yqr,bZ,Kqr,Zqr,ejr,m5,_4e,ojr,rjr,vZ,tjr,ajr,njr,g5,b4e,sjr,ljr,FZ,ijr,djr,cjr,h5,v4e,fjr,mjr,TZ,gjr,hjr,pjr,p5,F4e,ujr,_jr,MZ,bjr,vjr,Fjr,u5,T4e,Tjr,Mjr,EZ,Ejr,Cjr,wjr,_5,M4e,Ajr,Ljr,CZ,yjr,xjr,$jr,b5,KOe,Yc,v5,E4e,Dx,kjr,C4e,Sjr,ZOe,ur,Gx,Rjr,Kc,Pjr,wZ,Bjr,Ijr,AZ,Njr,qjr,jjr,Ox,Djr,w4e,Gjr,Ojr,Vjr,Qt,Vx,Xjr,A4e,zjr,Wjr,Zc,Qjr,L4e,Hjr,Ujr,LZ,Jjr,Yjr,Kjr,F5,Zjr,Xr,Xx,eDr,y4e,oDr,rDr,Mn,tDr,x4e,aDr,nDr,$4e,sDr,lDr,k4e,iDr,dDr,cDr,$e,T5,S4e,fDr,mDr,yZ,gDr,hDr,pDr,M5,R4e,uDr,_Dr,xZ,bDr,vDr,FDr,E5,P4e,TDr,MDr,$Z,EDr,CDr,wDr,C5,B4e,ADr,LDr,kZ,yDr,xDr,$Dr,w5,I4e,kDr,SDr,SZ,RDr,PDr,BDr,A5,N4e,IDr,NDr,RZ,qDr,jDr,DDr,L5,q4e,GDr,ODr,PZ,VDr,XDr,zDr,y5,j4e,WDr,QDr,BZ,HDr,UDr,JDr,x5,D4e,YDr,KDr,IZ,ZDr,eGr,oGr,$5,G4e,rGr,tGr,NZ,aGr,nGr,sGr,k5,eVe,ef,S5,O4e,zx,lGr,V4e,iGr,oVe,_r,Wx,dGr,of,cGr,qZ,fGr,mGr,jZ,gGr,hGr,pGr,Qx,uGr,X4e,_Gr,bGr,vGr,Ht,Hx,FGr,z4e,TGr,MGr,rf,EGr,W4e,CGr,wGr,DZ,AGr,LGr,yGr,R5,xGr,zr,Ux,$Gr,Q4e,kGr,SGr,En,RGr,H4e,PGr,BGr,U4e,IGr,NGr,J4e,qGr,jGr,DGr,ke,P5,Y4e,GGr,OGr,GZ,VGr,XGr,zGr,B5,K4e,WGr,QGr,OZ,HGr,UGr,JGr,I5,Z4e,YGr,KGr,VZ,ZGr,eOr,oOr,N5,eCe,rOr,tOr,XZ,aOr,nOr,sOr,q5,oCe,lOr,iOr,zZ,dOr,cOr,fOr,j5,rCe,mOr,gOr,WZ,hOr,pOr,uOr,D5,tCe,_Or,bOr,QZ,vOr,FOr,TOr,G5,aCe,MOr,EOr,HZ,COr,wOr,AOr,O5,nCe,LOr,yOr,UZ,xOr,$Or,kOr,V5,sCe,SOr,ROr,JZ,POr,BOr,IOr,X5,rVe,tf,z5,lCe,Jx,NOr,iCe,qOr,tVe,br,Yx,jOr,af,DOr,YZ,GOr,OOr,KZ,VOr,XOr,zOr,Kx,WOr,dCe,QOr,HOr,UOr,Ut,Zx,JOr,cCe,YOr,KOr,nf,ZOr,fCe,eVr,oVr,ZZ,rVr,tVr,aVr,W5,nVr,Wr,e$,sVr,mCe,lVr,iVr,Cn,dVr,gCe,cVr,fVr,hCe,mVr,gVr,pCe,hVr,pVr,uVr,Se,Q5,uCe,_Vr,bVr,eee,vVr,FVr,TVr,H5,_Ce,MVr,EVr,oee,CVr,wVr,AVr,U5,bCe,LVr,yVr,ree,xVr,$Vr,kVr,J5,vCe,SVr,RVr,tee,PVr,BVr,IVr,Y5,FCe,NVr,qVr,aee,jVr,DVr,GVr,K5,TCe,OVr,VVr,nee,XVr,zVr,WVr,Z5,MCe,QVr,HVr,see,UVr,JVr,YVr,e3,ECe,KVr,ZVr,lee,eXr,oXr,rXr,o3,CCe,tXr,aXr,iee,nXr,sXr,lXr,r3,wCe,iXr,dXr,dee,cXr,fXr,mXr,t3,aVe,sf,a3,ACe,o$,gXr,LCe,hXr,nVe,vr,r$,pXr,lf,uXr,cee,_Xr,bXr,fee,vXr,FXr,TXr,t$,MXr,yCe,EXr,CXr,wXr,Jt,a$,AXr,xCe,LXr,yXr,df,xXr,$Ce,$Xr,kXr,mee,SXr,RXr,PXr,n3,BXr,Qr,n$,IXr,kCe,NXr,qXr,wn,jXr,SCe,DXr,GXr,RCe,OXr,VXr,PCe,XXr,zXr,WXr,Re,s3,BCe,QXr,HXr,gee,UXr,JXr,YXr,l3,ICe,KXr,ZXr,hee,ezr,ozr,rzr,i3,NCe,tzr,azr,pee,nzr,szr,lzr,d3,qCe,izr,dzr,uee,czr,fzr,mzr,c3,jCe,gzr,hzr,_ee,pzr,uzr,_zr,f3,DCe,bzr,vzr,bee,Fzr,Tzr,Mzr,m3,GCe,Ezr,Czr,vee,wzr,Azr,Lzr,g3,OCe,yzr,xzr,Fee,$zr,kzr,Szr,h3,VCe,Rzr,Pzr,Tee,Bzr,Izr,Nzr,p3,XCe,qzr,jzr,Mee,Dzr,Gzr,Ozr,u3,sVe,cf,_3,zCe,s$,Vzr,WCe,Xzr,lVe,Fr,l$,zzr,ff,Wzr,Eee,Qzr,Hzr,Cee,Uzr,Jzr,Yzr,i$,Kzr,QCe,Zzr,eWr,oWr,Yt,d$,rWr,HCe,tWr,aWr,mf,nWr,UCe,sWr,lWr,wee,iWr,dWr,cWr,b3,fWr,Hr,c$,mWr,JCe,gWr,hWr,An,pWr,YCe,uWr,_Wr,KCe,bWr,vWr,ZCe,FWr,TWr,MWr,Ve,v3,e5e,EWr,CWr,Aee,wWr,AWr,LWr,F3,o5e,yWr,xWr,Lee,$Wr,kWr,SWr,T3,r5e,RWr,PWr,yee,BWr,IWr,NWr,M3,t5e,qWr,jWr,xee,DWr,GWr,OWr,E3,a5e,VWr,XWr,$ee,zWr,WWr,QWr,C3,n5e,HWr,UWr,kee,JWr,YWr,KWr,w3,s5e,ZWr,eQr,See,oQr,rQr,tQr,A3,l5e,aQr,nQr,Ree,sQr,lQr,iQr,L3,iVe,gf,y3,i5e,f$,dQr,d5e,cQr,dVe,Tr,m$,fQr,hf,mQr,Pee,gQr,hQr,Bee,pQr,uQr,_Qr,g$,bQr,c5e,vQr,FQr,TQr,Kt,h$,MQr,f5e,EQr,CQr,pf,wQr,m5e,AQr,LQr,Iee,yQr,xQr,$Qr,x3,kQr,Ur,p$,SQr,g5e,RQr,PQr,Ln,BQr,h5e,IQr,NQr,p5e,qQr,jQr,u5e,DQr,GQr,OQr,Xe,$3,_5e,VQr,XQr,Nee,zQr,WQr,QQr,k3,b5e,HQr,UQr,qee,JQr,YQr,KQr,S3,v5e,ZQr,eHr,jee,oHr,rHr,tHr,R3,F5e,aHr,nHr,Dee,sHr,lHr,iHr,P3,T5e,dHr,cHr,Gee,fHr,mHr,gHr,B3,M5e,hHr,pHr,Oee,uHr,_Hr,bHr,I3,E5e,vHr,FHr,Vee,THr,MHr,EHr,N3,C5e,CHr,wHr,Xee,AHr,LHr,yHr,q3,cVe,uf,j3,w5e,u$,xHr,A5e,$Hr,fVe,Mr,_$,kHr,_f,SHr,zee,RHr,PHr,Wee,BHr,IHr,NHr,b$,qHr,L5e,jHr,DHr,GHr,Zt,v$,OHr,y5e,VHr,XHr,bf,zHr,x5e,WHr,QHr,Qee,HHr,UHr,JHr,D3,YHr,Jr,F$,KHr,$5e,ZHr,eUr,yn,oUr,k5e,rUr,tUr,S5e,aUr,nUr,R5e,sUr,lUr,iUr,P5e,G3,B5e,dUr,cUr,Hee,fUr,mUr,gUr,O3,mVe,vf,V3,I5e,T$,hUr,N5e,pUr,gVe,Er,M$,uUr,Ff,_Ur,Uee,bUr,vUr,Jee,FUr,TUr,MUr,E$,EUr,q5e,CUr,wUr,AUr,ea,C$,LUr,j5e,yUr,xUr,Tf,$Ur,D5e,kUr,SUr,Yee,RUr,PUr,BUr,X3,IUr,Yr,w$,NUr,G5e,qUr,jUr,xn,DUr,O5e,GUr,OUr,V5e,VUr,XUr,X5e,zUr,WUr,QUr,A$,z3,z5e,HUr,UUr,Kee,JUr,YUr,KUr,W3,W5e,ZUr,eJr,Zee,oJr,rJr,tJr,Q3,hVe,Mf,H3,Q5e,L$,aJr,H5e,nJr,pVe,Cr,y$,sJr,Ef,lJr,eoe,iJr,dJr,ooe,cJr,fJr,mJr,x$,gJr,U5e,hJr,pJr,uJr,oa,$$,_Jr,J5e,bJr,vJr,Cf,FJr,Y5e,TJr,MJr,roe,EJr,CJr,wJr,U3,AJr,Kr,k$,LJr,K5e,yJr,xJr,$n,$Jr,Z5e,kJr,SJr,e3e,RJr,PJr,o3e,BJr,IJr,NJr,r3e,J3,t3e,qJr,jJr,toe,DJr,GJr,OJr,Y3,uVe;return d=new re({}),ya=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),M6=new re({}),E6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Rf=new VJr({props:{warning:!0,$$slots:{default:[ojt]},$$scope:{ctx:x}}}),C6=new re({}),w6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/configuration_auto.py#L642"}}),y6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/configuration_auto.py#L665"}}),Gg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[rjt]},$$scope:{ctx:x}}}),x6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/configuration_auto.py#L788"}}),$6=new re({}),k6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/tokenization_auto.py#L405"}}),P6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17109/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/tokenization_auto.py#L419"}}),Eh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[tjt]},$$scope:{ctx:x}}}),B6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/tokenization_auto.py#L618"}}),I6=new re({}),N6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),D6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17109/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),ap=new VJr({props:{$$slots:{default:[ajt]},$$scope:{ctx:x}}}),np=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[njt]},$$scope:{ctx:x}}}),G6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),O6=new re({}),V6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/processing_auto.py#L88"}}),W6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/processing_auto.py#L102"}}),wp=new VJr({props:{$$slots:{default:[sjt]},$$scope:{ctx:x}}}),Ap=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[ljt]},$$scope:{ctx:x}}}),Q6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/processing_auto.py#L255"}}),H6=new re({}),U6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L784"}}),Y6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ofa#transformers.OFAConfig">OFAConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ofa#transformers.OFAModel">OFAModel</a> (OFA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),xp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[ijt]},$$scope:{ctx:x}}}),K6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),x_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[djt]},$$scope:{ctx:x}}}),Z6=new re({}),eL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L791"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),k_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[cjt]},$$scope:{ctx:x}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),M1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[fjt]},$$scope:{ctx:x}}}),aL=new re({}),nL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L806"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),C1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[mjt]},$$scope:{ctx:x}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),c2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[gjt]},$$scope:{ctx:x}}}),dL=new re({}),cL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L813"}}),mL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),m2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[hjt]},$$scope:{ctx:x}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),J2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[pjt]},$$scope:{ctx:x}}}),hL=new re({}),pL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L820"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),K2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ujt]},$$scope:{ctx:x}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),_b=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[_jt]},$$scope:{ctx:x}}}),vL=new re({}),FL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L829"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),vb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[bjt]},$$scope:{ctx:x}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),pv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[vjt]},$$scope:{ctx:x}}}),CL=new re({}),wL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L874"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),_v=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Fjt]},$$scope:{ctx:x}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),Hv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Tjt]},$$scope:{ctx:x}}}),xL=new re({}),$L=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L881"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),Jv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Mjt]},$$scope:{ctx:x}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Ejt]},$$scope:{ctx:x}}}),PL=new re({}),BL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L867"}}),NL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),n0=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Cjt]},$$scope:{ctx:x}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),O0=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[wjt]},$$scope:{ctx:x}}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L838"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),X0=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Ajt]},$$scope:{ctx:x}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),SF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Ljt]},$$scope:{ctx:x}}}),XL=new re({}),zL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L845"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),PF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[yjt]},$$scope:{ctx:x}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),NF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[xjt]},$$scope:{ctx:x}}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L890"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17109/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),jF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[$jt]},$$scope:{ctx:x}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[kjt]},$$scope:{ctx:x}}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L929"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Sjt]},$$scope:{ctx:x}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Rjt]},$$scope:{ctx:x}}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L856"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[Pjt]},$$scope:{ctx:x}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Bjt]},$$scope:{ctx:x}}}),cy=new re({}),fy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L936"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),fT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Ijt]},$$scope:{ctx:x}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Njt]},$$scope:{ctx:x}}}),py=new re({}),uy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L959"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[qjt]},$$scope:{ctx:x}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[jjt]},$$scope:{ctx:x}}}),Fy=new re({}),Ty=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L943"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Djt]},$$scope:{ctx:x}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),zT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Gjt]},$$scope:{ctx:x}}}),wy=new re({}),Ay=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L950"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),QT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Ojt]},$$scope:{ctx:x}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),YT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Vjt]},$$scope:{ctx:x}}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L968"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),ZT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Xjt]},$$scope:{ctx:x}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),s7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[zjt]},$$scope:{ctx:x}}}),Iy=new re({}),Ny=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L975"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),i7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Wjt]},$$scope:{ctx:x}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),g7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Qjt]},$$scope:{ctx:x}}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L922"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),p7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Hjt]},$$scope:{ctx:x}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),v7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Ujt]},$$scope:{ctx:x}}}),Qy=new re({}),Hy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L897"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),T7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Jjt]},$$scope:{ctx:x}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),C7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Yjt]},$$scope:{ctx:x}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L904"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),A7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Kjt]},$$scope:{ctx:x}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),S7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Zjt]},$$scope:{ctx:x}}}),t8=new re({}),a8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L913"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),P7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[eDt]},$$scope:{ctx:x}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),N7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[oDt]},$$scope:{ctx:x}}}),i8=new re({}),d8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),f8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),j7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[rDt]},$$scope:{ctx:x}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),S9=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[tDt]},$$scope:{ctx:x}}}),g8=new re({}),h8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),P9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[aDt]},$$scope:{ctx:x}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),aM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[nDt]},$$scope:{ctx:x}}}),b8=new re({}),v8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),sM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[sDt]},$$scope:{ctx:x}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),FM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[lDt]},$$scope:{ctx:x}}}),E8=new re({}),C8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[iDt]},$$scope:{ctx:x}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),LM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[dDt]},$$scope:{ctx:x}}}),y8=new re({}),x8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),xM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[cDt]},$$scope:{ctx:x}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),JM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[fDt]},$$scope:{ctx:x}}}),R8=new re({}),P8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),KM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[mDt]},$$scope:{ctx:x}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),dE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[gDt]},$$scope:{ctx:x}}}),q8=new re({}),j8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),fE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[hDt]},$$scope:{ctx:x}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),qE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[pDt]},$$scope:{ctx:x}}}),V8=new re({}),X8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),DE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[uDt]},$$scope:{ctx:x}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),a4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[_Dt]},$$scope:{ctx:x}}}),H8=new re({}),U8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),s4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[bDt]},$$scope:{ctx:x}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),d4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[vDt]},$$scope:{ctx:x}}}),ex=new re({}),ox=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),f4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[FDt]},$$scope:{ctx:x}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),g4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[TDt]},$$scope:{ctx:x}}}),nx=new re({}),sx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),p4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[MDt]},$$scope:{ctx:x}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),I4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[EDt]},$$scope:{ctx:x}}}),cx=new re({}),fx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),q4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[CDt]},$$scope:{ctx:x}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),nC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[wDt]},$$scope:{ctx:x}}}),px=new re({}),ux=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),lC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[ADt]},$$scope:{ctx:x}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),dC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[LDt]},$$scope:{ctx:x}}}),Fx=new re({}),Tx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),fC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[yDt]},$$scope:{ctx:x}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),gC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[xDt]},$$scope:{ctx:x}}}),wx=new re({}),Ax=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[$Dt]},$$scope:{ctx:x}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),VC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[kDt]},$$scope:{ctx:x}}}),$x=new re({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),zC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[SDt]},$$scope:{ctx:x}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),r5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[RDt]},$$scope:{ctx:x}}}),Bx=new re({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),a5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[PDt]},$$scope:{ctx:x}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[BDt]},$$scope:{ctx:x}}}),Dx=new re({}),Gx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[IDt]},$$scope:{ctx:x}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[NDt]},$$scope:{ctx:x}}}),zx=new re({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[qDt]},$$scope:{ctx:x}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[jDt]},$$scope:{ctx:x}}}),Jx=new re({}),Yx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[DDt]},$$scope:{ctx:x}}}),e$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),t3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[GDt]},$$scope:{ctx:x}}}),o$=new re({}),r$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),a$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),n3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ODt]},$$scope:{ctx:x}}}),n$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[VDt]},$$scope:{ctx:x}}}),s$=new re({}),l$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),d$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),b3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[XDt]},$$scope:{ctx:x}}}),c$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),L3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[zDt]},$$scope:{ctx:x}}}),f$=new re({}),m$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),h$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),x3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[WDt]},$$scope:{ctx:x}}}),p$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),q3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[QDt]},$$scope:{ctx:x}}}),u$=new re({}),_$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),v$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),D3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[HDt]},$$scope:{ctx:x}}}),F$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),O3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[UDt]},$$scope:{ctx:x}}}),T$=new re({}),M$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),C$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),X3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[JDt]},$$scope:{ctx:x}}}),w$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),Q3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[YDt]},$$scope:{ctx:x}}}),L$=new re({}),y$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),$$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[KDt]},$$scope:{ctx:x}}}),k$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),Y3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ZDt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ti=o("Auto Classes"),yf=l(),at=a("p"),Mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ei=a("code"),b6=o("from_pretrained()"),xf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),Ci=o("Instantiating one of "),Sn=a("a"),v6=o("AutoConfig"),Rn=o(", "),Pn=a("a"),F6=o("AutoModel"),wi=o(`, and
`),Bn=a("a"),T6=o("AutoTokenizer"),Ai=o(" will directly create a class of the relevant architecture. For instance"),$f=l(),F(ya.$$.fragment),Qe=l(),Ae=a("p"),Uk=o("will create a model that is an instance of "),Li=a("a"),Jk=o("BertModel"),Yk=o("."),Co=l(),xa=a("p"),Kk=o("There is one class of "),kf=a("code"),Zk=o("AutoModel"),Aze=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),fGe=l(),yi=a("h2"),Sf=a("a"),Kre=a("span"),F(M6.$$.fragment),Lze=l(),Zre=a("span"),yze=o("Extending the Auto Classes"),mGe=l(),In=a("p"),xze=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ete=a("code"),$ze=o("NewModel"),kze=o(", make sure you have a "),ote=a("code"),Sze=o("NewModelConfig"),Rze=o(` then you can add those to the auto
classes like this:`),gGe=l(),F(E6.$$.fragment),hGe=l(),eS=a("p"),Pze=o("You will then be able to use the auto classes like you would usually do!"),pGe=l(),F(Rf.$$.fragment),uGe=l(),xi=a("h2"),Pf=a("a"),rte=a("span"),F(C6.$$.fragment),Bze=l(),tte=a("span"),Ize=o("AutoConfig"),_Ge=l(),wo=a("div"),F(w6.$$.fragment),Nze=l(),A6=a("p"),qze=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),oS=a("a"),jze=o("from_pretrained()"),Dze=o(" class method."),Gze=l(),L6=a("p"),Oze=o("This class cannot be instantiated directly using "),ate=a("code"),Vze=o("__init__()"),Xze=o(" (throws an error)."),zze=l(),wr=a("div"),F(y6.$$.fragment),Wze=l(),nte=a("p"),Qze=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Hze=l(),$i=a("p"),Uze=o("The configuration class to instantiate is selected based on the "),ste=a("code"),Jze=o("model_type"),Yze=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),lte=a("code"),Kze=o("pretrained_model_name_or_path"),Zze=o(":"),eWe=l(),A=a("ul"),Bf=a("li"),ite=a("strong"),oWe=o("albert"),rWe=o(" \u2014 "),rS=a("a"),tWe=o("AlbertConfig"),aWe=o(" (ALBERT model)"),nWe=l(),If=a("li"),dte=a("strong"),sWe=o("bart"),lWe=o(" \u2014 "),tS=a("a"),iWe=o("BartConfig"),dWe=o(" (BART model)"),cWe=l(),Nf=a("li"),cte=a("strong"),fWe=o("beit"),mWe=o(" \u2014 "),aS=a("a"),gWe=o("BeitConfig"),hWe=o(" (BEiT model)"),pWe=l(),qf=a("li"),fte=a("strong"),uWe=o("bert"),_We=o(" \u2014 "),nS=a("a"),bWe=o("BertConfig"),vWe=o(" (BERT model)"),FWe=l(),jf=a("li"),mte=a("strong"),TWe=o("bert-generation"),MWe=o(" \u2014 "),sS=a("a"),EWe=o("BertGenerationConfig"),CWe=o(" (Bert Generation model)"),wWe=l(),Df=a("li"),gte=a("strong"),AWe=o("big_bird"),LWe=o(" \u2014 "),lS=a("a"),yWe=o("BigBirdConfig"),xWe=o(" (BigBird model)"),$We=l(),Gf=a("li"),hte=a("strong"),kWe=o("bigbird_pegasus"),SWe=o(" \u2014 "),iS=a("a"),RWe=o("BigBirdPegasusConfig"),PWe=o(" (BigBird-Pegasus model)"),BWe=l(),Of=a("li"),pte=a("strong"),IWe=o("blenderbot"),NWe=o(" \u2014 "),dS=a("a"),qWe=o("BlenderbotConfig"),jWe=o(" (Blenderbot model)"),DWe=l(),Vf=a("li"),ute=a("strong"),GWe=o("blenderbot-small"),OWe=o(" \u2014 "),cS=a("a"),VWe=o("BlenderbotSmallConfig"),XWe=o(" (BlenderbotSmall model)"),zWe=l(),Xf=a("li"),_te=a("strong"),WWe=o("bloom"),QWe=o(" \u2014 "),fS=a("a"),HWe=o("BloomConfig"),UWe=o(" (BLOOM model)"),JWe=l(),zf=a("li"),bte=a("strong"),YWe=o("camembert"),KWe=o(" \u2014 "),mS=a("a"),ZWe=o("CamembertConfig"),eQe=o(" (CamemBERT model)"),oQe=l(),Wf=a("li"),vte=a("strong"),rQe=o("canine"),tQe=o(" \u2014 "),gS=a("a"),aQe=o("CanineConfig"),nQe=o(" (CANINE model)"),sQe=l(),Qf=a("li"),Fte=a("strong"),lQe=o("clip"),iQe=o(" \u2014 "),hS=a("a"),dQe=o("CLIPConfig"),cQe=o(" (CLIP model)"),fQe=l(),Hf=a("li"),Tte=a("strong"),mQe=o("convbert"),gQe=o(" \u2014 "),pS=a("a"),hQe=o("ConvBertConfig"),pQe=o(" (ConvBERT model)"),uQe=l(),Uf=a("li"),Mte=a("strong"),_Qe=o("convnext"),bQe=o(" \u2014 "),uS=a("a"),vQe=o("ConvNextConfig"),FQe=o(" (ConvNeXT model)"),TQe=l(),Jf=a("li"),Ete=a("strong"),MQe=o("ctrl"),EQe=o(" \u2014 "),_S=a("a"),CQe=o("CTRLConfig"),wQe=o(" (CTRL model)"),AQe=l(),Yf=a("li"),Cte=a("strong"),LQe=o("cvt"),yQe=o(" \u2014 "),bS=a("a"),xQe=o("CvtConfig"),$Qe=o(" (CvT model)"),kQe=l(),Kf=a("li"),wte=a("strong"),SQe=o("data2vec-audio"),RQe=o(" \u2014 "),vS=a("a"),PQe=o("Data2VecAudioConfig"),BQe=o(" (Data2VecAudio model)"),IQe=l(),Zf=a("li"),Ate=a("strong"),NQe=o("data2vec-text"),qQe=o(" \u2014 "),FS=a("a"),jQe=o("Data2VecTextConfig"),DQe=o(" (Data2VecText model)"),GQe=l(),em=a("li"),Lte=a("strong"),OQe=o("data2vec-vision"),VQe=o(" \u2014 "),TS=a("a"),XQe=o("Data2VecVisionConfig"),zQe=o(" (Data2VecVision model)"),WQe=l(),om=a("li"),yte=a("strong"),QQe=o("deberta"),HQe=o(" \u2014 "),MS=a("a"),UQe=o("DebertaConfig"),JQe=o(" (DeBERTa model)"),YQe=l(),rm=a("li"),xte=a("strong"),KQe=o("deberta-v2"),ZQe=o(" \u2014 "),ES=a("a"),eHe=o("DebertaV2Config"),oHe=o(" (DeBERTa-v2 model)"),rHe=l(),tm=a("li"),$te=a("strong"),tHe=o("decision_transformer"),aHe=o(" \u2014 "),CS=a("a"),nHe=o("DecisionTransformerConfig"),sHe=o(" (Decision Transformer model)"),lHe=l(),am=a("li"),kte=a("strong"),iHe=o("deit"),dHe=o(" \u2014 "),wS=a("a"),cHe=o("DeiTConfig"),fHe=o(" (DeiT model)"),mHe=l(),nm=a("li"),Ste=a("strong"),gHe=o("detr"),hHe=o(" \u2014 "),AS=a("a"),pHe=o("DetrConfig"),uHe=o(" (DETR model)"),_He=l(),sm=a("li"),Rte=a("strong"),bHe=o("distilbert"),vHe=o(" \u2014 "),LS=a("a"),FHe=o("DistilBertConfig"),THe=o(" (DistilBERT model)"),MHe=l(),lm=a("li"),Pte=a("strong"),EHe=o("dpr"),CHe=o(" \u2014 "),yS=a("a"),wHe=o("DPRConfig"),AHe=o(" (DPR model)"),LHe=l(),im=a("li"),Bte=a("strong"),yHe=o("dpt"),xHe=o(" \u2014 "),xS=a("a"),$He=o("DPTConfig"),kHe=o(" (DPT model)"),SHe=l(),dm=a("li"),Ite=a("strong"),RHe=o("electra"),PHe=o(" \u2014 "),$S=a("a"),BHe=o("ElectraConfig"),IHe=o(" (ELECTRA model)"),NHe=l(),cm=a("li"),Nte=a("strong"),qHe=o("encoder-decoder"),jHe=o(" \u2014 "),kS=a("a"),DHe=o("EncoderDecoderConfig"),GHe=o(" (Encoder decoder model)"),OHe=l(),fm=a("li"),qte=a("strong"),VHe=o("flaubert"),XHe=o(" \u2014 "),SS=a("a"),zHe=o("FlaubertConfig"),WHe=o(" (FlauBERT model)"),QHe=l(),mm=a("li"),jte=a("strong"),HHe=o("flava"),UHe=o(" \u2014 "),RS=a("a"),JHe=o("FlavaConfig"),YHe=o(" (FLAVA model)"),KHe=l(),gm=a("li"),Dte=a("strong"),ZHe=o("fnet"),eUe=o(" \u2014 "),PS=a("a"),oUe=o("FNetConfig"),rUe=o(" (FNet model)"),tUe=l(),hm=a("li"),Gte=a("strong"),aUe=o("fsmt"),nUe=o(" \u2014 "),BS=a("a"),sUe=o("FSMTConfig"),lUe=o(" (FairSeq Machine-Translation model)"),iUe=l(),pm=a("li"),Ote=a("strong"),dUe=o("funnel"),cUe=o(" \u2014 "),IS=a("a"),fUe=o("FunnelConfig"),mUe=o(" (Funnel Transformer model)"),gUe=l(),um=a("li"),Vte=a("strong"),hUe=o("glpn"),pUe=o(" \u2014 "),NS=a("a"),uUe=o("GLPNConfig"),_Ue=o(" (GLPN model)"),bUe=l(),_m=a("li"),Xte=a("strong"),vUe=o("gpt2"),FUe=o(" \u2014 "),qS=a("a"),TUe=o("GPT2Config"),MUe=o(" (OpenAI GPT-2 model)"),EUe=l(),bm=a("li"),zte=a("strong"),CUe=o("gpt_neo"),wUe=o(" \u2014 "),jS=a("a"),AUe=o("GPTNeoConfig"),LUe=o(" (GPT Neo model)"),yUe=l(),vm=a("li"),Wte=a("strong"),xUe=o("gpt_neox"),$Ue=o(" \u2014 "),DS=a("a"),kUe=o("GPTNeoXConfig"),SUe=o(" (GPT NeoX model)"),RUe=l(),Fm=a("li"),Qte=a("strong"),PUe=o("gptj"),BUe=o(" \u2014 "),GS=a("a"),IUe=o("GPTJConfig"),NUe=o(" (GPT-J model)"),qUe=l(),Tm=a("li"),Hte=a("strong"),jUe=o("hubert"),DUe=o(" \u2014 "),OS=a("a"),GUe=o("HubertConfig"),OUe=o(" (Hubert model)"),VUe=l(),Mm=a("li"),Ute=a("strong"),XUe=o("ibert"),zUe=o(" \u2014 "),VS=a("a"),WUe=o("IBertConfig"),QUe=o(" (I-BERT model)"),HUe=l(),Em=a("li"),Jte=a("strong"),UUe=o("imagegpt"),JUe=o(" \u2014 "),XS=a("a"),YUe=o("ImageGPTConfig"),KUe=o(" (ImageGPT model)"),ZUe=l(),Cm=a("li"),Yte=a("strong"),eJe=o("layoutlm"),oJe=o(" \u2014 "),zS=a("a"),rJe=o("LayoutLMConfig"),tJe=o(" (LayoutLM model)"),aJe=l(),wm=a("li"),Kte=a("strong"),nJe=o("layoutlmv2"),sJe=o(" \u2014 "),WS=a("a"),lJe=o("LayoutLMv2Config"),iJe=o(" (LayoutLMv2 model)"),dJe=l(),Am=a("li"),Zte=a("strong"),cJe=o("layoutlmv3"),fJe=o(" \u2014 "),QS=a("a"),mJe=o("LayoutLMv3Config"),gJe=o(" (LayoutLMv3 model)"),hJe=l(),Lm=a("li"),eae=a("strong"),pJe=o("led"),uJe=o(" \u2014 "),HS=a("a"),_Je=o("LEDConfig"),bJe=o(" (LED model)"),vJe=l(),ym=a("li"),oae=a("strong"),FJe=o("levit"),TJe=o(" \u2014 "),US=a("a"),MJe=o("LevitConfig"),EJe=o(" (LeViT model)"),CJe=l(),xm=a("li"),rae=a("strong"),wJe=o("longformer"),AJe=o(" \u2014 "),JS=a("a"),LJe=o("LongformerConfig"),yJe=o(" (Longformer model)"),xJe=l(),$m=a("li"),tae=a("strong"),$Je=o("longt5"),kJe=o(" \u2014 "),YS=a("a"),SJe=o("LongT5Config"),RJe=o(" (LongT5 model)"),PJe=l(),km=a("li"),aae=a("strong"),BJe=o("luke"),IJe=o(" \u2014 "),KS=a("a"),NJe=o("LukeConfig"),qJe=o(" (LUKE model)"),jJe=l(),Sm=a("li"),nae=a("strong"),DJe=o("lxmert"),GJe=o(" \u2014 "),ZS=a("a"),OJe=o("LxmertConfig"),VJe=o(" (LXMERT model)"),XJe=l(),Rm=a("li"),sae=a("strong"),zJe=o("m2m_100"),WJe=o(" \u2014 "),eR=a("a"),QJe=o("M2M100Config"),HJe=o(" (M2M100 model)"),UJe=l(),Pm=a("li"),lae=a("strong"),JJe=o("marian"),YJe=o(" \u2014 "),oR=a("a"),KJe=o("MarianConfig"),ZJe=o(" (Marian model)"),eYe=l(),Bm=a("li"),iae=a("strong"),oYe=o("maskformer"),rYe=o(" \u2014 "),rR=a("a"),tYe=o("MaskFormerConfig"),aYe=o(" (MaskFormer model)"),nYe=l(),Im=a("li"),dae=a("strong"),sYe=o("mbart"),lYe=o(" \u2014 "),tR=a("a"),iYe=o("MBartConfig"),dYe=o(" (mBART model)"),cYe=l(),Nm=a("li"),cae=a("strong"),fYe=o("mctct"),mYe=o(" \u2014 "),aR=a("a"),gYe=o("MCTCTConfig"),hYe=o(" (M-CTC-T model)"),pYe=l(),qm=a("li"),fae=a("strong"),uYe=o("megatron-bert"),_Ye=o(" \u2014 "),nR=a("a"),bYe=o("MegatronBertConfig"),vYe=o(" (Megatron-BERT model)"),FYe=l(),jm=a("li"),mae=a("strong"),TYe=o("mobilebert"),MYe=o(" \u2014 "),sR=a("a"),EYe=o("MobileBertConfig"),CYe=o(" (MobileBERT model)"),wYe=l(),Dm=a("li"),gae=a("strong"),AYe=o("mpnet"),LYe=o(" \u2014 "),lR=a("a"),yYe=o("MPNetConfig"),xYe=o(" (MPNet model)"),$Ye=l(),Gm=a("li"),hae=a("strong"),kYe=o("mt5"),SYe=o(" \u2014 "),iR=a("a"),RYe=o("MT5Config"),PYe=o(" (MT5 model)"),BYe=l(),Om=a("li"),pae=a("strong"),IYe=o("nystromformer"),NYe=o(" \u2014 "),dR=a("a"),qYe=o("NystromformerConfig"),jYe=o(" (Nystr\xF6mformer model)"),DYe=l(),Vm=a("li"),uae=a("strong"),GYe=o("ofa"),OYe=o(" \u2014 "),cR=a("a"),VYe=o("OFAConfig"),XYe=o(" (OFA model)"),zYe=l(),Xm=a("li"),_ae=a("strong"),WYe=o("openai-gpt"),QYe=o(" \u2014 "),fR=a("a"),HYe=o("OpenAIGPTConfig"),UYe=o(" (OpenAI GPT model)"),JYe=l(),zm=a("li"),bae=a("strong"),YYe=o("opt"),KYe=o(" \u2014 "),mR=a("a"),ZYe=o("OPTConfig"),eKe=o(" (OPT model)"),oKe=l(),Wm=a("li"),vae=a("strong"),rKe=o("pegasus"),tKe=o(" \u2014 "),gR=a("a"),aKe=o("PegasusConfig"),nKe=o(" (Pegasus model)"),sKe=l(),Qm=a("li"),Fae=a("strong"),lKe=o("perceiver"),iKe=o(" \u2014 "),hR=a("a"),dKe=o("PerceiverConfig"),cKe=o(" (Perceiver model)"),fKe=l(),Hm=a("li"),Tae=a("strong"),mKe=o("plbart"),gKe=o(" \u2014 "),pR=a("a"),hKe=o("PLBartConfig"),pKe=o(" (PLBart model)"),uKe=l(),Um=a("li"),Mae=a("strong"),_Ke=o("poolformer"),bKe=o(" \u2014 "),uR=a("a"),vKe=o("PoolFormerConfig"),FKe=o(" (PoolFormer model)"),TKe=l(),Jm=a("li"),Eae=a("strong"),MKe=o("prophetnet"),EKe=o(" \u2014 "),_R=a("a"),CKe=o("ProphetNetConfig"),wKe=o(" (ProphetNet model)"),AKe=l(),Ym=a("li"),Cae=a("strong"),LKe=o("qdqbert"),yKe=o(" \u2014 "),bR=a("a"),xKe=o("QDQBertConfig"),$Ke=o(" (QDQBert model)"),kKe=l(),Km=a("li"),wae=a("strong"),SKe=o("rag"),RKe=o(" \u2014 "),vR=a("a"),PKe=o("RagConfig"),BKe=o(" (RAG model)"),IKe=l(),Zm=a("li"),Aae=a("strong"),NKe=o("realm"),qKe=o(" \u2014 "),FR=a("a"),jKe=o("RealmConfig"),DKe=o(" (REALM model)"),GKe=l(),eg=a("li"),Lae=a("strong"),OKe=o("reformer"),VKe=o(" \u2014 "),TR=a("a"),XKe=o("ReformerConfig"),zKe=o(" (Reformer model)"),WKe=l(),og=a("li"),yae=a("strong"),QKe=o("regnet"),HKe=o(" \u2014 "),MR=a("a"),UKe=o("RegNetConfig"),JKe=o(" (RegNet model)"),YKe=l(),rg=a("li"),xae=a("strong"),KKe=o("rembert"),ZKe=o(" \u2014 "),ER=a("a"),eZe=o("RemBertConfig"),oZe=o(" (RemBERT model)"),rZe=l(),tg=a("li"),$ae=a("strong"),tZe=o("resnet"),aZe=o(" \u2014 "),CR=a("a"),nZe=o("ResNetConfig"),sZe=o(" (ResNet model)"),lZe=l(),ag=a("li"),kae=a("strong"),iZe=o("retribert"),dZe=o(" \u2014 "),wR=a("a"),cZe=o("RetriBertConfig"),fZe=o(" (RetriBERT model)"),mZe=l(),ng=a("li"),Sae=a("strong"),gZe=o("roberta"),hZe=o(" \u2014 "),AR=a("a"),pZe=o("RobertaConfig"),uZe=o(" (RoBERTa model)"),_Ze=l(),sg=a("li"),Rae=a("strong"),bZe=o("roformer"),vZe=o(" \u2014 "),LR=a("a"),FZe=o("RoFormerConfig"),TZe=o(" (RoFormer model)"),MZe=l(),lg=a("li"),Pae=a("strong"),EZe=o("segformer"),CZe=o(" \u2014 "),yR=a("a"),wZe=o("SegformerConfig"),AZe=o(" (SegFormer model)"),LZe=l(),ig=a("li"),Bae=a("strong"),yZe=o("sew"),xZe=o(" \u2014 "),xR=a("a"),$Ze=o("SEWConfig"),kZe=o(" (SEW model)"),SZe=l(),dg=a("li"),Iae=a("strong"),RZe=o("sew-d"),PZe=o(" \u2014 "),$R=a("a"),BZe=o("SEWDConfig"),IZe=o(" (SEW-D model)"),NZe=l(),cg=a("li"),Nae=a("strong"),qZe=o("speech-encoder-decoder"),jZe=o(" \u2014 "),kR=a("a"),DZe=o("SpeechEncoderDecoderConfig"),GZe=o(" (Speech Encoder decoder model)"),OZe=l(),fg=a("li"),qae=a("strong"),VZe=o("speech_to_text"),XZe=o(" \u2014 "),SR=a("a"),zZe=o("Speech2TextConfig"),WZe=o(" (Speech2Text model)"),QZe=l(),mg=a("li"),jae=a("strong"),HZe=o("speech_to_text_2"),UZe=o(" \u2014 "),RR=a("a"),JZe=o("Speech2Text2Config"),YZe=o(" (Speech2Text2 model)"),KZe=l(),gg=a("li"),Dae=a("strong"),ZZe=o("splinter"),eeo=o(" \u2014 "),PR=a("a"),oeo=o("SplinterConfig"),reo=o(" (Splinter model)"),teo=l(),hg=a("li"),Gae=a("strong"),aeo=o("squeezebert"),neo=o(" \u2014 "),BR=a("a"),seo=o("SqueezeBertConfig"),leo=o(" (SqueezeBERT model)"),ieo=l(),pg=a("li"),Oae=a("strong"),deo=o("swin"),ceo=o(" \u2014 "),IR=a("a"),feo=o("SwinConfig"),meo=o(" (Swin Transformer model)"),geo=l(),ug=a("li"),Vae=a("strong"),heo=o("t5"),peo=o(" \u2014 "),NR=a("a"),ueo=o("T5Config"),_eo=o(" (T5 model)"),beo=l(),_g=a("li"),Xae=a("strong"),veo=o("tapas"),Feo=o(" \u2014 "),qR=a("a"),Teo=o("TapasConfig"),Meo=o(" (TAPAS model)"),Eeo=l(),bg=a("li"),zae=a("strong"),Ceo=o("trajectory_transformer"),weo=o(" \u2014 "),jR=a("a"),Aeo=o("TrajectoryTransformerConfig"),Leo=o(" (Trajectory Transformer model)"),yeo=l(),vg=a("li"),Wae=a("strong"),xeo=o("transfo-xl"),$eo=o(" \u2014 "),DR=a("a"),keo=o("TransfoXLConfig"),Seo=o(" (Transformer-XL model)"),Reo=l(),Fg=a("li"),Qae=a("strong"),Peo=o("trocr"),Beo=o(" \u2014 "),GR=a("a"),Ieo=o("TrOCRConfig"),Neo=o(" (TrOCR model)"),qeo=l(),Tg=a("li"),Hae=a("strong"),jeo=o("unispeech"),Deo=o(" \u2014 "),OR=a("a"),Geo=o("UniSpeechConfig"),Oeo=o(" (UniSpeech model)"),Veo=l(),Mg=a("li"),Uae=a("strong"),Xeo=o("unispeech-sat"),zeo=o(" \u2014 "),VR=a("a"),Weo=o("UniSpeechSatConfig"),Qeo=o(" (UniSpeechSat model)"),Heo=l(),Eg=a("li"),Jae=a("strong"),Ueo=o("van"),Jeo=o(" \u2014 "),XR=a("a"),Yeo=o("VanConfig"),Keo=o(" (VAN model)"),Zeo=l(),Cg=a("li"),Yae=a("strong"),eoo=o("vilt"),ooo=o(" \u2014 "),zR=a("a"),roo=o("ViltConfig"),too=o(" (ViLT model)"),aoo=l(),wg=a("li"),Kae=a("strong"),noo=o("vision-encoder-decoder"),soo=o(" \u2014 "),WR=a("a"),loo=o("VisionEncoderDecoderConfig"),ioo=o(" (Vision Encoder decoder model)"),doo=l(),Ag=a("li"),Zae=a("strong"),coo=o("vision-text-dual-encoder"),foo=o(" \u2014 "),QR=a("a"),moo=o("VisionTextDualEncoderConfig"),goo=o(" (VisionTextDualEncoder model)"),hoo=l(),Lg=a("li"),ene=a("strong"),poo=o("visual_bert"),uoo=o(" \u2014 "),HR=a("a"),_oo=o("VisualBertConfig"),boo=o(" (VisualBERT model)"),voo=l(),yg=a("li"),one=a("strong"),Foo=o("vit"),Too=o(" \u2014 "),UR=a("a"),Moo=o("ViTConfig"),Eoo=o(" (ViT model)"),Coo=l(),xg=a("li"),rne=a("strong"),woo=o("vit_mae"),Aoo=o(" \u2014 "),JR=a("a"),Loo=o("ViTMAEConfig"),yoo=o(" (ViTMAE model)"),xoo=l(),$g=a("li"),tne=a("strong"),$oo=o("wav2vec2"),koo=o(" \u2014 "),YR=a("a"),Soo=o("Wav2Vec2Config"),Roo=o(" (Wav2Vec2 model)"),Poo=l(),kg=a("li"),ane=a("strong"),Boo=o("wav2vec2-conformer"),Ioo=o(" \u2014 "),KR=a("a"),Noo=o("Wav2Vec2ConformerConfig"),qoo=o(" (Wav2Vec2-Conformer model)"),joo=l(),Sg=a("li"),nne=a("strong"),Doo=o("wavlm"),Goo=o(" \u2014 "),ZR=a("a"),Ooo=o("WavLMConfig"),Voo=o(" (WavLM model)"),Xoo=l(),Rg=a("li"),sne=a("strong"),zoo=o("xglm"),Woo=o(" \u2014 "),eP=a("a"),Qoo=o("XGLMConfig"),Hoo=o(" (XGLM model)"),Uoo=l(),Pg=a("li"),lne=a("strong"),Joo=o("xlm"),Yoo=o(" \u2014 "),oP=a("a"),Koo=o("XLMConfig"),Zoo=o(" (XLM model)"),ero=l(),Bg=a("li"),ine=a("strong"),oro=o("xlm-prophetnet"),rro=o(" \u2014 "),rP=a("a"),tro=o("XLMProphetNetConfig"),aro=o(" (XLM-ProphetNet model)"),nro=l(),Ig=a("li"),dne=a("strong"),sro=o("xlm-roberta"),lro=o(" \u2014 "),tP=a("a"),iro=o("XLMRobertaConfig"),dro=o(" (XLM-RoBERTa model)"),cro=l(),Ng=a("li"),cne=a("strong"),fro=o("xlm-roberta-xl"),mro=o(" \u2014 "),aP=a("a"),gro=o("XLMRobertaXLConfig"),hro=o(" (XLM-RoBERTa-XL model)"),pro=l(),qg=a("li"),fne=a("strong"),uro=o("xlnet"),_ro=o(" \u2014 "),nP=a("a"),bro=o("XLNetConfig"),vro=o(" (XLNet model)"),Fro=l(),jg=a("li"),mne=a("strong"),Tro=o("yolos"),Mro=o(" \u2014 "),sP=a("a"),Ero=o("YolosConfig"),Cro=o(" (YOLOS model)"),wro=l(),Dg=a("li"),gne=a("strong"),Aro=o("yoso"),Lro=o(" \u2014 "),lP=a("a"),yro=o("YosoConfig"),xro=o(" (YOSO model)"),$ro=l(),F(Gg.$$.fragment),kro=l(),Og=a("div"),F(x6.$$.fragment),Sro=l(),hne=a("p"),Rro=o("Register a new configuration for this class."),bGe=l(),ki=a("h2"),Vg=a("a"),pne=a("span"),F($6.$$.fragment),Pro=l(),une=a("span"),Bro=o("AutoTokenizer"),vGe=l(),Ao=a("div"),F(k6.$$.fragment),Iro=l(),S6=a("p"),Nro=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),iP=a("a"),qro=o("AutoTokenizer.from_pretrained()"),jro=o(" class method."),Dro=l(),R6=a("p"),Gro=o("This class cannot be instantiated directly using "),_ne=a("code"),Oro=o("__init__()"),Vro=o(" (throws an error)."),Xro=l(),Ar=a("div"),F(P6.$$.fragment),zro=l(),bne=a("p"),Wro=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Qro=l(),$a=a("p"),Hro=o("The tokenizer class to instantiate is selected based on the "),vne=a("code"),Uro=o("model_type"),Jro=o(` property of the config object (either
passed as an argument or loaded from `),Fne=a("code"),Yro=o("pretrained_model_name_or_path"),Kro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tne=a("code"),Zro=o("pretrained_model_name_or_path"),eto=o(":"),oto=l(),k=a("ul"),Nn=a("li"),Mne=a("strong"),rto=o("albert"),tto=o(" \u2014 "),dP=a("a"),ato=o("AlbertTokenizer"),nto=o(" or "),cP=a("a"),sto=o("AlbertTokenizerFast"),lto=o(" (ALBERT model)"),ito=l(),qn=a("li"),Ene=a("strong"),dto=o("bart"),cto=o(" \u2014 "),fP=a("a"),fto=o("BartTokenizer"),mto=o(" or "),mP=a("a"),gto=o("BartTokenizerFast"),hto=o(" (BART model)"),pto=l(),jn=a("li"),Cne=a("strong"),uto=o("barthez"),_to=o(" \u2014 "),gP=a("a"),bto=o("BarthezTokenizer"),vto=o(" or "),hP=a("a"),Fto=o("BarthezTokenizerFast"),Tto=o(" (BARThez model)"),Mto=l(),Xg=a("li"),wne=a("strong"),Eto=o("bartpho"),Cto=o(" \u2014 "),pP=a("a"),wto=o("BartphoTokenizer"),Ato=o(" (BARTpho model)"),Lto=l(),Dn=a("li"),Ane=a("strong"),yto=o("bert"),xto=o(" \u2014 "),uP=a("a"),$to=o("BertTokenizer"),kto=o(" or "),_P=a("a"),Sto=o("BertTokenizerFast"),Rto=o(" (BERT model)"),Pto=l(),zg=a("li"),Lne=a("strong"),Bto=o("bert-generation"),Ito=o(" \u2014 "),bP=a("a"),Nto=o("BertGenerationTokenizer"),qto=o(" (Bert Generation model)"),jto=l(),Wg=a("li"),yne=a("strong"),Dto=o("bert-japanese"),Gto=o(" \u2014 "),vP=a("a"),Oto=o("BertJapaneseTokenizer"),Vto=o(" (BertJapanese model)"),Xto=l(),Qg=a("li"),xne=a("strong"),zto=o("bertweet"),Wto=o(" \u2014 "),FP=a("a"),Qto=o("BertweetTokenizer"),Hto=o(" (BERTweet model)"),Uto=l(),Gn=a("li"),$ne=a("strong"),Jto=o("big_bird"),Yto=o(" \u2014 "),TP=a("a"),Kto=o("BigBirdTokenizer"),Zto=o(" or "),MP=a("a"),eao=o("BigBirdTokenizerFast"),oao=o(" (BigBird model)"),rao=l(),On=a("li"),kne=a("strong"),tao=o("bigbird_pegasus"),aao=o(" \u2014 "),EP=a("a"),nao=o("PegasusTokenizer"),sao=o(" or "),CP=a("a"),lao=o("PegasusTokenizerFast"),iao=o(" (BigBird-Pegasus model)"),dao=l(),Vn=a("li"),Sne=a("strong"),cao=o("blenderbot"),fao=o(" \u2014 "),wP=a("a"),mao=o("BlenderbotTokenizer"),gao=o(" or "),AP=a("a"),hao=o("BlenderbotTokenizerFast"),pao=o(" (Blenderbot model)"),uao=l(),Hg=a("li"),Rne=a("strong"),_ao=o("blenderbot-small"),bao=o(" \u2014 "),LP=a("a"),vao=o("BlenderbotSmallTokenizer"),Fao=o(" (BlenderbotSmall model)"),Tao=l(),Ug=a("li"),Pne=a("strong"),Mao=o("bloom"),Eao=o(" \u2014 "),yP=a("a"),Cao=o("BloomTokenizerFast"),wao=o(" (BLOOM model)"),Aao=l(),Jg=a("li"),Bne=a("strong"),Lao=o("byt5"),yao=o(" \u2014 "),xP=a("a"),xao=o("ByT5Tokenizer"),$ao=o(" (ByT5 model)"),kao=l(),Xn=a("li"),Ine=a("strong"),Sao=o("camembert"),Rao=o(" \u2014 "),$P=a("a"),Pao=o("CamembertTokenizer"),Bao=o(" or "),kP=a("a"),Iao=o("CamembertTokenizerFast"),Nao=o(" (CamemBERT model)"),qao=l(),Yg=a("li"),Nne=a("strong"),jao=o("canine"),Dao=o(" \u2014 "),SP=a("a"),Gao=o("CanineTokenizer"),Oao=o(" (CANINE model)"),Vao=l(),zn=a("li"),qne=a("strong"),Xao=o("clip"),zao=o(" \u2014 "),RP=a("a"),Wao=o("CLIPTokenizer"),Qao=o(" or "),PP=a("a"),Hao=o("CLIPTokenizerFast"),Uao=o(" (CLIP model)"),Jao=l(),Wn=a("li"),jne=a("strong"),Yao=o("convbert"),Kao=o(" \u2014 "),BP=a("a"),Zao=o("ConvBertTokenizer"),eno=o(" or "),IP=a("a"),ono=o("ConvBertTokenizerFast"),rno=o(" (ConvBERT model)"),tno=l(),Qn=a("li"),Dne=a("strong"),ano=o("cpm"),nno=o(" \u2014 "),NP=a("a"),sno=o("CpmTokenizer"),lno=o(" or "),qP=a("a"),ino=o("CpmTokenizerFast"),dno=o(" (CPM model)"),cno=l(),Kg=a("li"),Gne=a("strong"),fno=o("ctrl"),mno=o(" \u2014 "),jP=a("a"),gno=o("CTRLTokenizer"),hno=o(" (CTRL model)"),pno=l(),Hn=a("li"),One=a("strong"),uno=o("data2vec-text"),_no=o(" \u2014 "),DP=a("a"),bno=o("RobertaTokenizer"),vno=o(" or "),GP=a("a"),Fno=o("RobertaTokenizerFast"),Tno=o(" (Data2VecText model)"),Mno=l(),Un=a("li"),Vne=a("strong"),Eno=o("deberta"),Cno=o(" \u2014 "),OP=a("a"),wno=o("DebertaTokenizer"),Ano=o(" or "),VP=a("a"),Lno=o("DebertaTokenizerFast"),yno=o(" (DeBERTa model)"),xno=l(),Jn=a("li"),Xne=a("strong"),$no=o("deberta-v2"),kno=o(" \u2014 "),XP=a("a"),Sno=o("DebertaV2Tokenizer"),Rno=o(" or "),zP=a("a"),Pno=o("DebertaV2TokenizerFast"),Bno=o(" (DeBERTa-v2 model)"),Ino=l(),Yn=a("li"),zne=a("strong"),Nno=o("distilbert"),qno=o(" \u2014 "),WP=a("a"),jno=o("DistilBertTokenizer"),Dno=o(" or "),QP=a("a"),Gno=o("DistilBertTokenizerFast"),Ono=o(" (DistilBERT model)"),Vno=l(),Kn=a("li"),Wne=a("strong"),Xno=o("dpr"),zno=o(" \u2014 "),HP=a("a"),Wno=o("DPRQuestionEncoderTokenizer"),Qno=o(" or "),UP=a("a"),Hno=o("DPRQuestionEncoderTokenizerFast"),Uno=o(" (DPR model)"),Jno=l(),Zn=a("li"),Qne=a("strong"),Yno=o("electra"),Kno=o(" \u2014 "),JP=a("a"),Zno=o("ElectraTokenizer"),eso=o(" or "),YP=a("a"),oso=o("ElectraTokenizerFast"),rso=o(" (ELECTRA model)"),tso=l(),Zg=a("li"),Hne=a("strong"),aso=o("flaubert"),nso=o(" \u2014 "),KP=a("a"),sso=o("FlaubertTokenizer"),lso=o(" (FlauBERT model)"),iso=l(),es=a("li"),Une=a("strong"),dso=o("fnet"),cso=o(" \u2014 "),ZP=a("a"),fso=o("FNetTokenizer"),mso=o(" or "),eB=a("a"),gso=o("FNetTokenizerFast"),hso=o(" (FNet model)"),pso=l(),eh=a("li"),Jne=a("strong"),uso=o("fsmt"),_so=o(" \u2014 "),oB=a("a"),bso=o("FSMTTokenizer"),vso=o(" (FairSeq Machine-Translation model)"),Fso=l(),os=a("li"),Yne=a("strong"),Tso=o("funnel"),Mso=o(" \u2014 "),rB=a("a"),Eso=o("FunnelTokenizer"),Cso=o(" or "),tB=a("a"),wso=o("FunnelTokenizerFast"),Aso=o(" (Funnel Transformer model)"),Lso=l(),rs=a("li"),Kne=a("strong"),yso=o("gpt2"),xso=o(" \u2014 "),aB=a("a"),$so=o("GPT2Tokenizer"),kso=o(" or "),nB=a("a"),Sso=o("GPT2TokenizerFast"),Rso=o(" (OpenAI GPT-2 model)"),Pso=l(),ts=a("li"),Zne=a("strong"),Bso=o("gpt_neo"),Iso=o(" \u2014 "),sB=a("a"),Nso=o("GPT2Tokenizer"),qso=o(" or "),lB=a("a"),jso=o("GPT2TokenizerFast"),Dso=o(" (GPT Neo model)"),Gso=l(),oh=a("li"),ese=a("strong"),Oso=o("gpt_neox"),Vso=o(" \u2014 "),iB=a("a"),Xso=o("GPTNeoXTokenizerFast"),zso=o(" (GPT NeoX model)"),Wso=l(),as=a("li"),ose=a("strong"),Qso=o("gptj"),Hso=o(" \u2014 "),dB=a("a"),Uso=o("GPT2Tokenizer"),Jso=o(" or "),cB=a("a"),Yso=o("GPT2TokenizerFast"),Kso=o(" (GPT-J model)"),Zso=l(),ns=a("li"),rse=a("strong"),elo=o("herbert"),olo=o(" \u2014 "),fB=a("a"),rlo=o("HerbertTokenizer"),tlo=o(" or "),mB=a("a"),alo=o("HerbertTokenizerFast"),nlo=o(" (HerBERT model)"),slo=l(),rh=a("li"),tse=a("strong"),llo=o("hubert"),ilo=o(" \u2014 "),gB=a("a"),dlo=o("Wav2Vec2CTCTokenizer"),clo=o(" (Hubert model)"),flo=l(),ss=a("li"),ase=a("strong"),mlo=o("ibert"),glo=o(" \u2014 "),hB=a("a"),hlo=o("RobertaTokenizer"),plo=o(" or "),pB=a("a"),ulo=o("RobertaTokenizerFast"),_lo=o(" (I-BERT model)"),blo=l(),ls=a("li"),nse=a("strong"),vlo=o("layoutlm"),Flo=o(" \u2014 "),uB=a("a"),Tlo=o("LayoutLMTokenizer"),Mlo=o(" or "),_B=a("a"),Elo=o("LayoutLMTokenizerFast"),Clo=o(" (LayoutLM model)"),wlo=l(),is=a("li"),sse=a("strong"),Alo=o("layoutlmv2"),Llo=o(" \u2014 "),bB=a("a"),ylo=o("LayoutLMv2Tokenizer"),xlo=o(" or "),vB=a("a"),$lo=o("LayoutLMv2TokenizerFast"),klo=o(" (LayoutLMv2 model)"),Slo=l(),ds=a("li"),lse=a("strong"),Rlo=o("layoutlmv3"),Plo=o(" \u2014 "),FB=a("a"),Blo=o("LayoutLMv3Tokenizer"),Ilo=o(" or "),TB=a("a"),Nlo=o("LayoutLMv3TokenizerFast"),qlo=o(" (LayoutLMv3 model)"),jlo=l(),cs=a("li"),ise=a("strong"),Dlo=o("layoutxlm"),Glo=o(" \u2014 "),MB=a("a"),Olo=o("LayoutXLMTokenizer"),Vlo=o(" or "),EB=a("a"),Xlo=o("LayoutXLMTokenizerFast"),zlo=o(" (LayoutXLM model)"),Wlo=l(),fs=a("li"),dse=a("strong"),Qlo=o("led"),Hlo=o(" \u2014 "),CB=a("a"),Ulo=o("LEDTokenizer"),Jlo=o(" or "),wB=a("a"),Ylo=o("LEDTokenizerFast"),Klo=o(" (LED model)"),Zlo=l(),ms=a("li"),cse=a("strong"),eio=o("longformer"),oio=o(" \u2014 "),AB=a("a"),rio=o("LongformerTokenizer"),tio=o(" or "),LB=a("a"),aio=o("LongformerTokenizerFast"),nio=o(" (Longformer model)"),sio=l(),gs=a("li"),fse=a("strong"),lio=o("longt5"),iio=o(" \u2014 "),yB=a("a"),dio=o("T5Tokenizer"),cio=o(" or "),xB=a("a"),fio=o("T5TokenizerFast"),mio=o(" (LongT5 model)"),gio=l(),th=a("li"),mse=a("strong"),hio=o("luke"),pio=o(" \u2014 "),$B=a("a"),uio=o("LukeTokenizer"),_io=o(" (LUKE model)"),bio=l(),hs=a("li"),gse=a("strong"),vio=o("lxmert"),Fio=o(" \u2014 "),kB=a("a"),Tio=o("LxmertTokenizer"),Mio=o(" or "),SB=a("a"),Eio=o("LxmertTokenizerFast"),Cio=o(" (LXMERT model)"),wio=l(),ah=a("li"),hse=a("strong"),Aio=o("m2m_100"),Lio=o(" \u2014 "),RB=a("a"),yio=o("M2M100Tokenizer"),xio=o(" (M2M100 model)"),$io=l(),nh=a("li"),pse=a("strong"),kio=o("marian"),Sio=o(" \u2014 "),PB=a("a"),Rio=o("MarianTokenizer"),Pio=o(" (Marian model)"),Bio=l(),ps=a("li"),use=a("strong"),Iio=o("mbart"),Nio=o(" \u2014 "),BB=a("a"),qio=o("MBartTokenizer"),jio=o(" or "),IB=a("a"),Dio=o("MBartTokenizerFast"),Gio=o(" (mBART model)"),Oio=l(),us=a("li"),_se=a("strong"),Vio=o("mbart50"),Xio=o(" \u2014 "),NB=a("a"),zio=o("MBart50Tokenizer"),Wio=o(" or "),qB=a("a"),Qio=o("MBart50TokenizerFast"),Hio=o(" (mBART-50 model)"),Uio=l(),_s=a("li"),bse=a("strong"),Jio=o("megatron-bert"),Yio=o(" \u2014 "),jB=a("a"),Kio=o("BertTokenizer"),Zio=o(" or "),DB=a("a"),edo=o("BertTokenizerFast"),odo=o(" (Megatron-BERT model)"),rdo=l(),sh=a("li"),vse=a("strong"),tdo=o("mluke"),ado=o(" \u2014 "),GB=a("a"),ndo=o("MLukeTokenizer"),sdo=o(" (mLUKE model)"),ldo=l(),bs=a("li"),Fse=a("strong"),ido=o("mobilebert"),ddo=o(" \u2014 "),OB=a("a"),cdo=o("MobileBertTokenizer"),fdo=o(" or "),VB=a("a"),mdo=o("MobileBertTokenizerFast"),gdo=o(" (MobileBERT model)"),hdo=l(),vs=a("li"),Tse=a("strong"),pdo=o("mpnet"),udo=o(" \u2014 "),XB=a("a"),_do=o("MPNetTokenizer"),bdo=o(" or "),zB=a("a"),vdo=o("MPNetTokenizerFast"),Fdo=o(" (MPNet model)"),Tdo=l(),Fs=a("li"),Mse=a("strong"),Mdo=o("mt5"),Edo=o(" \u2014 "),WB=a("a"),Cdo=o("MT5Tokenizer"),wdo=o(" or "),QB=a("a"),Ado=o("MT5TokenizerFast"),Ldo=o(" (MT5 model)"),ydo=l(),Ts=a("li"),Ese=a("strong"),xdo=o("nystromformer"),$do=o(" \u2014 "),HB=a("a"),kdo=o("AlbertTokenizer"),Sdo=o(" or "),UB=a("a"),Rdo=o("AlbertTokenizerFast"),Pdo=o(" (Nystr\xF6mformer model)"),Bdo=l(),Ms=a("li"),Cse=a("strong"),Ido=o("ofa"),Ndo=o(" \u2014 "),JB=a("a"),qdo=o("OFATokenizer"),jdo=o(" or "),YB=a("a"),Ddo=o("OFATokenizerFast"),Gdo=o(" (OFA model)"),Odo=l(),Es=a("li"),wse=a("strong"),Vdo=o("openai-gpt"),Xdo=o(" \u2014 "),KB=a("a"),zdo=o("OpenAIGPTTokenizer"),Wdo=o(" or "),ZB=a("a"),Qdo=o("OpenAIGPTTokenizerFast"),Hdo=o(" (OpenAI GPT model)"),Udo=l(),lh=a("li"),Ase=a("strong"),Jdo=o("opt"),Ydo=o(" \u2014 "),eI=a("a"),Kdo=o("GPT2Tokenizer"),Zdo=o(" (OPT model)"),eco=l(),Cs=a("li"),Lse=a("strong"),oco=o("pegasus"),rco=o(" \u2014 "),oI=a("a"),tco=o("PegasusTokenizer"),aco=o(" or "),rI=a("a"),nco=o("PegasusTokenizerFast"),sco=o(" (Pegasus model)"),lco=l(),ih=a("li"),yse=a("strong"),ico=o("perceiver"),dco=o(" \u2014 "),tI=a("a"),cco=o("PerceiverTokenizer"),fco=o(" (Perceiver model)"),mco=l(),dh=a("li"),xse=a("strong"),gco=o("phobert"),hco=o(" \u2014 "),aI=a("a"),pco=o("PhobertTokenizer"),uco=o(" (PhoBERT model)"),_co=l(),ch=a("li"),$se=a("strong"),bco=o("plbart"),vco=o(" \u2014 "),nI=a("a"),Fco=o("PLBartTokenizer"),Tco=o(" (PLBart model)"),Mco=l(),fh=a("li"),kse=a("strong"),Eco=o("prophetnet"),Cco=o(" \u2014 "),sI=a("a"),wco=o("ProphetNetTokenizer"),Aco=o(" (ProphetNet model)"),Lco=l(),ws=a("li"),Sse=a("strong"),yco=o("qdqbert"),xco=o(" \u2014 "),lI=a("a"),$co=o("BertTokenizer"),kco=o(" or "),iI=a("a"),Sco=o("BertTokenizerFast"),Rco=o(" (QDQBert model)"),Pco=l(),mh=a("li"),Rse=a("strong"),Bco=o("rag"),Ico=o(" \u2014 "),dI=a("a"),Nco=o("RagTokenizer"),qco=o(" (RAG model)"),jco=l(),As=a("li"),Pse=a("strong"),Dco=o("realm"),Gco=o(" \u2014 "),cI=a("a"),Oco=o("RealmTokenizer"),Vco=o(" or "),fI=a("a"),Xco=o("RealmTokenizerFast"),zco=o(" (REALM model)"),Wco=l(),Ls=a("li"),Bse=a("strong"),Qco=o("reformer"),Hco=o(" \u2014 "),mI=a("a"),Uco=o("ReformerTokenizer"),Jco=o(" or "),gI=a("a"),Yco=o("ReformerTokenizerFast"),Kco=o(" (Reformer model)"),Zco=l(),ys=a("li"),Ise=a("strong"),efo=o("rembert"),ofo=o(" \u2014 "),hI=a("a"),rfo=o("RemBertTokenizer"),tfo=o(" or "),pI=a("a"),afo=o("RemBertTokenizerFast"),nfo=o(" (RemBERT model)"),sfo=l(),xs=a("li"),Nse=a("strong"),lfo=o("retribert"),ifo=o(" \u2014 "),uI=a("a"),dfo=o("RetriBertTokenizer"),cfo=o(" or "),_I=a("a"),ffo=o("RetriBertTokenizerFast"),mfo=o(" (RetriBERT model)"),gfo=l(),$s=a("li"),qse=a("strong"),hfo=o("roberta"),pfo=o(" \u2014 "),bI=a("a"),ufo=o("RobertaTokenizer"),_fo=o(" or "),vI=a("a"),bfo=o("RobertaTokenizerFast"),vfo=o(" (RoBERTa model)"),Ffo=l(),ks=a("li"),jse=a("strong"),Tfo=o("roformer"),Mfo=o(" \u2014 "),FI=a("a"),Efo=o("RoFormerTokenizer"),Cfo=o(" or "),TI=a("a"),wfo=o("RoFormerTokenizerFast"),Afo=o(" (RoFormer model)"),Lfo=l(),gh=a("li"),Dse=a("strong"),yfo=o("speech_to_text"),xfo=o(" \u2014 "),MI=a("a"),$fo=o("Speech2TextTokenizer"),kfo=o(" (Speech2Text model)"),Sfo=l(),hh=a("li"),Gse=a("strong"),Rfo=o("speech_to_text_2"),Pfo=o(" \u2014 "),EI=a("a"),Bfo=o("Speech2Text2Tokenizer"),Ifo=o(" (Speech2Text2 model)"),Nfo=l(),Ss=a("li"),Ose=a("strong"),qfo=o("splinter"),jfo=o(" \u2014 "),CI=a("a"),Dfo=o("SplinterTokenizer"),Gfo=o(" or "),wI=a("a"),Ofo=o("SplinterTokenizerFast"),Vfo=o(" (Splinter model)"),Xfo=l(),Rs=a("li"),Vse=a("strong"),zfo=o("squeezebert"),Wfo=o(" \u2014 "),AI=a("a"),Qfo=o("SqueezeBertTokenizer"),Hfo=o(" or "),LI=a("a"),Ufo=o("SqueezeBertTokenizerFast"),Jfo=o(" (SqueezeBERT model)"),Yfo=l(),Ps=a("li"),Xse=a("strong"),Kfo=o("t5"),Zfo=o(" \u2014 "),yI=a("a"),emo=o("T5Tokenizer"),omo=o(" or "),xI=a("a"),rmo=o("T5TokenizerFast"),tmo=o(" (T5 model)"),amo=l(),ph=a("li"),zse=a("strong"),nmo=o("tapas"),smo=o(" \u2014 "),$I=a("a"),lmo=o("TapasTokenizer"),imo=o(" (TAPAS model)"),dmo=l(),uh=a("li"),Wse=a("strong"),cmo=o("tapex"),fmo=o(" \u2014 "),kI=a("a"),mmo=o("TapexTokenizer"),gmo=o(" (TAPEX model)"),hmo=l(),_h=a("li"),Qse=a("strong"),pmo=o("transfo-xl"),umo=o(" \u2014 "),SI=a("a"),_mo=o("TransfoXLTokenizer"),bmo=o(" (Transformer-XL model)"),vmo=l(),Bs=a("li"),Hse=a("strong"),Fmo=o("vilt"),Tmo=o(" \u2014 "),RI=a("a"),Mmo=o("BertTokenizer"),Emo=o(" or "),PI=a("a"),Cmo=o("BertTokenizerFast"),wmo=o(" (ViLT model)"),Amo=l(),Is=a("li"),Use=a("strong"),Lmo=o("visual_bert"),ymo=o(" \u2014 "),BI=a("a"),xmo=o("BertTokenizer"),$mo=o(" or "),II=a("a"),kmo=o("BertTokenizerFast"),Smo=o(" (VisualBERT model)"),Rmo=l(),bh=a("li"),Jse=a("strong"),Pmo=o("wav2vec2"),Bmo=o(" \u2014 "),NI=a("a"),Imo=o("Wav2Vec2CTCTokenizer"),Nmo=o(" (Wav2Vec2 model)"),qmo=l(),vh=a("li"),Yse=a("strong"),jmo=o("wav2vec2-conformer"),Dmo=o(" \u2014 "),qI=a("a"),Gmo=o("Wav2Vec2CTCTokenizer"),Omo=o(" (Wav2Vec2-Conformer model)"),Vmo=l(),Fh=a("li"),Kse=a("strong"),Xmo=o("wav2vec2_phoneme"),zmo=o(" \u2014 "),jI=a("a"),Wmo=o("Wav2Vec2PhonemeCTCTokenizer"),Qmo=o(" (Wav2Vec2Phoneme model)"),Hmo=l(),Ns=a("li"),Zse=a("strong"),Umo=o("xglm"),Jmo=o(" \u2014 "),DI=a("a"),Ymo=o("XGLMTokenizer"),Kmo=o(" or "),GI=a("a"),Zmo=o("XGLMTokenizerFast"),ego=o(" (XGLM model)"),ogo=l(),Th=a("li"),ele=a("strong"),rgo=o("xlm"),tgo=o(" \u2014 "),OI=a("a"),ago=o("XLMTokenizer"),ngo=o(" (XLM model)"),sgo=l(),Mh=a("li"),ole=a("strong"),lgo=o("xlm-prophetnet"),igo=o(" \u2014 "),VI=a("a"),dgo=o("XLMProphetNetTokenizer"),cgo=o(" (XLM-ProphetNet model)"),fgo=l(),qs=a("li"),rle=a("strong"),mgo=o("xlm-roberta"),ggo=o(" \u2014 "),XI=a("a"),hgo=o("XLMRobertaTokenizer"),pgo=o(" or "),zI=a("a"),ugo=o("XLMRobertaTokenizerFast"),_go=o(" (XLM-RoBERTa model)"),bgo=l(),js=a("li"),tle=a("strong"),vgo=o("xlm-roberta-xl"),Fgo=o(" \u2014 "),WI=a("a"),Tgo=o("RobertaTokenizer"),Mgo=o(" or "),QI=a("a"),Ego=o("RobertaTokenizerFast"),Cgo=o(" (XLM-RoBERTa-XL model)"),wgo=l(),Ds=a("li"),ale=a("strong"),Ago=o("xlnet"),Lgo=o(" \u2014 "),HI=a("a"),ygo=o("XLNetTokenizer"),xgo=o(" or "),UI=a("a"),$go=o("XLNetTokenizerFast"),kgo=o(" (XLNet model)"),Sgo=l(),Gs=a("li"),nle=a("strong"),Rgo=o("yoso"),Pgo=o(" \u2014 "),JI=a("a"),Bgo=o("AlbertTokenizer"),Igo=o(" or "),YI=a("a"),Ngo=o("AlbertTokenizerFast"),qgo=o(" (YOSO model)"),jgo=l(),F(Eh.$$.fragment),Dgo=l(),Ch=a("div"),F(B6.$$.fragment),Ggo=l(),sle=a("p"),Ogo=o("Register a new tokenizer in this mapping."),FGe=l(),Si=a("h2"),wh=a("a"),lle=a("span"),F(I6.$$.fragment),Vgo=l(),ile=a("span"),Xgo=o("AutoFeatureExtractor"),TGe=l(),Lo=a("div"),F(N6.$$.fragment),zgo=l(),q6=a("p"),Wgo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),KI=a("a"),Qgo=o("AutoFeatureExtractor.from_pretrained()"),Hgo=o(" class method."),Ugo=l(),j6=a("p"),Jgo=o("This class cannot be instantiated directly using "),dle=a("code"),Ygo=o("__init__()"),Kgo=o(" (throws an error)."),Zgo=l(),He=a("div"),F(D6.$$.fragment),eho=l(),cle=a("p"),oho=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),rho=l(),ka=a("p"),tho=o("The feature extractor class to instantiate is selected based on the "),fle=a("code"),aho=o("model_type"),nho=o(` property of the config object
(either passed as an argument or loaded from `),mle=a("code"),sho=o("pretrained_model_name_or_path"),lho=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),gle=a("code"),iho=o("pretrained_model_name_or_path"),dho=o(":"),cho=l(),Y=a("ul"),Ah=a("li"),hle=a("strong"),fho=o("beit"),mho=o(" \u2014 "),ZI=a("a"),gho=o("BeitFeatureExtractor"),hho=o(" (BEiT model)"),pho=l(),Lh=a("li"),ple=a("strong"),uho=o("clip"),_ho=o(" \u2014 "),eN=a("a"),bho=o("CLIPFeatureExtractor"),vho=o(" (CLIP model)"),Fho=l(),yh=a("li"),ule=a("strong"),Tho=o("convnext"),Mho=o(" \u2014 "),oN=a("a"),Eho=o("ConvNextFeatureExtractor"),Cho=o(" (ConvNeXT model)"),who=l(),xh=a("li"),_le=a("strong"),Aho=o("cvt"),Lho=o(" \u2014 "),rN=a("a"),yho=o("ConvNextFeatureExtractor"),xho=o(" (CvT model)"),$ho=l(),$h=a("li"),ble=a("strong"),kho=o("data2vec-audio"),Sho=o(" \u2014 "),tN=a("a"),Rho=o("Wav2Vec2FeatureExtractor"),Pho=o(" (Data2VecAudio model)"),Bho=l(),kh=a("li"),vle=a("strong"),Iho=o("data2vec-vision"),Nho=o(" \u2014 "),aN=a("a"),qho=o("BeitFeatureExtractor"),jho=o(" (Data2VecVision model)"),Dho=l(),Sh=a("li"),Fle=a("strong"),Gho=o("deit"),Oho=o(" \u2014 "),nN=a("a"),Vho=o("DeiTFeatureExtractor"),Xho=o(" (DeiT model)"),zho=l(),Rh=a("li"),Tle=a("strong"),Who=o("detr"),Qho=o(" \u2014 "),sN=a("a"),Hho=o("DetrFeatureExtractor"),Uho=o(" (DETR model)"),Jho=l(),Ph=a("li"),Mle=a("strong"),Yho=o("dpt"),Kho=o(" \u2014 "),lN=a("a"),Zho=o("DPTFeatureExtractor"),epo=o(" (DPT model)"),opo=l(),Bh=a("li"),Ele=a("strong"),rpo=o("flava"),tpo=o(" \u2014 "),iN=a("a"),apo=o("FlavaFeatureExtractor"),npo=o(" (FLAVA model)"),spo=l(),Ih=a("li"),Cle=a("strong"),lpo=o("glpn"),ipo=o(" \u2014 "),dN=a("a"),dpo=o("GLPNFeatureExtractor"),cpo=o(" (GLPN model)"),fpo=l(),Nh=a("li"),wle=a("strong"),mpo=o("hubert"),gpo=o(" \u2014 "),cN=a("a"),hpo=o("Wav2Vec2FeatureExtractor"),ppo=o(" (Hubert model)"),upo=l(),qh=a("li"),Ale=a("strong"),_po=o("imagegpt"),bpo=o(" \u2014 "),fN=a("a"),vpo=o("ImageGPTFeatureExtractor"),Fpo=o(" (ImageGPT model)"),Tpo=l(),jh=a("li"),Lle=a("strong"),Mpo=o("layoutlmv2"),Epo=o(" \u2014 "),mN=a("a"),Cpo=o("LayoutLMv2FeatureExtractor"),wpo=o(" (LayoutLMv2 model)"),Apo=l(),Dh=a("li"),yle=a("strong"),Lpo=o("layoutlmv3"),ypo=o(" \u2014 "),gN=a("a"),xpo=o("LayoutLMv3FeatureExtractor"),$po=o(" (LayoutLMv3 model)"),kpo=l(),Gh=a("li"),xle=a("strong"),Spo=o("levit"),Rpo=o(" \u2014 "),hN=a("a"),Ppo=o("LevitFeatureExtractor"),Bpo=o(" (LeViT model)"),Ipo=l(),Oh=a("li"),$le=a("strong"),Npo=o("maskformer"),qpo=o(" \u2014 "),pN=a("a"),jpo=o("MaskFormerFeatureExtractor"),Dpo=o(" (MaskFormer model)"),Gpo=l(),Vh=a("li"),kle=a("strong"),Opo=o("mctct"),Vpo=o(" \u2014 "),uN=a("a"),Xpo=o("MCTCTFeatureExtractor"),zpo=o(" (M-CTC-T model)"),Wpo=l(),Xh=a("li"),Sle=a("strong"),Qpo=o("perceiver"),Hpo=o(" \u2014 "),_N=a("a"),Upo=o("PerceiverFeatureExtractor"),Jpo=o(" (Perceiver model)"),Ypo=l(),zh=a("li"),Rle=a("strong"),Kpo=o("poolformer"),Zpo=o(" \u2014 "),bN=a("a"),euo=o("PoolFormerFeatureExtractor"),ouo=o(" (PoolFormer model)"),ruo=l(),Wh=a("li"),Ple=a("strong"),tuo=o("regnet"),auo=o(" \u2014 "),vN=a("a"),nuo=o("ConvNextFeatureExtractor"),suo=o(" (RegNet model)"),luo=l(),Qh=a("li"),Ble=a("strong"),iuo=o("resnet"),duo=o(" \u2014 "),FN=a("a"),cuo=o("ConvNextFeatureExtractor"),fuo=o(" (ResNet model)"),muo=l(),Hh=a("li"),Ile=a("strong"),guo=o("segformer"),huo=o(" \u2014 "),TN=a("a"),puo=o("SegformerFeatureExtractor"),uuo=o(" (SegFormer model)"),_uo=l(),Uh=a("li"),Nle=a("strong"),buo=o("speech_to_text"),vuo=o(" \u2014 "),MN=a("a"),Fuo=o("Speech2TextFeatureExtractor"),Tuo=o(" (Speech2Text model)"),Muo=l(),Jh=a("li"),qle=a("strong"),Euo=o("swin"),Cuo=o(" \u2014 "),EN=a("a"),wuo=o("ViTFeatureExtractor"),Auo=o(" (Swin Transformer model)"),Luo=l(),Yh=a("li"),jle=a("strong"),yuo=o("van"),xuo=o(" \u2014 "),CN=a("a"),$uo=o("ConvNextFeatureExtractor"),kuo=o(" (VAN model)"),Suo=l(),Kh=a("li"),Dle=a("strong"),Ruo=o("vilt"),Puo=o(" \u2014 "),wN=a("a"),Buo=o("ViltFeatureExtractor"),Iuo=o(" (ViLT model)"),Nuo=l(),Zh=a("li"),Gle=a("strong"),quo=o("vit"),juo=o(" \u2014 "),AN=a("a"),Duo=o("ViTFeatureExtractor"),Guo=o(" (ViT model)"),Ouo=l(),ep=a("li"),Ole=a("strong"),Vuo=o("vit_mae"),Xuo=o(" \u2014 "),LN=a("a"),zuo=o("ViTFeatureExtractor"),Wuo=o(" (ViTMAE model)"),Quo=l(),op=a("li"),Vle=a("strong"),Huo=o("wav2vec2"),Uuo=o(" \u2014 "),yN=a("a"),Juo=o("Wav2Vec2FeatureExtractor"),Yuo=o(" (Wav2Vec2 model)"),Kuo=l(),rp=a("li"),Xle=a("strong"),Zuo=o("wav2vec2-conformer"),e_o=o(" \u2014 "),xN=a("a"),o_o=o("Wav2Vec2FeatureExtractor"),r_o=o(" (Wav2Vec2-Conformer model)"),t_o=l(),tp=a("li"),zle=a("strong"),a_o=o("yolos"),n_o=o(" \u2014 "),$N=a("a"),s_o=o("YolosFeatureExtractor"),l_o=o(" (YOLOS model)"),i_o=l(),F(ap.$$.fragment),d_o=l(),F(np.$$.fragment),c_o=l(),sp=a("div"),F(G6.$$.fragment),f_o=l(),Wle=a("p"),m_o=o("Register a new feature extractor for this class."),MGe=l(),Ri=a("h2"),lp=a("a"),Qle=a("span"),F(O6.$$.fragment),g_o=l(),Hle=a("span"),h_o=o("AutoProcessor"),EGe=l(),yo=a("div"),F(V6.$$.fragment),p_o=l(),X6=a("p"),u_o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),kN=a("a"),__o=o("AutoProcessor.from_pretrained()"),b_o=o(" class method."),v_o=l(),z6=a("p"),F_o=o("This class cannot be instantiated directly using "),Ule=a("code"),T_o=o("__init__()"),M_o=o(" (throws an error)."),E_o=l(),Ue=a("div"),F(W6.$$.fragment),C_o=l(),Jle=a("p"),w_o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),A_o=l(),Pi=a("p"),L_o=o("The processor class to instantiate is selected based on the "),Yle=a("code"),y_o=o("model_type"),x_o=o(` property of the config object (either
passed as an argument or loaded from `),Kle=a("code"),$_o=o("pretrained_model_name_or_path"),k_o=o(" if possible):"),S_o=l(),he=a("ul"),ip=a("li"),Zle=a("strong"),R_o=o("clip"),P_o=o(" \u2014 "),SN=a("a"),B_o=o("CLIPProcessor"),I_o=o(" (CLIP model)"),N_o=l(),dp=a("li"),eie=a("strong"),q_o=o("flava"),j_o=o(" \u2014 "),oie=a("code"),D_o=o("FLAVAProcessor"),G_o=o(" (FLAVA model)"),O_o=l(),cp=a("li"),rie=a("strong"),V_o=o("layoutlmv2"),X_o=o(" \u2014 "),RN=a("a"),z_o=o("LayoutLMv2Processor"),W_o=o(" (LayoutLMv2 model)"),Q_o=l(),fp=a("li"),tie=a("strong"),H_o=o("layoutlmv3"),U_o=o(" \u2014 "),PN=a("a"),J_o=o("LayoutLMv3Processor"),Y_o=o(" (LayoutLMv3 model)"),K_o=l(),mp=a("li"),aie=a("strong"),Z_o=o("layoutxlm"),e1o=o(" \u2014 "),BN=a("a"),o1o=o("LayoutXLMProcessor"),r1o=o(" (LayoutXLM model)"),t1o=l(),gp=a("li"),nie=a("strong"),a1o=o("sew"),n1o=o(" \u2014 "),IN=a("a"),s1o=o("Wav2Vec2Processor"),l1o=o(" (SEW model)"),i1o=l(),hp=a("li"),sie=a("strong"),d1o=o("sew-d"),c1o=o(" \u2014 "),NN=a("a"),f1o=o("Wav2Vec2Processor"),m1o=o(" (SEW-D model)"),g1o=l(),pp=a("li"),lie=a("strong"),h1o=o("speech_to_text"),p1o=o(" \u2014 "),qN=a("a"),u1o=o("Speech2TextProcessor"),_1o=o(" (Speech2Text model)"),b1o=l(),up=a("li"),iie=a("strong"),v1o=o("speech_to_text_2"),F1o=o(" \u2014 "),jN=a("a"),T1o=o("Speech2Text2Processor"),M1o=o(" (Speech2Text2 model)"),E1o=l(),_p=a("li"),die=a("strong"),C1o=o("trocr"),w1o=o(" \u2014 "),DN=a("a"),A1o=o("TrOCRProcessor"),L1o=o(" (TrOCR model)"),y1o=l(),bp=a("li"),cie=a("strong"),x1o=o("unispeech"),$1o=o(" \u2014 "),GN=a("a"),k1o=o("Wav2Vec2Processor"),S1o=o(" (UniSpeech model)"),R1o=l(),vp=a("li"),fie=a("strong"),P1o=o("unispeech-sat"),B1o=o(" \u2014 "),ON=a("a"),I1o=o("Wav2Vec2Processor"),N1o=o(" (UniSpeechSat model)"),q1o=l(),Fp=a("li"),mie=a("strong"),j1o=o("vilt"),D1o=o(" \u2014 "),VN=a("a"),G1o=o("ViltProcessor"),O1o=o(" (ViLT model)"),V1o=l(),Tp=a("li"),gie=a("strong"),X1o=o("vision-text-dual-encoder"),z1o=o(" \u2014 "),XN=a("a"),W1o=o("VisionTextDualEncoderProcessor"),Q1o=o(" (VisionTextDualEncoder model)"),H1o=l(),Mp=a("li"),hie=a("strong"),U1o=o("wav2vec2"),J1o=o(" \u2014 "),zN=a("a"),Y1o=o("Wav2Vec2Processor"),K1o=o(" (Wav2Vec2 model)"),Z1o=l(),Ep=a("li"),pie=a("strong"),e2o=o("wav2vec2-conformer"),o2o=o(" \u2014 "),WN=a("a"),r2o=o("Wav2Vec2Processor"),t2o=o(" (Wav2Vec2-Conformer model)"),a2o=l(),Cp=a("li"),uie=a("strong"),n2o=o("wavlm"),s2o=o(" \u2014 "),QN=a("a"),l2o=o("Wav2Vec2Processor"),i2o=o(" (WavLM model)"),d2o=l(),F(wp.$$.fragment),c2o=l(),F(Ap.$$.fragment),f2o=l(),Lp=a("div"),F(Q6.$$.fragment),m2o=l(),_ie=a("p"),g2o=o("Register a new processor for this class."),CGe=l(),Bi=a("h2"),yp=a("a"),bie=a("span"),F(H6.$$.fragment),h2o=l(),vie=a("span"),p2o=o("AutoModel"),wGe=l(),xo=a("div"),F(U6.$$.fragment),u2o=l(),Ii=a("p"),_2o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HN=a("a"),b2o=o("from_pretrained()"),v2o=o(" class method or the "),UN=a("a"),F2o=o("from_config()"),T2o=o(` class
method.`),M2o=l(),J6=a("p"),E2o=o("This class cannot be instantiated directly using "),Fie=a("code"),C2o=o("__init__()"),w2o=o(" (throws an error)."),A2o=l(),nt=a("div"),F(Y6.$$.fragment),L2o=l(),Tie=a("p"),y2o=o("Instantiates one of the base model classes of the library from a configuration."),x2o=l(),Ni=a("p"),$2o=o(`Note:
Loading a model from its configuration file does `),Mie=a("strong"),k2o=o("not"),S2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JN=a("a"),R2o=o("from_pretrained()"),P2o=o(" to load the model weights."),B2o=l(),F(xp.$$.fragment),I2o=l(),Je=a("div"),F(K6.$$.fragment),N2o=l(),Eie=a("p"),q2o=o("Instantiate one of the base model classes of the library from a pretrained model."),j2o=l(),Sa=a("p"),D2o=o("The model class to instantiate is selected based on the "),Cie=a("code"),G2o=o("model_type"),O2o=o(` property of the config object (either
passed as an argument or loaded from `),wie=a("code"),V2o=o("pretrained_model_name_or_path"),X2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aie=a("code"),z2o=o("pretrained_model_name_or_path"),W2o=o(":"),Q2o=l(),y=a("ul"),$p=a("li"),Lie=a("strong"),H2o=o("albert"),U2o=o(" \u2014 "),YN=a("a"),J2o=o("AlbertModel"),Y2o=o(" (ALBERT model)"),K2o=l(),kp=a("li"),yie=a("strong"),Z2o=o("bart"),ebo=o(" \u2014 "),KN=a("a"),obo=o("BartModel"),rbo=o(" (BART model)"),tbo=l(),Sp=a("li"),xie=a("strong"),abo=o("beit"),nbo=o(" \u2014 "),ZN=a("a"),sbo=o("BeitModel"),lbo=o(" (BEiT model)"),ibo=l(),Rp=a("li"),$ie=a("strong"),dbo=o("bert"),cbo=o(" \u2014 "),eq=a("a"),fbo=o("BertModel"),mbo=o(" (BERT model)"),gbo=l(),Pp=a("li"),kie=a("strong"),hbo=o("bert-generation"),pbo=o(" \u2014 "),oq=a("a"),ubo=o("BertGenerationEncoder"),_bo=o(" (Bert Generation model)"),bbo=l(),Bp=a("li"),Sie=a("strong"),vbo=o("big_bird"),Fbo=o(" \u2014 "),rq=a("a"),Tbo=o("BigBirdModel"),Mbo=o(" (BigBird model)"),Ebo=l(),Ip=a("li"),Rie=a("strong"),Cbo=o("bigbird_pegasus"),wbo=o(" \u2014 "),tq=a("a"),Abo=o("BigBirdPegasusModel"),Lbo=o(" (BigBird-Pegasus model)"),ybo=l(),Np=a("li"),Pie=a("strong"),xbo=o("blenderbot"),$bo=o(" \u2014 "),aq=a("a"),kbo=o("BlenderbotModel"),Sbo=o(" (Blenderbot model)"),Rbo=l(),qp=a("li"),Bie=a("strong"),Pbo=o("blenderbot-small"),Bbo=o(" \u2014 "),nq=a("a"),Ibo=o("BlenderbotSmallModel"),Nbo=o(" (BlenderbotSmall model)"),qbo=l(),jp=a("li"),Iie=a("strong"),jbo=o("bloom"),Dbo=o(" \u2014 "),sq=a("a"),Gbo=o("BloomModel"),Obo=o(" (BLOOM model)"),Vbo=l(),Dp=a("li"),Nie=a("strong"),Xbo=o("camembert"),zbo=o(" \u2014 "),lq=a("a"),Wbo=o("CamembertModel"),Qbo=o(" (CamemBERT model)"),Hbo=l(),Gp=a("li"),qie=a("strong"),Ubo=o("canine"),Jbo=o(" \u2014 "),iq=a("a"),Ybo=o("CanineModel"),Kbo=o(" (CANINE model)"),Zbo=l(),Op=a("li"),jie=a("strong"),evo=o("clip"),ovo=o(" \u2014 "),dq=a("a"),rvo=o("CLIPModel"),tvo=o(" (CLIP model)"),avo=l(),Vp=a("li"),Die=a("strong"),nvo=o("convbert"),svo=o(" \u2014 "),cq=a("a"),lvo=o("ConvBertModel"),ivo=o(" (ConvBERT model)"),dvo=l(),Xp=a("li"),Gie=a("strong"),cvo=o("convnext"),fvo=o(" \u2014 "),fq=a("a"),mvo=o("ConvNextModel"),gvo=o(" (ConvNeXT model)"),hvo=l(),zp=a("li"),Oie=a("strong"),pvo=o("ctrl"),uvo=o(" \u2014 "),mq=a("a"),_vo=o("CTRLModel"),bvo=o(" (CTRL model)"),vvo=l(),Wp=a("li"),Vie=a("strong"),Fvo=o("cvt"),Tvo=o(" \u2014 "),gq=a("a"),Mvo=o("CvtModel"),Evo=o(" (CvT model)"),Cvo=l(),Qp=a("li"),Xie=a("strong"),wvo=o("data2vec-audio"),Avo=o(" \u2014 "),hq=a("a"),Lvo=o("Data2VecAudioModel"),yvo=o(" (Data2VecAudio model)"),xvo=l(),Hp=a("li"),zie=a("strong"),$vo=o("data2vec-text"),kvo=o(" \u2014 "),pq=a("a"),Svo=o("Data2VecTextModel"),Rvo=o(" (Data2VecText model)"),Pvo=l(),Up=a("li"),Wie=a("strong"),Bvo=o("data2vec-vision"),Ivo=o(" \u2014 "),uq=a("a"),Nvo=o("Data2VecVisionModel"),qvo=o(" (Data2VecVision model)"),jvo=l(),Jp=a("li"),Qie=a("strong"),Dvo=o("deberta"),Gvo=o(" \u2014 "),_q=a("a"),Ovo=o("DebertaModel"),Vvo=o(" (DeBERTa model)"),Xvo=l(),Yp=a("li"),Hie=a("strong"),zvo=o("deberta-v2"),Wvo=o(" \u2014 "),bq=a("a"),Qvo=o("DebertaV2Model"),Hvo=o(" (DeBERTa-v2 model)"),Uvo=l(),Kp=a("li"),Uie=a("strong"),Jvo=o("decision_transformer"),Yvo=o(" \u2014 "),vq=a("a"),Kvo=o("DecisionTransformerModel"),Zvo=o(" (Decision Transformer model)"),e0o=l(),Zp=a("li"),Jie=a("strong"),o0o=o("deit"),r0o=o(" \u2014 "),Fq=a("a"),t0o=o("DeiTModel"),a0o=o(" (DeiT model)"),n0o=l(),eu=a("li"),Yie=a("strong"),s0o=o("detr"),l0o=o(" \u2014 "),Tq=a("a"),i0o=o("DetrModel"),d0o=o(" (DETR model)"),c0o=l(),ou=a("li"),Kie=a("strong"),f0o=o("distilbert"),m0o=o(" \u2014 "),Mq=a("a"),g0o=o("DistilBertModel"),h0o=o(" (DistilBERT model)"),p0o=l(),ru=a("li"),Zie=a("strong"),u0o=o("dpr"),_0o=o(" \u2014 "),Eq=a("a"),b0o=o("DPRQuestionEncoder"),v0o=o(" (DPR model)"),F0o=l(),tu=a("li"),ede=a("strong"),T0o=o("dpt"),M0o=o(" \u2014 "),Cq=a("a"),E0o=o("DPTModel"),C0o=o(" (DPT model)"),w0o=l(),au=a("li"),ode=a("strong"),A0o=o("electra"),L0o=o(" \u2014 "),wq=a("a"),y0o=o("ElectraModel"),x0o=o(" (ELECTRA model)"),$0o=l(),nu=a("li"),rde=a("strong"),k0o=o("flaubert"),S0o=o(" \u2014 "),Aq=a("a"),R0o=o("FlaubertModel"),P0o=o(" (FlauBERT model)"),B0o=l(),su=a("li"),tde=a("strong"),I0o=o("flava"),N0o=o(" \u2014 "),Lq=a("a"),q0o=o("FlavaModel"),j0o=o(" (FLAVA model)"),D0o=l(),lu=a("li"),ade=a("strong"),G0o=o("fnet"),O0o=o(" \u2014 "),yq=a("a"),V0o=o("FNetModel"),X0o=o(" (FNet model)"),z0o=l(),iu=a("li"),nde=a("strong"),W0o=o("fsmt"),Q0o=o(" \u2014 "),xq=a("a"),H0o=o("FSMTModel"),U0o=o(" (FairSeq Machine-Translation model)"),J0o=l(),Os=a("li"),sde=a("strong"),Y0o=o("funnel"),K0o=o(" \u2014 "),$q=a("a"),Z0o=o("FunnelModel"),eFo=o(" or "),kq=a("a"),oFo=o("FunnelBaseModel"),rFo=o(" (Funnel Transformer model)"),tFo=l(),du=a("li"),lde=a("strong"),aFo=o("glpn"),nFo=o(" \u2014 "),Sq=a("a"),sFo=o("GLPNModel"),lFo=o(" (GLPN model)"),iFo=l(),cu=a("li"),ide=a("strong"),dFo=o("gpt2"),cFo=o(" \u2014 "),Rq=a("a"),fFo=o("GPT2Model"),mFo=o(" (OpenAI GPT-2 model)"),gFo=l(),fu=a("li"),dde=a("strong"),hFo=o("gpt_neo"),pFo=o(" \u2014 "),Pq=a("a"),uFo=o("GPTNeoModel"),_Fo=o(" (GPT Neo model)"),bFo=l(),mu=a("li"),cde=a("strong"),vFo=o("gpt_neox"),FFo=o(" \u2014 "),Bq=a("a"),TFo=o("GPTNeoXModel"),MFo=o(" (GPT NeoX model)"),EFo=l(),gu=a("li"),fde=a("strong"),CFo=o("gptj"),wFo=o(" \u2014 "),Iq=a("a"),AFo=o("GPTJModel"),LFo=o(" (GPT-J model)"),yFo=l(),hu=a("li"),mde=a("strong"),xFo=o("hubert"),$Fo=o(" \u2014 "),Nq=a("a"),kFo=o("HubertModel"),SFo=o(" (Hubert model)"),RFo=l(),pu=a("li"),gde=a("strong"),PFo=o("ibert"),BFo=o(" \u2014 "),qq=a("a"),IFo=o("IBertModel"),NFo=o(" (I-BERT model)"),qFo=l(),uu=a("li"),hde=a("strong"),jFo=o("imagegpt"),DFo=o(" \u2014 "),jq=a("a"),GFo=o("ImageGPTModel"),OFo=o(" (ImageGPT model)"),VFo=l(),_u=a("li"),pde=a("strong"),XFo=o("layoutlm"),zFo=o(" \u2014 "),Dq=a("a"),WFo=o("LayoutLMModel"),QFo=o(" (LayoutLM model)"),HFo=l(),bu=a("li"),ude=a("strong"),UFo=o("layoutlmv2"),JFo=o(" \u2014 "),Gq=a("a"),YFo=o("LayoutLMv2Model"),KFo=o(" (LayoutLMv2 model)"),ZFo=l(),vu=a("li"),_de=a("strong"),eTo=o("layoutlmv3"),oTo=o(" \u2014 "),Oq=a("a"),rTo=o("LayoutLMv3Model"),tTo=o(" (LayoutLMv3 model)"),aTo=l(),Fu=a("li"),bde=a("strong"),nTo=o("led"),sTo=o(" \u2014 "),Vq=a("a"),lTo=o("LEDModel"),iTo=o(" (LED model)"),dTo=l(),Tu=a("li"),vde=a("strong"),cTo=o("levit"),fTo=o(" \u2014 "),Xq=a("a"),mTo=o("LevitModel"),gTo=o(" (LeViT model)"),hTo=l(),Mu=a("li"),Fde=a("strong"),pTo=o("longformer"),uTo=o(" \u2014 "),zq=a("a"),_To=o("LongformerModel"),bTo=o(" (Longformer model)"),vTo=l(),Eu=a("li"),Tde=a("strong"),FTo=o("longt5"),TTo=o(" \u2014 "),Wq=a("a"),MTo=o("LongT5Model"),ETo=o(" (LongT5 model)"),CTo=l(),Cu=a("li"),Mde=a("strong"),wTo=o("luke"),ATo=o(" \u2014 "),Qq=a("a"),LTo=o("LukeModel"),yTo=o(" (LUKE model)"),xTo=l(),wu=a("li"),Ede=a("strong"),$To=o("lxmert"),kTo=o(" \u2014 "),Hq=a("a"),STo=o("LxmertModel"),RTo=o(" (LXMERT model)"),PTo=l(),Au=a("li"),Cde=a("strong"),BTo=o("m2m_100"),ITo=o(" \u2014 "),Uq=a("a"),NTo=o("M2M100Model"),qTo=o(" (M2M100 model)"),jTo=l(),Lu=a("li"),wde=a("strong"),DTo=o("marian"),GTo=o(" \u2014 "),Jq=a("a"),OTo=o("MarianModel"),VTo=o(" (Marian model)"),XTo=l(),yu=a("li"),Ade=a("strong"),zTo=o("maskformer"),WTo=o(" \u2014 "),Yq=a("a"),QTo=o("MaskFormerModel"),HTo=o(" (MaskFormer model)"),UTo=l(),xu=a("li"),Lde=a("strong"),JTo=o("mbart"),YTo=o(" \u2014 "),Kq=a("a"),KTo=o("MBartModel"),ZTo=o(" (mBART model)"),e7o=l(),$u=a("li"),yde=a("strong"),o7o=o("mctct"),r7o=o(" \u2014 "),Zq=a("a"),t7o=o("MCTCTModel"),a7o=o(" (M-CTC-T model)"),n7o=l(),ku=a("li"),xde=a("strong"),s7o=o("megatron-bert"),l7o=o(" \u2014 "),ej=a("a"),i7o=o("MegatronBertModel"),d7o=o(" (Megatron-BERT model)"),c7o=l(),Su=a("li"),$de=a("strong"),f7o=o("mobilebert"),m7o=o(" \u2014 "),oj=a("a"),g7o=o("MobileBertModel"),h7o=o(" (MobileBERT model)"),p7o=l(),Ru=a("li"),kde=a("strong"),u7o=o("mpnet"),_7o=o(" \u2014 "),rj=a("a"),b7o=o("MPNetModel"),v7o=o(" (MPNet model)"),F7o=l(),Pu=a("li"),Sde=a("strong"),T7o=o("mt5"),M7o=o(" \u2014 "),tj=a("a"),E7o=o("MT5Model"),C7o=o(" (MT5 model)"),w7o=l(),Bu=a("li"),Rde=a("strong"),A7o=o("nystromformer"),L7o=o(" \u2014 "),aj=a("a"),y7o=o("NystromformerModel"),x7o=o(" (Nystr\xF6mformer model)"),$7o=l(),Iu=a("li"),Pde=a("strong"),k7o=o("ofa"),S7o=o(" \u2014 "),nj=a("a"),R7o=o("OFAModel"),P7o=o(" (OFA model)"),B7o=l(),Nu=a("li"),Bde=a("strong"),I7o=o("openai-gpt"),N7o=o(" \u2014 "),sj=a("a"),q7o=o("OpenAIGPTModel"),j7o=o(" (OpenAI GPT model)"),D7o=l(),qu=a("li"),Ide=a("strong"),G7o=o("opt"),O7o=o(" \u2014 "),lj=a("a"),V7o=o("OPTModel"),X7o=o(" (OPT model)"),z7o=l(),ju=a("li"),Nde=a("strong"),W7o=o("pegasus"),Q7o=o(" \u2014 "),ij=a("a"),H7o=o("PegasusModel"),U7o=o(" (Pegasus model)"),J7o=l(),Du=a("li"),qde=a("strong"),Y7o=o("perceiver"),K7o=o(" \u2014 "),dj=a("a"),Z7o=o("PerceiverModel"),e9o=o(" (Perceiver model)"),o9o=l(),Gu=a("li"),jde=a("strong"),r9o=o("plbart"),t9o=o(" \u2014 "),cj=a("a"),a9o=o("PLBartModel"),n9o=o(" (PLBart model)"),s9o=l(),Ou=a("li"),Dde=a("strong"),l9o=o("poolformer"),i9o=o(" \u2014 "),fj=a("a"),d9o=o("PoolFormerModel"),c9o=o(" (PoolFormer model)"),f9o=l(),Vu=a("li"),Gde=a("strong"),m9o=o("prophetnet"),g9o=o(" \u2014 "),mj=a("a"),h9o=o("ProphetNetModel"),p9o=o(" (ProphetNet model)"),u9o=l(),Xu=a("li"),Ode=a("strong"),_9o=o("qdqbert"),b9o=o(" \u2014 "),gj=a("a"),v9o=o("QDQBertModel"),F9o=o(" (QDQBert model)"),T9o=l(),zu=a("li"),Vde=a("strong"),M9o=o("reformer"),E9o=o(" \u2014 "),hj=a("a"),C9o=o("ReformerModel"),w9o=o(" (Reformer model)"),A9o=l(),Wu=a("li"),Xde=a("strong"),L9o=o("regnet"),y9o=o(" \u2014 "),pj=a("a"),x9o=o("RegNetModel"),$9o=o(" (RegNet model)"),k9o=l(),Qu=a("li"),zde=a("strong"),S9o=o("rembert"),R9o=o(" \u2014 "),uj=a("a"),P9o=o("RemBertModel"),B9o=o(" (RemBERT model)"),I9o=l(),Hu=a("li"),Wde=a("strong"),N9o=o("resnet"),q9o=o(" \u2014 "),_j=a("a"),j9o=o("ResNetModel"),D9o=o(" (ResNet model)"),G9o=l(),Uu=a("li"),Qde=a("strong"),O9o=o("retribert"),V9o=o(" \u2014 "),bj=a("a"),X9o=o("RetriBertModel"),z9o=o(" (RetriBERT model)"),W9o=l(),Ju=a("li"),Hde=a("strong"),Q9o=o("roberta"),H9o=o(" \u2014 "),vj=a("a"),U9o=o("RobertaModel"),J9o=o(" (RoBERTa model)"),Y9o=l(),Yu=a("li"),Ude=a("strong"),K9o=o("roformer"),Z9o=o(" \u2014 "),Fj=a("a"),eMo=o("RoFormerModel"),oMo=o(" (RoFormer model)"),rMo=l(),Ku=a("li"),Jde=a("strong"),tMo=o("segformer"),aMo=o(" \u2014 "),Tj=a("a"),nMo=o("SegformerModel"),sMo=o(" (SegFormer model)"),lMo=l(),Zu=a("li"),Yde=a("strong"),iMo=o("sew"),dMo=o(" \u2014 "),Mj=a("a"),cMo=o("SEWModel"),fMo=o(" (SEW model)"),mMo=l(),e_=a("li"),Kde=a("strong"),gMo=o("sew-d"),hMo=o(" \u2014 "),Ej=a("a"),pMo=o("SEWDModel"),uMo=o(" (SEW-D model)"),_Mo=l(),o_=a("li"),Zde=a("strong"),bMo=o("speech_to_text"),vMo=o(" \u2014 "),Cj=a("a"),FMo=o("Speech2TextModel"),TMo=o(" (Speech2Text model)"),MMo=l(),r_=a("li"),ece=a("strong"),EMo=o("splinter"),CMo=o(" \u2014 "),wj=a("a"),wMo=o("SplinterModel"),AMo=o(" (Splinter model)"),LMo=l(),t_=a("li"),oce=a("strong"),yMo=o("squeezebert"),xMo=o(" \u2014 "),Aj=a("a"),$Mo=o("SqueezeBertModel"),kMo=o(" (SqueezeBERT model)"),SMo=l(),a_=a("li"),rce=a("strong"),RMo=o("swin"),PMo=o(" \u2014 "),Lj=a("a"),BMo=o("SwinModel"),IMo=o(" (Swin Transformer model)"),NMo=l(),n_=a("li"),tce=a("strong"),qMo=o("t5"),jMo=o(" \u2014 "),yj=a("a"),DMo=o("T5Model"),GMo=o(" (T5 model)"),OMo=l(),s_=a("li"),ace=a("strong"),VMo=o("tapas"),XMo=o(" \u2014 "),xj=a("a"),zMo=o("TapasModel"),WMo=o(" (TAPAS model)"),QMo=l(),l_=a("li"),nce=a("strong"),HMo=o("trajectory_transformer"),UMo=o(" \u2014 "),$j=a("a"),JMo=o("TrajectoryTransformerModel"),YMo=o(" (Trajectory Transformer model)"),KMo=l(),i_=a("li"),sce=a("strong"),ZMo=o("transfo-xl"),eEo=o(" \u2014 "),kj=a("a"),oEo=o("TransfoXLModel"),rEo=o(" (Transformer-XL model)"),tEo=l(),d_=a("li"),lce=a("strong"),aEo=o("unispeech"),nEo=o(" \u2014 "),Sj=a("a"),sEo=o("UniSpeechModel"),lEo=o(" (UniSpeech model)"),iEo=l(),c_=a("li"),ice=a("strong"),dEo=o("unispeech-sat"),cEo=o(" \u2014 "),Rj=a("a"),fEo=o("UniSpeechSatModel"),mEo=o(" (UniSpeechSat model)"),gEo=l(),f_=a("li"),dce=a("strong"),hEo=o("van"),pEo=o(" \u2014 "),Pj=a("a"),uEo=o("VanModel"),_Eo=o(" (VAN model)"),bEo=l(),m_=a("li"),cce=a("strong"),vEo=o("vilt"),FEo=o(" \u2014 "),Bj=a("a"),TEo=o("ViltModel"),MEo=o(" (ViLT model)"),EEo=l(),g_=a("li"),fce=a("strong"),CEo=o("vision-text-dual-encoder"),wEo=o(" \u2014 "),Ij=a("a"),AEo=o("VisionTextDualEncoderModel"),LEo=o(" (VisionTextDualEncoder model)"),yEo=l(),h_=a("li"),mce=a("strong"),xEo=o("visual_bert"),$Eo=o(" \u2014 "),Nj=a("a"),kEo=o("VisualBertModel"),SEo=o(" (VisualBERT model)"),REo=l(),p_=a("li"),gce=a("strong"),PEo=o("vit"),BEo=o(" \u2014 "),qj=a("a"),IEo=o("ViTModel"),NEo=o(" (ViT model)"),qEo=l(),u_=a("li"),hce=a("strong"),jEo=o("vit_mae"),DEo=o(" \u2014 "),jj=a("a"),GEo=o("ViTMAEModel"),OEo=o(" (ViTMAE model)"),VEo=l(),__=a("li"),pce=a("strong"),XEo=o("wav2vec2"),zEo=o(" \u2014 "),Dj=a("a"),WEo=o("Wav2Vec2Model"),QEo=o(" (Wav2Vec2 model)"),HEo=l(),b_=a("li"),uce=a("strong"),UEo=o("wav2vec2-conformer"),JEo=o(" \u2014 "),Gj=a("a"),YEo=o("Wav2Vec2ConformerModel"),KEo=o(" (Wav2Vec2-Conformer model)"),ZEo=l(),v_=a("li"),_ce=a("strong"),e4o=o("wavlm"),o4o=o(" \u2014 "),Oj=a("a"),r4o=o("WavLMModel"),t4o=o(" (WavLM model)"),a4o=l(),F_=a("li"),bce=a("strong"),n4o=o("xglm"),s4o=o(" \u2014 "),Vj=a("a"),l4o=o("XGLMModel"),i4o=o(" (XGLM model)"),d4o=l(),T_=a("li"),vce=a("strong"),c4o=o("xlm"),f4o=o(" \u2014 "),Xj=a("a"),m4o=o("XLMModel"),g4o=o(" (XLM model)"),h4o=l(),M_=a("li"),Fce=a("strong"),p4o=o("xlm-prophetnet"),u4o=o(" \u2014 "),zj=a("a"),_4o=o("XLMProphetNetModel"),b4o=o(" (XLM-ProphetNet model)"),v4o=l(),E_=a("li"),Tce=a("strong"),F4o=o("xlm-roberta"),T4o=o(" \u2014 "),Wj=a("a"),M4o=o("XLMRobertaModel"),E4o=o(" (XLM-RoBERTa model)"),C4o=l(),C_=a("li"),Mce=a("strong"),w4o=o("xlm-roberta-xl"),A4o=o(" \u2014 "),Qj=a("a"),L4o=o("XLMRobertaXLModel"),y4o=o(" (XLM-RoBERTa-XL model)"),x4o=l(),w_=a("li"),Ece=a("strong"),$4o=o("xlnet"),k4o=o(" \u2014 "),Hj=a("a"),S4o=o("XLNetModel"),R4o=o(" (XLNet model)"),P4o=l(),A_=a("li"),Cce=a("strong"),B4o=o("yolos"),I4o=o(" \u2014 "),Uj=a("a"),N4o=o("YolosModel"),q4o=o(" (YOLOS model)"),j4o=l(),L_=a("li"),wce=a("strong"),D4o=o("yoso"),G4o=o(" \u2014 "),Jj=a("a"),O4o=o("YosoModel"),V4o=o(" (YOSO model)"),X4o=l(),y_=a("p"),z4o=o("The model is set in evaluation mode by default using "),Ace=a("code"),W4o=o("model.eval()"),Q4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=a("code"),H4o=o("model.train()"),U4o=l(),F(x_.$$.fragment),AGe=l(),qi=a("h2"),$_=a("a"),yce=a("span"),F(Z6.$$.fragment),J4o=l(),xce=a("span"),Y4o=o("AutoModelForPreTraining"),LGe=l(),$o=a("div"),F(eL.$$.fragment),K4o=l(),ji=a("p"),Z4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Yj=a("a"),eCo=o("from_pretrained()"),oCo=o(" class method or the "),Kj=a("a"),rCo=o("from_config()"),tCo=o(` class
method.`),aCo=l(),oL=a("p"),nCo=o("This class cannot be instantiated directly using "),$ce=a("code"),sCo=o("__init__()"),lCo=o(" (throws an error)."),iCo=l(),st=a("div"),F(rL.$$.fragment),dCo=l(),kce=a("p"),cCo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fCo=l(),Di=a("p"),mCo=o(`Note:
Loading a model from its configuration file does `),Sce=a("strong"),gCo=o("not"),hCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zj=a("a"),pCo=o("from_pretrained()"),uCo=o(" to load the model weights."),_Co=l(),F(k_.$$.fragment),bCo=l(),Ye=a("div"),F(tL.$$.fragment),vCo=l(),Rce=a("p"),FCo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),TCo=l(),Ra=a("p"),MCo=o("The model class to instantiate is selected based on the "),Pce=a("code"),ECo=o("model_type"),CCo=o(` property of the config object (either
passed as an argument or loaded from `),Bce=a("code"),wCo=o("pretrained_model_name_or_path"),ACo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ice=a("code"),LCo=o("pretrained_model_name_or_path"),yCo=o(":"),xCo=l(),G=a("ul"),S_=a("li"),Nce=a("strong"),$Co=o("albert"),kCo=o(" \u2014 "),eD=a("a"),SCo=o("AlbertForPreTraining"),RCo=o(" (ALBERT model)"),PCo=l(),R_=a("li"),qce=a("strong"),BCo=o("bart"),ICo=o(" \u2014 "),oD=a("a"),NCo=o("BartForConditionalGeneration"),qCo=o(" (BART model)"),jCo=l(),P_=a("li"),jce=a("strong"),DCo=o("bert"),GCo=o(" \u2014 "),rD=a("a"),OCo=o("BertForPreTraining"),VCo=o(" (BERT model)"),XCo=l(),B_=a("li"),Dce=a("strong"),zCo=o("big_bird"),WCo=o(" \u2014 "),tD=a("a"),QCo=o("BigBirdForPreTraining"),HCo=o(" (BigBird model)"),UCo=l(),I_=a("li"),Gce=a("strong"),JCo=o("bloom"),YCo=o(" \u2014 "),aD=a("a"),KCo=o("BloomForCausalLM"),ZCo=o(" (BLOOM model)"),e5o=l(),N_=a("li"),Oce=a("strong"),o5o=o("camembert"),r5o=o(" \u2014 "),nD=a("a"),t5o=o("CamembertForMaskedLM"),a5o=o(" (CamemBERT model)"),n5o=l(),q_=a("li"),Vce=a("strong"),s5o=o("ctrl"),l5o=o(" \u2014 "),sD=a("a"),i5o=o("CTRLLMHeadModel"),d5o=o(" (CTRL model)"),c5o=l(),j_=a("li"),Xce=a("strong"),f5o=o("data2vec-text"),m5o=o(" \u2014 "),lD=a("a"),g5o=o("Data2VecTextForMaskedLM"),h5o=o(" (Data2VecText model)"),p5o=l(),D_=a("li"),zce=a("strong"),u5o=o("deberta"),_5o=o(" \u2014 "),iD=a("a"),b5o=o("DebertaForMaskedLM"),v5o=o(" (DeBERTa model)"),F5o=l(),G_=a("li"),Wce=a("strong"),T5o=o("deberta-v2"),M5o=o(" \u2014 "),dD=a("a"),E5o=o("DebertaV2ForMaskedLM"),C5o=o(" (DeBERTa-v2 model)"),w5o=l(),O_=a("li"),Qce=a("strong"),A5o=o("distilbert"),L5o=o(" \u2014 "),cD=a("a"),y5o=o("DistilBertForMaskedLM"),x5o=o(" (DistilBERT model)"),$5o=l(),V_=a("li"),Hce=a("strong"),k5o=o("electra"),S5o=o(" \u2014 "),fD=a("a"),R5o=o("ElectraForPreTraining"),P5o=o(" (ELECTRA model)"),B5o=l(),X_=a("li"),Uce=a("strong"),I5o=o("flaubert"),N5o=o(" \u2014 "),mD=a("a"),q5o=o("FlaubertWithLMHeadModel"),j5o=o(" (FlauBERT model)"),D5o=l(),z_=a("li"),Jce=a("strong"),G5o=o("flava"),O5o=o(" \u2014 "),gD=a("a"),V5o=o("FlavaForPreTraining"),X5o=o(" (FLAVA model)"),z5o=l(),W_=a("li"),Yce=a("strong"),W5o=o("fnet"),Q5o=o(" \u2014 "),hD=a("a"),H5o=o("FNetForPreTraining"),U5o=o(" (FNet model)"),J5o=l(),Q_=a("li"),Kce=a("strong"),Y5o=o("fsmt"),K5o=o(" \u2014 "),pD=a("a"),Z5o=o("FSMTForConditionalGeneration"),e3o=o(" (FairSeq Machine-Translation model)"),o3o=l(),H_=a("li"),Zce=a("strong"),r3o=o("funnel"),t3o=o(" \u2014 "),uD=a("a"),a3o=o("FunnelForPreTraining"),n3o=o(" (Funnel Transformer model)"),s3o=l(),U_=a("li"),efe=a("strong"),l3o=o("gpt2"),i3o=o(" \u2014 "),_D=a("a"),d3o=o("GPT2LMHeadModel"),c3o=o(" (OpenAI GPT-2 model)"),f3o=l(),J_=a("li"),ofe=a("strong"),m3o=o("ibert"),g3o=o(" \u2014 "),bD=a("a"),h3o=o("IBertForMaskedLM"),p3o=o(" (I-BERT model)"),u3o=l(),Y_=a("li"),rfe=a("strong"),_3o=o("layoutlm"),b3o=o(" \u2014 "),vD=a("a"),v3o=o("LayoutLMForMaskedLM"),F3o=o(" (LayoutLM model)"),T3o=l(),K_=a("li"),tfe=a("strong"),M3o=o("longformer"),E3o=o(" \u2014 "),FD=a("a"),C3o=o("LongformerForMaskedLM"),w3o=o(" (Longformer model)"),A3o=l(),Z_=a("li"),afe=a("strong"),L3o=o("lxmert"),y3o=o(" \u2014 "),TD=a("a"),x3o=o("LxmertForPreTraining"),$3o=o(" (LXMERT model)"),k3o=l(),e1=a("li"),nfe=a("strong"),S3o=o("megatron-bert"),R3o=o(" \u2014 "),MD=a("a"),P3o=o("MegatronBertForPreTraining"),B3o=o(" (Megatron-BERT model)"),I3o=l(),o1=a("li"),sfe=a("strong"),N3o=o("mobilebert"),q3o=o(" \u2014 "),ED=a("a"),j3o=o("MobileBertForPreTraining"),D3o=o(" (MobileBERT model)"),G3o=l(),r1=a("li"),lfe=a("strong"),O3o=o("mpnet"),V3o=o(" \u2014 "),CD=a("a"),X3o=o("MPNetForMaskedLM"),z3o=o(" (MPNet model)"),W3o=l(),t1=a("li"),ife=a("strong"),Q3o=o("openai-gpt"),H3o=o(" \u2014 "),wD=a("a"),U3o=o("OpenAIGPTLMHeadModel"),J3o=o(" (OpenAI GPT model)"),Y3o=l(),a1=a("li"),dfe=a("strong"),K3o=o("retribert"),Z3o=o(" \u2014 "),AD=a("a"),ewo=o("RetriBertModel"),owo=o(" (RetriBERT model)"),rwo=l(),n1=a("li"),cfe=a("strong"),two=o("roberta"),awo=o(" \u2014 "),LD=a("a"),nwo=o("RobertaForMaskedLM"),swo=o(" (RoBERTa model)"),lwo=l(),s1=a("li"),ffe=a("strong"),iwo=o("splinter"),dwo=o(" \u2014 "),yD=a("a"),cwo=o("SplinterForPreTraining"),fwo=o(" (Splinter model)"),mwo=l(),l1=a("li"),mfe=a("strong"),gwo=o("squeezebert"),hwo=o(" \u2014 "),xD=a("a"),pwo=o("SqueezeBertForMaskedLM"),uwo=o(" (SqueezeBERT model)"),_wo=l(),i1=a("li"),gfe=a("strong"),bwo=o("t5"),vwo=o(" \u2014 "),$D=a("a"),Fwo=o("T5ForConditionalGeneration"),Two=o(" (T5 model)"),Mwo=l(),d1=a("li"),hfe=a("strong"),Ewo=o("tapas"),Cwo=o(" \u2014 "),kD=a("a"),wwo=o("TapasForMaskedLM"),Awo=o(" (TAPAS model)"),Lwo=l(),c1=a("li"),pfe=a("strong"),ywo=o("transfo-xl"),xwo=o(" \u2014 "),SD=a("a"),$wo=o("TransfoXLLMHeadModel"),kwo=o(" (Transformer-XL model)"),Swo=l(),f1=a("li"),ufe=a("strong"),Rwo=o("unispeech"),Pwo=o(" \u2014 "),RD=a("a"),Bwo=o("UniSpeechForPreTraining"),Iwo=o(" (UniSpeech model)"),Nwo=l(),m1=a("li"),_fe=a("strong"),qwo=o("unispeech-sat"),jwo=o(" \u2014 "),PD=a("a"),Dwo=o("UniSpeechSatForPreTraining"),Gwo=o(" (UniSpeechSat model)"),Owo=l(),g1=a("li"),bfe=a("strong"),Vwo=o("visual_bert"),Xwo=o(" \u2014 "),BD=a("a"),zwo=o("VisualBertForPreTraining"),Wwo=o(" (VisualBERT model)"),Qwo=l(),h1=a("li"),vfe=a("strong"),Hwo=o("vit_mae"),Uwo=o(" \u2014 "),ID=a("a"),Jwo=o("ViTMAEForPreTraining"),Ywo=o(" (ViTMAE model)"),Kwo=l(),p1=a("li"),Ffe=a("strong"),Zwo=o("wav2vec2"),eAo=o(" \u2014 "),ND=a("a"),oAo=o("Wav2Vec2ForPreTraining"),rAo=o(" (Wav2Vec2 model)"),tAo=l(),u1=a("li"),Tfe=a("strong"),aAo=o("wav2vec2-conformer"),nAo=o(" \u2014 "),qD=a("a"),sAo=o("Wav2Vec2ConformerForPreTraining"),lAo=o(" (Wav2Vec2-Conformer model)"),iAo=l(),_1=a("li"),Mfe=a("strong"),dAo=o("xlm"),cAo=o(" \u2014 "),jD=a("a"),fAo=o("XLMWithLMHeadModel"),mAo=o(" (XLM model)"),gAo=l(),b1=a("li"),Efe=a("strong"),hAo=o("xlm-roberta"),pAo=o(" \u2014 "),DD=a("a"),uAo=o("XLMRobertaForMaskedLM"),_Ao=o(" (XLM-RoBERTa model)"),bAo=l(),v1=a("li"),Cfe=a("strong"),vAo=o("xlm-roberta-xl"),FAo=o(" \u2014 "),GD=a("a"),TAo=o("XLMRobertaXLForMaskedLM"),MAo=o(" (XLM-RoBERTa-XL model)"),EAo=l(),F1=a("li"),wfe=a("strong"),CAo=o("xlnet"),wAo=o(" \u2014 "),OD=a("a"),AAo=o("XLNetLMHeadModel"),LAo=o(" (XLNet model)"),yAo=l(),T1=a("p"),xAo=o("The model is set in evaluation mode by default using "),Afe=a("code"),$Ao=o("model.eval()"),kAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lfe=a("code"),SAo=o("model.train()"),RAo=l(),F(M1.$$.fragment),yGe=l(),Gi=a("h2"),E1=a("a"),yfe=a("span"),F(aL.$$.fragment),PAo=l(),xfe=a("span"),BAo=o("AutoModelForCausalLM"),xGe=l(),ko=a("div"),F(nL.$$.fragment),IAo=l(),Oi=a("p"),NAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VD=a("a"),qAo=o("from_pretrained()"),jAo=o(" class method or the "),XD=a("a"),DAo=o("from_config()"),GAo=o(` class
method.`),OAo=l(),sL=a("p"),VAo=o("This class cannot be instantiated directly using "),$fe=a("code"),XAo=o("__init__()"),zAo=o(" (throws an error)."),WAo=l(),lt=a("div"),F(lL.$$.fragment),QAo=l(),kfe=a("p"),HAo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),UAo=l(),Vi=a("p"),JAo=o(`Note:
Loading a model from its configuration file does `),Sfe=a("strong"),YAo=o("not"),KAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=a("a"),ZAo=o("from_pretrained()"),e6o=o(" to load the model weights."),o6o=l(),F(C1.$$.fragment),r6o=l(),Ke=a("div"),F(iL.$$.fragment),t6o=l(),Rfe=a("p"),a6o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),n6o=l(),Pa=a("p"),s6o=o("The model class to instantiate is selected based on the "),Pfe=a("code"),l6o=o("model_type"),i6o=o(` property of the config object (either
passed as an argument or loaded from `),Bfe=a("code"),d6o=o("pretrained_model_name_or_path"),c6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=a("code"),f6o=o("pretrained_model_name_or_path"),m6o=o(":"),g6o=l(),z=a("ul"),w1=a("li"),Nfe=a("strong"),h6o=o("bart"),p6o=o(" \u2014 "),WD=a("a"),u6o=o("BartForCausalLM"),_6o=o(" (BART model)"),b6o=l(),A1=a("li"),qfe=a("strong"),v6o=o("bert"),F6o=o(" \u2014 "),QD=a("a"),T6o=o("BertLMHeadModel"),M6o=o(" (BERT model)"),E6o=l(),L1=a("li"),jfe=a("strong"),C6o=o("bert-generation"),w6o=o(" \u2014 "),HD=a("a"),A6o=o("BertGenerationDecoder"),L6o=o(" (Bert Generation model)"),y6o=l(),y1=a("li"),Dfe=a("strong"),x6o=o("big_bird"),$6o=o(" \u2014 "),UD=a("a"),k6o=o("BigBirdForCausalLM"),S6o=o(" (BigBird model)"),R6o=l(),x1=a("li"),Gfe=a("strong"),P6o=o("bigbird_pegasus"),B6o=o(" \u2014 "),JD=a("a"),I6o=o("BigBirdPegasusForCausalLM"),N6o=o(" (BigBird-Pegasus model)"),q6o=l(),$1=a("li"),Ofe=a("strong"),j6o=o("blenderbot"),D6o=o(" \u2014 "),YD=a("a"),G6o=o("BlenderbotForCausalLM"),O6o=o(" (Blenderbot model)"),V6o=l(),k1=a("li"),Vfe=a("strong"),X6o=o("blenderbot-small"),z6o=o(" \u2014 "),KD=a("a"),W6o=o("BlenderbotSmallForCausalLM"),Q6o=o(" (BlenderbotSmall model)"),H6o=l(),S1=a("li"),Xfe=a("strong"),U6o=o("bloom"),J6o=o(" \u2014 "),ZD=a("a"),Y6o=o("BloomForCausalLM"),K6o=o(" (BLOOM model)"),Z6o=l(),R1=a("li"),zfe=a("strong"),eLo=o("camembert"),oLo=o(" \u2014 "),eG=a("a"),rLo=o("CamembertForCausalLM"),tLo=o(" (CamemBERT model)"),aLo=l(),P1=a("li"),Wfe=a("strong"),nLo=o("ctrl"),sLo=o(" \u2014 "),oG=a("a"),lLo=o("CTRLLMHeadModel"),iLo=o(" (CTRL model)"),dLo=l(),B1=a("li"),Qfe=a("strong"),cLo=o("data2vec-text"),fLo=o(" \u2014 "),rG=a("a"),mLo=o("Data2VecTextForCausalLM"),gLo=o(" (Data2VecText model)"),hLo=l(),I1=a("li"),Hfe=a("strong"),pLo=o("electra"),uLo=o(" \u2014 "),tG=a("a"),_Lo=o("ElectraForCausalLM"),bLo=o(" (ELECTRA model)"),vLo=l(),N1=a("li"),Ufe=a("strong"),FLo=o("gpt2"),TLo=o(" \u2014 "),aG=a("a"),MLo=o("GPT2LMHeadModel"),ELo=o(" (OpenAI GPT-2 model)"),CLo=l(),q1=a("li"),Jfe=a("strong"),wLo=o("gpt_neo"),ALo=o(" \u2014 "),nG=a("a"),LLo=o("GPTNeoForCausalLM"),yLo=o(" (GPT Neo model)"),xLo=l(),j1=a("li"),Yfe=a("strong"),$Lo=o("gpt_neox"),kLo=o(" \u2014 "),sG=a("a"),SLo=o("GPTNeoXForCausalLM"),RLo=o(" (GPT NeoX model)"),PLo=l(),D1=a("li"),Kfe=a("strong"),BLo=o("gptj"),ILo=o(" \u2014 "),lG=a("a"),NLo=o("GPTJForCausalLM"),qLo=o(" (GPT-J model)"),jLo=l(),G1=a("li"),Zfe=a("strong"),DLo=o("marian"),GLo=o(" \u2014 "),iG=a("a"),OLo=o("MarianForCausalLM"),VLo=o(" (Marian model)"),XLo=l(),O1=a("li"),eme=a("strong"),zLo=o("mbart"),WLo=o(" \u2014 "),dG=a("a"),QLo=o("MBartForCausalLM"),HLo=o(" (mBART model)"),ULo=l(),V1=a("li"),ome=a("strong"),JLo=o("megatron-bert"),YLo=o(" \u2014 "),cG=a("a"),KLo=o("MegatronBertForCausalLM"),ZLo=o(" (Megatron-BERT model)"),eyo=l(),X1=a("li"),rme=a("strong"),oyo=o("openai-gpt"),ryo=o(" \u2014 "),fG=a("a"),tyo=o("OpenAIGPTLMHeadModel"),ayo=o(" (OpenAI GPT model)"),nyo=l(),z1=a("li"),tme=a("strong"),syo=o("opt"),lyo=o(" \u2014 "),mG=a("a"),iyo=o("OPTForCausalLM"),dyo=o(" (OPT model)"),cyo=l(),W1=a("li"),ame=a("strong"),fyo=o("pegasus"),myo=o(" \u2014 "),gG=a("a"),gyo=o("PegasusForCausalLM"),hyo=o(" (Pegasus model)"),pyo=l(),Q1=a("li"),nme=a("strong"),uyo=o("plbart"),_yo=o(" \u2014 "),hG=a("a"),byo=o("PLBartForCausalLM"),vyo=o(" (PLBart model)"),Fyo=l(),H1=a("li"),sme=a("strong"),Tyo=o("prophetnet"),Myo=o(" \u2014 "),pG=a("a"),Eyo=o("ProphetNetForCausalLM"),Cyo=o(" (ProphetNet model)"),wyo=l(),U1=a("li"),lme=a("strong"),Ayo=o("qdqbert"),Lyo=o(" \u2014 "),uG=a("a"),yyo=o("QDQBertLMHeadModel"),xyo=o(" (QDQBert model)"),$yo=l(),J1=a("li"),ime=a("strong"),kyo=o("reformer"),Syo=o(" \u2014 "),_G=a("a"),Ryo=o("ReformerModelWithLMHead"),Pyo=o(" (Reformer model)"),Byo=l(),Y1=a("li"),dme=a("strong"),Iyo=o("rembert"),Nyo=o(" \u2014 "),bG=a("a"),qyo=o("RemBertForCausalLM"),jyo=o(" (RemBERT model)"),Dyo=l(),K1=a("li"),cme=a("strong"),Gyo=o("roberta"),Oyo=o(" \u2014 "),vG=a("a"),Vyo=o("RobertaForCausalLM"),Xyo=o(" (RoBERTa model)"),zyo=l(),Z1=a("li"),fme=a("strong"),Wyo=o("roformer"),Qyo=o(" \u2014 "),FG=a("a"),Hyo=o("RoFormerForCausalLM"),Uyo=o(" (RoFormer model)"),Jyo=l(),e2=a("li"),mme=a("strong"),Yyo=o("speech_to_text_2"),Kyo=o(" \u2014 "),TG=a("a"),Zyo=o("Speech2Text2ForCausalLM"),e8o=o(" (Speech2Text2 model)"),o8o=l(),o2=a("li"),gme=a("strong"),r8o=o("transfo-xl"),t8o=o(" \u2014 "),MG=a("a"),a8o=o("TransfoXLLMHeadModel"),n8o=o(" (Transformer-XL model)"),s8o=l(),r2=a("li"),hme=a("strong"),l8o=o("trocr"),i8o=o(" \u2014 "),EG=a("a"),d8o=o("TrOCRForCausalLM"),c8o=o(" (TrOCR model)"),f8o=l(),t2=a("li"),pme=a("strong"),m8o=o("xglm"),g8o=o(" \u2014 "),CG=a("a"),h8o=o("XGLMForCausalLM"),p8o=o(" (XGLM model)"),u8o=l(),a2=a("li"),ume=a("strong"),_8o=o("xlm"),b8o=o(" \u2014 "),wG=a("a"),v8o=o("XLMWithLMHeadModel"),F8o=o(" (XLM model)"),T8o=l(),n2=a("li"),_me=a("strong"),M8o=o("xlm-prophetnet"),E8o=o(" \u2014 "),AG=a("a"),C8o=o("XLMProphetNetForCausalLM"),w8o=o(" (XLM-ProphetNet model)"),A8o=l(),s2=a("li"),bme=a("strong"),L8o=o("xlm-roberta"),y8o=o(" \u2014 "),LG=a("a"),x8o=o("XLMRobertaForCausalLM"),$8o=o(" (XLM-RoBERTa model)"),k8o=l(),l2=a("li"),vme=a("strong"),S8o=o("xlm-roberta-xl"),R8o=o(" \u2014 "),yG=a("a"),P8o=o("XLMRobertaXLForCausalLM"),B8o=o(" (XLM-RoBERTa-XL model)"),I8o=l(),i2=a("li"),Fme=a("strong"),N8o=o("xlnet"),q8o=o(" \u2014 "),xG=a("a"),j8o=o("XLNetLMHeadModel"),D8o=o(" (XLNet model)"),G8o=l(),d2=a("p"),O8o=o("The model is set in evaluation mode by default using "),Tme=a("code"),V8o=o("model.eval()"),X8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=a("code"),z8o=o("model.train()"),W8o=l(),F(c2.$$.fragment),$Ge=l(),Xi=a("h2"),f2=a("a"),Eme=a("span"),F(dL.$$.fragment),Q8o=l(),Cme=a("span"),H8o=o("AutoModelForMaskedLM"),kGe=l(),So=a("div"),F(cL.$$.fragment),U8o=l(),zi=a("p"),J8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$G=a("a"),Y8o=o("from_pretrained()"),K8o=o(" class method or the "),kG=a("a"),Z8o=o("from_config()"),exo=o(` class
method.`),oxo=l(),fL=a("p"),rxo=o("This class cannot be instantiated directly using "),wme=a("code"),txo=o("__init__()"),axo=o(" (throws an error)."),nxo=l(),it=a("div"),F(mL.$$.fragment),sxo=l(),Ame=a("p"),lxo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ixo=l(),Wi=a("p"),dxo=o(`Note:
Loading a model from its configuration file does `),Lme=a("strong"),cxo=o("not"),fxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=a("a"),mxo=o("from_pretrained()"),gxo=o(" to load the model weights."),hxo=l(),F(m2.$$.fragment),pxo=l(),Ze=a("div"),F(gL.$$.fragment),uxo=l(),yme=a("p"),_xo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),bxo=l(),Ba=a("p"),vxo=o("The model class to instantiate is selected based on the "),xme=a("code"),Fxo=o("model_type"),Txo=o(` property of the config object (either
passed as an argument or loaded from `),$me=a("code"),Mxo=o("pretrained_model_name_or_path"),Exo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=a("code"),Cxo=o("pretrained_model_name_or_path"),wxo=o(":"),Axo=l(),Q=a("ul"),g2=a("li"),Sme=a("strong"),Lxo=o("albert"),yxo=o(" \u2014 "),RG=a("a"),xxo=o("AlbertForMaskedLM"),$xo=o(" (ALBERT model)"),kxo=l(),h2=a("li"),Rme=a("strong"),Sxo=o("bart"),Rxo=o(" \u2014 "),PG=a("a"),Pxo=o("BartForConditionalGeneration"),Bxo=o(" (BART model)"),Ixo=l(),p2=a("li"),Pme=a("strong"),Nxo=o("bert"),qxo=o(" \u2014 "),BG=a("a"),jxo=o("BertForMaskedLM"),Dxo=o(" (BERT model)"),Gxo=l(),u2=a("li"),Bme=a("strong"),Oxo=o("big_bird"),Vxo=o(" \u2014 "),IG=a("a"),Xxo=o("BigBirdForMaskedLM"),zxo=o(" (BigBird model)"),Wxo=l(),_2=a("li"),Ime=a("strong"),Qxo=o("camembert"),Hxo=o(" \u2014 "),NG=a("a"),Uxo=o("CamembertForMaskedLM"),Jxo=o(" (CamemBERT model)"),Yxo=l(),b2=a("li"),Nme=a("strong"),Kxo=o("convbert"),Zxo=o(" \u2014 "),qG=a("a"),e$o=o("ConvBertForMaskedLM"),o$o=o(" (ConvBERT model)"),r$o=l(),v2=a("li"),qme=a("strong"),t$o=o("data2vec-text"),a$o=o(" \u2014 "),jG=a("a"),n$o=o("Data2VecTextForMaskedLM"),s$o=o(" (Data2VecText model)"),l$o=l(),F2=a("li"),jme=a("strong"),i$o=o("deberta"),d$o=o(" \u2014 "),DG=a("a"),c$o=o("DebertaForMaskedLM"),f$o=o(" (DeBERTa model)"),m$o=l(),T2=a("li"),Dme=a("strong"),g$o=o("deberta-v2"),h$o=o(" \u2014 "),GG=a("a"),p$o=o("DebertaV2ForMaskedLM"),u$o=o(" (DeBERTa-v2 model)"),_$o=l(),M2=a("li"),Gme=a("strong"),b$o=o("distilbert"),v$o=o(" \u2014 "),OG=a("a"),F$o=o("DistilBertForMaskedLM"),T$o=o(" (DistilBERT model)"),M$o=l(),E2=a("li"),Ome=a("strong"),E$o=o("electra"),C$o=o(" \u2014 "),VG=a("a"),w$o=o("ElectraForMaskedLM"),A$o=o(" (ELECTRA model)"),L$o=l(),C2=a("li"),Vme=a("strong"),y$o=o("flaubert"),x$o=o(" \u2014 "),XG=a("a"),$$o=o("FlaubertWithLMHeadModel"),k$o=o(" (FlauBERT model)"),S$o=l(),w2=a("li"),Xme=a("strong"),R$o=o("fnet"),P$o=o(" \u2014 "),zG=a("a"),B$o=o("FNetForMaskedLM"),I$o=o(" (FNet model)"),N$o=l(),A2=a("li"),zme=a("strong"),q$o=o("funnel"),j$o=o(" \u2014 "),WG=a("a"),D$o=o("FunnelForMaskedLM"),G$o=o(" (Funnel Transformer model)"),O$o=l(),L2=a("li"),Wme=a("strong"),V$o=o("ibert"),X$o=o(" \u2014 "),QG=a("a"),z$o=o("IBertForMaskedLM"),W$o=o(" (I-BERT model)"),Q$o=l(),y2=a("li"),Qme=a("strong"),H$o=o("layoutlm"),U$o=o(" \u2014 "),HG=a("a"),J$o=o("LayoutLMForMaskedLM"),Y$o=o(" (LayoutLM model)"),K$o=l(),x2=a("li"),Hme=a("strong"),Z$o=o("longformer"),eko=o(" \u2014 "),UG=a("a"),oko=o("LongformerForMaskedLM"),rko=o(" (Longformer model)"),tko=l(),$2=a("li"),Ume=a("strong"),ako=o("luke"),nko=o(" \u2014 "),JG=a("a"),sko=o("LukeForMaskedLM"),lko=o(" (LUKE model)"),iko=l(),k2=a("li"),Jme=a("strong"),dko=o("mbart"),cko=o(" \u2014 "),YG=a("a"),fko=o("MBartForConditionalGeneration"),mko=o(" (mBART model)"),gko=l(),S2=a("li"),Yme=a("strong"),hko=o("megatron-bert"),pko=o(" \u2014 "),KG=a("a"),uko=o("MegatronBertForMaskedLM"),_ko=o(" (Megatron-BERT model)"),bko=l(),R2=a("li"),Kme=a("strong"),vko=o("mobilebert"),Fko=o(" \u2014 "),ZG=a("a"),Tko=o("MobileBertForMaskedLM"),Mko=o(" (MobileBERT model)"),Eko=l(),P2=a("li"),Zme=a("strong"),Cko=o("mpnet"),wko=o(" \u2014 "),eO=a("a"),Ako=o("MPNetForMaskedLM"),Lko=o(" (MPNet model)"),yko=l(),B2=a("li"),ege=a("strong"),xko=o("nystromformer"),$ko=o(" \u2014 "),oO=a("a"),kko=o("NystromformerForMaskedLM"),Sko=o(" (Nystr\xF6mformer model)"),Rko=l(),I2=a("li"),oge=a("strong"),Pko=o("perceiver"),Bko=o(" \u2014 "),rO=a("a"),Iko=o("PerceiverForMaskedLM"),Nko=o(" (Perceiver model)"),qko=l(),N2=a("li"),rge=a("strong"),jko=o("qdqbert"),Dko=o(" \u2014 "),tO=a("a"),Gko=o("QDQBertForMaskedLM"),Oko=o(" (QDQBert model)"),Vko=l(),q2=a("li"),tge=a("strong"),Xko=o("reformer"),zko=o(" \u2014 "),aO=a("a"),Wko=o("ReformerForMaskedLM"),Qko=o(" (Reformer model)"),Hko=l(),j2=a("li"),age=a("strong"),Uko=o("rembert"),Jko=o(" \u2014 "),nO=a("a"),Yko=o("RemBertForMaskedLM"),Kko=o(" (RemBERT model)"),Zko=l(),D2=a("li"),nge=a("strong"),eSo=o("roberta"),oSo=o(" \u2014 "),sO=a("a"),rSo=o("RobertaForMaskedLM"),tSo=o(" (RoBERTa model)"),aSo=l(),G2=a("li"),sge=a("strong"),nSo=o("roformer"),sSo=o(" \u2014 "),lO=a("a"),lSo=o("RoFormerForMaskedLM"),iSo=o(" (RoFormer model)"),dSo=l(),O2=a("li"),lge=a("strong"),cSo=o("squeezebert"),fSo=o(" \u2014 "),iO=a("a"),mSo=o("SqueezeBertForMaskedLM"),gSo=o(" (SqueezeBERT model)"),hSo=l(),V2=a("li"),ige=a("strong"),pSo=o("tapas"),uSo=o(" \u2014 "),dO=a("a"),_So=o("TapasForMaskedLM"),bSo=o(" (TAPAS model)"),vSo=l(),X2=a("li"),dge=a("strong"),FSo=o("wav2vec2"),TSo=o(" \u2014 "),cge=a("code"),MSo=o("Wav2Vec2ForMaskedLM"),ESo=o(" (Wav2Vec2 model)"),CSo=l(),z2=a("li"),fge=a("strong"),wSo=o("xlm"),ASo=o(" \u2014 "),cO=a("a"),LSo=o("XLMWithLMHeadModel"),ySo=o(" (XLM model)"),xSo=l(),W2=a("li"),mge=a("strong"),$So=o("xlm-roberta"),kSo=o(" \u2014 "),fO=a("a"),SSo=o("XLMRobertaForMaskedLM"),RSo=o(" (XLM-RoBERTa model)"),PSo=l(),Q2=a("li"),gge=a("strong"),BSo=o("xlm-roberta-xl"),ISo=o(" \u2014 "),mO=a("a"),NSo=o("XLMRobertaXLForMaskedLM"),qSo=o(" (XLM-RoBERTa-XL model)"),jSo=l(),H2=a("li"),hge=a("strong"),DSo=o("yoso"),GSo=o(" \u2014 "),gO=a("a"),OSo=o("YosoForMaskedLM"),VSo=o(" (YOSO model)"),XSo=l(),U2=a("p"),zSo=o("The model is set in evaluation mode by default using "),pge=a("code"),WSo=o("model.eval()"),QSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=a("code"),HSo=o("model.train()"),USo=l(),F(J2.$$.fragment),SGe=l(),Qi=a("h2"),Y2=a("a"),_ge=a("span"),F(hL.$$.fragment),JSo=l(),bge=a("span"),YSo=o("AutoModelForSeq2SeqLM"),RGe=l(),Ro=a("div"),F(pL.$$.fragment),KSo=l(),Hi=a("p"),ZSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hO=a("a"),eRo=o("from_pretrained()"),oRo=o(" class method or the "),pO=a("a"),rRo=o("from_config()"),tRo=o(` class
method.`),aRo=l(),uL=a("p"),nRo=o("This class cannot be instantiated directly using "),vge=a("code"),sRo=o("__init__()"),lRo=o(" (throws an error)."),iRo=l(),dt=a("div"),F(_L.$$.fragment),dRo=l(),Fge=a("p"),cRo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fRo=l(),Ui=a("p"),mRo=o(`Note:
Loading a model from its configuration file does `),Tge=a("strong"),gRo=o("not"),hRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uO=a("a"),pRo=o("from_pretrained()"),uRo=o(" to load the model weights."),_Ro=l(),F(K2.$$.fragment),bRo=l(),eo=a("div"),F(bL.$$.fragment),vRo=l(),Mge=a("p"),FRo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),TRo=l(),Ia=a("p"),MRo=o("The model class to instantiate is selected based on the "),Ege=a("code"),ERo=o("model_type"),CRo=o(` property of the config object (either
passed as an argument or loaded from `),Cge=a("code"),wRo=o("pretrained_model_name_or_path"),ARo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=a("code"),LRo=o("pretrained_model_name_or_path"),yRo=o(":"),xRo=l(),pe=a("ul"),Z2=a("li"),Age=a("strong"),$Ro=o("bart"),kRo=o(" \u2014 "),_O=a("a"),SRo=o("BartForConditionalGeneration"),RRo=o(" (BART model)"),PRo=l(),eb=a("li"),Lge=a("strong"),BRo=o("bigbird_pegasus"),IRo=o(" \u2014 "),bO=a("a"),NRo=o("BigBirdPegasusForConditionalGeneration"),qRo=o(" (BigBird-Pegasus model)"),jRo=l(),ob=a("li"),yge=a("strong"),DRo=o("blenderbot"),GRo=o(" \u2014 "),vO=a("a"),ORo=o("BlenderbotForConditionalGeneration"),VRo=o(" (Blenderbot model)"),XRo=l(),rb=a("li"),xge=a("strong"),zRo=o("blenderbot-small"),WRo=o(" \u2014 "),FO=a("a"),QRo=o("BlenderbotSmallForConditionalGeneration"),HRo=o(" (BlenderbotSmall model)"),URo=l(),tb=a("li"),$ge=a("strong"),JRo=o("encoder-decoder"),YRo=o(" \u2014 "),TO=a("a"),KRo=o("EncoderDecoderModel"),ZRo=o(" (Encoder decoder model)"),ePo=l(),ab=a("li"),kge=a("strong"),oPo=o("fsmt"),rPo=o(" \u2014 "),MO=a("a"),tPo=o("FSMTForConditionalGeneration"),aPo=o(" (FairSeq Machine-Translation model)"),nPo=l(),nb=a("li"),Sge=a("strong"),sPo=o("led"),lPo=o(" \u2014 "),EO=a("a"),iPo=o("LEDForConditionalGeneration"),dPo=o(" (LED model)"),cPo=l(),sb=a("li"),Rge=a("strong"),fPo=o("longt5"),mPo=o(" \u2014 "),CO=a("a"),gPo=o("LongT5ForConditionalGeneration"),hPo=o(" (LongT5 model)"),pPo=l(),lb=a("li"),Pge=a("strong"),uPo=o("m2m_100"),_Po=o(" \u2014 "),wO=a("a"),bPo=o("M2M100ForConditionalGeneration"),vPo=o(" (M2M100 model)"),FPo=l(),ib=a("li"),Bge=a("strong"),TPo=o("marian"),MPo=o(" \u2014 "),AO=a("a"),EPo=o("MarianMTModel"),CPo=o(" (Marian model)"),wPo=l(),db=a("li"),Ige=a("strong"),APo=o("mbart"),LPo=o(" \u2014 "),LO=a("a"),yPo=o("MBartForConditionalGeneration"),xPo=o(" (mBART model)"),$Po=l(),cb=a("li"),Nge=a("strong"),kPo=o("mt5"),SPo=o(" \u2014 "),yO=a("a"),RPo=o("MT5ForConditionalGeneration"),PPo=o(" (MT5 model)"),BPo=l(),fb=a("li"),qge=a("strong"),IPo=o("pegasus"),NPo=o(" \u2014 "),xO=a("a"),qPo=o("PegasusForConditionalGeneration"),jPo=o(" (Pegasus model)"),DPo=l(),mb=a("li"),jge=a("strong"),GPo=o("plbart"),OPo=o(" \u2014 "),$O=a("a"),VPo=o("PLBartForConditionalGeneration"),XPo=o(" (PLBart model)"),zPo=l(),gb=a("li"),Dge=a("strong"),WPo=o("prophetnet"),QPo=o(" \u2014 "),kO=a("a"),HPo=o("ProphetNetForConditionalGeneration"),UPo=o(" (ProphetNet model)"),JPo=l(),hb=a("li"),Gge=a("strong"),YPo=o("t5"),KPo=o(" \u2014 "),SO=a("a"),ZPo=o("T5ForConditionalGeneration"),eBo=o(" (T5 model)"),oBo=l(),pb=a("li"),Oge=a("strong"),rBo=o("xlm-prophetnet"),tBo=o(" \u2014 "),RO=a("a"),aBo=o("XLMProphetNetForConditionalGeneration"),nBo=o(" (XLM-ProphetNet model)"),sBo=l(),ub=a("p"),lBo=o("The model is set in evaluation mode by default using "),Vge=a("code"),iBo=o("model.eval()"),dBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xge=a("code"),cBo=o("model.train()"),fBo=l(),F(_b.$$.fragment),PGe=l(),Ji=a("h2"),bb=a("a"),zge=a("span"),F(vL.$$.fragment),mBo=l(),Wge=a("span"),gBo=o("AutoModelForSequenceClassification"),BGe=l(),Po=a("div"),F(FL.$$.fragment),hBo=l(),Yi=a("p"),pBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),PO=a("a"),uBo=o("from_pretrained()"),_Bo=o(" class method or the "),BO=a("a"),bBo=o("from_config()"),vBo=o(` class
method.`),FBo=l(),TL=a("p"),TBo=o("This class cannot be instantiated directly using "),Qge=a("code"),MBo=o("__init__()"),EBo=o(" (throws an error)."),CBo=l(),ct=a("div"),F(ML.$$.fragment),wBo=l(),Hge=a("p"),ABo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),LBo=l(),Ki=a("p"),yBo=o(`Note:
Loading a model from its configuration file does `),Uge=a("strong"),xBo=o("not"),$Bo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=a("a"),kBo=o("from_pretrained()"),SBo=o(" to load the model weights."),RBo=l(),F(vb.$$.fragment),PBo=l(),oo=a("div"),F(EL.$$.fragment),BBo=l(),Jge=a("p"),IBo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),NBo=l(),Na=a("p"),qBo=o("The model class to instantiate is selected based on the "),Yge=a("code"),jBo=o("model_type"),DBo=o(` property of the config object (either
passed as an argument or loaded from `),Kge=a("code"),GBo=o("pretrained_model_name_or_path"),OBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=a("code"),VBo=o("pretrained_model_name_or_path"),XBo=o(":"),zBo=l(),N=a("ul"),Fb=a("li"),ehe=a("strong"),WBo=o("albert"),QBo=o(" \u2014 "),NO=a("a"),HBo=o("AlbertForSequenceClassification"),UBo=o(" (ALBERT model)"),JBo=l(),Tb=a("li"),ohe=a("strong"),YBo=o("bart"),KBo=o(" \u2014 "),qO=a("a"),ZBo=o("BartForSequenceClassification"),eIo=o(" (BART model)"),oIo=l(),Mb=a("li"),rhe=a("strong"),rIo=o("bert"),tIo=o(" \u2014 "),jO=a("a"),aIo=o("BertForSequenceClassification"),nIo=o(" (BERT model)"),sIo=l(),Eb=a("li"),the=a("strong"),lIo=o("big_bird"),iIo=o(" \u2014 "),DO=a("a"),dIo=o("BigBirdForSequenceClassification"),cIo=o(" (BigBird model)"),fIo=l(),Cb=a("li"),ahe=a("strong"),mIo=o("bigbird_pegasus"),gIo=o(" \u2014 "),GO=a("a"),hIo=o("BigBirdPegasusForSequenceClassification"),pIo=o(" (BigBird-Pegasus model)"),uIo=l(),wb=a("li"),nhe=a("strong"),_Io=o("bloom"),bIo=o(" \u2014 "),OO=a("a"),vIo=o("BloomForSequenceClassification"),FIo=o(" (BLOOM model)"),TIo=l(),Ab=a("li"),she=a("strong"),MIo=o("camembert"),EIo=o(" \u2014 "),VO=a("a"),CIo=o("CamembertForSequenceClassification"),wIo=o(" (CamemBERT model)"),AIo=l(),Lb=a("li"),lhe=a("strong"),LIo=o("canine"),yIo=o(" \u2014 "),XO=a("a"),xIo=o("CanineForSequenceClassification"),$Io=o(" (CANINE model)"),kIo=l(),yb=a("li"),ihe=a("strong"),SIo=o("convbert"),RIo=o(" \u2014 "),zO=a("a"),PIo=o("ConvBertForSequenceClassification"),BIo=o(" (ConvBERT model)"),IIo=l(),xb=a("li"),dhe=a("strong"),NIo=o("ctrl"),qIo=o(" \u2014 "),WO=a("a"),jIo=o("CTRLForSequenceClassification"),DIo=o(" (CTRL model)"),GIo=l(),$b=a("li"),che=a("strong"),OIo=o("data2vec-text"),VIo=o(" \u2014 "),QO=a("a"),XIo=o("Data2VecTextForSequenceClassification"),zIo=o(" (Data2VecText model)"),WIo=l(),kb=a("li"),fhe=a("strong"),QIo=o("deberta"),HIo=o(" \u2014 "),HO=a("a"),UIo=o("DebertaForSequenceClassification"),JIo=o(" (DeBERTa model)"),YIo=l(),Sb=a("li"),mhe=a("strong"),KIo=o("deberta-v2"),ZIo=o(" \u2014 "),UO=a("a"),eNo=o("DebertaV2ForSequenceClassification"),oNo=o(" (DeBERTa-v2 model)"),rNo=l(),Rb=a("li"),ghe=a("strong"),tNo=o("distilbert"),aNo=o(" \u2014 "),JO=a("a"),nNo=o("DistilBertForSequenceClassification"),sNo=o(" (DistilBERT model)"),lNo=l(),Pb=a("li"),hhe=a("strong"),iNo=o("electra"),dNo=o(" \u2014 "),YO=a("a"),cNo=o("ElectraForSequenceClassification"),fNo=o(" (ELECTRA model)"),mNo=l(),Bb=a("li"),phe=a("strong"),gNo=o("flaubert"),hNo=o(" \u2014 "),KO=a("a"),pNo=o("FlaubertForSequenceClassification"),uNo=o(" (FlauBERT model)"),_No=l(),Ib=a("li"),uhe=a("strong"),bNo=o("fnet"),vNo=o(" \u2014 "),ZO=a("a"),FNo=o("FNetForSequenceClassification"),TNo=o(" (FNet model)"),MNo=l(),Nb=a("li"),_he=a("strong"),ENo=o("funnel"),CNo=o(" \u2014 "),eV=a("a"),wNo=o("FunnelForSequenceClassification"),ANo=o(" (Funnel Transformer model)"),LNo=l(),qb=a("li"),bhe=a("strong"),yNo=o("gpt2"),xNo=o(" \u2014 "),oV=a("a"),$No=o("GPT2ForSequenceClassification"),kNo=o(" (OpenAI GPT-2 model)"),SNo=l(),jb=a("li"),vhe=a("strong"),RNo=o("gpt_neo"),PNo=o(" \u2014 "),rV=a("a"),BNo=o("GPTNeoForSequenceClassification"),INo=o(" (GPT Neo model)"),NNo=l(),Db=a("li"),Fhe=a("strong"),qNo=o("gptj"),jNo=o(" \u2014 "),tV=a("a"),DNo=o("GPTJForSequenceClassification"),GNo=o(" (GPT-J model)"),ONo=l(),Gb=a("li"),The=a("strong"),VNo=o("ibert"),XNo=o(" \u2014 "),aV=a("a"),zNo=o("IBertForSequenceClassification"),WNo=o(" (I-BERT model)"),QNo=l(),Ob=a("li"),Mhe=a("strong"),HNo=o("layoutlm"),UNo=o(" \u2014 "),nV=a("a"),JNo=o("LayoutLMForSequenceClassification"),YNo=o(" (LayoutLM model)"),KNo=l(),Vb=a("li"),Ehe=a("strong"),ZNo=o("layoutlmv2"),eqo=o(" \u2014 "),sV=a("a"),oqo=o("LayoutLMv2ForSequenceClassification"),rqo=o(" (LayoutLMv2 model)"),tqo=l(),Xb=a("li"),Che=a("strong"),aqo=o("layoutlmv3"),nqo=o(" \u2014 "),lV=a("a"),sqo=o("LayoutLMv3ForSequenceClassification"),lqo=o(" (LayoutLMv3 model)"),iqo=l(),zb=a("li"),whe=a("strong"),dqo=o("led"),cqo=o(" \u2014 "),iV=a("a"),fqo=o("LEDForSequenceClassification"),mqo=o(" (LED model)"),gqo=l(),Wb=a("li"),Ahe=a("strong"),hqo=o("longformer"),pqo=o(" \u2014 "),dV=a("a"),uqo=o("LongformerForSequenceClassification"),_qo=o(" (Longformer model)"),bqo=l(),Qb=a("li"),Lhe=a("strong"),vqo=o("mbart"),Fqo=o(" \u2014 "),cV=a("a"),Tqo=o("MBartForSequenceClassification"),Mqo=o(" (mBART model)"),Eqo=l(),Hb=a("li"),yhe=a("strong"),Cqo=o("megatron-bert"),wqo=o(" \u2014 "),fV=a("a"),Aqo=o("MegatronBertForSequenceClassification"),Lqo=o(" (Megatron-BERT model)"),yqo=l(),Ub=a("li"),xhe=a("strong"),xqo=o("mobilebert"),$qo=o(" \u2014 "),mV=a("a"),kqo=o("MobileBertForSequenceClassification"),Sqo=o(" (MobileBERT model)"),Rqo=l(),Jb=a("li"),$he=a("strong"),Pqo=o("mpnet"),Bqo=o(" \u2014 "),gV=a("a"),Iqo=o("MPNetForSequenceClassification"),Nqo=o(" (MPNet model)"),qqo=l(),Yb=a("li"),khe=a("strong"),jqo=o("nystromformer"),Dqo=o(" \u2014 "),hV=a("a"),Gqo=o("NystromformerForSequenceClassification"),Oqo=o(" (Nystr\xF6mformer model)"),Vqo=l(),Kb=a("li"),She=a("strong"),Xqo=o("openai-gpt"),zqo=o(" \u2014 "),pV=a("a"),Wqo=o("OpenAIGPTForSequenceClassification"),Qqo=o(" (OpenAI GPT model)"),Hqo=l(),Zb=a("li"),Rhe=a("strong"),Uqo=o("perceiver"),Jqo=o(" \u2014 "),uV=a("a"),Yqo=o("PerceiverForSequenceClassification"),Kqo=o(" (Perceiver model)"),Zqo=l(),ev=a("li"),Phe=a("strong"),ejo=o("plbart"),ojo=o(" \u2014 "),_V=a("a"),rjo=o("PLBartForSequenceClassification"),tjo=o(" (PLBart model)"),ajo=l(),ov=a("li"),Bhe=a("strong"),njo=o("qdqbert"),sjo=o(" \u2014 "),bV=a("a"),ljo=o("QDQBertForSequenceClassification"),ijo=o(" (QDQBert model)"),djo=l(),rv=a("li"),Ihe=a("strong"),cjo=o("reformer"),fjo=o(" \u2014 "),vV=a("a"),mjo=o("ReformerForSequenceClassification"),gjo=o(" (Reformer model)"),hjo=l(),tv=a("li"),Nhe=a("strong"),pjo=o("rembert"),ujo=o(" \u2014 "),FV=a("a"),_jo=o("RemBertForSequenceClassification"),bjo=o(" (RemBERT model)"),vjo=l(),av=a("li"),qhe=a("strong"),Fjo=o("roberta"),Tjo=o(" \u2014 "),TV=a("a"),Mjo=o("RobertaForSequenceClassification"),Ejo=o(" (RoBERTa model)"),Cjo=l(),nv=a("li"),jhe=a("strong"),wjo=o("roformer"),Ajo=o(" \u2014 "),MV=a("a"),Ljo=o("RoFormerForSequenceClassification"),yjo=o(" (RoFormer model)"),xjo=l(),sv=a("li"),Dhe=a("strong"),$jo=o("squeezebert"),kjo=o(" \u2014 "),EV=a("a"),Sjo=o("SqueezeBertForSequenceClassification"),Rjo=o(" (SqueezeBERT model)"),Pjo=l(),lv=a("li"),Ghe=a("strong"),Bjo=o("tapas"),Ijo=o(" \u2014 "),CV=a("a"),Njo=o("TapasForSequenceClassification"),qjo=o(" (TAPAS model)"),jjo=l(),iv=a("li"),Ohe=a("strong"),Djo=o("transfo-xl"),Gjo=o(" \u2014 "),wV=a("a"),Ojo=o("TransfoXLForSequenceClassification"),Vjo=o(" (Transformer-XL model)"),Xjo=l(),dv=a("li"),Vhe=a("strong"),zjo=o("xlm"),Wjo=o(" \u2014 "),AV=a("a"),Qjo=o("XLMForSequenceClassification"),Hjo=o(" (XLM model)"),Ujo=l(),cv=a("li"),Xhe=a("strong"),Jjo=o("xlm-roberta"),Yjo=o(" \u2014 "),LV=a("a"),Kjo=o("XLMRobertaForSequenceClassification"),Zjo=o(" (XLM-RoBERTa model)"),eDo=l(),fv=a("li"),zhe=a("strong"),oDo=o("xlm-roberta-xl"),rDo=o(" \u2014 "),yV=a("a"),tDo=o("XLMRobertaXLForSequenceClassification"),aDo=o(" (XLM-RoBERTa-XL model)"),nDo=l(),mv=a("li"),Whe=a("strong"),sDo=o("xlnet"),lDo=o(" \u2014 "),xV=a("a"),iDo=o("XLNetForSequenceClassification"),dDo=o(" (XLNet model)"),cDo=l(),gv=a("li"),Qhe=a("strong"),fDo=o("yoso"),mDo=o(" \u2014 "),$V=a("a"),gDo=o("YosoForSequenceClassification"),hDo=o(" (YOSO model)"),pDo=l(),hv=a("p"),uDo=o("The model is set in evaluation mode by default using "),Hhe=a("code"),_Do=o("model.eval()"),bDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uhe=a("code"),vDo=o("model.train()"),FDo=l(),F(pv.$$.fragment),IGe=l(),Zi=a("h2"),uv=a("a"),Jhe=a("span"),F(CL.$$.fragment),TDo=l(),Yhe=a("span"),MDo=o("AutoModelForMultipleChoice"),NGe=l(),Bo=a("div"),F(wL.$$.fragment),EDo=l(),ed=a("p"),CDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kV=a("a"),wDo=o("from_pretrained()"),ADo=o(" class method or the "),SV=a("a"),LDo=o("from_config()"),yDo=o(` class
method.`),xDo=l(),AL=a("p"),$Do=o("This class cannot be instantiated directly using "),Khe=a("code"),kDo=o("__init__()"),SDo=o(" (throws an error)."),RDo=l(),ft=a("div"),F(LL.$$.fragment),PDo=l(),Zhe=a("p"),BDo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),IDo=l(),od=a("p"),NDo=o(`Note:
Loading a model from its configuration file does `),epe=a("strong"),qDo=o("not"),jDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),DDo=o("from_pretrained()"),GDo=o(" to load the model weights."),ODo=l(),F(_v.$$.fragment),VDo=l(),ro=a("div"),F(yL.$$.fragment),XDo=l(),ope=a("p"),zDo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),WDo=l(),qa=a("p"),QDo=o("The model class to instantiate is selected based on the "),rpe=a("code"),HDo=o("model_type"),UDo=o(` property of the config object (either
passed as an argument or loaded from `),tpe=a("code"),JDo=o("pretrained_model_name_or_path"),YDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=a("code"),KDo=o("pretrained_model_name_or_path"),ZDo=o(":"),eGo=l(),Z=a("ul"),bv=a("li"),npe=a("strong"),oGo=o("albert"),rGo=o(" \u2014 "),PV=a("a"),tGo=o("AlbertForMultipleChoice"),aGo=o(" (ALBERT model)"),nGo=l(),vv=a("li"),spe=a("strong"),sGo=o("bert"),lGo=o(" \u2014 "),BV=a("a"),iGo=o("BertForMultipleChoice"),dGo=o(" (BERT model)"),cGo=l(),Fv=a("li"),lpe=a("strong"),fGo=o("big_bird"),mGo=o(" \u2014 "),IV=a("a"),gGo=o("BigBirdForMultipleChoice"),hGo=o(" (BigBird model)"),pGo=l(),Tv=a("li"),ipe=a("strong"),uGo=o("camembert"),_Go=o(" \u2014 "),NV=a("a"),bGo=o("CamembertForMultipleChoice"),vGo=o(" (CamemBERT model)"),FGo=l(),Mv=a("li"),dpe=a("strong"),TGo=o("canine"),MGo=o(" \u2014 "),qV=a("a"),EGo=o("CanineForMultipleChoice"),CGo=o(" (CANINE model)"),wGo=l(),Ev=a("li"),cpe=a("strong"),AGo=o("convbert"),LGo=o(" \u2014 "),jV=a("a"),yGo=o("ConvBertForMultipleChoice"),xGo=o(" (ConvBERT model)"),$Go=l(),Cv=a("li"),fpe=a("strong"),kGo=o("data2vec-text"),SGo=o(" \u2014 "),DV=a("a"),RGo=o("Data2VecTextForMultipleChoice"),PGo=o(" (Data2VecText model)"),BGo=l(),wv=a("li"),mpe=a("strong"),IGo=o("deberta-v2"),NGo=o(" \u2014 "),GV=a("a"),qGo=o("DebertaV2ForMultipleChoice"),jGo=o(" (DeBERTa-v2 model)"),DGo=l(),Av=a("li"),gpe=a("strong"),GGo=o("distilbert"),OGo=o(" \u2014 "),OV=a("a"),VGo=o("DistilBertForMultipleChoice"),XGo=o(" (DistilBERT model)"),zGo=l(),Lv=a("li"),hpe=a("strong"),WGo=o("electra"),QGo=o(" \u2014 "),VV=a("a"),HGo=o("ElectraForMultipleChoice"),UGo=o(" (ELECTRA model)"),JGo=l(),yv=a("li"),ppe=a("strong"),YGo=o("flaubert"),KGo=o(" \u2014 "),XV=a("a"),ZGo=o("FlaubertForMultipleChoice"),eOo=o(" (FlauBERT model)"),oOo=l(),xv=a("li"),upe=a("strong"),rOo=o("fnet"),tOo=o(" \u2014 "),zV=a("a"),aOo=o("FNetForMultipleChoice"),nOo=o(" (FNet model)"),sOo=l(),$v=a("li"),_pe=a("strong"),lOo=o("funnel"),iOo=o(" \u2014 "),WV=a("a"),dOo=o("FunnelForMultipleChoice"),cOo=o(" (Funnel Transformer model)"),fOo=l(),kv=a("li"),bpe=a("strong"),mOo=o("ibert"),gOo=o(" \u2014 "),QV=a("a"),hOo=o("IBertForMultipleChoice"),pOo=o(" (I-BERT model)"),uOo=l(),Sv=a("li"),vpe=a("strong"),_Oo=o("longformer"),bOo=o(" \u2014 "),HV=a("a"),vOo=o("LongformerForMultipleChoice"),FOo=o(" (Longformer model)"),TOo=l(),Rv=a("li"),Fpe=a("strong"),MOo=o("megatron-bert"),EOo=o(" \u2014 "),UV=a("a"),COo=o("MegatronBertForMultipleChoice"),wOo=o(" (Megatron-BERT model)"),AOo=l(),Pv=a("li"),Tpe=a("strong"),LOo=o("mobilebert"),yOo=o(" \u2014 "),JV=a("a"),xOo=o("MobileBertForMultipleChoice"),$Oo=o(" (MobileBERT model)"),kOo=l(),Bv=a("li"),Mpe=a("strong"),SOo=o("mpnet"),ROo=o(" \u2014 "),YV=a("a"),POo=o("MPNetForMultipleChoice"),BOo=o(" (MPNet model)"),IOo=l(),Iv=a("li"),Epe=a("strong"),NOo=o("nystromformer"),qOo=o(" \u2014 "),KV=a("a"),jOo=o("NystromformerForMultipleChoice"),DOo=o(" (Nystr\xF6mformer model)"),GOo=l(),Nv=a("li"),Cpe=a("strong"),OOo=o("qdqbert"),VOo=o(" \u2014 "),ZV=a("a"),XOo=o("QDQBertForMultipleChoice"),zOo=o(" (QDQBert model)"),WOo=l(),qv=a("li"),wpe=a("strong"),QOo=o("rembert"),HOo=o(" \u2014 "),eX=a("a"),UOo=o("RemBertForMultipleChoice"),JOo=o(" (RemBERT model)"),YOo=l(),jv=a("li"),Ape=a("strong"),KOo=o("roberta"),ZOo=o(" \u2014 "),oX=a("a"),eVo=o("RobertaForMultipleChoice"),oVo=o(" (RoBERTa model)"),rVo=l(),Dv=a("li"),Lpe=a("strong"),tVo=o("roformer"),aVo=o(" \u2014 "),rX=a("a"),nVo=o("RoFormerForMultipleChoice"),sVo=o(" (RoFormer model)"),lVo=l(),Gv=a("li"),ype=a("strong"),iVo=o("squeezebert"),dVo=o(" \u2014 "),tX=a("a"),cVo=o("SqueezeBertForMultipleChoice"),fVo=o(" (SqueezeBERT model)"),mVo=l(),Ov=a("li"),xpe=a("strong"),gVo=o("xlm"),hVo=o(" \u2014 "),aX=a("a"),pVo=o("XLMForMultipleChoice"),uVo=o(" (XLM model)"),_Vo=l(),Vv=a("li"),$pe=a("strong"),bVo=o("xlm-roberta"),vVo=o(" \u2014 "),nX=a("a"),FVo=o("XLMRobertaForMultipleChoice"),TVo=o(" (XLM-RoBERTa model)"),MVo=l(),Xv=a("li"),kpe=a("strong"),EVo=o("xlm-roberta-xl"),CVo=o(" \u2014 "),sX=a("a"),wVo=o("XLMRobertaXLForMultipleChoice"),AVo=o(" (XLM-RoBERTa-XL model)"),LVo=l(),zv=a("li"),Spe=a("strong"),yVo=o("xlnet"),xVo=o(" \u2014 "),lX=a("a"),$Vo=o("XLNetForMultipleChoice"),kVo=o(" (XLNet model)"),SVo=l(),Wv=a("li"),Rpe=a("strong"),RVo=o("yoso"),PVo=o(" \u2014 "),iX=a("a"),BVo=o("YosoForMultipleChoice"),IVo=o(" (YOSO model)"),NVo=l(),Qv=a("p"),qVo=o("The model is set in evaluation mode by default using "),Ppe=a("code"),jVo=o("model.eval()"),DVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=a("code"),GVo=o("model.train()"),OVo=l(),F(Hv.$$.fragment),qGe=l(),rd=a("h2"),Uv=a("a"),Ipe=a("span"),F(xL.$$.fragment),VVo=l(),Npe=a("span"),XVo=o("AutoModelForNextSentencePrediction"),jGe=l(),Io=a("div"),F($L.$$.fragment),zVo=l(),td=a("p"),WVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dX=a("a"),QVo=o("from_pretrained()"),HVo=o(" class method or the "),cX=a("a"),UVo=o("from_config()"),JVo=o(` class
method.`),YVo=l(),kL=a("p"),KVo=o("This class cannot be instantiated directly using "),qpe=a("code"),ZVo=o("__init__()"),eXo=o(" (throws an error)."),oXo=l(),mt=a("div"),F(SL.$$.fragment),rXo=l(),jpe=a("p"),tXo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),aXo=l(),ad=a("p"),nXo=o(`Note:
Loading a model from its configuration file does `),Dpe=a("strong"),sXo=o("not"),lXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=a("a"),iXo=o("from_pretrained()"),dXo=o(" to load the model weights."),cXo=l(),F(Jv.$$.fragment),fXo=l(),to=a("div"),F(RL.$$.fragment),mXo=l(),Gpe=a("p"),gXo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hXo=l(),ja=a("p"),pXo=o("The model class to instantiate is selected based on the "),Ope=a("code"),uXo=o("model_type"),_Xo=o(` property of the config object (either
passed as an argument or loaded from `),Vpe=a("code"),bXo=o("pretrained_model_name_or_path"),vXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xpe=a("code"),FXo=o("pretrained_model_name_or_path"),TXo=o(":"),MXo=l(),Zr=a("ul"),Yv=a("li"),zpe=a("strong"),EXo=o("bert"),CXo=o(" \u2014 "),mX=a("a"),wXo=o("BertForNextSentencePrediction"),AXo=o(" (BERT model)"),LXo=l(),Kv=a("li"),Wpe=a("strong"),yXo=o("fnet"),xXo=o(" \u2014 "),gX=a("a"),$Xo=o("FNetForNextSentencePrediction"),kXo=o(" (FNet model)"),SXo=l(),Zv=a("li"),Qpe=a("strong"),RXo=o("megatron-bert"),PXo=o(" \u2014 "),hX=a("a"),BXo=o("MegatronBertForNextSentencePrediction"),IXo=o(" (Megatron-BERT model)"),NXo=l(),e0=a("li"),Hpe=a("strong"),qXo=o("mobilebert"),jXo=o(" \u2014 "),pX=a("a"),DXo=o("MobileBertForNextSentencePrediction"),GXo=o(" (MobileBERT model)"),OXo=l(),o0=a("li"),Upe=a("strong"),VXo=o("qdqbert"),XXo=o(" \u2014 "),uX=a("a"),zXo=o("QDQBertForNextSentencePrediction"),WXo=o(" (QDQBert model)"),QXo=l(),r0=a("p"),HXo=o("The model is set in evaluation mode by default using "),Jpe=a("code"),UXo=o("model.eval()"),JXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ype=a("code"),YXo=o("model.train()"),KXo=l(),F(t0.$$.fragment),DGe=l(),nd=a("h2"),a0=a("a"),Kpe=a("span"),F(PL.$$.fragment),ZXo=l(),Zpe=a("span"),ezo=o("AutoModelForTokenClassification"),GGe=l(),No=a("div"),F(BL.$$.fragment),ozo=l(),sd=a("p"),rzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_X=a("a"),tzo=o("from_pretrained()"),azo=o(" class method or the "),bX=a("a"),nzo=o("from_config()"),szo=o(` class
method.`),lzo=l(),IL=a("p"),izo=o("This class cannot be instantiated directly using "),eue=a("code"),dzo=o("__init__()"),czo=o(" (throws an error)."),fzo=l(),gt=a("div"),F(NL.$$.fragment),mzo=l(),oue=a("p"),gzo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hzo=l(),ld=a("p"),pzo=o(`Note:
Loading a model from its configuration file does `),rue=a("strong"),uzo=o("not"),_zo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=a("a"),bzo=o("from_pretrained()"),vzo=o(" to load the model weights."),Fzo=l(),F(n0.$$.fragment),Tzo=l(),ao=a("div"),F(qL.$$.fragment),Mzo=l(),tue=a("p"),Ezo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Czo=l(),Da=a("p"),wzo=o("The model class to instantiate is selected based on the "),aue=a("code"),Azo=o("model_type"),Lzo=o(` property of the config object (either
passed as an argument or loaded from `),nue=a("code"),yzo=o("pretrained_model_name_or_path"),xzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=a("code"),$zo=o("pretrained_model_name_or_path"),kzo=o(":"),Szo=l(),H=a("ul"),s0=a("li"),lue=a("strong"),Rzo=o("albert"),Pzo=o(" \u2014 "),FX=a("a"),Bzo=o("AlbertForTokenClassification"),Izo=o(" (ALBERT model)"),Nzo=l(),l0=a("li"),iue=a("strong"),qzo=o("bert"),jzo=o(" \u2014 "),TX=a("a"),Dzo=o("BertForTokenClassification"),Gzo=o(" (BERT model)"),Ozo=l(),i0=a("li"),due=a("strong"),Vzo=o("big_bird"),Xzo=o(" \u2014 "),MX=a("a"),zzo=o("BigBirdForTokenClassification"),Wzo=o(" (BigBird model)"),Qzo=l(),d0=a("li"),cue=a("strong"),Hzo=o("bloom"),Uzo=o(" \u2014 "),EX=a("a"),Jzo=o("BloomForTokenClassification"),Yzo=o(" (BLOOM model)"),Kzo=l(),c0=a("li"),fue=a("strong"),Zzo=o("camembert"),eWo=o(" \u2014 "),CX=a("a"),oWo=o("CamembertForTokenClassification"),rWo=o(" (CamemBERT model)"),tWo=l(),f0=a("li"),mue=a("strong"),aWo=o("canine"),nWo=o(" \u2014 "),wX=a("a"),sWo=o("CanineForTokenClassification"),lWo=o(" (CANINE model)"),iWo=l(),m0=a("li"),gue=a("strong"),dWo=o("convbert"),cWo=o(" \u2014 "),AX=a("a"),fWo=o("ConvBertForTokenClassification"),mWo=o(" (ConvBERT model)"),gWo=l(),g0=a("li"),hue=a("strong"),hWo=o("data2vec-text"),pWo=o(" \u2014 "),LX=a("a"),uWo=o("Data2VecTextForTokenClassification"),_Wo=o(" (Data2VecText model)"),bWo=l(),h0=a("li"),pue=a("strong"),vWo=o("deberta"),FWo=o(" \u2014 "),yX=a("a"),TWo=o("DebertaForTokenClassification"),MWo=o(" (DeBERTa model)"),EWo=l(),p0=a("li"),uue=a("strong"),CWo=o("deberta-v2"),wWo=o(" \u2014 "),xX=a("a"),AWo=o("DebertaV2ForTokenClassification"),LWo=o(" (DeBERTa-v2 model)"),yWo=l(),u0=a("li"),_ue=a("strong"),xWo=o("distilbert"),$Wo=o(" \u2014 "),$X=a("a"),kWo=o("DistilBertForTokenClassification"),SWo=o(" (DistilBERT model)"),RWo=l(),_0=a("li"),bue=a("strong"),PWo=o("electra"),BWo=o(" \u2014 "),kX=a("a"),IWo=o("ElectraForTokenClassification"),NWo=o(" (ELECTRA model)"),qWo=l(),b0=a("li"),vue=a("strong"),jWo=o("flaubert"),DWo=o(" \u2014 "),SX=a("a"),GWo=o("FlaubertForTokenClassification"),OWo=o(" (FlauBERT model)"),VWo=l(),v0=a("li"),Fue=a("strong"),XWo=o("fnet"),zWo=o(" \u2014 "),RX=a("a"),WWo=o("FNetForTokenClassification"),QWo=o(" (FNet model)"),HWo=l(),F0=a("li"),Tue=a("strong"),UWo=o("funnel"),JWo=o(" \u2014 "),PX=a("a"),YWo=o("FunnelForTokenClassification"),KWo=o(" (Funnel Transformer model)"),ZWo=l(),T0=a("li"),Mue=a("strong"),eQo=o("gpt2"),oQo=o(" \u2014 "),BX=a("a"),rQo=o("GPT2ForTokenClassification"),tQo=o(" (OpenAI GPT-2 model)"),aQo=l(),M0=a("li"),Eue=a("strong"),nQo=o("ibert"),sQo=o(" \u2014 "),IX=a("a"),lQo=o("IBertForTokenClassification"),iQo=o(" (I-BERT model)"),dQo=l(),E0=a("li"),Cue=a("strong"),cQo=o("layoutlm"),fQo=o(" \u2014 "),NX=a("a"),mQo=o("LayoutLMForTokenClassification"),gQo=o(" (LayoutLM model)"),hQo=l(),C0=a("li"),wue=a("strong"),pQo=o("layoutlmv2"),uQo=o(" \u2014 "),qX=a("a"),_Qo=o("LayoutLMv2ForTokenClassification"),bQo=o(" (LayoutLMv2 model)"),vQo=l(),w0=a("li"),Aue=a("strong"),FQo=o("layoutlmv3"),TQo=o(" \u2014 "),jX=a("a"),MQo=o("LayoutLMv3ForTokenClassification"),EQo=o(" (LayoutLMv3 model)"),CQo=l(),A0=a("li"),Lue=a("strong"),wQo=o("longformer"),AQo=o(" \u2014 "),DX=a("a"),LQo=o("LongformerForTokenClassification"),yQo=o(" (Longformer model)"),xQo=l(),L0=a("li"),yue=a("strong"),$Qo=o("megatron-bert"),kQo=o(" \u2014 "),GX=a("a"),SQo=o("MegatronBertForTokenClassification"),RQo=o(" (Megatron-BERT model)"),PQo=l(),y0=a("li"),xue=a("strong"),BQo=o("mobilebert"),IQo=o(" \u2014 "),OX=a("a"),NQo=o("MobileBertForTokenClassification"),qQo=o(" (MobileBERT model)"),jQo=l(),x0=a("li"),$ue=a("strong"),DQo=o("mpnet"),GQo=o(" \u2014 "),VX=a("a"),OQo=o("MPNetForTokenClassification"),VQo=o(" (MPNet model)"),XQo=l(),$0=a("li"),kue=a("strong"),zQo=o("nystromformer"),WQo=o(" \u2014 "),XX=a("a"),QQo=o("NystromformerForTokenClassification"),HQo=o(" (Nystr\xF6mformer model)"),UQo=l(),k0=a("li"),Sue=a("strong"),JQo=o("qdqbert"),YQo=o(" \u2014 "),zX=a("a"),KQo=o("QDQBertForTokenClassification"),ZQo=o(" (QDQBert model)"),eHo=l(),S0=a("li"),Rue=a("strong"),oHo=o("rembert"),rHo=o(" \u2014 "),WX=a("a"),tHo=o("RemBertForTokenClassification"),aHo=o(" (RemBERT model)"),nHo=l(),R0=a("li"),Pue=a("strong"),sHo=o("roberta"),lHo=o(" \u2014 "),QX=a("a"),iHo=o("RobertaForTokenClassification"),dHo=o(" (RoBERTa model)"),cHo=l(),P0=a("li"),Bue=a("strong"),fHo=o("roformer"),mHo=o(" \u2014 "),HX=a("a"),gHo=o("RoFormerForTokenClassification"),hHo=o(" (RoFormer model)"),pHo=l(),B0=a("li"),Iue=a("strong"),uHo=o("squeezebert"),_Ho=o(" \u2014 "),UX=a("a"),bHo=o("SqueezeBertForTokenClassification"),vHo=o(" (SqueezeBERT model)"),FHo=l(),I0=a("li"),Nue=a("strong"),THo=o("xlm"),MHo=o(" \u2014 "),JX=a("a"),EHo=o("XLMForTokenClassification"),CHo=o(" (XLM model)"),wHo=l(),N0=a("li"),que=a("strong"),AHo=o("xlm-roberta"),LHo=o(" \u2014 "),YX=a("a"),yHo=o("XLMRobertaForTokenClassification"),xHo=o(" (XLM-RoBERTa model)"),$Ho=l(),q0=a("li"),jue=a("strong"),kHo=o("xlm-roberta-xl"),SHo=o(" \u2014 "),KX=a("a"),RHo=o("XLMRobertaXLForTokenClassification"),PHo=o(" (XLM-RoBERTa-XL model)"),BHo=l(),j0=a("li"),Due=a("strong"),IHo=o("xlnet"),NHo=o(" \u2014 "),ZX=a("a"),qHo=o("XLNetForTokenClassification"),jHo=o(" (XLNet model)"),DHo=l(),D0=a("li"),Gue=a("strong"),GHo=o("yoso"),OHo=o(" \u2014 "),ez=a("a"),VHo=o("YosoForTokenClassification"),XHo=o(" (YOSO model)"),zHo=l(),G0=a("p"),WHo=o("The model is set in evaluation mode by default using "),Oue=a("code"),QHo=o("model.eval()"),HHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=a("code"),UHo=o("model.train()"),JHo=l(),F(O0.$$.fragment),OGe=l(),id=a("h2"),V0=a("a"),Xue=a("span"),F(jL.$$.fragment),YHo=l(),zue=a("span"),KHo=o("AutoModelForQuestionAnswering"),VGe=l(),qo=a("div"),F(DL.$$.fragment),ZHo=l(),dd=a("p"),eUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oz=a("a"),oUo=o("from_pretrained()"),rUo=o(" class method or the "),rz=a("a"),tUo=o("from_config()"),aUo=o(` class
method.`),nUo=l(),GL=a("p"),sUo=o("This class cannot be instantiated directly using "),Wue=a("code"),lUo=o("__init__()"),iUo=o(" (throws an error)."),dUo=l(),ht=a("div"),F(OL.$$.fragment),cUo=l(),Que=a("p"),fUo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mUo=l(),cd=a("p"),gUo=o(`Note:
Loading a model from its configuration file does `),Hue=a("strong"),hUo=o("not"),pUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=a("a"),uUo=o("from_pretrained()"),_Uo=o(" to load the model weights."),bUo=l(),F(X0.$$.fragment),vUo=l(),no=a("div"),F(VL.$$.fragment),FUo=l(),Uue=a("p"),TUo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),MUo=l(),Ga=a("p"),EUo=o("The model class to instantiate is selected based on the "),Jue=a("code"),CUo=o("model_type"),wUo=o(` property of the config object (either
passed as an argument or loaded from `),Yue=a("code"),AUo=o("pretrained_model_name_or_path"),LUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=a("code"),yUo=o("pretrained_model_name_or_path"),xUo=o(":"),$Uo=l(),V=a("ul"),z0=a("li"),Zue=a("strong"),kUo=o("albert"),SUo=o(" \u2014 "),az=a("a"),RUo=o("AlbertForQuestionAnswering"),PUo=o(" (ALBERT model)"),BUo=l(),W0=a("li"),e_e=a("strong"),IUo=o("bart"),NUo=o(" \u2014 "),nz=a("a"),qUo=o("BartForQuestionAnswering"),jUo=o(" (BART model)"),DUo=l(),Q0=a("li"),o_e=a("strong"),GUo=o("bert"),OUo=o(" \u2014 "),sz=a("a"),VUo=o("BertForQuestionAnswering"),XUo=o(" (BERT model)"),zUo=l(),H0=a("li"),r_e=a("strong"),WUo=o("big_bird"),QUo=o(" \u2014 "),lz=a("a"),HUo=o("BigBirdForQuestionAnswering"),UUo=o(" (BigBird model)"),JUo=l(),U0=a("li"),t_e=a("strong"),YUo=o("bigbird_pegasus"),KUo=o(" \u2014 "),iz=a("a"),ZUo=o("BigBirdPegasusForQuestionAnswering"),eJo=o(" (BigBird-Pegasus model)"),oJo=l(),J0=a("li"),a_e=a("strong"),rJo=o("camembert"),tJo=o(" \u2014 "),dz=a("a"),aJo=o("CamembertForQuestionAnswering"),nJo=o(" (CamemBERT model)"),sJo=l(),Y0=a("li"),n_e=a("strong"),lJo=o("canine"),iJo=o(" \u2014 "),cz=a("a"),dJo=o("CanineForQuestionAnswering"),cJo=o(" (CANINE model)"),fJo=l(),K0=a("li"),s_e=a("strong"),mJo=o("convbert"),gJo=o(" \u2014 "),fz=a("a"),hJo=o("ConvBertForQuestionAnswering"),pJo=o(" (ConvBERT model)"),uJo=l(),Z0=a("li"),l_e=a("strong"),_Jo=o("data2vec-text"),bJo=o(" \u2014 "),mz=a("a"),vJo=o("Data2VecTextForQuestionAnswering"),FJo=o(" (Data2VecText model)"),TJo=l(),eF=a("li"),i_e=a("strong"),MJo=o("deberta"),EJo=o(" \u2014 "),gz=a("a"),CJo=o("DebertaForQuestionAnswering"),wJo=o(" (DeBERTa model)"),AJo=l(),oF=a("li"),d_e=a("strong"),LJo=o("deberta-v2"),yJo=o(" \u2014 "),hz=a("a"),xJo=o("DebertaV2ForQuestionAnswering"),$Jo=o(" (DeBERTa-v2 model)"),kJo=l(),rF=a("li"),c_e=a("strong"),SJo=o("distilbert"),RJo=o(" \u2014 "),pz=a("a"),PJo=o("DistilBertForQuestionAnswering"),BJo=o(" (DistilBERT model)"),IJo=l(),tF=a("li"),f_e=a("strong"),NJo=o("electra"),qJo=o(" \u2014 "),uz=a("a"),jJo=o("ElectraForQuestionAnswering"),DJo=o(" (ELECTRA model)"),GJo=l(),aF=a("li"),m_e=a("strong"),OJo=o("flaubert"),VJo=o(" \u2014 "),_z=a("a"),XJo=o("FlaubertForQuestionAnsweringSimple"),zJo=o(" (FlauBERT model)"),WJo=l(),nF=a("li"),g_e=a("strong"),QJo=o("fnet"),HJo=o(" \u2014 "),bz=a("a"),UJo=o("FNetForQuestionAnswering"),JJo=o(" (FNet model)"),YJo=l(),sF=a("li"),h_e=a("strong"),KJo=o("funnel"),ZJo=o(" \u2014 "),vz=a("a"),eYo=o("FunnelForQuestionAnswering"),oYo=o(" (Funnel Transformer model)"),rYo=l(),lF=a("li"),p_e=a("strong"),tYo=o("gptj"),aYo=o(" \u2014 "),Fz=a("a"),nYo=o("GPTJForQuestionAnswering"),sYo=o(" (GPT-J model)"),lYo=l(),iF=a("li"),u_e=a("strong"),iYo=o("ibert"),dYo=o(" \u2014 "),Tz=a("a"),cYo=o("IBertForQuestionAnswering"),fYo=o(" (I-BERT model)"),mYo=l(),dF=a("li"),__e=a("strong"),gYo=o("layoutlmv2"),hYo=o(" \u2014 "),Mz=a("a"),pYo=o("LayoutLMv2ForQuestionAnswering"),uYo=o(" (LayoutLMv2 model)"),_Yo=l(),cF=a("li"),b_e=a("strong"),bYo=o("layoutlmv3"),vYo=o(" \u2014 "),Ez=a("a"),FYo=o("LayoutLMv3ForQuestionAnswering"),TYo=o(" (LayoutLMv3 model)"),MYo=l(),fF=a("li"),v_e=a("strong"),EYo=o("led"),CYo=o(" \u2014 "),Cz=a("a"),wYo=o("LEDForQuestionAnswering"),AYo=o(" (LED model)"),LYo=l(),mF=a("li"),F_e=a("strong"),yYo=o("longformer"),xYo=o(" \u2014 "),wz=a("a"),$Yo=o("LongformerForQuestionAnswering"),kYo=o(" (Longformer model)"),SYo=l(),gF=a("li"),T_e=a("strong"),RYo=o("lxmert"),PYo=o(" \u2014 "),Az=a("a"),BYo=o("LxmertForQuestionAnswering"),IYo=o(" (LXMERT model)"),NYo=l(),hF=a("li"),M_e=a("strong"),qYo=o("mbart"),jYo=o(" \u2014 "),Lz=a("a"),DYo=o("MBartForQuestionAnswering"),GYo=o(" (mBART model)"),OYo=l(),pF=a("li"),E_e=a("strong"),VYo=o("megatron-bert"),XYo=o(" \u2014 "),yz=a("a"),zYo=o("MegatronBertForQuestionAnswering"),WYo=o(" (Megatron-BERT model)"),QYo=l(),uF=a("li"),C_e=a("strong"),HYo=o("mobilebert"),UYo=o(" \u2014 "),xz=a("a"),JYo=o("MobileBertForQuestionAnswering"),YYo=o(" (MobileBERT model)"),KYo=l(),_F=a("li"),w_e=a("strong"),ZYo=o("mpnet"),eKo=o(" \u2014 "),$z=a("a"),oKo=o("MPNetForQuestionAnswering"),rKo=o(" (MPNet model)"),tKo=l(),bF=a("li"),A_e=a("strong"),aKo=o("nystromformer"),nKo=o(" \u2014 "),kz=a("a"),sKo=o("NystromformerForQuestionAnswering"),lKo=o(" (Nystr\xF6mformer model)"),iKo=l(),vF=a("li"),L_e=a("strong"),dKo=o("qdqbert"),cKo=o(" \u2014 "),Sz=a("a"),fKo=o("QDQBertForQuestionAnswering"),mKo=o(" (QDQBert model)"),gKo=l(),FF=a("li"),y_e=a("strong"),hKo=o("reformer"),pKo=o(" \u2014 "),Rz=a("a"),uKo=o("ReformerForQuestionAnswering"),_Ko=o(" (Reformer model)"),bKo=l(),TF=a("li"),x_e=a("strong"),vKo=o("rembert"),FKo=o(" \u2014 "),Pz=a("a"),TKo=o("RemBertForQuestionAnswering"),MKo=o(" (RemBERT model)"),EKo=l(),MF=a("li"),$_e=a("strong"),CKo=o("roberta"),wKo=o(" \u2014 "),Bz=a("a"),AKo=o("RobertaForQuestionAnswering"),LKo=o(" (RoBERTa model)"),yKo=l(),EF=a("li"),k_e=a("strong"),xKo=o("roformer"),$Ko=o(" \u2014 "),Iz=a("a"),kKo=o("RoFormerForQuestionAnswering"),SKo=o(" (RoFormer model)"),RKo=l(),CF=a("li"),S_e=a("strong"),PKo=o("splinter"),BKo=o(" \u2014 "),Nz=a("a"),IKo=o("SplinterForQuestionAnswering"),NKo=o(" (Splinter model)"),qKo=l(),wF=a("li"),R_e=a("strong"),jKo=o("squeezebert"),DKo=o(" \u2014 "),qz=a("a"),GKo=o("SqueezeBertForQuestionAnswering"),OKo=o(" (SqueezeBERT model)"),VKo=l(),AF=a("li"),P_e=a("strong"),XKo=o("xlm"),zKo=o(" \u2014 "),jz=a("a"),WKo=o("XLMForQuestionAnsweringSimple"),QKo=o(" (XLM model)"),HKo=l(),LF=a("li"),B_e=a("strong"),UKo=o("xlm-roberta"),JKo=o(" \u2014 "),Dz=a("a"),YKo=o("XLMRobertaForQuestionAnswering"),KKo=o(" (XLM-RoBERTa model)"),ZKo=l(),yF=a("li"),I_e=a("strong"),eZo=o("xlm-roberta-xl"),oZo=o(" \u2014 "),Gz=a("a"),rZo=o("XLMRobertaXLForQuestionAnswering"),tZo=o(" (XLM-RoBERTa-XL model)"),aZo=l(),xF=a("li"),N_e=a("strong"),nZo=o("xlnet"),sZo=o(" \u2014 "),Oz=a("a"),lZo=o("XLNetForQuestionAnsweringSimple"),iZo=o(" (XLNet model)"),dZo=l(),$F=a("li"),q_e=a("strong"),cZo=o("yoso"),fZo=o(" \u2014 "),Vz=a("a"),mZo=o("YosoForQuestionAnswering"),gZo=o(" (YOSO model)"),hZo=l(),kF=a("p"),pZo=o("The model is set in evaluation mode by default using "),j_e=a("code"),uZo=o("model.eval()"),_Zo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=a("code"),bZo=o("model.train()"),vZo=l(),F(SF.$$.fragment),XGe=l(),fd=a("h2"),RF=a("a"),G_e=a("span"),F(XL.$$.fragment),FZo=l(),O_e=a("span"),TZo=o("AutoModelForTableQuestionAnswering"),zGe=l(),jo=a("div"),F(zL.$$.fragment),MZo=l(),md=a("p"),EZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Xz=a("a"),CZo=o("from_pretrained()"),wZo=o(" class method or the "),zz=a("a"),AZo=o("from_config()"),LZo=o(` class
method.`),yZo=l(),WL=a("p"),xZo=o("This class cannot be instantiated directly using "),V_e=a("code"),$Zo=o("__init__()"),kZo=o(" (throws an error)."),SZo=l(),pt=a("div"),F(QL.$$.fragment),RZo=l(),X_e=a("p"),PZo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),BZo=l(),gd=a("p"),IZo=o(`Note:
Loading a model from its configuration file does `),z_e=a("strong"),NZo=o("not"),qZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=a("a"),jZo=o("from_pretrained()"),DZo=o(" to load the model weights."),GZo=l(),F(PF.$$.fragment),OZo=l(),so=a("div"),F(HL.$$.fragment),VZo=l(),W_e=a("p"),XZo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zZo=l(),Oa=a("p"),WZo=o("The model class to instantiate is selected based on the "),Q_e=a("code"),QZo=o("model_type"),HZo=o(` property of the config object (either
passed as an argument or loaded from `),H_e=a("code"),UZo=o("pretrained_model_name_or_path"),JZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=a("code"),YZo=o("pretrained_model_name_or_path"),KZo=o(":"),ZZo=l(),J_e=a("ul"),BF=a("li"),Y_e=a("strong"),eer=o("tapas"),oer=o(" \u2014 "),Qz=a("a"),rer=o("TapasForQuestionAnswering"),ter=o(" (TAPAS model)"),aer=l(),IF=a("p"),ner=o("The model is set in evaluation mode by default using "),K_e=a("code"),ser=o("model.eval()"),ler=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=a("code"),ier=o("model.train()"),der=l(),F(NF.$$.fragment),WGe=l(),hd=a("h2"),qF=a("a"),e1e=a("span"),F(UL.$$.fragment),cer=l(),o1e=a("span"),fer=o("AutoModelForImageClassification"),QGe=l(),Do=a("div"),F(JL.$$.fragment),mer=l(),pd=a("p"),ger=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Hz=a("a"),her=o("from_pretrained()"),per=o(" class method or the "),Uz=a("a"),uer=o("from_config()"),_er=o(` class
method.`),ber=l(),YL=a("p"),ver=o("This class cannot be instantiated directly using "),r1e=a("code"),Fer=o("__init__()"),Ter=o(" (throws an error)."),Mer=l(),ut=a("div"),F(KL.$$.fragment),Eer=l(),t1e=a("p"),Cer=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wer=l(),ud=a("p"),Aer=o(`Note:
Loading a model from its configuration file does `),a1e=a("strong"),Ler=o("not"),yer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),xer=o("from_pretrained()"),$er=o(" to load the model weights."),ker=l(),F(jF.$$.fragment),Ser=l(),lo=a("div"),F(ZL.$$.fragment),Rer=l(),n1e=a("p"),Per=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ber=l(),Va=a("p"),Ier=o("The model class to instantiate is selected based on the "),s1e=a("code"),Ner=o("model_type"),qer=o(` property of the config object (either
passed as an argument or loaded from `),l1e=a("code"),jer=o("pretrained_model_name_or_path"),Der=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=a("code"),Ger=o("pretrained_model_name_or_path"),Oer=o(":"),Ver=l(),Fe=a("ul"),DF=a("li"),d1e=a("strong"),Xer=o("beit"),zer=o(" \u2014 "),Yz=a("a"),Wer=o("BeitForImageClassification"),Qer=o(" (BEiT model)"),Her=l(),GF=a("li"),c1e=a("strong"),Uer=o("convnext"),Jer=o(" \u2014 "),Kz=a("a"),Yer=o("ConvNextForImageClassification"),Ker=o(" (ConvNeXT model)"),Zer=l(),OF=a("li"),f1e=a("strong"),eor=o("cvt"),oor=o(" \u2014 "),Zz=a("a"),ror=o("CvtForImageClassification"),tor=o(" (CvT model)"),aor=l(),VF=a("li"),m1e=a("strong"),nor=o("data2vec-vision"),sor=o(" \u2014 "),eW=a("a"),lor=o("Data2VecVisionForImageClassification"),ior=o(" (Data2VecVision model)"),dor=l(),Vs=a("li"),g1e=a("strong"),cor=o("deit"),mor=o(" \u2014 "),oW=a("a"),gor=o("DeiTForImageClassification"),hor=o(" or "),rW=a("a"),por=o("DeiTForImageClassificationWithTeacher"),uor=o(" (DeiT model)"),_or=l(),XF=a("li"),h1e=a("strong"),bor=o("imagegpt"),vor=o(" \u2014 "),tW=a("a"),For=o("ImageGPTForImageClassification"),Tor=o(" (ImageGPT model)"),Mor=l(),Xs=a("li"),p1e=a("strong"),Eor=o("levit"),Cor=o(" \u2014 "),aW=a("a"),wor=o("LevitForImageClassification"),Aor=o(" or "),nW=a("a"),Lor=o("LevitForImageClassificationWithTeacher"),yor=o(" (LeViT model)"),xor=l(),_t=a("li"),u1e=a("strong"),$or=o("perceiver"),kor=o(" \u2014 "),sW=a("a"),Sor=o("PerceiverForImageClassificationLearned"),Ror=o(" or "),lW=a("a"),Por=o("PerceiverForImageClassificationFourier"),Bor=o(" or "),iW=a("a"),Ior=o("PerceiverForImageClassificationConvProcessing"),Nor=o(" (Perceiver model)"),qor=l(),zF=a("li"),_1e=a("strong"),jor=o("poolformer"),Dor=o(" \u2014 "),dW=a("a"),Gor=o("PoolFormerForImageClassification"),Oor=o(" (PoolFormer model)"),Vor=l(),WF=a("li"),b1e=a("strong"),Xor=o("regnet"),zor=o(" \u2014 "),cW=a("a"),Wor=o("RegNetForImageClassification"),Qor=o(" (RegNet model)"),Hor=l(),QF=a("li"),v1e=a("strong"),Uor=o("resnet"),Jor=o(" \u2014 "),fW=a("a"),Yor=o("ResNetForImageClassification"),Kor=o(" (ResNet model)"),Zor=l(),HF=a("li"),F1e=a("strong"),err=o("segformer"),orr=o(" \u2014 "),mW=a("a"),rrr=o("SegformerForImageClassification"),trr=o(" (SegFormer model)"),arr=l(),UF=a("li"),T1e=a("strong"),nrr=o("swin"),srr=o(" \u2014 "),gW=a("a"),lrr=o("SwinForImageClassification"),irr=o(" (Swin Transformer model)"),drr=l(),JF=a("li"),M1e=a("strong"),crr=o("van"),frr=o(" \u2014 "),hW=a("a"),mrr=o("VanForImageClassification"),grr=o(" (VAN model)"),hrr=l(),YF=a("li"),E1e=a("strong"),prr=o("vit"),urr=o(" \u2014 "),pW=a("a"),_rr=o("ViTForImageClassification"),brr=o(" (ViT model)"),vrr=l(),KF=a("p"),Frr=o("The model is set in evaluation mode by default using "),C1e=a("code"),Trr=o("model.eval()"),Mrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w1e=a("code"),Err=o("model.train()"),Crr=l(),F(ZF.$$.fragment),HGe=l(),_d=a("h2"),eT=a("a"),A1e=a("span"),F(ey.$$.fragment),wrr=l(),L1e=a("span"),Arr=o("AutoModelForVision2Seq"),UGe=l(),Go=a("div"),F(oy.$$.fragment),Lrr=l(),bd=a("p"),yrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uW=a("a"),xrr=o("from_pretrained()"),$rr=o(" class method or the "),_W=a("a"),krr=o("from_config()"),Srr=o(` class
method.`),Rrr=l(),ry=a("p"),Prr=o("This class cannot be instantiated directly using "),y1e=a("code"),Brr=o("__init__()"),Irr=o(" (throws an error)."),Nrr=l(),bt=a("div"),F(ty.$$.fragment),qrr=l(),x1e=a("p"),jrr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Drr=l(),vd=a("p"),Grr=o(`Note:
Loading a model from its configuration file does `),$1e=a("strong"),Orr=o("not"),Vrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=a("a"),Xrr=o("from_pretrained()"),zrr=o(" to load the model weights."),Wrr=l(),F(oT.$$.fragment),Qrr=l(),io=a("div"),F(ay.$$.fragment),Hrr=l(),k1e=a("p"),Urr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Jrr=l(),Xa=a("p"),Yrr=o("The model class to instantiate is selected based on the "),S1e=a("code"),Krr=o("model_type"),Zrr=o(` property of the config object (either
passed as an argument or loaded from `),R1e=a("code"),etr=o("pretrained_model_name_or_path"),otr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=a("code"),rtr=o("pretrained_model_name_or_path"),ttr=o(":"),atr=l(),B1e=a("ul"),rT=a("li"),I1e=a("strong"),ntr=o("vision-encoder-decoder"),str=o(" \u2014 "),vW=a("a"),ltr=o("VisionEncoderDecoderModel"),itr=o(" (Vision Encoder decoder model)"),dtr=l(),tT=a("p"),ctr=o("The model is set in evaluation mode by default using "),N1e=a("code"),ftr=o("model.eval()"),mtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q1e=a("code"),gtr=o("model.train()"),htr=l(),F(aT.$$.fragment),JGe=l(),Fd=a("h2"),nT=a("a"),j1e=a("span"),F(ny.$$.fragment),ptr=l(),D1e=a("span"),utr=o("AutoModelForVisualQuestionAnswering"),YGe=l(),Oo=a("div"),F(sy.$$.fragment),_tr=l(),Td=a("p"),btr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),FW=a("a"),vtr=o("from_pretrained()"),Ftr=o(" class method or the "),TW=a("a"),Ttr=o("from_config()"),Mtr=o(` class
method.`),Etr=l(),ly=a("p"),Ctr=o("This class cannot be instantiated directly using "),G1e=a("code"),wtr=o("__init__()"),Atr=o(" (throws an error)."),Ltr=l(),vt=a("div"),F(iy.$$.fragment),ytr=l(),O1e=a("p"),xtr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),$tr=l(),Md=a("p"),ktr=o(`Note:
Loading a model from its configuration file does `),V1e=a("strong"),Str=o("not"),Rtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),Ptr=o("from_pretrained()"),Btr=o(" to load the model weights."),Itr=l(),F(sT.$$.fragment),Ntr=l(),co=a("div"),F(dy.$$.fragment),qtr=l(),X1e=a("p"),jtr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Dtr=l(),za=a("p"),Gtr=o("The model class to instantiate is selected based on the "),z1e=a("code"),Otr=o("model_type"),Vtr=o(` property of the config object (either
passed as an argument or loaded from `),W1e=a("code"),Xtr=o("pretrained_model_name_or_path"),ztr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=a("code"),Wtr=o("pretrained_model_name_or_path"),Qtr=o(":"),Htr=l(),H1e=a("ul"),lT=a("li"),U1e=a("strong"),Utr=o("vilt"),Jtr=o(" \u2014 "),EW=a("a"),Ytr=o("ViltForQuestionAnswering"),Ktr=o(" (ViLT model)"),Ztr=l(),iT=a("p"),ear=o("The model is set in evaluation mode by default using "),J1e=a("code"),oar=o("model.eval()"),rar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y1e=a("code"),tar=o("model.train()"),aar=l(),F(dT.$$.fragment),KGe=l(),Ed=a("h2"),cT=a("a"),K1e=a("span"),F(cy.$$.fragment),nar=l(),Z1e=a("span"),sar=o("AutoModelForAudioClassification"),ZGe=l(),Vo=a("div"),F(fy.$$.fragment),lar=l(),Cd=a("p"),iar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),CW=a("a"),dar=o("from_pretrained()"),car=o(" class method or the "),wW=a("a"),far=o("from_config()"),mar=o(` class
method.`),gar=l(),my=a("p"),har=o("This class cannot be instantiated directly using "),e2e=a("code"),par=o("__init__()"),uar=o(" (throws an error)."),_ar=l(),Ft=a("div"),F(gy.$$.fragment),bar=l(),o2e=a("p"),Far=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Tar=l(),wd=a("p"),Mar=o(`Note:
Loading a model from its configuration file does `),r2e=a("strong"),Ear=o("not"),Car=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=a("a"),war=o("from_pretrained()"),Aar=o(" to load the model weights."),Lar=l(),F(fT.$$.fragment),yar=l(),fo=a("div"),F(hy.$$.fragment),xar=l(),t2e=a("p"),$ar=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),kar=l(),Wa=a("p"),Sar=o("The model class to instantiate is selected based on the "),a2e=a("code"),Rar=o("model_type"),Par=o(` property of the config object (either
passed as an argument or loaded from `),n2e=a("code"),Bar=o("pretrained_model_name_or_path"),Iar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=a("code"),Nar=o("pretrained_model_name_or_path"),qar=o(":"),jar=l(),Pe=a("ul"),mT=a("li"),l2e=a("strong"),Dar=o("data2vec-audio"),Gar=o(" \u2014 "),LW=a("a"),Oar=o("Data2VecAudioForSequenceClassification"),Var=o(" (Data2VecAudio model)"),Xar=l(),gT=a("li"),i2e=a("strong"),zar=o("hubert"),War=o(" \u2014 "),yW=a("a"),Qar=o("HubertForSequenceClassification"),Har=o(" (Hubert model)"),Uar=l(),hT=a("li"),d2e=a("strong"),Jar=o("sew"),Yar=o(" \u2014 "),xW=a("a"),Kar=o("SEWForSequenceClassification"),Zar=o(" (SEW model)"),enr=l(),pT=a("li"),c2e=a("strong"),onr=o("sew-d"),rnr=o(" \u2014 "),$W=a("a"),tnr=o("SEWDForSequenceClassification"),anr=o(" (SEW-D model)"),nnr=l(),uT=a("li"),f2e=a("strong"),snr=o("unispeech"),lnr=o(" \u2014 "),kW=a("a"),inr=o("UniSpeechForSequenceClassification"),dnr=o(" (UniSpeech model)"),cnr=l(),_T=a("li"),m2e=a("strong"),fnr=o("unispeech-sat"),mnr=o(" \u2014 "),SW=a("a"),gnr=o("UniSpeechSatForSequenceClassification"),hnr=o(" (UniSpeechSat model)"),pnr=l(),bT=a("li"),g2e=a("strong"),unr=o("wav2vec2"),_nr=o(" \u2014 "),RW=a("a"),bnr=o("Wav2Vec2ForSequenceClassification"),vnr=o(" (Wav2Vec2 model)"),Fnr=l(),vT=a("li"),h2e=a("strong"),Tnr=o("wav2vec2-conformer"),Mnr=o(" \u2014 "),PW=a("a"),Enr=o("Wav2Vec2ConformerForSequenceClassification"),Cnr=o(" (Wav2Vec2-Conformer model)"),wnr=l(),FT=a("li"),p2e=a("strong"),Anr=o("wavlm"),Lnr=o(" \u2014 "),BW=a("a"),ynr=o("WavLMForSequenceClassification"),xnr=o(" (WavLM model)"),$nr=l(),TT=a("p"),knr=o("The model is set in evaluation mode by default using "),u2e=a("code"),Snr=o("model.eval()"),Rnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_2e=a("code"),Pnr=o("model.train()"),Bnr=l(),F(MT.$$.fragment),eOe=l(),Ad=a("h2"),ET=a("a"),b2e=a("span"),F(py.$$.fragment),Inr=l(),v2e=a("span"),Nnr=o("AutoModelForAudioFrameClassification"),oOe=l(),Xo=a("div"),F(uy.$$.fragment),qnr=l(),Ld=a("p"),jnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),IW=a("a"),Dnr=o("from_pretrained()"),Gnr=o(" class method or the "),NW=a("a"),Onr=o("from_config()"),Vnr=o(` class
method.`),Xnr=l(),_y=a("p"),znr=o("This class cannot be instantiated directly using "),F2e=a("code"),Wnr=o("__init__()"),Qnr=o(" (throws an error)."),Hnr=l(),Tt=a("div"),F(by.$$.fragment),Unr=l(),T2e=a("p"),Jnr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Ynr=l(),yd=a("p"),Knr=o(`Note:
Loading a model from its configuration file does `),M2e=a("strong"),Znr=o("not"),esr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=a("a"),osr=o("from_pretrained()"),rsr=o(" to load the model weights."),tsr=l(),F(CT.$$.fragment),asr=l(),mo=a("div"),F(vy.$$.fragment),nsr=l(),E2e=a("p"),ssr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),lsr=l(),Qa=a("p"),isr=o("The model class to instantiate is selected based on the "),C2e=a("code"),dsr=o("model_type"),csr=o(` property of the config object (either
passed as an argument or loaded from `),w2e=a("code"),fsr=o("pretrained_model_name_or_path"),msr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=a("code"),gsr=o("pretrained_model_name_or_path"),hsr=o(":"),psr=l(),et=a("ul"),wT=a("li"),L2e=a("strong"),usr=o("data2vec-audio"),_sr=o(" \u2014 "),jW=a("a"),bsr=o("Data2VecAudioForAudioFrameClassification"),vsr=o(" (Data2VecAudio model)"),Fsr=l(),AT=a("li"),y2e=a("strong"),Tsr=o("unispeech-sat"),Msr=o(" \u2014 "),DW=a("a"),Esr=o("UniSpeechSatForAudioFrameClassification"),Csr=o(" (UniSpeechSat model)"),wsr=l(),LT=a("li"),x2e=a("strong"),Asr=o("wav2vec2"),Lsr=o(" \u2014 "),GW=a("a"),ysr=o("Wav2Vec2ForAudioFrameClassification"),xsr=o(" (Wav2Vec2 model)"),$sr=l(),yT=a("li"),$2e=a("strong"),ksr=o("wav2vec2-conformer"),Ssr=o(" \u2014 "),OW=a("a"),Rsr=o("Wav2Vec2ConformerForAudioFrameClassification"),Psr=o(" (Wav2Vec2-Conformer model)"),Bsr=l(),xT=a("li"),k2e=a("strong"),Isr=o("wavlm"),Nsr=o(" \u2014 "),VW=a("a"),qsr=o("WavLMForAudioFrameClassification"),jsr=o(" (WavLM model)"),Dsr=l(),$T=a("p"),Gsr=o("The model is set in evaluation mode by default using "),S2e=a("code"),Osr=o("model.eval()"),Vsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R2e=a("code"),Xsr=o("model.train()"),zsr=l(),F(kT.$$.fragment),rOe=l(),xd=a("h2"),ST=a("a"),P2e=a("span"),F(Fy.$$.fragment),Wsr=l(),B2e=a("span"),Qsr=o("AutoModelForCTC"),tOe=l(),zo=a("div"),F(Ty.$$.fragment),Hsr=l(),$d=a("p"),Usr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),XW=a("a"),Jsr=o("from_pretrained()"),Ysr=o(" class method or the "),zW=a("a"),Ksr=o("from_config()"),Zsr=o(` class
method.`),elr=l(),My=a("p"),olr=o("This class cannot be instantiated directly using "),I2e=a("code"),rlr=o("__init__()"),tlr=o(" (throws an error)."),alr=l(),Mt=a("div"),F(Ey.$$.fragment),nlr=l(),N2e=a("p"),slr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),llr=l(),kd=a("p"),ilr=o(`Note:
Loading a model from its configuration file does `),q2e=a("strong"),dlr=o("not"),clr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=a("a"),flr=o("from_pretrained()"),mlr=o(" to load the model weights."),glr=l(),F(RT.$$.fragment),hlr=l(),go=a("div"),F(Cy.$$.fragment),plr=l(),j2e=a("p"),ulr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),_lr=l(),Ha=a("p"),blr=o("The model class to instantiate is selected based on the "),D2e=a("code"),vlr=o("model_type"),Flr=o(` property of the config object (either
passed as an argument or loaded from `),G2e=a("code"),Tlr=o("pretrained_model_name_or_path"),Mlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=a("code"),Elr=o("pretrained_model_name_or_path"),Clr=o(":"),wlr=l(),Le=a("ul"),PT=a("li"),V2e=a("strong"),Alr=o("data2vec-audio"),Llr=o(" \u2014 "),QW=a("a"),ylr=o("Data2VecAudioForCTC"),xlr=o(" (Data2VecAudio model)"),$lr=l(),BT=a("li"),X2e=a("strong"),klr=o("hubert"),Slr=o(" \u2014 "),HW=a("a"),Rlr=o("HubertForCTC"),Plr=o(" (Hubert model)"),Blr=l(),IT=a("li"),z2e=a("strong"),Ilr=o("mctct"),Nlr=o(" \u2014 "),UW=a("a"),qlr=o("MCTCTForCTC"),jlr=o(" (M-CTC-T model)"),Dlr=l(),NT=a("li"),W2e=a("strong"),Glr=o("sew"),Olr=o(" \u2014 "),JW=a("a"),Vlr=o("SEWForCTC"),Xlr=o(" (SEW model)"),zlr=l(),qT=a("li"),Q2e=a("strong"),Wlr=o("sew-d"),Qlr=o(" \u2014 "),YW=a("a"),Hlr=o("SEWDForCTC"),Ulr=o(" (SEW-D model)"),Jlr=l(),jT=a("li"),H2e=a("strong"),Ylr=o("unispeech"),Klr=o(" \u2014 "),KW=a("a"),Zlr=o("UniSpeechForCTC"),eir=o(" (UniSpeech model)"),oir=l(),DT=a("li"),U2e=a("strong"),rir=o("unispeech-sat"),tir=o(" \u2014 "),ZW=a("a"),air=o("UniSpeechSatForCTC"),nir=o(" (UniSpeechSat model)"),sir=l(),GT=a("li"),J2e=a("strong"),lir=o("wav2vec2"),iir=o(" \u2014 "),eQ=a("a"),dir=o("Wav2Vec2ForCTC"),cir=o(" (Wav2Vec2 model)"),fir=l(),OT=a("li"),Y2e=a("strong"),mir=o("wav2vec2-conformer"),gir=o(" \u2014 "),oQ=a("a"),hir=o("Wav2Vec2ConformerForCTC"),pir=o(" (Wav2Vec2-Conformer model)"),uir=l(),VT=a("li"),K2e=a("strong"),_ir=o("wavlm"),bir=o(" \u2014 "),rQ=a("a"),vir=o("WavLMForCTC"),Fir=o(" (WavLM model)"),Tir=l(),XT=a("p"),Mir=o("The model is set in evaluation mode by default using "),Z2e=a("code"),Eir=o("model.eval()"),Cir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ebe=a("code"),wir=o("model.train()"),Air=l(),F(zT.$$.fragment),aOe=l(),Sd=a("h2"),WT=a("a"),obe=a("span"),F(wy.$$.fragment),Lir=l(),rbe=a("span"),yir=o("AutoModelForSpeechSeq2Seq"),nOe=l(),Wo=a("div"),F(Ay.$$.fragment),xir=l(),Rd=a("p"),$ir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),tQ=a("a"),kir=o("from_pretrained()"),Sir=o(" class method or the "),aQ=a("a"),Rir=o("from_config()"),Pir=o(` class
method.`),Bir=l(),Ly=a("p"),Iir=o("This class cannot be instantiated directly using "),tbe=a("code"),Nir=o("__init__()"),qir=o(" (throws an error)."),jir=l(),Et=a("div"),F(yy.$$.fragment),Dir=l(),abe=a("p"),Gir=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Oir=l(),Pd=a("p"),Vir=o(`Note:
Loading a model from its configuration file does `),nbe=a("strong"),Xir=o("not"),zir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=a("a"),Wir=o("from_pretrained()"),Qir=o(" to load the model weights."),Hir=l(),F(QT.$$.fragment),Uir=l(),ho=a("div"),F(xy.$$.fragment),Jir=l(),sbe=a("p"),Yir=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Kir=l(),Ua=a("p"),Zir=o("The model class to instantiate is selected based on the "),lbe=a("code"),edr=o("model_type"),odr=o(` property of the config object (either
passed as an argument or loaded from `),ibe=a("code"),rdr=o("pretrained_model_name_or_path"),tdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=a("code"),adr=o("pretrained_model_name_or_path"),ndr=o(":"),sdr=l(),$y=a("ul"),HT=a("li"),cbe=a("strong"),ldr=o("speech-encoder-decoder"),idr=o(" \u2014 "),sQ=a("a"),ddr=o("SpeechEncoderDecoderModel"),cdr=o(" (Speech Encoder decoder model)"),fdr=l(),UT=a("li"),fbe=a("strong"),mdr=o("speech_to_text"),gdr=o(" \u2014 "),lQ=a("a"),hdr=o("Speech2TextForConditionalGeneration"),pdr=o(" (Speech2Text model)"),udr=l(),JT=a("p"),_dr=o("The model is set in evaluation mode by default using "),mbe=a("code"),bdr=o("model.eval()"),vdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gbe=a("code"),Fdr=o("model.train()"),Tdr=l(),F(YT.$$.fragment),sOe=l(),Bd=a("h2"),KT=a("a"),hbe=a("span"),F(ky.$$.fragment),Mdr=l(),pbe=a("span"),Edr=o("AutoModelForAudioXVector"),lOe=l(),Qo=a("div"),F(Sy.$$.fragment),Cdr=l(),Id=a("p"),wdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),iQ=a("a"),Adr=o("from_pretrained()"),Ldr=o(" class method or the "),dQ=a("a"),ydr=o("from_config()"),xdr=o(` class
method.`),$dr=l(),Ry=a("p"),kdr=o("This class cannot be instantiated directly using "),ube=a("code"),Sdr=o("__init__()"),Rdr=o(" (throws an error)."),Pdr=l(),Ct=a("div"),F(Py.$$.fragment),Bdr=l(),_be=a("p"),Idr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Ndr=l(),Nd=a("p"),qdr=o(`Note:
Loading a model from its configuration file does `),bbe=a("strong"),jdr=o("not"),Ddr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=a("a"),Gdr=o("from_pretrained()"),Odr=o(" to load the model weights."),Vdr=l(),F(ZT.$$.fragment),Xdr=l(),po=a("div"),F(By.$$.fragment),zdr=l(),vbe=a("p"),Wdr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Qdr=l(),Ja=a("p"),Hdr=o("The model class to instantiate is selected based on the "),Fbe=a("code"),Udr=o("model_type"),Jdr=o(` property of the config object (either
passed as an argument or loaded from `),Tbe=a("code"),Ydr=o("pretrained_model_name_or_path"),Kdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=a("code"),Zdr=o("pretrained_model_name_or_path"),ecr=o(":"),ocr=l(),ot=a("ul"),e7=a("li"),Ebe=a("strong"),rcr=o("data2vec-audio"),tcr=o(" \u2014 "),fQ=a("a"),acr=o("Data2VecAudioForXVector"),ncr=o(" (Data2VecAudio model)"),scr=l(),o7=a("li"),Cbe=a("strong"),lcr=o("unispeech-sat"),icr=o(" \u2014 "),mQ=a("a"),dcr=o("UniSpeechSatForXVector"),ccr=o(" (UniSpeechSat model)"),fcr=l(),r7=a("li"),wbe=a("strong"),mcr=o("wav2vec2"),gcr=o(" \u2014 "),gQ=a("a"),hcr=o("Wav2Vec2ForXVector"),pcr=o(" (Wav2Vec2 model)"),ucr=l(),t7=a("li"),Abe=a("strong"),_cr=o("wav2vec2-conformer"),bcr=o(" \u2014 "),hQ=a("a"),vcr=o("Wav2Vec2ConformerForXVector"),Fcr=o(" (Wav2Vec2-Conformer model)"),Tcr=l(),a7=a("li"),Lbe=a("strong"),Mcr=o("wavlm"),Ecr=o(" \u2014 "),pQ=a("a"),Ccr=o("WavLMForXVector"),wcr=o(" (WavLM model)"),Acr=l(),n7=a("p"),Lcr=o("The model is set in evaluation mode by default using "),ybe=a("code"),ycr=o("model.eval()"),xcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xbe=a("code"),$cr=o("model.train()"),kcr=l(),F(s7.$$.fragment),iOe=l(),qd=a("h2"),l7=a("a"),$be=a("span"),F(Iy.$$.fragment),Scr=l(),kbe=a("span"),Rcr=o("AutoModelForMaskedImageModeling"),dOe=l(),Ho=a("div"),F(Ny.$$.fragment),Pcr=l(),jd=a("p"),Bcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),uQ=a("a"),Icr=o("from_pretrained()"),Ncr=o(" class method or the "),_Q=a("a"),qcr=o("from_config()"),jcr=o(` class
method.`),Dcr=l(),qy=a("p"),Gcr=o("This class cannot be instantiated directly using "),Sbe=a("code"),Ocr=o("__init__()"),Vcr=o(" (throws an error)."),Xcr=l(),wt=a("div"),F(jy.$$.fragment),zcr=l(),Rbe=a("p"),Wcr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Qcr=l(),Dd=a("p"),Hcr=o(`Note:
Loading a model from its configuration file does `),Pbe=a("strong"),Ucr=o("not"),Jcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=a("a"),Ycr=o("from_pretrained()"),Kcr=o(" to load the model weights."),Zcr=l(),F(i7.$$.fragment),efr=l(),uo=a("div"),F(Dy.$$.fragment),ofr=l(),Bbe=a("p"),rfr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),tfr=l(),Ya=a("p"),afr=o("The model class to instantiate is selected based on the "),Ibe=a("code"),nfr=o("model_type"),sfr=o(` property of the config object (either
passed as an argument or loaded from `),Nbe=a("code"),lfr=o("pretrained_model_name_or_path"),ifr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qbe=a("code"),dfr=o("pretrained_model_name_or_path"),cfr=o(":"),ffr=l(),Gd=a("ul"),d7=a("li"),jbe=a("strong"),mfr=o("deit"),gfr=o(" \u2014 "),vQ=a("a"),hfr=o("DeiTForMaskedImageModeling"),pfr=o(" (DeiT model)"),ufr=l(),c7=a("li"),Dbe=a("strong"),_fr=o("swin"),bfr=o(" \u2014 "),FQ=a("a"),vfr=o("SwinForMaskedImageModeling"),Ffr=o(" (Swin Transformer model)"),Tfr=l(),f7=a("li"),Gbe=a("strong"),Mfr=o("vit"),Efr=o(" \u2014 "),TQ=a("a"),Cfr=o("ViTForMaskedImageModeling"),wfr=o(" (ViT model)"),Afr=l(),m7=a("p"),Lfr=o("The model is set in evaluation mode by default using "),Obe=a("code"),yfr=o("model.eval()"),xfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vbe=a("code"),$fr=o("model.train()"),kfr=l(),F(g7.$$.fragment),cOe=l(),Od=a("h2"),h7=a("a"),Xbe=a("span"),F(Gy.$$.fragment),Sfr=l(),zbe=a("span"),Rfr=o("AutoModelForObjectDetection"),fOe=l(),Uo=a("div"),F(Oy.$$.fragment),Pfr=l(),Vd=a("p"),Bfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),MQ=a("a"),Ifr=o("from_pretrained()"),Nfr=o(" class method or the "),EQ=a("a"),qfr=o("from_config()"),jfr=o(` class
method.`),Dfr=l(),Vy=a("p"),Gfr=o("This class cannot be instantiated directly using "),Wbe=a("code"),Ofr=o("__init__()"),Vfr=o(" (throws an error)."),Xfr=l(),At=a("div"),F(Xy.$$.fragment),zfr=l(),Qbe=a("p"),Wfr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Qfr=l(),Xd=a("p"),Hfr=o(`Note:
Loading a model from its configuration file does `),Hbe=a("strong"),Ufr=o("not"),Jfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=a("a"),Yfr=o("from_pretrained()"),Kfr=o(" to load the model weights."),Zfr=l(),F(p7.$$.fragment),emr=l(),_o=a("div"),F(zy.$$.fragment),omr=l(),Ube=a("p"),rmr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),tmr=l(),Ka=a("p"),amr=o("The model class to instantiate is selected based on the "),Jbe=a("code"),nmr=o("model_type"),smr=o(` property of the config object (either
passed as an argument or loaded from `),Ybe=a("code"),lmr=o("pretrained_model_name_or_path"),imr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=a("code"),dmr=o("pretrained_model_name_or_path"),cmr=o(":"),fmr=l(),Wy=a("ul"),u7=a("li"),Zbe=a("strong"),mmr=o("detr"),gmr=o(" \u2014 "),wQ=a("a"),hmr=o("DetrForObjectDetection"),pmr=o(" (DETR model)"),umr=l(),_7=a("li"),eve=a("strong"),_mr=o("yolos"),bmr=o(" \u2014 "),AQ=a("a"),vmr=o("YolosForObjectDetection"),Fmr=o(" (YOLOS model)"),Tmr=l(),b7=a("p"),Mmr=o("The model is set in evaluation mode by default using "),ove=a("code"),Emr=o("model.eval()"),Cmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rve=a("code"),wmr=o("model.train()"),Amr=l(),F(v7.$$.fragment),mOe=l(),zd=a("h2"),F7=a("a"),tve=a("span"),F(Qy.$$.fragment),Lmr=l(),ave=a("span"),ymr=o("AutoModelForImageSegmentation"),gOe=l(),Jo=a("div"),F(Hy.$$.fragment),xmr=l(),Wd=a("p"),$mr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),LQ=a("a"),kmr=o("from_pretrained()"),Smr=o(" class method or the "),yQ=a("a"),Rmr=o("from_config()"),Pmr=o(` class
method.`),Bmr=l(),Uy=a("p"),Imr=o("This class cannot be instantiated directly using "),nve=a("code"),Nmr=o("__init__()"),qmr=o(" (throws an error)."),jmr=l(),Lt=a("div"),F(Jy.$$.fragment),Dmr=l(),sve=a("p"),Gmr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Omr=l(),Qd=a("p"),Vmr=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),Xmr=o("not"),zmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=a("a"),Wmr=o("from_pretrained()"),Qmr=o(" to load the model weights."),Hmr=l(),F(T7.$$.fragment),Umr=l(),bo=a("div"),F(Yy.$$.fragment),Jmr=l(),ive=a("p"),Ymr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Kmr=l(),Za=a("p"),Zmr=o("The model class to instantiate is selected based on the "),dve=a("code"),egr=o("model_type"),ogr=o(` property of the config object (either
passed as an argument or loaded from `),cve=a("code"),rgr=o("pretrained_model_name_or_path"),tgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=a("code"),agr=o("pretrained_model_name_or_path"),ngr=o(":"),sgr=l(),mve=a("ul"),M7=a("li"),gve=a("strong"),lgr=o("detr"),igr=o(" \u2014 "),$Q=a("a"),dgr=o("DetrForSegmentation"),cgr=o(" (DETR model)"),fgr=l(),E7=a("p"),mgr=o("The model is set in evaluation mode by default using "),hve=a("code"),ggr=o("model.eval()"),hgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pve=a("code"),pgr=o("model.train()"),ugr=l(),F(C7.$$.fragment),hOe=l(),Hd=a("h2"),w7=a("a"),uve=a("span"),F(Ky.$$.fragment),_gr=l(),_ve=a("span"),bgr=o("AutoModelForSemanticSegmentation"),pOe=l(),Yo=a("div"),F(Zy.$$.fragment),vgr=l(),Ud=a("p"),Fgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),kQ=a("a"),Tgr=o("from_pretrained()"),Mgr=o(" class method or the "),SQ=a("a"),Egr=o("from_config()"),Cgr=o(` class
method.`),wgr=l(),e8=a("p"),Agr=o("This class cannot be instantiated directly using "),bve=a("code"),Lgr=o("__init__()"),ygr=o(" (throws an error)."),xgr=l(),yt=a("div"),F(o8.$$.fragment),$gr=l(),vve=a("p"),kgr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Sgr=l(),Jd=a("p"),Rgr=o(`Note:
Loading a model from its configuration file does `),Fve=a("strong"),Pgr=o("not"),Bgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),Igr=o("from_pretrained()"),Ngr=o(" to load the model weights."),qgr=l(),F(A7.$$.fragment),jgr=l(),vo=a("div"),F(r8.$$.fragment),Dgr=l(),Tve=a("p"),Ggr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ogr=l(),en=a("p"),Vgr=o("The model class to instantiate is selected based on the "),Mve=a("code"),Xgr=o("model_type"),zgr=o(` property of the config object (either
passed as an argument or loaded from `),Eve=a("code"),Wgr=o("pretrained_model_name_or_path"),Qgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=a("code"),Hgr=o("pretrained_model_name_or_path"),Ugr=o(":"),Jgr=l(),on=a("ul"),L7=a("li"),wve=a("strong"),Ygr=o("beit"),Kgr=o(" \u2014 "),PQ=a("a"),Zgr=o("BeitForSemanticSegmentation"),ehr=o(" (BEiT model)"),ohr=l(),y7=a("li"),Ave=a("strong"),rhr=o("data2vec-vision"),thr=o(" \u2014 "),BQ=a("a"),ahr=o("Data2VecVisionForSemanticSegmentation"),nhr=o(" (Data2VecVision model)"),shr=l(),x7=a("li"),Lve=a("strong"),lhr=o("dpt"),ihr=o(" \u2014 "),IQ=a("a"),dhr=o("DPTForSemanticSegmentation"),chr=o(" (DPT model)"),fhr=l(),$7=a("li"),yve=a("strong"),mhr=o("segformer"),ghr=o(" \u2014 "),NQ=a("a"),hhr=o("SegformerForSemanticSegmentation"),phr=o(" (SegFormer model)"),uhr=l(),k7=a("p"),_hr=o("The model is set in evaluation mode by default using "),xve=a("code"),bhr=o("model.eval()"),vhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ve=a("code"),Fhr=o("model.train()"),Thr=l(),F(S7.$$.fragment),uOe=l(),Yd=a("h2"),R7=a("a"),kve=a("span"),F(t8.$$.fragment),Mhr=l(),Sve=a("span"),Ehr=o("AutoModelForInstanceSegmentation"),_Oe=l(),Ko=a("div"),F(a8.$$.fragment),Chr=l(),Kd=a("p"),whr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),qQ=a("a"),Ahr=o("from_pretrained()"),Lhr=o(" class method or the "),jQ=a("a"),yhr=o("from_config()"),xhr=o(` class
method.`),$hr=l(),n8=a("p"),khr=o("This class cannot be instantiated directly using "),Rve=a("code"),Shr=o("__init__()"),Rhr=o(" (throws an error)."),Phr=l(),xt=a("div"),F(s8.$$.fragment),Bhr=l(),Pve=a("p"),Ihr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Nhr=l(),Zd=a("p"),qhr=o(`Note:
Loading a model from its configuration file does `),Bve=a("strong"),jhr=o("not"),Dhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),Ghr=o("from_pretrained()"),Ohr=o(" to load the model weights."),Vhr=l(),F(P7.$$.fragment),Xhr=l(),Fo=a("div"),F(l8.$$.fragment),zhr=l(),Ive=a("p"),Whr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Qhr=l(),rn=a("p"),Hhr=o("The model class to instantiate is selected based on the "),Nve=a("code"),Uhr=o("model_type"),Jhr=o(` property of the config object (either
passed as an argument or loaded from `),qve=a("code"),Yhr=o("pretrained_model_name_or_path"),Khr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=a("code"),Zhr=o("pretrained_model_name_or_path"),epr=o(":"),opr=l(),Dve=a("ul"),B7=a("li"),Gve=a("strong"),rpr=o("maskformer"),tpr=o(" \u2014 "),GQ=a("a"),apr=o("MaskFormerForInstanceSegmentation"),npr=o(" (MaskFormer model)"),spr=l(),I7=a("p"),lpr=o("The model is set in evaluation mode by default using "),Ove=a("code"),ipr=o("model.eval()"),dpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vve=a("code"),cpr=o("model.train()"),fpr=l(),F(N7.$$.fragment),bOe=l(),ec=a("h2"),q7=a("a"),Xve=a("span"),F(i8.$$.fragment),mpr=l(),zve=a("span"),gpr=o("TFAutoModel"),vOe=l(),Zo=a("div"),F(d8.$$.fragment),hpr=l(),oc=a("p"),ppr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OQ=a("a"),upr=o("from_pretrained()"),_pr=o(" class method or the "),VQ=a("a"),bpr=o("from_config()"),vpr=o(` class
method.`),Fpr=l(),c8=a("p"),Tpr=o("This class cannot be instantiated directly using "),Wve=a("code"),Mpr=o("__init__()"),Epr=o(" (throws an error)."),Cpr=l(),$t=a("div"),F(f8.$$.fragment),wpr=l(),Qve=a("p"),Apr=o("Instantiates one of the base model classes of the library from a configuration."),Lpr=l(),rc=a("p"),ypr=o(`Note:
Loading a model from its configuration file does `),Hve=a("strong"),xpr=o("not"),$pr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),kpr=o("from_pretrained()"),Spr=o(" to load the model weights."),Rpr=l(),F(j7.$$.fragment),Ppr=l(),Lr=a("div"),F(m8.$$.fragment),Bpr=l(),Uve=a("p"),Ipr=o("Instantiate one of the base model classes of the library from a pretrained model."),Npr=l(),tn=a("p"),qpr=o("The model class to instantiate is selected based on the "),Jve=a("code"),jpr=o("model_type"),Dpr=o(` property of the config object (either
passed as an argument or loaded from `),Yve=a("code"),Gpr=o("pretrained_model_name_or_path"),Opr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=a("code"),Vpr=o("pretrained_model_name_or_path"),Xpr=o(":"),zpr=l(),q=a("ul"),D7=a("li"),Zve=a("strong"),Wpr=o("albert"),Qpr=o(" \u2014 "),zQ=a("a"),Hpr=o("TFAlbertModel"),Upr=o(" (ALBERT model)"),Jpr=l(),G7=a("li"),e0e=a("strong"),Ypr=o("bart"),Kpr=o(" \u2014 "),WQ=a("a"),Zpr=o("TFBartModel"),eur=o(" (BART model)"),our=l(),O7=a("li"),o0e=a("strong"),rur=o("bert"),tur=o(" \u2014 "),QQ=a("a"),aur=o("TFBertModel"),nur=o(" (BERT model)"),sur=l(),V7=a("li"),r0e=a("strong"),lur=o("blenderbot"),iur=o(" \u2014 "),HQ=a("a"),dur=o("TFBlenderbotModel"),cur=o(" (Blenderbot model)"),fur=l(),X7=a("li"),t0e=a("strong"),mur=o("blenderbot-small"),gur=o(" \u2014 "),UQ=a("a"),hur=o("TFBlenderbotSmallModel"),pur=o(" (BlenderbotSmall model)"),uur=l(),z7=a("li"),a0e=a("strong"),_ur=o("camembert"),bur=o(" \u2014 "),JQ=a("a"),vur=o("TFCamembertModel"),Fur=o(" (CamemBERT model)"),Tur=l(),W7=a("li"),n0e=a("strong"),Mur=o("clip"),Eur=o(" \u2014 "),YQ=a("a"),Cur=o("TFCLIPModel"),wur=o(" (CLIP model)"),Aur=l(),Q7=a("li"),s0e=a("strong"),Lur=o("convbert"),yur=o(" \u2014 "),KQ=a("a"),xur=o("TFConvBertModel"),$ur=o(" (ConvBERT model)"),kur=l(),H7=a("li"),l0e=a("strong"),Sur=o("convnext"),Rur=o(" \u2014 "),ZQ=a("a"),Pur=o("TFConvNextModel"),Bur=o(" (ConvNeXT model)"),Iur=l(),U7=a("li"),i0e=a("strong"),Nur=o("ctrl"),qur=o(" \u2014 "),eH=a("a"),jur=o("TFCTRLModel"),Dur=o(" (CTRL model)"),Gur=l(),J7=a("li"),d0e=a("strong"),Our=o("data2vec-vision"),Vur=o(" \u2014 "),oH=a("a"),Xur=o("TFData2VecVisionModel"),zur=o(" (Data2VecVision model)"),Wur=l(),Y7=a("li"),c0e=a("strong"),Qur=o("deberta"),Hur=o(" \u2014 "),rH=a("a"),Uur=o("TFDebertaModel"),Jur=o(" (DeBERTa model)"),Yur=l(),K7=a("li"),f0e=a("strong"),Kur=o("deberta-v2"),Zur=o(" \u2014 "),tH=a("a"),e_r=o("TFDebertaV2Model"),o_r=o(" (DeBERTa-v2 model)"),r_r=l(),Z7=a("li"),m0e=a("strong"),t_r=o("distilbert"),a_r=o(" \u2014 "),aH=a("a"),n_r=o("TFDistilBertModel"),s_r=o(" (DistilBERT model)"),l_r=l(),e9=a("li"),g0e=a("strong"),i_r=o("dpr"),d_r=o(" \u2014 "),nH=a("a"),c_r=o("TFDPRQuestionEncoder"),f_r=o(" (DPR model)"),m_r=l(),o9=a("li"),h0e=a("strong"),g_r=o("electra"),h_r=o(" \u2014 "),sH=a("a"),p_r=o("TFElectraModel"),u_r=o(" (ELECTRA model)"),__r=l(),r9=a("li"),p0e=a("strong"),b_r=o("flaubert"),v_r=o(" \u2014 "),lH=a("a"),F_r=o("TFFlaubertModel"),T_r=o(" (FlauBERT model)"),M_r=l(),zs=a("li"),u0e=a("strong"),E_r=o("funnel"),C_r=o(" \u2014 "),iH=a("a"),w_r=o("TFFunnelModel"),A_r=o(" or "),dH=a("a"),L_r=o("TFFunnelBaseModel"),y_r=o(" (Funnel Transformer model)"),x_r=l(),t9=a("li"),_0e=a("strong"),$_r=o("gpt2"),k_r=o(" \u2014 "),cH=a("a"),S_r=o("TFGPT2Model"),R_r=o(" (OpenAI GPT-2 model)"),P_r=l(),a9=a("li"),b0e=a("strong"),B_r=o("gptj"),I_r=o(" \u2014 "),fH=a("a"),N_r=o("TFGPTJModel"),q_r=o(" (GPT-J model)"),j_r=l(),n9=a("li"),v0e=a("strong"),D_r=o("hubert"),G_r=o(" \u2014 "),mH=a("a"),O_r=o("TFHubertModel"),V_r=o(" (Hubert model)"),X_r=l(),s9=a("li"),F0e=a("strong"),z_r=o("layoutlm"),W_r=o(" \u2014 "),gH=a("a"),Q_r=o("TFLayoutLMModel"),H_r=o(" (LayoutLM model)"),U_r=l(),l9=a("li"),T0e=a("strong"),J_r=o("led"),Y_r=o(" \u2014 "),hH=a("a"),K_r=o("TFLEDModel"),Z_r=o(" (LED model)"),e1r=l(),i9=a("li"),M0e=a("strong"),o1r=o("longformer"),r1r=o(" \u2014 "),pH=a("a"),t1r=o("TFLongformerModel"),a1r=o(" (Longformer model)"),n1r=l(),d9=a("li"),E0e=a("strong"),s1r=o("lxmert"),l1r=o(" \u2014 "),uH=a("a"),i1r=o("TFLxmertModel"),d1r=o(" (LXMERT model)"),c1r=l(),c9=a("li"),C0e=a("strong"),f1r=o("marian"),m1r=o(" \u2014 "),_H=a("a"),g1r=o("TFMarianModel"),h1r=o(" (Marian model)"),p1r=l(),f9=a("li"),w0e=a("strong"),u1r=o("mbart"),_1r=o(" \u2014 "),bH=a("a"),b1r=o("TFMBartModel"),v1r=o(" (mBART model)"),F1r=l(),m9=a("li"),A0e=a("strong"),T1r=o("mobilebert"),M1r=o(" \u2014 "),vH=a("a"),E1r=o("TFMobileBertModel"),C1r=o(" (MobileBERT model)"),w1r=l(),g9=a("li"),L0e=a("strong"),A1r=o("mpnet"),L1r=o(" \u2014 "),FH=a("a"),y1r=o("TFMPNetModel"),x1r=o(" (MPNet model)"),$1r=l(),h9=a("li"),y0e=a("strong"),k1r=o("mt5"),S1r=o(" \u2014 "),TH=a("a"),R1r=o("TFMT5Model"),P1r=o(" (MT5 model)"),B1r=l(),p9=a("li"),x0e=a("strong"),I1r=o("openai-gpt"),N1r=o(" \u2014 "),MH=a("a"),q1r=o("TFOpenAIGPTModel"),j1r=o(" (OpenAI GPT model)"),D1r=l(),u9=a("li"),$0e=a("strong"),G1r=o("opt"),O1r=o(" \u2014 "),EH=a("a"),V1r=o("TFOPTModel"),X1r=o(" (OPT model)"),z1r=l(),_9=a("li"),k0e=a("strong"),W1r=o("pegasus"),Q1r=o(" \u2014 "),CH=a("a"),H1r=o("TFPegasusModel"),U1r=o(" (Pegasus model)"),J1r=l(),b9=a("li"),S0e=a("strong"),Y1r=o("rembert"),K1r=o(" \u2014 "),wH=a("a"),Z1r=o("TFRemBertModel"),e2r=o(" (RemBERT model)"),o2r=l(),v9=a("li"),R0e=a("strong"),r2r=o("roberta"),t2r=o(" \u2014 "),AH=a("a"),a2r=o("TFRobertaModel"),n2r=o(" (RoBERTa model)"),s2r=l(),F9=a("li"),P0e=a("strong"),l2r=o("roformer"),i2r=o(" \u2014 "),LH=a("a"),d2r=o("TFRoFormerModel"),c2r=o(" (RoFormer model)"),f2r=l(),T9=a("li"),B0e=a("strong"),m2r=o("speech_to_text"),g2r=o(" \u2014 "),yH=a("a"),h2r=o("TFSpeech2TextModel"),p2r=o(" (Speech2Text model)"),u2r=l(),M9=a("li"),I0e=a("strong"),_2r=o("swin"),b2r=o(" \u2014 "),xH=a("a"),v2r=o("TFSwinModel"),F2r=o(" (Swin Transformer model)"),T2r=l(),E9=a("li"),N0e=a("strong"),M2r=o("t5"),E2r=o(" \u2014 "),$H=a("a"),C2r=o("TFT5Model"),w2r=o(" (T5 model)"),A2r=l(),C9=a("li"),q0e=a("strong"),L2r=o("tapas"),y2r=o(" \u2014 "),kH=a("a"),x2r=o("TFTapasModel"),$2r=o(" (TAPAS model)"),k2r=l(),w9=a("li"),j0e=a("strong"),S2r=o("transfo-xl"),R2r=o(" \u2014 "),SH=a("a"),P2r=o("TFTransfoXLModel"),B2r=o(" (Transformer-XL model)"),I2r=l(),A9=a("li"),D0e=a("strong"),N2r=o("vit"),q2r=o(" \u2014 "),RH=a("a"),j2r=o("TFViTModel"),D2r=o(" (ViT model)"),G2r=l(),L9=a("li"),G0e=a("strong"),O2r=o("vit_mae"),V2r=o(" \u2014 "),PH=a("a"),X2r=o("TFViTMAEModel"),z2r=o(" (ViTMAE model)"),W2r=l(),y9=a("li"),O0e=a("strong"),Q2r=o("wav2vec2"),H2r=o(" \u2014 "),BH=a("a"),U2r=o("TFWav2Vec2Model"),J2r=o(" (Wav2Vec2 model)"),Y2r=l(),x9=a("li"),V0e=a("strong"),K2r=o("xlm"),Z2r=o(" \u2014 "),IH=a("a"),ebr=o("TFXLMModel"),obr=o(" (XLM model)"),rbr=l(),$9=a("li"),X0e=a("strong"),tbr=o("xlm-roberta"),abr=o(" \u2014 "),NH=a("a"),nbr=o("TFXLMRobertaModel"),sbr=o(" (XLM-RoBERTa model)"),lbr=l(),k9=a("li"),z0e=a("strong"),ibr=o("xlnet"),dbr=o(" \u2014 "),qH=a("a"),cbr=o("TFXLNetModel"),fbr=o(" (XLNet model)"),mbr=l(),F(S9.$$.fragment),FOe=l(),tc=a("h2"),R9=a("a"),W0e=a("span"),F(g8.$$.fragment),gbr=l(),Q0e=a("span"),hbr=o("TFAutoModelForPreTraining"),TOe=l(),er=a("div"),F(h8.$$.fragment),pbr=l(),ac=a("p"),ubr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jH=a("a"),_br=o("from_pretrained()"),bbr=o(" class method or the "),DH=a("a"),vbr=o("from_config()"),Fbr=o(` class
method.`),Tbr=l(),p8=a("p"),Mbr=o("This class cannot be instantiated directly using "),H0e=a("code"),Ebr=o("__init__()"),Cbr=o(" (throws an error)."),wbr=l(),kt=a("div"),F(u8.$$.fragment),Abr=l(),U0e=a("p"),Lbr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ybr=l(),nc=a("p"),xbr=o(`Note:
Loading a model from its configuration file does `),J0e=a("strong"),$br=o("not"),kbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),Sbr=o("from_pretrained()"),Rbr=o(" to load the model weights."),Pbr=l(),F(P9.$$.fragment),Bbr=l(),yr=a("div"),F(_8.$$.fragment),Ibr=l(),Y0e=a("p"),Nbr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qbr=l(),an=a("p"),jbr=o("The model class to instantiate is selected based on the "),K0e=a("code"),Dbr=o("model_type"),Gbr=o(` property of the config object (either
passed as an argument or loaded from `),Z0e=a("code"),Obr=o("pretrained_model_name_or_path"),Vbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=a("code"),Xbr=o("pretrained_model_name_or_path"),zbr=o(":"),Wbr=l(),se=a("ul"),B9=a("li"),oFe=a("strong"),Qbr=o("albert"),Hbr=o(" \u2014 "),OH=a("a"),Ubr=o("TFAlbertForPreTraining"),Jbr=o(" (ALBERT model)"),Ybr=l(),I9=a("li"),rFe=a("strong"),Kbr=o("bart"),Zbr=o(" \u2014 "),VH=a("a"),evr=o("TFBartForConditionalGeneration"),ovr=o(" (BART model)"),rvr=l(),N9=a("li"),tFe=a("strong"),tvr=o("bert"),avr=o(" \u2014 "),XH=a("a"),nvr=o("TFBertForPreTraining"),svr=o(" (BERT model)"),lvr=l(),q9=a("li"),aFe=a("strong"),ivr=o("camembert"),dvr=o(" \u2014 "),zH=a("a"),cvr=o("TFCamembertForMaskedLM"),fvr=o(" (CamemBERT model)"),mvr=l(),j9=a("li"),nFe=a("strong"),gvr=o("ctrl"),hvr=o(" \u2014 "),WH=a("a"),pvr=o("TFCTRLLMHeadModel"),uvr=o(" (CTRL model)"),_vr=l(),D9=a("li"),sFe=a("strong"),bvr=o("distilbert"),vvr=o(" \u2014 "),QH=a("a"),Fvr=o("TFDistilBertForMaskedLM"),Tvr=o(" (DistilBERT model)"),Mvr=l(),G9=a("li"),lFe=a("strong"),Evr=o("electra"),Cvr=o(" \u2014 "),HH=a("a"),wvr=o("TFElectraForPreTraining"),Avr=o(" (ELECTRA model)"),Lvr=l(),O9=a("li"),iFe=a("strong"),yvr=o("flaubert"),xvr=o(" \u2014 "),UH=a("a"),$vr=o("TFFlaubertWithLMHeadModel"),kvr=o(" (FlauBERT model)"),Svr=l(),V9=a("li"),dFe=a("strong"),Rvr=o("funnel"),Pvr=o(" \u2014 "),JH=a("a"),Bvr=o("TFFunnelForPreTraining"),Ivr=o(" (Funnel Transformer model)"),Nvr=l(),X9=a("li"),cFe=a("strong"),qvr=o("gpt2"),jvr=o(" \u2014 "),YH=a("a"),Dvr=o("TFGPT2LMHeadModel"),Gvr=o(" (OpenAI GPT-2 model)"),Ovr=l(),z9=a("li"),fFe=a("strong"),Vvr=o("layoutlm"),Xvr=o(" \u2014 "),KH=a("a"),zvr=o("TFLayoutLMForMaskedLM"),Wvr=o(" (LayoutLM model)"),Qvr=l(),W9=a("li"),mFe=a("strong"),Hvr=o("lxmert"),Uvr=o(" \u2014 "),ZH=a("a"),Jvr=o("TFLxmertForPreTraining"),Yvr=o(" (LXMERT model)"),Kvr=l(),Q9=a("li"),gFe=a("strong"),Zvr=o("mobilebert"),e0r=o(" \u2014 "),eU=a("a"),o0r=o("TFMobileBertForPreTraining"),r0r=o(" (MobileBERT model)"),t0r=l(),H9=a("li"),hFe=a("strong"),a0r=o("mpnet"),n0r=o(" \u2014 "),oU=a("a"),s0r=o("TFMPNetForMaskedLM"),l0r=o(" (MPNet model)"),i0r=l(),U9=a("li"),pFe=a("strong"),d0r=o("openai-gpt"),c0r=o(" \u2014 "),rU=a("a"),f0r=o("TFOpenAIGPTLMHeadModel"),m0r=o(" (OpenAI GPT model)"),g0r=l(),J9=a("li"),uFe=a("strong"),h0r=o("roberta"),p0r=o(" \u2014 "),tU=a("a"),u0r=o("TFRobertaForMaskedLM"),_0r=o(" (RoBERTa model)"),b0r=l(),Y9=a("li"),_Fe=a("strong"),v0r=o("t5"),F0r=o(" \u2014 "),aU=a("a"),T0r=o("TFT5ForConditionalGeneration"),M0r=o(" (T5 model)"),E0r=l(),K9=a("li"),bFe=a("strong"),C0r=o("tapas"),w0r=o(" \u2014 "),nU=a("a"),A0r=o("TFTapasForMaskedLM"),L0r=o(" (TAPAS model)"),y0r=l(),Z9=a("li"),vFe=a("strong"),x0r=o("transfo-xl"),$0r=o(" \u2014 "),sU=a("a"),k0r=o("TFTransfoXLLMHeadModel"),S0r=o(" (Transformer-XL model)"),R0r=l(),eM=a("li"),FFe=a("strong"),P0r=o("vit_mae"),B0r=o(" \u2014 "),lU=a("a"),I0r=o("TFViTMAEForPreTraining"),N0r=o(" (ViTMAE model)"),q0r=l(),oM=a("li"),TFe=a("strong"),j0r=o("xlm"),D0r=o(" \u2014 "),iU=a("a"),G0r=o("TFXLMWithLMHeadModel"),O0r=o(" (XLM model)"),V0r=l(),rM=a("li"),MFe=a("strong"),X0r=o("xlm-roberta"),z0r=o(" \u2014 "),dU=a("a"),W0r=o("TFXLMRobertaForMaskedLM"),Q0r=o(" (XLM-RoBERTa model)"),H0r=l(),tM=a("li"),EFe=a("strong"),U0r=o("xlnet"),J0r=o(" \u2014 "),cU=a("a"),Y0r=o("TFXLNetLMHeadModel"),K0r=o(" (XLNet model)"),Z0r=l(),F(aM.$$.fragment),MOe=l(),sc=a("h2"),nM=a("a"),CFe=a("span"),F(b8.$$.fragment),eFr=l(),wFe=a("span"),oFr=o("TFAutoModelForCausalLM"),EOe=l(),or=a("div"),F(v8.$$.fragment),rFr=l(),lc=a("p"),tFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fU=a("a"),aFr=o("from_pretrained()"),nFr=o(" class method or the "),mU=a("a"),sFr=o("from_config()"),lFr=o(` class
method.`),iFr=l(),F8=a("p"),dFr=o("This class cannot be instantiated directly using "),AFe=a("code"),cFr=o("__init__()"),fFr=o(" (throws an error)."),mFr=l(),St=a("div"),F(T8.$$.fragment),gFr=l(),LFe=a("p"),hFr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pFr=l(),ic=a("p"),uFr=o(`Note:
Loading a model from its configuration file does `),yFe=a("strong"),_Fr=o("not"),bFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),vFr=o("from_pretrained()"),FFr=o(" to load the model weights."),TFr=l(),F(sM.$$.fragment),MFr=l(),xr=a("div"),F(M8.$$.fragment),EFr=l(),xFe=a("p"),CFr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wFr=l(),nn=a("p"),AFr=o("The model class to instantiate is selected based on the "),$Fe=a("code"),LFr=o("model_type"),yFr=o(` property of the config object (either
passed as an argument or loaded from `),kFe=a("code"),xFr=o("pretrained_model_name_or_path"),$Fr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=a("code"),kFr=o("pretrained_model_name_or_path"),SFr=o(":"),RFr=l(),Me=a("ul"),lM=a("li"),RFe=a("strong"),PFr=o("bert"),BFr=o(" \u2014 "),hU=a("a"),IFr=o("TFBertLMHeadModel"),NFr=o(" (BERT model)"),qFr=l(),iM=a("li"),PFe=a("strong"),jFr=o("camembert"),DFr=o(" \u2014 "),pU=a("a"),GFr=o("TFCamembertForCausalLM"),OFr=o(" (CamemBERT model)"),VFr=l(),dM=a("li"),BFe=a("strong"),XFr=o("ctrl"),zFr=o(" \u2014 "),uU=a("a"),WFr=o("TFCTRLLMHeadModel"),QFr=o(" (CTRL model)"),HFr=l(),cM=a("li"),IFe=a("strong"),UFr=o("gpt2"),JFr=o(" \u2014 "),_U=a("a"),YFr=o("TFGPT2LMHeadModel"),KFr=o(" (OpenAI GPT-2 model)"),ZFr=l(),fM=a("li"),NFe=a("strong"),eTr=o("gptj"),oTr=o(" \u2014 "),bU=a("a"),rTr=o("TFGPTJForCausalLM"),tTr=o(" (GPT-J model)"),aTr=l(),mM=a("li"),qFe=a("strong"),nTr=o("openai-gpt"),sTr=o(" \u2014 "),vU=a("a"),lTr=o("TFOpenAIGPTLMHeadModel"),iTr=o(" (OpenAI GPT model)"),dTr=l(),gM=a("li"),jFe=a("strong"),cTr=o("opt"),fTr=o(" \u2014 "),FU=a("a"),mTr=o("TFOPTForCausalLM"),gTr=o(" (OPT model)"),hTr=l(),hM=a("li"),DFe=a("strong"),pTr=o("rembert"),uTr=o(" \u2014 "),TU=a("a"),_Tr=o("TFRemBertForCausalLM"),bTr=o(" (RemBERT model)"),vTr=l(),pM=a("li"),GFe=a("strong"),FTr=o("roberta"),TTr=o(" \u2014 "),MU=a("a"),MTr=o("TFRobertaForCausalLM"),ETr=o(" (RoBERTa model)"),CTr=l(),uM=a("li"),OFe=a("strong"),wTr=o("roformer"),ATr=o(" \u2014 "),EU=a("a"),LTr=o("TFRoFormerForCausalLM"),yTr=o(" (RoFormer model)"),xTr=l(),_M=a("li"),VFe=a("strong"),$Tr=o("transfo-xl"),kTr=o(" \u2014 "),CU=a("a"),STr=o("TFTransfoXLLMHeadModel"),RTr=o(" (Transformer-XL model)"),PTr=l(),bM=a("li"),XFe=a("strong"),BTr=o("xlm"),ITr=o(" \u2014 "),wU=a("a"),NTr=o("TFXLMWithLMHeadModel"),qTr=o(" (XLM model)"),jTr=l(),vM=a("li"),zFe=a("strong"),DTr=o("xlnet"),GTr=o(" \u2014 "),AU=a("a"),OTr=o("TFXLNetLMHeadModel"),VTr=o(" (XLNet model)"),XTr=l(),F(FM.$$.fragment),COe=l(),dc=a("h2"),TM=a("a"),WFe=a("span"),F(E8.$$.fragment),zTr=l(),QFe=a("span"),WTr=o("TFAutoModelForImageClassification"),wOe=l(),rr=a("div"),F(C8.$$.fragment),QTr=l(),cc=a("p"),HTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LU=a("a"),UTr=o("from_pretrained()"),JTr=o(" class method or the "),yU=a("a"),YTr=o("from_config()"),KTr=o(` class
method.`),ZTr=l(),w8=a("p"),e7r=o("This class cannot be instantiated directly using "),HFe=a("code"),o7r=o("__init__()"),r7r=o(" (throws an error)."),t7r=l(),Rt=a("div"),F(A8.$$.fragment),a7r=l(),UFe=a("p"),n7r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),s7r=l(),fc=a("p"),l7r=o(`Note:
Loading a model from its configuration file does `),JFe=a("strong"),i7r=o("not"),d7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=a("a"),c7r=o("from_pretrained()"),f7r=o(" to load the model weights."),m7r=l(),F(MM.$$.fragment),g7r=l(),$r=a("div"),F(L8.$$.fragment),h7r=l(),YFe=a("p"),p7r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),u7r=l(),sn=a("p"),_7r=o("The model class to instantiate is selected based on the "),KFe=a("code"),b7r=o("model_type"),v7r=o(` property of the config object (either
passed as an argument or loaded from `),ZFe=a("code"),F7r=o("pretrained_model_name_or_path"),T7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eTe=a("code"),M7r=o("pretrained_model_name_or_path"),E7r=o(":"),C7r=l(),ln=a("ul"),EM=a("li"),oTe=a("strong"),w7r=o("convnext"),A7r=o(" \u2014 "),$U=a("a"),L7r=o("TFConvNextForImageClassification"),y7r=o(" (ConvNeXT model)"),x7r=l(),CM=a("li"),rTe=a("strong"),$7r=o("data2vec-vision"),k7r=o(" \u2014 "),kU=a("a"),S7r=o("TFData2VecVisionForImageClassification"),R7r=o(" (Data2VecVision model)"),P7r=l(),wM=a("li"),tTe=a("strong"),B7r=o("swin"),I7r=o(" \u2014 "),SU=a("a"),N7r=o("TFSwinForImageClassification"),q7r=o(" (Swin Transformer model)"),j7r=l(),AM=a("li"),aTe=a("strong"),D7r=o("vit"),G7r=o(" \u2014 "),RU=a("a"),O7r=o("TFViTForImageClassification"),V7r=o(" (ViT model)"),X7r=l(),F(LM.$$.fragment),AOe=l(),mc=a("h2"),yM=a("a"),nTe=a("span"),F(y8.$$.fragment),z7r=l(),sTe=a("span"),W7r=o("TFAutoModelForMaskedLM"),LOe=l(),tr=a("div"),F(x8.$$.fragment),Q7r=l(),gc=a("p"),H7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PU=a("a"),U7r=o("from_pretrained()"),J7r=o(" class method or the "),BU=a("a"),Y7r=o("from_config()"),K7r=o(` class
method.`),Z7r=l(),$8=a("p"),e9r=o("This class cannot be instantiated directly using "),lTe=a("code"),o9r=o("__init__()"),r9r=o(" (throws an error)."),t9r=l(),Pt=a("div"),F(k8.$$.fragment),a9r=l(),iTe=a("p"),n9r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),s9r=l(),hc=a("p"),l9r=o(`Note:
Loading a model from its configuration file does `),dTe=a("strong"),i9r=o("not"),d9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=a("a"),c9r=o("from_pretrained()"),f9r=o(" to load the model weights."),m9r=l(),F(xM.$$.fragment),g9r=l(),kr=a("div"),F(S8.$$.fragment),h9r=l(),cTe=a("p"),p9r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),u9r=l(),dn=a("p"),_9r=o("The model class to instantiate is selected based on the "),fTe=a("code"),b9r=o("model_type"),v9r=o(` property of the config object (either
passed as an argument or loaded from `),mTe=a("code"),F9r=o("pretrained_model_name_or_path"),T9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=a("code"),M9r=o("pretrained_model_name_or_path"),E9r=o(":"),C9r=l(),ie=a("ul"),$M=a("li"),hTe=a("strong"),w9r=o("albert"),A9r=o(" \u2014 "),NU=a("a"),L9r=o("TFAlbertForMaskedLM"),y9r=o(" (ALBERT model)"),x9r=l(),kM=a("li"),pTe=a("strong"),$9r=o("bert"),k9r=o(" \u2014 "),qU=a("a"),S9r=o("TFBertForMaskedLM"),R9r=o(" (BERT model)"),P9r=l(),SM=a("li"),uTe=a("strong"),B9r=o("camembert"),I9r=o(" \u2014 "),jU=a("a"),N9r=o("TFCamembertForMaskedLM"),q9r=o(" (CamemBERT model)"),j9r=l(),RM=a("li"),_Te=a("strong"),D9r=o("convbert"),G9r=o(" \u2014 "),DU=a("a"),O9r=o("TFConvBertForMaskedLM"),V9r=o(" (ConvBERT model)"),X9r=l(),PM=a("li"),bTe=a("strong"),z9r=o("deberta"),W9r=o(" \u2014 "),GU=a("a"),Q9r=o("TFDebertaForMaskedLM"),H9r=o(" (DeBERTa model)"),U9r=l(),BM=a("li"),vTe=a("strong"),J9r=o("deberta-v2"),Y9r=o(" \u2014 "),OU=a("a"),K9r=o("TFDebertaV2ForMaskedLM"),Z9r=o(" (DeBERTa-v2 model)"),eMr=l(),IM=a("li"),FTe=a("strong"),oMr=o("distilbert"),rMr=o(" \u2014 "),VU=a("a"),tMr=o("TFDistilBertForMaskedLM"),aMr=o(" (DistilBERT model)"),nMr=l(),NM=a("li"),TTe=a("strong"),sMr=o("electra"),lMr=o(" \u2014 "),XU=a("a"),iMr=o("TFElectraForMaskedLM"),dMr=o(" (ELECTRA model)"),cMr=l(),qM=a("li"),MTe=a("strong"),fMr=o("flaubert"),mMr=o(" \u2014 "),zU=a("a"),gMr=o("TFFlaubertWithLMHeadModel"),hMr=o(" (FlauBERT model)"),pMr=l(),jM=a("li"),ETe=a("strong"),uMr=o("funnel"),_Mr=o(" \u2014 "),WU=a("a"),bMr=o("TFFunnelForMaskedLM"),vMr=o(" (Funnel Transformer model)"),FMr=l(),DM=a("li"),CTe=a("strong"),TMr=o("layoutlm"),MMr=o(" \u2014 "),QU=a("a"),EMr=o("TFLayoutLMForMaskedLM"),CMr=o(" (LayoutLM model)"),wMr=l(),GM=a("li"),wTe=a("strong"),AMr=o("longformer"),LMr=o(" \u2014 "),HU=a("a"),yMr=o("TFLongformerForMaskedLM"),xMr=o(" (Longformer model)"),$Mr=l(),OM=a("li"),ATe=a("strong"),kMr=o("mobilebert"),SMr=o(" \u2014 "),UU=a("a"),RMr=o("TFMobileBertForMaskedLM"),PMr=o(" (MobileBERT model)"),BMr=l(),VM=a("li"),LTe=a("strong"),IMr=o("mpnet"),NMr=o(" \u2014 "),JU=a("a"),qMr=o("TFMPNetForMaskedLM"),jMr=o(" (MPNet model)"),DMr=l(),XM=a("li"),yTe=a("strong"),GMr=o("rembert"),OMr=o(" \u2014 "),YU=a("a"),VMr=o("TFRemBertForMaskedLM"),XMr=o(" (RemBERT model)"),zMr=l(),zM=a("li"),xTe=a("strong"),WMr=o("roberta"),QMr=o(" \u2014 "),KU=a("a"),HMr=o("TFRobertaForMaskedLM"),UMr=o(" (RoBERTa model)"),JMr=l(),WM=a("li"),$Te=a("strong"),YMr=o("roformer"),KMr=o(" \u2014 "),ZU=a("a"),ZMr=o("TFRoFormerForMaskedLM"),eEr=o(" (RoFormer model)"),oEr=l(),QM=a("li"),kTe=a("strong"),rEr=o("tapas"),tEr=o(" \u2014 "),eJ=a("a"),aEr=o("TFTapasForMaskedLM"),nEr=o(" (TAPAS model)"),sEr=l(),HM=a("li"),STe=a("strong"),lEr=o("xlm"),iEr=o(" \u2014 "),oJ=a("a"),dEr=o("TFXLMWithLMHeadModel"),cEr=o(" (XLM model)"),fEr=l(),UM=a("li"),RTe=a("strong"),mEr=o("xlm-roberta"),gEr=o(" \u2014 "),rJ=a("a"),hEr=o("TFXLMRobertaForMaskedLM"),pEr=o(" (XLM-RoBERTa model)"),uEr=l(),F(JM.$$.fragment),yOe=l(),pc=a("h2"),YM=a("a"),PTe=a("span"),F(R8.$$.fragment),_Er=l(),BTe=a("span"),bEr=o("TFAutoModelForSeq2SeqLM"),xOe=l(),ar=a("div"),F(P8.$$.fragment),vEr=l(),uc=a("p"),FEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tJ=a("a"),TEr=o("from_pretrained()"),MEr=o(" class method or the "),aJ=a("a"),EEr=o("from_config()"),CEr=o(` class
method.`),wEr=l(),B8=a("p"),AEr=o("This class cannot be instantiated directly using "),ITe=a("code"),LEr=o("__init__()"),yEr=o(" (throws an error)."),xEr=l(),Bt=a("div"),F(I8.$$.fragment),$Er=l(),NTe=a("p"),kEr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),SEr=l(),_c=a("p"),REr=o(`Note:
Loading a model from its configuration file does `),qTe=a("strong"),PEr=o("not"),BEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),IEr=o("from_pretrained()"),NEr=o(" to load the model weights."),qEr=l(),F(KM.$$.fragment),jEr=l(),Sr=a("div"),F(N8.$$.fragment),DEr=l(),jTe=a("p"),GEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),OEr=l(),cn=a("p"),VEr=o("The model class to instantiate is selected based on the "),DTe=a("code"),XEr=o("model_type"),zEr=o(` property of the config object (either
passed as an argument or loaded from `),GTe=a("code"),WEr=o("pretrained_model_name_or_path"),QEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OTe=a("code"),HEr=o("pretrained_model_name_or_path"),UEr=o(":"),JEr=l(),ye=a("ul"),ZM=a("li"),VTe=a("strong"),YEr=o("bart"),KEr=o(" \u2014 "),sJ=a("a"),ZEr=o("TFBartForConditionalGeneration"),e4r=o(" (BART model)"),o4r=l(),eE=a("li"),XTe=a("strong"),r4r=o("blenderbot"),t4r=o(" \u2014 "),lJ=a("a"),a4r=o("TFBlenderbotForConditionalGeneration"),n4r=o(" (Blenderbot model)"),s4r=l(),oE=a("li"),zTe=a("strong"),l4r=o("blenderbot-small"),i4r=o(" \u2014 "),iJ=a("a"),d4r=o("TFBlenderbotSmallForConditionalGeneration"),c4r=o(" (BlenderbotSmall model)"),f4r=l(),rE=a("li"),WTe=a("strong"),m4r=o("encoder-decoder"),g4r=o(" \u2014 "),dJ=a("a"),h4r=o("TFEncoderDecoderModel"),p4r=o(" (Encoder decoder model)"),u4r=l(),tE=a("li"),QTe=a("strong"),_4r=o("led"),b4r=o(" \u2014 "),cJ=a("a"),v4r=o("TFLEDForConditionalGeneration"),F4r=o(" (LED model)"),T4r=l(),aE=a("li"),HTe=a("strong"),M4r=o("marian"),E4r=o(" \u2014 "),fJ=a("a"),C4r=o("TFMarianMTModel"),w4r=o(" (Marian model)"),A4r=l(),nE=a("li"),UTe=a("strong"),L4r=o("mbart"),y4r=o(" \u2014 "),mJ=a("a"),x4r=o("TFMBartForConditionalGeneration"),$4r=o(" (mBART model)"),k4r=l(),sE=a("li"),JTe=a("strong"),S4r=o("mt5"),R4r=o(" \u2014 "),gJ=a("a"),P4r=o("TFMT5ForConditionalGeneration"),B4r=o(" (MT5 model)"),I4r=l(),lE=a("li"),YTe=a("strong"),N4r=o("pegasus"),q4r=o(" \u2014 "),hJ=a("a"),j4r=o("TFPegasusForConditionalGeneration"),D4r=o(" (Pegasus model)"),G4r=l(),iE=a("li"),KTe=a("strong"),O4r=o("t5"),V4r=o(" \u2014 "),pJ=a("a"),X4r=o("TFT5ForConditionalGeneration"),z4r=o(" (T5 model)"),W4r=l(),F(dE.$$.fragment),$Oe=l(),bc=a("h2"),cE=a("a"),ZTe=a("span"),F(q8.$$.fragment),Q4r=l(),e7e=a("span"),H4r=o("TFAutoModelForSequenceClassification"),kOe=l(),nr=a("div"),F(j8.$$.fragment),U4r=l(),vc=a("p"),J4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uJ=a("a"),Y4r=o("from_pretrained()"),K4r=o(" class method or the "),_J=a("a"),Z4r=o("from_config()"),eCr=o(` class
method.`),oCr=l(),D8=a("p"),rCr=o("This class cannot be instantiated directly using "),o7e=a("code"),tCr=o("__init__()"),aCr=o(" (throws an error)."),nCr=l(),It=a("div"),F(G8.$$.fragment),sCr=l(),r7e=a("p"),lCr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iCr=l(),Fc=a("p"),dCr=o(`Note:
Loading a model from its configuration file does `),t7e=a("strong"),cCr=o("not"),fCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=a("a"),mCr=o("from_pretrained()"),gCr=o(" to load the model weights."),hCr=l(),F(fE.$$.fragment),pCr=l(),Rr=a("div"),F(O8.$$.fragment),uCr=l(),a7e=a("p"),_Cr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),bCr=l(),fn=a("p"),vCr=o("The model class to instantiate is selected based on the "),n7e=a("code"),FCr=o("model_type"),TCr=o(` property of the config object (either
passed as an argument or loaded from `),s7e=a("code"),MCr=o("pretrained_model_name_or_path"),ECr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=a("code"),CCr=o("pretrained_model_name_or_path"),wCr=o(":"),ACr=l(),te=a("ul"),mE=a("li"),i7e=a("strong"),LCr=o("albert"),yCr=o(" \u2014 "),vJ=a("a"),xCr=o("TFAlbertForSequenceClassification"),$Cr=o(" (ALBERT model)"),kCr=l(),gE=a("li"),d7e=a("strong"),SCr=o("bert"),RCr=o(" \u2014 "),FJ=a("a"),PCr=o("TFBertForSequenceClassification"),BCr=o(" (BERT model)"),ICr=l(),hE=a("li"),c7e=a("strong"),NCr=o("camembert"),qCr=o(" \u2014 "),TJ=a("a"),jCr=o("TFCamembertForSequenceClassification"),DCr=o(" (CamemBERT model)"),GCr=l(),pE=a("li"),f7e=a("strong"),OCr=o("convbert"),VCr=o(" \u2014 "),MJ=a("a"),XCr=o("TFConvBertForSequenceClassification"),zCr=o(" (ConvBERT model)"),WCr=l(),uE=a("li"),m7e=a("strong"),QCr=o("ctrl"),HCr=o(" \u2014 "),EJ=a("a"),UCr=o("TFCTRLForSequenceClassification"),JCr=o(" (CTRL model)"),YCr=l(),_E=a("li"),g7e=a("strong"),KCr=o("deberta"),ZCr=o(" \u2014 "),CJ=a("a"),e5r=o("TFDebertaForSequenceClassification"),o5r=o(" (DeBERTa model)"),r5r=l(),bE=a("li"),h7e=a("strong"),t5r=o("deberta-v2"),a5r=o(" \u2014 "),wJ=a("a"),n5r=o("TFDebertaV2ForSequenceClassification"),s5r=o(" (DeBERTa-v2 model)"),l5r=l(),vE=a("li"),p7e=a("strong"),i5r=o("distilbert"),d5r=o(" \u2014 "),AJ=a("a"),c5r=o("TFDistilBertForSequenceClassification"),f5r=o(" (DistilBERT model)"),m5r=l(),FE=a("li"),u7e=a("strong"),g5r=o("electra"),h5r=o(" \u2014 "),LJ=a("a"),p5r=o("TFElectraForSequenceClassification"),u5r=o(" (ELECTRA model)"),_5r=l(),TE=a("li"),_7e=a("strong"),b5r=o("flaubert"),v5r=o(" \u2014 "),yJ=a("a"),F5r=o("TFFlaubertForSequenceClassification"),T5r=o(" (FlauBERT model)"),M5r=l(),ME=a("li"),b7e=a("strong"),E5r=o("funnel"),C5r=o(" \u2014 "),xJ=a("a"),w5r=o("TFFunnelForSequenceClassification"),A5r=o(" (Funnel Transformer model)"),L5r=l(),EE=a("li"),v7e=a("strong"),y5r=o("gpt2"),x5r=o(" \u2014 "),$J=a("a"),$5r=o("TFGPT2ForSequenceClassification"),k5r=o(" (OpenAI GPT-2 model)"),S5r=l(),CE=a("li"),F7e=a("strong"),R5r=o("gptj"),P5r=o(" \u2014 "),kJ=a("a"),B5r=o("TFGPTJForSequenceClassification"),I5r=o(" (GPT-J model)"),N5r=l(),wE=a("li"),T7e=a("strong"),q5r=o("layoutlm"),j5r=o(" \u2014 "),SJ=a("a"),D5r=o("TFLayoutLMForSequenceClassification"),G5r=o(" (LayoutLM model)"),O5r=l(),AE=a("li"),M7e=a("strong"),V5r=o("longformer"),X5r=o(" \u2014 "),RJ=a("a"),z5r=o("TFLongformerForSequenceClassification"),W5r=o(" (Longformer model)"),Q5r=l(),LE=a("li"),E7e=a("strong"),H5r=o("mobilebert"),U5r=o(" \u2014 "),PJ=a("a"),J5r=o("TFMobileBertForSequenceClassification"),Y5r=o(" (MobileBERT model)"),K5r=l(),yE=a("li"),C7e=a("strong"),Z5r=o("mpnet"),e3r=o(" \u2014 "),BJ=a("a"),o3r=o("TFMPNetForSequenceClassification"),r3r=o(" (MPNet model)"),t3r=l(),xE=a("li"),w7e=a("strong"),a3r=o("openai-gpt"),n3r=o(" \u2014 "),IJ=a("a"),s3r=o("TFOpenAIGPTForSequenceClassification"),l3r=o(" (OpenAI GPT model)"),i3r=l(),$E=a("li"),A7e=a("strong"),d3r=o("rembert"),c3r=o(" \u2014 "),NJ=a("a"),f3r=o("TFRemBertForSequenceClassification"),m3r=o(" (RemBERT model)"),g3r=l(),kE=a("li"),L7e=a("strong"),h3r=o("roberta"),p3r=o(" \u2014 "),qJ=a("a"),u3r=o("TFRobertaForSequenceClassification"),_3r=o(" (RoBERTa model)"),b3r=l(),SE=a("li"),y7e=a("strong"),v3r=o("roformer"),F3r=o(" \u2014 "),jJ=a("a"),T3r=o("TFRoFormerForSequenceClassification"),M3r=o(" (RoFormer model)"),E3r=l(),RE=a("li"),x7e=a("strong"),C3r=o("tapas"),w3r=o(" \u2014 "),DJ=a("a"),A3r=o("TFTapasForSequenceClassification"),L3r=o(" (TAPAS model)"),y3r=l(),PE=a("li"),$7e=a("strong"),x3r=o("transfo-xl"),$3r=o(" \u2014 "),GJ=a("a"),k3r=o("TFTransfoXLForSequenceClassification"),S3r=o(" (Transformer-XL model)"),R3r=l(),BE=a("li"),k7e=a("strong"),P3r=o("xlm"),B3r=o(" \u2014 "),OJ=a("a"),I3r=o("TFXLMForSequenceClassification"),N3r=o(" (XLM model)"),q3r=l(),IE=a("li"),S7e=a("strong"),j3r=o("xlm-roberta"),D3r=o(" \u2014 "),VJ=a("a"),G3r=o("TFXLMRobertaForSequenceClassification"),O3r=o(" (XLM-RoBERTa model)"),V3r=l(),NE=a("li"),R7e=a("strong"),X3r=o("xlnet"),z3r=o(" \u2014 "),XJ=a("a"),W3r=o("TFXLNetForSequenceClassification"),Q3r=o(" (XLNet model)"),H3r=l(),F(qE.$$.fragment),SOe=l(),Tc=a("h2"),jE=a("a"),P7e=a("span"),F(V8.$$.fragment),U3r=l(),B7e=a("span"),J3r=o("TFAutoModelForMultipleChoice"),ROe=l(),sr=a("div"),F(X8.$$.fragment),Y3r=l(),Mc=a("p"),K3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zJ=a("a"),Z3r=o("from_pretrained()"),ewr=o(" class method or the "),WJ=a("a"),owr=o("from_config()"),rwr=o(` class
method.`),twr=l(),z8=a("p"),awr=o("This class cannot be instantiated directly using "),I7e=a("code"),nwr=o("__init__()"),swr=o(" (throws an error)."),lwr=l(),Nt=a("div"),F(W8.$$.fragment),iwr=l(),N7e=a("p"),dwr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cwr=l(),Ec=a("p"),fwr=o(`Note:
Loading a model from its configuration file does `),q7e=a("strong"),mwr=o("not"),gwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),hwr=o("from_pretrained()"),pwr=o(" to load the model weights."),uwr=l(),F(DE.$$.fragment),_wr=l(),Pr=a("div"),F(Q8.$$.fragment),bwr=l(),j7e=a("p"),vwr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Fwr=l(),mn=a("p"),Twr=o("The model class to instantiate is selected based on the "),D7e=a("code"),Mwr=o("model_type"),Ewr=o(` property of the config object (either
passed as an argument or loaded from `),G7e=a("code"),Cwr=o("pretrained_model_name_or_path"),wwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=a("code"),Awr=o("pretrained_model_name_or_path"),Lwr=o(":"),ywr=l(),ue=a("ul"),GE=a("li"),V7e=a("strong"),xwr=o("albert"),$wr=o(" \u2014 "),HJ=a("a"),kwr=o("TFAlbertForMultipleChoice"),Swr=o(" (ALBERT model)"),Rwr=l(),OE=a("li"),X7e=a("strong"),Pwr=o("bert"),Bwr=o(" \u2014 "),UJ=a("a"),Iwr=o("TFBertForMultipleChoice"),Nwr=o(" (BERT model)"),qwr=l(),VE=a("li"),z7e=a("strong"),jwr=o("camembert"),Dwr=o(" \u2014 "),JJ=a("a"),Gwr=o("TFCamembertForMultipleChoice"),Owr=o(" (CamemBERT model)"),Vwr=l(),XE=a("li"),W7e=a("strong"),Xwr=o("convbert"),zwr=o(" \u2014 "),YJ=a("a"),Wwr=o("TFConvBertForMultipleChoice"),Qwr=o(" (ConvBERT model)"),Hwr=l(),zE=a("li"),Q7e=a("strong"),Uwr=o("distilbert"),Jwr=o(" \u2014 "),KJ=a("a"),Ywr=o("TFDistilBertForMultipleChoice"),Kwr=o(" (DistilBERT model)"),Zwr=l(),WE=a("li"),H7e=a("strong"),eAr=o("electra"),oAr=o(" \u2014 "),ZJ=a("a"),rAr=o("TFElectraForMultipleChoice"),tAr=o(" (ELECTRA model)"),aAr=l(),QE=a("li"),U7e=a("strong"),nAr=o("flaubert"),sAr=o(" \u2014 "),eY=a("a"),lAr=o("TFFlaubertForMultipleChoice"),iAr=o(" (FlauBERT model)"),dAr=l(),HE=a("li"),J7e=a("strong"),cAr=o("funnel"),fAr=o(" \u2014 "),oY=a("a"),mAr=o("TFFunnelForMultipleChoice"),gAr=o(" (Funnel Transformer model)"),hAr=l(),UE=a("li"),Y7e=a("strong"),pAr=o("longformer"),uAr=o(" \u2014 "),rY=a("a"),_Ar=o("TFLongformerForMultipleChoice"),bAr=o(" (Longformer model)"),vAr=l(),JE=a("li"),K7e=a("strong"),FAr=o("mobilebert"),TAr=o(" \u2014 "),tY=a("a"),MAr=o("TFMobileBertForMultipleChoice"),EAr=o(" (MobileBERT model)"),CAr=l(),YE=a("li"),Z7e=a("strong"),wAr=o("mpnet"),AAr=o(" \u2014 "),aY=a("a"),LAr=o("TFMPNetForMultipleChoice"),yAr=o(" (MPNet model)"),xAr=l(),KE=a("li"),e9e=a("strong"),$Ar=o("rembert"),kAr=o(" \u2014 "),nY=a("a"),SAr=o("TFRemBertForMultipleChoice"),RAr=o(" (RemBERT model)"),PAr=l(),ZE=a("li"),o9e=a("strong"),BAr=o("roberta"),IAr=o(" \u2014 "),sY=a("a"),NAr=o("TFRobertaForMultipleChoice"),qAr=o(" (RoBERTa model)"),jAr=l(),e4=a("li"),r9e=a("strong"),DAr=o("roformer"),GAr=o(" \u2014 "),lY=a("a"),OAr=o("TFRoFormerForMultipleChoice"),VAr=o(" (RoFormer model)"),XAr=l(),o4=a("li"),t9e=a("strong"),zAr=o("xlm"),WAr=o(" \u2014 "),iY=a("a"),QAr=o("TFXLMForMultipleChoice"),HAr=o(" (XLM model)"),UAr=l(),r4=a("li"),a9e=a("strong"),JAr=o("xlm-roberta"),YAr=o(" \u2014 "),dY=a("a"),KAr=o("TFXLMRobertaForMultipleChoice"),ZAr=o(" (XLM-RoBERTa model)"),e6r=l(),t4=a("li"),n9e=a("strong"),o6r=o("xlnet"),r6r=o(" \u2014 "),cY=a("a"),t6r=o("TFXLNetForMultipleChoice"),a6r=o(" (XLNet model)"),n6r=l(),F(a4.$$.fragment),POe=l(),Cc=a("h2"),n4=a("a"),s9e=a("span"),F(H8.$$.fragment),s6r=l(),l9e=a("span"),l6r=o("TFAutoModelForNextSentencePrediction"),BOe=l(),lr=a("div"),F(U8.$$.fragment),i6r=l(),wc=a("p"),d6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fY=a("a"),c6r=o("from_pretrained()"),f6r=o(" class method or the "),mY=a("a"),m6r=o("from_config()"),g6r=o(` class
method.`),h6r=l(),J8=a("p"),p6r=o("This class cannot be instantiated directly using "),i9e=a("code"),u6r=o("__init__()"),_6r=o(" (throws an error)."),b6r=l(),qt=a("div"),F(Y8.$$.fragment),v6r=l(),d9e=a("p"),F6r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),T6r=l(),Ac=a("p"),M6r=o(`Note:
Loading a model from its configuration file does `),c9e=a("strong"),E6r=o("not"),C6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=a("a"),w6r=o("from_pretrained()"),A6r=o(" to load the model weights."),L6r=l(),F(s4.$$.fragment),y6r=l(),Br=a("div"),F(K8.$$.fragment),x6r=l(),f9e=a("p"),$6r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),k6r=l(),gn=a("p"),S6r=o("The model class to instantiate is selected based on the "),m9e=a("code"),R6r=o("model_type"),P6r=o(` property of the config object (either
passed as an argument or loaded from `),g9e=a("code"),B6r=o("pretrained_model_name_or_path"),I6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h9e=a("code"),N6r=o("pretrained_model_name_or_path"),q6r=o(":"),j6r=l(),Z8=a("ul"),l4=a("li"),p9e=a("strong"),D6r=o("bert"),G6r=o(" \u2014 "),hY=a("a"),O6r=o("TFBertForNextSentencePrediction"),V6r=o(" (BERT model)"),X6r=l(),i4=a("li"),u9e=a("strong"),z6r=o("mobilebert"),W6r=o(" \u2014 "),pY=a("a"),Q6r=o("TFMobileBertForNextSentencePrediction"),H6r=o(" (MobileBERT model)"),U6r=l(),F(d4.$$.fragment),IOe=l(),Lc=a("h2"),c4=a("a"),_9e=a("span"),F(ex.$$.fragment),J6r=l(),b9e=a("span"),Y6r=o("TFAutoModelForTableQuestionAnswering"),NOe=l(),ir=a("div"),F(ox.$$.fragment),K6r=l(),yc=a("p"),Z6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uY=a("a"),eLr=o("from_pretrained()"),oLr=o(" class method or the "),_Y=a("a"),rLr=o("from_config()"),tLr=o(` class
method.`),aLr=l(),rx=a("p"),nLr=o("This class cannot be instantiated directly using "),v9e=a("code"),sLr=o("__init__()"),lLr=o(" (throws an error)."),iLr=l(),jt=a("div"),F(tx.$$.fragment),dLr=l(),F9e=a("p"),cLr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fLr=l(),xc=a("p"),mLr=o(`Note:
Loading a model from its configuration file does `),T9e=a("strong"),gLr=o("not"),hLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=a("a"),pLr=o("from_pretrained()"),uLr=o(" to load the model weights."),_Lr=l(),F(f4.$$.fragment),bLr=l(),Ir=a("div"),F(ax.$$.fragment),vLr=l(),M9e=a("p"),FLr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TLr=l(),hn=a("p"),MLr=o("The model class to instantiate is selected based on the "),E9e=a("code"),ELr=o("model_type"),CLr=o(` property of the config object (either
passed as an argument or loaded from `),C9e=a("code"),wLr=o("pretrained_model_name_or_path"),ALr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w9e=a("code"),LLr=o("pretrained_model_name_or_path"),yLr=o(":"),xLr=l(),A9e=a("ul"),m4=a("li"),L9e=a("strong"),$Lr=o("tapas"),kLr=o(" \u2014 "),vY=a("a"),SLr=o("TFTapasForQuestionAnswering"),RLr=o(" (TAPAS model)"),PLr=l(),F(g4.$$.fragment),qOe=l(),$c=a("h2"),h4=a("a"),y9e=a("span"),F(nx.$$.fragment),BLr=l(),x9e=a("span"),ILr=o("TFAutoModelForTokenClassification"),jOe=l(),dr=a("div"),F(sx.$$.fragment),NLr=l(),kc=a("p"),qLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),FY=a("a"),jLr=o("from_pretrained()"),DLr=o(" class method or the "),TY=a("a"),GLr=o("from_config()"),OLr=o(` class
method.`),VLr=l(),lx=a("p"),XLr=o("This class cannot be instantiated directly using "),$9e=a("code"),zLr=o("__init__()"),WLr=o(" (throws an error)."),QLr=l(),Dt=a("div"),F(ix.$$.fragment),HLr=l(),k9e=a("p"),ULr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JLr=l(),Sc=a("p"),YLr=o(`Note:
Loading a model from its configuration file does `),S9e=a("strong"),KLr=o("not"),ZLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=a("a"),eyr=o("from_pretrained()"),oyr=o(" to load the model weights."),ryr=l(),F(p4.$$.fragment),tyr=l(),Nr=a("div"),F(dx.$$.fragment),ayr=l(),R9e=a("p"),nyr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),syr=l(),pn=a("p"),lyr=o("The model class to instantiate is selected based on the "),P9e=a("code"),iyr=o("model_type"),dyr=o(` property of the config object (either
passed as an argument or loaded from `),B9e=a("code"),cyr=o("pretrained_model_name_or_path"),fyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I9e=a("code"),myr=o("pretrained_model_name_or_path"),gyr=o(":"),hyr=l(),de=a("ul"),u4=a("li"),N9e=a("strong"),pyr=o("albert"),uyr=o(" \u2014 "),EY=a("a"),_yr=o("TFAlbertForTokenClassification"),byr=o(" (ALBERT model)"),vyr=l(),_4=a("li"),q9e=a("strong"),Fyr=o("bert"),Tyr=o(" \u2014 "),CY=a("a"),Myr=o("TFBertForTokenClassification"),Eyr=o(" (BERT model)"),Cyr=l(),b4=a("li"),j9e=a("strong"),wyr=o("camembert"),Ayr=o(" \u2014 "),wY=a("a"),Lyr=o("TFCamembertForTokenClassification"),yyr=o(" (CamemBERT model)"),xyr=l(),v4=a("li"),D9e=a("strong"),$yr=o("convbert"),kyr=o(" \u2014 "),AY=a("a"),Syr=o("TFConvBertForTokenClassification"),Ryr=o(" (ConvBERT model)"),Pyr=l(),F4=a("li"),G9e=a("strong"),Byr=o("deberta"),Iyr=o(" \u2014 "),LY=a("a"),Nyr=o("TFDebertaForTokenClassification"),qyr=o(" (DeBERTa model)"),jyr=l(),T4=a("li"),O9e=a("strong"),Dyr=o("deberta-v2"),Gyr=o(" \u2014 "),yY=a("a"),Oyr=o("TFDebertaV2ForTokenClassification"),Vyr=o(" (DeBERTa-v2 model)"),Xyr=l(),M4=a("li"),V9e=a("strong"),zyr=o("distilbert"),Wyr=o(" \u2014 "),xY=a("a"),Qyr=o("TFDistilBertForTokenClassification"),Hyr=o(" (DistilBERT model)"),Uyr=l(),E4=a("li"),X9e=a("strong"),Jyr=o("electra"),Yyr=o(" \u2014 "),$Y=a("a"),Kyr=o("TFElectraForTokenClassification"),Zyr=o(" (ELECTRA model)"),e8r=l(),C4=a("li"),z9e=a("strong"),o8r=o("flaubert"),r8r=o(" \u2014 "),kY=a("a"),t8r=o("TFFlaubertForTokenClassification"),a8r=o(" (FlauBERT model)"),n8r=l(),w4=a("li"),W9e=a("strong"),s8r=o("funnel"),l8r=o(" \u2014 "),SY=a("a"),i8r=o("TFFunnelForTokenClassification"),d8r=o(" (Funnel Transformer model)"),c8r=l(),A4=a("li"),Q9e=a("strong"),f8r=o("layoutlm"),m8r=o(" \u2014 "),RY=a("a"),g8r=o("TFLayoutLMForTokenClassification"),h8r=o(" (LayoutLM model)"),p8r=l(),L4=a("li"),H9e=a("strong"),u8r=o("longformer"),_8r=o(" \u2014 "),PY=a("a"),b8r=o("TFLongformerForTokenClassification"),v8r=o(" (Longformer model)"),F8r=l(),y4=a("li"),U9e=a("strong"),T8r=o("mobilebert"),M8r=o(" \u2014 "),BY=a("a"),E8r=o("TFMobileBertForTokenClassification"),C8r=o(" (MobileBERT model)"),w8r=l(),x4=a("li"),J9e=a("strong"),A8r=o("mpnet"),L8r=o(" \u2014 "),IY=a("a"),y8r=o("TFMPNetForTokenClassification"),x8r=o(" (MPNet model)"),$8r=l(),$4=a("li"),Y9e=a("strong"),k8r=o("rembert"),S8r=o(" \u2014 "),NY=a("a"),R8r=o("TFRemBertForTokenClassification"),P8r=o(" (RemBERT model)"),B8r=l(),k4=a("li"),K9e=a("strong"),I8r=o("roberta"),N8r=o(" \u2014 "),qY=a("a"),q8r=o("TFRobertaForTokenClassification"),j8r=o(" (RoBERTa model)"),D8r=l(),S4=a("li"),Z9e=a("strong"),G8r=o("roformer"),O8r=o(" \u2014 "),jY=a("a"),V8r=o("TFRoFormerForTokenClassification"),X8r=o(" (RoFormer model)"),z8r=l(),R4=a("li"),eMe=a("strong"),W8r=o("xlm"),Q8r=o(" \u2014 "),DY=a("a"),H8r=o("TFXLMForTokenClassification"),U8r=o(" (XLM model)"),J8r=l(),P4=a("li"),oMe=a("strong"),Y8r=o("xlm-roberta"),K8r=o(" \u2014 "),GY=a("a"),Z8r=o("TFXLMRobertaForTokenClassification"),exr=o(" (XLM-RoBERTa model)"),oxr=l(),B4=a("li"),rMe=a("strong"),rxr=o("xlnet"),txr=o(" \u2014 "),OY=a("a"),axr=o("TFXLNetForTokenClassification"),nxr=o(" (XLNet model)"),sxr=l(),F(I4.$$.fragment),DOe=l(),Rc=a("h2"),N4=a("a"),tMe=a("span"),F(cx.$$.fragment),lxr=l(),aMe=a("span"),ixr=o("TFAutoModelForQuestionAnswering"),GOe=l(),cr=a("div"),F(fx.$$.fragment),dxr=l(),Pc=a("p"),cxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),VY=a("a"),fxr=o("from_pretrained()"),mxr=o(" class method or the "),XY=a("a"),gxr=o("from_config()"),hxr=o(` class
method.`),pxr=l(),mx=a("p"),uxr=o("This class cannot be instantiated directly using "),nMe=a("code"),_xr=o("__init__()"),bxr=o(" (throws an error)."),vxr=l(),Gt=a("div"),F(gx.$$.fragment),Fxr=l(),sMe=a("p"),Txr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Mxr=l(),Bc=a("p"),Exr=o(`Note:
Loading a model from its configuration file does `),lMe=a("strong"),Cxr=o("not"),wxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=a("a"),Axr=o("from_pretrained()"),Lxr=o(" to load the model weights."),yxr=l(),F(q4.$$.fragment),xxr=l(),qr=a("div"),F(hx.$$.fragment),$xr=l(),iMe=a("p"),kxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Sxr=l(),un=a("p"),Rxr=o("The model class to instantiate is selected based on the "),dMe=a("code"),Pxr=o("model_type"),Bxr=o(` property of the config object (either
passed as an argument or loaded from `),cMe=a("code"),Ixr=o("pretrained_model_name_or_path"),Nxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fMe=a("code"),qxr=o("pretrained_model_name_or_path"),jxr=o(":"),Dxr=l(),ce=a("ul"),j4=a("li"),mMe=a("strong"),Gxr=o("albert"),Oxr=o(" \u2014 "),WY=a("a"),Vxr=o("TFAlbertForQuestionAnswering"),Xxr=o(" (ALBERT model)"),zxr=l(),D4=a("li"),gMe=a("strong"),Wxr=o("bert"),Qxr=o(" \u2014 "),QY=a("a"),Hxr=o("TFBertForQuestionAnswering"),Uxr=o(" (BERT model)"),Jxr=l(),G4=a("li"),hMe=a("strong"),Yxr=o("camembert"),Kxr=o(" \u2014 "),HY=a("a"),Zxr=o("TFCamembertForQuestionAnswering"),e$r=o(" (CamemBERT model)"),o$r=l(),O4=a("li"),pMe=a("strong"),r$r=o("convbert"),t$r=o(" \u2014 "),UY=a("a"),a$r=o("TFConvBertForQuestionAnswering"),n$r=o(" (ConvBERT model)"),s$r=l(),V4=a("li"),uMe=a("strong"),l$r=o("deberta"),i$r=o(" \u2014 "),JY=a("a"),d$r=o("TFDebertaForQuestionAnswering"),c$r=o(" (DeBERTa model)"),f$r=l(),X4=a("li"),_Me=a("strong"),m$r=o("deberta-v2"),g$r=o(" \u2014 "),YY=a("a"),h$r=o("TFDebertaV2ForQuestionAnswering"),p$r=o(" (DeBERTa-v2 model)"),u$r=l(),z4=a("li"),bMe=a("strong"),_$r=o("distilbert"),b$r=o(" \u2014 "),KY=a("a"),v$r=o("TFDistilBertForQuestionAnswering"),F$r=o(" (DistilBERT model)"),T$r=l(),W4=a("li"),vMe=a("strong"),M$r=o("electra"),E$r=o(" \u2014 "),ZY=a("a"),C$r=o("TFElectraForQuestionAnswering"),w$r=o(" (ELECTRA model)"),A$r=l(),Q4=a("li"),FMe=a("strong"),L$r=o("flaubert"),y$r=o(" \u2014 "),eK=a("a"),x$r=o("TFFlaubertForQuestionAnsweringSimple"),$$r=o(" (FlauBERT model)"),k$r=l(),H4=a("li"),TMe=a("strong"),S$r=o("funnel"),R$r=o(" \u2014 "),oK=a("a"),P$r=o("TFFunnelForQuestionAnswering"),B$r=o(" (Funnel Transformer model)"),I$r=l(),U4=a("li"),MMe=a("strong"),N$r=o("gptj"),q$r=o(" \u2014 "),rK=a("a"),j$r=o("TFGPTJForQuestionAnswering"),D$r=o(" (GPT-J model)"),G$r=l(),J4=a("li"),EMe=a("strong"),O$r=o("longformer"),V$r=o(" \u2014 "),tK=a("a"),X$r=o("TFLongformerForQuestionAnswering"),z$r=o(" (Longformer model)"),W$r=l(),Y4=a("li"),CMe=a("strong"),Q$r=o("mobilebert"),H$r=o(" \u2014 "),aK=a("a"),U$r=o("TFMobileBertForQuestionAnswering"),J$r=o(" (MobileBERT model)"),Y$r=l(),K4=a("li"),wMe=a("strong"),K$r=o("mpnet"),Z$r=o(" \u2014 "),nK=a("a"),ekr=o("TFMPNetForQuestionAnswering"),okr=o(" (MPNet model)"),rkr=l(),Z4=a("li"),AMe=a("strong"),tkr=o("rembert"),akr=o(" \u2014 "),sK=a("a"),nkr=o("TFRemBertForQuestionAnswering"),skr=o(" (RemBERT model)"),lkr=l(),eC=a("li"),LMe=a("strong"),ikr=o("roberta"),dkr=o(" \u2014 "),lK=a("a"),ckr=o("TFRobertaForQuestionAnswering"),fkr=o(" (RoBERTa model)"),mkr=l(),oC=a("li"),yMe=a("strong"),gkr=o("roformer"),hkr=o(" \u2014 "),iK=a("a"),pkr=o("TFRoFormerForQuestionAnswering"),ukr=o(" (RoFormer model)"),_kr=l(),rC=a("li"),xMe=a("strong"),bkr=o("xlm"),vkr=o(" \u2014 "),dK=a("a"),Fkr=o("TFXLMForQuestionAnsweringSimple"),Tkr=o(" (XLM model)"),Mkr=l(),tC=a("li"),$Me=a("strong"),Ekr=o("xlm-roberta"),Ckr=o(" \u2014 "),cK=a("a"),wkr=o("TFXLMRobertaForQuestionAnswering"),Akr=o(" (XLM-RoBERTa model)"),Lkr=l(),aC=a("li"),kMe=a("strong"),ykr=o("xlnet"),xkr=o(" \u2014 "),fK=a("a"),$kr=o("TFXLNetForQuestionAnsweringSimple"),kkr=o(" (XLNet model)"),Skr=l(),F(nC.$$.fragment),OOe=l(),Ic=a("h2"),sC=a("a"),SMe=a("span"),F(px.$$.fragment),Rkr=l(),RMe=a("span"),Pkr=o("TFAutoModelForVision2Seq"),VOe=l(),fr=a("div"),F(ux.$$.fragment),Bkr=l(),Nc=a("p"),Ikr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mK=a("a"),Nkr=o("from_pretrained()"),qkr=o(" class method or the "),gK=a("a"),jkr=o("from_config()"),Dkr=o(` class
method.`),Gkr=l(),_x=a("p"),Okr=o("This class cannot be instantiated directly using "),PMe=a("code"),Vkr=o("__init__()"),Xkr=o(" (throws an error)."),zkr=l(),Ot=a("div"),F(bx.$$.fragment),Wkr=l(),BMe=a("p"),Qkr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Hkr=l(),qc=a("p"),Ukr=o(`Note:
Loading a model from its configuration file does `),IMe=a("strong"),Jkr=o("not"),Ykr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("a"),Kkr=o("from_pretrained()"),Zkr=o(" to load the model weights."),eSr=l(),F(lC.$$.fragment),oSr=l(),jr=a("div"),F(vx.$$.fragment),rSr=l(),NMe=a("p"),tSr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aSr=l(),_n=a("p"),nSr=o("The model class to instantiate is selected based on the "),qMe=a("code"),sSr=o("model_type"),lSr=o(` property of the config object (either
passed as an argument or loaded from `),jMe=a("code"),iSr=o("pretrained_model_name_or_path"),dSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=a("code"),cSr=o("pretrained_model_name_or_path"),fSr=o(":"),mSr=l(),GMe=a("ul"),iC=a("li"),OMe=a("strong"),gSr=o("vision-encoder-decoder"),hSr=o(" \u2014 "),pK=a("a"),pSr=o("TFVisionEncoderDecoderModel"),uSr=o(" (Vision Encoder decoder model)"),_Sr=l(),F(dC.$$.fragment),XOe=l(),jc=a("h2"),cC=a("a"),VMe=a("span"),F(Fx.$$.fragment),bSr=l(),XMe=a("span"),vSr=o("TFAutoModelForSpeechSeq2Seq"),zOe=l(),mr=a("div"),F(Tx.$$.fragment),FSr=l(),Dc=a("p"),TSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uK=a("a"),MSr=o("from_pretrained()"),ESr=o(" class method or the "),_K=a("a"),CSr=o("from_config()"),wSr=o(` class
method.`),ASr=l(),Mx=a("p"),LSr=o("This class cannot be instantiated directly using "),zMe=a("code"),ySr=o("__init__()"),xSr=o(" (throws an error)."),$Sr=l(),Vt=a("div"),F(Ex.$$.fragment),kSr=l(),WMe=a("p"),SSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),RSr=l(),Gc=a("p"),PSr=o(`Note:
Loading a model from its configuration file does `),QMe=a("strong"),BSr=o("not"),ISr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=a("a"),NSr=o("from_pretrained()"),qSr=o(" to load the model weights."),jSr=l(),F(fC.$$.fragment),DSr=l(),Dr=a("div"),F(Cx.$$.fragment),GSr=l(),HMe=a("p"),OSr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),VSr=l(),bn=a("p"),XSr=o("The model class to instantiate is selected based on the "),UMe=a("code"),zSr=o("model_type"),WSr=o(` property of the config object (either
passed as an argument or loaded from `),JMe=a("code"),QSr=o("pretrained_model_name_or_path"),HSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=a("code"),USr=o("pretrained_model_name_or_path"),JSr=o(":"),YSr=l(),KMe=a("ul"),mC=a("li"),ZMe=a("strong"),KSr=o("speech_to_text"),ZSr=o(" \u2014 "),vK=a("a"),eRr=o("TFSpeech2TextForConditionalGeneration"),oRr=o(" (Speech2Text model)"),rRr=l(),F(gC.$$.fragment),WOe=l(),Oc=a("h2"),hC=a("a"),eEe=a("span"),F(wx.$$.fragment),tRr=l(),oEe=a("span"),aRr=o("FlaxAutoModel"),QOe=l(),gr=a("div"),F(Ax.$$.fragment),nRr=l(),Vc=a("p"),sRr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FK=a("a"),lRr=o("from_pretrained()"),iRr=o(" class method or the "),TK=a("a"),dRr=o("from_config()"),cRr=o(` class
method.`),fRr=l(),Lx=a("p"),mRr=o("This class cannot be instantiated directly using "),rEe=a("code"),gRr=o("__init__()"),hRr=o(" (throws an error)."),pRr=l(),Xt=a("div"),F(yx.$$.fragment),uRr=l(),tEe=a("p"),_Rr=o("Instantiates one of the base model classes of the library from a configuration."),bRr=l(),Xc=a("p"),vRr=o(`Note:
Loading a model from its configuration file does `),aEe=a("strong"),FRr=o("not"),TRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=a("a"),MRr=o("from_pretrained()"),ERr=o(" to load the model weights."),CRr=l(),F(pC.$$.fragment),wRr=l(),Gr=a("div"),F(xx.$$.fragment),ARr=l(),nEe=a("p"),LRr=o("Instantiate one of the base model classes of the library from a pretrained model."),yRr=l(),vn=a("p"),xRr=o("The model class to instantiate is selected based on the "),sEe=a("code"),$Rr=o("model_type"),kRr=o(` property of the config object (either
passed as an argument or loaded from `),lEe=a("code"),SRr=o("pretrained_model_name_or_path"),RRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=a("code"),PRr=o("pretrained_model_name_or_path"),BRr=o(":"),IRr=l(),oe=a("ul"),uC=a("li"),dEe=a("strong"),NRr=o("albert"),qRr=o(" \u2014 "),EK=a("a"),jRr=o("FlaxAlbertModel"),DRr=o(" (ALBERT model)"),GRr=l(),_C=a("li"),cEe=a("strong"),ORr=o("bart"),VRr=o(" \u2014 "),CK=a("a"),XRr=o("FlaxBartModel"),zRr=o(" (BART model)"),WRr=l(),bC=a("li"),fEe=a("strong"),QRr=o("beit"),HRr=o(" \u2014 "),wK=a("a"),URr=o("FlaxBeitModel"),JRr=o(" (BEiT model)"),YRr=l(),vC=a("li"),mEe=a("strong"),KRr=o("bert"),ZRr=o(" \u2014 "),AK=a("a"),ePr=o("FlaxBertModel"),oPr=o(" (BERT model)"),rPr=l(),FC=a("li"),gEe=a("strong"),tPr=o("big_bird"),aPr=o(" \u2014 "),LK=a("a"),nPr=o("FlaxBigBirdModel"),sPr=o(" (BigBird model)"),lPr=l(),TC=a("li"),hEe=a("strong"),iPr=o("blenderbot"),dPr=o(" \u2014 "),yK=a("a"),cPr=o("FlaxBlenderbotModel"),fPr=o(" (Blenderbot model)"),mPr=l(),MC=a("li"),pEe=a("strong"),gPr=o("blenderbot-small"),hPr=o(" \u2014 "),xK=a("a"),pPr=o("FlaxBlenderbotSmallModel"),uPr=o(" (BlenderbotSmall model)"),_Pr=l(),EC=a("li"),uEe=a("strong"),bPr=o("clip"),vPr=o(" \u2014 "),$K=a("a"),FPr=o("FlaxCLIPModel"),TPr=o(" (CLIP model)"),MPr=l(),CC=a("li"),_Ee=a("strong"),EPr=o("distilbert"),CPr=o(" \u2014 "),kK=a("a"),wPr=o("FlaxDistilBertModel"),APr=o(" (DistilBERT model)"),LPr=l(),wC=a("li"),bEe=a("strong"),yPr=o("electra"),xPr=o(" \u2014 "),SK=a("a"),$Pr=o("FlaxElectraModel"),kPr=o(" (ELECTRA model)"),SPr=l(),AC=a("li"),vEe=a("strong"),RPr=o("gpt2"),PPr=o(" \u2014 "),RK=a("a"),BPr=o("FlaxGPT2Model"),IPr=o(" (OpenAI GPT-2 model)"),NPr=l(),LC=a("li"),FEe=a("strong"),qPr=o("gpt_neo"),jPr=o(" \u2014 "),PK=a("a"),DPr=o("FlaxGPTNeoModel"),GPr=o(" (GPT Neo model)"),OPr=l(),yC=a("li"),TEe=a("strong"),VPr=o("gptj"),XPr=o(" \u2014 "),BK=a("a"),zPr=o("FlaxGPTJModel"),WPr=o(" (GPT-J model)"),QPr=l(),xC=a("li"),MEe=a("strong"),HPr=o("longt5"),UPr=o(" \u2014 "),IK=a("a"),JPr=o("FlaxLongT5Model"),YPr=o(" (LongT5 model)"),KPr=l(),$C=a("li"),EEe=a("strong"),ZPr=o("marian"),eBr=o(" \u2014 "),NK=a("a"),oBr=o("FlaxMarianModel"),rBr=o(" (Marian model)"),tBr=l(),kC=a("li"),CEe=a("strong"),aBr=o("mbart"),nBr=o(" \u2014 "),qK=a("a"),sBr=o("FlaxMBartModel"),lBr=o(" (mBART model)"),iBr=l(),SC=a("li"),wEe=a("strong"),dBr=o("mt5"),cBr=o(" \u2014 "),jK=a("a"),fBr=o("FlaxMT5Model"),mBr=o(" (MT5 model)"),gBr=l(),RC=a("li"),AEe=a("strong"),hBr=o("opt"),pBr=o(" \u2014 "),DK=a("a"),uBr=o("FlaxOPTModel"),_Br=o(" (OPT model)"),bBr=l(),PC=a("li"),LEe=a("strong"),vBr=o("pegasus"),FBr=o(" \u2014 "),GK=a("a"),TBr=o("FlaxPegasusModel"),MBr=o(" (Pegasus model)"),EBr=l(),BC=a("li"),yEe=a("strong"),CBr=o("roberta"),wBr=o(" \u2014 "),OK=a("a"),ABr=o("FlaxRobertaModel"),LBr=o(" (RoBERTa model)"),yBr=l(),IC=a("li"),xEe=a("strong"),xBr=o("roformer"),$Br=o(" \u2014 "),VK=a("a"),kBr=o("FlaxRoFormerModel"),SBr=o(" (RoFormer model)"),RBr=l(),NC=a("li"),$Ee=a("strong"),PBr=o("t5"),BBr=o(" \u2014 "),XK=a("a"),IBr=o("FlaxT5Model"),NBr=o(" (T5 model)"),qBr=l(),qC=a("li"),kEe=a("strong"),jBr=o("vision-text-dual-encoder"),DBr=o(" \u2014 "),zK=a("a"),GBr=o("FlaxVisionTextDualEncoderModel"),OBr=o(" (VisionTextDualEncoder model)"),VBr=l(),jC=a("li"),SEe=a("strong"),XBr=o("vit"),zBr=o(" \u2014 "),WK=a("a"),WBr=o("FlaxViTModel"),QBr=o(" (ViT model)"),HBr=l(),DC=a("li"),REe=a("strong"),UBr=o("wav2vec2"),JBr=o(" \u2014 "),QK=a("a"),YBr=o("FlaxWav2Vec2Model"),KBr=o(" (Wav2Vec2 model)"),ZBr=l(),GC=a("li"),PEe=a("strong"),eIr=o("xglm"),oIr=o(" \u2014 "),HK=a("a"),rIr=o("FlaxXGLMModel"),tIr=o(" (XGLM model)"),aIr=l(),OC=a("li"),BEe=a("strong"),nIr=o("xlm-roberta"),sIr=o(" \u2014 "),UK=a("a"),lIr=o("FlaxXLMRobertaModel"),iIr=o(" (XLM-RoBERTa model)"),dIr=l(),F(VC.$$.fragment),HOe=l(),zc=a("h2"),XC=a("a"),IEe=a("span"),F($x.$$.fragment),cIr=l(),NEe=a("span"),fIr=o("FlaxAutoModelForCausalLM"),UOe=l(),hr=a("div"),F(kx.$$.fragment),mIr=l(),Wc=a("p"),gIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JK=a("a"),hIr=o("from_pretrained()"),pIr=o(" class method or the "),YK=a("a"),uIr=o("from_config()"),_Ir=o(` class
method.`),bIr=l(),Sx=a("p"),vIr=o("This class cannot be instantiated directly using "),qEe=a("code"),FIr=o("__init__()"),TIr=o(" (throws an error)."),MIr=l(),zt=a("div"),F(Rx.$$.fragment),EIr=l(),jEe=a("p"),CIr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wIr=l(),Qc=a("p"),AIr=o(`Note:
Loading a model from its configuration file does `),DEe=a("strong"),LIr=o("not"),yIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=a("a"),xIr=o("from_pretrained()"),$Ir=o(" to load the model weights."),kIr=l(),F(zC.$$.fragment),SIr=l(),Or=a("div"),F(Px.$$.fragment),RIr=l(),GEe=a("p"),PIr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BIr=l(),Fn=a("p"),IIr=o("The model class to instantiate is selected based on the "),OEe=a("code"),NIr=o("model_type"),qIr=o(` property of the config object (either
passed as an argument or loaded from `),VEe=a("code"),jIr=o("pretrained_model_name_or_path"),DIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=a("code"),GIr=o("pretrained_model_name_or_path"),OIr=o(":"),VIr=l(),xe=a("ul"),WC=a("li"),zEe=a("strong"),XIr=o("bart"),zIr=o(" \u2014 "),ZK=a("a"),WIr=o("FlaxBartForCausalLM"),QIr=o(" (BART model)"),HIr=l(),QC=a("li"),WEe=a("strong"),UIr=o("bert"),JIr=o(" \u2014 "),eZ=a("a"),YIr=o("FlaxBertForCausalLM"),KIr=o(" (BERT model)"),ZIr=l(),HC=a("li"),QEe=a("strong"),eNr=o("big_bird"),oNr=o(" \u2014 "),oZ=a("a"),rNr=o("FlaxBigBirdForCausalLM"),tNr=o(" (BigBird model)"),aNr=l(),UC=a("li"),HEe=a("strong"),nNr=o("electra"),sNr=o(" \u2014 "),rZ=a("a"),lNr=o("FlaxElectraForCausalLM"),iNr=o(" (ELECTRA model)"),dNr=l(),JC=a("li"),UEe=a("strong"),cNr=o("gpt2"),fNr=o(" \u2014 "),tZ=a("a"),mNr=o("FlaxGPT2LMHeadModel"),gNr=o(" (OpenAI GPT-2 model)"),hNr=l(),YC=a("li"),JEe=a("strong"),pNr=o("gpt_neo"),uNr=o(" \u2014 "),aZ=a("a"),_Nr=o("FlaxGPTNeoForCausalLM"),bNr=o(" (GPT Neo model)"),vNr=l(),KC=a("li"),YEe=a("strong"),FNr=o("gptj"),TNr=o(" \u2014 "),nZ=a("a"),MNr=o("FlaxGPTJForCausalLM"),ENr=o(" (GPT-J model)"),CNr=l(),ZC=a("li"),KEe=a("strong"),wNr=o("opt"),ANr=o(" \u2014 "),sZ=a("a"),LNr=o("FlaxOPTForCausalLM"),yNr=o(" (OPT model)"),xNr=l(),e5=a("li"),ZEe=a("strong"),$Nr=o("roberta"),kNr=o(" \u2014 "),lZ=a("a"),SNr=o("FlaxRobertaForCausalLM"),RNr=o(" (RoBERTa model)"),PNr=l(),o5=a("li"),e4e=a("strong"),BNr=o("xglm"),INr=o(" \u2014 "),iZ=a("a"),NNr=o("FlaxXGLMForCausalLM"),qNr=o(" (XGLM model)"),jNr=l(),F(r5.$$.fragment),JOe=l(),Hc=a("h2"),t5=a("a"),o4e=a("span"),F(Bx.$$.fragment),DNr=l(),r4e=a("span"),GNr=o("FlaxAutoModelForPreTraining"),YOe=l(),pr=a("div"),F(Ix.$$.fragment),ONr=l(),Uc=a("p"),VNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dZ=a("a"),XNr=o("from_pretrained()"),zNr=o(" class method or the "),cZ=a("a"),WNr=o("from_config()"),QNr=o(` class
method.`),HNr=l(),Nx=a("p"),UNr=o("This class cannot be instantiated directly using "),t4e=a("code"),JNr=o("__init__()"),YNr=o(" (throws an error)."),KNr=l(),Wt=a("div"),F(qx.$$.fragment),ZNr=l(),a4e=a("p"),eqr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oqr=l(),Jc=a("p"),rqr=o(`Note:
Loading a model from its configuration file does `),n4e=a("strong"),tqr=o("not"),aqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=a("a"),nqr=o("from_pretrained()"),sqr=o(" to load the model weights."),lqr=l(),F(a5.$$.fragment),iqr=l(),Vr=a("div"),F(jx.$$.fragment),dqr=l(),s4e=a("p"),cqr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fqr=l(),Tn=a("p"),mqr=o("The model class to instantiate is selected based on the "),l4e=a("code"),gqr=o("model_type"),hqr=o(` property of the config object (either
passed as an argument or loaded from `),i4e=a("code"),pqr=o("pretrained_model_name_or_path"),uqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d4e=a("code"),_qr=o("pretrained_model_name_or_path"),bqr=o(":"),vqr=l(),Ee=a("ul"),n5=a("li"),c4e=a("strong"),Fqr=o("albert"),Tqr=o(" \u2014 "),mZ=a("a"),Mqr=o("FlaxAlbertForPreTraining"),Eqr=o(" (ALBERT model)"),Cqr=l(),s5=a("li"),f4e=a("strong"),wqr=o("bart"),Aqr=o(" \u2014 "),gZ=a("a"),Lqr=o("FlaxBartForConditionalGeneration"),yqr=o(" (BART model)"),xqr=l(),l5=a("li"),m4e=a("strong"),$qr=o("bert"),kqr=o(" \u2014 "),hZ=a("a"),Sqr=o("FlaxBertForPreTraining"),Rqr=o(" (BERT model)"),Pqr=l(),i5=a("li"),g4e=a("strong"),Bqr=o("big_bird"),Iqr=o(" \u2014 "),pZ=a("a"),Nqr=o("FlaxBigBirdForPreTraining"),qqr=o(" (BigBird model)"),jqr=l(),d5=a("li"),h4e=a("strong"),Dqr=o("electra"),Gqr=o(" \u2014 "),uZ=a("a"),Oqr=o("FlaxElectraForPreTraining"),Vqr=o(" (ELECTRA model)"),Xqr=l(),c5=a("li"),p4e=a("strong"),zqr=o("longt5"),Wqr=o(" \u2014 "),_Z=a("a"),Qqr=o("FlaxLongT5ForConditionalGeneration"),Hqr=o(" (LongT5 model)"),Uqr=l(),f5=a("li"),u4e=a("strong"),Jqr=o("mbart"),Yqr=o(" \u2014 "),bZ=a("a"),Kqr=o("FlaxMBartForConditionalGeneration"),Zqr=o(" (mBART model)"),ejr=l(),m5=a("li"),_4e=a("strong"),ojr=o("mt5"),rjr=o(" \u2014 "),vZ=a("a"),tjr=o("FlaxMT5ForConditionalGeneration"),ajr=o(" (MT5 model)"),njr=l(),g5=a("li"),b4e=a("strong"),sjr=o("roberta"),ljr=o(" \u2014 "),FZ=a("a"),ijr=o("FlaxRobertaForMaskedLM"),djr=o(" (RoBERTa model)"),cjr=l(),h5=a("li"),v4e=a("strong"),fjr=o("roformer"),mjr=o(" \u2014 "),TZ=a("a"),gjr=o("FlaxRoFormerForMaskedLM"),hjr=o(" (RoFormer model)"),pjr=l(),p5=a("li"),F4e=a("strong"),ujr=o("t5"),_jr=o(" \u2014 "),MZ=a("a"),bjr=o("FlaxT5ForConditionalGeneration"),vjr=o(" (T5 model)"),Fjr=l(),u5=a("li"),T4e=a("strong"),Tjr=o("wav2vec2"),Mjr=o(" \u2014 "),EZ=a("a"),Ejr=o("FlaxWav2Vec2ForPreTraining"),Cjr=o(" (Wav2Vec2 model)"),wjr=l(),_5=a("li"),M4e=a("strong"),Ajr=o("xlm-roberta"),Ljr=o(" \u2014 "),CZ=a("a"),yjr=o("FlaxXLMRobertaForMaskedLM"),xjr=o(" (XLM-RoBERTa model)"),$jr=l(),F(b5.$$.fragment),KOe=l(),Yc=a("h2"),v5=a("a"),E4e=a("span"),F(Dx.$$.fragment),kjr=l(),C4e=a("span"),Sjr=o("FlaxAutoModelForMaskedLM"),ZOe=l(),ur=a("div"),F(Gx.$$.fragment),Rjr=l(),Kc=a("p"),Pjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wZ=a("a"),Bjr=o("from_pretrained()"),Ijr=o(" class method or the "),AZ=a("a"),Njr=o("from_config()"),qjr=o(` class
method.`),jjr=l(),Ox=a("p"),Djr=o("This class cannot be instantiated directly using "),w4e=a("code"),Gjr=o("__init__()"),Ojr=o(" (throws an error)."),Vjr=l(),Qt=a("div"),F(Vx.$$.fragment),Xjr=l(),A4e=a("p"),zjr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Wjr=l(),Zc=a("p"),Qjr=o(`Note:
Loading a model from its configuration file does `),L4e=a("strong"),Hjr=o("not"),Ujr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LZ=a("a"),Jjr=o("from_pretrained()"),Yjr=o(" to load the model weights."),Kjr=l(),F(F5.$$.fragment),Zjr=l(),Xr=a("div"),F(Xx.$$.fragment),eDr=l(),y4e=a("p"),oDr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rDr=l(),Mn=a("p"),tDr=o("The model class to instantiate is selected based on the "),x4e=a("code"),aDr=o("model_type"),nDr=o(` property of the config object (either
passed as an argument or loaded from `),$4e=a("code"),sDr=o("pretrained_model_name_or_path"),lDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=a("code"),iDr=o("pretrained_model_name_or_path"),dDr=o(":"),cDr=l(),$e=a("ul"),T5=a("li"),S4e=a("strong"),fDr=o("albert"),mDr=o(" \u2014 "),yZ=a("a"),gDr=o("FlaxAlbertForMaskedLM"),hDr=o(" (ALBERT model)"),pDr=l(),M5=a("li"),R4e=a("strong"),uDr=o("bart"),_Dr=o(" \u2014 "),xZ=a("a"),bDr=o("FlaxBartForConditionalGeneration"),vDr=o(" (BART model)"),FDr=l(),E5=a("li"),P4e=a("strong"),TDr=o("bert"),MDr=o(" \u2014 "),$Z=a("a"),EDr=o("FlaxBertForMaskedLM"),CDr=o(" (BERT model)"),wDr=l(),C5=a("li"),B4e=a("strong"),ADr=o("big_bird"),LDr=o(" \u2014 "),kZ=a("a"),yDr=o("FlaxBigBirdForMaskedLM"),xDr=o(" (BigBird model)"),$Dr=l(),w5=a("li"),I4e=a("strong"),kDr=o("distilbert"),SDr=o(" \u2014 "),SZ=a("a"),RDr=o("FlaxDistilBertForMaskedLM"),PDr=o(" (DistilBERT model)"),BDr=l(),A5=a("li"),N4e=a("strong"),IDr=o("electra"),NDr=o(" \u2014 "),RZ=a("a"),qDr=o("FlaxElectraForMaskedLM"),jDr=o(" (ELECTRA model)"),DDr=l(),L5=a("li"),q4e=a("strong"),GDr=o("mbart"),ODr=o(" \u2014 "),PZ=a("a"),VDr=o("FlaxMBartForConditionalGeneration"),XDr=o(" (mBART model)"),zDr=l(),y5=a("li"),j4e=a("strong"),WDr=o("roberta"),QDr=o(" \u2014 "),BZ=a("a"),HDr=o("FlaxRobertaForMaskedLM"),UDr=o(" (RoBERTa model)"),JDr=l(),x5=a("li"),D4e=a("strong"),YDr=o("roformer"),KDr=o(" \u2014 "),IZ=a("a"),ZDr=o("FlaxRoFormerForMaskedLM"),eGr=o(" (RoFormer model)"),oGr=l(),$5=a("li"),G4e=a("strong"),rGr=o("xlm-roberta"),tGr=o(" \u2014 "),NZ=a("a"),aGr=o("FlaxXLMRobertaForMaskedLM"),nGr=o(" (XLM-RoBERTa model)"),sGr=l(),F(k5.$$.fragment),eVe=l(),ef=a("h2"),S5=a("a"),O4e=a("span"),F(zx.$$.fragment),lGr=l(),V4e=a("span"),iGr=o("FlaxAutoModelForSeq2SeqLM"),oVe=l(),_r=a("div"),F(Wx.$$.fragment),dGr=l(),of=a("p"),cGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qZ=a("a"),fGr=o("from_pretrained()"),mGr=o(" class method or the "),jZ=a("a"),gGr=o("from_config()"),hGr=o(` class
method.`),pGr=l(),Qx=a("p"),uGr=o("This class cannot be instantiated directly using "),X4e=a("code"),_Gr=o("__init__()"),bGr=o(" (throws an error)."),vGr=l(),Ht=a("div"),F(Hx.$$.fragment),FGr=l(),z4e=a("p"),TGr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),MGr=l(),rf=a("p"),EGr=o(`Note:
Loading a model from its configuration file does `),W4e=a("strong"),CGr=o("not"),wGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=a("a"),AGr=o("from_pretrained()"),LGr=o(" to load the model weights."),yGr=l(),F(R5.$$.fragment),xGr=l(),zr=a("div"),F(Ux.$$.fragment),$Gr=l(),Q4e=a("p"),kGr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SGr=l(),En=a("p"),RGr=o("The model class to instantiate is selected based on the "),H4e=a("code"),PGr=o("model_type"),BGr=o(` property of the config object (either
passed as an argument or loaded from `),U4e=a("code"),IGr=o("pretrained_model_name_or_path"),NGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=a("code"),qGr=o("pretrained_model_name_or_path"),jGr=o(":"),DGr=l(),ke=a("ul"),P5=a("li"),Y4e=a("strong"),GGr=o("bart"),OGr=o(" \u2014 "),GZ=a("a"),VGr=o("FlaxBartForConditionalGeneration"),XGr=o(" (BART model)"),zGr=l(),B5=a("li"),K4e=a("strong"),WGr=o("blenderbot"),QGr=o(" \u2014 "),OZ=a("a"),HGr=o("FlaxBlenderbotForConditionalGeneration"),UGr=o(" (Blenderbot model)"),JGr=l(),I5=a("li"),Z4e=a("strong"),YGr=o("blenderbot-small"),KGr=o(" \u2014 "),VZ=a("a"),ZGr=o("FlaxBlenderbotSmallForConditionalGeneration"),eOr=o(" (BlenderbotSmall model)"),oOr=l(),N5=a("li"),eCe=a("strong"),rOr=o("encoder-decoder"),tOr=o(" \u2014 "),XZ=a("a"),aOr=o("FlaxEncoderDecoderModel"),nOr=o(" (Encoder decoder model)"),sOr=l(),q5=a("li"),oCe=a("strong"),lOr=o("longt5"),iOr=o(" \u2014 "),zZ=a("a"),dOr=o("FlaxLongT5ForConditionalGeneration"),cOr=o(" (LongT5 model)"),fOr=l(),j5=a("li"),rCe=a("strong"),mOr=o("marian"),gOr=o(" \u2014 "),WZ=a("a"),hOr=o("FlaxMarianMTModel"),pOr=o(" (Marian model)"),uOr=l(),D5=a("li"),tCe=a("strong"),_Or=o("mbart"),bOr=o(" \u2014 "),QZ=a("a"),vOr=o("FlaxMBartForConditionalGeneration"),FOr=o(" (mBART model)"),TOr=l(),G5=a("li"),aCe=a("strong"),MOr=o("mt5"),EOr=o(" \u2014 "),HZ=a("a"),COr=o("FlaxMT5ForConditionalGeneration"),wOr=o(" (MT5 model)"),AOr=l(),O5=a("li"),nCe=a("strong"),LOr=o("pegasus"),yOr=o(" \u2014 "),UZ=a("a"),xOr=o("FlaxPegasusForConditionalGeneration"),$Or=o(" (Pegasus model)"),kOr=l(),V5=a("li"),sCe=a("strong"),SOr=o("t5"),ROr=o(" \u2014 "),JZ=a("a"),POr=o("FlaxT5ForConditionalGeneration"),BOr=o(" (T5 model)"),IOr=l(),F(X5.$$.fragment),rVe=l(),tf=a("h2"),z5=a("a"),lCe=a("span"),F(Jx.$$.fragment),NOr=l(),iCe=a("span"),qOr=o("FlaxAutoModelForSequenceClassification"),tVe=l(),br=a("div"),F(Yx.$$.fragment),jOr=l(),af=a("p"),DOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YZ=a("a"),GOr=o("from_pretrained()"),OOr=o(" class method or the "),KZ=a("a"),VOr=o("from_config()"),XOr=o(` class
method.`),zOr=l(),Kx=a("p"),WOr=o("This class cannot be instantiated directly using "),dCe=a("code"),QOr=o("__init__()"),HOr=o(" (throws an error)."),UOr=l(),Ut=a("div"),F(Zx.$$.fragment),JOr=l(),cCe=a("p"),YOr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KOr=l(),nf=a("p"),ZOr=o(`Note:
Loading a model from its configuration file does `),fCe=a("strong"),eVr=o("not"),oVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZZ=a("a"),rVr=o("from_pretrained()"),tVr=o(" to load the model weights."),aVr=l(),F(W5.$$.fragment),nVr=l(),Wr=a("div"),F(e$.$$.fragment),sVr=l(),mCe=a("p"),lVr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iVr=l(),Cn=a("p"),dVr=o("The model class to instantiate is selected based on the "),gCe=a("code"),cVr=o("model_type"),fVr=o(` property of the config object (either
passed as an argument or loaded from `),hCe=a("code"),mVr=o("pretrained_model_name_or_path"),gVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pCe=a("code"),hVr=o("pretrained_model_name_or_path"),pVr=o(":"),uVr=l(),Se=a("ul"),Q5=a("li"),uCe=a("strong"),_Vr=o("albert"),bVr=o(" \u2014 "),eee=a("a"),vVr=o("FlaxAlbertForSequenceClassification"),FVr=o(" (ALBERT model)"),TVr=l(),H5=a("li"),_Ce=a("strong"),MVr=o("bart"),EVr=o(" \u2014 "),oee=a("a"),CVr=o("FlaxBartForSequenceClassification"),wVr=o(" (BART model)"),AVr=l(),U5=a("li"),bCe=a("strong"),LVr=o("bert"),yVr=o(" \u2014 "),ree=a("a"),xVr=o("FlaxBertForSequenceClassification"),$Vr=o(" (BERT model)"),kVr=l(),J5=a("li"),vCe=a("strong"),SVr=o("big_bird"),RVr=o(" \u2014 "),tee=a("a"),PVr=o("FlaxBigBirdForSequenceClassification"),BVr=o(" (BigBird model)"),IVr=l(),Y5=a("li"),FCe=a("strong"),NVr=o("distilbert"),qVr=o(" \u2014 "),aee=a("a"),jVr=o("FlaxDistilBertForSequenceClassification"),DVr=o(" (DistilBERT model)"),GVr=l(),K5=a("li"),TCe=a("strong"),OVr=o("electra"),VVr=o(" \u2014 "),nee=a("a"),XVr=o("FlaxElectraForSequenceClassification"),zVr=o(" (ELECTRA model)"),WVr=l(),Z5=a("li"),MCe=a("strong"),QVr=o("mbart"),HVr=o(" \u2014 "),see=a("a"),UVr=o("FlaxMBartForSequenceClassification"),JVr=o(" (mBART model)"),YVr=l(),e3=a("li"),ECe=a("strong"),KVr=o("roberta"),ZVr=o(" \u2014 "),lee=a("a"),eXr=o("FlaxRobertaForSequenceClassification"),oXr=o(" (RoBERTa model)"),rXr=l(),o3=a("li"),CCe=a("strong"),tXr=o("roformer"),aXr=o(" \u2014 "),iee=a("a"),nXr=o("FlaxRoFormerForSequenceClassification"),sXr=o(" (RoFormer model)"),lXr=l(),r3=a("li"),wCe=a("strong"),iXr=o("xlm-roberta"),dXr=o(" \u2014 "),dee=a("a"),cXr=o("FlaxXLMRobertaForSequenceClassification"),fXr=o(" (XLM-RoBERTa model)"),mXr=l(),F(t3.$$.fragment),aVe=l(),sf=a("h2"),a3=a("a"),ACe=a("span"),F(o$.$$.fragment),gXr=l(),LCe=a("span"),hXr=o("FlaxAutoModelForQuestionAnswering"),nVe=l(),vr=a("div"),F(r$.$$.fragment),pXr=l(),lf=a("p"),uXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cee=a("a"),_Xr=o("from_pretrained()"),bXr=o(" class method or the "),fee=a("a"),vXr=o("from_config()"),FXr=o(` class
method.`),TXr=l(),t$=a("p"),MXr=o("This class cannot be instantiated directly using "),yCe=a("code"),EXr=o("__init__()"),CXr=o(" (throws an error)."),wXr=l(),Jt=a("div"),F(a$.$$.fragment),AXr=l(),xCe=a("p"),LXr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yXr=l(),df=a("p"),xXr=o(`Note:
Loading a model from its configuration file does `),$Ce=a("strong"),$Xr=o("not"),kXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=a("a"),SXr=o("from_pretrained()"),RXr=o(" to load the model weights."),PXr=l(),F(n3.$$.fragment),BXr=l(),Qr=a("div"),F(n$.$$.fragment),IXr=l(),kCe=a("p"),NXr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qXr=l(),wn=a("p"),jXr=o("The model class to instantiate is selected based on the "),SCe=a("code"),DXr=o("model_type"),GXr=o(` property of the config object (either
passed as an argument or loaded from `),RCe=a("code"),OXr=o("pretrained_model_name_or_path"),VXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=a("code"),XXr=o("pretrained_model_name_or_path"),zXr=o(":"),WXr=l(),Re=a("ul"),s3=a("li"),BCe=a("strong"),QXr=o("albert"),HXr=o(" \u2014 "),gee=a("a"),UXr=o("FlaxAlbertForQuestionAnswering"),JXr=o(" (ALBERT model)"),YXr=l(),l3=a("li"),ICe=a("strong"),KXr=o("bart"),ZXr=o(" \u2014 "),hee=a("a"),ezr=o("FlaxBartForQuestionAnswering"),ozr=o(" (BART model)"),rzr=l(),i3=a("li"),NCe=a("strong"),tzr=o("bert"),azr=o(" \u2014 "),pee=a("a"),nzr=o("FlaxBertForQuestionAnswering"),szr=o(" (BERT model)"),lzr=l(),d3=a("li"),qCe=a("strong"),izr=o("big_bird"),dzr=o(" \u2014 "),uee=a("a"),czr=o("FlaxBigBirdForQuestionAnswering"),fzr=o(" (BigBird model)"),mzr=l(),c3=a("li"),jCe=a("strong"),gzr=o("distilbert"),hzr=o(" \u2014 "),_ee=a("a"),pzr=o("FlaxDistilBertForQuestionAnswering"),uzr=o(" (DistilBERT model)"),_zr=l(),f3=a("li"),DCe=a("strong"),bzr=o("electra"),vzr=o(" \u2014 "),bee=a("a"),Fzr=o("FlaxElectraForQuestionAnswering"),Tzr=o(" (ELECTRA model)"),Mzr=l(),m3=a("li"),GCe=a("strong"),Ezr=o("mbart"),Czr=o(" \u2014 "),vee=a("a"),wzr=o("FlaxMBartForQuestionAnswering"),Azr=o(" (mBART model)"),Lzr=l(),g3=a("li"),OCe=a("strong"),yzr=o("roberta"),xzr=o(" \u2014 "),Fee=a("a"),$zr=o("FlaxRobertaForQuestionAnswering"),kzr=o(" (RoBERTa model)"),Szr=l(),h3=a("li"),VCe=a("strong"),Rzr=o("roformer"),Pzr=o(" \u2014 "),Tee=a("a"),Bzr=o("FlaxRoFormerForQuestionAnswering"),Izr=o(" (RoFormer model)"),Nzr=l(),p3=a("li"),XCe=a("strong"),qzr=o("xlm-roberta"),jzr=o(" \u2014 "),Mee=a("a"),Dzr=o("FlaxXLMRobertaForQuestionAnswering"),Gzr=o(" (XLM-RoBERTa model)"),Ozr=l(),F(u3.$$.fragment),sVe=l(),cf=a("h2"),_3=a("a"),zCe=a("span"),F(s$.$$.fragment),Vzr=l(),WCe=a("span"),Xzr=o("FlaxAutoModelForTokenClassification"),lVe=l(),Fr=a("div"),F(l$.$$.fragment),zzr=l(),ff=a("p"),Wzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Eee=a("a"),Qzr=o("from_pretrained()"),Hzr=o(" class method or the "),Cee=a("a"),Uzr=o("from_config()"),Jzr=o(` class
method.`),Yzr=l(),i$=a("p"),Kzr=o("This class cannot be instantiated directly using "),QCe=a("code"),Zzr=o("__init__()"),eWr=o(" (throws an error)."),oWr=l(),Yt=a("div"),F(d$.$$.fragment),rWr=l(),HCe=a("p"),tWr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),aWr=l(),mf=a("p"),nWr=o(`Note:
Loading a model from its configuration file does `),UCe=a("strong"),sWr=o("not"),lWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wee=a("a"),iWr=o("from_pretrained()"),dWr=o(" to load the model weights."),cWr=l(),F(b3.$$.fragment),fWr=l(),Hr=a("div"),F(c$.$$.fragment),mWr=l(),JCe=a("p"),gWr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hWr=l(),An=a("p"),pWr=o("The model class to instantiate is selected based on the "),YCe=a("code"),uWr=o("model_type"),_Wr=o(` property of the config object (either
passed as an argument or loaded from `),KCe=a("code"),bWr=o("pretrained_model_name_or_path"),vWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=a("code"),FWr=o("pretrained_model_name_or_path"),TWr=o(":"),MWr=l(),Ve=a("ul"),v3=a("li"),e5e=a("strong"),EWr=o("albert"),CWr=o(" \u2014 "),Aee=a("a"),wWr=o("FlaxAlbertForTokenClassification"),AWr=o(" (ALBERT model)"),LWr=l(),F3=a("li"),o5e=a("strong"),yWr=o("bert"),xWr=o(" \u2014 "),Lee=a("a"),$Wr=o("FlaxBertForTokenClassification"),kWr=o(" (BERT model)"),SWr=l(),T3=a("li"),r5e=a("strong"),RWr=o("big_bird"),PWr=o(" \u2014 "),yee=a("a"),BWr=o("FlaxBigBirdForTokenClassification"),IWr=o(" (BigBird model)"),NWr=l(),M3=a("li"),t5e=a("strong"),qWr=o("distilbert"),jWr=o(" \u2014 "),xee=a("a"),DWr=o("FlaxDistilBertForTokenClassification"),GWr=o(" (DistilBERT model)"),OWr=l(),E3=a("li"),a5e=a("strong"),VWr=o("electra"),XWr=o(" \u2014 "),$ee=a("a"),zWr=o("FlaxElectraForTokenClassification"),WWr=o(" (ELECTRA model)"),QWr=l(),C3=a("li"),n5e=a("strong"),HWr=o("roberta"),UWr=o(" \u2014 "),kee=a("a"),JWr=o("FlaxRobertaForTokenClassification"),YWr=o(" (RoBERTa model)"),KWr=l(),w3=a("li"),s5e=a("strong"),ZWr=o("roformer"),eQr=o(" \u2014 "),See=a("a"),oQr=o("FlaxRoFormerForTokenClassification"),rQr=o(" (RoFormer model)"),tQr=l(),A3=a("li"),l5e=a("strong"),aQr=o("xlm-roberta"),nQr=o(" \u2014 "),Ree=a("a"),sQr=o("FlaxXLMRobertaForTokenClassification"),lQr=o(" (XLM-RoBERTa model)"),iQr=l(),F(L3.$$.fragment),iVe=l(),gf=a("h2"),y3=a("a"),i5e=a("span"),F(f$.$$.fragment),dQr=l(),d5e=a("span"),cQr=o("FlaxAutoModelForMultipleChoice"),dVe=l(),Tr=a("div"),F(m$.$$.fragment),fQr=l(),hf=a("p"),mQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Pee=a("a"),gQr=o("from_pretrained()"),hQr=o(" class method or the "),Bee=a("a"),pQr=o("from_config()"),uQr=o(` class
method.`),_Qr=l(),g$=a("p"),bQr=o("This class cannot be instantiated directly using "),c5e=a("code"),vQr=o("__init__()"),FQr=o(" (throws an error)."),TQr=l(),Kt=a("div"),F(h$.$$.fragment),MQr=l(),f5e=a("p"),EQr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),CQr=l(),pf=a("p"),wQr=o(`Note:
Loading a model from its configuration file does `),m5e=a("strong"),AQr=o("not"),LQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iee=a("a"),yQr=o("from_pretrained()"),xQr=o(" to load the model weights."),$Qr=l(),F(x3.$$.fragment),kQr=l(),Ur=a("div"),F(p$.$$.fragment),SQr=l(),g5e=a("p"),RQr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),PQr=l(),Ln=a("p"),BQr=o("The model class to instantiate is selected based on the "),h5e=a("code"),IQr=o("model_type"),NQr=o(` property of the config object (either
passed as an argument or loaded from `),p5e=a("code"),qQr=o("pretrained_model_name_or_path"),jQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=a("code"),DQr=o("pretrained_model_name_or_path"),GQr=o(":"),OQr=l(),Xe=a("ul"),$3=a("li"),_5e=a("strong"),VQr=o("albert"),XQr=o(" \u2014 "),Nee=a("a"),zQr=o("FlaxAlbertForMultipleChoice"),WQr=o(" (ALBERT model)"),QQr=l(),k3=a("li"),b5e=a("strong"),HQr=o("bert"),UQr=o(" \u2014 "),qee=a("a"),JQr=o("FlaxBertForMultipleChoice"),YQr=o(" (BERT model)"),KQr=l(),S3=a("li"),v5e=a("strong"),ZQr=o("big_bird"),eHr=o(" \u2014 "),jee=a("a"),oHr=o("FlaxBigBirdForMultipleChoice"),rHr=o(" (BigBird model)"),tHr=l(),R3=a("li"),F5e=a("strong"),aHr=o("distilbert"),nHr=o(" \u2014 "),Dee=a("a"),sHr=o("FlaxDistilBertForMultipleChoice"),lHr=o(" (DistilBERT model)"),iHr=l(),P3=a("li"),T5e=a("strong"),dHr=o("electra"),cHr=o(" \u2014 "),Gee=a("a"),fHr=o("FlaxElectraForMultipleChoice"),mHr=o(" (ELECTRA model)"),gHr=l(),B3=a("li"),M5e=a("strong"),hHr=o("roberta"),pHr=o(" \u2014 "),Oee=a("a"),uHr=o("FlaxRobertaForMultipleChoice"),_Hr=o(" (RoBERTa model)"),bHr=l(),I3=a("li"),E5e=a("strong"),vHr=o("roformer"),FHr=o(" \u2014 "),Vee=a("a"),THr=o("FlaxRoFormerForMultipleChoice"),MHr=o(" (RoFormer model)"),EHr=l(),N3=a("li"),C5e=a("strong"),CHr=o("xlm-roberta"),wHr=o(" \u2014 "),Xee=a("a"),AHr=o("FlaxXLMRobertaForMultipleChoice"),LHr=o(" (XLM-RoBERTa model)"),yHr=l(),F(q3.$$.fragment),cVe=l(),uf=a("h2"),j3=a("a"),w5e=a("span"),F(u$.$$.fragment),xHr=l(),A5e=a("span"),$Hr=o("FlaxAutoModelForNextSentencePrediction"),fVe=l(),Mr=a("div"),F(_$.$$.fragment),kHr=l(),_f=a("p"),SHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zee=a("a"),RHr=o("from_pretrained()"),PHr=o(" class method or the "),Wee=a("a"),BHr=o("from_config()"),IHr=o(` class
method.`),NHr=l(),b$=a("p"),qHr=o("This class cannot be instantiated directly using "),L5e=a("code"),jHr=o("__init__()"),DHr=o(" (throws an error)."),GHr=l(),Zt=a("div"),F(v$.$$.fragment),OHr=l(),y5e=a("p"),VHr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),XHr=l(),bf=a("p"),zHr=o(`Note:
Loading a model from its configuration file does `),x5e=a("strong"),WHr=o("not"),QHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=a("a"),HHr=o("from_pretrained()"),UHr=o(" to load the model weights."),JHr=l(),F(D3.$$.fragment),YHr=l(),Jr=a("div"),F(F$.$$.fragment),KHr=l(),$5e=a("p"),ZHr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),eUr=l(),yn=a("p"),oUr=o("The model class to instantiate is selected based on the "),k5e=a("code"),rUr=o("model_type"),tUr=o(` property of the config object (either
passed as an argument or loaded from `),S5e=a("code"),aUr=o("pretrained_model_name_or_path"),nUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=a("code"),sUr=o("pretrained_model_name_or_path"),lUr=o(":"),iUr=l(),P5e=a("ul"),G3=a("li"),B5e=a("strong"),dUr=o("bert"),cUr=o(" \u2014 "),Hee=a("a"),fUr=o("FlaxBertForNextSentencePrediction"),mUr=o(" (BERT model)"),gUr=l(),F(O3.$$.fragment),mVe=l(),vf=a("h2"),V3=a("a"),I5e=a("span"),F(T$.$$.fragment),hUr=l(),N5e=a("span"),pUr=o("FlaxAutoModelForImageClassification"),gVe=l(),Er=a("div"),F(M$.$$.fragment),uUr=l(),Ff=a("p"),_Ur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Uee=a("a"),bUr=o("from_pretrained()"),vUr=o(" class method or the "),Jee=a("a"),FUr=o("from_config()"),TUr=o(` class
method.`),MUr=l(),E$=a("p"),EUr=o("This class cannot be instantiated directly using "),q5e=a("code"),CUr=o("__init__()"),wUr=o(" (throws an error)."),AUr=l(),ea=a("div"),F(C$.$$.fragment),LUr=l(),j5e=a("p"),yUr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xUr=l(),Tf=a("p"),$Ur=o(`Note:
Loading a model from its configuration file does `),D5e=a("strong"),kUr=o("not"),SUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=a("a"),RUr=o("from_pretrained()"),PUr=o(" to load the model weights."),BUr=l(),F(X3.$$.fragment),IUr=l(),Yr=a("div"),F(w$.$$.fragment),NUr=l(),G5e=a("p"),qUr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jUr=l(),xn=a("p"),DUr=o("The model class to instantiate is selected based on the "),O5e=a("code"),GUr=o("model_type"),OUr=o(` property of the config object (either
passed as an argument or loaded from `),V5e=a("code"),VUr=o("pretrained_model_name_or_path"),XUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=a("code"),zUr=o("pretrained_model_name_or_path"),WUr=o(":"),QUr=l(),A$=a("ul"),z3=a("li"),z5e=a("strong"),HUr=o("beit"),UUr=o(" \u2014 "),Kee=a("a"),JUr=o("FlaxBeitForImageClassification"),YUr=o(" (BEiT model)"),KUr=l(),W3=a("li"),W5e=a("strong"),ZUr=o("vit"),eJr=o(" \u2014 "),Zee=a("a"),oJr=o("FlaxViTForImageClassification"),rJr=o(" (ViT model)"),tJr=l(),F(Q3.$$.fragment),hVe=l(),Mf=a("h2"),H3=a("a"),Q5e=a("span"),F(L$.$$.fragment),aJr=l(),H5e=a("span"),nJr=o("FlaxAutoModelForVision2Seq"),pVe=l(),Cr=a("div"),F(y$.$$.fragment),sJr=l(),Ef=a("p"),lJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eoe=a("a"),iJr=o("from_pretrained()"),dJr=o(" class method or the "),ooe=a("a"),cJr=o("from_config()"),fJr=o(` class
method.`),mJr=l(),x$=a("p"),gJr=o("This class cannot be instantiated directly using "),U5e=a("code"),hJr=o("__init__()"),pJr=o(" (throws an error)."),uJr=l(),oa=a("div"),F($$.$$.fragment),_Jr=l(),J5e=a("p"),bJr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vJr=l(),Cf=a("p"),FJr=o(`Note:
Loading a model from its configuration file does `),Y5e=a("strong"),TJr=o("not"),MJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),roe=a("a"),EJr=o("from_pretrained()"),CJr=o(" to load the model weights."),wJr=l(),F(U3.$$.fragment),AJr=l(),Kr=a("div"),F(k$.$$.fragment),LJr=l(),K5e=a("p"),yJr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xJr=l(),$n=a("p"),$Jr=o("The model class to instantiate is selected based on the "),Z5e=a("code"),kJr=o("model_type"),SJr=o(` property of the config object (either
passed as an argument or loaded from `),e3e=a("code"),RJr=o("pretrained_model_name_or_path"),PJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o3e=a("code"),BJr=o("pretrained_model_name_or_path"),IJr=o(":"),NJr=l(),r3e=a("ul"),J3=a("li"),t3e=a("strong"),qJr=o("vision-encoder-decoder"),jJr=o(" \u2014 "),toe=a("a"),DJr=o("FlaxVisionEncoderDecoderModel"),GJr=o(" (Vision Encoder decoder model)"),OJr=l(),F(Y3.$$.fragment),this.h()},l(f){const _=Zqt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var S$=s(p);m=n(S$,"A",{id:!0,class:!0,href:!0});var a3e=s(m);u=n(a3e,"SPAN",{});var n3e=s(u);T(d.$$.fragment,n3e),n3e.forEach(t),a3e.forEach(t),h=i(S$),Eo=n(S$,"SPAN",{});var s3e=s(Eo);Ti=r(s3e,"Auto Classes"),s3e.forEach(t),S$.forEach(t),yf=i(f),at=n(f,"P",{});var R$=s(at);Mi=r(R$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ei=n(R$,"CODE",{});var l3e=s(Ei);b6=r(l3e,"from_pretrained()"),l3e.forEach(t),xf=r(R$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),R$.forEach(t),Oe=i(f),We=n(f,"P",{});var kn=s(We);Ci=r(kn,"Instantiating one of "),Sn=n(kn,"A",{href:!0});var i3e=s(Sn);v6=r(i3e,"AutoConfig"),i3e.forEach(t),Rn=r(kn,", "),Pn=n(kn,"A",{href:!0});var d3e=s(Pn);F6=r(d3e,"AutoModel"),d3e.forEach(t),wi=r(kn,`, and
`),Bn=n(kn,"A",{href:!0});var c3e=s(Bn);T6=r(c3e,"AutoTokenizer"),c3e.forEach(t),Ai=r(kn," will directly create a class of the relevant architecture. For instance"),kn.forEach(t),$f=i(f),T(ya.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var P$=s(Ae);Uk=r(P$,"will create a model that is an instance of "),Li=n(P$,"A",{href:!0});var f3e=s(Li);Jk=r(f3e,"BertModel"),f3e.forEach(t),Yk=r(P$,"."),P$.forEach(t),Co=i(f),xa=n(f,"P",{});var B$=s(xa);Kk=r(B$,"There is one class of "),kf=n(B$,"CODE",{});var m3e=s(kf);Zk=r(m3e,"AutoModel"),m3e.forEach(t),Aze=r(B$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),B$.forEach(t),fGe=i(f),yi=n(f,"H2",{class:!0});var I$=s(yi);Sf=n(I$,"A",{id:!0,class:!0,href:!0});var g3e=s(Sf);Kre=n(g3e,"SPAN",{});var h3e=s(Kre);T(M6.$$.fragment,h3e),h3e.forEach(t),g3e.forEach(t),Lze=i(I$),Zre=n(I$,"SPAN",{});var p3e=s(Zre);yze=r(p3e,"Extending the Auto Classes"),p3e.forEach(t),I$.forEach(t),mGe=i(f),In=n(f,"P",{});var wf=s(In);xze=r(wf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ete=n(wf,"CODE",{});var u3e=s(ete);$ze=r(u3e,"NewModel"),u3e.forEach(t),kze=r(wf,", make sure you have a "),ote=n(wf,"CODE",{});var _3e=s(ote);Sze=r(_3e,"NewModelConfig"),_3e.forEach(t),Rze=r(wf,` then you can add those to the auto
classes like this:`),wf.forEach(t),gGe=i(f),T(E6.$$.fragment,f),hGe=i(f),eS=n(f,"P",{});var b3e=s(eS);Pze=r(b3e,"You will then be able to use the auto classes like you would usually do!"),b3e.forEach(t),pGe=i(f),T(Rf.$$.fragment,f),uGe=i(f),xi=n(f,"H2",{class:!0});var N$=s(xi);Pf=n(N$,"A",{id:!0,class:!0,href:!0});var v3e=s(Pf);rte=n(v3e,"SPAN",{});var F3e=s(rte);T(C6.$$.fragment,F3e),F3e.forEach(t),v3e.forEach(t),Bze=i(N$),tte=n(N$,"SPAN",{});var T3e=s(tte);Ize=r(T3e,"AutoConfig"),T3e.forEach(t),N$.forEach(t),_Ge=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(w6.$$.fragment,rt),Nze=i(rt),A6=n(rt,"P",{});var q$=s(A6);qze=r(q$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),oS=n(q$,"A",{href:!0});var M3e=s(oS);jze=r(M3e,"from_pretrained()"),M3e.forEach(t),Dze=r(q$," class method."),q$.forEach(t),Gze=i(rt),L6=n(rt,"P",{});var j$=s(L6);Oze=r(j$,"This class cannot be instantiated directly using "),ate=n(j$,"CODE",{});var E3e=s(ate);Vze=r(E3e,"__init__()"),E3e.forEach(t),Xze=r(j$," (throws an error)."),j$.forEach(t),zze=i(rt),wr=n(rt,"DIV",{class:!0});var tt=s(wr);T(y6.$$.fragment,tt),Wze=i(tt),nte=n(tt,"P",{});var C3e=s(nte);Qze=r(C3e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),C3e.forEach(t),Hze=i(tt),$i=n(tt,"P",{});var Af=s($i);Uze=r(Af,"The configuration class to instantiate is selected based on the "),ste=n(Af,"CODE",{});var w3e=s(ste);Jze=r(w3e,"model_type"),w3e.forEach(t),Yze=r(Af,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),lte=n(Af,"CODE",{});var A3e=s(lte);Kze=r(A3e,"pretrained_model_name_or_path"),A3e.forEach(t),Zze=r(Af,":"),Af.forEach(t),eWe=i(tt),A=n(tt,"UL",{});var L=s(A);Bf=n(L,"LI",{});var K3=s(Bf);ite=n(K3,"STRONG",{});var L3e=s(ite);oWe=r(L3e,"albert"),L3e.forEach(t),rWe=r(K3," \u2014 "),rS=n(K3,"A",{href:!0});var y3e=s(rS);tWe=r(y3e,"AlbertConfig"),y3e.forEach(t),aWe=r(K3," (ALBERT model)"),K3.forEach(t),nWe=i(L),If=n(L,"LI",{});var Z3=s(If);dte=n(Z3,"STRONG",{});var x3e=s(dte);sWe=r(x3e,"bart"),x3e.forEach(t),lWe=r(Z3," \u2014 "),tS=n(Z3,"A",{href:!0});var $3e=s(tS);iWe=r($3e,"BartConfig"),$3e.forEach(t),dWe=r(Z3," (BART model)"),Z3.forEach(t),cWe=i(L),Nf=n(L,"LI",{});var ew=s(Nf);cte=n(ew,"STRONG",{});var k3e=s(cte);fWe=r(k3e,"beit"),k3e.forEach(t),mWe=r(ew," \u2014 "),aS=n(ew,"A",{href:!0});var S3e=s(aS);gWe=r(S3e,"BeitConfig"),S3e.forEach(t),hWe=r(ew," (BEiT model)"),ew.forEach(t),pWe=i(L),qf=n(L,"LI",{});var ow=s(qf);fte=n(ow,"STRONG",{});var R3e=s(fte);uWe=r(R3e,"bert"),R3e.forEach(t),_We=r(ow," \u2014 "),nS=n(ow,"A",{href:!0});var P3e=s(nS);bWe=r(P3e,"BertConfig"),P3e.forEach(t),vWe=r(ow," (BERT model)"),ow.forEach(t),FWe=i(L),jf=n(L,"LI",{});var rw=s(jf);mte=n(rw,"STRONG",{});var B3e=s(mte);TWe=r(B3e,"bert-generation"),B3e.forEach(t),MWe=r(rw," \u2014 "),sS=n(rw,"A",{href:!0});var I3e=s(sS);EWe=r(I3e,"BertGenerationConfig"),I3e.forEach(t),CWe=r(rw," (Bert Generation model)"),rw.forEach(t),wWe=i(L),Df=n(L,"LI",{});var tw=s(Df);gte=n(tw,"STRONG",{});var N3e=s(gte);AWe=r(N3e,"big_bird"),N3e.forEach(t),LWe=r(tw," \u2014 "),lS=n(tw,"A",{href:!0});var q3e=s(lS);yWe=r(q3e,"BigBirdConfig"),q3e.forEach(t),xWe=r(tw," (BigBird model)"),tw.forEach(t),$We=i(L),Gf=n(L,"LI",{});var aw=s(Gf);hte=n(aw,"STRONG",{});var j3e=s(hte);kWe=r(j3e,"bigbird_pegasus"),j3e.forEach(t),SWe=r(aw," \u2014 "),iS=n(aw,"A",{href:!0});var D3e=s(iS);RWe=r(D3e,"BigBirdPegasusConfig"),D3e.forEach(t),PWe=r(aw," (BigBird-Pegasus model)"),aw.forEach(t),BWe=i(L),Of=n(L,"LI",{});var nw=s(Of);pte=n(nw,"STRONG",{});var G3e=s(pte);IWe=r(G3e,"blenderbot"),G3e.forEach(t),NWe=r(nw," \u2014 "),dS=n(nw,"A",{href:!0});var O3e=s(dS);qWe=r(O3e,"BlenderbotConfig"),O3e.forEach(t),jWe=r(nw," (Blenderbot model)"),nw.forEach(t),DWe=i(L),Vf=n(L,"LI",{});var sw=s(Vf);ute=n(sw,"STRONG",{});var V3e=s(ute);GWe=r(V3e,"blenderbot-small"),V3e.forEach(t),OWe=r(sw," \u2014 "),cS=n(sw,"A",{href:!0});var X3e=s(cS);VWe=r(X3e,"BlenderbotSmallConfig"),X3e.forEach(t),XWe=r(sw," (BlenderbotSmall model)"),sw.forEach(t),zWe=i(L),Xf=n(L,"LI",{});var lw=s(Xf);_te=n(lw,"STRONG",{});var z3e=s(_te);WWe=r(z3e,"bloom"),z3e.forEach(t),QWe=r(lw," \u2014 "),fS=n(lw,"A",{href:!0});var W3e=s(fS);HWe=r(W3e,"BloomConfig"),W3e.forEach(t),UWe=r(lw," (BLOOM model)"),lw.forEach(t),JWe=i(L),zf=n(L,"LI",{});var iw=s(zf);bte=n(iw,"STRONG",{});var Q3e=s(bte);YWe=r(Q3e,"camembert"),Q3e.forEach(t),KWe=r(iw," \u2014 "),mS=n(iw,"A",{href:!0});var H3e=s(mS);ZWe=r(H3e,"CamembertConfig"),H3e.forEach(t),eQe=r(iw," (CamemBERT model)"),iw.forEach(t),oQe=i(L),Wf=n(L,"LI",{});var dw=s(Wf);vte=n(dw,"STRONG",{});var U3e=s(vte);rQe=r(U3e,"canine"),U3e.forEach(t),tQe=r(dw," \u2014 "),gS=n(dw,"A",{href:!0});var J3e=s(gS);aQe=r(J3e,"CanineConfig"),J3e.forEach(t),nQe=r(dw," (CANINE model)"),dw.forEach(t),sQe=i(L),Qf=n(L,"LI",{});var cw=s(Qf);Fte=n(cw,"STRONG",{});var Y3e=s(Fte);lQe=r(Y3e,"clip"),Y3e.forEach(t),iQe=r(cw," \u2014 "),hS=n(cw,"A",{href:!0});var K3e=s(hS);dQe=r(K3e,"CLIPConfig"),K3e.forEach(t),cQe=r(cw," (CLIP model)"),cw.forEach(t),fQe=i(L),Hf=n(L,"LI",{});var fw=s(Hf);Tte=n(fw,"STRONG",{});var Z3e=s(Tte);mQe=r(Z3e,"convbert"),Z3e.forEach(t),gQe=r(fw," \u2014 "),pS=n(fw,"A",{href:!0});var ewe=s(pS);hQe=r(ewe,"ConvBertConfig"),ewe.forEach(t),pQe=r(fw," (ConvBERT model)"),fw.forEach(t),uQe=i(L),Uf=n(L,"LI",{});var mw=s(Uf);Mte=n(mw,"STRONG",{});var owe=s(Mte);_Qe=r(owe,"convnext"),owe.forEach(t),bQe=r(mw," \u2014 "),uS=n(mw,"A",{href:!0});var rwe=s(uS);vQe=r(rwe,"ConvNextConfig"),rwe.forEach(t),FQe=r(mw," (ConvNeXT model)"),mw.forEach(t),TQe=i(L),Jf=n(L,"LI",{});var gw=s(Jf);Ete=n(gw,"STRONG",{});var twe=s(Ete);MQe=r(twe,"ctrl"),twe.forEach(t),EQe=r(gw," \u2014 "),_S=n(gw,"A",{href:!0});var awe=s(_S);CQe=r(awe,"CTRLConfig"),awe.forEach(t),wQe=r(gw," (CTRL model)"),gw.forEach(t),AQe=i(L),Yf=n(L,"LI",{});var hw=s(Yf);Cte=n(hw,"STRONG",{});var nwe=s(Cte);LQe=r(nwe,"cvt"),nwe.forEach(t),yQe=r(hw," \u2014 "),bS=n(hw,"A",{href:!0});var swe=s(bS);xQe=r(swe,"CvtConfig"),swe.forEach(t),$Qe=r(hw," (CvT model)"),hw.forEach(t),kQe=i(L),Kf=n(L,"LI",{});var pw=s(Kf);wte=n(pw,"STRONG",{});var lwe=s(wte);SQe=r(lwe,"data2vec-audio"),lwe.forEach(t),RQe=r(pw," \u2014 "),vS=n(pw,"A",{href:!0});var iwe=s(vS);PQe=r(iwe,"Data2VecAudioConfig"),iwe.forEach(t),BQe=r(pw," (Data2VecAudio model)"),pw.forEach(t),IQe=i(L),Zf=n(L,"LI",{});var uw=s(Zf);Ate=n(uw,"STRONG",{});var dwe=s(Ate);NQe=r(dwe,"data2vec-text"),dwe.forEach(t),qQe=r(uw," \u2014 "),FS=n(uw,"A",{href:!0});var cwe=s(FS);jQe=r(cwe,"Data2VecTextConfig"),cwe.forEach(t),DQe=r(uw," (Data2VecText model)"),uw.forEach(t),GQe=i(L),em=n(L,"LI",{});var _w=s(em);Lte=n(_w,"STRONG",{});var fwe=s(Lte);OQe=r(fwe,"data2vec-vision"),fwe.forEach(t),VQe=r(_w," \u2014 "),TS=n(_w,"A",{href:!0});var mwe=s(TS);XQe=r(mwe,"Data2VecVisionConfig"),mwe.forEach(t),zQe=r(_w," (Data2VecVision model)"),_w.forEach(t),WQe=i(L),om=n(L,"LI",{});var bw=s(om);yte=n(bw,"STRONG",{});var gwe=s(yte);QQe=r(gwe,"deberta"),gwe.forEach(t),HQe=r(bw," \u2014 "),MS=n(bw,"A",{href:!0});var hwe=s(MS);UQe=r(hwe,"DebertaConfig"),hwe.forEach(t),JQe=r(bw," (DeBERTa model)"),bw.forEach(t),YQe=i(L),rm=n(L,"LI",{});var vw=s(rm);xte=n(vw,"STRONG",{});var pwe=s(xte);KQe=r(pwe,"deberta-v2"),pwe.forEach(t),ZQe=r(vw," \u2014 "),ES=n(vw,"A",{href:!0});var uwe=s(ES);eHe=r(uwe,"DebertaV2Config"),uwe.forEach(t),oHe=r(vw," (DeBERTa-v2 model)"),vw.forEach(t),rHe=i(L),tm=n(L,"LI",{});var Fw=s(tm);$te=n(Fw,"STRONG",{});var _we=s($te);tHe=r(_we,"decision_transformer"),_we.forEach(t),aHe=r(Fw," \u2014 "),CS=n(Fw,"A",{href:!0});var bwe=s(CS);nHe=r(bwe,"DecisionTransformerConfig"),bwe.forEach(t),sHe=r(Fw," (Decision Transformer model)"),Fw.forEach(t),lHe=i(L),am=n(L,"LI",{});var Tw=s(am);kte=n(Tw,"STRONG",{});var XJr=s(kte);iHe=r(XJr,"deit"),XJr.forEach(t),dHe=r(Tw," \u2014 "),wS=n(Tw,"A",{href:!0});var zJr=s(wS);cHe=r(zJr,"DeiTConfig"),zJr.forEach(t),fHe=r(Tw," (DeiT model)"),Tw.forEach(t),mHe=i(L),nm=n(L,"LI",{});var vwe=s(nm);Ste=n(vwe,"STRONG",{});var WJr=s(Ste);gHe=r(WJr,"detr"),WJr.forEach(t),hHe=r(vwe," \u2014 "),AS=n(vwe,"A",{href:!0});var QJr=s(AS);pHe=r(QJr,"DetrConfig"),QJr.forEach(t),uHe=r(vwe," (DETR model)"),vwe.forEach(t),_He=i(L),sm=n(L,"LI",{});var Fwe=s(sm);Rte=n(Fwe,"STRONG",{});var HJr=s(Rte);bHe=r(HJr,"distilbert"),HJr.forEach(t),vHe=r(Fwe," \u2014 "),LS=n(Fwe,"A",{href:!0});var UJr=s(LS);FHe=r(UJr,"DistilBertConfig"),UJr.forEach(t),THe=r(Fwe," (DistilBERT model)"),Fwe.forEach(t),MHe=i(L),lm=n(L,"LI",{});var Twe=s(lm);Pte=n(Twe,"STRONG",{});var JJr=s(Pte);EHe=r(JJr,"dpr"),JJr.forEach(t),CHe=r(Twe," \u2014 "),yS=n(Twe,"A",{href:!0});var YJr=s(yS);wHe=r(YJr,"DPRConfig"),YJr.forEach(t),AHe=r(Twe," (DPR model)"),Twe.forEach(t),LHe=i(L),im=n(L,"LI",{});var Mwe=s(im);Bte=n(Mwe,"STRONG",{});var KJr=s(Bte);yHe=r(KJr,"dpt"),KJr.forEach(t),xHe=r(Mwe," \u2014 "),xS=n(Mwe,"A",{href:!0});var ZJr=s(xS);$He=r(ZJr,"DPTConfig"),ZJr.forEach(t),kHe=r(Mwe," (DPT model)"),Mwe.forEach(t),SHe=i(L),dm=n(L,"LI",{});var Ewe=s(dm);Ite=n(Ewe,"STRONG",{});var eYr=s(Ite);RHe=r(eYr,"electra"),eYr.forEach(t),PHe=r(Ewe," \u2014 "),$S=n(Ewe,"A",{href:!0});var oYr=s($S);BHe=r(oYr,"ElectraConfig"),oYr.forEach(t),IHe=r(Ewe," (ELECTRA model)"),Ewe.forEach(t),NHe=i(L),cm=n(L,"LI",{});var Cwe=s(cm);Nte=n(Cwe,"STRONG",{});var rYr=s(Nte);qHe=r(rYr,"encoder-decoder"),rYr.forEach(t),jHe=r(Cwe," \u2014 "),kS=n(Cwe,"A",{href:!0});var tYr=s(kS);DHe=r(tYr,"EncoderDecoderConfig"),tYr.forEach(t),GHe=r(Cwe," (Encoder decoder model)"),Cwe.forEach(t),OHe=i(L),fm=n(L,"LI",{});var wwe=s(fm);qte=n(wwe,"STRONG",{});var aYr=s(qte);VHe=r(aYr,"flaubert"),aYr.forEach(t),XHe=r(wwe," \u2014 "),SS=n(wwe,"A",{href:!0});var nYr=s(SS);zHe=r(nYr,"FlaubertConfig"),nYr.forEach(t),WHe=r(wwe," (FlauBERT model)"),wwe.forEach(t),QHe=i(L),mm=n(L,"LI",{});var Awe=s(mm);jte=n(Awe,"STRONG",{});var sYr=s(jte);HHe=r(sYr,"flava"),sYr.forEach(t),UHe=r(Awe," \u2014 "),RS=n(Awe,"A",{href:!0});var lYr=s(RS);JHe=r(lYr,"FlavaConfig"),lYr.forEach(t),YHe=r(Awe," (FLAVA model)"),Awe.forEach(t),KHe=i(L),gm=n(L,"LI",{});var Lwe=s(gm);Dte=n(Lwe,"STRONG",{});var iYr=s(Dte);ZHe=r(iYr,"fnet"),iYr.forEach(t),eUe=r(Lwe," \u2014 "),PS=n(Lwe,"A",{href:!0});var dYr=s(PS);oUe=r(dYr,"FNetConfig"),dYr.forEach(t),rUe=r(Lwe," (FNet model)"),Lwe.forEach(t),tUe=i(L),hm=n(L,"LI",{});var ywe=s(hm);Gte=n(ywe,"STRONG",{});var cYr=s(Gte);aUe=r(cYr,"fsmt"),cYr.forEach(t),nUe=r(ywe," \u2014 "),BS=n(ywe,"A",{href:!0});var fYr=s(BS);sUe=r(fYr,"FSMTConfig"),fYr.forEach(t),lUe=r(ywe," (FairSeq Machine-Translation model)"),ywe.forEach(t),iUe=i(L),pm=n(L,"LI",{});var xwe=s(pm);Ote=n(xwe,"STRONG",{});var mYr=s(Ote);dUe=r(mYr,"funnel"),mYr.forEach(t),cUe=r(xwe," \u2014 "),IS=n(xwe,"A",{href:!0});var gYr=s(IS);fUe=r(gYr,"FunnelConfig"),gYr.forEach(t),mUe=r(xwe," (Funnel Transformer model)"),xwe.forEach(t),gUe=i(L),um=n(L,"LI",{});var $we=s(um);Vte=n($we,"STRONG",{});var hYr=s(Vte);hUe=r(hYr,"glpn"),hYr.forEach(t),pUe=r($we," \u2014 "),NS=n($we,"A",{href:!0});var pYr=s(NS);uUe=r(pYr,"GLPNConfig"),pYr.forEach(t),_Ue=r($we," (GLPN model)"),$we.forEach(t),bUe=i(L),_m=n(L,"LI",{});var kwe=s(_m);Xte=n(kwe,"STRONG",{});var uYr=s(Xte);vUe=r(uYr,"gpt2"),uYr.forEach(t),FUe=r(kwe," \u2014 "),qS=n(kwe,"A",{href:!0});var _Yr=s(qS);TUe=r(_Yr,"GPT2Config"),_Yr.forEach(t),MUe=r(kwe," (OpenAI GPT-2 model)"),kwe.forEach(t),EUe=i(L),bm=n(L,"LI",{});var Swe=s(bm);zte=n(Swe,"STRONG",{});var bYr=s(zte);CUe=r(bYr,"gpt_neo"),bYr.forEach(t),wUe=r(Swe," \u2014 "),jS=n(Swe,"A",{href:!0});var vYr=s(jS);AUe=r(vYr,"GPTNeoConfig"),vYr.forEach(t),LUe=r(Swe," (GPT Neo model)"),Swe.forEach(t),yUe=i(L),vm=n(L,"LI",{});var Rwe=s(vm);Wte=n(Rwe,"STRONG",{});var FYr=s(Wte);xUe=r(FYr,"gpt_neox"),FYr.forEach(t),$Ue=r(Rwe," \u2014 "),DS=n(Rwe,"A",{href:!0});var TYr=s(DS);kUe=r(TYr,"GPTNeoXConfig"),TYr.forEach(t),SUe=r(Rwe," (GPT NeoX model)"),Rwe.forEach(t),RUe=i(L),Fm=n(L,"LI",{});var Pwe=s(Fm);Qte=n(Pwe,"STRONG",{});var MYr=s(Qte);PUe=r(MYr,"gptj"),MYr.forEach(t),BUe=r(Pwe," \u2014 "),GS=n(Pwe,"A",{href:!0});var EYr=s(GS);IUe=r(EYr,"GPTJConfig"),EYr.forEach(t),NUe=r(Pwe," (GPT-J model)"),Pwe.forEach(t),qUe=i(L),Tm=n(L,"LI",{});var Bwe=s(Tm);Hte=n(Bwe,"STRONG",{});var CYr=s(Hte);jUe=r(CYr,"hubert"),CYr.forEach(t),DUe=r(Bwe," \u2014 "),OS=n(Bwe,"A",{href:!0});var wYr=s(OS);GUe=r(wYr,"HubertConfig"),wYr.forEach(t),OUe=r(Bwe," (Hubert model)"),Bwe.forEach(t),VUe=i(L),Mm=n(L,"LI",{});var Iwe=s(Mm);Ute=n(Iwe,"STRONG",{});var AYr=s(Ute);XUe=r(AYr,"ibert"),AYr.forEach(t),zUe=r(Iwe," \u2014 "),VS=n(Iwe,"A",{href:!0});var LYr=s(VS);WUe=r(LYr,"IBertConfig"),LYr.forEach(t),QUe=r(Iwe," (I-BERT model)"),Iwe.forEach(t),HUe=i(L),Em=n(L,"LI",{});var Nwe=s(Em);Jte=n(Nwe,"STRONG",{});var yYr=s(Jte);UUe=r(yYr,"imagegpt"),yYr.forEach(t),JUe=r(Nwe," \u2014 "),XS=n(Nwe,"A",{href:!0});var xYr=s(XS);YUe=r(xYr,"ImageGPTConfig"),xYr.forEach(t),KUe=r(Nwe," (ImageGPT model)"),Nwe.forEach(t),ZUe=i(L),Cm=n(L,"LI",{});var qwe=s(Cm);Yte=n(qwe,"STRONG",{});var $Yr=s(Yte);eJe=r($Yr,"layoutlm"),$Yr.forEach(t),oJe=r(qwe," \u2014 "),zS=n(qwe,"A",{href:!0});var kYr=s(zS);rJe=r(kYr,"LayoutLMConfig"),kYr.forEach(t),tJe=r(qwe," (LayoutLM model)"),qwe.forEach(t),aJe=i(L),wm=n(L,"LI",{});var jwe=s(wm);Kte=n(jwe,"STRONG",{});var SYr=s(Kte);nJe=r(SYr,"layoutlmv2"),SYr.forEach(t),sJe=r(jwe," \u2014 "),WS=n(jwe,"A",{href:!0});var RYr=s(WS);lJe=r(RYr,"LayoutLMv2Config"),RYr.forEach(t),iJe=r(jwe," (LayoutLMv2 model)"),jwe.forEach(t),dJe=i(L),Am=n(L,"LI",{});var Dwe=s(Am);Zte=n(Dwe,"STRONG",{});var PYr=s(Zte);cJe=r(PYr,"layoutlmv3"),PYr.forEach(t),fJe=r(Dwe," \u2014 "),QS=n(Dwe,"A",{href:!0});var BYr=s(QS);mJe=r(BYr,"LayoutLMv3Config"),BYr.forEach(t),gJe=r(Dwe," (LayoutLMv3 model)"),Dwe.forEach(t),hJe=i(L),Lm=n(L,"LI",{});var Gwe=s(Lm);eae=n(Gwe,"STRONG",{});var IYr=s(eae);pJe=r(IYr,"led"),IYr.forEach(t),uJe=r(Gwe," \u2014 "),HS=n(Gwe,"A",{href:!0});var NYr=s(HS);_Je=r(NYr,"LEDConfig"),NYr.forEach(t),bJe=r(Gwe," (LED model)"),Gwe.forEach(t),vJe=i(L),ym=n(L,"LI",{});var Owe=s(ym);oae=n(Owe,"STRONG",{});var qYr=s(oae);FJe=r(qYr,"levit"),qYr.forEach(t),TJe=r(Owe," \u2014 "),US=n(Owe,"A",{href:!0});var jYr=s(US);MJe=r(jYr,"LevitConfig"),jYr.forEach(t),EJe=r(Owe," (LeViT model)"),Owe.forEach(t),CJe=i(L),xm=n(L,"LI",{});var Vwe=s(xm);rae=n(Vwe,"STRONG",{});var DYr=s(rae);wJe=r(DYr,"longformer"),DYr.forEach(t),AJe=r(Vwe," \u2014 "),JS=n(Vwe,"A",{href:!0});var GYr=s(JS);LJe=r(GYr,"LongformerConfig"),GYr.forEach(t),yJe=r(Vwe," (Longformer model)"),Vwe.forEach(t),xJe=i(L),$m=n(L,"LI",{});var Xwe=s($m);tae=n(Xwe,"STRONG",{});var OYr=s(tae);$Je=r(OYr,"longt5"),OYr.forEach(t),kJe=r(Xwe," \u2014 "),YS=n(Xwe,"A",{href:!0});var VYr=s(YS);SJe=r(VYr,"LongT5Config"),VYr.forEach(t),RJe=r(Xwe," (LongT5 model)"),Xwe.forEach(t),PJe=i(L),km=n(L,"LI",{});var zwe=s(km);aae=n(zwe,"STRONG",{});var XYr=s(aae);BJe=r(XYr,"luke"),XYr.forEach(t),IJe=r(zwe," \u2014 "),KS=n(zwe,"A",{href:!0});var zYr=s(KS);NJe=r(zYr,"LukeConfig"),zYr.forEach(t),qJe=r(zwe," (LUKE model)"),zwe.forEach(t),jJe=i(L),Sm=n(L,"LI",{});var Wwe=s(Sm);nae=n(Wwe,"STRONG",{});var WYr=s(nae);DJe=r(WYr,"lxmert"),WYr.forEach(t),GJe=r(Wwe," \u2014 "),ZS=n(Wwe,"A",{href:!0});var QYr=s(ZS);OJe=r(QYr,"LxmertConfig"),QYr.forEach(t),VJe=r(Wwe," (LXMERT model)"),Wwe.forEach(t),XJe=i(L),Rm=n(L,"LI",{});var Qwe=s(Rm);sae=n(Qwe,"STRONG",{});var HYr=s(sae);zJe=r(HYr,"m2m_100"),HYr.forEach(t),WJe=r(Qwe," \u2014 "),eR=n(Qwe,"A",{href:!0});var UYr=s(eR);QJe=r(UYr,"M2M100Config"),UYr.forEach(t),HJe=r(Qwe," (M2M100 model)"),Qwe.forEach(t),UJe=i(L),Pm=n(L,"LI",{});var Hwe=s(Pm);lae=n(Hwe,"STRONG",{});var JYr=s(lae);JJe=r(JYr,"marian"),JYr.forEach(t),YJe=r(Hwe," \u2014 "),oR=n(Hwe,"A",{href:!0});var YYr=s(oR);KJe=r(YYr,"MarianConfig"),YYr.forEach(t),ZJe=r(Hwe," (Marian model)"),Hwe.forEach(t),eYe=i(L),Bm=n(L,"LI",{});var Uwe=s(Bm);iae=n(Uwe,"STRONG",{});var KYr=s(iae);oYe=r(KYr,"maskformer"),KYr.forEach(t),rYe=r(Uwe," \u2014 "),rR=n(Uwe,"A",{href:!0});var ZYr=s(rR);tYe=r(ZYr,"MaskFormerConfig"),ZYr.forEach(t),aYe=r(Uwe," (MaskFormer model)"),Uwe.forEach(t),nYe=i(L),Im=n(L,"LI",{});var Jwe=s(Im);dae=n(Jwe,"STRONG",{});var eKr=s(dae);sYe=r(eKr,"mbart"),eKr.forEach(t),lYe=r(Jwe," \u2014 "),tR=n(Jwe,"A",{href:!0});var oKr=s(tR);iYe=r(oKr,"MBartConfig"),oKr.forEach(t),dYe=r(Jwe," (mBART model)"),Jwe.forEach(t),cYe=i(L),Nm=n(L,"LI",{});var Ywe=s(Nm);cae=n(Ywe,"STRONG",{});var rKr=s(cae);fYe=r(rKr,"mctct"),rKr.forEach(t),mYe=r(Ywe," \u2014 "),aR=n(Ywe,"A",{href:!0});var tKr=s(aR);gYe=r(tKr,"MCTCTConfig"),tKr.forEach(t),hYe=r(Ywe," (M-CTC-T model)"),Ywe.forEach(t),pYe=i(L),qm=n(L,"LI",{});var Kwe=s(qm);fae=n(Kwe,"STRONG",{});var aKr=s(fae);uYe=r(aKr,"megatron-bert"),aKr.forEach(t),_Ye=r(Kwe," \u2014 "),nR=n(Kwe,"A",{href:!0});var nKr=s(nR);bYe=r(nKr,"MegatronBertConfig"),nKr.forEach(t),vYe=r(Kwe," (Megatron-BERT model)"),Kwe.forEach(t),FYe=i(L),jm=n(L,"LI",{});var Zwe=s(jm);mae=n(Zwe,"STRONG",{});var sKr=s(mae);TYe=r(sKr,"mobilebert"),sKr.forEach(t),MYe=r(Zwe," \u2014 "),sR=n(Zwe,"A",{href:!0});var lKr=s(sR);EYe=r(lKr,"MobileBertConfig"),lKr.forEach(t),CYe=r(Zwe," (MobileBERT model)"),Zwe.forEach(t),wYe=i(L),Dm=n(L,"LI",{});var eAe=s(Dm);gae=n(eAe,"STRONG",{});var iKr=s(gae);AYe=r(iKr,"mpnet"),iKr.forEach(t),LYe=r(eAe," \u2014 "),lR=n(eAe,"A",{href:!0});var dKr=s(lR);yYe=r(dKr,"MPNetConfig"),dKr.forEach(t),xYe=r(eAe," (MPNet model)"),eAe.forEach(t),$Ye=i(L),Gm=n(L,"LI",{});var oAe=s(Gm);hae=n(oAe,"STRONG",{});var cKr=s(hae);kYe=r(cKr,"mt5"),cKr.forEach(t),SYe=r(oAe," \u2014 "),iR=n(oAe,"A",{href:!0});var fKr=s(iR);RYe=r(fKr,"MT5Config"),fKr.forEach(t),PYe=r(oAe," (MT5 model)"),oAe.forEach(t),BYe=i(L),Om=n(L,"LI",{});var rAe=s(Om);pae=n(rAe,"STRONG",{});var mKr=s(pae);IYe=r(mKr,"nystromformer"),mKr.forEach(t),NYe=r(rAe," \u2014 "),dR=n(rAe,"A",{href:!0});var gKr=s(dR);qYe=r(gKr,"NystromformerConfig"),gKr.forEach(t),jYe=r(rAe," (Nystr\xF6mformer model)"),rAe.forEach(t),DYe=i(L),Vm=n(L,"LI",{});var tAe=s(Vm);uae=n(tAe,"STRONG",{});var hKr=s(uae);GYe=r(hKr,"ofa"),hKr.forEach(t),OYe=r(tAe," \u2014 "),cR=n(tAe,"A",{href:!0});var pKr=s(cR);VYe=r(pKr,"OFAConfig"),pKr.forEach(t),XYe=r(tAe," (OFA model)"),tAe.forEach(t),zYe=i(L),Xm=n(L,"LI",{});var aAe=s(Xm);_ae=n(aAe,"STRONG",{});var uKr=s(_ae);WYe=r(uKr,"openai-gpt"),uKr.forEach(t),QYe=r(aAe," \u2014 "),fR=n(aAe,"A",{href:!0});var _Kr=s(fR);HYe=r(_Kr,"OpenAIGPTConfig"),_Kr.forEach(t),UYe=r(aAe," (OpenAI GPT model)"),aAe.forEach(t),JYe=i(L),zm=n(L,"LI",{});var nAe=s(zm);bae=n(nAe,"STRONG",{});var bKr=s(bae);YYe=r(bKr,"opt"),bKr.forEach(t),KYe=r(nAe," \u2014 "),mR=n(nAe,"A",{href:!0});var vKr=s(mR);ZYe=r(vKr,"OPTConfig"),vKr.forEach(t),eKe=r(nAe," (OPT model)"),nAe.forEach(t),oKe=i(L),Wm=n(L,"LI",{});var sAe=s(Wm);vae=n(sAe,"STRONG",{});var FKr=s(vae);rKe=r(FKr,"pegasus"),FKr.forEach(t),tKe=r(sAe," \u2014 "),gR=n(sAe,"A",{href:!0});var TKr=s(gR);aKe=r(TKr,"PegasusConfig"),TKr.forEach(t),nKe=r(sAe," (Pegasus model)"),sAe.forEach(t),sKe=i(L),Qm=n(L,"LI",{});var lAe=s(Qm);Fae=n(lAe,"STRONG",{});var MKr=s(Fae);lKe=r(MKr,"perceiver"),MKr.forEach(t),iKe=r(lAe," \u2014 "),hR=n(lAe,"A",{href:!0});var EKr=s(hR);dKe=r(EKr,"PerceiverConfig"),EKr.forEach(t),cKe=r(lAe," (Perceiver model)"),lAe.forEach(t),fKe=i(L),Hm=n(L,"LI",{});var iAe=s(Hm);Tae=n(iAe,"STRONG",{});var CKr=s(Tae);mKe=r(CKr,"plbart"),CKr.forEach(t),gKe=r(iAe," \u2014 "),pR=n(iAe,"A",{href:!0});var wKr=s(pR);hKe=r(wKr,"PLBartConfig"),wKr.forEach(t),pKe=r(iAe," (PLBart model)"),iAe.forEach(t),uKe=i(L),Um=n(L,"LI",{});var dAe=s(Um);Mae=n(dAe,"STRONG",{});var AKr=s(Mae);_Ke=r(AKr,"poolformer"),AKr.forEach(t),bKe=r(dAe," \u2014 "),uR=n(dAe,"A",{href:!0});var LKr=s(uR);vKe=r(LKr,"PoolFormerConfig"),LKr.forEach(t),FKe=r(dAe," (PoolFormer model)"),dAe.forEach(t),TKe=i(L),Jm=n(L,"LI",{});var cAe=s(Jm);Eae=n(cAe,"STRONG",{});var yKr=s(Eae);MKe=r(yKr,"prophetnet"),yKr.forEach(t),EKe=r(cAe," \u2014 "),_R=n(cAe,"A",{href:!0});var xKr=s(_R);CKe=r(xKr,"ProphetNetConfig"),xKr.forEach(t),wKe=r(cAe," (ProphetNet model)"),cAe.forEach(t),AKe=i(L),Ym=n(L,"LI",{});var fAe=s(Ym);Cae=n(fAe,"STRONG",{});var $Kr=s(Cae);LKe=r($Kr,"qdqbert"),$Kr.forEach(t),yKe=r(fAe," \u2014 "),bR=n(fAe,"A",{href:!0});var kKr=s(bR);xKe=r(kKr,"QDQBertConfig"),kKr.forEach(t),$Ke=r(fAe," (QDQBert model)"),fAe.forEach(t),kKe=i(L),Km=n(L,"LI",{});var mAe=s(Km);wae=n(mAe,"STRONG",{});var SKr=s(wae);SKe=r(SKr,"rag"),SKr.forEach(t),RKe=r(mAe," \u2014 "),vR=n(mAe,"A",{href:!0});var RKr=s(vR);PKe=r(RKr,"RagConfig"),RKr.forEach(t),BKe=r(mAe," (RAG model)"),mAe.forEach(t),IKe=i(L),Zm=n(L,"LI",{});var gAe=s(Zm);Aae=n(gAe,"STRONG",{});var PKr=s(Aae);NKe=r(PKr,"realm"),PKr.forEach(t),qKe=r(gAe," \u2014 "),FR=n(gAe,"A",{href:!0});var BKr=s(FR);jKe=r(BKr,"RealmConfig"),BKr.forEach(t),DKe=r(gAe," (REALM model)"),gAe.forEach(t),GKe=i(L),eg=n(L,"LI",{});var hAe=s(eg);Lae=n(hAe,"STRONG",{});var IKr=s(Lae);OKe=r(IKr,"reformer"),IKr.forEach(t),VKe=r(hAe," \u2014 "),TR=n(hAe,"A",{href:!0});var NKr=s(TR);XKe=r(NKr,"ReformerConfig"),NKr.forEach(t),zKe=r(hAe," (Reformer model)"),hAe.forEach(t),WKe=i(L),og=n(L,"LI",{});var pAe=s(og);yae=n(pAe,"STRONG",{});var qKr=s(yae);QKe=r(qKr,"regnet"),qKr.forEach(t),HKe=r(pAe," \u2014 "),MR=n(pAe,"A",{href:!0});var jKr=s(MR);UKe=r(jKr,"RegNetConfig"),jKr.forEach(t),JKe=r(pAe," (RegNet model)"),pAe.forEach(t),YKe=i(L),rg=n(L,"LI",{});var uAe=s(rg);xae=n(uAe,"STRONG",{});var DKr=s(xae);KKe=r(DKr,"rembert"),DKr.forEach(t),ZKe=r(uAe," \u2014 "),ER=n(uAe,"A",{href:!0});var GKr=s(ER);eZe=r(GKr,"RemBertConfig"),GKr.forEach(t),oZe=r(uAe," (RemBERT model)"),uAe.forEach(t),rZe=i(L),tg=n(L,"LI",{});var _Ae=s(tg);$ae=n(_Ae,"STRONG",{});var OKr=s($ae);tZe=r(OKr,"resnet"),OKr.forEach(t),aZe=r(_Ae," \u2014 "),CR=n(_Ae,"A",{href:!0});var VKr=s(CR);nZe=r(VKr,"ResNetConfig"),VKr.forEach(t),sZe=r(_Ae," (ResNet model)"),_Ae.forEach(t),lZe=i(L),ag=n(L,"LI",{});var bAe=s(ag);kae=n(bAe,"STRONG",{});var XKr=s(kae);iZe=r(XKr,"retribert"),XKr.forEach(t),dZe=r(bAe," \u2014 "),wR=n(bAe,"A",{href:!0});var zKr=s(wR);cZe=r(zKr,"RetriBertConfig"),zKr.forEach(t),fZe=r(bAe," (RetriBERT model)"),bAe.forEach(t),mZe=i(L),ng=n(L,"LI",{});var vAe=s(ng);Sae=n(vAe,"STRONG",{});var WKr=s(Sae);gZe=r(WKr,"roberta"),WKr.forEach(t),hZe=r(vAe," \u2014 "),AR=n(vAe,"A",{href:!0});var QKr=s(AR);pZe=r(QKr,"RobertaConfig"),QKr.forEach(t),uZe=r(vAe," (RoBERTa model)"),vAe.forEach(t),_Ze=i(L),sg=n(L,"LI",{});var FAe=s(sg);Rae=n(FAe,"STRONG",{});var HKr=s(Rae);bZe=r(HKr,"roformer"),HKr.forEach(t),vZe=r(FAe," \u2014 "),LR=n(FAe,"A",{href:!0});var UKr=s(LR);FZe=r(UKr,"RoFormerConfig"),UKr.forEach(t),TZe=r(FAe," (RoFormer model)"),FAe.forEach(t),MZe=i(L),lg=n(L,"LI",{});var TAe=s(lg);Pae=n(TAe,"STRONG",{});var JKr=s(Pae);EZe=r(JKr,"segformer"),JKr.forEach(t),CZe=r(TAe," \u2014 "),yR=n(TAe,"A",{href:!0});var YKr=s(yR);wZe=r(YKr,"SegformerConfig"),YKr.forEach(t),AZe=r(TAe," (SegFormer model)"),TAe.forEach(t),LZe=i(L),ig=n(L,"LI",{});var MAe=s(ig);Bae=n(MAe,"STRONG",{});var KKr=s(Bae);yZe=r(KKr,"sew"),KKr.forEach(t),xZe=r(MAe," \u2014 "),xR=n(MAe,"A",{href:!0});var ZKr=s(xR);$Ze=r(ZKr,"SEWConfig"),ZKr.forEach(t),kZe=r(MAe," (SEW model)"),MAe.forEach(t),SZe=i(L),dg=n(L,"LI",{});var EAe=s(dg);Iae=n(EAe,"STRONG",{});var eZr=s(Iae);RZe=r(eZr,"sew-d"),eZr.forEach(t),PZe=r(EAe," \u2014 "),$R=n(EAe,"A",{href:!0});var oZr=s($R);BZe=r(oZr,"SEWDConfig"),oZr.forEach(t),IZe=r(EAe," (SEW-D model)"),EAe.forEach(t),NZe=i(L),cg=n(L,"LI",{});var CAe=s(cg);Nae=n(CAe,"STRONG",{});var rZr=s(Nae);qZe=r(rZr,"speech-encoder-decoder"),rZr.forEach(t),jZe=r(CAe," \u2014 "),kR=n(CAe,"A",{href:!0});var tZr=s(kR);DZe=r(tZr,"SpeechEncoderDecoderConfig"),tZr.forEach(t),GZe=r(CAe," (Speech Encoder decoder model)"),CAe.forEach(t),OZe=i(L),fg=n(L,"LI",{});var wAe=s(fg);qae=n(wAe,"STRONG",{});var aZr=s(qae);VZe=r(aZr,"speech_to_text"),aZr.forEach(t),XZe=r(wAe," \u2014 "),SR=n(wAe,"A",{href:!0});var nZr=s(SR);zZe=r(nZr,"Speech2TextConfig"),nZr.forEach(t),WZe=r(wAe," (Speech2Text model)"),wAe.forEach(t),QZe=i(L),mg=n(L,"LI",{});var AAe=s(mg);jae=n(AAe,"STRONG",{});var sZr=s(jae);HZe=r(sZr,"speech_to_text_2"),sZr.forEach(t),UZe=r(AAe," \u2014 "),RR=n(AAe,"A",{href:!0});var lZr=s(RR);JZe=r(lZr,"Speech2Text2Config"),lZr.forEach(t),YZe=r(AAe," (Speech2Text2 model)"),AAe.forEach(t),KZe=i(L),gg=n(L,"LI",{});var LAe=s(gg);Dae=n(LAe,"STRONG",{});var iZr=s(Dae);ZZe=r(iZr,"splinter"),iZr.forEach(t),eeo=r(LAe," \u2014 "),PR=n(LAe,"A",{href:!0});var dZr=s(PR);oeo=r(dZr,"SplinterConfig"),dZr.forEach(t),reo=r(LAe," (Splinter model)"),LAe.forEach(t),teo=i(L),hg=n(L,"LI",{});var yAe=s(hg);Gae=n(yAe,"STRONG",{});var cZr=s(Gae);aeo=r(cZr,"squeezebert"),cZr.forEach(t),neo=r(yAe," \u2014 "),BR=n(yAe,"A",{href:!0});var fZr=s(BR);seo=r(fZr,"SqueezeBertConfig"),fZr.forEach(t),leo=r(yAe," (SqueezeBERT model)"),yAe.forEach(t),ieo=i(L),pg=n(L,"LI",{});var xAe=s(pg);Oae=n(xAe,"STRONG",{});var mZr=s(Oae);deo=r(mZr,"swin"),mZr.forEach(t),ceo=r(xAe," \u2014 "),IR=n(xAe,"A",{href:!0});var gZr=s(IR);feo=r(gZr,"SwinConfig"),gZr.forEach(t),meo=r(xAe," (Swin Transformer model)"),xAe.forEach(t),geo=i(L),ug=n(L,"LI",{});var $Ae=s(ug);Vae=n($Ae,"STRONG",{});var hZr=s(Vae);heo=r(hZr,"t5"),hZr.forEach(t),peo=r($Ae," \u2014 "),NR=n($Ae,"A",{href:!0});var pZr=s(NR);ueo=r(pZr,"T5Config"),pZr.forEach(t),_eo=r($Ae," (T5 model)"),$Ae.forEach(t),beo=i(L),_g=n(L,"LI",{});var kAe=s(_g);Xae=n(kAe,"STRONG",{});var uZr=s(Xae);veo=r(uZr,"tapas"),uZr.forEach(t),Feo=r(kAe," \u2014 "),qR=n(kAe,"A",{href:!0});var _Zr=s(qR);Teo=r(_Zr,"TapasConfig"),_Zr.forEach(t),Meo=r(kAe," (TAPAS model)"),kAe.forEach(t),Eeo=i(L),bg=n(L,"LI",{});var SAe=s(bg);zae=n(SAe,"STRONG",{});var bZr=s(zae);Ceo=r(bZr,"trajectory_transformer"),bZr.forEach(t),weo=r(SAe," \u2014 "),jR=n(SAe,"A",{href:!0});var vZr=s(jR);Aeo=r(vZr,"TrajectoryTransformerConfig"),vZr.forEach(t),Leo=r(SAe," (Trajectory Transformer model)"),SAe.forEach(t),yeo=i(L),vg=n(L,"LI",{});var RAe=s(vg);Wae=n(RAe,"STRONG",{});var FZr=s(Wae);xeo=r(FZr,"transfo-xl"),FZr.forEach(t),$eo=r(RAe," \u2014 "),DR=n(RAe,"A",{href:!0});var TZr=s(DR);keo=r(TZr,"TransfoXLConfig"),TZr.forEach(t),Seo=r(RAe," (Transformer-XL model)"),RAe.forEach(t),Reo=i(L),Fg=n(L,"LI",{});var PAe=s(Fg);Qae=n(PAe,"STRONG",{});var MZr=s(Qae);Peo=r(MZr,"trocr"),MZr.forEach(t),Beo=r(PAe," \u2014 "),GR=n(PAe,"A",{href:!0});var EZr=s(GR);Ieo=r(EZr,"TrOCRConfig"),EZr.forEach(t),Neo=r(PAe," (TrOCR model)"),PAe.forEach(t),qeo=i(L),Tg=n(L,"LI",{});var BAe=s(Tg);Hae=n(BAe,"STRONG",{});var CZr=s(Hae);jeo=r(CZr,"unispeech"),CZr.forEach(t),Deo=r(BAe," \u2014 "),OR=n(BAe,"A",{href:!0});var wZr=s(OR);Geo=r(wZr,"UniSpeechConfig"),wZr.forEach(t),Oeo=r(BAe," (UniSpeech model)"),BAe.forEach(t),Veo=i(L),Mg=n(L,"LI",{});var IAe=s(Mg);Uae=n(IAe,"STRONG",{});var AZr=s(Uae);Xeo=r(AZr,"unispeech-sat"),AZr.forEach(t),zeo=r(IAe," \u2014 "),VR=n(IAe,"A",{href:!0});var LZr=s(VR);Weo=r(LZr,"UniSpeechSatConfig"),LZr.forEach(t),Qeo=r(IAe," (UniSpeechSat model)"),IAe.forEach(t),Heo=i(L),Eg=n(L,"LI",{});var NAe=s(Eg);Jae=n(NAe,"STRONG",{});var yZr=s(Jae);Ueo=r(yZr,"van"),yZr.forEach(t),Jeo=r(NAe," \u2014 "),XR=n(NAe,"A",{href:!0});var xZr=s(XR);Yeo=r(xZr,"VanConfig"),xZr.forEach(t),Keo=r(NAe," (VAN model)"),NAe.forEach(t),Zeo=i(L),Cg=n(L,"LI",{});var qAe=s(Cg);Yae=n(qAe,"STRONG",{});var $Zr=s(Yae);eoo=r($Zr,"vilt"),$Zr.forEach(t),ooo=r(qAe," \u2014 "),zR=n(qAe,"A",{href:!0});var kZr=s(zR);roo=r(kZr,"ViltConfig"),kZr.forEach(t),too=r(qAe," (ViLT model)"),qAe.forEach(t),aoo=i(L),wg=n(L,"LI",{});var jAe=s(wg);Kae=n(jAe,"STRONG",{});var SZr=s(Kae);noo=r(SZr,"vision-encoder-decoder"),SZr.forEach(t),soo=r(jAe," \u2014 "),WR=n(jAe,"A",{href:!0});var RZr=s(WR);loo=r(RZr,"VisionEncoderDecoderConfig"),RZr.forEach(t),ioo=r(jAe," (Vision Encoder decoder model)"),jAe.forEach(t),doo=i(L),Ag=n(L,"LI",{});var DAe=s(Ag);Zae=n(DAe,"STRONG",{});var PZr=s(Zae);coo=r(PZr,"vision-text-dual-encoder"),PZr.forEach(t),foo=r(DAe," \u2014 "),QR=n(DAe,"A",{href:!0});var BZr=s(QR);moo=r(BZr,"VisionTextDualEncoderConfig"),BZr.forEach(t),goo=r(DAe," (VisionTextDualEncoder model)"),DAe.forEach(t),hoo=i(L),Lg=n(L,"LI",{});var GAe=s(Lg);ene=n(GAe,"STRONG",{});var IZr=s(ene);poo=r(IZr,"visual_bert"),IZr.forEach(t),uoo=r(GAe," \u2014 "),HR=n(GAe,"A",{href:!0});var NZr=s(HR);_oo=r(NZr,"VisualBertConfig"),NZr.forEach(t),boo=r(GAe," (VisualBERT model)"),GAe.forEach(t),voo=i(L),yg=n(L,"LI",{});var OAe=s(yg);one=n(OAe,"STRONG",{});var qZr=s(one);Foo=r(qZr,"vit"),qZr.forEach(t),Too=r(OAe," \u2014 "),UR=n(OAe,"A",{href:!0});var jZr=s(UR);Moo=r(jZr,"ViTConfig"),jZr.forEach(t),Eoo=r(OAe," (ViT model)"),OAe.forEach(t),Coo=i(L),xg=n(L,"LI",{});var VAe=s(xg);rne=n(VAe,"STRONG",{});var DZr=s(rne);woo=r(DZr,"vit_mae"),DZr.forEach(t),Aoo=r(VAe," \u2014 "),JR=n(VAe,"A",{href:!0});var GZr=s(JR);Loo=r(GZr,"ViTMAEConfig"),GZr.forEach(t),yoo=r(VAe," (ViTMAE model)"),VAe.forEach(t),xoo=i(L),$g=n(L,"LI",{});var XAe=s($g);tne=n(XAe,"STRONG",{});var OZr=s(tne);$oo=r(OZr,"wav2vec2"),OZr.forEach(t),koo=r(XAe," \u2014 "),YR=n(XAe,"A",{href:!0});var VZr=s(YR);Soo=r(VZr,"Wav2Vec2Config"),VZr.forEach(t),Roo=r(XAe," (Wav2Vec2 model)"),XAe.forEach(t),Poo=i(L),kg=n(L,"LI",{});var zAe=s(kg);ane=n(zAe,"STRONG",{});var XZr=s(ane);Boo=r(XZr,"wav2vec2-conformer"),XZr.forEach(t),Ioo=r(zAe," \u2014 "),KR=n(zAe,"A",{href:!0});var zZr=s(KR);Noo=r(zZr,"Wav2Vec2ConformerConfig"),zZr.forEach(t),qoo=r(zAe," (Wav2Vec2-Conformer model)"),zAe.forEach(t),joo=i(L),Sg=n(L,"LI",{});var WAe=s(Sg);nne=n(WAe,"STRONG",{});var WZr=s(nne);Doo=r(WZr,"wavlm"),WZr.forEach(t),Goo=r(WAe," \u2014 "),ZR=n(WAe,"A",{href:!0});var QZr=s(ZR);Ooo=r(QZr,"WavLMConfig"),QZr.forEach(t),Voo=r(WAe," (WavLM model)"),WAe.forEach(t),Xoo=i(L),Rg=n(L,"LI",{});var QAe=s(Rg);sne=n(QAe,"STRONG",{});var HZr=s(sne);zoo=r(HZr,"xglm"),HZr.forEach(t),Woo=r(QAe," \u2014 "),eP=n(QAe,"A",{href:!0});var UZr=s(eP);Qoo=r(UZr,"XGLMConfig"),UZr.forEach(t),Hoo=r(QAe," (XGLM model)"),QAe.forEach(t),Uoo=i(L),Pg=n(L,"LI",{});var HAe=s(Pg);lne=n(HAe,"STRONG",{});var JZr=s(lne);Joo=r(JZr,"xlm"),JZr.forEach(t),Yoo=r(HAe," \u2014 "),oP=n(HAe,"A",{href:!0});var YZr=s(oP);Koo=r(YZr,"XLMConfig"),YZr.forEach(t),Zoo=r(HAe," (XLM model)"),HAe.forEach(t),ero=i(L),Bg=n(L,"LI",{});var UAe=s(Bg);ine=n(UAe,"STRONG",{});var KZr=s(ine);oro=r(KZr,"xlm-prophetnet"),KZr.forEach(t),rro=r(UAe," \u2014 "),rP=n(UAe,"A",{href:!0});var ZZr=s(rP);tro=r(ZZr,"XLMProphetNetConfig"),ZZr.forEach(t),aro=r(UAe," (XLM-ProphetNet model)"),UAe.forEach(t),nro=i(L),Ig=n(L,"LI",{});var JAe=s(Ig);dne=n(JAe,"STRONG",{});var eet=s(dne);sro=r(eet,"xlm-roberta"),eet.forEach(t),lro=r(JAe," \u2014 "),tP=n(JAe,"A",{href:!0});var oet=s(tP);iro=r(oet,"XLMRobertaConfig"),oet.forEach(t),dro=r(JAe," (XLM-RoBERTa model)"),JAe.forEach(t),cro=i(L),Ng=n(L,"LI",{});var YAe=s(Ng);cne=n(YAe,"STRONG",{});var ret=s(cne);fro=r(ret,"xlm-roberta-xl"),ret.forEach(t),mro=r(YAe," \u2014 "),aP=n(YAe,"A",{href:!0});var tet=s(aP);gro=r(tet,"XLMRobertaXLConfig"),tet.forEach(t),hro=r(YAe," (XLM-RoBERTa-XL model)"),YAe.forEach(t),pro=i(L),qg=n(L,"LI",{});var KAe=s(qg);fne=n(KAe,"STRONG",{});var aet=s(fne);uro=r(aet,"xlnet"),aet.forEach(t),_ro=r(KAe," \u2014 "),nP=n(KAe,"A",{href:!0});var net=s(nP);bro=r(net,"XLNetConfig"),net.forEach(t),vro=r(KAe," (XLNet model)"),KAe.forEach(t),Fro=i(L),jg=n(L,"LI",{});var ZAe=s(jg);mne=n(ZAe,"STRONG",{});var set=s(mne);Tro=r(set,"yolos"),set.forEach(t),Mro=r(ZAe," \u2014 "),sP=n(ZAe,"A",{href:!0});var iet=s(sP);Ero=r(iet,"YolosConfig"),iet.forEach(t),Cro=r(ZAe," (YOLOS model)"),ZAe.forEach(t),wro=i(L),Dg=n(L,"LI",{});var e6e=s(Dg);gne=n(e6e,"STRONG",{});var det=s(gne);Aro=r(det,"yoso"),det.forEach(t),Lro=r(e6e," \u2014 "),lP=n(e6e,"A",{href:!0});var cet=s(lP);yro=r(cet,"YosoConfig"),cet.forEach(t),xro=r(e6e," (YOSO model)"),e6e.forEach(t),L.forEach(t),$ro=i(tt),T(Gg.$$.fragment,tt),tt.forEach(t),kro=i(rt),Og=n(rt,"DIV",{class:!0});var _Ve=s(Og);T(x6.$$.fragment,_Ve),Sro=i(_Ve),hne=n(_Ve,"P",{});var fet=s(hne);Rro=r(fet,"Register a new configuration for this class."),fet.forEach(t),_Ve.forEach(t),rt.forEach(t),bGe=i(f),ki=n(f,"H2",{class:!0});var bVe=s(ki);Vg=n(bVe,"A",{id:!0,class:!0,href:!0});var met=s(Vg);pne=n(met,"SPAN",{});var get=s(pne);T($6.$$.fragment,get),get.forEach(t),met.forEach(t),Pro=i(bVe),une=n(bVe,"SPAN",{});var het=s(une);Bro=r(het,"AutoTokenizer"),het.forEach(t),bVe.forEach(t),vGe=i(f),Ao=n(f,"DIV",{class:!0});var Ws=s(Ao);T(k6.$$.fragment,Ws),Iro=i(Ws),S6=n(Ws,"P",{});var vVe=s(S6);Nro=r(vVe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),iP=n(vVe,"A",{href:!0});var pet=s(iP);qro=r(pet,"AutoTokenizer.from_pretrained()"),pet.forEach(t),jro=r(vVe," class method."),vVe.forEach(t),Dro=i(Ws),R6=n(Ws,"P",{});var FVe=s(R6);Gro=r(FVe,"This class cannot be instantiated directly using "),_ne=n(FVe,"CODE",{});var uet=s(_ne);Oro=r(uet,"__init__()"),uet.forEach(t),Vro=r(FVe," (throws an error)."),FVe.forEach(t),Xro=i(Ws),Ar=n(Ws,"DIV",{class:!0});var Qs=s(Ar);T(P6.$$.fragment,Qs),zro=i(Qs),bne=n(Qs,"P",{});var _et=s(bne);Wro=r(_et,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),_et.forEach(t),Qro=i(Qs),$a=n(Qs,"P",{});var Mw=s($a);Hro=r(Mw,"The tokenizer class to instantiate is selected based on the "),vne=n(Mw,"CODE",{});var bet=s(vne);Uro=r(bet,"model_type"),bet.forEach(t),Jro=r(Mw,` property of the config object (either
passed as an argument or loaded from `),Fne=n(Mw,"CODE",{});var vet=s(Fne);Yro=r(vet,"pretrained_model_name_or_path"),vet.forEach(t),Kro=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tne=n(Mw,"CODE",{});var Fet=s(Tne);Zro=r(Fet,"pretrained_model_name_or_path"),Fet.forEach(t),eto=r(Mw,":"),Mw.forEach(t),oto=i(Qs),k=n(Qs,"UL",{});var S=s(k);Nn=n(S,"LI",{});var D$=s(Nn);Mne=n(D$,"STRONG",{});var Tet=s(Mne);rto=r(Tet,"albert"),Tet.forEach(t),tto=r(D$," \u2014 "),dP=n(D$,"A",{href:!0});var Met=s(dP);ato=r(Met,"AlbertTokenizer"),Met.forEach(t),nto=r(D$," or "),cP=n(D$,"A",{href:!0});var Eet=s(cP);sto=r(Eet,"AlbertTokenizerFast"),Eet.forEach(t),lto=r(D$," (ALBERT model)"),D$.forEach(t),ito=i(S),qn=n(S,"LI",{});var G$=s(qn);Ene=n(G$,"STRONG",{});var Cet=s(Ene);dto=r(Cet,"bart"),Cet.forEach(t),cto=r(G$," \u2014 "),fP=n(G$,"A",{href:!0});var wet=s(fP);fto=r(wet,"BartTokenizer"),wet.forEach(t),mto=r(G$," or "),mP=n(G$,"A",{href:!0});var Aet=s(mP);gto=r(Aet,"BartTokenizerFast"),Aet.forEach(t),hto=r(G$," (BART model)"),G$.forEach(t),pto=i(S),jn=n(S,"LI",{});var O$=s(jn);Cne=n(O$,"STRONG",{});var Let=s(Cne);uto=r(Let,"barthez"),Let.forEach(t),_to=r(O$," \u2014 "),gP=n(O$,"A",{href:!0});var yet=s(gP);bto=r(yet,"BarthezTokenizer"),yet.forEach(t),vto=r(O$," or "),hP=n(O$,"A",{href:!0});var xet=s(hP);Fto=r(xet,"BarthezTokenizerFast"),xet.forEach(t),Tto=r(O$," (BARThez model)"),O$.forEach(t),Mto=i(S),Xg=n(S,"LI",{});var o6e=s(Xg);wne=n(o6e,"STRONG",{});var $et=s(wne);Eto=r($et,"bartpho"),$et.forEach(t),Cto=r(o6e," \u2014 "),pP=n(o6e,"A",{href:!0});var ket=s(pP);wto=r(ket,"BartphoTokenizer"),ket.forEach(t),Ato=r(o6e," (BARTpho model)"),o6e.forEach(t),Lto=i(S),Dn=n(S,"LI",{});var V$=s(Dn);Ane=n(V$,"STRONG",{});var Set=s(Ane);yto=r(Set,"bert"),Set.forEach(t),xto=r(V$," \u2014 "),uP=n(V$,"A",{href:!0});var Ret=s(uP);$to=r(Ret,"BertTokenizer"),Ret.forEach(t),kto=r(V$," or "),_P=n(V$,"A",{href:!0});var Pet=s(_P);Sto=r(Pet,"BertTokenizerFast"),Pet.forEach(t),Rto=r(V$," (BERT model)"),V$.forEach(t),Pto=i(S),zg=n(S,"LI",{});var r6e=s(zg);Lne=n(r6e,"STRONG",{});var Bet=s(Lne);Bto=r(Bet,"bert-generation"),Bet.forEach(t),Ito=r(r6e," \u2014 "),bP=n(r6e,"A",{href:!0});var Iet=s(bP);Nto=r(Iet,"BertGenerationTokenizer"),Iet.forEach(t),qto=r(r6e," (Bert Generation model)"),r6e.forEach(t),jto=i(S),Wg=n(S,"LI",{});var t6e=s(Wg);yne=n(t6e,"STRONG",{});var Net=s(yne);Dto=r(Net,"bert-japanese"),Net.forEach(t),Gto=r(t6e," \u2014 "),vP=n(t6e,"A",{href:!0});var qet=s(vP);Oto=r(qet,"BertJapaneseTokenizer"),qet.forEach(t),Vto=r(t6e," (BertJapanese model)"),t6e.forEach(t),Xto=i(S),Qg=n(S,"LI",{});var a6e=s(Qg);xne=n(a6e,"STRONG",{});var jet=s(xne);zto=r(jet,"bertweet"),jet.forEach(t),Wto=r(a6e," \u2014 "),FP=n(a6e,"A",{href:!0});var Det=s(FP);Qto=r(Det,"BertweetTokenizer"),Det.forEach(t),Hto=r(a6e," (BERTweet model)"),a6e.forEach(t),Uto=i(S),Gn=n(S,"LI",{});var X$=s(Gn);$ne=n(X$,"STRONG",{});var Get=s($ne);Jto=r(Get,"big_bird"),Get.forEach(t),Yto=r(X$," \u2014 "),TP=n(X$,"A",{href:!0});var Oet=s(TP);Kto=r(Oet,"BigBirdTokenizer"),Oet.forEach(t),Zto=r(X$," or "),MP=n(X$,"A",{href:!0});var Vet=s(MP);eao=r(Vet,"BigBirdTokenizerFast"),Vet.forEach(t),oao=r(X$," (BigBird model)"),X$.forEach(t),rao=i(S),On=n(S,"LI",{});var z$=s(On);kne=n(z$,"STRONG",{});var Xet=s(kne);tao=r(Xet,"bigbird_pegasus"),Xet.forEach(t),aao=r(z$," \u2014 "),EP=n(z$,"A",{href:!0});var zet=s(EP);nao=r(zet,"PegasusTokenizer"),zet.forEach(t),sao=r(z$," or "),CP=n(z$,"A",{href:!0});var Wet=s(CP);lao=r(Wet,"PegasusTokenizerFast"),Wet.forEach(t),iao=r(z$," (BigBird-Pegasus model)"),z$.forEach(t),dao=i(S),Vn=n(S,"LI",{});var W$=s(Vn);Sne=n(W$,"STRONG",{});var Qet=s(Sne);cao=r(Qet,"blenderbot"),Qet.forEach(t),fao=r(W$," \u2014 "),wP=n(W$,"A",{href:!0});var Het=s(wP);mao=r(Het,"BlenderbotTokenizer"),Het.forEach(t),gao=r(W$," or "),AP=n(W$,"A",{href:!0});var Uet=s(AP);hao=r(Uet,"BlenderbotTokenizerFast"),Uet.forEach(t),pao=r(W$," (Blenderbot model)"),W$.forEach(t),uao=i(S),Hg=n(S,"LI",{});var n6e=s(Hg);Rne=n(n6e,"STRONG",{});var Jet=s(Rne);_ao=r(Jet,"blenderbot-small"),Jet.forEach(t),bao=r(n6e," \u2014 "),LP=n(n6e,"A",{href:!0});var Yet=s(LP);vao=r(Yet,"BlenderbotSmallTokenizer"),Yet.forEach(t),Fao=r(n6e," (BlenderbotSmall model)"),n6e.forEach(t),Tao=i(S),Ug=n(S,"LI",{});var s6e=s(Ug);Pne=n(s6e,"STRONG",{});var Ket=s(Pne);Mao=r(Ket,"bloom"),Ket.forEach(t),Eao=r(s6e," \u2014 "),yP=n(s6e,"A",{href:!0});var Zet=s(yP);Cao=r(Zet,"BloomTokenizerFast"),Zet.forEach(t),wao=r(s6e," (BLOOM model)"),s6e.forEach(t),Aao=i(S),Jg=n(S,"LI",{});var l6e=s(Jg);Bne=n(l6e,"STRONG",{});var eot=s(Bne);Lao=r(eot,"byt5"),eot.forEach(t),yao=r(l6e," \u2014 "),xP=n(l6e,"A",{href:!0});var oot=s(xP);xao=r(oot,"ByT5Tokenizer"),oot.forEach(t),$ao=r(l6e," (ByT5 model)"),l6e.forEach(t),kao=i(S),Xn=n(S,"LI",{});var Q$=s(Xn);Ine=n(Q$,"STRONG",{});var rot=s(Ine);Sao=r(rot,"camembert"),rot.forEach(t),Rao=r(Q$," \u2014 "),$P=n(Q$,"A",{href:!0});var tot=s($P);Pao=r(tot,"CamembertTokenizer"),tot.forEach(t),Bao=r(Q$," or "),kP=n(Q$,"A",{href:!0});var aot=s(kP);Iao=r(aot,"CamembertTokenizerFast"),aot.forEach(t),Nao=r(Q$," (CamemBERT model)"),Q$.forEach(t),qao=i(S),Yg=n(S,"LI",{});var i6e=s(Yg);Nne=n(i6e,"STRONG",{});var not=s(Nne);jao=r(not,"canine"),not.forEach(t),Dao=r(i6e," \u2014 "),SP=n(i6e,"A",{href:!0});var sot=s(SP);Gao=r(sot,"CanineTokenizer"),sot.forEach(t),Oao=r(i6e," (CANINE model)"),i6e.forEach(t),Vao=i(S),zn=n(S,"LI",{});var H$=s(zn);qne=n(H$,"STRONG",{});var lot=s(qne);Xao=r(lot,"clip"),lot.forEach(t),zao=r(H$," \u2014 "),RP=n(H$,"A",{href:!0});var iot=s(RP);Wao=r(iot,"CLIPTokenizer"),iot.forEach(t),Qao=r(H$," or "),PP=n(H$,"A",{href:!0});var dot=s(PP);Hao=r(dot,"CLIPTokenizerFast"),dot.forEach(t),Uao=r(H$," (CLIP model)"),H$.forEach(t),Jao=i(S),Wn=n(S,"LI",{});var U$=s(Wn);jne=n(U$,"STRONG",{});var cot=s(jne);Yao=r(cot,"convbert"),cot.forEach(t),Kao=r(U$," \u2014 "),BP=n(U$,"A",{href:!0});var fot=s(BP);Zao=r(fot,"ConvBertTokenizer"),fot.forEach(t),eno=r(U$," or "),IP=n(U$,"A",{href:!0});var mot=s(IP);ono=r(mot,"ConvBertTokenizerFast"),mot.forEach(t),rno=r(U$," (ConvBERT model)"),U$.forEach(t),tno=i(S),Qn=n(S,"LI",{});var J$=s(Qn);Dne=n(J$,"STRONG",{});var got=s(Dne);ano=r(got,"cpm"),got.forEach(t),nno=r(J$," \u2014 "),NP=n(J$,"A",{href:!0});var hot=s(NP);sno=r(hot,"CpmTokenizer"),hot.forEach(t),lno=r(J$," or "),qP=n(J$,"A",{href:!0});var pot=s(qP);ino=r(pot,"CpmTokenizerFast"),pot.forEach(t),dno=r(J$," (CPM model)"),J$.forEach(t),cno=i(S),Kg=n(S,"LI",{});var d6e=s(Kg);Gne=n(d6e,"STRONG",{});var uot=s(Gne);fno=r(uot,"ctrl"),uot.forEach(t),mno=r(d6e," \u2014 "),jP=n(d6e,"A",{href:!0});var _ot=s(jP);gno=r(_ot,"CTRLTokenizer"),_ot.forEach(t),hno=r(d6e," (CTRL model)"),d6e.forEach(t),pno=i(S),Hn=n(S,"LI",{});var Y$=s(Hn);One=n(Y$,"STRONG",{});var bot=s(One);uno=r(bot,"data2vec-text"),bot.forEach(t),_no=r(Y$," \u2014 "),DP=n(Y$,"A",{href:!0});var vot=s(DP);bno=r(vot,"RobertaTokenizer"),vot.forEach(t),vno=r(Y$," or "),GP=n(Y$,"A",{href:!0});var Fot=s(GP);Fno=r(Fot,"RobertaTokenizerFast"),Fot.forEach(t),Tno=r(Y$," (Data2VecText model)"),Y$.forEach(t),Mno=i(S),Un=n(S,"LI",{});var K$=s(Un);Vne=n(K$,"STRONG",{});var Tot=s(Vne);Eno=r(Tot,"deberta"),Tot.forEach(t),Cno=r(K$," \u2014 "),OP=n(K$,"A",{href:!0});var Mot=s(OP);wno=r(Mot,"DebertaTokenizer"),Mot.forEach(t),Ano=r(K$," or "),VP=n(K$,"A",{href:!0});var Eot=s(VP);Lno=r(Eot,"DebertaTokenizerFast"),Eot.forEach(t),yno=r(K$," (DeBERTa model)"),K$.forEach(t),xno=i(S),Jn=n(S,"LI",{});var Z$=s(Jn);Xne=n(Z$,"STRONG",{});var Cot=s(Xne);$no=r(Cot,"deberta-v2"),Cot.forEach(t),kno=r(Z$," \u2014 "),XP=n(Z$,"A",{href:!0});var wot=s(XP);Sno=r(wot,"DebertaV2Tokenizer"),wot.forEach(t),Rno=r(Z$," or "),zP=n(Z$,"A",{href:!0});var Aot=s(zP);Pno=r(Aot,"DebertaV2TokenizerFast"),Aot.forEach(t),Bno=r(Z$," (DeBERTa-v2 model)"),Z$.forEach(t),Ino=i(S),Yn=n(S,"LI",{});var ek=s(Yn);zne=n(ek,"STRONG",{});var Lot=s(zne);Nno=r(Lot,"distilbert"),Lot.forEach(t),qno=r(ek," \u2014 "),WP=n(ek,"A",{href:!0});var yot=s(WP);jno=r(yot,"DistilBertTokenizer"),yot.forEach(t),Dno=r(ek," or "),QP=n(ek,"A",{href:!0});var xot=s(QP);Gno=r(xot,"DistilBertTokenizerFast"),xot.forEach(t),Ono=r(ek," (DistilBERT model)"),ek.forEach(t),Vno=i(S),Kn=n(S,"LI",{});var ok=s(Kn);Wne=n(ok,"STRONG",{});var $ot=s(Wne);Xno=r($ot,"dpr"),$ot.forEach(t),zno=r(ok," \u2014 "),HP=n(ok,"A",{href:!0});var kot=s(HP);Wno=r(kot,"DPRQuestionEncoderTokenizer"),kot.forEach(t),Qno=r(ok," or "),UP=n(ok,"A",{href:!0});var Sot=s(UP);Hno=r(Sot,"DPRQuestionEncoderTokenizerFast"),Sot.forEach(t),Uno=r(ok," (DPR model)"),ok.forEach(t),Jno=i(S),Zn=n(S,"LI",{});var rk=s(Zn);Qne=n(rk,"STRONG",{});var Rot=s(Qne);Yno=r(Rot,"electra"),Rot.forEach(t),Kno=r(rk," \u2014 "),JP=n(rk,"A",{href:!0});var Pot=s(JP);Zno=r(Pot,"ElectraTokenizer"),Pot.forEach(t),eso=r(rk," or "),YP=n(rk,"A",{href:!0});var Bot=s(YP);oso=r(Bot,"ElectraTokenizerFast"),Bot.forEach(t),rso=r(rk," (ELECTRA model)"),rk.forEach(t),tso=i(S),Zg=n(S,"LI",{});var c6e=s(Zg);Hne=n(c6e,"STRONG",{});var Iot=s(Hne);aso=r(Iot,"flaubert"),Iot.forEach(t),nso=r(c6e," \u2014 "),KP=n(c6e,"A",{href:!0});var Not=s(KP);sso=r(Not,"FlaubertTokenizer"),Not.forEach(t),lso=r(c6e," (FlauBERT model)"),c6e.forEach(t),iso=i(S),es=n(S,"LI",{});var tk=s(es);Une=n(tk,"STRONG",{});var qot=s(Une);dso=r(qot,"fnet"),qot.forEach(t),cso=r(tk," \u2014 "),ZP=n(tk,"A",{href:!0});var jot=s(ZP);fso=r(jot,"FNetTokenizer"),jot.forEach(t),mso=r(tk," or "),eB=n(tk,"A",{href:!0});var Dot=s(eB);gso=r(Dot,"FNetTokenizerFast"),Dot.forEach(t),hso=r(tk," (FNet model)"),tk.forEach(t),pso=i(S),eh=n(S,"LI",{});var f6e=s(eh);Jne=n(f6e,"STRONG",{});var Got=s(Jne);uso=r(Got,"fsmt"),Got.forEach(t),_so=r(f6e," \u2014 "),oB=n(f6e,"A",{href:!0});var Oot=s(oB);bso=r(Oot,"FSMTTokenizer"),Oot.forEach(t),vso=r(f6e," (FairSeq Machine-Translation model)"),f6e.forEach(t),Fso=i(S),os=n(S,"LI",{});var ak=s(os);Yne=n(ak,"STRONG",{});var Vot=s(Yne);Tso=r(Vot,"funnel"),Vot.forEach(t),Mso=r(ak," \u2014 "),rB=n(ak,"A",{href:!0});var Xot=s(rB);Eso=r(Xot,"FunnelTokenizer"),Xot.forEach(t),Cso=r(ak," or "),tB=n(ak,"A",{href:!0});var zot=s(tB);wso=r(zot,"FunnelTokenizerFast"),zot.forEach(t),Aso=r(ak," (Funnel Transformer model)"),ak.forEach(t),Lso=i(S),rs=n(S,"LI",{});var nk=s(rs);Kne=n(nk,"STRONG",{});var Wot=s(Kne);yso=r(Wot,"gpt2"),Wot.forEach(t),xso=r(nk," \u2014 "),aB=n(nk,"A",{href:!0});var Qot=s(aB);$so=r(Qot,"GPT2Tokenizer"),Qot.forEach(t),kso=r(nk," or "),nB=n(nk,"A",{href:!0});var Hot=s(nB);Sso=r(Hot,"GPT2TokenizerFast"),Hot.forEach(t),Rso=r(nk," (OpenAI GPT-2 model)"),nk.forEach(t),Pso=i(S),ts=n(S,"LI",{});var sk=s(ts);Zne=n(sk,"STRONG",{});var Uot=s(Zne);Bso=r(Uot,"gpt_neo"),Uot.forEach(t),Iso=r(sk," \u2014 "),sB=n(sk,"A",{href:!0});var Jot=s(sB);Nso=r(Jot,"GPT2Tokenizer"),Jot.forEach(t),qso=r(sk," or "),lB=n(sk,"A",{href:!0});var Yot=s(lB);jso=r(Yot,"GPT2TokenizerFast"),Yot.forEach(t),Dso=r(sk," (GPT Neo model)"),sk.forEach(t),Gso=i(S),oh=n(S,"LI",{});var m6e=s(oh);ese=n(m6e,"STRONG",{});var Kot=s(ese);Oso=r(Kot,"gpt_neox"),Kot.forEach(t),Vso=r(m6e," \u2014 "),iB=n(m6e,"A",{href:!0});var Zot=s(iB);Xso=r(Zot,"GPTNeoXTokenizerFast"),Zot.forEach(t),zso=r(m6e," (GPT NeoX model)"),m6e.forEach(t),Wso=i(S),as=n(S,"LI",{});var lk=s(as);ose=n(lk,"STRONG",{});var ert=s(ose);Qso=r(ert,"gptj"),ert.forEach(t),Hso=r(lk," \u2014 "),dB=n(lk,"A",{href:!0});var ort=s(dB);Uso=r(ort,"GPT2Tokenizer"),ort.forEach(t),Jso=r(lk," or "),cB=n(lk,"A",{href:!0});var rrt=s(cB);Yso=r(rrt,"GPT2TokenizerFast"),rrt.forEach(t),Kso=r(lk," (GPT-J model)"),lk.forEach(t),Zso=i(S),ns=n(S,"LI",{});var ik=s(ns);rse=n(ik,"STRONG",{});var trt=s(rse);elo=r(trt,"herbert"),trt.forEach(t),olo=r(ik," \u2014 "),fB=n(ik,"A",{href:!0});var art=s(fB);rlo=r(art,"HerbertTokenizer"),art.forEach(t),tlo=r(ik," or "),mB=n(ik,"A",{href:!0});var nrt=s(mB);alo=r(nrt,"HerbertTokenizerFast"),nrt.forEach(t),nlo=r(ik," (HerBERT model)"),ik.forEach(t),slo=i(S),rh=n(S,"LI",{});var g6e=s(rh);tse=n(g6e,"STRONG",{});var srt=s(tse);llo=r(srt,"hubert"),srt.forEach(t),ilo=r(g6e," \u2014 "),gB=n(g6e,"A",{href:!0});var lrt=s(gB);dlo=r(lrt,"Wav2Vec2CTCTokenizer"),lrt.forEach(t),clo=r(g6e," (Hubert model)"),g6e.forEach(t),flo=i(S),ss=n(S,"LI",{});var dk=s(ss);ase=n(dk,"STRONG",{});var irt=s(ase);mlo=r(irt,"ibert"),irt.forEach(t),glo=r(dk," \u2014 "),hB=n(dk,"A",{href:!0});var drt=s(hB);hlo=r(drt,"RobertaTokenizer"),drt.forEach(t),plo=r(dk," or "),pB=n(dk,"A",{href:!0});var crt=s(pB);ulo=r(crt,"RobertaTokenizerFast"),crt.forEach(t),_lo=r(dk," (I-BERT model)"),dk.forEach(t),blo=i(S),ls=n(S,"LI",{});var ck=s(ls);nse=n(ck,"STRONG",{});var frt=s(nse);vlo=r(frt,"layoutlm"),frt.forEach(t),Flo=r(ck," \u2014 "),uB=n(ck,"A",{href:!0});var mrt=s(uB);Tlo=r(mrt,"LayoutLMTokenizer"),mrt.forEach(t),Mlo=r(ck," or "),_B=n(ck,"A",{href:!0});var grt=s(_B);Elo=r(grt,"LayoutLMTokenizerFast"),grt.forEach(t),Clo=r(ck," (LayoutLM model)"),ck.forEach(t),wlo=i(S),is=n(S,"LI",{});var fk=s(is);sse=n(fk,"STRONG",{});var hrt=s(sse);Alo=r(hrt,"layoutlmv2"),hrt.forEach(t),Llo=r(fk," \u2014 "),bB=n(fk,"A",{href:!0});var prt=s(bB);ylo=r(prt,"LayoutLMv2Tokenizer"),prt.forEach(t),xlo=r(fk," or "),vB=n(fk,"A",{href:!0});var urt=s(vB);$lo=r(urt,"LayoutLMv2TokenizerFast"),urt.forEach(t),klo=r(fk," (LayoutLMv2 model)"),fk.forEach(t),Slo=i(S),ds=n(S,"LI",{});var mk=s(ds);lse=n(mk,"STRONG",{});var _rt=s(lse);Rlo=r(_rt,"layoutlmv3"),_rt.forEach(t),Plo=r(mk," \u2014 "),FB=n(mk,"A",{href:!0});var brt=s(FB);Blo=r(brt,"LayoutLMv3Tokenizer"),brt.forEach(t),Ilo=r(mk," or "),TB=n(mk,"A",{href:!0});var vrt=s(TB);Nlo=r(vrt,"LayoutLMv3TokenizerFast"),vrt.forEach(t),qlo=r(mk," (LayoutLMv3 model)"),mk.forEach(t),jlo=i(S),cs=n(S,"LI",{});var gk=s(cs);ise=n(gk,"STRONG",{});var Frt=s(ise);Dlo=r(Frt,"layoutxlm"),Frt.forEach(t),Glo=r(gk," \u2014 "),MB=n(gk,"A",{href:!0});var Trt=s(MB);Olo=r(Trt,"LayoutXLMTokenizer"),Trt.forEach(t),Vlo=r(gk," or "),EB=n(gk,"A",{href:!0});var Mrt=s(EB);Xlo=r(Mrt,"LayoutXLMTokenizerFast"),Mrt.forEach(t),zlo=r(gk," (LayoutXLM model)"),gk.forEach(t),Wlo=i(S),fs=n(S,"LI",{});var hk=s(fs);dse=n(hk,"STRONG",{});var Ert=s(dse);Qlo=r(Ert,"led"),Ert.forEach(t),Hlo=r(hk," \u2014 "),CB=n(hk,"A",{href:!0});var Crt=s(CB);Ulo=r(Crt,"LEDTokenizer"),Crt.forEach(t),Jlo=r(hk," or "),wB=n(hk,"A",{href:!0});var wrt=s(wB);Ylo=r(wrt,"LEDTokenizerFast"),wrt.forEach(t),Klo=r(hk," (LED model)"),hk.forEach(t),Zlo=i(S),ms=n(S,"LI",{});var pk=s(ms);cse=n(pk,"STRONG",{});var Art=s(cse);eio=r(Art,"longformer"),Art.forEach(t),oio=r(pk," \u2014 "),AB=n(pk,"A",{href:!0});var Lrt=s(AB);rio=r(Lrt,"LongformerTokenizer"),Lrt.forEach(t),tio=r(pk," or "),LB=n(pk,"A",{href:!0});var yrt=s(LB);aio=r(yrt,"LongformerTokenizerFast"),yrt.forEach(t),nio=r(pk," (Longformer model)"),pk.forEach(t),sio=i(S),gs=n(S,"LI",{});var uk=s(gs);fse=n(uk,"STRONG",{});var xrt=s(fse);lio=r(xrt,"longt5"),xrt.forEach(t),iio=r(uk," \u2014 "),yB=n(uk,"A",{href:!0});var $rt=s(yB);dio=r($rt,"T5Tokenizer"),$rt.forEach(t),cio=r(uk," or "),xB=n(uk,"A",{href:!0});var krt=s(xB);fio=r(krt,"T5TokenizerFast"),krt.forEach(t),mio=r(uk," (LongT5 model)"),uk.forEach(t),gio=i(S),th=n(S,"LI",{});var h6e=s(th);mse=n(h6e,"STRONG",{});var Srt=s(mse);hio=r(Srt,"luke"),Srt.forEach(t),pio=r(h6e," \u2014 "),$B=n(h6e,"A",{href:!0});var Rrt=s($B);uio=r(Rrt,"LukeTokenizer"),Rrt.forEach(t),_io=r(h6e," (LUKE model)"),h6e.forEach(t),bio=i(S),hs=n(S,"LI",{});var _k=s(hs);gse=n(_k,"STRONG",{});var Prt=s(gse);vio=r(Prt,"lxmert"),Prt.forEach(t),Fio=r(_k," \u2014 "),kB=n(_k,"A",{href:!0});var Brt=s(kB);Tio=r(Brt,"LxmertTokenizer"),Brt.forEach(t),Mio=r(_k," or "),SB=n(_k,"A",{href:!0});var Irt=s(SB);Eio=r(Irt,"LxmertTokenizerFast"),Irt.forEach(t),Cio=r(_k," (LXMERT model)"),_k.forEach(t),wio=i(S),ah=n(S,"LI",{});var p6e=s(ah);hse=n(p6e,"STRONG",{});var Nrt=s(hse);Aio=r(Nrt,"m2m_100"),Nrt.forEach(t),Lio=r(p6e," \u2014 "),RB=n(p6e,"A",{href:!0});var qrt=s(RB);yio=r(qrt,"M2M100Tokenizer"),qrt.forEach(t),xio=r(p6e," (M2M100 model)"),p6e.forEach(t),$io=i(S),nh=n(S,"LI",{});var u6e=s(nh);pse=n(u6e,"STRONG",{});var jrt=s(pse);kio=r(jrt,"marian"),jrt.forEach(t),Sio=r(u6e," \u2014 "),PB=n(u6e,"A",{href:!0});var Drt=s(PB);Rio=r(Drt,"MarianTokenizer"),Drt.forEach(t),Pio=r(u6e," (Marian model)"),u6e.forEach(t),Bio=i(S),ps=n(S,"LI",{});var bk=s(ps);use=n(bk,"STRONG",{});var Grt=s(use);Iio=r(Grt,"mbart"),Grt.forEach(t),Nio=r(bk," \u2014 "),BB=n(bk,"A",{href:!0});var Ort=s(BB);qio=r(Ort,"MBartTokenizer"),Ort.forEach(t),jio=r(bk," or "),IB=n(bk,"A",{href:!0});var Vrt=s(IB);Dio=r(Vrt,"MBartTokenizerFast"),Vrt.forEach(t),Gio=r(bk," (mBART model)"),bk.forEach(t),Oio=i(S),us=n(S,"LI",{});var vk=s(us);_se=n(vk,"STRONG",{});var Xrt=s(_se);Vio=r(Xrt,"mbart50"),Xrt.forEach(t),Xio=r(vk," \u2014 "),NB=n(vk,"A",{href:!0});var zrt=s(NB);zio=r(zrt,"MBart50Tokenizer"),zrt.forEach(t),Wio=r(vk," or "),qB=n(vk,"A",{href:!0});var Wrt=s(qB);Qio=r(Wrt,"MBart50TokenizerFast"),Wrt.forEach(t),Hio=r(vk," (mBART-50 model)"),vk.forEach(t),Uio=i(S),_s=n(S,"LI",{});var Fk=s(_s);bse=n(Fk,"STRONG",{});var Qrt=s(bse);Jio=r(Qrt,"megatron-bert"),Qrt.forEach(t),Yio=r(Fk," \u2014 "),jB=n(Fk,"A",{href:!0});var Hrt=s(jB);Kio=r(Hrt,"BertTokenizer"),Hrt.forEach(t),Zio=r(Fk," or "),DB=n(Fk,"A",{href:!0});var Urt=s(DB);edo=r(Urt,"BertTokenizerFast"),Urt.forEach(t),odo=r(Fk," (Megatron-BERT model)"),Fk.forEach(t),rdo=i(S),sh=n(S,"LI",{});var _6e=s(sh);vse=n(_6e,"STRONG",{});var Jrt=s(vse);tdo=r(Jrt,"mluke"),Jrt.forEach(t),ado=r(_6e," \u2014 "),GB=n(_6e,"A",{href:!0});var Yrt=s(GB);ndo=r(Yrt,"MLukeTokenizer"),Yrt.forEach(t),sdo=r(_6e," (mLUKE model)"),_6e.forEach(t),ldo=i(S),bs=n(S,"LI",{});var Tk=s(bs);Fse=n(Tk,"STRONG",{});var Krt=s(Fse);ido=r(Krt,"mobilebert"),Krt.forEach(t),ddo=r(Tk," \u2014 "),OB=n(Tk,"A",{href:!0});var Zrt=s(OB);cdo=r(Zrt,"MobileBertTokenizer"),Zrt.forEach(t),fdo=r(Tk," or "),VB=n(Tk,"A",{href:!0});var ett=s(VB);mdo=r(ett,"MobileBertTokenizerFast"),ett.forEach(t),gdo=r(Tk," (MobileBERT model)"),Tk.forEach(t),hdo=i(S),vs=n(S,"LI",{});var Mk=s(vs);Tse=n(Mk,"STRONG",{});var ott=s(Tse);pdo=r(ott,"mpnet"),ott.forEach(t),udo=r(Mk," \u2014 "),XB=n(Mk,"A",{href:!0});var rtt=s(XB);_do=r(rtt,"MPNetTokenizer"),rtt.forEach(t),bdo=r(Mk," or "),zB=n(Mk,"A",{href:!0});var ttt=s(zB);vdo=r(ttt,"MPNetTokenizerFast"),ttt.forEach(t),Fdo=r(Mk," (MPNet model)"),Mk.forEach(t),Tdo=i(S),Fs=n(S,"LI",{});var Ek=s(Fs);Mse=n(Ek,"STRONG",{});var att=s(Mse);Mdo=r(att,"mt5"),att.forEach(t),Edo=r(Ek," \u2014 "),WB=n(Ek,"A",{href:!0});var ntt=s(WB);Cdo=r(ntt,"MT5Tokenizer"),ntt.forEach(t),wdo=r(Ek," or "),QB=n(Ek,"A",{href:!0});var stt=s(QB);Ado=r(stt,"MT5TokenizerFast"),stt.forEach(t),Ldo=r(Ek," (MT5 model)"),Ek.forEach(t),ydo=i(S),Ts=n(S,"LI",{});var Ck=s(Ts);Ese=n(Ck,"STRONG",{});var ltt=s(Ese);xdo=r(ltt,"nystromformer"),ltt.forEach(t),$do=r(Ck," \u2014 "),HB=n(Ck,"A",{href:!0});var itt=s(HB);kdo=r(itt,"AlbertTokenizer"),itt.forEach(t),Sdo=r(Ck," or "),UB=n(Ck,"A",{href:!0});var dtt=s(UB);Rdo=r(dtt,"AlbertTokenizerFast"),dtt.forEach(t),Pdo=r(Ck," (Nystr\xF6mformer model)"),Ck.forEach(t),Bdo=i(S),Ms=n(S,"LI",{});var wk=s(Ms);Cse=n(wk,"STRONG",{});var ctt=s(Cse);Ido=r(ctt,"ofa"),ctt.forEach(t),Ndo=r(wk," \u2014 "),JB=n(wk,"A",{href:!0});var ftt=s(JB);qdo=r(ftt,"OFATokenizer"),ftt.forEach(t),jdo=r(wk," or "),YB=n(wk,"A",{href:!0});var mtt=s(YB);Ddo=r(mtt,"OFATokenizerFast"),mtt.forEach(t),Gdo=r(wk," (OFA model)"),wk.forEach(t),Odo=i(S),Es=n(S,"LI",{});var Ak=s(Es);wse=n(Ak,"STRONG",{});var gtt=s(wse);Vdo=r(gtt,"openai-gpt"),gtt.forEach(t),Xdo=r(Ak," \u2014 "),KB=n(Ak,"A",{href:!0});var htt=s(KB);zdo=r(htt,"OpenAIGPTTokenizer"),htt.forEach(t),Wdo=r(Ak," or "),ZB=n(Ak,"A",{href:!0});var ptt=s(ZB);Qdo=r(ptt,"OpenAIGPTTokenizerFast"),ptt.forEach(t),Hdo=r(Ak," (OpenAI GPT model)"),Ak.forEach(t),Udo=i(S),lh=n(S,"LI",{});var b6e=s(lh);Ase=n(b6e,"STRONG",{});var utt=s(Ase);Jdo=r(utt,"opt"),utt.forEach(t),Ydo=r(b6e," \u2014 "),eI=n(b6e,"A",{href:!0});var _tt=s(eI);Kdo=r(_tt,"GPT2Tokenizer"),_tt.forEach(t),Zdo=r(b6e," (OPT model)"),b6e.forEach(t),eco=i(S),Cs=n(S,"LI",{});var Lk=s(Cs);Lse=n(Lk,"STRONG",{});var btt=s(Lse);oco=r(btt,"pegasus"),btt.forEach(t),rco=r(Lk," \u2014 "),oI=n(Lk,"A",{href:!0});var vtt=s(oI);tco=r(vtt,"PegasusTokenizer"),vtt.forEach(t),aco=r(Lk," or "),rI=n(Lk,"A",{href:!0});var Ftt=s(rI);nco=r(Ftt,"PegasusTokenizerFast"),Ftt.forEach(t),sco=r(Lk," (Pegasus model)"),Lk.forEach(t),lco=i(S),ih=n(S,"LI",{});var v6e=s(ih);yse=n(v6e,"STRONG",{});var Ttt=s(yse);ico=r(Ttt,"perceiver"),Ttt.forEach(t),dco=r(v6e," \u2014 "),tI=n(v6e,"A",{href:!0});var Mtt=s(tI);cco=r(Mtt,"PerceiverTokenizer"),Mtt.forEach(t),fco=r(v6e," (Perceiver model)"),v6e.forEach(t),mco=i(S),dh=n(S,"LI",{});var F6e=s(dh);xse=n(F6e,"STRONG",{});var Ett=s(xse);gco=r(Ett,"phobert"),Ett.forEach(t),hco=r(F6e," \u2014 "),aI=n(F6e,"A",{href:!0});var Ctt=s(aI);pco=r(Ctt,"PhobertTokenizer"),Ctt.forEach(t),uco=r(F6e," (PhoBERT model)"),F6e.forEach(t),_co=i(S),ch=n(S,"LI",{});var T6e=s(ch);$se=n(T6e,"STRONG",{});var wtt=s($se);bco=r(wtt,"plbart"),wtt.forEach(t),vco=r(T6e," \u2014 "),nI=n(T6e,"A",{href:!0});var Att=s(nI);Fco=r(Att,"PLBartTokenizer"),Att.forEach(t),Tco=r(T6e," (PLBart model)"),T6e.forEach(t),Mco=i(S),fh=n(S,"LI",{});var M6e=s(fh);kse=n(M6e,"STRONG",{});var Ltt=s(kse);Eco=r(Ltt,"prophetnet"),Ltt.forEach(t),Cco=r(M6e," \u2014 "),sI=n(M6e,"A",{href:!0});var ytt=s(sI);wco=r(ytt,"ProphetNetTokenizer"),ytt.forEach(t),Aco=r(M6e," (ProphetNet model)"),M6e.forEach(t),Lco=i(S),ws=n(S,"LI",{});var yk=s(ws);Sse=n(yk,"STRONG",{});var xtt=s(Sse);yco=r(xtt,"qdqbert"),xtt.forEach(t),xco=r(yk," \u2014 "),lI=n(yk,"A",{href:!0});var $tt=s(lI);$co=r($tt,"BertTokenizer"),$tt.forEach(t),kco=r(yk," or "),iI=n(yk,"A",{href:!0});var ktt=s(iI);Sco=r(ktt,"BertTokenizerFast"),ktt.forEach(t),Rco=r(yk," (QDQBert model)"),yk.forEach(t),Pco=i(S),mh=n(S,"LI",{});var E6e=s(mh);Rse=n(E6e,"STRONG",{});var Stt=s(Rse);Bco=r(Stt,"rag"),Stt.forEach(t),Ico=r(E6e," \u2014 "),dI=n(E6e,"A",{href:!0});var Rtt=s(dI);Nco=r(Rtt,"RagTokenizer"),Rtt.forEach(t),qco=r(E6e," (RAG model)"),E6e.forEach(t),jco=i(S),As=n(S,"LI",{});var xk=s(As);Pse=n(xk,"STRONG",{});var Ptt=s(Pse);Dco=r(Ptt,"realm"),Ptt.forEach(t),Gco=r(xk," \u2014 "),cI=n(xk,"A",{href:!0});var Btt=s(cI);Oco=r(Btt,"RealmTokenizer"),Btt.forEach(t),Vco=r(xk," or "),fI=n(xk,"A",{href:!0});var Itt=s(fI);Xco=r(Itt,"RealmTokenizerFast"),Itt.forEach(t),zco=r(xk," (REALM model)"),xk.forEach(t),Wco=i(S),Ls=n(S,"LI",{});var $k=s(Ls);Bse=n($k,"STRONG",{});var Ntt=s(Bse);Qco=r(Ntt,"reformer"),Ntt.forEach(t),Hco=r($k," \u2014 "),mI=n($k,"A",{href:!0});var qtt=s(mI);Uco=r(qtt,"ReformerTokenizer"),qtt.forEach(t),Jco=r($k," or "),gI=n($k,"A",{href:!0});var jtt=s(gI);Yco=r(jtt,"ReformerTokenizerFast"),jtt.forEach(t),Kco=r($k," (Reformer model)"),$k.forEach(t),Zco=i(S),ys=n(S,"LI",{});var kk=s(ys);Ise=n(kk,"STRONG",{});var Dtt=s(Ise);efo=r(Dtt,"rembert"),Dtt.forEach(t),ofo=r(kk," \u2014 "),hI=n(kk,"A",{href:!0});var Gtt=s(hI);rfo=r(Gtt,"RemBertTokenizer"),Gtt.forEach(t),tfo=r(kk," or "),pI=n(kk,"A",{href:!0});var Ott=s(pI);afo=r(Ott,"RemBertTokenizerFast"),Ott.forEach(t),nfo=r(kk," (RemBERT model)"),kk.forEach(t),sfo=i(S),xs=n(S,"LI",{});var Sk=s(xs);Nse=n(Sk,"STRONG",{});var Vtt=s(Nse);lfo=r(Vtt,"retribert"),Vtt.forEach(t),ifo=r(Sk," \u2014 "),uI=n(Sk,"A",{href:!0});var Xtt=s(uI);dfo=r(Xtt,"RetriBertTokenizer"),Xtt.forEach(t),cfo=r(Sk," or "),_I=n(Sk,"A",{href:!0});var ztt=s(_I);ffo=r(ztt,"RetriBertTokenizerFast"),ztt.forEach(t),mfo=r(Sk," (RetriBERT model)"),Sk.forEach(t),gfo=i(S),$s=n(S,"LI",{});var Rk=s($s);qse=n(Rk,"STRONG",{});var Wtt=s(qse);hfo=r(Wtt,"roberta"),Wtt.forEach(t),pfo=r(Rk," \u2014 "),bI=n(Rk,"A",{href:!0});var Qtt=s(bI);ufo=r(Qtt,"RobertaTokenizer"),Qtt.forEach(t),_fo=r(Rk," or "),vI=n(Rk,"A",{href:!0});var Htt=s(vI);bfo=r(Htt,"RobertaTokenizerFast"),Htt.forEach(t),vfo=r(Rk," (RoBERTa model)"),Rk.forEach(t),Ffo=i(S),ks=n(S,"LI",{});var Pk=s(ks);jse=n(Pk,"STRONG",{});var Utt=s(jse);Tfo=r(Utt,"roformer"),Utt.forEach(t),Mfo=r(Pk," \u2014 "),FI=n(Pk,"A",{href:!0});var Jtt=s(FI);Efo=r(Jtt,"RoFormerTokenizer"),Jtt.forEach(t),Cfo=r(Pk," or "),TI=n(Pk,"A",{href:!0});var Ytt=s(TI);wfo=r(Ytt,"RoFormerTokenizerFast"),Ytt.forEach(t),Afo=r(Pk," (RoFormer model)"),Pk.forEach(t),Lfo=i(S),gh=n(S,"LI",{});var C6e=s(gh);Dse=n(C6e,"STRONG",{});var Ktt=s(Dse);yfo=r(Ktt,"speech_to_text"),Ktt.forEach(t),xfo=r(C6e," \u2014 "),MI=n(C6e,"A",{href:!0});var Ztt=s(MI);$fo=r(Ztt,"Speech2TextTokenizer"),Ztt.forEach(t),kfo=r(C6e," (Speech2Text model)"),C6e.forEach(t),Sfo=i(S),hh=n(S,"LI",{});var w6e=s(hh);Gse=n(w6e,"STRONG",{});var eat=s(Gse);Rfo=r(eat,"speech_to_text_2"),eat.forEach(t),Pfo=r(w6e," \u2014 "),EI=n(w6e,"A",{href:!0});var oat=s(EI);Bfo=r(oat,"Speech2Text2Tokenizer"),oat.forEach(t),Ifo=r(w6e," (Speech2Text2 model)"),w6e.forEach(t),Nfo=i(S),Ss=n(S,"LI",{});var Bk=s(Ss);Ose=n(Bk,"STRONG",{});var rat=s(Ose);qfo=r(rat,"splinter"),rat.forEach(t),jfo=r(Bk," \u2014 "),CI=n(Bk,"A",{href:!0});var tat=s(CI);Dfo=r(tat,"SplinterTokenizer"),tat.forEach(t),Gfo=r(Bk," or "),wI=n(Bk,"A",{href:!0});var aat=s(wI);Ofo=r(aat,"SplinterTokenizerFast"),aat.forEach(t),Vfo=r(Bk," (Splinter model)"),Bk.forEach(t),Xfo=i(S),Rs=n(S,"LI",{});var Ik=s(Rs);Vse=n(Ik,"STRONG",{});var nat=s(Vse);zfo=r(nat,"squeezebert"),nat.forEach(t),Wfo=r(Ik," \u2014 "),AI=n(Ik,"A",{href:!0});var sat=s(AI);Qfo=r(sat,"SqueezeBertTokenizer"),sat.forEach(t),Hfo=r(Ik," or "),LI=n(Ik,"A",{href:!0});var lat=s(LI);Ufo=r(lat,"SqueezeBertTokenizerFast"),lat.forEach(t),Jfo=r(Ik," (SqueezeBERT model)"),Ik.forEach(t),Yfo=i(S),Ps=n(S,"LI",{});var Nk=s(Ps);Xse=n(Nk,"STRONG",{});var iat=s(Xse);Kfo=r(iat,"t5"),iat.forEach(t),Zfo=r(Nk," \u2014 "),yI=n(Nk,"A",{href:!0});var dat=s(yI);emo=r(dat,"T5Tokenizer"),dat.forEach(t),omo=r(Nk," or "),xI=n(Nk,"A",{href:!0});var cat=s(xI);rmo=r(cat,"T5TokenizerFast"),cat.forEach(t),tmo=r(Nk," (T5 model)"),Nk.forEach(t),amo=i(S),ph=n(S,"LI",{});var A6e=s(ph);zse=n(A6e,"STRONG",{});var fat=s(zse);nmo=r(fat,"tapas"),fat.forEach(t),smo=r(A6e," \u2014 "),$I=n(A6e,"A",{href:!0});var mat=s($I);lmo=r(mat,"TapasTokenizer"),mat.forEach(t),imo=r(A6e," (TAPAS model)"),A6e.forEach(t),dmo=i(S),uh=n(S,"LI",{});var L6e=s(uh);Wse=n(L6e,"STRONG",{});var gat=s(Wse);cmo=r(gat,"tapex"),gat.forEach(t),fmo=r(L6e," \u2014 "),kI=n(L6e,"A",{href:!0});var hat=s(kI);mmo=r(hat,"TapexTokenizer"),hat.forEach(t),gmo=r(L6e," (TAPEX model)"),L6e.forEach(t),hmo=i(S),_h=n(S,"LI",{});var y6e=s(_h);Qse=n(y6e,"STRONG",{});var pat=s(Qse);pmo=r(pat,"transfo-xl"),pat.forEach(t),umo=r(y6e," \u2014 "),SI=n(y6e,"A",{href:!0});var uat=s(SI);_mo=r(uat,"TransfoXLTokenizer"),uat.forEach(t),bmo=r(y6e," (Transformer-XL model)"),y6e.forEach(t),vmo=i(S),Bs=n(S,"LI",{});var qk=s(Bs);Hse=n(qk,"STRONG",{});var _at=s(Hse);Fmo=r(_at,"vilt"),_at.forEach(t),Tmo=r(qk," \u2014 "),RI=n(qk,"A",{href:!0});var bat=s(RI);Mmo=r(bat,"BertTokenizer"),bat.forEach(t),Emo=r(qk," or "),PI=n(qk,"A",{href:!0});var vat=s(PI);Cmo=r(vat,"BertTokenizerFast"),vat.forEach(t),wmo=r(qk," (ViLT model)"),qk.forEach(t),Amo=i(S),Is=n(S,"LI",{});var jk=s(Is);Use=n(jk,"STRONG",{});var Fat=s(Use);Lmo=r(Fat,"visual_bert"),Fat.forEach(t),ymo=r(jk," \u2014 "),BI=n(jk,"A",{href:!0});var Tat=s(BI);xmo=r(Tat,"BertTokenizer"),Tat.forEach(t),$mo=r(jk," or "),II=n(jk,"A",{href:!0});var Mat=s(II);kmo=r(Mat,"BertTokenizerFast"),Mat.forEach(t),Smo=r(jk," (VisualBERT model)"),jk.forEach(t),Rmo=i(S),bh=n(S,"LI",{});var x6e=s(bh);Jse=n(x6e,"STRONG",{});var Eat=s(Jse);Pmo=r(Eat,"wav2vec2"),Eat.forEach(t),Bmo=r(x6e," \u2014 "),NI=n(x6e,"A",{href:!0});var Cat=s(NI);Imo=r(Cat,"Wav2Vec2CTCTokenizer"),Cat.forEach(t),Nmo=r(x6e," (Wav2Vec2 model)"),x6e.forEach(t),qmo=i(S),vh=n(S,"LI",{});var $6e=s(vh);Yse=n($6e,"STRONG",{});var wat=s(Yse);jmo=r(wat,"wav2vec2-conformer"),wat.forEach(t),Dmo=r($6e," \u2014 "),qI=n($6e,"A",{href:!0});var Aat=s(qI);Gmo=r(Aat,"Wav2Vec2CTCTokenizer"),Aat.forEach(t),Omo=r($6e," (Wav2Vec2-Conformer model)"),$6e.forEach(t),Vmo=i(S),Fh=n(S,"LI",{});var k6e=s(Fh);Kse=n(k6e,"STRONG",{});var Lat=s(Kse);Xmo=r(Lat,"wav2vec2_phoneme"),Lat.forEach(t),zmo=r(k6e," \u2014 "),jI=n(k6e,"A",{href:!0});var yat=s(jI);Wmo=r(yat,"Wav2Vec2PhonemeCTCTokenizer"),yat.forEach(t),Qmo=r(k6e," (Wav2Vec2Phoneme model)"),k6e.forEach(t),Hmo=i(S),Ns=n(S,"LI",{});var Dk=s(Ns);Zse=n(Dk,"STRONG",{});var xat=s(Zse);Umo=r(xat,"xglm"),xat.forEach(t),Jmo=r(Dk," \u2014 "),DI=n(Dk,"A",{href:!0});var $at=s(DI);Ymo=r($at,"XGLMTokenizer"),$at.forEach(t),Kmo=r(Dk," or "),GI=n(Dk,"A",{href:!0});var kat=s(GI);Zmo=r(kat,"XGLMTokenizerFast"),kat.forEach(t),ego=r(Dk," (XGLM model)"),Dk.forEach(t),ogo=i(S),Th=n(S,"LI",{});var S6e=s(Th);ele=n(S6e,"STRONG",{});var Sat=s(ele);rgo=r(Sat,"xlm"),Sat.forEach(t),tgo=r(S6e," \u2014 "),OI=n(S6e,"A",{href:!0});var Rat=s(OI);ago=r(Rat,"XLMTokenizer"),Rat.forEach(t),ngo=r(S6e," (XLM model)"),S6e.forEach(t),sgo=i(S),Mh=n(S,"LI",{});var R6e=s(Mh);ole=n(R6e,"STRONG",{});var Pat=s(ole);lgo=r(Pat,"xlm-prophetnet"),Pat.forEach(t),igo=r(R6e," \u2014 "),VI=n(R6e,"A",{href:!0});var Bat=s(VI);dgo=r(Bat,"XLMProphetNetTokenizer"),Bat.forEach(t),cgo=r(R6e," (XLM-ProphetNet model)"),R6e.forEach(t),fgo=i(S),qs=n(S,"LI",{});var Gk=s(qs);rle=n(Gk,"STRONG",{});var Iat=s(rle);mgo=r(Iat,"xlm-roberta"),Iat.forEach(t),ggo=r(Gk," \u2014 "),XI=n(Gk,"A",{href:!0});var Nat=s(XI);hgo=r(Nat,"XLMRobertaTokenizer"),Nat.forEach(t),pgo=r(Gk," or "),zI=n(Gk,"A",{href:!0});var qat=s(zI);ugo=r(qat,"XLMRobertaTokenizerFast"),qat.forEach(t),_go=r(Gk," (XLM-RoBERTa model)"),Gk.forEach(t),bgo=i(S),js=n(S,"LI",{});var Ok=s(js);tle=n(Ok,"STRONG",{});var jat=s(tle);vgo=r(jat,"xlm-roberta-xl"),jat.forEach(t),Fgo=r(Ok," \u2014 "),WI=n(Ok,"A",{href:!0});var Dat=s(WI);Tgo=r(Dat,"RobertaTokenizer"),Dat.forEach(t),Mgo=r(Ok," or "),QI=n(Ok,"A",{href:!0});var Gat=s(QI);Ego=r(Gat,"RobertaTokenizerFast"),Gat.forEach(t),Cgo=r(Ok," (XLM-RoBERTa-XL model)"),Ok.forEach(t),wgo=i(S),Ds=n(S,"LI",{});var Vk=s(Ds);ale=n(Vk,"STRONG",{});var Oat=s(ale);Ago=r(Oat,"xlnet"),Oat.forEach(t),Lgo=r(Vk," \u2014 "),HI=n(Vk,"A",{href:!0});var Vat=s(HI);ygo=r(Vat,"XLNetTokenizer"),Vat.forEach(t),xgo=r(Vk," or "),UI=n(Vk,"A",{href:!0});var Xat=s(UI);$go=r(Xat,"XLNetTokenizerFast"),Xat.forEach(t),kgo=r(Vk," (XLNet model)"),Vk.forEach(t),Sgo=i(S),Gs=n(S,"LI",{});var Xk=s(Gs);nle=n(Xk,"STRONG",{});var zat=s(nle);Rgo=r(zat,"yoso"),zat.forEach(t),Pgo=r(Xk," \u2014 "),JI=n(Xk,"A",{href:!0});var Wat=s(JI);Bgo=r(Wat,"AlbertTokenizer"),Wat.forEach(t),Igo=r(Xk," or "),YI=n(Xk,"A",{href:!0});var Qat=s(YI);Ngo=r(Qat,"AlbertTokenizerFast"),Qat.forEach(t),qgo=r(Xk," (YOSO model)"),Xk.forEach(t),S.forEach(t),jgo=i(Qs),T(Eh.$$.fragment,Qs),Qs.forEach(t),Dgo=i(Ws),Ch=n(Ws,"DIV",{class:!0});var TVe=s(Ch);T(B6.$$.fragment,TVe),Ggo=i(TVe),sle=n(TVe,"P",{});var Hat=s(sle);Ogo=r(Hat,"Register a new tokenizer in this mapping."),Hat.forEach(t),TVe.forEach(t),Ws.forEach(t),FGe=i(f),Si=n(f,"H2",{class:!0});var MVe=s(Si);wh=n(MVe,"A",{id:!0,class:!0,href:!0});var Uat=s(wh);lle=n(Uat,"SPAN",{});var Jat=s(lle);T(I6.$$.fragment,Jat),Jat.forEach(t),Uat.forEach(t),Vgo=i(MVe),ile=n(MVe,"SPAN",{});var Yat=s(ile);Xgo=r(Yat,"AutoFeatureExtractor"),Yat.forEach(t),MVe.forEach(t),TGe=i(f),Lo=n(f,"DIV",{class:!0});var Hs=s(Lo);T(N6.$$.fragment,Hs),zgo=i(Hs),q6=n(Hs,"P",{});var EVe=s(q6);Wgo=r(EVe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),KI=n(EVe,"A",{href:!0});var Kat=s(KI);Qgo=r(Kat,"AutoFeatureExtractor.from_pretrained()"),Kat.forEach(t),Hgo=r(EVe," class method."),EVe.forEach(t),Ugo=i(Hs),j6=n(Hs,"P",{});var CVe=s(j6);Jgo=r(CVe,"This class cannot be instantiated directly using "),dle=n(CVe,"CODE",{});var Zat=s(dle);Ygo=r(Zat,"__init__()"),Zat.forEach(t),Kgo=r(CVe," (throws an error)."),CVe.forEach(t),Zgo=i(Hs),He=n(Hs,"DIV",{class:!0});var ra=s(He);T(D6.$$.fragment,ra),eho=i(ra),cle=n(ra,"P",{});var ent=s(cle);oho=r(ent,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),ent.forEach(t),rho=i(ra),ka=n(ra,"P",{});var Ew=s(ka);tho=r(Ew,"The feature extractor class to instantiate is selected based on the "),fle=n(Ew,"CODE",{});var ont=s(fle);aho=r(ont,"model_type"),ont.forEach(t),nho=r(Ew,` property of the config object
(either passed as an argument or loaded from `),mle=n(Ew,"CODE",{});var rnt=s(mle);sho=r(rnt,"pretrained_model_name_or_path"),rnt.forEach(t),lho=r(Ew,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),gle=n(Ew,"CODE",{});var tnt=s(gle);iho=r(tnt,"pretrained_model_name_or_path"),tnt.forEach(t),dho=r(Ew,":"),Ew.forEach(t),cho=i(ra),Y=n(ra,"UL",{});var K=s(Y);Ah=n(K,"LI",{});var P6e=s(Ah);hle=n(P6e,"STRONG",{});var ant=s(hle);fho=r(ant,"beit"),ant.forEach(t),mho=r(P6e," \u2014 "),ZI=n(P6e,"A",{href:!0});var nnt=s(ZI);gho=r(nnt,"BeitFeatureExtractor"),nnt.forEach(t),hho=r(P6e," (BEiT model)"),P6e.forEach(t),pho=i(K),Lh=n(K,"LI",{});var B6e=s(Lh);ple=n(B6e,"STRONG",{});var snt=s(ple);uho=r(snt,"clip"),snt.forEach(t),_ho=r(B6e," \u2014 "),eN=n(B6e,"A",{href:!0});var lnt=s(eN);bho=r(lnt,"CLIPFeatureExtractor"),lnt.forEach(t),vho=r(B6e," (CLIP model)"),B6e.forEach(t),Fho=i(K),yh=n(K,"LI",{});var I6e=s(yh);ule=n(I6e,"STRONG",{});var int=s(ule);Tho=r(int,"convnext"),int.forEach(t),Mho=r(I6e," \u2014 "),oN=n(I6e,"A",{href:!0});var dnt=s(oN);Eho=r(dnt,"ConvNextFeatureExtractor"),dnt.forEach(t),Cho=r(I6e," (ConvNeXT model)"),I6e.forEach(t),who=i(K),xh=n(K,"LI",{});var N6e=s(xh);_le=n(N6e,"STRONG",{});var cnt=s(_le);Aho=r(cnt,"cvt"),cnt.forEach(t),Lho=r(N6e," \u2014 "),rN=n(N6e,"A",{href:!0});var fnt=s(rN);yho=r(fnt,"ConvNextFeatureExtractor"),fnt.forEach(t),xho=r(N6e," (CvT model)"),N6e.forEach(t),$ho=i(K),$h=n(K,"LI",{});var q6e=s($h);ble=n(q6e,"STRONG",{});var mnt=s(ble);kho=r(mnt,"data2vec-audio"),mnt.forEach(t),Sho=r(q6e," \u2014 "),tN=n(q6e,"A",{href:!0});var gnt=s(tN);Rho=r(gnt,"Wav2Vec2FeatureExtractor"),gnt.forEach(t),Pho=r(q6e," (Data2VecAudio model)"),q6e.forEach(t),Bho=i(K),kh=n(K,"LI",{});var j6e=s(kh);vle=n(j6e,"STRONG",{});var hnt=s(vle);Iho=r(hnt,"data2vec-vision"),hnt.forEach(t),Nho=r(j6e," \u2014 "),aN=n(j6e,"A",{href:!0});var pnt=s(aN);qho=r(pnt,"BeitFeatureExtractor"),pnt.forEach(t),jho=r(j6e," (Data2VecVision model)"),j6e.forEach(t),Dho=i(K),Sh=n(K,"LI",{});var D6e=s(Sh);Fle=n(D6e,"STRONG",{});var unt=s(Fle);Gho=r(unt,"deit"),unt.forEach(t),Oho=r(D6e," \u2014 "),nN=n(D6e,"A",{href:!0});var _nt=s(nN);Vho=r(_nt,"DeiTFeatureExtractor"),_nt.forEach(t),Xho=r(D6e," (DeiT model)"),D6e.forEach(t),zho=i(K),Rh=n(K,"LI",{});var G6e=s(Rh);Tle=n(G6e,"STRONG",{});var bnt=s(Tle);Who=r(bnt,"detr"),bnt.forEach(t),Qho=r(G6e," \u2014 "),sN=n(G6e,"A",{href:!0});var vnt=s(sN);Hho=r(vnt,"DetrFeatureExtractor"),vnt.forEach(t),Uho=r(G6e," (DETR model)"),G6e.forEach(t),Jho=i(K),Ph=n(K,"LI",{});var O6e=s(Ph);Mle=n(O6e,"STRONG",{});var Fnt=s(Mle);Yho=r(Fnt,"dpt"),Fnt.forEach(t),Kho=r(O6e," \u2014 "),lN=n(O6e,"A",{href:!0});var Tnt=s(lN);Zho=r(Tnt,"DPTFeatureExtractor"),Tnt.forEach(t),epo=r(O6e," (DPT model)"),O6e.forEach(t),opo=i(K),Bh=n(K,"LI",{});var V6e=s(Bh);Ele=n(V6e,"STRONG",{});var Mnt=s(Ele);rpo=r(Mnt,"flava"),Mnt.forEach(t),tpo=r(V6e," \u2014 "),iN=n(V6e,"A",{href:!0});var Ent=s(iN);apo=r(Ent,"FlavaFeatureExtractor"),Ent.forEach(t),npo=r(V6e," (FLAVA model)"),V6e.forEach(t),spo=i(K),Ih=n(K,"LI",{});var X6e=s(Ih);Cle=n(X6e,"STRONG",{});var Cnt=s(Cle);lpo=r(Cnt,"glpn"),Cnt.forEach(t),ipo=r(X6e," \u2014 "),dN=n(X6e,"A",{href:!0});var wnt=s(dN);dpo=r(wnt,"GLPNFeatureExtractor"),wnt.forEach(t),cpo=r(X6e," (GLPN model)"),X6e.forEach(t),fpo=i(K),Nh=n(K,"LI",{});var z6e=s(Nh);wle=n(z6e,"STRONG",{});var Ant=s(wle);mpo=r(Ant,"hubert"),Ant.forEach(t),gpo=r(z6e," \u2014 "),cN=n(z6e,"A",{href:!0});var Lnt=s(cN);hpo=r(Lnt,"Wav2Vec2FeatureExtractor"),Lnt.forEach(t),ppo=r(z6e," (Hubert model)"),z6e.forEach(t),upo=i(K),qh=n(K,"LI",{});var W6e=s(qh);Ale=n(W6e,"STRONG",{});var ynt=s(Ale);_po=r(ynt,"imagegpt"),ynt.forEach(t),bpo=r(W6e," \u2014 "),fN=n(W6e,"A",{href:!0});var xnt=s(fN);vpo=r(xnt,"ImageGPTFeatureExtractor"),xnt.forEach(t),Fpo=r(W6e," (ImageGPT model)"),W6e.forEach(t),Tpo=i(K),jh=n(K,"LI",{});var Q6e=s(jh);Lle=n(Q6e,"STRONG",{});var $nt=s(Lle);Mpo=r($nt,"layoutlmv2"),$nt.forEach(t),Epo=r(Q6e," \u2014 "),mN=n(Q6e,"A",{href:!0});var knt=s(mN);Cpo=r(knt,"LayoutLMv2FeatureExtractor"),knt.forEach(t),wpo=r(Q6e," (LayoutLMv2 model)"),Q6e.forEach(t),Apo=i(K),Dh=n(K,"LI",{});var H6e=s(Dh);yle=n(H6e,"STRONG",{});var Snt=s(yle);Lpo=r(Snt,"layoutlmv3"),Snt.forEach(t),ypo=r(H6e," \u2014 "),gN=n(H6e,"A",{href:!0});var Rnt=s(gN);xpo=r(Rnt,"LayoutLMv3FeatureExtractor"),Rnt.forEach(t),$po=r(H6e," (LayoutLMv3 model)"),H6e.forEach(t),kpo=i(K),Gh=n(K,"LI",{});var U6e=s(Gh);xle=n(U6e,"STRONG",{});var Pnt=s(xle);Spo=r(Pnt,"levit"),Pnt.forEach(t),Rpo=r(U6e," \u2014 "),hN=n(U6e,"A",{href:!0});var Bnt=s(hN);Ppo=r(Bnt,"LevitFeatureExtractor"),Bnt.forEach(t),Bpo=r(U6e," (LeViT model)"),U6e.forEach(t),Ipo=i(K),Oh=n(K,"LI",{});var J6e=s(Oh);$le=n(J6e,"STRONG",{});var Int=s($le);Npo=r(Int,"maskformer"),Int.forEach(t),qpo=r(J6e," \u2014 "),pN=n(J6e,"A",{href:!0});var Nnt=s(pN);jpo=r(Nnt,"MaskFormerFeatureExtractor"),Nnt.forEach(t),Dpo=r(J6e," (MaskFormer model)"),J6e.forEach(t),Gpo=i(K),Vh=n(K,"LI",{});var Y6e=s(Vh);kle=n(Y6e,"STRONG",{});var qnt=s(kle);Opo=r(qnt,"mctct"),qnt.forEach(t),Vpo=r(Y6e," \u2014 "),uN=n(Y6e,"A",{href:!0});var jnt=s(uN);Xpo=r(jnt,"MCTCTFeatureExtractor"),jnt.forEach(t),zpo=r(Y6e," (M-CTC-T model)"),Y6e.forEach(t),Wpo=i(K),Xh=n(K,"LI",{});var K6e=s(Xh);Sle=n(K6e,"STRONG",{});var Dnt=s(Sle);Qpo=r(Dnt,"perceiver"),Dnt.forEach(t),Hpo=r(K6e," \u2014 "),_N=n(K6e,"A",{href:!0});var Gnt=s(_N);Upo=r(Gnt,"PerceiverFeatureExtractor"),Gnt.forEach(t),Jpo=r(K6e," (Perceiver model)"),K6e.forEach(t),Ypo=i(K),zh=n(K,"LI",{});var Z6e=s(zh);Rle=n(Z6e,"STRONG",{});var Ont=s(Rle);Kpo=r(Ont,"poolformer"),Ont.forEach(t),Zpo=r(Z6e," \u2014 "),bN=n(Z6e,"A",{href:!0});var Vnt=s(bN);euo=r(Vnt,"PoolFormerFeatureExtractor"),Vnt.forEach(t),ouo=r(Z6e," (PoolFormer model)"),Z6e.forEach(t),ruo=i(K),Wh=n(K,"LI",{});var eLe=s(Wh);Ple=n(eLe,"STRONG",{});var Xnt=s(Ple);tuo=r(Xnt,"regnet"),Xnt.forEach(t),auo=r(eLe," \u2014 "),vN=n(eLe,"A",{href:!0});var znt=s(vN);nuo=r(znt,"ConvNextFeatureExtractor"),znt.forEach(t),suo=r(eLe," (RegNet model)"),eLe.forEach(t),luo=i(K),Qh=n(K,"LI",{});var oLe=s(Qh);Ble=n(oLe,"STRONG",{});var Wnt=s(Ble);iuo=r(Wnt,"resnet"),Wnt.forEach(t),duo=r(oLe," \u2014 "),FN=n(oLe,"A",{href:!0});var Qnt=s(FN);cuo=r(Qnt,"ConvNextFeatureExtractor"),Qnt.forEach(t),fuo=r(oLe," (ResNet model)"),oLe.forEach(t),muo=i(K),Hh=n(K,"LI",{});var rLe=s(Hh);Ile=n(rLe,"STRONG",{});var Hnt=s(Ile);guo=r(Hnt,"segformer"),Hnt.forEach(t),huo=r(rLe," \u2014 "),TN=n(rLe,"A",{href:!0});var Unt=s(TN);puo=r(Unt,"SegformerFeatureExtractor"),Unt.forEach(t),uuo=r(rLe," (SegFormer model)"),rLe.forEach(t),_uo=i(K),Uh=n(K,"LI",{});var tLe=s(Uh);Nle=n(tLe,"STRONG",{});var Jnt=s(Nle);buo=r(Jnt,"speech_to_text"),Jnt.forEach(t),vuo=r(tLe," \u2014 "),MN=n(tLe,"A",{href:!0});var Ynt=s(MN);Fuo=r(Ynt,"Speech2TextFeatureExtractor"),Ynt.forEach(t),Tuo=r(tLe," (Speech2Text model)"),tLe.forEach(t),Muo=i(K),Jh=n(K,"LI",{});var aLe=s(Jh);qle=n(aLe,"STRONG",{});var Knt=s(qle);Euo=r(Knt,"swin"),Knt.forEach(t),Cuo=r(aLe," \u2014 "),EN=n(aLe,"A",{href:!0});var Znt=s(EN);wuo=r(Znt,"ViTFeatureExtractor"),Znt.forEach(t),Auo=r(aLe," (Swin Transformer model)"),aLe.forEach(t),Luo=i(K),Yh=n(K,"LI",{});var nLe=s(Yh);jle=n(nLe,"STRONG",{});var est=s(jle);yuo=r(est,"van"),est.forEach(t),xuo=r(nLe," \u2014 "),CN=n(nLe,"A",{href:!0});var ost=s(CN);$uo=r(ost,"ConvNextFeatureExtractor"),ost.forEach(t),kuo=r(nLe," (VAN model)"),nLe.forEach(t),Suo=i(K),Kh=n(K,"LI",{});var sLe=s(Kh);Dle=n(sLe,"STRONG",{});var rst=s(Dle);Ruo=r(rst,"vilt"),rst.forEach(t),Puo=r(sLe," \u2014 "),wN=n(sLe,"A",{href:!0});var tst=s(wN);Buo=r(tst,"ViltFeatureExtractor"),tst.forEach(t),Iuo=r(sLe," (ViLT model)"),sLe.forEach(t),Nuo=i(K),Zh=n(K,"LI",{});var lLe=s(Zh);Gle=n(lLe,"STRONG",{});var ast=s(Gle);quo=r(ast,"vit"),ast.forEach(t),juo=r(lLe," \u2014 "),AN=n(lLe,"A",{href:!0});var nst=s(AN);Duo=r(nst,"ViTFeatureExtractor"),nst.forEach(t),Guo=r(lLe," (ViT model)"),lLe.forEach(t),Ouo=i(K),ep=n(K,"LI",{});var iLe=s(ep);Ole=n(iLe,"STRONG",{});var sst=s(Ole);Vuo=r(sst,"vit_mae"),sst.forEach(t),Xuo=r(iLe," \u2014 "),LN=n(iLe,"A",{href:!0});var lst=s(LN);zuo=r(lst,"ViTFeatureExtractor"),lst.forEach(t),Wuo=r(iLe," (ViTMAE model)"),iLe.forEach(t),Quo=i(K),op=n(K,"LI",{});var dLe=s(op);Vle=n(dLe,"STRONG",{});var ist=s(Vle);Huo=r(ist,"wav2vec2"),ist.forEach(t),Uuo=r(dLe," \u2014 "),yN=n(dLe,"A",{href:!0});var dst=s(yN);Juo=r(dst,"Wav2Vec2FeatureExtractor"),dst.forEach(t),Yuo=r(dLe," (Wav2Vec2 model)"),dLe.forEach(t),Kuo=i(K),rp=n(K,"LI",{});var cLe=s(rp);Xle=n(cLe,"STRONG",{});var cst=s(Xle);Zuo=r(cst,"wav2vec2-conformer"),cst.forEach(t),e_o=r(cLe," \u2014 "),xN=n(cLe,"A",{href:!0});var fst=s(xN);o_o=r(fst,"Wav2Vec2FeatureExtractor"),fst.forEach(t),r_o=r(cLe," (Wav2Vec2-Conformer model)"),cLe.forEach(t),t_o=i(K),tp=n(K,"LI",{});var fLe=s(tp);zle=n(fLe,"STRONG",{});var mst=s(zle);a_o=r(mst,"yolos"),mst.forEach(t),n_o=r(fLe," \u2014 "),$N=n(fLe,"A",{href:!0});var gst=s($N);s_o=r(gst,"YolosFeatureExtractor"),gst.forEach(t),l_o=r(fLe," (YOLOS model)"),fLe.forEach(t),K.forEach(t),i_o=i(ra),T(ap.$$.fragment,ra),d_o=i(ra),T(np.$$.fragment,ra),ra.forEach(t),c_o=i(Hs),sp=n(Hs,"DIV",{class:!0});var wVe=s(sp);T(G6.$$.fragment,wVe),f_o=i(wVe),Wle=n(wVe,"P",{});var hst=s(Wle);m_o=r(hst,"Register a new feature extractor for this class."),hst.forEach(t),wVe.forEach(t),Hs.forEach(t),MGe=i(f),Ri=n(f,"H2",{class:!0});var AVe=s(Ri);lp=n(AVe,"A",{id:!0,class:!0,href:!0});var pst=s(lp);Qle=n(pst,"SPAN",{});var ust=s(Qle);T(O6.$$.fragment,ust),ust.forEach(t),pst.forEach(t),g_o=i(AVe),Hle=n(AVe,"SPAN",{});var _st=s(Hle);h_o=r(_st,"AutoProcessor"),_st.forEach(t),AVe.forEach(t),EGe=i(f),yo=n(f,"DIV",{class:!0});var Us=s(yo);T(V6.$$.fragment,Us),p_o=i(Us),X6=n(Us,"P",{});var LVe=s(X6);u_o=r(LVe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),kN=n(LVe,"A",{href:!0});var bst=s(kN);__o=r(bst,"AutoProcessor.from_pretrained()"),bst.forEach(t),b_o=r(LVe," class method."),LVe.forEach(t),v_o=i(Us),z6=n(Us,"P",{});var yVe=s(z6);F_o=r(yVe,"This class cannot be instantiated directly using "),Ule=n(yVe,"CODE",{});var vst=s(Ule);T_o=r(vst,"__init__()"),vst.forEach(t),M_o=r(yVe," (throws an error)."),yVe.forEach(t),E_o=i(Us),Ue=n(Us,"DIV",{class:!0});var ta=s(Ue);T(W6.$$.fragment,ta),C_o=i(ta),Jle=n(ta,"P",{});var Fst=s(Jle);w_o=r(Fst,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Fst.forEach(t),A_o=i(ta),Pi=n(ta,"P",{});var aoe=s(Pi);L_o=r(aoe,"The processor class to instantiate is selected based on the "),Yle=n(aoe,"CODE",{});var Tst=s(Yle);y_o=r(Tst,"model_type"),Tst.forEach(t),x_o=r(aoe,` property of the config object (either
passed as an argument or loaded from `),Kle=n(aoe,"CODE",{});var Mst=s(Kle);$_o=r(Mst,"pretrained_model_name_or_path"),Mst.forEach(t),k_o=r(aoe," if possible):"),aoe.forEach(t),S_o=i(ta),he=n(ta,"UL",{});var _e=s(he);ip=n(_e,"LI",{});var mLe=s(ip);Zle=n(mLe,"STRONG",{});var Est=s(Zle);R_o=r(Est,"clip"),Est.forEach(t),P_o=r(mLe," \u2014 "),SN=n(mLe,"A",{href:!0});var Cst=s(SN);B_o=r(Cst,"CLIPProcessor"),Cst.forEach(t),I_o=r(mLe," (CLIP model)"),mLe.forEach(t),N_o=i(_e),dp=n(_e,"LI",{});var gLe=s(dp);eie=n(gLe,"STRONG",{});var wst=s(eie);q_o=r(wst,"flava"),wst.forEach(t),j_o=r(gLe," \u2014 "),oie=n(gLe,"CODE",{});var Ast=s(oie);D_o=r(Ast,"FLAVAProcessor"),Ast.forEach(t),G_o=r(gLe," (FLAVA model)"),gLe.forEach(t),O_o=i(_e),cp=n(_e,"LI",{});var hLe=s(cp);rie=n(hLe,"STRONG",{});var Lst=s(rie);V_o=r(Lst,"layoutlmv2"),Lst.forEach(t),X_o=r(hLe," \u2014 "),RN=n(hLe,"A",{href:!0});var yst=s(RN);z_o=r(yst,"LayoutLMv2Processor"),yst.forEach(t),W_o=r(hLe," (LayoutLMv2 model)"),hLe.forEach(t),Q_o=i(_e),fp=n(_e,"LI",{});var pLe=s(fp);tie=n(pLe,"STRONG",{});var xst=s(tie);H_o=r(xst,"layoutlmv3"),xst.forEach(t),U_o=r(pLe," \u2014 "),PN=n(pLe,"A",{href:!0});var $st=s(PN);J_o=r($st,"LayoutLMv3Processor"),$st.forEach(t),Y_o=r(pLe," (LayoutLMv3 model)"),pLe.forEach(t),K_o=i(_e),mp=n(_e,"LI",{});var uLe=s(mp);aie=n(uLe,"STRONG",{});var kst=s(aie);Z_o=r(kst,"layoutxlm"),kst.forEach(t),e1o=r(uLe," \u2014 "),BN=n(uLe,"A",{href:!0});var Sst=s(BN);o1o=r(Sst,"LayoutXLMProcessor"),Sst.forEach(t),r1o=r(uLe," (LayoutXLM model)"),uLe.forEach(t),t1o=i(_e),gp=n(_e,"LI",{});var _Le=s(gp);nie=n(_Le,"STRONG",{});var Rst=s(nie);a1o=r(Rst,"sew"),Rst.forEach(t),n1o=r(_Le," \u2014 "),IN=n(_Le,"A",{href:!0});var Pst=s(IN);s1o=r(Pst,"Wav2Vec2Processor"),Pst.forEach(t),l1o=r(_Le," (SEW model)"),_Le.forEach(t),i1o=i(_e),hp=n(_e,"LI",{});var bLe=s(hp);sie=n(bLe,"STRONG",{});var Bst=s(sie);d1o=r(Bst,"sew-d"),Bst.forEach(t),c1o=r(bLe," \u2014 "),NN=n(bLe,"A",{href:!0});var Ist=s(NN);f1o=r(Ist,"Wav2Vec2Processor"),Ist.forEach(t),m1o=r(bLe," (SEW-D model)"),bLe.forEach(t),g1o=i(_e),pp=n(_e,"LI",{});var vLe=s(pp);lie=n(vLe,"STRONG",{});var Nst=s(lie);h1o=r(Nst,"speech_to_text"),Nst.forEach(t),p1o=r(vLe," \u2014 "),qN=n(vLe,"A",{href:!0});var qst=s(qN);u1o=r(qst,"Speech2TextProcessor"),qst.forEach(t),_1o=r(vLe," (Speech2Text model)"),vLe.forEach(t),b1o=i(_e),up=n(_e,"LI",{});var FLe=s(up);iie=n(FLe,"STRONG",{});var jst=s(iie);v1o=r(jst,"speech_to_text_2"),jst.forEach(t),F1o=r(FLe," \u2014 "),jN=n(FLe,"A",{href:!0});var Dst=s(jN);T1o=r(Dst,"Speech2Text2Processor"),Dst.forEach(t),M1o=r(FLe," (Speech2Text2 model)"),FLe.forEach(t),E1o=i(_e),_p=n(_e,"LI",{});var TLe=s(_p);die=n(TLe,"STRONG",{});var Gst=s(die);C1o=r(Gst,"trocr"),Gst.forEach(t),w1o=r(TLe," \u2014 "),DN=n(TLe,"A",{href:!0});var Ost=s(DN);A1o=r(Ost,"TrOCRProcessor"),Ost.forEach(t),L1o=r(TLe," (TrOCR model)"),TLe.forEach(t),y1o=i(_e),bp=n(_e,"LI",{});var MLe=s(bp);cie=n(MLe,"STRONG",{});var Vst=s(cie);x1o=r(Vst,"unispeech"),Vst.forEach(t),$1o=r(MLe," \u2014 "),GN=n(MLe,"A",{href:!0});var Xst=s(GN);k1o=r(Xst,"Wav2Vec2Processor"),Xst.forEach(t),S1o=r(MLe," (UniSpeech model)"),MLe.forEach(t),R1o=i(_e),vp=n(_e,"LI",{});var ELe=s(vp);fie=n(ELe,"STRONG",{});var zst=s(fie);P1o=r(zst,"unispeech-sat"),zst.forEach(t),B1o=r(ELe," \u2014 "),ON=n(ELe,"A",{href:!0});var Wst=s(ON);I1o=r(Wst,"Wav2Vec2Processor"),Wst.forEach(t),N1o=r(ELe," (UniSpeechSat model)"),ELe.forEach(t),q1o=i(_e),Fp=n(_e,"LI",{});var CLe=s(Fp);mie=n(CLe,"STRONG",{});var Qst=s(mie);j1o=r(Qst,"vilt"),Qst.forEach(t),D1o=r(CLe," \u2014 "),VN=n(CLe,"A",{href:!0});var Hst=s(VN);G1o=r(Hst,"ViltProcessor"),Hst.forEach(t),O1o=r(CLe," (ViLT model)"),CLe.forEach(t),V1o=i(_e),Tp=n(_e,"LI",{});var wLe=s(Tp);gie=n(wLe,"STRONG",{});var Ust=s(gie);X1o=r(Ust,"vision-text-dual-encoder"),Ust.forEach(t),z1o=r(wLe," \u2014 "),XN=n(wLe,"A",{href:!0});var Jst=s(XN);W1o=r(Jst,"VisionTextDualEncoderProcessor"),Jst.forEach(t),Q1o=r(wLe," (VisionTextDualEncoder model)"),wLe.forEach(t),H1o=i(_e),Mp=n(_e,"LI",{});var ALe=s(Mp);hie=n(ALe,"STRONG",{});var Yst=s(hie);U1o=r(Yst,"wav2vec2"),Yst.forEach(t),J1o=r(ALe," \u2014 "),zN=n(ALe,"A",{href:!0});var Kst=s(zN);Y1o=r(Kst,"Wav2Vec2Processor"),Kst.forEach(t),K1o=r(ALe," (Wav2Vec2 model)"),ALe.forEach(t),Z1o=i(_e),Ep=n(_e,"LI",{});var LLe=s(Ep);pie=n(LLe,"STRONG",{});var Zst=s(pie);e2o=r(Zst,"wav2vec2-conformer"),Zst.forEach(t),o2o=r(LLe," \u2014 "),WN=n(LLe,"A",{href:!0});var elt=s(WN);r2o=r(elt,"Wav2Vec2Processor"),elt.forEach(t),t2o=r(LLe," (Wav2Vec2-Conformer model)"),LLe.forEach(t),a2o=i(_e),Cp=n(_e,"LI",{});var yLe=s(Cp);uie=n(yLe,"STRONG",{});var olt=s(uie);n2o=r(olt,"wavlm"),olt.forEach(t),s2o=r(yLe," \u2014 "),QN=n(yLe,"A",{href:!0});var rlt=s(QN);l2o=r(rlt,"Wav2Vec2Processor"),rlt.forEach(t),i2o=r(yLe," (WavLM model)"),yLe.forEach(t),_e.forEach(t),d2o=i(ta),T(wp.$$.fragment,ta),c2o=i(ta),T(Ap.$$.fragment,ta),ta.forEach(t),f2o=i(Us),Lp=n(Us,"DIV",{class:!0});var xVe=s(Lp);T(Q6.$$.fragment,xVe),m2o=i(xVe),_ie=n(xVe,"P",{});var tlt=s(_ie);g2o=r(tlt,"Register a new processor for this class."),tlt.forEach(t),xVe.forEach(t),Us.forEach(t),CGe=i(f),Bi=n(f,"H2",{class:!0});var $Ve=s(Bi);yp=n($Ve,"A",{id:!0,class:!0,href:!0});var alt=s(yp);bie=n(alt,"SPAN",{});var nlt=s(bie);T(H6.$$.fragment,nlt),nlt.forEach(t),alt.forEach(t),h2o=i($Ve),vie=n($Ve,"SPAN",{});var slt=s(vie);p2o=r(slt,"AutoModel"),slt.forEach(t),$Ve.forEach(t),wGe=i(f),xo=n(f,"DIV",{class:!0});var Js=s(xo);T(U6.$$.fragment,Js),u2o=i(Js),Ii=n(Js,"P",{});var noe=s(Ii);_2o=r(noe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HN=n(noe,"A",{href:!0});var llt=s(HN);b2o=r(llt,"from_pretrained()"),llt.forEach(t),v2o=r(noe," class method or the "),UN=n(noe,"A",{href:!0});var ilt=s(UN);F2o=r(ilt,"from_config()"),ilt.forEach(t),T2o=r(noe,` class
method.`),noe.forEach(t),M2o=i(Js),J6=n(Js,"P",{});var kVe=s(J6);E2o=r(kVe,"This class cannot be instantiated directly using "),Fie=n(kVe,"CODE",{});var dlt=s(Fie);C2o=r(dlt,"__init__()"),dlt.forEach(t),w2o=r(kVe," (throws an error)."),kVe.forEach(t),A2o=i(Js),nt=n(Js,"DIV",{class:!0});var Cw=s(nt);T(Y6.$$.fragment,Cw),L2o=i(Cw),Tie=n(Cw,"P",{});var clt=s(Tie);y2o=r(clt,"Instantiates one of the base model classes of the library from a configuration."),clt.forEach(t),x2o=i(Cw),Ni=n(Cw,"P",{});var soe=s(Ni);$2o=r(soe,`Note:
Loading a model from its configuration file does `),Mie=n(soe,"STRONG",{});var flt=s(Mie);k2o=r(flt,"not"),flt.forEach(t),S2o=r(soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),JN=n(soe,"A",{href:!0});var mlt=s(JN);R2o=r(mlt,"from_pretrained()"),mlt.forEach(t),P2o=r(soe," to load the model weights."),soe.forEach(t),B2o=i(Cw),T(xp.$$.fragment,Cw),Cw.forEach(t),I2o=i(Js),Je=n(Js,"DIV",{class:!0});var aa=s(Je);T(K6.$$.fragment,aa),N2o=i(aa),Eie=n(aa,"P",{});var glt=s(Eie);q2o=r(glt,"Instantiate one of the base model classes of the library from a pretrained model."),glt.forEach(t),j2o=i(aa),Sa=n(aa,"P",{});var ww=s(Sa);D2o=r(ww,"The model class to instantiate is selected based on the "),Cie=n(ww,"CODE",{});var hlt=s(Cie);G2o=r(hlt,"model_type"),hlt.forEach(t),O2o=r(ww,` property of the config object (either
passed as an argument or loaded from `),wie=n(ww,"CODE",{});var plt=s(wie);V2o=r(plt,"pretrained_model_name_or_path"),plt.forEach(t),X2o=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aie=n(ww,"CODE",{});var ult=s(Aie);z2o=r(ult,"pretrained_model_name_or_path"),ult.forEach(t),W2o=r(ww,":"),ww.forEach(t),Q2o=i(aa),y=n(aa,"UL",{});var $=s(y);$p=n($,"LI",{});var xLe=s($p);Lie=n(xLe,"STRONG",{});var _lt=s(Lie);H2o=r(_lt,"albert"),_lt.forEach(t),U2o=r(xLe," \u2014 "),YN=n(xLe,"A",{href:!0});var blt=s(YN);J2o=r(blt,"AlbertModel"),blt.forEach(t),Y2o=r(xLe," (ALBERT model)"),xLe.forEach(t),K2o=i($),kp=n($,"LI",{});var $Le=s(kp);yie=n($Le,"STRONG",{});var vlt=s(yie);Z2o=r(vlt,"bart"),vlt.forEach(t),ebo=r($Le," \u2014 "),KN=n($Le,"A",{href:!0});var Flt=s(KN);obo=r(Flt,"BartModel"),Flt.forEach(t),rbo=r($Le," (BART model)"),$Le.forEach(t),tbo=i($),Sp=n($,"LI",{});var kLe=s(Sp);xie=n(kLe,"STRONG",{});var Tlt=s(xie);abo=r(Tlt,"beit"),Tlt.forEach(t),nbo=r(kLe," \u2014 "),ZN=n(kLe,"A",{href:!0});var Mlt=s(ZN);sbo=r(Mlt,"BeitModel"),Mlt.forEach(t),lbo=r(kLe," (BEiT model)"),kLe.forEach(t),ibo=i($),Rp=n($,"LI",{});var SLe=s(Rp);$ie=n(SLe,"STRONG",{});var Elt=s($ie);dbo=r(Elt,"bert"),Elt.forEach(t),cbo=r(SLe," \u2014 "),eq=n(SLe,"A",{href:!0});var Clt=s(eq);fbo=r(Clt,"BertModel"),Clt.forEach(t),mbo=r(SLe," (BERT model)"),SLe.forEach(t),gbo=i($),Pp=n($,"LI",{});var RLe=s(Pp);kie=n(RLe,"STRONG",{});var wlt=s(kie);hbo=r(wlt,"bert-generation"),wlt.forEach(t),pbo=r(RLe," \u2014 "),oq=n(RLe,"A",{href:!0});var Alt=s(oq);ubo=r(Alt,"BertGenerationEncoder"),Alt.forEach(t),_bo=r(RLe," (Bert Generation model)"),RLe.forEach(t),bbo=i($),Bp=n($,"LI",{});var PLe=s(Bp);Sie=n(PLe,"STRONG",{});var Llt=s(Sie);vbo=r(Llt,"big_bird"),Llt.forEach(t),Fbo=r(PLe," \u2014 "),rq=n(PLe,"A",{href:!0});var ylt=s(rq);Tbo=r(ylt,"BigBirdModel"),ylt.forEach(t),Mbo=r(PLe," (BigBird model)"),PLe.forEach(t),Ebo=i($),Ip=n($,"LI",{});var BLe=s(Ip);Rie=n(BLe,"STRONG",{});var xlt=s(Rie);Cbo=r(xlt,"bigbird_pegasus"),xlt.forEach(t),wbo=r(BLe," \u2014 "),tq=n(BLe,"A",{href:!0});var $lt=s(tq);Abo=r($lt,"BigBirdPegasusModel"),$lt.forEach(t),Lbo=r(BLe," (BigBird-Pegasus model)"),BLe.forEach(t),ybo=i($),Np=n($,"LI",{});var ILe=s(Np);Pie=n(ILe,"STRONG",{});var klt=s(Pie);xbo=r(klt,"blenderbot"),klt.forEach(t),$bo=r(ILe," \u2014 "),aq=n(ILe,"A",{href:!0});var Slt=s(aq);kbo=r(Slt,"BlenderbotModel"),Slt.forEach(t),Sbo=r(ILe," (Blenderbot model)"),ILe.forEach(t),Rbo=i($),qp=n($,"LI",{});var NLe=s(qp);Bie=n(NLe,"STRONG",{});var Rlt=s(Bie);Pbo=r(Rlt,"blenderbot-small"),Rlt.forEach(t),Bbo=r(NLe," \u2014 "),nq=n(NLe,"A",{href:!0});var Plt=s(nq);Ibo=r(Plt,"BlenderbotSmallModel"),Plt.forEach(t),Nbo=r(NLe," (BlenderbotSmall model)"),NLe.forEach(t),qbo=i($),jp=n($,"LI",{});var qLe=s(jp);Iie=n(qLe,"STRONG",{});var Blt=s(Iie);jbo=r(Blt,"bloom"),Blt.forEach(t),Dbo=r(qLe," \u2014 "),sq=n(qLe,"A",{href:!0});var Ilt=s(sq);Gbo=r(Ilt,"BloomModel"),Ilt.forEach(t),Obo=r(qLe," (BLOOM model)"),qLe.forEach(t),Vbo=i($),Dp=n($,"LI",{});var jLe=s(Dp);Nie=n(jLe,"STRONG",{});var Nlt=s(Nie);Xbo=r(Nlt,"camembert"),Nlt.forEach(t),zbo=r(jLe," \u2014 "),lq=n(jLe,"A",{href:!0});var qlt=s(lq);Wbo=r(qlt,"CamembertModel"),qlt.forEach(t),Qbo=r(jLe," (CamemBERT model)"),jLe.forEach(t),Hbo=i($),Gp=n($,"LI",{});var DLe=s(Gp);qie=n(DLe,"STRONG",{});var jlt=s(qie);Ubo=r(jlt,"canine"),jlt.forEach(t),Jbo=r(DLe," \u2014 "),iq=n(DLe,"A",{href:!0});var Dlt=s(iq);Ybo=r(Dlt,"CanineModel"),Dlt.forEach(t),Kbo=r(DLe," (CANINE model)"),DLe.forEach(t),Zbo=i($),Op=n($,"LI",{});var GLe=s(Op);jie=n(GLe,"STRONG",{});var Glt=s(jie);evo=r(Glt,"clip"),Glt.forEach(t),ovo=r(GLe," \u2014 "),dq=n(GLe,"A",{href:!0});var Olt=s(dq);rvo=r(Olt,"CLIPModel"),Olt.forEach(t),tvo=r(GLe," (CLIP model)"),GLe.forEach(t),avo=i($),Vp=n($,"LI",{});var OLe=s(Vp);Die=n(OLe,"STRONG",{});var Vlt=s(Die);nvo=r(Vlt,"convbert"),Vlt.forEach(t),svo=r(OLe," \u2014 "),cq=n(OLe,"A",{href:!0});var Xlt=s(cq);lvo=r(Xlt,"ConvBertModel"),Xlt.forEach(t),ivo=r(OLe," (ConvBERT model)"),OLe.forEach(t),dvo=i($),Xp=n($,"LI",{});var VLe=s(Xp);Gie=n(VLe,"STRONG",{});var zlt=s(Gie);cvo=r(zlt,"convnext"),zlt.forEach(t),fvo=r(VLe," \u2014 "),fq=n(VLe,"A",{href:!0});var Wlt=s(fq);mvo=r(Wlt,"ConvNextModel"),Wlt.forEach(t),gvo=r(VLe," (ConvNeXT model)"),VLe.forEach(t),hvo=i($),zp=n($,"LI",{});var XLe=s(zp);Oie=n(XLe,"STRONG",{});var Qlt=s(Oie);pvo=r(Qlt,"ctrl"),Qlt.forEach(t),uvo=r(XLe," \u2014 "),mq=n(XLe,"A",{href:!0});var Hlt=s(mq);_vo=r(Hlt,"CTRLModel"),Hlt.forEach(t),bvo=r(XLe," (CTRL model)"),XLe.forEach(t),vvo=i($),Wp=n($,"LI",{});var zLe=s(Wp);Vie=n(zLe,"STRONG",{});var Ult=s(Vie);Fvo=r(Ult,"cvt"),Ult.forEach(t),Tvo=r(zLe," \u2014 "),gq=n(zLe,"A",{href:!0});var Jlt=s(gq);Mvo=r(Jlt,"CvtModel"),Jlt.forEach(t),Evo=r(zLe," (CvT model)"),zLe.forEach(t),Cvo=i($),Qp=n($,"LI",{});var WLe=s(Qp);Xie=n(WLe,"STRONG",{});var Ylt=s(Xie);wvo=r(Ylt,"data2vec-audio"),Ylt.forEach(t),Avo=r(WLe," \u2014 "),hq=n(WLe,"A",{href:!0});var Klt=s(hq);Lvo=r(Klt,"Data2VecAudioModel"),Klt.forEach(t),yvo=r(WLe," (Data2VecAudio model)"),WLe.forEach(t),xvo=i($),Hp=n($,"LI",{});var QLe=s(Hp);zie=n(QLe,"STRONG",{});var Zlt=s(zie);$vo=r(Zlt,"data2vec-text"),Zlt.forEach(t),kvo=r(QLe," \u2014 "),pq=n(QLe,"A",{href:!0});var eit=s(pq);Svo=r(eit,"Data2VecTextModel"),eit.forEach(t),Rvo=r(QLe," (Data2VecText model)"),QLe.forEach(t),Pvo=i($),Up=n($,"LI",{});var HLe=s(Up);Wie=n(HLe,"STRONG",{});var oit=s(Wie);Bvo=r(oit,"data2vec-vision"),oit.forEach(t),Ivo=r(HLe," \u2014 "),uq=n(HLe,"A",{href:!0});var rit=s(uq);Nvo=r(rit,"Data2VecVisionModel"),rit.forEach(t),qvo=r(HLe," (Data2VecVision model)"),HLe.forEach(t),jvo=i($),Jp=n($,"LI",{});var ULe=s(Jp);Qie=n(ULe,"STRONG",{});var tit=s(Qie);Dvo=r(tit,"deberta"),tit.forEach(t),Gvo=r(ULe," \u2014 "),_q=n(ULe,"A",{href:!0});var ait=s(_q);Ovo=r(ait,"DebertaModel"),ait.forEach(t),Vvo=r(ULe," (DeBERTa model)"),ULe.forEach(t),Xvo=i($),Yp=n($,"LI",{});var JLe=s(Yp);Hie=n(JLe,"STRONG",{});var nit=s(Hie);zvo=r(nit,"deberta-v2"),nit.forEach(t),Wvo=r(JLe," \u2014 "),bq=n(JLe,"A",{href:!0});var sit=s(bq);Qvo=r(sit,"DebertaV2Model"),sit.forEach(t),Hvo=r(JLe," (DeBERTa-v2 model)"),JLe.forEach(t),Uvo=i($),Kp=n($,"LI",{});var YLe=s(Kp);Uie=n(YLe,"STRONG",{});var lit=s(Uie);Jvo=r(lit,"decision_transformer"),lit.forEach(t),Yvo=r(YLe," \u2014 "),vq=n(YLe,"A",{href:!0});var iit=s(vq);Kvo=r(iit,"DecisionTransformerModel"),iit.forEach(t),Zvo=r(YLe," (Decision Transformer model)"),YLe.forEach(t),e0o=i($),Zp=n($,"LI",{});var KLe=s(Zp);Jie=n(KLe,"STRONG",{});var dit=s(Jie);o0o=r(dit,"deit"),dit.forEach(t),r0o=r(KLe," \u2014 "),Fq=n(KLe,"A",{href:!0});var cit=s(Fq);t0o=r(cit,"DeiTModel"),cit.forEach(t),a0o=r(KLe," (DeiT model)"),KLe.forEach(t),n0o=i($),eu=n($,"LI",{});var ZLe=s(eu);Yie=n(ZLe,"STRONG",{});var fit=s(Yie);s0o=r(fit,"detr"),fit.forEach(t),l0o=r(ZLe," \u2014 "),Tq=n(ZLe,"A",{href:!0});var mit=s(Tq);i0o=r(mit,"DetrModel"),mit.forEach(t),d0o=r(ZLe," (DETR model)"),ZLe.forEach(t),c0o=i($),ou=n($,"LI",{});var eye=s(ou);Kie=n(eye,"STRONG",{});var git=s(Kie);f0o=r(git,"distilbert"),git.forEach(t),m0o=r(eye," \u2014 "),Mq=n(eye,"A",{href:!0});var hit=s(Mq);g0o=r(hit,"DistilBertModel"),hit.forEach(t),h0o=r(eye," (DistilBERT model)"),eye.forEach(t),p0o=i($),ru=n($,"LI",{});var oye=s(ru);Zie=n(oye,"STRONG",{});var pit=s(Zie);u0o=r(pit,"dpr"),pit.forEach(t),_0o=r(oye," \u2014 "),Eq=n(oye,"A",{href:!0});var uit=s(Eq);b0o=r(uit,"DPRQuestionEncoder"),uit.forEach(t),v0o=r(oye," (DPR model)"),oye.forEach(t),F0o=i($),tu=n($,"LI",{});var rye=s(tu);ede=n(rye,"STRONG",{});var _it=s(ede);T0o=r(_it,"dpt"),_it.forEach(t),M0o=r(rye," \u2014 "),Cq=n(rye,"A",{href:!0});var bit=s(Cq);E0o=r(bit,"DPTModel"),bit.forEach(t),C0o=r(rye," (DPT model)"),rye.forEach(t),w0o=i($),au=n($,"LI",{});var tye=s(au);ode=n(tye,"STRONG",{});var vit=s(ode);A0o=r(vit,"electra"),vit.forEach(t),L0o=r(tye," \u2014 "),wq=n(tye,"A",{href:!0});var Fit=s(wq);y0o=r(Fit,"ElectraModel"),Fit.forEach(t),x0o=r(tye," (ELECTRA model)"),tye.forEach(t),$0o=i($),nu=n($,"LI",{});var aye=s(nu);rde=n(aye,"STRONG",{});var Tit=s(rde);k0o=r(Tit,"flaubert"),Tit.forEach(t),S0o=r(aye," \u2014 "),Aq=n(aye,"A",{href:!0});var Mit=s(Aq);R0o=r(Mit,"FlaubertModel"),Mit.forEach(t),P0o=r(aye," (FlauBERT model)"),aye.forEach(t),B0o=i($),su=n($,"LI",{});var nye=s(su);tde=n(nye,"STRONG",{});var Eit=s(tde);I0o=r(Eit,"flava"),Eit.forEach(t),N0o=r(nye," \u2014 "),Lq=n(nye,"A",{href:!0});var Cit=s(Lq);q0o=r(Cit,"FlavaModel"),Cit.forEach(t),j0o=r(nye," (FLAVA model)"),nye.forEach(t),D0o=i($),lu=n($,"LI",{});var sye=s(lu);ade=n(sye,"STRONG",{});var wit=s(ade);G0o=r(wit,"fnet"),wit.forEach(t),O0o=r(sye," \u2014 "),yq=n(sye,"A",{href:!0});var Ait=s(yq);V0o=r(Ait,"FNetModel"),Ait.forEach(t),X0o=r(sye," (FNet model)"),sye.forEach(t),z0o=i($),iu=n($,"LI",{});var lye=s(iu);nde=n(lye,"STRONG",{});var Lit=s(nde);W0o=r(Lit,"fsmt"),Lit.forEach(t),Q0o=r(lye," \u2014 "),xq=n(lye,"A",{href:!0});var yit=s(xq);H0o=r(yit,"FSMTModel"),yit.forEach(t),U0o=r(lye," (FairSeq Machine-Translation model)"),lye.forEach(t),J0o=i($),Os=n($,"LI",{});var zk=s(Os);sde=n(zk,"STRONG",{});var xit=s(sde);Y0o=r(xit,"funnel"),xit.forEach(t),K0o=r(zk," \u2014 "),$q=n(zk,"A",{href:!0});var $it=s($q);Z0o=r($it,"FunnelModel"),$it.forEach(t),eFo=r(zk," or "),kq=n(zk,"A",{href:!0});var kit=s(kq);oFo=r(kit,"FunnelBaseModel"),kit.forEach(t),rFo=r(zk," (Funnel Transformer model)"),zk.forEach(t),tFo=i($),du=n($,"LI",{});var iye=s(du);lde=n(iye,"STRONG",{});var Sit=s(lde);aFo=r(Sit,"glpn"),Sit.forEach(t),nFo=r(iye," \u2014 "),Sq=n(iye,"A",{href:!0});var Rit=s(Sq);sFo=r(Rit,"GLPNModel"),Rit.forEach(t),lFo=r(iye," (GLPN model)"),iye.forEach(t),iFo=i($),cu=n($,"LI",{});var dye=s(cu);ide=n(dye,"STRONG",{});var Pit=s(ide);dFo=r(Pit,"gpt2"),Pit.forEach(t),cFo=r(dye," \u2014 "),Rq=n(dye,"A",{href:!0});var Bit=s(Rq);fFo=r(Bit,"GPT2Model"),Bit.forEach(t),mFo=r(dye," (OpenAI GPT-2 model)"),dye.forEach(t),gFo=i($),fu=n($,"LI",{});var cye=s(fu);dde=n(cye,"STRONG",{});var Iit=s(dde);hFo=r(Iit,"gpt_neo"),Iit.forEach(t),pFo=r(cye," \u2014 "),Pq=n(cye,"A",{href:!0});var Nit=s(Pq);uFo=r(Nit,"GPTNeoModel"),Nit.forEach(t),_Fo=r(cye," (GPT Neo model)"),cye.forEach(t),bFo=i($),mu=n($,"LI",{});var fye=s(mu);cde=n(fye,"STRONG",{});var qit=s(cde);vFo=r(qit,"gpt_neox"),qit.forEach(t),FFo=r(fye," \u2014 "),Bq=n(fye,"A",{href:!0});var jit=s(Bq);TFo=r(jit,"GPTNeoXModel"),jit.forEach(t),MFo=r(fye," (GPT NeoX model)"),fye.forEach(t),EFo=i($),gu=n($,"LI",{});var mye=s(gu);fde=n(mye,"STRONG",{});var Dit=s(fde);CFo=r(Dit,"gptj"),Dit.forEach(t),wFo=r(mye," \u2014 "),Iq=n(mye,"A",{href:!0});var Git=s(Iq);AFo=r(Git,"GPTJModel"),Git.forEach(t),LFo=r(mye," (GPT-J model)"),mye.forEach(t),yFo=i($),hu=n($,"LI",{});var gye=s(hu);mde=n(gye,"STRONG",{});var Oit=s(mde);xFo=r(Oit,"hubert"),Oit.forEach(t),$Fo=r(gye," \u2014 "),Nq=n(gye,"A",{href:!0});var Vit=s(Nq);kFo=r(Vit,"HubertModel"),Vit.forEach(t),SFo=r(gye," (Hubert model)"),gye.forEach(t),RFo=i($),pu=n($,"LI",{});var hye=s(pu);gde=n(hye,"STRONG",{});var Xit=s(gde);PFo=r(Xit,"ibert"),Xit.forEach(t),BFo=r(hye," \u2014 "),qq=n(hye,"A",{href:!0});var zit=s(qq);IFo=r(zit,"IBertModel"),zit.forEach(t),NFo=r(hye," (I-BERT model)"),hye.forEach(t),qFo=i($),uu=n($,"LI",{});var pye=s(uu);hde=n(pye,"STRONG",{});var Wit=s(hde);jFo=r(Wit,"imagegpt"),Wit.forEach(t),DFo=r(pye," \u2014 "),jq=n(pye,"A",{href:!0});var Qit=s(jq);GFo=r(Qit,"ImageGPTModel"),Qit.forEach(t),OFo=r(pye," (ImageGPT model)"),pye.forEach(t),VFo=i($),_u=n($,"LI",{});var uye=s(_u);pde=n(uye,"STRONG",{});var Hit=s(pde);XFo=r(Hit,"layoutlm"),Hit.forEach(t),zFo=r(uye," \u2014 "),Dq=n(uye,"A",{href:!0});var Uit=s(Dq);WFo=r(Uit,"LayoutLMModel"),Uit.forEach(t),QFo=r(uye," (LayoutLM model)"),uye.forEach(t),HFo=i($),bu=n($,"LI",{});var _ye=s(bu);ude=n(_ye,"STRONG",{});var Jit=s(ude);UFo=r(Jit,"layoutlmv2"),Jit.forEach(t),JFo=r(_ye," \u2014 "),Gq=n(_ye,"A",{href:!0});var Yit=s(Gq);YFo=r(Yit,"LayoutLMv2Model"),Yit.forEach(t),KFo=r(_ye," (LayoutLMv2 model)"),_ye.forEach(t),ZFo=i($),vu=n($,"LI",{});var bye=s(vu);_de=n(bye,"STRONG",{});var Kit=s(_de);eTo=r(Kit,"layoutlmv3"),Kit.forEach(t),oTo=r(bye," \u2014 "),Oq=n(bye,"A",{href:!0});var Zit=s(Oq);rTo=r(Zit,"LayoutLMv3Model"),Zit.forEach(t),tTo=r(bye," (LayoutLMv3 model)"),bye.forEach(t),aTo=i($),Fu=n($,"LI",{});var vye=s(Fu);bde=n(vye,"STRONG",{});var edt=s(bde);nTo=r(edt,"led"),edt.forEach(t),sTo=r(vye," \u2014 "),Vq=n(vye,"A",{href:!0});var odt=s(Vq);lTo=r(odt,"LEDModel"),odt.forEach(t),iTo=r(vye," (LED model)"),vye.forEach(t),dTo=i($),Tu=n($,"LI",{});var Fye=s(Tu);vde=n(Fye,"STRONG",{});var rdt=s(vde);cTo=r(rdt,"levit"),rdt.forEach(t),fTo=r(Fye," \u2014 "),Xq=n(Fye,"A",{href:!0});var tdt=s(Xq);mTo=r(tdt,"LevitModel"),tdt.forEach(t),gTo=r(Fye," (LeViT model)"),Fye.forEach(t),hTo=i($),Mu=n($,"LI",{});var Tye=s(Mu);Fde=n(Tye,"STRONG",{});var adt=s(Fde);pTo=r(adt,"longformer"),adt.forEach(t),uTo=r(Tye," \u2014 "),zq=n(Tye,"A",{href:!0});var ndt=s(zq);_To=r(ndt,"LongformerModel"),ndt.forEach(t),bTo=r(Tye," (Longformer model)"),Tye.forEach(t),vTo=i($),Eu=n($,"LI",{});var Mye=s(Eu);Tde=n(Mye,"STRONG",{});var sdt=s(Tde);FTo=r(sdt,"longt5"),sdt.forEach(t),TTo=r(Mye," \u2014 "),Wq=n(Mye,"A",{href:!0});var ldt=s(Wq);MTo=r(ldt,"LongT5Model"),ldt.forEach(t),ETo=r(Mye," (LongT5 model)"),Mye.forEach(t),CTo=i($),Cu=n($,"LI",{});var Eye=s(Cu);Mde=n(Eye,"STRONG",{});var idt=s(Mde);wTo=r(idt,"luke"),idt.forEach(t),ATo=r(Eye," \u2014 "),Qq=n(Eye,"A",{href:!0});var ddt=s(Qq);LTo=r(ddt,"LukeModel"),ddt.forEach(t),yTo=r(Eye," (LUKE model)"),Eye.forEach(t),xTo=i($),wu=n($,"LI",{});var Cye=s(wu);Ede=n(Cye,"STRONG",{});var cdt=s(Ede);$To=r(cdt,"lxmert"),cdt.forEach(t),kTo=r(Cye," \u2014 "),Hq=n(Cye,"A",{href:!0});var fdt=s(Hq);STo=r(fdt,"LxmertModel"),fdt.forEach(t),RTo=r(Cye," (LXMERT model)"),Cye.forEach(t),PTo=i($),Au=n($,"LI",{});var wye=s(Au);Cde=n(wye,"STRONG",{});var mdt=s(Cde);BTo=r(mdt,"m2m_100"),mdt.forEach(t),ITo=r(wye," \u2014 "),Uq=n(wye,"A",{href:!0});var gdt=s(Uq);NTo=r(gdt,"M2M100Model"),gdt.forEach(t),qTo=r(wye," (M2M100 model)"),wye.forEach(t),jTo=i($),Lu=n($,"LI",{});var Aye=s(Lu);wde=n(Aye,"STRONG",{});var hdt=s(wde);DTo=r(hdt,"marian"),hdt.forEach(t),GTo=r(Aye," \u2014 "),Jq=n(Aye,"A",{href:!0});var pdt=s(Jq);OTo=r(pdt,"MarianModel"),pdt.forEach(t),VTo=r(Aye," (Marian model)"),Aye.forEach(t),XTo=i($),yu=n($,"LI",{});var Lye=s(yu);Ade=n(Lye,"STRONG",{});var udt=s(Ade);zTo=r(udt,"maskformer"),udt.forEach(t),WTo=r(Lye," \u2014 "),Yq=n(Lye,"A",{href:!0});var _dt=s(Yq);QTo=r(_dt,"MaskFormerModel"),_dt.forEach(t),HTo=r(Lye," (MaskFormer model)"),Lye.forEach(t),UTo=i($),xu=n($,"LI",{});var yye=s(xu);Lde=n(yye,"STRONG",{});var bdt=s(Lde);JTo=r(bdt,"mbart"),bdt.forEach(t),YTo=r(yye," \u2014 "),Kq=n(yye,"A",{href:!0});var vdt=s(Kq);KTo=r(vdt,"MBartModel"),vdt.forEach(t),ZTo=r(yye," (mBART model)"),yye.forEach(t),e7o=i($),$u=n($,"LI",{});var xye=s($u);yde=n(xye,"STRONG",{});var Fdt=s(yde);o7o=r(Fdt,"mctct"),Fdt.forEach(t),r7o=r(xye," \u2014 "),Zq=n(xye,"A",{href:!0});var Tdt=s(Zq);t7o=r(Tdt,"MCTCTModel"),Tdt.forEach(t),a7o=r(xye," (M-CTC-T model)"),xye.forEach(t),n7o=i($),ku=n($,"LI",{});var $ye=s(ku);xde=n($ye,"STRONG",{});var Mdt=s(xde);s7o=r(Mdt,"megatron-bert"),Mdt.forEach(t),l7o=r($ye," \u2014 "),ej=n($ye,"A",{href:!0});var Edt=s(ej);i7o=r(Edt,"MegatronBertModel"),Edt.forEach(t),d7o=r($ye," (Megatron-BERT model)"),$ye.forEach(t),c7o=i($),Su=n($,"LI",{});var kye=s(Su);$de=n(kye,"STRONG",{});var Cdt=s($de);f7o=r(Cdt,"mobilebert"),Cdt.forEach(t),m7o=r(kye," \u2014 "),oj=n(kye,"A",{href:!0});var wdt=s(oj);g7o=r(wdt,"MobileBertModel"),wdt.forEach(t),h7o=r(kye," (MobileBERT model)"),kye.forEach(t),p7o=i($),Ru=n($,"LI",{});var Sye=s(Ru);kde=n(Sye,"STRONG",{});var Adt=s(kde);u7o=r(Adt,"mpnet"),Adt.forEach(t),_7o=r(Sye," \u2014 "),rj=n(Sye,"A",{href:!0});var Ldt=s(rj);b7o=r(Ldt,"MPNetModel"),Ldt.forEach(t),v7o=r(Sye," (MPNet model)"),Sye.forEach(t),F7o=i($),Pu=n($,"LI",{});var Rye=s(Pu);Sde=n(Rye,"STRONG",{});var ydt=s(Sde);T7o=r(ydt,"mt5"),ydt.forEach(t),M7o=r(Rye," \u2014 "),tj=n(Rye,"A",{href:!0});var xdt=s(tj);E7o=r(xdt,"MT5Model"),xdt.forEach(t),C7o=r(Rye," (MT5 model)"),Rye.forEach(t),w7o=i($),Bu=n($,"LI",{});var Pye=s(Bu);Rde=n(Pye,"STRONG",{});var $dt=s(Rde);A7o=r($dt,"nystromformer"),$dt.forEach(t),L7o=r(Pye," \u2014 "),aj=n(Pye,"A",{href:!0});var kdt=s(aj);y7o=r(kdt,"NystromformerModel"),kdt.forEach(t),x7o=r(Pye," (Nystr\xF6mformer model)"),Pye.forEach(t),$7o=i($),Iu=n($,"LI",{});var Bye=s(Iu);Pde=n(Bye,"STRONG",{});var Sdt=s(Pde);k7o=r(Sdt,"ofa"),Sdt.forEach(t),S7o=r(Bye," \u2014 "),nj=n(Bye,"A",{href:!0});var Rdt=s(nj);R7o=r(Rdt,"OFAModel"),Rdt.forEach(t),P7o=r(Bye," (OFA model)"),Bye.forEach(t),B7o=i($),Nu=n($,"LI",{});var Iye=s(Nu);Bde=n(Iye,"STRONG",{});var Pdt=s(Bde);I7o=r(Pdt,"openai-gpt"),Pdt.forEach(t),N7o=r(Iye," \u2014 "),sj=n(Iye,"A",{href:!0});var Bdt=s(sj);q7o=r(Bdt,"OpenAIGPTModel"),Bdt.forEach(t),j7o=r(Iye," (OpenAI GPT model)"),Iye.forEach(t),D7o=i($),qu=n($,"LI",{});var Nye=s(qu);Ide=n(Nye,"STRONG",{});var Idt=s(Ide);G7o=r(Idt,"opt"),Idt.forEach(t),O7o=r(Nye," \u2014 "),lj=n(Nye,"A",{href:!0});var Ndt=s(lj);V7o=r(Ndt,"OPTModel"),Ndt.forEach(t),X7o=r(Nye," (OPT model)"),Nye.forEach(t),z7o=i($),ju=n($,"LI",{});var qye=s(ju);Nde=n(qye,"STRONG",{});var qdt=s(Nde);W7o=r(qdt,"pegasus"),qdt.forEach(t),Q7o=r(qye," \u2014 "),ij=n(qye,"A",{href:!0});var jdt=s(ij);H7o=r(jdt,"PegasusModel"),jdt.forEach(t),U7o=r(qye," (Pegasus model)"),qye.forEach(t),J7o=i($),Du=n($,"LI",{});var jye=s(Du);qde=n(jye,"STRONG",{});var Ddt=s(qde);Y7o=r(Ddt,"perceiver"),Ddt.forEach(t),K7o=r(jye," \u2014 "),dj=n(jye,"A",{href:!0});var Gdt=s(dj);Z7o=r(Gdt,"PerceiverModel"),Gdt.forEach(t),e9o=r(jye," (Perceiver model)"),jye.forEach(t),o9o=i($),Gu=n($,"LI",{});var Dye=s(Gu);jde=n(Dye,"STRONG",{});var Odt=s(jde);r9o=r(Odt,"plbart"),Odt.forEach(t),t9o=r(Dye," \u2014 "),cj=n(Dye,"A",{href:!0});var Vdt=s(cj);a9o=r(Vdt,"PLBartModel"),Vdt.forEach(t),n9o=r(Dye," (PLBart model)"),Dye.forEach(t),s9o=i($),Ou=n($,"LI",{});var Gye=s(Ou);Dde=n(Gye,"STRONG",{});var Xdt=s(Dde);l9o=r(Xdt,"poolformer"),Xdt.forEach(t),i9o=r(Gye," \u2014 "),fj=n(Gye,"A",{href:!0});var zdt=s(fj);d9o=r(zdt,"PoolFormerModel"),zdt.forEach(t),c9o=r(Gye," (PoolFormer model)"),Gye.forEach(t),f9o=i($),Vu=n($,"LI",{});var Oye=s(Vu);Gde=n(Oye,"STRONG",{});var Wdt=s(Gde);m9o=r(Wdt,"prophetnet"),Wdt.forEach(t),g9o=r(Oye," \u2014 "),mj=n(Oye,"A",{href:!0});var Qdt=s(mj);h9o=r(Qdt,"ProphetNetModel"),Qdt.forEach(t),p9o=r(Oye," (ProphetNet model)"),Oye.forEach(t),u9o=i($),Xu=n($,"LI",{});var Vye=s(Xu);Ode=n(Vye,"STRONG",{});var Hdt=s(Ode);_9o=r(Hdt,"qdqbert"),Hdt.forEach(t),b9o=r(Vye," \u2014 "),gj=n(Vye,"A",{href:!0});var Udt=s(gj);v9o=r(Udt,"QDQBertModel"),Udt.forEach(t),F9o=r(Vye," (QDQBert model)"),Vye.forEach(t),T9o=i($),zu=n($,"LI",{});var Xye=s(zu);Vde=n(Xye,"STRONG",{});var Jdt=s(Vde);M9o=r(Jdt,"reformer"),Jdt.forEach(t),E9o=r(Xye," \u2014 "),hj=n(Xye,"A",{href:!0});var Ydt=s(hj);C9o=r(Ydt,"ReformerModel"),Ydt.forEach(t),w9o=r(Xye," (Reformer model)"),Xye.forEach(t),A9o=i($),Wu=n($,"LI",{});var zye=s(Wu);Xde=n(zye,"STRONG",{});var Kdt=s(Xde);L9o=r(Kdt,"regnet"),Kdt.forEach(t),y9o=r(zye," \u2014 "),pj=n(zye,"A",{href:!0});var Zdt=s(pj);x9o=r(Zdt,"RegNetModel"),Zdt.forEach(t),$9o=r(zye," (RegNet model)"),zye.forEach(t),k9o=i($),Qu=n($,"LI",{});var Wye=s(Qu);zde=n(Wye,"STRONG",{});var ect=s(zde);S9o=r(ect,"rembert"),ect.forEach(t),R9o=r(Wye," \u2014 "),uj=n(Wye,"A",{href:!0});var oct=s(uj);P9o=r(oct,"RemBertModel"),oct.forEach(t),B9o=r(Wye," (RemBERT model)"),Wye.forEach(t),I9o=i($),Hu=n($,"LI",{});var Qye=s(Hu);Wde=n(Qye,"STRONG",{});var rct=s(Wde);N9o=r(rct,"resnet"),rct.forEach(t),q9o=r(Qye," \u2014 "),_j=n(Qye,"A",{href:!0});var tct=s(_j);j9o=r(tct,"ResNetModel"),tct.forEach(t),D9o=r(Qye," (ResNet model)"),Qye.forEach(t),G9o=i($),Uu=n($,"LI",{});var Hye=s(Uu);Qde=n(Hye,"STRONG",{});var act=s(Qde);O9o=r(act,"retribert"),act.forEach(t),V9o=r(Hye," \u2014 "),bj=n(Hye,"A",{href:!0});var nct=s(bj);X9o=r(nct,"RetriBertModel"),nct.forEach(t),z9o=r(Hye," (RetriBERT model)"),Hye.forEach(t),W9o=i($),Ju=n($,"LI",{});var Uye=s(Ju);Hde=n(Uye,"STRONG",{});var sct=s(Hde);Q9o=r(sct,"roberta"),sct.forEach(t),H9o=r(Uye," \u2014 "),vj=n(Uye,"A",{href:!0});var lct=s(vj);U9o=r(lct,"RobertaModel"),lct.forEach(t),J9o=r(Uye," (RoBERTa model)"),Uye.forEach(t),Y9o=i($),Yu=n($,"LI",{});var Jye=s(Yu);Ude=n(Jye,"STRONG",{});var ict=s(Ude);K9o=r(ict,"roformer"),ict.forEach(t),Z9o=r(Jye," \u2014 "),Fj=n(Jye,"A",{href:!0});var dct=s(Fj);eMo=r(dct,"RoFormerModel"),dct.forEach(t),oMo=r(Jye," (RoFormer model)"),Jye.forEach(t),rMo=i($),Ku=n($,"LI",{});var Yye=s(Ku);Jde=n(Yye,"STRONG",{});var cct=s(Jde);tMo=r(cct,"segformer"),cct.forEach(t),aMo=r(Yye," \u2014 "),Tj=n(Yye,"A",{href:!0});var fct=s(Tj);nMo=r(fct,"SegformerModel"),fct.forEach(t),sMo=r(Yye," (SegFormer model)"),Yye.forEach(t),lMo=i($),Zu=n($,"LI",{});var Kye=s(Zu);Yde=n(Kye,"STRONG",{});var mct=s(Yde);iMo=r(mct,"sew"),mct.forEach(t),dMo=r(Kye," \u2014 "),Mj=n(Kye,"A",{href:!0});var gct=s(Mj);cMo=r(gct,"SEWModel"),gct.forEach(t),fMo=r(Kye," (SEW model)"),Kye.forEach(t),mMo=i($),e_=n($,"LI",{});var Zye=s(e_);Kde=n(Zye,"STRONG",{});var hct=s(Kde);gMo=r(hct,"sew-d"),hct.forEach(t),hMo=r(Zye," \u2014 "),Ej=n(Zye,"A",{href:!0});var pct=s(Ej);pMo=r(pct,"SEWDModel"),pct.forEach(t),uMo=r(Zye," (SEW-D model)"),Zye.forEach(t),_Mo=i($),o_=n($,"LI",{});var e8e=s(o_);Zde=n(e8e,"STRONG",{});var uct=s(Zde);bMo=r(uct,"speech_to_text"),uct.forEach(t),vMo=r(e8e," \u2014 "),Cj=n(e8e,"A",{href:!0});var _ct=s(Cj);FMo=r(_ct,"Speech2TextModel"),_ct.forEach(t),TMo=r(e8e," (Speech2Text model)"),e8e.forEach(t),MMo=i($),r_=n($,"LI",{});var o8e=s(r_);ece=n(o8e,"STRONG",{});var bct=s(ece);EMo=r(bct,"splinter"),bct.forEach(t),CMo=r(o8e," \u2014 "),wj=n(o8e,"A",{href:!0});var vct=s(wj);wMo=r(vct,"SplinterModel"),vct.forEach(t),AMo=r(o8e," (Splinter model)"),o8e.forEach(t),LMo=i($),t_=n($,"LI",{});var r8e=s(t_);oce=n(r8e,"STRONG",{});var Fct=s(oce);yMo=r(Fct,"squeezebert"),Fct.forEach(t),xMo=r(r8e," \u2014 "),Aj=n(r8e,"A",{href:!0});var Tct=s(Aj);$Mo=r(Tct,"SqueezeBertModel"),Tct.forEach(t),kMo=r(r8e," (SqueezeBERT model)"),r8e.forEach(t),SMo=i($),a_=n($,"LI",{});var t8e=s(a_);rce=n(t8e,"STRONG",{});var Mct=s(rce);RMo=r(Mct,"swin"),Mct.forEach(t),PMo=r(t8e," \u2014 "),Lj=n(t8e,"A",{href:!0});var Ect=s(Lj);BMo=r(Ect,"SwinModel"),Ect.forEach(t),IMo=r(t8e," (Swin Transformer model)"),t8e.forEach(t),NMo=i($),n_=n($,"LI",{});var a8e=s(n_);tce=n(a8e,"STRONG",{});var Cct=s(tce);qMo=r(Cct,"t5"),Cct.forEach(t),jMo=r(a8e," \u2014 "),yj=n(a8e,"A",{href:!0});var wct=s(yj);DMo=r(wct,"T5Model"),wct.forEach(t),GMo=r(a8e," (T5 model)"),a8e.forEach(t),OMo=i($),s_=n($,"LI",{});var n8e=s(s_);ace=n(n8e,"STRONG",{});var Act=s(ace);VMo=r(Act,"tapas"),Act.forEach(t),XMo=r(n8e," \u2014 "),xj=n(n8e,"A",{href:!0});var Lct=s(xj);zMo=r(Lct,"TapasModel"),Lct.forEach(t),WMo=r(n8e," (TAPAS model)"),n8e.forEach(t),QMo=i($),l_=n($,"LI",{});var s8e=s(l_);nce=n(s8e,"STRONG",{});var yct=s(nce);HMo=r(yct,"trajectory_transformer"),yct.forEach(t),UMo=r(s8e," \u2014 "),$j=n(s8e,"A",{href:!0});var xct=s($j);JMo=r(xct,"TrajectoryTransformerModel"),xct.forEach(t),YMo=r(s8e," (Trajectory Transformer model)"),s8e.forEach(t),KMo=i($),i_=n($,"LI",{});var l8e=s(i_);sce=n(l8e,"STRONG",{});var $ct=s(sce);ZMo=r($ct,"transfo-xl"),$ct.forEach(t),eEo=r(l8e," \u2014 "),kj=n(l8e,"A",{href:!0});var kct=s(kj);oEo=r(kct,"TransfoXLModel"),kct.forEach(t),rEo=r(l8e," (Transformer-XL model)"),l8e.forEach(t),tEo=i($),d_=n($,"LI",{});var i8e=s(d_);lce=n(i8e,"STRONG",{});var Sct=s(lce);aEo=r(Sct,"unispeech"),Sct.forEach(t),nEo=r(i8e," \u2014 "),Sj=n(i8e,"A",{href:!0});var Rct=s(Sj);sEo=r(Rct,"UniSpeechModel"),Rct.forEach(t),lEo=r(i8e," (UniSpeech model)"),i8e.forEach(t),iEo=i($),c_=n($,"LI",{});var d8e=s(c_);ice=n(d8e,"STRONG",{});var Pct=s(ice);dEo=r(Pct,"unispeech-sat"),Pct.forEach(t),cEo=r(d8e," \u2014 "),Rj=n(d8e,"A",{href:!0});var Bct=s(Rj);fEo=r(Bct,"UniSpeechSatModel"),Bct.forEach(t),mEo=r(d8e," (UniSpeechSat model)"),d8e.forEach(t),gEo=i($),f_=n($,"LI",{});var c8e=s(f_);dce=n(c8e,"STRONG",{});var Ict=s(dce);hEo=r(Ict,"van"),Ict.forEach(t),pEo=r(c8e," \u2014 "),Pj=n(c8e,"A",{href:!0});var Nct=s(Pj);uEo=r(Nct,"VanModel"),Nct.forEach(t),_Eo=r(c8e," (VAN model)"),c8e.forEach(t),bEo=i($),m_=n($,"LI",{});var f8e=s(m_);cce=n(f8e,"STRONG",{});var qct=s(cce);vEo=r(qct,"vilt"),qct.forEach(t),FEo=r(f8e," \u2014 "),Bj=n(f8e,"A",{href:!0});var jct=s(Bj);TEo=r(jct,"ViltModel"),jct.forEach(t),MEo=r(f8e," (ViLT model)"),f8e.forEach(t),EEo=i($),g_=n($,"LI",{});var m8e=s(g_);fce=n(m8e,"STRONG",{});var Dct=s(fce);CEo=r(Dct,"vision-text-dual-encoder"),Dct.forEach(t),wEo=r(m8e," \u2014 "),Ij=n(m8e,"A",{href:!0});var Gct=s(Ij);AEo=r(Gct,"VisionTextDualEncoderModel"),Gct.forEach(t),LEo=r(m8e," (VisionTextDualEncoder model)"),m8e.forEach(t),yEo=i($),h_=n($,"LI",{});var g8e=s(h_);mce=n(g8e,"STRONG",{});var Oct=s(mce);xEo=r(Oct,"visual_bert"),Oct.forEach(t),$Eo=r(g8e," \u2014 "),Nj=n(g8e,"A",{href:!0});var Vct=s(Nj);kEo=r(Vct,"VisualBertModel"),Vct.forEach(t),SEo=r(g8e," (VisualBERT model)"),g8e.forEach(t),REo=i($),p_=n($,"LI",{});var h8e=s(p_);gce=n(h8e,"STRONG",{});var Xct=s(gce);PEo=r(Xct,"vit"),Xct.forEach(t),BEo=r(h8e," \u2014 "),qj=n(h8e,"A",{href:!0});var zct=s(qj);IEo=r(zct,"ViTModel"),zct.forEach(t),NEo=r(h8e," (ViT model)"),h8e.forEach(t),qEo=i($),u_=n($,"LI",{});var p8e=s(u_);hce=n(p8e,"STRONG",{});var Wct=s(hce);jEo=r(Wct,"vit_mae"),Wct.forEach(t),DEo=r(p8e," \u2014 "),jj=n(p8e,"A",{href:!0});var Qct=s(jj);GEo=r(Qct,"ViTMAEModel"),Qct.forEach(t),OEo=r(p8e," (ViTMAE model)"),p8e.forEach(t),VEo=i($),__=n($,"LI",{});var u8e=s(__);pce=n(u8e,"STRONG",{});var Hct=s(pce);XEo=r(Hct,"wav2vec2"),Hct.forEach(t),zEo=r(u8e," \u2014 "),Dj=n(u8e,"A",{href:!0});var Uct=s(Dj);WEo=r(Uct,"Wav2Vec2Model"),Uct.forEach(t),QEo=r(u8e," (Wav2Vec2 model)"),u8e.forEach(t),HEo=i($),b_=n($,"LI",{});var _8e=s(b_);uce=n(_8e,"STRONG",{});var Jct=s(uce);UEo=r(Jct,"wav2vec2-conformer"),Jct.forEach(t),JEo=r(_8e," \u2014 "),Gj=n(_8e,"A",{href:!0});var Yct=s(Gj);YEo=r(Yct,"Wav2Vec2ConformerModel"),Yct.forEach(t),KEo=r(_8e," (Wav2Vec2-Conformer model)"),_8e.forEach(t),ZEo=i($),v_=n($,"LI",{});var b8e=s(v_);_ce=n(b8e,"STRONG",{});var Kct=s(_ce);e4o=r(Kct,"wavlm"),Kct.forEach(t),o4o=r(b8e," \u2014 "),Oj=n(b8e,"A",{href:!0});var Zct=s(Oj);r4o=r(Zct,"WavLMModel"),Zct.forEach(t),t4o=r(b8e," (WavLM model)"),b8e.forEach(t),a4o=i($),F_=n($,"LI",{});var v8e=s(F_);bce=n(v8e,"STRONG",{});var eft=s(bce);n4o=r(eft,"xglm"),eft.forEach(t),s4o=r(v8e," \u2014 "),Vj=n(v8e,"A",{href:!0});var oft=s(Vj);l4o=r(oft,"XGLMModel"),oft.forEach(t),i4o=r(v8e," (XGLM model)"),v8e.forEach(t),d4o=i($),T_=n($,"LI",{});var F8e=s(T_);vce=n(F8e,"STRONG",{});var rft=s(vce);c4o=r(rft,"xlm"),rft.forEach(t),f4o=r(F8e," \u2014 "),Xj=n(F8e,"A",{href:!0});var tft=s(Xj);m4o=r(tft,"XLMModel"),tft.forEach(t),g4o=r(F8e," (XLM model)"),F8e.forEach(t),h4o=i($),M_=n($,"LI",{});var T8e=s(M_);Fce=n(T8e,"STRONG",{});var aft=s(Fce);p4o=r(aft,"xlm-prophetnet"),aft.forEach(t),u4o=r(T8e," \u2014 "),zj=n(T8e,"A",{href:!0});var nft=s(zj);_4o=r(nft,"XLMProphetNetModel"),nft.forEach(t),b4o=r(T8e," (XLM-ProphetNet model)"),T8e.forEach(t),v4o=i($),E_=n($,"LI",{});var M8e=s(E_);Tce=n(M8e,"STRONG",{});var sft=s(Tce);F4o=r(sft,"xlm-roberta"),sft.forEach(t),T4o=r(M8e," \u2014 "),Wj=n(M8e,"A",{href:!0});var lft=s(Wj);M4o=r(lft,"XLMRobertaModel"),lft.forEach(t),E4o=r(M8e," (XLM-RoBERTa model)"),M8e.forEach(t),C4o=i($),C_=n($,"LI",{});var E8e=s(C_);Mce=n(E8e,"STRONG",{});var ift=s(Mce);w4o=r(ift,"xlm-roberta-xl"),ift.forEach(t),A4o=r(E8e," \u2014 "),Qj=n(E8e,"A",{href:!0});var dft=s(Qj);L4o=r(dft,"XLMRobertaXLModel"),dft.forEach(t),y4o=r(E8e," (XLM-RoBERTa-XL model)"),E8e.forEach(t),x4o=i($),w_=n($,"LI",{});var C8e=s(w_);Ece=n(C8e,"STRONG",{});var cft=s(Ece);$4o=r(cft,"xlnet"),cft.forEach(t),k4o=r(C8e," \u2014 "),Hj=n(C8e,"A",{href:!0});var fft=s(Hj);S4o=r(fft,"XLNetModel"),fft.forEach(t),R4o=r(C8e," (XLNet model)"),C8e.forEach(t),P4o=i($),A_=n($,"LI",{});var w8e=s(A_);Cce=n(w8e,"STRONG",{});var mft=s(Cce);B4o=r(mft,"yolos"),mft.forEach(t),I4o=r(w8e," \u2014 "),Uj=n(w8e,"A",{href:!0});var gft=s(Uj);N4o=r(gft,"YolosModel"),gft.forEach(t),q4o=r(w8e," (YOLOS model)"),w8e.forEach(t),j4o=i($),L_=n($,"LI",{});var A8e=s(L_);wce=n(A8e,"STRONG",{});var hft=s(wce);D4o=r(hft,"yoso"),hft.forEach(t),G4o=r(A8e," \u2014 "),Jj=n(A8e,"A",{href:!0});var pft=s(Jj);O4o=r(pft,"YosoModel"),pft.forEach(t),V4o=r(A8e," (YOSO model)"),A8e.forEach(t),$.forEach(t),X4o=i(aa),y_=n(aa,"P",{});var L8e=s(y_);z4o=r(L8e,"The model is set in evaluation mode by default using "),Ace=n(L8e,"CODE",{});var uft=s(Ace);W4o=r(uft,"model.eval()"),uft.forEach(t),Q4o=r(L8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=n(L8e,"CODE",{});var _ft=s(Lce);H4o=r(_ft,"model.train()"),_ft.forEach(t),L8e.forEach(t),U4o=i(aa),T(x_.$$.fragment,aa),aa.forEach(t),Js.forEach(t),AGe=i(f),qi=n(f,"H2",{class:!0});var SVe=s(qi);$_=n(SVe,"A",{id:!0,class:!0,href:!0});var bft=s($_);yce=n(bft,"SPAN",{});var vft=s(yce);T(Z6.$$.fragment,vft),vft.forEach(t),bft.forEach(t),J4o=i(SVe),xce=n(SVe,"SPAN",{});var Fft=s(xce);Y4o=r(Fft,"AutoModelForPreTraining"),Fft.forEach(t),SVe.forEach(t),LGe=i(f),$o=n(f,"DIV",{class:!0});var Ys=s($o);T(eL.$$.fragment,Ys),K4o=i(Ys),ji=n(Ys,"P",{});var loe=s(ji);Z4o=r(loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Yj=n(loe,"A",{href:!0});var Tft=s(Yj);eCo=r(Tft,"from_pretrained()"),Tft.forEach(t),oCo=r(loe," class method or the "),Kj=n(loe,"A",{href:!0});var Mft=s(Kj);rCo=r(Mft,"from_config()"),Mft.forEach(t),tCo=r(loe,` class
method.`),loe.forEach(t),aCo=i(Ys),oL=n(Ys,"P",{});var RVe=s(oL);nCo=r(RVe,"This class cannot be instantiated directly using "),$ce=n(RVe,"CODE",{});var Eft=s($ce);sCo=r(Eft,"__init__()"),Eft.forEach(t),lCo=r(RVe," (throws an error)."),RVe.forEach(t),iCo=i(Ys),st=n(Ys,"DIV",{class:!0});var Aw=s(st);T(rL.$$.fragment,Aw),dCo=i(Aw),kce=n(Aw,"P",{});var Cft=s(kce);cCo=r(Cft,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Cft.forEach(t),fCo=i(Aw),Di=n(Aw,"P",{});var ioe=s(Di);mCo=r(ioe,`Note:
Loading a model from its configuration file does `),Sce=n(ioe,"STRONG",{});var wft=s(Sce);gCo=r(wft,"not"),wft.forEach(t),hCo=r(ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zj=n(ioe,"A",{href:!0});var Aft=s(Zj);pCo=r(Aft,"from_pretrained()"),Aft.forEach(t),uCo=r(ioe," to load the model weights."),ioe.forEach(t),_Co=i(Aw),T(k_.$$.fragment,Aw),Aw.forEach(t),bCo=i(Ys),Ye=n(Ys,"DIV",{class:!0});var na=s(Ye);T(tL.$$.fragment,na),vCo=i(na),Rce=n(na,"P",{});var Lft=s(Rce);FCo=r(Lft,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Lft.forEach(t),TCo=i(na),Ra=n(na,"P",{});var Lw=s(Ra);MCo=r(Lw,"The model class to instantiate is selected based on the "),Pce=n(Lw,"CODE",{});var yft=s(Pce);ECo=r(yft,"model_type"),yft.forEach(t),CCo=r(Lw,` property of the config object (either
passed as an argument or loaded from `),Bce=n(Lw,"CODE",{});var xft=s(Bce);wCo=r(xft,"pretrained_model_name_or_path"),xft.forEach(t),ACo=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ice=n(Lw,"CODE",{});var $ft=s(Ice);LCo=r($ft,"pretrained_model_name_or_path"),$ft.forEach(t),yCo=r(Lw,":"),Lw.forEach(t),xCo=i(na),G=n(na,"UL",{});var O=s(G);S_=n(O,"LI",{});var y8e=s(S_);Nce=n(y8e,"STRONG",{});var kft=s(Nce);$Co=r(kft,"albert"),kft.forEach(t),kCo=r(y8e," \u2014 "),eD=n(y8e,"A",{href:!0});var Sft=s(eD);SCo=r(Sft,"AlbertForPreTraining"),Sft.forEach(t),RCo=r(y8e," (ALBERT model)"),y8e.forEach(t),PCo=i(O),R_=n(O,"LI",{});var x8e=s(R_);qce=n(x8e,"STRONG",{});var Rft=s(qce);BCo=r(Rft,"bart"),Rft.forEach(t),ICo=r(x8e," \u2014 "),oD=n(x8e,"A",{href:!0});var Pft=s(oD);NCo=r(Pft,"BartForConditionalGeneration"),Pft.forEach(t),qCo=r(x8e," (BART model)"),x8e.forEach(t),jCo=i(O),P_=n(O,"LI",{});var $8e=s(P_);jce=n($8e,"STRONG",{});var Bft=s(jce);DCo=r(Bft,"bert"),Bft.forEach(t),GCo=r($8e," \u2014 "),rD=n($8e,"A",{href:!0});var Ift=s(rD);OCo=r(Ift,"BertForPreTraining"),Ift.forEach(t),VCo=r($8e," (BERT model)"),$8e.forEach(t),XCo=i(O),B_=n(O,"LI",{});var k8e=s(B_);Dce=n(k8e,"STRONG",{});var Nft=s(Dce);zCo=r(Nft,"big_bird"),Nft.forEach(t),WCo=r(k8e," \u2014 "),tD=n(k8e,"A",{href:!0});var qft=s(tD);QCo=r(qft,"BigBirdForPreTraining"),qft.forEach(t),HCo=r(k8e," (BigBird model)"),k8e.forEach(t),UCo=i(O),I_=n(O,"LI",{});var S8e=s(I_);Gce=n(S8e,"STRONG",{});var jft=s(Gce);JCo=r(jft,"bloom"),jft.forEach(t),YCo=r(S8e," \u2014 "),aD=n(S8e,"A",{href:!0});var Dft=s(aD);KCo=r(Dft,"BloomForCausalLM"),Dft.forEach(t),ZCo=r(S8e," (BLOOM model)"),S8e.forEach(t),e5o=i(O),N_=n(O,"LI",{});var R8e=s(N_);Oce=n(R8e,"STRONG",{});var Gft=s(Oce);o5o=r(Gft,"camembert"),Gft.forEach(t),r5o=r(R8e," \u2014 "),nD=n(R8e,"A",{href:!0});var Oft=s(nD);t5o=r(Oft,"CamembertForMaskedLM"),Oft.forEach(t),a5o=r(R8e," (CamemBERT model)"),R8e.forEach(t),n5o=i(O),q_=n(O,"LI",{});var P8e=s(q_);Vce=n(P8e,"STRONG",{});var Vft=s(Vce);s5o=r(Vft,"ctrl"),Vft.forEach(t),l5o=r(P8e," \u2014 "),sD=n(P8e,"A",{href:!0});var Xft=s(sD);i5o=r(Xft,"CTRLLMHeadModel"),Xft.forEach(t),d5o=r(P8e," (CTRL model)"),P8e.forEach(t),c5o=i(O),j_=n(O,"LI",{});var B8e=s(j_);Xce=n(B8e,"STRONG",{});var zft=s(Xce);f5o=r(zft,"data2vec-text"),zft.forEach(t),m5o=r(B8e," \u2014 "),lD=n(B8e,"A",{href:!0});var Wft=s(lD);g5o=r(Wft,"Data2VecTextForMaskedLM"),Wft.forEach(t),h5o=r(B8e," (Data2VecText model)"),B8e.forEach(t),p5o=i(O),D_=n(O,"LI",{});var I8e=s(D_);zce=n(I8e,"STRONG",{});var Qft=s(zce);u5o=r(Qft,"deberta"),Qft.forEach(t),_5o=r(I8e," \u2014 "),iD=n(I8e,"A",{href:!0});var Hft=s(iD);b5o=r(Hft,"DebertaForMaskedLM"),Hft.forEach(t),v5o=r(I8e," (DeBERTa model)"),I8e.forEach(t),F5o=i(O),G_=n(O,"LI",{});var N8e=s(G_);Wce=n(N8e,"STRONG",{});var Uft=s(Wce);T5o=r(Uft,"deberta-v2"),Uft.forEach(t),M5o=r(N8e," \u2014 "),dD=n(N8e,"A",{href:!0});var Jft=s(dD);E5o=r(Jft,"DebertaV2ForMaskedLM"),Jft.forEach(t),C5o=r(N8e," (DeBERTa-v2 model)"),N8e.forEach(t),w5o=i(O),O_=n(O,"LI",{});var q8e=s(O_);Qce=n(q8e,"STRONG",{});var Yft=s(Qce);A5o=r(Yft,"distilbert"),Yft.forEach(t),L5o=r(q8e," \u2014 "),cD=n(q8e,"A",{href:!0});var Kft=s(cD);y5o=r(Kft,"DistilBertForMaskedLM"),Kft.forEach(t),x5o=r(q8e," (DistilBERT model)"),q8e.forEach(t),$5o=i(O),V_=n(O,"LI",{});var j8e=s(V_);Hce=n(j8e,"STRONG",{});var Zft=s(Hce);k5o=r(Zft,"electra"),Zft.forEach(t),S5o=r(j8e," \u2014 "),fD=n(j8e,"A",{href:!0});var emt=s(fD);R5o=r(emt,"ElectraForPreTraining"),emt.forEach(t),P5o=r(j8e," (ELECTRA model)"),j8e.forEach(t),B5o=i(O),X_=n(O,"LI",{});var D8e=s(X_);Uce=n(D8e,"STRONG",{});var omt=s(Uce);I5o=r(omt,"flaubert"),omt.forEach(t),N5o=r(D8e," \u2014 "),mD=n(D8e,"A",{href:!0});var rmt=s(mD);q5o=r(rmt,"FlaubertWithLMHeadModel"),rmt.forEach(t),j5o=r(D8e," (FlauBERT model)"),D8e.forEach(t),D5o=i(O),z_=n(O,"LI",{});var G8e=s(z_);Jce=n(G8e,"STRONG",{});var tmt=s(Jce);G5o=r(tmt,"flava"),tmt.forEach(t),O5o=r(G8e," \u2014 "),gD=n(G8e,"A",{href:!0});var amt=s(gD);V5o=r(amt,"FlavaForPreTraining"),amt.forEach(t),X5o=r(G8e," (FLAVA model)"),G8e.forEach(t),z5o=i(O),W_=n(O,"LI",{});var O8e=s(W_);Yce=n(O8e,"STRONG",{});var nmt=s(Yce);W5o=r(nmt,"fnet"),nmt.forEach(t),Q5o=r(O8e," \u2014 "),hD=n(O8e,"A",{href:!0});var smt=s(hD);H5o=r(smt,"FNetForPreTraining"),smt.forEach(t),U5o=r(O8e," (FNet model)"),O8e.forEach(t),J5o=i(O),Q_=n(O,"LI",{});var V8e=s(Q_);Kce=n(V8e,"STRONG",{});var lmt=s(Kce);Y5o=r(lmt,"fsmt"),lmt.forEach(t),K5o=r(V8e," \u2014 "),pD=n(V8e,"A",{href:!0});var imt=s(pD);Z5o=r(imt,"FSMTForConditionalGeneration"),imt.forEach(t),e3o=r(V8e," (FairSeq Machine-Translation model)"),V8e.forEach(t),o3o=i(O),H_=n(O,"LI",{});var X8e=s(H_);Zce=n(X8e,"STRONG",{});var dmt=s(Zce);r3o=r(dmt,"funnel"),dmt.forEach(t),t3o=r(X8e," \u2014 "),uD=n(X8e,"A",{href:!0});var cmt=s(uD);a3o=r(cmt,"FunnelForPreTraining"),cmt.forEach(t),n3o=r(X8e," (Funnel Transformer model)"),X8e.forEach(t),s3o=i(O),U_=n(O,"LI",{});var z8e=s(U_);efe=n(z8e,"STRONG",{});var fmt=s(efe);l3o=r(fmt,"gpt2"),fmt.forEach(t),i3o=r(z8e," \u2014 "),_D=n(z8e,"A",{href:!0});var mmt=s(_D);d3o=r(mmt,"GPT2LMHeadModel"),mmt.forEach(t),c3o=r(z8e," (OpenAI GPT-2 model)"),z8e.forEach(t),f3o=i(O),J_=n(O,"LI",{});var W8e=s(J_);ofe=n(W8e,"STRONG",{});var gmt=s(ofe);m3o=r(gmt,"ibert"),gmt.forEach(t),g3o=r(W8e," \u2014 "),bD=n(W8e,"A",{href:!0});var hmt=s(bD);h3o=r(hmt,"IBertForMaskedLM"),hmt.forEach(t),p3o=r(W8e," (I-BERT model)"),W8e.forEach(t),u3o=i(O),Y_=n(O,"LI",{});var Q8e=s(Y_);rfe=n(Q8e,"STRONG",{});var pmt=s(rfe);_3o=r(pmt,"layoutlm"),pmt.forEach(t),b3o=r(Q8e," \u2014 "),vD=n(Q8e,"A",{href:!0});var umt=s(vD);v3o=r(umt,"LayoutLMForMaskedLM"),umt.forEach(t),F3o=r(Q8e," (LayoutLM model)"),Q8e.forEach(t),T3o=i(O),K_=n(O,"LI",{});var H8e=s(K_);tfe=n(H8e,"STRONG",{});var _mt=s(tfe);M3o=r(_mt,"longformer"),_mt.forEach(t),E3o=r(H8e," \u2014 "),FD=n(H8e,"A",{href:!0});var bmt=s(FD);C3o=r(bmt,"LongformerForMaskedLM"),bmt.forEach(t),w3o=r(H8e," (Longformer model)"),H8e.forEach(t),A3o=i(O),Z_=n(O,"LI",{});var U8e=s(Z_);afe=n(U8e,"STRONG",{});var vmt=s(afe);L3o=r(vmt,"lxmert"),vmt.forEach(t),y3o=r(U8e," \u2014 "),TD=n(U8e,"A",{href:!0});var Fmt=s(TD);x3o=r(Fmt,"LxmertForPreTraining"),Fmt.forEach(t),$3o=r(U8e," (LXMERT model)"),U8e.forEach(t),k3o=i(O),e1=n(O,"LI",{});var J8e=s(e1);nfe=n(J8e,"STRONG",{});var Tmt=s(nfe);S3o=r(Tmt,"megatron-bert"),Tmt.forEach(t),R3o=r(J8e," \u2014 "),MD=n(J8e,"A",{href:!0});var Mmt=s(MD);P3o=r(Mmt,"MegatronBertForPreTraining"),Mmt.forEach(t),B3o=r(J8e," (Megatron-BERT model)"),J8e.forEach(t),I3o=i(O),o1=n(O,"LI",{});var Y8e=s(o1);sfe=n(Y8e,"STRONG",{});var Emt=s(sfe);N3o=r(Emt,"mobilebert"),Emt.forEach(t),q3o=r(Y8e," \u2014 "),ED=n(Y8e,"A",{href:!0});var Cmt=s(ED);j3o=r(Cmt,"MobileBertForPreTraining"),Cmt.forEach(t),D3o=r(Y8e," (MobileBERT model)"),Y8e.forEach(t),G3o=i(O),r1=n(O,"LI",{});var K8e=s(r1);lfe=n(K8e,"STRONG",{});var wmt=s(lfe);O3o=r(wmt,"mpnet"),wmt.forEach(t),V3o=r(K8e," \u2014 "),CD=n(K8e,"A",{href:!0});var Amt=s(CD);X3o=r(Amt,"MPNetForMaskedLM"),Amt.forEach(t),z3o=r(K8e," (MPNet model)"),K8e.forEach(t),W3o=i(O),t1=n(O,"LI",{});var Z8e=s(t1);ife=n(Z8e,"STRONG",{});var Lmt=s(ife);Q3o=r(Lmt,"openai-gpt"),Lmt.forEach(t),H3o=r(Z8e," \u2014 "),wD=n(Z8e,"A",{href:!0});var ymt=s(wD);U3o=r(ymt,"OpenAIGPTLMHeadModel"),ymt.forEach(t),J3o=r(Z8e," (OpenAI GPT model)"),Z8e.forEach(t),Y3o=i(O),a1=n(O,"LI",{});var exe=s(a1);dfe=n(exe,"STRONG",{});var xmt=s(dfe);K3o=r(xmt,"retribert"),xmt.forEach(t),Z3o=r(exe," \u2014 "),AD=n(exe,"A",{href:!0});var $mt=s(AD);ewo=r($mt,"RetriBertModel"),$mt.forEach(t),owo=r(exe," (RetriBERT model)"),exe.forEach(t),rwo=i(O),n1=n(O,"LI",{});var oxe=s(n1);cfe=n(oxe,"STRONG",{});var kmt=s(cfe);two=r(kmt,"roberta"),kmt.forEach(t),awo=r(oxe," \u2014 "),LD=n(oxe,"A",{href:!0});var Smt=s(LD);nwo=r(Smt,"RobertaForMaskedLM"),Smt.forEach(t),swo=r(oxe," (RoBERTa model)"),oxe.forEach(t),lwo=i(O),s1=n(O,"LI",{});var rxe=s(s1);ffe=n(rxe,"STRONG",{});var Rmt=s(ffe);iwo=r(Rmt,"splinter"),Rmt.forEach(t),dwo=r(rxe," \u2014 "),yD=n(rxe,"A",{href:!0});var Pmt=s(yD);cwo=r(Pmt,"SplinterForPreTraining"),Pmt.forEach(t),fwo=r(rxe," (Splinter model)"),rxe.forEach(t),mwo=i(O),l1=n(O,"LI",{});var txe=s(l1);mfe=n(txe,"STRONG",{});var Bmt=s(mfe);gwo=r(Bmt,"squeezebert"),Bmt.forEach(t),hwo=r(txe," \u2014 "),xD=n(txe,"A",{href:!0});var Imt=s(xD);pwo=r(Imt,"SqueezeBertForMaskedLM"),Imt.forEach(t),uwo=r(txe," (SqueezeBERT model)"),txe.forEach(t),_wo=i(O),i1=n(O,"LI",{});var axe=s(i1);gfe=n(axe,"STRONG",{});var Nmt=s(gfe);bwo=r(Nmt,"t5"),Nmt.forEach(t),vwo=r(axe," \u2014 "),$D=n(axe,"A",{href:!0});var qmt=s($D);Fwo=r(qmt,"T5ForConditionalGeneration"),qmt.forEach(t),Two=r(axe," (T5 model)"),axe.forEach(t),Mwo=i(O),d1=n(O,"LI",{});var nxe=s(d1);hfe=n(nxe,"STRONG",{});var jmt=s(hfe);Ewo=r(jmt,"tapas"),jmt.forEach(t),Cwo=r(nxe," \u2014 "),kD=n(nxe,"A",{href:!0});var Dmt=s(kD);wwo=r(Dmt,"TapasForMaskedLM"),Dmt.forEach(t),Awo=r(nxe," (TAPAS model)"),nxe.forEach(t),Lwo=i(O),c1=n(O,"LI",{});var sxe=s(c1);pfe=n(sxe,"STRONG",{});var Gmt=s(pfe);ywo=r(Gmt,"transfo-xl"),Gmt.forEach(t),xwo=r(sxe," \u2014 "),SD=n(sxe,"A",{href:!0});var Omt=s(SD);$wo=r(Omt,"TransfoXLLMHeadModel"),Omt.forEach(t),kwo=r(sxe," (Transformer-XL model)"),sxe.forEach(t),Swo=i(O),f1=n(O,"LI",{});var lxe=s(f1);ufe=n(lxe,"STRONG",{});var Vmt=s(ufe);Rwo=r(Vmt,"unispeech"),Vmt.forEach(t),Pwo=r(lxe," \u2014 "),RD=n(lxe,"A",{href:!0});var Xmt=s(RD);Bwo=r(Xmt,"UniSpeechForPreTraining"),Xmt.forEach(t),Iwo=r(lxe," (UniSpeech model)"),lxe.forEach(t),Nwo=i(O),m1=n(O,"LI",{});var ixe=s(m1);_fe=n(ixe,"STRONG",{});var zmt=s(_fe);qwo=r(zmt,"unispeech-sat"),zmt.forEach(t),jwo=r(ixe," \u2014 "),PD=n(ixe,"A",{href:!0});var Wmt=s(PD);Dwo=r(Wmt,"UniSpeechSatForPreTraining"),Wmt.forEach(t),Gwo=r(ixe," (UniSpeechSat model)"),ixe.forEach(t),Owo=i(O),g1=n(O,"LI",{});var dxe=s(g1);bfe=n(dxe,"STRONG",{});var Qmt=s(bfe);Vwo=r(Qmt,"visual_bert"),Qmt.forEach(t),Xwo=r(dxe," \u2014 "),BD=n(dxe,"A",{href:!0});var Hmt=s(BD);zwo=r(Hmt,"VisualBertForPreTraining"),Hmt.forEach(t),Wwo=r(dxe," (VisualBERT model)"),dxe.forEach(t),Qwo=i(O),h1=n(O,"LI",{});var cxe=s(h1);vfe=n(cxe,"STRONG",{});var Umt=s(vfe);Hwo=r(Umt,"vit_mae"),Umt.forEach(t),Uwo=r(cxe," \u2014 "),ID=n(cxe,"A",{href:!0});var Jmt=s(ID);Jwo=r(Jmt,"ViTMAEForPreTraining"),Jmt.forEach(t),Ywo=r(cxe," (ViTMAE model)"),cxe.forEach(t),Kwo=i(O),p1=n(O,"LI",{});var fxe=s(p1);Ffe=n(fxe,"STRONG",{});var Ymt=s(Ffe);Zwo=r(Ymt,"wav2vec2"),Ymt.forEach(t),eAo=r(fxe," \u2014 "),ND=n(fxe,"A",{href:!0});var Kmt=s(ND);oAo=r(Kmt,"Wav2Vec2ForPreTraining"),Kmt.forEach(t),rAo=r(fxe," (Wav2Vec2 model)"),fxe.forEach(t),tAo=i(O),u1=n(O,"LI",{});var mxe=s(u1);Tfe=n(mxe,"STRONG",{});var Zmt=s(Tfe);aAo=r(Zmt,"wav2vec2-conformer"),Zmt.forEach(t),nAo=r(mxe," \u2014 "),qD=n(mxe,"A",{href:!0});var egt=s(qD);sAo=r(egt,"Wav2Vec2ConformerForPreTraining"),egt.forEach(t),lAo=r(mxe," (Wav2Vec2-Conformer model)"),mxe.forEach(t),iAo=i(O),_1=n(O,"LI",{});var gxe=s(_1);Mfe=n(gxe,"STRONG",{});var ogt=s(Mfe);dAo=r(ogt,"xlm"),ogt.forEach(t),cAo=r(gxe," \u2014 "),jD=n(gxe,"A",{href:!0});var rgt=s(jD);fAo=r(rgt,"XLMWithLMHeadModel"),rgt.forEach(t),mAo=r(gxe," (XLM model)"),gxe.forEach(t),gAo=i(O),b1=n(O,"LI",{});var hxe=s(b1);Efe=n(hxe,"STRONG",{});var tgt=s(Efe);hAo=r(tgt,"xlm-roberta"),tgt.forEach(t),pAo=r(hxe," \u2014 "),DD=n(hxe,"A",{href:!0});var agt=s(DD);uAo=r(agt,"XLMRobertaForMaskedLM"),agt.forEach(t),_Ao=r(hxe," (XLM-RoBERTa model)"),hxe.forEach(t),bAo=i(O),v1=n(O,"LI",{});var pxe=s(v1);Cfe=n(pxe,"STRONG",{});var ngt=s(Cfe);vAo=r(ngt,"xlm-roberta-xl"),ngt.forEach(t),FAo=r(pxe," \u2014 "),GD=n(pxe,"A",{href:!0});var sgt=s(GD);TAo=r(sgt,"XLMRobertaXLForMaskedLM"),sgt.forEach(t),MAo=r(pxe," (XLM-RoBERTa-XL model)"),pxe.forEach(t),EAo=i(O),F1=n(O,"LI",{});var uxe=s(F1);wfe=n(uxe,"STRONG",{});var lgt=s(wfe);CAo=r(lgt,"xlnet"),lgt.forEach(t),wAo=r(uxe," \u2014 "),OD=n(uxe,"A",{href:!0});var igt=s(OD);AAo=r(igt,"XLNetLMHeadModel"),igt.forEach(t),LAo=r(uxe," (XLNet model)"),uxe.forEach(t),O.forEach(t),yAo=i(na),T1=n(na,"P",{});var _xe=s(T1);xAo=r(_xe,"The model is set in evaluation mode by default using "),Afe=n(_xe,"CODE",{});var dgt=s(Afe);$Ao=r(dgt,"model.eval()"),dgt.forEach(t),kAo=r(_xe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lfe=n(_xe,"CODE",{});var cgt=s(Lfe);SAo=r(cgt,"model.train()"),cgt.forEach(t),_xe.forEach(t),RAo=i(na),T(M1.$$.fragment,na),na.forEach(t),Ys.forEach(t),yGe=i(f),Gi=n(f,"H2",{class:!0});var PVe=s(Gi);E1=n(PVe,"A",{id:!0,class:!0,href:!0});var fgt=s(E1);yfe=n(fgt,"SPAN",{});var mgt=s(yfe);T(aL.$$.fragment,mgt),mgt.forEach(t),fgt.forEach(t),PAo=i(PVe),xfe=n(PVe,"SPAN",{});var ggt=s(xfe);BAo=r(ggt,"AutoModelForCausalLM"),ggt.forEach(t),PVe.forEach(t),xGe=i(f),ko=n(f,"DIV",{class:!0});var Ks=s(ko);T(nL.$$.fragment,Ks),IAo=i(Ks),Oi=n(Ks,"P",{});var doe=s(Oi);NAo=r(doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VD=n(doe,"A",{href:!0});var hgt=s(VD);qAo=r(hgt,"from_pretrained()"),hgt.forEach(t),jAo=r(doe," class method or the "),XD=n(doe,"A",{href:!0});var pgt=s(XD);DAo=r(pgt,"from_config()"),pgt.forEach(t),GAo=r(doe,` class
method.`),doe.forEach(t),OAo=i(Ks),sL=n(Ks,"P",{});var BVe=s(sL);VAo=r(BVe,"This class cannot be instantiated directly using "),$fe=n(BVe,"CODE",{});var ugt=s($fe);XAo=r(ugt,"__init__()"),ugt.forEach(t),zAo=r(BVe," (throws an error)."),BVe.forEach(t),WAo=i(Ks),lt=n(Ks,"DIV",{class:!0});var yw=s(lt);T(lL.$$.fragment,yw),QAo=i(yw),kfe=n(yw,"P",{});var _gt=s(kfe);HAo=r(_gt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_gt.forEach(t),UAo=i(yw),Vi=n(yw,"P",{});var coe=s(Vi);JAo=r(coe,`Note:
Loading a model from its configuration file does `),Sfe=n(coe,"STRONG",{});var bgt=s(Sfe);YAo=r(bgt,"not"),bgt.forEach(t),KAo=r(coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=n(coe,"A",{href:!0});var vgt=s(zD);ZAo=r(vgt,"from_pretrained()"),vgt.forEach(t),e6o=r(coe," to load the model weights."),coe.forEach(t),o6o=i(yw),T(C1.$$.fragment,yw),yw.forEach(t),r6o=i(Ks),Ke=n(Ks,"DIV",{class:!0});var sa=s(Ke);T(iL.$$.fragment,sa),t6o=i(sa),Rfe=n(sa,"P",{});var Fgt=s(Rfe);a6o=r(Fgt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Fgt.forEach(t),n6o=i(sa),Pa=n(sa,"P",{});var xw=s(Pa);s6o=r(xw,"The model class to instantiate is selected based on the "),Pfe=n(xw,"CODE",{});var Tgt=s(Pfe);l6o=r(Tgt,"model_type"),Tgt.forEach(t),i6o=r(xw,` property of the config object (either
passed as an argument or loaded from `),Bfe=n(xw,"CODE",{});var Mgt=s(Bfe);d6o=r(Mgt,"pretrained_model_name_or_path"),Mgt.forEach(t),c6o=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=n(xw,"CODE",{});var Egt=s(Ife);f6o=r(Egt,"pretrained_model_name_or_path"),Egt.forEach(t),m6o=r(xw,":"),xw.forEach(t),g6o=i(sa),z=n(sa,"UL",{});var W=s(z);w1=n(W,"LI",{});var bxe=s(w1);Nfe=n(bxe,"STRONG",{});var Cgt=s(Nfe);h6o=r(Cgt,"bart"),Cgt.forEach(t),p6o=r(bxe," \u2014 "),WD=n(bxe,"A",{href:!0});var wgt=s(WD);u6o=r(wgt,"BartForCausalLM"),wgt.forEach(t),_6o=r(bxe," (BART model)"),bxe.forEach(t),b6o=i(W),A1=n(W,"LI",{});var vxe=s(A1);qfe=n(vxe,"STRONG",{});var Agt=s(qfe);v6o=r(Agt,"bert"),Agt.forEach(t),F6o=r(vxe," \u2014 "),QD=n(vxe,"A",{href:!0});var Lgt=s(QD);T6o=r(Lgt,"BertLMHeadModel"),Lgt.forEach(t),M6o=r(vxe," (BERT model)"),vxe.forEach(t),E6o=i(W),L1=n(W,"LI",{});var Fxe=s(L1);jfe=n(Fxe,"STRONG",{});var ygt=s(jfe);C6o=r(ygt,"bert-generation"),ygt.forEach(t),w6o=r(Fxe," \u2014 "),HD=n(Fxe,"A",{href:!0});var xgt=s(HD);A6o=r(xgt,"BertGenerationDecoder"),xgt.forEach(t),L6o=r(Fxe," (Bert Generation model)"),Fxe.forEach(t),y6o=i(W),y1=n(W,"LI",{});var Txe=s(y1);Dfe=n(Txe,"STRONG",{});var $gt=s(Dfe);x6o=r($gt,"big_bird"),$gt.forEach(t),$6o=r(Txe," \u2014 "),UD=n(Txe,"A",{href:!0});var kgt=s(UD);k6o=r(kgt,"BigBirdForCausalLM"),kgt.forEach(t),S6o=r(Txe," (BigBird model)"),Txe.forEach(t),R6o=i(W),x1=n(W,"LI",{});var Mxe=s(x1);Gfe=n(Mxe,"STRONG",{});var Sgt=s(Gfe);P6o=r(Sgt,"bigbird_pegasus"),Sgt.forEach(t),B6o=r(Mxe," \u2014 "),JD=n(Mxe,"A",{href:!0});var Rgt=s(JD);I6o=r(Rgt,"BigBirdPegasusForCausalLM"),Rgt.forEach(t),N6o=r(Mxe," (BigBird-Pegasus model)"),Mxe.forEach(t),q6o=i(W),$1=n(W,"LI",{});var Exe=s($1);Ofe=n(Exe,"STRONG",{});var Pgt=s(Ofe);j6o=r(Pgt,"blenderbot"),Pgt.forEach(t),D6o=r(Exe," \u2014 "),YD=n(Exe,"A",{href:!0});var Bgt=s(YD);G6o=r(Bgt,"BlenderbotForCausalLM"),Bgt.forEach(t),O6o=r(Exe," (Blenderbot model)"),Exe.forEach(t),V6o=i(W),k1=n(W,"LI",{});var Cxe=s(k1);Vfe=n(Cxe,"STRONG",{});var Igt=s(Vfe);X6o=r(Igt,"blenderbot-small"),Igt.forEach(t),z6o=r(Cxe," \u2014 "),KD=n(Cxe,"A",{href:!0});var Ngt=s(KD);W6o=r(Ngt,"BlenderbotSmallForCausalLM"),Ngt.forEach(t),Q6o=r(Cxe," (BlenderbotSmall model)"),Cxe.forEach(t),H6o=i(W),S1=n(W,"LI",{});var wxe=s(S1);Xfe=n(wxe,"STRONG",{});var qgt=s(Xfe);U6o=r(qgt,"bloom"),qgt.forEach(t),J6o=r(wxe," \u2014 "),ZD=n(wxe,"A",{href:!0});var jgt=s(ZD);Y6o=r(jgt,"BloomForCausalLM"),jgt.forEach(t),K6o=r(wxe," (BLOOM model)"),wxe.forEach(t),Z6o=i(W),R1=n(W,"LI",{});var Axe=s(R1);zfe=n(Axe,"STRONG",{});var Dgt=s(zfe);eLo=r(Dgt,"camembert"),Dgt.forEach(t),oLo=r(Axe," \u2014 "),eG=n(Axe,"A",{href:!0});var Ggt=s(eG);rLo=r(Ggt,"CamembertForCausalLM"),Ggt.forEach(t),tLo=r(Axe," (CamemBERT model)"),Axe.forEach(t),aLo=i(W),P1=n(W,"LI",{});var Lxe=s(P1);Wfe=n(Lxe,"STRONG",{});var Ogt=s(Wfe);nLo=r(Ogt,"ctrl"),Ogt.forEach(t),sLo=r(Lxe," \u2014 "),oG=n(Lxe,"A",{href:!0});var Vgt=s(oG);lLo=r(Vgt,"CTRLLMHeadModel"),Vgt.forEach(t),iLo=r(Lxe," (CTRL model)"),Lxe.forEach(t),dLo=i(W),B1=n(W,"LI",{});var yxe=s(B1);Qfe=n(yxe,"STRONG",{});var Xgt=s(Qfe);cLo=r(Xgt,"data2vec-text"),Xgt.forEach(t),fLo=r(yxe," \u2014 "),rG=n(yxe,"A",{href:!0});var zgt=s(rG);mLo=r(zgt,"Data2VecTextForCausalLM"),zgt.forEach(t),gLo=r(yxe," (Data2VecText model)"),yxe.forEach(t),hLo=i(W),I1=n(W,"LI",{});var xxe=s(I1);Hfe=n(xxe,"STRONG",{});var Wgt=s(Hfe);pLo=r(Wgt,"electra"),Wgt.forEach(t),uLo=r(xxe," \u2014 "),tG=n(xxe,"A",{href:!0});var Qgt=s(tG);_Lo=r(Qgt,"ElectraForCausalLM"),Qgt.forEach(t),bLo=r(xxe," (ELECTRA model)"),xxe.forEach(t),vLo=i(W),N1=n(W,"LI",{});var $xe=s(N1);Ufe=n($xe,"STRONG",{});var Hgt=s(Ufe);FLo=r(Hgt,"gpt2"),Hgt.forEach(t),TLo=r($xe," \u2014 "),aG=n($xe,"A",{href:!0});var Ugt=s(aG);MLo=r(Ugt,"GPT2LMHeadModel"),Ugt.forEach(t),ELo=r($xe," (OpenAI GPT-2 model)"),$xe.forEach(t),CLo=i(W),q1=n(W,"LI",{});var kxe=s(q1);Jfe=n(kxe,"STRONG",{});var Jgt=s(Jfe);wLo=r(Jgt,"gpt_neo"),Jgt.forEach(t),ALo=r(kxe," \u2014 "),nG=n(kxe,"A",{href:!0});var Ygt=s(nG);LLo=r(Ygt,"GPTNeoForCausalLM"),Ygt.forEach(t),yLo=r(kxe," (GPT Neo model)"),kxe.forEach(t),xLo=i(W),j1=n(W,"LI",{});var Sxe=s(j1);Yfe=n(Sxe,"STRONG",{});var Kgt=s(Yfe);$Lo=r(Kgt,"gpt_neox"),Kgt.forEach(t),kLo=r(Sxe," \u2014 "),sG=n(Sxe,"A",{href:!0});var Zgt=s(sG);SLo=r(Zgt,"GPTNeoXForCausalLM"),Zgt.forEach(t),RLo=r(Sxe," (GPT NeoX model)"),Sxe.forEach(t),PLo=i(W),D1=n(W,"LI",{});var Rxe=s(D1);Kfe=n(Rxe,"STRONG",{});var eht=s(Kfe);BLo=r(eht,"gptj"),eht.forEach(t),ILo=r(Rxe," \u2014 "),lG=n(Rxe,"A",{href:!0});var oht=s(lG);NLo=r(oht,"GPTJForCausalLM"),oht.forEach(t),qLo=r(Rxe," (GPT-J model)"),Rxe.forEach(t),jLo=i(W),G1=n(W,"LI",{});var Pxe=s(G1);Zfe=n(Pxe,"STRONG",{});var rht=s(Zfe);DLo=r(rht,"marian"),rht.forEach(t),GLo=r(Pxe," \u2014 "),iG=n(Pxe,"A",{href:!0});var tht=s(iG);OLo=r(tht,"MarianForCausalLM"),tht.forEach(t),VLo=r(Pxe," (Marian model)"),Pxe.forEach(t),XLo=i(W),O1=n(W,"LI",{});var Bxe=s(O1);eme=n(Bxe,"STRONG",{});var aht=s(eme);zLo=r(aht,"mbart"),aht.forEach(t),WLo=r(Bxe," \u2014 "),dG=n(Bxe,"A",{href:!0});var nht=s(dG);QLo=r(nht,"MBartForCausalLM"),nht.forEach(t),HLo=r(Bxe," (mBART model)"),Bxe.forEach(t),ULo=i(W),V1=n(W,"LI",{});var Ixe=s(V1);ome=n(Ixe,"STRONG",{});var sht=s(ome);JLo=r(sht,"megatron-bert"),sht.forEach(t),YLo=r(Ixe," \u2014 "),cG=n(Ixe,"A",{href:!0});var lht=s(cG);KLo=r(lht,"MegatronBertForCausalLM"),lht.forEach(t),ZLo=r(Ixe," (Megatron-BERT model)"),Ixe.forEach(t),eyo=i(W),X1=n(W,"LI",{});var Nxe=s(X1);rme=n(Nxe,"STRONG",{});var iht=s(rme);oyo=r(iht,"openai-gpt"),iht.forEach(t),ryo=r(Nxe," \u2014 "),fG=n(Nxe,"A",{href:!0});var dht=s(fG);tyo=r(dht,"OpenAIGPTLMHeadModel"),dht.forEach(t),ayo=r(Nxe," (OpenAI GPT model)"),Nxe.forEach(t),nyo=i(W),z1=n(W,"LI",{});var qxe=s(z1);tme=n(qxe,"STRONG",{});var cht=s(tme);syo=r(cht,"opt"),cht.forEach(t),lyo=r(qxe," \u2014 "),mG=n(qxe,"A",{href:!0});var fht=s(mG);iyo=r(fht,"OPTForCausalLM"),fht.forEach(t),dyo=r(qxe," (OPT model)"),qxe.forEach(t),cyo=i(W),W1=n(W,"LI",{});var jxe=s(W1);ame=n(jxe,"STRONG",{});var mht=s(ame);fyo=r(mht,"pegasus"),mht.forEach(t),myo=r(jxe," \u2014 "),gG=n(jxe,"A",{href:!0});var ght=s(gG);gyo=r(ght,"PegasusForCausalLM"),ght.forEach(t),hyo=r(jxe," (Pegasus model)"),jxe.forEach(t),pyo=i(W),Q1=n(W,"LI",{});var Dxe=s(Q1);nme=n(Dxe,"STRONG",{});var hht=s(nme);uyo=r(hht,"plbart"),hht.forEach(t),_yo=r(Dxe," \u2014 "),hG=n(Dxe,"A",{href:!0});var pht=s(hG);byo=r(pht,"PLBartForCausalLM"),pht.forEach(t),vyo=r(Dxe," (PLBart model)"),Dxe.forEach(t),Fyo=i(W),H1=n(W,"LI",{});var Gxe=s(H1);sme=n(Gxe,"STRONG",{});var uht=s(sme);Tyo=r(uht,"prophetnet"),uht.forEach(t),Myo=r(Gxe," \u2014 "),pG=n(Gxe,"A",{href:!0});var _ht=s(pG);Eyo=r(_ht,"ProphetNetForCausalLM"),_ht.forEach(t),Cyo=r(Gxe," (ProphetNet model)"),Gxe.forEach(t),wyo=i(W),U1=n(W,"LI",{});var Oxe=s(U1);lme=n(Oxe,"STRONG",{});var bht=s(lme);Ayo=r(bht,"qdqbert"),bht.forEach(t),Lyo=r(Oxe," \u2014 "),uG=n(Oxe,"A",{href:!0});var vht=s(uG);yyo=r(vht,"QDQBertLMHeadModel"),vht.forEach(t),xyo=r(Oxe," (QDQBert model)"),Oxe.forEach(t),$yo=i(W),J1=n(W,"LI",{});var Vxe=s(J1);ime=n(Vxe,"STRONG",{});var Fht=s(ime);kyo=r(Fht,"reformer"),Fht.forEach(t),Syo=r(Vxe," \u2014 "),_G=n(Vxe,"A",{href:!0});var Tht=s(_G);Ryo=r(Tht,"ReformerModelWithLMHead"),Tht.forEach(t),Pyo=r(Vxe," (Reformer model)"),Vxe.forEach(t),Byo=i(W),Y1=n(W,"LI",{});var Xxe=s(Y1);dme=n(Xxe,"STRONG",{});var Mht=s(dme);Iyo=r(Mht,"rembert"),Mht.forEach(t),Nyo=r(Xxe," \u2014 "),bG=n(Xxe,"A",{href:!0});var Eht=s(bG);qyo=r(Eht,"RemBertForCausalLM"),Eht.forEach(t),jyo=r(Xxe," (RemBERT model)"),Xxe.forEach(t),Dyo=i(W),K1=n(W,"LI",{});var zxe=s(K1);cme=n(zxe,"STRONG",{});var Cht=s(cme);Gyo=r(Cht,"roberta"),Cht.forEach(t),Oyo=r(zxe," \u2014 "),vG=n(zxe,"A",{href:!0});var wht=s(vG);Vyo=r(wht,"RobertaForCausalLM"),wht.forEach(t),Xyo=r(zxe," (RoBERTa model)"),zxe.forEach(t),zyo=i(W),Z1=n(W,"LI",{});var Wxe=s(Z1);fme=n(Wxe,"STRONG",{});var Aht=s(fme);Wyo=r(Aht,"roformer"),Aht.forEach(t),Qyo=r(Wxe," \u2014 "),FG=n(Wxe,"A",{href:!0});var Lht=s(FG);Hyo=r(Lht,"RoFormerForCausalLM"),Lht.forEach(t),Uyo=r(Wxe," (RoFormer model)"),Wxe.forEach(t),Jyo=i(W),e2=n(W,"LI",{});var Qxe=s(e2);mme=n(Qxe,"STRONG",{});var yht=s(mme);Yyo=r(yht,"speech_to_text_2"),yht.forEach(t),Kyo=r(Qxe," \u2014 "),TG=n(Qxe,"A",{href:!0});var xht=s(TG);Zyo=r(xht,"Speech2Text2ForCausalLM"),xht.forEach(t),e8o=r(Qxe," (Speech2Text2 model)"),Qxe.forEach(t),o8o=i(W),o2=n(W,"LI",{});var Hxe=s(o2);gme=n(Hxe,"STRONG",{});var $ht=s(gme);r8o=r($ht,"transfo-xl"),$ht.forEach(t),t8o=r(Hxe," \u2014 "),MG=n(Hxe,"A",{href:!0});var kht=s(MG);a8o=r(kht,"TransfoXLLMHeadModel"),kht.forEach(t),n8o=r(Hxe," (Transformer-XL model)"),Hxe.forEach(t),s8o=i(W),r2=n(W,"LI",{});var Uxe=s(r2);hme=n(Uxe,"STRONG",{});var Sht=s(hme);l8o=r(Sht,"trocr"),Sht.forEach(t),i8o=r(Uxe," \u2014 "),EG=n(Uxe,"A",{href:!0});var Rht=s(EG);d8o=r(Rht,"TrOCRForCausalLM"),Rht.forEach(t),c8o=r(Uxe," (TrOCR model)"),Uxe.forEach(t),f8o=i(W),t2=n(W,"LI",{});var Jxe=s(t2);pme=n(Jxe,"STRONG",{});var Pht=s(pme);m8o=r(Pht,"xglm"),Pht.forEach(t),g8o=r(Jxe," \u2014 "),CG=n(Jxe,"A",{href:!0});var Bht=s(CG);h8o=r(Bht,"XGLMForCausalLM"),Bht.forEach(t),p8o=r(Jxe," (XGLM model)"),Jxe.forEach(t),u8o=i(W),a2=n(W,"LI",{});var Yxe=s(a2);ume=n(Yxe,"STRONG",{});var Iht=s(ume);_8o=r(Iht,"xlm"),Iht.forEach(t),b8o=r(Yxe," \u2014 "),wG=n(Yxe,"A",{href:!0});var Nht=s(wG);v8o=r(Nht,"XLMWithLMHeadModel"),Nht.forEach(t),F8o=r(Yxe," (XLM model)"),Yxe.forEach(t),T8o=i(W),n2=n(W,"LI",{});var Kxe=s(n2);_me=n(Kxe,"STRONG",{});var qht=s(_me);M8o=r(qht,"xlm-prophetnet"),qht.forEach(t),E8o=r(Kxe," \u2014 "),AG=n(Kxe,"A",{href:!0});var jht=s(AG);C8o=r(jht,"XLMProphetNetForCausalLM"),jht.forEach(t),w8o=r(Kxe," (XLM-ProphetNet model)"),Kxe.forEach(t),A8o=i(W),s2=n(W,"LI",{});var Zxe=s(s2);bme=n(Zxe,"STRONG",{});var Dht=s(bme);L8o=r(Dht,"xlm-roberta"),Dht.forEach(t),y8o=r(Zxe," \u2014 "),LG=n(Zxe,"A",{href:!0});var Ght=s(LG);x8o=r(Ght,"XLMRobertaForCausalLM"),Ght.forEach(t),$8o=r(Zxe," (XLM-RoBERTa model)"),Zxe.forEach(t),k8o=i(W),l2=n(W,"LI",{});var e$e=s(l2);vme=n(e$e,"STRONG",{});var Oht=s(vme);S8o=r(Oht,"xlm-roberta-xl"),Oht.forEach(t),R8o=r(e$e," \u2014 "),yG=n(e$e,"A",{href:!0});var Vht=s(yG);P8o=r(Vht,"XLMRobertaXLForCausalLM"),Vht.forEach(t),B8o=r(e$e," (XLM-RoBERTa-XL model)"),e$e.forEach(t),I8o=i(W),i2=n(W,"LI",{});var o$e=s(i2);Fme=n(o$e,"STRONG",{});var Xht=s(Fme);N8o=r(Xht,"xlnet"),Xht.forEach(t),q8o=r(o$e," \u2014 "),xG=n(o$e,"A",{href:!0});var zht=s(xG);j8o=r(zht,"XLNetLMHeadModel"),zht.forEach(t),D8o=r(o$e," (XLNet model)"),o$e.forEach(t),W.forEach(t),G8o=i(sa),d2=n(sa,"P",{});var r$e=s(d2);O8o=r(r$e,"The model is set in evaluation mode by default using "),Tme=n(r$e,"CODE",{});var Wht=s(Tme);V8o=r(Wht,"model.eval()"),Wht.forEach(t),X8o=r(r$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=n(r$e,"CODE",{});var Qht=s(Mme);z8o=r(Qht,"model.train()"),Qht.forEach(t),r$e.forEach(t),W8o=i(sa),T(c2.$$.fragment,sa),sa.forEach(t),Ks.forEach(t),$Ge=i(f),Xi=n(f,"H2",{class:!0});var IVe=s(Xi);f2=n(IVe,"A",{id:!0,class:!0,href:!0});var Hht=s(f2);Eme=n(Hht,"SPAN",{});var Uht=s(Eme);T(dL.$$.fragment,Uht),Uht.forEach(t),Hht.forEach(t),Q8o=i(IVe),Cme=n(IVe,"SPAN",{});var Jht=s(Cme);H8o=r(Jht,"AutoModelForMaskedLM"),Jht.forEach(t),IVe.forEach(t),kGe=i(f),So=n(f,"DIV",{class:!0});var Zs=s(So);T(cL.$$.fragment,Zs),U8o=i(Zs),zi=n(Zs,"P",{});var foe=s(zi);J8o=r(foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$G=n(foe,"A",{href:!0});var Yht=s($G);Y8o=r(Yht,"from_pretrained()"),Yht.forEach(t),K8o=r(foe," class method or the "),kG=n(foe,"A",{href:!0});var Kht=s(kG);Z8o=r(Kht,"from_config()"),Kht.forEach(t),exo=r(foe,` class
method.`),foe.forEach(t),oxo=i(Zs),fL=n(Zs,"P",{});var NVe=s(fL);rxo=r(NVe,"This class cannot be instantiated directly using "),wme=n(NVe,"CODE",{});var Zht=s(wme);txo=r(Zht,"__init__()"),Zht.forEach(t),axo=r(NVe," (throws an error)."),NVe.forEach(t),nxo=i(Zs),it=n(Zs,"DIV",{class:!0});var $w=s(it);T(mL.$$.fragment,$w),sxo=i($w),Ame=n($w,"P",{});var ept=s(Ame);lxo=r(ept,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ept.forEach(t),ixo=i($w),Wi=n($w,"P",{});var moe=s(Wi);dxo=r(moe,`Note:
Loading a model from its configuration file does `),Lme=n(moe,"STRONG",{});var opt=s(Lme);cxo=r(opt,"not"),opt.forEach(t),fxo=r(moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=n(moe,"A",{href:!0});var rpt=s(SG);mxo=r(rpt,"from_pretrained()"),rpt.forEach(t),gxo=r(moe," to load the model weights."),moe.forEach(t),hxo=i($w),T(m2.$$.fragment,$w),$w.forEach(t),pxo=i(Zs),Ze=n(Zs,"DIV",{class:!0});var la=s(Ze);T(gL.$$.fragment,la),uxo=i(la),yme=n(la,"P",{});var tpt=s(yme);_xo=r(tpt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),tpt.forEach(t),bxo=i(la),Ba=n(la,"P",{});var kw=s(Ba);vxo=r(kw,"The model class to instantiate is selected based on the "),xme=n(kw,"CODE",{});var apt=s(xme);Fxo=r(apt,"model_type"),apt.forEach(t),Txo=r(kw,` property of the config object (either
passed as an argument or loaded from `),$me=n(kw,"CODE",{});var npt=s($me);Mxo=r(npt,"pretrained_model_name_or_path"),npt.forEach(t),Exo=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=n(kw,"CODE",{});var spt=s(kme);Cxo=r(spt,"pretrained_model_name_or_path"),spt.forEach(t),wxo=r(kw,":"),kw.forEach(t),Axo=i(la),Q=n(la,"UL",{});var U=s(Q);g2=n(U,"LI",{});var t$e=s(g2);Sme=n(t$e,"STRONG",{});var lpt=s(Sme);Lxo=r(lpt,"albert"),lpt.forEach(t),yxo=r(t$e," \u2014 "),RG=n(t$e,"A",{href:!0});var ipt=s(RG);xxo=r(ipt,"AlbertForMaskedLM"),ipt.forEach(t),$xo=r(t$e," (ALBERT model)"),t$e.forEach(t),kxo=i(U),h2=n(U,"LI",{});var a$e=s(h2);Rme=n(a$e,"STRONG",{});var dpt=s(Rme);Sxo=r(dpt,"bart"),dpt.forEach(t),Rxo=r(a$e," \u2014 "),PG=n(a$e,"A",{href:!0});var cpt=s(PG);Pxo=r(cpt,"BartForConditionalGeneration"),cpt.forEach(t),Bxo=r(a$e," (BART model)"),a$e.forEach(t),Ixo=i(U),p2=n(U,"LI",{});var n$e=s(p2);Pme=n(n$e,"STRONG",{});var fpt=s(Pme);Nxo=r(fpt,"bert"),fpt.forEach(t),qxo=r(n$e," \u2014 "),BG=n(n$e,"A",{href:!0});var mpt=s(BG);jxo=r(mpt,"BertForMaskedLM"),mpt.forEach(t),Dxo=r(n$e," (BERT model)"),n$e.forEach(t),Gxo=i(U),u2=n(U,"LI",{});var s$e=s(u2);Bme=n(s$e,"STRONG",{});var gpt=s(Bme);Oxo=r(gpt,"big_bird"),gpt.forEach(t),Vxo=r(s$e," \u2014 "),IG=n(s$e,"A",{href:!0});var hpt=s(IG);Xxo=r(hpt,"BigBirdForMaskedLM"),hpt.forEach(t),zxo=r(s$e," (BigBird model)"),s$e.forEach(t),Wxo=i(U),_2=n(U,"LI",{});var l$e=s(_2);Ime=n(l$e,"STRONG",{});var ppt=s(Ime);Qxo=r(ppt,"camembert"),ppt.forEach(t),Hxo=r(l$e," \u2014 "),NG=n(l$e,"A",{href:!0});var upt=s(NG);Uxo=r(upt,"CamembertForMaskedLM"),upt.forEach(t),Jxo=r(l$e," (CamemBERT model)"),l$e.forEach(t),Yxo=i(U),b2=n(U,"LI",{});var i$e=s(b2);Nme=n(i$e,"STRONG",{});var _pt=s(Nme);Kxo=r(_pt,"convbert"),_pt.forEach(t),Zxo=r(i$e," \u2014 "),qG=n(i$e,"A",{href:!0});var bpt=s(qG);e$o=r(bpt,"ConvBertForMaskedLM"),bpt.forEach(t),o$o=r(i$e," (ConvBERT model)"),i$e.forEach(t),r$o=i(U),v2=n(U,"LI",{});var d$e=s(v2);qme=n(d$e,"STRONG",{});var vpt=s(qme);t$o=r(vpt,"data2vec-text"),vpt.forEach(t),a$o=r(d$e," \u2014 "),jG=n(d$e,"A",{href:!0});var Fpt=s(jG);n$o=r(Fpt,"Data2VecTextForMaskedLM"),Fpt.forEach(t),s$o=r(d$e," (Data2VecText model)"),d$e.forEach(t),l$o=i(U),F2=n(U,"LI",{});var c$e=s(F2);jme=n(c$e,"STRONG",{});var Tpt=s(jme);i$o=r(Tpt,"deberta"),Tpt.forEach(t),d$o=r(c$e," \u2014 "),DG=n(c$e,"A",{href:!0});var Mpt=s(DG);c$o=r(Mpt,"DebertaForMaskedLM"),Mpt.forEach(t),f$o=r(c$e," (DeBERTa model)"),c$e.forEach(t),m$o=i(U),T2=n(U,"LI",{});var f$e=s(T2);Dme=n(f$e,"STRONG",{});var Ept=s(Dme);g$o=r(Ept,"deberta-v2"),Ept.forEach(t),h$o=r(f$e," \u2014 "),GG=n(f$e,"A",{href:!0});var Cpt=s(GG);p$o=r(Cpt,"DebertaV2ForMaskedLM"),Cpt.forEach(t),u$o=r(f$e," (DeBERTa-v2 model)"),f$e.forEach(t),_$o=i(U),M2=n(U,"LI",{});var m$e=s(M2);Gme=n(m$e,"STRONG",{});var wpt=s(Gme);b$o=r(wpt,"distilbert"),wpt.forEach(t),v$o=r(m$e," \u2014 "),OG=n(m$e,"A",{href:!0});var Apt=s(OG);F$o=r(Apt,"DistilBertForMaskedLM"),Apt.forEach(t),T$o=r(m$e," (DistilBERT model)"),m$e.forEach(t),M$o=i(U),E2=n(U,"LI",{});var g$e=s(E2);Ome=n(g$e,"STRONG",{});var Lpt=s(Ome);E$o=r(Lpt,"electra"),Lpt.forEach(t),C$o=r(g$e," \u2014 "),VG=n(g$e,"A",{href:!0});var ypt=s(VG);w$o=r(ypt,"ElectraForMaskedLM"),ypt.forEach(t),A$o=r(g$e," (ELECTRA model)"),g$e.forEach(t),L$o=i(U),C2=n(U,"LI",{});var h$e=s(C2);Vme=n(h$e,"STRONG",{});var xpt=s(Vme);y$o=r(xpt,"flaubert"),xpt.forEach(t),x$o=r(h$e," \u2014 "),XG=n(h$e,"A",{href:!0});var $pt=s(XG);$$o=r($pt,"FlaubertWithLMHeadModel"),$pt.forEach(t),k$o=r(h$e," (FlauBERT model)"),h$e.forEach(t),S$o=i(U),w2=n(U,"LI",{});var p$e=s(w2);Xme=n(p$e,"STRONG",{});var kpt=s(Xme);R$o=r(kpt,"fnet"),kpt.forEach(t),P$o=r(p$e," \u2014 "),zG=n(p$e,"A",{href:!0});var Spt=s(zG);B$o=r(Spt,"FNetForMaskedLM"),Spt.forEach(t),I$o=r(p$e," (FNet model)"),p$e.forEach(t),N$o=i(U),A2=n(U,"LI",{});var u$e=s(A2);zme=n(u$e,"STRONG",{});var Rpt=s(zme);q$o=r(Rpt,"funnel"),Rpt.forEach(t),j$o=r(u$e," \u2014 "),WG=n(u$e,"A",{href:!0});var Ppt=s(WG);D$o=r(Ppt,"FunnelForMaskedLM"),Ppt.forEach(t),G$o=r(u$e," (Funnel Transformer model)"),u$e.forEach(t),O$o=i(U),L2=n(U,"LI",{});var _$e=s(L2);Wme=n(_$e,"STRONG",{});var Bpt=s(Wme);V$o=r(Bpt,"ibert"),Bpt.forEach(t),X$o=r(_$e," \u2014 "),QG=n(_$e,"A",{href:!0});var Ipt=s(QG);z$o=r(Ipt,"IBertForMaskedLM"),Ipt.forEach(t),W$o=r(_$e," (I-BERT model)"),_$e.forEach(t),Q$o=i(U),y2=n(U,"LI",{});var b$e=s(y2);Qme=n(b$e,"STRONG",{});var Npt=s(Qme);H$o=r(Npt,"layoutlm"),Npt.forEach(t),U$o=r(b$e," \u2014 "),HG=n(b$e,"A",{href:!0});var qpt=s(HG);J$o=r(qpt,"LayoutLMForMaskedLM"),qpt.forEach(t),Y$o=r(b$e," (LayoutLM model)"),b$e.forEach(t),K$o=i(U),x2=n(U,"LI",{});var v$e=s(x2);Hme=n(v$e,"STRONG",{});var jpt=s(Hme);Z$o=r(jpt,"longformer"),jpt.forEach(t),eko=r(v$e," \u2014 "),UG=n(v$e,"A",{href:!0});var Dpt=s(UG);oko=r(Dpt,"LongformerForMaskedLM"),Dpt.forEach(t),rko=r(v$e," (Longformer model)"),v$e.forEach(t),tko=i(U),$2=n(U,"LI",{});var F$e=s($2);Ume=n(F$e,"STRONG",{});var Gpt=s(Ume);ako=r(Gpt,"luke"),Gpt.forEach(t),nko=r(F$e," \u2014 "),JG=n(F$e,"A",{href:!0});var Opt=s(JG);sko=r(Opt,"LukeForMaskedLM"),Opt.forEach(t),lko=r(F$e," (LUKE model)"),F$e.forEach(t),iko=i(U),k2=n(U,"LI",{});var T$e=s(k2);Jme=n(T$e,"STRONG",{});var Vpt=s(Jme);dko=r(Vpt,"mbart"),Vpt.forEach(t),cko=r(T$e," \u2014 "),YG=n(T$e,"A",{href:!0});var Xpt=s(YG);fko=r(Xpt,"MBartForConditionalGeneration"),Xpt.forEach(t),mko=r(T$e," (mBART model)"),T$e.forEach(t),gko=i(U),S2=n(U,"LI",{});var M$e=s(S2);Yme=n(M$e,"STRONG",{});var zpt=s(Yme);hko=r(zpt,"megatron-bert"),zpt.forEach(t),pko=r(M$e," \u2014 "),KG=n(M$e,"A",{href:!0});var Wpt=s(KG);uko=r(Wpt,"MegatronBertForMaskedLM"),Wpt.forEach(t),_ko=r(M$e," (Megatron-BERT model)"),M$e.forEach(t),bko=i(U),R2=n(U,"LI",{});var E$e=s(R2);Kme=n(E$e,"STRONG",{});var Qpt=s(Kme);vko=r(Qpt,"mobilebert"),Qpt.forEach(t),Fko=r(E$e," \u2014 "),ZG=n(E$e,"A",{href:!0});var Hpt=s(ZG);Tko=r(Hpt,"MobileBertForMaskedLM"),Hpt.forEach(t),Mko=r(E$e," (MobileBERT model)"),E$e.forEach(t),Eko=i(U),P2=n(U,"LI",{});var C$e=s(P2);Zme=n(C$e,"STRONG",{});var Upt=s(Zme);Cko=r(Upt,"mpnet"),Upt.forEach(t),wko=r(C$e," \u2014 "),eO=n(C$e,"A",{href:!0});var Jpt=s(eO);Ako=r(Jpt,"MPNetForMaskedLM"),Jpt.forEach(t),Lko=r(C$e," (MPNet model)"),C$e.forEach(t),yko=i(U),B2=n(U,"LI",{});var w$e=s(B2);ege=n(w$e,"STRONG",{});var Ypt=s(ege);xko=r(Ypt,"nystromformer"),Ypt.forEach(t),$ko=r(w$e," \u2014 "),oO=n(w$e,"A",{href:!0});var Kpt=s(oO);kko=r(Kpt,"NystromformerForMaskedLM"),Kpt.forEach(t),Sko=r(w$e," (Nystr\xF6mformer model)"),w$e.forEach(t),Rko=i(U),I2=n(U,"LI",{});var A$e=s(I2);oge=n(A$e,"STRONG",{});var Zpt=s(oge);Pko=r(Zpt,"perceiver"),Zpt.forEach(t),Bko=r(A$e," \u2014 "),rO=n(A$e,"A",{href:!0});var eut=s(rO);Iko=r(eut,"PerceiverForMaskedLM"),eut.forEach(t),Nko=r(A$e," (Perceiver model)"),A$e.forEach(t),qko=i(U),N2=n(U,"LI",{});var L$e=s(N2);rge=n(L$e,"STRONG",{});var out=s(rge);jko=r(out,"qdqbert"),out.forEach(t),Dko=r(L$e," \u2014 "),tO=n(L$e,"A",{href:!0});var rut=s(tO);Gko=r(rut,"QDQBertForMaskedLM"),rut.forEach(t),Oko=r(L$e," (QDQBert model)"),L$e.forEach(t),Vko=i(U),q2=n(U,"LI",{});var y$e=s(q2);tge=n(y$e,"STRONG",{});var tut=s(tge);Xko=r(tut,"reformer"),tut.forEach(t),zko=r(y$e," \u2014 "),aO=n(y$e,"A",{href:!0});var aut=s(aO);Wko=r(aut,"ReformerForMaskedLM"),aut.forEach(t),Qko=r(y$e," (Reformer model)"),y$e.forEach(t),Hko=i(U),j2=n(U,"LI",{});var x$e=s(j2);age=n(x$e,"STRONG",{});var nut=s(age);Uko=r(nut,"rembert"),nut.forEach(t),Jko=r(x$e," \u2014 "),nO=n(x$e,"A",{href:!0});var sut=s(nO);Yko=r(sut,"RemBertForMaskedLM"),sut.forEach(t),Kko=r(x$e," (RemBERT model)"),x$e.forEach(t),Zko=i(U),D2=n(U,"LI",{});var $$e=s(D2);nge=n($$e,"STRONG",{});var lut=s(nge);eSo=r(lut,"roberta"),lut.forEach(t),oSo=r($$e," \u2014 "),sO=n($$e,"A",{href:!0});var iut=s(sO);rSo=r(iut,"RobertaForMaskedLM"),iut.forEach(t),tSo=r($$e," (RoBERTa model)"),$$e.forEach(t),aSo=i(U),G2=n(U,"LI",{});var k$e=s(G2);sge=n(k$e,"STRONG",{});var dut=s(sge);nSo=r(dut,"roformer"),dut.forEach(t),sSo=r(k$e," \u2014 "),lO=n(k$e,"A",{href:!0});var cut=s(lO);lSo=r(cut,"RoFormerForMaskedLM"),cut.forEach(t),iSo=r(k$e," (RoFormer model)"),k$e.forEach(t),dSo=i(U),O2=n(U,"LI",{});var S$e=s(O2);lge=n(S$e,"STRONG",{});var fut=s(lge);cSo=r(fut,"squeezebert"),fut.forEach(t),fSo=r(S$e," \u2014 "),iO=n(S$e,"A",{href:!0});var mut=s(iO);mSo=r(mut,"SqueezeBertForMaskedLM"),mut.forEach(t),gSo=r(S$e," (SqueezeBERT model)"),S$e.forEach(t),hSo=i(U),V2=n(U,"LI",{});var R$e=s(V2);ige=n(R$e,"STRONG",{});var gut=s(ige);pSo=r(gut,"tapas"),gut.forEach(t),uSo=r(R$e," \u2014 "),dO=n(R$e,"A",{href:!0});var hut=s(dO);_So=r(hut,"TapasForMaskedLM"),hut.forEach(t),bSo=r(R$e," (TAPAS model)"),R$e.forEach(t),vSo=i(U),X2=n(U,"LI",{});var P$e=s(X2);dge=n(P$e,"STRONG",{});var put=s(dge);FSo=r(put,"wav2vec2"),put.forEach(t),TSo=r(P$e," \u2014 "),cge=n(P$e,"CODE",{});var uut=s(cge);MSo=r(uut,"Wav2Vec2ForMaskedLM"),uut.forEach(t),ESo=r(P$e," (Wav2Vec2 model)"),P$e.forEach(t),CSo=i(U),z2=n(U,"LI",{});var B$e=s(z2);fge=n(B$e,"STRONG",{});var _ut=s(fge);wSo=r(_ut,"xlm"),_ut.forEach(t),ASo=r(B$e," \u2014 "),cO=n(B$e,"A",{href:!0});var but=s(cO);LSo=r(but,"XLMWithLMHeadModel"),but.forEach(t),ySo=r(B$e," (XLM model)"),B$e.forEach(t),xSo=i(U),W2=n(U,"LI",{});var I$e=s(W2);mge=n(I$e,"STRONG",{});var vut=s(mge);$So=r(vut,"xlm-roberta"),vut.forEach(t),kSo=r(I$e," \u2014 "),fO=n(I$e,"A",{href:!0});var Fut=s(fO);SSo=r(Fut,"XLMRobertaForMaskedLM"),Fut.forEach(t),RSo=r(I$e," (XLM-RoBERTa model)"),I$e.forEach(t),PSo=i(U),Q2=n(U,"LI",{});var N$e=s(Q2);gge=n(N$e,"STRONG",{});var Tut=s(gge);BSo=r(Tut,"xlm-roberta-xl"),Tut.forEach(t),ISo=r(N$e," \u2014 "),mO=n(N$e,"A",{href:!0});var Mut=s(mO);NSo=r(Mut,"XLMRobertaXLForMaskedLM"),Mut.forEach(t),qSo=r(N$e," (XLM-RoBERTa-XL model)"),N$e.forEach(t),jSo=i(U),H2=n(U,"LI",{});var q$e=s(H2);hge=n(q$e,"STRONG",{});var Eut=s(hge);DSo=r(Eut,"yoso"),Eut.forEach(t),GSo=r(q$e," \u2014 "),gO=n(q$e,"A",{href:!0});var Cut=s(gO);OSo=r(Cut,"YosoForMaskedLM"),Cut.forEach(t),VSo=r(q$e," (YOSO model)"),q$e.forEach(t),U.forEach(t),XSo=i(la),U2=n(la,"P",{});var j$e=s(U2);zSo=r(j$e,"The model is set in evaluation mode by default using "),pge=n(j$e,"CODE",{});var wut=s(pge);WSo=r(wut,"model.eval()"),wut.forEach(t),QSo=r(j$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=n(j$e,"CODE",{});var Aut=s(uge);HSo=r(Aut,"model.train()"),Aut.forEach(t),j$e.forEach(t),USo=i(la),T(J2.$$.fragment,la),la.forEach(t),Zs.forEach(t),SGe=i(f),Qi=n(f,"H2",{class:!0});var qVe=s(Qi);Y2=n(qVe,"A",{id:!0,class:!0,href:!0});var Lut=s(Y2);_ge=n(Lut,"SPAN",{});var yut=s(_ge);T(hL.$$.fragment,yut),yut.forEach(t),Lut.forEach(t),JSo=i(qVe),bge=n(qVe,"SPAN",{});var xut=s(bge);YSo=r(xut,"AutoModelForSeq2SeqLM"),xut.forEach(t),qVe.forEach(t),RGe=i(f),Ro=n(f,"DIV",{class:!0});var el=s(Ro);T(pL.$$.fragment,el),KSo=i(el),Hi=n(el,"P",{});var goe=s(Hi);ZSo=r(goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hO=n(goe,"A",{href:!0});var $ut=s(hO);eRo=r($ut,"from_pretrained()"),$ut.forEach(t),oRo=r(goe," class method or the "),pO=n(goe,"A",{href:!0});var kut=s(pO);rRo=r(kut,"from_config()"),kut.forEach(t),tRo=r(goe,` class
method.`),goe.forEach(t),aRo=i(el),uL=n(el,"P",{});var jVe=s(uL);nRo=r(jVe,"This class cannot be instantiated directly using "),vge=n(jVe,"CODE",{});var Sut=s(vge);sRo=r(Sut,"__init__()"),Sut.forEach(t),lRo=r(jVe," (throws an error)."),jVe.forEach(t),iRo=i(el),dt=n(el,"DIV",{class:!0});var Sw=s(dt);T(_L.$$.fragment,Sw),dRo=i(Sw),Fge=n(Sw,"P",{});var Rut=s(Fge);cRo=r(Rut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Rut.forEach(t),fRo=i(Sw),Ui=n(Sw,"P",{});var hoe=s(Ui);mRo=r(hoe,`Note:
Loading a model from its configuration file does `),Tge=n(hoe,"STRONG",{});var Put=s(Tge);gRo=r(Put,"not"),Put.forEach(t),hRo=r(hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uO=n(hoe,"A",{href:!0});var But=s(uO);pRo=r(But,"from_pretrained()"),But.forEach(t),uRo=r(hoe," to load the model weights."),hoe.forEach(t),_Ro=i(Sw),T(K2.$$.fragment,Sw),Sw.forEach(t),bRo=i(el),eo=n(el,"DIV",{class:!0});var ia=s(eo);T(bL.$$.fragment,ia),vRo=i(ia),Mge=n(ia,"P",{});var Iut=s(Mge);FRo=r(Iut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Iut.forEach(t),TRo=i(ia),Ia=n(ia,"P",{});var Rw=s(Ia);MRo=r(Rw,"The model class to instantiate is selected based on the "),Ege=n(Rw,"CODE",{});var Nut=s(Ege);ERo=r(Nut,"model_type"),Nut.forEach(t),CRo=r(Rw,` property of the config object (either
passed as an argument or loaded from `),Cge=n(Rw,"CODE",{});var qut=s(Cge);wRo=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),ARo=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=n(Rw,"CODE",{});var jut=s(wge);LRo=r(jut,"pretrained_model_name_or_path"),jut.forEach(t),yRo=r(Rw,":"),Rw.forEach(t),xRo=i(ia),pe=n(ia,"UL",{});var be=s(pe);Z2=n(be,"LI",{});var D$e=s(Z2);Age=n(D$e,"STRONG",{});var Dut=s(Age);$Ro=r(Dut,"bart"),Dut.forEach(t),kRo=r(D$e," \u2014 "),_O=n(D$e,"A",{href:!0});var Gut=s(_O);SRo=r(Gut,"BartForConditionalGeneration"),Gut.forEach(t),RRo=r(D$e," (BART model)"),D$e.forEach(t),PRo=i(be),eb=n(be,"LI",{});var G$e=s(eb);Lge=n(G$e,"STRONG",{});var Out=s(Lge);BRo=r(Out,"bigbird_pegasus"),Out.forEach(t),IRo=r(G$e," \u2014 "),bO=n(G$e,"A",{href:!0});var Vut=s(bO);NRo=r(Vut,"BigBirdPegasusForConditionalGeneration"),Vut.forEach(t),qRo=r(G$e," (BigBird-Pegasus model)"),G$e.forEach(t),jRo=i(be),ob=n(be,"LI",{});var O$e=s(ob);yge=n(O$e,"STRONG",{});var Xut=s(yge);DRo=r(Xut,"blenderbot"),Xut.forEach(t),GRo=r(O$e," \u2014 "),vO=n(O$e,"A",{href:!0});var zut=s(vO);ORo=r(zut,"BlenderbotForConditionalGeneration"),zut.forEach(t),VRo=r(O$e," (Blenderbot model)"),O$e.forEach(t),XRo=i(be),rb=n(be,"LI",{});var V$e=s(rb);xge=n(V$e,"STRONG",{});var Wut=s(xge);zRo=r(Wut,"blenderbot-small"),Wut.forEach(t),WRo=r(V$e," \u2014 "),FO=n(V$e,"A",{href:!0});var Qut=s(FO);QRo=r(Qut,"BlenderbotSmallForConditionalGeneration"),Qut.forEach(t),HRo=r(V$e," (BlenderbotSmall model)"),V$e.forEach(t),URo=i(be),tb=n(be,"LI",{});var X$e=s(tb);$ge=n(X$e,"STRONG",{});var Hut=s($ge);JRo=r(Hut,"encoder-decoder"),Hut.forEach(t),YRo=r(X$e," \u2014 "),TO=n(X$e,"A",{href:!0});var Uut=s(TO);KRo=r(Uut,"EncoderDecoderModel"),Uut.forEach(t),ZRo=r(X$e," (Encoder decoder model)"),X$e.forEach(t),ePo=i(be),ab=n(be,"LI",{});var z$e=s(ab);kge=n(z$e,"STRONG",{});var Jut=s(kge);oPo=r(Jut,"fsmt"),Jut.forEach(t),rPo=r(z$e," \u2014 "),MO=n(z$e,"A",{href:!0});var Yut=s(MO);tPo=r(Yut,"FSMTForConditionalGeneration"),Yut.forEach(t),aPo=r(z$e," (FairSeq Machine-Translation model)"),z$e.forEach(t),nPo=i(be),nb=n(be,"LI",{});var W$e=s(nb);Sge=n(W$e,"STRONG",{});var Kut=s(Sge);sPo=r(Kut,"led"),Kut.forEach(t),lPo=r(W$e," \u2014 "),EO=n(W$e,"A",{href:!0});var Zut=s(EO);iPo=r(Zut,"LEDForConditionalGeneration"),Zut.forEach(t),dPo=r(W$e," (LED model)"),W$e.forEach(t),cPo=i(be),sb=n(be,"LI",{});var Q$e=s(sb);Rge=n(Q$e,"STRONG",{});var e_t=s(Rge);fPo=r(e_t,"longt5"),e_t.forEach(t),mPo=r(Q$e," \u2014 "),CO=n(Q$e,"A",{href:!0});var o_t=s(CO);gPo=r(o_t,"LongT5ForConditionalGeneration"),o_t.forEach(t),hPo=r(Q$e," (LongT5 model)"),Q$e.forEach(t),pPo=i(be),lb=n(be,"LI",{});var H$e=s(lb);Pge=n(H$e,"STRONG",{});var r_t=s(Pge);uPo=r(r_t,"m2m_100"),r_t.forEach(t),_Po=r(H$e," \u2014 "),wO=n(H$e,"A",{href:!0});var t_t=s(wO);bPo=r(t_t,"M2M100ForConditionalGeneration"),t_t.forEach(t),vPo=r(H$e," (M2M100 model)"),H$e.forEach(t),FPo=i(be),ib=n(be,"LI",{});var U$e=s(ib);Bge=n(U$e,"STRONG",{});var a_t=s(Bge);TPo=r(a_t,"marian"),a_t.forEach(t),MPo=r(U$e," \u2014 "),AO=n(U$e,"A",{href:!0});var n_t=s(AO);EPo=r(n_t,"MarianMTModel"),n_t.forEach(t),CPo=r(U$e," (Marian model)"),U$e.forEach(t),wPo=i(be),db=n(be,"LI",{});var J$e=s(db);Ige=n(J$e,"STRONG",{});var s_t=s(Ige);APo=r(s_t,"mbart"),s_t.forEach(t),LPo=r(J$e," \u2014 "),LO=n(J$e,"A",{href:!0});var l_t=s(LO);yPo=r(l_t,"MBartForConditionalGeneration"),l_t.forEach(t),xPo=r(J$e," (mBART model)"),J$e.forEach(t),$Po=i(be),cb=n(be,"LI",{});var Y$e=s(cb);Nge=n(Y$e,"STRONG",{});var i_t=s(Nge);kPo=r(i_t,"mt5"),i_t.forEach(t),SPo=r(Y$e," \u2014 "),yO=n(Y$e,"A",{href:!0});var d_t=s(yO);RPo=r(d_t,"MT5ForConditionalGeneration"),d_t.forEach(t),PPo=r(Y$e," (MT5 model)"),Y$e.forEach(t),BPo=i(be),fb=n(be,"LI",{});var K$e=s(fb);qge=n(K$e,"STRONG",{});var c_t=s(qge);IPo=r(c_t,"pegasus"),c_t.forEach(t),NPo=r(K$e," \u2014 "),xO=n(K$e,"A",{href:!0});var f_t=s(xO);qPo=r(f_t,"PegasusForConditionalGeneration"),f_t.forEach(t),jPo=r(K$e," (Pegasus model)"),K$e.forEach(t),DPo=i(be),mb=n(be,"LI",{});var Z$e=s(mb);jge=n(Z$e,"STRONG",{});var m_t=s(jge);GPo=r(m_t,"plbart"),m_t.forEach(t),OPo=r(Z$e," \u2014 "),$O=n(Z$e,"A",{href:!0});var g_t=s($O);VPo=r(g_t,"PLBartForConditionalGeneration"),g_t.forEach(t),XPo=r(Z$e," (PLBart model)"),Z$e.forEach(t),zPo=i(be),gb=n(be,"LI",{});var eke=s(gb);Dge=n(eke,"STRONG",{});var h_t=s(Dge);WPo=r(h_t,"prophetnet"),h_t.forEach(t),QPo=r(eke," \u2014 "),kO=n(eke,"A",{href:!0});var p_t=s(kO);HPo=r(p_t,"ProphetNetForConditionalGeneration"),p_t.forEach(t),UPo=r(eke," (ProphetNet model)"),eke.forEach(t),JPo=i(be),hb=n(be,"LI",{});var oke=s(hb);Gge=n(oke,"STRONG",{});var u_t=s(Gge);YPo=r(u_t,"t5"),u_t.forEach(t),KPo=r(oke," \u2014 "),SO=n(oke,"A",{href:!0});var __t=s(SO);ZPo=r(__t,"T5ForConditionalGeneration"),__t.forEach(t),eBo=r(oke," (T5 model)"),oke.forEach(t),oBo=i(be),pb=n(be,"LI",{});var rke=s(pb);Oge=n(rke,"STRONG",{});var b_t=s(Oge);rBo=r(b_t,"xlm-prophetnet"),b_t.forEach(t),tBo=r(rke," \u2014 "),RO=n(rke,"A",{href:!0});var v_t=s(RO);aBo=r(v_t,"XLMProphetNetForConditionalGeneration"),v_t.forEach(t),nBo=r(rke," (XLM-ProphetNet model)"),rke.forEach(t),be.forEach(t),sBo=i(ia),ub=n(ia,"P",{});var tke=s(ub);lBo=r(tke,"The model is set in evaluation mode by default using "),Vge=n(tke,"CODE",{});var F_t=s(Vge);iBo=r(F_t,"model.eval()"),F_t.forEach(t),dBo=r(tke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xge=n(tke,"CODE",{});var T_t=s(Xge);cBo=r(T_t,"model.train()"),T_t.forEach(t),tke.forEach(t),fBo=i(ia),T(_b.$$.fragment,ia),ia.forEach(t),el.forEach(t),PGe=i(f),Ji=n(f,"H2",{class:!0});var DVe=s(Ji);bb=n(DVe,"A",{id:!0,class:!0,href:!0});var M_t=s(bb);zge=n(M_t,"SPAN",{});var E_t=s(zge);T(vL.$$.fragment,E_t),E_t.forEach(t),M_t.forEach(t),mBo=i(DVe),Wge=n(DVe,"SPAN",{});var C_t=s(Wge);gBo=r(C_t,"AutoModelForSequenceClassification"),C_t.forEach(t),DVe.forEach(t),BGe=i(f),Po=n(f,"DIV",{class:!0});var ol=s(Po);T(FL.$$.fragment,ol),hBo=i(ol),Yi=n(ol,"P",{});var poe=s(Yi);pBo=r(poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),PO=n(poe,"A",{href:!0});var w_t=s(PO);uBo=r(w_t,"from_pretrained()"),w_t.forEach(t),_Bo=r(poe," class method or the "),BO=n(poe,"A",{href:!0});var A_t=s(BO);bBo=r(A_t,"from_config()"),A_t.forEach(t),vBo=r(poe,` class
method.`),poe.forEach(t),FBo=i(ol),TL=n(ol,"P",{});var GVe=s(TL);TBo=r(GVe,"This class cannot be instantiated directly using "),Qge=n(GVe,"CODE",{});var L_t=s(Qge);MBo=r(L_t,"__init__()"),L_t.forEach(t),EBo=r(GVe," (throws an error)."),GVe.forEach(t),CBo=i(ol),ct=n(ol,"DIV",{class:!0});var Pw=s(ct);T(ML.$$.fragment,Pw),wBo=i(Pw),Hge=n(Pw,"P",{});var y_t=s(Hge);ABo=r(y_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),y_t.forEach(t),LBo=i(Pw),Ki=n(Pw,"P",{});var uoe=s(Ki);yBo=r(uoe,`Note:
Loading a model from its configuration file does `),Uge=n(uoe,"STRONG",{});var x_t=s(Uge);xBo=r(x_t,"not"),x_t.forEach(t),$Bo=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=n(uoe,"A",{href:!0});var $_t=s(IO);kBo=r($_t,"from_pretrained()"),$_t.forEach(t),SBo=r(uoe," to load the model weights."),uoe.forEach(t),RBo=i(Pw),T(vb.$$.fragment,Pw),Pw.forEach(t),PBo=i(ol),oo=n(ol,"DIV",{class:!0});var da=s(oo);T(EL.$$.fragment,da),BBo=i(da),Jge=n(da,"P",{});var k_t=s(Jge);IBo=r(k_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),k_t.forEach(t),NBo=i(da),Na=n(da,"P",{});var Bw=s(Na);qBo=r(Bw,"The model class to instantiate is selected based on the "),Yge=n(Bw,"CODE",{});var S_t=s(Yge);jBo=r(S_t,"model_type"),S_t.forEach(t),DBo=r(Bw,` property of the config object (either
passed as an argument or loaded from `),Kge=n(Bw,"CODE",{});var R_t=s(Kge);GBo=r(R_t,"pretrained_model_name_or_path"),R_t.forEach(t),OBo=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=n(Bw,"CODE",{});var P_t=s(Zge);VBo=r(P_t,"pretrained_model_name_or_path"),P_t.forEach(t),XBo=r(Bw,":"),Bw.forEach(t),zBo=i(da),N=n(da,"UL",{});var j=s(N);Fb=n(j,"LI",{});var ake=s(Fb);ehe=n(ake,"STRONG",{});var B_t=s(ehe);WBo=r(B_t,"albert"),B_t.forEach(t),QBo=r(ake," \u2014 "),NO=n(ake,"A",{href:!0});var I_t=s(NO);HBo=r(I_t,"AlbertForSequenceClassification"),I_t.forEach(t),UBo=r(ake," (ALBERT model)"),ake.forEach(t),JBo=i(j),Tb=n(j,"LI",{});var nke=s(Tb);ohe=n(nke,"STRONG",{});var N_t=s(ohe);YBo=r(N_t,"bart"),N_t.forEach(t),KBo=r(nke," \u2014 "),qO=n(nke,"A",{href:!0});var q_t=s(qO);ZBo=r(q_t,"BartForSequenceClassification"),q_t.forEach(t),eIo=r(nke," (BART model)"),nke.forEach(t),oIo=i(j),Mb=n(j,"LI",{});var ske=s(Mb);rhe=n(ske,"STRONG",{});var j_t=s(rhe);rIo=r(j_t,"bert"),j_t.forEach(t),tIo=r(ske," \u2014 "),jO=n(ske,"A",{href:!0});var D_t=s(jO);aIo=r(D_t,"BertForSequenceClassification"),D_t.forEach(t),nIo=r(ske," (BERT model)"),ske.forEach(t),sIo=i(j),Eb=n(j,"LI",{});var lke=s(Eb);the=n(lke,"STRONG",{});var G_t=s(the);lIo=r(G_t,"big_bird"),G_t.forEach(t),iIo=r(lke," \u2014 "),DO=n(lke,"A",{href:!0});var O_t=s(DO);dIo=r(O_t,"BigBirdForSequenceClassification"),O_t.forEach(t),cIo=r(lke," (BigBird model)"),lke.forEach(t),fIo=i(j),Cb=n(j,"LI",{});var ike=s(Cb);ahe=n(ike,"STRONG",{});var V_t=s(ahe);mIo=r(V_t,"bigbird_pegasus"),V_t.forEach(t),gIo=r(ike," \u2014 "),GO=n(ike,"A",{href:!0});var X_t=s(GO);hIo=r(X_t,"BigBirdPegasusForSequenceClassification"),X_t.forEach(t),pIo=r(ike," (BigBird-Pegasus model)"),ike.forEach(t),uIo=i(j),wb=n(j,"LI",{});var dke=s(wb);nhe=n(dke,"STRONG",{});var z_t=s(nhe);_Io=r(z_t,"bloom"),z_t.forEach(t),bIo=r(dke," \u2014 "),OO=n(dke,"A",{href:!0});var W_t=s(OO);vIo=r(W_t,"BloomForSequenceClassification"),W_t.forEach(t),FIo=r(dke," (BLOOM model)"),dke.forEach(t),TIo=i(j),Ab=n(j,"LI",{});var cke=s(Ab);she=n(cke,"STRONG",{});var Q_t=s(she);MIo=r(Q_t,"camembert"),Q_t.forEach(t),EIo=r(cke," \u2014 "),VO=n(cke,"A",{href:!0});var H_t=s(VO);CIo=r(H_t,"CamembertForSequenceClassification"),H_t.forEach(t),wIo=r(cke," (CamemBERT model)"),cke.forEach(t),AIo=i(j),Lb=n(j,"LI",{});var fke=s(Lb);lhe=n(fke,"STRONG",{});var U_t=s(lhe);LIo=r(U_t,"canine"),U_t.forEach(t),yIo=r(fke," \u2014 "),XO=n(fke,"A",{href:!0});var J_t=s(XO);xIo=r(J_t,"CanineForSequenceClassification"),J_t.forEach(t),$Io=r(fke," (CANINE model)"),fke.forEach(t),kIo=i(j),yb=n(j,"LI",{});var mke=s(yb);ihe=n(mke,"STRONG",{});var Y_t=s(ihe);SIo=r(Y_t,"convbert"),Y_t.forEach(t),RIo=r(mke," \u2014 "),zO=n(mke,"A",{href:!0});var K_t=s(zO);PIo=r(K_t,"ConvBertForSequenceClassification"),K_t.forEach(t),BIo=r(mke," (ConvBERT model)"),mke.forEach(t),IIo=i(j),xb=n(j,"LI",{});var gke=s(xb);dhe=n(gke,"STRONG",{});var Z_t=s(dhe);NIo=r(Z_t,"ctrl"),Z_t.forEach(t),qIo=r(gke," \u2014 "),WO=n(gke,"A",{href:!0});var e1t=s(WO);jIo=r(e1t,"CTRLForSequenceClassification"),e1t.forEach(t),DIo=r(gke," (CTRL model)"),gke.forEach(t),GIo=i(j),$b=n(j,"LI",{});var hke=s($b);che=n(hke,"STRONG",{});var o1t=s(che);OIo=r(o1t,"data2vec-text"),o1t.forEach(t),VIo=r(hke," \u2014 "),QO=n(hke,"A",{href:!0});var r1t=s(QO);XIo=r(r1t,"Data2VecTextForSequenceClassification"),r1t.forEach(t),zIo=r(hke," (Data2VecText model)"),hke.forEach(t),WIo=i(j),kb=n(j,"LI",{});var pke=s(kb);fhe=n(pke,"STRONG",{});var t1t=s(fhe);QIo=r(t1t,"deberta"),t1t.forEach(t),HIo=r(pke," \u2014 "),HO=n(pke,"A",{href:!0});var a1t=s(HO);UIo=r(a1t,"DebertaForSequenceClassification"),a1t.forEach(t),JIo=r(pke," (DeBERTa model)"),pke.forEach(t),YIo=i(j),Sb=n(j,"LI",{});var uke=s(Sb);mhe=n(uke,"STRONG",{});var n1t=s(mhe);KIo=r(n1t,"deberta-v2"),n1t.forEach(t),ZIo=r(uke," \u2014 "),UO=n(uke,"A",{href:!0});var s1t=s(UO);eNo=r(s1t,"DebertaV2ForSequenceClassification"),s1t.forEach(t),oNo=r(uke," (DeBERTa-v2 model)"),uke.forEach(t),rNo=i(j),Rb=n(j,"LI",{});var _ke=s(Rb);ghe=n(_ke,"STRONG",{});var l1t=s(ghe);tNo=r(l1t,"distilbert"),l1t.forEach(t),aNo=r(_ke," \u2014 "),JO=n(_ke,"A",{href:!0});var i1t=s(JO);nNo=r(i1t,"DistilBertForSequenceClassification"),i1t.forEach(t),sNo=r(_ke," (DistilBERT model)"),_ke.forEach(t),lNo=i(j),Pb=n(j,"LI",{});var bke=s(Pb);hhe=n(bke,"STRONG",{});var d1t=s(hhe);iNo=r(d1t,"electra"),d1t.forEach(t),dNo=r(bke," \u2014 "),YO=n(bke,"A",{href:!0});var c1t=s(YO);cNo=r(c1t,"ElectraForSequenceClassification"),c1t.forEach(t),fNo=r(bke," (ELECTRA model)"),bke.forEach(t),mNo=i(j),Bb=n(j,"LI",{});var vke=s(Bb);phe=n(vke,"STRONG",{});var f1t=s(phe);gNo=r(f1t,"flaubert"),f1t.forEach(t),hNo=r(vke," \u2014 "),KO=n(vke,"A",{href:!0});var m1t=s(KO);pNo=r(m1t,"FlaubertForSequenceClassification"),m1t.forEach(t),uNo=r(vke," (FlauBERT model)"),vke.forEach(t),_No=i(j),Ib=n(j,"LI",{});var Fke=s(Ib);uhe=n(Fke,"STRONG",{});var g1t=s(uhe);bNo=r(g1t,"fnet"),g1t.forEach(t),vNo=r(Fke," \u2014 "),ZO=n(Fke,"A",{href:!0});var h1t=s(ZO);FNo=r(h1t,"FNetForSequenceClassification"),h1t.forEach(t),TNo=r(Fke," (FNet model)"),Fke.forEach(t),MNo=i(j),Nb=n(j,"LI",{});var Tke=s(Nb);_he=n(Tke,"STRONG",{});var p1t=s(_he);ENo=r(p1t,"funnel"),p1t.forEach(t),CNo=r(Tke," \u2014 "),eV=n(Tke,"A",{href:!0});var u1t=s(eV);wNo=r(u1t,"FunnelForSequenceClassification"),u1t.forEach(t),ANo=r(Tke," (Funnel Transformer model)"),Tke.forEach(t),LNo=i(j),qb=n(j,"LI",{});var Mke=s(qb);bhe=n(Mke,"STRONG",{});var _1t=s(bhe);yNo=r(_1t,"gpt2"),_1t.forEach(t),xNo=r(Mke," \u2014 "),oV=n(Mke,"A",{href:!0});var b1t=s(oV);$No=r(b1t,"GPT2ForSequenceClassification"),b1t.forEach(t),kNo=r(Mke," (OpenAI GPT-2 model)"),Mke.forEach(t),SNo=i(j),jb=n(j,"LI",{});var Eke=s(jb);vhe=n(Eke,"STRONG",{});var v1t=s(vhe);RNo=r(v1t,"gpt_neo"),v1t.forEach(t),PNo=r(Eke," \u2014 "),rV=n(Eke,"A",{href:!0});var F1t=s(rV);BNo=r(F1t,"GPTNeoForSequenceClassification"),F1t.forEach(t),INo=r(Eke," (GPT Neo model)"),Eke.forEach(t),NNo=i(j),Db=n(j,"LI",{});var Cke=s(Db);Fhe=n(Cke,"STRONG",{});var T1t=s(Fhe);qNo=r(T1t,"gptj"),T1t.forEach(t),jNo=r(Cke," \u2014 "),tV=n(Cke,"A",{href:!0});var M1t=s(tV);DNo=r(M1t,"GPTJForSequenceClassification"),M1t.forEach(t),GNo=r(Cke," (GPT-J model)"),Cke.forEach(t),ONo=i(j),Gb=n(j,"LI",{});var wke=s(Gb);The=n(wke,"STRONG",{});var E1t=s(The);VNo=r(E1t,"ibert"),E1t.forEach(t),XNo=r(wke," \u2014 "),aV=n(wke,"A",{href:!0});var C1t=s(aV);zNo=r(C1t,"IBertForSequenceClassification"),C1t.forEach(t),WNo=r(wke," (I-BERT model)"),wke.forEach(t),QNo=i(j),Ob=n(j,"LI",{});var Ake=s(Ob);Mhe=n(Ake,"STRONG",{});var w1t=s(Mhe);HNo=r(w1t,"layoutlm"),w1t.forEach(t),UNo=r(Ake," \u2014 "),nV=n(Ake,"A",{href:!0});var A1t=s(nV);JNo=r(A1t,"LayoutLMForSequenceClassification"),A1t.forEach(t),YNo=r(Ake," (LayoutLM model)"),Ake.forEach(t),KNo=i(j),Vb=n(j,"LI",{});var Lke=s(Vb);Ehe=n(Lke,"STRONG",{});var L1t=s(Ehe);ZNo=r(L1t,"layoutlmv2"),L1t.forEach(t),eqo=r(Lke," \u2014 "),sV=n(Lke,"A",{href:!0});var y1t=s(sV);oqo=r(y1t,"LayoutLMv2ForSequenceClassification"),y1t.forEach(t),rqo=r(Lke," (LayoutLMv2 model)"),Lke.forEach(t),tqo=i(j),Xb=n(j,"LI",{});var yke=s(Xb);Che=n(yke,"STRONG",{});var x1t=s(Che);aqo=r(x1t,"layoutlmv3"),x1t.forEach(t),nqo=r(yke," \u2014 "),lV=n(yke,"A",{href:!0});var $1t=s(lV);sqo=r($1t,"LayoutLMv3ForSequenceClassification"),$1t.forEach(t),lqo=r(yke," (LayoutLMv3 model)"),yke.forEach(t),iqo=i(j),zb=n(j,"LI",{});var xke=s(zb);whe=n(xke,"STRONG",{});var k1t=s(whe);dqo=r(k1t,"led"),k1t.forEach(t),cqo=r(xke," \u2014 "),iV=n(xke,"A",{href:!0});var S1t=s(iV);fqo=r(S1t,"LEDForSequenceClassification"),S1t.forEach(t),mqo=r(xke," (LED model)"),xke.forEach(t),gqo=i(j),Wb=n(j,"LI",{});var $ke=s(Wb);Ahe=n($ke,"STRONG",{});var R1t=s(Ahe);hqo=r(R1t,"longformer"),R1t.forEach(t),pqo=r($ke," \u2014 "),dV=n($ke,"A",{href:!0});var P1t=s(dV);uqo=r(P1t,"LongformerForSequenceClassification"),P1t.forEach(t),_qo=r($ke," (Longformer model)"),$ke.forEach(t),bqo=i(j),Qb=n(j,"LI",{});var kke=s(Qb);Lhe=n(kke,"STRONG",{});var B1t=s(Lhe);vqo=r(B1t,"mbart"),B1t.forEach(t),Fqo=r(kke," \u2014 "),cV=n(kke,"A",{href:!0});var I1t=s(cV);Tqo=r(I1t,"MBartForSequenceClassification"),I1t.forEach(t),Mqo=r(kke," (mBART model)"),kke.forEach(t),Eqo=i(j),Hb=n(j,"LI",{});var Ske=s(Hb);yhe=n(Ske,"STRONG",{});var N1t=s(yhe);Cqo=r(N1t,"megatron-bert"),N1t.forEach(t),wqo=r(Ske," \u2014 "),fV=n(Ske,"A",{href:!0});var q1t=s(fV);Aqo=r(q1t,"MegatronBertForSequenceClassification"),q1t.forEach(t),Lqo=r(Ske," (Megatron-BERT model)"),Ske.forEach(t),yqo=i(j),Ub=n(j,"LI",{});var Rke=s(Ub);xhe=n(Rke,"STRONG",{});var j1t=s(xhe);xqo=r(j1t,"mobilebert"),j1t.forEach(t),$qo=r(Rke," \u2014 "),mV=n(Rke,"A",{href:!0});var D1t=s(mV);kqo=r(D1t,"MobileBertForSequenceClassification"),D1t.forEach(t),Sqo=r(Rke," (MobileBERT model)"),Rke.forEach(t),Rqo=i(j),Jb=n(j,"LI",{});var Pke=s(Jb);$he=n(Pke,"STRONG",{});var G1t=s($he);Pqo=r(G1t,"mpnet"),G1t.forEach(t),Bqo=r(Pke," \u2014 "),gV=n(Pke,"A",{href:!0});var O1t=s(gV);Iqo=r(O1t,"MPNetForSequenceClassification"),O1t.forEach(t),Nqo=r(Pke," (MPNet model)"),Pke.forEach(t),qqo=i(j),Yb=n(j,"LI",{});var Bke=s(Yb);khe=n(Bke,"STRONG",{});var V1t=s(khe);jqo=r(V1t,"nystromformer"),V1t.forEach(t),Dqo=r(Bke," \u2014 "),hV=n(Bke,"A",{href:!0});var X1t=s(hV);Gqo=r(X1t,"NystromformerForSequenceClassification"),X1t.forEach(t),Oqo=r(Bke," (Nystr\xF6mformer model)"),Bke.forEach(t),Vqo=i(j),Kb=n(j,"LI",{});var Ike=s(Kb);She=n(Ike,"STRONG",{});var z1t=s(She);Xqo=r(z1t,"openai-gpt"),z1t.forEach(t),zqo=r(Ike," \u2014 "),pV=n(Ike,"A",{href:!0});var W1t=s(pV);Wqo=r(W1t,"OpenAIGPTForSequenceClassification"),W1t.forEach(t),Qqo=r(Ike," (OpenAI GPT model)"),Ike.forEach(t),Hqo=i(j),Zb=n(j,"LI",{});var Nke=s(Zb);Rhe=n(Nke,"STRONG",{});var Q1t=s(Rhe);Uqo=r(Q1t,"perceiver"),Q1t.forEach(t),Jqo=r(Nke," \u2014 "),uV=n(Nke,"A",{href:!0});var H1t=s(uV);Yqo=r(H1t,"PerceiverForSequenceClassification"),H1t.forEach(t),Kqo=r(Nke," (Perceiver model)"),Nke.forEach(t),Zqo=i(j),ev=n(j,"LI",{});var qke=s(ev);Phe=n(qke,"STRONG",{});var U1t=s(Phe);ejo=r(U1t,"plbart"),U1t.forEach(t),ojo=r(qke," \u2014 "),_V=n(qke,"A",{href:!0});var J1t=s(_V);rjo=r(J1t,"PLBartForSequenceClassification"),J1t.forEach(t),tjo=r(qke," (PLBart model)"),qke.forEach(t),ajo=i(j),ov=n(j,"LI",{});var jke=s(ov);Bhe=n(jke,"STRONG",{});var Y1t=s(Bhe);njo=r(Y1t,"qdqbert"),Y1t.forEach(t),sjo=r(jke," \u2014 "),bV=n(jke,"A",{href:!0});var K1t=s(bV);ljo=r(K1t,"QDQBertForSequenceClassification"),K1t.forEach(t),ijo=r(jke," (QDQBert model)"),jke.forEach(t),djo=i(j),rv=n(j,"LI",{});var Dke=s(rv);Ihe=n(Dke,"STRONG",{});var Z1t=s(Ihe);cjo=r(Z1t,"reformer"),Z1t.forEach(t),fjo=r(Dke," \u2014 "),vV=n(Dke,"A",{href:!0});var e2t=s(vV);mjo=r(e2t,"ReformerForSequenceClassification"),e2t.forEach(t),gjo=r(Dke," (Reformer model)"),Dke.forEach(t),hjo=i(j),tv=n(j,"LI",{});var Gke=s(tv);Nhe=n(Gke,"STRONG",{});var o2t=s(Nhe);pjo=r(o2t,"rembert"),o2t.forEach(t),ujo=r(Gke," \u2014 "),FV=n(Gke,"A",{href:!0});var r2t=s(FV);_jo=r(r2t,"RemBertForSequenceClassification"),r2t.forEach(t),bjo=r(Gke," (RemBERT model)"),Gke.forEach(t),vjo=i(j),av=n(j,"LI",{});var Oke=s(av);qhe=n(Oke,"STRONG",{});var t2t=s(qhe);Fjo=r(t2t,"roberta"),t2t.forEach(t),Tjo=r(Oke," \u2014 "),TV=n(Oke,"A",{href:!0});var a2t=s(TV);Mjo=r(a2t,"RobertaForSequenceClassification"),a2t.forEach(t),Ejo=r(Oke," (RoBERTa model)"),Oke.forEach(t),Cjo=i(j),nv=n(j,"LI",{});var Vke=s(nv);jhe=n(Vke,"STRONG",{});var n2t=s(jhe);wjo=r(n2t,"roformer"),n2t.forEach(t),Ajo=r(Vke," \u2014 "),MV=n(Vke,"A",{href:!0});var s2t=s(MV);Ljo=r(s2t,"RoFormerForSequenceClassification"),s2t.forEach(t),yjo=r(Vke," (RoFormer model)"),Vke.forEach(t),xjo=i(j),sv=n(j,"LI",{});var Xke=s(sv);Dhe=n(Xke,"STRONG",{});var l2t=s(Dhe);$jo=r(l2t,"squeezebert"),l2t.forEach(t),kjo=r(Xke," \u2014 "),EV=n(Xke,"A",{href:!0});var i2t=s(EV);Sjo=r(i2t,"SqueezeBertForSequenceClassification"),i2t.forEach(t),Rjo=r(Xke," (SqueezeBERT model)"),Xke.forEach(t),Pjo=i(j),lv=n(j,"LI",{});var zke=s(lv);Ghe=n(zke,"STRONG",{});var d2t=s(Ghe);Bjo=r(d2t,"tapas"),d2t.forEach(t),Ijo=r(zke," \u2014 "),CV=n(zke,"A",{href:!0});var c2t=s(CV);Njo=r(c2t,"TapasForSequenceClassification"),c2t.forEach(t),qjo=r(zke," (TAPAS model)"),zke.forEach(t),jjo=i(j),iv=n(j,"LI",{});var Wke=s(iv);Ohe=n(Wke,"STRONG",{});var f2t=s(Ohe);Djo=r(f2t,"transfo-xl"),f2t.forEach(t),Gjo=r(Wke," \u2014 "),wV=n(Wke,"A",{href:!0});var m2t=s(wV);Ojo=r(m2t,"TransfoXLForSequenceClassification"),m2t.forEach(t),Vjo=r(Wke," (Transformer-XL model)"),Wke.forEach(t),Xjo=i(j),dv=n(j,"LI",{});var Qke=s(dv);Vhe=n(Qke,"STRONG",{});var g2t=s(Vhe);zjo=r(g2t,"xlm"),g2t.forEach(t),Wjo=r(Qke," \u2014 "),AV=n(Qke,"A",{href:!0});var h2t=s(AV);Qjo=r(h2t,"XLMForSequenceClassification"),h2t.forEach(t),Hjo=r(Qke," (XLM model)"),Qke.forEach(t),Ujo=i(j),cv=n(j,"LI",{});var Hke=s(cv);Xhe=n(Hke,"STRONG",{});var p2t=s(Xhe);Jjo=r(p2t,"xlm-roberta"),p2t.forEach(t),Yjo=r(Hke," \u2014 "),LV=n(Hke,"A",{href:!0});var u2t=s(LV);Kjo=r(u2t,"XLMRobertaForSequenceClassification"),u2t.forEach(t),Zjo=r(Hke," (XLM-RoBERTa model)"),Hke.forEach(t),eDo=i(j),fv=n(j,"LI",{});var Uke=s(fv);zhe=n(Uke,"STRONG",{});var _2t=s(zhe);oDo=r(_2t,"xlm-roberta-xl"),_2t.forEach(t),rDo=r(Uke," \u2014 "),yV=n(Uke,"A",{href:!0});var b2t=s(yV);tDo=r(b2t,"XLMRobertaXLForSequenceClassification"),b2t.forEach(t),aDo=r(Uke," (XLM-RoBERTa-XL model)"),Uke.forEach(t),nDo=i(j),mv=n(j,"LI",{});var Jke=s(mv);Whe=n(Jke,"STRONG",{});var v2t=s(Whe);sDo=r(v2t,"xlnet"),v2t.forEach(t),lDo=r(Jke," \u2014 "),xV=n(Jke,"A",{href:!0});var F2t=s(xV);iDo=r(F2t,"XLNetForSequenceClassification"),F2t.forEach(t),dDo=r(Jke," (XLNet model)"),Jke.forEach(t),cDo=i(j),gv=n(j,"LI",{});var Yke=s(gv);Qhe=n(Yke,"STRONG",{});var T2t=s(Qhe);fDo=r(T2t,"yoso"),T2t.forEach(t),mDo=r(Yke," \u2014 "),$V=n(Yke,"A",{href:!0});var M2t=s($V);gDo=r(M2t,"YosoForSequenceClassification"),M2t.forEach(t),hDo=r(Yke," (YOSO model)"),Yke.forEach(t),j.forEach(t),pDo=i(da),hv=n(da,"P",{});var Kke=s(hv);uDo=r(Kke,"The model is set in evaluation mode by default using "),Hhe=n(Kke,"CODE",{});var E2t=s(Hhe);_Do=r(E2t,"model.eval()"),E2t.forEach(t),bDo=r(Kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uhe=n(Kke,"CODE",{});var C2t=s(Uhe);vDo=r(C2t,"model.train()"),C2t.forEach(t),Kke.forEach(t),FDo=i(da),T(pv.$$.fragment,da),da.forEach(t),ol.forEach(t),IGe=i(f),Zi=n(f,"H2",{class:!0});var OVe=s(Zi);uv=n(OVe,"A",{id:!0,class:!0,href:!0});var w2t=s(uv);Jhe=n(w2t,"SPAN",{});var A2t=s(Jhe);T(CL.$$.fragment,A2t),A2t.forEach(t),w2t.forEach(t),TDo=i(OVe),Yhe=n(OVe,"SPAN",{});var L2t=s(Yhe);MDo=r(L2t,"AutoModelForMultipleChoice"),L2t.forEach(t),OVe.forEach(t),NGe=i(f),Bo=n(f,"DIV",{class:!0});var rl=s(Bo);T(wL.$$.fragment,rl),EDo=i(rl),ed=n(rl,"P",{});var _oe=s(ed);CDo=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kV=n(_oe,"A",{href:!0});var y2t=s(kV);wDo=r(y2t,"from_pretrained()"),y2t.forEach(t),ADo=r(_oe," class method or the "),SV=n(_oe,"A",{href:!0});var x2t=s(SV);LDo=r(x2t,"from_config()"),x2t.forEach(t),yDo=r(_oe,` class
method.`),_oe.forEach(t),xDo=i(rl),AL=n(rl,"P",{});var VVe=s(AL);$Do=r(VVe,"This class cannot be instantiated directly using "),Khe=n(VVe,"CODE",{});var $2t=s(Khe);kDo=r($2t,"__init__()"),$2t.forEach(t),SDo=r(VVe," (throws an error)."),VVe.forEach(t),RDo=i(rl),ft=n(rl,"DIV",{class:!0});var Iw=s(ft);T(LL.$$.fragment,Iw),PDo=i(Iw),Zhe=n(Iw,"P",{});var k2t=s(Zhe);BDo=r(k2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),k2t.forEach(t),IDo=i(Iw),od=n(Iw,"P",{});var boe=s(od);NDo=r(boe,`Note:
Loading a model from its configuration file does `),epe=n(boe,"STRONG",{});var S2t=s(epe);qDo=r(S2t,"not"),S2t.forEach(t),jDo=r(boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(boe,"A",{href:!0});var R2t=s(RV);DDo=r(R2t,"from_pretrained()"),R2t.forEach(t),GDo=r(boe," to load the model weights."),boe.forEach(t),ODo=i(Iw),T(_v.$$.fragment,Iw),Iw.forEach(t),VDo=i(rl),ro=n(rl,"DIV",{class:!0});var ca=s(ro);T(yL.$$.fragment,ca),XDo=i(ca),ope=n(ca,"P",{});var P2t=s(ope);zDo=r(P2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),P2t.forEach(t),WDo=i(ca),qa=n(ca,"P",{});var Nw=s(qa);QDo=r(Nw,"The model class to instantiate is selected based on the "),rpe=n(Nw,"CODE",{});var B2t=s(rpe);HDo=r(B2t,"model_type"),B2t.forEach(t),UDo=r(Nw,` property of the config object (either
passed as an argument or loaded from `),tpe=n(Nw,"CODE",{});var I2t=s(tpe);JDo=r(I2t,"pretrained_model_name_or_path"),I2t.forEach(t),YDo=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=n(Nw,"CODE",{});var N2t=s(ape);KDo=r(N2t,"pretrained_model_name_or_path"),N2t.forEach(t),ZDo=r(Nw,":"),Nw.forEach(t),eGo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);bv=n(ee,"LI",{});var Zke=s(bv);npe=n(Zke,"STRONG",{});var q2t=s(npe);oGo=r(q2t,"albert"),q2t.forEach(t),rGo=r(Zke," \u2014 "),PV=n(Zke,"A",{href:!0});var j2t=s(PV);tGo=r(j2t,"AlbertForMultipleChoice"),j2t.forEach(t),aGo=r(Zke," (ALBERT model)"),Zke.forEach(t),nGo=i(ee),vv=n(ee,"LI",{});var eSe=s(vv);spe=n(eSe,"STRONG",{});var D2t=s(spe);sGo=r(D2t,"bert"),D2t.forEach(t),lGo=r(eSe," \u2014 "),BV=n(eSe,"A",{href:!0});var G2t=s(BV);iGo=r(G2t,"BertForMultipleChoice"),G2t.forEach(t),dGo=r(eSe," (BERT model)"),eSe.forEach(t),cGo=i(ee),Fv=n(ee,"LI",{});var oSe=s(Fv);lpe=n(oSe,"STRONG",{});var O2t=s(lpe);fGo=r(O2t,"big_bird"),O2t.forEach(t),mGo=r(oSe," \u2014 "),IV=n(oSe,"A",{href:!0});var V2t=s(IV);gGo=r(V2t,"BigBirdForMultipleChoice"),V2t.forEach(t),hGo=r(oSe," (BigBird model)"),oSe.forEach(t),pGo=i(ee),Tv=n(ee,"LI",{});var rSe=s(Tv);ipe=n(rSe,"STRONG",{});var X2t=s(ipe);uGo=r(X2t,"camembert"),X2t.forEach(t),_Go=r(rSe," \u2014 "),NV=n(rSe,"A",{href:!0});var z2t=s(NV);bGo=r(z2t,"CamembertForMultipleChoice"),z2t.forEach(t),vGo=r(rSe," (CamemBERT model)"),rSe.forEach(t),FGo=i(ee),Mv=n(ee,"LI",{});var tSe=s(Mv);dpe=n(tSe,"STRONG",{});var W2t=s(dpe);TGo=r(W2t,"canine"),W2t.forEach(t),MGo=r(tSe," \u2014 "),qV=n(tSe,"A",{href:!0});var Q2t=s(qV);EGo=r(Q2t,"CanineForMultipleChoice"),Q2t.forEach(t),CGo=r(tSe," (CANINE model)"),tSe.forEach(t),wGo=i(ee),Ev=n(ee,"LI",{});var aSe=s(Ev);cpe=n(aSe,"STRONG",{});var H2t=s(cpe);AGo=r(H2t,"convbert"),H2t.forEach(t),LGo=r(aSe," \u2014 "),jV=n(aSe,"A",{href:!0});var U2t=s(jV);yGo=r(U2t,"ConvBertForMultipleChoice"),U2t.forEach(t),xGo=r(aSe," (ConvBERT model)"),aSe.forEach(t),$Go=i(ee),Cv=n(ee,"LI",{});var nSe=s(Cv);fpe=n(nSe,"STRONG",{});var J2t=s(fpe);kGo=r(J2t,"data2vec-text"),J2t.forEach(t),SGo=r(nSe," \u2014 "),DV=n(nSe,"A",{href:!0});var Y2t=s(DV);RGo=r(Y2t,"Data2VecTextForMultipleChoice"),Y2t.forEach(t),PGo=r(nSe," (Data2VecText model)"),nSe.forEach(t),BGo=i(ee),wv=n(ee,"LI",{});var sSe=s(wv);mpe=n(sSe,"STRONG",{});var K2t=s(mpe);IGo=r(K2t,"deberta-v2"),K2t.forEach(t),NGo=r(sSe," \u2014 "),GV=n(sSe,"A",{href:!0});var Z2t=s(GV);qGo=r(Z2t,"DebertaV2ForMultipleChoice"),Z2t.forEach(t),jGo=r(sSe," (DeBERTa-v2 model)"),sSe.forEach(t),DGo=i(ee),Av=n(ee,"LI",{});var lSe=s(Av);gpe=n(lSe,"STRONG",{});var ebt=s(gpe);GGo=r(ebt,"distilbert"),ebt.forEach(t),OGo=r(lSe," \u2014 "),OV=n(lSe,"A",{href:!0});var obt=s(OV);VGo=r(obt,"DistilBertForMultipleChoice"),obt.forEach(t),XGo=r(lSe," (DistilBERT model)"),lSe.forEach(t),zGo=i(ee),Lv=n(ee,"LI",{});var iSe=s(Lv);hpe=n(iSe,"STRONG",{});var rbt=s(hpe);WGo=r(rbt,"electra"),rbt.forEach(t),QGo=r(iSe," \u2014 "),VV=n(iSe,"A",{href:!0});var tbt=s(VV);HGo=r(tbt,"ElectraForMultipleChoice"),tbt.forEach(t),UGo=r(iSe," (ELECTRA model)"),iSe.forEach(t),JGo=i(ee),yv=n(ee,"LI",{});var dSe=s(yv);ppe=n(dSe,"STRONG",{});var abt=s(ppe);YGo=r(abt,"flaubert"),abt.forEach(t),KGo=r(dSe," \u2014 "),XV=n(dSe,"A",{href:!0});var nbt=s(XV);ZGo=r(nbt,"FlaubertForMultipleChoice"),nbt.forEach(t),eOo=r(dSe," (FlauBERT model)"),dSe.forEach(t),oOo=i(ee),xv=n(ee,"LI",{});var cSe=s(xv);upe=n(cSe,"STRONG",{});var sbt=s(upe);rOo=r(sbt,"fnet"),sbt.forEach(t),tOo=r(cSe," \u2014 "),zV=n(cSe,"A",{href:!0});var lbt=s(zV);aOo=r(lbt,"FNetForMultipleChoice"),lbt.forEach(t),nOo=r(cSe," (FNet model)"),cSe.forEach(t),sOo=i(ee),$v=n(ee,"LI",{});var fSe=s($v);_pe=n(fSe,"STRONG",{});var ibt=s(_pe);lOo=r(ibt,"funnel"),ibt.forEach(t),iOo=r(fSe," \u2014 "),WV=n(fSe,"A",{href:!0});var dbt=s(WV);dOo=r(dbt,"FunnelForMultipleChoice"),dbt.forEach(t),cOo=r(fSe," (Funnel Transformer model)"),fSe.forEach(t),fOo=i(ee),kv=n(ee,"LI",{});var mSe=s(kv);bpe=n(mSe,"STRONG",{});var cbt=s(bpe);mOo=r(cbt,"ibert"),cbt.forEach(t),gOo=r(mSe," \u2014 "),QV=n(mSe,"A",{href:!0});var fbt=s(QV);hOo=r(fbt,"IBertForMultipleChoice"),fbt.forEach(t),pOo=r(mSe," (I-BERT model)"),mSe.forEach(t),uOo=i(ee),Sv=n(ee,"LI",{});var gSe=s(Sv);vpe=n(gSe,"STRONG",{});var mbt=s(vpe);_Oo=r(mbt,"longformer"),mbt.forEach(t),bOo=r(gSe," \u2014 "),HV=n(gSe,"A",{href:!0});var gbt=s(HV);vOo=r(gbt,"LongformerForMultipleChoice"),gbt.forEach(t),FOo=r(gSe," (Longformer model)"),gSe.forEach(t),TOo=i(ee),Rv=n(ee,"LI",{});var hSe=s(Rv);Fpe=n(hSe,"STRONG",{});var hbt=s(Fpe);MOo=r(hbt,"megatron-bert"),hbt.forEach(t),EOo=r(hSe," \u2014 "),UV=n(hSe,"A",{href:!0});var pbt=s(UV);COo=r(pbt,"MegatronBertForMultipleChoice"),pbt.forEach(t),wOo=r(hSe," (Megatron-BERT model)"),hSe.forEach(t),AOo=i(ee),Pv=n(ee,"LI",{});var pSe=s(Pv);Tpe=n(pSe,"STRONG",{});var ubt=s(Tpe);LOo=r(ubt,"mobilebert"),ubt.forEach(t),yOo=r(pSe," \u2014 "),JV=n(pSe,"A",{href:!0});var _bt=s(JV);xOo=r(_bt,"MobileBertForMultipleChoice"),_bt.forEach(t),$Oo=r(pSe," (MobileBERT model)"),pSe.forEach(t),kOo=i(ee),Bv=n(ee,"LI",{});var uSe=s(Bv);Mpe=n(uSe,"STRONG",{});var bbt=s(Mpe);SOo=r(bbt,"mpnet"),bbt.forEach(t),ROo=r(uSe," \u2014 "),YV=n(uSe,"A",{href:!0});var vbt=s(YV);POo=r(vbt,"MPNetForMultipleChoice"),vbt.forEach(t),BOo=r(uSe," (MPNet model)"),uSe.forEach(t),IOo=i(ee),Iv=n(ee,"LI",{});var _Se=s(Iv);Epe=n(_Se,"STRONG",{});var Fbt=s(Epe);NOo=r(Fbt,"nystromformer"),Fbt.forEach(t),qOo=r(_Se," \u2014 "),KV=n(_Se,"A",{href:!0});var Tbt=s(KV);jOo=r(Tbt,"NystromformerForMultipleChoice"),Tbt.forEach(t),DOo=r(_Se," (Nystr\xF6mformer model)"),_Se.forEach(t),GOo=i(ee),Nv=n(ee,"LI",{});var bSe=s(Nv);Cpe=n(bSe,"STRONG",{});var Mbt=s(Cpe);OOo=r(Mbt,"qdqbert"),Mbt.forEach(t),VOo=r(bSe," \u2014 "),ZV=n(bSe,"A",{href:!0});var Ebt=s(ZV);XOo=r(Ebt,"QDQBertForMultipleChoice"),Ebt.forEach(t),zOo=r(bSe," (QDQBert model)"),bSe.forEach(t),WOo=i(ee),qv=n(ee,"LI",{});var vSe=s(qv);wpe=n(vSe,"STRONG",{});var Cbt=s(wpe);QOo=r(Cbt,"rembert"),Cbt.forEach(t),HOo=r(vSe," \u2014 "),eX=n(vSe,"A",{href:!0});var wbt=s(eX);UOo=r(wbt,"RemBertForMultipleChoice"),wbt.forEach(t),JOo=r(vSe," (RemBERT model)"),vSe.forEach(t),YOo=i(ee),jv=n(ee,"LI",{});var FSe=s(jv);Ape=n(FSe,"STRONG",{});var Abt=s(Ape);KOo=r(Abt,"roberta"),Abt.forEach(t),ZOo=r(FSe," \u2014 "),oX=n(FSe,"A",{href:!0});var Lbt=s(oX);eVo=r(Lbt,"RobertaForMultipleChoice"),Lbt.forEach(t),oVo=r(FSe," (RoBERTa model)"),FSe.forEach(t),rVo=i(ee),Dv=n(ee,"LI",{});var TSe=s(Dv);Lpe=n(TSe,"STRONG",{});var ybt=s(Lpe);tVo=r(ybt,"roformer"),ybt.forEach(t),aVo=r(TSe," \u2014 "),rX=n(TSe,"A",{href:!0});var xbt=s(rX);nVo=r(xbt,"RoFormerForMultipleChoice"),xbt.forEach(t),sVo=r(TSe," (RoFormer model)"),TSe.forEach(t),lVo=i(ee),Gv=n(ee,"LI",{});var MSe=s(Gv);ype=n(MSe,"STRONG",{});var $bt=s(ype);iVo=r($bt,"squeezebert"),$bt.forEach(t),dVo=r(MSe," \u2014 "),tX=n(MSe,"A",{href:!0});var kbt=s(tX);cVo=r(kbt,"SqueezeBertForMultipleChoice"),kbt.forEach(t),fVo=r(MSe," (SqueezeBERT model)"),MSe.forEach(t),mVo=i(ee),Ov=n(ee,"LI",{});var ESe=s(Ov);xpe=n(ESe,"STRONG",{});var Sbt=s(xpe);gVo=r(Sbt,"xlm"),Sbt.forEach(t),hVo=r(ESe," \u2014 "),aX=n(ESe,"A",{href:!0});var Rbt=s(aX);pVo=r(Rbt,"XLMForMultipleChoice"),Rbt.forEach(t),uVo=r(ESe," (XLM model)"),ESe.forEach(t),_Vo=i(ee),Vv=n(ee,"LI",{});var CSe=s(Vv);$pe=n(CSe,"STRONG",{});var Pbt=s($pe);bVo=r(Pbt,"xlm-roberta"),Pbt.forEach(t),vVo=r(CSe," \u2014 "),nX=n(CSe,"A",{href:!0});var Bbt=s(nX);FVo=r(Bbt,"XLMRobertaForMultipleChoice"),Bbt.forEach(t),TVo=r(CSe," (XLM-RoBERTa model)"),CSe.forEach(t),MVo=i(ee),Xv=n(ee,"LI",{});var wSe=s(Xv);kpe=n(wSe,"STRONG",{});var Ibt=s(kpe);EVo=r(Ibt,"xlm-roberta-xl"),Ibt.forEach(t),CVo=r(wSe," \u2014 "),sX=n(wSe,"A",{href:!0});var Nbt=s(sX);wVo=r(Nbt,"XLMRobertaXLForMultipleChoice"),Nbt.forEach(t),AVo=r(wSe," (XLM-RoBERTa-XL model)"),wSe.forEach(t),LVo=i(ee),zv=n(ee,"LI",{});var ASe=s(zv);Spe=n(ASe,"STRONG",{});var qbt=s(Spe);yVo=r(qbt,"xlnet"),qbt.forEach(t),xVo=r(ASe," \u2014 "),lX=n(ASe,"A",{href:!0});var jbt=s(lX);$Vo=r(jbt,"XLNetForMultipleChoice"),jbt.forEach(t),kVo=r(ASe," (XLNet model)"),ASe.forEach(t),SVo=i(ee),Wv=n(ee,"LI",{});var LSe=s(Wv);Rpe=n(LSe,"STRONG",{});var Dbt=s(Rpe);RVo=r(Dbt,"yoso"),Dbt.forEach(t),PVo=r(LSe," \u2014 "),iX=n(LSe,"A",{href:!0});var Gbt=s(iX);BVo=r(Gbt,"YosoForMultipleChoice"),Gbt.forEach(t),IVo=r(LSe," (YOSO model)"),LSe.forEach(t),ee.forEach(t),NVo=i(ca),Qv=n(ca,"P",{});var ySe=s(Qv);qVo=r(ySe,"The model is set in evaluation mode by default using "),Ppe=n(ySe,"CODE",{});var Obt=s(Ppe);jVo=r(Obt,"model.eval()"),Obt.forEach(t),DVo=r(ySe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=n(ySe,"CODE",{});var Vbt=s(Bpe);GVo=r(Vbt,"model.train()"),Vbt.forEach(t),ySe.forEach(t),OVo=i(ca),T(Hv.$$.fragment,ca),ca.forEach(t),rl.forEach(t),qGe=i(f),rd=n(f,"H2",{class:!0});var XVe=s(rd);Uv=n(XVe,"A",{id:!0,class:!0,href:!0});var Xbt=s(Uv);Ipe=n(Xbt,"SPAN",{});var zbt=s(Ipe);T(xL.$$.fragment,zbt),zbt.forEach(t),Xbt.forEach(t),VVo=i(XVe),Npe=n(XVe,"SPAN",{});var Wbt=s(Npe);XVo=r(Wbt,"AutoModelForNextSentencePrediction"),Wbt.forEach(t),XVe.forEach(t),jGe=i(f),Io=n(f,"DIV",{class:!0});var tl=s(Io);T($L.$$.fragment,tl),zVo=i(tl),td=n(tl,"P",{});var voe=s(td);WVo=r(voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dX=n(voe,"A",{href:!0});var Qbt=s(dX);QVo=r(Qbt,"from_pretrained()"),Qbt.forEach(t),HVo=r(voe," class method or the "),cX=n(voe,"A",{href:!0});var Hbt=s(cX);UVo=r(Hbt,"from_config()"),Hbt.forEach(t),JVo=r(voe,` class
method.`),voe.forEach(t),YVo=i(tl),kL=n(tl,"P",{});var zVe=s(kL);KVo=r(zVe,"This class cannot be instantiated directly using "),qpe=n(zVe,"CODE",{});var Ubt=s(qpe);ZVo=r(Ubt,"__init__()"),Ubt.forEach(t),eXo=r(zVe," (throws an error)."),zVe.forEach(t),oXo=i(tl),mt=n(tl,"DIV",{class:!0});var qw=s(mt);T(SL.$$.fragment,qw),rXo=i(qw),jpe=n(qw,"P",{});var Jbt=s(jpe);tXo=r(Jbt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Jbt.forEach(t),aXo=i(qw),ad=n(qw,"P",{});var Foe=s(ad);nXo=r(Foe,`Note:
Loading a model from its configuration file does `),Dpe=n(Foe,"STRONG",{});var Ybt=s(Dpe);sXo=r(Ybt,"not"),Ybt.forEach(t),lXo=r(Foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=n(Foe,"A",{href:!0});var Kbt=s(fX);iXo=r(Kbt,"from_pretrained()"),Kbt.forEach(t),dXo=r(Foe," to load the model weights."),Foe.forEach(t),cXo=i(qw),T(Jv.$$.fragment,qw),qw.forEach(t),fXo=i(tl),to=n(tl,"DIV",{class:!0});var fa=s(to);T(RL.$$.fragment,fa),mXo=i(fa),Gpe=n(fa,"P",{});var Zbt=s(Gpe);gXo=r(Zbt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Zbt.forEach(t),hXo=i(fa),ja=n(fa,"P",{});var jw=s(ja);pXo=r(jw,"The model class to instantiate is selected based on the "),Ope=n(jw,"CODE",{});var evt=s(Ope);uXo=r(evt,"model_type"),evt.forEach(t),_Xo=r(jw,` property of the config object (either
passed as an argument or loaded from `),Vpe=n(jw,"CODE",{});var ovt=s(Vpe);bXo=r(ovt,"pretrained_model_name_or_path"),ovt.forEach(t),vXo=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xpe=n(jw,"CODE",{});var rvt=s(Xpe);FXo=r(rvt,"pretrained_model_name_or_path"),rvt.forEach(t),TXo=r(jw,":"),jw.forEach(t),MXo=i(fa),Zr=n(fa,"UL",{});var al=s(Zr);Yv=n(al,"LI",{});var xSe=s(Yv);zpe=n(xSe,"STRONG",{});var tvt=s(zpe);EXo=r(tvt,"bert"),tvt.forEach(t),CXo=r(xSe," \u2014 "),mX=n(xSe,"A",{href:!0});var avt=s(mX);wXo=r(avt,"BertForNextSentencePrediction"),avt.forEach(t),AXo=r(xSe," (BERT model)"),xSe.forEach(t),LXo=i(al),Kv=n(al,"LI",{});var $Se=s(Kv);Wpe=n($Se,"STRONG",{});var nvt=s(Wpe);yXo=r(nvt,"fnet"),nvt.forEach(t),xXo=r($Se," \u2014 "),gX=n($Se,"A",{href:!0});var svt=s(gX);$Xo=r(svt,"FNetForNextSentencePrediction"),svt.forEach(t),kXo=r($Se," (FNet model)"),$Se.forEach(t),SXo=i(al),Zv=n(al,"LI",{});var kSe=s(Zv);Qpe=n(kSe,"STRONG",{});var lvt=s(Qpe);RXo=r(lvt,"megatron-bert"),lvt.forEach(t),PXo=r(kSe," \u2014 "),hX=n(kSe,"A",{href:!0});var ivt=s(hX);BXo=r(ivt,"MegatronBertForNextSentencePrediction"),ivt.forEach(t),IXo=r(kSe," (Megatron-BERT model)"),kSe.forEach(t),NXo=i(al),e0=n(al,"LI",{});var SSe=s(e0);Hpe=n(SSe,"STRONG",{});var dvt=s(Hpe);qXo=r(dvt,"mobilebert"),dvt.forEach(t),jXo=r(SSe," \u2014 "),pX=n(SSe,"A",{href:!0});var cvt=s(pX);DXo=r(cvt,"MobileBertForNextSentencePrediction"),cvt.forEach(t),GXo=r(SSe," (MobileBERT model)"),SSe.forEach(t),OXo=i(al),o0=n(al,"LI",{});var RSe=s(o0);Upe=n(RSe,"STRONG",{});var fvt=s(Upe);VXo=r(fvt,"qdqbert"),fvt.forEach(t),XXo=r(RSe," \u2014 "),uX=n(RSe,"A",{href:!0});var mvt=s(uX);zXo=r(mvt,"QDQBertForNextSentencePrediction"),mvt.forEach(t),WXo=r(RSe," (QDQBert model)"),RSe.forEach(t),al.forEach(t),QXo=i(fa),r0=n(fa,"P",{});var PSe=s(r0);HXo=r(PSe,"The model is set in evaluation mode by default using "),Jpe=n(PSe,"CODE",{});var gvt=s(Jpe);UXo=r(gvt,"model.eval()"),gvt.forEach(t),JXo=r(PSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ype=n(PSe,"CODE",{});var hvt=s(Ype);YXo=r(hvt,"model.train()"),hvt.forEach(t),PSe.forEach(t),KXo=i(fa),T(t0.$$.fragment,fa),fa.forEach(t),tl.forEach(t),DGe=i(f),nd=n(f,"H2",{class:!0});var WVe=s(nd);a0=n(WVe,"A",{id:!0,class:!0,href:!0});var pvt=s(a0);Kpe=n(pvt,"SPAN",{});var uvt=s(Kpe);T(PL.$$.fragment,uvt),uvt.forEach(t),pvt.forEach(t),ZXo=i(WVe),Zpe=n(WVe,"SPAN",{});var _vt=s(Zpe);ezo=r(_vt,"AutoModelForTokenClassification"),_vt.forEach(t),WVe.forEach(t),GGe=i(f),No=n(f,"DIV",{class:!0});var nl=s(No);T(BL.$$.fragment,nl),ozo=i(nl),sd=n(nl,"P",{});var Toe=s(sd);rzo=r(Toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_X=n(Toe,"A",{href:!0});var bvt=s(_X);tzo=r(bvt,"from_pretrained()"),bvt.forEach(t),azo=r(Toe," class method or the "),bX=n(Toe,"A",{href:!0});var vvt=s(bX);nzo=r(vvt,"from_config()"),vvt.forEach(t),szo=r(Toe,` class
method.`),Toe.forEach(t),lzo=i(nl),IL=n(nl,"P",{});var QVe=s(IL);izo=r(QVe,"This class cannot be instantiated directly using "),eue=n(QVe,"CODE",{});var Fvt=s(eue);dzo=r(Fvt,"__init__()"),Fvt.forEach(t),czo=r(QVe," (throws an error)."),QVe.forEach(t),fzo=i(nl),gt=n(nl,"DIV",{class:!0});var Dw=s(gt);T(NL.$$.fragment,Dw),mzo=i(Dw),oue=n(Dw,"P",{});var Tvt=s(oue);gzo=r(Tvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Tvt.forEach(t),hzo=i(Dw),ld=n(Dw,"P",{});var Moe=s(ld);pzo=r(Moe,`Note:
Loading a model from its configuration file does `),rue=n(Moe,"STRONG",{});var Mvt=s(rue);uzo=r(Mvt,"not"),Mvt.forEach(t),_zo=r(Moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=n(Moe,"A",{href:!0});var Evt=s(vX);bzo=r(Evt,"from_pretrained()"),Evt.forEach(t),vzo=r(Moe," to load the model weights."),Moe.forEach(t),Fzo=i(Dw),T(n0.$$.fragment,Dw),Dw.forEach(t),Tzo=i(nl),ao=n(nl,"DIV",{class:!0});var ma=s(ao);T(qL.$$.fragment,ma),Mzo=i(ma),tue=n(ma,"P",{});var Cvt=s(tue);Ezo=r(Cvt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Cvt.forEach(t),Czo=i(ma),Da=n(ma,"P",{});var Gw=s(Da);wzo=r(Gw,"The model class to instantiate is selected based on the "),aue=n(Gw,"CODE",{});var wvt=s(aue);Azo=r(wvt,"model_type"),wvt.forEach(t),Lzo=r(Gw,` property of the config object (either
passed as an argument or loaded from `),nue=n(Gw,"CODE",{});var Avt=s(nue);yzo=r(Avt,"pretrained_model_name_or_path"),Avt.forEach(t),xzo=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=n(Gw,"CODE",{});var Lvt=s(sue);$zo=r(Lvt,"pretrained_model_name_or_path"),Lvt.forEach(t),kzo=r(Gw,":"),Gw.forEach(t),Szo=i(ma),H=n(ma,"UL",{});var J=s(H);s0=n(J,"LI",{});var BSe=s(s0);lue=n(BSe,"STRONG",{});var yvt=s(lue);Rzo=r(yvt,"albert"),yvt.forEach(t),Pzo=r(BSe," \u2014 "),FX=n(BSe,"A",{href:!0});var xvt=s(FX);Bzo=r(xvt,"AlbertForTokenClassification"),xvt.forEach(t),Izo=r(BSe," (ALBERT model)"),BSe.forEach(t),Nzo=i(J),l0=n(J,"LI",{});var ISe=s(l0);iue=n(ISe,"STRONG",{});var $vt=s(iue);qzo=r($vt,"bert"),$vt.forEach(t),jzo=r(ISe," \u2014 "),TX=n(ISe,"A",{href:!0});var kvt=s(TX);Dzo=r(kvt,"BertForTokenClassification"),kvt.forEach(t),Gzo=r(ISe," (BERT model)"),ISe.forEach(t),Ozo=i(J),i0=n(J,"LI",{});var NSe=s(i0);due=n(NSe,"STRONG",{});var Svt=s(due);Vzo=r(Svt,"big_bird"),Svt.forEach(t),Xzo=r(NSe," \u2014 "),MX=n(NSe,"A",{href:!0});var Rvt=s(MX);zzo=r(Rvt,"BigBirdForTokenClassification"),Rvt.forEach(t),Wzo=r(NSe," (BigBird model)"),NSe.forEach(t),Qzo=i(J),d0=n(J,"LI",{});var qSe=s(d0);cue=n(qSe,"STRONG",{});var Pvt=s(cue);Hzo=r(Pvt,"bloom"),Pvt.forEach(t),Uzo=r(qSe," \u2014 "),EX=n(qSe,"A",{href:!0});var Bvt=s(EX);Jzo=r(Bvt,"BloomForTokenClassification"),Bvt.forEach(t),Yzo=r(qSe," (BLOOM model)"),qSe.forEach(t),Kzo=i(J),c0=n(J,"LI",{});var jSe=s(c0);fue=n(jSe,"STRONG",{});var Ivt=s(fue);Zzo=r(Ivt,"camembert"),Ivt.forEach(t),eWo=r(jSe," \u2014 "),CX=n(jSe,"A",{href:!0});var Nvt=s(CX);oWo=r(Nvt,"CamembertForTokenClassification"),Nvt.forEach(t),rWo=r(jSe," (CamemBERT model)"),jSe.forEach(t),tWo=i(J),f0=n(J,"LI",{});var DSe=s(f0);mue=n(DSe,"STRONG",{});var qvt=s(mue);aWo=r(qvt,"canine"),qvt.forEach(t),nWo=r(DSe," \u2014 "),wX=n(DSe,"A",{href:!0});var jvt=s(wX);sWo=r(jvt,"CanineForTokenClassification"),jvt.forEach(t),lWo=r(DSe," (CANINE model)"),DSe.forEach(t),iWo=i(J),m0=n(J,"LI",{});var GSe=s(m0);gue=n(GSe,"STRONG",{});var Dvt=s(gue);dWo=r(Dvt,"convbert"),Dvt.forEach(t),cWo=r(GSe," \u2014 "),AX=n(GSe,"A",{href:!0});var Gvt=s(AX);fWo=r(Gvt,"ConvBertForTokenClassification"),Gvt.forEach(t),mWo=r(GSe," (ConvBERT model)"),GSe.forEach(t),gWo=i(J),g0=n(J,"LI",{});var OSe=s(g0);hue=n(OSe,"STRONG",{});var Ovt=s(hue);hWo=r(Ovt,"data2vec-text"),Ovt.forEach(t),pWo=r(OSe," \u2014 "),LX=n(OSe,"A",{href:!0});var Vvt=s(LX);uWo=r(Vvt,"Data2VecTextForTokenClassification"),Vvt.forEach(t),_Wo=r(OSe," (Data2VecText model)"),OSe.forEach(t),bWo=i(J),h0=n(J,"LI",{});var VSe=s(h0);pue=n(VSe,"STRONG",{});var Xvt=s(pue);vWo=r(Xvt,"deberta"),Xvt.forEach(t),FWo=r(VSe," \u2014 "),yX=n(VSe,"A",{href:!0});var zvt=s(yX);TWo=r(zvt,"DebertaForTokenClassification"),zvt.forEach(t),MWo=r(VSe," (DeBERTa model)"),VSe.forEach(t),EWo=i(J),p0=n(J,"LI",{});var XSe=s(p0);uue=n(XSe,"STRONG",{});var Wvt=s(uue);CWo=r(Wvt,"deberta-v2"),Wvt.forEach(t),wWo=r(XSe," \u2014 "),xX=n(XSe,"A",{href:!0});var Qvt=s(xX);AWo=r(Qvt,"DebertaV2ForTokenClassification"),Qvt.forEach(t),LWo=r(XSe," (DeBERTa-v2 model)"),XSe.forEach(t),yWo=i(J),u0=n(J,"LI",{});var zSe=s(u0);_ue=n(zSe,"STRONG",{});var Hvt=s(_ue);xWo=r(Hvt,"distilbert"),Hvt.forEach(t),$Wo=r(zSe," \u2014 "),$X=n(zSe,"A",{href:!0});var Uvt=s($X);kWo=r(Uvt,"DistilBertForTokenClassification"),Uvt.forEach(t),SWo=r(zSe," (DistilBERT model)"),zSe.forEach(t),RWo=i(J),_0=n(J,"LI",{});var WSe=s(_0);bue=n(WSe,"STRONG",{});var Jvt=s(bue);PWo=r(Jvt,"electra"),Jvt.forEach(t),BWo=r(WSe," \u2014 "),kX=n(WSe,"A",{href:!0});var Yvt=s(kX);IWo=r(Yvt,"ElectraForTokenClassification"),Yvt.forEach(t),NWo=r(WSe," (ELECTRA model)"),WSe.forEach(t),qWo=i(J),b0=n(J,"LI",{});var QSe=s(b0);vue=n(QSe,"STRONG",{});var Kvt=s(vue);jWo=r(Kvt,"flaubert"),Kvt.forEach(t),DWo=r(QSe," \u2014 "),SX=n(QSe,"A",{href:!0});var Zvt=s(SX);GWo=r(Zvt,"FlaubertForTokenClassification"),Zvt.forEach(t),OWo=r(QSe," (FlauBERT model)"),QSe.forEach(t),VWo=i(J),v0=n(J,"LI",{});var HSe=s(v0);Fue=n(HSe,"STRONG",{});var e0t=s(Fue);XWo=r(e0t,"fnet"),e0t.forEach(t),zWo=r(HSe," \u2014 "),RX=n(HSe,"A",{href:!0});var o0t=s(RX);WWo=r(o0t,"FNetForTokenClassification"),o0t.forEach(t),QWo=r(HSe," (FNet model)"),HSe.forEach(t),HWo=i(J),F0=n(J,"LI",{});var USe=s(F0);Tue=n(USe,"STRONG",{});var r0t=s(Tue);UWo=r(r0t,"funnel"),r0t.forEach(t),JWo=r(USe," \u2014 "),PX=n(USe,"A",{href:!0});var t0t=s(PX);YWo=r(t0t,"FunnelForTokenClassification"),t0t.forEach(t),KWo=r(USe," (Funnel Transformer model)"),USe.forEach(t),ZWo=i(J),T0=n(J,"LI",{});var JSe=s(T0);Mue=n(JSe,"STRONG",{});var a0t=s(Mue);eQo=r(a0t,"gpt2"),a0t.forEach(t),oQo=r(JSe," \u2014 "),BX=n(JSe,"A",{href:!0});var n0t=s(BX);rQo=r(n0t,"GPT2ForTokenClassification"),n0t.forEach(t),tQo=r(JSe," (OpenAI GPT-2 model)"),JSe.forEach(t),aQo=i(J),M0=n(J,"LI",{});var YSe=s(M0);Eue=n(YSe,"STRONG",{});var s0t=s(Eue);nQo=r(s0t,"ibert"),s0t.forEach(t),sQo=r(YSe," \u2014 "),IX=n(YSe,"A",{href:!0});var l0t=s(IX);lQo=r(l0t,"IBertForTokenClassification"),l0t.forEach(t),iQo=r(YSe," (I-BERT model)"),YSe.forEach(t),dQo=i(J),E0=n(J,"LI",{});var KSe=s(E0);Cue=n(KSe,"STRONG",{});var i0t=s(Cue);cQo=r(i0t,"layoutlm"),i0t.forEach(t),fQo=r(KSe," \u2014 "),NX=n(KSe,"A",{href:!0});var d0t=s(NX);mQo=r(d0t,"LayoutLMForTokenClassification"),d0t.forEach(t),gQo=r(KSe," (LayoutLM model)"),KSe.forEach(t),hQo=i(J),C0=n(J,"LI",{});var ZSe=s(C0);wue=n(ZSe,"STRONG",{});var c0t=s(wue);pQo=r(c0t,"layoutlmv2"),c0t.forEach(t),uQo=r(ZSe," \u2014 "),qX=n(ZSe,"A",{href:!0});var f0t=s(qX);_Qo=r(f0t,"LayoutLMv2ForTokenClassification"),f0t.forEach(t),bQo=r(ZSe," (LayoutLMv2 model)"),ZSe.forEach(t),vQo=i(J),w0=n(J,"LI",{});var eRe=s(w0);Aue=n(eRe,"STRONG",{});var m0t=s(Aue);FQo=r(m0t,"layoutlmv3"),m0t.forEach(t),TQo=r(eRe," \u2014 "),jX=n(eRe,"A",{href:!0});var g0t=s(jX);MQo=r(g0t,"LayoutLMv3ForTokenClassification"),g0t.forEach(t),EQo=r(eRe," (LayoutLMv3 model)"),eRe.forEach(t),CQo=i(J),A0=n(J,"LI",{});var oRe=s(A0);Lue=n(oRe,"STRONG",{});var h0t=s(Lue);wQo=r(h0t,"longformer"),h0t.forEach(t),AQo=r(oRe," \u2014 "),DX=n(oRe,"A",{href:!0});var p0t=s(DX);LQo=r(p0t,"LongformerForTokenClassification"),p0t.forEach(t),yQo=r(oRe," (Longformer model)"),oRe.forEach(t),xQo=i(J),L0=n(J,"LI",{});var rRe=s(L0);yue=n(rRe,"STRONG",{});var u0t=s(yue);$Qo=r(u0t,"megatron-bert"),u0t.forEach(t),kQo=r(rRe," \u2014 "),GX=n(rRe,"A",{href:!0});var _0t=s(GX);SQo=r(_0t,"MegatronBertForTokenClassification"),_0t.forEach(t),RQo=r(rRe," (Megatron-BERT model)"),rRe.forEach(t),PQo=i(J),y0=n(J,"LI",{});var tRe=s(y0);xue=n(tRe,"STRONG",{});var b0t=s(xue);BQo=r(b0t,"mobilebert"),b0t.forEach(t),IQo=r(tRe," \u2014 "),OX=n(tRe,"A",{href:!0});var v0t=s(OX);NQo=r(v0t,"MobileBertForTokenClassification"),v0t.forEach(t),qQo=r(tRe," (MobileBERT model)"),tRe.forEach(t),jQo=i(J),x0=n(J,"LI",{});var aRe=s(x0);$ue=n(aRe,"STRONG",{});var F0t=s($ue);DQo=r(F0t,"mpnet"),F0t.forEach(t),GQo=r(aRe," \u2014 "),VX=n(aRe,"A",{href:!0});var T0t=s(VX);OQo=r(T0t,"MPNetForTokenClassification"),T0t.forEach(t),VQo=r(aRe," (MPNet model)"),aRe.forEach(t),XQo=i(J),$0=n(J,"LI",{});var nRe=s($0);kue=n(nRe,"STRONG",{});var M0t=s(kue);zQo=r(M0t,"nystromformer"),M0t.forEach(t),WQo=r(nRe," \u2014 "),XX=n(nRe,"A",{href:!0});var E0t=s(XX);QQo=r(E0t,"NystromformerForTokenClassification"),E0t.forEach(t),HQo=r(nRe," (Nystr\xF6mformer model)"),nRe.forEach(t),UQo=i(J),k0=n(J,"LI",{});var sRe=s(k0);Sue=n(sRe,"STRONG",{});var C0t=s(Sue);JQo=r(C0t,"qdqbert"),C0t.forEach(t),YQo=r(sRe," \u2014 "),zX=n(sRe,"A",{href:!0});var w0t=s(zX);KQo=r(w0t,"QDQBertForTokenClassification"),w0t.forEach(t),ZQo=r(sRe," (QDQBert model)"),sRe.forEach(t),eHo=i(J),S0=n(J,"LI",{});var lRe=s(S0);Rue=n(lRe,"STRONG",{});var A0t=s(Rue);oHo=r(A0t,"rembert"),A0t.forEach(t),rHo=r(lRe," \u2014 "),WX=n(lRe,"A",{href:!0});var L0t=s(WX);tHo=r(L0t,"RemBertForTokenClassification"),L0t.forEach(t),aHo=r(lRe," (RemBERT model)"),lRe.forEach(t),nHo=i(J),R0=n(J,"LI",{});var iRe=s(R0);Pue=n(iRe,"STRONG",{});var y0t=s(Pue);sHo=r(y0t,"roberta"),y0t.forEach(t),lHo=r(iRe," \u2014 "),QX=n(iRe,"A",{href:!0});var x0t=s(QX);iHo=r(x0t,"RobertaForTokenClassification"),x0t.forEach(t),dHo=r(iRe," (RoBERTa model)"),iRe.forEach(t),cHo=i(J),P0=n(J,"LI",{});var dRe=s(P0);Bue=n(dRe,"STRONG",{});var $0t=s(Bue);fHo=r($0t,"roformer"),$0t.forEach(t),mHo=r(dRe," \u2014 "),HX=n(dRe,"A",{href:!0});var k0t=s(HX);gHo=r(k0t,"RoFormerForTokenClassification"),k0t.forEach(t),hHo=r(dRe," (RoFormer model)"),dRe.forEach(t),pHo=i(J),B0=n(J,"LI",{});var cRe=s(B0);Iue=n(cRe,"STRONG",{});var S0t=s(Iue);uHo=r(S0t,"squeezebert"),S0t.forEach(t),_Ho=r(cRe," \u2014 "),UX=n(cRe,"A",{href:!0});var R0t=s(UX);bHo=r(R0t,"SqueezeBertForTokenClassification"),R0t.forEach(t),vHo=r(cRe," (SqueezeBERT model)"),cRe.forEach(t),FHo=i(J),I0=n(J,"LI",{});var fRe=s(I0);Nue=n(fRe,"STRONG",{});var P0t=s(Nue);THo=r(P0t,"xlm"),P0t.forEach(t),MHo=r(fRe," \u2014 "),JX=n(fRe,"A",{href:!0});var B0t=s(JX);EHo=r(B0t,"XLMForTokenClassification"),B0t.forEach(t),CHo=r(fRe," (XLM model)"),fRe.forEach(t),wHo=i(J),N0=n(J,"LI",{});var mRe=s(N0);que=n(mRe,"STRONG",{});var I0t=s(que);AHo=r(I0t,"xlm-roberta"),I0t.forEach(t),LHo=r(mRe," \u2014 "),YX=n(mRe,"A",{href:!0});var N0t=s(YX);yHo=r(N0t,"XLMRobertaForTokenClassification"),N0t.forEach(t),xHo=r(mRe," (XLM-RoBERTa model)"),mRe.forEach(t),$Ho=i(J),q0=n(J,"LI",{});var gRe=s(q0);jue=n(gRe,"STRONG",{});var q0t=s(jue);kHo=r(q0t,"xlm-roberta-xl"),q0t.forEach(t),SHo=r(gRe," \u2014 "),KX=n(gRe,"A",{href:!0});var j0t=s(KX);RHo=r(j0t,"XLMRobertaXLForTokenClassification"),j0t.forEach(t),PHo=r(gRe," (XLM-RoBERTa-XL model)"),gRe.forEach(t),BHo=i(J),j0=n(J,"LI",{});var hRe=s(j0);Due=n(hRe,"STRONG",{});var D0t=s(Due);IHo=r(D0t,"xlnet"),D0t.forEach(t),NHo=r(hRe," \u2014 "),ZX=n(hRe,"A",{href:!0});var G0t=s(ZX);qHo=r(G0t,"XLNetForTokenClassification"),G0t.forEach(t),jHo=r(hRe," (XLNet model)"),hRe.forEach(t),DHo=i(J),D0=n(J,"LI",{});var pRe=s(D0);Gue=n(pRe,"STRONG",{});var O0t=s(Gue);GHo=r(O0t,"yoso"),O0t.forEach(t),OHo=r(pRe," \u2014 "),ez=n(pRe,"A",{href:!0});var V0t=s(ez);VHo=r(V0t,"YosoForTokenClassification"),V0t.forEach(t),XHo=r(pRe," (YOSO model)"),pRe.forEach(t),J.forEach(t),zHo=i(ma),G0=n(ma,"P",{});var uRe=s(G0);WHo=r(uRe,"The model is set in evaluation mode by default using "),Oue=n(uRe,"CODE",{});var X0t=s(Oue);QHo=r(X0t,"model.eval()"),X0t.forEach(t),HHo=r(uRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=n(uRe,"CODE",{});var z0t=s(Vue);UHo=r(z0t,"model.train()"),z0t.forEach(t),uRe.forEach(t),JHo=i(ma),T(O0.$$.fragment,ma),ma.forEach(t),nl.forEach(t),OGe=i(f),id=n(f,"H2",{class:!0});var HVe=s(id);V0=n(HVe,"A",{id:!0,class:!0,href:!0});var W0t=s(V0);Xue=n(W0t,"SPAN",{});var Q0t=s(Xue);T(jL.$$.fragment,Q0t),Q0t.forEach(t),W0t.forEach(t),YHo=i(HVe),zue=n(HVe,"SPAN",{});var H0t=s(zue);KHo=r(H0t,"AutoModelForQuestionAnswering"),H0t.forEach(t),HVe.forEach(t),VGe=i(f),qo=n(f,"DIV",{class:!0});var sl=s(qo);T(DL.$$.fragment,sl),ZHo=i(sl),dd=n(sl,"P",{});var Eoe=s(dd);eUo=r(Eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oz=n(Eoe,"A",{href:!0});var U0t=s(oz);oUo=r(U0t,"from_pretrained()"),U0t.forEach(t),rUo=r(Eoe," class method or the "),rz=n(Eoe,"A",{href:!0});var J0t=s(rz);tUo=r(J0t,"from_config()"),J0t.forEach(t),aUo=r(Eoe,` class
method.`),Eoe.forEach(t),nUo=i(sl),GL=n(sl,"P",{});var UVe=s(GL);sUo=r(UVe,"This class cannot be instantiated directly using "),Wue=n(UVe,"CODE",{});var Y0t=s(Wue);lUo=r(Y0t,"__init__()"),Y0t.forEach(t),iUo=r(UVe," (throws an error)."),UVe.forEach(t),dUo=i(sl),ht=n(sl,"DIV",{class:!0});var Ow=s(ht);T(OL.$$.fragment,Ow),cUo=i(Ow),Que=n(Ow,"P",{});var K0t=s(Que);fUo=r(K0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),K0t.forEach(t),mUo=i(Ow),cd=n(Ow,"P",{});var Coe=s(cd);gUo=r(Coe,`Note:
Loading a model from its configuration file does `),Hue=n(Coe,"STRONG",{});var Z0t=s(Hue);hUo=r(Z0t,"not"),Z0t.forEach(t),pUo=r(Coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=n(Coe,"A",{href:!0});var eFt=s(tz);uUo=r(eFt,"from_pretrained()"),eFt.forEach(t),_Uo=r(Coe," to load the model weights."),Coe.forEach(t),bUo=i(Ow),T(X0.$$.fragment,Ow),Ow.forEach(t),vUo=i(sl),no=n(sl,"DIV",{class:!0});var ga=s(no);T(VL.$$.fragment,ga),FUo=i(ga),Uue=n(ga,"P",{});var oFt=s(Uue);TUo=r(oFt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oFt.forEach(t),MUo=i(ga),Ga=n(ga,"P",{});var Vw=s(Ga);EUo=r(Vw,"The model class to instantiate is selected based on the "),Jue=n(Vw,"CODE",{});var rFt=s(Jue);CUo=r(rFt,"model_type"),rFt.forEach(t),wUo=r(Vw,` property of the config object (either
passed as an argument or loaded from `),Yue=n(Vw,"CODE",{});var tFt=s(Yue);AUo=r(tFt,"pretrained_model_name_or_path"),tFt.forEach(t),LUo=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=n(Vw,"CODE",{});var aFt=s(Kue);yUo=r(aFt,"pretrained_model_name_or_path"),aFt.forEach(t),xUo=r(Vw,":"),Vw.forEach(t),$Uo=i(ga),V=n(ga,"UL",{});var X=s(V);z0=n(X,"LI",{});var _Re=s(z0);Zue=n(_Re,"STRONG",{});var nFt=s(Zue);kUo=r(nFt,"albert"),nFt.forEach(t),SUo=r(_Re," \u2014 "),az=n(_Re,"A",{href:!0});var sFt=s(az);RUo=r(sFt,"AlbertForQuestionAnswering"),sFt.forEach(t),PUo=r(_Re," (ALBERT model)"),_Re.forEach(t),BUo=i(X),W0=n(X,"LI",{});var bRe=s(W0);e_e=n(bRe,"STRONG",{});var lFt=s(e_e);IUo=r(lFt,"bart"),lFt.forEach(t),NUo=r(bRe," \u2014 "),nz=n(bRe,"A",{href:!0});var iFt=s(nz);qUo=r(iFt,"BartForQuestionAnswering"),iFt.forEach(t),jUo=r(bRe," (BART model)"),bRe.forEach(t),DUo=i(X),Q0=n(X,"LI",{});var vRe=s(Q0);o_e=n(vRe,"STRONG",{});var dFt=s(o_e);GUo=r(dFt,"bert"),dFt.forEach(t),OUo=r(vRe," \u2014 "),sz=n(vRe,"A",{href:!0});var cFt=s(sz);VUo=r(cFt,"BertForQuestionAnswering"),cFt.forEach(t),XUo=r(vRe," (BERT model)"),vRe.forEach(t),zUo=i(X),H0=n(X,"LI",{});var FRe=s(H0);r_e=n(FRe,"STRONG",{});var fFt=s(r_e);WUo=r(fFt,"big_bird"),fFt.forEach(t),QUo=r(FRe," \u2014 "),lz=n(FRe,"A",{href:!0});var mFt=s(lz);HUo=r(mFt,"BigBirdForQuestionAnswering"),mFt.forEach(t),UUo=r(FRe," (BigBird model)"),FRe.forEach(t),JUo=i(X),U0=n(X,"LI",{});var TRe=s(U0);t_e=n(TRe,"STRONG",{});var gFt=s(t_e);YUo=r(gFt,"bigbird_pegasus"),gFt.forEach(t),KUo=r(TRe," \u2014 "),iz=n(TRe,"A",{href:!0});var hFt=s(iz);ZUo=r(hFt,"BigBirdPegasusForQuestionAnswering"),hFt.forEach(t),eJo=r(TRe," (BigBird-Pegasus model)"),TRe.forEach(t),oJo=i(X),J0=n(X,"LI",{});var MRe=s(J0);a_e=n(MRe,"STRONG",{});var pFt=s(a_e);rJo=r(pFt,"camembert"),pFt.forEach(t),tJo=r(MRe," \u2014 "),dz=n(MRe,"A",{href:!0});var uFt=s(dz);aJo=r(uFt,"CamembertForQuestionAnswering"),uFt.forEach(t),nJo=r(MRe," (CamemBERT model)"),MRe.forEach(t),sJo=i(X),Y0=n(X,"LI",{});var ERe=s(Y0);n_e=n(ERe,"STRONG",{});var _Ft=s(n_e);lJo=r(_Ft,"canine"),_Ft.forEach(t),iJo=r(ERe," \u2014 "),cz=n(ERe,"A",{href:!0});var bFt=s(cz);dJo=r(bFt,"CanineForQuestionAnswering"),bFt.forEach(t),cJo=r(ERe," (CANINE model)"),ERe.forEach(t),fJo=i(X),K0=n(X,"LI",{});var CRe=s(K0);s_e=n(CRe,"STRONG",{});var vFt=s(s_e);mJo=r(vFt,"convbert"),vFt.forEach(t),gJo=r(CRe," \u2014 "),fz=n(CRe,"A",{href:!0});var FFt=s(fz);hJo=r(FFt,"ConvBertForQuestionAnswering"),FFt.forEach(t),pJo=r(CRe," (ConvBERT model)"),CRe.forEach(t),uJo=i(X),Z0=n(X,"LI",{});var wRe=s(Z0);l_e=n(wRe,"STRONG",{});var TFt=s(l_e);_Jo=r(TFt,"data2vec-text"),TFt.forEach(t),bJo=r(wRe," \u2014 "),mz=n(wRe,"A",{href:!0});var MFt=s(mz);vJo=r(MFt,"Data2VecTextForQuestionAnswering"),MFt.forEach(t),FJo=r(wRe," (Data2VecText model)"),wRe.forEach(t),TJo=i(X),eF=n(X,"LI",{});var ARe=s(eF);i_e=n(ARe,"STRONG",{});var EFt=s(i_e);MJo=r(EFt,"deberta"),EFt.forEach(t),EJo=r(ARe," \u2014 "),gz=n(ARe,"A",{href:!0});var CFt=s(gz);CJo=r(CFt,"DebertaForQuestionAnswering"),CFt.forEach(t),wJo=r(ARe," (DeBERTa model)"),ARe.forEach(t),AJo=i(X),oF=n(X,"LI",{});var LRe=s(oF);d_e=n(LRe,"STRONG",{});var wFt=s(d_e);LJo=r(wFt,"deberta-v2"),wFt.forEach(t),yJo=r(LRe," \u2014 "),hz=n(LRe,"A",{href:!0});var AFt=s(hz);xJo=r(AFt,"DebertaV2ForQuestionAnswering"),AFt.forEach(t),$Jo=r(LRe," (DeBERTa-v2 model)"),LRe.forEach(t),kJo=i(X),rF=n(X,"LI",{});var yRe=s(rF);c_e=n(yRe,"STRONG",{});var LFt=s(c_e);SJo=r(LFt,"distilbert"),LFt.forEach(t),RJo=r(yRe," \u2014 "),pz=n(yRe,"A",{href:!0});var yFt=s(pz);PJo=r(yFt,"DistilBertForQuestionAnswering"),yFt.forEach(t),BJo=r(yRe," (DistilBERT model)"),yRe.forEach(t),IJo=i(X),tF=n(X,"LI",{});var xRe=s(tF);f_e=n(xRe,"STRONG",{});var xFt=s(f_e);NJo=r(xFt,"electra"),xFt.forEach(t),qJo=r(xRe," \u2014 "),uz=n(xRe,"A",{href:!0});var $Ft=s(uz);jJo=r($Ft,"ElectraForQuestionAnswering"),$Ft.forEach(t),DJo=r(xRe," (ELECTRA model)"),xRe.forEach(t),GJo=i(X),aF=n(X,"LI",{});var $Re=s(aF);m_e=n($Re,"STRONG",{});var kFt=s(m_e);OJo=r(kFt,"flaubert"),kFt.forEach(t),VJo=r($Re," \u2014 "),_z=n($Re,"A",{href:!0});var SFt=s(_z);XJo=r(SFt,"FlaubertForQuestionAnsweringSimple"),SFt.forEach(t),zJo=r($Re," (FlauBERT model)"),$Re.forEach(t),WJo=i(X),nF=n(X,"LI",{});var kRe=s(nF);g_e=n(kRe,"STRONG",{});var RFt=s(g_e);QJo=r(RFt,"fnet"),RFt.forEach(t),HJo=r(kRe," \u2014 "),bz=n(kRe,"A",{href:!0});var PFt=s(bz);UJo=r(PFt,"FNetForQuestionAnswering"),PFt.forEach(t),JJo=r(kRe," (FNet model)"),kRe.forEach(t),YJo=i(X),sF=n(X,"LI",{});var SRe=s(sF);h_e=n(SRe,"STRONG",{});var BFt=s(h_e);KJo=r(BFt,"funnel"),BFt.forEach(t),ZJo=r(SRe," \u2014 "),vz=n(SRe,"A",{href:!0});var IFt=s(vz);eYo=r(IFt,"FunnelForQuestionAnswering"),IFt.forEach(t),oYo=r(SRe," (Funnel Transformer model)"),SRe.forEach(t),rYo=i(X),lF=n(X,"LI",{});var RRe=s(lF);p_e=n(RRe,"STRONG",{});var NFt=s(p_e);tYo=r(NFt,"gptj"),NFt.forEach(t),aYo=r(RRe," \u2014 "),Fz=n(RRe,"A",{href:!0});var qFt=s(Fz);nYo=r(qFt,"GPTJForQuestionAnswering"),qFt.forEach(t),sYo=r(RRe," (GPT-J model)"),RRe.forEach(t),lYo=i(X),iF=n(X,"LI",{});var PRe=s(iF);u_e=n(PRe,"STRONG",{});var jFt=s(u_e);iYo=r(jFt,"ibert"),jFt.forEach(t),dYo=r(PRe," \u2014 "),Tz=n(PRe,"A",{href:!0});var DFt=s(Tz);cYo=r(DFt,"IBertForQuestionAnswering"),DFt.forEach(t),fYo=r(PRe," (I-BERT model)"),PRe.forEach(t),mYo=i(X),dF=n(X,"LI",{});var BRe=s(dF);__e=n(BRe,"STRONG",{});var GFt=s(__e);gYo=r(GFt,"layoutlmv2"),GFt.forEach(t),hYo=r(BRe," \u2014 "),Mz=n(BRe,"A",{href:!0});var OFt=s(Mz);pYo=r(OFt,"LayoutLMv2ForQuestionAnswering"),OFt.forEach(t),uYo=r(BRe," (LayoutLMv2 model)"),BRe.forEach(t),_Yo=i(X),cF=n(X,"LI",{});var IRe=s(cF);b_e=n(IRe,"STRONG",{});var VFt=s(b_e);bYo=r(VFt,"layoutlmv3"),VFt.forEach(t),vYo=r(IRe," \u2014 "),Ez=n(IRe,"A",{href:!0});var XFt=s(Ez);FYo=r(XFt,"LayoutLMv3ForQuestionAnswering"),XFt.forEach(t),TYo=r(IRe," (LayoutLMv3 model)"),IRe.forEach(t),MYo=i(X),fF=n(X,"LI",{});var NRe=s(fF);v_e=n(NRe,"STRONG",{});var zFt=s(v_e);EYo=r(zFt,"led"),zFt.forEach(t),CYo=r(NRe," \u2014 "),Cz=n(NRe,"A",{href:!0});var WFt=s(Cz);wYo=r(WFt,"LEDForQuestionAnswering"),WFt.forEach(t),AYo=r(NRe," (LED model)"),NRe.forEach(t),LYo=i(X),mF=n(X,"LI",{});var qRe=s(mF);F_e=n(qRe,"STRONG",{});var QFt=s(F_e);yYo=r(QFt,"longformer"),QFt.forEach(t),xYo=r(qRe," \u2014 "),wz=n(qRe,"A",{href:!0});var HFt=s(wz);$Yo=r(HFt,"LongformerForQuestionAnswering"),HFt.forEach(t),kYo=r(qRe," (Longformer model)"),qRe.forEach(t),SYo=i(X),gF=n(X,"LI",{});var jRe=s(gF);T_e=n(jRe,"STRONG",{});var UFt=s(T_e);RYo=r(UFt,"lxmert"),UFt.forEach(t),PYo=r(jRe," \u2014 "),Az=n(jRe,"A",{href:!0});var JFt=s(Az);BYo=r(JFt,"LxmertForQuestionAnswering"),JFt.forEach(t),IYo=r(jRe," (LXMERT model)"),jRe.forEach(t),NYo=i(X),hF=n(X,"LI",{});var DRe=s(hF);M_e=n(DRe,"STRONG",{});var YFt=s(M_e);qYo=r(YFt,"mbart"),YFt.forEach(t),jYo=r(DRe," \u2014 "),Lz=n(DRe,"A",{href:!0});var KFt=s(Lz);DYo=r(KFt,"MBartForQuestionAnswering"),KFt.forEach(t),GYo=r(DRe," (mBART model)"),DRe.forEach(t),OYo=i(X),pF=n(X,"LI",{});var GRe=s(pF);E_e=n(GRe,"STRONG",{});var ZFt=s(E_e);VYo=r(ZFt,"megatron-bert"),ZFt.forEach(t),XYo=r(GRe," \u2014 "),yz=n(GRe,"A",{href:!0});var eTt=s(yz);zYo=r(eTt,"MegatronBertForQuestionAnswering"),eTt.forEach(t),WYo=r(GRe," (Megatron-BERT model)"),GRe.forEach(t),QYo=i(X),uF=n(X,"LI",{});var ORe=s(uF);C_e=n(ORe,"STRONG",{});var oTt=s(C_e);HYo=r(oTt,"mobilebert"),oTt.forEach(t),UYo=r(ORe," \u2014 "),xz=n(ORe,"A",{href:!0});var rTt=s(xz);JYo=r(rTt,"MobileBertForQuestionAnswering"),rTt.forEach(t),YYo=r(ORe," (MobileBERT model)"),ORe.forEach(t),KYo=i(X),_F=n(X,"LI",{});var VRe=s(_F);w_e=n(VRe,"STRONG",{});var tTt=s(w_e);ZYo=r(tTt,"mpnet"),tTt.forEach(t),eKo=r(VRe," \u2014 "),$z=n(VRe,"A",{href:!0});var aTt=s($z);oKo=r(aTt,"MPNetForQuestionAnswering"),aTt.forEach(t),rKo=r(VRe," (MPNet model)"),VRe.forEach(t),tKo=i(X),bF=n(X,"LI",{});var XRe=s(bF);A_e=n(XRe,"STRONG",{});var nTt=s(A_e);aKo=r(nTt,"nystromformer"),nTt.forEach(t),nKo=r(XRe," \u2014 "),kz=n(XRe,"A",{href:!0});var sTt=s(kz);sKo=r(sTt,"NystromformerForQuestionAnswering"),sTt.forEach(t),lKo=r(XRe," (Nystr\xF6mformer model)"),XRe.forEach(t),iKo=i(X),vF=n(X,"LI",{});var zRe=s(vF);L_e=n(zRe,"STRONG",{});var lTt=s(L_e);dKo=r(lTt,"qdqbert"),lTt.forEach(t),cKo=r(zRe," \u2014 "),Sz=n(zRe,"A",{href:!0});var iTt=s(Sz);fKo=r(iTt,"QDQBertForQuestionAnswering"),iTt.forEach(t),mKo=r(zRe," (QDQBert model)"),zRe.forEach(t),gKo=i(X),FF=n(X,"LI",{});var WRe=s(FF);y_e=n(WRe,"STRONG",{});var dTt=s(y_e);hKo=r(dTt,"reformer"),dTt.forEach(t),pKo=r(WRe," \u2014 "),Rz=n(WRe,"A",{href:!0});var cTt=s(Rz);uKo=r(cTt,"ReformerForQuestionAnswering"),cTt.forEach(t),_Ko=r(WRe," (Reformer model)"),WRe.forEach(t),bKo=i(X),TF=n(X,"LI",{});var QRe=s(TF);x_e=n(QRe,"STRONG",{});var fTt=s(x_e);vKo=r(fTt,"rembert"),fTt.forEach(t),FKo=r(QRe," \u2014 "),Pz=n(QRe,"A",{href:!0});var mTt=s(Pz);TKo=r(mTt,"RemBertForQuestionAnswering"),mTt.forEach(t),MKo=r(QRe," (RemBERT model)"),QRe.forEach(t),EKo=i(X),MF=n(X,"LI",{});var HRe=s(MF);$_e=n(HRe,"STRONG",{});var gTt=s($_e);CKo=r(gTt,"roberta"),gTt.forEach(t),wKo=r(HRe," \u2014 "),Bz=n(HRe,"A",{href:!0});var hTt=s(Bz);AKo=r(hTt,"RobertaForQuestionAnswering"),hTt.forEach(t),LKo=r(HRe," (RoBERTa model)"),HRe.forEach(t),yKo=i(X),EF=n(X,"LI",{});var URe=s(EF);k_e=n(URe,"STRONG",{});var pTt=s(k_e);xKo=r(pTt,"roformer"),pTt.forEach(t),$Ko=r(URe," \u2014 "),Iz=n(URe,"A",{href:!0});var uTt=s(Iz);kKo=r(uTt,"RoFormerForQuestionAnswering"),uTt.forEach(t),SKo=r(URe," (RoFormer model)"),URe.forEach(t),RKo=i(X),CF=n(X,"LI",{});var JRe=s(CF);S_e=n(JRe,"STRONG",{});var _Tt=s(S_e);PKo=r(_Tt,"splinter"),_Tt.forEach(t),BKo=r(JRe," \u2014 "),Nz=n(JRe,"A",{href:!0});var bTt=s(Nz);IKo=r(bTt,"SplinterForQuestionAnswering"),bTt.forEach(t),NKo=r(JRe," (Splinter model)"),JRe.forEach(t),qKo=i(X),wF=n(X,"LI",{});var YRe=s(wF);R_e=n(YRe,"STRONG",{});var vTt=s(R_e);jKo=r(vTt,"squeezebert"),vTt.forEach(t),DKo=r(YRe," \u2014 "),qz=n(YRe,"A",{href:!0});var FTt=s(qz);GKo=r(FTt,"SqueezeBertForQuestionAnswering"),FTt.forEach(t),OKo=r(YRe," (SqueezeBERT model)"),YRe.forEach(t),VKo=i(X),AF=n(X,"LI",{});var KRe=s(AF);P_e=n(KRe,"STRONG",{});var TTt=s(P_e);XKo=r(TTt,"xlm"),TTt.forEach(t),zKo=r(KRe," \u2014 "),jz=n(KRe,"A",{href:!0});var MTt=s(jz);WKo=r(MTt,"XLMForQuestionAnsweringSimple"),MTt.forEach(t),QKo=r(KRe," (XLM model)"),KRe.forEach(t),HKo=i(X),LF=n(X,"LI",{});var ZRe=s(LF);B_e=n(ZRe,"STRONG",{});var ETt=s(B_e);UKo=r(ETt,"xlm-roberta"),ETt.forEach(t),JKo=r(ZRe," \u2014 "),Dz=n(ZRe,"A",{href:!0});var CTt=s(Dz);YKo=r(CTt,"XLMRobertaForQuestionAnswering"),CTt.forEach(t),KKo=r(ZRe," (XLM-RoBERTa model)"),ZRe.forEach(t),ZKo=i(X),yF=n(X,"LI",{});var ePe=s(yF);I_e=n(ePe,"STRONG",{});var wTt=s(I_e);eZo=r(wTt,"xlm-roberta-xl"),wTt.forEach(t),oZo=r(ePe," \u2014 "),Gz=n(ePe,"A",{href:!0});var ATt=s(Gz);rZo=r(ATt,"XLMRobertaXLForQuestionAnswering"),ATt.forEach(t),tZo=r(ePe," (XLM-RoBERTa-XL model)"),ePe.forEach(t),aZo=i(X),xF=n(X,"LI",{});var oPe=s(xF);N_e=n(oPe,"STRONG",{});var LTt=s(N_e);nZo=r(LTt,"xlnet"),LTt.forEach(t),sZo=r(oPe," \u2014 "),Oz=n(oPe,"A",{href:!0});var yTt=s(Oz);lZo=r(yTt,"XLNetForQuestionAnsweringSimple"),yTt.forEach(t),iZo=r(oPe," (XLNet model)"),oPe.forEach(t),dZo=i(X),$F=n(X,"LI",{});var rPe=s($F);q_e=n(rPe,"STRONG",{});var xTt=s(q_e);cZo=r(xTt,"yoso"),xTt.forEach(t),fZo=r(rPe," \u2014 "),Vz=n(rPe,"A",{href:!0});var $Tt=s(Vz);mZo=r($Tt,"YosoForQuestionAnswering"),$Tt.forEach(t),gZo=r(rPe," (YOSO model)"),rPe.forEach(t),X.forEach(t),hZo=i(ga),kF=n(ga,"P",{});var tPe=s(kF);pZo=r(tPe,"The model is set in evaluation mode by default using "),j_e=n(tPe,"CODE",{});var kTt=s(j_e);uZo=r(kTt,"model.eval()"),kTt.forEach(t),_Zo=r(tPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=n(tPe,"CODE",{});var STt=s(D_e);bZo=r(STt,"model.train()"),STt.forEach(t),tPe.forEach(t),vZo=i(ga),T(SF.$$.fragment,ga),ga.forEach(t),sl.forEach(t),XGe=i(f),fd=n(f,"H2",{class:!0});var JVe=s(fd);RF=n(JVe,"A",{id:!0,class:!0,href:!0});var RTt=s(RF);G_e=n(RTt,"SPAN",{});var PTt=s(G_e);T(XL.$$.fragment,PTt),PTt.forEach(t),RTt.forEach(t),FZo=i(JVe),O_e=n(JVe,"SPAN",{});var BTt=s(O_e);TZo=r(BTt,"AutoModelForTableQuestionAnswering"),BTt.forEach(t),JVe.forEach(t),zGe=i(f),jo=n(f,"DIV",{class:!0});var ll=s(jo);T(zL.$$.fragment,ll),MZo=i(ll),md=n(ll,"P",{});var woe=s(md);EZo=r(woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Xz=n(woe,"A",{href:!0});var ITt=s(Xz);CZo=r(ITt,"from_pretrained()"),ITt.forEach(t),wZo=r(woe," class method or the "),zz=n(woe,"A",{href:!0});var NTt=s(zz);AZo=r(NTt,"from_config()"),NTt.forEach(t),LZo=r(woe,` class
method.`),woe.forEach(t),yZo=i(ll),WL=n(ll,"P",{});var YVe=s(WL);xZo=r(YVe,"This class cannot be instantiated directly using "),V_e=n(YVe,"CODE",{});var qTt=s(V_e);$Zo=r(qTt,"__init__()"),qTt.forEach(t),kZo=r(YVe," (throws an error)."),YVe.forEach(t),SZo=i(ll),pt=n(ll,"DIV",{class:!0});var Xw=s(pt);T(QL.$$.fragment,Xw),RZo=i(Xw),X_e=n(Xw,"P",{});var jTt=s(X_e);PZo=r(jTt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),jTt.forEach(t),BZo=i(Xw),gd=n(Xw,"P",{});var Aoe=s(gd);IZo=r(Aoe,`Note:
Loading a model from its configuration file does `),z_e=n(Aoe,"STRONG",{});var DTt=s(z_e);NZo=r(DTt,"not"),DTt.forEach(t),qZo=r(Aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=n(Aoe,"A",{href:!0});var GTt=s(Wz);jZo=r(GTt,"from_pretrained()"),GTt.forEach(t),DZo=r(Aoe," to load the model weights."),Aoe.forEach(t),GZo=i(Xw),T(PF.$$.fragment,Xw),Xw.forEach(t),OZo=i(ll),so=n(ll,"DIV",{class:!0});var ha=s(so);T(HL.$$.fragment,ha),VZo=i(ha),W_e=n(ha,"P",{});var OTt=s(W_e);XZo=r(OTt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),OTt.forEach(t),zZo=i(ha),Oa=n(ha,"P",{});var zw=s(Oa);WZo=r(zw,"The model class to instantiate is selected based on the "),Q_e=n(zw,"CODE",{});var VTt=s(Q_e);QZo=r(VTt,"model_type"),VTt.forEach(t),HZo=r(zw,` property of the config object (either
passed as an argument or loaded from `),H_e=n(zw,"CODE",{});var XTt=s(H_e);UZo=r(XTt,"pretrained_model_name_or_path"),XTt.forEach(t),JZo=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=n(zw,"CODE",{});var zTt=s(U_e);YZo=r(zTt,"pretrained_model_name_or_path"),zTt.forEach(t),KZo=r(zw,":"),zw.forEach(t),ZZo=i(ha),J_e=n(ha,"UL",{});var WTt=s(J_e);BF=n(WTt,"LI",{});var aPe=s(BF);Y_e=n(aPe,"STRONG",{});var QTt=s(Y_e);eer=r(QTt,"tapas"),QTt.forEach(t),oer=r(aPe," \u2014 "),Qz=n(aPe,"A",{href:!0});var HTt=s(Qz);rer=r(HTt,"TapasForQuestionAnswering"),HTt.forEach(t),ter=r(aPe," (TAPAS model)"),aPe.forEach(t),WTt.forEach(t),aer=i(ha),IF=n(ha,"P",{});var nPe=s(IF);ner=r(nPe,"The model is set in evaluation mode by default using "),K_e=n(nPe,"CODE",{});var UTt=s(K_e);ser=r(UTt,"model.eval()"),UTt.forEach(t),ler=r(nPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=n(nPe,"CODE",{});var JTt=s(Z_e);ier=r(JTt,"model.train()"),JTt.forEach(t),nPe.forEach(t),der=i(ha),T(NF.$$.fragment,ha),ha.forEach(t),ll.forEach(t),WGe=i(f),hd=n(f,"H2",{class:!0});var KVe=s(hd);qF=n(KVe,"A",{id:!0,class:!0,href:!0});var YTt=s(qF);e1e=n(YTt,"SPAN",{});var KTt=s(e1e);T(UL.$$.fragment,KTt),KTt.forEach(t),YTt.forEach(t),cer=i(KVe),o1e=n(KVe,"SPAN",{});var ZTt=s(o1e);fer=r(ZTt,"AutoModelForImageClassification"),ZTt.forEach(t),KVe.forEach(t),QGe=i(f),Do=n(f,"DIV",{class:!0});var il=s(Do);T(JL.$$.fragment,il),mer=i(il),pd=n(il,"P",{});var Loe=s(pd);ger=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Hz=n(Loe,"A",{href:!0});var e7t=s(Hz);her=r(e7t,"from_pretrained()"),e7t.forEach(t),per=r(Loe," class method or the "),Uz=n(Loe,"A",{href:!0});var o7t=s(Uz);uer=r(o7t,"from_config()"),o7t.forEach(t),_er=r(Loe,` class
method.`),Loe.forEach(t),ber=i(il),YL=n(il,"P",{});var ZVe=s(YL);ver=r(ZVe,"This class cannot be instantiated directly using "),r1e=n(ZVe,"CODE",{});var r7t=s(r1e);Fer=r(r7t,"__init__()"),r7t.forEach(t),Ter=r(ZVe," (throws an error)."),ZVe.forEach(t),Mer=i(il),ut=n(il,"DIV",{class:!0});var Ww=s(ut);T(KL.$$.fragment,Ww),Eer=i(Ww),t1e=n(Ww,"P",{});var t7t=s(t1e);Cer=r(t7t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),t7t.forEach(t),wer=i(Ww),ud=n(Ww,"P",{});var yoe=s(ud);Aer=r(yoe,`Note:
Loading a model from its configuration file does `),a1e=n(yoe,"STRONG",{});var a7t=s(a1e);Ler=r(a7t,"not"),a7t.forEach(t),yer=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(yoe,"A",{href:!0});var n7t=s(Jz);xer=r(n7t,"from_pretrained()"),n7t.forEach(t),$er=r(yoe," to load the model weights."),yoe.forEach(t),ker=i(Ww),T(jF.$$.fragment,Ww),Ww.forEach(t),Ser=i(il),lo=n(il,"DIV",{class:!0});var pa=s(lo);T(ZL.$$.fragment,pa),Rer=i(pa),n1e=n(pa,"P",{});var s7t=s(n1e);Per=r(s7t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),s7t.forEach(t),Ber=i(pa),Va=n(pa,"P",{});var Qw=s(Va);Ier=r(Qw,"The model class to instantiate is selected based on the "),s1e=n(Qw,"CODE",{});var l7t=s(s1e);Ner=r(l7t,"model_type"),l7t.forEach(t),qer=r(Qw,` property of the config object (either
passed as an argument or loaded from `),l1e=n(Qw,"CODE",{});var i7t=s(l1e);jer=r(i7t,"pretrained_model_name_or_path"),i7t.forEach(t),Der=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=n(Qw,"CODE",{});var d7t=s(i1e);Ger=r(d7t,"pretrained_model_name_or_path"),d7t.forEach(t),Oer=r(Qw,":"),Qw.forEach(t),Ver=i(pa),Fe=n(pa,"UL",{});var Te=s(Fe);DF=n(Te,"LI",{});var sPe=s(DF);d1e=n(sPe,"STRONG",{});var c7t=s(d1e);Xer=r(c7t,"beit"),c7t.forEach(t),zer=r(sPe," \u2014 "),Yz=n(sPe,"A",{href:!0});var f7t=s(Yz);Wer=r(f7t,"BeitForImageClassification"),f7t.forEach(t),Qer=r(sPe," (BEiT model)"),sPe.forEach(t),Her=i(Te),GF=n(Te,"LI",{});var lPe=s(GF);c1e=n(lPe,"STRONG",{});var m7t=s(c1e);Uer=r(m7t,"convnext"),m7t.forEach(t),Jer=r(lPe," \u2014 "),Kz=n(lPe,"A",{href:!0});var g7t=s(Kz);Yer=r(g7t,"ConvNextForImageClassification"),g7t.forEach(t),Ker=r(lPe," (ConvNeXT model)"),lPe.forEach(t),Zer=i(Te),OF=n(Te,"LI",{});var iPe=s(OF);f1e=n(iPe,"STRONG",{});var h7t=s(f1e);eor=r(h7t,"cvt"),h7t.forEach(t),oor=r(iPe," \u2014 "),Zz=n(iPe,"A",{href:!0});var p7t=s(Zz);ror=r(p7t,"CvtForImageClassification"),p7t.forEach(t),tor=r(iPe," (CvT model)"),iPe.forEach(t),aor=i(Te),VF=n(Te,"LI",{});var dPe=s(VF);m1e=n(dPe,"STRONG",{});var u7t=s(m1e);nor=r(u7t,"data2vec-vision"),u7t.forEach(t),sor=r(dPe," \u2014 "),eW=n(dPe,"A",{href:!0});var _7t=s(eW);lor=r(_7t,"Data2VecVisionForImageClassification"),_7t.forEach(t),ior=r(dPe," (Data2VecVision model)"),dPe.forEach(t),dor=i(Te),Vs=n(Te,"LI",{});var Wk=s(Vs);g1e=n(Wk,"STRONG",{});var b7t=s(g1e);cor=r(b7t,"deit"),b7t.forEach(t),mor=r(Wk," \u2014 "),oW=n(Wk,"A",{href:!0});var v7t=s(oW);gor=r(v7t,"DeiTForImageClassification"),v7t.forEach(t),hor=r(Wk," or "),rW=n(Wk,"A",{href:!0});var F7t=s(rW);por=r(F7t,"DeiTForImageClassificationWithTeacher"),F7t.forEach(t),uor=r(Wk," (DeiT model)"),Wk.forEach(t),_or=i(Te),XF=n(Te,"LI",{});var cPe=s(XF);h1e=n(cPe,"STRONG",{});var T7t=s(h1e);bor=r(T7t,"imagegpt"),T7t.forEach(t),vor=r(cPe," \u2014 "),tW=n(cPe,"A",{href:!0});var M7t=s(tW);For=r(M7t,"ImageGPTForImageClassification"),M7t.forEach(t),Tor=r(cPe," (ImageGPT model)"),cPe.forEach(t),Mor=i(Te),Xs=n(Te,"LI",{});var Qk=s(Xs);p1e=n(Qk,"STRONG",{});var E7t=s(p1e);Eor=r(E7t,"levit"),E7t.forEach(t),Cor=r(Qk," \u2014 "),aW=n(Qk,"A",{href:!0});var C7t=s(aW);wor=r(C7t,"LevitForImageClassification"),C7t.forEach(t),Aor=r(Qk," or "),nW=n(Qk,"A",{href:!0});var w7t=s(nW);Lor=r(w7t,"LevitForImageClassificationWithTeacher"),w7t.forEach(t),yor=r(Qk," (LeViT model)"),Qk.forEach(t),xor=i(Te),_t=n(Te,"LI",{});var Lf=s(_t);u1e=n(Lf,"STRONG",{});var A7t=s(u1e);$or=r(A7t,"perceiver"),A7t.forEach(t),kor=r(Lf," \u2014 "),sW=n(Lf,"A",{href:!0});var L7t=s(sW);Sor=r(L7t,"PerceiverForImageClassificationLearned"),L7t.forEach(t),Ror=r(Lf," or "),lW=n(Lf,"A",{href:!0});var y7t=s(lW);Por=r(y7t,"PerceiverForImageClassificationFourier"),y7t.forEach(t),Bor=r(Lf," or "),iW=n(Lf,"A",{href:!0});var x7t=s(iW);Ior=r(x7t,"PerceiverForImageClassificationConvProcessing"),x7t.forEach(t),Nor=r(Lf," (Perceiver model)"),Lf.forEach(t),qor=i(Te),zF=n(Te,"LI",{});var fPe=s(zF);_1e=n(fPe,"STRONG",{});var $7t=s(_1e);jor=r($7t,"poolformer"),$7t.forEach(t),Dor=r(fPe," \u2014 "),dW=n(fPe,"A",{href:!0});var k7t=s(dW);Gor=r(k7t,"PoolFormerForImageClassification"),k7t.forEach(t),Oor=r(fPe," (PoolFormer model)"),fPe.forEach(t),Vor=i(Te),WF=n(Te,"LI",{});var mPe=s(WF);b1e=n(mPe,"STRONG",{});var S7t=s(b1e);Xor=r(S7t,"regnet"),S7t.forEach(t),zor=r(mPe," \u2014 "),cW=n(mPe,"A",{href:!0});var R7t=s(cW);Wor=r(R7t,"RegNetForImageClassification"),R7t.forEach(t),Qor=r(mPe," (RegNet model)"),mPe.forEach(t),Hor=i(Te),QF=n(Te,"LI",{});var gPe=s(QF);v1e=n(gPe,"STRONG",{});var P7t=s(v1e);Uor=r(P7t,"resnet"),P7t.forEach(t),Jor=r(gPe," \u2014 "),fW=n(gPe,"A",{href:!0});var B7t=s(fW);Yor=r(B7t,"ResNetForImageClassification"),B7t.forEach(t),Kor=r(gPe," (ResNet model)"),gPe.forEach(t),Zor=i(Te),HF=n(Te,"LI",{});var hPe=s(HF);F1e=n(hPe,"STRONG",{});var I7t=s(F1e);err=r(I7t,"segformer"),I7t.forEach(t),orr=r(hPe," \u2014 "),mW=n(hPe,"A",{href:!0});var N7t=s(mW);rrr=r(N7t,"SegformerForImageClassification"),N7t.forEach(t),trr=r(hPe," (SegFormer model)"),hPe.forEach(t),arr=i(Te),UF=n(Te,"LI",{});var pPe=s(UF);T1e=n(pPe,"STRONG",{});var q7t=s(T1e);nrr=r(q7t,"swin"),q7t.forEach(t),srr=r(pPe," \u2014 "),gW=n(pPe,"A",{href:!0});var j7t=s(gW);lrr=r(j7t,"SwinForImageClassification"),j7t.forEach(t),irr=r(pPe," (Swin Transformer model)"),pPe.forEach(t),drr=i(Te),JF=n(Te,"LI",{});var uPe=s(JF);M1e=n(uPe,"STRONG",{});var D7t=s(M1e);crr=r(D7t,"van"),D7t.forEach(t),frr=r(uPe," \u2014 "),hW=n(uPe,"A",{href:!0});var G7t=s(hW);mrr=r(G7t,"VanForImageClassification"),G7t.forEach(t),grr=r(uPe," (VAN model)"),uPe.forEach(t),hrr=i(Te),YF=n(Te,"LI",{});var _Pe=s(YF);E1e=n(_Pe,"STRONG",{});var O7t=s(E1e);prr=r(O7t,"vit"),O7t.forEach(t),urr=r(_Pe," \u2014 "),pW=n(_Pe,"A",{href:!0});var V7t=s(pW);_rr=r(V7t,"ViTForImageClassification"),V7t.forEach(t),brr=r(_Pe," (ViT model)"),_Pe.forEach(t),Te.forEach(t),vrr=i(pa),KF=n(pa,"P",{});var bPe=s(KF);Frr=r(bPe,"The model is set in evaluation mode by default using "),C1e=n(bPe,"CODE",{});var X7t=s(C1e);Trr=r(X7t,"model.eval()"),X7t.forEach(t),Mrr=r(bPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w1e=n(bPe,"CODE",{});var z7t=s(w1e);Err=r(z7t,"model.train()"),z7t.forEach(t),bPe.forEach(t),Crr=i(pa),T(ZF.$$.fragment,pa),pa.forEach(t),il.forEach(t),HGe=i(f),_d=n(f,"H2",{class:!0});var eXe=s(_d);eT=n(eXe,"A",{id:!0,class:!0,href:!0});var W7t=s(eT);A1e=n(W7t,"SPAN",{});var Q7t=s(A1e);T(ey.$$.fragment,Q7t),Q7t.forEach(t),W7t.forEach(t),wrr=i(eXe),L1e=n(eXe,"SPAN",{});var H7t=s(L1e);Arr=r(H7t,"AutoModelForVision2Seq"),H7t.forEach(t),eXe.forEach(t),UGe=i(f),Go=n(f,"DIV",{class:!0});var dl=s(Go);T(oy.$$.fragment,dl),Lrr=i(dl),bd=n(dl,"P",{});var xoe=s(bd);yrr=r(xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uW=n(xoe,"A",{href:!0});var U7t=s(uW);xrr=r(U7t,"from_pretrained()"),U7t.forEach(t),$rr=r(xoe," class method or the "),_W=n(xoe,"A",{href:!0});var J7t=s(_W);krr=r(J7t,"from_config()"),J7t.forEach(t),Srr=r(xoe,` class
method.`),xoe.forEach(t),Rrr=i(dl),ry=n(dl,"P",{});var oXe=s(ry);Prr=r(oXe,"This class cannot be instantiated directly using "),y1e=n(oXe,"CODE",{});var Y7t=s(y1e);Brr=r(Y7t,"__init__()"),Y7t.forEach(t),Irr=r(oXe," (throws an error)."),oXe.forEach(t),Nrr=i(dl),bt=n(dl,"DIV",{class:!0});var Hw=s(bt);T(ty.$$.fragment,Hw),qrr=i(Hw),x1e=n(Hw,"P",{});var K7t=s(x1e);jrr=r(K7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),K7t.forEach(t),Drr=i(Hw),vd=n(Hw,"P",{});var $oe=s(vd);Grr=r($oe,`Note:
Loading a model from its configuration file does `),$1e=n($oe,"STRONG",{});var Z7t=s($1e);Orr=r(Z7t,"not"),Z7t.forEach(t),Vrr=r($oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=n($oe,"A",{href:!0});var e9t=s(bW);Xrr=r(e9t,"from_pretrained()"),e9t.forEach(t),zrr=r($oe," to load the model weights."),$oe.forEach(t),Wrr=i(Hw),T(oT.$$.fragment,Hw),Hw.forEach(t),Qrr=i(dl),io=n(dl,"DIV",{class:!0});var ua=s(io);T(ay.$$.fragment,ua),Hrr=i(ua),k1e=n(ua,"P",{});var o9t=s(k1e);Urr=r(o9t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),o9t.forEach(t),Jrr=i(ua),Xa=n(ua,"P",{});var Uw=s(Xa);Yrr=r(Uw,"The model class to instantiate is selected based on the "),S1e=n(Uw,"CODE",{});var r9t=s(S1e);Krr=r(r9t,"model_type"),r9t.forEach(t),Zrr=r(Uw,` property of the config object (either
passed as an argument or loaded from `),R1e=n(Uw,"CODE",{});var t9t=s(R1e);etr=r(t9t,"pretrained_model_name_or_path"),t9t.forEach(t),otr=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=n(Uw,"CODE",{});var a9t=s(P1e);rtr=r(a9t,"pretrained_model_name_or_path"),a9t.forEach(t),ttr=r(Uw,":"),Uw.forEach(t),atr=i(ua),B1e=n(ua,"UL",{});var n9t=s(B1e);rT=n(n9t,"LI",{});var vPe=s(rT);I1e=n(vPe,"STRONG",{});var s9t=s(I1e);ntr=r(s9t,"vision-encoder-decoder"),s9t.forEach(t),str=r(vPe," \u2014 "),vW=n(vPe,"A",{href:!0});var l9t=s(vW);ltr=r(l9t,"VisionEncoderDecoderModel"),l9t.forEach(t),itr=r(vPe," (Vision Encoder decoder model)"),vPe.forEach(t),n9t.forEach(t),dtr=i(ua),tT=n(ua,"P",{});var FPe=s(tT);ctr=r(FPe,"The model is set in evaluation mode by default using "),N1e=n(FPe,"CODE",{});var i9t=s(N1e);ftr=r(i9t,"model.eval()"),i9t.forEach(t),mtr=r(FPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q1e=n(FPe,"CODE",{});var d9t=s(q1e);gtr=r(d9t,"model.train()"),d9t.forEach(t),FPe.forEach(t),htr=i(ua),T(aT.$$.fragment,ua),ua.forEach(t),dl.forEach(t),JGe=i(f),Fd=n(f,"H2",{class:!0});var rXe=s(Fd);nT=n(rXe,"A",{id:!0,class:!0,href:!0});var c9t=s(nT);j1e=n(c9t,"SPAN",{});var f9t=s(j1e);T(ny.$$.fragment,f9t),f9t.forEach(t),c9t.forEach(t),ptr=i(rXe),D1e=n(rXe,"SPAN",{});var m9t=s(D1e);utr=r(m9t,"AutoModelForVisualQuestionAnswering"),m9t.forEach(t),rXe.forEach(t),YGe=i(f),Oo=n(f,"DIV",{class:!0});var cl=s(Oo);T(sy.$$.fragment,cl),_tr=i(cl),Td=n(cl,"P",{});var koe=s(Td);btr=r(koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),FW=n(koe,"A",{href:!0});var g9t=s(FW);vtr=r(g9t,"from_pretrained()"),g9t.forEach(t),Ftr=r(koe," class method or the "),TW=n(koe,"A",{href:!0});var h9t=s(TW);Ttr=r(h9t,"from_config()"),h9t.forEach(t),Mtr=r(koe,` class
method.`),koe.forEach(t),Etr=i(cl),ly=n(cl,"P",{});var tXe=s(ly);Ctr=r(tXe,"This class cannot be instantiated directly using "),G1e=n(tXe,"CODE",{});var p9t=s(G1e);wtr=r(p9t,"__init__()"),p9t.forEach(t),Atr=r(tXe," (throws an error)."),tXe.forEach(t),Ltr=i(cl),vt=n(cl,"DIV",{class:!0});var Jw=s(vt);T(iy.$$.fragment,Jw),ytr=i(Jw),O1e=n(Jw,"P",{});var u9t=s(O1e);xtr=r(u9t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),u9t.forEach(t),$tr=i(Jw),Md=n(Jw,"P",{});var Soe=s(Md);ktr=r(Soe,`Note:
Loading a model from its configuration file does `),V1e=n(Soe,"STRONG",{});var _9t=s(V1e);Str=r(_9t,"not"),_9t.forEach(t),Rtr=r(Soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n(Soe,"A",{href:!0});var b9t=s(MW);Ptr=r(b9t,"from_pretrained()"),b9t.forEach(t),Btr=r(Soe," to load the model weights."),Soe.forEach(t),Itr=i(Jw),T(sT.$$.fragment,Jw),Jw.forEach(t),Ntr=i(cl),co=n(cl,"DIV",{class:!0});var _a=s(co);T(dy.$$.fragment,_a),qtr=i(_a),X1e=n(_a,"P",{});var v9t=s(X1e);jtr=r(v9t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),v9t.forEach(t),Dtr=i(_a),za=n(_a,"P",{});var Yw=s(za);Gtr=r(Yw,"The model class to instantiate is selected based on the "),z1e=n(Yw,"CODE",{});var F9t=s(z1e);Otr=r(F9t,"model_type"),F9t.forEach(t),Vtr=r(Yw,` property of the config object (either
passed as an argument or loaded from `),W1e=n(Yw,"CODE",{});var T9t=s(W1e);Xtr=r(T9t,"pretrained_model_name_or_path"),T9t.forEach(t),ztr=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=n(Yw,"CODE",{});var M9t=s(Q1e);Wtr=r(M9t,"pretrained_model_name_or_path"),M9t.forEach(t),Qtr=r(Yw,":"),Yw.forEach(t),Htr=i(_a),H1e=n(_a,"UL",{});var E9t=s(H1e);lT=n(E9t,"LI",{});var TPe=s(lT);U1e=n(TPe,"STRONG",{});var C9t=s(U1e);Utr=r(C9t,"vilt"),C9t.forEach(t),Jtr=r(TPe," \u2014 "),EW=n(TPe,"A",{href:!0});var w9t=s(EW);Ytr=r(w9t,"ViltForQuestionAnswering"),w9t.forEach(t),Ktr=r(TPe," (ViLT model)"),TPe.forEach(t),E9t.forEach(t),Ztr=i(_a),iT=n(_a,"P",{});var MPe=s(iT);ear=r(MPe,"The model is set in evaluation mode by default using "),J1e=n(MPe,"CODE",{});var A9t=s(J1e);oar=r(A9t,"model.eval()"),A9t.forEach(t),rar=r(MPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y1e=n(MPe,"CODE",{});var L9t=s(Y1e);tar=r(L9t,"model.train()"),L9t.forEach(t),MPe.forEach(t),aar=i(_a),T(dT.$$.fragment,_a),_a.forEach(t),cl.forEach(t),KGe=i(f),Ed=n(f,"H2",{class:!0});var aXe=s(Ed);cT=n(aXe,"A",{id:!0,class:!0,href:!0});var y9t=s(cT);K1e=n(y9t,"SPAN",{});var x9t=s(K1e);T(cy.$$.fragment,x9t),x9t.forEach(t),y9t.forEach(t),nar=i(aXe),Z1e=n(aXe,"SPAN",{});var $9t=s(Z1e);sar=r($9t,"AutoModelForAudioClassification"),$9t.forEach(t),aXe.forEach(t),ZGe=i(f),Vo=n(f,"DIV",{class:!0});var fl=s(Vo);T(fy.$$.fragment,fl),lar=i(fl),Cd=n(fl,"P",{});var Roe=s(Cd);iar=r(Roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),CW=n(Roe,"A",{href:!0});var k9t=s(CW);dar=r(k9t,"from_pretrained()"),k9t.forEach(t),car=r(Roe," class method or the "),wW=n(Roe,"A",{href:!0});var S9t=s(wW);far=r(S9t,"from_config()"),S9t.forEach(t),mar=r(Roe,` class
method.`),Roe.forEach(t),gar=i(fl),my=n(fl,"P",{});var nXe=s(my);har=r(nXe,"This class cannot be instantiated directly using "),e2e=n(nXe,"CODE",{});var R9t=s(e2e);par=r(R9t,"__init__()"),R9t.forEach(t),uar=r(nXe," (throws an error)."),nXe.forEach(t),_ar=i(fl),Ft=n(fl,"DIV",{class:!0});var Kw=s(Ft);T(gy.$$.fragment,Kw),bar=i(Kw),o2e=n(Kw,"P",{});var P9t=s(o2e);Far=r(P9t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),P9t.forEach(t),Tar=i(Kw),wd=n(Kw,"P",{});var Poe=s(wd);Mar=r(Poe,`Note:
Loading a model from its configuration file does `),r2e=n(Poe,"STRONG",{});var B9t=s(r2e);Ear=r(B9t,"not"),B9t.forEach(t),Car=r(Poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=n(Poe,"A",{href:!0});var I9t=s(AW);war=r(I9t,"from_pretrained()"),I9t.forEach(t),Aar=r(Poe," to load the model weights."),Poe.forEach(t),Lar=i(Kw),T(fT.$$.fragment,Kw),Kw.forEach(t),yar=i(fl),fo=n(fl,"DIV",{class:!0});var ba=s(fo);T(hy.$$.fragment,ba),xar=i(ba),t2e=n(ba,"P",{});var N9t=s(t2e);$ar=r(N9t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),N9t.forEach(t),kar=i(ba),Wa=n(ba,"P",{});var Zw=s(Wa);Sar=r(Zw,"The model class to instantiate is selected based on the "),a2e=n(Zw,"CODE",{});var q9t=s(a2e);Rar=r(q9t,"model_type"),q9t.forEach(t),Par=r(Zw,` property of the config object (either
passed as an argument or loaded from `),n2e=n(Zw,"CODE",{});var j9t=s(n2e);Bar=r(j9t,"pretrained_model_name_or_path"),j9t.forEach(t),Iar=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=n(Zw,"CODE",{});var D9t=s(s2e);Nar=r(D9t,"pretrained_model_name_or_path"),D9t.forEach(t),qar=r(Zw,":"),Zw.forEach(t),jar=i(ba),Pe=n(ba,"UL",{});var ze=s(Pe);mT=n(ze,"LI",{});var EPe=s(mT);l2e=n(EPe,"STRONG",{});var G9t=s(l2e);Dar=r(G9t,"data2vec-audio"),G9t.forEach(t),Gar=r(EPe," \u2014 "),LW=n(EPe,"A",{href:!0});var O9t=s(LW);Oar=r(O9t,"Data2VecAudioForSequenceClassification"),O9t.forEach(t),Var=r(EPe," (Data2VecAudio model)"),EPe.forEach(t),Xar=i(ze),gT=n(ze,"LI",{});var CPe=s(gT);i2e=n(CPe,"STRONG",{});var V9t=s(i2e);zar=r(V9t,"hubert"),V9t.forEach(t),War=r(CPe," \u2014 "),yW=n(CPe,"A",{href:!0});var X9t=s(yW);Qar=r(X9t,"HubertForSequenceClassification"),X9t.forEach(t),Har=r(CPe," (Hubert model)"),CPe.forEach(t),Uar=i(ze),hT=n(ze,"LI",{});var wPe=s(hT);d2e=n(wPe,"STRONG",{});var z9t=s(d2e);Jar=r(z9t,"sew"),z9t.forEach(t),Yar=r(wPe," \u2014 "),xW=n(wPe,"A",{href:!0});var W9t=s(xW);Kar=r(W9t,"SEWForSequenceClassification"),W9t.forEach(t),Zar=r(wPe," (SEW model)"),wPe.forEach(t),enr=i(ze),pT=n(ze,"LI",{});var APe=s(pT);c2e=n(APe,"STRONG",{});var Q9t=s(c2e);onr=r(Q9t,"sew-d"),Q9t.forEach(t),rnr=r(APe," \u2014 "),$W=n(APe,"A",{href:!0});var H9t=s($W);tnr=r(H9t,"SEWDForSequenceClassification"),H9t.forEach(t),anr=r(APe," (SEW-D model)"),APe.forEach(t),nnr=i(ze),uT=n(ze,"LI",{});var LPe=s(uT);f2e=n(LPe,"STRONG",{});var U9t=s(f2e);snr=r(U9t,"unispeech"),U9t.forEach(t),lnr=r(LPe," \u2014 "),kW=n(LPe,"A",{href:!0});var J9t=s(kW);inr=r(J9t,"UniSpeechForSequenceClassification"),J9t.forEach(t),dnr=r(LPe," (UniSpeech model)"),LPe.forEach(t),cnr=i(ze),_T=n(ze,"LI",{});var yPe=s(_T);m2e=n(yPe,"STRONG",{});var Y9t=s(m2e);fnr=r(Y9t,"unispeech-sat"),Y9t.forEach(t),mnr=r(yPe," \u2014 "),SW=n(yPe,"A",{href:!0});var K9t=s(SW);gnr=r(K9t,"UniSpeechSatForSequenceClassification"),K9t.forEach(t),hnr=r(yPe," (UniSpeechSat model)"),yPe.forEach(t),pnr=i(ze),bT=n(ze,"LI",{});var xPe=s(bT);g2e=n(xPe,"STRONG",{});var Z9t=s(g2e);unr=r(Z9t,"wav2vec2"),Z9t.forEach(t),_nr=r(xPe," \u2014 "),RW=n(xPe,"A",{href:!0});var eMt=s(RW);bnr=r(eMt,"Wav2Vec2ForSequenceClassification"),eMt.forEach(t),vnr=r(xPe," (Wav2Vec2 model)"),xPe.forEach(t),Fnr=i(ze),vT=n(ze,"LI",{});var $Pe=s(vT);h2e=n($Pe,"STRONG",{});var oMt=s(h2e);Tnr=r(oMt,"wav2vec2-conformer"),oMt.forEach(t),Mnr=r($Pe," \u2014 "),PW=n($Pe,"A",{href:!0});var rMt=s(PW);Enr=r(rMt,"Wav2Vec2ConformerForSequenceClassification"),rMt.forEach(t),Cnr=r($Pe," (Wav2Vec2-Conformer model)"),$Pe.forEach(t),wnr=i(ze),FT=n(ze,"LI",{});var kPe=s(FT);p2e=n(kPe,"STRONG",{});var tMt=s(p2e);Anr=r(tMt,"wavlm"),tMt.forEach(t),Lnr=r(kPe," \u2014 "),BW=n(kPe,"A",{href:!0});var aMt=s(BW);ynr=r(aMt,"WavLMForSequenceClassification"),aMt.forEach(t),xnr=r(kPe," (WavLM model)"),kPe.forEach(t),ze.forEach(t),$nr=i(ba),TT=n(ba,"P",{});var SPe=s(TT);knr=r(SPe,"The model is set in evaluation mode by default using "),u2e=n(SPe,"CODE",{});var nMt=s(u2e);Snr=r(nMt,"model.eval()"),nMt.forEach(t),Rnr=r(SPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_2e=n(SPe,"CODE",{});var sMt=s(_2e);Pnr=r(sMt,"model.train()"),sMt.forEach(t),SPe.forEach(t),Bnr=i(ba),T(MT.$$.fragment,ba),ba.forEach(t),fl.forEach(t),eOe=i(f),Ad=n(f,"H2",{class:!0});var sXe=s(Ad);ET=n(sXe,"A",{id:!0,class:!0,href:!0});var lMt=s(ET);b2e=n(lMt,"SPAN",{});var iMt=s(b2e);T(py.$$.fragment,iMt),iMt.forEach(t),lMt.forEach(t),Inr=i(sXe),v2e=n(sXe,"SPAN",{});var dMt=s(v2e);Nnr=r(dMt,"AutoModelForAudioFrameClassification"),dMt.forEach(t),sXe.forEach(t),oOe=i(f),Xo=n(f,"DIV",{class:!0});var ml=s(Xo);T(uy.$$.fragment,ml),qnr=i(ml),Ld=n(ml,"P",{});var Boe=s(Ld);jnr=r(Boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),IW=n(Boe,"A",{href:!0});var cMt=s(IW);Dnr=r(cMt,"from_pretrained()"),cMt.forEach(t),Gnr=r(Boe," class method or the "),NW=n(Boe,"A",{href:!0});var fMt=s(NW);Onr=r(fMt,"from_config()"),fMt.forEach(t),Vnr=r(Boe,` class
method.`),Boe.forEach(t),Xnr=i(ml),_y=n(ml,"P",{});var lXe=s(_y);znr=r(lXe,"This class cannot be instantiated directly using "),F2e=n(lXe,"CODE",{});var mMt=s(F2e);Wnr=r(mMt,"__init__()"),mMt.forEach(t),Qnr=r(lXe," (throws an error)."),lXe.forEach(t),Hnr=i(ml),Tt=n(ml,"DIV",{class:!0});var eA=s(Tt);T(by.$$.fragment,eA),Unr=i(eA),T2e=n(eA,"P",{});var gMt=s(T2e);Jnr=r(gMt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),gMt.forEach(t),Ynr=i(eA),yd=n(eA,"P",{});var Ioe=s(yd);Knr=r(Ioe,`Note:
Loading a model from its configuration file does `),M2e=n(Ioe,"STRONG",{});var hMt=s(M2e);Znr=r(hMt,"not"),hMt.forEach(t),esr=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=n(Ioe,"A",{href:!0});var pMt=s(qW);osr=r(pMt,"from_pretrained()"),pMt.forEach(t),rsr=r(Ioe," to load the model weights."),Ioe.forEach(t),tsr=i(eA),T(CT.$$.fragment,eA),eA.forEach(t),asr=i(ml),mo=n(ml,"DIV",{class:!0});var va=s(mo);T(vy.$$.fragment,va),nsr=i(va),E2e=n(va,"P",{});var uMt=s(E2e);ssr=r(uMt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),uMt.forEach(t),lsr=i(va),Qa=n(va,"P",{});var oA=s(Qa);isr=r(oA,"The model class to instantiate is selected based on the "),C2e=n(oA,"CODE",{});var _Mt=s(C2e);dsr=r(_Mt,"model_type"),_Mt.forEach(t),csr=r(oA,` property of the config object (either
passed as an argument or loaded from `),w2e=n(oA,"CODE",{});var bMt=s(w2e);fsr=r(bMt,"pretrained_model_name_or_path"),bMt.forEach(t),msr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=n(oA,"CODE",{});var vMt=s(A2e);gsr=r(vMt,"pretrained_model_name_or_path"),vMt.forEach(t),hsr=r(oA,":"),oA.forEach(t),psr=i(va),et=n(va,"UL",{});var gl=s(et);wT=n(gl,"LI",{});var RPe=s(wT);L2e=n(RPe,"STRONG",{});var FMt=s(L2e);usr=r(FMt,"data2vec-audio"),FMt.forEach(t),_sr=r(RPe," \u2014 "),jW=n(RPe,"A",{href:!0});var TMt=s(jW);bsr=r(TMt,"Data2VecAudioForAudioFrameClassification"),TMt.forEach(t),vsr=r(RPe," (Data2VecAudio model)"),RPe.forEach(t),Fsr=i(gl),AT=n(gl,"LI",{});var PPe=s(AT);y2e=n(PPe,"STRONG",{});var MMt=s(y2e);Tsr=r(MMt,"unispeech-sat"),MMt.forEach(t),Msr=r(PPe," \u2014 "),DW=n(PPe,"A",{href:!0});var EMt=s(DW);Esr=r(EMt,"UniSpeechSatForAudioFrameClassification"),EMt.forEach(t),Csr=r(PPe," (UniSpeechSat model)"),PPe.forEach(t),wsr=i(gl),LT=n(gl,"LI",{});var BPe=s(LT);x2e=n(BPe,"STRONG",{});var CMt=s(x2e);Asr=r(CMt,"wav2vec2"),CMt.forEach(t),Lsr=r(BPe," \u2014 "),GW=n(BPe,"A",{href:!0});var wMt=s(GW);ysr=r(wMt,"Wav2Vec2ForAudioFrameClassification"),wMt.forEach(t),xsr=r(BPe," (Wav2Vec2 model)"),BPe.forEach(t),$sr=i(gl),yT=n(gl,"LI",{});var IPe=s(yT);$2e=n(IPe,"STRONG",{});var AMt=s($2e);ksr=r(AMt,"wav2vec2-conformer"),AMt.forEach(t),Ssr=r(IPe," \u2014 "),OW=n(IPe,"A",{href:!0});var LMt=s(OW);Rsr=r(LMt,"Wav2Vec2ConformerForAudioFrameClassification"),LMt.forEach(t),Psr=r(IPe," (Wav2Vec2-Conformer model)"),IPe.forEach(t),Bsr=i(gl),xT=n(gl,"LI",{});var NPe=s(xT);k2e=n(NPe,"STRONG",{});var yMt=s(k2e);Isr=r(yMt,"wavlm"),yMt.forEach(t),Nsr=r(NPe," \u2014 "),VW=n(NPe,"A",{href:!0});var xMt=s(VW);qsr=r(xMt,"WavLMForAudioFrameClassification"),xMt.forEach(t),jsr=r(NPe," (WavLM model)"),NPe.forEach(t),gl.forEach(t),Dsr=i(va),$T=n(va,"P",{});var qPe=s($T);Gsr=r(qPe,"The model is set in evaluation mode by default using "),S2e=n(qPe,"CODE",{});var $Mt=s(S2e);Osr=r($Mt,"model.eval()"),$Mt.forEach(t),Vsr=r(qPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R2e=n(qPe,"CODE",{});var kMt=s(R2e);Xsr=r(kMt,"model.train()"),kMt.forEach(t),qPe.forEach(t),zsr=i(va),T(kT.$$.fragment,va),va.forEach(t),ml.forEach(t),rOe=i(f),xd=n(f,"H2",{class:!0});var iXe=s(xd);ST=n(iXe,"A",{id:!0,class:!0,href:!0});var SMt=s(ST);P2e=n(SMt,"SPAN",{});var RMt=s(P2e);T(Fy.$$.fragment,RMt),RMt.forEach(t),SMt.forEach(t),Wsr=i(iXe),B2e=n(iXe,"SPAN",{});var PMt=s(B2e);Qsr=r(PMt,"AutoModelForCTC"),PMt.forEach(t),iXe.forEach(t),tOe=i(f),zo=n(f,"DIV",{class:!0});var hl=s(zo);T(Ty.$$.fragment,hl),Hsr=i(hl),$d=n(hl,"P",{});var Noe=s($d);Usr=r(Noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),XW=n(Noe,"A",{href:!0});var BMt=s(XW);Jsr=r(BMt,"from_pretrained()"),BMt.forEach(t),Ysr=r(Noe," class method or the "),zW=n(Noe,"A",{href:!0});var IMt=s(zW);Ksr=r(IMt,"from_config()"),IMt.forEach(t),Zsr=r(Noe,` class
method.`),Noe.forEach(t),elr=i(hl),My=n(hl,"P",{});var dXe=s(My);olr=r(dXe,"This class cannot be instantiated directly using "),I2e=n(dXe,"CODE",{});var NMt=s(I2e);rlr=r(NMt,"__init__()"),NMt.forEach(t),tlr=r(dXe," (throws an error)."),dXe.forEach(t),alr=i(hl),Mt=n(hl,"DIV",{class:!0});var rA=s(Mt);T(Ey.$$.fragment,rA),nlr=i(rA),N2e=n(rA,"P",{});var qMt=s(N2e);slr=r(qMt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),qMt.forEach(t),llr=i(rA),kd=n(rA,"P",{});var qoe=s(kd);ilr=r(qoe,`Note:
Loading a model from its configuration file does `),q2e=n(qoe,"STRONG",{});var jMt=s(q2e);dlr=r(jMt,"not"),jMt.forEach(t),clr=r(qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=n(qoe,"A",{href:!0});var DMt=s(WW);flr=r(DMt,"from_pretrained()"),DMt.forEach(t),mlr=r(qoe," to load the model weights."),qoe.forEach(t),glr=i(rA),T(RT.$$.fragment,rA),rA.forEach(t),hlr=i(hl),go=n(hl,"DIV",{class:!0});var Fa=s(go);T(Cy.$$.fragment,Fa),plr=i(Fa),j2e=n(Fa,"P",{});var GMt=s(j2e);ulr=r(GMt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),GMt.forEach(t),_lr=i(Fa),Ha=n(Fa,"P",{});var tA=s(Ha);blr=r(tA,"The model class to instantiate is selected based on the "),D2e=n(tA,"CODE",{});var OMt=s(D2e);vlr=r(OMt,"model_type"),OMt.forEach(t),Flr=r(tA,` property of the config object (either
passed as an argument or loaded from `),G2e=n(tA,"CODE",{});var VMt=s(G2e);Tlr=r(VMt,"pretrained_model_name_or_path"),VMt.forEach(t),Mlr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=n(tA,"CODE",{});var XMt=s(O2e);Elr=r(XMt,"pretrained_model_name_or_path"),XMt.forEach(t),Clr=r(tA,":"),tA.forEach(t),wlr=i(Fa),Le=n(Fa,"UL",{});var Be=s(Le);PT=n(Be,"LI",{});var jPe=s(PT);V2e=n(jPe,"STRONG",{});var zMt=s(V2e);Alr=r(zMt,"data2vec-audio"),zMt.forEach(t),Llr=r(jPe," \u2014 "),QW=n(jPe,"A",{href:!0});var WMt=s(QW);ylr=r(WMt,"Data2VecAudioForCTC"),WMt.forEach(t),xlr=r(jPe," (Data2VecAudio model)"),jPe.forEach(t),$lr=i(Be),BT=n(Be,"LI",{});var DPe=s(BT);X2e=n(DPe,"STRONG",{});var QMt=s(X2e);klr=r(QMt,"hubert"),QMt.forEach(t),Slr=r(DPe," \u2014 "),HW=n(DPe,"A",{href:!0});var HMt=s(HW);Rlr=r(HMt,"HubertForCTC"),HMt.forEach(t),Plr=r(DPe," (Hubert model)"),DPe.forEach(t),Blr=i(Be),IT=n(Be,"LI",{});var GPe=s(IT);z2e=n(GPe,"STRONG",{});var UMt=s(z2e);Ilr=r(UMt,"mctct"),UMt.forEach(t),Nlr=r(GPe," \u2014 "),UW=n(GPe,"A",{href:!0});var JMt=s(UW);qlr=r(JMt,"MCTCTForCTC"),JMt.forEach(t),jlr=r(GPe," (M-CTC-T model)"),GPe.forEach(t),Dlr=i(Be),NT=n(Be,"LI",{});var OPe=s(NT);W2e=n(OPe,"STRONG",{});var YMt=s(W2e);Glr=r(YMt,"sew"),YMt.forEach(t),Olr=r(OPe," \u2014 "),JW=n(OPe,"A",{href:!0});var KMt=s(JW);Vlr=r(KMt,"SEWForCTC"),KMt.forEach(t),Xlr=r(OPe," (SEW model)"),OPe.forEach(t),zlr=i(Be),qT=n(Be,"LI",{});var VPe=s(qT);Q2e=n(VPe,"STRONG",{});var ZMt=s(Q2e);Wlr=r(ZMt,"sew-d"),ZMt.forEach(t),Qlr=r(VPe," \u2014 "),YW=n(VPe,"A",{href:!0});var eEt=s(YW);Hlr=r(eEt,"SEWDForCTC"),eEt.forEach(t),Ulr=r(VPe," (SEW-D model)"),VPe.forEach(t),Jlr=i(Be),jT=n(Be,"LI",{});var XPe=s(jT);H2e=n(XPe,"STRONG",{});var oEt=s(H2e);Ylr=r(oEt,"unispeech"),oEt.forEach(t),Klr=r(XPe," \u2014 "),KW=n(XPe,"A",{href:!0});var rEt=s(KW);Zlr=r(rEt,"UniSpeechForCTC"),rEt.forEach(t),eir=r(XPe," (UniSpeech model)"),XPe.forEach(t),oir=i(Be),DT=n(Be,"LI",{});var zPe=s(DT);U2e=n(zPe,"STRONG",{});var tEt=s(U2e);rir=r(tEt,"unispeech-sat"),tEt.forEach(t),tir=r(zPe," \u2014 "),ZW=n(zPe,"A",{href:!0});var aEt=s(ZW);air=r(aEt,"UniSpeechSatForCTC"),aEt.forEach(t),nir=r(zPe," (UniSpeechSat model)"),zPe.forEach(t),sir=i(Be),GT=n(Be,"LI",{});var WPe=s(GT);J2e=n(WPe,"STRONG",{});var nEt=s(J2e);lir=r(nEt,"wav2vec2"),nEt.forEach(t),iir=r(WPe," \u2014 "),eQ=n(WPe,"A",{href:!0});var sEt=s(eQ);dir=r(sEt,"Wav2Vec2ForCTC"),sEt.forEach(t),cir=r(WPe," (Wav2Vec2 model)"),WPe.forEach(t),fir=i(Be),OT=n(Be,"LI",{});var QPe=s(OT);Y2e=n(QPe,"STRONG",{});var lEt=s(Y2e);mir=r(lEt,"wav2vec2-conformer"),lEt.forEach(t),gir=r(QPe," \u2014 "),oQ=n(QPe,"A",{href:!0});var iEt=s(oQ);hir=r(iEt,"Wav2Vec2ConformerForCTC"),iEt.forEach(t),pir=r(QPe," (Wav2Vec2-Conformer model)"),QPe.forEach(t),uir=i(Be),VT=n(Be,"LI",{});var HPe=s(VT);K2e=n(HPe,"STRONG",{});var dEt=s(K2e);_ir=r(dEt,"wavlm"),dEt.forEach(t),bir=r(HPe," \u2014 "),rQ=n(HPe,"A",{href:!0});var cEt=s(rQ);vir=r(cEt,"WavLMForCTC"),cEt.forEach(t),Fir=r(HPe," (WavLM model)"),HPe.forEach(t),Be.forEach(t),Tir=i(Fa),XT=n(Fa,"P",{});var UPe=s(XT);Mir=r(UPe,"The model is set in evaluation mode by default using "),Z2e=n(UPe,"CODE",{});var fEt=s(Z2e);Eir=r(fEt,"model.eval()"),fEt.forEach(t),Cir=r(UPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ebe=n(UPe,"CODE",{});var mEt=s(ebe);wir=r(mEt,"model.train()"),mEt.forEach(t),UPe.forEach(t),Air=i(Fa),T(zT.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),aOe=i(f),Sd=n(f,"H2",{class:!0});var cXe=s(Sd);WT=n(cXe,"A",{id:!0,class:!0,href:!0});var gEt=s(WT);obe=n(gEt,"SPAN",{});var hEt=s(obe);T(wy.$$.fragment,hEt),hEt.forEach(t),gEt.forEach(t),Lir=i(cXe),rbe=n(cXe,"SPAN",{});var pEt=s(rbe);yir=r(pEt,"AutoModelForSpeechSeq2Seq"),pEt.forEach(t),cXe.forEach(t),nOe=i(f),Wo=n(f,"DIV",{class:!0});var pl=s(Wo);T(Ay.$$.fragment,pl),xir=i(pl),Rd=n(pl,"P",{});var joe=s(Rd);$ir=r(joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),tQ=n(joe,"A",{href:!0});var uEt=s(tQ);kir=r(uEt,"from_pretrained()"),uEt.forEach(t),Sir=r(joe," class method or the "),aQ=n(joe,"A",{href:!0});var _Et=s(aQ);Rir=r(_Et,"from_config()"),_Et.forEach(t),Pir=r(joe,` class
method.`),joe.forEach(t),Bir=i(pl),Ly=n(pl,"P",{});var fXe=s(Ly);Iir=r(fXe,"This class cannot be instantiated directly using "),tbe=n(fXe,"CODE",{});var bEt=s(tbe);Nir=r(bEt,"__init__()"),bEt.forEach(t),qir=r(fXe," (throws an error)."),fXe.forEach(t),jir=i(pl),Et=n(pl,"DIV",{class:!0});var aA=s(Et);T(yy.$$.fragment,aA),Dir=i(aA),abe=n(aA,"P",{});var vEt=s(abe);Gir=r(vEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),vEt.forEach(t),Oir=i(aA),Pd=n(aA,"P",{});var Doe=s(Pd);Vir=r(Doe,`Note:
Loading a model from its configuration file does `),nbe=n(Doe,"STRONG",{});var FEt=s(nbe);Xir=r(FEt,"not"),FEt.forEach(t),zir=r(Doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=n(Doe,"A",{href:!0});var TEt=s(nQ);Wir=r(TEt,"from_pretrained()"),TEt.forEach(t),Qir=r(Doe," to load the model weights."),Doe.forEach(t),Hir=i(aA),T(QT.$$.fragment,aA),aA.forEach(t),Uir=i(pl),ho=n(pl,"DIV",{class:!0});var Ta=s(ho);T(xy.$$.fragment,Ta),Jir=i(Ta),sbe=n(Ta,"P",{});var MEt=s(sbe);Yir=r(MEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),MEt.forEach(t),Kir=i(Ta),Ua=n(Ta,"P",{});var nA=s(Ua);Zir=r(nA,"The model class to instantiate is selected based on the "),lbe=n(nA,"CODE",{});var EEt=s(lbe);edr=r(EEt,"model_type"),EEt.forEach(t),odr=r(nA,` property of the config object (either
passed as an argument or loaded from `),ibe=n(nA,"CODE",{});var CEt=s(ibe);rdr=r(CEt,"pretrained_model_name_or_path"),CEt.forEach(t),tdr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=n(nA,"CODE",{});var wEt=s(dbe);adr=r(wEt,"pretrained_model_name_or_path"),wEt.forEach(t),ndr=r(nA,":"),nA.forEach(t),sdr=i(Ta),$y=n(Ta,"UL",{});var mXe=s($y);HT=n(mXe,"LI",{});var JPe=s(HT);cbe=n(JPe,"STRONG",{});var AEt=s(cbe);ldr=r(AEt,"speech-encoder-decoder"),AEt.forEach(t),idr=r(JPe," \u2014 "),sQ=n(JPe,"A",{href:!0});var LEt=s(sQ);ddr=r(LEt,"SpeechEncoderDecoderModel"),LEt.forEach(t),cdr=r(JPe," (Speech Encoder decoder model)"),JPe.forEach(t),fdr=i(mXe),UT=n(mXe,"LI",{});var YPe=s(UT);fbe=n(YPe,"STRONG",{});var yEt=s(fbe);mdr=r(yEt,"speech_to_text"),yEt.forEach(t),gdr=r(YPe," \u2014 "),lQ=n(YPe,"A",{href:!0});var xEt=s(lQ);hdr=r(xEt,"Speech2TextForConditionalGeneration"),xEt.forEach(t),pdr=r(YPe," (Speech2Text model)"),YPe.forEach(t),mXe.forEach(t),udr=i(Ta),JT=n(Ta,"P",{});var KPe=s(JT);_dr=r(KPe,"The model is set in evaluation mode by default using "),mbe=n(KPe,"CODE",{});var $Et=s(mbe);bdr=r($Et,"model.eval()"),$Et.forEach(t),vdr=r(KPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gbe=n(KPe,"CODE",{});var kEt=s(gbe);Fdr=r(kEt,"model.train()"),kEt.forEach(t),KPe.forEach(t),Tdr=i(Ta),T(YT.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),sOe=i(f),Bd=n(f,"H2",{class:!0});var gXe=s(Bd);KT=n(gXe,"A",{id:!0,class:!0,href:!0});var SEt=s(KT);hbe=n(SEt,"SPAN",{});var REt=s(hbe);T(ky.$$.fragment,REt),REt.forEach(t),SEt.forEach(t),Mdr=i(gXe),pbe=n(gXe,"SPAN",{});var PEt=s(pbe);Edr=r(PEt,"AutoModelForAudioXVector"),PEt.forEach(t),gXe.forEach(t),lOe=i(f),Qo=n(f,"DIV",{class:!0});var ul=s(Qo);T(Sy.$$.fragment,ul),Cdr=i(ul),Id=n(ul,"P",{});var Goe=s(Id);wdr=r(Goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),iQ=n(Goe,"A",{href:!0});var BEt=s(iQ);Adr=r(BEt,"from_pretrained()"),BEt.forEach(t),Ldr=r(Goe," class method or the "),dQ=n(Goe,"A",{href:!0});var IEt=s(dQ);ydr=r(IEt,"from_config()"),IEt.forEach(t),xdr=r(Goe,` class
method.`),Goe.forEach(t),$dr=i(ul),Ry=n(ul,"P",{});var hXe=s(Ry);kdr=r(hXe,"This class cannot be instantiated directly using "),ube=n(hXe,"CODE",{});var NEt=s(ube);Sdr=r(NEt,"__init__()"),NEt.forEach(t),Rdr=r(hXe," (throws an error)."),hXe.forEach(t),Pdr=i(ul),Ct=n(ul,"DIV",{class:!0});var sA=s(Ct);T(Py.$$.fragment,sA),Bdr=i(sA),_be=n(sA,"P",{});var qEt=s(_be);Idr=r(qEt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),qEt.forEach(t),Ndr=i(sA),Nd=n(sA,"P",{});var Ooe=s(Nd);qdr=r(Ooe,`Note:
Loading a model from its configuration file does `),bbe=n(Ooe,"STRONG",{});var jEt=s(bbe);jdr=r(jEt,"not"),jEt.forEach(t),Ddr=r(Ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=n(Ooe,"A",{href:!0});var DEt=s(cQ);Gdr=r(DEt,"from_pretrained()"),DEt.forEach(t),Odr=r(Ooe," to load the model weights."),Ooe.forEach(t),Vdr=i(sA),T(ZT.$$.fragment,sA),sA.forEach(t),Xdr=i(ul),po=n(ul,"DIV",{class:!0});var Ma=s(po);T(By.$$.fragment,Ma),zdr=i(Ma),vbe=n(Ma,"P",{});var GEt=s(vbe);Wdr=r(GEt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),GEt.forEach(t),Qdr=i(Ma),Ja=n(Ma,"P",{});var lA=s(Ja);Hdr=r(lA,"The model class to instantiate is selected based on the "),Fbe=n(lA,"CODE",{});var OEt=s(Fbe);Udr=r(OEt,"model_type"),OEt.forEach(t),Jdr=r(lA,` property of the config object (either
passed as an argument or loaded from `),Tbe=n(lA,"CODE",{});var VEt=s(Tbe);Ydr=r(VEt,"pretrained_model_name_or_path"),VEt.forEach(t),Kdr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=n(lA,"CODE",{});var XEt=s(Mbe);Zdr=r(XEt,"pretrained_model_name_or_path"),XEt.forEach(t),ecr=r(lA,":"),lA.forEach(t),ocr=i(Ma),ot=n(Ma,"UL",{});var _l=s(ot);e7=n(_l,"LI",{});var ZPe=s(e7);Ebe=n(ZPe,"STRONG",{});var zEt=s(Ebe);rcr=r(zEt,"data2vec-audio"),zEt.forEach(t),tcr=r(ZPe," \u2014 "),fQ=n(ZPe,"A",{href:!0});var WEt=s(fQ);acr=r(WEt,"Data2VecAudioForXVector"),WEt.forEach(t),ncr=r(ZPe," (Data2VecAudio model)"),ZPe.forEach(t),scr=i(_l),o7=n(_l,"LI",{});var eBe=s(o7);Cbe=n(eBe,"STRONG",{});var QEt=s(Cbe);lcr=r(QEt,"unispeech-sat"),QEt.forEach(t),icr=r(eBe," \u2014 "),mQ=n(eBe,"A",{href:!0});var HEt=s(mQ);dcr=r(HEt,"UniSpeechSatForXVector"),HEt.forEach(t),ccr=r(eBe," (UniSpeechSat model)"),eBe.forEach(t),fcr=i(_l),r7=n(_l,"LI",{});var oBe=s(r7);wbe=n(oBe,"STRONG",{});var UEt=s(wbe);mcr=r(UEt,"wav2vec2"),UEt.forEach(t),gcr=r(oBe," \u2014 "),gQ=n(oBe,"A",{href:!0});var JEt=s(gQ);hcr=r(JEt,"Wav2Vec2ForXVector"),JEt.forEach(t),pcr=r(oBe," (Wav2Vec2 model)"),oBe.forEach(t),ucr=i(_l),t7=n(_l,"LI",{});var rBe=s(t7);Abe=n(rBe,"STRONG",{});var YEt=s(Abe);_cr=r(YEt,"wav2vec2-conformer"),YEt.forEach(t),bcr=r(rBe," \u2014 "),hQ=n(rBe,"A",{href:!0});var KEt=s(hQ);vcr=r(KEt,"Wav2Vec2ConformerForXVector"),KEt.forEach(t),Fcr=r(rBe," (Wav2Vec2-Conformer model)"),rBe.forEach(t),Tcr=i(_l),a7=n(_l,"LI",{});var tBe=s(a7);Lbe=n(tBe,"STRONG",{});var ZEt=s(Lbe);Mcr=r(ZEt,"wavlm"),ZEt.forEach(t),Ecr=r(tBe," \u2014 "),pQ=n(tBe,"A",{href:!0});var e4t=s(pQ);Ccr=r(e4t,"WavLMForXVector"),e4t.forEach(t),wcr=r(tBe," (WavLM model)"),tBe.forEach(t),_l.forEach(t),Acr=i(Ma),n7=n(Ma,"P",{});var aBe=s(n7);Lcr=r(aBe,"The model is set in evaluation mode by default using "),ybe=n(aBe,"CODE",{});var o4t=s(ybe);ycr=r(o4t,"model.eval()"),o4t.forEach(t),xcr=r(aBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xbe=n(aBe,"CODE",{});var r4t=s(xbe);$cr=r(r4t,"model.train()"),r4t.forEach(t),aBe.forEach(t),kcr=i(Ma),T(s7.$$.fragment,Ma),Ma.forEach(t),ul.forEach(t),iOe=i(f),qd=n(f,"H2",{class:!0});var pXe=s(qd);l7=n(pXe,"A",{id:!0,class:!0,href:!0});var t4t=s(l7);$be=n(t4t,"SPAN",{});var a4t=s($be);T(Iy.$$.fragment,a4t),a4t.forEach(t),t4t.forEach(t),Scr=i(pXe),kbe=n(pXe,"SPAN",{});var n4t=s(kbe);Rcr=r(n4t,"AutoModelForMaskedImageModeling"),n4t.forEach(t),pXe.forEach(t),dOe=i(f),Ho=n(f,"DIV",{class:!0});var bl=s(Ho);T(Ny.$$.fragment,bl),Pcr=i(bl),jd=n(bl,"P",{});var Voe=s(jd);Bcr=r(Voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),uQ=n(Voe,"A",{href:!0});var s4t=s(uQ);Icr=r(s4t,"from_pretrained()"),s4t.forEach(t),Ncr=r(Voe," class method or the "),_Q=n(Voe,"A",{href:!0});var l4t=s(_Q);qcr=r(l4t,"from_config()"),l4t.forEach(t),jcr=r(Voe,` class
method.`),Voe.forEach(t),Dcr=i(bl),qy=n(bl,"P",{});var uXe=s(qy);Gcr=r(uXe,"This class cannot be instantiated directly using "),Sbe=n(uXe,"CODE",{});var i4t=s(Sbe);Ocr=r(i4t,"__init__()"),i4t.forEach(t),Vcr=r(uXe," (throws an error)."),uXe.forEach(t),Xcr=i(bl),wt=n(bl,"DIV",{class:!0});var iA=s(wt);T(jy.$$.fragment,iA),zcr=i(iA),Rbe=n(iA,"P",{});var d4t=s(Rbe);Wcr=r(d4t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),d4t.forEach(t),Qcr=i(iA),Dd=n(iA,"P",{});var Xoe=s(Dd);Hcr=r(Xoe,`Note:
Loading a model from its configuration file does `),Pbe=n(Xoe,"STRONG",{});var c4t=s(Pbe);Ucr=r(c4t,"not"),c4t.forEach(t),Jcr=r(Xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=n(Xoe,"A",{href:!0});var f4t=s(bQ);Ycr=r(f4t,"from_pretrained()"),f4t.forEach(t),Kcr=r(Xoe," to load the model weights."),Xoe.forEach(t),Zcr=i(iA),T(i7.$$.fragment,iA),iA.forEach(t),efr=i(bl),uo=n(bl,"DIV",{class:!0});var Ea=s(uo);T(Dy.$$.fragment,Ea),ofr=i(Ea),Bbe=n(Ea,"P",{});var m4t=s(Bbe);rfr=r(m4t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),m4t.forEach(t),tfr=i(Ea),Ya=n(Ea,"P",{});var dA=s(Ya);afr=r(dA,"The model class to instantiate is selected based on the "),Ibe=n(dA,"CODE",{});var g4t=s(Ibe);nfr=r(g4t,"model_type"),g4t.forEach(t),sfr=r(dA,` property of the config object (either
passed as an argument or loaded from `),Nbe=n(dA,"CODE",{});var h4t=s(Nbe);lfr=r(h4t,"pretrained_model_name_or_path"),h4t.forEach(t),ifr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qbe=n(dA,"CODE",{});var p4t=s(qbe);dfr=r(p4t,"pretrained_model_name_or_path"),p4t.forEach(t),cfr=r(dA,":"),dA.forEach(t),ffr=i(Ea),Gd=n(Ea,"UL",{});var zoe=s(Gd);d7=n(zoe,"LI",{});var nBe=s(d7);jbe=n(nBe,"STRONG",{});var u4t=s(jbe);mfr=r(u4t,"deit"),u4t.forEach(t),gfr=r(nBe," \u2014 "),vQ=n(nBe,"A",{href:!0});var _4t=s(vQ);hfr=r(_4t,"DeiTForMaskedImageModeling"),_4t.forEach(t),pfr=r(nBe," (DeiT model)"),nBe.forEach(t),ufr=i(zoe),c7=n(zoe,"LI",{});var sBe=s(c7);Dbe=n(sBe,"STRONG",{});var b4t=s(Dbe);_fr=r(b4t,"swin"),b4t.forEach(t),bfr=r(sBe," \u2014 "),FQ=n(sBe,"A",{href:!0});var v4t=s(FQ);vfr=r(v4t,"SwinForMaskedImageModeling"),v4t.forEach(t),Ffr=r(sBe," (Swin Transformer model)"),sBe.forEach(t),Tfr=i(zoe),f7=n(zoe,"LI",{});var lBe=s(f7);Gbe=n(lBe,"STRONG",{});var F4t=s(Gbe);Mfr=r(F4t,"vit"),F4t.forEach(t),Efr=r(lBe," \u2014 "),TQ=n(lBe,"A",{href:!0});var T4t=s(TQ);Cfr=r(T4t,"ViTForMaskedImageModeling"),T4t.forEach(t),wfr=r(lBe," (ViT model)"),lBe.forEach(t),zoe.forEach(t),Afr=i(Ea),m7=n(Ea,"P",{});var iBe=s(m7);Lfr=r(iBe,"The model is set in evaluation mode by default using "),Obe=n(iBe,"CODE",{});var M4t=s(Obe);yfr=r(M4t,"model.eval()"),M4t.forEach(t),xfr=r(iBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vbe=n(iBe,"CODE",{});var E4t=s(Vbe);$fr=r(E4t,"model.train()"),E4t.forEach(t),iBe.forEach(t),kfr=i(Ea),T(g7.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),cOe=i(f),Od=n(f,"H2",{class:!0});var _Xe=s(Od);h7=n(_Xe,"A",{id:!0,class:!0,href:!0});var C4t=s(h7);Xbe=n(C4t,"SPAN",{});var w4t=s(Xbe);T(Gy.$$.fragment,w4t),w4t.forEach(t),C4t.forEach(t),Sfr=i(_Xe),zbe=n(_Xe,"SPAN",{});var A4t=s(zbe);Rfr=r(A4t,"AutoModelForObjectDetection"),A4t.forEach(t),_Xe.forEach(t),fOe=i(f),Uo=n(f,"DIV",{class:!0});var vl=s(Uo);T(Oy.$$.fragment,vl),Pfr=i(vl),Vd=n(vl,"P",{});var Woe=s(Vd);Bfr=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),MQ=n(Woe,"A",{href:!0});var L4t=s(MQ);Ifr=r(L4t,"from_pretrained()"),L4t.forEach(t),Nfr=r(Woe," class method or the "),EQ=n(Woe,"A",{href:!0});var y4t=s(EQ);qfr=r(y4t,"from_config()"),y4t.forEach(t),jfr=r(Woe,` class
method.`),Woe.forEach(t),Dfr=i(vl),Vy=n(vl,"P",{});var bXe=s(Vy);Gfr=r(bXe,"This class cannot be instantiated directly using "),Wbe=n(bXe,"CODE",{});var x4t=s(Wbe);Ofr=r(x4t,"__init__()"),x4t.forEach(t),Vfr=r(bXe," (throws an error)."),bXe.forEach(t),Xfr=i(vl),At=n(vl,"DIV",{class:!0});var cA=s(At);T(Xy.$$.fragment,cA),zfr=i(cA),Qbe=n(cA,"P",{});var $4t=s(Qbe);Wfr=r($4t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),$4t.forEach(t),Qfr=i(cA),Xd=n(cA,"P",{});var Qoe=s(Xd);Hfr=r(Qoe,`Note:
Loading a model from its configuration file does `),Hbe=n(Qoe,"STRONG",{});var k4t=s(Hbe);Ufr=r(k4t,"not"),k4t.forEach(t),Jfr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=n(Qoe,"A",{href:!0});var S4t=s(CQ);Yfr=r(S4t,"from_pretrained()"),S4t.forEach(t),Kfr=r(Qoe," to load the model weights."),Qoe.forEach(t),Zfr=i(cA),T(p7.$$.fragment,cA),cA.forEach(t),emr=i(vl),_o=n(vl,"DIV",{class:!0});var Ca=s(_o);T(zy.$$.fragment,Ca),omr=i(Ca),Ube=n(Ca,"P",{});var R4t=s(Ube);rmr=r(R4t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),R4t.forEach(t),tmr=i(Ca),Ka=n(Ca,"P",{});var fA=s(Ka);amr=r(fA,"The model class to instantiate is selected based on the "),Jbe=n(fA,"CODE",{});var P4t=s(Jbe);nmr=r(P4t,"model_type"),P4t.forEach(t),smr=r(fA,` property of the config object (either
passed as an argument or loaded from `),Ybe=n(fA,"CODE",{});var B4t=s(Ybe);lmr=r(B4t,"pretrained_model_name_or_path"),B4t.forEach(t),imr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=n(fA,"CODE",{});var I4t=s(Kbe);dmr=r(I4t,"pretrained_model_name_or_path"),I4t.forEach(t),cmr=r(fA,":"),fA.forEach(t),fmr=i(Ca),Wy=n(Ca,"UL",{});var vXe=s(Wy);u7=n(vXe,"LI",{});var dBe=s(u7);Zbe=n(dBe,"STRONG",{});var N4t=s(Zbe);mmr=r(N4t,"detr"),N4t.forEach(t),gmr=r(dBe," \u2014 "),wQ=n(dBe,"A",{href:!0});var q4t=s(wQ);hmr=r(q4t,"DetrForObjectDetection"),q4t.forEach(t),pmr=r(dBe," (DETR model)"),dBe.forEach(t),umr=i(vXe),_7=n(vXe,"LI",{});var cBe=s(_7);eve=n(cBe,"STRONG",{});var j4t=s(eve);_mr=r(j4t,"yolos"),j4t.forEach(t),bmr=r(cBe," \u2014 "),AQ=n(cBe,"A",{href:!0});var D4t=s(AQ);vmr=r(D4t,"YolosForObjectDetection"),D4t.forEach(t),Fmr=r(cBe," (YOLOS model)"),cBe.forEach(t),vXe.forEach(t),Tmr=i(Ca),b7=n(Ca,"P",{});var fBe=s(b7);Mmr=r(fBe,"The model is set in evaluation mode by default using "),ove=n(fBe,"CODE",{});var G4t=s(ove);Emr=r(G4t,"model.eval()"),G4t.forEach(t),Cmr=r(fBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rve=n(fBe,"CODE",{});var O4t=s(rve);wmr=r(O4t,"model.train()"),O4t.forEach(t),fBe.forEach(t),Amr=i(Ca),T(v7.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),mOe=i(f),zd=n(f,"H2",{class:!0});var FXe=s(zd);F7=n(FXe,"A",{id:!0,class:!0,href:!0});var V4t=s(F7);tve=n(V4t,"SPAN",{});var X4t=s(tve);T(Qy.$$.fragment,X4t),X4t.forEach(t),V4t.forEach(t),Lmr=i(FXe),ave=n(FXe,"SPAN",{});var z4t=s(ave);ymr=r(z4t,"AutoModelForImageSegmentation"),z4t.forEach(t),FXe.forEach(t),gOe=i(f),Jo=n(f,"DIV",{class:!0});var Fl=s(Jo);T(Hy.$$.fragment,Fl),xmr=i(Fl),Wd=n(Fl,"P",{});var Hoe=s(Wd);$mr=r(Hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),LQ=n(Hoe,"A",{href:!0});var W4t=s(LQ);kmr=r(W4t,"from_pretrained()"),W4t.forEach(t),Smr=r(Hoe," class method or the "),yQ=n(Hoe,"A",{href:!0});var Q4t=s(yQ);Rmr=r(Q4t,"from_config()"),Q4t.forEach(t),Pmr=r(Hoe,` class
method.`),Hoe.forEach(t),Bmr=i(Fl),Uy=n(Fl,"P",{});var TXe=s(Uy);Imr=r(TXe,"This class cannot be instantiated directly using "),nve=n(TXe,"CODE",{});var H4t=s(nve);Nmr=r(H4t,"__init__()"),H4t.forEach(t),qmr=r(TXe," (throws an error)."),TXe.forEach(t),jmr=i(Fl),Lt=n(Fl,"DIV",{class:!0});var mA=s(Lt);T(Jy.$$.fragment,mA),Dmr=i(mA),sve=n(mA,"P",{});var U4t=s(sve);Gmr=r(U4t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),U4t.forEach(t),Omr=i(mA),Qd=n(mA,"P",{});var Uoe=s(Qd);Vmr=r(Uoe,`Note:
Loading a model from its configuration file does `),lve=n(Uoe,"STRONG",{});var J4t=s(lve);Xmr=r(J4t,"not"),J4t.forEach(t),zmr=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=n(Uoe,"A",{href:!0});var Y4t=s(xQ);Wmr=r(Y4t,"from_pretrained()"),Y4t.forEach(t),Qmr=r(Uoe," to load the model weights."),Uoe.forEach(t),Hmr=i(mA),T(T7.$$.fragment,mA),mA.forEach(t),Umr=i(Fl),bo=n(Fl,"DIV",{class:!0});var wa=s(bo);T(Yy.$$.fragment,wa),Jmr=i(wa),ive=n(wa,"P",{});var K4t=s(ive);Ymr=r(K4t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),K4t.forEach(t),Kmr=i(wa),Za=n(wa,"P",{});var gA=s(Za);Zmr=r(gA,"The model class to instantiate is selected based on the "),dve=n(gA,"CODE",{});var Z4t=s(dve);egr=r(Z4t,"model_type"),Z4t.forEach(t),ogr=r(gA,` property of the config object (either
passed as an argument or loaded from `),cve=n(gA,"CODE",{});var eCt=s(cve);rgr=r(eCt,"pretrained_model_name_or_path"),eCt.forEach(t),tgr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=n(gA,"CODE",{});var oCt=s(fve);agr=r(oCt,"pretrained_model_name_or_path"),oCt.forEach(t),ngr=r(gA,":"),gA.forEach(t),sgr=i(wa),mve=n(wa,"UL",{});var rCt=s(mve);M7=n(rCt,"LI",{});var mBe=s(M7);gve=n(mBe,"STRONG",{});var tCt=s(gve);lgr=r(tCt,"detr"),tCt.forEach(t),igr=r(mBe," \u2014 "),$Q=n(mBe,"A",{href:!0});var aCt=s($Q);dgr=r(aCt,"DetrForSegmentation"),aCt.forEach(t),cgr=r(mBe," (DETR model)"),mBe.forEach(t),rCt.forEach(t),fgr=i(wa),E7=n(wa,"P",{});var gBe=s(E7);mgr=r(gBe,"The model is set in evaluation mode by default using "),hve=n(gBe,"CODE",{});var nCt=s(hve);ggr=r(nCt,"model.eval()"),nCt.forEach(t),hgr=r(gBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pve=n(gBe,"CODE",{});var sCt=s(pve);pgr=r(sCt,"model.train()"),sCt.forEach(t),gBe.forEach(t),ugr=i(wa),T(C7.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),hOe=i(f),Hd=n(f,"H2",{class:!0});var MXe=s(Hd);w7=n(MXe,"A",{id:!0,class:!0,href:!0});var lCt=s(w7);uve=n(lCt,"SPAN",{});var iCt=s(uve);T(Ky.$$.fragment,iCt),iCt.forEach(t),lCt.forEach(t),_gr=i(MXe),_ve=n(MXe,"SPAN",{});var dCt=s(_ve);bgr=r(dCt,"AutoModelForSemanticSegmentation"),dCt.forEach(t),MXe.forEach(t),pOe=i(f),Yo=n(f,"DIV",{class:!0});var Tl=s(Yo);T(Zy.$$.fragment,Tl),vgr=i(Tl),Ud=n(Tl,"P",{});var Joe=s(Ud);Fgr=r(Joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),kQ=n(Joe,"A",{href:!0});var cCt=s(kQ);Tgr=r(cCt,"from_pretrained()"),cCt.forEach(t),Mgr=r(Joe," class method or the "),SQ=n(Joe,"A",{href:!0});var fCt=s(SQ);Egr=r(fCt,"from_config()"),fCt.forEach(t),Cgr=r(Joe,` class
method.`),Joe.forEach(t),wgr=i(Tl),e8=n(Tl,"P",{});var EXe=s(e8);Agr=r(EXe,"This class cannot be instantiated directly using "),bve=n(EXe,"CODE",{});var mCt=s(bve);Lgr=r(mCt,"__init__()"),mCt.forEach(t),ygr=r(EXe," (throws an error)."),EXe.forEach(t),xgr=i(Tl),yt=n(Tl,"DIV",{class:!0});var hA=s(yt);T(o8.$$.fragment,hA),$gr=i(hA),vve=n(hA,"P",{});var gCt=s(vve);kgr=r(gCt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),gCt.forEach(t),Sgr=i(hA),Jd=n(hA,"P",{});var Yoe=s(Jd);Rgr=r(Yoe,`Note:
Loading a model from its configuration file does `),Fve=n(Yoe,"STRONG",{});var hCt=s(Fve);Pgr=r(hCt,"not"),hCt.forEach(t),Bgr=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(Yoe,"A",{href:!0});var pCt=s(RQ);Igr=r(pCt,"from_pretrained()"),pCt.forEach(t),Ngr=r(Yoe," to load the model weights."),Yoe.forEach(t),qgr=i(hA),T(A7.$$.fragment,hA),hA.forEach(t),jgr=i(Tl),vo=n(Tl,"DIV",{class:!0});var Aa=s(vo);T(r8.$$.fragment,Aa),Dgr=i(Aa),Tve=n(Aa,"P",{});var uCt=s(Tve);Ggr=r(uCt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),uCt.forEach(t),Ogr=i(Aa),en=n(Aa,"P",{});var pA=s(en);Vgr=r(pA,"The model class to instantiate is selected based on the "),Mve=n(pA,"CODE",{});var _Ct=s(Mve);Xgr=r(_Ct,"model_type"),_Ct.forEach(t),zgr=r(pA,` property of the config object (either
passed as an argument or loaded from `),Eve=n(pA,"CODE",{});var bCt=s(Eve);Wgr=r(bCt,"pretrained_model_name_or_path"),bCt.forEach(t),Qgr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=n(pA,"CODE",{});var vCt=s(Cve);Hgr=r(vCt,"pretrained_model_name_or_path"),vCt.forEach(t),Ugr=r(pA,":"),pA.forEach(t),Jgr=i(Aa),on=n(Aa,"UL",{});var uA=s(on);L7=n(uA,"LI",{});var hBe=s(L7);wve=n(hBe,"STRONG",{});var FCt=s(wve);Ygr=r(FCt,"beit"),FCt.forEach(t),Kgr=r(hBe," \u2014 "),PQ=n(hBe,"A",{href:!0});var TCt=s(PQ);Zgr=r(TCt,"BeitForSemanticSegmentation"),TCt.forEach(t),ehr=r(hBe," (BEiT model)"),hBe.forEach(t),ohr=i(uA),y7=n(uA,"LI",{});var pBe=s(y7);Ave=n(pBe,"STRONG",{});var MCt=s(Ave);rhr=r(MCt,"data2vec-vision"),MCt.forEach(t),thr=r(pBe," \u2014 "),BQ=n(pBe,"A",{href:!0});var ECt=s(BQ);ahr=r(ECt,"Data2VecVisionForSemanticSegmentation"),ECt.forEach(t),nhr=r(pBe," (Data2VecVision model)"),pBe.forEach(t),shr=i(uA),x7=n(uA,"LI",{});var uBe=s(x7);Lve=n(uBe,"STRONG",{});var CCt=s(Lve);lhr=r(CCt,"dpt"),CCt.forEach(t),ihr=r(uBe," \u2014 "),IQ=n(uBe,"A",{href:!0});var wCt=s(IQ);dhr=r(wCt,"DPTForSemanticSegmentation"),wCt.forEach(t),chr=r(uBe," (DPT model)"),uBe.forEach(t),fhr=i(uA),$7=n(uA,"LI",{});var _Be=s($7);yve=n(_Be,"STRONG",{});var ACt=s(yve);mhr=r(ACt,"segformer"),ACt.forEach(t),ghr=r(_Be," \u2014 "),NQ=n(_Be,"A",{href:!0});var LCt=s(NQ);hhr=r(LCt,"SegformerForSemanticSegmentation"),LCt.forEach(t),phr=r(_Be," (SegFormer model)"),_Be.forEach(t),uA.forEach(t),uhr=i(Aa),k7=n(Aa,"P",{});var bBe=s(k7);_hr=r(bBe,"The model is set in evaluation mode by default using "),xve=n(bBe,"CODE",{});var yCt=s(xve);bhr=r(yCt,"model.eval()"),yCt.forEach(t),vhr=r(bBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ve=n(bBe,"CODE",{});var xCt=s($ve);Fhr=r(xCt,"model.train()"),xCt.forEach(t),bBe.forEach(t),Thr=i(Aa),T(S7.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),uOe=i(f),Yd=n(f,"H2",{class:!0});var CXe=s(Yd);R7=n(CXe,"A",{id:!0,class:!0,href:!0});var $Ct=s(R7);kve=n($Ct,"SPAN",{});var kCt=s(kve);T(t8.$$.fragment,kCt),kCt.forEach(t),$Ct.forEach(t),Mhr=i(CXe),Sve=n(CXe,"SPAN",{});var SCt=s(Sve);Ehr=r(SCt,"AutoModelForInstanceSegmentation"),SCt.forEach(t),CXe.forEach(t),_Oe=i(f),Ko=n(f,"DIV",{class:!0});var Ml=s(Ko);T(a8.$$.fragment,Ml),Chr=i(Ml),Kd=n(Ml,"P",{});var Koe=s(Kd);whr=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),qQ=n(Koe,"A",{href:!0});var RCt=s(qQ);Ahr=r(RCt,"from_pretrained()"),RCt.forEach(t),Lhr=r(Koe," class method or the "),jQ=n(Koe,"A",{href:!0});var PCt=s(jQ);yhr=r(PCt,"from_config()"),PCt.forEach(t),xhr=r(Koe,` class
method.`),Koe.forEach(t),$hr=i(Ml),n8=n(Ml,"P",{});var wXe=s(n8);khr=r(wXe,"This class cannot be instantiated directly using "),Rve=n(wXe,"CODE",{});var BCt=s(Rve);Shr=r(BCt,"__init__()"),BCt.forEach(t),Rhr=r(wXe," (throws an error)."),wXe.forEach(t),Phr=i(Ml),xt=n(Ml,"DIV",{class:!0});var _A=s(xt);T(s8.$$.fragment,_A),Bhr=i(_A),Pve=n(_A,"P",{});var ICt=s(Pve);Ihr=r(ICt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ICt.forEach(t),Nhr=i(_A),Zd=n(_A,"P",{});var Zoe=s(Zd);qhr=r(Zoe,`Note:
Loading a model from its configuration file does `),Bve=n(Zoe,"STRONG",{});var NCt=s(Bve);jhr=r(NCt,"not"),NCt.forEach(t),Dhr=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(Zoe,"A",{href:!0});var qCt=s(DQ);Ghr=r(qCt,"from_pretrained()"),qCt.forEach(t),Ohr=r(Zoe," to load the model weights."),Zoe.forEach(t),Vhr=i(_A),T(P7.$$.fragment,_A),_A.forEach(t),Xhr=i(Ml),Fo=n(Ml,"DIV",{class:!0});var La=s(Fo);T(l8.$$.fragment,La),zhr=i(La),Ive=n(La,"P",{});var jCt=s(Ive);Whr=r(jCt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),jCt.forEach(t),Qhr=i(La),rn=n(La,"P",{});var bA=s(rn);Hhr=r(bA,"The model class to instantiate is selected based on the "),Nve=n(bA,"CODE",{});var DCt=s(Nve);Uhr=r(DCt,"model_type"),DCt.forEach(t),Jhr=r(bA,` property of the config object (either
passed as an argument or loaded from `),qve=n(bA,"CODE",{});var GCt=s(qve);Yhr=r(GCt,"pretrained_model_name_or_path"),GCt.forEach(t),Khr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=n(bA,"CODE",{});var OCt=s(jve);Zhr=r(OCt,"pretrained_model_name_or_path"),OCt.forEach(t),epr=r(bA,":"),bA.forEach(t),opr=i(La),Dve=n(La,"UL",{});var VCt=s(Dve);B7=n(VCt,"LI",{});var vBe=s(B7);Gve=n(vBe,"STRONG",{});var XCt=s(Gve);rpr=r(XCt,"maskformer"),XCt.forEach(t),tpr=r(vBe," \u2014 "),GQ=n(vBe,"A",{href:!0});var zCt=s(GQ);apr=r(zCt,"MaskFormerForInstanceSegmentation"),zCt.forEach(t),npr=r(vBe," (MaskFormer model)"),vBe.forEach(t),VCt.forEach(t),spr=i(La),I7=n(La,"P",{});var FBe=s(I7);lpr=r(FBe,"The model is set in evaluation mode by default using "),Ove=n(FBe,"CODE",{});var WCt=s(Ove);ipr=r(WCt,"model.eval()"),WCt.forEach(t),dpr=r(FBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vve=n(FBe,"CODE",{});var QCt=s(Vve);cpr=r(QCt,"model.train()"),QCt.forEach(t),FBe.forEach(t),fpr=i(La),T(N7.$$.fragment,La),La.forEach(t),Ml.forEach(t),bOe=i(f),ec=n(f,"H2",{class:!0});var AXe=s(ec);q7=n(AXe,"A",{id:!0,class:!0,href:!0});var HCt=s(q7);Xve=n(HCt,"SPAN",{});var UCt=s(Xve);T(i8.$$.fragment,UCt),UCt.forEach(t),HCt.forEach(t),mpr=i(AXe),zve=n(AXe,"SPAN",{});var JCt=s(zve);gpr=r(JCt,"TFAutoModel"),JCt.forEach(t),AXe.forEach(t),vOe=i(f),Zo=n(f,"DIV",{class:!0});var El=s(Zo);T(d8.$$.fragment,El),hpr=i(El),oc=n(El,"P",{});var ere=s(oc);ppr=r(ere,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OQ=n(ere,"A",{href:!0});var YCt=s(OQ);upr=r(YCt,"from_pretrained()"),YCt.forEach(t),_pr=r(ere," class method or the "),VQ=n(ere,"A",{href:!0});var KCt=s(VQ);bpr=r(KCt,"from_config()"),KCt.forEach(t),vpr=r(ere,` class
method.`),ere.forEach(t),Fpr=i(El),c8=n(El,"P",{});var LXe=s(c8);Tpr=r(LXe,"This class cannot be instantiated directly using "),Wve=n(LXe,"CODE",{});var ZCt=s(Wve);Mpr=r(ZCt,"__init__()"),ZCt.forEach(t),Epr=r(LXe," (throws an error)."),LXe.forEach(t),Cpr=i(El),$t=n(El,"DIV",{class:!0});var vA=s($t);T(f8.$$.fragment,vA),wpr=i(vA),Qve=n(vA,"P",{});var e5t=s(Qve);Apr=r(e5t,"Instantiates one of the base model classes of the library from a configuration."),e5t.forEach(t),Lpr=i(vA),rc=n(vA,"P",{});var ore=s(rc);ypr=r(ore,`Note:
Loading a model from its configuration file does `),Hve=n(ore,"STRONG",{});var o5t=s(Hve);xpr=r(o5t,"not"),o5t.forEach(t),$pr=r(ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(ore,"A",{href:!0});var r5t=s(XQ);kpr=r(r5t,"from_pretrained()"),r5t.forEach(t),Spr=r(ore," to load the model weights."),ore.forEach(t),Rpr=i(vA),T(j7.$$.fragment,vA),vA.forEach(t),Ppr=i(El),Lr=n(El,"DIV",{class:!0});var Cl=s(Lr);T(m8.$$.fragment,Cl),Bpr=i(Cl),Uve=n(Cl,"P",{});var t5t=s(Uve);Ipr=r(t5t,"Instantiate one of the base model classes of the library from a pretrained model."),t5t.forEach(t),Npr=i(Cl),tn=n(Cl,"P",{});var FA=s(tn);qpr=r(FA,"The model class to instantiate is selected based on the "),Jve=n(FA,"CODE",{});var a5t=s(Jve);jpr=r(a5t,"model_type"),a5t.forEach(t),Dpr=r(FA,` property of the config object (either
passed as an argument or loaded from `),Yve=n(FA,"CODE",{});var n5t=s(Yve);Gpr=r(n5t,"pretrained_model_name_or_path"),n5t.forEach(t),Opr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=n(FA,"CODE",{});var s5t=s(Kve);Vpr=r(s5t,"pretrained_model_name_or_path"),s5t.forEach(t),Xpr=r(FA,":"),FA.forEach(t),zpr=i(Cl),q=n(Cl,"UL",{});var D=s(q);D7=n(D,"LI",{});var TBe=s(D7);Zve=n(TBe,"STRONG",{});var l5t=s(Zve);Wpr=r(l5t,"albert"),l5t.forEach(t),Qpr=r(TBe," \u2014 "),zQ=n(TBe,"A",{href:!0});var i5t=s(zQ);Hpr=r(i5t,"TFAlbertModel"),i5t.forEach(t),Upr=r(TBe," (ALBERT model)"),TBe.forEach(t),Jpr=i(D),G7=n(D,"LI",{});var MBe=s(G7);e0e=n(MBe,"STRONG",{});var d5t=s(e0e);Ypr=r(d5t,"bart"),d5t.forEach(t),Kpr=r(MBe," \u2014 "),WQ=n(MBe,"A",{href:!0});var c5t=s(WQ);Zpr=r(c5t,"TFBartModel"),c5t.forEach(t),eur=r(MBe," (BART model)"),MBe.forEach(t),our=i(D),O7=n(D,"LI",{});var EBe=s(O7);o0e=n(EBe,"STRONG",{});var f5t=s(o0e);rur=r(f5t,"bert"),f5t.forEach(t),tur=r(EBe," \u2014 "),QQ=n(EBe,"A",{href:!0});var m5t=s(QQ);aur=r(m5t,"TFBertModel"),m5t.forEach(t),nur=r(EBe," (BERT model)"),EBe.forEach(t),sur=i(D),V7=n(D,"LI",{});var CBe=s(V7);r0e=n(CBe,"STRONG",{});var g5t=s(r0e);lur=r(g5t,"blenderbot"),g5t.forEach(t),iur=r(CBe," \u2014 "),HQ=n(CBe,"A",{href:!0});var h5t=s(HQ);dur=r(h5t,"TFBlenderbotModel"),h5t.forEach(t),cur=r(CBe," (Blenderbot model)"),CBe.forEach(t),fur=i(D),X7=n(D,"LI",{});var wBe=s(X7);t0e=n(wBe,"STRONG",{});var p5t=s(t0e);mur=r(p5t,"blenderbot-small"),p5t.forEach(t),gur=r(wBe," \u2014 "),UQ=n(wBe,"A",{href:!0});var u5t=s(UQ);hur=r(u5t,"TFBlenderbotSmallModel"),u5t.forEach(t),pur=r(wBe," (BlenderbotSmall model)"),wBe.forEach(t),uur=i(D),z7=n(D,"LI",{});var ABe=s(z7);a0e=n(ABe,"STRONG",{});var _5t=s(a0e);_ur=r(_5t,"camembert"),_5t.forEach(t),bur=r(ABe," \u2014 "),JQ=n(ABe,"A",{href:!0});var b5t=s(JQ);vur=r(b5t,"TFCamembertModel"),b5t.forEach(t),Fur=r(ABe," (CamemBERT model)"),ABe.forEach(t),Tur=i(D),W7=n(D,"LI",{});var LBe=s(W7);n0e=n(LBe,"STRONG",{});var v5t=s(n0e);Mur=r(v5t,"clip"),v5t.forEach(t),Eur=r(LBe," \u2014 "),YQ=n(LBe,"A",{href:!0});var F5t=s(YQ);Cur=r(F5t,"TFCLIPModel"),F5t.forEach(t),wur=r(LBe," (CLIP model)"),LBe.forEach(t),Aur=i(D),Q7=n(D,"LI",{});var yBe=s(Q7);s0e=n(yBe,"STRONG",{});var T5t=s(s0e);Lur=r(T5t,"convbert"),T5t.forEach(t),yur=r(yBe," \u2014 "),KQ=n(yBe,"A",{href:!0});var M5t=s(KQ);xur=r(M5t,"TFConvBertModel"),M5t.forEach(t),$ur=r(yBe," (ConvBERT model)"),yBe.forEach(t),kur=i(D),H7=n(D,"LI",{});var xBe=s(H7);l0e=n(xBe,"STRONG",{});var E5t=s(l0e);Sur=r(E5t,"convnext"),E5t.forEach(t),Rur=r(xBe," \u2014 "),ZQ=n(xBe,"A",{href:!0});var C5t=s(ZQ);Pur=r(C5t,"TFConvNextModel"),C5t.forEach(t),Bur=r(xBe," (ConvNeXT model)"),xBe.forEach(t),Iur=i(D),U7=n(D,"LI",{});var $Be=s(U7);i0e=n($Be,"STRONG",{});var w5t=s(i0e);Nur=r(w5t,"ctrl"),w5t.forEach(t),qur=r($Be," \u2014 "),eH=n($Be,"A",{href:!0});var A5t=s(eH);jur=r(A5t,"TFCTRLModel"),A5t.forEach(t),Dur=r($Be," (CTRL model)"),$Be.forEach(t),Gur=i(D),J7=n(D,"LI",{});var kBe=s(J7);d0e=n(kBe,"STRONG",{});var L5t=s(d0e);Our=r(L5t,"data2vec-vision"),L5t.forEach(t),Vur=r(kBe," \u2014 "),oH=n(kBe,"A",{href:!0});var y5t=s(oH);Xur=r(y5t,"TFData2VecVisionModel"),y5t.forEach(t),zur=r(kBe," (Data2VecVision model)"),kBe.forEach(t),Wur=i(D),Y7=n(D,"LI",{});var SBe=s(Y7);c0e=n(SBe,"STRONG",{});var x5t=s(c0e);Qur=r(x5t,"deberta"),x5t.forEach(t),Hur=r(SBe," \u2014 "),rH=n(SBe,"A",{href:!0});var $5t=s(rH);Uur=r($5t,"TFDebertaModel"),$5t.forEach(t),Jur=r(SBe," (DeBERTa model)"),SBe.forEach(t),Yur=i(D),K7=n(D,"LI",{});var RBe=s(K7);f0e=n(RBe,"STRONG",{});var k5t=s(f0e);Kur=r(k5t,"deberta-v2"),k5t.forEach(t),Zur=r(RBe," \u2014 "),tH=n(RBe,"A",{href:!0});var S5t=s(tH);e_r=r(S5t,"TFDebertaV2Model"),S5t.forEach(t),o_r=r(RBe," (DeBERTa-v2 model)"),RBe.forEach(t),r_r=i(D),Z7=n(D,"LI",{});var PBe=s(Z7);m0e=n(PBe,"STRONG",{});var R5t=s(m0e);t_r=r(R5t,"distilbert"),R5t.forEach(t),a_r=r(PBe," \u2014 "),aH=n(PBe,"A",{href:!0});var P5t=s(aH);n_r=r(P5t,"TFDistilBertModel"),P5t.forEach(t),s_r=r(PBe," (DistilBERT model)"),PBe.forEach(t),l_r=i(D),e9=n(D,"LI",{});var BBe=s(e9);g0e=n(BBe,"STRONG",{});var B5t=s(g0e);i_r=r(B5t,"dpr"),B5t.forEach(t),d_r=r(BBe," \u2014 "),nH=n(BBe,"A",{href:!0});var I5t=s(nH);c_r=r(I5t,"TFDPRQuestionEncoder"),I5t.forEach(t),f_r=r(BBe," (DPR model)"),BBe.forEach(t),m_r=i(D),o9=n(D,"LI",{});var IBe=s(o9);h0e=n(IBe,"STRONG",{});var N5t=s(h0e);g_r=r(N5t,"electra"),N5t.forEach(t),h_r=r(IBe," \u2014 "),sH=n(IBe,"A",{href:!0});var q5t=s(sH);p_r=r(q5t,"TFElectraModel"),q5t.forEach(t),u_r=r(IBe," (ELECTRA model)"),IBe.forEach(t),__r=i(D),r9=n(D,"LI",{});var NBe=s(r9);p0e=n(NBe,"STRONG",{});var j5t=s(p0e);b_r=r(j5t,"flaubert"),j5t.forEach(t),v_r=r(NBe," \u2014 "),lH=n(NBe,"A",{href:!0});var D5t=s(lH);F_r=r(D5t,"TFFlaubertModel"),D5t.forEach(t),T_r=r(NBe," (FlauBERT model)"),NBe.forEach(t),M_r=i(D),zs=n(D,"LI",{});var Hk=s(zs);u0e=n(Hk,"STRONG",{});var G5t=s(u0e);E_r=r(G5t,"funnel"),G5t.forEach(t),C_r=r(Hk," \u2014 "),iH=n(Hk,"A",{href:!0});var O5t=s(iH);w_r=r(O5t,"TFFunnelModel"),O5t.forEach(t),A_r=r(Hk," or "),dH=n(Hk,"A",{href:!0});var V5t=s(dH);L_r=r(V5t,"TFFunnelBaseModel"),V5t.forEach(t),y_r=r(Hk," (Funnel Transformer model)"),Hk.forEach(t),x_r=i(D),t9=n(D,"LI",{});var qBe=s(t9);_0e=n(qBe,"STRONG",{});var X5t=s(_0e);$_r=r(X5t,"gpt2"),X5t.forEach(t),k_r=r(qBe," \u2014 "),cH=n(qBe,"A",{href:!0});var z5t=s(cH);S_r=r(z5t,"TFGPT2Model"),z5t.forEach(t),R_r=r(qBe," (OpenAI GPT-2 model)"),qBe.forEach(t),P_r=i(D),a9=n(D,"LI",{});var jBe=s(a9);b0e=n(jBe,"STRONG",{});var W5t=s(b0e);B_r=r(W5t,"gptj"),W5t.forEach(t),I_r=r(jBe," \u2014 "),fH=n(jBe,"A",{href:!0});var Q5t=s(fH);N_r=r(Q5t,"TFGPTJModel"),Q5t.forEach(t),q_r=r(jBe," (GPT-J model)"),jBe.forEach(t),j_r=i(D),n9=n(D,"LI",{});var DBe=s(n9);v0e=n(DBe,"STRONG",{});var H5t=s(v0e);D_r=r(H5t,"hubert"),H5t.forEach(t),G_r=r(DBe," \u2014 "),mH=n(DBe,"A",{href:!0});var U5t=s(mH);O_r=r(U5t,"TFHubertModel"),U5t.forEach(t),V_r=r(DBe," (Hubert model)"),DBe.forEach(t),X_r=i(D),s9=n(D,"LI",{});var GBe=s(s9);F0e=n(GBe,"STRONG",{});var J5t=s(F0e);z_r=r(J5t,"layoutlm"),J5t.forEach(t),W_r=r(GBe," \u2014 "),gH=n(GBe,"A",{href:!0});var Y5t=s(gH);Q_r=r(Y5t,"TFLayoutLMModel"),Y5t.forEach(t),H_r=r(GBe," (LayoutLM model)"),GBe.forEach(t),U_r=i(D),l9=n(D,"LI",{});var OBe=s(l9);T0e=n(OBe,"STRONG",{});var K5t=s(T0e);J_r=r(K5t,"led"),K5t.forEach(t),Y_r=r(OBe," \u2014 "),hH=n(OBe,"A",{href:!0});var Z5t=s(hH);K_r=r(Z5t,"TFLEDModel"),Z5t.forEach(t),Z_r=r(OBe," (LED model)"),OBe.forEach(t),e1r=i(D),i9=n(D,"LI",{});var VBe=s(i9);M0e=n(VBe,"STRONG",{});var e3t=s(M0e);o1r=r(e3t,"longformer"),e3t.forEach(t),r1r=r(VBe," \u2014 "),pH=n(VBe,"A",{href:!0});var o3t=s(pH);t1r=r(o3t,"TFLongformerModel"),o3t.forEach(t),a1r=r(VBe," (Longformer model)"),VBe.forEach(t),n1r=i(D),d9=n(D,"LI",{});var XBe=s(d9);E0e=n(XBe,"STRONG",{});var r3t=s(E0e);s1r=r(r3t,"lxmert"),r3t.forEach(t),l1r=r(XBe," \u2014 "),uH=n(XBe,"A",{href:!0});var t3t=s(uH);i1r=r(t3t,"TFLxmertModel"),t3t.forEach(t),d1r=r(XBe," (LXMERT model)"),XBe.forEach(t),c1r=i(D),c9=n(D,"LI",{});var zBe=s(c9);C0e=n(zBe,"STRONG",{});var a3t=s(C0e);f1r=r(a3t,"marian"),a3t.forEach(t),m1r=r(zBe," \u2014 "),_H=n(zBe,"A",{href:!0});var n3t=s(_H);g1r=r(n3t,"TFMarianModel"),n3t.forEach(t),h1r=r(zBe," (Marian model)"),zBe.forEach(t),p1r=i(D),f9=n(D,"LI",{});var WBe=s(f9);w0e=n(WBe,"STRONG",{});var s3t=s(w0e);u1r=r(s3t,"mbart"),s3t.forEach(t),_1r=r(WBe," \u2014 "),bH=n(WBe,"A",{href:!0});var l3t=s(bH);b1r=r(l3t,"TFMBartModel"),l3t.forEach(t),v1r=r(WBe," (mBART model)"),WBe.forEach(t),F1r=i(D),m9=n(D,"LI",{});var QBe=s(m9);A0e=n(QBe,"STRONG",{});var i3t=s(A0e);T1r=r(i3t,"mobilebert"),i3t.forEach(t),M1r=r(QBe," \u2014 "),vH=n(QBe,"A",{href:!0});var d3t=s(vH);E1r=r(d3t,"TFMobileBertModel"),d3t.forEach(t),C1r=r(QBe," (MobileBERT model)"),QBe.forEach(t),w1r=i(D),g9=n(D,"LI",{});var HBe=s(g9);L0e=n(HBe,"STRONG",{});var c3t=s(L0e);A1r=r(c3t,"mpnet"),c3t.forEach(t),L1r=r(HBe," \u2014 "),FH=n(HBe,"A",{href:!0});var f3t=s(FH);y1r=r(f3t,"TFMPNetModel"),f3t.forEach(t),x1r=r(HBe," (MPNet model)"),HBe.forEach(t),$1r=i(D),h9=n(D,"LI",{});var UBe=s(h9);y0e=n(UBe,"STRONG",{});var m3t=s(y0e);k1r=r(m3t,"mt5"),m3t.forEach(t),S1r=r(UBe," \u2014 "),TH=n(UBe,"A",{href:!0});var g3t=s(TH);R1r=r(g3t,"TFMT5Model"),g3t.forEach(t),P1r=r(UBe," (MT5 model)"),UBe.forEach(t),B1r=i(D),p9=n(D,"LI",{});var JBe=s(p9);x0e=n(JBe,"STRONG",{});var h3t=s(x0e);I1r=r(h3t,"openai-gpt"),h3t.forEach(t),N1r=r(JBe," \u2014 "),MH=n(JBe,"A",{href:!0});var p3t=s(MH);q1r=r(p3t,"TFOpenAIGPTModel"),p3t.forEach(t),j1r=r(JBe," (OpenAI GPT model)"),JBe.forEach(t),D1r=i(D),u9=n(D,"LI",{});var YBe=s(u9);$0e=n(YBe,"STRONG",{});var u3t=s($0e);G1r=r(u3t,"opt"),u3t.forEach(t),O1r=r(YBe," \u2014 "),EH=n(YBe,"A",{href:!0});var _3t=s(EH);V1r=r(_3t,"TFOPTModel"),_3t.forEach(t),X1r=r(YBe," (OPT model)"),YBe.forEach(t),z1r=i(D),_9=n(D,"LI",{});var KBe=s(_9);k0e=n(KBe,"STRONG",{});var b3t=s(k0e);W1r=r(b3t,"pegasus"),b3t.forEach(t),Q1r=r(KBe," \u2014 "),CH=n(KBe,"A",{href:!0});var v3t=s(CH);H1r=r(v3t,"TFPegasusModel"),v3t.forEach(t),U1r=r(KBe," (Pegasus model)"),KBe.forEach(t),J1r=i(D),b9=n(D,"LI",{});var ZBe=s(b9);S0e=n(ZBe,"STRONG",{});var F3t=s(S0e);Y1r=r(F3t,"rembert"),F3t.forEach(t),K1r=r(ZBe," \u2014 "),wH=n(ZBe,"A",{href:!0});var T3t=s(wH);Z1r=r(T3t,"TFRemBertModel"),T3t.forEach(t),e2r=r(ZBe," (RemBERT model)"),ZBe.forEach(t),o2r=i(D),v9=n(D,"LI",{});var eIe=s(v9);R0e=n(eIe,"STRONG",{});var M3t=s(R0e);r2r=r(M3t,"roberta"),M3t.forEach(t),t2r=r(eIe," \u2014 "),AH=n(eIe,"A",{href:!0});var E3t=s(AH);a2r=r(E3t,"TFRobertaModel"),E3t.forEach(t),n2r=r(eIe," (RoBERTa model)"),eIe.forEach(t),s2r=i(D),F9=n(D,"LI",{});var oIe=s(F9);P0e=n(oIe,"STRONG",{});var C3t=s(P0e);l2r=r(C3t,"roformer"),C3t.forEach(t),i2r=r(oIe," \u2014 "),LH=n(oIe,"A",{href:!0});var w3t=s(LH);d2r=r(w3t,"TFRoFormerModel"),w3t.forEach(t),c2r=r(oIe," (RoFormer model)"),oIe.forEach(t),f2r=i(D),T9=n(D,"LI",{});var rIe=s(T9);B0e=n(rIe,"STRONG",{});var A3t=s(B0e);m2r=r(A3t,"speech_to_text"),A3t.forEach(t),g2r=r(rIe," \u2014 "),yH=n(rIe,"A",{href:!0});var L3t=s(yH);h2r=r(L3t,"TFSpeech2TextModel"),L3t.forEach(t),p2r=r(rIe," (Speech2Text model)"),rIe.forEach(t),u2r=i(D),M9=n(D,"LI",{});var tIe=s(M9);I0e=n(tIe,"STRONG",{});var y3t=s(I0e);_2r=r(y3t,"swin"),y3t.forEach(t),b2r=r(tIe," \u2014 "),xH=n(tIe,"A",{href:!0});var x3t=s(xH);v2r=r(x3t,"TFSwinModel"),x3t.forEach(t),F2r=r(tIe," (Swin Transformer model)"),tIe.forEach(t),T2r=i(D),E9=n(D,"LI",{});var aIe=s(E9);N0e=n(aIe,"STRONG",{});var $3t=s(N0e);M2r=r($3t,"t5"),$3t.forEach(t),E2r=r(aIe," \u2014 "),$H=n(aIe,"A",{href:!0});var k3t=s($H);C2r=r(k3t,"TFT5Model"),k3t.forEach(t),w2r=r(aIe," (T5 model)"),aIe.forEach(t),A2r=i(D),C9=n(D,"LI",{});var nIe=s(C9);q0e=n(nIe,"STRONG",{});var S3t=s(q0e);L2r=r(S3t,"tapas"),S3t.forEach(t),y2r=r(nIe," \u2014 "),kH=n(nIe,"A",{href:!0});var R3t=s(kH);x2r=r(R3t,"TFTapasModel"),R3t.forEach(t),$2r=r(nIe," (TAPAS model)"),nIe.forEach(t),k2r=i(D),w9=n(D,"LI",{});var sIe=s(w9);j0e=n(sIe,"STRONG",{});var P3t=s(j0e);S2r=r(P3t,"transfo-xl"),P3t.forEach(t),R2r=r(sIe," \u2014 "),SH=n(sIe,"A",{href:!0});var B3t=s(SH);P2r=r(B3t,"TFTransfoXLModel"),B3t.forEach(t),B2r=r(sIe," (Transformer-XL model)"),sIe.forEach(t),I2r=i(D),A9=n(D,"LI",{});var lIe=s(A9);D0e=n(lIe,"STRONG",{});var I3t=s(D0e);N2r=r(I3t,"vit"),I3t.forEach(t),q2r=r(lIe," \u2014 "),RH=n(lIe,"A",{href:!0});var N3t=s(RH);j2r=r(N3t,"TFViTModel"),N3t.forEach(t),D2r=r(lIe," (ViT model)"),lIe.forEach(t),G2r=i(D),L9=n(D,"LI",{});var iIe=s(L9);G0e=n(iIe,"STRONG",{});var q3t=s(G0e);O2r=r(q3t,"vit_mae"),q3t.forEach(t),V2r=r(iIe," \u2014 "),PH=n(iIe,"A",{href:!0});var j3t=s(PH);X2r=r(j3t,"TFViTMAEModel"),j3t.forEach(t),z2r=r(iIe," (ViTMAE model)"),iIe.forEach(t),W2r=i(D),y9=n(D,"LI",{});var dIe=s(y9);O0e=n(dIe,"STRONG",{});var D3t=s(O0e);Q2r=r(D3t,"wav2vec2"),D3t.forEach(t),H2r=r(dIe," \u2014 "),BH=n(dIe,"A",{href:!0});var G3t=s(BH);U2r=r(G3t,"TFWav2Vec2Model"),G3t.forEach(t),J2r=r(dIe," (Wav2Vec2 model)"),dIe.forEach(t),Y2r=i(D),x9=n(D,"LI",{});var cIe=s(x9);V0e=n(cIe,"STRONG",{});var O3t=s(V0e);K2r=r(O3t,"xlm"),O3t.forEach(t),Z2r=r(cIe," \u2014 "),IH=n(cIe,"A",{href:!0});var V3t=s(IH);ebr=r(V3t,"TFXLMModel"),V3t.forEach(t),obr=r(cIe," (XLM model)"),cIe.forEach(t),rbr=i(D),$9=n(D,"LI",{});var fIe=s($9);X0e=n(fIe,"STRONG",{});var X3t=s(X0e);tbr=r(X3t,"xlm-roberta"),X3t.forEach(t),abr=r(fIe," \u2014 "),NH=n(fIe,"A",{href:!0});var z3t=s(NH);nbr=r(z3t,"TFXLMRobertaModel"),z3t.forEach(t),sbr=r(fIe," (XLM-RoBERTa model)"),fIe.forEach(t),lbr=i(D),k9=n(D,"LI",{});var mIe=s(k9);z0e=n(mIe,"STRONG",{});var W3t=s(z0e);ibr=r(W3t,"xlnet"),W3t.forEach(t),dbr=r(mIe," \u2014 "),qH=n(mIe,"A",{href:!0});var Q3t=s(qH);cbr=r(Q3t,"TFXLNetModel"),Q3t.forEach(t),fbr=r(mIe," (XLNet model)"),mIe.forEach(t),D.forEach(t),mbr=i(Cl),T(S9.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),FOe=i(f),tc=n(f,"H2",{class:!0});var yXe=s(tc);R9=n(yXe,"A",{id:!0,class:!0,href:!0});var H3t=s(R9);W0e=n(H3t,"SPAN",{});var U3t=s(W0e);T(g8.$$.fragment,U3t),U3t.forEach(t),H3t.forEach(t),gbr=i(yXe),Q0e=n(yXe,"SPAN",{});var J3t=s(Q0e);hbr=r(J3t,"TFAutoModelForPreTraining"),J3t.forEach(t),yXe.forEach(t),TOe=i(f),er=n(f,"DIV",{class:!0});var wl=s(er);T(h8.$$.fragment,wl),pbr=i(wl),ac=n(wl,"P",{});var rre=s(ac);ubr=r(rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jH=n(rre,"A",{href:!0});var Y3t=s(jH);_br=r(Y3t,"from_pretrained()"),Y3t.forEach(t),bbr=r(rre," class method or the "),DH=n(rre,"A",{href:!0});var K3t=s(DH);vbr=r(K3t,"from_config()"),K3t.forEach(t),Fbr=r(rre,` class
method.`),rre.forEach(t),Tbr=i(wl),p8=n(wl,"P",{});var xXe=s(p8);Mbr=r(xXe,"This class cannot be instantiated directly using "),H0e=n(xXe,"CODE",{});var Z3t=s(H0e);Ebr=r(Z3t,"__init__()"),Z3t.forEach(t),Cbr=r(xXe," (throws an error)."),xXe.forEach(t),wbr=i(wl),kt=n(wl,"DIV",{class:!0});var TA=s(kt);T(u8.$$.fragment,TA),Abr=i(TA),U0e=n(TA,"P",{});var ewt=s(U0e);Lbr=r(ewt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ewt.forEach(t),ybr=i(TA),nc=n(TA,"P",{});var tre=s(nc);xbr=r(tre,`Note:
Loading a model from its configuration file does `),J0e=n(tre,"STRONG",{});var owt=s(J0e);$br=r(owt,"not"),owt.forEach(t),kbr=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(tre,"A",{href:!0});var rwt=s(GH);Sbr=r(rwt,"from_pretrained()"),rwt.forEach(t),Rbr=r(tre," to load the model weights."),tre.forEach(t),Pbr=i(TA),T(P9.$$.fragment,TA),TA.forEach(t),Bbr=i(wl),yr=n(wl,"DIV",{class:!0});var Al=s(yr);T(_8.$$.fragment,Al),Ibr=i(Al),Y0e=n(Al,"P",{});var twt=s(Y0e);Nbr=r(twt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),twt.forEach(t),qbr=i(Al),an=n(Al,"P",{});var MA=s(an);jbr=r(MA,"The model class to instantiate is selected based on the "),K0e=n(MA,"CODE",{});var awt=s(K0e);Dbr=r(awt,"model_type"),awt.forEach(t),Gbr=r(MA,` property of the config object (either
passed as an argument or loaded from `),Z0e=n(MA,"CODE",{});var nwt=s(Z0e);Obr=r(nwt,"pretrained_model_name_or_path"),nwt.forEach(t),Vbr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=n(MA,"CODE",{});var swt=s(eFe);Xbr=r(swt,"pretrained_model_name_or_path"),swt.forEach(t),zbr=r(MA,":"),MA.forEach(t),Wbr=i(Al),se=n(Al,"UL",{});var le=s(se);B9=n(le,"LI",{});var gIe=s(B9);oFe=n(gIe,"STRONG",{});var lwt=s(oFe);Qbr=r(lwt,"albert"),lwt.forEach(t),Hbr=r(gIe," \u2014 "),OH=n(gIe,"A",{href:!0});var iwt=s(OH);Ubr=r(iwt,"TFAlbertForPreTraining"),iwt.forEach(t),Jbr=r(gIe," (ALBERT model)"),gIe.forEach(t),Ybr=i(le),I9=n(le,"LI",{});var hIe=s(I9);rFe=n(hIe,"STRONG",{});var dwt=s(rFe);Kbr=r(dwt,"bart"),dwt.forEach(t),Zbr=r(hIe," \u2014 "),VH=n(hIe,"A",{href:!0});var cwt=s(VH);evr=r(cwt,"TFBartForConditionalGeneration"),cwt.forEach(t),ovr=r(hIe," (BART model)"),hIe.forEach(t),rvr=i(le),N9=n(le,"LI",{});var pIe=s(N9);tFe=n(pIe,"STRONG",{});var fwt=s(tFe);tvr=r(fwt,"bert"),fwt.forEach(t),avr=r(pIe," \u2014 "),XH=n(pIe,"A",{href:!0});var mwt=s(XH);nvr=r(mwt,"TFBertForPreTraining"),mwt.forEach(t),svr=r(pIe," (BERT model)"),pIe.forEach(t),lvr=i(le),q9=n(le,"LI",{});var uIe=s(q9);aFe=n(uIe,"STRONG",{});var gwt=s(aFe);ivr=r(gwt,"camembert"),gwt.forEach(t),dvr=r(uIe," \u2014 "),zH=n(uIe,"A",{href:!0});var hwt=s(zH);cvr=r(hwt,"TFCamembertForMaskedLM"),hwt.forEach(t),fvr=r(uIe," (CamemBERT model)"),uIe.forEach(t),mvr=i(le),j9=n(le,"LI",{});var _Ie=s(j9);nFe=n(_Ie,"STRONG",{});var pwt=s(nFe);gvr=r(pwt,"ctrl"),pwt.forEach(t),hvr=r(_Ie," \u2014 "),WH=n(_Ie,"A",{href:!0});var uwt=s(WH);pvr=r(uwt,"TFCTRLLMHeadModel"),uwt.forEach(t),uvr=r(_Ie," (CTRL model)"),_Ie.forEach(t),_vr=i(le),D9=n(le,"LI",{});var bIe=s(D9);sFe=n(bIe,"STRONG",{});var _wt=s(sFe);bvr=r(_wt,"distilbert"),_wt.forEach(t),vvr=r(bIe," \u2014 "),QH=n(bIe,"A",{href:!0});var bwt=s(QH);Fvr=r(bwt,"TFDistilBertForMaskedLM"),bwt.forEach(t),Tvr=r(bIe," (DistilBERT model)"),bIe.forEach(t),Mvr=i(le),G9=n(le,"LI",{});var vIe=s(G9);lFe=n(vIe,"STRONG",{});var vwt=s(lFe);Evr=r(vwt,"electra"),vwt.forEach(t),Cvr=r(vIe," \u2014 "),HH=n(vIe,"A",{href:!0});var Fwt=s(HH);wvr=r(Fwt,"TFElectraForPreTraining"),Fwt.forEach(t),Avr=r(vIe," (ELECTRA model)"),vIe.forEach(t),Lvr=i(le),O9=n(le,"LI",{});var FIe=s(O9);iFe=n(FIe,"STRONG",{});var Twt=s(iFe);yvr=r(Twt,"flaubert"),Twt.forEach(t),xvr=r(FIe," \u2014 "),UH=n(FIe,"A",{href:!0});var Mwt=s(UH);$vr=r(Mwt,"TFFlaubertWithLMHeadModel"),Mwt.forEach(t),kvr=r(FIe," (FlauBERT model)"),FIe.forEach(t),Svr=i(le),V9=n(le,"LI",{});var TIe=s(V9);dFe=n(TIe,"STRONG",{});var Ewt=s(dFe);Rvr=r(Ewt,"funnel"),Ewt.forEach(t),Pvr=r(TIe," \u2014 "),JH=n(TIe,"A",{href:!0});var Cwt=s(JH);Bvr=r(Cwt,"TFFunnelForPreTraining"),Cwt.forEach(t),Ivr=r(TIe," (Funnel Transformer model)"),TIe.forEach(t),Nvr=i(le),X9=n(le,"LI",{});var MIe=s(X9);cFe=n(MIe,"STRONG",{});var wwt=s(cFe);qvr=r(wwt,"gpt2"),wwt.forEach(t),jvr=r(MIe," \u2014 "),YH=n(MIe,"A",{href:!0});var Awt=s(YH);Dvr=r(Awt,"TFGPT2LMHeadModel"),Awt.forEach(t),Gvr=r(MIe," (OpenAI GPT-2 model)"),MIe.forEach(t),Ovr=i(le),z9=n(le,"LI",{});var EIe=s(z9);fFe=n(EIe,"STRONG",{});var Lwt=s(fFe);Vvr=r(Lwt,"layoutlm"),Lwt.forEach(t),Xvr=r(EIe," \u2014 "),KH=n(EIe,"A",{href:!0});var ywt=s(KH);zvr=r(ywt,"TFLayoutLMForMaskedLM"),ywt.forEach(t),Wvr=r(EIe," (LayoutLM model)"),EIe.forEach(t),Qvr=i(le),W9=n(le,"LI",{});var CIe=s(W9);mFe=n(CIe,"STRONG",{});var xwt=s(mFe);Hvr=r(xwt,"lxmert"),xwt.forEach(t),Uvr=r(CIe," \u2014 "),ZH=n(CIe,"A",{href:!0});var $wt=s(ZH);Jvr=r($wt,"TFLxmertForPreTraining"),$wt.forEach(t),Yvr=r(CIe," (LXMERT model)"),CIe.forEach(t),Kvr=i(le),Q9=n(le,"LI",{});var wIe=s(Q9);gFe=n(wIe,"STRONG",{});var kwt=s(gFe);Zvr=r(kwt,"mobilebert"),kwt.forEach(t),e0r=r(wIe," \u2014 "),eU=n(wIe,"A",{href:!0});var Swt=s(eU);o0r=r(Swt,"TFMobileBertForPreTraining"),Swt.forEach(t),r0r=r(wIe," (MobileBERT model)"),wIe.forEach(t),t0r=i(le),H9=n(le,"LI",{});var AIe=s(H9);hFe=n(AIe,"STRONG",{});var Rwt=s(hFe);a0r=r(Rwt,"mpnet"),Rwt.forEach(t),n0r=r(AIe," \u2014 "),oU=n(AIe,"A",{href:!0});var Pwt=s(oU);s0r=r(Pwt,"TFMPNetForMaskedLM"),Pwt.forEach(t),l0r=r(AIe," (MPNet model)"),AIe.forEach(t),i0r=i(le),U9=n(le,"LI",{});var LIe=s(U9);pFe=n(LIe,"STRONG",{});var Bwt=s(pFe);d0r=r(Bwt,"openai-gpt"),Bwt.forEach(t),c0r=r(LIe," \u2014 "),rU=n(LIe,"A",{href:!0});var Iwt=s(rU);f0r=r(Iwt,"TFOpenAIGPTLMHeadModel"),Iwt.forEach(t),m0r=r(LIe," (OpenAI GPT model)"),LIe.forEach(t),g0r=i(le),J9=n(le,"LI",{});var yIe=s(J9);uFe=n(yIe,"STRONG",{});var Nwt=s(uFe);h0r=r(Nwt,"roberta"),Nwt.forEach(t),p0r=r(yIe," \u2014 "),tU=n(yIe,"A",{href:!0});var qwt=s(tU);u0r=r(qwt,"TFRobertaForMaskedLM"),qwt.forEach(t),_0r=r(yIe," (RoBERTa model)"),yIe.forEach(t),b0r=i(le),Y9=n(le,"LI",{});var xIe=s(Y9);_Fe=n(xIe,"STRONG",{});var jwt=s(_Fe);v0r=r(jwt,"t5"),jwt.forEach(t),F0r=r(xIe," \u2014 "),aU=n(xIe,"A",{href:!0});var Dwt=s(aU);T0r=r(Dwt,"TFT5ForConditionalGeneration"),Dwt.forEach(t),M0r=r(xIe," (T5 model)"),xIe.forEach(t),E0r=i(le),K9=n(le,"LI",{});var $Ie=s(K9);bFe=n($Ie,"STRONG",{});var Gwt=s(bFe);C0r=r(Gwt,"tapas"),Gwt.forEach(t),w0r=r($Ie," \u2014 "),nU=n($Ie,"A",{href:!0});var Owt=s(nU);A0r=r(Owt,"TFTapasForMaskedLM"),Owt.forEach(t),L0r=r($Ie," (TAPAS model)"),$Ie.forEach(t),y0r=i(le),Z9=n(le,"LI",{});var kIe=s(Z9);vFe=n(kIe,"STRONG",{});var Vwt=s(vFe);x0r=r(Vwt,"transfo-xl"),Vwt.forEach(t),$0r=r(kIe," \u2014 "),sU=n(kIe,"A",{href:!0});var Xwt=s(sU);k0r=r(Xwt,"TFTransfoXLLMHeadModel"),Xwt.forEach(t),S0r=r(kIe," (Transformer-XL model)"),kIe.forEach(t),R0r=i(le),eM=n(le,"LI",{});var SIe=s(eM);FFe=n(SIe,"STRONG",{});var zwt=s(FFe);P0r=r(zwt,"vit_mae"),zwt.forEach(t),B0r=r(SIe," \u2014 "),lU=n(SIe,"A",{href:!0});var Wwt=s(lU);I0r=r(Wwt,"TFViTMAEForPreTraining"),Wwt.forEach(t),N0r=r(SIe," (ViTMAE model)"),SIe.forEach(t),q0r=i(le),oM=n(le,"LI",{});var RIe=s(oM);TFe=n(RIe,"STRONG",{});var Qwt=s(TFe);j0r=r(Qwt,"xlm"),Qwt.forEach(t),D0r=r(RIe," \u2014 "),iU=n(RIe,"A",{href:!0});var Hwt=s(iU);G0r=r(Hwt,"TFXLMWithLMHeadModel"),Hwt.forEach(t),O0r=r(RIe," (XLM model)"),RIe.forEach(t),V0r=i(le),rM=n(le,"LI",{});var PIe=s(rM);MFe=n(PIe,"STRONG",{});var Uwt=s(MFe);X0r=r(Uwt,"xlm-roberta"),Uwt.forEach(t),z0r=r(PIe," \u2014 "),dU=n(PIe,"A",{href:!0});var Jwt=s(dU);W0r=r(Jwt,"TFXLMRobertaForMaskedLM"),Jwt.forEach(t),Q0r=r(PIe," (XLM-RoBERTa model)"),PIe.forEach(t),H0r=i(le),tM=n(le,"LI",{});var BIe=s(tM);EFe=n(BIe,"STRONG",{});var Ywt=s(EFe);U0r=r(Ywt,"xlnet"),Ywt.forEach(t),J0r=r(BIe," \u2014 "),cU=n(BIe,"A",{href:!0});var Kwt=s(cU);Y0r=r(Kwt,"TFXLNetLMHeadModel"),Kwt.forEach(t),K0r=r(BIe," (XLNet model)"),BIe.forEach(t),le.forEach(t),Z0r=i(Al),T(aM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),MOe=i(f),sc=n(f,"H2",{class:!0});var $Xe=s(sc);nM=n($Xe,"A",{id:!0,class:!0,href:!0});var Zwt=s(nM);CFe=n(Zwt,"SPAN",{});var eAt=s(CFe);T(b8.$$.fragment,eAt),eAt.forEach(t),Zwt.forEach(t),eFr=i($Xe),wFe=n($Xe,"SPAN",{});var oAt=s(wFe);oFr=r(oAt,"TFAutoModelForCausalLM"),oAt.forEach(t),$Xe.forEach(t),EOe=i(f),or=n(f,"DIV",{class:!0});var Ll=s(or);T(v8.$$.fragment,Ll),rFr=i(Ll),lc=n(Ll,"P",{});var are=s(lc);tFr=r(are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fU=n(are,"A",{href:!0});var rAt=s(fU);aFr=r(rAt,"from_pretrained()"),rAt.forEach(t),nFr=r(are," class method or the "),mU=n(are,"A",{href:!0});var tAt=s(mU);sFr=r(tAt,"from_config()"),tAt.forEach(t),lFr=r(are,` class
method.`),are.forEach(t),iFr=i(Ll),F8=n(Ll,"P",{});var kXe=s(F8);dFr=r(kXe,"This class cannot be instantiated directly using "),AFe=n(kXe,"CODE",{});var aAt=s(AFe);cFr=r(aAt,"__init__()"),aAt.forEach(t),fFr=r(kXe," (throws an error)."),kXe.forEach(t),mFr=i(Ll),St=n(Ll,"DIV",{class:!0});var EA=s(St);T(T8.$$.fragment,EA),gFr=i(EA),LFe=n(EA,"P",{});var nAt=s(LFe);hFr=r(nAt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nAt.forEach(t),pFr=i(EA),ic=n(EA,"P",{});var nre=s(ic);uFr=r(nre,`Note:
Loading a model from its configuration file does `),yFe=n(nre,"STRONG",{});var sAt=s(yFe);_Fr=r(sAt,"not"),sAt.forEach(t),bFr=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(nre,"A",{href:!0});var lAt=s(gU);vFr=r(lAt,"from_pretrained()"),lAt.forEach(t),FFr=r(nre," to load the model weights."),nre.forEach(t),TFr=i(EA),T(sM.$$.fragment,EA),EA.forEach(t),MFr=i(Ll),xr=n(Ll,"DIV",{class:!0});var yl=s(xr);T(M8.$$.fragment,yl),EFr=i(yl),xFe=n(yl,"P",{});var iAt=s(xFe);CFr=r(iAt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iAt.forEach(t),wFr=i(yl),nn=n(yl,"P",{});var CA=s(nn);AFr=r(CA,"The model class to instantiate is selected based on the "),$Fe=n(CA,"CODE",{});var dAt=s($Fe);LFr=r(dAt,"model_type"),dAt.forEach(t),yFr=r(CA,` property of the config object (either
passed as an argument or loaded from `),kFe=n(CA,"CODE",{});var cAt=s(kFe);xFr=r(cAt,"pretrained_model_name_or_path"),cAt.forEach(t),$Fr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=n(CA,"CODE",{});var fAt=s(SFe);kFr=r(fAt,"pretrained_model_name_or_path"),fAt.forEach(t),SFr=r(CA,":"),CA.forEach(t),RFr=i(yl),Me=n(yl,"UL",{});var Ce=s(Me);lM=n(Ce,"LI",{});var IIe=s(lM);RFe=n(IIe,"STRONG",{});var mAt=s(RFe);PFr=r(mAt,"bert"),mAt.forEach(t),BFr=r(IIe," \u2014 "),hU=n(IIe,"A",{href:!0});var gAt=s(hU);IFr=r(gAt,"TFBertLMHeadModel"),gAt.forEach(t),NFr=r(IIe," (BERT model)"),IIe.forEach(t),qFr=i(Ce),iM=n(Ce,"LI",{});var NIe=s(iM);PFe=n(NIe,"STRONG",{});var hAt=s(PFe);jFr=r(hAt,"camembert"),hAt.forEach(t),DFr=r(NIe," \u2014 "),pU=n(NIe,"A",{href:!0});var pAt=s(pU);GFr=r(pAt,"TFCamembertForCausalLM"),pAt.forEach(t),OFr=r(NIe," (CamemBERT model)"),NIe.forEach(t),VFr=i(Ce),dM=n(Ce,"LI",{});var qIe=s(dM);BFe=n(qIe,"STRONG",{});var uAt=s(BFe);XFr=r(uAt,"ctrl"),uAt.forEach(t),zFr=r(qIe," \u2014 "),uU=n(qIe,"A",{href:!0});var _At=s(uU);WFr=r(_At,"TFCTRLLMHeadModel"),_At.forEach(t),QFr=r(qIe," (CTRL model)"),qIe.forEach(t),HFr=i(Ce),cM=n(Ce,"LI",{});var jIe=s(cM);IFe=n(jIe,"STRONG",{});var bAt=s(IFe);UFr=r(bAt,"gpt2"),bAt.forEach(t),JFr=r(jIe," \u2014 "),_U=n(jIe,"A",{href:!0});var vAt=s(_U);YFr=r(vAt,"TFGPT2LMHeadModel"),vAt.forEach(t),KFr=r(jIe," (OpenAI GPT-2 model)"),jIe.forEach(t),ZFr=i(Ce),fM=n(Ce,"LI",{});var DIe=s(fM);NFe=n(DIe,"STRONG",{});var FAt=s(NFe);eTr=r(FAt,"gptj"),FAt.forEach(t),oTr=r(DIe," \u2014 "),bU=n(DIe,"A",{href:!0});var TAt=s(bU);rTr=r(TAt,"TFGPTJForCausalLM"),TAt.forEach(t),tTr=r(DIe," (GPT-J model)"),DIe.forEach(t),aTr=i(Ce),mM=n(Ce,"LI",{});var GIe=s(mM);qFe=n(GIe,"STRONG",{});var MAt=s(qFe);nTr=r(MAt,"openai-gpt"),MAt.forEach(t),sTr=r(GIe," \u2014 "),vU=n(GIe,"A",{href:!0});var EAt=s(vU);lTr=r(EAt,"TFOpenAIGPTLMHeadModel"),EAt.forEach(t),iTr=r(GIe," (OpenAI GPT model)"),GIe.forEach(t),dTr=i(Ce),gM=n(Ce,"LI",{});var OIe=s(gM);jFe=n(OIe,"STRONG",{});var CAt=s(jFe);cTr=r(CAt,"opt"),CAt.forEach(t),fTr=r(OIe," \u2014 "),FU=n(OIe,"A",{href:!0});var wAt=s(FU);mTr=r(wAt,"TFOPTForCausalLM"),wAt.forEach(t),gTr=r(OIe," (OPT model)"),OIe.forEach(t),hTr=i(Ce),hM=n(Ce,"LI",{});var VIe=s(hM);DFe=n(VIe,"STRONG",{});var AAt=s(DFe);pTr=r(AAt,"rembert"),AAt.forEach(t),uTr=r(VIe," \u2014 "),TU=n(VIe,"A",{href:!0});var LAt=s(TU);_Tr=r(LAt,"TFRemBertForCausalLM"),LAt.forEach(t),bTr=r(VIe," (RemBERT model)"),VIe.forEach(t),vTr=i(Ce),pM=n(Ce,"LI",{});var XIe=s(pM);GFe=n(XIe,"STRONG",{});var yAt=s(GFe);FTr=r(yAt,"roberta"),yAt.forEach(t),TTr=r(XIe," \u2014 "),MU=n(XIe,"A",{href:!0});var xAt=s(MU);MTr=r(xAt,"TFRobertaForCausalLM"),xAt.forEach(t),ETr=r(XIe," (RoBERTa model)"),XIe.forEach(t),CTr=i(Ce),uM=n(Ce,"LI",{});var zIe=s(uM);OFe=n(zIe,"STRONG",{});var $At=s(OFe);wTr=r($At,"roformer"),$At.forEach(t),ATr=r(zIe," \u2014 "),EU=n(zIe,"A",{href:!0});var kAt=s(EU);LTr=r(kAt,"TFRoFormerForCausalLM"),kAt.forEach(t),yTr=r(zIe," (RoFormer model)"),zIe.forEach(t),xTr=i(Ce),_M=n(Ce,"LI",{});var WIe=s(_M);VFe=n(WIe,"STRONG",{});var SAt=s(VFe);$Tr=r(SAt,"transfo-xl"),SAt.forEach(t),kTr=r(WIe," \u2014 "),CU=n(WIe,"A",{href:!0});var RAt=s(CU);STr=r(RAt,"TFTransfoXLLMHeadModel"),RAt.forEach(t),RTr=r(WIe," (Transformer-XL model)"),WIe.forEach(t),PTr=i(Ce),bM=n(Ce,"LI",{});var QIe=s(bM);XFe=n(QIe,"STRONG",{});var PAt=s(XFe);BTr=r(PAt,"xlm"),PAt.forEach(t),ITr=r(QIe," \u2014 "),wU=n(QIe,"A",{href:!0});var BAt=s(wU);NTr=r(BAt,"TFXLMWithLMHeadModel"),BAt.forEach(t),qTr=r(QIe," (XLM model)"),QIe.forEach(t),jTr=i(Ce),vM=n(Ce,"LI",{});var HIe=s(vM);zFe=n(HIe,"STRONG",{});var IAt=s(zFe);DTr=r(IAt,"xlnet"),IAt.forEach(t),GTr=r(HIe," \u2014 "),AU=n(HIe,"A",{href:!0});var NAt=s(AU);OTr=r(NAt,"TFXLNetLMHeadModel"),NAt.forEach(t),VTr=r(HIe," (XLNet model)"),HIe.forEach(t),Ce.forEach(t),XTr=i(yl),T(FM.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),COe=i(f),dc=n(f,"H2",{class:!0});var SXe=s(dc);TM=n(SXe,"A",{id:!0,class:!0,href:!0});var qAt=s(TM);WFe=n(qAt,"SPAN",{});var jAt=s(WFe);T(E8.$$.fragment,jAt),jAt.forEach(t),qAt.forEach(t),zTr=i(SXe),QFe=n(SXe,"SPAN",{});var DAt=s(QFe);WTr=r(DAt,"TFAutoModelForImageClassification"),DAt.forEach(t),SXe.forEach(t),wOe=i(f),rr=n(f,"DIV",{class:!0});var xl=s(rr);T(C8.$$.fragment,xl),QTr=i(xl),cc=n(xl,"P",{});var sre=s(cc);HTr=r(sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LU=n(sre,"A",{href:!0});var GAt=s(LU);UTr=r(GAt,"from_pretrained()"),GAt.forEach(t),JTr=r(sre," class method or the "),yU=n(sre,"A",{href:!0});var OAt=s(yU);YTr=r(OAt,"from_config()"),OAt.forEach(t),KTr=r(sre,` class
method.`),sre.forEach(t),ZTr=i(xl),w8=n(xl,"P",{});var RXe=s(w8);e7r=r(RXe,"This class cannot be instantiated directly using "),HFe=n(RXe,"CODE",{});var VAt=s(HFe);o7r=r(VAt,"__init__()"),VAt.forEach(t),r7r=r(RXe," (throws an error)."),RXe.forEach(t),t7r=i(xl),Rt=n(xl,"DIV",{class:!0});var wA=s(Rt);T(A8.$$.fragment,wA),a7r=i(wA),UFe=n(wA,"P",{});var XAt=s(UFe);n7r=r(XAt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),XAt.forEach(t),s7r=i(wA),fc=n(wA,"P",{});var lre=s(fc);l7r=r(lre,`Note:
Loading a model from its configuration file does `),JFe=n(lre,"STRONG",{});var zAt=s(JFe);i7r=r(zAt,"not"),zAt.forEach(t),d7r=r(lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=n(lre,"A",{href:!0});var WAt=s(xU);c7r=r(WAt,"from_pretrained()"),WAt.forEach(t),f7r=r(lre," to load the model weights."),lre.forEach(t),m7r=i(wA),T(MM.$$.fragment,wA),wA.forEach(t),g7r=i(xl),$r=n(xl,"DIV",{class:!0});var $l=s($r);T(L8.$$.fragment,$l),h7r=i($l),YFe=n($l,"P",{});var QAt=s(YFe);p7r=r(QAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QAt.forEach(t),u7r=i($l),sn=n($l,"P",{});var AA=s(sn);_7r=r(AA,"The model class to instantiate is selected based on the "),KFe=n(AA,"CODE",{});var HAt=s(KFe);b7r=r(HAt,"model_type"),HAt.forEach(t),v7r=r(AA,` property of the config object (either
passed as an argument or loaded from `),ZFe=n(AA,"CODE",{});var UAt=s(ZFe);F7r=r(UAt,"pretrained_model_name_or_path"),UAt.forEach(t),T7r=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eTe=n(AA,"CODE",{});var JAt=s(eTe);M7r=r(JAt,"pretrained_model_name_or_path"),JAt.forEach(t),E7r=r(AA,":"),AA.forEach(t),C7r=i($l),ln=n($l,"UL",{});var LA=s(ln);EM=n(LA,"LI",{});var UIe=s(EM);oTe=n(UIe,"STRONG",{});var YAt=s(oTe);w7r=r(YAt,"convnext"),YAt.forEach(t),A7r=r(UIe," \u2014 "),$U=n(UIe,"A",{href:!0});var KAt=s($U);L7r=r(KAt,"TFConvNextForImageClassification"),KAt.forEach(t),y7r=r(UIe," (ConvNeXT model)"),UIe.forEach(t),x7r=i(LA),CM=n(LA,"LI",{});var JIe=s(CM);rTe=n(JIe,"STRONG",{});var ZAt=s(rTe);$7r=r(ZAt,"data2vec-vision"),ZAt.forEach(t),k7r=r(JIe," \u2014 "),kU=n(JIe,"A",{href:!0});var e6t=s(kU);S7r=r(e6t,"TFData2VecVisionForImageClassification"),e6t.forEach(t),R7r=r(JIe," (Data2VecVision model)"),JIe.forEach(t),P7r=i(LA),wM=n(LA,"LI",{});var YIe=s(wM);tTe=n(YIe,"STRONG",{});var o6t=s(tTe);B7r=r(o6t,"swin"),o6t.forEach(t),I7r=r(YIe," \u2014 "),SU=n(YIe,"A",{href:!0});var r6t=s(SU);N7r=r(r6t,"TFSwinForImageClassification"),r6t.forEach(t),q7r=r(YIe," (Swin Transformer model)"),YIe.forEach(t),j7r=i(LA),AM=n(LA,"LI",{});var KIe=s(AM);aTe=n(KIe,"STRONG",{});var t6t=s(aTe);D7r=r(t6t,"vit"),t6t.forEach(t),G7r=r(KIe," \u2014 "),RU=n(KIe,"A",{href:!0});var a6t=s(RU);O7r=r(a6t,"TFViTForImageClassification"),a6t.forEach(t),V7r=r(KIe," (ViT model)"),KIe.forEach(t),LA.forEach(t),X7r=i($l),T(LM.$$.fragment,$l),$l.forEach(t),xl.forEach(t),AOe=i(f),mc=n(f,"H2",{class:!0});var PXe=s(mc);yM=n(PXe,"A",{id:!0,class:!0,href:!0});var n6t=s(yM);nTe=n(n6t,"SPAN",{});var s6t=s(nTe);T(y8.$$.fragment,s6t),s6t.forEach(t),n6t.forEach(t),z7r=i(PXe),sTe=n(PXe,"SPAN",{});var l6t=s(sTe);W7r=r(l6t,"TFAutoModelForMaskedLM"),l6t.forEach(t),PXe.forEach(t),LOe=i(f),tr=n(f,"DIV",{class:!0});var kl=s(tr);T(x8.$$.fragment,kl),Q7r=i(kl),gc=n(kl,"P",{});var ire=s(gc);H7r=r(ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PU=n(ire,"A",{href:!0});var i6t=s(PU);U7r=r(i6t,"from_pretrained()"),i6t.forEach(t),J7r=r(ire," class method or the "),BU=n(ire,"A",{href:!0});var d6t=s(BU);Y7r=r(d6t,"from_config()"),d6t.forEach(t),K7r=r(ire,` class
method.`),ire.forEach(t),Z7r=i(kl),$8=n(kl,"P",{});var BXe=s($8);e9r=r(BXe,"This class cannot be instantiated directly using "),lTe=n(BXe,"CODE",{});var c6t=s(lTe);o9r=r(c6t,"__init__()"),c6t.forEach(t),r9r=r(BXe," (throws an error)."),BXe.forEach(t),t9r=i(kl),Pt=n(kl,"DIV",{class:!0});var yA=s(Pt);T(k8.$$.fragment,yA),a9r=i(yA),iTe=n(yA,"P",{});var f6t=s(iTe);n9r=r(f6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),f6t.forEach(t),s9r=i(yA),hc=n(yA,"P",{});var dre=s(hc);l9r=r(dre,`Note:
Loading a model from its configuration file does `),dTe=n(dre,"STRONG",{});var m6t=s(dTe);i9r=r(m6t,"not"),m6t.forEach(t),d9r=r(dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=n(dre,"A",{href:!0});var g6t=s(IU);c9r=r(g6t,"from_pretrained()"),g6t.forEach(t),f9r=r(dre," to load the model weights."),dre.forEach(t),m9r=i(yA),T(xM.$$.fragment,yA),yA.forEach(t),g9r=i(kl),kr=n(kl,"DIV",{class:!0});var Sl=s(kr);T(S8.$$.fragment,Sl),h9r=i(Sl),cTe=n(Sl,"P",{});var h6t=s(cTe);p9r=r(h6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),h6t.forEach(t),u9r=i(Sl),dn=n(Sl,"P",{});var xA=s(dn);_9r=r(xA,"The model class to instantiate is selected based on the "),fTe=n(xA,"CODE",{});var p6t=s(fTe);b9r=r(p6t,"model_type"),p6t.forEach(t),v9r=r(xA,` property of the config object (either
passed as an argument or loaded from `),mTe=n(xA,"CODE",{});var u6t=s(mTe);F9r=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),T9r=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=n(xA,"CODE",{});var _6t=s(gTe);M9r=r(_6t,"pretrained_model_name_or_path"),_6t.forEach(t),E9r=r(xA,":"),xA.forEach(t),C9r=i(Sl),ie=n(Sl,"UL",{});var fe=s(ie);$M=n(fe,"LI",{});var ZIe=s($M);hTe=n(ZIe,"STRONG",{});var b6t=s(hTe);w9r=r(b6t,"albert"),b6t.forEach(t),A9r=r(ZIe," \u2014 "),NU=n(ZIe,"A",{href:!0});var v6t=s(NU);L9r=r(v6t,"TFAlbertForMaskedLM"),v6t.forEach(t),y9r=r(ZIe," (ALBERT model)"),ZIe.forEach(t),x9r=i(fe),kM=n(fe,"LI",{});var eNe=s(kM);pTe=n(eNe,"STRONG",{});var F6t=s(pTe);$9r=r(F6t,"bert"),F6t.forEach(t),k9r=r(eNe," \u2014 "),qU=n(eNe,"A",{href:!0});var T6t=s(qU);S9r=r(T6t,"TFBertForMaskedLM"),T6t.forEach(t),R9r=r(eNe," (BERT model)"),eNe.forEach(t),P9r=i(fe),SM=n(fe,"LI",{});var oNe=s(SM);uTe=n(oNe,"STRONG",{});var M6t=s(uTe);B9r=r(M6t,"camembert"),M6t.forEach(t),I9r=r(oNe," \u2014 "),jU=n(oNe,"A",{href:!0});var E6t=s(jU);N9r=r(E6t,"TFCamembertForMaskedLM"),E6t.forEach(t),q9r=r(oNe," (CamemBERT model)"),oNe.forEach(t),j9r=i(fe),RM=n(fe,"LI",{});var rNe=s(RM);_Te=n(rNe,"STRONG",{});var C6t=s(_Te);D9r=r(C6t,"convbert"),C6t.forEach(t),G9r=r(rNe," \u2014 "),DU=n(rNe,"A",{href:!0});var w6t=s(DU);O9r=r(w6t,"TFConvBertForMaskedLM"),w6t.forEach(t),V9r=r(rNe," (ConvBERT model)"),rNe.forEach(t),X9r=i(fe),PM=n(fe,"LI",{});var tNe=s(PM);bTe=n(tNe,"STRONG",{});var A6t=s(bTe);z9r=r(A6t,"deberta"),A6t.forEach(t),W9r=r(tNe," \u2014 "),GU=n(tNe,"A",{href:!0});var L6t=s(GU);Q9r=r(L6t,"TFDebertaForMaskedLM"),L6t.forEach(t),H9r=r(tNe," (DeBERTa model)"),tNe.forEach(t),U9r=i(fe),BM=n(fe,"LI",{});var aNe=s(BM);vTe=n(aNe,"STRONG",{});var y6t=s(vTe);J9r=r(y6t,"deberta-v2"),y6t.forEach(t),Y9r=r(aNe," \u2014 "),OU=n(aNe,"A",{href:!0});var x6t=s(OU);K9r=r(x6t,"TFDebertaV2ForMaskedLM"),x6t.forEach(t),Z9r=r(aNe," (DeBERTa-v2 model)"),aNe.forEach(t),eMr=i(fe),IM=n(fe,"LI",{});var nNe=s(IM);FTe=n(nNe,"STRONG",{});var $6t=s(FTe);oMr=r($6t,"distilbert"),$6t.forEach(t),rMr=r(nNe," \u2014 "),VU=n(nNe,"A",{href:!0});var k6t=s(VU);tMr=r(k6t,"TFDistilBertForMaskedLM"),k6t.forEach(t),aMr=r(nNe," (DistilBERT model)"),nNe.forEach(t),nMr=i(fe),NM=n(fe,"LI",{});var sNe=s(NM);TTe=n(sNe,"STRONG",{});var S6t=s(TTe);sMr=r(S6t,"electra"),S6t.forEach(t),lMr=r(sNe," \u2014 "),XU=n(sNe,"A",{href:!0});var R6t=s(XU);iMr=r(R6t,"TFElectraForMaskedLM"),R6t.forEach(t),dMr=r(sNe," (ELECTRA model)"),sNe.forEach(t),cMr=i(fe),qM=n(fe,"LI",{});var lNe=s(qM);MTe=n(lNe,"STRONG",{});var P6t=s(MTe);fMr=r(P6t,"flaubert"),P6t.forEach(t),mMr=r(lNe," \u2014 "),zU=n(lNe,"A",{href:!0});var B6t=s(zU);gMr=r(B6t,"TFFlaubertWithLMHeadModel"),B6t.forEach(t),hMr=r(lNe," (FlauBERT model)"),lNe.forEach(t),pMr=i(fe),jM=n(fe,"LI",{});var iNe=s(jM);ETe=n(iNe,"STRONG",{});var I6t=s(ETe);uMr=r(I6t,"funnel"),I6t.forEach(t),_Mr=r(iNe," \u2014 "),WU=n(iNe,"A",{href:!0});var N6t=s(WU);bMr=r(N6t,"TFFunnelForMaskedLM"),N6t.forEach(t),vMr=r(iNe," (Funnel Transformer model)"),iNe.forEach(t),FMr=i(fe),DM=n(fe,"LI",{});var dNe=s(DM);CTe=n(dNe,"STRONG",{});var q6t=s(CTe);TMr=r(q6t,"layoutlm"),q6t.forEach(t),MMr=r(dNe," \u2014 "),QU=n(dNe,"A",{href:!0});var j6t=s(QU);EMr=r(j6t,"TFLayoutLMForMaskedLM"),j6t.forEach(t),CMr=r(dNe," (LayoutLM model)"),dNe.forEach(t),wMr=i(fe),GM=n(fe,"LI",{});var cNe=s(GM);wTe=n(cNe,"STRONG",{});var D6t=s(wTe);AMr=r(D6t,"longformer"),D6t.forEach(t),LMr=r(cNe," \u2014 "),HU=n(cNe,"A",{href:!0});var G6t=s(HU);yMr=r(G6t,"TFLongformerForMaskedLM"),G6t.forEach(t),xMr=r(cNe," (Longformer model)"),cNe.forEach(t),$Mr=i(fe),OM=n(fe,"LI",{});var fNe=s(OM);ATe=n(fNe,"STRONG",{});var O6t=s(ATe);kMr=r(O6t,"mobilebert"),O6t.forEach(t),SMr=r(fNe," \u2014 "),UU=n(fNe,"A",{href:!0});var V6t=s(UU);RMr=r(V6t,"TFMobileBertForMaskedLM"),V6t.forEach(t),PMr=r(fNe," (MobileBERT model)"),fNe.forEach(t),BMr=i(fe),VM=n(fe,"LI",{});var mNe=s(VM);LTe=n(mNe,"STRONG",{});var X6t=s(LTe);IMr=r(X6t,"mpnet"),X6t.forEach(t),NMr=r(mNe," \u2014 "),JU=n(mNe,"A",{href:!0});var z6t=s(JU);qMr=r(z6t,"TFMPNetForMaskedLM"),z6t.forEach(t),jMr=r(mNe," (MPNet model)"),mNe.forEach(t),DMr=i(fe),XM=n(fe,"LI",{});var gNe=s(XM);yTe=n(gNe,"STRONG",{});var W6t=s(yTe);GMr=r(W6t,"rembert"),W6t.forEach(t),OMr=r(gNe," \u2014 "),YU=n(gNe,"A",{href:!0});var Q6t=s(YU);VMr=r(Q6t,"TFRemBertForMaskedLM"),Q6t.forEach(t),XMr=r(gNe," (RemBERT model)"),gNe.forEach(t),zMr=i(fe),zM=n(fe,"LI",{});var hNe=s(zM);xTe=n(hNe,"STRONG",{});var H6t=s(xTe);WMr=r(H6t,"roberta"),H6t.forEach(t),QMr=r(hNe," \u2014 "),KU=n(hNe,"A",{href:!0});var U6t=s(KU);HMr=r(U6t,"TFRobertaForMaskedLM"),U6t.forEach(t),UMr=r(hNe," (RoBERTa model)"),hNe.forEach(t),JMr=i(fe),WM=n(fe,"LI",{});var pNe=s(WM);$Te=n(pNe,"STRONG",{});var J6t=s($Te);YMr=r(J6t,"roformer"),J6t.forEach(t),KMr=r(pNe," \u2014 "),ZU=n(pNe,"A",{href:!0});var Y6t=s(ZU);ZMr=r(Y6t,"TFRoFormerForMaskedLM"),Y6t.forEach(t),eEr=r(pNe," (RoFormer model)"),pNe.forEach(t),oEr=i(fe),QM=n(fe,"LI",{});var uNe=s(QM);kTe=n(uNe,"STRONG",{});var K6t=s(kTe);rEr=r(K6t,"tapas"),K6t.forEach(t),tEr=r(uNe," \u2014 "),eJ=n(uNe,"A",{href:!0});var Z6t=s(eJ);aEr=r(Z6t,"TFTapasForMaskedLM"),Z6t.forEach(t),nEr=r(uNe," (TAPAS model)"),uNe.forEach(t),sEr=i(fe),HM=n(fe,"LI",{});var _Ne=s(HM);STe=n(_Ne,"STRONG",{});var eLt=s(STe);lEr=r(eLt,"xlm"),eLt.forEach(t),iEr=r(_Ne," \u2014 "),oJ=n(_Ne,"A",{href:!0});var oLt=s(oJ);dEr=r(oLt,"TFXLMWithLMHeadModel"),oLt.forEach(t),cEr=r(_Ne," (XLM model)"),_Ne.forEach(t),fEr=i(fe),UM=n(fe,"LI",{});var bNe=s(UM);RTe=n(bNe,"STRONG",{});var rLt=s(RTe);mEr=r(rLt,"xlm-roberta"),rLt.forEach(t),gEr=r(bNe," \u2014 "),rJ=n(bNe,"A",{href:!0});var tLt=s(rJ);hEr=r(tLt,"TFXLMRobertaForMaskedLM"),tLt.forEach(t),pEr=r(bNe," (XLM-RoBERTa model)"),bNe.forEach(t),fe.forEach(t),uEr=i(Sl),T(JM.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),yOe=i(f),pc=n(f,"H2",{class:!0});var IXe=s(pc);YM=n(IXe,"A",{id:!0,class:!0,href:!0});var aLt=s(YM);PTe=n(aLt,"SPAN",{});var nLt=s(PTe);T(R8.$$.fragment,nLt),nLt.forEach(t),aLt.forEach(t),_Er=i(IXe),BTe=n(IXe,"SPAN",{});var sLt=s(BTe);bEr=r(sLt,"TFAutoModelForSeq2SeqLM"),sLt.forEach(t),IXe.forEach(t),xOe=i(f),ar=n(f,"DIV",{class:!0});var Rl=s(ar);T(P8.$$.fragment,Rl),vEr=i(Rl),uc=n(Rl,"P",{});var cre=s(uc);FEr=r(cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tJ=n(cre,"A",{href:!0});var lLt=s(tJ);TEr=r(lLt,"from_pretrained()"),lLt.forEach(t),MEr=r(cre," class method or the "),aJ=n(cre,"A",{href:!0});var iLt=s(aJ);EEr=r(iLt,"from_config()"),iLt.forEach(t),CEr=r(cre,` class
method.`),cre.forEach(t),wEr=i(Rl),B8=n(Rl,"P",{});var NXe=s(B8);AEr=r(NXe,"This class cannot be instantiated directly using "),ITe=n(NXe,"CODE",{});var dLt=s(ITe);LEr=r(dLt,"__init__()"),dLt.forEach(t),yEr=r(NXe," (throws an error)."),NXe.forEach(t),xEr=i(Rl),Bt=n(Rl,"DIV",{class:!0});var $A=s(Bt);T(I8.$$.fragment,$A),$Er=i($A),NTe=n($A,"P",{});var cLt=s(NTe);kEr=r(cLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),cLt.forEach(t),SEr=i($A),_c=n($A,"P",{});var fre=s(_c);REr=r(fre,`Note:
Loading a model from its configuration file does `),qTe=n(fre,"STRONG",{});var fLt=s(qTe);PEr=r(fLt,"not"),fLt.forEach(t),BEr=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(fre,"A",{href:!0});var mLt=s(nJ);IEr=r(mLt,"from_pretrained()"),mLt.forEach(t),NEr=r(fre," to load the model weights."),fre.forEach(t),qEr=i($A),T(KM.$$.fragment,$A),$A.forEach(t),jEr=i(Rl),Sr=n(Rl,"DIV",{class:!0});var Pl=s(Sr);T(N8.$$.fragment,Pl),DEr=i(Pl),jTe=n(Pl,"P",{});var gLt=s(jTe);GEr=r(gLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),gLt.forEach(t),OEr=i(Pl),cn=n(Pl,"P",{});var kA=s(cn);VEr=r(kA,"The model class to instantiate is selected based on the "),DTe=n(kA,"CODE",{});var hLt=s(DTe);XEr=r(hLt,"model_type"),hLt.forEach(t),zEr=r(kA,` property of the config object (either
passed as an argument or loaded from `),GTe=n(kA,"CODE",{});var pLt=s(GTe);WEr=r(pLt,"pretrained_model_name_or_path"),pLt.forEach(t),QEr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OTe=n(kA,"CODE",{});var uLt=s(OTe);HEr=r(uLt,"pretrained_model_name_or_path"),uLt.forEach(t),UEr=r(kA,":"),kA.forEach(t),JEr=i(Pl),ye=n(Pl,"UL",{});var Ie=s(ye);ZM=n(Ie,"LI",{});var vNe=s(ZM);VTe=n(vNe,"STRONG",{});var _Lt=s(VTe);YEr=r(_Lt,"bart"),_Lt.forEach(t),KEr=r(vNe," \u2014 "),sJ=n(vNe,"A",{href:!0});var bLt=s(sJ);ZEr=r(bLt,"TFBartForConditionalGeneration"),bLt.forEach(t),e4r=r(vNe," (BART model)"),vNe.forEach(t),o4r=i(Ie),eE=n(Ie,"LI",{});var FNe=s(eE);XTe=n(FNe,"STRONG",{});var vLt=s(XTe);r4r=r(vLt,"blenderbot"),vLt.forEach(t),t4r=r(FNe," \u2014 "),lJ=n(FNe,"A",{href:!0});var FLt=s(lJ);a4r=r(FLt,"TFBlenderbotForConditionalGeneration"),FLt.forEach(t),n4r=r(FNe," (Blenderbot model)"),FNe.forEach(t),s4r=i(Ie),oE=n(Ie,"LI",{});var TNe=s(oE);zTe=n(TNe,"STRONG",{});var TLt=s(zTe);l4r=r(TLt,"blenderbot-small"),TLt.forEach(t),i4r=r(TNe," \u2014 "),iJ=n(TNe,"A",{href:!0});var MLt=s(iJ);d4r=r(MLt,"TFBlenderbotSmallForConditionalGeneration"),MLt.forEach(t),c4r=r(TNe," (BlenderbotSmall model)"),TNe.forEach(t),f4r=i(Ie),rE=n(Ie,"LI",{});var MNe=s(rE);WTe=n(MNe,"STRONG",{});var ELt=s(WTe);m4r=r(ELt,"encoder-decoder"),ELt.forEach(t),g4r=r(MNe," \u2014 "),dJ=n(MNe,"A",{href:!0});var CLt=s(dJ);h4r=r(CLt,"TFEncoderDecoderModel"),CLt.forEach(t),p4r=r(MNe," (Encoder decoder model)"),MNe.forEach(t),u4r=i(Ie),tE=n(Ie,"LI",{});var ENe=s(tE);QTe=n(ENe,"STRONG",{});var wLt=s(QTe);_4r=r(wLt,"led"),wLt.forEach(t),b4r=r(ENe," \u2014 "),cJ=n(ENe,"A",{href:!0});var ALt=s(cJ);v4r=r(ALt,"TFLEDForConditionalGeneration"),ALt.forEach(t),F4r=r(ENe," (LED model)"),ENe.forEach(t),T4r=i(Ie),aE=n(Ie,"LI",{});var CNe=s(aE);HTe=n(CNe,"STRONG",{});var LLt=s(HTe);M4r=r(LLt,"marian"),LLt.forEach(t),E4r=r(CNe," \u2014 "),fJ=n(CNe,"A",{href:!0});var yLt=s(fJ);C4r=r(yLt,"TFMarianMTModel"),yLt.forEach(t),w4r=r(CNe," (Marian model)"),CNe.forEach(t),A4r=i(Ie),nE=n(Ie,"LI",{});var wNe=s(nE);UTe=n(wNe,"STRONG",{});var xLt=s(UTe);L4r=r(xLt,"mbart"),xLt.forEach(t),y4r=r(wNe," \u2014 "),mJ=n(wNe,"A",{href:!0});var $Lt=s(mJ);x4r=r($Lt,"TFMBartForConditionalGeneration"),$Lt.forEach(t),$4r=r(wNe," (mBART model)"),wNe.forEach(t),k4r=i(Ie),sE=n(Ie,"LI",{});var ANe=s(sE);JTe=n(ANe,"STRONG",{});var kLt=s(JTe);S4r=r(kLt,"mt5"),kLt.forEach(t),R4r=r(ANe," \u2014 "),gJ=n(ANe,"A",{href:!0});var SLt=s(gJ);P4r=r(SLt,"TFMT5ForConditionalGeneration"),SLt.forEach(t),B4r=r(ANe," (MT5 model)"),ANe.forEach(t),I4r=i(Ie),lE=n(Ie,"LI",{});var LNe=s(lE);YTe=n(LNe,"STRONG",{});var RLt=s(YTe);N4r=r(RLt,"pegasus"),RLt.forEach(t),q4r=r(LNe," \u2014 "),hJ=n(LNe,"A",{href:!0});var PLt=s(hJ);j4r=r(PLt,"TFPegasusForConditionalGeneration"),PLt.forEach(t),D4r=r(LNe," (Pegasus model)"),LNe.forEach(t),G4r=i(Ie),iE=n(Ie,"LI",{});var yNe=s(iE);KTe=n(yNe,"STRONG",{});var BLt=s(KTe);O4r=r(BLt,"t5"),BLt.forEach(t),V4r=r(yNe," \u2014 "),pJ=n(yNe,"A",{href:!0});var ILt=s(pJ);X4r=r(ILt,"TFT5ForConditionalGeneration"),ILt.forEach(t),z4r=r(yNe," (T5 model)"),yNe.forEach(t),Ie.forEach(t),W4r=i(Pl),T(dE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),$Oe=i(f),bc=n(f,"H2",{class:!0});var qXe=s(bc);cE=n(qXe,"A",{id:!0,class:!0,href:!0});var NLt=s(cE);ZTe=n(NLt,"SPAN",{});var qLt=s(ZTe);T(q8.$$.fragment,qLt),qLt.forEach(t),NLt.forEach(t),Q4r=i(qXe),e7e=n(qXe,"SPAN",{});var jLt=s(e7e);H4r=r(jLt,"TFAutoModelForSequenceClassification"),jLt.forEach(t),qXe.forEach(t),kOe=i(f),nr=n(f,"DIV",{class:!0});var Bl=s(nr);T(j8.$$.fragment,Bl),U4r=i(Bl),vc=n(Bl,"P",{});var mre=s(vc);J4r=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uJ=n(mre,"A",{href:!0});var DLt=s(uJ);Y4r=r(DLt,"from_pretrained()"),DLt.forEach(t),K4r=r(mre," class method or the "),_J=n(mre,"A",{href:!0});var GLt=s(_J);Z4r=r(GLt,"from_config()"),GLt.forEach(t),eCr=r(mre,` class
method.`),mre.forEach(t),oCr=i(Bl),D8=n(Bl,"P",{});var jXe=s(D8);rCr=r(jXe,"This class cannot be instantiated directly using "),o7e=n(jXe,"CODE",{});var OLt=s(o7e);tCr=r(OLt,"__init__()"),OLt.forEach(t),aCr=r(jXe," (throws an error)."),jXe.forEach(t),nCr=i(Bl),It=n(Bl,"DIV",{class:!0});var SA=s(It);T(G8.$$.fragment,SA),sCr=i(SA),r7e=n(SA,"P",{});var VLt=s(r7e);lCr=r(VLt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VLt.forEach(t),iCr=i(SA),Fc=n(SA,"P",{});var gre=s(Fc);dCr=r(gre,`Note:
Loading a model from its configuration file does `),t7e=n(gre,"STRONG",{});var XLt=s(t7e);cCr=r(XLt,"not"),XLt.forEach(t),fCr=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=n(gre,"A",{href:!0});var zLt=s(bJ);mCr=r(zLt,"from_pretrained()"),zLt.forEach(t),gCr=r(gre," to load the model weights."),gre.forEach(t),hCr=i(SA),T(fE.$$.fragment,SA),SA.forEach(t),pCr=i(Bl),Rr=n(Bl,"DIV",{class:!0});var Il=s(Rr);T(O8.$$.fragment,Il),uCr=i(Il),a7e=n(Il,"P",{});var WLt=s(a7e);_Cr=r(WLt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),WLt.forEach(t),bCr=i(Il),fn=n(Il,"P",{});var RA=s(fn);vCr=r(RA,"The model class to instantiate is selected based on the "),n7e=n(RA,"CODE",{});var QLt=s(n7e);FCr=r(QLt,"model_type"),QLt.forEach(t),TCr=r(RA,` property of the config object (either
passed as an argument or loaded from `),s7e=n(RA,"CODE",{});var HLt=s(s7e);MCr=r(HLt,"pretrained_model_name_or_path"),HLt.forEach(t),ECr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=n(RA,"CODE",{});var ULt=s(l7e);CCr=r(ULt,"pretrained_model_name_or_path"),ULt.forEach(t),wCr=r(RA,":"),RA.forEach(t),ACr=i(Il),te=n(Il,"UL",{});var ne=s(te);mE=n(ne,"LI",{});var xNe=s(mE);i7e=n(xNe,"STRONG",{});var JLt=s(i7e);LCr=r(JLt,"albert"),JLt.forEach(t),yCr=r(xNe," \u2014 "),vJ=n(xNe,"A",{href:!0});var YLt=s(vJ);xCr=r(YLt,"TFAlbertForSequenceClassification"),YLt.forEach(t),$Cr=r(xNe," (ALBERT model)"),xNe.forEach(t),kCr=i(ne),gE=n(ne,"LI",{});var $Ne=s(gE);d7e=n($Ne,"STRONG",{});var KLt=s(d7e);SCr=r(KLt,"bert"),KLt.forEach(t),RCr=r($Ne," \u2014 "),FJ=n($Ne,"A",{href:!0});var ZLt=s(FJ);PCr=r(ZLt,"TFBertForSequenceClassification"),ZLt.forEach(t),BCr=r($Ne," (BERT model)"),$Ne.forEach(t),ICr=i(ne),hE=n(ne,"LI",{});var kNe=s(hE);c7e=n(kNe,"STRONG",{});var eyt=s(c7e);NCr=r(eyt,"camembert"),eyt.forEach(t),qCr=r(kNe," \u2014 "),TJ=n(kNe,"A",{href:!0});var oyt=s(TJ);jCr=r(oyt,"TFCamembertForSequenceClassification"),oyt.forEach(t),DCr=r(kNe," (CamemBERT model)"),kNe.forEach(t),GCr=i(ne),pE=n(ne,"LI",{});var SNe=s(pE);f7e=n(SNe,"STRONG",{});var ryt=s(f7e);OCr=r(ryt,"convbert"),ryt.forEach(t),VCr=r(SNe," \u2014 "),MJ=n(SNe,"A",{href:!0});var tyt=s(MJ);XCr=r(tyt,"TFConvBertForSequenceClassification"),tyt.forEach(t),zCr=r(SNe," (ConvBERT model)"),SNe.forEach(t),WCr=i(ne),uE=n(ne,"LI",{});var RNe=s(uE);m7e=n(RNe,"STRONG",{});var ayt=s(m7e);QCr=r(ayt,"ctrl"),ayt.forEach(t),HCr=r(RNe," \u2014 "),EJ=n(RNe,"A",{href:!0});var nyt=s(EJ);UCr=r(nyt,"TFCTRLForSequenceClassification"),nyt.forEach(t),JCr=r(RNe," (CTRL model)"),RNe.forEach(t),YCr=i(ne),_E=n(ne,"LI",{});var PNe=s(_E);g7e=n(PNe,"STRONG",{});var syt=s(g7e);KCr=r(syt,"deberta"),syt.forEach(t),ZCr=r(PNe," \u2014 "),CJ=n(PNe,"A",{href:!0});var lyt=s(CJ);e5r=r(lyt,"TFDebertaForSequenceClassification"),lyt.forEach(t),o5r=r(PNe," (DeBERTa model)"),PNe.forEach(t),r5r=i(ne),bE=n(ne,"LI",{});var BNe=s(bE);h7e=n(BNe,"STRONG",{});var iyt=s(h7e);t5r=r(iyt,"deberta-v2"),iyt.forEach(t),a5r=r(BNe," \u2014 "),wJ=n(BNe,"A",{href:!0});var dyt=s(wJ);n5r=r(dyt,"TFDebertaV2ForSequenceClassification"),dyt.forEach(t),s5r=r(BNe," (DeBERTa-v2 model)"),BNe.forEach(t),l5r=i(ne),vE=n(ne,"LI",{});var INe=s(vE);p7e=n(INe,"STRONG",{});var cyt=s(p7e);i5r=r(cyt,"distilbert"),cyt.forEach(t),d5r=r(INe," \u2014 "),AJ=n(INe,"A",{href:!0});var fyt=s(AJ);c5r=r(fyt,"TFDistilBertForSequenceClassification"),fyt.forEach(t),f5r=r(INe," (DistilBERT model)"),INe.forEach(t),m5r=i(ne),FE=n(ne,"LI",{});var NNe=s(FE);u7e=n(NNe,"STRONG",{});var myt=s(u7e);g5r=r(myt,"electra"),myt.forEach(t),h5r=r(NNe," \u2014 "),LJ=n(NNe,"A",{href:!0});var gyt=s(LJ);p5r=r(gyt,"TFElectraForSequenceClassification"),gyt.forEach(t),u5r=r(NNe," (ELECTRA model)"),NNe.forEach(t),_5r=i(ne),TE=n(ne,"LI",{});var qNe=s(TE);_7e=n(qNe,"STRONG",{});var hyt=s(_7e);b5r=r(hyt,"flaubert"),hyt.forEach(t),v5r=r(qNe," \u2014 "),yJ=n(qNe,"A",{href:!0});var pyt=s(yJ);F5r=r(pyt,"TFFlaubertForSequenceClassification"),pyt.forEach(t),T5r=r(qNe," (FlauBERT model)"),qNe.forEach(t),M5r=i(ne),ME=n(ne,"LI",{});var jNe=s(ME);b7e=n(jNe,"STRONG",{});var uyt=s(b7e);E5r=r(uyt,"funnel"),uyt.forEach(t),C5r=r(jNe," \u2014 "),xJ=n(jNe,"A",{href:!0});var _yt=s(xJ);w5r=r(_yt,"TFFunnelForSequenceClassification"),_yt.forEach(t),A5r=r(jNe," (Funnel Transformer model)"),jNe.forEach(t),L5r=i(ne),EE=n(ne,"LI",{});var DNe=s(EE);v7e=n(DNe,"STRONG",{});var byt=s(v7e);y5r=r(byt,"gpt2"),byt.forEach(t),x5r=r(DNe," \u2014 "),$J=n(DNe,"A",{href:!0});var vyt=s($J);$5r=r(vyt,"TFGPT2ForSequenceClassification"),vyt.forEach(t),k5r=r(DNe," (OpenAI GPT-2 model)"),DNe.forEach(t),S5r=i(ne),CE=n(ne,"LI",{});var GNe=s(CE);F7e=n(GNe,"STRONG",{});var Fyt=s(F7e);R5r=r(Fyt,"gptj"),Fyt.forEach(t),P5r=r(GNe," \u2014 "),kJ=n(GNe,"A",{href:!0});var Tyt=s(kJ);B5r=r(Tyt,"TFGPTJForSequenceClassification"),Tyt.forEach(t),I5r=r(GNe," (GPT-J model)"),GNe.forEach(t),N5r=i(ne),wE=n(ne,"LI",{});var ONe=s(wE);T7e=n(ONe,"STRONG",{});var Myt=s(T7e);q5r=r(Myt,"layoutlm"),Myt.forEach(t),j5r=r(ONe," \u2014 "),SJ=n(ONe,"A",{href:!0});var Eyt=s(SJ);D5r=r(Eyt,"TFLayoutLMForSequenceClassification"),Eyt.forEach(t),G5r=r(ONe," (LayoutLM model)"),ONe.forEach(t),O5r=i(ne),AE=n(ne,"LI",{});var VNe=s(AE);M7e=n(VNe,"STRONG",{});var Cyt=s(M7e);V5r=r(Cyt,"longformer"),Cyt.forEach(t),X5r=r(VNe," \u2014 "),RJ=n(VNe,"A",{href:!0});var wyt=s(RJ);z5r=r(wyt,"TFLongformerForSequenceClassification"),wyt.forEach(t),W5r=r(VNe," (Longformer model)"),VNe.forEach(t),Q5r=i(ne),LE=n(ne,"LI",{});var XNe=s(LE);E7e=n(XNe,"STRONG",{});var Ayt=s(E7e);H5r=r(Ayt,"mobilebert"),Ayt.forEach(t),U5r=r(XNe," \u2014 "),PJ=n(XNe,"A",{href:!0});var Lyt=s(PJ);J5r=r(Lyt,"TFMobileBertForSequenceClassification"),Lyt.forEach(t),Y5r=r(XNe," (MobileBERT model)"),XNe.forEach(t),K5r=i(ne),yE=n(ne,"LI",{});var zNe=s(yE);C7e=n(zNe,"STRONG",{});var yyt=s(C7e);Z5r=r(yyt,"mpnet"),yyt.forEach(t),e3r=r(zNe," \u2014 "),BJ=n(zNe,"A",{href:!0});var xyt=s(BJ);o3r=r(xyt,"TFMPNetForSequenceClassification"),xyt.forEach(t),r3r=r(zNe," (MPNet model)"),zNe.forEach(t),t3r=i(ne),xE=n(ne,"LI",{});var WNe=s(xE);w7e=n(WNe,"STRONG",{});var $yt=s(w7e);a3r=r($yt,"openai-gpt"),$yt.forEach(t),n3r=r(WNe," \u2014 "),IJ=n(WNe,"A",{href:!0});var kyt=s(IJ);s3r=r(kyt,"TFOpenAIGPTForSequenceClassification"),kyt.forEach(t),l3r=r(WNe," (OpenAI GPT model)"),WNe.forEach(t),i3r=i(ne),$E=n(ne,"LI",{});var QNe=s($E);A7e=n(QNe,"STRONG",{});var Syt=s(A7e);d3r=r(Syt,"rembert"),Syt.forEach(t),c3r=r(QNe," \u2014 "),NJ=n(QNe,"A",{href:!0});var Ryt=s(NJ);f3r=r(Ryt,"TFRemBertForSequenceClassification"),Ryt.forEach(t),m3r=r(QNe," (RemBERT model)"),QNe.forEach(t),g3r=i(ne),kE=n(ne,"LI",{});var HNe=s(kE);L7e=n(HNe,"STRONG",{});var Pyt=s(L7e);h3r=r(Pyt,"roberta"),Pyt.forEach(t),p3r=r(HNe," \u2014 "),qJ=n(HNe,"A",{href:!0});var Byt=s(qJ);u3r=r(Byt,"TFRobertaForSequenceClassification"),Byt.forEach(t),_3r=r(HNe," (RoBERTa model)"),HNe.forEach(t),b3r=i(ne),SE=n(ne,"LI",{});var UNe=s(SE);y7e=n(UNe,"STRONG",{});var Iyt=s(y7e);v3r=r(Iyt,"roformer"),Iyt.forEach(t),F3r=r(UNe," \u2014 "),jJ=n(UNe,"A",{href:!0});var Nyt=s(jJ);T3r=r(Nyt,"TFRoFormerForSequenceClassification"),Nyt.forEach(t),M3r=r(UNe," (RoFormer model)"),UNe.forEach(t),E3r=i(ne),RE=n(ne,"LI",{});var JNe=s(RE);x7e=n(JNe,"STRONG",{});var qyt=s(x7e);C3r=r(qyt,"tapas"),qyt.forEach(t),w3r=r(JNe," \u2014 "),DJ=n(JNe,"A",{href:!0});var jyt=s(DJ);A3r=r(jyt,"TFTapasForSequenceClassification"),jyt.forEach(t),L3r=r(JNe," (TAPAS model)"),JNe.forEach(t),y3r=i(ne),PE=n(ne,"LI",{});var YNe=s(PE);$7e=n(YNe,"STRONG",{});var Dyt=s($7e);x3r=r(Dyt,"transfo-xl"),Dyt.forEach(t),$3r=r(YNe," \u2014 "),GJ=n(YNe,"A",{href:!0});var Gyt=s(GJ);k3r=r(Gyt,"TFTransfoXLForSequenceClassification"),Gyt.forEach(t),S3r=r(YNe," (Transformer-XL model)"),YNe.forEach(t),R3r=i(ne),BE=n(ne,"LI",{});var KNe=s(BE);k7e=n(KNe,"STRONG",{});var Oyt=s(k7e);P3r=r(Oyt,"xlm"),Oyt.forEach(t),B3r=r(KNe," \u2014 "),OJ=n(KNe,"A",{href:!0});var Vyt=s(OJ);I3r=r(Vyt,"TFXLMForSequenceClassification"),Vyt.forEach(t),N3r=r(KNe," (XLM model)"),KNe.forEach(t),q3r=i(ne),IE=n(ne,"LI",{});var ZNe=s(IE);S7e=n(ZNe,"STRONG",{});var Xyt=s(S7e);j3r=r(Xyt,"xlm-roberta"),Xyt.forEach(t),D3r=r(ZNe," \u2014 "),VJ=n(ZNe,"A",{href:!0});var zyt=s(VJ);G3r=r(zyt,"TFXLMRobertaForSequenceClassification"),zyt.forEach(t),O3r=r(ZNe," (XLM-RoBERTa model)"),ZNe.forEach(t),V3r=i(ne),NE=n(ne,"LI",{});var eqe=s(NE);R7e=n(eqe,"STRONG",{});var Wyt=s(R7e);X3r=r(Wyt,"xlnet"),Wyt.forEach(t),z3r=r(eqe," \u2014 "),XJ=n(eqe,"A",{href:!0});var Qyt=s(XJ);W3r=r(Qyt,"TFXLNetForSequenceClassification"),Qyt.forEach(t),Q3r=r(eqe," (XLNet model)"),eqe.forEach(t),ne.forEach(t),H3r=i(Il),T(qE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),SOe=i(f),Tc=n(f,"H2",{class:!0});var DXe=s(Tc);jE=n(DXe,"A",{id:!0,class:!0,href:!0});var Hyt=s(jE);P7e=n(Hyt,"SPAN",{});var Uyt=s(P7e);T(V8.$$.fragment,Uyt),Uyt.forEach(t),Hyt.forEach(t),U3r=i(DXe),B7e=n(DXe,"SPAN",{});var Jyt=s(B7e);J3r=r(Jyt,"TFAutoModelForMultipleChoice"),Jyt.forEach(t),DXe.forEach(t),ROe=i(f),sr=n(f,"DIV",{class:!0});var Nl=s(sr);T(X8.$$.fragment,Nl),Y3r=i(Nl),Mc=n(Nl,"P",{});var hre=s(Mc);K3r=r(hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zJ=n(hre,"A",{href:!0});var Yyt=s(zJ);Z3r=r(Yyt,"from_pretrained()"),Yyt.forEach(t),ewr=r(hre," class method or the "),WJ=n(hre,"A",{href:!0});var Kyt=s(WJ);owr=r(Kyt,"from_config()"),Kyt.forEach(t),rwr=r(hre,` class
method.`),hre.forEach(t),twr=i(Nl),z8=n(Nl,"P",{});var GXe=s(z8);awr=r(GXe,"This class cannot be instantiated directly using "),I7e=n(GXe,"CODE",{});var Zyt=s(I7e);nwr=r(Zyt,"__init__()"),Zyt.forEach(t),swr=r(GXe," (throws an error)."),GXe.forEach(t),lwr=i(Nl),Nt=n(Nl,"DIV",{class:!0});var PA=s(Nt);T(W8.$$.fragment,PA),iwr=i(PA),N7e=n(PA,"P",{});var e8t=s(N7e);dwr=r(e8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),e8t.forEach(t),cwr=i(PA),Ec=n(PA,"P",{});var pre=s(Ec);fwr=r(pre,`Note:
Loading a model from its configuration file does `),q7e=n(pre,"STRONG",{});var o8t=s(q7e);mwr=r(o8t,"not"),o8t.forEach(t),gwr=r(pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(pre,"A",{href:!0});var r8t=s(QJ);hwr=r(r8t,"from_pretrained()"),r8t.forEach(t),pwr=r(pre," to load the model weights."),pre.forEach(t),uwr=i(PA),T(DE.$$.fragment,PA),PA.forEach(t),_wr=i(Nl),Pr=n(Nl,"DIV",{class:!0});var ql=s(Pr);T(Q8.$$.fragment,ql),bwr=i(ql),j7e=n(ql,"P",{});var t8t=s(j7e);vwr=r(t8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),t8t.forEach(t),Fwr=i(ql),mn=n(ql,"P",{});var BA=s(mn);Twr=r(BA,"The model class to instantiate is selected based on the "),D7e=n(BA,"CODE",{});var a8t=s(D7e);Mwr=r(a8t,"model_type"),a8t.forEach(t),Ewr=r(BA,` property of the config object (either
passed as an argument or loaded from `),G7e=n(BA,"CODE",{});var n8t=s(G7e);Cwr=r(n8t,"pretrained_model_name_or_path"),n8t.forEach(t),wwr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=n(BA,"CODE",{});var s8t=s(O7e);Awr=r(s8t,"pretrained_model_name_or_path"),s8t.forEach(t),Lwr=r(BA,":"),BA.forEach(t),ywr=i(ql),ue=n(ql,"UL",{});var ve=s(ue);GE=n(ve,"LI",{});var oqe=s(GE);V7e=n(oqe,"STRONG",{});var l8t=s(V7e);xwr=r(l8t,"albert"),l8t.forEach(t),$wr=r(oqe," \u2014 "),HJ=n(oqe,"A",{href:!0});var i8t=s(HJ);kwr=r(i8t,"TFAlbertForMultipleChoice"),i8t.forEach(t),Swr=r(oqe," (ALBERT model)"),oqe.forEach(t),Rwr=i(ve),OE=n(ve,"LI",{});var rqe=s(OE);X7e=n(rqe,"STRONG",{});var d8t=s(X7e);Pwr=r(d8t,"bert"),d8t.forEach(t),Bwr=r(rqe," \u2014 "),UJ=n(rqe,"A",{href:!0});var c8t=s(UJ);Iwr=r(c8t,"TFBertForMultipleChoice"),c8t.forEach(t),Nwr=r(rqe," (BERT model)"),rqe.forEach(t),qwr=i(ve),VE=n(ve,"LI",{});var tqe=s(VE);z7e=n(tqe,"STRONG",{});var f8t=s(z7e);jwr=r(f8t,"camembert"),f8t.forEach(t),Dwr=r(tqe," \u2014 "),JJ=n(tqe,"A",{href:!0});var m8t=s(JJ);Gwr=r(m8t,"TFCamembertForMultipleChoice"),m8t.forEach(t),Owr=r(tqe," (CamemBERT model)"),tqe.forEach(t),Vwr=i(ve),XE=n(ve,"LI",{});var aqe=s(XE);W7e=n(aqe,"STRONG",{});var g8t=s(W7e);Xwr=r(g8t,"convbert"),g8t.forEach(t),zwr=r(aqe," \u2014 "),YJ=n(aqe,"A",{href:!0});var h8t=s(YJ);Wwr=r(h8t,"TFConvBertForMultipleChoice"),h8t.forEach(t),Qwr=r(aqe," (ConvBERT model)"),aqe.forEach(t),Hwr=i(ve),zE=n(ve,"LI",{});var nqe=s(zE);Q7e=n(nqe,"STRONG",{});var p8t=s(Q7e);Uwr=r(p8t,"distilbert"),p8t.forEach(t),Jwr=r(nqe," \u2014 "),KJ=n(nqe,"A",{href:!0});var u8t=s(KJ);Ywr=r(u8t,"TFDistilBertForMultipleChoice"),u8t.forEach(t),Kwr=r(nqe," (DistilBERT model)"),nqe.forEach(t),Zwr=i(ve),WE=n(ve,"LI",{});var sqe=s(WE);H7e=n(sqe,"STRONG",{});var _8t=s(H7e);eAr=r(_8t,"electra"),_8t.forEach(t),oAr=r(sqe," \u2014 "),ZJ=n(sqe,"A",{href:!0});var b8t=s(ZJ);rAr=r(b8t,"TFElectraForMultipleChoice"),b8t.forEach(t),tAr=r(sqe," (ELECTRA model)"),sqe.forEach(t),aAr=i(ve),QE=n(ve,"LI",{});var lqe=s(QE);U7e=n(lqe,"STRONG",{});var v8t=s(U7e);nAr=r(v8t,"flaubert"),v8t.forEach(t),sAr=r(lqe," \u2014 "),eY=n(lqe,"A",{href:!0});var F8t=s(eY);lAr=r(F8t,"TFFlaubertForMultipleChoice"),F8t.forEach(t),iAr=r(lqe," (FlauBERT model)"),lqe.forEach(t),dAr=i(ve),HE=n(ve,"LI",{});var iqe=s(HE);J7e=n(iqe,"STRONG",{});var T8t=s(J7e);cAr=r(T8t,"funnel"),T8t.forEach(t),fAr=r(iqe," \u2014 "),oY=n(iqe,"A",{href:!0});var M8t=s(oY);mAr=r(M8t,"TFFunnelForMultipleChoice"),M8t.forEach(t),gAr=r(iqe," (Funnel Transformer model)"),iqe.forEach(t),hAr=i(ve),UE=n(ve,"LI",{});var dqe=s(UE);Y7e=n(dqe,"STRONG",{});var E8t=s(Y7e);pAr=r(E8t,"longformer"),E8t.forEach(t),uAr=r(dqe," \u2014 "),rY=n(dqe,"A",{href:!0});var C8t=s(rY);_Ar=r(C8t,"TFLongformerForMultipleChoice"),C8t.forEach(t),bAr=r(dqe," (Longformer model)"),dqe.forEach(t),vAr=i(ve),JE=n(ve,"LI",{});var cqe=s(JE);K7e=n(cqe,"STRONG",{});var w8t=s(K7e);FAr=r(w8t,"mobilebert"),w8t.forEach(t),TAr=r(cqe," \u2014 "),tY=n(cqe,"A",{href:!0});var A8t=s(tY);MAr=r(A8t,"TFMobileBertForMultipleChoice"),A8t.forEach(t),EAr=r(cqe," (MobileBERT model)"),cqe.forEach(t),CAr=i(ve),YE=n(ve,"LI",{});var fqe=s(YE);Z7e=n(fqe,"STRONG",{});var L8t=s(Z7e);wAr=r(L8t,"mpnet"),L8t.forEach(t),AAr=r(fqe," \u2014 "),aY=n(fqe,"A",{href:!0});var y8t=s(aY);LAr=r(y8t,"TFMPNetForMultipleChoice"),y8t.forEach(t),yAr=r(fqe," (MPNet model)"),fqe.forEach(t),xAr=i(ve),KE=n(ve,"LI",{});var mqe=s(KE);e9e=n(mqe,"STRONG",{});var x8t=s(e9e);$Ar=r(x8t,"rembert"),x8t.forEach(t),kAr=r(mqe," \u2014 "),nY=n(mqe,"A",{href:!0});var $8t=s(nY);SAr=r($8t,"TFRemBertForMultipleChoice"),$8t.forEach(t),RAr=r(mqe," (RemBERT model)"),mqe.forEach(t),PAr=i(ve),ZE=n(ve,"LI",{});var gqe=s(ZE);o9e=n(gqe,"STRONG",{});var k8t=s(o9e);BAr=r(k8t,"roberta"),k8t.forEach(t),IAr=r(gqe," \u2014 "),sY=n(gqe,"A",{href:!0});var S8t=s(sY);NAr=r(S8t,"TFRobertaForMultipleChoice"),S8t.forEach(t),qAr=r(gqe," (RoBERTa model)"),gqe.forEach(t),jAr=i(ve),e4=n(ve,"LI",{});var hqe=s(e4);r9e=n(hqe,"STRONG",{});var R8t=s(r9e);DAr=r(R8t,"roformer"),R8t.forEach(t),GAr=r(hqe," \u2014 "),lY=n(hqe,"A",{href:!0});var P8t=s(lY);OAr=r(P8t,"TFRoFormerForMultipleChoice"),P8t.forEach(t),VAr=r(hqe," (RoFormer model)"),hqe.forEach(t),XAr=i(ve),o4=n(ve,"LI",{});var pqe=s(o4);t9e=n(pqe,"STRONG",{});var B8t=s(t9e);zAr=r(B8t,"xlm"),B8t.forEach(t),WAr=r(pqe," \u2014 "),iY=n(pqe,"A",{href:!0});var I8t=s(iY);QAr=r(I8t,"TFXLMForMultipleChoice"),I8t.forEach(t),HAr=r(pqe," (XLM model)"),pqe.forEach(t),UAr=i(ve),r4=n(ve,"LI",{});var uqe=s(r4);a9e=n(uqe,"STRONG",{});var N8t=s(a9e);JAr=r(N8t,"xlm-roberta"),N8t.forEach(t),YAr=r(uqe," \u2014 "),dY=n(uqe,"A",{href:!0});var q8t=s(dY);KAr=r(q8t,"TFXLMRobertaForMultipleChoice"),q8t.forEach(t),ZAr=r(uqe," (XLM-RoBERTa model)"),uqe.forEach(t),e6r=i(ve),t4=n(ve,"LI",{});var _qe=s(t4);n9e=n(_qe,"STRONG",{});var j8t=s(n9e);o6r=r(j8t,"xlnet"),j8t.forEach(t),r6r=r(_qe," \u2014 "),cY=n(_qe,"A",{href:!0});var D8t=s(cY);t6r=r(D8t,"TFXLNetForMultipleChoice"),D8t.forEach(t),a6r=r(_qe," (XLNet model)"),_qe.forEach(t),ve.forEach(t),n6r=i(ql),T(a4.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),POe=i(f),Cc=n(f,"H2",{class:!0});var OXe=s(Cc);n4=n(OXe,"A",{id:!0,class:!0,href:!0});var G8t=s(n4);s9e=n(G8t,"SPAN",{});var O8t=s(s9e);T(H8.$$.fragment,O8t),O8t.forEach(t),G8t.forEach(t),s6r=i(OXe),l9e=n(OXe,"SPAN",{});var V8t=s(l9e);l6r=r(V8t,"TFAutoModelForNextSentencePrediction"),V8t.forEach(t),OXe.forEach(t),BOe=i(f),lr=n(f,"DIV",{class:!0});var jl=s(lr);T(U8.$$.fragment,jl),i6r=i(jl),wc=n(jl,"P",{});var ure=s(wc);d6r=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fY=n(ure,"A",{href:!0});var X8t=s(fY);c6r=r(X8t,"from_pretrained()"),X8t.forEach(t),f6r=r(ure," class method or the "),mY=n(ure,"A",{href:!0});var z8t=s(mY);m6r=r(z8t,"from_config()"),z8t.forEach(t),g6r=r(ure,` class
method.`),ure.forEach(t),h6r=i(jl),J8=n(jl,"P",{});var VXe=s(J8);p6r=r(VXe,"This class cannot be instantiated directly using "),i9e=n(VXe,"CODE",{});var W8t=s(i9e);u6r=r(W8t,"__init__()"),W8t.forEach(t),_6r=r(VXe," (throws an error)."),VXe.forEach(t),b6r=i(jl),qt=n(jl,"DIV",{class:!0});var IA=s(qt);T(Y8.$$.fragment,IA),v6r=i(IA),d9e=n(IA,"P",{});var Q8t=s(d9e);F6r=r(Q8t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Q8t.forEach(t),T6r=i(IA),Ac=n(IA,"P",{});var _re=s(Ac);M6r=r(_re,`Note:
Loading a model from its configuration file does `),c9e=n(_re,"STRONG",{});var H8t=s(c9e);E6r=r(H8t,"not"),H8t.forEach(t),C6r=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=n(_re,"A",{href:!0});var U8t=s(gY);w6r=r(U8t,"from_pretrained()"),U8t.forEach(t),A6r=r(_re," to load the model weights."),_re.forEach(t),L6r=i(IA),T(s4.$$.fragment,IA),IA.forEach(t),y6r=i(jl),Br=n(jl,"DIV",{class:!0});var Dl=s(Br);T(K8.$$.fragment,Dl),x6r=i(Dl),f9e=n(Dl,"P",{});var J8t=s(f9e);$6r=r(J8t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),J8t.forEach(t),k6r=i(Dl),gn=n(Dl,"P",{});var NA=s(gn);S6r=r(NA,"The model class to instantiate is selected based on the "),m9e=n(NA,"CODE",{});var Y8t=s(m9e);R6r=r(Y8t,"model_type"),Y8t.forEach(t),P6r=r(NA,` property of the config object (either
passed as an argument or loaded from `),g9e=n(NA,"CODE",{});var K8t=s(g9e);B6r=r(K8t,"pretrained_model_name_or_path"),K8t.forEach(t),I6r=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h9e=n(NA,"CODE",{});var Z8t=s(h9e);N6r=r(Z8t,"pretrained_model_name_or_path"),Z8t.forEach(t),q6r=r(NA,":"),NA.forEach(t),j6r=i(Dl),Z8=n(Dl,"UL",{});var XXe=s(Z8);l4=n(XXe,"LI",{});var bqe=s(l4);p9e=n(bqe,"STRONG",{});var ext=s(p9e);D6r=r(ext,"bert"),ext.forEach(t),G6r=r(bqe," \u2014 "),hY=n(bqe,"A",{href:!0});var oxt=s(hY);O6r=r(oxt,"TFBertForNextSentencePrediction"),oxt.forEach(t),V6r=r(bqe," (BERT model)"),bqe.forEach(t),X6r=i(XXe),i4=n(XXe,"LI",{});var vqe=s(i4);u9e=n(vqe,"STRONG",{});var rxt=s(u9e);z6r=r(rxt,"mobilebert"),rxt.forEach(t),W6r=r(vqe," \u2014 "),pY=n(vqe,"A",{href:!0});var txt=s(pY);Q6r=r(txt,"TFMobileBertForNextSentencePrediction"),txt.forEach(t),H6r=r(vqe," (MobileBERT model)"),vqe.forEach(t),XXe.forEach(t),U6r=i(Dl),T(d4.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),IOe=i(f),Lc=n(f,"H2",{class:!0});var zXe=s(Lc);c4=n(zXe,"A",{id:!0,class:!0,href:!0});var axt=s(c4);_9e=n(axt,"SPAN",{});var nxt=s(_9e);T(ex.$$.fragment,nxt),nxt.forEach(t),axt.forEach(t),J6r=i(zXe),b9e=n(zXe,"SPAN",{});var sxt=s(b9e);Y6r=r(sxt,"TFAutoModelForTableQuestionAnswering"),sxt.forEach(t),zXe.forEach(t),NOe=i(f),ir=n(f,"DIV",{class:!0});var Gl=s(ir);T(ox.$$.fragment,Gl),K6r=i(Gl),yc=n(Gl,"P",{});var bre=s(yc);Z6r=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uY=n(bre,"A",{href:!0});var lxt=s(uY);eLr=r(lxt,"from_pretrained()"),lxt.forEach(t),oLr=r(bre," class method or the "),_Y=n(bre,"A",{href:!0});var ixt=s(_Y);rLr=r(ixt,"from_config()"),ixt.forEach(t),tLr=r(bre,` class
method.`),bre.forEach(t),aLr=i(Gl),rx=n(Gl,"P",{});var WXe=s(rx);nLr=r(WXe,"This class cannot be instantiated directly using "),v9e=n(WXe,"CODE",{});var dxt=s(v9e);sLr=r(dxt,"__init__()"),dxt.forEach(t),lLr=r(WXe," (throws an error)."),WXe.forEach(t),iLr=i(Gl),jt=n(Gl,"DIV",{class:!0});var qA=s(jt);T(tx.$$.fragment,qA),dLr=i(qA),F9e=n(qA,"P",{});var cxt=s(F9e);cLr=r(cxt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),cxt.forEach(t),fLr=i(qA),xc=n(qA,"P",{});var vre=s(xc);mLr=r(vre,`Note:
Loading a model from its configuration file does `),T9e=n(vre,"STRONG",{});var fxt=s(T9e);gLr=r(fxt,"not"),fxt.forEach(t),hLr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=n(vre,"A",{href:!0});var mxt=s(bY);pLr=r(mxt,"from_pretrained()"),mxt.forEach(t),uLr=r(vre," to load the model weights."),vre.forEach(t),_Lr=i(qA),T(f4.$$.fragment,qA),qA.forEach(t),bLr=i(Gl),Ir=n(Gl,"DIV",{class:!0});var Ol=s(Ir);T(ax.$$.fragment,Ol),vLr=i(Ol),M9e=n(Ol,"P",{});var gxt=s(M9e);FLr=r(gxt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),gxt.forEach(t),TLr=i(Ol),hn=n(Ol,"P",{});var jA=s(hn);MLr=r(jA,"The model class to instantiate is selected based on the "),E9e=n(jA,"CODE",{});var hxt=s(E9e);ELr=r(hxt,"model_type"),hxt.forEach(t),CLr=r(jA,` property of the config object (either
passed as an argument or loaded from `),C9e=n(jA,"CODE",{});var pxt=s(C9e);wLr=r(pxt,"pretrained_model_name_or_path"),pxt.forEach(t),ALr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w9e=n(jA,"CODE",{});var uxt=s(w9e);LLr=r(uxt,"pretrained_model_name_or_path"),uxt.forEach(t),yLr=r(jA,":"),jA.forEach(t),xLr=i(Ol),A9e=n(Ol,"UL",{});var _xt=s(A9e);m4=n(_xt,"LI",{});var Fqe=s(m4);L9e=n(Fqe,"STRONG",{});var bxt=s(L9e);$Lr=r(bxt,"tapas"),bxt.forEach(t),kLr=r(Fqe," \u2014 "),vY=n(Fqe,"A",{href:!0});var vxt=s(vY);SLr=r(vxt,"TFTapasForQuestionAnswering"),vxt.forEach(t),RLr=r(Fqe," (TAPAS model)"),Fqe.forEach(t),_xt.forEach(t),PLr=i(Ol),T(g4.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),qOe=i(f),$c=n(f,"H2",{class:!0});var QXe=s($c);h4=n(QXe,"A",{id:!0,class:!0,href:!0});var Fxt=s(h4);y9e=n(Fxt,"SPAN",{});var Txt=s(y9e);T(nx.$$.fragment,Txt),Txt.forEach(t),Fxt.forEach(t),BLr=i(QXe),x9e=n(QXe,"SPAN",{});var Mxt=s(x9e);ILr=r(Mxt,"TFAutoModelForTokenClassification"),Mxt.forEach(t),QXe.forEach(t),jOe=i(f),dr=n(f,"DIV",{class:!0});var Vl=s(dr);T(sx.$$.fragment,Vl),NLr=i(Vl),kc=n(Vl,"P",{});var Fre=s(kc);qLr=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),FY=n(Fre,"A",{href:!0});var Ext=s(FY);jLr=r(Ext,"from_pretrained()"),Ext.forEach(t),DLr=r(Fre," class method or the "),TY=n(Fre,"A",{href:!0});var Cxt=s(TY);GLr=r(Cxt,"from_config()"),Cxt.forEach(t),OLr=r(Fre,` class
method.`),Fre.forEach(t),VLr=i(Vl),lx=n(Vl,"P",{});var HXe=s(lx);XLr=r(HXe,"This class cannot be instantiated directly using "),$9e=n(HXe,"CODE",{});var wxt=s($9e);zLr=r(wxt,"__init__()"),wxt.forEach(t),WLr=r(HXe," (throws an error)."),HXe.forEach(t),QLr=i(Vl),Dt=n(Vl,"DIV",{class:!0});var DA=s(Dt);T(ix.$$.fragment,DA),HLr=i(DA),k9e=n(DA,"P",{});var Axt=s(k9e);ULr=r(Axt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Axt.forEach(t),JLr=i(DA),Sc=n(DA,"P",{});var Tre=s(Sc);YLr=r(Tre,`Note:
Loading a model from its configuration file does `),S9e=n(Tre,"STRONG",{});var Lxt=s(S9e);KLr=r(Lxt,"not"),Lxt.forEach(t),ZLr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=n(Tre,"A",{href:!0});var yxt=s(MY);eyr=r(yxt,"from_pretrained()"),yxt.forEach(t),oyr=r(Tre," to load the model weights."),Tre.forEach(t),ryr=i(DA),T(p4.$$.fragment,DA),DA.forEach(t),tyr=i(Vl),Nr=n(Vl,"DIV",{class:!0});var Xl=s(Nr);T(dx.$$.fragment,Xl),ayr=i(Xl),R9e=n(Xl,"P",{});var xxt=s(R9e);nyr=r(xxt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xxt.forEach(t),syr=i(Xl),pn=n(Xl,"P",{});var GA=s(pn);lyr=r(GA,"The model class to instantiate is selected based on the "),P9e=n(GA,"CODE",{});var $xt=s(P9e);iyr=r($xt,"model_type"),$xt.forEach(t),dyr=r(GA,` property of the config object (either
passed as an argument or loaded from `),B9e=n(GA,"CODE",{});var kxt=s(B9e);cyr=r(kxt,"pretrained_model_name_or_path"),kxt.forEach(t),fyr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I9e=n(GA,"CODE",{});var Sxt=s(I9e);myr=r(Sxt,"pretrained_model_name_or_path"),Sxt.forEach(t),gyr=r(GA,":"),GA.forEach(t),hyr=i(Xl),de=n(Xl,"UL",{});var me=s(de);u4=n(me,"LI",{});var Tqe=s(u4);N9e=n(Tqe,"STRONG",{});var Rxt=s(N9e);pyr=r(Rxt,"albert"),Rxt.forEach(t),uyr=r(Tqe," \u2014 "),EY=n(Tqe,"A",{href:!0});var Pxt=s(EY);_yr=r(Pxt,"TFAlbertForTokenClassification"),Pxt.forEach(t),byr=r(Tqe," (ALBERT model)"),Tqe.forEach(t),vyr=i(me),_4=n(me,"LI",{});var Mqe=s(_4);q9e=n(Mqe,"STRONG",{});var Bxt=s(q9e);Fyr=r(Bxt,"bert"),Bxt.forEach(t),Tyr=r(Mqe," \u2014 "),CY=n(Mqe,"A",{href:!0});var Ixt=s(CY);Myr=r(Ixt,"TFBertForTokenClassification"),Ixt.forEach(t),Eyr=r(Mqe," (BERT model)"),Mqe.forEach(t),Cyr=i(me),b4=n(me,"LI",{});var Eqe=s(b4);j9e=n(Eqe,"STRONG",{});var Nxt=s(j9e);wyr=r(Nxt,"camembert"),Nxt.forEach(t),Ayr=r(Eqe," \u2014 "),wY=n(Eqe,"A",{href:!0});var qxt=s(wY);Lyr=r(qxt,"TFCamembertForTokenClassification"),qxt.forEach(t),yyr=r(Eqe," (CamemBERT model)"),Eqe.forEach(t),xyr=i(me),v4=n(me,"LI",{});var Cqe=s(v4);D9e=n(Cqe,"STRONG",{});var jxt=s(D9e);$yr=r(jxt,"convbert"),jxt.forEach(t),kyr=r(Cqe," \u2014 "),AY=n(Cqe,"A",{href:!0});var Dxt=s(AY);Syr=r(Dxt,"TFConvBertForTokenClassification"),Dxt.forEach(t),Ryr=r(Cqe," (ConvBERT model)"),Cqe.forEach(t),Pyr=i(me),F4=n(me,"LI",{});var wqe=s(F4);G9e=n(wqe,"STRONG",{});var Gxt=s(G9e);Byr=r(Gxt,"deberta"),Gxt.forEach(t),Iyr=r(wqe," \u2014 "),LY=n(wqe,"A",{href:!0});var Oxt=s(LY);Nyr=r(Oxt,"TFDebertaForTokenClassification"),Oxt.forEach(t),qyr=r(wqe," (DeBERTa model)"),wqe.forEach(t),jyr=i(me),T4=n(me,"LI",{});var Aqe=s(T4);O9e=n(Aqe,"STRONG",{});var Vxt=s(O9e);Dyr=r(Vxt,"deberta-v2"),Vxt.forEach(t),Gyr=r(Aqe," \u2014 "),yY=n(Aqe,"A",{href:!0});var Xxt=s(yY);Oyr=r(Xxt,"TFDebertaV2ForTokenClassification"),Xxt.forEach(t),Vyr=r(Aqe," (DeBERTa-v2 model)"),Aqe.forEach(t),Xyr=i(me),M4=n(me,"LI",{});var Lqe=s(M4);V9e=n(Lqe,"STRONG",{});var zxt=s(V9e);zyr=r(zxt,"distilbert"),zxt.forEach(t),Wyr=r(Lqe," \u2014 "),xY=n(Lqe,"A",{href:!0});var Wxt=s(xY);Qyr=r(Wxt,"TFDistilBertForTokenClassification"),Wxt.forEach(t),Hyr=r(Lqe," (DistilBERT model)"),Lqe.forEach(t),Uyr=i(me),E4=n(me,"LI",{});var yqe=s(E4);X9e=n(yqe,"STRONG",{});var Qxt=s(X9e);Jyr=r(Qxt,"electra"),Qxt.forEach(t),Yyr=r(yqe," \u2014 "),$Y=n(yqe,"A",{href:!0});var Hxt=s($Y);Kyr=r(Hxt,"TFElectraForTokenClassification"),Hxt.forEach(t),Zyr=r(yqe," (ELECTRA model)"),yqe.forEach(t),e8r=i(me),C4=n(me,"LI",{});var xqe=s(C4);z9e=n(xqe,"STRONG",{});var Uxt=s(z9e);o8r=r(Uxt,"flaubert"),Uxt.forEach(t),r8r=r(xqe," \u2014 "),kY=n(xqe,"A",{href:!0});var Jxt=s(kY);t8r=r(Jxt,"TFFlaubertForTokenClassification"),Jxt.forEach(t),a8r=r(xqe," (FlauBERT model)"),xqe.forEach(t),n8r=i(me),w4=n(me,"LI",{});var $qe=s(w4);W9e=n($qe,"STRONG",{});var Yxt=s(W9e);s8r=r(Yxt,"funnel"),Yxt.forEach(t),l8r=r($qe," \u2014 "),SY=n($qe,"A",{href:!0});var Kxt=s(SY);i8r=r(Kxt,"TFFunnelForTokenClassification"),Kxt.forEach(t),d8r=r($qe," (Funnel Transformer model)"),$qe.forEach(t),c8r=i(me),A4=n(me,"LI",{});var kqe=s(A4);Q9e=n(kqe,"STRONG",{});var Zxt=s(Q9e);f8r=r(Zxt,"layoutlm"),Zxt.forEach(t),m8r=r(kqe," \u2014 "),RY=n(kqe,"A",{href:!0});var e$t=s(RY);g8r=r(e$t,"TFLayoutLMForTokenClassification"),e$t.forEach(t),h8r=r(kqe," (LayoutLM model)"),kqe.forEach(t),p8r=i(me),L4=n(me,"LI",{});var Sqe=s(L4);H9e=n(Sqe,"STRONG",{});var o$t=s(H9e);u8r=r(o$t,"longformer"),o$t.forEach(t),_8r=r(Sqe," \u2014 "),PY=n(Sqe,"A",{href:!0});var r$t=s(PY);b8r=r(r$t,"TFLongformerForTokenClassification"),r$t.forEach(t),v8r=r(Sqe," (Longformer model)"),Sqe.forEach(t),F8r=i(me),y4=n(me,"LI",{});var Rqe=s(y4);U9e=n(Rqe,"STRONG",{});var t$t=s(U9e);T8r=r(t$t,"mobilebert"),t$t.forEach(t),M8r=r(Rqe," \u2014 "),BY=n(Rqe,"A",{href:!0});var a$t=s(BY);E8r=r(a$t,"TFMobileBertForTokenClassification"),a$t.forEach(t),C8r=r(Rqe," (MobileBERT model)"),Rqe.forEach(t),w8r=i(me),x4=n(me,"LI",{});var Pqe=s(x4);J9e=n(Pqe,"STRONG",{});var n$t=s(J9e);A8r=r(n$t,"mpnet"),n$t.forEach(t),L8r=r(Pqe," \u2014 "),IY=n(Pqe,"A",{href:!0});var s$t=s(IY);y8r=r(s$t,"TFMPNetForTokenClassification"),s$t.forEach(t),x8r=r(Pqe," (MPNet model)"),Pqe.forEach(t),$8r=i(me),$4=n(me,"LI",{});var Bqe=s($4);Y9e=n(Bqe,"STRONG",{});var l$t=s(Y9e);k8r=r(l$t,"rembert"),l$t.forEach(t),S8r=r(Bqe," \u2014 "),NY=n(Bqe,"A",{href:!0});var i$t=s(NY);R8r=r(i$t,"TFRemBertForTokenClassification"),i$t.forEach(t),P8r=r(Bqe," (RemBERT model)"),Bqe.forEach(t),B8r=i(me),k4=n(me,"LI",{});var Iqe=s(k4);K9e=n(Iqe,"STRONG",{});var d$t=s(K9e);I8r=r(d$t,"roberta"),d$t.forEach(t),N8r=r(Iqe," \u2014 "),qY=n(Iqe,"A",{href:!0});var c$t=s(qY);q8r=r(c$t,"TFRobertaForTokenClassification"),c$t.forEach(t),j8r=r(Iqe," (RoBERTa model)"),Iqe.forEach(t),D8r=i(me),S4=n(me,"LI",{});var Nqe=s(S4);Z9e=n(Nqe,"STRONG",{});var f$t=s(Z9e);G8r=r(f$t,"roformer"),f$t.forEach(t),O8r=r(Nqe," \u2014 "),jY=n(Nqe,"A",{href:!0});var m$t=s(jY);V8r=r(m$t,"TFRoFormerForTokenClassification"),m$t.forEach(t),X8r=r(Nqe," (RoFormer model)"),Nqe.forEach(t),z8r=i(me),R4=n(me,"LI",{});var qqe=s(R4);eMe=n(qqe,"STRONG",{});var g$t=s(eMe);W8r=r(g$t,"xlm"),g$t.forEach(t),Q8r=r(qqe," \u2014 "),DY=n(qqe,"A",{href:!0});var h$t=s(DY);H8r=r(h$t,"TFXLMForTokenClassification"),h$t.forEach(t),U8r=r(qqe," (XLM model)"),qqe.forEach(t),J8r=i(me),P4=n(me,"LI",{});var jqe=s(P4);oMe=n(jqe,"STRONG",{});var p$t=s(oMe);Y8r=r(p$t,"xlm-roberta"),p$t.forEach(t),K8r=r(jqe," \u2014 "),GY=n(jqe,"A",{href:!0});var u$t=s(GY);Z8r=r(u$t,"TFXLMRobertaForTokenClassification"),u$t.forEach(t),exr=r(jqe," (XLM-RoBERTa model)"),jqe.forEach(t),oxr=i(me),B4=n(me,"LI",{});var Dqe=s(B4);rMe=n(Dqe,"STRONG",{});var _$t=s(rMe);rxr=r(_$t,"xlnet"),_$t.forEach(t),txr=r(Dqe," \u2014 "),OY=n(Dqe,"A",{href:!0});var b$t=s(OY);axr=r(b$t,"TFXLNetForTokenClassification"),b$t.forEach(t),nxr=r(Dqe," (XLNet model)"),Dqe.forEach(t),me.forEach(t),sxr=i(Xl),T(I4.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),DOe=i(f),Rc=n(f,"H2",{class:!0});var UXe=s(Rc);N4=n(UXe,"A",{id:!0,class:!0,href:!0});var v$t=s(N4);tMe=n(v$t,"SPAN",{});var F$t=s(tMe);T(cx.$$.fragment,F$t),F$t.forEach(t),v$t.forEach(t),lxr=i(UXe),aMe=n(UXe,"SPAN",{});var T$t=s(aMe);ixr=r(T$t,"TFAutoModelForQuestionAnswering"),T$t.forEach(t),UXe.forEach(t),GOe=i(f),cr=n(f,"DIV",{class:!0});var zl=s(cr);T(fx.$$.fragment,zl),dxr=i(zl),Pc=n(zl,"P",{});var Mre=s(Pc);cxr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),VY=n(Mre,"A",{href:!0});var M$t=s(VY);fxr=r(M$t,"from_pretrained()"),M$t.forEach(t),mxr=r(Mre," class method or the "),XY=n(Mre,"A",{href:!0});var E$t=s(XY);gxr=r(E$t,"from_config()"),E$t.forEach(t),hxr=r(Mre,` class
method.`),Mre.forEach(t),pxr=i(zl),mx=n(zl,"P",{});var JXe=s(mx);uxr=r(JXe,"This class cannot be instantiated directly using "),nMe=n(JXe,"CODE",{});var C$t=s(nMe);_xr=r(C$t,"__init__()"),C$t.forEach(t),bxr=r(JXe," (throws an error)."),JXe.forEach(t),vxr=i(zl),Gt=n(zl,"DIV",{class:!0});var OA=s(Gt);T(gx.$$.fragment,OA),Fxr=i(OA),sMe=n(OA,"P",{});var w$t=s(sMe);Txr=r(w$t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),w$t.forEach(t),Mxr=i(OA),Bc=n(OA,"P",{});var Ere=s(Bc);Exr=r(Ere,`Note:
Loading a model from its configuration file does `),lMe=n(Ere,"STRONG",{});var A$t=s(lMe);Cxr=r(A$t,"not"),A$t.forEach(t),wxr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=n(Ere,"A",{href:!0});var L$t=s(zY);Axr=r(L$t,"from_pretrained()"),L$t.forEach(t),Lxr=r(Ere," to load the model weights."),Ere.forEach(t),yxr=i(OA),T(q4.$$.fragment,OA),OA.forEach(t),xxr=i(zl),qr=n(zl,"DIV",{class:!0});var Wl=s(qr);T(hx.$$.fragment,Wl),$xr=i(Wl),iMe=n(Wl,"P",{});var y$t=s(iMe);kxr=r(y$t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),y$t.forEach(t),Sxr=i(Wl),un=n(Wl,"P",{});var VA=s(un);Rxr=r(VA,"The model class to instantiate is selected based on the "),dMe=n(VA,"CODE",{});var x$t=s(dMe);Pxr=r(x$t,"model_type"),x$t.forEach(t),Bxr=r(VA,` property of the config object (either
passed as an argument or loaded from `),cMe=n(VA,"CODE",{});var $$t=s(cMe);Ixr=r($$t,"pretrained_model_name_or_path"),$$t.forEach(t),Nxr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fMe=n(VA,"CODE",{});var k$t=s(fMe);qxr=r(k$t,"pretrained_model_name_or_path"),k$t.forEach(t),jxr=r(VA,":"),VA.forEach(t),Dxr=i(Wl),ce=n(Wl,"UL",{});var ge=s(ce);j4=n(ge,"LI",{});var Gqe=s(j4);mMe=n(Gqe,"STRONG",{});var S$t=s(mMe);Gxr=r(S$t,"albert"),S$t.forEach(t),Oxr=r(Gqe," \u2014 "),WY=n(Gqe,"A",{href:!0});var R$t=s(WY);Vxr=r(R$t,"TFAlbertForQuestionAnswering"),R$t.forEach(t),Xxr=r(Gqe," (ALBERT model)"),Gqe.forEach(t),zxr=i(ge),D4=n(ge,"LI",{});var Oqe=s(D4);gMe=n(Oqe,"STRONG",{});var P$t=s(gMe);Wxr=r(P$t,"bert"),P$t.forEach(t),Qxr=r(Oqe," \u2014 "),QY=n(Oqe,"A",{href:!0});var B$t=s(QY);Hxr=r(B$t,"TFBertForQuestionAnswering"),B$t.forEach(t),Uxr=r(Oqe," (BERT model)"),Oqe.forEach(t),Jxr=i(ge),G4=n(ge,"LI",{});var Vqe=s(G4);hMe=n(Vqe,"STRONG",{});var I$t=s(hMe);Yxr=r(I$t,"camembert"),I$t.forEach(t),Kxr=r(Vqe," \u2014 "),HY=n(Vqe,"A",{href:!0});var N$t=s(HY);Zxr=r(N$t,"TFCamembertForQuestionAnswering"),N$t.forEach(t),e$r=r(Vqe," (CamemBERT model)"),Vqe.forEach(t),o$r=i(ge),O4=n(ge,"LI",{});var Xqe=s(O4);pMe=n(Xqe,"STRONG",{});var q$t=s(pMe);r$r=r(q$t,"convbert"),q$t.forEach(t),t$r=r(Xqe," \u2014 "),UY=n(Xqe,"A",{href:!0});var j$t=s(UY);a$r=r(j$t,"TFConvBertForQuestionAnswering"),j$t.forEach(t),n$r=r(Xqe," (ConvBERT model)"),Xqe.forEach(t),s$r=i(ge),V4=n(ge,"LI",{});var zqe=s(V4);uMe=n(zqe,"STRONG",{});var D$t=s(uMe);l$r=r(D$t,"deberta"),D$t.forEach(t),i$r=r(zqe," \u2014 "),JY=n(zqe,"A",{href:!0});var G$t=s(JY);d$r=r(G$t,"TFDebertaForQuestionAnswering"),G$t.forEach(t),c$r=r(zqe," (DeBERTa model)"),zqe.forEach(t),f$r=i(ge),X4=n(ge,"LI",{});var Wqe=s(X4);_Me=n(Wqe,"STRONG",{});var O$t=s(_Me);m$r=r(O$t,"deberta-v2"),O$t.forEach(t),g$r=r(Wqe," \u2014 "),YY=n(Wqe,"A",{href:!0});var V$t=s(YY);h$r=r(V$t,"TFDebertaV2ForQuestionAnswering"),V$t.forEach(t),p$r=r(Wqe," (DeBERTa-v2 model)"),Wqe.forEach(t),u$r=i(ge),z4=n(ge,"LI",{});var Qqe=s(z4);bMe=n(Qqe,"STRONG",{});var X$t=s(bMe);_$r=r(X$t,"distilbert"),X$t.forEach(t),b$r=r(Qqe," \u2014 "),KY=n(Qqe,"A",{href:!0});var z$t=s(KY);v$r=r(z$t,"TFDistilBertForQuestionAnswering"),z$t.forEach(t),F$r=r(Qqe," (DistilBERT model)"),Qqe.forEach(t),T$r=i(ge),W4=n(ge,"LI",{});var Hqe=s(W4);vMe=n(Hqe,"STRONG",{});var W$t=s(vMe);M$r=r(W$t,"electra"),W$t.forEach(t),E$r=r(Hqe," \u2014 "),ZY=n(Hqe,"A",{href:!0});var Q$t=s(ZY);C$r=r(Q$t,"TFElectraForQuestionAnswering"),Q$t.forEach(t),w$r=r(Hqe," (ELECTRA model)"),Hqe.forEach(t),A$r=i(ge),Q4=n(ge,"LI",{});var Uqe=s(Q4);FMe=n(Uqe,"STRONG",{});var H$t=s(FMe);L$r=r(H$t,"flaubert"),H$t.forEach(t),y$r=r(Uqe," \u2014 "),eK=n(Uqe,"A",{href:!0});var U$t=s(eK);x$r=r(U$t,"TFFlaubertForQuestionAnsweringSimple"),U$t.forEach(t),$$r=r(Uqe," (FlauBERT model)"),Uqe.forEach(t),k$r=i(ge),H4=n(ge,"LI",{});var Jqe=s(H4);TMe=n(Jqe,"STRONG",{});var J$t=s(TMe);S$r=r(J$t,"funnel"),J$t.forEach(t),R$r=r(Jqe," \u2014 "),oK=n(Jqe,"A",{href:!0});var Y$t=s(oK);P$r=r(Y$t,"TFFunnelForQuestionAnswering"),Y$t.forEach(t),B$r=r(Jqe," (Funnel Transformer model)"),Jqe.forEach(t),I$r=i(ge),U4=n(ge,"LI",{});var Yqe=s(U4);MMe=n(Yqe,"STRONG",{});var K$t=s(MMe);N$r=r(K$t,"gptj"),K$t.forEach(t),q$r=r(Yqe," \u2014 "),rK=n(Yqe,"A",{href:!0});var Z$t=s(rK);j$r=r(Z$t,"TFGPTJForQuestionAnswering"),Z$t.forEach(t),D$r=r(Yqe," (GPT-J model)"),Yqe.forEach(t),G$r=i(ge),J4=n(ge,"LI",{});var Kqe=s(J4);EMe=n(Kqe,"STRONG",{});var ekt=s(EMe);O$r=r(ekt,"longformer"),ekt.forEach(t),V$r=r(Kqe," \u2014 "),tK=n(Kqe,"A",{href:!0});var okt=s(tK);X$r=r(okt,"TFLongformerForQuestionAnswering"),okt.forEach(t),z$r=r(Kqe," (Longformer model)"),Kqe.forEach(t),W$r=i(ge),Y4=n(ge,"LI",{});var Zqe=s(Y4);CMe=n(Zqe,"STRONG",{});var rkt=s(CMe);Q$r=r(rkt,"mobilebert"),rkt.forEach(t),H$r=r(Zqe," \u2014 "),aK=n(Zqe,"A",{href:!0});var tkt=s(aK);U$r=r(tkt,"TFMobileBertForQuestionAnswering"),tkt.forEach(t),J$r=r(Zqe," (MobileBERT model)"),Zqe.forEach(t),Y$r=i(ge),K4=n(ge,"LI",{});var eje=s(K4);wMe=n(eje,"STRONG",{});var akt=s(wMe);K$r=r(akt,"mpnet"),akt.forEach(t),Z$r=r(eje," \u2014 "),nK=n(eje,"A",{href:!0});var nkt=s(nK);ekr=r(nkt,"TFMPNetForQuestionAnswering"),nkt.forEach(t),okr=r(eje," (MPNet model)"),eje.forEach(t),rkr=i(ge),Z4=n(ge,"LI",{});var oje=s(Z4);AMe=n(oje,"STRONG",{});var skt=s(AMe);tkr=r(skt,"rembert"),skt.forEach(t),akr=r(oje," \u2014 "),sK=n(oje,"A",{href:!0});var lkt=s(sK);nkr=r(lkt,"TFRemBertForQuestionAnswering"),lkt.forEach(t),skr=r(oje," (RemBERT model)"),oje.forEach(t),lkr=i(ge),eC=n(ge,"LI",{});var rje=s(eC);LMe=n(rje,"STRONG",{});var ikt=s(LMe);ikr=r(ikt,"roberta"),ikt.forEach(t),dkr=r(rje," \u2014 "),lK=n(rje,"A",{href:!0});var dkt=s(lK);ckr=r(dkt,"TFRobertaForQuestionAnswering"),dkt.forEach(t),fkr=r(rje," (RoBERTa model)"),rje.forEach(t),mkr=i(ge),oC=n(ge,"LI",{});var tje=s(oC);yMe=n(tje,"STRONG",{});var ckt=s(yMe);gkr=r(ckt,"roformer"),ckt.forEach(t),hkr=r(tje," \u2014 "),iK=n(tje,"A",{href:!0});var fkt=s(iK);pkr=r(fkt,"TFRoFormerForQuestionAnswering"),fkt.forEach(t),ukr=r(tje," (RoFormer model)"),tje.forEach(t),_kr=i(ge),rC=n(ge,"LI",{});var aje=s(rC);xMe=n(aje,"STRONG",{});var mkt=s(xMe);bkr=r(mkt,"xlm"),mkt.forEach(t),vkr=r(aje," \u2014 "),dK=n(aje,"A",{href:!0});var gkt=s(dK);Fkr=r(gkt,"TFXLMForQuestionAnsweringSimple"),gkt.forEach(t),Tkr=r(aje," (XLM model)"),aje.forEach(t),Mkr=i(ge),tC=n(ge,"LI",{});var nje=s(tC);$Me=n(nje,"STRONG",{});var hkt=s($Me);Ekr=r(hkt,"xlm-roberta"),hkt.forEach(t),Ckr=r(nje," \u2014 "),cK=n(nje,"A",{href:!0});var pkt=s(cK);wkr=r(pkt,"TFXLMRobertaForQuestionAnswering"),pkt.forEach(t),Akr=r(nje," (XLM-RoBERTa model)"),nje.forEach(t),Lkr=i(ge),aC=n(ge,"LI",{});var sje=s(aC);kMe=n(sje,"STRONG",{});var ukt=s(kMe);ykr=r(ukt,"xlnet"),ukt.forEach(t),xkr=r(sje," \u2014 "),fK=n(sje,"A",{href:!0});var _kt=s(fK);$kr=r(_kt,"TFXLNetForQuestionAnsweringSimple"),_kt.forEach(t),kkr=r(sje," (XLNet model)"),sje.forEach(t),ge.forEach(t),Skr=i(Wl),T(nC.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),OOe=i(f),Ic=n(f,"H2",{class:!0});var YXe=s(Ic);sC=n(YXe,"A",{id:!0,class:!0,href:!0});var bkt=s(sC);SMe=n(bkt,"SPAN",{});var vkt=s(SMe);T(px.$$.fragment,vkt),vkt.forEach(t),bkt.forEach(t),Rkr=i(YXe),RMe=n(YXe,"SPAN",{});var Fkt=s(RMe);Pkr=r(Fkt,"TFAutoModelForVision2Seq"),Fkt.forEach(t),YXe.forEach(t),VOe=i(f),fr=n(f,"DIV",{class:!0});var Ql=s(fr);T(ux.$$.fragment,Ql),Bkr=i(Ql),Nc=n(Ql,"P",{});var Cre=s(Nc);Ikr=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mK=n(Cre,"A",{href:!0});var Tkt=s(mK);Nkr=r(Tkt,"from_pretrained()"),Tkt.forEach(t),qkr=r(Cre," class method or the "),gK=n(Cre,"A",{href:!0});var Mkt=s(gK);jkr=r(Mkt,"from_config()"),Mkt.forEach(t),Dkr=r(Cre,` class
method.`),Cre.forEach(t),Gkr=i(Ql),_x=n(Ql,"P",{});var KXe=s(_x);Okr=r(KXe,"This class cannot be instantiated directly using "),PMe=n(KXe,"CODE",{});var Ekt=s(PMe);Vkr=r(Ekt,"__init__()"),Ekt.forEach(t),Xkr=r(KXe," (throws an error)."),KXe.forEach(t),zkr=i(Ql),Ot=n(Ql,"DIV",{class:!0});var XA=s(Ot);T(bx.$$.fragment,XA),Wkr=i(XA),BMe=n(XA,"P",{});var Ckt=s(BMe);Qkr=r(Ckt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ckt.forEach(t),Hkr=i(XA),qc=n(XA,"P",{});var wre=s(qc);Ukr=r(wre,`Note:
Loading a model from its configuration file does `),IMe=n(wre,"STRONG",{});var wkt=s(IMe);Jkr=r(wkt,"not"),wkt.forEach(t),Ykr=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(wre,"A",{href:!0});var Akt=s(hK);Kkr=r(Akt,"from_pretrained()"),Akt.forEach(t),Zkr=r(wre," to load the model weights."),wre.forEach(t),eSr=i(XA),T(lC.$$.fragment,XA),XA.forEach(t),oSr=i(Ql),jr=n(Ql,"DIV",{class:!0});var Hl=s(jr);T(vx.$$.fragment,Hl),rSr=i(Hl),NMe=n(Hl,"P",{});var Lkt=s(NMe);tSr=r(Lkt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Lkt.forEach(t),aSr=i(Hl),_n=n(Hl,"P",{});var zA=s(_n);nSr=r(zA,"The model class to instantiate is selected based on the "),qMe=n(zA,"CODE",{});var ykt=s(qMe);sSr=r(ykt,"model_type"),ykt.forEach(t),lSr=r(zA,` property of the config object (either
passed as an argument or loaded from `),jMe=n(zA,"CODE",{});var xkt=s(jMe);iSr=r(xkt,"pretrained_model_name_or_path"),xkt.forEach(t),dSr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=n(zA,"CODE",{});var $kt=s(DMe);cSr=r($kt,"pretrained_model_name_or_path"),$kt.forEach(t),fSr=r(zA,":"),zA.forEach(t),mSr=i(Hl),GMe=n(Hl,"UL",{});var kkt=s(GMe);iC=n(kkt,"LI",{});var lje=s(iC);OMe=n(lje,"STRONG",{});var Skt=s(OMe);gSr=r(Skt,"vision-encoder-decoder"),Skt.forEach(t),hSr=r(lje," \u2014 "),pK=n(lje,"A",{href:!0});var Rkt=s(pK);pSr=r(Rkt,"TFVisionEncoderDecoderModel"),Rkt.forEach(t),uSr=r(lje," (Vision Encoder decoder model)"),lje.forEach(t),kkt.forEach(t),_Sr=i(Hl),T(dC.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),XOe=i(f),jc=n(f,"H2",{class:!0});var ZXe=s(jc);cC=n(ZXe,"A",{id:!0,class:!0,href:!0});var Pkt=s(cC);VMe=n(Pkt,"SPAN",{});var Bkt=s(VMe);T(Fx.$$.fragment,Bkt),Bkt.forEach(t),Pkt.forEach(t),bSr=i(ZXe),XMe=n(ZXe,"SPAN",{});var Ikt=s(XMe);vSr=r(Ikt,"TFAutoModelForSpeechSeq2Seq"),Ikt.forEach(t),ZXe.forEach(t),zOe=i(f),mr=n(f,"DIV",{class:!0});var Ul=s(mr);T(Tx.$$.fragment,Ul),FSr=i(Ul),Dc=n(Ul,"P",{});var Are=s(Dc);TSr=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uK=n(Are,"A",{href:!0});var Nkt=s(uK);MSr=r(Nkt,"from_pretrained()"),Nkt.forEach(t),ESr=r(Are," class method or the "),_K=n(Are,"A",{href:!0});var qkt=s(_K);CSr=r(qkt,"from_config()"),qkt.forEach(t),wSr=r(Are,` class
method.`),Are.forEach(t),ASr=i(Ul),Mx=n(Ul,"P",{});var eze=s(Mx);LSr=r(eze,"This class cannot be instantiated directly using "),zMe=n(eze,"CODE",{});var jkt=s(zMe);ySr=r(jkt,"__init__()"),jkt.forEach(t),xSr=r(eze," (throws an error)."),eze.forEach(t),$Sr=i(Ul),Vt=n(Ul,"DIV",{class:!0});var WA=s(Vt);T(Ex.$$.fragment,WA),kSr=i(WA),WMe=n(WA,"P",{});var Dkt=s(WMe);SSr=r(Dkt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Dkt.forEach(t),RSr=i(WA),Gc=n(WA,"P",{});var Lre=s(Gc);PSr=r(Lre,`Note:
Loading a model from its configuration file does `),QMe=n(Lre,"STRONG",{});var Gkt=s(QMe);BSr=r(Gkt,"not"),Gkt.forEach(t),ISr=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=n(Lre,"A",{href:!0});var Okt=s(bK);NSr=r(Okt,"from_pretrained()"),Okt.forEach(t),qSr=r(Lre," to load the model weights."),Lre.forEach(t),jSr=i(WA),T(fC.$$.fragment,WA),WA.forEach(t),DSr=i(Ul),Dr=n(Ul,"DIV",{class:!0});var Jl=s(Dr);T(Cx.$$.fragment,Jl),GSr=i(Jl),HMe=n(Jl,"P",{});var Vkt=s(HMe);OSr=r(Vkt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Vkt.forEach(t),VSr=i(Jl),bn=n(Jl,"P",{});var QA=s(bn);XSr=r(QA,"The model class to instantiate is selected based on the "),UMe=n(QA,"CODE",{});var Xkt=s(UMe);zSr=r(Xkt,"model_type"),Xkt.forEach(t),WSr=r(QA,` property of the config object (either
passed as an argument or loaded from `),JMe=n(QA,"CODE",{});var zkt=s(JMe);QSr=r(zkt,"pretrained_model_name_or_path"),zkt.forEach(t),HSr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=n(QA,"CODE",{});var Wkt=s(YMe);USr=r(Wkt,"pretrained_model_name_or_path"),Wkt.forEach(t),JSr=r(QA,":"),QA.forEach(t),YSr=i(Jl),KMe=n(Jl,"UL",{});var Qkt=s(KMe);mC=n(Qkt,"LI",{});var ije=s(mC);ZMe=n(ije,"STRONG",{});var Hkt=s(ZMe);KSr=r(Hkt,"speech_to_text"),Hkt.forEach(t),ZSr=r(ije," \u2014 "),vK=n(ije,"A",{href:!0});var Ukt=s(vK);eRr=r(Ukt,"TFSpeech2TextForConditionalGeneration"),Ukt.forEach(t),oRr=r(ije," (Speech2Text model)"),ije.forEach(t),Qkt.forEach(t),rRr=i(Jl),T(gC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),WOe=i(f),Oc=n(f,"H2",{class:!0});var oze=s(Oc);hC=n(oze,"A",{id:!0,class:!0,href:!0});var Jkt=s(hC);eEe=n(Jkt,"SPAN",{});var Ykt=s(eEe);T(wx.$$.fragment,Ykt),Ykt.forEach(t),Jkt.forEach(t),tRr=i(oze),oEe=n(oze,"SPAN",{});var Kkt=s(oEe);aRr=r(Kkt,"FlaxAutoModel"),Kkt.forEach(t),oze.forEach(t),QOe=i(f),gr=n(f,"DIV",{class:!0});var Yl=s(gr);T(Ax.$$.fragment,Yl),nRr=i(Yl),Vc=n(Yl,"P",{});var yre=s(Vc);sRr=r(yre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FK=n(yre,"A",{href:!0});var Zkt=s(FK);lRr=r(Zkt,"from_pretrained()"),Zkt.forEach(t),iRr=r(yre," class method or the "),TK=n(yre,"A",{href:!0});var eSt=s(TK);dRr=r(eSt,"from_config()"),eSt.forEach(t),cRr=r(yre,` class
method.`),yre.forEach(t),fRr=i(Yl),Lx=n(Yl,"P",{});var rze=s(Lx);mRr=r(rze,"This class cannot be instantiated directly using "),rEe=n(rze,"CODE",{});var oSt=s(rEe);gRr=r(oSt,"__init__()"),oSt.forEach(t),hRr=r(rze," (throws an error)."),rze.forEach(t),pRr=i(Yl),Xt=n(Yl,"DIV",{class:!0});var HA=s(Xt);T(yx.$$.fragment,HA),uRr=i(HA),tEe=n(HA,"P",{});var rSt=s(tEe);_Rr=r(rSt,"Instantiates one of the base model classes of the library from a configuration."),rSt.forEach(t),bRr=i(HA),Xc=n(HA,"P",{});var xre=s(Xc);vRr=r(xre,`Note:
Loading a model from its configuration file does `),aEe=n(xre,"STRONG",{});var tSt=s(aEe);FRr=r(tSt,"not"),tSt.forEach(t),TRr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=n(xre,"A",{href:!0});var aSt=s(MK);MRr=r(aSt,"from_pretrained()"),aSt.forEach(t),ERr=r(xre," to load the model weights."),xre.forEach(t),CRr=i(HA),T(pC.$$.fragment,HA),HA.forEach(t),wRr=i(Yl),Gr=n(Yl,"DIV",{class:!0});var Kl=s(Gr);T(xx.$$.fragment,Kl),ARr=i(Kl),nEe=n(Kl,"P",{});var nSt=s(nEe);LRr=r(nSt,"Instantiate one of the base model classes of the library from a pretrained model."),nSt.forEach(t),yRr=i(Kl),vn=n(Kl,"P",{});var UA=s(vn);xRr=r(UA,"The model class to instantiate is selected based on the "),sEe=n(UA,"CODE",{});var sSt=s(sEe);$Rr=r(sSt,"model_type"),sSt.forEach(t),kRr=r(UA,` property of the config object (either
passed as an argument or loaded from `),lEe=n(UA,"CODE",{});var lSt=s(lEe);SRr=r(lSt,"pretrained_model_name_or_path"),lSt.forEach(t),RRr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=n(UA,"CODE",{});var iSt=s(iEe);PRr=r(iSt,"pretrained_model_name_or_path"),iSt.forEach(t),BRr=r(UA,":"),UA.forEach(t),IRr=i(Kl),oe=n(Kl,"UL",{});var ae=s(oe);uC=n(ae,"LI",{});var dje=s(uC);dEe=n(dje,"STRONG",{});var dSt=s(dEe);NRr=r(dSt,"albert"),dSt.forEach(t),qRr=r(dje," \u2014 "),EK=n(dje,"A",{href:!0});var cSt=s(EK);jRr=r(cSt,"FlaxAlbertModel"),cSt.forEach(t),DRr=r(dje," (ALBERT model)"),dje.forEach(t),GRr=i(ae),_C=n(ae,"LI",{});var cje=s(_C);cEe=n(cje,"STRONG",{});var fSt=s(cEe);ORr=r(fSt,"bart"),fSt.forEach(t),VRr=r(cje," \u2014 "),CK=n(cje,"A",{href:!0});var mSt=s(CK);XRr=r(mSt,"FlaxBartModel"),mSt.forEach(t),zRr=r(cje," (BART model)"),cje.forEach(t),WRr=i(ae),bC=n(ae,"LI",{});var fje=s(bC);fEe=n(fje,"STRONG",{});var gSt=s(fEe);QRr=r(gSt,"beit"),gSt.forEach(t),HRr=r(fje," \u2014 "),wK=n(fje,"A",{href:!0});var hSt=s(wK);URr=r(hSt,"FlaxBeitModel"),hSt.forEach(t),JRr=r(fje," (BEiT model)"),fje.forEach(t),YRr=i(ae),vC=n(ae,"LI",{});var mje=s(vC);mEe=n(mje,"STRONG",{});var pSt=s(mEe);KRr=r(pSt,"bert"),pSt.forEach(t),ZRr=r(mje," \u2014 "),AK=n(mje,"A",{href:!0});var uSt=s(AK);ePr=r(uSt,"FlaxBertModel"),uSt.forEach(t),oPr=r(mje," (BERT model)"),mje.forEach(t),rPr=i(ae),FC=n(ae,"LI",{});var gje=s(FC);gEe=n(gje,"STRONG",{});var _St=s(gEe);tPr=r(_St,"big_bird"),_St.forEach(t),aPr=r(gje," \u2014 "),LK=n(gje,"A",{href:!0});var bSt=s(LK);nPr=r(bSt,"FlaxBigBirdModel"),bSt.forEach(t),sPr=r(gje," (BigBird model)"),gje.forEach(t),lPr=i(ae),TC=n(ae,"LI",{});var hje=s(TC);hEe=n(hje,"STRONG",{});var vSt=s(hEe);iPr=r(vSt,"blenderbot"),vSt.forEach(t),dPr=r(hje," \u2014 "),yK=n(hje,"A",{href:!0});var FSt=s(yK);cPr=r(FSt,"FlaxBlenderbotModel"),FSt.forEach(t),fPr=r(hje," (Blenderbot model)"),hje.forEach(t),mPr=i(ae),MC=n(ae,"LI",{});var pje=s(MC);pEe=n(pje,"STRONG",{});var TSt=s(pEe);gPr=r(TSt,"blenderbot-small"),TSt.forEach(t),hPr=r(pje," \u2014 "),xK=n(pje,"A",{href:!0});var MSt=s(xK);pPr=r(MSt,"FlaxBlenderbotSmallModel"),MSt.forEach(t),uPr=r(pje," (BlenderbotSmall model)"),pje.forEach(t),_Pr=i(ae),EC=n(ae,"LI",{});var uje=s(EC);uEe=n(uje,"STRONG",{});var ESt=s(uEe);bPr=r(ESt,"clip"),ESt.forEach(t),vPr=r(uje," \u2014 "),$K=n(uje,"A",{href:!0});var CSt=s($K);FPr=r(CSt,"FlaxCLIPModel"),CSt.forEach(t),TPr=r(uje," (CLIP model)"),uje.forEach(t),MPr=i(ae),CC=n(ae,"LI",{});var _je=s(CC);_Ee=n(_je,"STRONG",{});var wSt=s(_Ee);EPr=r(wSt,"distilbert"),wSt.forEach(t),CPr=r(_je," \u2014 "),kK=n(_je,"A",{href:!0});var ASt=s(kK);wPr=r(ASt,"FlaxDistilBertModel"),ASt.forEach(t),APr=r(_je," (DistilBERT model)"),_je.forEach(t),LPr=i(ae),wC=n(ae,"LI",{});var bje=s(wC);bEe=n(bje,"STRONG",{});var LSt=s(bEe);yPr=r(LSt,"electra"),LSt.forEach(t),xPr=r(bje," \u2014 "),SK=n(bje,"A",{href:!0});var ySt=s(SK);$Pr=r(ySt,"FlaxElectraModel"),ySt.forEach(t),kPr=r(bje," (ELECTRA model)"),bje.forEach(t),SPr=i(ae),AC=n(ae,"LI",{});var vje=s(AC);vEe=n(vje,"STRONG",{});var xSt=s(vEe);RPr=r(xSt,"gpt2"),xSt.forEach(t),PPr=r(vje," \u2014 "),RK=n(vje,"A",{href:!0});var $St=s(RK);BPr=r($St,"FlaxGPT2Model"),$St.forEach(t),IPr=r(vje," (OpenAI GPT-2 model)"),vje.forEach(t),NPr=i(ae),LC=n(ae,"LI",{});var Fje=s(LC);FEe=n(Fje,"STRONG",{});var kSt=s(FEe);qPr=r(kSt,"gpt_neo"),kSt.forEach(t),jPr=r(Fje," \u2014 "),PK=n(Fje,"A",{href:!0});var SSt=s(PK);DPr=r(SSt,"FlaxGPTNeoModel"),SSt.forEach(t),GPr=r(Fje," (GPT Neo model)"),Fje.forEach(t),OPr=i(ae),yC=n(ae,"LI",{});var Tje=s(yC);TEe=n(Tje,"STRONG",{});var RSt=s(TEe);VPr=r(RSt,"gptj"),RSt.forEach(t),XPr=r(Tje," \u2014 "),BK=n(Tje,"A",{href:!0});var PSt=s(BK);zPr=r(PSt,"FlaxGPTJModel"),PSt.forEach(t),WPr=r(Tje," (GPT-J model)"),Tje.forEach(t),QPr=i(ae),xC=n(ae,"LI",{});var Mje=s(xC);MEe=n(Mje,"STRONG",{});var BSt=s(MEe);HPr=r(BSt,"longt5"),BSt.forEach(t),UPr=r(Mje," \u2014 "),IK=n(Mje,"A",{href:!0});var ISt=s(IK);JPr=r(ISt,"FlaxLongT5Model"),ISt.forEach(t),YPr=r(Mje," (LongT5 model)"),Mje.forEach(t),KPr=i(ae),$C=n(ae,"LI",{});var Eje=s($C);EEe=n(Eje,"STRONG",{});var NSt=s(EEe);ZPr=r(NSt,"marian"),NSt.forEach(t),eBr=r(Eje," \u2014 "),NK=n(Eje,"A",{href:!0});var qSt=s(NK);oBr=r(qSt,"FlaxMarianModel"),qSt.forEach(t),rBr=r(Eje," (Marian model)"),Eje.forEach(t),tBr=i(ae),kC=n(ae,"LI",{});var Cje=s(kC);CEe=n(Cje,"STRONG",{});var jSt=s(CEe);aBr=r(jSt,"mbart"),jSt.forEach(t),nBr=r(Cje," \u2014 "),qK=n(Cje,"A",{href:!0});var DSt=s(qK);sBr=r(DSt,"FlaxMBartModel"),DSt.forEach(t),lBr=r(Cje," (mBART model)"),Cje.forEach(t),iBr=i(ae),SC=n(ae,"LI",{});var wje=s(SC);wEe=n(wje,"STRONG",{});var GSt=s(wEe);dBr=r(GSt,"mt5"),GSt.forEach(t),cBr=r(wje," \u2014 "),jK=n(wje,"A",{href:!0});var OSt=s(jK);fBr=r(OSt,"FlaxMT5Model"),OSt.forEach(t),mBr=r(wje," (MT5 model)"),wje.forEach(t),gBr=i(ae),RC=n(ae,"LI",{});var Aje=s(RC);AEe=n(Aje,"STRONG",{});var VSt=s(AEe);hBr=r(VSt,"opt"),VSt.forEach(t),pBr=r(Aje," \u2014 "),DK=n(Aje,"A",{href:!0});var XSt=s(DK);uBr=r(XSt,"FlaxOPTModel"),XSt.forEach(t),_Br=r(Aje," (OPT model)"),Aje.forEach(t),bBr=i(ae),PC=n(ae,"LI",{});var Lje=s(PC);LEe=n(Lje,"STRONG",{});var zSt=s(LEe);vBr=r(zSt,"pegasus"),zSt.forEach(t),FBr=r(Lje," \u2014 "),GK=n(Lje,"A",{href:!0});var WSt=s(GK);TBr=r(WSt,"FlaxPegasusModel"),WSt.forEach(t),MBr=r(Lje," (Pegasus model)"),Lje.forEach(t),EBr=i(ae),BC=n(ae,"LI",{});var yje=s(BC);yEe=n(yje,"STRONG",{});var QSt=s(yEe);CBr=r(QSt,"roberta"),QSt.forEach(t),wBr=r(yje," \u2014 "),OK=n(yje,"A",{href:!0});var HSt=s(OK);ABr=r(HSt,"FlaxRobertaModel"),HSt.forEach(t),LBr=r(yje," (RoBERTa model)"),yje.forEach(t),yBr=i(ae),IC=n(ae,"LI",{});var xje=s(IC);xEe=n(xje,"STRONG",{});var USt=s(xEe);xBr=r(USt,"roformer"),USt.forEach(t),$Br=r(xje," \u2014 "),VK=n(xje,"A",{href:!0});var JSt=s(VK);kBr=r(JSt,"FlaxRoFormerModel"),JSt.forEach(t),SBr=r(xje," (RoFormer model)"),xje.forEach(t),RBr=i(ae),NC=n(ae,"LI",{});var $je=s(NC);$Ee=n($je,"STRONG",{});var YSt=s($Ee);PBr=r(YSt,"t5"),YSt.forEach(t),BBr=r($je," \u2014 "),XK=n($je,"A",{href:!0});var KSt=s(XK);IBr=r(KSt,"FlaxT5Model"),KSt.forEach(t),NBr=r($je," (T5 model)"),$je.forEach(t),qBr=i(ae),qC=n(ae,"LI",{});var kje=s(qC);kEe=n(kje,"STRONG",{});var ZSt=s(kEe);jBr=r(ZSt,"vision-text-dual-encoder"),ZSt.forEach(t),DBr=r(kje," \u2014 "),zK=n(kje,"A",{href:!0});var eRt=s(zK);GBr=r(eRt,"FlaxVisionTextDualEncoderModel"),eRt.forEach(t),OBr=r(kje," (VisionTextDualEncoder model)"),kje.forEach(t),VBr=i(ae),jC=n(ae,"LI",{});var Sje=s(jC);SEe=n(Sje,"STRONG",{});var oRt=s(SEe);XBr=r(oRt,"vit"),oRt.forEach(t),zBr=r(Sje," \u2014 "),WK=n(Sje,"A",{href:!0});var rRt=s(WK);WBr=r(rRt,"FlaxViTModel"),rRt.forEach(t),QBr=r(Sje," (ViT model)"),Sje.forEach(t),HBr=i(ae),DC=n(ae,"LI",{});var Rje=s(DC);REe=n(Rje,"STRONG",{});var tRt=s(REe);UBr=r(tRt,"wav2vec2"),tRt.forEach(t),JBr=r(Rje," \u2014 "),QK=n(Rje,"A",{href:!0});var aRt=s(QK);YBr=r(aRt,"FlaxWav2Vec2Model"),aRt.forEach(t),KBr=r(Rje," (Wav2Vec2 model)"),Rje.forEach(t),ZBr=i(ae),GC=n(ae,"LI",{});var Pje=s(GC);PEe=n(Pje,"STRONG",{});var nRt=s(PEe);eIr=r(nRt,"xglm"),nRt.forEach(t),oIr=r(Pje," \u2014 "),HK=n(Pje,"A",{href:!0});var sRt=s(HK);rIr=r(sRt,"FlaxXGLMModel"),sRt.forEach(t),tIr=r(Pje," (XGLM model)"),Pje.forEach(t),aIr=i(ae),OC=n(ae,"LI",{});var Bje=s(OC);BEe=n(Bje,"STRONG",{});var lRt=s(BEe);nIr=r(lRt,"xlm-roberta"),lRt.forEach(t),sIr=r(Bje," \u2014 "),UK=n(Bje,"A",{href:!0});var iRt=s(UK);lIr=r(iRt,"FlaxXLMRobertaModel"),iRt.forEach(t),iIr=r(Bje," (XLM-RoBERTa model)"),Bje.forEach(t),ae.forEach(t),dIr=i(Kl),T(VC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),HOe=i(f),zc=n(f,"H2",{class:!0});var tze=s(zc);XC=n(tze,"A",{id:!0,class:!0,href:!0});var dRt=s(XC);IEe=n(dRt,"SPAN",{});var cRt=s(IEe);T($x.$$.fragment,cRt),cRt.forEach(t),dRt.forEach(t),cIr=i(tze),NEe=n(tze,"SPAN",{});var fRt=s(NEe);fIr=r(fRt,"FlaxAutoModelForCausalLM"),fRt.forEach(t),tze.forEach(t),UOe=i(f),hr=n(f,"DIV",{class:!0});var Zl=s(hr);T(kx.$$.fragment,Zl),mIr=i(Zl),Wc=n(Zl,"P",{});var $re=s(Wc);gIr=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JK=n($re,"A",{href:!0});var mRt=s(JK);hIr=r(mRt,"from_pretrained()"),mRt.forEach(t),pIr=r($re," class method or the "),YK=n($re,"A",{href:!0});var gRt=s(YK);uIr=r(gRt,"from_config()"),gRt.forEach(t),_Ir=r($re,` class
method.`),$re.forEach(t),bIr=i(Zl),Sx=n(Zl,"P",{});var aze=s(Sx);vIr=r(aze,"This class cannot be instantiated directly using "),qEe=n(aze,"CODE",{});var hRt=s(qEe);FIr=r(hRt,"__init__()"),hRt.forEach(t),TIr=r(aze," (throws an error)."),aze.forEach(t),MIr=i(Zl),zt=n(Zl,"DIV",{class:!0});var JA=s(zt);T(Rx.$$.fragment,JA),EIr=i(JA),jEe=n(JA,"P",{});var pRt=s(jEe);CIr=r(pRt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pRt.forEach(t),wIr=i(JA),Qc=n(JA,"P",{});var kre=s(Qc);AIr=r(kre,`Note:
Loading a model from its configuration file does `),DEe=n(kre,"STRONG",{});var uRt=s(DEe);LIr=r(uRt,"not"),uRt.forEach(t),yIr=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=n(kre,"A",{href:!0});var _Rt=s(KK);xIr=r(_Rt,"from_pretrained()"),_Rt.forEach(t),$Ir=r(kre," to load the model weights."),kre.forEach(t),kIr=i(JA),T(zC.$$.fragment,JA),JA.forEach(t),SIr=i(Zl),Or=n(Zl,"DIV",{class:!0});var ei=s(Or);T(Px.$$.fragment,ei),RIr=i(ei),GEe=n(ei,"P",{});var bRt=s(GEe);PIr=r(bRt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),bRt.forEach(t),BIr=i(ei),Fn=n(ei,"P",{});var YA=s(Fn);IIr=r(YA,"The model class to instantiate is selected based on the "),OEe=n(YA,"CODE",{});var vRt=s(OEe);NIr=r(vRt,"model_type"),vRt.forEach(t),qIr=r(YA,` property of the config object (either
passed as an argument or loaded from `),VEe=n(YA,"CODE",{});var FRt=s(VEe);jIr=r(FRt,"pretrained_model_name_or_path"),FRt.forEach(t),DIr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=n(YA,"CODE",{});var TRt=s(XEe);GIr=r(TRt,"pretrained_model_name_or_path"),TRt.forEach(t),OIr=r(YA,":"),YA.forEach(t),VIr=i(ei),xe=n(ei,"UL",{});var Ne=s(xe);WC=n(Ne,"LI",{});var Ije=s(WC);zEe=n(Ije,"STRONG",{});var MRt=s(zEe);XIr=r(MRt,"bart"),MRt.forEach(t),zIr=r(Ije," \u2014 "),ZK=n(Ije,"A",{href:!0});var ERt=s(ZK);WIr=r(ERt,"FlaxBartForCausalLM"),ERt.forEach(t),QIr=r(Ije," (BART model)"),Ije.forEach(t),HIr=i(Ne),QC=n(Ne,"LI",{});var Nje=s(QC);WEe=n(Nje,"STRONG",{});var CRt=s(WEe);UIr=r(CRt,"bert"),CRt.forEach(t),JIr=r(Nje," \u2014 "),eZ=n(Nje,"A",{href:!0});var wRt=s(eZ);YIr=r(wRt,"FlaxBertForCausalLM"),wRt.forEach(t),KIr=r(Nje," (BERT model)"),Nje.forEach(t),ZIr=i(Ne),HC=n(Ne,"LI",{});var qje=s(HC);QEe=n(qje,"STRONG",{});var ARt=s(QEe);eNr=r(ARt,"big_bird"),ARt.forEach(t),oNr=r(qje," \u2014 "),oZ=n(qje,"A",{href:!0});var LRt=s(oZ);rNr=r(LRt,"FlaxBigBirdForCausalLM"),LRt.forEach(t),tNr=r(qje," (BigBird model)"),qje.forEach(t),aNr=i(Ne),UC=n(Ne,"LI",{});var jje=s(UC);HEe=n(jje,"STRONG",{});var yRt=s(HEe);nNr=r(yRt,"electra"),yRt.forEach(t),sNr=r(jje," \u2014 "),rZ=n(jje,"A",{href:!0});var xRt=s(rZ);lNr=r(xRt,"FlaxElectraForCausalLM"),xRt.forEach(t),iNr=r(jje," (ELECTRA model)"),jje.forEach(t),dNr=i(Ne),JC=n(Ne,"LI",{});var Dje=s(JC);UEe=n(Dje,"STRONG",{});var $Rt=s(UEe);cNr=r($Rt,"gpt2"),$Rt.forEach(t),fNr=r(Dje," \u2014 "),tZ=n(Dje,"A",{href:!0});var kRt=s(tZ);mNr=r(kRt,"FlaxGPT2LMHeadModel"),kRt.forEach(t),gNr=r(Dje," (OpenAI GPT-2 model)"),Dje.forEach(t),hNr=i(Ne),YC=n(Ne,"LI",{});var Gje=s(YC);JEe=n(Gje,"STRONG",{});var SRt=s(JEe);pNr=r(SRt,"gpt_neo"),SRt.forEach(t),uNr=r(Gje," \u2014 "),aZ=n(Gje,"A",{href:!0});var RRt=s(aZ);_Nr=r(RRt,"FlaxGPTNeoForCausalLM"),RRt.forEach(t),bNr=r(Gje," (GPT Neo model)"),Gje.forEach(t),vNr=i(Ne),KC=n(Ne,"LI",{});var Oje=s(KC);YEe=n(Oje,"STRONG",{});var PRt=s(YEe);FNr=r(PRt,"gptj"),PRt.forEach(t),TNr=r(Oje," \u2014 "),nZ=n(Oje,"A",{href:!0});var BRt=s(nZ);MNr=r(BRt,"FlaxGPTJForCausalLM"),BRt.forEach(t),ENr=r(Oje," (GPT-J model)"),Oje.forEach(t),CNr=i(Ne),ZC=n(Ne,"LI",{});var Vje=s(ZC);KEe=n(Vje,"STRONG",{});var IRt=s(KEe);wNr=r(IRt,"opt"),IRt.forEach(t),ANr=r(Vje," \u2014 "),sZ=n(Vje,"A",{href:!0});var NRt=s(sZ);LNr=r(NRt,"FlaxOPTForCausalLM"),NRt.forEach(t),yNr=r(Vje," (OPT model)"),Vje.forEach(t),xNr=i(Ne),e5=n(Ne,"LI",{});var Xje=s(e5);ZEe=n(Xje,"STRONG",{});var qRt=s(ZEe);$Nr=r(qRt,"roberta"),qRt.forEach(t),kNr=r(Xje," \u2014 "),lZ=n(Xje,"A",{href:!0});var jRt=s(lZ);SNr=r(jRt,"FlaxRobertaForCausalLM"),jRt.forEach(t),RNr=r(Xje," (RoBERTa model)"),Xje.forEach(t),PNr=i(Ne),o5=n(Ne,"LI",{});var zje=s(o5);e4e=n(zje,"STRONG",{});var DRt=s(e4e);BNr=r(DRt,"xglm"),DRt.forEach(t),INr=r(zje," \u2014 "),iZ=n(zje,"A",{href:!0});var GRt=s(iZ);NNr=r(GRt,"FlaxXGLMForCausalLM"),GRt.forEach(t),qNr=r(zje," (XGLM model)"),zje.forEach(t),Ne.forEach(t),jNr=i(ei),T(r5.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),JOe=i(f),Hc=n(f,"H2",{class:!0});var nze=s(Hc);t5=n(nze,"A",{id:!0,class:!0,href:!0});var ORt=s(t5);o4e=n(ORt,"SPAN",{});var VRt=s(o4e);T(Bx.$$.fragment,VRt),VRt.forEach(t),ORt.forEach(t),DNr=i(nze),r4e=n(nze,"SPAN",{});var XRt=s(r4e);GNr=r(XRt,"FlaxAutoModelForPreTraining"),XRt.forEach(t),nze.forEach(t),YOe=i(f),pr=n(f,"DIV",{class:!0});var oi=s(pr);T(Ix.$$.fragment,oi),ONr=i(oi),Uc=n(oi,"P",{});var Sre=s(Uc);VNr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dZ=n(Sre,"A",{href:!0});var zRt=s(dZ);XNr=r(zRt,"from_pretrained()"),zRt.forEach(t),zNr=r(Sre," class method or the "),cZ=n(Sre,"A",{href:!0});var WRt=s(cZ);WNr=r(WRt,"from_config()"),WRt.forEach(t),QNr=r(Sre,` class
method.`),Sre.forEach(t),HNr=i(oi),Nx=n(oi,"P",{});var sze=s(Nx);UNr=r(sze,"This class cannot be instantiated directly using "),t4e=n(sze,"CODE",{});var QRt=s(t4e);JNr=r(QRt,"__init__()"),QRt.forEach(t),YNr=r(sze," (throws an error)."),sze.forEach(t),KNr=i(oi),Wt=n(oi,"DIV",{class:!0});var KA=s(Wt);T(qx.$$.fragment,KA),ZNr=i(KA),a4e=n(KA,"P",{});var HRt=s(a4e);eqr=r(HRt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),HRt.forEach(t),oqr=i(KA),Jc=n(KA,"P",{});var Rre=s(Jc);rqr=r(Rre,`Note:
Loading a model from its configuration file does `),n4e=n(Rre,"STRONG",{});var URt=s(n4e);tqr=r(URt,"not"),URt.forEach(t),aqr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=n(Rre,"A",{href:!0});var JRt=s(fZ);nqr=r(JRt,"from_pretrained()"),JRt.forEach(t),sqr=r(Rre," to load the model weights."),Rre.forEach(t),lqr=i(KA),T(a5.$$.fragment,KA),KA.forEach(t),iqr=i(oi),Vr=n(oi,"DIV",{class:!0});var ri=s(Vr);T(jx.$$.fragment,ri),dqr=i(ri),s4e=n(ri,"P",{});var YRt=s(s4e);cqr=r(YRt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),YRt.forEach(t),fqr=i(ri),Tn=n(ri,"P",{});var ZA=s(Tn);mqr=r(ZA,"The model class to instantiate is selected based on the "),l4e=n(ZA,"CODE",{});var KRt=s(l4e);gqr=r(KRt,"model_type"),KRt.forEach(t),hqr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),i4e=n(ZA,"CODE",{});var ZRt=s(i4e);pqr=r(ZRt,"pretrained_model_name_or_path"),ZRt.forEach(t),uqr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d4e=n(ZA,"CODE",{});var ePt=s(d4e);_qr=r(ePt,"pretrained_model_name_or_path"),ePt.forEach(t),bqr=r(ZA,":"),ZA.forEach(t),vqr=i(ri),Ee=n(ri,"UL",{});var we=s(Ee);n5=n(we,"LI",{});var Wje=s(n5);c4e=n(Wje,"STRONG",{});var oPt=s(c4e);Fqr=r(oPt,"albert"),oPt.forEach(t),Tqr=r(Wje," \u2014 "),mZ=n(Wje,"A",{href:!0});var rPt=s(mZ);Mqr=r(rPt,"FlaxAlbertForPreTraining"),rPt.forEach(t),Eqr=r(Wje," (ALBERT model)"),Wje.forEach(t),Cqr=i(we),s5=n(we,"LI",{});var Qje=s(s5);f4e=n(Qje,"STRONG",{});var tPt=s(f4e);wqr=r(tPt,"bart"),tPt.forEach(t),Aqr=r(Qje," \u2014 "),gZ=n(Qje,"A",{href:!0});var aPt=s(gZ);Lqr=r(aPt,"FlaxBartForConditionalGeneration"),aPt.forEach(t),yqr=r(Qje," (BART model)"),Qje.forEach(t),xqr=i(we),l5=n(we,"LI",{});var Hje=s(l5);m4e=n(Hje,"STRONG",{});var nPt=s(m4e);$qr=r(nPt,"bert"),nPt.forEach(t),kqr=r(Hje," \u2014 "),hZ=n(Hje,"A",{href:!0});var sPt=s(hZ);Sqr=r(sPt,"FlaxBertForPreTraining"),sPt.forEach(t),Rqr=r(Hje," (BERT model)"),Hje.forEach(t),Pqr=i(we),i5=n(we,"LI",{});var Uje=s(i5);g4e=n(Uje,"STRONG",{});var lPt=s(g4e);Bqr=r(lPt,"big_bird"),lPt.forEach(t),Iqr=r(Uje," \u2014 "),pZ=n(Uje,"A",{href:!0});var iPt=s(pZ);Nqr=r(iPt,"FlaxBigBirdForPreTraining"),iPt.forEach(t),qqr=r(Uje," (BigBird model)"),Uje.forEach(t),jqr=i(we),d5=n(we,"LI",{});var Jje=s(d5);h4e=n(Jje,"STRONG",{});var dPt=s(h4e);Dqr=r(dPt,"electra"),dPt.forEach(t),Gqr=r(Jje," \u2014 "),uZ=n(Jje,"A",{href:!0});var cPt=s(uZ);Oqr=r(cPt,"FlaxElectraForPreTraining"),cPt.forEach(t),Vqr=r(Jje," (ELECTRA model)"),Jje.forEach(t),Xqr=i(we),c5=n(we,"LI",{});var Yje=s(c5);p4e=n(Yje,"STRONG",{});var fPt=s(p4e);zqr=r(fPt,"longt5"),fPt.forEach(t),Wqr=r(Yje," \u2014 "),_Z=n(Yje,"A",{href:!0});var mPt=s(_Z);Qqr=r(mPt,"FlaxLongT5ForConditionalGeneration"),mPt.forEach(t),Hqr=r(Yje," (LongT5 model)"),Yje.forEach(t),Uqr=i(we),f5=n(we,"LI",{});var Kje=s(f5);u4e=n(Kje,"STRONG",{});var gPt=s(u4e);Jqr=r(gPt,"mbart"),gPt.forEach(t),Yqr=r(Kje," \u2014 "),bZ=n(Kje,"A",{href:!0});var hPt=s(bZ);Kqr=r(hPt,"FlaxMBartForConditionalGeneration"),hPt.forEach(t),Zqr=r(Kje," (mBART model)"),Kje.forEach(t),ejr=i(we),m5=n(we,"LI",{});var Zje=s(m5);_4e=n(Zje,"STRONG",{});var pPt=s(_4e);ojr=r(pPt,"mt5"),pPt.forEach(t),rjr=r(Zje," \u2014 "),vZ=n(Zje,"A",{href:!0});var uPt=s(vZ);tjr=r(uPt,"FlaxMT5ForConditionalGeneration"),uPt.forEach(t),ajr=r(Zje," (MT5 model)"),Zje.forEach(t),njr=i(we),g5=n(we,"LI",{});var eDe=s(g5);b4e=n(eDe,"STRONG",{});var _Pt=s(b4e);sjr=r(_Pt,"roberta"),_Pt.forEach(t),ljr=r(eDe," \u2014 "),FZ=n(eDe,"A",{href:!0});var bPt=s(FZ);ijr=r(bPt,"FlaxRobertaForMaskedLM"),bPt.forEach(t),djr=r(eDe," (RoBERTa model)"),eDe.forEach(t),cjr=i(we),h5=n(we,"LI",{});var oDe=s(h5);v4e=n(oDe,"STRONG",{});var vPt=s(v4e);fjr=r(vPt,"roformer"),vPt.forEach(t),mjr=r(oDe," \u2014 "),TZ=n(oDe,"A",{href:!0});var FPt=s(TZ);gjr=r(FPt,"FlaxRoFormerForMaskedLM"),FPt.forEach(t),hjr=r(oDe," (RoFormer model)"),oDe.forEach(t),pjr=i(we),p5=n(we,"LI",{});var rDe=s(p5);F4e=n(rDe,"STRONG",{});var TPt=s(F4e);ujr=r(TPt,"t5"),TPt.forEach(t),_jr=r(rDe," \u2014 "),MZ=n(rDe,"A",{href:!0});var MPt=s(MZ);bjr=r(MPt,"FlaxT5ForConditionalGeneration"),MPt.forEach(t),vjr=r(rDe," (T5 model)"),rDe.forEach(t),Fjr=i(we),u5=n(we,"LI",{});var tDe=s(u5);T4e=n(tDe,"STRONG",{});var EPt=s(T4e);Tjr=r(EPt,"wav2vec2"),EPt.forEach(t),Mjr=r(tDe," \u2014 "),EZ=n(tDe,"A",{href:!0});var CPt=s(EZ);Ejr=r(CPt,"FlaxWav2Vec2ForPreTraining"),CPt.forEach(t),Cjr=r(tDe," (Wav2Vec2 model)"),tDe.forEach(t),wjr=i(we),_5=n(we,"LI",{});var aDe=s(_5);M4e=n(aDe,"STRONG",{});var wPt=s(M4e);Ajr=r(wPt,"xlm-roberta"),wPt.forEach(t),Ljr=r(aDe," \u2014 "),CZ=n(aDe,"A",{href:!0});var APt=s(CZ);yjr=r(APt,"FlaxXLMRobertaForMaskedLM"),APt.forEach(t),xjr=r(aDe," (XLM-RoBERTa model)"),aDe.forEach(t),we.forEach(t),$jr=i(ri),T(b5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),KOe=i(f),Yc=n(f,"H2",{class:!0});var lze=s(Yc);v5=n(lze,"A",{id:!0,class:!0,href:!0});var LPt=s(v5);E4e=n(LPt,"SPAN",{});var yPt=s(E4e);T(Dx.$$.fragment,yPt),yPt.forEach(t),LPt.forEach(t),kjr=i(lze),C4e=n(lze,"SPAN",{});var xPt=s(C4e);Sjr=r(xPt,"FlaxAutoModelForMaskedLM"),xPt.forEach(t),lze.forEach(t),ZOe=i(f),ur=n(f,"DIV",{class:!0});var ti=s(ur);T(Gx.$$.fragment,ti),Rjr=i(ti),Kc=n(ti,"P",{});var Pre=s(Kc);Pjr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wZ=n(Pre,"A",{href:!0});var $Pt=s(wZ);Bjr=r($Pt,"from_pretrained()"),$Pt.forEach(t),Ijr=r(Pre," class method or the "),AZ=n(Pre,"A",{href:!0});var kPt=s(AZ);Njr=r(kPt,"from_config()"),kPt.forEach(t),qjr=r(Pre,` class
method.`),Pre.forEach(t),jjr=i(ti),Ox=n(ti,"P",{});var ize=s(Ox);Djr=r(ize,"This class cannot be instantiated directly using "),w4e=n(ize,"CODE",{});var SPt=s(w4e);Gjr=r(SPt,"__init__()"),SPt.forEach(t),Ojr=r(ize," (throws an error)."),ize.forEach(t),Vjr=i(ti),Qt=n(ti,"DIV",{class:!0});var e6=s(Qt);T(Vx.$$.fragment,e6),Xjr=i(e6),A4e=n(e6,"P",{});var RPt=s(A4e);zjr=r(RPt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),RPt.forEach(t),Wjr=i(e6),Zc=n(e6,"P",{});var Bre=s(Zc);Qjr=r(Bre,`Note:
Loading a model from its configuration file does `),L4e=n(Bre,"STRONG",{});var PPt=s(L4e);Hjr=r(PPt,"not"),PPt.forEach(t),Ujr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),LZ=n(Bre,"A",{href:!0});var BPt=s(LZ);Jjr=r(BPt,"from_pretrained()"),BPt.forEach(t),Yjr=r(Bre," to load the model weights."),Bre.forEach(t),Kjr=i(e6),T(F5.$$.fragment,e6),e6.forEach(t),Zjr=i(ti),Xr=n(ti,"DIV",{class:!0});var ai=s(Xr);T(Xx.$$.fragment,ai),eDr=i(ai),y4e=n(ai,"P",{});var IPt=s(y4e);oDr=r(IPt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),IPt.forEach(t),rDr=i(ai),Mn=n(ai,"P",{});var o6=s(Mn);tDr=r(o6,"The model class to instantiate is selected based on the "),x4e=n(o6,"CODE",{});var NPt=s(x4e);aDr=r(NPt,"model_type"),NPt.forEach(t),nDr=r(o6,` property of the config object (either
passed as an argument or loaded from `),$4e=n(o6,"CODE",{});var qPt=s($4e);sDr=r(qPt,"pretrained_model_name_or_path"),qPt.forEach(t),lDr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=n(o6,"CODE",{});var jPt=s(k4e);iDr=r(jPt,"pretrained_model_name_or_path"),jPt.forEach(t),dDr=r(o6,":"),o6.forEach(t),cDr=i(ai),$e=n(ai,"UL",{});var qe=s($e);T5=n(qe,"LI",{});var nDe=s(T5);S4e=n(nDe,"STRONG",{});var DPt=s(S4e);fDr=r(DPt,"albert"),DPt.forEach(t),mDr=r(nDe," \u2014 "),yZ=n(nDe,"A",{href:!0});var GPt=s(yZ);gDr=r(GPt,"FlaxAlbertForMaskedLM"),GPt.forEach(t),hDr=r(nDe," (ALBERT model)"),nDe.forEach(t),pDr=i(qe),M5=n(qe,"LI",{});var sDe=s(M5);R4e=n(sDe,"STRONG",{});var OPt=s(R4e);uDr=r(OPt,"bart"),OPt.forEach(t),_Dr=r(sDe," \u2014 "),xZ=n(sDe,"A",{href:!0});var VPt=s(xZ);bDr=r(VPt,"FlaxBartForConditionalGeneration"),VPt.forEach(t),vDr=r(sDe," (BART model)"),sDe.forEach(t),FDr=i(qe),E5=n(qe,"LI",{});var lDe=s(E5);P4e=n(lDe,"STRONG",{});var XPt=s(P4e);TDr=r(XPt,"bert"),XPt.forEach(t),MDr=r(lDe," \u2014 "),$Z=n(lDe,"A",{href:!0});var zPt=s($Z);EDr=r(zPt,"FlaxBertForMaskedLM"),zPt.forEach(t),CDr=r(lDe," (BERT model)"),lDe.forEach(t),wDr=i(qe),C5=n(qe,"LI",{});var iDe=s(C5);B4e=n(iDe,"STRONG",{});var WPt=s(B4e);ADr=r(WPt,"big_bird"),WPt.forEach(t),LDr=r(iDe," \u2014 "),kZ=n(iDe,"A",{href:!0});var QPt=s(kZ);yDr=r(QPt,"FlaxBigBirdForMaskedLM"),QPt.forEach(t),xDr=r(iDe," (BigBird model)"),iDe.forEach(t),$Dr=i(qe),w5=n(qe,"LI",{});var dDe=s(w5);I4e=n(dDe,"STRONG",{});var HPt=s(I4e);kDr=r(HPt,"distilbert"),HPt.forEach(t),SDr=r(dDe," \u2014 "),SZ=n(dDe,"A",{href:!0});var UPt=s(SZ);RDr=r(UPt,"FlaxDistilBertForMaskedLM"),UPt.forEach(t),PDr=r(dDe," (DistilBERT model)"),dDe.forEach(t),BDr=i(qe),A5=n(qe,"LI",{});var cDe=s(A5);N4e=n(cDe,"STRONG",{});var JPt=s(N4e);IDr=r(JPt,"electra"),JPt.forEach(t),NDr=r(cDe," \u2014 "),RZ=n(cDe,"A",{href:!0});var YPt=s(RZ);qDr=r(YPt,"FlaxElectraForMaskedLM"),YPt.forEach(t),jDr=r(cDe," (ELECTRA model)"),cDe.forEach(t),DDr=i(qe),L5=n(qe,"LI",{});var fDe=s(L5);q4e=n(fDe,"STRONG",{});var KPt=s(q4e);GDr=r(KPt,"mbart"),KPt.forEach(t),ODr=r(fDe," \u2014 "),PZ=n(fDe,"A",{href:!0});var ZPt=s(PZ);VDr=r(ZPt,"FlaxMBartForConditionalGeneration"),ZPt.forEach(t),XDr=r(fDe," (mBART model)"),fDe.forEach(t),zDr=i(qe),y5=n(qe,"LI",{});var mDe=s(y5);j4e=n(mDe,"STRONG",{});var eBt=s(j4e);WDr=r(eBt,"roberta"),eBt.forEach(t),QDr=r(mDe," \u2014 "),BZ=n(mDe,"A",{href:!0});var oBt=s(BZ);HDr=r(oBt,"FlaxRobertaForMaskedLM"),oBt.forEach(t),UDr=r(mDe," (RoBERTa model)"),mDe.forEach(t),JDr=i(qe),x5=n(qe,"LI",{});var gDe=s(x5);D4e=n(gDe,"STRONG",{});var rBt=s(D4e);YDr=r(rBt,"roformer"),rBt.forEach(t),KDr=r(gDe," \u2014 "),IZ=n(gDe,"A",{href:!0});var tBt=s(IZ);ZDr=r(tBt,"FlaxRoFormerForMaskedLM"),tBt.forEach(t),eGr=r(gDe," (RoFormer model)"),gDe.forEach(t),oGr=i(qe),$5=n(qe,"LI",{});var hDe=s($5);G4e=n(hDe,"STRONG",{});var aBt=s(G4e);rGr=r(aBt,"xlm-roberta"),aBt.forEach(t),tGr=r(hDe," \u2014 "),NZ=n(hDe,"A",{href:!0});var nBt=s(NZ);aGr=r(nBt,"FlaxXLMRobertaForMaskedLM"),nBt.forEach(t),nGr=r(hDe," (XLM-RoBERTa model)"),hDe.forEach(t),qe.forEach(t),sGr=i(ai),T(k5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),eVe=i(f),ef=n(f,"H2",{class:!0});var dze=s(ef);S5=n(dze,"A",{id:!0,class:!0,href:!0});var sBt=s(S5);O4e=n(sBt,"SPAN",{});var lBt=s(O4e);T(zx.$$.fragment,lBt),lBt.forEach(t),sBt.forEach(t),lGr=i(dze),V4e=n(dze,"SPAN",{});var iBt=s(V4e);iGr=r(iBt,"FlaxAutoModelForSeq2SeqLM"),iBt.forEach(t),dze.forEach(t),oVe=i(f),_r=n(f,"DIV",{class:!0});var ni=s(_r);T(Wx.$$.fragment,ni),dGr=i(ni),of=n(ni,"P",{});var Ire=s(of);cGr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qZ=n(Ire,"A",{href:!0});var dBt=s(qZ);fGr=r(dBt,"from_pretrained()"),dBt.forEach(t),mGr=r(Ire," class method or the "),jZ=n(Ire,"A",{href:!0});var cBt=s(jZ);gGr=r(cBt,"from_config()"),cBt.forEach(t),hGr=r(Ire,` class
method.`),Ire.forEach(t),pGr=i(ni),Qx=n(ni,"P",{});var cze=s(Qx);uGr=r(cze,"This class cannot be instantiated directly using "),X4e=n(cze,"CODE",{});var fBt=s(X4e);_Gr=r(fBt,"__init__()"),fBt.forEach(t),bGr=r(cze," (throws an error)."),cze.forEach(t),vGr=i(ni),Ht=n(ni,"DIV",{class:!0});var r6=s(Ht);T(Hx.$$.fragment,r6),FGr=i(r6),z4e=n(r6,"P",{});var mBt=s(z4e);TGr=r(mBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),mBt.forEach(t),MGr=i(r6),rf=n(r6,"P",{});var Nre=s(rf);EGr=r(Nre,`Note:
Loading a model from its configuration file does `),W4e=n(Nre,"STRONG",{});var gBt=s(W4e);CGr=r(gBt,"not"),gBt.forEach(t),wGr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=n(Nre,"A",{href:!0});var hBt=s(DZ);AGr=r(hBt,"from_pretrained()"),hBt.forEach(t),LGr=r(Nre," to load the model weights."),Nre.forEach(t),yGr=i(r6),T(R5.$$.fragment,r6),r6.forEach(t),xGr=i(ni),zr=n(ni,"DIV",{class:!0});var si=s(zr);T(Ux.$$.fragment,si),$Gr=i(si),Q4e=n(si,"P",{});var pBt=s(Q4e);kGr=r(pBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pBt.forEach(t),SGr=i(si),En=n(si,"P",{});var t6=s(En);RGr=r(t6,"The model class to instantiate is selected based on the "),H4e=n(t6,"CODE",{});var uBt=s(H4e);PGr=r(uBt,"model_type"),uBt.forEach(t),BGr=r(t6,` property of the config object (either
passed as an argument or loaded from `),U4e=n(t6,"CODE",{});var _Bt=s(U4e);IGr=r(_Bt,"pretrained_model_name_or_path"),_Bt.forEach(t),NGr=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=n(t6,"CODE",{});var bBt=s(J4e);qGr=r(bBt,"pretrained_model_name_or_path"),bBt.forEach(t),jGr=r(t6,":"),t6.forEach(t),DGr=i(si),ke=n(si,"UL",{});var je=s(ke);P5=n(je,"LI",{});var pDe=s(P5);Y4e=n(pDe,"STRONG",{});var vBt=s(Y4e);GGr=r(vBt,"bart"),vBt.forEach(t),OGr=r(pDe," \u2014 "),GZ=n(pDe,"A",{href:!0});var FBt=s(GZ);VGr=r(FBt,"FlaxBartForConditionalGeneration"),FBt.forEach(t),XGr=r(pDe," (BART model)"),pDe.forEach(t),zGr=i(je),B5=n(je,"LI",{});var uDe=s(B5);K4e=n(uDe,"STRONG",{});var TBt=s(K4e);WGr=r(TBt,"blenderbot"),TBt.forEach(t),QGr=r(uDe," \u2014 "),OZ=n(uDe,"A",{href:!0});var MBt=s(OZ);HGr=r(MBt,"FlaxBlenderbotForConditionalGeneration"),MBt.forEach(t),UGr=r(uDe," (Blenderbot model)"),uDe.forEach(t),JGr=i(je),I5=n(je,"LI",{});var _De=s(I5);Z4e=n(_De,"STRONG",{});var EBt=s(Z4e);YGr=r(EBt,"blenderbot-small"),EBt.forEach(t),KGr=r(_De," \u2014 "),VZ=n(_De,"A",{href:!0});var CBt=s(VZ);ZGr=r(CBt,"FlaxBlenderbotSmallForConditionalGeneration"),CBt.forEach(t),eOr=r(_De," (BlenderbotSmall model)"),_De.forEach(t),oOr=i(je),N5=n(je,"LI",{});var bDe=s(N5);eCe=n(bDe,"STRONG",{});var wBt=s(eCe);rOr=r(wBt,"encoder-decoder"),wBt.forEach(t),tOr=r(bDe," \u2014 "),XZ=n(bDe,"A",{href:!0});var ABt=s(XZ);aOr=r(ABt,"FlaxEncoderDecoderModel"),ABt.forEach(t),nOr=r(bDe," (Encoder decoder model)"),bDe.forEach(t),sOr=i(je),q5=n(je,"LI",{});var vDe=s(q5);oCe=n(vDe,"STRONG",{});var LBt=s(oCe);lOr=r(LBt,"longt5"),LBt.forEach(t),iOr=r(vDe," \u2014 "),zZ=n(vDe,"A",{href:!0});var yBt=s(zZ);dOr=r(yBt,"FlaxLongT5ForConditionalGeneration"),yBt.forEach(t),cOr=r(vDe," (LongT5 model)"),vDe.forEach(t),fOr=i(je),j5=n(je,"LI",{});var FDe=s(j5);rCe=n(FDe,"STRONG",{});var xBt=s(rCe);mOr=r(xBt,"marian"),xBt.forEach(t),gOr=r(FDe," \u2014 "),WZ=n(FDe,"A",{href:!0});var $Bt=s(WZ);hOr=r($Bt,"FlaxMarianMTModel"),$Bt.forEach(t),pOr=r(FDe," (Marian model)"),FDe.forEach(t),uOr=i(je),D5=n(je,"LI",{});var TDe=s(D5);tCe=n(TDe,"STRONG",{});var kBt=s(tCe);_Or=r(kBt,"mbart"),kBt.forEach(t),bOr=r(TDe," \u2014 "),QZ=n(TDe,"A",{href:!0});var SBt=s(QZ);vOr=r(SBt,"FlaxMBartForConditionalGeneration"),SBt.forEach(t),FOr=r(TDe," (mBART model)"),TDe.forEach(t),TOr=i(je),G5=n(je,"LI",{});var MDe=s(G5);aCe=n(MDe,"STRONG",{});var RBt=s(aCe);MOr=r(RBt,"mt5"),RBt.forEach(t),EOr=r(MDe," \u2014 "),HZ=n(MDe,"A",{href:!0});var PBt=s(HZ);COr=r(PBt,"FlaxMT5ForConditionalGeneration"),PBt.forEach(t),wOr=r(MDe," (MT5 model)"),MDe.forEach(t),AOr=i(je),O5=n(je,"LI",{});var EDe=s(O5);nCe=n(EDe,"STRONG",{});var BBt=s(nCe);LOr=r(BBt,"pegasus"),BBt.forEach(t),yOr=r(EDe," \u2014 "),UZ=n(EDe,"A",{href:!0});var IBt=s(UZ);xOr=r(IBt,"FlaxPegasusForConditionalGeneration"),IBt.forEach(t),$Or=r(EDe," (Pegasus model)"),EDe.forEach(t),kOr=i(je),V5=n(je,"LI",{});var CDe=s(V5);sCe=n(CDe,"STRONG",{});var NBt=s(sCe);SOr=r(NBt,"t5"),NBt.forEach(t),ROr=r(CDe," \u2014 "),JZ=n(CDe,"A",{href:!0});var qBt=s(JZ);POr=r(qBt,"FlaxT5ForConditionalGeneration"),qBt.forEach(t),BOr=r(CDe," (T5 model)"),CDe.forEach(t),je.forEach(t),IOr=i(si),T(X5.$$.fragment,si),si.forEach(t),ni.forEach(t),rVe=i(f),tf=n(f,"H2",{class:!0});var fze=s(tf);z5=n(fze,"A",{id:!0,class:!0,href:!0});var jBt=s(z5);lCe=n(jBt,"SPAN",{});var DBt=s(lCe);T(Jx.$$.fragment,DBt),DBt.forEach(t),jBt.forEach(t),NOr=i(fze),iCe=n(fze,"SPAN",{});var GBt=s(iCe);qOr=r(GBt,"FlaxAutoModelForSequenceClassification"),GBt.forEach(t),fze.forEach(t),tVe=i(f),br=n(f,"DIV",{class:!0});var li=s(br);T(Yx.$$.fragment,li),jOr=i(li),af=n(li,"P",{});var qre=s(af);DOr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YZ=n(qre,"A",{href:!0});var OBt=s(YZ);GOr=r(OBt,"from_pretrained()"),OBt.forEach(t),OOr=r(qre," class method or the "),KZ=n(qre,"A",{href:!0});var VBt=s(KZ);VOr=r(VBt,"from_config()"),VBt.forEach(t),XOr=r(qre,` class
method.`),qre.forEach(t),zOr=i(li),Kx=n(li,"P",{});var mze=s(Kx);WOr=r(mze,"This class cannot be instantiated directly using "),dCe=n(mze,"CODE",{});var XBt=s(dCe);QOr=r(XBt,"__init__()"),XBt.forEach(t),HOr=r(mze," (throws an error)."),mze.forEach(t),UOr=i(li),Ut=n(li,"DIV",{class:!0});var a6=s(Ut);T(Zx.$$.fragment,a6),JOr=i(a6),cCe=n(a6,"P",{});var zBt=s(cCe);YOr=r(zBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zBt.forEach(t),KOr=i(a6),nf=n(a6,"P",{});var jre=s(nf);ZOr=r(jre,`Note:
Loading a model from its configuration file does `),fCe=n(jre,"STRONG",{});var WBt=s(fCe);eVr=r(WBt,"not"),WBt.forEach(t),oVr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZZ=n(jre,"A",{href:!0});var QBt=s(ZZ);rVr=r(QBt,"from_pretrained()"),QBt.forEach(t),tVr=r(jre," to load the model weights."),jre.forEach(t),aVr=i(a6),T(W5.$$.fragment,a6),a6.forEach(t),nVr=i(li),Wr=n(li,"DIV",{class:!0});var ii=s(Wr);T(e$.$$.fragment,ii),sVr=i(ii),mCe=n(ii,"P",{});var HBt=s(mCe);lVr=r(HBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),HBt.forEach(t),iVr=i(ii),Cn=n(ii,"P",{});var n6=s(Cn);dVr=r(n6,"The model class to instantiate is selected based on the "),gCe=n(n6,"CODE",{});var UBt=s(gCe);cVr=r(UBt,"model_type"),UBt.forEach(t),fVr=r(n6,` property of the config object (either
passed as an argument or loaded from `),hCe=n(n6,"CODE",{});var JBt=s(hCe);mVr=r(JBt,"pretrained_model_name_or_path"),JBt.forEach(t),gVr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pCe=n(n6,"CODE",{});var YBt=s(pCe);hVr=r(YBt,"pretrained_model_name_or_path"),YBt.forEach(t),pVr=r(n6,":"),n6.forEach(t),uVr=i(ii),Se=n(ii,"UL",{});var De=s(Se);Q5=n(De,"LI",{});var wDe=s(Q5);uCe=n(wDe,"STRONG",{});var KBt=s(uCe);_Vr=r(KBt,"albert"),KBt.forEach(t),bVr=r(wDe," \u2014 "),eee=n(wDe,"A",{href:!0});var ZBt=s(eee);vVr=r(ZBt,"FlaxAlbertForSequenceClassification"),ZBt.forEach(t),FVr=r(wDe," (ALBERT model)"),wDe.forEach(t),TVr=i(De),H5=n(De,"LI",{});var ADe=s(H5);_Ce=n(ADe,"STRONG",{});var eIt=s(_Ce);MVr=r(eIt,"bart"),eIt.forEach(t),EVr=r(ADe," \u2014 "),oee=n(ADe,"A",{href:!0});var oIt=s(oee);CVr=r(oIt,"FlaxBartForSequenceClassification"),oIt.forEach(t),wVr=r(ADe," (BART model)"),ADe.forEach(t),AVr=i(De),U5=n(De,"LI",{});var LDe=s(U5);bCe=n(LDe,"STRONG",{});var rIt=s(bCe);LVr=r(rIt,"bert"),rIt.forEach(t),yVr=r(LDe," \u2014 "),ree=n(LDe,"A",{href:!0});var tIt=s(ree);xVr=r(tIt,"FlaxBertForSequenceClassification"),tIt.forEach(t),$Vr=r(LDe," (BERT model)"),LDe.forEach(t),kVr=i(De),J5=n(De,"LI",{});var yDe=s(J5);vCe=n(yDe,"STRONG",{});var aIt=s(vCe);SVr=r(aIt,"big_bird"),aIt.forEach(t),RVr=r(yDe," \u2014 "),tee=n(yDe,"A",{href:!0});var nIt=s(tee);PVr=r(nIt,"FlaxBigBirdForSequenceClassification"),nIt.forEach(t),BVr=r(yDe," (BigBird model)"),yDe.forEach(t),IVr=i(De),Y5=n(De,"LI",{});var xDe=s(Y5);FCe=n(xDe,"STRONG",{});var sIt=s(FCe);NVr=r(sIt,"distilbert"),sIt.forEach(t),qVr=r(xDe," \u2014 "),aee=n(xDe,"A",{href:!0});var lIt=s(aee);jVr=r(lIt,"FlaxDistilBertForSequenceClassification"),lIt.forEach(t),DVr=r(xDe," (DistilBERT model)"),xDe.forEach(t),GVr=i(De),K5=n(De,"LI",{});var $De=s(K5);TCe=n($De,"STRONG",{});var iIt=s(TCe);OVr=r(iIt,"electra"),iIt.forEach(t),VVr=r($De," \u2014 "),nee=n($De,"A",{href:!0});var dIt=s(nee);XVr=r(dIt,"FlaxElectraForSequenceClassification"),dIt.forEach(t),zVr=r($De," (ELECTRA model)"),$De.forEach(t),WVr=i(De),Z5=n(De,"LI",{});var kDe=s(Z5);MCe=n(kDe,"STRONG",{});var cIt=s(MCe);QVr=r(cIt,"mbart"),cIt.forEach(t),HVr=r(kDe," \u2014 "),see=n(kDe,"A",{href:!0});var fIt=s(see);UVr=r(fIt,"FlaxMBartForSequenceClassification"),fIt.forEach(t),JVr=r(kDe," (mBART model)"),kDe.forEach(t),YVr=i(De),e3=n(De,"LI",{});var SDe=s(e3);ECe=n(SDe,"STRONG",{});var mIt=s(ECe);KVr=r(mIt,"roberta"),mIt.forEach(t),ZVr=r(SDe," \u2014 "),lee=n(SDe,"A",{href:!0});var gIt=s(lee);eXr=r(gIt,"FlaxRobertaForSequenceClassification"),gIt.forEach(t),oXr=r(SDe," (RoBERTa model)"),SDe.forEach(t),rXr=i(De),o3=n(De,"LI",{});var RDe=s(o3);CCe=n(RDe,"STRONG",{});var hIt=s(CCe);tXr=r(hIt,"roformer"),hIt.forEach(t),aXr=r(RDe," \u2014 "),iee=n(RDe,"A",{href:!0});var pIt=s(iee);nXr=r(pIt,"FlaxRoFormerForSequenceClassification"),pIt.forEach(t),sXr=r(RDe," (RoFormer model)"),RDe.forEach(t),lXr=i(De),r3=n(De,"LI",{});var PDe=s(r3);wCe=n(PDe,"STRONG",{});var uIt=s(wCe);iXr=r(uIt,"xlm-roberta"),uIt.forEach(t),dXr=r(PDe," \u2014 "),dee=n(PDe,"A",{href:!0});var _It=s(dee);cXr=r(_It,"FlaxXLMRobertaForSequenceClassification"),_It.forEach(t),fXr=r(PDe," (XLM-RoBERTa model)"),PDe.forEach(t),De.forEach(t),mXr=i(ii),T(t3.$$.fragment,ii),ii.forEach(t),li.forEach(t),aVe=i(f),sf=n(f,"H2",{class:!0});var gze=s(sf);a3=n(gze,"A",{id:!0,class:!0,href:!0});var bIt=s(a3);ACe=n(bIt,"SPAN",{});var vIt=s(ACe);T(o$.$$.fragment,vIt),vIt.forEach(t),bIt.forEach(t),gXr=i(gze),LCe=n(gze,"SPAN",{});var FIt=s(LCe);hXr=r(FIt,"FlaxAutoModelForQuestionAnswering"),FIt.forEach(t),gze.forEach(t),nVe=i(f),vr=n(f,"DIV",{class:!0});var di=s(vr);T(r$.$$.fragment,di),pXr=i(di),lf=n(di,"P",{});var Dre=s(lf);uXr=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cee=n(Dre,"A",{href:!0});var TIt=s(cee);_Xr=r(TIt,"from_pretrained()"),TIt.forEach(t),bXr=r(Dre," class method or the "),fee=n(Dre,"A",{href:!0});var MIt=s(fee);vXr=r(MIt,"from_config()"),MIt.forEach(t),FXr=r(Dre,` class
method.`),Dre.forEach(t),TXr=i(di),t$=n(di,"P",{});var hze=s(t$);MXr=r(hze,"This class cannot be instantiated directly using "),yCe=n(hze,"CODE",{});var EIt=s(yCe);EXr=r(EIt,"__init__()"),EIt.forEach(t),CXr=r(hze," (throws an error)."),hze.forEach(t),wXr=i(di),Jt=n(di,"DIV",{class:!0});var s6=s(Jt);T(a$.$$.fragment,s6),AXr=i(s6),xCe=n(s6,"P",{});var CIt=s(xCe);LXr=r(CIt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),CIt.forEach(t),yXr=i(s6),df=n(s6,"P",{});var Gre=s(df);xXr=r(Gre,`Note:
Loading a model from its configuration file does `),$Ce=n(Gre,"STRONG",{});var wIt=s($Ce);$Xr=r(wIt,"not"),wIt.forEach(t),kXr=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=n(Gre,"A",{href:!0});var AIt=s(mee);SXr=r(AIt,"from_pretrained()"),AIt.forEach(t),RXr=r(Gre," to load the model weights."),Gre.forEach(t),PXr=i(s6),T(n3.$$.fragment,s6),s6.forEach(t),BXr=i(di),Qr=n(di,"DIV",{class:!0});var ci=s(Qr);T(n$.$$.fragment,ci),IXr=i(ci),kCe=n(ci,"P",{});var LIt=s(kCe);NXr=r(LIt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),LIt.forEach(t),qXr=i(ci),wn=n(ci,"P",{});var l6=s(wn);jXr=r(l6,"The model class to instantiate is selected based on the "),SCe=n(l6,"CODE",{});var yIt=s(SCe);DXr=r(yIt,"model_type"),yIt.forEach(t),GXr=r(l6,` property of the config object (either
passed as an argument or loaded from `),RCe=n(l6,"CODE",{});var xIt=s(RCe);OXr=r(xIt,"pretrained_model_name_or_path"),xIt.forEach(t),VXr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=n(l6,"CODE",{});var $It=s(PCe);XXr=r($It,"pretrained_model_name_or_path"),$It.forEach(t),zXr=r(l6,":"),l6.forEach(t),WXr=i(ci),Re=n(ci,"UL",{});var Ge=s(Re);s3=n(Ge,"LI",{});var BDe=s(s3);BCe=n(BDe,"STRONG",{});var kIt=s(BCe);QXr=r(kIt,"albert"),kIt.forEach(t),HXr=r(BDe," \u2014 "),gee=n(BDe,"A",{href:!0});var SIt=s(gee);UXr=r(SIt,"FlaxAlbertForQuestionAnswering"),SIt.forEach(t),JXr=r(BDe," (ALBERT model)"),BDe.forEach(t),YXr=i(Ge),l3=n(Ge,"LI",{});var IDe=s(l3);ICe=n(IDe,"STRONG",{});var RIt=s(ICe);KXr=r(RIt,"bart"),RIt.forEach(t),ZXr=r(IDe," \u2014 "),hee=n(IDe,"A",{href:!0});var PIt=s(hee);ezr=r(PIt,"FlaxBartForQuestionAnswering"),PIt.forEach(t),ozr=r(IDe," (BART model)"),IDe.forEach(t),rzr=i(Ge),i3=n(Ge,"LI",{});var NDe=s(i3);NCe=n(NDe,"STRONG",{});var BIt=s(NCe);tzr=r(BIt,"bert"),BIt.forEach(t),azr=r(NDe," \u2014 "),pee=n(NDe,"A",{href:!0});var IIt=s(pee);nzr=r(IIt,"FlaxBertForQuestionAnswering"),IIt.forEach(t),szr=r(NDe," (BERT model)"),NDe.forEach(t),lzr=i(Ge),d3=n(Ge,"LI",{});var qDe=s(d3);qCe=n(qDe,"STRONG",{});var NIt=s(qCe);izr=r(NIt,"big_bird"),NIt.forEach(t),dzr=r(qDe," \u2014 "),uee=n(qDe,"A",{href:!0});var qIt=s(uee);czr=r(qIt,"FlaxBigBirdForQuestionAnswering"),qIt.forEach(t),fzr=r(qDe," (BigBird model)"),qDe.forEach(t),mzr=i(Ge),c3=n(Ge,"LI",{});var jDe=s(c3);jCe=n(jDe,"STRONG",{});var jIt=s(jCe);gzr=r(jIt,"distilbert"),jIt.forEach(t),hzr=r(jDe," \u2014 "),_ee=n(jDe,"A",{href:!0});var DIt=s(_ee);pzr=r(DIt,"FlaxDistilBertForQuestionAnswering"),DIt.forEach(t),uzr=r(jDe," (DistilBERT model)"),jDe.forEach(t),_zr=i(Ge),f3=n(Ge,"LI",{});var DDe=s(f3);DCe=n(DDe,"STRONG",{});var GIt=s(DCe);bzr=r(GIt,"electra"),GIt.forEach(t),vzr=r(DDe," \u2014 "),bee=n(DDe,"A",{href:!0});var OIt=s(bee);Fzr=r(OIt,"FlaxElectraForQuestionAnswering"),OIt.forEach(t),Tzr=r(DDe," (ELECTRA model)"),DDe.forEach(t),Mzr=i(Ge),m3=n(Ge,"LI",{});var GDe=s(m3);GCe=n(GDe,"STRONG",{});var VIt=s(GCe);Ezr=r(VIt,"mbart"),VIt.forEach(t),Czr=r(GDe," \u2014 "),vee=n(GDe,"A",{href:!0});var XIt=s(vee);wzr=r(XIt,"FlaxMBartForQuestionAnswering"),XIt.forEach(t),Azr=r(GDe," (mBART model)"),GDe.forEach(t),Lzr=i(Ge),g3=n(Ge,"LI",{});var ODe=s(g3);OCe=n(ODe,"STRONG",{});var zIt=s(OCe);yzr=r(zIt,"roberta"),zIt.forEach(t),xzr=r(ODe," \u2014 "),Fee=n(ODe,"A",{href:!0});var WIt=s(Fee);$zr=r(WIt,"FlaxRobertaForQuestionAnswering"),WIt.forEach(t),kzr=r(ODe," (RoBERTa model)"),ODe.forEach(t),Szr=i(Ge),h3=n(Ge,"LI",{});var VDe=s(h3);VCe=n(VDe,"STRONG",{});var QIt=s(VCe);Rzr=r(QIt,"roformer"),QIt.forEach(t),Pzr=r(VDe," \u2014 "),Tee=n(VDe,"A",{href:!0});var HIt=s(Tee);Bzr=r(HIt,"FlaxRoFormerForQuestionAnswering"),HIt.forEach(t),Izr=r(VDe," (RoFormer model)"),VDe.forEach(t),Nzr=i(Ge),p3=n(Ge,"LI",{});var XDe=s(p3);XCe=n(XDe,"STRONG",{});var UIt=s(XCe);qzr=r(UIt,"xlm-roberta"),UIt.forEach(t),jzr=r(XDe," \u2014 "),Mee=n(XDe,"A",{href:!0});var JIt=s(Mee);Dzr=r(JIt,"FlaxXLMRobertaForQuestionAnswering"),JIt.forEach(t),Gzr=r(XDe," (XLM-RoBERTa model)"),XDe.forEach(t),Ge.forEach(t),Ozr=i(ci),T(u3.$$.fragment,ci),ci.forEach(t),di.forEach(t),sVe=i(f),cf=n(f,"H2",{class:!0});var pze=s(cf);_3=n(pze,"A",{id:!0,class:!0,href:!0});var YIt=s(_3);zCe=n(YIt,"SPAN",{});var KIt=s(zCe);T(s$.$$.fragment,KIt),KIt.forEach(t),YIt.forEach(t),Vzr=i(pze),WCe=n(pze,"SPAN",{});var ZIt=s(WCe);Xzr=r(ZIt,"FlaxAutoModelForTokenClassification"),ZIt.forEach(t),pze.forEach(t),lVe=i(f),Fr=n(f,"DIV",{class:!0});var fi=s(Fr);T(l$.$$.fragment,fi),zzr=i(fi),ff=n(fi,"P",{});var Ore=s(ff);Wzr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Eee=n(Ore,"A",{href:!0});var eNt=s(Eee);Qzr=r(eNt,"from_pretrained()"),eNt.forEach(t),Hzr=r(Ore," class method or the "),Cee=n(Ore,"A",{href:!0});var oNt=s(Cee);Uzr=r(oNt,"from_config()"),oNt.forEach(t),Jzr=r(Ore,` class
method.`),Ore.forEach(t),Yzr=i(fi),i$=n(fi,"P",{});var uze=s(i$);Kzr=r(uze,"This class cannot be instantiated directly using "),QCe=n(uze,"CODE",{});var rNt=s(QCe);Zzr=r(rNt,"__init__()"),rNt.forEach(t),eWr=r(uze," (throws an error)."),uze.forEach(t),oWr=i(fi),Yt=n(fi,"DIV",{class:!0});var i6=s(Yt);T(d$.$$.fragment,i6),rWr=i(i6),HCe=n(i6,"P",{});var tNt=s(HCe);tWr=r(tNt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),tNt.forEach(t),aWr=i(i6),mf=n(i6,"P",{});var Vre=s(mf);nWr=r(Vre,`Note:
Loading a model from its configuration file does `),UCe=n(Vre,"STRONG",{});var aNt=s(UCe);sWr=r(aNt,"not"),aNt.forEach(t),lWr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),wee=n(Vre,"A",{href:!0});var nNt=s(wee);iWr=r(nNt,"from_pretrained()"),nNt.forEach(t),dWr=r(Vre," to load the model weights."),Vre.forEach(t),cWr=i(i6),T(b3.$$.fragment,i6),i6.forEach(t),fWr=i(fi),Hr=n(fi,"DIV",{class:!0});var mi=s(Hr);T(c$.$$.fragment,mi),mWr=i(mi),JCe=n(mi,"P",{});var sNt=s(JCe);gWr=r(sNt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sNt.forEach(t),hWr=i(mi),An=n(mi,"P",{});var d6=s(An);pWr=r(d6,"The model class to instantiate is selected based on the "),YCe=n(d6,"CODE",{});var lNt=s(YCe);uWr=r(lNt,"model_type"),lNt.forEach(t),_Wr=r(d6,` property of the config object (either
passed as an argument or loaded from `),KCe=n(d6,"CODE",{});var iNt=s(KCe);bWr=r(iNt,"pretrained_model_name_or_path"),iNt.forEach(t),vWr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=n(d6,"CODE",{});var dNt=s(ZCe);FWr=r(dNt,"pretrained_model_name_or_path"),dNt.forEach(t),TWr=r(d6,":"),d6.forEach(t),MWr=i(mi),Ve=n(mi,"UL",{});var To=s(Ve);v3=n(To,"LI",{});var zDe=s(v3);e5e=n(zDe,"STRONG",{});var cNt=s(e5e);EWr=r(cNt,"albert"),cNt.forEach(t),CWr=r(zDe," \u2014 "),Aee=n(zDe,"A",{href:!0});var fNt=s(Aee);wWr=r(fNt,"FlaxAlbertForTokenClassification"),fNt.forEach(t),AWr=r(zDe," (ALBERT model)"),zDe.forEach(t),LWr=i(To),F3=n(To,"LI",{});var WDe=s(F3);o5e=n(WDe,"STRONG",{});var mNt=s(o5e);yWr=r(mNt,"bert"),mNt.forEach(t),xWr=r(WDe," \u2014 "),Lee=n(WDe,"A",{href:!0});var gNt=s(Lee);$Wr=r(gNt,"FlaxBertForTokenClassification"),gNt.forEach(t),kWr=r(WDe," (BERT model)"),WDe.forEach(t),SWr=i(To),T3=n(To,"LI",{});var QDe=s(T3);r5e=n(QDe,"STRONG",{});var hNt=s(r5e);RWr=r(hNt,"big_bird"),hNt.forEach(t),PWr=r(QDe," \u2014 "),yee=n(QDe,"A",{href:!0});var pNt=s(yee);BWr=r(pNt,"FlaxBigBirdForTokenClassification"),pNt.forEach(t),IWr=r(QDe," (BigBird model)"),QDe.forEach(t),NWr=i(To),M3=n(To,"LI",{});var HDe=s(M3);t5e=n(HDe,"STRONG",{});var uNt=s(t5e);qWr=r(uNt,"distilbert"),uNt.forEach(t),jWr=r(HDe," \u2014 "),xee=n(HDe,"A",{href:!0});var _Nt=s(xee);DWr=r(_Nt,"FlaxDistilBertForTokenClassification"),_Nt.forEach(t),GWr=r(HDe," (DistilBERT model)"),HDe.forEach(t),OWr=i(To),E3=n(To,"LI",{});var UDe=s(E3);a5e=n(UDe,"STRONG",{});var bNt=s(a5e);VWr=r(bNt,"electra"),bNt.forEach(t),XWr=r(UDe," \u2014 "),$ee=n(UDe,"A",{href:!0});var vNt=s($ee);zWr=r(vNt,"FlaxElectraForTokenClassification"),vNt.forEach(t),WWr=r(UDe," (ELECTRA model)"),UDe.forEach(t),QWr=i(To),C3=n(To,"LI",{});var JDe=s(C3);n5e=n(JDe,"STRONG",{});var FNt=s(n5e);HWr=r(FNt,"roberta"),FNt.forEach(t),UWr=r(JDe," \u2014 "),kee=n(JDe,"A",{href:!0});var TNt=s(kee);JWr=r(TNt,"FlaxRobertaForTokenClassification"),TNt.forEach(t),YWr=r(JDe," (RoBERTa model)"),JDe.forEach(t),KWr=i(To),w3=n(To,"LI",{});var YDe=s(w3);s5e=n(YDe,"STRONG",{});var MNt=s(s5e);ZWr=r(MNt,"roformer"),MNt.forEach(t),eQr=r(YDe," \u2014 "),See=n(YDe,"A",{href:!0});var ENt=s(See);oQr=r(ENt,"FlaxRoFormerForTokenClassification"),ENt.forEach(t),rQr=r(YDe," (RoFormer model)"),YDe.forEach(t),tQr=i(To),A3=n(To,"LI",{});var KDe=s(A3);l5e=n(KDe,"STRONG",{});var CNt=s(l5e);aQr=r(CNt,"xlm-roberta"),CNt.forEach(t),nQr=r(KDe," \u2014 "),Ree=n(KDe,"A",{href:!0});var wNt=s(Ree);sQr=r(wNt,"FlaxXLMRobertaForTokenClassification"),wNt.forEach(t),lQr=r(KDe," (XLM-RoBERTa model)"),KDe.forEach(t),To.forEach(t),iQr=i(mi),T(L3.$$.fragment,mi),mi.forEach(t),fi.forEach(t),iVe=i(f),gf=n(f,"H2",{class:!0});var _ze=s(gf);y3=n(_ze,"A",{id:!0,class:!0,href:!0});var ANt=s(y3);i5e=n(ANt,"SPAN",{});var LNt=s(i5e);T(f$.$$.fragment,LNt),LNt.forEach(t),ANt.forEach(t),dQr=i(_ze),d5e=n(_ze,"SPAN",{});var yNt=s(d5e);cQr=r(yNt,"FlaxAutoModelForMultipleChoice"),yNt.forEach(t),_ze.forEach(t),dVe=i(f),Tr=n(f,"DIV",{class:!0});var gi=s(Tr);T(m$.$$.fragment,gi),fQr=i(gi),hf=n(gi,"P",{});var Xre=s(hf);mQr=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Pee=n(Xre,"A",{href:!0});var xNt=s(Pee);gQr=r(xNt,"from_pretrained()"),xNt.forEach(t),hQr=r(Xre," class method or the "),Bee=n(Xre,"A",{href:!0});var $Nt=s(Bee);pQr=r($Nt,"from_config()"),$Nt.forEach(t),uQr=r(Xre,` class
method.`),Xre.forEach(t),_Qr=i(gi),g$=n(gi,"P",{});var bze=s(g$);bQr=r(bze,"This class cannot be instantiated directly using "),c5e=n(bze,"CODE",{});var kNt=s(c5e);vQr=r(kNt,"__init__()"),kNt.forEach(t),FQr=r(bze," (throws an error)."),bze.forEach(t),TQr=i(gi),Kt=n(gi,"DIV",{class:!0});var c6=s(Kt);T(h$.$$.fragment,c6),MQr=i(c6),f5e=n(c6,"P",{});var SNt=s(f5e);EQr=r(SNt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),SNt.forEach(t),CQr=i(c6),pf=n(c6,"P",{});var zre=s(pf);wQr=r(zre,`Note:
Loading a model from its configuration file does `),m5e=n(zre,"STRONG",{});var RNt=s(m5e);AQr=r(RNt,"not"),RNt.forEach(t),LQr=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iee=n(zre,"A",{href:!0});var PNt=s(Iee);yQr=r(PNt,"from_pretrained()"),PNt.forEach(t),xQr=r(zre," to load the model weights."),zre.forEach(t),$Qr=i(c6),T(x3.$$.fragment,c6),c6.forEach(t),kQr=i(gi),Ur=n(gi,"DIV",{class:!0});var hi=s(Ur);T(p$.$$.fragment,hi),SQr=i(hi),g5e=n(hi,"P",{});var BNt=s(g5e);RQr=r(BNt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),BNt.forEach(t),PQr=i(hi),Ln=n(hi,"P",{});var f6=s(Ln);BQr=r(f6,"The model class to instantiate is selected based on the "),h5e=n(f6,"CODE",{});var INt=s(h5e);IQr=r(INt,"model_type"),INt.forEach(t),NQr=r(f6,` property of the config object (either
passed as an argument or loaded from `),p5e=n(f6,"CODE",{});var NNt=s(p5e);qQr=r(NNt,"pretrained_model_name_or_path"),NNt.forEach(t),jQr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=n(f6,"CODE",{});var qNt=s(u5e);DQr=r(qNt,"pretrained_model_name_or_path"),qNt.forEach(t),GQr=r(f6,":"),f6.forEach(t),OQr=i(hi),Xe=n(hi,"UL",{});var Mo=s(Xe);$3=n(Mo,"LI",{});var ZDe=s($3);_5e=n(ZDe,"STRONG",{});var jNt=s(_5e);VQr=r(jNt,"albert"),jNt.forEach(t),XQr=r(ZDe," \u2014 "),Nee=n(ZDe,"A",{href:!0});var DNt=s(Nee);zQr=r(DNt,"FlaxAlbertForMultipleChoice"),DNt.forEach(t),WQr=r(ZDe," (ALBERT model)"),ZDe.forEach(t),QQr=i(Mo),k3=n(Mo,"LI",{});var eGe=s(k3);b5e=n(eGe,"STRONG",{});var GNt=s(b5e);HQr=r(GNt,"bert"),GNt.forEach(t),UQr=r(eGe," \u2014 "),qee=n(eGe,"A",{href:!0});var ONt=s(qee);JQr=r(ONt,"FlaxBertForMultipleChoice"),ONt.forEach(t),YQr=r(eGe," (BERT model)"),eGe.forEach(t),KQr=i(Mo),S3=n(Mo,"LI",{});var oGe=s(S3);v5e=n(oGe,"STRONG",{});var VNt=s(v5e);ZQr=r(VNt,"big_bird"),VNt.forEach(t),eHr=r(oGe," \u2014 "),jee=n(oGe,"A",{href:!0});var XNt=s(jee);oHr=r(XNt,"FlaxBigBirdForMultipleChoice"),XNt.forEach(t),rHr=r(oGe," (BigBird model)"),oGe.forEach(t),tHr=i(Mo),R3=n(Mo,"LI",{});var rGe=s(R3);F5e=n(rGe,"STRONG",{});var zNt=s(F5e);aHr=r(zNt,"distilbert"),zNt.forEach(t),nHr=r(rGe," \u2014 "),Dee=n(rGe,"A",{href:!0});var WNt=s(Dee);sHr=r(WNt,"FlaxDistilBertForMultipleChoice"),WNt.forEach(t),lHr=r(rGe," (DistilBERT model)"),rGe.forEach(t),iHr=i(Mo),P3=n(Mo,"LI",{});var tGe=s(P3);T5e=n(tGe,"STRONG",{});var QNt=s(T5e);dHr=r(QNt,"electra"),QNt.forEach(t),cHr=r(tGe," \u2014 "),Gee=n(tGe,"A",{href:!0});var HNt=s(Gee);fHr=r(HNt,"FlaxElectraForMultipleChoice"),HNt.forEach(t),mHr=r(tGe," (ELECTRA model)"),tGe.forEach(t),gHr=i(Mo),B3=n(Mo,"LI",{});var aGe=s(B3);M5e=n(aGe,"STRONG",{});var UNt=s(M5e);hHr=r(UNt,"roberta"),UNt.forEach(t),pHr=r(aGe," \u2014 "),Oee=n(aGe,"A",{href:!0});var JNt=s(Oee);uHr=r(JNt,"FlaxRobertaForMultipleChoice"),JNt.forEach(t),_Hr=r(aGe," (RoBERTa model)"),aGe.forEach(t),bHr=i(Mo),I3=n(Mo,"LI",{});var nGe=s(I3);E5e=n(nGe,"STRONG",{});var YNt=s(E5e);vHr=r(YNt,"roformer"),YNt.forEach(t),FHr=r(nGe," \u2014 "),Vee=n(nGe,"A",{href:!0});var KNt=s(Vee);THr=r(KNt,"FlaxRoFormerForMultipleChoice"),KNt.forEach(t),MHr=r(nGe," (RoFormer model)"),nGe.forEach(t),EHr=i(Mo),N3=n(Mo,"LI",{});var sGe=s(N3);C5e=n(sGe,"STRONG",{});var ZNt=s(C5e);CHr=r(ZNt,"xlm-roberta"),ZNt.forEach(t),wHr=r(sGe," \u2014 "),Xee=n(sGe,"A",{href:!0});var eqt=s(Xee);AHr=r(eqt,"FlaxXLMRobertaForMultipleChoice"),eqt.forEach(t),LHr=r(sGe," (XLM-RoBERTa model)"),sGe.forEach(t),Mo.forEach(t),yHr=i(hi),T(q3.$$.fragment,hi),hi.forEach(t),gi.forEach(t),cVe=i(f),uf=n(f,"H2",{class:!0});var vze=s(uf);j3=n(vze,"A",{id:!0,class:!0,href:!0});var oqt=s(j3);w5e=n(oqt,"SPAN",{});var rqt=s(w5e);T(u$.$$.fragment,rqt),rqt.forEach(t),oqt.forEach(t),xHr=i(vze),A5e=n(vze,"SPAN",{});var tqt=s(A5e);$Hr=r(tqt,"FlaxAutoModelForNextSentencePrediction"),tqt.forEach(t),vze.forEach(t),fVe=i(f),Mr=n(f,"DIV",{class:!0});var pi=s(Mr);T(_$.$$.fragment,pi),kHr=i(pi),_f=n(pi,"P",{});var Wre=s(_f);SHr=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zee=n(Wre,"A",{href:!0});var aqt=s(zee);RHr=r(aqt,"from_pretrained()"),aqt.forEach(t),PHr=r(Wre," class method or the "),Wee=n(Wre,"A",{href:!0});var nqt=s(Wee);BHr=r(nqt,"from_config()"),nqt.forEach(t),IHr=r(Wre,` class
method.`),Wre.forEach(t),NHr=i(pi),b$=n(pi,"P",{});var Fze=s(b$);qHr=r(Fze,"This class cannot be instantiated directly using "),L5e=n(Fze,"CODE",{});var sqt=s(L5e);jHr=r(sqt,"__init__()"),sqt.forEach(t),DHr=r(Fze," (throws an error)."),Fze.forEach(t),GHr=i(pi),Zt=n(pi,"DIV",{class:!0});var m6=s(Zt);T(v$.$$.fragment,m6),OHr=i(m6),y5e=n(m6,"P",{});var lqt=s(y5e);VHr=r(lqt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lqt.forEach(t),XHr=i(m6),bf=n(m6,"P",{});var Qre=s(bf);zHr=r(Qre,`Note:
Loading a model from its configuration file does `),x5e=n(Qre,"STRONG",{});var iqt=s(x5e);WHr=r(iqt,"not"),iqt.forEach(t),QHr=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=n(Qre,"A",{href:!0});var dqt=s(Qee);HHr=r(dqt,"from_pretrained()"),dqt.forEach(t),UHr=r(Qre," to load the model weights."),Qre.forEach(t),JHr=i(m6),T(D3.$$.fragment,m6),m6.forEach(t),YHr=i(pi),Jr=n(pi,"DIV",{class:!0});var ui=s(Jr);T(F$.$$.fragment,ui),KHr=i(ui),$5e=n(ui,"P",{});var cqt=s($5e);ZHr=r(cqt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cqt.forEach(t),eUr=i(ui),yn=n(ui,"P",{});var g6=s(yn);oUr=r(g6,"The model class to instantiate is selected based on the "),k5e=n(g6,"CODE",{});var fqt=s(k5e);rUr=r(fqt,"model_type"),fqt.forEach(t),tUr=r(g6,` property of the config object (either
passed as an argument or loaded from `),S5e=n(g6,"CODE",{});var mqt=s(S5e);aUr=r(mqt,"pretrained_model_name_or_path"),mqt.forEach(t),nUr=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=n(g6,"CODE",{});var gqt=s(R5e);sUr=r(gqt,"pretrained_model_name_or_path"),gqt.forEach(t),lUr=r(g6,":"),g6.forEach(t),iUr=i(ui),P5e=n(ui,"UL",{});var hqt=s(P5e);G3=n(hqt,"LI",{});var lGe=s(G3);B5e=n(lGe,"STRONG",{});var pqt=s(B5e);dUr=r(pqt,"bert"),pqt.forEach(t),cUr=r(lGe," \u2014 "),Hee=n(lGe,"A",{href:!0});var uqt=s(Hee);fUr=r(uqt,"FlaxBertForNextSentencePrediction"),uqt.forEach(t),mUr=r(lGe," (BERT model)"),lGe.forEach(t),hqt.forEach(t),gUr=i(ui),T(O3.$$.fragment,ui),ui.forEach(t),pi.forEach(t),mVe=i(f),vf=n(f,"H2",{class:!0});var Tze=s(vf);V3=n(Tze,"A",{id:!0,class:!0,href:!0});var _qt=s(V3);I5e=n(_qt,"SPAN",{});var bqt=s(I5e);T(T$.$$.fragment,bqt),bqt.forEach(t),_qt.forEach(t),hUr=i(Tze),N5e=n(Tze,"SPAN",{});var vqt=s(N5e);pUr=r(vqt,"FlaxAutoModelForImageClassification"),vqt.forEach(t),Tze.forEach(t),gVe=i(f),Er=n(f,"DIV",{class:!0});var _i=s(Er);T(M$.$$.fragment,_i),uUr=i(_i),Ff=n(_i,"P",{});var Hre=s(Ff);_Ur=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Uee=n(Hre,"A",{href:!0});var Fqt=s(Uee);bUr=r(Fqt,"from_pretrained()"),Fqt.forEach(t),vUr=r(Hre," class method or the "),Jee=n(Hre,"A",{href:!0});var Tqt=s(Jee);FUr=r(Tqt,"from_config()"),Tqt.forEach(t),TUr=r(Hre,` class
method.`),Hre.forEach(t),MUr=i(_i),E$=n(_i,"P",{});var Mze=s(E$);EUr=r(Mze,"This class cannot be instantiated directly using "),q5e=n(Mze,"CODE",{});var Mqt=s(q5e);CUr=r(Mqt,"__init__()"),Mqt.forEach(t),wUr=r(Mze," (throws an error)."),Mze.forEach(t),AUr=i(_i),ea=n(_i,"DIV",{class:!0});var h6=s(ea);T(C$.$$.fragment,h6),LUr=i(h6),j5e=n(h6,"P",{});var Eqt=s(j5e);yUr=r(Eqt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Eqt.forEach(t),xUr=i(h6),Tf=n(h6,"P",{});var Ure=s(Tf);$Ur=r(Ure,`Note:
Loading a model from its configuration file does `),D5e=n(Ure,"STRONG",{});var Cqt=s(D5e);kUr=r(Cqt,"not"),Cqt.forEach(t),SUr=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=n(Ure,"A",{href:!0});var wqt=s(Yee);RUr=r(wqt,"from_pretrained()"),wqt.forEach(t),PUr=r(Ure," to load the model weights."),Ure.forEach(t),BUr=i(h6),T(X3.$$.fragment,h6),h6.forEach(t),IUr=i(_i),Yr=n(_i,"DIV",{class:!0});var bi=s(Yr);T(w$.$$.fragment,bi),NUr=i(bi),G5e=n(bi,"P",{});var Aqt=s(G5e);qUr=r(Aqt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Aqt.forEach(t),jUr=i(bi),xn=n(bi,"P",{});var p6=s(xn);DUr=r(p6,"The model class to instantiate is selected based on the "),O5e=n(p6,"CODE",{});var Lqt=s(O5e);GUr=r(Lqt,"model_type"),Lqt.forEach(t),OUr=r(p6,` property of the config object (either
passed as an argument or loaded from `),V5e=n(p6,"CODE",{});var yqt=s(V5e);VUr=r(yqt,"pretrained_model_name_or_path"),yqt.forEach(t),XUr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=n(p6,"CODE",{});var xqt=s(X5e);zUr=r(xqt,"pretrained_model_name_or_path"),xqt.forEach(t),WUr=r(p6,":"),p6.forEach(t),QUr=i(bi),A$=n(bi,"UL",{});var Eze=s(A$);z3=n(Eze,"LI",{});var iGe=s(z3);z5e=n(iGe,"STRONG",{});var $qt=s(z5e);HUr=r($qt,"beit"),$qt.forEach(t),UUr=r(iGe," \u2014 "),Kee=n(iGe,"A",{href:!0});var kqt=s(Kee);JUr=r(kqt,"FlaxBeitForImageClassification"),kqt.forEach(t),YUr=r(iGe," (BEiT model)"),iGe.forEach(t),KUr=i(Eze),W3=n(Eze,"LI",{});var dGe=s(W3);W5e=n(dGe,"STRONG",{});var Sqt=s(W5e);ZUr=r(Sqt,"vit"),Sqt.forEach(t),eJr=r(dGe," \u2014 "),Zee=n(dGe,"A",{href:!0});var Rqt=s(Zee);oJr=r(Rqt,"FlaxViTForImageClassification"),Rqt.forEach(t),rJr=r(dGe," (ViT model)"),dGe.forEach(t),Eze.forEach(t),tJr=i(bi),T(Q3.$$.fragment,bi),bi.forEach(t),_i.forEach(t),hVe=i(f),Mf=n(f,"H2",{class:!0});var Cze=s(Mf);H3=n(Cze,"A",{id:!0,class:!0,href:!0});var Pqt=s(H3);Q5e=n(Pqt,"SPAN",{});var Bqt=s(Q5e);T(L$.$$.fragment,Bqt),Bqt.forEach(t),Pqt.forEach(t),aJr=i(Cze),H5e=n(Cze,"SPAN",{});var Iqt=s(H5e);nJr=r(Iqt,"FlaxAutoModelForVision2Seq"),Iqt.forEach(t),Cze.forEach(t),pVe=i(f),Cr=n(f,"DIV",{class:!0});var vi=s(Cr);T(y$.$$.fragment,vi),sJr=i(vi),Ef=n(vi,"P",{});var Jre=s(Ef);lJr=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eoe=n(Jre,"A",{href:!0});var Nqt=s(eoe);iJr=r(Nqt,"from_pretrained()"),Nqt.forEach(t),dJr=r(Jre," class method or the "),ooe=n(Jre,"A",{href:!0});var qqt=s(ooe);cJr=r(qqt,"from_config()"),qqt.forEach(t),fJr=r(Jre,` class
method.`),Jre.forEach(t),mJr=i(vi),x$=n(vi,"P",{});var wze=s(x$);gJr=r(wze,"This class cannot be instantiated directly using "),U5e=n(wze,"CODE",{});var jqt=s(U5e);hJr=r(jqt,"__init__()"),jqt.forEach(t),pJr=r(wze," (throws an error)."),wze.forEach(t),uJr=i(vi),oa=n(vi,"DIV",{class:!0});var u6=s(oa);T($$.$$.fragment,u6),_Jr=i(u6),J5e=n(u6,"P",{});var Dqt=s(J5e);bJr=r(Dqt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Dqt.forEach(t),vJr=i(u6),Cf=n(u6,"P",{});var Yre=s(Cf);FJr=r(Yre,`Note:
Loading a model from its configuration file does `),Y5e=n(Yre,"STRONG",{});var Gqt=s(Y5e);TJr=r(Gqt,"not"),Gqt.forEach(t),MJr=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),roe=n(Yre,"A",{href:!0});var Oqt=s(roe);EJr=r(Oqt,"from_pretrained()"),Oqt.forEach(t),CJr=r(Yre," to load the model weights."),Yre.forEach(t),wJr=i(u6),T(U3.$$.fragment,u6),u6.forEach(t),AJr=i(vi),Kr=n(vi,"DIV",{class:!0});var Fi=s(Kr);T(k$.$$.fragment,Fi),LJr=i(Fi),K5e=n(Fi,"P",{});var Vqt=s(K5e);yJr=r(Vqt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Vqt.forEach(t),xJr=i(Fi),$n=n(Fi,"P",{});var _6=s($n);$Jr=r(_6,"The model class to instantiate is selected based on the "),Z5e=n(_6,"CODE",{});var Xqt=s(Z5e);kJr=r(Xqt,"model_type"),Xqt.forEach(t),SJr=r(_6,` property of the config object (either
passed as an argument or loaded from `),e3e=n(_6,"CODE",{});var zqt=s(e3e);RJr=r(zqt,"pretrained_model_name_or_path"),zqt.forEach(t),PJr=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o3e=n(_6,"CODE",{});var Wqt=s(o3e);BJr=r(Wqt,"pretrained_model_name_or_path"),Wqt.forEach(t),IJr=r(_6,":"),_6.forEach(t),NJr=i(Fi),r3e=n(Fi,"UL",{});var Qqt=s(r3e);J3=n(Qqt,"LI",{});var cGe=s(J3);t3e=n(cGe,"STRONG",{});var Hqt=s(t3e);qJr=r(Hqt,"vision-encoder-decoder"),Hqt.forEach(t),jJr=r(cGe," \u2014 "),toe=n(cGe,"A",{href:!0});var Uqt=s(toe);DJr=r(Uqt,"FlaxVisionEncoderDecoderModel"),Uqt.forEach(t),GJr=r(cGe," (Vision Encoder decoder model)"),cGe.forEach(t),Qqt.forEach(t),OJr=i(Fi),T(Y3.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(oGt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Sn,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.AutoConfig"),c(Pn,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.AutoModel"),c(Bn,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.AutoTokenizer"),c(Li,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertModel"),c(Sf,"id","extending-the-auto-classes"),c(Sf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sf,"href","#extending-the-auto-classes"),c(yi,"class","relative group"),c(Pf,"id","transformers.AutoConfig"),c(Pf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pf,"href","#transformers.AutoConfig"),c(xi,"class","relative group"),c(oS,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(rS,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig"),c(tS,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig"),c(aS,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitConfig"),c(nS,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig"),c(sS,"href","/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(lS,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig"),c(iS,"href","/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(dS,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(cS,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(fS,"href","/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomConfig"),c(mS,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig"),c(gS,"href","/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineConfig"),c(hS,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPConfig"),c(pS,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig"),c(uS,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextConfig"),c(_S,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig"),c(bS,"href","/docs/transformers/pr_17109/en/model_doc/cvt#transformers.CvtConfig"),c(vS,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(FS,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(TS,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(MS,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig"),c(ES,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(CS,"href","/docs/transformers/pr_17109/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(wS,"href","/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTConfig"),c(AS,"href","/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrConfig"),c(LS,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig"),c(yS,"href","/docs/transformers/pr_17109/en/model_doc/dpr#transformers.DPRConfig"),c(xS,"href","/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTConfig"),c($S,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig"),c(kS,"href","/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(SS,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig"),c(RS,"href","/docs/transformers/pr_17109/en/model_doc/flava#transformers.FlavaConfig"),c(PS,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig"),c(BS,"href","/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTConfig"),c(IS,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig"),c(NS,"href","/docs/transformers/pr_17109/en/model_doc/glpn#transformers.GLPNConfig"),c(qS,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config"),c(jS,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(DS,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(GS,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig"),c(OS,"href","/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertConfig"),c(VS,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig"),c(XS,"href","/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(zS,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(WS,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(QS,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(HS,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDConfig"),c(US,"href","/docs/transformers/pr_17109/en/model_doc/levit#transformers.LevitConfig"),c(JS,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig"),c(YS,"href","/docs/transformers/pr_17109/en/model_doc/longt5#transformers.LongT5Config"),c(KS,"href","/docs/transformers/pr_17109/en/model_doc/luke#transformers.LukeConfig"),c(ZS,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertConfig"),c(eR,"href","/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100Config"),c(oR,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig"),c(rR,"href","/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(tR,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig"),c(aR,"href","/docs/transformers/pr_17109/en/model_doc/mctct#transformers.MCTCTConfig"),c(nR,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(sR,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(lR,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig"),c(iR,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config"),c(dR,"href","/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(cR,"href","/docs/transformers/pr_17109/en/model_doc/ofa#transformers.OFAConfig"),c(fR,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(mR,"href","/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTConfig"),c(gR,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig"),c(hR,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverConfig"),c(pR,"href","/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartConfig"),c(uR,"href","/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(_R,"href","/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(bR,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(vR,"href","/docs/transformers/pr_17109/en/model_doc/rag#transformers.RagConfig"),c(FR,"href","/docs/transformers/pr_17109/en/model_doc/realm#transformers.RealmConfig"),c(TR,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerConfig"),c(MR,"href","/docs/transformers/pr_17109/en/model_doc/regnet#transformers.RegNetConfig"),c(ER,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig"),c(CR,"href","/docs/transformers/pr_17109/en/model_doc/resnet#transformers.ResNetConfig"),c(wR,"href","/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertConfig"),c(AR,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig"),c(LR,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig"),c(yR,"href","/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerConfig"),c(xR,"href","/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWConfig"),c($R,"href","/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDConfig"),c(kR,"href","/docs/transformers/pr_17109/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(SR,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(RR,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(PR,"href","/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterConfig"),c(BR,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(IR,"href","/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinConfig"),c(NR,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config"),c(qR,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig"),c(jR,"href","/docs/transformers/pr_17109/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(DR,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(GR,"href","/docs/transformers/pr_17109/en/model_doc/trocr#transformers.TrOCRConfig"),c(OR,"href","/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(VR,"href","/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(XR,"href","/docs/transformers/pr_17109/en/model_doc/van#transformers.VanConfig"),c(zR,"href","/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltConfig"),c(WR,"href","/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(QR,"href","/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(HR,"href","/docs/transformers/pr_17109/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(UR,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig"),c(JR,"href","/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(YR,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(KR,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(ZR,"href","/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMConfig"),c(eP,"href","/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMConfig"),c(oP,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig"),c(rP,"href","/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(tP,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(aP,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(nP,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig"),c(sP,"href","/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosConfig"),c(lP,"href","/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Og,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vg,"id","transformers.AutoTokenizer"),c(Vg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vg,"href","#transformers.AutoTokenizer"),c(ki,"class","relative group"),c(iP,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(dP,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertTokenizer"),c(cP,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(fP,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartTokenizer"),c(mP,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartTokenizerFast"),c(gP,"href","/docs/transformers/pr_17109/en/model_doc/barthez#transformers.BarthezTokenizer"),c(hP,"href","/docs/transformers/pr_17109/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(pP,"href","/docs/transformers/pr_17109/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(uP,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizer"),c(_P,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizerFast"),c(bP,"href","/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(vP,"href","/docs/transformers/pr_17109/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(FP,"href","/docs/transformers/pr_17109/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(TP,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(MP,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(EP,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(CP,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(wP,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(AP,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(LP,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(yP,"href","/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(xP,"href","/docs/transformers/pr_17109/en/model_doc/byt5#transformers.ByT5Tokenizer"),c($P,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertTokenizer"),c(kP,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(SP,"href","/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineTokenizer"),c(RP,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPTokenizer"),c(PP,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(BP,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(IP,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(NP,"href","/docs/transformers/pr_17109/en/model_doc/cpm#transformers.CpmTokenizer"),c(qP,"href","/docs/transformers/pr_17109/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(jP,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(DP,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizer"),c(GP,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(OP,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaTokenizer"),c(VP,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(XP,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(zP,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(WP,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(QP,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(HP,"href","/docs/transformers/pr_17109/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(UP,"href","/docs/transformers/pr_17109/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(JP,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraTokenizer"),c(YP,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(KP,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(ZP,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetTokenizer"),c(eB,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(oB,"href","/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(rB,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelTokenizer"),c(tB,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(aB,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nB,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(sB,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lB,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(iB,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(dB,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(cB,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(fB,"href","/docs/transformers/pr_17109/en/model_doc/herbert#transformers.HerbertTokenizer"),c(mB,"href","/docs/transformers/pr_17109/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(gB,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(hB,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pB,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uB,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(_B,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(bB,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(vB,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(FB,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(TB,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(MB,"href","/docs/transformers/pr_17109/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(EB,"href","/docs/transformers/pr_17109/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(CB,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDTokenizer"),c(wB,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDTokenizerFast"),c(AB,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerTokenizer"),c(LB,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(yB,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Tokenizer"),c(xB,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5TokenizerFast"),c($B,"href","/docs/transformers/pr_17109/en/model_doc/luke#transformers.LukeTokenizer"),c(kB,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(SB,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(RB,"href","/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(PB,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianTokenizer"),c(BB,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartTokenizer"),c(IB,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(NB,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(qB,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(jB,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizer"),c(DB,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizerFast"),c(GB,"href","/docs/transformers/pr_17109/en/model_doc/mluke#transformers.MLukeTokenizer"),c(OB,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(VB,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(XB,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(zB,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(WB,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Tokenizer"),c(QB,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5TokenizerFast"),c(HB,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertTokenizer"),c(UB,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(JB,"href","/docs/transformers/pr_17109/en/model_doc/ofa#transformers.OFATokenizer"),c(YB,"href","/docs/transformers/pr_17109/en/model_doc/ofa#transformers.OFATokenizerFast"),c(KB,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(ZB,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(eI,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(oI,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(rI,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(tI,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(aI,"href","/docs/transformers/pr_17109/en/model_doc/phobert#transformers.PhobertTokenizer"),c(nI,"href","/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartTokenizer"),c(sI,"href","/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(lI,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizer"),c(iI,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizerFast"),c(dI,"href","/docs/transformers/pr_17109/en/model_doc/rag#transformers.RagTokenizer"),c(cI,"href","/docs/transformers/pr_17109/en/model_doc/realm#transformers.RealmTokenizer"),c(fI,"href","/docs/transformers/pr_17109/en/model_doc/realm#transformers.RealmTokenizerFast"),c(mI,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerTokenizer"),c(gI,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(hI,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertTokenizer"),c(pI,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(uI,"href","/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(_I,"href","/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(bI,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizer"),c(vI,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(FI,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(TI,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(MI,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(EI,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(CI,"href","/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterTokenizer"),c(wI,"href","/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(AI,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(LI,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(yI,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Tokenizer"),c(xI,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5TokenizerFast"),c($I,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasTokenizer"),c(kI,"href","/docs/transformers/pr_17109/en/model_doc/tapex#transformers.TapexTokenizer"),c(SI,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(RI,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizer"),c(PI,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizerFast"),c(BI,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizer"),c(II,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizerFast"),c(NI,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(qI,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(jI,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(DI,"href","/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMTokenizer"),c(GI,"href","/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(OI,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMTokenizer"),c(VI,"href","/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(XI,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(zI,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(WI,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizer"),c(QI,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(HI,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(UI,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(JI,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertTokenizer"),c(YI,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"id","transformers.AutoFeatureExtractor"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoFeatureExtractor"),c(Si,"class","relative group"),c(KI,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(ZI,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(eN,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(oN,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(rN,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tN,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(aN,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(nN,"href","/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(sN,"href","/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(lN,"href","/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(iN,"href","/docs/transformers/pr_17109/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(dN,"href","/docs/transformers/pr_17109/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(cN,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(fN,"href","/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(mN,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(gN,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(hN,"href","/docs/transformers/pr_17109/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(pN,"href","/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(uN,"href","/docs/transformers/pr_17109/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(_N,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(bN,"href","/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(vN,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(FN,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TN,"href","/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(MN,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(EN,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(CN,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wN,"href","/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(AN,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(LN,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yN,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xN,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($N,"href","/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lp,"id","transformers.AutoProcessor"),c(lp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lp,"href","#transformers.AutoProcessor"),c(Ri,"class","relative group"),c(kN,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(SN,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPProcessor"),c(RN,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(PN,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(BN,"href","/docs/transformers/pr_17109/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(IN,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(NN,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qN,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(jN,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(DN,"href","/docs/transformers/pr_17109/en/model_doc/trocr#transformers.TrOCRProcessor"),c(GN,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ON,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VN,"href","/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltProcessor"),c(XN,"href","/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(zN,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(WN,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QN,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yp,"id","transformers.AutoModel"),c(yp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yp,"href","#transformers.AutoModel"),c(Bi,"class","relative group"),c(HN,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UN,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JN,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YN,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertModel"),c(KN,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartModel"),c(ZN,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitModel"),c(eq,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertModel"),c(oq,"href","/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(rq,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdModel"),c(tq,"href","/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(aq,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(nq,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(sq,"href","/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomModel"),c(lq,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertModel"),c(iq,"href","/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineModel"),c(dq,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPModel"),c(cq,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertModel"),c(fq,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextModel"),c(mq,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLModel"),c(gq,"href","/docs/transformers/pr_17109/en/model_doc/cvt#transformers.CvtModel"),c(hq,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(pq,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(uq,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(_q,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaModel"),c(bq,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(vq,"href","/docs/transformers/pr_17109/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Fq,"href","/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTModel"),c(Tq,"href","/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrModel"),c(Mq,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertModel"),c(Eq,"href","/docs/transformers/pr_17109/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Cq,"href","/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTModel"),c(wq,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraModel"),c(Aq,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertModel"),c(Lq,"href","/docs/transformers/pr_17109/en/model_doc/flava#transformers.FlavaModel"),c(yq,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetModel"),c(xq,"href","/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTModel"),c($q,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelModel"),c(kq,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Sq,"href","/docs/transformers/pr_17109/en/model_doc/glpn#transformers.GLPNModel"),c(Rq,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Model"),c(Pq,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Bq,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Iq,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJModel"),c(Nq,"href","/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertModel"),c(qq,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertModel"),c(jq,"href","/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Dq,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Gq,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Oq,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Vq,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDModel"),c(Xq,"href","/docs/transformers/pr_17109/en/model_doc/levit#transformers.LevitModel"),c(zq,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerModel"),c(Wq,"href","/docs/transformers/pr_17109/en/model_doc/longt5#transformers.LongT5Model"),c(Qq,"href","/docs/transformers/pr_17109/en/model_doc/luke#transformers.LukeModel"),c(Hq,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertModel"),c(Uq,"href","/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100Model"),c(Jq,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianModel"),c(Yq,"href","/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Kq,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartModel"),c(Zq,"href","/docs/transformers/pr_17109/en/model_doc/mctct#transformers.MCTCTModel"),c(ej,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(oj,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertModel"),c(rj,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetModel"),c(tj,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Model"),c(aj,"href","/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerModel"),c(nj,"href","/docs/transformers/pr_17109/en/model_doc/ofa#transformers.OFAModel"),c(sj,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(lj,"href","/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTModel"),c(ij,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusModel"),c(dj,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverModel"),c(cj,"href","/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartModel"),c(fj,"href","/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerModel"),c(mj,"href","/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(gj,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertModel"),c(hj,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerModel"),c(pj,"href","/docs/transformers/pr_17109/en/model_doc/regnet#transformers.RegNetModel"),c(uj,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertModel"),c(_j,"href","/docs/transformers/pr_17109/en/model_doc/resnet#transformers.ResNetModel"),c(bj,"href","/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertModel"),c(vj,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaModel"),c(Fj,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerModel"),c(Tj,"href","/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerModel"),c(Mj,"href","/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWModel"),c(Ej,"href","/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDModel"),c(Cj,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(wj,"href","/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterModel"),c(Aj,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Lj,"href","/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinModel"),c(yj,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Model"),c(xj,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasModel"),c($j,"href","/docs/transformers/pr_17109/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(kj,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Sj,"href","/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Rj,"href","/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Pj,"href","/docs/transformers/pr_17109/en/model_doc/van#transformers.VanModel"),c(Bj,"href","/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltModel"),c(Ij,"href","/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Nj,"href","/docs/transformers/pr_17109/en/model_doc/visual_bert#transformers.VisualBertModel"),c(qj,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTModel"),c(jj,"href","/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Dj,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Gj,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Oj,"href","/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMModel"),c(Vj,"href","/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMModel"),c(Xj,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMModel"),c(zj,"href","/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Wj,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Qj,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Hj,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetModel"),c(Uj,"href","/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosModel"),c(Jj,"href","/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($_,"id","transformers.AutoModelForPreTraining"),c($_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($_,"href","#transformers.AutoModelForPreTraining"),c(qi,"class","relative group"),c(Yj,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kj,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zj,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eD,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForPreTraining"),c(oD,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForPreTraining"),c(tD,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(aD,"href","/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomForCausalLM"),c(nD,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(sD,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(lD,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(iD,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(dD,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(cD,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(fD,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForPreTraining"),c(mD,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(gD,"href","/docs/transformers/pr_17109/en/model_doc/flava#transformers.FlavaForPreTraining"),c(hD,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForPreTraining"),c(pD,"href","/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(uD,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(_D,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(bD,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(vD,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(FD,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(TD,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(MD,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(ED,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(CD,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(wD,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(AD,"href","/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertModel"),c(LD,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(yD,"href","/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(xD,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c($D,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(kD,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(SD,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(RD,"href","/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(PD,"href","/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(BD,"href","/docs/transformers/pr_17109/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(ID,"href","/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(ND,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(qD,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(jD,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(DD,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(GD,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(OD,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E1,"id","transformers.AutoModelForCausalLM"),c(E1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E1,"href","#transformers.AutoModelForCausalLM"),c(Gi,"class","relative group"),c(VD,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XD,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zD,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WD,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForCausalLM"),c(QD,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertLMHeadModel"),c(HD,"href","/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(UD,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(JD,"href","/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(YD,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(KD,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(ZD,"href","/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomForCausalLM"),c(eG,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(oG,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(rG,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(tG,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForCausalLM"),c(aG,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(nG,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(sG,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(lG,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(iG,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianForCausalLM"),c(dG,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForCausalLM"),c(cG,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(fG,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(mG,"href","/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTForCausalLM"),c(gG,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(hG,"href","/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(pG,"href","/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(uG,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(_G,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(bG,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(vG,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(FG,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(TG,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(MG,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(EG,"href","/docs/transformers/pr_17109/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(CG,"href","/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(wG,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(AG,"href","/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(LG,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(yG,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(xG,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f2,"id","transformers.AutoModelForMaskedLM"),c(f2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f2,"href","#transformers.AutoModelForMaskedLM"),c(Xi,"class","relative group"),c($G,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kG,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SG,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RG,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(PG,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(BG,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForMaskedLM"),c(IG,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(NG,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(qG,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(jG,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(DG,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(GG,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(OG,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(VG,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(XG,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(zG,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(WG,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(QG,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(HG,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(UG,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(JG,"href","/docs/transformers/pr_17109/en/model_doc/luke#transformers.LukeForMaskedLM"),c(YG,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(KG,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(ZG,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(eO,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(oO,"href","/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(rO,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(tO,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(aO,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(nO,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(sO,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(lO,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(iO,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(dO,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(cO,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(fO,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(mO,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(gO,"href","/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y2,"id","transformers.AutoModelForSeq2SeqLM"),c(Y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Qi,"class","relative group"),c(hO,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pO,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uO,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_O,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(bO,"href","/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(vO,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(FO,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(TO,"href","/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(MO,"href","/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(EO,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(CO,"href","/docs/transformers/pr_17109/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(wO,"href","/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(AO,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianMTModel"),c(LO,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(yO,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(xO,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c($O,"href","/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(kO,"href","/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(SO,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(RO,"href","/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bb,"id","transformers.AutoModelForSequenceClassification"),c(bb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bb,"href","#transformers.AutoModelForSequenceClassification"),c(Ji,"class","relative group"),c(PO,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BO,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IO,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NO,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(qO,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForSequenceClassification"),c(jO,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForSequenceClassification"),c(DO,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(GO,"href","/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(OO,"href","/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(VO,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(XO,"href","/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(zO,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(WO,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(QO,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(HO,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(UO,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(JO,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(YO,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(KO,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(eV,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(oV,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(rV,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(tV,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(aV,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDForSequenceClassification"),c(dV,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(yV,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(xV,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c($V,"href","/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uv,"id","transformers.AutoModelForMultipleChoice"),c(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uv,"href","#transformers.AutoModelForMultipleChoice"),c(Zi,"class","relative group"),c(kV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PV,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(BV,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForMultipleChoice"),c(IV,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(NV,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(qV,"href","/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(jV,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(DV,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(GV,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(OV,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(VV,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(XV,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(zV,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(WV,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(QV,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(HV,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(UV,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(JV,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(YV,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(KV,"href","/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(ZV,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(eX,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(oX,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(rX,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(tX,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(aX,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(nX,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(sX,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(lX,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(iX,"href","/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uv,"id","transformers.AutoModelForNextSentencePrediction"),c(Uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uv,"href","#transformers.AutoModelForNextSentencePrediction"),c(rd,"class","relative group"),c(dX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mX,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(gX,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(hX,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(pX,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(uX,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a0,"id","transformers.AutoModelForTokenClassification"),c(a0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a0,"href","#transformers.AutoModelForTokenClassification"),c(nd,"class","relative group"),c(_X,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FX,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(TX,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForTokenClassification"),c(MX,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(EX,"href","/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(CX,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(wX,"href","/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForTokenClassification"),c(AX,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(LX,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(yX,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(xX,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c($X,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(kX,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(SX,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(RX,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(PX,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(BX,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(IX,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(NX,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(qX,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(jX,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(DX,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(GX,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(OX,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(VX,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(XX,"href","/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(zX,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(WX,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(QX,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(HX,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(UX,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(JX,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(YX,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(KX,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(ZX,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(ez,"href","/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V0,"id","transformers.AutoModelForQuestionAnswering"),c(V0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V0,"href","#transformers.AutoModelForQuestionAnswering"),c(id,"class","relative group"),c(oz,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rz,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tz,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(az,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(nz,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(sz,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(lz,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(iz,"href","/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(dz,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(cz,"href","/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(fz,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(mz,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(gz,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(hz,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(pz,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(uz,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(_z,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(bz,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(vz,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(Fz,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(Tz,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(Mz,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(Ez,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(Cz,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(wz,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(Az,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(Lz,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(yz,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(xz,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c($z,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(Sz,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(Rz,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(Pz,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(Bz,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(Iz,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(Nz,"href","/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(qz,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(jz,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(Dz,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(Gz,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(Oz,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(Vz,"href","/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RF,"id","transformers.AutoModelForTableQuestionAnswering"),c(RF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(fd,"class","relative group"),c(Xz,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zz,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wz,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qz,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qF,"id","transformers.AutoModelForImageClassification"),c(qF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qF,"href","#transformers.AutoModelForImageClassification"),c(hd,"class","relative group"),c(Hz,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uz,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jz,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yz,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitForImageClassification"),c(Kz,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(Zz,"href","/docs/transformers/pr_17109/en/model_doc/cvt#transformers.CvtForImageClassification"),c(eW,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(oW,"href","/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTForImageClassification"),c(rW,"href","/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(tW,"href","/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(aW,"href","/docs/transformers/pr_17109/en/model_doc/levit#transformers.LevitForImageClassification"),c(nW,"href","/docs/transformers/pr_17109/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(sW,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(lW,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(iW,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(dW,"href","/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(cW,"href","/docs/transformers/pr_17109/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(fW,"href","/docs/transformers/pr_17109/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(mW,"href","/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(gW,"href","/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinForImageClassification"),c(hW,"href","/docs/transformers/pr_17109/en/model_doc/van#transformers.VanForImageClassification"),c(pW,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.AutoModelForVision2Seq"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.AutoModelForVision2Seq"),c(_d,"class","relative group"),c(uW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vW,"href","/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Fd,"class","relative group"),c(FW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EW,"href","/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.AutoModelForAudioClassification"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.AutoModelForAudioClassification"),c(Ed,"class","relative group"),c(CW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LW,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(yW,"href","/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(xW,"href","/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWForSequenceClassification"),c($W,"href","/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(kW,"href","/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.AutoModelForAudioFrameClassification"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.AutoModelForAudioFrameClassification"),c(Ad,"class","relative group"),c(IW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jW,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(DW,"href","/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(GW,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(OW,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(VW,"href","/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.AutoModelForCTC"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.AutoModelForCTC"),c(xd,"class","relative group"),c(XW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QW,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(HW,"href","/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertForCTC"),c(UW,"href","/docs/transformers/pr_17109/en/model_doc/mctct#transformers.MCTCTForCTC"),c(JW,"href","/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWForCTC"),c(YW,"href","/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDForCTC"),c(KW,"href","/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(ZW,"href","/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(eQ,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(oQ,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(rQ,"href","/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Sd,"class","relative group"),c(tQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sQ,"href","/docs/transformers/pr_17109/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(lQ,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KT,"id","transformers.AutoModelForAudioXVector"),c(KT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KT,"href","#transformers.AutoModelForAudioXVector"),c(Bd,"class","relative group"),c(iQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fQ,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(mQ,"href","/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(gQ,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(hQ,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(pQ,"href","/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l7,"id","transformers.AutoModelForMaskedImageModeling"),c(l7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l7,"href","#transformers.AutoModelForMaskedImageModeling"),c(qd,"class","relative group"),c(uQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Q,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vQ,"href","/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(FQ,"href","/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(TQ,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h7,"id","transformers.AutoModelForObjectDetection"),c(h7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h7,"href","#transformers.AutoModelForObjectDetection"),c(Od,"class","relative group"),c(MQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wQ,"href","/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrForObjectDetection"),c(AQ,"href","/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F7,"id","transformers.AutoModelForImageSegmentation"),c(F7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F7,"href","#transformers.AutoModelForImageSegmentation"),c(zd,"class","relative group"),c(LQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Q,"href","/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w7,"id","transformers.AutoModelForSemanticSegmentation"),c(w7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w7,"href","#transformers.AutoModelForSemanticSegmentation"),c(Hd,"class","relative group"),c(kQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PQ,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(BQ,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(IQ,"href","/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(NQ,"href","/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R7,"id","transformers.AutoModelForInstanceSegmentation"),c(R7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R7,"href","#transformers.AutoModelForInstanceSegmentation"),c(Yd,"class","relative group"),c(qQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GQ,"href","/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q7,"id","transformers.TFAutoModel"),c(q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q7,"href","#transformers.TFAutoModel"),c(ec,"class","relative group"),c(OQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zQ,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertModel"),c(WQ,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.TFBartModel"),c(QQ,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertModel"),c(HQ,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(UQ,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(JQ,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertModel"),c(YQ,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.TFCLIPModel"),c(KQ,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertModel"),c(ZQ,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.TFConvNextModel"),c(eH,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLModel"),c(oH,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(rH,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaModel"),c(tH,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(aH,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(nH,"href","/docs/transformers/pr_17109/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(sH,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraModel"),c(lH,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(iH,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelModel"),c(dH,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(cH,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2Model"),c(fH,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJModel"),c(mH,"href","/docs/transformers/pr_17109/en/model_doc/hubert#transformers.TFHubertModel"),c(gH,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(hH,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.TFLEDModel"),c(pH,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerModel"),c(uH,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.TFLxmertModel"),c(_H,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.TFMarianModel"),c(bH,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.TFMBartModel"),c(vH,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(FH,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetModel"),c(TH,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.TFMT5Model"),c(MH,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(EH,"href","/docs/transformers/pr_17109/en/model_doc/opt#transformers.TFOPTModel"),c(CH,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.TFPegasusModel"),c(wH,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertModel"),c(AH,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaModel"),c(LH,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerModel"),c(yH,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(xH,"href","/docs/transformers/pr_17109/en/model_doc/swin#transformers.TFSwinModel"),c($H,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.TFT5Model"),c(kH,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasModel"),c(SH,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(RH,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.TFViTModel"),c(PH,"href","/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(BH,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(IH,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMModel"),c(NH,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(qH,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R9,"id","transformers.TFAutoModelForPreTraining"),c(R9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R9,"href","#transformers.TFAutoModelForPreTraining"),c(tc,"class","relative group"),c(jH,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DH,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GH,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OH,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(VH,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(XH,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForPreTraining"),c(zH,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(WH,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(QH,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(HH,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(UH,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(JH,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(YH,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(KH,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(ZH,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(eU,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(oU,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(rU,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(tU,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(aU,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(nU,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(sU,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(lU,"href","/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(iU,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(dU,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(cU,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nM,"id","transformers.TFAutoModelForCausalLM"),c(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nM,"href","#transformers.TFAutoModelForCausalLM"),c(sc,"class","relative group"),c(fU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hU,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(pU,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(uU,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(_U,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(bU,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(vU,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(FU,"href","/docs/transformers/pr_17109/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(TU,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(MU,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(EU,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(CU,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(wU,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(AU,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TM,"id","transformers.TFAutoModelForImageClassification"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.TFAutoModelForImageClassification"),c(dc,"class","relative group"),c(LU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($U,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(kU,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(SU,"href","/docs/transformers/pr_17109/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(RU,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yM,"id","transformers.TFAutoModelForMaskedLM"),c(yM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yM,"href","#transformers.TFAutoModelForMaskedLM"),c(mc,"class","relative group"),c(PU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NU,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(qU,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(jU,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(DU,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(GU,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(OU,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(VU,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(XU,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(zU,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(WU,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(QU,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(HU,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(UU,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(JU,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(YU,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(KU,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(ZU,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(eJ,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(oJ,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(rJ,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(pc,"class","relative group"),c(tJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(lJ,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(iJ,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(dJ,"href","/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(cJ,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(fJ,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.TFMarianMTModel"),c(mJ,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(gJ,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(hJ,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(pJ,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cE,"id","transformers.TFAutoModelForSequenceClassification"),c(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cE,"href","#transformers.TFAutoModelForSequenceClassification"),c(bc,"class","relative group"),c(uJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_J,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vJ,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(FJ,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(TJ,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(MJ,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(EJ,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(CJ,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(wJ,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(AJ,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(LJ,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(yJ,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(xJ,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c($J,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(kJ,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(SJ,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(RJ,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(PJ,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(BJ,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(IJ,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(NJ,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(qJ,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(jJ,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(DJ,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(GJ,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(OJ,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(VJ,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(XJ,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jE,"id","transformers.TFAutoModelForMultipleChoice"),c(jE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jE,"href","#transformers.TFAutoModelForMultipleChoice"),c(Tc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(UJ,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(JJ,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(YJ,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(KJ,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(ZJ,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(eY,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(oY,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(rY,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(tY,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(aY,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(nY,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(sY,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(lY,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(iY,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(dY,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(cY,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(n4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Cc,"class","relative group"),c(fY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hY,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(pY,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Lc,"class","relative group"),c(uY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Y,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vY,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h4,"id","transformers.TFAutoModelForTokenClassification"),c(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h4,"href","#transformers.TFAutoModelForTokenClassification"),c($c,"class","relative group"),c(FY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EY,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(CY,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(wY,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(AY,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(LY,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(yY,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(xY,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c($Y,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(kY,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(SY,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(RY,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(PY,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(BY,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(IY,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(NY,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(qY,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(jY,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(DY,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(GY,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(OY,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N4,"id","transformers.TFAutoModelForQuestionAnswering"),c(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Rc,"class","relative group"),c(VY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WY,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(QY,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(HY,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(UY,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(JY,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(YY,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(KY,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(ZY,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(oK,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(rK,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(tK,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(aK,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(nK,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(sK,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(lK,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(iK,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(dK,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(cK,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(fK,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sC,"id","transformers.TFAutoModelForVision2Seq"),c(sC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sC,"href","#transformers.TFAutoModelForVision2Seq"),c(Ic,"class","relative group"),c(mK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(cC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(jc,"class","relative group"),c(uK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vK,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hC,"id","transformers.FlaxAutoModel"),c(hC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hC,"href","#transformers.FlaxAutoModel"),c(Oc,"class","relative group"),c(FK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EK,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertModel"),c(CK,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartModel"),c(wK,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.FlaxBeitModel"),c(AK,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertModel"),c(LK,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(yK,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(xK,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c($K,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.FlaxCLIPModel"),c(kK,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(SK,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraModel"),c(RK,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(PK,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(BK,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(IK,"href","/docs/transformers/pr_17109/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(NK,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.FlaxMarianModel"),c(qK,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartModel"),c(jK,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.FlaxMT5Model"),c(DK,"href","/docs/transformers/pr_17109/en/model_doc/opt#transformers.FlaxOPTModel"),c(GK,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(OK,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(VK,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(XK,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.FlaxT5Model"),c(zK,"href","/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(WK,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.FlaxViTModel"),c(QK,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(HK,"href","/docs/transformers/pr_17109/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(UK,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XC,"id","transformers.FlaxAutoModelForCausalLM"),c(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XC,"href","#transformers.FlaxAutoModelForCausalLM"),c(zc,"class","relative group"),c(JK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZK,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(eZ,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(oZ,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(rZ,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(tZ,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(aZ,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(nZ,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(sZ,"href","/docs/transformers/pr_17109/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(lZ,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(iZ,"href","/docs/transformers/pr_17109/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t5,"id","transformers.FlaxAutoModelForPreTraining"),c(t5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Hc,"class","relative group"),c(dZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mZ,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(gZ,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(hZ,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(pZ,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(uZ,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(_Z,"href","/docs/transformers/pr_17109/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(bZ,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(vZ,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(FZ,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(TZ,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(MZ,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(EZ,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(CZ,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v5,"id","transformers.FlaxAutoModelForMaskedLM"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Yc,"class","relative group"),c(wZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yZ,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(xZ,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c($Z,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(kZ,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(SZ,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(RZ,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(PZ,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(BZ,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(IZ,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(NZ,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(ef,"class","relative group"),c(qZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GZ,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(OZ,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(VZ,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(XZ,"href","/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(zZ,"href","/docs/transformers/pr_17109/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(WZ,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(QZ,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(HZ,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(UZ,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(JZ,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(tf,"class","relative group"),c(YZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eee,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(oee,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(ree,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(tee,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(aee,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(nee,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(see,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(lee,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(iee,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(dee,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(a3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(sf,"class","relative group"),c(cee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gee,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(hee,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(pee,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(uee,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(_ee,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(bee,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(vee,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Fee,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Tee,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Mee,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_3,"id","transformers.FlaxAutoModelForTokenClassification"),c(_3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(cf,"class","relative group"),c(Eee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aee,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Lee,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(yee,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(xee,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c($ee,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(kee,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(See,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Ree,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(gf,"class","relative group"),c(Pee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nee,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(qee,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(jee,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Dee,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Gee,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Oee,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Vee,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Xee,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(j3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(uf,"class","relative group"),c(zee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hee,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V3,"id","transformers.FlaxAutoModelForImageClassification"),c(V3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V3,"href","#transformers.FlaxAutoModelForImageClassification"),c(vf,"class","relative group"),c(Uee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kee,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Zee,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H3,"id","transformers.FlaxAutoModelForVision2Seq"),c(H3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Mf,"class","relative group"),c(eoe,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ooe,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(roe,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(toe,"href","/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Eo),e(Eo,Ti),b(f,yf,_),b(f,at,_),e(at,Mi),e(at,Ei),e(Ei,b6),e(at,xf),b(f,Oe,_),b(f,We,_),e(We,Ci),e(We,Sn),e(Sn,v6),e(We,Rn),e(We,Pn),e(Pn,F6),e(We,wi),e(We,Bn),e(Bn,T6),e(We,Ai),b(f,$f,_),M(ya,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,Uk),e(Ae,Li),e(Li,Jk),e(Ae,Yk),b(f,Co,_),b(f,xa,_),e(xa,Kk),e(xa,kf),e(kf,Zk),e(xa,Aze),b(f,fGe,_),b(f,yi,_),e(yi,Sf),e(Sf,Kre),M(M6,Kre,null),e(yi,Lze),e(yi,Zre),e(Zre,yze),b(f,mGe,_),b(f,In,_),e(In,xze),e(In,ete),e(ete,$ze),e(In,kze),e(In,ote),e(ote,Sze),e(In,Rze),b(f,gGe,_),M(E6,f,_),b(f,hGe,_),b(f,eS,_),e(eS,Pze),b(f,pGe,_),M(Rf,f,_),b(f,uGe,_),b(f,xi,_),e(xi,Pf),e(Pf,rte),M(C6,rte,null),e(xi,Bze),e(xi,tte),e(tte,Ize),b(f,_Ge,_),b(f,wo,_),M(w6,wo,null),e(wo,Nze),e(wo,A6),e(A6,qze),e(A6,oS),e(oS,jze),e(A6,Dze),e(wo,Gze),e(wo,L6),e(L6,Oze),e(L6,ate),e(ate,Vze),e(L6,Xze),e(wo,zze),e(wo,wr),M(y6,wr,null),e(wr,Wze),e(wr,nte),e(nte,Qze),e(wr,Hze),e(wr,$i),e($i,Uze),e($i,ste),e(ste,Jze),e($i,Yze),e($i,lte),e(lte,Kze),e($i,Zze),e(wr,eWe),e(wr,A),e(A,Bf),e(Bf,ite),e(ite,oWe),e(Bf,rWe),e(Bf,rS),e(rS,tWe),e(Bf,aWe),e(A,nWe),e(A,If),e(If,dte),e(dte,sWe),e(If,lWe),e(If,tS),e(tS,iWe),e(If,dWe),e(A,cWe),e(A,Nf),e(Nf,cte),e(cte,fWe),e(Nf,mWe),e(Nf,aS),e(aS,gWe),e(Nf,hWe),e(A,pWe),e(A,qf),e(qf,fte),e(fte,uWe),e(qf,_We),e(qf,nS),e(nS,bWe),e(qf,vWe),e(A,FWe),e(A,jf),e(jf,mte),e(mte,TWe),e(jf,MWe),e(jf,sS),e(sS,EWe),e(jf,CWe),e(A,wWe),e(A,Df),e(Df,gte),e(gte,AWe),e(Df,LWe),e(Df,lS),e(lS,yWe),e(Df,xWe),e(A,$We),e(A,Gf),e(Gf,hte),e(hte,kWe),e(Gf,SWe),e(Gf,iS),e(iS,RWe),e(Gf,PWe),e(A,BWe),e(A,Of),e(Of,pte),e(pte,IWe),e(Of,NWe),e(Of,dS),e(dS,qWe),e(Of,jWe),e(A,DWe),e(A,Vf),e(Vf,ute),e(ute,GWe),e(Vf,OWe),e(Vf,cS),e(cS,VWe),e(Vf,XWe),e(A,zWe),e(A,Xf),e(Xf,_te),e(_te,WWe),e(Xf,QWe),e(Xf,fS),e(fS,HWe),e(Xf,UWe),e(A,JWe),e(A,zf),e(zf,bte),e(bte,YWe),e(zf,KWe),e(zf,mS),e(mS,ZWe),e(zf,eQe),e(A,oQe),e(A,Wf),e(Wf,vte),e(vte,rQe),e(Wf,tQe),e(Wf,gS),e(gS,aQe),e(Wf,nQe),e(A,sQe),e(A,Qf),e(Qf,Fte),e(Fte,lQe),e(Qf,iQe),e(Qf,hS),e(hS,dQe),e(Qf,cQe),e(A,fQe),e(A,Hf),e(Hf,Tte),e(Tte,mQe),e(Hf,gQe),e(Hf,pS),e(pS,hQe),e(Hf,pQe),e(A,uQe),e(A,Uf),e(Uf,Mte),e(Mte,_Qe),e(Uf,bQe),e(Uf,uS),e(uS,vQe),e(Uf,FQe),e(A,TQe),e(A,Jf),e(Jf,Ete),e(Ete,MQe),e(Jf,EQe),e(Jf,_S),e(_S,CQe),e(Jf,wQe),e(A,AQe),e(A,Yf),e(Yf,Cte),e(Cte,LQe),e(Yf,yQe),e(Yf,bS),e(bS,xQe),e(Yf,$Qe),e(A,kQe),e(A,Kf),e(Kf,wte),e(wte,SQe),e(Kf,RQe),e(Kf,vS),e(vS,PQe),e(Kf,BQe),e(A,IQe),e(A,Zf),e(Zf,Ate),e(Ate,NQe),e(Zf,qQe),e(Zf,FS),e(FS,jQe),e(Zf,DQe),e(A,GQe),e(A,em),e(em,Lte),e(Lte,OQe),e(em,VQe),e(em,TS),e(TS,XQe),e(em,zQe),e(A,WQe),e(A,om),e(om,yte),e(yte,QQe),e(om,HQe),e(om,MS),e(MS,UQe),e(om,JQe),e(A,YQe),e(A,rm),e(rm,xte),e(xte,KQe),e(rm,ZQe),e(rm,ES),e(ES,eHe),e(rm,oHe),e(A,rHe),e(A,tm),e(tm,$te),e($te,tHe),e(tm,aHe),e(tm,CS),e(CS,nHe),e(tm,sHe),e(A,lHe),e(A,am),e(am,kte),e(kte,iHe),e(am,dHe),e(am,wS),e(wS,cHe),e(am,fHe),e(A,mHe),e(A,nm),e(nm,Ste),e(Ste,gHe),e(nm,hHe),e(nm,AS),e(AS,pHe),e(nm,uHe),e(A,_He),e(A,sm),e(sm,Rte),e(Rte,bHe),e(sm,vHe),e(sm,LS),e(LS,FHe),e(sm,THe),e(A,MHe),e(A,lm),e(lm,Pte),e(Pte,EHe),e(lm,CHe),e(lm,yS),e(yS,wHe),e(lm,AHe),e(A,LHe),e(A,im),e(im,Bte),e(Bte,yHe),e(im,xHe),e(im,xS),e(xS,$He),e(im,kHe),e(A,SHe),e(A,dm),e(dm,Ite),e(Ite,RHe),e(dm,PHe),e(dm,$S),e($S,BHe),e(dm,IHe),e(A,NHe),e(A,cm),e(cm,Nte),e(Nte,qHe),e(cm,jHe),e(cm,kS),e(kS,DHe),e(cm,GHe),e(A,OHe),e(A,fm),e(fm,qte),e(qte,VHe),e(fm,XHe),e(fm,SS),e(SS,zHe),e(fm,WHe),e(A,QHe),e(A,mm),e(mm,jte),e(jte,HHe),e(mm,UHe),e(mm,RS),e(RS,JHe),e(mm,YHe),e(A,KHe),e(A,gm),e(gm,Dte),e(Dte,ZHe),e(gm,eUe),e(gm,PS),e(PS,oUe),e(gm,rUe),e(A,tUe),e(A,hm),e(hm,Gte),e(Gte,aUe),e(hm,nUe),e(hm,BS),e(BS,sUe),e(hm,lUe),e(A,iUe),e(A,pm),e(pm,Ote),e(Ote,dUe),e(pm,cUe),e(pm,IS),e(IS,fUe),e(pm,mUe),e(A,gUe),e(A,um),e(um,Vte),e(Vte,hUe),e(um,pUe),e(um,NS),e(NS,uUe),e(um,_Ue),e(A,bUe),e(A,_m),e(_m,Xte),e(Xte,vUe),e(_m,FUe),e(_m,qS),e(qS,TUe),e(_m,MUe),e(A,EUe),e(A,bm),e(bm,zte),e(zte,CUe),e(bm,wUe),e(bm,jS),e(jS,AUe),e(bm,LUe),e(A,yUe),e(A,vm),e(vm,Wte),e(Wte,xUe),e(vm,$Ue),e(vm,DS),e(DS,kUe),e(vm,SUe),e(A,RUe),e(A,Fm),e(Fm,Qte),e(Qte,PUe),e(Fm,BUe),e(Fm,GS),e(GS,IUe),e(Fm,NUe),e(A,qUe),e(A,Tm),e(Tm,Hte),e(Hte,jUe),e(Tm,DUe),e(Tm,OS),e(OS,GUe),e(Tm,OUe),e(A,VUe),e(A,Mm),e(Mm,Ute),e(Ute,XUe),e(Mm,zUe),e(Mm,VS),e(VS,WUe),e(Mm,QUe),e(A,HUe),e(A,Em),e(Em,Jte),e(Jte,UUe),e(Em,JUe),e(Em,XS),e(XS,YUe),e(Em,KUe),e(A,ZUe),e(A,Cm),e(Cm,Yte),e(Yte,eJe),e(Cm,oJe),e(Cm,zS),e(zS,rJe),e(Cm,tJe),e(A,aJe),e(A,wm),e(wm,Kte),e(Kte,nJe),e(wm,sJe),e(wm,WS),e(WS,lJe),e(wm,iJe),e(A,dJe),e(A,Am),e(Am,Zte),e(Zte,cJe),e(Am,fJe),e(Am,QS),e(QS,mJe),e(Am,gJe),e(A,hJe),e(A,Lm),e(Lm,eae),e(eae,pJe),e(Lm,uJe),e(Lm,HS),e(HS,_Je),e(Lm,bJe),e(A,vJe),e(A,ym),e(ym,oae),e(oae,FJe),e(ym,TJe),e(ym,US),e(US,MJe),e(ym,EJe),e(A,CJe),e(A,xm),e(xm,rae),e(rae,wJe),e(xm,AJe),e(xm,JS),e(JS,LJe),e(xm,yJe),e(A,xJe),e(A,$m),e($m,tae),e(tae,$Je),e($m,kJe),e($m,YS),e(YS,SJe),e($m,RJe),e(A,PJe),e(A,km),e(km,aae),e(aae,BJe),e(km,IJe),e(km,KS),e(KS,NJe),e(km,qJe),e(A,jJe),e(A,Sm),e(Sm,nae),e(nae,DJe),e(Sm,GJe),e(Sm,ZS),e(ZS,OJe),e(Sm,VJe),e(A,XJe),e(A,Rm),e(Rm,sae),e(sae,zJe),e(Rm,WJe),e(Rm,eR),e(eR,QJe),e(Rm,HJe),e(A,UJe),e(A,Pm),e(Pm,lae),e(lae,JJe),e(Pm,YJe),e(Pm,oR),e(oR,KJe),e(Pm,ZJe),e(A,eYe),e(A,Bm),e(Bm,iae),e(iae,oYe),e(Bm,rYe),e(Bm,rR),e(rR,tYe),e(Bm,aYe),e(A,nYe),e(A,Im),e(Im,dae),e(dae,sYe),e(Im,lYe),e(Im,tR),e(tR,iYe),e(Im,dYe),e(A,cYe),e(A,Nm),e(Nm,cae),e(cae,fYe),e(Nm,mYe),e(Nm,aR),e(aR,gYe),e(Nm,hYe),e(A,pYe),e(A,qm),e(qm,fae),e(fae,uYe),e(qm,_Ye),e(qm,nR),e(nR,bYe),e(qm,vYe),e(A,FYe),e(A,jm),e(jm,mae),e(mae,TYe),e(jm,MYe),e(jm,sR),e(sR,EYe),e(jm,CYe),e(A,wYe),e(A,Dm),e(Dm,gae),e(gae,AYe),e(Dm,LYe),e(Dm,lR),e(lR,yYe),e(Dm,xYe),e(A,$Ye),e(A,Gm),e(Gm,hae),e(hae,kYe),e(Gm,SYe),e(Gm,iR),e(iR,RYe),e(Gm,PYe),e(A,BYe),e(A,Om),e(Om,pae),e(pae,IYe),e(Om,NYe),e(Om,dR),e(dR,qYe),e(Om,jYe),e(A,DYe),e(A,Vm),e(Vm,uae),e(uae,GYe),e(Vm,OYe),e(Vm,cR),e(cR,VYe),e(Vm,XYe),e(A,zYe),e(A,Xm),e(Xm,_ae),e(_ae,WYe),e(Xm,QYe),e(Xm,fR),e(fR,HYe),e(Xm,UYe),e(A,JYe),e(A,zm),e(zm,bae),e(bae,YYe),e(zm,KYe),e(zm,mR),e(mR,ZYe),e(zm,eKe),e(A,oKe),e(A,Wm),e(Wm,vae),e(vae,rKe),e(Wm,tKe),e(Wm,gR),e(gR,aKe),e(Wm,nKe),e(A,sKe),e(A,Qm),e(Qm,Fae),e(Fae,lKe),e(Qm,iKe),e(Qm,hR),e(hR,dKe),e(Qm,cKe),e(A,fKe),e(A,Hm),e(Hm,Tae),e(Tae,mKe),e(Hm,gKe),e(Hm,pR),e(pR,hKe),e(Hm,pKe),e(A,uKe),e(A,Um),e(Um,Mae),e(Mae,_Ke),e(Um,bKe),e(Um,uR),e(uR,vKe),e(Um,FKe),e(A,TKe),e(A,Jm),e(Jm,Eae),e(Eae,MKe),e(Jm,EKe),e(Jm,_R),e(_R,CKe),e(Jm,wKe),e(A,AKe),e(A,Ym),e(Ym,Cae),e(Cae,LKe),e(Ym,yKe),e(Ym,bR),e(bR,xKe),e(Ym,$Ke),e(A,kKe),e(A,Km),e(Km,wae),e(wae,SKe),e(Km,RKe),e(Km,vR),e(vR,PKe),e(Km,BKe),e(A,IKe),e(A,Zm),e(Zm,Aae),e(Aae,NKe),e(Zm,qKe),e(Zm,FR),e(FR,jKe),e(Zm,DKe),e(A,GKe),e(A,eg),e(eg,Lae),e(Lae,OKe),e(eg,VKe),e(eg,TR),e(TR,XKe),e(eg,zKe),e(A,WKe),e(A,og),e(og,yae),e(yae,QKe),e(og,HKe),e(og,MR),e(MR,UKe),e(og,JKe),e(A,YKe),e(A,rg),e(rg,xae),e(xae,KKe),e(rg,ZKe),e(rg,ER),e(ER,eZe),e(rg,oZe),e(A,rZe),e(A,tg),e(tg,$ae),e($ae,tZe),e(tg,aZe),e(tg,CR),e(CR,nZe),e(tg,sZe),e(A,lZe),e(A,ag),e(ag,kae),e(kae,iZe),e(ag,dZe),e(ag,wR),e(wR,cZe),e(ag,fZe),e(A,mZe),e(A,ng),e(ng,Sae),e(Sae,gZe),e(ng,hZe),e(ng,AR),e(AR,pZe),e(ng,uZe),e(A,_Ze),e(A,sg),e(sg,Rae),e(Rae,bZe),e(sg,vZe),e(sg,LR),e(LR,FZe),e(sg,TZe),e(A,MZe),e(A,lg),e(lg,Pae),e(Pae,EZe),e(lg,CZe),e(lg,yR),e(yR,wZe),e(lg,AZe),e(A,LZe),e(A,ig),e(ig,Bae),e(Bae,yZe),e(ig,xZe),e(ig,xR),e(xR,$Ze),e(ig,kZe),e(A,SZe),e(A,dg),e(dg,Iae),e(Iae,RZe),e(dg,PZe),e(dg,$R),e($R,BZe),e(dg,IZe),e(A,NZe),e(A,cg),e(cg,Nae),e(Nae,qZe),e(cg,jZe),e(cg,kR),e(kR,DZe),e(cg,GZe),e(A,OZe),e(A,fg),e(fg,qae),e(qae,VZe),e(fg,XZe),e(fg,SR),e(SR,zZe),e(fg,WZe),e(A,QZe),e(A,mg),e(mg,jae),e(jae,HZe),e(mg,UZe),e(mg,RR),e(RR,JZe),e(mg,YZe),e(A,KZe),e(A,gg),e(gg,Dae),e(Dae,ZZe),e(gg,eeo),e(gg,PR),e(PR,oeo),e(gg,reo),e(A,teo),e(A,hg),e(hg,Gae),e(Gae,aeo),e(hg,neo),e(hg,BR),e(BR,seo),e(hg,leo),e(A,ieo),e(A,pg),e(pg,Oae),e(Oae,deo),e(pg,ceo),e(pg,IR),e(IR,feo),e(pg,meo),e(A,geo),e(A,ug),e(ug,Vae),e(Vae,heo),e(ug,peo),e(ug,NR),e(NR,ueo),e(ug,_eo),e(A,beo),e(A,_g),e(_g,Xae),e(Xae,veo),e(_g,Feo),e(_g,qR),e(qR,Teo),e(_g,Meo),e(A,Eeo),e(A,bg),e(bg,zae),e(zae,Ceo),e(bg,weo),e(bg,jR),e(jR,Aeo),e(bg,Leo),e(A,yeo),e(A,vg),e(vg,Wae),e(Wae,xeo),e(vg,$eo),e(vg,DR),e(DR,keo),e(vg,Seo),e(A,Reo),e(A,Fg),e(Fg,Qae),e(Qae,Peo),e(Fg,Beo),e(Fg,GR),e(GR,Ieo),e(Fg,Neo),e(A,qeo),e(A,Tg),e(Tg,Hae),e(Hae,jeo),e(Tg,Deo),e(Tg,OR),e(OR,Geo),e(Tg,Oeo),e(A,Veo),e(A,Mg),e(Mg,Uae),e(Uae,Xeo),e(Mg,zeo),e(Mg,VR),e(VR,Weo),e(Mg,Qeo),e(A,Heo),e(A,Eg),e(Eg,Jae),e(Jae,Ueo),e(Eg,Jeo),e(Eg,XR),e(XR,Yeo),e(Eg,Keo),e(A,Zeo),e(A,Cg),e(Cg,Yae),e(Yae,eoo),e(Cg,ooo),e(Cg,zR),e(zR,roo),e(Cg,too),e(A,aoo),e(A,wg),e(wg,Kae),e(Kae,noo),e(wg,soo),e(wg,WR),e(WR,loo),e(wg,ioo),e(A,doo),e(A,Ag),e(Ag,Zae),e(Zae,coo),e(Ag,foo),e(Ag,QR),e(QR,moo),e(Ag,goo),e(A,hoo),e(A,Lg),e(Lg,ene),e(ene,poo),e(Lg,uoo),e(Lg,HR),e(HR,_oo),e(Lg,boo),e(A,voo),e(A,yg),e(yg,one),e(one,Foo),e(yg,Too),e(yg,UR),e(UR,Moo),e(yg,Eoo),e(A,Coo),e(A,xg),e(xg,rne),e(rne,woo),e(xg,Aoo),e(xg,JR),e(JR,Loo),e(xg,yoo),e(A,xoo),e(A,$g),e($g,tne),e(tne,$oo),e($g,koo),e($g,YR),e(YR,Soo),e($g,Roo),e(A,Poo),e(A,kg),e(kg,ane),e(ane,Boo),e(kg,Ioo),e(kg,KR),e(KR,Noo),e(kg,qoo),e(A,joo),e(A,Sg),e(Sg,nne),e(nne,Doo),e(Sg,Goo),e(Sg,ZR),e(ZR,Ooo),e(Sg,Voo),e(A,Xoo),e(A,Rg),e(Rg,sne),e(sne,zoo),e(Rg,Woo),e(Rg,eP),e(eP,Qoo),e(Rg,Hoo),e(A,Uoo),e(A,Pg),e(Pg,lne),e(lne,Joo),e(Pg,Yoo),e(Pg,oP),e(oP,Koo),e(Pg,Zoo),e(A,ero),e(A,Bg),e(Bg,ine),e(ine,oro),e(Bg,rro),e(Bg,rP),e(rP,tro),e(Bg,aro),e(A,nro),e(A,Ig),e(Ig,dne),e(dne,sro),e(Ig,lro),e(Ig,tP),e(tP,iro),e(Ig,dro),e(A,cro),e(A,Ng),e(Ng,cne),e(cne,fro),e(Ng,mro),e(Ng,aP),e(aP,gro),e(Ng,hro),e(A,pro),e(A,qg),e(qg,fne),e(fne,uro),e(qg,_ro),e(qg,nP),e(nP,bro),e(qg,vro),e(A,Fro),e(A,jg),e(jg,mne),e(mne,Tro),e(jg,Mro),e(jg,sP),e(sP,Ero),e(jg,Cro),e(A,wro),e(A,Dg),e(Dg,gne),e(gne,Aro),e(Dg,Lro),e(Dg,lP),e(lP,yro),e(Dg,xro),e(wr,$ro),M(Gg,wr,null),e(wo,kro),e(wo,Og),M(x6,Og,null),e(Og,Sro),e(Og,hne),e(hne,Rro),b(f,bGe,_),b(f,ki,_),e(ki,Vg),e(Vg,pne),M($6,pne,null),e(ki,Pro),e(ki,une),e(une,Bro),b(f,vGe,_),b(f,Ao,_),M(k6,Ao,null),e(Ao,Iro),e(Ao,S6),e(S6,Nro),e(S6,iP),e(iP,qro),e(S6,jro),e(Ao,Dro),e(Ao,R6),e(R6,Gro),e(R6,_ne),e(_ne,Oro),e(R6,Vro),e(Ao,Xro),e(Ao,Ar),M(P6,Ar,null),e(Ar,zro),e(Ar,bne),e(bne,Wro),e(Ar,Qro),e(Ar,$a),e($a,Hro),e($a,vne),e(vne,Uro),e($a,Jro),e($a,Fne),e(Fne,Yro),e($a,Kro),e($a,Tne),e(Tne,Zro),e($a,eto),e(Ar,oto),e(Ar,k),e(k,Nn),e(Nn,Mne),e(Mne,rto),e(Nn,tto),e(Nn,dP),e(dP,ato),e(Nn,nto),e(Nn,cP),e(cP,sto),e(Nn,lto),e(k,ito),e(k,qn),e(qn,Ene),e(Ene,dto),e(qn,cto),e(qn,fP),e(fP,fto),e(qn,mto),e(qn,mP),e(mP,gto),e(qn,hto),e(k,pto),e(k,jn),e(jn,Cne),e(Cne,uto),e(jn,_to),e(jn,gP),e(gP,bto),e(jn,vto),e(jn,hP),e(hP,Fto),e(jn,Tto),e(k,Mto),e(k,Xg),e(Xg,wne),e(wne,Eto),e(Xg,Cto),e(Xg,pP),e(pP,wto),e(Xg,Ato),e(k,Lto),e(k,Dn),e(Dn,Ane),e(Ane,yto),e(Dn,xto),e(Dn,uP),e(uP,$to),e(Dn,kto),e(Dn,_P),e(_P,Sto),e(Dn,Rto),e(k,Pto),e(k,zg),e(zg,Lne),e(Lne,Bto),e(zg,Ito),e(zg,bP),e(bP,Nto),e(zg,qto),e(k,jto),e(k,Wg),e(Wg,yne),e(yne,Dto),e(Wg,Gto),e(Wg,vP),e(vP,Oto),e(Wg,Vto),e(k,Xto),e(k,Qg),e(Qg,xne),e(xne,zto),e(Qg,Wto),e(Qg,FP),e(FP,Qto),e(Qg,Hto),e(k,Uto),e(k,Gn),e(Gn,$ne),e($ne,Jto),e(Gn,Yto),e(Gn,TP),e(TP,Kto),e(Gn,Zto),e(Gn,MP),e(MP,eao),e(Gn,oao),e(k,rao),e(k,On),e(On,kne),e(kne,tao),e(On,aao),e(On,EP),e(EP,nao),e(On,sao),e(On,CP),e(CP,lao),e(On,iao),e(k,dao),e(k,Vn),e(Vn,Sne),e(Sne,cao),e(Vn,fao),e(Vn,wP),e(wP,mao),e(Vn,gao),e(Vn,AP),e(AP,hao),e(Vn,pao),e(k,uao),e(k,Hg),e(Hg,Rne),e(Rne,_ao),e(Hg,bao),e(Hg,LP),e(LP,vao),e(Hg,Fao),e(k,Tao),e(k,Ug),e(Ug,Pne),e(Pne,Mao),e(Ug,Eao),e(Ug,yP),e(yP,Cao),e(Ug,wao),e(k,Aao),e(k,Jg),e(Jg,Bne),e(Bne,Lao),e(Jg,yao),e(Jg,xP),e(xP,xao),e(Jg,$ao),e(k,kao),e(k,Xn),e(Xn,Ine),e(Ine,Sao),e(Xn,Rao),e(Xn,$P),e($P,Pao),e(Xn,Bao),e(Xn,kP),e(kP,Iao),e(Xn,Nao),e(k,qao),e(k,Yg),e(Yg,Nne),e(Nne,jao),e(Yg,Dao),e(Yg,SP),e(SP,Gao),e(Yg,Oao),e(k,Vao),e(k,zn),e(zn,qne),e(qne,Xao),e(zn,zao),e(zn,RP),e(RP,Wao),e(zn,Qao),e(zn,PP),e(PP,Hao),e(zn,Uao),e(k,Jao),e(k,Wn),e(Wn,jne),e(jne,Yao),e(Wn,Kao),e(Wn,BP),e(BP,Zao),e(Wn,eno),e(Wn,IP),e(IP,ono),e(Wn,rno),e(k,tno),e(k,Qn),e(Qn,Dne),e(Dne,ano),e(Qn,nno),e(Qn,NP),e(NP,sno),e(Qn,lno),e(Qn,qP),e(qP,ino),e(Qn,dno),e(k,cno),e(k,Kg),e(Kg,Gne),e(Gne,fno),e(Kg,mno),e(Kg,jP),e(jP,gno),e(Kg,hno),e(k,pno),e(k,Hn),e(Hn,One),e(One,uno),e(Hn,_no),e(Hn,DP),e(DP,bno),e(Hn,vno),e(Hn,GP),e(GP,Fno),e(Hn,Tno),e(k,Mno),e(k,Un),e(Un,Vne),e(Vne,Eno),e(Un,Cno),e(Un,OP),e(OP,wno),e(Un,Ano),e(Un,VP),e(VP,Lno),e(Un,yno),e(k,xno),e(k,Jn),e(Jn,Xne),e(Xne,$no),e(Jn,kno),e(Jn,XP),e(XP,Sno),e(Jn,Rno),e(Jn,zP),e(zP,Pno),e(Jn,Bno),e(k,Ino),e(k,Yn),e(Yn,zne),e(zne,Nno),e(Yn,qno),e(Yn,WP),e(WP,jno),e(Yn,Dno),e(Yn,QP),e(QP,Gno),e(Yn,Ono),e(k,Vno),e(k,Kn),e(Kn,Wne),e(Wne,Xno),e(Kn,zno),e(Kn,HP),e(HP,Wno),e(Kn,Qno),e(Kn,UP),e(UP,Hno),e(Kn,Uno),e(k,Jno),e(k,Zn),e(Zn,Qne),e(Qne,Yno),e(Zn,Kno),e(Zn,JP),e(JP,Zno),e(Zn,eso),e(Zn,YP),e(YP,oso),e(Zn,rso),e(k,tso),e(k,Zg),e(Zg,Hne),e(Hne,aso),e(Zg,nso),e(Zg,KP),e(KP,sso),e(Zg,lso),e(k,iso),e(k,es),e(es,Une),e(Une,dso),e(es,cso),e(es,ZP),e(ZP,fso),e(es,mso),e(es,eB),e(eB,gso),e(es,hso),e(k,pso),e(k,eh),e(eh,Jne),e(Jne,uso),e(eh,_so),e(eh,oB),e(oB,bso),e(eh,vso),e(k,Fso),e(k,os),e(os,Yne),e(Yne,Tso),e(os,Mso),e(os,rB),e(rB,Eso),e(os,Cso),e(os,tB),e(tB,wso),e(os,Aso),e(k,Lso),e(k,rs),e(rs,Kne),e(Kne,yso),e(rs,xso),e(rs,aB),e(aB,$so),e(rs,kso),e(rs,nB),e(nB,Sso),e(rs,Rso),e(k,Pso),e(k,ts),e(ts,Zne),e(Zne,Bso),e(ts,Iso),e(ts,sB),e(sB,Nso),e(ts,qso),e(ts,lB),e(lB,jso),e(ts,Dso),e(k,Gso),e(k,oh),e(oh,ese),e(ese,Oso),e(oh,Vso),e(oh,iB),e(iB,Xso),e(oh,zso),e(k,Wso),e(k,as),e(as,ose),e(ose,Qso),e(as,Hso),e(as,dB),e(dB,Uso),e(as,Jso),e(as,cB),e(cB,Yso),e(as,Kso),e(k,Zso),e(k,ns),e(ns,rse),e(rse,elo),e(ns,olo),e(ns,fB),e(fB,rlo),e(ns,tlo),e(ns,mB),e(mB,alo),e(ns,nlo),e(k,slo),e(k,rh),e(rh,tse),e(tse,llo),e(rh,ilo),e(rh,gB),e(gB,dlo),e(rh,clo),e(k,flo),e(k,ss),e(ss,ase),e(ase,mlo),e(ss,glo),e(ss,hB),e(hB,hlo),e(ss,plo),e(ss,pB),e(pB,ulo),e(ss,_lo),e(k,blo),e(k,ls),e(ls,nse),e(nse,vlo),e(ls,Flo),e(ls,uB),e(uB,Tlo),e(ls,Mlo),e(ls,_B),e(_B,Elo),e(ls,Clo),e(k,wlo),e(k,is),e(is,sse),e(sse,Alo),e(is,Llo),e(is,bB),e(bB,ylo),e(is,xlo),e(is,vB),e(vB,$lo),e(is,klo),e(k,Slo),e(k,ds),e(ds,lse),e(lse,Rlo),e(ds,Plo),e(ds,FB),e(FB,Blo),e(ds,Ilo),e(ds,TB),e(TB,Nlo),e(ds,qlo),e(k,jlo),e(k,cs),e(cs,ise),e(ise,Dlo),e(cs,Glo),e(cs,MB),e(MB,Olo),e(cs,Vlo),e(cs,EB),e(EB,Xlo),e(cs,zlo),e(k,Wlo),e(k,fs),e(fs,dse),e(dse,Qlo),e(fs,Hlo),e(fs,CB),e(CB,Ulo),e(fs,Jlo),e(fs,wB),e(wB,Ylo),e(fs,Klo),e(k,Zlo),e(k,ms),e(ms,cse),e(cse,eio),e(ms,oio),e(ms,AB),e(AB,rio),e(ms,tio),e(ms,LB),e(LB,aio),e(ms,nio),e(k,sio),e(k,gs),e(gs,fse),e(fse,lio),e(gs,iio),e(gs,yB),e(yB,dio),e(gs,cio),e(gs,xB),e(xB,fio),e(gs,mio),e(k,gio),e(k,th),e(th,mse),e(mse,hio),e(th,pio),e(th,$B),e($B,uio),e(th,_io),e(k,bio),e(k,hs),e(hs,gse),e(gse,vio),e(hs,Fio),e(hs,kB),e(kB,Tio),e(hs,Mio),e(hs,SB),e(SB,Eio),e(hs,Cio),e(k,wio),e(k,ah),e(ah,hse),e(hse,Aio),e(ah,Lio),e(ah,RB),e(RB,yio),e(ah,xio),e(k,$io),e(k,nh),e(nh,pse),e(pse,kio),e(nh,Sio),e(nh,PB),e(PB,Rio),e(nh,Pio),e(k,Bio),e(k,ps),e(ps,use),e(use,Iio),e(ps,Nio),e(ps,BB),e(BB,qio),e(ps,jio),e(ps,IB),e(IB,Dio),e(ps,Gio),e(k,Oio),e(k,us),e(us,_se),e(_se,Vio),e(us,Xio),e(us,NB),e(NB,zio),e(us,Wio),e(us,qB),e(qB,Qio),e(us,Hio),e(k,Uio),e(k,_s),e(_s,bse),e(bse,Jio),e(_s,Yio),e(_s,jB),e(jB,Kio),e(_s,Zio),e(_s,DB),e(DB,edo),e(_s,odo),e(k,rdo),e(k,sh),e(sh,vse),e(vse,tdo),e(sh,ado),e(sh,GB),e(GB,ndo),e(sh,sdo),e(k,ldo),e(k,bs),e(bs,Fse),e(Fse,ido),e(bs,ddo),e(bs,OB),e(OB,cdo),e(bs,fdo),e(bs,VB),e(VB,mdo),e(bs,gdo),e(k,hdo),e(k,vs),e(vs,Tse),e(Tse,pdo),e(vs,udo),e(vs,XB),e(XB,_do),e(vs,bdo),e(vs,zB),e(zB,vdo),e(vs,Fdo),e(k,Tdo),e(k,Fs),e(Fs,Mse),e(Mse,Mdo),e(Fs,Edo),e(Fs,WB),e(WB,Cdo),e(Fs,wdo),e(Fs,QB),e(QB,Ado),e(Fs,Ldo),e(k,ydo),e(k,Ts),e(Ts,Ese),e(Ese,xdo),e(Ts,$do),e(Ts,HB),e(HB,kdo),e(Ts,Sdo),e(Ts,UB),e(UB,Rdo),e(Ts,Pdo),e(k,Bdo),e(k,Ms),e(Ms,Cse),e(Cse,Ido),e(Ms,Ndo),e(Ms,JB),e(JB,qdo),e(Ms,jdo),e(Ms,YB),e(YB,Ddo),e(Ms,Gdo),e(k,Odo),e(k,Es),e(Es,wse),e(wse,Vdo),e(Es,Xdo),e(Es,KB),e(KB,zdo),e(Es,Wdo),e(Es,ZB),e(ZB,Qdo),e(Es,Hdo),e(k,Udo),e(k,lh),e(lh,Ase),e(Ase,Jdo),e(lh,Ydo),e(lh,eI),e(eI,Kdo),e(lh,Zdo),e(k,eco),e(k,Cs),e(Cs,Lse),e(Lse,oco),e(Cs,rco),e(Cs,oI),e(oI,tco),e(Cs,aco),e(Cs,rI),e(rI,nco),e(Cs,sco),e(k,lco),e(k,ih),e(ih,yse),e(yse,ico),e(ih,dco),e(ih,tI),e(tI,cco),e(ih,fco),e(k,mco),e(k,dh),e(dh,xse),e(xse,gco),e(dh,hco),e(dh,aI),e(aI,pco),e(dh,uco),e(k,_co),e(k,ch),e(ch,$se),e($se,bco),e(ch,vco),e(ch,nI),e(nI,Fco),e(ch,Tco),e(k,Mco),e(k,fh),e(fh,kse),e(kse,Eco),e(fh,Cco),e(fh,sI),e(sI,wco),e(fh,Aco),e(k,Lco),e(k,ws),e(ws,Sse),e(Sse,yco),e(ws,xco),e(ws,lI),e(lI,$co),e(ws,kco),e(ws,iI),e(iI,Sco),e(ws,Rco),e(k,Pco),e(k,mh),e(mh,Rse),e(Rse,Bco),e(mh,Ico),e(mh,dI),e(dI,Nco),e(mh,qco),e(k,jco),e(k,As),e(As,Pse),e(Pse,Dco),e(As,Gco),e(As,cI),e(cI,Oco),e(As,Vco),e(As,fI),e(fI,Xco),e(As,zco),e(k,Wco),e(k,Ls),e(Ls,Bse),e(Bse,Qco),e(Ls,Hco),e(Ls,mI),e(mI,Uco),e(Ls,Jco),e(Ls,gI),e(gI,Yco),e(Ls,Kco),e(k,Zco),e(k,ys),e(ys,Ise),e(Ise,efo),e(ys,ofo),e(ys,hI),e(hI,rfo),e(ys,tfo),e(ys,pI),e(pI,afo),e(ys,nfo),e(k,sfo),e(k,xs),e(xs,Nse),e(Nse,lfo),e(xs,ifo),e(xs,uI),e(uI,dfo),e(xs,cfo),e(xs,_I),e(_I,ffo),e(xs,mfo),e(k,gfo),e(k,$s),e($s,qse),e(qse,hfo),e($s,pfo),e($s,bI),e(bI,ufo),e($s,_fo),e($s,vI),e(vI,bfo),e($s,vfo),e(k,Ffo),e(k,ks),e(ks,jse),e(jse,Tfo),e(ks,Mfo),e(ks,FI),e(FI,Efo),e(ks,Cfo),e(ks,TI),e(TI,wfo),e(ks,Afo),e(k,Lfo),e(k,gh),e(gh,Dse),e(Dse,yfo),e(gh,xfo),e(gh,MI),e(MI,$fo),e(gh,kfo),e(k,Sfo),e(k,hh),e(hh,Gse),e(Gse,Rfo),e(hh,Pfo),e(hh,EI),e(EI,Bfo),e(hh,Ifo),e(k,Nfo),e(k,Ss),e(Ss,Ose),e(Ose,qfo),e(Ss,jfo),e(Ss,CI),e(CI,Dfo),e(Ss,Gfo),e(Ss,wI),e(wI,Ofo),e(Ss,Vfo),e(k,Xfo),e(k,Rs),e(Rs,Vse),e(Vse,zfo),e(Rs,Wfo),e(Rs,AI),e(AI,Qfo),e(Rs,Hfo),e(Rs,LI),e(LI,Ufo),e(Rs,Jfo),e(k,Yfo),e(k,Ps),e(Ps,Xse),e(Xse,Kfo),e(Ps,Zfo),e(Ps,yI),e(yI,emo),e(Ps,omo),e(Ps,xI),e(xI,rmo),e(Ps,tmo),e(k,amo),e(k,ph),e(ph,zse),e(zse,nmo),e(ph,smo),e(ph,$I),e($I,lmo),e(ph,imo),e(k,dmo),e(k,uh),e(uh,Wse),e(Wse,cmo),e(uh,fmo),e(uh,kI),e(kI,mmo),e(uh,gmo),e(k,hmo),e(k,_h),e(_h,Qse),e(Qse,pmo),e(_h,umo),e(_h,SI),e(SI,_mo),e(_h,bmo),e(k,vmo),e(k,Bs),e(Bs,Hse),e(Hse,Fmo),e(Bs,Tmo),e(Bs,RI),e(RI,Mmo),e(Bs,Emo),e(Bs,PI),e(PI,Cmo),e(Bs,wmo),e(k,Amo),e(k,Is),e(Is,Use),e(Use,Lmo),e(Is,ymo),e(Is,BI),e(BI,xmo),e(Is,$mo),e(Is,II),e(II,kmo),e(Is,Smo),e(k,Rmo),e(k,bh),e(bh,Jse),e(Jse,Pmo),e(bh,Bmo),e(bh,NI),e(NI,Imo),e(bh,Nmo),e(k,qmo),e(k,vh),e(vh,Yse),e(Yse,jmo),e(vh,Dmo),e(vh,qI),e(qI,Gmo),e(vh,Omo),e(k,Vmo),e(k,Fh),e(Fh,Kse),e(Kse,Xmo),e(Fh,zmo),e(Fh,jI),e(jI,Wmo),e(Fh,Qmo),e(k,Hmo),e(k,Ns),e(Ns,Zse),e(Zse,Umo),e(Ns,Jmo),e(Ns,DI),e(DI,Ymo),e(Ns,Kmo),e(Ns,GI),e(GI,Zmo),e(Ns,ego),e(k,ogo),e(k,Th),e(Th,ele),e(ele,rgo),e(Th,tgo),e(Th,OI),e(OI,ago),e(Th,ngo),e(k,sgo),e(k,Mh),e(Mh,ole),e(ole,lgo),e(Mh,igo),e(Mh,VI),e(VI,dgo),e(Mh,cgo),e(k,fgo),e(k,qs),e(qs,rle),e(rle,mgo),e(qs,ggo),e(qs,XI),e(XI,hgo),e(qs,pgo),e(qs,zI),e(zI,ugo),e(qs,_go),e(k,bgo),e(k,js),e(js,tle),e(tle,vgo),e(js,Fgo),e(js,WI),e(WI,Tgo),e(js,Mgo),e(js,QI),e(QI,Ego),e(js,Cgo),e(k,wgo),e(k,Ds),e(Ds,ale),e(ale,Ago),e(Ds,Lgo),e(Ds,HI),e(HI,ygo),e(Ds,xgo),e(Ds,UI),e(UI,$go),e(Ds,kgo),e(k,Sgo),e(k,Gs),e(Gs,nle),e(nle,Rgo),e(Gs,Pgo),e(Gs,JI),e(JI,Bgo),e(Gs,Igo),e(Gs,YI),e(YI,Ngo),e(Gs,qgo),e(Ar,jgo),M(Eh,Ar,null),e(Ao,Dgo),e(Ao,Ch),M(B6,Ch,null),e(Ch,Ggo),e(Ch,sle),e(sle,Ogo),b(f,FGe,_),b(f,Si,_),e(Si,wh),e(wh,lle),M(I6,lle,null),e(Si,Vgo),e(Si,ile),e(ile,Xgo),b(f,TGe,_),b(f,Lo,_),M(N6,Lo,null),e(Lo,zgo),e(Lo,q6),e(q6,Wgo),e(q6,KI),e(KI,Qgo),e(q6,Hgo),e(Lo,Ugo),e(Lo,j6),e(j6,Jgo),e(j6,dle),e(dle,Ygo),e(j6,Kgo),e(Lo,Zgo),e(Lo,He),M(D6,He,null),e(He,eho),e(He,cle),e(cle,oho),e(He,rho),e(He,ka),e(ka,tho),e(ka,fle),e(fle,aho),e(ka,nho),e(ka,mle),e(mle,sho),e(ka,lho),e(ka,gle),e(gle,iho),e(ka,dho),e(He,cho),e(He,Y),e(Y,Ah),e(Ah,hle),e(hle,fho),e(Ah,mho),e(Ah,ZI),e(ZI,gho),e(Ah,hho),e(Y,pho),e(Y,Lh),e(Lh,ple),e(ple,uho),e(Lh,_ho),e(Lh,eN),e(eN,bho),e(Lh,vho),e(Y,Fho),e(Y,yh),e(yh,ule),e(ule,Tho),e(yh,Mho),e(yh,oN),e(oN,Eho),e(yh,Cho),e(Y,who),e(Y,xh),e(xh,_le),e(_le,Aho),e(xh,Lho),e(xh,rN),e(rN,yho),e(xh,xho),e(Y,$ho),e(Y,$h),e($h,ble),e(ble,kho),e($h,Sho),e($h,tN),e(tN,Rho),e($h,Pho),e(Y,Bho),e(Y,kh),e(kh,vle),e(vle,Iho),e(kh,Nho),e(kh,aN),e(aN,qho),e(kh,jho),e(Y,Dho),e(Y,Sh),e(Sh,Fle),e(Fle,Gho),e(Sh,Oho),e(Sh,nN),e(nN,Vho),e(Sh,Xho),e(Y,zho),e(Y,Rh),e(Rh,Tle),e(Tle,Who),e(Rh,Qho),e(Rh,sN),e(sN,Hho),e(Rh,Uho),e(Y,Jho),e(Y,Ph),e(Ph,Mle),e(Mle,Yho),e(Ph,Kho),e(Ph,lN),e(lN,Zho),e(Ph,epo),e(Y,opo),e(Y,Bh),e(Bh,Ele),e(Ele,rpo),e(Bh,tpo),e(Bh,iN),e(iN,apo),e(Bh,npo),e(Y,spo),e(Y,Ih),e(Ih,Cle),e(Cle,lpo),e(Ih,ipo),e(Ih,dN),e(dN,dpo),e(Ih,cpo),e(Y,fpo),e(Y,Nh),e(Nh,wle),e(wle,mpo),e(Nh,gpo),e(Nh,cN),e(cN,hpo),e(Nh,ppo),e(Y,upo),e(Y,qh),e(qh,Ale),e(Ale,_po),e(qh,bpo),e(qh,fN),e(fN,vpo),e(qh,Fpo),e(Y,Tpo),e(Y,jh),e(jh,Lle),e(Lle,Mpo),e(jh,Epo),e(jh,mN),e(mN,Cpo),e(jh,wpo),e(Y,Apo),e(Y,Dh),e(Dh,yle),e(yle,Lpo),e(Dh,ypo),e(Dh,gN),e(gN,xpo),e(Dh,$po),e(Y,kpo),e(Y,Gh),e(Gh,xle),e(xle,Spo),e(Gh,Rpo),e(Gh,hN),e(hN,Ppo),e(Gh,Bpo),e(Y,Ipo),e(Y,Oh),e(Oh,$le),e($le,Npo),e(Oh,qpo),e(Oh,pN),e(pN,jpo),e(Oh,Dpo),e(Y,Gpo),e(Y,Vh),e(Vh,kle),e(kle,Opo),e(Vh,Vpo),e(Vh,uN),e(uN,Xpo),e(Vh,zpo),e(Y,Wpo),e(Y,Xh),e(Xh,Sle),e(Sle,Qpo),e(Xh,Hpo),e(Xh,_N),e(_N,Upo),e(Xh,Jpo),e(Y,Ypo),e(Y,zh),e(zh,Rle),e(Rle,Kpo),e(zh,Zpo),e(zh,bN),e(bN,euo),e(zh,ouo),e(Y,ruo),e(Y,Wh),e(Wh,Ple),e(Ple,tuo),e(Wh,auo),e(Wh,vN),e(vN,nuo),e(Wh,suo),e(Y,luo),e(Y,Qh),e(Qh,Ble),e(Ble,iuo),e(Qh,duo),e(Qh,FN),e(FN,cuo),e(Qh,fuo),e(Y,muo),e(Y,Hh),e(Hh,Ile),e(Ile,guo),e(Hh,huo),e(Hh,TN),e(TN,puo),e(Hh,uuo),e(Y,_uo),e(Y,Uh),e(Uh,Nle),e(Nle,buo),e(Uh,vuo),e(Uh,MN),e(MN,Fuo),e(Uh,Tuo),e(Y,Muo),e(Y,Jh),e(Jh,qle),e(qle,Euo),e(Jh,Cuo),e(Jh,EN),e(EN,wuo),e(Jh,Auo),e(Y,Luo),e(Y,Yh),e(Yh,jle),e(jle,yuo),e(Yh,xuo),e(Yh,CN),e(CN,$uo),e(Yh,kuo),e(Y,Suo),e(Y,Kh),e(Kh,Dle),e(Dle,Ruo),e(Kh,Puo),e(Kh,wN),e(wN,Buo),e(Kh,Iuo),e(Y,Nuo),e(Y,Zh),e(Zh,Gle),e(Gle,quo),e(Zh,juo),e(Zh,AN),e(AN,Duo),e(Zh,Guo),e(Y,Ouo),e(Y,ep),e(ep,Ole),e(Ole,Vuo),e(ep,Xuo),e(ep,LN),e(LN,zuo),e(ep,Wuo),e(Y,Quo),e(Y,op),e(op,Vle),e(Vle,Huo),e(op,Uuo),e(op,yN),e(yN,Juo),e(op,Yuo),e(Y,Kuo),e(Y,rp),e(rp,Xle),e(Xle,Zuo),e(rp,e_o),e(rp,xN),e(xN,o_o),e(rp,r_o),e(Y,t_o),e(Y,tp),e(tp,zle),e(zle,a_o),e(tp,n_o),e(tp,$N),e($N,s_o),e(tp,l_o),e(He,i_o),M(ap,He,null),e(He,d_o),M(np,He,null),e(Lo,c_o),e(Lo,sp),M(G6,sp,null),e(sp,f_o),e(sp,Wle),e(Wle,m_o),b(f,MGe,_),b(f,Ri,_),e(Ri,lp),e(lp,Qle),M(O6,Qle,null),e(Ri,g_o),e(Ri,Hle),e(Hle,h_o),b(f,EGe,_),b(f,yo,_),M(V6,yo,null),e(yo,p_o),e(yo,X6),e(X6,u_o),e(X6,kN),e(kN,__o),e(X6,b_o),e(yo,v_o),e(yo,z6),e(z6,F_o),e(z6,Ule),e(Ule,T_o),e(z6,M_o),e(yo,E_o),e(yo,Ue),M(W6,Ue,null),e(Ue,C_o),e(Ue,Jle),e(Jle,w_o),e(Ue,A_o),e(Ue,Pi),e(Pi,L_o),e(Pi,Yle),e(Yle,y_o),e(Pi,x_o),e(Pi,Kle),e(Kle,$_o),e(Pi,k_o),e(Ue,S_o),e(Ue,he),e(he,ip),e(ip,Zle),e(Zle,R_o),e(ip,P_o),e(ip,SN),e(SN,B_o),e(ip,I_o),e(he,N_o),e(he,dp),e(dp,eie),e(eie,q_o),e(dp,j_o),e(dp,oie),e(oie,D_o),e(dp,G_o),e(he,O_o),e(he,cp),e(cp,rie),e(rie,V_o),e(cp,X_o),e(cp,RN),e(RN,z_o),e(cp,W_o),e(he,Q_o),e(he,fp),e(fp,tie),e(tie,H_o),e(fp,U_o),e(fp,PN),e(PN,J_o),e(fp,Y_o),e(he,K_o),e(he,mp),e(mp,aie),e(aie,Z_o),e(mp,e1o),e(mp,BN),e(BN,o1o),e(mp,r1o),e(he,t1o),e(he,gp),e(gp,nie),e(nie,a1o),e(gp,n1o),e(gp,IN),e(IN,s1o),e(gp,l1o),e(he,i1o),e(he,hp),e(hp,sie),e(sie,d1o),e(hp,c1o),e(hp,NN),e(NN,f1o),e(hp,m1o),e(he,g1o),e(he,pp),e(pp,lie),e(lie,h1o),e(pp,p1o),e(pp,qN),e(qN,u1o),e(pp,_1o),e(he,b1o),e(he,up),e(up,iie),e(iie,v1o),e(up,F1o),e(up,jN),e(jN,T1o),e(up,M1o),e(he,E1o),e(he,_p),e(_p,die),e(die,C1o),e(_p,w1o),e(_p,DN),e(DN,A1o),e(_p,L1o),e(he,y1o),e(he,bp),e(bp,cie),e(cie,x1o),e(bp,$1o),e(bp,GN),e(GN,k1o),e(bp,S1o),e(he,R1o),e(he,vp),e(vp,fie),e(fie,P1o),e(vp,B1o),e(vp,ON),e(ON,I1o),e(vp,N1o),e(he,q1o),e(he,Fp),e(Fp,mie),e(mie,j1o),e(Fp,D1o),e(Fp,VN),e(VN,G1o),e(Fp,O1o),e(he,V1o),e(he,Tp),e(Tp,gie),e(gie,X1o),e(Tp,z1o),e(Tp,XN),e(XN,W1o),e(Tp,Q1o),e(he,H1o),e(he,Mp),e(Mp,hie),e(hie,U1o),e(Mp,J1o),e(Mp,zN),e(zN,Y1o),e(Mp,K1o),e(he,Z1o),e(he,Ep),e(Ep,pie),e(pie,e2o),e(Ep,o2o),e(Ep,WN),e(WN,r2o),e(Ep,t2o),e(he,a2o),e(he,Cp),e(Cp,uie),e(uie,n2o),e(Cp,s2o),e(Cp,QN),e(QN,l2o),e(Cp,i2o),e(Ue,d2o),M(wp,Ue,null),e(Ue,c2o),M(Ap,Ue,null),e(yo,f2o),e(yo,Lp),M(Q6,Lp,null),e(Lp,m2o),e(Lp,_ie),e(_ie,g2o),b(f,CGe,_),b(f,Bi,_),e(Bi,yp),e(yp,bie),M(H6,bie,null),e(Bi,h2o),e(Bi,vie),e(vie,p2o),b(f,wGe,_),b(f,xo,_),M(U6,xo,null),e(xo,u2o),e(xo,Ii),e(Ii,_2o),e(Ii,HN),e(HN,b2o),e(Ii,v2o),e(Ii,UN),e(UN,F2o),e(Ii,T2o),e(xo,M2o),e(xo,J6),e(J6,E2o),e(J6,Fie),e(Fie,C2o),e(J6,w2o),e(xo,A2o),e(xo,nt),M(Y6,nt,null),e(nt,L2o),e(nt,Tie),e(Tie,y2o),e(nt,x2o),e(nt,Ni),e(Ni,$2o),e(Ni,Mie),e(Mie,k2o),e(Ni,S2o),e(Ni,JN),e(JN,R2o),e(Ni,P2o),e(nt,B2o),M(xp,nt,null),e(xo,I2o),e(xo,Je),M(K6,Je,null),e(Je,N2o),e(Je,Eie),e(Eie,q2o),e(Je,j2o),e(Je,Sa),e(Sa,D2o),e(Sa,Cie),e(Cie,G2o),e(Sa,O2o),e(Sa,wie),e(wie,V2o),e(Sa,X2o),e(Sa,Aie),e(Aie,z2o),e(Sa,W2o),e(Je,Q2o),e(Je,y),e(y,$p),e($p,Lie),e(Lie,H2o),e($p,U2o),e($p,YN),e(YN,J2o),e($p,Y2o),e(y,K2o),e(y,kp),e(kp,yie),e(yie,Z2o),e(kp,ebo),e(kp,KN),e(KN,obo),e(kp,rbo),e(y,tbo),e(y,Sp),e(Sp,xie),e(xie,abo),e(Sp,nbo),e(Sp,ZN),e(ZN,sbo),e(Sp,lbo),e(y,ibo),e(y,Rp),e(Rp,$ie),e($ie,dbo),e(Rp,cbo),e(Rp,eq),e(eq,fbo),e(Rp,mbo),e(y,gbo),e(y,Pp),e(Pp,kie),e(kie,hbo),e(Pp,pbo),e(Pp,oq),e(oq,ubo),e(Pp,_bo),e(y,bbo),e(y,Bp),e(Bp,Sie),e(Sie,vbo),e(Bp,Fbo),e(Bp,rq),e(rq,Tbo),e(Bp,Mbo),e(y,Ebo),e(y,Ip),e(Ip,Rie),e(Rie,Cbo),e(Ip,wbo),e(Ip,tq),e(tq,Abo),e(Ip,Lbo),e(y,ybo),e(y,Np),e(Np,Pie),e(Pie,xbo),e(Np,$bo),e(Np,aq),e(aq,kbo),e(Np,Sbo),e(y,Rbo),e(y,qp),e(qp,Bie),e(Bie,Pbo),e(qp,Bbo),e(qp,nq),e(nq,Ibo),e(qp,Nbo),e(y,qbo),e(y,jp),e(jp,Iie),e(Iie,jbo),e(jp,Dbo),e(jp,sq),e(sq,Gbo),e(jp,Obo),e(y,Vbo),e(y,Dp),e(Dp,Nie),e(Nie,Xbo),e(Dp,zbo),e(Dp,lq),e(lq,Wbo),e(Dp,Qbo),e(y,Hbo),e(y,Gp),e(Gp,qie),e(qie,Ubo),e(Gp,Jbo),e(Gp,iq),e(iq,Ybo),e(Gp,Kbo),e(y,Zbo),e(y,Op),e(Op,jie),e(jie,evo),e(Op,ovo),e(Op,dq),e(dq,rvo),e(Op,tvo),e(y,avo),e(y,Vp),e(Vp,Die),e(Die,nvo),e(Vp,svo),e(Vp,cq),e(cq,lvo),e(Vp,ivo),e(y,dvo),e(y,Xp),e(Xp,Gie),e(Gie,cvo),e(Xp,fvo),e(Xp,fq),e(fq,mvo),e(Xp,gvo),e(y,hvo),e(y,zp),e(zp,Oie),e(Oie,pvo),e(zp,uvo),e(zp,mq),e(mq,_vo),e(zp,bvo),e(y,vvo),e(y,Wp),e(Wp,Vie),e(Vie,Fvo),e(Wp,Tvo),e(Wp,gq),e(gq,Mvo),e(Wp,Evo),e(y,Cvo),e(y,Qp),e(Qp,Xie),e(Xie,wvo),e(Qp,Avo),e(Qp,hq),e(hq,Lvo),e(Qp,yvo),e(y,xvo),e(y,Hp),e(Hp,zie),e(zie,$vo),e(Hp,kvo),e(Hp,pq),e(pq,Svo),e(Hp,Rvo),e(y,Pvo),e(y,Up),e(Up,Wie),e(Wie,Bvo),e(Up,Ivo),e(Up,uq),e(uq,Nvo),e(Up,qvo),e(y,jvo),e(y,Jp),e(Jp,Qie),e(Qie,Dvo),e(Jp,Gvo),e(Jp,_q),e(_q,Ovo),e(Jp,Vvo),e(y,Xvo),e(y,Yp),e(Yp,Hie),e(Hie,zvo),e(Yp,Wvo),e(Yp,bq),e(bq,Qvo),e(Yp,Hvo),e(y,Uvo),e(y,Kp),e(Kp,Uie),e(Uie,Jvo),e(Kp,Yvo),e(Kp,vq),e(vq,Kvo),e(Kp,Zvo),e(y,e0o),e(y,Zp),e(Zp,Jie),e(Jie,o0o),e(Zp,r0o),e(Zp,Fq),e(Fq,t0o),e(Zp,a0o),e(y,n0o),e(y,eu),e(eu,Yie),e(Yie,s0o),e(eu,l0o),e(eu,Tq),e(Tq,i0o),e(eu,d0o),e(y,c0o),e(y,ou),e(ou,Kie),e(Kie,f0o),e(ou,m0o),e(ou,Mq),e(Mq,g0o),e(ou,h0o),e(y,p0o),e(y,ru),e(ru,Zie),e(Zie,u0o),e(ru,_0o),e(ru,Eq),e(Eq,b0o),e(ru,v0o),e(y,F0o),e(y,tu),e(tu,ede),e(ede,T0o),e(tu,M0o),e(tu,Cq),e(Cq,E0o),e(tu,C0o),e(y,w0o),e(y,au),e(au,ode),e(ode,A0o),e(au,L0o),e(au,wq),e(wq,y0o),e(au,x0o),e(y,$0o),e(y,nu),e(nu,rde),e(rde,k0o),e(nu,S0o),e(nu,Aq),e(Aq,R0o),e(nu,P0o),e(y,B0o),e(y,su),e(su,tde),e(tde,I0o),e(su,N0o),e(su,Lq),e(Lq,q0o),e(su,j0o),e(y,D0o),e(y,lu),e(lu,ade),e(ade,G0o),e(lu,O0o),e(lu,yq),e(yq,V0o),e(lu,X0o),e(y,z0o),e(y,iu),e(iu,nde),e(nde,W0o),e(iu,Q0o),e(iu,xq),e(xq,H0o),e(iu,U0o),e(y,J0o),e(y,Os),e(Os,sde),e(sde,Y0o),e(Os,K0o),e(Os,$q),e($q,Z0o),e(Os,eFo),e(Os,kq),e(kq,oFo),e(Os,rFo),e(y,tFo),e(y,du),e(du,lde),e(lde,aFo),e(du,nFo),e(du,Sq),e(Sq,sFo),e(du,lFo),e(y,iFo),e(y,cu),e(cu,ide),e(ide,dFo),e(cu,cFo),e(cu,Rq),e(Rq,fFo),e(cu,mFo),e(y,gFo),e(y,fu),e(fu,dde),e(dde,hFo),e(fu,pFo),e(fu,Pq),e(Pq,uFo),e(fu,_Fo),e(y,bFo),e(y,mu),e(mu,cde),e(cde,vFo),e(mu,FFo),e(mu,Bq),e(Bq,TFo),e(mu,MFo),e(y,EFo),e(y,gu),e(gu,fde),e(fde,CFo),e(gu,wFo),e(gu,Iq),e(Iq,AFo),e(gu,LFo),e(y,yFo),e(y,hu),e(hu,mde),e(mde,xFo),e(hu,$Fo),e(hu,Nq),e(Nq,kFo),e(hu,SFo),e(y,RFo),e(y,pu),e(pu,gde),e(gde,PFo),e(pu,BFo),e(pu,qq),e(qq,IFo),e(pu,NFo),e(y,qFo),e(y,uu),e(uu,hde),e(hde,jFo),e(uu,DFo),e(uu,jq),e(jq,GFo),e(uu,OFo),e(y,VFo),e(y,_u),e(_u,pde),e(pde,XFo),e(_u,zFo),e(_u,Dq),e(Dq,WFo),e(_u,QFo),e(y,HFo),e(y,bu),e(bu,ude),e(ude,UFo),e(bu,JFo),e(bu,Gq),e(Gq,YFo),e(bu,KFo),e(y,ZFo),e(y,vu),e(vu,_de),e(_de,eTo),e(vu,oTo),e(vu,Oq),e(Oq,rTo),e(vu,tTo),e(y,aTo),e(y,Fu),e(Fu,bde),e(bde,nTo),e(Fu,sTo),e(Fu,Vq),e(Vq,lTo),e(Fu,iTo),e(y,dTo),e(y,Tu),e(Tu,vde),e(vde,cTo),e(Tu,fTo),e(Tu,Xq),e(Xq,mTo),e(Tu,gTo),e(y,hTo),e(y,Mu),e(Mu,Fde),e(Fde,pTo),e(Mu,uTo),e(Mu,zq),e(zq,_To),e(Mu,bTo),e(y,vTo),e(y,Eu),e(Eu,Tde),e(Tde,FTo),e(Eu,TTo),e(Eu,Wq),e(Wq,MTo),e(Eu,ETo),e(y,CTo),e(y,Cu),e(Cu,Mde),e(Mde,wTo),e(Cu,ATo),e(Cu,Qq),e(Qq,LTo),e(Cu,yTo),e(y,xTo),e(y,wu),e(wu,Ede),e(Ede,$To),e(wu,kTo),e(wu,Hq),e(Hq,STo),e(wu,RTo),e(y,PTo),e(y,Au),e(Au,Cde),e(Cde,BTo),e(Au,ITo),e(Au,Uq),e(Uq,NTo),e(Au,qTo),e(y,jTo),e(y,Lu),e(Lu,wde),e(wde,DTo),e(Lu,GTo),e(Lu,Jq),e(Jq,OTo),e(Lu,VTo),e(y,XTo),e(y,yu),e(yu,Ade),e(Ade,zTo),e(yu,WTo),e(yu,Yq),e(Yq,QTo),e(yu,HTo),e(y,UTo),e(y,xu),e(xu,Lde),e(Lde,JTo),e(xu,YTo),e(xu,Kq),e(Kq,KTo),e(xu,ZTo),e(y,e7o),e(y,$u),e($u,yde),e(yde,o7o),e($u,r7o),e($u,Zq),e(Zq,t7o),e($u,a7o),e(y,n7o),e(y,ku),e(ku,xde),e(xde,s7o),e(ku,l7o),e(ku,ej),e(ej,i7o),e(ku,d7o),e(y,c7o),e(y,Su),e(Su,$de),e($de,f7o),e(Su,m7o),e(Su,oj),e(oj,g7o),e(Su,h7o),e(y,p7o),e(y,Ru),e(Ru,kde),e(kde,u7o),e(Ru,_7o),e(Ru,rj),e(rj,b7o),e(Ru,v7o),e(y,F7o),e(y,Pu),e(Pu,Sde),e(Sde,T7o),e(Pu,M7o),e(Pu,tj),e(tj,E7o),e(Pu,C7o),e(y,w7o),e(y,Bu),e(Bu,Rde),e(Rde,A7o),e(Bu,L7o),e(Bu,aj),e(aj,y7o),e(Bu,x7o),e(y,$7o),e(y,Iu),e(Iu,Pde),e(Pde,k7o),e(Iu,S7o),e(Iu,nj),e(nj,R7o),e(Iu,P7o),e(y,B7o),e(y,Nu),e(Nu,Bde),e(Bde,I7o),e(Nu,N7o),e(Nu,sj),e(sj,q7o),e(Nu,j7o),e(y,D7o),e(y,qu),e(qu,Ide),e(Ide,G7o),e(qu,O7o),e(qu,lj),e(lj,V7o),e(qu,X7o),e(y,z7o),e(y,ju),e(ju,Nde),e(Nde,W7o),e(ju,Q7o),e(ju,ij),e(ij,H7o),e(ju,U7o),e(y,J7o),e(y,Du),e(Du,qde),e(qde,Y7o),e(Du,K7o),e(Du,dj),e(dj,Z7o),e(Du,e9o),e(y,o9o),e(y,Gu),e(Gu,jde),e(jde,r9o),e(Gu,t9o),e(Gu,cj),e(cj,a9o),e(Gu,n9o),e(y,s9o),e(y,Ou),e(Ou,Dde),e(Dde,l9o),e(Ou,i9o),e(Ou,fj),e(fj,d9o),e(Ou,c9o),e(y,f9o),e(y,Vu),e(Vu,Gde),e(Gde,m9o),e(Vu,g9o),e(Vu,mj),e(mj,h9o),e(Vu,p9o),e(y,u9o),e(y,Xu),e(Xu,Ode),e(Ode,_9o),e(Xu,b9o),e(Xu,gj),e(gj,v9o),e(Xu,F9o),e(y,T9o),e(y,zu),e(zu,Vde),e(Vde,M9o),e(zu,E9o),e(zu,hj),e(hj,C9o),e(zu,w9o),e(y,A9o),e(y,Wu),e(Wu,Xde),e(Xde,L9o),e(Wu,y9o),e(Wu,pj),e(pj,x9o),e(Wu,$9o),e(y,k9o),e(y,Qu),e(Qu,zde),e(zde,S9o),e(Qu,R9o),e(Qu,uj),e(uj,P9o),e(Qu,B9o),e(y,I9o),e(y,Hu),e(Hu,Wde),e(Wde,N9o),e(Hu,q9o),e(Hu,_j),e(_j,j9o),e(Hu,D9o),e(y,G9o),e(y,Uu),e(Uu,Qde),e(Qde,O9o),e(Uu,V9o),e(Uu,bj),e(bj,X9o),e(Uu,z9o),e(y,W9o),e(y,Ju),e(Ju,Hde),e(Hde,Q9o),e(Ju,H9o),e(Ju,vj),e(vj,U9o),e(Ju,J9o),e(y,Y9o),e(y,Yu),e(Yu,Ude),e(Ude,K9o),e(Yu,Z9o),e(Yu,Fj),e(Fj,eMo),e(Yu,oMo),e(y,rMo),e(y,Ku),e(Ku,Jde),e(Jde,tMo),e(Ku,aMo),e(Ku,Tj),e(Tj,nMo),e(Ku,sMo),e(y,lMo),e(y,Zu),e(Zu,Yde),e(Yde,iMo),e(Zu,dMo),e(Zu,Mj),e(Mj,cMo),e(Zu,fMo),e(y,mMo),e(y,e_),e(e_,Kde),e(Kde,gMo),e(e_,hMo),e(e_,Ej),e(Ej,pMo),e(e_,uMo),e(y,_Mo),e(y,o_),e(o_,Zde),e(Zde,bMo),e(o_,vMo),e(o_,Cj),e(Cj,FMo),e(o_,TMo),e(y,MMo),e(y,r_),e(r_,ece),e(ece,EMo),e(r_,CMo),e(r_,wj),e(wj,wMo),e(r_,AMo),e(y,LMo),e(y,t_),e(t_,oce),e(oce,yMo),e(t_,xMo),e(t_,Aj),e(Aj,$Mo),e(t_,kMo),e(y,SMo),e(y,a_),e(a_,rce),e(rce,RMo),e(a_,PMo),e(a_,Lj),e(Lj,BMo),e(a_,IMo),e(y,NMo),e(y,n_),e(n_,tce),e(tce,qMo),e(n_,jMo),e(n_,yj),e(yj,DMo),e(n_,GMo),e(y,OMo),e(y,s_),e(s_,ace),e(ace,VMo),e(s_,XMo),e(s_,xj),e(xj,zMo),e(s_,WMo),e(y,QMo),e(y,l_),e(l_,nce),e(nce,HMo),e(l_,UMo),e(l_,$j),e($j,JMo),e(l_,YMo),e(y,KMo),e(y,i_),e(i_,sce),e(sce,ZMo),e(i_,eEo),e(i_,kj),e(kj,oEo),e(i_,rEo),e(y,tEo),e(y,d_),e(d_,lce),e(lce,aEo),e(d_,nEo),e(d_,Sj),e(Sj,sEo),e(d_,lEo),e(y,iEo),e(y,c_),e(c_,ice),e(ice,dEo),e(c_,cEo),e(c_,Rj),e(Rj,fEo),e(c_,mEo),e(y,gEo),e(y,f_),e(f_,dce),e(dce,hEo),e(f_,pEo),e(f_,Pj),e(Pj,uEo),e(f_,_Eo),e(y,bEo),e(y,m_),e(m_,cce),e(cce,vEo),e(m_,FEo),e(m_,Bj),e(Bj,TEo),e(m_,MEo),e(y,EEo),e(y,g_),e(g_,fce),e(fce,CEo),e(g_,wEo),e(g_,Ij),e(Ij,AEo),e(g_,LEo),e(y,yEo),e(y,h_),e(h_,mce),e(mce,xEo),e(h_,$Eo),e(h_,Nj),e(Nj,kEo),e(h_,SEo),e(y,REo),e(y,p_),e(p_,gce),e(gce,PEo),e(p_,BEo),e(p_,qj),e(qj,IEo),e(p_,NEo),e(y,qEo),e(y,u_),e(u_,hce),e(hce,jEo),e(u_,DEo),e(u_,jj),e(jj,GEo),e(u_,OEo),e(y,VEo),e(y,__),e(__,pce),e(pce,XEo),e(__,zEo),e(__,Dj),e(Dj,WEo),e(__,QEo),e(y,HEo),e(y,b_),e(b_,uce),e(uce,UEo),e(b_,JEo),e(b_,Gj),e(Gj,YEo),e(b_,KEo),e(y,ZEo),e(y,v_),e(v_,_ce),e(_ce,e4o),e(v_,o4o),e(v_,Oj),e(Oj,r4o),e(v_,t4o),e(y,a4o),e(y,F_),e(F_,bce),e(bce,n4o),e(F_,s4o),e(F_,Vj),e(Vj,l4o),e(F_,i4o),e(y,d4o),e(y,T_),e(T_,vce),e(vce,c4o),e(T_,f4o),e(T_,Xj),e(Xj,m4o),e(T_,g4o),e(y,h4o),e(y,M_),e(M_,Fce),e(Fce,p4o),e(M_,u4o),e(M_,zj),e(zj,_4o),e(M_,b4o),e(y,v4o),e(y,E_),e(E_,Tce),e(Tce,F4o),e(E_,T4o),e(E_,Wj),e(Wj,M4o),e(E_,E4o),e(y,C4o),e(y,C_),e(C_,Mce),e(Mce,w4o),e(C_,A4o),e(C_,Qj),e(Qj,L4o),e(C_,y4o),e(y,x4o),e(y,w_),e(w_,Ece),e(Ece,$4o),e(w_,k4o),e(w_,Hj),e(Hj,S4o),e(w_,R4o),e(y,P4o),e(y,A_),e(A_,Cce),e(Cce,B4o),e(A_,I4o),e(A_,Uj),e(Uj,N4o),e(A_,q4o),e(y,j4o),e(y,L_),e(L_,wce),e(wce,D4o),e(L_,G4o),e(L_,Jj),e(Jj,O4o),e(L_,V4o),e(Je,X4o),e(Je,y_),e(y_,z4o),e(y_,Ace),e(Ace,W4o),e(y_,Q4o),e(y_,Lce),e(Lce,H4o),e(Je,U4o),M(x_,Je,null),b(f,AGe,_),b(f,qi,_),e(qi,$_),e($_,yce),M(Z6,yce,null),e(qi,J4o),e(qi,xce),e(xce,Y4o),b(f,LGe,_),b(f,$o,_),M(eL,$o,null),e($o,K4o),e($o,ji),e(ji,Z4o),e(ji,Yj),e(Yj,eCo),e(ji,oCo),e(ji,Kj),e(Kj,rCo),e(ji,tCo),e($o,aCo),e($o,oL),e(oL,nCo),e(oL,$ce),e($ce,sCo),e(oL,lCo),e($o,iCo),e($o,st),M(rL,st,null),e(st,dCo),e(st,kce),e(kce,cCo),e(st,fCo),e(st,Di),e(Di,mCo),e(Di,Sce),e(Sce,gCo),e(Di,hCo),e(Di,Zj),e(Zj,pCo),e(Di,uCo),e(st,_Co),M(k_,st,null),e($o,bCo),e($o,Ye),M(tL,Ye,null),e(Ye,vCo),e(Ye,Rce),e(Rce,FCo),e(Ye,TCo),e(Ye,Ra),e(Ra,MCo),e(Ra,Pce),e(Pce,ECo),e(Ra,CCo),e(Ra,Bce),e(Bce,wCo),e(Ra,ACo),e(Ra,Ice),e(Ice,LCo),e(Ra,yCo),e(Ye,xCo),e(Ye,G),e(G,S_),e(S_,Nce),e(Nce,$Co),e(S_,kCo),e(S_,eD),e(eD,SCo),e(S_,RCo),e(G,PCo),e(G,R_),e(R_,qce),e(qce,BCo),e(R_,ICo),e(R_,oD),e(oD,NCo),e(R_,qCo),e(G,jCo),e(G,P_),e(P_,jce),e(jce,DCo),e(P_,GCo),e(P_,rD),e(rD,OCo),e(P_,VCo),e(G,XCo),e(G,B_),e(B_,Dce),e(Dce,zCo),e(B_,WCo),e(B_,tD),e(tD,QCo),e(B_,HCo),e(G,UCo),e(G,I_),e(I_,Gce),e(Gce,JCo),e(I_,YCo),e(I_,aD),e(aD,KCo),e(I_,ZCo),e(G,e5o),e(G,N_),e(N_,Oce),e(Oce,o5o),e(N_,r5o),e(N_,nD),e(nD,t5o),e(N_,a5o),e(G,n5o),e(G,q_),e(q_,Vce),e(Vce,s5o),e(q_,l5o),e(q_,sD),e(sD,i5o),e(q_,d5o),e(G,c5o),e(G,j_),e(j_,Xce),e(Xce,f5o),e(j_,m5o),e(j_,lD),e(lD,g5o),e(j_,h5o),e(G,p5o),e(G,D_),e(D_,zce),e(zce,u5o),e(D_,_5o),e(D_,iD),e(iD,b5o),e(D_,v5o),e(G,F5o),e(G,G_),e(G_,Wce),e(Wce,T5o),e(G_,M5o),e(G_,dD),e(dD,E5o),e(G_,C5o),e(G,w5o),e(G,O_),e(O_,Qce),e(Qce,A5o),e(O_,L5o),e(O_,cD),e(cD,y5o),e(O_,x5o),e(G,$5o),e(G,V_),e(V_,Hce),e(Hce,k5o),e(V_,S5o),e(V_,fD),e(fD,R5o),e(V_,P5o),e(G,B5o),e(G,X_),e(X_,Uce),e(Uce,I5o),e(X_,N5o),e(X_,mD),e(mD,q5o),e(X_,j5o),e(G,D5o),e(G,z_),e(z_,Jce),e(Jce,G5o),e(z_,O5o),e(z_,gD),e(gD,V5o),e(z_,X5o),e(G,z5o),e(G,W_),e(W_,Yce),e(Yce,W5o),e(W_,Q5o),e(W_,hD),e(hD,H5o),e(W_,U5o),e(G,J5o),e(G,Q_),e(Q_,Kce),e(Kce,Y5o),e(Q_,K5o),e(Q_,pD),e(pD,Z5o),e(Q_,e3o),e(G,o3o),e(G,H_),e(H_,Zce),e(Zce,r3o),e(H_,t3o),e(H_,uD),e(uD,a3o),e(H_,n3o),e(G,s3o),e(G,U_),e(U_,efe),e(efe,l3o),e(U_,i3o),e(U_,_D),e(_D,d3o),e(U_,c3o),e(G,f3o),e(G,J_),e(J_,ofe),e(ofe,m3o),e(J_,g3o),e(J_,bD),e(bD,h3o),e(J_,p3o),e(G,u3o),e(G,Y_),e(Y_,rfe),e(rfe,_3o),e(Y_,b3o),e(Y_,vD),e(vD,v3o),e(Y_,F3o),e(G,T3o),e(G,K_),e(K_,tfe),e(tfe,M3o),e(K_,E3o),e(K_,FD),e(FD,C3o),e(K_,w3o),e(G,A3o),e(G,Z_),e(Z_,afe),e(afe,L3o),e(Z_,y3o),e(Z_,TD),e(TD,x3o),e(Z_,$3o),e(G,k3o),e(G,e1),e(e1,nfe),e(nfe,S3o),e(e1,R3o),e(e1,MD),e(MD,P3o),e(e1,B3o),e(G,I3o),e(G,o1),e(o1,sfe),e(sfe,N3o),e(o1,q3o),e(o1,ED),e(ED,j3o),e(o1,D3o),e(G,G3o),e(G,r1),e(r1,lfe),e(lfe,O3o),e(r1,V3o),e(r1,CD),e(CD,X3o),e(r1,z3o),e(G,W3o),e(G,t1),e(t1,ife),e(ife,Q3o),e(t1,H3o),e(t1,wD),e(wD,U3o),e(t1,J3o),e(G,Y3o),e(G,a1),e(a1,dfe),e(dfe,K3o),e(a1,Z3o),e(a1,AD),e(AD,ewo),e(a1,owo),e(G,rwo),e(G,n1),e(n1,cfe),e(cfe,two),e(n1,awo),e(n1,LD),e(LD,nwo),e(n1,swo),e(G,lwo),e(G,s1),e(s1,ffe),e(ffe,iwo),e(s1,dwo),e(s1,yD),e(yD,cwo),e(s1,fwo),e(G,mwo),e(G,l1),e(l1,mfe),e(mfe,gwo),e(l1,hwo),e(l1,xD),e(xD,pwo),e(l1,uwo),e(G,_wo),e(G,i1),e(i1,gfe),e(gfe,bwo),e(i1,vwo),e(i1,$D),e($D,Fwo),e(i1,Two),e(G,Mwo),e(G,d1),e(d1,hfe),e(hfe,Ewo),e(d1,Cwo),e(d1,kD),e(kD,wwo),e(d1,Awo),e(G,Lwo),e(G,c1),e(c1,pfe),e(pfe,ywo),e(c1,xwo),e(c1,SD),e(SD,$wo),e(c1,kwo),e(G,Swo),e(G,f1),e(f1,ufe),e(ufe,Rwo),e(f1,Pwo),e(f1,RD),e(RD,Bwo),e(f1,Iwo),e(G,Nwo),e(G,m1),e(m1,_fe),e(_fe,qwo),e(m1,jwo),e(m1,PD),e(PD,Dwo),e(m1,Gwo),e(G,Owo),e(G,g1),e(g1,bfe),e(bfe,Vwo),e(g1,Xwo),e(g1,BD),e(BD,zwo),e(g1,Wwo),e(G,Qwo),e(G,h1),e(h1,vfe),e(vfe,Hwo),e(h1,Uwo),e(h1,ID),e(ID,Jwo),e(h1,Ywo),e(G,Kwo),e(G,p1),e(p1,Ffe),e(Ffe,Zwo),e(p1,eAo),e(p1,ND),e(ND,oAo),e(p1,rAo),e(G,tAo),e(G,u1),e(u1,Tfe),e(Tfe,aAo),e(u1,nAo),e(u1,qD),e(qD,sAo),e(u1,lAo),e(G,iAo),e(G,_1),e(_1,Mfe),e(Mfe,dAo),e(_1,cAo),e(_1,jD),e(jD,fAo),e(_1,mAo),e(G,gAo),e(G,b1),e(b1,Efe),e(Efe,hAo),e(b1,pAo),e(b1,DD),e(DD,uAo),e(b1,_Ao),e(G,bAo),e(G,v1),e(v1,Cfe),e(Cfe,vAo),e(v1,FAo),e(v1,GD),e(GD,TAo),e(v1,MAo),e(G,EAo),e(G,F1),e(F1,wfe),e(wfe,CAo),e(F1,wAo),e(F1,OD),e(OD,AAo),e(F1,LAo),e(Ye,yAo),e(Ye,T1),e(T1,xAo),e(T1,Afe),e(Afe,$Ao),e(T1,kAo),e(T1,Lfe),e(Lfe,SAo),e(Ye,RAo),M(M1,Ye,null),b(f,yGe,_),b(f,Gi,_),e(Gi,E1),e(E1,yfe),M(aL,yfe,null),e(Gi,PAo),e(Gi,xfe),e(xfe,BAo),b(f,xGe,_),b(f,ko,_),M(nL,ko,null),e(ko,IAo),e(ko,Oi),e(Oi,NAo),e(Oi,VD),e(VD,qAo),e(Oi,jAo),e(Oi,XD),e(XD,DAo),e(Oi,GAo),e(ko,OAo),e(ko,sL),e(sL,VAo),e(sL,$fe),e($fe,XAo),e(sL,zAo),e(ko,WAo),e(ko,lt),M(lL,lt,null),e(lt,QAo),e(lt,kfe),e(kfe,HAo),e(lt,UAo),e(lt,Vi),e(Vi,JAo),e(Vi,Sfe),e(Sfe,YAo),e(Vi,KAo),e(Vi,zD),e(zD,ZAo),e(Vi,e6o),e(lt,o6o),M(C1,lt,null),e(ko,r6o),e(ko,Ke),M(iL,Ke,null),e(Ke,t6o),e(Ke,Rfe),e(Rfe,a6o),e(Ke,n6o),e(Ke,Pa),e(Pa,s6o),e(Pa,Pfe),e(Pfe,l6o),e(Pa,i6o),e(Pa,Bfe),e(Bfe,d6o),e(Pa,c6o),e(Pa,Ife),e(Ife,f6o),e(Pa,m6o),e(Ke,g6o),e(Ke,z),e(z,w1),e(w1,Nfe),e(Nfe,h6o),e(w1,p6o),e(w1,WD),e(WD,u6o),e(w1,_6o),e(z,b6o),e(z,A1),e(A1,qfe),e(qfe,v6o),e(A1,F6o),e(A1,QD),e(QD,T6o),e(A1,M6o),e(z,E6o),e(z,L1),e(L1,jfe),e(jfe,C6o),e(L1,w6o),e(L1,HD),e(HD,A6o),e(L1,L6o),e(z,y6o),e(z,y1),e(y1,Dfe),e(Dfe,x6o),e(y1,$6o),e(y1,UD),e(UD,k6o),e(y1,S6o),e(z,R6o),e(z,x1),e(x1,Gfe),e(Gfe,P6o),e(x1,B6o),e(x1,JD),e(JD,I6o),e(x1,N6o),e(z,q6o),e(z,$1),e($1,Ofe),e(Ofe,j6o),e($1,D6o),e($1,YD),e(YD,G6o),e($1,O6o),e(z,V6o),e(z,k1),e(k1,Vfe),e(Vfe,X6o),e(k1,z6o),e(k1,KD),e(KD,W6o),e(k1,Q6o),e(z,H6o),e(z,S1),e(S1,Xfe),e(Xfe,U6o),e(S1,J6o),e(S1,ZD),e(ZD,Y6o),e(S1,K6o),e(z,Z6o),e(z,R1),e(R1,zfe),e(zfe,eLo),e(R1,oLo),e(R1,eG),e(eG,rLo),e(R1,tLo),e(z,aLo),e(z,P1),e(P1,Wfe),e(Wfe,nLo),e(P1,sLo),e(P1,oG),e(oG,lLo),e(P1,iLo),e(z,dLo),e(z,B1),e(B1,Qfe),e(Qfe,cLo),e(B1,fLo),e(B1,rG),e(rG,mLo),e(B1,gLo),e(z,hLo),e(z,I1),e(I1,Hfe),e(Hfe,pLo),e(I1,uLo),e(I1,tG),e(tG,_Lo),e(I1,bLo),e(z,vLo),e(z,N1),e(N1,Ufe),e(Ufe,FLo),e(N1,TLo),e(N1,aG),e(aG,MLo),e(N1,ELo),e(z,CLo),e(z,q1),e(q1,Jfe),e(Jfe,wLo),e(q1,ALo),e(q1,nG),e(nG,LLo),e(q1,yLo),e(z,xLo),e(z,j1),e(j1,Yfe),e(Yfe,$Lo),e(j1,kLo),e(j1,sG),e(sG,SLo),e(j1,RLo),e(z,PLo),e(z,D1),e(D1,Kfe),e(Kfe,BLo),e(D1,ILo),e(D1,lG),e(lG,NLo),e(D1,qLo),e(z,jLo),e(z,G1),e(G1,Zfe),e(Zfe,DLo),e(G1,GLo),e(G1,iG),e(iG,OLo),e(G1,VLo),e(z,XLo),e(z,O1),e(O1,eme),e(eme,zLo),e(O1,WLo),e(O1,dG),e(dG,QLo),e(O1,HLo),e(z,ULo),e(z,V1),e(V1,ome),e(ome,JLo),e(V1,YLo),e(V1,cG),e(cG,KLo),e(V1,ZLo),e(z,eyo),e(z,X1),e(X1,rme),e(rme,oyo),e(X1,ryo),e(X1,fG),e(fG,tyo),e(X1,ayo),e(z,nyo),e(z,z1),e(z1,tme),e(tme,syo),e(z1,lyo),e(z1,mG),e(mG,iyo),e(z1,dyo),e(z,cyo),e(z,W1),e(W1,ame),e(ame,fyo),e(W1,myo),e(W1,gG),e(gG,gyo),e(W1,hyo),e(z,pyo),e(z,Q1),e(Q1,nme),e(nme,uyo),e(Q1,_yo),e(Q1,hG),e(hG,byo),e(Q1,vyo),e(z,Fyo),e(z,H1),e(H1,sme),e(sme,Tyo),e(H1,Myo),e(H1,pG),e(pG,Eyo),e(H1,Cyo),e(z,wyo),e(z,U1),e(U1,lme),e(lme,Ayo),e(U1,Lyo),e(U1,uG),e(uG,yyo),e(U1,xyo),e(z,$yo),e(z,J1),e(J1,ime),e(ime,kyo),e(J1,Syo),e(J1,_G),e(_G,Ryo),e(J1,Pyo),e(z,Byo),e(z,Y1),e(Y1,dme),e(dme,Iyo),e(Y1,Nyo),e(Y1,bG),e(bG,qyo),e(Y1,jyo),e(z,Dyo),e(z,K1),e(K1,cme),e(cme,Gyo),e(K1,Oyo),e(K1,vG),e(vG,Vyo),e(K1,Xyo),e(z,zyo),e(z,Z1),e(Z1,fme),e(fme,Wyo),e(Z1,Qyo),e(Z1,FG),e(FG,Hyo),e(Z1,Uyo),e(z,Jyo),e(z,e2),e(e2,mme),e(mme,Yyo),e(e2,Kyo),e(e2,TG),e(TG,Zyo),e(e2,e8o),e(z,o8o),e(z,o2),e(o2,gme),e(gme,r8o),e(o2,t8o),e(o2,MG),e(MG,a8o),e(o2,n8o),e(z,s8o),e(z,r2),e(r2,hme),e(hme,l8o),e(r2,i8o),e(r2,EG),e(EG,d8o),e(r2,c8o),e(z,f8o),e(z,t2),e(t2,pme),e(pme,m8o),e(t2,g8o),e(t2,CG),e(CG,h8o),e(t2,p8o),e(z,u8o),e(z,a2),e(a2,ume),e(ume,_8o),e(a2,b8o),e(a2,wG),e(wG,v8o),e(a2,F8o),e(z,T8o),e(z,n2),e(n2,_me),e(_me,M8o),e(n2,E8o),e(n2,AG),e(AG,C8o),e(n2,w8o),e(z,A8o),e(z,s2),e(s2,bme),e(bme,L8o),e(s2,y8o),e(s2,LG),e(LG,x8o),e(s2,$8o),e(z,k8o),e(z,l2),e(l2,vme),e(vme,S8o),e(l2,R8o),e(l2,yG),e(yG,P8o),e(l2,B8o),e(z,I8o),e(z,i2),e(i2,Fme),e(Fme,N8o),e(i2,q8o),e(i2,xG),e(xG,j8o),e(i2,D8o),e(Ke,G8o),e(Ke,d2),e(d2,O8o),e(d2,Tme),e(Tme,V8o),e(d2,X8o),e(d2,Mme),e(Mme,z8o),e(Ke,W8o),M(c2,Ke,null),b(f,$Ge,_),b(f,Xi,_),e(Xi,f2),e(f2,Eme),M(dL,Eme,null),e(Xi,Q8o),e(Xi,Cme),e(Cme,H8o),b(f,kGe,_),b(f,So,_),M(cL,So,null),e(So,U8o),e(So,zi),e(zi,J8o),e(zi,$G),e($G,Y8o),e(zi,K8o),e(zi,kG),e(kG,Z8o),e(zi,exo),e(So,oxo),e(So,fL),e(fL,rxo),e(fL,wme),e(wme,txo),e(fL,axo),e(So,nxo),e(So,it),M(mL,it,null),e(it,sxo),e(it,Ame),e(Ame,lxo),e(it,ixo),e(it,Wi),e(Wi,dxo),e(Wi,Lme),e(Lme,cxo),e(Wi,fxo),e(Wi,SG),e(SG,mxo),e(Wi,gxo),e(it,hxo),M(m2,it,null),e(So,pxo),e(So,Ze),M(gL,Ze,null),e(Ze,uxo),e(Ze,yme),e(yme,_xo),e(Ze,bxo),e(Ze,Ba),e(Ba,vxo),e(Ba,xme),e(xme,Fxo),e(Ba,Txo),e(Ba,$me),e($me,Mxo),e(Ba,Exo),e(Ba,kme),e(kme,Cxo),e(Ba,wxo),e(Ze,Axo),e(Ze,Q),e(Q,g2),e(g2,Sme),e(Sme,Lxo),e(g2,yxo),e(g2,RG),e(RG,xxo),e(g2,$xo),e(Q,kxo),e(Q,h2),e(h2,Rme),e(Rme,Sxo),e(h2,Rxo),e(h2,PG),e(PG,Pxo),e(h2,Bxo),e(Q,Ixo),e(Q,p2),e(p2,Pme),e(Pme,Nxo),e(p2,qxo),e(p2,BG),e(BG,jxo),e(p2,Dxo),e(Q,Gxo),e(Q,u2),e(u2,Bme),e(Bme,Oxo),e(u2,Vxo),e(u2,IG),e(IG,Xxo),e(u2,zxo),e(Q,Wxo),e(Q,_2),e(_2,Ime),e(Ime,Qxo),e(_2,Hxo),e(_2,NG),e(NG,Uxo),e(_2,Jxo),e(Q,Yxo),e(Q,b2),e(b2,Nme),e(Nme,Kxo),e(b2,Zxo),e(b2,qG),e(qG,e$o),e(b2,o$o),e(Q,r$o),e(Q,v2),e(v2,qme),e(qme,t$o),e(v2,a$o),e(v2,jG),e(jG,n$o),e(v2,s$o),e(Q,l$o),e(Q,F2),e(F2,jme),e(jme,i$o),e(F2,d$o),e(F2,DG),e(DG,c$o),e(F2,f$o),e(Q,m$o),e(Q,T2),e(T2,Dme),e(Dme,g$o),e(T2,h$o),e(T2,GG),e(GG,p$o),e(T2,u$o),e(Q,_$o),e(Q,M2),e(M2,Gme),e(Gme,b$o),e(M2,v$o),e(M2,OG),e(OG,F$o),e(M2,T$o),e(Q,M$o),e(Q,E2),e(E2,Ome),e(Ome,E$o),e(E2,C$o),e(E2,VG),e(VG,w$o),e(E2,A$o),e(Q,L$o),e(Q,C2),e(C2,Vme),e(Vme,y$o),e(C2,x$o),e(C2,XG),e(XG,$$o),e(C2,k$o),e(Q,S$o),e(Q,w2),e(w2,Xme),e(Xme,R$o),e(w2,P$o),e(w2,zG),e(zG,B$o),e(w2,I$o),e(Q,N$o),e(Q,A2),e(A2,zme),e(zme,q$o),e(A2,j$o),e(A2,WG),e(WG,D$o),e(A2,G$o),e(Q,O$o),e(Q,L2),e(L2,Wme),e(Wme,V$o),e(L2,X$o),e(L2,QG),e(QG,z$o),e(L2,W$o),e(Q,Q$o),e(Q,y2),e(y2,Qme),e(Qme,H$o),e(y2,U$o),e(y2,HG),e(HG,J$o),e(y2,Y$o),e(Q,K$o),e(Q,x2),e(x2,Hme),e(Hme,Z$o),e(x2,eko),e(x2,UG),e(UG,oko),e(x2,rko),e(Q,tko),e(Q,$2),e($2,Ume),e(Ume,ako),e($2,nko),e($2,JG),e(JG,sko),e($2,lko),e(Q,iko),e(Q,k2),e(k2,Jme),e(Jme,dko),e(k2,cko),e(k2,YG),e(YG,fko),e(k2,mko),e(Q,gko),e(Q,S2),e(S2,Yme),e(Yme,hko),e(S2,pko),e(S2,KG),e(KG,uko),e(S2,_ko),e(Q,bko),e(Q,R2),e(R2,Kme),e(Kme,vko),e(R2,Fko),e(R2,ZG),e(ZG,Tko),e(R2,Mko),e(Q,Eko),e(Q,P2),e(P2,Zme),e(Zme,Cko),e(P2,wko),e(P2,eO),e(eO,Ako),e(P2,Lko),e(Q,yko),e(Q,B2),e(B2,ege),e(ege,xko),e(B2,$ko),e(B2,oO),e(oO,kko),e(B2,Sko),e(Q,Rko),e(Q,I2),e(I2,oge),e(oge,Pko),e(I2,Bko),e(I2,rO),e(rO,Iko),e(I2,Nko),e(Q,qko),e(Q,N2),e(N2,rge),e(rge,jko),e(N2,Dko),e(N2,tO),e(tO,Gko),e(N2,Oko),e(Q,Vko),e(Q,q2),e(q2,tge),e(tge,Xko),e(q2,zko),e(q2,aO),e(aO,Wko),e(q2,Qko),e(Q,Hko),e(Q,j2),e(j2,age),e(age,Uko),e(j2,Jko),e(j2,nO),e(nO,Yko),e(j2,Kko),e(Q,Zko),e(Q,D2),e(D2,nge),e(nge,eSo),e(D2,oSo),e(D2,sO),e(sO,rSo),e(D2,tSo),e(Q,aSo),e(Q,G2),e(G2,sge),e(sge,nSo),e(G2,sSo),e(G2,lO),e(lO,lSo),e(G2,iSo),e(Q,dSo),e(Q,O2),e(O2,lge),e(lge,cSo),e(O2,fSo),e(O2,iO),e(iO,mSo),e(O2,gSo),e(Q,hSo),e(Q,V2),e(V2,ige),e(ige,pSo),e(V2,uSo),e(V2,dO),e(dO,_So),e(V2,bSo),e(Q,vSo),e(Q,X2),e(X2,dge),e(dge,FSo),e(X2,TSo),e(X2,cge),e(cge,MSo),e(X2,ESo),e(Q,CSo),e(Q,z2),e(z2,fge),e(fge,wSo),e(z2,ASo),e(z2,cO),e(cO,LSo),e(z2,ySo),e(Q,xSo),e(Q,W2),e(W2,mge),e(mge,$So),e(W2,kSo),e(W2,fO),e(fO,SSo),e(W2,RSo),e(Q,PSo),e(Q,Q2),e(Q2,gge),e(gge,BSo),e(Q2,ISo),e(Q2,mO),e(mO,NSo),e(Q2,qSo),e(Q,jSo),e(Q,H2),e(H2,hge),e(hge,DSo),e(H2,GSo),e(H2,gO),e(gO,OSo),e(H2,VSo),e(Ze,XSo),e(Ze,U2),e(U2,zSo),e(U2,pge),e(pge,WSo),e(U2,QSo),e(U2,uge),e(uge,HSo),e(Ze,USo),M(J2,Ze,null),b(f,SGe,_),b(f,Qi,_),e(Qi,Y2),e(Y2,_ge),M(hL,_ge,null),e(Qi,JSo),e(Qi,bge),e(bge,YSo),b(f,RGe,_),b(f,Ro,_),M(pL,Ro,null),e(Ro,KSo),e(Ro,Hi),e(Hi,ZSo),e(Hi,hO),e(hO,eRo),e(Hi,oRo),e(Hi,pO),e(pO,rRo),e(Hi,tRo),e(Ro,aRo),e(Ro,uL),e(uL,nRo),e(uL,vge),e(vge,sRo),e(uL,lRo),e(Ro,iRo),e(Ro,dt),M(_L,dt,null),e(dt,dRo),e(dt,Fge),e(Fge,cRo),e(dt,fRo),e(dt,Ui),e(Ui,mRo),e(Ui,Tge),e(Tge,gRo),e(Ui,hRo),e(Ui,uO),e(uO,pRo),e(Ui,uRo),e(dt,_Ro),M(K2,dt,null),e(Ro,bRo),e(Ro,eo),M(bL,eo,null),e(eo,vRo),e(eo,Mge),e(Mge,FRo),e(eo,TRo),e(eo,Ia),e(Ia,MRo),e(Ia,Ege),e(Ege,ERo),e(Ia,CRo),e(Ia,Cge),e(Cge,wRo),e(Ia,ARo),e(Ia,wge),e(wge,LRo),e(Ia,yRo),e(eo,xRo),e(eo,pe),e(pe,Z2),e(Z2,Age),e(Age,$Ro),e(Z2,kRo),e(Z2,_O),e(_O,SRo),e(Z2,RRo),e(pe,PRo),e(pe,eb),e(eb,Lge),e(Lge,BRo),e(eb,IRo),e(eb,bO),e(bO,NRo),e(eb,qRo),e(pe,jRo),e(pe,ob),e(ob,yge),e(yge,DRo),e(ob,GRo),e(ob,vO),e(vO,ORo),e(ob,VRo),e(pe,XRo),e(pe,rb),e(rb,xge),e(xge,zRo),e(rb,WRo),e(rb,FO),e(FO,QRo),e(rb,HRo),e(pe,URo),e(pe,tb),e(tb,$ge),e($ge,JRo),e(tb,YRo),e(tb,TO),e(TO,KRo),e(tb,ZRo),e(pe,ePo),e(pe,ab),e(ab,kge),e(kge,oPo),e(ab,rPo),e(ab,MO),e(MO,tPo),e(ab,aPo),e(pe,nPo),e(pe,nb),e(nb,Sge),e(Sge,sPo),e(nb,lPo),e(nb,EO),e(EO,iPo),e(nb,dPo),e(pe,cPo),e(pe,sb),e(sb,Rge),e(Rge,fPo),e(sb,mPo),e(sb,CO),e(CO,gPo),e(sb,hPo),e(pe,pPo),e(pe,lb),e(lb,Pge),e(Pge,uPo),e(lb,_Po),e(lb,wO),e(wO,bPo),e(lb,vPo),e(pe,FPo),e(pe,ib),e(ib,Bge),e(Bge,TPo),e(ib,MPo),e(ib,AO),e(AO,EPo),e(ib,CPo),e(pe,wPo),e(pe,db),e(db,Ige),e(Ige,APo),e(db,LPo),e(db,LO),e(LO,yPo),e(db,xPo),e(pe,$Po),e(pe,cb),e(cb,Nge),e(Nge,kPo),e(cb,SPo),e(cb,yO),e(yO,RPo),e(cb,PPo),e(pe,BPo),e(pe,fb),e(fb,qge),e(qge,IPo),e(fb,NPo),e(fb,xO),e(xO,qPo),e(fb,jPo),e(pe,DPo),e(pe,mb),e(mb,jge),e(jge,GPo),e(mb,OPo),e(mb,$O),e($O,VPo),e(mb,XPo),e(pe,zPo),e(pe,gb),e(gb,Dge),e(Dge,WPo),e(gb,QPo),e(gb,kO),e(kO,HPo),e(gb,UPo),e(pe,JPo),e(pe,hb),e(hb,Gge),e(Gge,YPo),e(hb,KPo),e(hb,SO),e(SO,ZPo),e(hb,eBo),e(pe,oBo),e(pe,pb),e(pb,Oge),e(Oge,rBo),e(pb,tBo),e(pb,RO),e(RO,aBo),e(pb,nBo),e(eo,sBo),e(eo,ub),e(ub,lBo),e(ub,Vge),e(Vge,iBo),e(ub,dBo),e(ub,Xge),e(Xge,cBo),e(eo,fBo),M(_b,eo,null),b(f,PGe,_),b(f,Ji,_),e(Ji,bb),e(bb,zge),M(vL,zge,null),e(Ji,mBo),e(Ji,Wge),e(Wge,gBo),b(f,BGe,_),b(f,Po,_),M(FL,Po,null),e(Po,hBo),e(Po,Yi),e(Yi,pBo),e(Yi,PO),e(PO,uBo),e(Yi,_Bo),e(Yi,BO),e(BO,bBo),e(Yi,vBo),e(Po,FBo),e(Po,TL),e(TL,TBo),e(TL,Qge),e(Qge,MBo),e(TL,EBo),e(Po,CBo),e(Po,ct),M(ML,ct,null),e(ct,wBo),e(ct,Hge),e(Hge,ABo),e(ct,LBo),e(ct,Ki),e(Ki,yBo),e(Ki,Uge),e(Uge,xBo),e(Ki,$Bo),e(Ki,IO),e(IO,kBo),e(Ki,SBo),e(ct,RBo),M(vb,ct,null),e(Po,PBo),e(Po,oo),M(EL,oo,null),e(oo,BBo),e(oo,Jge),e(Jge,IBo),e(oo,NBo),e(oo,Na),e(Na,qBo),e(Na,Yge),e(Yge,jBo),e(Na,DBo),e(Na,Kge),e(Kge,GBo),e(Na,OBo),e(Na,Zge),e(Zge,VBo),e(Na,XBo),e(oo,zBo),e(oo,N),e(N,Fb),e(Fb,ehe),e(ehe,WBo),e(Fb,QBo),e(Fb,NO),e(NO,HBo),e(Fb,UBo),e(N,JBo),e(N,Tb),e(Tb,ohe),e(ohe,YBo),e(Tb,KBo),e(Tb,qO),e(qO,ZBo),e(Tb,eIo),e(N,oIo),e(N,Mb),e(Mb,rhe),e(rhe,rIo),e(Mb,tIo),e(Mb,jO),e(jO,aIo),e(Mb,nIo),e(N,sIo),e(N,Eb),e(Eb,the),e(the,lIo),e(Eb,iIo),e(Eb,DO),e(DO,dIo),e(Eb,cIo),e(N,fIo),e(N,Cb),e(Cb,ahe),e(ahe,mIo),e(Cb,gIo),e(Cb,GO),e(GO,hIo),e(Cb,pIo),e(N,uIo),e(N,wb),e(wb,nhe),e(nhe,_Io),e(wb,bIo),e(wb,OO),e(OO,vIo),e(wb,FIo),e(N,TIo),e(N,Ab),e(Ab,she),e(she,MIo),e(Ab,EIo),e(Ab,VO),e(VO,CIo),e(Ab,wIo),e(N,AIo),e(N,Lb),e(Lb,lhe),e(lhe,LIo),e(Lb,yIo),e(Lb,XO),e(XO,xIo),e(Lb,$Io),e(N,kIo),e(N,yb),e(yb,ihe),e(ihe,SIo),e(yb,RIo),e(yb,zO),e(zO,PIo),e(yb,BIo),e(N,IIo),e(N,xb),e(xb,dhe),e(dhe,NIo),e(xb,qIo),e(xb,WO),e(WO,jIo),e(xb,DIo),e(N,GIo),e(N,$b),e($b,che),e(che,OIo),e($b,VIo),e($b,QO),e(QO,XIo),e($b,zIo),e(N,WIo),e(N,kb),e(kb,fhe),e(fhe,QIo),e(kb,HIo),e(kb,HO),e(HO,UIo),e(kb,JIo),e(N,YIo),e(N,Sb),e(Sb,mhe),e(mhe,KIo),e(Sb,ZIo),e(Sb,UO),e(UO,eNo),e(Sb,oNo),e(N,rNo),e(N,Rb),e(Rb,ghe),e(ghe,tNo),e(Rb,aNo),e(Rb,JO),e(JO,nNo),e(Rb,sNo),e(N,lNo),e(N,Pb),e(Pb,hhe),e(hhe,iNo),e(Pb,dNo),e(Pb,YO),e(YO,cNo),e(Pb,fNo),e(N,mNo),e(N,Bb),e(Bb,phe),e(phe,gNo),e(Bb,hNo),e(Bb,KO),e(KO,pNo),e(Bb,uNo),e(N,_No),e(N,Ib),e(Ib,uhe),e(uhe,bNo),e(Ib,vNo),e(Ib,ZO),e(ZO,FNo),e(Ib,TNo),e(N,MNo),e(N,Nb),e(Nb,_he),e(_he,ENo),e(Nb,CNo),e(Nb,eV),e(eV,wNo),e(Nb,ANo),e(N,LNo),e(N,qb),e(qb,bhe),e(bhe,yNo),e(qb,xNo),e(qb,oV),e(oV,$No),e(qb,kNo),e(N,SNo),e(N,jb),e(jb,vhe),e(vhe,RNo),e(jb,PNo),e(jb,rV),e(rV,BNo),e(jb,INo),e(N,NNo),e(N,Db),e(Db,Fhe),e(Fhe,qNo),e(Db,jNo),e(Db,tV),e(tV,DNo),e(Db,GNo),e(N,ONo),e(N,Gb),e(Gb,The),e(The,VNo),e(Gb,XNo),e(Gb,aV),e(aV,zNo),e(Gb,WNo),e(N,QNo),e(N,Ob),e(Ob,Mhe),e(Mhe,HNo),e(Ob,UNo),e(Ob,nV),e(nV,JNo),e(Ob,YNo),e(N,KNo),e(N,Vb),e(Vb,Ehe),e(Ehe,ZNo),e(Vb,eqo),e(Vb,sV),e(sV,oqo),e(Vb,rqo),e(N,tqo),e(N,Xb),e(Xb,Che),e(Che,aqo),e(Xb,nqo),e(Xb,lV),e(lV,sqo),e(Xb,lqo),e(N,iqo),e(N,zb),e(zb,whe),e(whe,dqo),e(zb,cqo),e(zb,iV),e(iV,fqo),e(zb,mqo),e(N,gqo),e(N,Wb),e(Wb,Ahe),e(Ahe,hqo),e(Wb,pqo),e(Wb,dV),e(dV,uqo),e(Wb,_qo),e(N,bqo),e(N,Qb),e(Qb,Lhe),e(Lhe,vqo),e(Qb,Fqo),e(Qb,cV),e(cV,Tqo),e(Qb,Mqo),e(N,Eqo),e(N,Hb),e(Hb,yhe),e(yhe,Cqo),e(Hb,wqo),e(Hb,fV),e(fV,Aqo),e(Hb,Lqo),e(N,yqo),e(N,Ub),e(Ub,xhe),e(xhe,xqo),e(Ub,$qo),e(Ub,mV),e(mV,kqo),e(Ub,Sqo),e(N,Rqo),e(N,Jb),e(Jb,$he),e($he,Pqo),e(Jb,Bqo),e(Jb,gV),e(gV,Iqo),e(Jb,Nqo),e(N,qqo),e(N,Yb),e(Yb,khe),e(khe,jqo),e(Yb,Dqo),e(Yb,hV),e(hV,Gqo),e(Yb,Oqo),e(N,Vqo),e(N,Kb),e(Kb,She),e(She,Xqo),e(Kb,zqo),e(Kb,pV),e(pV,Wqo),e(Kb,Qqo),e(N,Hqo),e(N,Zb),e(Zb,Rhe),e(Rhe,Uqo),e(Zb,Jqo),e(Zb,uV),e(uV,Yqo),e(Zb,Kqo),e(N,Zqo),e(N,ev),e(ev,Phe),e(Phe,ejo),e(ev,ojo),e(ev,_V),e(_V,rjo),e(ev,tjo),e(N,ajo),e(N,ov),e(ov,Bhe),e(Bhe,njo),e(ov,sjo),e(ov,bV),e(bV,ljo),e(ov,ijo),e(N,djo),e(N,rv),e(rv,Ihe),e(Ihe,cjo),e(rv,fjo),e(rv,vV),e(vV,mjo),e(rv,gjo),e(N,hjo),e(N,tv),e(tv,Nhe),e(Nhe,pjo),e(tv,ujo),e(tv,FV),e(FV,_jo),e(tv,bjo),e(N,vjo),e(N,av),e(av,qhe),e(qhe,Fjo),e(av,Tjo),e(av,TV),e(TV,Mjo),e(av,Ejo),e(N,Cjo),e(N,nv),e(nv,jhe),e(jhe,wjo),e(nv,Ajo),e(nv,MV),e(MV,Ljo),e(nv,yjo),e(N,xjo),e(N,sv),e(sv,Dhe),e(Dhe,$jo),e(sv,kjo),e(sv,EV),e(EV,Sjo),e(sv,Rjo),e(N,Pjo),e(N,lv),e(lv,Ghe),e(Ghe,Bjo),e(lv,Ijo),e(lv,CV),e(CV,Njo),e(lv,qjo),e(N,jjo),e(N,iv),e(iv,Ohe),e(Ohe,Djo),e(iv,Gjo),e(iv,wV),e(wV,Ojo),e(iv,Vjo),e(N,Xjo),e(N,dv),e(dv,Vhe),e(Vhe,zjo),e(dv,Wjo),e(dv,AV),e(AV,Qjo),e(dv,Hjo),e(N,Ujo),e(N,cv),e(cv,Xhe),e(Xhe,Jjo),e(cv,Yjo),e(cv,LV),e(LV,Kjo),e(cv,Zjo),e(N,eDo),e(N,fv),e(fv,zhe),e(zhe,oDo),e(fv,rDo),e(fv,yV),e(yV,tDo),e(fv,aDo),e(N,nDo),e(N,mv),e(mv,Whe),e(Whe,sDo),e(mv,lDo),e(mv,xV),e(xV,iDo),e(mv,dDo),e(N,cDo),e(N,gv),e(gv,Qhe),e(Qhe,fDo),e(gv,mDo),e(gv,$V),e($V,gDo),e(gv,hDo),e(oo,pDo),e(oo,hv),e(hv,uDo),e(hv,Hhe),e(Hhe,_Do),e(hv,bDo),e(hv,Uhe),e(Uhe,vDo),e(oo,FDo),M(pv,oo,null),b(f,IGe,_),b(f,Zi,_),e(Zi,uv),e(uv,Jhe),M(CL,Jhe,null),e(Zi,TDo),e(Zi,Yhe),e(Yhe,MDo),b(f,NGe,_),b(f,Bo,_),M(wL,Bo,null),e(Bo,EDo),e(Bo,ed),e(ed,CDo),e(ed,kV),e(kV,wDo),e(ed,ADo),e(ed,SV),e(SV,LDo),e(ed,yDo),e(Bo,xDo),e(Bo,AL),e(AL,$Do),e(AL,Khe),e(Khe,kDo),e(AL,SDo),e(Bo,RDo),e(Bo,ft),M(LL,ft,null),e(ft,PDo),e(ft,Zhe),e(Zhe,BDo),e(ft,IDo),e(ft,od),e(od,NDo),e(od,epe),e(epe,qDo),e(od,jDo),e(od,RV),e(RV,DDo),e(od,GDo),e(ft,ODo),M(_v,ft,null),e(Bo,VDo),e(Bo,ro),M(yL,ro,null),e(ro,XDo),e(ro,ope),e(ope,zDo),e(ro,WDo),e(ro,qa),e(qa,QDo),e(qa,rpe),e(rpe,HDo),e(qa,UDo),e(qa,tpe),e(tpe,JDo),e(qa,YDo),e(qa,ape),e(ape,KDo),e(qa,ZDo),e(ro,eGo),e(ro,Z),e(Z,bv),e(bv,npe),e(npe,oGo),e(bv,rGo),e(bv,PV),e(PV,tGo),e(bv,aGo),e(Z,nGo),e(Z,vv),e(vv,spe),e(spe,sGo),e(vv,lGo),e(vv,BV),e(BV,iGo),e(vv,dGo),e(Z,cGo),e(Z,Fv),e(Fv,lpe),e(lpe,fGo),e(Fv,mGo),e(Fv,IV),e(IV,gGo),e(Fv,hGo),e(Z,pGo),e(Z,Tv),e(Tv,ipe),e(ipe,uGo),e(Tv,_Go),e(Tv,NV),e(NV,bGo),e(Tv,vGo),e(Z,FGo),e(Z,Mv),e(Mv,dpe),e(dpe,TGo),e(Mv,MGo),e(Mv,qV),e(qV,EGo),e(Mv,CGo),e(Z,wGo),e(Z,Ev),e(Ev,cpe),e(cpe,AGo),e(Ev,LGo),e(Ev,jV),e(jV,yGo),e(Ev,xGo),e(Z,$Go),e(Z,Cv),e(Cv,fpe),e(fpe,kGo),e(Cv,SGo),e(Cv,DV),e(DV,RGo),e(Cv,PGo),e(Z,BGo),e(Z,wv),e(wv,mpe),e(mpe,IGo),e(wv,NGo),e(wv,GV),e(GV,qGo),e(wv,jGo),e(Z,DGo),e(Z,Av),e(Av,gpe),e(gpe,GGo),e(Av,OGo),e(Av,OV),e(OV,VGo),e(Av,XGo),e(Z,zGo),e(Z,Lv),e(Lv,hpe),e(hpe,WGo),e(Lv,QGo),e(Lv,VV),e(VV,HGo),e(Lv,UGo),e(Z,JGo),e(Z,yv),e(yv,ppe),e(ppe,YGo),e(yv,KGo),e(yv,XV),e(XV,ZGo),e(yv,eOo),e(Z,oOo),e(Z,xv),e(xv,upe),e(upe,rOo),e(xv,tOo),e(xv,zV),e(zV,aOo),e(xv,nOo),e(Z,sOo),e(Z,$v),e($v,_pe),e(_pe,lOo),e($v,iOo),e($v,WV),e(WV,dOo),e($v,cOo),e(Z,fOo),e(Z,kv),e(kv,bpe),e(bpe,mOo),e(kv,gOo),e(kv,QV),e(QV,hOo),e(kv,pOo),e(Z,uOo),e(Z,Sv),e(Sv,vpe),e(vpe,_Oo),e(Sv,bOo),e(Sv,HV),e(HV,vOo),e(Sv,FOo),e(Z,TOo),e(Z,Rv),e(Rv,Fpe),e(Fpe,MOo),e(Rv,EOo),e(Rv,UV),e(UV,COo),e(Rv,wOo),e(Z,AOo),e(Z,Pv),e(Pv,Tpe),e(Tpe,LOo),e(Pv,yOo),e(Pv,JV),e(JV,xOo),e(Pv,$Oo),e(Z,kOo),e(Z,Bv),e(Bv,Mpe),e(Mpe,SOo),e(Bv,ROo),e(Bv,YV),e(YV,POo),e(Bv,BOo),e(Z,IOo),e(Z,Iv),e(Iv,Epe),e(Epe,NOo),e(Iv,qOo),e(Iv,KV),e(KV,jOo),e(Iv,DOo),e(Z,GOo),e(Z,Nv),e(Nv,Cpe),e(Cpe,OOo),e(Nv,VOo),e(Nv,ZV),e(ZV,XOo),e(Nv,zOo),e(Z,WOo),e(Z,qv),e(qv,wpe),e(wpe,QOo),e(qv,HOo),e(qv,eX),e(eX,UOo),e(qv,JOo),e(Z,YOo),e(Z,jv),e(jv,Ape),e(Ape,KOo),e(jv,ZOo),e(jv,oX),e(oX,eVo),e(jv,oVo),e(Z,rVo),e(Z,Dv),e(Dv,Lpe),e(Lpe,tVo),e(Dv,aVo),e(Dv,rX),e(rX,nVo),e(Dv,sVo),e(Z,lVo),e(Z,Gv),e(Gv,ype),e(ype,iVo),e(Gv,dVo),e(Gv,tX),e(tX,cVo),e(Gv,fVo),e(Z,mVo),e(Z,Ov),e(Ov,xpe),e(xpe,gVo),e(Ov,hVo),e(Ov,aX),e(aX,pVo),e(Ov,uVo),e(Z,_Vo),e(Z,Vv),e(Vv,$pe),e($pe,bVo),e(Vv,vVo),e(Vv,nX),e(nX,FVo),e(Vv,TVo),e(Z,MVo),e(Z,Xv),e(Xv,kpe),e(kpe,EVo),e(Xv,CVo),e(Xv,sX),e(sX,wVo),e(Xv,AVo),e(Z,LVo),e(Z,zv),e(zv,Spe),e(Spe,yVo),e(zv,xVo),e(zv,lX),e(lX,$Vo),e(zv,kVo),e(Z,SVo),e(Z,Wv),e(Wv,Rpe),e(Rpe,RVo),e(Wv,PVo),e(Wv,iX),e(iX,BVo),e(Wv,IVo),e(ro,NVo),e(ro,Qv),e(Qv,qVo),e(Qv,Ppe),e(Ppe,jVo),e(Qv,DVo),e(Qv,Bpe),e(Bpe,GVo),e(ro,OVo),M(Hv,ro,null),b(f,qGe,_),b(f,rd,_),e(rd,Uv),e(Uv,Ipe),M(xL,Ipe,null),e(rd,VVo),e(rd,Npe),e(Npe,XVo),b(f,jGe,_),b(f,Io,_),M($L,Io,null),e(Io,zVo),e(Io,td),e(td,WVo),e(td,dX),e(dX,QVo),e(td,HVo),e(td,cX),e(cX,UVo),e(td,JVo),e(Io,YVo),e(Io,kL),e(kL,KVo),e(kL,qpe),e(qpe,ZVo),e(kL,eXo),e(Io,oXo),e(Io,mt),M(SL,mt,null),e(mt,rXo),e(mt,jpe),e(jpe,tXo),e(mt,aXo),e(mt,ad),e(ad,nXo),e(ad,Dpe),e(Dpe,sXo),e(ad,lXo),e(ad,fX),e(fX,iXo),e(ad,dXo),e(mt,cXo),M(Jv,mt,null),e(Io,fXo),e(Io,to),M(RL,to,null),e(to,mXo),e(to,Gpe),e(Gpe,gXo),e(to,hXo),e(to,ja),e(ja,pXo),e(ja,Ope),e(Ope,uXo),e(ja,_Xo),e(ja,Vpe),e(Vpe,bXo),e(ja,vXo),e(ja,Xpe),e(Xpe,FXo),e(ja,TXo),e(to,MXo),e(to,Zr),e(Zr,Yv),e(Yv,zpe),e(zpe,EXo),e(Yv,CXo),e(Yv,mX),e(mX,wXo),e(Yv,AXo),e(Zr,LXo),e(Zr,Kv),e(Kv,Wpe),e(Wpe,yXo),e(Kv,xXo),e(Kv,gX),e(gX,$Xo),e(Kv,kXo),e(Zr,SXo),e(Zr,Zv),e(Zv,Qpe),e(Qpe,RXo),e(Zv,PXo),e(Zv,hX),e(hX,BXo),e(Zv,IXo),e(Zr,NXo),e(Zr,e0),e(e0,Hpe),e(Hpe,qXo),e(e0,jXo),e(e0,pX),e(pX,DXo),e(e0,GXo),e(Zr,OXo),e(Zr,o0),e(o0,Upe),e(Upe,VXo),e(o0,XXo),e(o0,uX),e(uX,zXo),e(o0,WXo),e(to,QXo),e(to,r0),e(r0,HXo),e(r0,Jpe),e(Jpe,UXo),e(r0,JXo),e(r0,Ype),e(Ype,YXo),e(to,KXo),M(t0,to,null),b(f,DGe,_),b(f,nd,_),e(nd,a0),e(a0,Kpe),M(PL,Kpe,null),e(nd,ZXo),e(nd,Zpe),e(Zpe,ezo),b(f,GGe,_),b(f,No,_),M(BL,No,null),e(No,ozo),e(No,sd),e(sd,rzo),e(sd,_X),e(_X,tzo),e(sd,azo),e(sd,bX),e(bX,nzo),e(sd,szo),e(No,lzo),e(No,IL),e(IL,izo),e(IL,eue),e(eue,dzo),e(IL,czo),e(No,fzo),e(No,gt),M(NL,gt,null),e(gt,mzo),e(gt,oue),e(oue,gzo),e(gt,hzo),e(gt,ld),e(ld,pzo),e(ld,rue),e(rue,uzo),e(ld,_zo),e(ld,vX),e(vX,bzo),e(ld,vzo),e(gt,Fzo),M(n0,gt,null),e(No,Tzo),e(No,ao),M(qL,ao,null),e(ao,Mzo),e(ao,tue),e(tue,Ezo),e(ao,Czo),e(ao,Da),e(Da,wzo),e(Da,aue),e(aue,Azo),e(Da,Lzo),e(Da,nue),e(nue,yzo),e(Da,xzo),e(Da,sue),e(sue,$zo),e(Da,kzo),e(ao,Szo),e(ao,H),e(H,s0),e(s0,lue),e(lue,Rzo),e(s0,Pzo),e(s0,FX),e(FX,Bzo),e(s0,Izo),e(H,Nzo),e(H,l0),e(l0,iue),e(iue,qzo),e(l0,jzo),e(l0,TX),e(TX,Dzo),e(l0,Gzo),e(H,Ozo),e(H,i0),e(i0,due),e(due,Vzo),e(i0,Xzo),e(i0,MX),e(MX,zzo),e(i0,Wzo),e(H,Qzo),e(H,d0),e(d0,cue),e(cue,Hzo),e(d0,Uzo),e(d0,EX),e(EX,Jzo),e(d0,Yzo),e(H,Kzo),e(H,c0),e(c0,fue),e(fue,Zzo),e(c0,eWo),e(c0,CX),e(CX,oWo),e(c0,rWo),e(H,tWo),e(H,f0),e(f0,mue),e(mue,aWo),e(f0,nWo),e(f0,wX),e(wX,sWo),e(f0,lWo),e(H,iWo),e(H,m0),e(m0,gue),e(gue,dWo),e(m0,cWo),e(m0,AX),e(AX,fWo),e(m0,mWo),e(H,gWo),e(H,g0),e(g0,hue),e(hue,hWo),e(g0,pWo),e(g0,LX),e(LX,uWo),e(g0,_Wo),e(H,bWo),e(H,h0),e(h0,pue),e(pue,vWo),e(h0,FWo),e(h0,yX),e(yX,TWo),e(h0,MWo),e(H,EWo),e(H,p0),e(p0,uue),e(uue,CWo),e(p0,wWo),e(p0,xX),e(xX,AWo),e(p0,LWo),e(H,yWo),e(H,u0),e(u0,_ue),e(_ue,xWo),e(u0,$Wo),e(u0,$X),e($X,kWo),e(u0,SWo),e(H,RWo),e(H,_0),e(_0,bue),e(bue,PWo),e(_0,BWo),e(_0,kX),e(kX,IWo),e(_0,NWo),e(H,qWo),e(H,b0),e(b0,vue),e(vue,jWo),e(b0,DWo),e(b0,SX),e(SX,GWo),e(b0,OWo),e(H,VWo),e(H,v0),e(v0,Fue),e(Fue,XWo),e(v0,zWo),e(v0,RX),e(RX,WWo),e(v0,QWo),e(H,HWo),e(H,F0),e(F0,Tue),e(Tue,UWo),e(F0,JWo),e(F0,PX),e(PX,YWo),e(F0,KWo),e(H,ZWo),e(H,T0),e(T0,Mue),e(Mue,eQo),e(T0,oQo),e(T0,BX),e(BX,rQo),e(T0,tQo),e(H,aQo),e(H,M0),e(M0,Eue),e(Eue,nQo),e(M0,sQo),e(M0,IX),e(IX,lQo),e(M0,iQo),e(H,dQo),e(H,E0),e(E0,Cue),e(Cue,cQo),e(E0,fQo),e(E0,NX),e(NX,mQo),e(E0,gQo),e(H,hQo),e(H,C0),e(C0,wue),e(wue,pQo),e(C0,uQo),e(C0,qX),e(qX,_Qo),e(C0,bQo),e(H,vQo),e(H,w0),e(w0,Aue),e(Aue,FQo),e(w0,TQo),e(w0,jX),e(jX,MQo),e(w0,EQo),e(H,CQo),e(H,A0),e(A0,Lue),e(Lue,wQo),e(A0,AQo),e(A0,DX),e(DX,LQo),e(A0,yQo),e(H,xQo),e(H,L0),e(L0,yue),e(yue,$Qo),e(L0,kQo),e(L0,GX),e(GX,SQo),e(L0,RQo),e(H,PQo),e(H,y0),e(y0,xue),e(xue,BQo),e(y0,IQo),e(y0,OX),e(OX,NQo),e(y0,qQo),e(H,jQo),e(H,x0),e(x0,$ue),e($ue,DQo),e(x0,GQo),e(x0,VX),e(VX,OQo),e(x0,VQo),e(H,XQo),e(H,$0),e($0,kue),e(kue,zQo),e($0,WQo),e($0,XX),e(XX,QQo),e($0,HQo),e(H,UQo),e(H,k0),e(k0,Sue),e(Sue,JQo),e(k0,YQo),e(k0,zX),e(zX,KQo),e(k0,ZQo),e(H,eHo),e(H,S0),e(S0,Rue),e(Rue,oHo),e(S0,rHo),e(S0,WX),e(WX,tHo),e(S0,aHo),e(H,nHo),e(H,R0),e(R0,Pue),e(Pue,sHo),e(R0,lHo),e(R0,QX),e(QX,iHo),e(R0,dHo),e(H,cHo),e(H,P0),e(P0,Bue),e(Bue,fHo),e(P0,mHo),e(P0,HX),e(HX,gHo),e(P0,hHo),e(H,pHo),e(H,B0),e(B0,Iue),e(Iue,uHo),e(B0,_Ho),e(B0,UX),e(UX,bHo),e(B0,vHo),e(H,FHo),e(H,I0),e(I0,Nue),e(Nue,THo),e(I0,MHo),e(I0,JX),e(JX,EHo),e(I0,CHo),e(H,wHo),e(H,N0),e(N0,que),e(que,AHo),e(N0,LHo),e(N0,YX),e(YX,yHo),e(N0,xHo),e(H,$Ho),e(H,q0),e(q0,jue),e(jue,kHo),e(q0,SHo),e(q0,KX),e(KX,RHo),e(q0,PHo),e(H,BHo),e(H,j0),e(j0,Due),e(Due,IHo),e(j0,NHo),e(j0,ZX),e(ZX,qHo),e(j0,jHo),e(H,DHo),e(H,D0),e(D0,Gue),e(Gue,GHo),e(D0,OHo),e(D0,ez),e(ez,VHo),e(D0,XHo),e(ao,zHo),e(ao,G0),e(G0,WHo),e(G0,Oue),e(Oue,QHo),e(G0,HHo),e(G0,Vue),e(Vue,UHo),e(ao,JHo),M(O0,ao,null),b(f,OGe,_),b(f,id,_),e(id,V0),e(V0,Xue),M(jL,Xue,null),e(id,YHo),e(id,zue),e(zue,KHo),b(f,VGe,_),b(f,qo,_),M(DL,qo,null),e(qo,ZHo),e(qo,dd),e(dd,eUo),e(dd,oz),e(oz,oUo),e(dd,rUo),e(dd,rz),e(rz,tUo),e(dd,aUo),e(qo,nUo),e(qo,GL),e(GL,sUo),e(GL,Wue),e(Wue,lUo),e(GL,iUo),e(qo,dUo),e(qo,ht),M(OL,ht,null),e(ht,cUo),e(ht,Que),e(Que,fUo),e(ht,mUo),e(ht,cd),e(cd,gUo),e(cd,Hue),e(Hue,hUo),e(cd,pUo),e(cd,tz),e(tz,uUo),e(cd,_Uo),e(ht,bUo),M(X0,ht,null),e(qo,vUo),e(qo,no),M(VL,no,null),e(no,FUo),e(no,Uue),e(Uue,TUo),e(no,MUo),e(no,Ga),e(Ga,EUo),e(Ga,Jue),e(Jue,CUo),e(Ga,wUo),e(Ga,Yue),e(Yue,AUo),e(Ga,LUo),e(Ga,Kue),e(Kue,yUo),e(Ga,xUo),e(no,$Uo),e(no,V),e(V,z0),e(z0,Zue),e(Zue,kUo),e(z0,SUo),e(z0,az),e(az,RUo),e(z0,PUo),e(V,BUo),e(V,W0),e(W0,e_e),e(e_e,IUo),e(W0,NUo),e(W0,nz),e(nz,qUo),e(W0,jUo),e(V,DUo),e(V,Q0),e(Q0,o_e),e(o_e,GUo),e(Q0,OUo),e(Q0,sz),e(sz,VUo),e(Q0,XUo),e(V,zUo),e(V,H0),e(H0,r_e),e(r_e,WUo),e(H0,QUo),e(H0,lz),e(lz,HUo),e(H0,UUo),e(V,JUo),e(V,U0),e(U0,t_e),e(t_e,YUo),e(U0,KUo),e(U0,iz),e(iz,ZUo),e(U0,eJo),e(V,oJo),e(V,J0),e(J0,a_e),e(a_e,rJo),e(J0,tJo),e(J0,dz),e(dz,aJo),e(J0,nJo),e(V,sJo),e(V,Y0),e(Y0,n_e),e(n_e,lJo),e(Y0,iJo),e(Y0,cz),e(cz,dJo),e(Y0,cJo),e(V,fJo),e(V,K0),e(K0,s_e),e(s_e,mJo),e(K0,gJo),e(K0,fz),e(fz,hJo),e(K0,pJo),e(V,uJo),e(V,Z0),e(Z0,l_e),e(l_e,_Jo),e(Z0,bJo),e(Z0,mz),e(mz,vJo),e(Z0,FJo),e(V,TJo),e(V,eF),e(eF,i_e),e(i_e,MJo),e(eF,EJo),e(eF,gz),e(gz,CJo),e(eF,wJo),e(V,AJo),e(V,oF),e(oF,d_e),e(d_e,LJo),e(oF,yJo),e(oF,hz),e(hz,xJo),e(oF,$Jo),e(V,kJo),e(V,rF),e(rF,c_e),e(c_e,SJo),e(rF,RJo),e(rF,pz),e(pz,PJo),e(rF,BJo),e(V,IJo),e(V,tF),e(tF,f_e),e(f_e,NJo),e(tF,qJo),e(tF,uz),e(uz,jJo),e(tF,DJo),e(V,GJo),e(V,aF),e(aF,m_e),e(m_e,OJo),e(aF,VJo),e(aF,_z),e(_z,XJo),e(aF,zJo),e(V,WJo),e(V,nF),e(nF,g_e),e(g_e,QJo),e(nF,HJo),e(nF,bz),e(bz,UJo),e(nF,JJo),e(V,YJo),e(V,sF),e(sF,h_e),e(h_e,KJo),e(sF,ZJo),e(sF,vz),e(vz,eYo),e(sF,oYo),e(V,rYo),e(V,lF),e(lF,p_e),e(p_e,tYo),e(lF,aYo),e(lF,Fz),e(Fz,nYo),e(lF,sYo),e(V,lYo),e(V,iF),e(iF,u_e),e(u_e,iYo),e(iF,dYo),e(iF,Tz),e(Tz,cYo),e(iF,fYo),e(V,mYo),e(V,dF),e(dF,__e),e(__e,gYo),e(dF,hYo),e(dF,Mz),e(Mz,pYo),e(dF,uYo),e(V,_Yo),e(V,cF),e(cF,b_e),e(b_e,bYo),e(cF,vYo),e(cF,Ez),e(Ez,FYo),e(cF,TYo),e(V,MYo),e(V,fF),e(fF,v_e),e(v_e,EYo),e(fF,CYo),e(fF,Cz),e(Cz,wYo),e(fF,AYo),e(V,LYo),e(V,mF),e(mF,F_e),e(F_e,yYo),e(mF,xYo),e(mF,wz),e(wz,$Yo),e(mF,kYo),e(V,SYo),e(V,gF),e(gF,T_e),e(T_e,RYo),e(gF,PYo),e(gF,Az),e(Az,BYo),e(gF,IYo),e(V,NYo),e(V,hF),e(hF,M_e),e(M_e,qYo),e(hF,jYo),e(hF,Lz),e(Lz,DYo),e(hF,GYo),e(V,OYo),e(V,pF),e(pF,E_e),e(E_e,VYo),e(pF,XYo),e(pF,yz),e(yz,zYo),e(pF,WYo),e(V,QYo),e(V,uF),e(uF,C_e),e(C_e,HYo),e(uF,UYo),e(uF,xz),e(xz,JYo),e(uF,YYo),e(V,KYo),e(V,_F),e(_F,w_e),e(w_e,ZYo),e(_F,eKo),e(_F,$z),e($z,oKo),e(_F,rKo),e(V,tKo),e(V,bF),e(bF,A_e),e(A_e,aKo),e(bF,nKo),e(bF,kz),e(kz,sKo),e(bF,lKo),e(V,iKo),e(V,vF),e(vF,L_e),e(L_e,dKo),e(vF,cKo),e(vF,Sz),e(Sz,fKo),e(vF,mKo),e(V,gKo),e(V,FF),e(FF,y_e),e(y_e,hKo),e(FF,pKo),e(FF,Rz),e(Rz,uKo),e(FF,_Ko),e(V,bKo),e(V,TF),e(TF,x_e),e(x_e,vKo),e(TF,FKo),e(TF,Pz),e(Pz,TKo),e(TF,MKo),e(V,EKo),e(V,MF),e(MF,$_e),e($_e,CKo),e(MF,wKo),e(MF,Bz),e(Bz,AKo),e(MF,LKo),e(V,yKo),e(V,EF),e(EF,k_e),e(k_e,xKo),e(EF,$Ko),e(EF,Iz),e(Iz,kKo),e(EF,SKo),e(V,RKo),e(V,CF),e(CF,S_e),e(S_e,PKo),e(CF,BKo),e(CF,Nz),e(Nz,IKo),e(CF,NKo),e(V,qKo),e(V,wF),e(wF,R_e),e(R_e,jKo),e(wF,DKo),e(wF,qz),e(qz,GKo),e(wF,OKo),e(V,VKo),e(V,AF),e(AF,P_e),e(P_e,XKo),e(AF,zKo),e(AF,jz),e(jz,WKo),e(AF,QKo),e(V,HKo),e(V,LF),e(LF,B_e),e(B_e,UKo),e(LF,JKo),e(LF,Dz),e(Dz,YKo),e(LF,KKo),e(V,ZKo),e(V,yF),e(yF,I_e),e(I_e,eZo),e(yF,oZo),e(yF,Gz),e(Gz,rZo),e(yF,tZo),e(V,aZo),e(V,xF),e(xF,N_e),e(N_e,nZo),e(xF,sZo),e(xF,Oz),e(Oz,lZo),e(xF,iZo),e(V,dZo),e(V,$F),e($F,q_e),e(q_e,cZo),e($F,fZo),e($F,Vz),e(Vz,mZo),e($F,gZo),e(no,hZo),e(no,kF),e(kF,pZo),e(kF,j_e),e(j_e,uZo),e(kF,_Zo),e(kF,D_e),e(D_e,bZo),e(no,vZo),M(SF,no,null),b(f,XGe,_),b(f,fd,_),e(fd,RF),e(RF,G_e),M(XL,G_e,null),e(fd,FZo),e(fd,O_e),e(O_e,TZo),b(f,zGe,_),b(f,jo,_),M(zL,jo,null),e(jo,MZo),e(jo,md),e(md,EZo),e(md,Xz),e(Xz,CZo),e(md,wZo),e(md,zz),e(zz,AZo),e(md,LZo),e(jo,yZo),e(jo,WL),e(WL,xZo),e(WL,V_e),e(V_e,$Zo),e(WL,kZo),e(jo,SZo),e(jo,pt),M(QL,pt,null),e(pt,RZo),e(pt,X_e),e(X_e,PZo),e(pt,BZo),e(pt,gd),e(gd,IZo),e(gd,z_e),e(z_e,NZo),e(gd,qZo),e(gd,Wz),e(Wz,jZo),e(gd,DZo),e(pt,GZo),M(PF,pt,null),e(jo,OZo),e(jo,so),M(HL,so,null),e(so,VZo),e(so,W_e),e(W_e,XZo),e(so,zZo),e(so,Oa),e(Oa,WZo),e(Oa,Q_e),e(Q_e,QZo),e(Oa,HZo),e(Oa,H_e),e(H_e,UZo),e(Oa,JZo),e(Oa,U_e),e(U_e,YZo),e(Oa,KZo),e(so,ZZo),e(so,J_e),e(J_e,BF),e(BF,Y_e),e(Y_e,eer),e(BF,oer),e(BF,Qz),e(Qz,rer),e(BF,ter),e(so,aer),e(so,IF),e(IF,ner),e(IF,K_e),e(K_e,ser),e(IF,ler),e(IF,Z_e),e(Z_e,ier),e(so,der),M(NF,so,null),b(f,WGe,_),b(f,hd,_),e(hd,qF),e(qF,e1e),M(UL,e1e,null),e(hd,cer),e(hd,o1e),e(o1e,fer),b(f,QGe,_),b(f,Do,_),M(JL,Do,null),e(Do,mer),e(Do,pd),e(pd,ger),e(pd,Hz),e(Hz,her),e(pd,per),e(pd,Uz),e(Uz,uer),e(pd,_er),e(Do,ber),e(Do,YL),e(YL,ver),e(YL,r1e),e(r1e,Fer),e(YL,Ter),e(Do,Mer),e(Do,ut),M(KL,ut,null),e(ut,Eer),e(ut,t1e),e(t1e,Cer),e(ut,wer),e(ut,ud),e(ud,Aer),e(ud,a1e),e(a1e,Ler),e(ud,yer),e(ud,Jz),e(Jz,xer),e(ud,$er),e(ut,ker),M(jF,ut,null),e(Do,Ser),e(Do,lo),M(ZL,lo,null),e(lo,Rer),e(lo,n1e),e(n1e,Per),e(lo,Ber),e(lo,Va),e(Va,Ier),e(Va,s1e),e(s1e,Ner),e(Va,qer),e(Va,l1e),e(l1e,jer),e(Va,Der),e(Va,i1e),e(i1e,Ger),e(Va,Oer),e(lo,Ver),e(lo,Fe),e(Fe,DF),e(DF,d1e),e(d1e,Xer),e(DF,zer),e(DF,Yz),e(Yz,Wer),e(DF,Qer),e(Fe,Her),e(Fe,GF),e(GF,c1e),e(c1e,Uer),e(GF,Jer),e(GF,Kz),e(Kz,Yer),e(GF,Ker),e(Fe,Zer),e(Fe,OF),e(OF,f1e),e(f1e,eor),e(OF,oor),e(OF,Zz),e(Zz,ror),e(OF,tor),e(Fe,aor),e(Fe,VF),e(VF,m1e),e(m1e,nor),e(VF,sor),e(VF,eW),e(eW,lor),e(VF,ior),e(Fe,dor),e(Fe,Vs),e(Vs,g1e),e(g1e,cor),e(Vs,mor),e(Vs,oW),e(oW,gor),e(Vs,hor),e(Vs,rW),e(rW,por),e(Vs,uor),e(Fe,_or),e(Fe,XF),e(XF,h1e),e(h1e,bor),e(XF,vor),e(XF,tW),e(tW,For),e(XF,Tor),e(Fe,Mor),e(Fe,Xs),e(Xs,p1e),e(p1e,Eor),e(Xs,Cor),e(Xs,aW),e(aW,wor),e(Xs,Aor),e(Xs,nW),e(nW,Lor),e(Xs,yor),e(Fe,xor),e(Fe,_t),e(_t,u1e),e(u1e,$or),e(_t,kor),e(_t,sW),e(sW,Sor),e(_t,Ror),e(_t,lW),e(lW,Por),e(_t,Bor),e(_t,iW),e(iW,Ior),e(_t,Nor),e(Fe,qor),e(Fe,zF),e(zF,_1e),e(_1e,jor),e(zF,Dor),e(zF,dW),e(dW,Gor),e(zF,Oor),e(Fe,Vor),e(Fe,WF),e(WF,b1e),e(b1e,Xor),e(WF,zor),e(WF,cW),e(cW,Wor),e(WF,Qor),e(Fe,Hor),e(Fe,QF),e(QF,v1e),e(v1e,Uor),e(QF,Jor),e(QF,fW),e(fW,Yor),e(QF,Kor),e(Fe,Zor),e(Fe,HF),e(HF,F1e),e(F1e,err),e(HF,orr),e(HF,mW),e(mW,rrr),e(HF,trr),e(Fe,arr),e(Fe,UF),e(UF,T1e),e(T1e,nrr),e(UF,srr),e(UF,gW),e(gW,lrr),e(UF,irr),e(Fe,drr),e(Fe,JF),e(JF,M1e),e(M1e,crr),e(JF,frr),e(JF,hW),e(hW,mrr),e(JF,grr),e(Fe,hrr),e(Fe,YF),e(YF,E1e),e(E1e,prr),e(YF,urr),e(YF,pW),e(pW,_rr),e(YF,brr),e(lo,vrr),e(lo,KF),e(KF,Frr),e(KF,C1e),e(C1e,Trr),e(KF,Mrr),e(KF,w1e),e(w1e,Err),e(lo,Crr),M(ZF,lo,null),b(f,HGe,_),b(f,_d,_),e(_d,eT),e(eT,A1e),M(ey,A1e,null),e(_d,wrr),e(_d,L1e),e(L1e,Arr),b(f,UGe,_),b(f,Go,_),M(oy,Go,null),e(Go,Lrr),e(Go,bd),e(bd,yrr),e(bd,uW),e(uW,xrr),e(bd,$rr),e(bd,_W),e(_W,krr),e(bd,Srr),e(Go,Rrr),e(Go,ry),e(ry,Prr),e(ry,y1e),e(y1e,Brr),e(ry,Irr),e(Go,Nrr),e(Go,bt),M(ty,bt,null),e(bt,qrr),e(bt,x1e),e(x1e,jrr),e(bt,Drr),e(bt,vd),e(vd,Grr),e(vd,$1e),e($1e,Orr),e(vd,Vrr),e(vd,bW),e(bW,Xrr),e(vd,zrr),e(bt,Wrr),M(oT,bt,null),e(Go,Qrr),e(Go,io),M(ay,io,null),e(io,Hrr),e(io,k1e),e(k1e,Urr),e(io,Jrr),e(io,Xa),e(Xa,Yrr),e(Xa,S1e),e(S1e,Krr),e(Xa,Zrr),e(Xa,R1e),e(R1e,etr),e(Xa,otr),e(Xa,P1e),e(P1e,rtr),e(Xa,ttr),e(io,atr),e(io,B1e),e(B1e,rT),e(rT,I1e),e(I1e,ntr),e(rT,str),e(rT,vW),e(vW,ltr),e(rT,itr),e(io,dtr),e(io,tT),e(tT,ctr),e(tT,N1e),e(N1e,ftr),e(tT,mtr),e(tT,q1e),e(q1e,gtr),e(io,htr),M(aT,io,null),b(f,JGe,_),b(f,Fd,_),e(Fd,nT),e(nT,j1e),M(ny,j1e,null),e(Fd,ptr),e(Fd,D1e),e(D1e,utr),b(f,YGe,_),b(f,Oo,_),M(sy,Oo,null),e(Oo,_tr),e(Oo,Td),e(Td,btr),e(Td,FW),e(FW,vtr),e(Td,Ftr),e(Td,TW),e(TW,Ttr),e(Td,Mtr),e(Oo,Etr),e(Oo,ly),e(ly,Ctr),e(ly,G1e),e(G1e,wtr),e(ly,Atr),e(Oo,Ltr),e(Oo,vt),M(iy,vt,null),e(vt,ytr),e(vt,O1e),e(O1e,xtr),e(vt,$tr),e(vt,Md),e(Md,ktr),e(Md,V1e),e(V1e,Str),e(Md,Rtr),e(Md,MW),e(MW,Ptr),e(Md,Btr),e(vt,Itr),M(sT,vt,null),e(Oo,Ntr),e(Oo,co),M(dy,co,null),e(co,qtr),e(co,X1e),e(X1e,jtr),e(co,Dtr),e(co,za),e(za,Gtr),e(za,z1e),e(z1e,Otr),e(za,Vtr),e(za,W1e),e(W1e,Xtr),e(za,ztr),e(za,Q1e),e(Q1e,Wtr),e(za,Qtr),e(co,Htr),e(co,H1e),e(H1e,lT),e(lT,U1e),e(U1e,Utr),e(lT,Jtr),e(lT,EW),e(EW,Ytr),e(lT,Ktr),e(co,Ztr),e(co,iT),e(iT,ear),e(iT,J1e),e(J1e,oar),e(iT,rar),e(iT,Y1e),e(Y1e,tar),e(co,aar),M(dT,co,null),b(f,KGe,_),b(f,Ed,_),e(Ed,cT),e(cT,K1e),M(cy,K1e,null),e(Ed,nar),e(Ed,Z1e),e(Z1e,sar),b(f,ZGe,_),b(f,Vo,_),M(fy,Vo,null),e(Vo,lar),e(Vo,Cd),e(Cd,iar),e(Cd,CW),e(CW,dar),e(Cd,car),e(Cd,wW),e(wW,far),e(Cd,mar),e(Vo,gar),e(Vo,my),e(my,har),e(my,e2e),e(e2e,par),e(my,uar),e(Vo,_ar),e(Vo,Ft),M(gy,Ft,null),e(Ft,bar),e(Ft,o2e),e(o2e,Far),e(Ft,Tar),e(Ft,wd),e(wd,Mar),e(wd,r2e),e(r2e,Ear),e(wd,Car),e(wd,AW),e(AW,war),e(wd,Aar),e(Ft,Lar),M(fT,Ft,null),e(Vo,yar),e(Vo,fo),M(hy,fo,null),e(fo,xar),e(fo,t2e),e(t2e,$ar),e(fo,kar),e(fo,Wa),e(Wa,Sar),e(Wa,a2e),e(a2e,Rar),e(Wa,Par),e(Wa,n2e),e(n2e,Bar),e(Wa,Iar),e(Wa,s2e),e(s2e,Nar),e(Wa,qar),e(fo,jar),e(fo,Pe),e(Pe,mT),e(mT,l2e),e(l2e,Dar),e(mT,Gar),e(mT,LW),e(LW,Oar),e(mT,Var),e(Pe,Xar),e(Pe,gT),e(gT,i2e),e(i2e,zar),e(gT,War),e(gT,yW),e(yW,Qar),e(gT,Har),e(Pe,Uar),e(Pe,hT),e(hT,d2e),e(d2e,Jar),e(hT,Yar),e(hT,xW),e(xW,Kar),e(hT,Zar),e(Pe,enr),e(Pe,pT),e(pT,c2e),e(c2e,onr),e(pT,rnr),e(pT,$W),e($W,tnr),e(pT,anr),e(Pe,nnr),e(Pe,uT),e(uT,f2e),e(f2e,snr),e(uT,lnr),e(uT,kW),e(kW,inr),e(uT,dnr),e(Pe,cnr),e(Pe,_T),e(_T,m2e),e(m2e,fnr),e(_T,mnr),e(_T,SW),e(SW,gnr),e(_T,hnr),e(Pe,pnr),e(Pe,bT),e(bT,g2e),e(g2e,unr),e(bT,_nr),e(bT,RW),e(RW,bnr),e(bT,vnr),e(Pe,Fnr),e(Pe,vT),e(vT,h2e),e(h2e,Tnr),e(vT,Mnr),e(vT,PW),e(PW,Enr),e(vT,Cnr),e(Pe,wnr),e(Pe,FT),e(FT,p2e),e(p2e,Anr),e(FT,Lnr),e(FT,BW),e(BW,ynr),e(FT,xnr),e(fo,$nr),e(fo,TT),e(TT,knr),e(TT,u2e),e(u2e,Snr),e(TT,Rnr),e(TT,_2e),e(_2e,Pnr),e(fo,Bnr),M(MT,fo,null),b(f,eOe,_),b(f,Ad,_),e(Ad,ET),e(ET,b2e),M(py,b2e,null),e(Ad,Inr),e(Ad,v2e),e(v2e,Nnr),b(f,oOe,_),b(f,Xo,_),M(uy,Xo,null),e(Xo,qnr),e(Xo,Ld),e(Ld,jnr),e(Ld,IW),e(IW,Dnr),e(Ld,Gnr),e(Ld,NW),e(NW,Onr),e(Ld,Vnr),e(Xo,Xnr),e(Xo,_y),e(_y,znr),e(_y,F2e),e(F2e,Wnr),e(_y,Qnr),e(Xo,Hnr),e(Xo,Tt),M(by,Tt,null),e(Tt,Unr),e(Tt,T2e),e(T2e,Jnr),e(Tt,Ynr),e(Tt,yd),e(yd,Knr),e(yd,M2e),e(M2e,Znr),e(yd,esr),e(yd,qW),e(qW,osr),e(yd,rsr),e(Tt,tsr),M(CT,Tt,null),e(Xo,asr),e(Xo,mo),M(vy,mo,null),e(mo,nsr),e(mo,E2e),e(E2e,ssr),e(mo,lsr),e(mo,Qa),e(Qa,isr),e(Qa,C2e),e(C2e,dsr),e(Qa,csr),e(Qa,w2e),e(w2e,fsr),e(Qa,msr),e(Qa,A2e),e(A2e,gsr),e(Qa,hsr),e(mo,psr),e(mo,et),e(et,wT),e(wT,L2e),e(L2e,usr),e(wT,_sr),e(wT,jW),e(jW,bsr),e(wT,vsr),e(et,Fsr),e(et,AT),e(AT,y2e),e(y2e,Tsr),e(AT,Msr),e(AT,DW),e(DW,Esr),e(AT,Csr),e(et,wsr),e(et,LT),e(LT,x2e),e(x2e,Asr),e(LT,Lsr),e(LT,GW),e(GW,ysr),e(LT,xsr),e(et,$sr),e(et,yT),e(yT,$2e),e($2e,ksr),e(yT,Ssr),e(yT,OW),e(OW,Rsr),e(yT,Psr),e(et,Bsr),e(et,xT),e(xT,k2e),e(k2e,Isr),e(xT,Nsr),e(xT,VW),e(VW,qsr),e(xT,jsr),e(mo,Dsr),e(mo,$T),e($T,Gsr),e($T,S2e),e(S2e,Osr),e($T,Vsr),e($T,R2e),e(R2e,Xsr),e(mo,zsr),M(kT,mo,null),b(f,rOe,_),b(f,xd,_),e(xd,ST),e(ST,P2e),M(Fy,P2e,null),e(xd,Wsr),e(xd,B2e),e(B2e,Qsr),b(f,tOe,_),b(f,zo,_),M(Ty,zo,null),e(zo,Hsr),e(zo,$d),e($d,Usr),e($d,XW),e(XW,Jsr),e($d,Ysr),e($d,zW),e(zW,Ksr),e($d,Zsr),e(zo,elr),e(zo,My),e(My,olr),e(My,I2e),e(I2e,rlr),e(My,tlr),e(zo,alr),e(zo,Mt),M(Ey,Mt,null),e(Mt,nlr),e(Mt,N2e),e(N2e,slr),e(Mt,llr),e(Mt,kd),e(kd,ilr),e(kd,q2e),e(q2e,dlr),e(kd,clr),e(kd,WW),e(WW,flr),e(kd,mlr),e(Mt,glr),M(RT,Mt,null),e(zo,hlr),e(zo,go),M(Cy,go,null),e(go,plr),e(go,j2e),e(j2e,ulr),e(go,_lr),e(go,Ha),e(Ha,blr),e(Ha,D2e),e(D2e,vlr),e(Ha,Flr),e(Ha,G2e),e(G2e,Tlr),e(Ha,Mlr),e(Ha,O2e),e(O2e,Elr),e(Ha,Clr),e(go,wlr),e(go,Le),e(Le,PT),e(PT,V2e),e(V2e,Alr),e(PT,Llr),e(PT,QW),e(QW,ylr),e(PT,xlr),e(Le,$lr),e(Le,BT),e(BT,X2e),e(X2e,klr),e(BT,Slr),e(BT,HW),e(HW,Rlr),e(BT,Plr),e(Le,Blr),e(Le,IT),e(IT,z2e),e(z2e,Ilr),e(IT,Nlr),e(IT,UW),e(UW,qlr),e(IT,jlr),e(Le,Dlr),e(Le,NT),e(NT,W2e),e(W2e,Glr),e(NT,Olr),e(NT,JW),e(JW,Vlr),e(NT,Xlr),e(Le,zlr),e(Le,qT),e(qT,Q2e),e(Q2e,Wlr),e(qT,Qlr),e(qT,YW),e(YW,Hlr),e(qT,Ulr),e(Le,Jlr),e(Le,jT),e(jT,H2e),e(H2e,Ylr),e(jT,Klr),e(jT,KW),e(KW,Zlr),e(jT,eir),e(Le,oir),e(Le,DT),e(DT,U2e),e(U2e,rir),e(DT,tir),e(DT,ZW),e(ZW,air),e(DT,nir),e(Le,sir),e(Le,GT),e(GT,J2e),e(J2e,lir),e(GT,iir),e(GT,eQ),e(eQ,dir),e(GT,cir),e(Le,fir),e(Le,OT),e(OT,Y2e),e(Y2e,mir),e(OT,gir),e(OT,oQ),e(oQ,hir),e(OT,pir),e(Le,uir),e(Le,VT),e(VT,K2e),e(K2e,_ir),e(VT,bir),e(VT,rQ),e(rQ,vir),e(VT,Fir),e(go,Tir),e(go,XT),e(XT,Mir),e(XT,Z2e),e(Z2e,Eir),e(XT,Cir),e(XT,ebe),e(ebe,wir),e(go,Air),M(zT,go,null),b(f,aOe,_),b(f,Sd,_),e(Sd,WT),e(WT,obe),M(wy,obe,null),e(Sd,Lir),e(Sd,rbe),e(rbe,yir),b(f,nOe,_),b(f,Wo,_),M(Ay,Wo,null),e(Wo,xir),e(Wo,Rd),e(Rd,$ir),e(Rd,tQ),e(tQ,kir),e(Rd,Sir),e(Rd,aQ),e(aQ,Rir),e(Rd,Pir),e(Wo,Bir),e(Wo,Ly),e(Ly,Iir),e(Ly,tbe),e(tbe,Nir),e(Ly,qir),e(Wo,jir),e(Wo,Et),M(yy,Et,null),e(Et,Dir),e(Et,abe),e(abe,Gir),e(Et,Oir),e(Et,Pd),e(Pd,Vir),e(Pd,nbe),e(nbe,Xir),e(Pd,zir),e(Pd,nQ),e(nQ,Wir),e(Pd,Qir),e(Et,Hir),M(QT,Et,null),e(Wo,Uir),e(Wo,ho),M(xy,ho,null),e(ho,Jir),e(ho,sbe),e(sbe,Yir),e(ho,Kir),e(ho,Ua),e(Ua,Zir),e(Ua,lbe),e(lbe,edr),e(Ua,odr),e(Ua,ibe),e(ibe,rdr),e(Ua,tdr),e(Ua,dbe),e(dbe,adr),e(Ua,ndr),e(ho,sdr),e(ho,$y),e($y,HT),e(HT,cbe),e(cbe,ldr),e(HT,idr),e(HT,sQ),e(sQ,ddr),e(HT,cdr),e($y,fdr),e($y,UT),e(UT,fbe),e(fbe,mdr),e(UT,gdr),e(UT,lQ),e(lQ,hdr),e(UT,pdr),e(ho,udr),e(ho,JT),e(JT,_dr),e(JT,mbe),e(mbe,bdr),e(JT,vdr),e(JT,gbe),e(gbe,Fdr),e(ho,Tdr),M(YT,ho,null),b(f,sOe,_),b(f,Bd,_),e(Bd,KT),e(KT,hbe),M(ky,hbe,null),e(Bd,Mdr),e(Bd,pbe),e(pbe,Edr),b(f,lOe,_),b(f,Qo,_),M(Sy,Qo,null),e(Qo,Cdr),e(Qo,Id),e(Id,wdr),e(Id,iQ),e(iQ,Adr),e(Id,Ldr),e(Id,dQ),e(dQ,ydr),e(Id,xdr),e(Qo,$dr),e(Qo,Ry),e(Ry,kdr),e(Ry,ube),e(ube,Sdr),e(Ry,Rdr),e(Qo,Pdr),e(Qo,Ct),M(Py,Ct,null),e(Ct,Bdr),e(Ct,_be),e(_be,Idr),e(Ct,Ndr),e(Ct,Nd),e(Nd,qdr),e(Nd,bbe),e(bbe,jdr),e(Nd,Ddr),e(Nd,cQ),e(cQ,Gdr),e(Nd,Odr),e(Ct,Vdr),M(ZT,Ct,null),e(Qo,Xdr),e(Qo,po),M(By,po,null),e(po,zdr),e(po,vbe),e(vbe,Wdr),e(po,Qdr),e(po,Ja),e(Ja,Hdr),e(Ja,Fbe),e(Fbe,Udr),e(Ja,Jdr),e(Ja,Tbe),e(Tbe,Ydr),e(Ja,Kdr),e(Ja,Mbe),e(Mbe,Zdr),e(Ja,ecr),e(po,ocr),e(po,ot),e(ot,e7),e(e7,Ebe),e(Ebe,rcr),e(e7,tcr),e(e7,fQ),e(fQ,acr),e(e7,ncr),e(ot,scr),e(ot,o7),e(o7,Cbe),e(Cbe,lcr),e(o7,icr),e(o7,mQ),e(mQ,dcr),e(o7,ccr),e(ot,fcr),e(ot,r7),e(r7,wbe),e(wbe,mcr),e(r7,gcr),e(r7,gQ),e(gQ,hcr),e(r7,pcr),e(ot,ucr),e(ot,t7),e(t7,Abe),e(Abe,_cr),e(t7,bcr),e(t7,hQ),e(hQ,vcr),e(t7,Fcr),e(ot,Tcr),e(ot,a7),e(a7,Lbe),e(Lbe,Mcr),e(a7,Ecr),e(a7,pQ),e(pQ,Ccr),e(a7,wcr),e(po,Acr),e(po,n7),e(n7,Lcr),e(n7,ybe),e(ybe,ycr),e(n7,xcr),e(n7,xbe),e(xbe,$cr),e(po,kcr),M(s7,po,null),b(f,iOe,_),b(f,qd,_),e(qd,l7),e(l7,$be),M(Iy,$be,null),e(qd,Scr),e(qd,kbe),e(kbe,Rcr),b(f,dOe,_),b(f,Ho,_),M(Ny,Ho,null),e(Ho,Pcr),e(Ho,jd),e(jd,Bcr),e(jd,uQ),e(uQ,Icr),e(jd,Ncr),e(jd,_Q),e(_Q,qcr),e(jd,jcr),e(Ho,Dcr),e(Ho,qy),e(qy,Gcr),e(qy,Sbe),e(Sbe,Ocr),e(qy,Vcr),e(Ho,Xcr),e(Ho,wt),M(jy,wt,null),e(wt,zcr),e(wt,Rbe),e(Rbe,Wcr),e(wt,Qcr),e(wt,Dd),e(Dd,Hcr),e(Dd,Pbe),e(Pbe,Ucr),e(Dd,Jcr),e(Dd,bQ),e(bQ,Ycr),e(Dd,Kcr),e(wt,Zcr),M(i7,wt,null),e(Ho,efr),e(Ho,uo),M(Dy,uo,null),e(uo,ofr),e(uo,Bbe),e(Bbe,rfr),e(uo,tfr),e(uo,Ya),e(Ya,afr),e(Ya,Ibe),e(Ibe,nfr),e(Ya,sfr),e(Ya,Nbe),e(Nbe,lfr),e(Ya,ifr),e(Ya,qbe),e(qbe,dfr),e(Ya,cfr),e(uo,ffr),e(uo,Gd),e(Gd,d7),e(d7,jbe),e(jbe,mfr),e(d7,gfr),e(d7,vQ),e(vQ,hfr),e(d7,pfr),e(Gd,ufr),e(Gd,c7),e(c7,Dbe),e(Dbe,_fr),e(c7,bfr),e(c7,FQ),e(FQ,vfr),e(c7,Ffr),e(Gd,Tfr),e(Gd,f7),e(f7,Gbe),e(Gbe,Mfr),e(f7,Efr),e(f7,TQ),e(TQ,Cfr),e(f7,wfr),e(uo,Afr),e(uo,m7),e(m7,Lfr),e(m7,Obe),e(Obe,yfr),e(m7,xfr),e(m7,Vbe),e(Vbe,$fr),e(uo,kfr),M(g7,uo,null),b(f,cOe,_),b(f,Od,_),e(Od,h7),e(h7,Xbe),M(Gy,Xbe,null),e(Od,Sfr),e(Od,zbe),e(zbe,Rfr),b(f,fOe,_),b(f,Uo,_),M(Oy,Uo,null),e(Uo,Pfr),e(Uo,Vd),e(Vd,Bfr),e(Vd,MQ),e(MQ,Ifr),e(Vd,Nfr),e(Vd,EQ),e(EQ,qfr),e(Vd,jfr),e(Uo,Dfr),e(Uo,Vy),e(Vy,Gfr),e(Vy,Wbe),e(Wbe,Ofr),e(Vy,Vfr),e(Uo,Xfr),e(Uo,At),M(Xy,At,null),e(At,zfr),e(At,Qbe),e(Qbe,Wfr),e(At,Qfr),e(At,Xd),e(Xd,Hfr),e(Xd,Hbe),e(Hbe,Ufr),e(Xd,Jfr),e(Xd,CQ),e(CQ,Yfr),e(Xd,Kfr),e(At,Zfr),M(p7,At,null),e(Uo,emr),e(Uo,_o),M(zy,_o,null),e(_o,omr),e(_o,Ube),e(Ube,rmr),e(_o,tmr),e(_o,Ka),e(Ka,amr),e(Ka,Jbe),e(Jbe,nmr),e(Ka,smr),e(Ka,Ybe),e(Ybe,lmr),e(Ka,imr),e(Ka,Kbe),e(Kbe,dmr),e(Ka,cmr),e(_o,fmr),e(_o,Wy),e(Wy,u7),e(u7,Zbe),e(Zbe,mmr),e(u7,gmr),e(u7,wQ),e(wQ,hmr),e(u7,pmr),e(Wy,umr),e(Wy,_7),e(_7,eve),e(eve,_mr),e(_7,bmr),e(_7,AQ),e(AQ,vmr),e(_7,Fmr),e(_o,Tmr),e(_o,b7),e(b7,Mmr),e(b7,ove),e(ove,Emr),e(b7,Cmr),e(b7,rve),e(rve,wmr),e(_o,Amr),M(v7,_o,null),b(f,mOe,_),b(f,zd,_),e(zd,F7),e(F7,tve),M(Qy,tve,null),e(zd,Lmr),e(zd,ave),e(ave,ymr),b(f,gOe,_),b(f,Jo,_),M(Hy,Jo,null),e(Jo,xmr),e(Jo,Wd),e(Wd,$mr),e(Wd,LQ),e(LQ,kmr),e(Wd,Smr),e(Wd,yQ),e(yQ,Rmr),e(Wd,Pmr),e(Jo,Bmr),e(Jo,Uy),e(Uy,Imr),e(Uy,nve),e(nve,Nmr),e(Uy,qmr),e(Jo,jmr),e(Jo,Lt),M(Jy,Lt,null),e(Lt,Dmr),e(Lt,sve),e(sve,Gmr),e(Lt,Omr),e(Lt,Qd),e(Qd,Vmr),e(Qd,lve),e(lve,Xmr),e(Qd,zmr),e(Qd,xQ),e(xQ,Wmr),e(Qd,Qmr),e(Lt,Hmr),M(T7,Lt,null),e(Jo,Umr),e(Jo,bo),M(Yy,bo,null),e(bo,Jmr),e(bo,ive),e(ive,Ymr),e(bo,Kmr),e(bo,Za),e(Za,Zmr),e(Za,dve),e(dve,egr),e(Za,ogr),e(Za,cve),e(cve,rgr),e(Za,tgr),e(Za,fve),e(fve,agr),e(Za,ngr),e(bo,sgr),e(bo,mve),e(mve,M7),e(M7,gve),e(gve,lgr),e(M7,igr),e(M7,$Q),e($Q,dgr),e(M7,cgr),e(bo,fgr),e(bo,E7),e(E7,mgr),e(E7,hve),e(hve,ggr),e(E7,hgr),e(E7,pve),e(pve,pgr),e(bo,ugr),M(C7,bo,null),b(f,hOe,_),b(f,Hd,_),e(Hd,w7),e(w7,uve),M(Ky,uve,null),e(Hd,_gr),e(Hd,_ve),e(_ve,bgr),b(f,pOe,_),b(f,Yo,_),M(Zy,Yo,null),e(Yo,vgr),e(Yo,Ud),e(Ud,Fgr),e(Ud,kQ),e(kQ,Tgr),e(Ud,Mgr),e(Ud,SQ),e(SQ,Egr),e(Ud,Cgr),e(Yo,wgr),e(Yo,e8),e(e8,Agr),e(e8,bve),e(bve,Lgr),e(e8,ygr),e(Yo,xgr),e(Yo,yt),M(o8,yt,null),e(yt,$gr),e(yt,vve),e(vve,kgr),e(yt,Sgr),e(yt,Jd),e(Jd,Rgr),e(Jd,Fve),e(Fve,Pgr),e(Jd,Bgr),e(Jd,RQ),e(RQ,Igr),e(Jd,Ngr),e(yt,qgr),M(A7,yt,null),e(Yo,jgr),e(Yo,vo),M(r8,vo,null),e(vo,Dgr),e(vo,Tve),e(Tve,Ggr),e(vo,Ogr),e(vo,en),e(en,Vgr),e(en,Mve),e(Mve,Xgr),e(en,zgr),e(en,Eve),e(Eve,Wgr),e(en,Qgr),e(en,Cve),e(Cve,Hgr),e(en,Ugr),e(vo,Jgr),e(vo,on),e(on,L7),e(L7,wve),e(wve,Ygr),e(L7,Kgr),e(L7,PQ),e(PQ,Zgr),e(L7,ehr),e(on,ohr),e(on,y7),e(y7,Ave),e(Ave,rhr),e(y7,thr),e(y7,BQ),e(BQ,ahr),e(y7,nhr),e(on,shr),e(on,x7),e(x7,Lve),e(Lve,lhr),e(x7,ihr),e(x7,IQ),e(IQ,dhr),e(x7,chr),e(on,fhr),e(on,$7),e($7,yve),e(yve,mhr),e($7,ghr),e($7,NQ),e(NQ,hhr),e($7,phr),e(vo,uhr),e(vo,k7),e(k7,_hr),e(k7,xve),e(xve,bhr),e(k7,vhr),e(k7,$ve),e($ve,Fhr),e(vo,Thr),M(S7,vo,null),b(f,uOe,_),b(f,Yd,_),e(Yd,R7),e(R7,kve),M(t8,kve,null),e(Yd,Mhr),e(Yd,Sve),e(Sve,Ehr),b(f,_Oe,_),b(f,Ko,_),M(a8,Ko,null),e(Ko,Chr),e(Ko,Kd),e(Kd,whr),e(Kd,qQ),e(qQ,Ahr),e(Kd,Lhr),e(Kd,jQ),e(jQ,yhr),e(Kd,xhr),e(Ko,$hr),e(Ko,n8),e(n8,khr),e(n8,Rve),e(Rve,Shr),e(n8,Rhr),e(Ko,Phr),e(Ko,xt),M(s8,xt,null),e(xt,Bhr),e(xt,Pve),e(Pve,Ihr),e(xt,Nhr),e(xt,Zd),e(Zd,qhr),e(Zd,Bve),e(Bve,jhr),e(Zd,Dhr),e(Zd,DQ),e(DQ,Ghr),e(Zd,Ohr),e(xt,Vhr),M(P7,xt,null),e(Ko,Xhr),e(Ko,Fo),M(l8,Fo,null),e(Fo,zhr),e(Fo,Ive),e(Ive,Whr),e(Fo,Qhr),e(Fo,rn),e(rn,Hhr),e(rn,Nve),e(Nve,Uhr),e(rn,Jhr),e(rn,qve),e(qve,Yhr),e(rn,Khr),e(rn,jve),e(jve,Zhr),e(rn,epr),e(Fo,opr),e(Fo,Dve),e(Dve,B7),e(B7,Gve),e(Gve,rpr),e(B7,tpr),e(B7,GQ),e(GQ,apr),e(B7,npr),e(Fo,spr),e(Fo,I7),e(I7,lpr),e(I7,Ove),e(Ove,ipr),e(I7,dpr),e(I7,Vve),e(Vve,cpr),e(Fo,fpr),M(N7,Fo,null),b(f,bOe,_),b(f,ec,_),e(ec,q7),e(q7,Xve),M(i8,Xve,null),e(ec,mpr),e(ec,zve),e(zve,gpr),b(f,vOe,_),b(f,Zo,_),M(d8,Zo,null),e(Zo,hpr),e(Zo,oc),e(oc,ppr),e(oc,OQ),e(OQ,upr),e(oc,_pr),e(oc,VQ),e(VQ,bpr),e(oc,vpr),e(Zo,Fpr),e(Zo,c8),e(c8,Tpr),e(c8,Wve),e(Wve,Mpr),e(c8,Epr),e(Zo,Cpr),e(Zo,$t),M(f8,$t,null),e($t,wpr),e($t,Qve),e(Qve,Apr),e($t,Lpr),e($t,rc),e(rc,ypr),e(rc,Hve),e(Hve,xpr),e(rc,$pr),e(rc,XQ),e(XQ,kpr),e(rc,Spr),e($t,Rpr),M(j7,$t,null),e(Zo,Ppr),e(Zo,Lr),M(m8,Lr,null),e(Lr,Bpr),e(Lr,Uve),e(Uve,Ipr),e(Lr,Npr),e(Lr,tn),e(tn,qpr),e(tn,Jve),e(Jve,jpr),e(tn,Dpr),e(tn,Yve),e(Yve,Gpr),e(tn,Opr),e(tn,Kve),e(Kve,Vpr),e(tn,Xpr),e(Lr,zpr),e(Lr,q),e(q,D7),e(D7,Zve),e(Zve,Wpr),e(D7,Qpr),e(D7,zQ),e(zQ,Hpr),e(D7,Upr),e(q,Jpr),e(q,G7),e(G7,e0e),e(e0e,Ypr),e(G7,Kpr),e(G7,WQ),e(WQ,Zpr),e(G7,eur),e(q,our),e(q,O7),e(O7,o0e),e(o0e,rur),e(O7,tur),e(O7,QQ),e(QQ,aur),e(O7,nur),e(q,sur),e(q,V7),e(V7,r0e),e(r0e,lur),e(V7,iur),e(V7,HQ),e(HQ,dur),e(V7,cur),e(q,fur),e(q,X7),e(X7,t0e),e(t0e,mur),e(X7,gur),e(X7,UQ),e(UQ,hur),e(X7,pur),e(q,uur),e(q,z7),e(z7,a0e),e(a0e,_ur),e(z7,bur),e(z7,JQ),e(JQ,vur),e(z7,Fur),e(q,Tur),e(q,W7),e(W7,n0e),e(n0e,Mur),e(W7,Eur),e(W7,YQ),e(YQ,Cur),e(W7,wur),e(q,Aur),e(q,Q7),e(Q7,s0e),e(s0e,Lur),e(Q7,yur),e(Q7,KQ),e(KQ,xur),e(Q7,$ur),e(q,kur),e(q,H7),e(H7,l0e),e(l0e,Sur),e(H7,Rur),e(H7,ZQ),e(ZQ,Pur),e(H7,Bur),e(q,Iur),e(q,U7),e(U7,i0e),e(i0e,Nur),e(U7,qur),e(U7,eH),e(eH,jur),e(U7,Dur),e(q,Gur),e(q,J7),e(J7,d0e),e(d0e,Our),e(J7,Vur),e(J7,oH),e(oH,Xur),e(J7,zur),e(q,Wur),e(q,Y7),e(Y7,c0e),e(c0e,Qur),e(Y7,Hur),e(Y7,rH),e(rH,Uur),e(Y7,Jur),e(q,Yur),e(q,K7),e(K7,f0e),e(f0e,Kur),e(K7,Zur),e(K7,tH),e(tH,e_r),e(K7,o_r),e(q,r_r),e(q,Z7),e(Z7,m0e),e(m0e,t_r),e(Z7,a_r),e(Z7,aH),e(aH,n_r),e(Z7,s_r),e(q,l_r),e(q,e9),e(e9,g0e),e(g0e,i_r),e(e9,d_r),e(e9,nH),e(nH,c_r),e(e9,f_r),e(q,m_r),e(q,o9),e(o9,h0e),e(h0e,g_r),e(o9,h_r),e(o9,sH),e(sH,p_r),e(o9,u_r),e(q,__r),e(q,r9),e(r9,p0e),e(p0e,b_r),e(r9,v_r),e(r9,lH),e(lH,F_r),e(r9,T_r),e(q,M_r),e(q,zs),e(zs,u0e),e(u0e,E_r),e(zs,C_r),e(zs,iH),e(iH,w_r),e(zs,A_r),e(zs,dH),e(dH,L_r),e(zs,y_r),e(q,x_r),e(q,t9),e(t9,_0e),e(_0e,$_r),e(t9,k_r),e(t9,cH),e(cH,S_r),e(t9,R_r),e(q,P_r),e(q,a9),e(a9,b0e),e(b0e,B_r),e(a9,I_r),e(a9,fH),e(fH,N_r),e(a9,q_r),e(q,j_r),e(q,n9),e(n9,v0e),e(v0e,D_r),e(n9,G_r),e(n9,mH),e(mH,O_r),e(n9,V_r),e(q,X_r),e(q,s9),e(s9,F0e),e(F0e,z_r),e(s9,W_r),e(s9,gH),e(gH,Q_r),e(s9,H_r),e(q,U_r),e(q,l9),e(l9,T0e),e(T0e,J_r),e(l9,Y_r),e(l9,hH),e(hH,K_r),e(l9,Z_r),e(q,e1r),e(q,i9),e(i9,M0e),e(M0e,o1r),e(i9,r1r),e(i9,pH),e(pH,t1r),e(i9,a1r),e(q,n1r),e(q,d9),e(d9,E0e),e(E0e,s1r),e(d9,l1r),e(d9,uH),e(uH,i1r),e(d9,d1r),e(q,c1r),e(q,c9),e(c9,C0e),e(C0e,f1r),e(c9,m1r),e(c9,_H),e(_H,g1r),e(c9,h1r),e(q,p1r),e(q,f9),e(f9,w0e),e(w0e,u1r),e(f9,_1r),e(f9,bH),e(bH,b1r),e(f9,v1r),e(q,F1r),e(q,m9),e(m9,A0e),e(A0e,T1r),e(m9,M1r),e(m9,vH),e(vH,E1r),e(m9,C1r),e(q,w1r),e(q,g9),e(g9,L0e),e(L0e,A1r),e(g9,L1r),e(g9,FH),e(FH,y1r),e(g9,x1r),e(q,$1r),e(q,h9),e(h9,y0e),e(y0e,k1r),e(h9,S1r),e(h9,TH),e(TH,R1r),e(h9,P1r),e(q,B1r),e(q,p9),e(p9,x0e),e(x0e,I1r),e(p9,N1r),e(p9,MH),e(MH,q1r),e(p9,j1r),e(q,D1r),e(q,u9),e(u9,$0e),e($0e,G1r),e(u9,O1r),e(u9,EH),e(EH,V1r),e(u9,X1r),e(q,z1r),e(q,_9),e(_9,k0e),e(k0e,W1r),e(_9,Q1r),e(_9,CH),e(CH,H1r),e(_9,U1r),e(q,J1r),e(q,b9),e(b9,S0e),e(S0e,Y1r),e(b9,K1r),e(b9,wH),e(wH,Z1r),e(b9,e2r),e(q,o2r),e(q,v9),e(v9,R0e),e(R0e,r2r),e(v9,t2r),e(v9,AH),e(AH,a2r),e(v9,n2r),e(q,s2r),e(q,F9),e(F9,P0e),e(P0e,l2r),e(F9,i2r),e(F9,LH),e(LH,d2r),e(F9,c2r),e(q,f2r),e(q,T9),e(T9,B0e),e(B0e,m2r),e(T9,g2r),e(T9,yH),e(yH,h2r),e(T9,p2r),e(q,u2r),e(q,M9),e(M9,I0e),e(I0e,_2r),e(M9,b2r),e(M9,xH),e(xH,v2r),e(M9,F2r),e(q,T2r),e(q,E9),e(E9,N0e),e(N0e,M2r),e(E9,E2r),e(E9,$H),e($H,C2r),e(E9,w2r),e(q,A2r),e(q,C9),e(C9,q0e),e(q0e,L2r),e(C9,y2r),e(C9,kH),e(kH,x2r),e(C9,$2r),e(q,k2r),e(q,w9),e(w9,j0e),e(j0e,S2r),e(w9,R2r),e(w9,SH),e(SH,P2r),e(w9,B2r),e(q,I2r),e(q,A9),e(A9,D0e),e(D0e,N2r),e(A9,q2r),e(A9,RH),e(RH,j2r),e(A9,D2r),e(q,G2r),e(q,L9),e(L9,G0e),e(G0e,O2r),e(L9,V2r),e(L9,PH),e(PH,X2r),e(L9,z2r),e(q,W2r),e(q,y9),e(y9,O0e),e(O0e,Q2r),e(y9,H2r),e(y9,BH),e(BH,U2r),e(y9,J2r),e(q,Y2r),e(q,x9),e(x9,V0e),e(V0e,K2r),e(x9,Z2r),e(x9,IH),e(IH,ebr),e(x9,obr),e(q,rbr),e(q,$9),e($9,X0e),e(X0e,tbr),e($9,abr),e($9,NH),e(NH,nbr),e($9,sbr),e(q,lbr),e(q,k9),e(k9,z0e),e(z0e,ibr),e(k9,dbr),e(k9,qH),e(qH,cbr),e(k9,fbr),e(Lr,mbr),M(S9,Lr,null),b(f,FOe,_),b(f,tc,_),e(tc,R9),e(R9,W0e),M(g8,W0e,null),e(tc,gbr),e(tc,Q0e),e(Q0e,hbr),b(f,TOe,_),b(f,er,_),M(h8,er,null),e(er,pbr),e(er,ac),e(ac,ubr),e(ac,jH),e(jH,_br),e(ac,bbr),e(ac,DH),e(DH,vbr),e(ac,Fbr),e(er,Tbr),e(er,p8),e(p8,Mbr),e(p8,H0e),e(H0e,Ebr),e(p8,Cbr),e(er,wbr),e(er,kt),M(u8,kt,null),e(kt,Abr),e(kt,U0e),e(U0e,Lbr),e(kt,ybr),e(kt,nc),e(nc,xbr),e(nc,J0e),e(J0e,$br),e(nc,kbr),e(nc,GH),e(GH,Sbr),e(nc,Rbr),e(kt,Pbr),M(P9,kt,null),e(er,Bbr),e(er,yr),M(_8,yr,null),e(yr,Ibr),e(yr,Y0e),e(Y0e,Nbr),e(yr,qbr),e(yr,an),e(an,jbr),e(an,K0e),e(K0e,Dbr),e(an,Gbr),e(an,Z0e),e(Z0e,Obr),e(an,Vbr),e(an,eFe),e(eFe,Xbr),e(an,zbr),e(yr,Wbr),e(yr,se),e(se,B9),e(B9,oFe),e(oFe,Qbr),e(B9,Hbr),e(B9,OH),e(OH,Ubr),e(B9,Jbr),e(se,Ybr),e(se,I9),e(I9,rFe),e(rFe,Kbr),e(I9,Zbr),e(I9,VH),e(VH,evr),e(I9,ovr),e(se,rvr),e(se,N9),e(N9,tFe),e(tFe,tvr),e(N9,avr),e(N9,XH),e(XH,nvr),e(N9,svr),e(se,lvr),e(se,q9),e(q9,aFe),e(aFe,ivr),e(q9,dvr),e(q9,zH),e(zH,cvr),e(q9,fvr),e(se,mvr),e(se,j9),e(j9,nFe),e(nFe,gvr),e(j9,hvr),e(j9,WH),e(WH,pvr),e(j9,uvr),e(se,_vr),e(se,D9),e(D9,sFe),e(sFe,bvr),e(D9,vvr),e(D9,QH),e(QH,Fvr),e(D9,Tvr),e(se,Mvr),e(se,G9),e(G9,lFe),e(lFe,Evr),e(G9,Cvr),e(G9,HH),e(HH,wvr),e(G9,Avr),e(se,Lvr),e(se,O9),e(O9,iFe),e(iFe,yvr),e(O9,xvr),e(O9,UH),e(UH,$vr),e(O9,kvr),e(se,Svr),e(se,V9),e(V9,dFe),e(dFe,Rvr),e(V9,Pvr),e(V9,JH),e(JH,Bvr),e(V9,Ivr),e(se,Nvr),e(se,X9),e(X9,cFe),e(cFe,qvr),e(X9,jvr),e(X9,YH),e(YH,Dvr),e(X9,Gvr),e(se,Ovr),e(se,z9),e(z9,fFe),e(fFe,Vvr),e(z9,Xvr),e(z9,KH),e(KH,zvr),e(z9,Wvr),e(se,Qvr),e(se,W9),e(W9,mFe),e(mFe,Hvr),e(W9,Uvr),e(W9,ZH),e(ZH,Jvr),e(W9,Yvr),e(se,Kvr),e(se,Q9),e(Q9,gFe),e(gFe,Zvr),e(Q9,e0r),e(Q9,eU),e(eU,o0r),e(Q9,r0r),e(se,t0r),e(se,H9),e(H9,hFe),e(hFe,a0r),e(H9,n0r),e(H9,oU),e(oU,s0r),e(H9,l0r),e(se,i0r),e(se,U9),e(U9,pFe),e(pFe,d0r),e(U9,c0r),e(U9,rU),e(rU,f0r),e(U9,m0r),e(se,g0r),e(se,J9),e(J9,uFe),e(uFe,h0r),e(J9,p0r),e(J9,tU),e(tU,u0r),e(J9,_0r),e(se,b0r),e(se,Y9),e(Y9,_Fe),e(_Fe,v0r),e(Y9,F0r),e(Y9,aU),e(aU,T0r),e(Y9,M0r),e(se,E0r),e(se,K9),e(K9,bFe),e(bFe,C0r),e(K9,w0r),e(K9,nU),e(nU,A0r),e(K9,L0r),e(se,y0r),e(se,Z9),e(Z9,vFe),e(vFe,x0r),e(Z9,$0r),e(Z9,sU),e(sU,k0r),e(Z9,S0r),e(se,R0r),e(se,eM),e(eM,FFe),e(FFe,P0r),e(eM,B0r),e(eM,lU),e(lU,I0r),e(eM,N0r),e(se,q0r),e(se,oM),e(oM,TFe),e(TFe,j0r),e(oM,D0r),e(oM,iU),e(iU,G0r),e(oM,O0r),e(se,V0r),e(se,rM),e(rM,MFe),e(MFe,X0r),e(rM,z0r),e(rM,dU),e(dU,W0r),e(rM,Q0r),e(se,H0r),e(se,tM),e(tM,EFe),e(EFe,U0r),e(tM,J0r),e(tM,cU),e(cU,Y0r),e(tM,K0r),e(yr,Z0r),M(aM,yr,null),b(f,MOe,_),b(f,sc,_),e(sc,nM),e(nM,CFe),M(b8,CFe,null),e(sc,eFr),e(sc,wFe),e(wFe,oFr),b(f,EOe,_),b(f,or,_),M(v8,or,null),e(or,rFr),e(or,lc),e(lc,tFr),e(lc,fU),e(fU,aFr),e(lc,nFr),e(lc,mU),e(mU,sFr),e(lc,lFr),e(or,iFr),e(or,F8),e(F8,dFr),e(F8,AFe),e(AFe,cFr),e(F8,fFr),e(or,mFr),e(or,St),M(T8,St,null),e(St,gFr),e(St,LFe),e(LFe,hFr),e(St,pFr),e(St,ic),e(ic,uFr),e(ic,yFe),e(yFe,_Fr),e(ic,bFr),e(ic,gU),e(gU,vFr),e(ic,FFr),e(St,TFr),M(sM,St,null),e(or,MFr),e(or,xr),M(M8,xr,null),e(xr,EFr),e(xr,xFe),e(xFe,CFr),e(xr,wFr),e(xr,nn),e(nn,AFr),e(nn,$Fe),e($Fe,LFr),e(nn,yFr),e(nn,kFe),e(kFe,xFr),e(nn,$Fr),e(nn,SFe),e(SFe,kFr),e(nn,SFr),e(xr,RFr),e(xr,Me),e(Me,lM),e(lM,RFe),e(RFe,PFr),e(lM,BFr),e(lM,hU),e(hU,IFr),e(lM,NFr),e(Me,qFr),e(Me,iM),e(iM,PFe),e(PFe,jFr),e(iM,DFr),e(iM,pU),e(pU,GFr),e(iM,OFr),e(Me,VFr),e(Me,dM),e(dM,BFe),e(BFe,XFr),e(dM,zFr),e(dM,uU),e(uU,WFr),e(dM,QFr),e(Me,HFr),e(Me,cM),e(cM,IFe),e(IFe,UFr),e(cM,JFr),e(cM,_U),e(_U,YFr),e(cM,KFr),e(Me,ZFr),e(Me,fM),e(fM,NFe),e(NFe,eTr),e(fM,oTr),e(fM,bU),e(bU,rTr),e(fM,tTr),e(Me,aTr),e(Me,mM),e(mM,qFe),e(qFe,nTr),e(mM,sTr),e(mM,vU),e(vU,lTr),e(mM,iTr),e(Me,dTr),e(Me,gM),e(gM,jFe),e(jFe,cTr),e(gM,fTr),e(gM,FU),e(FU,mTr),e(gM,gTr),e(Me,hTr),e(Me,hM),e(hM,DFe),e(DFe,pTr),e(hM,uTr),e(hM,TU),e(TU,_Tr),e(hM,bTr),e(Me,vTr),e(Me,pM),e(pM,GFe),e(GFe,FTr),e(pM,TTr),e(pM,MU),e(MU,MTr),e(pM,ETr),e(Me,CTr),e(Me,uM),e(uM,OFe),e(OFe,wTr),e(uM,ATr),e(uM,EU),e(EU,LTr),e(uM,yTr),e(Me,xTr),e(Me,_M),e(_M,VFe),e(VFe,$Tr),e(_M,kTr),e(_M,CU),e(CU,STr),e(_M,RTr),e(Me,PTr),e(Me,bM),e(bM,XFe),e(XFe,BTr),e(bM,ITr),e(bM,wU),e(wU,NTr),e(bM,qTr),e(Me,jTr),e(Me,vM),e(vM,zFe),e(zFe,DTr),e(vM,GTr),e(vM,AU),e(AU,OTr),e(vM,VTr),e(xr,XTr),M(FM,xr,null),b(f,COe,_),b(f,dc,_),e(dc,TM),e(TM,WFe),M(E8,WFe,null),e(dc,zTr),e(dc,QFe),e(QFe,WTr),b(f,wOe,_),b(f,rr,_),M(C8,rr,null),e(rr,QTr),e(rr,cc),e(cc,HTr),e(cc,LU),e(LU,UTr),e(cc,JTr),e(cc,yU),e(yU,YTr),e(cc,KTr),e(rr,ZTr),e(rr,w8),e(w8,e7r),e(w8,HFe),e(HFe,o7r),e(w8,r7r),e(rr,t7r),e(rr,Rt),M(A8,Rt,null),e(Rt,a7r),e(Rt,UFe),e(UFe,n7r),e(Rt,s7r),e(Rt,fc),e(fc,l7r),e(fc,JFe),e(JFe,i7r),e(fc,d7r),e(fc,xU),e(xU,c7r),e(fc,f7r),e(Rt,m7r),M(MM,Rt,null),e(rr,g7r),e(rr,$r),M(L8,$r,null),e($r,h7r),e($r,YFe),e(YFe,p7r),e($r,u7r),e($r,sn),e(sn,_7r),e(sn,KFe),e(KFe,b7r),e(sn,v7r),e(sn,ZFe),e(ZFe,F7r),e(sn,T7r),e(sn,eTe),e(eTe,M7r),e(sn,E7r),e($r,C7r),e($r,ln),e(ln,EM),e(EM,oTe),e(oTe,w7r),e(EM,A7r),e(EM,$U),e($U,L7r),e(EM,y7r),e(ln,x7r),e(ln,CM),e(CM,rTe),e(rTe,$7r),e(CM,k7r),e(CM,kU),e(kU,S7r),e(CM,R7r),e(ln,P7r),e(ln,wM),e(wM,tTe),e(tTe,B7r),e(wM,I7r),e(wM,SU),e(SU,N7r),e(wM,q7r),e(ln,j7r),e(ln,AM),e(AM,aTe),e(aTe,D7r),e(AM,G7r),e(AM,RU),e(RU,O7r),e(AM,V7r),e($r,X7r),M(LM,$r,null),b(f,AOe,_),b(f,mc,_),e(mc,yM),e(yM,nTe),M(y8,nTe,null),e(mc,z7r),e(mc,sTe),e(sTe,W7r),b(f,LOe,_),b(f,tr,_),M(x8,tr,null),e(tr,Q7r),e(tr,gc),e(gc,H7r),e(gc,PU),e(PU,U7r),e(gc,J7r),e(gc,BU),e(BU,Y7r),e(gc,K7r),e(tr,Z7r),e(tr,$8),e($8,e9r),e($8,lTe),e(lTe,o9r),e($8,r9r),e(tr,t9r),e(tr,Pt),M(k8,Pt,null),e(Pt,a9r),e(Pt,iTe),e(iTe,n9r),e(Pt,s9r),e(Pt,hc),e(hc,l9r),e(hc,dTe),e(dTe,i9r),e(hc,d9r),e(hc,IU),e(IU,c9r),e(hc,f9r),e(Pt,m9r),M(xM,Pt,null),e(tr,g9r),e(tr,kr),M(S8,kr,null),e(kr,h9r),e(kr,cTe),e(cTe,p9r),e(kr,u9r),e(kr,dn),e(dn,_9r),e(dn,fTe),e(fTe,b9r),e(dn,v9r),e(dn,mTe),e(mTe,F9r),e(dn,T9r),e(dn,gTe),e(gTe,M9r),e(dn,E9r),e(kr,C9r),e(kr,ie),e(ie,$M),e($M,hTe),e(hTe,w9r),e($M,A9r),e($M,NU),e(NU,L9r),e($M,y9r),e(ie,x9r),e(ie,kM),e(kM,pTe),e(pTe,$9r),e(kM,k9r),e(kM,qU),e(qU,S9r),e(kM,R9r),e(ie,P9r),e(ie,SM),e(SM,uTe),e(uTe,B9r),e(SM,I9r),e(SM,jU),e(jU,N9r),e(SM,q9r),e(ie,j9r),e(ie,RM),e(RM,_Te),e(_Te,D9r),e(RM,G9r),e(RM,DU),e(DU,O9r),e(RM,V9r),e(ie,X9r),e(ie,PM),e(PM,bTe),e(bTe,z9r),e(PM,W9r),e(PM,GU),e(GU,Q9r),e(PM,H9r),e(ie,U9r),e(ie,BM),e(BM,vTe),e(vTe,J9r),e(BM,Y9r),e(BM,OU),e(OU,K9r),e(BM,Z9r),e(ie,eMr),e(ie,IM),e(IM,FTe),e(FTe,oMr),e(IM,rMr),e(IM,VU),e(VU,tMr),e(IM,aMr),e(ie,nMr),e(ie,NM),e(NM,TTe),e(TTe,sMr),e(NM,lMr),e(NM,XU),e(XU,iMr),e(NM,dMr),e(ie,cMr),e(ie,qM),e(qM,MTe),e(MTe,fMr),e(qM,mMr),e(qM,zU),e(zU,gMr),e(qM,hMr),e(ie,pMr),e(ie,jM),e(jM,ETe),e(ETe,uMr),e(jM,_Mr),e(jM,WU),e(WU,bMr),e(jM,vMr),e(ie,FMr),e(ie,DM),e(DM,CTe),e(CTe,TMr),e(DM,MMr),e(DM,QU),e(QU,EMr),e(DM,CMr),e(ie,wMr),e(ie,GM),e(GM,wTe),e(wTe,AMr),e(GM,LMr),e(GM,HU),e(HU,yMr),e(GM,xMr),e(ie,$Mr),e(ie,OM),e(OM,ATe),e(ATe,kMr),e(OM,SMr),e(OM,UU),e(UU,RMr),e(OM,PMr),e(ie,BMr),e(ie,VM),e(VM,LTe),e(LTe,IMr),e(VM,NMr),e(VM,JU),e(JU,qMr),e(VM,jMr),e(ie,DMr),e(ie,XM),e(XM,yTe),e(yTe,GMr),e(XM,OMr),e(XM,YU),e(YU,VMr),e(XM,XMr),e(ie,zMr),e(ie,zM),e(zM,xTe),e(xTe,WMr),e(zM,QMr),e(zM,KU),e(KU,HMr),e(zM,UMr),e(ie,JMr),e(ie,WM),e(WM,$Te),e($Te,YMr),e(WM,KMr),e(WM,ZU),e(ZU,ZMr),e(WM,eEr),e(ie,oEr),e(ie,QM),e(QM,kTe),e(kTe,rEr),e(QM,tEr),e(QM,eJ),e(eJ,aEr),e(QM,nEr),e(ie,sEr),e(ie,HM),e(HM,STe),e(STe,lEr),e(HM,iEr),e(HM,oJ),e(oJ,dEr),e(HM,cEr),e(ie,fEr),e(ie,UM),e(UM,RTe),e(RTe,mEr),e(UM,gEr),e(UM,rJ),e(rJ,hEr),e(UM,pEr),e(kr,uEr),M(JM,kr,null),b(f,yOe,_),b(f,pc,_),e(pc,YM),e(YM,PTe),M(R8,PTe,null),e(pc,_Er),e(pc,BTe),e(BTe,bEr),b(f,xOe,_),b(f,ar,_),M(P8,ar,null),e(ar,vEr),e(ar,uc),e(uc,FEr),e(uc,tJ),e(tJ,TEr),e(uc,MEr),e(uc,aJ),e(aJ,EEr),e(uc,CEr),e(ar,wEr),e(ar,B8),e(B8,AEr),e(B8,ITe),e(ITe,LEr),e(B8,yEr),e(ar,xEr),e(ar,Bt),M(I8,Bt,null),e(Bt,$Er),e(Bt,NTe),e(NTe,kEr),e(Bt,SEr),e(Bt,_c),e(_c,REr),e(_c,qTe),e(qTe,PEr),e(_c,BEr),e(_c,nJ),e(nJ,IEr),e(_c,NEr),e(Bt,qEr),M(KM,Bt,null),e(ar,jEr),e(ar,Sr),M(N8,Sr,null),e(Sr,DEr),e(Sr,jTe),e(jTe,GEr),e(Sr,OEr),e(Sr,cn),e(cn,VEr),e(cn,DTe),e(DTe,XEr),e(cn,zEr),e(cn,GTe),e(GTe,WEr),e(cn,QEr),e(cn,OTe),e(OTe,HEr),e(cn,UEr),e(Sr,JEr),e(Sr,ye),e(ye,ZM),e(ZM,VTe),e(VTe,YEr),e(ZM,KEr),e(ZM,sJ),e(sJ,ZEr),e(ZM,e4r),e(ye,o4r),e(ye,eE),e(eE,XTe),e(XTe,r4r),e(eE,t4r),e(eE,lJ),e(lJ,a4r),e(eE,n4r),e(ye,s4r),e(ye,oE),e(oE,zTe),e(zTe,l4r),e(oE,i4r),e(oE,iJ),e(iJ,d4r),e(oE,c4r),e(ye,f4r),e(ye,rE),e(rE,WTe),e(WTe,m4r),e(rE,g4r),e(rE,dJ),e(dJ,h4r),e(rE,p4r),e(ye,u4r),e(ye,tE),e(tE,QTe),e(QTe,_4r),e(tE,b4r),e(tE,cJ),e(cJ,v4r),e(tE,F4r),e(ye,T4r),e(ye,aE),e(aE,HTe),e(HTe,M4r),e(aE,E4r),e(aE,fJ),e(fJ,C4r),e(aE,w4r),e(ye,A4r),e(ye,nE),e(nE,UTe),e(UTe,L4r),e(nE,y4r),e(nE,mJ),e(mJ,x4r),e(nE,$4r),e(ye,k4r),e(ye,sE),e(sE,JTe),e(JTe,S4r),e(sE,R4r),e(sE,gJ),e(gJ,P4r),e(sE,B4r),e(ye,I4r),e(ye,lE),e(lE,YTe),e(YTe,N4r),e(lE,q4r),e(lE,hJ),e(hJ,j4r),e(lE,D4r),e(ye,G4r),e(ye,iE),e(iE,KTe),e(KTe,O4r),e(iE,V4r),e(iE,pJ),e(pJ,X4r),e(iE,z4r),e(Sr,W4r),M(dE,Sr,null),b(f,$Oe,_),b(f,bc,_),e(bc,cE),e(cE,ZTe),M(q8,ZTe,null),e(bc,Q4r),e(bc,e7e),e(e7e,H4r),b(f,kOe,_),b(f,nr,_),M(j8,nr,null),e(nr,U4r),e(nr,vc),e(vc,J4r),e(vc,uJ),e(uJ,Y4r),e(vc,K4r),e(vc,_J),e(_J,Z4r),e(vc,eCr),e(nr,oCr),e(nr,D8),e(D8,rCr),e(D8,o7e),e(o7e,tCr),e(D8,aCr),e(nr,nCr),e(nr,It),M(G8,It,null),e(It,sCr),e(It,r7e),e(r7e,lCr),e(It,iCr),e(It,Fc),e(Fc,dCr),e(Fc,t7e),e(t7e,cCr),e(Fc,fCr),e(Fc,bJ),e(bJ,mCr),e(Fc,gCr),e(It,hCr),M(fE,It,null),e(nr,pCr),e(nr,Rr),M(O8,Rr,null),e(Rr,uCr),e(Rr,a7e),e(a7e,_Cr),e(Rr,bCr),e(Rr,fn),e(fn,vCr),e(fn,n7e),e(n7e,FCr),e(fn,TCr),e(fn,s7e),e(s7e,MCr),e(fn,ECr),e(fn,l7e),e(l7e,CCr),e(fn,wCr),e(Rr,ACr),e(Rr,te),e(te,mE),e(mE,i7e),e(i7e,LCr),e(mE,yCr),e(mE,vJ),e(vJ,xCr),e(mE,$Cr),e(te,kCr),e(te,gE),e(gE,d7e),e(d7e,SCr),e(gE,RCr),e(gE,FJ),e(FJ,PCr),e(gE,BCr),e(te,ICr),e(te,hE),e(hE,c7e),e(c7e,NCr),e(hE,qCr),e(hE,TJ),e(TJ,jCr),e(hE,DCr),e(te,GCr),e(te,pE),e(pE,f7e),e(f7e,OCr),e(pE,VCr),e(pE,MJ),e(MJ,XCr),e(pE,zCr),e(te,WCr),e(te,uE),e(uE,m7e),e(m7e,QCr),e(uE,HCr),e(uE,EJ),e(EJ,UCr),e(uE,JCr),e(te,YCr),e(te,_E),e(_E,g7e),e(g7e,KCr),e(_E,ZCr),e(_E,CJ),e(CJ,e5r),e(_E,o5r),e(te,r5r),e(te,bE),e(bE,h7e),e(h7e,t5r),e(bE,a5r),e(bE,wJ),e(wJ,n5r),e(bE,s5r),e(te,l5r),e(te,vE),e(vE,p7e),e(p7e,i5r),e(vE,d5r),e(vE,AJ),e(AJ,c5r),e(vE,f5r),e(te,m5r),e(te,FE),e(FE,u7e),e(u7e,g5r),e(FE,h5r),e(FE,LJ),e(LJ,p5r),e(FE,u5r),e(te,_5r),e(te,TE),e(TE,_7e),e(_7e,b5r),e(TE,v5r),e(TE,yJ),e(yJ,F5r),e(TE,T5r),e(te,M5r),e(te,ME),e(ME,b7e),e(b7e,E5r),e(ME,C5r),e(ME,xJ),e(xJ,w5r),e(ME,A5r),e(te,L5r),e(te,EE),e(EE,v7e),e(v7e,y5r),e(EE,x5r),e(EE,$J),e($J,$5r),e(EE,k5r),e(te,S5r),e(te,CE),e(CE,F7e),e(F7e,R5r),e(CE,P5r),e(CE,kJ),e(kJ,B5r),e(CE,I5r),e(te,N5r),e(te,wE),e(wE,T7e),e(T7e,q5r),e(wE,j5r),e(wE,SJ),e(SJ,D5r),e(wE,G5r),e(te,O5r),e(te,AE),e(AE,M7e),e(M7e,V5r),e(AE,X5r),e(AE,RJ),e(RJ,z5r),e(AE,W5r),e(te,Q5r),e(te,LE),e(LE,E7e),e(E7e,H5r),e(LE,U5r),e(LE,PJ),e(PJ,J5r),e(LE,Y5r),e(te,K5r),e(te,yE),e(yE,C7e),e(C7e,Z5r),e(yE,e3r),e(yE,BJ),e(BJ,o3r),e(yE,r3r),e(te,t3r),e(te,xE),e(xE,w7e),e(w7e,a3r),e(xE,n3r),e(xE,IJ),e(IJ,s3r),e(xE,l3r),e(te,i3r),e(te,$E),e($E,A7e),e(A7e,d3r),e($E,c3r),e($E,NJ),e(NJ,f3r),e($E,m3r),e(te,g3r),e(te,kE),e(kE,L7e),e(L7e,h3r),e(kE,p3r),e(kE,qJ),e(qJ,u3r),e(kE,_3r),e(te,b3r),e(te,SE),e(SE,y7e),e(y7e,v3r),e(SE,F3r),e(SE,jJ),e(jJ,T3r),e(SE,M3r),e(te,E3r),e(te,RE),e(RE,x7e),e(x7e,C3r),e(RE,w3r),e(RE,DJ),e(DJ,A3r),e(RE,L3r),e(te,y3r),e(te,PE),e(PE,$7e),e($7e,x3r),e(PE,$3r),e(PE,GJ),e(GJ,k3r),e(PE,S3r),e(te,R3r),e(te,BE),e(BE,k7e),e(k7e,P3r),e(BE,B3r),e(BE,OJ),e(OJ,I3r),e(BE,N3r),e(te,q3r),e(te,IE),e(IE,S7e),e(S7e,j3r),e(IE,D3r),e(IE,VJ),e(VJ,G3r),e(IE,O3r),e(te,V3r),e(te,NE),e(NE,R7e),e(R7e,X3r),e(NE,z3r),e(NE,XJ),e(XJ,W3r),e(NE,Q3r),e(Rr,H3r),M(qE,Rr,null),b(f,SOe,_),b(f,Tc,_),e(Tc,jE),e(jE,P7e),M(V8,P7e,null),e(Tc,U3r),e(Tc,B7e),e(B7e,J3r),b(f,ROe,_),b(f,sr,_),M(X8,sr,null),e(sr,Y3r),e(sr,Mc),e(Mc,K3r),e(Mc,zJ),e(zJ,Z3r),e(Mc,ewr),e(Mc,WJ),e(WJ,owr),e(Mc,rwr),e(sr,twr),e(sr,z8),e(z8,awr),e(z8,I7e),e(I7e,nwr),e(z8,swr),e(sr,lwr),e(sr,Nt),M(W8,Nt,null),e(Nt,iwr),e(Nt,N7e),e(N7e,dwr),e(Nt,cwr),e(Nt,Ec),e(Ec,fwr),e(Ec,q7e),e(q7e,mwr),e(Ec,gwr),e(Ec,QJ),e(QJ,hwr),e(Ec,pwr),e(Nt,uwr),M(DE,Nt,null),e(sr,_wr),e(sr,Pr),M(Q8,Pr,null),e(Pr,bwr),e(Pr,j7e),e(j7e,vwr),e(Pr,Fwr),e(Pr,mn),e(mn,Twr),e(mn,D7e),e(D7e,Mwr),e(mn,Ewr),e(mn,G7e),e(G7e,Cwr),e(mn,wwr),e(mn,O7e),e(O7e,Awr),e(mn,Lwr),e(Pr,ywr),e(Pr,ue),e(ue,GE),e(GE,V7e),e(V7e,xwr),e(GE,$wr),e(GE,HJ),e(HJ,kwr),e(GE,Swr),e(ue,Rwr),e(ue,OE),e(OE,X7e),e(X7e,Pwr),e(OE,Bwr),e(OE,UJ),e(UJ,Iwr),e(OE,Nwr),e(ue,qwr),e(ue,VE),e(VE,z7e),e(z7e,jwr),e(VE,Dwr),e(VE,JJ),e(JJ,Gwr),e(VE,Owr),e(ue,Vwr),e(ue,XE),e(XE,W7e),e(W7e,Xwr),e(XE,zwr),e(XE,YJ),e(YJ,Wwr),e(XE,Qwr),e(ue,Hwr),e(ue,zE),e(zE,Q7e),e(Q7e,Uwr),e(zE,Jwr),e(zE,KJ),e(KJ,Ywr),e(zE,Kwr),e(ue,Zwr),e(ue,WE),e(WE,H7e),e(H7e,eAr),e(WE,oAr),e(WE,ZJ),e(ZJ,rAr),e(WE,tAr),e(ue,aAr),e(ue,QE),e(QE,U7e),e(U7e,nAr),e(QE,sAr),e(QE,eY),e(eY,lAr),e(QE,iAr),e(ue,dAr),e(ue,HE),e(HE,J7e),e(J7e,cAr),e(HE,fAr),e(HE,oY),e(oY,mAr),e(HE,gAr),e(ue,hAr),e(ue,UE),e(UE,Y7e),e(Y7e,pAr),e(UE,uAr),e(UE,rY),e(rY,_Ar),e(UE,bAr),e(ue,vAr),e(ue,JE),e(JE,K7e),e(K7e,FAr),e(JE,TAr),e(JE,tY),e(tY,MAr),e(JE,EAr),e(ue,CAr),e(ue,YE),e(YE,Z7e),e(Z7e,wAr),e(YE,AAr),e(YE,aY),e(aY,LAr),e(YE,yAr),e(ue,xAr),e(ue,KE),e(KE,e9e),e(e9e,$Ar),e(KE,kAr),e(KE,nY),e(nY,SAr),e(KE,RAr),e(ue,PAr),e(ue,ZE),e(ZE,o9e),e(o9e,BAr),e(ZE,IAr),e(ZE,sY),e(sY,NAr),e(ZE,qAr),e(ue,jAr),e(ue,e4),e(e4,r9e),e(r9e,DAr),e(e4,GAr),e(e4,lY),e(lY,OAr),e(e4,VAr),e(ue,XAr),e(ue,o4),e(o4,t9e),e(t9e,zAr),e(o4,WAr),e(o4,iY),e(iY,QAr),e(o4,HAr),e(ue,UAr),e(ue,r4),e(r4,a9e),e(a9e,JAr),e(r4,YAr),e(r4,dY),e(dY,KAr),e(r4,ZAr),e(ue,e6r),e(ue,t4),e(t4,n9e),e(n9e,o6r),e(t4,r6r),e(t4,cY),e(cY,t6r),e(t4,a6r),e(Pr,n6r),M(a4,Pr,null),b(f,POe,_),b(f,Cc,_),e(Cc,n4),e(n4,s9e),M(H8,s9e,null),e(Cc,s6r),e(Cc,l9e),e(l9e,l6r),b(f,BOe,_),b(f,lr,_),M(U8,lr,null),e(lr,i6r),e(lr,wc),e(wc,d6r),e(wc,fY),e(fY,c6r),e(wc,f6r),e(wc,mY),e(mY,m6r),e(wc,g6r),e(lr,h6r),e(lr,J8),e(J8,p6r),e(J8,i9e),e(i9e,u6r),e(J8,_6r),e(lr,b6r),e(lr,qt),M(Y8,qt,null),e(qt,v6r),e(qt,d9e),e(d9e,F6r),e(qt,T6r),e(qt,Ac),e(Ac,M6r),e(Ac,c9e),e(c9e,E6r),e(Ac,C6r),e(Ac,gY),e(gY,w6r),e(Ac,A6r),e(qt,L6r),M(s4,qt,null),e(lr,y6r),e(lr,Br),M(K8,Br,null),e(Br,x6r),e(Br,f9e),e(f9e,$6r),e(Br,k6r),e(Br,gn),e(gn,S6r),e(gn,m9e),e(m9e,R6r),e(gn,P6r),e(gn,g9e),e(g9e,B6r),e(gn,I6r),e(gn,h9e),e(h9e,N6r),e(gn,q6r),e(Br,j6r),e(Br,Z8),e(Z8,l4),e(l4,p9e),e(p9e,D6r),e(l4,G6r),e(l4,hY),e(hY,O6r),e(l4,V6r),e(Z8,X6r),e(Z8,i4),e(i4,u9e),e(u9e,z6r),e(i4,W6r),e(i4,pY),e(pY,Q6r),e(i4,H6r),e(Br,U6r),M(d4,Br,null),b(f,IOe,_),b(f,Lc,_),e(Lc,c4),e(c4,_9e),M(ex,_9e,null),e(Lc,J6r),e(Lc,b9e),e(b9e,Y6r),b(f,NOe,_),b(f,ir,_),M(ox,ir,null),e(ir,K6r),e(ir,yc),e(yc,Z6r),e(yc,uY),e(uY,eLr),e(yc,oLr),e(yc,_Y),e(_Y,rLr),e(yc,tLr),e(ir,aLr),e(ir,rx),e(rx,nLr),e(rx,v9e),e(v9e,sLr),e(rx,lLr),e(ir,iLr),e(ir,jt),M(tx,jt,null),e(jt,dLr),e(jt,F9e),e(F9e,cLr),e(jt,fLr),e(jt,xc),e(xc,mLr),e(xc,T9e),e(T9e,gLr),e(xc,hLr),e(xc,bY),e(bY,pLr),e(xc,uLr),e(jt,_Lr),M(f4,jt,null),e(ir,bLr),e(ir,Ir),M(ax,Ir,null),e(Ir,vLr),e(Ir,M9e),e(M9e,FLr),e(Ir,TLr),e(Ir,hn),e(hn,MLr),e(hn,E9e),e(E9e,ELr),e(hn,CLr),e(hn,C9e),e(C9e,wLr),e(hn,ALr),e(hn,w9e),e(w9e,LLr),e(hn,yLr),e(Ir,xLr),e(Ir,A9e),e(A9e,m4),e(m4,L9e),e(L9e,$Lr),e(m4,kLr),e(m4,vY),e(vY,SLr),e(m4,RLr),e(Ir,PLr),M(g4,Ir,null),b(f,qOe,_),b(f,$c,_),e($c,h4),e(h4,y9e),M(nx,y9e,null),e($c,BLr),e($c,x9e),e(x9e,ILr),b(f,jOe,_),b(f,dr,_),M(sx,dr,null),e(dr,NLr),e(dr,kc),e(kc,qLr),e(kc,FY),e(FY,jLr),e(kc,DLr),e(kc,TY),e(TY,GLr),e(kc,OLr),e(dr,VLr),e(dr,lx),e(lx,XLr),e(lx,$9e),e($9e,zLr),e(lx,WLr),e(dr,QLr),e(dr,Dt),M(ix,Dt,null),e(Dt,HLr),e(Dt,k9e),e(k9e,ULr),e(Dt,JLr),e(Dt,Sc),e(Sc,YLr),e(Sc,S9e),e(S9e,KLr),e(Sc,ZLr),e(Sc,MY),e(MY,eyr),e(Sc,oyr),e(Dt,ryr),M(p4,Dt,null),e(dr,tyr),e(dr,Nr),M(dx,Nr,null),e(Nr,ayr),e(Nr,R9e),e(R9e,nyr),e(Nr,syr),e(Nr,pn),e(pn,lyr),e(pn,P9e),e(P9e,iyr),e(pn,dyr),e(pn,B9e),e(B9e,cyr),e(pn,fyr),e(pn,I9e),e(I9e,myr),e(pn,gyr),e(Nr,hyr),e(Nr,de),e(de,u4),e(u4,N9e),e(N9e,pyr),e(u4,uyr),e(u4,EY),e(EY,_yr),e(u4,byr),e(de,vyr),e(de,_4),e(_4,q9e),e(q9e,Fyr),e(_4,Tyr),e(_4,CY),e(CY,Myr),e(_4,Eyr),e(de,Cyr),e(de,b4),e(b4,j9e),e(j9e,wyr),e(b4,Ayr),e(b4,wY),e(wY,Lyr),e(b4,yyr),e(de,xyr),e(de,v4),e(v4,D9e),e(D9e,$yr),e(v4,kyr),e(v4,AY),e(AY,Syr),e(v4,Ryr),e(de,Pyr),e(de,F4),e(F4,G9e),e(G9e,Byr),e(F4,Iyr),e(F4,LY),e(LY,Nyr),e(F4,qyr),e(de,jyr),e(de,T4),e(T4,O9e),e(O9e,Dyr),e(T4,Gyr),e(T4,yY),e(yY,Oyr),e(T4,Vyr),e(de,Xyr),e(de,M4),e(M4,V9e),e(V9e,zyr),e(M4,Wyr),e(M4,xY),e(xY,Qyr),e(M4,Hyr),e(de,Uyr),e(de,E4),e(E4,X9e),e(X9e,Jyr),e(E4,Yyr),e(E4,$Y),e($Y,Kyr),e(E4,Zyr),e(de,e8r),e(de,C4),e(C4,z9e),e(z9e,o8r),e(C4,r8r),e(C4,kY),e(kY,t8r),e(C4,a8r),e(de,n8r),e(de,w4),e(w4,W9e),e(W9e,s8r),e(w4,l8r),e(w4,SY),e(SY,i8r),e(w4,d8r),e(de,c8r),e(de,A4),e(A4,Q9e),e(Q9e,f8r),e(A4,m8r),e(A4,RY),e(RY,g8r),e(A4,h8r),e(de,p8r),e(de,L4),e(L4,H9e),e(H9e,u8r),e(L4,_8r),e(L4,PY),e(PY,b8r),e(L4,v8r),e(de,F8r),e(de,y4),e(y4,U9e),e(U9e,T8r),e(y4,M8r),e(y4,BY),e(BY,E8r),e(y4,C8r),e(de,w8r),e(de,x4),e(x4,J9e),e(J9e,A8r),e(x4,L8r),e(x4,IY),e(IY,y8r),e(x4,x8r),e(de,$8r),e(de,$4),e($4,Y9e),e(Y9e,k8r),e($4,S8r),e($4,NY),e(NY,R8r),e($4,P8r),e(de,B8r),e(de,k4),e(k4,K9e),e(K9e,I8r),e(k4,N8r),e(k4,qY),e(qY,q8r),e(k4,j8r),e(de,D8r),e(de,S4),e(S4,Z9e),e(Z9e,G8r),e(S4,O8r),e(S4,jY),e(jY,V8r),e(S4,X8r),e(de,z8r),e(de,R4),e(R4,eMe),e(eMe,W8r),e(R4,Q8r),e(R4,DY),e(DY,H8r),e(R4,U8r),e(de,J8r),e(de,P4),e(P4,oMe),e(oMe,Y8r),e(P4,K8r),e(P4,GY),e(GY,Z8r),e(P4,exr),e(de,oxr),e(de,B4),e(B4,rMe),e(rMe,rxr),e(B4,txr),e(B4,OY),e(OY,axr),e(B4,nxr),e(Nr,sxr),M(I4,Nr,null),b(f,DOe,_),b(f,Rc,_),e(Rc,N4),e(N4,tMe),M(cx,tMe,null),e(Rc,lxr),e(Rc,aMe),e(aMe,ixr),b(f,GOe,_),b(f,cr,_),M(fx,cr,null),e(cr,dxr),e(cr,Pc),e(Pc,cxr),e(Pc,VY),e(VY,fxr),e(Pc,mxr),e(Pc,XY),e(XY,gxr),e(Pc,hxr),e(cr,pxr),e(cr,mx),e(mx,uxr),e(mx,nMe),e(nMe,_xr),e(mx,bxr),e(cr,vxr),e(cr,Gt),M(gx,Gt,null),e(Gt,Fxr),e(Gt,sMe),e(sMe,Txr),e(Gt,Mxr),e(Gt,Bc),e(Bc,Exr),e(Bc,lMe),e(lMe,Cxr),e(Bc,wxr),e(Bc,zY),e(zY,Axr),e(Bc,Lxr),e(Gt,yxr),M(q4,Gt,null),e(cr,xxr),e(cr,qr),M(hx,qr,null),e(qr,$xr),e(qr,iMe),e(iMe,kxr),e(qr,Sxr),e(qr,un),e(un,Rxr),e(un,dMe),e(dMe,Pxr),e(un,Bxr),e(un,cMe),e(cMe,Ixr),e(un,Nxr),e(un,fMe),e(fMe,qxr),e(un,jxr),e(qr,Dxr),e(qr,ce),e(ce,j4),e(j4,mMe),e(mMe,Gxr),e(j4,Oxr),e(j4,WY),e(WY,Vxr),e(j4,Xxr),e(ce,zxr),e(ce,D4),e(D4,gMe),e(gMe,Wxr),e(D4,Qxr),e(D4,QY),e(QY,Hxr),e(D4,Uxr),e(ce,Jxr),e(ce,G4),e(G4,hMe),e(hMe,Yxr),e(G4,Kxr),e(G4,HY),e(HY,Zxr),e(G4,e$r),e(ce,o$r),e(ce,O4),e(O4,pMe),e(pMe,r$r),e(O4,t$r),e(O4,UY),e(UY,a$r),e(O4,n$r),e(ce,s$r),e(ce,V4),e(V4,uMe),e(uMe,l$r),e(V4,i$r),e(V4,JY),e(JY,d$r),e(V4,c$r),e(ce,f$r),e(ce,X4),e(X4,_Me),e(_Me,m$r),e(X4,g$r),e(X4,YY),e(YY,h$r),e(X4,p$r),e(ce,u$r),e(ce,z4),e(z4,bMe),e(bMe,_$r),e(z4,b$r),e(z4,KY),e(KY,v$r),e(z4,F$r),e(ce,T$r),e(ce,W4),e(W4,vMe),e(vMe,M$r),e(W4,E$r),e(W4,ZY),e(ZY,C$r),e(W4,w$r),e(ce,A$r),e(ce,Q4),e(Q4,FMe),e(FMe,L$r),e(Q4,y$r),e(Q4,eK),e(eK,x$r),e(Q4,$$r),e(ce,k$r),e(ce,H4),e(H4,TMe),e(TMe,S$r),e(H4,R$r),e(H4,oK),e(oK,P$r),e(H4,B$r),e(ce,I$r),e(ce,U4),e(U4,MMe),e(MMe,N$r),e(U4,q$r),e(U4,rK),e(rK,j$r),e(U4,D$r),e(ce,G$r),e(ce,J4),e(J4,EMe),e(EMe,O$r),e(J4,V$r),e(J4,tK),e(tK,X$r),e(J4,z$r),e(ce,W$r),e(ce,Y4),e(Y4,CMe),e(CMe,Q$r),e(Y4,H$r),e(Y4,aK),e(aK,U$r),e(Y4,J$r),e(ce,Y$r),e(ce,K4),e(K4,wMe),e(wMe,K$r),e(K4,Z$r),e(K4,nK),e(nK,ekr),e(K4,okr),e(ce,rkr),e(ce,Z4),e(Z4,AMe),e(AMe,tkr),e(Z4,akr),e(Z4,sK),e(sK,nkr),e(Z4,skr),e(ce,lkr),e(ce,eC),e(eC,LMe),e(LMe,ikr),e(eC,dkr),e(eC,lK),e(lK,ckr),e(eC,fkr),e(ce,mkr),e(ce,oC),e(oC,yMe),e(yMe,gkr),e(oC,hkr),e(oC,iK),e(iK,pkr),e(oC,ukr),e(ce,_kr),e(ce,rC),e(rC,xMe),e(xMe,bkr),e(rC,vkr),e(rC,dK),e(dK,Fkr),e(rC,Tkr),e(ce,Mkr),e(ce,tC),e(tC,$Me),e($Me,Ekr),e(tC,Ckr),e(tC,cK),e(cK,wkr),e(tC,Akr),e(ce,Lkr),e(ce,aC),e(aC,kMe),e(kMe,ykr),e(aC,xkr),e(aC,fK),e(fK,$kr),e(aC,kkr),e(qr,Skr),M(nC,qr,null),b(f,OOe,_),b(f,Ic,_),e(Ic,sC),e(sC,SMe),M(px,SMe,null),e(Ic,Rkr),e(Ic,RMe),e(RMe,Pkr),b(f,VOe,_),b(f,fr,_),M(ux,fr,null),e(fr,Bkr),e(fr,Nc),e(Nc,Ikr),e(Nc,mK),e(mK,Nkr),e(Nc,qkr),e(Nc,gK),e(gK,jkr),e(Nc,Dkr),e(fr,Gkr),e(fr,_x),e(_x,Okr),e(_x,PMe),e(PMe,Vkr),e(_x,Xkr),e(fr,zkr),e(fr,Ot),M(bx,Ot,null),e(Ot,Wkr),e(Ot,BMe),e(BMe,Qkr),e(Ot,Hkr),e(Ot,qc),e(qc,Ukr),e(qc,IMe),e(IMe,Jkr),e(qc,Ykr),e(qc,hK),e(hK,Kkr),e(qc,Zkr),e(Ot,eSr),M(lC,Ot,null),e(fr,oSr),e(fr,jr),M(vx,jr,null),e(jr,rSr),e(jr,NMe),e(NMe,tSr),e(jr,aSr),e(jr,_n),e(_n,nSr),e(_n,qMe),e(qMe,sSr),e(_n,lSr),e(_n,jMe),e(jMe,iSr),e(_n,dSr),e(_n,DMe),e(DMe,cSr),e(_n,fSr),e(jr,mSr),e(jr,GMe),e(GMe,iC),e(iC,OMe),e(OMe,gSr),e(iC,hSr),e(iC,pK),e(pK,pSr),e(iC,uSr),e(jr,_Sr),M(dC,jr,null),b(f,XOe,_),b(f,jc,_),e(jc,cC),e(cC,VMe),M(Fx,VMe,null),e(jc,bSr),e(jc,XMe),e(XMe,vSr),b(f,zOe,_),b(f,mr,_),M(Tx,mr,null),e(mr,FSr),e(mr,Dc),e(Dc,TSr),e(Dc,uK),e(uK,MSr),e(Dc,ESr),e(Dc,_K),e(_K,CSr),e(Dc,wSr),e(mr,ASr),e(mr,Mx),e(Mx,LSr),e(Mx,zMe),e(zMe,ySr),e(Mx,xSr),e(mr,$Sr),e(mr,Vt),M(Ex,Vt,null),e(Vt,kSr),e(Vt,WMe),e(WMe,SSr),e(Vt,RSr),e(Vt,Gc),e(Gc,PSr),e(Gc,QMe),e(QMe,BSr),e(Gc,ISr),e(Gc,bK),e(bK,NSr),e(Gc,qSr),e(Vt,jSr),M(fC,Vt,null),e(mr,DSr),e(mr,Dr),M(Cx,Dr,null),e(Dr,GSr),e(Dr,HMe),e(HMe,OSr),e(Dr,VSr),e(Dr,bn),e(bn,XSr),e(bn,UMe),e(UMe,zSr),e(bn,WSr),e(bn,JMe),e(JMe,QSr),e(bn,HSr),e(bn,YMe),e(YMe,USr),e(bn,JSr),e(Dr,YSr),e(Dr,KMe),e(KMe,mC),e(mC,ZMe),e(ZMe,KSr),e(mC,ZSr),e(mC,vK),e(vK,eRr),e(mC,oRr),e(Dr,rRr),M(gC,Dr,null),b(f,WOe,_),b(f,Oc,_),e(Oc,hC),e(hC,eEe),M(wx,eEe,null),e(Oc,tRr),e(Oc,oEe),e(oEe,aRr),b(f,QOe,_),b(f,gr,_),M(Ax,gr,null),e(gr,nRr),e(gr,Vc),e(Vc,sRr),e(Vc,FK),e(FK,lRr),e(Vc,iRr),e(Vc,TK),e(TK,dRr),e(Vc,cRr),e(gr,fRr),e(gr,Lx),e(Lx,mRr),e(Lx,rEe),e(rEe,gRr),e(Lx,hRr),e(gr,pRr),e(gr,Xt),M(yx,Xt,null),e(Xt,uRr),e(Xt,tEe),e(tEe,_Rr),e(Xt,bRr),e(Xt,Xc),e(Xc,vRr),e(Xc,aEe),e(aEe,FRr),e(Xc,TRr),e(Xc,MK),e(MK,MRr),e(Xc,ERr),e(Xt,CRr),M(pC,Xt,null),e(gr,wRr),e(gr,Gr),M(xx,Gr,null),e(Gr,ARr),e(Gr,nEe),e(nEe,LRr),e(Gr,yRr),e(Gr,vn),e(vn,xRr),e(vn,sEe),e(sEe,$Rr),e(vn,kRr),e(vn,lEe),e(lEe,SRr),e(vn,RRr),e(vn,iEe),e(iEe,PRr),e(vn,BRr),e(Gr,IRr),e(Gr,oe),e(oe,uC),e(uC,dEe),e(dEe,NRr),e(uC,qRr),e(uC,EK),e(EK,jRr),e(uC,DRr),e(oe,GRr),e(oe,_C),e(_C,cEe),e(cEe,ORr),e(_C,VRr),e(_C,CK),e(CK,XRr),e(_C,zRr),e(oe,WRr),e(oe,bC),e(bC,fEe),e(fEe,QRr),e(bC,HRr),e(bC,wK),e(wK,URr),e(bC,JRr),e(oe,YRr),e(oe,vC),e(vC,mEe),e(mEe,KRr),e(vC,ZRr),e(vC,AK),e(AK,ePr),e(vC,oPr),e(oe,rPr),e(oe,FC),e(FC,gEe),e(gEe,tPr),e(FC,aPr),e(FC,LK),e(LK,nPr),e(FC,sPr),e(oe,lPr),e(oe,TC),e(TC,hEe),e(hEe,iPr),e(TC,dPr),e(TC,yK),e(yK,cPr),e(TC,fPr),e(oe,mPr),e(oe,MC),e(MC,pEe),e(pEe,gPr),e(MC,hPr),e(MC,xK),e(xK,pPr),e(MC,uPr),e(oe,_Pr),e(oe,EC),e(EC,uEe),e(uEe,bPr),e(EC,vPr),e(EC,$K),e($K,FPr),e(EC,TPr),e(oe,MPr),e(oe,CC),e(CC,_Ee),e(_Ee,EPr),e(CC,CPr),e(CC,kK),e(kK,wPr),e(CC,APr),e(oe,LPr),e(oe,wC),e(wC,bEe),e(bEe,yPr),e(wC,xPr),e(wC,SK),e(SK,$Pr),e(wC,kPr),e(oe,SPr),e(oe,AC),e(AC,vEe),e(vEe,RPr),e(AC,PPr),e(AC,RK),e(RK,BPr),e(AC,IPr),e(oe,NPr),e(oe,LC),e(LC,FEe),e(FEe,qPr),e(LC,jPr),e(LC,PK),e(PK,DPr),e(LC,GPr),e(oe,OPr),e(oe,yC),e(yC,TEe),e(TEe,VPr),e(yC,XPr),e(yC,BK),e(BK,zPr),e(yC,WPr),e(oe,QPr),e(oe,xC),e(xC,MEe),e(MEe,HPr),e(xC,UPr),e(xC,IK),e(IK,JPr),e(xC,YPr),e(oe,KPr),e(oe,$C),e($C,EEe),e(EEe,ZPr),e($C,eBr),e($C,NK),e(NK,oBr),e($C,rBr),e(oe,tBr),e(oe,kC),e(kC,CEe),e(CEe,aBr),e(kC,nBr),e(kC,qK),e(qK,sBr),e(kC,lBr),e(oe,iBr),e(oe,SC),e(SC,wEe),e(wEe,dBr),e(SC,cBr),e(SC,jK),e(jK,fBr),e(SC,mBr),e(oe,gBr),e(oe,RC),e(RC,AEe),e(AEe,hBr),e(RC,pBr),e(RC,DK),e(DK,uBr),e(RC,_Br),e(oe,bBr),e(oe,PC),e(PC,LEe),e(LEe,vBr),e(PC,FBr),e(PC,GK),e(GK,TBr),e(PC,MBr),e(oe,EBr),e(oe,BC),e(BC,yEe),e(yEe,CBr),e(BC,wBr),e(BC,OK),e(OK,ABr),e(BC,LBr),e(oe,yBr),e(oe,IC),e(IC,xEe),e(xEe,xBr),e(IC,$Br),e(IC,VK),e(VK,kBr),e(IC,SBr),e(oe,RBr),e(oe,NC),e(NC,$Ee),e($Ee,PBr),e(NC,BBr),e(NC,XK),e(XK,IBr),e(NC,NBr),e(oe,qBr),e(oe,qC),e(qC,kEe),e(kEe,jBr),e(qC,DBr),e(qC,zK),e(zK,GBr),e(qC,OBr),e(oe,VBr),e(oe,jC),e(jC,SEe),e(SEe,XBr),e(jC,zBr),e(jC,WK),e(WK,WBr),e(jC,QBr),e(oe,HBr),e(oe,DC),e(DC,REe),e(REe,UBr),e(DC,JBr),e(DC,QK),e(QK,YBr),e(DC,KBr),e(oe,ZBr),e(oe,GC),e(GC,PEe),e(PEe,eIr),e(GC,oIr),e(GC,HK),e(HK,rIr),e(GC,tIr),e(oe,aIr),e(oe,OC),e(OC,BEe),e(BEe,nIr),e(OC,sIr),e(OC,UK),e(UK,lIr),e(OC,iIr),e(Gr,dIr),M(VC,Gr,null),b(f,HOe,_),b(f,zc,_),e(zc,XC),e(XC,IEe),M($x,IEe,null),e(zc,cIr),e(zc,NEe),e(NEe,fIr),b(f,UOe,_),b(f,hr,_),M(kx,hr,null),e(hr,mIr),e(hr,Wc),e(Wc,gIr),e(Wc,JK),e(JK,hIr),e(Wc,pIr),e(Wc,YK),e(YK,uIr),e(Wc,_Ir),e(hr,bIr),e(hr,Sx),e(Sx,vIr),e(Sx,qEe),e(qEe,FIr),e(Sx,TIr),e(hr,MIr),e(hr,zt),M(Rx,zt,null),e(zt,EIr),e(zt,jEe),e(jEe,CIr),e(zt,wIr),e(zt,Qc),e(Qc,AIr),e(Qc,DEe),e(DEe,LIr),e(Qc,yIr),e(Qc,KK),e(KK,xIr),e(Qc,$Ir),e(zt,kIr),M(zC,zt,null),e(hr,SIr),e(hr,Or),M(Px,Or,null),e(Or,RIr),e(Or,GEe),e(GEe,PIr),e(Or,BIr),e(Or,Fn),e(Fn,IIr),e(Fn,OEe),e(OEe,NIr),e(Fn,qIr),e(Fn,VEe),e(VEe,jIr),e(Fn,DIr),e(Fn,XEe),e(XEe,GIr),e(Fn,OIr),e(Or,VIr),e(Or,xe),e(xe,WC),e(WC,zEe),e(zEe,XIr),e(WC,zIr),e(WC,ZK),e(ZK,WIr),e(WC,QIr),e(xe,HIr),e(xe,QC),e(QC,WEe),e(WEe,UIr),e(QC,JIr),e(QC,eZ),e(eZ,YIr),e(QC,KIr),e(xe,ZIr),e(xe,HC),e(HC,QEe),e(QEe,eNr),e(HC,oNr),e(HC,oZ),e(oZ,rNr),e(HC,tNr),e(xe,aNr),e(xe,UC),e(UC,HEe),e(HEe,nNr),e(UC,sNr),e(UC,rZ),e(rZ,lNr),e(UC,iNr),e(xe,dNr),e(xe,JC),e(JC,UEe),e(UEe,cNr),e(JC,fNr),e(JC,tZ),e(tZ,mNr),e(JC,gNr),e(xe,hNr),e(xe,YC),e(YC,JEe),e(JEe,pNr),e(YC,uNr),e(YC,aZ),e(aZ,_Nr),e(YC,bNr),e(xe,vNr),e(xe,KC),e(KC,YEe),e(YEe,FNr),e(KC,TNr),e(KC,nZ),e(nZ,MNr),e(KC,ENr),e(xe,CNr),e(xe,ZC),e(ZC,KEe),e(KEe,wNr),e(ZC,ANr),e(ZC,sZ),e(sZ,LNr),e(ZC,yNr),e(xe,xNr),e(xe,e5),e(e5,ZEe),e(ZEe,$Nr),e(e5,kNr),e(e5,lZ),e(lZ,SNr),e(e5,RNr),e(xe,PNr),e(xe,o5),e(o5,e4e),e(e4e,BNr),e(o5,INr),e(o5,iZ),e(iZ,NNr),e(o5,qNr),e(Or,jNr),M(r5,Or,null),b(f,JOe,_),b(f,Hc,_),e(Hc,t5),e(t5,o4e),M(Bx,o4e,null),e(Hc,DNr),e(Hc,r4e),e(r4e,GNr),b(f,YOe,_),b(f,pr,_),M(Ix,pr,null),e(pr,ONr),e(pr,Uc),e(Uc,VNr),e(Uc,dZ),e(dZ,XNr),e(Uc,zNr),e(Uc,cZ),e(cZ,WNr),e(Uc,QNr),e(pr,HNr),e(pr,Nx),e(Nx,UNr),e(Nx,t4e),e(t4e,JNr),e(Nx,YNr),e(pr,KNr),e(pr,Wt),M(qx,Wt,null),e(Wt,ZNr),e(Wt,a4e),e(a4e,eqr),e(Wt,oqr),e(Wt,Jc),e(Jc,rqr),e(Jc,n4e),e(n4e,tqr),e(Jc,aqr),e(Jc,fZ),e(fZ,nqr),e(Jc,sqr),e(Wt,lqr),M(a5,Wt,null),e(pr,iqr),e(pr,Vr),M(jx,Vr,null),e(Vr,dqr),e(Vr,s4e),e(s4e,cqr),e(Vr,fqr),e(Vr,Tn),e(Tn,mqr),e(Tn,l4e),e(l4e,gqr),e(Tn,hqr),e(Tn,i4e),e(i4e,pqr),e(Tn,uqr),e(Tn,d4e),e(d4e,_qr),e(Tn,bqr),e(Vr,vqr),e(Vr,Ee),e(Ee,n5),e(n5,c4e),e(c4e,Fqr),e(n5,Tqr),e(n5,mZ),e(mZ,Mqr),e(n5,Eqr),e(Ee,Cqr),e(Ee,s5),e(s5,f4e),e(f4e,wqr),e(s5,Aqr),e(s5,gZ),e(gZ,Lqr),e(s5,yqr),e(Ee,xqr),e(Ee,l5),e(l5,m4e),e(m4e,$qr),e(l5,kqr),e(l5,hZ),e(hZ,Sqr),e(l5,Rqr),e(Ee,Pqr),e(Ee,i5),e(i5,g4e),e(g4e,Bqr),e(i5,Iqr),e(i5,pZ),e(pZ,Nqr),e(i5,qqr),e(Ee,jqr),e(Ee,d5),e(d5,h4e),e(h4e,Dqr),e(d5,Gqr),e(d5,uZ),e(uZ,Oqr),e(d5,Vqr),e(Ee,Xqr),e(Ee,c5),e(c5,p4e),e(p4e,zqr),e(c5,Wqr),e(c5,_Z),e(_Z,Qqr),e(c5,Hqr),e(Ee,Uqr),e(Ee,f5),e(f5,u4e),e(u4e,Jqr),e(f5,Yqr),e(f5,bZ),e(bZ,Kqr),e(f5,Zqr),e(Ee,ejr),e(Ee,m5),e(m5,_4e),e(_4e,ojr),e(m5,rjr),e(m5,vZ),e(vZ,tjr),e(m5,ajr),e(Ee,njr),e(Ee,g5),e(g5,b4e),e(b4e,sjr),e(g5,ljr),e(g5,FZ),e(FZ,ijr),e(g5,djr),e(Ee,cjr),e(Ee,h5),e(h5,v4e),e(v4e,fjr),e(h5,mjr),e(h5,TZ),e(TZ,gjr),e(h5,hjr),e(Ee,pjr),e(Ee,p5),e(p5,F4e),e(F4e,ujr),e(p5,_jr),e(p5,MZ),e(MZ,bjr),e(p5,vjr),e(Ee,Fjr),e(Ee,u5),e(u5,T4e),e(T4e,Tjr),e(u5,Mjr),e(u5,EZ),e(EZ,Ejr),e(u5,Cjr),e(Ee,wjr),e(Ee,_5),e(_5,M4e),e(M4e,Ajr),e(_5,Ljr),e(_5,CZ),e(CZ,yjr),e(_5,xjr),e(Vr,$jr),M(b5,Vr,null),b(f,KOe,_),b(f,Yc,_),e(Yc,v5),e(v5,E4e),M(Dx,E4e,null),e(Yc,kjr),e(Yc,C4e),e(C4e,Sjr),b(f,ZOe,_),b(f,ur,_),M(Gx,ur,null),e(ur,Rjr),e(ur,Kc),e(Kc,Pjr),e(Kc,wZ),e(wZ,Bjr),e(Kc,Ijr),e(Kc,AZ),e(AZ,Njr),e(Kc,qjr),e(ur,jjr),e(ur,Ox),e(Ox,Djr),e(Ox,w4e),e(w4e,Gjr),e(Ox,Ojr),e(ur,Vjr),e(ur,Qt),M(Vx,Qt,null),e(Qt,Xjr),e(Qt,A4e),e(A4e,zjr),e(Qt,Wjr),e(Qt,Zc),e(Zc,Qjr),e(Zc,L4e),e(L4e,Hjr),e(Zc,Ujr),e(Zc,LZ),e(LZ,Jjr),e(Zc,Yjr),e(Qt,Kjr),M(F5,Qt,null),e(ur,Zjr),e(ur,Xr),M(Xx,Xr,null),e(Xr,eDr),e(Xr,y4e),e(y4e,oDr),e(Xr,rDr),e(Xr,Mn),e(Mn,tDr),e(Mn,x4e),e(x4e,aDr),e(Mn,nDr),e(Mn,$4e),e($4e,sDr),e(Mn,lDr),e(Mn,k4e),e(k4e,iDr),e(Mn,dDr),e(Xr,cDr),e(Xr,$e),e($e,T5),e(T5,S4e),e(S4e,fDr),e(T5,mDr),e(T5,yZ),e(yZ,gDr),e(T5,hDr),e($e,pDr),e($e,M5),e(M5,R4e),e(R4e,uDr),e(M5,_Dr),e(M5,xZ),e(xZ,bDr),e(M5,vDr),e($e,FDr),e($e,E5),e(E5,P4e),e(P4e,TDr),e(E5,MDr),e(E5,$Z),e($Z,EDr),e(E5,CDr),e($e,wDr),e($e,C5),e(C5,B4e),e(B4e,ADr),e(C5,LDr),e(C5,kZ),e(kZ,yDr),e(C5,xDr),e($e,$Dr),e($e,w5),e(w5,I4e),e(I4e,kDr),e(w5,SDr),e(w5,SZ),e(SZ,RDr),e(w5,PDr),e($e,BDr),e($e,A5),e(A5,N4e),e(N4e,IDr),e(A5,NDr),e(A5,RZ),e(RZ,qDr),e(A5,jDr),e($e,DDr),e($e,L5),e(L5,q4e),e(q4e,GDr),e(L5,ODr),e(L5,PZ),e(PZ,VDr),e(L5,XDr),e($e,zDr),e($e,y5),e(y5,j4e),e(j4e,WDr),e(y5,QDr),e(y5,BZ),e(BZ,HDr),e(y5,UDr),e($e,JDr),e($e,x5),e(x5,D4e),e(D4e,YDr),e(x5,KDr),e(x5,IZ),e(IZ,ZDr),e(x5,eGr),e($e,oGr),e($e,$5),e($5,G4e),e(G4e,rGr),e($5,tGr),e($5,NZ),e(NZ,aGr),e($5,nGr),e(Xr,sGr),M(k5,Xr,null),b(f,eVe,_),b(f,ef,_),e(ef,S5),e(S5,O4e),M(zx,O4e,null),e(ef,lGr),e(ef,V4e),e(V4e,iGr),b(f,oVe,_),b(f,_r,_),M(Wx,_r,null),e(_r,dGr),e(_r,of),e(of,cGr),e(of,qZ),e(qZ,fGr),e(of,mGr),e(of,jZ),e(jZ,gGr),e(of,hGr),e(_r,pGr),e(_r,Qx),e(Qx,uGr),e(Qx,X4e),e(X4e,_Gr),e(Qx,bGr),e(_r,vGr),e(_r,Ht),M(Hx,Ht,null),e(Ht,FGr),e(Ht,z4e),e(z4e,TGr),e(Ht,MGr),e(Ht,rf),e(rf,EGr),e(rf,W4e),e(W4e,CGr),e(rf,wGr),e(rf,DZ),e(DZ,AGr),e(rf,LGr),e(Ht,yGr),M(R5,Ht,null),e(_r,xGr),e(_r,zr),M(Ux,zr,null),e(zr,$Gr),e(zr,Q4e),e(Q4e,kGr),e(zr,SGr),e(zr,En),e(En,RGr),e(En,H4e),e(H4e,PGr),e(En,BGr),e(En,U4e),e(U4e,IGr),e(En,NGr),e(En,J4e),e(J4e,qGr),e(En,jGr),e(zr,DGr),e(zr,ke),e(ke,P5),e(P5,Y4e),e(Y4e,GGr),e(P5,OGr),e(P5,GZ),e(GZ,VGr),e(P5,XGr),e(ke,zGr),e(ke,B5),e(B5,K4e),e(K4e,WGr),e(B5,QGr),e(B5,OZ),e(OZ,HGr),e(B5,UGr),e(ke,JGr),e(ke,I5),e(I5,Z4e),e(Z4e,YGr),e(I5,KGr),e(I5,VZ),e(VZ,ZGr),e(I5,eOr),e(ke,oOr),e(ke,N5),e(N5,eCe),e(eCe,rOr),e(N5,tOr),e(N5,XZ),e(XZ,aOr),e(N5,nOr),e(ke,sOr),e(ke,q5),e(q5,oCe),e(oCe,lOr),e(q5,iOr),e(q5,zZ),e(zZ,dOr),e(q5,cOr),e(ke,fOr),e(ke,j5),e(j5,rCe),e(rCe,mOr),e(j5,gOr),e(j5,WZ),e(WZ,hOr),e(j5,pOr),e(ke,uOr),e(ke,D5),e(D5,tCe),e(tCe,_Or),e(D5,bOr),e(D5,QZ),e(QZ,vOr),e(D5,FOr),e(ke,TOr),e(ke,G5),e(G5,aCe),e(aCe,MOr),e(G5,EOr),e(G5,HZ),e(HZ,COr),e(G5,wOr),e(ke,AOr),e(ke,O5),e(O5,nCe),e(nCe,LOr),e(O5,yOr),e(O5,UZ),e(UZ,xOr),e(O5,$Or),e(ke,kOr),e(ke,V5),e(V5,sCe),e(sCe,SOr),e(V5,ROr),e(V5,JZ),e(JZ,POr),e(V5,BOr),e(zr,IOr),M(X5,zr,null),b(f,rVe,_),b(f,tf,_),e(tf,z5),e(z5,lCe),M(Jx,lCe,null),e(tf,NOr),e(tf,iCe),e(iCe,qOr),b(f,tVe,_),b(f,br,_),M(Yx,br,null),e(br,jOr),e(br,af),e(af,DOr),e(af,YZ),e(YZ,GOr),e(af,OOr),e(af,KZ),e(KZ,VOr),e(af,XOr),e(br,zOr),e(br,Kx),e(Kx,WOr),e(Kx,dCe),e(dCe,QOr),e(Kx,HOr),e(br,UOr),e(br,Ut),M(Zx,Ut,null),e(Ut,JOr),e(Ut,cCe),e(cCe,YOr),e(Ut,KOr),e(Ut,nf),e(nf,ZOr),e(nf,fCe),e(fCe,eVr),e(nf,oVr),e(nf,ZZ),e(ZZ,rVr),e(nf,tVr),e(Ut,aVr),M(W5,Ut,null),e(br,nVr),e(br,Wr),M(e$,Wr,null),e(Wr,sVr),e(Wr,mCe),e(mCe,lVr),e(Wr,iVr),e(Wr,Cn),e(Cn,dVr),e(Cn,gCe),e(gCe,cVr),e(Cn,fVr),e(Cn,hCe),e(hCe,mVr),e(Cn,gVr),e(Cn,pCe),e(pCe,hVr),e(Cn,pVr),e(Wr,uVr),e(Wr,Se),e(Se,Q5),e(Q5,uCe),e(uCe,_Vr),e(Q5,bVr),e(Q5,eee),e(eee,vVr),e(Q5,FVr),e(Se,TVr),e(Se,H5),e(H5,_Ce),e(_Ce,MVr),e(H5,EVr),e(H5,oee),e(oee,CVr),e(H5,wVr),e(Se,AVr),e(Se,U5),e(U5,bCe),e(bCe,LVr),e(U5,yVr),e(U5,ree),e(ree,xVr),e(U5,$Vr),e(Se,kVr),e(Se,J5),e(J5,vCe),e(vCe,SVr),e(J5,RVr),e(J5,tee),e(tee,PVr),e(J5,BVr),e(Se,IVr),e(Se,Y5),e(Y5,FCe),e(FCe,NVr),e(Y5,qVr),e(Y5,aee),e(aee,jVr),e(Y5,DVr),e(Se,GVr),e(Se,K5),e(K5,TCe),e(TCe,OVr),e(K5,VVr),e(K5,nee),e(nee,XVr),e(K5,zVr),e(Se,WVr),e(Se,Z5),e(Z5,MCe),e(MCe,QVr),e(Z5,HVr),e(Z5,see),e(see,UVr),e(Z5,JVr),e(Se,YVr),e(Se,e3),e(e3,ECe),e(ECe,KVr),e(e3,ZVr),e(e3,lee),e(lee,eXr),e(e3,oXr),e(Se,rXr),e(Se,o3),e(o3,CCe),e(CCe,tXr),e(o3,aXr),e(o3,iee),e(iee,nXr),e(o3,sXr),e(Se,lXr),e(Se,r3),e(r3,wCe),e(wCe,iXr),e(r3,dXr),e(r3,dee),e(dee,cXr),e(r3,fXr),e(Wr,mXr),M(t3,Wr,null),b(f,aVe,_),b(f,sf,_),e(sf,a3),e(a3,ACe),M(o$,ACe,null),e(sf,gXr),e(sf,LCe),e(LCe,hXr),b(f,nVe,_),b(f,vr,_),M(r$,vr,null),e(vr,pXr),e(vr,lf),e(lf,uXr),e(lf,cee),e(cee,_Xr),e(lf,bXr),e(lf,fee),e(fee,vXr),e(lf,FXr),e(vr,TXr),e(vr,t$),e(t$,MXr),e(t$,yCe),e(yCe,EXr),e(t$,CXr),e(vr,wXr),e(vr,Jt),M(a$,Jt,null),e(Jt,AXr),e(Jt,xCe),e(xCe,LXr),e(Jt,yXr),e(Jt,df),e(df,xXr),e(df,$Ce),e($Ce,$Xr),e(df,kXr),e(df,mee),e(mee,SXr),e(df,RXr),e(Jt,PXr),M(n3,Jt,null),e(vr,BXr),e(vr,Qr),M(n$,Qr,null),e(Qr,IXr),e(Qr,kCe),e(kCe,NXr),e(Qr,qXr),e(Qr,wn),e(wn,jXr),e(wn,SCe),e(SCe,DXr),e(wn,GXr),e(wn,RCe),e(RCe,OXr),e(wn,VXr),e(wn,PCe),e(PCe,XXr),e(wn,zXr),e(Qr,WXr),e(Qr,Re),e(Re,s3),e(s3,BCe),e(BCe,QXr),e(s3,HXr),e(s3,gee),e(gee,UXr),e(s3,JXr),e(Re,YXr),e(Re,l3),e(l3,ICe),e(ICe,KXr),e(l3,ZXr),e(l3,hee),e(hee,ezr),e(l3,ozr),e(Re,rzr),e(Re,i3),e(i3,NCe),e(NCe,tzr),e(i3,azr),e(i3,pee),e(pee,nzr),e(i3,szr),e(Re,lzr),e(Re,d3),e(d3,qCe),e(qCe,izr),e(d3,dzr),e(d3,uee),e(uee,czr),e(d3,fzr),e(Re,mzr),e(Re,c3),e(c3,jCe),e(jCe,gzr),e(c3,hzr),e(c3,_ee),e(_ee,pzr),e(c3,uzr),e(Re,_zr),e(Re,f3),e(f3,DCe),e(DCe,bzr),e(f3,vzr),e(f3,bee),e(bee,Fzr),e(f3,Tzr),e(Re,Mzr),e(Re,m3),e(m3,GCe),e(GCe,Ezr),e(m3,Czr),e(m3,vee),e(vee,wzr),e(m3,Azr),e(Re,Lzr),e(Re,g3),e(g3,OCe),e(OCe,yzr),e(g3,xzr),e(g3,Fee),e(Fee,$zr),e(g3,kzr),e(Re,Szr),e(Re,h3),e(h3,VCe),e(VCe,Rzr),e(h3,Pzr),e(h3,Tee),e(Tee,Bzr),e(h3,Izr),e(Re,Nzr),e(Re,p3),e(p3,XCe),e(XCe,qzr),e(p3,jzr),e(p3,Mee),e(Mee,Dzr),e(p3,Gzr),e(Qr,Ozr),M(u3,Qr,null),b(f,sVe,_),b(f,cf,_),e(cf,_3),e(_3,zCe),M(s$,zCe,null),e(cf,Vzr),e(cf,WCe),e(WCe,Xzr),b(f,lVe,_),b(f,Fr,_),M(l$,Fr,null),e(Fr,zzr),e(Fr,ff),e(ff,Wzr),e(ff,Eee),e(Eee,Qzr),e(ff,Hzr),e(ff,Cee),e(Cee,Uzr),e(ff,Jzr),e(Fr,Yzr),e(Fr,i$),e(i$,Kzr),e(i$,QCe),e(QCe,Zzr),e(i$,eWr),e(Fr,oWr),e(Fr,Yt),M(d$,Yt,null),e(Yt,rWr),e(Yt,HCe),e(HCe,tWr),e(Yt,aWr),e(Yt,mf),e(mf,nWr),e(mf,UCe),e(UCe,sWr),e(mf,lWr),e(mf,wee),e(wee,iWr),e(mf,dWr),e(Yt,cWr),M(b3,Yt,null),e(Fr,fWr),e(Fr,Hr),M(c$,Hr,null),e(Hr,mWr),e(Hr,JCe),e(JCe,gWr),e(Hr,hWr),e(Hr,An),e(An,pWr),e(An,YCe),e(YCe,uWr),e(An,_Wr),e(An,KCe),e(KCe,bWr),e(An,vWr),e(An,ZCe),e(ZCe,FWr),e(An,TWr),e(Hr,MWr),e(Hr,Ve),e(Ve,v3),e(v3,e5e),e(e5e,EWr),e(v3,CWr),e(v3,Aee),e(Aee,wWr),e(v3,AWr),e(Ve,LWr),e(Ve,F3),e(F3,o5e),e(o5e,yWr),e(F3,xWr),e(F3,Lee),e(Lee,$Wr),e(F3,kWr),e(Ve,SWr),e(Ve,T3),e(T3,r5e),e(r5e,RWr),e(T3,PWr),e(T3,yee),e(yee,BWr),e(T3,IWr),e(Ve,NWr),e(Ve,M3),e(M3,t5e),e(t5e,qWr),e(M3,jWr),e(M3,xee),e(xee,DWr),e(M3,GWr),e(Ve,OWr),e(Ve,E3),e(E3,a5e),e(a5e,VWr),e(E3,XWr),e(E3,$ee),e($ee,zWr),e(E3,WWr),e(Ve,QWr),e(Ve,C3),e(C3,n5e),e(n5e,HWr),e(C3,UWr),e(C3,kee),e(kee,JWr),e(C3,YWr),e(Ve,KWr),e(Ve,w3),e(w3,s5e),e(s5e,ZWr),e(w3,eQr),e(w3,See),e(See,oQr),e(w3,rQr),e(Ve,tQr),e(Ve,A3),e(A3,l5e),e(l5e,aQr),e(A3,nQr),e(A3,Ree),e(Ree,sQr),e(A3,lQr),e(Hr,iQr),M(L3,Hr,null),b(f,iVe,_),b(f,gf,_),e(gf,y3),e(y3,i5e),M(f$,i5e,null),e(gf,dQr),e(gf,d5e),e(d5e,cQr),b(f,dVe,_),b(f,Tr,_),M(m$,Tr,null),e(Tr,fQr),e(Tr,hf),e(hf,mQr),e(hf,Pee),e(Pee,gQr),e(hf,hQr),e(hf,Bee),e(Bee,pQr),e(hf,uQr),e(Tr,_Qr),e(Tr,g$),e(g$,bQr),e(g$,c5e),e(c5e,vQr),e(g$,FQr),e(Tr,TQr),e(Tr,Kt),M(h$,Kt,null),e(Kt,MQr),e(Kt,f5e),e(f5e,EQr),e(Kt,CQr),e(Kt,pf),e(pf,wQr),e(pf,m5e),e(m5e,AQr),e(pf,LQr),e(pf,Iee),e(Iee,yQr),e(pf,xQr),e(Kt,$Qr),M(x3,Kt,null),e(Tr,kQr),e(Tr,Ur),M(p$,Ur,null),e(Ur,SQr),e(Ur,g5e),e(g5e,RQr),e(Ur,PQr),e(Ur,Ln),e(Ln,BQr),e(Ln,h5e),e(h5e,IQr),e(Ln,NQr),e(Ln,p5e),e(p5e,qQr),e(Ln,jQr),e(Ln,u5e),e(u5e,DQr),e(Ln,GQr),e(Ur,OQr),e(Ur,Xe),e(Xe,$3),e($3,_5e),e(_5e,VQr),e($3,XQr),e($3,Nee),e(Nee,zQr),e($3,WQr),e(Xe,QQr),e(Xe,k3),e(k3,b5e),e(b5e,HQr),e(k3,UQr),e(k3,qee),e(qee,JQr),e(k3,YQr),e(Xe,KQr),e(Xe,S3),e(S3,v5e),e(v5e,ZQr),e(S3,eHr),e(S3,jee),e(jee,oHr),e(S3,rHr),e(Xe,tHr),e(Xe,R3),e(R3,F5e),e(F5e,aHr),e(R3,nHr),e(R3,Dee),e(Dee,sHr),e(R3,lHr),e(Xe,iHr),e(Xe,P3),e(P3,T5e),e(T5e,dHr),e(P3,cHr),e(P3,Gee),e(Gee,fHr),e(P3,mHr),e(Xe,gHr),e(Xe,B3),e(B3,M5e),e(M5e,hHr),e(B3,pHr),e(B3,Oee),e(Oee,uHr),e(B3,_Hr),e(Xe,bHr),e(Xe,I3),e(I3,E5e),e(E5e,vHr),e(I3,FHr),e(I3,Vee),e(Vee,THr),e(I3,MHr),e(Xe,EHr),e(Xe,N3),e(N3,C5e),e(C5e,CHr),e(N3,wHr),e(N3,Xee),e(Xee,AHr),e(N3,LHr),e(Ur,yHr),M(q3,Ur,null),b(f,cVe,_),b(f,uf,_),e(uf,j3),e(j3,w5e),M(u$,w5e,null),e(uf,xHr),e(uf,A5e),e(A5e,$Hr),b(f,fVe,_),b(f,Mr,_),M(_$,Mr,null),e(Mr,kHr),e(Mr,_f),e(_f,SHr),e(_f,zee),e(zee,RHr),e(_f,PHr),e(_f,Wee),e(Wee,BHr),e(_f,IHr),e(Mr,NHr),e(Mr,b$),e(b$,qHr),e(b$,L5e),e(L5e,jHr),e(b$,DHr),e(Mr,GHr),e(Mr,Zt),M(v$,Zt,null),e(Zt,OHr),e(Zt,y5e),e(y5e,VHr),e(Zt,XHr),e(Zt,bf),e(bf,zHr),e(bf,x5e),e(x5e,WHr),e(bf,QHr),e(bf,Qee),e(Qee,HHr),e(bf,UHr),e(Zt,JHr),M(D3,Zt,null),e(Mr,YHr),e(Mr,Jr),M(F$,Jr,null),e(Jr,KHr),e(Jr,$5e),e($5e,ZHr),e(Jr,eUr),e(Jr,yn),e(yn,oUr),e(yn,k5e),e(k5e,rUr),e(yn,tUr),e(yn,S5e),e(S5e,aUr),e(yn,nUr),e(yn,R5e),e(R5e,sUr),e(yn,lUr),e(Jr,iUr),e(Jr,P5e),e(P5e,G3),e(G3,B5e),e(B5e,dUr),e(G3,cUr),e(G3,Hee),e(Hee,fUr),e(G3,mUr),e(Jr,gUr),M(O3,Jr,null),b(f,mVe,_),b(f,vf,_),e(vf,V3),e(V3,I5e),M(T$,I5e,null),e(vf,hUr),e(vf,N5e),e(N5e,pUr),b(f,gVe,_),b(f,Er,_),M(M$,Er,null),e(Er,uUr),e(Er,Ff),e(Ff,_Ur),e(Ff,Uee),e(Uee,bUr),e(Ff,vUr),e(Ff,Jee),e(Jee,FUr),e(Ff,TUr),e(Er,MUr),e(Er,E$),e(E$,EUr),e(E$,q5e),e(q5e,CUr),e(E$,wUr),e(Er,AUr),e(Er,ea),M(C$,ea,null),e(ea,LUr),e(ea,j5e),e(j5e,yUr),e(ea,xUr),e(ea,Tf),e(Tf,$Ur),e(Tf,D5e),e(D5e,kUr),e(Tf,SUr),e(Tf,Yee),e(Yee,RUr),e(Tf,PUr),e(ea,BUr),M(X3,ea,null),e(Er,IUr),e(Er,Yr),M(w$,Yr,null),e(Yr,NUr),e(Yr,G5e),e(G5e,qUr),e(Yr,jUr),e(Yr,xn),e(xn,DUr),e(xn,O5e),e(O5e,GUr),e(xn,OUr),e(xn,V5e),e(V5e,VUr),e(xn,XUr),e(xn,X5e),e(X5e,zUr),e(xn,WUr),e(Yr,QUr),e(Yr,A$),e(A$,z3),e(z3,z5e),e(z5e,HUr),e(z3,UUr),e(z3,Kee),e(Kee,JUr),e(z3,YUr),e(A$,KUr),e(A$,W3),e(W3,W5e),e(W5e,ZUr),e(W3,eJr),e(W3,Zee),e(Zee,oJr),e(W3,rJr),e(Yr,tJr),M(Q3,Yr,null),b(f,hVe,_),b(f,Mf,_),e(Mf,H3),e(H3,Q5e),M(L$,Q5e,null),e(Mf,aJr),e(Mf,H5e),e(H5e,nJr),b(f,pVe,_),b(f,Cr,_),M(y$,Cr,null),e(Cr,sJr),e(Cr,Ef),e(Ef,lJr),e(Ef,eoe),e(eoe,iJr),e(Ef,dJr),e(Ef,ooe),e(ooe,cJr),e(Ef,fJr),e(Cr,mJr),e(Cr,x$),e(x$,gJr),e(x$,U5e),e(U5e,hJr),e(x$,pJr),e(Cr,uJr),e(Cr,oa),M($$,oa,null),e(oa,_Jr),e(oa,J5e),e(J5e,bJr),e(oa,vJr),e(oa,Cf),e(Cf,FJr),e(Cf,Y5e),e(Y5e,TJr),e(Cf,MJr),e(Cf,roe),e(roe,EJr),e(Cf,CJr),e(oa,wJr),M(U3,oa,null),e(Cr,AJr),e(Cr,Kr),M(k$,Kr,null),e(Kr,LJr),e(Kr,K5e),e(K5e,yJr),e(Kr,xJr),e(Kr,$n),e($n,$Jr),e($n,Z5e),e(Z5e,kJr),e($n,SJr),e($n,e3e),e(e3e,RJr),e($n,PJr),e($n,o3e),e(o3e,BJr),e($n,IJr),e(Kr,NJr),e(Kr,r3e),e(r3e,J3),e(J3,t3e),e(t3e,qJr),e(J3,jJr),e(J3,toe),e(toe,DJr),e(J3,GJr),e(Kr,OJr),M(Y3,Kr,null),uVe=!0},p(f,[_]){const S$={};_&2&&(S$.$$scope={dirty:_,ctx:f}),Rf.$set(S$);const a3e={};_&2&&(a3e.$$scope={dirty:_,ctx:f}),Gg.$set(a3e);const n3e={};_&2&&(n3e.$$scope={dirty:_,ctx:f}),Eh.$set(n3e);const s3e={};_&2&&(s3e.$$scope={dirty:_,ctx:f}),ap.$set(s3e);const R$={};_&2&&(R$.$$scope={dirty:_,ctx:f}),np.$set(R$);const l3e={};_&2&&(l3e.$$scope={dirty:_,ctx:f}),wp.$set(l3e);const kn={};_&2&&(kn.$$scope={dirty:_,ctx:f}),Ap.$set(kn);const i3e={};_&2&&(i3e.$$scope={dirty:_,ctx:f}),xp.$set(i3e);const d3e={};_&2&&(d3e.$$scope={dirty:_,ctx:f}),x_.$set(d3e);const c3e={};_&2&&(c3e.$$scope={dirty:_,ctx:f}),k_.$set(c3e);const P$={};_&2&&(P$.$$scope={dirty:_,ctx:f}),M1.$set(P$);const f3e={};_&2&&(f3e.$$scope={dirty:_,ctx:f}),C1.$set(f3e);const B$={};_&2&&(B$.$$scope={dirty:_,ctx:f}),c2.$set(B$);const m3e={};_&2&&(m3e.$$scope={dirty:_,ctx:f}),m2.$set(m3e);const I$={};_&2&&(I$.$$scope={dirty:_,ctx:f}),J2.$set(I$);const g3e={};_&2&&(g3e.$$scope={dirty:_,ctx:f}),K2.$set(g3e);const h3e={};_&2&&(h3e.$$scope={dirty:_,ctx:f}),_b.$set(h3e);const p3e={};_&2&&(p3e.$$scope={dirty:_,ctx:f}),vb.$set(p3e);const wf={};_&2&&(wf.$$scope={dirty:_,ctx:f}),pv.$set(wf);const u3e={};_&2&&(u3e.$$scope={dirty:_,ctx:f}),_v.$set(u3e);const _3e={};_&2&&(_3e.$$scope={dirty:_,ctx:f}),Hv.$set(_3e);const b3e={};_&2&&(b3e.$$scope={dirty:_,ctx:f}),Jv.$set(b3e);const N$={};_&2&&(N$.$$scope={dirty:_,ctx:f}),t0.$set(N$);const v3e={};_&2&&(v3e.$$scope={dirty:_,ctx:f}),n0.$set(v3e);const F3e={};_&2&&(F3e.$$scope={dirty:_,ctx:f}),O0.$set(F3e);const T3e={};_&2&&(T3e.$$scope={dirty:_,ctx:f}),X0.$set(T3e);const rt={};_&2&&(rt.$$scope={dirty:_,ctx:f}),SF.$set(rt);const q$={};_&2&&(q$.$$scope={dirty:_,ctx:f}),PF.$set(q$);const M3e={};_&2&&(M3e.$$scope={dirty:_,ctx:f}),NF.$set(M3e);const j$={};_&2&&(j$.$$scope={dirty:_,ctx:f}),jF.$set(j$);const E3e={};_&2&&(E3e.$$scope={dirty:_,ctx:f}),ZF.$set(E3e);const tt={};_&2&&(tt.$$scope={dirty:_,ctx:f}),oT.$set(tt);const C3e={};_&2&&(C3e.$$scope={dirty:_,ctx:f}),aT.$set(C3e);const Af={};_&2&&(Af.$$scope={dirty:_,ctx:f}),sT.$set(Af);const w3e={};_&2&&(w3e.$$scope={dirty:_,ctx:f}),dT.$set(w3e);const A3e={};_&2&&(A3e.$$scope={dirty:_,ctx:f}),fT.$set(A3e);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),MT.$set(L);const K3={};_&2&&(K3.$$scope={dirty:_,ctx:f}),CT.$set(K3);const L3e={};_&2&&(L3e.$$scope={dirty:_,ctx:f}),kT.$set(L3e);const y3e={};_&2&&(y3e.$$scope={dirty:_,ctx:f}),RT.$set(y3e);const Z3={};_&2&&(Z3.$$scope={dirty:_,ctx:f}),zT.$set(Z3);const x3e={};_&2&&(x3e.$$scope={dirty:_,ctx:f}),QT.$set(x3e);const $3e={};_&2&&($3e.$$scope={dirty:_,ctx:f}),YT.$set($3e);const ew={};_&2&&(ew.$$scope={dirty:_,ctx:f}),ZT.$set(ew);const k3e={};_&2&&(k3e.$$scope={dirty:_,ctx:f}),s7.$set(k3e);const S3e={};_&2&&(S3e.$$scope={dirty:_,ctx:f}),i7.$set(S3e);const ow={};_&2&&(ow.$$scope={dirty:_,ctx:f}),g7.$set(ow);const R3e={};_&2&&(R3e.$$scope={dirty:_,ctx:f}),p7.$set(R3e);const P3e={};_&2&&(P3e.$$scope={dirty:_,ctx:f}),v7.$set(P3e);const rw={};_&2&&(rw.$$scope={dirty:_,ctx:f}),T7.$set(rw);const B3e={};_&2&&(B3e.$$scope={dirty:_,ctx:f}),C7.$set(B3e);const I3e={};_&2&&(I3e.$$scope={dirty:_,ctx:f}),A7.$set(I3e);const tw={};_&2&&(tw.$$scope={dirty:_,ctx:f}),S7.$set(tw);const N3e={};_&2&&(N3e.$$scope={dirty:_,ctx:f}),P7.$set(N3e);const q3e={};_&2&&(q3e.$$scope={dirty:_,ctx:f}),N7.$set(q3e);const aw={};_&2&&(aw.$$scope={dirty:_,ctx:f}),j7.$set(aw);const j3e={};_&2&&(j3e.$$scope={dirty:_,ctx:f}),S9.$set(j3e);const D3e={};_&2&&(D3e.$$scope={dirty:_,ctx:f}),P9.$set(D3e);const nw={};_&2&&(nw.$$scope={dirty:_,ctx:f}),aM.$set(nw);const G3e={};_&2&&(G3e.$$scope={dirty:_,ctx:f}),sM.$set(G3e);const O3e={};_&2&&(O3e.$$scope={dirty:_,ctx:f}),FM.$set(O3e);const sw={};_&2&&(sw.$$scope={dirty:_,ctx:f}),MM.$set(sw);const V3e={};_&2&&(V3e.$$scope={dirty:_,ctx:f}),LM.$set(V3e);const X3e={};_&2&&(X3e.$$scope={dirty:_,ctx:f}),xM.$set(X3e);const lw={};_&2&&(lw.$$scope={dirty:_,ctx:f}),JM.$set(lw);const z3e={};_&2&&(z3e.$$scope={dirty:_,ctx:f}),KM.$set(z3e);const W3e={};_&2&&(W3e.$$scope={dirty:_,ctx:f}),dE.$set(W3e);const iw={};_&2&&(iw.$$scope={dirty:_,ctx:f}),fE.$set(iw);const Q3e={};_&2&&(Q3e.$$scope={dirty:_,ctx:f}),qE.$set(Q3e);const H3e={};_&2&&(H3e.$$scope={dirty:_,ctx:f}),DE.$set(H3e);const dw={};_&2&&(dw.$$scope={dirty:_,ctx:f}),a4.$set(dw);const U3e={};_&2&&(U3e.$$scope={dirty:_,ctx:f}),s4.$set(U3e);const J3e={};_&2&&(J3e.$$scope={dirty:_,ctx:f}),d4.$set(J3e);const cw={};_&2&&(cw.$$scope={dirty:_,ctx:f}),f4.$set(cw);const Y3e={};_&2&&(Y3e.$$scope={dirty:_,ctx:f}),g4.$set(Y3e);const K3e={};_&2&&(K3e.$$scope={dirty:_,ctx:f}),p4.$set(K3e);const fw={};_&2&&(fw.$$scope={dirty:_,ctx:f}),I4.$set(fw);const Z3e={};_&2&&(Z3e.$$scope={dirty:_,ctx:f}),q4.$set(Z3e);const ewe={};_&2&&(ewe.$$scope={dirty:_,ctx:f}),nC.$set(ewe);const mw={};_&2&&(mw.$$scope={dirty:_,ctx:f}),lC.$set(mw);const owe={};_&2&&(owe.$$scope={dirty:_,ctx:f}),dC.$set(owe);const rwe={};_&2&&(rwe.$$scope={dirty:_,ctx:f}),fC.$set(rwe);const gw={};_&2&&(gw.$$scope={dirty:_,ctx:f}),gC.$set(gw);const twe={};_&2&&(twe.$$scope={dirty:_,ctx:f}),pC.$set(twe);const awe={};_&2&&(awe.$$scope={dirty:_,ctx:f}),VC.$set(awe);const hw={};_&2&&(hw.$$scope={dirty:_,ctx:f}),zC.$set(hw);const nwe={};_&2&&(nwe.$$scope={dirty:_,ctx:f}),r5.$set(nwe);const swe={};_&2&&(swe.$$scope={dirty:_,ctx:f}),a5.$set(swe);const pw={};_&2&&(pw.$$scope={dirty:_,ctx:f}),b5.$set(pw);const lwe={};_&2&&(lwe.$$scope={dirty:_,ctx:f}),F5.$set(lwe);const iwe={};_&2&&(iwe.$$scope={dirty:_,ctx:f}),k5.$set(iwe);const uw={};_&2&&(uw.$$scope={dirty:_,ctx:f}),R5.$set(uw);const dwe={};_&2&&(dwe.$$scope={dirty:_,ctx:f}),X5.$set(dwe);const cwe={};_&2&&(cwe.$$scope={dirty:_,ctx:f}),W5.$set(cwe);const _w={};_&2&&(_w.$$scope={dirty:_,ctx:f}),t3.$set(_w);const fwe={};_&2&&(fwe.$$scope={dirty:_,ctx:f}),n3.$set(fwe);const mwe={};_&2&&(mwe.$$scope={dirty:_,ctx:f}),u3.$set(mwe);const bw={};_&2&&(bw.$$scope={dirty:_,ctx:f}),b3.$set(bw);const gwe={};_&2&&(gwe.$$scope={dirty:_,ctx:f}),L3.$set(gwe);const hwe={};_&2&&(hwe.$$scope={dirty:_,ctx:f}),x3.$set(hwe);const vw={};_&2&&(vw.$$scope={dirty:_,ctx:f}),q3.$set(vw);const pwe={};_&2&&(pwe.$$scope={dirty:_,ctx:f}),D3.$set(pwe);const uwe={};_&2&&(uwe.$$scope={dirty:_,ctx:f}),O3.$set(uwe);const Fw={};_&2&&(Fw.$$scope={dirty:_,ctx:f}),X3.$set(Fw);const _we={};_&2&&(_we.$$scope={dirty:_,ctx:f}),Q3.$set(_we);const bwe={};_&2&&(bwe.$$scope={dirty:_,ctx:f}),U3.$set(bwe);const Tw={};_&2&&(Tw.$$scope={dirty:_,ctx:f}),Y3.$set(Tw)},i(f){uVe||(E(d.$$.fragment,f),E(ya.$$.fragment,f),E(M6.$$.fragment,f),E(E6.$$.fragment,f),E(Rf.$$.fragment,f),E(C6.$$.fragment,f),E(w6.$$.fragment,f),E(y6.$$.fragment,f),E(Gg.$$.fragment,f),E(x6.$$.fragment,f),E($6.$$.fragment,f),E(k6.$$.fragment,f),E(P6.$$.fragment,f),E(Eh.$$.fragment,f),E(B6.$$.fragment,f),E(I6.$$.fragment,f),E(N6.$$.fragment,f),E(D6.$$.fragment,f),E(ap.$$.fragment,f),E(np.$$.fragment,f),E(G6.$$.fragment,f),E(O6.$$.fragment,f),E(V6.$$.fragment,f),E(W6.$$.fragment,f),E(wp.$$.fragment,f),E(Ap.$$.fragment,f),E(Q6.$$.fragment,f),E(H6.$$.fragment,f),E(U6.$$.fragment,f),E(Y6.$$.fragment,f),E(xp.$$.fragment,f),E(K6.$$.fragment,f),E(x_.$$.fragment,f),E(Z6.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(k_.$$.fragment,f),E(tL.$$.fragment,f),E(M1.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(C1.$$.fragment,f),E(iL.$$.fragment,f),E(c2.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(m2.$$.fragment,f),E(gL.$$.fragment,f),E(J2.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(K2.$$.fragment,f),E(bL.$$.fragment,f),E(_b.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(vb.$$.fragment,f),E(EL.$$.fragment,f),E(pv.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(LL.$$.fragment,f),E(_v.$$.fragment,f),E(yL.$$.fragment,f),E(Hv.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(Jv.$$.fragment,f),E(RL.$$.fragment,f),E(t0.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(NL.$$.fragment,f),E(n0.$$.fragment,f),E(qL.$$.fragment,f),E(O0.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(X0.$$.fragment,f),E(VL.$$.fragment,f),E(SF.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(PF.$$.fragment,f),E(HL.$$.fragment,f),E(NF.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(jF.$$.fragment,f),E(ZL.$$.fragment,f),E(ZF.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(oT.$$.fragment,f),E(ay.$$.fragment,f),E(aT.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(sT.$$.fragment,f),E(dy.$$.fragment,f),E(dT.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(fT.$$.fragment,f),E(hy.$$.fragment,f),E(MT.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(CT.$$.fragment,f),E(vy.$$.fragment,f),E(kT.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(RT.$$.fragment,f),E(Cy.$$.fragment,f),E(zT.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(QT.$$.fragment,f),E(xy.$$.fragment,f),E(YT.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(ZT.$$.fragment,f),E(By.$$.fragment,f),E(s7.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(i7.$$.fragment,f),E(Dy.$$.fragment,f),E(g7.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(p7.$$.fragment,f),E(zy.$$.fragment,f),E(v7.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(T7.$$.fragment,f),E(Yy.$$.fragment,f),E(C7.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(o8.$$.fragment,f),E(A7.$$.fragment,f),E(r8.$$.fragment,f),E(S7.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(P7.$$.fragment,f),E(l8.$$.fragment,f),E(N7.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(j7.$$.fragment,f),E(m8.$$.fragment,f),E(S9.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(u8.$$.fragment,f),E(P9.$$.fragment,f),E(_8.$$.fragment,f),E(aM.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(sM.$$.fragment,f),E(M8.$$.fragment,f),E(FM.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(MM.$$.fragment,f),E(L8.$$.fragment,f),E(LM.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(xM.$$.fragment,f),E(S8.$$.fragment,f),E(JM.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(KM.$$.fragment,f),E(N8.$$.fragment,f),E(dE.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(fE.$$.fragment,f),E(O8.$$.fragment,f),E(qE.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(W8.$$.fragment,f),E(DE.$$.fragment,f),E(Q8.$$.fragment,f),E(a4.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(s4.$$.fragment,f),E(K8.$$.fragment,f),E(d4.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(f4.$$.fragment,f),E(ax.$$.fragment,f),E(g4.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(p4.$$.fragment,f),E(dx.$$.fragment,f),E(I4.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(q4.$$.fragment,f),E(hx.$$.fragment,f),E(nC.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(lC.$$.fragment,f),E(vx.$$.fragment,f),E(dC.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(fC.$$.fragment,f),E(Cx.$$.fragment,f),E(gC.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(pC.$$.fragment,f),E(xx.$$.fragment,f),E(VC.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(zC.$$.fragment,f),E(Px.$$.fragment,f),E(r5.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(a5.$$.fragment,f),E(jx.$$.fragment,f),E(b5.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(F5.$$.fragment,f),E(Xx.$$.fragment,f),E(k5.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(R5.$$.fragment,f),E(Ux.$$.fragment,f),E(X5.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(W5.$$.fragment,f),E(e$.$$.fragment,f),E(t3.$$.fragment,f),E(o$.$$.fragment,f),E(r$.$$.fragment,f),E(a$.$$.fragment,f),E(n3.$$.fragment,f),E(n$.$$.fragment,f),E(u3.$$.fragment,f),E(s$.$$.fragment,f),E(l$.$$.fragment,f),E(d$.$$.fragment,f),E(b3.$$.fragment,f),E(c$.$$.fragment,f),E(L3.$$.fragment,f),E(f$.$$.fragment,f),E(m$.$$.fragment,f),E(h$.$$.fragment,f),E(x3.$$.fragment,f),E(p$.$$.fragment,f),E(q3.$$.fragment,f),E(u$.$$.fragment,f),E(_$.$$.fragment,f),E(v$.$$.fragment,f),E(D3.$$.fragment,f),E(F$.$$.fragment,f),E(O3.$$.fragment,f),E(T$.$$.fragment,f),E(M$.$$.fragment,f),E(C$.$$.fragment,f),E(X3.$$.fragment,f),E(w$.$$.fragment,f),E(Q3.$$.fragment,f),E(L$.$$.fragment,f),E(y$.$$.fragment,f),E($$.$$.fragment,f),E(U3.$$.fragment,f),E(k$.$$.fragment,f),E(Y3.$$.fragment,f),uVe=!0)},o(f){C(d.$$.fragment,f),C(ya.$$.fragment,f),C(M6.$$.fragment,f),C(E6.$$.fragment,f),C(Rf.$$.fragment,f),C(C6.$$.fragment,f),C(w6.$$.fragment,f),C(y6.$$.fragment,f),C(Gg.$$.fragment,f),C(x6.$$.fragment,f),C($6.$$.fragment,f),C(k6.$$.fragment,f),C(P6.$$.fragment,f),C(Eh.$$.fragment,f),C(B6.$$.fragment,f),C(I6.$$.fragment,f),C(N6.$$.fragment,f),C(D6.$$.fragment,f),C(ap.$$.fragment,f),C(np.$$.fragment,f),C(G6.$$.fragment,f),C(O6.$$.fragment,f),C(V6.$$.fragment,f),C(W6.$$.fragment,f),C(wp.$$.fragment,f),C(Ap.$$.fragment,f),C(Q6.$$.fragment,f),C(H6.$$.fragment,f),C(U6.$$.fragment,f),C(Y6.$$.fragment,f),C(xp.$$.fragment,f),C(K6.$$.fragment,f),C(x_.$$.fragment,f),C(Z6.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(k_.$$.fragment,f),C(tL.$$.fragment,f),C(M1.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(C1.$$.fragment,f),C(iL.$$.fragment,f),C(c2.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(m2.$$.fragment,f),C(gL.$$.fragment,f),C(J2.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(K2.$$.fragment,f),C(bL.$$.fragment,f),C(_b.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(vb.$$.fragment,f),C(EL.$$.fragment,f),C(pv.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(LL.$$.fragment,f),C(_v.$$.fragment,f),C(yL.$$.fragment,f),C(Hv.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(Jv.$$.fragment,f),C(RL.$$.fragment,f),C(t0.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(NL.$$.fragment,f),C(n0.$$.fragment,f),C(qL.$$.fragment,f),C(O0.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(X0.$$.fragment,f),C(VL.$$.fragment,f),C(SF.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(PF.$$.fragment,f),C(HL.$$.fragment,f),C(NF.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(jF.$$.fragment,f),C(ZL.$$.fragment,f),C(ZF.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(oT.$$.fragment,f),C(ay.$$.fragment,f),C(aT.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(sT.$$.fragment,f),C(dy.$$.fragment,f),C(dT.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(fT.$$.fragment,f),C(hy.$$.fragment,f),C(MT.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(CT.$$.fragment,f),C(vy.$$.fragment,f),C(kT.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(RT.$$.fragment,f),C(Cy.$$.fragment,f),C(zT.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(QT.$$.fragment,f),C(xy.$$.fragment,f),C(YT.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(ZT.$$.fragment,f),C(By.$$.fragment,f),C(s7.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(i7.$$.fragment,f),C(Dy.$$.fragment,f),C(g7.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(p7.$$.fragment,f),C(zy.$$.fragment,f),C(v7.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(T7.$$.fragment,f),C(Yy.$$.fragment,f),C(C7.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(o8.$$.fragment,f),C(A7.$$.fragment,f),C(r8.$$.fragment,f),C(S7.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(P7.$$.fragment,f),C(l8.$$.fragment,f),C(N7.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(j7.$$.fragment,f),C(m8.$$.fragment,f),C(S9.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(u8.$$.fragment,f),C(P9.$$.fragment,f),C(_8.$$.fragment,f),C(aM.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(sM.$$.fragment,f),C(M8.$$.fragment,f),C(FM.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(MM.$$.fragment,f),C(L8.$$.fragment,f),C(LM.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(xM.$$.fragment,f),C(S8.$$.fragment,f),C(JM.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(KM.$$.fragment,f),C(N8.$$.fragment,f),C(dE.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(fE.$$.fragment,f),C(O8.$$.fragment,f),C(qE.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(W8.$$.fragment,f),C(DE.$$.fragment,f),C(Q8.$$.fragment,f),C(a4.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(s4.$$.fragment,f),C(K8.$$.fragment,f),C(d4.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(f4.$$.fragment,f),C(ax.$$.fragment,f),C(g4.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(p4.$$.fragment,f),C(dx.$$.fragment,f),C(I4.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(q4.$$.fragment,f),C(hx.$$.fragment,f),C(nC.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(lC.$$.fragment,f),C(vx.$$.fragment,f),C(dC.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(fC.$$.fragment,f),C(Cx.$$.fragment,f),C(gC.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(pC.$$.fragment,f),C(xx.$$.fragment,f),C(VC.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(zC.$$.fragment,f),C(Px.$$.fragment,f),C(r5.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(a5.$$.fragment,f),C(jx.$$.fragment,f),C(b5.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(F5.$$.fragment,f),C(Xx.$$.fragment,f),C(k5.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(R5.$$.fragment,f),C(Ux.$$.fragment,f),C(X5.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(W5.$$.fragment,f),C(e$.$$.fragment,f),C(t3.$$.fragment,f),C(o$.$$.fragment,f),C(r$.$$.fragment,f),C(a$.$$.fragment,f),C(n3.$$.fragment,f),C(n$.$$.fragment,f),C(u3.$$.fragment,f),C(s$.$$.fragment,f),C(l$.$$.fragment,f),C(d$.$$.fragment,f),C(b3.$$.fragment,f),C(c$.$$.fragment,f),C(L3.$$.fragment,f),C(f$.$$.fragment,f),C(m$.$$.fragment,f),C(h$.$$.fragment,f),C(x3.$$.fragment,f),C(p$.$$.fragment,f),C(q3.$$.fragment,f),C(u$.$$.fragment,f),C(_$.$$.fragment,f),C(v$.$$.fragment,f),C(D3.$$.fragment,f),C(F$.$$.fragment,f),C(O3.$$.fragment,f),C(T$.$$.fragment,f),C(M$.$$.fragment,f),C(C$.$$.fragment,f),C(X3.$$.fragment,f),C(w$.$$.fragment,f),C(Q3.$$.fragment,f),C(L$.$$.fragment,f),C(y$.$$.fragment,f),C($$.$$.fragment,f),C(U3.$$.fragment,f),C(k$.$$.fragment,f),C(Y3.$$.fragment,f),uVe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(yf),f&&t(at),f&&t(Oe),f&&t(We),f&&t($f),w(ya,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t(xa),f&&t(fGe),f&&t(yi),w(M6),f&&t(mGe),f&&t(In),f&&t(gGe),w(E6,f),f&&t(hGe),f&&t(eS),f&&t(pGe),w(Rf,f),f&&t(uGe),f&&t(xi),w(C6),f&&t(_Ge),f&&t(wo),w(w6),w(y6),w(Gg),w(x6),f&&t(bGe),f&&t(ki),w($6),f&&t(vGe),f&&t(Ao),w(k6),w(P6),w(Eh),w(B6),f&&t(FGe),f&&t(Si),w(I6),f&&t(TGe),f&&t(Lo),w(N6),w(D6),w(ap),w(np),w(G6),f&&t(MGe),f&&t(Ri),w(O6),f&&t(EGe),f&&t(yo),w(V6),w(W6),w(wp),w(Ap),w(Q6),f&&t(CGe),f&&t(Bi),w(H6),f&&t(wGe),f&&t(xo),w(U6),w(Y6),w(xp),w(K6),w(x_),f&&t(AGe),f&&t(qi),w(Z6),f&&t(LGe),f&&t($o),w(eL),w(rL),w(k_),w(tL),w(M1),f&&t(yGe),f&&t(Gi),w(aL),f&&t(xGe),f&&t(ko),w(nL),w(lL),w(C1),w(iL),w(c2),f&&t($Ge),f&&t(Xi),w(dL),f&&t(kGe),f&&t(So),w(cL),w(mL),w(m2),w(gL),w(J2),f&&t(SGe),f&&t(Qi),w(hL),f&&t(RGe),f&&t(Ro),w(pL),w(_L),w(K2),w(bL),w(_b),f&&t(PGe),f&&t(Ji),w(vL),f&&t(BGe),f&&t(Po),w(FL),w(ML),w(vb),w(EL),w(pv),f&&t(IGe),f&&t(Zi),w(CL),f&&t(NGe),f&&t(Bo),w(wL),w(LL),w(_v),w(yL),w(Hv),f&&t(qGe),f&&t(rd),w(xL),f&&t(jGe),f&&t(Io),w($L),w(SL),w(Jv),w(RL),w(t0),f&&t(DGe),f&&t(nd),w(PL),f&&t(GGe),f&&t(No),w(BL),w(NL),w(n0),w(qL),w(O0),f&&t(OGe),f&&t(id),w(jL),f&&t(VGe),f&&t(qo),w(DL),w(OL),w(X0),w(VL),w(SF),f&&t(XGe),f&&t(fd),w(XL),f&&t(zGe),f&&t(jo),w(zL),w(QL),w(PF),w(HL),w(NF),f&&t(WGe),f&&t(hd),w(UL),f&&t(QGe),f&&t(Do),w(JL),w(KL),w(jF),w(ZL),w(ZF),f&&t(HGe),f&&t(_d),w(ey),f&&t(UGe),f&&t(Go),w(oy),w(ty),w(oT),w(ay),w(aT),f&&t(JGe),f&&t(Fd),w(ny),f&&t(YGe),f&&t(Oo),w(sy),w(iy),w(sT),w(dy),w(dT),f&&t(KGe),f&&t(Ed),w(cy),f&&t(ZGe),f&&t(Vo),w(fy),w(gy),w(fT),w(hy),w(MT),f&&t(eOe),f&&t(Ad),w(py),f&&t(oOe),f&&t(Xo),w(uy),w(by),w(CT),w(vy),w(kT),f&&t(rOe),f&&t(xd),w(Fy),f&&t(tOe),f&&t(zo),w(Ty),w(Ey),w(RT),w(Cy),w(zT),f&&t(aOe),f&&t(Sd),w(wy),f&&t(nOe),f&&t(Wo),w(Ay),w(yy),w(QT),w(xy),w(YT),f&&t(sOe),f&&t(Bd),w(ky),f&&t(lOe),f&&t(Qo),w(Sy),w(Py),w(ZT),w(By),w(s7),f&&t(iOe),f&&t(qd),w(Iy),f&&t(dOe),f&&t(Ho),w(Ny),w(jy),w(i7),w(Dy),w(g7),f&&t(cOe),f&&t(Od),w(Gy),f&&t(fOe),f&&t(Uo),w(Oy),w(Xy),w(p7),w(zy),w(v7),f&&t(mOe),f&&t(zd),w(Qy),f&&t(gOe),f&&t(Jo),w(Hy),w(Jy),w(T7),w(Yy),w(C7),f&&t(hOe),f&&t(Hd),w(Ky),f&&t(pOe),f&&t(Yo),w(Zy),w(o8),w(A7),w(r8),w(S7),f&&t(uOe),f&&t(Yd),w(t8),f&&t(_Oe),f&&t(Ko),w(a8),w(s8),w(P7),w(l8),w(N7),f&&t(bOe),f&&t(ec),w(i8),f&&t(vOe),f&&t(Zo),w(d8),w(f8),w(j7),w(m8),w(S9),f&&t(FOe),f&&t(tc),w(g8),f&&t(TOe),f&&t(er),w(h8),w(u8),w(P9),w(_8),w(aM),f&&t(MOe),f&&t(sc),w(b8),f&&t(EOe),f&&t(or),w(v8),w(T8),w(sM),w(M8),w(FM),f&&t(COe),f&&t(dc),w(E8),f&&t(wOe),f&&t(rr),w(C8),w(A8),w(MM),w(L8),w(LM),f&&t(AOe),f&&t(mc),w(y8),f&&t(LOe),f&&t(tr),w(x8),w(k8),w(xM),w(S8),w(JM),f&&t(yOe),f&&t(pc),w(R8),f&&t(xOe),f&&t(ar),w(P8),w(I8),w(KM),w(N8),w(dE),f&&t($Oe),f&&t(bc),w(q8),f&&t(kOe),f&&t(nr),w(j8),w(G8),w(fE),w(O8),w(qE),f&&t(SOe),f&&t(Tc),w(V8),f&&t(ROe),f&&t(sr),w(X8),w(W8),w(DE),w(Q8),w(a4),f&&t(POe),f&&t(Cc),w(H8),f&&t(BOe),f&&t(lr),w(U8),w(Y8),w(s4),w(K8),w(d4),f&&t(IOe),f&&t(Lc),w(ex),f&&t(NOe),f&&t(ir),w(ox),w(tx),w(f4),w(ax),w(g4),f&&t(qOe),f&&t($c),w(nx),f&&t(jOe),f&&t(dr),w(sx),w(ix),w(p4),w(dx),w(I4),f&&t(DOe),f&&t(Rc),w(cx),f&&t(GOe),f&&t(cr),w(fx),w(gx),w(q4),w(hx),w(nC),f&&t(OOe),f&&t(Ic),w(px),f&&t(VOe),f&&t(fr),w(ux),w(bx),w(lC),w(vx),w(dC),f&&t(XOe),f&&t(jc),w(Fx),f&&t(zOe),f&&t(mr),w(Tx),w(Ex),w(fC),w(Cx),w(gC),f&&t(WOe),f&&t(Oc),w(wx),f&&t(QOe),f&&t(gr),w(Ax),w(yx),w(pC),w(xx),w(VC),f&&t(HOe),f&&t(zc),w($x),f&&t(UOe),f&&t(hr),w(kx),w(Rx),w(zC),w(Px),w(r5),f&&t(JOe),f&&t(Hc),w(Bx),f&&t(YOe),f&&t(pr),w(Ix),w(qx),w(a5),w(jx),w(b5),f&&t(KOe),f&&t(Yc),w(Dx),f&&t(ZOe),f&&t(ur),w(Gx),w(Vx),w(F5),w(Xx),w(k5),f&&t(eVe),f&&t(ef),w(zx),f&&t(oVe),f&&t(_r),w(Wx),w(Hx),w(R5),w(Ux),w(X5),f&&t(rVe),f&&t(tf),w(Jx),f&&t(tVe),f&&t(br),w(Yx),w(Zx),w(W5),w(e$),w(t3),f&&t(aVe),f&&t(sf),w(o$),f&&t(nVe),f&&t(vr),w(r$),w(a$),w(n3),w(n$),w(u3),f&&t(sVe),f&&t(cf),w(s$),f&&t(lVe),f&&t(Fr),w(l$),w(d$),w(b3),w(c$),w(L3),f&&t(iVe),f&&t(gf),w(f$),f&&t(dVe),f&&t(Tr),w(m$),w(h$),w(x3),w(p$),w(q3),f&&t(cVe),f&&t(uf),w(u$),f&&t(fVe),f&&t(Mr),w(_$),w(v$),w(D3),w(F$),w(O3),f&&t(mVe),f&&t(vf),w(T$),f&&t(gVe),f&&t(Er),w(M$),w(C$),w(X3),w(w$),w(Q3),f&&t(hVe),f&&t(Mf),w(L$),f&&t(pVe),f&&t(Cr),w(y$),w($$),w(U3),w(k$),w(Y3)}}}const oGt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function rGt(x){return ejt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class dGt extends Jqt{constructor(g){super();Yqt(this,g,rGt,eGt,Kqt,{})}}export{dGt as default,oGt as metadata};
