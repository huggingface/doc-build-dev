import{S as yqt,i as xqt,s as $qt,e as a,k as l,w as F,t as o,M as kqt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Sqt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as wJr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Rqt(x){let g,v,p,m,u,d,h,Eo,Ti,yf,at,Mi,Ei,u6,xf,Oe,We,Ci,Sn,_6,Rn,Pn,b6,wi,Bn,v6,Ai,$f,ya;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ti=a("code"),yf=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Mi=a("code"),Ei=o('"new-model"'),u6=o(")."),xf=l(),Oe=a("p"),We=o("Likewise, if your "),Ci=a("code"),Sn=o("NewModel"),_6=o(" is a subclass of "),Rn=a("a"),Pn=o("PreTrainedModel"),b6=o(`, make sure its
`),wi=a("code"),Bn=o("config_class"),v6=o(` attribute is set to the same class you use when registering the model (here
`),Ai=a("code"),$f=o("NewModelConfig"),ya=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Qk=s(p);m=r(Qk,"NewModelConfig"),Qk.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Li=s(d);h=r(Li,"PretrainedConfig"),Li.forEach(t),Eo=r(Ae,`, make sure its
`),Ti=n(Ae,"CODE",{});var Hk=s(Ti);yf=r(Hk,"model_type"),Hk.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Mi=n(Ae,"CODE",{});var Uk=s(Mi);Ei=r(Uk,'"new-model"'),Uk.forEach(t),u6=r(Ae,")."),Ae.forEach(t),xf=i(Qe),Oe=n(Qe,"P",{});var Co=s(Oe);We=r(Co,"Likewise, if your "),Ci=n(Co,"CODE",{});var xa=s(Ci);Sn=r(xa,"NewModel"),xa.forEach(t),_6=r(Co," is a subclass of "),Rn=n(Co,"A",{href:!0});var Jk=s(Rn);Pn=r(Jk,"PreTrainedModel"),Jk.forEach(t),b6=r(Co,`, make sure its
`),wi=n(Co,"CODE",{});var kf=s(wi);Bn=r(kf,"config_class"),kf.forEach(t),v6=r(Co,` attribute is set to the same class you use when registering the model (here
`),Ai=n(Co,"CODE",{});var Yk=s(Ai);$f=r(Yk,"NewModelConfig"),Yk.forEach(t),ya=r(Co,")."),Co.forEach(t),this.h()},h(){c(Rn,"href","/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Eo),e(g,Ti),e(Ti,yf),e(g,at),e(g,Mi),e(Mi,Ei),e(g,u6),b(Qe,xf,Ae),b(Qe,Oe,Ae),e(Oe,We),e(Oe,Ci),e(Ci,Sn),e(Oe,_6),e(Oe,Rn),e(Rn,Pn),e(Oe,b6),e(Oe,wi),e(wi,Bn),e(Oe,v6),e(Oe,Ai),e(Ai,$f),e(Oe,ya)},d(Qe){Qe&&t(g),Qe&&t(xf),Qe&&t(Oe)}}}function Pqt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bqt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iqt(x){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Nqt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qqt(x){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function jqt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dqt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gqt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oqt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vqt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xqt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zqt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wqt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qqt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hqt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uqt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jqt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yqt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kqt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zqt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ejt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ojt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ajt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function njt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ljt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ijt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function djt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ujt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _jt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ejt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ajt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ljt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $jt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ijt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Njt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Djt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ojt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ujt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Dt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ADt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Dt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SDt(x){let g,v,p,m,u,d,h,Eo,Ti,yf,at,Mi,Ei,u6,xf,Oe,We,Ci,Sn,_6,Rn,Pn,b6,wi,Bn,v6,Ai,$f,ya,Qe,Ae,Qk,Li,Hk,Uk,Co,xa,Jk,kf,Yk,bze,tGe,yi,Sf,Hre,F6,vze,Ure,Fze,aGe,In,Tze,Jre,Mze,Eze,Yre,Cze,wze,nGe,T6,sGe,Kk,Aze,lGe,Rf,iGe,xi,Pf,Kre,M6,Lze,Zre,yze,dGe,wo,E6,xze,C6,$ze,Zk,kze,Sze,Rze,w6,Pze,ete,Bze,Ize,Nze,wr,A6,qze,ote,jze,Dze,$i,Gze,rte,Oze,Vze,tte,Xze,zze,Wze,A,Bf,ate,Qze,Hze,eS,Uze,Jze,Yze,If,nte,Kze,Zze,oS,eWe,oWe,rWe,Nf,ste,tWe,aWe,rS,nWe,sWe,lWe,qf,lte,iWe,dWe,tS,cWe,fWe,mWe,jf,ite,gWe,hWe,aS,pWe,uWe,_We,Df,dte,bWe,vWe,nS,FWe,TWe,MWe,Gf,cte,EWe,CWe,sS,wWe,AWe,LWe,Of,fte,yWe,xWe,lS,$We,kWe,SWe,Vf,mte,RWe,PWe,iS,BWe,IWe,NWe,Xf,gte,qWe,jWe,dS,DWe,GWe,OWe,zf,hte,VWe,XWe,cS,zWe,WWe,QWe,Wf,pte,HWe,UWe,fS,JWe,YWe,KWe,Qf,ute,ZWe,eQe,mS,oQe,rQe,tQe,Hf,_te,aQe,nQe,gS,sQe,lQe,iQe,Uf,bte,dQe,cQe,hS,fQe,mQe,gQe,Jf,vte,hQe,pQe,pS,uQe,_Qe,bQe,Yf,Fte,vQe,FQe,uS,TQe,MQe,EQe,Kf,Tte,CQe,wQe,_S,AQe,LQe,yQe,Zf,Mte,xQe,$Qe,bS,kQe,SQe,RQe,em,Ete,PQe,BQe,vS,IQe,NQe,qQe,om,Cte,jQe,DQe,FS,GQe,OQe,VQe,rm,wte,XQe,zQe,TS,WQe,QQe,HQe,tm,Ate,UQe,JQe,MS,YQe,KQe,ZQe,am,Lte,eHe,oHe,ES,rHe,tHe,aHe,nm,yte,nHe,sHe,CS,lHe,iHe,dHe,sm,xte,cHe,fHe,wS,mHe,gHe,hHe,lm,$te,pHe,uHe,AS,_He,bHe,vHe,im,kte,FHe,THe,LS,MHe,EHe,CHe,dm,Ste,wHe,AHe,yS,LHe,yHe,xHe,cm,Rte,$He,kHe,xS,SHe,RHe,PHe,fm,Pte,BHe,IHe,$S,NHe,qHe,jHe,mm,Bte,DHe,GHe,kS,OHe,VHe,XHe,gm,Ite,zHe,WHe,SS,QHe,HHe,UHe,hm,Nte,JHe,YHe,RS,KHe,ZHe,eUe,pm,qte,oUe,rUe,PS,tUe,aUe,nUe,um,jte,sUe,lUe,BS,iUe,dUe,cUe,_m,Dte,fUe,mUe,IS,gUe,hUe,pUe,bm,Gte,uUe,_Ue,NS,bUe,vUe,FUe,vm,Ote,TUe,MUe,qS,EUe,CUe,wUe,Fm,Vte,AUe,LUe,jS,yUe,xUe,$Ue,Tm,Xte,kUe,SUe,DS,RUe,PUe,BUe,Mm,zte,IUe,NUe,GS,qUe,jUe,DUe,Em,Wte,GUe,OUe,OS,VUe,XUe,zUe,Cm,Qte,WUe,QUe,VS,HUe,UUe,JUe,wm,Hte,YUe,KUe,XS,ZUe,eJe,oJe,Am,Ute,rJe,tJe,zS,aJe,nJe,sJe,Lm,Jte,lJe,iJe,WS,dJe,cJe,fJe,ym,Yte,mJe,gJe,QS,hJe,pJe,uJe,xm,Kte,_Je,bJe,HS,vJe,FJe,TJe,$m,Zte,MJe,EJe,US,CJe,wJe,AJe,km,eae,LJe,yJe,JS,xJe,$Je,kJe,Sm,oae,SJe,RJe,YS,PJe,BJe,IJe,Rm,rae,NJe,qJe,KS,jJe,DJe,GJe,Pm,tae,OJe,VJe,ZS,XJe,zJe,WJe,Bm,aae,QJe,HJe,eR,UJe,JJe,YJe,Im,nae,KJe,ZJe,oR,eYe,oYe,rYe,Nm,sae,tYe,aYe,rR,nYe,sYe,lYe,qm,lae,iYe,dYe,tR,cYe,fYe,mYe,jm,iae,gYe,hYe,aR,pYe,uYe,_Ye,Dm,dae,bYe,vYe,nR,FYe,TYe,MYe,Gm,cae,EYe,CYe,sR,wYe,AYe,LYe,Om,fae,yYe,xYe,lR,$Ye,kYe,SYe,Vm,mae,RYe,PYe,iR,BYe,IYe,NYe,Xm,gae,qYe,jYe,dR,DYe,GYe,OYe,zm,hae,VYe,XYe,cR,zYe,WYe,QYe,Wm,pae,HYe,UYe,fR,JYe,YYe,KYe,Qm,uae,ZYe,eKe,mR,oKe,rKe,tKe,Hm,_ae,aKe,nKe,gR,sKe,lKe,iKe,Um,bae,dKe,cKe,hR,fKe,mKe,gKe,Jm,vae,hKe,pKe,pR,uKe,_Ke,bKe,Ym,Fae,vKe,FKe,uR,TKe,MKe,EKe,Km,Tae,CKe,wKe,_R,AKe,LKe,yKe,Zm,Mae,xKe,$Ke,bR,kKe,SKe,RKe,eg,Eae,PKe,BKe,vR,IKe,NKe,qKe,og,Cae,jKe,DKe,FR,GKe,OKe,VKe,rg,wae,XKe,zKe,TR,WKe,QKe,HKe,tg,Aae,UKe,JKe,MR,YKe,KKe,ZKe,ag,Lae,eZe,oZe,ER,rZe,tZe,aZe,ng,yae,nZe,sZe,CR,lZe,iZe,dZe,sg,xae,cZe,fZe,wR,mZe,gZe,hZe,lg,$ae,pZe,uZe,AR,_Ze,bZe,vZe,ig,kae,FZe,TZe,LR,MZe,EZe,CZe,dg,Sae,wZe,AZe,yR,LZe,yZe,xZe,cg,Rae,$Ze,kZe,xR,SZe,RZe,PZe,fg,Pae,BZe,IZe,$R,NZe,qZe,jZe,mg,Bae,DZe,GZe,kR,OZe,VZe,XZe,gg,Iae,zZe,WZe,SR,QZe,HZe,UZe,hg,Nae,JZe,YZe,RR,KZe,ZZe,eeo,pg,qae,oeo,reo,PR,teo,aeo,neo,ug,jae,seo,leo,BR,ieo,deo,ceo,_g,Dae,feo,meo,IR,geo,heo,peo,bg,Gae,ueo,_eo,NR,beo,veo,Feo,vg,Oae,Teo,Meo,qR,Eeo,Ceo,weo,Fg,Vae,Aeo,Leo,jR,yeo,xeo,$eo,Tg,Xae,keo,Seo,DR,Reo,Peo,Beo,Mg,zae,Ieo,Neo,GR,qeo,jeo,Deo,Eg,Wae,Geo,Oeo,OR,Veo,Xeo,zeo,Cg,Qae,Weo,Qeo,VR,Heo,Ueo,Jeo,wg,Hae,Yeo,Keo,XR,Zeo,eoo,ooo,Ag,Uae,roo,too,zR,aoo,noo,soo,Lg,Jae,loo,ioo,WR,doo,coo,foo,yg,Yae,moo,goo,QR,hoo,poo,uoo,xg,Kae,_oo,boo,HR,voo,Foo,Too,$g,Zae,Moo,Eoo,UR,Coo,woo,Aoo,kg,ene,Loo,yoo,JR,xoo,$oo,koo,Sg,one,Soo,Roo,YR,Poo,Boo,Ioo,Rg,rne,Noo,qoo,KR,joo,Doo,Goo,Pg,tne,Ooo,Voo,ZR,Xoo,zoo,Woo,Bg,ane,Qoo,Hoo,eP,Uoo,Joo,Yoo,Ig,nne,Koo,Zoo,oP,ero,oro,rro,Ng,sne,tro,aro,rP,nro,sro,lro,qg,lne,iro,dro,tP,cro,fro,mro,jg,ine,gro,hro,aP,pro,uro,_ro,Dg,dne,bro,vro,nP,Fro,Tro,Mro,Gg,Ero,Og,L6,Cro,cne,wro,cGe,ki,Vg,fne,y6,Aro,mne,Lro,fGe,Ao,x6,yro,$6,xro,sP,$ro,kro,Sro,k6,Rro,gne,Pro,Bro,Iro,Ar,S6,Nro,hne,qro,jro,$a,Dro,pne,Gro,Oro,une,Vro,Xro,_ne,zro,Wro,Qro,k,Nn,bne,Hro,Uro,lP,Jro,Yro,iP,Kro,Zro,eto,qn,vne,oto,rto,dP,tto,ato,cP,nto,sto,lto,jn,Fne,ito,dto,fP,cto,fto,mP,mto,gto,hto,Xg,Tne,pto,uto,gP,_to,bto,vto,Dn,Mne,Fto,Tto,hP,Mto,Eto,pP,Cto,wto,Ato,zg,Ene,Lto,yto,uP,xto,$to,kto,Wg,Cne,Sto,Rto,_P,Pto,Bto,Ito,Qg,wne,Nto,qto,bP,jto,Dto,Gto,Gn,Ane,Oto,Vto,vP,Xto,zto,FP,Wto,Qto,Hto,On,Lne,Uto,Jto,TP,Yto,Kto,MP,Zto,eao,oao,Vn,yne,rao,tao,EP,aao,nao,CP,sao,lao,iao,Hg,xne,dao,cao,wP,fao,mao,gao,Ug,$ne,hao,pao,AP,uao,_ao,bao,Jg,kne,vao,Fao,LP,Tao,Mao,Eao,Xn,Sne,Cao,wao,yP,Aao,Lao,xP,yao,xao,$ao,Yg,Rne,kao,Sao,$P,Rao,Pao,Bao,zn,Pne,Iao,Nao,kP,qao,jao,SP,Dao,Gao,Oao,Wn,Bne,Vao,Xao,RP,zao,Wao,PP,Qao,Hao,Uao,Qn,Ine,Jao,Yao,BP,Kao,Zao,IP,eno,ono,rno,Kg,Nne,tno,ano,NP,nno,sno,lno,Hn,qne,ino,dno,qP,cno,fno,jP,mno,gno,hno,Un,jne,pno,uno,DP,_no,bno,GP,vno,Fno,Tno,Jn,Dne,Mno,Eno,OP,Cno,wno,VP,Ano,Lno,yno,Yn,Gne,xno,$no,XP,kno,Sno,zP,Rno,Pno,Bno,Kn,One,Ino,Nno,WP,qno,jno,QP,Dno,Gno,Ono,Zn,Vne,Vno,Xno,HP,zno,Wno,UP,Qno,Hno,Uno,Zg,Xne,Jno,Yno,JP,Kno,Zno,eso,es,zne,oso,rso,YP,tso,aso,KP,nso,sso,lso,eh,Wne,iso,dso,ZP,cso,fso,mso,os,Qne,gso,hso,eB,pso,uso,oB,_so,bso,vso,rs,Hne,Fso,Tso,rB,Mso,Eso,tB,Cso,wso,Aso,ts,Une,Lso,yso,aB,xso,$so,nB,kso,Sso,Rso,oh,Jne,Pso,Bso,sB,Iso,Nso,qso,as,Yne,jso,Dso,lB,Gso,Oso,iB,Vso,Xso,zso,ns,Kne,Wso,Qso,dB,Hso,Uso,cB,Jso,Yso,Kso,rh,Zne,Zso,elo,fB,olo,rlo,tlo,ss,ese,alo,nlo,mB,slo,llo,gB,ilo,dlo,clo,ls,ose,flo,mlo,hB,glo,hlo,pB,plo,ulo,_lo,is,rse,blo,vlo,uB,Flo,Tlo,_B,Mlo,Elo,Clo,ds,tse,wlo,Alo,bB,Llo,ylo,vB,xlo,$lo,klo,cs,ase,Slo,Rlo,FB,Plo,Blo,TB,Ilo,Nlo,qlo,fs,nse,jlo,Dlo,MB,Glo,Olo,EB,Vlo,Xlo,zlo,ms,sse,Wlo,Qlo,CB,Hlo,Ulo,wB,Jlo,Ylo,Klo,gs,lse,Zlo,eio,AB,oio,rio,LB,tio,aio,nio,th,ise,sio,lio,yB,iio,dio,cio,hs,dse,fio,mio,xB,gio,hio,$B,pio,uio,_io,ah,cse,bio,vio,kB,Fio,Tio,Mio,nh,fse,Eio,Cio,SB,wio,Aio,Lio,ps,mse,yio,xio,RB,$io,kio,PB,Sio,Rio,Pio,us,gse,Bio,Iio,BB,Nio,qio,IB,jio,Dio,Gio,_s,hse,Oio,Vio,NB,Xio,zio,qB,Wio,Qio,Hio,sh,pse,Uio,Jio,jB,Yio,Kio,Zio,bs,use,edo,odo,DB,rdo,tdo,GB,ado,ndo,sdo,vs,_se,ldo,ido,OB,ddo,cdo,VB,fdo,mdo,gdo,Fs,bse,hdo,pdo,XB,udo,_do,zB,bdo,vdo,Fdo,Ts,vse,Tdo,Mdo,WB,Edo,Cdo,QB,wdo,Ado,Ldo,Ms,Fse,ydo,xdo,HB,$do,kdo,UB,Sdo,Rdo,Pdo,Es,Tse,Bdo,Ido,JB,Ndo,qdo,YB,jdo,Ddo,Gdo,lh,Mse,Odo,Vdo,KB,Xdo,zdo,Wdo,Cs,Ese,Qdo,Hdo,ZB,Udo,Jdo,eI,Ydo,Kdo,Zdo,ih,Cse,eco,oco,oI,rco,tco,aco,dh,wse,nco,sco,rI,lco,ico,dco,ch,Ase,cco,fco,tI,mco,gco,hco,fh,Lse,pco,uco,aI,_co,bco,vco,ws,yse,Fco,Tco,nI,Mco,Eco,sI,Cco,wco,Aco,mh,xse,Lco,yco,lI,xco,$co,kco,As,$se,Sco,Rco,iI,Pco,Bco,dI,Ico,Nco,qco,Ls,kse,jco,Dco,cI,Gco,Oco,fI,Vco,Xco,zco,ys,Sse,Wco,Qco,mI,Hco,Uco,gI,Jco,Yco,Kco,xs,Rse,Zco,efo,hI,ofo,rfo,pI,tfo,afo,nfo,$s,Pse,sfo,lfo,uI,ifo,dfo,_I,cfo,ffo,mfo,ks,Bse,gfo,hfo,bI,pfo,ufo,vI,_fo,bfo,vfo,gh,Ise,Ffo,Tfo,FI,Mfo,Efo,Cfo,hh,Nse,wfo,Afo,TI,Lfo,yfo,xfo,Ss,qse,$fo,kfo,MI,Sfo,Rfo,EI,Pfo,Bfo,Ifo,Rs,jse,Nfo,qfo,CI,jfo,Dfo,wI,Gfo,Ofo,Vfo,Ps,Dse,Xfo,zfo,AI,Wfo,Qfo,LI,Hfo,Ufo,Jfo,ph,Gse,Yfo,Kfo,yI,Zfo,emo,omo,uh,Ose,rmo,tmo,xI,amo,nmo,smo,_h,Vse,lmo,imo,$I,dmo,cmo,fmo,Bs,Xse,mmo,gmo,kI,hmo,pmo,SI,umo,_mo,bmo,Is,zse,vmo,Fmo,RI,Tmo,Mmo,PI,Emo,Cmo,wmo,bh,Wse,Amo,Lmo,BI,ymo,xmo,$mo,vh,Qse,kmo,Smo,II,Rmo,Pmo,Bmo,Fh,Hse,Imo,Nmo,NI,qmo,jmo,Dmo,Ns,Use,Gmo,Omo,qI,Vmo,Xmo,jI,zmo,Wmo,Qmo,Th,Jse,Hmo,Umo,DI,Jmo,Ymo,Kmo,Mh,Yse,Zmo,ego,GI,ogo,rgo,tgo,qs,Kse,ago,ngo,OI,sgo,lgo,VI,igo,dgo,cgo,js,Zse,fgo,mgo,XI,ggo,hgo,zI,pgo,ugo,_go,Ds,ele,bgo,vgo,WI,Fgo,Tgo,QI,Mgo,Ego,Cgo,Gs,ole,wgo,Ago,HI,Lgo,ygo,UI,xgo,$go,kgo,Eh,Sgo,Ch,R6,Rgo,rle,Pgo,mGe,Si,wh,tle,P6,Bgo,ale,Igo,gGe,Lo,B6,Ngo,I6,qgo,JI,jgo,Dgo,Ggo,N6,Ogo,nle,Vgo,Xgo,zgo,He,q6,Wgo,sle,Qgo,Hgo,ka,Ugo,lle,Jgo,Ygo,ile,Kgo,Zgo,dle,eho,oho,rho,Y,Ah,cle,tho,aho,YI,nho,sho,lho,Lh,fle,iho,dho,KI,cho,fho,mho,yh,mle,gho,hho,ZI,pho,uho,_ho,xh,gle,bho,vho,eN,Fho,Tho,Mho,$h,hle,Eho,Cho,oN,who,Aho,Lho,kh,ple,yho,xho,rN,$ho,kho,Sho,Sh,ule,Rho,Pho,tN,Bho,Iho,Nho,Rh,_le,qho,jho,aN,Dho,Gho,Oho,Ph,ble,Vho,Xho,nN,zho,Who,Qho,Bh,vle,Hho,Uho,sN,Jho,Yho,Kho,Ih,Fle,Zho,epo,lN,opo,rpo,tpo,Nh,Tle,apo,npo,iN,spo,lpo,ipo,qh,Mle,dpo,cpo,dN,fpo,mpo,gpo,jh,Ele,hpo,ppo,cN,upo,_po,bpo,Dh,Cle,vpo,Fpo,fN,Tpo,Mpo,Epo,Gh,wle,Cpo,wpo,mN,Apo,Lpo,ypo,Oh,Ale,xpo,$po,gN,kpo,Spo,Rpo,Vh,Lle,Ppo,Bpo,hN,Ipo,Npo,qpo,Xh,yle,jpo,Dpo,pN,Gpo,Opo,Vpo,zh,xle,Xpo,zpo,uN,Wpo,Qpo,Hpo,Wh,$le,Upo,Jpo,_N,Ypo,Kpo,Zpo,Qh,kle,euo,ouo,bN,ruo,tuo,auo,Hh,Sle,nuo,suo,vN,luo,iuo,duo,Uh,Rle,cuo,fuo,FN,muo,guo,huo,Jh,Ple,puo,uuo,TN,_uo,buo,vuo,Yh,Ble,Fuo,Tuo,MN,Muo,Euo,Cuo,Kh,Ile,wuo,Auo,EN,Luo,yuo,xuo,Zh,Nle,$uo,kuo,CN,Suo,Ruo,Puo,ep,qle,Buo,Iuo,wN,Nuo,quo,juo,op,jle,Duo,Guo,AN,Ouo,Vuo,Xuo,rp,Dle,zuo,Wuo,LN,Quo,Huo,Uuo,tp,Gle,Juo,Yuo,yN,Kuo,Zuo,e_o,ap,o_o,np,r_o,sp,j6,t_o,Ole,a_o,hGe,Ri,lp,Vle,D6,n_o,Xle,s_o,pGe,yo,G6,l_o,O6,i_o,xN,d_o,c_o,f_o,V6,m_o,zle,g_o,h_o,p_o,Ue,X6,u_o,Wle,__o,b_o,Pi,v_o,Qle,F_o,T_o,Hle,M_o,E_o,C_o,he,ip,Ule,w_o,A_o,$N,L_o,y_o,x_o,dp,Jle,$_o,k_o,Yle,S_o,R_o,P_o,cp,Kle,B_o,I_o,kN,N_o,q_o,j_o,fp,Zle,D_o,G_o,SN,O_o,V_o,X_o,mp,eie,z_o,W_o,RN,Q_o,H_o,U_o,gp,oie,J_o,Y_o,PN,K_o,Z_o,e1o,hp,rie,o1o,r1o,BN,t1o,a1o,n1o,pp,tie,s1o,l1o,IN,i1o,d1o,c1o,up,aie,f1o,m1o,NN,g1o,h1o,p1o,_p,nie,u1o,_1o,qN,b1o,v1o,F1o,bp,sie,T1o,M1o,jN,E1o,C1o,w1o,vp,lie,A1o,L1o,DN,y1o,x1o,$1o,Fp,iie,k1o,S1o,GN,R1o,P1o,B1o,Tp,die,I1o,N1o,ON,q1o,j1o,D1o,Mp,cie,G1o,O1o,VN,V1o,X1o,z1o,Ep,fie,W1o,Q1o,XN,H1o,U1o,J1o,Cp,mie,Y1o,K1o,zN,Z1o,e2o,o2o,wp,r2o,Ap,t2o,Lp,z6,a2o,gie,n2o,uGe,Bi,yp,hie,W6,s2o,pie,l2o,_Ge,xo,Q6,i2o,Ii,d2o,WN,c2o,f2o,QN,m2o,g2o,h2o,H6,p2o,uie,u2o,_2o,b2o,nt,U6,v2o,_ie,F2o,T2o,Ni,M2o,bie,E2o,C2o,HN,w2o,A2o,L2o,xp,y2o,Je,J6,x2o,vie,$2o,k2o,Sa,S2o,Fie,R2o,P2o,Tie,B2o,I2o,Mie,N2o,q2o,j2o,y,$p,Eie,D2o,G2o,UN,O2o,V2o,X2o,kp,Cie,z2o,W2o,JN,Q2o,H2o,U2o,Sp,wie,J2o,Y2o,YN,K2o,Z2o,ebo,Rp,Aie,obo,rbo,KN,tbo,abo,nbo,Pp,Lie,sbo,lbo,ZN,ibo,dbo,cbo,Bp,yie,fbo,mbo,eq,gbo,hbo,pbo,Ip,xie,ubo,_bo,oq,bbo,vbo,Fbo,Np,$ie,Tbo,Mbo,rq,Ebo,Cbo,wbo,qp,kie,Abo,Lbo,tq,ybo,xbo,$bo,jp,Sie,kbo,Sbo,aq,Rbo,Pbo,Bbo,Dp,Rie,Ibo,Nbo,nq,qbo,jbo,Dbo,Gp,Pie,Gbo,Obo,sq,Vbo,Xbo,zbo,Op,Bie,Wbo,Qbo,lq,Hbo,Ubo,Jbo,Vp,Iie,Ybo,Kbo,iq,Zbo,evo,ovo,Xp,Nie,rvo,tvo,dq,avo,nvo,svo,zp,qie,lvo,ivo,cq,dvo,cvo,fvo,Wp,jie,mvo,gvo,fq,hvo,pvo,uvo,Qp,Die,_vo,bvo,mq,vvo,Fvo,Tvo,Hp,Gie,Mvo,Evo,gq,Cvo,wvo,Avo,Up,Oie,Lvo,yvo,hq,xvo,$vo,kvo,Jp,Vie,Svo,Rvo,pq,Pvo,Bvo,Ivo,Yp,Xie,Nvo,qvo,uq,jvo,Dvo,Gvo,Kp,zie,Ovo,Vvo,_q,Xvo,zvo,Wvo,Zp,Wie,Qvo,Hvo,bq,Uvo,Jvo,Yvo,eu,Qie,Kvo,Zvo,vq,e0o,o0o,r0o,ou,Hie,t0o,a0o,Fq,n0o,s0o,l0o,ru,Uie,i0o,d0o,Tq,c0o,f0o,m0o,tu,Jie,g0o,h0o,Mq,p0o,u0o,_0o,au,Yie,b0o,v0o,Eq,F0o,T0o,M0o,nu,Kie,E0o,C0o,Cq,w0o,A0o,L0o,su,Zie,y0o,x0o,wq,$0o,k0o,S0o,lu,ede,R0o,P0o,Aq,B0o,I0o,N0o,iu,ode,q0o,j0o,Lq,D0o,G0o,O0o,Os,rde,V0o,X0o,yq,z0o,W0o,xq,Q0o,H0o,U0o,du,tde,J0o,Y0o,$q,K0o,Z0o,eFo,cu,ade,oFo,rFo,kq,tFo,aFo,nFo,fu,nde,sFo,lFo,Sq,iFo,dFo,cFo,mu,sde,fFo,mFo,Rq,gFo,hFo,pFo,gu,lde,uFo,_Fo,Pq,bFo,vFo,FFo,hu,ide,TFo,MFo,Bq,EFo,CFo,wFo,pu,dde,AFo,LFo,Iq,yFo,xFo,$Fo,uu,cde,kFo,SFo,Nq,RFo,PFo,BFo,_u,fde,IFo,NFo,qq,qFo,jFo,DFo,bu,mde,GFo,OFo,jq,VFo,XFo,zFo,vu,gde,WFo,QFo,Dq,HFo,UFo,JFo,Fu,hde,YFo,KFo,Gq,ZFo,eTo,oTo,Tu,pde,rTo,tTo,Oq,aTo,nTo,sTo,Mu,ude,lTo,iTo,Vq,dTo,cTo,fTo,Eu,_de,mTo,gTo,Xq,hTo,pTo,uTo,Cu,bde,_To,bTo,zq,vTo,FTo,TTo,wu,vde,MTo,ETo,Wq,CTo,wTo,ATo,Au,Fde,LTo,yTo,Qq,xTo,$To,kTo,Lu,Tde,STo,RTo,Hq,PTo,BTo,ITo,yu,Mde,NTo,qTo,Uq,jTo,DTo,GTo,xu,Ede,OTo,VTo,Jq,XTo,zTo,WTo,$u,Cde,QTo,HTo,Yq,UTo,JTo,YTo,ku,wde,KTo,ZTo,Kq,e7o,o7o,r7o,Su,Ade,t7o,a7o,Zq,n7o,s7o,l7o,Ru,Lde,i7o,d7o,ej,c7o,f7o,m7o,Pu,yde,g7o,h7o,oj,p7o,u7o,_7o,Bu,xde,b7o,v7o,rj,F7o,T7o,M7o,Iu,$de,E7o,C7o,tj,w7o,A7o,L7o,Nu,kde,y7o,x7o,aj,$7o,k7o,S7o,qu,Sde,R7o,P7o,nj,B7o,I7o,N7o,ju,Rde,q7o,j7o,sj,D7o,G7o,O7o,Du,Pde,V7o,X7o,lj,z7o,W7o,Q7o,Gu,Bde,H7o,U7o,ij,J7o,Y7o,K7o,Ou,Ide,Z7o,e9o,dj,o9o,r9o,t9o,Vu,Nde,a9o,n9o,cj,s9o,l9o,i9o,Xu,qde,d9o,c9o,fj,f9o,m9o,g9o,zu,jde,h9o,p9o,mj,u9o,_9o,b9o,Wu,Dde,v9o,F9o,gj,T9o,M9o,E9o,Qu,Gde,C9o,w9o,hj,A9o,L9o,y9o,Hu,Ode,x9o,$9o,pj,k9o,S9o,R9o,Uu,Vde,P9o,B9o,uj,I9o,N9o,q9o,Ju,Xde,j9o,D9o,_j,G9o,O9o,V9o,Yu,zde,X9o,z9o,bj,W9o,Q9o,H9o,Ku,Wde,U9o,J9o,vj,Y9o,K9o,Z9o,Zu,Qde,eMo,oMo,Fj,rMo,tMo,aMo,e_,Hde,nMo,sMo,Tj,lMo,iMo,dMo,o_,Ude,cMo,fMo,Mj,mMo,gMo,hMo,r_,Jde,pMo,uMo,Ej,_Mo,bMo,vMo,t_,Yde,FMo,TMo,Cj,MMo,EMo,CMo,a_,Kde,wMo,AMo,wj,LMo,yMo,xMo,n_,Zde,$Mo,kMo,Aj,SMo,RMo,PMo,s_,ece,BMo,IMo,Lj,NMo,qMo,jMo,l_,oce,DMo,GMo,yj,OMo,VMo,XMo,i_,rce,zMo,WMo,xj,QMo,HMo,UMo,d_,tce,JMo,YMo,$j,KMo,ZMo,e4o,c_,ace,o4o,r4o,kj,t4o,a4o,n4o,f_,nce,s4o,l4o,Sj,i4o,d4o,c4o,m_,sce,f4o,m4o,Rj,g4o,h4o,p4o,g_,lce,u4o,_4o,Pj,b4o,v4o,F4o,h_,ice,T4o,M4o,Bj,E4o,C4o,w4o,p_,dce,A4o,L4o,Ij,y4o,x4o,$4o,u_,cce,k4o,S4o,Nj,R4o,P4o,B4o,__,fce,I4o,N4o,qj,q4o,j4o,D4o,b_,mce,G4o,O4o,jj,V4o,X4o,z4o,v_,gce,W4o,Q4o,Dj,H4o,U4o,J4o,F_,hce,Y4o,K4o,Gj,Z4o,eEo,oEo,T_,pce,rEo,tEo,Oj,aEo,nEo,sEo,M_,uce,lEo,iEo,Vj,dEo,cEo,fEo,E_,_ce,mEo,gEo,Xj,hEo,pEo,uEo,C_,bce,_Eo,bEo,zj,vEo,FEo,TEo,w_,vce,MEo,EEo,Wj,CEo,wEo,AEo,A_,Fce,LEo,yEo,Qj,xEo,$Eo,kEo,L_,Tce,SEo,REo,Hj,PEo,BEo,IEo,y_,NEo,Mce,qEo,jEo,Ece,DEo,GEo,x_,bGe,qi,$_,Cce,Y6,OEo,wce,VEo,vGe,$o,K6,XEo,ji,zEo,Uj,WEo,QEo,Jj,HEo,UEo,JEo,Z6,YEo,Ace,KEo,ZEo,eCo,st,eL,oCo,Lce,rCo,tCo,Di,aCo,yce,nCo,sCo,Yj,lCo,iCo,dCo,k_,cCo,Ye,oL,fCo,xce,mCo,gCo,Ra,hCo,$ce,pCo,uCo,kce,_Co,bCo,Sce,vCo,FCo,TCo,G,S_,Rce,MCo,ECo,Kj,CCo,wCo,ACo,R_,Pce,LCo,yCo,Zj,xCo,$Co,kCo,P_,Bce,SCo,RCo,eD,PCo,BCo,ICo,B_,Ice,NCo,qCo,oD,jCo,DCo,GCo,I_,Nce,OCo,VCo,rD,XCo,zCo,WCo,N_,qce,QCo,HCo,tD,UCo,JCo,YCo,q_,jce,KCo,ZCo,aD,e5o,o5o,r5o,j_,Dce,t5o,a5o,nD,n5o,s5o,l5o,D_,Gce,i5o,d5o,sD,c5o,f5o,m5o,G_,Oce,g5o,h5o,lD,p5o,u5o,_5o,O_,Vce,b5o,v5o,iD,F5o,T5o,M5o,V_,Xce,E5o,C5o,dD,w5o,A5o,L5o,X_,zce,y5o,x5o,cD,$5o,k5o,S5o,z_,Wce,R5o,P5o,fD,B5o,I5o,N5o,W_,Qce,q5o,j5o,mD,D5o,G5o,O5o,Q_,Hce,V5o,X5o,gD,z5o,W5o,Q5o,H_,Uce,H5o,U5o,hD,J5o,Y5o,K5o,U_,Jce,Z5o,e3o,pD,o3o,r3o,t3o,J_,Yce,a3o,n3o,uD,s3o,l3o,i3o,Y_,Kce,d3o,c3o,_D,f3o,m3o,g3o,K_,Zce,h3o,p3o,bD,u3o,_3o,b3o,Z_,efe,v3o,F3o,vD,T3o,M3o,E3o,e1,ofe,C3o,w3o,FD,A3o,L3o,y3o,o1,rfe,x3o,$3o,TD,k3o,S3o,R3o,r1,tfe,P3o,B3o,MD,I3o,N3o,q3o,t1,afe,j3o,D3o,ED,G3o,O3o,V3o,a1,nfe,X3o,z3o,CD,W3o,Q3o,H3o,n1,sfe,U3o,J3o,wD,Y3o,K3o,Z3o,s1,lfe,ewo,owo,AD,rwo,two,awo,l1,ife,nwo,swo,LD,lwo,iwo,dwo,i1,dfe,cwo,fwo,yD,mwo,gwo,hwo,d1,cfe,pwo,uwo,xD,_wo,bwo,vwo,c1,ffe,Fwo,Two,$D,Mwo,Ewo,Cwo,f1,mfe,wwo,Awo,kD,Lwo,ywo,xwo,m1,gfe,$wo,kwo,SD,Swo,Rwo,Pwo,g1,hfe,Bwo,Iwo,RD,Nwo,qwo,jwo,h1,pfe,Dwo,Gwo,PD,Owo,Vwo,Xwo,p1,ufe,zwo,Wwo,BD,Qwo,Hwo,Uwo,u1,_fe,Jwo,Ywo,ID,Kwo,Zwo,eAo,_1,bfe,oAo,rAo,ND,tAo,aAo,nAo,b1,vfe,sAo,lAo,qD,iAo,dAo,cAo,v1,Ffe,fAo,mAo,jD,gAo,hAo,pAo,F1,Tfe,uAo,_Ao,DD,bAo,vAo,FAo,T1,TAo,Mfe,MAo,EAo,Efe,CAo,wAo,M1,FGe,Gi,E1,Cfe,rL,AAo,wfe,LAo,TGe,ko,tL,yAo,Oi,xAo,GD,$Ao,kAo,OD,SAo,RAo,PAo,aL,BAo,Afe,IAo,NAo,qAo,lt,nL,jAo,Lfe,DAo,GAo,Vi,OAo,yfe,VAo,XAo,VD,zAo,WAo,QAo,C1,HAo,Ke,sL,UAo,xfe,JAo,YAo,Pa,KAo,$fe,ZAo,e6o,kfe,o6o,r6o,Sfe,t6o,a6o,n6o,z,w1,Rfe,s6o,l6o,XD,i6o,d6o,c6o,A1,Pfe,f6o,m6o,zD,g6o,h6o,p6o,L1,Bfe,u6o,_6o,WD,b6o,v6o,F6o,y1,Ife,T6o,M6o,QD,E6o,C6o,w6o,x1,Nfe,A6o,L6o,HD,y6o,x6o,$6o,$1,qfe,k6o,S6o,UD,R6o,P6o,B6o,k1,jfe,I6o,N6o,JD,q6o,j6o,D6o,S1,Dfe,G6o,O6o,YD,V6o,X6o,z6o,R1,Gfe,W6o,Q6o,KD,H6o,U6o,J6o,P1,Ofe,Y6o,K6o,ZD,Z6o,eLo,oLo,B1,Vfe,rLo,tLo,eG,aLo,nLo,sLo,I1,Xfe,lLo,iLo,oG,dLo,cLo,fLo,N1,zfe,mLo,gLo,rG,hLo,pLo,uLo,q1,Wfe,_Lo,bLo,tG,vLo,FLo,TLo,j1,Qfe,MLo,ELo,aG,CLo,wLo,ALo,D1,Hfe,LLo,yLo,nG,xLo,$Lo,kLo,G1,Ufe,SLo,RLo,sG,PLo,BLo,ILo,O1,Jfe,NLo,qLo,lG,jLo,DLo,GLo,V1,Yfe,OLo,VLo,iG,XLo,zLo,WLo,X1,Kfe,QLo,HLo,dG,ULo,JLo,YLo,z1,Zfe,KLo,ZLo,cG,eyo,oyo,ryo,W1,eme,tyo,ayo,fG,nyo,syo,lyo,Q1,ome,iyo,dyo,mG,cyo,fyo,myo,H1,rme,gyo,hyo,gG,pyo,uyo,_yo,U1,tme,byo,vyo,hG,Fyo,Tyo,Myo,J1,ame,Eyo,Cyo,pG,wyo,Ayo,Lyo,Y1,nme,yyo,xyo,uG,$yo,kyo,Syo,K1,sme,Ryo,Pyo,_G,Byo,Iyo,Nyo,Z1,lme,qyo,jyo,bG,Dyo,Gyo,Oyo,e2,ime,Vyo,Xyo,vG,zyo,Wyo,Qyo,o2,dme,Hyo,Uyo,FG,Jyo,Yyo,Kyo,r2,cme,Zyo,e8o,TG,o8o,r8o,t8o,t2,fme,a8o,n8o,MG,s8o,l8o,i8o,a2,mme,d8o,c8o,EG,f8o,m8o,g8o,n2,gme,h8o,p8o,CG,u8o,_8o,b8o,s2,hme,v8o,F8o,wG,T8o,M8o,E8o,l2,pme,C8o,w8o,AG,A8o,L8o,y8o,i2,ume,x8o,$8o,LG,k8o,S8o,R8o,d2,P8o,_me,B8o,I8o,bme,N8o,q8o,c2,MGe,Xi,f2,vme,lL,j8o,Fme,D8o,EGe,So,iL,G8o,zi,O8o,yG,V8o,X8o,xG,z8o,W8o,Q8o,dL,H8o,Tme,U8o,J8o,Y8o,it,cL,K8o,Mme,Z8o,exo,Wi,oxo,Eme,rxo,txo,$G,axo,nxo,sxo,m2,lxo,Ze,fL,ixo,Cme,dxo,cxo,Ba,fxo,wme,mxo,gxo,Ame,hxo,pxo,Lme,uxo,_xo,bxo,Q,g2,yme,vxo,Fxo,kG,Txo,Mxo,Exo,h2,xme,Cxo,wxo,SG,Axo,Lxo,yxo,p2,$me,xxo,$xo,RG,kxo,Sxo,Rxo,u2,kme,Pxo,Bxo,PG,Ixo,Nxo,qxo,_2,Sme,jxo,Dxo,BG,Gxo,Oxo,Vxo,b2,Rme,Xxo,zxo,IG,Wxo,Qxo,Hxo,v2,Pme,Uxo,Jxo,NG,Yxo,Kxo,Zxo,F2,Bme,e$o,o$o,qG,r$o,t$o,a$o,T2,Ime,n$o,s$o,jG,l$o,i$o,d$o,M2,Nme,c$o,f$o,DG,m$o,g$o,h$o,E2,qme,p$o,u$o,GG,_$o,b$o,v$o,C2,jme,F$o,T$o,OG,M$o,E$o,C$o,w2,Dme,w$o,A$o,VG,L$o,y$o,x$o,A2,Gme,$$o,k$o,XG,S$o,R$o,P$o,L2,Ome,B$o,I$o,zG,N$o,q$o,j$o,y2,Vme,D$o,G$o,WG,O$o,V$o,X$o,x2,Xme,z$o,W$o,QG,Q$o,H$o,U$o,$2,zme,J$o,Y$o,HG,K$o,Z$o,eko,k2,Wme,oko,rko,UG,tko,ako,nko,S2,Qme,sko,lko,JG,iko,dko,cko,R2,Hme,fko,mko,YG,gko,hko,pko,P2,Ume,uko,_ko,KG,bko,vko,Fko,B2,Jme,Tko,Mko,ZG,Eko,Cko,wko,I2,Yme,Ako,Lko,eO,yko,xko,$ko,N2,Kme,kko,Sko,oO,Rko,Pko,Bko,q2,Zme,Iko,Nko,rO,qko,jko,Dko,j2,ege,Gko,Oko,tO,Vko,Xko,zko,D2,oge,Wko,Qko,aO,Hko,Uko,Jko,G2,rge,Yko,Kko,nO,Zko,eSo,oSo,O2,tge,rSo,tSo,sO,aSo,nSo,sSo,V2,age,lSo,iSo,lO,dSo,cSo,fSo,X2,nge,mSo,gSo,sge,hSo,pSo,uSo,z2,lge,_So,bSo,iO,vSo,FSo,TSo,W2,ige,MSo,ESo,dO,CSo,wSo,ASo,Q2,dge,LSo,ySo,cO,xSo,$So,kSo,H2,cge,SSo,RSo,fO,PSo,BSo,ISo,U2,NSo,fge,qSo,jSo,mge,DSo,GSo,J2,CGe,Qi,Y2,gge,mL,OSo,hge,VSo,wGe,Ro,gL,XSo,Hi,zSo,mO,WSo,QSo,gO,HSo,USo,JSo,hL,YSo,pge,KSo,ZSo,eRo,dt,pL,oRo,uge,rRo,tRo,Ui,aRo,_ge,nRo,sRo,hO,lRo,iRo,dRo,K2,cRo,eo,uL,fRo,bge,mRo,gRo,Ia,hRo,vge,pRo,uRo,Fge,_Ro,bRo,Tge,vRo,FRo,TRo,pe,Z2,Mge,MRo,ERo,pO,CRo,wRo,ARo,eb,Ege,LRo,yRo,uO,xRo,$Ro,kRo,ob,Cge,SRo,RRo,_O,PRo,BRo,IRo,rb,wge,NRo,qRo,bO,jRo,DRo,GRo,tb,Age,ORo,VRo,vO,XRo,zRo,WRo,ab,Lge,QRo,HRo,FO,URo,JRo,YRo,nb,yge,KRo,ZRo,TO,ePo,oPo,rPo,sb,xge,tPo,aPo,MO,nPo,sPo,lPo,lb,$ge,iPo,dPo,EO,cPo,fPo,mPo,ib,kge,gPo,hPo,CO,pPo,uPo,_Po,db,Sge,bPo,vPo,wO,FPo,TPo,MPo,cb,Rge,EPo,CPo,AO,wPo,APo,LPo,fb,Pge,yPo,xPo,LO,$Po,kPo,SPo,mb,Bge,RPo,PPo,yO,BPo,IPo,NPo,gb,Ige,qPo,jPo,xO,DPo,GPo,OPo,hb,Nge,VPo,XPo,$O,zPo,WPo,QPo,pb,qge,HPo,UPo,kO,JPo,YPo,KPo,ub,ZPo,jge,eBo,oBo,Dge,rBo,tBo,_b,AGe,Ji,bb,Gge,_L,aBo,Oge,nBo,LGe,Po,bL,sBo,Yi,lBo,SO,iBo,dBo,RO,cBo,fBo,mBo,vL,gBo,Vge,hBo,pBo,uBo,ct,FL,_Bo,Xge,bBo,vBo,Ki,FBo,zge,TBo,MBo,PO,EBo,CBo,wBo,vb,ABo,oo,TL,LBo,Wge,yBo,xBo,Na,$Bo,Qge,kBo,SBo,Hge,RBo,PBo,Uge,BBo,IBo,NBo,N,Fb,Jge,qBo,jBo,BO,DBo,GBo,OBo,Tb,Yge,VBo,XBo,IO,zBo,WBo,QBo,Mb,Kge,HBo,UBo,NO,JBo,YBo,KBo,Eb,Zge,ZBo,eIo,qO,oIo,rIo,tIo,Cb,ehe,aIo,nIo,jO,sIo,lIo,iIo,wb,ohe,dIo,cIo,DO,fIo,mIo,gIo,Ab,rhe,hIo,pIo,GO,uIo,_Io,bIo,Lb,the,vIo,FIo,OO,TIo,MIo,EIo,yb,ahe,CIo,wIo,VO,AIo,LIo,yIo,xb,nhe,xIo,$Io,XO,kIo,SIo,RIo,$b,she,PIo,BIo,zO,IIo,NIo,qIo,kb,lhe,jIo,DIo,WO,GIo,OIo,VIo,Sb,ihe,XIo,zIo,QO,WIo,QIo,HIo,Rb,dhe,UIo,JIo,HO,YIo,KIo,ZIo,Pb,che,eNo,oNo,UO,rNo,tNo,aNo,Bb,fhe,nNo,sNo,JO,lNo,iNo,dNo,Ib,mhe,cNo,fNo,YO,mNo,gNo,hNo,Nb,ghe,pNo,uNo,KO,_No,bNo,vNo,qb,hhe,FNo,TNo,ZO,MNo,ENo,CNo,jb,phe,wNo,ANo,eV,LNo,yNo,xNo,Db,uhe,$No,kNo,oV,SNo,RNo,PNo,Gb,_he,BNo,INo,rV,NNo,qNo,jNo,Ob,bhe,DNo,GNo,tV,ONo,VNo,XNo,Vb,vhe,zNo,WNo,aV,QNo,HNo,UNo,Xb,Fhe,JNo,YNo,nV,KNo,ZNo,eqo,zb,The,oqo,rqo,sV,tqo,aqo,nqo,Wb,Mhe,sqo,lqo,lV,iqo,dqo,cqo,Qb,Ehe,fqo,mqo,iV,gqo,hqo,pqo,Hb,Che,uqo,_qo,dV,bqo,vqo,Fqo,Ub,whe,Tqo,Mqo,cV,Eqo,Cqo,wqo,Jb,Ahe,Aqo,Lqo,fV,yqo,xqo,$qo,Yb,Lhe,kqo,Sqo,mV,Rqo,Pqo,Bqo,Kb,yhe,Iqo,Nqo,gV,qqo,jqo,Dqo,Zb,xhe,Gqo,Oqo,hV,Vqo,Xqo,zqo,ev,$he,Wqo,Qqo,pV,Hqo,Uqo,Jqo,ov,khe,Yqo,Kqo,uV,Zqo,ejo,ojo,rv,She,rjo,tjo,_V,ajo,njo,sjo,tv,Rhe,ljo,ijo,bV,djo,cjo,fjo,av,Phe,mjo,gjo,vV,hjo,pjo,ujo,nv,Bhe,_jo,bjo,FV,vjo,Fjo,Tjo,sv,Ihe,Mjo,Ejo,TV,Cjo,wjo,Ajo,lv,Nhe,Ljo,yjo,MV,xjo,$jo,kjo,iv,qhe,Sjo,Rjo,EV,Pjo,Bjo,Ijo,dv,jhe,Njo,qjo,CV,jjo,Djo,Gjo,cv,Dhe,Ojo,Vjo,wV,Xjo,zjo,Wjo,fv,Ghe,Qjo,Hjo,AV,Ujo,Jjo,Yjo,mv,Ohe,Kjo,Zjo,LV,eDo,oDo,rDo,gv,tDo,Vhe,aDo,nDo,Xhe,sDo,lDo,hv,yGe,Zi,pv,zhe,ML,iDo,Whe,dDo,xGe,Bo,EL,cDo,ed,fDo,yV,mDo,gDo,xV,hDo,pDo,uDo,CL,_Do,Qhe,bDo,vDo,FDo,ft,wL,TDo,Hhe,MDo,EDo,od,CDo,Uhe,wDo,ADo,$V,LDo,yDo,xDo,uv,$Do,ro,AL,kDo,Jhe,SDo,RDo,qa,PDo,Yhe,BDo,IDo,Khe,NDo,qDo,Zhe,jDo,DDo,GDo,Z,_v,epe,ODo,VDo,kV,XDo,zDo,WDo,bv,ope,QDo,HDo,SV,UDo,JDo,YDo,vv,rpe,KDo,ZDo,RV,eGo,oGo,rGo,Fv,tpe,tGo,aGo,PV,nGo,sGo,lGo,Tv,ape,iGo,dGo,BV,cGo,fGo,mGo,Mv,npe,gGo,hGo,IV,pGo,uGo,_Go,Ev,spe,bGo,vGo,NV,FGo,TGo,MGo,Cv,lpe,EGo,CGo,qV,wGo,AGo,LGo,wv,ipe,yGo,xGo,jV,$Go,kGo,SGo,Av,dpe,RGo,PGo,DV,BGo,IGo,NGo,Lv,cpe,qGo,jGo,GV,DGo,GGo,OGo,yv,fpe,VGo,XGo,OV,zGo,WGo,QGo,xv,mpe,HGo,UGo,VV,JGo,YGo,KGo,$v,gpe,ZGo,eOo,XV,oOo,rOo,tOo,kv,hpe,aOo,nOo,zV,sOo,lOo,iOo,Sv,ppe,dOo,cOo,WV,fOo,mOo,gOo,Rv,upe,hOo,pOo,QV,uOo,_Oo,bOo,Pv,_pe,vOo,FOo,HV,TOo,MOo,EOo,Bv,bpe,COo,wOo,UV,AOo,LOo,yOo,Iv,vpe,xOo,$Oo,JV,kOo,SOo,ROo,Nv,Fpe,POo,BOo,YV,IOo,NOo,qOo,qv,Tpe,jOo,DOo,KV,GOo,OOo,VOo,jv,Mpe,XOo,zOo,ZV,WOo,QOo,HOo,Dv,Epe,UOo,JOo,eX,YOo,KOo,ZOo,Gv,Cpe,eVo,oVo,oX,rVo,tVo,aVo,Ov,wpe,nVo,sVo,rX,lVo,iVo,dVo,Vv,Ape,cVo,fVo,tX,mVo,gVo,hVo,Xv,Lpe,pVo,uVo,aX,_Vo,bVo,vVo,zv,ype,FVo,TVo,nX,MVo,EVo,CVo,Wv,wVo,xpe,AVo,LVo,$pe,yVo,xVo,Qv,$Ge,rd,Hv,kpe,LL,$Vo,Spe,kVo,kGe,Io,yL,SVo,td,RVo,sX,PVo,BVo,lX,IVo,NVo,qVo,xL,jVo,Rpe,DVo,GVo,OVo,mt,$L,VVo,Ppe,XVo,zVo,ad,WVo,Bpe,QVo,HVo,iX,UVo,JVo,YVo,Uv,KVo,to,kL,ZVo,Ipe,eXo,oXo,ja,rXo,Npe,tXo,aXo,qpe,nXo,sXo,jpe,lXo,iXo,dXo,Zr,Jv,Dpe,cXo,fXo,dX,mXo,gXo,hXo,Yv,Gpe,pXo,uXo,cX,_Xo,bXo,vXo,Kv,Ope,FXo,TXo,fX,MXo,EXo,CXo,Zv,Vpe,wXo,AXo,mX,LXo,yXo,xXo,e0,Xpe,$Xo,kXo,gX,SXo,RXo,PXo,o0,BXo,zpe,IXo,NXo,Wpe,qXo,jXo,r0,SGe,nd,t0,Qpe,SL,DXo,Hpe,GXo,RGe,No,RL,OXo,sd,VXo,hX,XXo,zXo,pX,WXo,QXo,HXo,PL,UXo,Upe,JXo,YXo,KXo,gt,BL,ZXo,Jpe,ezo,ozo,ld,rzo,Ype,tzo,azo,uX,nzo,szo,lzo,a0,izo,ao,IL,dzo,Kpe,czo,fzo,Da,mzo,Zpe,gzo,hzo,eue,pzo,uzo,oue,_zo,bzo,vzo,U,n0,rue,Fzo,Tzo,_X,Mzo,Ezo,Czo,s0,tue,wzo,Azo,bX,Lzo,yzo,xzo,l0,aue,$zo,kzo,vX,Szo,Rzo,Pzo,i0,nue,Bzo,Izo,FX,Nzo,qzo,jzo,d0,sue,Dzo,Gzo,TX,Ozo,Vzo,Xzo,c0,lue,zzo,Wzo,MX,Qzo,Hzo,Uzo,f0,iue,Jzo,Yzo,EX,Kzo,Zzo,eWo,m0,due,oWo,rWo,CX,tWo,aWo,nWo,g0,cue,sWo,lWo,wX,iWo,dWo,cWo,h0,fue,fWo,mWo,AX,gWo,hWo,pWo,p0,mue,uWo,_Wo,LX,bWo,vWo,FWo,u0,gue,TWo,MWo,yX,EWo,CWo,wWo,_0,hue,AWo,LWo,xX,yWo,xWo,$Wo,b0,pue,kWo,SWo,$X,RWo,PWo,BWo,v0,uue,IWo,NWo,kX,qWo,jWo,DWo,F0,_ue,GWo,OWo,SX,VWo,XWo,zWo,T0,bue,WWo,QWo,RX,HWo,UWo,JWo,M0,vue,YWo,KWo,PX,ZWo,eQo,oQo,E0,Fue,rQo,tQo,BX,aQo,nQo,sQo,C0,Tue,lQo,iQo,IX,dQo,cQo,fQo,w0,Mue,mQo,gQo,NX,hQo,pQo,uQo,A0,Eue,_Qo,bQo,qX,vQo,FQo,TQo,L0,Cue,MQo,EQo,jX,CQo,wQo,AQo,y0,wue,LQo,yQo,DX,xQo,$Qo,kQo,x0,Aue,SQo,RQo,GX,PQo,BQo,IQo,$0,Lue,NQo,qQo,OX,jQo,DQo,GQo,k0,yue,OQo,VQo,VX,XQo,zQo,WQo,S0,xue,QQo,HQo,XX,UQo,JQo,YQo,R0,$ue,KQo,ZQo,zX,eHo,oHo,rHo,P0,kue,tHo,aHo,WX,nHo,sHo,lHo,B0,Sue,iHo,dHo,QX,cHo,fHo,mHo,I0,Rue,gHo,hHo,HX,pHo,uHo,_Ho,N0,Pue,bHo,vHo,UX,FHo,THo,MHo,q0,Bue,EHo,CHo,JX,wHo,AHo,LHo,j0,yHo,Iue,xHo,$Ho,Nue,kHo,SHo,D0,PGe,id,G0,que,NL,RHo,jue,PHo,BGe,qo,qL,BHo,dd,IHo,YX,NHo,qHo,KX,jHo,DHo,GHo,jL,OHo,Due,VHo,XHo,zHo,ht,DL,WHo,Gue,QHo,HHo,cd,UHo,Oue,JHo,YHo,ZX,KHo,ZHo,eUo,O0,oUo,no,GL,rUo,Vue,tUo,aUo,Ga,nUo,Xue,sUo,lUo,zue,iUo,dUo,Wue,cUo,fUo,mUo,V,V0,Que,gUo,hUo,ez,pUo,uUo,_Uo,X0,Hue,bUo,vUo,oz,FUo,TUo,MUo,z0,Uue,EUo,CUo,rz,wUo,AUo,LUo,W0,Jue,yUo,xUo,tz,$Uo,kUo,SUo,Q0,Yue,RUo,PUo,az,BUo,IUo,NUo,H0,Kue,qUo,jUo,nz,DUo,GUo,OUo,U0,Zue,VUo,XUo,sz,zUo,WUo,QUo,J0,e_e,HUo,UUo,lz,JUo,YUo,KUo,Y0,o_e,ZUo,eJo,iz,oJo,rJo,tJo,K0,r_e,aJo,nJo,dz,sJo,lJo,iJo,Z0,t_e,dJo,cJo,cz,fJo,mJo,gJo,eF,a_e,hJo,pJo,fz,uJo,_Jo,bJo,oF,n_e,vJo,FJo,mz,TJo,MJo,EJo,rF,s_e,CJo,wJo,gz,AJo,LJo,yJo,tF,l_e,xJo,$Jo,hz,kJo,SJo,RJo,aF,i_e,PJo,BJo,pz,IJo,NJo,qJo,nF,d_e,jJo,DJo,uz,GJo,OJo,VJo,sF,c_e,XJo,zJo,_z,WJo,QJo,HJo,lF,f_e,UJo,JJo,bz,YJo,KJo,ZJo,iF,m_e,eYo,oYo,vz,rYo,tYo,aYo,dF,g_e,nYo,sYo,Fz,lYo,iYo,dYo,cF,h_e,cYo,fYo,Tz,mYo,gYo,hYo,fF,p_e,pYo,uYo,Mz,_Yo,bYo,vYo,mF,u_e,FYo,TYo,Ez,MYo,EYo,CYo,gF,__e,wYo,AYo,Cz,LYo,yYo,xYo,hF,b_e,$Yo,kYo,wz,SYo,RYo,PYo,pF,v_e,BYo,IYo,Az,NYo,qYo,jYo,uF,F_e,DYo,GYo,Lz,OYo,VYo,XYo,_F,T_e,zYo,WYo,yz,QYo,HYo,UYo,bF,M_e,JYo,YYo,xz,KYo,ZYo,eKo,vF,E_e,oKo,rKo,$z,tKo,aKo,nKo,FF,C_e,sKo,lKo,kz,iKo,dKo,cKo,TF,w_e,fKo,mKo,Sz,gKo,hKo,pKo,MF,A_e,uKo,_Ko,Rz,bKo,vKo,FKo,EF,L_e,TKo,MKo,Pz,EKo,CKo,wKo,CF,y_e,AKo,LKo,Bz,yKo,xKo,$Ko,wF,x_e,kKo,SKo,Iz,RKo,PKo,BKo,AF,$_e,IKo,NKo,Nz,qKo,jKo,DKo,LF,k_e,GKo,OKo,qz,VKo,XKo,zKo,yF,S_e,WKo,QKo,jz,HKo,UKo,JKo,xF,YKo,R_e,KKo,ZKo,P_e,eZo,oZo,$F,IGe,fd,kF,B_e,OL,rZo,I_e,tZo,NGe,jo,VL,aZo,md,nZo,Dz,sZo,lZo,Gz,iZo,dZo,cZo,XL,fZo,N_e,mZo,gZo,hZo,pt,zL,pZo,q_e,uZo,_Zo,gd,bZo,j_e,vZo,FZo,Oz,TZo,MZo,EZo,SF,CZo,so,WL,wZo,D_e,AZo,LZo,Oa,yZo,G_e,xZo,$Zo,O_e,kZo,SZo,V_e,RZo,PZo,BZo,X_e,RF,z_e,IZo,NZo,Vz,qZo,jZo,DZo,PF,GZo,W_e,OZo,VZo,Q_e,XZo,zZo,BF,qGe,hd,IF,H_e,QL,WZo,U_e,QZo,jGe,Do,HL,HZo,pd,UZo,Xz,JZo,YZo,zz,KZo,ZZo,eer,UL,oer,J_e,rer,ter,aer,ut,JL,ner,Y_e,ser,ler,ud,ier,K_e,der,cer,Wz,fer,mer,ger,NF,her,lo,YL,per,Z_e,uer,_er,Va,ber,e1e,ver,Fer,o1e,Ter,Mer,r1e,Eer,Cer,wer,Fe,qF,t1e,Aer,Ler,Qz,yer,xer,$er,jF,a1e,ker,Ser,Hz,Rer,Per,Ber,DF,n1e,Ier,Ner,Uz,qer,jer,Der,GF,s1e,Ger,Oer,Jz,Ver,Xer,zer,Vs,l1e,Wer,Qer,Yz,Her,Uer,Kz,Jer,Yer,Ker,OF,i1e,Zer,eor,Zz,oor,ror,tor,Xs,d1e,aor,nor,eW,sor,lor,oW,ior,dor,cor,_t,c1e,mor,gor,rW,hor,por,tW,uor,_or,aW,bor,vor,For,VF,f1e,Tor,Mor,nW,Eor,Cor,wor,XF,m1e,Aor,Lor,sW,yor,xor,$or,zF,g1e,kor,Sor,lW,Ror,Por,Bor,WF,h1e,Ior,Nor,iW,qor,jor,Dor,QF,p1e,Gor,Oor,dW,Vor,Xor,zor,HF,u1e,Wor,Qor,cW,Hor,Uor,Jor,UF,_1e,Yor,Kor,fW,Zor,err,orr,JF,rrr,b1e,trr,arr,v1e,nrr,srr,YF,DGe,_d,KF,F1e,KL,lrr,T1e,irr,GGe,Go,ZL,drr,bd,crr,mW,frr,mrr,gW,grr,hrr,prr,ey,urr,M1e,_rr,brr,vrr,bt,oy,Frr,E1e,Trr,Mrr,vd,Err,C1e,Crr,wrr,hW,Arr,Lrr,yrr,ZF,xrr,io,ry,$rr,w1e,krr,Srr,Xa,Rrr,A1e,Prr,Brr,L1e,Irr,Nrr,y1e,qrr,jrr,Drr,x1e,eT,$1e,Grr,Orr,pW,Vrr,Xrr,zrr,oT,Wrr,k1e,Qrr,Hrr,S1e,Urr,Jrr,rT,OGe,Fd,tT,R1e,ty,Yrr,P1e,Krr,VGe,Oo,ay,Zrr,Td,etr,uW,otr,rtr,_W,ttr,atr,ntr,ny,str,B1e,ltr,itr,dtr,vt,sy,ctr,I1e,ftr,mtr,Md,gtr,N1e,htr,ptr,bW,utr,_tr,btr,aT,vtr,co,ly,Ftr,q1e,Ttr,Mtr,za,Etr,j1e,Ctr,wtr,D1e,Atr,Ltr,G1e,ytr,xtr,$tr,O1e,nT,V1e,ktr,Str,vW,Rtr,Ptr,Btr,sT,Itr,X1e,Ntr,qtr,z1e,jtr,Dtr,lT,XGe,Ed,iT,W1e,iy,Gtr,Q1e,Otr,zGe,Vo,dy,Vtr,Cd,Xtr,FW,ztr,Wtr,TW,Qtr,Htr,Utr,cy,Jtr,H1e,Ytr,Ktr,Ztr,Ft,fy,ear,U1e,oar,rar,wd,tar,J1e,aar,nar,MW,sar,lar,iar,dT,dar,fo,my,car,Y1e,far,mar,Wa,gar,K1e,har,par,Z1e,uar,_ar,e2e,bar,Far,Tar,Pe,cT,o2e,Mar,Ear,EW,Car,war,Aar,fT,r2e,Lar,yar,CW,xar,$ar,kar,mT,t2e,Sar,Rar,wW,Par,Bar,Iar,gT,a2e,Nar,qar,AW,jar,Dar,Gar,hT,n2e,Oar,Var,LW,Xar,zar,War,pT,s2e,Qar,Har,yW,Uar,Jar,Yar,uT,l2e,Kar,Zar,xW,enr,onr,rnr,_T,i2e,tnr,anr,$W,nnr,snr,lnr,bT,d2e,inr,dnr,kW,cnr,fnr,mnr,vT,gnr,c2e,hnr,pnr,f2e,unr,_nr,FT,WGe,Ad,TT,m2e,gy,bnr,g2e,vnr,QGe,Xo,hy,Fnr,Ld,Tnr,SW,Mnr,Enr,RW,Cnr,wnr,Anr,py,Lnr,h2e,ynr,xnr,$nr,Tt,uy,knr,p2e,Snr,Rnr,yd,Pnr,u2e,Bnr,Inr,PW,Nnr,qnr,jnr,MT,Dnr,mo,_y,Gnr,_2e,Onr,Vnr,Qa,Xnr,b2e,znr,Wnr,v2e,Qnr,Hnr,F2e,Unr,Jnr,Ynr,et,ET,T2e,Knr,Znr,BW,esr,osr,rsr,CT,M2e,tsr,asr,IW,nsr,ssr,lsr,wT,E2e,isr,dsr,NW,csr,fsr,msr,AT,C2e,gsr,hsr,qW,psr,usr,_sr,LT,w2e,bsr,vsr,jW,Fsr,Tsr,Msr,yT,Esr,A2e,Csr,wsr,L2e,Asr,Lsr,xT,HGe,xd,$T,y2e,by,ysr,x2e,xsr,UGe,zo,vy,$sr,$d,ksr,DW,Ssr,Rsr,GW,Psr,Bsr,Isr,Fy,Nsr,$2e,qsr,jsr,Dsr,Mt,Ty,Gsr,k2e,Osr,Vsr,kd,Xsr,S2e,zsr,Wsr,OW,Qsr,Hsr,Usr,kT,Jsr,go,My,Ysr,R2e,Ksr,Zsr,Ha,elr,P2e,olr,rlr,B2e,tlr,alr,I2e,nlr,slr,llr,Le,ST,N2e,ilr,dlr,VW,clr,flr,mlr,RT,q2e,glr,hlr,XW,plr,ulr,_lr,PT,j2e,blr,vlr,zW,Flr,Tlr,Mlr,BT,D2e,Elr,Clr,WW,wlr,Alr,Llr,IT,G2e,ylr,xlr,QW,$lr,klr,Slr,NT,O2e,Rlr,Plr,HW,Blr,Ilr,Nlr,qT,V2e,qlr,jlr,UW,Dlr,Glr,Olr,jT,X2e,Vlr,Xlr,JW,zlr,Wlr,Qlr,DT,z2e,Hlr,Ulr,YW,Jlr,Ylr,Klr,GT,W2e,Zlr,eir,KW,oir,rir,tir,OT,air,Q2e,nir,sir,H2e,lir,iir,VT,JGe,Sd,XT,U2e,Ey,dir,J2e,cir,YGe,Wo,Cy,fir,Rd,mir,ZW,gir,hir,eQ,pir,uir,_ir,wy,bir,Y2e,vir,Fir,Tir,Et,Ay,Mir,K2e,Eir,Cir,Pd,wir,Z2e,Air,Lir,oQ,yir,xir,$ir,zT,kir,ho,Ly,Sir,ebe,Rir,Pir,Ua,Bir,obe,Iir,Nir,rbe,qir,jir,tbe,Dir,Gir,Oir,yy,WT,abe,Vir,Xir,rQ,zir,Wir,Qir,QT,nbe,Hir,Uir,tQ,Jir,Yir,Kir,HT,Zir,sbe,edr,odr,lbe,rdr,tdr,UT,KGe,Bd,JT,ibe,xy,adr,dbe,ndr,ZGe,Qo,$y,sdr,Id,ldr,aQ,idr,ddr,nQ,cdr,fdr,mdr,ky,gdr,cbe,hdr,pdr,udr,Ct,Sy,_dr,fbe,bdr,vdr,Nd,Fdr,mbe,Tdr,Mdr,sQ,Edr,Cdr,wdr,YT,Adr,po,Ry,Ldr,gbe,ydr,xdr,Ja,$dr,hbe,kdr,Sdr,pbe,Rdr,Pdr,ube,Bdr,Idr,Ndr,ot,KT,_be,qdr,jdr,lQ,Ddr,Gdr,Odr,ZT,bbe,Vdr,Xdr,iQ,zdr,Wdr,Qdr,e7,vbe,Hdr,Udr,dQ,Jdr,Ydr,Kdr,o7,Fbe,Zdr,ecr,cQ,ocr,rcr,tcr,r7,Tbe,acr,ncr,fQ,scr,lcr,icr,t7,dcr,Mbe,ccr,fcr,Ebe,mcr,gcr,a7,eOe,qd,n7,Cbe,Py,hcr,wbe,pcr,oOe,Ho,By,ucr,jd,_cr,mQ,bcr,vcr,gQ,Fcr,Tcr,Mcr,Iy,Ecr,Abe,Ccr,wcr,Acr,wt,Ny,Lcr,Lbe,ycr,xcr,Dd,$cr,ybe,kcr,Scr,hQ,Rcr,Pcr,Bcr,s7,Icr,uo,qy,Ncr,xbe,qcr,jcr,Ya,Dcr,$be,Gcr,Ocr,kbe,Vcr,Xcr,Sbe,zcr,Wcr,Qcr,Gd,l7,Rbe,Hcr,Ucr,pQ,Jcr,Ycr,Kcr,i7,Pbe,Zcr,efr,uQ,ofr,rfr,tfr,d7,Bbe,afr,nfr,_Q,sfr,lfr,ifr,c7,dfr,Ibe,cfr,ffr,Nbe,mfr,gfr,f7,rOe,Od,m7,qbe,jy,hfr,jbe,pfr,tOe,Uo,Dy,ufr,Vd,_fr,bQ,bfr,vfr,vQ,Ffr,Tfr,Mfr,Gy,Efr,Dbe,Cfr,wfr,Afr,At,Oy,Lfr,Gbe,yfr,xfr,Xd,$fr,Obe,kfr,Sfr,FQ,Rfr,Pfr,Bfr,g7,Ifr,_o,Vy,Nfr,Vbe,qfr,jfr,Ka,Dfr,Xbe,Gfr,Ofr,zbe,Vfr,Xfr,Wbe,zfr,Wfr,Qfr,Xy,h7,Qbe,Hfr,Ufr,TQ,Jfr,Yfr,Kfr,p7,Hbe,Zfr,emr,MQ,omr,rmr,tmr,u7,amr,Ube,nmr,smr,Jbe,lmr,imr,_7,aOe,zd,b7,Ybe,zy,dmr,Kbe,cmr,nOe,Jo,Wy,fmr,Wd,mmr,EQ,gmr,hmr,CQ,pmr,umr,_mr,Qy,bmr,Zbe,vmr,Fmr,Tmr,Lt,Hy,Mmr,eve,Emr,Cmr,Qd,wmr,ove,Amr,Lmr,wQ,ymr,xmr,$mr,v7,kmr,bo,Uy,Smr,rve,Rmr,Pmr,Za,Bmr,tve,Imr,Nmr,ave,qmr,jmr,nve,Dmr,Gmr,Omr,sve,F7,lve,Vmr,Xmr,AQ,zmr,Wmr,Qmr,T7,Hmr,ive,Umr,Jmr,dve,Ymr,Kmr,M7,sOe,Hd,E7,cve,Jy,Zmr,fve,egr,lOe,Yo,Yy,ogr,Ud,rgr,LQ,tgr,agr,yQ,ngr,sgr,lgr,Ky,igr,mve,dgr,cgr,fgr,yt,Zy,mgr,gve,ggr,hgr,Jd,pgr,hve,ugr,_gr,xQ,bgr,vgr,Fgr,C7,Tgr,vo,e8,Mgr,pve,Egr,Cgr,en,wgr,uve,Agr,Lgr,_ve,ygr,xgr,bve,$gr,kgr,Sgr,on,w7,vve,Rgr,Pgr,$Q,Bgr,Igr,Ngr,A7,Fve,qgr,jgr,kQ,Dgr,Ggr,Ogr,L7,Tve,Vgr,Xgr,SQ,zgr,Wgr,Qgr,y7,Mve,Hgr,Ugr,RQ,Jgr,Ygr,Kgr,x7,Zgr,Eve,ehr,ohr,Cve,rhr,thr,$7,iOe,Yd,k7,wve,o8,ahr,Ave,nhr,dOe,Ko,r8,shr,Kd,lhr,PQ,ihr,dhr,BQ,chr,fhr,mhr,t8,ghr,Lve,hhr,phr,uhr,xt,a8,_hr,yve,bhr,vhr,Zd,Fhr,xve,Thr,Mhr,IQ,Ehr,Chr,whr,S7,Ahr,Fo,n8,Lhr,$ve,yhr,xhr,rn,$hr,kve,khr,Shr,Sve,Rhr,Phr,Rve,Bhr,Ihr,Nhr,Pve,R7,Bve,qhr,jhr,NQ,Dhr,Ghr,Ohr,P7,Vhr,Ive,Xhr,zhr,Nve,Whr,Qhr,B7,cOe,ec,I7,qve,s8,Hhr,jve,Uhr,fOe,Zo,l8,Jhr,oc,Yhr,qQ,Khr,Zhr,jQ,epr,opr,rpr,i8,tpr,Dve,apr,npr,spr,$t,d8,lpr,Gve,ipr,dpr,rc,cpr,Ove,fpr,mpr,DQ,gpr,hpr,ppr,N7,upr,Lr,c8,_pr,Vve,bpr,vpr,tn,Fpr,Xve,Tpr,Mpr,zve,Epr,Cpr,Wve,wpr,Apr,Lpr,q,q7,Qve,ypr,xpr,GQ,$pr,kpr,Spr,j7,Hve,Rpr,Ppr,OQ,Bpr,Ipr,Npr,D7,Uve,qpr,jpr,VQ,Dpr,Gpr,Opr,G7,Jve,Vpr,Xpr,XQ,zpr,Wpr,Qpr,O7,Yve,Hpr,Upr,zQ,Jpr,Ypr,Kpr,V7,Kve,Zpr,eur,WQ,our,rur,tur,X7,Zve,aur,nur,QQ,sur,lur,iur,z7,e0e,dur,cur,HQ,fur,mur,gur,W7,o0e,hur,pur,UQ,uur,_ur,bur,Q7,r0e,vur,Fur,JQ,Tur,Mur,Eur,H7,t0e,Cur,wur,YQ,Aur,Lur,yur,U7,a0e,xur,$ur,KQ,kur,Sur,Rur,J7,n0e,Pur,Bur,ZQ,Iur,Nur,qur,Y7,s0e,jur,Dur,eH,Gur,Our,Vur,K7,l0e,Xur,zur,oH,Wur,Qur,Hur,Z7,i0e,Uur,Jur,rH,Yur,Kur,Zur,e9,d0e,e_r,o_r,tH,r_r,t_r,a_r,zs,c0e,n_r,s_r,aH,l_r,i_r,nH,d_r,c_r,f_r,o9,f0e,m_r,g_r,sH,h_r,p_r,u_r,r9,m0e,__r,b_r,lH,v_r,F_r,T_r,t9,g0e,M_r,E_r,iH,C_r,w_r,A_r,a9,h0e,L_r,y_r,dH,x_r,$_r,k_r,n9,p0e,S_r,R_r,cH,P_r,B_r,I_r,s9,u0e,N_r,q_r,fH,j_r,D_r,G_r,l9,_0e,O_r,V_r,mH,X_r,z_r,W_r,i9,b0e,Q_r,H_r,gH,U_r,J_r,Y_r,d9,v0e,K_r,Z_r,hH,e1r,o1r,r1r,c9,F0e,t1r,a1r,pH,n1r,s1r,l1r,f9,T0e,i1r,d1r,uH,c1r,f1r,m1r,m9,M0e,g1r,h1r,_H,p1r,u1r,_1r,g9,E0e,b1r,v1r,bH,F1r,T1r,M1r,h9,C0e,E1r,C1r,vH,w1r,A1r,L1r,p9,w0e,y1r,x1r,FH,$1r,k1r,S1r,u9,A0e,R1r,P1r,TH,B1r,I1r,N1r,_9,L0e,q1r,j1r,MH,D1r,G1r,O1r,b9,y0e,V1r,X1r,EH,z1r,W1r,Q1r,v9,x0e,H1r,U1r,CH,J1r,Y1r,K1r,F9,$0e,Z1r,e2r,wH,o2r,r2r,t2r,T9,k0e,a2r,n2r,AH,s2r,l2r,i2r,M9,S0e,d2r,c2r,LH,f2r,m2r,g2r,E9,R0e,h2r,p2r,yH,u2r,_2r,b2r,C9,P0e,v2r,F2r,xH,T2r,M2r,E2r,w9,B0e,C2r,w2r,$H,A2r,L2r,y2r,A9,I0e,x2r,$2r,kH,k2r,S2r,R2r,L9,N0e,P2r,B2r,SH,I2r,N2r,q2r,y9,q0e,j2r,D2r,RH,G2r,O2r,V2r,x9,j0e,X2r,z2r,PH,W2r,Q2r,H2r,$9,mOe,tc,k9,D0e,f8,U2r,G0e,J2r,gOe,er,m8,Y2r,ac,K2r,BH,Z2r,ebr,IH,obr,rbr,tbr,g8,abr,O0e,nbr,sbr,lbr,kt,h8,ibr,V0e,dbr,cbr,nc,fbr,X0e,mbr,gbr,NH,hbr,pbr,ubr,S9,_br,yr,p8,bbr,z0e,vbr,Fbr,an,Tbr,W0e,Mbr,Ebr,Q0e,Cbr,wbr,H0e,Abr,Lbr,ybr,se,R9,U0e,xbr,$br,qH,kbr,Sbr,Rbr,P9,J0e,Pbr,Bbr,jH,Ibr,Nbr,qbr,B9,Y0e,jbr,Dbr,DH,Gbr,Obr,Vbr,I9,K0e,Xbr,zbr,GH,Wbr,Qbr,Hbr,N9,Z0e,Ubr,Jbr,OH,Ybr,Kbr,Zbr,q9,eFe,evr,ovr,VH,rvr,tvr,avr,j9,oFe,nvr,svr,XH,lvr,ivr,dvr,D9,rFe,cvr,fvr,zH,mvr,gvr,hvr,G9,tFe,pvr,uvr,WH,_vr,bvr,vvr,O9,aFe,Fvr,Tvr,QH,Mvr,Evr,Cvr,V9,nFe,wvr,Avr,HH,Lvr,yvr,xvr,X9,sFe,$vr,kvr,UH,Svr,Rvr,Pvr,z9,lFe,Bvr,Ivr,JH,Nvr,qvr,jvr,W9,iFe,Dvr,Gvr,YH,Ovr,Vvr,Xvr,Q9,dFe,zvr,Wvr,KH,Qvr,Hvr,Uvr,H9,cFe,Jvr,Yvr,ZH,Kvr,Zvr,e0r,U9,fFe,o0r,r0r,eU,t0r,a0r,n0r,J9,mFe,s0r,l0r,oU,i0r,d0r,c0r,Y9,gFe,f0r,m0r,rU,g0r,h0r,p0r,K9,hFe,u0r,_0r,tU,b0r,v0r,F0r,Z9,pFe,T0r,M0r,aU,E0r,C0r,w0r,eM,uFe,A0r,L0r,nU,y0r,x0r,$0r,oM,_Fe,k0r,S0r,sU,R0r,P0r,B0r,rM,hOe,sc,tM,bFe,u8,I0r,vFe,N0r,pOe,or,_8,q0r,lc,j0r,lU,D0r,G0r,iU,O0r,V0r,X0r,b8,z0r,FFe,W0r,Q0r,H0r,St,v8,U0r,TFe,J0r,Y0r,ic,K0r,MFe,Z0r,eFr,dU,oFr,rFr,tFr,aM,aFr,xr,F8,nFr,EFe,sFr,lFr,nn,iFr,CFe,dFr,cFr,wFe,fFr,mFr,AFe,gFr,hFr,pFr,Me,nM,LFe,uFr,_Fr,cU,bFr,vFr,FFr,sM,yFe,TFr,MFr,fU,EFr,CFr,wFr,lM,xFe,AFr,LFr,mU,yFr,xFr,$Fr,iM,$Fe,kFr,SFr,gU,RFr,PFr,BFr,dM,kFe,IFr,NFr,hU,qFr,jFr,DFr,cM,SFe,GFr,OFr,pU,VFr,XFr,zFr,fM,RFe,WFr,QFr,uU,HFr,UFr,JFr,mM,PFe,YFr,KFr,_U,ZFr,eTr,oTr,gM,BFe,rTr,tTr,bU,aTr,nTr,sTr,hM,IFe,lTr,iTr,vU,dTr,cTr,fTr,pM,NFe,mTr,gTr,FU,hTr,pTr,uTr,uM,qFe,_Tr,bTr,TU,vTr,FTr,TTr,_M,jFe,MTr,ETr,MU,CTr,wTr,ATr,bM,uOe,dc,vM,DFe,T8,LTr,GFe,yTr,_Oe,rr,M8,xTr,cc,$Tr,EU,kTr,STr,CU,RTr,PTr,BTr,E8,ITr,OFe,NTr,qTr,jTr,Rt,C8,DTr,VFe,GTr,OTr,fc,VTr,XFe,XTr,zTr,wU,WTr,QTr,HTr,FM,UTr,$r,w8,JTr,zFe,YTr,KTr,sn,ZTr,WFe,e7r,o7r,QFe,r7r,t7r,HFe,a7r,n7r,s7r,ln,TM,UFe,l7r,i7r,AU,d7r,c7r,f7r,MM,JFe,m7r,g7r,LU,h7r,p7r,u7r,EM,YFe,_7r,b7r,yU,v7r,F7r,T7r,CM,KFe,M7r,E7r,xU,C7r,w7r,A7r,wM,bOe,mc,AM,ZFe,A8,L7r,eTe,y7r,vOe,tr,L8,x7r,gc,$7r,$U,k7r,S7r,kU,R7r,P7r,B7r,y8,I7r,oTe,N7r,q7r,j7r,Pt,x8,D7r,rTe,G7r,O7r,hc,V7r,tTe,X7r,z7r,SU,W7r,Q7r,H7r,LM,U7r,kr,$8,J7r,aTe,Y7r,K7r,dn,Z7r,nTe,e9r,o9r,sTe,r9r,t9r,lTe,a9r,n9r,s9r,ie,yM,iTe,l9r,i9r,RU,d9r,c9r,f9r,xM,dTe,m9r,g9r,PU,h9r,p9r,u9r,$M,cTe,_9r,b9r,BU,v9r,F9r,T9r,kM,fTe,M9r,E9r,IU,C9r,w9r,A9r,SM,mTe,L9r,y9r,NU,x9r,$9r,k9r,RM,gTe,S9r,R9r,qU,P9r,B9r,I9r,PM,hTe,N9r,q9r,jU,j9r,D9r,G9r,BM,pTe,O9r,V9r,DU,X9r,z9r,W9r,IM,uTe,Q9r,H9r,GU,U9r,J9r,Y9r,NM,_Te,K9r,Z9r,OU,eMr,oMr,rMr,qM,bTe,tMr,aMr,VU,nMr,sMr,lMr,jM,vTe,iMr,dMr,XU,cMr,fMr,mMr,DM,FTe,gMr,hMr,zU,pMr,uMr,_Mr,GM,TTe,bMr,vMr,WU,FMr,TMr,MMr,OM,MTe,EMr,CMr,QU,wMr,AMr,LMr,VM,ETe,yMr,xMr,HU,$Mr,kMr,SMr,XM,CTe,RMr,PMr,UU,BMr,IMr,NMr,zM,wTe,qMr,jMr,JU,DMr,GMr,OMr,WM,ATe,VMr,XMr,YU,zMr,WMr,QMr,QM,LTe,HMr,UMr,KU,JMr,YMr,KMr,HM,FOe,pc,UM,yTe,k8,ZMr,xTe,e4r,TOe,ar,S8,o4r,uc,r4r,ZU,t4r,a4r,eJ,n4r,s4r,l4r,R8,i4r,$Te,d4r,c4r,f4r,Bt,P8,m4r,kTe,g4r,h4r,_c,p4r,STe,u4r,_4r,oJ,b4r,v4r,F4r,JM,T4r,Sr,B8,M4r,RTe,E4r,C4r,cn,w4r,PTe,A4r,L4r,BTe,y4r,x4r,ITe,$4r,k4r,S4r,ye,YM,NTe,R4r,P4r,rJ,B4r,I4r,N4r,KM,qTe,q4r,j4r,tJ,D4r,G4r,O4r,ZM,jTe,V4r,X4r,aJ,z4r,W4r,Q4r,e4,DTe,H4r,U4r,nJ,J4r,Y4r,K4r,o4,GTe,Z4r,eEr,sJ,oEr,rEr,tEr,r4,OTe,aEr,nEr,lJ,sEr,lEr,iEr,t4,VTe,dEr,cEr,iJ,fEr,mEr,gEr,a4,XTe,hEr,pEr,dJ,uEr,_Er,bEr,n4,zTe,vEr,FEr,cJ,TEr,MEr,EEr,s4,WTe,CEr,wEr,fJ,AEr,LEr,yEr,l4,MOe,bc,i4,QTe,I8,xEr,HTe,$Er,EOe,nr,N8,kEr,vc,SEr,mJ,REr,PEr,gJ,BEr,IEr,NEr,q8,qEr,UTe,jEr,DEr,GEr,It,j8,OEr,JTe,VEr,XEr,Fc,zEr,YTe,WEr,QEr,hJ,HEr,UEr,JEr,d4,YEr,Rr,D8,KEr,KTe,ZEr,eCr,fn,oCr,ZTe,rCr,tCr,e7e,aCr,nCr,o7e,sCr,lCr,iCr,te,c4,r7e,dCr,cCr,pJ,fCr,mCr,gCr,f4,t7e,hCr,pCr,uJ,uCr,_Cr,bCr,m4,a7e,vCr,FCr,_J,TCr,MCr,ECr,g4,n7e,CCr,wCr,bJ,ACr,LCr,yCr,h4,s7e,xCr,$Cr,vJ,kCr,SCr,RCr,p4,l7e,PCr,BCr,FJ,ICr,NCr,qCr,u4,i7e,jCr,DCr,TJ,GCr,OCr,VCr,_4,d7e,XCr,zCr,MJ,WCr,QCr,HCr,b4,c7e,UCr,JCr,EJ,YCr,KCr,ZCr,v4,f7e,e5r,o5r,CJ,r5r,t5r,a5r,F4,m7e,n5r,s5r,wJ,l5r,i5r,d5r,T4,g7e,c5r,f5r,AJ,m5r,g5r,h5r,M4,h7e,p5r,u5r,LJ,_5r,b5r,v5r,E4,p7e,F5r,T5r,yJ,M5r,E5r,C5r,C4,u7e,w5r,A5r,xJ,L5r,y5r,x5r,w4,_7e,$5r,k5r,$J,S5r,R5r,P5r,A4,b7e,B5r,I5r,kJ,N5r,q5r,j5r,L4,v7e,D5r,G5r,SJ,O5r,V5r,X5r,y4,F7e,z5r,W5r,RJ,Q5r,H5r,U5r,x4,T7e,J5r,Y5r,PJ,K5r,Z5r,e3r,$4,M7e,o3r,r3r,BJ,t3r,a3r,n3r,k4,E7e,s3r,l3r,IJ,i3r,d3r,c3r,S4,C7e,f3r,m3r,NJ,g3r,h3r,p3r,R4,w7e,u3r,_3r,qJ,b3r,v3r,F3r,P4,A7e,T3r,M3r,jJ,E3r,C3r,w3r,B4,L7e,A3r,L3r,DJ,y3r,x3r,$3r,I4,COe,Tc,N4,y7e,G8,k3r,x7e,S3r,wOe,sr,O8,R3r,Mc,P3r,GJ,B3r,I3r,OJ,N3r,q3r,j3r,V8,D3r,$7e,G3r,O3r,V3r,Nt,X8,X3r,k7e,z3r,W3r,Ec,Q3r,S7e,H3r,U3r,VJ,J3r,Y3r,K3r,q4,Z3r,Pr,z8,ewr,R7e,owr,rwr,mn,twr,P7e,awr,nwr,B7e,swr,lwr,I7e,iwr,dwr,cwr,ue,j4,N7e,fwr,mwr,XJ,gwr,hwr,pwr,D4,q7e,uwr,_wr,zJ,bwr,vwr,Fwr,G4,j7e,Twr,Mwr,WJ,Ewr,Cwr,wwr,O4,D7e,Awr,Lwr,QJ,ywr,xwr,$wr,V4,G7e,kwr,Swr,HJ,Rwr,Pwr,Bwr,X4,O7e,Iwr,Nwr,UJ,qwr,jwr,Dwr,z4,V7e,Gwr,Owr,JJ,Vwr,Xwr,zwr,W4,X7e,Wwr,Qwr,YJ,Hwr,Uwr,Jwr,Q4,z7e,Ywr,Kwr,KJ,Zwr,eAr,oAr,H4,W7e,rAr,tAr,ZJ,aAr,nAr,sAr,U4,Q7e,lAr,iAr,eY,dAr,cAr,fAr,J4,H7e,mAr,gAr,oY,hAr,pAr,uAr,Y4,U7e,_Ar,bAr,rY,vAr,FAr,TAr,K4,J7e,MAr,EAr,tY,CAr,wAr,AAr,Z4,Y7e,LAr,yAr,aY,xAr,$Ar,kAr,eE,K7e,SAr,RAr,nY,PAr,BAr,IAr,oE,Z7e,NAr,qAr,sY,jAr,DAr,GAr,rE,AOe,Cc,tE,e9e,W8,OAr,o9e,VAr,LOe,lr,Q8,XAr,wc,zAr,lY,WAr,QAr,iY,HAr,UAr,JAr,H8,YAr,r9e,KAr,ZAr,e6r,qt,U8,o6r,t9e,r6r,t6r,Ac,a6r,a9e,n6r,s6r,dY,l6r,i6r,d6r,aE,c6r,Br,J8,f6r,n9e,m6r,g6r,gn,h6r,s9e,p6r,u6r,l9e,_6r,b6r,i9e,v6r,F6r,T6r,Y8,nE,d9e,M6r,E6r,cY,C6r,w6r,A6r,sE,c9e,L6r,y6r,fY,x6r,$6r,k6r,lE,yOe,Lc,iE,f9e,K8,S6r,m9e,R6r,xOe,ir,Z8,P6r,yc,B6r,mY,I6r,N6r,gY,q6r,j6r,D6r,ex,G6r,g9e,O6r,V6r,X6r,jt,ox,z6r,h9e,W6r,Q6r,xc,H6r,p9e,U6r,J6r,hY,Y6r,K6r,Z6r,dE,eLr,Ir,rx,oLr,u9e,rLr,tLr,hn,aLr,_9e,nLr,sLr,b9e,lLr,iLr,v9e,dLr,cLr,fLr,F9e,cE,T9e,mLr,gLr,pY,hLr,pLr,uLr,fE,$Oe,$c,mE,M9e,tx,_Lr,E9e,bLr,kOe,dr,ax,vLr,kc,FLr,uY,TLr,MLr,_Y,ELr,CLr,wLr,nx,ALr,C9e,LLr,yLr,xLr,Dt,sx,$Lr,w9e,kLr,SLr,Sc,RLr,A9e,PLr,BLr,bY,ILr,NLr,qLr,gE,jLr,Nr,lx,DLr,L9e,GLr,OLr,pn,VLr,y9e,XLr,zLr,x9e,WLr,QLr,$9e,HLr,ULr,JLr,de,hE,k9e,YLr,KLr,vY,ZLr,eyr,oyr,pE,S9e,ryr,tyr,FY,ayr,nyr,syr,uE,R9e,lyr,iyr,TY,dyr,cyr,fyr,_E,P9e,myr,gyr,MY,hyr,pyr,uyr,bE,B9e,_yr,byr,EY,vyr,Fyr,Tyr,vE,I9e,Myr,Eyr,CY,Cyr,wyr,Ayr,FE,N9e,Lyr,yyr,wY,xyr,$yr,kyr,TE,q9e,Syr,Ryr,AY,Pyr,Byr,Iyr,ME,j9e,Nyr,qyr,LY,jyr,Dyr,Gyr,EE,D9e,Oyr,Vyr,yY,Xyr,zyr,Wyr,CE,G9e,Qyr,Hyr,xY,Uyr,Jyr,Yyr,wE,O9e,Kyr,Zyr,$Y,e8r,o8r,r8r,AE,V9e,t8r,a8r,kY,n8r,s8r,l8r,LE,X9e,i8r,d8r,SY,c8r,f8r,m8r,yE,z9e,g8r,h8r,RY,p8r,u8r,_8r,xE,W9e,b8r,v8r,PY,F8r,T8r,M8r,$E,Q9e,E8r,C8r,BY,w8r,A8r,L8r,kE,H9e,y8r,x8r,IY,$8r,k8r,S8r,SE,U9e,R8r,P8r,NY,B8r,I8r,N8r,RE,J9e,q8r,j8r,qY,D8r,G8r,O8r,PE,SOe,Rc,BE,Y9e,ix,V8r,K9e,X8r,ROe,cr,dx,z8r,Pc,W8r,jY,Q8r,H8r,DY,U8r,J8r,Y8r,cx,K8r,Z9e,Z8r,exr,oxr,Gt,fx,rxr,eMe,txr,axr,Bc,nxr,oMe,sxr,lxr,GY,ixr,dxr,cxr,IE,fxr,qr,mx,mxr,rMe,gxr,hxr,un,pxr,tMe,uxr,_xr,aMe,bxr,vxr,nMe,Fxr,Txr,Mxr,ce,NE,sMe,Exr,Cxr,OY,wxr,Axr,Lxr,qE,lMe,yxr,xxr,VY,$xr,kxr,Sxr,jE,iMe,Rxr,Pxr,XY,Bxr,Ixr,Nxr,DE,dMe,qxr,jxr,zY,Dxr,Gxr,Oxr,GE,cMe,Vxr,Xxr,WY,zxr,Wxr,Qxr,OE,fMe,Hxr,Uxr,QY,Jxr,Yxr,Kxr,VE,mMe,Zxr,e$r,HY,o$r,r$r,t$r,XE,gMe,a$r,n$r,UY,s$r,l$r,i$r,zE,hMe,d$r,c$r,JY,f$r,m$r,g$r,WE,pMe,h$r,p$r,YY,u$r,_$r,b$r,QE,uMe,v$r,F$r,KY,T$r,M$r,E$r,HE,_Me,C$r,w$r,ZY,A$r,L$r,y$r,UE,bMe,x$r,$$r,eK,k$r,S$r,R$r,JE,vMe,P$r,B$r,oK,I$r,N$r,q$r,YE,FMe,j$r,D$r,rK,G$r,O$r,V$r,KE,TMe,X$r,z$r,tK,W$r,Q$r,H$r,ZE,MMe,U$r,J$r,aK,Y$r,K$r,Z$r,eC,EMe,ekr,okr,nK,rkr,tkr,akr,oC,CMe,nkr,skr,sK,lkr,ikr,dkr,rC,wMe,ckr,fkr,lK,mkr,gkr,hkr,tC,POe,Ic,aC,AMe,gx,pkr,LMe,ukr,BOe,fr,hx,_kr,Nc,bkr,iK,vkr,Fkr,dK,Tkr,Mkr,Ekr,px,Ckr,yMe,wkr,Akr,Lkr,Ot,ux,ykr,xMe,xkr,$kr,qc,kkr,$Me,Skr,Rkr,cK,Pkr,Bkr,Ikr,nC,Nkr,jr,_x,qkr,kMe,jkr,Dkr,_n,Gkr,SMe,Okr,Vkr,RMe,Xkr,zkr,PMe,Wkr,Qkr,Hkr,BMe,sC,IMe,Ukr,Jkr,fK,Ykr,Kkr,Zkr,lC,IOe,jc,iC,NMe,bx,eSr,qMe,oSr,NOe,mr,vx,rSr,Dc,tSr,mK,aSr,nSr,gK,sSr,lSr,iSr,Fx,dSr,jMe,cSr,fSr,mSr,Vt,Tx,gSr,DMe,hSr,pSr,Gc,uSr,GMe,_Sr,bSr,hK,vSr,FSr,TSr,dC,MSr,Dr,Mx,ESr,OMe,CSr,wSr,bn,ASr,VMe,LSr,ySr,XMe,xSr,$Sr,zMe,kSr,SSr,RSr,WMe,cC,QMe,PSr,BSr,pK,ISr,NSr,qSr,fC,qOe,Oc,mC,HMe,Ex,jSr,UMe,DSr,jOe,gr,Cx,GSr,Vc,OSr,uK,VSr,XSr,_K,zSr,WSr,QSr,wx,HSr,JMe,USr,JSr,YSr,Xt,Ax,KSr,YMe,ZSr,eRr,Xc,oRr,KMe,rRr,tRr,bK,aRr,nRr,sRr,gC,lRr,Gr,Lx,iRr,ZMe,dRr,cRr,vn,fRr,e4e,mRr,gRr,o4e,hRr,pRr,r4e,uRr,_Rr,bRr,oe,hC,t4e,vRr,FRr,vK,TRr,MRr,ERr,pC,a4e,CRr,wRr,FK,ARr,LRr,yRr,uC,n4e,xRr,$Rr,TK,kRr,SRr,RRr,_C,s4e,PRr,BRr,MK,IRr,NRr,qRr,bC,l4e,jRr,DRr,EK,GRr,ORr,VRr,vC,i4e,XRr,zRr,CK,WRr,QRr,HRr,FC,d4e,URr,JRr,wK,YRr,KRr,ZRr,TC,c4e,ePr,oPr,AK,rPr,tPr,aPr,MC,f4e,nPr,sPr,LK,lPr,iPr,dPr,EC,m4e,cPr,fPr,yK,mPr,gPr,hPr,CC,g4e,pPr,uPr,xK,_Pr,bPr,vPr,wC,h4e,FPr,TPr,$K,MPr,EPr,CPr,AC,p4e,wPr,APr,kK,LPr,yPr,xPr,LC,u4e,$Pr,kPr,SK,SPr,RPr,PPr,yC,_4e,BPr,IPr,RK,NPr,qPr,jPr,xC,b4e,DPr,GPr,PK,OPr,VPr,XPr,$C,v4e,zPr,WPr,BK,QPr,HPr,UPr,kC,F4e,JPr,YPr,IK,KPr,ZPr,eBr,SC,T4e,oBr,rBr,NK,tBr,aBr,nBr,RC,M4e,sBr,lBr,qK,iBr,dBr,cBr,PC,E4e,fBr,mBr,jK,gBr,hBr,pBr,BC,C4e,uBr,_Br,DK,bBr,vBr,FBr,IC,w4e,TBr,MBr,GK,EBr,CBr,wBr,NC,A4e,ABr,LBr,OK,yBr,xBr,$Br,qC,L4e,kBr,SBr,VK,RBr,PBr,BBr,jC,y4e,IBr,NBr,XK,qBr,jBr,DBr,DC,x4e,GBr,OBr,zK,VBr,XBr,zBr,GC,DOe,zc,OC,$4e,yx,WBr,k4e,QBr,GOe,hr,xx,HBr,Wc,UBr,WK,JBr,YBr,QK,KBr,ZBr,eIr,$x,oIr,S4e,rIr,tIr,aIr,zt,kx,nIr,R4e,sIr,lIr,Qc,iIr,P4e,dIr,cIr,HK,fIr,mIr,gIr,VC,hIr,Or,Sx,pIr,B4e,uIr,_Ir,Fn,bIr,I4e,vIr,FIr,N4e,TIr,MIr,q4e,EIr,CIr,wIr,xe,XC,j4e,AIr,LIr,UK,yIr,xIr,$Ir,zC,D4e,kIr,SIr,JK,RIr,PIr,BIr,WC,G4e,IIr,NIr,YK,qIr,jIr,DIr,QC,O4e,GIr,OIr,KK,VIr,XIr,zIr,HC,V4e,WIr,QIr,ZK,HIr,UIr,JIr,UC,X4e,YIr,KIr,eZ,ZIr,eNr,oNr,JC,z4e,rNr,tNr,oZ,aNr,nNr,sNr,YC,W4e,lNr,iNr,rZ,dNr,cNr,fNr,KC,Q4e,mNr,gNr,tZ,hNr,pNr,uNr,ZC,H4e,_Nr,bNr,aZ,vNr,FNr,TNr,e5,OOe,Hc,o5,U4e,Rx,MNr,J4e,ENr,VOe,pr,Px,CNr,Uc,wNr,nZ,ANr,LNr,sZ,yNr,xNr,$Nr,Bx,kNr,Y4e,SNr,RNr,PNr,Wt,Ix,BNr,K4e,INr,NNr,Jc,qNr,Z4e,jNr,DNr,lZ,GNr,ONr,VNr,r5,XNr,Vr,Nx,zNr,eEe,WNr,QNr,Tn,HNr,oEe,UNr,JNr,rEe,YNr,KNr,tEe,ZNr,eqr,oqr,Ee,t5,aEe,rqr,tqr,iZ,aqr,nqr,sqr,a5,nEe,lqr,iqr,dZ,dqr,cqr,fqr,n5,sEe,mqr,gqr,cZ,hqr,pqr,uqr,s5,lEe,_qr,bqr,fZ,vqr,Fqr,Tqr,l5,iEe,Mqr,Eqr,mZ,Cqr,wqr,Aqr,i5,dEe,Lqr,yqr,gZ,xqr,$qr,kqr,d5,cEe,Sqr,Rqr,hZ,Pqr,Bqr,Iqr,c5,fEe,Nqr,qqr,pZ,jqr,Dqr,Gqr,f5,mEe,Oqr,Vqr,uZ,Xqr,zqr,Wqr,m5,gEe,Qqr,Hqr,_Z,Uqr,Jqr,Yqr,g5,hEe,Kqr,Zqr,bZ,ejr,ojr,rjr,h5,pEe,tjr,ajr,vZ,njr,sjr,ljr,p5,uEe,ijr,djr,FZ,cjr,fjr,mjr,u5,XOe,Yc,_5,_Ee,qx,gjr,bEe,hjr,zOe,ur,jx,pjr,Kc,ujr,TZ,_jr,bjr,MZ,vjr,Fjr,Tjr,Dx,Mjr,vEe,Ejr,Cjr,wjr,Qt,Gx,Ajr,FEe,Ljr,yjr,Zc,xjr,TEe,$jr,kjr,EZ,Sjr,Rjr,Pjr,b5,Bjr,Xr,Ox,Ijr,MEe,Njr,qjr,Mn,jjr,EEe,Djr,Gjr,CEe,Ojr,Vjr,wEe,Xjr,zjr,Wjr,$e,v5,AEe,Qjr,Hjr,CZ,Ujr,Jjr,Yjr,F5,LEe,Kjr,Zjr,wZ,eDr,oDr,rDr,T5,yEe,tDr,aDr,AZ,nDr,sDr,lDr,M5,xEe,iDr,dDr,LZ,cDr,fDr,mDr,E5,$Ee,gDr,hDr,yZ,pDr,uDr,_Dr,C5,kEe,bDr,vDr,xZ,FDr,TDr,MDr,w5,SEe,EDr,CDr,$Z,wDr,ADr,LDr,A5,REe,yDr,xDr,kZ,$Dr,kDr,SDr,L5,PEe,RDr,PDr,SZ,BDr,IDr,NDr,y5,BEe,qDr,jDr,RZ,DDr,GDr,ODr,x5,WOe,ef,$5,IEe,Vx,VDr,NEe,XDr,QOe,_r,Xx,zDr,of,WDr,PZ,QDr,HDr,BZ,UDr,JDr,YDr,zx,KDr,qEe,ZDr,eGr,oGr,Ht,Wx,rGr,jEe,tGr,aGr,rf,nGr,DEe,sGr,lGr,IZ,iGr,dGr,cGr,k5,fGr,zr,Qx,mGr,GEe,gGr,hGr,En,pGr,OEe,uGr,_Gr,VEe,bGr,vGr,XEe,FGr,TGr,MGr,ke,S5,zEe,EGr,CGr,NZ,wGr,AGr,LGr,R5,WEe,yGr,xGr,qZ,$Gr,kGr,SGr,P5,QEe,RGr,PGr,jZ,BGr,IGr,NGr,B5,HEe,qGr,jGr,DZ,DGr,GGr,OGr,I5,UEe,VGr,XGr,GZ,zGr,WGr,QGr,N5,JEe,HGr,UGr,OZ,JGr,YGr,KGr,q5,YEe,ZGr,eOr,VZ,oOr,rOr,tOr,j5,KEe,aOr,nOr,XZ,sOr,lOr,iOr,D5,ZEe,dOr,cOr,zZ,fOr,mOr,gOr,G5,eCe,hOr,pOr,WZ,uOr,_Or,bOr,O5,HOe,tf,V5,oCe,Hx,vOr,rCe,FOr,UOe,br,Ux,TOr,af,MOr,QZ,EOr,COr,HZ,wOr,AOr,LOr,Jx,yOr,tCe,xOr,$Or,kOr,Ut,Yx,SOr,aCe,ROr,POr,nf,BOr,nCe,IOr,NOr,UZ,qOr,jOr,DOr,X5,GOr,Wr,Kx,OOr,sCe,VOr,XOr,Cn,zOr,lCe,WOr,QOr,iCe,HOr,UOr,dCe,JOr,YOr,KOr,Se,z5,cCe,ZOr,eVr,JZ,oVr,rVr,tVr,W5,fCe,aVr,nVr,YZ,sVr,lVr,iVr,Q5,mCe,dVr,cVr,KZ,fVr,mVr,gVr,H5,gCe,hVr,pVr,ZZ,uVr,_Vr,bVr,U5,hCe,vVr,FVr,eee,TVr,MVr,EVr,J5,pCe,CVr,wVr,oee,AVr,LVr,yVr,Y5,uCe,xVr,$Vr,ree,kVr,SVr,RVr,K5,_Ce,PVr,BVr,tee,IVr,NVr,qVr,Z5,bCe,jVr,DVr,aee,GVr,OVr,VVr,e3,vCe,XVr,zVr,nee,WVr,QVr,HVr,o3,JOe,sf,r3,FCe,Zx,UVr,TCe,JVr,YOe,vr,e$,YVr,lf,KVr,see,ZVr,eXr,lee,oXr,rXr,tXr,o$,aXr,MCe,nXr,sXr,lXr,Jt,r$,iXr,ECe,dXr,cXr,df,fXr,CCe,mXr,gXr,iee,hXr,pXr,uXr,t3,_Xr,Qr,t$,bXr,wCe,vXr,FXr,wn,TXr,ACe,MXr,EXr,LCe,CXr,wXr,yCe,AXr,LXr,yXr,Re,a3,xCe,xXr,$Xr,dee,kXr,SXr,RXr,n3,$Ce,PXr,BXr,cee,IXr,NXr,qXr,s3,kCe,jXr,DXr,fee,GXr,OXr,VXr,l3,SCe,XXr,zXr,mee,WXr,QXr,HXr,i3,RCe,UXr,JXr,gee,YXr,KXr,ZXr,d3,PCe,ezr,ozr,hee,rzr,tzr,azr,c3,BCe,nzr,szr,pee,lzr,izr,dzr,f3,ICe,czr,fzr,uee,mzr,gzr,hzr,m3,NCe,pzr,uzr,_ee,_zr,bzr,vzr,g3,qCe,Fzr,Tzr,bee,Mzr,Ezr,Czr,h3,KOe,cf,p3,jCe,a$,wzr,DCe,Azr,ZOe,Fr,n$,Lzr,ff,yzr,vee,xzr,$zr,Fee,kzr,Szr,Rzr,s$,Pzr,GCe,Bzr,Izr,Nzr,Yt,l$,qzr,OCe,jzr,Dzr,mf,Gzr,VCe,Ozr,Vzr,Tee,Xzr,zzr,Wzr,u3,Qzr,Hr,i$,Hzr,XCe,Uzr,Jzr,An,Yzr,zCe,Kzr,Zzr,WCe,eWr,oWr,QCe,rWr,tWr,aWr,Ve,_3,HCe,nWr,sWr,Mee,lWr,iWr,dWr,b3,UCe,cWr,fWr,Eee,mWr,gWr,hWr,v3,JCe,pWr,uWr,Cee,_Wr,bWr,vWr,F3,YCe,FWr,TWr,wee,MWr,EWr,CWr,T3,KCe,wWr,AWr,Aee,LWr,yWr,xWr,M3,ZCe,$Wr,kWr,Lee,SWr,RWr,PWr,E3,e5e,BWr,IWr,yee,NWr,qWr,jWr,C3,o5e,DWr,GWr,xee,OWr,VWr,XWr,w3,eVe,gf,A3,r5e,d$,zWr,t5e,WWr,oVe,Tr,c$,QWr,hf,HWr,$ee,UWr,JWr,kee,YWr,KWr,ZWr,f$,eQr,a5e,oQr,rQr,tQr,Kt,m$,aQr,n5e,nQr,sQr,pf,lQr,s5e,iQr,dQr,See,cQr,fQr,mQr,L3,gQr,Ur,g$,hQr,l5e,pQr,uQr,Ln,_Qr,i5e,bQr,vQr,d5e,FQr,TQr,c5e,MQr,EQr,CQr,Xe,y3,f5e,wQr,AQr,Ree,LQr,yQr,xQr,x3,m5e,$Qr,kQr,Pee,SQr,RQr,PQr,$3,g5e,BQr,IQr,Bee,NQr,qQr,jQr,k3,h5e,DQr,GQr,Iee,OQr,VQr,XQr,S3,p5e,zQr,WQr,Nee,QQr,HQr,UQr,R3,u5e,JQr,YQr,qee,KQr,ZQr,eHr,P3,_5e,oHr,rHr,jee,tHr,aHr,nHr,B3,b5e,sHr,lHr,Dee,iHr,dHr,cHr,I3,rVe,uf,N3,v5e,h$,fHr,F5e,mHr,tVe,Mr,p$,gHr,_f,hHr,Gee,pHr,uHr,Oee,_Hr,bHr,vHr,u$,FHr,T5e,THr,MHr,EHr,Zt,_$,CHr,M5e,wHr,AHr,bf,LHr,E5e,yHr,xHr,Vee,$Hr,kHr,SHr,q3,RHr,Jr,b$,PHr,C5e,BHr,IHr,yn,NHr,w5e,qHr,jHr,A5e,DHr,GHr,L5e,OHr,VHr,XHr,y5e,j3,x5e,zHr,WHr,Xee,QHr,HHr,UHr,D3,aVe,vf,G3,$5e,v$,JHr,k5e,YHr,nVe,Er,F$,KHr,Ff,ZHr,zee,eUr,oUr,Wee,rUr,tUr,aUr,T$,nUr,S5e,sUr,lUr,iUr,ea,M$,dUr,R5e,cUr,fUr,Tf,mUr,P5e,gUr,hUr,Qee,pUr,uUr,_Ur,O3,bUr,Yr,E$,vUr,B5e,FUr,TUr,xn,MUr,I5e,EUr,CUr,N5e,wUr,AUr,q5e,LUr,yUr,xUr,C$,V3,j5e,$Ur,kUr,Hee,SUr,RUr,PUr,X3,D5e,BUr,IUr,Uee,NUr,qUr,jUr,z3,sVe,Mf,W3,G5e,w$,DUr,O5e,GUr,lVe,Cr,A$,OUr,Ef,VUr,Jee,XUr,zUr,Yee,WUr,QUr,HUr,L$,UUr,V5e,JUr,YUr,KUr,oa,y$,ZUr,X5e,eJr,oJr,Cf,rJr,z5e,tJr,aJr,Kee,nJr,sJr,lJr,Q3,iJr,Kr,x$,dJr,W5e,cJr,fJr,$n,mJr,Q5e,gJr,hJr,H5e,pJr,uJr,U5e,_Jr,bJr,vJr,J5e,H3,Y5e,FJr,TJr,Zee,MJr,EJr,CJr,U3,iVe;return d=new re({}),ya=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),F6=new re({}),T6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Rf=new wJr({props:{warning:!0,$$slots:{default:[Rqt]},$$scope:{ctx:x}}}),M6=new re({}),E6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/configuration_auto.py#L642"}}),A6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/configuration_auto.py#L665"}}),Gg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Pqt]},$$scope:{ctx:x}}}),L6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/configuration_auto.py#L788"}}),y6=new re({}),x6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/tokenization_auto.py#L405"}}),S6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17109/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/tokenization_auto.py#L419"}}),Eh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Bqt]},$$scope:{ctx:x}}}),R6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/tokenization_auto.py#L618"}}),P6=new re({}),B6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17109/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),ap=new wJr({props:{$$slots:{default:[Iqt]},$$scope:{ctx:x}}}),np=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Nqt]},$$scope:{ctx:x}}}),j6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),D6=new re({}),G6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/processing_auto.py#L88"}}),X6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/processing_auto.py#L102"}}),wp=new wJr({props:{$$slots:{default:[qqt]},$$scope:{ctx:x}}}),Ap=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[jqt]},$$scope:{ctx:x}}}),z6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/processing_auto.py#L255"}}),W6=new re({}),Q6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L782"}}),U6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ofa#transformers.OFAConfig">OFAConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ofa#transformers.OFAModel">OFAModel</a> (OFA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),xp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Dqt]},$$scope:{ctx:x}}}),J6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),x_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Gqt]},$$scope:{ctx:x}}}),Y6=new re({}),K6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L789"}}),eL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),k_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Oqt]},$$scope:{ctx:x}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),M1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Vqt]},$$scope:{ctx:x}}}),rL=new re({}),tL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L804"}}),nL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),C1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Xqt]},$$scope:{ctx:x}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),c2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[zqt]},$$scope:{ctx:x}}}),lL=new re({}),iL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L811"}}),cL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),m2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Wqt]},$$scope:{ctx:x}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),J2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Qqt]},$$scope:{ctx:x}}}),mL=new re({}),gL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L818"}}),pL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),K2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Hqt]},$$scope:{ctx:x}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),_b=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Uqt]},$$scope:{ctx:x}}}),_L=new re({}),bL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L827"}}),FL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),vb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Jqt]},$$scope:{ctx:x}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),hv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Yqt]},$$scope:{ctx:x}}}),ML=new re({}),EL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L872"}}),wL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),uv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Kqt]},$$scope:{ctx:x}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),Qv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Zqt]},$$scope:{ctx:x}}}),LL=new re({}),yL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L879"}}),$L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),Uv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[ejt]},$$scope:{ctx:x}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),r0=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ojt]},$$scope:{ctx:x}}}),SL=new re({}),RL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L865"}}),BL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),a0=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[rjt]},$$scope:{ctx:x}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),D0=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[tjt]},$$scope:{ctx:x}}}),NL=new re({}),qL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L836"}}),DL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),O0=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ajt]},$$scope:{ctx:x}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),$F=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[njt]},$$scope:{ctx:x}}}),OL=new re({}),VL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L843"}}),zL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),SF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[sjt]},$$scope:{ctx:x}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[ljt]},$$scope:{ctx:x}}}),QL=new re({}),HL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L888"}}),JL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17109/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),NF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[ijt]},$$scope:{ctx:x}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),YF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[djt]},$$scope:{ctx:x}}}),KL=new re({}),ZL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L927"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),ZF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[cjt]},$$scope:{ctx:x}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),rT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[fjt]},$$scope:{ctx:x}}}),ty=new re({}),ay=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L854"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),aT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[mjt]},$$scope:{ctx:x}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),lT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[gjt]},$$scope:{ctx:x}}}),iy=new re({}),dy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L934"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),dT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[hjt]},$$scope:{ctx:x}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[pjt]},$$scope:{ctx:x}}}),gy=new re({}),hy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L957"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[ujt]},$$scope:{ctx:x}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),xT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[_jt]},$$scope:{ctx:x}}}),by=new re({}),vy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L941"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),kT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[bjt]},$$scope:{ctx:x}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[vjt]},$$scope:{ctx:x}}}),Ey=new re({}),Cy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L948"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Fjt]},$$scope:{ctx:x}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),UT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Tjt]},$$scope:{ctx:x}}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L966"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),YT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Mjt]},$$scope:{ctx:x}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),a7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Ejt]},$$scope:{ctx:x}}}),Py=new re({}),By=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L973"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),s7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Cjt]},$$scope:{ctx:x}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),f7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[wjt]},$$scope:{ctx:x}}}),jy=new re({}),Dy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L920"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),g7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Ajt]},$$scope:{ctx:x}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),_7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Ljt]},$$scope:{ctx:x}}}),zy=new re({}),Wy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L895"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),v7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[yjt]},$$scope:{ctx:x}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),M7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[xjt]},$$scope:{ctx:x}}}),Jy=new re({}),Yy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L902"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),C7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[$jt]},$$scope:{ctx:x}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),$7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[kjt]},$$scope:{ctx:x}}}),o8=new re({}),r8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L911"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),S7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Sjt]},$$scope:{ctx:x}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),B7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Rjt]},$$scope:{ctx:x}}}),s8=new re({}),l8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),d8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),N7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Pjt]},$$scope:{ctx:x}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),$9=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Bjt]},$$scope:{ctx:x}}}),f8=new re({}),m8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),h8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),S9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Ijt]},$$scope:{ctx:x}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),rM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Njt]},$$scope:{ctx:x}}}),u8=new re({}),_8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),v8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),aM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[qjt]},$$scope:{ctx:x}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[jjt]},$$scope:{ctx:x}}}),T8=new re({}),M8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),C8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Djt]},$$scope:{ctx:x}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),wM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Gjt]},$$scope:{ctx:x}}}),A8=new re({}),L8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),x8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),LM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Ojt]},$$scope:{ctx:x}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),HM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Vjt]},$$scope:{ctx:x}}}),k8=new re({}),S8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),P8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),JM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Xjt]},$$scope:{ctx:x}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),l4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[zjt]},$$scope:{ctx:x}}}),I8=new re({}),N8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),j8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),d4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Wjt]},$$scope:{ctx:x}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),I4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Qjt]},$$scope:{ctx:x}}}),G8=new re({}),O8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),X8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),q4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Hjt]},$$scope:{ctx:x}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Ujt]},$$scope:{ctx:x}}}),W8=new re({}),Q8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),U8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Jjt]},$$scope:{ctx:x}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),lE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Yjt]},$$scope:{ctx:x}}}),K8=new re({}),Z8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),dE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Kjt]},$$scope:{ctx:x}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),fE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Zjt]},$$scope:{ctx:x}}}),tx=new re({}),ax=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),gE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[eDt]},$$scope:{ctx:x}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),PE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[oDt]},$$scope:{ctx:x}}}),ix=new re({}),dx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),IE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[rDt]},$$scope:{ctx:x}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[tDt]},$$scope:{ctx:x}}}),gx=new re({}),hx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[aDt]},$$scope:{ctx:x}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),lC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[nDt]},$$scope:{ctx:x}}}),bx=new re({}),vx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),dC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[sDt]},$$scope:{ctx:x}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[lDt]},$$scope:{ctx:x}}}),Ex=new re({}),Cx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),gC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[iDt]},$$scope:{ctx:x}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),GC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[dDt]},$$scope:{ctx:x}}}),yx=new re({}),xx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),VC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[cDt]},$$scope:{ctx:x}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[fDt]},$$scope:{ctx:x}}}),Rx=new re({}),Px=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[mDt]},$$scope:{ctx:x}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),u5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gDt]},$$scope:{ctx:x}}}),qx=new re({}),jx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),b5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[hDt]},$$scope:{ctx:x}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),x5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[pDt]},$$scope:{ctx:x}}}),Vx=new re({}),Xx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),k5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[uDt]},$$scope:{ctx:x}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[_Dt]},$$scope:{ctx:x}}}),Hx=new re({}),Ux=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[bDt]},$$scope:{ctx:x}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),o3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[vDt]},$$scope:{ctx:x}}}),Zx=new re({}),e$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),r$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),t3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[FDt]},$$scope:{ctx:x}}}),t$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),h3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[TDt]},$$scope:{ctx:x}}}),a$=new re({}),n$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),l$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),u3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[MDt]},$$scope:{ctx:x}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),w3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[EDt]},$$scope:{ctx:x}}}),d$=new re({}),c$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),m$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),L3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[CDt]},$$scope:{ctx:x}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),I3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[wDt]},$$scope:{ctx:x}}}),h$=new re({}),p$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),_$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),q3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[ADt]},$$scope:{ctx:x}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),D3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[LDt]},$$scope:{ctx:x}}}),v$=new re({}),F$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),M$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),O3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[yDt]},$$scope:{ctx:x}}}),E$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),z3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[xDt]},$$scope:{ctx:x}}}),w$=new re({}),A$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),Q3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[$Dt]},$$scope:{ctx:x}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),U3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[kDt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ti=o("Auto Classes"),yf=l(),at=a("p"),Mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ei=a("code"),u6=o("from_pretrained()"),xf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),Ci=o("Instantiating one of "),Sn=a("a"),_6=o("AutoConfig"),Rn=o(", "),Pn=a("a"),b6=o("AutoModel"),wi=o(`, and
`),Bn=a("a"),v6=o("AutoTokenizer"),Ai=o(" will directly create a class of the relevant architecture. For instance"),$f=l(),F(ya.$$.fragment),Qe=l(),Ae=a("p"),Qk=o("will create a model that is an instance of "),Li=a("a"),Hk=o("BertModel"),Uk=o("."),Co=l(),xa=a("p"),Jk=o("There is one class of "),kf=a("code"),Yk=o("AutoModel"),bze=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),tGe=l(),yi=a("h2"),Sf=a("a"),Hre=a("span"),F(F6.$$.fragment),vze=l(),Ure=a("span"),Fze=o("Extending the Auto Classes"),aGe=l(),In=a("p"),Tze=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Jre=a("code"),Mze=o("NewModel"),Eze=o(", make sure you have a "),Yre=a("code"),Cze=o("NewModelConfig"),wze=o(` then you can add those to the auto
classes like this:`),nGe=l(),F(T6.$$.fragment),sGe=l(),Kk=a("p"),Aze=o("You will then be able to use the auto classes like you would usually do!"),lGe=l(),F(Rf.$$.fragment),iGe=l(),xi=a("h2"),Pf=a("a"),Kre=a("span"),F(M6.$$.fragment),Lze=l(),Zre=a("span"),yze=o("AutoConfig"),dGe=l(),wo=a("div"),F(E6.$$.fragment),xze=l(),C6=a("p"),$ze=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Zk=a("a"),kze=o("from_pretrained()"),Sze=o(" class method."),Rze=l(),w6=a("p"),Pze=o("This class cannot be instantiated directly using "),ete=a("code"),Bze=o("__init__()"),Ize=o(" (throws an error)."),Nze=l(),wr=a("div"),F(A6.$$.fragment),qze=l(),ote=a("p"),jze=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Dze=l(),$i=a("p"),Gze=o("The configuration class to instantiate is selected based on the "),rte=a("code"),Oze=o("model_type"),Vze=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),tte=a("code"),Xze=o("pretrained_model_name_or_path"),zze=o(":"),Wze=l(),A=a("ul"),Bf=a("li"),ate=a("strong"),Qze=o("albert"),Hze=o(" \u2014 "),eS=a("a"),Uze=o("AlbertConfig"),Jze=o(" (ALBERT model)"),Yze=l(),If=a("li"),nte=a("strong"),Kze=o("bart"),Zze=o(" \u2014 "),oS=a("a"),eWe=o("BartConfig"),oWe=o(" (BART model)"),rWe=l(),Nf=a("li"),ste=a("strong"),tWe=o("beit"),aWe=o(" \u2014 "),rS=a("a"),nWe=o("BeitConfig"),sWe=o(" (BEiT model)"),lWe=l(),qf=a("li"),lte=a("strong"),iWe=o("bert"),dWe=o(" \u2014 "),tS=a("a"),cWe=o("BertConfig"),fWe=o(" (BERT model)"),mWe=l(),jf=a("li"),ite=a("strong"),gWe=o("bert-generation"),hWe=o(" \u2014 "),aS=a("a"),pWe=o("BertGenerationConfig"),uWe=o(" (Bert Generation model)"),_We=l(),Df=a("li"),dte=a("strong"),bWe=o("big_bird"),vWe=o(" \u2014 "),nS=a("a"),FWe=o("BigBirdConfig"),TWe=o(" (BigBird model)"),MWe=l(),Gf=a("li"),cte=a("strong"),EWe=o("bigbird_pegasus"),CWe=o(" \u2014 "),sS=a("a"),wWe=o("BigBirdPegasusConfig"),AWe=o(" (BigBird-Pegasus model)"),LWe=l(),Of=a("li"),fte=a("strong"),yWe=o("blenderbot"),xWe=o(" \u2014 "),lS=a("a"),$We=o("BlenderbotConfig"),kWe=o(" (Blenderbot model)"),SWe=l(),Vf=a("li"),mte=a("strong"),RWe=o("blenderbot-small"),PWe=o(" \u2014 "),iS=a("a"),BWe=o("BlenderbotSmallConfig"),IWe=o(" (BlenderbotSmall model)"),NWe=l(),Xf=a("li"),gte=a("strong"),qWe=o("bloom"),jWe=o(" \u2014 "),dS=a("a"),DWe=o("BloomConfig"),GWe=o(" (BLOOM model)"),OWe=l(),zf=a("li"),hte=a("strong"),VWe=o("camembert"),XWe=o(" \u2014 "),cS=a("a"),zWe=o("CamembertConfig"),WWe=o(" (CamemBERT model)"),QWe=l(),Wf=a("li"),pte=a("strong"),HWe=o("canine"),UWe=o(" \u2014 "),fS=a("a"),JWe=o("CanineConfig"),YWe=o(" (CANINE model)"),KWe=l(),Qf=a("li"),ute=a("strong"),ZWe=o("clip"),eQe=o(" \u2014 "),mS=a("a"),oQe=o("CLIPConfig"),rQe=o(" (CLIP model)"),tQe=l(),Hf=a("li"),_te=a("strong"),aQe=o("convbert"),nQe=o(" \u2014 "),gS=a("a"),sQe=o("ConvBertConfig"),lQe=o(" (ConvBERT model)"),iQe=l(),Uf=a("li"),bte=a("strong"),dQe=o("convnext"),cQe=o(" \u2014 "),hS=a("a"),fQe=o("ConvNextConfig"),mQe=o(" (ConvNeXT model)"),gQe=l(),Jf=a("li"),vte=a("strong"),hQe=o("ctrl"),pQe=o(" \u2014 "),pS=a("a"),uQe=o("CTRLConfig"),_Qe=o(" (CTRL model)"),bQe=l(),Yf=a("li"),Fte=a("strong"),vQe=o("cvt"),FQe=o(" \u2014 "),uS=a("a"),TQe=o("CvtConfig"),MQe=o(" (CvT model)"),EQe=l(),Kf=a("li"),Tte=a("strong"),CQe=o("data2vec-audio"),wQe=o(" \u2014 "),_S=a("a"),AQe=o("Data2VecAudioConfig"),LQe=o(" (Data2VecAudio model)"),yQe=l(),Zf=a("li"),Mte=a("strong"),xQe=o("data2vec-text"),$Qe=o(" \u2014 "),bS=a("a"),kQe=o("Data2VecTextConfig"),SQe=o(" (Data2VecText model)"),RQe=l(),em=a("li"),Ete=a("strong"),PQe=o("data2vec-vision"),BQe=o(" \u2014 "),vS=a("a"),IQe=o("Data2VecVisionConfig"),NQe=o(" (Data2VecVision model)"),qQe=l(),om=a("li"),Cte=a("strong"),jQe=o("deberta"),DQe=o(" \u2014 "),FS=a("a"),GQe=o("DebertaConfig"),OQe=o(" (DeBERTa model)"),VQe=l(),rm=a("li"),wte=a("strong"),XQe=o("deberta-v2"),zQe=o(" \u2014 "),TS=a("a"),WQe=o("DebertaV2Config"),QQe=o(" (DeBERTa-v2 model)"),HQe=l(),tm=a("li"),Ate=a("strong"),UQe=o("decision_transformer"),JQe=o(" \u2014 "),MS=a("a"),YQe=o("DecisionTransformerConfig"),KQe=o(" (Decision Transformer model)"),ZQe=l(),am=a("li"),Lte=a("strong"),eHe=o("deit"),oHe=o(" \u2014 "),ES=a("a"),rHe=o("DeiTConfig"),tHe=o(" (DeiT model)"),aHe=l(),nm=a("li"),yte=a("strong"),nHe=o("detr"),sHe=o(" \u2014 "),CS=a("a"),lHe=o("DetrConfig"),iHe=o(" (DETR model)"),dHe=l(),sm=a("li"),xte=a("strong"),cHe=o("distilbert"),fHe=o(" \u2014 "),wS=a("a"),mHe=o("DistilBertConfig"),gHe=o(" (DistilBERT model)"),hHe=l(),lm=a("li"),$te=a("strong"),pHe=o("dpr"),uHe=o(" \u2014 "),AS=a("a"),_He=o("DPRConfig"),bHe=o(" (DPR model)"),vHe=l(),im=a("li"),kte=a("strong"),FHe=o("dpt"),THe=o(" \u2014 "),LS=a("a"),MHe=o("DPTConfig"),EHe=o(" (DPT model)"),CHe=l(),dm=a("li"),Ste=a("strong"),wHe=o("electra"),AHe=o(" \u2014 "),yS=a("a"),LHe=o("ElectraConfig"),yHe=o(" (ELECTRA model)"),xHe=l(),cm=a("li"),Rte=a("strong"),$He=o("encoder-decoder"),kHe=o(" \u2014 "),xS=a("a"),SHe=o("EncoderDecoderConfig"),RHe=o(" (Encoder decoder model)"),PHe=l(),fm=a("li"),Pte=a("strong"),BHe=o("flaubert"),IHe=o(" \u2014 "),$S=a("a"),NHe=o("FlaubertConfig"),qHe=o(" (FlauBERT model)"),jHe=l(),mm=a("li"),Bte=a("strong"),DHe=o("flava"),GHe=o(" \u2014 "),kS=a("a"),OHe=o("FlavaConfig"),VHe=o(" (FLAVA model)"),XHe=l(),gm=a("li"),Ite=a("strong"),zHe=o("fnet"),WHe=o(" \u2014 "),SS=a("a"),QHe=o("FNetConfig"),HHe=o(" (FNet model)"),UHe=l(),hm=a("li"),Nte=a("strong"),JHe=o("fsmt"),YHe=o(" \u2014 "),RS=a("a"),KHe=o("FSMTConfig"),ZHe=o(" (FairSeq Machine-Translation model)"),eUe=l(),pm=a("li"),qte=a("strong"),oUe=o("funnel"),rUe=o(" \u2014 "),PS=a("a"),tUe=o("FunnelConfig"),aUe=o(" (Funnel Transformer model)"),nUe=l(),um=a("li"),jte=a("strong"),sUe=o("glpn"),lUe=o(" \u2014 "),BS=a("a"),iUe=o("GLPNConfig"),dUe=o(" (GLPN model)"),cUe=l(),_m=a("li"),Dte=a("strong"),fUe=o("gpt2"),mUe=o(" \u2014 "),IS=a("a"),gUe=o("GPT2Config"),hUe=o(" (OpenAI GPT-2 model)"),pUe=l(),bm=a("li"),Gte=a("strong"),uUe=o("gpt_neo"),_Ue=o(" \u2014 "),NS=a("a"),bUe=o("GPTNeoConfig"),vUe=o(" (GPT Neo model)"),FUe=l(),vm=a("li"),Ote=a("strong"),TUe=o("gpt_neox"),MUe=o(" \u2014 "),qS=a("a"),EUe=o("GPTNeoXConfig"),CUe=o(" (GPT NeoX model)"),wUe=l(),Fm=a("li"),Vte=a("strong"),AUe=o("gptj"),LUe=o(" \u2014 "),jS=a("a"),yUe=o("GPTJConfig"),xUe=o(" (GPT-J model)"),$Ue=l(),Tm=a("li"),Xte=a("strong"),kUe=o("hubert"),SUe=o(" \u2014 "),DS=a("a"),RUe=o("HubertConfig"),PUe=o(" (Hubert model)"),BUe=l(),Mm=a("li"),zte=a("strong"),IUe=o("ibert"),NUe=o(" \u2014 "),GS=a("a"),qUe=o("IBertConfig"),jUe=o(" (I-BERT model)"),DUe=l(),Em=a("li"),Wte=a("strong"),GUe=o("imagegpt"),OUe=o(" \u2014 "),OS=a("a"),VUe=o("ImageGPTConfig"),XUe=o(" (ImageGPT model)"),zUe=l(),Cm=a("li"),Qte=a("strong"),WUe=o("layoutlm"),QUe=o(" \u2014 "),VS=a("a"),HUe=o("LayoutLMConfig"),UUe=o(" (LayoutLM model)"),JUe=l(),wm=a("li"),Hte=a("strong"),YUe=o("layoutlmv2"),KUe=o(" \u2014 "),XS=a("a"),ZUe=o("LayoutLMv2Config"),eJe=o(" (LayoutLMv2 model)"),oJe=l(),Am=a("li"),Ute=a("strong"),rJe=o("layoutlmv3"),tJe=o(" \u2014 "),zS=a("a"),aJe=o("LayoutLMv3Config"),nJe=o(" (LayoutLMv3 model)"),sJe=l(),Lm=a("li"),Jte=a("strong"),lJe=o("led"),iJe=o(" \u2014 "),WS=a("a"),dJe=o("LEDConfig"),cJe=o(" (LED model)"),fJe=l(),ym=a("li"),Yte=a("strong"),mJe=o("levit"),gJe=o(" \u2014 "),QS=a("a"),hJe=o("LevitConfig"),pJe=o(" (LeViT model)"),uJe=l(),xm=a("li"),Kte=a("strong"),_Je=o("longformer"),bJe=o(" \u2014 "),HS=a("a"),vJe=o("LongformerConfig"),FJe=o(" (Longformer model)"),TJe=l(),$m=a("li"),Zte=a("strong"),MJe=o("longt5"),EJe=o(" \u2014 "),US=a("a"),CJe=o("LongT5Config"),wJe=o(" (LongT5 model)"),AJe=l(),km=a("li"),eae=a("strong"),LJe=o("luke"),yJe=o(" \u2014 "),JS=a("a"),xJe=o("LukeConfig"),$Je=o(" (LUKE model)"),kJe=l(),Sm=a("li"),oae=a("strong"),SJe=o("lxmert"),RJe=o(" \u2014 "),YS=a("a"),PJe=o("LxmertConfig"),BJe=o(" (LXMERT model)"),IJe=l(),Rm=a("li"),rae=a("strong"),NJe=o("m2m_100"),qJe=o(" \u2014 "),KS=a("a"),jJe=o("M2M100Config"),DJe=o(" (M2M100 model)"),GJe=l(),Pm=a("li"),tae=a("strong"),OJe=o("marian"),VJe=o(" \u2014 "),ZS=a("a"),XJe=o("MarianConfig"),zJe=o(" (Marian model)"),WJe=l(),Bm=a("li"),aae=a("strong"),QJe=o("maskformer"),HJe=o(" \u2014 "),eR=a("a"),UJe=o("MaskFormerConfig"),JJe=o(" (MaskFormer model)"),YJe=l(),Im=a("li"),nae=a("strong"),KJe=o("mbart"),ZJe=o(" \u2014 "),oR=a("a"),eYe=o("MBartConfig"),oYe=o(" (mBART model)"),rYe=l(),Nm=a("li"),sae=a("strong"),tYe=o("mctct"),aYe=o(" \u2014 "),rR=a("a"),nYe=o("MCTCTConfig"),sYe=o(" (M-CTC-T model)"),lYe=l(),qm=a("li"),lae=a("strong"),iYe=o("megatron-bert"),dYe=o(" \u2014 "),tR=a("a"),cYe=o("MegatronBertConfig"),fYe=o(" (Megatron-BERT model)"),mYe=l(),jm=a("li"),iae=a("strong"),gYe=o("mobilebert"),hYe=o(" \u2014 "),aR=a("a"),pYe=o("MobileBertConfig"),uYe=o(" (MobileBERT model)"),_Ye=l(),Dm=a("li"),dae=a("strong"),bYe=o("mpnet"),vYe=o(" \u2014 "),nR=a("a"),FYe=o("MPNetConfig"),TYe=o(" (MPNet model)"),MYe=l(),Gm=a("li"),cae=a("strong"),EYe=o("mt5"),CYe=o(" \u2014 "),sR=a("a"),wYe=o("MT5Config"),AYe=o(" (MT5 model)"),LYe=l(),Om=a("li"),fae=a("strong"),yYe=o("nystromformer"),xYe=o(" \u2014 "),lR=a("a"),$Ye=o("NystromformerConfig"),kYe=o(" (Nystr\xF6mformer model)"),SYe=l(),Vm=a("li"),mae=a("strong"),RYe=o("ofa"),PYe=o(" \u2014 "),iR=a("a"),BYe=o("OFAConfig"),IYe=o(" (OFA model)"),NYe=l(),Xm=a("li"),gae=a("strong"),qYe=o("openai-gpt"),jYe=o(" \u2014 "),dR=a("a"),DYe=o("OpenAIGPTConfig"),GYe=o(" (OpenAI GPT model)"),OYe=l(),zm=a("li"),hae=a("strong"),VYe=o("opt"),XYe=o(" \u2014 "),cR=a("a"),zYe=o("OPTConfig"),WYe=o(" (OPT model)"),QYe=l(),Wm=a("li"),pae=a("strong"),HYe=o("pegasus"),UYe=o(" \u2014 "),fR=a("a"),JYe=o("PegasusConfig"),YYe=o(" (Pegasus model)"),KYe=l(),Qm=a("li"),uae=a("strong"),ZYe=o("perceiver"),eKe=o(" \u2014 "),mR=a("a"),oKe=o("PerceiverConfig"),rKe=o(" (Perceiver model)"),tKe=l(),Hm=a("li"),_ae=a("strong"),aKe=o("plbart"),nKe=o(" \u2014 "),gR=a("a"),sKe=o("PLBartConfig"),lKe=o(" (PLBart model)"),iKe=l(),Um=a("li"),bae=a("strong"),dKe=o("poolformer"),cKe=o(" \u2014 "),hR=a("a"),fKe=o("PoolFormerConfig"),mKe=o(" (PoolFormer model)"),gKe=l(),Jm=a("li"),vae=a("strong"),hKe=o("prophetnet"),pKe=o(" \u2014 "),pR=a("a"),uKe=o("ProphetNetConfig"),_Ke=o(" (ProphetNet model)"),bKe=l(),Ym=a("li"),Fae=a("strong"),vKe=o("qdqbert"),FKe=o(" \u2014 "),uR=a("a"),TKe=o("QDQBertConfig"),MKe=o(" (QDQBert model)"),EKe=l(),Km=a("li"),Tae=a("strong"),CKe=o("rag"),wKe=o(" \u2014 "),_R=a("a"),AKe=o("RagConfig"),LKe=o(" (RAG model)"),yKe=l(),Zm=a("li"),Mae=a("strong"),xKe=o("realm"),$Ke=o(" \u2014 "),bR=a("a"),kKe=o("RealmConfig"),SKe=o(" (REALM model)"),RKe=l(),eg=a("li"),Eae=a("strong"),PKe=o("reformer"),BKe=o(" \u2014 "),vR=a("a"),IKe=o("ReformerConfig"),NKe=o(" (Reformer model)"),qKe=l(),og=a("li"),Cae=a("strong"),jKe=o("regnet"),DKe=o(" \u2014 "),FR=a("a"),GKe=o("RegNetConfig"),OKe=o(" (RegNet model)"),VKe=l(),rg=a("li"),wae=a("strong"),XKe=o("rembert"),zKe=o(" \u2014 "),TR=a("a"),WKe=o("RemBertConfig"),QKe=o(" (RemBERT model)"),HKe=l(),tg=a("li"),Aae=a("strong"),UKe=o("resnet"),JKe=o(" \u2014 "),MR=a("a"),YKe=o("ResNetConfig"),KKe=o(" (ResNet model)"),ZKe=l(),ag=a("li"),Lae=a("strong"),eZe=o("retribert"),oZe=o(" \u2014 "),ER=a("a"),rZe=o("RetriBertConfig"),tZe=o(" (RetriBERT model)"),aZe=l(),ng=a("li"),yae=a("strong"),nZe=o("roberta"),sZe=o(" \u2014 "),CR=a("a"),lZe=o("RobertaConfig"),iZe=o(" (RoBERTa model)"),dZe=l(),sg=a("li"),xae=a("strong"),cZe=o("roformer"),fZe=o(" \u2014 "),wR=a("a"),mZe=o("RoFormerConfig"),gZe=o(" (RoFormer model)"),hZe=l(),lg=a("li"),$ae=a("strong"),pZe=o("segformer"),uZe=o(" \u2014 "),AR=a("a"),_Ze=o("SegformerConfig"),bZe=o(" (SegFormer model)"),vZe=l(),ig=a("li"),kae=a("strong"),FZe=o("sew"),TZe=o(" \u2014 "),LR=a("a"),MZe=o("SEWConfig"),EZe=o(" (SEW model)"),CZe=l(),dg=a("li"),Sae=a("strong"),wZe=o("sew-d"),AZe=o(" \u2014 "),yR=a("a"),LZe=o("SEWDConfig"),yZe=o(" (SEW-D model)"),xZe=l(),cg=a("li"),Rae=a("strong"),$Ze=o("speech-encoder-decoder"),kZe=o(" \u2014 "),xR=a("a"),SZe=o("SpeechEncoderDecoderConfig"),RZe=o(" (Speech Encoder decoder model)"),PZe=l(),fg=a("li"),Pae=a("strong"),BZe=o("speech_to_text"),IZe=o(" \u2014 "),$R=a("a"),NZe=o("Speech2TextConfig"),qZe=o(" (Speech2Text model)"),jZe=l(),mg=a("li"),Bae=a("strong"),DZe=o("speech_to_text_2"),GZe=o(" \u2014 "),kR=a("a"),OZe=o("Speech2Text2Config"),VZe=o(" (Speech2Text2 model)"),XZe=l(),gg=a("li"),Iae=a("strong"),zZe=o("splinter"),WZe=o(" \u2014 "),SR=a("a"),QZe=o("SplinterConfig"),HZe=o(" (Splinter model)"),UZe=l(),hg=a("li"),Nae=a("strong"),JZe=o("squeezebert"),YZe=o(" \u2014 "),RR=a("a"),KZe=o("SqueezeBertConfig"),ZZe=o(" (SqueezeBERT model)"),eeo=l(),pg=a("li"),qae=a("strong"),oeo=o("swin"),reo=o(" \u2014 "),PR=a("a"),teo=o("SwinConfig"),aeo=o(" (Swin Transformer model)"),neo=l(),ug=a("li"),jae=a("strong"),seo=o("t5"),leo=o(" \u2014 "),BR=a("a"),ieo=o("T5Config"),deo=o(" (T5 model)"),ceo=l(),_g=a("li"),Dae=a("strong"),feo=o("tapas"),meo=o(" \u2014 "),IR=a("a"),geo=o("TapasConfig"),heo=o(" (TAPAS model)"),peo=l(),bg=a("li"),Gae=a("strong"),ueo=o("trajectory_transformer"),_eo=o(" \u2014 "),NR=a("a"),beo=o("TrajectoryTransformerConfig"),veo=o(" (Trajectory Transformer model)"),Feo=l(),vg=a("li"),Oae=a("strong"),Teo=o("transfo-xl"),Meo=o(" \u2014 "),qR=a("a"),Eeo=o("TransfoXLConfig"),Ceo=o(" (Transformer-XL model)"),weo=l(),Fg=a("li"),Vae=a("strong"),Aeo=o("trocr"),Leo=o(" \u2014 "),jR=a("a"),yeo=o("TrOCRConfig"),xeo=o(" (TrOCR model)"),$eo=l(),Tg=a("li"),Xae=a("strong"),keo=o("unispeech"),Seo=o(" \u2014 "),DR=a("a"),Reo=o("UniSpeechConfig"),Peo=o(" (UniSpeech model)"),Beo=l(),Mg=a("li"),zae=a("strong"),Ieo=o("unispeech-sat"),Neo=o(" \u2014 "),GR=a("a"),qeo=o("UniSpeechSatConfig"),jeo=o(" (UniSpeechSat model)"),Deo=l(),Eg=a("li"),Wae=a("strong"),Geo=o("van"),Oeo=o(" \u2014 "),OR=a("a"),Veo=o("VanConfig"),Xeo=o(" (VAN model)"),zeo=l(),Cg=a("li"),Qae=a("strong"),Weo=o("vilt"),Qeo=o(" \u2014 "),VR=a("a"),Heo=o("ViltConfig"),Ueo=o(" (ViLT model)"),Jeo=l(),wg=a("li"),Hae=a("strong"),Yeo=o("vision-encoder-decoder"),Keo=o(" \u2014 "),XR=a("a"),Zeo=o("VisionEncoderDecoderConfig"),eoo=o(" (Vision Encoder decoder model)"),ooo=l(),Ag=a("li"),Uae=a("strong"),roo=o("vision-text-dual-encoder"),too=o(" \u2014 "),zR=a("a"),aoo=o("VisionTextDualEncoderConfig"),noo=o(" (VisionTextDualEncoder model)"),soo=l(),Lg=a("li"),Jae=a("strong"),loo=o("visual_bert"),ioo=o(" \u2014 "),WR=a("a"),doo=o("VisualBertConfig"),coo=o(" (VisualBERT model)"),foo=l(),yg=a("li"),Yae=a("strong"),moo=o("vit"),goo=o(" \u2014 "),QR=a("a"),hoo=o("ViTConfig"),poo=o(" (ViT model)"),uoo=l(),xg=a("li"),Kae=a("strong"),_oo=o("vit_mae"),boo=o(" \u2014 "),HR=a("a"),voo=o("ViTMAEConfig"),Foo=o(" (ViTMAE model)"),Too=l(),$g=a("li"),Zae=a("strong"),Moo=o("wav2vec2"),Eoo=o(" \u2014 "),UR=a("a"),Coo=o("Wav2Vec2Config"),woo=o(" (Wav2Vec2 model)"),Aoo=l(),kg=a("li"),ene=a("strong"),Loo=o("wav2vec2-conformer"),yoo=o(" \u2014 "),JR=a("a"),xoo=o("Wav2Vec2ConformerConfig"),$oo=o(" (Wav2Vec2-Conformer model)"),koo=l(),Sg=a("li"),one=a("strong"),Soo=o("wavlm"),Roo=o(" \u2014 "),YR=a("a"),Poo=o("WavLMConfig"),Boo=o(" (WavLM model)"),Ioo=l(),Rg=a("li"),rne=a("strong"),Noo=o("xglm"),qoo=o(" \u2014 "),KR=a("a"),joo=o("XGLMConfig"),Doo=o(" (XGLM model)"),Goo=l(),Pg=a("li"),tne=a("strong"),Ooo=o("xlm"),Voo=o(" \u2014 "),ZR=a("a"),Xoo=o("XLMConfig"),zoo=o(" (XLM model)"),Woo=l(),Bg=a("li"),ane=a("strong"),Qoo=o("xlm-prophetnet"),Hoo=o(" \u2014 "),eP=a("a"),Uoo=o("XLMProphetNetConfig"),Joo=o(" (XLM-ProphetNet model)"),Yoo=l(),Ig=a("li"),nne=a("strong"),Koo=o("xlm-roberta"),Zoo=o(" \u2014 "),oP=a("a"),ero=o("XLMRobertaConfig"),oro=o(" (XLM-RoBERTa model)"),rro=l(),Ng=a("li"),sne=a("strong"),tro=o("xlm-roberta-xl"),aro=o(" \u2014 "),rP=a("a"),nro=o("XLMRobertaXLConfig"),sro=o(" (XLM-RoBERTa-XL model)"),lro=l(),qg=a("li"),lne=a("strong"),iro=o("xlnet"),dro=o(" \u2014 "),tP=a("a"),cro=o("XLNetConfig"),fro=o(" (XLNet model)"),mro=l(),jg=a("li"),ine=a("strong"),gro=o("yolos"),hro=o(" \u2014 "),aP=a("a"),pro=o("YolosConfig"),uro=o(" (YOLOS model)"),_ro=l(),Dg=a("li"),dne=a("strong"),bro=o("yoso"),vro=o(" \u2014 "),nP=a("a"),Fro=o("YosoConfig"),Tro=o(" (YOSO model)"),Mro=l(),F(Gg.$$.fragment),Ero=l(),Og=a("div"),F(L6.$$.fragment),Cro=l(),cne=a("p"),wro=o("Register a new configuration for this class."),cGe=l(),ki=a("h2"),Vg=a("a"),fne=a("span"),F(y6.$$.fragment),Aro=l(),mne=a("span"),Lro=o("AutoTokenizer"),fGe=l(),Ao=a("div"),F(x6.$$.fragment),yro=l(),$6=a("p"),xro=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),sP=a("a"),$ro=o("AutoTokenizer.from_pretrained()"),kro=o(" class method."),Sro=l(),k6=a("p"),Rro=o("This class cannot be instantiated directly using "),gne=a("code"),Pro=o("__init__()"),Bro=o(" (throws an error)."),Iro=l(),Ar=a("div"),F(S6.$$.fragment),Nro=l(),hne=a("p"),qro=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),jro=l(),$a=a("p"),Dro=o("The tokenizer class to instantiate is selected based on the "),pne=a("code"),Gro=o("model_type"),Oro=o(` property of the config object (either
passed as an argument or loaded from `),une=a("code"),Vro=o("pretrained_model_name_or_path"),Xro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ne=a("code"),zro=o("pretrained_model_name_or_path"),Wro=o(":"),Qro=l(),k=a("ul"),Nn=a("li"),bne=a("strong"),Hro=o("albert"),Uro=o(" \u2014 "),lP=a("a"),Jro=o("AlbertTokenizer"),Yro=o(" or "),iP=a("a"),Kro=o("AlbertTokenizerFast"),Zro=o(" (ALBERT model)"),eto=l(),qn=a("li"),vne=a("strong"),oto=o("bart"),rto=o(" \u2014 "),dP=a("a"),tto=o("BartTokenizer"),ato=o(" or "),cP=a("a"),nto=o("BartTokenizerFast"),sto=o(" (BART model)"),lto=l(),jn=a("li"),Fne=a("strong"),ito=o("barthez"),dto=o(" \u2014 "),fP=a("a"),cto=o("BarthezTokenizer"),fto=o(" or "),mP=a("a"),mto=o("BarthezTokenizerFast"),gto=o(" (BARThez model)"),hto=l(),Xg=a("li"),Tne=a("strong"),pto=o("bartpho"),uto=o(" \u2014 "),gP=a("a"),_to=o("BartphoTokenizer"),bto=o(" (BARTpho model)"),vto=l(),Dn=a("li"),Mne=a("strong"),Fto=o("bert"),Tto=o(" \u2014 "),hP=a("a"),Mto=o("BertTokenizer"),Eto=o(" or "),pP=a("a"),Cto=o("BertTokenizerFast"),wto=o(" (BERT model)"),Ato=l(),zg=a("li"),Ene=a("strong"),Lto=o("bert-generation"),yto=o(" \u2014 "),uP=a("a"),xto=o("BertGenerationTokenizer"),$to=o(" (Bert Generation model)"),kto=l(),Wg=a("li"),Cne=a("strong"),Sto=o("bert-japanese"),Rto=o(" \u2014 "),_P=a("a"),Pto=o("BertJapaneseTokenizer"),Bto=o(" (BertJapanese model)"),Ito=l(),Qg=a("li"),wne=a("strong"),Nto=o("bertweet"),qto=o(" \u2014 "),bP=a("a"),jto=o("BertweetTokenizer"),Dto=o(" (BERTweet model)"),Gto=l(),Gn=a("li"),Ane=a("strong"),Oto=o("big_bird"),Vto=o(" \u2014 "),vP=a("a"),Xto=o("BigBirdTokenizer"),zto=o(" or "),FP=a("a"),Wto=o("BigBirdTokenizerFast"),Qto=o(" (BigBird model)"),Hto=l(),On=a("li"),Lne=a("strong"),Uto=o("bigbird_pegasus"),Jto=o(" \u2014 "),TP=a("a"),Yto=o("PegasusTokenizer"),Kto=o(" or "),MP=a("a"),Zto=o("PegasusTokenizerFast"),eao=o(" (BigBird-Pegasus model)"),oao=l(),Vn=a("li"),yne=a("strong"),rao=o("blenderbot"),tao=o(" \u2014 "),EP=a("a"),aao=o("BlenderbotTokenizer"),nao=o(" or "),CP=a("a"),sao=o("BlenderbotTokenizerFast"),lao=o(" (Blenderbot model)"),iao=l(),Hg=a("li"),xne=a("strong"),dao=o("blenderbot-small"),cao=o(" \u2014 "),wP=a("a"),fao=o("BlenderbotSmallTokenizer"),mao=o(" (BlenderbotSmall model)"),gao=l(),Ug=a("li"),$ne=a("strong"),hao=o("bloom"),pao=o(" \u2014 "),AP=a("a"),uao=o("BloomTokenizerFast"),_ao=o(" (BLOOM model)"),bao=l(),Jg=a("li"),kne=a("strong"),vao=o("byt5"),Fao=o(" \u2014 "),LP=a("a"),Tao=o("ByT5Tokenizer"),Mao=o(" (ByT5 model)"),Eao=l(),Xn=a("li"),Sne=a("strong"),Cao=o("camembert"),wao=o(" \u2014 "),yP=a("a"),Aao=o("CamembertTokenizer"),Lao=o(" or "),xP=a("a"),yao=o("CamembertTokenizerFast"),xao=o(" (CamemBERT model)"),$ao=l(),Yg=a("li"),Rne=a("strong"),kao=o("canine"),Sao=o(" \u2014 "),$P=a("a"),Rao=o("CanineTokenizer"),Pao=o(" (CANINE model)"),Bao=l(),zn=a("li"),Pne=a("strong"),Iao=o("clip"),Nao=o(" \u2014 "),kP=a("a"),qao=o("CLIPTokenizer"),jao=o(" or "),SP=a("a"),Dao=o("CLIPTokenizerFast"),Gao=o(" (CLIP model)"),Oao=l(),Wn=a("li"),Bne=a("strong"),Vao=o("convbert"),Xao=o(" \u2014 "),RP=a("a"),zao=o("ConvBertTokenizer"),Wao=o(" or "),PP=a("a"),Qao=o("ConvBertTokenizerFast"),Hao=o(" (ConvBERT model)"),Uao=l(),Qn=a("li"),Ine=a("strong"),Jao=o("cpm"),Yao=o(" \u2014 "),BP=a("a"),Kao=o("CpmTokenizer"),Zao=o(" or "),IP=a("a"),eno=o("CpmTokenizerFast"),ono=o(" (CPM model)"),rno=l(),Kg=a("li"),Nne=a("strong"),tno=o("ctrl"),ano=o(" \u2014 "),NP=a("a"),nno=o("CTRLTokenizer"),sno=o(" (CTRL model)"),lno=l(),Hn=a("li"),qne=a("strong"),ino=o("data2vec-text"),dno=o(" \u2014 "),qP=a("a"),cno=o("RobertaTokenizer"),fno=o(" or "),jP=a("a"),mno=o("RobertaTokenizerFast"),gno=o(" (Data2VecText model)"),hno=l(),Un=a("li"),jne=a("strong"),pno=o("deberta"),uno=o(" \u2014 "),DP=a("a"),_no=o("DebertaTokenizer"),bno=o(" or "),GP=a("a"),vno=o("DebertaTokenizerFast"),Fno=o(" (DeBERTa model)"),Tno=l(),Jn=a("li"),Dne=a("strong"),Mno=o("deberta-v2"),Eno=o(" \u2014 "),OP=a("a"),Cno=o("DebertaV2Tokenizer"),wno=o(" or "),VP=a("a"),Ano=o("DebertaV2TokenizerFast"),Lno=o(" (DeBERTa-v2 model)"),yno=l(),Yn=a("li"),Gne=a("strong"),xno=o("distilbert"),$no=o(" \u2014 "),XP=a("a"),kno=o("DistilBertTokenizer"),Sno=o(" or "),zP=a("a"),Rno=o("DistilBertTokenizerFast"),Pno=o(" (DistilBERT model)"),Bno=l(),Kn=a("li"),One=a("strong"),Ino=o("dpr"),Nno=o(" \u2014 "),WP=a("a"),qno=o("DPRQuestionEncoderTokenizer"),jno=o(" or "),QP=a("a"),Dno=o("DPRQuestionEncoderTokenizerFast"),Gno=o(" (DPR model)"),Ono=l(),Zn=a("li"),Vne=a("strong"),Vno=o("electra"),Xno=o(" \u2014 "),HP=a("a"),zno=o("ElectraTokenizer"),Wno=o(" or "),UP=a("a"),Qno=o("ElectraTokenizerFast"),Hno=o(" (ELECTRA model)"),Uno=l(),Zg=a("li"),Xne=a("strong"),Jno=o("flaubert"),Yno=o(" \u2014 "),JP=a("a"),Kno=o("FlaubertTokenizer"),Zno=o(" (FlauBERT model)"),eso=l(),es=a("li"),zne=a("strong"),oso=o("fnet"),rso=o(" \u2014 "),YP=a("a"),tso=o("FNetTokenizer"),aso=o(" or "),KP=a("a"),nso=o("FNetTokenizerFast"),sso=o(" (FNet model)"),lso=l(),eh=a("li"),Wne=a("strong"),iso=o("fsmt"),dso=o(" \u2014 "),ZP=a("a"),cso=o("FSMTTokenizer"),fso=o(" (FairSeq Machine-Translation model)"),mso=l(),os=a("li"),Qne=a("strong"),gso=o("funnel"),hso=o(" \u2014 "),eB=a("a"),pso=o("FunnelTokenizer"),uso=o(" or "),oB=a("a"),_so=o("FunnelTokenizerFast"),bso=o(" (Funnel Transformer model)"),vso=l(),rs=a("li"),Hne=a("strong"),Fso=o("gpt2"),Tso=o(" \u2014 "),rB=a("a"),Mso=o("GPT2Tokenizer"),Eso=o(" or "),tB=a("a"),Cso=o("GPT2TokenizerFast"),wso=o(" (OpenAI GPT-2 model)"),Aso=l(),ts=a("li"),Une=a("strong"),Lso=o("gpt_neo"),yso=o(" \u2014 "),aB=a("a"),xso=o("GPT2Tokenizer"),$so=o(" or "),nB=a("a"),kso=o("GPT2TokenizerFast"),Sso=o(" (GPT Neo model)"),Rso=l(),oh=a("li"),Jne=a("strong"),Pso=o("gpt_neox"),Bso=o(" \u2014 "),sB=a("a"),Iso=o("GPTNeoXTokenizerFast"),Nso=o(" (GPT NeoX model)"),qso=l(),as=a("li"),Yne=a("strong"),jso=o("gptj"),Dso=o(" \u2014 "),lB=a("a"),Gso=o("GPT2Tokenizer"),Oso=o(" or "),iB=a("a"),Vso=o("GPT2TokenizerFast"),Xso=o(" (GPT-J model)"),zso=l(),ns=a("li"),Kne=a("strong"),Wso=o("herbert"),Qso=o(" \u2014 "),dB=a("a"),Hso=o("HerbertTokenizer"),Uso=o(" or "),cB=a("a"),Jso=o("HerbertTokenizerFast"),Yso=o(" (HerBERT model)"),Kso=l(),rh=a("li"),Zne=a("strong"),Zso=o("hubert"),elo=o(" \u2014 "),fB=a("a"),olo=o("Wav2Vec2CTCTokenizer"),rlo=o(" (Hubert model)"),tlo=l(),ss=a("li"),ese=a("strong"),alo=o("ibert"),nlo=o(" \u2014 "),mB=a("a"),slo=o("RobertaTokenizer"),llo=o(" or "),gB=a("a"),ilo=o("RobertaTokenizerFast"),dlo=o(" (I-BERT model)"),clo=l(),ls=a("li"),ose=a("strong"),flo=o("layoutlm"),mlo=o(" \u2014 "),hB=a("a"),glo=o("LayoutLMTokenizer"),hlo=o(" or "),pB=a("a"),plo=o("LayoutLMTokenizerFast"),ulo=o(" (LayoutLM model)"),_lo=l(),is=a("li"),rse=a("strong"),blo=o("layoutlmv2"),vlo=o(" \u2014 "),uB=a("a"),Flo=o("LayoutLMv2Tokenizer"),Tlo=o(" or "),_B=a("a"),Mlo=o("LayoutLMv2TokenizerFast"),Elo=o(" (LayoutLMv2 model)"),Clo=l(),ds=a("li"),tse=a("strong"),wlo=o("layoutlmv3"),Alo=o(" \u2014 "),bB=a("a"),Llo=o("LayoutLMv3Tokenizer"),ylo=o(" or "),vB=a("a"),xlo=o("LayoutLMv3TokenizerFast"),$lo=o(" (LayoutLMv3 model)"),klo=l(),cs=a("li"),ase=a("strong"),Slo=o("layoutxlm"),Rlo=o(" \u2014 "),FB=a("a"),Plo=o("LayoutXLMTokenizer"),Blo=o(" or "),TB=a("a"),Ilo=o("LayoutXLMTokenizerFast"),Nlo=o(" (LayoutXLM model)"),qlo=l(),fs=a("li"),nse=a("strong"),jlo=o("led"),Dlo=o(" \u2014 "),MB=a("a"),Glo=o("LEDTokenizer"),Olo=o(" or "),EB=a("a"),Vlo=o("LEDTokenizerFast"),Xlo=o(" (LED model)"),zlo=l(),ms=a("li"),sse=a("strong"),Wlo=o("longformer"),Qlo=o(" \u2014 "),CB=a("a"),Hlo=o("LongformerTokenizer"),Ulo=o(" or "),wB=a("a"),Jlo=o("LongformerTokenizerFast"),Ylo=o(" (Longformer model)"),Klo=l(),gs=a("li"),lse=a("strong"),Zlo=o("longt5"),eio=o(" \u2014 "),AB=a("a"),oio=o("T5Tokenizer"),rio=o(" or "),LB=a("a"),tio=o("T5TokenizerFast"),aio=o(" (LongT5 model)"),nio=l(),th=a("li"),ise=a("strong"),sio=o("luke"),lio=o(" \u2014 "),yB=a("a"),iio=o("LukeTokenizer"),dio=o(" (LUKE model)"),cio=l(),hs=a("li"),dse=a("strong"),fio=o("lxmert"),mio=o(" \u2014 "),xB=a("a"),gio=o("LxmertTokenizer"),hio=o(" or "),$B=a("a"),pio=o("LxmertTokenizerFast"),uio=o(" (LXMERT model)"),_io=l(),ah=a("li"),cse=a("strong"),bio=o("m2m_100"),vio=o(" \u2014 "),kB=a("a"),Fio=o("M2M100Tokenizer"),Tio=o(" (M2M100 model)"),Mio=l(),nh=a("li"),fse=a("strong"),Eio=o("marian"),Cio=o(" \u2014 "),SB=a("a"),wio=o("MarianTokenizer"),Aio=o(" (Marian model)"),Lio=l(),ps=a("li"),mse=a("strong"),yio=o("mbart"),xio=o(" \u2014 "),RB=a("a"),$io=o("MBartTokenizer"),kio=o(" or "),PB=a("a"),Sio=o("MBartTokenizerFast"),Rio=o(" (mBART model)"),Pio=l(),us=a("li"),gse=a("strong"),Bio=o("mbart50"),Iio=o(" \u2014 "),BB=a("a"),Nio=o("MBart50Tokenizer"),qio=o(" or "),IB=a("a"),jio=o("MBart50TokenizerFast"),Dio=o(" (mBART-50 model)"),Gio=l(),_s=a("li"),hse=a("strong"),Oio=o("megatron-bert"),Vio=o(" \u2014 "),NB=a("a"),Xio=o("BertTokenizer"),zio=o(" or "),qB=a("a"),Wio=o("BertTokenizerFast"),Qio=o(" (Megatron-BERT model)"),Hio=l(),sh=a("li"),pse=a("strong"),Uio=o("mluke"),Jio=o(" \u2014 "),jB=a("a"),Yio=o("MLukeTokenizer"),Kio=o(" (mLUKE model)"),Zio=l(),bs=a("li"),use=a("strong"),edo=o("mobilebert"),odo=o(" \u2014 "),DB=a("a"),rdo=o("MobileBertTokenizer"),tdo=o(" or "),GB=a("a"),ado=o("MobileBertTokenizerFast"),ndo=o(" (MobileBERT model)"),sdo=l(),vs=a("li"),_se=a("strong"),ldo=o("mpnet"),ido=o(" \u2014 "),OB=a("a"),ddo=o("MPNetTokenizer"),cdo=o(" or "),VB=a("a"),fdo=o("MPNetTokenizerFast"),mdo=o(" (MPNet model)"),gdo=l(),Fs=a("li"),bse=a("strong"),hdo=o("mt5"),pdo=o(" \u2014 "),XB=a("a"),udo=o("MT5Tokenizer"),_do=o(" or "),zB=a("a"),bdo=o("MT5TokenizerFast"),vdo=o(" (MT5 model)"),Fdo=l(),Ts=a("li"),vse=a("strong"),Tdo=o("nystromformer"),Mdo=o(" \u2014 "),WB=a("a"),Edo=o("AlbertTokenizer"),Cdo=o(" or "),QB=a("a"),wdo=o("AlbertTokenizerFast"),Ado=o(" (Nystr\xF6mformer model)"),Ldo=l(),Ms=a("li"),Fse=a("strong"),ydo=o("ofa"),xdo=o(" \u2014 "),HB=a("a"),$do=o("OFATokenizer"),kdo=o(" or "),UB=a("a"),Sdo=o("OFATokenizerFast"),Rdo=o(" (OFA model)"),Pdo=l(),Es=a("li"),Tse=a("strong"),Bdo=o("openai-gpt"),Ido=o(" \u2014 "),JB=a("a"),Ndo=o("OpenAIGPTTokenizer"),qdo=o(" or "),YB=a("a"),jdo=o("OpenAIGPTTokenizerFast"),Ddo=o(" (OpenAI GPT model)"),Gdo=l(),lh=a("li"),Mse=a("strong"),Odo=o("opt"),Vdo=o(" \u2014 "),KB=a("a"),Xdo=o("GPT2Tokenizer"),zdo=o(" (OPT model)"),Wdo=l(),Cs=a("li"),Ese=a("strong"),Qdo=o("pegasus"),Hdo=o(" \u2014 "),ZB=a("a"),Udo=o("PegasusTokenizer"),Jdo=o(" or "),eI=a("a"),Ydo=o("PegasusTokenizerFast"),Kdo=o(" (Pegasus model)"),Zdo=l(),ih=a("li"),Cse=a("strong"),eco=o("perceiver"),oco=o(" \u2014 "),oI=a("a"),rco=o("PerceiverTokenizer"),tco=o(" (Perceiver model)"),aco=l(),dh=a("li"),wse=a("strong"),nco=o("phobert"),sco=o(" \u2014 "),rI=a("a"),lco=o("PhobertTokenizer"),ico=o(" (PhoBERT model)"),dco=l(),ch=a("li"),Ase=a("strong"),cco=o("plbart"),fco=o(" \u2014 "),tI=a("a"),mco=o("PLBartTokenizer"),gco=o(" (PLBart model)"),hco=l(),fh=a("li"),Lse=a("strong"),pco=o("prophetnet"),uco=o(" \u2014 "),aI=a("a"),_co=o("ProphetNetTokenizer"),bco=o(" (ProphetNet model)"),vco=l(),ws=a("li"),yse=a("strong"),Fco=o("qdqbert"),Tco=o(" \u2014 "),nI=a("a"),Mco=o("BertTokenizer"),Eco=o(" or "),sI=a("a"),Cco=o("BertTokenizerFast"),wco=o(" (QDQBert model)"),Aco=l(),mh=a("li"),xse=a("strong"),Lco=o("rag"),yco=o(" \u2014 "),lI=a("a"),xco=o("RagTokenizer"),$co=o(" (RAG model)"),kco=l(),As=a("li"),$se=a("strong"),Sco=o("realm"),Rco=o(" \u2014 "),iI=a("a"),Pco=o("RealmTokenizer"),Bco=o(" or "),dI=a("a"),Ico=o("RealmTokenizerFast"),Nco=o(" (REALM model)"),qco=l(),Ls=a("li"),kse=a("strong"),jco=o("reformer"),Dco=o(" \u2014 "),cI=a("a"),Gco=o("ReformerTokenizer"),Oco=o(" or "),fI=a("a"),Vco=o("ReformerTokenizerFast"),Xco=o(" (Reformer model)"),zco=l(),ys=a("li"),Sse=a("strong"),Wco=o("rembert"),Qco=o(" \u2014 "),mI=a("a"),Hco=o("RemBertTokenizer"),Uco=o(" or "),gI=a("a"),Jco=o("RemBertTokenizerFast"),Yco=o(" (RemBERT model)"),Kco=l(),xs=a("li"),Rse=a("strong"),Zco=o("retribert"),efo=o(" \u2014 "),hI=a("a"),ofo=o("RetriBertTokenizer"),rfo=o(" or "),pI=a("a"),tfo=o("RetriBertTokenizerFast"),afo=o(" (RetriBERT model)"),nfo=l(),$s=a("li"),Pse=a("strong"),sfo=o("roberta"),lfo=o(" \u2014 "),uI=a("a"),ifo=o("RobertaTokenizer"),dfo=o(" or "),_I=a("a"),cfo=o("RobertaTokenizerFast"),ffo=o(" (RoBERTa model)"),mfo=l(),ks=a("li"),Bse=a("strong"),gfo=o("roformer"),hfo=o(" \u2014 "),bI=a("a"),pfo=o("RoFormerTokenizer"),ufo=o(" or "),vI=a("a"),_fo=o("RoFormerTokenizerFast"),bfo=o(" (RoFormer model)"),vfo=l(),gh=a("li"),Ise=a("strong"),Ffo=o("speech_to_text"),Tfo=o(" \u2014 "),FI=a("a"),Mfo=o("Speech2TextTokenizer"),Efo=o(" (Speech2Text model)"),Cfo=l(),hh=a("li"),Nse=a("strong"),wfo=o("speech_to_text_2"),Afo=o(" \u2014 "),TI=a("a"),Lfo=o("Speech2Text2Tokenizer"),yfo=o(" (Speech2Text2 model)"),xfo=l(),Ss=a("li"),qse=a("strong"),$fo=o("splinter"),kfo=o(" \u2014 "),MI=a("a"),Sfo=o("SplinterTokenizer"),Rfo=o(" or "),EI=a("a"),Pfo=o("SplinterTokenizerFast"),Bfo=o(" (Splinter model)"),Ifo=l(),Rs=a("li"),jse=a("strong"),Nfo=o("squeezebert"),qfo=o(" \u2014 "),CI=a("a"),jfo=o("SqueezeBertTokenizer"),Dfo=o(" or "),wI=a("a"),Gfo=o("SqueezeBertTokenizerFast"),Ofo=o(" (SqueezeBERT model)"),Vfo=l(),Ps=a("li"),Dse=a("strong"),Xfo=o("t5"),zfo=o(" \u2014 "),AI=a("a"),Wfo=o("T5Tokenizer"),Qfo=o(" or "),LI=a("a"),Hfo=o("T5TokenizerFast"),Ufo=o(" (T5 model)"),Jfo=l(),ph=a("li"),Gse=a("strong"),Yfo=o("tapas"),Kfo=o(" \u2014 "),yI=a("a"),Zfo=o("TapasTokenizer"),emo=o(" (TAPAS model)"),omo=l(),uh=a("li"),Ose=a("strong"),rmo=o("tapex"),tmo=o(" \u2014 "),xI=a("a"),amo=o("TapexTokenizer"),nmo=o(" (TAPEX model)"),smo=l(),_h=a("li"),Vse=a("strong"),lmo=o("transfo-xl"),imo=o(" \u2014 "),$I=a("a"),dmo=o("TransfoXLTokenizer"),cmo=o(" (Transformer-XL model)"),fmo=l(),Bs=a("li"),Xse=a("strong"),mmo=o("vilt"),gmo=o(" \u2014 "),kI=a("a"),hmo=o("BertTokenizer"),pmo=o(" or "),SI=a("a"),umo=o("BertTokenizerFast"),_mo=o(" (ViLT model)"),bmo=l(),Is=a("li"),zse=a("strong"),vmo=o("visual_bert"),Fmo=o(" \u2014 "),RI=a("a"),Tmo=o("BertTokenizer"),Mmo=o(" or "),PI=a("a"),Emo=o("BertTokenizerFast"),Cmo=o(" (VisualBERT model)"),wmo=l(),bh=a("li"),Wse=a("strong"),Amo=o("wav2vec2"),Lmo=o(" \u2014 "),BI=a("a"),ymo=o("Wav2Vec2CTCTokenizer"),xmo=o(" (Wav2Vec2 model)"),$mo=l(),vh=a("li"),Qse=a("strong"),kmo=o("wav2vec2-conformer"),Smo=o(" \u2014 "),II=a("a"),Rmo=o("Wav2Vec2CTCTokenizer"),Pmo=o(" (Wav2Vec2-Conformer model)"),Bmo=l(),Fh=a("li"),Hse=a("strong"),Imo=o("wav2vec2_phoneme"),Nmo=o(" \u2014 "),NI=a("a"),qmo=o("Wav2Vec2PhonemeCTCTokenizer"),jmo=o(" (Wav2Vec2Phoneme model)"),Dmo=l(),Ns=a("li"),Use=a("strong"),Gmo=o("xglm"),Omo=o(" \u2014 "),qI=a("a"),Vmo=o("XGLMTokenizer"),Xmo=o(" or "),jI=a("a"),zmo=o("XGLMTokenizerFast"),Wmo=o(" (XGLM model)"),Qmo=l(),Th=a("li"),Jse=a("strong"),Hmo=o("xlm"),Umo=o(" \u2014 "),DI=a("a"),Jmo=o("XLMTokenizer"),Ymo=o(" (XLM model)"),Kmo=l(),Mh=a("li"),Yse=a("strong"),Zmo=o("xlm-prophetnet"),ego=o(" \u2014 "),GI=a("a"),ogo=o("XLMProphetNetTokenizer"),rgo=o(" (XLM-ProphetNet model)"),tgo=l(),qs=a("li"),Kse=a("strong"),ago=o("xlm-roberta"),ngo=o(" \u2014 "),OI=a("a"),sgo=o("XLMRobertaTokenizer"),lgo=o(" or "),VI=a("a"),igo=o("XLMRobertaTokenizerFast"),dgo=o(" (XLM-RoBERTa model)"),cgo=l(),js=a("li"),Zse=a("strong"),fgo=o("xlm-roberta-xl"),mgo=o(" \u2014 "),XI=a("a"),ggo=o("RobertaTokenizer"),hgo=o(" or "),zI=a("a"),pgo=o("RobertaTokenizerFast"),ugo=o(" (XLM-RoBERTa-XL model)"),_go=l(),Ds=a("li"),ele=a("strong"),bgo=o("xlnet"),vgo=o(" \u2014 "),WI=a("a"),Fgo=o("XLNetTokenizer"),Tgo=o(" or "),QI=a("a"),Mgo=o("XLNetTokenizerFast"),Ego=o(" (XLNet model)"),Cgo=l(),Gs=a("li"),ole=a("strong"),wgo=o("yoso"),Ago=o(" \u2014 "),HI=a("a"),Lgo=o("AlbertTokenizer"),ygo=o(" or "),UI=a("a"),xgo=o("AlbertTokenizerFast"),$go=o(" (YOSO model)"),kgo=l(),F(Eh.$$.fragment),Sgo=l(),Ch=a("div"),F(R6.$$.fragment),Rgo=l(),rle=a("p"),Pgo=o("Register a new tokenizer in this mapping."),mGe=l(),Si=a("h2"),wh=a("a"),tle=a("span"),F(P6.$$.fragment),Bgo=l(),ale=a("span"),Igo=o("AutoFeatureExtractor"),gGe=l(),Lo=a("div"),F(B6.$$.fragment),Ngo=l(),I6=a("p"),qgo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),JI=a("a"),jgo=o("AutoFeatureExtractor.from_pretrained()"),Dgo=o(" class method."),Ggo=l(),N6=a("p"),Ogo=o("This class cannot be instantiated directly using "),nle=a("code"),Vgo=o("__init__()"),Xgo=o(" (throws an error)."),zgo=l(),He=a("div"),F(q6.$$.fragment),Wgo=l(),sle=a("p"),Qgo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Hgo=l(),ka=a("p"),Ugo=o("The feature extractor class to instantiate is selected based on the "),lle=a("code"),Jgo=o("model_type"),Ygo=o(` property of the config object
(either passed as an argument or loaded from `),ile=a("code"),Kgo=o("pretrained_model_name_or_path"),Zgo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),dle=a("code"),eho=o("pretrained_model_name_or_path"),oho=o(":"),rho=l(),Y=a("ul"),Ah=a("li"),cle=a("strong"),tho=o("beit"),aho=o(" \u2014 "),YI=a("a"),nho=o("BeitFeatureExtractor"),sho=o(" (BEiT model)"),lho=l(),Lh=a("li"),fle=a("strong"),iho=o("clip"),dho=o(" \u2014 "),KI=a("a"),cho=o("CLIPFeatureExtractor"),fho=o(" (CLIP model)"),mho=l(),yh=a("li"),mle=a("strong"),gho=o("convnext"),hho=o(" \u2014 "),ZI=a("a"),pho=o("ConvNextFeatureExtractor"),uho=o(" (ConvNeXT model)"),_ho=l(),xh=a("li"),gle=a("strong"),bho=o("cvt"),vho=o(" \u2014 "),eN=a("a"),Fho=o("ConvNextFeatureExtractor"),Tho=o(" (CvT model)"),Mho=l(),$h=a("li"),hle=a("strong"),Eho=o("data2vec-audio"),Cho=o(" \u2014 "),oN=a("a"),who=o("Wav2Vec2FeatureExtractor"),Aho=o(" (Data2VecAudio model)"),Lho=l(),kh=a("li"),ple=a("strong"),yho=o("data2vec-vision"),xho=o(" \u2014 "),rN=a("a"),$ho=o("BeitFeatureExtractor"),kho=o(" (Data2VecVision model)"),Sho=l(),Sh=a("li"),ule=a("strong"),Rho=o("deit"),Pho=o(" \u2014 "),tN=a("a"),Bho=o("DeiTFeatureExtractor"),Iho=o(" (DeiT model)"),Nho=l(),Rh=a("li"),_le=a("strong"),qho=o("detr"),jho=o(" \u2014 "),aN=a("a"),Dho=o("DetrFeatureExtractor"),Gho=o(" (DETR model)"),Oho=l(),Ph=a("li"),ble=a("strong"),Vho=o("dpt"),Xho=o(" \u2014 "),nN=a("a"),zho=o("DPTFeatureExtractor"),Who=o(" (DPT model)"),Qho=l(),Bh=a("li"),vle=a("strong"),Hho=o("flava"),Uho=o(" \u2014 "),sN=a("a"),Jho=o("FlavaFeatureExtractor"),Yho=o(" (FLAVA model)"),Kho=l(),Ih=a("li"),Fle=a("strong"),Zho=o("glpn"),epo=o(" \u2014 "),lN=a("a"),opo=o("GLPNFeatureExtractor"),rpo=o(" (GLPN model)"),tpo=l(),Nh=a("li"),Tle=a("strong"),apo=o("hubert"),npo=o(" \u2014 "),iN=a("a"),spo=o("Wav2Vec2FeatureExtractor"),lpo=o(" (Hubert model)"),ipo=l(),qh=a("li"),Mle=a("strong"),dpo=o("imagegpt"),cpo=o(" \u2014 "),dN=a("a"),fpo=o("ImageGPTFeatureExtractor"),mpo=o(" (ImageGPT model)"),gpo=l(),jh=a("li"),Ele=a("strong"),hpo=o("layoutlmv2"),ppo=o(" \u2014 "),cN=a("a"),upo=o("LayoutLMv2FeatureExtractor"),_po=o(" (LayoutLMv2 model)"),bpo=l(),Dh=a("li"),Cle=a("strong"),vpo=o("layoutlmv3"),Fpo=o(" \u2014 "),fN=a("a"),Tpo=o("LayoutLMv3FeatureExtractor"),Mpo=o(" (LayoutLMv3 model)"),Epo=l(),Gh=a("li"),wle=a("strong"),Cpo=o("levit"),wpo=o(" \u2014 "),mN=a("a"),Apo=o("LevitFeatureExtractor"),Lpo=o(" (LeViT model)"),ypo=l(),Oh=a("li"),Ale=a("strong"),xpo=o("maskformer"),$po=o(" \u2014 "),gN=a("a"),kpo=o("MaskFormerFeatureExtractor"),Spo=o(" (MaskFormer model)"),Rpo=l(),Vh=a("li"),Lle=a("strong"),Ppo=o("mctct"),Bpo=o(" \u2014 "),hN=a("a"),Ipo=o("MCTCTFeatureExtractor"),Npo=o(" (M-CTC-T model)"),qpo=l(),Xh=a("li"),yle=a("strong"),jpo=o("perceiver"),Dpo=o(" \u2014 "),pN=a("a"),Gpo=o("PerceiverFeatureExtractor"),Opo=o(" (Perceiver model)"),Vpo=l(),zh=a("li"),xle=a("strong"),Xpo=o("poolformer"),zpo=o(" \u2014 "),uN=a("a"),Wpo=o("PoolFormerFeatureExtractor"),Qpo=o(" (PoolFormer model)"),Hpo=l(),Wh=a("li"),$le=a("strong"),Upo=o("regnet"),Jpo=o(" \u2014 "),_N=a("a"),Ypo=o("ConvNextFeatureExtractor"),Kpo=o(" (RegNet model)"),Zpo=l(),Qh=a("li"),kle=a("strong"),euo=o("resnet"),ouo=o(" \u2014 "),bN=a("a"),ruo=o("ConvNextFeatureExtractor"),tuo=o(" (ResNet model)"),auo=l(),Hh=a("li"),Sle=a("strong"),nuo=o("segformer"),suo=o(" \u2014 "),vN=a("a"),luo=o("SegformerFeatureExtractor"),iuo=o(" (SegFormer model)"),duo=l(),Uh=a("li"),Rle=a("strong"),cuo=o("speech_to_text"),fuo=o(" \u2014 "),FN=a("a"),muo=o("Speech2TextFeatureExtractor"),guo=o(" (Speech2Text model)"),huo=l(),Jh=a("li"),Ple=a("strong"),puo=o("swin"),uuo=o(" \u2014 "),TN=a("a"),_uo=o("ViTFeatureExtractor"),buo=o(" (Swin Transformer model)"),vuo=l(),Yh=a("li"),Ble=a("strong"),Fuo=o("van"),Tuo=o(" \u2014 "),MN=a("a"),Muo=o("ConvNextFeatureExtractor"),Euo=o(" (VAN model)"),Cuo=l(),Kh=a("li"),Ile=a("strong"),wuo=o("vilt"),Auo=o(" \u2014 "),EN=a("a"),Luo=o("ViltFeatureExtractor"),yuo=o(" (ViLT model)"),xuo=l(),Zh=a("li"),Nle=a("strong"),$uo=o("vit"),kuo=o(" \u2014 "),CN=a("a"),Suo=o("ViTFeatureExtractor"),Ruo=o(" (ViT model)"),Puo=l(),ep=a("li"),qle=a("strong"),Buo=o("vit_mae"),Iuo=o(" \u2014 "),wN=a("a"),Nuo=o("ViTFeatureExtractor"),quo=o(" (ViTMAE model)"),juo=l(),op=a("li"),jle=a("strong"),Duo=o("wav2vec2"),Guo=o(" \u2014 "),AN=a("a"),Ouo=o("Wav2Vec2FeatureExtractor"),Vuo=o(" (Wav2Vec2 model)"),Xuo=l(),rp=a("li"),Dle=a("strong"),zuo=o("wav2vec2-conformer"),Wuo=o(" \u2014 "),LN=a("a"),Quo=o("Wav2Vec2FeatureExtractor"),Huo=o(" (Wav2Vec2-Conformer model)"),Uuo=l(),tp=a("li"),Gle=a("strong"),Juo=o("yolos"),Yuo=o(" \u2014 "),yN=a("a"),Kuo=o("YolosFeatureExtractor"),Zuo=o(" (YOLOS model)"),e_o=l(),F(ap.$$.fragment),o_o=l(),F(np.$$.fragment),r_o=l(),sp=a("div"),F(j6.$$.fragment),t_o=l(),Ole=a("p"),a_o=o("Register a new feature extractor for this class."),hGe=l(),Ri=a("h2"),lp=a("a"),Vle=a("span"),F(D6.$$.fragment),n_o=l(),Xle=a("span"),s_o=o("AutoProcessor"),pGe=l(),yo=a("div"),F(G6.$$.fragment),l_o=l(),O6=a("p"),i_o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),xN=a("a"),d_o=o("AutoProcessor.from_pretrained()"),c_o=o(" class method."),f_o=l(),V6=a("p"),m_o=o("This class cannot be instantiated directly using "),zle=a("code"),g_o=o("__init__()"),h_o=o(" (throws an error)."),p_o=l(),Ue=a("div"),F(X6.$$.fragment),u_o=l(),Wle=a("p"),__o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),b_o=l(),Pi=a("p"),v_o=o("The processor class to instantiate is selected based on the "),Qle=a("code"),F_o=o("model_type"),T_o=o(` property of the config object (either
passed as an argument or loaded from `),Hle=a("code"),M_o=o("pretrained_model_name_or_path"),E_o=o(" if possible):"),C_o=l(),he=a("ul"),ip=a("li"),Ule=a("strong"),w_o=o("clip"),A_o=o(" \u2014 "),$N=a("a"),L_o=o("CLIPProcessor"),y_o=o(" (CLIP model)"),x_o=l(),dp=a("li"),Jle=a("strong"),$_o=o("flava"),k_o=o(" \u2014 "),Yle=a("code"),S_o=o("FLAVAProcessor"),R_o=o(" (FLAVA model)"),P_o=l(),cp=a("li"),Kle=a("strong"),B_o=o("layoutlmv2"),I_o=o(" \u2014 "),kN=a("a"),N_o=o("LayoutLMv2Processor"),q_o=o(" (LayoutLMv2 model)"),j_o=l(),fp=a("li"),Zle=a("strong"),D_o=o("layoutlmv3"),G_o=o(" \u2014 "),SN=a("a"),O_o=o("LayoutLMv3Processor"),V_o=o(" (LayoutLMv3 model)"),X_o=l(),mp=a("li"),eie=a("strong"),z_o=o("layoutxlm"),W_o=o(" \u2014 "),RN=a("a"),Q_o=o("LayoutXLMProcessor"),H_o=o(" (LayoutXLM model)"),U_o=l(),gp=a("li"),oie=a("strong"),J_o=o("sew"),Y_o=o(" \u2014 "),PN=a("a"),K_o=o("Wav2Vec2Processor"),Z_o=o(" (SEW model)"),e1o=l(),hp=a("li"),rie=a("strong"),o1o=o("sew-d"),r1o=o(" \u2014 "),BN=a("a"),t1o=o("Wav2Vec2Processor"),a1o=o(" (SEW-D model)"),n1o=l(),pp=a("li"),tie=a("strong"),s1o=o("speech_to_text"),l1o=o(" \u2014 "),IN=a("a"),i1o=o("Speech2TextProcessor"),d1o=o(" (Speech2Text model)"),c1o=l(),up=a("li"),aie=a("strong"),f1o=o("speech_to_text_2"),m1o=o(" \u2014 "),NN=a("a"),g1o=o("Speech2Text2Processor"),h1o=o(" (Speech2Text2 model)"),p1o=l(),_p=a("li"),nie=a("strong"),u1o=o("trocr"),_1o=o(" \u2014 "),qN=a("a"),b1o=o("TrOCRProcessor"),v1o=o(" (TrOCR model)"),F1o=l(),bp=a("li"),sie=a("strong"),T1o=o("unispeech"),M1o=o(" \u2014 "),jN=a("a"),E1o=o("Wav2Vec2Processor"),C1o=o(" (UniSpeech model)"),w1o=l(),vp=a("li"),lie=a("strong"),A1o=o("unispeech-sat"),L1o=o(" \u2014 "),DN=a("a"),y1o=o("Wav2Vec2Processor"),x1o=o(" (UniSpeechSat model)"),$1o=l(),Fp=a("li"),iie=a("strong"),k1o=o("vilt"),S1o=o(" \u2014 "),GN=a("a"),R1o=o("ViltProcessor"),P1o=o(" (ViLT model)"),B1o=l(),Tp=a("li"),die=a("strong"),I1o=o("vision-text-dual-encoder"),N1o=o(" \u2014 "),ON=a("a"),q1o=o("VisionTextDualEncoderProcessor"),j1o=o(" (VisionTextDualEncoder model)"),D1o=l(),Mp=a("li"),cie=a("strong"),G1o=o("wav2vec2"),O1o=o(" \u2014 "),VN=a("a"),V1o=o("Wav2Vec2Processor"),X1o=o(" (Wav2Vec2 model)"),z1o=l(),Ep=a("li"),fie=a("strong"),W1o=o("wav2vec2-conformer"),Q1o=o(" \u2014 "),XN=a("a"),H1o=o("Wav2Vec2Processor"),U1o=o(" (Wav2Vec2-Conformer model)"),J1o=l(),Cp=a("li"),mie=a("strong"),Y1o=o("wavlm"),K1o=o(" \u2014 "),zN=a("a"),Z1o=o("Wav2Vec2Processor"),e2o=o(" (WavLM model)"),o2o=l(),F(wp.$$.fragment),r2o=l(),F(Ap.$$.fragment),t2o=l(),Lp=a("div"),F(z6.$$.fragment),a2o=l(),gie=a("p"),n2o=o("Register a new processor for this class."),uGe=l(),Bi=a("h2"),yp=a("a"),hie=a("span"),F(W6.$$.fragment),s2o=l(),pie=a("span"),l2o=o("AutoModel"),_Ge=l(),xo=a("div"),F(Q6.$$.fragment),i2o=l(),Ii=a("p"),d2o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),WN=a("a"),c2o=o("from_pretrained()"),f2o=o(" class method or the "),QN=a("a"),m2o=o("from_config()"),g2o=o(` class
method.`),h2o=l(),H6=a("p"),p2o=o("This class cannot be instantiated directly using "),uie=a("code"),u2o=o("__init__()"),_2o=o(" (throws an error)."),b2o=l(),nt=a("div"),F(U6.$$.fragment),v2o=l(),_ie=a("p"),F2o=o("Instantiates one of the base model classes of the library from a configuration."),T2o=l(),Ni=a("p"),M2o=o(`Note:
Loading a model from its configuration file does `),bie=a("strong"),E2o=o("not"),C2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HN=a("a"),w2o=o("from_pretrained()"),A2o=o(" to load the model weights."),L2o=l(),F(xp.$$.fragment),y2o=l(),Je=a("div"),F(J6.$$.fragment),x2o=l(),vie=a("p"),$2o=o("Instantiate one of the base model classes of the library from a pretrained model."),k2o=l(),Sa=a("p"),S2o=o("The model class to instantiate is selected based on the "),Fie=a("code"),R2o=o("model_type"),P2o=o(` property of the config object (either
passed as an argument or loaded from `),Tie=a("code"),B2o=o("pretrained_model_name_or_path"),I2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=a("code"),N2o=o("pretrained_model_name_or_path"),q2o=o(":"),j2o=l(),y=a("ul"),$p=a("li"),Eie=a("strong"),D2o=o("albert"),G2o=o(" \u2014 "),UN=a("a"),O2o=o("AlbertModel"),V2o=o(" (ALBERT model)"),X2o=l(),kp=a("li"),Cie=a("strong"),z2o=o("bart"),W2o=o(" \u2014 "),JN=a("a"),Q2o=o("BartModel"),H2o=o(" (BART model)"),U2o=l(),Sp=a("li"),wie=a("strong"),J2o=o("beit"),Y2o=o(" \u2014 "),YN=a("a"),K2o=o("BeitModel"),Z2o=o(" (BEiT model)"),ebo=l(),Rp=a("li"),Aie=a("strong"),obo=o("bert"),rbo=o(" \u2014 "),KN=a("a"),tbo=o("BertModel"),abo=o(" (BERT model)"),nbo=l(),Pp=a("li"),Lie=a("strong"),sbo=o("bert-generation"),lbo=o(" \u2014 "),ZN=a("a"),ibo=o("BertGenerationEncoder"),dbo=o(" (Bert Generation model)"),cbo=l(),Bp=a("li"),yie=a("strong"),fbo=o("big_bird"),mbo=o(" \u2014 "),eq=a("a"),gbo=o("BigBirdModel"),hbo=o(" (BigBird model)"),pbo=l(),Ip=a("li"),xie=a("strong"),ubo=o("bigbird_pegasus"),_bo=o(" \u2014 "),oq=a("a"),bbo=o("BigBirdPegasusModel"),vbo=o(" (BigBird-Pegasus model)"),Fbo=l(),Np=a("li"),$ie=a("strong"),Tbo=o("blenderbot"),Mbo=o(" \u2014 "),rq=a("a"),Ebo=o("BlenderbotModel"),Cbo=o(" (Blenderbot model)"),wbo=l(),qp=a("li"),kie=a("strong"),Abo=o("blenderbot-small"),Lbo=o(" \u2014 "),tq=a("a"),ybo=o("BlenderbotSmallModel"),xbo=o(" (BlenderbotSmall model)"),$bo=l(),jp=a("li"),Sie=a("strong"),kbo=o("bloom"),Sbo=o(" \u2014 "),aq=a("a"),Rbo=o("BloomModel"),Pbo=o(" (BLOOM model)"),Bbo=l(),Dp=a("li"),Rie=a("strong"),Ibo=o("camembert"),Nbo=o(" \u2014 "),nq=a("a"),qbo=o("CamembertModel"),jbo=o(" (CamemBERT model)"),Dbo=l(),Gp=a("li"),Pie=a("strong"),Gbo=o("canine"),Obo=o(" \u2014 "),sq=a("a"),Vbo=o("CanineModel"),Xbo=o(" (CANINE model)"),zbo=l(),Op=a("li"),Bie=a("strong"),Wbo=o("clip"),Qbo=o(" \u2014 "),lq=a("a"),Hbo=o("CLIPModel"),Ubo=o(" (CLIP model)"),Jbo=l(),Vp=a("li"),Iie=a("strong"),Ybo=o("convbert"),Kbo=o(" \u2014 "),iq=a("a"),Zbo=o("ConvBertModel"),evo=o(" (ConvBERT model)"),ovo=l(),Xp=a("li"),Nie=a("strong"),rvo=o("convnext"),tvo=o(" \u2014 "),dq=a("a"),avo=o("ConvNextModel"),nvo=o(" (ConvNeXT model)"),svo=l(),zp=a("li"),qie=a("strong"),lvo=o("ctrl"),ivo=o(" \u2014 "),cq=a("a"),dvo=o("CTRLModel"),cvo=o(" (CTRL model)"),fvo=l(),Wp=a("li"),jie=a("strong"),mvo=o("cvt"),gvo=o(" \u2014 "),fq=a("a"),hvo=o("CvtModel"),pvo=o(" (CvT model)"),uvo=l(),Qp=a("li"),Die=a("strong"),_vo=o("data2vec-audio"),bvo=o(" \u2014 "),mq=a("a"),vvo=o("Data2VecAudioModel"),Fvo=o(" (Data2VecAudio model)"),Tvo=l(),Hp=a("li"),Gie=a("strong"),Mvo=o("data2vec-text"),Evo=o(" \u2014 "),gq=a("a"),Cvo=o("Data2VecTextModel"),wvo=o(" (Data2VecText model)"),Avo=l(),Up=a("li"),Oie=a("strong"),Lvo=o("data2vec-vision"),yvo=o(" \u2014 "),hq=a("a"),xvo=o("Data2VecVisionModel"),$vo=o(" (Data2VecVision model)"),kvo=l(),Jp=a("li"),Vie=a("strong"),Svo=o("deberta"),Rvo=o(" \u2014 "),pq=a("a"),Pvo=o("DebertaModel"),Bvo=o(" (DeBERTa model)"),Ivo=l(),Yp=a("li"),Xie=a("strong"),Nvo=o("deberta-v2"),qvo=o(" \u2014 "),uq=a("a"),jvo=o("DebertaV2Model"),Dvo=o(" (DeBERTa-v2 model)"),Gvo=l(),Kp=a("li"),zie=a("strong"),Ovo=o("decision_transformer"),Vvo=o(" \u2014 "),_q=a("a"),Xvo=o("DecisionTransformerModel"),zvo=o(" (Decision Transformer model)"),Wvo=l(),Zp=a("li"),Wie=a("strong"),Qvo=o("deit"),Hvo=o(" \u2014 "),bq=a("a"),Uvo=o("DeiTModel"),Jvo=o(" (DeiT model)"),Yvo=l(),eu=a("li"),Qie=a("strong"),Kvo=o("detr"),Zvo=o(" \u2014 "),vq=a("a"),e0o=o("DetrModel"),o0o=o(" (DETR model)"),r0o=l(),ou=a("li"),Hie=a("strong"),t0o=o("distilbert"),a0o=o(" \u2014 "),Fq=a("a"),n0o=o("DistilBertModel"),s0o=o(" (DistilBERT model)"),l0o=l(),ru=a("li"),Uie=a("strong"),i0o=o("dpr"),d0o=o(" \u2014 "),Tq=a("a"),c0o=o("DPRQuestionEncoder"),f0o=o(" (DPR model)"),m0o=l(),tu=a("li"),Jie=a("strong"),g0o=o("dpt"),h0o=o(" \u2014 "),Mq=a("a"),p0o=o("DPTModel"),u0o=o(" (DPT model)"),_0o=l(),au=a("li"),Yie=a("strong"),b0o=o("electra"),v0o=o(" \u2014 "),Eq=a("a"),F0o=o("ElectraModel"),T0o=o(" (ELECTRA model)"),M0o=l(),nu=a("li"),Kie=a("strong"),E0o=o("flaubert"),C0o=o(" \u2014 "),Cq=a("a"),w0o=o("FlaubertModel"),A0o=o(" (FlauBERT model)"),L0o=l(),su=a("li"),Zie=a("strong"),y0o=o("flava"),x0o=o(" \u2014 "),wq=a("a"),$0o=o("FlavaModel"),k0o=o(" (FLAVA model)"),S0o=l(),lu=a("li"),ede=a("strong"),R0o=o("fnet"),P0o=o(" \u2014 "),Aq=a("a"),B0o=o("FNetModel"),I0o=o(" (FNet model)"),N0o=l(),iu=a("li"),ode=a("strong"),q0o=o("fsmt"),j0o=o(" \u2014 "),Lq=a("a"),D0o=o("FSMTModel"),G0o=o(" (FairSeq Machine-Translation model)"),O0o=l(),Os=a("li"),rde=a("strong"),V0o=o("funnel"),X0o=o(" \u2014 "),yq=a("a"),z0o=o("FunnelModel"),W0o=o(" or "),xq=a("a"),Q0o=o("FunnelBaseModel"),H0o=o(" (Funnel Transformer model)"),U0o=l(),du=a("li"),tde=a("strong"),J0o=o("glpn"),Y0o=o(" \u2014 "),$q=a("a"),K0o=o("GLPNModel"),Z0o=o(" (GLPN model)"),eFo=l(),cu=a("li"),ade=a("strong"),oFo=o("gpt2"),rFo=o(" \u2014 "),kq=a("a"),tFo=o("GPT2Model"),aFo=o(" (OpenAI GPT-2 model)"),nFo=l(),fu=a("li"),nde=a("strong"),sFo=o("gpt_neo"),lFo=o(" \u2014 "),Sq=a("a"),iFo=o("GPTNeoModel"),dFo=o(" (GPT Neo model)"),cFo=l(),mu=a("li"),sde=a("strong"),fFo=o("gpt_neox"),mFo=o(" \u2014 "),Rq=a("a"),gFo=o("GPTNeoXModel"),hFo=o(" (GPT NeoX model)"),pFo=l(),gu=a("li"),lde=a("strong"),uFo=o("gptj"),_Fo=o(" \u2014 "),Pq=a("a"),bFo=o("GPTJModel"),vFo=o(" (GPT-J model)"),FFo=l(),hu=a("li"),ide=a("strong"),TFo=o("hubert"),MFo=o(" \u2014 "),Bq=a("a"),EFo=o("HubertModel"),CFo=o(" (Hubert model)"),wFo=l(),pu=a("li"),dde=a("strong"),AFo=o("ibert"),LFo=o(" \u2014 "),Iq=a("a"),yFo=o("IBertModel"),xFo=o(" (I-BERT model)"),$Fo=l(),uu=a("li"),cde=a("strong"),kFo=o("imagegpt"),SFo=o(" \u2014 "),Nq=a("a"),RFo=o("ImageGPTModel"),PFo=o(" (ImageGPT model)"),BFo=l(),_u=a("li"),fde=a("strong"),IFo=o("layoutlm"),NFo=o(" \u2014 "),qq=a("a"),qFo=o("LayoutLMModel"),jFo=o(" (LayoutLM model)"),DFo=l(),bu=a("li"),mde=a("strong"),GFo=o("layoutlmv2"),OFo=o(" \u2014 "),jq=a("a"),VFo=o("LayoutLMv2Model"),XFo=o(" (LayoutLMv2 model)"),zFo=l(),vu=a("li"),gde=a("strong"),WFo=o("layoutlmv3"),QFo=o(" \u2014 "),Dq=a("a"),HFo=o("LayoutLMv3Model"),UFo=o(" (LayoutLMv3 model)"),JFo=l(),Fu=a("li"),hde=a("strong"),YFo=o("led"),KFo=o(" \u2014 "),Gq=a("a"),ZFo=o("LEDModel"),eTo=o(" (LED model)"),oTo=l(),Tu=a("li"),pde=a("strong"),rTo=o("levit"),tTo=o(" \u2014 "),Oq=a("a"),aTo=o("LevitModel"),nTo=o(" (LeViT model)"),sTo=l(),Mu=a("li"),ude=a("strong"),lTo=o("longformer"),iTo=o(" \u2014 "),Vq=a("a"),dTo=o("LongformerModel"),cTo=o(" (Longformer model)"),fTo=l(),Eu=a("li"),_de=a("strong"),mTo=o("longt5"),gTo=o(" \u2014 "),Xq=a("a"),hTo=o("LongT5Model"),pTo=o(" (LongT5 model)"),uTo=l(),Cu=a("li"),bde=a("strong"),_To=o("luke"),bTo=o(" \u2014 "),zq=a("a"),vTo=o("LukeModel"),FTo=o(" (LUKE model)"),TTo=l(),wu=a("li"),vde=a("strong"),MTo=o("lxmert"),ETo=o(" \u2014 "),Wq=a("a"),CTo=o("LxmertModel"),wTo=o(" (LXMERT model)"),ATo=l(),Au=a("li"),Fde=a("strong"),LTo=o("m2m_100"),yTo=o(" \u2014 "),Qq=a("a"),xTo=o("M2M100Model"),$To=o(" (M2M100 model)"),kTo=l(),Lu=a("li"),Tde=a("strong"),STo=o("marian"),RTo=o(" \u2014 "),Hq=a("a"),PTo=o("MarianModel"),BTo=o(" (Marian model)"),ITo=l(),yu=a("li"),Mde=a("strong"),NTo=o("maskformer"),qTo=o(" \u2014 "),Uq=a("a"),jTo=o("MaskFormerModel"),DTo=o(" (MaskFormer model)"),GTo=l(),xu=a("li"),Ede=a("strong"),OTo=o("mbart"),VTo=o(" \u2014 "),Jq=a("a"),XTo=o("MBartModel"),zTo=o(" (mBART model)"),WTo=l(),$u=a("li"),Cde=a("strong"),QTo=o("mctct"),HTo=o(" \u2014 "),Yq=a("a"),UTo=o("MCTCTModel"),JTo=o(" (M-CTC-T model)"),YTo=l(),ku=a("li"),wde=a("strong"),KTo=o("megatron-bert"),ZTo=o(" \u2014 "),Kq=a("a"),e7o=o("MegatronBertModel"),o7o=o(" (Megatron-BERT model)"),r7o=l(),Su=a("li"),Ade=a("strong"),t7o=o("mobilebert"),a7o=o(" \u2014 "),Zq=a("a"),n7o=o("MobileBertModel"),s7o=o(" (MobileBERT model)"),l7o=l(),Ru=a("li"),Lde=a("strong"),i7o=o("mpnet"),d7o=o(" \u2014 "),ej=a("a"),c7o=o("MPNetModel"),f7o=o(" (MPNet model)"),m7o=l(),Pu=a("li"),yde=a("strong"),g7o=o("mt5"),h7o=o(" \u2014 "),oj=a("a"),p7o=o("MT5Model"),u7o=o(" (MT5 model)"),_7o=l(),Bu=a("li"),xde=a("strong"),b7o=o("nystromformer"),v7o=o(" \u2014 "),rj=a("a"),F7o=o("NystromformerModel"),T7o=o(" (Nystr\xF6mformer model)"),M7o=l(),Iu=a("li"),$de=a("strong"),E7o=o("ofa"),C7o=o(" \u2014 "),tj=a("a"),w7o=o("OFAModel"),A7o=o(" (OFA model)"),L7o=l(),Nu=a("li"),kde=a("strong"),y7o=o("openai-gpt"),x7o=o(" \u2014 "),aj=a("a"),$7o=o("OpenAIGPTModel"),k7o=o(" (OpenAI GPT model)"),S7o=l(),qu=a("li"),Sde=a("strong"),R7o=o("opt"),P7o=o(" \u2014 "),nj=a("a"),B7o=o("OPTModel"),I7o=o(" (OPT model)"),N7o=l(),ju=a("li"),Rde=a("strong"),q7o=o("pegasus"),j7o=o(" \u2014 "),sj=a("a"),D7o=o("PegasusModel"),G7o=o(" (Pegasus model)"),O7o=l(),Du=a("li"),Pde=a("strong"),V7o=o("perceiver"),X7o=o(" \u2014 "),lj=a("a"),z7o=o("PerceiverModel"),W7o=o(" (Perceiver model)"),Q7o=l(),Gu=a("li"),Bde=a("strong"),H7o=o("plbart"),U7o=o(" \u2014 "),ij=a("a"),J7o=o("PLBartModel"),Y7o=o(" (PLBart model)"),K7o=l(),Ou=a("li"),Ide=a("strong"),Z7o=o("poolformer"),e9o=o(" \u2014 "),dj=a("a"),o9o=o("PoolFormerModel"),r9o=o(" (PoolFormer model)"),t9o=l(),Vu=a("li"),Nde=a("strong"),a9o=o("prophetnet"),n9o=o(" \u2014 "),cj=a("a"),s9o=o("ProphetNetModel"),l9o=o(" (ProphetNet model)"),i9o=l(),Xu=a("li"),qde=a("strong"),d9o=o("qdqbert"),c9o=o(" \u2014 "),fj=a("a"),f9o=o("QDQBertModel"),m9o=o(" (QDQBert model)"),g9o=l(),zu=a("li"),jde=a("strong"),h9o=o("reformer"),p9o=o(" \u2014 "),mj=a("a"),u9o=o("ReformerModel"),_9o=o(" (Reformer model)"),b9o=l(),Wu=a("li"),Dde=a("strong"),v9o=o("regnet"),F9o=o(" \u2014 "),gj=a("a"),T9o=o("RegNetModel"),M9o=o(" (RegNet model)"),E9o=l(),Qu=a("li"),Gde=a("strong"),C9o=o("rembert"),w9o=o(" \u2014 "),hj=a("a"),A9o=o("RemBertModel"),L9o=o(" (RemBERT model)"),y9o=l(),Hu=a("li"),Ode=a("strong"),x9o=o("resnet"),$9o=o(" \u2014 "),pj=a("a"),k9o=o("ResNetModel"),S9o=o(" (ResNet model)"),R9o=l(),Uu=a("li"),Vde=a("strong"),P9o=o("retribert"),B9o=o(" \u2014 "),uj=a("a"),I9o=o("RetriBertModel"),N9o=o(" (RetriBERT model)"),q9o=l(),Ju=a("li"),Xde=a("strong"),j9o=o("roberta"),D9o=o(" \u2014 "),_j=a("a"),G9o=o("RobertaModel"),O9o=o(" (RoBERTa model)"),V9o=l(),Yu=a("li"),zde=a("strong"),X9o=o("roformer"),z9o=o(" \u2014 "),bj=a("a"),W9o=o("RoFormerModel"),Q9o=o(" (RoFormer model)"),H9o=l(),Ku=a("li"),Wde=a("strong"),U9o=o("segformer"),J9o=o(" \u2014 "),vj=a("a"),Y9o=o("SegformerModel"),K9o=o(" (SegFormer model)"),Z9o=l(),Zu=a("li"),Qde=a("strong"),eMo=o("sew"),oMo=o(" \u2014 "),Fj=a("a"),rMo=o("SEWModel"),tMo=o(" (SEW model)"),aMo=l(),e_=a("li"),Hde=a("strong"),nMo=o("sew-d"),sMo=o(" \u2014 "),Tj=a("a"),lMo=o("SEWDModel"),iMo=o(" (SEW-D model)"),dMo=l(),o_=a("li"),Ude=a("strong"),cMo=o("speech_to_text"),fMo=o(" \u2014 "),Mj=a("a"),mMo=o("Speech2TextModel"),gMo=o(" (Speech2Text model)"),hMo=l(),r_=a("li"),Jde=a("strong"),pMo=o("splinter"),uMo=o(" \u2014 "),Ej=a("a"),_Mo=o("SplinterModel"),bMo=o(" (Splinter model)"),vMo=l(),t_=a("li"),Yde=a("strong"),FMo=o("squeezebert"),TMo=o(" \u2014 "),Cj=a("a"),MMo=o("SqueezeBertModel"),EMo=o(" (SqueezeBERT model)"),CMo=l(),a_=a("li"),Kde=a("strong"),wMo=o("swin"),AMo=o(" \u2014 "),wj=a("a"),LMo=o("SwinModel"),yMo=o(" (Swin Transformer model)"),xMo=l(),n_=a("li"),Zde=a("strong"),$Mo=o("t5"),kMo=o(" \u2014 "),Aj=a("a"),SMo=o("T5Model"),RMo=o(" (T5 model)"),PMo=l(),s_=a("li"),ece=a("strong"),BMo=o("tapas"),IMo=o(" \u2014 "),Lj=a("a"),NMo=o("TapasModel"),qMo=o(" (TAPAS model)"),jMo=l(),l_=a("li"),oce=a("strong"),DMo=o("trajectory_transformer"),GMo=o(" \u2014 "),yj=a("a"),OMo=o("TrajectoryTransformerModel"),VMo=o(" (Trajectory Transformer model)"),XMo=l(),i_=a("li"),rce=a("strong"),zMo=o("transfo-xl"),WMo=o(" \u2014 "),xj=a("a"),QMo=o("TransfoXLModel"),HMo=o(" (Transformer-XL model)"),UMo=l(),d_=a("li"),tce=a("strong"),JMo=o("unispeech"),YMo=o(" \u2014 "),$j=a("a"),KMo=o("UniSpeechModel"),ZMo=o(" (UniSpeech model)"),e4o=l(),c_=a("li"),ace=a("strong"),o4o=o("unispeech-sat"),r4o=o(" \u2014 "),kj=a("a"),t4o=o("UniSpeechSatModel"),a4o=o(" (UniSpeechSat model)"),n4o=l(),f_=a("li"),nce=a("strong"),s4o=o("van"),l4o=o(" \u2014 "),Sj=a("a"),i4o=o("VanModel"),d4o=o(" (VAN model)"),c4o=l(),m_=a("li"),sce=a("strong"),f4o=o("vilt"),m4o=o(" \u2014 "),Rj=a("a"),g4o=o("ViltModel"),h4o=o(" (ViLT model)"),p4o=l(),g_=a("li"),lce=a("strong"),u4o=o("vision-text-dual-encoder"),_4o=o(" \u2014 "),Pj=a("a"),b4o=o("VisionTextDualEncoderModel"),v4o=o(" (VisionTextDualEncoder model)"),F4o=l(),h_=a("li"),ice=a("strong"),T4o=o("visual_bert"),M4o=o(" \u2014 "),Bj=a("a"),E4o=o("VisualBertModel"),C4o=o(" (VisualBERT model)"),w4o=l(),p_=a("li"),dce=a("strong"),A4o=o("vit"),L4o=o(" \u2014 "),Ij=a("a"),y4o=o("ViTModel"),x4o=o(" (ViT model)"),$4o=l(),u_=a("li"),cce=a("strong"),k4o=o("vit_mae"),S4o=o(" \u2014 "),Nj=a("a"),R4o=o("ViTMAEModel"),P4o=o(" (ViTMAE model)"),B4o=l(),__=a("li"),fce=a("strong"),I4o=o("wav2vec2"),N4o=o(" \u2014 "),qj=a("a"),q4o=o("Wav2Vec2Model"),j4o=o(" (Wav2Vec2 model)"),D4o=l(),b_=a("li"),mce=a("strong"),G4o=o("wav2vec2-conformer"),O4o=o(" \u2014 "),jj=a("a"),V4o=o("Wav2Vec2ConformerModel"),X4o=o(" (Wav2Vec2-Conformer model)"),z4o=l(),v_=a("li"),gce=a("strong"),W4o=o("wavlm"),Q4o=o(" \u2014 "),Dj=a("a"),H4o=o("WavLMModel"),U4o=o(" (WavLM model)"),J4o=l(),F_=a("li"),hce=a("strong"),Y4o=o("xglm"),K4o=o(" \u2014 "),Gj=a("a"),Z4o=o("XGLMModel"),eEo=o(" (XGLM model)"),oEo=l(),T_=a("li"),pce=a("strong"),rEo=o("xlm"),tEo=o(" \u2014 "),Oj=a("a"),aEo=o("XLMModel"),nEo=o(" (XLM model)"),sEo=l(),M_=a("li"),uce=a("strong"),lEo=o("xlm-prophetnet"),iEo=o(" \u2014 "),Vj=a("a"),dEo=o("XLMProphetNetModel"),cEo=o(" (XLM-ProphetNet model)"),fEo=l(),E_=a("li"),_ce=a("strong"),mEo=o("xlm-roberta"),gEo=o(" \u2014 "),Xj=a("a"),hEo=o("XLMRobertaModel"),pEo=o(" (XLM-RoBERTa model)"),uEo=l(),C_=a("li"),bce=a("strong"),_Eo=o("xlm-roberta-xl"),bEo=o(" \u2014 "),zj=a("a"),vEo=o("XLMRobertaXLModel"),FEo=o(" (XLM-RoBERTa-XL model)"),TEo=l(),w_=a("li"),vce=a("strong"),MEo=o("xlnet"),EEo=o(" \u2014 "),Wj=a("a"),CEo=o("XLNetModel"),wEo=o(" (XLNet model)"),AEo=l(),A_=a("li"),Fce=a("strong"),LEo=o("yolos"),yEo=o(" \u2014 "),Qj=a("a"),xEo=o("YolosModel"),$Eo=o(" (YOLOS model)"),kEo=l(),L_=a("li"),Tce=a("strong"),SEo=o("yoso"),REo=o(" \u2014 "),Hj=a("a"),PEo=o("YosoModel"),BEo=o(" (YOSO model)"),IEo=l(),y_=a("p"),NEo=o("The model is set in evaluation mode by default using "),Mce=a("code"),qEo=o("model.eval()"),jEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ece=a("code"),DEo=o("model.train()"),GEo=l(),F(x_.$$.fragment),bGe=l(),qi=a("h2"),$_=a("a"),Cce=a("span"),F(Y6.$$.fragment),OEo=l(),wce=a("span"),VEo=o("AutoModelForPreTraining"),vGe=l(),$o=a("div"),F(K6.$$.fragment),XEo=l(),ji=a("p"),zEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Uj=a("a"),WEo=o("from_pretrained()"),QEo=o(" class method or the "),Jj=a("a"),HEo=o("from_config()"),UEo=o(` class
method.`),JEo=l(),Z6=a("p"),YEo=o("This class cannot be instantiated directly using "),Ace=a("code"),KEo=o("__init__()"),ZEo=o(" (throws an error)."),eCo=l(),st=a("div"),F(eL.$$.fragment),oCo=l(),Lce=a("p"),rCo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tCo=l(),Di=a("p"),aCo=o(`Note:
Loading a model from its configuration file does `),yce=a("strong"),nCo=o("not"),sCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yj=a("a"),lCo=o("from_pretrained()"),iCo=o(" to load the model weights."),dCo=l(),F(k_.$$.fragment),cCo=l(),Ye=a("div"),F(oL.$$.fragment),fCo=l(),xce=a("p"),mCo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gCo=l(),Ra=a("p"),hCo=o("The model class to instantiate is selected based on the "),$ce=a("code"),pCo=o("model_type"),uCo=o(` property of the config object (either
passed as an argument or loaded from `),kce=a("code"),_Co=o("pretrained_model_name_or_path"),bCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=a("code"),vCo=o("pretrained_model_name_or_path"),FCo=o(":"),TCo=l(),G=a("ul"),S_=a("li"),Rce=a("strong"),MCo=o("albert"),ECo=o(" \u2014 "),Kj=a("a"),CCo=o("AlbertForPreTraining"),wCo=o(" (ALBERT model)"),ACo=l(),R_=a("li"),Pce=a("strong"),LCo=o("bart"),yCo=o(" \u2014 "),Zj=a("a"),xCo=o("BartForConditionalGeneration"),$Co=o(" (BART model)"),kCo=l(),P_=a("li"),Bce=a("strong"),SCo=o("bert"),RCo=o(" \u2014 "),eD=a("a"),PCo=o("BertForPreTraining"),BCo=o(" (BERT model)"),ICo=l(),B_=a("li"),Ice=a("strong"),NCo=o("big_bird"),qCo=o(" \u2014 "),oD=a("a"),jCo=o("BigBirdForPreTraining"),DCo=o(" (BigBird model)"),GCo=l(),I_=a("li"),Nce=a("strong"),OCo=o("bloom"),VCo=o(" \u2014 "),rD=a("a"),XCo=o("BloomForCausalLM"),zCo=o(" (BLOOM model)"),WCo=l(),N_=a("li"),qce=a("strong"),QCo=o("camembert"),HCo=o(" \u2014 "),tD=a("a"),UCo=o("CamembertForMaskedLM"),JCo=o(" (CamemBERT model)"),YCo=l(),q_=a("li"),jce=a("strong"),KCo=o("ctrl"),ZCo=o(" \u2014 "),aD=a("a"),e5o=o("CTRLLMHeadModel"),o5o=o(" (CTRL model)"),r5o=l(),j_=a("li"),Dce=a("strong"),t5o=o("data2vec-text"),a5o=o(" \u2014 "),nD=a("a"),n5o=o("Data2VecTextForMaskedLM"),s5o=o(" (Data2VecText model)"),l5o=l(),D_=a("li"),Gce=a("strong"),i5o=o("deberta"),d5o=o(" \u2014 "),sD=a("a"),c5o=o("DebertaForMaskedLM"),f5o=o(" (DeBERTa model)"),m5o=l(),G_=a("li"),Oce=a("strong"),g5o=o("deberta-v2"),h5o=o(" \u2014 "),lD=a("a"),p5o=o("DebertaV2ForMaskedLM"),u5o=o(" (DeBERTa-v2 model)"),_5o=l(),O_=a("li"),Vce=a("strong"),b5o=o("distilbert"),v5o=o(" \u2014 "),iD=a("a"),F5o=o("DistilBertForMaskedLM"),T5o=o(" (DistilBERT model)"),M5o=l(),V_=a("li"),Xce=a("strong"),E5o=o("electra"),C5o=o(" \u2014 "),dD=a("a"),w5o=o("ElectraForPreTraining"),A5o=o(" (ELECTRA model)"),L5o=l(),X_=a("li"),zce=a("strong"),y5o=o("flaubert"),x5o=o(" \u2014 "),cD=a("a"),$5o=o("FlaubertWithLMHeadModel"),k5o=o(" (FlauBERT model)"),S5o=l(),z_=a("li"),Wce=a("strong"),R5o=o("flava"),P5o=o(" \u2014 "),fD=a("a"),B5o=o("FlavaForPreTraining"),I5o=o(" (FLAVA model)"),N5o=l(),W_=a("li"),Qce=a("strong"),q5o=o("fnet"),j5o=o(" \u2014 "),mD=a("a"),D5o=o("FNetForPreTraining"),G5o=o(" (FNet model)"),O5o=l(),Q_=a("li"),Hce=a("strong"),V5o=o("fsmt"),X5o=o(" \u2014 "),gD=a("a"),z5o=o("FSMTForConditionalGeneration"),W5o=o(" (FairSeq Machine-Translation model)"),Q5o=l(),H_=a("li"),Uce=a("strong"),H5o=o("funnel"),U5o=o(" \u2014 "),hD=a("a"),J5o=o("FunnelForPreTraining"),Y5o=o(" (Funnel Transformer model)"),K5o=l(),U_=a("li"),Jce=a("strong"),Z5o=o("gpt2"),e3o=o(" \u2014 "),pD=a("a"),o3o=o("GPT2LMHeadModel"),r3o=o(" (OpenAI GPT-2 model)"),t3o=l(),J_=a("li"),Yce=a("strong"),a3o=o("ibert"),n3o=o(" \u2014 "),uD=a("a"),s3o=o("IBertForMaskedLM"),l3o=o(" (I-BERT model)"),i3o=l(),Y_=a("li"),Kce=a("strong"),d3o=o("layoutlm"),c3o=o(" \u2014 "),_D=a("a"),f3o=o("LayoutLMForMaskedLM"),m3o=o(" (LayoutLM model)"),g3o=l(),K_=a("li"),Zce=a("strong"),h3o=o("longformer"),p3o=o(" \u2014 "),bD=a("a"),u3o=o("LongformerForMaskedLM"),_3o=o(" (Longformer model)"),b3o=l(),Z_=a("li"),efe=a("strong"),v3o=o("lxmert"),F3o=o(" \u2014 "),vD=a("a"),T3o=o("LxmertForPreTraining"),M3o=o(" (LXMERT model)"),E3o=l(),e1=a("li"),ofe=a("strong"),C3o=o("megatron-bert"),w3o=o(" \u2014 "),FD=a("a"),A3o=o("MegatronBertForPreTraining"),L3o=o(" (Megatron-BERT model)"),y3o=l(),o1=a("li"),rfe=a("strong"),x3o=o("mobilebert"),$3o=o(" \u2014 "),TD=a("a"),k3o=o("MobileBertForPreTraining"),S3o=o(" (MobileBERT model)"),R3o=l(),r1=a("li"),tfe=a("strong"),P3o=o("mpnet"),B3o=o(" \u2014 "),MD=a("a"),I3o=o("MPNetForMaskedLM"),N3o=o(" (MPNet model)"),q3o=l(),t1=a("li"),afe=a("strong"),j3o=o("openai-gpt"),D3o=o(" \u2014 "),ED=a("a"),G3o=o("OpenAIGPTLMHeadModel"),O3o=o(" (OpenAI GPT model)"),V3o=l(),a1=a("li"),nfe=a("strong"),X3o=o("retribert"),z3o=o(" \u2014 "),CD=a("a"),W3o=o("RetriBertModel"),Q3o=o(" (RetriBERT model)"),H3o=l(),n1=a("li"),sfe=a("strong"),U3o=o("roberta"),J3o=o(" \u2014 "),wD=a("a"),Y3o=o("RobertaForMaskedLM"),K3o=o(" (RoBERTa model)"),Z3o=l(),s1=a("li"),lfe=a("strong"),ewo=o("splinter"),owo=o(" \u2014 "),AD=a("a"),rwo=o("SplinterForPreTraining"),two=o(" (Splinter model)"),awo=l(),l1=a("li"),ife=a("strong"),nwo=o("squeezebert"),swo=o(" \u2014 "),LD=a("a"),lwo=o("SqueezeBertForMaskedLM"),iwo=o(" (SqueezeBERT model)"),dwo=l(),i1=a("li"),dfe=a("strong"),cwo=o("t5"),fwo=o(" \u2014 "),yD=a("a"),mwo=o("T5ForConditionalGeneration"),gwo=o(" (T5 model)"),hwo=l(),d1=a("li"),cfe=a("strong"),pwo=o("tapas"),uwo=o(" \u2014 "),xD=a("a"),_wo=o("TapasForMaskedLM"),bwo=o(" (TAPAS model)"),vwo=l(),c1=a("li"),ffe=a("strong"),Fwo=o("transfo-xl"),Two=o(" \u2014 "),$D=a("a"),Mwo=o("TransfoXLLMHeadModel"),Ewo=o(" (Transformer-XL model)"),Cwo=l(),f1=a("li"),mfe=a("strong"),wwo=o("unispeech"),Awo=o(" \u2014 "),kD=a("a"),Lwo=o("UniSpeechForPreTraining"),ywo=o(" (UniSpeech model)"),xwo=l(),m1=a("li"),gfe=a("strong"),$wo=o("unispeech-sat"),kwo=o(" \u2014 "),SD=a("a"),Swo=o("UniSpeechSatForPreTraining"),Rwo=o(" (UniSpeechSat model)"),Pwo=l(),g1=a("li"),hfe=a("strong"),Bwo=o("visual_bert"),Iwo=o(" \u2014 "),RD=a("a"),Nwo=o("VisualBertForPreTraining"),qwo=o(" (VisualBERT model)"),jwo=l(),h1=a("li"),pfe=a("strong"),Dwo=o("vit_mae"),Gwo=o(" \u2014 "),PD=a("a"),Owo=o("ViTMAEForPreTraining"),Vwo=o(" (ViTMAE model)"),Xwo=l(),p1=a("li"),ufe=a("strong"),zwo=o("wav2vec2"),Wwo=o(" \u2014 "),BD=a("a"),Qwo=o("Wav2Vec2ForPreTraining"),Hwo=o(" (Wav2Vec2 model)"),Uwo=l(),u1=a("li"),_fe=a("strong"),Jwo=o("wav2vec2-conformer"),Ywo=o(" \u2014 "),ID=a("a"),Kwo=o("Wav2Vec2ConformerForPreTraining"),Zwo=o(" (Wav2Vec2-Conformer model)"),eAo=l(),_1=a("li"),bfe=a("strong"),oAo=o("xlm"),rAo=o(" \u2014 "),ND=a("a"),tAo=o("XLMWithLMHeadModel"),aAo=o(" (XLM model)"),nAo=l(),b1=a("li"),vfe=a("strong"),sAo=o("xlm-roberta"),lAo=o(" \u2014 "),qD=a("a"),iAo=o("XLMRobertaForMaskedLM"),dAo=o(" (XLM-RoBERTa model)"),cAo=l(),v1=a("li"),Ffe=a("strong"),fAo=o("xlm-roberta-xl"),mAo=o(" \u2014 "),jD=a("a"),gAo=o("XLMRobertaXLForMaskedLM"),hAo=o(" (XLM-RoBERTa-XL model)"),pAo=l(),F1=a("li"),Tfe=a("strong"),uAo=o("xlnet"),_Ao=o(" \u2014 "),DD=a("a"),bAo=o("XLNetLMHeadModel"),vAo=o(" (XLNet model)"),FAo=l(),T1=a("p"),TAo=o("The model is set in evaluation mode by default using "),Mfe=a("code"),MAo=o("model.eval()"),EAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Efe=a("code"),CAo=o("model.train()"),wAo=l(),F(M1.$$.fragment),FGe=l(),Gi=a("h2"),E1=a("a"),Cfe=a("span"),F(rL.$$.fragment),AAo=l(),wfe=a("span"),LAo=o("AutoModelForCausalLM"),TGe=l(),ko=a("div"),F(tL.$$.fragment),yAo=l(),Oi=a("p"),xAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GD=a("a"),$Ao=o("from_pretrained()"),kAo=o(" class method or the "),OD=a("a"),SAo=o("from_config()"),RAo=o(` class
method.`),PAo=l(),aL=a("p"),BAo=o("This class cannot be instantiated directly using "),Afe=a("code"),IAo=o("__init__()"),NAo=o(" (throws an error)."),qAo=l(),lt=a("div"),F(nL.$$.fragment),jAo=l(),Lfe=a("p"),DAo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),GAo=l(),Vi=a("p"),OAo=o(`Note:
Loading a model from its configuration file does `),yfe=a("strong"),VAo=o("not"),XAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=a("a"),zAo=o("from_pretrained()"),WAo=o(" to load the model weights."),QAo=l(),F(C1.$$.fragment),HAo=l(),Ke=a("div"),F(sL.$$.fragment),UAo=l(),xfe=a("p"),JAo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),YAo=l(),Pa=a("p"),KAo=o("The model class to instantiate is selected based on the "),$fe=a("code"),ZAo=o("model_type"),e6o=o(` property of the config object (either
passed as an argument or loaded from `),kfe=a("code"),o6o=o("pretrained_model_name_or_path"),r6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=a("code"),t6o=o("pretrained_model_name_or_path"),a6o=o(":"),n6o=l(),z=a("ul"),w1=a("li"),Rfe=a("strong"),s6o=o("bart"),l6o=o(" \u2014 "),XD=a("a"),i6o=o("BartForCausalLM"),d6o=o(" (BART model)"),c6o=l(),A1=a("li"),Pfe=a("strong"),f6o=o("bert"),m6o=o(" \u2014 "),zD=a("a"),g6o=o("BertLMHeadModel"),h6o=o(" (BERT model)"),p6o=l(),L1=a("li"),Bfe=a("strong"),u6o=o("bert-generation"),_6o=o(" \u2014 "),WD=a("a"),b6o=o("BertGenerationDecoder"),v6o=o(" (Bert Generation model)"),F6o=l(),y1=a("li"),Ife=a("strong"),T6o=o("big_bird"),M6o=o(" \u2014 "),QD=a("a"),E6o=o("BigBirdForCausalLM"),C6o=o(" (BigBird model)"),w6o=l(),x1=a("li"),Nfe=a("strong"),A6o=o("bigbird_pegasus"),L6o=o(" \u2014 "),HD=a("a"),y6o=o("BigBirdPegasusForCausalLM"),x6o=o(" (BigBird-Pegasus model)"),$6o=l(),$1=a("li"),qfe=a("strong"),k6o=o("blenderbot"),S6o=o(" \u2014 "),UD=a("a"),R6o=o("BlenderbotForCausalLM"),P6o=o(" (Blenderbot model)"),B6o=l(),k1=a("li"),jfe=a("strong"),I6o=o("blenderbot-small"),N6o=o(" \u2014 "),JD=a("a"),q6o=o("BlenderbotSmallForCausalLM"),j6o=o(" (BlenderbotSmall model)"),D6o=l(),S1=a("li"),Dfe=a("strong"),G6o=o("bloom"),O6o=o(" \u2014 "),YD=a("a"),V6o=o("BloomForCausalLM"),X6o=o(" (BLOOM model)"),z6o=l(),R1=a("li"),Gfe=a("strong"),W6o=o("camembert"),Q6o=o(" \u2014 "),KD=a("a"),H6o=o("CamembertForCausalLM"),U6o=o(" (CamemBERT model)"),J6o=l(),P1=a("li"),Ofe=a("strong"),Y6o=o("ctrl"),K6o=o(" \u2014 "),ZD=a("a"),Z6o=o("CTRLLMHeadModel"),eLo=o(" (CTRL model)"),oLo=l(),B1=a("li"),Vfe=a("strong"),rLo=o("data2vec-text"),tLo=o(" \u2014 "),eG=a("a"),aLo=o("Data2VecTextForCausalLM"),nLo=o(" (Data2VecText model)"),sLo=l(),I1=a("li"),Xfe=a("strong"),lLo=o("electra"),iLo=o(" \u2014 "),oG=a("a"),dLo=o("ElectraForCausalLM"),cLo=o(" (ELECTRA model)"),fLo=l(),N1=a("li"),zfe=a("strong"),mLo=o("gpt2"),gLo=o(" \u2014 "),rG=a("a"),hLo=o("GPT2LMHeadModel"),pLo=o(" (OpenAI GPT-2 model)"),uLo=l(),q1=a("li"),Wfe=a("strong"),_Lo=o("gpt_neo"),bLo=o(" \u2014 "),tG=a("a"),vLo=o("GPTNeoForCausalLM"),FLo=o(" (GPT Neo model)"),TLo=l(),j1=a("li"),Qfe=a("strong"),MLo=o("gpt_neox"),ELo=o(" \u2014 "),aG=a("a"),CLo=o("GPTNeoXForCausalLM"),wLo=o(" (GPT NeoX model)"),ALo=l(),D1=a("li"),Hfe=a("strong"),LLo=o("gptj"),yLo=o(" \u2014 "),nG=a("a"),xLo=o("GPTJForCausalLM"),$Lo=o(" (GPT-J model)"),kLo=l(),G1=a("li"),Ufe=a("strong"),SLo=o("marian"),RLo=o(" \u2014 "),sG=a("a"),PLo=o("MarianForCausalLM"),BLo=o(" (Marian model)"),ILo=l(),O1=a("li"),Jfe=a("strong"),NLo=o("mbart"),qLo=o(" \u2014 "),lG=a("a"),jLo=o("MBartForCausalLM"),DLo=o(" (mBART model)"),GLo=l(),V1=a("li"),Yfe=a("strong"),OLo=o("megatron-bert"),VLo=o(" \u2014 "),iG=a("a"),XLo=o("MegatronBertForCausalLM"),zLo=o(" (Megatron-BERT model)"),WLo=l(),X1=a("li"),Kfe=a("strong"),QLo=o("openai-gpt"),HLo=o(" \u2014 "),dG=a("a"),ULo=o("OpenAIGPTLMHeadModel"),JLo=o(" (OpenAI GPT model)"),YLo=l(),z1=a("li"),Zfe=a("strong"),KLo=o("opt"),ZLo=o(" \u2014 "),cG=a("a"),eyo=o("OPTForCausalLM"),oyo=o(" (OPT model)"),ryo=l(),W1=a("li"),eme=a("strong"),tyo=o("pegasus"),ayo=o(" \u2014 "),fG=a("a"),nyo=o("PegasusForCausalLM"),syo=o(" (Pegasus model)"),lyo=l(),Q1=a("li"),ome=a("strong"),iyo=o("plbart"),dyo=o(" \u2014 "),mG=a("a"),cyo=o("PLBartForCausalLM"),fyo=o(" (PLBart model)"),myo=l(),H1=a("li"),rme=a("strong"),gyo=o("prophetnet"),hyo=o(" \u2014 "),gG=a("a"),pyo=o("ProphetNetForCausalLM"),uyo=o(" (ProphetNet model)"),_yo=l(),U1=a("li"),tme=a("strong"),byo=o("qdqbert"),vyo=o(" \u2014 "),hG=a("a"),Fyo=o("QDQBertLMHeadModel"),Tyo=o(" (QDQBert model)"),Myo=l(),J1=a("li"),ame=a("strong"),Eyo=o("reformer"),Cyo=o(" \u2014 "),pG=a("a"),wyo=o("ReformerModelWithLMHead"),Ayo=o(" (Reformer model)"),Lyo=l(),Y1=a("li"),nme=a("strong"),yyo=o("rembert"),xyo=o(" \u2014 "),uG=a("a"),$yo=o("RemBertForCausalLM"),kyo=o(" (RemBERT model)"),Syo=l(),K1=a("li"),sme=a("strong"),Ryo=o("roberta"),Pyo=o(" \u2014 "),_G=a("a"),Byo=o("RobertaForCausalLM"),Iyo=o(" (RoBERTa model)"),Nyo=l(),Z1=a("li"),lme=a("strong"),qyo=o("roformer"),jyo=o(" \u2014 "),bG=a("a"),Dyo=o("RoFormerForCausalLM"),Gyo=o(" (RoFormer model)"),Oyo=l(),e2=a("li"),ime=a("strong"),Vyo=o("speech_to_text_2"),Xyo=o(" \u2014 "),vG=a("a"),zyo=o("Speech2Text2ForCausalLM"),Wyo=o(" (Speech2Text2 model)"),Qyo=l(),o2=a("li"),dme=a("strong"),Hyo=o("transfo-xl"),Uyo=o(" \u2014 "),FG=a("a"),Jyo=o("TransfoXLLMHeadModel"),Yyo=o(" (Transformer-XL model)"),Kyo=l(),r2=a("li"),cme=a("strong"),Zyo=o("trocr"),e8o=o(" \u2014 "),TG=a("a"),o8o=o("TrOCRForCausalLM"),r8o=o(" (TrOCR model)"),t8o=l(),t2=a("li"),fme=a("strong"),a8o=o("xglm"),n8o=o(" \u2014 "),MG=a("a"),s8o=o("XGLMForCausalLM"),l8o=o(" (XGLM model)"),i8o=l(),a2=a("li"),mme=a("strong"),d8o=o("xlm"),c8o=o(" \u2014 "),EG=a("a"),f8o=o("XLMWithLMHeadModel"),m8o=o(" (XLM model)"),g8o=l(),n2=a("li"),gme=a("strong"),h8o=o("xlm-prophetnet"),p8o=o(" \u2014 "),CG=a("a"),u8o=o("XLMProphetNetForCausalLM"),_8o=o(" (XLM-ProphetNet model)"),b8o=l(),s2=a("li"),hme=a("strong"),v8o=o("xlm-roberta"),F8o=o(" \u2014 "),wG=a("a"),T8o=o("XLMRobertaForCausalLM"),M8o=o(" (XLM-RoBERTa model)"),E8o=l(),l2=a("li"),pme=a("strong"),C8o=o("xlm-roberta-xl"),w8o=o(" \u2014 "),AG=a("a"),A8o=o("XLMRobertaXLForCausalLM"),L8o=o(" (XLM-RoBERTa-XL model)"),y8o=l(),i2=a("li"),ume=a("strong"),x8o=o("xlnet"),$8o=o(" \u2014 "),LG=a("a"),k8o=o("XLNetLMHeadModel"),S8o=o(" (XLNet model)"),R8o=l(),d2=a("p"),P8o=o("The model is set in evaluation mode by default using "),_me=a("code"),B8o=o("model.eval()"),I8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bme=a("code"),N8o=o("model.train()"),q8o=l(),F(c2.$$.fragment),MGe=l(),Xi=a("h2"),f2=a("a"),vme=a("span"),F(lL.$$.fragment),j8o=l(),Fme=a("span"),D8o=o("AutoModelForMaskedLM"),EGe=l(),So=a("div"),F(iL.$$.fragment),G8o=l(),zi=a("p"),O8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yG=a("a"),V8o=o("from_pretrained()"),X8o=o(" class method or the "),xG=a("a"),z8o=o("from_config()"),W8o=o(` class
method.`),Q8o=l(),dL=a("p"),H8o=o("This class cannot be instantiated directly using "),Tme=a("code"),U8o=o("__init__()"),J8o=o(" (throws an error)."),Y8o=l(),it=a("div"),F(cL.$$.fragment),K8o=l(),Mme=a("p"),Z8o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),exo=l(),Wi=a("p"),oxo=o(`Note:
Loading a model from its configuration file does `),Eme=a("strong"),rxo=o("not"),txo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$G=a("a"),axo=o("from_pretrained()"),nxo=o(" to load the model weights."),sxo=l(),F(m2.$$.fragment),lxo=l(),Ze=a("div"),F(fL.$$.fragment),ixo=l(),Cme=a("p"),dxo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cxo=l(),Ba=a("p"),fxo=o("The model class to instantiate is selected based on the "),wme=a("code"),mxo=o("model_type"),gxo=o(` property of the config object (either
passed as an argument or loaded from `),Ame=a("code"),hxo=o("pretrained_model_name_or_path"),pxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=a("code"),uxo=o("pretrained_model_name_or_path"),_xo=o(":"),bxo=l(),Q=a("ul"),g2=a("li"),yme=a("strong"),vxo=o("albert"),Fxo=o(" \u2014 "),kG=a("a"),Txo=o("AlbertForMaskedLM"),Mxo=o(" (ALBERT model)"),Exo=l(),h2=a("li"),xme=a("strong"),Cxo=o("bart"),wxo=o(" \u2014 "),SG=a("a"),Axo=o("BartForConditionalGeneration"),Lxo=o(" (BART model)"),yxo=l(),p2=a("li"),$me=a("strong"),xxo=o("bert"),$xo=o(" \u2014 "),RG=a("a"),kxo=o("BertForMaskedLM"),Sxo=o(" (BERT model)"),Rxo=l(),u2=a("li"),kme=a("strong"),Pxo=o("big_bird"),Bxo=o(" \u2014 "),PG=a("a"),Ixo=o("BigBirdForMaskedLM"),Nxo=o(" (BigBird model)"),qxo=l(),_2=a("li"),Sme=a("strong"),jxo=o("camembert"),Dxo=o(" \u2014 "),BG=a("a"),Gxo=o("CamembertForMaskedLM"),Oxo=o(" (CamemBERT model)"),Vxo=l(),b2=a("li"),Rme=a("strong"),Xxo=o("convbert"),zxo=o(" \u2014 "),IG=a("a"),Wxo=o("ConvBertForMaskedLM"),Qxo=o(" (ConvBERT model)"),Hxo=l(),v2=a("li"),Pme=a("strong"),Uxo=o("data2vec-text"),Jxo=o(" \u2014 "),NG=a("a"),Yxo=o("Data2VecTextForMaskedLM"),Kxo=o(" (Data2VecText model)"),Zxo=l(),F2=a("li"),Bme=a("strong"),e$o=o("deberta"),o$o=o(" \u2014 "),qG=a("a"),r$o=o("DebertaForMaskedLM"),t$o=o(" (DeBERTa model)"),a$o=l(),T2=a("li"),Ime=a("strong"),n$o=o("deberta-v2"),s$o=o(" \u2014 "),jG=a("a"),l$o=o("DebertaV2ForMaskedLM"),i$o=o(" (DeBERTa-v2 model)"),d$o=l(),M2=a("li"),Nme=a("strong"),c$o=o("distilbert"),f$o=o(" \u2014 "),DG=a("a"),m$o=o("DistilBertForMaskedLM"),g$o=o(" (DistilBERT model)"),h$o=l(),E2=a("li"),qme=a("strong"),p$o=o("electra"),u$o=o(" \u2014 "),GG=a("a"),_$o=o("ElectraForMaskedLM"),b$o=o(" (ELECTRA model)"),v$o=l(),C2=a("li"),jme=a("strong"),F$o=o("flaubert"),T$o=o(" \u2014 "),OG=a("a"),M$o=o("FlaubertWithLMHeadModel"),E$o=o(" (FlauBERT model)"),C$o=l(),w2=a("li"),Dme=a("strong"),w$o=o("fnet"),A$o=o(" \u2014 "),VG=a("a"),L$o=o("FNetForMaskedLM"),y$o=o(" (FNet model)"),x$o=l(),A2=a("li"),Gme=a("strong"),$$o=o("funnel"),k$o=o(" \u2014 "),XG=a("a"),S$o=o("FunnelForMaskedLM"),R$o=o(" (Funnel Transformer model)"),P$o=l(),L2=a("li"),Ome=a("strong"),B$o=o("ibert"),I$o=o(" \u2014 "),zG=a("a"),N$o=o("IBertForMaskedLM"),q$o=o(" (I-BERT model)"),j$o=l(),y2=a("li"),Vme=a("strong"),D$o=o("layoutlm"),G$o=o(" \u2014 "),WG=a("a"),O$o=o("LayoutLMForMaskedLM"),V$o=o(" (LayoutLM model)"),X$o=l(),x2=a("li"),Xme=a("strong"),z$o=o("longformer"),W$o=o(" \u2014 "),QG=a("a"),Q$o=o("LongformerForMaskedLM"),H$o=o(" (Longformer model)"),U$o=l(),$2=a("li"),zme=a("strong"),J$o=o("luke"),Y$o=o(" \u2014 "),HG=a("a"),K$o=o("LukeForMaskedLM"),Z$o=o(" (LUKE model)"),eko=l(),k2=a("li"),Wme=a("strong"),oko=o("mbart"),rko=o(" \u2014 "),UG=a("a"),tko=o("MBartForConditionalGeneration"),ako=o(" (mBART model)"),nko=l(),S2=a("li"),Qme=a("strong"),sko=o("megatron-bert"),lko=o(" \u2014 "),JG=a("a"),iko=o("MegatronBertForMaskedLM"),dko=o(" (Megatron-BERT model)"),cko=l(),R2=a("li"),Hme=a("strong"),fko=o("mobilebert"),mko=o(" \u2014 "),YG=a("a"),gko=o("MobileBertForMaskedLM"),hko=o(" (MobileBERT model)"),pko=l(),P2=a("li"),Ume=a("strong"),uko=o("mpnet"),_ko=o(" \u2014 "),KG=a("a"),bko=o("MPNetForMaskedLM"),vko=o(" (MPNet model)"),Fko=l(),B2=a("li"),Jme=a("strong"),Tko=o("nystromformer"),Mko=o(" \u2014 "),ZG=a("a"),Eko=o("NystromformerForMaskedLM"),Cko=o(" (Nystr\xF6mformer model)"),wko=l(),I2=a("li"),Yme=a("strong"),Ako=o("perceiver"),Lko=o(" \u2014 "),eO=a("a"),yko=o("PerceiverForMaskedLM"),xko=o(" (Perceiver model)"),$ko=l(),N2=a("li"),Kme=a("strong"),kko=o("qdqbert"),Sko=o(" \u2014 "),oO=a("a"),Rko=o("QDQBertForMaskedLM"),Pko=o(" (QDQBert model)"),Bko=l(),q2=a("li"),Zme=a("strong"),Iko=o("reformer"),Nko=o(" \u2014 "),rO=a("a"),qko=o("ReformerForMaskedLM"),jko=o(" (Reformer model)"),Dko=l(),j2=a("li"),ege=a("strong"),Gko=o("rembert"),Oko=o(" \u2014 "),tO=a("a"),Vko=o("RemBertForMaskedLM"),Xko=o(" (RemBERT model)"),zko=l(),D2=a("li"),oge=a("strong"),Wko=o("roberta"),Qko=o(" \u2014 "),aO=a("a"),Hko=o("RobertaForMaskedLM"),Uko=o(" (RoBERTa model)"),Jko=l(),G2=a("li"),rge=a("strong"),Yko=o("roformer"),Kko=o(" \u2014 "),nO=a("a"),Zko=o("RoFormerForMaskedLM"),eSo=o(" (RoFormer model)"),oSo=l(),O2=a("li"),tge=a("strong"),rSo=o("squeezebert"),tSo=o(" \u2014 "),sO=a("a"),aSo=o("SqueezeBertForMaskedLM"),nSo=o(" (SqueezeBERT model)"),sSo=l(),V2=a("li"),age=a("strong"),lSo=o("tapas"),iSo=o(" \u2014 "),lO=a("a"),dSo=o("TapasForMaskedLM"),cSo=o(" (TAPAS model)"),fSo=l(),X2=a("li"),nge=a("strong"),mSo=o("wav2vec2"),gSo=o(" \u2014 "),sge=a("code"),hSo=o("Wav2Vec2ForMaskedLM"),pSo=o(" (Wav2Vec2 model)"),uSo=l(),z2=a("li"),lge=a("strong"),_So=o("xlm"),bSo=o(" \u2014 "),iO=a("a"),vSo=o("XLMWithLMHeadModel"),FSo=o(" (XLM model)"),TSo=l(),W2=a("li"),ige=a("strong"),MSo=o("xlm-roberta"),ESo=o(" \u2014 "),dO=a("a"),CSo=o("XLMRobertaForMaskedLM"),wSo=o(" (XLM-RoBERTa model)"),ASo=l(),Q2=a("li"),dge=a("strong"),LSo=o("xlm-roberta-xl"),ySo=o(" \u2014 "),cO=a("a"),xSo=o("XLMRobertaXLForMaskedLM"),$So=o(" (XLM-RoBERTa-XL model)"),kSo=l(),H2=a("li"),cge=a("strong"),SSo=o("yoso"),RSo=o(" \u2014 "),fO=a("a"),PSo=o("YosoForMaskedLM"),BSo=o(" (YOSO model)"),ISo=l(),U2=a("p"),NSo=o("The model is set in evaluation mode by default using "),fge=a("code"),qSo=o("model.eval()"),jSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mge=a("code"),DSo=o("model.train()"),GSo=l(),F(J2.$$.fragment),CGe=l(),Qi=a("h2"),Y2=a("a"),gge=a("span"),F(mL.$$.fragment),OSo=l(),hge=a("span"),VSo=o("AutoModelForSeq2SeqLM"),wGe=l(),Ro=a("div"),F(gL.$$.fragment),XSo=l(),Hi=a("p"),zSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mO=a("a"),WSo=o("from_pretrained()"),QSo=o(" class method or the "),gO=a("a"),HSo=o("from_config()"),USo=o(` class
method.`),JSo=l(),hL=a("p"),YSo=o("This class cannot be instantiated directly using "),pge=a("code"),KSo=o("__init__()"),ZSo=o(" (throws an error)."),eRo=l(),dt=a("div"),F(pL.$$.fragment),oRo=l(),uge=a("p"),rRo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),tRo=l(),Ui=a("p"),aRo=o(`Note:
Loading a model from its configuration file does `),_ge=a("strong"),nRo=o("not"),sRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=a("a"),lRo=o("from_pretrained()"),iRo=o(" to load the model weights."),dRo=l(),F(K2.$$.fragment),cRo=l(),eo=a("div"),F(uL.$$.fragment),fRo=l(),bge=a("p"),mRo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),gRo=l(),Ia=a("p"),hRo=o("The model class to instantiate is selected based on the "),vge=a("code"),pRo=o("model_type"),uRo=o(` property of the config object (either
passed as an argument or loaded from `),Fge=a("code"),_Ro=o("pretrained_model_name_or_path"),bRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tge=a("code"),vRo=o("pretrained_model_name_or_path"),FRo=o(":"),TRo=l(),pe=a("ul"),Z2=a("li"),Mge=a("strong"),MRo=o("bart"),ERo=o(" \u2014 "),pO=a("a"),CRo=o("BartForConditionalGeneration"),wRo=o(" (BART model)"),ARo=l(),eb=a("li"),Ege=a("strong"),LRo=o("bigbird_pegasus"),yRo=o(" \u2014 "),uO=a("a"),xRo=o("BigBirdPegasusForConditionalGeneration"),$Ro=o(" (BigBird-Pegasus model)"),kRo=l(),ob=a("li"),Cge=a("strong"),SRo=o("blenderbot"),RRo=o(" \u2014 "),_O=a("a"),PRo=o("BlenderbotForConditionalGeneration"),BRo=o(" (Blenderbot model)"),IRo=l(),rb=a("li"),wge=a("strong"),NRo=o("blenderbot-small"),qRo=o(" \u2014 "),bO=a("a"),jRo=o("BlenderbotSmallForConditionalGeneration"),DRo=o(" (BlenderbotSmall model)"),GRo=l(),tb=a("li"),Age=a("strong"),ORo=o("encoder-decoder"),VRo=o(" \u2014 "),vO=a("a"),XRo=o("EncoderDecoderModel"),zRo=o(" (Encoder decoder model)"),WRo=l(),ab=a("li"),Lge=a("strong"),QRo=o("fsmt"),HRo=o(" \u2014 "),FO=a("a"),URo=o("FSMTForConditionalGeneration"),JRo=o(" (FairSeq Machine-Translation model)"),YRo=l(),nb=a("li"),yge=a("strong"),KRo=o("led"),ZRo=o(" \u2014 "),TO=a("a"),ePo=o("LEDForConditionalGeneration"),oPo=o(" (LED model)"),rPo=l(),sb=a("li"),xge=a("strong"),tPo=o("longt5"),aPo=o(" \u2014 "),MO=a("a"),nPo=o("LongT5ForConditionalGeneration"),sPo=o(" (LongT5 model)"),lPo=l(),lb=a("li"),$ge=a("strong"),iPo=o("m2m_100"),dPo=o(" \u2014 "),EO=a("a"),cPo=o("M2M100ForConditionalGeneration"),fPo=o(" (M2M100 model)"),mPo=l(),ib=a("li"),kge=a("strong"),gPo=o("marian"),hPo=o(" \u2014 "),CO=a("a"),pPo=o("MarianMTModel"),uPo=o(" (Marian model)"),_Po=l(),db=a("li"),Sge=a("strong"),bPo=o("mbart"),vPo=o(" \u2014 "),wO=a("a"),FPo=o("MBartForConditionalGeneration"),TPo=o(" (mBART model)"),MPo=l(),cb=a("li"),Rge=a("strong"),EPo=o("mt5"),CPo=o(" \u2014 "),AO=a("a"),wPo=o("MT5ForConditionalGeneration"),APo=o(" (MT5 model)"),LPo=l(),fb=a("li"),Pge=a("strong"),yPo=o("pegasus"),xPo=o(" \u2014 "),LO=a("a"),$Po=o("PegasusForConditionalGeneration"),kPo=o(" (Pegasus model)"),SPo=l(),mb=a("li"),Bge=a("strong"),RPo=o("plbart"),PPo=o(" \u2014 "),yO=a("a"),BPo=o("PLBartForConditionalGeneration"),IPo=o(" (PLBart model)"),NPo=l(),gb=a("li"),Ige=a("strong"),qPo=o("prophetnet"),jPo=o(" \u2014 "),xO=a("a"),DPo=o("ProphetNetForConditionalGeneration"),GPo=o(" (ProphetNet model)"),OPo=l(),hb=a("li"),Nge=a("strong"),VPo=o("t5"),XPo=o(" \u2014 "),$O=a("a"),zPo=o("T5ForConditionalGeneration"),WPo=o(" (T5 model)"),QPo=l(),pb=a("li"),qge=a("strong"),HPo=o("xlm-prophetnet"),UPo=o(" \u2014 "),kO=a("a"),JPo=o("XLMProphetNetForConditionalGeneration"),YPo=o(" (XLM-ProphetNet model)"),KPo=l(),ub=a("p"),ZPo=o("The model is set in evaluation mode by default using "),jge=a("code"),eBo=o("model.eval()"),oBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dge=a("code"),rBo=o("model.train()"),tBo=l(),F(_b.$$.fragment),AGe=l(),Ji=a("h2"),bb=a("a"),Gge=a("span"),F(_L.$$.fragment),aBo=l(),Oge=a("span"),nBo=o("AutoModelForSequenceClassification"),LGe=l(),Po=a("div"),F(bL.$$.fragment),sBo=l(),Yi=a("p"),lBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),SO=a("a"),iBo=o("from_pretrained()"),dBo=o(" class method or the "),RO=a("a"),cBo=o("from_config()"),fBo=o(` class
method.`),mBo=l(),vL=a("p"),gBo=o("This class cannot be instantiated directly using "),Vge=a("code"),hBo=o("__init__()"),pBo=o(" (throws an error)."),uBo=l(),ct=a("div"),F(FL.$$.fragment),_Bo=l(),Xge=a("p"),bBo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vBo=l(),Ki=a("p"),FBo=o(`Note:
Loading a model from its configuration file does `),zge=a("strong"),TBo=o("not"),MBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=a("a"),EBo=o("from_pretrained()"),CBo=o(" to load the model weights."),wBo=l(),F(vb.$$.fragment),ABo=l(),oo=a("div"),F(TL.$$.fragment),LBo=l(),Wge=a("p"),yBo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),xBo=l(),Na=a("p"),$Bo=o("The model class to instantiate is selected based on the "),Qge=a("code"),kBo=o("model_type"),SBo=o(` property of the config object (either
passed as an argument or loaded from `),Hge=a("code"),RBo=o("pretrained_model_name_or_path"),PBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=a("code"),BBo=o("pretrained_model_name_or_path"),IBo=o(":"),NBo=l(),N=a("ul"),Fb=a("li"),Jge=a("strong"),qBo=o("albert"),jBo=o(" \u2014 "),BO=a("a"),DBo=o("AlbertForSequenceClassification"),GBo=o(" (ALBERT model)"),OBo=l(),Tb=a("li"),Yge=a("strong"),VBo=o("bart"),XBo=o(" \u2014 "),IO=a("a"),zBo=o("BartForSequenceClassification"),WBo=o(" (BART model)"),QBo=l(),Mb=a("li"),Kge=a("strong"),HBo=o("bert"),UBo=o(" \u2014 "),NO=a("a"),JBo=o("BertForSequenceClassification"),YBo=o(" (BERT model)"),KBo=l(),Eb=a("li"),Zge=a("strong"),ZBo=o("big_bird"),eIo=o(" \u2014 "),qO=a("a"),oIo=o("BigBirdForSequenceClassification"),rIo=o(" (BigBird model)"),tIo=l(),Cb=a("li"),ehe=a("strong"),aIo=o("bigbird_pegasus"),nIo=o(" \u2014 "),jO=a("a"),sIo=o("BigBirdPegasusForSequenceClassification"),lIo=o(" (BigBird-Pegasus model)"),iIo=l(),wb=a("li"),ohe=a("strong"),dIo=o("camembert"),cIo=o(" \u2014 "),DO=a("a"),fIo=o("CamembertForSequenceClassification"),mIo=o(" (CamemBERT model)"),gIo=l(),Ab=a("li"),rhe=a("strong"),hIo=o("canine"),pIo=o(" \u2014 "),GO=a("a"),uIo=o("CanineForSequenceClassification"),_Io=o(" (CANINE model)"),bIo=l(),Lb=a("li"),the=a("strong"),vIo=o("convbert"),FIo=o(" \u2014 "),OO=a("a"),TIo=o("ConvBertForSequenceClassification"),MIo=o(" (ConvBERT model)"),EIo=l(),yb=a("li"),ahe=a("strong"),CIo=o("ctrl"),wIo=o(" \u2014 "),VO=a("a"),AIo=o("CTRLForSequenceClassification"),LIo=o(" (CTRL model)"),yIo=l(),xb=a("li"),nhe=a("strong"),xIo=o("data2vec-text"),$Io=o(" \u2014 "),XO=a("a"),kIo=o("Data2VecTextForSequenceClassification"),SIo=o(" (Data2VecText model)"),RIo=l(),$b=a("li"),she=a("strong"),PIo=o("deberta"),BIo=o(" \u2014 "),zO=a("a"),IIo=o("DebertaForSequenceClassification"),NIo=o(" (DeBERTa model)"),qIo=l(),kb=a("li"),lhe=a("strong"),jIo=o("deberta-v2"),DIo=o(" \u2014 "),WO=a("a"),GIo=o("DebertaV2ForSequenceClassification"),OIo=o(" (DeBERTa-v2 model)"),VIo=l(),Sb=a("li"),ihe=a("strong"),XIo=o("distilbert"),zIo=o(" \u2014 "),QO=a("a"),WIo=o("DistilBertForSequenceClassification"),QIo=o(" (DistilBERT model)"),HIo=l(),Rb=a("li"),dhe=a("strong"),UIo=o("electra"),JIo=o(" \u2014 "),HO=a("a"),YIo=o("ElectraForSequenceClassification"),KIo=o(" (ELECTRA model)"),ZIo=l(),Pb=a("li"),che=a("strong"),eNo=o("flaubert"),oNo=o(" \u2014 "),UO=a("a"),rNo=o("FlaubertForSequenceClassification"),tNo=o(" (FlauBERT model)"),aNo=l(),Bb=a("li"),fhe=a("strong"),nNo=o("fnet"),sNo=o(" \u2014 "),JO=a("a"),lNo=o("FNetForSequenceClassification"),iNo=o(" (FNet model)"),dNo=l(),Ib=a("li"),mhe=a("strong"),cNo=o("funnel"),fNo=o(" \u2014 "),YO=a("a"),mNo=o("FunnelForSequenceClassification"),gNo=o(" (Funnel Transformer model)"),hNo=l(),Nb=a("li"),ghe=a("strong"),pNo=o("gpt2"),uNo=o(" \u2014 "),KO=a("a"),_No=o("GPT2ForSequenceClassification"),bNo=o(" (OpenAI GPT-2 model)"),vNo=l(),qb=a("li"),hhe=a("strong"),FNo=o("gpt_neo"),TNo=o(" \u2014 "),ZO=a("a"),MNo=o("GPTNeoForSequenceClassification"),ENo=o(" (GPT Neo model)"),CNo=l(),jb=a("li"),phe=a("strong"),wNo=o("gptj"),ANo=o(" \u2014 "),eV=a("a"),LNo=o("GPTJForSequenceClassification"),yNo=o(" (GPT-J model)"),xNo=l(),Db=a("li"),uhe=a("strong"),$No=o("ibert"),kNo=o(" \u2014 "),oV=a("a"),SNo=o("IBertForSequenceClassification"),RNo=o(" (I-BERT model)"),PNo=l(),Gb=a("li"),_he=a("strong"),BNo=o("layoutlm"),INo=o(" \u2014 "),rV=a("a"),NNo=o("LayoutLMForSequenceClassification"),qNo=o(" (LayoutLM model)"),jNo=l(),Ob=a("li"),bhe=a("strong"),DNo=o("layoutlmv2"),GNo=o(" \u2014 "),tV=a("a"),ONo=o("LayoutLMv2ForSequenceClassification"),VNo=o(" (LayoutLMv2 model)"),XNo=l(),Vb=a("li"),vhe=a("strong"),zNo=o("layoutlmv3"),WNo=o(" \u2014 "),aV=a("a"),QNo=o("LayoutLMv3ForSequenceClassification"),HNo=o(" (LayoutLMv3 model)"),UNo=l(),Xb=a("li"),Fhe=a("strong"),JNo=o("led"),YNo=o(" \u2014 "),nV=a("a"),KNo=o("LEDForSequenceClassification"),ZNo=o(" (LED model)"),eqo=l(),zb=a("li"),The=a("strong"),oqo=o("longformer"),rqo=o(" \u2014 "),sV=a("a"),tqo=o("LongformerForSequenceClassification"),aqo=o(" (Longformer model)"),nqo=l(),Wb=a("li"),Mhe=a("strong"),sqo=o("mbart"),lqo=o(" \u2014 "),lV=a("a"),iqo=o("MBartForSequenceClassification"),dqo=o(" (mBART model)"),cqo=l(),Qb=a("li"),Ehe=a("strong"),fqo=o("megatron-bert"),mqo=o(" \u2014 "),iV=a("a"),gqo=o("MegatronBertForSequenceClassification"),hqo=o(" (Megatron-BERT model)"),pqo=l(),Hb=a("li"),Che=a("strong"),uqo=o("mobilebert"),_qo=o(" \u2014 "),dV=a("a"),bqo=o("MobileBertForSequenceClassification"),vqo=o(" (MobileBERT model)"),Fqo=l(),Ub=a("li"),whe=a("strong"),Tqo=o("mpnet"),Mqo=o(" \u2014 "),cV=a("a"),Eqo=o("MPNetForSequenceClassification"),Cqo=o(" (MPNet model)"),wqo=l(),Jb=a("li"),Ahe=a("strong"),Aqo=o("nystromformer"),Lqo=o(" \u2014 "),fV=a("a"),yqo=o("NystromformerForSequenceClassification"),xqo=o(" (Nystr\xF6mformer model)"),$qo=l(),Yb=a("li"),Lhe=a("strong"),kqo=o("openai-gpt"),Sqo=o(" \u2014 "),mV=a("a"),Rqo=o("OpenAIGPTForSequenceClassification"),Pqo=o(" (OpenAI GPT model)"),Bqo=l(),Kb=a("li"),yhe=a("strong"),Iqo=o("perceiver"),Nqo=o(" \u2014 "),gV=a("a"),qqo=o("PerceiverForSequenceClassification"),jqo=o(" (Perceiver model)"),Dqo=l(),Zb=a("li"),xhe=a("strong"),Gqo=o("plbart"),Oqo=o(" \u2014 "),hV=a("a"),Vqo=o("PLBartForSequenceClassification"),Xqo=o(" (PLBart model)"),zqo=l(),ev=a("li"),$he=a("strong"),Wqo=o("qdqbert"),Qqo=o(" \u2014 "),pV=a("a"),Hqo=o("QDQBertForSequenceClassification"),Uqo=o(" (QDQBert model)"),Jqo=l(),ov=a("li"),khe=a("strong"),Yqo=o("reformer"),Kqo=o(" \u2014 "),uV=a("a"),Zqo=o("ReformerForSequenceClassification"),ejo=o(" (Reformer model)"),ojo=l(),rv=a("li"),She=a("strong"),rjo=o("rembert"),tjo=o(" \u2014 "),_V=a("a"),ajo=o("RemBertForSequenceClassification"),njo=o(" (RemBERT model)"),sjo=l(),tv=a("li"),Rhe=a("strong"),ljo=o("roberta"),ijo=o(" \u2014 "),bV=a("a"),djo=o("RobertaForSequenceClassification"),cjo=o(" (RoBERTa model)"),fjo=l(),av=a("li"),Phe=a("strong"),mjo=o("roformer"),gjo=o(" \u2014 "),vV=a("a"),hjo=o("RoFormerForSequenceClassification"),pjo=o(" (RoFormer model)"),ujo=l(),nv=a("li"),Bhe=a("strong"),_jo=o("squeezebert"),bjo=o(" \u2014 "),FV=a("a"),vjo=o("SqueezeBertForSequenceClassification"),Fjo=o(" (SqueezeBERT model)"),Tjo=l(),sv=a("li"),Ihe=a("strong"),Mjo=o("tapas"),Ejo=o(" \u2014 "),TV=a("a"),Cjo=o("TapasForSequenceClassification"),wjo=o(" (TAPAS model)"),Ajo=l(),lv=a("li"),Nhe=a("strong"),Ljo=o("transfo-xl"),yjo=o(" \u2014 "),MV=a("a"),xjo=o("TransfoXLForSequenceClassification"),$jo=o(" (Transformer-XL model)"),kjo=l(),iv=a("li"),qhe=a("strong"),Sjo=o("xlm"),Rjo=o(" \u2014 "),EV=a("a"),Pjo=o("XLMForSequenceClassification"),Bjo=o(" (XLM model)"),Ijo=l(),dv=a("li"),jhe=a("strong"),Njo=o("xlm-roberta"),qjo=o(" \u2014 "),CV=a("a"),jjo=o("XLMRobertaForSequenceClassification"),Djo=o(" (XLM-RoBERTa model)"),Gjo=l(),cv=a("li"),Dhe=a("strong"),Ojo=o("xlm-roberta-xl"),Vjo=o(" \u2014 "),wV=a("a"),Xjo=o("XLMRobertaXLForSequenceClassification"),zjo=o(" (XLM-RoBERTa-XL model)"),Wjo=l(),fv=a("li"),Ghe=a("strong"),Qjo=o("xlnet"),Hjo=o(" \u2014 "),AV=a("a"),Ujo=o("XLNetForSequenceClassification"),Jjo=o(" (XLNet model)"),Yjo=l(),mv=a("li"),Ohe=a("strong"),Kjo=o("yoso"),Zjo=o(" \u2014 "),LV=a("a"),eDo=o("YosoForSequenceClassification"),oDo=o(" (YOSO model)"),rDo=l(),gv=a("p"),tDo=o("The model is set in evaluation mode by default using "),Vhe=a("code"),aDo=o("model.eval()"),nDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=a("code"),sDo=o("model.train()"),lDo=l(),F(hv.$$.fragment),yGe=l(),Zi=a("h2"),pv=a("a"),zhe=a("span"),F(ML.$$.fragment),iDo=l(),Whe=a("span"),dDo=o("AutoModelForMultipleChoice"),xGe=l(),Bo=a("div"),F(EL.$$.fragment),cDo=l(),ed=a("p"),fDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yV=a("a"),mDo=o("from_pretrained()"),gDo=o(" class method or the "),xV=a("a"),hDo=o("from_config()"),pDo=o(` class
method.`),uDo=l(),CL=a("p"),_Do=o("This class cannot be instantiated directly using "),Qhe=a("code"),bDo=o("__init__()"),vDo=o(" (throws an error)."),FDo=l(),ft=a("div"),F(wL.$$.fragment),TDo=l(),Hhe=a("p"),MDo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),EDo=l(),od=a("p"),CDo=o(`Note:
Loading a model from its configuration file does `),Uhe=a("strong"),wDo=o("not"),ADo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$V=a("a"),LDo=o("from_pretrained()"),yDo=o(" to load the model weights."),xDo=l(),F(uv.$$.fragment),$Do=l(),ro=a("div"),F(AL.$$.fragment),kDo=l(),Jhe=a("p"),SDo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),RDo=l(),qa=a("p"),PDo=o("The model class to instantiate is selected based on the "),Yhe=a("code"),BDo=o("model_type"),IDo=o(` property of the config object (either
passed as an argument or loaded from `),Khe=a("code"),NDo=o("pretrained_model_name_or_path"),qDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=a("code"),jDo=o("pretrained_model_name_or_path"),DDo=o(":"),GDo=l(),Z=a("ul"),_v=a("li"),epe=a("strong"),ODo=o("albert"),VDo=o(" \u2014 "),kV=a("a"),XDo=o("AlbertForMultipleChoice"),zDo=o(" (ALBERT model)"),WDo=l(),bv=a("li"),ope=a("strong"),QDo=o("bert"),HDo=o(" \u2014 "),SV=a("a"),UDo=o("BertForMultipleChoice"),JDo=o(" (BERT model)"),YDo=l(),vv=a("li"),rpe=a("strong"),KDo=o("big_bird"),ZDo=o(" \u2014 "),RV=a("a"),eGo=o("BigBirdForMultipleChoice"),oGo=o(" (BigBird model)"),rGo=l(),Fv=a("li"),tpe=a("strong"),tGo=o("camembert"),aGo=o(" \u2014 "),PV=a("a"),nGo=o("CamembertForMultipleChoice"),sGo=o(" (CamemBERT model)"),lGo=l(),Tv=a("li"),ape=a("strong"),iGo=o("canine"),dGo=o(" \u2014 "),BV=a("a"),cGo=o("CanineForMultipleChoice"),fGo=o(" (CANINE model)"),mGo=l(),Mv=a("li"),npe=a("strong"),gGo=o("convbert"),hGo=o(" \u2014 "),IV=a("a"),pGo=o("ConvBertForMultipleChoice"),uGo=o(" (ConvBERT model)"),_Go=l(),Ev=a("li"),spe=a("strong"),bGo=o("data2vec-text"),vGo=o(" \u2014 "),NV=a("a"),FGo=o("Data2VecTextForMultipleChoice"),TGo=o(" (Data2VecText model)"),MGo=l(),Cv=a("li"),lpe=a("strong"),EGo=o("deberta-v2"),CGo=o(" \u2014 "),qV=a("a"),wGo=o("DebertaV2ForMultipleChoice"),AGo=o(" (DeBERTa-v2 model)"),LGo=l(),wv=a("li"),ipe=a("strong"),yGo=o("distilbert"),xGo=o(" \u2014 "),jV=a("a"),$Go=o("DistilBertForMultipleChoice"),kGo=o(" (DistilBERT model)"),SGo=l(),Av=a("li"),dpe=a("strong"),RGo=o("electra"),PGo=o(" \u2014 "),DV=a("a"),BGo=o("ElectraForMultipleChoice"),IGo=o(" (ELECTRA model)"),NGo=l(),Lv=a("li"),cpe=a("strong"),qGo=o("flaubert"),jGo=o(" \u2014 "),GV=a("a"),DGo=o("FlaubertForMultipleChoice"),GGo=o(" (FlauBERT model)"),OGo=l(),yv=a("li"),fpe=a("strong"),VGo=o("fnet"),XGo=o(" \u2014 "),OV=a("a"),zGo=o("FNetForMultipleChoice"),WGo=o(" (FNet model)"),QGo=l(),xv=a("li"),mpe=a("strong"),HGo=o("funnel"),UGo=o(" \u2014 "),VV=a("a"),JGo=o("FunnelForMultipleChoice"),YGo=o(" (Funnel Transformer model)"),KGo=l(),$v=a("li"),gpe=a("strong"),ZGo=o("ibert"),eOo=o(" \u2014 "),XV=a("a"),oOo=o("IBertForMultipleChoice"),rOo=o(" (I-BERT model)"),tOo=l(),kv=a("li"),hpe=a("strong"),aOo=o("longformer"),nOo=o(" \u2014 "),zV=a("a"),sOo=o("LongformerForMultipleChoice"),lOo=o(" (Longformer model)"),iOo=l(),Sv=a("li"),ppe=a("strong"),dOo=o("megatron-bert"),cOo=o(" \u2014 "),WV=a("a"),fOo=o("MegatronBertForMultipleChoice"),mOo=o(" (Megatron-BERT model)"),gOo=l(),Rv=a("li"),upe=a("strong"),hOo=o("mobilebert"),pOo=o(" \u2014 "),QV=a("a"),uOo=o("MobileBertForMultipleChoice"),_Oo=o(" (MobileBERT model)"),bOo=l(),Pv=a("li"),_pe=a("strong"),vOo=o("mpnet"),FOo=o(" \u2014 "),HV=a("a"),TOo=o("MPNetForMultipleChoice"),MOo=o(" (MPNet model)"),EOo=l(),Bv=a("li"),bpe=a("strong"),COo=o("nystromformer"),wOo=o(" \u2014 "),UV=a("a"),AOo=o("NystromformerForMultipleChoice"),LOo=o(" (Nystr\xF6mformer model)"),yOo=l(),Iv=a("li"),vpe=a("strong"),xOo=o("qdqbert"),$Oo=o(" \u2014 "),JV=a("a"),kOo=o("QDQBertForMultipleChoice"),SOo=o(" (QDQBert model)"),ROo=l(),Nv=a("li"),Fpe=a("strong"),POo=o("rembert"),BOo=o(" \u2014 "),YV=a("a"),IOo=o("RemBertForMultipleChoice"),NOo=o(" (RemBERT model)"),qOo=l(),qv=a("li"),Tpe=a("strong"),jOo=o("roberta"),DOo=o(" \u2014 "),KV=a("a"),GOo=o("RobertaForMultipleChoice"),OOo=o(" (RoBERTa model)"),VOo=l(),jv=a("li"),Mpe=a("strong"),XOo=o("roformer"),zOo=o(" \u2014 "),ZV=a("a"),WOo=o("RoFormerForMultipleChoice"),QOo=o(" (RoFormer model)"),HOo=l(),Dv=a("li"),Epe=a("strong"),UOo=o("squeezebert"),JOo=o(" \u2014 "),eX=a("a"),YOo=o("SqueezeBertForMultipleChoice"),KOo=o(" (SqueezeBERT model)"),ZOo=l(),Gv=a("li"),Cpe=a("strong"),eVo=o("xlm"),oVo=o(" \u2014 "),oX=a("a"),rVo=o("XLMForMultipleChoice"),tVo=o(" (XLM model)"),aVo=l(),Ov=a("li"),wpe=a("strong"),nVo=o("xlm-roberta"),sVo=o(" \u2014 "),rX=a("a"),lVo=o("XLMRobertaForMultipleChoice"),iVo=o(" (XLM-RoBERTa model)"),dVo=l(),Vv=a("li"),Ape=a("strong"),cVo=o("xlm-roberta-xl"),fVo=o(" \u2014 "),tX=a("a"),mVo=o("XLMRobertaXLForMultipleChoice"),gVo=o(" (XLM-RoBERTa-XL model)"),hVo=l(),Xv=a("li"),Lpe=a("strong"),pVo=o("xlnet"),uVo=o(" \u2014 "),aX=a("a"),_Vo=o("XLNetForMultipleChoice"),bVo=o(" (XLNet model)"),vVo=l(),zv=a("li"),ype=a("strong"),FVo=o("yoso"),TVo=o(" \u2014 "),nX=a("a"),MVo=o("YosoForMultipleChoice"),EVo=o(" (YOSO model)"),CVo=l(),Wv=a("p"),wVo=o("The model is set in evaluation mode by default using "),xpe=a("code"),AVo=o("model.eval()"),LVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=a("code"),yVo=o("model.train()"),xVo=l(),F(Qv.$$.fragment),$Ge=l(),rd=a("h2"),Hv=a("a"),kpe=a("span"),F(LL.$$.fragment),$Vo=l(),Spe=a("span"),kVo=o("AutoModelForNextSentencePrediction"),kGe=l(),Io=a("div"),F(yL.$$.fragment),SVo=l(),td=a("p"),RVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),sX=a("a"),PVo=o("from_pretrained()"),BVo=o(" class method or the "),lX=a("a"),IVo=o("from_config()"),NVo=o(` class
method.`),qVo=l(),xL=a("p"),jVo=o("This class cannot be instantiated directly using "),Rpe=a("code"),DVo=o("__init__()"),GVo=o(" (throws an error)."),OVo=l(),mt=a("div"),F($L.$$.fragment),VVo=l(),Ppe=a("p"),XVo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zVo=l(),ad=a("p"),WVo=o(`Note:
Loading a model from its configuration file does `),Bpe=a("strong"),QVo=o("not"),HVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=a("a"),UVo=o("from_pretrained()"),JVo=o(" to load the model weights."),YVo=l(),F(Uv.$$.fragment),KVo=l(),to=a("div"),F(kL.$$.fragment),ZVo=l(),Ipe=a("p"),eXo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oXo=l(),ja=a("p"),rXo=o("The model class to instantiate is selected based on the "),Npe=a("code"),tXo=o("model_type"),aXo=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),nXo=o("pretrained_model_name_or_path"),sXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=a("code"),lXo=o("pretrained_model_name_or_path"),iXo=o(":"),dXo=l(),Zr=a("ul"),Jv=a("li"),Dpe=a("strong"),cXo=o("bert"),fXo=o(" \u2014 "),dX=a("a"),mXo=o("BertForNextSentencePrediction"),gXo=o(" (BERT model)"),hXo=l(),Yv=a("li"),Gpe=a("strong"),pXo=o("fnet"),uXo=o(" \u2014 "),cX=a("a"),_Xo=o("FNetForNextSentencePrediction"),bXo=o(" (FNet model)"),vXo=l(),Kv=a("li"),Ope=a("strong"),FXo=o("megatron-bert"),TXo=o(" \u2014 "),fX=a("a"),MXo=o("MegatronBertForNextSentencePrediction"),EXo=o(" (Megatron-BERT model)"),CXo=l(),Zv=a("li"),Vpe=a("strong"),wXo=o("mobilebert"),AXo=o(" \u2014 "),mX=a("a"),LXo=o("MobileBertForNextSentencePrediction"),yXo=o(" (MobileBERT model)"),xXo=l(),e0=a("li"),Xpe=a("strong"),$Xo=o("qdqbert"),kXo=o(" \u2014 "),gX=a("a"),SXo=o("QDQBertForNextSentencePrediction"),RXo=o(" (QDQBert model)"),PXo=l(),o0=a("p"),BXo=o("The model is set in evaluation mode by default using "),zpe=a("code"),IXo=o("model.eval()"),NXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=a("code"),qXo=o("model.train()"),jXo=l(),F(r0.$$.fragment),SGe=l(),nd=a("h2"),t0=a("a"),Qpe=a("span"),F(SL.$$.fragment),DXo=l(),Hpe=a("span"),GXo=o("AutoModelForTokenClassification"),RGe=l(),No=a("div"),F(RL.$$.fragment),OXo=l(),sd=a("p"),VXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hX=a("a"),XXo=o("from_pretrained()"),zXo=o(" class method or the "),pX=a("a"),WXo=o("from_config()"),QXo=o(` class
method.`),HXo=l(),PL=a("p"),UXo=o("This class cannot be instantiated directly using "),Upe=a("code"),JXo=o("__init__()"),YXo=o(" (throws an error)."),KXo=l(),gt=a("div"),F(BL.$$.fragment),ZXo=l(),Jpe=a("p"),ezo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ozo=l(),ld=a("p"),rzo=o(`Note:
Loading a model from its configuration file does `),Ype=a("strong"),tzo=o("not"),azo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=a("a"),nzo=o("from_pretrained()"),szo=o(" to load the model weights."),lzo=l(),F(a0.$$.fragment),izo=l(),ao=a("div"),F(IL.$$.fragment),dzo=l(),Kpe=a("p"),czo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fzo=l(),Da=a("p"),mzo=o("The model class to instantiate is selected based on the "),Zpe=a("code"),gzo=o("model_type"),hzo=o(` property of the config object (either
passed as an argument or loaded from `),eue=a("code"),pzo=o("pretrained_model_name_or_path"),uzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=a("code"),_zo=o("pretrained_model_name_or_path"),bzo=o(":"),vzo=l(),U=a("ul"),n0=a("li"),rue=a("strong"),Fzo=o("albert"),Tzo=o(" \u2014 "),_X=a("a"),Mzo=o("AlbertForTokenClassification"),Ezo=o(" (ALBERT model)"),Czo=l(),s0=a("li"),tue=a("strong"),wzo=o("bert"),Azo=o(" \u2014 "),bX=a("a"),Lzo=o("BertForTokenClassification"),yzo=o(" (BERT model)"),xzo=l(),l0=a("li"),aue=a("strong"),$zo=o("big_bird"),kzo=o(" \u2014 "),vX=a("a"),Szo=o("BigBirdForTokenClassification"),Rzo=o(" (BigBird model)"),Pzo=l(),i0=a("li"),nue=a("strong"),Bzo=o("camembert"),Izo=o(" \u2014 "),FX=a("a"),Nzo=o("CamembertForTokenClassification"),qzo=o(" (CamemBERT model)"),jzo=l(),d0=a("li"),sue=a("strong"),Dzo=o("canine"),Gzo=o(" \u2014 "),TX=a("a"),Ozo=o("CanineForTokenClassification"),Vzo=o(" (CANINE model)"),Xzo=l(),c0=a("li"),lue=a("strong"),zzo=o("convbert"),Wzo=o(" \u2014 "),MX=a("a"),Qzo=o("ConvBertForTokenClassification"),Hzo=o(" (ConvBERT model)"),Uzo=l(),f0=a("li"),iue=a("strong"),Jzo=o("data2vec-text"),Yzo=o(" \u2014 "),EX=a("a"),Kzo=o("Data2VecTextForTokenClassification"),Zzo=o(" (Data2VecText model)"),eWo=l(),m0=a("li"),due=a("strong"),oWo=o("deberta"),rWo=o(" \u2014 "),CX=a("a"),tWo=o("DebertaForTokenClassification"),aWo=o(" (DeBERTa model)"),nWo=l(),g0=a("li"),cue=a("strong"),sWo=o("deberta-v2"),lWo=o(" \u2014 "),wX=a("a"),iWo=o("DebertaV2ForTokenClassification"),dWo=o(" (DeBERTa-v2 model)"),cWo=l(),h0=a("li"),fue=a("strong"),fWo=o("distilbert"),mWo=o(" \u2014 "),AX=a("a"),gWo=o("DistilBertForTokenClassification"),hWo=o(" (DistilBERT model)"),pWo=l(),p0=a("li"),mue=a("strong"),uWo=o("electra"),_Wo=o(" \u2014 "),LX=a("a"),bWo=o("ElectraForTokenClassification"),vWo=o(" (ELECTRA model)"),FWo=l(),u0=a("li"),gue=a("strong"),TWo=o("flaubert"),MWo=o(" \u2014 "),yX=a("a"),EWo=o("FlaubertForTokenClassification"),CWo=o(" (FlauBERT model)"),wWo=l(),_0=a("li"),hue=a("strong"),AWo=o("fnet"),LWo=o(" \u2014 "),xX=a("a"),yWo=o("FNetForTokenClassification"),xWo=o(" (FNet model)"),$Wo=l(),b0=a("li"),pue=a("strong"),kWo=o("funnel"),SWo=o(" \u2014 "),$X=a("a"),RWo=o("FunnelForTokenClassification"),PWo=o(" (Funnel Transformer model)"),BWo=l(),v0=a("li"),uue=a("strong"),IWo=o("gpt2"),NWo=o(" \u2014 "),kX=a("a"),qWo=o("GPT2ForTokenClassification"),jWo=o(" (OpenAI GPT-2 model)"),DWo=l(),F0=a("li"),_ue=a("strong"),GWo=o("ibert"),OWo=o(" \u2014 "),SX=a("a"),VWo=o("IBertForTokenClassification"),XWo=o(" (I-BERT model)"),zWo=l(),T0=a("li"),bue=a("strong"),WWo=o("layoutlm"),QWo=o(" \u2014 "),RX=a("a"),HWo=o("LayoutLMForTokenClassification"),UWo=o(" (LayoutLM model)"),JWo=l(),M0=a("li"),vue=a("strong"),YWo=o("layoutlmv2"),KWo=o(" \u2014 "),PX=a("a"),ZWo=o("LayoutLMv2ForTokenClassification"),eQo=o(" (LayoutLMv2 model)"),oQo=l(),E0=a("li"),Fue=a("strong"),rQo=o("layoutlmv3"),tQo=o(" \u2014 "),BX=a("a"),aQo=o("LayoutLMv3ForTokenClassification"),nQo=o(" (LayoutLMv3 model)"),sQo=l(),C0=a("li"),Tue=a("strong"),lQo=o("longformer"),iQo=o(" \u2014 "),IX=a("a"),dQo=o("LongformerForTokenClassification"),cQo=o(" (Longformer model)"),fQo=l(),w0=a("li"),Mue=a("strong"),mQo=o("megatron-bert"),gQo=o(" \u2014 "),NX=a("a"),hQo=o("MegatronBertForTokenClassification"),pQo=o(" (Megatron-BERT model)"),uQo=l(),A0=a("li"),Eue=a("strong"),_Qo=o("mobilebert"),bQo=o(" \u2014 "),qX=a("a"),vQo=o("MobileBertForTokenClassification"),FQo=o(" (MobileBERT model)"),TQo=l(),L0=a("li"),Cue=a("strong"),MQo=o("mpnet"),EQo=o(" \u2014 "),jX=a("a"),CQo=o("MPNetForTokenClassification"),wQo=o(" (MPNet model)"),AQo=l(),y0=a("li"),wue=a("strong"),LQo=o("nystromformer"),yQo=o(" \u2014 "),DX=a("a"),xQo=o("NystromformerForTokenClassification"),$Qo=o(" (Nystr\xF6mformer model)"),kQo=l(),x0=a("li"),Aue=a("strong"),SQo=o("qdqbert"),RQo=o(" \u2014 "),GX=a("a"),PQo=o("QDQBertForTokenClassification"),BQo=o(" (QDQBert model)"),IQo=l(),$0=a("li"),Lue=a("strong"),NQo=o("rembert"),qQo=o(" \u2014 "),OX=a("a"),jQo=o("RemBertForTokenClassification"),DQo=o(" (RemBERT model)"),GQo=l(),k0=a("li"),yue=a("strong"),OQo=o("roberta"),VQo=o(" \u2014 "),VX=a("a"),XQo=o("RobertaForTokenClassification"),zQo=o(" (RoBERTa model)"),WQo=l(),S0=a("li"),xue=a("strong"),QQo=o("roformer"),HQo=o(" \u2014 "),XX=a("a"),UQo=o("RoFormerForTokenClassification"),JQo=o(" (RoFormer model)"),YQo=l(),R0=a("li"),$ue=a("strong"),KQo=o("squeezebert"),ZQo=o(" \u2014 "),zX=a("a"),eHo=o("SqueezeBertForTokenClassification"),oHo=o(" (SqueezeBERT model)"),rHo=l(),P0=a("li"),kue=a("strong"),tHo=o("xlm"),aHo=o(" \u2014 "),WX=a("a"),nHo=o("XLMForTokenClassification"),sHo=o(" (XLM model)"),lHo=l(),B0=a("li"),Sue=a("strong"),iHo=o("xlm-roberta"),dHo=o(" \u2014 "),QX=a("a"),cHo=o("XLMRobertaForTokenClassification"),fHo=o(" (XLM-RoBERTa model)"),mHo=l(),I0=a("li"),Rue=a("strong"),gHo=o("xlm-roberta-xl"),hHo=o(" \u2014 "),HX=a("a"),pHo=o("XLMRobertaXLForTokenClassification"),uHo=o(" (XLM-RoBERTa-XL model)"),_Ho=l(),N0=a("li"),Pue=a("strong"),bHo=o("xlnet"),vHo=o(" \u2014 "),UX=a("a"),FHo=o("XLNetForTokenClassification"),THo=o(" (XLNet model)"),MHo=l(),q0=a("li"),Bue=a("strong"),EHo=o("yoso"),CHo=o(" \u2014 "),JX=a("a"),wHo=o("YosoForTokenClassification"),AHo=o(" (YOSO model)"),LHo=l(),j0=a("p"),yHo=o("The model is set in evaluation mode by default using "),Iue=a("code"),xHo=o("model.eval()"),$Ho=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=a("code"),kHo=o("model.train()"),SHo=l(),F(D0.$$.fragment),PGe=l(),id=a("h2"),G0=a("a"),que=a("span"),F(NL.$$.fragment),RHo=l(),jue=a("span"),PHo=o("AutoModelForQuestionAnswering"),BGe=l(),qo=a("div"),F(qL.$$.fragment),BHo=l(),dd=a("p"),IHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),YX=a("a"),NHo=o("from_pretrained()"),qHo=o(" class method or the "),KX=a("a"),jHo=o("from_config()"),DHo=o(` class
method.`),GHo=l(),jL=a("p"),OHo=o("This class cannot be instantiated directly using "),Due=a("code"),VHo=o("__init__()"),XHo=o(" (throws an error)."),zHo=l(),ht=a("div"),F(DL.$$.fragment),WHo=l(),Gue=a("p"),QHo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),HHo=l(),cd=a("p"),UHo=o(`Note:
Loading a model from its configuration file does `),Oue=a("strong"),JHo=o("not"),YHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),KHo=o("from_pretrained()"),ZHo=o(" to load the model weights."),eUo=l(),F(O0.$$.fragment),oUo=l(),no=a("div"),F(GL.$$.fragment),rUo=l(),Vue=a("p"),tUo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aUo=l(),Ga=a("p"),nUo=o("The model class to instantiate is selected based on the "),Xue=a("code"),sUo=o("model_type"),lUo=o(` property of the config object (either
passed as an argument or loaded from `),zue=a("code"),iUo=o("pretrained_model_name_or_path"),dUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=a("code"),cUo=o("pretrained_model_name_or_path"),fUo=o(":"),mUo=l(),V=a("ul"),V0=a("li"),Que=a("strong"),gUo=o("albert"),hUo=o(" \u2014 "),ez=a("a"),pUo=o("AlbertForQuestionAnswering"),uUo=o(" (ALBERT model)"),_Uo=l(),X0=a("li"),Hue=a("strong"),bUo=o("bart"),vUo=o(" \u2014 "),oz=a("a"),FUo=o("BartForQuestionAnswering"),TUo=o(" (BART model)"),MUo=l(),z0=a("li"),Uue=a("strong"),EUo=o("bert"),CUo=o(" \u2014 "),rz=a("a"),wUo=o("BertForQuestionAnswering"),AUo=o(" (BERT model)"),LUo=l(),W0=a("li"),Jue=a("strong"),yUo=o("big_bird"),xUo=o(" \u2014 "),tz=a("a"),$Uo=o("BigBirdForQuestionAnswering"),kUo=o(" (BigBird model)"),SUo=l(),Q0=a("li"),Yue=a("strong"),RUo=o("bigbird_pegasus"),PUo=o(" \u2014 "),az=a("a"),BUo=o("BigBirdPegasusForQuestionAnswering"),IUo=o(" (BigBird-Pegasus model)"),NUo=l(),H0=a("li"),Kue=a("strong"),qUo=o("camembert"),jUo=o(" \u2014 "),nz=a("a"),DUo=o("CamembertForQuestionAnswering"),GUo=o(" (CamemBERT model)"),OUo=l(),U0=a("li"),Zue=a("strong"),VUo=o("canine"),XUo=o(" \u2014 "),sz=a("a"),zUo=o("CanineForQuestionAnswering"),WUo=o(" (CANINE model)"),QUo=l(),J0=a("li"),e_e=a("strong"),HUo=o("convbert"),UUo=o(" \u2014 "),lz=a("a"),JUo=o("ConvBertForQuestionAnswering"),YUo=o(" (ConvBERT model)"),KUo=l(),Y0=a("li"),o_e=a("strong"),ZUo=o("data2vec-text"),eJo=o(" \u2014 "),iz=a("a"),oJo=o("Data2VecTextForQuestionAnswering"),rJo=o(" (Data2VecText model)"),tJo=l(),K0=a("li"),r_e=a("strong"),aJo=o("deberta"),nJo=o(" \u2014 "),dz=a("a"),sJo=o("DebertaForQuestionAnswering"),lJo=o(" (DeBERTa model)"),iJo=l(),Z0=a("li"),t_e=a("strong"),dJo=o("deberta-v2"),cJo=o(" \u2014 "),cz=a("a"),fJo=o("DebertaV2ForQuestionAnswering"),mJo=o(" (DeBERTa-v2 model)"),gJo=l(),eF=a("li"),a_e=a("strong"),hJo=o("distilbert"),pJo=o(" \u2014 "),fz=a("a"),uJo=o("DistilBertForQuestionAnswering"),_Jo=o(" (DistilBERT model)"),bJo=l(),oF=a("li"),n_e=a("strong"),vJo=o("electra"),FJo=o(" \u2014 "),mz=a("a"),TJo=o("ElectraForQuestionAnswering"),MJo=o(" (ELECTRA model)"),EJo=l(),rF=a("li"),s_e=a("strong"),CJo=o("flaubert"),wJo=o(" \u2014 "),gz=a("a"),AJo=o("FlaubertForQuestionAnsweringSimple"),LJo=o(" (FlauBERT model)"),yJo=l(),tF=a("li"),l_e=a("strong"),xJo=o("fnet"),$Jo=o(" \u2014 "),hz=a("a"),kJo=o("FNetForQuestionAnswering"),SJo=o(" (FNet model)"),RJo=l(),aF=a("li"),i_e=a("strong"),PJo=o("funnel"),BJo=o(" \u2014 "),pz=a("a"),IJo=o("FunnelForQuestionAnswering"),NJo=o(" (Funnel Transformer model)"),qJo=l(),nF=a("li"),d_e=a("strong"),jJo=o("gptj"),DJo=o(" \u2014 "),uz=a("a"),GJo=o("GPTJForQuestionAnswering"),OJo=o(" (GPT-J model)"),VJo=l(),sF=a("li"),c_e=a("strong"),XJo=o("ibert"),zJo=o(" \u2014 "),_z=a("a"),WJo=o("IBertForQuestionAnswering"),QJo=o(" (I-BERT model)"),HJo=l(),lF=a("li"),f_e=a("strong"),UJo=o("layoutlmv2"),JJo=o(" \u2014 "),bz=a("a"),YJo=o("LayoutLMv2ForQuestionAnswering"),KJo=o(" (LayoutLMv2 model)"),ZJo=l(),iF=a("li"),m_e=a("strong"),eYo=o("layoutlmv3"),oYo=o(" \u2014 "),vz=a("a"),rYo=o("LayoutLMv3ForQuestionAnswering"),tYo=o(" (LayoutLMv3 model)"),aYo=l(),dF=a("li"),g_e=a("strong"),nYo=o("led"),sYo=o(" \u2014 "),Fz=a("a"),lYo=o("LEDForQuestionAnswering"),iYo=o(" (LED model)"),dYo=l(),cF=a("li"),h_e=a("strong"),cYo=o("longformer"),fYo=o(" \u2014 "),Tz=a("a"),mYo=o("LongformerForQuestionAnswering"),gYo=o(" (Longformer model)"),hYo=l(),fF=a("li"),p_e=a("strong"),pYo=o("lxmert"),uYo=o(" \u2014 "),Mz=a("a"),_Yo=o("LxmertForQuestionAnswering"),bYo=o(" (LXMERT model)"),vYo=l(),mF=a("li"),u_e=a("strong"),FYo=o("mbart"),TYo=o(" \u2014 "),Ez=a("a"),MYo=o("MBartForQuestionAnswering"),EYo=o(" (mBART model)"),CYo=l(),gF=a("li"),__e=a("strong"),wYo=o("megatron-bert"),AYo=o(" \u2014 "),Cz=a("a"),LYo=o("MegatronBertForQuestionAnswering"),yYo=o(" (Megatron-BERT model)"),xYo=l(),hF=a("li"),b_e=a("strong"),$Yo=o("mobilebert"),kYo=o(" \u2014 "),wz=a("a"),SYo=o("MobileBertForQuestionAnswering"),RYo=o(" (MobileBERT model)"),PYo=l(),pF=a("li"),v_e=a("strong"),BYo=o("mpnet"),IYo=o(" \u2014 "),Az=a("a"),NYo=o("MPNetForQuestionAnswering"),qYo=o(" (MPNet model)"),jYo=l(),uF=a("li"),F_e=a("strong"),DYo=o("nystromformer"),GYo=o(" \u2014 "),Lz=a("a"),OYo=o("NystromformerForQuestionAnswering"),VYo=o(" (Nystr\xF6mformer model)"),XYo=l(),_F=a("li"),T_e=a("strong"),zYo=o("qdqbert"),WYo=o(" \u2014 "),yz=a("a"),QYo=o("QDQBertForQuestionAnswering"),HYo=o(" (QDQBert model)"),UYo=l(),bF=a("li"),M_e=a("strong"),JYo=o("reformer"),YYo=o(" \u2014 "),xz=a("a"),KYo=o("ReformerForQuestionAnswering"),ZYo=o(" (Reformer model)"),eKo=l(),vF=a("li"),E_e=a("strong"),oKo=o("rembert"),rKo=o(" \u2014 "),$z=a("a"),tKo=o("RemBertForQuestionAnswering"),aKo=o(" (RemBERT model)"),nKo=l(),FF=a("li"),C_e=a("strong"),sKo=o("roberta"),lKo=o(" \u2014 "),kz=a("a"),iKo=o("RobertaForQuestionAnswering"),dKo=o(" (RoBERTa model)"),cKo=l(),TF=a("li"),w_e=a("strong"),fKo=o("roformer"),mKo=o(" \u2014 "),Sz=a("a"),gKo=o("RoFormerForQuestionAnswering"),hKo=o(" (RoFormer model)"),pKo=l(),MF=a("li"),A_e=a("strong"),uKo=o("splinter"),_Ko=o(" \u2014 "),Rz=a("a"),bKo=o("SplinterForQuestionAnswering"),vKo=o(" (Splinter model)"),FKo=l(),EF=a("li"),L_e=a("strong"),TKo=o("squeezebert"),MKo=o(" \u2014 "),Pz=a("a"),EKo=o("SqueezeBertForQuestionAnswering"),CKo=o(" (SqueezeBERT model)"),wKo=l(),CF=a("li"),y_e=a("strong"),AKo=o("xlm"),LKo=o(" \u2014 "),Bz=a("a"),yKo=o("XLMForQuestionAnsweringSimple"),xKo=o(" (XLM model)"),$Ko=l(),wF=a("li"),x_e=a("strong"),kKo=o("xlm-roberta"),SKo=o(" \u2014 "),Iz=a("a"),RKo=o("XLMRobertaForQuestionAnswering"),PKo=o(" (XLM-RoBERTa model)"),BKo=l(),AF=a("li"),$_e=a("strong"),IKo=o("xlm-roberta-xl"),NKo=o(" \u2014 "),Nz=a("a"),qKo=o("XLMRobertaXLForQuestionAnswering"),jKo=o(" (XLM-RoBERTa-XL model)"),DKo=l(),LF=a("li"),k_e=a("strong"),GKo=o("xlnet"),OKo=o(" \u2014 "),qz=a("a"),VKo=o("XLNetForQuestionAnsweringSimple"),XKo=o(" (XLNet model)"),zKo=l(),yF=a("li"),S_e=a("strong"),WKo=o("yoso"),QKo=o(" \u2014 "),jz=a("a"),HKo=o("YosoForQuestionAnswering"),UKo=o(" (YOSO model)"),JKo=l(),xF=a("p"),YKo=o("The model is set in evaluation mode by default using "),R_e=a("code"),KKo=o("model.eval()"),ZKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=a("code"),eZo=o("model.train()"),oZo=l(),F($F.$$.fragment),IGe=l(),fd=a("h2"),kF=a("a"),B_e=a("span"),F(OL.$$.fragment),rZo=l(),I_e=a("span"),tZo=o("AutoModelForTableQuestionAnswering"),NGe=l(),jo=a("div"),F(VL.$$.fragment),aZo=l(),md=a("p"),nZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Dz=a("a"),sZo=o("from_pretrained()"),lZo=o(" class method or the "),Gz=a("a"),iZo=o("from_config()"),dZo=o(` class
method.`),cZo=l(),XL=a("p"),fZo=o("This class cannot be instantiated directly using "),N_e=a("code"),mZo=o("__init__()"),gZo=o(" (throws an error)."),hZo=l(),pt=a("div"),F(zL.$$.fragment),pZo=l(),q_e=a("p"),uZo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_Zo=l(),gd=a("p"),bZo=o(`Note:
Loading a model from its configuration file does `),j_e=a("strong"),vZo=o("not"),FZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=a("a"),TZo=o("from_pretrained()"),MZo=o(" to load the model weights."),EZo=l(),F(SF.$$.fragment),CZo=l(),so=a("div"),F(WL.$$.fragment),wZo=l(),D_e=a("p"),AZo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),LZo=l(),Oa=a("p"),yZo=o("The model class to instantiate is selected based on the "),G_e=a("code"),xZo=o("model_type"),$Zo=o(` property of the config object (either
passed as an argument or loaded from `),O_e=a("code"),kZo=o("pretrained_model_name_or_path"),SZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=a("code"),RZo=o("pretrained_model_name_or_path"),PZo=o(":"),BZo=l(),X_e=a("ul"),RF=a("li"),z_e=a("strong"),IZo=o("tapas"),NZo=o(" \u2014 "),Vz=a("a"),qZo=o("TapasForQuestionAnswering"),jZo=o(" (TAPAS model)"),DZo=l(),PF=a("p"),GZo=o("The model is set in evaluation mode by default using "),W_e=a("code"),OZo=o("model.eval()"),VZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q_e=a("code"),XZo=o("model.train()"),zZo=l(),F(BF.$$.fragment),qGe=l(),hd=a("h2"),IF=a("a"),H_e=a("span"),F(QL.$$.fragment),WZo=l(),U_e=a("span"),QZo=o("AutoModelForImageClassification"),jGe=l(),Do=a("div"),F(HL.$$.fragment),HZo=l(),pd=a("p"),UZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Xz=a("a"),JZo=o("from_pretrained()"),YZo=o(" class method or the "),zz=a("a"),KZo=o("from_config()"),ZZo=o(` class
method.`),eer=l(),UL=a("p"),oer=o("This class cannot be instantiated directly using "),J_e=a("code"),rer=o("__init__()"),ter=o(" (throws an error)."),aer=l(),ut=a("div"),F(JL.$$.fragment),ner=l(),Y_e=a("p"),ser=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ler=l(),ud=a("p"),ier=o(`Note:
Loading a model from its configuration file does `),K_e=a("strong"),der=o("not"),cer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=a("a"),fer=o("from_pretrained()"),mer=o(" to load the model weights."),ger=l(),F(NF.$$.fragment),her=l(),lo=a("div"),F(YL.$$.fragment),per=l(),Z_e=a("p"),uer=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_er=l(),Va=a("p"),ber=o("The model class to instantiate is selected based on the "),e1e=a("code"),ver=o("model_type"),Fer=o(` property of the config object (either
passed as an argument or loaded from `),o1e=a("code"),Ter=o("pretrained_model_name_or_path"),Mer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r1e=a("code"),Eer=o("pretrained_model_name_or_path"),Cer=o(":"),wer=l(),Fe=a("ul"),qF=a("li"),t1e=a("strong"),Aer=o("beit"),Ler=o(" \u2014 "),Qz=a("a"),yer=o("BeitForImageClassification"),xer=o(" (BEiT model)"),$er=l(),jF=a("li"),a1e=a("strong"),ker=o("convnext"),Ser=o(" \u2014 "),Hz=a("a"),Rer=o("ConvNextForImageClassification"),Per=o(" (ConvNeXT model)"),Ber=l(),DF=a("li"),n1e=a("strong"),Ier=o("cvt"),Ner=o(" \u2014 "),Uz=a("a"),qer=o("CvtForImageClassification"),jer=o(" (CvT model)"),Der=l(),GF=a("li"),s1e=a("strong"),Ger=o("data2vec-vision"),Oer=o(" \u2014 "),Jz=a("a"),Ver=o("Data2VecVisionForImageClassification"),Xer=o(" (Data2VecVision model)"),zer=l(),Vs=a("li"),l1e=a("strong"),Wer=o("deit"),Qer=o(" \u2014 "),Yz=a("a"),Her=o("DeiTForImageClassification"),Uer=o(" or "),Kz=a("a"),Jer=o("DeiTForImageClassificationWithTeacher"),Yer=o(" (DeiT model)"),Ker=l(),OF=a("li"),i1e=a("strong"),Zer=o("imagegpt"),eor=o(" \u2014 "),Zz=a("a"),oor=o("ImageGPTForImageClassification"),ror=o(" (ImageGPT model)"),tor=l(),Xs=a("li"),d1e=a("strong"),aor=o("levit"),nor=o(" \u2014 "),eW=a("a"),sor=o("LevitForImageClassification"),lor=o(" or "),oW=a("a"),ior=o("LevitForImageClassificationWithTeacher"),dor=o(" (LeViT model)"),cor=l(),_t=a("li"),c1e=a("strong"),mor=o("perceiver"),gor=o(" \u2014 "),rW=a("a"),hor=o("PerceiverForImageClassificationLearned"),por=o(" or "),tW=a("a"),uor=o("PerceiverForImageClassificationFourier"),_or=o(" or "),aW=a("a"),bor=o("PerceiverForImageClassificationConvProcessing"),vor=o(" (Perceiver model)"),For=l(),VF=a("li"),f1e=a("strong"),Tor=o("poolformer"),Mor=o(" \u2014 "),nW=a("a"),Eor=o("PoolFormerForImageClassification"),Cor=o(" (PoolFormer model)"),wor=l(),XF=a("li"),m1e=a("strong"),Aor=o("regnet"),Lor=o(" \u2014 "),sW=a("a"),yor=o("RegNetForImageClassification"),xor=o(" (RegNet model)"),$or=l(),zF=a("li"),g1e=a("strong"),kor=o("resnet"),Sor=o(" \u2014 "),lW=a("a"),Ror=o("ResNetForImageClassification"),Por=o(" (ResNet model)"),Bor=l(),WF=a("li"),h1e=a("strong"),Ior=o("segformer"),Nor=o(" \u2014 "),iW=a("a"),qor=o("SegformerForImageClassification"),jor=o(" (SegFormer model)"),Dor=l(),QF=a("li"),p1e=a("strong"),Gor=o("swin"),Oor=o(" \u2014 "),dW=a("a"),Vor=o("SwinForImageClassification"),Xor=o(" (Swin Transformer model)"),zor=l(),HF=a("li"),u1e=a("strong"),Wor=o("van"),Qor=o(" \u2014 "),cW=a("a"),Hor=o("VanForImageClassification"),Uor=o(" (VAN model)"),Jor=l(),UF=a("li"),_1e=a("strong"),Yor=o("vit"),Kor=o(" \u2014 "),fW=a("a"),Zor=o("ViTForImageClassification"),err=o(" (ViT model)"),orr=l(),JF=a("p"),rrr=o("The model is set in evaluation mode by default using "),b1e=a("code"),trr=o("model.eval()"),arr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v1e=a("code"),nrr=o("model.train()"),srr=l(),F(YF.$$.fragment),DGe=l(),_d=a("h2"),KF=a("a"),F1e=a("span"),F(KL.$$.fragment),lrr=l(),T1e=a("span"),irr=o("AutoModelForVision2Seq"),GGe=l(),Go=a("div"),F(ZL.$$.fragment),drr=l(),bd=a("p"),crr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mW=a("a"),frr=o("from_pretrained()"),mrr=o(" class method or the "),gW=a("a"),grr=o("from_config()"),hrr=o(` class
method.`),prr=l(),ey=a("p"),urr=o("This class cannot be instantiated directly using "),M1e=a("code"),_rr=o("__init__()"),brr=o(" (throws an error)."),vrr=l(),bt=a("div"),F(oy.$$.fragment),Frr=l(),E1e=a("p"),Trr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Mrr=l(),vd=a("p"),Err=o(`Note:
Loading a model from its configuration file does `),C1e=a("strong"),Crr=o("not"),wrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=a("a"),Arr=o("from_pretrained()"),Lrr=o(" to load the model weights."),yrr=l(),F(ZF.$$.fragment),xrr=l(),io=a("div"),F(ry.$$.fragment),$rr=l(),w1e=a("p"),krr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Srr=l(),Xa=a("p"),Rrr=o("The model class to instantiate is selected based on the "),A1e=a("code"),Prr=o("model_type"),Brr=o(` property of the config object (either
passed as an argument or loaded from `),L1e=a("code"),Irr=o("pretrained_model_name_or_path"),Nrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=a("code"),qrr=o("pretrained_model_name_or_path"),jrr=o(":"),Drr=l(),x1e=a("ul"),eT=a("li"),$1e=a("strong"),Grr=o("vision-encoder-decoder"),Orr=o(" \u2014 "),pW=a("a"),Vrr=o("VisionEncoderDecoderModel"),Xrr=o(" (Vision Encoder decoder model)"),zrr=l(),oT=a("p"),Wrr=o("The model is set in evaluation mode by default using "),k1e=a("code"),Qrr=o("model.eval()"),Hrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S1e=a("code"),Urr=o("model.train()"),Jrr=l(),F(rT.$$.fragment),OGe=l(),Fd=a("h2"),tT=a("a"),R1e=a("span"),F(ty.$$.fragment),Yrr=l(),P1e=a("span"),Krr=o("AutoModelForVisualQuestionAnswering"),VGe=l(),Oo=a("div"),F(ay.$$.fragment),Zrr=l(),Td=a("p"),etr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),uW=a("a"),otr=o("from_pretrained()"),rtr=o(" class method or the "),_W=a("a"),ttr=o("from_config()"),atr=o(` class
method.`),ntr=l(),ny=a("p"),str=o("This class cannot be instantiated directly using "),B1e=a("code"),ltr=o("__init__()"),itr=o(" (throws an error)."),dtr=l(),vt=a("div"),F(sy.$$.fragment),ctr=l(),I1e=a("p"),ftr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),mtr=l(),Md=a("p"),gtr=o(`Note:
Loading a model from its configuration file does `),N1e=a("strong"),htr=o("not"),ptr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=a("a"),utr=o("from_pretrained()"),_tr=o(" to load the model weights."),btr=l(),F(aT.$$.fragment),vtr=l(),co=a("div"),F(ly.$$.fragment),Ftr=l(),q1e=a("p"),Ttr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Mtr=l(),za=a("p"),Etr=o("The model class to instantiate is selected based on the "),j1e=a("code"),Ctr=o("model_type"),wtr=o(` property of the config object (either
passed as an argument or loaded from `),D1e=a("code"),Atr=o("pretrained_model_name_or_path"),Ltr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=a("code"),ytr=o("pretrained_model_name_or_path"),xtr=o(":"),$tr=l(),O1e=a("ul"),nT=a("li"),V1e=a("strong"),ktr=o("vilt"),Str=o(" \u2014 "),vW=a("a"),Rtr=o("ViltForQuestionAnswering"),Ptr=o(" (ViLT model)"),Btr=l(),sT=a("p"),Itr=o("The model is set in evaluation mode by default using "),X1e=a("code"),Ntr=o("model.eval()"),qtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=a("code"),jtr=o("model.train()"),Dtr=l(),F(lT.$$.fragment),XGe=l(),Ed=a("h2"),iT=a("a"),W1e=a("span"),F(iy.$$.fragment),Gtr=l(),Q1e=a("span"),Otr=o("AutoModelForAudioClassification"),zGe=l(),Vo=a("div"),F(dy.$$.fragment),Vtr=l(),Cd=a("p"),Xtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),FW=a("a"),ztr=o("from_pretrained()"),Wtr=o(" class method or the "),TW=a("a"),Qtr=o("from_config()"),Htr=o(` class
method.`),Utr=l(),cy=a("p"),Jtr=o("This class cannot be instantiated directly using "),H1e=a("code"),Ytr=o("__init__()"),Ktr=o(" (throws an error)."),Ztr=l(),Ft=a("div"),F(fy.$$.fragment),ear=l(),U1e=a("p"),oar=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),rar=l(),wd=a("p"),tar=o(`Note:
Loading a model from its configuration file does `),J1e=a("strong"),aar=o("not"),nar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),sar=o("from_pretrained()"),lar=o(" to load the model weights."),iar=l(),F(dT.$$.fragment),dar=l(),fo=a("div"),F(my.$$.fragment),car=l(),Y1e=a("p"),far=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),mar=l(),Wa=a("p"),gar=o("The model class to instantiate is selected based on the "),K1e=a("code"),har=o("model_type"),par=o(` property of the config object (either
passed as an argument or loaded from `),Z1e=a("code"),uar=o("pretrained_model_name_or_path"),_ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=a("code"),bar=o("pretrained_model_name_or_path"),Far=o(":"),Tar=l(),Pe=a("ul"),cT=a("li"),o2e=a("strong"),Mar=o("data2vec-audio"),Ear=o(" \u2014 "),EW=a("a"),Car=o("Data2VecAudioForSequenceClassification"),war=o(" (Data2VecAudio model)"),Aar=l(),fT=a("li"),r2e=a("strong"),Lar=o("hubert"),yar=o(" \u2014 "),CW=a("a"),xar=o("HubertForSequenceClassification"),$ar=o(" (Hubert model)"),kar=l(),mT=a("li"),t2e=a("strong"),Sar=o("sew"),Rar=o(" \u2014 "),wW=a("a"),Par=o("SEWForSequenceClassification"),Bar=o(" (SEW model)"),Iar=l(),gT=a("li"),a2e=a("strong"),Nar=o("sew-d"),qar=o(" \u2014 "),AW=a("a"),jar=o("SEWDForSequenceClassification"),Dar=o(" (SEW-D model)"),Gar=l(),hT=a("li"),n2e=a("strong"),Oar=o("unispeech"),Var=o(" \u2014 "),LW=a("a"),Xar=o("UniSpeechForSequenceClassification"),zar=o(" (UniSpeech model)"),War=l(),pT=a("li"),s2e=a("strong"),Qar=o("unispeech-sat"),Har=o(" \u2014 "),yW=a("a"),Uar=o("UniSpeechSatForSequenceClassification"),Jar=o(" (UniSpeechSat model)"),Yar=l(),uT=a("li"),l2e=a("strong"),Kar=o("wav2vec2"),Zar=o(" \u2014 "),xW=a("a"),enr=o("Wav2Vec2ForSequenceClassification"),onr=o(" (Wav2Vec2 model)"),rnr=l(),_T=a("li"),i2e=a("strong"),tnr=o("wav2vec2-conformer"),anr=o(" \u2014 "),$W=a("a"),nnr=o("Wav2Vec2ConformerForSequenceClassification"),snr=o(" (Wav2Vec2-Conformer model)"),lnr=l(),bT=a("li"),d2e=a("strong"),inr=o("wavlm"),dnr=o(" \u2014 "),kW=a("a"),cnr=o("WavLMForSequenceClassification"),fnr=o(" (WavLM model)"),mnr=l(),vT=a("p"),gnr=o("The model is set in evaluation mode by default using "),c2e=a("code"),hnr=o("model.eval()"),pnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f2e=a("code"),unr=o("model.train()"),_nr=l(),F(FT.$$.fragment),WGe=l(),Ad=a("h2"),TT=a("a"),m2e=a("span"),F(gy.$$.fragment),bnr=l(),g2e=a("span"),vnr=o("AutoModelForAudioFrameClassification"),QGe=l(),Xo=a("div"),F(hy.$$.fragment),Fnr=l(),Ld=a("p"),Tnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),SW=a("a"),Mnr=o("from_pretrained()"),Enr=o(" class method or the "),RW=a("a"),Cnr=o("from_config()"),wnr=o(` class
method.`),Anr=l(),py=a("p"),Lnr=o("This class cannot be instantiated directly using "),h2e=a("code"),ynr=o("__init__()"),xnr=o(" (throws an error)."),$nr=l(),Tt=a("div"),F(uy.$$.fragment),knr=l(),p2e=a("p"),Snr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Rnr=l(),yd=a("p"),Pnr=o(`Note:
Loading a model from its configuration file does `),u2e=a("strong"),Bnr=o("not"),Inr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=a("a"),Nnr=o("from_pretrained()"),qnr=o(" to load the model weights."),jnr=l(),F(MT.$$.fragment),Dnr=l(),mo=a("div"),F(_y.$$.fragment),Gnr=l(),_2e=a("p"),Onr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Vnr=l(),Qa=a("p"),Xnr=o("The model class to instantiate is selected based on the "),b2e=a("code"),znr=o("model_type"),Wnr=o(` property of the config object (either
passed as an argument or loaded from `),v2e=a("code"),Qnr=o("pretrained_model_name_or_path"),Hnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=a("code"),Unr=o("pretrained_model_name_or_path"),Jnr=o(":"),Ynr=l(),et=a("ul"),ET=a("li"),T2e=a("strong"),Knr=o("data2vec-audio"),Znr=o(" \u2014 "),BW=a("a"),esr=o("Data2VecAudioForAudioFrameClassification"),osr=o(" (Data2VecAudio model)"),rsr=l(),CT=a("li"),M2e=a("strong"),tsr=o("unispeech-sat"),asr=o(" \u2014 "),IW=a("a"),nsr=o("UniSpeechSatForAudioFrameClassification"),ssr=o(" (UniSpeechSat model)"),lsr=l(),wT=a("li"),E2e=a("strong"),isr=o("wav2vec2"),dsr=o(" \u2014 "),NW=a("a"),csr=o("Wav2Vec2ForAudioFrameClassification"),fsr=o(" (Wav2Vec2 model)"),msr=l(),AT=a("li"),C2e=a("strong"),gsr=o("wav2vec2-conformer"),hsr=o(" \u2014 "),qW=a("a"),psr=o("Wav2Vec2ConformerForAudioFrameClassification"),usr=o(" (Wav2Vec2-Conformer model)"),_sr=l(),LT=a("li"),w2e=a("strong"),bsr=o("wavlm"),vsr=o(" \u2014 "),jW=a("a"),Fsr=o("WavLMForAudioFrameClassification"),Tsr=o(" (WavLM model)"),Msr=l(),yT=a("p"),Esr=o("The model is set in evaluation mode by default using "),A2e=a("code"),Csr=o("model.eval()"),wsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L2e=a("code"),Asr=o("model.train()"),Lsr=l(),F(xT.$$.fragment),HGe=l(),xd=a("h2"),$T=a("a"),y2e=a("span"),F(by.$$.fragment),ysr=l(),x2e=a("span"),xsr=o("AutoModelForCTC"),UGe=l(),zo=a("div"),F(vy.$$.fragment),$sr=l(),$d=a("p"),ksr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),DW=a("a"),Ssr=o("from_pretrained()"),Rsr=o(" class method or the "),GW=a("a"),Psr=o("from_config()"),Bsr=o(` class
method.`),Isr=l(),Fy=a("p"),Nsr=o("This class cannot be instantiated directly using "),$2e=a("code"),qsr=o("__init__()"),jsr=o(" (throws an error)."),Dsr=l(),Mt=a("div"),F(Ty.$$.fragment),Gsr=l(),k2e=a("p"),Osr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Vsr=l(),kd=a("p"),Xsr=o(`Note:
Loading a model from its configuration file does `),S2e=a("strong"),zsr=o("not"),Wsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=a("a"),Qsr=o("from_pretrained()"),Hsr=o(" to load the model weights."),Usr=l(),F(kT.$$.fragment),Jsr=l(),go=a("div"),F(My.$$.fragment),Ysr=l(),R2e=a("p"),Ksr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Zsr=l(),Ha=a("p"),elr=o("The model class to instantiate is selected based on the "),P2e=a("code"),olr=o("model_type"),rlr=o(` property of the config object (either
passed as an argument or loaded from `),B2e=a("code"),tlr=o("pretrained_model_name_or_path"),alr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=a("code"),nlr=o("pretrained_model_name_or_path"),slr=o(":"),llr=l(),Le=a("ul"),ST=a("li"),N2e=a("strong"),ilr=o("data2vec-audio"),dlr=o(" \u2014 "),VW=a("a"),clr=o("Data2VecAudioForCTC"),flr=o(" (Data2VecAudio model)"),mlr=l(),RT=a("li"),q2e=a("strong"),glr=o("hubert"),hlr=o(" \u2014 "),XW=a("a"),plr=o("HubertForCTC"),ulr=o(" (Hubert model)"),_lr=l(),PT=a("li"),j2e=a("strong"),blr=o("mctct"),vlr=o(" \u2014 "),zW=a("a"),Flr=o("MCTCTForCTC"),Tlr=o(" (M-CTC-T model)"),Mlr=l(),BT=a("li"),D2e=a("strong"),Elr=o("sew"),Clr=o(" \u2014 "),WW=a("a"),wlr=o("SEWForCTC"),Alr=o(" (SEW model)"),Llr=l(),IT=a("li"),G2e=a("strong"),ylr=o("sew-d"),xlr=o(" \u2014 "),QW=a("a"),$lr=o("SEWDForCTC"),klr=o(" (SEW-D model)"),Slr=l(),NT=a("li"),O2e=a("strong"),Rlr=o("unispeech"),Plr=o(" \u2014 "),HW=a("a"),Blr=o("UniSpeechForCTC"),Ilr=o(" (UniSpeech model)"),Nlr=l(),qT=a("li"),V2e=a("strong"),qlr=o("unispeech-sat"),jlr=o(" \u2014 "),UW=a("a"),Dlr=o("UniSpeechSatForCTC"),Glr=o(" (UniSpeechSat model)"),Olr=l(),jT=a("li"),X2e=a("strong"),Vlr=o("wav2vec2"),Xlr=o(" \u2014 "),JW=a("a"),zlr=o("Wav2Vec2ForCTC"),Wlr=o(" (Wav2Vec2 model)"),Qlr=l(),DT=a("li"),z2e=a("strong"),Hlr=o("wav2vec2-conformer"),Ulr=o(" \u2014 "),YW=a("a"),Jlr=o("Wav2Vec2ConformerForCTC"),Ylr=o(" (Wav2Vec2-Conformer model)"),Klr=l(),GT=a("li"),W2e=a("strong"),Zlr=o("wavlm"),eir=o(" \u2014 "),KW=a("a"),oir=o("WavLMForCTC"),rir=o(" (WavLM model)"),tir=l(),OT=a("p"),air=o("The model is set in evaluation mode by default using "),Q2e=a("code"),nir=o("model.eval()"),sir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H2e=a("code"),lir=o("model.train()"),iir=l(),F(VT.$$.fragment),JGe=l(),Sd=a("h2"),XT=a("a"),U2e=a("span"),F(Ey.$$.fragment),dir=l(),J2e=a("span"),cir=o("AutoModelForSpeechSeq2Seq"),YGe=l(),Wo=a("div"),F(Cy.$$.fragment),fir=l(),Rd=a("p"),mir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZW=a("a"),gir=o("from_pretrained()"),hir=o(" class method or the "),eQ=a("a"),pir=o("from_config()"),uir=o(` class
method.`),_ir=l(),wy=a("p"),bir=o("This class cannot be instantiated directly using "),Y2e=a("code"),vir=o("__init__()"),Fir=o(" (throws an error)."),Tir=l(),Et=a("div"),F(Ay.$$.fragment),Mir=l(),K2e=a("p"),Eir=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Cir=l(),Pd=a("p"),wir=o(`Note:
Loading a model from its configuration file does `),Z2e=a("strong"),Air=o("not"),Lir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=a("a"),yir=o("from_pretrained()"),xir=o(" to load the model weights."),$ir=l(),F(zT.$$.fragment),kir=l(),ho=a("div"),F(Ly.$$.fragment),Sir=l(),ebe=a("p"),Rir=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Pir=l(),Ua=a("p"),Bir=o("The model class to instantiate is selected based on the "),obe=a("code"),Iir=o("model_type"),Nir=o(` property of the config object (either
passed as an argument or loaded from `),rbe=a("code"),qir=o("pretrained_model_name_or_path"),jir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tbe=a("code"),Dir=o("pretrained_model_name_or_path"),Gir=o(":"),Oir=l(),yy=a("ul"),WT=a("li"),abe=a("strong"),Vir=o("speech-encoder-decoder"),Xir=o(" \u2014 "),rQ=a("a"),zir=o("SpeechEncoderDecoderModel"),Wir=o(" (Speech Encoder decoder model)"),Qir=l(),QT=a("li"),nbe=a("strong"),Hir=o("speech_to_text"),Uir=o(" \u2014 "),tQ=a("a"),Jir=o("Speech2TextForConditionalGeneration"),Yir=o(" (Speech2Text model)"),Kir=l(),HT=a("p"),Zir=o("The model is set in evaluation mode by default using "),sbe=a("code"),edr=o("model.eval()"),odr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lbe=a("code"),rdr=o("model.train()"),tdr=l(),F(UT.$$.fragment),KGe=l(),Bd=a("h2"),JT=a("a"),ibe=a("span"),F(xy.$$.fragment),adr=l(),dbe=a("span"),ndr=o("AutoModelForAudioXVector"),ZGe=l(),Qo=a("div"),F($y.$$.fragment),sdr=l(),Id=a("p"),ldr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),aQ=a("a"),idr=o("from_pretrained()"),ddr=o(" class method or the "),nQ=a("a"),cdr=o("from_config()"),fdr=o(` class
method.`),mdr=l(),ky=a("p"),gdr=o("This class cannot be instantiated directly using "),cbe=a("code"),hdr=o("__init__()"),pdr=o(" (throws an error)."),udr=l(),Ct=a("div"),F(Sy.$$.fragment),_dr=l(),fbe=a("p"),bdr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),vdr=l(),Nd=a("p"),Fdr=o(`Note:
Loading a model from its configuration file does `),mbe=a("strong"),Tdr=o("not"),Mdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=a("a"),Edr=o("from_pretrained()"),Cdr=o(" to load the model weights."),wdr=l(),F(YT.$$.fragment),Adr=l(),po=a("div"),F(Ry.$$.fragment),Ldr=l(),gbe=a("p"),ydr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),xdr=l(),Ja=a("p"),$dr=o("The model class to instantiate is selected based on the "),hbe=a("code"),kdr=o("model_type"),Sdr=o(` property of the config object (either
passed as an argument or loaded from `),pbe=a("code"),Rdr=o("pretrained_model_name_or_path"),Pdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=a("code"),Bdr=o("pretrained_model_name_or_path"),Idr=o(":"),Ndr=l(),ot=a("ul"),KT=a("li"),_be=a("strong"),qdr=o("data2vec-audio"),jdr=o(" \u2014 "),lQ=a("a"),Ddr=o("Data2VecAudioForXVector"),Gdr=o(" (Data2VecAudio model)"),Odr=l(),ZT=a("li"),bbe=a("strong"),Vdr=o("unispeech-sat"),Xdr=o(" \u2014 "),iQ=a("a"),zdr=o("UniSpeechSatForXVector"),Wdr=o(" (UniSpeechSat model)"),Qdr=l(),e7=a("li"),vbe=a("strong"),Hdr=o("wav2vec2"),Udr=o(" \u2014 "),dQ=a("a"),Jdr=o("Wav2Vec2ForXVector"),Ydr=o(" (Wav2Vec2 model)"),Kdr=l(),o7=a("li"),Fbe=a("strong"),Zdr=o("wav2vec2-conformer"),ecr=o(" \u2014 "),cQ=a("a"),ocr=o("Wav2Vec2ConformerForXVector"),rcr=o(" (Wav2Vec2-Conformer model)"),tcr=l(),r7=a("li"),Tbe=a("strong"),acr=o("wavlm"),ncr=o(" \u2014 "),fQ=a("a"),scr=o("WavLMForXVector"),lcr=o(" (WavLM model)"),icr=l(),t7=a("p"),dcr=o("The model is set in evaluation mode by default using "),Mbe=a("code"),ccr=o("model.eval()"),fcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ebe=a("code"),mcr=o("model.train()"),gcr=l(),F(a7.$$.fragment),eOe=l(),qd=a("h2"),n7=a("a"),Cbe=a("span"),F(Py.$$.fragment),hcr=l(),wbe=a("span"),pcr=o("AutoModelForMaskedImageModeling"),oOe=l(),Ho=a("div"),F(By.$$.fragment),ucr=l(),jd=a("p"),_cr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),mQ=a("a"),bcr=o("from_pretrained()"),vcr=o(" class method or the "),gQ=a("a"),Fcr=o("from_config()"),Tcr=o(` class
method.`),Mcr=l(),Iy=a("p"),Ecr=o("This class cannot be instantiated directly using "),Abe=a("code"),Ccr=o("__init__()"),wcr=o(" (throws an error)."),Acr=l(),wt=a("div"),F(Ny.$$.fragment),Lcr=l(),Lbe=a("p"),ycr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),xcr=l(),Dd=a("p"),$cr=o(`Note:
Loading a model from its configuration file does `),ybe=a("strong"),kcr=o("not"),Scr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hQ=a("a"),Rcr=o("from_pretrained()"),Pcr=o(" to load the model weights."),Bcr=l(),F(s7.$$.fragment),Icr=l(),uo=a("div"),F(qy.$$.fragment),Ncr=l(),xbe=a("p"),qcr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jcr=l(),Ya=a("p"),Dcr=o("The model class to instantiate is selected based on the "),$be=a("code"),Gcr=o("model_type"),Ocr=o(` property of the config object (either
passed as an argument or loaded from `),kbe=a("code"),Vcr=o("pretrained_model_name_or_path"),Xcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=a("code"),zcr=o("pretrained_model_name_or_path"),Wcr=o(":"),Qcr=l(),Gd=a("ul"),l7=a("li"),Rbe=a("strong"),Hcr=o("deit"),Ucr=o(" \u2014 "),pQ=a("a"),Jcr=o("DeiTForMaskedImageModeling"),Ycr=o(" (DeiT model)"),Kcr=l(),i7=a("li"),Pbe=a("strong"),Zcr=o("swin"),efr=o(" \u2014 "),uQ=a("a"),ofr=o("SwinForMaskedImageModeling"),rfr=o(" (Swin Transformer model)"),tfr=l(),d7=a("li"),Bbe=a("strong"),afr=o("vit"),nfr=o(" \u2014 "),_Q=a("a"),sfr=o("ViTForMaskedImageModeling"),lfr=o(" (ViT model)"),ifr=l(),c7=a("p"),dfr=o("The model is set in evaluation mode by default using "),Ibe=a("code"),cfr=o("model.eval()"),ffr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nbe=a("code"),mfr=o("model.train()"),gfr=l(),F(f7.$$.fragment),rOe=l(),Od=a("h2"),m7=a("a"),qbe=a("span"),F(jy.$$.fragment),hfr=l(),jbe=a("span"),pfr=o("AutoModelForObjectDetection"),tOe=l(),Uo=a("div"),F(Dy.$$.fragment),ufr=l(),Vd=a("p"),_fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),bQ=a("a"),bfr=o("from_pretrained()"),vfr=o(" class method or the "),vQ=a("a"),Ffr=o("from_config()"),Tfr=o(` class
method.`),Mfr=l(),Gy=a("p"),Efr=o("This class cannot be instantiated directly using "),Dbe=a("code"),Cfr=o("__init__()"),wfr=o(" (throws an error)."),Afr=l(),At=a("div"),F(Oy.$$.fragment),Lfr=l(),Gbe=a("p"),yfr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),xfr=l(),Xd=a("p"),$fr=o(`Note:
Loading a model from its configuration file does `),Obe=a("strong"),kfr=o("not"),Sfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),Rfr=o("from_pretrained()"),Pfr=o(" to load the model weights."),Bfr=l(),F(g7.$$.fragment),Ifr=l(),_o=a("div"),F(Vy.$$.fragment),Nfr=l(),Vbe=a("p"),qfr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),jfr=l(),Ka=a("p"),Dfr=o("The model class to instantiate is selected based on the "),Xbe=a("code"),Gfr=o("model_type"),Ofr=o(` property of the config object (either
passed as an argument or loaded from `),zbe=a("code"),Vfr=o("pretrained_model_name_or_path"),Xfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=a("code"),zfr=o("pretrained_model_name_or_path"),Wfr=o(":"),Qfr=l(),Xy=a("ul"),h7=a("li"),Qbe=a("strong"),Hfr=o("detr"),Ufr=o(" \u2014 "),TQ=a("a"),Jfr=o("DetrForObjectDetection"),Yfr=o(" (DETR model)"),Kfr=l(),p7=a("li"),Hbe=a("strong"),Zfr=o("yolos"),emr=o(" \u2014 "),MQ=a("a"),omr=o("YolosForObjectDetection"),rmr=o(" (YOLOS model)"),tmr=l(),u7=a("p"),amr=o("The model is set in evaluation mode by default using "),Ube=a("code"),nmr=o("model.eval()"),smr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jbe=a("code"),lmr=o("model.train()"),imr=l(),F(_7.$$.fragment),aOe=l(),zd=a("h2"),b7=a("a"),Ybe=a("span"),F(zy.$$.fragment),dmr=l(),Kbe=a("span"),cmr=o("AutoModelForImageSegmentation"),nOe=l(),Jo=a("div"),F(Wy.$$.fragment),fmr=l(),Wd=a("p"),mmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),EQ=a("a"),gmr=o("from_pretrained()"),hmr=o(" class method or the "),CQ=a("a"),pmr=o("from_config()"),umr=o(` class
method.`),_mr=l(),Qy=a("p"),bmr=o("This class cannot be instantiated directly using "),Zbe=a("code"),vmr=o("__init__()"),Fmr=o(" (throws an error)."),Tmr=l(),Lt=a("div"),F(Hy.$$.fragment),Mmr=l(),eve=a("p"),Emr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Cmr=l(),Qd=a("p"),wmr=o(`Note:
Loading a model from its configuration file does `),ove=a("strong"),Amr=o("not"),Lmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=a("a"),ymr=o("from_pretrained()"),xmr=o(" to load the model weights."),$mr=l(),F(v7.$$.fragment),kmr=l(),bo=a("div"),F(Uy.$$.fragment),Smr=l(),rve=a("p"),Rmr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Pmr=l(),Za=a("p"),Bmr=o("The model class to instantiate is selected based on the "),tve=a("code"),Imr=o("model_type"),Nmr=o(` property of the config object (either
passed as an argument or loaded from `),ave=a("code"),qmr=o("pretrained_model_name_or_path"),jmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=a("code"),Dmr=o("pretrained_model_name_or_path"),Gmr=o(":"),Omr=l(),sve=a("ul"),F7=a("li"),lve=a("strong"),Vmr=o("detr"),Xmr=o(" \u2014 "),AQ=a("a"),zmr=o("DetrForSegmentation"),Wmr=o(" (DETR model)"),Qmr=l(),T7=a("p"),Hmr=o("The model is set in evaluation mode by default using "),ive=a("code"),Umr=o("model.eval()"),Jmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dve=a("code"),Ymr=o("model.train()"),Kmr=l(),F(M7.$$.fragment),sOe=l(),Hd=a("h2"),E7=a("a"),cve=a("span"),F(Jy.$$.fragment),Zmr=l(),fve=a("span"),egr=o("AutoModelForSemanticSegmentation"),lOe=l(),Yo=a("div"),F(Yy.$$.fragment),ogr=l(),Ud=a("p"),rgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),LQ=a("a"),tgr=o("from_pretrained()"),agr=o(" class method or the "),yQ=a("a"),ngr=o("from_config()"),sgr=o(` class
method.`),lgr=l(),Ky=a("p"),igr=o("This class cannot be instantiated directly using "),mve=a("code"),dgr=o("__init__()"),cgr=o(" (throws an error)."),fgr=l(),yt=a("div"),F(Zy.$$.fragment),mgr=l(),gve=a("p"),ggr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),hgr=l(),Jd=a("p"),pgr=o(`Note:
Loading a model from its configuration file does `),hve=a("strong"),ugr=o("not"),_gr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=a("a"),bgr=o("from_pretrained()"),vgr=o(" to load the model weights."),Fgr=l(),F(C7.$$.fragment),Tgr=l(),vo=a("div"),F(e8.$$.fragment),Mgr=l(),pve=a("p"),Egr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Cgr=l(),en=a("p"),wgr=o("The model class to instantiate is selected based on the "),uve=a("code"),Agr=o("model_type"),Lgr=o(` property of the config object (either
passed as an argument or loaded from `),_ve=a("code"),ygr=o("pretrained_model_name_or_path"),xgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=a("code"),$gr=o("pretrained_model_name_or_path"),kgr=o(":"),Sgr=l(),on=a("ul"),w7=a("li"),vve=a("strong"),Rgr=o("beit"),Pgr=o(" \u2014 "),$Q=a("a"),Bgr=o("BeitForSemanticSegmentation"),Igr=o(" (BEiT model)"),Ngr=l(),A7=a("li"),Fve=a("strong"),qgr=o("data2vec-vision"),jgr=o(" \u2014 "),kQ=a("a"),Dgr=o("Data2VecVisionForSemanticSegmentation"),Ggr=o(" (Data2VecVision model)"),Ogr=l(),L7=a("li"),Tve=a("strong"),Vgr=o("dpt"),Xgr=o(" \u2014 "),SQ=a("a"),zgr=o("DPTForSemanticSegmentation"),Wgr=o(" (DPT model)"),Qgr=l(),y7=a("li"),Mve=a("strong"),Hgr=o("segformer"),Ugr=o(" \u2014 "),RQ=a("a"),Jgr=o("SegformerForSemanticSegmentation"),Ygr=o(" (SegFormer model)"),Kgr=l(),x7=a("p"),Zgr=o("The model is set in evaluation mode by default using "),Eve=a("code"),ehr=o("model.eval()"),ohr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cve=a("code"),rhr=o("model.train()"),thr=l(),F($7.$$.fragment),iOe=l(),Yd=a("h2"),k7=a("a"),wve=a("span"),F(o8.$$.fragment),ahr=l(),Ave=a("span"),nhr=o("AutoModelForInstanceSegmentation"),dOe=l(),Ko=a("div"),F(r8.$$.fragment),shr=l(),Kd=a("p"),lhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),PQ=a("a"),ihr=o("from_pretrained()"),dhr=o(" class method or the "),BQ=a("a"),chr=o("from_config()"),fhr=o(` class
method.`),mhr=l(),t8=a("p"),ghr=o("This class cannot be instantiated directly using "),Lve=a("code"),hhr=o("__init__()"),phr=o(" (throws an error)."),uhr=l(),xt=a("div"),F(a8.$$.fragment),_hr=l(),yve=a("p"),bhr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),vhr=l(),Zd=a("p"),Fhr=o(`Note:
Loading a model from its configuration file does `),xve=a("strong"),Thr=o("not"),Mhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),Ehr=o("from_pretrained()"),Chr=o(" to load the model weights."),whr=l(),F(S7.$$.fragment),Ahr=l(),Fo=a("div"),F(n8.$$.fragment),Lhr=l(),$ve=a("p"),yhr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),xhr=l(),rn=a("p"),$hr=o("The model class to instantiate is selected based on the "),kve=a("code"),khr=o("model_type"),Shr=o(` property of the config object (either
passed as an argument or loaded from `),Sve=a("code"),Rhr=o("pretrained_model_name_or_path"),Phr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=a("code"),Bhr=o("pretrained_model_name_or_path"),Ihr=o(":"),Nhr=l(),Pve=a("ul"),R7=a("li"),Bve=a("strong"),qhr=o("maskformer"),jhr=o(" \u2014 "),NQ=a("a"),Dhr=o("MaskFormerForInstanceSegmentation"),Ghr=o(" (MaskFormer model)"),Ohr=l(),P7=a("p"),Vhr=o("The model is set in evaluation mode by default using "),Ive=a("code"),Xhr=o("model.eval()"),zhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nve=a("code"),Whr=o("model.train()"),Qhr=l(),F(B7.$$.fragment),cOe=l(),ec=a("h2"),I7=a("a"),qve=a("span"),F(s8.$$.fragment),Hhr=l(),jve=a("span"),Uhr=o("TFAutoModel"),fOe=l(),Zo=a("div"),F(l8.$$.fragment),Jhr=l(),oc=a("p"),Yhr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qQ=a("a"),Khr=o("from_pretrained()"),Zhr=o(" class method or the "),jQ=a("a"),epr=o("from_config()"),opr=o(` class
method.`),rpr=l(),i8=a("p"),tpr=o("This class cannot be instantiated directly using "),Dve=a("code"),apr=o("__init__()"),npr=o(" (throws an error)."),spr=l(),$t=a("div"),F(d8.$$.fragment),lpr=l(),Gve=a("p"),ipr=o("Instantiates one of the base model classes of the library from a configuration."),dpr=l(),rc=a("p"),cpr=o(`Note:
Loading a model from its configuration file does `),Ove=a("strong"),fpr=o("not"),mpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),gpr=o("from_pretrained()"),hpr=o(" to load the model weights."),ppr=l(),F(N7.$$.fragment),upr=l(),Lr=a("div"),F(c8.$$.fragment),_pr=l(),Vve=a("p"),bpr=o("Instantiate one of the base model classes of the library from a pretrained model."),vpr=l(),tn=a("p"),Fpr=o("The model class to instantiate is selected based on the "),Xve=a("code"),Tpr=o("model_type"),Mpr=o(` property of the config object (either
passed as an argument or loaded from `),zve=a("code"),Epr=o("pretrained_model_name_or_path"),Cpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=a("code"),wpr=o("pretrained_model_name_or_path"),Apr=o(":"),Lpr=l(),q=a("ul"),q7=a("li"),Qve=a("strong"),ypr=o("albert"),xpr=o(" \u2014 "),GQ=a("a"),$pr=o("TFAlbertModel"),kpr=o(" (ALBERT model)"),Spr=l(),j7=a("li"),Hve=a("strong"),Rpr=o("bart"),Ppr=o(" \u2014 "),OQ=a("a"),Bpr=o("TFBartModel"),Ipr=o(" (BART model)"),Npr=l(),D7=a("li"),Uve=a("strong"),qpr=o("bert"),jpr=o(" \u2014 "),VQ=a("a"),Dpr=o("TFBertModel"),Gpr=o(" (BERT model)"),Opr=l(),G7=a("li"),Jve=a("strong"),Vpr=o("blenderbot"),Xpr=o(" \u2014 "),XQ=a("a"),zpr=o("TFBlenderbotModel"),Wpr=o(" (Blenderbot model)"),Qpr=l(),O7=a("li"),Yve=a("strong"),Hpr=o("blenderbot-small"),Upr=o(" \u2014 "),zQ=a("a"),Jpr=o("TFBlenderbotSmallModel"),Ypr=o(" (BlenderbotSmall model)"),Kpr=l(),V7=a("li"),Kve=a("strong"),Zpr=o("camembert"),eur=o(" \u2014 "),WQ=a("a"),our=o("TFCamembertModel"),rur=o(" (CamemBERT model)"),tur=l(),X7=a("li"),Zve=a("strong"),aur=o("clip"),nur=o(" \u2014 "),QQ=a("a"),sur=o("TFCLIPModel"),lur=o(" (CLIP model)"),iur=l(),z7=a("li"),e0e=a("strong"),dur=o("convbert"),cur=o(" \u2014 "),HQ=a("a"),fur=o("TFConvBertModel"),mur=o(" (ConvBERT model)"),gur=l(),W7=a("li"),o0e=a("strong"),hur=o("convnext"),pur=o(" \u2014 "),UQ=a("a"),uur=o("TFConvNextModel"),_ur=o(" (ConvNeXT model)"),bur=l(),Q7=a("li"),r0e=a("strong"),vur=o("ctrl"),Fur=o(" \u2014 "),JQ=a("a"),Tur=o("TFCTRLModel"),Mur=o(" (CTRL model)"),Eur=l(),H7=a("li"),t0e=a("strong"),Cur=o("data2vec-vision"),wur=o(" \u2014 "),YQ=a("a"),Aur=o("TFData2VecVisionModel"),Lur=o(" (Data2VecVision model)"),yur=l(),U7=a("li"),a0e=a("strong"),xur=o("deberta"),$ur=o(" \u2014 "),KQ=a("a"),kur=o("TFDebertaModel"),Sur=o(" (DeBERTa model)"),Rur=l(),J7=a("li"),n0e=a("strong"),Pur=o("deberta-v2"),Bur=o(" \u2014 "),ZQ=a("a"),Iur=o("TFDebertaV2Model"),Nur=o(" (DeBERTa-v2 model)"),qur=l(),Y7=a("li"),s0e=a("strong"),jur=o("distilbert"),Dur=o(" \u2014 "),eH=a("a"),Gur=o("TFDistilBertModel"),Our=o(" (DistilBERT model)"),Vur=l(),K7=a("li"),l0e=a("strong"),Xur=o("dpr"),zur=o(" \u2014 "),oH=a("a"),Wur=o("TFDPRQuestionEncoder"),Qur=o(" (DPR model)"),Hur=l(),Z7=a("li"),i0e=a("strong"),Uur=o("electra"),Jur=o(" \u2014 "),rH=a("a"),Yur=o("TFElectraModel"),Kur=o(" (ELECTRA model)"),Zur=l(),e9=a("li"),d0e=a("strong"),e_r=o("flaubert"),o_r=o(" \u2014 "),tH=a("a"),r_r=o("TFFlaubertModel"),t_r=o(" (FlauBERT model)"),a_r=l(),zs=a("li"),c0e=a("strong"),n_r=o("funnel"),s_r=o(" \u2014 "),aH=a("a"),l_r=o("TFFunnelModel"),i_r=o(" or "),nH=a("a"),d_r=o("TFFunnelBaseModel"),c_r=o(" (Funnel Transformer model)"),f_r=l(),o9=a("li"),f0e=a("strong"),m_r=o("gpt2"),g_r=o(" \u2014 "),sH=a("a"),h_r=o("TFGPT2Model"),p_r=o(" (OpenAI GPT-2 model)"),u_r=l(),r9=a("li"),m0e=a("strong"),__r=o("gptj"),b_r=o(" \u2014 "),lH=a("a"),v_r=o("TFGPTJModel"),F_r=o(" (GPT-J model)"),T_r=l(),t9=a("li"),g0e=a("strong"),M_r=o("hubert"),E_r=o(" \u2014 "),iH=a("a"),C_r=o("TFHubertModel"),w_r=o(" (Hubert model)"),A_r=l(),a9=a("li"),h0e=a("strong"),L_r=o("layoutlm"),y_r=o(" \u2014 "),dH=a("a"),x_r=o("TFLayoutLMModel"),$_r=o(" (LayoutLM model)"),k_r=l(),n9=a("li"),p0e=a("strong"),S_r=o("led"),R_r=o(" \u2014 "),cH=a("a"),P_r=o("TFLEDModel"),B_r=o(" (LED model)"),I_r=l(),s9=a("li"),u0e=a("strong"),N_r=o("longformer"),q_r=o(" \u2014 "),fH=a("a"),j_r=o("TFLongformerModel"),D_r=o(" (Longformer model)"),G_r=l(),l9=a("li"),_0e=a("strong"),O_r=o("lxmert"),V_r=o(" \u2014 "),mH=a("a"),X_r=o("TFLxmertModel"),z_r=o(" (LXMERT model)"),W_r=l(),i9=a("li"),b0e=a("strong"),Q_r=o("marian"),H_r=o(" \u2014 "),gH=a("a"),U_r=o("TFMarianModel"),J_r=o(" (Marian model)"),Y_r=l(),d9=a("li"),v0e=a("strong"),K_r=o("mbart"),Z_r=o(" \u2014 "),hH=a("a"),e1r=o("TFMBartModel"),o1r=o(" (mBART model)"),r1r=l(),c9=a("li"),F0e=a("strong"),t1r=o("mobilebert"),a1r=o(" \u2014 "),pH=a("a"),n1r=o("TFMobileBertModel"),s1r=o(" (MobileBERT model)"),l1r=l(),f9=a("li"),T0e=a("strong"),i1r=o("mpnet"),d1r=o(" \u2014 "),uH=a("a"),c1r=o("TFMPNetModel"),f1r=o(" (MPNet model)"),m1r=l(),m9=a("li"),M0e=a("strong"),g1r=o("mt5"),h1r=o(" \u2014 "),_H=a("a"),p1r=o("TFMT5Model"),u1r=o(" (MT5 model)"),_1r=l(),g9=a("li"),E0e=a("strong"),b1r=o("openai-gpt"),v1r=o(" \u2014 "),bH=a("a"),F1r=o("TFOpenAIGPTModel"),T1r=o(" (OpenAI GPT model)"),M1r=l(),h9=a("li"),C0e=a("strong"),E1r=o("opt"),C1r=o(" \u2014 "),vH=a("a"),w1r=o("TFOPTModel"),A1r=o(" (OPT model)"),L1r=l(),p9=a("li"),w0e=a("strong"),y1r=o("pegasus"),x1r=o(" \u2014 "),FH=a("a"),$1r=o("TFPegasusModel"),k1r=o(" (Pegasus model)"),S1r=l(),u9=a("li"),A0e=a("strong"),R1r=o("rembert"),P1r=o(" \u2014 "),TH=a("a"),B1r=o("TFRemBertModel"),I1r=o(" (RemBERT model)"),N1r=l(),_9=a("li"),L0e=a("strong"),q1r=o("roberta"),j1r=o(" \u2014 "),MH=a("a"),D1r=o("TFRobertaModel"),G1r=o(" (RoBERTa model)"),O1r=l(),b9=a("li"),y0e=a("strong"),V1r=o("roformer"),X1r=o(" \u2014 "),EH=a("a"),z1r=o("TFRoFormerModel"),W1r=o(" (RoFormer model)"),Q1r=l(),v9=a("li"),x0e=a("strong"),H1r=o("speech_to_text"),U1r=o(" \u2014 "),CH=a("a"),J1r=o("TFSpeech2TextModel"),Y1r=o(" (Speech2Text model)"),K1r=l(),F9=a("li"),$0e=a("strong"),Z1r=o("swin"),e2r=o(" \u2014 "),wH=a("a"),o2r=o("TFSwinModel"),r2r=o(" (Swin Transformer model)"),t2r=l(),T9=a("li"),k0e=a("strong"),a2r=o("t5"),n2r=o(" \u2014 "),AH=a("a"),s2r=o("TFT5Model"),l2r=o(" (T5 model)"),i2r=l(),M9=a("li"),S0e=a("strong"),d2r=o("tapas"),c2r=o(" \u2014 "),LH=a("a"),f2r=o("TFTapasModel"),m2r=o(" (TAPAS model)"),g2r=l(),E9=a("li"),R0e=a("strong"),h2r=o("transfo-xl"),p2r=o(" \u2014 "),yH=a("a"),u2r=o("TFTransfoXLModel"),_2r=o(" (Transformer-XL model)"),b2r=l(),C9=a("li"),P0e=a("strong"),v2r=o("vit"),F2r=o(" \u2014 "),xH=a("a"),T2r=o("TFViTModel"),M2r=o(" (ViT model)"),E2r=l(),w9=a("li"),B0e=a("strong"),C2r=o("vit_mae"),w2r=o(" \u2014 "),$H=a("a"),A2r=o("TFViTMAEModel"),L2r=o(" (ViTMAE model)"),y2r=l(),A9=a("li"),I0e=a("strong"),x2r=o("wav2vec2"),$2r=o(" \u2014 "),kH=a("a"),k2r=o("TFWav2Vec2Model"),S2r=o(" (Wav2Vec2 model)"),R2r=l(),L9=a("li"),N0e=a("strong"),P2r=o("xlm"),B2r=o(" \u2014 "),SH=a("a"),I2r=o("TFXLMModel"),N2r=o(" (XLM model)"),q2r=l(),y9=a("li"),q0e=a("strong"),j2r=o("xlm-roberta"),D2r=o(" \u2014 "),RH=a("a"),G2r=o("TFXLMRobertaModel"),O2r=o(" (XLM-RoBERTa model)"),V2r=l(),x9=a("li"),j0e=a("strong"),X2r=o("xlnet"),z2r=o(" \u2014 "),PH=a("a"),W2r=o("TFXLNetModel"),Q2r=o(" (XLNet model)"),H2r=l(),F($9.$$.fragment),mOe=l(),tc=a("h2"),k9=a("a"),D0e=a("span"),F(f8.$$.fragment),U2r=l(),G0e=a("span"),J2r=o("TFAutoModelForPreTraining"),gOe=l(),er=a("div"),F(m8.$$.fragment),Y2r=l(),ac=a("p"),K2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BH=a("a"),Z2r=o("from_pretrained()"),ebr=o(" class method or the "),IH=a("a"),obr=o("from_config()"),rbr=o(` class
method.`),tbr=l(),g8=a("p"),abr=o("This class cannot be instantiated directly using "),O0e=a("code"),nbr=o("__init__()"),sbr=o(" (throws an error)."),lbr=l(),kt=a("div"),F(h8.$$.fragment),ibr=l(),V0e=a("p"),dbr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cbr=l(),nc=a("p"),fbr=o(`Note:
Loading a model from its configuration file does `),X0e=a("strong"),mbr=o("not"),gbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),hbr=o("from_pretrained()"),pbr=o(" to load the model weights."),ubr=l(),F(S9.$$.fragment),_br=l(),yr=a("div"),F(p8.$$.fragment),bbr=l(),z0e=a("p"),vbr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Fbr=l(),an=a("p"),Tbr=o("The model class to instantiate is selected based on the "),W0e=a("code"),Mbr=o("model_type"),Ebr=o(` property of the config object (either
passed as an argument or loaded from `),Q0e=a("code"),Cbr=o("pretrained_model_name_or_path"),wbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=a("code"),Abr=o("pretrained_model_name_or_path"),Lbr=o(":"),ybr=l(),se=a("ul"),R9=a("li"),U0e=a("strong"),xbr=o("albert"),$br=o(" \u2014 "),qH=a("a"),kbr=o("TFAlbertForPreTraining"),Sbr=o(" (ALBERT model)"),Rbr=l(),P9=a("li"),J0e=a("strong"),Pbr=o("bart"),Bbr=o(" \u2014 "),jH=a("a"),Ibr=o("TFBartForConditionalGeneration"),Nbr=o(" (BART model)"),qbr=l(),B9=a("li"),Y0e=a("strong"),jbr=o("bert"),Dbr=o(" \u2014 "),DH=a("a"),Gbr=o("TFBertForPreTraining"),Obr=o(" (BERT model)"),Vbr=l(),I9=a("li"),K0e=a("strong"),Xbr=o("camembert"),zbr=o(" \u2014 "),GH=a("a"),Wbr=o("TFCamembertForMaskedLM"),Qbr=o(" (CamemBERT model)"),Hbr=l(),N9=a("li"),Z0e=a("strong"),Ubr=o("ctrl"),Jbr=o(" \u2014 "),OH=a("a"),Ybr=o("TFCTRLLMHeadModel"),Kbr=o(" (CTRL model)"),Zbr=l(),q9=a("li"),eFe=a("strong"),evr=o("distilbert"),ovr=o(" \u2014 "),VH=a("a"),rvr=o("TFDistilBertForMaskedLM"),tvr=o(" (DistilBERT model)"),avr=l(),j9=a("li"),oFe=a("strong"),nvr=o("electra"),svr=o(" \u2014 "),XH=a("a"),lvr=o("TFElectraForPreTraining"),ivr=o(" (ELECTRA model)"),dvr=l(),D9=a("li"),rFe=a("strong"),cvr=o("flaubert"),fvr=o(" \u2014 "),zH=a("a"),mvr=o("TFFlaubertWithLMHeadModel"),gvr=o(" (FlauBERT model)"),hvr=l(),G9=a("li"),tFe=a("strong"),pvr=o("funnel"),uvr=o(" \u2014 "),WH=a("a"),_vr=o("TFFunnelForPreTraining"),bvr=o(" (Funnel Transformer model)"),vvr=l(),O9=a("li"),aFe=a("strong"),Fvr=o("gpt2"),Tvr=o(" \u2014 "),QH=a("a"),Mvr=o("TFGPT2LMHeadModel"),Evr=o(" (OpenAI GPT-2 model)"),Cvr=l(),V9=a("li"),nFe=a("strong"),wvr=o("layoutlm"),Avr=o(" \u2014 "),HH=a("a"),Lvr=o("TFLayoutLMForMaskedLM"),yvr=o(" (LayoutLM model)"),xvr=l(),X9=a("li"),sFe=a("strong"),$vr=o("lxmert"),kvr=o(" \u2014 "),UH=a("a"),Svr=o("TFLxmertForPreTraining"),Rvr=o(" (LXMERT model)"),Pvr=l(),z9=a("li"),lFe=a("strong"),Bvr=o("mobilebert"),Ivr=o(" \u2014 "),JH=a("a"),Nvr=o("TFMobileBertForPreTraining"),qvr=o(" (MobileBERT model)"),jvr=l(),W9=a("li"),iFe=a("strong"),Dvr=o("mpnet"),Gvr=o(" \u2014 "),YH=a("a"),Ovr=o("TFMPNetForMaskedLM"),Vvr=o(" (MPNet model)"),Xvr=l(),Q9=a("li"),dFe=a("strong"),zvr=o("openai-gpt"),Wvr=o(" \u2014 "),KH=a("a"),Qvr=o("TFOpenAIGPTLMHeadModel"),Hvr=o(" (OpenAI GPT model)"),Uvr=l(),H9=a("li"),cFe=a("strong"),Jvr=o("roberta"),Yvr=o(" \u2014 "),ZH=a("a"),Kvr=o("TFRobertaForMaskedLM"),Zvr=o(" (RoBERTa model)"),e0r=l(),U9=a("li"),fFe=a("strong"),o0r=o("t5"),r0r=o(" \u2014 "),eU=a("a"),t0r=o("TFT5ForConditionalGeneration"),a0r=o(" (T5 model)"),n0r=l(),J9=a("li"),mFe=a("strong"),s0r=o("tapas"),l0r=o(" \u2014 "),oU=a("a"),i0r=o("TFTapasForMaskedLM"),d0r=o(" (TAPAS model)"),c0r=l(),Y9=a("li"),gFe=a("strong"),f0r=o("transfo-xl"),m0r=o(" \u2014 "),rU=a("a"),g0r=o("TFTransfoXLLMHeadModel"),h0r=o(" (Transformer-XL model)"),p0r=l(),K9=a("li"),hFe=a("strong"),u0r=o("vit_mae"),_0r=o(" \u2014 "),tU=a("a"),b0r=o("TFViTMAEForPreTraining"),v0r=o(" (ViTMAE model)"),F0r=l(),Z9=a("li"),pFe=a("strong"),T0r=o("xlm"),M0r=o(" \u2014 "),aU=a("a"),E0r=o("TFXLMWithLMHeadModel"),C0r=o(" (XLM model)"),w0r=l(),eM=a("li"),uFe=a("strong"),A0r=o("xlm-roberta"),L0r=o(" \u2014 "),nU=a("a"),y0r=o("TFXLMRobertaForMaskedLM"),x0r=o(" (XLM-RoBERTa model)"),$0r=l(),oM=a("li"),_Fe=a("strong"),k0r=o("xlnet"),S0r=o(" \u2014 "),sU=a("a"),R0r=o("TFXLNetLMHeadModel"),P0r=o(" (XLNet model)"),B0r=l(),F(rM.$$.fragment),hOe=l(),sc=a("h2"),tM=a("a"),bFe=a("span"),F(u8.$$.fragment),I0r=l(),vFe=a("span"),N0r=o("TFAutoModelForCausalLM"),pOe=l(),or=a("div"),F(_8.$$.fragment),q0r=l(),lc=a("p"),j0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),lU=a("a"),D0r=o("from_pretrained()"),G0r=o(" class method or the "),iU=a("a"),O0r=o("from_config()"),V0r=o(` class
method.`),X0r=l(),b8=a("p"),z0r=o("This class cannot be instantiated directly using "),FFe=a("code"),W0r=o("__init__()"),Q0r=o(" (throws an error)."),H0r=l(),St=a("div"),F(v8.$$.fragment),U0r=l(),TFe=a("p"),J0r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Y0r=l(),ic=a("p"),K0r=o(`Note:
Loading a model from its configuration file does `),MFe=a("strong"),Z0r=o("not"),eFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),oFr=o("from_pretrained()"),rFr=o(" to load the model weights."),tFr=l(),F(aM.$$.fragment),aFr=l(),xr=a("div"),F(F8.$$.fragment),nFr=l(),EFe=a("p"),sFr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),lFr=l(),nn=a("p"),iFr=o("The model class to instantiate is selected based on the "),CFe=a("code"),dFr=o("model_type"),cFr=o(` property of the config object (either
passed as an argument or loaded from `),wFe=a("code"),fFr=o("pretrained_model_name_or_path"),mFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=a("code"),gFr=o("pretrained_model_name_or_path"),hFr=o(":"),pFr=l(),Me=a("ul"),nM=a("li"),LFe=a("strong"),uFr=o("bert"),_Fr=o(" \u2014 "),cU=a("a"),bFr=o("TFBertLMHeadModel"),vFr=o(" (BERT model)"),FFr=l(),sM=a("li"),yFe=a("strong"),TFr=o("camembert"),MFr=o(" \u2014 "),fU=a("a"),EFr=o("TFCamembertForCausalLM"),CFr=o(" (CamemBERT model)"),wFr=l(),lM=a("li"),xFe=a("strong"),AFr=o("ctrl"),LFr=o(" \u2014 "),mU=a("a"),yFr=o("TFCTRLLMHeadModel"),xFr=o(" (CTRL model)"),$Fr=l(),iM=a("li"),$Fe=a("strong"),kFr=o("gpt2"),SFr=o(" \u2014 "),gU=a("a"),RFr=o("TFGPT2LMHeadModel"),PFr=o(" (OpenAI GPT-2 model)"),BFr=l(),dM=a("li"),kFe=a("strong"),IFr=o("gptj"),NFr=o(" \u2014 "),hU=a("a"),qFr=o("TFGPTJForCausalLM"),jFr=o(" (GPT-J model)"),DFr=l(),cM=a("li"),SFe=a("strong"),GFr=o("openai-gpt"),OFr=o(" \u2014 "),pU=a("a"),VFr=o("TFOpenAIGPTLMHeadModel"),XFr=o(" (OpenAI GPT model)"),zFr=l(),fM=a("li"),RFe=a("strong"),WFr=o("opt"),QFr=o(" \u2014 "),uU=a("a"),HFr=o("TFOPTForCausalLM"),UFr=o(" (OPT model)"),JFr=l(),mM=a("li"),PFe=a("strong"),YFr=o("rembert"),KFr=o(" \u2014 "),_U=a("a"),ZFr=o("TFRemBertForCausalLM"),eTr=o(" (RemBERT model)"),oTr=l(),gM=a("li"),BFe=a("strong"),rTr=o("roberta"),tTr=o(" \u2014 "),bU=a("a"),aTr=o("TFRobertaForCausalLM"),nTr=o(" (RoBERTa model)"),sTr=l(),hM=a("li"),IFe=a("strong"),lTr=o("roformer"),iTr=o(" \u2014 "),vU=a("a"),dTr=o("TFRoFormerForCausalLM"),cTr=o(" (RoFormer model)"),fTr=l(),pM=a("li"),NFe=a("strong"),mTr=o("transfo-xl"),gTr=o(" \u2014 "),FU=a("a"),hTr=o("TFTransfoXLLMHeadModel"),pTr=o(" (Transformer-XL model)"),uTr=l(),uM=a("li"),qFe=a("strong"),_Tr=o("xlm"),bTr=o(" \u2014 "),TU=a("a"),vTr=o("TFXLMWithLMHeadModel"),FTr=o(" (XLM model)"),TTr=l(),_M=a("li"),jFe=a("strong"),MTr=o("xlnet"),ETr=o(" \u2014 "),MU=a("a"),CTr=o("TFXLNetLMHeadModel"),wTr=o(" (XLNet model)"),ATr=l(),F(bM.$$.fragment),uOe=l(),dc=a("h2"),vM=a("a"),DFe=a("span"),F(T8.$$.fragment),LTr=l(),GFe=a("span"),yTr=o("TFAutoModelForImageClassification"),_Oe=l(),rr=a("div"),F(M8.$$.fragment),xTr=l(),cc=a("p"),$Tr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EU=a("a"),kTr=o("from_pretrained()"),STr=o(" class method or the "),CU=a("a"),RTr=o("from_config()"),PTr=o(` class
method.`),BTr=l(),E8=a("p"),ITr=o("This class cannot be instantiated directly using "),OFe=a("code"),NTr=o("__init__()"),qTr=o(" (throws an error)."),jTr=l(),Rt=a("div"),F(C8.$$.fragment),DTr=l(),VFe=a("p"),GTr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),OTr=l(),fc=a("p"),VTr=o(`Note:
Loading a model from its configuration file does `),XFe=a("strong"),XTr=o("not"),zTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=a("a"),WTr=o("from_pretrained()"),QTr=o(" to load the model weights."),HTr=l(),F(FM.$$.fragment),UTr=l(),$r=a("div"),F(w8.$$.fragment),JTr=l(),zFe=a("p"),YTr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),KTr=l(),sn=a("p"),ZTr=o("The model class to instantiate is selected based on the "),WFe=a("code"),e7r=o("model_type"),o7r=o(` property of the config object (either
passed as an argument or loaded from `),QFe=a("code"),r7r=o("pretrained_model_name_or_path"),t7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=a("code"),a7r=o("pretrained_model_name_or_path"),n7r=o(":"),s7r=l(),ln=a("ul"),TM=a("li"),UFe=a("strong"),l7r=o("convnext"),i7r=o(" \u2014 "),AU=a("a"),d7r=o("TFConvNextForImageClassification"),c7r=o(" (ConvNeXT model)"),f7r=l(),MM=a("li"),JFe=a("strong"),m7r=o("data2vec-vision"),g7r=o(" \u2014 "),LU=a("a"),h7r=o("TFData2VecVisionForImageClassification"),p7r=o(" (Data2VecVision model)"),u7r=l(),EM=a("li"),YFe=a("strong"),_7r=o("swin"),b7r=o(" \u2014 "),yU=a("a"),v7r=o("TFSwinForImageClassification"),F7r=o(" (Swin Transformer model)"),T7r=l(),CM=a("li"),KFe=a("strong"),M7r=o("vit"),E7r=o(" \u2014 "),xU=a("a"),C7r=o("TFViTForImageClassification"),w7r=o(" (ViT model)"),A7r=l(),F(wM.$$.fragment),bOe=l(),mc=a("h2"),AM=a("a"),ZFe=a("span"),F(A8.$$.fragment),L7r=l(),eTe=a("span"),y7r=o("TFAutoModelForMaskedLM"),vOe=l(),tr=a("div"),F(L8.$$.fragment),x7r=l(),gc=a("p"),$7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$U=a("a"),k7r=o("from_pretrained()"),S7r=o(" class method or the "),kU=a("a"),R7r=o("from_config()"),P7r=o(` class
method.`),B7r=l(),y8=a("p"),I7r=o("This class cannot be instantiated directly using "),oTe=a("code"),N7r=o("__init__()"),q7r=o(" (throws an error)."),j7r=l(),Pt=a("div"),F(x8.$$.fragment),D7r=l(),rTe=a("p"),G7r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),O7r=l(),hc=a("p"),V7r=o(`Note:
Loading a model from its configuration file does `),tTe=a("strong"),X7r=o("not"),z7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=a("a"),W7r=o("from_pretrained()"),Q7r=o(" to load the model weights."),H7r=l(),F(LM.$$.fragment),U7r=l(),kr=a("div"),F($8.$$.fragment),J7r=l(),aTe=a("p"),Y7r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),K7r=l(),dn=a("p"),Z7r=o("The model class to instantiate is selected based on the "),nTe=a("code"),e9r=o("model_type"),o9r=o(` property of the config object (either
passed as an argument or loaded from `),sTe=a("code"),r9r=o("pretrained_model_name_or_path"),t9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=a("code"),a9r=o("pretrained_model_name_or_path"),n9r=o(":"),s9r=l(),ie=a("ul"),yM=a("li"),iTe=a("strong"),l9r=o("albert"),i9r=o(" \u2014 "),RU=a("a"),d9r=o("TFAlbertForMaskedLM"),c9r=o(" (ALBERT model)"),f9r=l(),xM=a("li"),dTe=a("strong"),m9r=o("bert"),g9r=o(" \u2014 "),PU=a("a"),h9r=o("TFBertForMaskedLM"),p9r=o(" (BERT model)"),u9r=l(),$M=a("li"),cTe=a("strong"),_9r=o("camembert"),b9r=o(" \u2014 "),BU=a("a"),v9r=o("TFCamembertForMaskedLM"),F9r=o(" (CamemBERT model)"),T9r=l(),kM=a("li"),fTe=a("strong"),M9r=o("convbert"),E9r=o(" \u2014 "),IU=a("a"),C9r=o("TFConvBertForMaskedLM"),w9r=o(" (ConvBERT model)"),A9r=l(),SM=a("li"),mTe=a("strong"),L9r=o("deberta"),y9r=o(" \u2014 "),NU=a("a"),x9r=o("TFDebertaForMaskedLM"),$9r=o(" (DeBERTa model)"),k9r=l(),RM=a("li"),gTe=a("strong"),S9r=o("deberta-v2"),R9r=o(" \u2014 "),qU=a("a"),P9r=o("TFDebertaV2ForMaskedLM"),B9r=o(" (DeBERTa-v2 model)"),I9r=l(),PM=a("li"),hTe=a("strong"),N9r=o("distilbert"),q9r=o(" \u2014 "),jU=a("a"),j9r=o("TFDistilBertForMaskedLM"),D9r=o(" (DistilBERT model)"),G9r=l(),BM=a("li"),pTe=a("strong"),O9r=o("electra"),V9r=o(" \u2014 "),DU=a("a"),X9r=o("TFElectraForMaskedLM"),z9r=o(" (ELECTRA model)"),W9r=l(),IM=a("li"),uTe=a("strong"),Q9r=o("flaubert"),H9r=o(" \u2014 "),GU=a("a"),U9r=o("TFFlaubertWithLMHeadModel"),J9r=o(" (FlauBERT model)"),Y9r=l(),NM=a("li"),_Te=a("strong"),K9r=o("funnel"),Z9r=o(" \u2014 "),OU=a("a"),eMr=o("TFFunnelForMaskedLM"),oMr=o(" (Funnel Transformer model)"),rMr=l(),qM=a("li"),bTe=a("strong"),tMr=o("layoutlm"),aMr=o(" \u2014 "),VU=a("a"),nMr=o("TFLayoutLMForMaskedLM"),sMr=o(" (LayoutLM model)"),lMr=l(),jM=a("li"),vTe=a("strong"),iMr=o("longformer"),dMr=o(" \u2014 "),XU=a("a"),cMr=o("TFLongformerForMaskedLM"),fMr=o(" (Longformer model)"),mMr=l(),DM=a("li"),FTe=a("strong"),gMr=o("mobilebert"),hMr=o(" \u2014 "),zU=a("a"),pMr=o("TFMobileBertForMaskedLM"),uMr=o(" (MobileBERT model)"),_Mr=l(),GM=a("li"),TTe=a("strong"),bMr=o("mpnet"),vMr=o(" \u2014 "),WU=a("a"),FMr=o("TFMPNetForMaskedLM"),TMr=o(" (MPNet model)"),MMr=l(),OM=a("li"),MTe=a("strong"),EMr=o("rembert"),CMr=o(" \u2014 "),QU=a("a"),wMr=o("TFRemBertForMaskedLM"),AMr=o(" (RemBERT model)"),LMr=l(),VM=a("li"),ETe=a("strong"),yMr=o("roberta"),xMr=o(" \u2014 "),HU=a("a"),$Mr=o("TFRobertaForMaskedLM"),kMr=o(" (RoBERTa model)"),SMr=l(),XM=a("li"),CTe=a("strong"),RMr=o("roformer"),PMr=o(" \u2014 "),UU=a("a"),BMr=o("TFRoFormerForMaskedLM"),IMr=o(" (RoFormer model)"),NMr=l(),zM=a("li"),wTe=a("strong"),qMr=o("tapas"),jMr=o(" \u2014 "),JU=a("a"),DMr=o("TFTapasForMaskedLM"),GMr=o(" (TAPAS model)"),OMr=l(),WM=a("li"),ATe=a("strong"),VMr=o("xlm"),XMr=o(" \u2014 "),YU=a("a"),zMr=o("TFXLMWithLMHeadModel"),WMr=o(" (XLM model)"),QMr=l(),QM=a("li"),LTe=a("strong"),HMr=o("xlm-roberta"),UMr=o(" \u2014 "),KU=a("a"),JMr=o("TFXLMRobertaForMaskedLM"),YMr=o(" (XLM-RoBERTa model)"),KMr=l(),F(HM.$$.fragment),FOe=l(),pc=a("h2"),UM=a("a"),yTe=a("span"),F(k8.$$.fragment),ZMr=l(),xTe=a("span"),e4r=o("TFAutoModelForSeq2SeqLM"),TOe=l(),ar=a("div"),F(S8.$$.fragment),o4r=l(),uc=a("p"),r4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZU=a("a"),t4r=o("from_pretrained()"),a4r=o(" class method or the "),eJ=a("a"),n4r=o("from_config()"),s4r=o(` class
method.`),l4r=l(),R8=a("p"),i4r=o("This class cannot be instantiated directly using "),$Te=a("code"),d4r=o("__init__()"),c4r=o(" (throws an error)."),f4r=l(),Bt=a("div"),F(P8.$$.fragment),m4r=l(),kTe=a("p"),g4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),h4r=l(),_c=a("p"),p4r=o(`Note:
Loading a model from its configuration file does `),STe=a("strong"),u4r=o("not"),_4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=a("a"),b4r=o("from_pretrained()"),v4r=o(" to load the model weights."),F4r=l(),F(JM.$$.fragment),T4r=l(),Sr=a("div"),F(B8.$$.fragment),M4r=l(),RTe=a("p"),E4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),C4r=l(),cn=a("p"),w4r=o("The model class to instantiate is selected based on the "),PTe=a("code"),A4r=o("model_type"),L4r=o(` property of the config object (either
passed as an argument or loaded from `),BTe=a("code"),y4r=o("pretrained_model_name_or_path"),x4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ITe=a("code"),$4r=o("pretrained_model_name_or_path"),k4r=o(":"),S4r=l(),ye=a("ul"),YM=a("li"),NTe=a("strong"),R4r=o("bart"),P4r=o(" \u2014 "),rJ=a("a"),B4r=o("TFBartForConditionalGeneration"),I4r=o(" (BART model)"),N4r=l(),KM=a("li"),qTe=a("strong"),q4r=o("blenderbot"),j4r=o(" \u2014 "),tJ=a("a"),D4r=o("TFBlenderbotForConditionalGeneration"),G4r=o(" (Blenderbot model)"),O4r=l(),ZM=a("li"),jTe=a("strong"),V4r=o("blenderbot-small"),X4r=o(" \u2014 "),aJ=a("a"),z4r=o("TFBlenderbotSmallForConditionalGeneration"),W4r=o(" (BlenderbotSmall model)"),Q4r=l(),e4=a("li"),DTe=a("strong"),H4r=o("encoder-decoder"),U4r=o(" \u2014 "),nJ=a("a"),J4r=o("TFEncoderDecoderModel"),Y4r=o(" (Encoder decoder model)"),K4r=l(),o4=a("li"),GTe=a("strong"),Z4r=o("led"),eEr=o(" \u2014 "),sJ=a("a"),oEr=o("TFLEDForConditionalGeneration"),rEr=o(" (LED model)"),tEr=l(),r4=a("li"),OTe=a("strong"),aEr=o("marian"),nEr=o(" \u2014 "),lJ=a("a"),sEr=o("TFMarianMTModel"),lEr=o(" (Marian model)"),iEr=l(),t4=a("li"),VTe=a("strong"),dEr=o("mbart"),cEr=o(" \u2014 "),iJ=a("a"),fEr=o("TFMBartForConditionalGeneration"),mEr=o(" (mBART model)"),gEr=l(),a4=a("li"),XTe=a("strong"),hEr=o("mt5"),pEr=o(" \u2014 "),dJ=a("a"),uEr=o("TFMT5ForConditionalGeneration"),_Er=o(" (MT5 model)"),bEr=l(),n4=a("li"),zTe=a("strong"),vEr=o("pegasus"),FEr=o(" \u2014 "),cJ=a("a"),TEr=o("TFPegasusForConditionalGeneration"),MEr=o(" (Pegasus model)"),EEr=l(),s4=a("li"),WTe=a("strong"),CEr=o("t5"),wEr=o(" \u2014 "),fJ=a("a"),AEr=o("TFT5ForConditionalGeneration"),LEr=o(" (T5 model)"),yEr=l(),F(l4.$$.fragment),MOe=l(),bc=a("h2"),i4=a("a"),QTe=a("span"),F(I8.$$.fragment),xEr=l(),HTe=a("span"),$Er=o("TFAutoModelForSequenceClassification"),EOe=l(),nr=a("div"),F(N8.$$.fragment),kEr=l(),vc=a("p"),SEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mJ=a("a"),REr=o("from_pretrained()"),PEr=o(" class method or the "),gJ=a("a"),BEr=o("from_config()"),IEr=o(` class
method.`),NEr=l(),q8=a("p"),qEr=o("This class cannot be instantiated directly using "),UTe=a("code"),jEr=o("__init__()"),DEr=o(" (throws an error)."),GEr=l(),It=a("div"),F(j8.$$.fragment),OEr=l(),JTe=a("p"),VEr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XEr=l(),Fc=a("p"),zEr=o(`Note:
Loading a model from its configuration file does `),YTe=a("strong"),WEr=o("not"),QEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),HEr=o("from_pretrained()"),UEr=o(" to load the model weights."),JEr=l(),F(d4.$$.fragment),YEr=l(),Rr=a("div"),F(D8.$$.fragment),KEr=l(),KTe=a("p"),ZEr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),eCr=l(),fn=a("p"),oCr=o("The model class to instantiate is selected based on the "),ZTe=a("code"),rCr=o("model_type"),tCr=o(` property of the config object (either
passed as an argument or loaded from `),e7e=a("code"),aCr=o("pretrained_model_name_or_path"),nCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=a("code"),sCr=o("pretrained_model_name_or_path"),lCr=o(":"),iCr=l(),te=a("ul"),c4=a("li"),r7e=a("strong"),dCr=o("albert"),cCr=o(" \u2014 "),pJ=a("a"),fCr=o("TFAlbertForSequenceClassification"),mCr=o(" (ALBERT model)"),gCr=l(),f4=a("li"),t7e=a("strong"),hCr=o("bert"),pCr=o(" \u2014 "),uJ=a("a"),uCr=o("TFBertForSequenceClassification"),_Cr=o(" (BERT model)"),bCr=l(),m4=a("li"),a7e=a("strong"),vCr=o("camembert"),FCr=o(" \u2014 "),_J=a("a"),TCr=o("TFCamembertForSequenceClassification"),MCr=o(" (CamemBERT model)"),ECr=l(),g4=a("li"),n7e=a("strong"),CCr=o("convbert"),wCr=o(" \u2014 "),bJ=a("a"),ACr=o("TFConvBertForSequenceClassification"),LCr=o(" (ConvBERT model)"),yCr=l(),h4=a("li"),s7e=a("strong"),xCr=o("ctrl"),$Cr=o(" \u2014 "),vJ=a("a"),kCr=o("TFCTRLForSequenceClassification"),SCr=o(" (CTRL model)"),RCr=l(),p4=a("li"),l7e=a("strong"),PCr=o("deberta"),BCr=o(" \u2014 "),FJ=a("a"),ICr=o("TFDebertaForSequenceClassification"),NCr=o(" (DeBERTa model)"),qCr=l(),u4=a("li"),i7e=a("strong"),jCr=o("deberta-v2"),DCr=o(" \u2014 "),TJ=a("a"),GCr=o("TFDebertaV2ForSequenceClassification"),OCr=o(" (DeBERTa-v2 model)"),VCr=l(),_4=a("li"),d7e=a("strong"),XCr=o("distilbert"),zCr=o(" \u2014 "),MJ=a("a"),WCr=o("TFDistilBertForSequenceClassification"),QCr=o(" (DistilBERT model)"),HCr=l(),b4=a("li"),c7e=a("strong"),UCr=o("electra"),JCr=o(" \u2014 "),EJ=a("a"),YCr=o("TFElectraForSequenceClassification"),KCr=o(" (ELECTRA model)"),ZCr=l(),v4=a("li"),f7e=a("strong"),e5r=o("flaubert"),o5r=o(" \u2014 "),CJ=a("a"),r5r=o("TFFlaubertForSequenceClassification"),t5r=o(" (FlauBERT model)"),a5r=l(),F4=a("li"),m7e=a("strong"),n5r=o("funnel"),s5r=o(" \u2014 "),wJ=a("a"),l5r=o("TFFunnelForSequenceClassification"),i5r=o(" (Funnel Transformer model)"),d5r=l(),T4=a("li"),g7e=a("strong"),c5r=o("gpt2"),f5r=o(" \u2014 "),AJ=a("a"),m5r=o("TFGPT2ForSequenceClassification"),g5r=o(" (OpenAI GPT-2 model)"),h5r=l(),M4=a("li"),h7e=a("strong"),p5r=o("gptj"),u5r=o(" \u2014 "),LJ=a("a"),_5r=o("TFGPTJForSequenceClassification"),b5r=o(" (GPT-J model)"),v5r=l(),E4=a("li"),p7e=a("strong"),F5r=o("layoutlm"),T5r=o(" \u2014 "),yJ=a("a"),M5r=o("TFLayoutLMForSequenceClassification"),E5r=o(" (LayoutLM model)"),C5r=l(),C4=a("li"),u7e=a("strong"),w5r=o("longformer"),A5r=o(" \u2014 "),xJ=a("a"),L5r=o("TFLongformerForSequenceClassification"),y5r=o(" (Longformer model)"),x5r=l(),w4=a("li"),_7e=a("strong"),$5r=o("mobilebert"),k5r=o(" \u2014 "),$J=a("a"),S5r=o("TFMobileBertForSequenceClassification"),R5r=o(" (MobileBERT model)"),P5r=l(),A4=a("li"),b7e=a("strong"),B5r=o("mpnet"),I5r=o(" \u2014 "),kJ=a("a"),N5r=o("TFMPNetForSequenceClassification"),q5r=o(" (MPNet model)"),j5r=l(),L4=a("li"),v7e=a("strong"),D5r=o("openai-gpt"),G5r=o(" \u2014 "),SJ=a("a"),O5r=o("TFOpenAIGPTForSequenceClassification"),V5r=o(" (OpenAI GPT model)"),X5r=l(),y4=a("li"),F7e=a("strong"),z5r=o("rembert"),W5r=o(" \u2014 "),RJ=a("a"),Q5r=o("TFRemBertForSequenceClassification"),H5r=o(" (RemBERT model)"),U5r=l(),x4=a("li"),T7e=a("strong"),J5r=o("roberta"),Y5r=o(" \u2014 "),PJ=a("a"),K5r=o("TFRobertaForSequenceClassification"),Z5r=o(" (RoBERTa model)"),e3r=l(),$4=a("li"),M7e=a("strong"),o3r=o("roformer"),r3r=o(" \u2014 "),BJ=a("a"),t3r=o("TFRoFormerForSequenceClassification"),a3r=o(" (RoFormer model)"),n3r=l(),k4=a("li"),E7e=a("strong"),s3r=o("tapas"),l3r=o(" \u2014 "),IJ=a("a"),i3r=o("TFTapasForSequenceClassification"),d3r=o(" (TAPAS model)"),c3r=l(),S4=a("li"),C7e=a("strong"),f3r=o("transfo-xl"),m3r=o(" \u2014 "),NJ=a("a"),g3r=o("TFTransfoXLForSequenceClassification"),h3r=o(" (Transformer-XL model)"),p3r=l(),R4=a("li"),w7e=a("strong"),u3r=o("xlm"),_3r=o(" \u2014 "),qJ=a("a"),b3r=o("TFXLMForSequenceClassification"),v3r=o(" (XLM model)"),F3r=l(),P4=a("li"),A7e=a("strong"),T3r=o("xlm-roberta"),M3r=o(" \u2014 "),jJ=a("a"),E3r=o("TFXLMRobertaForSequenceClassification"),C3r=o(" (XLM-RoBERTa model)"),w3r=l(),B4=a("li"),L7e=a("strong"),A3r=o("xlnet"),L3r=o(" \u2014 "),DJ=a("a"),y3r=o("TFXLNetForSequenceClassification"),x3r=o(" (XLNet model)"),$3r=l(),F(I4.$$.fragment),COe=l(),Tc=a("h2"),N4=a("a"),y7e=a("span"),F(G8.$$.fragment),k3r=l(),x7e=a("span"),S3r=o("TFAutoModelForMultipleChoice"),wOe=l(),sr=a("div"),F(O8.$$.fragment),R3r=l(),Mc=a("p"),P3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),GJ=a("a"),B3r=o("from_pretrained()"),I3r=o(" class method or the "),OJ=a("a"),N3r=o("from_config()"),q3r=o(` class
method.`),j3r=l(),V8=a("p"),D3r=o("This class cannot be instantiated directly using "),$7e=a("code"),G3r=o("__init__()"),O3r=o(" (throws an error)."),V3r=l(),Nt=a("div"),F(X8.$$.fragment),X3r=l(),k7e=a("p"),z3r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),W3r=l(),Ec=a("p"),Q3r=o(`Note:
Loading a model from its configuration file does `),S7e=a("strong"),H3r=o("not"),U3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),J3r=o("from_pretrained()"),Y3r=o(" to load the model weights."),K3r=l(),F(q4.$$.fragment),Z3r=l(),Pr=a("div"),F(z8.$$.fragment),ewr=l(),R7e=a("p"),owr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rwr=l(),mn=a("p"),twr=o("The model class to instantiate is selected based on the "),P7e=a("code"),awr=o("model_type"),nwr=o(` property of the config object (either
passed as an argument or loaded from `),B7e=a("code"),swr=o("pretrained_model_name_or_path"),lwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=a("code"),iwr=o("pretrained_model_name_or_path"),dwr=o(":"),cwr=l(),ue=a("ul"),j4=a("li"),N7e=a("strong"),fwr=o("albert"),mwr=o(" \u2014 "),XJ=a("a"),gwr=o("TFAlbertForMultipleChoice"),hwr=o(" (ALBERT model)"),pwr=l(),D4=a("li"),q7e=a("strong"),uwr=o("bert"),_wr=o(" \u2014 "),zJ=a("a"),bwr=o("TFBertForMultipleChoice"),vwr=o(" (BERT model)"),Fwr=l(),G4=a("li"),j7e=a("strong"),Twr=o("camembert"),Mwr=o(" \u2014 "),WJ=a("a"),Ewr=o("TFCamembertForMultipleChoice"),Cwr=o(" (CamemBERT model)"),wwr=l(),O4=a("li"),D7e=a("strong"),Awr=o("convbert"),Lwr=o(" \u2014 "),QJ=a("a"),ywr=o("TFConvBertForMultipleChoice"),xwr=o(" (ConvBERT model)"),$wr=l(),V4=a("li"),G7e=a("strong"),kwr=o("distilbert"),Swr=o(" \u2014 "),HJ=a("a"),Rwr=o("TFDistilBertForMultipleChoice"),Pwr=o(" (DistilBERT model)"),Bwr=l(),X4=a("li"),O7e=a("strong"),Iwr=o("electra"),Nwr=o(" \u2014 "),UJ=a("a"),qwr=o("TFElectraForMultipleChoice"),jwr=o(" (ELECTRA model)"),Dwr=l(),z4=a("li"),V7e=a("strong"),Gwr=o("flaubert"),Owr=o(" \u2014 "),JJ=a("a"),Vwr=o("TFFlaubertForMultipleChoice"),Xwr=o(" (FlauBERT model)"),zwr=l(),W4=a("li"),X7e=a("strong"),Wwr=o("funnel"),Qwr=o(" \u2014 "),YJ=a("a"),Hwr=o("TFFunnelForMultipleChoice"),Uwr=o(" (Funnel Transformer model)"),Jwr=l(),Q4=a("li"),z7e=a("strong"),Ywr=o("longformer"),Kwr=o(" \u2014 "),KJ=a("a"),Zwr=o("TFLongformerForMultipleChoice"),eAr=o(" (Longformer model)"),oAr=l(),H4=a("li"),W7e=a("strong"),rAr=o("mobilebert"),tAr=o(" \u2014 "),ZJ=a("a"),aAr=o("TFMobileBertForMultipleChoice"),nAr=o(" (MobileBERT model)"),sAr=l(),U4=a("li"),Q7e=a("strong"),lAr=o("mpnet"),iAr=o(" \u2014 "),eY=a("a"),dAr=o("TFMPNetForMultipleChoice"),cAr=o(" (MPNet model)"),fAr=l(),J4=a("li"),H7e=a("strong"),mAr=o("rembert"),gAr=o(" \u2014 "),oY=a("a"),hAr=o("TFRemBertForMultipleChoice"),pAr=o(" (RemBERT model)"),uAr=l(),Y4=a("li"),U7e=a("strong"),_Ar=o("roberta"),bAr=o(" \u2014 "),rY=a("a"),vAr=o("TFRobertaForMultipleChoice"),FAr=o(" (RoBERTa model)"),TAr=l(),K4=a("li"),J7e=a("strong"),MAr=o("roformer"),EAr=o(" \u2014 "),tY=a("a"),CAr=o("TFRoFormerForMultipleChoice"),wAr=o(" (RoFormer model)"),AAr=l(),Z4=a("li"),Y7e=a("strong"),LAr=o("xlm"),yAr=o(" \u2014 "),aY=a("a"),xAr=o("TFXLMForMultipleChoice"),$Ar=o(" (XLM model)"),kAr=l(),eE=a("li"),K7e=a("strong"),SAr=o("xlm-roberta"),RAr=o(" \u2014 "),nY=a("a"),PAr=o("TFXLMRobertaForMultipleChoice"),BAr=o(" (XLM-RoBERTa model)"),IAr=l(),oE=a("li"),Z7e=a("strong"),NAr=o("xlnet"),qAr=o(" \u2014 "),sY=a("a"),jAr=o("TFXLNetForMultipleChoice"),DAr=o(" (XLNet model)"),GAr=l(),F(rE.$$.fragment),AOe=l(),Cc=a("h2"),tE=a("a"),e9e=a("span"),F(W8.$$.fragment),OAr=l(),o9e=a("span"),VAr=o("TFAutoModelForNextSentencePrediction"),LOe=l(),lr=a("div"),F(Q8.$$.fragment),XAr=l(),wc=a("p"),zAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),lY=a("a"),WAr=o("from_pretrained()"),QAr=o(" class method or the "),iY=a("a"),HAr=o("from_config()"),UAr=o(` class
method.`),JAr=l(),H8=a("p"),YAr=o("This class cannot be instantiated directly using "),r9e=a("code"),KAr=o("__init__()"),ZAr=o(" (throws an error)."),e6r=l(),qt=a("div"),F(U8.$$.fragment),o6r=l(),t9e=a("p"),r6r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),t6r=l(),Ac=a("p"),a6r=o(`Note:
Loading a model from its configuration file does `),a9e=a("strong"),n6r=o("not"),s6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=a("a"),l6r=o("from_pretrained()"),i6r=o(" to load the model weights."),d6r=l(),F(aE.$$.fragment),c6r=l(),Br=a("div"),F(J8.$$.fragment),f6r=l(),n9e=a("p"),m6r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),g6r=l(),gn=a("p"),h6r=o("The model class to instantiate is selected based on the "),s9e=a("code"),p6r=o("model_type"),u6r=o(` property of the config object (either
passed as an argument or loaded from `),l9e=a("code"),_6r=o("pretrained_model_name_or_path"),b6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i9e=a("code"),v6r=o("pretrained_model_name_or_path"),F6r=o(":"),T6r=l(),Y8=a("ul"),nE=a("li"),d9e=a("strong"),M6r=o("bert"),E6r=o(" \u2014 "),cY=a("a"),C6r=o("TFBertForNextSentencePrediction"),w6r=o(" (BERT model)"),A6r=l(),sE=a("li"),c9e=a("strong"),L6r=o("mobilebert"),y6r=o(" \u2014 "),fY=a("a"),x6r=o("TFMobileBertForNextSentencePrediction"),$6r=o(" (MobileBERT model)"),k6r=l(),F(lE.$$.fragment),yOe=l(),Lc=a("h2"),iE=a("a"),f9e=a("span"),F(K8.$$.fragment),S6r=l(),m9e=a("span"),R6r=o("TFAutoModelForTableQuestionAnswering"),xOe=l(),ir=a("div"),F(Z8.$$.fragment),P6r=l(),yc=a("p"),B6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),mY=a("a"),I6r=o("from_pretrained()"),N6r=o(" class method or the "),gY=a("a"),q6r=o("from_config()"),j6r=o(` class
method.`),D6r=l(),ex=a("p"),G6r=o("This class cannot be instantiated directly using "),g9e=a("code"),O6r=o("__init__()"),V6r=o(" (throws an error)."),X6r=l(),jt=a("div"),F(ox.$$.fragment),z6r=l(),h9e=a("p"),W6r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Q6r=l(),xc=a("p"),H6r=o(`Note:
Loading a model from its configuration file does `),p9e=a("strong"),U6r=o("not"),J6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=a("a"),Y6r=o("from_pretrained()"),K6r=o(" to load the model weights."),Z6r=l(),F(dE.$$.fragment),eLr=l(),Ir=a("div"),F(rx.$$.fragment),oLr=l(),u9e=a("p"),rLr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tLr=l(),hn=a("p"),aLr=o("The model class to instantiate is selected based on the "),_9e=a("code"),nLr=o("model_type"),sLr=o(` property of the config object (either
passed as an argument or loaded from `),b9e=a("code"),lLr=o("pretrained_model_name_or_path"),iLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v9e=a("code"),dLr=o("pretrained_model_name_or_path"),cLr=o(":"),fLr=l(),F9e=a("ul"),cE=a("li"),T9e=a("strong"),mLr=o("tapas"),gLr=o(" \u2014 "),pY=a("a"),hLr=o("TFTapasForQuestionAnswering"),pLr=o(" (TAPAS model)"),uLr=l(),F(fE.$$.fragment),$Oe=l(),$c=a("h2"),mE=a("a"),M9e=a("span"),F(tx.$$.fragment),_Lr=l(),E9e=a("span"),bLr=o("TFAutoModelForTokenClassification"),kOe=l(),dr=a("div"),F(ax.$$.fragment),vLr=l(),kc=a("p"),FLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uY=a("a"),TLr=o("from_pretrained()"),MLr=o(" class method or the "),_Y=a("a"),ELr=o("from_config()"),CLr=o(` class
method.`),wLr=l(),nx=a("p"),ALr=o("This class cannot be instantiated directly using "),C9e=a("code"),LLr=o("__init__()"),yLr=o(" (throws an error)."),xLr=l(),Dt=a("div"),F(sx.$$.fragment),$Lr=l(),w9e=a("p"),kLr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),SLr=l(),Sc=a("p"),RLr=o(`Note:
Loading a model from its configuration file does `),A9e=a("strong"),PLr=o("not"),BLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=a("a"),ILr=o("from_pretrained()"),NLr=o(" to load the model weights."),qLr=l(),F(gE.$$.fragment),jLr=l(),Nr=a("div"),F(lx.$$.fragment),DLr=l(),L9e=a("p"),GLr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),OLr=l(),pn=a("p"),VLr=o("The model class to instantiate is selected based on the "),y9e=a("code"),XLr=o("model_type"),zLr=o(` property of the config object (either
passed as an argument or loaded from `),x9e=a("code"),WLr=o("pretrained_model_name_or_path"),QLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$9e=a("code"),HLr=o("pretrained_model_name_or_path"),ULr=o(":"),JLr=l(),de=a("ul"),hE=a("li"),k9e=a("strong"),YLr=o("albert"),KLr=o(" \u2014 "),vY=a("a"),ZLr=o("TFAlbertForTokenClassification"),eyr=o(" (ALBERT model)"),oyr=l(),pE=a("li"),S9e=a("strong"),ryr=o("bert"),tyr=o(" \u2014 "),FY=a("a"),ayr=o("TFBertForTokenClassification"),nyr=o(" (BERT model)"),syr=l(),uE=a("li"),R9e=a("strong"),lyr=o("camembert"),iyr=o(" \u2014 "),TY=a("a"),dyr=o("TFCamembertForTokenClassification"),cyr=o(" (CamemBERT model)"),fyr=l(),_E=a("li"),P9e=a("strong"),myr=o("convbert"),gyr=o(" \u2014 "),MY=a("a"),hyr=o("TFConvBertForTokenClassification"),pyr=o(" (ConvBERT model)"),uyr=l(),bE=a("li"),B9e=a("strong"),_yr=o("deberta"),byr=o(" \u2014 "),EY=a("a"),vyr=o("TFDebertaForTokenClassification"),Fyr=o(" (DeBERTa model)"),Tyr=l(),vE=a("li"),I9e=a("strong"),Myr=o("deberta-v2"),Eyr=o(" \u2014 "),CY=a("a"),Cyr=o("TFDebertaV2ForTokenClassification"),wyr=o(" (DeBERTa-v2 model)"),Ayr=l(),FE=a("li"),N9e=a("strong"),Lyr=o("distilbert"),yyr=o(" \u2014 "),wY=a("a"),xyr=o("TFDistilBertForTokenClassification"),$yr=o(" (DistilBERT model)"),kyr=l(),TE=a("li"),q9e=a("strong"),Syr=o("electra"),Ryr=o(" \u2014 "),AY=a("a"),Pyr=o("TFElectraForTokenClassification"),Byr=o(" (ELECTRA model)"),Iyr=l(),ME=a("li"),j9e=a("strong"),Nyr=o("flaubert"),qyr=o(" \u2014 "),LY=a("a"),jyr=o("TFFlaubertForTokenClassification"),Dyr=o(" (FlauBERT model)"),Gyr=l(),EE=a("li"),D9e=a("strong"),Oyr=o("funnel"),Vyr=o(" \u2014 "),yY=a("a"),Xyr=o("TFFunnelForTokenClassification"),zyr=o(" (Funnel Transformer model)"),Wyr=l(),CE=a("li"),G9e=a("strong"),Qyr=o("layoutlm"),Hyr=o(" \u2014 "),xY=a("a"),Uyr=o("TFLayoutLMForTokenClassification"),Jyr=o(" (LayoutLM model)"),Yyr=l(),wE=a("li"),O9e=a("strong"),Kyr=o("longformer"),Zyr=o(" \u2014 "),$Y=a("a"),e8r=o("TFLongformerForTokenClassification"),o8r=o(" (Longformer model)"),r8r=l(),AE=a("li"),V9e=a("strong"),t8r=o("mobilebert"),a8r=o(" \u2014 "),kY=a("a"),n8r=o("TFMobileBertForTokenClassification"),s8r=o(" (MobileBERT model)"),l8r=l(),LE=a("li"),X9e=a("strong"),i8r=o("mpnet"),d8r=o(" \u2014 "),SY=a("a"),c8r=o("TFMPNetForTokenClassification"),f8r=o(" (MPNet model)"),m8r=l(),yE=a("li"),z9e=a("strong"),g8r=o("rembert"),h8r=o(" \u2014 "),RY=a("a"),p8r=o("TFRemBertForTokenClassification"),u8r=o(" (RemBERT model)"),_8r=l(),xE=a("li"),W9e=a("strong"),b8r=o("roberta"),v8r=o(" \u2014 "),PY=a("a"),F8r=o("TFRobertaForTokenClassification"),T8r=o(" (RoBERTa model)"),M8r=l(),$E=a("li"),Q9e=a("strong"),E8r=o("roformer"),C8r=o(" \u2014 "),BY=a("a"),w8r=o("TFRoFormerForTokenClassification"),A8r=o(" (RoFormer model)"),L8r=l(),kE=a("li"),H9e=a("strong"),y8r=o("xlm"),x8r=o(" \u2014 "),IY=a("a"),$8r=o("TFXLMForTokenClassification"),k8r=o(" (XLM model)"),S8r=l(),SE=a("li"),U9e=a("strong"),R8r=o("xlm-roberta"),P8r=o(" \u2014 "),NY=a("a"),B8r=o("TFXLMRobertaForTokenClassification"),I8r=o(" (XLM-RoBERTa model)"),N8r=l(),RE=a("li"),J9e=a("strong"),q8r=o("xlnet"),j8r=o(" \u2014 "),qY=a("a"),D8r=o("TFXLNetForTokenClassification"),G8r=o(" (XLNet model)"),O8r=l(),F(PE.$$.fragment),SOe=l(),Rc=a("h2"),BE=a("a"),Y9e=a("span"),F(ix.$$.fragment),V8r=l(),K9e=a("span"),X8r=o("TFAutoModelForQuestionAnswering"),ROe=l(),cr=a("div"),F(dx.$$.fragment),z8r=l(),Pc=a("p"),W8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jY=a("a"),Q8r=o("from_pretrained()"),H8r=o(" class method or the "),DY=a("a"),U8r=o("from_config()"),J8r=o(` class
method.`),Y8r=l(),cx=a("p"),K8r=o("This class cannot be instantiated directly using "),Z9e=a("code"),Z8r=o("__init__()"),exr=o(" (throws an error)."),oxr=l(),Gt=a("div"),F(fx.$$.fragment),rxr=l(),eMe=a("p"),txr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),axr=l(),Bc=a("p"),nxr=o(`Note:
Loading a model from its configuration file does `),oMe=a("strong"),sxr=o("not"),lxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=a("a"),ixr=o("from_pretrained()"),dxr=o(" to load the model weights."),cxr=l(),F(IE.$$.fragment),fxr=l(),qr=a("div"),F(mx.$$.fragment),mxr=l(),rMe=a("p"),gxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hxr=l(),un=a("p"),pxr=o("The model class to instantiate is selected based on the "),tMe=a("code"),uxr=o("model_type"),_xr=o(` property of the config object (either
passed as an argument or loaded from `),aMe=a("code"),bxr=o("pretrained_model_name_or_path"),vxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=a("code"),Fxr=o("pretrained_model_name_or_path"),Txr=o(":"),Mxr=l(),ce=a("ul"),NE=a("li"),sMe=a("strong"),Exr=o("albert"),Cxr=o(" \u2014 "),OY=a("a"),wxr=o("TFAlbertForQuestionAnswering"),Axr=o(" (ALBERT model)"),Lxr=l(),qE=a("li"),lMe=a("strong"),yxr=o("bert"),xxr=o(" \u2014 "),VY=a("a"),$xr=o("TFBertForQuestionAnswering"),kxr=o(" (BERT model)"),Sxr=l(),jE=a("li"),iMe=a("strong"),Rxr=o("camembert"),Pxr=o(" \u2014 "),XY=a("a"),Bxr=o("TFCamembertForQuestionAnswering"),Ixr=o(" (CamemBERT model)"),Nxr=l(),DE=a("li"),dMe=a("strong"),qxr=o("convbert"),jxr=o(" \u2014 "),zY=a("a"),Dxr=o("TFConvBertForQuestionAnswering"),Gxr=o(" (ConvBERT model)"),Oxr=l(),GE=a("li"),cMe=a("strong"),Vxr=o("deberta"),Xxr=o(" \u2014 "),WY=a("a"),zxr=o("TFDebertaForQuestionAnswering"),Wxr=o(" (DeBERTa model)"),Qxr=l(),OE=a("li"),fMe=a("strong"),Hxr=o("deberta-v2"),Uxr=o(" \u2014 "),QY=a("a"),Jxr=o("TFDebertaV2ForQuestionAnswering"),Yxr=o(" (DeBERTa-v2 model)"),Kxr=l(),VE=a("li"),mMe=a("strong"),Zxr=o("distilbert"),e$r=o(" \u2014 "),HY=a("a"),o$r=o("TFDistilBertForQuestionAnswering"),r$r=o(" (DistilBERT model)"),t$r=l(),XE=a("li"),gMe=a("strong"),a$r=o("electra"),n$r=o(" \u2014 "),UY=a("a"),s$r=o("TFElectraForQuestionAnswering"),l$r=o(" (ELECTRA model)"),i$r=l(),zE=a("li"),hMe=a("strong"),d$r=o("flaubert"),c$r=o(" \u2014 "),JY=a("a"),f$r=o("TFFlaubertForQuestionAnsweringSimple"),m$r=o(" (FlauBERT model)"),g$r=l(),WE=a("li"),pMe=a("strong"),h$r=o("funnel"),p$r=o(" \u2014 "),YY=a("a"),u$r=o("TFFunnelForQuestionAnswering"),_$r=o(" (Funnel Transformer model)"),b$r=l(),QE=a("li"),uMe=a("strong"),v$r=o("gptj"),F$r=o(" \u2014 "),KY=a("a"),T$r=o("TFGPTJForQuestionAnswering"),M$r=o(" (GPT-J model)"),E$r=l(),HE=a("li"),_Me=a("strong"),C$r=o("longformer"),w$r=o(" \u2014 "),ZY=a("a"),A$r=o("TFLongformerForQuestionAnswering"),L$r=o(" (Longformer model)"),y$r=l(),UE=a("li"),bMe=a("strong"),x$r=o("mobilebert"),$$r=o(" \u2014 "),eK=a("a"),k$r=o("TFMobileBertForQuestionAnswering"),S$r=o(" (MobileBERT model)"),R$r=l(),JE=a("li"),vMe=a("strong"),P$r=o("mpnet"),B$r=o(" \u2014 "),oK=a("a"),I$r=o("TFMPNetForQuestionAnswering"),N$r=o(" (MPNet model)"),q$r=l(),YE=a("li"),FMe=a("strong"),j$r=o("rembert"),D$r=o(" \u2014 "),rK=a("a"),G$r=o("TFRemBertForQuestionAnswering"),O$r=o(" (RemBERT model)"),V$r=l(),KE=a("li"),TMe=a("strong"),X$r=o("roberta"),z$r=o(" \u2014 "),tK=a("a"),W$r=o("TFRobertaForQuestionAnswering"),Q$r=o(" (RoBERTa model)"),H$r=l(),ZE=a("li"),MMe=a("strong"),U$r=o("roformer"),J$r=o(" \u2014 "),aK=a("a"),Y$r=o("TFRoFormerForQuestionAnswering"),K$r=o(" (RoFormer model)"),Z$r=l(),eC=a("li"),EMe=a("strong"),ekr=o("xlm"),okr=o(" \u2014 "),nK=a("a"),rkr=o("TFXLMForQuestionAnsweringSimple"),tkr=o(" (XLM model)"),akr=l(),oC=a("li"),CMe=a("strong"),nkr=o("xlm-roberta"),skr=o(" \u2014 "),sK=a("a"),lkr=o("TFXLMRobertaForQuestionAnswering"),ikr=o(" (XLM-RoBERTa model)"),dkr=l(),rC=a("li"),wMe=a("strong"),ckr=o("xlnet"),fkr=o(" \u2014 "),lK=a("a"),mkr=o("TFXLNetForQuestionAnsweringSimple"),gkr=o(" (XLNet model)"),hkr=l(),F(tC.$$.fragment),POe=l(),Ic=a("h2"),aC=a("a"),AMe=a("span"),F(gx.$$.fragment),pkr=l(),LMe=a("span"),ukr=o("TFAutoModelForVision2Seq"),BOe=l(),fr=a("div"),F(hx.$$.fragment),_kr=l(),Nc=a("p"),bkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iK=a("a"),vkr=o("from_pretrained()"),Fkr=o(" class method or the "),dK=a("a"),Tkr=o("from_config()"),Mkr=o(` class
method.`),Ekr=l(),px=a("p"),Ckr=o("This class cannot be instantiated directly using "),yMe=a("code"),wkr=o("__init__()"),Akr=o(" (throws an error)."),Lkr=l(),Ot=a("div"),F(ux.$$.fragment),ykr=l(),xMe=a("p"),xkr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$kr=l(),qc=a("p"),kkr=o(`Note:
Loading a model from its configuration file does `),$Me=a("strong"),Skr=o("not"),Rkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=a("a"),Pkr=o("from_pretrained()"),Bkr=o(" to load the model weights."),Ikr=l(),F(nC.$$.fragment),Nkr=l(),jr=a("div"),F(_x.$$.fragment),qkr=l(),kMe=a("p"),jkr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Dkr=l(),_n=a("p"),Gkr=o("The model class to instantiate is selected based on the "),SMe=a("code"),Okr=o("model_type"),Vkr=o(` property of the config object (either
passed as an argument or loaded from `),RMe=a("code"),Xkr=o("pretrained_model_name_or_path"),zkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=a("code"),Wkr=o("pretrained_model_name_or_path"),Qkr=o(":"),Hkr=l(),BMe=a("ul"),sC=a("li"),IMe=a("strong"),Ukr=o("vision-encoder-decoder"),Jkr=o(" \u2014 "),fK=a("a"),Ykr=o("TFVisionEncoderDecoderModel"),Kkr=o(" (Vision Encoder decoder model)"),Zkr=l(),F(lC.$$.fragment),IOe=l(),jc=a("h2"),iC=a("a"),NMe=a("span"),F(bx.$$.fragment),eSr=l(),qMe=a("span"),oSr=o("TFAutoModelForSpeechSeq2Seq"),NOe=l(),mr=a("div"),F(vx.$$.fragment),rSr=l(),Dc=a("p"),tSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),mK=a("a"),aSr=o("from_pretrained()"),nSr=o(" class method or the "),gK=a("a"),sSr=o("from_config()"),lSr=o(` class
method.`),iSr=l(),Fx=a("p"),dSr=o("This class cannot be instantiated directly using "),jMe=a("code"),cSr=o("__init__()"),fSr=o(" (throws an error)."),mSr=l(),Vt=a("div"),F(Tx.$$.fragment),gSr=l(),DMe=a("p"),hSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),pSr=l(),Gc=a("p"),uSr=o(`Note:
Loading a model from its configuration file does `),GMe=a("strong"),_Sr=o("not"),bSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("a"),vSr=o("from_pretrained()"),FSr=o(" to load the model weights."),TSr=l(),F(dC.$$.fragment),MSr=l(),Dr=a("div"),F(Mx.$$.fragment),ESr=l(),OMe=a("p"),CSr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wSr=l(),bn=a("p"),ASr=o("The model class to instantiate is selected based on the "),VMe=a("code"),LSr=o("model_type"),ySr=o(` property of the config object (either
passed as an argument or loaded from `),XMe=a("code"),xSr=o("pretrained_model_name_or_path"),$Sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=a("code"),kSr=o("pretrained_model_name_or_path"),SSr=o(":"),RSr=l(),WMe=a("ul"),cC=a("li"),QMe=a("strong"),PSr=o("speech_to_text"),BSr=o(" \u2014 "),pK=a("a"),ISr=o("TFSpeech2TextForConditionalGeneration"),NSr=o(" (Speech2Text model)"),qSr=l(),F(fC.$$.fragment),qOe=l(),Oc=a("h2"),mC=a("a"),HMe=a("span"),F(Ex.$$.fragment),jSr=l(),UMe=a("span"),DSr=o("FlaxAutoModel"),jOe=l(),gr=a("div"),F(Cx.$$.fragment),GSr=l(),Vc=a("p"),OSr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uK=a("a"),VSr=o("from_pretrained()"),XSr=o(" class method or the "),_K=a("a"),zSr=o("from_config()"),WSr=o(` class
method.`),QSr=l(),wx=a("p"),HSr=o("This class cannot be instantiated directly using "),JMe=a("code"),USr=o("__init__()"),JSr=o(" (throws an error)."),YSr=l(),Xt=a("div"),F(Ax.$$.fragment),KSr=l(),YMe=a("p"),ZSr=o("Instantiates one of the base model classes of the library from a configuration."),eRr=l(),Xc=a("p"),oRr=o(`Note:
Loading a model from its configuration file does `),KMe=a("strong"),rRr=o("not"),tRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=a("a"),aRr=o("from_pretrained()"),nRr=o(" to load the model weights."),sRr=l(),F(gC.$$.fragment),lRr=l(),Gr=a("div"),F(Lx.$$.fragment),iRr=l(),ZMe=a("p"),dRr=o("Instantiate one of the base model classes of the library from a pretrained model."),cRr=l(),vn=a("p"),fRr=o("The model class to instantiate is selected based on the "),e4e=a("code"),mRr=o("model_type"),gRr=o(` property of the config object (either
passed as an argument or loaded from `),o4e=a("code"),hRr=o("pretrained_model_name_or_path"),pRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=a("code"),uRr=o("pretrained_model_name_or_path"),_Rr=o(":"),bRr=l(),oe=a("ul"),hC=a("li"),t4e=a("strong"),vRr=o("albert"),FRr=o(" \u2014 "),vK=a("a"),TRr=o("FlaxAlbertModel"),MRr=o(" (ALBERT model)"),ERr=l(),pC=a("li"),a4e=a("strong"),CRr=o("bart"),wRr=o(" \u2014 "),FK=a("a"),ARr=o("FlaxBartModel"),LRr=o(" (BART model)"),yRr=l(),uC=a("li"),n4e=a("strong"),xRr=o("beit"),$Rr=o(" \u2014 "),TK=a("a"),kRr=o("FlaxBeitModel"),SRr=o(" (BEiT model)"),RRr=l(),_C=a("li"),s4e=a("strong"),PRr=o("bert"),BRr=o(" \u2014 "),MK=a("a"),IRr=o("FlaxBertModel"),NRr=o(" (BERT model)"),qRr=l(),bC=a("li"),l4e=a("strong"),jRr=o("big_bird"),DRr=o(" \u2014 "),EK=a("a"),GRr=o("FlaxBigBirdModel"),ORr=o(" (BigBird model)"),VRr=l(),vC=a("li"),i4e=a("strong"),XRr=o("blenderbot"),zRr=o(" \u2014 "),CK=a("a"),WRr=o("FlaxBlenderbotModel"),QRr=o(" (Blenderbot model)"),HRr=l(),FC=a("li"),d4e=a("strong"),URr=o("blenderbot-small"),JRr=o(" \u2014 "),wK=a("a"),YRr=o("FlaxBlenderbotSmallModel"),KRr=o(" (BlenderbotSmall model)"),ZRr=l(),TC=a("li"),c4e=a("strong"),ePr=o("clip"),oPr=o(" \u2014 "),AK=a("a"),rPr=o("FlaxCLIPModel"),tPr=o(" (CLIP model)"),aPr=l(),MC=a("li"),f4e=a("strong"),nPr=o("distilbert"),sPr=o(" \u2014 "),LK=a("a"),lPr=o("FlaxDistilBertModel"),iPr=o(" (DistilBERT model)"),dPr=l(),EC=a("li"),m4e=a("strong"),cPr=o("electra"),fPr=o(" \u2014 "),yK=a("a"),mPr=o("FlaxElectraModel"),gPr=o(" (ELECTRA model)"),hPr=l(),CC=a("li"),g4e=a("strong"),pPr=o("gpt2"),uPr=o(" \u2014 "),xK=a("a"),_Pr=o("FlaxGPT2Model"),bPr=o(" (OpenAI GPT-2 model)"),vPr=l(),wC=a("li"),h4e=a("strong"),FPr=o("gpt_neo"),TPr=o(" \u2014 "),$K=a("a"),MPr=o("FlaxGPTNeoModel"),EPr=o(" (GPT Neo model)"),CPr=l(),AC=a("li"),p4e=a("strong"),wPr=o("gptj"),APr=o(" \u2014 "),kK=a("a"),LPr=o("FlaxGPTJModel"),yPr=o(" (GPT-J model)"),xPr=l(),LC=a("li"),u4e=a("strong"),$Pr=o("longt5"),kPr=o(" \u2014 "),SK=a("a"),SPr=o("FlaxLongT5Model"),RPr=o(" (LongT5 model)"),PPr=l(),yC=a("li"),_4e=a("strong"),BPr=o("marian"),IPr=o(" \u2014 "),RK=a("a"),NPr=o("FlaxMarianModel"),qPr=o(" (Marian model)"),jPr=l(),xC=a("li"),b4e=a("strong"),DPr=o("mbart"),GPr=o(" \u2014 "),PK=a("a"),OPr=o("FlaxMBartModel"),VPr=o(" (mBART model)"),XPr=l(),$C=a("li"),v4e=a("strong"),zPr=o("mt5"),WPr=o(" \u2014 "),BK=a("a"),QPr=o("FlaxMT5Model"),HPr=o(" (MT5 model)"),UPr=l(),kC=a("li"),F4e=a("strong"),JPr=o("opt"),YPr=o(" \u2014 "),IK=a("a"),KPr=o("FlaxOPTModel"),ZPr=o(" (OPT model)"),eBr=l(),SC=a("li"),T4e=a("strong"),oBr=o("pegasus"),rBr=o(" \u2014 "),NK=a("a"),tBr=o("FlaxPegasusModel"),aBr=o(" (Pegasus model)"),nBr=l(),RC=a("li"),M4e=a("strong"),sBr=o("roberta"),lBr=o(" \u2014 "),qK=a("a"),iBr=o("FlaxRobertaModel"),dBr=o(" (RoBERTa model)"),cBr=l(),PC=a("li"),E4e=a("strong"),fBr=o("roformer"),mBr=o(" \u2014 "),jK=a("a"),gBr=o("FlaxRoFormerModel"),hBr=o(" (RoFormer model)"),pBr=l(),BC=a("li"),C4e=a("strong"),uBr=o("t5"),_Br=o(" \u2014 "),DK=a("a"),bBr=o("FlaxT5Model"),vBr=o(" (T5 model)"),FBr=l(),IC=a("li"),w4e=a("strong"),TBr=o("vision-text-dual-encoder"),MBr=o(" \u2014 "),GK=a("a"),EBr=o("FlaxVisionTextDualEncoderModel"),CBr=o(" (VisionTextDualEncoder model)"),wBr=l(),NC=a("li"),A4e=a("strong"),ABr=o("vit"),LBr=o(" \u2014 "),OK=a("a"),yBr=o("FlaxViTModel"),xBr=o(" (ViT model)"),$Br=l(),qC=a("li"),L4e=a("strong"),kBr=o("wav2vec2"),SBr=o(" \u2014 "),VK=a("a"),RBr=o("FlaxWav2Vec2Model"),PBr=o(" (Wav2Vec2 model)"),BBr=l(),jC=a("li"),y4e=a("strong"),IBr=o("xglm"),NBr=o(" \u2014 "),XK=a("a"),qBr=o("FlaxXGLMModel"),jBr=o(" (XGLM model)"),DBr=l(),DC=a("li"),x4e=a("strong"),GBr=o("xlm-roberta"),OBr=o(" \u2014 "),zK=a("a"),VBr=o("FlaxXLMRobertaModel"),XBr=o(" (XLM-RoBERTa model)"),zBr=l(),F(GC.$$.fragment),DOe=l(),zc=a("h2"),OC=a("a"),$4e=a("span"),F(yx.$$.fragment),WBr=l(),k4e=a("span"),QBr=o("FlaxAutoModelForCausalLM"),GOe=l(),hr=a("div"),F(xx.$$.fragment),HBr=l(),Wc=a("p"),UBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WK=a("a"),JBr=o("from_pretrained()"),YBr=o(" class method or the "),QK=a("a"),KBr=o("from_config()"),ZBr=o(` class
method.`),eIr=l(),$x=a("p"),oIr=o("This class cannot be instantiated directly using "),S4e=a("code"),rIr=o("__init__()"),tIr=o(" (throws an error)."),aIr=l(),zt=a("div"),F(kx.$$.fragment),nIr=l(),R4e=a("p"),sIr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lIr=l(),Qc=a("p"),iIr=o(`Note:
Loading a model from its configuration file does `),P4e=a("strong"),dIr=o("not"),cIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=a("a"),fIr=o("from_pretrained()"),mIr=o(" to load the model weights."),gIr=l(),F(VC.$$.fragment),hIr=l(),Or=a("div"),F(Sx.$$.fragment),pIr=l(),B4e=a("p"),uIr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_Ir=l(),Fn=a("p"),bIr=o("The model class to instantiate is selected based on the "),I4e=a("code"),vIr=o("model_type"),FIr=o(` property of the config object (either
passed as an argument or loaded from `),N4e=a("code"),TIr=o("pretrained_model_name_or_path"),MIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q4e=a("code"),EIr=o("pretrained_model_name_or_path"),CIr=o(":"),wIr=l(),xe=a("ul"),XC=a("li"),j4e=a("strong"),AIr=o("bart"),LIr=o(" \u2014 "),UK=a("a"),yIr=o("FlaxBartForCausalLM"),xIr=o(" (BART model)"),$Ir=l(),zC=a("li"),D4e=a("strong"),kIr=o("bert"),SIr=o(" \u2014 "),JK=a("a"),RIr=o("FlaxBertForCausalLM"),PIr=o(" (BERT model)"),BIr=l(),WC=a("li"),G4e=a("strong"),IIr=o("big_bird"),NIr=o(" \u2014 "),YK=a("a"),qIr=o("FlaxBigBirdForCausalLM"),jIr=o(" (BigBird model)"),DIr=l(),QC=a("li"),O4e=a("strong"),GIr=o("electra"),OIr=o(" \u2014 "),KK=a("a"),VIr=o("FlaxElectraForCausalLM"),XIr=o(" (ELECTRA model)"),zIr=l(),HC=a("li"),V4e=a("strong"),WIr=o("gpt2"),QIr=o(" \u2014 "),ZK=a("a"),HIr=o("FlaxGPT2LMHeadModel"),UIr=o(" (OpenAI GPT-2 model)"),JIr=l(),UC=a("li"),X4e=a("strong"),YIr=o("gpt_neo"),KIr=o(" \u2014 "),eZ=a("a"),ZIr=o("FlaxGPTNeoForCausalLM"),eNr=o(" (GPT Neo model)"),oNr=l(),JC=a("li"),z4e=a("strong"),rNr=o("gptj"),tNr=o(" \u2014 "),oZ=a("a"),aNr=o("FlaxGPTJForCausalLM"),nNr=o(" (GPT-J model)"),sNr=l(),YC=a("li"),W4e=a("strong"),lNr=o("opt"),iNr=o(" \u2014 "),rZ=a("a"),dNr=o("FlaxOPTForCausalLM"),cNr=o(" (OPT model)"),fNr=l(),KC=a("li"),Q4e=a("strong"),mNr=o("roberta"),gNr=o(" \u2014 "),tZ=a("a"),hNr=o("FlaxRobertaForCausalLM"),pNr=o(" (RoBERTa model)"),uNr=l(),ZC=a("li"),H4e=a("strong"),_Nr=o("xglm"),bNr=o(" \u2014 "),aZ=a("a"),vNr=o("FlaxXGLMForCausalLM"),FNr=o(" (XGLM model)"),TNr=l(),F(e5.$$.fragment),OOe=l(),Hc=a("h2"),o5=a("a"),U4e=a("span"),F(Rx.$$.fragment),MNr=l(),J4e=a("span"),ENr=o("FlaxAutoModelForPreTraining"),VOe=l(),pr=a("div"),F(Px.$$.fragment),CNr=l(),Uc=a("p"),wNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nZ=a("a"),ANr=o("from_pretrained()"),LNr=o(" class method or the "),sZ=a("a"),yNr=o("from_config()"),xNr=o(` class
method.`),$Nr=l(),Bx=a("p"),kNr=o("This class cannot be instantiated directly using "),Y4e=a("code"),SNr=o("__init__()"),RNr=o(" (throws an error)."),PNr=l(),Wt=a("div"),F(Ix.$$.fragment),BNr=l(),K4e=a("p"),INr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),NNr=l(),Jc=a("p"),qNr=o(`Note:
Loading a model from its configuration file does `),Z4e=a("strong"),jNr=o("not"),DNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=a("a"),GNr=o("from_pretrained()"),ONr=o(" to load the model weights."),VNr=l(),F(r5.$$.fragment),XNr=l(),Vr=a("div"),F(Nx.$$.fragment),zNr=l(),eEe=a("p"),WNr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),QNr=l(),Tn=a("p"),HNr=o("The model class to instantiate is selected based on the "),oEe=a("code"),UNr=o("model_type"),JNr=o(` property of the config object (either
passed as an argument or loaded from `),rEe=a("code"),YNr=o("pretrained_model_name_or_path"),KNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=a("code"),ZNr=o("pretrained_model_name_or_path"),eqr=o(":"),oqr=l(),Ee=a("ul"),t5=a("li"),aEe=a("strong"),rqr=o("albert"),tqr=o(" \u2014 "),iZ=a("a"),aqr=o("FlaxAlbertForPreTraining"),nqr=o(" (ALBERT model)"),sqr=l(),a5=a("li"),nEe=a("strong"),lqr=o("bart"),iqr=o(" \u2014 "),dZ=a("a"),dqr=o("FlaxBartForConditionalGeneration"),cqr=o(" (BART model)"),fqr=l(),n5=a("li"),sEe=a("strong"),mqr=o("bert"),gqr=o(" \u2014 "),cZ=a("a"),hqr=o("FlaxBertForPreTraining"),pqr=o(" (BERT model)"),uqr=l(),s5=a("li"),lEe=a("strong"),_qr=o("big_bird"),bqr=o(" \u2014 "),fZ=a("a"),vqr=o("FlaxBigBirdForPreTraining"),Fqr=o(" (BigBird model)"),Tqr=l(),l5=a("li"),iEe=a("strong"),Mqr=o("electra"),Eqr=o(" \u2014 "),mZ=a("a"),Cqr=o("FlaxElectraForPreTraining"),wqr=o(" (ELECTRA model)"),Aqr=l(),i5=a("li"),dEe=a("strong"),Lqr=o("longt5"),yqr=o(" \u2014 "),gZ=a("a"),xqr=o("FlaxLongT5ForConditionalGeneration"),$qr=o(" (LongT5 model)"),kqr=l(),d5=a("li"),cEe=a("strong"),Sqr=o("mbart"),Rqr=o(" \u2014 "),hZ=a("a"),Pqr=o("FlaxMBartForConditionalGeneration"),Bqr=o(" (mBART model)"),Iqr=l(),c5=a("li"),fEe=a("strong"),Nqr=o("mt5"),qqr=o(" \u2014 "),pZ=a("a"),jqr=o("FlaxMT5ForConditionalGeneration"),Dqr=o(" (MT5 model)"),Gqr=l(),f5=a("li"),mEe=a("strong"),Oqr=o("roberta"),Vqr=o(" \u2014 "),uZ=a("a"),Xqr=o("FlaxRobertaForMaskedLM"),zqr=o(" (RoBERTa model)"),Wqr=l(),m5=a("li"),gEe=a("strong"),Qqr=o("roformer"),Hqr=o(" \u2014 "),_Z=a("a"),Uqr=o("FlaxRoFormerForMaskedLM"),Jqr=o(" (RoFormer model)"),Yqr=l(),g5=a("li"),hEe=a("strong"),Kqr=o("t5"),Zqr=o(" \u2014 "),bZ=a("a"),ejr=o("FlaxT5ForConditionalGeneration"),ojr=o(" (T5 model)"),rjr=l(),h5=a("li"),pEe=a("strong"),tjr=o("wav2vec2"),ajr=o(" \u2014 "),vZ=a("a"),njr=o("FlaxWav2Vec2ForPreTraining"),sjr=o(" (Wav2Vec2 model)"),ljr=l(),p5=a("li"),uEe=a("strong"),ijr=o("xlm-roberta"),djr=o(" \u2014 "),FZ=a("a"),cjr=o("FlaxXLMRobertaForMaskedLM"),fjr=o(" (XLM-RoBERTa model)"),mjr=l(),F(u5.$$.fragment),XOe=l(),Yc=a("h2"),_5=a("a"),_Ee=a("span"),F(qx.$$.fragment),gjr=l(),bEe=a("span"),hjr=o("FlaxAutoModelForMaskedLM"),zOe=l(),ur=a("div"),F(jx.$$.fragment),pjr=l(),Kc=a("p"),ujr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TZ=a("a"),_jr=o("from_pretrained()"),bjr=o(" class method or the "),MZ=a("a"),vjr=o("from_config()"),Fjr=o(` class
method.`),Tjr=l(),Dx=a("p"),Mjr=o("This class cannot be instantiated directly using "),vEe=a("code"),Ejr=o("__init__()"),Cjr=o(" (throws an error)."),wjr=l(),Qt=a("div"),F(Gx.$$.fragment),Ajr=l(),FEe=a("p"),Ljr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yjr=l(),Zc=a("p"),xjr=o(`Note:
Loading a model from its configuration file does `),TEe=a("strong"),$jr=o("not"),kjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=a("a"),Sjr=o("from_pretrained()"),Rjr=o(" to load the model weights."),Pjr=l(),F(b5.$$.fragment),Bjr=l(),Xr=a("div"),F(Ox.$$.fragment),Ijr=l(),MEe=a("p"),Njr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qjr=l(),Mn=a("p"),jjr=o("The model class to instantiate is selected based on the "),EEe=a("code"),Djr=o("model_type"),Gjr=o(` property of the config object (either
passed as an argument or loaded from `),CEe=a("code"),Ojr=o("pretrained_model_name_or_path"),Vjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=a("code"),Xjr=o("pretrained_model_name_or_path"),zjr=o(":"),Wjr=l(),$e=a("ul"),v5=a("li"),AEe=a("strong"),Qjr=o("albert"),Hjr=o(" \u2014 "),CZ=a("a"),Ujr=o("FlaxAlbertForMaskedLM"),Jjr=o(" (ALBERT model)"),Yjr=l(),F5=a("li"),LEe=a("strong"),Kjr=o("bart"),Zjr=o(" \u2014 "),wZ=a("a"),eDr=o("FlaxBartForConditionalGeneration"),oDr=o(" (BART model)"),rDr=l(),T5=a("li"),yEe=a("strong"),tDr=o("bert"),aDr=o(" \u2014 "),AZ=a("a"),nDr=o("FlaxBertForMaskedLM"),sDr=o(" (BERT model)"),lDr=l(),M5=a("li"),xEe=a("strong"),iDr=o("big_bird"),dDr=o(" \u2014 "),LZ=a("a"),cDr=o("FlaxBigBirdForMaskedLM"),fDr=o(" (BigBird model)"),mDr=l(),E5=a("li"),$Ee=a("strong"),gDr=o("distilbert"),hDr=o(" \u2014 "),yZ=a("a"),pDr=o("FlaxDistilBertForMaskedLM"),uDr=o(" (DistilBERT model)"),_Dr=l(),C5=a("li"),kEe=a("strong"),bDr=o("electra"),vDr=o(" \u2014 "),xZ=a("a"),FDr=o("FlaxElectraForMaskedLM"),TDr=o(" (ELECTRA model)"),MDr=l(),w5=a("li"),SEe=a("strong"),EDr=o("mbart"),CDr=o(" \u2014 "),$Z=a("a"),wDr=o("FlaxMBartForConditionalGeneration"),ADr=o(" (mBART model)"),LDr=l(),A5=a("li"),REe=a("strong"),yDr=o("roberta"),xDr=o(" \u2014 "),kZ=a("a"),$Dr=o("FlaxRobertaForMaskedLM"),kDr=o(" (RoBERTa model)"),SDr=l(),L5=a("li"),PEe=a("strong"),RDr=o("roformer"),PDr=o(" \u2014 "),SZ=a("a"),BDr=o("FlaxRoFormerForMaskedLM"),IDr=o(" (RoFormer model)"),NDr=l(),y5=a("li"),BEe=a("strong"),qDr=o("xlm-roberta"),jDr=o(" \u2014 "),RZ=a("a"),DDr=o("FlaxXLMRobertaForMaskedLM"),GDr=o(" (XLM-RoBERTa model)"),ODr=l(),F(x5.$$.fragment),WOe=l(),ef=a("h2"),$5=a("a"),IEe=a("span"),F(Vx.$$.fragment),VDr=l(),NEe=a("span"),XDr=o("FlaxAutoModelForSeq2SeqLM"),QOe=l(),_r=a("div"),F(Xx.$$.fragment),zDr=l(),of=a("p"),WDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PZ=a("a"),QDr=o("from_pretrained()"),HDr=o(" class method or the "),BZ=a("a"),UDr=o("from_config()"),JDr=o(` class
method.`),YDr=l(),zx=a("p"),KDr=o("This class cannot be instantiated directly using "),qEe=a("code"),ZDr=o("__init__()"),eGr=o(" (throws an error)."),oGr=l(),Ht=a("div"),F(Wx.$$.fragment),rGr=l(),jEe=a("p"),tGr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aGr=l(),rf=a("p"),nGr=o(`Note:
Loading a model from its configuration file does `),DEe=a("strong"),sGr=o("not"),lGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IZ=a("a"),iGr=o("from_pretrained()"),dGr=o(" to load the model weights."),cGr=l(),F(k5.$$.fragment),fGr=l(),zr=a("div"),F(Qx.$$.fragment),mGr=l(),GEe=a("p"),gGr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hGr=l(),En=a("p"),pGr=o("The model class to instantiate is selected based on the "),OEe=a("code"),uGr=o("model_type"),_Gr=o(` property of the config object (either
passed as an argument or loaded from `),VEe=a("code"),bGr=o("pretrained_model_name_or_path"),vGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=a("code"),FGr=o("pretrained_model_name_or_path"),TGr=o(":"),MGr=l(),ke=a("ul"),S5=a("li"),zEe=a("strong"),EGr=o("bart"),CGr=o(" \u2014 "),NZ=a("a"),wGr=o("FlaxBartForConditionalGeneration"),AGr=o(" (BART model)"),LGr=l(),R5=a("li"),WEe=a("strong"),yGr=o("blenderbot"),xGr=o(" \u2014 "),qZ=a("a"),$Gr=o("FlaxBlenderbotForConditionalGeneration"),kGr=o(" (Blenderbot model)"),SGr=l(),P5=a("li"),QEe=a("strong"),RGr=o("blenderbot-small"),PGr=o(" \u2014 "),jZ=a("a"),BGr=o("FlaxBlenderbotSmallForConditionalGeneration"),IGr=o(" (BlenderbotSmall model)"),NGr=l(),B5=a("li"),HEe=a("strong"),qGr=o("encoder-decoder"),jGr=o(" \u2014 "),DZ=a("a"),DGr=o("FlaxEncoderDecoderModel"),GGr=o(" (Encoder decoder model)"),OGr=l(),I5=a("li"),UEe=a("strong"),VGr=o("longt5"),XGr=o(" \u2014 "),GZ=a("a"),zGr=o("FlaxLongT5ForConditionalGeneration"),WGr=o(" (LongT5 model)"),QGr=l(),N5=a("li"),JEe=a("strong"),HGr=o("marian"),UGr=o(" \u2014 "),OZ=a("a"),JGr=o("FlaxMarianMTModel"),YGr=o(" (Marian model)"),KGr=l(),q5=a("li"),YEe=a("strong"),ZGr=o("mbart"),eOr=o(" \u2014 "),VZ=a("a"),oOr=o("FlaxMBartForConditionalGeneration"),rOr=o(" (mBART model)"),tOr=l(),j5=a("li"),KEe=a("strong"),aOr=o("mt5"),nOr=o(" \u2014 "),XZ=a("a"),sOr=o("FlaxMT5ForConditionalGeneration"),lOr=o(" (MT5 model)"),iOr=l(),D5=a("li"),ZEe=a("strong"),dOr=o("pegasus"),cOr=o(" \u2014 "),zZ=a("a"),fOr=o("FlaxPegasusForConditionalGeneration"),mOr=o(" (Pegasus model)"),gOr=l(),G5=a("li"),eCe=a("strong"),hOr=o("t5"),pOr=o(" \u2014 "),WZ=a("a"),uOr=o("FlaxT5ForConditionalGeneration"),_Or=o(" (T5 model)"),bOr=l(),F(O5.$$.fragment),HOe=l(),tf=a("h2"),V5=a("a"),oCe=a("span"),F(Hx.$$.fragment),vOr=l(),rCe=a("span"),FOr=o("FlaxAutoModelForSequenceClassification"),UOe=l(),br=a("div"),F(Ux.$$.fragment),TOr=l(),af=a("p"),MOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QZ=a("a"),EOr=o("from_pretrained()"),COr=o(" class method or the "),HZ=a("a"),wOr=o("from_config()"),AOr=o(` class
method.`),LOr=l(),Jx=a("p"),yOr=o("This class cannot be instantiated directly using "),tCe=a("code"),xOr=o("__init__()"),$Or=o(" (throws an error)."),kOr=l(),Ut=a("div"),F(Yx.$$.fragment),SOr=l(),aCe=a("p"),ROr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),POr=l(),nf=a("p"),BOr=o(`Note:
Loading a model from its configuration file does `),nCe=a("strong"),IOr=o("not"),NOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UZ=a("a"),qOr=o("from_pretrained()"),jOr=o(" to load the model weights."),DOr=l(),F(X5.$$.fragment),GOr=l(),Wr=a("div"),F(Kx.$$.fragment),OOr=l(),sCe=a("p"),VOr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XOr=l(),Cn=a("p"),zOr=o("The model class to instantiate is selected based on the "),lCe=a("code"),WOr=o("model_type"),QOr=o(` property of the config object (either
passed as an argument or loaded from `),iCe=a("code"),HOr=o("pretrained_model_name_or_path"),UOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dCe=a("code"),JOr=o("pretrained_model_name_or_path"),YOr=o(":"),KOr=l(),Se=a("ul"),z5=a("li"),cCe=a("strong"),ZOr=o("albert"),eVr=o(" \u2014 "),JZ=a("a"),oVr=o("FlaxAlbertForSequenceClassification"),rVr=o(" (ALBERT model)"),tVr=l(),W5=a("li"),fCe=a("strong"),aVr=o("bart"),nVr=o(" \u2014 "),YZ=a("a"),sVr=o("FlaxBartForSequenceClassification"),lVr=o(" (BART model)"),iVr=l(),Q5=a("li"),mCe=a("strong"),dVr=o("bert"),cVr=o(" \u2014 "),KZ=a("a"),fVr=o("FlaxBertForSequenceClassification"),mVr=o(" (BERT model)"),gVr=l(),H5=a("li"),gCe=a("strong"),hVr=o("big_bird"),pVr=o(" \u2014 "),ZZ=a("a"),uVr=o("FlaxBigBirdForSequenceClassification"),_Vr=o(" (BigBird model)"),bVr=l(),U5=a("li"),hCe=a("strong"),vVr=o("distilbert"),FVr=o(" \u2014 "),eee=a("a"),TVr=o("FlaxDistilBertForSequenceClassification"),MVr=o(" (DistilBERT model)"),EVr=l(),J5=a("li"),pCe=a("strong"),CVr=o("electra"),wVr=o(" \u2014 "),oee=a("a"),AVr=o("FlaxElectraForSequenceClassification"),LVr=o(" (ELECTRA model)"),yVr=l(),Y5=a("li"),uCe=a("strong"),xVr=o("mbart"),$Vr=o(" \u2014 "),ree=a("a"),kVr=o("FlaxMBartForSequenceClassification"),SVr=o(" (mBART model)"),RVr=l(),K5=a("li"),_Ce=a("strong"),PVr=o("roberta"),BVr=o(" \u2014 "),tee=a("a"),IVr=o("FlaxRobertaForSequenceClassification"),NVr=o(" (RoBERTa model)"),qVr=l(),Z5=a("li"),bCe=a("strong"),jVr=o("roformer"),DVr=o(" \u2014 "),aee=a("a"),GVr=o("FlaxRoFormerForSequenceClassification"),OVr=o(" (RoFormer model)"),VVr=l(),e3=a("li"),vCe=a("strong"),XVr=o("xlm-roberta"),zVr=o(" \u2014 "),nee=a("a"),WVr=o("FlaxXLMRobertaForSequenceClassification"),QVr=o(" (XLM-RoBERTa model)"),HVr=l(),F(o3.$$.fragment),JOe=l(),sf=a("h2"),r3=a("a"),FCe=a("span"),F(Zx.$$.fragment),UVr=l(),TCe=a("span"),JVr=o("FlaxAutoModelForQuestionAnswering"),YOe=l(),vr=a("div"),F(e$.$$.fragment),YVr=l(),lf=a("p"),KVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),see=a("a"),ZVr=o("from_pretrained()"),eXr=o(" class method or the "),lee=a("a"),oXr=o("from_config()"),rXr=o(` class
method.`),tXr=l(),o$=a("p"),aXr=o("This class cannot be instantiated directly using "),MCe=a("code"),nXr=o("__init__()"),sXr=o(" (throws an error)."),lXr=l(),Jt=a("div"),F(r$.$$.fragment),iXr=l(),ECe=a("p"),dXr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cXr=l(),df=a("p"),fXr=o(`Note:
Loading a model from its configuration file does `),CCe=a("strong"),mXr=o("not"),gXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iee=a("a"),hXr=o("from_pretrained()"),pXr=o(" to load the model weights."),uXr=l(),F(t3.$$.fragment),_Xr=l(),Qr=a("div"),F(t$.$$.fragment),bXr=l(),wCe=a("p"),vXr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FXr=l(),wn=a("p"),TXr=o("The model class to instantiate is selected based on the "),ACe=a("code"),MXr=o("model_type"),EXr=o(` property of the config object (either
passed as an argument or loaded from `),LCe=a("code"),CXr=o("pretrained_model_name_or_path"),wXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yCe=a("code"),AXr=o("pretrained_model_name_or_path"),LXr=o(":"),yXr=l(),Re=a("ul"),a3=a("li"),xCe=a("strong"),xXr=o("albert"),$Xr=o(" \u2014 "),dee=a("a"),kXr=o("FlaxAlbertForQuestionAnswering"),SXr=o(" (ALBERT model)"),RXr=l(),n3=a("li"),$Ce=a("strong"),PXr=o("bart"),BXr=o(" \u2014 "),cee=a("a"),IXr=o("FlaxBartForQuestionAnswering"),NXr=o(" (BART model)"),qXr=l(),s3=a("li"),kCe=a("strong"),jXr=o("bert"),DXr=o(" \u2014 "),fee=a("a"),GXr=o("FlaxBertForQuestionAnswering"),OXr=o(" (BERT model)"),VXr=l(),l3=a("li"),SCe=a("strong"),XXr=o("big_bird"),zXr=o(" \u2014 "),mee=a("a"),WXr=o("FlaxBigBirdForQuestionAnswering"),QXr=o(" (BigBird model)"),HXr=l(),i3=a("li"),RCe=a("strong"),UXr=o("distilbert"),JXr=o(" \u2014 "),gee=a("a"),YXr=o("FlaxDistilBertForQuestionAnswering"),KXr=o(" (DistilBERT model)"),ZXr=l(),d3=a("li"),PCe=a("strong"),ezr=o("electra"),ozr=o(" \u2014 "),hee=a("a"),rzr=o("FlaxElectraForQuestionAnswering"),tzr=o(" (ELECTRA model)"),azr=l(),c3=a("li"),BCe=a("strong"),nzr=o("mbart"),szr=o(" \u2014 "),pee=a("a"),lzr=o("FlaxMBartForQuestionAnswering"),izr=o(" (mBART model)"),dzr=l(),f3=a("li"),ICe=a("strong"),czr=o("roberta"),fzr=o(" \u2014 "),uee=a("a"),mzr=o("FlaxRobertaForQuestionAnswering"),gzr=o(" (RoBERTa model)"),hzr=l(),m3=a("li"),NCe=a("strong"),pzr=o("roformer"),uzr=o(" \u2014 "),_ee=a("a"),_zr=o("FlaxRoFormerForQuestionAnswering"),bzr=o(" (RoFormer model)"),vzr=l(),g3=a("li"),qCe=a("strong"),Fzr=o("xlm-roberta"),Tzr=o(" \u2014 "),bee=a("a"),Mzr=o("FlaxXLMRobertaForQuestionAnswering"),Ezr=o(" (XLM-RoBERTa model)"),Czr=l(),F(h3.$$.fragment),KOe=l(),cf=a("h2"),p3=a("a"),jCe=a("span"),F(a$.$$.fragment),wzr=l(),DCe=a("span"),Azr=o("FlaxAutoModelForTokenClassification"),ZOe=l(),Fr=a("div"),F(n$.$$.fragment),Lzr=l(),ff=a("p"),yzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vee=a("a"),xzr=o("from_pretrained()"),$zr=o(" class method or the "),Fee=a("a"),kzr=o("from_config()"),Szr=o(` class
method.`),Rzr=l(),s$=a("p"),Pzr=o("This class cannot be instantiated directly using "),GCe=a("code"),Bzr=o("__init__()"),Izr=o(" (throws an error)."),Nzr=l(),Yt=a("div"),F(l$.$$.fragment),qzr=l(),OCe=a("p"),jzr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Dzr=l(),mf=a("p"),Gzr=o(`Note:
Loading a model from its configuration file does `),VCe=a("strong"),Ozr=o("not"),Vzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tee=a("a"),Xzr=o("from_pretrained()"),zzr=o(" to load the model weights."),Wzr=l(),F(u3.$$.fragment),Qzr=l(),Hr=a("div"),F(i$.$$.fragment),Hzr=l(),XCe=a("p"),Uzr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Jzr=l(),An=a("p"),Yzr=o("The model class to instantiate is selected based on the "),zCe=a("code"),Kzr=o("model_type"),Zzr=o(` property of the config object (either
passed as an argument or loaded from `),WCe=a("code"),eWr=o("pretrained_model_name_or_path"),oWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QCe=a("code"),rWr=o("pretrained_model_name_or_path"),tWr=o(":"),aWr=l(),Ve=a("ul"),_3=a("li"),HCe=a("strong"),nWr=o("albert"),sWr=o(" \u2014 "),Mee=a("a"),lWr=o("FlaxAlbertForTokenClassification"),iWr=o(" (ALBERT model)"),dWr=l(),b3=a("li"),UCe=a("strong"),cWr=o("bert"),fWr=o(" \u2014 "),Eee=a("a"),mWr=o("FlaxBertForTokenClassification"),gWr=o(" (BERT model)"),hWr=l(),v3=a("li"),JCe=a("strong"),pWr=o("big_bird"),uWr=o(" \u2014 "),Cee=a("a"),_Wr=o("FlaxBigBirdForTokenClassification"),bWr=o(" (BigBird model)"),vWr=l(),F3=a("li"),YCe=a("strong"),FWr=o("distilbert"),TWr=o(" \u2014 "),wee=a("a"),MWr=o("FlaxDistilBertForTokenClassification"),EWr=o(" (DistilBERT model)"),CWr=l(),T3=a("li"),KCe=a("strong"),wWr=o("electra"),AWr=o(" \u2014 "),Aee=a("a"),LWr=o("FlaxElectraForTokenClassification"),yWr=o(" (ELECTRA model)"),xWr=l(),M3=a("li"),ZCe=a("strong"),$Wr=o("roberta"),kWr=o(" \u2014 "),Lee=a("a"),SWr=o("FlaxRobertaForTokenClassification"),RWr=o(" (RoBERTa model)"),PWr=l(),E3=a("li"),e5e=a("strong"),BWr=o("roformer"),IWr=o(" \u2014 "),yee=a("a"),NWr=o("FlaxRoFormerForTokenClassification"),qWr=o(" (RoFormer model)"),jWr=l(),C3=a("li"),o5e=a("strong"),DWr=o("xlm-roberta"),GWr=o(" \u2014 "),xee=a("a"),OWr=o("FlaxXLMRobertaForTokenClassification"),VWr=o(" (XLM-RoBERTa model)"),XWr=l(),F(w3.$$.fragment),eVe=l(),gf=a("h2"),A3=a("a"),r5e=a("span"),F(d$.$$.fragment),zWr=l(),t5e=a("span"),WWr=o("FlaxAutoModelForMultipleChoice"),oVe=l(),Tr=a("div"),F(c$.$$.fragment),QWr=l(),hf=a("p"),HWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$ee=a("a"),UWr=o("from_pretrained()"),JWr=o(" class method or the "),kee=a("a"),YWr=o("from_config()"),KWr=o(` class
method.`),ZWr=l(),f$=a("p"),eQr=o("This class cannot be instantiated directly using "),a5e=a("code"),oQr=o("__init__()"),rQr=o(" (throws an error)."),tQr=l(),Kt=a("div"),F(m$.$$.fragment),aQr=l(),n5e=a("p"),nQr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sQr=l(),pf=a("p"),lQr=o(`Note:
Loading a model from its configuration file does `),s5e=a("strong"),iQr=o("not"),dQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),See=a("a"),cQr=o("from_pretrained()"),fQr=o(" to load the model weights."),mQr=l(),F(L3.$$.fragment),gQr=l(),Ur=a("div"),F(g$.$$.fragment),hQr=l(),l5e=a("p"),pQr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uQr=l(),Ln=a("p"),_Qr=o("The model class to instantiate is selected based on the "),i5e=a("code"),bQr=o("model_type"),vQr=o(` property of the config object (either
passed as an argument or loaded from `),d5e=a("code"),FQr=o("pretrained_model_name_or_path"),TQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c5e=a("code"),MQr=o("pretrained_model_name_or_path"),EQr=o(":"),CQr=l(),Xe=a("ul"),y3=a("li"),f5e=a("strong"),wQr=o("albert"),AQr=o(" \u2014 "),Ree=a("a"),LQr=o("FlaxAlbertForMultipleChoice"),yQr=o(" (ALBERT model)"),xQr=l(),x3=a("li"),m5e=a("strong"),$Qr=o("bert"),kQr=o(" \u2014 "),Pee=a("a"),SQr=o("FlaxBertForMultipleChoice"),RQr=o(" (BERT model)"),PQr=l(),$3=a("li"),g5e=a("strong"),BQr=o("big_bird"),IQr=o(" \u2014 "),Bee=a("a"),NQr=o("FlaxBigBirdForMultipleChoice"),qQr=o(" (BigBird model)"),jQr=l(),k3=a("li"),h5e=a("strong"),DQr=o("distilbert"),GQr=o(" \u2014 "),Iee=a("a"),OQr=o("FlaxDistilBertForMultipleChoice"),VQr=o(" (DistilBERT model)"),XQr=l(),S3=a("li"),p5e=a("strong"),zQr=o("electra"),WQr=o(" \u2014 "),Nee=a("a"),QQr=o("FlaxElectraForMultipleChoice"),HQr=o(" (ELECTRA model)"),UQr=l(),R3=a("li"),u5e=a("strong"),JQr=o("roberta"),YQr=o(" \u2014 "),qee=a("a"),KQr=o("FlaxRobertaForMultipleChoice"),ZQr=o(" (RoBERTa model)"),eHr=l(),P3=a("li"),_5e=a("strong"),oHr=o("roformer"),rHr=o(" \u2014 "),jee=a("a"),tHr=o("FlaxRoFormerForMultipleChoice"),aHr=o(" (RoFormer model)"),nHr=l(),B3=a("li"),b5e=a("strong"),sHr=o("xlm-roberta"),lHr=o(" \u2014 "),Dee=a("a"),iHr=o("FlaxXLMRobertaForMultipleChoice"),dHr=o(" (XLM-RoBERTa model)"),cHr=l(),F(I3.$$.fragment),rVe=l(),uf=a("h2"),N3=a("a"),v5e=a("span"),F(h$.$$.fragment),fHr=l(),F5e=a("span"),mHr=o("FlaxAutoModelForNextSentencePrediction"),tVe=l(),Mr=a("div"),F(p$.$$.fragment),gHr=l(),_f=a("p"),hHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Gee=a("a"),pHr=o("from_pretrained()"),uHr=o(" class method or the "),Oee=a("a"),_Hr=o("from_config()"),bHr=o(` class
method.`),vHr=l(),u$=a("p"),FHr=o("This class cannot be instantiated directly using "),T5e=a("code"),THr=o("__init__()"),MHr=o(" (throws an error)."),EHr=l(),Zt=a("div"),F(_$.$$.fragment),CHr=l(),M5e=a("p"),wHr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),AHr=l(),bf=a("p"),LHr=o(`Note:
Loading a model from its configuration file does `),E5e=a("strong"),yHr=o("not"),xHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=a("a"),$Hr=o("from_pretrained()"),kHr=o(" to load the model weights."),SHr=l(),F(q3.$$.fragment),RHr=l(),Jr=a("div"),F(b$.$$.fragment),PHr=l(),C5e=a("p"),BHr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),IHr=l(),yn=a("p"),NHr=o("The model class to instantiate is selected based on the "),w5e=a("code"),qHr=o("model_type"),jHr=o(` property of the config object (either
passed as an argument or loaded from `),A5e=a("code"),DHr=o("pretrained_model_name_or_path"),GHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L5e=a("code"),OHr=o("pretrained_model_name_or_path"),VHr=o(":"),XHr=l(),y5e=a("ul"),j3=a("li"),x5e=a("strong"),zHr=o("bert"),WHr=o(" \u2014 "),Xee=a("a"),QHr=o("FlaxBertForNextSentencePrediction"),HHr=o(" (BERT model)"),UHr=l(),F(D3.$$.fragment),aVe=l(),vf=a("h2"),G3=a("a"),$5e=a("span"),F(v$.$$.fragment),JHr=l(),k5e=a("span"),YHr=o("FlaxAutoModelForImageClassification"),nVe=l(),Er=a("div"),F(F$.$$.fragment),KHr=l(),Ff=a("p"),ZHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zee=a("a"),eUr=o("from_pretrained()"),oUr=o(" class method or the "),Wee=a("a"),rUr=o("from_config()"),tUr=o(` class
method.`),aUr=l(),T$=a("p"),nUr=o("This class cannot be instantiated directly using "),S5e=a("code"),sUr=o("__init__()"),lUr=o(" (throws an error)."),iUr=l(),ea=a("div"),F(M$.$$.fragment),dUr=l(),R5e=a("p"),cUr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fUr=l(),Tf=a("p"),mUr=o(`Note:
Loading a model from its configuration file does `),P5e=a("strong"),gUr=o("not"),hUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=a("a"),pUr=o("from_pretrained()"),uUr=o(" to load the model weights."),_Ur=l(),F(O3.$$.fragment),bUr=l(),Yr=a("div"),F(E$.$$.fragment),vUr=l(),B5e=a("p"),FUr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),TUr=l(),xn=a("p"),MUr=o("The model class to instantiate is selected based on the "),I5e=a("code"),EUr=o("model_type"),CUr=o(` property of the config object (either
passed as an argument or loaded from `),N5e=a("code"),wUr=o("pretrained_model_name_or_path"),AUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q5e=a("code"),LUr=o("pretrained_model_name_or_path"),yUr=o(":"),xUr=l(),C$=a("ul"),V3=a("li"),j5e=a("strong"),$Ur=o("beit"),kUr=o(" \u2014 "),Hee=a("a"),SUr=o("FlaxBeitForImageClassification"),RUr=o(" (BEiT model)"),PUr=l(),X3=a("li"),D5e=a("strong"),BUr=o("vit"),IUr=o(" \u2014 "),Uee=a("a"),NUr=o("FlaxViTForImageClassification"),qUr=o(" (ViT model)"),jUr=l(),F(z3.$$.fragment),sVe=l(),Mf=a("h2"),W3=a("a"),G5e=a("span"),F(w$.$$.fragment),DUr=l(),O5e=a("span"),GUr=o("FlaxAutoModelForVision2Seq"),lVe=l(),Cr=a("div"),F(A$.$$.fragment),OUr=l(),Ef=a("p"),VUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Jee=a("a"),XUr=o("from_pretrained()"),zUr=o(" class method or the "),Yee=a("a"),WUr=o("from_config()"),QUr=o(` class
method.`),HUr=l(),L$=a("p"),UUr=o("This class cannot be instantiated directly using "),V5e=a("code"),JUr=o("__init__()"),YUr=o(" (throws an error)."),KUr=l(),oa=a("div"),F(y$.$$.fragment),ZUr=l(),X5e=a("p"),eJr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),oJr=l(),Cf=a("p"),rJr=o(`Note:
Loading a model from its configuration file does `),z5e=a("strong"),tJr=o("not"),aJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kee=a("a"),nJr=o("from_pretrained()"),sJr=o(" to load the model weights."),lJr=l(),F(Q3.$$.fragment),iJr=l(),Kr=a("div"),F(x$.$$.fragment),dJr=l(),W5e=a("p"),cJr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),fJr=l(),$n=a("p"),mJr=o("The model class to instantiate is selected based on the "),Q5e=a("code"),gJr=o("model_type"),hJr=o(` property of the config object (either
passed as an argument or loaded from `),H5e=a("code"),pJr=o("pretrained_model_name_or_path"),uJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U5e=a("code"),_Jr=o("pretrained_model_name_or_path"),bJr=o(":"),vJr=l(),J5e=a("ul"),H3=a("li"),Y5e=a("strong"),FJr=o("vision-encoder-decoder"),TJr=o(" \u2014 "),Zee=a("a"),MJr=o("FlaxVisionEncoderDecoderModel"),EJr=o(" (Vision Encoder decoder model)"),CJr=l(),F(U3.$$.fragment),this.h()},l(f){const _=kqt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var $$=s(p);m=n($$,"A",{id:!0,class:!0,href:!0});var K5e=s(m);u=n(K5e,"SPAN",{});var Z5e=s(u);T(d.$$.fragment,Z5e),Z5e.forEach(t),K5e.forEach(t),h=i($$),Eo=n($$,"SPAN",{});var e3e=s(Eo);Ti=r(e3e,"Auto Classes"),e3e.forEach(t),$$.forEach(t),yf=i(f),at=n(f,"P",{});var k$=s(at);Mi=r(k$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ei=n(k$,"CODE",{});var o3e=s(Ei);u6=r(o3e,"from_pretrained()"),o3e.forEach(t),xf=r(k$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),k$.forEach(t),Oe=i(f),We=n(f,"P",{});var kn=s(We);Ci=r(kn,"Instantiating one of "),Sn=n(kn,"A",{href:!0});var r3e=s(Sn);_6=r(r3e,"AutoConfig"),r3e.forEach(t),Rn=r(kn,", "),Pn=n(kn,"A",{href:!0});var t3e=s(Pn);b6=r(t3e,"AutoModel"),t3e.forEach(t),wi=r(kn,`, and
`),Bn=n(kn,"A",{href:!0});var a3e=s(Bn);v6=r(a3e,"AutoTokenizer"),a3e.forEach(t),Ai=r(kn," will directly create a class of the relevant architecture. For instance"),kn.forEach(t),$f=i(f),T(ya.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var S$=s(Ae);Qk=r(S$,"will create a model that is an instance of "),Li=n(S$,"A",{href:!0});var n3e=s(Li);Hk=r(n3e,"BertModel"),n3e.forEach(t),Uk=r(S$,"."),S$.forEach(t),Co=i(f),xa=n(f,"P",{});var R$=s(xa);Jk=r(R$,"There is one class of "),kf=n(R$,"CODE",{});var s3e=s(kf);Yk=r(s3e,"AutoModel"),s3e.forEach(t),bze=r(R$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),R$.forEach(t),tGe=i(f),yi=n(f,"H2",{class:!0});var P$=s(yi);Sf=n(P$,"A",{id:!0,class:!0,href:!0});var l3e=s(Sf);Hre=n(l3e,"SPAN",{});var i3e=s(Hre);T(F6.$$.fragment,i3e),i3e.forEach(t),l3e.forEach(t),vze=i(P$),Ure=n(P$,"SPAN",{});var d3e=s(Ure);Fze=r(d3e,"Extending the Auto Classes"),d3e.forEach(t),P$.forEach(t),aGe=i(f),In=n(f,"P",{});var wf=s(In);Tze=r(wf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Jre=n(wf,"CODE",{});var c3e=s(Jre);Mze=r(c3e,"NewModel"),c3e.forEach(t),Eze=r(wf,", make sure you have a "),Yre=n(wf,"CODE",{});var f3e=s(Yre);Cze=r(f3e,"NewModelConfig"),f3e.forEach(t),wze=r(wf,` then you can add those to the auto
classes like this:`),wf.forEach(t),nGe=i(f),T(T6.$$.fragment,f),sGe=i(f),Kk=n(f,"P",{});var m3e=s(Kk);Aze=r(m3e,"You will then be able to use the auto classes like you would usually do!"),m3e.forEach(t),lGe=i(f),T(Rf.$$.fragment,f),iGe=i(f),xi=n(f,"H2",{class:!0});var B$=s(xi);Pf=n(B$,"A",{id:!0,class:!0,href:!0});var g3e=s(Pf);Kre=n(g3e,"SPAN",{});var h3e=s(Kre);T(M6.$$.fragment,h3e),h3e.forEach(t),g3e.forEach(t),Lze=i(B$),Zre=n(B$,"SPAN",{});var p3e=s(Zre);yze=r(p3e,"AutoConfig"),p3e.forEach(t),B$.forEach(t),dGe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(E6.$$.fragment,rt),xze=i(rt),C6=n(rt,"P",{});var I$=s(C6);$ze=r(I$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Zk=n(I$,"A",{href:!0});var u3e=s(Zk);kze=r(u3e,"from_pretrained()"),u3e.forEach(t),Sze=r(I$," class method."),I$.forEach(t),Rze=i(rt),w6=n(rt,"P",{});var N$=s(w6);Pze=r(N$,"This class cannot be instantiated directly using "),ete=n(N$,"CODE",{});var _3e=s(ete);Bze=r(_3e,"__init__()"),_3e.forEach(t),Ize=r(N$," (throws an error)."),N$.forEach(t),Nze=i(rt),wr=n(rt,"DIV",{class:!0});var tt=s(wr);T(A6.$$.fragment,tt),qze=i(tt),ote=n(tt,"P",{});var b3e=s(ote);jze=r(b3e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),b3e.forEach(t),Dze=i(tt),$i=n(tt,"P",{});var Af=s($i);Gze=r(Af,"The configuration class to instantiate is selected based on the "),rte=n(Af,"CODE",{});var v3e=s(rte);Oze=r(v3e,"model_type"),v3e.forEach(t),Vze=r(Af,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),tte=n(Af,"CODE",{});var F3e=s(tte);Xze=r(F3e,"pretrained_model_name_or_path"),F3e.forEach(t),zze=r(Af,":"),Af.forEach(t),Wze=i(tt),A=n(tt,"UL",{});var L=s(A);Bf=n(L,"LI",{});var J3=s(Bf);ate=n(J3,"STRONG",{});var T3e=s(ate);Qze=r(T3e,"albert"),T3e.forEach(t),Hze=r(J3," \u2014 "),eS=n(J3,"A",{href:!0});var M3e=s(eS);Uze=r(M3e,"AlbertConfig"),M3e.forEach(t),Jze=r(J3," (ALBERT model)"),J3.forEach(t),Yze=i(L),If=n(L,"LI",{});var Y3=s(If);nte=n(Y3,"STRONG",{});var E3e=s(nte);Kze=r(E3e,"bart"),E3e.forEach(t),Zze=r(Y3," \u2014 "),oS=n(Y3,"A",{href:!0});var C3e=s(oS);eWe=r(C3e,"BartConfig"),C3e.forEach(t),oWe=r(Y3," (BART model)"),Y3.forEach(t),rWe=i(L),Nf=n(L,"LI",{});var K3=s(Nf);ste=n(K3,"STRONG",{});var w3e=s(ste);tWe=r(w3e,"beit"),w3e.forEach(t),aWe=r(K3," \u2014 "),rS=n(K3,"A",{href:!0});var A3e=s(rS);nWe=r(A3e,"BeitConfig"),A3e.forEach(t),sWe=r(K3," (BEiT model)"),K3.forEach(t),lWe=i(L),qf=n(L,"LI",{});var Z3=s(qf);lte=n(Z3,"STRONG",{});var L3e=s(lte);iWe=r(L3e,"bert"),L3e.forEach(t),dWe=r(Z3," \u2014 "),tS=n(Z3,"A",{href:!0});var y3e=s(tS);cWe=r(y3e,"BertConfig"),y3e.forEach(t),fWe=r(Z3," (BERT model)"),Z3.forEach(t),mWe=i(L),jf=n(L,"LI",{});var ew=s(jf);ite=n(ew,"STRONG",{});var x3e=s(ite);gWe=r(x3e,"bert-generation"),x3e.forEach(t),hWe=r(ew," \u2014 "),aS=n(ew,"A",{href:!0});var $3e=s(aS);pWe=r($3e,"BertGenerationConfig"),$3e.forEach(t),uWe=r(ew," (Bert Generation model)"),ew.forEach(t),_We=i(L),Df=n(L,"LI",{});var ow=s(Df);dte=n(ow,"STRONG",{});var k3e=s(dte);bWe=r(k3e,"big_bird"),k3e.forEach(t),vWe=r(ow," \u2014 "),nS=n(ow,"A",{href:!0});var S3e=s(nS);FWe=r(S3e,"BigBirdConfig"),S3e.forEach(t),TWe=r(ow," (BigBird model)"),ow.forEach(t),MWe=i(L),Gf=n(L,"LI",{});var rw=s(Gf);cte=n(rw,"STRONG",{});var R3e=s(cte);EWe=r(R3e,"bigbird_pegasus"),R3e.forEach(t),CWe=r(rw," \u2014 "),sS=n(rw,"A",{href:!0});var P3e=s(sS);wWe=r(P3e,"BigBirdPegasusConfig"),P3e.forEach(t),AWe=r(rw," (BigBird-Pegasus model)"),rw.forEach(t),LWe=i(L),Of=n(L,"LI",{});var tw=s(Of);fte=n(tw,"STRONG",{});var B3e=s(fte);yWe=r(B3e,"blenderbot"),B3e.forEach(t),xWe=r(tw," \u2014 "),lS=n(tw,"A",{href:!0});var I3e=s(lS);$We=r(I3e,"BlenderbotConfig"),I3e.forEach(t),kWe=r(tw," (Blenderbot model)"),tw.forEach(t),SWe=i(L),Vf=n(L,"LI",{});var aw=s(Vf);mte=n(aw,"STRONG",{});var N3e=s(mte);RWe=r(N3e,"blenderbot-small"),N3e.forEach(t),PWe=r(aw," \u2014 "),iS=n(aw,"A",{href:!0});var q3e=s(iS);BWe=r(q3e,"BlenderbotSmallConfig"),q3e.forEach(t),IWe=r(aw," (BlenderbotSmall model)"),aw.forEach(t),NWe=i(L),Xf=n(L,"LI",{});var nw=s(Xf);gte=n(nw,"STRONG",{});var j3e=s(gte);qWe=r(j3e,"bloom"),j3e.forEach(t),jWe=r(nw," \u2014 "),dS=n(nw,"A",{href:!0});var D3e=s(dS);DWe=r(D3e,"BloomConfig"),D3e.forEach(t),GWe=r(nw," (BLOOM model)"),nw.forEach(t),OWe=i(L),zf=n(L,"LI",{});var sw=s(zf);hte=n(sw,"STRONG",{});var G3e=s(hte);VWe=r(G3e,"camembert"),G3e.forEach(t),XWe=r(sw," \u2014 "),cS=n(sw,"A",{href:!0});var O3e=s(cS);zWe=r(O3e,"CamembertConfig"),O3e.forEach(t),WWe=r(sw," (CamemBERT model)"),sw.forEach(t),QWe=i(L),Wf=n(L,"LI",{});var lw=s(Wf);pte=n(lw,"STRONG",{});var V3e=s(pte);HWe=r(V3e,"canine"),V3e.forEach(t),UWe=r(lw," \u2014 "),fS=n(lw,"A",{href:!0});var X3e=s(fS);JWe=r(X3e,"CanineConfig"),X3e.forEach(t),YWe=r(lw," (CANINE model)"),lw.forEach(t),KWe=i(L),Qf=n(L,"LI",{});var iw=s(Qf);ute=n(iw,"STRONG",{});var z3e=s(ute);ZWe=r(z3e,"clip"),z3e.forEach(t),eQe=r(iw," \u2014 "),mS=n(iw,"A",{href:!0});var W3e=s(mS);oQe=r(W3e,"CLIPConfig"),W3e.forEach(t),rQe=r(iw," (CLIP model)"),iw.forEach(t),tQe=i(L),Hf=n(L,"LI",{});var dw=s(Hf);_te=n(dw,"STRONG",{});var Q3e=s(_te);aQe=r(Q3e,"convbert"),Q3e.forEach(t),nQe=r(dw," \u2014 "),gS=n(dw,"A",{href:!0});var H3e=s(gS);sQe=r(H3e,"ConvBertConfig"),H3e.forEach(t),lQe=r(dw," (ConvBERT model)"),dw.forEach(t),iQe=i(L),Uf=n(L,"LI",{});var cw=s(Uf);bte=n(cw,"STRONG",{});var U3e=s(bte);dQe=r(U3e,"convnext"),U3e.forEach(t),cQe=r(cw," \u2014 "),hS=n(cw,"A",{href:!0});var J3e=s(hS);fQe=r(J3e,"ConvNextConfig"),J3e.forEach(t),mQe=r(cw," (ConvNeXT model)"),cw.forEach(t),gQe=i(L),Jf=n(L,"LI",{});var fw=s(Jf);vte=n(fw,"STRONG",{});var Y3e=s(vte);hQe=r(Y3e,"ctrl"),Y3e.forEach(t),pQe=r(fw," \u2014 "),pS=n(fw,"A",{href:!0});var K3e=s(pS);uQe=r(K3e,"CTRLConfig"),K3e.forEach(t),_Qe=r(fw," (CTRL model)"),fw.forEach(t),bQe=i(L),Yf=n(L,"LI",{});var mw=s(Yf);Fte=n(mw,"STRONG",{});var Z3e=s(Fte);vQe=r(Z3e,"cvt"),Z3e.forEach(t),FQe=r(mw," \u2014 "),uS=n(mw,"A",{href:!0});var ewe=s(uS);TQe=r(ewe,"CvtConfig"),ewe.forEach(t),MQe=r(mw," (CvT model)"),mw.forEach(t),EQe=i(L),Kf=n(L,"LI",{});var gw=s(Kf);Tte=n(gw,"STRONG",{});var owe=s(Tte);CQe=r(owe,"data2vec-audio"),owe.forEach(t),wQe=r(gw," \u2014 "),_S=n(gw,"A",{href:!0});var rwe=s(_S);AQe=r(rwe,"Data2VecAudioConfig"),rwe.forEach(t),LQe=r(gw," (Data2VecAudio model)"),gw.forEach(t),yQe=i(L),Zf=n(L,"LI",{});var hw=s(Zf);Mte=n(hw,"STRONG",{});var twe=s(Mte);xQe=r(twe,"data2vec-text"),twe.forEach(t),$Qe=r(hw," \u2014 "),bS=n(hw,"A",{href:!0});var awe=s(bS);kQe=r(awe,"Data2VecTextConfig"),awe.forEach(t),SQe=r(hw," (Data2VecText model)"),hw.forEach(t),RQe=i(L),em=n(L,"LI",{});var pw=s(em);Ete=n(pw,"STRONG",{});var nwe=s(Ete);PQe=r(nwe,"data2vec-vision"),nwe.forEach(t),BQe=r(pw," \u2014 "),vS=n(pw,"A",{href:!0});var swe=s(vS);IQe=r(swe,"Data2VecVisionConfig"),swe.forEach(t),NQe=r(pw," (Data2VecVision model)"),pw.forEach(t),qQe=i(L),om=n(L,"LI",{});var uw=s(om);Cte=n(uw,"STRONG",{});var lwe=s(Cte);jQe=r(lwe,"deberta"),lwe.forEach(t),DQe=r(uw," \u2014 "),FS=n(uw,"A",{href:!0});var iwe=s(FS);GQe=r(iwe,"DebertaConfig"),iwe.forEach(t),OQe=r(uw," (DeBERTa model)"),uw.forEach(t),VQe=i(L),rm=n(L,"LI",{});var _w=s(rm);wte=n(_w,"STRONG",{});var dwe=s(wte);XQe=r(dwe,"deberta-v2"),dwe.forEach(t),zQe=r(_w," \u2014 "),TS=n(_w,"A",{href:!0});var cwe=s(TS);WQe=r(cwe,"DebertaV2Config"),cwe.forEach(t),QQe=r(_w," (DeBERTa-v2 model)"),_w.forEach(t),HQe=i(L),tm=n(L,"LI",{});var bw=s(tm);Ate=n(bw,"STRONG",{});var fwe=s(Ate);UQe=r(fwe,"decision_transformer"),fwe.forEach(t),JQe=r(bw," \u2014 "),MS=n(bw,"A",{href:!0});var mwe=s(MS);YQe=r(mwe,"DecisionTransformerConfig"),mwe.forEach(t),KQe=r(bw," (Decision Transformer model)"),bw.forEach(t),ZQe=i(L),am=n(L,"LI",{});var vw=s(am);Lte=n(vw,"STRONG",{});var AJr=s(Lte);eHe=r(AJr,"deit"),AJr.forEach(t),oHe=r(vw," \u2014 "),ES=n(vw,"A",{href:!0});var LJr=s(ES);rHe=r(LJr,"DeiTConfig"),LJr.forEach(t),tHe=r(vw," (DeiT model)"),vw.forEach(t),aHe=i(L),nm=n(L,"LI",{});var gwe=s(nm);yte=n(gwe,"STRONG",{});var yJr=s(yte);nHe=r(yJr,"detr"),yJr.forEach(t),sHe=r(gwe," \u2014 "),CS=n(gwe,"A",{href:!0});var xJr=s(CS);lHe=r(xJr,"DetrConfig"),xJr.forEach(t),iHe=r(gwe," (DETR model)"),gwe.forEach(t),dHe=i(L),sm=n(L,"LI",{});var hwe=s(sm);xte=n(hwe,"STRONG",{});var $Jr=s(xte);cHe=r($Jr,"distilbert"),$Jr.forEach(t),fHe=r(hwe," \u2014 "),wS=n(hwe,"A",{href:!0});var kJr=s(wS);mHe=r(kJr,"DistilBertConfig"),kJr.forEach(t),gHe=r(hwe," (DistilBERT model)"),hwe.forEach(t),hHe=i(L),lm=n(L,"LI",{});var pwe=s(lm);$te=n(pwe,"STRONG",{});var SJr=s($te);pHe=r(SJr,"dpr"),SJr.forEach(t),uHe=r(pwe," \u2014 "),AS=n(pwe,"A",{href:!0});var RJr=s(AS);_He=r(RJr,"DPRConfig"),RJr.forEach(t),bHe=r(pwe," (DPR model)"),pwe.forEach(t),vHe=i(L),im=n(L,"LI",{});var uwe=s(im);kte=n(uwe,"STRONG",{});var PJr=s(kte);FHe=r(PJr,"dpt"),PJr.forEach(t),THe=r(uwe," \u2014 "),LS=n(uwe,"A",{href:!0});var BJr=s(LS);MHe=r(BJr,"DPTConfig"),BJr.forEach(t),EHe=r(uwe," (DPT model)"),uwe.forEach(t),CHe=i(L),dm=n(L,"LI",{});var _we=s(dm);Ste=n(_we,"STRONG",{});var IJr=s(Ste);wHe=r(IJr,"electra"),IJr.forEach(t),AHe=r(_we," \u2014 "),yS=n(_we,"A",{href:!0});var NJr=s(yS);LHe=r(NJr,"ElectraConfig"),NJr.forEach(t),yHe=r(_we," (ELECTRA model)"),_we.forEach(t),xHe=i(L),cm=n(L,"LI",{});var bwe=s(cm);Rte=n(bwe,"STRONG",{});var qJr=s(Rte);$He=r(qJr,"encoder-decoder"),qJr.forEach(t),kHe=r(bwe," \u2014 "),xS=n(bwe,"A",{href:!0});var jJr=s(xS);SHe=r(jJr,"EncoderDecoderConfig"),jJr.forEach(t),RHe=r(bwe," (Encoder decoder model)"),bwe.forEach(t),PHe=i(L),fm=n(L,"LI",{});var vwe=s(fm);Pte=n(vwe,"STRONG",{});var DJr=s(Pte);BHe=r(DJr,"flaubert"),DJr.forEach(t),IHe=r(vwe," \u2014 "),$S=n(vwe,"A",{href:!0});var GJr=s($S);NHe=r(GJr,"FlaubertConfig"),GJr.forEach(t),qHe=r(vwe," (FlauBERT model)"),vwe.forEach(t),jHe=i(L),mm=n(L,"LI",{});var Fwe=s(mm);Bte=n(Fwe,"STRONG",{});var OJr=s(Bte);DHe=r(OJr,"flava"),OJr.forEach(t),GHe=r(Fwe," \u2014 "),kS=n(Fwe,"A",{href:!0});var VJr=s(kS);OHe=r(VJr,"FlavaConfig"),VJr.forEach(t),VHe=r(Fwe," (FLAVA model)"),Fwe.forEach(t),XHe=i(L),gm=n(L,"LI",{});var Twe=s(gm);Ite=n(Twe,"STRONG",{});var XJr=s(Ite);zHe=r(XJr,"fnet"),XJr.forEach(t),WHe=r(Twe," \u2014 "),SS=n(Twe,"A",{href:!0});var zJr=s(SS);QHe=r(zJr,"FNetConfig"),zJr.forEach(t),HHe=r(Twe," (FNet model)"),Twe.forEach(t),UHe=i(L),hm=n(L,"LI",{});var Mwe=s(hm);Nte=n(Mwe,"STRONG",{});var WJr=s(Nte);JHe=r(WJr,"fsmt"),WJr.forEach(t),YHe=r(Mwe," \u2014 "),RS=n(Mwe,"A",{href:!0});var QJr=s(RS);KHe=r(QJr,"FSMTConfig"),QJr.forEach(t),ZHe=r(Mwe," (FairSeq Machine-Translation model)"),Mwe.forEach(t),eUe=i(L),pm=n(L,"LI",{});var Ewe=s(pm);qte=n(Ewe,"STRONG",{});var HJr=s(qte);oUe=r(HJr,"funnel"),HJr.forEach(t),rUe=r(Ewe," \u2014 "),PS=n(Ewe,"A",{href:!0});var UJr=s(PS);tUe=r(UJr,"FunnelConfig"),UJr.forEach(t),aUe=r(Ewe," (Funnel Transformer model)"),Ewe.forEach(t),nUe=i(L),um=n(L,"LI",{});var Cwe=s(um);jte=n(Cwe,"STRONG",{});var JJr=s(jte);sUe=r(JJr,"glpn"),JJr.forEach(t),lUe=r(Cwe," \u2014 "),BS=n(Cwe,"A",{href:!0});var YJr=s(BS);iUe=r(YJr,"GLPNConfig"),YJr.forEach(t),dUe=r(Cwe," (GLPN model)"),Cwe.forEach(t),cUe=i(L),_m=n(L,"LI",{});var wwe=s(_m);Dte=n(wwe,"STRONG",{});var KJr=s(Dte);fUe=r(KJr,"gpt2"),KJr.forEach(t),mUe=r(wwe," \u2014 "),IS=n(wwe,"A",{href:!0});var ZJr=s(IS);gUe=r(ZJr,"GPT2Config"),ZJr.forEach(t),hUe=r(wwe," (OpenAI GPT-2 model)"),wwe.forEach(t),pUe=i(L),bm=n(L,"LI",{});var Awe=s(bm);Gte=n(Awe,"STRONG",{});var eYr=s(Gte);uUe=r(eYr,"gpt_neo"),eYr.forEach(t),_Ue=r(Awe," \u2014 "),NS=n(Awe,"A",{href:!0});var oYr=s(NS);bUe=r(oYr,"GPTNeoConfig"),oYr.forEach(t),vUe=r(Awe," (GPT Neo model)"),Awe.forEach(t),FUe=i(L),vm=n(L,"LI",{});var Lwe=s(vm);Ote=n(Lwe,"STRONG",{});var rYr=s(Ote);TUe=r(rYr,"gpt_neox"),rYr.forEach(t),MUe=r(Lwe," \u2014 "),qS=n(Lwe,"A",{href:!0});var tYr=s(qS);EUe=r(tYr,"GPTNeoXConfig"),tYr.forEach(t),CUe=r(Lwe," (GPT NeoX model)"),Lwe.forEach(t),wUe=i(L),Fm=n(L,"LI",{});var ywe=s(Fm);Vte=n(ywe,"STRONG",{});var aYr=s(Vte);AUe=r(aYr,"gptj"),aYr.forEach(t),LUe=r(ywe," \u2014 "),jS=n(ywe,"A",{href:!0});var nYr=s(jS);yUe=r(nYr,"GPTJConfig"),nYr.forEach(t),xUe=r(ywe," (GPT-J model)"),ywe.forEach(t),$Ue=i(L),Tm=n(L,"LI",{});var xwe=s(Tm);Xte=n(xwe,"STRONG",{});var sYr=s(Xte);kUe=r(sYr,"hubert"),sYr.forEach(t),SUe=r(xwe," \u2014 "),DS=n(xwe,"A",{href:!0});var lYr=s(DS);RUe=r(lYr,"HubertConfig"),lYr.forEach(t),PUe=r(xwe," (Hubert model)"),xwe.forEach(t),BUe=i(L),Mm=n(L,"LI",{});var $we=s(Mm);zte=n($we,"STRONG",{});var iYr=s(zte);IUe=r(iYr,"ibert"),iYr.forEach(t),NUe=r($we," \u2014 "),GS=n($we,"A",{href:!0});var dYr=s(GS);qUe=r(dYr,"IBertConfig"),dYr.forEach(t),jUe=r($we," (I-BERT model)"),$we.forEach(t),DUe=i(L),Em=n(L,"LI",{});var kwe=s(Em);Wte=n(kwe,"STRONG",{});var cYr=s(Wte);GUe=r(cYr,"imagegpt"),cYr.forEach(t),OUe=r(kwe," \u2014 "),OS=n(kwe,"A",{href:!0});var fYr=s(OS);VUe=r(fYr,"ImageGPTConfig"),fYr.forEach(t),XUe=r(kwe," (ImageGPT model)"),kwe.forEach(t),zUe=i(L),Cm=n(L,"LI",{});var Swe=s(Cm);Qte=n(Swe,"STRONG",{});var mYr=s(Qte);WUe=r(mYr,"layoutlm"),mYr.forEach(t),QUe=r(Swe," \u2014 "),VS=n(Swe,"A",{href:!0});var gYr=s(VS);HUe=r(gYr,"LayoutLMConfig"),gYr.forEach(t),UUe=r(Swe," (LayoutLM model)"),Swe.forEach(t),JUe=i(L),wm=n(L,"LI",{});var Rwe=s(wm);Hte=n(Rwe,"STRONG",{});var hYr=s(Hte);YUe=r(hYr,"layoutlmv2"),hYr.forEach(t),KUe=r(Rwe," \u2014 "),XS=n(Rwe,"A",{href:!0});var pYr=s(XS);ZUe=r(pYr,"LayoutLMv2Config"),pYr.forEach(t),eJe=r(Rwe," (LayoutLMv2 model)"),Rwe.forEach(t),oJe=i(L),Am=n(L,"LI",{});var Pwe=s(Am);Ute=n(Pwe,"STRONG",{});var uYr=s(Ute);rJe=r(uYr,"layoutlmv3"),uYr.forEach(t),tJe=r(Pwe," \u2014 "),zS=n(Pwe,"A",{href:!0});var _Yr=s(zS);aJe=r(_Yr,"LayoutLMv3Config"),_Yr.forEach(t),nJe=r(Pwe," (LayoutLMv3 model)"),Pwe.forEach(t),sJe=i(L),Lm=n(L,"LI",{});var Bwe=s(Lm);Jte=n(Bwe,"STRONG",{});var bYr=s(Jte);lJe=r(bYr,"led"),bYr.forEach(t),iJe=r(Bwe," \u2014 "),WS=n(Bwe,"A",{href:!0});var vYr=s(WS);dJe=r(vYr,"LEDConfig"),vYr.forEach(t),cJe=r(Bwe," (LED model)"),Bwe.forEach(t),fJe=i(L),ym=n(L,"LI",{});var Iwe=s(ym);Yte=n(Iwe,"STRONG",{});var FYr=s(Yte);mJe=r(FYr,"levit"),FYr.forEach(t),gJe=r(Iwe," \u2014 "),QS=n(Iwe,"A",{href:!0});var TYr=s(QS);hJe=r(TYr,"LevitConfig"),TYr.forEach(t),pJe=r(Iwe," (LeViT model)"),Iwe.forEach(t),uJe=i(L),xm=n(L,"LI",{});var Nwe=s(xm);Kte=n(Nwe,"STRONG",{});var MYr=s(Kte);_Je=r(MYr,"longformer"),MYr.forEach(t),bJe=r(Nwe," \u2014 "),HS=n(Nwe,"A",{href:!0});var EYr=s(HS);vJe=r(EYr,"LongformerConfig"),EYr.forEach(t),FJe=r(Nwe," (Longformer model)"),Nwe.forEach(t),TJe=i(L),$m=n(L,"LI",{});var qwe=s($m);Zte=n(qwe,"STRONG",{});var CYr=s(Zte);MJe=r(CYr,"longt5"),CYr.forEach(t),EJe=r(qwe," \u2014 "),US=n(qwe,"A",{href:!0});var wYr=s(US);CJe=r(wYr,"LongT5Config"),wYr.forEach(t),wJe=r(qwe," (LongT5 model)"),qwe.forEach(t),AJe=i(L),km=n(L,"LI",{});var jwe=s(km);eae=n(jwe,"STRONG",{});var AYr=s(eae);LJe=r(AYr,"luke"),AYr.forEach(t),yJe=r(jwe," \u2014 "),JS=n(jwe,"A",{href:!0});var LYr=s(JS);xJe=r(LYr,"LukeConfig"),LYr.forEach(t),$Je=r(jwe," (LUKE model)"),jwe.forEach(t),kJe=i(L),Sm=n(L,"LI",{});var Dwe=s(Sm);oae=n(Dwe,"STRONG",{});var yYr=s(oae);SJe=r(yYr,"lxmert"),yYr.forEach(t),RJe=r(Dwe," \u2014 "),YS=n(Dwe,"A",{href:!0});var xYr=s(YS);PJe=r(xYr,"LxmertConfig"),xYr.forEach(t),BJe=r(Dwe," (LXMERT model)"),Dwe.forEach(t),IJe=i(L),Rm=n(L,"LI",{});var Gwe=s(Rm);rae=n(Gwe,"STRONG",{});var $Yr=s(rae);NJe=r($Yr,"m2m_100"),$Yr.forEach(t),qJe=r(Gwe," \u2014 "),KS=n(Gwe,"A",{href:!0});var kYr=s(KS);jJe=r(kYr,"M2M100Config"),kYr.forEach(t),DJe=r(Gwe," (M2M100 model)"),Gwe.forEach(t),GJe=i(L),Pm=n(L,"LI",{});var Owe=s(Pm);tae=n(Owe,"STRONG",{});var SYr=s(tae);OJe=r(SYr,"marian"),SYr.forEach(t),VJe=r(Owe," \u2014 "),ZS=n(Owe,"A",{href:!0});var RYr=s(ZS);XJe=r(RYr,"MarianConfig"),RYr.forEach(t),zJe=r(Owe," (Marian model)"),Owe.forEach(t),WJe=i(L),Bm=n(L,"LI",{});var Vwe=s(Bm);aae=n(Vwe,"STRONG",{});var PYr=s(aae);QJe=r(PYr,"maskformer"),PYr.forEach(t),HJe=r(Vwe," \u2014 "),eR=n(Vwe,"A",{href:!0});var BYr=s(eR);UJe=r(BYr,"MaskFormerConfig"),BYr.forEach(t),JJe=r(Vwe," (MaskFormer model)"),Vwe.forEach(t),YJe=i(L),Im=n(L,"LI",{});var Xwe=s(Im);nae=n(Xwe,"STRONG",{});var IYr=s(nae);KJe=r(IYr,"mbart"),IYr.forEach(t),ZJe=r(Xwe," \u2014 "),oR=n(Xwe,"A",{href:!0});var NYr=s(oR);eYe=r(NYr,"MBartConfig"),NYr.forEach(t),oYe=r(Xwe," (mBART model)"),Xwe.forEach(t),rYe=i(L),Nm=n(L,"LI",{});var zwe=s(Nm);sae=n(zwe,"STRONG",{});var qYr=s(sae);tYe=r(qYr,"mctct"),qYr.forEach(t),aYe=r(zwe," \u2014 "),rR=n(zwe,"A",{href:!0});var jYr=s(rR);nYe=r(jYr,"MCTCTConfig"),jYr.forEach(t),sYe=r(zwe," (M-CTC-T model)"),zwe.forEach(t),lYe=i(L),qm=n(L,"LI",{});var Wwe=s(qm);lae=n(Wwe,"STRONG",{});var DYr=s(lae);iYe=r(DYr,"megatron-bert"),DYr.forEach(t),dYe=r(Wwe," \u2014 "),tR=n(Wwe,"A",{href:!0});var GYr=s(tR);cYe=r(GYr,"MegatronBertConfig"),GYr.forEach(t),fYe=r(Wwe," (Megatron-BERT model)"),Wwe.forEach(t),mYe=i(L),jm=n(L,"LI",{});var Qwe=s(jm);iae=n(Qwe,"STRONG",{});var OYr=s(iae);gYe=r(OYr,"mobilebert"),OYr.forEach(t),hYe=r(Qwe," \u2014 "),aR=n(Qwe,"A",{href:!0});var VYr=s(aR);pYe=r(VYr,"MobileBertConfig"),VYr.forEach(t),uYe=r(Qwe," (MobileBERT model)"),Qwe.forEach(t),_Ye=i(L),Dm=n(L,"LI",{});var Hwe=s(Dm);dae=n(Hwe,"STRONG",{});var XYr=s(dae);bYe=r(XYr,"mpnet"),XYr.forEach(t),vYe=r(Hwe," \u2014 "),nR=n(Hwe,"A",{href:!0});var zYr=s(nR);FYe=r(zYr,"MPNetConfig"),zYr.forEach(t),TYe=r(Hwe," (MPNet model)"),Hwe.forEach(t),MYe=i(L),Gm=n(L,"LI",{});var Uwe=s(Gm);cae=n(Uwe,"STRONG",{});var WYr=s(cae);EYe=r(WYr,"mt5"),WYr.forEach(t),CYe=r(Uwe," \u2014 "),sR=n(Uwe,"A",{href:!0});var QYr=s(sR);wYe=r(QYr,"MT5Config"),QYr.forEach(t),AYe=r(Uwe," (MT5 model)"),Uwe.forEach(t),LYe=i(L),Om=n(L,"LI",{});var Jwe=s(Om);fae=n(Jwe,"STRONG",{});var HYr=s(fae);yYe=r(HYr,"nystromformer"),HYr.forEach(t),xYe=r(Jwe," \u2014 "),lR=n(Jwe,"A",{href:!0});var UYr=s(lR);$Ye=r(UYr,"NystromformerConfig"),UYr.forEach(t),kYe=r(Jwe," (Nystr\xF6mformer model)"),Jwe.forEach(t),SYe=i(L),Vm=n(L,"LI",{});var Ywe=s(Vm);mae=n(Ywe,"STRONG",{});var JYr=s(mae);RYe=r(JYr,"ofa"),JYr.forEach(t),PYe=r(Ywe," \u2014 "),iR=n(Ywe,"A",{href:!0});var YYr=s(iR);BYe=r(YYr,"OFAConfig"),YYr.forEach(t),IYe=r(Ywe," (OFA model)"),Ywe.forEach(t),NYe=i(L),Xm=n(L,"LI",{});var Kwe=s(Xm);gae=n(Kwe,"STRONG",{});var KYr=s(gae);qYe=r(KYr,"openai-gpt"),KYr.forEach(t),jYe=r(Kwe," \u2014 "),dR=n(Kwe,"A",{href:!0});var ZYr=s(dR);DYe=r(ZYr,"OpenAIGPTConfig"),ZYr.forEach(t),GYe=r(Kwe," (OpenAI GPT model)"),Kwe.forEach(t),OYe=i(L),zm=n(L,"LI",{});var Zwe=s(zm);hae=n(Zwe,"STRONG",{});var eKr=s(hae);VYe=r(eKr,"opt"),eKr.forEach(t),XYe=r(Zwe," \u2014 "),cR=n(Zwe,"A",{href:!0});var oKr=s(cR);zYe=r(oKr,"OPTConfig"),oKr.forEach(t),WYe=r(Zwe," (OPT model)"),Zwe.forEach(t),QYe=i(L),Wm=n(L,"LI",{});var eAe=s(Wm);pae=n(eAe,"STRONG",{});var rKr=s(pae);HYe=r(rKr,"pegasus"),rKr.forEach(t),UYe=r(eAe," \u2014 "),fR=n(eAe,"A",{href:!0});var tKr=s(fR);JYe=r(tKr,"PegasusConfig"),tKr.forEach(t),YYe=r(eAe," (Pegasus model)"),eAe.forEach(t),KYe=i(L),Qm=n(L,"LI",{});var oAe=s(Qm);uae=n(oAe,"STRONG",{});var aKr=s(uae);ZYe=r(aKr,"perceiver"),aKr.forEach(t),eKe=r(oAe," \u2014 "),mR=n(oAe,"A",{href:!0});var nKr=s(mR);oKe=r(nKr,"PerceiverConfig"),nKr.forEach(t),rKe=r(oAe," (Perceiver model)"),oAe.forEach(t),tKe=i(L),Hm=n(L,"LI",{});var rAe=s(Hm);_ae=n(rAe,"STRONG",{});var sKr=s(_ae);aKe=r(sKr,"plbart"),sKr.forEach(t),nKe=r(rAe," \u2014 "),gR=n(rAe,"A",{href:!0});var lKr=s(gR);sKe=r(lKr,"PLBartConfig"),lKr.forEach(t),lKe=r(rAe," (PLBart model)"),rAe.forEach(t),iKe=i(L),Um=n(L,"LI",{});var tAe=s(Um);bae=n(tAe,"STRONG",{});var iKr=s(bae);dKe=r(iKr,"poolformer"),iKr.forEach(t),cKe=r(tAe," \u2014 "),hR=n(tAe,"A",{href:!0});var dKr=s(hR);fKe=r(dKr,"PoolFormerConfig"),dKr.forEach(t),mKe=r(tAe," (PoolFormer model)"),tAe.forEach(t),gKe=i(L),Jm=n(L,"LI",{});var aAe=s(Jm);vae=n(aAe,"STRONG",{});var cKr=s(vae);hKe=r(cKr,"prophetnet"),cKr.forEach(t),pKe=r(aAe," \u2014 "),pR=n(aAe,"A",{href:!0});var fKr=s(pR);uKe=r(fKr,"ProphetNetConfig"),fKr.forEach(t),_Ke=r(aAe," (ProphetNet model)"),aAe.forEach(t),bKe=i(L),Ym=n(L,"LI",{});var nAe=s(Ym);Fae=n(nAe,"STRONG",{});var mKr=s(Fae);vKe=r(mKr,"qdqbert"),mKr.forEach(t),FKe=r(nAe," \u2014 "),uR=n(nAe,"A",{href:!0});var gKr=s(uR);TKe=r(gKr,"QDQBertConfig"),gKr.forEach(t),MKe=r(nAe," (QDQBert model)"),nAe.forEach(t),EKe=i(L),Km=n(L,"LI",{});var sAe=s(Km);Tae=n(sAe,"STRONG",{});var hKr=s(Tae);CKe=r(hKr,"rag"),hKr.forEach(t),wKe=r(sAe," \u2014 "),_R=n(sAe,"A",{href:!0});var pKr=s(_R);AKe=r(pKr,"RagConfig"),pKr.forEach(t),LKe=r(sAe," (RAG model)"),sAe.forEach(t),yKe=i(L),Zm=n(L,"LI",{});var lAe=s(Zm);Mae=n(lAe,"STRONG",{});var uKr=s(Mae);xKe=r(uKr,"realm"),uKr.forEach(t),$Ke=r(lAe," \u2014 "),bR=n(lAe,"A",{href:!0});var _Kr=s(bR);kKe=r(_Kr,"RealmConfig"),_Kr.forEach(t),SKe=r(lAe," (REALM model)"),lAe.forEach(t),RKe=i(L),eg=n(L,"LI",{});var iAe=s(eg);Eae=n(iAe,"STRONG",{});var bKr=s(Eae);PKe=r(bKr,"reformer"),bKr.forEach(t),BKe=r(iAe," \u2014 "),vR=n(iAe,"A",{href:!0});var vKr=s(vR);IKe=r(vKr,"ReformerConfig"),vKr.forEach(t),NKe=r(iAe," (Reformer model)"),iAe.forEach(t),qKe=i(L),og=n(L,"LI",{});var dAe=s(og);Cae=n(dAe,"STRONG",{});var FKr=s(Cae);jKe=r(FKr,"regnet"),FKr.forEach(t),DKe=r(dAe," \u2014 "),FR=n(dAe,"A",{href:!0});var TKr=s(FR);GKe=r(TKr,"RegNetConfig"),TKr.forEach(t),OKe=r(dAe," (RegNet model)"),dAe.forEach(t),VKe=i(L),rg=n(L,"LI",{});var cAe=s(rg);wae=n(cAe,"STRONG",{});var MKr=s(wae);XKe=r(MKr,"rembert"),MKr.forEach(t),zKe=r(cAe," \u2014 "),TR=n(cAe,"A",{href:!0});var EKr=s(TR);WKe=r(EKr,"RemBertConfig"),EKr.forEach(t),QKe=r(cAe," (RemBERT model)"),cAe.forEach(t),HKe=i(L),tg=n(L,"LI",{});var fAe=s(tg);Aae=n(fAe,"STRONG",{});var CKr=s(Aae);UKe=r(CKr,"resnet"),CKr.forEach(t),JKe=r(fAe," \u2014 "),MR=n(fAe,"A",{href:!0});var wKr=s(MR);YKe=r(wKr,"ResNetConfig"),wKr.forEach(t),KKe=r(fAe," (ResNet model)"),fAe.forEach(t),ZKe=i(L),ag=n(L,"LI",{});var mAe=s(ag);Lae=n(mAe,"STRONG",{});var AKr=s(Lae);eZe=r(AKr,"retribert"),AKr.forEach(t),oZe=r(mAe," \u2014 "),ER=n(mAe,"A",{href:!0});var LKr=s(ER);rZe=r(LKr,"RetriBertConfig"),LKr.forEach(t),tZe=r(mAe," (RetriBERT model)"),mAe.forEach(t),aZe=i(L),ng=n(L,"LI",{});var gAe=s(ng);yae=n(gAe,"STRONG",{});var yKr=s(yae);nZe=r(yKr,"roberta"),yKr.forEach(t),sZe=r(gAe," \u2014 "),CR=n(gAe,"A",{href:!0});var xKr=s(CR);lZe=r(xKr,"RobertaConfig"),xKr.forEach(t),iZe=r(gAe," (RoBERTa model)"),gAe.forEach(t),dZe=i(L),sg=n(L,"LI",{});var hAe=s(sg);xae=n(hAe,"STRONG",{});var $Kr=s(xae);cZe=r($Kr,"roformer"),$Kr.forEach(t),fZe=r(hAe," \u2014 "),wR=n(hAe,"A",{href:!0});var kKr=s(wR);mZe=r(kKr,"RoFormerConfig"),kKr.forEach(t),gZe=r(hAe," (RoFormer model)"),hAe.forEach(t),hZe=i(L),lg=n(L,"LI",{});var pAe=s(lg);$ae=n(pAe,"STRONG",{});var SKr=s($ae);pZe=r(SKr,"segformer"),SKr.forEach(t),uZe=r(pAe," \u2014 "),AR=n(pAe,"A",{href:!0});var RKr=s(AR);_Ze=r(RKr,"SegformerConfig"),RKr.forEach(t),bZe=r(pAe," (SegFormer model)"),pAe.forEach(t),vZe=i(L),ig=n(L,"LI",{});var uAe=s(ig);kae=n(uAe,"STRONG",{});var PKr=s(kae);FZe=r(PKr,"sew"),PKr.forEach(t),TZe=r(uAe," \u2014 "),LR=n(uAe,"A",{href:!0});var BKr=s(LR);MZe=r(BKr,"SEWConfig"),BKr.forEach(t),EZe=r(uAe," (SEW model)"),uAe.forEach(t),CZe=i(L),dg=n(L,"LI",{});var _Ae=s(dg);Sae=n(_Ae,"STRONG",{});var IKr=s(Sae);wZe=r(IKr,"sew-d"),IKr.forEach(t),AZe=r(_Ae," \u2014 "),yR=n(_Ae,"A",{href:!0});var NKr=s(yR);LZe=r(NKr,"SEWDConfig"),NKr.forEach(t),yZe=r(_Ae," (SEW-D model)"),_Ae.forEach(t),xZe=i(L),cg=n(L,"LI",{});var bAe=s(cg);Rae=n(bAe,"STRONG",{});var qKr=s(Rae);$Ze=r(qKr,"speech-encoder-decoder"),qKr.forEach(t),kZe=r(bAe," \u2014 "),xR=n(bAe,"A",{href:!0});var jKr=s(xR);SZe=r(jKr,"SpeechEncoderDecoderConfig"),jKr.forEach(t),RZe=r(bAe," (Speech Encoder decoder model)"),bAe.forEach(t),PZe=i(L),fg=n(L,"LI",{});var vAe=s(fg);Pae=n(vAe,"STRONG",{});var DKr=s(Pae);BZe=r(DKr,"speech_to_text"),DKr.forEach(t),IZe=r(vAe," \u2014 "),$R=n(vAe,"A",{href:!0});var GKr=s($R);NZe=r(GKr,"Speech2TextConfig"),GKr.forEach(t),qZe=r(vAe," (Speech2Text model)"),vAe.forEach(t),jZe=i(L),mg=n(L,"LI",{});var FAe=s(mg);Bae=n(FAe,"STRONG",{});var OKr=s(Bae);DZe=r(OKr,"speech_to_text_2"),OKr.forEach(t),GZe=r(FAe," \u2014 "),kR=n(FAe,"A",{href:!0});var VKr=s(kR);OZe=r(VKr,"Speech2Text2Config"),VKr.forEach(t),VZe=r(FAe," (Speech2Text2 model)"),FAe.forEach(t),XZe=i(L),gg=n(L,"LI",{});var TAe=s(gg);Iae=n(TAe,"STRONG",{});var XKr=s(Iae);zZe=r(XKr,"splinter"),XKr.forEach(t),WZe=r(TAe," \u2014 "),SR=n(TAe,"A",{href:!0});var zKr=s(SR);QZe=r(zKr,"SplinterConfig"),zKr.forEach(t),HZe=r(TAe," (Splinter model)"),TAe.forEach(t),UZe=i(L),hg=n(L,"LI",{});var MAe=s(hg);Nae=n(MAe,"STRONG",{});var WKr=s(Nae);JZe=r(WKr,"squeezebert"),WKr.forEach(t),YZe=r(MAe," \u2014 "),RR=n(MAe,"A",{href:!0});var QKr=s(RR);KZe=r(QKr,"SqueezeBertConfig"),QKr.forEach(t),ZZe=r(MAe," (SqueezeBERT model)"),MAe.forEach(t),eeo=i(L),pg=n(L,"LI",{});var EAe=s(pg);qae=n(EAe,"STRONG",{});var HKr=s(qae);oeo=r(HKr,"swin"),HKr.forEach(t),reo=r(EAe," \u2014 "),PR=n(EAe,"A",{href:!0});var UKr=s(PR);teo=r(UKr,"SwinConfig"),UKr.forEach(t),aeo=r(EAe," (Swin Transformer model)"),EAe.forEach(t),neo=i(L),ug=n(L,"LI",{});var CAe=s(ug);jae=n(CAe,"STRONG",{});var JKr=s(jae);seo=r(JKr,"t5"),JKr.forEach(t),leo=r(CAe," \u2014 "),BR=n(CAe,"A",{href:!0});var YKr=s(BR);ieo=r(YKr,"T5Config"),YKr.forEach(t),deo=r(CAe," (T5 model)"),CAe.forEach(t),ceo=i(L),_g=n(L,"LI",{});var wAe=s(_g);Dae=n(wAe,"STRONG",{});var KKr=s(Dae);feo=r(KKr,"tapas"),KKr.forEach(t),meo=r(wAe," \u2014 "),IR=n(wAe,"A",{href:!0});var ZKr=s(IR);geo=r(ZKr,"TapasConfig"),ZKr.forEach(t),heo=r(wAe," (TAPAS model)"),wAe.forEach(t),peo=i(L),bg=n(L,"LI",{});var AAe=s(bg);Gae=n(AAe,"STRONG",{});var eZr=s(Gae);ueo=r(eZr,"trajectory_transformer"),eZr.forEach(t),_eo=r(AAe," \u2014 "),NR=n(AAe,"A",{href:!0});var oZr=s(NR);beo=r(oZr,"TrajectoryTransformerConfig"),oZr.forEach(t),veo=r(AAe," (Trajectory Transformer model)"),AAe.forEach(t),Feo=i(L),vg=n(L,"LI",{});var LAe=s(vg);Oae=n(LAe,"STRONG",{});var rZr=s(Oae);Teo=r(rZr,"transfo-xl"),rZr.forEach(t),Meo=r(LAe," \u2014 "),qR=n(LAe,"A",{href:!0});var tZr=s(qR);Eeo=r(tZr,"TransfoXLConfig"),tZr.forEach(t),Ceo=r(LAe," (Transformer-XL model)"),LAe.forEach(t),weo=i(L),Fg=n(L,"LI",{});var yAe=s(Fg);Vae=n(yAe,"STRONG",{});var aZr=s(Vae);Aeo=r(aZr,"trocr"),aZr.forEach(t),Leo=r(yAe," \u2014 "),jR=n(yAe,"A",{href:!0});var nZr=s(jR);yeo=r(nZr,"TrOCRConfig"),nZr.forEach(t),xeo=r(yAe," (TrOCR model)"),yAe.forEach(t),$eo=i(L),Tg=n(L,"LI",{});var xAe=s(Tg);Xae=n(xAe,"STRONG",{});var sZr=s(Xae);keo=r(sZr,"unispeech"),sZr.forEach(t),Seo=r(xAe," \u2014 "),DR=n(xAe,"A",{href:!0});var lZr=s(DR);Reo=r(lZr,"UniSpeechConfig"),lZr.forEach(t),Peo=r(xAe," (UniSpeech model)"),xAe.forEach(t),Beo=i(L),Mg=n(L,"LI",{});var $Ae=s(Mg);zae=n($Ae,"STRONG",{});var iZr=s(zae);Ieo=r(iZr,"unispeech-sat"),iZr.forEach(t),Neo=r($Ae," \u2014 "),GR=n($Ae,"A",{href:!0});var dZr=s(GR);qeo=r(dZr,"UniSpeechSatConfig"),dZr.forEach(t),jeo=r($Ae," (UniSpeechSat model)"),$Ae.forEach(t),Deo=i(L),Eg=n(L,"LI",{});var kAe=s(Eg);Wae=n(kAe,"STRONG",{});var cZr=s(Wae);Geo=r(cZr,"van"),cZr.forEach(t),Oeo=r(kAe," \u2014 "),OR=n(kAe,"A",{href:!0});var fZr=s(OR);Veo=r(fZr,"VanConfig"),fZr.forEach(t),Xeo=r(kAe," (VAN model)"),kAe.forEach(t),zeo=i(L),Cg=n(L,"LI",{});var SAe=s(Cg);Qae=n(SAe,"STRONG",{});var mZr=s(Qae);Weo=r(mZr,"vilt"),mZr.forEach(t),Qeo=r(SAe," \u2014 "),VR=n(SAe,"A",{href:!0});var gZr=s(VR);Heo=r(gZr,"ViltConfig"),gZr.forEach(t),Ueo=r(SAe," (ViLT model)"),SAe.forEach(t),Jeo=i(L),wg=n(L,"LI",{});var RAe=s(wg);Hae=n(RAe,"STRONG",{});var hZr=s(Hae);Yeo=r(hZr,"vision-encoder-decoder"),hZr.forEach(t),Keo=r(RAe," \u2014 "),XR=n(RAe,"A",{href:!0});var pZr=s(XR);Zeo=r(pZr,"VisionEncoderDecoderConfig"),pZr.forEach(t),eoo=r(RAe," (Vision Encoder decoder model)"),RAe.forEach(t),ooo=i(L),Ag=n(L,"LI",{});var PAe=s(Ag);Uae=n(PAe,"STRONG",{});var uZr=s(Uae);roo=r(uZr,"vision-text-dual-encoder"),uZr.forEach(t),too=r(PAe," \u2014 "),zR=n(PAe,"A",{href:!0});var _Zr=s(zR);aoo=r(_Zr,"VisionTextDualEncoderConfig"),_Zr.forEach(t),noo=r(PAe," (VisionTextDualEncoder model)"),PAe.forEach(t),soo=i(L),Lg=n(L,"LI",{});var BAe=s(Lg);Jae=n(BAe,"STRONG",{});var bZr=s(Jae);loo=r(bZr,"visual_bert"),bZr.forEach(t),ioo=r(BAe," \u2014 "),WR=n(BAe,"A",{href:!0});var vZr=s(WR);doo=r(vZr,"VisualBertConfig"),vZr.forEach(t),coo=r(BAe," (VisualBERT model)"),BAe.forEach(t),foo=i(L),yg=n(L,"LI",{});var IAe=s(yg);Yae=n(IAe,"STRONG",{});var FZr=s(Yae);moo=r(FZr,"vit"),FZr.forEach(t),goo=r(IAe," \u2014 "),QR=n(IAe,"A",{href:!0});var TZr=s(QR);hoo=r(TZr,"ViTConfig"),TZr.forEach(t),poo=r(IAe," (ViT model)"),IAe.forEach(t),uoo=i(L),xg=n(L,"LI",{});var NAe=s(xg);Kae=n(NAe,"STRONG",{});var MZr=s(Kae);_oo=r(MZr,"vit_mae"),MZr.forEach(t),boo=r(NAe," \u2014 "),HR=n(NAe,"A",{href:!0});var EZr=s(HR);voo=r(EZr,"ViTMAEConfig"),EZr.forEach(t),Foo=r(NAe," (ViTMAE model)"),NAe.forEach(t),Too=i(L),$g=n(L,"LI",{});var qAe=s($g);Zae=n(qAe,"STRONG",{});var CZr=s(Zae);Moo=r(CZr,"wav2vec2"),CZr.forEach(t),Eoo=r(qAe," \u2014 "),UR=n(qAe,"A",{href:!0});var wZr=s(UR);Coo=r(wZr,"Wav2Vec2Config"),wZr.forEach(t),woo=r(qAe," (Wav2Vec2 model)"),qAe.forEach(t),Aoo=i(L),kg=n(L,"LI",{});var jAe=s(kg);ene=n(jAe,"STRONG",{});var AZr=s(ene);Loo=r(AZr,"wav2vec2-conformer"),AZr.forEach(t),yoo=r(jAe," \u2014 "),JR=n(jAe,"A",{href:!0});var LZr=s(JR);xoo=r(LZr,"Wav2Vec2ConformerConfig"),LZr.forEach(t),$oo=r(jAe," (Wav2Vec2-Conformer model)"),jAe.forEach(t),koo=i(L),Sg=n(L,"LI",{});var DAe=s(Sg);one=n(DAe,"STRONG",{});var yZr=s(one);Soo=r(yZr,"wavlm"),yZr.forEach(t),Roo=r(DAe," \u2014 "),YR=n(DAe,"A",{href:!0});var xZr=s(YR);Poo=r(xZr,"WavLMConfig"),xZr.forEach(t),Boo=r(DAe," (WavLM model)"),DAe.forEach(t),Ioo=i(L),Rg=n(L,"LI",{});var GAe=s(Rg);rne=n(GAe,"STRONG",{});var $Zr=s(rne);Noo=r($Zr,"xglm"),$Zr.forEach(t),qoo=r(GAe," \u2014 "),KR=n(GAe,"A",{href:!0});var kZr=s(KR);joo=r(kZr,"XGLMConfig"),kZr.forEach(t),Doo=r(GAe," (XGLM model)"),GAe.forEach(t),Goo=i(L),Pg=n(L,"LI",{});var OAe=s(Pg);tne=n(OAe,"STRONG",{});var SZr=s(tne);Ooo=r(SZr,"xlm"),SZr.forEach(t),Voo=r(OAe," \u2014 "),ZR=n(OAe,"A",{href:!0});var RZr=s(ZR);Xoo=r(RZr,"XLMConfig"),RZr.forEach(t),zoo=r(OAe," (XLM model)"),OAe.forEach(t),Woo=i(L),Bg=n(L,"LI",{});var VAe=s(Bg);ane=n(VAe,"STRONG",{});var PZr=s(ane);Qoo=r(PZr,"xlm-prophetnet"),PZr.forEach(t),Hoo=r(VAe," \u2014 "),eP=n(VAe,"A",{href:!0});var BZr=s(eP);Uoo=r(BZr,"XLMProphetNetConfig"),BZr.forEach(t),Joo=r(VAe," (XLM-ProphetNet model)"),VAe.forEach(t),Yoo=i(L),Ig=n(L,"LI",{});var XAe=s(Ig);nne=n(XAe,"STRONG",{});var IZr=s(nne);Koo=r(IZr,"xlm-roberta"),IZr.forEach(t),Zoo=r(XAe," \u2014 "),oP=n(XAe,"A",{href:!0});var NZr=s(oP);ero=r(NZr,"XLMRobertaConfig"),NZr.forEach(t),oro=r(XAe," (XLM-RoBERTa model)"),XAe.forEach(t),rro=i(L),Ng=n(L,"LI",{});var zAe=s(Ng);sne=n(zAe,"STRONG",{});var qZr=s(sne);tro=r(qZr,"xlm-roberta-xl"),qZr.forEach(t),aro=r(zAe," \u2014 "),rP=n(zAe,"A",{href:!0});var jZr=s(rP);nro=r(jZr,"XLMRobertaXLConfig"),jZr.forEach(t),sro=r(zAe," (XLM-RoBERTa-XL model)"),zAe.forEach(t),lro=i(L),qg=n(L,"LI",{});var WAe=s(qg);lne=n(WAe,"STRONG",{});var DZr=s(lne);iro=r(DZr,"xlnet"),DZr.forEach(t),dro=r(WAe," \u2014 "),tP=n(WAe,"A",{href:!0});var GZr=s(tP);cro=r(GZr,"XLNetConfig"),GZr.forEach(t),fro=r(WAe," (XLNet model)"),WAe.forEach(t),mro=i(L),jg=n(L,"LI",{});var QAe=s(jg);ine=n(QAe,"STRONG",{});var OZr=s(ine);gro=r(OZr,"yolos"),OZr.forEach(t),hro=r(QAe," \u2014 "),aP=n(QAe,"A",{href:!0});var VZr=s(aP);pro=r(VZr,"YolosConfig"),VZr.forEach(t),uro=r(QAe," (YOLOS model)"),QAe.forEach(t),_ro=i(L),Dg=n(L,"LI",{});var HAe=s(Dg);dne=n(HAe,"STRONG",{});var XZr=s(dne);bro=r(XZr,"yoso"),XZr.forEach(t),vro=r(HAe," \u2014 "),nP=n(HAe,"A",{href:!0});var zZr=s(nP);Fro=r(zZr,"YosoConfig"),zZr.forEach(t),Tro=r(HAe," (YOSO model)"),HAe.forEach(t),L.forEach(t),Mro=i(tt),T(Gg.$$.fragment,tt),tt.forEach(t),Ero=i(rt),Og=n(rt,"DIV",{class:!0});var dVe=s(Og);T(L6.$$.fragment,dVe),Cro=i(dVe),cne=n(dVe,"P",{});var WZr=s(cne);wro=r(WZr,"Register a new configuration for this class."),WZr.forEach(t),dVe.forEach(t),rt.forEach(t),cGe=i(f),ki=n(f,"H2",{class:!0});var cVe=s(ki);Vg=n(cVe,"A",{id:!0,class:!0,href:!0});var QZr=s(Vg);fne=n(QZr,"SPAN",{});var HZr=s(fne);T(y6.$$.fragment,HZr),HZr.forEach(t),QZr.forEach(t),Aro=i(cVe),mne=n(cVe,"SPAN",{});var UZr=s(mne);Lro=r(UZr,"AutoTokenizer"),UZr.forEach(t),cVe.forEach(t),fGe=i(f),Ao=n(f,"DIV",{class:!0});var Ws=s(Ao);T(x6.$$.fragment,Ws),yro=i(Ws),$6=n(Ws,"P",{});var fVe=s($6);xro=r(fVe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),sP=n(fVe,"A",{href:!0});var JZr=s(sP);$ro=r(JZr,"AutoTokenizer.from_pretrained()"),JZr.forEach(t),kro=r(fVe," class method."),fVe.forEach(t),Sro=i(Ws),k6=n(Ws,"P",{});var mVe=s(k6);Rro=r(mVe,"This class cannot be instantiated directly using "),gne=n(mVe,"CODE",{});var YZr=s(gne);Pro=r(YZr,"__init__()"),YZr.forEach(t),Bro=r(mVe," (throws an error)."),mVe.forEach(t),Iro=i(Ws),Ar=n(Ws,"DIV",{class:!0});var Qs=s(Ar);T(S6.$$.fragment,Qs),Nro=i(Qs),hne=n(Qs,"P",{});var KZr=s(hne);qro=r(KZr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),KZr.forEach(t),jro=i(Qs),$a=n(Qs,"P",{});var Fw=s($a);Dro=r(Fw,"The tokenizer class to instantiate is selected based on the "),pne=n(Fw,"CODE",{});var ZZr=s(pne);Gro=r(ZZr,"model_type"),ZZr.forEach(t),Oro=r(Fw,` property of the config object (either
passed as an argument or loaded from `),une=n(Fw,"CODE",{});var eet=s(une);Vro=r(eet,"pretrained_model_name_or_path"),eet.forEach(t),Xro=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ne=n(Fw,"CODE",{});var oet=s(_ne);zro=r(oet,"pretrained_model_name_or_path"),oet.forEach(t),Wro=r(Fw,":"),Fw.forEach(t),Qro=i(Qs),k=n(Qs,"UL",{});var S=s(k);Nn=n(S,"LI",{});var q$=s(Nn);bne=n(q$,"STRONG",{});var ret=s(bne);Hro=r(ret,"albert"),ret.forEach(t),Uro=r(q$," \u2014 "),lP=n(q$,"A",{href:!0});var tet=s(lP);Jro=r(tet,"AlbertTokenizer"),tet.forEach(t),Yro=r(q$," or "),iP=n(q$,"A",{href:!0});var aet=s(iP);Kro=r(aet,"AlbertTokenizerFast"),aet.forEach(t),Zro=r(q$," (ALBERT model)"),q$.forEach(t),eto=i(S),qn=n(S,"LI",{});var j$=s(qn);vne=n(j$,"STRONG",{});var net=s(vne);oto=r(net,"bart"),net.forEach(t),rto=r(j$," \u2014 "),dP=n(j$,"A",{href:!0});var set=s(dP);tto=r(set,"BartTokenizer"),set.forEach(t),ato=r(j$," or "),cP=n(j$,"A",{href:!0});var iet=s(cP);nto=r(iet,"BartTokenizerFast"),iet.forEach(t),sto=r(j$," (BART model)"),j$.forEach(t),lto=i(S),jn=n(S,"LI",{});var D$=s(jn);Fne=n(D$,"STRONG",{});var det=s(Fne);ito=r(det,"barthez"),det.forEach(t),dto=r(D$," \u2014 "),fP=n(D$,"A",{href:!0});var cet=s(fP);cto=r(cet,"BarthezTokenizer"),cet.forEach(t),fto=r(D$," or "),mP=n(D$,"A",{href:!0});var fet=s(mP);mto=r(fet,"BarthezTokenizerFast"),fet.forEach(t),gto=r(D$," (BARThez model)"),D$.forEach(t),hto=i(S),Xg=n(S,"LI",{});var UAe=s(Xg);Tne=n(UAe,"STRONG",{});var met=s(Tne);pto=r(met,"bartpho"),met.forEach(t),uto=r(UAe," \u2014 "),gP=n(UAe,"A",{href:!0});var get=s(gP);_to=r(get,"BartphoTokenizer"),get.forEach(t),bto=r(UAe," (BARTpho model)"),UAe.forEach(t),vto=i(S),Dn=n(S,"LI",{});var G$=s(Dn);Mne=n(G$,"STRONG",{});var het=s(Mne);Fto=r(het,"bert"),het.forEach(t),Tto=r(G$," \u2014 "),hP=n(G$,"A",{href:!0});var pet=s(hP);Mto=r(pet,"BertTokenizer"),pet.forEach(t),Eto=r(G$," or "),pP=n(G$,"A",{href:!0});var uet=s(pP);Cto=r(uet,"BertTokenizerFast"),uet.forEach(t),wto=r(G$," (BERT model)"),G$.forEach(t),Ato=i(S),zg=n(S,"LI",{});var JAe=s(zg);Ene=n(JAe,"STRONG",{});var _et=s(Ene);Lto=r(_et,"bert-generation"),_et.forEach(t),yto=r(JAe," \u2014 "),uP=n(JAe,"A",{href:!0});var bet=s(uP);xto=r(bet,"BertGenerationTokenizer"),bet.forEach(t),$to=r(JAe," (Bert Generation model)"),JAe.forEach(t),kto=i(S),Wg=n(S,"LI",{});var YAe=s(Wg);Cne=n(YAe,"STRONG",{});var vet=s(Cne);Sto=r(vet,"bert-japanese"),vet.forEach(t),Rto=r(YAe," \u2014 "),_P=n(YAe,"A",{href:!0});var Fet=s(_P);Pto=r(Fet,"BertJapaneseTokenizer"),Fet.forEach(t),Bto=r(YAe," (BertJapanese model)"),YAe.forEach(t),Ito=i(S),Qg=n(S,"LI",{});var KAe=s(Qg);wne=n(KAe,"STRONG",{});var Tet=s(wne);Nto=r(Tet,"bertweet"),Tet.forEach(t),qto=r(KAe," \u2014 "),bP=n(KAe,"A",{href:!0});var Met=s(bP);jto=r(Met,"BertweetTokenizer"),Met.forEach(t),Dto=r(KAe," (BERTweet model)"),KAe.forEach(t),Gto=i(S),Gn=n(S,"LI",{});var O$=s(Gn);Ane=n(O$,"STRONG",{});var Eet=s(Ane);Oto=r(Eet,"big_bird"),Eet.forEach(t),Vto=r(O$," \u2014 "),vP=n(O$,"A",{href:!0});var Cet=s(vP);Xto=r(Cet,"BigBirdTokenizer"),Cet.forEach(t),zto=r(O$," or "),FP=n(O$,"A",{href:!0});var wet=s(FP);Wto=r(wet,"BigBirdTokenizerFast"),wet.forEach(t),Qto=r(O$," (BigBird model)"),O$.forEach(t),Hto=i(S),On=n(S,"LI",{});var V$=s(On);Lne=n(V$,"STRONG",{});var Aet=s(Lne);Uto=r(Aet,"bigbird_pegasus"),Aet.forEach(t),Jto=r(V$," \u2014 "),TP=n(V$,"A",{href:!0});var Let=s(TP);Yto=r(Let,"PegasusTokenizer"),Let.forEach(t),Kto=r(V$," or "),MP=n(V$,"A",{href:!0});var yet=s(MP);Zto=r(yet,"PegasusTokenizerFast"),yet.forEach(t),eao=r(V$," (BigBird-Pegasus model)"),V$.forEach(t),oao=i(S),Vn=n(S,"LI",{});var X$=s(Vn);yne=n(X$,"STRONG",{});var xet=s(yne);rao=r(xet,"blenderbot"),xet.forEach(t),tao=r(X$," \u2014 "),EP=n(X$,"A",{href:!0});var $et=s(EP);aao=r($et,"BlenderbotTokenizer"),$et.forEach(t),nao=r(X$," or "),CP=n(X$,"A",{href:!0});var ket=s(CP);sao=r(ket,"BlenderbotTokenizerFast"),ket.forEach(t),lao=r(X$," (Blenderbot model)"),X$.forEach(t),iao=i(S),Hg=n(S,"LI",{});var ZAe=s(Hg);xne=n(ZAe,"STRONG",{});var Set=s(xne);dao=r(Set,"blenderbot-small"),Set.forEach(t),cao=r(ZAe," \u2014 "),wP=n(ZAe,"A",{href:!0});var Ret=s(wP);fao=r(Ret,"BlenderbotSmallTokenizer"),Ret.forEach(t),mao=r(ZAe," (BlenderbotSmall model)"),ZAe.forEach(t),gao=i(S),Ug=n(S,"LI",{});var e6e=s(Ug);$ne=n(e6e,"STRONG",{});var Pet=s($ne);hao=r(Pet,"bloom"),Pet.forEach(t),pao=r(e6e," \u2014 "),AP=n(e6e,"A",{href:!0});var Bet=s(AP);uao=r(Bet,"BloomTokenizerFast"),Bet.forEach(t),_ao=r(e6e," (BLOOM model)"),e6e.forEach(t),bao=i(S),Jg=n(S,"LI",{});var o6e=s(Jg);kne=n(o6e,"STRONG",{});var Iet=s(kne);vao=r(Iet,"byt5"),Iet.forEach(t),Fao=r(o6e," \u2014 "),LP=n(o6e,"A",{href:!0});var Net=s(LP);Tao=r(Net,"ByT5Tokenizer"),Net.forEach(t),Mao=r(o6e," (ByT5 model)"),o6e.forEach(t),Eao=i(S),Xn=n(S,"LI",{});var z$=s(Xn);Sne=n(z$,"STRONG",{});var qet=s(Sne);Cao=r(qet,"camembert"),qet.forEach(t),wao=r(z$," \u2014 "),yP=n(z$,"A",{href:!0});var jet=s(yP);Aao=r(jet,"CamembertTokenizer"),jet.forEach(t),Lao=r(z$," or "),xP=n(z$,"A",{href:!0});var Det=s(xP);yao=r(Det,"CamembertTokenizerFast"),Det.forEach(t),xao=r(z$," (CamemBERT model)"),z$.forEach(t),$ao=i(S),Yg=n(S,"LI",{});var r6e=s(Yg);Rne=n(r6e,"STRONG",{});var Get=s(Rne);kao=r(Get,"canine"),Get.forEach(t),Sao=r(r6e," \u2014 "),$P=n(r6e,"A",{href:!0});var Oet=s($P);Rao=r(Oet,"CanineTokenizer"),Oet.forEach(t),Pao=r(r6e," (CANINE model)"),r6e.forEach(t),Bao=i(S),zn=n(S,"LI",{});var W$=s(zn);Pne=n(W$,"STRONG",{});var Vet=s(Pne);Iao=r(Vet,"clip"),Vet.forEach(t),Nao=r(W$," \u2014 "),kP=n(W$,"A",{href:!0});var Xet=s(kP);qao=r(Xet,"CLIPTokenizer"),Xet.forEach(t),jao=r(W$," or "),SP=n(W$,"A",{href:!0});var zet=s(SP);Dao=r(zet,"CLIPTokenizerFast"),zet.forEach(t),Gao=r(W$," (CLIP model)"),W$.forEach(t),Oao=i(S),Wn=n(S,"LI",{});var Q$=s(Wn);Bne=n(Q$,"STRONG",{});var Wet=s(Bne);Vao=r(Wet,"convbert"),Wet.forEach(t),Xao=r(Q$," \u2014 "),RP=n(Q$,"A",{href:!0});var Qet=s(RP);zao=r(Qet,"ConvBertTokenizer"),Qet.forEach(t),Wao=r(Q$," or "),PP=n(Q$,"A",{href:!0});var Het=s(PP);Qao=r(Het,"ConvBertTokenizerFast"),Het.forEach(t),Hao=r(Q$," (ConvBERT model)"),Q$.forEach(t),Uao=i(S),Qn=n(S,"LI",{});var H$=s(Qn);Ine=n(H$,"STRONG",{});var Uet=s(Ine);Jao=r(Uet,"cpm"),Uet.forEach(t),Yao=r(H$," \u2014 "),BP=n(H$,"A",{href:!0});var Jet=s(BP);Kao=r(Jet,"CpmTokenizer"),Jet.forEach(t),Zao=r(H$," or "),IP=n(H$,"A",{href:!0});var Yet=s(IP);eno=r(Yet,"CpmTokenizerFast"),Yet.forEach(t),ono=r(H$," (CPM model)"),H$.forEach(t),rno=i(S),Kg=n(S,"LI",{});var t6e=s(Kg);Nne=n(t6e,"STRONG",{});var Ket=s(Nne);tno=r(Ket,"ctrl"),Ket.forEach(t),ano=r(t6e," \u2014 "),NP=n(t6e,"A",{href:!0});var Zet=s(NP);nno=r(Zet,"CTRLTokenizer"),Zet.forEach(t),sno=r(t6e," (CTRL model)"),t6e.forEach(t),lno=i(S),Hn=n(S,"LI",{});var U$=s(Hn);qne=n(U$,"STRONG",{});var eot=s(qne);ino=r(eot,"data2vec-text"),eot.forEach(t),dno=r(U$," \u2014 "),qP=n(U$,"A",{href:!0});var oot=s(qP);cno=r(oot,"RobertaTokenizer"),oot.forEach(t),fno=r(U$," or "),jP=n(U$,"A",{href:!0});var rot=s(jP);mno=r(rot,"RobertaTokenizerFast"),rot.forEach(t),gno=r(U$," (Data2VecText model)"),U$.forEach(t),hno=i(S),Un=n(S,"LI",{});var J$=s(Un);jne=n(J$,"STRONG",{});var tot=s(jne);pno=r(tot,"deberta"),tot.forEach(t),uno=r(J$," \u2014 "),DP=n(J$,"A",{href:!0});var aot=s(DP);_no=r(aot,"DebertaTokenizer"),aot.forEach(t),bno=r(J$," or "),GP=n(J$,"A",{href:!0});var not=s(GP);vno=r(not,"DebertaTokenizerFast"),not.forEach(t),Fno=r(J$," (DeBERTa model)"),J$.forEach(t),Tno=i(S),Jn=n(S,"LI",{});var Y$=s(Jn);Dne=n(Y$,"STRONG",{});var sot=s(Dne);Mno=r(sot,"deberta-v2"),sot.forEach(t),Eno=r(Y$," \u2014 "),OP=n(Y$,"A",{href:!0});var lot=s(OP);Cno=r(lot,"DebertaV2Tokenizer"),lot.forEach(t),wno=r(Y$," or "),VP=n(Y$,"A",{href:!0});var iot=s(VP);Ano=r(iot,"DebertaV2TokenizerFast"),iot.forEach(t),Lno=r(Y$," (DeBERTa-v2 model)"),Y$.forEach(t),yno=i(S),Yn=n(S,"LI",{});var K$=s(Yn);Gne=n(K$,"STRONG",{});var dot=s(Gne);xno=r(dot,"distilbert"),dot.forEach(t),$no=r(K$," \u2014 "),XP=n(K$,"A",{href:!0});var cot=s(XP);kno=r(cot,"DistilBertTokenizer"),cot.forEach(t),Sno=r(K$," or "),zP=n(K$,"A",{href:!0});var fot=s(zP);Rno=r(fot,"DistilBertTokenizerFast"),fot.forEach(t),Pno=r(K$," (DistilBERT model)"),K$.forEach(t),Bno=i(S),Kn=n(S,"LI",{});var Z$=s(Kn);One=n(Z$,"STRONG",{});var mot=s(One);Ino=r(mot,"dpr"),mot.forEach(t),Nno=r(Z$," \u2014 "),WP=n(Z$,"A",{href:!0});var got=s(WP);qno=r(got,"DPRQuestionEncoderTokenizer"),got.forEach(t),jno=r(Z$," or "),QP=n(Z$,"A",{href:!0});var hot=s(QP);Dno=r(hot,"DPRQuestionEncoderTokenizerFast"),hot.forEach(t),Gno=r(Z$," (DPR model)"),Z$.forEach(t),Ono=i(S),Zn=n(S,"LI",{});var ek=s(Zn);Vne=n(ek,"STRONG",{});var pot=s(Vne);Vno=r(pot,"electra"),pot.forEach(t),Xno=r(ek," \u2014 "),HP=n(ek,"A",{href:!0});var uot=s(HP);zno=r(uot,"ElectraTokenizer"),uot.forEach(t),Wno=r(ek," or "),UP=n(ek,"A",{href:!0});var _ot=s(UP);Qno=r(_ot,"ElectraTokenizerFast"),_ot.forEach(t),Hno=r(ek," (ELECTRA model)"),ek.forEach(t),Uno=i(S),Zg=n(S,"LI",{});var a6e=s(Zg);Xne=n(a6e,"STRONG",{});var bot=s(Xne);Jno=r(bot,"flaubert"),bot.forEach(t),Yno=r(a6e," \u2014 "),JP=n(a6e,"A",{href:!0});var vot=s(JP);Kno=r(vot,"FlaubertTokenizer"),vot.forEach(t),Zno=r(a6e," (FlauBERT model)"),a6e.forEach(t),eso=i(S),es=n(S,"LI",{});var ok=s(es);zne=n(ok,"STRONG",{});var Fot=s(zne);oso=r(Fot,"fnet"),Fot.forEach(t),rso=r(ok," \u2014 "),YP=n(ok,"A",{href:!0});var Tot=s(YP);tso=r(Tot,"FNetTokenizer"),Tot.forEach(t),aso=r(ok," or "),KP=n(ok,"A",{href:!0});var Mot=s(KP);nso=r(Mot,"FNetTokenizerFast"),Mot.forEach(t),sso=r(ok," (FNet model)"),ok.forEach(t),lso=i(S),eh=n(S,"LI",{});var n6e=s(eh);Wne=n(n6e,"STRONG",{});var Eot=s(Wne);iso=r(Eot,"fsmt"),Eot.forEach(t),dso=r(n6e," \u2014 "),ZP=n(n6e,"A",{href:!0});var Cot=s(ZP);cso=r(Cot,"FSMTTokenizer"),Cot.forEach(t),fso=r(n6e," (FairSeq Machine-Translation model)"),n6e.forEach(t),mso=i(S),os=n(S,"LI",{});var rk=s(os);Qne=n(rk,"STRONG",{});var wot=s(Qne);gso=r(wot,"funnel"),wot.forEach(t),hso=r(rk," \u2014 "),eB=n(rk,"A",{href:!0});var Aot=s(eB);pso=r(Aot,"FunnelTokenizer"),Aot.forEach(t),uso=r(rk," or "),oB=n(rk,"A",{href:!0});var Lot=s(oB);_so=r(Lot,"FunnelTokenizerFast"),Lot.forEach(t),bso=r(rk," (Funnel Transformer model)"),rk.forEach(t),vso=i(S),rs=n(S,"LI",{});var tk=s(rs);Hne=n(tk,"STRONG",{});var yot=s(Hne);Fso=r(yot,"gpt2"),yot.forEach(t),Tso=r(tk," \u2014 "),rB=n(tk,"A",{href:!0});var xot=s(rB);Mso=r(xot,"GPT2Tokenizer"),xot.forEach(t),Eso=r(tk," or "),tB=n(tk,"A",{href:!0});var $ot=s(tB);Cso=r($ot,"GPT2TokenizerFast"),$ot.forEach(t),wso=r(tk," (OpenAI GPT-2 model)"),tk.forEach(t),Aso=i(S),ts=n(S,"LI",{});var ak=s(ts);Une=n(ak,"STRONG",{});var kot=s(Une);Lso=r(kot,"gpt_neo"),kot.forEach(t),yso=r(ak," \u2014 "),aB=n(ak,"A",{href:!0});var Sot=s(aB);xso=r(Sot,"GPT2Tokenizer"),Sot.forEach(t),$so=r(ak," or "),nB=n(ak,"A",{href:!0});var Rot=s(nB);kso=r(Rot,"GPT2TokenizerFast"),Rot.forEach(t),Sso=r(ak," (GPT Neo model)"),ak.forEach(t),Rso=i(S),oh=n(S,"LI",{});var s6e=s(oh);Jne=n(s6e,"STRONG",{});var Pot=s(Jne);Pso=r(Pot,"gpt_neox"),Pot.forEach(t),Bso=r(s6e," \u2014 "),sB=n(s6e,"A",{href:!0});var Bot=s(sB);Iso=r(Bot,"GPTNeoXTokenizerFast"),Bot.forEach(t),Nso=r(s6e," (GPT NeoX model)"),s6e.forEach(t),qso=i(S),as=n(S,"LI",{});var nk=s(as);Yne=n(nk,"STRONG",{});var Iot=s(Yne);jso=r(Iot,"gptj"),Iot.forEach(t),Dso=r(nk," \u2014 "),lB=n(nk,"A",{href:!0});var Not=s(lB);Gso=r(Not,"GPT2Tokenizer"),Not.forEach(t),Oso=r(nk," or "),iB=n(nk,"A",{href:!0});var qot=s(iB);Vso=r(qot,"GPT2TokenizerFast"),qot.forEach(t),Xso=r(nk," (GPT-J model)"),nk.forEach(t),zso=i(S),ns=n(S,"LI",{});var sk=s(ns);Kne=n(sk,"STRONG",{});var jot=s(Kne);Wso=r(jot,"herbert"),jot.forEach(t),Qso=r(sk," \u2014 "),dB=n(sk,"A",{href:!0});var Dot=s(dB);Hso=r(Dot,"HerbertTokenizer"),Dot.forEach(t),Uso=r(sk," or "),cB=n(sk,"A",{href:!0});var Got=s(cB);Jso=r(Got,"HerbertTokenizerFast"),Got.forEach(t),Yso=r(sk," (HerBERT model)"),sk.forEach(t),Kso=i(S),rh=n(S,"LI",{});var l6e=s(rh);Zne=n(l6e,"STRONG",{});var Oot=s(Zne);Zso=r(Oot,"hubert"),Oot.forEach(t),elo=r(l6e," \u2014 "),fB=n(l6e,"A",{href:!0});var Vot=s(fB);olo=r(Vot,"Wav2Vec2CTCTokenizer"),Vot.forEach(t),rlo=r(l6e," (Hubert model)"),l6e.forEach(t),tlo=i(S),ss=n(S,"LI",{});var lk=s(ss);ese=n(lk,"STRONG",{});var Xot=s(ese);alo=r(Xot,"ibert"),Xot.forEach(t),nlo=r(lk," \u2014 "),mB=n(lk,"A",{href:!0});var zot=s(mB);slo=r(zot,"RobertaTokenizer"),zot.forEach(t),llo=r(lk," or "),gB=n(lk,"A",{href:!0});var Wot=s(gB);ilo=r(Wot,"RobertaTokenizerFast"),Wot.forEach(t),dlo=r(lk," (I-BERT model)"),lk.forEach(t),clo=i(S),ls=n(S,"LI",{});var ik=s(ls);ose=n(ik,"STRONG",{});var Qot=s(ose);flo=r(Qot,"layoutlm"),Qot.forEach(t),mlo=r(ik," \u2014 "),hB=n(ik,"A",{href:!0});var Hot=s(hB);glo=r(Hot,"LayoutLMTokenizer"),Hot.forEach(t),hlo=r(ik," or "),pB=n(ik,"A",{href:!0});var Uot=s(pB);plo=r(Uot,"LayoutLMTokenizerFast"),Uot.forEach(t),ulo=r(ik," (LayoutLM model)"),ik.forEach(t),_lo=i(S),is=n(S,"LI",{});var dk=s(is);rse=n(dk,"STRONG",{});var Jot=s(rse);blo=r(Jot,"layoutlmv2"),Jot.forEach(t),vlo=r(dk," \u2014 "),uB=n(dk,"A",{href:!0});var Yot=s(uB);Flo=r(Yot,"LayoutLMv2Tokenizer"),Yot.forEach(t),Tlo=r(dk," or "),_B=n(dk,"A",{href:!0});var Kot=s(_B);Mlo=r(Kot,"LayoutLMv2TokenizerFast"),Kot.forEach(t),Elo=r(dk," (LayoutLMv2 model)"),dk.forEach(t),Clo=i(S),ds=n(S,"LI",{});var ck=s(ds);tse=n(ck,"STRONG",{});var Zot=s(tse);wlo=r(Zot,"layoutlmv3"),Zot.forEach(t),Alo=r(ck," \u2014 "),bB=n(ck,"A",{href:!0});var ert=s(bB);Llo=r(ert,"LayoutLMv3Tokenizer"),ert.forEach(t),ylo=r(ck," or "),vB=n(ck,"A",{href:!0});var ort=s(vB);xlo=r(ort,"LayoutLMv3TokenizerFast"),ort.forEach(t),$lo=r(ck," (LayoutLMv3 model)"),ck.forEach(t),klo=i(S),cs=n(S,"LI",{});var fk=s(cs);ase=n(fk,"STRONG",{});var rrt=s(ase);Slo=r(rrt,"layoutxlm"),rrt.forEach(t),Rlo=r(fk," \u2014 "),FB=n(fk,"A",{href:!0});var trt=s(FB);Plo=r(trt,"LayoutXLMTokenizer"),trt.forEach(t),Blo=r(fk," or "),TB=n(fk,"A",{href:!0});var art=s(TB);Ilo=r(art,"LayoutXLMTokenizerFast"),art.forEach(t),Nlo=r(fk," (LayoutXLM model)"),fk.forEach(t),qlo=i(S),fs=n(S,"LI",{});var mk=s(fs);nse=n(mk,"STRONG",{});var nrt=s(nse);jlo=r(nrt,"led"),nrt.forEach(t),Dlo=r(mk," \u2014 "),MB=n(mk,"A",{href:!0});var srt=s(MB);Glo=r(srt,"LEDTokenizer"),srt.forEach(t),Olo=r(mk," or "),EB=n(mk,"A",{href:!0});var lrt=s(EB);Vlo=r(lrt,"LEDTokenizerFast"),lrt.forEach(t),Xlo=r(mk," (LED model)"),mk.forEach(t),zlo=i(S),ms=n(S,"LI",{});var gk=s(ms);sse=n(gk,"STRONG",{});var irt=s(sse);Wlo=r(irt,"longformer"),irt.forEach(t),Qlo=r(gk," \u2014 "),CB=n(gk,"A",{href:!0});var drt=s(CB);Hlo=r(drt,"LongformerTokenizer"),drt.forEach(t),Ulo=r(gk," or "),wB=n(gk,"A",{href:!0});var crt=s(wB);Jlo=r(crt,"LongformerTokenizerFast"),crt.forEach(t),Ylo=r(gk," (Longformer model)"),gk.forEach(t),Klo=i(S),gs=n(S,"LI",{});var hk=s(gs);lse=n(hk,"STRONG",{});var frt=s(lse);Zlo=r(frt,"longt5"),frt.forEach(t),eio=r(hk," \u2014 "),AB=n(hk,"A",{href:!0});var mrt=s(AB);oio=r(mrt,"T5Tokenizer"),mrt.forEach(t),rio=r(hk," or "),LB=n(hk,"A",{href:!0});var grt=s(LB);tio=r(grt,"T5TokenizerFast"),grt.forEach(t),aio=r(hk," (LongT5 model)"),hk.forEach(t),nio=i(S),th=n(S,"LI",{});var i6e=s(th);ise=n(i6e,"STRONG",{});var hrt=s(ise);sio=r(hrt,"luke"),hrt.forEach(t),lio=r(i6e," \u2014 "),yB=n(i6e,"A",{href:!0});var prt=s(yB);iio=r(prt,"LukeTokenizer"),prt.forEach(t),dio=r(i6e," (LUKE model)"),i6e.forEach(t),cio=i(S),hs=n(S,"LI",{});var pk=s(hs);dse=n(pk,"STRONG",{});var urt=s(dse);fio=r(urt,"lxmert"),urt.forEach(t),mio=r(pk," \u2014 "),xB=n(pk,"A",{href:!0});var _rt=s(xB);gio=r(_rt,"LxmertTokenizer"),_rt.forEach(t),hio=r(pk," or "),$B=n(pk,"A",{href:!0});var brt=s($B);pio=r(brt,"LxmertTokenizerFast"),brt.forEach(t),uio=r(pk," (LXMERT model)"),pk.forEach(t),_io=i(S),ah=n(S,"LI",{});var d6e=s(ah);cse=n(d6e,"STRONG",{});var vrt=s(cse);bio=r(vrt,"m2m_100"),vrt.forEach(t),vio=r(d6e," \u2014 "),kB=n(d6e,"A",{href:!0});var Frt=s(kB);Fio=r(Frt,"M2M100Tokenizer"),Frt.forEach(t),Tio=r(d6e," (M2M100 model)"),d6e.forEach(t),Mio=i(S),nh=n(S,"LI",{});var c6e=s(nh);fse=n(c6e,"STRONG",{});var Trt=s(fse);Eio=r(Trt,"marian"),Trt.forEach(t),Cio=r(c6e," \u2014 "),SB=n(c6e,"A",{href:!0});var Mrt=s(SB);wio=r(Mrt,"MarianTokenizer"),Mrt.forEach(t),Aio=r(c6e," (Marian model)"),c6e.forEach(t),Lio=i(S),ps=n(S,"LI",{});var uk=s(ps);mse=n(uk,"STRONG",{});var Ert=s(mse);yio=r(Ert,"mbart"),Ert.forEach(t),xio=r(uk," \u2014 "),RB=n(uk,"A",{href:!0});var Crt=s(RB);$io=r(Crt,"MBartTokenizer"),Crt.forEach(t),kio=r(uk," or "),PB=n(uk,"A",{href:!0});var wrt=s(PB);Sio=r(wrt,"MBartTokenizerFast"),wrt.forEach(t),Rio=r(uk," (mBART model)"),uk.forEach(t),Pio=i(S),us=n(S,"LI",{});var _k=s(us);gse=n(_k,"STRONG",{});var Art=s(gse);Bio=r(Art,"mbart50"),Art.forEach(t),Iio=r(_k," \u2014 "),BB=n(_k,"A",{href:!0});var Lrt=s(BB);Nio=r(Lrt,"MBart50Tokenizer"),Lrt.forEach(t),qio=r(_k," or "),IB=n(_k,"A",{href:!0});var yrt=s(IB);jio=r(yrt,"MBart50TokenizerFast"),yrt.forEach(t),Dio=r(_k," (mBART-50 model)"),_k.forEach(t),Gio=i(S),_s=n(S,"LI",{});var bk=s(_s);hse=n(bk,"STRONG",{});var xrt=s(hse);Oio=r(xrt,"megatron-bert"),xrt.forEach(t),Vio=r(bk," \u2014 "),NB=n(bk,"A",{href:!0});var $rt=s(NB);Xio=r($rt,"BertTokenizer"),$rt.forEach(t),zio=r(bk," or "),qB=n(bk,"A",{href:!0});var krt=s(qB);Wio=r(krt,"BertTokenizerFast"),krt.forEach(t),Qio=r(bk," (Megatron-BERT model)"),bk.forEach(t),Hio=i(S),sh=n(S,"LI",{});var f6e=s(sh);pse=n(f6e,"STRONG",{});var Srt=s(pse);Uio=r(Srt,"mluke"),Srt.forEach(t),Jio=r(f6e," \u2014 "),jB=n(f6e,"A",{href:!0});var Rrt=s(jB);Yio=r(Rrt,"MLukeTokenizer"),Rrt.forEach(t),Kio=r(f6e," (mLUKE model)"),f6e.forEach(t),Zio=i(S),bs=n(S,"LI",{});var vk=s(bs);use=n(vk,"STRONG",{});var Prt=s(use);edo=r(Prt,"mobilebert"),Prt.forEach(t),odo=r(vk," \u2014 "),DB=n(vk,"A",{href:!0});var Brt=s(DB);rdo=r(Brt,"MobileBertTokenizer"),Brt.forEach(t),tdo=r(vk," or "),GB=n(vk,"A",{href:!0});var Irt=s(GB);ado=r(Irt,"MobileBertTokenizerFast"),Irt.forEach(t),ndo=r(vk," (MobileBERT model)"),vk.forEach(t),sdo=i(S),vs=n(S,"LI",{});var Fk=s(vs);_se=n(Fk,"STRONG",{});var Nrt=s(_se);ldo=r(Nrt,"mpnet"),Nrt.forEach(t),ido=r(Fk," \u2014 "),OB=n(Fk,"A",{href:!0});var qrt=s(OB);ddo=r(qrt,"MPNetTokenizer"),qrt.forEach(t),cdo=r(Fk," or "),VB=n(Fk,"A",{href:!0});var jrt=s(VB);fdo=r(jrt,"MPNetTokenizerFast"),jrt.forEach(t),mdo=r(Fk," (MPNet model)"),Fk.forEach(t),gdo=i(S),Fs=n(S,"LI",{});var Tk=s(Fs);bse=n(Tk,"STRONG",{});var Drt=s(bse);hdo=r(Drt,"mt5"),Drt.forEach(t),pdo=r(Tk," \u2014 "),XB=n(Tk,"A",{href:!0});var Grt=s(XB);udo=r(Grt,"MT5Tokenizer"),Grt.forEach(t),_do=r(Tk," or "),zB=n(Tk,"A",{href:!0});var Ort=s(zB);bdo=r(Ort,"MT5TokenizerFast"),Ort.forEach(t),vdo=r(Tk," (MT5 model)"),Tk.forEach(t),Fdo=i(S),Ts=n(S,"LI",{});var Mk=s(Ts);vse=n(Mk,"STRONG",{});var Vrt=s(vse);Tdo=r(Vrt,"nystromformer"),Vrt.forEach(t),Mdo=r(Mk," \u2014 "),WB=n(Mk,"A",{href:!0});var Xrt=s(WB);Edo=r(Xrt,"AlbertTokenizer"),Xrt.forEach(t),Cdo=r(Mk," or "),QB=n(Mk,"A",{href:!0});var zrt=s(QB);wdo=r(zrt,"AlbertTokenizerFast"),zrt.forEach(t),Ado=r(Mk," (Nystr\xF6mformer model)"),Mk.forEach(t),Ldo=i(S),Ms=n(S,"LI",{});var Ek=s(Ms);Fse=n(Ek,"STRONG",{});var Wrt=s(Fse);ydo=r(Wrt,"ofa"),Wrt.forEach(t),xdo=r(Ek," \u2014 "),HB=n(Ek,"A",{href:!0});var Qrt=s(HB);$do=r(Qrt,"OFATokenizer"),Qrt.forEach(t),kdo=r(Ek," or "),UB=n(Ek,"A",{href:!0});var Hrt=s(UB);Sdo=r(Hrt,"OFATokenizerFast"),Hrt.forEach(t),Rdo=r(Ek," (OFA model)"),Ek.forEach(t),Pdo=i(S),Es=n(S,"LI",{});var Ck=s(Es);Tse=n(Ck,"STRONG",{});var Urt=s(Tse);Bdo=r(Urt,"openai-gpt"),Urt.forEach(t),Ido=r(Ck," \u2014 "),JB=n(Ck,"A",{href:!0});var Jrt=s(JB);Ndo=r(Jrt,"OpenAIGPTTokenizer"),Jrt.forEach(t),qdo=r(Ck," or "),YB=n(Ck,"A",{href:!0});var Yrt=s(YB);jdo=r(Yrt,"OpenAIGPTTokenizerFast"),Yrt.forEach(t),Ddo=r(Ck," (OpenAI GPT model)"),Ck.forEach(t),Gdo=i(S),lh=n(S,"LI",{});var m6e=s(lh);Mse=n(m6e,"STRONG",{});var Krt=s(Mse);Odo=r(Krt,"opt"),Krt.forEach(t),Vdo=r(m6e," \u2014 "),KB=n(m6e,"A",{href:!0});var Zrt=s(KB);Xdo=r(Zrt,"GPT2Tokenizer"),Zrt.forEach(t),zdo=r(m6e," (OPT model)"),m6e.forEach(t),Wdo=i(S),Cs=n(S,"LI",{});var wk=s(Cs);Ese=n(wk,"STRONG",{});var ett=s(Ese);Qdo=r(ett,"pegasus"),ett.forEach(t),Hdo=r(wk," \u2014 "),ZB=n(wk,"A",{href:!0});var ott=s(ZB);Udo=r(ott,"PegasusTokenizer"),ott.forEach(t),Jdo=r(wk," or "),eI=n(wk,"A",{href:!0});var rtt=s(eI);Ydo=r(rtt,"PegasusTokenizerFast"),rtt.forEach(t),Kdo=r(wk," (Pegasus model)"),wk.forEach(t),Zdo=i(S),ih=n(S,"LI",{});var g6e=s(ih);Cse=n(g6e,"STRONG",{});var ttt=s(Cse);eco=r(ttt,"perceiver"),ttt.forEach(t),oco=r(g6e," \u2014 "),oI=n(g6e,"A",{href:!0});var att=s(oI);rco=r(att,"PerceiverTokenizer"),att.forEach(t),tco=r(g6e," (Perceiver model)"),g6e.forEach(t),aco=i(S),dh=n(S,"LI",{});var h6e=s(dh);wse=n(h6e,"STRONG",{});var ntt=s(wse);nco=r(ntt,"phobert"),ntt.forEach(t),sco=r(h6e," \u2014 "),rI=n(h6e,"A",{href:!0});var stt=s(rI);lco=r(stt,"PhobertTokenizer"),stt.forEach(t),ico=r(h6e," (PhoBERT model)"),h6e.forEach(t),dco=i(S),ch=n(S,"LI",{});var p6e=s(ch);Ase=n(p6e,"STRONG",{});var ltt=s(Ase);cco=r(ltt,"plbart"),ltt.forEach(t),fco=r(p6e," \u2014 "),tI=n(p6e,"A",{href:!0});var itt=s(tI);mco=r(itt,"PLBartTokenizer"),itt.forEach(t),gco=r(p6e," (PLBart model)"),p6e.forEach(t),hco=i(S),fh=n(S,"LI",{});var u6e=s(fh);Lse=n(u6e,"STRONG",{});var dtt=s(Lse);pco=r(dtt,"prophetnet"),dtt.forEach(t),uco=r(u6e," \u2014 "),aI=n(u6e,"A",{href:!0});var ctt=s(aI);_co=r(ctt,"ProphetNetTokenizer"),ctt.forEach(t),bco=r(u6e," (ProphetNet model)"),u6e.forEach(t),vco=i(S),ws=n(S,"LI",{});var Ak=s(ws);yse=n(Ak,"STRONG",{});var ftt=s(yse);Fco=r(ftt,"qdqbert"),ftt.forEach(t),Tco=r(Ak," \u2014 "),nI=n(Ak,"A",{href:!0});var mtt=s(nI);Mco=r(mtt,"BertTokenizer"),mtt.forEach(t),Eco=r(Ak," or "),sI=n(Ak,"A",{href:!0});var gtt=s(sI);Cco=r(gtt,"BertTokenizerFast"),gtt.forEach(t),wco=r(Ak," (QDQBert model)"),Ak.forEach(t),Aco=i(S),mh=n(S,"LI",{});var _6e=s(mh);xse=n(_6e,"STRONG",{});var htt=s(xse);Lco=r(htt,"rag"),htt.forEach(t),yco=r(_6e," \u2014 "),lI=n(_6e,"A",{href:!0});var ptt=s(lI);xco=r(ptt,"RagTokenizer"),ptt.forEach(t),$co=r(_6e," (RAG model)"),_6e.forEach(t),kco=i(S),As=n(S,"LI",{});var Lk=s(As);$se=n(Lk,"STRONG",{});var utt=s($se);Sco=r(utt,"realm"),utt.forEach(t),Rco=r(Lk," \u2014 "),iI=n(Lk,"A",{href:!0});var _tt=s(iI);Pco=r(_tt,"RealmTokenizer"),_tt.forEach(t),Bco=r(Lk," or "),dI=n(Lk,"A",{href:!0});var btt=s(dI);Ico=r(btt,"RealmTokenizerFast"),btt.forEach(t),Nco=r(Lk," (REALM model)"),Lk.forEach(t),qco=i(S),Ls=n(S,"LI",{});var yk=s(Ls);kse=n(yk,"STRONG",{});var vtt=s(kse);jco=r(vtt,"reformer"),vtt.forEach(t),Dco=r(yk," \u2014 "),cI=n(yk,"A",{href:!0});var Ftt=s(cI);Gco=r(Ftt,"ReformerTokenizer"),Ftt.forEach(t),Oco=r(yk," or "),fI=n(yk,"A",{href:!0});var Ttt=s(fI);Vco=r(Ttt,"ReformerTokenizerFast"),Ttt.forEach(t),Xco=r(yk," (Reformer model)"),yk.forEach(t),zco=i(S),ys=n(S,"LI",{});var xk=s(ys);Sse=n(xk,"STRONG",{});var Mtt=s(Sse);Wco=r(Mtt,"rembert"),Mtt.forEach(t),Qco=r(xk," \u2014 "),mI=n(xk,"A",{href:!0});var Ett=s(mI);Hco=r(Ett,"RemBertTokenizer"),Ett.forEach(t),Uco=r(xk," or "),gI=n(xk,"A",{href:!0});var Ctt=s(gI);Jco=r(Ctt,"RemBertTokenizerFast"),Ctt.forEach(t),Yco=r(xk," (RemBERT model)"),xk.forEach(t),Kco=i(S),xs=n(S,"LI",{});var $k=s(xs);Rse=n($k,"STRONG",{});var wtt=s(Rse);Zco=r(wtt,"retribert"),wtt.forEach(t),efo=r($k," \u2014 "),hI=n($k,"A",{href:!0});var Att=s(hI);ofo=r(Att,"RetriBertTokenizer"),Att.forEach(t),rfo=r($k," or "),pI=n($k,"A",{href:!0});var Ltt=s(pI);tfo=r(Ltt,"RetriBertTokenizerFast"),Ltt.forEach(t),afo=r($k," (RetriBERT model)"),$k.forEach(t),nfo=i(S),$s=n(S,"LI",{});var kk=s($s);Pse=n(kk,"STRONG",{});var ytt=s(Pse);sfo=r(ytt,"roberta"),ytt.forEach(t),lfo=r(kk," \u2014 "),uI=n(kk,"A",{href:!0});var xtt=s(uI);ifo=r(xtt,"RobertaTokenizer"),xtt.forEach(t),dfo=r(kk," or "),_I=n(kk,"A",{href:!0});var $tt=s(_I);cfo=r($tt,"RobertaTokenizerFast"),$tt.forEach(t),ffo=r(kk," (RoBERTa model)"),kk.forEach(t),mfo=i(S),ks=n(S,"LI",{});var Sk=s(ks);Bse=n(Sk,"STRONG",{});var ktt=s(Bse);gfo=r(ktt,"roformer"),ktt.forEach(t),hfo=r(Sk," \u2014 "),bI=n(Sk,"A",{href:!0});var Stt=s(bI);pfo=r(Stt,"RoFormerTokenizer"),Stt.forEach(t),ufo=r(Sk," or "),vI=n(Sk,"A",{href:!0});var Rtt=s(vI);_fo=r(Rtt,"RoFormerTokenizerFast"),Rtt.forEach(t),bfo=r(Sk," (RoFormer model)"),Sk.forEach(t),vfo=i(S),gh=n(S,"LI",{});var b6e=s(gh);Ise=n(b6e,"STRONG",{});var Ptt=s(Ise);Ffo=r(Ptt,"speech_to_text"),Ptt.forEach(t),Tfo=r(b6e," \u2014 "),FI=n(b6e,"A",{href:!0});var Btt=s(FI);Mfo=r(Btt,"Speech2TextTokenizer"),Btt.forEach(t),Efo=r(b6e," (Speech2Text model)"),b6e.forEach(t),Cfo=i(S),hh=n(S,"LI",{});var v6e=s(hh);Nse=n(v6e,"STRONG",{});var Itt=s(Nse);wfo=r(Itt,"speech_to_text_2"),Itt.forEach(t),Afo=r(v6e," \u2014 "),TI=n(v6e,"A",{href:!0});var Ntt=s(TI);Lfo=r(Ntt,"Speech2Text2Tokenizer"),Ntt.forEach(t),yfo=r(v6e," (Speech2Text2 model)"),v6e.forEach(t),xfo=i(S),Ss=n(S,"LI",{});var Rk=s(Ss);qse=n(Rk,"STRONG",{});var qtt=s(qse);$fo=r(qtt,"splinter"),qtt.forEach(t),kfo=r(Rk," \u2014 "),MI=n(Rk,"A",{href:!0});var jtt=s(MI);Sfo=r(jtt,"SplinterTokenizer"),jtt.forEach(t),Rfo=r(Rk," or "),EI=n(Rk,"A",{href:!0});var Dtt=s(EI);Pfo=r(Dtt,"SplinterTokenizerFast"),Dtt.forEach(t),Bfo=r(Rk," (Splinter model)"),Rk.forEach(t),Ifo=i(S),Rs=n(S,"LI",{});var Pk=s(Rs);jse=n(Pk,"STRONG",{});var Gtt=s(jse);Nfo=r(Gtt,"squeezebert"),Gtt.forEach(t),qfo=r(Pk," \u2014 "),CI=n(Pk,"A",{href:!0});var Ott=s(CI);jfo=r(Ott,"SqueezeBertTokenizer"),Ott.forEach(t),Dfo=r(Pk," or "),wI=n(Pk,"A",{href:!0});var Vtt=s(wI);Gfo=r(Vtt,"SqueezeBertTokenizerFast"),Vtt.forEach(t),Ofo=r(Pk," (SqueezeBERT model)"),Pk.forEach(t),Vfo=i(S),Ps=n(S,"LI",{});var Bk=s(Ps);Dse=n(Bk,"STRONG",{});var Xtt=s(Dse);Xfo=r(Xtt,"t5"),Xtt.forEach(t),zfo=r(Bk," \u2014 "),AI=n(Bk,"A",{href:!0});var ztt=s(AI);Wfo=r(ztt,"T5Tokenizer"),ztt.forEach(t),Qfo=r(Bk," or "),LI=n(Bk,"A",{href:!0});var Wtt=s(LI);Hfo=r(Wtt,"T5TokenizerFast"),Wtt.forEach(t),Ufo=r(Bk," (T5 model)"),Bk.forEach(t),Jfo=i(S),ph=n(S,"LI",{});var F6e=s(ph);Gse=n(F6e,"STRONG",{});var Qtt=s(Gse);Yfo=r(Qtt,"tapas"),Qtt.forEach(t),Kfo=r(F6e," \u2014 "),yI=n(F6e,"A",{href:!0});var Htt=s(yI);Zfo=r(Htt,"TapasTokenizer"),Htt.forEach(t),emo=r(F6e," (TAPAS model)"),F6e.forEach(t),omo=i(S),uh=n(S,"LI",{});var T6e=s(uh);Ose=n(T6e,"STRONG",{});var Utt=s(Ose);rmo=r(Utt,"tapex"),Utt.forEach(t),tmo=r(T6e," \u2014 "),xI=n(T6e,"A",{href:!0});var Jtt=s(xI);amo=r(Jtt,"TapexTokenizer"),Jtt.forEach(t),nmo=r(T6e," (TAPEX model)"),T6e.forEach(t),smo=i(S),_h=n(S,"LI",{});var M6e=s(_h);Vse=n(M6e,"STRONG",{});var Ytt=s(Vse);lmo=r(Ytt,"transfo-xl"),Ytt.forEach(t),imo=r(M6e," \u2014 "),$I=n(M6e,"A",{href:!0});var Ktt=s($I);dmo=r(Ktt,"TransfoXLTokenizer"),Ktt.forEach(t),cmo=r(M6e," (Transformer-XL model)"),M6e.forEach(t),fmo=i(S),Bs=n(S,"LI",{});var Ik=s(Bs);Xse=n(Ik,"STRONG",{});var Ztt=s(Xse);mmo=r(Ztt,"vilt"),Ztt.forEach(t),gmo=r(Ik," \u2014 "),kI=n(Ik,"A",{href:!0});var eat=s(kI);hmo=r(eat,"BertTokenizer"),eat.forEach(t),pmo=r(Ik," or "),SI=n(Ik,"A",{href:!0});var oat=s(SI);umo=r(oat,"BertTokenizerFast"),oat.forEach(t),_mo=r(Ik," (ViLT model)"),Ik.forEach(t),bmo=i(S),Is=n(S,"LI",{});var Nk=s(Is);zse=n(Nk,"STRONG",{});var rat=s(zse);vmo=r(rat,"visual_bert"),rat.forEach(t),Fmo=r(Nk," \u2014 "),RI=n(Nk,"A",{href:!0});var tat=s(RI);Tmo=r(tat,"BertTokenizer"),tat.forEach(t),Mmo=r(Nk," or "),PI=n(Nk,"A",{href:!0});var aat=s(PI);Emo=r(aat,"BertTokenizerFast"),aat.forEach(t),Cmo=r(Nk," (VisualBERT model)"),Nk.forEach(t),wmo=i(S),bh=n(S,"LI",{});var E6e=s(bh);Wse=n(E6e,"STRONG",{});var nat=s(Wse);Amo=r(nat,"wav2vec2"),nat.forEach(t),Lmo=r(E6e," \u2014 "),BI=n(E6e,"A",{href:!0});var sat=s(BI);ymo=r(sat,"Wav2Vec2CTCTokenizer"),sat.forEach(t),xmo=r(E6e," (Wav2Vec2 model)"),E6e.forEach(t),$mo=i(S),vh=n(S,"LI",{});var C6e=s(vh);Qse=n(C6e,"STRONG",{});var lat=s(Qse);kmo=r(lat,"wav2vec2-conformer"),lat.forEach(t),Smo=r(C6e," \u2014 "),II=n(C6e,"A",{href:!0});var iat=s(II);Rmo=r(iat,"Wav2Vec2CTCTokenizer"),iat.forEach(t),Pmo=r(C6e," (Wav2Vec2-Conformer model)"),C6e.forEach(t),Bmo=i(S),Fh=n(S,"LI",{});var w6e=s(Fh);Hse=n(w6e,"STRONG",{});var dat=s(Hse);Imo=r(dat,"wav2vec2_phoneme"),dat.forEach(t),Nmo=r(w6e," \u2014 "),NI=n(w6e,"A",{href:!0});var cat=s(NI);qmo=r(cat,"Wav2Vec2PhonemeCTCTokenizer"),cat.forEach(t),jmo=r(w6e," (Wav2Vec2Phoneme model)"),w6e.forEach(t),Dmo=i(S),Ns=n(S,"LI",{});var qk=s(Ns);Use=n(qk,"STRONG",{});var fat=s(Use);Gmo=r(fat,"xglm"),fat.forEach(t),Omo=r(qk," \u2014 "),qI=n(qk,"A",{href:!0});var mat=s(qI);Vmo=r(mat,"XGLMTokenizer"),mat.forEach(t),Xmo=r(qk," or "),jI=n(qk,"A",{href:!0});var gat=s(jI);zmo=r(gat,"XGLMTokenizerFast"),gat.forEach(t),Wmo=r(qk," (XGLM model)"),qk.forEach(t),Qmo=i(S),Th=n(S,"LI",{});var A6e=s(Th);Jse=n(A6e,"STRONG",{});var hat=s(Jse);Hmo=r(hat,"xlm"),hat.forEach(t),Umo=r(A6e," \u2014 "),DI=n(A6e,"A",{href:!0});var pat=s(DI);Jmo=r(pat,"XLMTokenizer"),pat.forEach(t),Ymo=r(A6e," (XLM model)"),A6e.forEach(t),Kmo=i(S),Mh=n(S,"LI",{});var L6e=s(Mh);Yse=n(L6e,"STRONG",{});var uat=s(Yse);Zmo=r(uat,"xlm-prophetnet"),uat.forEach(t),ego=r(L6e," \u2014 "),GI=n(L6e,"A",{href:!0});var _at=s(GI);ogo=r(_at,"XLMProphetNetTokenizer"),_at.forEach(t),rgo=r(L6e," (XLM-ProphetNet model)"),L6e.forEach(t),tgo=i(S),qs=n(S,"LI",{});var jk=s(qs);Kse=n(jk,"STRONG",{});var bat=s(Kse);ago=r(bat,"xlm-roberta"),bat.forEach(t),ngo=r(jk," \u2014 "),OI=n(jk,"A",{href:!0});var vat=s(OI);sgo=r(vat,"XLMRobertaTokenizer"),vat.forEach(t),lgo=r(jk," or "),VI=n(jk,"A",{href:!0});var Fat=s(VI);igo=r(Fat,"XLMRobertaTokenizerFast"),Fat.forEach(t),dgo=r(jk," (XLM-RoBERTa model)"),jk.forEach(t),cgo=i(S),js=n(S,"LI",{});var Dk=s(js);Zse=n(Dk,"STRONG",{});var Tat=s(Zse);fgo=r(Tat,"xlm-roberta-xl"),Tat.forEach(t),mgo=r(Dk," \u2014 "),XI=n(Dk,"A",{href:!0});var Mat=s(XI);ggo=r(Mat,"RobertaTokenizer"),Mat.forEach(t),hgo=r(Dk," or "),zI=n(Dk,"A",{href:!0});var Eat=s(zI);pgo=r(Eat,"RobertaTokenizerFast"),Eat.forEach(t),ugo=r(Dk," (XLM-RoBERTa-XL model)"),Dk.forEach(t),_go=i(S),Ds=n(S,"LI",{});var Gk=s(Ds);ele=n(Gk,"STRONG",{});var Cat=s(ele);bgo=r(Cat,"xlnet"),Cat.forEach(t),vgo=r(Gk," \u2014 "),WI=n(Gk,"A",{href:!0});var wat=s(WI);Fgo=r(wat,"XLNetTokenizer"),wat.forEach(t),Tgo=r(Gk," or "),QI=n(Gk,"A",{href:!0});var Aat=s(QI);Mgo=r(Aat,"XLNetTokenizerFast"),Aat.forEach(t),Ego=r(Gk," (XLNet model)"),Gk.forEach(t),Cgo=i(S),Gs=n(S,"LI",{});var Ok=s(Gs);ole=n(Ok,"STRONG",{});var Lat=s(ole);wgo=r(Lat,"yoso"),Lat.forEach(t),Ago=r(Ok," \u2014 "),HI=n(Ok,"A",{href:!0});var yat=s(HI);Lgo=r(yat,"AlbertTokenizer"),yat.forEach(t),ygo=r(Ok," or "),UI=n(Ok,"A",{href:!0});var xat=s(UI);xgo=r(xat,"AlbertTokenizerFast"),xat.forEach(t),$go=r(Ok," (YOSO model)"),Ok.forEach(t),S.forEach(t),kgo=i(Qs),T(Eh.$$.fragment,Qs),Qs.forEach(t),Sgo=i(Ws),Ch=n(Ws,"DIV",{class:!0});var gVe=s(Ch);T(R6.$$.fragment,gVe),Rgo=i(gVe),rle=n(gVe,"P",{});var $at=s(rle);Pgo=r($at,"Register a new tokenizer in this mapping."),$at.forEach(t),gVe.forEach(t),Ws.forEach(t),mGe=i(f),Si=n(f,"H2",{class:!0});var hVe=s(Si);wh=n(hVe,"A",{id:!0,class:!0,href:!0});var kat=s(wh);tle=n(kat,"SPAN",{});var Sat=s(tle);T(P6.$$.fragment,Sat),Sat.forEach(t),kat.forEach(t),Bgo=i(hVe),ale=n(hVe,"SPAN",{});var Rat=s(ale);Igo=r(Rat,"AutoFeatureExtractor"),Rat.forEach(t),hVe.forEach(t),gGe=i(f),Lo=n(f,"DIV",{class:!0});var Hs=s(Lo);T(B6.$$.fragment,Hs),Ngo=i(Hs),I6=n(Hs,"P",{});var pVe=s(I6);qgo=r(pVe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),JI=n(pVe,"A",{href:!0});var Pat=s(JI);jgo=r(Pat,"AutoFeatureExtractor.from_pretrained()"),Pat.forEach(t),Dgo=r(pVe," class method."),pVe.forEach(t),Ggo=i(Hs),N6=n(Hs,"P",{});var uVe=s(N6);Ogo=r(uVe,"This class cannot be instantiated directly using "),nle=n(uVe,"CODE",{});var Bat=s(nle);Vgo=r(Bat,"__init__()"),Bat.forEach(t),Xgo=r(uVe," (throws an error)."),uVe.forEach(t),zgo=i(Hs),He=n(Hs,"DIV",{class:!0});var ra=s(He);T(q6.$$.fragment,ra),Wgo=i(ra),sle=n(ra,"P",{});var Iat=s(sle);Qgo=r(Iat,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Iat.forEach(t),Hgo=i(ra),ka=n(ra,"P",{});var Tw=s(ka);Ugo=r(Tw,"The feature extractor class to instantiate is selected based on the "),lle=n(Tw,"CODE",{});var Nat=s(lle);Jgo=r(Nat,"model_type"),Nat.forEach(t),Ygo=r(Tw,` property of the config object
(either passed as an argument or loaded from `),ile=n(Tw,"CODE",{});var qat=s(ile);Kgo=r(qat,"pretrained_model_name_or_path"),qat.forEach(t),Zgo=r(Tw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),dle=n(Tw,"CODE",{});var jat=s(dle);eho=r(jat,"pretrained_model_name_or_path"),jat.forEach(t),oho=r(Tw,":"),Tw.forEach(t),rho=i(ra),Y=n(ra,"UL",{});var K=s(Y);Ah=n(K,"LI",{});var y6e=s(Ah);cle=n(y6e,"STRONG",{});var Dat=s(cle);tho=r(Dat,"beit"),Dat.forEach(t),aho=r(y6e," \u2014 "),YI=n(y6e,"A",{href:!0});var Gat=s(YI);nho=r(Gat,"BeitFeatureExtractor"),Gat.forEach(t),sho=r(y6e," (BEiT model)"),y6e.forEach(t),lho=i(K),Lh=n(K,"LI",{});var x6e=s(Lh);fle=n(x6e,"STRONG",{});var Oat=s(fle);iho=r(Oat,"clip"),Oat.forEach(t),dho=r(x6e," \u2014 "),KI=n(x6e,"A",{href:!0});var Vat=s(KI);cho=r(Vat,"CLIPFeatureExtractor"),Vat.forEach(t),fho=r(x6e," (CLIP model)"),x6e.forEach(t),mho=i(K),yh=n(K,"LI",{});var $6e=s(yh);mle=n($6e,"STRONG",{});var Xat=s(mle);gho=r(Xat,"convnext"),Xat.forEach(t),hho=r($6e," \u2014 "),ZI=n($6e,"A",{href:!0});var zat=s(ZI);pho=r(zat,"ConvNextFeatureExtractor"),zat.forEach(t),uho=r($6e," (ConvNeXT model)"),$6e.forEach(t),_ho=i(K),xh=n(K,"LI",{});var k6e=s(xh);gle=n(k6e,"STRONG",{});var Wat=s(gle);bho=r(Wat,"cvt"),Wat.forEach(t),vho=r(k6e," \u2014 "),eN=n(k6e,"A",{href:!0});var Qat=s(eN);Fho=r(Qat,"ConvNextFeatureExtractor"),Qat.forEach(t),Tho=r(k6e," (CvT model)"),k6e.forEach(t),Mho=i(K),$h=n(K,"LI",{});var S6e=s($h);hle=n(S6e,"STRONG",{});var Hat=s(hle);Eho=r(Hat,"data2vec-audio"),Hat.forEach(t),Cho=r(S6e," \u2014 "),oN=n(S6e,"A",{href:!0});var Uat=s(oN);who=r(Uat,"Wav2Vec2FeatureExtractor"),Uat.forEach(t),Aho=r(S6e," (Data2VecAudio model)"),S6e.forEach(t),Lho=i(K),kh=n(K,"LI",{});var R6e=s(kh);ple=n(R6e,"STRONG",{});var Jat=s(ple);yho=r(Jat,"data2vec-vision"),Jat.forEach(t),xho=r(R6e," \u2014 "),rN=n(R6e,"A",{href:!0});var Yat=s(rN);$ho=r(Yat,"BeitFeatureExtractor"),Yat.forEach(t),kho=r(R6e," (Data2VecVision model)"),R6e.forEach(t),Sho=i(K),Sh=n(K,"LI",{});var P6e=s(Sh);ule=n(P6e,"STRONG",{});var Kat=s(ule);Rho=r(Kat,"deit"),Kat.forEach(t),Pho=r(P6e," \u2014 "),tN=n(P6e,"A",{href:!0});var Zat=s(tN);Bho=r(Zat,"DeiTFeatureExtractor"),Zat.forEach(t),Iho=r(P6e," (DeiT model)"),P6e.forEach(t),Nho=i(K),Rh=n(K,"LI",{});var B6e=s(Rh);_le=n(B6e,"STRONG",{});var ent=s(_le);qho=r(ent,"detr"),ent.forEach(t),jho=r(B6e," \u2014 "),aN=n(B6e,"A",{href:!0});var ont=s(aN);Dho=r(ont,"DetrFeatureExtractor"),ont.forEach(t),Gho=r(B6e," (DETR model)"),B6e.forEach(t),Oho=i(K),Ph=n(K,"LI",{});var I6e=s(Ph);ble=n(I6e,"STRONG",{});var rnt=s(ble);Vho=r(rnt,"dpt"),rnt.forEach(t),Xho=r(I6e," \u2014 "),nN=n(I6e,"A",{href:!0});var tnt=s(nN);zho=r(tnt,"DPTFeatureExtractor"),tnt.forEach(t),Who=r(I6e," (DPT model)"),I6e.forEach(t),Qho=i(K),Bh=n(K,"LI",{});var N6e=s(Bh);vle=n(N6e,"STRONG",{});var ant=s(vle);Hho=r(ant,"flava"),ant.forEach(t),Uho=r(N6e," \u2014 "),sN=n(N6e,"A",{href:!0});var nnt=s(sN);Jho=r(nnt,"FlavaFeatureExtractor"),nnt.forEach(t),Yho=r(N6e," (FLAVA model)"),N6e.forEach(t),Kho=i(K),Ih=n(K,"LI",{});var q6e=s(Ih);Fle=n(q6e,"STRONG",{});var snt=s(Fle);Zho=r(snt,"glpn"),snt.forEach(t),epo=r(q6e," \u2014 "),lN=n(q6e,"A",{href:!0});var lnt=s(lN);opo=r(lnt,"GLPNFeatureExtractor"),lnt.forEach(t),rpo=r(q6e," (GLPN model)"),q6e.forEach(t),tpo=i(K),Nh=n(K,"LI",{});var j6e=s(Nh);Tle=n(j6e,"STRONG",{});var int=s(Tle);apo=r(int,"hubert"),int.forEach(t),npo=r(j6e," \u2014 "),iN=n(j6e,"A",{href:!0});var dnt=s(iN);spo=r(dnt,"Wav2Vec2FeatureExtractor"),dnt.forEach(t),lpo=r(j6e," (Hubert model)"),j6e.forEach(t),ipo=i(K),qh=n(K,"LI",{});var D6e=s(qh);Mle=n(D6e,"STRONG",{});var cnt=s(Mle);dpo=r(cnt,"imagegpt"),cnt.forEach(t),cpo=r(D6e," \u2014 "),dN=n(D6e,"A",{href:!0});var fnt=s(dN);fpo=r(fnt,"ImageGPTFeatureExtractor"),fnt.forEach(t),mpo=r(D6e," (ImageGPT model)"),D6e.forEach(t),gpo=i(K),jh=n(K,"LI",{});var G6e=s(jh);Ele=n(G6e,"STRONG",{});var mnt=s(Ele);hpo=r(mnt,"layoutlmv2"),mnt.forEach(t),ppo=r(G6e," \u2014 "),cN=n(G6e,"A",{href:!0});var gnt=s(cN);upo=r(gnt,"LayoutLMv2FeatureExtractor"),gnt.forEach(t),_po=r(G6e," (LayoutLMv2 model)"),G6e.forEach(t),bpo=i(K),Dh=n(K,"LI",{});var O6e=s(Dh);Cle=n(O6e,"STRONG",{});var hnt=s(Cle);vpo=r(hnt,"layoutlmv3"),hnt.forEach(t),Fpo=r(O6e," \u2014 "),fN=n(O6e,"A",{href:!0});var pnt=s(fN);Tpo=r(pnt,"LayoutLMv3FeatureExtractor"),pnt.forEach(t),Mpo=r(O6e," (LayoutLMv3 model)"),O6e.forEach(t),Epo=i(K),Gh=n(K,"LI",{});var V6e=s(Gh);wle=n(V6e,"STRONG",{});var unt=s(wle);Cpo=r(unt,"levit"),unt.forEach(t),wpo=r(V6e," \u2014 "),mN=n(V6e,"A",{href:!0});var _nt=s(mN);Apo=r(_nt,"LevitFeatureExtractor"),_nt.forEach(t),Lpo=r(V6e," (LeViT model)"),V6e.forEach(t),ypo=i(K),Oh=n(K,"LI",{});var X6e=s(Oh);Ale=n(X6e,"STRONG",{});var bnt=s(Ale);xpo=r(bnt,"maskformer"),bnt.forEach(t),$po=r(X6e," \u2014 "),gN=n(X6e,"A",{href:!0});var vnt=s(gN);kpo=r(vnt,"MaskFormerFeatureExtractor"),vnt.forEach(t),Spo=r(X6e," (MaskFormer model)"),X6e.forEach(t),Rpo=i(K),Vh=n(K,"LI",{});var z6e=s(Vh);Lle=n(z6e,"STRONG",{});var Fnt=s(Lle);Ppo=r(Fnt,"mctct"),Fnt.forEach(t),Bpo=r(z6e," \u2014 "),hN=n(z6e,"A",{href:!0});var Tnt=s(hN);Ipo=r(Tnt,"MCTCTFeatureExtractor"),Tnt.forEach(t),Npo=r(z6e," (M-CTC-T model)"),z6e.forEach(t),qpo=i(K),Xh=n(K,"LI",{});var W6e=s(Xh);yle=n(W6e,"STRONG",{});var Mnt=s(yle);jpo=r(Mnt,"perceiver"),Mnt.forEach(t),Dpo=r(W6e," \u2014 "),pN=n(W6e,"A",{href:!0});var Ent=s(pN);Gpo=r(Ent,"PerceiverFeatureExtractor"),Ent.forEach(t),Opo=r(W6e," (Perceiver model)"),W6e.forEach(t),Vpo=i(K),zh=n(K,"LI",{});var Q6e=s(zh);xle=n(Q6e,"STRONG",{});var Cnt=s(xle);Xpo=r(Cnt,"poolformer"),Cnt.forEach(t),zpo=r(Q6e," \u2014 "),uN=n(Q6e,"A",{href:!0});var wnt=s(uN);Wpo=r(wnt,"PoolFormerFeatureExtractor"),wnt.forEach(t),Qpo=r(Q6e," (PoolFormer model)"),Q6e.forEach(t),Hpo=i(K),Wh=n(K,"LI",{});var H6e=s(Wh);$le=n(H6e,"STRONG",{});var Ant=s($le);Upo=r(Ant,"regnet"),Ant.forEach(t),Jpo=r(H6e," \u2014 "),_N=n(H6e,"A",{href:!0});var Lnt=s(_N);Ypo=r(Lnt,"ConvNextFeatureExtractor"),Lnt.forEach(t),Kpo=r(H6e," (RegNet model)"),H6e.forEach(t),Zpo=i(K),Qh=n(K,"LI",{});var U6e=s(Qh);kle=n(U6e,"STRONG",{});var ynt=s(kle);euo=r(ynt,"resnet"),ynt.forEach(t),ouo=r(U6e," \u2014 "),bN=n(U6e,"A",{href:!0});var xnt=s(bN);ruo=r(xnt,"ConvNextFeatureExtractor"),xnt.forEach(t),tuo=r(U6e," (ResNet model)"),U6e.forEach(t),auo=i(K),Hh=n(K,"LI",{});var J6e=s(Hh);Sle=n(J6e,"STRONG",{});var $nt=s(Sle);nuo=r($nt,"segformer"),$nt.forEach(t),suo=r(J6e," \u2014 "),vN=n(J6e,"A",{href:!0});var knt=s(vN);luo=r(knt,"SegformerFeatureExtractor"),knt.forEach(t),iuo=r(J6e," (SegFormer model)"),J6e.forEach(t),duo=i(K),Uh=n(K,"LI",{});var Y6e=s(Uh);Rle=n(Y6e,"STRONG",{});var Snt=s(Rle);cuo=r(Snt,"speech_to_text"),Snt.forEach(t),fuo=r(Y6e," \u2014 "),FN=n(Y6e,"A",{href:!0});var Rnt=s(FN);muo=r(Rnt,"Speech2TextFeatureExtractor"),Rnt.forEach(t),guo=r(Y6e," (Speech2Text model)"),Y6e.forEach(t),huo=i(K),Jh=n(K,"LI",{});var K6e=s(Jh);Ple=n(K6e,"STRONG",{});var Pnt=s(Ple);puo=r(Pnt,"swin"),Pnt.forEach(t),uuo=r(K6e," \u2014 "),TN=n(K6e,"A",{href:!0});var Bnt=s(TN);_uo=r(Bnt,"ViTFeatureExtractor"),Bnt.forEach(t),buo=r(K6e," (Swin Transformer model)"),K6e.forEach(t),vuo=i(K),Yh=n(K,"LI",{});var Z6e=s(Yh);Ble=n(Z6e,"STRONG",{});var Int=s(Ble);Fuo=r(Int,"van"),Int.forEach(t),Tuo=r(Z6e," \u2014 "),MN=n(Z6e,"A",{href:!0});var Nnt=s(MN);Muo=r(Nnt,"ConvNextFeatureExtractor"),Nnt.forEach(t),Euo=r(Z6e," (VAN model)"),Z6e.forEach(t),Cuo=i(K),Kh=n(K,"LI",{});var eLe=s(Kh);Ile=n(eLe,"STRONG",{});var qnt=s(Ile);wuo=r(qnt,"vilt"),qnt.forEach(t),Auo=r(eLe," \u2014 "),EN=n(eLe,"A",{href:!0});var jnt=s(EN);Luo=r(jnt,"ViltFeatureExtractor"),jnt.forEach(t),yuo=r(eLe," (ViLT model)"),eLe.forEach(t),xuo=i(K),Zh=n(K,"LI",{});var oLe=s(Zh);Nle=n(oLe,"STRONG",{});var Dnt=s(Nle);$uo=r(Dnt,"vit"),Dnt.forEach(t),kuo=r(oLe," \u2014 "),CN=n(oLe,"A",{href:!0});var Gnt=s(CN);Suo=r(Gnt,"ViTFeatureExtractor"),Gnt.forEach(t),Ruo=r(oLe," (ViT model)"),oLe.forEach(t),Puo=i(K),ep=n(K,"LI",{});var rLe=s(ep);qle=n(rLe,"STRONG",{});var Ont=s(qle);Buo=r(Ont,"vit_mae"),Ont.forEach(t),Iuo=r(rLe," \u2014 "),wN=n(rLe,"A",{href:!0});var Vnt=s(wN);Nuo=r(Vnt,"ViTFeatureExtractor"),Vnt.forEach(t),quo=r(rLe," (ViTMAE model)"),rLe.forEach(t),juo=i(K),op=n(K,"LI",{});var tLe=s(op);jle=n(tLe,"STRONG",{});var Xnt=s(jle);Duo=r(Xnt,"wav2vec2"),Xnt.forEach(t),Guo=r(tLe," \u2014 "),AN=n(tLe,"A",{href:!0});var znt=s(AN);Ouo=r(znt,"Wav2Vec2FeatureExtractor"),znt.forEach(t),Vuo=r(tLe," (Wav2Vec2 model)"),tLe.forEach(t),Xuo=i(K),rp=n(K,"LI",{});var aLe=s(rp);Dle=n(aLe,"STRONG",{});var Wnt=s(Dle);zuo=r(Wnt,"wav2vec2-conformer"),Wnt.forEach(t),Wuo=r(aLe," \u2014 "),LN=n(aLe,"A",{href:!0});var Qnt=s(LN);Quo=r(Qnt,"Wav2Vec2FeatureExtractor"),Qnt.forEach(t),Huo=r(aLe," (Wav2Vec2-Conformer model)"),aLe.forEach(t),Uuo=i(K),tp=n(K,"LI",{});var nLe=s(tp);Gle=n(nLe,"STRONG",{});var Hnt=s(Gle);Juo=r(Hnt,"yolos"),Hnt.forEach(t),Yuo=r(nLe," \u2014 "),yN=n(nLe,"A",{href:!0});var Unt=s(yN);Kuo=r(Unt,"YolosFeatureExtractor"),Unt.forEach(t),Zuo=r(nLe," (YOLOS model)"),nLe.forEach(t),K.forEach(t),e_o=i(ra),T(ap.$$.fragment,ra),o_o=i(ra),T(np.$$.fragment,ra),ra.forEach(t),r_o=i(Hs),sp=n(Hs,"DIV",{class:!0});var _Ve=s(sp);T(j6.$$.fragment,_Ve),t_o=i(_Ve),Ole=n(_Ve,"P",{});var Jnt=s(Ole);a_o=r(Jnt,"Register a new feature extractor for this class."),Jnt.forEach(t),_Ve.forEach(t),Hs.forEach(t),hGe=i(f),Ri=n(f,"H2",{class:!0});var bVe=s(Ri);lp=n(bVe,"A",{id:!0,class:!0,href:!0});var Ynt=s(lp);Vle=n(Ynt,"SPAN",{});var Knt=s(Vle);T(D6.$$.fragment,Knt),Knt.forEach(t),Ynt.forEach(t),n_o=i(bVe),Xle=n(bVe,"SPAN",{});var Znt=s(Xle);s_o=r(Znt,"AutoProcessor"),Znt.forEach(t),bVe.forEach(t),pGe=i(f),yo=n(f,"DIV",{class:!0});var Us=s(yo);T(G6.$$.fragment,Us),l_o=i(Us),O6=n(Us,"P",{});var vVe=s(O6);i_o=r(vVe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),xN=n(vVe,"A",{href:!0});var est=s(xN);d_o=r(est,"AutoProcessor.from_pretrained()"),est.forEach(t),c_o=r(vVe," class method."),vVe.forEach(t),f_o=i(Us),V6=n(Us,"P",{});var FVe=s(V6);m_o=r(FVe,"This class cannot be instantiated directly using "),zle=n(FVe,"CODE",{});var ost=s(zle);g_o=r(ost,"__init__()"),ost.forEach(t),h_o=r(FVe," (throws an error)."),FVe.forEach(t),p_o=i(Us),Ue=n(Us,"DIV",{class:!0});var ta=s(Ue);T(X6.$$.fragment,ta),u_o=i(ta),Wle=n(ta,"P",{});var rst=s(Wle);__o=r(rst,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),rst.forEach(t),b_o=i(ta),Pi=n(ta,"P",{});var eoe=s(Pi);v_o=r(eoe,"The processor class to instantiate is selected based on the "),Qle=n(eoe,"CODE",{});var tst=s(Qle);F_o=r(tst,"model_type"),tst.forEach(t),T_o=r(eoe,` property of the config object (either
passed as an argument or loaded from `),Hle=n(eoe,"CODE",{});var ast=s(Hle);M_o=r(ast,"pretrained_model_name_or_path"),ast.forEach(t),E_o=r(eoe," if possible):"),eoe.forEach(t),C_o=i(ta),he=n(ta,"UL",{});var _e=s(he);ip=n(_e,"LI",{});var sLe=s(ip);Ule=n(sLe,"STRONG",{});var nst=s(Ule);w_o=r(nst,"clip"),nst.forEach(t),A_o=r(sLe," \u2014 "),$N=n(sLe,"A",{href:!0});var sst=s($N);L_o=r(sst,"CLIPProcessor"),sst.forEach(t),y_o=r(sLe," (CLIP model)"),sLe.forEach(t),x_o=i(_e),dp=n(_e,"LI",{});var lLe=s(dp);Jle=n(lLe,"STRONG",{});var lst=s(Jle);$_o=r(lst,"flava"),lst.forEach(t),k_o=r(lLe," \u2014 "),Yle=n(lLe,"CODE",{});var ist=s(Yle);S_o=r(ist,"FLAVAProcessor"),ist.forEach(t),R_o=r(lLe," (FLAVA model)"),lLe.forEach(t),P_o=i(_e),cp=n(_e,"LI",{});var iLe=s(cp);Kle=n(iLe,"STRONG",{});var dst=s(Kle);B_o=r(dst,"layoutlmv2"),dst.forEach(t),I_o=r(iLe," \u2014 "),kN=n(iLe,"A",{href:!0});var cst=s(kN);N_o=r(cst,"LayoutLMv2Processor"),cst.forEach(t),q_o=r(iLe," (LayoutLMv2 model)"),iLe.forEach(t),j_o=i(_e),fp=n(_e,"LI",{});var dLe=s(fp);Zle=n(dLe,"STRONG",{});var fst=s(Zle);D_o=r(fst,"layoutlmv3"),fst.forEach(t),G_o=r(dLe," \u2014 "),SN=n(dLe,"A",{href:!0});var mst=s(SN);O_o=r(mst,"LayoutLMv3Processor"),mst.forEach(t),V_o=r(dLe," (LayoutLMv3 model)"),dLe.forEach(t),X_o=i(_e),mp=n(_e,"LI",{});var cLe=s(mp);eie=n(cLe,"STRONG",{});var gst=s(eie);z_o=r(gst,"layoutxlm"),gst.forEach(t),W_o=r(cLe," \u2014 "),RN=n(cLe,"A",{href:!0});var hst=s(RN);Q_o=r(hst,"LayoutXLMProcessor"),hst.forEach(t),H_o=r(cLe," (LayoutXLM model)"),cLe.forEach(t),U_o=i(_e),gp=n(_e,"LI",{});var fLe=s(gp);oie=n(fLe,"STRONG",{});var pst=s(oie);J_o=r(pst,"sew"),pst.forEach(t),Y_o=r(fLe," \u2014 "),PN=n(fLe,"A",{href:!0});var ust=s(PN);K_o=r(ust,"Wav2Vec2Processor"),ust.forEach(t),Z_o=r(fLe," (SEW model)"),fLe.forEach(t),e1o=i(_e),hp=n(_e,"LI",{});var mLe=s(hp);rie=n(mLe,"STRONG",{});var _st=s(rie);o1o=r(_st,"sew-d"),_st.forEach(t),r1o=r(mLe," \u2014 "),BN=n(mLe,"A",{href:!0});var bst=s(BN);t1o=r(bst,"Wav2Vec2Processor"),bst.forEach(t),a1o=r(mLe," (SEW-D model)"),mLe.forEach(t),n1o=i(_e),pp=n(_e,"LI",{});var gLe=s(pp);tie=n(gLe,"STRONG",{});var vst=s(tie);s1o=r(vst,"speech_to_text"),vst.forEach(t),l1o=r(gLe," \u2014 "),IN=n(gLe,"A",{href:!0});var Fst=s(IN);i1o=r(Fst,"Speech2TextProcessor"),Fst.forEach(t),d1o=r(gLe," (Speech2Text model)"),gLe.forEach(t),c1o=i(_e),up=n(_e,"LI",{});var hLe=s(up);aie=n(hLe,"STRONG",{});var Tst=s(aie);f1o=r(Tst,"speech_to_text_2"),Tst.forEach(t),m1o=r(hLe," \u2014 "),NN=n(hLe,"A",{href:!0});var Mst=s(NN);g1o=r(Mst,"Speech2Text2Processor"),Mst.forEach(t),h1o=r(hLe," (Speech2Text2 model)"),hLe.forEach(t),p1o=i(_e),_p=n(_e,"LI",{});var pLe=s(_p);nie=n(pLe,"STRONG",{});var Est=s(nie);u1o=r(Est,"trocr"),Est.forEach(t),_1o=r(pLe," \u2014 "),qN=n(pLe,"A",{href:!0});var Cst=s(qN);b1o=r(Cst,"TrOCRProcessor"),Cst.forEach(t),v1o=r(pLe," (TrOCR model)"),pLe.forEach(t),F1o=i(_e),bp=n(_e,"LI",{});var uLe=s(bp);sie=n(uLe,"STRONG",{});var wst=s(sie);T1o=r(wst,"unispeech"),wst.forEach(t),M1o=r(uLe," \u2014 "),jN=n(uLe,"A",{href:!0});var Ast=s(jN);E1o=r(Ast,"Wav2Vec2Processor"),Ast.forEach(t),C1o=r(uLe," (UniSpeech model)"),uLe.forEach(t),w1o=i(_e),vp=n(_e,"LI",{});var _Le=s(vp);lie=n(_Le,"STRONG",{});var Lst=s(lie);A1o=r(Lst,"unispeech-sat"),Lst.forEach(t),L1o=r(_Le," \u2014 "),DN=n(_Le,"A",{href:!0});var yst=s(DN);y1o=r(yst,"Wav2Vec2Processor"),yst.forEach(t),x1o=r(_Le," (UniSpeechSat model)"),_Le.forEach(t),$1o=i(_e),Fp=n(_e,"LI",{});var bLe=s(Fp);iie=n(bLe,"STRONG",{});var xst=s(iie);k1o=r(xst,"vilt"),xst.forEach(t),S1o=r(bLe," \u2014 "),GN=n(bLe,"A",{href:!0});var $st=s(GN);R1o=r($st,"ViltProcessor"),$st.forEach(t),P1o=r(bLe," (ViLT model)"),bLe.forEach(t),B1o=i(_e),Tp=n(_e,"LI",{});var vLe=s(Tp);die=n(vLe,"STRONG",{});var kst=s(die);I1o=r(kst,"vision-text-dual-encoder"),kst.forEach(t),N1o=r(vLe," \u2014 "),ON=n(vLe,"A",{href:!0});var Sst=s(ON);q1o=r(Sst,"VisionTextDualEncoderProcessor"),Sst.forEach(t),j1o=r(vLe," (VisionTextDualEncoder model)"),vLe.forEach(t),D1o=i(_e),Mp=n(_e,"LI",{});var FLe=s(Mp);cie=n(FLe,"STRONG",{});var Rst=s(cie);G1o=r(Rst,"wav2vec2"),Rst.forEach(t),O1o=r(FLe," \u2014 "),VN=n(FLe,"A",{href:!0});var Pst=s(VN);V1o=r(Pst,"Wav2Vec2Processor"),Pst.forEach(t),X1o=r(FLe," (Wav2Vec2 model)"),FLe.forEach(t),z1o=i(_e),Ep=n(_e,"LI",{});var TLe=s(Ep);fie=n(TLe,"STRONG",{});var Bst=s(fie);W1o=r(Bst,"wav2vec2-conformer"),Bst.forEach(t),Q1o=r(TLe," \u2014 "),XN=n(TLe,"A",{href:!0});var Ist=s(XN);H1o=r(Ist,"Wav2Vec2Processor"),Ist.forEach(t),U1o=r(TLe," (Wav2Vec2-Conformer model)"),TLe.forEach(t),J1o=i(_e),Cp=n(_e,"LI",{});var MLe=s(Cp);mie=n(MLe,"STRONG",{});var Nst=s(mie);Y1o=r(Nst,"wavlm"),Nst.forEach(t),K1o=r(MLe," \u2014 "),zN=n(MLe,"A",{href:!0});var qst=s(zN);Z1o=r(qst,"Wav2Vec2Processor"),qst.forEach(t),e2o=r(MLe," (WavLM model)"),MLe.forEach(t),_e.forEach(t),o2o=i(ta),T(wp.$$.fragment,ta),r2o=i(ta),T(Ap.$$.fragment,ta),ta.forEach(t),t2o=i(Us),Lp=n(Us,"DIV",{class:!0});var TVe=s(Lp);T(z6.$$.fragment,TVe),a2o=i(TVe),gie=n(TVe,"P",{});var jst=s(gie);n2o=r(jst,"Register a new processor for this class."),jst.forEach(t),TVe.forEach(t),Us.forEach(t),uGe=i(f),Bi=n(f,"H2",{class:!0});var MVe=s(Bi);yp=n(MVe,"A",{id:!0,class:!0,href:!0});var Dst=s(yp);hie=n(Dst,"SPAN",{});var Gst=s(hie);T(W6.$$.fragment,Gst),Gst.forEach(t),Dst.forEach(t),s2o=i(MVe),pie=n(MVe,"SPAN",{});var Ost=s(pie);l2o=r(Ost,"AutoModel"),Ost.forEach(t),MVe.forEach(t),_Ge=i(f),xo=n(f,"DIV",{class:!0});var Js=s(xo);T(Q6.$$.fragment,Js),i2o=i(Js),Ii=n(Js,"P",{});var ooe=s(Ii);d2o=r(ooe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),WN=n(ooe,"A",{href:!0});var Vst=s(WN);c2o=r(Vst,"from_pretrained()"),Vst.forEach(t),f2o=r(ooe," class method or the "),QN=n(ooe,"A",{href:!0});var Xst=s(QN);m2o=r(Xst,"from_config()"),Xst.forEach(t),g2o=r(ooe,` class
method.`),ooe.forEach(t),h2o=i(Js),H6=n(Js,"P",{});var EVe=s(H6);p2o=r(EVe,"This class cannot be instantiated directly using "),uie=n(EVe,"CODE",{});var zst=s(uie);u2o=r(zst,"__init__()"),zst.forEach(t),_2o=r(EVe," (throws an error)."),EVe.forEach(t),b2o=i(Js),nt=n(Js,"DIV",{class:!0});var Mw=s(nt);T(U6.$$.fragment,Mw),v2o=i(Mw),_ie=n(Mw,"P",{});var Wst=s(_ie);F2o=r(Wst,"Instantiates one of the base model classes of the library from a configuration."),Wst.forEach(t),T2o=i(Mw),Ni=n(Mw,"P",{});var roe=s(Ni);M2o=r(roe,`Note:
Loading a model from its configuration file does `),bie=n(roe,"STRONG",{});var Qst=s(bie);E2o=r(Qst,"not"),Qst.forEach(t),C2o=r(roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),HN=n(roe,"A",{href:!0});var Hst=s(HN);w2o=r(Hst,"from_pretrained()"),Hst.forEach(t),A2o=r(roe," to load the model weights."),roe.forEach(t),L2o=i(Mw),T(xp.$$.fragment,Mw),Mw.forEach(t),y2o=i(Js),Je=n(Js,"DIV",{class:!0});var aa=s(Je);T(J6.$$.fragment,aa),x2o=i(aa),vie=n(aa,"P",{});var Ust=s(vie);$2o=r(Ust,"Instantiate one of the base model classes of the library from a pretrained model."),Ust.forEach(t),k2o=i(aa),Sa=n(aa,"P",{});var Ew=s(Sa);S2o=r(Ew,"The model class to instantiate is selected based on the "),Fie=n(Ew,"CODE",{});var Jst=s(Fie);R2o=r(Jst,"model_type"),Jst.forEach(t),P2o=r(Ew,` property of the config object (either
passed as an argument or loaded from `),Tie=n(Ew,"CODE",{});var Yst=s(Tie);B2o=r(Yst,"pretrained_model_name_or_path"),Yst.forEach(t),I2o=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=n(Ew,"CODE",{});var Kst=s(Mie);N2o=r(Kst,"pretrained_model_name_or_path"),Kst.forEach(t),q2o=r(Ew,":"),Ew.forEach(t),j2o=i(aa),y=n(aa,"UL",{});var $=s(y);$p=n($,"LI",{});var ELe=s($p);Eie=n(ELe,"STRONG",{});var Zst=s(Eie);D2o=r(Zst,"albert"),Zst.forEach(t),G2o=r(ELe," \u2014 "),UN=n(ELe,"A",{href:!0});var elt=s(UN);O2o=r(elt,"AlbertModel"),elt.forEach(t),V2o=r(ELe," (ALBERT model)"),ELe.forEach(t),X2o=i($),kp=n($,"LI",{});var CLe=s(kp);Cie=n(CLe,"STRONG",{});var olt=s(Cie);z2o=r(olt,"bart"),olt.forEach(t),W2o=r(CLe," \u2014 "),JN=n(CLe,"A",{href:!0});var rlt=s(JN);Q2o=r(rlt,"BartModel"),rlt.forEach(t),H2o=r(CLe," (BART model)"),CLe.forEach(t),U2o=i($),Sp=n($,"LI",{});var wLe=s(Sp);wie=n(wLe,"STRONG",{});var tlt=s(wie);J2o=r(tlt,"beit"),tlt.forEach(t),Y2o=r(wLe," \u2014 "),YN=n(wLe,"A",{href:!0});var alt=s(YN);K2o=r(alt,"BeitModel"),alt.forEach(t),Z2o=r(wLe," (BEiT model)"),wLe.forEach(t),ebo=i($),Rp=n($,"LI",{});var ALe=s(Rp);Aie=n(ALe,"STRONG",{});var nlt=s(Aie);obo=r(nlt,"bert"),nlt.forEach(t),rbo=r(ALe," \u2014 "),KN=n(ALe,"A",{href:!0});var slt=s(KN);tbo=r(slt,"BertModel"),slt.forEach(t),abo=r(ALe," (BERT model)"),ALe.forEach(t),nbo=i($),Pp=n($,"LI",{});var LLe=s(Pp);Lie=n(LLe,"STRONG",{});var llt=s(Lie);sbo=r(llt,"bert-generation"),llt.forEach(t),lbo=r(LLe," \u2014 "),ZN=n(LLe,"A",{href:!0});var ilt=s(ZN);ibo=r(ilt,"BertGenerationEncoder"),ilt.forEach(t),dbo=r(LLe," (Bert Generation model)"),LLe.forEach(t),cbo=i($),Bp=n($,"LI",{});var yLe=s(Bp);yie=n(yLe,"STRONG",{});var dlt=s(yie);fbo=r(dlt,"big_bird"),dlt.forEach(t),mbo=r(yLe," \u2014 "),eq=n(yLe,"A",{href:!0});var clt=s(eq);gbo=r(clt,"BigBirdModel"),clt.forEach(t),hbo=r(yLe," (BigBird model)"),yLe.forEach(t),pbo=i($),Ip=n($,"LI",{});var xLe=s(Ip);xie=n(xLe,"STRONG",{});var flt=s(xie);ubo=r(flt,"bigbird_pegasus"),flt.forEach(t),_bo=r(xLe," \u2014 "),oq=n(xLe,"A",{href:!0});var mlt=s(oq);bbo=r(mlt,"BigBirdPegasusModel"),mlt.forEach(t),vbo=r(xLe," (BigBird-Pegasus model)"),xLe.forEach(t),Fbo=i($),Np=n($,"LI",{});var $Le=s(Np);$ie=n($Le,"STRONG",{});var glt=s($ie);Tbo=r(glt,"blenderbot"),glt.forEach(t),Mbo=r($Le," \u2014 "),rq=n($Le,"A",{href:!0});var hlt=s(rq);Ebo=r(hlt,"BlenderbotModel"),hlt.forEach(t),Cbo=r($Le," (Blenderbot model)"),$Le.forEach(t),wbo=i($),qp=n($,"LI",{});var kLe=s(qp);kie=n(kLe,"STRONG",{});var plt=s(kie);Abo=r(plt,"blenderbot-small"),plt.forEach(t),Lbo=r(kLe," \u2014 "),tq=n(kLe,"A",{href:!0});var ult=s(tq);ybo=r(ult,"BlenderbotSmallModel"),ult.forEach(t),xbo=r(kLe," (BlenderbotSmall model)"),kLe.forEach(t),$bo=i($),jp=n($,"LI",{});var SLe=s(jp);Sie=n(SLe,"STRONG",{});var _lt=s(Sie);kbo=r(_lt,"bloom"),_lt.forEach(t),Sbo=r(SLe," \u2014 "),aq=n(SLe,"A",{href:!0});var blt=s(aq);Rbo=r(blt,"BloomModel"),blt.forEach(t),Pbo=r(SLe," (BLOOM model)"),SLe.forEach(t),Bbo=i($),Dp=n($,"LI",{});var RLe=s(Dp);Rie=n(RLe,"STRONG",{});var vlt=s(Rie);Ibo=r(vlt,"camembert"),vlt.forEach(t),Nbo=r(RLe," \u2014 "),nq=n(RLe,"A",{href:!0});var Flt=s(nq);qbo=r(Flt,"CamembertModel"),Flt.forEach(t),jbo=r(RLe," (CamemBERT model)"),RLe.forEach(t),Dbo=i($),Gp=n($,"LI",{});var PLe=s(Gp);Pie=n(PLe,"STRONG",{});var Tlt=s(Pie);Gbo=r(Tlt,"canine"),Tlt.forEach(t),Obo=r(PLe," \u2014 "),sq=n(PLe,"A",{href:!0});var Mlt=s(sq);Vbo=r(Mlt,"CanineModel"),Mlt.forEach(t),Xbo=r(PLe," (CANINE model)"),PLe.forEach(t),zbo=i($),Op=n($,"LI",{});var BLe=s(Op);Bie=n(BLe,"STRONG",{});var Elt=s(Bie);Wbo=r(Elt,"clip"),Elt.forEach(t),Qbo=r(BLe," \u2014 "),lq=n(BLe,"A",{href:!0});var Clt=s(lq);Hbo=r(Clt,"CLIPModel"),Clt.forEach(t),Ubo=r(BLe," (CLIP model)"),BLe.forEach(t),Jbo=i($),Vp=n($,"LI",{});var ILe=s(Vp);Iie=n(ILe,"STRONG",{});var wlt=s(Iie);Ybo=r(wlt,"convbert"),wlt.forEach(t),Kbo=r(ILe," \u2014 "),iq=n(ILe,"A",{href:!0});var Alt=s(iq);Zbo=r(Alt,"ConvBertModel"),Alt.forEach(t),evo=r(ILe," (ConvBERT model)"),ILe.forEach(t),ovo=i($),Xp=n($,"LI",{});var NLe=s(Xp);Nie=n(NLe,"STRONG",{});var Llt=s(Nie);rvo=r(Llt,"convnext"),Llt.forEach(t),tvo=r(NLe," \u2014 "),dq=n(NLe,"A",{href:!0});var ylt=s(dq);avo=r(ylt,"ConvNextModel"),ylt.forEach(t),nvo=r(NLe," (ConvNeXT model)"),NLe.forEach(t),svo=i($),zp=n($,"LI",{});var qLe=s(zp);qie=n(qLe,"STRONG",{});var xlt=s(qie);lvo=r(xlt,"ctrl"),xlt.forEach(t),ivo=r(qLe," \u2014 "),cq=n(qLe,"A",{href:!0});var $lt=s(cq);dvo=r($lt,"CTRLModel"),$lt.forEach(t),cvo=r(qLe," (CTRL model)"),qLe.forEach(t),fvo=i($),Wp=n($,"LI",{});var jLe=s(Wp);jie=n(jLe,"STRONG",{});var klt=s(jie);mvo=r(klt,"cvt"),klt.forEach(t),gvo=r(jLe," \u2014 "),fq=n(jLe,"A",{href:!0});var Slt=s(fq);hvo=r(Slt,"CvtModel"),Slt.forEach(t),pvo=r(jLe," (CvT model)"),jLe.forEach(t),uvo=i($),Qp=n($,"LI",{});var DLe=s(Qp);Die=n(DLe,"STRONG",{});var Rlt=s(Die);_vo=r(Rlt,"data2vec-audio"),Rlt.forEach(t),bvo=r(DLe," \u2014 "),mq=n(DLe,"A",{href:!0});var Plt=s(mq);vvo=r(Plt,"Data2VecAudioModel"),Plt.forEach(t),Fvo=r(DLe," (Data2VecAudio model)"),DLe.forEach(t),Tvo=i($),Hp=n($,"LI",{});var GLe=s(Hp);Gie=n(GLe,"STRONG",{});var Blt=s(Gie);Mvo=r(Blt,"data2vec-text"),Blt.forEach(t),Evo=r(GLe," \u2014 "),gq=n(GLe,"A",{href:!0});var Ilt=s(gq);Cvo=r(Ilt,"Data2VecTextModel"),Ilt.forEach(t),wvo=r(GLe," (Data2VecText model)"),GLe.forEach(t),Avo=i($),Up=n($,"LI",{});var OLe=s(Up);Oie=n(OLe,"STRONG",{});var Nlt=s(Oie);Lvo=r(Nlt,"data2vec-vision"),Nlt.forEach(t),yvo=r(OLe," \u2014 "),hq=n(OLe,"A",{href:!0});var qlt=s(hq);xvo=r(qlt,"Data2VecVisionModel"),qlt.forEach(t),$vo=r(OLe," (Data2VecVision model)"),OLe.forEach(t),kvo=i($),Jp=n($,"LI",{});var VLe=s(Jp);Vie=n(VLe,"STRONG",{});var jlt=s(Vie);Svo=r(jlt,"deberta"),jlt.forEach(t),Rvo=r(VLe," \u2014 "),pq=n(VLe,"A",{href:!0});var Dlt=s(pq);Pvo=r(Dlt,"DebertaModel"),Dlt.forEach(t),Bvo=r(VLe," (DeBERTa model)"),VLe.forEach(t),Ivo=i($),Yp=n($,"LI",{});var XLe=s(Yp);Xie=n(XLe,"STRONG",{});var Glt=s(Xie);Nvo=r(Glt,"deberta-v2"),Glt.forEach(t),qvo=r(XLe," \u2014 "),uq=n(XLe,"A",{href:!0});var Olt=s(uq);jvo=r(Olt,"DebertaV2Model"),Olt.forEach(t),Dvo=r(XLe," (DeBERTa-v2 model)"),XLe.forEach(t),Gvo=i($),Kp=n($,"LI",{});var zLe=s(Kp);zie=n(zLe,"STRONG",{});var Vlt=s(zie);Ovo=r(Vlt,"decision_transformer"),Vlt.forEach(t),Vvo=r(zLe," \u2014 "),_q=n(zLe,"A",{href:!0});var Xlt=s(_q);Xvo=r(Xlt,"DecisionTransformerModel"),Xlt.forEach(t),zvo=r(zLe," (Decision Transformer model)"),zLe.forEach(t),Wvo=i($),Zp=n($,"LI",{});var WLe=s(Zp);Wie=n(WLe,"STRONG",{});var zlt=s(Wie);Qvo=r(zlt,"deit"),zlt.forEach(t),Hvo=r(WLe," \u2014 "),bq=n(WLe,"A",{href:!0});var Wlt=s(bq);Uvo=r(Wlt,"DeiTModel"),Wlt.forEach(t),Jvo=r(WLe," (DeiT model)"),WLe.forEach(t),Yvo=i($),eu=n($,"LI",{});var QLe=s(eu);Qie=n(QLe,"STRONG",{});var Qlt=s(Qie);Kvo=r(Qlt,"detr"),Qlt.forEach(t),Zvo=r(QLe," \u2014 "),vq=n(QLe,"A",{href:!0});var Hlt=s(vq);e0o=r(Hlt,"DetrModel"),Hlt.forEach(t),o0o=r(QLe," (DETR model)"),QLe.forEach(t),r0o=i($),ou=n($,"LI",{});var HLe=s(ou);Hie=n(HLe,"STRONG",{});var Ult=s(Hie);t0o=r(Ult,"distilbert"),Ult.forEach(t),a0o=r(HLe," \u2014 "),Fq=n(HLe,"A",{href:!0});var Jlt=s(Fq);n0o=r(Jlt,"DistilBertModel"),Jlt.forEach(t),s0o=r(HLe," (DistilBERT model)"),HLe.forEach(t),l0o=i($),ru=n($,"LI",{});var ULe=s(ru);Uie=n(ULe,"STRONG",{});var Ylt=s(Uie);i0o=r(Ylt,"dpr"),Ylt.forEach(t),d0o=r(ULe," \u2014 "),Tq=n(ULe,"A",{href:!0});var Klt=s(Tq);c0o=r(Klt,"DPRQuestionEncoder"),Klt.forEach(t),f0o=r(ULe," (DPR model)"),ULe.forEach(t),m0o=i($),tu=n($,"LI",{});var JLe=s(tu);Jie=n(JLe,"STRONG",{});var Zlt=s(Jie);g0o=r(Zlt,"dpt"),Zlt.forEach(t),h0o=r(JLe," \u2014 "),Mq=n(JLe,"A",{href:!0});var eit=s(Mq);p0o=r(eit,"DPTModel"),eit.forEach(t),u0o=r(JLe," (DPT model)"),JLe.forEach(t),_0o=i($),au=n($,"LI",{});var YLe=s(au);Yie=n(YLe,"STRONG",{});var oit=s(Yie);b0o=r(oit,"electra"),oit.forEach(t),v0o=r(YLe," \u2014 "),Eq=n(YLe,"A",{href:!0});var rit=s(Eq);F0o=r(rit,"ElectraModel"),rit.forEach(t),T0o=r(YLe," (ELECTRA model)"),YLe.forEach(t),M0o=i($),nu=n($,"LI",{});var KLe=s(nu);Kie=n(KLe,"STRONG",{});var tit=s(Kie);E0o=r(tit,"flaubert"),tit.forEach(t),C0o=r(KLe," \u2014 "),Cq=n(KLe,"A",{href:!0});var ait=s(Cq);w0o=r(ait,"FlaubertModel"),ait.forEach(t),A0o=r(KLe," (FlauBERT model)"),KLe.forEach(t),L0o=i($),su=n($,"LI",{});var ZLe=s(su);Zie=n(ZLe,"STRONG",{});var nit=s(Zie);y0o=r(nit,"flava"),nit.forEach(t),x0o=r(ZLe," \u2014 "),wq=n(ZLe,"A",{href:!0});var sit=s(wq);$0o=r(sit,"FlavaModel"),sit.forEach(t),k0o=r(ZLe," (FLAVA model)"),ZLe.forEach(t),S0o=i($),lu=n($,"LI",{});var eye=s(lu);ede=n(eye,"STRONG",{});var lit=s(ede);R0o=r(lit,"fnet"),lit.forEach(t),P0o=r(eye," \u2014 "),Aq=n(eye,"A",{href:!0});var iit=s(Aq);B0o=r(iit,"FNetModel"),iit.forEach(t),I0o=r(eye," (FNet model)"),eye.forEach(t),N0o=i($),iu=n($,"LI",{});var oye=s(iu);ode=n(oye,"STRONG",{});var dit=s(ode);q0o=r(dit,"fsmt"),dit.forEach(t),j0o=r(oye," \u2014 "),Lq=n(oye,"A",{href:!0});var cit=s(Lq);D0o=r(cit,"FSMTModel"),cit.forEach(t),G0o=r(oye," (FairSeq Machine-Translation model)"),oye.forEach(t),O0o=i($),Os=n($,"LI",{});var Vk=s(Os);rde=n(Vk,"STRONG",{});var fit=s(rde);V0o=r(fit,"funnel"),fit.forEach(t),X0o=r(Vk," \u2014 "),yq=n(Vk,"A",{href:!0});var mit=s(yq);z0o=r(mit,"FunnelModel"),mit.forEach(t),W0o=r(Vk," or "),xq=n(Vk,"A",{href:!0});var git=s(xq);Q0o=r(git,"FunnelBaseModel"),git.forEach(t),H0o=r(Vk," (Funnel Transformer model)"),Vk.forEach(t),U0o=i($),du=n($,"LI",{});var rye=s(du);tde=n(rye,"STRONG",{});var hit=s(tde);J0o=r(hit,"glpn"),hit.forEach(t),Y0o=r(rye," \u2014 "),$q=n(rye,"A",{href:!0});var pit=s($q);K0o=r(pit,"GLPNModel"),pit.forEach(t),Z0o=r(rye," (GLPN model)"),rye.forEach(t),eFo=i($),cu=n($,"LI",{});var tye=s(cu);ade=n(tye,"STRONG",{});var uit=s(ade);oFo=r(uit,"gpt2"),uit.forEach(t),rFo=r(tye," \u2014 "),kq=n(tye,"A",{href:!0});var _it=s(kq);tFo=r(_it,"GPT2Model"),_it.forEach(t),aFo=r(tye," (OpenAI GPT-2 model)"),tye.forEach(t),nFo=i($),fu=n($,"LI",{});var aye=s(fu);nde=n(aye,"STRONG",{});var bit=s(nde);sFo=r(bit,"gpt_neo"),bit.forEach(t),lFo=r(aye," \u2014 "),Sq=n(aye,"A",{href:!0});var vit=s(Sq);iFo=r(vit,"GPTNeoModel"),vit.forEach(t),dFo=r(aye," (GPT Neo model)"),aye.forEach(t),cFo=i($),mu=n($,"LI",{});var nye=s(mu);sde=n(nye,"STRONG",{});var Fit=s(sde);fFo=r(Fit,"gpt_neox"),Fit.forEach(t),mFo=r(nye," \u2014 "),Rq=n(nye,"A",{href:!0});var Tit=s(Rq);gFo=r(Tit,"GPTNeoXModel"),Tit.forEach(t),hFo=r(nye," (GPT NeoX model)"),nye.forEach(t),pFo=i($),gu=n($,"LI",{});var sye=s(gu);lde=n(sye,"STRONG",{});var Mit=s(lde);uFo=r(Mit,"gptj"),Mit.forEach(t),_Fo=r(sye," \u2014 "),Pq=n(sye,"A",{href:!0});var Eit=s(Pq);bFo=r(Eit,"GPTJModel"),Eit.forEach(t),vFo=r(sye," (GPT-J model)"),sye.forEach(t),FFo=i($),hu=n($,"LI",{});var lye=s(hu);ide=n(lye,"STRONG",{});var Cit=s(ide);TFo=r(Cit,"hubert"),Cit.forEach(t),MFo=r(lye," \u2014 "),Bq=n(lye,"A",{href:!0});var wit=s(Bq);EFo=r(wit,"HubertModel"),wit.forEach(t),CFo=r(lye," (Hubert model)"),lye.forEach(t),wFo=i($),pu=n($,"LI",{});var iye=s(pu);dde=n(iye,"STRONG",{});var Ait=s(dde);AFo=r(Ait,"ibert"),Ait.forEach(t),LFo=r(iye," \u2014 "),Iq=n(iye,"A",{href:!0});var Lit=s(Iq);yFo=r(Lit,"IBertModel"),Lit.forEach(t),xFo=r(iye," (I-BERT model)"),iye.forEach(t),$Fo=i($),uu=n($,"LI",{});var dye=s(uu);cde=n(dye,"STRONG",{});var yit=s(cde);kFo=r(yit,"imagegpt"),yit.forEach(t),SFo=r(dye," \u2014 "),Nq=n(dye,"A",{href:!0});var xit=s(Nq);RFo=r(xit,"ImageGPTModel"),xit.forEach(t),PFo=r(dye," (ImageGPT model)"),dye.forEach(t),BFo=i($),_u=n($,"LI",{});var cye=s(_u);fde=n(cye,"STRONG",{});var $it=s(fde);IFo=r($it,"layoutlm"),$it.forEach(t),NFo=r(cye," \u2014 "),qq=n(cye,"A",{href:!0});var kit=s(qq);qFo=r(kit,"LayoutLMModel"),kit.forEach(t),jFo=r(cye," (LayoutLM model)"),cye.forEach(t),DFo=i($),bu=n($,"LI",{});var fye=s(bu);mde=n(fye,"STRONG",{});var Sit=s(mde);GFo=r(Sit,"layoutlmv2"),Sit.forEach(t),OFo=r(fye," \u2014 "),jq=n(fye,"A",{href:!0});var Rit=s(jq);VFo=r(Rit,"LayoutLMv2Model"),Rit.forEach(t),XFo=r(fye," (LayoutLMv2 model)"),fye.forEach(t),zFo=i($),vu=n($,"LI",{});var mye=s(vu);gde=n(mye,"STRONG",{});var Pit=s(gde);WFo=r(Pit,"layoutlmv3"),Pit.forEach(t),QFo=r(mye," \u2014 "),Dq=n(mye,"A",{href:!0});var Bit=s(Dq);HFo=r(Bit,"LayoutLMv3Model"),Bit.forEach(t),UFo=r(mye," (LayoutLMv3 model)"),mye.forEach(t),JFo=i($),Fu=n($,"LI",{});var gye=s(Fu);hde=n(gye,"STRONG",{});var Iit=s(hde);YFo=r(Iit,"led"),Iit.forEach(t),KFo=r(gye," \u2014 "),Gq=n(gye,"A",{href:!0});var Nit=s(Gq);ZFo=r(Nit,"LEDModel"),Nit.forEach(t),eTo=r(gye," (LED model)"),gye.forEach(t),oTo=i($),Tu=n($,"LI",{});var hye=s(Tu);pde=n(hye,"STRONG",{});var qit=s(pde);rTo=r(qit,"levit"),qit.forEach(t),tTo=r(hye," \u2014 "),Oq=n(hye,"A",{href:!0});var jit=s(Oq);aTo=r(jit,"LevitModel"),jit.forEach(t),nTo=r(hye," (LeViT model)"),hye.forEach(t),sTo=i($),Mu=n($,"LI",{});var pye=s(Mu);ude=n(pye,"STRONG",{});var Dit=s(ude);lTo=r(Dit,"longformer"),Dit.forEach(t),iTo=r(pye," \u2014 "),Vq=n(pye,"A",{href:!0});var Git=s(Vq);dTo=r(Git,"LongformerModel"),Git.forEach(t),cTo=r(pye," (Longformer model)"),pye.forEach(t),fTo=i($),Eu=n($,"LI",{});var uye=s(Eu);_de=n(uye,"STRONG",{});var Oit=s(_de);mTo=r(Oit,"longt5"),Oit.forEach(t),gTo=r(uye," \u2014 "),Xq=n(uye,"A",{href:!0});var Vit=s(Xq);hTo=r(Vit,"LongT5Model"),Vit.forEach(t),pTo=r(uye," (LongT5 model)"),uye.forEach(t),uTo=i($),Cu=n($,"LI",{});var _ye=s(Cu);bde=n(_ye,"STRONG",{});var Xit=s(bde);_To=r(Xit,"luke"),Xit.forEach(t),bTo=r(_ye," \u2014 "),zq=n(_ye,"A",{href:!0});var zit=s(zq);vTo=r(zit,"LukeModel"),zit.forEach(t),FTo=r(_ye," (LUKE model)"),_ye.forEach(t),TTo=i($),wu=n($,"LI",{});var bye=s(wu);vde=n(bye,"STRONG",{});var Wit=s(vde);MTo=r(Wit,"lxmert"),Wit.forEach(t),ETo=r(bye," \u2014 "),Wq=n(bye,"A",{href:!0});var Qit=s(Wq);CTo=r(Qit,"LxmertModel"),Qit.forEach(t),wTo=r(bye," (LXMERT model)"),bye.forEach(t),ATo=i($),Au=n($,"LI",{});var vye=s(Au);Fde=n(vye,"STRONG",{});var Hit=s(Fde);LTo=r(Hit,"m2m_100"),Hit.forEach(t),yTo=r(vye," \u2014 "),Qq=n(vye,"A",{href:!0});var Uit=s(Qq);xTo=r(Uit,"M2M100Model"),Uit.forEach(t),$To=r(vye," (M2M100 model)"),vye.forEach(t),kTo=i($),Lu=n($,"LI",{});var Fye=s(Lu);Tde=n(Fye,"STRONG",{});var Jit=s(Tde);STo=r(Jit,"marian"),Jit.forEach(t),RTo=r(Fye," \u2014 "),Hq=n(Fye,"A",{href:!0});var Yit=s(Hq);PTo=r(Yit,"MarianModel"),Yit.forEach(t),BTo=r(Fye," (Marian model)"),Fye.forEach(t),ITo=i($),yu=n($,"LI",{});var Tye=s(yu);Mde=n(Tye,"STRONG",{});var Kit=s(Mde);NTo=r(Kit,"maskformer"),Kit.forEach(t),qTo=r(Tye," \u2014 "),Uq=n(Tye,"A",{href:!0});var Zit=s(Uq);jTo=r(Zit,"MaskFormerModel"),Zit.forEach(t),DTo=r(Tye," (MaskFormer model)"),Tye.forEach(t),GTo=i($),xu=n($,"LI",{});var Mye=s(xu);Ede=n(Mye,"STRONG",{});var edt=s(Ede);OTo=r(edt,"mbart"),edt.forEach(t),VTo=r(Mye," \u2014 "),Jq=n(Mye,"A",{href:!0});var odt=s(Jq);XTo=r(odt,"MBartModel"),odt.forEach(t),zTo=r(Mye," (mBART model)"),Mye.forEach(t),WTo=i($),$u=n($,"LI",{});var Eye=s($u);Cde=n(Eye,"STRONG",{});var rdt=s(Cde);QTo=r(rdt,"mctct"),rdt.forEach(t),HTo=r(Eye," \u2014 "),Yq=n(Eye,"A",{href:!0});var tdt=s(Yq);UTo=r(tdt,"MCTCTModel"),tdt.forEach(t),JTo=r(Eye," (M-CTC-T model)"),Eye.forEach(t),YTo=i($),ku=n($,"LI",{});var Cye=s(ku);wde=n(Cye,"STRONG",{});var adt=s(wde);KTo=r(adt,"megatron-bert"),adt.forEach(t),ZTo=r(Cye," \u2014 "),Kq=n(Cye,"A",{href:!0});var ndt=s(Kq);e7o=r(ndt,"MegatronBertModel"),ndt.forEach(t),o7o=r(Cye," (Megatron-BERT model)"),Cye.forEach(t),r7o=i($),Su=n($,"LI",{});var wye=s(Su);Ade=n(wye,"STRONG",{});var sdt=s(Ade);t7o=r(sdt,"mobilebert"),sdt.forEach(t),a7o=r(wye," \u2014 "),Zq=n(wye,"A",{href:!0});var ldt=s(Zq);n7o=r(ldt,"MobileBertModel"),ldt.forEach(t),s7o=r(wye," (MobileBERT model)"),wye.forEach(t),l7o=i($),Ru=n($,"LI",{});var Aye=s(Ru);Lde=n(Aye,"STRONG",{});var idt=s(Lde);i7o=r(idt,"mpnet"),idt.forEach(t),d7o=r(Aye," \u2014 "),ej=n(Aye,"A",{href:!0});var ddt=s(ej);c7o=r(ddt,"MPNetModel"),ddt.forEach(t),f7o=r(Aye," (MPNet model)"),Aye.forEach(t),m7o=i($),Pu=n($,"LI",{});var Lye=s(Pu);yde=n(Lye,"STRONG",{});var cdt=s(yde);g7o=r(cdt,"mt5"),cdt.forEach(t),h7o=r(Lye," \u2014 "),oj=n(Lye,"A",{href:!0});var fdt=s(oj);p7o=r(fdt,"MT5Model"),fdt.forEach(t),u7o=r(Lye," (MT5 model)"),Lye.forEach(t),_7o=i($),Bu=n($,"LI",{});var yye=s(Bu);xde=n(yye,"STRONG",{});var mdt=s(xde);b7o=r(mdt,"nystromformer"),mdt.forEach(t),v7o=r(yye," \u2014 "),rj=n(yye,"A",{href:!0});var gdt=s(rj);F7o=r(gdt,"NystromformerModel"),gdt.forEach(t),T7o=r(yye," (Nystr\xF6mformer model)"),yye.forEach(t),M7o=i($),Iu=n($,"LI",{});var xye=s(Iu);$de=n(xye,"STRONG",{});var hdt=s($de);E7o=r(hdt,"ofa"),hdt.forEach(t),C7o=r(xye," \u2014 "),tj=n(xye,"A",{href:!0});var pdt=s(tj);w7o=r(pdt,"OFAModel"),pdt.forEach(t),A7o=r(xye," (OFA model)"),xye.forEach(t),L7o=i($),Nu=n($,"LI",{});var $ye=s(Nu);kde=n($ye,"STRONG",{});var udt=s(kde);y7o=r(udt,"openai-gpt"),udt.forEach(t),x7o=r($ye," \u2014 "),aj=n($ye,"A",{href:!0});var _dt=s(aj);$7o=r(_dt,"OpenAIGPTModel"),_dt.forEach(t),k7o=r($ye," (OpenAI GPT model)"),$ye.forEach(t),S7o=i($),qu=n($,"LI",{});var kye=s(qu);Sde=n(kye,"STRONG",{});var bdt=s(Sde);R7o=r(bdt,"opt"),bdt.forEach(t),P7o=r(kye," \u2014 "),nj=n(kye,"A",{href:!0});var vdt=s(nj);B7o=r(vdt,"OPTModel"),vdt.forEach(t),I7o=r(kye," (OPT model)"),kye.forEach(t),N7o=i($),ju=n($,"LI",{});var Sye=s(ju);Rde=n(Sye,"STRONG",{});var Fdt=s(Rde);q7o=r(Fdt,"pegasus"),Fdt.forEach(t),j7o=r(Sye," \u2014 "),sj=n(Sye,"A",{href:!0});var Tdt=s(sj);D7o=r(Tdt,"PegasusModel"),Tdt.forEach(t),G7o=r(Sye," (Pegasus model)"),Sye.forEach(t),O7o=i($),Du=n($,"LI",{});var Rye=s(Du);Pde=n(Rye,"STRONG",{});var Mdt=s(Pde);V7o=r(Mdt,"perceiver"),Mdt.forEach(t),X7o=r(Rye," \u2014 "),lj=n(Rye,"A",{href:!0});var Edt=s(lj);z7o=r(Edt,"PerceiverModel"),Edt.forEach(t),W7o=r(Rye," (Perceiver model)"),Rye.forEach(t),Q7o=i($),Gu=n($,"LI",{});var Pye=s(Gu);Bde=n(Pye,"STRONG",{});var Cdt=s(Bde);H7o=r(Cdt,"plbart"),Cdt.forEach(t),U7o=r(Pye," \u2014 "),ij=n(Pye,"A",{href:!0});var wdt=s(ij);J7o=r(wdt,"PLBartModel"),wdt.forEach(t),Y7o=r(Pye," (PLBart model)"),Pye.forEach(t),K7o=i($),Ou=n($,"LI",{});var Bye=s(Ou);Ide=n(Bye,"STRONG",{});var Adt=s(Ide);Z7o=r(Adt,"poolformer"),Adt.forEach(t),e9o=r(Bye," \u2014 "),dj=n(Bye,"A",{href:!0});var Ldt=s(dj);o9o=r(Ldt,"PoolFormerModel"),Ldt.forEach(t),r9o=r(Bye," (PoolFormer model)"),Bye.forEach(t),t9o=i($),Vu=n($,"LI",{});var Iye=s(Vu);Nde=n(Iye,"STRONG",{});var ydt=s(Nde);a9o=r(ydt,"prophetnet"),ydt.forEach(t),n9o=r(Iye," \u2014 "),cj=n(Iye,"A",{href:!0});var xdt=s(cj);s9o=r(xdt,"ProphetNetModel"),xdt.forEach(t),l9o=r(Iye," (ProphetNet model)"),Iye.forEach(t),i9o=i($),Xu=n($,"LI",{});var Nye=s(Xu);qde=n(Nye,"STRONG",{});var $dt=s(qde);d9o=r($dt,"qdqbert"),$dt.forEach(t),c9o=r(Nye," \u2014 "),fj=n(Nye,"A",{href:!0});var kdt=s(fj);f9o=r(kdt,"QDQBertModel"),kdt.forEach(t),m9o=r(Nye," (QDQBert model)"),Nye.forEach(t),g9o=i($),zu=n($,"LI",{});var qye=s(zu);jde=n(qye,"STRONG",{});var Sdt=s(jde);h9o=r(Sdt,"reformer"),Sdt.forEach(t),p9o=r(qye," \u2014 "),mj=n(qye,"A",{href:!0});var Rdt=s(mj);u9o=r(Rdt,"ReformerModel"),Rdt.forEach(t),_9o=r(qye," (Reformer model)"),qye.forEach(t),b9o=i($),Wu=n($,"LI",{});var jye=s(Wu);Dde=n(jye,"STRONG",{});var Pdt=s(Dde);v9o=r(Pdt,"regnet"),Pdt.forEach(t),F9o=r(jye," \u2014 "),gj=n(jye,"A",{href:!0});var Bdt=s(gj);T9o=r(Bdt,"RegNetModel"),Bdt.forEach(t),M9o=r(jye," (RegNet model)"),jye.forEach(t),E9o=i($),Qu=n($,"LI",{});var Dye=s(Qu);Gde=n(Dye,"STRONG",{});var Idt=s(Gde);C9o=r(Idt,"rembert"),Idt.forEach(t),w9o=r(Dye," \u2014 "),hj=n(Dye,"A",{href:!0});var Ndt=s(hj);A9o=r(Ndt,"RemBertModel"),Ndt.forEach(t),L9o=r(Dye," (RemBERT model)"),Dye.forEach(t),y9o=i($),Hu=n($,"LI",{});var Gye=s(Hu);Ode=n(Gye,"STRONG",{});var qdt=s(Ode);x9o=r(qdt,"resnet"),qdt.forEach(t),$9o=r(Gye," \u2014 "),pj=n(Gye,"A",{href:!0});var jdt=s(pj);k9o=r(jdt,"ResNetModel"),jdt.forEach(t),S9o=r(Gye," (ResNet model)"),Gye.forEach(t),R9o=i($),Uu=n($,"LI",{});var Oye=s(Uu);Vde=n(Oye,"STRONG",{});var Ddt=s(Vde);P9o=r(Ddt,"retribert"),Ddt.forEach(t),B9o=r(Oye," \u2014 "),uj=n(Oye,"A",{href:!0});var Gdt=s(uj);I9o=r(Gdt,"RetriBertModel"),Gdt.forEach(t),N9o=r(Oye," (RetriBERT model)"),Oye.forEach(t),q9o=i($),Ju=n($,"LI",{});var Vye=s(Ju);Xde=n(Vye,"STRONG",{});var Odt=s(Xde);j9o=r(Odt,"roberta"),Odt.forEach(t),D9o=r(Vye," \u2014 "),_j=n(Vye,"A",{href:!0});var Vdt=s(_j);G9o=r(Vdt,"RobertaModel"),Vdt.forEach(t),O9o=r(Vye," (RoBERTa model)"),Vye.forEach(t),V9o=i($),Yu=n($,"LI",{});var Xye=s(Yu);zde=n(Xye,"STRONG",{});var Xdt=s(zde);X9o=r(Xdt,"roformer"),Xdt.forEach(t),z9o=r(Xye," \u2014 "),bj=n(Xye,"A",{href:!0});var zdt=s(bj);W9o=r(zdt,"RoFormerModel"),zdt.forEach(t),Q9o=r(Xye," (RoFormer model)"),Xye.forEach(t),H9o=i($),Ku=n($,"LI",{});var zye=s(Ku);Wde=n(zye,"STRONG",{});var Wdt=s(Wde);U9o=r(Wdt,"segformer"),Wdt.forEach(t),J9o=r(zye," \u2014 "),vj=n(zye,"A",{href:!0});var Qdt=s(vj);Y9o=r(Qdt,"SegformerModel"),Qdt.forEach(t),K9o=r(zye," (SegFormer model)"),zye.forEach(t),Z9o=i($),Zu=n($,"LI",{});var Wye=s(Zu);Qde=n(Wye,"STRONG",{});var Hdt=s(Qde);eMo=r(Hdt,"sew"),Hdt.forEach(t),oMo=r(Wye," \u2014 "),Fj=n(Wye,"A",{href:!0});var Udt=s(Fj);rMo=r(Udt,"SEWModel"),Udt.forEach(t),tMo=r(Wye," (SEW model)"),Wye.forEach(t),aMo=i($),e_=n($,"LI",{});var Qye=s(e_);Hde=n(Qye,"STRONG",{});var Jdt=s(Hde);nMo=r(Jdt,"sew-d"),Jdt.forEach(t),sMo=r(Qye," \u2014 "),Tj=n(Qye,"A",{href:!0});var Ydt=s(Tj);lMo=r(Ydt,"SEWDModel"),Ydt.forEach(t),iMo=r(Qye," (SEW-D model)"),Qye.forEach(t),dMo=i($),o_=n($,"LI",{});var Hye=s(o_);Ude=n(Hye,"STRONG",{});var Kdt=s(Ude);cMo=r(Kdt,"speech_to_text"),Kdt.forEach(t),fMo=r(Hye," \u2014 "),Mj=n(Hye,"A",{href:!0});var Zdt=s(Mj);mMo=r(Zdt,"Speech2TextModel"),Zdt.forEach(t),gMo=r(Hye," (Speech2Text model)"),Hye.forEach(t),hMo=i($),r_=n($,"LI",{});var Uye=s(r_);Jde=n(Uye,"STRONG",{});var ect=s(Jde);pMo=r(ect,"splinter"),ect.forEach(t),uMo=r(Uye," \u2014 "),Ej=n(Uye,"A",{href:!0});var oct=s(Ej);_Mo=r(oct,"SplinterModel"),oct.forEach(t),bMo=r(Uye," (Splinter model)"),Uye.forEach(t),vMo=i($),t_=n($,"LI",{});var Jye=s(t_);Yde=n(Jye,"STRONG",{});var rct=s(Yde);FMo=r(rct,"squeezebert"),rct.forEach(t),TMo=r(Jye," \u2014 "),Cj=n(Jye,"A",{href:!0});var tct=s(Cj);MMo=r(tct,"SqueezeBertModel"),tct.forEach(t),EMo=r(Jye," (SqueezeBERT model)"),Jye.forEach(t),CMo=i($),a_=n($,"LI",{});var Yye=s(a_);Kde=n(Yye,"STRONG",{});var act=s(Kde);wMo=r(act,"swin"),act.forEach(t),AMo=r(Yye," \u2014 "),wj=n(Yye,"A",{href:!0});var nct=s(wj);LMo=r(nct,"SwinModel"),nct.forEach(t),yMo=r(Yye," (Swin Transformer model)"),Yye.forEach(t),xMo=i($),n_=n($,"LI",{});var Kye=s(n_);Zde=n(Kye,"STRONG",{});var sct=s(Zde);$Mo=r(sct,"t5"),sct.forEach(t),kMo=r(Kye," \u2014 "),Aj=n(Kye,"A",{href:!0});var lct=s(Aj);SMo=r(lct,"T5Model"),lct.forEach(t),RMo=r(Kye," (T5 model)"),Kye.forEach(t),PMo=i($),s_=n($,"LI",{});var Zye=s(s_);ece=n(Zye,"STRONG",{});var ict=s(ece);BMo=r(ict,"tapas"),ict.forEach(t),IMo=r(Zye," \u2014 "),Lj=n(Zye,"A",{href:!0});var dct=s(Lj);NMo=r(dct,"TapasModel"),dct.forEach(t),qMo=r(Zye," (TAPAS model)"),Zye.forEach(t),jMo=i($),l_=n($,"LI",{});var e8e=s(l_);oce=n(e8e,"STRONG",{});var cct=s(oce);DMo=r(cct,"trajectory_transformer"),cct.forEach(t),GMo=r(e8e," \u2014 "),yj=n(e8e,"A",{href:!0});var fct=s(yj);OMo=r(fct,"TrajectoryTransformerModel"),fct.forEach(t),VMo=r(e8e," (Trajectory Transformer model)"),e8e.forEach(t),XMo=i($),i_=n($,"LI",{});var o8e=s(i_);rce=n(o8e,"STRONG",{});var mct=s(rce);zMo=r(mct,"transfo-xl"),mct.forEach(t),WMo=r(o8e," \u2014 "),xj=n(o8e,"A",{href:!0});var gct=s(xj);QMo=r(gct,"TransfoXLModel"),gct.forEach(t),HMo=r(o8e," (Transformer-XL model)"),o8e.forEach(t),UMo=i($),d_=n($,"LI",{});var r8e=s(d_);tce=n(r8e,"STRONG",{});var hct=s(tce);JMo=r(hct,"unispeech"),hct.forEach(t),YMo=r(r8e," \u2014 "),$j=n(r8e,"A",{href:!0});var pct=s($j);KMo=r(pct,"UniSpeechModel"),pct.forEach(t),ZMo=r(r8e," (UniSpeech model)"),r8e.forEach(t),e4o=i($),c_=n($,"LI",{});var t8e=s(c_);ace=n(t8e,"STRONG",{});var uct=s(ace);o4o=r(uct,"unispeech-sat"),uct.forEach(t),r4o=r(t8e," \u2014 "),kj=n(t8e,"A",{href:!0});var _ct=s(kj);t4o=r(_ct,"UniSpeechSatModel"),_ct.forEach(t),a4o=r(t8e," (UniSpeechSat model)"),t8e.forEach(t),n4o=i($),f_=n($,"LI",{});var a8e=s(f_);nce=n(a8e,"STRONG",{});var bct=s(nce);s4o=r(bct,"van"),bct.forEach(t),l4o=r(a8e," \u2014 "),Sj=n(a8e,"A",{href:!0});var vct=s(Sj);i4o=r(vct,"VanModel"),vct.forEach(t),d4o=r(a8e," (VAN model)"),a8e.forEach(t),c4o=i($),m_=n($,"LI",{});var n8e=s(m_);sce=n(n8e,"STRONG",{});var Fct=s(sce);f4o=r(Fct,"vilt"),Fct.forEach(t),m4o=r(n8e," \u2014 "),Rj=n(n8e,"A",{href:!0});var Tct=s(Rj);g4o=r(Tct,"ViltModel"),Tct.forEach(t),h4o=r(n8e," (ViLT model)"),n8e.forEach(t),p4o=i($),g_=n($,"LI",{});var s8e=s(g_);lce=n(s8e,"STRONG",{});var Mct=s(lce);u4o=r(Mct,"vision-text-dual-encoder"),Mct.forEach(t),_4o=r(s8e," \u2014 "),Pj=n(s8e,"A",{href:!0});var Ect=s(Pj);b4o=r(Ect,"VisionTextDualEncoderModel"),Ect.forEach(t),v4o=r(s8e," (VisionTextDualEncoder model)"),s8e.forEach(t),F4o=i($),h_=n($,"LI",{});var l8e=s(h_);ice=n(l8e,"STRONG",{});var Cct=s(ice);T4o=r(Cct,"visual_bert"),Cct.forEach(t),M4o=r(l8e," \u2014 "),Bj=n(l8e,"A",{href:!0});var wct=s(Bj);E4o=r(wct,"VisualBertModel"),wct.forEach(t),C4o=r(l8e," (VisualBERT model)"),l8e.forEach(t),w4o=i($),p_=n($,"LI",{});var i8e=s(p_);dce=n(i8e,"STRONG",{});var Act=s(dce);A4o=r(Act,"vit"),Act.forEach(t),L4o=r(i8e," \u2014 "),Ij=n(i8e,"A",{href:!0});var Lct=s(Ij);y4o=r(Lct,"ViTModel"),Lct.forEach(t),x4o=r(i8e," (ViT model)"),i8e.forEach(t),$4o=i($),u_=n($,"LI",{});var d8e=s(u_);cce=n(d8e,"STRONG",{});var yct=s(cce);k4o=r(yct,"vit_mae"),yct.forEach(t),S4o=r(d8e," \u2014 "),Nj=n(d8e,"A",{href:!0});var xct=s(Nj);R4o=r(xct,"ViTMAEModel"),xct.forEach(t),P4o=r(d8e," (ViTMAE model)"),d8e.forEach(t),B4o=i($),__=n($,"LI",{});var c8e=s(__);fce=n(c8e,"STRONG",{});var $ct=s(fce);I4o=r($ct,"wav2vec2"),$ct.forEach(t),N4o=r(c8e," \u2014 "),qj=n(c8e,"A",{href:!0});var kct=s(qj);q4o=r(kct,"Wav2Vec2Model"),kct.forEach(t),j4o=r(c8e," (Wav2Vec2 model)"),c8e.forEach(t),D4o=i($),b_=n($,"LI",{});var f8e=s(b_);mce=n(f8e,"STRONG",{});var Sct=s(mce);G4o=r(Sct,"wav2vec2-conformer"),Sct.forEach(t),O4o=r(f8e," \u2014 "),jj=n(f8e,"A",{href:!0});var Rct=s(jj);V4o=r(Rct,"Wav2Vec2ConformerModel"),Rct.forEach(t),X4o=r(f8e," (Wav2Vec2-Conformer model)"),f8e.forEach(t),z4o=i($),v_=n($,"LI",{});var m8e=s(v_);gce=n(m8e,"STRONG",{});var Pct=s(gce);W4o=r(Pct,"wavlm"),Pct.forEach(t),Q4o=r(m8e," \u2014 "),Dj=n(m8e,"A",{href:!0});var Bct=s(Dj);H4o=r(Bct,"WavLMModel"),Bct.forEach(t),U4o=r(m8e," (WavLM model)"),m8e.forEach(t),J4o=i($),F_=n($,"LI",{});var g8e=s(F_);hce=n(g8e,"STRONG",{});var Ict=s(hce);Y4o=r(Ict,"xglm"),Ict.forEach(t),K4o=r(g8e," \u2014 "),Gj=n(g8e,"A",{href:!0});var Nct=s(Gj);Z4o=r(Nct,"XGLMModel"),Nct.forEach(t),eEo=r(g8e," (XGLM model)"),g8e.forEach(t),oEo=i($),T_=n($,"LI",{});var h8e=s(T_);pce=n(h8e,"STRONG",{});var qct=s(pce);rEo=r(qct,"xlm"),qct.forEach(t),tEo=r(h8e," \u2014 "),Oj=n(h8e,"A",{href:!0});var jct=s(Oj);aEo=r(jct,"XLMModel"),jct.forEach(t),nEo=r(h8e," (XLM model)"),h8e.forEach(t),sEo=i($),M_=n($,"LI",{});var p8e=s(M_);uce=n(p8e,"STRONG",{});var Dct=s(uce);lEo=r(Dct,"xlm-prophetnet"),Dct.forEach(t),iEo=r(p8e," \u2014 "),Vj=n(p8e,"A",{href:!0});var Gct=s(Vj);dEo=r(Gct,"XLMProphetNetModel"),Gct.forEach(t),cEo=r(p8e," (XLM-ProphetNet model)"),p8e.forEach(t),fEo=i($),E_=n($,"LI",{});var u8e=s(E_);_ce=n(u8e,"STRONG",{});var Oct=s(_ce);mEo=r(Oct,"xlm-roberta"),Oct.forEach(t),gEo=r(u8e," \u2014 "),Xj=n(u8e,"A",{href:!0});var Vct=s(Xj);hEo=r(Vct,"XLMRobertaModel"),Vct.forEach(t),pEo=r(u8e," (XLM-RoBERTa model)"),u8e.forEach(t),uEo=i($),C_=n($,"LI",{});var _8e=s(C_);bce=n(_8e,"STRONG",{});var Xct=s(bce);_Eo=r(Xct,"xlm-roberta-xl"),Xct.forEach(t),bEo=r(_8e," \u2014 "),zj=n(_8e,"A",{href:!0});var zct=s(zj);vEo=r(zct,"XLMRobertaXLModel"),zct.forEach(t),FEo=r(_8e," (XLM-RoBERTa-XL model)"),_8e.forEach(t),TEo=i($),w_=n($,"LI",{});var b8e=s(w_);vce=n(b8e,"STRONG",{});var Wct=s(vce);MEo=r(Wct,"xlnet"),Wct.forEach(t),EEo=r(b8e," \u2014 "),Wj=n(b8e,"A",{href:!0});var Qct=s(Wj);CEo=r(Qct,"XLNetModel"),Qct.forEach(t),wEo=r(b8e," (XLNet model)"),b8e.forEach(t),AEo=i($),A_=n($,"LI",{});var v8e=s(A_);Fce=n(v8e,"STRONG",{});var Hct=s(Fce);LEo=r(Hct,"yolos"),Hct.forEach(t),yEo=r(v8e," \u2014 "),Qj=n(v8e,"A",{href:!0});var Uct=s(Qj);xEo=r(Uct,"YolosModel"),Uct.forEach(t),$Eo=r(v8e," (YOLOS model)"),v8e.forEach(t),kEo=i($),L_=n($,"LI",{});var F8e=s(L_);Tce=n(F8e,"STRONG",{});var Jct=s(Tce);SEo=r(Jct,"yoso"),Jct.forEach(t),REo=r(F8e," \u2014 "),Hj=n(F8e,"A",{href:!0});var Yct=s(Hj);PEo=r(Yct,"YosoModel"),Yct.forEach(t),BEo=r(F8e," (YOSO model)"),F8e.forEach(t),$.forEach(t),IEo=i(aa),y_=n(aa,"P",{});var T8e=s(y_);NEo=r(T8e,"The model is set in evaluation mode by default using "),Mce=n(T8e,"CODE",{});var Kct=s(Mce);qEo=r(Kct,"model.eval()"),Kct.forEach(t),jEo=r(T8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ece=n(T8e,"CODE",{});var Zct=s(Ece);DEo=r(Zct,"model.train()"),Zct.forEach(t),T8e.forEach(t),GEo=i(aa),T(x_.$$.fragment,aa),aa.forEach(t),Js.forEach(t),bGe=i(f),qi=n(f,"H2",{class:!0});var CVe=s(qi);$_=n(CVe,"A",{id:!0,class:!0,href:!0});var eft=s($_);Cce=n(eft,"SPAN",{});var oft=s(Cce);T(Y6.$$.fragment,oft),oft.forEach(t),eft.forEach(t),OEo=i(CVe),wce=n(CVe,"SPAN",{});var rft=s(wce);VEo=r(rft,"AutoModelForPreTraining"),rft.forEach(t),CVe.forEach(t),vGe=i(f),$o=n(f,"DIV",{class:!0});var Ys=s($o);T(K6.$$.fragment,Ys),XEo=i(Ys),ji=n(Ys,"P",{});var toe=s(ji);zEo=r(toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Uj=n(toe,"A",{href:!0});var tft=s(Uj);WEo=r(tft,"from_pretrained()"),tft.forEach(t),QEo=r(toe," class method or the "),Jj=n(toe,"A",{href:!0});var aft=s(Jj);HEo=r(aft,"from_config()"),aft.forEach(t),UEo=r(toe,` class
method.`),toe.forEach(t),JEo=i(Ys),Z6=n(Ys,"P",{});var wVe=s(Z6);YEo=r(wVe,"This class cannot be instantiated directly using "),Ace=n(wVe,"CODE",{});var nft=s(Ace);KEo=r(nft,"__init__()"),nft.forEach(t),ZEo=r(wVe," (throws an error)."),wVe.forEach(t),eCo=i(Ys),st=n(Ys,"DIV",{class:!0});var Cw=s(st);T(eL.$$.fragment,Cw),oCo=i(Cw),Lce=n(Cw,"P",{});var sft=s(Lce);rCo=r(sft,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),sft.forEach(t),tCo=i(Cw),Di=n(Cw,"P",{});var aoe=s(Di);aCo=r(aoe,`Note:
Loading a model from its configuration file does `),yce=n(aoe,"STRONG",{});var lft=s(yce);nCo=r(lft,"not"),lft.forEach(t),sCo=r(aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yj=n(aoe,"A",{href:!0});var ift=s(Yj);lCo=r(ift,"from_pretrained()"),ift.forEach(t),iCo=r(aoe," to load the model weights."),aoe.forEach(t),dCo=i(Cw),T(k_.$$.fragment,Cw),Cw.forEach(t),cCo=i(Ys),Ye=n(Ys,"DIV",{class:!0});var na=s(Ye);T(oL.$$.fragment,na),fCo=i(na),xce=n(na,"P",{});var dft=s(xce);mCo=r(dft,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),dft.forEach(t),gCo=i(na),Ra=n(na,"P",{});var ww=s(Ra);hCo=r(ww,"The model class to instantiate is selected based on the "),$ce=n(ww,"CODE",{});var cft=s($ce);pCo=r(cft,"model_type"),cft.forEach(t),uCo=r(ww,` property of the config object (either
passed as an argument or loaded from `),kce=n(ww,"CODE",{});var fft=s(kce);_Co=r(fft,"pretrained_model_name_or_path"),fft.forEach(t),bCo=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=n(ww,"CODE",{});var mft=s(Sce);vCo=r(mft,"pretrained_model_name_or_path"),mft.forEach(t),FCo=r(ww,":"),ww.forEach(t),TCo=i(na),G=n(na,"UL",{});var O=s(G);S_=n(O,"LI",{});var M8e=s(S_);Rce=n(M8e,"STRONG",{});var gft=s(Rce);MCo=r(gft,"albert"),gft.forEach(t),ECo=r(M8e," \u2014 "),Kj=n(M8e,"A",{href:!0});var hft=s(Kj);CCo=r(hft,"AlbertForPreTraining"),hft.forEach(t),wCo=r(M8e," (ALBERT model)"),M8e.forEach(t),ACo=i(O),R_=n(O,"LI",{});var E8e=s(R_);Pce=n(E8e,"STRONG",{});var pft=s(Pce);LCo=r(pft,"bart"),pft.forEach(t),yCo=r(E8e," \u2014 "),Zj=n(E8e,"A",{href:!0});var uft=s(Zj);xCo=r(uft,"BartForConditionalGeneration"),uft.forEach(t),$Co=r(E8e," (BART model)"),E8e.forEach(t),kCo=i(O),P_=n(O,"LI",{});var C8e=s(P_);Bce=n(C8e,"STRONG",{});var _ft=s(Bce);SCo=r(_ft,"bert"),_ft.forEach(t),RCo=r(C8e," \u2014 "),eD=n(C8e,"A",{href:!0});var bft=s(eD);PCo=r(bft,"BertForPreTraining"),bft.forEach(t),BCo=r(C8e," (BERT model)"),C8e.forEach(t),ICo=i(O),B_=n(O,"LI",{});var w8e=s(B_);Ice=n(w8e,"STRONG",{});var vft=s(Ice);NCo=r(vft,"big_bird"),vft.forEach(t),qCo=r(w8e," \u2014 "),oD=n(w8e,"A",{href:!0});var Fft=s(oD);jCo=r(Fft,"BigBirdForPreTraining"),Fft.forEach(t),DCo=r(w8e," (BigBird model)"),w8e.forEach(t),GCo=i(O),I_=n(O,"LI",{});var A8e=s(I_);Nce=n(A8e,"STRONG",{});var Tft=s(Nce);OCo=r(Tft,"bloom"),Tft.forEach(t),VCo=r(A8e," \u2014 "),rD=n(A8e,"A",{href:!0});var Mft=s(rD);XCo=r(Mft,"BloomForCausalLM"),Mft.forEach(t),zCo=r(A8e," (BLOOM model)"),A8e.forEach(t),WCo=i(O),N_=n(O,"LI",{});var L8e=s(N_);qce=n(L8e,"STRONG",{});var Eft=s(qce);QCo=r(Eft,"camembert"),Eft.forEach(t),HCo=r(L8e," \u2014 "),tD=n(L8e,"A",{href:!0});var Cft=s(tD);UCo=r(Cft,"CamembertForMaskedLM"),Cft.forEach(t),JCo=r(L8e," (CamemBERT model)"),L8e.forEach(t),YCo=i(O),q_=n(O,"LI",{});var y8e=s(q_);jce=n(y8e,"STRONG",{});var wft=s(jce);KCo=r(wft,"ctrl"),wft.forEach(t),ZCo=r(y8e," \u2014 "),aD=n(y8e,"A",{href:!0});var Aft=s(aD);e5o=r(Aft,"CTRLLMHeadModel"),Aft.forEach(t),o5o=r(y8e," (CTRL model)"),y8e.forEach(t),r5o=i(O),j_=n(O,"LI",{});var x8e=s(j_);Dce=n(x8e,"STRONG",{});var Lft=s(Dce);t5o=r(Lft,"data2vec-text"),Lft.forEach(t),a5o=r(x8e," \u2014 "),nD=n(x8e,"A",{href:!0});var yft=s(nD);n5o=r(yft,"Data2VecTextForMaskedLM"),yft.forEach(t),s5o=r(x8e," (Data2VecText model)"),x8e.forEach(t),l5o=i(O),D_=n(O,"LI",{});var $8e=s(D_);Gce=n($8e,"STRONG",{});var xft=s(Gce);i5o=r(xft,"deberta"),xft.forEach(t),d5o=r($8e," \u2014 "),sD=n($8e,"A",{href:!0});var $ft=s(sD);c5o=r($ft,"DebertaForMaskedLM"),$ft.forEach(t),f5o=r($8e," (DeBERTa model)"),$8e.forEach(t),m5o=i(O),G_=n(O,"LI",{});var k8e=s(G_);Oce=n(k8e,"STRONG",{});var kft=s(Oce);g5o=r(kft,"deberta-v2"),kft.forEach(t),h5o=r(k8e," \u2014 "),lD=n(k8e,"A",{href:!0});var Sft=s(lD);p5o=r(Sft,"DebertaV2ForMaskedLM"),Sft.forEach(t),u5o=r(k8e," (DeBERTa-v2 model)"),k8e.forEach(t),_5o=i(O),O_=n(O,"LI",{});var S8e=s(O_);Vce=n(S8e,"STRONG",{});var Rft=s(Vce);b5o=r(Rft,"distilbert"),Rft.forEach(t),v5o=r(S8e," \u2014 "),iD=n(S8e,"A",{href:!0});var Pft=s(iD);F5o=r(Pft,"DistilBertForMaskedLM"),Pft.forEach(t),T5o=r(S8e," (DistilBERT model)"),S8e.forEach(t),M5o=i(O),V_=n(O,"LI",{});var R8e=s(V_);Xce=n(R8e,"STRONG",{});var Bft=s(Xce);E5o=r(Bft,"electra"),Bft.forEach(t),C5o=r(R8e," \u2014 "),dD=n(R8e,"A",{href:!0});var Ift=s(dD);w5o=r(Ift,"ElectraForPreTraining"),Ift.forEach(t),A5o=r(R8e," (ELECTRA model)"),R8e.forEach(t),L5o=i(O),X_=n(O,"LI",{});var P8e=s(X_);zce=n(P8e,"STRONG",{});var Nft=s(zce);y5o=r(Nft,"flaubert"),Nft.forEach(t),x5o=r(P8e," \u2014 "),cD=n(P8e,"A",{href:!0});var qft=s(cD);$5o=r(qft,"FlaubertWithLMHeadModel"),qft.forEach(t),k5o=r(P8e," (FlauBERT model)"),P8e.forEach(t),S5o=i(O),z_=n(O,"LI",{});var B8e=s(z_);Wce=n(B8e,"STRONG",{});var jft=s(Wce);R5o=r(jft,"flava"),jft.forEach(t),P5o=r(B8e," \u2014 "),fD=n(B8e,"A",{href:!0});var Dft=s(fD);B5o=r(Dft,"FlavaForPreTraining"),Dft.forEach(t),I5o=r(B8e," (FLAVA model)"),B8e.forEach(t),N5o=i(O),W_=n(O,"LI",{});var I8e=s(W_);Qce=n(I8e,"STRONG",{});var Gft=s(Qce);q5o=r(Gft,"fnet"),Gft.forEach(t),j5o=r(I8e," \u2014 "),mD=n(I8e,"A",{href:!0});var Oft=s(mD);D5o=r(Oft,"FNetForPreTraining"),Oft.forEach(t),G5o=r(I8e," (FNet model)"),I8e.forEach(t),O5o=i(O),Q_=n(O,"LI",{});var N8e=s(Q_);Hce=n(N8e,"STRONG",{});var Vft=s(Hce);V5o=r(Vft,"fsmt"),Vft.forEach(t),X5o=r(N8e," \u2014 "),gD=n(N8e,"A",{href:!0});var Xft=s(gD);z5o=r(Xft,"FSMTForConditionalGeneration"),Xft.forEach(t),W5o=r(N8e," (FairSeq Machine-Translation model)"),N8e.forEach(t),Q5o=i(O),H_=n(O,"LI",{});var q8e=s(H_);Uce=n(q8e,"STRONG",{});var zft=s(Uce);H5o=r(zft,"funnel"),zft.forEach(t),U5o=r(q8e," \u2014 "),hD=n(q8e,"A",{href:!0});var Wft=s(hD);J5o=r(Wft,"FunnelForPreTraining"),Wft.forEach(t),Y5o=r(q8e," (Funnel Transformer model)"),q8e.forEach(t),K5o=i(O),U_=n(O,"LI",{});var j8e=s(U_);Jce=n(j8e,"STRONG",{});var Qft=s(Jce);Z5o=r(Qft,"gpt2"),Qft.forEach(t),e3o=r(j8e," \u2014 "),pD=n(j8e,"A",{href:!0});var Hft=s(pD);o3o=r(Hft,"GPT2LMHeadModel"),Hft.forEach(t),r3o=r(j8e," (OpenAI GPT-2 model)"),j8e.forEach(t),t3o=i(O),J_=n(O,"LI",{});var D8e=s(J_);Yce=n(D8e,"STRONG",{});var Uft=s(Yce);a3o=r(Uft,"ibert"),Uft.forEach(t),n3o=r(D8e," \u2014 "),uD=n(D8e,"A",{href:!0});var Jft=s(uD);s3o=r(Jft,"IBertForMaskedLM"),Jft.forEach(t),l3o=r(D8e," (I-BERT model)"),D8e.forEach(t),i3o=i(O),Y_=n(O,"LI",{});var G8e=s(Y_);Kce=n(G8e,"STRONG",{});var Yft=s(Kce);d3o=r(Yft,"layoutlm"),Yft.forEach(t),c3o=r(G8e," \u2014 "),_D=n(G8e,"A",{href:!0});var Kft=s(_D);f3o=r(Kft,"LayoutLMForMaskedLM"),Kft.forEach(t),m3o=r(G8e," (LayoutLM model)"),G8e.forEach(t),g3o=i(O),K_=n(O,"LI",{});var O8e=s(K_);Zce=n(O8e,"STRONG",{});var Zft=s(Zce);h3o=r(Zft,"longformer"),Zft.forEach(t),p3o=r(O8e," \u2014 "),bD=n(O8e,"A",{href:!0});var emt=s(bD);u3o=r(emt,"LongformerForMaskedLM"),emt.forEach(t),_3o=r(O8e," (Longformer model)"),O8e.forEach(t),b3o=i(O),Z_=n(O,"LI",{});var V8e=s(Z_);efe=n(V8e,"STRONG",{});var omt=s(efe);v3o=r(omt,"lxmert"),omt.forEach(t),F3o=r(V8e," \u2014 "),vD=n(V8e,"A",{href:!0});var rmt=s(vD);T3o=r(rmt,"LxmertForPreTraining"),rmt.forEach(t),M3o=r(V8e," (LXMERT model)"),V8e.forEach(t),E3o=i(O),e1=n(O,"LI",{});var X8e=s(e1);ofe=n(X8e,"STRONG",{});var tmt=s(ofe);C3o=r(tmt,"megatron-bert"),tmt.forEach(t),w3o=r(X8e," \u2014 "),FD=n(X8e,"A",{href:!0});var amt=s(FD);A3o=r(amt,"MegatronBertForPreTraining"),amt.forEach(t),L3o=r(X8e," (Megatron-BERT model)"),X8e.forEach(t),y3o=i(O),o1=n(O,"LI",{});var z8e=s(o1);rfe=n(z8e,"STRONG",{});var nmt=s(rfe);x3o=r(nmt,"mobilebert"),nmt.forEach(t),$3o=r(z8e," \u2014 "),TD=n(z8e,"A",{href:!0});var smt=s(TD);k3o=r(smt,"MobileBertForPreTraining"),smt.forEach(t),S3o=r(z8e," (MobileBERT model)"),z8e.forEach(t),R3o=i(O),r1=n(O,"LI",{});var W8e=s(r1);tfe=n(W8e,"STRONG",{});var lmt=s(tfe);P3o=r(lmt,"mpnet"),lmt.forEach(t),B3o=r(W8e," \u2014 "),MD=n(W8e,"A",{href:!0});var imt=s(MD);I3o=r(imt,"MPNetForMaskedLM"),imt.forEach(t),N3o=r(W8e," (MPNet model)"),W8e.forEach(t),q3o=i(O),t1=n(O,"LI",{});var Q8e=s(t1);afe=n(Q8e,"STRONG",{});var dmt=s(afe);j3o=r(dmt,"openai-gpt"),dmt.forEach(t),D3o=r(Q8e," \u2014 "),ED=n(Q8e,"A",{href:!0});var cmt=s(ED);G3o=r(cmt,"OpenAIGPTLMHeadModel"),cmt.forEach(t),O3o=r(Q8e," (OpenAI GPT model)"),Q8e.forEach(t),V3o=i(O),a1=n(O,"LI",{});var H8e=s(a1);nfe=n(H8e,"STRONG",{});var fmt=s(nfe);X3o=r(fmt,"retribert"),fmt.forEach(t),z3o=r(H8e," \u2014 "),CD=n(H8e,"A",{href:!0});var mmt=s(CD);W3o=r(mmt,"RetriBertModel"),mmt.forEach(t),Q3o=r(H8e," (RetriBERT model)"),H8e.forEach(t),H3o=i(O),n1=n(O,"LI",{});var U8e=s(n1);sfe=n(U8e,"STRONG",{});var gmt=s(sfe);U3o=r(gmt,"roberta"),gmt.forEach(t),J3o=r(U8e," \u2014 "),wD=n(U8e,"A",{href:!0});var hmt=s(wD);Y3o=r(hmt,"RobertaForMaskedLM"),hmt.forEach(t),K3o=r(U8e," (RoBERTa model)"),U8e.forEach(t),Z3o=i(O),s1=n(O,"LI",{});var J8e=s(s1);lfe=n(J8e,"STRONG",{});var pmt=s(lfe);ewo=r(pmt,"splinter"),pmt.forEach(t),owo=r(J8e," \u2014 "),AD=n(J8e,"A",{href:!0});var umt=s(AD);rwo=r(umt,"SplinterForPreTraining"),umt.forEach(t),two=r(J8e," (Splinter model)"),J8e.forEach(t),awo=i(O),l1=n(O,"LI",{});var Y8e=s(l1);ife=n(Y8e,"STRONG",{});var _mt=s(ife);nwo=r(_mt,"squeezebert"),_mt.forEach(t),swo=r(Y8e," \u2014 "),LD=n(Y8e,"A",{href:!0});var bmt=s(LD);lwo=r(bmt,"SqueezeBertForMaskedLM"),bmt.forEach(t),iwo=r(Y8e," (SqueezeBERT model)"),Y8e.forEach(t),dwo=i(O),i1=n(O,"LI",{});var K8e=s(i1);dfe=n(K8e,"STRONG",{});var vmt=s(dfe);cwo=r(vmt,"t5"),vmt.forEach(t),fwo=r(K8e," \u2014 "),yD=n(K8e,"A",{href:!0});var Fmt=s(yD);mwo=r(Fmt,"T5ForConditionalGeneration"),Fmt.forEach(t),gwo=r(K8e," (T5 model)"),K8e.forEach(t),hwo=i(O),d1=n(O,"LI",{});var Z8e=s(d1);cfe=n(Z8e,"STRONG",{});var Tmt=s(cfe);pwo=r(Tmt,"tapas"),Tmt.forEach(t),uwo=r(Z8e," \u2014 "),xD=n(Z8e,"A",{href:!0});var Mmt=s(xD);_wo=r(Mmt,"TapasForMaskedLM"),Mmt.forEach(t),bwo=r(Z8e," (TAPAS model)"),Z8e.forEach(t),vwo=i(O),c1=n(O,"LI",{});var exe=s(c1);ffe=n(exe,"STRONG",{});var Emt=s(ffe);Fwo=r(Emt,"transfo-xl"),Emt.forEach(t),Two=r(exe," \u2014 "),$D=n(exe,"A",{href:!0});var Cmt=s($D);Mwo=r(Cmt,"TransfoXLLMHeadModel"),Cmt.forEach(t),Ewo=r(exe," (Transformer-XL model)"),exe.forEach(t),Cwo=i(O),f1=n(O,"LI",{});var oxe=s(f1);mfe=n(oxe,"STRONG",{});var wmt=s(mfe);wwo=r(wmt,"unispeech"),wmt.forEach(t),Awo=r(oxe," \u2014 "),kD=n(oxe,"A",{href:!0});var Amt=s(kD);Lwo=r(Amt,"UniSpeechForPreTraining"),Amt.forEach(t),ywo=r(oxe," (UniSpeech model)"),oxe.forEach(t),xwo=i(O),m1=n(O,"LI",{});var rxe=s(m1);gfe=n(rxe,"STRONG",{});var Lmt=s(gfe);$wo=r(Lmt,"unispeech-sat"),Lmt.forEach(t),kwo=r(rxe," \u2014 "),SD=n(rxe,"A",{href:!0});var ymt=s(SD);Swo=r(ymt,"UniSpeechSatForPreTraining"),ymt.forEach(t),Rwo=r(rxe," (UniSpeechSat model)"),rxe.forEach(t),Pwo=i(O),g1=n(O,"LI",{});var txe=s(g1);hfe=n(txe,"STRONG",{});var xmt=s(hfe);Bwo=r(xmt,"visual_bert"),xmt.forEach(t),Iwo=r(txe," \u2014 "),RD=n(txe,"A",{href:!0});var $mt=s(RD);Nwo=r($mt,"VisualBertForPreTraining"),$mt.forEach(t),qwo=r(txe," (VisualBERT model)"),txe.forEach(t),jwo=i(O),h1=n(O,"LI",{});var axe=s(h1);pfe=n(axe,"STRONG",{});var kmt=s(pfe);Dwo=r(kmt,"vit_mae"),kmt.forEach(t),Gwo=r(axe," \u2014 "),PD=n(axe,"A",{href:!0});var Smt=s(PD);Owo=r(Smt,"ViTMAEForPreTraining"),Smt.forEach(t),Vwo=r(axe," (ViTMAE model)"),axe.forEach(t),Xwo=i(O),p1=n(O,"LI",{});var nxe=s(p1);ufe=n(nxe,"STRONG",{});var Rmt=s(ufe);zwo=r(Rmt,"wav2vec2"),Rmt.forEach(t),Wwo=r(nxe," \u2014 "),BD=n(nxe,"A",{href:!0});var Pmt=s(BD);Qwo=r(Pmt,"Wav2Vec2ForPreTraining"),Pmt.forEach(t),Hwo=r(nxe," (Wav2Vec2 model)"),nxe.forEach(t),Uwo=i(O),u1=n(O,"LI",{});var sxe=s(u1);_fe=n(sxe,"STRONG",{});var Bmt=s(_fe);Jwo=r(Bmt,"wav2vec2-conformer"),Bmt.forEach(t),Ywo=r(sxe," \u2014 "),ID=n(sxe,"A",{href:!0});var Imt=s(ID);Kwo=r(Imt,"Wav2Vec2ConformerForPreTraining"),Imt.forEach(t),Zwo=r(sxe," (Wav2Vec2-Conformer model)"),sxe.forEach(t),eAo=i(O),_1=n(O,"LI",{});var lxe=s(_1);bfe=n(lxe,"STRONG",{});var Nmt=s(bfe);oAo=r(Nmt,"xlm"),Nmt.forEach(t),rAo=r(lxe," \u2014 "),ND=n(lxe,"A",{href:!0});var qmt=s(ND);tAo=r(qmt,"XLMWithLMHeadModel"),qmt.forEach(t),aAo=r(lxe," (XLM model)"),lxe.forEach(t),nAo=i(O),b1=n(O,"LI",{});var ixe=s(b1);vfe=n(ixe,"STRONG",{});var jmt=s(vfe);sAo=r(jmt,"xlm-roberta"),jmt.forEach(t),lAo=r(ixe," \u2014 "),qD=n(ixe,"A",{href:!0});var Dmt=s(qD);iAo=r(Dmt,"XLMRobertaForMaskedLM"),Dmt.forEach(t),dAo=r(ixe," (XLM-RoBERTa model)"),ixe.forEach(t),cAo=i(O),v1=n(O,"LI",{});var dxe=s(v1);Ffe=n(dxe,"STRONG",{});var Gmt=s(Ffe);fAo=r(Gmt,"xlm-roberta-xl"),Gmt.forEach(t),mAo=r(dxe," \u2014 "),jD=n(dxe,"A",{href:!0});var Omt=s(jD);gAo=r(Omt,"XLMRobertaXLForMaskedLM"),Omt.forEach(t),hAo=r(dxe," (XLM-RoBERTa-XL model)"),dxe.forEach(t),pAo=i(O),F1=n(O,"LI",{});var cxe=s(F1);Tfe=n(cxe,"STRONG",{});var Vmt=s(Tfe);uAo=r(Vmt,"xlnet"),Vmt.forEach(t),_Ao=r(cxe," \u2014 "),DD=n(cxe,"A",{href:!0});var Xmt=s(DD);bAo=r(Xmt,"XLNetLMHeadModel"),Xmt.forEach(t),vAo=r(cxe," (XLNet model)"),cxe.forEach(t),O.forEach(t),FAo=i(na),T1=n(na,"P",{});var fxe=s(T1);TAo=r(fxe,"The model is set in evaluation mode by default using "),Mfe=n(fxe,"CODE",{});var zmt=s(Mfe);MAo=r(zmt,"model.eval()"),zmt.forEach(t),EAo=r(fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Efe=n(fxe,"CODE",{});var Wmt=s(Efe);CAo=r(Wmt,"model.train()"),Wmt.forEach(t),fxe.forEach(t),wAo=i(na),T(M1.$$.fragment,na),na.forEach(t),Ys.forEach(t),FGe=i(f),Gi=n(f,"H2",{class:!0});var AVe=s(Gi);E1=n(AVe,"A",{id:!0,class:!0,href:!0});var Qmt=s(E1);Cfe=n(Qmt,"SPAN",{});var Hmt=s(Cfe);T(rL.$$.fragment,Hmt),Hmt.forEach(t),Qmt.forEach(t),AAo=i(AVe),wfe=n(AVe,"SPAN",{});var Umt=s(wfe);LAo=r(Umt,"AutoModelForCausalLM"),Umt.forEach(t),AVe.forEach(t),TGe=i(f),ko=n(f,"DIV",{class:!0});var Ks=s(ko);T(tL.$$.fragment,Ks),yAo=i(Ks),Oi=n(Ks,"P",{});var noe=s(Oi);xAo=r(noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GD=n(noe,"A",{href:!0});var Jmt=s(GD);$Ao=r(Jmt,"from_pretrained()"),Jmt.forEach(t),kAo=r(noe," class method or the "),OD=n(noe,"A",{href:!0});var Ymt=s(OD);SAo=r(Ymt,"from_config()"),Ymt.forEach(t),RAo=r(noe,` class
method.`),noe.forEach(t),PAo=i(Ks),aL=n(Ks,"P",{});var LVe=s(aL);BAo=r(LVe,"This class cannot be instantiated directly using "),Afe=n(LVe,"CODE",{});var Kmt=s(Afe);IAo=r(Kmt,"__init__()"),Kmt.forEach(t),NAo=r(LVe," (throws an error)."),LVe.forEach(t),qAo=i(Ks),lt=n(Ks,"DIV",{class:!0});var Aw=s(lt);T(nL.$$.fragment,Aw),jAo=i(Aw),Lfe=n(Aw,"P",{});var Zmt=s(Lfe);DAo=r(Zmt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Zmt.forEach(t),GAo=i(Aw),Vi=n(Aw,"P",{});var soe=s(Vi);OAo=r(soe,`Note:
Loading a model from its configuration file does `),yfe=n(soe,"STRONG",{});var egt=s(yfe);VAo=r(egt,"not"),egt.forEach(t),XAo=r(soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=n(soe,"A",{href:!0});var ogt=s(VD);zAo=r(ogt,"from_pretrained()"),ogt.forEach(t),WAo=r(soe," to load the model weights."),soe.forEach(t),QAo=i(Aw),T(C1.$$.fragment,Aw),Aw.forEach(t),HAo=i(Ks),Ke=n(Ks,"DIV",{class:!0});var sa=s(Ke);T(sL.$$.fragment,sa),UAo=i(sa),xfe=n(sa,"P",{});var rgt=s(xfe);JAo=r(rgt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rgt.forEach(t),YAo=i(sa),Pa=n(sa,"P",{});var Lw=s(Pa);KAo=r(Lw,"The model class to instantiate is selected based on the "),$fe=n(Lw,"CODE",{});var tgt=s($fe);ZAo=r(tgt,"model_type"),tgt.forEach(t),e6o=r(Lw,` property of the config object (either
passed as an argument or loaded from `),kfe=n(Lw,"CODE",{});var agt=s(kfe);o6o=r(agt,"pretrained_model_name_or_path"),agt.forEach(t),r6o=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=n(Lw,"CODE",{});var ngt=s(Sfe);t6o=r(ngt,"pretrained_model_name_or_path"),ngt.forEach(t),a6o=r(Lw,":"),Lw.forEach(t),n6o=i(sa),z=n(sa,"UL",{});var W=s(z);w1=n(W,"LI",{});var mxe=s(w1);Rfe=n(mxe,"STRONG",{});var sgt=s(Rfe);s6o=r(sgt,"bart"),sgt.forEach(t),l6o=r(mxe," \u2014 "),XD=n(mxe,"A",{href:!0});var lgt=s(XD);i6o=r(lgt,"BartForCausalLM"),lgt.forEach(t),d6o=r(mxe," (BART model)"),mxe.forEach(t),c6o=i(W),A1=n(W,"LI",{});var gxe=s(A1);Pfe=n(gxe,"STRONG",{});var igt=s(Pfe);f6o=r(igt,"bert"),igt.forEach(t),m6o=r(gxe," \u2014 "),zD=n(gxe,"A",{href:!0});var dgt=s(zD);g6o=r(dgt,"BertLMHeadModel"),dgt.forEach(t),h6o=r(gxe," (BERT model)"),gxe.forEach(t),p6o=i(W),L1=n(W,"LI",{});var hxe=s(L1);Bfe=n(hxe,"STRONG",{});var cgt=s(Bfe);u6o=r(cgt,"bert-generation"),cgt.forEach(t),_6o=r(hxe," \u2014 "),WD=n(hxe,"A",{href:!0});var fgt=s(WD);b6o=r(fgt,"BertGenerationDecoder"),fgt.forEach(t),v6o=r(hxe," (Bert Generation model)"),hxe.forEach(t),F6o=i(W),y1=n(W,"LI",{});var pxe=s(y1);Ife=n(pxe,"STRONG",{});var mgt=s(Ife);T6o=r(mgt,"big_bird"),mgt.forEach(t),M6o=r(pxe," \u2014 "),QD=n(pxe,"A",{href:!0});var ggt=s(QD);E6o=r(ggt,"BigBirdForCausalLM"),ggt.forEach(t),C6o=r(pxe," (BigBird model)"),pxe.forEach(t),w6o=i(W),x1=n(W,"LI",{});var uxe=s(x1);Nfe=n(uxe,"STRONG",{});var hgt=s(Nfe);A6o=r(hgt,"bigbird_pegasus"),hgt.forEach(t),L6o=r(uxe," \u2014 "),HD=n(uxe,"A",{href:!0});var pgt=s(HD);y6o=r(pgt,"BigBirdPegasusForCausalLM"),pgt.forEach(t),x6o=r(uxe," (BigBird-Pegasus model)"),uxe.forEach(t),$6o=i(W),$1=n(W,"LI",{});var _xe=s($1);qfe=n(_xe,"STRONG",{});var ugt=s(qfe);k6o=r(ugt,"blenderbot"),ugt.forEach(t),S6o=r(_xe," \u2014 "),UD=n(_xe,"A",{href:!0});var _gt=s(UD);R6o=r(_gt,"BlenderbotForCausalLM"),_gt.forEach(t),P6o=r(_xe," (Blenderbot model)"),_xe.forEach(t),B6o=i(W),k1=n(W,"LI",{});var bxe=s(k1);jfe=n(bxe,"STRONG",{});var bgt=s(jfe);I6o=r(bgt,"blenderbot-small"),bgt.forEach(t),N6o=r(bxe," \u2014 "),JD=n(bxe,"A",{href:!0});var vgt=s(JD);q6o=r(vgt,"BlenderbotSmallForCausalLM"),vgt.forEach(t),j6o=r(bxe," (BlenderbotSmall model)"),bxe.forEach(t),D6o=i(W),S1=n(W,"LI",{});var vxe=s(S1);Dfe=n(vxe,"STRONG",{});var Fgt=s(Dfe);G6o=r(Fgt,"bloom"),Fgt.forEach(t),O6o=r(vxe," \u2014 "),YD=n(vxe,"A",{href:!0});var Tgt=s(YD);V6o=r(Tgt,"BloomForCausalLM"),Tgt.forEach(t),X6o=r(vxe," (BLOOM model)"),vxe.forEach(t),z6o=i(W),R1=n(W,"LI",{});var Fxe=s(R1);Gfe=n(Fxe,"STRONG",{});var Mgt=s(Gfe);W6o=r(Mgt,"camembert"),Mgt.forEach(t),Q6o=r(Fxe," \u2014 "),KD=n(Fxe,"A",{href:!0});var Egt=s(KD);H6o=r(Egt,"CamembertForCausalLM"),Egt.forEach(t),U6o=r(Fxe," (CamemBERT model)"),Fxe.forEach(t),J6o=i(W),P1=n(W,"LI",{});var Txe=s(P1);Ofe=n(Txe,"STRONG",{});var Cgt=s(Ofe);Y6o=r(Cgt,"ctrl"),Cgt.forEach(t),K6o=r(Txe," \u2014 "),ZD=n(Txe,"A",{href:!0});var wgt=s(ZD);Z6o=r(wgt,"CTRLLMHeadModel"),wgt.forEach(t),eLo=r(Txe," (CTRL model)"),Txe.forEach(t),oLo=i(W),B1=n(W,"LI",{});var Mxe=s(B1);Vfe=n(Mxe,"STRONG",{});var Agt=s(Vfe);rLo=r(Agt,"data2vec-text"),Agt.forEach(t),tLo=r(Mxe," \u2014 "),eG=n(Mxe,"A",{href:!0});var Lgt=s(eG);aLo=r(Lgt,"Data2VecTextForCausalLM"),Lgt.forEach(t),nLo=r(Mxe," (Data2VecText model)"),Mxe.forEach(t),sLo=i(W),I1=n(W,"LI",{});var Exe=s(I1);Xfe=n(Exe,"STRONG",{});var ygt=s(Xfe);lLo=r(ygt,"electra"),ygt.forEach(t),iLo=r(Exe," \u2014 "),oG=n(Exe,"A",{href:!0});var xgt=s(oG);dLo=r(xgt,"ElectraForCausalLM"),xgt.forEach(t),cLo=r(Exe," (ELECTRA model)"),Exe.forEach(t),fLo=i(W),N1=n(W,"LI",{});var Cxe=s(N1);zfe=n(Cxe,"STRONG",{});var $gt=s(zfe);mLo=r($gt,"gpt2"),$gt.forEach(t),gLo=r(Cxe," \u2014 "),rG=n(Cxe,"A",{href:!0});var kgt=s(rG);hLo=r(kgt,"GPT2LMHeadModel"),kgt.forEach(t),pLo=r(Cxe," (OpenAI GPT-2 model)"),Cxe.forEach(t),uLo=i(W),q1=n(W,"LI",{});var wxe=s(q1);Wfe=n(wxe,"STRONG",{});var Sgt=s(Wfe);_Lo=r(Sgt,"gpt_neo"),Sgt.forEach(t),bLo=r(wxe," \u2014 "),tG=n(wxe,"A",{href:!0});var Rgt=s(tG);vLo=r(Rgt,"GPTNeoForCausalLM"),Rgt.forEach(t),FLo=r(wxe," (GPT Neo model)"),wxe.forEach(t),TLo=i(W),j1=n(W,"LI",{});var Axe=s(j1);Qfe=n(Axe,"STRONG",{});var Pgt=s(Qfe);MLo=r(Pgt,"gpt_neox"),Pgt.forEach(t),ELo=r(Axe," \u2014 "),aG=n(Axe,"A",{href:!0});var Bgt=s(aG);CLo=r(Bgt,"GPTNeoXForCausalLM"),Bgt.forEach(t),wLo=r(Axe," (GPT NeoX model)"),Axe.forEach(t),ALo=i(W),D1=n(W,"LI",{});var Lxe=s(D1);Hfe=n(Lxe,"STRONG",{});var Igt=s(Hfe);LLo=r(Igt,"gptj"),Igt.forEach(t),yLo=r(Lxe," \u2014 "),nG=n(Lxe,"A",{href:!0});var Ngt=s(nG);xLo=r(Ngt,"GPTJForCausalLM"),Ngt.forEach(t),$Lo=r(Lxe," (GPT-J model)"),Lxe.forEach(t),kLo=i(W),G1=n(W,"LI",{});var yxe=s(G1);Ufe=n(yxe,"STRONG",{});var qgt=s(Ufe);SLo=r(qgt,"marian"),qgt.forEach(t),RLo=r(yxe," \u2014 "),sG=n(yxe,"A",{href:!0});var jgt=s(sG);PLo=r(jgt,"MarianForCausalLM"),jgt.forEach(t),BLo=r(yxe," (Marian model)"),yxe.forEach(t),ILo=i(W),O1=n(W,"LI",{});var xxe=s(O1);Jfe=n(xxe,"STRONG",{});var Dgt=s(Jfe);NLo=r(Dgt,"mbart"),Dgt.forEach(t),qLo=r(xxe," \u2014 "),lG=n(xxe,"A",{href:!0});var Ggt=s(lG);jLo=r(Ggt,"MBartForCausalLM"),Ggt.forEach(t),DLo=r(xxe," (mBART model)"),xxe.forEach(t),GLo=i(W),V1=n(W,"LI",{});var $xe=s(V1);Yfe=n($xe,"STRONG",{});var Ogt=s(Yfe);OLo=r(Ogt,"megatron-bert"),Ogt.forEach(t),VLo=r($xe," \u2014 "),iG=n($xe,"A",{href:!0});var Vgt=s(iG);XLo=r(Vgt,"MegatronBertForCausalLM"),Vgt.forEach(t),zLo=r($xe," (Megatron-BERT model)"),$xe.forEach(t),WLo=i(W),X1=n(W,"LI",{});var kxe=s(X1);Kfe=n(kxe,"STRONG",{});var Xgt=s(Kfe);QLo=r(Xgt,"openai-gpt"),Xgt.forEach(t),HLo=r(kxe," \u2014 "),dG=n(kxe,"A",{href:!0});var zgt=s(dG);ULo=r(zgt,"OpenAIGPTLMHeadModel"),zgt.forEach(t),JLo=r(kxe," (OpenAI GPT model)"),kxe.forEach(t),YLo=i(W),z1=n(W,"LI",{});var Sxe=s(z1);Zfe=n(Sxe,"STRONG",{});var Wgt=s(Zfe);KLo=r(Wgt,"opt"),Wgt.forEach(t),ZLo=r(Sxe," \u2014 "),cG=n(Sxe,"A",{href:!0});var Qgt=s(cG);eyo=r(Qgt,"OPTForCausalLM"),Qgt.forEach(t),oyo=r(Sxe," (OPT model)"),Sxe.forEach(t),ryo=i(W),W1=n(W,"LI",{});var Rxe=s(W1);eme=n(Rxe,"STRONG",{});var Hgt=s(eme);tyo=r(Hgt,"pegasus"),Hgt.forEach(t),ayo=r(Rxe," \u2014 "),fG=n(Rxe,"A",{href:!0});var Ugt=s(fG);nyo=r(Ugt,"PegasusForCausalLM"),Ugt.forEach(t),syo=r(Rxe," (Pegasus model)"),Rxe.forEach(t),lyo=i(W),Q1=n(W,"LI",{});var Pxe=s(Q1);ome=n(Pxe,"STRONG",{});var Jgt=s(ome);iyo=r(Jgt,"plbart"),Jgt.forEach(t),dyo=r(Pxe," \u2014 "),mG=n(Pxe,"A",{href:!0});var Ygt=s(mG);cyo=r(Ygt,"PLBartForCausalLM"),Ygt.forEach(t),fyo=r(Pxe," (PLBart model)"),Pxe.forEach(t),myo=i(W),H1=n(W,"LI",{});var Bxe=s(H1);rme=n(Bxe,"STRONG",{});var Kgt=s(rme);gyo=r(Kgt,"prophetnet"),Kgt.forEach(t),hyo=r(Bxe," \u2014 "),gG=n(Bxe,"A",{href:!0});var Zgt=s(gG);pyo=r(Zgt,"ProphetNetForCausalLM"),Zgt.forEach(t),uyo=r(Bxe," (ProphetNet model)"),Bxe.forEach(t),_yo=i(W),U1=n(W,"LI",{});var Ixe=s(U1);tme=n(Ixe,"STRONG",{});var eht=s(tme);byo=r(eht,"qdqbert"),eht.forEach(t),vyo=r(Ixe," \u2014 "),hG=n(Ixe,"A",{href:!0});var oht=s(hG);Fyo=r(oht,"QDQBertLMHeadModel"),oht.forEach(t),Tyo=r(Ixe," (QDQBert model)"),Ixe.forEach(t),Myo=i(W),J1=n(W,"LI",{});var Nxe=s(J1);ame=n(Nxe,"STRONG",{});var rht=s(ame);Eyo=r(rht,"reformer"),rht.forEach(t),Cyo=r(Nxe," \u2014 "),pG=n(Nxe,"A",{href:!0});var tht=s(pG);wyo=r(tht,"ReformerModelWithLMHead"),tht.forEach(t),Ayo=r(Nxe," (Reformer model)"),Nxe.forEach(t),Lyo=i(W),Y1=n(W,"LI",{});var qxe=s(Y1);nme=n(qxe,"STRONG",{});var aht=s(nme);yyo=r(aht,"rembert"),aht.forEach(t),xyo=r(qxe," \u2014 "),uG=n(qxe,"A",{href:!0});var nht=s(uG);$yo=r(nht,"RemBertForCausalLM"),nht.forEach(t),kyo=r(qxe," (RemBERT model)"),qxe.forEach(t),Syo=i(W),K1=n(W,"LI",{});var jxe=s(K1);sme=n(jxe,"STRONG",{});var sht=s(sme);Ryo=r(sht,"roberta"),sht.forEach(t),Pyo=r(jxe," \u2014 "),_G=n(jxe,"A",{href:!0});var lht=s(_G);Byo=r(lht,"RobertaForCausalLM"),lht.forEach(t),Iyo=r(jxe," (RoBERTa model)"),jxe.forEach(t),Nyo=i(W),Z1=n(W,"LI",{});var Dxe=s(Z1);lme=n(Dxe,"STRONG",{});var iht=s(lme);qyo=r(iht,"roformer"),iht.forEach(t),jyo=r(Dxe," \u2014 "),bG=n(Dxe,"A",{href:!0});var dht=s(bG);Dyo=r(dht,"RoFormerForCausalLM"),dht.forEach(t),Gyo=r(Dxe," (RoFormer model)"),Dxe.forEach(t),Oyo=i(W),e2=n(W,"LI",{});var Gxe=s(e2);ime=n(Gxe,"STRONG",{});var cht=s(ime);Vyo=r(cht,"speech_to_text_2"),cht.forEach(t),Xyo=r(Gxe," \u2014 "),vG=n(Gxe,"A",{href:!0});var fht=s(vG);zyo=r(fht,"Speech2Text2ForCausalLM"),fht.forEach(t),Wyo=r(Gxe," (Speech2Text2 model)"),Gxe.forEach(t),Qyo=i(W),o2=n(W,"LI",{});var Oxe=s(o2);dme=n(Oxe,"STRONG",{});var mht=s(dme);Hyo=r(mht,"transfo-xl"),mht.forEach(t),Uyo=r(Oxe," \u2014 "),FG=n(Oxe,"A",{href:!0});var ght=s(FG);Jyo=r(ght,"TransfoXLLMHeadModel"),ght.forEach(t),Yyo=r(Oxe," (Transformer-XL model)"),Oxe.forEach(t),Kyo=i(W),r2=n(W,"LI",{});var Vxe=s(r2);cme=n(Vxe,"STRONG",{});var hht=s(cme);Zyo=r(hht,"trocr"),hht.forEach(t),e8o=r(Vxe," \u2014 "),TG=n(Vxe,"A",{href:!0});var pht=s(TG);o8o=r(pht,"TrOCRForCausalLM"),pht.forEach(t),r8o=r(Vxe," (TrOCR model)"),Vxe.forEach(t),t8o=i(W),t2=n(W,"LI",{});var Xxe=s(t2);fme=n(Xxe,"STRONG",{});var uht=s(fme);a8o=r(uht,"xglm"),uht.forEach(t),n8o=r(Xxe," \u2014 "),MG=n(Xxe,"A",{href:!0});var _ht=s(MG);s8o=r(_ht,"XGLMForCausalLM"),_ht.forEach(t),l8o=r(Xxe," (XGLM model)"),Xxe.forEach(t),i8o=i(W),a2=n(W,"LI",{});var zxe=s(a2);mme=n(zxe,"STRONG",{});var bht=s(mme);d8o=r(bht,"xlm"),bht.forEach(t),c8o=r(zxe," \u2014 "),EG=n(zxe,"A",{href:!0});var vht=s(EG);f8o=r(vht,"XLMWithLMHeadModel"),vht.forEach(t),m8o=r(zxe," (XLM model)"),zxe.forEach(t),g8o=i(W),n2=n(W,"LI",{});var Wxe=s(n2);gme=n(Wxe,"STRONG",{});var Fht=s(gme);h8o=r(Fht,"xlm-prophetnet"),Fht.forEach(t),p8o=r(Wxe," \u2014 "),CG=n(Wxe,"A",{href:!0});var Tht=s(CG);u8o=r(Tht,"XLMProphetNetForCausalLM"),Tht.forEach(t),_8o=r(Wxe," (XLM-ProphetNet model)"),Wxe.forEach(t),b8o=i(W),s2=n(W,"LI",{});var Qxe=s(s2);hme=n(Qxe,"STRONG",{});var Mht=s(hme);v8o=r(Mht,"xlm-roberta"),Mht.forEach(t),F8o=r(Qxe," \u2014 "),wG=n(Qxe,"A",{href:!0});var Eht=s(wG);T8o=r(Eht,"XLMRobertaForCausalLM"),Eht.forEach(t),M8o=r(Qxe," (XLM-RoBERTa model)"),Qxe.forEach(t),E8o=i(W),l2=n(W,"LI",{});var Hxe=s(l2);pme=n(Hxe,"STRONG",{});var Cht=s(pme);C8o=r(Cht,"xlm-roberta-xl"),Cht.forEach(t),w8o=r(Hxe," \u2014 "),AG=n(Hxe,"A",{href:!0});var wht=s(AG);A8o=r(wht,"XLMRobertaXLForCausalLM"),wht.forEach(t),L8o=r(Hxe," (XLM-RoBERTa-XL model)"),Hxe.forEach(t),y8o=i(W),i2=n(W,"LI",{});var Uxe=s(i2);ume=n(Uxe,"STRONG",{});var Aht=s(ume);x8o=r(Aht,"xlnet"),Aht.forEach(t),$8o=r(Uxe," \u2014 "),LG=n(Uxe,"A",{href:!0});var Lht=s(LG);k8o=r(Lht,"XLNetLMHeadModel"),Lht.forEach(t),S8o=r(Uxe," (XLNet model)"),Uxe.forEach(t),W.forEach(t),R8o=i(sa),d2=n(sa,"P",{});var Jxe=s(d2);P8o=r(Jxe,"The model is set in evaluation mode by default using "),_me=n(Jxe,"CODE",{});var yht=s(_me);B8o=r(yht,"model.eval()"),yht.forEach(t),I8o=r(Jxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bme=n(Jxe,"CODE",{});var xht=s(bme);N8o=r(xht,"model.train()"),xht.forEach(t),Jxe.forEach(t),q8o=i(sa),T(c2.$$.fragment,sa),sa.forEach(t),Ks.forEach(t),MGe=i(f),Xi=n(f,"H2",{class:!0});var yVe=s(Xi);f2=n(yVe,"A",{id:!0,class:!0,href:!0});var $ht=s(f2);vme=n($ht,"SPAN",{});var kht=s(vme);T(lL.$$.fragment,kht),kht.forEach(t),$ht.forEach(t),j8o=i(yVe),Fme=n(yVe,"SPAN",{});var Sht=s(Fme);D8o=r(Sht,"AutoModelForMaskedLM"),Sht.forEach(t),yVe.forEach(t),EGe=i(f),So=n(f,"DIV",{class:!0});var Zs=s(So);T(iL.$$.fragment,Zs),G8o=i(Zs),zi=n(Zs,"P",{});var loe=s(zi);O8o=r(loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yG=n(loe,"A",{href:!0});var Rht=s(yG);V8o=r(Rht,"from_pretrained()"),Rht.forEach(t),X8o=r(loe," class method or the "),xG=n(loe,"A",{href:!0});var Pht=s(xG);z8o=r(Pht,"from_config()"),Pht.forEach(t),W8o=r(loe,` class
method.`),loe.forEach(t),Q8o=i(Zs),dL=n(Zs,"P",{});var xVe=s(dL);H8o=r(xVe,"This class cannot be instantiated directly using "),Tme=n(xVe,"CODE",{});var Bht=s(Tme);U8o=r(Bht,"__init__()"),Bht.forEach(t),J8o=r(xVe," (throws an error)."),xVe.forEach(t),Y8o=i(Zs),it=n(Zs,"DIV",{class:!0});var yw=s(it);T(cL.$$.fragment,yw),K8o=i(yw),Mme=n(yw,"P",{});var Iht=s(Mme);Z8o=r(Iht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Iht.forEach(t),exo=i(yw),Wi=n(yw,"P",{});var ioe=s(Wi);oxo=r(ioe,`Note:
Loading a model from its configuration file does `),Eme=n(ioe,"STRONG",{});var Nht=s(Eme);rxo=r(Nht,"not"),Nht.forEach(t),txo=r(ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$G=n(ioe,"A",{href:!0});var qht=s($G);axo=r(qht,"from_pretrained()"),qht.forEach(t),nxo=r(ioe," to load the model weights."),ioe.forEach(t),sxo=i(yw),T(m2.$$.fragment,yw),yw.forEach(t),lxo=i(Zs),Ze=n(Zs,"DIV",{class:!0});var la=s(Ze);T(fL.$$.fragment,la),ixo=i(la),Cme=n(la,"P",{});var jht=s(Cme);dxo=r(jht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jht.forEach(t),cxo=i(la),Ba=n(la,"P",{});var xw=s(Ba);fxo=r(xw,"The model class to instantiate is selected based on the "),wme=n(xw,"CODE",{});var Dht=s(wme);mxo=r(Dht,"model_type"),Dht.forEach(t),gxo=r(xw,` property of the config object (either
passed as an argument or loaded from `),Ame=n(xw,"CODE",{});var Ght=s(Ame);hxo=r(Ght,"pretrained_model_name_or_path"),Ght.forEach(t),pxo=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=n(xw,"CODE",{});var Oht=s(Lme);uxo=r(Oht,"pretrained_model_name_or_path"),Oht.forEach(t),_xo=r(xw,":"),xw.forEach(t),bxo=i(la),Q=n(la,"UL",{});var H=s(Q);g2=n(H,"LI",{});var Yxe=s(g2);yme=n(Yxe,"STRONG",{});var Vht=s(yme);vxo=r(Vht,"albert"),Vht.forEach(t),Fxo=r(Yxe," \u2014 "),kG=n(Yxe,"A",{href:!0});var Xht=s(kG);Txo=r(Xht,"AlbertForMaskedLM"),Xht.forEach(t),Mxo=r(Yxe," (ALBERT model)"),Yxe.forEach(t),Exo=i(H),h2=n(H,"LI",{});var Kxe=s(h2);xme=n(Kxe,"STRONG",{});var zht=s(xme);Cxo=r(zht,"bart"),zht.forEach(t),wxo=r(Kxe," \u2014 "),SG=n(Kxe,"A",{href:!0});var Wht=s(SG);Axo=r(Wht,"BartForConditionalGeneration"),Wht.forEach(t),Lxo=r(Kxe," (BART model)"),Kxe.forEach(t),yxo=i(H),p2=n(H,"LI",{});var Zxe=s(p2);$me=n(Zxe,"STRONG",{});var Qht=s($me);xxo=r(Qht,"bert"),Qht.forEach(t),$xo=r(Zxe," \u2014 "),RG=n(Zxe,"A",{href:!0});var Hht=s(RG);kxo=r(Hht,"BertForMaskedLM"),Hht.forEach(t),Sxo=r(Zxe," (BERT model)"),Zxe.forEach(t),Rxo=i(H),u2=n(H,"LI",{});var e$e=s(u2);kme=n(e$e,"STRONG",{});var Uht=s(kme);Pxo=r(Uht,"big_bird"),Uht.forEach(t),Bxo=r(e$e," \u2014 "),PG=n(e$e,"A",{href:!0});var Jht=s(PG);Ixo=r(Jht,"BigBirdForMaskedLM"),Jht.forEach(t),Nxo=r(e$e," (BigBird model)"),e$e.forEach(t),qxo=i(H),_2=n(H,"LI",{});var o$e=s(_2);Sme=n(o$e,"STRONG",{});var Yht=s(Sme);jxo=r(Yht,"camembert"),Yht.forEach(t),Dxo=r(o$e," \u2014 "),BG=n(o$e,"A",{href:!0});var Kht=s(BG);Gxo=r(Kht,"CamembertForMaskedLM"),Kht.forEach(t),Oxo=r(o$e," (CamemBERT model)"),o$e.forEach(t),Vxo=i(H),b2=n(H,"LI",{});var r$e=s(b2);Rme=n(r$e,"STRONG",{});var Zht=s(Rme);Xxo=r(Zht,"convbert"),Zht.forEach(t),zxo=r(r$e," \u2014 "),IG=n(r$e,"A",{href:!0});var ept=s(IG);Wxo=r(ept,"ConvBertForMaskedLM"),ept.forEach(t),Qxo=r(r$e," (ConvBERT model)"),r$e.forEach(t),Hxo=i(H),v2=n(H,"LI",{});var t$e=s(v2);Pme=n(t$e,"STRONG",{});var opt=s(Pme);Uxo=r(opt,"data2vec-text"),opt.forEach(t),Jxo=r(t$e," \u2014 "),NG=n(t$e,"A",{href:!0});var rpt=s(NG);Yxo=r(rpt,"Data2VecTextForMaskedLM"),rpt.forEach(t),Kxo=r(t$e," (Data2VecText model)"),t$e.forEach(t),Zxo=i(H),F2=n(H,"LI",{});var a$e=s(F2);Bme=n(a$e,"STRONG",{});var tpt=s(Bme);e$o=r(tpt,"deberta"),tpt.forEach(t),o$o=r(a$e," \u2014 "),qG=n(a$e,"A",{href:!0});var apt=s(qG);r$o=r(apt,"DebertaForMaskedLM"),apt.forEach(t),t$o=r(a$e," (DeBERTa model)"),a$e.forEach(t),a$o=i(H),T2=n(H,"LI",{});var n$e=s(T2);Ime=n(n$e,"STRONG",{});var npt=s(Ime);n$o=r(npt,"deberta-v2"),npt.forEach(t),s$o=r(n$e," \u2014 "),jG=n(n$e,"A",{href:!0});var spt=s(jG);l$o=r(spt,"DebertaV2ForMaskedLM"),spt.forEach(t),i$o=r(n$e," (DeBERTa-v2 model)"),n$e.forEach(t),d$o=i(H),M2=n(H,"LI",{});var s$e=s(M2);Nme=n(s$e,"STRONG",{});var lpt=s(Nme);c$o=r(lpt,"distilbert"),lpt.forEach(t),f$o=r(s$e," \u2014 "),DG=n(s$e,"A",{href:!0});var ipt=s(DG);m$o=r(ipt,"DistilBertForMaskedLM"),ipt.forEach(t),g$o=r(s$e," (DistilBERT model)"),s$e.forEach(t),h$o=i(H),E2=n(H,"LI",{});var l$e=s(E2);qme=n(l$e,"STRONG",{});var dpt=s(qme);p$o=r(dpt,"electra"),dpt.forEach(t),u$o=r(l$e," \u2014 "),GG=n(l$e,"A",{href:!0});var cpt=s(GG);_$o=r(cpt,"ElectraForMaskedLM"),cpt.forEach(t),b$o=r(l$e," (ELECTRA model)"),l$e.forEach(t),v$o=i(H),C2=n(H,"LI",{});var i$e=s(C2);jme=n(i$e,"STRONG",{});var fpt=s(jme);F$o=r(fpt,"flaubert"),fpt.forEach(t),T$o=r(i$e," \u2014 "),OG=n(i$e,"A",{href:!0});var mpt=s(OG);M$o=r(mpt,"FlaubertWithLMHeadModel"),mpt.forEach(t),E$o=r(i$e," (FlauBERT model)"),i$e.forEach(t),C$o=i(H),w2=n(H,"LI",{});var d$e=s(w2);Dme=n(d$e,"STRONG",{});var gpt=s(Dme);w$o=r(gpt,"fnet"),gpt.forEach(t),A$o=r(d$e," \u2014 "),VG=n(d$e,"A",{href:!0});var hpt=s(VG);L$o=r(hpt,"FNetForMaskedLM"),hpt.forEach(t),y$o=r(d$e," (FNet model)"),d$e.forEach(t),x$o=i(H),A2=n(H,"LI",{});var c$e=s(A2);Gme=n(c$e,"STRONG",{});var ppt=s(Gme);$$o=r(ppt,"funnel"),ppt.forEach(t),k$o=r(c$e," \u2014 "),XG=n(c$e,"A",{href:!0});var upt=s(XG);S$o=r(upt,"FunnelForMaskedLM"),upt.forEach(t),R$o=r(c$e," (Funnel Transformer model)"),c$e.forEach(t),P$o=i(H),L2=n(H,"LI",{});var f$e=s(L2);Ome=n(f$e,"STRONG",{});var _pt=s(Ome);B$o=r(_pt,"ibert"),_pt.forEach(t),I$o=r(f$e," \u2014 "),zG=n(f$e,"A",{href:!0});var bpt=s(zG);N$o=r(bpt,"IBertForMaskedLM"),bpt.forEach(t),q$o=r(f$e," (I-BERT model)"),f$e.forEach(t),j$o=i(H),y2=n(H,"LI",{});var m$e=s(y2);Vme=n(m$e,"STRONG",{});var vpt=s(Vme);D$o=r(vpt,"layoutlm"),vpt.forEach(t),G$o=r(m$e," \u2014 "),WG=n(m$e,"A",{href:!0});var Fpt=s(WG);O$o=r(Fpt,"LayoutLMForMaskedLM"),Fpt.forEach(t),V$o=r(m$e," (LayoutLM model)"),m$e.forEach(t),X$o=i(H),x2=n(H,"LI",{});var g$e=s(x2);Xme=n(g$e,"STRONG",{});var Tpt=s(Xme);z$o=r(Tpt,"longformer"),Tpt.forEach(t),W$o=r(g$e," \u2014 "),QG=n(g$e,"A",{href:!0});var Mpt=s(QG);Q$o=r(Mpt,"LongformerForMaskedLM"),Mpt.forEach(t),H$o=r(g$e," (Longformer model)"),g$e.forEach(t),U$o=i(H),$2=n(H,"LI",{});var h$e=s($2);zme=n(h$e,"STRONG",{});var Ept=s(zme);J$o=r(Ept,"luke"),Ept.forEach(t),Y$o=r(h$e," \u2014 "),HG=n(h$e,"A",{href:!0});var Cpt=s(HG);K$o=r(Cpt,"LukeForMaskedLM"),Cpt.forEach(t),Z$o=r(h$e," (LUKE model)"),h$e.forEach(t),eko=i(H),k2=n(H,"LI",{});var p$e=s(k2);Wme=n(p$e,"STRONG",{});var wpt=s(Wme);oko=r(wpt,"mbart"),wpt.forEach(t),rko=r(p$e," \u2014 "),UG=n(p$e,"A",{href:!0});var Apt=s(UG);tko=r(Apt,"MBartForConditionalGeneration"),Apt.forEach(t),ako=r(p$e," (mBART model)"),p$e.forEach(t),nko=i(H),S2=n(H,"LI",{});var u$e=s(S2);Qme=n(u$e,"STRONG",{});var Lpt=s(Qme);sko=r(Lpt,"megatron-bert"),Lpt.forEach(t),lko=r(u$e," \u2014 "),JG=n(u$e,"A",{href:!0});var ypt=s(JG);iko=r(ypt,"MegatronBertForMaskedLM"),ypt.forEach(t),dko=r(u$e," (Megatron-BERT model)"),u$e.forEach(t),cko=i(H),R2=n(H,"LI",{});var _$e=s(R2);Hme=n(_$e,"STRONG",{});var xpt=s(Hme);fko=r(xpt,"mobilebert"),xpt.forEach(t),mko=r(_$e," \u2014 "),YG=n(_$e,"A",{href:!0});var $pt=s(YG);gko=r($pt,"MobileBertForMaskedLM"),$pt.forEach(t),hko=r(_$e," (MobileBERT model)"),_$e.forEach(t),pko=i(H),P2=n(H,"LI",{});var b$e=s(P2);Ume=n(b$e,"STRONG",{});var kpt=s(Ume);uko=r(kpt,"mpnet"),kpt.forEach(t),_ko=r(b$e," \u2014 "),KG=n(b$e,"A",{href:!0});var Spt=s(KG);bko=r(Spt,"MPNetForMaskedLM"),Spt.forEach(t),vko=r(b$e," (MPNet model)"),b$e.forEach(t),Fko=i(H),B2=n(H,"LI",{});var v$e=s(B2);Jme=n(v$e,"STRONG",{});var Rpt=s(Jme);Tko=r(Rpt,"nystromformer"),Rpt.forEach(t),Mko=r(v$e," \u2014 "),ZG=n(v$e,"A",{href:!0});var Ppt=s(ZG);Eko=r(Ppt,"NystromformerForMaskedLM"),Ppt.forEach(t),Cko=r(v$e," (Nystr\xF6mformer model)"),v$e.forEach(t),wko=i(H),I2=n(H,"LI",{});var F$e=s(I2);Yme=n(F$e,"STRONG",{});var Bpt=s(Yme);Ako=r(Bpt,"perceiver"),Bpt.forEach(t),Lko=r(F$e," \u2014 "),eO=n(F$e,"A",{href:!0});var Ipt=s(eO);yko=r(Ipt,"PerceiverForMaskedLM"),Ipt.forEach(t),xko=r(F$e," (Perceiver model)"),F$e.forEach(t),$ko=i(H),N2=n(H,"LI",{});var T$e=s(N2);Kme=n(T$e,"STRONG",{});var Npt=s(Kme);kko=r(Npt,"qdqbert"),Npt.forEach(t),Sko=r(T$e," \u2014 "),oO=n(T$e,"A",{href:!0});var qpt=s(oO);Rko=r(qpt,"QDQBertForMaskedLM"),qpt.forEach(t),Pko=r(T$e," (QDQBert model)"),T$e.forEach(t),Bko=i(H),q2=n(H,"LI",{});var M$e=s(q2);Zme=n(M$e,"STRONG",{});var jpt=s(Zme);Iko=r(jpt,"reformer"),jpt.forEach(t),Nko=r(M$e," \u2014 "),rO=n(M$e,"A",{href:!0});var Dpt=s(rO);qko=r(Dpt,"ReformerForMaskedLM"),Dpt.forEach(t),jko=r(M$e," (Reformer model)"),M$e.forEach(t),Dko=i(H),j2=n(H,"LI",{});var E$e=s(j2);ege=n(E$e,"STRONG",{});var Gpt=s(ege);Gko=r(Gpt,"rembert"),Gpt.forEach(t),Oko=r(E$e," \u2014 "),tO=n(E$e,"A",{href:!0});var Opt=s(tO);Vko=r(Opt,"RemBertForMaskedLM"),Opt.forEach(t),Xko=r(E$e," (RemBERT model)"),E$e.forEach(t),zko=i(H),D2=n(H,"LI",{});var C$e=s(D2);oge=n(C$e,"STRONG",{});var Vpt=s(oge);Wko=r(Vpt,"roberta"),Vpt.forEach(t),Qko=r(C$e," \u2014 "),aO=n(C$e,"A",{href:!0});var Xpt=s(aO);Hko=r(Xpt,"RobertaForMaskedLM"),Xpt.forEach(t),Uko=r(C$e," (RoBERTa model)"),C$e.forEach(t),Jko=i(H),G2=n(H,"LI",{});var w$e=s(G2);rge=n(w$e,"STRONG",{});var zpt=s(rge);Yko=r(zpt,"roformer"),zpt.forEach(t),Kko=r(w$e," \u2014 "),nO=n(w$e,"A",{href:!0});var Wpt=s(nO);Zko=r(Wpt,"RoFormerForMaskedLM"),Wpt.forEach(t),eSo=r(w$e," (RoFormer model)"),w$e.forEach(t),oSo=i(H),O2=n(H,"LI",{});var A$e=s(O2);tge=n(A$e,"STRONG",{});var Qpt=s(tge);rSo=r(Qpt,"squeezebert"),Qpt.forEach(t),tSo=r(A$e," \u2014 "),sO=n(A$e,"A",{href:!0});var Hpt=s(sO);aSo=r(Hpt,"SqueezeBertForMaskedLM"),Hpt.forEach(t),nSo=r(A$e," (SqueezeBERT model)"),A$e.forEach(t),sSo=i(H),V2=n(H,"LI",{});var L$e=s(V2);age=n(L$e,"STRONG",{});var Upt=s(age);lSo=r(Upt,"tapas"),Upt.forEach(t),iSo=r(L$e," \u2014 "),lO=n(L$e,"A",{href:!0});var Jpt=s(lO);dSo=r(Jpt,"TapasForMaskedLM"),Jpt.forEach(t),cSo=r(L$e," (TAPAS model)"),L$e.forEach(t),fSo=i(H),X2=n(H,"LI",{});var y$e=s(X2);nge=n(y$e,"STRONG",{});var Ypt=s(nge);mSo=r(Ypt,"wav2vec2"),Ypt.forEach(t),gSo=r(y$e," \u2014 "),sge=n(y$e,"CODE",{});var Kpt=s(sge);hSo=r(Kpt,"Wav2Vec2ForMaskedLM"),Kpt.forEach(t),pSo=r(y$e," (Wav2Vec2 model)"),y$e.forEach(t),uSo=i(H),z2=n(H,"LI",{});var x$e=s(z2);lge=n(x$e,"STRONG",{});var Zpt=s(lge);_So=r(Zpt,"xlm"),Zpt.forEach(t),bSo=r(x$e," \u2014 "),iO=n(x$e,"A",{href:!0});var eut=s(iO);vSo=r(eut,"XLMWithLMHeadModel"),eut.forEach(t),FSo=r(x$e," (XLM model)"),x$e.forEach(t),TSo=i(H),W2=n(H,"LI",{});var $$e=s(W2);ige=n($$e,"STRONG",{});var out=s(ige);MSo=r(out,"xlm-roberta"),out.forEach(t),ESo=r($$e," \u2014 "),dO=n($$e,"A",{href:!0});var rut=s(dO);CSo=r(rut,"XLMRobertaForMaskedLM"),rut.forEach(t),wSo=r($$e," (XLM-RoBERTa model)"),$$e.forEach(t),ASo=i(H),Q2=n(H,"LI",{});var k$e=s(Q2);dge=n(k$e,"STRONG",{});var tut=s(dge);LSo=r(tut,"xlm-roberta-xl"),tut.forEach(t),ySo=r(k$e," \u2014 "),cO=n(k$e,"A",{href:!0});var aut=s(cO);xSo=r(aut,"XLMRobertaXLForMaskedLM"),aut.forEach(t),$So=r(k$e," (XLM-RoBERTa-XL model)"),k$e.forEach(t),kSo=i(H),H2=n(H,"LI",{});var S$e=s(H2);cge=n(S$e,"STRONG",{});var nut=s(cge);SSo=r(nut,"yoso"),nut.forEach(t),RSo=r(S$e," \u2014 "),fO=n(S$e,"A",{href:!0});var sut=s(fO);PSo=r(sut,"YosoForMaskedLM"),sut.forEach(t),BSo=r(S$e," (YOSO model)"),S$e.forEach(t),H.forEach(t),ISo=i(la),U2=n(la,"P",{});var R$e=s(U2);NSo=r(R$e,"The model is set in evaluation mode by default using "),fge=n(R$e,"CODE",{});var lut=s(fge);qSo=r(lut,"model.eval()"),lut.forEach(t),jSo=r(R$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mge=n(R$e,"CODE",{});var iut=s(mge);DSo=r(iut,"model.train()"),iut.forEach(t),R$e.forEach(t),GSo=i(la),T(J2.$$.fragment,la),la.forEach(t),Zs.forEach(t),CGe=i(f),Qi=n(f,"H2",{class:!0});var $Ve=s(Qi);Y2=n($Ve,"A",{id:!0,class:!0,href:!0});var dut=s(Y2);gge=n(dut,"SPAN",{});var cut=s(gge);T(mL.$$.fragment,cut),cut.forEach(t),dut.forEach(t),OSo=i($Ve),hge=n($Ve,"SPAN",{});var fut=s(hge);VSo=r(fut,"AutoModelForSeq2SeqLM"),fut.forEach(t),$Ve.forEach(t),wGe=i(f),Ro=n(f,"DIV",{class:!0});var el=s(Ro);T(gL.$$.fragment,el),XSo=i(el),Hi=n(el,"P",{});var doe=s(Hi);zSo=r(doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mO=n(doe,"A",{href:!0});var mut=s(mO);WSo=r(mut,"from_pretrained()"),mut.forEach(t),QSo=r(doe," class method or the "),gO=n(doe,"A",{href:!0});var gut=s(gO);HSo=r(gut,"from_config()"),gut.forEach(t),USo=r(doe,` class
method.`),doe.forEach(t),JSo=i(el),hL=n(el,"P",{});var kVe=s(hL);YSo=r(kVe,"This class cannot be instantiated directly using "),pge=n(kVe,"CODE",{});var hut=s(pge);KSo=r(hut,"__init__()"),hut.forEach(t),ZSo=r(kVe," (throws an error)."),kVe.forEach(t),eRo=i(el),dt=n(el,"DIV",{class:!0});var $w=s(dt);T(pL.$$.fragment,$w),oRo=i($w),uge=n($w,"P",{});var put=s(uge);rRo=r(put,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),put.forEach(t),tRo=i($w),Ui=n($w,"P",{});var coe=s(Ui);aRo=r(coe,`Note:
Loading a model from its configuration file does `),_ge=n(coe,"STRONG",{});var uut=s(_ge);nRo=r(uut,"not"),uut.forEach(t),sRo=r(coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=n(coe,"A",{href:!0});var _ut=s(hO);lRo=r(_ut,"from_pretrained()"),_ut.forEach(t),iRo=r(coe," to load the model weights."),coe.forEach(t),dRo=i($w),T(K2.$$.fragment,$w),$w.forEach(t),cRo=i(el),eo=n(el,"DIV",{class:!0});var ia=s(eo);T(uL.$$.fragment,ia),fRo=i(ia),bge=n(ia,"P",{});var but=s(bge);mRo=r(but,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),but.forEach(t),gRo=i(ia),Ia=n(ia,"P",{});var kw=s(Ia);hRo=r(kw,"The model class to instantiate is selected based on the "),vge=n(kw,"CODE",{});var vut=s(vge);pRo=r(vut,"model_type"),vut.forEach(t),uRo=r(kw,` property of the config object (either
passed as an argument or loaded from `),Fge=n(kw,"CODE",{});var Fut=s(Fge);_Ro=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),bRo=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tge=n(kw,"CODE",{});var Tut=s(Tge);vRo=r(Tut,"pretrained_model_name_or_path"),Tut.forEach(t),FRo=r(kw,":"),kw.forEach(t),TRo=i(ia),pe=n(ia,"UL",{});var be=s(pe);Z2=n(be,"LI",{});var P$e=s(Z2);Mge=n(P$e,"STRONG",{});var Mut=s(Mge);MRo=r(Mut,"bart"),Mut.forEach(t),ERo=r(P$e," \u2014 "),pO=n(P$e,"A",{href:!0});var Eut=s(pO);CRo=r(Eut,"BartForConditionalGeneration"),Eut.forEach(t),wRo=r(P$e," (BART model)"),P$e.forEach(t),ARo=i(be),eb=n(be,"LI",{});var B$e=s(eb);Ege=n(B$e,"STRONG",{});var Cut=s(Ege);LRo=r(Cut,"bigbird_pegasus"),Cut.forEach(t),yRo=r(B$e," \u2014 "),uO=n(B$e,"A",{href:!0});var wut=s(uO);xRo=r(wut,"BigBirdPegasusForConditionalGeneration"),wut.forEach(t),$Ro=r(B$e," (BigBird-Pegasus model)"),B$e.forEach(t),kRo=i(be),ob=n(be,"LI",{});var I$e=s(ob);Cge=n(I$e,"STRONG",{});var Aut=s(Cge);SRo=r(Aut,"blenderbot"),Aut.forEach(t),RRo=r(I$e," \u2014 "),_O=n(I$e,"A",{href:!0});var Lut=s(_O);PRo=r(Lut,"BlenderbotForConditionalGeneration"),Lut.forEach(t),BRo=r(I$e," (Blenderbot model)"),I$e.forEach(t),IRo=i(be),rb=n(be,"LI",{});var N$e=s(rb);wge=n(N$e,"STRONG",{});var yut=s(wge);NRo=r(yut,"blenderbot-small"),yut.forEach(t),qRo=r(N$e," \u2014 "),bO=n(N$e,"A",{href:!0});var xut=s(bO);jRo=r(xut,"BlenderbotSmallForConditionalGeneration"),xut.forEach(t),DRo=r(N$e," (BlenderbotSmall model)"),N$e.forEach(t),GRo=i(be),tb=n(be,"LI",{});var q$e=s(tb);Age=n(q$e,"STRONG",{});var $ut=s(Age);ORo=r($ut,"encoder-decoder"),$ut.forEach(t),VRo=r(q$e," \u2014 "),vO=n(q$e,"A",{href:!0});var kut=s(vO);XRo=r(kut,"EncoderDecoderModel"),kut.forEach(t),zRo=r(q$e," (Encoder decoder model)"),q$e.forEach(t),WRo=i(be),ab=n(be,"LI",{});var j$e=s(ab);Lge=n(j$e,"STRONG",{});var Sut=s(Lge);QRo=r(Sut,"fsmt"),Sut.forEach(t),HRo=r(j$e," \u2014 "),FO=n(j$e,"A",{href:!0});var Rut=s(FO);URo=r(Rut,"FSMTForConditionalGeneration"),Rut.forEach(t),JRo=r(j$e," (FairSeq Machine-Translation model)"),j$e.forEach(t),YRo=i(be),nb=n(be,"LI",{});var D$e=s(nb);yge=n(D$e,"STRONG",{});var Put=s(yge);KRo=r(Put,"led"),Put.forEach(t),ZRo=r(D$e," \u2014 "),TO=n(D$e,"A",{href:!0});var But=s(TO);ePo=r(But,"LEDForConditionalGeneration"),But.forEach(t),oPo=r(D$e," (LED model)"),D$e.forEach(t),rPo=i(be),sb=n(be,"LI",{});var G$e=s(sb);xge=n(G$e,"STRONG",{});var Iut=s(xge);tPo=r(Iut,"longt5"),Iut.forEach(t),aPo=r(G$e," \u2014 "),MO=n(G$e,"A",{href:!0});var Nut=s(MO);nPo=r(Nut,"LongT5ForConditionalGeneration"),Nut.forEach(t),sPo=r(G$e," (LongT5 model)"),G$e.forEach(t),lPo=i(be),lb=n(be,"LI",{});var O$e=s(lb);$ge=n(O$e,"STRONG",{});var qut=s($ge);iPo=r(qut,"m2m_100"),qut.forEach(t),dPo=r(O$e," \u2014 "),EO=n(O$e,"A",{href:!0});var jut=s(EO);cPo=r(jut,"M2M100ForConditionalGeneration"),jut.forEach(t),fPo=r(O$e," (M2M100 model)"),O$e.forEach(t),mPo=i(be),ib=n(be,"LI",{});var V$e=s(ib);kge=n(V$e,"STRONG",{});var Dut=s(kge);gPo=r(Dut,"marian"),Dut.forEach(t),hPo=r(V$e," \u2014 "),CO=n(V$e,"A",{href:!0});var Gut=s(CO);pPo=r(Gut,"MarianMTModel"),Gut.forEach(t),uPo=r(V$e," (Marian model)"),V$e.forEach(t),_Po=i(be),db=n(be,"LI",{});var X$e=s(db);Sge=n(X$e,"STRONG",{});var Out=s(Sge);bPo=r(Out,"mbart"),Out.forEach(t),vPo=r(X$e," \u2014 "),wO=n(X$e,"A",{href:!0});var Vut=s(wO);FPo=r(Vut,"MBartForConditionalGeneration"),Vut.forEach(t),TPo=r(X$e," (mBART model)"),X$e.forEach(t),MPo=i(be),cb=n(be,"LI",{});var z$e=s(cb);Rge=n(z$e,"STRONG",{});var Xut=s(Rge);EPo=r(Xut,"mt5"),Xut.forEach(t),CPo=r(z$e," \u2014 "),AO=n(z$e,"A",{href:!0});var zut=s(AO);wPo=r(zut,"MT5ForConditionalGeneration"),zut.forEach(t),APo=r(z$e," (MT5 model)"),z$e.forEach(t),LPo=i(be),fb=n(be,"LI",{});var W$e=s(fb);Pge=n(W$e,"STRONG",{});var Wut=s(Pge);yPo=r(Wut,"pegasus"),Wut.forEach(t),xPo=r(W$e," \u2014 "),LO=n(W$e,"A",{href:!0});var Qut=s(LO);$Po=r(Qut,"PegasusForConditionalGeneration"),Qut.forEach(t),kPo=r(W$e," (Pegasus model)"),W$e.forEach(t),SPo=i(be),mb=n(be,"LI",{});var Q$e=s(mb);Bge=n(Q$e,"STRONG",{});var Hut=s(Bge);RPo=r(Hut,"plbart"),Hut.forEach(t),PPo=r(Q$e," \u2014 "),yO=n(Q$e,"A",{href:!0});var Uut=s(yO);BPo=r(Uut,"PLBartForConditionalGeneration"),Uut.forEach(t),IPo=r(Q$e," (PLBart model)"),Q$e.forEach(t),NPo=i(be),gb=n(be,"LI",{});var H$e=s(gb);Ige=n(H$e,"STRONG",{});var Jut=s(Ige);qPo=r(Jut,"prophetnet"),Jut.forEach(t),jPo=r(H$e," \u2014 "),xO=n(H$e,"A",{href:!0});var Yut=s(xO);DPo=r(Yut,"ProphetNetForConditionalGeneration"),Yut.forEach(t),GPo=r(H$e," (ProphetNet model)"),H$e.forEach(t),OPo=i(be),hb=n(be,"LI",{});var U$e=s(hb);Nge=n(U$e,"STRONG",{});var Kut=s(Nge);VPo=r(Kut,"t5"),Kut.forEach(t),XPo=r(U$e," \u2014 "),$O=n(U$e,"A",{href:!0});var Zut=s($O);zPo=r(Zut,"T5ForConditionalGeneration"),Zut.forEach(t),WPo=r(U$e," (T5 model)"),U$e.forEach(t),QPo=i(be),pb=n(be,"LI",{});var J$e=s(pb);qge=n(J$e,"STRONG",{});var e_t=s(qge);HPo=r(e_t,"xlm-prophetnet"),e_t.forEach(t),UPo=r(J$e," \u2014 "),kO=n(J$e,"A",{href:!0});var o_t=s(kO);JPo=r(o_t,"XLMProphetNetForConditionalGeneration"),o_t.forEach(t),YPo=r(J$e," (XLM-ProphetNet model)"),J$e.forEach(t),be.forEach(t),KPo=i(ia),ub=n(ia,"P",{});var Y$e=s(ub);ZPo=r(Y$e,"The model is set in evaluation mode by default using "),jge=n(Y$e,"CODE",{});var r_t=s(jge);eBo=r(r_t,"model.eval()"),r_t.forEach(t),oBo=r(Y$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dge=n(Y$e,"CODE",{});var t_t=s(Dge);rBo=r(t_t,"model.train()"),t_t.forEach(t),Y$e.forEach(t),tBo=i(ia),T(_b.$$.fragment,ia),ia.forEach(t),el.forEach(t),AGe=i(f),Ji=n(f,"H2",{class:!0});var SVe=s(Ji);bb=n(SVe,"A",{id:!0,class:!0,href:!0});var a_t=s(bb);Gge=n(a_t,"SPAN",{});var n_t=s(Gge);T(_L.$$.fragment,n_t),n_t.forEach(t),a_t.forEach(t),aBo=i(SVe),Oge=n(SVe,"SPAN",{});var s_t=s(Oge);nBo=r(s_t,"AutoModelForSequenceClassification"),s_t.forEach(t),SVe.forEach(t),LGe=i(f),Po=n(f,"DIV",{class:!0});var ol=s(Po);T(bL.$$.fragment,ol),sBo=i(ol),Yi=n(ol,"P",{});var foe=s(Yi);lBo=r(foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),SO=n(foe,"A",{href:!0});var l_t=s(SO);iBo=r(l_t,"from_pretrained()"),l_t.forEach(t),dBo=r(foe," class method or the "),RO=n(foe,"A",{href:!0});var i_t=s(RO);cBo=r(i_t,"from_config()"),i_t.forEach(t),fBo=r(foe,` class
method.`),foe.forEach(t),mBo=i(ol),vL=n(ol,"P",{});var RVe=s(vL);gBo=r(RVe,"This class cannot be instantiated directly using "),Vge=n(RVe,"CODE",{});var d_t=s(Vge);hBo=r(d_t,"__init__()"),d_t.forEach(t),pBo=r(RVe," (throws an error)."),RVe.forEach(t),uBo=i(ol),ct=n(ol,"DIV",{class:!0});var Sw=s(ct);T(FL.$$.fragment,Sw),_Bo=i(Sw),Xge=n(Sw,"P",{});var c_t=s(Xge);bBo=r(c_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),c_t.forEach(t),vBo=i(Sw),Ki=n(Sw,"P",{});var moe=s(Ki);FBo=r(moe,`Note:
Loading a model from its configuration file does `),zge=n(moe,"STRONG",{});var f_t=s(zge);TBo=r(f_t,"not"),f_t.forEach(t),MBo=r(moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=n(moe,"A",{href:!0});var m_t=s(PO);EBo=r(m_t,"from_pretrained()"),m_t.forEach(t),CBo=r(moe," to load the model weights."),moe.forEach(t),wBo=i(Sw),T(vb.$$.fragment,Sw),Sw.forEach(t),ABo=i(ol),oo=n(ol,"DIV",{class:!0});var da=s(oo);T(TL.$$.fragment,da),LBo=i(da),Wge=n(da,"P",{});var g_t=s(Wge);yBo=r(g_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),g_t.forEach(t),xBo=i(da),Na=n(da,"P",{});var Rw=s(Na);$Bo=r(Rw,"The model class to instantiate is selected based on the "),Qge=n(Rw,"CODE",{});var h_t=s(Qge);kBo=r(h_t,"model_type"),h_t.forEach(t),SBo=r(Rw,` property of the config object (either
passed as an argument or loaded from `),Hge=n(Rw,"CODE",{});var p_t=s(Hge);RBo=r(p_t,"pretrained_model_name_or_path"),p_t.forEach(t),PBo=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=n(Rw,"CODE",{});var u_t=s(Uge);BBo=r(u_t,"pretrained_model_name_or_path"),u_t.forEach(t),IBo=r(Rw,":"),Rw.forEach(t),NBo=i(da),N=n(da,"UL",{});var j=s(N);Fb=n(j,"LI",{});var K$e=s(Fb);Jge=n(K$e,"STRONG",{});var __t=s(Jge);qBo=r(__t,"albert"),__t.forEach(t),jBo=r(K$e," \u2014 "),BO=n(K$e,"A",{href:!0});var b_t=s(BO);DBo=r(b_t,"AlbertForSequenceClassification"),b_t.forEach(t),GBo=r(K$e," (ALBERT model)"),K$e.forEach(t),OBo=i(j),Tb=n(j,"LI",{});var Z$e=s(Tb);Yge=n(Z$e,"STRONG",{});var v_t=s(Yge);VBo=r(v_t,"bart"),v_t.forEach(t),XBo=r(Z$e," \u2014 "),IO=n(Z$e,"A",{href:!0});var F_t=s(IO);zBo=r(F_t,"BartForSequenceClassification"),F_t.forEach(t),WBo=r(Z$e," (BART model)"),Z$e.forEach(t),QBo=i(j),Mb=n(j,"LI",{});var eke=s(Mb);Kge=n(eke,"STRONG",{});var T_t=s(Kge);HBo=r(T_t,"bert"),T_t.forEach(t),UBo=r(eke," \u2014 "),NO=n(eke,"A",{href:!0});var M_t=s(NO);JBo=r(M_t,"BertForSequenceClassification"),M_t.forEach(t),YBo=r(eke," (BERT model)"),eke.forEach(t),KBo=i(j),Eb=n(j,"LI",{});var oke=s(Eb);Zge=n(oke,"STRONG",{});var E_t=s(Zge);ZBo=r(E_t,"big_bird"),E_t.forEach(t),eIo=r(oke," \u2014 "),qO=n(oke,"A",{href:!0});var C_t=s(qO);oIo=r(C_t,"BigBirdForSequenceClassification"),C_t.forEach(t),rIo=r(oke," (BigBird model)"),oke.forEach(t),tIo=i(j),Cb=n(j,"LI",{});var rke=s(Cb);ehe=n(rke,"STRONG",{});var w_t=s(ehe);aIo=r(w_t,"bigbird_pegasus"),w_t.forEach(t),nIo=r(rke," \u2014 "),jO=n(rke,"A",{href:!0});var A_t=s(jO);sIo=r(A_t,"BigBirdPegasusForSequenceClassification"),A_t.forEach(t),lIo=r(rke," (BigBird-Pegasus model)"),rke.forEach(t),iIo=i(j),wb=n(j,"LI",{});var tke=s(wb);ohe=n(tke,"STRONG",{});var L_t=s(ohe);dIo=r(L_t,"camembert"),L_t.forEach(t),cIo=r(tke," \u2014 "),DO=n(tke,"A",{href:!0});var y_t=s(DO);fIo=r(y_t,"CamembertForSequenceClassification"),y_t.forEach(t),mIo=r(tke," (CamemBERT model)"),tke.forEach(t),gIo=i(j),Ab=n(j,"LI",{});var ake=s(Ab);rhe=n(ake,"STRONG",{});var x_t=s(rhe);hIo=r(x_t,"canine"),x_t.forEach(t),pIo=r(ake," \u2014 "),GO=n(ake,"A",{href:!0});var $_t=s(GO);uIo=r($_t,"CanineForSequenceClassification"),$_t.forEach(t),_Io=r(ake," (CANINE model)"),ake.forEach(t),bIo=i(j),Lb=n(j,"LI",{});var nke=s(Lb);the=n(nke,"STRONG",{});var k_t=s(the);vIo=r(k_t,"convbert"),k_t.forEach(t),FIo=r(nke," \u2014 "),OO=n(nke,"A",{href:!0});var S_t=s(OO);TIo=r(S_t,"ConvBertForSequenceClassification"),S_t.forEach(t),MIo=r(nke," (ConvBERT model)"),nke.forEach(t),EIo=i(j),yb=n(j,"LI",{});var ske=s(yb);ahe=n(ske,"STRONG",{});var R_t=s(ahe);CIo=r(R_t,"ctrl"),R_t.forEach(t),wIo=r(ske," \u2014 "),VO=n(ske,"A",{href:!0});var P_t=s(VO);AIo=r(P_t,"CTRLForSequenceClassification"),P_t.forEach(t),LIo=r(ske," (CTRL model)"),ske.forEach(t),yIo=i(j),xb=n(j,"LI",{});var lke=s(xb);nhe=n(lke,"STRONG",{});var B_t=s(nhe);xIo=r(B_t,"data2vec-text"),B_t.forEach(t),$Io=r(lke," \u2014 "),XO=n(lke,"A",{href:!0});var I_t=s(XO);kIo=r(I_t,"Data2VecTextForSequenceClassification"),I_t.forEach(t),SIo=r(lke," (Data2VecText model)"),lke.forEach(t),RIo=i(j),$b=n(j,"LI",{});var ike=s($b);she=n(ike,"STRONG",{});var N_t=s(she);PIo=r(N_t,"deberta"),N_t.forEach(t),BIo=r(ike," \u2014 "),zO=n(ike,"A",{href:!0});var q_t=s(zO);IIo=r(q_t,"DebertaForSequenceClassification"),q_t.forEach(t),NIo=r(ike," (DeBERTa model)"),ike.forEach(t),qIo=i(j),kb=n(j,"LI",{});var dke=s(kb);lhe=n(dke,"STRONG",{});var j_t=s(lhe);jIo=r(j_t,"deberta-v2"),j_t.forEach(t),DIo=r(dke," \u2014 "),WO=n(dke,"A",{href:!0});var D_t=s(WO);GIo=r(D_t,"DebertaV2ForSequenceClassification"),D_t.forEach(t),OIo=r(dke," (DeBERTa-v2 model)"),dke.forEach(t),VIo=i(j),Sb=n(j,"LI",{});var cke=s(Sb);ihe=n(cke,"STRONG",{});var G_t=s(ihe);XIo=r(G_t,"distilbert"),G_t.forEach(t),zIo=r(cke," \u2014 "),QO=n(cke,"A",{href:!0});var O_t=s(QO);WIo=r(O_t,"DistilBertForSequenceClassification"),O_t.forEach(t),QIo=r(cke," (DistilBERT model)"),cke.forEach(t),HIo=i(j),Rb=n(j,"LI",{});var fke=s(Rb);dhe=n(fke,"STRONG",{});var V_t=s(dhe);UIo=r(V_t,"electra"),V_t.forEach(t),JIo=r(fke," \u2014 "),HO=n(fke,"A",{href:!0});var X_t=s(HO);YIo=r(X_t,"ElectraForSequenceClassification"),X_t.forEach(t),KIo=r(fke," (ELECTRA model)"),fke.forEach(t),ZIo=i(j),Pb=n(j,"LI",{});var mke=s(Pb);che=n(mke,"STRONG",{});var z_t=s(che);eNo=r(z_t,"flaubert"),z_t.forEach(t),oNo=r(mke," \u2014 "),UO=n(mke,"A",{href:!0});var W_t=s(UO);rNo=r(W_t,"FlaubertForSequenceClassification"),W_t.forEach(t),tNo=r(mke," (FlauBERT model)"),mke.forEach(t),aNo=i(j),Bb=n(j,"LI",{});var gke=s(Bb);fhe=n(gke,"STRONG",{});var Q_t=s(fhe);nNo=r(Q_t,"fnet"),Q_t.forEach(t),sNo=r(gke," \u2014 "),JO=n(gke,"A",{href:!0});var H_t=s(JO);lNo=r(H_t,"FNetForSequenceClassification"),H_t.forEach(t),iNo=r(gke," (FNet model)"),gke.forEach(t),dNo=i(j),Ib=n(j,"LI",{});var hke=s(Ib);mhe=n(hke,"STRONG",{});var U_t=s(mhe);cNo=r(U_t,"funnel"),U_t.forEach(t),fNo=r(hke," \u2014 "),YO=n(hke,"A",{href:!0});var J_t=s(YO);mNo=r(J_t,"FunnelForSequenceClassification"),J_t.forEach(t),gNo=r(hke," (Funnel Transformer model)"),hke.forEach(t),hNo=i(j),Nb=n(j,"LI",{});var pke=s(Nb);ghe=n(pke,"STRONG",{});var Y_t=s(ghe);pNo=r(Y_t,"gpt2"),Y_t.forEach(t),uNo=r(pke," \u2014 "),KO=n(pke,"A",{href:!0});var K_t=s(KO);_No=r(K_t,"GPT2ForSequenceClassification"),K_t.forEach(t),bNo=r(pke," (OpenAI GPT-2 model)"),pke.forEach(t),vNo=i(j),qb=n(j,"LI",{});var uke=s(qb);hhe=n(uke,"STRONG",{});var Z_t=s(hhe);FNo=r(Z_t,"gpt_neo"),Z_t.forEach(t),TNo=r(uke," \u2014 "),ZO=n(uke,"A",{href:!0});var e1t=s(ZO);MNo=r(e1t,"GPTNeoForSequenceClassification"),e1t.forEach(t),ENo=r(uke," (GPT Neo model)"),uke.forEach(t),CNo=i(j),jb=n(j,"LI",{});var _ke=s(jb);phe=n(_ke,"STRONG",{});var o1t=s(phe);wNo=r(o1t,"gptj"),o1t.forEach(t),ANo=r(_ke," \u2014 "),eV=n(_ke,"A",{href:!0});var r1t=s(eV);LNo=r(r1t,"GPTJForSequenceClassification"),r1t.forEach(t),yNo=r(_ke," (GPT-J model)"),_ke.forEach(t),xNo=i(j),Db=n(j,"LI",{});var bke=s(Db);uhe=n(bke,"STRONG",{});var t1t=s(uhe);$No=r(t1t,"ibert"),t1t.forEach(t),kNo=r(bke," \u2014 "),oV=n(bke,"A",{href:!0});var a1t=s(oV);SNo=r(a1t,"IBertForSequenceClassification"),a1t.forEach(t),RNo=r(bke," (I-BERT model)"),bke.forEach(t),PNo=i(j),Gb=n(j,"LI",{});var vke=s(Gb);_he=n(vke,"STRONG",{});var n1t=s(_he);BNo=r(n1t,"layoutlm"),n1t.forEach(t),INo=r(vke," \u2014 "),rV=n(vke,"A",{href:!0});var s1t=s(rV);NNo=r(s1t,"LayoutLMForSequenceClassification"),s1t.forEach(t),qNo=r(vke," (LayoutLM model)"),vke.forEach(t),jNo=i(j),Ob=n(j,"LI",{});var Fke=s(Ob);bhe=n(Fke,"STRONG",{});var l1t=s(bhe);DNo=r(l1t,"layoutlmv2"),l1t.forEach(t),GNo=r(Fke," \u2014 "),tV=n(Fke,"A",{href:!0});var i1t=s(tV);ONo=r(i1t,"LayoutLMv2ForSequenceClassification"),i1t.forEach(t),VNo=r(Fke," (LayoutLMv2 model)"),Fke.forEach(t),XNo=i(j),Vb=n(j,"LI",{});var Tke=s(Vb);vhe=n(Tke,"STRONG",{});var d1t=s(vhe);zNo=r(d1t,"layoutlmv3"),d1t.forEach(t),WNo=r(Tke," \u2014 "),aV=n(Tke,"A",{href:!0});var c1t=s(aV);QNo=r(c1t,"LayoutLMv3ForSequenceClassification"),c1t.forEach(t),HNo=r(Tke," (LayoutLMv3 model)"),Tke.forEach(t),UNo=i(j),Xb=n(j,"LI",{});var Mke=s(Xb);Fhe=n(Mke,"STRONG",{});var f1t=s(Fhe);JNo=r(f1t,"led"),f1t.forEach(t),YNo=r(Mke," \u2014 "),nV=n(Mke,"A",{href:!0});var m1t=s(nV);KNo=r(m1t,"LEDForSequenceClassification"),m1t.forEach(t),ZNo=r(Mke," (LED model)"),Mke.forEach(t),eqo=i(j),zb=n(j,"LI",{});var Eke=s(zb);The=n(Eke,"STRONG",{});var g1t=s(The);oqo=r(g1t,"longformer"),g1t.forEach(t),rqo=r(Eke," \u2014 "),sV=n(Eke,"A",{href:!0});var h1t=s(sV);tqo=r(h1t,"LongformerForSequenceClassification"),h1t.forEach(t),aqo=r(Eke," (Longformer model)"),Eke.forEach(t),nqo=i(j),Wb=n(j,"LI",{});var Cke=s(Wb);Mhe=n(Cke,"STRONG",{});var p1t=s(Mhe);sqo=r(p1t,"mbart"),p1t.forEach(t),lqo=r(Cke," \u2014 "),lV=n(Cke,"A",{href:!0});var u1t=s(lV);iqo=r(u1t,"MBartForSequenceClassification"),u1t.forEach(t),dqo=r(Cke," (mBART model)"),Cke.forEach(t),cqo=i(j),Qb=n(j,"LI",{});var wke=s(Qb);Ehe=n(wke,"STRONG",{});var _1t=s(Ehe);fqo=r(_1t,"megatron-bert"),_1t.forEach(t),mqo=r(wke," \u2014 "),iV=n(wke,"A",{href:!0});var b1t=s(iV);gqo=r(b1t,"MegatronBertForSequenceClassification"),b1t.forEach(t),hqo=r(wke," (Megatron-BERT model)"),wke.forEach(t),pqo=i(j),Hb=n(j,"LI",{});var Ake=s(Hb);Che=n(Ake,"STRONG",{});var v1t=s(Che);uqo=r(v1t,"mobilebert"),v1t.forEach(t),_qo=r(Ake," \u2014 "),dV=n(Ake,"A",{href:!0});var F1t=s(dV);bqo=r(F1t,"MobileBertForSequenceClassification"),F1t.forEach(t),vqo=r(Ake," (MobileBERT model)"),Ake.forEach(t),Fqo=i(j),Ub=n(j,"LI",{});var Lke=s(Ub);whe=n(Lke,"STRONG",{});var T1t=s(whe);Tqo=r(T1t,"mpnet"),T1t.forEach(t),Mqo=r(Lke," \u2014 "),cV=n(Lke,"A",{href:!0});var M1t=s(cV);Eqo=r(M1t,"MPNetForSequenceClassification"),M1t.forEach(t),Cqo=r(Lke," (MPNet model)"),Lke.forEach(t),wqo=i(j),Jb=n(j,"LI",{});var yke=s(Jb);Ahe=n(yke,"STRONG",{});var E1t=s(Ahe);Aqo=r(E1t,"nystromformer"),E1t.forEach(t),Lqo=r(yke," \u2014 "),fV=n(yke,"A",{href:!0});var C1t=s(fV);yqo=r(C1t,"NystromformerForSequenceClassification"),C1t.forEach(t),xqo=r(yke," (Nystr\xF6mformer model)"),yke.forEach(t),$qo=i(j),Yb=n(j,"LI",{});var xke=s(Yb);Lhe=n(xke,"STRONG",{});var w1t=s(Lhe);kqo=r(w1t,"openai-gpt"),w1t.forEach(t),Sqo=r(xke," \u2014 "),mV=n(xke,"A",{href:!0});var A1t=s(mV);Rqo=r(A1t,"OpenAIGPTForSequenceClassification"),A1t.forEach(t),Pqo=r(xke," (OpenAI GPT model)"),xke.forEach(t),Bqo=i(j),Kb=n(j,"LI",{});var $ke=s(Kb);yhe=n($ke,"STRONG",{});var L1t=s(yhe);Iqo=r(L1t,"perceiver"),L1t.forEach(t),Nqo=r($ke," \u2014 "),gV=n($ke,"A",{href:!0});var y1t=s(gV);qqo=r(y1t,"PerceiverForSequenceClassification"),y1t.forEach(t),jqo=r($ke," (Perceiver model)"),$ke.forEach(t),Dqo=i(j),Zb=n(j,"LI",{});var kke=s(Zb);xhe=n(kke,"STRONG",{});var x1t=s(xhe);Gqo=r(x1t,"plbart"),x1t.forEach(t),Oqo=r(kke," \u2014 "),hV=n(kke,"A",{href:!0});var $1t=s(hV);Vqo=r($1t,"PLBartForSequenceClassification"),$1t.forEach(t),Xqo=r(kke," (PLBart model)"),kke.forEach(t),zqo=i(j),ev=n(j,"LI",{});var Ske=s(ev);$he=n(Ske,"STRONG",{});var k1t=s($he);Wqo=r(k1t,"qdqbert"),k1t.forEach(t),Qqo=r(Ske," \u2014 "),pV=n(Ske,"A",{href:!0});var S1t=s(pV);Hqo=r(S1t,"QDQBertForSequenceClassification"),S1t.forEach(t),Uqo=r(Ske," (QDQBert model)"),Ske.forEach(t),Jqo=i(j),ov=n(j,"LI",{});var Rke=s(ov);khe=n(Rke,"STRONG",{});var R1t=s(khe);Yqo=r(R1t,"reformer"),R1t.forEach(t),Kqo=r(Rke," \u2014 "),uV=n(Rke,"A",{href:!0});var P1t=s(uV);Zqo=r(P1t,"ReformerForSequenceClassification"),P1t.forEach(t),ejo=r(Rke," (Reformer model)"),Rke.forEach(t),ojo=i(j),rv=n(j,"LI",{});var Pke=s(rv);She=n(Pke,"STRONG",{});var B1t=s(She);rjo=r(B1t,"rembert"),B1t.forEach(t),tjo=r(Pke," \u2014 "),_V=n(Pke,"A",{href:!0});var I1t=s(_V);ajo=r(I1t,"RemBertForSequenceClassification"),I1t.forEach(t),njo=r(Pke," (RemBERT model)"),Pke.forEach(t),sjo=i(j),tv=n(j,"LI",{});var Bke=s(tv);Rhe=n(Bke,"STRONG",{});var N1t=s(Rhe);ljo=r(N1t,"roberta"),N1t.forEach(t),ijo=r(Bke," \u2014 "),bV=n(Bke,"A",{href:!0});var q1t=s(bV);djo=r(q1t,"RobertaForSequenceClassification"),q1t.forEach(t),cjo=r(Bke," (RoBERTa model)"),Bke.forEach(t),fjo=i(j),av=n(j,"LI",{});var Ike=s(av);Phe=n(Ike,"STRONG",{});var j1t=s(Phe);mjo=r(j1t,"roformer"),j1t.forEach(t),gjo=r(Ike," \u2014 "),vV=n(Ike,"A",{href:!0});var D1t=s(vV);hjo=r(D1t,"RoFormerForSequenceClassification"),D1t.forEach(t),pjo=r(Ike," (RoFormer model)"),Ike.forEach(t),ujo=i(j),nv=n(j,"LI",{});var Nke=s(nv);Bhe=n(Nke,"STRONG",{});var G1t=s(Bhe);_jo=r(G1t,"squeezebert"),G1t.forEach(t),bjo=r(Nke," \u2014 "),FV=n(Nke,"A",{href:!0});var O1t=s(FV);vjo=r(O1t,"SqueezeBertForSequenceClassification"),O1t.forEach(t),Fjo=r(Nke," (SqueezeBERT model)"),Nke.forEach(t),Tjo=i(j),sv=n(j,"LI",{});var qke=s(sv);Ihe=n(qke,"STRONG",{});var V1t=s(Ihe);Mjo=r(V1t,"tapas"),V1t.forEach(t),Ejo=r(qke," \u2014 "),TV=n(qke,"A",{href:!0});var X1t=s(TV);Cjo=r(X1t,"TapasForSequenceClassification"),X1t.forEach(t),wjo=r(qke," (TAPAS model)"),qke.forEach(t),Ajo=i(j),lv=n(j,"LI",{});var jke=s(lv);Nhe=n(jke,"STRONG",{});var z1t=s(Nhe);Ljo=r(z1t,"transfo-xl"),z1t.forEach(t),yjo=r(jke," \u2014 "),MV=n(jke,"A",{href:!0});var W1t=s(MV);xjo=r(W1t,"TransfoXLForSequenceClassification"),W1t.forEach(t),$jo=r(jke," (Transformer-XL model)"),jke.forEach(t),kjo=i(j),iv=n(j,"LI",{});var Dke=s(iv);qhe=n(Dke,"STRONG",{});var Q1t=s(qhe);Sjo=r(Q1t,"xlm"),Q1t.forEach(t),Rjo=r(Dke," \u2014 "),EV=n(Dke,"A",{href:!0});var H1t=s(EV);Pjo=r(H1t,"XLMForSequenceClassification"),H1t.forEach(t),Bjo=r(Dke," (XLM model)"),Dke.forEach(t),Ijo=i(j),dv=n(j,"LI",{});var Gke=s(dv);jhe=n(Gke,"STRONG",{});var U1t=s(jhe);Njo=r(U1t,"xlm-roberta"),U1t.forEach(t),qjo=r(Gke," \u2014 "),CV=n(Gke,"A",{href:!0});var J1t=s(CV);jjo=r(J1t,"XLMRobertaForSequenceClassification"),J1t.forEach(t),Djo=r(Gke," (XLM-RoBERTa model)"),Gke.forEach(t),Gjo=i(j),cv=n(j,"LI",{});var Oke=s(cv);Dhe=n(Oke,"STRONG",{});var Y1t=s(Dhe);Ojo=r(Y1t,"xlm-roberta-xl"),Y1t.forEach(t),Vjo=r(Oke," \u2014 "),wV=n(Oke,"A",{href:!0});var K1t=s(wV);Xjo=r(K1t,"XLMRobertaXLForSequenceClassification"),K1t.forEach(t),zjo=r(Oke," (XLM-RoBERTa-XL model)"),Oke.forEach(t),Wjo=i(j),fv=n(j,"LI",{});var Vke=s(fv);Ghe=n(Vke,"STRONG",{});var Z1t=s(Ghe);Qjo=r(Z1t,"xlnet"),Z1t.forEach(t),Hjo=r(Vke," \u2014 "),AV=n(Vke,"A",{href:!0});var e2t=s(AV);Ujo=r(e2t,"XLNetForSequenceClassification"),e2t.forEach(t),Jjo=r(Vke," (XLNet model)"),Vke.forEach(t),Yjo=i(j),mv=n(j,"LI",{});var Xke=s(mv);Ohe=n(Xke,"STRONG",{});var o2t=s(Ohe);Kjo=r(o2t,"yoso"),o2t.forEach(t),Zjo=r(Xke," \u2014 "),LV=n(Xke,"A",{href:!0});var r2t=s(LV);eDo=r(r2t,"YosoForSequenceClassification"),r2t.forEach(t),oDo=r(Xke," (YOSO model)"),Xke.forEach(t),j.forEach(t),rDo=i(da),gv=n(da,"P",{});var zke=s(gv);tDo=r(zke,"The model is set in evaluation mode by default using "),Vhe=n(zke,"CODE",{});var t2t=s(Vhe);aDo=r(t2t,"model.eval()"),t2t.forEach(t),nDo=r(zke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=n(zke,"CODE",{});var a2t=s(Xhe);sDo=r(a2t,"model.train()"),a2t.forEach(t),zke.forEach(t),lDo=i(da),T(hv.$$.fragment,da),da.forEach(t),ol.forEach(t),yGe=i(f),Zi=n(f,"H2",{class:!0});var PVe=s(Zi);pv=n(PVe,"A",{id:!0,class:!0,href:!0});var n2t=s(pv);zhe=n(n2t,"SPAN",{});var s2t=s(zhe);T(ML.$$.fragment,s2t),s2t.forEach(t),n2t.forEach(t),iDo=i(PVe),Whe=n(PVe,"SPAN",{});var l2t=s(Whe);dDo=r(l2t,"AutoModelForMultipleChoice"),l2t.forEach(t),PVe.forEach(t),xGe=i(f),Bo=n(f,"DIV",{class:!0});var rl=s(Bo);T(EL.$$.fragment,rl),cDo=i(rl),ed=n(rl,"P",{});var goe=s(ed);fDo=r(goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yV=n(goe,"A",{href:!0});var i2t=s(yV);mDo=r(i2t,"from_pretrained()"),i2t.forEach(t),gDo=r(goe," class method or the "),xV=n(goe,"A",{href:!0});var d2t=s(xV);hDo=r(d2t,"from_config()"),d2t.forEach(t),pDo=r(goe,` class
method.`),goe.forEach(t),uDo=i(rl),CL=n(rl,"P",{});var BVe=s(CL);_Do=r(BVe,"This class cannot be instantiated directly using "),Qhe=n(BVe,"CODE",{});var c2t=s(Qhe);bDo=r(c2t,"__init__()"),c2t.forEach(t),vDo=r(BVe," (throws an error)."),BVe.forEach(t),FDo=i(rl),ft=n(rl,"DIV",{class:!0});var Pw=s(ft);T(wL.$$.fragment,Pw),TDo=i(Pw),Hhe=n(Pw,"P",{});var f2t=s(Hhe);MDo=r(f2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),f2t.forEach(t),EDo=i(Pw),od=n(Pw,"P",{});var hoe=s(od);CDo=r(hoe,`Note:
Loading a model from its configuration file does `),Uhe=n(hoe,"STRONG",{});var m2t=s(Uhe);wDo=r(m2t,"not"),m2t.forEach(t),ADo=r(hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$V=n(hoe,"A",{href:!0});var g2t=s($V);LDo=r(g2t,"from_pretrained()"),g2t.forEach(t),yDo=r(hoe," to load the model weights."),hoe.forEach(t),xDo=i(Pw),T(uv.$$.fragment,Pw),Pw.forEach(t),$Do=i(rl),ro=n(rl,"DIV",{class:!0});var ca=s(ro);T(AL.$$.fragment,ca),kDo=i(ca),Jhe=n(ca,"P",{});var h2t=s(Jhe);SDo=r(h2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),h2t.forEach(t),RDo=i(ca),qa=n(ca,"P",{});var Bw=s(qa);PDo=r(Bw,"The model class to instantiate is selected based on the "),Yhe=n(Bw,"CODE",{});var p2t=s(Yhe);BDo=r(p2t,"model_type"),p2t.forEach(t),IDo=r(Bw,` property of the config object (either
passed as an argument or loaded from `),Khe=n(Bw,"CODE",{});var u2t=s(Khe);NDo=r(u2t,"pretrained_model_name_or_path"),u2t.forEach(t),qDo=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=n(Bw,"CODE",{});var _2t=s(Zhe);jDo=r(_2t,"pretrained_model_name_or_path"),_2t.forEach(t),DDo=r(Bw,":"),Bw.forEach(t),GDo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);_v=n(ee,"LI",{});var Wke=s(_v);epe=n(Wke,"STRONG",{});var b2t=s(epe);ODo=r(b2t,"albert"),b2t.forEach(t),VDo=r(Wke," \u2014 "),kV=n(Wke,"A",{href:!0});var v2t=s(kV);XDo=r(v2t,"AlbertForMultipleChoice"),v2t.forEach(t),zDo=r(Wke," (ALBERT model)"),Wke.forEach(t),WDo=i(ee),bv=n(ee,"LI",{});var Qke=s(bv);ope=n(Qke,"STRONG",{});var F2t=s(ope);QDo=r(F2t,"bert"),F2t.forEach(t),HDo=r(Qke," \u2014 "),SV=n(Qke,"A",{href:!0});var T2t=s(SV);UDo=r(T2t,"BertForMultipleChoice"),T2t.forEach(t),JDo=r(Qke," (BERT model)"),Qke.forEach(t),YDo=i(ee),vv=n(ee,"LI",{});var Hke=s(vv);rpe=n(Hke,"STRONG",{});var M2t=s(rpe);KDo=r(M2t,"big_bird"),M2t.forEach(t),ZDo=r(Hke," \u2014 "),RV=n(Hke,"A",{href:!0});var E2t=s(RV);eGo=r(E2t,"BigBirdForMultipleChoice"),E2t.forEach(t),oGo=r(Hke," (BigBird model)"),Hke.forEach(t),rGo=i(ee),Fv=n(ee,"LI",{});var Uke=s(Fv);tpe=n(Uke,"STRONG",{});var C2t=s(tpe);tGo=r(C2t,"camembert"),C2t.forEach(t),aGo=r(Uke," \u2014 "),PV=n(Uke,"A",{href:!0});var w2t=s(PV);nGo=r(w2t,"CamembertForMultipleChoice"),w2t.forEach(t),sGo=r(Uke," (CamemBERT model)"),Uke.forEach(t),lGo=i(ee),Tv=n(ee,"LI",{});var Jke=s(Tv);ape=n(Jke,"STRONG",{});var A2t=s(ape);iGo=r(A2t,"canine"),A2t.forEach(t),dGo=r(Jke," \u2014 "),BV=n(Jke,"A",{href:!0});var L2t=s(BV);cGo=r(L2t,"CanineForMultipleChoice"),L2t.forEach(t),fGo=r(Jke," (CANINE model)"),Jke.forEach(t),mGo=i(ee),Mv=n(ee,"LI",{});var Yke=s(Mv);npe=n(Yke,"STRONG",{});var y2t=s(npe);gGo=r(y2t,"convbert"),y2t.forEach(t),hGo=r(Yke," \u2014 "),IV=n(Yke,"A",{href:!0});var x2t=s(IV);pGo=r(x2t,"ConvBertForMultipleChoice"),x2t.forEach(t),uGo=r(Yke," (ConvBERT model)"),Yke.forEach(t),_Go=i(ee),Ev=n(ee,"LI",{});var Kke=s(Ev);spe=n(Kke,"STRONG",{});var $2t=s(spe);bGo=r($2t,"data2vec-text"),$2t.forEach(t),vGo=r(Kke," \u2014 "),NV=n(Kke,"A",{href:!0});var k2t=s(NV);FGo=r(k2t,"Data2VecTextForMultipleChoice"),k2t.forEach(t),TGo=r(Kke," (Data2VecText model)"),Kke.forEach(t),MGo=i(ee),Cv=n(ee,"LI",{});var Zke=s(Cv);lpe=n(Zke,"STRONG",{});var S2t=s(lpe);EGo=r(S2t,"deberta-v2"),S2t.forEach(t),CGo=r(Zke," \u2014 "),qV=n(Zke,"A",{href:!0});var R2t=s(qV);wGo=r(R2t,"DebertaV2ForMultipleChoice"),R2t.forEach(t),AGo=r(Zke," (DeBERTa-v2 model)"),Zke.forEach(t),LGo=i(ee),wv=n(ee,"LI",{});var eSe=s(wv);ipe=n(eSe,"STRONG",{});var P2t=s(ipe);yGo=r(P2t,"distilbert"),P2t.forEach(t),xGo=r(eSe," \u2014 "),jV=n(eSe,"A",{href:!0});var B2t=s(jV);$Go=r(B2t,"DistilBertForMultipleChoice"),B2t.forEach(t),kGo=r(eSe," (DistilBERT model)"),eSe.forEach(t),SGo=i(ee),Av=n(ee,"LI",{});var oSe=s(Av);dpe=n(oSe,"STRONG",{});var I2t=s(dpe);RGo=r(I2t,"electra"),I2t.forEach(t),PGo=r(oSe," \u2014 "),DV=n(oSe,"A",{href:!0});var N2t=s(DV);BGo=r(N2t,"ElectraForMultipleChoice"),N2t.forEach(t),IGo=r(oSe," (ELECTRA model)"),oSe.forEach(t),NGo=i(ee),Lv=n(ee,"LI",{});var rSe=s(Lv);cpe=n(rSe,"STRONG",{});var q2t=s(cpe);qGo=r(q2t,"flaubert"),q2t.forEach(t),jGo=r(rSe," \u2014 "),GV=n(rSe,"A",{href:!0});var j2t=s(GV);DGo=r(j2t,"FlaubertForMultipleChoice"),j2t.forEach(t),GGo=r(rSe," (FlauBERT model)"),rSe.forEach(t),OGo=i(ee),yv=n(ee,"LI",{});var tSe=s(yv);fpe=n(tSe,"STRONG",{});var D2t=s(fpe);VGo=r(D2t,"fnet"),D2t.forEach(t),XGo=r(tSe," \u2014 "),OV=n(tSe,"A",{href:!0});var G2t=s(OV);zGo=r(G2t,"FNetForMultipleChoice"),G2t.forEach(t),WGo=r(tSe," (FNet model)"),tSe.forEach(t),QGo=i(ee),xv=n(ee,"LI",{});var aSe=s(xv);mpe=n(aSe,"STRONG",{});var O2t=s(mpe);HGo=r(O2t,"funnel"),O2t.forEach(t),UGo=r(aSe," \u2014 "),VV=n(aSe,"A",{href:!0});var V2t=s(VV);JGo=r(V2t,"FunnelForMultipleChoice"),V2t.forEach(t),YGo=r(aSe," (Funnel Transformer model)"),aSe.forEach(t),KGo=i(ee),$v=n(ee,"LI",{});var nSe=s($v);gpe=n(nSe,"STRONG",{});var X2t=s(gpe);ZGo=r(X2t,"ibert"),X2t.forEach(t),eOo=r(nSe," \u2014 "),XV=n(nSe,"A",{href:!0});var z2t=s(XV);oOo=r(z2t,"IBertForMultipleChoice"),z2t.forEach(t),rOo=r(nSe," (I-BERT model)"),nSe.forEach(t),tOo=i(ee),kv=n(ee,"LI",{});var sSe=s(kv);hpe=n(sSe,"STRONG",{});var W2t=s(hpe);aOo=r(W2t,"longformer"),W2t.forEach(t),nOo=r(sSe," \u2014 "),zV=n(sSe,"A",{href:!0});var Q2t=s(zV);sOo=r(Q2t,"LongformerForMultipleChoice"),Q2t.forEach(t),lOo=r(sSe," (Longformer model)"),sSe.forEach(t),iOo=i(ee),Sv=n(ee,"LI",{});var lSe=s(Sv);ppe=n(lSe,"STRONG",{});var H2t=s(ppe);dOo=r(H2t,"megatron-bert"),H2t.forEach(t),cOo=r(lSe," \u2014 "),WV=n(lSe,"A",{href:!0});var U2t=s(WV);fOo=r(U2t,"MegatronBertForMultipleChoice"),U2t.forEach(t),mOo=r(lSe," (Megatron-BERT model)"),lSe.forEach(t),gOo=i(ee),Rv=n(ee,"LI",{});var iSe=s(Rv);upe=n(iSe,"STRONG",{});var J2t=s(upe);hOo=r(J2t,"mobilebert"),J2t.forEach(t),pOo=r(iSe," \u2014 "),QV=n(iSe,"A",{href:!0});var Y2t=s(QV);uOo=r(Y2t,"MobileBertForMultipleChoice"),Y2t.forEach(t),_Oo=r(iSe," (MobileBERT model)"),iSe.forEach(t),bOo=i(ee),Pv=n(ee,"LI",{});var dSe=s(Pv);_pe=n(dSe,"STRONG",{});var K2t=s(_pe);vOo=r(K2t,"mpnet"),K2t.forEach(t),FOo=r(dSe," \u2014 "),HV=n(dSe,"A",{href:!0});var Z2t=s(HV);TOo=r(Z2t,"MPNetForMultipleChoice"),Z2t.forEach(t),MOo=r(dSe," (MPNet model)"),dSe.forEach(t),EOo=i(ee),Bv=n(ee,"LI",{});var cSe=s(Bv);bpe=n(cSe,"STRONG",{});var ebt=s(bpe);COo=r(ebt,"nystromformer"),ebt.forEach(t),wOo=r(cSe," \u2014 "),UV=n(cSe,"A",{href:!0});var obt=s(UV);AOo=r(obt,"NystromformerForMultipleChoice"),obt.forEach(t),LOo=r(cSe," (Nystr\xF6mformer model)"),cSe.forEach(t),yOo=i(ee),Iv=n(ee,"LI",{});var fSe=s(Iv);vpe=n(fSe,"STRONG",{});var rbt=s(vpe);xOo=r(rbt,"qdqbert"),rbt.forEach(t),$Oo=r(fSe," \u2014 "),JV=n(fSe,"A",{href:!0});var tbt=s(JV);kOo=r(tbt,"QDQBertForMultipleChoice"),tbt.forEach(t),SOo=r(fSe," (QDQBert model)"),fSe.forEach(t),ROo=i(ee),Nv=n(ee,"LI",{});var mSe=s(Nv);Fpe=n(mSe,"STRONG",{});var abt=s(Fpe);POo=r(abt,"rembert"),abt.forEach(t),BOo=r(mSe," \u2014 "),YV=n(mSe,"A",{href:!0});var nbt=s(YV);IOo=r(nbt,"RemBertForMultipleChoice"),nbt.forEach(t),NOo=r(mSe," (RemBERT model)"),mSe.forEach(t),qOo=i(ee),qv=n(ee,"LI",{});var gSe=s(qv);Tpe=n(gSe,"STRONG",{});var sbt=s(Tpe);jOo=r(sbt,"roberta"),sbt.forEach(t),DOo=r(gSe," \u2014 "),KV=n(gSe,"A",{href:!0});var lbt=s(KV);GOo=r(lbt,"RobertaForMultipleChoice"),lbt.forEach(t),OOo=r(gSe," (RoBERTa model)"),gSe.forEach(t),VOo=i(ee),jv=n(ee,"LI",{});var hSe=s(jv);Mpe=n(hSe,"STRONG",{});var ibt=s(Mpe);XOo=r(ibt,"roformer"),ibt.forEach(t),zOo=r(hSe," \u2014 "),ZV=n(hSe,"A",{href:!0});var dbt=s(ZV);WOo=r(dbt,"RoFormerForMultipleChoice"),dbt.forEach(t),QOo=r(hSe," (RoFormer model)"),hSe.forEach(t),HOo=i(ee),Dv=n(ee,"LI",{});var pSe=s(Dv);Epe=n(pSe,"STRONG",{});var cbt=s(Epe);UOo=r(cbt,"squeezebert"),cbt.forEach(t),JOo=r(pSe," \u2014 "),eX=n(pSe,"A",{href:!0});var fbt=s(eX);YOo=r(fbt,"SqueezeBertForMultipleChoice"),fbt.forEach(t),KOo=r(pSe," (SqueezeBERT model)"),pSe.forEach(t),ZOo=i(ee),Gv=n(ee,"LI",{});var uSe=s(Gv);Cpe=n(uSe,"STRONG",{});var mbt=s(Cpe);eVo=r(mbt,"xlm"),mbt.forEach(t),oVo=r(uSe," \u2014 "),oX=n(uSe,"A",{href:!0});var gbt=s(oX);rVo=r(gbt,"XLMForMultipleChoice"),gbt.forEach(t),tVo=r(uSe," (XLM model)"),uSe.forEach(t),aVo=i(ee),Ov=n(ee,"LI",{});var _Se=s(Ov);wpe=n(_Se,"STRONG",{});var hbt=s(wpe);nVo=r(hbt,"xlm-roberta"),hbt.forEach(t),sVo=r(_Se," \u2014 "),rX=n(_Se,"A",{href:!0});var pbt=s(rX);lVo=r(pbt,"XLMRobertaForMultipleChoice"),pbt.forEach(t),iVo=r(_Se," (XLM-RoBERTa model)"),_Se.forEach(t),dVo=i(ee),Vv=n(ee,"LI",{});var bSe=s(Vv);Ape=n(bSe,"STRONG",{});var ubt=s(Ape);cVo=r(ubt,"xlm-roberta-xl"),ubt.forEach(t),fVo=r(bSe," \u2014 "),tX=n(bSe,"A",{href:!0});var _bt=s(tX);mVo=r(_bt,"XLMRobertaXLForMultipleChoice"),_bt.forEach(t),gVo=r(bSe," (XLM-RoBERTa-XL model)"),bSe.forEach(t),hVo=i(ee),Xv=n(ee,"LI",{});var vSe=s(Xv);Lpe=n(vSe,"STRONG",{});var bbt=s(Lpe);pVo=r(bbt,"xlnet"),bbt.forEach(t),uVo=r(vSe," \u2014 "),aX=n(vSe,"A",{href:!0});var vbt=s(aX);_Vo=r(vbt,"XLNetForMultipleChoice"),vbt.forEach(t),bVo=r(vSe," (XLNet model)"),vSe.forEach(t),vVo=i(ee),zv=n(ee,"LI",{});var FSe=s(zv);ype=n(FSe,"STRONG",{});var Fbt=s(ype);FVo=r(Fbt,"yoso"),Fbt.forEach(t),TVo=r(FSe," \u2014 "),nX=n(FSe,"A",{href:!0});var Tbt=s(nX);MVo=r(Tbt,"YosoForMultipleChoice"),Tbt.forEach(t),EVo=r(FSe," (YOSO model)"),FSe.forEach(t),ee.forEach(t),CVo=i(ca),Wv=n(ca,"P",{});var TSe=s(Wv);wVo=r(TSe,"The model is set in evaluation mode by default using "),xpe=n(TSe,"CODE",{});var Mbt=s(xpe);AVo=r(Mbt,"model.eval()"),Mbt.forEach(t),LVo=r(TSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=n(TSe,"CODE",{});var Ebt=s($pe);yVo=r(Ebt,"model.train()"),Ebt.forEach(t),TSe.forEach(t),xVo=i(ca),T(Qv.$$.fragment,ca),ca.forEach(t),rl.forEach(t),$Ge=i(f),rd=n(f,"H2",{class:!0});var IVe=s(rd);Hv=n(IVe,"A",{id:!0,class:!0,href:!0});var Cbt=s(Hv);kpe=n(Cbt,"SPAN",{});var wbt=s(kpe);T(LL.$$.fragment,wbt),wbt.forEach(t),Cbt.forEach(t),$Vo=i(IVe),Spe=n(IVe,"SPAN",{});var Abt=s(Spe);kVo=r(Abt,"AutoModelForNextSentencePrediction"),Abt.forEach(t),IVe.forEach(t),kGe=i(f),Io=n(f,"DIV",{class:!0});var tl=s(Io);T(yL.$$.fragment,tl),SVo=i(tl),td=n(tl,"P",{});var poe=s(td);RVo=r(poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),sX=n(poe,"A",{href:!0});var Lbt=s(sX);PVo=r(Lbt,"from_pretrained()"),Lbt.forEach(t),BVo=r(poe," class method or the "),lX=n(poe,"A",{href:!0});var ybt=s(lX);IVo=r(ybt,"from_config()"),ybt.forEach(t),NVo=r(poe,` class
method.`),poe.forEach(t),qVo=i(tl),xL=n(tl,"P",{});var NVe=s(xL);jVo=r(NVe,"This class cannot be instantiated directly using "),Rpe=n(NVe,"CODE",{});var xbt=s(Rpe);DVo=r(xbt,"__init__()"),xbt.forEach(t),GVo=r(NVe," (throws an error)."),NVe.forEach(t),OVo=i(tl),mt=n(tl,"DIV",{class:!0});var Iw=s(mt);T($L.$$.fragment,Iw),VVo=i(Iw),Ppe=n(Iw,"P",{});var $bt=s(Ppe);XVo=r($bt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$bt.forEach(t),zVo=i(Iw),ad=n(Iw,"P",{});var uoe=s(ad);WVo=r(uoe,`Note:
Loading a model from its configuration file does `),Bpe=n(uoe,"STRONG",{});var kbt=s(Bpe);QVo=r(kbt,"not"),kbt.forEach(t),HVo=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=n(uoe,"A",{href:!0});var Sbt=s(iX);UVo=r(Sbt,"from_pretrained()"),Sbt.forEach(t),JVo=r(uoe," to load the model weights."),uoe.forEach(t),YVo=i(Iw),T(Uv.$$.fragment,Iw),Iw.forEach(t),KVo=i(tl),to=n(tl,"DIV",{class:!0});var fa=s(to);T(kL.$$.fragment,fa),ZVo=i(fa),Ipe=n(fa,"P",{});var Rbt=s(Ipe);eXo=r(Rbt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Rbt.forEach(t),oXo=i(fa),ja=n(fa,"P",{});var Nw=s(ja);rXo=r(Nw,"The model class to instantiate is selected based on the "),Npe=n(Nw,"CODE",{});var Pbt=s(Npe);tXo=r(Pbt,"model_type"),Pbt.forEach(t),aXo=r(Nw,` property of the config object (either
passed as an argument or loaded from `),qpe=n(Nw,"CODE",{});var Bbt=s(qpe);nXo=r(Bbt,"pretrained_model_name_or_path"),Bbt.forEach(t),sXo=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=n(Nw,"CODE",{});var Ibt=s(jpe);lXo=r(Ibt,"pretrained_model_name_or_path"),Ibt.forEach(t),iXo=r(Nw,":"),Nw.forEach(t),dXo=i(fa),Zr=n(fa,"UL",{});var al=s(Zr);Jv=n(al,"LI",{});var MSe=s(Jv);Dpe=n(MSe,"STRONG",{});var Nbt=s(Dpe);cXo=r(Nbt,"bert"),Nbt.forEach(t),fXo=r(MSe," \u2014 "),dX=n(MSe,"A",{href:!0});var qbt=s(dX);mXo=r(qbt,"BertForNextSentencePrediction"),qbt.forEach(t),gXo=r(MSe," (BERT model)"),MSe.forEach(t),hXo=i(al),Yv=n(al,"LI",{});var ESe=s(Yv);Gpe=n(ESe,"STRONG",{});var jbt=s(Gpe);pXo=r(jbt,"fnet"),jbt.forEach(t),uXo=r(ESe," \u2014 "),cX=n(ESe,"A",{href:!0});var Dbt=s(cX);_Xo=r(Dbt,"FNetForNextSentencePrediction"),Dbt.forEach(t),bXo=r(ESe," (FNet model)"),ESe.forEach(t),vXo=i(al),Kv=n(al,"LI",{});var CSe=s(Kv);Ope=n(CSe,"STRONG",{});var Gbt=s(Ope);FXo=r(Gbt,"megatron-bert"),Gbt.forEach(t),TXo=r(CSe," \u2014 "),fX=n(CSe,"A",{href:!0});var Obt=s(fX);MXo=r(Obt,"MegatronBertForNextSentencePrediction"),Obt.forEach(t),EXo=r(CSe," (Megatron-BERT model)"),CSe.forEach(t),CXo=i(al),Zv=n(al,"LI",{});var wSe=s(Zv);Vpe=n(wSe,"STRONG",{});var Vbt=s(Vpe);wXo=r(Vbt,"mobilebert"),Vbt.forEach(t),AXo=r(wSe," \u2014 "),mX=n(wSe,"A",{href:!0});var Xbt=s(mX);LXo=r(Xbt,"MobileBertForNextSentencePrediction"),Xbt.forEach(t),yXo=r(wSe," (MobileBERT model)"),wSe.forEach(t),xXo=i(al),e0=n(al,"LI",{});var ASe=s(e0);Xpe=n(ASe,"STRONG",{});var zbt=s(Xpe);$Xo=r(zbt,"qdqbert"),zbt.forEach(t),kXo=r(ASe," \u2014 "),gX=n(ASe,"A",{href:!0});var Wbt=s(gX);SXo=r(Wbt,"QDQBertForNextSentencePrediction"),Wbt.forEach(t),RXo=r(ASe," (QDQBert model)"),ASe.forEach(t),al.forEach(t),PXo=i(fa),o0=n(fa,"P",{});var LSe=s(o0);BXo=r(LSe,"The model is set in evaluation mode by default using "),zpe=n(LSe,"CODE",{});var Qbt=s(zpe);IXo=r(Qbt,"model.eval()"),Qbt.forEach(t),NXo=r(LSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=n(LSe,"CODE",{});var Hbt=s(Wpe);qXo=r(Hbt,"model.train()"),Hbt.forEach(t),LSe.forEach(t),jXo=i(fa),T(r0.$$.fragment,fa),fa.forEach(t),tl.forEach(t),SGe=i(f),nd=n(f,"H2",{class:!0});var qVe=s(nd);t0=n(qVe,"A",{id:!0,class:!0,href:!0});var Ubt=s(t0);Qpe=n(Ubt,"SPAN",{});var Jbt=s(Qpe);T(SL.$$.fragment,Jbt),Jbt.forEach(t),Ubt.forEach(t),DXo=i(qVe),Hpe=n(qVe,"SPAN",{});var Ybt=s(Hpe);GXo=r(Ybt,"AutoModelForTokenClassification"),Ybt.forEach(t),qVe.forEach(t),RGe=i(f),No=n(f,"DIV",{class:!0});var nl=s(No);T(RL.$$.fragment,nl),OXo=i(nl),sd=n(nl,"P",{});var _oe=s(sd);VXo=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hX=n(_oe,"A",{href:!0});var Kbt=s(hX);XXo=r(Kbt,"from_pretrained()"),Kbt.forEach(t),zXo=r(_oe," class method or the "),pX=n(_oe,"A",{href:!0});var Zbt=s(pX);WXo=r(Zbt,"from_config()"),Zbt.forEach(t),QXo=r(_oe,` class
method.`),_oe.forEach(t),HXo=i(nl),PL=n(nl,"P",{});var jVe=s(PL);UXo=r(jVe,"This class cannot be instantiated directly using "),Upe=n(jVe,"CODE",{});var evt=s(Upe);JXo=r(evt,"__init__()"),evt.forEach(t),YXo=r(jVe," (throws an error)."),jVe.forEach(t),KXo=i(nl),gt=n(nl,"DIV",{class:!0});var qw=s(gt);T(BL.$$.fragment,qw),ZXo=i(qw),Jpe=n(qw,"P",{});var ovt=s(Jpe);ezo=r(ovt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ovt.forEach(t),ozo=i(qw),ld=n(qw,"P",{});var boe=s(ld);rzo=r(boe,`Note:
Loading a model from its configuration file does `),Ype=n(boe,"STRONG",{});var rvt=s(Ype);tzo=r(rvt,"not"),rvt.forEach(t),azo=r(boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=n(boe,"A",{href:!0});var tvt=s(uX);nzo=r(tvt,"from_pretrained()"),tvt.forEach(t),szo=r(boe," to load the model weights."),boe.forEach(t),lzo=i(qw),T(a0.$$.fragment,qw),qw.forEach(t),izo=i(nl),ao=n(nl,"DIV",{class:!0});var ma=s(ao);T(IL.$$.fragment,ma),dzo=i(ma),Kpe=n(ma,"P",{});var avt=s(Kpe);czo=r(avt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),avt.forEach(t),fzo=i(ma),Da=n(ma,"P",{});var jw=s(Da);mzo=r(jw,"The model class to instantiate is selected based on the "),Zpe=n(jw,"CODE",{});var nvt=s(Zpe);gzo=r(nvt,"model_type"),nvt.forEach(t),hzo=r(jw,` property of the config object (either
passed as an argument or loaded from `),eue=n(jw,"CODE",{});var svt=s(eue);pzo=r(svt,"pretrained_model_name_or_path"),svt.forEach(t),uzo=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=n(jw,"CODE",{});var lvt=s(oue);_zo=r(lvt,"pretrained_model_name_or_path"),lvt.forEach(t),bzo=r(jw,":"),jw.forEach(t),vzo=i(ma),U=n(ma,"UL",{});var J=s(U);n0=n(J,"LI",{});var ySe=s(n0);rue=n(ySe,"STRONG",{});var ivt=s(rue);Fzo=r(ivt,"albert"),ivt.forEach(t),Tzo=r(ySe," \u2014 "),_X=n(ySe,"A",{href:!0});var dvt=s(_X);Mzo=r(dvt,"AlbertForTokenClassification"),dvt.forEach(t),Ezo=r(ySe," (ALBERT model)"),ySe.forEach(t),Czo=i(J),s0=n(J,"LI",{});var xSe=s(s0);tue=n(xSe,"STRONG",{});var cvt=s(tue);wzo=r(cvt,"bert"),cvt.forEach(t),Azo=r(xSe," \u2014 "),bX=n(xSe,"A",{href:!0});var fvt=s(bX);Lzo=r(fvt,"BertForTokenClassification"),fvt.forEach(t),yzo=r(xSe," (BERT model)"),xSe.forEach(t),xzo=i(J),l0=n(J,"LI",{});var $Se=s(l0);aue=n($Se,"STRONG",{});var mvt=s(aue);$zo=r(mvt,"big_bird"),mvt.forEach(t),kzo=r($Se," \u2014 "),vX=n($Se,"A",{href:!0});var gvt=s(vX);Szo=r(gvt,"BigBirdForTokenClassification"),gvt.forEach(t),Rzo=r($Se," (BigBird model)"),$Se.forEach(t),Pzo=i(J),i0=n(J,"LI",{});var kSe=s(i0);nue=n(kSe,"STRONG",{});var hvt=s(nue);Bzo=r(hvt,"camembert"),hvt.forEach(t),Izo=r(kSe," \u2014 "),FX=n(kSe,"A",{href:!0});var pvt=s(FX);Nzo=r(pvt,"CamembertForTokenClassification"),pvt.forEach(t),qzo=r(kSe," (CamemBERT model)"),kSe.forEach(t),jzo=i(J),d0=n(J,"LI",{});var SSe=s(d0);sue=n(SSe,"STRONG",{});var uvt=s(sue);Dzo=r(uvt,"canine"),uvt.forEach(t),Gzo=r(SSe," \u2014 "),TX=n(SSe,"A",{href:!0});var _vt=s(TX);Ozo=r(_vt,"CanineForTokenClassification"),_vt.forEach(t),Vzo=r(SSe," (CANINE model)"),SSe.forEach(t),Xzo=i(J),c0=n(J,"LI",{});var RSe=s(c0);lue=n(RSe,"STRONG",{});var bvt=s(lue);zzo=r(bvt,"convbert"),bvt.forEach(t),Wzo=r(RSe," \u2014 "),MX=n(RSe,"A",{href:!0});var vvt=s(MX);Qzo=r(vvt,"ConvBertForTokenClassification"),vvt.forEach(t),Hzo=r(RSe," (ConvBERT model)"),RSe.forEach(t),Uzo=i(J),f0=n(J,"LI",{});var PSe=s(f0);iue=n(PSe,"STRONG",{});var Fvt=s(iue);Jzo=r(Fvt,"data2vec-text"),Fvt.forEach(t),Yzo=r(PSe," \u2014 "),EX=n(PSe,"A",{href:!0});var Tvt=s(EX);Kzo=r(Tvt,"Data2VecTextForTokenClassification"),Tvt.forEach(t),Zzo=r(PSe," (Data2VecText model)"),PSe.forEach(t),eWo=i(J),m0=n(J,"LI",{});var BSe=s(m0);due=n(BSe,"STRONG",{});var Mvt=s(due);oWo=r(Mvt,"deberta"),Mvt.forEach(t),rWo=r(BSe," \u2014 "),CX=n(BSe,"A",{href:!0});var Evt=s(CX);tWo=r(Evt,"DebertaForTokenClassification"),Evt.forEach(t),aWo=r(BSe," (DeBERTa model)"),BSe.forEach(t),nWo=i(J),g0=n(J,"LI",{});var ISe=s(g0);cue=n(ISe,"STRONG",{});var Cvt=s(cue);sWo=r(Cvt,"deberta-v2"),Cvt.forEach(t),lWo=r(ISe," \u2014 "),wX=n(ISe,"A",{href:!0});var wvt=s(wX);iWo=r(wvt,"DebertaV2ForTokenClassification"),wvt.forEach(t),dWo=r(ISe," (DeBERTa-v2 model)"),ISe.forEach(t),cWo=i(J),h0=n(J,"LI",{});var NSe=s(h0);fue=n(NSe,"STRONG",{});var Avt=s(fue);fWo=r(Avt,"distilbert"),Avt.forEach(t),mWo=r(NSe," \u2014 "),AX=n(NSe,"A",{href:!0});var Lvt=s(AX);gWo=r(Lvt,"DistilBertForTokenClassification"),Lvt.forEach(t),hWo=r(NSe," (DistilBERT model)"),NSe.forEach(t),pWo=i(J),p0=n(J,"LI",{});var qSe=s(p0);mue=n(qSe,"STRONG",{});var yvt=s(mue);uWo=r(yvt,"electra"),yvt.forEach(t),_Wo=r(qSe," \u2014 "),LX=n(qSe,"A",{href:!0});var xvt=s(LX);bWo=r(xvt,"ElectraForTokenClassification"),xvt.forEach(t),vWo=r(qSe," (ELECTRA model)"),qSe.forEach(t),FWo=i(J),u0=n(J,"LI",{});var jSe=s(u0);gue=n(jSe,"STRONG",{});var $vt=s(gue);TWo=r($vt,"flaubert"),$vt.forEach(t),MWo=r(jSe," \u2014 "),yX=n(jSe,"A",{href:!0});var kvt=s(yX);EWo=r(kvt,"FlaubertForTokenClassification"),kvt.forEach(t),CWo=r(jSe," (FlauBERT model)"),jSe.forEach(t),wWo=i(J),_0=n(J,"LI",{});var DSe=s(_0);hue=n(DSe,"STRONG",{});var Svt=s(hue);AWo=r(Svt,"fnet"),Svt.forEach(t),LWo=r(DSe," \u2014 "),xX=n(DSe,"A",{href:!0});var Rvt=s(xX);yWo=r(Rvt,"FNetForTokenClassification"),Rvt.forEach(t),xWo=r(DSe," (FNet model)"),DSe.forEach(t),$Wo=i(J),b0=n(J,"LI",{});var GSe=s(b0);pue=n(GSe,"STRONG",{});var Pvt=s(pue);kWo=r(Pvt,"funnel"),Pvt.forEach(t),SWo=r(GSe," \u2014 "),$X=n(GSe,"A",{href:!0});var Bvt=s($X);RWo=r(Bvt,"FunnelForTokenClassification"),Bvt.forEach(t),PWo=r(GSe," (Funnel Transformer model)"),GSe.forEach(t),BWo=i(J),v0=n(J,"LI",{});var OSe=s(v0);uue=n(OSe,"STRONG",{});var Ivt=s(uue);IWo=r(Ivt,"gpt2"),Ivt.forEach(t),NWo=r(OSe," \u2014 "),kX=n(OSe,"A",{href:!0});var Nvt=s(kX);qWo=r(Nvt,"GPT2ForTokenClassification"),Nvt.forEach(t),jWo=r(OSe," (OpenAI GPT-2 model)"),OSe.forEach(t),DWo=i(J),F0=n(J,"LI",{});var VSe=s(F0);_ue=n(VSe,"STRONG",{});var qvt=s(_ue);GWo=r(qvt,"ibert"),qvt.forEach(t),OWo=r(VSe," \u2014 "),SX=n(VSe,"A",{href:!0});var jvt=s(SX);VWo=r(jvt,"IBertForTokenClassification"),jvt.forEach(t),XWo=r(VSe," (I-BERT model)"),VSe.forEach(t),zWo=i(J),T0=n(J,"LI",{});var XSe=s(T0);bue=n(XSe,"STRONG",{});var Dvt=s(bue);WWo=r(Dvt,"layoutlm"),Dvt.forEach(t),QWo=r(XSe," \u2014 "),RX=n(XSe,"A",{href:!0});var Gvt=s(RX);HWo=r(Gvt,"LayoutLMForTokenClassification"),Gvt.forEach(t),UWo=r(XSe," (LayoutLM model)"),XSe.forEach(t),JWo=i(J),M0=n(J,"LI",{});var zSe=s(M0);vue=n(zSe,"STRONG",{});var Ovt=s(vue);YWo=r(Ovt,"layoutlmv2"),Ovt.forEach(t),KWo=r(zSe," \u2014 "),PX=n(zSe,"A",{href:!0});var Vvt=s(PX);ZWo=r(Vvt,"LayoutLMv2ForTokenClassification"),Vvt.forEach(t),eQo=r(zSe," (LayoutLMv2 model)"),zSe.forEach(t),oQo=i(J),E0=n(J,"LI",{});var WSe=s(E0);Fue=n(WSe,"STRONG",{});var Xvt=s(Fue);rQo=r(Xvt,"layoutlmv3"),Xvt.forEach(t),tQo=r(WSe," \u2014 "),BX=n(WSe,"A",{href:!0});var zvt=s(BX);aQo=r(zvt,"LayoutLMv3ForTokenClassification"),zvt.forEach(t),nQo=r(WSe," (LayoutLMv3 model)"),WSe.forEach(t),sQo=i(J),C0=n(J,"LI",{});var QSe=s(C0);Tue=n(QSe,"STRONG",{});var Wvt=s(Tue);lQo=r(Wvt,"longformer"),Wvt.forEach(t),iQo=r(QSe," \u2014 "),IX=n(QSe,"A",{href:!0});var Qvt=s(IX);dQo=r(Qvt,"LongformerForTokenClassification"),Qvt.forEach(t),cQo=r(QSe," (Longformer model)"),QSe.forEach(t),fQo=i(J),w0=n(J,"LI",{});var HSe=s(w0);Mue=n(HSe,"STRONG",{});var Hvt=s(Mue);mQo=r(Hvt,"megatron-bert"),Hvt.forEach(t),gQo=r(HSe," \u2014 "),NX=n(HSe,"A",{href:!0});var Uvt=s(NX);hQo=r(Uvt,"MegatronBertForTokenClassification"),Uvt.forEach(t),pQo=r(HSe," (Megatron-BERT model)"),HSe.forEach(t),uQo=i(J),A0=n(J,"LI",{});var USe=s(A0);Eue=n(USe,"STRONG",{});var Jvt=s(Eue);_Qo=r(Jvt,"mobilebert"),Jvt.forEach(t),bQo=r(USe," \u2014 "),qX=n(USe,"A",{href:!0});var Yvt=s(qX);vQo=r(Yvt,"MobileBertForTokenClassification"),Yvt.forEach(t),FQo=r(USe," (MobileBERT model)"),USe.forEach(t),TQo=i(J),L0=n(J,"LI",{});var JSe=s(L0);Cue=n(JSe,"STRONG",{});var Kvt=s(Cue);MQo=r(Kvt,"mpnet"),Kvt.forEach(t),EQo=r(JSe," \u2014 "),jX=n(JSe,"A",{href:!0});var Zvt=s(jX);CQo=r(Zvt,"MPNetForTokenClassification"),Zvt.forEach(t),wQo=r(JSe," (MPNet model)"),JSe.forEach(t),AQo=i(J),y0=n(J,"LI",{});var YSe=s(y0);wue=n(YSe,"STRONG",{});var e0t=s(wue);LQo=r(e0t,"nystromformer"),e0t.forEach(t),yQo=r(YSe," \u2014 "),DX=n(YSe,"A",{href:!0});var o0t=s(DX);xQo=r(o0t,"NystromformerForTokenClassification"),o0t.forEach(t),$Qo=r(YSe," (Nystr\xF6mformer model)"),YSe.forEach(t),kQo=i(J),x0=n(J,"LI",{});var KSe=s(x0);Aue=n(KSe,"STRONG",{});var r0t=s(Aue);SQo=r(r0t,"qdqbert"),r0t.forEach(t),RQo=r(KSe," \u2014 "),GX=n(KSe,"A",{href:!0});var t0t=s(GX);PQo=r(t0t,"QDQBertForTokenClassification"),t0t.forEach(t),BQo=r(KSe," (QDQBert model)"),KSe.forEach(t),IQo=i(J),$0=n(J,"LI",{});var ZSe=s($0);Lue=n(ZSe,"STRONG",{});var a0t=s(Lue);NQo=r(a0t,"rembert"),a0t.forEach(t),qQo=r(ZSe," \u2014 "),OX=n(ZSe,"A",{href:!0});var n0t=s(OX);jQo=r(n0t,"RemBertForTokenClassification"),n0t.forEach(t),DQo=r(ZSe," (RemBERT model)"),ZSe.forEach(t),GQo=i(J),k0=n(J,"LI",{});var eRe=s(k0);yue=n(eRe,"STRONG",{});var s0t=s(yue);OQo=r(s0t,"roberta"),s0t.forEach(t),VQo=r(eRe," \u2014 "),VX=n(eRe,"A",{href:!0});var l0t=s(VX);XQo=r(l0t,"RobertaForTokenClassification"),l0t.forEach(t),zQo=r(eRe," (RoBERTa model)"),eRe.forEach(t),WQo=i(J),S0=n(J,"LI",{});var oRe=s(S0);xue=n(oRe,"STRONG",{});var i0t=s(xue);QQo=r(i0t,"roformer"),i0t.forEach(t),HQo=r(oRe," \u2014 "),XX=n(oRe,"A",{href:!0});var d0t=s(XX);UQo=r(d0t,"RoFormerForTokenClassification"),d0t.forEach(t),JQo=r(oRe," (RoFormer model)"),oRe.forEach(t),YQo=i(J),R0=n(J,"LI",{});var rRe=s(R0);$ue=n(rRe,"STRONG",{});var c0t=s($ue);KQo=r(c0t,"squeezebert"),c0t.forEach(t),ZQo=r(rRe," \u2014 "),zX=n(rRe,"A",{href:!0});var f0t=s(zX);eHo=r(f0t,"SqueezeBertForTokenClassification"),f0t.forEach(t),oHo=r(rRe," (SqueezeBERT model)"),rRe.forEach(t),rHo=i(J),P0=n(J,"LI",{});var tRe=s(P0);kue=n(tRe,"STRONG",{});var m0t=s(kue);tHo=r(m0t,"xlm"),m0t.forEach(t),aHo=r(tRe," \u2014 "),WX=n(tRe,"A",{href:!0});var g0t=s(WX);nHo=r(g0t,"XLMForTokenClassification"),g0t.forEach(t),sHo=r(tRe," (XLM model)"),tRe.forEach(t),lHo=i(J),B0=n(J,"LI",{});var aRe=s(B0);Sue=n(aRe,"STRONG",{});var h0t=s(Sue);iHo=r(h0t,"xlm-roberta"),h0t.forEach(t),dHo=r(aRe," \u2014 "),QX=n(aRe,"A",{href:!0});var p0t=s(QX);cHo=r(p0t,"XLMRobertaForTokenClassification"),p0t.forEach(t),fHo=r(aRe," (XLM-RoBERTa model)"),aRe.forEach(t),mHo=i(J),I0=n(J,"LI",{});var nRe=s(I0);Rue=n(nRe,"STRONG",{});var u0t=s(Rue);gHo=r(u0t,"xlm-roberta-xl"),u0t.forEach(t),hHo=r(nRe," \u2014 "),HX=n(nRe,"A",{href:!0});var _0t=s(HX);pHo=r(_0t,"XLMRobertaXLForTokenClassification"),_0t.forEach(t),uHo=r(nRe," (XLM-RoBERTa-XL model)"),nRe.forEach(t),_Ho=i(J),N0=n(J,"LI",{});var sRe=s(N0);Pue=n(sRe,"STRONG",{});var b0t=s(Pue);bHo=r(b0t,"xlnet"),b0t.forEach(t),vHo=r(sRe," \u2014 "),UX=n(sRe,"A",{href:!0});var v0t=s(UX);FHo=r(v0t,"XLNetForTokenClassification"),v0t.forEach(t),THo=r(sRe," (XLNet model)"),sRe.forEach(t),MHo=i(J),q0=n(J,"LI",{});var lRe=s(q0);Bue=n(lRe,"STRONG",{});var F0t=s(Bue);EHo=r(F0t,"yoso"),F0t.forEach(t),CHo=r(lRe," \u2014 "),JX=n(lRe,"A",{href:!0});var T0t=s(JX);wHo=r(T0t,"YosoForTokenClassification"),T0t.forEach(t),AHo=r(lRe," (YOSO model)"),lRe.forEach(t),J.forEach(t),LHo=i(ma),j0=n(ma,"P",{});var iRe=s(j0);yHo=r(iRe,"The model is set in evaluation mode by default using "),Iue=n(iRe,"CODE",{});var M0t=s(Iue);xHo=r(M0t,"model.eval()"),M0t.forEach(t),$Ho=r(iRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=n(iRe,"CODE",{});var E0t=s(Nue);kHo=r(E0t,"model.train()"),E0t.forEach(t),iRe.forEach(t),SHo=i(ma),T(D0.$$.fragment,ma),ma.forEach(t),nl.forEach(t),PGe=i(f),id=n(f,"H2",{class:!0});var DVe=s(id);G0=n(DVe,"A",{id:!0,class:!0,href:!0});var C0t=s(G0);que=n(C0t,"SPAN",{});var w0t=s(que);T(NL.$$.fragment,w0t),w0t.forEach(t),C0t.forEach(t),RHo=i(DVe),jue=n(DVe,"SPAN",{});var A0t=s(jue);PHo=r(A0t,"AutoModelForQuestionAnswering"),A0t.forEach(t),DVe.forEach(t),BGe=i(f),qo=n(f,"DIV",{class:!0});var sl=s(qo);T(qL.$$.fragment,sl),BHo=i(sl),dd=n(sl,"P",{});var voe=s(dd);IHo=r(voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),YX=n(voe,"A",{href:!0});var L0t=s(YX);NHo=r(L0t,"from_pretrained()"),L0t.forEach(t),qHo=r(voe," class method or the "),KX=n(voe,"A",{href:!0});var y0t=s(KX);jHo=r(y0t,"from_config()"),y0t.forEach(t),DHo=r(voe,` class
method.`),voe.forEach(t),GHo=i(sl),jL=n(sl,"P",{});var GVe=s(jL);OHo=r(GVe,"This class cannot be instantiated directly using "),Due=n(GVe,"CODE",{});var x0t=s(Due);VHo=r(x0t,"__init__()"),x0t.forEach(t),XHo=r(GVe," (throws an error)."),GVe.forEach(t),zHo=i(sl),ht=n(sl,"DIV",{class:!0});var Dw=s(ht);T(DL.$$.fragment,Dw),WHo=i(Dw),Gue=n(Dw,"P",{});var $0t=s(Gue);QHo=r($0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$0t.forEach(t),HHo=i(Dw),cd=n(Dw,"P",{});var Foe=s(cd);UHo=r(Foe,`Note:
Loading a model from its configuration file does `),Oue=n(Foe,"STRONG",{});var k0t=s(Oue);JHo=r(k0t,"not"),k0t.forEach(t),YHo=r(Foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(Foe,"A",{href:!0});var S0t=s(ZX);KHo=r(S0t,"from_pretrained()"),S0t.forEach(t),ZHo=r(Foe," to load the model weights."),Foe.forEach(t),eUo=i(Dw),T(O0.$$.fragment,Dw),Dw.forEach(t),oUo=i(sl),no=n(sl,"DIV",{class:!0});var ga=s(no);T(GL.$$.fragment,ga),rUo=i(ga),Vue=n(ga,"P",{});var R0t=s(Vue);tUo=r(R0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),R0t.forEach(t),aUo=i(ga),Ga=n(ga,"P",{});var Gw=s(Ga);nUo=r(Gw,"The model class to instantiate is selected based on the "),Xue=n(Gw,"CODE",{});var P0t=s(Xue);sUo=r(P0t,"model_type"),P0t.forEach(t),lUo=r(Gw,` property of the config object (either
passed as an argument or loaded from `),zue=n(Gw,"CODE",{});var B0t=s(zue);iUo=r(B0t,"pretrained_model_name_or_path"),B0t.forEach(t),dUo=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=n(Gw,"CODE",{});var I0t=s(Wue);cUo=r(I0t,"pretrained_model_name_or_path"),I0t.forEach(t),fUo=r(Gw,":"),Gw.forEach(t),mUo=i(ga),V=n(ga,"UL",{});var X=s(V);V0=n(X,"LI",{});var dRe=s(V0);Que=n(dRe,"STRONG",{});var N0t=s(Que);gUo=r(N0t,"albert"),N0t.forEach(t),hUo=r(dRe," \u2014 "),ez=n(dRe,"A",{href:!0});var q0t=s(ez);pUo=r(q0t,"AlbertForQuestionAnswering"),q0t.forEach(t),uUo=r(dRe," (ALBERT model)"),dRe.forEach(t),_Uo=i(X),X0=n(X,"LI",{});var cRe=s(X0);Hue=n(cRe,"STRONG",{});var j0t=s(Hue);bUo=r(j0t,"bart"),j0t.forEach(t),vUo=r(cRe," \u2014 "),oz=n(cRe,"A",{href:!0});var D0t=s(oz);FUo=r(D0t,"BartForQuestionAnswering"),D0t.forEach(t),TUo=r(cRe," (BART model)"),cRe.forEach(t),MUo=i(X),z0=n(X,"LI",{});var fRe=s(z0);Uue=n(fRe,"STRONG",{});var G0t=s(Uue);EUo=r(G0t,"bert"),G0t.forEach(t),CUo=r(fRe," \u2014 "),rz=n(fRe,"A",{href:!0});var O0t=s(rz);wUo=r(O0t,"BertForQuestionAnswering"),O0t.forEach(t),AUo=r(fRe," (BERT model)"),fRe.forEach(t),LUo=i(X),W0=n(X,"LI",{});var mRe=s(W0);Jue=n(mRe,"STRONG",{});var V0t=s(Jue);yUo=r(V0t,"big_bird"),V0t.forEach(t),xUo=r(mRe," \u2014 "),tz=n(mRe,"A",{href:!0});var X0t=s(tz);$Uo=r(X0t,"BigBirdForQuestionAnswering"),X0t.forEach(t),kUo=r(mRe," (BigBird model)"),mRe.forEach(t),SUo=i(X),Q0=n(X,"LI",{});var gRe=s(Q0);Yue=n(gRe,"STRONG",{});var z0t=s(Yue);RUo=r(z0t,"bigbird_pegasus"),z0t.forEach(t),PUo=r(gRe," \u2014 "),az=n(gRe,"A",{href:!0});var W0t=s(az);BUo=r(W0t,"BigBirdPegasusForQuestionAnswering"),W0t.forEach(t),IUo=r(gRe," (BigBird-Pegasus model)"),gRe.forEach(t),NUo=i(X),H0=n(X,"LI",{});var hRe=s(H0);Kue=n(hRe,"STRONG",{});var Q0t=s(Kue);qUo=r(Q0t,"camembert"),Q0t.forEach(t),jUo=r(hRe," \u2014 "),nz=n(hRe,"A",{href:!0});var H0t=s(nz);DUo=r(H0t,"CamembertForQuestionAnswering"),H0t.forEach(t),GUo=r(hRe," (CamemBERT model)"),hRe.forEach(t),OUo=i(X),U0=n(X,"LI",{});var pRe=s(U0);Zue=n(pRe,"STRONG",{});var U0t=s(Zue);VUo=r(U0t,"canine"),U0t.forEach(t),XUo=r(pRe," \u2014 "),sz=n(pRe,"A",{href:!0});var J0t=s(sz);zUo=r(J0t,"CanineForQuestionAnswering"),J0t.forEach(t),WUo=r(pRe," (CANINE model)"),pRe.forEach(t),QUo=i(X),J0=n(X,"LI",{});var uRe=s(J0);e_e=n(uRe,"STRONG",{});var Y0t=s(e_e);HUo=r(Y0t,"convbert"),Y0t.forEach(t),UUo=r(uRe," \u2014 "),lz=n(uRe,"A",{href:!0});var K0t=s(lz);JUo=r(K0t,"ConvBertForQuestionAnswering"),K0t.forEach(t),YUo=r(uRe," (ConvBERT model)"),uRe.forEach(t),KUo=i(X),Y0=n(X,"LI",{});var _Re=s(Y0);o_e=n(_Re,"STRONG",{});var Z0t=s(o_e);ZUo=r(Z0t,"data2vec-text"),Z0t.forEach(t),eJo=r(_Re," \u2014 "),iz=n(_Re,"A",{href:!0});var eFt=s(iz);oJo=r(eFt,"Data2VecTextForQuestionAnswering"),eFt.forEach(t),rJo=r(_Re," (Data2VecText model)"),_Re.forEach(t),tJo=i(X),K0=n(X,"LI",{});var bRe=s(K0);r_e=n(bRe,"STRONG",{});var oFt=s(r_e);aJo=r(oFt,"deberta"),oFt.forEach(t),nJo=r(bRe," \u2014 "),dz=n(bRe,"A",{href:!0});var rFt=s(dz);sJo=r(rFt,"DebertaForQuestionAnswering"),rFt.forEach(t),lJo=r(bRe," (DeBERTa model)"),bRe.forEach(t),iJo=i(X),Z0=n(X,"LI",{});var vRe=s(Z0);t_e=n(vRe,"STRONG",{});var tFt=s(t_e);dJo=r(tFt,"deberta-v2"),tFt.forEach(t),cJo=r(vRe," \u2014 "),cz=n(vRe,"A",{href:!0});var aFt=s(cz);fJo=r(aFt,"DebertaV2ForQuestionAnswering"),aFt.forEach(t),mJo=r(vRe," (DeBERTa-v2 model)"),vRe.forEach(t),gJo=i(X),eF=n(X,"LI",{});var FRe=s(eF);a_e=n(FRe,"STRONG",{});var nFt=s(a_e);hJo=r(nFt,"distilbert"),nFt.forEach(t),pJo=r(FRe," \u2014 "),fz=n(FRe,"A",{href:!0});var sFt=s(fz);uJo=r(sFt,"DistilBertForQuestionAnswering"),sFt.forEach(t),_Jo=r(FRe," (DistilBERT model)"),FRe.forEach(t),bJo=i(X),oF=n(X,"LI",{});var TRe=s(oF);n_e=n(TRe,"STRONG",{});var lFt=s(n_e);vJo=r(lFt,"electra"),lFt.forEach(t),FJo=r(TRe," \u2014 "),mz=n(TRe,"A",{href:!0});var iFt=s(mz);TJo=r(iFt,"ElectraForQuestionAnswering"),iFt.forEach(t),MJo=r(TRe," (ELECTRA model)"),TRe.forEach(t),EJo=i(X),rF=n(X,"LI",{});var MRe=s(rF);s_e=n(MRe,"STRONG",{});var dFt=s(s_e);CJo=r(dFt,"flaubert"),dFt.forEach(t),wJo=r(MRe," \u2014 "),gz=n(MRe,"A",{href:!0});var cFt=s(gz);AJo=r(cFt,"FlaubertForQuestionAnsweringSimple"),cFt.forEach(t),LJo=r(MRe," (FlauBERT model)"),MRe.forEach(t),yJo=i(X),tF=n(X,"LI",{});var ERe=s(tF);l_e=n(ERe,"STRONG",{});var fFt=s(l_e);xJo=r(fFt,"fnet"),fFt.forEach(t),$Jo=r(ERe," \u2014 "),hz=n(ERe,"A",{href:!0});var mFt=s(hz);kJo=r(mFt,"FNetForQuestionAnswering"),mFt.forEach(t),SJo=r(ERe," (FNet model)"),ERe.forEach(t),RJo=i(X),aF=n(X,"LI",{});var CRe=s(aF);i_e=n(CRe,"STRONG",{});var gFt=s(i_e);PJo=r(gFt,"funnel"),gFt.forEach(t),BJo=r(CRe," \u2014 "),pz=n(CRe,"A",{href:!0});var hFt=s(pz);IJo=r(hFt,"FunnelForQuestionAnswering"),hFt.forEach(t),NJo=r(CRe," (Funnel Transformer model)"),CRe.forEach(t),qJo=i(X),nF=n(X,"LI",{});var wRe=s(nF);d_e=n(wRe,"STRONG",{});var pFt=s(d_e);jJo=r(pFt,"gptj"),pFt.forEach(t),DJo=r(wRe," \u2014 "),uz=n(wRe,"A",{href:!0});var uFt=s(uz);GJo=r(uFt,"GPTJForQuestionAnswering"),uFt.forEach(t),OJo=r(wRe," (GPT-J model)"),wRe.forEach(t),VJo=i(X),sF=n(X,"LI",{});var ARe=s(sF);c_e=n(ARe,"STRONG",{});var _Ft=s(c_e);XJo=r(_Ft,"ibert"),_Ft.forEach(t),zJo=r(ARe," \u2014 "),_z=n(ARe,"A",{href:!0});var bFt=s(_z);WJo=r(bFt,"IBertForQuestionAnswering"),bFt.forEach(t),QJo=r(ARe," (I-BERT model)"),ARe.forEach(t),HJo=i(X),lF=n(X,"LI",{});var LRe=s(lF);f_e=n(LRe,"STRONG",{});var vFt=s(f_e);UJo=r(vFt,"layoutlmv2"),vFt.forEach(t),JJo=r(LRe," \u2014 "),bz=n(LRe,"A",{href:!0});var FFt=s(bz);YJo=r(FFt,"LayoutLMv2ForQuestionAnswering"),FFt.forEach(t),KJo=r(LRe," (LayoutLMv2 model)"),LRe.forEach(t),ZJo=i(X),iF=n(X,"LI",{});var yRe=s(iF);m_e=n(yRe,"STRONG",{});var TFt=s(m_e);eYo=r(TFt,"layoutlmv3"),TFt.forEach(t),oYo=r(yRe," \u2014 "),vz=n(yRe,"A",{href:!0});var MFt=s(vz);rYo=r(MFt,"LayoutLMv3ForQuestionAnswering"),MFt.forEach(t),tYo=r(yRe," (LayoutLMv3 model)"),yRe.forEach(t),aYo=i(X),dF=n(X,"LI",{});var xRe=s(dF);g_e=n(xRe,"STRONG",{});var EFt=s(g_e);nYo=r(EFt,"led"),EFt.forEach(t),sYo=r(xRe," \u2014 "),Fz=n(xRe,"A",{href:!0});var CFt=s(Fz);lYo=r(CFt,"LEDForQuestionAnswering"),CFt.forEach(t),iYo=r(xRe," (LED model)"),xRe.forEach(t),dYo=i(X),cF=n(X,"LI",{});var $Re=s(cF);h_e=n($Re,"STRONG",{});var wFt=s(h_e);cYo=r(wFt,"longformer"),wFt.forEach(t),fYo=r($Re," \u2014 "),Tz=n($Re,"A",{href:!0});var AFt=s(Tz);mYo=r(AFt,"LongformerForQuestionAnswering"),AFt.forEach(t),gYo=r($Re," (Longformer model)"),$Re.forEach(t),hYo=i(X),fF=n(X,"LI",{});var kRe=s(fF);p_e=n(kRe,"STRONG",{});var LFt=s(p_e);pYo=r(LFt,"lxmert"),LFt.forEach(t),uYo=r(kRe," \u2014 "),Mz=n(kRe,"A",{href:!0});var yFt=s(Mz);_Yo=r(yFt,"LxmertForQuestionAnswering"),yFt.forEach(t),bYo=r(kRe," (LXMERT model)"),kRe.forEach(t),vYo=i(X),mF=n(X,"LI",{});var SRe=s(mF);u_e=n(SRe,"STRONG",{});var xFt=s(u_e);FYo=r(xFt,"mbart"),xFt.forEach(t),TYo=r(SRe," \u2014 "),Ez=n(SRe,"A",{href:!0});var $Ft=s(Ez);MYo=r($Ft,"MBartForQuestionAnswering"),$Ft.forEach(t),EYo=r(SRe," (mBART model)"),SRe.forEach(t),CYo=i(X),gF=n(X,"LI",{});var RRe=s(gF);__e=n(RRe,"STRONG",{});var kFt=s(__e);wYo=r(kFt,"megatron-bert"),kFt.forEach(t),AYo=r(RRe," \u2014 "),Cz=n(RRe,"A",{href:!0});var SFt=s(Cz);LYo=r(SFt,"MegatronBertForQuestionAnswering"),SFt.forEach(t),yYo=r(RRe," (Megatron-BERT model)"),RRe.forEach(t),xYo=i(X),hF=n(X,"LI",{});var PRe=s(hF);b_e=n(PRe,"STRONG",{});var RFt=s(b_e);$Yo=r(RFt,"mobilebert"),RFt.forEach(t),kYo=r(PRe," \u2014 "),wz=n(PRe,"A",{href:!0});var PFt=s(wz);SYo=r(PFt,"MobileBertForQuestionAnswering"),PFt.forEach(t),RYo=r(PRe," (MobileBERT model)"),PRe.forEach(t),PYo=i(X),pF=n(X,"LI",{});var BRe=s(pF);v_e=n(BRe,"STRONG",{});var BFt=s(v_e);BYo=r(BFt,"mpnet"),BFt.forEach(t),IYo=r(BRe," \u2014 "),Az=n(BRe,"A",{href:!0});var IFt=s(Az);NYo=r(IFt,"MPNetForQuestionAnswering"),IFt.forEach(t),qYo=r(BRe," (MPNet model)"),BRe.forEach(t),jYo=i(X),uF=n(X,"LI",{});var IRe=s(uF);F_e=n(IRe,"STRONG",{});var NFt=s(F_e);DYo=r(NFt,"nystromformer"),NFt.forEach(t),GYo=r(IRe," \u2014 "),Lz=n(IRe,"A",{href:!0});var qFt=s(Lz);OYo=r(qFt,"NystromformerForQuestionAnswering"),qFt.forEach(t),VYo=r(IRe," (Nystr\xF6mformer model)"),IRe.forEach(t),XYo=i(X),_F=n(X,"LI",{});var NRe=s(_F);T_e=n(NRe,"STRONG",{});var jFt=s(T_e);zYo=r(jFt,"qdqbert"),jFt.forEach(t),WYo=r(NRe," \u2014 "),yz=n(NRe,"A",{href:!0});var DFt=s(yz);QYo=r(DFt,"QDQBertForQuestionAnswering"),DFt.forEach(t),HYo=r(NRe," (QDQBert model)"),NRe.forEach(t),UYo=i(X),bF=n(X,"LI",{});var qRe=s(bF);M_e=n(qRe,"STRONG",{});var GFt=s(M_e);JYo=r(GFt,"reformer"),GFt.forEach(t),YYo=r(qRe," \u2014 "),xz=n(qRe,"A",{href:!0});var OFt=s(xz);KYo=r(OFt,"ReformerForQuestionAnswering"),OFt.forEach(t),ZYo=r(qRe," (Reformer model)"),qRe.forEach(t),eKo=i(X),vF=n(X,"LI",{});var jRe=s(vF);E_e=n(jRe,"STRONG",{});var VFt=s(E_e);oKo=r(VFt,"rembert"),VFt.forEach(t),rKo=r(jRe," \u2014 "),$z=n(jRe,"A",{href:!0});var XFt=s($z);tKo=r(XFt,"RemBertForQuestionAnswering"),XFt.forEach(t),aKo=r(jRe," (RemBERT model)"),jRe.forEach(t),nKo=i(X),FF=n(X,"LI",{});var DRe=s(FF);C_e=n(DRe,"STRONG",{});var zFt=s(C_e);sKo=r(zFt,"roberta"),zFt.forEach(t),lKo=r(DRe," \u2014 "),kz=n(DRe,"A",{href:!0});var WFt=s(kz);iKo=r(WFt,"RobertaForQuestionAnswering"),WFt.forEach(t),dKo=r(DRe," (RoBERTa model)"),DRe.forEach(t),cKo=i(X),TF=n(X,"LI",{});var GRe=s(TF);w_e=n(GRe,"STRONG",{});var QFt=s(w_e);fKo=r(QFt,"roformer"),QFt.forEach(t),mKo=r(GRe," \u2014 "),Sz=n(GRe,"A",{href:!0});var HFt=s(Sz);gKo=r(HFt,"RoFormerForQuestionAnswering"),HFt.forEach(t),hKo=r(GRe," (RoFormer model)"),GRe.forEach(t),pKo=i(X),MF=n(X,"LI",{});var ORe=s(MF);A_e=n(ORe,"STRONG",{});var UFt=s(A_e);uKo=r(UFt,"splinter"),UFt.forEach(t),_Ko=r(ORe," \u2014 "),Rz=n(ORe,"A",{href:!0});var JFt=s(Rz);bKo=r(JFt,"SplinterForQuestionAnswering"),JFt.forEach(t),vKo=r(ORe," (Splinter model)"),ORe.forEach(t),FKo=i(X),EF=n(X,"LI",{});var VRe=s(EF);L_e=n(VRe,"STRONG",{});var YFt=s(L_e);TKo=r(YFt,"squeezebert"),YFt.forEach(t),MKo=r(VRe," \u2014 "),Pz=n(VRe,"A",{href:!0});var KFt=s(Pz);EKo=r(KFt,"SqueezeBertForQuestionAnswering"),KFt.forEach(t),CKo=r(VRe," (SqueezeBERT model)"),VRe.forEach(t),wKo=i(X),CF=n(X,"LI",{});var XRe=s(CF);y_e=n(XRe,"STRONG",{});var ZFt=s(y_e);AKo=r(ZFt,"xlm"),ZFt.forEach(t),LKo=r(XRe," \u2014 "),Bz=n(XRe,"A",{href:!0});var eTt=s(Bz);yKo=r(eTt,"XLMForQuestionAnsweringSimple"),eTt.forEach(t),xKo=r(XRe," (XLM model)"),XRe.forEach(t),$Ko=i(X),wF=n(X,"LI",{});var zRe=s(wF);x_e=n(zRe,"STRONG",{});var oTt=s(x_e);kKo=r(oTt,"xlm-roberta"),oTt.forEach(t),SKo=r(zRe," \u2014 "),Iz=n(zRe,"A",{href:!0});var rTt=s(Iz);RKo=r(rTt,"XLMRobertaForQuestionAnswering"),rTt.forEach(t),PKo=r(zRe," (XLM-RoBERTa model)"),zRe.forEach(t),BKo=i(X),AF=n(X,"LI",{});var WRe=s(AF);$_e=n(WRe,"STRONG",{});var tTt=s($_e);IKo=r(tTt,"xlm-roberta-xl"),tTt.forEach(t),NKo=r(WRe," \u2014 "),Nz=n(WRe,"A",{href:!0});var aTt=s(Nz);qKo=r(aTt,"XLMRobertaXLForQuestionAnswering"),aTt.forEach(t),jKo=r(WRe," (XLM-RoBERTa-XL model)"),WRe.forEach(t),DKo=i(X),LF=n(X,"LI",{});var QRe=s(LF);k_e=n(QRe,"STRONG",{});var nTt=s(k_e);GKo=r(nTt,"xlnet"),nTt.forEach(t),OKo=r(QRe," \u2014 "),qz=n(QRe,"A",{href:!0});var sTt=s(qz);VKo=r(sTt,"XLNetForQuestionAnsweringSimple"),sTt.forEach(t),XKo=r(QRe," (XLNet model)"),QRe.forEach(t),zKo=i(X),yF=n(X,"LI",{});var HRe=s(yF);S_e=n(HRe,"STRONG",{});var lTt=s(S_e);WKo=r(lTt,"yoso"),lTt.forEach(t),QKo=r(HRe," \u2014 "),jz=n(HRe,"A",{href:!0});var iTt=s(jz);HKo=r(iTt,"YosoForQuestionAnswering"),iTt.forEach(t),UKo=r(HRe," (YOSO model)"),HRe.forEach(t),X.forEach(t),JKo=i(ga),xF=n(ga,"P",{});var URe=s(xF);YKo=r(URe,"The model is set in evaluation mode by default using "),R_e=n(URe,"CODE",{});var dTt=s(R_e);KKo=r(dTt,"model.eval()"),dTt.forEach(t),ZKo=r(URe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=n(URe,"CODE",{});var cTt=s(P_e);eZo=r(cTt,"model.train()"),cTt.forEach(t),URe.forEach(t),oZo=i(ga),T($F.$$.fragment,ga),ga.forEach(t),sl.forEach(t),IGe=i(f),fd=n(f,"H2",{class:!0});var OVe=s(fd);kF=n(OVe,"A",{id:!0,class:!0,href:!0});var fTt=s(kF);B_e=n(fTt,"SPAN",{});var mTt=s(B_e);T(OL.$$.fragment,mTt),mTt.forEach(t),fTt.forEach(t),rZo=i(OVe),I_e=n(OVe,"SPAN",{});var gTt=s(I_e);tZo=r(gTt,"AutoModelForTableQuestionAnswering"),gTt.forEach(t),OVe.forEach(t),NGe=i(f),jo=n(f,"DIV",{class:!0});var ll=s(jo);T(VL.$$.fragment,ll),aZo=i(ll),md=n(ll,"P",{});var Toe=s(md);nZo=r(Toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Dz=n(Toe,"A",{href:!0});var hTt=s(Dz);sZo=r(hTt,"from_pretrained()"),hTt.forEach(t),lZo=r(Toe," class method or the "),Gz=n(Toe,"A",{href:!0});var pTt=s(Gz);iZo=r(pTt,"from_config()"),pTt.forEach(t),dZo=r(Toe,` class
method.`),Toe.forEach(t),cZo=i(ll),XL=n(ll,"P",{});var VVe=s(XL);fZo=r(VVe,"This class cannot be instantiated directly using "),N_e=n(VVe,"CODE",{});var uTt=s(N_e);mZo=r(uTt,"__init__()"),uTt.forEach(t),gZo=r(VVe," (throws an error)."),VVe.forEach(t),hZo=i(ll),pt=n(ll,"DIV",{class:!0});var Ow=s(pt);T(zL.$$.fragment,Ow),pZo=i(Ow),q_e=n(Ow,"P",{});var _Tt=s(q_e);uZo=r(_Tt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_Tt.forEach(t),_Zo=i(Ow),gd=n(Ow,"P",{});var Moe=s(gd);bZo=r(Moe,`Note:
Loading a model from its configuration file does `),j_e=n(Moe,"STRONG",{});var bTt=s(j_e);vZo=r(bTt,"not"),bTt.forEach(t),FZo=r(Moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=n(Moe,"A",{href:!0});var vTt=s(Oz);TZo=r(vTt,"from_pretrained()"),vTt.forEach(t),MZo=r(Moe," to load the model weights."),Moe.forEach(t),EZo=i(Ow),T(SF.$$.fragment,Ow),Ow.forEach(t),CZo=i(ll),so=n(ll,"DIV",{class:!0});var ha=s(so);T(WL.$$.fragment,ha),wZo=i(ha),D_e=n(ha,"P",{});var FTt=s(D_e);AZo=r(FTt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),FTt.forEach(t),LZo=i(ha),Oa=n(ha,"P",{});var Vw=s(Oa);yZo=r(Vw,"The model class to instantiate is selected based on the "),G_e=n(Vw,"CODE",{});var TTt=s(G_e);xZo=r(TTt,"model_type"),TTt.forEach(t),$Zo=r(Vw,` property of the config object (either
passed as an argument or loaded from `),O_e=n(Vw,"CODE",{});var MTt=s(O_e);kZo=r(MTt,"pretrained_model_name_or_path"),MTt.forEach(t),SZo=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=n(Vw,"CODE",{});var ETt=s(V_e);RZo=r(ETt,"pretrained_model_name_or_path"),ETt.forEach(t),PZo=r(Vw,":"),Vw.forEach(t),BZo=i(ha),X_e=n(ha,"UL",{});var CTt=s(X_e);RF=n(CTt,"LI",{});var JRe=s(RF);z_e=n(JRe,"STRONG",{});var wTt=s(z_e);IZo=r(wTt,"tapas"),wTt.forEach(t),NZo=r(JRe," \u2014 "),Vz=n(JRe,"A",{href:!0});var ATt=s(Vz);qZo=r(ATt,"TapasForQuestionAnswering"),ATt.forEach(t),jZo=r(JRe," (TAPAS model)"),JRe.forEach(t),CTt.forEach(t),DZo=i(ha),PF=n(ha,"P",{});var YRe=s(PF);GZo=r(YRe,"The model is set in evaluation mode by default using "),W_e=n(YRe,"CODE",{});var LTt=s(W_e);OZo=r(LTt,"model.eval()"),LTt.forEach(t),VZo=r(YRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q_e=n(YRe,"CODE",{});var yTt=s(Q_e);XZo=r(yTt,"model.train()"),yTt.forEach(t),YRe.forEach(t),zZo=i(ha),T(BF.$$.fragment,ha),ha.forEach(t),ll.forEach(t),qGe=i(f),hd=n(f,"H2",{class:!0});var XVe=s(hd);IF=n(XVe,"A",{id:!0,class:!0,href:!0});var xTt=s(IF);H_e=n(xTt,"SPAN",{});var $Tt=s(H_e);T(QL.$$.fragment,$Tt),$Tt.forEach(t),xTt.forEach(t),WZo=i(XVe),U_e=n(XVe,"SPAN",{});var kTt=s(U_e);QZo=r(kTt,"AutoModelForImageClassification"),kTt.forEach(t),XVe.forEach(t),jGe=i(f),Do=n(f,"DIV",{class:!0});var il=s(Do);T(HL.$$.fragment,il),HZo=i(il),pd=n(il,"P",{});var Eoe=s(pd);UZo=r(Eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Xz=n(Eoe,"A",{href:!0});var STt=s(Xz);JZo=r(STt,"from_pretrained()"),STt.forEach(t),YZo=r(Eoe," class method or the "),zz=n(Eoe,"A",{href:!0});var RTt=s(zz);KZo=r(RTt,"from_config()"),RTt.forEach(t),ZZo=r(Eoe,` class
method.`),Eoe.forEach(t),eer=i(il),UL=n(il,"P",{});var zVe=s(UL);oer=r(zVe,"This class cannot be instantiated directly using "),J_e=n(zVe,"CODE",{});var PTt=s(J_e);rer=r(PTt,"__init__()"),PTt.forEach(t),ter=r(zVe," (throws an error)."),zVe.forEach(t),aer=i(il),ut=n(il,"DIV",{class:!0});var Xw=s(ut);T(JL.$$.fragment,Xw),ner=i(Xw),Y_e=n(Xw,"P",{});var BTt=s(Y_e);ser=r(BTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),BTt.forEach(t),ler=i(Xw),ud=n(Xw,"P",{});var Coe=s(ud);ier=r(Coe,`Note:
Loading a model from its configuration file does `),K_e=n(Coe,"STRONG",{});var ITt=s(K_e);der=r(ITt,"not"),ITt.forEach(t),cer=r(Coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=n(Coe,"A",{href:!0});var NTt=s(Wz);fer=r(NTt,"from_pretrained()"),NTt.forEach(t),mer=r(Coe," to load the model weights."),Coe.forEach(t),ger=i(Xw),T(NF.$$.fragment,Xw),Xw.forEach(t),her=i(il),lo=n(il,"DIV",{class:!0});var pa=s(lo);T(YL.$$.fragment,pa),per=i(pa),Z_e=n(pa,"P",{});var qTt=s(Z_e);uer=r(qTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qTt.forEach(t),_er=i(pa),Va=n(pa,"P",{});var zw=s(Va);ber=r(zw,"The model class to instantiate is selected based on the "),e1e=n(zw,"CODE",{});var jTt=s(e1e);ver=r(jTt,"model_type"),jTt.forEach(t),Fer=r(zw,` property of the config object (either
passed as an argument or loaded from `),o1e=n(zw,"CODE",{});var DTt=s(o1e);Ter=r(DTt,"pretrained_model_name_or_path"),DTt.forEach(t),Mer=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r1e=n(zw,"CODE",{});var GTt=s(r1e);Eer=r(GTt,"pretrained_model_name_or_path"),GTt.forEach(t),Cer=r(zw,":"),zw.forEach(t),wer=i(pa),Fe=n(pa,"UL",{});var Te=s(Fe);qF=n(Te,"LI",{});var KRe=s(qF);t1e=n(KRe,"STRONG",{});var OTt=s(t1e);Aer=r(OTt,"beit"),OTt.forEach(t),Ler=r(KRe," \u2014 "),Qz=n(KRe,"A",{href:!0});var VTt=s(Qz);yer=r(VTt,"BeitForImageClassification"),VTt.forEach(t),xer=r(KRe," (BEiT model)"),KRe.forEach(t),$er=i(Te),jF=n(Te,"LI",{});var ZRe=s(jF);a1e=n(ZRe,"STRONG",{});var XTt=s(a1e);ker=r(XTt,"convnext"),XTt.forEach(t),Ser=r(ZRe," \u2014 "),Hz=n(ZRe,"A",{href:!0});var zTt=s(Hz);Rer=r(zTt,"ConvNextForImageClassification"),zTt.forEach(t),Per=r(ZRe," (ConvNeXT model)"),ZRe.forEach(t),Ber=i(Te),DF=n(Te,"LI",{});var ePe=s(DF);n1e=n(ePe,"STRONG",{});var WTt=s(n1e);Ier=r(WTt,"cvt"),WTt.forEach(t),Ner=r(ePe," \u2014 "),Uz=n(ePe,"A",{href:!0});var QTt=s(Uz);qer=r(QTt,"CvtForImageClassification"),QTt.forEach(t),jer=r(ePe," (CvT model)"),ePe.forEach(t),Der=i(Te),GF=n(Te,"LI",{});var oPe=s(GF);s1e=n(oPe,"STRONG",{});var HTt=s(s1e);Ger=r(HTt,"data2vec-vision"),HTt.forEach(t),Oer=r(oPe," \u2014 "),Jz=n(oPe,"A",{href:!0});var UTt=s(Jz);Ver=r(UTt,"Data2VecVisionForImageClassification"),UTt.forEach(t),Xer=r(oPe," (Data2VecVision model)"),oPe.forEach(t),zer=i(Te),Vs=n(Te,"LI",{});var Xk=s(Vs);l1e=n(Xk,"STRONG",{});var JTt=s(l1e);Wer=r(JTt,"deit"),JTt.forEach(t),Qer=r(Xk," \u2014 "),Yz=n(Xk,"A",{href:!0});var YTt=s(Yz);Her=r(YTt,"DeiTForImageClassification"),YTt.forEach(t),Uer=r(Xk," or "),Kz=n(Xk,"A",{href:!0});var KTt=s(Kz);Jer=r(KTt,"DeiTForImageClassificationWithTeacher"),KTt.forEach(t),Yer=r(Xk," (DeiT model)"),Xk.forEach(t),Ker=i(Te),OF=n(Te,"LI",{});var rPe=s(OF);i1e=n(rPe,"STRONG",{});var ZTt=s(i1e);Zer=r(ZTt,"imagegpt"),ZTt.forEach(t),eor=r(rPe," \u2014 "),Zz=n(rPe,"A",{href:!0});var e7t=s(Zz);oor=r(e7t,"ImageGPTForImageClassification"),e7t.forEach(t),ror=r(rPe," (ImageGPT model)"),rPe.forEach(t),tor=i(Te),Xs=n(Te,"LI",{});var zk=s(Xs);d1e=n(zk,"STRONG",{});var o7t=s(d1e);aor=r(o7t,"levit"),o7t.forEach(t),nor=r(zk," \u2014 "),eW=n(zk,"A",{href:!0});var r7t=s(eW);sor=r(r7t,"LevitForImageClassification"),r7t.forEach(t),lor=r(zk," or "),oW=n(zk,"A",{href:!0});var t7t=s(oW);ior=r(t7t,"LevitForImageClassificationWithTeacher"),t7t.forEach(t),dor=r(zk," (LeViT model)"),zk.forEach(t),cor=i(Te),_t=n(Te,"LI",{});var Lf=s(_t);c1e=n(Lf,"STRONG",{});var a7t=s(c1e);mor=r(a7t,"perceiver"),a7t.forEach(t),gor=r(Lf," \u2014 "),rW=n(Lf,"A",{href:!0});var n7t=s(rW);hor=r(n7t,"PerceiverForImageClassificationLearned"),n7t.forEach(t),por=r(Lf," or "),tW=n(Lf,"A",{href:!0});var s7t=s(tW);uor=r(s7t,"PerceiverForImageClassificationFourier"),s7t.forEach(t),_or=r(Lf," or "),aW=n(Lf,"A",{href:!0});var l7t=s(aW);bor=r(l7t,"PerceiverForImageClassificationConvProcessing"),l7t.forEach(t),vor=r(Lf," (Perceiver model)"),Lf.forEach(t),For=i(Te),VF=n(Te,"LI",{});var tPe=s(VF);f1e=n(tPe,"STRONG",{});var i7t=s(f1e);Tor=r(i7t,"poolformer"),i7t.forEach(t),Mor=r(tPe," \u2014 "),nW=n(tPe,"A",{href:!0});var d7t=s(nW);Eor=r(d7t,"PoolFormerForImageClassification"),d7t.forEach(t),Cor=r(tPe," (PoolFormer model)"),tPe.forEach(t),wor=i(Te),XF=n(Te,"LI",{});var aPe=s(XF);m1e=n(aPe,"STRONG",{});var c7t=s(m1e);Aor=r(c7t,"regnet"),c7t.forEach(t),Lor=r(aPe," \u2014 "),sW=n(aPe,"A",{href:!0});var f7t=s(sW);yor=r(f7t,"RegNetForImageClassification"),f7t.forEach(t),xor=r(aPe," (RegNet model)"),aPe.forEach(t),$or=i(Te),zF=n(Te,"LI",{});var nPe=s(zF);g1e=n(nPe,"STRONG",{});var m7t=s(g1e);kor=r(m7t,"resnet"),m7t.forEach(t),Sor=r(nPe," \u2014 "),lW=n(nPe,"A",{href:!0});var g7t=s(lW);Ror=r(g7t,"ResNetForImageClassification"),g7t.forEach(t),Por=r(nPe," (ResNet model)"),nPe.forEach(t),Bor=i(Te),WF=n(Te,"LI",{});var sPe=s(WF);h1e=n(sPe,"STRONG",{});var h7t=s(h1e);Ior=r(h7t,"segformer"),h7t.forEach(t),Nor=r(sPe," \u2014 "),iW=n(sPe,"A",{href:!0});var p7t=s(iW);qor=r(p7t,"SegformerForImageClassification"),p7t.forEach(t),jor=r(sPe," (SegFormer model)"),sPe.forEach(t),Dor=i(Te),QF=n(Te,"LI",{});var lPe=s(QF);p1e=n(lPe,"STRONG",{});var u7t=s(p1e);Gor=r(u7t,"swin"),u7t.forEach(t),Oor=r(lPe," \u2014 "),dW=n(lPe,"A",{href:!0});var _7t=s(dW);Vor=r(_7t,"SwinForImageClassification"),_7t.forEach(t),Xor=r(lPe," (Swin Transformer model)"),lPe.forEach(t),zor=i(Te),HF=n(Te,"LI",{});var iPe=s(HF);u1e=n(iPe,"STRONG",{});var b7t=s(u1e);Wor=r(b7t,"van"),b7t.forEach(t),Qor=r(iPe," \u2014 "),cW=n(iPe,"A",{href:!0});var v7t=s(cW);Hor=r(v7t,"VanForImageClassification"),v7t.forEach(t),Uor=r(iPe," (VAN model)"),iPe.forEach(t),Jor=i(Te),UF=n(Te,"LI",{});var dPe=s(UF);_1e=n(dPe,"STRONG",{});var F7t=s(_1e);Yor=r(F7t,"vit"),F7t.forEach(t),Kor=r(dPe," \u2014 "),fW=n(dPe,"A",{href:!0});var T7t=s(fW);Zor=r(T7t,"ViTForImageClassification"),T7t.forEach(t),err=r(dPe," (ViT model)"),dPe.forEach(t),Te.forEach(t),orr=i(pa),JF=n(pa,"P",{});var cPe=s(JF);rrr=r(cPe,"The model is set in evaluation mode by default using "),b1e=n(cPe,"CODE",{});var M7t=s(b1e);trr=r(M7t,"model.eval()"),M7t.forEach(t),arr=r(cPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v1e=n(cPe,"CODE",{});var E7t=s(v1e);nrr=r(E7t,"model.train()"),E7t.forEach(t),cPe.forEach(t),srr=i(pa),T(YF.$$.fragment,pa),pa.forEach(t),il.forEach(t),DGe=i(f),_d=n(f,"H2",{class:!0});var WVe=s(_d);KF=n(WVe,"A",{id:!0,class:!0,href:!0});var C7t=s(KF);F1e=n(C7t,"SPAN",{});var w7t=s(F1e);T(KL.$$.fragment,w7t),w7t.forEach(t),C7t.forEach(t),lrr=i(WVe),T1e=n(WVe,"SPAN",{});var A7t=s(T1e);irr=r(A7t,"AutoModelForVision2Seq"),A7t.forEach(t),WVe.forEach(t),GGe=i(f),Go=n(f,"DIV",{class:!0});var dl=s(Go);T(ZL.$$.fragment,dl),drr=i(dl),bd=n(dl,"P",{});var woe=s(bd);crr=r(woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mW=n(woe,"A",{href:!0});var L7t=s(mW);frr=r(L7t,"from_pretrained()"),L7t.forEach(t),mrr=r(woe," class method or the "),gW=n(woe,"A",{href:!0});var y7t=s(gW);grr=r(y7t,"from_config()"),y7t.forEach(t),hrr=r(woe,` class
method.`),woe.forEach(t),prr=i(dl),ey=n(dl,"P",{});var QVe=s(ey);urr=r(QVe,"This class cannot be instantiated directly using "),M1e=n(QVe,"CODE",{});var x7t=s(M1e);_rr=r(x7t,"__init__()"),x7t.forEach(t),brr=r(QVe," (throws an error)."),QVe.forEach(t),vrr=i(dl),bt=n(dl,"DIV",{class:!0});var Ww=s(bt);T(oy.$$.fragment,Ww),Frr=i(Ww),E1e=n(Ww,"P",{});var $7t=s(E1e);Trr=r($7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$7t.forEach(t),Mrr=i(Ww),vd=n(Ww,"P",{});var Aoe=s(vd);Err=r(Aoe,`Note:
Loading a model from its configuration file does `),C1e=n(Aoe,"STRONG",{});var k7t=s(C1e);Crr=r(k7t,"not"),k7t.forEach(t),wrr=r(Aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=n(Aoe,"A",{href:!0});var S7t=s(hW);Arr=r(S7t,"from_pretrained()"),S7t.forEach(t),Lrr=r(Aoe," to load the model weights."),Aoe.forEach(t),yrr=i(Ww),T(ZF.$$.fragment,Ww),Ww.forEach(t),xrr=i(dl),io=n(dl,"DIV",{class:!0});var ua=s(io);T(ry.$$.fragment,ua),$rr=i(ua),w1e=n(ua,"P",{});var R7t=s(w1e);krr=r(R7t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),R7t.forEach(t),Srr=i(ua),Xa=n(ua,"P",{});var Qw=s(Xa);Rrr=r(Qw,"The model class to instantiate is selected based on the "),A1e=n(Qw,"CODE",{});var P7t=s(A1e);Prr=r(P7t,"model_type"),P7t.forEach(t),Brr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),L1e=n(Qw,"CODE",{});var B7t=s(L1e);Irr=r(B7t,"pretrained_model_name_or_path"),B7t.forEach(t),Nrr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=n(Qw,"CODE",{});var I7t=s(y1e);qrr=r(I7t,"pretrained_model_name_or_path"),I7t.forEach(t),jrr=r(Qw,":"),Qw.forEach(t),Drr=i(ua),x1e=n(ua,"UL",{});var N7t=s(x1e);eT=n(N7t,"LI",{});var fPe=s(eT);$1e=n(fPe,"STRONG",{});var q7t=s($1e);Grr=r(q7t,"vision-encoder-decoder"),q7t.forEach(t),Orr=r(fPe," \u2014 "),pW=n(fPe,"A",{href:!0});var j7t=s(pW);Vrr=r(j7t,"VisionEncoderDecoderModel"),j7t.forEach(t),Xrr=r(fPe," (Vision Encoder decoder model)"),fPe.forEach(t),N7t.forEach(t),zrr=i(ua),oT=n(ua,"P",{});var mPe=s(oT);Wrr=r(mPe,"The model is set in evaluation mode by default using "),k1e=n(mPe,"CODE",{});var D7t=s(k1e);Qrr=r(D7t,"model.eval()"),D7t.forEach(t),Hrr=r(mPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S1e=n(mPe,"CODE",{});var G7t=s(S1e);Urr=r(G7t,"model.train()"),G7t.forEach(t),mPe.forEach(t),Jrr=i(ua),T(rT.$$.fragment,ua),ua.forEach(t),dl.forEach(t),OGe=i(f),Fd=n(f,"H2",{class:!0});var HVe=s(Fd);tT=n(HVe,"A",{id:!0,class:!0,href:!0});var O7t=s(tT);R1e=n(O7t,"SPAN",{});var V7t=s(R1e);T(ty.$$.fragment,V7t),V7t.forEach(t),O7t.forEach(t),Yrr=i(HVe),P1e=n(HVe,"SPAN",{});var X7t=s(P1e);Krr=r(X7t,"AutoModelForVisualQuestionAnswering"),X7t.forEach(t),HVe.forEach(t),VGe=i(f),Oo=n(f,"DIV",{class:!0});var cl=s(Oo);T(ay.$$.fragment,cl),Zrr=i(cl),Td=n(cl,"P",{});var Loe=s(Td);etr=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),uW=n(Loe,"A",{href:!0});var z7t=s(uW);otr=r(z7t,"from_pretrained()"),z7t.forEach(t),rtr=r(Loe," class method or the "),_W=n(Loe,"A",{href:!0});var W7t=s(_W);ttr=r(W7t,"from_config()"),W7t.forEach(t),atr=r(Loe,` class
method.`),Loe.forEach(t),ntr=i(cl),ny=n(cl,"P",{});var UVe=s(ny);str=r(UVe,"This class cannot be instantiated directly using "),B1e=n(UVe,"CODE",{});var Q7t=s(B1e);ltr=r(Q7t,"__init__()"),Q7t.forEach(t),itr=r(UVe," (throws an error)."),UVe.forEach(t),dtr=i(cl),vt=n(cl,"DIV",{class:!0});var Hw=s(vt);T(sy.$$.fragment,Hw),ctr=i(Hw),I1e=n(Hw,"P",{});var H7t=s(I1e);ftr=r(H7t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),H7t.forEach(t),mtr=i(Hw),Md=n(Hw,"P",{});var yoe=s(Md);gtr=r(yoe,`Note:
Loading a model from its configuration file does `),N1e=n(yoe,"STRONG",{});var U7t=s(N1e);htr=r(U7t,"not"),U7t.forEach(t),ptr=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=n(yoe,"A",{href:!0});var J7t=s(bW);utr=r(J7t,"from_pretrained()"),J7t.forEach(t),_tr=r(yoe," to load the model weights."),yoe.forEach(t),btr=i(Hw),T(aT.$$.fragment,Hw),Hw.forEach(t),vtr=i(cl),co=n(cl,"DIV",{class:!0});var _a=s(co);T(ly.$$.fragment,_a),Ftr=i(_a),q1e=n(_a,"P",{});var Y7t=s(q1e);Ttr=r(Y7t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Y7t.forEach(t),Mtr=i(_a),za=n(_a,"P",{});var Uw=s(za);Etr=r(Uw,"The model class to instantiate is selected based on the "),j1e=n(Uw,"CODE",{});var K7t=s(j1e);Ctr=r(K7t,"model_type"),K7t.forEach(t),wtr=r(Uw,` property of the config object (either
passed as an argument or loaded from `),D1e=n(Uw,"CODE",{});var Z7t=s(D1e);Atr=r(Z7t,"pretrained_model_name_or_path"),Z7t.forEach(t),Ltr=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=n(Uw,"CODE",{});var e9t=s(G1e);ytr=r(e9t,"pretrained_model_name_or_path"),e9t.forEach(t),xtr=r(Uw,":"),Uw.forEach(t),$tr=i(_a),O1e=n(_a,"UL",{});var o9t=s(O1e);nT=n(o9t,"LI",{});var gPe=s(nT);V1e=n(gPe,"STRONG",{});var r9t=s(V1e);ktr=r(r9t,"vilt"),r9t.forEach(t),Str=r(gPe," \u2014 "),vW=n(gPe,"A",{href:!0});var t9t=s(vW);Rtr=r(t9t,"ViltForQuestionAnswering"),t9t.forEach(t),Ptr=r(gPe," (ViLT model)"),gPe.forEach(t),o9t.forEach(t),Btr=i(_a),sT=n(_a,"P",{});var hPe=s(sT);Itr=r(hPe,"The model is set in evaluation mode by default using "),X1e=n(hPe,"CODE",{});var a9t=s(X1e);Ntr=r(a9t,"model.eval()"),a9t.forEach(t),qtr=r(hPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=n(hPe,"CODE",{});var n9t=s(z1e);jtr=r(n9t,"model.train()"),n9t.forEach(t),hPe.forEach(t),Dtr=i(_a),T(lT.$$.fragment,_a),_a.forEach(t),cl.forEach(t),XGe=i(f),Ed=n(f,"H2",{class:!0});var JVe=s(Ed);iT=n(JVe,"A",{id:!0,class:!0,href:!0});var s9t=s(iT);W1e=n(s9t,"SPAN",{});var l9t=s(W1e);T(iy.$$.fragment,l9t),l9t.forEach(t),s9t.forEach(t),Gtr=i(JVe),Q1e=n(JVe,"SPAN",{});var i9t=s(Q1e);Otr=r(i9t,"AutoModelForAudioClassification"),i9t.forEach(t),JVe.forEach(t),zGe=i(f),Vo=n(f,"DIV",{class:!0});var fl=s(Vo);T(dy.$$.fragment,fl),Vtr=i(fl),Cd=n(fl,"P",{});var xoe=s(Cd);Xtr=r(xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),FW=n(xoe,"A",{href:!0});var d9t=s(FW);ztr=r(d9t,"from_pretrained()"),d9t.forEach(t),Wtr=r(xoe," class method or the "),TW=n(xoe,"A",{href:!0});var c9t=s(TW);Qtr=r(c9t,"from_config()"),c9t.forEach(t),Htr=r(xoe,` class
method.`),xoe.forEach(t),Utr=i(fl),cy=n(fl,"P",{});var YVe=s(cy);Jtr=r(YVe,"This class cannot be instantiated directly using "),H1e=n(YVe,"CODE",{});var f9t=s(H1e);Ytr=r(f9t,"__init__()"),f9t.forEach(t),Ktr=r(YVe," (throws an error)."),YVe.forEach(t),Ztr=i(fl),Ft=n(fl,"DIV",{class:!0});var Jw=s(Ft);T(fy.$$.fragment,Jw),ear=i(Jw),U1e=n(Jw,"P",{});var m9t=s(U1e);oar=r(m9t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),m9t.forEach(t),rar=i(Jw),wd=n(Jw,"P",{});var $oe=s(wd);tar=r($oe,`Note:
Loading a model from its configuration file does `),J1e=n($oe,"STRONG",{});var g9t=s(J1e);aar=r(g9t,"not"),g9t.forEach(t),nar=r($oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n($oe,"A",{href:!0});var h9t=s(MW);sar=r(h9t,"from_pretrained()"),h9t.forEach(t),lar=r($oe," to load the model weights."),$oe.forEach(t),iar=i(Jw),T(dT.$$.fragment,Jw),Jw.forEach(t),dar=i(fl),fo=n(fl,"DIV",{class:!0});var ba=s(fo);T(my.$$.fragment,ba),car=i(ba),Y1e=n(ba,"P",{});var p9t=s(Y1e);far=r(p9t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),p9t.forEach(t),mar=i(ba),Wa=n(ba,"P",{});var Yw=s(Wa);gar=r(Yw,"The model class to instantiate is selected based on the "),K1e=n(Yw,"CODE",{});var u9t=s(K1e);har=r(u9t,"model_type"),u9t.forEach(t),par=r(Yw,` property of the config object (either
passed as an argument or loaded from `),Z1e=n(Yw,"CODE",{});var _9t=s(Z1e);uar=r(_9t,"pretrained_model_name_or_path"),_9t.forEach(t),_ar=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=n(Yw,"CODE",{});var b9t=s(e2e);bar=r(b9t,"pretrained_model_name_or_path"),b9t.forEach(t),Far=r(Yw,":"),Yw.forEach(t),Tar=i(ba),Pe=n(ba,"UL",{});var ze=s(Pe);cT=n(ze,"LI",{});var pPe=s(cT);o2e=n(pPe,"STRONG",{});var v9t=s(o2e);Mar=r(v9t,"data2vec-audio"),v9t.forEach(t),Ear=r(pPe," \u2014 "),EW=n(pPe,"A",{href:!0});var F9t=s(EW);Car=r(F9t,"Data2VecAudioForSequenceClassification"),F9t.forEach(t),war=r(pPe," (Data2VecAudio model)"),pPe.forEach(t),Aar=i(ze),fT=n(ze,"LI",{});var uPe=s(fT);r2e=n(uPe,"STRONG",{});var T9t=s(r2e);Lar=r(T9t,"hubert"),T9t.forEach(t),yar=r(uPe," \u2014 "),CW=n(uPe,"A",{href:!0});var M9t=s(CW);xar=r(M9t,"HubertForSequenceClassification"),M9t.forEach(t),$ar=r(uPe," (Hubert model)"),uPe.forEach(t),kar=i(ze),mT=n(ze,"LI",{});var _Pe=s(mT);t2e=n(_Pe,"STRONG",{});var E9t=s(t2e);Sar=r(E9t,"sew"),E9t.forEach(t),Rar=r(_Pe," \u2014 "),wW=n(_Pe,"A",{href:!0});var C9t=s(wW);Par=r(C9t,"SEWForSequenceClassification"),C9t.forEach(t),Bar=r(_Pe," (SEW model)"),_Pe.forEach(t),Iar=i(ze),gT=n(ze,"LI",{});var bPe=s(gT);a2e=n(bPe,"STRONG",{});var w9t=s(a2e);Nar=r(w9t,"sew-d"),w9t.forEach(t),qar=r(bPe," \u2014 "),AW=n(bPe,"A",{href:!0});var A9t=s(AW);jar=r(A9t,"SEWDForSequenceClassification"),A9t.forEach(t),Dar=r(bPe," (SEW-D model)"),bPe.forEach(t),Gar=i(ze),hT=n(ze,"LI",{});var vPe=s(hT);n2e=n(vPe,"STRONG",{});var L9t=s(n2e);Oar=r(L9t,"unispeech"),L9t.forEach(t),Var=r(vPe," \u2014 "),LW=n(vPe,"A",{href:!0});var y9t=s(LW);Xar=r(y9t,"UniSpeechForSequenceClassification"),y9t.forEach(t),zar=r(vPe," (UniSpeech model)"),vPe.forEach(t),War=i(ze),pT=n(ze,"LI",{});var FPe=s(pT);s2e=n(FPe,"STRONG",{});var x9t=s(s2e);Qar=r(x9t,"unispeech-sat"),x9t.forEach(t),Har=r(FPe," \u2014 "),yW=n(FPe,"A",{href:!0});var $9t=s(yW);Uar=r($9t,"UniSpeechSatForSequenceClassification"),$9t.forEach(t),Jar=r(FPe," (UniSpeechSat model)"),FPe.forEach(t),Yar=i(ze),uT=n(ze,"LI",{});var TPe=s(uT);l2e=n(TPe,"STRONG",{});var k9t=s(l2e);Kar=r(k9t,"wav2vec2"),k9t.forEach(t),Zar=r(TPe," \u2014 "),xW=n(TPe,"A",{href:!0});var S9t=s(xW);enr=r(S9t,"Wav2Vec2ForSequenceClassification"),S9t.forEach(t),onr=r(TPe," (Wav2Vec2 model)"),TPe.forEach(t),rnr=i(ze),_T=n(ze,"LI",{});var MPe=s(_T);i2e=n(MPe,"STRONG",{});var R9t=s(i2e);tnr=r(R9t,"wav2vec2-conformer"),R9t.forEach(t),anr=r(MPe," \u2014 "),$W=n(MPe,"A",{href:!0});var P9t=s($W);nnr=r(P9t,"Wav2Vec2ConformerForSequenceClassification"),P9t.forEach(t),snr=r(MPe," (Wav2Vec2-Conformer model)"),MPe.forEach(t),lnr=i(ze),bT=n(ze,"LI",{});var EPe=s(bT);d2e=n(EPe,"STRONG",{});var B9t=s(d2e);inr=r(B9t,"wavlm"),B9t.forEach(t),dnr=r(EPe," \u2014 "),kW=n(EPe,"A",{href:!0});var I9t=s(kW);cnr=r(I9t,"WavLMForSequenceClassification"),I9t.forEach(t),fnr=r(EPe," (WavLM model)"),EPe.forEach(t),ze.forEach(t),mnr=i(ba),vT=n(ba,"P",{});var CPe=s(vT);gnr=r(CPe,"The model is set in evaluation mode by default using "),c2e=n(CPe,"CODE",{});var N9t=s(c2e);hnr=r(N9t,"model.eval()"),N9t.forEach(t),pnr=r(CPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f2e=n(CPe,"CODE",{});var q9t=s(f2e);unr=r(q9t,"model.train()"),q9t.forEach(t),CPe.forEach(t),_nr=i(ba),T(FT.$$.fragment,ba),ba.forEach(t),fl.forEach(t),WGe=i(f),Ad=n(f,"H2",{class:!0});var KVe=s(Ad);TT=n(KVe,"A",{id:!0,class:!0,href:!0});var j9t=s(TT);m2e=n(j9t,"SPAN",{});var D9t=s(m2e);T(gy.$$.fragment,D9t),D9t.forEach(t),j9t.forEach(t),bnr=i(KVe),g2e=n(KVe,"SPAN",{});var G9t=s(g2e);vnr=r(G9t,"AutoModelForAudioFrameClassification"),G9t.forEach(t),KVe.forEach(t),QGe=i(f),Xo=n(f,"DIV",{class:!0});var ml=s(Xo);T(hy.$$.fragment,ml),Fnr=i(ml),Ld=n(ml,"P",{});var koe=s(Ld);Tnr=r(koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),SW=n(koe,"A",{href:!0});var O9t=s(SW);Mnr=r(O9t,"from_pretrained()"),O9t.forEach(t),Enr=r(koe," class method or the "),RW=n(koe,"A",{href:!0});var V9t=s(RW);Cnr=r(V9t,"from_config()"),V9t.forEach(t),wnr=r(koe,` class
method.`),koe.forEach(t),Anr=i(ml),py=n(ml,"P",{});var ZVe=s(py);Lnr=r(ZVe,"This class cannot be instantiated directly using "),h2e=n(ZVe,"CODE",{});var X9t=s(h2e);ynr=r(X9t,"__init__()"),X9t.forEach(t),xnr=r(ZVe," (throws an error)."),ZVe.forEach(t),$nr=i(ml),Tt=n(ml,"DIV",{class:!0});var Kw=s(Tt);T(uy.$$.fragment,Kw),knr=i(Kw),p2e=n(Kw,"P",{});var z9t=s(p2e);Snr=r(z9t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),z9t.forEach(t),Rnr=i(Kw),yd=n(Kw,"P",{});var Soe=s(yd);Pnr=r(Soe,`Note:
Loading a model from its configuration file does `),u2e=n(Soe,"STRONG",{});var W9t=s(u2e);Bnr=r(W9t,"not"),W9t.forEach(t),Inr=r(Soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=n(Soe,"A",{href:!0});var Q9t=s(PW);Nnr=r(Q9t,"from_pretrained()"),Q9t.forEach(t),qnr=r(Soe," to load the model weights."),Soe.forEach(t),jnr=i(Kw),T(MT.$$.fragment,Kw),Kw.forEach(t),Dnr=i(ml),mo=n(ml,"DIV",{class:!0});var va=s(mo);T(_y.$$.fragment,va),Gnr=i(va),_2e=n(va,"P",{});var H9t=s(_2e);Onr=r(H9t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),H9t.forEach(t),Vnr=i(va),Qa=n(va,"P",{});var Zw=s(Qa);Xnr=r(Zw,"The model class to instantiate is selected based on the "),b2e=n(Zw,"CODE",{});var U9t=s(b2e);znr=r(U9t,"model_type"),U9t.forEach(t),Wnr=r(Zw,` property of the config object (either
passed as an argument or loaded from `),v2e=n(Zw,"CODE",{});var J9t=s(v2e);Qnr=r(J9t,"pretrained_model_name_or_path"),J9t.forEach(t),Hnr=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=n(Zw,"CODE",{});var Y9t=s(F2e);Unr=r(Y9t,"pretrained_model_name_or_path"),Y9t.forEach(t),Jnr=r(Zw,":"),Zw.forEach(t),Ynr=i(va),et=n(va,"UL",{});var gl=s(et);ET=n(gl,"LI",{});var wPe=s(ET);T2e=n(wPe,"STRONG",{});var K9t=s(T2e);Knr=r(K9t,"data2vec-audio"),K9t.forEach(t),Znr=r(wPe," \u2014 "),BW=n(wPe,"A",{href:!0});var Z9t=s(BW);esr=r(Z9t,"Data2VecAudioForAudioFrameClassification"),Z9t.forEach(t),osr=r(wPe," (Data2VecAudio model)"),wPe.forEach(t),rsr=i(gl),CT=n(gl,"LI",{});var APe=s(CT);M2e=n(APe,"STRONG",{});var eMt=s(M2e);tsr=r(eMt,"unispeech-sat"),eMt.forEach(t),asr=r(APe," \u2014 "),IW=n(APe,"A",{href:!0});var oMt=s(IW);nsr=r(oMt,"UniSpeechSatForAudioFrameClassification"),oMt.forEach(t),ssr=r(APe," (UniSpeechSat model)"),APe.forEach(t),lsr=i(gl),wT=n(gl,"LI",{});var LPe=s(wT);E2e=n(LPe,"STRONG",{});var rMt=s(E2e);isr=r(rMt,"wav2vec2"),rMt.forEach(t),dsr=r(LPe," \u2014 "),NW=n(LPe,"A",{href:!0});var tMt=s(NW);csr=r(tMt,"Wav2Vec2ForAudioFrameClassification"),tMt.forEach(t),fsr=r(LPe," (Wav2Vec2 model)"),LPe.forEach(t),msr=i(gl),AT=n(gl,"LI",{});var yPe=s(AT);C2e=n(yPe,"STRONG",{});var aMt=s(C2e);gsr=r(aMt,"wav2vec2-conformer"),aMt.forEach(t),hsr=r(yPe," \u2014 "),qW=n(yPe,"A",{href:!0});var nMt=s(qW);psr=r(nMt,"Wav2Vec2ConformerForAudioFrameClassification"),nMt.forEach(t),usr=r(yPe," (Wav2Vec2-Conformer model)"),yPe.forEach(t),_sr=i(gl),LT=n(gl,"LI",{});var xPe=s(LT);w2e=n(xPe,"STRONG",{});var sMt=s(w2e);bsr=r(sMt,"wavlm"),sMt.forEach(t),vsr=r(xPe," \u2014 "),jW=n(xPe,"A",{href:!0});var lMt=s(jW);Fsr=r(lMt,"WavLMForAudioFrameClassification"),lMt.forEach(t),Tsr=r(xPe," (WavLM model)"),xPe.forEach(t),gl.forEach(t),Msr=i(va),yT=n(va,"P",{});var $Pe=s(yT);Esr=r($Pe,"The model is set in evaluation mode by default using "),A2e=n($Pe,"CODE",{});var iMt=s(A2e);Csr=r(iMt,"model.eval()"),iMt.forEach(t),wsr=r($Pe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L2e=n($Pe,"CODE",{});var dMt=s(L2e);Asr=r(dMt,"model.train()"),dMt.forEach(t),$Pe.forEach(t),Lsr=i(va),T(xT.$$.fragment,va),va.forEach(t),ml.forEach(t),HGe=i(f),xd=n(f,"H2",{class:!0});var eXe=s(xd);$T=n(eXe,"A",{id:!0,class:!0,href:!0});var cMt=s($T);y2e=n(cMt,"SPAN",{});var fMt=s(y2e);T(by.$$.fragment,fMt),fMt.forEach(t),cMt.forEach(t),ysr=i(eXe),x2e=n(eXe,"SPAN",{});var mMt=s(x2e);xsr=r(mMt,"AutoModelForCTC"),mMt.forEach(t),eXe.forEach(t),UGe=i(f),zo=n(f,"DIV",{class:!0});var hl=s(zo);T(vy.$$.fragment,hl),$sr=i(hl),$d=n(hl,"P",{});var Roe=s($d);ksr=r(Roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),DW=n(Roe,"A",{href:!0});var gMt=s(DW);Ssr=r(gMt,"from_pretrained()"),gMt.forEach(t),Rsr=r(Roe," class method or the "),GW=n(Roe,"A",{href:!0});var hMt=s(GW);Psr=r(hMt,"from_config()"),hMt.forEach(t),Bsr=r(Roe,` class
method.`),Roe.forEach(t),Isr=i(hl),Fy=n(hl,"P",{});var oXe=s(Fy);Nsr=r(oXe,"This class cannot be instantiated directly using "),$2e=n(oXe,"CODE",{});var pMt=s($2e);qsr=r(pMt,"__init__()"),pMt.forEach(t),jsr=r(oXe," (throws an error)."),oXe.forEach(t),Dsr=i(hl),Mt=n(hl,"DIV",{class:!0});var eA=s(Mt);T(Ty.$$.fragment,eA),Gsr=i(eA),k2e=n(eA,"P",{});var uMt=s(k2e);Osr=r(uMt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),uMt.forEach(t),Vsr=i(eA),kd=n(eA,"P",{});var Poe=s(kd);Xsr=r(Poe,`Note:
Loading a model from its configuration file does `),S2e=n(Poe,"STRONG",{});var _Mt=s(S2e);zsr=r(_Mt,"not"),_Mt.forEach(t),Wsr=r(Poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=n(Poe,"A",{href:!0});var bMt=s(OW);Qsr=r(bMt,"from_pretrained()"),bMt.forEach(t),Hsr=r(Poe," to load the model weights."),Poe.forEach(t),Usr=i(eA),T(kT.$$.fragment,eA),eA.forEach(t),Jsr=i(hl),go=n(hl,"DIV",{class:!0});var Fa=s(go);T(My.$$.fragment,Fa),Ysr=i(Fa),R2e=n(Fa,"P",{});var vMt=s(R2e);Ksr=r(vMt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),vMt.forEach(t),Zsr=i(Fa),Ha=n(Fa,"P",{});var oA=s(Ha);elr=r(oA,"The model class to instantiate is selected based on the "),P2e=n(oA,"CODE",{});var FMt=s(P2e);olr=r(FMt,"model_type"),FMt.forEach(t),rlr=r(oA,` property of the config object (either
passed as an argument or loaded from `),B2e=n(oA,"CODE",{});var TMt=s(B2e);tlr=r(TMt,"pretrained_model_name_or_path"),TMt.forEach(t),alr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=n(oA,"CODE",{});var MMt=s(I2e);nlr=r(MMt,"pretrained_model_name_or_path"),MMt.forEach(t),slr=r(oA,":"),oA.forEach(t),llr=i(Fa),Le=n(Fa,"UL",{});var Be=s(Le);ST=n(Be,"LI",{});var kPe=s(ST);N2e=n(kPe,"STRONG",{});var EMt=s(N2e);ilr=r(EMt,"data2vec-audio"),EMt.forEach(t),dlr=r(kPe," \u2014 "),VW=n(kPe,"A",{href:!0});var CMt=s(VW);clr=r(CMt,"Data2VecAudioForCTC"),CMt.forEach(t),flr=r(kPe," (Data2VecAudio model)"),kPe.forEach(t),mlr=i(Be),RT=n(Be,"LI",{});var SPe=s(RT);q2e=n(SPe,"STRONG",{});var wMt=s(q2e);glr=r(wMt,"hubert"),wMt.forEach(t),hlr=r(SPe," \u2014 "),XW=n(SPe,"A",{href:!0});var AMt=s(XW);plr=r(AMt,"HubertForCTC"),AMt.forEach(t),ulr=r(SPe," (Hubert model)"),SPe.forEach(t),_lr=i(Be),PT=n(Be,"LI",{});var RPe=s(PT);j2e=n(RPe,"STRONG",{});var LMt=s(j2e);blr=r(LMt,"mctct"),LMt.forEach(t),vlr=r(RPe," \u2014 "),zW=n(RPe,"A",{href:!0});var yMt=s(zW);Flr=r(yMt,"MCTCTForCTC"),yMt.forEach(t),Tlr=r(RPe," (M-CTC-T model)"),RPe.forEach(t),Mlr=i(Be),BT=n(Be,"LI",{});var PPe=s(BT);D2e=n(PPe,"STRONG",{});var xMt=s(D2e);Elr=r(xMt,"sew"),xMt.forEach(t),Clr=r(PPe," \u2014 "),WW=n(PPe,"A",{href:!0});var $Mt=s(WW);wlr=r($Mt,"SEWForCTC"),$Mt.forEach(t),Alr=r(PPe," (SEW model)"),PPe.forEach(t),Llr=i(Be),IT=n(Be,"LI",{});var BPe=s(IT);G2e=n(BPe,"STRONG",{});var kMt=s(G2e);ylr=r(kMt,"sew-d"),kMt.forEach(t),xlr=r(BPe," \u2014 "),QW=n(BPe,"A",{href:!0});var SMt=s(QW);$lr=r(SMt,"SEWDForCTC"),SMt.forEach(t),klr=r(BPe," (SEW-D model)"),BPe.forEach(t),Slr=i(Be),NT=n(Be,"LI",{});var IPe=s(NT);O2e=n(IPe,"STRONG",{});var RMt=s(O2e);Rlr=r(RMt,"unispeech"),RMt.forEach(t),Plr=r(IPe," \u2014 "),HW=n(IPe,"A",{href:!0});var PMt=s(HW);Blr=r(PMt,"UniSpeechForCTC"),PMt.forEach(t),Ilr=r(IPe," (UniSpeech model)"),IPe.forEach(t),Nlr=i(Be),qT=n(Be,"LI",{});var NPe=s(qT);V2e=n(NPe,"STRONG",{});var BMt=s(V2e);qlr=r(BMt,"unispeech-sat"),BMt.forEach(t),jlr=r(NPe," \u2014 "),UW=n(NPe,"A",{href:!0});var IMt=s(UW);Dlr=r(IMt,"UniSpeechSatForCTC"),IMt.forEach(t),Glr=r(NPe," (UniSpeechSat model)"),NPe.forEach(t),Olr=i(Be),jT=n(Be,"LI",{});var qPe=s(jT);X2e=n(qPe,"STRONG",{});var NMt=s(X2e);Vlr=r(NMt,"wav2vec2"),NMt.forEach(t),Xlr=r(qPe," \u2014 "),JW=n(qPe,"A",{href:!0});var qMt=s(JW);zlr=r(qMt,"Wav2Vec2ForCTC"),qMt.forEach(t),Wlr=r(qPe," (Wav2Vec2 model)"),qPe.forEach(t),Qlr=i(Be),DT=n(Be,"LI",{});var jPe=s(DT);z2e=n(jPe,"STRONG",{});var jMt=s(z2e);Hlr=r(jMt,"wav2vec2-conformer"),jMt.forEach(t),Ulr=r(jPe," \u2014 "),YW=n(jPe,"A",{href:!0});var DMt=s(YW);Jlr=r(DMt,"Wav2Vec2ConformerForCTC"),DMt.forEach(t),Ylr=r(jPe," (Wav2Vec2-Conformer model)"),jPe.forEach(t),Klr=i(Be),GT=n(Be,"LI",{});var DPe=s(GT);W2e=n(DPe,"STRONG",{});var GMt=s(W2e);Zlr=r(GMt,"wavlm"),GMt.forEach(t),eir=r(DPe," \u2014 "),KW=n(DPe,"A",{href:!0});var OMt=s(KW);oir=r(OMt,"WavLMForCTC"),OMt.forEach(t),rir=r(DPe," (WavLM model)"),DPe.forEach(t),Be.forEach(t),tir=i(Fa),OT=n(Fa,"P",{});var GPe=s(OT);air=r(GPe,"The model is set in evaluation mode by default using "),Q2e=n(GPe,"CODE",{});var VMt=s(Q2e);nir=r(VMt,"model.eval()"),VMt.forEach(t),sir=r(GPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H2e=n(GPe,"CODE",{});var XMt=s(H2e);lir=r(XMt,"model.train()"),XMt.forEach(t),GPe.forEach(t),iir=i(Fa),T(VT.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),JGe=i(f),Sd=n(f,"H2",{class:!0});var rXe=s(Sd);XT=n(rXe,"A",{id:!0,class:!0,href:!0});var zMt=s(XT);U2e=n(zMt,"SPAN",{});var WMt=s(U2e);T(Ey.$$.fragment,WMt),WMt.forEach(t),zMt.forEach(t),dir=i(rXe),J2e=n(rXe,"SPAN",{});var QMt=s(J2e);cir=r(QMt,"AutoModelForSpeechSeq2Seq"),QMt.forEach(t),rXe.forEach(t),YGe=i(f),Wo=n(f,"DIV",{class:!0});var pl=s(Wo);T(Cy.$$.fragment,pl),fir=i(pl),Rd=n(pl,"P",{});var Boe=s(Rd);mir=r(Boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZW=n(Boe,"A",{href:!0});var HMt=s(ZW);gir=r(HMt,"from_pretrained()"),HMt.forEach(t),hir=r(Boe," class method or the "),eQ=n(Boe,"A",{href:!0});var UMt=s(eQ);pir=r(UMt,"from_config()"),UMt.forEach(t),uir=r(Boe,` class
method.`),Boe.forEach(t),_ir=i(pl),wy=n(pl,"P",{});var tXe=s(wy);bir=r(tXe,"This class cannot be instantiated directly using "),Y2e=n(tXe,"CODE",{});var JMt=s(Y2e);vir=r(JMt,"__init__()"),JMt.forEach(t),Fir=r(tXe," (throws an error)."),tXe.forEach(t),Tir=i(pl),Et=n(pl,"DIV",{class:!0});var rA=s(Et);T(Ay.$$.fragment,rA),Mir=i(rA),K2e=n(rA,"P",{});var YMt=s(K2e);Eir=r(YMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),YMt.forEach(t),Cir=i(rA),Pd=n(rA,"P",{});var Ioe=s(Pd);wir=r(Ioe,`Note:
Loading a model from its configuration file does `),Z2e=n(Ioe,"STRONG",{});var KMt=s(Z2e);Air=r(KMt,"not"),KMt.forEach(t),Lir=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=n(Ioe,"A",{href:!0});var ZMt=s(oQ);yir=r(ZMt,"from_pretrained()"),ZMt.forEach(t),xir=r(Ioe," to load the model weights."),Ioe.forEach(t),$ir=i(rA),T(zT.$$.fragment,rA),rA.forEach(t),kir=i(pl),ho=n(pl,"DIV",{class:!0});var Ta=s(ho);T(Ly.$$.fragment,Ta),Sir=i(Ta),ebe=n(Ta,"P",{});var e4t=s(ebe);Rir=r(e4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),e4t.forEach(t),Pir=i(Ta),Ua=n(Ta,"P",{});var tA=s(Ua);Bir=r(tA,"The model class to instantiate is selected based on the "),obe=n(tA,"CODE",{});var o4t=s(obe);Iir=r(o4t,"model_type"),o4t.forEach(t),Nir=r(tA,` property of the config object (either
passed as an argument or loaded from `),rbe=n(tA,"CODE",{});var r4t=s(rbe);qir=r(r4t,"pretrained_model_name_or_path"),r4t.forEach(t),jir=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tbe=n(tA,"CODE",{});var t4t=s(tbe);Dir=r(t4t,"pretrained_model_name_or_path"),t4t.forEach(t),Gir=r(tA,":"),tA.forEach(t),Oir=i(Ta),yy=n(Ta,"UL",{});var aXe=s(yy);WT=n(aXe,"LI",{});var OPe=s(WT);abe=n(OPe,"STRONG",{});var a4t=s(abe);Vir=r(a4t,"speech-encoder-decoder"),a4t.forEach(t),Xir=r(OPe," \u2014 "),rQ=n(OPe,"A",{href:!0});var n4t=s(rQ);zir=r(n4t,"SpeechEncoderDecoderModel"),n4t.forEach(t),Wir=r(OPe," (Speech Encoder decoder model)"),OPe.forEach(t),Qir=i(aXe),QT=n(aXe,"LI",{});var VPe=s(QT);nbe=n(VPe,"STRONG",{});var s4t=s(nbe);Hir=r(s4t,"speech_to_text"),s4t.forEach(t),Uir=r(VPe," \u2014 "),tQ=n(VPe,"A",{href:!0});var l4t=s(tQ);Jir=r(l4t,"Speech2TextForConditionalGeneration"),l4t.forEach(t),Yir=r(VPe," (Speech2Text model)"),VPe.forEach(t),aXe.forEach(t),Kir=i(Ta),HT=n(Ta,"P",{});var XPe=s(HT);Zir=r(XPe,"The model is set in evaluation mode by default using "),sbe=n(XPe,"CODE",{});var i4t=s(sbe);edr=r(i4t,"model.eval()"),i4t.forEach(t),odr=r(XPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lbe=n(XPe,"CODE",{});var d4t=s(lbe);rdr=r(d4t,"model.train()"),d4t.forEach(t),XPe.forEach(t),tdr=i(Ta),T(UT.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),KGe=i(f),Bd=n(f,"H2",{class:!0});var nXe=s(Bd);JT=n(nXe,"A",{id:!0,class:!0,href:!0});var c4t=s(JT);ibe=n(c4t,"SPAN",{});var f4t=s(ibe);T(xy.$$.fragment,f4t),f4t.forEach(t),c4t.forEach(t),adr=i(nXe),dbe=n(nXe,"SPAN",{});var m4t=s(dbe);ndr=r(m4t,"AutoModelForAudioXVector"),m4t.forEach(t),nXe.forEach(t),ZGe=i(f),Qo=n(f,"DIV",{class:!0});var ul=s(Qo);T($y.$$.fragment,ul),sdr=i(ul),Id=n(ul,"P",{});var Noe=s(Id);ldr=r(Noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),aQ=n(Noe,"A",{href:!0});var g4t=s(aQ);idr=r(g4t,"from_pretrained()"),g4t.forEach(t),ddr=r(Noe," class method or the "),nQ=n(Noe,"A",{href:!0});var h4t=s(nQ);cdr=r(h4t,"from_config()"),h4t.forEach(t),fdr=r(Noe,` class
method.`),Noe.forEach(t),mdr=i(ul),ky=n(ul,"P",{});var sXe=s(ky);gdr=r(sXe,"This class cannot be instantiated directly using "),cbe=n(sXe,"CODE",{});var p4t=s(cbe);hdr=r(p4t,"__init__()"),p4t.forEach(t),pdr=r(sXe," (throws an error)."),sXe.forEach(t),udr=i(ul),Ct=n(ul,"DIV",{class:!0});var aA=s(Ct);T(Sy.$$.fragment,aA),_dr=i(aA),fbe=n(aA,"P",{});var u4t=s(fbe);bdr=r(u4t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),u4t.forEach(t),vdr=i(aA),Nd=n(aA,"P",{});var qoe=s(Nd);Fdr=r(qoe,`Note:
Loading a model from its configuration file does `),mbe=n(qoe,"STRONG",{});var _4t=s(mbe);Tdr=r(_4t,"not"),_4t.forEach(t),Mdr=r(qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=n(qoe,"A",{href:!0});var b4t=s(sQ);Edr=r(b4t,"from_pretrained()"),b4t.forEach(t),Cdr=r(qoe," to load the model weights."),qoe.forEach(t),wdr=i(aA),T(YT.$$.fragment,aA),aA.forEach(t),Adr=i(ul),po=n(ul,"DIV",{class:!0});var Ma=s(po);T(Ry.$$.fragment,Ma),Ldr=i(Ma),gbe=n(Ma,"P",{});var v4t=s(gbe);ydr=r(v4t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),v4t.forEach(t),xdr=i(Ma),Ja=n(Ma,"P",{});var nA=s(Ja);$dr=r(nA,"The model class to instantiate is selected based on the "),hbe=n(nA,"CODE",{});var F4t=s(hbe);kdr=r(F4t,"model_type"),F4t.forEach(t),Sdr=r(nA,` property of the config object (either
passed as an argument or loaded from `),pbe=n(nA,"CODE",{});var T4t=s(pbe);Rdr=r(T4t,"pretrained_model_name_or_path"),T4t.forEach(t),Pdr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=n(nA,"CODE",{});var M4t=s(ube);Bdr=r(M4t,"pretrained_model_name_or_path"),M4t.forEach(t),Idr=r(nA,":"),nA.forEach(t),Ndr=i(Ma),ot=n(Ma,"UL",{});var _l=s(ot);KT=n(_l,"LI",{});var zPe=s(KT);_be=n(zPe,"STRONG",{});var E4t=s(_be);qdr=r(E4t,"data2vec-audio"),E4t.forEach(t),jdr=r(zPe," \u2014 "),lQ=n(zPe,"A",{href:!0});var C4t=s(lQ);Ddr=r(C4t,"Data2VecAudioForXVector"),C4t.forEach(t),Gdr=r(zPe," (Data2VecAudio model)"),zPe.forEach(t),Odr=i(_l),ZT=n(_l,"LI",{});var WPe=s(ZT);bbe=n(WPe,"STRONG",{});var w4t=s(bbe);Vdr=r(w4t,"unispeech-sat"),w4t.forEach(t),Xdr=r(WPe," \u2014 "),iQ=n(WPe,"A",{href:!0});var A4t=s(iQ);zdr=r(A4t,"UniSpeechSatForXVector"),A4t.forEach(t),Wdr=r(WPe," (UniSpeechSat model)"),WPe.forEach(t),Qdr=i(_l),e7=n(_l,"LI",{});var QPe=s(e7);vbe=n(QPe,"STRONG",{});var L4t=s(vbe);Hdr=r(L4t,"wav2vec2"),L4t.forEach(t),Udr=r(QPe," \u2014 "),dQ=n(QPe,"A",{href:!0});var y4t=s(dQ);Jdr=r(y4t,"Wav2Vec2ForXVector"),y4t.forEach(t),Ydr=r(QPe," (Wav2Vec2 model)"),QPe.forEach(t),Kdr=i(_l),o7=n(_l,"LI",{});var HPe=s(o7);Fbe=n(HPe,"STRONG",{});var x4t=s(Fbe);Zdr=r(x4t,"wav2vec2-conformer"),x4t.forEach(t),ecr=r(HPe," \u2014 "),cQ=n(HPe,"A",{href:!0});var $4t=s(cQ);ocr=r($4t,"Wav2Vec2ConformerForXVector"),$4t.forEach(t),rcr=r(HPe," (Wav2Vec2-Conformer model)"),HPe.forEach(t),tcr=i(_l),r7=n(_l,"LI",{});var UPe=s(r7);Tbe=n(UPe,"STRONG",{});var k4t=s(Tbe);acr=r(k4t,"wavlm"),k4t.forEach(t),ncr=r(UPe," \u2014 "),fQ=n(UPe,"A",{href:!0});var S4t=s(fQ);scr=r(S4t,"WavLMForXVector"),S4t.forEach(t),lcr=r(UPe," (WavLM model)"),UPe.forEach(t),_l.forEach(t),icr=i(Ma),t7=n(Ma,"P",{});var JPe=s(t7);dcr=r(JPe,"The model is set in evaluation mode by default using "),Mbe=n(JPe,"CODE",{});var R4t=s(Mbe);ccr=r(R4t,"model.eval()"),R4t.forEach(t),fcr=r(JPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ebe=n(JPe,"CODE",{});var P4t=s(Ebe);mcr=r(P4t,"model.train()"),P4t.forEach(t),JPe.forEach(t),gcr=i(Ma),T(a7.$$.fragment,Ma),Ma.forEach(t),ul.forEach(t),eOe=i(f),qd=n(f,"H2",{class:!0});var lXe=s(qd);n7=n(lXe,"A",{id:!0,class:!0,href:!0});var B4t=s(n7);Cbe=n(B4t,"SPAN",{});var I4t=s(Cbe);T(Py.$$.fragment,I4t),I4t.forEach(t),B4t.forEach(t),hcr=i(lXe),wbe=n(lXe,"SPAN",{});var N4t=s(wbe);pcr=r(N4t,"AutoModelForMaskedImageModeling"),N4t.forEach(t),lXe.forEach(t),oOe=i(f),Ho=n(f,"DIV",{class:!0});var bl=s(Ho);T(By.$$.fragment,bl),ucr=i(bl),jd=n(bl,"P",{});var joe=s(jd);_cr=r(joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),mQ=n(joe,"A",{href:!0});var q4t=s(mQ);bcr=r(q4t,"from_pretrained()"),q4t.forEach(t),vcr=r(joe," class method or the "),gQ=n(joe,"A",{href:!0});var j4t=s(gQ);Fcr=r(j4t,"from_config()"),j4t.forEach(t),Tcr=r(joe,` class
method.`),joe.forEach(t),Mcr=i(bl),Iy=n(bl,"P",{});var iXe=s(Iy);Ecr=r(iXe,"This class cannot be instantiated directly using "),Abe=n(iXe,"CODE",{});var D4t=s(Abe);Ccr=r(D4t,"__init__()"),D4t.forEach(t),wcr=r(iXe," (throws an error)."),iXe.forEach(t),Acr=i(bl),wt=n(bl,"DIV",{class:!0});var sA=s(wt);T(Ny.$$.fragment,sA),Lcr=i(sA),Lbe=n(sA,"P",{});var G4t=s(Lbe);ycr=r(G4t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),G4t.forEach(t),xcr=i(sA),Dd=n(sA,"P",{});var Doe=s(Dd);$cr=r(Doe,`Note:
Loading a model from its configuration file does `),ybe=n(Doe,"STRONG",{});var O4t=s(ybe);kcr=r(O4t,"not"),O4t.forEach(t),Scr=r(Doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hQ=n(Doe,"A",{href:!0});var V4t=s(hQ);Rcr=r(V4t,"from_pretrained()"),V4t.forEach(t),Pcr=r(Doe," to load the model weights."),Doe.forEach(t),Bcr=i(sA),T(s7.$$.fragment,sA),sA.forEach(t),Icr=i(bl),uo=n(bl,"DIV",{class:!0});var Ea=s(uo);T(qy.$$.fragment,Ea),Ncr=i(Ea),xbe=n(Ea,"P",{});var X4t=s(xbe);qcr=r(X4t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),X4t.forEach(t),jcr=i(Ea),Ya=n(Ea,"P",{});var lA=s(Ya);Dcr=r(lA,"The model class to instantiate is selected based on the "),$be=n(lA,"CODE",{});var z4t=s($be);Gcr=r(z4t,"model_type"),z4t.forEach(t),Ocr=r(lA,` property of the config object (either
passed as an argument or loaded from `),kbe=n(lA,"CODE",{});var W4t=s(kbe);Vcr=r(W4t,"pretrained_model_name_or_path"),W4t.forEach(t),Xcr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=n(lA,"CODE",{});var Q4t=s(Sbe);zcr=r(Q4t,"pretrained_model_name_or_path"),Q4t.forEach(t),Wcr=r(lA,":"),lA.forEach(t),Qcr=i(Ea),Gd=n(Ea,"UL",{});var Goe=s(Gd);l7=n(Goe,"LI",{});var YPe=s(l7);Rbe=n(YPe,"STRONG",{});var H4t=s(Rbe);Hcr=r(H4t,"deit"),H4t.forEach(t),Ucr=r(YPe," \u2014 "),pQ=n(YPe,"A",{href:!0});var U4t=s(pQ);Jcr=r(U4t,"DeiTForMaskedImageModeling"),U4t.forEach(t),Ycr=r(YPe," (DeiT model)"),YPe.forEach(t),Kcr=i(Goe),i7=n(Goe,"LI",{});var KPe=s(i7);Pbe=n(KPe,"STRONG",{});var J4t=s(Pbe);Zcr=r(J4t,"swin"),J4t.forEach(t),efr=r(KPe," \u2014 "),uQ=n(KPe,"A",{href:!0});var Y4t=s(uQ);ofr=r(Y4t,"SwinForMaskedImageModeling"),Y4t.forEach(t),rfr=r(KPe," (Swin Transformer model)"),KPe.forEach(t),tfr=i(Goe),d7=n(Goe,"LI",{});var ZPe=s(d7);Bbe=n(ZPe,"STRONG",{});var K4t=s(Bbe);afr=r(K4t,"vit"),K4t.forEach(t),nfr=r(ZPe," \u2014 "),_Q=n(ZPe,"A",{href:!0});var Z4t=s(_Q);sfr=r(Z4t,"ViTForMaskedImageModeling"),Z4t.forEach(t),lfr=r(ZPe," (ViT model)"),ZPe.forEach(t),Goe.forEach(t),ifr=i(Ea),c7=n(Ea,"P",{});var eBe=s(c7);dfr=r(eBe,"The model is set in evaluation mode by default using "),Ibe=n(eBe,"CODE",{});var eEt=s(Ibe);cfr=r(eEt,"model.eval()"),eEt.forEach(t),ffr=r(eBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nbe=n(eBe,"CODE",{});var oEt=s(Nbe);mfr=r(oEt,"model.train()"),oEt.forEach(t),eBe.forEach(t),gfr=i(Ea),T(f7.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),rOe=i(f),Od=n(f,"H2",{class:!0});var dXe=s(Od);m7=n(dXe,"A",{id:!0,class:!0,href:!0});var rEt=s(m7);qbe=n(rEt,"SPAN",{});var tEt=s(qbe);T(jy.$$.fragment,tEt),tEt.forEach(t),rEt.forEach(t),hfr=i(dXe),jbe=n(dXe,"SPAN",{});var aEt=s(jbe);pfr=r(aEt,"AutoModelForObjectDetection"),aEt.forEach(t),dXe.forEach(t),tOe=i(f),Uo=n(f,"DIV",{class:!0});var vl=s(Uo);T(Dy.$$.fragment,vl),ufr=i(vl),Vd=n(vl,"P",{});var Ooe=s(Vd);_fr=r(Ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),bQ=n(Ooe,"A",{href:!0});var nEt=s(bQ);bfr=r(nEt,"from_pretrained()"),nEt.forEach(t),vfr=r(Ooe," class method or the "),vQ=n(Ooe,"A",{href:!0});var sEt=s(vQ);Ffr=r(sEt,"from_config()"),sEt.forEach(t),Tfr=r(Ooe,` class
method.`),Ooe.forEach(t),Mfr=i(vl),Gy=n(vl,"P",{});var cXe=s(Gy);Efr=r(cXe,"This class cannot be instantiated directly using "),Dbe=n(cXe,"CODE",{});var lEt=s(Dbe);Cfr=r(lEt,"__init__()"),lEt.forEach(t),wfr=r(cXe," (throws an error)."),cXe.forEach(t),Afr=i(vl),At=n(vl,"DIV",{class:!0});var iA=s(At);T(Oy.$$.fragment,iA),Lfr=i(iA),Gbe=n(iA,"P",{});var iEt=s(Gbe);yfr=r(iEt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),iEt.forEach(t),xfr=i(iA),Xd=n(iA,"P",{});var Voe=s(Xd);$fr=r(Voe,`Note:
Loading a model from its configuration file does `),Obe=n(Voe,"STRONG",{});var dEt=s(Obe);kfr=r(dEt,"not"),dEt.forEach(t),Sfr=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(Voe,"A",{href:!0});var cEt=s(FQ);Rfr=r(cEt,"from_pretrained()"),cEt.forEach(t),Pfr=r(Voe," to load the model weights."),Voe.forEach(t),Bfr=i(iA),T(g7.$$.fragment,iA),iA.forEach(t),Ifr=i(vl),_o=n(vl,"DIV",{class:!0});var Ca=s(_o);T(Vy.$$.fragment,Ca),Nfr=i(Ca),Vbe=n(Ca,"P",{});var fEt=s(Vbe);qfr=r(fEt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),fEt.forEach(t),jfr=i(Ca),Ka=n(Ca,"P",{});var dA=s(Ka);Dfr=r(dA,"The model class to instantiate is selected based on the "),Xbe=n(dA,"CODE",{});var mEt=s(Xbe);Gfr=r(mEt,"model_type"),mEt.forEach(t),Ofr=r(dA,` property of the config object (either
passed as an argument or loaded from `),zbe=n(dA,"CODE",{});var gEt=s(zbe);Vfr=r(gEt,"pretrained_model_name_or_path"),gEt.forEach(t),Xfr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=n(dA,"CODE",{});var hEt=s(Wbe);zfr=r(hEt,"pretrained_model_name_or_path"),hEt.forEach(t),Wfr=r(dA,":"),dA.forEach(t),Qfr=i(Ca),Xy=n(Ca,"UL",{});var fXe=s(Xy);h7=n(fXe,"LI",{});var oBe=s(h7);Qbe=n(oBe,"STRONG",{});var pEt=s(Qbe);Hfr=r(pEt,"detr"),pEt.forEach(t),Ufr=r(oBe," \u2014 "),TQ=n(oBe,"A",{href:!0});var uEt=s(TQ);Jfr=r(uEt,"DetrForObjectDetection"),uEt.forEach(t),Yfr=r(oBe," (DETR model)"),oBe.forEach(t),Kfr=i(fXe),p7=n(fXe,"LI",{});var rBe=s(p7);Hbe=n(rBe,"STRONG",{});var _Et=s(Hbe);Zfr=r(_Et,"yolos"),_Et.forEach(t),emr=r(rBe," \u2014 "),MQ=n(rBe,"A",{href:!0});var bEt=s(MQ);omr=r(bEt,"YolosForObjectDetection"),bEt.forEach(t),rmr=r(rBe," (YOLOS model)"),rBe.forEach(t),fXe.forEach(t),tmr=i(Ca),u7=n(Ca,"P",{});var tBe=s(u7);amr=r(tBe,"The model is set in evaluation mode by default using "),Ube=n(tBe,"CODE",{});var vEt=s(Ube);nmr=r(vEt,"model.eval()"),vEt.forEach(t),smr=r(tBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jbe=n(tBe,"CODE",{});var FEt=s(Jbe);lmr=r(FEt,"model.train()"),FEt.forEach(t),tBe.forEach(t),imr=i(Ca),T(_7.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),aOe=i(f),zd=n(f,"H2",{class:!0});var mXe=s(zd);b7=n(mXe,"A",{id:!0,class:!0,href:!0});var TEt=s(b7);Ybe=n(TEt,"SPAN",{});var MEt=s(Ybe);T(zy.$$.fragment,MEt),MEt.forEach(t),TEt.forEach(t),dmr=i(mXe),Kbe=n(mXe,"SPAN",{});var EEt=s(Kbe);cmr=r(EEt,"AutoModelForImageSegmentation"),EEt.forEach(t),mXe.forEach(t),nOe=i(f),Jo=n(f,"DIV",{class:!0});var Fl=s(Jo);T(Wy.$$.fragment,Fl),fmr=i(Fl),Wd=n(Fl,"P",{});var Xoe=s(Wd);mmr=r(Xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),EQ=n(Xoe,"A",{href:!0});var CEt=s(EQ);gmr=r(CEt,"from_pretrained()"),CEt.forEach(t),hmr=r(Xoe," class method or the "),CQ=n(Xoe,"A",{href:!0});var wEt=s(CQ);pmr=r(wEt,"from_config()"),wEt.forEach(t),umr=r(Xoe,` class
method.`),Xoe.forEach(t),_mr=i(Fl),Qy=n(Fl,"P",{});var gXe=s(Qy);bmr=r(gXe,"This class cannot be instantiated directly using "),Zbe=n(gXe,"CODE",{});var AEt=s(Zbe);vmr=r(AEt,"__init__()"),AEt.forEach(t),Fmr=r(gXe," (throws an error)."),gXe.forEach(t),Tmr=i(Fl),Lt=n(Fl,"DIV",{class:!0});var cA=s(Lt);T(Hy.$$.fragment,cA),Mmr=i(cA),eve=n(cA,"P",{});var LEt=s(eve);Emr=r(LEt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),LEt.forEach(t),Cmr=i(cA),Qd=n(cA,"P",{});var zoe=s(Qd);wmr=r(zoe,`Note:
Loading a model from its configuration file does `),ove=n(zoe,"STRONG",{});var yEt=s(ove);Amr=r(yEt,"not"),yEt.forEach(t),Lmr=r(zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=n(zoe,"A",{href:!0});var xEt=s(wQ);ymr=r(xEt,"from_pretrained()"),xEt.forEach(t),xmr=r(zoe," to load the model weights."),zoe.forEach(t),$mr=i(cA),T(v7.$$.fragment,cA),cA.forEach(t),kmr=i(Fl),bo=n(Fl,"DIV",{class:!0});var wa=s(bo);T(Uy.$$.fragment,wa),Smr=i(wa),rve=n(wa,"P",{});var $Et=s(rve);Rmr=r($Et,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),$Et.forEach(t),Pmr=i(wa),Za=n(wa,"P",{});var fA=s(Za);Bmr=r(fA,"The model class to instantiate is selected based on the "),tve=n(fA,"CODE",{});var kEt=s(tve);Imr=r(kEt,"model_type"),kEt.forEach(t),Nmr=r(fA,` property of the config object (either
passed as an argument or loaded from `),ave=n(fA,"CODE",{});var SEt=s(ave);qmr=r(SEt,"pretrained_model_name_or_path"),SEt.forEach(t),jmr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=n(fA,"CODE",{});var REt=s(nve);Dmr=r(REt,"pretrained_model_name_or_path"),REt.forEach(t),Gmr=r(fA,":"),fA.forEach(t),Omr=i(wa),sve=n(wa,"UL",{});var PEt=s(sve);F7=n(PEt,"LI",{});var aBe=s(F7);lve=n(aBe,"STRONG",{});var BEt=s(lve);Vmr=r(BEt,"detr"),BEt.forEach(t),Xmr=r(aBe," \u2014 "),AQ=n(aBe,"A",{href:!0});var IEt=s(AQ);zmr=r(IEt,"DetrForSegmentation"),IEt.forEach(t),Wmr=r(aBe," (DETR model)"),aBe.forEach(t),PEt.forEach(t),Qmr=i(wa),T7=n(wa,"P",{});var nBe=s(T7);Hmr=r(nBe,"The model is set in evaluation mode by default using "),ive=n(nBe,"CODE",{});var NEt=s(ive);Umr=r(NEt,"model.eval()"),NEt.forEach(t),Jmr=r(nBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dve=n(nBe,"CODE",{});var qEt=s(dve);Ymr=r(qEt,"model.train()"),qEt.forEach(t),nBe.forEach(t),Kmr=i(wa),T(M7.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),sOe=i(f),Hd=n(f,"H2",{class:!0});var hXe=s(Hd);E7=n(hXe,"A",{id:!0,class:!0,href:!0});var jEt=s(E7);cve=n(jEt,"SPAN",{});var DEt=s(cve);T(Jy.$$.fragment,DEt),DEt.forEach(t),jEt.forEach(t),Zmr=i(hXe),fve=n(hXe,"SPAN",{});var GEt=s(fve);egr=r(GEt,"AutoModelForSemanticSegmentation"),GEt.forEach(t),hXe.forEach(t),lOe=i(f),Yo=n(f,"DIV",{class:!0});var Tl=s(Yo);T(Yy.$$.fragment,Tl),ogr=i(Tl),Ud=n(Tl,"P",{});var Woe=s(Ud);rgr=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),LQ=n(Woe,"A",{href:!0});var OEt=s(LQ);tgr=r(OEt,"from_pretrained()"),OEt.forEach(t),agr=r(Woe," class method or the "),yQ=n(Woe,"A",{href:!0});var VEt=s(yQ);ngr=r(VEt,"from_config()"),VEt.forEach(t),sgr=r(Woe,` class
method.`),Woe.forEach(t),lgr=i(Tl),Ky=n(Tl,"P",{});var pXe=s(Ky);igr=r(pXe,"This class cannot be instantiated directly using "),mve=n(pXe,"CODE",{});var XEt=s(mve);dgr=r(XEt,"__init__()"),XEt.forEach(t),cgr=r(pXe," (throws an error)."),pXe.forEach(t),fgr=i(Tl),yt=n(Tl,"DIV",{class:!0});var mA=s(yt);T(Zy.$$.fragment,mA),mgr=i(mA),gve=n(mA,"P",{});var zEt=s(gve);ggr=r(zEt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),zEt.forEach(t),hgr=i(mA),Jd=n(mA,"P",{});var Qoe=s(Jd);pgr=r(Qoe,`Note:
Loading a model from its configuration file does `),hve=n(Qoe,"STRONG",{});var WEt=s(hve);ugr=r(WEt,"not"),WEt.forEach(t),_gr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=n(Qoe,"A",{href:!0});var QEt=s(xQ);bgr=r(QEt,"from_pretrained()"),QEt.forEach(t),vgr=r(Qoe," to load the model weights."),Qoe.forEach(t),Fgr=i(mA),T(C7.$$.fragment,mA),mA.forEach(t),Tgr=i(Tl),vo=n(Tl,"DIV",{class:!0});var Aa=s(vo);T(e8.$$.fragment,Aa),Mgr=i(Aa),pve=n(Aa,"P",{});var HEt=s(pve);Egr=r(HEt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),HEt.forEach(t),Cgr=i(Aa),en=n(Aa,"P",{});var gA=s(en);wgr=r(gA,"The model class to instantiate is selected based on the "),uve=n(gA,"CODE",{});var UEt=s(uve);Agr=r(UEt,"model_type"),UEt.forEach(t),Lgr=r(gA,` property of the config object (either
passed as an argument or loaded from `),_ve=n(gA,"CODE",{});var JEt=s(_ve);ygr=r(JEt,"pretrained_model_name_or_path"),JEt.forEach(t),xgr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=n(gA,"CODE",{});var YEt=s(bve);$gr=r(YEt,"pretrained_model_name_or_path"),YEt.forEach(t),kgr=r(gA,":"),gA.forEach(t),Sgr=i(Aa),on=n(Aa,"UL",{});var hA=s(on);w7=n(hA,"LI",{});var sBe=s(w7);vve=n(sBe,"STRONG",{});var KEt=s(vve);Rgr=r(KEt,"beit"),KEt.forEach(t),Pgr=r(sBe," \u2014 "),$Q=n(sBe,"A",{href:!0});var ZEt=s($Q);Bgr=r(ZEt,"BeitForSemanticSegmentation"),ZEt.forEach(t),Igr=r(sBe," (BEiT model)"),sBe.forEach(t),Ngr=i(hA),A7=n(hA,"LI",{});var lBe=s(A7);Fve=n(lBe,"STRONG",{});var eCt=s(Fve);qgr=r(eCt,"data2vec-vision"),eCt.forEach(t),jgr=r(lBe," \u2014 "),kQ=n(lBe,"A",{href:!0});var oCt=s(kQ);Dgr=r(oCt,"Data2VecVisionForSemanticSegmentation"),oCt.forEach(t),Ggr=r(lBe," (Data2VecVision model)"),lBe.forEach(t),Ogr=i(hA),L7=n(hA,"LI",{});var iBe=s(L7);Tve=n(iBe,"STRONG",{});var rCt=s(Tve);Vgr=r(rCt,"dpt"),rCt.forEach(t),Xgr=r(iBe," \u2014 "),SQ=n(iBe,"A",{href:!0});var tCt=s(SQ);zgr=r(tCt,"DPTForSemanticSegmentation"),tCt.forEach(t),Wgr=r(iBe," (DPT model)"),iBe.forEach(t),Qgr=i(hA),y7=n(hA,"LI",{});var dBe=s(y7);Mve=n(dBe,"STRONG",{});var aCt=s(Mve);Hgr=r(aCt,"segformer"),aCt.forEach(t),Ugr=r(dBe," \u2014 "),RQ=n(dBe,"A",{href:!0});var nCt=s(RQ);Jgr=r(nCt,"SegformerForSemanticSegmentation"),nCt.forEach(t),Ygr=r(dBe," (SegFormer model)"),dBe.forEach(t),hA.forEach(t),Kgr=i(Aa),x7=n(Aa,"P",{});var cBe=s(x7);Zgr=r(cBe,"The model is set in evaluation mode by default using "),Eve=n(cBe,"CODE",{});var sCt=s(Eve);ehr=r(sCt,"model.eval()"),sCt.forEach(t),ohr=r(cBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cve=n(cBe,"CODE",{});var lCt=s(Cve);rhr=r(lCt,"model.train()"),lCt.forEach(t),cBe.forEach(t),thr=i(Aa),T($7.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),iOe=i(f),Yd=n(f,"H2",{class:!0});var uXe=s(Yd);k7=n(uXe,"A",{id:!0,class:!0,href:!0});var iCt=s(k7);wve=n(iCt,"SPAN",{});var dCt=s(wve);T(o8.$$.fragment,dCt),dCt.forEach(t),iCt.forEach(t),ahr=i(uXe),Ave=n(uXe,"SPAN",{});var cCt=s(Ave);nhr=r(cCt,"AutoModelForInstanceSegmentation"),cCt.forEach(t),uXe.forEach(t),dOe=i(f),Ko=n(f,"DIV",{class:!0});var Ml=s(Ko);T(r8.$$.fragment,Ml),shr=i(Ml),Kd=n(Ml,"P",{});var Hoe=s(Kd);lhr=r(Hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),PQ=n(Hoe,"A",{href:!0});var fCt=s(PQ);ihr=r(fCt,"from_pretrained()"),fCt.forEach(t),dhr=r(Hoe," class method or the "),BQ=n(Hoe,"A",{href:!0});var mCt=s(BQ);chr=r(mCt,"from_config()"),mCt.forEach(t),fhr=r(Hoe,` class
method.`),Hoe.forEach(t),mhr=i(Ml),t8=n(Ml,"P",{});var _Xe=s(t8);ghr=r(_Xe,"This class cannot be instantiated directly using "),Lve=n(_Xe,"CODE",{});var gCt=s(Lve);hhr=r(gCt,"__init__()"),gCt.forEach(t),phr=r(_Xe," (throws an error)."),_Xe.forEach(t),uhr=i(Ml),xt=n(Ml,"DIV",{class:!0});var pA=s(xt);T(a8.$$.fragment,pA),_hr=i(pA),yve=n(pA,"P",{});var hCt=s(yve);bhr=r(hCt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),hCt.forEach(t),vhr=i(pA),Zd=n(pA,"P",{});var Uoe=s(Zd);Fhr=r(Uoe,`Note:
Loading a model from its configuration file does `),xve=n(Uoe,"STRONG",{});var pCt=s(xve);Thr=r(pCt,"not"),pCt.forEach(t),Mhr=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(Uoe,"A",{href:!0});var uCt=s(IQ);Ehr=r(uCt,"from_pretrained()"),uCt.forEach(t),Chr=r(Uoe," to load the model weights."),Uoe.forEach(t),whr=i(pA),T(S7.$$.fragment,pA),pA.forEach(t),Ahr=i(Ml),Fo=n(Ml,"DIV",{class:!0});var La=s(Fo);T(n8.$$.fragment,La),Lhr=i(La),$ve=n(La,"P",{});var _Ct=s($ve);yhr=r(_Ct,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),_Ct.forEach(t),xhr=i(La),rn=n(La,"P",{});var uA=s(rn);$hr=r(uA,"The model class to instantiate is selected based on the "),kve=n(uA,"CODE",{});var bCt=s(kve);khr=r(bCt,"model_type"),bCt.forEach(t),Shr=r(uA,` property of the config object (either
passed as an argument or loaded from `),Sve=n(uA,"CODE",{});var vCt=s(Sve);Rhr=r(vCt,"pretrained_model_name_or_path"),vCt.forEach(t),Phr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=n(uA,"CODE",{});var FCt=s(Rve);Bhr=r(FCt,"pretrained_model_name_or_path"),FCt.forEach(t),Ihr=r(uA,":"),uA.forEach(t),Nhr=i(La),Pve=n(La,"UL",{});var TCt=s(Pve);R7=n(TCt,"LI",{});var fBe=s(R7);Bve=n(fBe,"STRONG",{});var MCt=s(Bve);qhr=r(MCt,"maskformer"),MCt.forEach(t),jhr=r(fBe," \u2014 "),NQ=n(fBe,"A",{href:!0});var ECt=s(NQ);Dhr=r(ECt,"MaskFormerForInstanceSegmentation"),ECt.forEach(t),Ghr=r(fBe," (MaskFormer model)"),fBe.forEach(t),TCt.forEach(t),Ohr=i(La),P7=n(La,"P",{});var mBe=s(P7);Vhr=r(mBe,"The model is set in evaluation mode by default using "),Ive=n(mBe,"CODE",{});var CCt=s(Ive);Xhr=r(CCt,"model.eval()"),CCt.forEach(t),zhr=r(mBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nve=n(mBe,"CODE",{});var wCt=s(Nve);Whr=r(wCt,"model.train()"),wCt.forEach(t),mBe.forEach(t),Qhr=i(La),T(B7.$$.fragment,La),La.forEach(t),Ml.forEach(t),cOe=i(f),ec=n(f,"H2",{class:!0});var bXe=s(ec);I7=n(bXe,"A",{id:!0,class:!0,href:!0});var ACt=s(I7);qve=n(ACt,"SPAN",{});var LCt=s(qve);T(s8.$$.fragment,LCt),LCt.forEach(t),ACt.forEach(t),Hhr=i(bXe),jve=n(bXe,"SPAN",{});var yCt=s(jve);Uhr=r(yCt,"TFAutoModel"),yCt.forEach(t),bXe.forEach(t),fOe=i(f),Zo=n(f,"DIV",{class:!0});var El=s(Zo);T(l8.$$.fragment,El),Jhr=i(El),oc=n(El,"P",{});var Joe=s(oc);Yhr=r(Joe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qQ=n(Joe,"A",{href:!0});var xCt=s(qQ);Khr=r(xCt,"from_pretrained()"),xCt.forEach(t),Zhr=r(Joe," class method or the "),jQ=n(Joe,"A",{href:!0});var $Ct=s(jQ);epr=r($Ct,"from_config()"),$Ct.forEach(t),opr=r(Joe,` class
method.`),Joe.forEach(t),rpr=i(El),i8=n(El,"P",{});var vXe=s(i8);tpr=r(vXe,"This class cannot be instantiated directly using "),Dve=n(vXe,"CODE",{});var kCt=s(Dve);apr=r(kCt,"__init__()"),kCt.forEach(t),npr=r(vXe," (throws an error)."),vXe.forEach(t),spr=i(El),$t=n(El,"DIV",{class:!0});var _A=s($t);T(d8.$$.fragment,_A),lpr=i(_A),Gve=n(_A,"P",{});var SCt=s(Gve);ipr=r(SCt,"Instantiates one of the base model classes of the library from a configuration."),SCt.forEach(t),dpr=i(_A),rc=n(_A,"P",{});var Yoe=s(rc);cpr=r(Yoe,`Note:
Loading a model from its configuration file does `),Ove=n(Yoe,"STRONG",{});var RCt=s(Ove);fpr=r(RCt,"not"),RCt.forEach(t),mpr=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(Yoe,"A",{href:!0});var PCt=s(DQ);gpr=r(PCt,"from_pretrained()"),PCt.forEach(t),hpr=r(Yoe," to load the model weights."),Yoe.forEach(t),ppr=i(_A),T(N7.$$.fragment,_A),_A.forEach(t),upr=i(El),Lr=n(El,"DIV",{class:!0});var Cl=s(Lr);T(c8.$$.fragment,Cl),_pr=i(Cl),Vve=n(Cl,"P",{});var BCt=s(Vve);bpr=r(BCt,"Instantiate one of the base model classes of the library from a pretrained model."),BCt.forEach(t),vpr=i(Cl),tn=n(Cl,"P",{});var bA=s(tn);Fpr=r(bA,"The model class to instantiate is selected based on the "),Xve=n(bA,"CODE",{});var ICt=s(Xve);Tpr=r(ICt,"model_type"),ICt.forEach(t),Mpr=r(bA,` property of the config object (either
passed as an argument or loaded from `),zve=n(bA,"CODE",{});var NCt=s(zve);Epr=r(NCt,"pretrained_model_name_or_path"),NCt.forEach(t),Cpr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=n(bA,"CODE",{});var qCt=s(Wve);wpr=r(qCt,"pretrained_model_name_or_path"),qCt.forEach(t),Apr=r(bA,":"),bA.forEach(t),Lpr=i(Cl),q=n(Cl,"UL",{});var D=s(q);q7=n(D,"LI",{});var gBe=s(q7);Qve=n(gBe,"STRONG",{});var jCt=s(Qve);ypr=r(jCt,"albert"),jCt.forEach(t),xpr=r(gBe," \u2014 "),GQ=n(gBe,"A",{href:!0});var DCt=s(GQ);$pr=r(DCt,"TFAlbertModel"),DCt.forEach(t),kpr=r(gBe," (ALBERT model)"),gBe.forEach(t),Spr=i(D),j7=n(D,"LI",{});var hBe=s(j7);Hve=n(hBe,"STRONG",{});var GCt=s(Hve);Rpr=r(GCt,"bart"),GCt.forEach(t),Ppr=r(hBe," \u2014 "),OQ=n(hBe,"A",{href:!0});var OCt=s(OQ);Bpr=r(OCt,"TFBartModel"),OCt.forEach(t),Ipr=r(hBe," (BART model)"),hBe.forEach(t),Npr=i(D),D7=n(D,"LI",{});var pBe=s(D7);Uve=n(pBe,"STRONG",{});var VCt=s(Uve);qpr=r(VCt,"bert"),VCt.forEach(t),jpr=r(pBe," \u2014 "),VQ=n(pBe,"A",{href:!0});var XCt=s(VQ);Dpr=r(XCt,"TFBertModel"),XCt.forEach(t),Gpr=r(pBe," (BERT model)"),pBe.forEach(t),Opr=i(D),G7=n(D,"LI",{});var uBe=s(G7);Jve=n(uBe,"STRONG",{});var zCt=s(Jve);Vpr=r(zCt,"blenderbot"),zCt.forEach(t),Xpr=r(uBe," \u2014 "),XQ=n(uBe,"A",{href:!0});var WCt=s(XQ);zpr=r(WCt,"TFBlenderbotModel"),WCt.forEach(t),Wpr=r(uBe," (Blenderbot model)"),uBe.forEach(t),Qpr=i(D),O7=n(D,"LI",{});var _Be=s(O7);Yve=n(_Be,"STRONG",{});var QCt=s(Yve);Hpr=r(QCt,"blenderbot-small"),QCt.forEach(t),Upr=r(_Be," \u2014 "),zQ=n(_Be,"A",{href:!0});var HCt=s(zQ);Jpr=r(HCt,"TFBlenderbotSmallModel"),HCt.forEach(t),Ypr=r(_Be," (BlenderbotSmall model)"),_Be.forEach(t),Kpr=i(D),V7=n(D,"LI",{});var bBe=s(V7);Kve=n(bBe,"STRONG",{});var UCt=s(Kve);Zpr=r(UCt,"camembert"),UCt.forEach(t),eur=r(bBe," \u2014 "),WQ=n(bBe,"A",{href:!0});var JCt=s(WQ);our=r(JCt,"TFCamembertModel"),JCt.forEach(t),rur=r(bBe," (CamemBERT model)"),bBe.forEach(t),tur=i(D),X7=n(D,"LI",{});var vBe=s(X7);Zve=n(vBe,"STRONG",{});var YCt=s(Zve);aur=r(YCt,"clip"),YCt.forEach(t),nur=r(vBe," \u2014 "),QQ=n(vBe,"A",{href:!0});var KCt=s(QQ);sur=r(KCt,"TFCLIPModel"),KCt.forEach(t),lur=r(vBe," (CLIP model)"),vBe.forEach(t),iur=i(D),z7=n(D,"LI",{});var FBe=s(z7);e0e=n(FBe,"STRONG",{});var ZCt=s(e0e);dur=r(ZCt,"convbert"),ZCt.forEach(t),cur=r(FBe," \u2014 "),HQ=n(FBe,"A",{href:!0});var e5t=s(HQ);fur=r(e5t,"TFConvBertModel"),e5t.forEach(t),mur=r(FBe," (ConvBERT model)"),FBe.forEach(t),gur=i(D),W7=n(D,"LI",{});var TBe=s(W7);o0e=n(TBe,"STRONG",{});var o5t=s(o0e);hur=r(o5t,"convnext"),o5t.forEach(t),pur=r(TBe," \u2014 "),UQ=n(TBe,"A",{href:!0});var r5t=s(UQ);uur=r(r5t,"TFConvNextModel"),r5t.forEach(t),_ur=r(TBe," (ConvNeXT model)"),TBe.forEach(t),bur=i(D),Q7=n(D,"LI",{});var MBe=s(Q7);r0e=n(MBe,"STRONG",{});var t5t=s(r0e);vur=r(t5t,"ctrl"),t5t.forEach(t),Fur=r(MBe," \u2014 "),JQ=n(MBe,"A",{href:!0});var a5t=s(JQ);Tur=r(a5t,"TFCTRLModel"),a5t.forEach(t),Mur=r(MBe," (CTRL model)"),MBe.forEach(t),Eur=i(D),H7=n(D,"LI",{});var EBe=s(H7);t0e=n(EBe,"STRONG",{});var n5t=s(t0e);Cur=r(n5t,"data2vec-vision"),n5t.forEach(t),wur=r(EBe," \u2014 "),YQ=n(EBe,"A",{href:!0});var s5t=s(YQ);Aur=r(s5t,"TFData2VecVisionModel"),s5t.forEach(t),Lur=r(EBe," (Data2VecVision model)"),EBe.forEach(t),yur=i(D),U7=n(D,"LI",{});var CBe=s(U7);a0e=n(CBe,"STRONG",{});var l5t=s(a0e);xur=r(l5t,"deberta"),l5t.forEach(t),$ur=r(CBe," \u2014 "),KQ=n(CBe,"A",{href:!0});var i5t=s(KQ);kur=r(i5t,"TFDebertaModel"),i5t.forEach(t),Sur=r(CBe," (DeBERTa model)"),CBe.forEach(t),Rur=i(D),J7=n(D,"LI",{});var wBe=s(J7);n0e=n(wBe,"STRONG",{});var d5t=s(n0e);Pur=r(d5t,"deberta-v2"),d5t.forEach(t),Bur=r(wBe," \u2014 "),ZQ=n(wBe,"A",{href:!0});var c5t=s(ZQ);Iur=r(c5t,"TFDebertaV2Model"),c5t.forEach(t),Nur=r(wBe," (DeBERTa-v2 model)"),wBe.forEach(t),qur=i(D),Y7=n(D,"LI",{});var ABe=s(Y7);s0e=n(ABe,"STRONG",{});var f5t=s(s0e);jur=r(f5t,"distilbert"),f5t.forEach(t),Dur=r(ABe," \u2014 "),eH=n(ABe,"A",{href:!0});var m5t=s(eH);Gur=r(m5t,"TFDistilBertModel"),m5t.forEach(t),Our=r(ABe," (DistilBERT model)"),ABe.forEach(t),Vur=i(D),K7=n(D,"LI",{});var LBe=s(K7);l0e=n(LBe,"STRONG",{});var g5t=s(l0e);Xur=r(g5t,"dpr"),g5t.forEach(t),zur=r(LBe," \u2014 "),oH=n(LBe,"A",{href:!0});var h5t=s(oH);Wur=r(h5t,"TFDPRQuestionEncoder"),h5t.forEach(t),Qur=r(LBe," (DPR model)"),LBe.forEach(t),Hur=i(D),Z7=n(D,"LI",{});var yBe=s(Z7);i0e=n(yBe,"STRONG",{});var p5t=s(i0e);Uur=r(p5t,"electra"),p5t.forEach(t),Jur=r(yBe," \u2014 "),rH=n(yBe,"A",{href:!0});var u5t=s(rH);Yur=r(u5t,"TFElectraModel"),u5t.forEach(t),Kur=r(yBe," (ELECTRA model)"),yBe.forEach(t),Zur=i(D),e9=n(D,"LI",{});var xBe=s(e9);d0e=n(xBe,"STRONG",{});var _5t=s(d0e);e_r=r(_5t,"flaubert"),_5t.forEach(t),o_r=r(xBe," \u2014 "),tH=n(xBe,"A",{href:!0});var b5t=s(tH);r_r=r(b5t,"TFFlaubertModel"),b5t.forEach(t),t_r=r(xBe," (FlauBERT model)"),xBe.forEach(t),a_r=i(D),zs=n(D,"LI",{});var Wk=s(zs);c0e=n(Wk,"STRONG",{});var v5t=s(c0e);n_r=r(v5t,"funnel"),v5t.forEach(t),s_r=r(Wk," \u2014 "),aH=n(Wk,"A",{href:!0});var F5t=s(aH);l_r=r(F5t,"TFFunnelModel"),F5t.forEach(t),i_r=r(Wk," or "),nH=n(Wk,"A",{href:!0});var T5t=s(nH);d_r=r(T5t,"TFFunnelBaseModel"),T5t.forEach(t),c_r=r(Wk," (Funnel Transformer model)"),Wk.forEach(t),f_r=i(D),o9=n(D,"LI",{});var $Be=s(o9);f0e=n($Be,"STRONG",{});var M5t=s(f0e);m_r=r(M5t,"gpt2"),M5t.forEach(t),g_r=r($Be," \u2014 "),sH=n($Be,"A",{href:!0});var E5t=s(sH);h_r=r(E5t,"TFGPT2Model"),E5t.forEach(t),p_r=r($Be," (OpenAI GPT-2 model)"),$Be.forEach(t),u_r=i(D),r9=n(D,"LI",{});var kBe=s(r9);m0e=n(kBe,"STRONG",{});var C5t=s(m0e);__r=r(C5t,"gptj"),C5t.forEach(t),b_r=r(kBe," \u2014 "),lH=n(kBe,"A",{href:!0});var w5t=s(lH);v_r=r(w5t,"TFGPTJModel"),w5t.forEach(t),F_r=r(kBe," (GPT-J model)"),kBe.forEach(t),T_r=i(D),t9=n(D,"LI",{});var SBe=s(t9);g0e=n(SBe,"STRONG",{});var A5t=s(g0e);M_r=r(A5t,"hubert"),A5t.forEach(t),E_r=r(SBe," \u2014 "),iH=n(SBe,"A",{href:!0});var L5t=s(iH);C_r=r(L5t,"TFHubertModel"),L5t.forEach(t),w_r=r(SBe," (Hubert model)"),SBe.forEach(t),A_r=i(D),a9=n(D,"LI",{});var RBe=s(a9);h0e=n(RBe,"STRONG",{});var y5t=s(h0e);L_r=r(y5t,"layoutlm"),y5t.forEach(t),y_r=r(RBe," \u2014 "),dH=n(RBe,"A",{href:!0});var x5t=s(dH);x_r=r(x5t,"TFLayoutLMModel"),x5t.forEach(t),$_r=r(RBe," (LayoutLM model)"),RBe.forEach(t),k_r=i(D),n9=n(D,"LI",{});var PBe=s(n9);p0e=n(PBe,"STRONG",{});var $5t=s(p0e);S_r=r($5t,"led"),$5t.forEach(t),R_r=r(PBe," \u2014 "),cH=n(PBe,"A",{href:!0});var k5t=s(cH);P_r=r(k5t,"TFLEDModel"),k5t.forEach(t),B_r=r(PBe," (LED model)"),PBe.forEach(t),I_r=i(D),s9=n(D,"LI",{});var BBe=s(s9);u0e=n(BBe,"STRONG",{});var S5t=s(u0e);N_r=r(S5t,"longformer"),S5t.forEach(t),q_r=r(BBe," \u2014 "),fH=n(BBe,"A",{href:!0});var R5t=s(fH);j_r=r(R5t,"TFLongformerModel"),R5t.forEach(t),D_r=r(BBe," (Longformer model)"),BBe.forEach(t),G_r=i(D),l9=n(D,"LI",{});var IBe=s(l9);_0e=n(IBe,"STRONG",{});var P5t=s(_0e);O_r=r(P5t,"lxmert"),P5t.forEach(t),V_r=r(IBe," \u2014 "),mH=n(IBe,"A",{href:!0});var B5t=s(mH);X_r=r(B5t,"TFLxmertModel"),B5t.forEach(t),z_r=r(IBe," (LXMERT model)"),IBe.forEach(t),W_r=i(D),i9=n(D,"LI",{});var NBe=s(i9);b0e=n(NBe,"STRONG",{});var I5t=s(b0e);Q_r=r(I5t,"marian"),I5t.forEach(t),H_r=r(NBe," \u2014 "),gH=n(NBe,"A",{href:!0});var N5t=s(gH);U_r=r(N5t,"TFMarianModel"),N5t.forEach(t),J_r=r(NBe," (Marian model)"),NBe.forEach(t),Y_r=i(D),d9=n(D,"LI",{});var qBe=s(d9);v0e=n(qBe,"STRONG",{});var q5t=s(v0e);K_r=r(q5t,"mbart"),q5t.forEach(t),Z_r=r(qBe," \u2014 "),hH=n(qBe,"A",{href:!0});var j5t=s(hH);e1r=r(j5t,"TFMBartModel"),j5t.forEach(t),o1r=r(qBe," (mBART model)"),qBe.forEach(t),r1r=i(D),c9=n(D,"LI",{});var jBe=s(c9);F0e=n(jBe,"STRONG",{});var D5t=s(F0e);t1r=r(D5t,"mobilebert"),D5t.forEach(t),a1r=r(jBe," \u2014 "),pH=n(jBe,"A",{href:!0});var G5t=s(pH);n1r=r(G5t,"TFMobileBertModel"),G5t.forEach(t),s1r=r(jBe," (MobileBERT model)"),jBe.forEach(t),l1r=i(D),f9=n(D,"LI",{});var DBe=s(f9);T0e=n(DBe,"STRONG",{});var O5t=s(T0e);i1r=r(O5t,"mpnet"),O5t.forEach(t),d1r=r(DBe," \u2014 "),uH=n(DBe,"A",{href:!0});var V5t=s(uH);c1r=r(V5t,"TFMPNetModel"),V5t.forEach(t),f1r=r(DBe," (MPNet model)"),DBe.forEach(t),m1r=i(D),m9=n(D,"LI",{});var GBe=s(m9);M0e=n(GBe,"STRONG",{});var X5t=s(M0e);g1r=r(X5t,"mt5"),X5t.forEach(t),h1r=r(GBe," \u2014 "),_H=n(GBe,"A",{href:!0});var z5t=s(_H);p1r=r(z5t,"TFMT5Model"),z5t.forEach(t),u1r=r(GBe," (MT5 model)"),GBe.forEach(t),_1r=i(D),g9=n(D,"LI",{});var OBe=s(g9);E0e=n(OBe,"STRONG",{});var W5t=s(E0e);b1r=r(W5t,"openai-gpt"),W5t.forEach(t),v1r=r(OBe," \u2014 "),bH=n(OBe,"A",{href:!0});var Q5t=s(bH);F1r=r(Q5t,"TFOpenAIGPTModel"),Q5t.forEach(t),T1r=r(OBe," (OpenAI GPT model)"),OBe.forEach(t),M1r=i(D),h9=n(D,"LI",{});var VBe=s(h9);C0e=n(VBe,"STRONG",{});var H5t=s(C0e);E1r=r(H5t,"opt"),H5t.forEach(t),C1r=r(VBe," \u2014 "),vH=n(VBe,"A",{href:!0});var U5t=s(vH);w1r=r(U5t,"TFOPTModel"),U5t.forEach(t),A1r=r(VBe," (OPT model)"),VBe.forEach(t),L1r=i(D),p9=n(D,"LI",{});var XBe=s(p9);w0e=n(XBe,"STRONG",{});var J5t=s(w0e);y1r=r(J5t,"pegasus"),J5t.forEach(t),x1r=r(XBe," \u2014 "),FH=n(XBe,"A",{href:!0});var Y5t=s(FH);$1r=r(Y5t,"TFPegasusModel"),Y5t.forEach(t),k1r=r(XBe," (Pegasus model)"),XBe.forEach(t),S1r=i(D),u9=n(D,"LI",{});var zBe=s(u9);A0e=n(zBe,"STRONG",{});var K5t=s(A0e);R1r=r(K5t,"rembert"),K5t.forEach(t),P1r=r(zBe," \u2014 "),TH=n(zBe,"A",{href:!0});var Z5t=s(TH);B1r=r(Z5t,"TFRemBertModel"),Z5t.forEach(t),I1r=r(zBe," (RemBERT model)"),zBe.forEach(t),N1r=i(D),_9=n(D,"LI",{});var WBe=s(_9);L0e=n(WBe,"STRONG",{});var e3t=s(L0e);q1r=r(e3t,"roberta"),e3t.forEach(t),j1r=r(WBe," \u2014 "),MH=n(WBe,"A",{href:!0});var o3t=s(MH);D1r=r(o3t,"TFRobertaModel"),o3t.forEach(t),G1r=r(WBe," (RoBERTa model)"),WBe.forEach(t),O1r=i(D),b9=n(D,"LI",{});var QBe=s(b9);y0e=n(QBe,"STRONG",{});var r3t=s(y0e);V1r=r(r3t,"roformer"),r3t.forEach(t),X1r=r(QBe," \u2014 "),EH=n(QBe,"A",{href:!0});var t3t=s(EH);z1r=r(t3t,"TFRoFormerModel"),t3t.forEach(t),W1r=r(QBe," (RoFormer model)"),QBe.forEach(t),Q1r=i(D),v9=n(D,"LI",{});var HBe=s(v9);x0e=n(HBe,"STRONG",{});var a3t=s(x0e);H1r=r(a3t,"speech_to_text"),a3t.forEach(t),U1r=r(HBe," \u2014 "),CH=n(HBe,"A",{href:!0});var n3t=s(CH);J1r=r(n3t,"TFSpeech2TextModel"),n3t.forEach(t),Y1r=r(HBe," (Speech2Text model)"),HBe.forEach(t),K1r=i(D),F9=n(D,"LI",{});var UBe=s(F9);$0e=n(UBe,"STRONG",{});var s3t=s($0e);Z1r=r(s3t,"swin"),s3t.forEach(t),e2r=r(UBe," \u2014 "),wH=n(UBe,"A",{href:!0});var l3t=s(wH);o2r=r(l3t,"TFSwinModel"),l3t.forEach(t),r2r=r(UBe," (Swin Transformer model)"),UBe.forEach(t),t2r=i(D),T9=n(D,"LI",{});var JBe=s(T9);k0e=n(JBe,"STRONG",{});var i3t=s(k0e);a2r=r(i3t,"t5"),i3t.forEach(t),n2r=r(JBe," \u2014 "),AH=n(JBe,"A",{href:!0});var d3t=s(AH);s2r=r(d3t,"TFT5Model"),d3t.forEach(t),l2r=r(JBe," (T5 model)"),JBe.forEach(t),i2r=i(D),M9=n(D,"LI",{});var YBe=s(M9);S0e=n(YBe,"STRONG",{});var c3t=s(S0e);d2r=r(c3t,"tapas"),c3t.forEach(t),c2r=r(YBe," \u2014 "),LH=n(YBe,"A",{href:!0});var f3t=s(LH);f2r=r(f3t,"TFTapasModel"),f3t.forEach(t),m2r=r(YBe," (TAPAS model)"),YBe.forEach(t),g2r=i(D),E9=n(D,"LI",{});var KBe=s(E9);R0e=n(KBe,"STRONG",{});var m3t=s(R0e);h2r=r(m3t,"transfo-xl"),m3t.forEach(t),p2r=r(KBe," \u2014 "),yH=n(KBe,"A",{href:!0});var g3t=s(yH);u2r=r(g3t,"TFTransfoXLModel"),g3t.forEach(t),_2r=r(KBe," (Transformer-XL model)"),KBe.forEach(t),b2r=i(D),C9=n(D,"LI",{});var ZBe=s(C9);P0e=n(ZBe,"STRONG",{});var h3t=s(P0e);v2r=r(h3t,"vit"),h3t.forEach(t),F2r=r(ZBe," \u2014 "),xH=n(ZBe,"A",{href:!0});var p3t=s(xH);T2r=r(p3t,"TFViTModel"),p3t.forEach(t),M2r=r(ZBe," (ViT model)"),ZBe.forEach(t),E2r=i(D),w9=n(D,"LI",{});var eIe=s(w9);B0e=n(eIe,"STRONG",{});var u3t=s(B0e);C2r=r(u3t,"vit_mae"),u3t.forEach(t),w2r=r(eIe," \u2014 "),$H=n(eIe,"A",{href:!0});var _3t=s($H);A2r=r(_3t,"TFViTMAEModel"),_3t.forEach(t),L2r=r(eIe," (ViTMAE model)"),eIe.forEach(t),y2r=i(D),A9=n(D,"LI",{});var oIe=s(A9);I0e=n(oIe,"STRONG",{});var b3t=s(I0e);x2r=r(b3t,"wav2vec2"),b3t.forEach(t),$2r=r(oIe," \u2014 "),kH=n(oIe,"A",{href:!0});var v3t=s(kH);k2r=r(v3t,"TFWav2Vec2Model"),v3t.forEach(t),S2r=r(oIe," (Wav2Vec2 model)"),oIe.forEach(t),R2r=i(D),L9=n(D,"LI",{});var rIe=s(L9);N0e=n(rIe,"STRONG",{});var F3t=s(N0e);P2r=r(F3t,"xlm"),F3t.forEach(t),B2r=r(rIe," \u2014 "),SH=n(rIe,"A",{href:!0});var T3t=s(SH);I2r=r(T3t,"TFXLMModel"),T3t.forEach(t),N2r=r(rIe," (XLM model)"),rIe.forEach(t),q2r=i(D),y9=n(D,"LI",{});var tIe=s(y9);q0e=n(tIe,"STRONG",{});var M3t=s(q0e);j2r=r(M3t,"xlm-roberta"),M3t.forEach(t),D2r=r(tIe," \u2014 "),RH=n(tIe,"A",{href:!0});var E3t=s(RH);G2r=r(E3t,"TFXLMRobertaModel"),E3t.forEach(t),O2r=r(tIe," (XLM-RoBERTa model)"),tIe.forEach(t),V2r=i(D),x9=n(D,"LI",{});var aIe=s(x9);j0e=n(aIe,"STRONG",{});var C3t=s(j0e);X2r=r(C3t,"xlnet"),C3t.forEach(t),z2r=r(aIe," \u2014 "),PH=n(aIe,"A",{href:!0});var w3t=s(PH);W2r=r(w3t,"TFXLNetModel"),w3t.forEach(t),Q2r=r(aIe," (XLNet model)"),aIe.forEach(t),D.forEach(t),H2r=i(Cl),T($9.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),mOe=i(f),tc=n(f,"H2",{class:!0});var FXe=s(tc);k9=n(FXe,"A",{id:!0,class:!0,href:!0});var A3t=s(k9);D0e=n(A3t,"SPAN",{});var L3t=s(D0e);T(f8.$$.fragment,L3t),L3t.forEach(t),A3t.forEach(t),U2r=i(FXe),G0e=n(FXe,"SPAN",{});var y3t=s(G0e);J2r=r(y3t,"TFAutoModelForPreTraining"),y3t.forEach(t),FXe.forEach(t),gOe=i(f),er=n(f,"DIV",{class:!0});var wl=s(er);T(m8.$$.fragment,wl),Y2r=i(wl),ac=n(wl,"P",{});var Koe=s(ac);K2r=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BH=n(Koe,"A",{href:!0});var x3t=s(BH);Z2r=r(x3t,"from_pretrained()"),x3t.forEach(t),ebr=r(Koe," class method or the "),IH=n(Koe,"A",{href:!0});var $3t=s(IH);obr=r($3t,"from_config()"),$3t.forEach(t),rbr=r(Koe,` class
method.`),Koe.forEach(t),tbr=i(wl),g8=n(wl,"P",{});var TXe=s(g8);abr=r(TXe,"This class cannot be instantiated directly using "),O0e=n(TXe,"CODE",{});var k3t=s(O0e);nbr=r(k3t,"__init__()"),k3t.forEach(t),sbr=r(TXe," (throws an error)."),TXe.forEach(t),lbr=i(wl),kt=n(wl,"DIV",{class:!0});var vA=s(kt);T(h8.$$.fragment,vA),ibr=i(vA),V0e=n(vA,"P",{});var S3t=s(V0e);dbr=r(S3t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),S3t.forEach(t),cbr=i(vA),nc=n(vA,"P",{});var Zoe=s(nc);fbr=r(Zoe,`Note:
Loading a model from its configuration file does `),X0e=n(Zoe,"STRONG",{});var R3t=s(X0e);mbr=r(R3t,"not"),R3t.forEach(t),gbr=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(Zoe,"A",{href:!0});var P3t=s(NH);hbr=r(P3t,"from_pretrained()"),P3t.forEach(t),pbr=r(Zoe," to load the model weights."),Zoe.forEach(t),ubr=i(vA),T(S9.$$.fragment,vA),vA.forEach(t),_br=i(wl),yr=n(wl,"DIV",{class:!0});var Al=s(yr);T(p8.$$.fragment,Al),bbr=i(Al),z0e=n(Al,"P",{});var B3t=s(z0e);vbr=r(B3t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),B3t.forEach(t),Fbr=i(Al),an=n(Al,"P",{});var FA=s(an);Tbr=r(FA,"The model class to instantiate is selected based on the "),W0e=n(FA,"CODE",{});var I3t=s(W0e);Mbr=r(I3t,"model_type"),I3t.forEach(t),Ebr=r(FA,` property of the config object (either
passed as an argument or loaded from `),Q0e=n(FA,"CODE",{});var N3t=s(Q0e);Cbr=r(N3t,"pretrained_model_name_or_path"),N3t.forEach(t),wbr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=n(FA,"CODE",{});var q3t=s(H0e);Abr=r(q3t,"pretrained_model_name_or_path"),q3t.forEach(t),Lbr=r(FA,":"),FA.forEach(t),ybr=i(Al),se=n(Al,"UL",{});var le=s(se);R9=n(le,"LI",{});var nIe=s(R9);U0e=n(nIe,"STRONG",{});var j3t=s(U0e);xbr=r(j3t,"albert"),j3t.forEach(t),$br=r(nIe," \u2014 "),qH=n(nIe,"A",{href:!0});var D3t=s(qH);kbr=r(D3t,"TFAlbertForPreTraining"),D3t.forEach(t),Sbr=r(nIe," (ALBERT model)"),nIe.forEach(t),Rbr=i(le),P9=n(le,"LI",{});var sIe=s(P9);J0e=n(sIe,"STRONG",{});var G3t=s(J0e);Pbr=r(G3t,"bart"),G3t.forEach(t),Bbr=r(sIe," \u2014 "),jH=n(sIe,"A",{href:!0});var O3t=s(jH);Ibr=r(O3t,"TFBartForConditionalGeneration"),O3t.forEach(t),Nbr=r(sIe," (BART model)"),sIe.forEach(t),qbr=i(le),B9=n(le,"LI",{});var lIe=s(B9);Y0e=n(lIe,"STRONG",{});var V3t=s(Y0e);jbr=r(V3t,"bert"),V3t.forEach(t),Dbr=r(lIe," \u2014 "),DH=n(lIe,"A",{href:!0});var X3t=s(DH);Gbr=r(X3t,"TFBertForPreTraining"),X3t.forEach(t),Obr=r(lIe," (BERT model)"),lIe.forEach(t),Vbr=i(le),I9=n(le,"LI",{});var iIe=s(I9);K0e=n(iIe,"STRONG",{});var z3t=s(K0e);Xbr=r(z3t,"camembert"),z3t.forEach(t),zbr=r(iIe," \u2014 "),GH=n(iIe,"A",{href:!0});var W3t=s(GH);Wbr=r(W3t,"TFCamembertForMaskedLM"),W3t.forEach(t),Qbr=r(iIe," (CamemBERT model)"),iIe.forEach(t),Hbr=i(le),N9=n(le,"LI",{});var dIe=s(N9);Z0e=n(dIe,"STRONG",{});var Q3t=s(Z0e);Ubr=r(Q3t,"ctrl"),Q3t.forEach(t),Jbr=r(dIe," \u2014 "),OH=n(dIe,"A",{href:!0});var H3t=s(OH);Ybr=r(H3t,"TFCTRLLMHeadModel"),H3t.forEach(t),Kbr=r(dIe," (CTRL model)"),dIe.forEach(t),Zbr=i(le),q9=n(le,"LI",{});var cIe=s(q9);eFe=n(cIe,"STRONG",{});var U3t=s(eFe);evr=r(U3t,"distilbert"),U3t.forEach(t),ovr=r(cIe," \u2014 "),VH=n(cIe,"A",{href:!0});var J3t=s(VH);rvr=r(J3t,"TFDistilBertForMaskedLM"),J3t.forEach(t),tvr=r(cIe," (DistilBERT model)"),cIe.forEach(t),avr=i(le),j9=n(le,"LI",{});var fIe=s(j9);oFe=n(fIe,"STRONG",{});var Y3t=s(oFe);nvr=r(Y3t,"electra"),Y3t.forEach(t),svr=r(fIe," \u2014 "),XH=n(fIe,"A",{href:!0});var K3t=s(XH);lvr=r(K3t,"TFElectraForPreTraining"),K3t.forEach(t),ivr=r(fIe," (ELECTRA model)"),fIe.forEach(t),dvr=i(le),D9=n(le,"LI",{});var mIe=s(D9);rFe=n(mIe,"STRONG",{});var Z3t=s(rFe);cvr=r(Z3t,"flaubert"),Z3t.forEach(t),fvr=r(mIe," \u2014 "),zH=n(mIe,"A",{href:!0});var ewt=s(zH);mvr=r(ewt,"TFFlaubertWithLMHeadModel"),ewt.forEach(t),gvr=r(mIe," (FlauBERT model)"),mIe.forEach(t),hvr=i(le),G9=n(le,"LI",{});var gIe=s(G9);tFe=n(gIe,"STRONG",{});var owt=s(tFe);pvr=r(owt,"funnel"),owt.forEach(t),uvr=r(gIe," \u2014 "),WH=n(gIe,"A",{href:!0});var rwt=s(WH);_vr=r(rwt,"TFFunnelForPreTraining"),rwt.forEach(t),bvr=r(gIe," (Funnel Transformer model)"),gIe.forEach(t),vvr=i(le),O9=n(le,"LI",{});var hIe=s(O9);aFe=n(hIe,"STRONG",{});var twt=s(aFe);Fvr=r(twt,"gpt2"),twt.forEach(t),Tvr=r(hIe," \u2014 "),QH=n(hIe,"A",{href:!0});var awt=s(QH);Mvr=r(awt,"TFGPT2LMHeadModel"),awt.forEach(t),Evr=r(hIe," (OpenAI GPT-2 model)"),hIe.forEach(t),Cvr=i(le),V9=n(le,"LI",{});var pIe=s(V9);nFe=n(pIe,"STRONG",{});var nwt=s(nFe);wvr=r(nwt,"layoutlm"),nwt.forEach(t),Avr=r(pIe," \u2014 "),HH=n(pIe,"A",{href:!0});var swt=s(HH);Lvr=r(swt,"TFLayoutLMForMaskedLM"),swt.forEach(t),yvr=r(pIe," (LayoutLM model)"),pIe.forEach(t),xvr=i(le),X9=n(le,"LI",{});var uIe=s(X9);sFe=n(uIe,"STRONG",{});var lwt=s(sFe);$vr=r(lwt,"lxmert"),lwt.forEach(t),kvr=r(uIe," \u2014 "),UH=n(uIe,"A",{href:!0});var iwt=s(UH);Svr=r(iwt,"TFLxmertForPreTraining"),iwt.forEach(t),Rvr=r(uIe," (LXMERT model)"),uIe.forEach(t),Pvr=i(le),z9=n(le,"LI",{});var _Ie=s(z9);lFe=n(_Ie,"STRONG",{});var dwt=s(lFe);Bvr=r(dwt,"mobilebert"),dwt.forEach(t),Ivr=r(_Ie," \u2014 "),JH=n(_Ie,"A",{href:!0});var cwt=s(JH);Nvr=r(cwt,"TFMobileBertForPreTraining"),cwt.forEach(t),qvr=r(_Ie," (MobileBERT model)"),_Ie.forEach(t),jvr=i(le),W9=n(le,"LI",{});var bIe=s(W9);iFe=n(bIe,"STRONG",{});var fwt=s(iFe);Dvr=r(fwt,"mpnet"),fwt.forEach(t),Gvr=r(bIe," \u2014 "),YH=n(bIe,"A",{href:!0});var mwt=s(YH);Ovr=r(mwt,"TFMPNetForMaskedLM"),mwt.forEach(t),Vvr=r(bIe," (MPNet model)"),bIe.forEach(t),Xvr=i(le),Q9=n(le,"LI",{});var vIe=s(Q9);dFe=n(vIe,"STRONG",{});var gwt=s(dFe);zvr=r(gwt,"openai-gpt"),gwt.forEach(t),Wvr=r(vIe," \u2014 "),KH=n(vIe,"A",{href:!0});var hwt=s(KH);Qvr=r(hwt,"TFOpenAIGPTLMHeadModel"),hwt.forEach(t),Hvr=r(vIe," (OpenAI GPT model)"),vIe.forEach(t),Uvr=i(le),H9=n(le,"LI",{});var FIe=s(H9);cFe=n(FIe,"STRONG",{});var pwt=s(cFe);Jvr=r(pwt,"roberta"),pwt.forEach(t),Yvr=r(FIe," \u2014 "),ZH=n(FIe,"A",{href:!0});var uwt=s(ZH);Kvr=r(uwt,"TFRobertaForMaskedLM"),uwt.forEach(t),Zvr=r(FIe," (RoBERTa model)"),FIe.forEach(t),e0r=i(le),U9=n(le,"LI",{});var TIe=s(U9);fFe=n(TIe,"STRONG",{});var _wt=s(fFe);o0r=r(_wt,"t5"),_wt.forEach(t),r0r=r(TIe," \u2014 "),eU=n(TIe,"A",{href:!0});var bwt=s(eU);t0r=r(bwt,"TFT5ForConditionalGeneration"),bwt.forEach(t),a0r=r(TIe," (T5 model)"),TIe.forEach(t),n0r=i(le),J9=n(le,"LI",{});var MIe=s(J9);mFe=n(MIe,"STRONG",{});var vwt=s(mFe);s0r=r(vwt,"tapas"),vwt.forEach(t),l0r=r(MIe," \u2014 "),oU=n(MIe,"A",{href:!0});var Fwt=s(oU);i0r=r(Fwt,"TFTapasForMaskedLM"),Fwt.forEach(t),d0r=r(MIe," (TAPAS model)"),MIe.forEach(t),c0r=i(le),Y9=n(le,"LI",{});var EIe=s(Y9);gFe=n(EIe,"STRONG",{});var Twt=s(gFe);f0r=r(Twt,"transfo-xl"),Twt.forEach(t),m0r=r(EIe," \u2014 "),rU=n(EIe,"A",{href:!0});var Mwt=s(rU);g0r=r(Mwt,"TFTransfoXLLMHeadModel"),Mwt.forEach(t),h0r=r(EIe," (Transformer-XL model)"),EIe.forEach(t),p0r=i(le),K9=n(le,"LI",{});var CIe=s(K9);hFe=n(CIe,"STRONG",{});var Ewt=s(hFe);u0r=r(Ewt,"vit_mae"),Ewt.forEach(t),_0r=r(CIe," \u2014 "),tU=n(CIe,"A",{href:!0});var Cwt=s(tU);b0r=r(Cwt,"TFViTMAEForPreTraining"),Cwt.forEach(t),v0r=r(CIe," (ViTMAE model)"),CIe.forEach(t),F0r=i(le),Z9=n(le,"LI",{});var wIe=s(Z9);pFe=n(wIe,"STRONG",{});var wwt=s(pFe);T0r=r(wwt,"xlm"),wwt.forEach(t),M0r=r(wIe," \u2014 "),aU=n(wIe,"A",{href:!0});var Awt=s(aU);E0r=r(Awt,"TFXLMWithLMHeadModel"),Awt.forEach(t),C0r=r(wIe," (XLM model)"),wIe.forEach(t),w0r=i(le),eM=n(le,"LI",{});var AIe=s(eM);uFe=n(AIe,"STRONG",{});var Lwt=s(uFe);A0r=r(Lwt,"xlm-roberta"),Lwt.forEach(t),L0r=r(AIe," \u2014 "),nU=n(AIe,"A",{href:!0});var ywt=s(nU);y0r=r(ywt,"TFXLMRobertaForMaskedLM"),ywt.forEach(t),x0r=r(AIe," (XLM-RoBERTa model)"),AIe.forEach(t),$0r=i(le),oM=n(le,"LI",{});var LIe=s(oM);_Fe=n(LIe,"STRONG",{});var xwt=s(_Fe);k0r=r(xwt,"xlnet"),xwt.forEach(t),S0r=r(LIe," \u2014 "),sU=n(LIe,"A",{href:!0});var $wt=s(sU);R0r=r($wt,"TFXLNetLMHeadModel"),$wt.forEach(t),P0r=r(LIe," (XLNet model)"),LIe.forEach(t),le.forEach(t),B0r=i(Al),T(rM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),hOe=i(f),sc=n(f,"H2",{class:!0});var MXe=s(sc);tM=n(MXe,"A",{id:!0,class:!0,href:!0});var kwt=s(tM);bFe=n(kwt,"SPAN",{});var Swt=s(bFe);T(u8.$$.fragment,Swt),Swt.forEach(t),kwt.forEach(t),I0r=i(MXe),vFe=n(MXe,"SPAN",{});var Rwt=s(vFe);N0r=r(Rwt,"TFAutoModelForCausalLM"),Rwt.forEach(t),MXe.forEach(t),pOe=i(f),or=n(f,"DIV",{class:!0});var Ll=s(or);T(_8.$$.fragment,Ll),q0r=i(Ll),lc=n(Ll,"P",{});var ere=s(lc);j0r=r(ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),lU=n(ere,"A",{href:!0});var Pwt=s(lU);D0r=r(Pwt,"from_pretrained()"),Pwt.forEach(t),G0r=r(ere," class method or the "),iU=n(ere,"A",{href:!0});var Bwt=s(iU);O0r=r(Bwt,"from_config()"),Bwt.forEach(t),V0r=r(ere,` class
method.`),ere.forEach(t),X0r=i(Ll),b8=n(Ll,"P",{});var EXe=s(b8);z0r=r(EXe,"This class cannot be instantiated directly using "),FFe=n(EXe,"CODE",{});var Iwt=s(FFe);W0r=r(Iwt,"__init__()"),Iwt.forEach(t),Q0r=r(EXe," (throws an error)."),EXe.forEach(t),H0r=i(Ll),St=n(Ll,"DIV",{class:!0});var TA=s(St);T(v8.$$.fragment,TA),U0r=i(TA),TFe=n(TA,"P",{});var Nwt=s(TFe);J0r=r(Nwt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Nwt.forEach(t),Y0r=i(TA),ic=n(TA,"P",{});var ore=s(ic);K0r=r(ore,`Note:
Loading a model from its configuration file does `),MFe=n(ore,"STRONG",{});var qwt=s(MFe);Z0r=r(qwt,"not"),qwt.forEach(t),eFr=r(ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(ore,"A",{href:!0});var jwt=s(dU);oFr=r(jwt,"from_pretrained()"),jwt.forEach(t),rFr=r(ore," to load the model weights."),ore.forEach(t),tFr=i(TA),T(aM.$$.fragment,TA),TA.forEach(t),aFr=i(Ll),xr=n(Ll,"DIV",{class:!0});var yl=s(xr);T(F8.$$.fragment,yl),nFr=i(yl),EFe=n(yl,"P",{});var Dwt=s(EFe);sFr=r(Dwt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Dwt.forEach(t),lFr=i(yl),nn=n(yl,"P",{});var MA=s(nn);iFr=r(MA,"The model class to instantiate is selected based on the "),CFe=n(MA,"CODE",{});var Gwt=s(CFe);dFr=r(Gwt,"model_type"),Gwt.forEach(t),cFr=r(MA,` property of the config object (either
passed as an argument or loaded from `),wFe=n(MA,"CODE",{});var Owt=s(wFe);fFr=r(Owt,"pretrained_model_name_or_path"),Owt.forEach(t),mFr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=n(MA,"CODE",{});var Vwt=s(AFe);gFr=r(Vwt,"pretrained_model_name_or_path"),Vwt.forEach(t),hFr=r(MA,":"),MA.forEach(t),pFr=i(yl),Me=n(yl,"UL",{});var Ce=s(Me);nM=n(Ce,"LI",{});var yIe=s(nM);LFe=n(yIe,"STRONG",{});var Xwt=s(LFe);uFr=r(Xwt,"bert"),Xwt.forEach(t),_Fr=r(yIe," \u2014 "),cU=n(yIe,"A",{href:!0});var zwt=s(cU);bFr=r(zwt,"TFBertLMHeadModel"),zwt.forEach(t),vFr=r(yIe," (BERT model)"),yIe.forEach(t),FFr=i(Ce),sM=n(Ce,"LI",{});var xIe=s(sM);yFe=n(xIe,"STRONG",{});var Wwt=s(yFe);TFr=r(Wwt,"camembert"),Wwt.forEach(t),MFr=r(xIe," \u2014 "),fU=n(xIe,"A",{href:!0});var Qwt=s(fU);EFr=r(Qwt,"TFCamembertForCausalLM"),Qwt.forEach(t),CFr=r(xIe," (CamemBERT model)"),xIe.forEach(t),wFr=i(Ce),lM=n(Ce,"LI",{});var $Ie=s(lM);xFe=n($Ie,"STRONG",{});var Hwt=s(xFe);AFr=r(Hwt,"ctrl"),Hwt.forEach(t),LFr=r($Ie," \u2014 "),mU=n($Ie,"A",{href:!0});var Uwt=s(mU);yFr=r(Uwt,"TFCTRLLMHeadModel"),Uwt.forEach(t),xFr=r($Ie," (CTRL model)"),$Ie.forEach(t),$Fr=i(Ce),iM=n(Ce,"LI",{});var kIe=s(iM);$Fe=n(kIe,"STRONG",{});var Jwt=s($Fe);kFr=r(Jwt,"gpt2"),Jwt.forEach(t),SFr=r(kIe," \u2014 "),gU=n(kIe,"A",{href:!0});var Ywt=s(gU);RFr=r(Ywt,"TFGPT2LMHeadModel"),Ywt.forEach(t),PFr=r(kIe," (OpenAI GPT-2 model)"),kIe.forEach(t),BFr=i(Ce),dM=n(Ce,"LI",{});var SIe=s(dM);kFe=n(SIe,"STRONG",{});var Kwt=s(kFe);IFr=r(Kwt,"gptj"),Kwt.forEach(t),NFr=r(SIe," \u2014 "),hU=n(SIe,"A",{href:!0});var Zwt=s(hU);qFr=r(Zwt,"TFGPTJForCausalLM"),Zwt.forEach(t),jFr=r(SIe," (GPT-J model)"),SIe.forEach(t),DFr=i(Ce),cM=n(Ce,"LI",{});var RIe=s(cM);SFe=n(RIe,"STRONG",{});var eAt=s(SFe);GFr=r(eAt,"openai-gpt"),eAt.forEach(t),OFr=r(RIe," \u2014 "),pU=n(RIe,"A",{href:!0});var oAt=s(pU);VFr=r(oAt,"TFOpenAIGPTLMHeadModel"),oAt.forEach(t),XFr=r(RIe," (OpenAI GPT model)"),RIe.forEach(t),zFr=i(Ce),fM=n(Ce,"LI",{});var PIe=s(fM);RFe=n(PIe,"STRONG",{});var rAt=s(RFe);WFr=r(rAt,"opt"),rAt.forEach(t),QFr=r(PIe," \u2014 "),uU=n(PIe,"A",{href:!0});var tAt=s(uU);HFr=r(tAt,"TFOPTForCausalLM"),tAt.forEach(t),UFr=r(PIe," (OPT model)"),PIe.forEach(t),JFr=i(Ce),mM=n(Ce,"LI",{});var BIe=s(mM);PFe=n(BIe,"STRONG",{});var aAt=s(PFe);YFr=r(aAt,"rembert"),aAt.forEach(t),KFr=r(BIe," \u2014 "),_U=n(BIe,"A",{href:!0});var nAt=s(_U);ZFr=r(nAt,"TFRemBertForCausalLM"),nAt.forEach(t),eTr=r(BIe," (RemBERT model)"),BIe.forEach(t),oTr=i(Ce),gM=n(Ce,"LI",{});var IIe=s(gM);BFe=n(IIe,"STRONG",{});var sAt=s(BFe);rTr=r(sAt,"roberta"),sAt.forEach(t),tTr=r(IIe," \u2014 "),bU=n(IIe,"A",{href:!0});var lAt=s(bU);aTr=r(lAt,"TFRobertaForCausalLM"),lAt.forEach(t),nTr=r(IIe," (RoBERTa model)"),IIe.forEach(t),sTr=i(Ce),hM=n(Ce,"LI",{});var NIe=s(hM);IFe=n(NIe,"STRONG",{});var iAt=s(IFe);lTr=r(iAt,"roformer"),iAt.forEach(t),iTr=r(NIe," \u2014 "),vU=n(NIe,"A",{href:!0});var dAt=s(vU);dTr=r(dAt,"TFRoFormerForCausalLM"),dAt.forEach(t),cTr=r(NIe," (RoFormer model)"),NIe.forEach(t),fTr=i(Ce),pM=n(Ce,"LI",{});var qIe=s(pM);NFe=n(qIe,"STRONG",{});var cAt=s(NFe);mTr=r(cAt,"transfo-xl"),cAt.forEach(t),gTr=r(qIe," \u2014 "),FU=n(qIe,"A",{href:!0});var fAt=s(FU);hTr=r(fAt,"TFTransfoXLLMHeadModel"),fAt.forEach(t),pTr=r(qIe," (Transformer-XL model)"),qIe.forEach(t),uTr=i(Ce),uM=n(Ce,"LI",{});var jIe=s(uM);qFe=n(jIe,"STRONG",{});var mAt=s(qFe);_Tr=r(mAt,"xlm"),mAt.forEach(t),bTr=r(jIe," \u2014 "),TU=n(jIe,"A",{href:!0});var gAt=s(TU);vTr=r(gAt,"TFXLMWithLMHeadModel"),gAt.forEach(t),FTr=r(jIe," (XLM model)"),jIe.forEach(t),TTr=i(Ce),_M=n(Ce,"LI",{});var DIe=s(_M);jFe=n(DIe,"STRONG",{});var hAt=s(jFe);MTr=r(hAt,"xlnet"),hAt.forEach(t),ETr=r(DIe," \u2014 "),MU=n(DIe,"A",{href:!0});var pAt=s(MU);CTr=r(pAt,"TFXLNetLMHeadModel"),pAt.forEach(t),wTr=r(DIe," (XLNet model)"),DIe.forEach(t),Ce.forEach(t),ATr=i(yl),T(bM.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),uOe=i(f),dc=n(f,"H2",{class:!0});var CXe=s(dc);vM=n(CXe,"A",{id:!0,class:!0,href:!0});var uAt=s(vM);DFe=n(uAt,"SPAN",{});var _At=s(DFe);T(T8.$$.fragment,_At),_At.forEach(t),uAt.forEach(t),LTr=i(CXe),GFe=n(CXe,"SPAN",{});var bAt=s(GFe);yTr=r(bAt,"TFAutoModelForImageClassification"),bAt.forEach(t),CXe.forEach(t),_Oe=i(f),rr=n(f,"DIV",{class:!0});var xl=s(rr);T(M8.$$.fragment,xl),xTr=i(xl),cc=n(xl,"P",{});var rre=s(cc);$Tr=r(rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EU=n(rre,"A",{href:!0});var vAt=s(EU);kTr=r(vAt,"from_pretrained()"),vAt.forEach(t),STr=r(rre," class method or the "),CU=n(rre,"A",{href:!0});var FAt=s(CU);RTr=r(FAt,"from_config()"),FAt.forEach(t),PTr=r(rre,` class
method.`),rre.forEach(t),BTr=i(xl),E8=n(xl,"P",{});var wXe=s(E8);ITr=r(wXe,"This class cannot be instantiated directly using "),OFe=n(wXe,"CODE",{});var TAt=s(OFe);NTr=r(TAt,"__init__()"),TAt.forEach(t),qTr=r(wXe," (throws an error)."),wXe.forEach(t),jTr=i(xl),Rt=n(xl,"DIV",{class:!0});var EA=s(Rt);T(C8.$$.fragment,EA),DTr=i(EA),VFe=n(EA,"P",{});var MAt=s(VFe);GTr=r(MAt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),MAt.forEach(t),OTr=i(EA),fc=n(EA,"P",{});var tre=s(fc);VTr=r(tre,`Note:
Loading a model from its configuration file does `),XFe=n(tre,"STRONG",{});var EAt=s(XFe);XTr=r(EAt,"not"),EAt.forEach(t),zTr=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=n(tre,"A",{href:!0});var CAt=s(wU);WTr=r(CAt,"from_pretrained()"),CAt.forEach(t),QTr=r(tre," to load the model weights."),tre.forEach(t),HTr=i(EA),T(FM.$$.fragment,EA),EA.forEach(t),UTr=i(xl),$r=n(xl,"DIV",{class:!0});var $l=s($r);T(w8.$$.fragment,$l),JTr=i($l),zFe=n($l,"P",{});var wAt=s(zFe);YTr=r(wAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wAt.forEach(t),KTr=i($l),sn=n($l,"P",{});var CA=s(sn);ZTr=r(CA,"The model class to instantiate is selected based on the "),WFe=n(CA,"CODE",{});var AAt=s(WFe);e7r=r(AAt,"model_type"),AAt.forEach(t),o7r=r(CA,` property of the config object (either
passed as an argument or loaded from `),QFe=n(CA,"CODE",{});var LAt=s(QFe);r7r=r(LAt,"pretrained_model_name_or_path"),LAt.forEach(t),t7r=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=n(CA,"CODE",{});var yAt=s(HFe);a7r=r(yAt,"pretrained_model_name_or_path"),yAt.forEach(t),n7r=r(CA,":"),CA.forEach(t),s7r=i($l),ln=n($l,"UL",{});var wA=s(ln);TM=n(wA,"LI",{});var GIe=s(TM);UFe=n(GIe,"STRONG",{});var xAt=s(UFe);l7r=r(xAt,"convnext"),xAt.forEach(t),i7r=r(GIe," \u2014 "),AU=n(GIe,"A",{href:!0});var $At=s(AU);d7r=r($At,"TFConvNextForImageClassification"),$At.forEach(t),c7r=r(GIe," (ConvNeXT model)"),GIe.forEach(t),f7r=i(wA),MM=n(wA,"LI",{});var OIe=s(MM);JFe=n(OIe,"STRONG",{});var kAt=s(JFe);m7r=r(kAt,"data2vec-vision"),kAt.forEach(t),g7r=r(OIe," \u2014 "),LU=n(OIe,"A",{href:!0});var SAt=s(LU);h7r=r(SAt,"TFData2VecVisionForImageClassification"),SAt.forEach(t),p7r=r(OIe," (Data2VecVision model)"),OIe.forEach(t),u7r=i(wA),EM=n(wA,"LI",{});var VIe=s(EM);YFe=n(VIe,"STRONG",{});var RAt=s(YFe);_7r=r(RAt,"swin"),RAt.forEach(t),b7r=r(VIe," \u2014 "),yU=n(VIe,"A",{href:!0});var PAt=s(yU);v7r=r(PAt,"TFSwinForImageClassification"),PAt.forEach(t),F7r=r(VIe," (Swin Transformer model)"),VIe.forEach(t),T7r=i(wA),CM=n(wA,"LI",{});var XIe=s(CM);KFe=n(XIe,"STRONG",{});var BAt=s(KFe);M7r=r(BAt,"vit"),BAt.forEach(t),E7r=r(XIe," \u2014 "),xU=n(XIe,"A",{href:!0});var IAt=s(xU);C7r=r(IAt,"TFViTForImageClassification"),IAt.forEach(t),w7r=r(XIe," (ViT model)"),XIe.forEach(t),wA.forEach(t),A7r=i($l),T(wM.$$.fragment,$l),$l.forEach(t),xl.forEach(t),bOe=i(f),mc=n(f,"H2",{class:!0});var AXe=s(mc);AM=n(AXe,"A",{id:!0,class:!0,href:!0});var NAt=s(AM);ZFe=n(NAt,"SPAN",{});var qAt=s(ZFe);T(A8.$$.fragment,qAt),qAt.forEach(t),NAt.forEach(t),L7r=i(AXe),eTe=n(AXe,"SPAN",{});var jAt=s(eTe);y7r=r(jAt,"TFAutoModelForMaskedLM"),jAt.forEach(t),AXe.forEach(t),vOe=i(f),tr=n(f,"DIV",{class:!0});var kl=s(tr);T(L8.$$.fragment,kl),x7r=i(kl),gc=n(kl,"P",{});var are=s(gc);$7r=r(are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$U=n(are,"A",{href:!0});var DAt=s($U);k7r=r(DAt,"from_pretrained()"),DAt.forEach(t),S7r=r(are," class method or the "),kU=n(are,"A",{href:!0});var GAt=s(kU);R7r=r(GAt,"from_config()"),GAt.forEach(t),P7r=r(are,` class
method.`),are.forEach(t),B7r=i(kl),y8=n(kl,"P",{});var LXe=s(y8);I7r=r(LXe,"This class cannot be instantiated directly using "),oTe=n(LXe,"CODE",{});var OAt=s(oTe);N7r=r(OAt,"__init__()"),OAt.forEach(t),q7r=r(LXe," (throws an error)."),LXe.forEach(t),j7r=i(kl),Pt=n(kl,"DIV",{class:!0});var AA=s(Pt);T(x8.$$.fragment,AA),D7r=i(AA),rTe=n(AA,"P",{});var VAt=s(rTe);G7r=r(VAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),VAt.forEach(t),O7r=i(AA),hc=n(AA,"P",{});var nre=s(hc);V7r=r(nre,`Note:
Loading a model from its configuration file does `),tTe=n(nre,"STRONG",{});var XAt=s(tTe);X7r=r(XAt,"not"),XAt.forEach(t),z7r=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=n(nre,"A",{href:!0});var zAt=s(SU);W7r=r(zAt,"from_pretrained()"),zAt.forEach(t),Q7r=r(nre," to load the model weights."),nre.forEach(t),H7r=i(AA),T(LM.$$.fragment,AA),AA.forEach(t),U7r=i(kl),kr=n(kl,"DIV",{class:!0});var Sl=s(kr);T($8.$$.fragment,Sl),J7r=i(Sl),aTe=n(Sl,"P",{});var WAt=s(aTe);Y7r=r(WAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),WAt.forEach(t),K7r=i(Sl),dn=n(Sl,"P",{});var LA=s(dn);Z7r=r(LA,"The model class to instantiate is selected based on the "),nTe=n(LA,"CODE",{});var QAt=s(nTe);e9r=r(QAt,"model_type"),QAt.forEach(t),o9r=r(LA,` property of the config object (either
passed as an argument or loaded from `),sTe=n(LA,"CODE",{});var HAt=s(sTe);r9r=r(HAt,"pretrained_model_name_or_path"),HAt.forEach(t),t9r=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=n(LA,"CODE",{});var UAt=s(lTe);a9r=r(UAt,"pretrained_model_name_or_path"),UAt.forEach(t),n9r=r(LA,":"),LA.forEach(t),s9r=i(Sl),ie=n(Sl,"UL",{});var fe=s(ie);yM=n(fe,"LI",{});var zIe=s(yM);iTe=n(zIe,"STRONG",{});var JAt=s(iTe);l9r=r(JAt,"albert"),JAt.forEach(t),i9r=r(zIe," \u2014 "),RU=n(zIe,"A",{href:!0});var YAt=s(RU);d9r=r(YAt,"TFAlbertForMaskedLM"),YAt.forEach(t),c9r=r(zIe," (ALBERT model)"),zIe.forEach(t),f9r=i(fe),xM=n(fe,"LI",{});var WIe=s(xM);dTe=n(WIe,"STRONG",{});var KAt=s(dTe);m9r=r(KAt,"bert"),KAt.forEach(t),g9r=r(WIe," \u2014 "),PU=n(WIe,"A",{href:!0});var ZAt=s(PU);h9r=r(ZAt,"TFBertForMaskedLM"),ZAt.forEach(t),p9r=r(WIe," (BERT model)"),WIe.forEach(t),u9r=i(fe),$M=n(fe,"LI",{});var QIe=s($M);cTe=n(QIe,"STRONG",{});var e6t=s(cTe);_9r=r(e6t,"camembert"),e6t.forEach(t),b9r=r(QIe," \u2014 "),BU=n(QIe,"A",{href:!0});var o6t=s(BU);v9r=r(o6t,"TFCamembertForMaskedLM"),o6t.forEach(t),F9r=r(QIe," (CamemBERT model)"),QIe.forEach(t),T9r=i(fe),kM=n(fe,"LI",{});var HIe=s(kM);fTe=n(HIe,"STRONG",{});var r6t=s(fTe);M9r=r(r6t,"convbert"),r6t.forEach(t),E9r=r(HIe," \u2014 "),IU=n(HIe,"A",{href:!0});var t6t=s(IU);C9r=r(t6t,"TFConvBertForMaskedLM"),t6t.forEach(t),w9r=r(HIe," (ConvBERT model)"),HIe.forEach(t),A9r=i(fe),SM=n(fe,"LI",{});var UIe=s(SM);mTe=n(UIe,"STRONG",{});var a6t=s(mTe);L9r=r(a6t,"deberta"),a6t.forEach(t),y9r=r(UIe," \u2014 "),NU=n(UIe,"A",{href:!0});var n6t=s(NU);x9r=r(n6t,"TFDebertaForMaskedLM"),n6t.forEach(t),$9r=r(UIe," (DeBERTa model)"),UIe.forEach(t),k9r=i(fe),RM=n(fe,"LI",{});var JIe=s(RM);gTe=n(JIe,"STRONG",{});var s6t=s(gTe);S9r=r(s6t,"deberta-v2"),s6t.forEach(t),R9r=r(JIe," \u2014 "),qU=n(JIe,"A",{href:!0});var l6t=s(qU);P9r=r(l6t,"TFDebertaV2ForMaskedLM"),l6t.forEach(t),B9r=r(JIe," (DeBERTa-v2 model)"),JIe.forEach(t),I9r=i(fe),PM=n(fe,"LI",{});var YIe=s(PM);hTe=n(YIe,"STRONG",{});var i6t=s(hTe);N9r=r(i6t,"distilbert"),i6t.forEach(t),q9r=r(YIe," \u2014 "),jU=n(YIe,"A",{href:!0});var d6t=s(jU);j9r=r(d6t,"TFDistilBertForMaskedLM"),d6t.forEach(t),D9r=r(YIe," (DistilBERT model)"),YIe.forEach(t),G9r=i(fe),BM=n(fe,"LI",{});var KIe=s(BM);pTe=n(KIe,"STRONG",{});var c6t=s(pTe);O9r=r(c6t,"electra"),c6t.forEach(t),V9r=r(KIe," \u2014 "),DU=n(KIe,"A",{href:!0});var f6t=s(DU);X9r=r(f6t,"TFElectraForMaskedLM"),f6t.forEach(t),z9r=r(KIe," (ELECTRA model)"),KIe.forEach(t),W9r=i(fe),IM=n(fe,"LI",{});var ZIe=s(IM);uTe=n(ZIe,"STRONG",{});var m6t=s(uTe);Q9r=r(m6t,"flaubert"),m6t.forEach(t),H9r=r(ZIe," \u2014 "),GU=n(ZIe,"A",{href:!0});var g6t=s(GU);U9r=r(g6t,"TFFlaubertWithLMHeadModel"),g6t.forEach(t),J9r=r(ZIe," (FlauBERT model)"),ZIe.forEach(t),Y9r=i(fe),NM=n(fe,"LI",{});var eNe=s(NM);_Te=n(eNe,"STRONG",{});var h6t=s(_Te);K9r=r(h6t,"funnel"),h6t.forEach(t),Z9r=r(eNe," \u2014 "),OU=n(eNe,"A",{href:!0});var p6t=s(OU);eMr=r(p6t,"TFFunnelForMaskedLM"),p6t.forEach(t),oMr=r(eNe," (Funnel Transformer model)"),eNe.forEach(t),rMr=i(fe),qM=n(fe,"LI",{});var oNe=s(qM);bTe=n(oNe,"STRONG",{});var u6t=s(bTe);tMr=r(u6t,"layoutlm"),u6t.forEach(t),aMr=r(oNe," \u2014 "),VU=n(oNe,"A",{href:!0});var _6t=s(VU);nMr=r(_6t,"TFLayoutLMForMaskedLM"),_6t.forEach(t),sMr=r(oNe," (LayoutLM model)"),oNe.forEach(t),lMr=i(fe),jM=n(fe,"LI",{});var rNe=s(jM);vTe=n(rNe,"STRONG",{});var b6t=s(vTe);iMr=r(b6t,"longformer"),b6t.forEach(t),dMr=r(rNe," \u2014 "),XU=n(rNe,"A",{href:!0});var v6t=s(XU);cMr=r(v6t,"TFLongformerForMaskedLM"),v6t.forEach(t),fMr=r(rNe," (Longformer model)"),rNe.forEach(t),mMr=i(fe),DM=n(fe,"LI",{});var tNe=s(DM);FTe=n(tNe,"STRONG",{});var F6t=s(FTe);gMr=r(F6t,"mobilebert"),F6t.forEach(t),hMr=r(tNe," \u2014 "),zU=n(tNe,"A",{href:!0});var T6t=s(zU);pMr=r(T6t,"TFMobileBertForMaskedLM"),T6t.forEach(t),uMr=r(tNe," (MobileBERT model)"),tNe.forEach(t),_Mr=i(fe),GM=n(fe,"LI",{});var aNe=s(GM);TTe=n(aNe,"STRONG",{});var M6t=s(TTe);bMr=r(M6t,"mpnet"),M6t.forEach(t),vMr=r(aNe," \u2014 "),WU=n(aNe,"A",{href:!0});var E6t=s(WU);FMr=r(E6t,"TFMPNetForMaskedLM"),E6t.forEach(t),TMr=r(aNe," (MPNet model)"),aNe.forEach(t),MMr=i(fe),OM=n(fe,"LI",{});var nNe=s(OM);MTe=n(nNe,"STRONG",{});var C6t=s(MTe);EMr=r(C6t,"rembert"),C6t.forEach(t),CMr=r(nNe," \u2014 "),QU=n(nNe,"A",{href:!0});var w6t=s(QU);wMr=r(w6t,"TFRemBertForMaskedLM"),w6t.forEach(t),AMr=r(nNe," (RemBERT model)"),nNe.forEach(t),LMr=i(fe),VM=n(fe,"LI",{});var sNe=s(VM);ETe=n(sNe,"STRONG",{});var A6t=s(ETe);yMr=r(A6t,"roberta"),A6t.forEach(t),xMr=r(sNe," \u2014 "),HU=n(sNe,"A",{href:!0});var L6t=s(HU);$Mr=r(L6t,"TFRobertaForMaskedLM"),L6t.forEach(t),kMr=r(sNe," (RoBERTa model)"),sNe.forEach(t),SMr=i(fe),XM=n(fe,"LI",{});var lNe=s(XM);CTe=n(lNe,"STRONG",{});var y6t=s(CTe);RMr=r(y6t,"roformer"),y6t.forEach(t),PMr=r(lNe," \u2014 "),UU=n(lNe,"A",{href:!0});var x6t=s(UU);BMr=r(x6t,"TFRoFormerForMaskedLM"),x6t.forEach(t),IMr=r(lNe," (RoFormer model)"),lNe.forEach(t),NMr=i(fe),zM=n(fe,"LI",{});var iNe=s(zM);wTe=n(iNe,"STRONG",{});var $6t=s(wTe);qMr=r($6t,"tapas"),$6t.forEach(t),jMr=r(iNe," \u2014 "),JU=n(iNe,"A",{href:!0});var k6t=s(JU);DMr=r(k6t,"TFTapasForMaskedLM"),k6t.forEach(t),GMr=r(iNe," (TAPAS model)"),iNe.forEach(t),OMr=i(fe),WM=n(fe,"LI",{});var dNe=s(WM);ATe=n(dNe,"STRONG",{});var S6t=s(ATe);VMr=r(S6t,"xlm"),S6t.forEach(t),XMr=r(dNe," \u2014 "),YU=n(dNe,"A",{href:!0});var R6t=s(YU);zMr=r(R6t,"TFXLMWithLMHeadModel"),R6t.forEach(t),WMr=r(dNe," (XLM model)"),dNe.forEach(t),QMr=i(fe),QM=n(fe,"LI",{});var cNe=s(QM);LTe=n(cNe,"STRONG",{});var P6t=s(LTe);HMr=r(P6t,"xlm-roberta"),P6t.forEach(t),UMr=r(cNe," \u2014 "),KU=n(cNe,"A",{href:!0});var B6t=s(KU);JMr=r(B6t,"TFXLMRobertaForMaskedLM"),B6t.forEach(t),YMr=r(cNe," (XLM-RoBERTa model)"),cNe.forEach(t),fe.forEach(t),KMr=i(Sl),T(HM.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),FOe=i(f),pc=n(f,"H2",{class:!0});var yXe=s(pc);UM=n(yXe,"A",{id:!0,class:!0,href:!0});var I6t=s(UM);yTe=n(I6t,"SPAN",{});var N6t=s(yTe);T(k8.$$.fragment,N6t),N6t.forEach(t),I6t.forEach(t),ZMr=i(yXe),xTe=n(yXe,"SPAN",{});var q6t=s(xTe);e4r=r(q6t,"TFAutoModelForSeq2SeqLM"),q6t.forEach(t),yXe.forEach(t),TOe=i(f),ar=n(f,"DIV",{class:!0});var Rl=s(ar);T(S8.$$.fragment,Rl),o4r=i(Rl),uc=n(Rl,"P",{});var sre=s(uc);r4r=r(sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZU=n(sre,"A",{href:!0});var j6t=s(ZU);t4r=r(j6t,"from_pretrained()"),j6t.forEach(t),a4r=r(sre," class method or the "),eJ=n(sre,"A",{href:!0});var D6t=s(eJ);n4r=r(D6t,"from_config()"),D6t.forEach(t),s4r=r(sre,` class
method.`),sre.forEach(t),l4r=i(Rl),R8=n(Rl,"P",{});var xXe=s(R8);i4r=r(xXe,"This class cannot be instantiated directly using "),$Te=n(xXe,"CODE",{});var G6t=s($Te);d4r=r(G6t,"__init__()"),G6t.forEach(t),c4r=r(xXe," (throws an error)."),xXe.forEach(t),f4r=i(Rl),Bt=n(Rl,"DIV",{class:!0});var yA=s(Bt);T(P8.$$.fragment,yA),m4r=i(yA),kTe=n(yA,"P",{});var O6t=s(kTe);g4r=r(O6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),O6t.forEach(t),h4r=i(yA),_c=n(yA,"P",{});var lre=s(_c);p4r=r(lre,`Note:
Loading a model from its configuration file does `),STe=n(lre,"STRONG",{});var V6t=s(STe);u4r=r(V6t,"not"),V6t.forEach(t),_4r=r(lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=n(lre,"A",{href:!0});var X6t=s(oJ);b4r=r(X6t,"from_pretrained()"),X6t.forEach(t),v4r=r(lre," to load the model weights."),lre.forEach(t),F4r=i(yA),T(JM.$$.fragment,yA),yA.forEach(t),T4r=i(Rl),Sr=n(Rl,"DIV",{class:!0});var Pl=s(Sr);T(B8.$$.fragment,Pl),M4r=i(Pl),RTe=n(Pl,"P",{});var z6t=s(RTe);E4r=r(z6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),z6t.forEach(t),C4r=i(Pl),cn=n(Pl,"P",{});var xA=s(cn);w4r=r(xA,"The model class to instantiate is selected based on the "),PTe=n(xA,"CODE",{});var W6t=s(PTe);A4r=r(W6t,"model_type"),W6t.forEach(t),L4r=r(xA,` property of the config object (either
passed as an argument or loaded from `),BTe=n(xA,"CODE",{});var Q6t=s(BTe);y4r=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),x4r=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ITe=n(xA,"CODE",{});var H6t=s(ITe);$4r=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),k4r=r(xA,":"),xA.forEach(t),S4r=i(Pl),ye=n(Pl,"UL",{});var Ie=s(ye);YM=n(Ie,"LI",{});var fNe=s(YM);NTe=n(fNe,"STRONG",{});var U6t=s(NTe);R4r=r(U6t,"bart"),U6t.forEach(t),P4r=r(fNe," \u2014 "),rJ=n(fNe,"A",{href:!0});var J6t=s(rJ);B4r=r(J6t,"TFBartForConditionalGeneration"),J6t.forEach(t),I4r=r(fNe," (BART model)"),fNe.forEach(t),N4r=i(Ie),KM=n(Ie,"LI",{});var mNe=s(KM);qTe=n(mNe,"STRONG",{});var Y6t=s(qTe);q4r=r(Y6t,"blenderbot"),Y6t.forEach(t),j4r=r(mNe," \u2014 "),tJ=n(mNe,"A",{href:!0});var K6t=s(tJ);D4r=r(K6t,"TFBlenderbotForConditionalGeneration"),K6t.forEach(t),G4r=r(mNe," (Blenderbot model)"),mNe.forEach(t),O4r=i(Ie),ZM=n(Ie,"LI",{});var gNe=s(ZM);jTe=n(gNe,"STRONG",{});var Z6t=s(jTe);V4r=r(Z6t,"blenderbot-small"),Z6t.forEach(t),X4r=r(gNe," \u2014 "),aJ=n(gNe,"A",{href:!0});var eLt=s(aJ);z4r=r(eLt,"TFBlenderbotSmallForConditionalGeneration"),eLt.forEach(t),W4r=r(gNe," (BlenderbotSmall model)"),gNe.forEach(t),Q4r=i(Ie),e4=n(Ie,"LI",{});var hNe=s(e4);DTe=n(hNe,"STRONG",{});var oLt=s(DTe);H4r=r(oLt,"encoder-decoder"),oLt.forEach(t),U4r=r(hNe," \u2014 "),nJ=n(hNe,"A",{href:!0});var rLt=s(nJ);J4r=r(rLt,"TFEncoderDecoderModel"),rLt.forEach(t),Y4r=r(hNe," (Encoder decoder model)"),hNe.forEach(t),K4r=i(Ie),o4=n(Ie,"LI",{});var pNe=s(o4);GTe=n(pNe,"STRONG",{});var tLt=s(GTe);Z4r=r(tLt,"led"),tLt.forEach(t),eEr=r(pNe," \u2014 "),sJ=n(pNe,"A",{href:!0});var aLt=s(sJ);oEr=r(aLt,"TFLEDForConditionalGeneration"),aLt.forEach(t),rEr=r(pNe," (LED model)"),pNe.forEach(t),tEr=i(Ie),r4=n(Ie,"LI",{});var uNe=s(r4);OTe=n(uNe,"STRONG",{});var nLt=s(OTe);aEr=r(nLt,"marian"),nLt.forEach(t),nEr=r(uNe," \u2014 "),lJ=n(uNe,"A",{href:!0});var sLt=s(lJ);sEr=r(sLt,"TFMarianMTModel"),sLt.forEach(t),lEr=r(uNe," (Marian model)"),uNe.forEach(t),iEr=i(Ie),t4=n(Ie,"LI",{});var _Ne=s(t4);VTe=n(_Ne,"STRONG",{});var lLt=s(VTe);dEr=r(lLt,"mbart"),lLt.forEach(t),cEr=r(_Ne," \u2014 "),iJ=n(_Ne,"A",{href:!0});var iLt=s(iJ);fEr=r(iLt,"TFMBartForConditionalGeneration"),iLt.forEach(t),mEr=r(_Ne," (mBART model)"),_Ne.forEach(t),gEr=i(Ie),a4=n(Ie,"LI",{});var bNe=s(a4);XTe=n(bNe,"STRONG",{});var dLt=s(XTe);hEr=r(dLt,"mt5"),dLt.forEach(t),pEr=r(bNe," \u2014 "),dJ=n(bNe,"A",{href:!0});var cLt=s(dJ);uEr=r(cLt,"TFMT5ForConditionalGeneration"),cLt.forEach(t),_Er=r(bNe," (MT5 model)"),bNe.forEach(t),bEr=i(Ie),n4=n(Ie,"LI",{});var vNe=s(n4);zTe=n(vNe,"STRONG",{});var fLt=s(zTe);vEr=r(fLt,"pegasus"),fLt.forEach(t),FEr=r(vNe," \u2014 "),cJ=n(vNe,"A",{href:!0});var mLt=s(cJ);TEr=r(mLt,"TFPegasusForConditionalGeneration"),mLt.forEach(t),MEr=r(vNe," (Pegasus model)"),vNe.forEach(t),EEr=i(Ie),s4=n(Ie,"LI",{});var FNe=s(s4);WTe=n(FNe,"STRONG",{});var gLt=s(WTe);CEr=r(gLt,"t5"),gLt.forEach(t),wEr=r(FNe," \u2014 "),fJ=n(FNe,"A",{href:!0});var hLt=s(fJ);AEr=r(hLt,"TFT5ForConditionalGeneration"),hLt.forEach(t),LEr=r(FNe," (T5 model)"),FNe.forEach(t),Ie.forEach(t),yEr=i(Pl),T(l4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),MOe=i(f),bc=n(f,"H2",{class:!0});var $Xe=s(bc);i4=n($Xe,"A",{id:!0,class:!0,href:!0});var pLt=s(i4);QTe=n(pLt,"SPAN",{});var uLt=s(QTe);T(I8.$$.fragment,uLt),uLt.forEach(t),pLt.forEach(t),xEr=i($Xe),HTe=n($Xe,"SPAN",{});var _Lt=s(HTe);$Er=r(_Lt,"TFAutoModelForSequenceClassification"),_Lt.forEach(t),$Xe.forEach(t),EOe=i(f),nr=n(f,"DIV",{class:!0});var Bl=s(nr);T(N8.$$.fragment,Bl),kEr=i(Bl),vc=n(Bl,"P",{});var ire=s(vc);SEr=r(ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mJ=n(ire,"A",{href:!0});var bLt=s(mJ);REr=r(bLt,"from_pretrained()"),bLt.forEach(t),PEr=r(ire," class method or the "),gJ=n(ire,"A",{href:!0});var vLt=s(gJ);BEr=r(vLt,"from_config()"),vLt.forEach(t),IEr=r(ire,` class
method.`),ire.forEach(t),NEr=i(Bl),q8=n(Bl,"P",{});var kXe=s(q8);qEr=r(kXe,"This class cannot be instantiated directly using "),UTe=n(kXe,"CODE",{});var FLt=s(UTe);jEr=r(FLt,"__init__()"),FLt.forEach(t),DEr=r(kXe," (throws an error)."),kXe.forEach(t),GEr=i(Bl),It=n(Bl,"DIV",{class:!0});var $A=s(It);T(j8.$$.fragment,$A),OEr=i($A),JTe=n($A,"P",{});var TLt=s(JTe);VEr=r(TLt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),TLt.forEach(t),XEr=i($A),Fc=n($A,"P",{});var dre=s(Fc);zEr=r(dre,`Note:
Loading a model from its configuration file does `),YTe=n(dre,"STRONG",{});var MLt=s(YTe);WEr=r(MLt,"not"),MLt.forEach(t),QEr=r(dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(dre,"A",{href:!0});var ELt=s(hJ);HEr=r(ELt,"from_pretrained()"),ELt.forEach(t),UEr=r(dre," to load the model weights."),dre.forEach(t),JEr=i($A),T(d4.$$.fragment,$A),$A.forEach(t),YEr=i(Bl),Rr=n(Bl,"DIV",{class:!0});var Il=s(Rr);T(D8.$$.fragment,Il),KEr=i(Il),KTe=n(Il,"P",{});var CLt=s(KTe);ZEr=r(CLt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),CLt.forEach(t),eCr=i(Il),fn=n(Il,"P",{});var kA=s(fn);oCr=r(kA,"The model class to instantiate is selected based on the "),ZTe=n(kA,"CODE",{});var wLt=s(ZTe);rCr=r(wLt,"model_type"),wLt.forEach(t),tCr=r(kA,` property of the config object (either
passed as an argument or loaded from `),e7e=n(kA,"CODE",{});var ALt=s(e7e);aCr=r(ALt,"pretrained_model_name_or_path"),ALt.forEach(t),nCr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=n(kA,"CODE",{});var LLt=s(o7e);sCr=r(LLt,"pretrained_model_name_or_path"),LLt.forEach(t),lCr=r(kA,":"),kA.forEach(t),iCr=i(Il),te=n(Il,"UL",{});var ne=s(te);c4=n(ne,"LI",{});var TNe=s(c4);r7e=n(TNe,"STRONG",{});var yLt=s(r7e);dCr=r(yLt,"albert"),yLt.forEach(t),cCr=r(TNe," \u2014 "),pJ=n(TNe,"A",{href:!0});var xLt=s(pJ);fCr=r(xLt,"TFAlbertForSequenceClassification"),xLt.forEach(t),mCr=r(TNe," (ALBERT model)"),TNe.forEach(t),gCr=i(ne),f4=n(ne,"LI",{});var MNe=s(f4);t7e=n(MNe,"STRONG",{});var $Lt=s(t7e);hCr=r($Lt,"bert"),$Lt.forEach(t),pCr=r(MNe," \u2014 "),uJ=n(MNe,"A",{href:!0});var kLt=s(uJ);uCr=r(kLt,"TFBertForSequenceClassification"),kLt.forEach(t),_Cr=r(MNe," (BERT model)"),MNe.forEach(t),bCr=i(ne),m4=n(ne,"LI",{});var ENe=s(m4);a7e=n(ENe,"STRONG",{});var SLt=s(a7e);vCr=r(SLt,"camembert"),SLt.forEach(t),FCr=r(ENe," \u2014 "),_J=n(ENe,"A",{href:!0});var RLt=s(_J);TCr=r(RLt,"TFCamembertForSequenceClassification"),RLt.forEach(t),MCr=r(ENe," (CamemBERT model)"),ENe.forEach(t),ECr=i(ne),g4=n(ne,"LI",{});var CNe=s(g4);n7e=n(CNe,"STRONG",{});var PLt=s(n7e);CCr=r(PLt,"convbert"),PLt.forEach(t),wCr=r(CNe," \u2014 "),bJ=n(CNe,"A",{href:!0});var BLt=s(bJ);ACr=r(BLt,"TFConvBertForSequenceClassification"),BLt.forEach(t),LCr=r(CNe," (ConvBERT model)"),CNe.forEach(t),yCr=i(ne),h4=n(ne,"LI",{});var wNe=s(h4);s7e=n(wNe,"STRONG",{});var ILt=s(s7e);xCr=r(ILt,"ctrl"),ILt.forEach(t),$Cr=r(wNe," \u2014 "),vJ=n(wNe,"A",{href:!0});var NLt=s(vJ);kCr=r(NLt,"TFCTRLForSequenceClassification"),NLt.forEach(t),SCr=r(wNe," (CTRL model)"),wNe.forEach(t),RCr=i(ne),p4=n(ne,"LI",{});var ANe=s(p4);l7e=n(ANe,"STRONG",{});var qLt=s(l7e);PCr=r(qLt,"deberta"),qLt.forEach(t),BCr=r(ANe," \u2014 "),FJ=n(ANe,"A",{href:!0});var jLt=s(FJ);ICr=r(jLt,"TFDebertaForSequenceClassification"),jLt.forEach(t),NCr=r(ANe," (DeBERTa model)"),ANe.forEach(t),qCr=i(ne),u4=n(ne,"LI",{});var LNe=s(u4);i7e=n(LNe,"STRONG",{});var DLt=s(i7e);jCr=r(DLt,"deberta-v2"),DLt.forEach(t),DCr=r(LNe," \u2014 "),TJ=n(LNe,"A",{href:!0});var GLt=s(TJ);GCr=r(GLt,"TFDebertaV2ForSequenceClassification"),GLt.forEach(t),OCr=r(LNe," (DeBERTa-v2 model)"),LNe.forEach(t),VCr=i(ne),_4=n(ne,"LI",{});var yNe=s(_4);d7e=n(yNe,"STRONG",{});var OLt=s(d7e);XCr=r(OLt,"distilbert"),OLt.forEach(t),zCr=r(yNe," \u2014 "),MJ=n(yNe,"A",{href:!0});var VLt=s(MJ);WCr=r(VLt,"TFDistilBertForSequenceClassification"),VLt.forEach(t),QCr=r(yNe," (DistilBERT model)"),yNe.forEach(t),HCr=i(ne),b4=n(ne,"LI",{});var xNe=s(b4);c7e=n(xNe,"STRONG",{});var XLt=s(c7e);UCr=r(XLt,"electra"),XLt.forEach(t),JCr=r(xNe," \u2014 "),EJ=n(xNe,"A",{href:!0});var zLt=s(EJ);YCr=r(zLt,"TFElectraForSequenceClassification"),zLt.forEach(t),KCr=r(xNe," (ELECTRA model)"),xNe.forEach(t),ZCr=i(ne),v4=n(ne,"LI",{});var $Ne=s(v4);f7e=n($Ne,"STRONG",{});var WLt=s(f7e);e5r=r(WLt,"flaubert"),WLt.forEach(t),o5r=r($Ne," \u2014 "),CJ=n($Ne,"A",{href:!0});var QLt=s(CJ);r5r=r(QLt,"TFFlaubertForSequenceClassification"),QLt.forEach(t),t5r=r($Ne," (FlauBERT model)"),$Ne.forEach(t),a5r=i(ne),F4=n(ne,"LI",{});var kNe=s(F4);m7e=n(kNe,"STRONG",{});var HLt=s(m7e);n5r=r(HLt,"funnel"),HLt.forEach(t),s5r=r(kNe," \u2014 "),wJ=n(kNe,"A",{href:!0});var ULt=s(wJ);l5r=r(ULt,"TFFunnelForSequenceClassification"),ULt.forEach(t),i5r=r(kNe," (Funnel Transformer model)"),kNe.forEach(t),d5r=i(ne),T4=n(ne,"LI",{});var SNe=s(T4);g7e=n(SNe,"STRONG",{});var JLt=s(g7e);c5r=r(JLt,"gpt2"),JLt.forEach(t),f5r=r(SNe," \u2014 "),AJ=n(SNe,"A",{href:!0});var YLt=s(AJ);m5r=r(YLt,"TFGPT2ForSequenceClassification"),YLt.forEach(t),g5r=r(SNe," (OpenAI GPT-2 model)"),SNe.forEach(t),h5r=i(ne),M4=n(ne,"LI",{});var RNe=s(M4);h7e=n(RNe,"STRONG",{});var KLt=s(h7e);p5r=r(KLt,"gptj"),KLt.forEach(t),u5r=r(RNe," \u2014 "),LJ=n(RNe,"A",{href:!0});var ZLt=s(LJ);_5r=r(ZLt,"TFGPTJForSequenceClassification"),ZLt.forEach(t),b5r=r(RNe," (GPT-J model)"),RNe.forEach(t),v5r=i(ne),E4=n(ne,"LI",{});var PNe=s(E4);p7e=n(PNe,"STRONG",{});var eyt=s(p7e);F5r=r(eyt,"layoutlm"),eyt.forEach(t),T5r=r(PNe," \u2014 "),yJ=n(PNe,"A",{href:!0});var oyt=s(yJ);M5r=r(oyt,"TFLayoutLMForSequenceClassification"),oyt.forEach(t),E5r=r(PNe," (LayoutLM model)"),PNe.forEach(t),C5r=i(ne),C4=n(ne,"LI",{});var BNe=s(C4);u7e=n(BNe,"STRONG",{});var ryt=s(u7e);w5r=r(ryt,"longformer"),ryt.forEach(t),A5r=r(BNe," \u2014 "),xJ=n(BNe,"A",{href:!0});var tyt=s(xJ);L5r=r(tyt,"TFLongformerForSequenceClassification"),tyt.forEach(t),y5r=r(BNe," (Longformer model)"),BNe.forEach(t),x5r=i(ne),w4=n(ne,"LI",{});var INe=s(w4);_7e=n(INe,"STRONG",{});var ayt=s(_7e);$5r=r(ayt,"mobilebert"),ayt.forEach(t),k5r=r(INe," \u2014 "),$J=n(INe,"A",{href:!0});var nyt=s($J);S5r=r(nyt,"TFMobileBertForSequenceClassification"),nyt.forEach(t),R5r=r(INe," (MobileBERT model)"),INe.forEach(t),P5r=i(ne),A4=n(ne,"LI",{});var NNe=s(A4);b7e=n(NNe,"STRONG",{});var syt=s(b7e);B5r=r(syt,"mpnet"),syt.forEach(t),I5r=r(NNe," \u2014 "),kJ=n(NNe,"A",{href:!0});var lyt=s(kJ);N5r=r(lyt,"TFMPNetForSequenceClassification"),lyt.forEach(t),q5r=r(NNe," (MPNet model)"),NNe.forEach(t),j5r=i(ne),L4=n(ne,"LI",{});var qNe=s(L4);v7e=n(qNe,"STRONG",{});var iyt=s(v7e);D5r=r(iyt,"openai-gpt"),iyt.forEach(t),G5r=r(qNe," \u2014 "),SJ=n(qNe,"A",{href:!0});var dyt=s(SJ);O5r=r(dyt,"TFOpenAIGPTForSequenceClassification"),dyt.forEach(t),V5r=r(qNe," (OpenAI GPT model)"),qNe.forEach(t),X5r=i(ne),y4=n(ne,"LI",{});var jNe=s(y4);F7e=n(jNe,"STRONG",{});var cyt=s(F7e);z5r=r(cyt,"rembert"),cyt.forEach(t),W5r=r(jNe," \u2014 "),RJ=n(jNe,"A",{href:!0});var fyt=s(RJ);Q5r=r(fyt,"TFRemBertForSequenceClassification"),fyt.forEach(t),H5r=r(jNe," (RemBERT model)"),jNe.forEach(t),U5r=i(ne),x4=n(ne,"LI",{});var DNe=s(x4);T7e=n(DNe,"STRONG",{});var myt=s(T7e);J5r=r(myt,"roberta"),myt.forEach(t),Y5r=r(DNe," \u2014 "),PJ=n(DNe,"A",{href:!0});var gyt=s(PJ);K5r=r(gyt,"TFRobertaForSequenceClassification"),gyt.forEach(t),Z5r=r(DNe," (RoBERTa model)"),DNe.forEach(t),e3r=i(ne),$4=n(ne,"LI",{});var GNe=s($4);M7e=n(GNe,"STRONG",{});var hyt=s(M7e);o3r=r(hyt,"roformer"),hyt.forEach(t),r3r=r(GNe," \u2014 "),BJ=n(GNe,"A",{href:!0});var pyt=s(BJ);t3r=r(pyt,"TFRoFormerForSequenceClassification"),pyt.forEach(t),a3r=r(GNe," (RoFormer model)"),GNe.forEach(t),n3r=i(ne),k4=n(ne,"LI",{});var ONe=s(k4);E7e=n(ONe,"STRONG",{});var uyt=s(E7e);s3r=r(uyt,"tapas"),uyt.forEach(t),l3r=r(ONe," \u2014 "),IJ=n(ONe,"A",{href:!0});var _yt=s(IJ);i3r=r(_yt,"TFTapasForSequenceClassification"),_yt.forEach(t),d3r=r(ONe," (TAPAS model)"),ONe.forEach(t),c3r=i(ne),S4=n(ne,"LI",{});var VNe=s(S4);C7e=n(VNe,"STRONG",{});var byt=s(C7e);f3r=r(byt,"transfo-xl"),byt.forEach(t),m3r=r(VNe," \u2014 "),NJ=n(VNe,"A",{href:!0});var vyt=s(NJ);g3r=r(vyt,"TFTransfoXLForSequenceClassification"),vyt.forEach(t),h3r=r(VNe," (Transformer-XL model)"),VNe.forEach(t),p3r=i(ne),R4=n(ne,"LI",{});var XNe=s(R4);w7e=n(XNe,"STRONG",{});var Fyt=s(w7e);u3r=r(Fyt,"xlm"),Fyt.forEach(t),_3r=r(XNe," \u2014 "),qJ=n(XNe,"A",{href:!0});var Tyt=s(qJ);b3r=r(Tyt,"TFXLMForSequenceClassification"),Tyt.forEach(t),v3r=r(XNe," (XLM model)"),XNe.forEach(t),F3r=i(ne),P4=n(ne,"LI",{});var zNe=s(P4);A7e=n(zNe,"STRONG",{});var Myt=s(A7e);T3r=r(Myt,"xlm-roberta"),Myt.forEach(t),M3r=r(zNe," \u2014 "),jJ=n(zNe,"A",{href:!0});var Eyt=s(jJ);E3r=r(Eyt,"TFXLMRobertaForSequenceClassification"),Eyt.forEach(t),C3r=r(zNe," (XLM-RoBERTa model)"),zNe.forEach(t),w3r=i(ne),B4=n(ne,"LI",{});var WNe=s(B4);L7e=n(WNe,"STRONG",{});var Cyt=s(L7e);A3r=r(Cyt,"xlnet"),Cyt.forEach(t),L3r=r(WNe," \u2014 "),DJ=n(WNe,"A",{href:!0});var wyt=s(DJ);y3r=r(wyt,"TFXLNetForSequenceClassification"),wyt.forEach(t),x3r=r(WNe," (XLNet model)"),WNe.forEach(t),ne.forEach(t),$3r=i(Il),T(I4.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),COe=i(f),Tc=n(f,"H2",{class:!0});var SXe=s(Tc);N4=n(SXe,"A",{id:!0,class:!0,href:!0});var Ayt=s(N4);y7e=n(Ayt,"SPAN",{});var Lyt=s(y7e);T(G8.$$.fragment,Lyt),Lyt.forEach(t),Ayt.forEach(t),k3r=i(SXe),x7e=n(SXe,"SPAN",{});var yyt=s(x7e);S3r=r(yyt,"TFAutoModelForMultipleChoice"),yyt.forEach(t),SXe.forEach(t),wOe=i(f),sr=n(f,"DIV",{class:!0});var Nl=s(sr);T(O8.$$.fragment,Nl),R3r=i(Nl),Mc=n(Nl,"P",{});var cre=s(Mc);P3r=r(cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),GJ=n(cre,"A",{href:!0});var xyt=s(GJ);B3r=r(xyt,"from_pretrained()"),xyt.forEach(t),I3r=r(cre," class method or the "),OJ=n(cre,"A",{href:!0});var $yt=s(OJ);N3r=r($yt,"from_config()"),$yt.forEach(t),q3r=r(cre,` class
method.`),cre.forEach(t),j3r=i(Nl),V8=n(Nl,"P",{});var RXe=s(V8);D3r=r(RXe,"This class cannot be instantiated directly using "),$7e=n(RXe,"CODE",{});var kyt=s($7e);G3r=r(kyt,"__init__()"),kyt.forEach(t),O3r=r(RXe," (throws an error)."),RXe.forEach(t),V3r=i(Nl),Nt=n(Nl,"DIV",{class:!0});var SA=s(Nt);T(X8.$$.fragment,SA),X3r=i(SA),k7e=n(SA,"P",{});var Syt=s(k7e);z3r=r(Syt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Syt.forEach(t),W3r=i(SA),Ec=n(SA,"P",{});var fre=s(Ec);Q3r=r(fre,`Note:
Loading a model from its configuration file does `),S7e=n(fre,"STRONG",{});var Ryt=s(S7e);H3r=r(Ryt,"not"),Ryt.forEach(t),U3r=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(fre,"A",{href:!0});var Pyt=s(VJ);J3r=r(Pyt,"from_pretrained()"),Pyt.forEach(t),Y3r=r(fre," to load the model weights."),fre.forEach(t),K3r=i(SA),T(q4.$$.fragment,SA),SA.forEach(t),Z3r=i(Nl),Pr=n(Nl,"DIV",{class:!0});var ql=s(Pr);T(z8.$$.fragment,ql),ewr=i(ql),R7e=n(ql,"P",{});var Byt=s(R7e);owr=r(Byt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Byt.forEach(t),rwr=i(ql),mn=n(ql,"P",{});var RA=s(mn);twr=r(RA,"The model class to instantiate is selected based on the "),P7e=n(RA,"CODE",{});var Iyt=s(P7e);awr=r(Iyt,"model_type"),Iyt.forEach(t),nwr=r(RA,` property of the config object (either
passed as an argument or loaded from `),B7e=n(RA,"CODE",{});var Nyt=s(B7e);swr=r(Nyt,"pretrained_model_name_or_path"),Nyt.forEach(t),lwr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=n(RA,"CODE",{});var qyt=s(I7e);iwr=r(qyt,"pretrained_model_name_or_path"),qyt.forEach(t),dwr=r(RA,":"),RA.forEach(t),cwr=i(ql),ue=n(ql,"UL",{});var ve=s(ue);j4=n(ve,"LI",{});var QNe=s(j4);N7e=n(QNe,"STRONG",{});var jyt=s(N7e);fwr=r(jyt,"albert"),jyt.forEach(t),mwr=r(QNe," \u2014 "),XJ=n(QNe,"A",{href:!0});var Dyt=s(XJ);gwr=r(Dyt,"TFAlbertForMultipleChoice"),Dyt.forEach(t),hwr=r(QNe," (ALBERT model)"),QNe.forEach(t),pwr=i(ve),D4=n(ve,"LI",{});var HNe=s(D4);q7e=n(HNe,"STRONG",{});var Gyt=s(q7e);uwr=r(Gyt,"bert"),Gyt.forEach(t),_wr=r(HNe," \u2014 "),zJ=n(HNe,"A",{href:!0});var Oyt=s(zJ);bwr=r(Oyt,"TFBertForMultipleChoice"),Oyt.forEach(t),vwr=r(HNe," (BERT model)"),HNe.forEach(t),Fwr=i(ve),G4=n(ve,"LI",{});var UNe=s(G4);j7e=n(UNe,"STRONG",{});var Vyt=s(j7e);Twr=r(Vyt,"camembert"),Vyt.forEach(t),Mwr=r(UNe," \u2014 "),WJ=n(UNe,"A",{href:!0});var Xyt=s(WJ);Ewr=r(Xyt,"TFCamembertForMultipleChoice"),Xyt.forEach(t),Cwr=r(UNe," (CamemBERT model)"),UNe.forEach(t),wwr=i(ve),O4=n(ve,"LI",{});var JNe=s(O4);D7e=n(JNe,"STRONG",{});var zyt=s(D7e);Awr=r(zyt,"convbert"),zyt.forEach(t),Lwr=r(JNe," \u2014 "),QJ=n(JNe,"A",{href:!0});var Wyt=s(QJ);ywr=r(Wyt,"TFConvBertForMultipleChoice"),Wyt.forEach(t),xwr=r(JNe," (ConvBERT model)"),JNe.forEach(t),$wr=i(ve),V4=n(ve,"LI",{});var YNe=s(V4);G7e=n(YNe,"STRONG",{});var Qyt=s(G7e);kwr=r(Qyt,"distilbert"),Qyt.forEach(t),Swr=r(YNe," \u2014 "),HJ=n(YNe,"A",{href:!0});var Hyt=s(HJ);Rwr=r(Hyt,"TFDistilBertForMultipleChoice"),Hyt.forEach(t),Pwr=r(YNe," (DistilBERT model)"),YNe.forEach(t),Bwr=i(ve),X4=n(ve,"LI",{});var KNe=s(X4);O7e=n(KNe,"STRONG",{});var Uyt=s(O7e);Iwr=r(Uyt,"electra"),Uyt.forEach(t),Nwr=r(KNe," \u2014 "),UJ=n(KNe,"A",{href:!0});var Jyt=s(UJ);qwr=r(Jyt,"TFElectraForMultipleChoice"),Jyt.forEach(t),jwr=r(KNe," (ELECTRA model)"),KNe.forEach(t),Dwr=i(ve),z4=n(ve,"LI",{});var ZNe=s(z4);V7e=n(ZNe,"STRONG",{});var Yyt=s(V7e);Gwr=r(Yyt,"flaubert"),Yyt.forEach(t),Owr=r(ZNe," \u2014 "),JJ=n(ZNe,"A",{href:!0});var Kyt=s(JJ);Vwr=r(Kyt,"TFFlaubertForMultipleChoice"),Kyt.forEach(t),Xwr=r(ZNe," (FlauBERT model)"),ZNe.forEach(t),zwr=i(ve),W4=n(ve,"LI",{});var eqe=s(W4);X7e=n(eqe,"STRONG",{});var Zyt=s(X7e);Wwr=r(Zyt,"funnel"),Zyt.forEach(t),Qwr=r(eqe," \u2014 "),YJ=n(eqe,"A",{href:!0});var e8t=s(YJ);Hwr=r(e8t,"TFFunnelForMultipleChoice"),e8t.forEach(t),Uwr=r(eqe," (Funnel Transformer model)"),eqe.forEach(t),Jwr=i(ve),Q4=n(ve,"LI",{});var oqe=s(Q4);z7e=n(oqe,"STRONG",{});var o8t=s(z7e);Ywr=r(o8t,"longformer"),o8t.forEach(t),Kwr=r(oqe," \u2014 "),KJ=n(oqe,"A",{href:!0});var r8t=s(KJ);Zwr=r(r8t,"TFLongformerForMultipleChoice"),r8t.forEach(t),eAr=r(oqe," (Longformer model)"),oqe.forEach(t),oAr=i(ve),H4=n(ve,"LI",{});var rqe=s(H4);W7e=n(rqe,"STRONG",{});var t8t=s(W7e);rAr=r(t8t,"mobilebert"),t8t.forEach(t),tAr=r(rqe," \u2014 "),ZJ=n(rqe,"A",{href:!0});var a8t=s(ZJ);aAr=r(a8t,"TFMobileBertForMultipleChoice"),a8t.forEach(t),nAr=r(rqe," (MobileBERT model)"),rqe.forEach(t),sAr=i(ve),U4=n(ve,"LI",{});var tqe=s(U4);Q7e=n(tqe,"STRONG",{});var n8t=s(Q7e);lAr=r(n8t,"mpnet"),n8t.forEach(t),iAr=r(tqe," \u2014 "),eY=n(tqe,"A",{href:!0});var s8t=s(eY);dAr=r(s8t,"TFMPNetForMultipleChoice"),s8t.forEach(t),cAr=r(tqe," (MPNet model)"),tqe.forEach(t),fAr=i(ve),J4=n(ve,"LI",{});var aqe=s(J4);H7e=n(aqe,"STRONG",{});var l8t=s(H7e);mAr=r(l8t,"rembert"),l8t.forEach(t),gAr=r(aqe," \u2014 "),oY=n(aqe,"A",{href:!0});var i8t=s(oY);hAr=r(i8t,"TFRemBertForMultipleChoice"),i8t.forEach(t),pAr=r(aqe," (RemBERT model)"),aqe.forEach(t),uAr=i(ve),Y4=n(ve,"LI",{});var nqe=s(Y4);U7e=n(nqe,"STRONG",{});var d8t=s(U7e);_Ar=r(d8t,"roberta"),d8t.forEach(t),bAr=r(nqe," \u2014 "),rY=n(nqe,"A",{href:!0});var c8t=s(rY);vAr=r(c8t,"TFRobertaForMultipleChoice"),c8t.forEach(t),FAr=r(nqe," (RoBERTa model)"),nqe.forEach(t),TAr=i(ve),K4=n(ve,"LI",{});var sqe=s(K4);J7e=n(sqe,"STRONG",{});var f8t=s(J7e);MAr=r(f8t,"roformer"),f8t.forEach(t),EAr=r(sqe," \u2014 "),tY=n(sqe,"A",{href:!0});var m8t=s(tY);CAr=r(m8t,"TFRoFormerForMultipleChoice"),m8t.forEach(t),wAr=r(sqe," (RoFormer model)"),sqe.forEach(t),AAr=i(ve),Z4=n(ve,"LI",{});var lqe=s(Z4);Y7e=n(lqe,"STRONG",{});var g8t=s(Y7e);LAr=r(g8t,"xlm"),g8t.forEach(t),yAr=r(lqe," \u2014 "),aY=n(lqe,"A",{href:!0});var h8t=s(aY);xAr=r(h8t,"TFXLMForMultipleChoice"),h8t.forEach(t),$Ar=r(lqe," (XLM model)"),lqe.forEach(t),kAr=i(ve),eE=n(ve,"LI",{});var iqe=s(eE);K7e=n(iqe,"STRONG",{});var p8t=s(K7e);SAr=r(p8t,"xlm-roberta"),p8t.forEach(t),RAr=r(iqe," \u2014 "),nY=n(iqe,"A",{href:!0});var u8t=s(nY);PAr=r(u8t,"TFXLMRobertaForMultipleChoice"),u8t.forEach(t),BAr=r(iqe," (XLM-RoBERTa model)"),iqe.forEach(t),IAr=i(ve),oE=n(ve,"LI",{});var dqe=s(oE);Z7e=n(dqe,"STRONG",{});var _8t=s(Z7e);NAr=r(_8t,"xlnet"),_8t.forEach(t),qAr=r(dqe," \u2014 "),sY=n(dqe,"A",{href:!0});var b8t=s(sY);jAr=r(b8t,"TFXLNetForMultipleChoice"),b8t.forEach(t),DAr=r(dqe," (XLNet model)"),dqe.forEach(t),ve.forEach(t),GAr=i(ql),T(rE.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),AOe=i(f),Cc=n(f,"H2",{class:!0});var PXe=s(Cc);tE=n(PXe,"A",{id:!0,class:!0,href:!0});var v8t=s(tE);e9e=n(v8t,"SPAN",{});var F8t=s(e9e);T(W8.$$.fragment,F8t),F8t.forEach(t),v8t.forEach(t),OAr=i(PXe),o9e=n(PXe,"SPAN",{});var T8t=s(o9e);VAr=r(T8t,"TFAutoModelForNextSentencePrediction"),T8t.forEach(t),PXe.forEach(t),LOe=i(f),lr=n(f,"DIV",{class:!0});var jl=s(lr);T(Q8.$$.fragment,jl),XAr=i(jl),wc=n(jl,"P",{});var mre=s(wc);zAr=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),lY=n(mre,"A",{href:!0});var M8t=s(lY);WAr=r(M8t,"from_pretrained()"),M8t.forEach(t),QAr=r(mre," class method or the "),iY=n(mre,"A",{href:!0});var E8t=s(iY);HAr=r(E8t,"from_config()"),E8t.forEach(t),UAr=r(mre,` class
method.`),mre.forEach(t),JAr=i(jl),H8=n(jl,"P",{});var BXe=s(H8);YAr=r(BXe,"This class cannot be instantiated directly using "),r9e=n(BXe,"CODE",{});var C8t=s(r9e);KAr=r(C8t,"__init__()"),C8t.forEach(t),ZAr=r(BXe," (throws an error)."),BXe.forEach(t),e6r=i(jl),qt=n(jl,"DIV",{class:!0});var PA=s(qt);T(U8.$$.fragment,PA),o6r=i(PA),t9e=n(PA,"P",{});var w8t=s(t9e);r6r=r(w8t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),w8t.forEach(t),t6r=i(PA),Ac=n(PA,"P",{});var gre=s(Ac);a6r=r(gre,`Note:
Loading a model from its configuration file does `),a9e=n(gre,"STRONG",{});var A8t=s(a9e);n6r=r(A8t,"not"),A8t.forEach(t),s6r=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=n(gre,"A",{href:!0});var L8t=s(dY);l6r=r(L8t,"from_pretrained()"),L8t.forEach(t),i6r=r(gre," to load the model weights."),gre.forEach(t),d6r=i(PA),T(aE.$$.fragment,PA),PA.forEach(t),c6r=i(jl),Br=n(jl,"DIV",{class:!0});var Dl=s(Br);T(J8.$$.fragment,Dl),f6r=i(Dl),n9e=n(Dl,"P",{});var y8t=s(n9e);m6r=r(y8t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),y8t.forEach(t),g6r=i(Dl),gn=n(Dl,"P",{});var BA=s(gn);h6r=r(BA,"The model class to instantiate is selected based on the "),s9e=n(BA,"CODE",{});var x8t=s(s9e);p6r=r(x8t,"model_type"),x8t.forEach(t),u6r=r(BA,` property of the config object (either
passed as an argument or loaded from `),l9e=n(BA,"CODE",{});var $8t=s(l9e);_6r=r($8t,"pretrained_model_name_or_path"),$8t.forEach(t),b6r=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i9e=n(BA,"CODE",{});var k8t=s(i9e);v6r=r(k8t,"pretrained_model_name_or_path"),k8t.forEach(t),F6r=r(BA,":"),BA.forEach(t),T6r=i(Dl),Y8=n(Dl,"UL",{});var IXe=s(Y8);nE=n(IXe,"LI",{});var cqe=s(nE);d9e=n(cqe,"STRONG",{});var S8t=s(d9e);M6r=r(S8t,"bert"),S8t.forEach(t),E6r=r(cqe," \u2014 "),cY=n(cqe,"A",{href:!0});var R8t=s(cY);C6r=r(R8t,"TFBertForNextSentencePrediction"),R8t.forEach(t),w6r=r(cqe," (BERT model)"),cqe.forEach(t),A6r=i(IXe),sE=n(IXe,"LI",{});var fqe=s(sE);c9e=n(fqe,"STRONG",{});var P8t=s(c9e);L6r=r(P8t,"mobilebert"),P8t.forEach(t),y6r=r(fqe," \u2014 "),fY=n(fqe,"A",{href:!0});var B8t=s(fY);x6r=r(B8t,"TFMobileBertForNextSentencePrediction"),B8t.forEach(t),$6r=r(fqe," (MobileBERT model)"),fqe.forEach(t),IXe.forEach(t),k6r=i(Dl),T(lE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),yOe=i(f),Lc=n(f,"H2",{class:!0});var NXe=s(Lc);iE=n(NXe,"A",{id:!0,class:!0,href:!0});var I8t=s(iE);f9e=n(I8t,"SPAN",{});var N8t=s(f9e);T(K8.$$.fragment,N8t),N8t.forEach(t),I8t.forEach(t),S6r=i(NXe),m9e=n(NXe,"SPAN",{});var q8t=s(m9e);R6r=r(q8t,"TFAutoModelForTableQuestionAnswering"),q8t.forEach(t),NXe.forEach(t),xOe=i(f),ir=n(f,"DIV",{class:!0});var Gl=s(ir);T(Z8.$$.fragment,Gl),P6r=i(Gl),yc=n(Gl,"P",{});var hre=s(yc);B6r=r(hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),mY=n(hre,"A",{href:!0});var j8t=s(mY);I6r=r(j8t,"from_pretrained()"),j8t.forEach(t),N6r=r(hre," class method or the "),gY=n(hre,"A",{href:!0});var D8t=s(gY);q6r=r(D8t,"from_config()"),D8t.forEach(t),j6r=r(hre,` class
method.`),hre.forEach(t),D6r=i(Gl),ex=n(Gl,"P",{});var qXe=s(ex);G6r=r(qXe,"This class cannot be instantiated directly using "),g9e=n(qXe,"CODE",{});var G8t=s(g9e);O6r=r(G8t,"__init__()"),G8t.forEach(t),V6r=r(qXe," (throws an error)."),qXe.forEach(t),X6r=i(Gl),jt=n(Gl,"DIV",{class:!0});var IA=s(jt);T(ox.$$.fragment,IA),z6r=i(IA),h9e=n(IA,"P",{});var O8t=s(h9e);W6r=r(O8t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),O8t.forEach(t),Q6r=i(IA),xc=n(IA,"P",{});var pre=s(xc);H6r=r(pre,`Note:
Loading a model from its configuration file does `),p9e=n(pre,"STRONG",{});var V8t=s(p9e);U6r=r(V8t,"not"),V8t.forEach(t),J6r=r(pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=n(pre,"A",{href:!0});var X8t=s(hY);Y6r=r(X8t,"from_pretrained()"),X8t.forEach(t),K6r=r(pre," to load the model weights."),pre.forEach(t),Z6r=i(IA),T(dE.$$.fragment,IA),IA.forEach(t),eLr=i(Gl),Ir=n(Gl,"DIV",{class:!0});var Ol=s(Ir);T(rx.$$.fragment,Ol),oLr=i(Ol),u9e=n(Ol,"P",{});var z8t=s(u9e);rLr=r(z8t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),z8t.forEach(t),tLr=i(Ol),hn=n(Ol,"P",{});var NA=s(hn);aLr=r(NA,"The model class to instantiate is selected based on the "),_9e=n(NA,"CODE",{});var W8t=s(_9e);nLr=r(W8t,"model_type"),W8t.forEach(t),sLr=r(NA,` property of the config object (either
passed as an argument or loaded from `),b9e=n(NA,"CODE",{});var Q8t=s(b9e);lLr=r(Q8t,"pretrained_model_name_or_path"),Q8t.forEach(t),iLr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v9e=n(NA,"CODE",{});var H8t=s(v9e);dLr=r(H8t,"pretrained_model_name_or_path"),H8t.forEach(t),cLr=r(NA,":"),NA.forEach(t),fLr=i(Ol),F9e=n(Ol,"UL",{});var U8t=s(F9e);cE=n(U8t,"LI",{});var mqe=s(cE);T9e=n(mqe,"STRONG",{});var J8t=s(T9e);mLr=r(J8t,"tapas"),J8t.forEach(t),gLr=r(mqe," \u2014 "),pY=n(mqe,"A",{href:!0});var Y8t=s(pY);hLr=r(Y8t,"TFTapasForQuestionAnswering"),Y8t.forEach(t),pLr=r(mqe," (TAPAS model)"),mqe.forEach(t),U8t.forEach(t),uLr=i(Ol),T(fE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),$Oe=i(f),$c=n(f,"H2",{class:!0});var jXe=s($c);mE=n(jXe,"A",{id:!0,class:!0,href:!0});var K8t=s(mE);M9e=n(K8t,"SPAN",{});var Z8t=s(M9e);T(tx.$$.fragment,Z8t),Z8t.forEach(t),K8t.forEach(t),_Lr=i(jXe),E9e=n(jXe,"SPAN",{});var ext=s(E9e);bLr=r(ext,"TFAutoModelForTokenClassification"),ext.forEach(t),jXe.forEach(t),kOe=i(f),dr=n(f,"DIV",{class:!0});var Vl=s(dr);T(ax.$$.fragment,Vl),vLr=i(Vl),kc=n(Vl,"P",{});var ure=s(kc);FLr=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uY=n(ure,"A",{href:!0});var oxt=s(uY);TLr=r(oxt,"from_pretrained()"),oxt.forEach(t),MLr=r(ure," class method or the "),_Y=n(ure,"A",{href:!0});var rxt=s(_Y);ELr=r(rxt,"from_config()"),rxt.forEach(t),CLr=r(ure,` class
method.`),ure.forEach(t),wLr=i(Vl),nx=n(Vl,"P",{});var DXe=s(nx);ALr=r(DXe,"This class cannot be instantiated directly using "),C9e=n(DXe,"CODE",{});var txt=s(C9e);LLr=r(txt,"__init__()"),txt.forEach(t),yLr=r(DXe," (throws an error)."),DXe.forEach(t),xLr=i(Vl),Dt=n(Vl,"DIV",{class:!0});var qA=s(Dt);T(sx.$$.fragment,qA),$Lr=i(qA),w9e=n(qA,"P",{});var axt=s(w9e);kLr=r(axt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),axt.forEach(t),SLr=i(qA),Sc=n(qA,"P",{});var _re=s(Sc);RLr=r(_re,`Note:
Loading a model from its configuration file does `),A9e=n(_re,"STRONG",{});var nxt=s(A9e);PLr=r(nxt,"not"),nxt.forEach(t),BLr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=n(_re,"A",{href:!0});var sxt=s(bY);ILr=r(sxt,"from_pretrained()"),sxt.forEach(t),NLr=r(_re," to load the model weights."),_re.forEach(t),qLr=i(qA),T(gE.$$.fragment,qA),qA.forEach(t),jLr=i(Vl),Nr=n(Vl,"DIV",{class:!0});var Xl=s(Nr);T(lx.$$.fragment,Xl),DLr=i(Xl),L9e=n(Xl,"P",{});var lxt=s(L9e);GLr=r(lxt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lxt.forEach(t),OLr=i(Xl),pn=n(Xl,"P",{});var jA=s(pn);VLr=r(jA,"The model class to instantiate is selected based on the "),y9e=n(jA,"CODE",{});var ixt=s(y9e);XLr=r(ixt,"model_type"),ixt.forEach(t),zLr=r(jA,` property of the config object (either
passed as an argument or loaded from `),x9e=n(jA,"CODE",{});var dxt=s(x9e);WLr=r(dxt,"pretrained_model_name_or_path"),dxt.forEach(t),QLr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$9e=n(jA,"CODE",{});var cxt=s($9e);HLr=r(cxt,"pretrained_model_name_or_path"),cxt.forEach(t),ULr=r(jA,":"),jA.forEach(t),JLr=i(Xl),de=n(Xl,"UL",{});var me=s(de);hE=n(me,"LI",{});var gqe=s(hE);k9e=n(gqe,"STRONG",{});var fxt=s(k9e);YLr=r(fxt,"albert"),fxt.forEach(t),KLr=r(gqe," \u2014 "),vY=n(gqe,"A",{href:!0});var mxt=s(vY);ZLr=r(mxt,"TFAlbertForTokenClassification"),mxt.forEach(t),eyr=r(gqe," (ALBERT model)"),gqe.forEach(t),oyr=i(me),pE=n(me,"LI",{});var hqe=s(pE);S9e=n(hqe,"STRONG",{});var gxt=s(S9e);ryr=r(gxt,"bert"),gxt.forEach(t),tyr=r(hqe," \u2014 "),FY=n(hqe,"A",{href:!0});var hxt=s(FY);ayr=r(hxt,"TFBertForTokenClassification"),hxt.forEach(t),nyr=r(hqe," (BERT model)"),hqe.forEach(t),syr=i(me),uE=n(me,"LI",{});var pqe=s(uE);R9e=n(pqe,"STRONG",{});var pxt=s(R9e);lyr=r(pxt,"camembert"),pxt.forEach(t),iyr=r(pqe," \u2014 "),TY=n(pqe,"A",{href:!0});var uxt=s(TY);dyr=r(uxt,"TFCamembertForTokenClassification"),uxt.forEach(t),cyr=r(pqe," (CamemBERT model)"),pqe.forEach(t),fyr=i(me),_E=n(me,"LI",{});var uqe=s(_E);P9e=n(uqe,"STRONG",{});var _xt=s(P9e);myr=r(_xt,"convbert"),_xt.forEach(t),gyr=r(uqe," \u2014 "),MY=n(uqe,"A",{href:!0});var bxt=s(MY);hyr=r(bxt,"TFConvBertForTokenClassification"),bxt.forEach(t),pyr=r(uqe," (ConvBERT model)"),uqe.forEach(t),uyr=i(me),bE=n(me,"LI",{});var _qe=s(bE);B9e=n(_qe,"STRONG",{});var vxt=s(B9e);_yr=r(vxt,"deberta"),vxt.forEach(t),byr=r(_qe," \u2014 "),EY=n(_qe,"A",{href:!0});var Fxt=s(EY);vyr=r(Fxt,"TFDebertaForTokenClassification"),Fxt.forEach(t),Fyr=r(_qe," (DeBERTa model)"),_qe.forEach(t),Tyr=i(me),vE=n(me,"LI",{});var bqe=s(vE);I9e=n(bqe,"STRONG",{});var Txt=s(I9e);Myr=r(Txt,"deberta-v2"),Txt.forEach(t),Eyr=r(bqe," \u2014 "),CY=n(bqe,"A",{href:!0});var Mxt=s(CY);Cyr=r(Mxt,"TFDebertaV2ForTokenClassification"),Mxt.forEach(t),wyr=r(bqe," (DeBERTa-v2 model)"),bqe.forEach(t),Ayr=i(me),FE=n(me,"LI",{});var vqe=s(FE);N9e=n(vqe,"STRONG",{});var Ext=s(N9e);Lyr=r(Ext,"distilbert"),Ext.forEach(t),yyr=r(vqe," \u2014 "),wY=n(vqe,"A",{href:!0});var Cxt=s(wY);xyr=r(Cxt,"TFDistilBertForTokenClassification"),Cxt.forEach(t),$yr=r(vqe," (DistilBERT model)"),vqe.forEach(t),kyr=i(me),TE=n(me,"LI",{});var Fqe=s(TE);q9e=n(Fqe,"STRONG",{});var wxt=s(q9e);Syr=r(wxt,"electra"),wxt.forEach(t),Ryr=r(Fqe," \u2014 "),AY=n(Fqe,"A",{href:!0});var Axt=s(AY);Pyr=r(Axt,"TFElectraForTokenClassification"),Axt.forEach(t),Byr=r(Fqe," (ELECTRA model)"),Fqe.forEach(t),Iyr=i(me),ME=n(me,"LI",{});var Tqe=s(ME);j9e=n(Tqe,"STRONG",{});var Lxt=s(j9e);Nyr=r(Lxt,"flaubert"),Lxt.forEach(t),qyr=r(Tqe," \u2014 "),LY=n(Tqe,"A",{href:!0});var yxt=s(LY);jyr=r(yxt,"TFFlaubertForTokenClassification"),yxt.forEach(t),Dyr=r(Tqe," (FlauBERT model)"),Tqe.forEach(t),Gyr=i(me),EE=n(me,"LI",{});var Mqe=s(EE);D9e=n(Mqe,"STRONG",{});var xxt=s(D9e);Oyr=r(xxt,"funnel"),xxt.forEach(t),Vyr=r(Mqe," \u2014 "),yY=n(Mqe,"A",{href:!0});var $xt=s(yY);Xyr=r($xt,"TFFunnelForTokenClassification"),$xt.forEach(t),zyr=r(Mqe," (Funnel Transformer model)"),Mqe.forEach(t),Wyr=i(me),CE=n(me,"LI",{});var Eqe=s(CE);G9e=n(Eqe,"STRONG",{});var kxt=s(G9e);Qyr=r(kxt,"layoutlm"),kxt.forEach(t),Hyr=r(Eqe," \u2014 "),xY=n(Eqe,"A",{href:!0});var Sxt=s(xY);Uyr=r(Sxt,"TFLayoutLMForTokenClassification"),Sxt.forEach(t),Jyr=r(Eqe," (LayoutLM model)"),Eqe.forEach(t),Yyr=i(me),wE=n(me,"LI",{});var Cqe=s(wE);O9e=n(Cqe,"STRONG",{});var Rxt=s(O9e);Kyr=r(Rxt,"longformer"),Rxt.forEach(t),Zyr=r(Cqe," \u2014 "),$Y=n(Cqe,"A",{href:!0});var Pxt=s($Y);e8r=r(Pxt,"TFLongformerForTokenClassification"),Pxt.forEach(t),o8r=r(Cqe," (Longformer model)"),Cqe.forEach(t),r8r=i(me),AE=n(me,"LI",{});var wqe=s(AE);V9e=n(wqe,"STRONG",{});var Bxt=s(V9e);t8r=r(Bxt,"mobilebert"),Bxt.forEach(t),a8r=r(wqe," \u2014 "),kY=n(wqe,"A",{href:!0});var Ixt=s(kY);n8r=r(Ixt,"TFMobileBertForTokenClassification"),Ixt.forEach(t),s8r=r(wqe," (MobileBERT model)"),wqe.forEach(t),l8r=i(me),LE=n(me,"LI",{});var Aqe=s(LE);X9e=n(Aqe,"STRONG",{});var Nxt=s(X9e);i8r=r(Nxt,"mpnet"),Nxt.forEach(t),d8r=r(Aqe," \u2014 "),SY=n(Aqe,"A",{href:!0});var qxt=s(SY);c8r=r(qxt,"TFMPNetForTokenClassification"),qxt.forEach(t),f8r=r(Aqe," (MPNet model)"),Aqe.forEach(t),m8r=i(me),yE=n(me,"LI",{});var Lqe=s(yE);z9e=n(Lqe,"STRONG",{});var jxt=s(z9e);g8r=r(jxt,"rembert"),jxt.forEach(t),h8r=r(Lqe," \u2014 "),RY=n(Lqe,"A",{href:!0});var Dxt=s(RY);p8r=r(Dxt,"TFRemBertForTokenClassification"),Dxt.forEach(t),u8r=r(Lqe," (RemBERT model)"),Lqe.forEach(t),_8r=i(me),xE=n(me,"LI",{});var yqe=s(xE);W9e=n(yqe,"STRONG",{});var Gxt=s(W9e);b8r=r(Gxt,"roberta"),Gxt.forEach(t),v8r=r(yqe," \u2014 "),PY=n(yqe,"A",{href:!0});var Oxt=s(PY);F8r=r(Oxt,"TFRobertaForTokenClassification"),Oxt.forEach(t),T8r=r(yqe," (RoBERTa model)"),yqe.forEach(t),M8r=i(me),$E=n(me,"LI",{});var xqe=s($E);Q9e=n(xqe,"STRONG",{});var Vxt=s(Q9e);E8r=r(Vxt,"roformer"),Vxt.forEach(t),C8r=r(xqe," \u2014 "),BY=n(xqe,"A",{href:!0});var Xxt=s(BY);w8r=r(Xxt,"TFRoFormerForTokenClassification"),Xxt.forEach(t),A8r=r(xqe," (RoFormer model)"),xqe.forEach(t),L8r=i(me),kE=n(me,"LI",{});var $qe=s(kE);H9e=n($qe,"STRONG",{});var zxt=s(H9e);y8r=r(zxt,"xlm"),zxt.forEach(t),x8r=r($qe," \u2014 "),IY=n($qe,"A",{href:!0});var Wxt=s(IY);$8r=r(Wxt,"TFXLMForTokenClassification"),Wxt.forEach(t),k8r=r($qe," (XLM model)"),$qe.forEach(t),S8r=i(me),SE=n(me,"LI",{});var kqe=s(SE);U9e=n(kqe,"STRONG",{});var Qxt=s(U9e);R8r=r(Qxt,"xlm-roberta"),Qxt.forEach(t),P8r=r(kqe," \u2014 "),NY=n(kqe,"A",{href:!0});var Hxt=s(NY);B8r=r(Hxt,"TFXLMRobertaForTokenClassification"),Hxt.forEach(t),I8r=r(kqe," (XLM-RoBERTa model)"),kqe.forEach(t),N8r=i(me),RE=n(me,"LI",{});var Sqe=s(RE);J9e=n(Sqe,"STRONG",{});var Uxt=s(J9e);q8r=r(Uxt,"xlnet"),Uxt.forEach(t),j8r=r(Sqe," \u2014 "),qY=n(Sqe,"A",{href:!0});var Jxt=s(qY);D8r=r(Jxt,"TFXLNetForTokenClassification"),Jxt.forEach(t),G8r=r(Sqe," (XLNet model)"),Sqe.forEach(t),me.forEach(t),O8r=i(Xl),T(PE.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),SOe=i(f),Rc=n(f,"H2",{class:!0});var GXe=s(Rc);BE=n(GXe,"A",{id:!0,class:!0,href:!0});var Yxt=s(BE);Y9e=n(Yxt,"SPAN",{});var Kxt=s(Y9e);T(ix.$$.fragment,Kxt),Kxt.forEach(t),Yxt.forEach(t),V8r=i(GXe),K9e=n(GXe,"SPAN",{});var Zxt=s(K9e);X8r=r(Zxt,"TFAutoModelForQuestionAnswering"),Zxt.forEach(t),GXe.forEach(t),ROe=i(f),cr=n(f,"DIV",{class:!0});var zl=s(cr);T(dx.$$.fragment,zl),z8r=i(zl),Pc=n(zl,"P",{});var bre=s(Pc);W8r=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jY=n(bre,"A",{href:!0});var e$t=s(jY);Q8r=r(e$t,"from_pretrained()"),e$t.forEach(t),H8r=r(bre," class method or the "),DY=n(bre,"A",{href:!0});var o$t=s(DY);U8r=r(o$t,"from_config()"),o$t.forEach(t),J8r=r(bre,` class
method.`),bre.forEach(t),Y8r=i(zl),cx=n(zl,"P",{});var OXe=s(cx);K8r=r(OXe,"This class cannot be instantiated directly using "),Z9e=n(OXe,"CODE",{});var r$t=s(Z9e);Z8r=r(r$t,"__init__()"),r$t.forEach(t),exr=r(OXe," (throws an error)."),OXe.forEach(t),oxr=i(zl),Gt=n(zl,"DIV",{class:!0});var DA=s(Gt);T(fx.$$.fragment,DA),rxr=i(DA),eMe=n(DA,"P",{});var t$t=s(eMe);txr=r(t$t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),t$t.forEach(t),axr=i(DA),Bc=n(DA,"P",{});var vre=s(Bc);nxr=r(vre,`Note:
Loading a model from its configuration file does `),oMe=n(vre,"STRONG",{});var a$t=s(oMe);sxr=r(a$t,"not"),a$t.forEach(t),lxr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=n(vre,"A",{href:!0});var n$t=s(GY);ixr=r(n$t,"from_pretrained()"),n$t.forEach(t),dxr=r(vre," to load the model weights."),vre.forEach(t),cxr=i(DA),T(IE.$$.fragment,DA),DA.forEach(t),fxr=i(zl),qr=n(zl,"DIV",{class:!0});var Wl=s(qr);T(mx.$$.fragment,Wl),mxr=i(Wl),rMe=n(Wl,"P",{});var s$t=s(rMe);gxr=r(s$t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),s$t.forEach(t),hxr=i(Wl),un=n(Wl,"P",{});var GA=s(un);pxr=r(GA,"The model class to instantiate is selected based on the "),tMe=n(GA,"CODE",{});var l$t=s(tMe);uxr=r(l$t,"model_type"),l$t.forEach(t),_xr=r(GA,` property of the config object (either
passed as an argument or loaded from `),aMe=n(GA,"CODE",{});var i$t=s(aMe);bxr=r(i$t,"pretrained_model_name_or_path"),i$t.forEach(t),vxr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=n(GA,"CODE",{});var d$t=s(nMe);Fxr=r(d$t,"pretrained_model_name_or_path"),d$t.forEach(t),Txr=r(GA,":"),GA.forEach(t),Mxr=i(Wl),ce=n(Wl,"UL",{});var ge=s(ce);NE=n(ge,"LI",{});var Rqe=s(NE);sMe=n(Rqe,"STRONG",{});var c$t=s(sMe);Exr=r(c$t,"albert"),c$t.forEach(t),Cxr=r(Rqe," \u2014 "),OY=n(Rqe,"A",{href:!0});var f$t=s(OY);wxr=r(f$t,"TFAlbertForQuestionAnswering"),f$t.forEach(t),Axr=r(Rqe," (ALBERT model)"),Rqe.forEach(t),Lxr=i(ge),qE=n(ge,"LI",{});var Pqe=s(qE);lMe=n(Pqe,"STRONG",{});var m$t=s(lMe);yxr=r(m$t,"bert"),m$t.forEach(t),xxr=r(Pqe," \u2014 "),VY=n(Pqe,"A",{href:!0});var g$t=s(VY);$xr=r(g$t,"TFBertForQuestionAnswering"),g$t.forEach(t),kxr=r(Pqe," (BERT model)"),Pqe.forEach(t),Sxr=i(ge),jE=n(ge,"LI",{});var Bqe=s(jE);iMe=n(Bqe,"STRONG",{});var h$t=s(iMe);Rxr=r(h$t,"camembert"),h$t.forEach(t),Pxr=r(Bqe," \u2014 "),XY=n(Bqe,"A",{href:!0});var p$t=s(XY);Bxr=r(p$t,"TFCamembertForQuestionAnswering"),p$t.forEach(t),Ixr=r(Bqe," (CamemBERT model)"),Bqe.forEach(t),Nxr=i(ge),DE=n(ge,"LI",{});var Iqe=s(DE);dMe=n(Iqe,"STRONG",{});var u$t=s(dMe);qxr=r(u$t,"convbert"),u$t.forEach(t),jxr=r(Iqe," \u2014 "),zY=n(Iqe,"A",{href:!0});var _$t=s(zY);Dxr=r(_$t,"TFConvBertForQuestionAnswering"),_$t.forEach(t),Gxr=r(Iqe," (ConvBERT model)"),Iqe.forEach(t),Oxr=i(ge),GE=n(ge,"LI",{});var Nqe=s(GE);cMe=n(Nqe,"STRONG",{});var b$t=s(cMe);Vxr=r(b$t,"deberta"),b$t.forEach(t),Xxr=r(Nqe," \u2014 "),WY=n(Nqe,"A",{href:!0});var v$t=s(WY);zxr=r(v$t,"TFDebertaForQuestionAnswering"),v$t.forEach(t),Wxr=r(Nqe," (DeBERTa model)"),Nqe.forEach(t),Qxr=i(ge),OE=n(ge,"LI",{});var qqe=s(OE);fMe=n(qqe,"STRONG",{});var F$t=s(fMe);Hxr=r(F$t,"deberta-v2"),F$t.forEach(t),Uxr=r(qqe," \u2014 "),QY=n(qqe,"A",{href:!0});var T$t=s(QY);Jxr=r(T$t,"TFDebertaV2ForQuestionAnswering"),T$t.forEach(t),Yxr=r(qqe," (DeBERTa-v2 model)"),qqe.forEach(t),Kxr=i(ge),VE=n(ge,"LI",{});var jqe=s(VE);mMe=n(jqe,"STRONG",{});var M$t=s(mMe);Zxr=r(M$t,"distilbert"),M$t.forEach(t),e$r=r(jqe," \u2014 "),HY=n(jqe,"A",{href:!0});var E$t=s(HY);o$r=r(E$t,"TFDistilBertForQuestionAnswering"),E$t.forEach(t),r$r=r(jqe," (DistilBERT model)"),jqe.forEach(t),t$r=i(ge),XE=n(ge,"LI",{});var Dqe=s(XE);gMe=n(Dqe,"STRONG",{});var C$t=s(gMe);a$r=r(C$t,"electra"),C$t.forEach(t),n$r=r(Dqe," \u2014 "),UY=n(Dqe,"A",{href:!0});var w$t=s(UY);s$r=r(w$t,"TFElectraForQuestionAnswering"),w$t.forEach(t),l$r=r(Dqe," (ELECTRA model)"),Dqe.forEach(t),i$r=i(ge),zE=n(ge,"LI",{});var Gqe=s(zE);hMe=n(Gqe,"STRONG",{});var A$t=s(hMe);d$r=r(A$t,"flaubert"),A$t.forEach(t),c$r=r(Gqe," \u2014 "),JY=n(Gqe,"A",{href:!0});var L$t=s(JY);f$r=r(L$t,"TFFlaubertForQuestionAnsweringSimple"),L$t.forEach(t),m$r=r(Gqe," (FlauBERT model)"),Gqe.forEach(t),g$r=i(ge),WE=n(ge,"LI",{});var Oqe=s(WE);pMe=n(Oqe,"STRONG",{});var y$t=s(pMe);h$r=r(y$t,"funnel"),y$t.forEach(t),p$r=r(Oqe," \u2014 "),YY=n(Oqe,"A",{href:!0});var x$t=s(YY);u$r=r(x$t,"TFFunnelForQuestionAnswering"),x$t.forEach(t),_$r=r(Oqe," (Funnel Transformer model)"),Oqe.forEach(t),b$r=i(ge),QE=n(ge,"LI",{});var Vqe=s(QE);uMe=n(Vqe,"STRONG",{});var $$t=s(uMe);v$r=r($$t,"gptj"),$$t.forEach(t),F$r=r(Vqe," \u2014 "),KY=n(Vqe,"A",{href:!0});var k$t=s(KY);T$r=r(k$t,"TFGPTJForQuestionAnswering"),k$t.forEach(t),M$r=r(Vqe," (GPT-J model)"),Vqe.forEach(t),E$r=i(ge),HE=n(ge,"LI",{});var Xqe=s(HE);_Me=n(Xqe,"STRONG",{});var S$t=s(_Me);C$r=r(S$t,"longformer"),S$t.forEach(t),w$r=r(Xqe," \u2014 "),ZY=n(Xqe,"A",{href:!0});var R$t=s(ZY);A$r=r(R$t,"TFLongformerForQuestionAnswering"),R$t.forEach(t),L$r=r(Xqe," (Longformer model)"),Xqe.forEach(t),y$r=i(ge),UE=n(ge,"LI",{});var zqe=s(UE);bMe=n(zqe,"STRONG",{});var P$t=s(bMe);x$r=r(P$t,"mobilebert"),P$t.forEach(t),$$r=r(zqe," \u2014 "),eK=n(zqe,"A",{href:!0});var B$t=s(eK);k$r=r(B$t,"TFMobileBertForQuestionAnswering"),B$t.forEach(t),S$r=r(zqe," (MobileBERT model)"),zqe.forEach(t),R$r=i(ge),JE=n(ge,"LI",{});var Wqe=s(JE);vMe=n(Wqe,"STRONG",{});var I$t=s(vMe);P$r=r(I$t,"mpnet"),I$t.forEach(t),B$r=r(Wqe," \u2014 "),oK=n(Wqe,"A",{href:!0});var N$t=s(oK);I$r=r(N$t,"TFMPNetForQuestionAnswering"),N$t.forEach(t),N$r=r(Wqe," (MPNet model)"),Wqe.forEach(t),q$r=i(ge),YE=n(ge,"LI",{});var Qqe=s(YE);FMe=n(Qqe,"STRONG",{});var q$t=s(FMe);j$r=r(q$t,"rembert"),q$t.forEach(t),D$r=r(Qqe," \u2014 "),rK=n(Qqe,"A",{href:!0});var j$t=s(rK);G$r=r(j$t,"TFRemBertForQuestionAnswering"),j$t.forEach(t),O$r=r(Qqe," (RemBERT model)"),Qqe.forEach(t),V$r=i(ge),KE=n(ge,"LI",{});var Hqe=s(KE);TMe=n(Hqe,"STRONG",{});var D$t=s(TMe);X$r=r(D$t,"roberta"),D$t.forEach(t),z$r=r(Hqe," \u2014 "),tK=n(Hqe,"A",{href:!0});var G$t=s(tK);W$r=r(G$t,"TFRobertaForQuestionAnswering"),G$t.forEach(t),Q$r=r(Hqe," (RoBERTa model)"),Hqe.forEach(t),H$r=i(ge),ZE=n(ge,"LI",{});var Uqe=s(ZE);MMe=n(Uqe,"STRONG",{});var O$t=s(MMe);U$r=r(O$t,"roformer"),O$t.forEach(t),J$r=r(Uqe," \u2014 "),aK=n(Uqe,"A",{href:!0});var V$t=s(aK);Y$r=r(V$t,"TFRoFormerForQuestionAnswering"),V$t.forEach(t),K$r=r(Uqe," (RoFormer model)"),Uqe.forEach(t),Z$r=i(ge),eC=n(ge,"LI",{});var Jqe=s(eC);EMe=n(Jqe,"STRONG",{});var X$t=s(EMe);ekr=r(X$t,"xlm"),X$t.forEach(t),okr=r(Jqe," \u2014 "),nK=n(Jqe,"A",{href:!0});var z$t=s(nK);rkr=r(z$t,"TFXLMForQuestionAnsweringSimple"),z$t.forEach(t),tkr=r(Jqe," (XLM model)"),Jqe.forEach(t),akr=i(ge),oC=n(ge,"LI",{});var Yqe=s(oC);CMe=n(Yqe,"STRONG",{});var W$t=s(CMe);nkr=r(W$t,"xlm-roberta"),W$t.forEach(t),skr=r(Yqe," \u2014 "),sK=n(Yqe,"A",{href:!0});var Q$t=s(sK);lkr=r(Q$t,"TFXLMRobertaForQuestionAnswering"),Q$t.forEach(t),ikr=r(Yqe," (XLM-RoBERTa model)"),Yqe.forEach(t),dkr=i(ge),rC=n(ge,"LI",{});var Kqe=s(rC);wMe=n(Kqe,"STRONG",{});var H$t=s(wMe);ckr=r(H$t,"xlnet"),H$t.forEach(t),fkr=r(Kqe," \u2014 "),lK=n(Kqe,"A",{href:!0});var U$t=s(lK);mkr=r(U$t,"TFXLNetForQuestionAnsweringSimple"),U$t.forEach(t),gkr=r(Kqe," (XLNet model)"),Kqe.forEach(t),ge.forEach(t),hkr=i(Wl),T(tC.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),POe=i(f),Ic=n(f,"H2",{class:!0});var VXe=s(Ic);aC=n(VXe,"A",{id:!0,class:!0,href:!0});var J$t=s(aC);AMe=n(J$t,"SPAN",{});var Y$t=s(AMe);T(gx.$$.fragment,Y$t),Y$t.forEach(t),J$t.forEach(t),pkr=i(VXe),LMe=n(VXe,"SPAN",{});var K$t=s(LMe);ukr=r(K$t,"TFAutoModelForVision2Seq"),K$t.forEach(t),VXe.forEach(t),BOe=i(f),fr=n(f,"DIV",{class:!0});var Ql=s(fr);T(hx.$$.fragment,Ql),_kr=i(Ql),Nc=n(Ql,"P",{});var Fre=s(Nc);bkr=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iK=n(Fre,"A",{href:!0});var Z$t=s(iK);vkr=r(Z$t,"from_pretrained()"),Z$t.forEach(t),Fkr=r(Fre," class method or the "),dK=n(Fre,"A",{href:!0});var ekt=s(dK);Tkr=r(ekt,"from_config()"),ekt.forEach(t),Mkr=r(Fre,` class
method.`),Fre.forEach(t),Ekr=i(Ql),px=n(Ql,"P",{});var XXe=s(px);Ckr=r(XXe,"This class cannot be instantiated directly using "),yMe=n(XXe,"CODE",{});var okt=s(yMe);wkr=r(okt,"__init__()"),okt.forEach(t),Akr=r(XXe," (throws an error)."),XXe.forEach(t),Lkr=i(Ql),Ot=n(Ql,"DIV",{class:!0});var OA=s(Ot);T(ux.$$.fragment,OA),ykr=i(OA),xMe=n(OA,"P",{});var rkt=s(xMe);xkr=r(rkt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rkt.forEach(t),$kr=i(OA),qc=n(OA,"P",{});var Tre=s(qc);kkr=r(Tre,`Note:
Loading a model from its configuration file does `),$Me=n(Tre,"STRONG",{});var tkt=s($Me);Skr=r(tkt,"not"),tkt.forEach(t),Rkr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=n(Tre,"A",{href:!0});var akt=s(cK);Pkr=r(akt,"from_pretrained()"),akt.forEach(t),Bkr=r(Tre," to load the model weights."),Tre.forEach(t),Ikr=i(OA),T(nC.$$.fragment,OA),OA.forEach(t),Nkr=i(Ql),jr=n(Ql,"DIV",{class:!0});var Hl=s(jr);T(_x.$$.fragment,Hl),qkr=i(Hl),kMe=n(Hl,"P",{});var nkt=s(kMe);jkr=r(nkt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),nkt.forEach(t),Dkr=i(Hl),_n=n(Hl,"P",{});var VA=s(_n);Gkr=r(VA,"The model class to instantiate is selected based on the "),SMe=n(VA,"CODE",{});var skt=s(SMe);Okr=r(skt,"model_type"),skt.forEach(t),Vkr=r(VA,` property of the config object (either
passed as an argument or loaded from `),RMe=n(VA,"CODE",{});var lkt=s(RMe);Xkr=r(lkt,"pretrained_model_name_or_path"),lkt.forEach(t),zkr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=n(VA,"CODE",{});var ikt=s(PMe);Wkr=r(ikt,"pretrained_model_name_or_path"),ikt.forEach(t),Qkr=r(VA,":"),VA.forEach(t),Hkr=i(Hl),BMe=n(Hl,"UL",{});var dkt=s(BMe);sC=n(dkt,"LI",{});var Zqe=s(sC);IMe=n(Zqe,"STRONG",{});var ckt=s(IMe);Ukr=r(ckt,"vision-encoder-decoder"),ckt.forEach(t),Jkr=r(Zqe," \u2014 "),fK=n(Zqe,"A",{href:!0});var fkt=s(fK);Ykr=r(fkt,"TFVisionEncoderDecoderModel"),fkt.forEach(t),Kkr=r(Zqe," (Vision Encoder decoder model)"),Zqe.forEach(t),dkt.forEach(t),Zkr=i(Hl),T(lC.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),IOe=i(f),jc=n(f,"H2",{class:!0});var zXe=s(jc);iC=n(zXe,"A",{id:!0,class:!0,href:!0});var mkt=s(iC);NMe=n(mkt,"SPAN",{});var gkt=s(NMe);T(bx.$$.fragment,gkt),gkt.forEach(t),mkt.forEach(t),eSr=i(zXe),qMe=n(zXe,"SPAN",{});var hkt=s(qMe);oSr=r(hkt,"TFAutoModelForSpeechSeq2Seq"),hkt.forEach(t),zXe.forEach(t),NOe=i(f),mr=n(f,"DIV",{class:!0});var Ul=s(mr);T(vx.$$.fragment,Ul),rSr=i(Ul),Dc=n(Ul,"P",{});var Mre=s(Dc);tSr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),mK=n(Mre,"A",{href:!0});var pkt=s(mK);aSr=r(pkt,"from_pretrained()"),pkt.forEach(t),nSr=r(Mre," class method or the "),gK=n(Mre,"A",{href:!0});var ukt=s(gK);sSr=r(ukt,"from_config()"),ukt.forEach(t),lSr=r(Mre,` class
method.`),Mre.forEach(t),iSr=i(Ul),Fx=n(Ul,"P",{});var WXe=s(Fx);dSr=r(WXe,"This class cannot be instantiated directly using "),jMe=n(WXe,"CODE",{});var _kt=s(jMe);cSr=r(_kt,"__init__()"),_kt.forEach(t),fSr=r(WXe," (throws an error)."),WXe.forEach(t),mSr=i(Ul),Vt=n(Ul,"DIV",{class:!0});var XA=s(Vt);T(Tx.$$.fragment,XA),gSr=i(XA),DMe=n(XA,"P",{});var bkt=s(DMe);hSr=r(bkt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bkt.forEach(t),pSr=i(XA),Gc=n(XA,"P",{});var Ere=s(Gc);uSr=r(Ere,`Note:
Loading a model from its configuration file does `),GMe=n(Ere,"STRONG",{});var vkt=s(GMe);_Sr=r(vkt,"not"),vkt.forEach(t),bSr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(Ere,"A",{href:!0});var Fkt=s(hK);vSr=r(Fkt,"from_pretrained()"),Fkt.forEach(t),FSr=r(Ere," to load the model weights."),Ere.forEach(t),TSr=i(XA),T(dC.$$.fragment,XA),XA.forEach(t),MSr=i(Ul),Dr=n(Ul,"DIV",{class:!0});var Jl=s(Dr);T(Mx.$$.fragment,Jl),ESr=i(Jl),OMe=n(Jl,"P",{});var Tkt=s(OMe);CSr=r(Tkt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Tkt.forEach(t),wSr=i(Jl),bn=n(Jl,"P",{});var zA=s(bn);ASr=r(zA,"The model class to instantiate is selected based on the "),VMe=n(zA,"CODE",{});var Mkt=s(VMe);LSr=r(Mkt,"model_type"),Mkt.forEach(t),ySr=r(zA,` property of the config object (either
passed as an argument or loaded from `),XMe=n(zA,"CODE",{});var Ekt=s(XMe);xSr=r(Ekt,"pretrained_model_name_or_path"),Ekt.forEach(t),$Sr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=n(zA,"CODE",{});var Ckt=s(zMe);kSr=r(Ckt,"pretrained_model_name_or_path"),Ckt.forEach(t),SSr=r(zA,":"),zA.forEach(t),RSr=i(Jl),WMe=n(Jl,"UL",{});var wkt=s(WMe);cC=n(wkt,"LI",{});var eje=s(cC);QMe=n(eje,"STRONG",{});var Akt=s(QMe);PSr=r(Akt,"speech_to_text"),Akt.forEach(t),BSr=r(eje," \u2014 "),pK=n(eje,"A",{href:!0});var Lkt=s(pK);ISr=r(Lkt,"TFSpeech2TextForConditionalGeneration"),Lkt.forEach(t),NSr=r(eje," (Speech2Text model)"),eje.forEach(t),wkt.forEach(t),qSr=i(Jl),T(fC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),qOe=i(f),Oc=n(f,"H2",{class:!0});var QXe=s(Oc);mC=n(QXe,"A",{id:!0,class:!0,href:!0});var ykt=s(mC);HMe=n(ykt,"SPAN",{});var xkt=s(HMe);T(Ex.$$.fragment,xkt),xkt.forEach(t),ykt.forEach(t),jSr=i(QXe),UMe=n(QXe,"SPAN",{});var $kt=s(UMe);DSr=r($kt,"FlaxAutoModel"),$kt.forEach(t),QXe.forEach(t),jOe=i(f),gr=n(f,"DIV",{class:!0});var Yl=s(gr);T(Cx.$$.fragment,Yl),GSr=i(Yl),Vc=n(Yl,"P",{});var Cre=s(Vc);OSr=r(Cre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uK=n(Cre,"A",{href:!0});var kkt=s(uK);VSr=r(kkt,"from_pretrained()"),kkt.forEach(t),XSr=r(Cre," class method or the "),_K=n(Cre,"A",{href:!0});var Skt=s(_K);zSr=r(Skt,"from_config()"),Skt.forEach(t),WSr=r(Cre,` class
method.`),Cre.forEach(t),QSr=i(Yl),wx=n(Yl,"P",{});var HXe=s(wx);HSr=r(HXe,"This class cannot be instantiated directly using "),JMe=n(HXe,"CODE",{});var Rkt=s(JMe);USr=r(Rkt,"__init__()"),Rkt.forEach(t),JSr=r(HXe," (throws an error)."),HXe.forEach(t),YSr=i(Yl),Xt=n(Yl,"DIV",{class:!0});var WA=s(Xt);T(Ax.$$.fragment,WA),KSr=i(WA),YMe=n(WA,"P",{});var Pkt=s(YMe);ZSr=r(Pkt,"Instantiates one of the base model classes of the library from a configuration."),Pkt.forEach(t),eRr=i(WA),Xc=n(WA,"P",{});var wre=s(Xc);oRr=r(wre,`Note:
Loading a model from its configuration file does `),KMe=n(wre,"STRONG",{});var Bkt=s(KMe);rRr=r(Bkt,"not"),Bkt.forEach(t),tRr=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=n(wre,"A",{href:!0});var Ikt=s(bK);aRr=r(Ikt,"from_pretrained()"),Ikt.forEach(t),nRr=r(wre," to load the model weights."),wre.forEach(t),sRr=i(WA),T(gC.$$.fragment,WA),WA.forEach(t),lRr=i(Yl),Gr=n(Yl,"DIV",{class:!0});var Kl=s(Gr);T(Lx.$$.fragment,Kl),iRr=i(Kl),ZMe=n(Kl,"P",{});var Nkt=s(ZMe);dRr=r(Nkt,"Instantiate one of the base model classes of the library from a pretrained model."),Nkt.forEach(t),cRr=i(Kl),vn=n(Kl,"P",{});var QA=s(vn);fRr=r(QA,"The model class to instantiate is selected based on the "),e4e=n(QA,"CODE",{});var qkt=s(e4e);mRr=r(qkt,"model_type"),qkt.forEach(t),gRr=r(QA,` property of the config object (either
passed as an argument or loaded from `),o4e=n(QA,"CODE",{});var jkt=s(o4e);hRr=r(jkt,"pretrained_model_name_or_path"),jkt.forEach(t),pRr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=n(QA,"CODE",{});var Dkt=s(r4e);uRr=r(Dkt,"pretrained_model_name_or_path"),Dkt.forEach(t),_Rr=r(QA,":"),QA.forEach(t),bRr=i(Kl),oe=n(Kl,"UL",{});var ae=s(oe);hC=n(ae,"LI",{});var oje=s(hC);t4e=n(oje,"STRONG",{});var Gkt=s(t4e);vRr=r(Gkt,"albert"),Gkt.forEach(t),FRr=r(oje," \u2014 "),vK=n(oje,"A",{href:!0});var Okt=s(vK);TRr=r(Okt,"FlaxAlbertModel"),Okt.forEach(t),MRr=r(oje," (ALBERT model)"),oje.forEach(t),ERr=i(ae),pC=n(ae,"LI",{});var rje=s(pC);a4e=n(rje,"STRONG",{});var Vkt=s(a4e);CRr=r(Vkt,"bart"),Vkt.forEach(t),wRr=r(rje," \u2014 "),FK=n(rje,"A",{href:!0});var Xkt=s(FK);ARr=r(Xkt,"FlaxBartModel"),Xkt.forEach(t),LRr=r(rje," (BART model)"),rje.forEach(t),yRr=i(ae),uC=n(ae,"LI",{});var tje=s(uC);n4e=n(tje,"STRONG",{});var zkt=s(n4e);xRr=r(zkt,"beit"),zkt.forEach(t),$Rr=r(tje," \u2014 "),TK=n(tje,"A",{href:!0});var Wkt=s(TK);kRr=r(Wkt,"FlaxBeitModel"),Wkt.forEach(t),SRr=r(tje," (BEiT model)"),tje.forEach(t),RRr=i(ae),_C=n(ae,"LI",{});var aje=s(_C);s4e=n(aje,"STRONG",{});var Qkt=s(s4e);PRr=r(Qkt,"bert"),Qkt.forEach(t),BRr=r(aje," \u2014 "),MK=n(aje,"A",{href:!0});var Hkt=s(MK);IRr=r(Hkt,"FlaxBertModel"),Hkt.forEach(t),NRr=r(aje," (BERT model)"),aje.forEach(t),qRr=i(ae),bC=n(ae,"LI",{});var nje=s(bC);l4e=n(nje,"STRONG",{});var Ukt=s(l4e);jRr=r(Ukt,"big_bird"),Ukt.forEach(t),DRr=r(nje," \u2014 "),EK=n(nje,"A",{href:!0});var Jkt=s(EK);GRr=r(Jkt,"FlaxBigBirdModel"),Jkt.forEach(t),ORr=r(nje," (BigBird model)"),nje.forEach(t),VRr=i(ae),vC=n(ae,"LI",{});var sje=s(vC);i4e=n(sje,"STRONG",{});var Ykt=s(i4e);XRr=r(Ykt,"blenderbot"),Ykt.forEach(t),zRr=r(sje," \u2014 "),CK=n(sje,"A",{href:!0});var Kkt=s(CK);WRr=r(Kkt,"FlaxBlenderbotModel"),Kkt.forEach(t),QRr=r(sje," (Blenderbot model)"),sje.forEach(t),HRr=i(ae),FC=n(ae,"LI",{});var lje=s(FC);d4e=n(lje,"STRONG",{});var Zkt=s(d4e);URr=r(Zkt,"blenderbot-small"),Zkt.forEach(t),JRr=r(lje," \u2014 "),wK=n(lje,"A",{href:!0});var eSt=s(wK);YRr=r(eSt,"FlaxBlenderbotSmallModel"),eSt.forEach(t),KRr=r(lje," (BlenderbotSmall model)"),lje.forEach(t),ZRr=i(ae),TC=n(ae,"LI",{});var ije=s(TC);c4e=n(ije,"STRONG",{});var oSt=s(c4e);ePr=r(oSt,"clip"),oSt.forEach(t),oPr=r(ije," \u2014 "),AK=n(ije,"A",{href:!0});var rSt=s(AK);rPr=r(rSt,"FlaxCLIPModel"),rSt.forEach(t),tPr=r(ije," (CLIP model)"),ije.forEach(t),aPr=i(ae),MC=n(ae,"LI",{});var dje=s(MC);f4e=n(dje,"STRONG",{});var tSt=s(f4e);nPr=r(tSt,"distilbert"),tSt.forEach(t),sPr=r(dje," \u2014 "),LK=n(dje,"A",{href:!0});var aSt=s(LK);lPr=r(aSt,"FlaxDistilBertModel"),aSt.forEach(t),iPr=r(dje," (DistilBERT model)"),dje.forEach(t),dPr=i(ae),EC=n(ae,"LI",{});var cje=s(EC);m4e=n(cje,"STRONG",{});var nSt=s(m4e);cPr=r(nSt,"electra"),nSt.forEach(t),fPr=r(cje," \u2014 "),yK=n(cje,"A",{href:!0});var sSt=s(yK);mPr=r(sSt,"FlaxElectraModel"),sSt.forEach(t),gPr=r(cje," (ELECTRA model)"),cje.forEach(t),hPr=i(ae),CC=n(ae,"LI",{});var fje=s(CC);g4e=n(fje,"STRONG",{});var lSt=s(g4e);pPr=r(lSt,"gpt2"),lSt.forEach(t),uPr=r(fje," \u2014 "),xK=n(fje,"A",{href:!0});var iSt=s(xK);_Pr=r(iSt,"FlaxGPT2Model"),iSt.forEach(t),bPr=r(fje," (OpenAI GPT-2 model)"),fje.forEach(t),vPr=i(ae),wC=n(ae,"LI",{});var mje=s(wC);h4e=n(mje,"STRONG",{});var dSt=s(h4e);FPr=r(dSt,"gpt_neo"),dSt.forEach(t),TPr=r(mje," \u2014 "),$K=n(mje,"A",{href:!0});var cSt=s($K);MPr=r(cSt,"FlaxGPTNeoModel"),cSt.forEach(t),EPr=r(mje," (GPT Neo model)"),mje.forEach(t),CPr=i(ae),AC=n(ae,"LI",{});var gje=s(AC);p4e=n(gje,"STRONG",{});var fSt=s(p4e);wPr=r(fSt,"gptj"),fSt.forEach(t),APr=r(gje," \u2014 "),kK=n(gje,"A",{href:!0});var mSt=s(kK);LPr=r(mSt,"FlaxGPTJModel"),mSt.forEach(t),yPr=r(gje," (GPT-J model)"),gje.forEach(t),xPr=i(ae),LC=n(ae,"LI",{});var hje=s(LC);u4e=n(hje,"STRONG",{});var gSt=s(u4e);$Pr=r(gSt,"longt5"),gSt.forEach(t),kPr=r(hje," \u2014 "),SK=n(hje,"A",{href:!0});var hSt=s(SK);SPr=r(hSt,"FlaxLongT5Model"),hSt.forEach(t),RPr=r(hje," (LongT5 model)"),hje.forEach(t),PPr=i(ae),yC=n(ae,"LI",{});var pje=s(yC);_4e=n(pje,"STRONG",{});var pSt=s(_4e);BPr=r(pSt,"marian"),pSt.forEach(t),IPr=r(pje," \u2014 "),RK=n(pje,"A",{href:!0});var uSt=s(RK);NPr=r(uSt,"FlaxMarianModel"),uSt.forEach(t),qPr=r(pje," (Marian model)"),pje.forEach(t),jPr=i(ae),xC=n(ae,"LI",{});var uje=s(xC);b4e=n(uje,"STRONG",{});var _St=s(b4e);DPr=r(_St,"mbart"),_St.forEach(t),GPr=r(uje," \u2014 "),PK=n(uje,"A",{href:!0});var bSt=s(PK);OPr=r(bSt,"FlaxMBartModel"),bSt.forEach(t),VPr=r(uje," (mBART model)"),uje.forEach(t),XPr=i(ae),$C=n(ae,"LI",{});var _je=s($C);v4e=n(_je,"STRONG",{});var vSt=s(v4e);zPr=r(vSt,"mt5"),vSt.forEach(t),WPr=r(_je," \u2014 "),BK=n(_je,"A",{href:!0});var FSt=s(BK);QPr=r(FSt,"FlaxMT5Model"),FSt.forEach(t),HPr=r(_je," (MT5 model)"),_je.forEach(t),UPr=i(ae),kC=n(ae,"LI",{});var bje=s(kC);F4e=n(bje,"STRONG",{});var TSt=s(F4e);JPr=r(TSt,"opt"),TSt.forEach(t),YPr=r(bje," \u2014 "),IK=n(bje,"A",{href:!0});var MSt=s(IK);KPr=r(MSt,"FlaxOPTModel"),MSt.forEach(t),ZPr=r(bje," (OPT model)"),bje.forEach(t),eBr=i(ae),SC=n(ae,"LI",{});var vje=s(SC);T4e=n(vje,"STRONG",{});var ESt=s(T4e);oBr=r(ESt,"pegasus"),ESt.forEach(t),rBr=r(vje," \u2014 "),NK=n(vje,"A",{href:!0});var CSt=s(NK);tBr=r(CSt,"FlaxPegasusModel"),CSt.forEach(t),aBr=r(vje," (Pegasus model)"),vje.forEach(t),nBr=i(ae),RC=n(ae,"LI",{});var Fje=s(RC);M4e=n(Fje,"STRONG",{});var wSt=s(M4e);sBr=r(wSt,"roberta"),wSt.forEach(t),lBr=r(Fje," \u2014 "),qK=n(Fje,"A",{href:!0});var ASt=s(qK);iBr=r(ASt,"FlaxRobertaModel"),ASt.forEach(t),dBr=r(Fje," (RoBERTa model)"),Fje.forEach(t),cBr=i(ae),PC=n(ae,"LI",{});var Tje=s(PC);E4e=n(Tje,"STRONG",{});var LSt=s(E4e);fBr=r(LSt,"roformer"),LSt.forEach(t),mBr=r(Tje," \u2014 "),jK=n(Tje,"A",{href:!0});var ySt=s(jK);gBr=r(ySt,"FlaxRoFormerModel"),ySt.forEach(t),hBr=r(Tje," (RoFormer model)"),Tje.forEach(t),pBr=i(ae),BC=n(ae,"LI",{});var Mje=s(BC);C4e=n(Mje,"STRONG",{});var xSt=s(C4e);uBr=r(xSt,"t5"),xSt.forEach(t),_Br=r(Mje," \u2014 "),DK=n(Mje,"A",{href:!0});var $St=s(DK);bBr=r($St,"FlaxT5Model"),$St.forEach(t),vBr=r(Mje," (T5 model)"),Mje.forEach(t),FBr=i(ae),IC=n(ae,"LI",{});var Eje=s(IC);w4e=n(Eje,"STRONG",{});var kSt=s(w4e);TBr=r(kSt,"vision-text-dual-encoder"),kSt.forEach(t),MBr=r(Eje," \u2014 "),GK=n(Eje,"A",{href:!0});var SSt=s(GK);EBr=r(SSt,"FlaxVisionTextDualEncoderModel"),SSt.forEach(t),CBr=r(Eje," (VisionTextDualEncoder model)"),Eje.forEach(t),wBr=i(ae),NC=n(ae,"LI",{});var Cje=s(NC);A4e=n(Cje,"STRONG",{});var RSt=s(A4e);ABr=r(RSt,"vit"),RSt.forEach(t),LBr=r(Cje," \u2014 "),OK=n(Cje,"A",{href:!0});var PSt=s(OK);yBr=r(PSt,"FlaxViTModel"),PSt.forEach(t),xBr=r(Cje," (ViT model)"),Cje.forEach(t),$Br=i(ae),qC=n(ae,"LI",{});var wje=s(qC);L4e=n(wje,"STRONG",{});var BSt=s(L4e);kBr=r(BSt,"wav2vec2"),BSt.forEach(t),SBr=r(wje," \u2014 "),VK=n(wje,"A",{href:!0});var ISt=s(VK);RBr=r(ISt,"FlaxWav2Vec2Model"),ISt.forEach(t),PBr=r(wje," (Wav2Vec2 model)"),wje.forEach(t),BBr=i(ae),jC=n(ae,"LI",{});var Aje=s(jC);y4e=n(Aje,"STRONG",{});var NSt=s(y4e);IBr=r(NSt,"xglm"),NSt.forEach(t),NBr=r(Aje," \u2014 "),XK=n(Aje,"A",{href:!0});var qSt=s(XK);qBr=r(qSt,"FlaxXGLMModel"),qSt.forEach(t),jBr=r(Aje," (XGLM model)"),Aje.forEach(t),DBr=i(ae),DC=n(ae,"LI",{});var Lje=s(DC);x4e=n(Lje,"STRONG",{});var jSt=s(x4e);GBr=r(jSt,"xlm-roberta"),jSt.forEach(t),OBr=r(Lje," \u2014 "),zK=n(Lje,"A",{href:!0});var DSt=s(zK);VBr=r(DSt,"FlaxXLMRobertaModel"),DSt.forEach(t),XBr=r(Lje," (XLM-RoBERTa model)"),Lje.forEach(t),ae.forEach(t),zBr=i(Kl),T(GC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),DOe=i(f),zc=n(f,"H2",{class:!0});var UXe=s(zc);OC=n(UXe,"A",{id:!0,class:!0,href:!0});var GSt=s(OC);$4e=n(GSt,"SPAN",{});var OSt=s($4e);T(yx.$$.fragment,OSt),OSt.forEach(t),GSt.forEach(t),WBr=i(UXe),k4e=n(UXe,"SPAN",{});var VSt=s(k4e);QBr=r(VSt,"FlaxAutoModelForCausalLM"),VSt.forEach(t),UXe.forEach(t),GOe=i(f),hr=n(f,"DIV",{class:!0});var Zl=s(hr);T(xx.$$.fragment,Zl),HBr=i(Zl),Wc=n(Zl,"P",{});var Are=s(Wc);UBr=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WK=n(Are,"A",{href:!0});var XSt=s(WK);JBr=r(XSt,"from_pretrained()"),XSt.forEach(t),YBr=r(Are," class method or the "),QK=n(Are,"A",{href:!0});var zSt=s(QK);KBr=r(zSt,"from_config()"),zSt.forEach(t),ZBr=r(Are,` class
method.`),Are.forEach(t),eIr=i(Zl),$x=n(Zl,"P",{});var JXe=s($x);oIr=r(JXe,"This class cannot be instantiated directly using "),S4e=n(JXe,"CODE",{});var WSt=s(S4e);rIr=r(WSt,"__init__()"),WSt.forEach(t),tIr=r(JXe," (throws an error)."),JXe.forEach(t),aIr=i(Zl),zt=n(Zl,"DIV",{class:!0});var HA=s(zt);T(kx.$$.fragment,HA),nIr=i(HA),R4e=n(HA,"P",{});var QSt=s(R4e);sIr=r(QSt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),QSt.forEach(t),lIr=i(HA),Qc=n(HA,"P",{});var Lre=s(Qc);iIr=r(Lre,`Note:
Loading a model from its configuration file does `),P4e=n(Lre,"STRONG",{});var HSt=s(P4e);dIr=r(HSt,"not"),HSt.forEach(t),cIr=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=n(Lre,"A",{href:!0});var USt=s(HK);fIr=r(USt,"from_pretrained()"),USt.forEach(t),mIr=r(Lre," to load the model weights."),Lre.forEach(t),gIr=i(HA),T(VC.$$.fragment,HA),HA.forEach(t),hIr=i(Zl),Or=n(Zl,"DIV",{class:!0});var ei=s(Or);T(Sx.$$.fragment,ei),pIr=i(ei),B4e=n(ei,"P",{});var JSt=s(B4e);uIr=r(JSt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),JSt.forEach(t),_Ir=i(ei),Fn=n(ei,"P",{});var UA=s(Fn);bIr=r(UA,"The model class to instantiate is selected based on the "),I4e=n(UA,"CODE",{});var YSt=s(I4e);vIr=r(YSt,"model_type"),YSt.forEach(t),FIr=r(UA,` property of the config object (either
passed as an argument or loaded from `),N4e=n(UA,"CODE",{});var KSt=s(N4e);TIr=r(KSt,"pretrained_model_name_or_path"),KSt.forEach(t),MIr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q4e=n(UA,"CODE",{});var ZSt=s(q4e);EIr=r(ZSt,"pretrained_model_name_or_path"),ZSt.forEach(t),CIr=r(UA,":"),UA.forEach(t),wIr=i(ei),xe=n(ei,"UL",{});var Ne=s(xe);XC=n(Ne,"LI",{});var yje=s(XC);j4e=n(yje,"STRONG",{});var eRt=s(j4e);AIr=r(eRt,"bart"),eRt.forEach(t),LIr=r(yje," \u2014 "),UK=n(yje,"A",{href:!0});var oRt=s(UK);yIr=r(oRt,"FlaxBartForCausalLM"),oRt.forEach(t),xIr=r(yje," (BART model)"),yje.forEach(t),$Ir=i(Ne),zC=n(Ne,"LI",{});var xje=s(zC);D4e=n(xje,"STRONG",{});var rRt=s(D4e);kIr=r(rRt,"bert"),rRt.forEach(t),SIr=r(xje," \u2014 "),JK=n(xje,"A",{href:!0});var tRt=s(JK);RIr=r(tRt,"FlaxBertForCausalLM"),tRt.forEach(t),PIr=r(xje," (BERT model)"),xje.forEach(t),BIr=i(Ne),WC=n(Ne,"LI",{});var $je=s(WC);G4e=n($je,"STRONG",{});var aRt=s(G4e);IIr=r(aRt,"big_bird"),aRt.forEach(t),NIr=r($je," \u2014 "),YK=n($je,"A",{href:!0});var nRt=s(YK);qIr=r(nRt,"FlaxBigBirdForCausalLM"),nRt.forEach(t),jIr=r($je," (BigBird model)"),$je.forEach(t),DIr=i(Ne),QC=n(Ne,"LI",{});var kje=s(QC);O4e=n(kje,"STRONG",{});var sRt=s(O4e);GIr=r(sRt,"electra"),sRt.forEach(t),OIr=r(kje," \u2014 "),KK=n(kje,"A",{href:!0});var lRt=s(KK);VIr=r(lRt,"FlaxElectraForCausalLM"),lRt.forEach(t),XIr=r(kje," (ELECTRA model)"),kje.forEach(t),zIr=i(Ne),HC=n(Ne,"LI",{});var Sje=s(HC);V4e=n(Sje,"STRONG",{});var iRt=s(V4e);WIr=r(iRt,"gpt2"),iRt.forEach(t),QIr=r(Sje," \u2014 "),ZK=n(Sje,"A",{href:!0});var dRt=s(ZK);HIr=r(dRt,"FlaxGPT2LMHeadModel"),dRt.forEach(t),UIr=r(Sje," (OpenAI GPT-2 model)"),Sje.forEach(t),JIr=i(Ne),UC=n(Ne,"LI",{});var Rje=s(UC);X4e=n(Rje,"STRONG",{});var cRt=s(X4e);YIr=r(cRt,"gpt_neo"),cRt.forEach(t),KIr=r(Rje," \u2014 "),eZ=n(Rje,"A",{href:!0});var fRt=s(eZ);ZIr=r(fRt,"FlaxGPTNeoForCausalLM"),fRt.forEach(t),eNr=r(Rje," (GPT Neo model)"),Rje.forEach(t),oNr=i(Ne),JC=n(Ne,"LI",{});var Pje=s(JC);z4e=n(Pje,"STRONG",{});var mRt=s(z4e);rNr=r(mRt,"gptj"),mRt.forEach(t),tNr=r(Pje," \u2014 "),oZ=n(Pje,"A",{href:!0});var gRt=s(oZ);aNr=r(gRt,"FlaxGPTJForCausalLM"),gRt.forEach(t),nNr=r(Pje," (GPT-J model)"),Pje.forEach(t),sNr=i(Ne),YC=n(Ne,"LI",{});var Bje=s(YC);W4e=n(Bje,"STRONG",{});var hRt=s(W4e);lNr=r(hRt,"opt"),hRt.forEach(t),iNr=r(Bje," \u2014 "),rZ=n(Bje,"A",{href:!0});var pRt=s(rZ);dNr=r(pRt,"FlaxOPTForCausalLM"),pRt.forEach(t),cNr=r(Bje," (OPT model)"),Bje.forEach(t),fNr=i(Ne),KC=n(Ne,"LI",{});var Ije=s(KC);Q4e=n(Ije,"STRONG",{});var uRt=s(Q4e);mNr=r(uRt,"roberta"),uRt.forEach(t),gNr=r(Ije," \u2014 "),tZ=n(Ije,"A",{href:!0});var _Rt=s(tZ);hNr=r(_Rt,"FlaxRobertaForCausalLM"),_Rt.forEach(t),pNr=r(Ije," (RoBERTa model)"),Ije.forEach(t),uNr=i(Ne),ZC=n(Ne,"LI",{});var Nje=s(ZC);H4e=n(Nje,"STRONG",{});var bRt=s(H4e);_Nr=r(bRt,"xglm"),bRt.forEach(t),bNr=r(Nje," \u2014 "),aZ=n(Nje,"A",{href:!0});var vRt=s(aZ);vNr=r(vRt,"FlaxXGLMForCausalLM"),vRt.forEach(t),FNr=r(Nje," (XGLM model)"),Nje.forEach(t),Ne.forEach(t),TNr=i(ei),T(e5.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),OOe=i(f),Hc=n(f,"H2",{class:!0});var YXe=s(Hc);o5=n(YXe,"A",{id:!0,class:!0,href:!0});var FRt=s(o5);U4e=n(FRt,"SPAN",{});var TRt=s(U4e);T(Rx.$$.fragment,TRt),TRt.forEach(t),FRt.forEach(t),MNr=i(YXe),J4e=n(YXe,"SPAN",{});var MRt=s(J4e);ENr=r(MRt,"FlaxAutoModelForPreTraining"),MRt.forEach(t),YXe.forEach(t),VOe=i(f),pr=n(f,"DIV",{class:!0});var oi=s(pr);T(Px.$$.fragment,oi),CNr=i(oi),Uc=n(oi,"P",{});var yre=s(Uc);wNr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nZ=n(yre,"A",{href:!0});var ERt=s(nZ);ANr=r(ERt,"from_pretrained()"),ERt.forEach(t),LNr=r(yre," class method or the "),sZ=n(yre,"A",{href:!0});var CRt=s(sZ);yNr=r(CRt,"from_config()"),CRt.forEach(t),xNr=r(yre,` class
method.`),yre.forEach(t),$Nr=i(oi),Bx=n(oi,"P",{});var KXe=s(Bx);kNr=r(KXe,"This class cannot be instantiated directly using "),Y4e=n(KXe,"CODE",{});var wRt=s(Y4e);SNr=r(wRt,"__init__()"),wRt.forEach(t),RNr=r(KXe," (throws an error)."),KXe.forEach(t),PNr=i(oi),Wt=n(oi,"DIV",{class:!0});var JA=s(Wt);T(Ix.$$.fragment,JA),BNr=i(JA),K4e=n(JA,"P",{});var ARt=s(K4e);INr=r(ARt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ARt.forEach(t),NNr=i(JA),Jc=n(JA,"P",{});var xre=s(Jc);qNr=r(xre,`Note:
Loading a model from its configuration file does `),Z4e=n(xre,"STRONG",{});var LRt=s(Z4e);jNr=r(LRt,"not"),LRt.forEach(t),DNr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=n(xre,"A",{href:!0});var yRt=s(lZ);GNr=r(yRt,"from_pretrained()"),yRt.forEach(t),ONr=r(xre," to load the model weights."),xre.forEach(t),VNr=i(JA),T(r5.$$.fragment,JA),JA.forEach(t),XNr=i(oi),Vr=n(oi,"DIV",{class:!0});var ri=s(Vr);T(Nx.$$.fragment,ri),zNr=i(ri),eEe=n(ri,"P",{});var xRt=s(eEe);WNr=r(xRt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xRt.forEach(t),QNr=i(ri),Tn=n(ri,"P",{});var YA=s(Tn);HNr=r(YA,"The model class to instantiate is selected based on the "),oEe=n(YA,"CODE",{});var $Rt=s(oEe);UNr=r($Rt,"model_type"),$Rt.forEach(t),JNr=r(YA,` property of the config object (either
passed as an argument or loaded from `),rEe=n(YA,"CODE",{});var kRt=s(rEe);YNr=r(kRt,"pretrained_model_name_or_path"),kRt.forEach(t),KNr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=n(YA,"CODE",{});var SRt=s(tEe);ZNr=r(SRt,"pretrained_model_name_or_path"),SRt.forEach(t),eqr=r(YA,":"),YA.forEach(t),oqr=i(ri),Ee=n(ri,"UL",{});var we=s(Ee);t5=n(we,"LI",{});var qje=s(t5);aEe=n(qje,"STRONG",{});var RRt=s(aEe);rqr=r(RRt,"albert"),RRt.forEach(t),tqr=r(qje," \u2014 "),iZ=n(qje,"A",{href:!0});var PRt=s(iZ);aqr=r(PRt,"FlaxAlbertForPreTraining"),PRt.forEach(t),nqr=r(qje," (ALBERT model)"),qje.forEach(t),sqr=i(we),a5=n(we,"LI",{});var jje=s(a5);nEe=n(jje,"STRONG",{});var BRt=s(nEe);lqr=r(BRt,"bart"),BRt.forEach(t),iqr=r(jje," \u2014 "),dZ=n(jje,"A",{href:!0});var IRt=s(dZ);dqr=r(IRt,"FlaxBartForConditionalGeneration"),IRt.forEach(t),cqr=r(jje," (BART model)"),jje.forEach(t),fqr=i(we),n5=n(we,"LI",{});var Dje=s(n5);sEe=n(Dje,"STRONG",{});var NRt=s(sEe);mqr=r(NRt,"bert"),NRt.forEach(t),gqr=r(Dje," \u2014 "),cZ=n(Dje,"A",{href:!0});var qRt=s(cZ);hqr=r(qRt,"FlaxBertForPreTraining"),qRt.forEach(t),pqr=r(Dje," (BERT model)"),Dje.forEach(t),uqr=i(we),s5=n(we,"LI",{});var Gje=s(s5);lEe=n(Gje,"STRONG",{});var jRt=s(lEe);_qr=r(jRt,"big_bird"),jRt.forEach(t),bqr=r(Gje," \u2014 "),fZ=n(Gje,"A",{href:!0});var DRt=s(fZ);vqr=r(DRt,"FlaxBigBirdForPreTraining"),DRt.forEach(t),Fqr=r(Gje," (BigBird model)"),Gje.forEach(t),Tqr=i(we),l5=n(we,"LI",{});var Oje=s(l5);iEe=n(Oje,"STRONG",{});var GRt=s(iEe);Mqr=r(GRt,"electra"),GRt.forEach(t),Eqr=r(Oje," \u2014 "),mZ=n(Oje,"A",{href:!0});var ORt=s(mZ);Cqr=r(ORt,"FlaxElectraForPreTraining"),ORt.forEach(t),wqr=r(Oje," (ELECTRA model)"),Oje.forEach(t),Aqr=i(we),i5=n(we,"LI",{});var Vje=s(i5);dEe=n(Vje,"STRONG",{});var VRt=s(dEe);Lqr=r(VRt,"longt5"),VRt.forEach(t),yqr=r(Vje," \u2014 "),gZ=n(Vje,"A",{href:!0});var XRt=s(gZ);xqr=r(XRt,"FlaxLongT5ForConditionalGeneration"),XRt.forEach(t),$qr=r(Vje," (LongT5 model)"),Vje.forEach(t),kqr=i(we),d5=n(we,"LI",{});var Xje=s(d5);cEe=n(Xje,"STRONG",{});var zRt=s(cEe);Sqr=r(zRt,"mbart"),zRt.forEach(t),Rqr=r(Xje," \u2014 "),hZ=n(Xje,"A",{href:!0});var WRt=s(hZ);Pqr=r(WRt,"FlaxMBartForConditionalGeneration"),WRt.forEach(t),Bqr=r(Xje," (mBART model)"),Xje.forEach(t),Iqr=i(we),c5=n(we,"LI",{});var zje=s(c5);fEe=n(zje,"STRONG",{});var QRt=s(fEe);Nqr=r(QRt,"mt5"),QRt.forEach(t),qqr=r(zje," \u2014 "),pZ=n(zje,"A",{href:!0});var HRt=s(pZ);jqr=r(HRt,"FlaxMT5ForConditionalGeneration"),HRt.forEach(t),Dqr=r(zje," (MT5 model)"),zje.forEach(t),Gqr=i(we),f5=n(we,"LI",{});var Wje=s(f5);mEe=n(Wje,"STRONG",{});var URt=s(mEe);Oqr=r(URt,"roberta"),URt.forEach(t),Vqr=r(Wje," \u2014 "),uZ=n(Wje,"A",{href:!0});var JRt=s(uZ);Xqr=r(JRt,"FlaxRobertaForMaskedLM"),JRt.forEach(t),zqr=r(Wje," (RoBERTa model)"),Wje.forEach(t),Wqr=i(we),m5=n(we,"LI",{});var Qje=s(m5);gEe=n(Qje,"STRONG",{});var YRt=s(gEe);Qqr=r(YRt,"roformer"),YRt.forEach(t),Hqr=r(Qje," \u2014 "),_Z=n(Qje,"A",{href:!0});var KRt=s(_Z);Uqr=r(KRt,"FlaxRoFormerForMaskedLM"),KRt.forEach(t),Jqr=r(Qje," (RoFormer model)"),Qje.forEach(t),Yqr=i(we),g5=n(we,"LI",{});var Hje=s(g5);hEe=n(Hje,"STRONG",{});var ZRt=s(hEe);Kqr=r(ZRt,"t5"),ZRt.forEach(t),Zqr=r(Hje," \u2014 "),bZ=n(Hje,"A",{href:!0});var ePt=s(bZ);ejr=r(ePt,"FlaxT5ForConditionalGeneration"),ePt.forEach(t),ojr=r(Hje," (T5 model)"),Hje.forEach(t),rjr=i(we),h5=n(we,"LI",{});var Uje=s(h5);pEe=n(Uje,"STRONG",{});var oPt=s(pEe);tjr=r(oPt,"wav2vec2"),oPt.forEach(t),ajr=r(Uje," \u2014 "),vZ=n(Uje,"A",{href:!0});var rPt=s(vZ);njr=r(rPt,"FlaxWav2Vec2ForPreTraining"),rPt.forEach(t),sjr=r(Uje," (Wav2Vec2 model)"),Uje.forEach(t),ljr=i(we),p5=n(we,"LI",{});var Jje=s(p5);uEe=n(Jje,"STRONG",{});var tPt=s(uEe);ijr=r(tPt,"xlm-roberta"),tPt.forEach(t),djr=r(Jje," \u2014 "),FZ=n(Jje,"A",{href:!0});var aPt=s(FZ);cjr=r(aPt,"FlaxXLMRobertaForMaskedLM"),aPt.forEach(t),fjr=r(Jje," (XLM-RoBERTa model)"),Jje.forEach(t),we.forEach(t),mjr=i(ri),T(u5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),XOe=i(f),Yc=n(f,"H2",{class:!0});var ZXe=s(Yc);_5=n(ZXe,"A",{id:!0,class:!0,href:!0});var nPt=s(_5);_Ee=n(nPt,"SPAN",{});var sPt=s(_Ee);T(qx.$$.fragment,sPt),sPt.forEach(t),nPt.forEach(t),gjr=i(ZXe),bEe=n(ZXe,"SPAN",{});var lPt=s(bEe);hjr=r(lPt,"FlaxAutoModelForMaskedLM"),lPt.forEach(t),ZXe.forEach(t),zOe=i(f),ur=n(f,"DIV",{class:!0});var ti=s(ur);T(jx.$$.fragment,ti),pjr=i(ti),Kc=n(ti,"P",{});var $re=s(Kc);ujr=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TZ=n($re,"A",{href:!0});var iPt=s(TZ);_jr=r(iPt,"from_pretrained()"),iPt.forEach(t),bjr=r($re," class method or the "),MZ=n($re,"A",{href:!0});var dPt=s(MZ);vjr=r(dPt,"from_config()"),dPt.forEach(t),Fjr=r($re,` class
method.`),$re.forEach(t),Tjr=i(ti),Dx=n(ti,"P",{});var eze=s(Dx);Mjr=r(eze,"This class cannot be instantiated directly using "),vEe=n(eze,"CODE",{});var cPt=s(vEe);Ejr=r(cPt,"__init__()"),cPt.forEach(t),Cjr=r(eze," (throws an error)."),eze.forEach(t),wjr=i(ti),Qt=n(ti,"DIV",{class:!0});var KA=s(Qt);T(Gx.$$.fragment,KA),Ajr=i(KA),FEe=n(KA,"P",{});var fPt=s(FEe);Ljr=r(fPt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),fPt.forEach(t),yjr=i(KA),Zc=n(KA,"P",{});var kre=s(Zc);xjr=r(kre,`Note:
Loading a model from its configuration file does `),TEe=n(kre,"STRONG",{});var mPt=s(TEe);$jr=r(mPt,"not"),mPt.forEach(t),kjr=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=n(kre,"A",{href:!0});var gPt=s(EZ);Sjr=r(gPt,"from_pretrained()"),gPt.forEach(t),Rjr=r(kre," to load the model weights."),kre.forEach(t),Pjr=i(KA),T(b5.$$.fragment,KA),KA.forEach(t),Bjr=i(ti),Xr=n(ti,"DIV",{class:!0});var ai=s(Xr);T(Ox.$$.fragment,ai),Ijr=i(ai),MEe=n(ai,"P",{});var hPt=s(MEe);Njr=r(hPt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),hPt.forEach(t),qjr=i(ai),Mn=n(ai,"P",{});var ZA=s(Mn);jjr=r(ZA,"The model class to instantiate is selected based on the "),EEe=n(ZA,"CODE",{});var pPt=s(EEe);Djr=r(pPt,"model_type"),pPt.forEach(t),Gjr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),CEe=n(ZA,"CODE",{});var uPt=s(CEe);Ojr=r(uPt,"pretrained_model_name_or_path"),uPt.forEach(t),Vjr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=n(ZA,"CODE",{});var _Pt=s(wEe);Xjr=r(_Pt,"pretrained_model_name_or_path"),_Pt.forEach(t),zjr=r(ZA,":"),ZA.forEach(t),Wjr=i(ai),$e=n(ai,"UL",{});var qe=s($e);v5=n(qe,"LI",{});var Yje=s(v5);AEe=n(Yje,"STRONG",{});var bPt=s(AEe);Qjr=r(bPt,"albert"),bPt.forEach(t),Hjr=r(Yje," \u2014 "),CZ=n(Yje,"A",{href:!0});var vPt=s(CZ);Ujr=r(vPt,"FlaxAlbertForMaskedLM"),vPt.forEach(t),Jjr=r(Yje," (ALBERT model)"),Yje.forEach(t),Yjr=i(qe),F5=n(qe,"LI",{});var Kje=s(F5);LEe=n(Kje,"STRONG",{});var FPt=s(LEe);Kjr=r(FPt,"bart"),FPt.forEach(t),Zjr=r(Kje," \u2014 "),wZ=n(Kje,"A",{href:!0});var TPt=s(wZ);eDr=r(TPt,"FlaxBartForConditionalGeneration"),TPt.forEach(t),oDr=r(Kje," (BART model)"),Kje.forEach(t),rDr=i(qe),T5=n(qe,"LI",{});var Zje=s(T5);yEe=n(Zje,"STRONG",{});var MPt=s(yEe);tDr=r(MPt,"bert"),MPt.forEach(t),aDr=r(Zje," \u2014 "),AZ=n(Zje,"A",{href:!0});var EPt=s(AZ);nDr=r(EPt,"FlaxBertForMaskedLM"),EPt.forEach(t),sDr=r(Zje," (BERT model)"),Zje.forEach(t),lDr=i(qe),M5=n(qe,"LI",{});var eDe=s(M5);xEe=n(eDe,"STRONG",{});var CPt=s(xEe);iDr=r(CPt,"big_bird"),CPt.forEach(t),dDr=r(eDe," \u2014 "),LZ=n(eDe,"A",{href:!0});var wPt=s(LZ);cDr=r(wPt,"FlaxBigBirdForMaskedLM"),wPt.forEach(t),fDr=r(eDe," (BigBird model)"),eDe.forEach(t),mDr=i(qe),E5=n(qe,"LI",{});var oDe=s(E5);$Ee=n(oDe,"STRONG",{});var APt=s($Ee);gDr=r(APt,"distilbert"),APt.forEach(t),hDr=r(oDe," \u2014 "),yZ=n(oDe,"A",{href:!0});var LPt=s(yZ);pDr=r(LPt,"FlaxDistilBertForMaskedLM"),LPt.forEach(t),uDr=r(oDe," (DistilBERT model)"),oDe.forEach(t),_Dr=i(qe),C5=n(qe,"LI",{});var rDe=s(C5);kEe=n(rDe,"STRONG",{});var yPt=s(kEe);bDr=r(yPt,"electra"),yPt.forEach(t),vDr=r(rDe," \u2014 "),xZ=n(rDe,"A",{href:!0});var xPt=s(xZ);FDr=r(xPt,"FlaxElectraForMaskedLM"),xPt.forEach(t),TDr=r(rDe," (ELECTRA model)"),rDe.forEach(t),MDr=i(qe),w5=n(qe,"LI",{});var tDe=s(w5);SEe=n(tDe,"STRONG",{});var $Pt=s(SEe);EDr=r($Pt,"mbart"),$Pt.forEach(t),CDr=r(tDe," \u2014 "),$Z=n(tDe,"A",{href:!0});var kPt=s($Z);wDr=r(kPt,"FlaxMBartForConditionalGeneration"),kPt.forEach(t),ADr=r(tDe," (mBART model)"),tDe.forEach(t),LDr=i(qe),A5=n(qe,"LI",{});var aDe=s(A5);REe=n(aDe,"STRONG",{});var SPt=s(REe);yDr=r(SPt,"roberta"),SPt.forEach(t),xDr=r(aDe," \u2014 "),kZ=n(aDe,"A",{href:!0});var RPt=s(kZ);$Dr=r(RPt,"FlaxRobertaForMaskedLM"),RPt.forEach(t),kDr=r(aDe," (RoBERTa model)"),aDe.forEach(t),SDr=i(qe),L5=n(qe,"LI",{});var nDe=s(L5);PEe=n(nDe,"STRONG",{});var PPt=s(PEe);RDr=r(PPt,"roformer"),PPt.forEach(t),PDr=r(nDe," \u2014 "),SZ=n(nDe,"A",{href:!0});var BPt=s(SZ);BDr=r(BPt,"FlaxRoFormerForMaskedLM"),BPt.forEach(t),IDr=r(nDe," (RoFormer model)"),nDe.forEach(t),NDr=i(qe),y5=n(qe,"LI",{});var sDe=s(y5);BEe=n(sDe,"STRONG",{});var IPt=s(BEe);qDr=r(IPt,"xlm-roberta"),IPt.forEach(t),jDr=r(sDe," \u2014 "),RZ=n(sDe,"A",{href:!0});var NPt=s(RZ);DDr=r(NPt,"FlaxXLMRobertaForMaskedLM"),NPt.forEach(t),GDr=r(sDe," (XLM-RoBERTa model)"),sDe.forEach(t),qe.forEach(t),ODr=i(ai),T(x5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),WOe=i(f),ef=n(f,"H2",{class:!0});var oze=s(ef);$5=n(oze,"A",{id:!0,class:!0,href:!0});var qPt=s($5);IEe=n(qPt,"SPAN",{});var jPt=s(IEe);T(Vx.$$.fragment,jPt),jPt.forEach(t),qPt.forEach(t),VDr=i(oze),NEe=n(oze,"SPAN",{});var DPt=s(NEe);XDr=r(DPt,"FlaxAutoModelForSeq2SeqLM"),DPt.forEach(t),oze.forEach(t),QOe=i(f),_r=n(f,"DIV",{class:!0});var ni=s(_r);T(Xx.$$.fragment,ni),zDr=i(ni),of=n(ni,"P",{});var Sre=s(of);WDr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PZ=n(Sre,"A",{href:!0});var GPt=s(PZ);QDr=r(GPt,"from_pretrained()"),GPt.forEach(t),HDr=r(Sre," class method or the "),BZ=n(Sre,"A",{href:!0});var OPt=s(BZ);UDr=r(OPt,"from_config()"),OPt.forEach(t),JDr=r(Sre,` class
method.`),Sre.forEach(t),YDr=i(ni),zx=n(ni,"P",{});var rze=s(zx);KDr=r(rze,"This class cannot be instantiated directly using "),qEe=n(rze,"CODE",{});var VPt=s(qEe);ZDr=r(VPt,"__init__()"),VPt.forEach(t),eGr=r(rze," (throws an error)."),rze.forEach(t),oGr=i(ni),Ht=n(ni,"DIV",{class:!0});var e6=s(Ht);T(Wx.$$.fragment,e6),rGr=i(e6),jEe=n(e6,"P",{});var XPt=s(jEe);tGr=r(XPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),XPt.forEach(t),aGr=i(e6),rf=n(e6,"P",{});var Rre=s(rf);nGr=r(Rre,`Note:
Loading a model from its configuration file does `),DEe=n(Rre,"STRONG",{});var zPt=s(DEe);sGr=r(zPt,"not"),zPt.forEach(t),lGr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),IZ=n(Rre,"A",{href:!0});var WPt=s(IZ);iGr=r(WPt,"from_pretrained()"),WPt.forEach(t),dGr=r(Rre," to load the model weights."),Rre.forEach(t),cGr=i(e6),T(k5.$$.fragment,e6),e6.forEach(t),fGr=i(ni),zr=n(ni,"DIV",{class:!0});var si=s(zr);T(Qx.$$.fragment,si),mGr=i(si),GEe=n(si,"P",{});var QPt=s(GEe);gGr=r(QPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),QPt.forEach(t),hGr=i(si),En=n(si,"P",{});var o6=s(En);pGr=r(o6,"The model class to instantiate is selected based on the "),OEe=n(o6,"CODE",{});var HPt=s(OEe);uGr=r(HPt,"model_type"),HPt.forEach(t),_Gr=r(o6,` property of the config object (either
passed as an argument or loaded from `),VEe=n(o6,"CODE",{});var UPt=s(VEe);bGr=r(UPt,"pretrained_model_name_or_path"),UPt.forEach(t),vGr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=n(o6,"CODE",{});var JPt=s(XEe);FGr=r(JPt,"pretrained_model_name_or_path"),JPt.forEach(t),TGr=r(o6,":"),o6.forEach(t),MGr=i(si),ke=n(si,"UL",{});var je=s(ke);S5=n(je,"LI",{});var lDe=s(S5);zEe=n(lDe,"STRONG",{});var YPt=s(zEe);EGr=r(YPt,"bart"),YPt.forEach(t),CGr=r(lDe," \u2014 "),NZ=n(lDe,"A",{href:!0});var KPt=s(NZ);wGr=r(KPt,"FlaxBartForConditionalGeneration"),KPt.forEach(t),AGr=r(lDe," (BART model)"),lDe.forEach(t),LGr=i(je),R5=n(je,"LI",{});var iDe=s(R5);WEe=n(iDe,"STRONG",{});var ZPt=s(WEe);yGr=r(ZPt,"blenderbot"),ZPt.forEach(t),xGr=r(iDe," \u2014 "),qZ=n(iDe,"A",{href:!0});var eBt=s(qZ);$Gr=r(eBt,"FlaxBlenderbotForConditionalGeneration"),eBt.forEach(t),kGr=r(iDe," (Blenderbot model)"),iDe.forEach(t),SGr=i(je),P5=n(je,"LI",{});var dDe=s(P5);QEe=n(dDe,"STRONG",{});var oBt=s(QEe);RGr=r(oBt,"blenderbot-small"),oBt.forEach(t),PGr=r(dDe," \u2014 "),jZ=n(dDe,"A",{href:!0});var rBt=s(jZ);BGr=r(rBt,"FlaxBlenderbotSmallForConditionalGeneration"),rBt.forEach(t),IGr=r(dDe," (BlenderbotSmall model)"),dDe.forEach(t),NGr=i(je),B5=n(je,"LI",{});var cDe=s(B5);HEe=n(cDe,"STRONG",{});var tBt=s(HEe);qGr=r(tBt,"encoder-decoder"),tBt.forEach(t),jGr=r(cDe," \u2014 "),DZ=n(cDe,"A",{href:!0});var aBt=s(DZ);DGr=r(aBt,"FlaxEncoderDecoderModel"),aBt.forEach(t),GGr=r(cDe," (Encoder decoder model)"),cDe.forEach(t),OGr=i(je),I5=n(je,"LI",{});var fDe=s(I5);UEe=n(fDe,"STRONG",{});var nBt=s(UEe);VGr=r(nBt,"longt5"),nBt.forEach(t),XGr=r(fDe," \u2014 "),GZ=n(fDe,"A",{href:!0});var sBt=s(GZ);zGr=r(sBt,"FlaxLongT5ForConditionalGeneration"),sBt.forEach(t),WGr=r(fDe," (LongT5 model)"),fDe.forEach(t),QGr=i(je),N5=n(je,"LI",{});var mDe=s(N5);JEe=n(mDe,"STRONG",{});var lBt=s(JEe);HGr=r(lBt,"marian"),lBt.forEach(t),UGr=r(mDe," \u2014 "),OZ=n(mDe,"A",{href:!0});var iBt=s(OZ);JGr=r(iBt,"FlaxMarianMTModel"),iBt.forEach(t),YGr=r(mDe," (Marian model)"),mDe.forEach(t),KGr=i(je),q5=n(je,"LI",{});var gDe=s(q5);YEe=n(gDe,"STRONG",{});var dBt=s(YEe);ZGr=r(dBt,"mbart"),dBt.forEach(t),eOr=r(gDe," \u2014 "),VZ=n(gDe,"A",{href:!0});var cBt=s(VZ);oOr=r(cBt,"FlaxMBartForConditionalGeneration"),cBt.forEach(t),rOr=r(gDe," (mBART model)"),gDe.forEach(t),tOr=i(je),j5=n(je,"LI",{});var hDe=s(j5);KEe=n(hDe,"STRONG",{});var fBt=s(KEe);aOr=r(fBt,"mt5"),fBt.forEach(t),nOr=r(hDe," \u2014 "),XZ=n(hDe,"A",{href:!0});var mBt=s(XZ);sOr=r(mBt,"FlaxMT5ForConditionalGeneration"),mBt.forEach(t),lOr=r(hDe," (MT5 model)"),hDe.forEach(t),iOr=i(je),D5=n(je,"LI",{});var pDe=s(D5);ZEe=n(pDe,"STRONG",{});var gBt=s(ZEe);dOr=r(gBt,"pegasus"),gBt.forEach(t),cOr=r(pDe," \u2014 "),zZ=n(pDe,"A",{href:!0});var hBt=s(zZ);fOr=r(hBt,"FlaxPegasusForConditionalGeneration"),hBt.forEach(t),mOr=r(pDe," (Pegasus model)"),pDe.forEach(t),gOr=i(je),G5=n(je,"LI",{});var uDe=s(G5);eCe=n(uDe,"STRONG",{});var pBt=s(eCe);hOr=r(pBt,"t5"),pBt.forEach(t),pOr=r(uDe," \u2014 "),WZ=n(uDe,"A",{href:!0});var uBt=s(WZ);uOr=r(uBt,"FlaxT5ForConditionalGeneration"),uBt.forEach(t),_Or=r(uDe," (T5 model)"),uDe.forEach(t),je.forEach(t),bOr=i(si),T(O5.$$.fragment,si),si.forEach(t),ni.forEach(t),HOe=i(f),tf=n(f,"H2",{class:!0});var tze=s(tf);V5=n(tze,"A",{id:!0,class:!0,href:!0});var _Bt=s(V5);oCe=n(_Bt,"SPAN",{});var bBt=s(oCe);T(Hx.$$.fragment,bBt),bBt.forEach(t),_Bt.forEach(t),vOr=i(tze),rCe=n(tze,"SPAN",{});var vBt=s(rCe);FOr=r(vBt,"FlaxAutoModelForSequenceClassification"),vBt.forEach(t),tze.forEach(t),UOe=i(f),br=n(f,"DIV",{class:!0});var li=s(br);T(Ux.$$.fragment,li),TOr=i(li),af=n(li,"P",{});var Pre=s(af);MOr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QZ=n(Pre,"A",{href:!0});var FBt=s(QZ);EOr=r(FBt,"from_pretrained()"),FBt.forEach(t),COr=r(Pre," class method or the "),HZ=n(Pre,"A",{href:!0});var TBt=s(HZ);wOr=r(TBt,"from_config()"),TBt.forEach(t),AOr=r(Pre,` class
method.`),Pre.forEach(t),LOr=i(li),Jx=n(li,"P",{});var aze=s(Jx);yOr=r(aze,"This class cannot be instantiated directly using "),tCe=n(aze,"CODE",{});var MBt=s(tCe);xOr=r(MBt,"__init__()"),MBt.forEach(t),$Or=r(aze," (throws an error)."),aze.forEach(t),kOr=i(li),Ut=n(li,"DIV",{class:!0});var r6=s(Ut);T(Yx.$$.fragment,r6),SOr=i(r6),aCe=n(r6,"P",{});var EBt=s(aCe);ROr=r(EBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),EBt.forEach(t),POr=i(r6),nf=n(r6,"P",{});var Bre=s(nf);BOr=r(Bre,`Note:
Loading a model from its configuration file does `),nCe=n(Bre,"STRONG",{});var CBt=s(nCe);IOr=r(CBt,"not"),CBt.forEach(t),NOr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),UZ=n(Bre,"A",{href:!0});var wBt=s(UZ);qOr=r(wBt,"from_pretrained()"),wBt.forEach(t),jOr=r(Bre," to load the model weights."),Bre.forEach(t),DOr=i(r6),T(X5.$$.fragment,r6),r6.forEach(t),GOr=i(li),Wr=n(li,"DIV",{class:!0});var ii=s(Wr);T(Kx.$$.fragment,ii),OOr=i(ii),sCe=n(ii,"P",{});var ABt=s(sCe);VOr=r(ABt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ABt.forEach(t),XOr=i(ii),Cn=n(ii,"P",{});var t6=s(Cn);zOr=r(t6,"The model class to instantiate is selected based on the "),lCe=n(t6,"CODE",{});var LBt=s(lCe);WOr=r(LBt,"model_type"),LBt.forEach(t),QOr=r(t6,` property of the config object (either
passed as an argument or loaded from `),iCe=n(t6,"CODE",{});var yBt=s(iCe);HOr=r(yBt,"pretrained_model_name_or_path"),yBt.forEach(t),UOr=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dCe=n(t6,"CODE",{});var xBt=s(dCe);JOr=r(xBt,"pretrained_model_name_or_path"),xBt.forEach(t),YOr=r(t6,":"),t6.forEach(t),KOr=i(ii),Se=n(ii,"UL",{});var De=s(Se);z5=n(De,"LI",{});var _De=s(z5);cCe=n(_De,"STRONG",{});var $Bt=s(cCe);ZOr=r($Bt,"albert"),$Bt.forEach(t),eVr=r(_De," \u2014 "),JZ=n(_De,"A",{href:!0});var kBt=s(JZ);oVr=r(kBt,"FlaxAlbertForSequenceClassification"),kBt.forEach(t),rVr=r(_De," (ALBERT model)"),_De.forEach(t),tVr=i(De),W5=n(De,"LI",{});var bDe=s(W5);fCe=n(bDe,"STRONG",{});var SBt=s(fCe);aVr=r(SBt,"bart"),SBt.forEach(t),nVr=r(bDe," \u2014 "),YZ=n(bDe,"A",{href:!0});var RBt=s(YZ);sVr=r(RBt,"FlaxBartForSequenceClassification"),RBt.forEach(t),lVr=r(bDe," (BART model)"),bDe.forEach(t),iVr=i(De),Q5=n(De,"LI",{});var vDe=s(Q5);mCe=n(vDe,"STRONG",{});var PBt=s(mCe);dVr=r(PBt,"bert"),PBt.forEach(t),cVr=r(vDe," \u2014 "),KZ=n(vDe,"A",{href:!0});var BBt=s(KZ);fVr=r(BBt,"FlaxBertForSequenceClassification"),BBt.forEach(t),mVr=r(vDe," (BERT model)"),vDe.forEach(t),gVr=i(De),H5=n(De,"LI",{});var FDe=s(H5);gCe=n(FDe,"STRONG",{});var IBt=s(gCe);hVr=r(IBt,"big_bird"),IBt.forEach(t),pVr=r(FDe," \u2014 "),ZZ=n(FDe,"A",{href:!0});var NBt=s(ZZ);uVr=r(NBt,"FlaxBigBirdForSequenceClassification"),NBt.forEach(t),_Vr=r(FDe," (BigBird model)"),FDe.forEach(t),bVr=i(De),U5=n(De,"LI",{});var TDe=s(U5);hCe=n(TDe,"STRONG",{});var qBt=s(hCe);vVr=r(qBt,"distilbert"),qBt.forEach(t),FVr=r(TDe," \u2014 "),eee=n(TDe,"A",{href:!0});var jBt=s(eee);TVr=r(jBt,"FlaxDistilBertForSequenceClassification"),jBt.forEach(t),MVr=r(TDe," (DistilBERT model)"),TDe.forEach(t),EVr=i(De),J5=n(De,"LI",{});var MDe=s(J5);pCe=n(MDe,"STRONG",{});var DBt=s(pCe);CVr=r(DBt,"electra"),DBt.forEach(t),wVr=r(MDe," \u2014 "),oee=n(MDe,"A",{href:!0});var GBt=s(oee);AVr=r(GBt,"FlaxElectraForSequenceClassification"),GBt.forEach(t),LVr=r(MDe," (ELECTRA model)"),MDe.forEach(t),yVr=i(De),Y5=n(De,"LI",{});var EDe=s(Y5);uCe=n(EDe,"STRONG",{});var OBt=s(uCe);xVr=r(OBt,"mbart"),OBt.forEach(t),$Vr=r(EDe," \u2014 "),ree=n(EDe,"A",{href:!0});var VBt=s(ree);kVr=r(VBt,"FlaxMBartForSequenceClassification"),VBt.forEach(t),SVr=r(EDe," (mBART model)"),EDe.forEach(t),RVr=i(De),K5=n(De,"LI",{});var CDe=s(K5);_Ce=n(CDe,"STRONG",{});var XBt=s(_Ce);PVr=r(XBt,"roberta"),XBt.forEach(t),BVr=r(CDe," \u2014 "),tee=n(CDe,"A",{href:!0});var zBt=s(tee);IVr=r(zBt,"FlaxRobertaForSequenceClassification"),zBt.forEach(t),NVr=r(CDe," (RoBERTa model)"),CDe.forEach(t),qVr=i(De),Z5=n(De,"LI",{});var wDe=s(Z5);bCe=n(wDe,"STRONG",{});var WBt=s(bCe);jVr=r(WBt,"roformer"),WBt.forEach(t),DVr=r(wDe," \u2014 "),aee=n(wDe,"A",{href:!0});var QBt=s(aee);GVr=r(QBt,"FlaxRoFormerForSequenceClassification"),QBt.forEach(t),OVr=r(wDe," (RoFormer model)"),wDe.forEach(t),VVr=i(De),e3=n(De,"LI",{});var ADe=s(e3);vCe=n(ADe,"STRONG",{});var HBt=s(vCe);XVr=r(HBt,"xlm-roberta"),HBt.forEach(t),zVr=r(ADe," \u2014 "),nee=n(ADe,"A",{href:!0});var UBt=s(nee);WVr=r(UBt,"FlaxXLMRobertaForSequenceClassification"),UBt.forEach(t),QVr=r(ADe," (XLM-RoBERTa model)"),ADe.forEach(t),De.forEach(t),HVr=i(ii),T(o3.$$.fragment,ii),ii.forEach(t),li.forEach(t),JOe=i(f),sf=n(f,"H2",{class:!0});var nze=s(sf);r3=n(nze,"A",{id:!0,class:!0,href:!0});var JBt=s(r3);FCe=n(JBt,"SPAN",{});var YBt=s(FCe);T(Zx.$$.fragment,YBt),YBt.forEach(t),JBt.forEach(t),UVr=i(nze),TCe=n(nze,"SPAN",{});var KBt=s(TCe);JVr=r(KBt,"FlaxAutoModelForQuestionAnswering"),KBt.forEach(t),nze.forEach(t),YOe=i(f),vr=n(f,"DIV",{class:!0});var di=s(vr);T(e$.$$.fragment,di),YVr=i(di),lf=n(di,"P",{});var Ire=s(lf);KVr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),see=n(Ire,"A",{href:!0});var ZBt=s(see);ZVr=r(ZBt,"from_pretrained()"),ZBt.forEach(t),eXr=r(Ire," class method or the "),lee=n(Ire,"A",{href:!0});var eIt=s(lee);oXr=r(eIt,"from_config()"),eIt.forEach(t),rXr=r(Ire,` class
method.`),Ire.forEach(t),tXr=i(di),o$=n(di,"P",{});var sze=s(o$);aXr=r(sze,"This class cannot be instantiated directly using "),MCe=n(sze,"CODE",{});var oIt=s(MCe);nXr=r(oIt,"__init__()"),oIt.forEach(t),sXr=r(sze," (throws an error)."),sze.forEach(t),lXr=i(di),Jt=n(di,"DIV",{class:!0});var a6=s(Jt);T(r$.$$.fragment,a6),iXr=i(a6),ECe=n(a6,"P",{});var rIt=s(ECe);dXr=r(rIt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rIt.forEach(t),cXr=i(a6),df=n(a6,"P",{});var Nre=s(df);fXr=r(Nre,`Note:
Loading a model from its configuration file does `),CCe=n(Nre,"STRONG",{});var tIt=s(CCe);mXr=r(tIt,"not"),tIt.forEach(t),gXr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),iee=n(Nre,"A",{href:!0});var aIt=s(iee);hXr=r(aIt,"from_pretrained()"),aIt.forEach(t),pXr=r(Nre," to load the model weights."),Nre.forEach(t),uXr=i(a6),T(t3.$$.fragment,a6),a6.forEach(t),_Xr=i(di),Qr=n(di,"DIV",{class:!0});var ci=s(Qr);T(t$.$$.fragment,ci),bXr=i(ci),wCe=n(ci,"P",{});var nIt=s(wCe);vXr=r(nIt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nIt.forEach(t),FXr=i(ci),wn=n(ci,"P",{});var n6=s(wn);TXr=r(n6,"The model class to instantiate is selected based on the "),ACe=n(n6,"CODE",{});var sIt=s(ACe);MXr=r(sIt,"model_type"),sIt.forEach(t),EXr=r(n6,` property of the config object (either
passed as an argument or loaded from `),LCe=n(n6,"CODE",{});var lIt=s(LCe);CXr=r(lIt,"pretrained_model_name_or_path"),lIt.forEach(t),wXr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yCe=n(n6,"CODE",{});var iIt=s(yCe);AXr=r(iIt,"pretrained_model_name_or_path"),iIt.forEach(t),LXr=r(n6,":"),n6.forEach(t),yXr=i(ci),Re=n(ci,"UL",{});var Ge=s(Re);a3=n(Ge,"LI",{});var LDe=s(a3);xCe=n(LDe,"STRONG",{});var dIt=s(xCe);xXr=r(dIt,"albert"),dIt.forEach(t),$Xr=r(LDe," \u2014 "),dee=n(LDe,"A",{href:!0});var cIt=s(dee);kXr=r(cIt,"FlaxAlbertForQuestionAnswering"),cIt.forEach(t),SXr=r(LDe," (ALBERT model)"),LDe.forEach(t),RXr=i(Ge),n3=n(Ge,"LI",{});var yDe=s(n3);$Ce=n(yDe,"STRONG",{});var fIt=s($Ce);PXr=r(fIt,"bart"),fIt.forEach(t),BXr=r(yDe," \u2014 "),cee=n(yDe,"A",{href:!0});var mIt=s(cee);IXr=r(mIt,"FlaxBartForQuestionAnswering"),mIt.forEach(t),NXr=r(yDe," (BART model)"),yDe.forEach(t),qXr=i(Ge),s3=n(Ge,"LI",{});var xDe=s(s3);kCe=n(xDe,"STRONG",{});var gIt=s(kCe);jXr=r(gIt,"bert"),gIt.forEach(t),DXr=r(xDe," \u2014 "),fee=n(xDe,"A",{href:!0});var hIt=s(fee);GXr=r(hIt,"FlaxBertForQuestionAnswering"),hIt.forEach(t),OXr=r(xDe," (BERT model)"),xDe.forEach(t),VXr=i(Ge),l3=n(Ge,"LI",{});var $De=s(l3);SCe=n($De,"STRONG",{});var pIt=s(SCe);XXr=r(pIt,"big_bird"),pIt.forEach(t),zXr=r($De," \u2014 "),mee=n($De,"A",{href:!0});var uIt=s(mee);WXr=r(uIt,"FlaxBigBirdForQuestionAnswering"),uIt.forEach(t),QXr=r($De," (BigBird model)"),$De.forEach(t),HXr=i(Ge),i3=n(Ge,"LI",{});var kDe=s(i3);RCe=n(kDe,"STRONG",{});var _It=s(RCe);UXr=r(_It,"distilbert"),_It.forEach(t),JXr=r(kDe," \u2014 "),gee=n(kDe,"A",{href:!0});var bIt=s(gee);YXr=r(bIt,"FlaxDistilBertForQuestionAnswering"),bIt.forEach(t),KXr=r(kDe," (DistilBERT model)"),kDe.forEach(t),ZXr=i(Ge),d3=n(Ge,"LI",{});var SDe=s(d3);PCe=n(SDe,"STRONG",{});var vIt=s(PCe);ezr=r(vIt,"electra"),vIt.forEach(t),ozr=r(SDe," \u2014 "),hee=n(SDe,"A",{href:!0});var FIt=s(hee);rzr=r(FIt,"FlaxElectraForQuestionAnswering"),FIt.forEach(t),tzr=r(SDe," (ELECTRA model)"),SDe.forEach(t),azr=i(Ge),c3=n(Ge,"LI",{});var RDe=s(c3);BCe=n(RDe,"STRONG",{});var TIt=s(BCe);nzr=r(TIt,"mbart"),TIt.forEach(t),szr=r(RDe," \u2014 "),pee=n(RDe,"A",{href:!0});var MIt=s(pee);lzr=r(MIt,"FlaxMBartForQuestionAnswering"),MIt.forEach(t),izr=r(RDe," (mBART model)"),RDe.forEach(t),dzr=i(Ge),f3=n(Ge,"LI",{});var PDe=s(f3);ICe=n(PDe,"STRONG",{});var EIt=s(ICe);czr=r(EIt,"roberta"),EIt.forEach(t),fzr=r(PDe," \u2014 "),uee=n(PDe,"A",{href:!0});var CIt=s(uee);mzr=r(CIt,"FlaxRobertaForQuestionAnswering"),CIt.forEach(t),gzr=r(PDe," (RoBERTa model)"),PDe.forEach(t),hzr=i(Ge),m3=n(Ge,"LI",{});var BDe=s(m3);NCe=n(BDe,"STRONG",{});var wIt=s(NCe);pzr=r(wIt,"roformer"),wIt.forEach(t),uzr=r(BDe," \u2014 "),_ee=n(BDe,"A",{href:!0});var AIt=s(_ee);_zr=r(AIt,"FlaxRoFormerForQuestionAnswering"),AIt.forEach(t),bzr=r(BDe," (RoFormer model)"),BDe.forEach(t),vzr=i(Ge),g3=n(Ge,"LI",{});var IDe=s(g3);qCe=n(IDe,"STRONG",{});var LIt=s(qCe);Fzr=r(LIt,"xlm-roberta"),LIt.forEach(t),Tzr=r(IDe," \u2014 "),bee=n(IDe,"A",{href:!0});var yIt=s(bee);Mzr=r(yIt,"FlaxXLMRobertaForQuestionAnswering"),yIt.forEach(t),Ezr=r(IDe," (XLM-RoBERTa model)"),IDe.forEach(t),Ge.forEach(t),Czr=i(ci),T(h3.$$.fragment,ci),ci.forEach(t),di.forEach(t),KOe=i(f),cf=n(f,"H2",{class:!0});var lze=s(cf);p3=n(lze,"A",{id:!0,class:!0,href:!0});var xIt=s(p3);jCe=n(xIt,"SPAN",{});var $It=s(jCe);T(a$.$$.fragment,$It),$It.forEach(t),xIt.forEach(t),wzr=i(lze),DCe=n(lze,"SPAN",{});var kIt=s(DCe);Azr=r(kIt,"FlaxAutoModelForTokenClassification"),kIt.forEach(t),lze.forEach(t),ZOe=i(f),Fr=n(f,"DIV",{class:!0});var fi=s(Fr);T(n$.$$.fragment,fi),Lzr=i(fi),ff=n(fi,"P",{});var qre=s(ff);yzr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vee=n(qre,"A",{href:!0});var SIt=s(vee);xzr=r(SIt,"from_pretrained()"),SIt.forEach(t),$zr=r(qre," class method or the "),Fee=n(qre,"A",{href:!0});var RIt=s(Fee);kzr=r(RIt,"from_config()"),RIt.forEach(t),Szr=r(qre,` class
method.`),qre.forEach(t),Rzr=i(fi),s$=n(fi,"P",{});var ize=s(s$);Pzr=r(ize,"This class cannot be instantiated directly using "),GCe=n(ize,"CODE",{});var PIt=s(GCe);Bzr=r(PIt,"__init__()"),PIt.forEach(t),Izr=r(ize," (throws an error)."),ize.forEach(t),Nzr=i(fi),Yt=n(fi,"DIV",{class:!0});var s6=s(Yt);T(l$.$$.fragment,s6),qzr=i(s6),OCe=n(s6,"P",{});var BIt=s(OCe);jzr=r(BIt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),BIt.forEach(t),Dzr=i(s6),mf=n(s6,"P",{});var jre=s(mf);Gzr=r(jre,`Note:
Loading a model from its configuration file does `),VCe=n(jre,"STRONG",{});var IIt=s(VCe);Ozr=r(IIt,"not"),IIt.forEach(t),Vzr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tee=n(jre,"A",{href:!0});var NIt=s(Tee);Xzr=r(NIt,"from_pretrained()"),NIt.forEach(t),zzr=r(jre," to load the model weights."),jre.forEach(t),Wzr=i(s6),T(u3.$$.fragment,s6),s6.forEach(t),Qzr=i(fi),Hr=n(fi,"DIV",{class:!0});var mi=s(Hr);T(i$.$$.fragment,mi),Hzr=i(mi),XCe=n(mi,"P",{});var qIt=s(XCe);Uzr=r(qIt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qIt.forEach(t),Jzr=i(mi),An=n(mi,"P",{});var l6=s(An);Yzr=r(l6,"The model class to instantiate is selected based on the "),zCe=n(l6,"CODE",{});var jIt=s(zCe);Kzr=r(jIt,"model_type"),jIt.forEach(t),Zzr=r(l6,` property of the config object (either
passed as an argument or loaded from `),WCe=n(l6,"CODE",{});var DIt=s(WCe);eWr=r(DIt,"pretrained_model_name_or_path"),DIt.forEach(t),oWr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QCe=n(l6,"CODE",{});var GIt=s(QCe);rWr=r(GIt,"pretrained_model_name_or_path"),GIt.forEach(t),tWr=r(l6,":"),l6.forEach(t),aWr=i(mi),Ve=n(mi,"UL",{});var To=s(Ve);_3=n(To,"LI",{});var NDe=s(_3);HCe=n(NDe,"STRONG",{});var OIt=s(HCe);nWr=r(OIt,"albert"),OIt.forEach(t),sWr=r(NDe," \u2014 "),Mee=n(NDe,"A",{href:!0});var VIt=s(Mee);lWr=r(VIt,"FlaxAlbertForTokenClassification"),VIt.forEach(t),iWr=r(NDe," (ALBERT model)"),NDe.forEach(t),dWr=i(To),b3=n(To,"LI",{});var qDe=s(b3);UCe=n(qDe,"STRONG",{});var XIt=s(UCe);cWr=r(XIt,"bert"),XIt.forEach(t),fWr=r(qDe," \u2014 "),Eee=n(qDe,"A",{href:!0});var zIt=s(Eee);mWr=r(zIt,"FlaxBertForTokenClassification"),zIt.forEach(t),gWr=r(qDe," (BERT model)"),qDe.forEach(t),hWr=i(To),v3=n(To,"LI",{});var jDe=s(v3);JCe=n(jDe,"STRONG",{});var WIt=s(JCe);pWr=r(WIt,"big_bird"),WIt.forEach(t),uWr=r(jDe," \u2014 "),Cee=n(jDe,"A",{href:!0});var QIt=s(Cee);_Wr=r(QIt,"FlaxBigBirdForTokenClassification"),QIt.forEach(t),bWr=r(jDe," (BigBird model)"),jDe.forEach(t),vWr=i(To),F3=n(To,"LI",{});var DDe=s(F3);YCe=n(DDe,"STRONG",{});var HIt=s(YCe);FWr=r(HIt,"distilbert"),HIt.forEach(t),TWr=r(DDe," \u2014 "),wee=n(DDe,"A",{href:!0});var UIt=s(wee);MWr=r(UIt,"FlaxDistilBertForTokenClassification"),UIt.forEach(t),EWr=r(DDe," (DistilBERT model)"),DDe.forEach(t),CWr=i(To),T3=n(To,"LI",{});var GDe=s(T3);KCe=n(GDe,"STRONG",{});var JIt=s(KCe);wWr=r(JIt,"electra"),JIt.forEach(t),AWr=r(GDe," \u2014 "),Aee=n(GDe,"A",{href:!0});var YIt=s(Aee);LWr=r(YIt,"FlaxElectraForTokenClassification"),YIt.forEach(t),yWr=r(GDe," (ELECTRA model)"),GDe.forEach(t),xWr=i(To),M3=n(To,"LI",{});var ODe=s(M3);ZCe=n(ODe,"STRONG",{});var KIt=s(ZCe);$Wr=r(KIt,"roberta"),KIt.forEach(t),kWr=r(ODe," \u2014 "),Lee=n(ODe,"A",{href:!0});var ZIt=s(Lee);SWr=r(ZIt,"FlaxRobertaForTokenClassification"),ZIt.forEach(t),RWr=r(ODe," (RoBERTa model)"),ODe.forEach(t),PWr=i(To),E3=n(To,"LI",{});var VDe=s(E3);e5e=n(VDe,"STRONG",{});var eNt=s(e5e);BWr=r(eNt,"roformer"),eNt.forEach(t),IWr=r(VDe," \u2014 "),yee=n(VDe,"A",{href:!0});var oNt=s(yee);NWr=r(oNt,"FlaxRoFormerForTokenClassification"),oNt.forEach(t),qWr=r(VDe," (RoFormer model)"),VDe.forEach(t),jWr=i(To),C3=n(To,"LI",{});var XDe=s(C3);o5e=n(XDe,"STRONG",{});var rNt=s(o5e);DWr=r(rNt,"xlm-roberta"),rNt.forEach(t),GWr=r(XDe," \u2014 "),xee=n(XDe,"A",{href:!0});var tNt=s(xee);OWr=r(tNt,"FlaxXLMRobertaForTokenClassification"),tNt.forEach(t),VWr=r(XDe," (XLM-RoBERTa model)"),XDe.forEach(t),To.forEach(t),XWr=i(mi),T(w3.$$.fragment,mi),mi.forEach(t),fi.forEach(t),eVe=i(f),gf=n(f,"H2",{class:!0});var dze=s(gf);A3=n(dze,"A",{id:!0,class:!0,href:!0});var aNt=s(A3);r5e=n(aNt,"SPAN",{});var nNt=s(r5e);T(d$.$$.fragment,nNt),nNt.forEach(t),aNt.forEach(t),zWr=i(dze),t5e=n(dze,"SPAN",{});var sNt=s(t5e);WWr=r(sNt,"FlaxAutoModelForMultipleChoice"),sNt.forEach(t),dze.forEach(t),oVe=i(f),Tr=n(f,"DIV",{class:!0});var gi=s(Tr);T(c$.$$.fragment,gi),QWr=i(gi),hf=n(gi,"P",{});var Dre=s(hf);HWr=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$ee=n(Dre,"A",{href:!0});var lNt=s($ee);UWr=r(lNt,"from_pretrained()"),lNt.forEach(t),JWr=r(Dre," class method or the "),kee=n(Dre,"A",{href:!0});var iNt=s(kee);YWr=r(iNt,"from_config()"),iNt.forEach(t),KWr=r(Dre,` class
method.`),Dre.forEach(t),ZWr=i(gi),f$=n(gi,"P",{});var cze=s(f$);eQr=r(cze,"This class cannot be instantiated directly using "),a5e=n(cze,"CODE",{});var dNt=s(a5e);oQr=r(dNt,"__init__()"),dNt.forEach(t),rQr=r(cze," (throws an error)."),cze.forEach(t),tQr=i(gi),Kt=n(gi,"DIV",{class:!0});var i6=s(Kt);T(m$.$$.fragment,i6),aQr=i(i6),n5e=n(i6,"P",{});var cNt=s(n5e);nQr=r(cNt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cNt.forEach(t),sQr=i(i6),pf=n(i6,"P",{});var Gre=s(pf);lQr=r(Gre,`Note:
Loading a model from its configuration file does `),s5e=n(Gre,"STRONG",{});var fNt=s(s5e);iQr=r(fNt,"not"),fNt.forEach(t),dQr=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),See=n(Gre,"A",{href:!0});var mNt=s(See);cQr=r(mNt,"from_pretrained()"),mNt.forEach(t),fQr=r(Gre," to load the model weights."),Gre.forEach(t),mQr=i(i6),T(L3.$$.fragment,i6),i6.forEach(t),gQr=i(gi),Ur=n(gi,"DIV",{class:!0});var hi=s(Ur);T(g$.$$.fragment,hi),hQr=i(hi),l5e=n(hi,"P",{});var gNt=s(l5e);pQr=r(gNt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gNt.forEach(t),uQr=i(hi),Ln=n(hi,"P",{});var d6=s(Ln);_Qr=r(d6,"The model class to instantiate is selected based on the "),i5e=n(d6,"CODE",{});var hNt=s(i5e);bQr=r(hNt,"model_type"),hNt.forEach(t),vQr=r(d6,` property of the config object (either
passed as an argument or loaded from `),d5e=n(d6,"CODE",{});var pNt=s(d5e);FQr=r(pNt,"pretrained_model_name_or_path"),pNt.forEach(t),TQr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c5e=n(d6,"CODE",{});var uNt=s(c5e);MQr=r(uNt,"pretrained_model_name_or_path"),uNt.forEach(t),EQr=r(d6,":"),d6.forEach(t),CQr=i(hi),Xe=n(hi,"UL",{});var Mo=s(Xe);y3=n(Mo,"LI",{});var zDe=s(y3);f5e=n(zDe,"STRONG",{});var _Nt=s(f5e);wQr=r(_Nt,"albert"),_Nt.forEach(t),AQr=r(zDe," \u2014 "),Ree=n(zDe,"A",{href:!0});var bNt=s(Ree);LQr=r(bNt,"FlaxAlbertForMultipleChoice"),bNt.forEach(t),yQr=r(zDe," (ALBERT model)"),zDe.forEach(t),xQr=i(Mo),x3=n(Mo,"LI",{});var WDe=s(x3);m5e=n(WDe,"STRONG",{});var vNt=s(m5e);$Qr=r(vNt,"bert"),vNt.forEach(t),kQr=r(WDe," \u2014 "),Pee=n(WDe,"A",{href:!0});var FNt=s(Pee);SQr=r(FNt,"FlaxBertForMultipleChoice"),FNt.forEach(t),RQr=r(WDe," (BERT model)"),WDe.forEach(t),PQr=i(Mo),$3=n(Mo,"LI",{});var QDe=s($3);g5e=n(QDe,"STRONG",{});var TNt=s(g5e);BQr=r(TNt,"big_bird"),TNt.forEach(t),IQr=r(QDe," \u2014 "),Bee=n(QDe,"A",{href:!0});var MNt=s(Bee);NQr=r(MNt,"FlaxBigBirdForMultipleChoice"),MNt.forEach(t),qQr=r(QDe," (BigBird model)"),QDe.forEach(t),jQr=i(Mo),k3=n(Mo,"LI",{});var HDe=s(k3);h5e=n(HDe,"STRONG",{});var ENt=s(h5e);DQr=r(ENt,"distilbert"),ENt.forEach(t),GQr=r(HDe," \u2014 "),Iee=n(HDe,"A",{href:!0});var CNt=s(Iee);OQr=r(CNt,"FlaxDistilBertForMultipleChoice"),CNt.forEach(t),VQr=r(HDe," (DistilBERT model)"),HDe.forEach(t),XQr=i(Mo),S3=n(Mo,"LI",{});var UDe=s(S3);p5e=n(UDe,"STRONG",{});var wNt=s(p5e);zQr=r(wNt,"electra"),wNt.forEach(t),WQr=r(UDe," \u2014 "),Nee=n(UDe,"A",{href:!0});var ANt=s(Nee);QQr=r(ANt,"FlaxElectraForMultipleChoice"),ANt.forEach(t),HQr=r(UDe," (ELECTRA model)"),UDe.forEach(t),UQr=i(Mo),R3=n(Mo,"LI",{});var JDe=s(R3);u5e=n(JDe,"STRONG",{});var LNt=s(u5e);JQr=r(LNt,"roberta"),LNt.forEach(t),YQr=r(JDe," \u2014 "),qee=n(JDe,"A",{href:!0});var yNt=s(qee);KQr=r(yNt,"FlaxRobertaForMultipleChoice"),yNt.forEach(t),ZQr=r(JDe," (RoBERTa model)"),JDe.forEach(t),eHr=i(Mo),P3=n(Mo,"LI",{});var YDe=s(P3);_5e=n(YDe,"STRONG",{});var xNt=s(_5e);oHr=r(xNt,"roformer"),xNt.forEach(t),rHr=r(YDe," \u2014 "),jee=n(YDe,"A",{href:!0});var $Nt=s(jee);tHr=r($Nt,"FlaxRoFormerForMultipleChoice"),$Nt.forEach(t),aHr=r(YDe," (RoFormer model)"),YDe.forEach(t),nHr=i(Mo),B3=n(Mo,"LI",{});var KDe=s(B3);b5e=n(KDe,"STRONG",{});var kNt=s(b5e);sHr=r(kNt,"xlm-roberta"),kNt.forEach(t),lHr=r(KDe," \u2014 "),Dee=n(KDe,"A",{href:!0});var SNt=s(Dee);iHr=r(SNt,"FlaxXLMRobertaForMultipleChoice"),SNt.forEach(t),dHr=r(KDe," (XLM-RoBERTa model)"),KDe.forEach(t),Mo.forEach(t),cHr=i(hi),T(I3.$$.fragment,hi),hi.forEach(t),gi.forEach(t),rVe=i(f),uf=n(f,"H2",{class:!0});var fze=s(uf);N3=n(fze,"A",{id:!0,class:!0,href:!0});var RNt=s(N3);v5e=n(RNt,"SPAN",{});var PNt=s(v5e);T(h$.$$.fragment,PNt),PNt.forEach(t),RNt.forEach(t),fHr=i(fze),F5e=n(fze,"SPAN",{});var BNt=s(F5e);mHr=r(BNt,"FlaxAutoModelForNextSentencePrediction"),BNt.forEach(t),fze.forEach(t),tVe=i(f),Mr=n(f,"DIV",{class:!0});var pi=s(Mr);T(p$.$$.fragment,pi),gHr=i(pi),_f=n(pi,"P",{});var Ore=s(_f);hHr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Gee=n(Ore,"A",{href:!0});var INt=s(Gee);pHr=r(INt,"from_pretrained()"),INt.forEach(t),uHr=r(Ore," class method or the "),Oee=n(Ore,"A",{href:!0});var NNt=s(Oee);_Hr=r(NNt,"from_config()"),NNt.forEach(t),bHr=r(Ore,` class
method.`),Ore.forEach(t),vHr=i(pi),u$=n(pi,"P",{});var mze=s(u$);FHr=r(mze,"This class cannot be instantiated directly using "),T5e=n(mze,"CODE",{});var qNt=s(T5e);THr=r(qNt,"__init__()"),qNt.forEach(t),MHr=r(mze," (throws an error)."),mze.forEach(t),EHr=i(pi),Zt=n(pi,"DIV",{class:!0});var c6=s(Zt);T(_$.$$.fragment,c6),CHr=i(c6),M5e=n(c6,"P",{});var jNt=s(M5e);wHr=r(jNt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jNt.forEach(t),AHr=i(c6),bf=n(c6,"P",{});var Vre=s(bf);LHr=r(Vre,`Note:
Loading a model from its configuration file does `),E5e=n(Vre,"STRONG",{});var DNt=s(E5e);yHr=r(DNt,"not"),DNt.forEach(t),xHr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=n(Vre,"A",{href:!0});var GNt=s(Vee);$Hr=r(GNt,"from_pretrained()"),GNt.forEach(t),kHr=r(Vre," to load the model weights."),Vre.forEach(t),SHr=i(c6),T(q3.$$.fragment,c6),c6.forEach(t),RHr=i(pi),Jr=n(pi,"DIV",{class:!0});var ui=s(Jr);T(b$.$$.fragment,ui),PHr=i(ui),C5e=n(ui,"P",{});var ONt=s(C5e);BHr=r(ONt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ONt.forEach(t),IHr=i(ui),yn=n(ui,"P",{});var f6=s(yn);NHr=r(f6,"The model class to instantiate is selected based on the "),w5e=n(f6,"CODE",{});var VNt=s(w5e);qHr=r(VNt,"model_type"),VNt.forEach(t),jHr=r(f6,` property of the config object (either
passed as an argument or loaded from `),A5e=n(f6,"CODE",{});var XNt=s(A5e);DHr=r(XNt,"pretrained_model_name_or_path"),XNt.forEach(t),GHr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L5e=n(f6,"CODE",{});var zNt=s(L5e);OHr=r(zNt,"pretrained_model_name_or_path"),zNt.forEach(t),VHr=r(f6,":"),f6.forEach(t),XHr=i(ui),y5e=n(ui,"UL",{});var WNt=s(y5e);j3=n(WNt,"LI",{});var ZDe=s(j3);x5e=n(ZDe,"STRONG",{});var QNt=s(x5e);zHr=r(QNt,"bert"),QNt.forEach(t),WHr=r(ZDe," \u2014 "),Xee=n(ZDe,"A",{href:!0});var HNt=s(Xee);QHr=r(HNt,"FlaxBertForNextSentencePrediction"),HNt.forEach(t),HHr=r(ZDe," (BERT model)"),ZDe.forEach(t),WNt.forEach(t),UHr=i(ui),T(D3.$$.fragment,ui),ui.forEach(t),pi.forEach(t),aVe=i(f),vf=n(f,"H2",{class:!0});var gze=s(vf);G3=n(gze,"A",{id:!0,class:!0,href:!0});var UNt=s(G3);$5e=n(UNt,"SPAN",{});var JNt=s($5e);T(v$.$$.fragment,JNt),JNt.forEach(t),UNt.forEach(t),JHr=i(gze),k5e=n(gze,"SPAN",{});var YNt=s(k5e);YHr=r(YNt,"FlaxAutoModelForImageClassification"),YNt.forEach(t),gze.forEach(t),nVe=i(f),Er=n(f,"DIV",{class:!0});var _i=s(Er);T(F$.$$.fragment,_i),KHr=i(_i),Ff=n(_i,"P",{});var Xre=s(Ff);ZHr=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zee=n(Xre,"A",{href:!0});var KNt=s(zee);eUr=r(KNt,"from_pretrained()"),KNt.forEach(t),oUr=r(Xre," class method or the "),Wee=n(Xre,"A",{href:!0});var ZNt=s(Wee);rUr=r(ZNt,"from_config()"),ZNt.forEach(t),tUr=r(Xre,` class
method.`),Xre.forEach(t),aUr=i(_i),T$=n(_i,"P",{});var hze=s(T$);nUr=r(hze,"This class cannot be instantiated directly using "),S5e=n(hze,"CODE",{});var eqt=s(S5e);sUr=r(eqt,"__init__()"),eqt.forEach(t),lUr=r(hze," (throws an error)."),hze.forEach(t),iUr=i(_i),ea=n(_i,"DIV",{class:!0});var m6=s(ea);T(M$.$$.fragment,m6),dUr=i(m6),R5e=n(m6,"P",{});var oqt=s(R5e);cUr=r(oqt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),oqt.forEach(t),fUr=i(m6),Tf=n(m6,"P",{});var zre=s(Tf);mUr=r(zre,`Note:
Loading a model from its configuration file does `),P5e=n(zre,"STRONG",{});var rqt=s(P5e);gUr=r(rqt,"not"),rqt.forEach(t),hUr=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=n(zre,"A",{href:!0});var tqt=s(Qee);pUr=r(tqt,"from_pretrained()"),tqt.forEach(t),uUr=r(zre," to load the model weights."),zre.forEach(t),_Ur=i(m6),T(O3.$$.fragment,m6),m6.forEach(t),bUr=i(_i),Yr=n(_i,"DIV",{class:!0});var bi=s(Yr);T(E$.$$.fragment,bi),vUr=i(bi),B5e=n(bi,"P",{});var aqt=s(B5e);FUr=r(aqt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),aqt.forEach(t),TUr=i(bi),xn=n(bi,"P",{});var g6=s(xn);MUr=r(g6,"The model class to instantiate is selected based on the "),I5e=n(g6,"CODE",{});var nqt=s(I5e);EUr=r(nqt,"model_type"),nqt.forEach(t),CUr=r(g6,` property of the config object (either
passed as an argument or loaded from `),N5e=n(g6,"CODE",{});var sqt=s(N5e);wUr=r(sqt,"pretrained_model_name_or_path"),sqt.forEach(t),AUr=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q5e=n(g6,"CODE",{});var lqt=s(q5e);LUr=r(lqt,"pretrained_model_name_or_path"),lqt.forEach(t),yUr=r(g6,":"),g6.forEach(t),xUr=i(bi),C$=n(bi,"UL",{});var pze=s(C$);V3=n(pze,"LI",{});var eGe=s(V3);j5e=n(eGe,"STRONG",{});var iqt=s(j5e);$Ur=r(iqt,"beit"),iqt.forEach(t),kUr=r(eGe," \u2014 "),Hee=n(eGe,"A",{href:!0});var dqt=s(Hee);SUr=r(dqt,"FlaxBeitForImageClassification"),dqt.forEach(t),RUr=r(eGe," (BEiT model)"),eGe.forEach(t),PUr=i(pze),X3=n(pze,"LI",{});var oGe=s(X3);D5e=n(oGe,"STRONG",{});var cqt=s(D5e);BUr=r(cqt,"vit"),cqt.forEach(t),IUr=r(oGe," \u2014 "),Uee=n(oGe,"A",{href:!0});var fqt=s(Uee);NUr=r(fqt,"FlaxViTForImageClassification"),fqt.forEach(t),qUr=r(oGe," (ViT model)"),oGe.forEach(t),pze.forEach(t),jUr=i(bi),T(z3.$$.fragment,bi),bi.forEach(t),_i.forEach(t),sVe=i(f),Mf=n(f,"H2",{class:!0});var uze=s(Mf);W3=n(uze,"A",{id:!0,class:!0,href:!0});var mqt=s(W3);G5e=n(mqt,"SPAN",{});var gqt=s(G5e);T(w$.$$.fragment,gqt),gqt.forEach(t),mqt.forEach(t),DUr=i(uze),O5e=n(uze,"SPAN",{});var hqt=s(O5e);GUr=r(hqt,"FlaxAutoModelForVision2Seq"),hqt.forEach(t),uze.forEach(t),lVe=i(f),Cr=n(f,"DIV",{class:!0});var vi=s(Cr);T(A$.$$.fragment,vi),OUr=i(vi),Ef=n(vi,"P",{});var Wre=s(Ef);VUr=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Jee=n(Wre,"A",{href:!0});var pqt=s(Jee);XUr=r(pqt,"from_pretrained()"),pqt.forEach(t),zUr=r(Wre," class method or the "),Yee=n(Wre,"A",{href:!0});var uqt=s(Yee);WUr=r(uqt,"from_config()"),uqt.forEach(t),QUr=r(Wre,` class
method.`),Wre.forEach(t),HUr=i(vi),L$=n(vi,"P",{});var _ze=s(L$);UUr=r(_ze,"This class cannot be instantiated directly using "),V5e=n(_ze,"CODE",{});var _qt=s(V5e);JUr=r(_qt,"__init__()"),_qt.forEach(t),YUr=r(_ze," (throws an error)."),_ze.forEach(t),KUr=i(vi),oa=n(vi,"DIV",{class:!0});var h6=s(oa);T(y$.$$.fragment,h6),ZUr=i(h6),X5e=n(h6,"P",{});var bqt=s(X5e);eJr=r(bqt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bqt.forEach(t),oJr=i(h6),Cf=n(h6,"P",{});var Qre=s(Cf);rJr=r(Qre,`Note:
Loading a model from its configuration file does `),z5e=n(Qre,"STRONG",{});var vqt=s(z5e);tJr=r(vqt,"not"),vqt.forEach(t),aJr=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kee=n(Qre,"A",{href:!0});var Fqt=s(Kee);nJr=r(Fqt,"from_pretrained()"),Fqt.forEach(t),sJr=r(Qre," to load the model weights."),Qre.forEach(t),lJr=i(h6),T(Q3.$$.fragment,h6),h6.forEach(t),iJr=i(vi),Kr=n(vi,"DIV",{class:!0});var Fi=s(Kr);T(x$.$$.fragment,Fi),dJr=i(Fi),W5e=n(Fi,"P",{});var Tqt=s(W5e);cJr=r(Tqt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Tqt.forEach(t),fJr=i(Fi),$n=n(Fi,"P",{});var p6=s($n);mJr=r(p6,"The model class to instantiate is selected based on the "),Q5e=n(p6,"CODE",{});var Mqt=s(Q5e);gJr=r(Mqt,"model_type"),Mqt.forEach(t),hJr=r(p6,` property of the config object (either
passed as an argument or loaded from `),H5e=n(p6,"CODE",{});var Eqt=s(H5e);pJr=r(Eqt,"pretrained_model_name_or_path"),Eqt.forEach(t),uJr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U5e=n(p6,"CODE",{});var Cqt=s(U5e);_Jr=r(Cqt,"pretrained_model_name_or_path"),Cqt.forEach(t),bJr=r(p6,":"),p6.forEach(t),vJr=i(Fi),J5e=n(Fi,"UL",{});var wqt=s(J5e);H3=n(wqt,"LI",{});var rGe=s(H3);Y5e=n(rGe,"STRONG",{});var Aqt=s(Y5e);FJr=r(Aqt,"vision-encoder-decoder"),Aqt.forEach(t),TJr=r(rGe," \u2014 "),Zee=n(rGe,"A",{href:!0});var Lqt=s(Zee);MJr=r(Lqt,"FlaxVisionEncoderDecoderModel"),Lqt.forEach(t),EJr=r(rGe," (Vision Encoder decoder model)"),rGe.forEach(t),wqt.forEach(t),CJr=i(Fi),T(U3.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(RDt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Sn,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.AutoConfig"),c(Pn,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.AutoModel"),c(Bn,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.AutoTokenizer"),c(Li,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertModel"),c(Sf,"id","extending-the-auto-classes"),c(Sf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sf,"href","#extending-the-auto-classes"),c(yi,"class","relative group"),c(Pf,"id","transformers.AutoConfig"),c(Pf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pf,"href","#transformers.AutoConfig"),c(xi,"class","relative group"),c(Zk,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(eS,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig"),c(oS,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig"),c(rS,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitConfig"),c(tS,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig"),c(aS,"href","/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(nS,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig"),c(sS,"href","/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(lS,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(iS,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(dS,"href","/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomConfig"),c(cS,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig"),c(fS,"href","/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineConfig"),c(mS,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPConfig"),c(gS,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig"),c(hS,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextConfig"),c(pS,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig"),c(uS,"href","/docs/transformers/pr_17109/en/model_doc/cvt#transformers.CvtConfig"),c(_S,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(bS,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(vS,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(FS,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig"),c(TS,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(MS,"href","/docs/transformers/pr_17109/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(ES,"href","/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTConfig"),c(CS,"href","/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrConfig"),c(wS,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig"),c(AS,"href","/docs/transformers/pr_17109/en/model_doc/dpr#transformers.DPRConfig"),c(LS,"href","/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTConfig"),c(yS,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig"),c(xS,"href","/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c($S,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig"),c(kS,"href","/docs/transformers/pr_17109/en/model_doc/flava#transformers.FlavaConfig"),c(SS,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig"),c(RS,"href","/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTConfig"),c(PS,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig"),c(BS,"href","/docs/transformers/pr_17109/en/model_doc/glpn#transformers.GLPNConfig"),c(IS,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config"),c(NS,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(qS,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(jS,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig"),c(DS,"href","/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertConfig"),c(GS,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig"),c(OS,"href","/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(VS,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(XS,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(zS,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(WS,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDConfig"),c(QS,"href","/docs/transformers/pr_17109/en/model_doc/levit#transformers.LevitConfig"),c(HS,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig"),c(US,"href","/docs/transformers/pr_17109/en/model_doc/longt5#transformers.LongT5Config"),c(JS,"href","/docs/transformers/pr_17109/en/model_doc/luke#transformers.LukeConfig"),c(YS,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertConfig"),c(KS,"href","/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100Config"),c(ZS,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig"),c(eR,"href","/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(oR,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig"),c(rR,"href","/docs/transformers/pr_17109/en/model_doc/mctct#transformers.MCTCTConfig"),c(tR,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(aR,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(nR,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig"),c(sR,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config"),c(lR,"href","/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(iR,"href","/docs/transformers/pr_17109/en/model_doc/ofa#transformers.OFAConfig"),c(dR,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(cR,"href","/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTConfig"),c(fR,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig"),c(mR,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverConfig"),c(gR,"href","/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartConfig"),c(hR,"href","/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(pR,"href","/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(uR,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(_R,"href","/docs/transformers/pr_17109/en/model_doc/rag#transformers.RagConfig"),c(bR,"href","/docs/transformers/pr_17109/en/model_doc/realm#transformers.RealmConfig"),c(vR,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerConfig"),c(FR,"href","/docs/transformers/pr_17109/en/model_doc/regnet#transformers.RegNetConfig"),c(TR,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig"),c(MR,"href","/docs/transformers/pr_17109/en/model_doc/resnet#transformers.ResNetConfig"),c(ER,"href","/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertConfig"),c(CR,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig"),c(wR,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig"),c(AR,"href","/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerConfig"),c(LR,"href","/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWConfig"),c(yR,"href","/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDConfig"),c(xR,"href","/docs/transformers/pr_17109/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c($R,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(kR,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(SR,"href","/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterConfig"),c(RR,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(PR,"href","/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinConfig"),c(BR,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config"),c(IR,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig"),c(NR,"href","/docs/transformers/pr_17109/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(qR,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(jR,"href","/docs/transformers/pr_17109/en/model_doc/trocr#transformers.TrOCRConfig"),c(DR,"href","/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(GR,"href","/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(OR,"href","/docs/transformers/pr_17109/en/model_doc/van#transformers.VanConfig"),c(VR,"href","/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltConfig"),c(XR,"href","/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(zR,"href","/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(WR,"href","/docs/transformers/pr_17109/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(QR,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig"),c(HR,"href","/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(UR,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(JR,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(YR,"href","/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMConfig"),c(KR,"href","/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMConfig"),c(ZR,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig"),c(eP,"href","/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(oP,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(rP,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(tP,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig"),c(aP,"href","/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosConfig"),c(nP,"href","/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Og,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vg,"id","transformers.AutoTokenizer"),c(Vg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vg,"href","#transformers.AutoTokenizer"),c(ki,"class","relative group"),c(sP,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(lP,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertTokenizer"),c(iP,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(dP,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartTokenizer"),c(cP,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartTokenizerFast"),c(fP,"href","/docs/transformers/pr_17109/en/model_doc/barthez#transformers.BarthezTokenizer"),c(mP,"href","/docs/transformers/pr_17109/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(gP,"href","/docs/transformers/pr_17109/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(hP,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizer"),c(pP,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizerFast"),c(uP,"href","/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(_P,"href","/docs/transformers/pr_17109/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(bP,"href","/docs/transformers/pr_17109/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(vP,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(FP,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(TP,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(MP,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(EP,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(CP,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(wP,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(AP,"href","/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(LP,"href","/docs/transformers/pr_17109/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(yP,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertTokenizer"),c(xP,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c($P,"href","/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineTokenizer"),c(kP,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPTokenizer"),c(SP,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(RP,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(PP,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(BP,"href","/docs/transformers/pr_17109/en/model_doc/cpm#transformers.CpmTokenizer"),c(IP,"href","/docs/transformers/pr_17109/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(NP,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(qP,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jP,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(DP,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaTokenizer"),c(GP,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(OP,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(VP,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(XP,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(zP,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(WP,"href","/docs/transformers/pr_17109/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(QP,"href","/docs/transformers/pr_17109/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(HP,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraTokenizer"),c(UP,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(JP,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(YP,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetTokenizer"),c(KP,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(eB,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelTokenizer"),c(oB,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(rB,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tB,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(aB,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nB,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(sB,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(lB,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(iB,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(dB,"href","/docs/transformers/pr_17109/en/model_doc/herbert#transformers.HerbertTokenizer"),c(cB,"href","/docs/transformers/pr_17109/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(fB,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(mB,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizer"),c(gB,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(hB,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(pB,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(uB,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(_B,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(bB,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(vB,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(FB,"href","/docs/transformers/pr_17109/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(TB,"href","/docs/transformers/pr_17109/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(MB,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDTokenizer"),c(EB,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDTokenizerFast"),c(CB,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerTokenizer"),c(wB,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(AB,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Tokenizer"),c(LB,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5TokenizerFast"),c(yB,"href","/docs/transformers/pr_17109/en/model_doc/luke#transformers.LukeTokenizer"),c(xB,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertTokenizer"),c($B,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(kB,"href","/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(SB,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianTokenizer"),c(RB,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartTokenizer"),c(PB,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(BB,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(IB,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(NB,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizer"),c(qB,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizerFast"),c(jB,"href","/docs/transformers/pr_17109/en/model_doc/mluke#transformers.MLukeTokenizer"),c(DB,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(GB,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(OB,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(VB,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(XB,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Tokenizer"),c(zB,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5TokenizerFast"),c(WB,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertTokenizer"),c(QB,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(HB,"href","/docs/transformers/pr_17109/en/model_doc/ofa#transformers.OFATokenizer"),c(UB,"href","/docs/transformers/pr_17109/en/model_doc/ofa#transformers.OFATokenizerFast"),c(JB,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(YB,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(KB,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZB,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(eI,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(oI,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(rI,"href","/docs/transformers/pr_17109/en/model_doc/phobert#transformers.PhobertTokenizer"),c(tI,"href","/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartTokenizer"),c(aI,"href","/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(nI,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizer"),c(sI,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizerFast"),c(lI,"href","/docs/transformers/pr_17109/en/model_doc/rag#transformers.RagTokenizer"),c(iI,"href","/docs/transformers/pr_17109/en/model_doc/realm#transformers.RealmTokenizer"),c(dI,"href","/docs/transformers/pr_17109/en/model_doc/realm#transformers.RealmTokenizerFast"),c(cI,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerTokenizer"),c(fI,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(mI,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertTokenizer"),c(gI,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(hI,"href","/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(pI,"href","/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(uI,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_I,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bI,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(vI,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(FI,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(TI,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(MI,"href","/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterTokenizer"),c(EI,"href","/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(CI,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(wI,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(AI,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Tokenizer"),c(LI,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5TokenizerFast"),c(yI,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasTokenizer"),c(xI,"href","/docs/transformers/pr_17109/en/model_doc/tapex#transformers.TapexTokenizer"),c($I,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(kI,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizer"),c(SI,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizerFast"),c(RI,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizer"),c(PI,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizerFast"),c(BI,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(II,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(NI,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(qI,"href","/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMTokenizer"),c(jI,"href","/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(DI,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMTokenizer"),c(GI,"href","/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(OI,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(VI,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(XI,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zI,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(WI,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(QI,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(HI,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertTokenizer"),c(UI,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"id","transformers.AutoFeatureExtractor"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoFeatureExtractor"),c(Si,"class","relative group"),c(JI,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(YI,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(KI,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(ZI,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eN,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oN,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rN,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(tN,"href","/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(aN,"href","/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(nN,"href","/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(sN,"href","/docs/transformers/pr_17109/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(lN,"href","/docs/transformers/pr_17109/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(iN,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dN,"href","/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(cN,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(fN,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(mN,"href","/docs/transformers/pr_17109/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(gN,"href","/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(hN,"href","/docs/transformers/pr_17109/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(pN,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(uN,"href","/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(_N,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bN,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vN,"href","/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(FN,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(TN,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(MN,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(EN,"href","/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(CN,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(wN,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(AN,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(LN,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(yN,"href","/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lp,"id","transformers.AutoProcessor"),c(lp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lp,"href","#transformers.AutoProcessor"),c(Ri,"class","relative group"),c(xN,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c($N,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPProcessor"),c(kN,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(SN,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(RN,"href","/docs/transformers/pr_17109/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(PN,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BN,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(IN,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(NN,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(qN,"href","/docs/transformers/pr_17109/en/model_doc/trocr#transformers.TrOCRProcessor"),c(jN,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DN,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GN,"href","/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltProcessor"),c(ON,"href","/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(VN,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XN,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zN,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yp,"id","transformers.AutoModel"),c(yp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yp,"href","#transformers.AutoModel"),c(Bi,"class","relative group"),c(WN,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QN,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HN,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UN,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertModel"),c(JN,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartModel"),c(YN,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitModel"),c(KN,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertModel"),c(ZN,"href","/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(eq,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdModel"),c(oq,"href","/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(rq,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(tq,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(aq,"href","/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomModel"),c(nq,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertModel"),c(sq,"href","/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineModel"),c(lq,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPModel"),c(iq,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertModel"),c(dq,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextModel"),c(cq,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLModel"),c(fq,"href","/docs/transformers/pr_17109/en/model_doc/cvt#transformers.CvtModel"),c(mq,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(gq,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(hq,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(pq,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaModel"),c(uq,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(_q,"href","/docs/transformers/pr_17109/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(bq,"href","/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTModel"),c(vq,"href","/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrModel"),c(Fq,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertModel"),c(Tq,"href","/docs/transformers/pr_17109/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Mq,"href","/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTModel"),c(Eq,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraModel"),c(Cq,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertModel"),c(wq,"href","/docs/transformers/pr_17109/en/model_doc/flava#transformers.FlavaModel"),c(Aq,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetModel"),c(Lq,"href","/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTModel"),c(yq,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelModel"),c(xq,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelBaseModel"),c($q,"href","/docs/transformers/pr_17109/en/model_doc/glpn#transformers.GLPNModel"),c(kq,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Model"),c(Sq,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Rq,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Pq,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJModel"),c(Bq,"href","/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertModel"),c(Iq,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertModel"),c(Nq,"href","/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(qq,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(jq,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Dq,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Gq,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDModel"),c(Oq,"href","/docs/transformers/pr_17109/en/model_doc/levit#transformers.LevitModel"),c(Vq,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerModel"),c(Xq,"href","/docs/transformers/pr_17109/en/model_doc/longt5#transformers.LongT5Model"),c(zq,"href","/docs/transformers/pr_17109/en/model_doc/luke#transformers.LukeModel"),c(Wq,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertModel"),c(Qq,"href","/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100Model"),c(Hq,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianModel"),c(Uq,"href","/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Jq,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartModel"),c(Yq,"href","/docs/transformers/pr_17109/en/model_doc/mctct#transformers.MCTCTModel"),c(Kq,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Zq,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertModel"),c(ej,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetModel"),c(oj,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Model"),c(rj,"href","/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerModel"),c(tj,"href","/docs/transformers/pr_17109/en/model_doc/ofa#transformers.OFAModel"),c(aj,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(nj,"href","/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTModel"),c(sj,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusModel"),c(lj,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverModel"),c(ij,"href","/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartModel"),c(dj,"href","/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerModel"),c(cj,"href","/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(fj,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertModel"),c(mj,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerModel"),c(gj,"href","/docs/transformers/pr_17109/en/model_doc/regnet#transformers.RegNetModel"),c(hj,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertModel"),c(pj,"href","/docs/transformers/pr_17109/en/model_doc/resnet#transformers.ResNetModel"),c(uj,"href","/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertModel"),c(_j,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaModel"),c(bj,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerModel"),c(vj,"href","/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerModel"),c(Fj,"href","/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWModel"),c(Tj,"href","/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDModel"),c(Mj,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Ej,"href","/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterModel"),c(Cj,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(wj,"href","/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinModel"),c(Aj,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Model"),c(Lj,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasModel"),c(yj,"href","/docs/transformers/pr_17109/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(xj,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c($j,"href","/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechModel"),c(kj,"href","/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Sj,"href","/docs/transformers/pr_17109/en/model_doc/van#transformers.VanModel"),c(Rj,"href","/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltModel"),c(Pj,"href","/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Bj,"href","/docs/transformers/pr_17109/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Ij,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTModel"),c(Nj,"href","/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(qj,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(jj,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Dj,"href","/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMModel"),c(Gj,"href","/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMModel"),c(Oj,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMModel"),c(Vj,"href","/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Xj,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(zj,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Wj,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetModel"),c(Qj,"href","/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosModel"),c(Hj,"href","/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($_,"id","transformers.AutoModelForPreTraining"),c($_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($_,"href","#transformers.AutoModelForPreTraining"),c(qi,"class","relative group"),c(Uj,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jj,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yj,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kj,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Zj,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(eD,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForPreTraining"),c(oD,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(rD,"href","/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomForCausalLM"),c(tD,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(aD,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(nD,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(sD,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(lD,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(iD,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(dD,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForPreTraining"),c(cD,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(fD,"href","/docs/transformers/pr_17109/en/model_doc/flava#transformers.FlavaForPreTraining"),c(mD,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForPreTraining"),c(gD,"href","/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(hD,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(pD,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(uD,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(_D,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(bD,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(vD,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(FD,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(TD,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(MD,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(ED,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(CD,"href","/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertModel"),c(wD,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(AD,"href","/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(LD,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(yD,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(xD,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForMaskedLM"),c($D,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(kD,"href","/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(SD,"href","/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(RD,"href","/docs/transformers/pr_17109/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(PD,"href","/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(BD,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(ID,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(ND,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(qD,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(jD,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(DD,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E1,"id","transformers.AutoModelForCausalLM"),c(E1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E1,"href","#transformers.AutoModelForCausalLM"),c(Gi,"class","relative group"),c(GD,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OD,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VD,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XD,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForCausalLM"),c(zD,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertLMHeadModel"),c(WD,"href","/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(QD,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(HD,"href","/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(UD,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(JD,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(YD,"href","/docs/transformers/pr_17109/en/model_doc/bloom#transformers.BloomForCausalLM"),c(KD,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(ZD,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(eG,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(oG,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForCausalLM"),c(rG,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(tG,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(aG,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(nG,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(sG,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianForCausalLM"),c(lG,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForCausalLM"),c(iG,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(dG,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(cG,"href","/docs/transformers/pr_17109/en/model_doc/opt#transformers.OPTForCausalLM"),c(fG,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(mG,"href","/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(gG,"href","/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(hG,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(pG,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(uG,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(_G,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(bG,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(vG,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(FG,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(TG,"href","/docs/transformers/pr_17109/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(MG,"href","/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(EG,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(CG,"href","/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(wG,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(AG,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(LG,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f2,"id","transformers.AutoModelForMaskedLM"),c(f2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f2,"href","#transformers.AutoModelForMaskedLM"),c(Xi,"class","relative group"),c(yG,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xG,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($G,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kG,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(SG,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(RG,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForMaskedLM"),c(PG,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(BG,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(IG,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(NG,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(qG,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(jG,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(DG,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(GG,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(OG,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(VG,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(XG,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(zG,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(WG,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(QG,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(HG,"href","/docs/transformers/pr_17109/en/model_doc/luke#transformers.LukeForMaskedLM"),c(UG,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(JG,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(YG,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(KG,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(ZG,"href","/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(eO,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(oO,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(rO,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(tO,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(aO,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(nO,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(sO,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(lO,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(iO,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(dO,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(cO,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(fO,"href","/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y2,"id","transformers.AutoModelForSeq2SeqLM"),c(Y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Qi,"class","relative group"),c(mO,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gO,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hO,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pO,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(uO,"href","/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(_O,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(bO,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(vO,"href","/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(FO,"href","/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(TO,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(MO,"href","/docs/transformers/pr_17109/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(EO,"href","/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(CO,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianMTModel"),c(wO,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(AO,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(LO,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(yO,"href","/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(xO,"href","/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c($O,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(kO,"href","/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bb,"id","transformers.AutoModelForSequenceClassification"),c(bb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bb,"href","#transformers.AutoModelForSequenceClassification"),c(Ji,"class","relative group"),c(SO,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RO,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PO,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BO,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(IO,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForSequenceClassification"),c(NO,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForSequenceClassification"),c(qO,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(jO,"href","/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(DO,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(GO,"href","/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(OO,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(VO,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(XO,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(zO,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(WO,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(QO,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(HO,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(UO,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(JO,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(YO,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(KO,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(eV,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(oV,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(rV,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(tV,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(aV,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(dV,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pv,"id","transformers.AutoModelForMultipleChoice"),c(pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pv,"href","#transformers.AutoModelForMultipleChoice"),c(Zi,"class","relative group"),c(yV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($V,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kV,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(SV,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForMultipleChoice"),c(RV,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(PV,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(BV,"href","/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(IV,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(NV,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(qV,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(jV,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(DV,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(GV,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(OV,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(VV,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(XV,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(zV,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(WV,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(QV,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(HV,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(UV,"href","/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(JV,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(YV,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(KV,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(ZV,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(eX,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(oX,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(rX,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(tX,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(aX,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(nX,"href","/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hv,"id","transformers.AutoModelForNextSentencePrediction"),c(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hv,"href","#transformers.AutoModelForNextSentencePrediction"),c(rd,"class","relative group"),c(sX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dX,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(cX,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(fX,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(mX,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(gX,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t0,"id","transformers.AutoModelForTokenClassification"),c(t0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t0,"href","#transformers.AutoModelForTokenClassification"),c(nd,"class","relative group"),c(hX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_X,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(bX,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForTokenClassification"),c(vX,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(FX,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(TX,"href","/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForTokenClassification"),c(MX,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(EX,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(CX,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(wX,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(AX,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(LX,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(yX,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(xX,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForTokenClassification"),c($X,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(kX,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(SX,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(RX,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(PX,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(BX,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(IX,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(NX,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(qX,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(jX,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(DX,"href","/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(GX,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(OX,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(VX,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(XX,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(zX,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(WX,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(QX,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(HX,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(UX,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(JX,"href","/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G0,"id","transformers.AutoModelForQuestionAnswering"),c(G0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G0,"href","#transformers.AutoModelForQuestionAnswering"),c(id,"class","relative group"),c(YX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(oz,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(rz,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(tz,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(az,"href","/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(nz,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(sz,"href","/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(lz,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(iz,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(dz,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(cz,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(fz,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(mz,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(gz,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(hz,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(pz,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(uz,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(_z,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(bz,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(vz,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(Fz,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(Tz,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(Mz,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(Ez,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(Cz,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(wz,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(Az,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(Lz,"href","/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(yz,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(xz,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c($z,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(Sz,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(Rz,"href","/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(Pz,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(Bz,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(Iz,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(Nz,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(qz,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(jz,"href","/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kF,"id","transformers.AutoModelForTableQuestionAnswering"),c(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(fd,"class","relative group"),c(Dz,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gz,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oz,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vz,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IF,"id","transformers.AutoModelForImageClassification"),c(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IF,"href","#transformers.AutoModelForImageClassification"),c(hd,"class","relative group"),c(Xz,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zz,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wz,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qz,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitForImageClassification"),c(Hz,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(Uz,"href","/docs/transformers/pr_17109/en/model_doc/cvt#transformers.CvtForImageClassification"),c(Jz,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(Yz,"href","/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTForImageClassification"),c(Kz,"href","/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(Zz,"href","/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(eW,"href","/docs/transformers/pr_17109/en/model_doc/levit#transformers.LevitForImageClassification"),c(oW,"href","/docs/transformers/pr_17109/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(rW,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(tW,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(aW,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(nW,"href","/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(sW,"href","/docs/transformers/pr_17109/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(lW,"href","/docs/transformers/pr_17109/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(iW,"href","/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(dW,"href","/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinForImageClassification"),c(cW,"href","/docs/transformers/pr_17109/en/model_doc/van#transformers.VanForImageClassification"),c(fW,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KF,"id","transformers.AutoModelForVision2Seq"),c(KF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KF,"href","#transformers.AutoModelForVision2Seq"),c(_d,"class","relative group"),c(mW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pW,"href","/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(tT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Fd,"class","relative group"),c(uW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vW,"href","/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iT,"id","transformers.AutoModelForAudioClassification"),c(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iT,"href","#transformers.AutoModelForAudioClassification"),c(Ed,"class","relative group"),c(FW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EW,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(CW,"href","/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(wW,"href","/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(AW,"href","/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(LW,"href","/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(yW,"href","/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(xW,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c($W,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(kW,"href","/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.AutoModelForAudioFrameClassification"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.AutoModelForAudioFrameClassification"),c(Ad,"class","relative group"),c(SW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BW,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(IW,"href","/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(NW,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(qW,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(jW,"href","/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($T,"id","transformers.AutoModelForCTC"),c($T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($T,"href","#transformers.AutoModelForCTC"),c(xd,"class","relative group"),c(DW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VW,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(XW,"href","/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertForCTC"),c(zW,"href","/docs/transformers/pr_17109/en/model_doc/mctct#transformers.MCTCTForCTC"),c(WW,"href","/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWForCTC"),c(QW,"href","/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDForCTC"),c(HW,"href","/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(UW,"href","/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(JW,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(YW,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(KW,"href","/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Sd,"class","relative group"),c(ZW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rQ,"href","/docs/transformers/pr_17109/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(tQ,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JT,"id","transformers.AutoModelForAudioXVector"),c(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JT,"href","#transformers.AutoModelForAudioXVector"),c(Bd,"class","relative group"),c(aQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lQ,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(iQ,"href","/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(dQ,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(cQ,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(fQ,"href","/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n7,"id","transformers.AutoModelForMaskedImageModeling"),c(n7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n7,"href","#transformers.AutoModelForMaskedImageModeling"),c(qd,"class","relative group"),c(mQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pQ,"href","/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(uQ,"href","/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(_Q,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m7,"id","transformers.AutoModelForObjectDetection"),c(m7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m7,"href","#transformers.AutoModelForObjectDetection"),c(Od,"class","relative group"),c(bQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TQ,"href","/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrForObjectDetection"),c(MQ,"href","/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b7,"id","transformers.AutoModelForImageSegmentation"),c(b7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b7,"href","#transformers.AutoModelForImageSegmentation"),c(zd,"class","relative group"),c(EQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AQ,"href","/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E7,"id","transformers.AutoModelForSemanticSegmentation"),c(E7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E7,"href","#transformers.AutoModelForSemanticSegmentation"),c(Hd,"class","relative group"),c(LQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Q,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(kQ,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(SQ,"href","/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(RQ,"href","/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k7,"id","transformers.AutoModelForInstanceSegmentation"),c(k7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k7,"href","#transformers.AutoModelForInstanceSegmentation"),c(Yd,"class","relative group"),c(PQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NQ,"href","/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I7,"id","transformers.TFAutoModel"),c(I7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I7,"href","#transformers.TFAutoModel"),c(ec,"class","relative group"),c(qQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GQ,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertModel"),c(OQ,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.TFBartModel"),c(VQ,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertModel"),c(XQ,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(zQ,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(WQ,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertModel"),c(QQ,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.TFCLIPModel"),c(HQ,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertModel"),c(UQ,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.TFConvNextModel"),c(JQ,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLModel"),c(YQ,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(KQ,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaModel"),c(ZQ,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(eH,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(oH,"href","/docs/transformers/pr_17109/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(rH,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraModel"),c(tH,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(aH,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelModel"),c(nH,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(sH,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2Model"),c(lH,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJModel"),c(iH,"href","/docs/transformers/pr_17109/en/model_doc/hubert#transformers.TFHubertModel"),c(dH,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(cH,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.TFLEDModel"),c(fH,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerModel"),c(mH,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.TFLxmertModel"),c(gH,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.TFMarianModel"),c(hH,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.TFMBartModel"),c(pH,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(uH,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetModel"),c(_H,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.TFMT5Model"),c(bH,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(vH,"href","/docs/transformers/pr_17109/en/model_doc/opt#transformers.TFOPTModel"),c(FH,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.TFPegasusModel"),c(TH,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertModel"),c(MH,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaModel"),c(EH,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerModel"),c(CH,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(wH,"href","/docs/transformers/pr_17109/en/model_doc/swin#transformers.TFSwinModel"),c(AH,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.TFT5Model"),c(LH,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasModel"),c(yH,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(xH,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.TFViTModel"),c($H,"href","/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(kH,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(SH,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMModel"),c(RH,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(PH,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k9,"id","transformers.TFAutoModelForPreTraining"),c(k9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k9,"href","#transformers.TFAutoModelForPreTraining"),c(tc,"class","relative group"),c(BH,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(jH,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(DH,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForPreTraining"),c(GH,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(OH,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(VH,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(XH,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(zH,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(WH,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(QH,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(HH,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(UH,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(JH,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(YH,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(KH,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(ZH,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(eU,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(oU,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(rU,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(tU,"href","/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(aU,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(nU,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(sU,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tM,"id","transformers.TFAutoModelForCausalLM"),c(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tM,"href","#transformers.TFAutoModelForCausalLM"),c(sc,"class","relative group"),c(lU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cU,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(fU,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(mU,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(gU,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(hU,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(pU,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(uU,"href","/docs/transformers/pr_17109/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(_U,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(bU,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(vU,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(FU,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(TU,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(MU,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vM,"id","transformers.TFAutoModelForImageClassification"),c(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vM,"href","#transformers.TFAutoModelForImageClassification"),c(dc,"class","relative group"),c(EU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AU,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(LU,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(yU,"href","/docs/transformers/pr_17109/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(xU,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AM,"id","transformers.TFAutoModelForMaskedLM"),c(AM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AM,"href","#transformers.TFAutoModelForMaskedLM"),c(mc,"class","relative group"),c($U,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RU,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(PU,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(BU,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(IU,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(NU,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(qU,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(jU,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(DU,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(GU,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(OU,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(VU,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(XU,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(zU,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(WU,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(QU,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(HU,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(UU,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(JU,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(YU,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(KU,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(pc,"class","relative group"),c(ZU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rJ,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(tJ,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(aJ,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(nJ,"href","/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(sJ,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(lJ,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.TFMarianMTModel"),c(iJ,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(dJ,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(cJ,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(fJ,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i4,"id","transformers.TFAutoModelForSequenceClassification"),c(i4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i4,"href","#transformers.TFAutoModelForSequenceClassification"),c(bc,"class","relative group"),c(mJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(uJ,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(_J,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(bJ,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(vJ,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(FJ,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(TJ,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(MJ,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(EJ,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(CJ,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(wJ,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(AJ,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(LJ,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(yJ,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(xJ,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c($J,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(kJ,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(SJ,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(RJ,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(PJ,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(BJ,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(IJ,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(NJ,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(qJ,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(jJ,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(DJ,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N4,"id","transformers.TFAutoModelForMultipleChoice"),c(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N4,"href","#transformers.TFAutoModelForMultipleChoice"),c(Tc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(zJ,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(WJ,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(QJ,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(HJ,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(UJ,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(JJ,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(YJ,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(KJ,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(ZJ,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(eY,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(oY,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(rY,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(tY,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(aY,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(nY,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(sY,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Cc,"class","relative group"),c(lY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cY,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(fY,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(iE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Lc,"class","relative group"),c(mY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mE,"id","transformers.TFAutoModelForTokenClassification"),c(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mE,"href","#transformers.TFAutoModelForTokenClassification"),c($c,"class","relative group"),c(uY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Y,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vY,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(FY,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(TY,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(MY,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(EY,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(CY,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(wY,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(AY,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(LY,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(yY,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(xY,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c($Y,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(kY,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(SY,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(RY,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(PY,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(BY,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(IY,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(NY,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(qY,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BE,"id","transformers.TFAutoModelForQuestionAnswering"),c(BE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Rc,"class","relative group"),c(jY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OY,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(VY,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(XY,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(zY,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(WY,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(QY,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(HY,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(UY,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(JY,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(YY,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(KY,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(ZY,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(oK,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(rK,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(tK,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(aK,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(nK,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(sK,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(lK,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aC,"id","transformers.TFAutoModelForVision2Seq"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.TFAutoModelForVision2Seq"),c(Ic,"class","relative group"),c(iK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fK,"href","/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(jc,"class","relative group"),c(mK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mC,"id","transformers.FlaxAutoModel"),c(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mC,"href","#transformers.FlaxAutoModel"),c(Oc,"class","relative group"),c(uK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vK,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertModel"),c(FK,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartModel"),c(TK,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.FlaxBeitModel"),c(MK,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertModel"),c(EK,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(CK,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(wK,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(AK,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.FlaxCLIPModel"),c(LK,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(yK,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraModel"),c(xK,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c($K,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(kK,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(SK,"href","/docs/transformers/pr_17109/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(RK,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.FlaxMarianModel"),c(PK,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartModel"),c(BK,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.FlaxMT5Model"),c(IK,"href","/docs/transformers/pr_17109/en/model_doc/opt#transformers.FlaxOPTModel"),c(NK,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(qK,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(jK,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(DK,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.FlaxT5Model"),c(GK,"href","/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(OK,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.FlaxViTModel"),c(VK,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(XK,"href","/docs/transformers/pr_17109/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(zK,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OC,"id","transformers.FlaxAutoModelForCausalLM"),c(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OC,"href","#transformers.FlaxAutoModelForCausalLM"),c(zc,"class","relative group"),c(WK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HK,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UK,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(JK,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(YK,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(KK,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(ZK,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(eZ,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(oZ,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(rZ,"href","/docs/transformers/pr_17109/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(tZ,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(aZ,"href","/docs/transformers/pr_17109/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.FlaxAutoModelForPreTraining"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Hc,"class","relative group"),c(nZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iZ,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(dZ,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(cZ,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(fZ,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(mZ,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(gZ,"href","/docs/transformers/pr_17109/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(hZ,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(pZ,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(uZ,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(_Z,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(bZ,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(vZ,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(FZ,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_5,"id","transformers.FlaxAutoModelForMaskedLM"),c(_5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Yc,"class","relative group"),c(TZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CZ,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(wZ,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(AZ,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(LZ,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(yZ,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(xZ,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c($Z,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(kZ,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(SZ,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(RZ,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c($5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(ef,"class","relative group"),c(PZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NZ,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(qZ,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(jZ,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(DZ,"href","/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(GZ,"href","/docs/transformers/pr_17109/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(OZ,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(VZ,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XZ,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(zZ,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(WZ,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(tf,"class","relative group"),c(QZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UZ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JZ,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(YZ,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(KZ,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(ZZ,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(eee,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(oee,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(ree,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(tee,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(aee,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(nee,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(r3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(sf,"class","relative group"),c(see,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dee,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(cee,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(fee,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(mee,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(gee,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(hee,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(pee,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(uee,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(_ee,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(bee,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p3,"id","transformers.FlaxAutoModelForTokenClassification"),c(p3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(cf,"class","relative group"),c(vee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mee,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Eee,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Cee,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(wee,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Aee,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Lee,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(yee,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(xee,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(A3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(gf,"class","relative group"),c($ee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(See,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ree,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Pee,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Bee,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Iee,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Nee,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(qee,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(jee,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Dee,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(N3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(uf,"class","relative group"),c(Gee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xee,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G3,"id","transformers.FlaxAutoModelForImageClassification"),c(G3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G3,"href","#transformers.FlaxAutoModelForImageClassification"),c(vf,"class","relative group"),c(zee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hee,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Uee,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W3,"id","transformers.FlaxAutoModelForVision2Seq"),c(W3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Mf,"class","relative group"),c(Jee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kee,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zee,"href","/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Eo),e(Eo,Ti),b(f,yf,_),b(f,at,_),e(at,Mi),e(at,Ei),e(Ei,u6),e(at,xf),b(f,Oe,_),b(f,We,_),e(We,Ci),e(We,Sn),e(Sn,_6),e(We,Rn),e(We,Pn),e(Pn,b6),e(We,wi),e(We,Bn),e(Bn,v6),e(We,Ai),b(f,$f,_),M(ya,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,Qk),e(Ae,Li),e(Li,Hk),e(Ae,Uk),b(f,Co,_),b(f,xa,_),e(xa,Jk),e(xa,kf),e(kf,Yk),e(xa,bze),b(f,tGe,_),b(f,yi,_),e(yi,Sf),e(Sf,Hre),M(F6,Hre,null),e(yi,vze),e(yi,Ure),e(Ure,Fze),b(f,aGe,_),b(f,In,_),e(In,Tze),e(In,Jre),e(Jre,Mze),e(In,Eze),e(In,Yre),e(Yre,Cze),e(In,wze),b(f,nGe,_),M(T6,f,_),b(f,sGe,_),b(f,Kk,_),e(Kk,Aze),b(f,lGe,_),M(Rf,f,_),b(f,iGe,_),b(f,xi,_),e(xi,Pf),e(Pf,Kre),M(M6,Kre,null),e(xi,Lze),e(xi,Zre),e(Zre,yze),b(f,dGe,_),b(f,wo,_),M(E6,wo,null),e(wo,xze),e(wo,C6),e(C6,$ze),e(C6,Zk),e(Zk,kze),e(C6,Sze),e(wo,Rze),e(wo,w6),e(w6,Pze),e(w6,ete),e(ete,Bze),e(w6,Ize),e(wo,Nze),e(wo,wr),M(A6,wr,null),e(wr,qze),e(wr,ote),e(ote,jze),e(wr,Dze),e(wr,$i),e($i,Gze),e($i,rte),e(rte,Oze),e($i,Vze),e($i,tte),e(tte,Xze),e($i,zze),e(wr,Wze),e(wr,A),e(A,Bf),e(Bf,ate),e(ate,Qze),e(Bf,Hze),e(Bf,eS),e(eS,Uze),e(Bf,Jze),e(A,Yze),e(A,If),e(If,nte),e(nte,Kze),e(If,Zze),e(If,oS),e(oS,eWe),e(If,oWe),e(A,rWe),e(A,Nf),e(Nf,ste),e(ste,tWe),e(Nf,aWe),e(Nf,rS),e(rS,nWe),e(Nf,sWe),e(A,lWe),e(A,qf),e(qf,lte),e(lte,iWe),e(qf,dWe),e(qf,tS),e(tS,cWe),e(qf,fWe),e(A,mWe),e(A,jf),e(jf,ite),e(ite,gWe),e(jf,hWe),e(jf,aS),e(aS,pWe),e(jf,uWe),e(A,_We),e(A,Df),e(Df,dte),e(dte,bWe),e(Df,vWe),e(Df,nS),e(nS,FWe),e(Df,TWe),e(A,MWe),e(A,Gf),e(Gf,cte),e(cte,EWe),e(Gf,CWe),e(Gf,sS),e(sS,wWe),e(Gf,AWe),e(A,LWe),e(A,Of),e(Of,fte),e(fte,yWe),e(Of,xWe),e(Of,lS),e(lS,$We),e(Of,kWe),e(A,SWe),e(A,Vf),e(Vf,mte),e(mte,RWe),e(Vf,PWe),e(Vf,iS),e(iS,BWe),e(Vf,IWe),e(A,NWe),e(A,Xf),e(Xf,gte),e(gte,qWe),e(Xf,jWe),e(Xf,dS),e(dS,DWe),e(Xf,GWe),e(A,OWe),e(A,zf),e(zf,hte),e(hte,VWe),e(zf,XWe),e(zf,cS),e(cS,zWe),e(zf,WWe),e(A,QWe),e(A,Wf),e(Wf,pte),e(pte,HWe),e(Wf,UWe),e(Wf,fS),e(fS,JWe),e(Wf,YWe),e(A,KWe),e(A,Qf),e(Qf,ute),e(ute,ZWe),e(Qf,eQe),e(Qf,mS),e(mS,oQe),e(Qf,rQe),e(A,tQe),e(A,Hf),e(Hf,_te),e(_te,aQe),e(Hf,nQe),e(Hf,gS),e(gS,sQe),e(Hf,lQe),e(A,iQe),e(A,Uf),e(Uf,bte),e(bte,dQe),e(Uf,cQe),e(Uf,hS),e(hS,fQe),e(Uf,mQe),e(A,gQe),e(A,Jf),e(Jf,vte),e(vte,hQe),e(Jf,pQe),e(Jf,pS),e(pS,uQe),e(Jf,_Qe),e(A,bQe),e(A,Yf),e(Yf,Fte),e(Fte,vQe),e(Yf,FQe),e(Yf,uS),e(uS,TQe),e(Yf,MQe),e(A,EQe),e(A,Kf),e(Kf,Tte),e(Tte,CQe),e(Kf,wQe),e(Kf,_S),e(_S,AQe),e(Kf,LQe),e(A,yQe),e(A,Zf),e(Zf,Mte),e(Mte,xQe),e(Zf,$Qe),e(Zf,bS),e(bS,kQe),e(Zf,SQe),e(A,RQe),e(A,em),e(em,Ete),e(Ete,PQe),e(em,BQe),e(em,vS),e(vS,IQe),e(em,NQe),e(A,qQe),e(A,om),e(om,Cte),e(Cte,jQe),e(om,DQe),e(om,FS),e(FS,GQe),e(om,OQe),e(A,VQe),e(A,rm),e(rm,wte),e(wte,XQe),e(rm,zQe),e(rm,TS),e(TS,WQe),e(rm,QQe),e(A,HQe),e(A,tm),e(tm,Ate),e(Ate,UQe),e(tm,JQe),e(tm,MS),e(MS,YQe),e(tm,KQe),e(A,ZQe),e(A,am),e(am,Lte),e(Lte,eHe),e(am,oHe),e(am,ES),e(ES,rHe),e(am,tHe),e(A,aHe),e(A,nm),e(nm,yte),e(yte,nHe),e(nm,sHe),e(nm,CS),e(CS,lHe),e(nm,iHe),e(A,dHe),e(A,sm),e(sm,xte),e(xte,cHe),e(sm,fHe),e(sm,wS),e(wS,mHe),e(sm,gHe),e(A,hHe),e(A,lm),e(lm,$te),e($te,pHe),e(lm,uHe),e(lm,AS),e(AS,_He),e(lm,bHe),e(A,vHe),e(A,im),e(im,kte),e(kte,FHe),e(im,THe),e(im,LS),e(LS,MHe),e(im,EHe),e(A,CHe),e(A,dm),e(dm,Ste),e(Ste,wHe),e(dm,AHe),e(dm,yS),e(yS,LHe),e(dm,yHe),e(A,xHe),e(A,cm),e(cm,Rte),e(Rte,$He),e(cm,kHe),e(cm,xS),e(xS,SHe),e(cm,RHe),e(A,PHe),e(A,fm),e(fm,Pte),e(Pte,BHe),e(fm,IHe),e(fm,$S),e($S,NHe),e(fm,qHe),e(A,jHe),e(A,mm),e(mm,Bte),e(Bte,DHe),e(mm,GHe),e(mm,kS),e(kS,OHe),e(mm,VHe),e(A,XHe),e(A,gm),e(gm,Ite),e(Ite,zHe),e(gm,WHe),e(gm,SS),e(SS,QHe),e(gm,HHe),e(A,UHe),e(A,hm),e(hm,Nte),e(Nte,JHe),e(hm,YHe),e(hm,RS),e(RS,KHe),e(hm,ZHe),e(A,eUe),e(A,pm),e(pm,qte),e(qte,oUe),e(pm,rUe),e(pm,PS),e(PS,tUe),e(pm,aUe),e(A,nUe),e(A,um),e(um,jte),e(jte,sUe),e(um,lUe),e(um,BS),e(BS,iUe),e(um,dUe),e(A,cUe),e(A,_m),e(_m,Dte),e(Dte,fUe),e(_m,mUe),e(_m,IS),e(IS,gUe),e(_m,hUe),e(A,pUe),e(A,bm),e(bm,Gte),e(Gte,uUe),e(bm,_Ue),e(bm,NS),e(NS,bUe),e(bm,vUe),e(A,FUe),e(A,vm),e(vm,Ote),e(Ote,TUe),e(vm,MUe),e(vm,qS),e(qS,EUe),e(vm,CUe),e(A,wUe),e(A,Fm),e(Fm,Vte),e(Vte,AUe),e(Fm,LUe),e(Fm,jS),e(jS,yUe),e(Fm,xUe),e(A,$Ue),e(A,Tm),e(Tm,Xte),e(Xte,kUe),e(Tm,SUe),e(Tm,DS),e(DS,RUe),e(Tm,PUe),e(A,BUe),e(A,Mm),e(Mm,zte),e(zte,IUe),e(Mm,NUe),e(Mm,GS),e(GS,qUe),e(Mm,jUe),e(A,DUe),e(A,Em),e(Em,Wte),e(Wte,GUe),e(Em,OUe),e(Em,OS),e(OS,VUe),e(Em,XUe),e(A,zUe),e(A,Cm),e(Cm,Qte),e(Qte,WUe),e(Cm,QUe),e(Cm,VS),e(VS,HUe),e(Cm,UUe),e(A,JUe),e(A,wm),e(wm,Hte),e(Hte,YUe),e(wm,KUe),e(wm,XS),e(XS,ZUe),e(wm,eJe),e(A,oJe),e(A,Am),e(Am,Ute),e(Ute,rJe),e(Am,tJe),e(Am,zS),e(zS,aJe),e(Am,nJe),e(A,sJe),e(A,Lm),e(Lm,Jte),e(Jte,lJe),e(Lm,iJe),e(Lm,WS),e(WS,dJe),e(Lm,cJe),e(A,fJe),e(A,ym),e(ym,Yte),e(Yte,mJe),e(ym,gJe),e(ym,QS),e(QS,hJe),e(ym,pJe),e(A,uJe),e(A,xm),e(xm,Kte),e(Kte,_Je),e(xm,bJe),e(xm,HS),e(HS,vJe),e(xm,FJe),e(A,TJe),e(A,$m),e($m,Zte),e(Zte,MJe),e($m,EJe),e($m,US),e(US,CJe),e($m,wJe),e(A,AJe),e(A,km),e(km,eae),e(eae,LJe),e(km,yJe),e(km,JS),e(JS,xJe),e(km,$Je),e(A,kJe),e(A,Sm),e(Sm,oae),e(oae,SJe),e(Sm,RJe),e(Sm,YS),e(YS,PJe),e(Sm,BJe),e(A,IJe),e(A,Rm),e(Rm,rae),e(rae,NJe),e(Rm,qJe),e(Rm,KS),e(KS,jJe),e(Rm,DJe),e(A,GJe),e(A,Pm),e(Pm,tae),e(tae,OJe),e(Pm,VJe),e(Pm,ZS),e(ZS,XJe),e(Pm,zJe),e(A,WJe),e(A,Bm),e(Bm,aae),e(aae,QJe),e(Bm,HJe),e(Bm,eR),e(eR,UJe),e(Bm,JJe),e(A,YJe),e(A,Im),e(Im,nae),e(nae,KJe),e(Im,ZJe),e(Im,oR),e(oR,eYe),e(Im,oYe),e(A,rYe),e(A,Nm),e(Nm,sae),e(sae,tYe),e(Nm,aYe),e(Nm,rR),e(rR,nYe),e(Nm,sYe),e(A,lYe),e(A,qm),e(qm,lae),e(lae,iYe),e(qm,dYe),e(qm,tR),e(tR,cYe),e(qm,fYe),e(A,mYe),e(A,jm),e(jm,iae),e(iae,gYe),e(jm,hYe),e(jm,aR),e(aR,pYe),e(jm,uYe),e(A,_Ye),e(A,Dm),e(Dm,dae),e(dae,bYe),e(Dm,vYe),e(Dm,nR),e(nR,FYe),e(Dm,TYe),e(A,MYe),e(A,Gm),e(Gm,cae),e(cae,EYe),e(Gm,CYe),e(Gm,sR),e(sR,wYe),e(Gm,AYe),e(A,LYe),e(A,Om),e(Om,fae),e(fae,yYe),e(Om,xYe),e(Om,lR),e(lR,$Ye),e(Om,kYe),e(A,SYe),e(A,Vm),e(Vm,mae),e(mae,RYe),e(Vm,PYe),e(Vm,iR),e(iR,BYe),e(Vm,IYe),e(A,NYe),e(A,Xm),e(Xm,gae),e(gae,qYe),e(Xm,jYe),e(Xm,dR),e(dR,DYe),e(Xm,GYe),e(A,OYe),e(A,zm),e(zm,hae),e(hae,VYe),e(zm,XYe),e(zm,cR),e(cR,zYe),e(zm,WYe),e(A,QYe),e(A,Wm),e(Wm,pae),e(pae,HYe),e(Wm,UYe),e(Wm,fR),e(fR,JYe),e(Wm,YYe),e(A,KYe),e(A,Qm),e(Qm,uae),e(uae,ZYe),e(Qm,eKe),e(Qm,mR),e(mR,oKe),e(Qm,rKe),e(A,tKe),e(A,Hm),e(Hm,_ae),e(_ae,aKe),e(Hm,nKe),e(Hm,gR),e(gR,sKe),e(Hm,lKe),e(A,iKe),e(A,Um),e(Um,bae),e(bae,dKe),e(Um,cKe),e(Um,hR),e(hR,fKe),e(Um,mKe),e(A,gKe),e(A,Jm),e(Jm,vae),e(vae,hKe),e(Jm,pKe),e(Jm,pR),e(pR,uKe),e(Jm,_Ke),e(A,bKe),e(A,Ym),e(Ym,Fae),e(Fae,vKe),e(Ym,FKe),e(Ym,uR),e(uR,TKe),e(Ym,MKe),e(A,EKe),e(A,Km),e(Km,Tae),e(Tae,CKe),e(Km,wKe),e(Km,_R),e(_R,AKe),e(Km,LKe),e(A,yKe),e(A,Zm),e(Zm,Mae),e(Mae,xKe),e(Zm,$Ke),e(Zm,bR),e(bR,kKe),e(Zm,SKe),e(A,RKe),e(A,eg),e(eg,Eae),e(Eae,PKe),e(eg,BKe),e(eg,vR),e(vR,IKe),e(eg,NKe),e(A,qKe),e(A,og),e(og,Cae),e(Cae,jKe),e(og,DKe),e(og,FR),e(FR,GKe),e(og,OKe),e(A,VKe),e(A,rg),e(rg,wae),e(wae,XKe),e(rg,zKe),e(rg,TR),e(TR,WKe),e(rg,QKe),e(A,HKe),e(A,tg),e(tg,Aae),e(Aae,UKe),e(tg,JKe),e(tg,MR),e(MR,YKe),e(tg,KKe),e(A,ZKe),e(A,ag),e(ag,Lae),e(Lae,eZe),e(ag,oZe),e(ag,ER),e(ER,rZe),e(ag,tZe),e(A,aZe),e(A,ng),e(ng,yae),e(yae,nZe),e(ng,sZe),e(ng,CR),e(CR,lZe),e(ng,iZe),e(A,dZe),e(A,sg),e(sg,xae),e(xae,cZe),e(sg,fZe),e(sg,wR),e(wR,mZe),e(sg,gZe),e(A,hZe),e(A,lg),e(lg,$ae),e($ae,pZe),e(lg,uZe),e(lg,AR),e(AR,_Ze),e(lg,bZe),e(A,vZe),e(A,ig),e(ig,kae),e(kae,FZe),e(ig,TZe),e(ig,LR),e(LR,MZe),e(ig,EZe),e(A,CZe),e(A,dg),e(dg,Sae),e(Sae,wZe),e(dg,AZe),e(dg,yR),e(yR,LZe),e(dg,yZe),e(A,xZe),e(A,cg),e(cg,Rae),e(Rae,$Ze),e(cg,kZe),e(cg,xR),e(xR,SZe),e(cg,RZe),e(A,PZe),e(A,fg),e(fg,Pae),e(Pae,BZe),e(fg,IZe),e(fg,$R),e($R,NZe),e(fg,qZe),e(A,jZe),e(A,mg),e(mg,Bae),e(Bae,DZe),e(mg,GZe),e(mg,kR),e(kR,OZe),e(mg,VZe),e(A,XZe),e(A,gg),e(gg,Iae),e(Iae,zZe),e(gg,WZe),e(gg,SR),e(SR,QZe),e(gg,HZe),e(A,UZe),e(A,hg),e(hg,Nae),e(Nae,JZe),e(hg,YZe),e(hg,RR),e(RR,KZe),e(hg,ZZe),e(A,eeo),e(A,pg),e(pg,qae),e(qae,oeo),e(pg,reo),e(pg,PR),e(PR,teo),e(pg,aeo),e(A,neo),e(A,ug),e(ug,jae),e(jae,seo),e(ug,leo),e(ug,BR),e(BR,ieo),e(ug,deo),e(A,ceo),e(A,_g),e(_g,Dae),e(Dae,feo),e(_g,meo),e(_g,IR),e(IR,geo),e(_g,heo),e(A,peo),e(A,bg),e(bg,Gae),e(Gae,ueo),e(bg,_eo),e(bg,NR),e(NR,beo),e(bg,veo),e(A,Feo),e(A,vg),e(vg,Oae),e(Oae,Teo),e(vg,Meo),e(vg,qR),e(qR,Eeo),e(vg,Ceo),e(A,weo),e(A,Fg),e(Fg,Vae),e(Vae,Aeo),e(Fg,Leo),e(Fg,jR),e(jR,yeo),e(Fg,xeo),e(A,$eo),e(A,Tg),e(Tg,Xae),e(Xae,keo),e(Tg,Seo),e(Tg,DR),e(DR,Reo),e(Tg,Peo),e(A,Beo),e(A,Mg),e(Mg,zae),e(zae,Ieo),e(Mg,Neo),e(Mg,GR),e(GR,qeo),e(Mg,jeo),e(A,Deo),e(A,Eg),e(Eg,Wae),e(Wae,Geo),e(Eg,Oeo),e(Eg,OR),e(OR,Veo),e(Eg,Xeo),e(A,zeo),e(A,Cg),e(Cg,Qae),e(Qae,Weo),e(Cg,Qeo),e(Cg,VR),e(VR,Heo),e(Cg,Ueo),e(A,Jeo),e(A,wg),e(wg,Hae),e(Hae,Yeo),e(wg,Keo),e(wg,XR),e(XR,Zeo),e(wg,eoo),e(A,ooo),e(A,Ag),e(Ag,Uae),e(Uae,roo),e(Ag,too),e(Ag,zR),e(zR,aoo),e(Ag,noo),e(A,soo),e(A,Lg),e(Lg,Jae),e(Jae,loo),e(Lg,ioo),e(Lg,WR),e(WR,doo),e(Lg,coo),e(A,foo),e(A,yg),e(yg,Yae),e(Yae,moo),e(yg,goo),e(yg,QR),e(QR,hoo),e(yg,poo),e(A,uoo),e(A,xg),e(xg,Kae),e(Kae,_oo),e(xg,boo),e(xg,HR),e(HR,voo),e(xg,Foo),e(A,Too),e(A,$g),e($g,Zae),e(Zae,Moo),e($g,Eoo),e($g,UR),e(UR,Coo),e($g,woo),e(A,Aoo),e(A,kg),e(kg,ene),e(ene,Loo),e(kg,yoo),e(kg,JR),e(JR,xoo),e(kg,$oo),e(A,koo),e(A,Sg),e(Sg,one),e(one,Soo),e(Sg,Roo),e(Sg,YR),e(YR,Poo),e(Sg,Boo),e(A,Ioo),e(A,Rg),e(Rg,rne),e(rne,Noo),e(Rg,qoo),e(Rg,KR),e(KR,joo),e(Rg,Doo),e(A,Goo),e(A,Pg),e(Pg,tne),e(tne,Ooo),e(Pg,Voo),e(Pg,ZR),e(ZR,Xoo),e(Pg,zoo),e(A,Woo),e(A,Bg),e(Bg,ane),e(ane,Qoo),e(Bg,Hoo),e(Bg,eP),e(eP,Uoo),e(Bg,Joo),e(A,Yoo),e(A,Ig),e(Ig,nne),e(nne,Koo),e(Ig,Zoo),e(Ig,oP),e(oP,ero),e(Ig,oro),e(A,rro),e(A,Ng),e(Ng,sne),e(sne,tro),e(Ng,aro),e(Ng,rP),e(rP,nro),e(Ng,sro),e(A,lro),e(A,qg),e(qg,lne),e(lne,iro),e(qg,dro),e(qg,tP),e(tP,cro),e(qg,fro),e(A,mro),e(A,jg),e(jg,ine),e(ine,gro),e(jg,hro),e(jg,aP),e(aP,pro),e(jg,uro),e(A,_ro),e(A,Dg),e(Dg,dne),e(dne,bro),e(Dg,vro),e(Dg,nP),e(nP,Fro),e(Dg,Tro),e(wr,Mro),M(Gg,wr,null),e(wo,Ero),e(wo,Og),M(L6,Og,null),e(Og,Cro),e(Og,cne),e(cne,wro),b(f,cGe,_),b(f,ki,_),e(ki,Vg),e(Vg,fne),M(y6,fne,null),e(ki,Aro),e(ki,mne),e(mne,Lro),b(f,fGe,_),b(f,Ao,_),M(x6,Ao,null),e(Ao,yro),e(Ao,$6),e($6,xro),e($6,sP),e(sP,$ro),e($6,kro),e(Ao,Sro),e(Ao,k6),e(k6,Rro),e(k6,gne),e(gne,Pro),e(k6,Bro),e(Ao,Iro),e(Ao,Ar),M(S6,Ar,null),e(Ar,Nro),e(Ar,hne),e(hne,qro),e(Ar,jro),e(Ar,$a),e($a,Dro),e($a,pne),e(pne,Gro),e($a,Oro),e($a,une),e(une,Vro),e($a,Xro),e($a,_ne),e(_ne,zro),e($a,Wro),e(Ar,Qro),e(Ar,k),e(k,Nn),e(Nn,bne),e(bne,Hro),e(Nn,Uro),e(Nn,lP),e(lP,Jro),e(Nn,Yro),e(Nn,iP),e(iP,Kro),e(Nn,Zro),e(k,eto),e(k,qn),e(qn,vne),e(vne,oto),e(qn,rto),e(qn,dP),e(dP,tto),e(qn,ato),e(qn,cP),e(cP,nto),e(qn,sto),e(k,lto),e(k,jn),e(jn,Fne),e(Fne,ito),e(jn,dto),e(jn,fP),e(fP,cto),e(jn,fto),e(jn,mP),e(mP,mto),e(jn,gto),e(k,hto),e(k,Xg),e(Xg,Tne),e(Tne,pto),e(Xg,uto),e(Xg,gP),e(gP,_to),e(Xg,bto),e(k,vto),e(k,Dn),e(Dn,Mne),e(Mne,Fto),e(Dn,Tto),e(Dn,hP),e(hP,Mto),e(Dn,Eto),e(Dn,pP),e(pP,Cto),e(Dn,wto),e(k,Ato),e(k,zg),e(zg,Ene),e(Ene,Lto),e(zg,yto),e(zg,uP),e(uP,xto),e(zg,$to),e(k,kto),e(k,Wg),e(Wg,Cne),e(Cne,Sto),e(Wg,Rto),e(Wg,_P),e(_P,Pto),e(Wg,Bto),e(k,Ito),e(k,Qg),e(Qg,wne),e(wne,Nto),e(Qg,qto),e(Qg,bP),e(bP,jto),e(Qg,Dto),e(k,Gto),e(k,Gn),e(Gn,Ane),e(Ane,Oto),e(Gn,Vto),e(Gn,vP),e(vP,Xto),e(Gn,zto),e(Gn,FP),e(FP,Wto),e(Gn,Qto),e(k,Hto),e(k,On),e(On,Lne),e(Lne,Uto),e(On,Jto),e(On,TP),e(TP,Yto),e(On,Kto),e(On,MP),e(MP,Zto),e(On,eao),e(k,oao),e(k,Vn),e(Vn,yne),e(yne,rao),e(Vn,tao),e(Vn,EP),e(EP,aao),e(Vn,nao),e(Vn,CP),e(CP,sao),e(Vn,lao),e(k,iao),e(k,Hg),e(Hg,xne),e(xne,dao),e(Hg,cao),e(Hg,wP),e(wP,fao),e(Hg,mao),e(k,gao),e(k,Ug),e(Ug,$ne),e($ne,hao),e(Ug,pao),e(Ug,AP),e(AP,uao),e(Ug,_ao),e(k,bao),e(k,Jg),e(Jg,kne),e(kne,vao),e(Jg,Fao),e(Jg,LP),e(LP,Tao),e(Jg,Mao),e(k,Eao),e(k,Xn),e(Xn,Sne),e(Sne,Cao),e(Xn,wao),e(Xn,yP),e(yP,Aao),e(Xn,Lao),e(Xn,xP),e(xP,yao),e(Xn,xao),e(k,$ao),e(k,Yg),e(Yg,Rne),e(Rne,kao),e(Yg,Sao),e(Yg,$P),e($P,Rao),e(Yg,Pao),e(k,Bao),e(k,zn),e(zn,Pne),e(Pne,Iao),e(zn,Nao),e(zn,kP),e(kP,qao),e(zn,jao),e(zn,SP),e(SP,Dao),e(zn,Gao),e(k,Oao),e(k,Wn),e(Wn,Bne),e(Bne,Vao),e(Wn,Xao),e(Wn,RP),e(RP,zao),e(Wn,Wao),e(Wn,PP),e(PP,Qao),e(Wn,Hao),e(k,Uao),e(k,Qn),e(Qn,Ine),e(Ine,Jao),e(Qn,Yao),e(Qn,BP),e(BP,Kao),e(Qn,Zao),e(Qn,IP),e(IP,eno),e(Qn,ono),e(k,rno),e(k,Kg),e(Kg,Nne),e(Nne,tno),e(Kg,ano),e(Kg,NP),e(NP,nno),e(Kg,sno),e(k,lno),e(k,Hn),e(Hn,qne),e(qne,ino),e(Hn,dno),e(Hn,qP),e(qP,cno),e(Hn,fno),e(Hn,jP),e(jP,mno),e(Hn,gno),e(k,hno),e(k,Un),e(Un,jne),e(jne,pno),e(Un,uno),e(Un,DP),e(DP,_no),e(Un,bno),e(Un,GP),e(GP,vno),e(Un,Fno),e(k,Tno),e(k,Jn),e(Jn,Dne),e(Dne,Mno),e(Jn,Eno),e(Jn,OP),e(OP,Cno),e(Jn,wno),e(Jn,VP),e(VP,Ano),e(Jn,Lno),e(k,yno),e(k,Yn),e(Yn,Gne),e(Gne,xno),e(Yn,$no),e(Yn,XP),e(XP,kno),e(Yn,Sno),e(Yn,zP),e(zP,Rno),e(Yn,Pno),e(k,Bno),e(k,Kn),e(Kn,One),e(One,Ino),e(Kn,Nno),e(Kn,WP),e(WP,qno),e(Kn,jno),e(Kn,QP),e(QP,Dno),e(Kn,Gno),e(k,Ono),e(k,Zn),e(Zn,Vne),e(Vne,Vno),e(Zn,Xno),e(Zn,HP),e(HP,zno),e(Zn,Wno),e(Zn,UP),e(UP,Qno),e(Zn,Hno),e(k,Uno),e(k,Zg),e(Zg,Xne),e(Xne,Jno),e(Zg,Yno),e(Zg,JP),e(JP,Kno),e(Zg,Zno),e(k,eso),e(k,es),e(es,zne),e(zne,oso),e(es,rso),e(es,YP),e(YP,tso),e(es,aso),e(es,KP),e(KP,nso),e(es,sso),e(k,lso),e(k,eh),e(eh,Wne),e(Wne,iso),e(eh,dso),e(eh,ZP),e(ZP,cso),e(eh,fso),e(k,mso),e(k,os),e(os,Qne),e(Qne,gso),e(os,hso),e(os,eB),e(eB,pso),e(os,uso),e(os,oB),e(oB,_so),e(os,bso),e(k,vso),e(k,rs),e(rs,Hne),e(Hne,Fso),e(rs,Tso),e(rs,rB),e(rB,Mso),e(rs,Eso),e(rs,tB),e(tB,Cso),e(rs,wso),e(k,Aso),e(k,ts),e(ts,Une),e(Une,Lso),e(ts,yso),e(ts,aB),e(aB,xso),e(ts,$so),e(ts,nB),e(nB,kso),e(ts,Sso),e(k,Rso),e(k,oh),e(oh,Jne),e(Jne,Pso),e(oh,Bso),e(oh,sB),e(sB,Iso),e(oh,Nso),e(k,qso),e(k,as),e(as,Yne),e(Yne,jso),e(as,Dso),e(as,lB),e(lB,Gso),e(as,Oso),e(as,iB),e(iB,Vso),e(as,Xso),e(k,zso),e(k,ns),e(ns,Kne),e(Kne,Wso),e(ns,Qso),e(ns,dB),e(dB,Hso),e(ns,Uso),e(ns,cB),e(cB,Jso),e(ns,Yso),e(k,Kso),e(k,rh),e(rh,Zne),e(Zne,Zso),e(rh,elo),e(rh,fB),e(fB,olo),e(rh,rlo),e(k,tlo),e(k,ss),e(ss,ese),e(ese,alo),e(ss,nlo),e(ss,mB),e(mB,slo),e(ss,llo),e(ss,gB),e(gB,ilo),e(ss,dlo),e(k,clo),e(k,ls),e(ls,ose),e(ose,flo),e(ls,mlo),e(ls,hB),e(hB,glo),e(ls,hlo),e(ls,pB),e(pB,plo),e(ls,ulo),e(k,_lo),e(k,is),e(is,rse),e(rse,blo),e(is,vlo),e(is,uB),e(uB,Flo),e(is,Tlo),e(is,_B),e(_B,Mlo),e(is,Elo),e(k,Clo),e(k,ds),e(ds,tse),e(tse,wlo),e(ds,Alo),e(ds,bB),e(bB,Llo),e(ds,ylo),e(ds,vB),e(vB,xlo),e(ds,$lo),e(k,klo),e(k,cs),e(cs,ase),e(ase,Slo),e(cs,Rlo),e(cs,FB),e(FB,Plo),e(cs,Blo),e(cs,TB),e(TB,Ilo),e(cs,Nlo),e(k,qlo),e(k,fs),e(fs,nse),e(nse,jlo),e(fs,Dlo),e(fs,MB),e(MB,Glo),e(fs,Olo),e(fs,EB),e(EB,Vlo),e(fs,Xlo),e(k,zlo),e(k,ms),e(ms,sse),e(sse,Wlo),e(ms,Qlo),e(ms,CB),e(CB,Hlo),e(ms,Ulo),e(ms,wB),e(wB,Jlo),e(ms,Ylo),e(k,Klo),e(k,gs),e(gs,lse),e(lse,Zlo),e(gs,eio),e(gs,AB),e(AB,oio),e(gs,rio),e(gs,LB),e(LB,tio),e(gs,aio),e(k,nio),e(k,th),e(th,ise),e(ise,sio),e(th,lio),e(th,yB),e(yB,iio),e(th,dio),e(k,cio),e(k,hs),e(hs,dse),e(dse,fio),e(hs,mio),e(hs,xB),e(xB,gio),e(hs,hio),e(hs,$B),e($B,pio),e(hs,uio),e(k,_io),e(k,ah),e(ah,cse),e(cse,bio),e(ah,vio),e(ah,kB),e(kB,Fio),e(ah,Tio),e(k,Mio),e(k,nh),e(nh,fse),e(fse,Eio),e(nh,Cio),e(nh,SB),e(SB,wio),e(nh,Aio),e(k,Lio),e(k,ps),e(ps,mse),e(mse,yio),e(ps,xio),e(ps,RB),e(RB,$io),e(ps,kio),e(ps,PB),e(PB,Sio),e(ps,Rio),e(k,Pio),e(k,us),e(us,gse),e(gse,Bio),e(us,Iio),e(us,BB),e(BB,Nio),e(us,qio),e(us,IB),e(IB,jio),e(us,Dio),e(k,Gio),e(k,_s),e(_s,hse),e(hse,Oio),e(_s,Vio),e(_s,NB),e(NB,Xio),e(_s,zio),e(_s,qB),e(qB,Wio),e(_s,Qio),e(k,Hio),e(k,sh),e(sh,pse),e(pse,Uio),e(sh,Jio),e(sh,jB),e(jB,Yio),e(sh,Kio),e(k,Zio),e(k,bs),e(bs,use),e(use,edo),e(bs,odo),e(bs,DB),e(DB,rdo),e(bs,tdo),e(bs,GB),e(GB,ado),e(bs,ndo),e(k,sdo),e(k,vs),e(vs,_se),e(_se,ldo),e(vs,ido),e(vs,OB),e(OB,ddo),e(vs,cdo),e(vs,VB),e(VB,fdo),e(vs,mdo),e(k,gdo),e(k,Fs),e(Fs,bse),e(bse,hdo),e(Fs,pdo),e(Fs,XB),e(XB,udo),e(Fs,_do),e(Fs,zB),e(zB,bdo),e(Fs,vdo),e(k,Fdo),e(k,Ts),e(Ts,vse),e(vse,Tdo),e(Ts,Mdo),e(Ts,WB),e(WB,Edo),e(Ts,Cdo),e(Ts,QB),e(QB,wdo),e(Ts,Ado),e(k,Ldo),e(k,Ms),e(Ms,Fse),e(Fse,ydo),e(Ms,xdo),e(Ms,HB),e(HB,$do),e(Ms,kdo),e(Ms,UB),e(UB,Sdo),e(Ms,Rdo),e(k,Pdo),e(k,Es),e(Es,Tse),e(Tse,Bdo),e(Es,Ido),e(Es,JB),e(JB,Ndo),e(Es,qdo),e(Es,YB),e(YB,jdo),e(Es,Ddo),e(k,Gdo),e(k,lh),e(lh,Mse),e(Mse,Odo),e(lh,Vdo),e(lh,KB),e(KB,Xdo),e(lh,zdo),e(k,Wdo),e(k,Cs),e(Cs,Ese),e(Ese,Qdo),e(Cs,Hdo),e(Cs,ZB),e(ZB,Udo),e(Cs,Jdo),e(Cs,eI),e(eI,Ydo),e(Cs,Kdo),e(k,Zdo),e(k,ih),e(ih,Cse),e(Cse,eco),e(ih,oco),e(ih,oI),e(oI,rco),e(ih,tco),e(k,aco),e(k,dh),e(dh,wse),e(wse,nco),e(dh,sco),e(dh,rI),e(rI,lco),e(dh,ico),e(k,dco),e(k,ch),e(ch,Ase),e(Ase,cco),e(ch,fco),e(ch,tI),e(tI,mco),e(ch,gco),e(k,hco),e(k,fh),e(fh,Lse),e(Lse,pco),e(fh,uco),e(fh,aI),e(aI,_co),e(fh,bco),e(k,vco),e(k,ws),e(ws,yse),e(yse,Fco),e(ws,Tco),e(ws,nI),e(nI,Mco),e(ws,Eco),e(ws,sI),e(sI,Cco),e(ws,wco),e(k,Aco),e(k,mh),e(mh,xse),e(xse,Lco),e(mh,yco),e(mh,lI),e(lI,xco),e(mh,$co),e(k,kco),e(k,As),e(As,$se),e($se,Sco),e(As,Rco),e(As,iI),e(iI,Pco),e(As,Bco),e(As,dI),e(dI,Ico),e(As,Nco),e(k,qco),e(k,Ls),e(Ls,kse),e(kse,jco),e(Ls,Dco),e(Ls,cI),e(cI,Gco),e(Ls,Oco),e(Ls,fI),e(fI,Vco),e(Ls,Xco),e(k,zco),e(k,ys),e(ys,Sse),e(Sse,Wco),e(ys,Qco),e(ys,mI),e(mI,Hco),e(ys,Uco),e(ys,gI),e(gI,Jco),e(ys,Yco),e(k,Kco),e(k,xs),e(xs,Rse),e(Rse,Zco),e(xs,efo),e(xs,hI),e(hI,ofo),e(xs,rfo),e(xs,pI),e(pI,tfo),e(xs,afo),e(k,nfo),e(k,$s),e($s,Pse),e(Pse,sfo),e($s,lfo),e($s,uI),e(uI,ifo),e($s,dfo),e($s,_I),e(_I,cfo),e($s,ffo),e(k,mfo),e(k,ks),e(ks,Bse),e(Bse,gfo),e(ks,hfo),e(ks,bI),e(bI,pfo),e(ks,ufo),e(ks,vI),e(vI,_fo),e(ks,bfo),e(k,vfo),e(k,gh),e(gh,Ise),e(Ise,Ffo),e(gh,Tfo),e(gh,FI),e(FI,Mfo),e(gh,Efo),e(k,Cfo),e(k,hh),e(hh,Nse),e(Nse,wfo),e(hh,Afo),e(hh,TI),e(TI,Lfo),e(hh,yfo),e(k,xfo),e(k,Ss),e(Ss,qse),e(qse,$fo),e(Ss,kfo),e(Ss,MI),e(MI,Sfo),e(Ss,Rfo),e(Ss,EI),e(EI,Pfo),e(Ss,Bfo),e(k,Ifo),e(k,Rs),e(Rs,jse),e(jse,Nfo),e(Rs,qfo),e(Rs,CI),e(CI,jfo),e(Rs,Dfo),e(Rs,wI),e(wI,Gfo),e(Rs,Ofo),e(k,Vfo),e(k,Ps),e(Ps,Dse),e(Dse,Xfo),e(Ps,zfo),e(Ps,AI),e(AI,Wfo),e(Ps,Qfo),e(Ps,LI),e(LI,Hfo),e(Ps,Ufo),e(k,Jfo),e(k,ph),e(ph,Gse),e(Gse,Yfo),e(ph,Kfo),e(ph,yI),e(yI,Zfo),e(ph,emo),e(k,omo),e(k,uh),e(uh,Ose),e(Ose,rmo),e(uh,tmo),e(uh,xI),e(xI,amo),e(uh,nmo),e(k,smo),e(k,_h),e(_h,Vse),e(Vse,lmo),e(_h,imo),e(_h,$I),e($I,dmo),e(_h,cmo),e(k,fmo),e(k,Bs),e(Bs,Xse),e(Xse,mmo),e(Bs,gmo),e(Bs,kI),e(kI,hmo),e(Bs,pmo),e(Bs,SI),e(SI,umo),e(Bs,_mo),e(k,bmo),e(k,Is),e(Is,zse),e(zse,vmo),e(Is,Fmo),e(Is,RI),e(RI,Tmo),e(Is,Mmo),e(Is,PI),e(PI,Emo),e(Is,Cmo),e(k,wmo),e(k,bh),e(bh,Wse),e(Wse,Amo),e(bh,Lmo),e(bh,BI),e(BI,ymo),e(bh,xmo),e(k,$mo),e(k,vh),e(vh,Qse),e(Qse,kmo),e(vh,Smo),e(vh,II),e(II,Rmo),e(vh,Pmo),e(k,Bmo),e(k,Fh),e(Fh,Hse),e(Hse,Imo),e(Fh,Nmo),e(Fh,NI),e(NI,qmo),e(Fh,jmo),e(k,Dmo),e(k,Ns),e(Ns,Use),e(Use,Gmo),e(Ns,Omo),e(Ns,qI),e(qI,Vmo),e(Ns,Xmo),e(Ns,jI),e(jI,zmo),e(Ns,Wmo),e(k,Qmo),e(k,Th),e(Th,Jse),e(Jse,Hmo),e(Th,Umo),e(Th,DI),e(DI,Jmo),e(Th,Ymo),e(k,Kmo),e(k,Mh),e(Mh,Yse),e(Yse,Zmo),e(Mh,ego),e(Mh,GI),e(GI,ogo),e(Mh,rgo),e(k,tgo),e(k,qs),e(qs,Kse),e(Kse,ago),e(qs,ngo),e(qs,OI),e(OI,sgo),e(qs,lgo),e(qs,VI),e(VI,igo),e(qs,dgo),e(k,cgo),e(k,js),e(js,Zse),e(Zse,fgo),e(js,mgo),e(js,XI),e(XI,ggo),e(js,hgo),e(js,zI),e(zI,pgo),e(js,ugo),e(k,_go),e(k,Ds),e(Ds,ele),e(ele,bgo),e(Ds,vgo),e(Ds,WI),e(WI,Fgo),e(Ds,Tgo),e(Ds,QI),e(QI,Mgo),e(Ds,Ego),e(k,Cgo),e(k,Gs),e(Gs,ole),e(ole,wgo),e(Gs,Ago),e(Gs,HI),e(HI,Lgo),e(Gs,ygo),e(Gs,UI),e(UI,xgo),e(Gs,$go),e(Ar,kgo),M(Eh,Ar,null),e(Ao,Sgo),e(Ao,Ch),M(R6,Ch,null),e(Ch,Rgo),e(Ch,rle),e(rle,Pgo),b(f,mGe,_),b(f,Si,_),e(Si,wh),e(wh,tle),M(P6,tle,null),e(Si,Bgo),e(Si,ale),e(ale,Igo),b(f,gGe,_),b(f,Lo,_),M(B6,Lo,null),e(Lo,Ngo),e(Lo,I6),e(I6,qgo),e(I6,JI),e(JI,jgo),e(I6,Dgo),e(Lo,Ggo),e(Lo,N6),e(N6,Ogo),e(N6,nle),e(nle,Vgo),e(N6,Xgo),e(Lo,zgo),e(Lo,He),M(q6,He,null),e(He,Wgo),e(He,sle),e(sle,Qgo),e(He,Hgo),e(He,ka),e(ka,Ugo),e(ka,lle),e(lle,Jgo),e(ka,Ygo),e(ka,ile),e(ile,Kgo),e(ka,Zgo),e(ka,dle),e(dle,eho),e(ka,oho),e(He,rho),e(He,Y),e(Y,Ah),e(Ah,cle),e(cle,tho),e(Ah,aho),e(Ah,YI),e(YI,nho),e(Ah,sho),e(Y,lho),e(Y,Lh),e(Lh,fle),e(fle,iho),e(Lh,dho),e(Lh,KI),e(KI,cho),e(Lh,fho),e(Y,mho),e(Y,yh),e(yh,mle),e(mle,gho),e(yh,hho),e(yh,ZI),e(ZI,pho),e(yh,uho),e(Y,_ho),e(Y,xh),e(xh,gle),e(gle,bho),e(xh,vho),e(xh,eN),e(eN,Fho),e(xh,Tho),e(Y,Mho),e(Y,$h),e($h,hle),e(hle,Eho),e($h,Cho),e($h,oN),e(oN,who),e($h,Aho),e(Y,Lho),e(Y,kh),e(kh,ple),e(ple,yho),e(kh,xho),e(kh,rN),e(rN,$ho),e(kh,kho),e(Y,Sho),e(Y,Sh),e(Sh,ule),e(ule,Rho),e(Sh,Pho),e(Sh,tN),e(tN,Bho),e(Sh,Iho),e(Y,Nho),e(Y,Rh),e(Rh,_le),e(_le,qho),e(Rh,jho),e(Rh,aN),e(aN,Dho),e(Rh,Gho),e(Y,Oho),e(Y,Ph),e(Ph,ble),e(ble,Vho),e(Ph,Xho),e(Ph,nN),e(nN,zho),e(Ph,Who),e(Y,Qho),e(Y,Bh),e(Bh,vle),e(vle,Hho),e(Bh,Uho),e(Bh,sN),e(sN,Jho),e(Bh,Yho),e(Y,Kho),e(Y,Ih),e(Ih,Fle),e(Fle,Zho),e(Ih,epo),e(Ih,lN),e(lN,opo),e(Ih,rpo),e(Y,tpo),e(Y,Nh),e(Nh,Tle),e(Tle,apo),e(Nh,npo),e(Nh,iN),e(iN,spo),e(Nh,lpo),e(Y,ipo),e(Y,qh),e(qh,Mle),e(Mle,dpo),e(qh,cpo),e(qh,dN),e(dN,fpo),e(qh,mpo),e(Y,gpo),e(Y,jh),e(jh,Ele),e(Ele,hpo),e(jh,ppo),e(jh,cN),e(cN,upo),e(jh,_po),e(Y,bpo),e(Y,Dh),e(Dh,Cle),e(Cle,vpo),e(Dh,Fpo),e(Dh,fN),e(fN,Tpo),e(Dh,Mpo),e(Y,Epo),e(Y,Gh),e(Gh,wle),e(wle,Cpo),e(Gh,wpo),e(Gh,mN),e(mN,Apo),e(Gh,Lpo),e(Y,ypo),e(Y,Oh),e(Oh,Ale),e(Ale,xpo),e(Oh,$po),e(Oh,gN),e(gN,kpo),e(Oh,Spo),e(Y,Rpo),e(Y,Vh),e(Vh,Lle),e(Lle,Ppo),e(Vh,Bpo),e(Vh,hN),e(hN,Ipo),e(Vh,Npo),e(Y,qpo),e(Y,Xh),e(Xh,yle),e(yle,jpo),e(Xh,Dpo),e(Xh,pN),e(pN,Gpo),e(Xh,Opo),e(Y,Vpo),e(Y,zh),e(zh,xle),e(xle,Xpo),e(zh,zpo),e(zh,uN),e(uN,Wpo),e(zh,Qpo),e(Y,Hpo),e(Y,Wh),e(Wh,$le),e($le,Upo),e(Wh,Jpo),e(Wh,_N),e(_N,Ypo),e(Wh,Kpo),e(Y,Zpo),e(Y,Qh),e(Qh,kle),e(kle,euo),e(Qh,ouo),e(Qh,bN),e(bN,ruo),e(Qh,tuo),e(Y,auo),e(Y,Hh),e(Hh,Sle),e(Sle,nuo),e(Hh,suo),e(Hh,vN),e(vN,luo),e(Hh,iuo),e(Y,duo),e(Y,Uh),e(Uh,Rle),e(Rle,cuo),e(Uh,fuo),e(Uh,FN),e(FN,muo),e(Uh,guo),e(Y,huo),e(Y,Jh),e(Jh,Ple),e(Ple,puo),e(Jh,uuo),e(Jh,TN),e(TN,_uo),e(Jh,buo),e(Y,vuo),e(Y,Yh),e(Yh,Ble),e(Ble,Fuo),e(Yh,Tuo),e(Yh,MN),e(MN,Muo),e(Yh,Euo),e(Y,Cuo),e(Y,Kh),e(Kh,Ile),e(Ile,wuo),e(Kh,Auo),e(Kh,EN),e(EN,Luo),e(Kh,yuo),e(Y,xuo),e(Y,Zh),e(Zh,Nle),e(Nle,$uo),e(Zh,kuo),e(Zh,CN),e(CN,Suo),e(Zh,Ruo),e(Y,Puo),e(Y,ep),e(ep,qle),e(qle,Buo),e(ep,Iuo),e(ep,wN),e(wN,Nuo),e(ep,quo),e(Y,juo),e(Y,op),e(op,jle),e(jle,Duo),e(op,Guo),e(op,AN),e(AN,Ouo),e(op,Vuo),e(Y,Xuo),e(Y,rp),e(rp,Dle),e(Dle,zuo),e(rp,Wuo),e(rp,LN),e(LN,Quo),e(rp,Huo),e(Y,Uuo),e(Y,tp),e(tp,Gle),e(Gle,Juo),e(tp,Yuo),e(tp,yN),e(yN,Kuo),e(tp,Zuo),e(He,e_o),M(ap,He,null),e(He,o_o),M(np,He,null),e(Lo,r_o),e(Lo,sp),M(j6,sp,null),e(sp,t_o),e(sp,Ole),e(Ole,a_o),b(f,hGe,_),b(f,Ri,_),e(Ri,lp),e(lp,Vle),M(D6,Vle,null),e(Ri,n_o),e(Ri,Xle),e(Xle,s_o),b(f,pGe,_),b(f,yo,_),M(G6,yo,null),e(yo,l_o),e(yo,O6),e(O6,i_o),e(O6,xN),e(xN,d_o),e(O6,c_o),e(yo,f_o),e(yo,V6),e(V6,m_o),e(V6,zle),e(zle,g_o),e(V6,h_o),e(yo,p_o),e(yo,Ue),M(X6,Ue,null),e(Ue,u_o),e(Ue,Wle),e(Wle,__o),e(Ue,b_o),e(Ue,Pi),e(Pi,v_o),e(Pi,Qle),e(Qle,F_o),e(Pi,T_o),e(Pi,Hle),e(Hle,M_o),e(Pi,E_o),e(Ue,C_o),e(Ue,he),e(he,ip),e(ip,Ule),e(Ule,w_o),e(ip,A_o),e(ip,$N),e($N,L_o),e(ip,y_o),e(he,x_o),e(he,dp),e(dp,Jle),e(Jle,$_o),e(dp,k_o),e(dp,Yle),e(Yle,S_o),e(dp,R_o),e(he,P_o),e(he,cp),e(cp,Kle),e(Kle,B_o),e(cp,I_o),e(cp,kN),e(kN,N_o),e(cp,q_o),e(he,j_o),e(he,fp),e(fp,Zle),e(Zle,D_o),e(fp,G_o),e(fp,SN),e(SN,O_o),e(fp,V_o),e(he,X_o),e(he,mp),e(mp,eie),e(eie,z_o),e(mp,W_o),e(mp,RN),e(RN,Q_o),e(mp,H_o),e(he,U_o),e(he,gp),e(gp,oie),e(oie,J_o),e(gp,Y_o),e(gp,PN),e(PN,K_o),e(gp,Z_o),e(he,e1o),e(he,hp),e(hp,rie),e(rie,o1o),e(hp,r1o),e(hp,BN),e(BN,t1o),e(hp,a1o),e(he,n1o),e(he,pp),e(pp,tie),e(tie,s1o),e(pp,l1o),e(pp,IN),e(IN,i1o),e(pp,d1o),e(he,c1o),e(he,up),e(up,aie),e(aie,f1o),e(up,m1o),e(up,NN),e(NN,g1o),e(up,h1o),e(he,p1o),e(he,_p),e(_p,nie),e(nie,u1o),e(_p,_1o),e(_p,qN),e(qN,b1o),e(_p,v1o),e(he,F1o),e(he,bp),e(bp,sie),e(sie,T1o),e(bp,M1o),e(bp,jN),e(jN,E1o),e(bp,C1o),e(he,w1o),e(he,vp),e(vp,lie),e(lie,A1o),e(vp,L1o),e(vp,DN),e(DN,y1o),e(vp,x1o),e(he,$1o),e(he,Fp),e(Fp,iie),e(iie,k1o),e(Fp,S1o),e(Fp,GN),e(GN,R1o),e(Fp,P1o),e(he,B1o),e(he,Tp),e(Tp,die),e(die,I1o),e(Tp,N1o),e(Tp,ON),e(ON,q1o),e(Tp,j1o),e(he,D1o),e(he,Mp),e(Mp,cie),e(cie,G1o),e(Mp,O1o),e(Mp,VN),e(VN,V1o),e(Mp,X1o),e(he,z1o),e(he,Ep),e(Ep,fie),e(fie,W1o),e(Ep,Q1o),e(Ep,XN),e(XN,H1o),e(Ep,U1o),e(he,J1o),e(he,Cp),e(Cp,mie),e(mie,Y1o),e(Cp,K1o),e(Cp,zN),e(zN,Z1o),e(Cp,e2o),e(Ue,o2o),M(wp,Ue,null),e(Ue,r2o),M(Ap,Ue,null),e(yo,t2o),e(yo,Lp),M(z6,Lp,null),e(Lp,a2o),e(Lp,gie),e(gie,n2o),b(f,uGe,_),b(f,Bi,_),e(Bi,yp),e(yp,hie),M(W6,hie,null),e(Bi,s2o),e(Bi,pie),e(pie,l2o),b(f,_Ge,_),b(f,xo,_),M(Q6,xo,null),e(xo,i2o),e(xo,Ii),e(Ii,d2o),e(Ii,WN),e(WN,c2o),e(Ii,f2o),e(Ii,QN),e(QN,m2o),e(Ii,g2o),e(xo,h2o),e(xo,H6),e(H6,p2o),e(H6,uie),e(uie,u2o),e(H6,_2o),e(xo,b2o),e(xo,nt),M(U6,nt,null),e(nt,v2o),e(nt,_ie),e(_ie,F2o),e(nt,T2o),e(nt,Ni),e(Ni,M2o),e(Ni,bie),e(bie,E2o),e(Ni,C2o),e(Ni,HN),e(HN,w2o),e(Ni,A2o),e(nt,L2o),M(xp,nt,null),e(xo,y2o),e(xo,Je),M(J6,Je,null),e(Je,x2o),e(Je,vie),e(vie,$2o),e(Je,k2o),e(Je,Sa),e(Sa,S2o),e(Sa,Fie),e(Fie,R2o),e(Sa,P2o),e(Sa,Tie),e(Tie,B2o),e(Sa,I2o),e(Sa,Mie),e(Mie,N2o),e(Sa,q2o),e(Je,j2o),e(Je,y),e(y,$p),e($p,Eie),e(Eie,D2o),e($p,G2o),e($p,UN),e(UN,O2o),e($p,V2o),e(y,X2o),e(y,kp),e(kp,Cie),e(Cie,z2o),e(kp,W2o),e(kp,JN),e(JN,Q2o),e(kp,H2o),e(y,U2o),e(y,Sp),e(Sp,wie),e(wie,J2o),e(Sp,Y2o),e(Sp,YN),e(YN,K2o),e(Sp,Z2o),e(y,ebo),e(y,Rp),e(Rp,Aie),e(Aie,obo),e(Rp,rbo),e(Rp,KN),e(KN,tbo),e(Rp,abo),e(y,nbo),e(y,Pp),e(Pp,Lie),e(Lie,sbo),e(Pp,lbo),e(Pp,ZN),e(ZN,ibo),e(Pp,dbo),e(y,cbo),e(y,Bp),e(Bp,yie),e(yie,fbo),e(Bp,mbo),e(Bp,eq),e(eq,gbo),e(Bp,hbo),e(y,pbo),e(y,Ip),e(Ip,xie),e(xie,ubo),e(Ip,_bo),e(Ip,oq),e(oq,bbo),e(Ip,vbo),e(y,Fbo),e(y,Np),e(Np,$ie),e($ie,Tbo),e(Np,Mbo),e(Np,rq),e(rq,Ebo),e(Np,Cbo),e(y,wbo),e(y,qp),e(qp,kie),e(kie,Abo),e(qp,Lbo),e(qp,tq),e(tq,ybo),e(qp,xbo),e(y,$bo),e(y,jp),e(jp,Sie),e(Sie,kbo),e(jp,Sbo),e(jp,aq),e(aq,Rbo),e(jp,Pbo),e(y,Bbo),e(y,Dp),e(Dp,Rie),e(Rie,Ibo),e(Dp,Nbo),e(Dp,nq),e(nq,qbo),e(Dp,jbo),e(y,Dbo),e(y,Gp),e(Gp,Pie),e(Pie,Gbo),e(Gp,Obo),e(Gp,sq),e(sq,Vbo),e(Gp,Xbo),e(y,zbo),e(y,Op),e(Op,Bie),e(Bie,Wbo),e(Op,Qbo),e(Op,lq),e(lq,Hbo),e(Op,Ubo),e(y,Jbo),e(y,Vp),e(Vp,Iie),e(Iie,Ybo),e(Vp,Kbo),e(Vp,iq),e(iq,Zbo),e(Vp,evo),e(y,ovo),e(y,Xp),e(Xp,Nie),e(Nie,rvo),e(Xp,tvo),e(Xp,dq),e(dq,avo),e(Xp,nvo),e(y,svo),e(y,zp),e(zp,qie),e(qie,lvo),e(zp,ivo),e(zp,cq),e(cq,dvo),e(zp,cvo),e(y,fvo),e(y,Wp),e(Wp,jie),e(jie,mvo),e(Wp,gvo),e(Wp,fq),e(fq,hvo),e(Wp,pvo),e(y,uvo),e(y,Qp),e(Qp,Die),e(Die,_vo),e(Qp,bvo),e(Qp,mq),e(mq,vvo),e(Qp,Fvo),e(y,Tvo),e(y,Hp),e(Hp,Gie),e(Gie,Mvo),e(Hp,Evo),e(Hp,gq),e(gq,Cvo),e(Hp,wvo),e(y,Avo),e(y,Up),e(Up,Oie),e(Oie,Lvo),e(Up,yvo),e(Up,hq),e(hq,xvo),e(Up,$vo),e(y,kvo),e(y,Jp),e(Jp,Vie),e(Vie,Svo),e(Jp,Rvo),e(Jp,pq),e(pq,Pvo),e(Jp,Bvo),e(y,Ivo),e(y,Yp),e(Yp,Xie),e(Xie,Nvo),e(Yp,qvo),e(Yp,uq),e(uq,jvo),e(Yp,Dvo),e(y,Gvo),e(y,Kp),e(Kp,zie),e(zie,Ovo),e(Kp,Vvo),e(Kp,_q),e(_q,Xvo),e(Kp,zvo),e(y,Wvo),e(y,Zp),e(Zp,Wie),e(Wie,Qvo),e(Zp,Hvo),e(Zp,bq),e(bq,Uvo),e(Zp,Jvo),e(y,Yvo),e(y,eu),e(eu,Qie),e(Qie,Kvo),e(eu,Zvo),e(eu,vq),e(vq,e0o),e(eu,o0o),e(y,r0o),e(y,ou),e(ou,Hie),e(Hie,t0o),e(ou,a0o),e(ou,Fq),e(Fq,n0o),e(ou,s0o),e(y,l0o),e(y,ru),e(ru,Uie),e(Uie,i0o),e(ru,d0o),e(ru,Tq),e(Tq,c0o),e(ru,f0o),e(y,m0o),e(y,tu),e(tu,Jie),e(Jie,g0o),e(tu,h0o),e(tu,Mq),e(Mq,p0o),e(tu,u0o),e(y,_0o),e(y,au),e(au,Yie),e(Yie,b0o),e(au,v0o),e(au,Eq),e(Eq,F0o),e(au,T0o),e(y,M0o),e(y,nu),e(nu,Kie),e(Kie,E0o),e(nu,C0o),e(nu,Cq),e(Cq,w0o),e(nu,A0o),e(y,L0o),e(y,su),e(su,Zie),e(Zie,y0o),e(su,x0o),e(su,wq),e(wq,$0o),e(su,k0o),e(y,S0o),e(y,lu),e(lu,ede),e(ede,R0o),e(lu,P0o),e(lu,Aq),e(Aq,B0o),e(lu,I0o),e(y,N0o),e(y,iu),e(iu,ode),e(ode,q0o),e(iu,j0o),e(iu,Lq),e(Lq,D0o),e(iu,G0o),e(y,O0o),e(y,Os),e(Os,rde),e(rde,V0o),e(Os,X0o),e(Os,yq),e(yq,z0o),e(Os,W0o),e(Os,xq),e(xq,Q0o),e(Os,H0o),e(y,U0o),e(y,du),e(du,tde),e(tde,J0o),e(du,Y0o),e(du,$q),e($q,K0o),e(du,Z0o),e(y,eFo),e(y,cu),e(cu,ade),e(ade,oFo),e(cu,rFo),e(cu,kq),e(kq,tFo),e(cu,aFo),e(y,nFo),e(y,fu),e(fu,nde),e(nde,sFo),e(fu,lFo),e(fu,Sq),e(Sq,iFo),e(fu,dFo),e(y,cFo),e(y,mu),e(mu,sde),e(sde,fFo),e(mu,mFo),e(mu,Rq),e(Rq,gFo),e(mu,hFo),e(y,pFo),e(y,gu),e(gu,lde),e(lde,uFo),e(gu,_Fo),e(gu,Pq),e(Pq,bFo),e(gu,vFo),e(y,FFo),e(y,hu),e(hu,ide),e(ide,TFo),e(hu,MFo),e(hu,Bq),e(Bq,EFo),e(hu,CFo),e(y,wFo),e(y,pu),e(pu,dde),e(dde,AFo),e(pu,LFo),e(pu,Iq),e(Iq,yFo),e(pu,xFo),e(y,$Fo),e(y,uu),e(uu,cde),e(cde,kFo),e(uu,SFo),e(uu,Nq),e(Nq,RFo),e(uu,PFo),e(y,BFo),e(y,_u),e(_u,fde),e(fde,IFo),e(_u,NFo),e(_u,qq),e(qq,qFo),e(_u,jFo),e(y,DFo),e(y,bu),e(bu,mde),e(mde,GFo),e(bu,OFo),e(bu,jq),e(jq,VFo),e(bu,XFo),e(y,zFo),e(y,vu),e(vu,gde),e(gde,WFo),e(vu,QFo),e(vu,Dq),e(Dq,HFo),e(vu,UFo),e(y,JFo),e(y,Fu),e(Fu,hde),e(hde,YFo),e(Fu,KFo),e(Fu,Gq),e(Gq,ZFo),e(Fu,eTo),e(y,oTo),e(y,Tu),e(Tu,pde),e(pde,rTo),e(Tu,tTo),e(Tu,Oq),e(Oq,aTo),e(Tu,nTo),e(y,sTo),e(y,Mu),e(Mu,ude),e(ude,lTo),e(Mu,iTo),e(Mu,Vq),e(Vq,dTo),e(Mu,cTo),e(y,fTo),e(y,Eu),e(Eu,_de),e(_de,mTo),e(Eu,gTo),e(Eu,Xq),e(Xq,hTo),e(Eu,pTo),e(y,uTo),e(y,Cu),e(Cu,bde),e(bde,_To),e(Cu,bTo),e(Cu,zq),e(zq,vTo),e(Cu,FTo),e(y,TTo),e(y,wu),e(wu,vde),e(vde,MTo),e(wu,ETo),e(wu,Wq),e(Wq,CTo),e(wu,wTo),e(y,ATo),e(y,Au),e(Au,Fde),e(Fde,LTo),e(Au,yTo),e(Au,Qq),e(Qq,xTo),e(Au,$To),e(y,kTo),e(y,Lu),e(Lu,Tde),e(Tde,STo),e(Lu,RTo),e(Lu,Hq),e(Hq,PTo),e(Lu,BTo),e(y,ITo),e(y,yu),e(yu,Mde),e(Mde,NTo),e(yu,qTo),e(yu,Uq),e(Uq,jTo),e(yu,DTo),e(y,GTo),e(y,xu),e(xu,Ede),e(Ede,OTo),e(xu,VTo),e(xu,Jq),e(Jq,XTo),e(xu,zTo),e(y,WTo),e(y,$u),e($u,Cde),e(Cde,QTo),e($u,HTo),e($u,Yq),e(Yq,UTo),e($u,JTo),e(y,YTo),e(y,ku),e(ku,wde),e(wde,KTo),e(ku,ZTo),e(ku,Kq),e(Kq,e7o),e(ku,o7o),e(y,r7o),e(y,Su),e(Su,Ade),e(Ade,t7o),e(Su,a7o),e(Su,Zq),e(Zq,n7o),e(Su,s7o),e(y,l7o),e(y,Ru),e(Ru,Lde),e(Lde,i7o),e(Ru,d7o),e(Ru,ej),e(ej,c7o),e(Ru,f7o),e(y,m7o),e(y,Pu),e(Pu,yde),e(yde,g7o),e(Pu,h7o),e(Pu,oj),e(oj,p7o),e(Pu,u7o),e(y,_7o),e(y,Bu),e(Bu,xde),e(xde,b7o),e(Bu,v7o),e(Bu,rj),e(rj,F7o),e(Bu,T7o),e(y,M7o),e(y,Iu),e(Iu,$de),e($de,E7o),e(Iu,C7o),e(Iu,tj),e(tj,w7o),e(Iu,A7o),e(y,L7o),e(y,Nu),e(Nu,kde),e(kde,y7o),e(Nu,x7o),e(Nu,aj),e(aj,$7o),e(Nu,k7o),e(y,S7o),e(y,qu),e(qu,Sde),e(Sde,R7o),e(qu,P7o),e(qu,nj),e(nj,B7o),e(qu,I7o),e(y,N7o),e(y,ju),e(ju,Rde),e(Rde,q7o),e(ju,j7o),e(ju,sj),e(sj,D7o),e(ju,G7o),e(y,O7o),e(y,Du),e(Du,Pde),e(Pde,V7o),e(Du,X7o),e(Du,lj),e(lj,z7o),e(Du,W7o),e(y,Q7o),e(y,Gu),e(Gu,Bde),e(Bde,H7o),e(Gu,U7o),e(Gu,ij),e(ij,J7o),e(Gu,Y7o),e(y,K7o),e(y,Ou),e(Ou,Ide),e(Ide,Z7o),e(Ou,e9o),e(Ou,dj),e(dj,o9o),e(Ou,r9o),e(y,t9o),e(y,Vu),e(Vu,Nde),e(Nde,a9o),e(Vu,n9o),e(Vu,cj),e(cj,s9o),e(Vu,l9o),e(y,i9o),e(y,Xu),e(Xu,qde),e(qde,d9o),e(Xu,c9o),e(Xu,fj),e(fj,f9o),e(Xu,m9o),e(y,g9o),e(y,zu),e(zu,jde),e(jde,h9o),e(zu,p9o),e(zu,mj),e(mj,u9o),e(zu,_9o),e(y,b9o),e(y,Wu),e(Wu,Dde),e(Dde,v9o),e(Wu,F9o),e(Wu,gj),e(gj,T9o),e(Wu,M9o),e(y,E9o),e(y,Qu),e(Qu,Gde),e(Gde,C9o),e(Qu,w9o),e(Qu,hj),e(hj,A9o),e(Qu,L9o),e(y,y9o),e(y,Hu),e(Hu,Ode),e(Ode,x9o),e(Hu,$9o),e(Hu,pj),e(pj,k9o),e(Hu,S9o),e(y,R9o),e(y,Uu),e(Uu,Vde),e(Vde,P9o),e(Uu,B9o),e(Uu,uj),e(uj,I9o),e(Uu,N9o),e(y,q9o),e(y,Ju),e(Ju,Xde),e(Xde,j9o),e(Ju,D9o),e(Ju,_j),e(_j,G9o),e(Ju,O9o),e(y,V9o),e(y,Yu),e(Yu,zde),e(zde,X9o),e(Yu,z9o),e(Yu,bj),e(bj,W9o),e(Yu,Q9o),e(y,H9o),e(y,Ku),e(Ku,Wde),e(Wde,U9o),e(Ku,J9o),e(Ku,vj),e(vj,Y9o),e(Ku,K9o),e(y,Z9o),e(y,Zu),e(Zu,Qde),e(Qde,eMo),e(Zu,oMo),e(Zu,Fj),e(Fj,rMo),e(Zu,tMo),e(y,aMo),e(y,e_),e(e_,Hde),e(Hde,nMo),e(e_,sMo),e(e_,Tj),e(Tj,lMo),e(e_,iMo),e(y,dMo),e(y,o_),e(o_,Ude),e(Ude,cMo),e(o_,fMo),e(o_,Mj),e(Mj,mMo),e(o_,gMo),e(y,hMo),e(y,r_),e(r_,Jde),e(Jde,pMo),e(r_,uMo),e(r_,Ej),e(Ej,_Mo),e(r_,bMo),e(y,vMo),e(y,t_),e(t_,Yde),e(Yde,FMo),e(t_,TMo),e(t_,Cj),e(Cj,MMo),e(t_,EMo),e(y,CMo),e(y,a_),e(a_,Kde),e(Kde,wMo),e(a_,AMo),e(a_,wj),e(wj,LMo),e(a_,yMo),e(y,xMo),e(y,n_),e(n_,Zde),e(Zde,$Mo),e(n_,kMo),e(n_,Aj),e(Aj,SMo),e(n_,RMo),e(y,PMo),e(y,s_),e(s_,ece),e(ece,BMo),e(s_,IMo),e(s_,Lj),e(Lj,NMo),e(s_,qMo),e(y,jMo),e(y,l_),e(l_,oce),e(oce,DMo),e(l_,GMo),e(l_,yj),e(yj,OMo),e(l_,VMo),e(y,XMo),e(y,i_),e(i_,rce),e(rce,zMo),e(i_,WMo),e(i_,xj),e(xj,QMo),e(i_,HMo),e(y,UMo),e(y,d_),e(d_,tce),e(tce,JMo),e(d_,YMo),e(d_,$j),e($j,KMo),e(d_,ZMo),e(y,e4o),e(y,c_),e(c_,ace),e(ace,o4o),e(c_,r4o),e(c_,kj),e(kj,t4o),e(c_,a4o),e(y,n4o),e(y,f_),e(f_,nce),e(nce,s4o),e(f_,l4o),e(f_,Sj),e(Sj,i4o),e(f_,d4o),e(y,c4o),e(y,m_),e(m_,sce),e(sce,f4o),e(m_,m4o),e(m_,Rj),e(Rj,g4o),e(m_,h4o),e(y,p4o),e(y,g_),e(g_,lce),e(lce,u4o),e(g_,_4o),e(g_,Pj),e(Pj,b4o),e(g_,v4o),e(y,F4o),e(y,h_),e(h_,ice),e(ice,T4o),e(h_,M4o),e(h_,Bj),e(Bj,E4o),e(h_,C4o),e(y,w4o),e(y,p_),e(p_,dce),e(dce,A4o),e(p_,L4o),e(p_,Ij),e(Ij,y4o),e(p_,x4o),e(y,$4o),e(y,u_),e(u_,cce),e(cce,k4o),e(u_,S4o),e(u_,Nj),e(Nj,R4o),e(u_,P4o),e(y,B4o),e(y,__),e(__,fce),e(fce,I4o),e(__,N4o),e(__,qj),e(qj,q4o),e(__,j4o),e(y,D4o),e(y,b_),e(b_,mce),e(mce,G4o),e(b_,O4o),e(b_,jj),e(jj,V4o),e(b_,X4o),e(y,z4o),e(y,v_),e(v_,gce),e(gce,W4o),e(v_,Q4o),e(v_,Dj),e(Dj,H4o),e(v_,U4o),e(y,J4o),e(y,F_),e(F_,hce),e(hce,Y4o),e(F_,K4o),e(F_,Gj),e(Gj,Z4o),e(F_,eEo),e(y,oEo),e(y,T_),e(T_,pce),e(pce,rEo),e(T_,tEo),e(T_,Oj),e(Oj,aEo),e(T_,nEo),e(y,sEo),e(y,M_),e(M_,uce),e(uce,lEo),e(M_,iEo),e(M_,Vj),e(Vj,dEo),e(M_,cEo),e(y,fEo),e(y,E_),e(E_,_ce),e(_ce,mEo),e(E_,gEo),e(E_,Xj),e(Xj,hEo),e(E_,pEo),e(y,uEo),e(y,C_),e(C_,bce),e(bce,_Eo),e(C_,bEo),e(C_,zj),e(zj,vEo),e(C_,FEo),e(y,TEo),e(y,w_),e(w_,vce),e(vce,MEo),e(w_,EEo),e(w_,Wj),e(Wj,CEo),e(w_,wEo),e(y,AEo),e(y,A_),e(A_,Fce),e(Fce,LEo),e(A_,yEo),e(A_,Qj),e(Qj,xEo),e(A_,$Eo),e(y,kEo),e(y,L_),e(L_,Tce),e(Tce,SEo),e(L_,REo),e(L_,Hj),e(Hj,PEo),e(L_,BEo),e(Je,IEo),e(Je,y_),e(y_,NEo),e(y_,Mce),e(Mce,qEo),e(y_,jEo),e(y_,Ece),e(Ece,DEo),e(Je,GEo),M(x_,Je,null),b(f,bGe,_),b(f,qi,_),e(qi,$_),e($_,Cce),M(Y6,Cce,null),e(qi,OEo),e(qi,wce),e(wce,VEo),b(f,vGe,_),b(f,$o,_),M(K6,$o,null),e($o,XEo),e($o,ji),e(ji,zEo),e(ji,Uj),e(Uj,WEo),e(ji,QEo),e(ji,Jj),e(Jj,HEo),e(ji,UEo),e($o,JEo),e($o,Z6),e(Z6,YEo),e(Z6,Ace),e(Ace,KEo),e(Z6,ZEo),e($o,eCo),e($o,st),M(eL,st,null),e(st,oCo),e(st,Lce),e(Lce,rCo),e(st,tCo),e(st,Di),e(Di,aCo),e(Di,yce),e(yce,nCo),e(Di,sCo),e(Di,Yj),e(Yj,lCo),e(Di,iCo),e(st,dCo),M(k_,st,null),e($o,cCo),e($o,Ye),M(oL,Ye,null),e(Ye,fCo),e(Ye,xce),e(xce,mCo),e(Ye,gCo),e(Ye,Ra),e(Ra,hCo),e(Ra,$ce),e($ce,pCo),e(Ra,uCo),e(Ra,kce),e(kce,_Co),e(Ra,bCo),e(Ra,Sce),e(Sce,vCo),e(Ra,FCo),e(Ye,TCo),e(Ye,G),e(G,S_),e(S_,Rce),e(Rce,MCo),e(S_,ECo),e(S_,Kj),e(Kj,CCo),e(S_,wCo),e(G,ACo),e(G,R_),e(R_,Pce),e(Pce,LCo),e(R_,yCo),e(R_,Zj),e(Zj,xCo),e(R_,$Co),e(G,kCo),e(G,P_),e(P_,Bce),e(Bce,SCo),e(P_,RCo),e(P_,eD),e(eD,PCo),e(P_,BCo),e(G,ICo),e(G,B_),e(B_,Ice),e(Ice,NCo),e(B_,qCo),e(B_,oD),e(oD,jCo),e(B_,DCo),e(G,GCo),e(G,I_),e(I_,Nce),e(Nce,OCo),e(I_,VCo),e(I_,rD),e(rD,XCo),e(I_,zCo),e(G,WCo),e(G,N_),e(N_,qce),e(qce,QCo),e(N_,HCo),e(N_,tD),e(tD,UCo),e(N_,JCo),e(G,YCo),e(G,q_),e(q_,jce),e(jce,KCo),e(q_,ZCo),e(q_,aD),e(aD,e5o),e(q_,o5o),e(G,r5o),e(G,j_),e(j_,Dce),e(Dce,t5o),e(j_,a5o),e(j_,nD),e(nD,n5o),e(j_,s5o),e(G,l5o),e(G,D_),e(D_,Gce),e(Gce,i5o),e(D_,d5o),e(D_,sD),e(sD,c5o),e(D_,f5o),e(G,m5o),e(G,G_),e(G_,Oce),e(Oce,g5o),e(G_,h5o),e(G_,lD),e(lD,p5o),e(G_,u5o),e(G,_5o),e(G,O_),e(O_,Vce),e(Vce,b5o),e(O_,v5o),e(O_,iD),e(iD,F5o),e(O_,T5o),e(G,M5o),e(G,V_),e(V_,Xce),e(Xce,E5o),e(V_,C5o),e(V_,dD),e(dD,w5o),e(V_,A5o),e(G,L5o),e(G,X_),e(X_,zce),e(zce,y5o),e(X_,x5o),e(X_,cD),e(cD,$5o),e(X_,k5o),e(G,S5o),e(G,z_),e(z_,Wce),e(Wce,R5o),e(z_,P5o),e(z_,fD),e(fD,B5o),e(z_,I5o),e(G,N5o),e(G,W_),e(W_,Qce),e(Qce,q5o),e(W_,j5o),e(W_,mD),e(mD,D5o),e(W_,G5o),e(G,O5o),e(G,Q_),e(Q_,Hce),e(Hce,V5o),e(Q_,X5o),e(Q_,gD),e(gD,z5o),e(Q_,W5o),e(G,Q5o),e(G,H_),e(H_,Uce),e(Uce,H5o),e(H_,U5o),e(H_,hD),e(hD,J5o),e(H_,Y5o),e(G,K5o),e(G,U_),e(U_,Jce),e(Jce,Z5o),e(U_,e3o),e(U_,pD),e(pD,o3o),e(U_,r3o),e(G,t3o),e(G,J_),e(J_,Yce),e(Yce,a3o),e(J_,n3o),e(J_,uD),e(uD,s3o),e(J_,l3o),e(G,i3o),e(G,Y_),e(Y_,Kce),e(Kce,d3o),e(Y_,c3o),e(Y_,_D),e(_D,f3o),e(Y_,m3o),e(G,g3o),e(G,K_),e(K_,Zce),e(Zce,h3o),e(K_,p3o),e(K_,bD),e(bD,u3o),e(K_,_3o),e(G,b3o),e(G,Z_),e(Z_,efe),e(efe,v3o),e(Z_,F3o),e(Z_,vD),e(vD,T3o),e(Z_,M3o),e(G,E3o),e(G,e1),e(e1,ofe),e(ofe,C3o),e(e1,w3o),e(e1,FD),e(FD,A3o),e(e1,L3o),e(G,y3o),e(G,o1),e(o1,rfe),e(rfe,x3o),e(o1,$3o),e(o1,TD),e(TD,k3o),e(o1,S3o),e(G,R3o),e(G,r1),e(r1,tfe),e(tfe,P3o),e(r1,B3o),e(r1,MD),e(MD,I3o),e(r1,N3o),e(G,q3o),e(G,t1),e(t1,afe),e(afe,j3o),e(t1,D3o),e(t1,ED),e(ED,G3o),e(t1,O3o),e(G,V3o),e(G,a1),e(a1,nfe),e(nfe,X3o),e(a1,z3o),e(a1,CD),e(CD,W3o),e(a1,Q3o),e(G,H3o),e(G,n1),e(n1,sfe),e(sfe,U3o),e(n1,J3o),e(n1,wD),e(wD,Y3o),e(n1,K3o),e(G,Z3o),e(G,s1),e(s1,lfe),e(lfe,ewo),e(s1,owo),e(s1,AD),e(AD,rwo),e(s1,two),e(G,awo),e(G,l1),e(l1,ife),e(ife,nwo),e(l1,swo),e(l1,LD),e(LD,lwo),e(l1,iwo),e(G,dwo),e(G,i1),e(i1,dfe),e(dfe,cwo),e(i1,fwo),e(i1,yD),e(yD,mwo),e(i1,gwo),e(G,hwo),e(G,d1),e(d1,cfe),e(cfe,pwo),e(d1,uwo),e(d1,xD),e(xD,_wo),e(d1,bwo),e(G,vwo),e(G,c1),e(c1,ffe),e(ffe,Fwo),e(c1,Two),e(c1,$D),e($D,Mwo),e(c1,Ewo),e(G,Cwo),e(G,f1),e(f1,mfe),e(mfe,wwo),e(f1,Awo),e(f1,kD),e(kD,Lwo),e(f1,ywo),e(G,xwo),e(G,m1),e(m1,gfe),e(gfe,$wo),e(m1,kwo),e(m1,SD),e(SD,Swo),e(m1,Rwo),e(G,Pwo),e(G,g1),e(g1,hfe),e(hfe,Bwo),e(g1,Iwo),e(g1,RD),e(RD,Nwo),e(g1,qwo),e(G,jwo),e(G,h1),e(h1,pfe),e(pfe,Dwo),e(h1,Gwo),e(h1,PD),e(PD,Owo),e(h1,Vwo),e(G,Xwo),e(G,p1),e(p1,ufe),e(ufe,zwo),e(p1,Wwo),e(p1,BD),e(BD,Qwo),e(p1,Hwo),e(G,Uwo),e(G,u1),e(u1,_fe),e(_fe,Jwo),e(u1,Ywo),e(u1,ID),e(ID,Kwo),e(u1,Zwo),e(G,eAo),e(G,_1),e(_1,bfe),e(bfe,oAo),e(_1,rAo),e(_1,ND),e(ND,tAo),e(_1,aAo),e(G,nAo),e(G,b1),e(b1,vfe),e(vfe,sAo),e(b1,lAo),e(b1,qD),e(qD,iAo),e(b1,dAo),e(G,cAo),e(G,v1),e(v1,Ffe),e(Ffe,fAo),e(v1,mAo),e(v1,jD),e(jD,gAo),e(v1,hAo),e(G,pAo),e(G,F1),e(F1,Tfe),e(Tfe,uAo),e(F1,_Ao),e(F1,DD),e(DD,bAo),e(F1,vAo),e(Ye,FAo),e(Ye,T1),e(T1,TAo),e(T1,Mfe),e(Mfe,MAo),e(T1,EAo),e(T1,Efe),e(Efe,CAo),e(Ye,wAo),M(M1,Ye,null),b(f,FGe,_),b(f,Gi,_),e(Gi,E1),e(E1,Cfe),M(rL,Cfe,null),e(Gi,AAo),e(Gi,wfe),e(wfe,LAo),b(f,TGe,_),b(f,ko,_),M(tL,ko,null),e(ko,yAo),e(ko,Oi),e(Oi,xAo),e(Oi,GD),e(GD,$Ao),e(Oi,kAo),e(Oi,OD),e(OD,SAo),e(Oi,RAo),e(ko,PAo),e(ko,aL),e(aL,BAo),e(aL,Afe),e(Afe,IAo),e(aL,NAo),e(ko,qAo),e(ko,lt),M(nL,lt,null),e(lt,jAo),e(lt,Lfe),e(Lfe,DAo),e(lt,GAo),e(lt,Vi),e(Vi,OAo),e(Vi,yfe),e(yfe,VAo),e(Vi,XAo),e(Vi,VD),e(VD,zAo),e(Vi,WAo),e(lt,QAo),M(C1,lt,null),e(ko,HAo),e(ko,Ke),M(sL,Ke,null),e(Ke,UAo),e(Ke,xfe),e(xfe,JAo),e(Ke,YAo),e(Ke,Pa),e(Pa,KAo),e(Pa,$fe),e($fe,ZAo),e(Pa,e6o),e(Pa,kfe),e(kfe,o6o),e(Pa,r6o),e(Pa,Sfe),e(Sfe,t6o),e(Pa,a6o),e(Ke,n6o),e(Ke,z),e(z,w1),e(w1,Rfe),e(Rfe,s6o),e(w1,l6o),e(w1,XD),e(XD,i6o),e(w1,d6o),e(z,c6o),e(z,A1),e(A1,Pfe),e(Pfe,f6o),e(A1,m6o),e(A1,zD),e(zD,g6o),e(A1,h6o),e(z,p6o),e(z,L1),e(L1,Bfe),e(Bfe,u6o),e(L1,_6o),e(L1,WD),e(WD,b6o),e(L1,v6o),e(z,F6o),e(z,y1),e(y1,Ife),e(Ife,T6o),e(y1,M6o),e(y1,QD),e(QD,E6o),e(y1,C6o),e(z,w6o),e(z,x1),e(x1,Nfe),e(Nfe,A6o),e(x1,L6o),e(x1,HD),e(HD,y6o),e(x1,x6o),e(z,$6o),e(z,$1),e($1,qfe),e(qfe,k6o),e($1,S6o),e($1,UD),e(UD,R6o),e($1,P6o),e(z,B6o),e(z,k1),e(k1,jfe),e(jfe,I6o),e(k1,N6o),e(k1,JD),e(JD,q6o),e(k1,j6o),e(z,D6o),e(z,S1),e(S1,Dfe),e(Dfe,G6o),e(S1,O6o),e(S1,YD),e(YD,V6o),e(S1,X6o),e(z,z6o),e(z,R1),e(R1,Gfe),e(Gfe,W6o),e(R1,Q6o),e(R1,KD),e(KD,H6o),e(R1,U6o),e(z,J6o),e(z,P1),e(P1,Ofe),e(Ofe,Y6o),e(P1,K6o),e(P1,ZD),e(ZD,Z6o),e(P1,eLo),e(z,oLo),e(z,B1),e(B1,Vfe),e(Vfe,rLo),e(B1,tLo),e(B1,eG),e(eG,aLo),e(B1,nLo),e(z,sLo),e(z,I1),e(I1,Xfe),e(Xfe,lLo),e(I1,iLo),e(I1,oG),e(oG,dLo),e(I1,cLo),e(z,fLo),e(z,N1),e(N1,zfe),e(zfe,mLo),e(N1,gLo),e(N1,rG),e(rG,hLo),e(N1,pLo),e(z,uLo),e(z,q1),e(q1,Wfe),e(Wfe,_Lo),e(q1,bLo),e(q1,tG),e(tG,vLo),e(q1,FLo),e(z,TLo),e(z,j1),e(j1,Qfe),e(Qfe,MLo),e(j1,ELo),e(j1,aG),e(aG,CLo),e(j1,wLo),e(z,ALo),e(z,D1),e(D1,Hfe),e(Hfe,LLo),e(D1,yLo),e(D1,nG),e(nG,xLo),e(D1,$Lo),e(z,kLo),e(z,G1),e(G1,Ufe),e(Ufe,SLo),e(G1,RLo),e(G1,sG),e(sG,PLo),e(G1,BLo),e(z,ILo),e(z,O1),e(O1,Jfe),e(Jfe,NLo),e(O1,qLo),e(O1,lG),e(lG,jLo),e(O1,DLo),e(z,GLo),e(z,V1),e(V1,Yfe),e(Yfe,OLo),e(V1,VLo),e(V1,iG),e(iG,XLo),e(V1,zLo),e(z,WLo),e(z,X1),e(X1,Kfe),e(Kfe,QLo),e(X1,HLo),e(X1,dG),e(dG,ULo),e(X1,JLo),e(z,YLo),e(z,z1),e(z1,Zfe),e(Zfe,KLo),e(z1,ZLo),e(z1,cG),e(cG,eyo),e(z1,oyo),e(z,ryo),e(z,W1),e(W1,eme),e(eme,tyo),e(W1,ayo),e(W1,fG),e(fG,nyo),e(W1,syo),e(z,lyo),e(z,Q1),e(Q1,ome),e(ome,iyo),e(Q1,dyo),e(Q1,mG),e(mG,cyo),e(Q1,fyo),e(z,myo),e(z,H1),e(H1,rme),e(rme,gyo),e(H1,hyo),e(H1,gG),e(gG,pyo),e(H1,uyo),e(z,_yo),e(z,U1),e(U1,tme),e(tme,byo),e(U1,vyo),e(U1,hG),e(hG,Fyo),e(U1,Tyo),e(z,Myo),e(z,J1),e(J1,ame),e(ame,Eyo),e(J1,Cyo),e(J1,pG),e(pG,wyo),e(J1,Ayo),e(z,Lyo),e(z,Y1),e(Y1,nme),e(nme,yyo),e(Y1,xyo),e(Y1,uG),e(uG,$yo),e(Y1,kyo),e(z,Syo),e(z,K1),e(K1,sme),e(sme,Ryo),e(K1,Pyo),e(K1,_G),e(_G,Byo),e(K1,Iyo),e(z,Nyo),e(z,Z1),e(Z1,lme),e(lme,qyo),e(Z1,jyo),e(Z1,bG),e(bG,Dyo),e(Z1,Gyo),e(z,Oyo),e(z,e2),e(e2,ime),e(ime,Vyo),e(e2,Xyo),e(e2,vG),e(vG,zyo),e(e2,Wyo),e(z,Qyo),e(z,o2),e(o2,dme),e(dme,Hyo),e(o2,Uyo),e(o2,FG),e(FG,Jyo),e(o2,Yyo),e(z,Kyo),e(z,r2),e(r2,cme),e(cme,Zyo),e(r2,e8o),e(r2,TG),e(TG,o8o),e(r2,r8o),e(z,t8o),e(z,t2),e(t2,fme),e(fme,a8o),e(t2,n8o),e(t2,MG),e(MG,s8o),e(t2,l8o),e(z,i8o),e(z,a2),e(a2,mme),e(mme,d8o),e(a2,c8o),e(a2,EG),e(EG,f8o),e(a2,m8o),e(z,g8o),e(z,n2),e(n2,gme),e(gme,h8o),e(n2,p8o),e(n2,CG),e(CG,u8o),e(n2,_8o),e(z,b8o),e(z,s2),e(s2,hme),e(hme,v8o),e(s2,F8o),e(s2,wG),e(wG,T8o),e(s2,M8o),e(z,E8o),e(z,l2),e(l2,pme),e(pme,C8o),e(l2,w8o),e(l2,AG),e(AG,A8o),e(l2,L8o),e(z,y8o),e(z,i2),e(i2,ume),e(ume,x8o),e(i2,$8o),e(i2,LG),e(LG,k8o),e(i2,S8o),e(Ke,R8o),e(Ke,d2),e(d2,P8o),e(d2,_me),e(_me,B8o),e(d2,I8o),e(d2,bme),e(bme,N8o),e(Ke,q8o),M(c2,Ke,null),b(f,MGe,_),b(f,Xi,_),e(Xi,f2),e(f2,vme),M(lL,vme,null),e(Xi,j8o),e(Xi,Fme),e(Fme,D8o),b(f,EGe,_),b(f,So,_),M(iL,So,null),e(So,G8o),e(So,zi),e(zi,O8o),e(zi,yG),e(yG,V8o),e(zi,X8o),e(zi,xG),e(xG,z8o),e(zi,W8o),e(So,Q8o),e(So,dL),e(dL,H8o),e(dL,Tme),e(Tme,U8o),e(dL,J8o),e(So,Y8o),e(So,it),M(cL,it,null),e(it,K8o),e(it,Mme),e(Mme,Z8o),e(it,exo),e(it,Wi),e(Wi,oxo),e(Wi,Eme),e(Eme,rxo),e(Wi,txo),e(Wi,$G),e($G,axo),e(Wi,nxo),e(it,sxo),M(m2,it,null),e(So,lxo),e(So,Ze),M(fL,Ze,null),e(Ze,ixo),e(Ze,Cme),e(Cme,dxo),e(Ze,cxo),e(Ze,Ba),e(Ba,fxo),e(Ba,wme),e(wme,mxo),e(Ba,gxo),e(Ba,Ame),e(Ame,hxo),e(Ba,pxo),e(Ba,Lme),e(Lme,uxo),e(Ba,_xo),e(Ze,bxo),e(Ze,Q),e(Q,g2),e(g2,yme),e(yme,vxo),e(g2,Fxo),e(g2,kG),e(kG,Txo),e(g2,Mxo),e(Q,Exo),e(Q,h2),e(h2,xme),e(xme,Cxo),e(h2,wxo),e(h2,SG),e(SG,Axo),e(h2,Lxo),e(Q,yxo),e(Q,p2),e(p2,$me),e($me,xxo),e(p2,$xo),e(p2,RG),e(RG,kxo),e(p2,Sxo),e(Q,Rxo),e(Q,u2),e(u2,kme),e(kme,Pxo),e(u2,Bxo),e(u2,PG),e(PG,Ixo),e(u2,Nxo),e(Q,qxo),e(Q,_2),e(_2,Sme),e(Sme,jxo),e(_2,Dxo),e(_2,BG),e(BG,Gxo),e(_2,Oxo),e(Q,Vxo),e(Q,b2),e(b2,Rme),e(Rme,Xxo),e(b2,zxo),e(b2,IG),e(IG,Wxo),e(b2,Qxo),e(Q,Hxo),e(Q,v2),e(v2,Pme),e(Pme,Uxo),e(v2,Jxo),e(v2,NG),e(NG,Yxo),e(v2,Kxo),e(Q,Zxo),e(Q,F2),e(F2,Bme),e(Bme,e$o),e(F2,o$o),e(F2,qG),e(qG,r$o),e(F2,t$o),e(Q,a$o),e(Q,T2),e(T2,Ime),e(Ime,n$o),e(T2,s$o),e(T2,jG),e(jG,l$o),e(T2,i$o),e(Q,d$o),e(Q,M2),e(M2,Nme),e(Nme,c$o),e(M2,f$o),e(M2,DG),e(DG,m$o),e(M2,g$o),e(Q,h$o),e(Q,E2),e(E2,qme),e(qme,p$o),e(E2,u$o),e(E2,GG),e(GG,_$o),e(E2,b$o),e(Q,v$o),e(Q,C2),e(C2,jme),e(jme,F$o),e(C2,T$o),e(C2,OG),e(OG,M$o),e(C2,E$o),e(Q,C$o),e(Q,w2),e(w2,Dme),e(Dme,w$o),e(w2,A$o),e(w2,VG),e(VG,L$o),e(w2,y$o),e(Q,x$o),e(Q,A2),e(A2,Gme),e(Gme,$$o),e(A2,k$o),e(A2,XG),e(XG,S$o),e(A2,R$o),e(Q,P$o),e(Q,L2),e(L2,Ome),e(Ome,B$o),e(L2,I$o),e(L2,zG),e(zG,N$o),e(L2,q$o),e(Q,j$o),e(Q,y2),e(y2,Vme),e(Vme,D$o),e(y2,G$o),e(y2,WG),e(WG,O$o),e(y2,V$o),e(Q,X$o),e(Q,x2),e(x2,Xme),e(Xme,z$o),e(x2,W$o),e(x2,QG),e(QG,Q$o),e(x2,H$o),e(Q,U$o),e(Q,$2),e($2,zme),e(zme,J$o),e($2,Y$o),e($2,HG),e(HG,K$o),e($2,Z$o),e(Q,eko),e(Q,k2),e(k2,Wme),e(Wme,oko),e(k2,rko),e(k2,UG),e(UG,tko),e(k2,ako),e(Q,nko),e(Q,S2),e(S2,Qme),e(Qme,sko),e(S2,lko),e(S2,JG),e(JG,iko),e(S2,dko),e(Q,cko),e(Q,R2),e(R2,Hme),e(Hme,fko),e(R2,mko),e(R2,YG),e(YG,gko),e(R2,hko),e(Q,pko),e(Q,P2),e(P2,Ume),e(Ume,uko),e(P2,_ko),e(P2,KG),e(KG,bko),e(P2,vko),e(Q,Fko),e(Q,B2),e(B2,Jme),e(Jme,Tko),e(B2,Mko),e(B2,ZG),e(ZG,Eko),e(B2,Cko),e(Q,wko),e(Q,I2),e(I2,Yme),e(Yme,Ako),e(I2,Lko),e(I2,eO),e(eO,yko),e(I2,xko),e(Q,$ko),e(Q,N2),e(N2,Kme),e(Kme,kko),e(N2,Sko),e(N2,oO),e(oO,Rko),e(N2,Pko),e(Q,Bko),e(Q,q2),e(q2,Zme),e(Zme,Iko),e(q2,Nko),e(q2,rO),e(rO,qko),e(q2,jko),e(Q,Dko),e(Q,j2),e(j2,ege),e(ege,Gko),e(j2,Oko),e(j2,tO),e(tO,Vko),e(j2,Xko),e(Q,zko),e(Q,D2),e(D2,oge),e(oge,Wko),e(D2,Qko),e(D2,aO),e(aO,Hko),e(D2,Uko),e(Q,Jko),e(Q,G2),e(G2,rge),e(rge,Yko),e(G2,Kko),e(G2,nO),e(nO,Zko),e(G2,eSo),e(Q,oSo),e(Q,O2),e(O2,tge),e(tge,rSo),e(O2,tSo),e(O2,sO),e(sO,aSo),e(O2,nSo),e(Q,sSo),e(Q,V2),e(V2,age),e(age,lSo),e(V2,iSo),e(V2,lO),e(lO,dSo),e(V2,cSo),e(Q,fSo),e(Q,X2),e(X2,nge),e(nge,mSo),e(X2,gSo),e(X2,sge),e(sge,hSo),e(X2,pSo),e(Q,uSo),e(Q,z2),e(z2,lge),e(lge,_So),e(z2,bSo),e(z2,iO),e(iO,vSo),e(z2,FSo),e(Q,TSo),e(Q,W2),e(W2,ige),e(ige,MSo),e(W2,ESo),e(W2,dO),e(dO,CSo),e(W2,wSo),e(Q,ASo),e(Q,Q2),e(Q2,dge),e(dge,LSo),e(Q2,ySo),e(Q2,cO),e(cO,xSo),e(Q2,$So),e(Q,kSo),e(Q,H2),e(H2,cge),e(cge,SSo),e(H2,RSo),e(H2,fO),e(fO,PSo),e(H2,BSo),e(Ze,ISo),e(Ze,U2),e(U2,NSo),e(U2,fge),e(fge,qSo),e(U2,jSo),e(U2,mge),e(mge,DSo),e(Ze,GSo),M(J2,Ze,null),b(f,CGe,_),b(f,Qi,_),e(Qi,Y2),e(Y2,gge),M(mL,gge,null),e(Qi,OSo),e(Qi,hge),e(hge,VSo),b(f,wGe,_),b(f,Ro,_),M(gL,Ro,null),e(Ro,XSo),e(Ro,Hi),e(Hi,zSo),e(Hi,mO),e(mO,WSo),e(Hi,QSo),e(Hi,gO),e(gO,HSo),e(Hi,USo),e(Ro,JSo),e(Ro,hL),e(hL,YSo),e(hL,pge),e(pge,KSo),e(hL,ZSo),e(Ro,eRo),e(Ro,dt),M(pL,dt,null),e(dt,oRo),e(dt,uge),e(uge,rRo),e(dt,tRo),e(dt,Ui),e(Ui,aRo),e(Ui,_ge),e(_ge,nRo),e(Ui,sRo),e(Ui,hO),e(hO,lRo),e(Ui,iRo),e(dt,dRo),M(K2,dt,null),e(Ro,cRo),e(Ro,eo),M(uL,eo,null),e(eo,fRo),e(eo,bge),e(bge,mRo),e(eo,gRo),e(eo,Ia),e(Ia,hRo),e(Ia,vge),e(vge,pRo),e(Ia,uRo),e(Ia,Fge),e(Fge,_Ro),e(Ia,bRo),e(Ia,Tge),e(Tge,vRo),e(Ia,FRo),e(eo,TRo),e(eo,pe),e(pe,Z2),e(Z2,Mge),e(Mge,MRo),e(Z2,ERo),e(Z2,pO),e(pO,CRo),e(Z2,wRo),e(pe,ARo),e(pe,eb),e(eb,Ege),e(Ege,LRo),e(eb,yRo),e(eb,uO),e(uO,xRo),e(eb,$Ro),e(pe,kRo),e(pe,ob),e(ob,Cge),e(Cge,SRo),e(ob,RRo),e(ob,_O),e(_O,PRo),e(ob,BRo),e(pe,IRo),e(pe,rb),e(rb,wge),e(wge,NRo),e(rb,qRo),e(rb,bO),e(bO,jRo),e(rb,DRo),e(pe,GRo),e(pe,tb),e(tb,Age),e(Age,ORo),e(tb,VRo),e(tb,vO),e(vO,XRo),e(tb,zRo),e(pe,WRo),e(pe,ab),e(ab,Lge),e(Lge,QRo),e(ab,HRo),e(ab,FO),e(FO,URo),e(ab,JRo),e(pe,YRo),e(pe,nb),e(nb,yge),e(yge,KRo),e(nb,ZRo),e(nb,TO),e(TO,ePo),e(nb,oPo),e(pe,rPo),e(pe,sb),e(sb,xge),e(xge,tPo),e(sb,aPo),e(sb,MO),e(MO,nPo),e(sb,sPo),e(pe,lPo),e(pe,lb),e(lb,$ge),e($ge,iPo),e(lb,dPo),e(lb,EO),e(EO,cPo),e(lb,fPo),e(pe,mPo),e(pe,ib),e(ib,kge),e(kge,gPo),e(ib,hPo),e(ib,CO),e(CO,pPo),e(ib,uPo),e(pe,_Po),e(pe,db),e(db,Sge),e(Sge,bPo),e(db,vPo),e(db,wO),e(wO,FPo),e(db,TPo),e(pe,MPo),e(pe,cb),e(cb,Rge),e(Rge,EPo),e(cb,CPo),e(cb,AO),e(AO,wPo),e(cb,APo),e(pe,LPo),e(pe,fb),e(fb,Pge),e(Pge,yPo),e(fb,xPo),e(fb,LO),e(LO,$Po),e(fb,kPo),e(pe,SPo),e(pe,mb),e(mb,Bge),e(Bge,RPo),e(mb,PPo),e(mb,yO),e(yO,BPo),e(mb,IPo),e(pe,NPo),e(pe,gb),e(gb,Ige),e(Ige,qPo),e(gb,jPo),e(gb,xO),e(xO,DPo),e(gb,GPo),e(pe,OPo),e(pe,hb),e(hb,Nge),e(Nge,VPo),e(hb,XPo),e(hb,$O),e($O,zPo),e(hb,WPo),e(pe,QPo),e(pe,pb),e(pb,qge),e(qge,HPo),e(pb,UPo),e(pb,kO),e(kO,JPo),e(pb,YPo),e(eo,KPo),e(eo,ub),e(ub,ZPo),e(ub,jge),e(jge,eBo),e(ub,oBo),e(ub,Dge),e(Dge,rBo),e(eo,tBo),M(_b,eo,null),b(f,AGe,_),b(f,Ji,_),e(Ji,bb),e(bb,Gge),M(_L,Gge,null),e(Ji,aBo),e(Ji,Oge),e(Oge,nBo),b(f,LGe,_),b(f,Po,_),M(bL,Po,null),e(Po,sBo),e(Po,Yi),e(Yi,lBo),e(Yi,SO),e(SO,iBo),e(Yi,dBo),e(Yi,RO),e(RO,cBo),e(Yi,fBo),e(Po,mBo),e(Po,vL),e(vL,gBo),e(vL,Vge),e(Vge,hBo),e(vL,pBo),e(Po,uBo),e(Po,ct),M(FL,ct,null),e(ct,_Bo),e(ct,Xge),e(Xge,bBo),e(ct,vBo),e(ct,Ki),e(Ki,FBo),e(Ki,zge),e(zge,TBo),e(Ki,MBo),e(Ki,PO),e(PO,EBo),e(Ki,CBo),e(ct,wBo),M(vb,ct,null),e(Po,ABo),e(Po,oo),M(TL,oo,null),e(oo,LBo),e(oo,Wge),e(Wge,yBo),e(oo,xBo),e(oo,Na),e(Na,$Bo),e(Na,Qge),e(Qge,kBo),e(Na,SBo),e(Na,Hge),e(Hge,RBo),e(Na,PBo),e(Na,Uge),e(Uge,BBo),e(Na,IBo),e(oo,NBo),e(oo,N),e(N,Fb),e(Fb,Jge),e(Jge,qBo),e(Fb,jBo),e(Fb,BO),e(BO,DBo),e(Fb,GBo),e(N,OBo),e(N,Tb),e(Tb,Yge),e(Yge,VBo),e(Tb,XBo),e(Tb,IO),e(IO,zBo),e(Tb,WBo),e(N,QBo),e(N,Mb),e(Mb,Kge),e(Kge,HBo),e(Mb,UBo),e(Mb,NO),e(NO,JBo),e(Mb,YBo),e(N,KBo),e(N,Eb),e(Eb,Zge),e(Zge,ZBo),e(Eb,eIo),e(Eb,qO),e(qO,oIo),e(Eb,rIo),e(N,tIo),e(N,Cb),e(Cb,ehe),e(ehe,aIo),e(Cb,nIo),e(Cb,jO),e(jO,sIo),e(Cb,lIo),e(N,iIo),e(N,wb),e(wb,ohe),e(ohe,dIo),e(wb,cIo),e(wb,DO),e(DO,fIo),e(wb,mIo),e(N,gIo),e(N,Ab),e(Ab,rhe),e(rhe,hIo),e(Ab,pIo),e(Ab,GO),e(GO,uIo),e(Ab,_Io),e(N,bIo),e(N,Lb),e(Lb,the),e(the,vIo),e(Lb,FIo),e(Lb,OO),e(OO,TIo),e(Lb,MIo),e(N,EIo),e(N,yb),e(yb,ahe),e(ahe,CIo),e(yb,wIo),e(yb,VO),e(VO,AIo),e(yb,LIo),e(N,yIo),e(N,xb),e(xb,nhe),e(nhe,xIo),e(xb,$Io),e(xb,XO),e(XO,kIo),e(xb,SIo),e(N,RIo),e(N,$b),e($b,she),e(she,PIo),e($b,BIo),e($b,zO),e(zO,IIo),e($b,NIo),e(N,qIo),e(N,kb),e(kb,lhe),e(lhe,jIo),e(kb,DIo),e(kb,WO),e(WO,GIo),e(kb,OIo),e(N,VIo),e(N,Sb),e(Sb,ihe),e(ihe,XIo),e(Sb,zIo),e(Sb,QO),e(QO,WIo),e(Sb,QIo),e(N,HIo),e(N,Rb),e(Rb,dhe),e(dhe,UIo),e(Rb,JIo),e(Rb,HO),e(HO,YIo),e(Rb,KIo),e(N,ZIo),e(N,Pb),e(Pb,che),e(che,eNo),e(Pb,oNo),e(Pb,UO),e(UO,rNo),e(Pb,tNo),e(N,aNo),e(N,Bb),e(Bb,fhe),e(fhe,nNo),e(Bb,sNo),e(Bb,JO),e(JO,lNo),e(Bb,iNo),e(N,dNo),e(N,Ib),e(Ib,mhe),e(mhe,cNo),e(Ib,fNo),e(Ib,YO),e(YO,mNo),e(Ib,gNo),e(N,hNo),e(N,Nb),e(Nb,ghe),e(ghe,pNo),e(Nb,uNo),e(Nb,KO),e(KO,_No),e(Nb,bNo),e(N,vNo),e(N,qb),e(qb,hhe),e(hhe,FNo),e(qb,TNo),e(qb,ZO),e(ZO,MNo),e(qb,ENo),e(N,CNo),e(N,jb),e(jb,phe),e(phe,wNo),e(jb,ANo),e(jb,eV),e(eV,LNo),e(jb,yNo),e(N,xNo),e(N,Db),e(Db,uhe),e(uhe,$No),e(Db,kNo),e(Db,oV),e(oV,SNo),e(Db,RNo),e(N,PNo),e(N,Gb),e(Gb,_he),e(_he,BNo),e(Gb,INo),e(Gb,rV),e(rV,NNo),e(Gb,qNo),e(N,jNo),e(N,Ob),e(Ob,bhe),e(bhe,DNo),e(Ob,GNo),e(Ob,tV),e(tV,ONo),e(Ob,VNo),e(N,XNo),e(N,Vb),e(Vb,vhe),e(vhe,zNo),e(Vb,WNo),e(Vb,aV),e(aV,QNo),e(Vb,HNo),e(N,UNo),e(N,Xb),e(Xb,Fhe),e(Fhe,JNo),e(Xb,YNo),e(Xb,nV),e(nV,KNo),e(Xb,ZNo),e(N,eqo),e(N,zb),e(zb,The),e(The,oqo),e(zb,rqo),e(zb,sV),e(sV,tqo),e(zb,aqo),e(N,nqo),e(N,Wb),e(Wb,Mhe),e(Mhe,sqo),e(Wb,lqo),e(Wb,lV),e(lV,iqo),e(Wb,dqo),e(N,cqo),e(N,Qb),e(Qb,Ehe),e(Ehe,fqo),e(Qb,mqo),e(Qb,iV),e(iV,gqo),e(Qb,hqo),e(N,pqo),e(N,Hb),e(Hb,Che),e(Che,uqo),e(Hb,_qo),e(Hb,dV),e(dV,bqo),e(Hb,vqo),e(N,Fqo),e(N,Ub),e(Ub,whe),e(whe,Tqo),e(Ub,Mqo),e(Ub,cV),e(cV,Eqo),e(Ub,Cqo),e(N,wqo),e(N,Jb),e(Jb,Ahe),e(Ahe,Aqo),e(Jb,Lqo),e(Jb,fV),e(fV,yqo),e(Jb,xqo),e(N,$qo),e(N,Yb),e(Yb,Lhe),e(Lhe,kqo),e(Yb,Sqo),e(Yb,mV),e(mV,Rqo),e(Yb,Pqo),e(N,Bqo),e(N,Kb),e(Kb,yhe),e(yhe,Iqo),e(Kb,Nqo),e(Kb,gV),e(gV,qqo),e(Kb,jqo),e(N,Dqo),e(N,Zb),e(Zb,xhe),e(xhe,Gqo),e(Zb,Oqo),e(Zb,hV),e(hV,Vqo),e(Zb,Xqo),e(N,zqo),e(N,ev),e(ev,$he),e($he,Wqo),e(ev,Qqo),e(ev,pV),e(pV,Hqo),e(ev,Uqo),e(N,Jqo),e(N,ov),e(ov,khe),e(khe,Yqo),e(ov,Kqo),e(ov,uV),e(uV,Zqo),e(ov,ejo),e(N,ojo),e(N,rv),e(rv,She),e(She,rjo),e(rv,tjo),e(rv,_V),e(_V,ajo),e(rv,njo),e(N,sjo),e(N,tv),e(tv,Rhe),e(Rhe,ljo),e(tv,ijo),e(tv,bV),e(bV,djo),e(tv,cjo),e(N,fjo),e(N,av),e(av,Phe),e(Phe,mjo),e(av,gjo),e(av,vV),e(vV,hjo),e(av,pjo),e(N,ujo),e(N,nv),e(nv,Bhe),e(Bhe,_jo),e(nv,bjo),e(nv,FV),e(FV,vjo),e(nv,Fjo),e(N,Tjo),e(N,sv),e(sv,Ihe),e(Ihe,Mjo),e(sv,Ejo),e(sv,TV),e(TV,Cjo),e(sv,wjo),e(N,Ajo),e(N,lv),e(lv,Nhe),e(Nhe,Ljo),e(lv,yjo),e(lv,MV),e(MV,xjo),e(lv,$jo),e(N,kjo),e(N,iv),e(iv,qhe),e(qhe,Sjo),e(iv,Rjo),e(iv,EV),e(EV,Pjo),e(iv,Bjo),e(N,Ijo),e(N,dv),e(dv,jhe),e(jhe,Njo),e(dv,qjo),e(dv,CV),e(CV,jjo),e(dv,Djo),e(N,Gjo),e(N,cv),e(cv,Dhe),e(Dhe,Ojo),e(cv,Vjo),e(cv,wV),e(wV,Xjo),e(cv,zjo),e(N,Wjo),e(N,fv),e(fv,Ghe),e(Ghe,Qjo),e(fv,Hjo),e(fv,AV),e(AV,Ujo),e(fv,Jjo),e(N,Yjo),e(N,mv),e(mv,Ohe),e(Ohe,Kjo),e(mv,Zjo),e(mv,LV),e(LV,eDo),e(mv,oDo),e(oo,rDo),e(oo,gv),e(gv,tDo),e(gv,Vhe),e(Vhe,aDo),e(gv,nDo),e(gv,Xhe),e(Xhe,sDo),e(oo,lDo),M(hv,oo,null),b(f,yGe,_),b(f,Zi,_),e(Zi,pv),e(pv,zhe),M(ML,zhe,null),e(Zi,iDo),e(Zi,Whe),e(Whe,dDo),b(f,xGe,_),b(f,Bo,_),M(EL,Bo,null),e(Bo,cDo),e(Bo,ed),e(ed,fDo),e(ed,yV),e(yV,mDo),e(ed,gDo),e(ed,xV),e(xV,hDo),e(ed,pDo),e(Bo,uDo),e(Bo,CL),e(CL,_Do),e(CL,Qhe),e(Qhe,bDo),e(CL,vDo),e(Bo,FDo),e(Bo,ft),M(wL,ft,null),e(ft,TDo),e(ft,Hhe),e(Hhe,MDo),e(ft,EDo),e(ft,od),e(od,CDo),e(od,Uhe),e(Uhe,wDo),e(od,ADo),e(od,$V),e($V,LDo),e(od,yDo),e(ft,xDo),M(uv,ft,null),e(Bo,$Do),e(Bo,ro),M(AL,ro,null),e(ro,kDo),e(ro,Jhe),e(Jhe,SDo),e(ro,RDo),e(ro,qa),e(qa,PDo),e(qa,Yhe),e(Yhe,BDo),e(qa,IDo),e(qa,Khe),e(Khe,NDo),e(qa,qDo),e(qa,Zhe),e(Zhe,jDo),e(qa,DDo),e(ro,GDo),e(ro,Z),e(Z,_v),e(_v,epe),e(epe,ODo),e(_v,VDo),e(_v,kV),e(kV,XDo),e(_v,zDo),e(Z,WDo),e(Z,bv),e(bv,ope),e(ope,QDo),e(bv,HDo),e(bv,SV),e(SV,UDo),e(bv,JDo),e(Z,YDo),e(Z,vv),e(vv,rpe),e(rpe,KDo),e(vv,ZDo),e(vv,RV),e(RV,eGo),e(vv,oGo),e(Z,rGo),e(Z,Fv),e(Fv,tpe),e(tpe,tGo),e(Fv,aGo),e(Fv,PV),e(PV,nGo),e(Fv,sGo),e(Z,lGo),e(Z,Tv),e(Tv,ape),e(ape,iGo),e(Tv,dGo),e(Tv,BV),e(BV,cGo),e(Tv,fGo),e(Z,mGo),e(Z,Mv),e(Mv,npe),e(npe,gGo),e(Mv,hGo),e(Mv,IV),e(IV,pGo),e(Mv,uGo),e(Z,_Go),e(Z,Ev),e(Ev,spe),e(spe,bGo),e(Ev,vGo),e(Ev,NV),e(NV,FGo),e(Ev,TGo),e(Z,MGo),e(Z,Cv),e(Cv,lpe),e(lpe,EGo),e(Cv,CGo),e(Cv,qV),e(qV,wGo),e(Cv,AGo),e(Z,LGo),e(Z,wv),e(wv,ipe),e(ipe,yGo),e(wv,xGo),e(wv,jV),e(jV,$Go),e(wv,kGo),e(Z,SGo),e(Z,Av),e(Av,dpe),e(dpe,RGo),e(Av,PGo),e(Av,DV),e(DV,BGo),e(Av,IGo),e(Z,NGo),e(Z,Lv),e(Lv,cpe),e(cpe,qGo),e(Lv,jGo),e(Lv,GV),e(GV,DGo),e(Lv,GGo),e(Z,OGo),e(Z,yv),e(yv,fpe),e(fpe,VGo),e(yv,XGo),e(yv,OV),e(OV,zGo),e(yv,WGo),e(Z,QGo),e(Z,xv),e(xv,mpe),e(mpe,HGo),e(xv,UGo),e(xv,VV),e(VV,JGo),e(xv,YGo),e(Z,KGo),e(Z,$v),e($v,gpe),e(gpe,ZGo),e($v,eOo),e($v,XV),e(XV,oOo),e($v,rOo),e(Z,tOo),e(Z,kv),e(kv,hpe),e(hpe,aOo),e(kv,nOo),e(kv,zV),e(zV,sOo),e(kv,lOo),e(Z,iOo),e(Z,Sv),e(Sv,ppe),e(ppe,dOo),e(Sv,cOo),e(Sv,WV),e(WV,fOo),e(Sv,mOo),e(Z,gOo),e(Z,Rv),e(Rv,upe),e(upe,hOo),e(Rv,pOo),e(Rv,QV),e(QV,uOo),e(Rv,_Oo),e(Z,bOo),e(Z,Pv),e(Pv,_pe),e(_pe,vOo),e(Pv,FOo),e(Pv,HV),e(HV,TOo),e(Pv,MOo),e(Z,EOo),e(Z,Bv),e(Bv,bpe),e(bpe,COo),e(Bv,wOo),e(Bv,UV),e(UV,AOo),e(Bv,LOo),e(Z,yOo),e(Z,Iv),e(Iv,vpe),e(vpe,xOo),e(Iv,$Oo),e(Iv,JV),e(JV,kOo),e(Iv,SOo),e(Z,ROo),e(Z,Nv),e(Nv,Fpe),e(Fpe,POo),e(Nv,BOo),e(Nv,YV),e(YV,IOo),e(Nv,NOo),e(Z,qOo),e(Z,qv),e(qv,Tpe),e(Tpe,jOo),e(qv,DOo),e(qv,KV),e(KV,GOo),e(qv,OOo),e(Z,VOo),e(Z,jv),e(jv,Mpe),e(Mpe,XOo),e(jv,zOo),e(jv,ZV),e(ZV,WOo),e(jv,QOo),e(Z,HOo),e(Z,Dv),e(Dv,Epe),e(Epe,UOo),e(Dv,JOo),e(Dv,eX),e(eX,YOo),e(Dv,KOo),e(Z,ZOo),e(Z,Gv),e(Gv,Cpe),e(Cpe,eVo),e(Gv,oVo),e(Gv,oX),e(oX,rVo),e(Gv,tVo),e(Z,aVo),e(Z,Ov),e(Ov,wpe),e(wpe,nVo),e(Ov,sVo),e(Ov,rX),e(rX,lVo),e(Ov,iVo),e(Z,dVo),e(Z,Vv),e(Vv,Ape),e(Ape,cVo),e(Vv,fVo),e(Vv,tX),e(tX,mVo),e(Vv,gVo),e(Z,hVo),e(Z,Xv),e(Xv,Lpe),e(Lpe,pVo),e(Xv,uVo),e(Xv,aX),e(aX,_Vo),e(Xv,bVo),e(Z,vVo),e(Z,zv),e(zv,ype),e(ype,FVo),e(zv,TVo),e(zv,nX),e(nX,MVo),e(zv,EVo),e(ro,CVo),e(ro,Wv),e(Wv,wVo),e(Wv,xpe),e(xpe,AVo),e(Wv,LVo),e(Wv,$pe),e($pe,yVo),e(ro,xVo),M(Qv,ro,null),b(f,$Ge,_),b(f,rd,_),e(rd,Hv),e(Hv,kpe),M(LL,kpe,null),e(rd,$Vo),e(rd,Spe),e(Spe,kVo),b(f,kGe,_),b(f,Io,_),M(yL,Io,null),e(Io,SVo),e(Io,td),e(td,RVo),e(td,sX),e(sX,PVo),e(td,BVo),e(td,lX),e(lX,IVo),e(td,NVo),e(Io,qVo),e(Io,xL),e(xL,jVo),e(xL,Rpe),e(Rpe,DVo),e(xL,GVo),e(Io,OVo),e(Io,mt),M($L,mt,null),e(mt,VVo),e(mt,Ppe),e(Ppe,XVo),e(mt,zVo),e(mt,ad),e(ad,WVo),e(ad,Bpe),e(Bpe,QVo),e(ad,HVo),e(ad,iX),e(iX,UVo),e(ad,JVo),e(mt,YVo),M(Uv,mt,null),e(Io,KVo),e(Io,to),M(kL,to,null),e(to,ZVo),e(to,Ipe),e(Ipe,eXo),e(to,oXo),e(to,ja),e(ja,rXo),e(ja,Npe),e(Npe,tXo),e(ja,aXo),e(ja,qpe),e(qpe,nXo),e(ja,sXo),e(ja,jpe),e(jpe,lXo),e(ja,iXo),e(to,dXo),e(to,Zr),e(Zr,Jv),e(Jv,Dpe),e(Dpe,cXo),e(Jv,fXo),e(Jv,dX),e(dX,mXo),e(Jv,gXo),e(Zr,hXo),e(Zr,Yv),e(Yv,Gpe),e(Gpe,pXo),e(Yv,uXo),e(Yv,cX),e(cX,_Xo),e(Yv,bXo),e(Zr,vXo),e(Zr,Kv),e(Kv,Ope),e(Ope,FXo),e(Kv,TXo),e(Kv,fX),e(fX,MXo),e(Kv,EXo),e(Zr,CXo),e(Zr,Zv),e(Zv,Vpe),e(Vpe,wXo),e(Zv,AXo),e(Zv,mX),e(mX,LXo),e(Zv,yXo),e(Zr,xXo),e(Zr,e0),e(e0,Xpe),e(Xpe,$Xo),e(e0,kXo),e(e0,gX),e(gX,SXo),e(e0,RXo),e(to,PXo),e(to,o0),e(o0,BXo),e(o0,zpe),e(zpe,IXo),e(o0,NXo),e(o0,Wpe),e(Wpe,qXo),e(to,jXo),M(r0,to,null),b(f,SGe,_),b(f,nd,_),e(nd,t0),e(t0,Qpe),M(SL,Qpe,null),e(nd,DXo),e(nd,Hpe),e(Hpe,GXo),b(f,RGe,_),b(f,No,_),M(RL,No,null),e(No,OXo),e(No,sd),e(sd,VXo),e(sd,hX),e(hX,XXo),e(sd,zXo),e(sd,pX),e(pX,WXo),e(sd,QXo),e(No,HXo),e(No,PL),e(PL,UXo),e(PL,Upe),e(Upe,JXo),e(PL,YXo),e(No,KXo),e(No,gt),M(BL,gt,null),e(gt,ZXo),e(gt,Jpe),e(Jpe,ezo),e(gt,ozo),e(gt,ld),e(ld,rzo),e(ld,Ype),e(Ype,tzo),e(ld,azo),e(ld,uX),e(uX,nzo),e(ld,szo),e(gt,lzo),M(a0,gt,null),e(No,izo),e(No,ao),M(IL,ao,null),e(ao,dzo),e(ao,Kpe),e(Kpe,czo),e(ao,fzo),e(ao,Da),e(Da,mzo),e(Da,Zpe),e(Zpe,gzo),e(Da,hzo),e(Da,eue),e(eue,pzo),e(Da,uzo),e(Da,oue),e(oue,_zo),e(Da,bzo),e(ao,vzo),e(ao,U),e(U,n0),e(n0,rue),e(rue,Fzo),e(n0,Tzo),e(n0,_X),e(_X,Mzo),e(n0,Ezo),e(U,Czo),e(U,s0),e(s0,tue),e(tue,wzo),e(s0,Azo),e(s0,bX),e(bX,Lzo),e(s0,yzo),e(U,xzo),e(U,l0),e(l0,aue),e(aue,$zo),e(l0,kzo),e(l0,vX),e(vX,Szo),e(l0,Rzo),e(U,Pzo),e(U,i0),e(i0,nue),e(nue,Bzo),e(i0,Izo),e(i0,FX),e(FX,Nzo),e(i0,qzo),e(U,jzo),e(U,d0),e(d0,sue),e(sue,Dzo),e(d0,Gzo),e(d0,TX),e(TX,Ozo),e(d0,Vzo),e(U,Xzo),e(U,c0),e(c0,lue),e(lue,zzo),e(c0,Wzo),e(c0,MX),e(MX,Qzo),e(c0,Hzo),e(U,Uzo),e(U,f0),e(f0,iue),e(iue,Jzo),e(f0,Yzo),e(f0,EX),e(EX,Kzo),e(f0,Zzo),e(U,eWo),e(U,m0),e(m0,due),e(due,oWo),e(m0,rWo),e(m0,CX),e(CX,tWo),e(m0,aWo),e(U,nWo),e(U,g0),e(g0,cue),e(cue,sWo),e(g0,lWo),e(g0,wX),e(wX,iWo),e(g0,dWo),e(U,cWo),e(U,h0),e(h0,fue),e(fue,fWo),e(h0,mWo),e(h0,AX),e(AX,gWo),e(h0,hWo),e(U,pWo),e(U,p0),e(p0,mue),e(mue,uWo),e(p0,_Wo),e(p0,LX),e(LX,bWo),e(p0,vWo),e(U,FWo),e(U,u0),e(u0,gue),e(gue,TWo),e(u0,MWo),e(u0,yX),e(yX,EWo),e(u0,CWo),e(U,wWo),e(U,_0),e(_0,hue),e(hue,AWo),e(_0,LWo),e(_0,xX),e(xX,yWo),e(_0,xWo),e(U,$Wo),e(U,b0),e(b0,pue),e(pue,kWo),e(b0,SWo),e(b0,$X),e($X,RWo),e(b0,PWo),e(U,BWo),e(U,v0),e(v0,uue),e(uue,IWo),e(v0,NWo),e(v0,kX),e(kX,qWo),e(v0,jWo),e(U,DWo),e(U,F0),e(F0,_ue),e(_ue,GWo),e(F0,OWo),e(F0,SX),e(SX,VWo),e(F0,XWo),e(U,zWo),e(U,T0),e(T0,bue),e(bue,WWo),e(T0,QWo),e(T0,RX),e(RX,HWo),e(T0,UWo),e(U,JWo),e(U,M0),e(M0,vue),e(vue,YWo),e(M0,KWo),e(M0,PX),e(PX,ZWo),e(M0,eQo),e(U,oQo),e(U,E0),e(E0,Fue),e(Fue,rQo),e(E0,tQo),e(E0,BX),e(BX,aQo),e(E0,nQo),e(U,sQo),e(U,C0),e(C0,Tue),e(Tue,lQo),e(C0,iQo),e(C0,IX),e(IX,dQo),e(C0,cQo),e(U,fQo),e(U,w0),e(w0,Mue),e(Mue,mQo),e(w0,gQo),e(w0,NX),e(NX,hQo),e(w0,pQo),e(U,uQo),e(U,A0),e(A0,Eue),e(Eue,_Qo),e(A0,bQo),e(A0,qX),e(qX,vQo),e(A0,FQo),e(U,TQo),e(U,L0),e(L0,Cue),e(Cue,MQo),e(L0,EQo),e(L0,jX),e(jX,CQo),e(L0,wQo),e(U,AQo),e(U,y0),e(y0,wue),e(wue,LQo),e(y0,yQo),e(y0,DX),e(DX,xQo),e(y0,$Qo),e(U,kQo),e(U,x0),e(x0,Aue),e(Aue,SQo),e(x0,RQo),e(x0,GX),e(GX,PQo),e(x0,BQo),e(U,IQo),e(U,$0),e($0,Lue),e(Lue,NQo),e($0,qQo),e($0,OX),e(OX,jQo),e($0,DQo),e(U,GQo),e(U,k0),e(k0,yue),e(yue,OQo),e(k0,VQo),e(k0,VX),e(VX,XQo),e(k0,zQo),e(U,WQo),e(U,S0),e(S0,xue),e(xue,QQo),e(S0,HQo),e(S0,XX),e(XX,UQo),e(S0,JQo),e(U,YQo),e(U,R0),e(R0,$ue),e($ue,KQo),e(R0,ZQo),e(R0,zX),e(zX,eHo),e(R0,oHo),e(U,rHo),e(U,P0),e(P0,kue),e(kue,tHo),e(P0,aHo),e(P0,WX),e(WX,nHo),e(P0,sHo),e(U,lHo),e(U,B0),e(B0,Sue),e(Sue,iHo),e(B0,dHo),e(B0,QX),e(QX,cHo),e(B0,fHo),e(U,mHo),e(U,I0),e(I0,Rue),e(Rue,gHo),e(I0,hHo),e(I0,HX),e(HX,pHo),e(I0,uHo),e(U,_Ho),e(U,N0),e(N0,Pue),e(Pue,bHo),e(N0,vHo),e(N0,UX),e(UX,FHo),e(N0,THo),e(U,MHo),e(U,q0),e(q0,Bue),e(Bue,EHo),e(q0,CHo),e(q0,JX),e(JX,wHo),e(q0,AHo),e(ao,LHo),e(ao,j0),e(j0,yHo),e(j0,Iue),e(Iue,xHo),e(j0,$Ho),e(j0,Nue),e(Nue,kHo),e(ao,SHo),M(D0,ao,null),b(f,PGe,_),b(f,id,_),e(id,G0),e(G0,que),M(NL,que,null),e(id,RHo),e(id,jue),e(jue,PHo),b(f,BGe,_),b(f,qo,_),M(qL,qo,null),e(qo,BHo),e(qo,dd),e(dd,IHo),e(dd,YX),e(YX,NHo),e(dd,qHo),e(dd,KX),e(KX,jHo),e(dd,DHo),e(qo,GHo),e(qo,jL),e(jL,OHo),e(jL,Due),e(Due,VHo),e(jL,XHo),e(qo,zHo),e(qo,ht),M(DL,ht,null),e(ht,WHo),e(ht,Gue),e(Gue,QHo),e(ht,HHo),e(ht,cd),e(cd,UHo),e(cd,Oue),e(Oue,JHo),e(cd,YHo),e(cd,ZX),e(ZX,KHo),e(cd,ZHo),e(ht,eUo),M(O0,ht,null),e(qo,oUo),e(qo,no),M(GL,no,null),e(no,rUo),e(no,Vue),e(Vue,tUo),e(no,aUo),e(no,Ga),e(Ga,nUo),e(Ga,Xue),e(Xue,sUo),e(Ga,lUo),e(Ga,zue),e(zue,iUo),e(Ga,dUo),e(Ga,Wue),e(Wue,cUo),e(Ga,fUo),e(no,mUo),e(no,V),e(V,V0),e(V0,Que),e(Que,gUo),e(V0,hUo),e(V0,ez),e(ez,pUo),e(V0,uUo),e(V,_Uo),e(V,X0),e(X0,Hue),e(Hue,bUo),e(X0,vUo),e(X0,oz),e(oz,FUo),e(X0,TUo),e(V,MUo),e(V,z0),e(z0,Uue),e(Uue,EUo),e(z0,CUo),e(z0,rz),e(rz,wUo),e(z0,AUo),e(V,LUo),e(V,W0),e(W0,Jue),e(Jue,yUo),e(W0,xUo),e(W0,tz),e(tz,$Uo),e(W0,kUo),e(V,SUo),e(V,Q0),e(Q0,Yue),e(Yue,RUo),e(Q0,PUo),e(Q0,az),e(az,BUo),e(Q0,IUo),e(V,NUo),e(V,H0),e(H0,Kue),e(Kue,qUo),e(H0,jUo),e(H0,nz),e(nz,DUo),e(H0,GUo),e(V,OUo),e(V,U0),e(U0,Zue),e(Zue,VUo),e(U0,XUo),e(U0,sz),e(sz,zUo),e(U0,WUo),e(V,QUo),e(V,J0),e(J0,e_e),e(e_e,HUo),e(J0,UUo),e(J0,lz),e(lz,JUo),e(J0,YUo),e(V,KUo),e(V,Y0),e(Y0,o_e),e(o_e,ZUo),e(Y0,eJo),e(Y0,iz),e(iz,oJo),e(Y0,rJo),e(V,tJo),e(V,K0),e(K0,r_e),e(r_e,aJo),e(K0,nJo),e(K0,dz),e(dz,sJo),e(K0,lJo),e(V,iJo),e(V,Z0),e(Z0,t_e),e(t_e,dJo),e(Z0,cJo),e(Z0,cz),e(cz,fJo),e(Z0,mJo),e(V,gJo),e(V,eF),e(eF,a_e),e(a_e,hJo),e(eF,pJo),e(eF,fz),e(fz,uJo),e(eF,_Jo),e(V,bJo),e(V,oF),e(oF,n_e),e(n_e,vJo),e(oF,FJo),e(oF,mz),e(mz,TJo),e(oF,MJo),e(V,EJo),e(V,rF),e(rF,s_e),e(s_e,CJo),e(rF,wJo),e(rF,gz),e(gz,AJo),e(rF,LJo),e(V,yJo),e(V,tF),e(tF,l_e),e(l_e,xJo),e(tF,$Jo),e(tF,hz),e(hz,kJo),e(tF,SJo),e(V,RJo),e(V,aF),e(aF,i_e),e(i_e,PJo),e(aF,BJo),e(aF,pz),e(pz,IJo),e(aF,NJo),e(V,qJo),e(V,nF),e(nF,d_e),e(d_e,jJo),e(nF,DJo),e(nF,uz),e(uz,GJo),e(nF,OJo),e(V,VJo),e(V,sF),e(sF,c_e),e(c_e,XJo),e(sF,zJo),e(sF,_z),e(_z,WJo),e(sF,QJo),e(V,HJo),e(V,lF),e(lF,f_e),e(f_e,UJo),e(lF,JJo),e(lF,bz),e(bz,YJo),e(lF,KJo),e(V,ZJo),e(V,iF),e(iF,m_e),e(m_e,eYo),e(iF,oYo),e(iF,vz),e(vz,rYo),e(iF,tYo),e(V,aYo),e(V,dF),e(dF,g_e),e(g_e,nYo),e(dF,sYo),e(dF,Fz),e(Fz,lYo),e(dF,iYo),e(V,dYo),e(V,cF),e(cF,h_e),e(h_e,cYo),e(cF,fYo),e(cF,Tz),e(Tz,mYo),e(cF,gYo),e(V,hYo),e(V,fF),e(fF,p_e),e(p_e,pYo),e(fF,uYo),e(fF,Mz),e(Mz,_Yo),e(fF,bYo),e(V,vYo),e(V,mF),e(mF,u_e),e(u_e,FYo),e(mF,TYo),e(mF,Ez),e(Ez,MYo),e(mF,EYo),e(V,CYo),e(V,gF),e(gF,__e),e(__e,wYo),e(gF,AYo),e(gF,Cz),e(Cz,LYo),e(gF,yYo),e(V,xYo),e(V,hF),e(hF,b_e),e(b_e,$Yo),e(hF,kYo),e(hF,wz),e(wz,SYo),e(hF,RYo),e(V,PYo),e(V,pF),e(pF,v_e),e(v_e,BYo),e(pF,IYo),e(pF,Az),e(Az,NYo),e(pF,qYo),e(V,jYo),e(V,uF),e(uF,F_e),e(F_e,DYo),e(uF,GYo),e(uF,Lz),e(Lz,OYo),e(uF,VYo),e(V,XYo),e(V,_F),e(_F,T_e),e(T_e,zYo),e(_F,WYo),e(_F,yz),e(yz,QYo),e(_F,HYo),e(V,UYo),e(V,bF),e(bF,M_e),e(M_e,JYo),e(bF,YYo),e(bF,xz),e(xz,KYo),e(bF,ZYo),e(V,eKo),e(V,vF),e(vF,E_e),e(E_e,oKo),e(vF,rKo),e(vF,$z),e($z,tKo),e(vF,aKo),e(V,nKo),e(V,FF),e(FF,C_e),e(C_e,sKo),e(FF,lKo),e(FF,kz),e(kz,iKo),e(FF,dKo),e(V,cKo),e(V,TF),e(TF,w_e),e(w_e,fKo),e(TF,mKo),e(TF,Sz),e(Sz,gKo),e(TF,hKo),e(V,pKo),e(V,MF),e(MF,A_e),e(A_e,uKo),e(MF,_Ko),e(MF,Rz),e(Rz,bKo),e(MF,vKo),e(V,FKo),e(V,EF),e(EF,L_e),e(L_e,TKo),e(EF,MKo),e(EF,Pz),e(Pz,EKo),e(EF,CKo),e(V,wKo),e(V,CF),e(CF,y_e),e(y_e,AKo),e(CF,LKo),e(CF,Bz),e(Bz,yKo),e(CF,xKo),e(V,$Ko),e(V,wF),e(wF,x_e),e(x_e,kKo),e(wF,SKo),e(wF,Iz),e(Iz,RKo),e(wF,PKo),e(V,BKo),e(V,AF),e(AF,$_e),e($_e,IKo),e(AF,NKo),e(AF,Nz),e(Nz,qKo),e(AF,jKo),e(V,DKo),e(V,LF),e(LF,k_e),e(k_e,GKo),e(LF,OKo),e(LF,qz),e(qz,VKo),e(LF,XKo),e(V,zKo),e(V,yF),e(yF,S_e),e(S_e,WKo),e(yF,QKo),e(yF,jz),e(jz,HKo),e(yF,UKo),e(no,JKo),e(no,xF),e(xF,YKo),e(xF,R_e),e(R_e,KKo),e(xF,ZKo),e(xF,P_e),e(P_e,eZo),e(no,oZo),M($F,no,null),b(f,IGe,_),b(f,fd,_),e(fd,kF),e(kF,B_e),M(OL,B_e,null),e(fd,rZo),e(fd,I_e),e(I_e,tZo),b(f,NGe,_),b(f,jo,_),M(VL,jo,null),e(jo,aZo),e(jo,md),e(md,nZo),e(md,Dz),e(Dz,sZo),e(md,lZo),e(md,Gz),e(Gz,iZo),e(md,dZo),e(jo,cZo),e(jo,XL),e(XL,fZo),e(XL,N_e),e(N_e,mZo),e(XL,gZo),e(jo,hZo),e(jo,pt),M(zL,pt,null),e(pt,pZo),e(pt,q_e),e(q_e,uZo),e(pt,_Zo),e(pt,gd),e(gd,bZo),e(gd,j_e),e(j_e,vZo),e(gd,FZo),e(gd,Oz),e(Oz,TZo),e(gd,MZo),e(pt,EZo),M(SF,pt,null),e(jo,CZo),e(jo,so),M(WL,so,null),e(so,wZo),e(so,D_e),e(D_e,AZo),e(so,LZo),e(so,Oa),e(Oa,yZo),e(Oa,G_e),e(G_e,xZo),e(Oa,$Zo),e(Oa,O_e),e(O_e,kZo),e(Oa,SZo),e(Oa,V_e),e(V_e,RZo),e(Oa,PZo),e(so,BZo),e(so,X_e),e(X_e,RF),e(RF,z_e),e(z_e,IZo),e(RF,NZo),e(RF,Vz),e(Vz,qZo),e(RF,jZo),e(so,DZo),e(so,PF),e(PF,GZo),e(PF,W_e),e(W_e,OZo),e(PF,VZo),e(PF,Q_e),e(Q_e,XZo),e(so,zZo),M(BF,so,null),b(f,qGe,_),b(f,hd,_),e(hd,IF),e(IF,H_e),M(QL,H_e,null),e(hd,WZo),e(hd,U_e),e(U_e,QZo),b(f,jGe,_),b(f,Do,_),M(HL,Do,null),e(Do,HZo),e(Do,pd),e(pd,UZo),e(pd,Xz),e(Xz,JZo),e(pd,YZo),e(pd,zz),e(zz,KZo),e(pd,ZZo),e(Do,eer),e(Do,UL),e(UL,oer),e(UL,J_e),e(J_e,rer),e(UL,ter),e(Do,aer),e(Do,ut),M(JL,ut,null),e(ut,ner),e(ut,Y_e),e(Y_e,ser),e(ut,ler),e(ut,ud),e(ud,ier),e(ud,K_e),e(K_e,der),e(ud,cer),e(ud,Wz),e(Wz,fer),e(ud,mer),e(ut,ger),M(NF,ut,null),e(Do,her),e(Do,lo),M(YL,lo,null),e(lo,per),e(lo,Z_e),e(Z_e,uer),e(lo,_er),e(lo,Va),e(Va,ber),e(Va,e1e),e(e1e,ver),e(Va,Fer),e(Va,o1e),e(o1e,Ter),e(Va,Mer),e(Va,r1e),e(r1e,Eer),e(Va,Cer),e(lo,wer),e(lo,Fe),e(Fe,qF),e(qF,t1e),e(t1e,Aer),e(qF,Ler),e(qF,Qz),e(Qz,yer),e(qF,xer),e(Fe,$er),e(Fe,jF),e(jF,a1e),e(a1e,ker),e(jF,Ser),e(jF,Hz),e(Hz,Rer),e(jF,Per),e(Fe,Ber),e(Fe,DF),e(DF,n1e),e(n1e,Ier),e(DF,Ner),e(DF,Uz),e(Uz,qer),e(DF,jer),e(Fe,Der),e(Fe,GF),e(GF,s1e),e(s1e,Ger),e(GF,Oer),e(GF,Jz),e(Jz,Ver),e(GF,Xer),e(Fe,zer),e(Fe,Vs),e(Vs,l1e),e(l1e,Wer),e(Vs,Qer),e(Vs,Yz),e(Yz,Her),e(Vs,Uer),e(Vs,Kz),e(Kz,Jer),e(Vs,Yer),e(Fe,Ker),e(Fe,OF),e(OF,i1e),e(i1e,Zer),e(OF,eor),e(OF,Zz),e(Zz,oor),e(OF,ror),e(Fe,tor),e(Fe,Xs),e(Xs,d1e),e(d1e,aor),e(Xs,nor),e(Xs,eW),e(eW,sor),e(Xs,lor),e(Xs,oW),e(oW,ior),e(Xs,dor),e(Fe,cor),e(Fe,_t),e(_t,c1e),e(c1e,mor),e(_t,gor),e(_t,rW),e(rW,hor),e(_t,por),e(_t,tW),e(tW,uor),e(_t,_or),e(_t,aW),e(aW,bor),e(_t,vor),e(Fe,For),e(Fe,VF),e(VF,f1e),e(f1e,Tor),e(VF,Mor),e(VF,nW),e(nW,Eor),e(VF,Cor),e(Fe,wor),e(Fe,XF),e(XF,m1e),e(m1e,Aor),e(XF,Lor),e(XF,sW),e(sW,yor),e(XF,xor),e(Fe,$or),e(Fe,zF),e(zF,g1e),e(g1e,kor),e(zF,Sor),e(zF,lW),e(lW,Ror),e(zF,Por),e(Fe,Bor),e(Fe,WF),e(WF,h1e),e(h1e,Ior),e(WF,Nor),e(WF,iW),e(iW,qor),e(WF,jor),e(Fe,Dor),e(Fe,QF),e(QF,p1e),e(p1e,Gor),e(QF,Oor),e(QF,dW),e(dW,Vor),e(QF,Xor),e(Fe,zor),e(Fe,HF),e(HF,u1e),e(u1e,Wor),e(HF,Qor),e(HF,cW),e(cW,Hor),e(HF,Uor),e(Fe,Jor),e(Fe,UF),e(UF,_1e),e(_1e,Yor),e(UF,Kor),e(UF,fW),e(fW,Zor),e(UF,err),e(lo,orr),e(lo,JF),e(JF,rrr),e(JF,b1e),e(b1e,trr),e(JF,arr),e(JF,v1e),e(v1e,nrr),e(lo,srr),M(YF,lo,null),b(f,DGe,_),b(f,_d,_),e(_d,KF),e(KF,F1e),M(KL,F1e,null),e(_d,lrr),e(_d,T1e),e(T1e,irr),b(f,GGe,_),b(f,Go,_),M(ZL,Go,null),e(Go,drr),e(Go,bd),e(bd,crr),e(bd,mW),e(mW,frr),e(bd,mrr),e(bd,gW),e(gW,grr),e(bd,hrr),e(Go,prr),e(Go,ey),e(ey,urr),e(ey,M1e),e(M1e,_rr),e(ey,brr),e(Go,vrr),e(Go,bt),M(oy,bt,null),e(bt,Frr),e(bt,E1e),e(E1e,Trr),e(bt,Mrr),e(bt,vd),e(vd,Err),e(vd,C1e),e(C1e,Crr),e(vd,wrr),e(vd,hW),e(hW,Arr),e(vd,Lrr),e(bt,yrr),M(ZF,bt,null),e(Go,xrr),e(Go,io),M(ry,io,null),e(io,$rr),e(io,w1e),e(w1e,krr),e(io,Srr),e(io,Xa),e(Xa,Rrr),e(Xa,A1e),e(A1e,Prr),e(Xa,Brr),e(Xa,L1e),e(L1e,Irr),e(Xa,Nrr),e(Xa,y1e),e(y1e,qrr),e(Xa,jrr),e(io,Drr),e(io,x1e),e(x1e,eT),e(eT,$1e),e($1e,Grr),e(eT,Orr),e(eT,pW),e(pW,Vrr),e(eT,Xrr),e(io,zrr),e(io,oT),e(oT,Wrr),e(oT,k1e),e(k1e,Qrr),e(oT,Hrr),e(oT,S1e),e(S1e,Urr),e(io,Jrr),M(rT,io,null),b(f,OGe,_),b(f,Fd,_),e(Fd,tT),e(tT,R1e),M(ty,R1e,null),e(Fd,Yrr),e(Fd,P1e),e(P1e,Krr),b(f,VGe,_),b(f,Oo,_),M(ay,Oo,null),e(Oo,Zrr),e(Oo,Td),e(Td,etr),e(Td,uW),e(uW,otr),e(Td,rtr),e(Td,_W),e(_W,ttr),e(Td,atr),e(Oo,ntr),e(Oo,ny),e(ny,str),e(ny,B1e),e(B1e,ltr),e(ny,itr),e(Oo,dtr),e(Oo,vt),M(sy,vt,null),e(vt,ctr),e(vt,I1e),e(I1e,ftr),e(vt,mtr),e(vt,Md),e(Md,gtr),e(Md,N1e),e(N1e,htr),e(Md,ptr),e(Md,bW),e(bW,utr),e(Md,_tr),e(vt,btr),M(aT,vt,null),e(Oo,vtr),e(Oo,co),M(ly,co,null),e(co,Ftr),e(co,q1e),e(q1e,Ttr),e(co,Mtr),e(co,za),e(za,Etr),e(za,j1e),e(j1e,Ctr),e(za,wtr),e(za,D1e),e(D1e,Atr),e(za,Ltr),e(za,G1e),e(G1e,ytr),e(za,xtr),e(co,$tr),e(co,O1e),e(O1e,nT),e(nT,V1e),e(V1e,ktr),e(nT,Str),e(nT,vW),e(vW,Rtr),e(nT,Ptr),e(co,Btr),e(co,sT),e(sT,Itr),e(sT,X1e),e(X1e,Ntr),e(sT,qtr),e(sT,z1e),e(z1e,jtr),e(co,Dtr),M(lT,co,null),b(f,XGe,_),b(f,Ed,_),e(Ed,iT),e(iT,W1e),M(iy,W1e,null),e(Ed,Gtr),e(Ed,Q1e),e(Q1e,Otr),b(f,zGe,_),b(f,Vo,_),M(dy,Vo,null),e(Vo,Vtr),e(Vo,Cd),e(Cd,Xtr),e(Cd,FW),e(FW,ztr),e(Cd,Wtr),e(Cd,TW),e(TW,Qtr),e(Cd,Htr),e(Vo,Utr),e(Vo,cy),e(cy,Jtr),e(cy,H1e),e(H1e,Ytr),e(cy,Ktr),e(Vo,Ztr),e(Vo,Ft),M(fy,Ft,null),e(Ft,ear),e(Ft,U1e),e(U1e,oar),e(Ft,rar),e(Ft,wd),e(wd,tar),e(wd,J1e),e(J1e,aar),e(wd,nar),e(wd,MW),e(MW,sar),e(wd,lar),e(Ft,iar),M(dT,Ft,null),e(Vo,dar),e(Vo,fo),M(my,fo,null),e(fo,car),e(fo,Y1e),e(Y1e,far),e(fo,mar),e(fo,Wa),e(Wa,gar),e(Wa,K1e),e(K1e,har),e(Wa,par),e(Wa,Z1e),e(Z1e,uar),e(Wa,_ar),e(Wa,e2e),e(e2e,bar),e(Wa,Far),e(fo,Tar),e(fo,Pe),e(Pe,cT),e(cT,o2e),e(o2e,Mar),e(cT,Ear),e(cT,EW),e(EW,Car),e(cT,war),e(Pe,Aar),e(Pe,fT),e(fT,r2e),e(r2e,Lar),e(fT,yar),e(fT,CW),e(CW,xar),e(fT,$ar),e(Pe,kar),e(Pe,mT),e(mT,t2e),e(t2e,Sar),e(mT,Rar),e(mT,wW),e(wW,Par),e(mT,Bar),e(Pe,Iar),e(Pe,gT),e(gT,a2e),e(a2e,Nar),e(gT,qar),e(gT,AW),e(AW,jar),e(gT,Dar),e(Pe,Gar),e(Pe,hT),e(hT,n2e),e(n2e,Oar),e(hT,Var),e(hT,LW),e(LW,Xar),e(hT,zar),e(Pe,War),e(Pe,pT),e(pT,s2e),e(s2e,Qar),e(pT,Har),e(pT,yW),e(yW,Uar),e(pT,Jar),e(Pe,Yar),e(Pe,uT),e(uT,l2e),e(l2e,Kar),e(uT,Zar),e(uT,xW),e(xW,enr),e(uT,onr),e(Pe,rnr),e(Pe,_T),e(_T,i2e),e(i2e,tnr),e(_T,anr),e(_T,$W),e($W,nnr),e(_T,snr),e(Pe,lnr),e(Pe,bT),e(bT,d2e),e(d2e,inr),e(bT,dnr),e(bT,kW),e(kW,cnr),e(bT,fnr),e(fo,mnr),e(fo,vT),e(vT,gnr),e(vT,c2e),e(c2e,hnr),e(vT,pnr),e(vT,f2e),e(f2e,unr),e(fo,_nr),M(FT,fo,null),b(f,WGe,_),b(f,Ad,_),e(Ad,TT),e(TT,m2e),M(gy,m2e,null),e(Ad,bnr),e(Ad,g2e),e(g2e,vnr),b(f,QGe,_),b(f,Xo,_),M(hy,Xo,null),e(Xo,Fnr),e(Xo,Ld),e(Ld,Tnr),e(Ld,SW),e(SW,Mnr),e(Ld,Enr),e(Ld,RW),e(RW,Cnr),e(Ld,wnr),e(Xo,Anr),e(Xo,py),e(py,Lnr),e(py,h2e),e(h2e,ynr),e(py,xnr),e(Xo,$nr),e(Xo,Tt),M(uy,Tt,null),e(Tt,knr),e(Tt,p2e),e(p2e,Snr),e(Tt,Rnr),e(Tt,yd),e(yd,Pnr),e(yd,u2e),e(u2e,Bnr),e(yd,Inr),e(yd,PW),e(PW,Nnr),e(yd,qnr),e(Tt,jnr),M(MT,Tt,null),e(Xo,Dnr),e(Xo,mo),M(_y,mo,null),e(mo,Gnr),e(mo,_2e),e(_2e,Onr),e(mo,Vnr),e(mo,Qa),e(Qa,Xnr),e(Qa,b2e),e(b2e,znr),e(Qa,Wnr),e(Qa,v2e),e(v2e,Qnr),e(Qa,Hnr),e(Qa,F2e),e(F2e,Unr),e(Qa,Jnr),e(mo,Ynr),e(mo,et),e(et,ET),e(ET,T2e),e(T2e,Knr),e(ET,Znr),e(ET,BW),e(BW,esr),e(ET,osr),e(et,rsr),e(et,CT),e(CT,M2e),e(M2e,tsr),e(CT,asr),e(CT,IW),e(IW,nsr),e(CT,ssr),e(et,lsr),e(et,wT),e(wT,E2e),e(E2e,isr),e(wT,dsr),e(wT,NW),e(NW,csr),e(wT,fsr),e(et,msr),e(et,AT),e(AT,C2e),e(C2e,gsr),e(AT,hsr),e(AT,qW),e(qW,psr),e(AT,usr),e(et,_sr),e(et,LT),e(LT,w2e),e(w2e,bsr),e(LT,vsr),e(LT,jW),e(jW,Fsr),e(LT,Tsr),e(mo,Msr),e(mo,yT),e(yT,Esr),e(yT,A2e),e(A2e,Csr),e(yT,wsr),e(yT,L2e),e(L2e,Asr),e(mo,Lsr),M(xT,mo,null),b(f,HGe,_),b(f,xd,_),e(xd,$T),e($T,y2e),M(by,y2e,null),e(xd,ysr),e(xd,x2e),e(x2e,xsr),b(f,UGe,_),b(f,zo,_),M(vy,zo,null),e(zo,$sr),e(zo,$d),e($d,ksr),e($d,DW),e(DW,Ssr),e($d,Rsr),e($d,GW),e(GW,Psr),e($d,Bsr),e(zo,Isr),e(zo,Fy),e(Fy,Nsr),e(Fy,$2e),e($2e,qsr),e(Fy,jsr),e(zo,Dsr),e(zo,Mt),M(Ty,Mt,null),e(Mt,Gsr),e(Mt,k2e),e(k2e,Osr),e(Mt,Vsr),e(Mt,kd),e(kd,Xsr),e(kd,S2e),e(S2e,zsr),e(kd,Wsr),e(kd,OW),e(OW,Qsr),e(kd,Hsr),e(Mt,Usr),M(kT,Mt,null),e(zo,Jsr),e(zo,go),M(My,go,null),e(go,Ysr),e(go,R2e),e(R2e,Ksr),e(go,Zsr),e(go,Ha),e(Ha,elr),e(Ha,P2e),e(P2e,olr),e(Ha,rlr),e(Ha,B2e),e(B2e,tlr),e(Ha,alr),e(Ha,I2e),e(I2e,nlr),e(Ha,slr),e(go,llr),e(go,Le),e(Le,ST),e(ST,N2e),e(N2e,ilr),e(ST,dlr),e(ST,VW),e(VW,clr),e(ST,flr),e(Le,mlr),e(Le,RT),e(RT,q2e),e(q2e,glr),e(RT,hlr),e(RT,XW),e(XW,plr),e(RT,ulr),e(Le,_lr),e(Le,PT),e(PT,j2e),e(j2e,blr),e(PT,vlr),e(PT,zW),e(zW,Flr),e(PT,Tlr),e(Le,Mlr),e(Le,BT),e(BT,D2e),e(D2e,Elr),e(BT,Clr),e(BT,WW),e(WW,wlr),e(BT,Alr),e(Le,Llr),e(Le,IT),e(IT,G2e),e(G2e,ylr),e(IT,xlr),e(IT,QW),e(QW,$lr),e(IT,klr),e(Le,Slr),e(Le,NT),e(NT,O2e),e(O2e,Rlr),e(NT,Plr),e(NT,HW),e(HW,Blr),e(NT,Ilr),e(Le,Nlr),e(Le,qT),e(qT,V2e),e(V2e,qlr),e(qT,jlr),e(qT,UW),e(UW,Dlr),e(qT,Glr),e(Le,Olr),e(Le,jT),e(jT,X2e),e(X2e,Vlr),e(jT,Xlr),e(jT,JW),e(JW,zlr),e(jT,Wlr),e(Le,Qlr),e(Le,DT),e(DT,z2e),e(z2e,Hlr),e(DT,Ulr),e(DT,YW),e(YW,Jlr),e(DT,Ylr),e(Le,Klr),e(Le,GT),e(GT,W2e),e(W2e,Zlr),e(GT,eir),e(GT,KW),e(KW,oir),e(GT,rir),e(go,tir),e(go,OT),e(OT,air),e(OT,Q2e),e(Q2e,nir),e(OT,sir),e(OT,H2e),e(H2e,lir),e(go,iir),M(VT,go,null),b(f,JGe,_),b(f,Sd,_),e(Sd,XT),e(XT,U2e),M(Ey,U2e,null),e(Sd,dir),e(Sd,J2e),e(J2e,cir),b(f,YGe,_),b(f,Wo,_),M(Cy,Wo,null),e(Wo,fir),e(Wo,Rd),e(Rd,mir),e(Rd,ZW),e(ZW,gir),e(Rd,hir),e(Rd,eQ),e(eQ,pir),e(Rd,uir),e(Wo,_ir),e(Wo,wy),e(wy,bir),e(wy,Y2e),e(Y2e,vir),e(wy,Fir),e(Wo,Tir),e(Wo,Et),M(Ay,Et,null),e(Et,Mir),e(Et,K2e),e(K2e,Eir),e(Et,Cir),e(Et,Pd),e(Pd,wir),e(Pd,Z2e),e(Z2e,Air),e(Pd,Lir),e(Pd,oQ),e(oQ,yir),e(Pd,xir),e(Et,$ir),M(zT,Et,null),e(Wo,kir),e(Wo,ho),M(Ly,ho,null),e(ho,Sir),e(ho,ebe),e(ebe,Rir),e(ho,Pir),e(ho,Ua),e(Ua,Bir),e(Ua,obe),e(obe,Iir),e(Ua,Nir),e(Ua,rbe),e(rbe,qir),e(Ua,jir),e(Ua,tbe),e(tbe,Dir),e(Ua,Gir),e(ho,Oir),e(ho,yy),e(yy,WT),e(WT,abe),e(abe,Vir),e(WT,Xir),e(WT,rQ),e(rQ,zir),e(WT,Wir),e(yy,Qir),e(yy,QT),e(QT,nbe),e(nbe,Hir),e(QT,Uir),e(QT,tQ),e(tQ,Jir),e(QT,Yir),e(ho,Kir),e(ho,HT),e(HT,Zir),e(HT,sbe),e(sbe,edr),e(HT,odr),e(HT,lbe),e(lbe,rdr),e(ho,tdr),M(UT,ho,null),b(f,KGe,_),b(f,Bd,_),e(Bd,JT),e(JT,ibe),M(xy,ibe,null),e(Bd,adr),e(Bd,dbe),e(dbe,ndr),b(f,ZGe,_),b(f,Qo,_),M($y,Qo,null),e(Qo,sdr),e(Qo,Id),e(Id,ldr),e(Id,aQ),e(aQ,idr),e(Id,ddr),e(Id,nQ),e(nQ,cdr),e(Id,fdr),e(Qo,mdr),e(Qo,ky),e(ky,gdr),e(ky,cbe),e(cbe,hdr),e(ky,pdr),e(Qo,udr),e(Qo,Ct),M(Sy,Ct,null),e(Ct,_dr),e(Ct,fbe),e(fbe,bdr),e(Ct,vdr),e(Ct,Nd),e(Nd,Fdr),e(Nd,mbe),e(mbe,Tdr),e(Nd,Mdr),e(Nd,sQ),e(sQ,Edr),e(Nd,Cdr),e(Ct,wdr),M(YT,Ct,null),e(Qo,Adr),e(Qo,po),M(Ry,po,null),e(po,Ldr),e(po,gbe),e(gbe,ydr),e(po,xdr),e(po,Ja),e(Ja,$dr),e(Ja,hbe),e(hbe,kdr),e(Ja,Sdr),e(Ja,pbe),e(pbe,Rdr),e(Ja,Pdr),e(Ja,ube),e(ube,Bdr),e(Ja,Idr),e(po,Ndr),e(po,ot),e(ot,KT),e(KT,_be),e(_be,qdr),e(KT,jdr),e(KT,lQ),e(lQ,Ddr),e(KT,Gdr),e(ot,Odr),e(ot,ZT),e(ZT,bbe),e(bbe,Vdr),e(ZT,Xdr),e(ZT,iQ),e(iQ,zdr),e(ZT,Wdr),e(ot,Qdr),e(ot,e7),e(e7,vbe),e(vbe,Hdr),e(e7,Udr),e(e7,dQ),e(dQ,Jdr),e(e7,Ydr),e(ot,Kdr),e(ot,o7),e(o7,Fbe),e(Fbe,Zdr),e(o7,ecr),e(o7,cQ),e(cQ,ocr),e(o7,rcr),e(ot,tcr),e(ot,r7),e(r7,Tbe),e(Tbe,acr),e(r7,ncr),e(r7,fQ),e(fQ,scr),e(r7,lcr),e(po,icr),e(po,t7),e(t7,dcr),e(t7,Mbe),e(Mbe,ccr),e(t7,fcr),e(t7,Ebe),e(Ebe,mcr),e(po,gcr),M(a7,po,null),b(f,eOe,_),b(f,qd,_),e(qd,n7),e(n7,Cbe),M(Py,Cbe,null),e(qd,hcr),e(qd,wbe),e(wbe,pcr),b(f,oOe,_),b(f,Ho,_),M(By,Ho,null),e(Ho,ucr),e(Ho,jd),e(jd,_cr),e(jd,mQ),e(mQ,bcr),e(jd,vcr),e(jd,gQ),e(gQ,Fcr),e(jd,Tcr),e(Ho,Mcr),e(Ho,Iy),e(Iy,Ecr),e(Iy,Abe),e(Abe,Ccr),e(Iy,wcr),e(Ho,Acr),e(Ho,wt),M(Ny,wt,null),e(wt,Lcr),e(wt,Lbe),e(Lbe,ycr),e(wt,xcr),e(wt,Dd),e(Dd,$cr),e(Dd,ybe),e(ybe,kcr),e(Dd,Scr),e(Dd,hQ),e(hQ,Rcr),e(Dd,Pcr),e(wt,Bcr),M(s7,wt,null),e(Ho,Icr),e(Ho,uo),M(qy,uo,null),e(uo,Ncr),e(uo,xbe),e(xbe,qcr),e(uo,jcr),e(uo,Ya),e(Ya,Dcr),e(Ya,$be),e($be,Gcr),e(Ya,Ocr),e(Ya,kbe),e(kbe,Vcr),e(Ya,Xcr),e(Ya,Sbe),e(Sbe,zcr),e(Ya,Wcr),e(uo,Qcr),e(uo,Gd),e(Gd,l7),e(l7,Rbe),e(Rbe,Hcr),e(l7,Ucr),e(l7,pQ),e(pQ,Jcr),e(l7,Ycr),e(Gd,Kcr),e(Gd,i7),e(i7,Pbe),e(Pbe,Zcr),e(i7,efr),e(i7,uQ),e(uQ,ofr),e(i7,rfr),e(Gd,tfr),e(Gd,d7),e(d7,Bbe),e(Bbe,afr),e(d7,nfr),e(d7,_Q),e(_Q,sfr),e(d7,lfr),e(uo,ifr),e(uo,c7),e(c7,dfr),e(c7,Ibe),e(Ibe,cfr),e(c7,ffr),e(c7,Nbe),e(Nbe,mfr),e(uo,gfr),M(f7,uo,null),b(f,rOe,_),b(f,Od,_),e(Od,m7),e(m7,qbe),M(jy,qbe,null),e(Od,hfr),e(Od,jbe),e(jbe,pfr),b(f,tOe,_),b(f,Uo,_),M(Dy,Uo,null),e(Uo,ufr),e(Uo,Vd),e(Vd,_fr),e(Vd,bQ),e(bQ,bfr),e(Vd,vfr),e(Vd,vQ),e(vQ,Ffr),e(Vd,Tfr),e(Uo,Mfr),e(Uo,Gy),e(Gy,Efr),e(Gy,Dbe),e(Dbe,Cfr),e(Gy,wfr),e(Uo,Afr),e(Uo,At),M(Oy,At,null),e(At,Lfr),e(At,Gbe),e(Gbe,yfr),e(At,xfr),e(At,Xd),e(Xd,$fr),e(Xd,Obe),e(Obe,kfr),e(Xd,Sfr),e(Xd,FQ),e(FQ,Rfr),e(Xd,Pfr),e(At,Bfr),M(g7,At,null),e(Uo,Ifr),e(Uo,_o),M(Vy,_o,null),e(_o,Nfr),e(_o,Vbe),e(Vbe,qfr),e(_o,jfr),e(_o,Ka),e(Ka,Dfr),e(Ka,Xbe),e(Xbe,Gfr),e(Ka,Ofr),e(Ka,zbe),e(zbe,Vfr),e(Ka,Xfr),e(Ka,Wbe),e(Wbe,zfr),e(Ka,Wfr),e(_o,Qfr),e(_o,Xy),e(Xy,h7),e(h7,Qbe),e(Qbe,Hfr),e(h7,Ufr),e(h7,TQ),e(TQ,Jfr),e(h7,Yfr),e(Xy,Kfr),e(Xy,p7),e(p7,Hbe),e(Hbe,Zfr),e(p7,emr),e(p7,MQ),e(MQ,omr),e(p7,rmr),e(_o,tmr),e(_o,u7),e(u7,amr),e(u7,Ube),e(Ube,nmr),e(u7,smr),e(u7,Jbe),e(Jbe,lmr),e(_o,imr),M(_7,_o,null),b(f,aOe,_),b(f,zd,_),e(zd,b7),e(b7,Ybe),M(zy,Ybe,null),e(zd,dmr),e(zd,Kbe),e(Kbe,cmr),b(f,nOe,_),b(f,Jo,_),M(Wy,Jo,null),e(Jo,fmr),e(Jo,Wd),e(Wd,mmr),e(Wd,EQ),e(EQ,gmr),e(Wd,hmr),e(Wd,CQ),e(CQ,pmr),e(Wd,umr),e(Jo,_mr),e(Jo,Qy),e(Qy,bmr),e(Qy,Zbe),e(Zbe,vmr),e(Qy,Fmr),e(Jo,Tmr),e(Jo,Lt),M(Hy,Lt,null),e(Lt,Mmr),e(Lt,eve),e(eve,Emr),e(Lt,Cmr),e(Lt,Qd),e(Qd,wmr),e(Qd,ove),e(ove,Amr),e(Qd,Lmr),e(Qd,wQ),e(wQ,ymr),e(Qd,xmr),e(Lt,$mr),M(v7,Lt,null),e(Jo,kmr),e(Jo,bo),M(Uy,bo,null),e(bo,Smr),e(bo,rve),e(rve,Rmr),e(bo,Pmr),e(bo,Za),e(Za,Bmr),e(Za,tve),e(tve,Imr),e(Za,Nmr),e(Za,ave),e(ave,qmr),e(Za,jmr),e(Za,nve),e(nve,Dmr),e(Za,Gmr),e(bo,Omr),e(bo,sve),e(sve,F7),e(F7,lve),e(lve,Vmr),e(F7,Xmr),e(F7,AQ),e(AQ,zmr),e(F7,Wmr),e(bo,Qmr),e(bo,T7),e(T7,Hmr),e(T7,ive),e(ive,Umr),e(T7,Jmr),e(T7,dve),e(dve,Ymr),e(bo,Kmr),M(M7,bo,null),b(f,sOe,_),b(f,Hd,_),e(Hd,E7),e(E7,cve),M(Jy,cve,null),e(Hd,Zmr),e(Hd,fve),e(fve,egr),b(f,lOe,_),b(f,Yo,_),M(Yy,Yo,null),e(Yo,ogr),e(Yo,Ud),e(Ud,rgr),e(Ud,LQ),e(LQ,tgr),e(Ud,agr),e(Ud,yQ),e(yQ,ngr),e(Ud,sgr),e(Yo,lgr),e(Yo,Ky),e(Ky,igr),e(Ky,mve),e(mve,dgr),e(Ky,cgr),e(Yo,fgr),e(Yo,yt),M(Zy,yt,null),e(yt,mgr),e(yt,gve),e(gve,ggr),e(yt,hgr),e(yt,Jd),e(Jd,pgr),e(Jd,hve),e(hve,ugr),e(Jd,_gr),e(Jd,xQ),e(xQ,bgr),e(Jd,vgr),e(yt,Fgr),M(C7,yt,null),e(Yo,Tgr),e(Yo,vo),M(e8,vo,null),e(vo,Mgr),e(vo,pve),e(pve,Egr),e(vo,Cgr),e(vo,en),e(en,wgr),e(en,uve),e(uve,Agr),e(en,Lgr),e(en,_ve),e(_ve,ygr),e(en,xgr),e(en,bve),e(bve,$gr),e(en,kgr),e(vo,Sgr),e(vo,on),e(on,w7),e(w7,vve),e(vve,Rgr),e(w7,Pgr),e(w7,$Q),e($Q,Bgr),e(w7,Igr),e(on,Ngr),e(on,A7),e(A7,Fve),e(Fve,qgr),e(A7,jgr),e(A7,kQ),e(kQ,Dgr),e(A7,Ggr),e(on,Ogr),e(on,L7),e(L7,Tve),e(Tve,Vgr),e(L7,Xgr),e(L7,SQ),e(SQ,zgr),e(L7,Wgr),e(on,Qgr),e(on,y7),e(y7,Mve),e(Mve,Hgr),e(y7,Ugr),e(y7,RQ),e(RQ,Jgr),e(y7,Ygr),e(vo,Kgr),e(vo,x7),e(x7,Zgr),e(x7,Eve),e(Eve,ehr),e(x7,ohr),e(x7,Cve),e(Cve,rhr),e(vo,thr),M($7,vo,null),b(f,iOe,_),b(f,Yd,_),e(Yd,k7),e(k7,wve),M(o8,wve,null),e(Yd,ahr),e(Yd,Ave),e(Ave,nhr),b(f,dOe,_),b(f,Ko,_),M(r8,Ko,null),e(Ko,shr),e(Ko,Kd),e(Kd,lhr),e(Kd,PQ),e(PQ,ihr),e(Kd,dhr),e(Kd,BQ),e(BQ,chr),e(Kd,fhr),e(Ko,mhr),e(Ko,t8),e(t8,ghr),e(t8,Lve),e(Lve,hhr),e(t8,phr),e(Ko,uhr),e(Ko,xt),M(a8,xt,null),e(xt,_hr),e(xt,yve),e(yve,bhr),e(xt,vhr),e(xt,Zd),e(Zd,Fhr),e(Zd,xve),e(xve,Thr),e(Zd,Mhr),e(Zd,IQ),e(IQ,Ehr),e(Zd,Chr),e(xt,whr),M(S7,xt,null),e(Ko,Ahr),e(Ko,Fo),M(n8,Fo,null),e(Fo,Lhr),e(Fo,$ve),e($ve,yhr),e(Fo,xhr),e(Fo,rn),e(rn,$hr),e(rn,kve),e(kve,khr),e(rn,Shr),e(rn,Sve),e(Sve,Rhr),e(rn,Phr),e(rn,Rve),e(Rve,Bhr),e(rn,Ihr),e(Fo,Nhr),e(Fo,Pve),e(Pve,R7),e(R7,Bve),e(Bve,qhr),e(R7,jhr),e(R7,NQ),e(NQ,Dhr),e(R7,Ghr),e(Fo,Ohr),e(Fo,P7),e(P7,Vhr),e(P7,Ive),e(Ive,Xhr),e(P7,zhr),e(P7,Nve),e(Nve,Whr),e(Fo,Qhr),M(B7,Fo,null),b(f,cOe,_),b(f,ec,_),e(ec,I7),e(I7,qve),M(s8,qve,null),e(ec,Hhr),e(ec,jve),e(jve,Uhr),b(f,fOe,_),b(f,Zo,_),M(l8,Zo,null),e(Zo,Jhr),e(Zo,oc),e(oc,Yhr),e(oc,qQ),e(qQ,Khr),e(oc,Zhr),e(oc,jQ),e(jQ,epr),e(oc,opr),e(Zo,rpr),e(Zo,i8),e(i8,tpr),e(i8,Dve),e(Dve,apr),e(i8,npr),e(Zo,spr),e(Zo,$t),M(d8,$t,null),e($t,lpr),e($t,Gve),e(Gve,ipr),e($t,dpr),e($t,rc),e(rc,cpr),e(rc,Ove),e(Ove,fpr),e(rc,mpr),e(rc,DQ),e(DQ,gpr),e(rc,hpr),e($t,ppr),M(N7,$t,null),e(Zo,upr),e(Zo,Lr),M(c8,Lr,null),e(Lr,_pr),e(Lr,Vve),e(Vve,bpr),e(Lr,vpr),e(Lr,tn),e(tn,Fpr),e(tn,Xve),e(Xve,Tpr),e(tn,Mpr),e(tn,zve),e(zve,Epr),e(tn,Cpr),e(tn,Wve),e(Wve,wpr),e(tn,Apr),e(Lr,Lpr),e(Lr,q),e(q,q7),e(q7,Qve),e(Qve,ypr),e(q7,xpr),e(q7,GQ),e(GQ,$pr),e(q7,kpr),e(q,Spr),e(q,j7),e(j7,Hve),e(Hve,Rpr),e(j7,Ppr),e(j7,OQ),e(OQ,Bpr),e(j7,Ipr),e(q,Npr),e(q,D7),e(D7,Uve),e(Uve,qpr),e(D7,jpr),e(D7,VQ),e(VQ,Dpr),e(D7,Gpr),e(q,Opr),e(q,G7),e(G7,Jve),e(Jve,Vpr),e(G7,Xpr),e(G7,XQ),e(XQ,zpr),e(G7,Wpr),e(q,Qpr),e(q,O7),e(O7,Yve),e(Yve,Hpr),e(O7,Upr),e(O7,zQ),e(zQ,Jpr),e(O7,Ypr),e(q,Kpr),e(q,V7),e(V7,Kve),e(Kve,Zpr),e(V7,eur),e(V7,WQ),e(WQ,our),e(V7,rur),e(q,tur),e(q,X7),e(X7,Zve),e(Zve,aur),e(X7,nur),e(X7,QQ),e(QQ,sur),e(X7,lur),e(q,iur),e(q,z7),e(z7,e0e),e(e0e,dur),e(z7,cur),e(z7,HQ),e(HQ,fur),e(z7,mur),e(q,gur),e(q,W7),e(W7,o0e),e(o0e,hur),e(W7,pur),e(W7,UQ),e(UQ,uur),e(W7,_ur),e(q,bur),e(q,Q7),e(Q7,r0e),e(r0e,vur),e(Q7,Fur),e(Q7,JQ),e(JQ,Tur),e(Q7,Mur),e(q,Eur),e(q,H7),e(H7,t0e),e(t0e,Cur),e(H7,wur),e(H7,YQ),e(YQ,Aur),e(H7,Lur),e(q,yur),e(q,U7),e(U7,a0e),e(a0e,xur),e(U7,$ur),e(U7,KQ),e(KQ,kur),e(U7,Sur),e(q,Rur),e(q,J7),e(J7,n0e),e(n0e,Pur),e(J7,Bur),e(J7,ZQ),e(ZQ,Iur),e(J7,Nur),e(q,qur),e(q,Y7),e(Y7,s0e),e(s0e,jur),e(Y7,Dur),e(Y7,eH),e(eH,Gur),e(Y7,Our),e(q,Vur),e(q,K7),e(K7,l0e),e(l0e,Xur),e(K7,zur),e(K7,oH),e(oH,Wur),e(K7,Qur),e(q,Hur),e(q,Z7),e(Z7,i0e),e(i0e,Uur),e(Z7,Jur),e(Z7,rH),e(rH,Yur),e(Z7,Kur),e(q,Zur),e(q,e9),e(e9,d0e),e(d0e,e_r),e(e9,o_r),e(e9,tH),e(tH,r_r),e(e9,t_r),e(q,a_r),e(q,zs),e(zs,c0e),e(c0e,n_r),e(zs,s_r),e(zs,aH),e(aH,l_r),e(zs,i_r),e(zs,nH),e(nH,d_r),e(zs,c_r),e(q,f_r),e(q,o9),e(o9,f0e),e(f0e,m_r),e(o9,g_r),e(o9,sH),e(sH,h_r),e(o9,p_r),e(q,u_r),e(q,r9),e(r9,m0e),e(m0e,__r),e(r9,b_r),e(r9,lH),e(lH,v_r),e(r9,F_r),e(q,T_r),e(q,t9),e(t9,g0e),e(g0e,M_r),e(t9,E_r),e(t9,iH),e(iH,C_r),e(t9,w_r),e(q,A_r),e(q,a9),e(a9,h0e),e(h0e,L_r),e(a9,y_r),e(a9,dH),e(dH,x_r),e(a9,$_r),e(q,k_r),e(q,n9),e(n9,p0e),e(p0e,S_r),e(n9,R_r),e(n9,cH),e(cH,P_r),e(n9,B_r),e(q,I_r),e(q,s9),e(s9,u0e),e(u0e,N_r),e(s9,q_r),e(s9,fH),e(fH,j_r),e(s9,D_r),e(q,G_r),e(q,l9),e(l9,_0e),e(_0e,O_r),e(l9,V_r),e(l9,mH),e(mH,X_r),e(l9,z_r),e(q,W_r),e(q,i9),e(i9,b0e),e(b0e,Q_r),e(i9,H_r),e(i9,gH),e(gH,U_r),e(i9,J_r),e(q,Y_r),e(q,d9),e(d9,v0e),e(v0e,K_r),e(d9,Z_r),e(d9,hH),e(hH,e1r),e(d9,o1r),e(q,r1r),e(q,c9),e(c9,F0e),e(F0e,t1r),e(c9,a1r),e(c9,pH),e(pH,n1r),e(c9,s1r),e(q,l1r),e(q,f9),e(f9,T0e),e(T0e,i1r),e(f9,d1r),e(f9,uH),e(uH,c1r),e(f9,f1r),e(q,m1r),e(q,m9),e(m9,M0e),e(M0e,g1r),e(m9,h1r),e(m9,_H),e(_H,p1r),e(m9,u1r),e(q,_1r),e(q,g9),e(g9,E0e),e(E0e,b1r),e(g9,v1r),e(g9,bH),e(bH,F1r),e(g9,T1r),e(q,M1r),e(q,h9),e(h9,C0e),e(C0e,E1r),e(h9,C1r),e(h9,vH),e(vH,w1r),e(h9,A1r),e(q,L1r),e(q,p9),e(p9,w0e),e(w0e,y1r),e(p9,x1r),e(p9,FH),e(FH,$1r),e(p9,k1r),e(q,S1r),e(q,u9),e(u9,A0e),e(A0e,R1r),e(u9,P1r),e(u9,TH),e(TH,B1r),e(u9,I1r),e(q,N1r),e(q,_9),e(_9,L0e),e(L0e,q1r),e(_9,j1r),e(_9,MH),e(MH,D1r),e(_9,G1r),e(q,O1r),e(q,b9),e(b9,y0e),e(y0e,V1r),e(b9,X1r),e(b9,EH),e(EH,z1r),e(b9,W1r),e(q,Q1r),e(q,v9),e(v9,x0e),e(x0e,H1r),e(v9,U1r),e(v9,CH),e(CH,J1r),e(v9,Y1r),e(q,K1r),e(q,F9),e(F9,$0e),e($0e,Z1r),e(F9,e2r),e(F9,wH),e(wH,o2r),e(F9,r2r),e(q,t2r),e(q,T9),e(T9,k0e),e(k0e,a2r),e(T9,n2r),e(T9,AH),e(AH,s2r),e(T9,l2r),e(q,i2r),e(q,M9),e(M9,S0e),e(S0e,d2r),e(M9,c2r),e(M9,LH),e(LH,f2r),e(M9,m2r),e(q,g2r),e(q,E9),e(E9,R0e),e(R0e,h2r),e(E9,p2r),e(E9,yH),e(yH,u2r),e(E9,_2r),e(q,b2r),e(q,C9),e(C9,P0e),e(P0e,v2r),e(C9,F2r),e(C9,xH),e(xH,T2r),e(C9,M2r),e(q,E2r),e(q,w9),e(w9,B0e),e(B0e,C2r),e(w9,w2r),e(w9,$H),e($H,A2r),e(w9,L2r),e(q,y2r),e(q,A9),e(A9,I0e),e(I0e,x2r),e(A9,$2r),e(A9,kH),e(kH,k2r),e(A9,S2r),e(q,R2r),e(q,L9),e(L9,N0e),e(N0e,P2r),e(L9,B2r),e(L9,SH),e(SH,I2r),e(L9,N2r),e(q,q2r),e(q,y9),e(y9,q0e),e(q0e,j2r),e(y9,D2r),e(y9,RH),e(RH,G2r),e(y9,O2r),e(q,V2r),e(q,x9),e(x9,j0e),e(j0e,X2r),e(x9,z2r),e(x9,PH),e(PH,W2r),e(x9,Q2r),e(Lr,H2r),M($9,Lr,null),b(f,mOe,_),b(f,tc,_),e(tc,k9),e(k9,D0e),M(f8,D0e,null),e(tc,U2r),e(tc,G0e),e(G0e,J2r),b(f,gOe,_),b(f,er,_),M(m8,er,null),e(er,Y2r),e(er,ac),e(ac,K2r),e(ac,BH),e(BH,Z2r),e(ac,ebr),e(ac,IH),e(IH,obr),e(ac,rbr),e(er,tbr),e(er,g8),e(g8,abr),e(g8,O0e),e(O0e,nbr),e(g8,sbr),e(er,lbr),e(er,kt),M(h8,kt,null),e(kt,ibr),e(kt,V0e),e(V0e,dbr),e(kt,cbr),e(kt,nc),e(nc,fbr),e(nc,X0e),e(X0e,mbr),e(nc,gbr),e(nc,NH),e(NH,hbr),e(nc,pbr),e(kt,ubr),M(S9,kt,null),e(er,_br),e(er,yr),M(p8,yr,null),e(yr,bbr),e(yr,z0e),e(z0e,vbr),e(yr,Fbr),e(yr,an),e(an,Tbr),e(an,W0e),e(W0e,Mbr),e(an,Ebr),e(an,Q0e),e(Q0e,Cbr),e(an,wbr),e(an,H0e),e(H0e,Abr),e(an,Lbr),e(yr,ybr),e(yr,se),e(se,R9),e(R9,U0e),e(U0e,xbr),e(R9,$br),e(R9,qH),e(qH,kbr),e(R9,Sbr),e(se,Rbr),e(se,P9),e(P9,J0e),e(J0e,Pbr),e(P9,Bbr),e(P9,jH),e(jH,Ibr),e(P9,Nbr),e(se,qbr),e(se,B9),e(B9,Y0e),e(Y0e,jbr),e(B9,Dbr),e(B9,DH),e(DH,Gbr),e(B9,Obr),e(se,Vbr),e(se,I9),e(I9,K0e),e(K0e,Xbr),e(I9,zbr),e(I9,GH),e(GH,Wbr),e(I9,Qbr),e(se,Hbr),e(se,N9),e(N9,Z0e),e(Z0e,Ubr),e(N9,Jbr),e(N9,OH),e(OH,Ybr),e(N9,Kbr),e(se,Zbr),e(se,q9),e(q9,eFe),e(eFe,evr),e(q9,ovr),e(q9,VH),e(VH,rvr),e(q9,tvr),e(se,avr),e(se,j9),e(j9,oFe),e(oFe,nvr),e(j9,svr),e(j9,XH),e(XH,lvr),e(j9,ivr),e(se,dvr),e(se,D9),e(D9,rFe),e(rFe,cvr),e(D9,fvr),e(D9,zH),e(zH,mvr),e(D9,gvr),e(se,hvr),e(se,G9),e(G9,tFe),e(tFe,pvr),e(G9,uvr),e(G9,WH),e(WH,_vr),e(G9,bvr),e(se,vvr),e(se,O9),e(O9,aFe),e(aFe,Fvr),e(O9,Tvr),e(O9,QH),e(QH,Mvr),e(O9,Evr),e(se,Cvr),e(se,V9),e(V9,nFe),e(nFe,wvr),e(V9,Avr),e(V9,HH),e(HH,Lvr),e(V9,yvr),e(se,xvr),e(se,X9),e(X9,sFe),e(sFe,$vr),e(X9,kvr),e(X9,UH),e(UH,Svr),e(X9,Rvr),e(se,Pvr),e(se,z9),e(z9,lFe),e(lFe,Bvr),e(z9,Ivr),e(z9,JH),e(JH,Nvr),e(z9,qvr),e(se,jvr),e(se,W9),e(W9,iFe),e(iFe,Dvr),e(W9,Gvr),e(W9,YH),e(YH,Ovr),e(W9,Vvr),e(se,Xvr),e(se,Q9),e(Q9,dFe),e(dFe,zvr),e(Q9,Wvr),e(Q9,KH),e(KH,Qvr),e(Q9,Hvr),e(se,Uvr),e(se,H9),e(H9,cFe),e(cFe,Jvr),e(H9,Yvr),e(H9,ZH),e(ZH,Kvr),e(H9,Zvr),e(se,e0r),e(se,U9),e(U9,fFe),e(fFe,o0r),e(U9,r0r),e(U9,eU),e(eU,t0r),e(U9,a0r),e(se,n0r),e(se,J9),e(J9,mFe),e(mFe,s0r),e(J9,l0r),e(J9,oU),e(oU,i0r),e(J9,d0r),e(se,c0r),e(se,Y9),e(Y9,gFe),e(gFe,f0r),e(Y9,m0r),e(Y9,rU),e(rU,g0r),e(Y9,h0r),e(se,p0r),e(se,K9),e(K9,hFe),e(hFe,u0r),e(K9,_0r),e(K9,tU),e(tU,b0r),e(K9,v0r),e(se,F0r),e(se,Z9),e(Z9,pFe),e(pFe,T0r),e(Z9,M0r),e(Z9,aU),e(aU,E0r),e(Z9,C0r),e(se,w0r),e(se,eM),e(eM,uFe),e(uFe,A0r),e(eM,L0r),e(eM,nU),e(nU,y0r),e(eM,x0r),e(se,$0r),e(se,oM),e(oM,_Fe),e(_Fe,k0r),e(oM,S0r),e(oM,sU),e(sU,R0r),e(oM,P0r),e(yr,B0r),M(rM,yr,null),b(f,hOe,_),b(f,sc,_),e(sc,tM),e(tM,bFe),M(u8,bFe,null),e(sc,I0r),e(sc,vFe),e(vFe,N0r),b(f,pOe,_),b(f,or,_),M(_8,or,null),e(or,q0r),e(or,lc),e(lc,j0r),e(lc,lU),e(lU,D0r),e(lc,G0r),e(lc,iU),e(iU,O0r),e(lc,V0r),e(or,X0r),e(or,b8),e(b8,z0r),e(b8,FFe),e(FFe,W0r),e(b8,Q0r),e(or,H0r),e(or,St),M(v8,St,null),e(St,U0r),e(St,TFe),e(TFe,J0r),e(St,Y0r),e(St,ic),e(ic,K0r),e(ic,MFe),e(MFe,Z0r),e(ic,eFr),e(ic,dU),e(dU,oFr),e(ic,rFr),e(St,tFr),M(aM,St,null),e(or,aFr),e(or,xr),M(F8,xr,null),e(xr,nFr),e(xr,EFe),e(EFe,sFr),e(xr,lFr),e(xr,nn),e(nn,iFr),e(nn,CFe),e(CFe,dFr),e(nn,cFr),e(nn,wFe),e(wFe,fFr),e(nn,mFr),e(nn,AFe),e(AFe,gFr),e(nn,hFr),e(xr,pFr),e(xr,Me),e(Me,nM),e(nM,LFe),e(LFe,uFr),e(nM,_Fr),e(nM,cU),e(cU,bFr),e(nM,vFr),e(Me,FFr),e(Me,sM),e(sM,yFe),e(yFe,TFr),e(sM,MFr),e(sM,fU),e(fU,EFr),e(sM,CFr),e(Me,wFr),e(Me,lM),e(lM,xFe),e(xFe,AFr),e(lM,LFr),e(lM,mU),e(mU,yFr),e(lM,xFr),e(Me,$Fr),e(Me,iM),e(iM,$Fe),e($Fe,kFr),e(iM,SFr),e(iM,gU),e(gU,RFr),e(iM,PFr),e(Me,BFr),e(Me,dM),e(dM,kFe),e(kFe,IFr),e(dM,NFr),e(dM,hU),e(hU,qFr),e(dM,jFr),e(Me,DFr),e(Me,cM),e(cM,SFe),e(SFe,GFr),e(cM,OFr),e(cM,pU),e(pU,VFr),e(cM,XFr),e(Me,zFr),e(Me,fM),e(fM,RFe),e(RFe,WFr),e(fM,QFr),e(fM,uU),e(uU,HFr),e(fM,UFr),e(Me,JFr),e(Me,mM),e(mM,PFe),e(PFe,YFr),e(mM,KFr),e(mM,_U),e(_U,ZFr),e(mM,eTr),e(Me,oTr),e(Me,gM),e(gM,BFe),e(BFe,rTr),e(gM,tTr),e(gM,bU),e(bU,aTr),e(gM,nTr),e(Me,sTr),e(Me,hM),e(hM,IFe),e(IFe,lTr),e(hM,iTr),e(hM,vU),e(vU,dTr),e(hM,cTr),e(Me,fTr),e(Me,pM),e(pM,NFe),e(NFe,mTr),e(pM,gTr),e(pM,FU),e(FU,hTr),e(pM,pTr),e(Me,uTr),e(Me,uM),e(uM,qFe),e(qFe,_Tr),e(uM,bTr),e(uM,TU),e(TU,vTr),e(uM,FTr),e(Me,TTr),e(Me,_M),e(_M,jFe),e(jFe,MTr),e(_M,ETr),e(_M,MU),e(MU,CTr),e(_M,wTr),e(xr,ATr),M(bM,xr,null),b(f,uOe,_),b(f,dc,_),e(dc,vM),e(vM,DFe),M(T8,DFe,null),e(dc,LTr),e(dc,GFe),e(GFe,yTr),b(f,_Oe,_),b(f,rr,_),M(M8,rr,null),e(rr,xTr),e(rr,cc),e(cc,$Tr),e(cc,EU),e(EU,kTr),e(cc,STr),e(cc,CU),e(CU,RTr),e(cc,PTr),e(rr,BTr),e(rr,E8),e(E8,ITr),e(E8,OFe),e(OFe,NTr),e(E8,qTr),e(rr,jTr),e(rr,Rt),M(C8,Rt,null),e(Rt,DTr),e(Rt,VFe),e(VFe,GTr),e(Rt,OTr),e(Rt,fc),e(fc,VTr),e(fc,XFe),e(XFe,XTr),e(fc,zTr),e(fc,wU),e(wU,WTr),e(fc,QTr),e(Rt,HTr),M(FM,Rt,null),e(rr,UTr),e(rr,$r),M(w8,$r,null),e($r,JTr),e($r,zFe),e(zFe,YTr),e($r,KTr),e($r,sn),e(sn,ZTr),e(sn,WFe),e(WFe,e7r),e(sn,o7r),e(sn,QFe),e(QFe,r7r),e(sn,t7r),e(sn,HFe),e(HFe,a7r),e(sn,n7r),e($r,s7r),e($r,ln),e(ln,TM),e(TM,UFe),e(UFe,l7r),e(TM,i7r),e(TM,AU),e(AU,d7r),e(TM,c7r),e(ln,f7r),e(ln,MM),e(MM,JFe),e(JFe,m7r),e(MM,g7r),e(MM,LU),e(LU,h7r),e(MM,p7r),e(ln,u7r),e(ln,EM),e(EM,YFe),e(YFe,_7r),e(EM,b7r),e(EM,yU),e(yU,v7r),e(EM,F7r),e(ln,T7r),e(ln,CM),e(CM,KFe),e(KFe,M7r),e(CM,E7r),e(CM,xU),e(xU,C7r),e(CM,w7r),e($r,A7r),M(wM,$r,null),b(f,bOe,_),b(f,mc,_),e(mc,AM),e(AM,ZFe),M(A8,ZFe,null),e(mc,L7r),e(mc,eTe),e(eTe,y7r),b(f,vOe,_),b(f,tr,_),M(L8,tr,null),e(tr,x7r),e(tr,gc),e(gc,$7r),e(gc,$U),e($U,k7r),e(gc,S7r),e(gc,kU),e(kU,R7r),e(gc,P7r),e(tr,B7r),e(tr,y8),e(y8,I7r),e(y8,oTe),e(oTe,N7r),e(y8,q7r),e(tr,j7r),e(tr,Pt),M(x8,Pt,null),e(Pt,D7r),e(Pt,rTe),e(rTe,G7r),e(Pt,O7r),e(Pt,hc),e(hc,V7r),e(hc,tTe),e(tTe,X7r),e(hc,z7r),e(hc,SU),e(SU,W7r),e(hc,Q7r),e(Pt,H7r),M(LM,Pt,null),e(tr,U7r),e(tr,kr),M($8,kr,null),e(kr,J7r),e(kr,aTe),e(aTe,Y7r),e(kr,K7r),e(kr,dn),e(dn,Z7r),e(dn,nTe),e(nTe,e9r),e(dn,o9r),e(dn,sTe),e(sTe,r9r),e(dn,t9r),e(dn,lTe),e(lTe,a9r),e(dn,n9r),e(kr,s9r),e(kr,ie),e(ie,yM),e(yM,iTe),e(iTe,l9r),e(yM,i9r),e(yM,RU),e(RU,d9r),e(yM,c9r),e(ie,f9r),e(ie,xM),e(xM,dTe),e(dTe,m9r),e(xM,g9r),e(xM,PU),e(PU,h9r),e(xM,p9r),e(ie,u9r),e(ie,$M),e($M,cTe),e(cTe,_9r),e($M,b9r),e($M,BU),e(BU,v9r),e($M,F9r),e(ie,T9r),e(ie,kM),e(kM,fTe),e(fTe,M9r),e(kM,E9r),e(kM,IU),e(IU,C9r),e(kM,w9r),e(ie,A9r),e(ie,SM),e(SM,mTe),e(mTe,L9r),e(SM,y9r),e(SM,NU),e(NU,x9r),e(SM,$9r),e(ie,k9r),e(ie,RM),e(RM,gTe),e(gTe,S9r),e(RM,R9r),e(RM,qU),e(qU,P9r),e(RM,B9r),e(ie,I9r),e(ie,PM),e(PM,hTe),e(hTe,N9r),e(PM,q9r),e(PM,jU),e(jU,j9r),e(PM,D9r),e(ie,G9r),e(ie,BM),e(BM,pTe),e(pTe,O9r),e(BM,V9r),e(BM,DU),e(DU,X9r),e(BM,z9r),e(ie,W9r),e(ie,IM),e(IM,uTe),e(uTe,Q9r),e(IM,H9r),e(IM,GU),e(GU,U9r),e(IM,J9r),e(ie,Y9r),e(ie,NM),e(NM,_Te),e(_Te,K9r),e(NM,Z9r),e(NM,OU),e(OU,eMr),e(NM,oMr),e(ie,rMr),e(ie,qM),e(qM,bTe),e(bTe,tMr),e(qM,aMr),e(qM,VU),e(VU,nMr),e(qM,sMr),e(ie,lMr),e(ie,jM),e(jM,vTe),e(vTe,iMr),e(jM,dMr),e(jM,XU),e(XU,cMr),e(jM,fMr),e(ie,mMr),e(ie,DM),e(DM,FTe),e(FTe,gMr),e(DM,hMr),e(DM,zU),e(zU,pMr),e(DM,uMr),e(ie,_Mr),e(ie,GM),e(GM,TTe),e(TTe,bMr),e(GM,vMr),e(GM,WU),e(WU,FMr),e(GM,TMr),e(ie,MMr),e(ie,OM),e(OM,MTe),e(MTe,EMr),e(OM,CMr),e(OM,QU),e(QU,wMr),e(OM,AMr),e(ie,LMr),e(ie,VM),e(VM,ETe),e(ETe,yMr),e(VM,xMr),e(VM,HU),e(HU,$Mr),e(VM,kMr),e(ie,SMr),e(ie,XM),e(XM,CTe),e(CTe,RMr),e(XM,PMr),e(XM,UU),e(UU,BMr),e(XM,IMr),e(ie,NMr),e(ie,zM),e(zM,wTe),e(wTe,qMr),e(zM,jMr),e(zM,JU),e(JU,DMr),e(zM,GMr),e(ie,OMr),e(ie,WM),e(WM,ATe),e(ATe,VMr),e(WM,XMr),e(WM,YU),e(YU,zMr),e(WM,WMr),e(ie,QMr),e(ie,QM),e(QM,LTe),e(LTe,HMr),e(QM,UMr),e(QM,KU),e(KU,JMr),e(QM,YMr),e(kr,KMr),M(HM,kr,null),b(f,FOe,_),b(f,pc,_),e(pc,UM),e(UM,yTe),M(k8,yTe,null),e(pc,ZMr),e(pc,xTe),e(xTe,e4r),b(f,TOe,_),b(f,ar,_),M(S8,ar,null),e(ar,o4r),e(ar,uc),e(uc,r4r),e(uc,ZU),e(ZU,t4r),e(uc,a4r),e(uc,eJ),e(eJ,n4r),e(uc,s4r),e(ar,l4r),e(ar,R8),e(R8,i4r),e(R8,$Te),e($Te,d4r),e(R8,c4r),e(ar,f4r),e(ar,Bt),M(P8,Bt,null),e(Bt,m4r),e(Bt,kTe),e(kTe,g4r),e(Bt,h4r),e(Bt,_c),e(_c,p4r),e(_c,STe),e(STe,u4r),e(_c,_4r),e(_c,oJ),e(oJ,b4r),e(_c,v4r),e(Bt,F4r),M(JM,Bt,null),e(ar,T4r),e(ar,Sr),M(B8,Sr,null),e(Sr,M4r),e(Sr,RTe),e(RTe,E4r),e(Sr,C4r),e(Sr,cn),e(cn,w4r),e(cn,PTe),e(PTe,A4r),e(cn,L4r),e(cn,BTe),e(BTe,y4r),e(cn,x4r),e(cn,ITe),e(ITe,$4r),e(cn,k4r),e(Sr,S4r),e(Sr,ye),e(ye,YM),e(YM,NTe),e(NTe,R4r),e(YM,P4r),e(YM,rJ),e(rJ,B4r),e(YM,I4r),e(ye,N4r),e(ye,KM),e(KM,qTe),e(qTe,q4r),e(KM,j4r),e(KM,tJ),e(tJ,D4r),e(KM,G4r),e(ye,O4r),e(ye,ZM),e(ZM,jTe),e(jTe,V4r),e(ZM,X4r),e(ZM,aJ),e(aJ,z4r),e(ZM,W4r),e(ye,Q4r),e(ye,e4),e(e4,DTe),e(DTe,H4r),e(e4,U4r),e(e4,nJ),e(nJ,J4r),e(e4,Y4r),e(ye,K4r),e(ye,o4),e(o4,GTe),e(GTe,Z4r),e(o4,eEr),e(o4,sJ),e(sJ,oEr),e(o4,rEr),e(ye,tEr),e(ye,r4),e(r4,OTe),e(OTe,aEr),e(r4,nEr),e(r4,lJ),e(lJ,sEr),e(r4,lEr),e(ye,iEr),e(ye,t4),e(t4,VTe),e(VTe,dEr),e(t4,cEr),e(t4,iJ),e(iJ,fEr),e(t4,mEr),e(ye,gEr),e(ye,a4),e(a4,XTe),e(XTe,hEr),e(a4,pEr),e(a4,dJ),e(dJ,uEr),e(a4,_Er),e(ye,bEr),e(ye,n4),e(n4,zTe),e(zTe,vEr),e(n4,FEr),e(n4,cJ),e(cJ,TEr),e(n4,MEr),e(ye,EEr),e(ye,s4),e(s4,WTe),e(WTe,CEr),e(s4,wEr),e(s4,fJ),e(fJ,AEr),e(s4,LEr),e(Sr,yEr),M(l4,Sr,null),b(f,MOe,_),b(f,bc,_),e(bc,i4),e(i4,QTe),M(I8,QTe,null),e(bc,xEr),e(bc,HTe),e(HTe,$Er),b(f,EOe,_),b(f,nr,_),M(N8,nr,null),e(nr,kEr),e(nr,vc),e(vc,SEr),e(vc,mJ),e(mJ,REr),e(vc,PEr),e(vc,gJ),e(gJ,BEr),e(vc,IEr),e(nr,NEr),e(nr,q8),e(q8,qEr),e(q8,UTe),e(UTe,jEr),e(q8,DEr),e(nr,GEr),e(nr,It),M(j8,It,null),e(It,OEr),e(It,JTe),e(JTe,VEr),e(It,XEr),e(It,Fc),e(Fc,zEr),e(Fc,YTe),e(YTe,WEr),e(Fc,QEr),e(Fc,hJ),e(hJ,HEr),e(Fc,UEr),e(It,JEr),M(d4,It,null),e(nr,YEr),e(nr,Rr),M(D8,Rr,null),e(Rr,KEr),e(Rr,KTe),e(KTe,ZEr),e(Rr,eCr),e(Rr,fn),e(fn,oCr),e(fn,ZTe),e(ZTe,rCr),e(fn,tCr),e(fn,e7e),e(e7e,aCr),e(fn,nCr),e(fn,o7e),e(o7e,sCr),e(fn,lCr),e(Rr,iCr),e(Rr,te),e(te,c4),e(c4,r7e),e(r7e,dCr),e(c4,cCr),e(c4,pJ),e(pJ,fCr),e(c4,mCr),e(te,gCr),e(te,f4),e(f4,t7e),e(t7e,hCr),e(f4,pCr),e(f4,uJ),e(uJ,uCr),e(f4,_Cr),e(te,bCr),e(te,m4),e(m4,a7e),e(a7e,vCr),e(m4,FCr),e(m4,_J),e(_J,TCr),e(m4,MCr),e(te,ECr),e(te,g4),e(g4,n7e),e(n7e,CCr),e(g4,wCr),e(g4,bJ),e(bJ,ACr),e(g4,LCr),e(te,yCr),e(te,h4),e(h4,s7e),e(s7e,xCr),e(h4,$Cr),e(h4,vJ),e(vJ,kCr),e(h4,SCr),e(te,RCr),e(te,p4),e(p4,l7e),e(l7e,PCr),e(p4,BCr),e(p4,FJ),e(FJ,ICr),e(p4,NCr),e(te,qCr),e(te,u4),e(u4,i7e),e(i7e,jCr),e(u4,DCr),e(u4,TJ),e(TJ,GCr),e(u4,OCr),e(te,VCr),e(te,_4),e(_4,d7e),e(d7e,XCr),e(_4,zCr),e(_4,MJ),e(MJ,WCr),e(_4,QCr),e(te,HCr),e(te,b4),e(b4,c7e),e(c7e,UCr),e(b4,JCr),e(b4,EJ),e(EJ,YCr),e(b4,KCr),e(te,ZCr),e(te,v4),e(v4,f7e),e(f7e,e5r),e(v4,o5r),e(v4,CJ),e(CJ,r5r),e(v4,t5r),e(te,a5r),e(te,F4),e(F4,m7e),e(m7e,n5r),e(F4,s5r),e(F4,wJ),e(wJ,l5r),e(F4,i5r),e(te,d5r),e(te,T4),e(T4,g7e),e(g7e,c5r),e(T4,f5r),e(T4,AJ),e(AJ,m5r),e(T4,g5r),e(te,h5r),e(te,M4),e(M4,h7e),e(h7e,p5r),e(M4,u5r),e(M4,LJ),e(LJ,_5r),e(M4,b5r),e(te,v5r),e(te,E4),e(E4,p7e),e(p7e,F5r),e(E4,T5r),e(E4,yJ),e(yJ,M5r),e(E4,E5r),e(te,C5r),e(te,C4),e(C4,u7e),e(u7e,w5r),e(C4,A5r),e(C4,xJ),e(xJ,L5r),e(C4,y5r),e(te,x5r),e(te,w4),e(w4,_7e),e(_7e,$5r),e(w4,k5r),e(w4,$J),e($J,S5r),e(w4,R5r),e(te,P5r),e(te,A4),e(A4,b7e),e(b7e,B5r),e(A4,I5r),e(A4,kJ),e(kJ,N5r),e(A4,q5r),e(te,j5r),e(te,L4),e(L4,v7e),e(v7e,D5r),e(L4,G5r),e(L4,SJ),e(SJ,O5r),e(L4,V5r),e(te,X5r),e(te,y4),e(y4,F7e),e(F7e,z5r),e(y4,W5r),e(y4,RJ),e(RJ,Q5r),e(y4,H5r),e(te,U5r),e(te,x4),e(x4,T7e),e(T7e,J5r),e(x4,Y5r),e(x4,PJ),e(PJ,K5r),e(x4,Z5r),e(te,e3r),e(te,$4),e($4,M7e),e(M7e,o3r),e($4,r3r),e($4,BJ),e(BJ,t3r),e($4,a3r),e(te,n3r),e(te,k4),e(k4,E7e),e(E7e,s3r),e(k4,l3r),e(k4,IJ),e(IJ,i3r),e(k4,d3r),e(te,c3r),e(te,S4),e(S4,C7e),e(C7e,f3r),e(S4,m3r),e(S4,NJ),e(NJ,g3r),e(S4,h3r),e(te,p3r),e(te,R4),e(R4,w7e),e(w7e,u3r),e(R4,_3r),e(R4,qJ),e(qJ,b3r),e(R4,v3r),e(te,F3r),e(te,P4),e(P4,A7e),e(A7e,T3r),e(P4,M3r),e(P4,jJ),e(jJ,E3r),e(P4,C3r),e(te,w3r),e(te,B4),e(B4,L7e),e(L7e,A3r),e(B4,L3r),e(B4,DJ),e(DJ,y3r),e(B4,x3r),e(Rr,$3r),M(I4,Rr,null),b(f,COe,_),b(f,Tc,_),e(Tc,N4),e(N4,y7e),M(G8,y7e,null),e(Tc,k3r),e(Tc,x7e),e(x7e,S3r),b(f,wOe,_),b(f,sr,_),M(O8,sr,null),e(sr,R3r),e(sr,Mc),e(Mc,P3r),e(Mc,GJ),e(GJ,B3r),e(Mc,I3r),e(Mc,OJ),e(OJ,N3r),e(Mc,q3r),e(sr,j3r),e(sr,V8),e(V8,D3r),e(V8,$7e),e($7e,G3r),e(V8,O3r),e(sr,V3r),e(sr,Nt),M(X8,Nt,null),e(Nt,X3r),e(Nt,k7e),e(k7e,z3r),e(Nt,W3r),e(Nt,Ec),e(Ec,Q3r),e(Ec,S7e),e(S7e,H3r),e(Ec,U3r),e(Ec,VJ),e(VJ,J3r),e(Ec,Y3r),e(Nt,K3r),M(q4,Nt,null),e(sr,Z3r),e(sr,Pr),M(z8,Pr,null),e(Pr,ewr),e(Pr,R7e),e(R7e,owr),e(Pr,rwr),e(Pr,mn),e(mn,twr),e(mn,P7e),e(P7e,awr),e(mn,nwr),e(mn,B7e),e(B7e,swr),e(mn,lwr),e(mn,I7e),e(I7e,iwr),e(mn,dwr),e(Pr,cwr),e(Pr,ue),e(ue,j4),e(j4,N7e),e(N7e,fwr),e(j4,mwr),e(j4,XJ),e(XJ,gwr),e(j4,hwr),e(ue,pwr),e(ue,D4),e(D4,q7e),e(q7e,uwr),e(D4,_wr),e(D4,zJ),e(zJ,bwr),e(D4,vwr),e(ue,Fwr),e(ue,G4),e(G4,j7e),e(j7e,Twr),e(G4,Mwr),e(G4,WJ),e(WJ,Ewr),e(G4,Cwr),e(ue,wwr),e(ue,O4),e(O4,D7e),e(D7e,Awr),e(O4,Lwr),e(O4,QJ),e(QJ,ywr),e(O4,xwr),e(ue,$wr),e(ue,V4),e(V4,G7e),e(G7e,kwr),e(V4,Swr),e(V4,HJ),e(HJ,Rwr),e(V4,Pwr),e(ue,Bwr),e(ue,X4),e(X4,O7e),e(O7e,Iwr),e(X4,Nwr),e(X4,UJ),e(UJ,qwr),e(X4,jwr),e(ue,Dwr),e(ue,z4),e(z4,V7e),e(V7e,Gwr),e(z4,Owr),e(z4,JJ),e(JJ,Vwr),e(z4,Xwr),e(ue,zwr),e(ue,W4),e(W4,X7e),e(X7e,Wwr),e(W4,Qwr),e(W4,YJ),e(YJ,Hwr),e(W4,Uwr),e(ue,Jwr),e(ue,Q4),e(Q4,z7e),e(z7e,Ywr),e(Q4,Kwr),e(Q4,KJ),e(KJ,Zwr),e(Q4,eAr),e(ue,oAr),e(ue,H4),e(H4,W7e),e(W7e,rAr),e(H4,tAr),e(H4,ZJ),e(ZJ,aAr),e(H4,nAr),e(ue,sAr),e(ue,U4),e(U4,Q7e),e(Q7e,lAr),e(U4,iAr),e(U4,eY),e(eY,dAr),e(U4,cAr),e(ue,fAr),e(ue,J4),e(J4,H7e),e(H7e,mAr),e(J4,gAr),e(J4,oY),e(oY,hAr),e(J4,pAr),e(ue,uAr),e(ue,Y4),e(Y4,U7e),e(U7e,_Ar),e(Y4,bAr),e(Y4,rY),e(rY,vAr),e(Y4,FAr),e(ue,TAr),e(ue,K4),e(K4,J7e),e(J7e,MAr),e(K4,EAr),e(K4,tY),e(tY,CAr),e(K4,wAr),e(ue,AAr),e(ue,Z4),e(Z4,Y7e),e(Y7e,LAr),e(Z4,yAr),e(Z4,aY),e(aY,xAr),e(Z4,$Ar),e(ue,kAr),e(ue,eE),e(eE,K7e),e(K7e,SAr),e(eE,RAr),e(eE,nY),e(nY,PAr),e(eE,BAr),e(ue,IAr),e(ue,oE),e(oE,Z7e),e(Z7e,NAr),e(oE,qAr),e(oE,sY),e(sY,jAr),e(oE,DAr),e(Pr,GAr),M(rE,Pr,null),b(f,AOe,_),b(f,Cc,_),e(Cc,tE),e(tE,e9e),M(W8,e9e,null),e(Cc,OAr),e(Cc,o9e),e(o9e,VAr),b(f,LOe,_),b(f,lr,_),M(Q8,lr,null),e(lr,XAr),e(lr,wc),e(wc,zAr),e(wc,lY),e(lY,WAr),e(wc,QAr),e(wc,iY),e(iY,HAr),e(wc,UAr),e(lr,JAr),e(lr,H8),e(H8,YAr),e(H8,r9e),e(r9e,KAr),e(H8,ZAr),e(lr,e6r),e(lr,qt),M(U8,qt,null),e(qt,o6r),e(qt,t9e),e(t9e,r6r),e(qt,t6r),e(qt,Ac),e(Ac,a6r),e(Ac,a9e),e(a9e,n6r),e(Ac,s6r),e(Ac,dY),e(dY,l6r),e(Ac,i6r),e(qt,d6r),M(aE,qt,null),e(lr,c6r),e(lr,Br),M(J8,Br,null),e(Br,f6r),e(Br,n9e),e(n9e,m6r),e(Br,g6r),e(Br,gn),e(gn,h6r),e(gn,s9e),e(s9e,p6r),e(gn,u6r),e(gn,l9e),e(l9e,_6r),e(gn,b6r),e(gn,i9e),e(i9e,v6r),e(gn,F6r),e(Br,T6r),e(Br,Y8),e(Y8,nE),e(nE,d9e),e(d9e,M6r),e(nE,E6r),e(nE,cY),e(cY,C6r),e(nE,w6r),e(Y8,A6r),e(Y8,sE),e(sE,c9e),e(c9e,L6r),e(sE,y6r),e(sE,fY),e(fY,x6r),e(sE,$6r),e(Br,k6r),M(lE,Br,null),b(f,yOe,_),b(f,Lc,_),e(Lc,iE),e(iE,f9e),M(K8,f9e,null),e(Lc,S6r),e(Lc,m9e),e(m9e,R6r),b(f,xOe,_),b(f,ir,_),M(Z8,ir,null),e(ir,P6r),e(ir,yc),e(yc,B6r),e(yc,mY),e(mY,I6r),e(yc,N6r),e(yc,gY),e(gY,q6r),e(yc,j6r),e(ir,D6r),e(ir,ex),e(ex,G6r),e(ex,g9e),e(g9e,O6r),e(ex,V6r),e(ir,X6r),e(ir,jt),M(ox,jt,null),e(jt,z6r),e(jt,h9e),e(h9e,W6r),e(jt,Q6r),e(jt,xc),e(xc,H6r),e(xc,p9e),e(p9e,U6r),e(xc,J6r),e(xc,hY),e(hY,Y6r),e(xc,K6r),e(jt,Z6r),M(dE,jt,null),e(ir,eLr),e(ir,Ir),M(rx,Ir,null),e(Ir,oLr),e(Ir,u9e),e(u9e,rLr),e(Ir,tLr),e(Ir,hn),e(hn,aLr),e(hn,_9e),e(_9e,nLr),e(hn,sLr),e(hn,b9e),e(b9e,lLr),e(hn,iLr),e(hn,v9e),e(v9e,dLr),e(hn,cLr),e(Ir,fLr),e(Ir,F9e),e(F9e,cE),e(cE,T9e),e(T9e,mLr),e(cE,gLr),e(cE,pY),e(pY,hLr),e(cE,pLr),e(Ir,uLr),M(fE,Ir,null),b(f,$Oe,_),b(f,$c,_),e($c,mE),e(mE,M9e),M(tx,M9e,null),e($c,_Lr),e($c,E9e),e(E9e,bLr),b(f,kOe,_),b(f,dr,_),M(ax,dr,null),e(dr,vLr),e(dr,kc),e(kc,FLr),e(kc,uY),e(uY,TLr),e(kc,MLr),e(kc,_Y),e(_Y,ELr),e(kc,CLr),e(dr,wLr),e(dr,nx),e(nx,ALr),e(nx,C9e),e(C9e,LLr),e(nx,yLr),e(dr,xLr),e(dr,Dt),M(sx,Dt,null),e(Dt,$Lr),e(Dt,w9e),e(w9e,kLr),e(Dt,SLr),e(Dt,Sc),e(Sc,RLr),e(Sc,A9e),e(A9e,PLr),e(Sc,BLr),e(Sc,bY),e(bY,ILr),e(Sc,NLr),e(Dt,qLr),M(gE,Dt,null),e(dr,jLr),e(dr,Nr),M(lx,Nr,null),e(Nr,DLr),e(Nr,L9e),e(L9e,GLr),e(Nr,OLr),e(Nr,pn),e(pn,VLr),e(pn,y9e),e(y9e,XLr),e(pn,zLr),e(pn,x9e),e(x9e,WLr),e(pn,QLr),e(pn,$9e),e($9e,HLr),e(pn,ULr),e(Nr,JLr),e(Nr,de),e(de,hE),e(hE,k9e),e(k9e,YLr),e(hE,KLr),e(hE,vY),e(vY,ZLr),e(hE,eyr),e(de,oyr),e(de,pE),e(pE,S9e),e(S9e,ryr),e(pE,tyr),e(pE,FY),e(FY,ayr),e(pE,nyr),e(de,syr),e(de,uE),e(uE,R9e),e(R9e,lyr),e(uE,iyr),e(uE,TY),e(TY,dyr),e(uE,cyr),e(de,fyr),e(de,_E),e(_E,P9e),e(P9e,myr),e(_E,gyr),e(_E,MY),e(MY,hyr),e(_E,pyr),e(de,uyr),e(de,bE),e(bE,B9e),e(B9e,_yr),e(bE,byr),e(bE,EY),e(EY,vyr),e(bE,Fyr),e(de,Tyr),e(de,vE),e(vE,I9e),e(I9e,Myr),e(vE,Eyr),e(vE,CY),e(CY,Cyr),e(vE,wyr),e(de,Ayr),e(de,FE),e(FE,N9e),e(N9e,Lyr),e(FE,yyr),e(FE,wY),e(wY,xyr),e(FE,$yr),e(de,kyr),e(de,TE),e(TE,q9e),e(q9e,Syr),e(TE,Ryr),e(TE,AY),e(AY,Pyr),e(TE,Byr),e(de,Iyr),e(de,ME),e(ME,j9e),e(j9e,Nyr),e(ME,qyr),e(ME,LY),e(LY,jyr),e(ME,Dyr),e(de,Gyr),e(de,EE),e(EE,D9e),e(D9e,Oyr),e(EE,Vyr),e(EE,yY),e(yY,Xyr),e(EE,zyr),e(de,Wyr),e(de,CE),e(CE,G9e),e(G9e,Qyr),e(CE,Hyr),e(CE,xY),e(xY,Uyr),e(CE,Jyr),e(de,Yyr),e(de,wE),e(wE,O9e),e(O9e,Kyr),e(wE,Zyr),e(wE,$Y),e($Y,e8r),e(wE,o8r),e(de,r8r),e(de,AE),e(AE,V9e),e(V9e,t8r),e(AE,a8r),e(AE,kY),e(kY,n8r),e(AE,s8r),e(de,l8r),e(de,LE),e(LE,X9e),e(X9e,i8r),e(LE,d8r),e(LE,SY),e(SY,c8r),e(LE,f8r),e(de,m8r),e(de,yE),e(yE,z9e),e(z9e,g8r),e(yE,h8r),e(yE,RY),e(RY,p8r),e(yE,u8r),e(de,_8r),e(de,xE),e(xE,W9e),e(W9e,b8r),e(xE,v8r),e(xE,PY),e(PY,F8r),e(xE,T8r),e(de,M8r),e(de,$E),e($E,Q9e),e(Q9e,E8r),e($E,C8r),e($E,BY),e(BY,w8r),e($E,A8r),e(de,L8r),e(de,kE),e(kE,H9e),e(H9e,y8r),e(kE,x8r),e(kE,IY),e(IY,$8r),e(kE,k8r),e(de,S8r),e(de,SE),e(SE,U9e),e(U9e,R8r),e(SE,P8r),e(SE,NY),e(NY,B8r),e(SE,I8r),e(de,N8r),e(de,RE),e(RE,J9e),e(J9e,q8r),e(RE,j8r),e(RE,qY),e(qY,D8r),e(RE,G8r),e(Nr,O8r),M(PE,Nr,null),b(f,SOe,_),b(f,Rc,_),e(Rc,BE),e(BE,Y9e),M(ix,Y9e,null),e(Rc,V8r),e(Rc,K9e),e(K9e,X8r),b(f,ROe,_),b(f,cr,_),M(dx,cr,null),e(cr,z8r),e(cr,Pc),e(Pc,W8r),e(Pc,jY),e(jY,Q8r),e(Pc,H8r),e(Pc,DY),e(DY,U8r),e(Pc,J8r),e(cr,Y8r),e(cr,cx),e(cx,K8r),e(cx,Z9e),e(Z9e,Z8r),e(cx,exr),e(cr,oxr),e(cr,Gt),M(fx,Gt,null),e(Gt,rxr),e(Gt,eMe),e(eMe,txr),e(Gt,axr),e(Gt,Bc),e(Bc,nxr),e(Bc,oMe),e(oMe,sxr),e(Bc,lxr),e(Bc,GY),e(GY,ixr),e(Bc,dxr),e(Gt,cxr),M(IE,Gt,null),e(cr,fxr),e(cr,qr),M(mx,qr,null),e(qr,mxr),e(qr,rMe),e(rMe,gxr),e(qr,hxr),e(qr,un),e(un,pxr),e(un,tMe),e(tMe,uxr),e(un,_xr),e(un,aMe),e(aMe,bxr),e(un,vxr),e(un,nMe),e(nMe,Fxr),e(un,Txr),e(qr,Mxr),e(qr,ce),e(ce,NE),e(NE,sMe),e(sMe,Exr),e(NE,Cxr),e(NE,OY),e(OY,wxr),e(NE,Axr),e(ce,Lxr),e(ce,qE),e(qE,lMe),e(lMe,yxr),e(qE,xxr),e(qE,VY),e(VY,$xr),e(qE,kxr),e(ce,Sxr),e(ce,jE),e(jE,iMe),e(iMe,Rxr),e(jE,Pxr),e(jE,XY),e(XY,Bxr),e(jE,Ixr),e(ce,Nxr),e(ce,DE),e(DE,dMe),e(dMe,qxr),e(DE,jxr),e(DE,zY),e(zY,Dxr),e(DE,Gxr),e(ce,Oxr),e(ce,GE),e(GE,cMe),e(cMe,Vxr),e(GE,Xxr),e(GE,WY),e(WY,zxr),e(GE,Wxr),e(ce,Qxr),e(ce,OE),e(OE,fMe),e(fMe,Hxr),e(OE,Uxr),e(OE,QY),e(QY,Jxr),e(OE,Yxr),e(ce,Kxr),e(ce,VE),e(VE,mMe),e(mMe,Zxr),e(VE,e$r),e(VE,HY),e(HY,o$r),e(VE,r$r),e(ce,t$r),e(ce,XE),e(XE,gMe),e(gMe,a$r),e(XE,n$r),e(XE,UY),e(UY,s$r),e(XE,l$r),e(ce,i$r),e(ce,zE),e(zE,hMe),e(hMe,d$r),e(zE,c$r),e(zE,JY),e(JY,f$r),e(zE,m$r),e(ce,g$r),e(ce,WE),e(WE,pMe),e(pMe,h$r),e(WE,p$r),e(WE,YY),e(YY,u$r),e(WE,_$r),e(ce,b$r),e(ce,QE),e(QE,uMe),e(uMe,v$r),e(QE,F$r),e(QE,KY),e(KY,T$r),e(QE,M$r),e(ce,E$r),e(ce,HE),e(HE,_Me),e(_Me,C$r),e(HE,w$r),e(HE,ZY),e(ZY,A$r),e(HE,L$r),e(ce,y$r),e(ce,UE),e(UE,bMe),e(bMe,x$r),e(UE,$$r),e(UE,eK),e(eK,k$r),e(UE,S$r),e(ce,R$r),e(ce,JE),e(JE,vMe),e(vMe,P$r),e(JE,B$r),e(JE,oK),e(oK,I$r),e(JE,N$r),e(ce,q$r),e(ce,YE),e(YE,FMe),e(FMe,j$r),e(YE,D$r),e(YE,rK),e(rK,G$r),e(YE,O$r),e(ce,V$r),e(ce,KE),e(KE,TMe),e(TMe,X$r),e(KE,z$r),e(KE,tK),e(tK,W$r),e(KE,Q$r),e(ce,H$r),e(ce,ZE),e(ZE,MMe),e(MMe,U$r),e(ZE,J$r),e(ZE,aK),e(aK,Y$r),e(ZE,K$r),e(ce,Z$r),e(ce,eC),e(eC,EMe),e(EMe,ekr),e(eC,okr),e(eC,nK),e(nK,rkr),e(eC,tkr),e(ce,akr),e(ce,oC),e(oC,CMe),e(CMe,nkr),e(oC,skr),e(oC,sK),e(sK,lkr),e(oC,ikr),e(ce,dkr),e(ce,rC),e(rC,wMe),e(wMe,ckr),e(rC,fkr),e(rC,lK),e(lK,mkr),e(rC,gkr),e(qr,hkr),M(tC,qr,null),b(f,POe,_),b(f,Ic,_),e(Ic,aC),e(aC,AMe),M(gx,AMe,null),e(Ic,pkr),e(Ic,LMe),e(LMe,ukr),b(f,BOe,_),b(f,fr,_),M(hx,fr,null),e(fr,_kr),e(fr,Nc),e(Nc,bkr),e(Nc,iK),e(iK,vkr),e(Nc,Fkr),e(Nc,dK),e(dK,Tkr),e(Nc,Mkr),e(fr,Ekr),e(fr,px),e(px,Ckr),e(px,yMe),e(yMe,wkr),e(px,Akr),e(fr,Lkr),e(fr,Ot),M(ux,Ot,null),e(Ot,ykr),e(Ot,xMe),e(xMe,xkr),e(Ot,$kr),e(Ot,qc),e(qc,kkr),e(qc,$Me),e($Me,Skr),e(qc,Rkr),e(qc,cK),e(cK,Pkr),e(qc,Bkr),e(Ot,Ikr),M(nC,Ot,null),e(fr,Nkr),e(fr,jr),M(_x,jr,null),e(jr,qkr),e(jr,kMe),e(kMe,jkr),e(jr,Dkr),e(jr,_n),e(_n,Gkr),e(_n,SMe),e(SMe,Okr),e(_n,Vkr),e(_n,RMe),e(RMe,Xkr),e(_n,zkr),e(_n,PMe),e(PMe,Wkr),e(_n,Qkr),e(jr,Hkr),e(jr,BMe),e(BMe,sC),e(sC,IMe),e(IMe,Ukr),e(sC,Jkr),e(sC,fK),e(fK,Ykr),e(sC,Kkr),e(jr,Zkr),M(lC,jr,null),b(f,IOe,_),b(f,jc,_),e(jc,iC),e(iC,NMe),M(bx,NMe,null),e(jc,eSr),e(jc,qMe),e(qMe,oSr),b(f,NOe,_),b(f,mr,_),M(vx,mr,null),e(mr,rSr),e(mr,Dc),e(Dc,tSr),e(Dc,mK),e(mK,aSr),e(Dc,nSr),e(Dc,gK),e(gK,sSr),e(Dc,lSr),e(mr,iSr),e(mr,Fx),e(Fx,dSr),e(Fx,jMe),e(jMe,cSr),e(Fx,fSr),e(mr,mSr),e(mr,Vt),M(Tx,Vt,null),e(Vt,gSr),e(Vt,DMe),e(DMe,hSr),e(Vt,pSr),e(Vt,Gc),e(Gc,uSr),e(Gc,GMe),e(GMe,_Sr),e(Gc,bSr),e(Gc,hK),e(hK,vSr),e(Gc,FSr),e(Vt,TSr),M(dC,Vt,null),e(mr,MSr),e(mr,Dr),M(Mx,Dr,null),e(Dr,ESr),e(Dr,OMe),e(OMe,CSr),e(Dr,wSr),e(Dr,bn),e(bn,ASr),e(bn,VMe),e(VMe,LSr),e(bn,ySr),e(bn,XMe),e(XMe,xSr),e(bn,$Sr),e(bn,zMe),e(zMe,kSr),e(bn,SSr),e(Dr,RSr),e(Dr,WMe),e(WMe,cC),e(cC,QMe),e(QMe,PSr),e(cC,BSr),e(cC,pK),e(pK,ISr),e(cC,NSr),e(Dr,qSr),M(fC,Dr,null),b(f,qOe,_),b(f,Oc,_),e(Oc,mC),e(mC,HMe),M(Ex,HMe,null),e(Oc,jSr),e(Oc,UMe),e(UMe,DSr),b(f,jOe,_),b(f,gr,_),M(Cx,gr,null),e(gr,GSr),e(gr,Vc),e(Vc,OSr),e(Vc,uK),e(uK,VSr),e(Vc,XSr),e(Vc,_K),e(_K,zSr),e(Vc,WSr),e(gr,QSr),e(gr,wx),e(wx,HSr),e(wx,JMe),e(JMe,USr),e(wx,JSr),e(gr,YSr),e(gr,Xt),M(Ax,Xt,null),e(Xt,KSr),e(Xt,YMe),e(YMe,ZSr),e(Xt,eRr),e(Xt,Xc),e(Xc,oRr),e(Xc,KMe),e(KMe,rRr),e(Xc,tRr),e(Xc,bK),e(bK,aRr),e(Xc,nRr),e(Xt,sRr),M(gC,Xt,null),e(gr,lRr),e(gr,Gr),M(Lx,Gr,null),e(Gr,iRr),e(Gr,ZMe),e(ZMe,dRr),e(Gr,cRr),e(Gr,vn),e(vn,fRr),e(vn,e4e),e(e4e,mRr),e(vn,gRr),e(vn,o4e),e(o4e,hRr),e(vn,pRr),e(vn,r4e),e(r4e,uRr),e(vn,_Rr),e(Gr,bRr),e(Gr,oe),e(oe,hC),e(hC,t4e),e(t4e,vRr),e(hC,FRr),e(hC,vK),e(vK,TRr),e(hC,MRr),e(oe,ERr),e(oe,pC),e(pC,a4e),e(a4e,CRr),e(pC,wRr),e(pC,FK),e(FK,ARr),e(pC,LRr),e(oe,yRr),e(oe,uC),e(uC,n4e),e(n4e,xRr),e(uC,$Rr),e(uC,TK),e(TK,kRr),e(uC,SRr),e(oe,RRr),e(oe,_C),e(_C,s4e),e(s4e,PRr),e(_C,BRr),e(_C,MK),e(MK,IRr),e(_C,NRr),e(oe,qRr),e(oe,bC),e(bC,l4e),e(l4e,jRr),e(bC,DRr),e(bC,EK),e(EK,GRr),e(bC,ORr),e(oe,VRr),e(oe,vC),e(vC,i4e),e(i4e,XRr),e(vC,zRr),e(vC,CK),e(CK,WRr),e(vC,QRr),e(oe,HRr),e(oe,FC),e(FC,d4e),e(d4e,URr),e(FC,JRr),e(FC,wK),e(wK,YRr),e(FC,KRr),e(oe,ZRr),e(oe,TC),e(TC,c4e),e(c4e,ePr),e(TC,oPr),e(TC,AK),e(AK,rPr),e(TC,tPr),e(oe,aPr),e(oe,MC),e(MC,f4e),e(f4e,nPr),e(MC,sPr),e(MC,LK),e(LK,lPr),e(MC,iPr),e(oe,dPr),e(oe,EC),e(EC,m4e),e(m4e,cPr),e(EC,fPr),e(EC,yK),e(yK,mPr),e(EC,gPr),e(oe,hPr),e(oe,CC),e(CC,g4e),e(g4e,pPr),e(CC,uPr),e(CC,xK),e(xK,_Pr),e(CC,bPr),e(oe,vPr),e(oe,wC),e(wC,h4e),e(h4e,FPr),e(wC,TPr),e(wC,$K),e($K,MPr),e(wC,EPr),e(oe,CPr),e(oe,AC),e(AC,p4e),e(p4e,wPr),e(AC,APr),e(AC,kK),e(kK,LPr),e(AC,yPr),e(oe,xPr),e(oe,LC),e(LC,u4e),e(u4e,$Pr),e(LC,kPr),e(LC,SK),e(SK,SPr),e(LC,RPr),e(oe,PPr),e(oe,yC),e(yC,_4e),e(_4e,BPr),e(yC,IPr),e(yC,RK),e(RK,NPr),e(yC,qPr),e(oe,jPr),e(oe,xC),e(xC,b4e),e(b4e,DPr),e(xC,GPr),e(xC,PK),e(PK,OPr),e(xC,VPr),e(oe,XPr),e(oe,$C),e($C,v4e),e(v4e,zPr),e($C,WPr),e($C,BK),e(BK,QPr),e($C,HPr),e(oe,UPr),e(oe,kC),e(kC,F4e),e(F4e,JPr),e(kC,YPr),e(kC,IK),e(IK,KPr),e(kC,ZPr),e(oe,eBr),e(oe,SC),e(SC,T4e),e(T4e,oBr),e(SC,rBr),e(SC,NK),e(NK,tBr),e(SC,aBr),e(oe,nBr),e(oe,RC),e(RC,M4e),e(M4e,sBr),e(RC,lBr),e(RC,qK),e(qK,iBr),e(RC,dBr),e(oe,cBr),e(oe,PC),e(PC,E4e),e(E4e,fBr),e(PC,mBr),e(PC,jK),e(jK,gBr),e(PC,hBr),e(oe,pBr),e(oe,BC),e(BC,C4e),e(C4e,uBr),e(BC,_Br),e(BC,DK),e(DK,bBr),e(BC,vBr),e(oe,FBr),e(oe,IC),e(IC,w4e),e(w4e,TBr),e(IC,MBr),e(IC,GK),e(GK,EBr),e(IC,CBr),e(oe,wBr),e(oe,NC),e(NC,A4e),e(A4e,ABr),e(NC,LBr),e(NC,OK),e(OK,yBr),e(NC,xBr),e(oe,$Br),e(oe,qC),e(qC,L4e),e(L4e,kBr),e(qC,SBr),e(qC,VK),e(VK,RBr),e(qC,PBr),e(oe,BBr),e(oe,jC),e(jC,y4e),e(y4e,IBr),e(jC,NBr),e(jC,XK),e(XK,qBr),e(jC,jBr),e(oe,DBr),e(oe,DC),e(DC,x4e),e(x4e,GBr),e(DC,OBr),e(DC,zK),e(zK,VBr),e(DC,XBr),e(Gr,zBr),M(GC,Gr,null),b(f,DOe,_),b(f,zc,_),e(zc,OC),e(OC,$4e),M(yx,$4e,null),e(zc,WBr),e(zc,k4e),e(k4e,QBr),b(f,GOe,_),b(f,hr,_),M(xx,hr,null),e(hr,HBr),e(hr,Wc),e(Wc,UBr),e(Wc,WK),e(WK,JBr),e(Wc,YBr),e(Wc,QK),e(QK,KBr),e(Wc,ZBr),e(hr,eIr),e(hr,$x),e($x,oIr),e($x,S4e),e(S4e,rIr),e($x,tIr),e(hr,aIr),e(hr,zt),M(kx,zt,null),e(zt,nIr),e(zt,R4e),e(R4e,sIr),e(zt,lIr),e(zt,Qc),e(Qc,iIr),e(Qc,P4e),e(P4e,dIr),e(Qc,cIr),e(Qc,HK),e(HK,fIr),e(Qc,mIr),e(zt,gIr),M(VC,zt,null),e(hr,hIr),e(hr,Or),M(Sx,Or,null),e(Or,pIr),e(Or,B4e),e(B4e,uIr),e(Or,_Ir),e(Or,Fn),e(Fn,bIr),e(Fn,I4e),e(I4e,vIr),e(Fn,FIr),e(Fn,N4e),e(N4e,TIr),e(Fn,MIr),e(Fn,q4e),e(q4e,EIr),e(Fn,CIr),e(Or,wIr),e(Or,xe),e(xe,XC),e(XC,j4e),e(j4e,AIr),e(XC,LIr),e(XC,UK),e(UK,yIr),e(XC,xIr),e(xe,$Ir),e(xe,zC),e(zC,D4e),e(D4e,kIr),e(zC,SIr),e(zC,JK),e(JK,RIr),e(zC,PIr),e(xe,BIr),e(xe,WC),e(WC,G4e),e(G4e,IIr),e(WC,NIr),e(WC,YK),e(YK,qIr),e(WC,jIr),e(xe,DIr),e(xe,QC),e(QC,O4e),e(O4e,GIr),e(QC,OIr),e(QC,KK),e(KK,VIr),e(QC,XIr),e(xe,zIr),e(xe,HC),e(HC,V4e),e(V4e,WIr),e(HC,QIr),e(HC,ZK),e(ZK,HIr),e(HC,UIr),e(xe,JIr),e(xe,UC),e(UC,X4e),e(X4e,YIr),e(UC,KIr),e(UC,eZ),e(eZ,ZIr),e(UC,eNr),e(xe,oNr),e(xe,JC),e(JC,z4e),e(z4e,rNr),e(JC,tNr),e(JC,oZ),e(oZ,aNr),e(JC,nNr),e(xe,sNr),e(xe,YC),e(YC,W4e),e(W4e,lNr),e(YC,iNr),e(YC,rZ),e(rZ,dNr),e(YC,cNr),e(xe,fNr),e(xe,KC),e(KC,Q4e),e(Q4e,mNr),e(KC,gNr),e(KC,tZ),e(tZ,hNr),e(KC,pNr),e(xe,uNr),e(xe,ZC),e(ZC,H4e),e(H4e,_Nr),e(ZC,bNr),e(ZC,aZ),e(aZ,vNr),e(ZC,FNr),e(Or,TNr),M(e5,Or,null),b(f,OOe,_),b(f,Hc,_),e(Hc,o5),e(o5,U4e),M(Rx,U4e,null),e(Hc,MNr),e(Hc,J4e),e(J4e,ENr),b(f,VOe,_),b(f,pr,_),M(Px,pr,null),e(pr,CNr),e(pr,Uc),e(Uc,wNr),e(Uc,nZ),e(nZ,ANr),e(Uc,LNr),e(Uc,sZ),e(sZ,yNr),e(Uc,xNr),e(pr,$Nr),e(pr,Bx),e(Bx,kNr),e(Bx,Y4e),e(Y4e,SNr),e(Bx,RNr),e(pr,PNr),e(pr,Wt),M(Ix,Wt,null),e(Wt,BNr),e(Wt,K4e),e(K4e,INr),e(Wt,NNr),e(Wt,Jc),e(Jc,qNr),e(Jc,Z4e),e(Z4e,jNr),e(Jc,DNr),e(Jc,lZ),e(lZ,GNr),e(Jc,ONr),e(Wt,VNr),M(r5,Wt,null),e(pr,XNr),e(pr,Vr),M(Nx,Vr,null),e(Vr,zNr),e(Vr,eEe),e(eEe,WNr),e(Vr,QNr),e(Vr,Tn),e(Tn,HNr),e(Tn,oEe),e(oEe,UNr),e(Tn,JNr),e(Tn,rEe),e(rEe,YNr),e(Tn,KNr),e(Tn,tEe),e(tEe,ZNr),e(Tn,eqr),e(Vr,oqr),e(Vr,Ee),e(Ee,t5),e(t5,aEe),e(aEe,rqr),e(t5,tqr),e(t5,iZ),e(iZ,aqr),e(t5,nqr),e(Ee,sqr),e(Ee,a5),e(a5,nEe),e(nEe,lqr),e(a5,iqr),e(a5,dZ),e(dZ,dqr),e(a5,cqr),e(Ee,fqr),e(Ee,n5),e(n5,sEe),e(sEe,mqr),e(n5,gqr),e(n5,cZ),e(cZ,hqr),e(n5,pqr),e(Ee,uqr),e(Ee,s5),e(s5,lEe),e(lEe,_qr),e(s5,bqr),e(s5,fZ),e(fZ,vqr),e(s5,Fqr),e(Ee,Tqr),e(Ee,l5),e(l5,iEe),e(iEe,Mqr),e(l5,Eqr),e(l5,mZ),e(mZ,Cqr),e(l5,wqr),e(Ee,Aqr),e(Ee,i5),e(i5,dEe),e(dEe,Lqr),e(i5,yqr),e(i5,gZ),e(gZ,xqr),e(i5,$qr),e(Ee,kqr),e(Ee,d5),e(d5,cEe),e(cEe,Sqr),e(d5,Rqr),e(d5,hZ),e(hZ,Pqr),e(d5,Bqr),e(Ee,Iqr),e(Ee,c5),e(c5,fEe),e(fEe,Nqr),e(c5,qqr),e(c5,pZ),e(pZ,jqr),e(c5,Dqr),e(Ee,Gqr),e(Ee,f5),e(f5,mEe),e(mEe,Oqr),e(f5,Vqr),e(f5,uZ),e(uZ,Xqr),e(f5,zqr),e(Ee,Wqr),e(Ee,m5),e(m5,gEe),e(gEe,Qqr),e(m5,Hqr),e(m5,_Z),e(_Z,Uqr),e(m5,Jqr),e(Ee,Yqr),e(Ee,g5),e(g5,hEe),e(hEe,Kqr),e(g5,Zqr),e(g5,bZ),e(bZ,ejr),e(g5,ojr),e(Ee,rjr),e(Ee,h5),e(h5,pEe),e(pEe,tjr),e(h5,ajr),e(h5,vZ),e(vZ,njr),e(h5,sjr),e(Ee,ljr),e(Ee,p5),e(p5,uEe),e(uEe,ijr),e(p5,djr),e(p5,FZ),e(FZ,cjr),e(p5,fjr),e(Vr,mjr),M(u5,Vr,null),b(f,XOe,_),b(f,Yc,_),e(Yc,_5),e(_5,_Ee),M(qx,_Ee,null),e(Yc,gjr),e(Yc,bEe),e(bEe,hjr),b(f,zOe,_),b(f,ur,_),M(jx,ur,null),e(ur,pjr),e(ur,Kc),e(Kc,ujr),e(Kc,TZ),e(TZ,_jr),e(Kc,bjr),e(Kc,MZ),e(MZ,vjr),e(Kc,Fjr),e(ur,Tjr),e(ur,Dx),e(Dx,Mjr),e(Dx,vEe),e(vEe,Ejr),e(Dx,Cjr),e(ur,wjr),e(ur,Qt),M(Gx,Qt,null),e(Qt,Ajr),e(Qt,FEe),e(FEe,Ljr),e(Qt,yjr),e(Qt,Zc),e(Zc,xjr),e(Zc,TEe),e(TEe,$jr),e(Zc,kjr),e(Zc,EZ),e(EZ,Sjr),e(Zc,Rjr),e(Qt,Pjr),M(b5,Qt,null),e(ur,Bjr),e(ur,Xr),M(Ox,Xr,null),e(Xr,Ijr),e(Xr,MEe),e(MEe,Njr),e(Xr,qjr),e(Xr,Mn),e(Mn,jjr),e(Mn,EEe),e(EEe,Djr),e(Mn,Gjr),e(Mn,CEe),e(CEe,Ojr),e(Mn,Vjr),e(Mn,wEe),e(wEe,Xjr),e(Mn,zjr),e(Xr,Wjr),e(Xr,$e),e($e,v5),e(v5,AEe),e(AEe,Qjr),e(v5,Hjr),e(v5,CZ),e(CZ,Ujr),e(v5,Jjr),e($e,Yjr),e($e,F5),e(F5,LEe),e(LEe,Kjr),e(F5,Zjr),e(F5,wZ),e(wZ,eDr),e(F5,oDr),e($e,rDr),e($e,T5),e(T5,yEe),e(yEe,tDr),e(T5,aDr),e(T5,AZ),e(AZ,nDr),e(T5,sDr),e($e,lDr),e($e,M5),e(M5,xEe),e(xEe,iDr),e(M5,dDr),e(M5,LZ),e(LZ,cDr),e(M5,fDr),e($e,mDr),e($e,E5),e(E5,$Ee),e($Ee,gDr),e(E5,hDr),e(E5,yZ),e(yZ,pDr),e(E5,uDr),e($e,_Dr),e($e,C5),e(C5,kEe),e(kEe,bDr),e(C5,vDr),e(C5,xZ),e(xZ,FDr),e(C5,TDr),e($e,MDr),e($e,w5),e(w5,SEe),e(SEe,EDr),e(w5,CDr),e(w5,$Z),e($Z,wDr),e(w5,ADr),e($e,LDr),e($e,A5),e(A5,REe),e(REe,yDr),e(A5,xDr),e(A5,kZ),e(kZ,$Dr),e(A5,kDr),e($e,SDr),e($e,L5),e(L5,PEe),e(PEe,RDr),e(L5,PDr),e(L5,SZ),e(SZ,BDr),e(L5,IDr),e($e,NDr),e($e,y5),e(y5,BEe),e(BEe,qDr),e(y5,jDr),e(y5,RZ),e(RZ,DDr),e(y5,GDr),e(Xr,ODr),M(x5,Xr,null),b(f,WOe,_),b(f,ef,_),e(ef,$5),e($5,IEe),M(Vx,IEe,null),e(ef,VDr),e(ef,NEe),e(NEe,XDr),b(f,QOe,_),b(f,_r,_),M(Xx,_r,null),e(_r,zDr),e(_r,of),e(of,WDr),e(of,PZ),e(PZ,QDr),e(of,HDr),e(of,BZ),e(BZ,UDr),e(of,JDr),e(_r,YDr),e(_r,zx),e(zx,KDr),e(zx,qEe),e(qEe,ZDr),e(zx,eGr),e(_r,oGr),e(_r,Ht),M(Wx,Ht,null),e(Ht,rGr),e(Ht,jEe),e(jEe,tGr),e(Ht,aGr),e(Ht,rf),e(rf,nGr),e(rf,DEe),e(DEe,sGr),e(rf,lGr),e(rf,IZ),e(IZ,iGr),e(rf,dGr),e(Ht,cGr),M(k5,Ht,null),e(_r,fGr),e(_r,zr),M(Qx,zr,null),e(zr,mGr),e(zr,GEe),e(GEe,gGr),e(zr,hGr),e(zr,En),e(En,pGr),e(En,OEe),e(OEe,uGr),e(En,_Gr),e(En,VEe),e(VEe,bGr),e(En,vGr),e(En,XEe),e(XEe,FGr),e(En,TGr),e(zr,MGr),e(zr,ke),e(ke,S5),e(S5,zEe),e(zEe,EGr),e(S5,CGr),e(S5,NZ),e(NZ,wGr),e(S5,AGr),e(ke,LGr),e(ke,R5),e(R5,WEe),e(WEe,yGr),e(R5,xGr),e(R5,qZ),e(qZ,$Gr),e(R5,kGr),e(ke,SGr),e(ke,P5),e(P5,QEe),e(QEe,RGr),e(P5,PGr),e(P5,jZ),e(jZ,BGr),e(P5,IGr),e(ke,NGr),e(ke,B5),e(B5,HEe),e(HEe,qGr),e(B5,jGr),e(B5,DZ),e(DZ,DGr),e(B5,GGr),e(ke,OGr),e(ke,I5),e(I5,UEe),e(UEe,VGr),e(I5,XGr),e(I5,GZ),e(GZ,zGr),e(I5,WGr),e(ke,QGr),e(ke,N5),e(N5,JEe),e(JEe,HGr),e(N5,UGr),e(N5,OZ),e(OZ,JGr),e(N5,YGr),e(ke,KGr),e(ke,q5),e(q5,YEe),e(YEe,ZGr),e(q5,eOr),e(q5,VZ),e(VZ,oOr),e(q5,rOr),e(ke,tOr),e(ke,j5),e(j5,KEe),e(KEe,aOr),e(j5,nOr),e(j5,XZ),e(XZ,sOr),e(j5,lOr),e(ke,iOr),e(ke,D5),e(D5,ZEe),e(ZEe,dOr),e(D5,cOr),e(D5,zZ),e(zZ,fOr),e(D5,mOr),e(ke,gOr),e(ke,G5),e(G5,eCe),e(eCe,hOr),e(G5,pOr),e(G5,WZ),e(WZ,uOr),e(G5,_Or),e(zr,bOr),M(O5,zr,null),b(f,HOe,_),b(f,tf,_),e(tf,V5),e(V5,oCe),M(Hx,oCe,null),e(tf,vOr),e(tf,rCe),e(rCe,FOr),b(f,UOe,_),b(f,br,_),M(Ux,br,null),e(br,TOr),e(br,af),e(af,MOr),e(af,QZ),e(QZ,EOr),e(af,COr),e(af,HZ),e(HZ,wOr),e(af,AOr),e(br,LOr),e(br,Jx),e(Jx,yOr),e(Jx,tCe),e(tCe,xOr),e(Jx,$Or),e(br,kOr),e(br,Ut),M(Yx,Ut,null),e(Ut,SOr),e(Ut,aCe),e(aCe,ROr),e(Ut,POr),e(Ut,nf),e(nf,BOr),e(nf,nCe),e(nCe,IOr),e(nf,NOr),e(nf,UZ),e(UZ,qOr),e(nf,jOr),e(Ut,DOr),M(X5,Ut,null),e(br,GOr),e(br,Wr),M(Kx,Wr,null),e(Wr,OOr),e(Wr,sCe),e(sCe,VOr),e(Wr,XOr),e(Wr,Cn),e(Cn,zOr),e(Cn,lCe),e(lCe,WOr),e(Cn,QOr),e(Cn,iCe),e(iCe,HOr),e(Cn,UOr),e(Cn,dCe),e(dCe,JOr),e(Cn,YOr),e(Wr,KOr),e(Wr,Se),e(Se,z5),e(z5,cCe),e(cCe,ZOr),e(z5,eVr),e(z5,JZ),e(JZ,oVr),e(z5,rVr),e(Se,tVr),e(Se,W5),e(W5,fCe),e(fCe,aVr),e(W5,nVr),e(W5,YZ),e(YZ,sVr),e(W5,lVr),e(Se,iVr),e(Se,Q5),e(Q5,mCe),e(mCe,dVr),e(Q5,cVr),e(Q5,KZ),e(KZ,fVr),e(Q5,mVr),e(Se,gVr),e(Se,H5),e(H5,gCe),e(gCe,hVr),e(H5,pVr),e(H5,ZZ),e(ZZ,uVr),e(H5,_Vr),e(Se,bVr),e(Se,U5),e(U5,hCe),e(hCe,vVr),e(U5,FVr),e(U5,eee),e(eee,TVr),e(U5,MVr),e(Se,EVr),e(Se,J5),e(J5,pCe),e(pCe,CVr),e(J5,wVr),e(J5,oee),e(oee,AVr),e(J5,LVr),e(Se,yVr),e(Se,Y5),e(Y5,uCe),e(uCe,xVr),e(Y5,$Vr),e(Y5,ree),e(ree,kVr),e(Y5,SVr),e(Se,RVr),e(Se,K5),e(K5,_Ce),e(_Ce,PVr),e(K5,BVr),e(K5,tee),e(tee,IVr),e(K5,NVr),e(Se,qVr),e(Se,Z5),e(Z5,bCe),e(bCe,jVr),e(Z5,DVr),e(Z5,aee),e(aee,GVr),e(Z5,OVr),e(Se,VVr),e(Se,e3),e(e3,vCe),e(vCe,XVr),e(e3,zVr),e(e3,nee),e(nee,WVr),e(e3,QVr),e(Wr,HVr),M(o3,Wr,null),b(f,JOe,_),b(f,sf,_),e(sf,r3),e(r3,FCe),M(Zx,FCe,null),e(sf,UVr),e(sf,TCe),e(TCe,JVr),b(f,YOe,_),b(f,vr,_),M(e$,vr,null),e(vr,YVr),e(vr,lf),e(lf,KVr),e(lf,see),e(see,ZVr),e(lf,eXr),e(lf,lee),e(lee,oXr),e(lf,rXr),e(vr,tXr),e(vr,o$),e(o$,aXr),e(o$,MCe),e(MCe,nXr),e(o$,sXr),e(vr,lXr),e(vr,Jt),M(r$,Jt,null),e(Jt,iXr),e(Jt,ECe),e(ECe,dXr),e(Jt,cXr),e(Jt,df),e(df,fXr),e(df,CCe),e(CCe,mXr),e(df,gXr),e(df,iee),e(iee,hXr),e(df,pXr),e(Jt,uXr),M(t3,Jt,null),e(vr,_Xr),e(vr,Qr),M(t$,Qr,null),e(Qr,bXr),e(Qr,wCe),e(wCe,vXr),e(Qr,FXr),e(Qr,wn),e(wn,TXr),e(wn,ACe),e(ACe,MXr),e(wn,EXr),e(wn,LCe),e(LCe,CXr),e(wn,wXr),e(wn,yCe),e(yCe,AXr),e(wn,LXr),e(Qr,yXr),e(Qr,Re),e(Re,a3),e(a3,xCe),e(xCe,xXr),e(a3,$Xr),e(a3,dee),e(dee,kXr),e(a3,SXr),e(Re,RXr),e(Re,n3),e(n3,$Ce),e($Ce,PXr),e(n3,BXr),e(n3,cee),e(cee,IXr),e(n3,NXr),e(Re,qXr),e(Re,s3),e(s3,kCe),e(kCe,jXr),e(s3,DXr),e(s3,fee),e(fee,GXr),e(s3,OXr),e(Re,VXr),e(Re,l3),e(l3,SCe),e(SCe,XXr),e(l3,zXr),e(l3,mee),e(mee,WXr),e(l3,QXr),e(Re,HXr),e(Re,i3),e(i3,RCe),e(RCe,UXr),e(i3,JXr),e(i3,gee),e(gee,YXr),e(i3,KXr),e(Re,ZXr),e(Re,d3),e(d3,PCe),e(PCe,ezr),e(d3,ozr),e(d3,hee),e(hee,rzr),e(d3,tzr),e(Re,azr),e(Re,c3),e(c3,BCe),e(BCe,nzr),e(c3,szr),e(c3,pee),e(pee,lzr),e(c3,izr),e(Re,dzr),e(Re,f3),e(f3,ICe),e(ICe,czr),e(f3,fzr),e(f3,uee),e(uee,mzr),e(f3,gzr),e(Re,hzr),e(Re,m3),e(m3,NCe),e(NCe,pzr),e(m3,uzr),e(m3,_ee),e(_ee,_zr),e(m3,bzr),e(Re,vzr),e(Re,g3),e(g3,qCe),e(qCe,Fzr),e(g3,Tzr),e(g3,bee),e(bee,Mzr),e(g3,Ezr),e(Qr,Czr),M(h3,Qr,null),b(f,KOe,_),b(f,cf,_),e(cf,p3),e(p3,jCe),M(a$,jCe,null),e(cf,wzr),e(cf,DCe),e(DCe,Azr),b(f,ZOe,_),b(f,Fr,_),M(n$,Fr,null),e(Fr,Lzr),e(Fr,ff),e(ff,yzr),e(ff,vee),e(vee,xzr),e(ff,$zr),e(ff,Fee),e(Fee,kzr),e(ff,Szr),e(Fr,Rzr),e(Fr,s$),e(s$,Pzr),e(s$,GCe),e(GCe,Bzr),e(s$,Izr),e(Fr,Nzr),e(Fr,Yt),M(l$,Yt,null),e(Yt,qzr),e(Yt,OCe),e(OCe,jzr),e(Yt,Dzr),e(Yt,mf),e(mf,Gzr),e(mf,VCe),e(VCe,Ozr),e(mf,Vzr),e(mf,Tee),e(Tee,Xzr),e(mf,zzr),e(Yt,Wzr),M(u3,Yt,null),e(Fr,Qzr),e(Fr,Hr),M(i$,Hr,null),e(Hr,Hzr),e(Hr,XCe),e(XCe,Uzr),e(Hr,Jzr),e(Hr,An),e(An,Yzr),e(An,zCe),e(zCe,Kzr),e(An,Zzr),e(An,WCe),e(WCe,eWr),e(An,oWr),e(An,QCe),e(QCe,rWr),e(An,tWr),e(Hr,aWr),e(Hr,Ve),e(Ve,_3),e(_3,HCe),e(HCe,nWr),e(_3,sWr),e(_3,Mee),e(Mee,lWr),e(_3,iWr),e(Ve,dWr),e(Ve,b3),e(b3,UCe),e(UCe,cWr),e(b3,fWr),e(b3,Eee),e(Eee,mWr),e(b3,gWr),e(Ve,hWr),e(Ve,v3),e(v3,JCe),e(JCe,pWr),e(v3,uWr),e(v3,Cee),e(Cee,_Wr),e(v3,bWr),e(Ve,vWr),e(Ve,F3),e(F3,YCe),e(YCe,FWr),e(F3,TWr),e(F3,wee),e(wee,MWr),e(F3,EWr),e(Ve,CWr),e(Ve,T3),e(T3,KCe),e(KCe,wWr),e(T3,AWr),e(T3,Aee),e(Aee,LWr),e(T3,yWr),e(Ve,xWr),e(Ve,M3),e(M3,ZCe),e(ZCe,$Wr),e(M3,kWr),e(M3,Lee),e(Lee,SWr),e(M3,RWr),e(Ve,PWr),e(Ve,E3),e(E3,e5e),e(e5e,BWr),e(E3,IWr),e(E3,yee),e(yee,NWr),e(E3,qWr),e(Ve,jWr),e(Ve,C3),e(C3,o5e),e(o5e,DWr),e(C3,GWr),e(C3,xee),e(xee,OWr),e(C3,VWr),e(Hr,XWr),M(w3,Hr,null),b(f,eVe,_),b(f,gf,_),e(gf,A3),e(A3,r5e),M(d$,r5e,null),e(gf,zWr),e(gf,t5e),e(t5e,WWr),b(f,oVe,_),b(f,Tr,_),M(c$,Tr,null),e(Tr,QWr),e(Tr,hf),e(hf,HWr),e(hf,$ee),e($ee,UWr),e(hf,JWr),e(hf,kee),e(kee,YWr),e(hf,KWr),e(Tr,ZWr),e(Tr,f$),e(f$,eQr),e(f$,a5e),e(a5e,oQr),e(f$,rQr),e(Tr,tQr),e(Tr,Kt),M(m$,Kt,null),e(Kt,aQr),e(Kt,n5e),e(n5e,nQr),e(Kt,sQr),e(Kt,pf),e(pf,lQr),e(pf,s5e),e(s5e,iQr),e(pf,dQr),e(pf,See),e(See,cQr),e(pf,fQr),e(Kt,mQr),M(L3,Kt,null),e(Tr,gQr),e(Tr,Ur),M(g$,Ur,null),e(Ur,hQr),e(Ur,l5e),e(l5e,pQr),e(Ur,uQr),e(Ur,Ln),e(Ln,_Qr),e(Ln,i5e),e(i5e,bQr),e(Ln,vQr),e(Ln,d5e),e(d5e,FQr),e(Ln,TQr),e(Ln,c5e),e(c5e,MQr),e(Ln,EQr),e(Ur,CQr),e(Ur,Xe),e(Xe,y3),e(y3,f5e),e(f5e,wQr),e(y3,AQr),e(y3,Ree),e(Ree,LQr),e(y3,yQr),e(Xe,xQr),e(Xe,x3),e(x3,m5e),e(m5e,$Qr),e(x3,kQr),e(x3,Pee),e(Pee,SQr),e(x3,RQr),e(Xe,PQr),e(Xe,$3),e($3,g5e),e(g5e,BQr),e($3,IQr),e($3,Bee),e(Bee,NQr),e($3,qQr),e(Xe,jQr),e(Xe,k3),e(k3,h5e),e(h5e,DQr),e(k3,GQr),e(k3,Iee),e(Iee,OQr),e(k3,VQr),e(Xe,XQr),e(Xe,S3),e(S3,p5e),e(p5e,zQr),e(S3,WQr),e(S3,Nee),e(Nee,QQr),e(S3,HQr),e(Xe,UQr),e(Xe,R3),e(R3,u5e),e(u5e,JQr),e(R3,YQr),e(R3,qee),e(qee,KQr),e(R3,ZQr),e(Xe,eHr),e(Xe,P3),e(P3,_5e),e(_5e,oHr),e(P3,rHr),e(P3,jee),e(jee,tHr),e(P3,aHr),e(Xe,nHr),e(Xe,B3),e(B3,b5e),e(b5e,sHr),e(B3,lHr),e(B3,Dee),e(Dee,iHr),e(B3,dHr),e(Ur,cHr),M(I3,Ur,null),b(f,rVe,_),b(f,uf,_),e(uf,N3),e(N3,v5e),M(h$,v5e,null),e(uf,fHr),e(uf,F5e),e(F5e,mHr),b(f,tVe,_),b(f,Mr,_),M(p$,Mr,null),e(Mr,gHr),e(Mr,_f),e(_f,hHr),e(_f,Gee),e(Gee,pHr),e(_f,uHr),e(_f,Oee),e(Oee,_Hr),e(_f,bHr),e(Mr,vHr),e(Mr,u$),e(u$,FHr),e(u$,T5e),e(T5e,THr),e(u$,MHr),e(Mr,EHr),e(Mr,Zt),M(_$,Zt,null),e(Zt,CHr),e(Zt,M5e),e(M5e,wHr),e(Zt,AHr),e(Zt,bf),e(bf,LHr),e(bf,E5e),e(E5e,yHr),e(bf,xHr),e(bf,Vee),e(Vee,$Hr),e(bf,kHr),e(Zt,SHr),M(q3,Zt,null),e(Mr,RHr),e(Mr,Jr),M(b$,Jr,null),e(Jr,PHr),e(Jr,C5e),e(C5e,BHr),e(Jr,IHr),e(Jr,yn),e(yn,NHr),e(yn,w5e),e(w5e,qHr),e(yn,jHr),e(yn,A5e),e(A5e,DHr),e(yn,GHr),e(yn,L5e),e(L5e,OHr),e(yn,VHr),e(Jr,XHr),e(Jr,y5e),e(y5e,j3),e(j3,x5e),e(x5e,zHr),e(j3,WHr),e(j3,Xee),e(Xee,QHr),e(j3,HHr),e(Jr,UHr),M(D3,Jr,null),b(f,aVe,_),b(f,vf,_),e(vf,G3),e(G3,$5e),M(v$,$5e,null),e(vf,JHr),e(vf,k5e),e(k5e,YHr),b(f,nVe,_),b(f,Er,_),M(F$,Er,null),e(Er,KHr),e(Er,Ff),e(Ff,ZHr),e(Ff,zee),e(zee,eUr),e(Ff,oUr),e(Ff,Wee),e(Wee,rUr),e(Ff,tUr),e(Er,aUr),e(Er,T$),e(T$,nUr),e(T$,S5e),e(S5e,sUr),e(T$,lUr),e(Er,iUr),e(Er,ea),M(M$,ea,null),e(ea,dUr),e(ea,R5e),e(R5e,cUr),e(ea,fUr),e(ea,Tf),e(Tf,mUr),e(Tf,P5e),e(P5e,gUr),e(Tf,hUr),e(Tf,Qee),e(Qee,pUr),e(Tf,uUr),e(ea,_Ur),M(O3,ea,null),e(Er,bUr),e(Er,Yr),M(E$,Yr,null),e(Yr,vUr),e(Yr,B5e),e(B5e,FUr),e(Yr,TUr),e(Yr,xn),e(xn,MUr),e(xn,I5e),e(I5e,EUr),e(xn,CUr),e(xn,N5e),e(N5e,wUr),e(xn,AUr),e(xn,q5e),e(q5e,LUr),e(xn,yUr),e(Yr,xUr),e(Yr,C$),e(C$,V3),e(V3,j5e),e(j5e,$Ur),e(V3,kUr),e(V3,Hee),e(Hee,SUr),e(V3,RUr),e(C$,PUr),e(C$,X3),e(X3,D5e),e(D5e,BUr),e(X3,IUr),e(X3,Uee),e(Uee,NUr),e(X3,qUr),e(Yr,jUr),M(z3,Yr,null),b(f,sVe,_),b(f,Mf,_),e(Mf,W3),e(W3,G5e),M(w$,G5e,null),e(Mf,DUr),e(Mf,O5e),e(O5e,GUr),b(f,lVe,_),b(f,Cr,_),M(A$,Cr,null),e(Cr,OUr),e(Cr,Ef),e(Ef,VUr),e(Ef,Jee),e(Jee,XUr),e(Ef,zUr),e(Ef,Yee),e(Yee,WUr),e(Ef,QUr),e(Cr,HUr),e(Cr,L$),e(L$,UUr),e(L$,V5e),e(V5e,JUr),e(L$,YUr),e(Cr,KUr),e(Cr,oa),M(y$,oa,null),e(oa,ZUr),e(oa,X5e),e(X5e,eJr),e(oa,oJr),e(oa,Cf),e(Cf,rJr),e(Cf,z5e),e(z5e,tJr),e(Cf,aJr),e(Cf,Kee),e(Kee,nJr),e(Cf,sJr),e(oa,lJr),M(Q3,oa,null),e(Cr,iJr),e(Cr,Kr),M(x$,Kr,null),e(Kr,dJr),e(Kr,W5e),e(W5e,cJr),e(Kr,fJr),e(Kr,$n),e($n,mJr),e($n,Q5e),e(Q5e,gJr),e($n,hJr),e($n,H5e),e(H5e,pJr),e($n,uJr),e($n,U5e),e(U5e,_Jr),e($n,bJr),e(Kr,vJr),e(Kr,J5e),e(J5e,H3),e(H3,Y5e),e(Y5e,FJr),e(H3,TJr),e(H3,Zee),e(Zee,MJr),e(H3,EJr),e(Kr,CJr),M(U3,Kr,null),iVe=!0},p(f,[_]){const $$={};_&2&&($$.$$scope={dirty:_,ctx:f}),Rf.$set($$);const K5e={};_&2&&(K5e.$$scope={dirty:_,ctx:f}),Gg.$set(K5e);const Z5e={};_&2&&(Z5e.$$scope={dirty:_,ctx:f}),Eh.$set(Z5e);const e3e={};_&2&&(e3e.$$scope={dirty:_,ctx:f}),ap.$set(e3e);const k$={};_&2&&(k$.$$scope={dirty:_,ctx:f}),np.$set(k$);const o3e={};_&2&&(o3e.$$scope={dirty:_,ctx:f}),wp.$set(o3e);const kn={};_&2&&(kn.$$scope={dirty:_,ctx:f}),Ap.$set(kn);const r3e={};_&2&&(r3e.$$scope={dirty:_,ctx:f}),xp.$set(r3e);const t3e={};_&2&&(t3e.$$scope={dirty:_,ctx:f}),x_.$set(t3e);const a3e={};_&2&&(a3e.$$scope={dirty:_,ctx:f}),k_.$set(a3e);const S$={};_&2&&(S$.$$scope={dirty:_,ctx:f}),M1.$set(S$);const n3e={};_&2&&(n3e.$$scope={dirty:_,ctx:f}),C1.$set(n3e);const R$={};_&2&&(R$.$$scope={dirty:_,ctx:f}),c2.$set(R$);const s3e={};_&2&&(s3e.$$scope={dirty:_,ctx:f}),m2.$set(s3e);const P$={};_&2&&(P$.$$scope={dirty:_,ctx:f}),J2.$set(P$);const l3e={};_&2&&(l3e.$$scope={dirty:_,ctx:f}),K2.$set(l3e);const i3e={};_&2&&(i3e.$$scope={dirty:_,ctx:f}),_b.$set(i3e);const d3e={};_&2&&(d3e.$$scope={dirty:_,ctx:f}),vb.$set(d3e);const wf={};_&2&&(wf.$$scope={dirty:_,ctx:f}),hv.$set(wf);const c3e={};_&2&&(c3e.$$scope={dirty:_,ctx:f}),uv.$set(c3e);const f3e={};_&2&&(f3e.$$scope={dirty:_,ctx:f}),Qv.$set(f3e);const m3e={};_&2&&(m3e.$$scope={dirty:_,ctx:f}),Uv.$set(m3e);const B$={};_&2&&(B$.$$scope={dirty:_,ctx:f}),r0.$set(B$);const g3e={};_&2&&(g3e.$$scope={dirty:_,ctx:f}),a0.$set(g3e);const h3e={};_&2&&(h3e.$$scope={dirty:_,ctx:f}),D0.$set(h3e);const p3e={};_&2&&(p3e.$$scope={dirty:_,ctx:f}),O0.$set(p3e);const rt={};_&2&&(rt.$$scope={dirty:_,ctx:f}),$F.$set(rt);const I$={};_&2&&(I$.$$scope={dirty:_,ctx:f}),SF.$set(I$);const u3e={};_&2&&(u3e.$$scope={dirty:_,ctx:f}),BF.$set(u3e);const N$={};_&2&&(N$.$$scope={dirty:_,ctx:f}),NF.$set(N$);const _3e={};_&2&&(_3e.$$scope={dirty:_,ctx:f}),YF.$set(_3e);const tt={};_&2&&(tt.$$scope={dirty:_,ctx:f}),ZF.$set(tt);const b3e={};_&2&&(b3e.$$scope={dirty:_,ctx:f}),rT.$set(b3e);const Af={};_&2&&(Af.$$scope={dirty:_,ctx:f}),aT.$set(Af);const v3e={};_&2&&(v3e.$$scope={dirty:_,ctx:f}),lT.$set(v3e);const F3e={};_&2&&(F3e.$$scope={dirty:_,ctx:f}),dT.$set(F3e);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),FT.$set(L);const J3={};_&2&&(J3.$$scope={dirty:_,ctx:f}),MT.$set(J3);const T3e={};_&2&&(T3e.$$scope={dirty:_,ctx:f}),xT.$set(T3e);const M3e={};_&2&&(M3e.$$scope={dirty:_,ctx:f}),kT.$set(M3e);const Y3={};_&2&&(Y3.$$scope={dirty:_,ctx:f}),VT.$set(Y3);const E3e={};_&2&&(E3e.$$scope={dirty:_,ctx:f}),zT.$set(E3e);const C3e={};_&2&&(C3e.$$scope={dirty:_,ctx:f}),UT.$set(C3e);const K3={};_&2&&(K3.$$scope={dirty:_,ctx:f}),YT.$set(K3);const w3e={};_&2&&(w3e.$$scope={dirty:_,ctx:f}),a7.$set(w3e);const A3e={};_&2&&(A3e.$$scope={dirty:_,ctx:f}),s7.$set(A3e);const Z3={};_&2&&(Z3.$$scope={dirty:_,ctx:f}),f7.$set(Z3);const L3e={};_&2&&(L3e.$$scope={dirty:_,ctx:f}),g7.$set(L3e);const y3e={};_&2&&(y3e.$$scope={dirty:_,ctx:f}),_7.$set(y3e);const ew={};_&2&&(ew.$$scope={dirty:_,ctx:f}),v7.$set(ew);const x3e={};_&2&&(x3e.$$scope={dirty:_,ctx:f}),M7.$set(x3e);const $3e={};_&2&&($3e.$$scope={dirty:_,ctx:f}),C7.$set($3e);const ow={};_&2&&(ow.$$scope={dirty:_,ctx:f}),$7.$set(ow);const k3e={};_&2&&(k3e.$$scope={dirty:_,ctx:f}),S7.$set(k3e);const S3e={};_&2&&(S3e.$$scope={dirty:_,ctx:f}),B7.$set(S3e);const rw={};_&2&&(rw.$$scope={dirty:_,ctx:f}),N7.$set(rw);const R3e={};_&2&&(R3e.$$scope={dirty:_,ctx:f}),$9.$set(R3e);const P3e={};_&2&&(P3e.$$scope={dirty:_,ctx:f}),S9.$set(P3e);const tw={};_&2&&(tw.$$scope={dirty:_,ctx:f}),rM.$set(tw);const B3e={};_&2&&(B3e.$$scope={dirty:_,ctx:f}),aM.$set(B3e);const I3e={};_&2&&(I3e.$$scope={dirty:_,ctx:f}),bM.$set(I3e);const aw={};_&2&&(aw.$$scope={dirty:_,ctx:f}),FM.$set(aw);const N3e={};_&2&&(N3e.$$scope={dirty:_,ctx:f}),wM.$set(N3e);const q3e={};_&2&&(q3e.$$scope={dirty:_,ctx:f}),LM.$set(q3e);const nw={};_&2&&(nw.$$scope={dirty:_,ctx:f}),HM.$set(nw);const j3e={};_&2&&(j3e.$$scope={dirty:_,ctx:f}),JM.$set(j3e);const D3e={};_&2&&(D3e.$$scope={dirty:_,ctx:f}),l4.$set(D3e);const sw={};_&2&&(sw.$$scope={dirty:_,ctx:f}),d4.$set(sw);const G3e={};_&2&&(G3e.$$scope={dirty:_,ctx:f}),I4.$set(G3e);const O3e={};_&2&&(O3e.$$scope={dirty:_,ctx:f}),q4.$set(O3e);const lw={};_&2&&(lw.$$scope={dirty:_,ctx:f}),rE.$set(lw);const V3e={};_&2&&(V3e.$$scope={dirty:_,ctx:f}),aE.$set(V3e);const X3e={};_&2&&(X3e.$$scope={dirty:_,ctx:f}),lE.$set(X3e);const iw={};_&2&&(iw.$$scope={dirty:_,ctx:f}),dE.$set(iw);const z3e={};_&2&&(z3e.$$scope={dirty:_,ctx:f}),fE.$set(z3e);const W3e={};_&2&&(W3e.$$scope={dirty:_,ctx:f}),gE.$set(W3e);const dw={};_&2&&(dw.$$scope={dirty:_,ctx:f}),PE.$set(dw);const Q3e={};_&2&&(Q3e.$$scope={dirty:_,ctx:f}),IE.$set(Q3e);const H3e={};_&2&&(H3e.$$scope={dirty:_,ctx:f}),tC.$set(H3e);const cw={};_&2&&(cw.$$scope={dirty:_,ctx:f}),nC.$set(cw);const U3e={};_&2&&(U3e.$$scope={dirty:_,ctx:f}),lC.$set(U3e);const J3e={};_&2&&(J3e.$$scope={dirty:_,ctx:f}),dC.$set(J3e);const fw={};_&2&&(fw.$$scope={dirty:_,ctx:f}),fC.$set(fw);const Y3e={};_&2&&(Y3e.$$scope={dirty:_,ctx:f}),gC.$set(Y3e);const K3e={};_&2&&(K3e.$$scope={dirty:_,ctx:f}),GC.$set(K3e);const mw={};_&2&&(mw.$$scope={dirty:_,ctx:f}),VC.$set(mw);const Z3e={};_&2&&(Z3e.$$scope={dirty:_,ctx:f}),e5.$set(Z3e);const ewe={};_&2&&(ewe.$$scope={dirty:_,ctx:f}),r5.$set(ewe);const gw={};_&2&&(gw.$$scope={dirty:_,ctx:f}),u5.$set(gw);const owe={};_&2&&(owe.$$scope={dirty:_,ctx:f}),b5.$set(owe);const rwe={};_&2&&(rwe.$$scope={dirty:_,ctx:f}),x5.$set(rwe);const hw={};_&2&&(hw.$$scope={dirty:_,ctx:f}),k5.$set(hw);const twe={};_&2&&(twe.$$scope={dirty:_,ctx:f}),O5.$set(twe);const awe={};_&2&&(awe.$$scope={dirty:_,ctx:f}),X5.$set(awe);const pw={};_&2&&(pw.$$scope={dirty:_,ctx:f}),o3.$set(pw);const nwe={};_&2&&(nwe.$$scope={dirty:_,ctx:f}),t3.$set(nwe);const swe={};_&2&&(swe.$$scope={dirty:_,ctx:f}),h3.$set(swe);const uw={};_&2&&(uw.$$scope={dirty:_,ctx:f}),u3.$set(uw);const lwe={};_&2&&(lwe.$$scope={dirty:_,ctx:f}),w3.$set(lwe);const iwe={};_&2&&(iwe.$$scope={dirty:_,ctx:f}),L3.$set(iwe);const _w={};_&2&&(_w.$$scope={dirty:_,ctx:f}),I3.$set(_w);const dwe={};_&2&&(dwe.$$scope={dirty:_,ctx:f}),q3.$set(dwe);const cwe={};_&2&&(cwe.$$scope={dirty:_,ctx:f}),D3.$set(cwe);const bw={};_&2&&(bw.$$scope={dirty:_,ctx:f}),O3.$set(bw);const fwe={};_&2&&(fwe.$$scope={dirty:_,ctx:f}),z3.$set(fwe);const mwe={};_&2&&(mwe.$$scope={dirty:_,ctx:f}),Q3.$set(mwe);const vw={};_&2&&(vw.$$scope={dirty:_,ctx:f}),U3.$set(vw)},i(f){iVe||(E(d.$$.fragment,f),E(ya.$$.fragment,f),E(F6.$$.fragment,f),E(T6.$$.fragment,f),E(Rf.$$.fragment,f),E(M6.$$.fragment,f),E(E6.$$.fragment,f),E(A6.$$.fragment,f),E(Gg.$$.fragment,f),E(L6.$$.fragment,f),E(y6.$$.fragment,f),E(x6.$$.fragment,f),E(S6.$$.fragment,f),E(Eh.$$.fragment,f),E(R6.$$.fragment,f),E(P6.$$.fragment,f),E(B6.$$.fragment,f),E(q6.$$.fragment,f),E(ap.$$.fragment,f),E(np.$$.fragment,f),E(j6.$$.fragment,f),E(D6.$$.fragment,f),E(G6.$$.fragment,f),E(X6.$$.fragment,f),E(wp.$$.fragment,f),E(Ap.$$.fragment,f),E(z6.$$.fragment,f),E(W6.$$.fragment,f),E(Q6.$$.fragment,f),E(U6.$$.fragment,f),E(xp.$$.fragment,f),E(J6.$$.fragment,f),E(x_.$$.fragment,f),E(Y6.$$.fragment,f),E(K6.$$.fragment,f),E(eL.$$.fragment,f),E(k_.$$.fragment,f),E(oL.$$.fragment,f),E(M1.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(nL.$$.fragment,f),E(C1.$$.fragment,f),E(sL.$$.fragment,f),E(c2.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(cL.$$.fragment,f),E(m2.$$.fragment,f),E(fL.$$.fragment,f),E(J2.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(K2.$$.fragment,f),E(uL.$$.fragment,f),E(_b.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(vb.$$.fragment,f),E(TL.$$.fragment,f),E(hv.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(uv.$$.fragment,f),E(AL.$$.fragment,f),E(Qv.$$.fragment,f),E(LL.$$.fragment,f),E(yL.$$.fragment,f),E($L.$$.fragment,f),E(Uv.$$.fragment,f),E(kL.$$.fragment,f),E(r0.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(a0.$$.fragment,f),E(IL.$$.fragment,f),E(D0.$$.fragment,f),E(NL.$$.fragment,f),E(qL.$$.fragment,f),E(DL.$$.fragment,f),E(O0.$$.fragment,f),E(GL.$$.fragment,f),E($F.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(SF.$$.fragment,f),E(WL.$$.fragment,f),E(BF.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(NF.$$.fragment,f),E(YL.$$.fragment,f),E(YF.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(oy.$$.fragment,f),E(ZF.$$.fragment,f),E(ry.$$.fragment,f),E(rT.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(aT.$$.fragment,f),E(ly.$$.fragment,f),E(lT.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(dT.$$.fragment,f),E(my.$$.fragment,f),E(FT.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(uy.$$.fragment,f),E(MT.$$.fragment,f),E(_y.$$.fragment,f),E(xT.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(kT.$$.fragment,f),E(My.$$.fragment,f),E(VT.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(zT.$$.fragment,f),E(Ly.$$.fragment,f),E(UT.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(YT.$$.fragment,f),E(Ry.$$.fragment,f),E(a7.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(s7.$$.fragment,f),E(qy.$$.fragment,f),E(f7.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(g7.$$.fragment,f),E(Vy.$$.fragment,f),E(_7.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(v7.$$.fragment,f),E(Uy.$$.fragment,f),E(M7.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(C7.$$.fragment,f),E(e8.$$.fragment,f),E($7.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(S7.$$.fragment,f),E(n8.$$.fragment,f),E(B7.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(N7.$$.fragment,f),E(c8.$$.fragment,f),E($9.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(S9.$$.fragment,f),E(p8.$$.fragment,f),E(rM.$$.fragment,f),E(u8.$$.fragment,f),E(_8.$$.fragment,f),E(v8.$$.fragment,f),E(aM.$$.fragment,f),E(F8.$$.fragment,f),E(bM.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(FM.$$.fragment,f),E(w8.$$.fragment,f),E(wM.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(LM.$$.fragment,f),E($8.$$.fragment,f),E(HM.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(P8.$$.fragment,f),E(JM.$$.fragment,f),E(B8.$$.fragment,f),E(l4.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(d4.$$.fragment,f),E(D8.$$.fragment,f),E(I4.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E(q4.$$.fragment,f),E(z8.$$.fragment,f),E(rE.$$.fragment,f),E(W8.$$.fragment,f),E(Q8.$$.fragment,f),E(U8.$$.fragment,f),E(aE.$$.fragment,f),E(J8.$$.fragment,f),E(lE.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(ox.$$.fragment,f),E(dE.$$.fragment,f),E(rx.$$.fragment,f),E(fE.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(gE.$$.fragment,f),E(lx.$$.fragment,f),E(PE.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(IE.$$.fragment,f),E(mx.$$.fragment,f),E(tC.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(ux.$$.fragment,f),E(nC.$$.fragment,f),E(_x.$$.fragment,f),E(lC.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(dC.$$.fragment,f),E(Mx.$$.fragment,f),E(fC.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(gC.$$.fragment,f),E(Lx.$$.fragment,f),E(GC.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(VC.$$.fragment,f),E(Sx.$$.fragment,f),E(e5.$$.fragment,f),E(Rx.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(r5.$$.fragment,f),E(Nx.$$.fragment,f),E(u5.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(b5.$$.fragment,f),E(Ox.$$.fragment,f),E(x5.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Wx.$$.fragment,f),E(k5.$$.fragment,f),E(Qx.$$.fragment,f),E(O5.$$.fragment,f),E(Hx.$$.fragment,f),E(Ux.$$.fragment,f),E(Yx.$$.fragment,f),E(X5.$$.fragment,f),E(Kx.$$.fragment,f),E(o3.$$.fragment,f),E(Zx.$$.fragment,f),E(e$.$$.fragment,f),E(r$.$$.fragment,f),E(t3.$$.fragment,f),E(t$.$$.fragment,f),E(h3.$$.fragment,f),E(a$.$$.fragment,f),E(n$.$$.fragment,f),E(l$.$$.fragment,f),E(u3.$$.fragment,f),E(i$.$$.fragment,f),E(w3.$$.fragment,f),E(d$.$$.fragment,f),E(c$.$$.fragment,f),E(m$.$$.fragment,f),E(L3.$$.fragment,f),E(g$.$$.fragment,f),E(I3.$$.fragment,f),E(h$.$$.fragment,f),E(p$.$$.fragment,f),E(_$.$$.fragment,f),E(q3.$$.fragment,f),E(b$.$$.fragment,f),E(D3.$$.fragment,f),E(v$.$$.fragment,f),E(F$.$$.fragment,f),E(M$.$$.fragment,f),E(O3.$$.fragment,f),E(E$.$$.fragment,f),E(z3.$$.fragment,f),E(w$.$$.fragment,f),E(A$.$$.fragment,f),E(y$.$$.fragment,f),E(Q3.$$.fragment,f),E(x$.$$.fragment,f),E(U3.$$.fragment,f),iVe=!0)},o(f){C(d.$$.fragment,f),C(ya.$$.fragment,f),C(F6.$$.fragment,f),C(T6.$$.fragment,f),C(Rf.$$.fragment,f),C(M6.$$.fragment,f),C(E6.$$.fragment,f),C(A6.$$.fragment,f),C(Gg.$$.fragment,f),C(L6.$$.fragment,f),C(y6.$$.fragment,f),C(x6.$$.fragment,f),C(S6.$$.fragment,f),C(Eh.$$.fragment,f),C(R6.$$.fragment,f),C(P6.$$.fragment,f),C(B6.$$.fragment,f),C(q6.$$.fragment,f),C(ap.$$.fragment,f),C(np.$$.fragment,f),C(j6.$$.fragment,f),C(D6.$$.fragment,f),C(G6.$$.fragment,f),C(X6.$$.fragment,f),C(wp.$$.fragment,f),C(Ap.$$.fragment,f),C(z6.$$.fragment,f),C(W6.$$.fragment,f),C(Q6.$$.fragment,f),C(U6.$$.fragment,f),C(xp.$$.fragment,f),C(J6.$$.fragment,f),C(x_.$$.fragment,f),C(Y6.$$.fragment,f),C(K6.$$.fragment,f),C(eL.$$.fragment,f),C(k_.$$.fragment,f),C(oL.$$.fragment,f),C(M1.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(nL.$$.fragment,f),C(C1.$$.fragment,f),C(sL.$$.fragment,f),C(c2.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(cL.$$.fragment,f),C(m2.$$.fragment,f),C(fL.$$.fragment,f),C(J2.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(K2.$$.fragment,f),C(uL.$$.fragment,f),C(_b.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(vb.$$.fragment,f),C(TL.$$.fragment,f),C(hv.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(uv.$$.fragment,f),C(AL.$$.fragment,f),C(Qv.$$.fragment,f),C(LL.$$.fragment,f),C(yL.$$.fragment,f),C($L.$$.fragment,f),C(Uv.$$.fragment,f),C(kL.$$.fragment,f),C(r0.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(a0.$$.fragment,f),C(IL.$$.fragment,f),C(D0.$$.fragment,f),C(NL.$$.fragment,f),C(qL.$$.fragment,f),C(DL.$$.fragment,f),C(O0.$$.fragment,f),C(GL.$$.fragment,f),C($F.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(SF.$$.fragment,f),C(WL.$$.fragment,f),C(BF.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(NF.$$.fragment,f),C(YL.$$.fragment,f),C(YF.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(oy.$$.fragment,f),C(ZF.$$.fragment,f),C(ry.$$.fragment,f),C(rT.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(aT.$$.fragment,f),C(ly.$$.fragment,f),C(lT.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(dT.$$.fragment,f),C(my.$$.fragment,f),C(FT.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(uy.$$.fragment,f),C(MT.$$.fragment,f),C(_y.$$.fragment,f),C(xT.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(kT.$$.fragment,f),C(My.$$.fragment,f),C(VT.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(zT.$$.fragment,f),C(Ly.$$.fragment,f),C(UT.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(YT.$$.fragment,f),C(Ry.$$.fragment,f),C(a7.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(s7.$$.fragment,f),C(qy.$$.fragment,f),C(f7.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(g7.$$.fragment,f),C(Vy.$$.fragment,f),C(_7.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(v7.$$.fragment,f),C(Uy.$$.fragment,f),C(M7.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(C7.$$.fragment,f),C(e8.$$.fragment,f),C($7.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(S7.$$.fragment,f),C(n8.$$.fragment,f),C(B7.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(N7.$$.fragment,f),C(c8.$$.fragment,f),C($9.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(S9.$$.fragment,f),C(p8.$$.fragment,f),C(rM.$$.fragment,f),C(u8.$$.fragment,f),C(_8.$$.fragment,f),C(v8.$$.fragment,f),C(aM.$$.fragment,f),C(F8.$$.fragment,f),C(bM.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(FM.$$.fragment,f),C(w8.$$.fragment,f),C(wM.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(LM.$$.fragment,f),C($8.$$.fragment,f),C(HM.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(P8.$$.fragment,f),C(JM.$$.fragment,f),C(B8.$$.fragment,f),C(l4.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(d4.$$.fragment,f),C(D8.$$.fragment,f),C(I4.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C(q4.$$.fragment,f),C(z8.$$.fragment,f),C(rE.$$.fragment,f),C(W8.$$.fragment,f),C(Q8.$$.fragment,f),C(U8.$$.fragment,f),C(aE.$$.fragment,f),C(J8.$$.fragment,f),C(lE.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(ox.$$.fragment,f),C(dE.$$.fragment,f),C(rx.$$.fragment,f),C(fE.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(gE.$$.fragment,f),C(lx.$$.fragment,f),C(PE.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(IE.$$.fragment,f),C(mx.$$.fragment,f),C(tC.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(ux.$$.fragment,f),C(nC.$$.fragment,f),C(_x.$$.fragment,f),C(lC.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(dC.$$.fragment,f),C(Mx.$$.fragment,f),C(fC.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(gC.$$.fragment,f),C(Lx.$$.fragment,f),C(GC.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(VC.$$.fragment,f),C(Sx.$$.fragment,f),C(e5.$$.fragment,f),C(Rx.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(r5.$$.fragment,f),C(Nx.$$.fragment,f),C(u5.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(b5.$$.fragment,f),C(Ox.$$.fragment,f),C(x5.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Wx.$$.fragment,f),C(k5.$$.fragment,f),C(Qx.$$.fragment,f),C(O5.$$.fragment,f),C(Hx.$$.fragment,f),C(Ux.$$.fragment,f),C(Yx.$$.fragment,f),C(X5.$$.fragment,f),C(Kx.$$.fragment,f),C(o3.$$.fragment,f),C(Zx.$$.fragment,f),C(e$.$$.fragment,f),C(r$.$$.fragment,f),C(t3.$$.fragment,f),C(t$.$$.fragment,f),C(h3.$$.fragment,f),C(a$.$$.fragment,f),C(n$.$$.fragment,f),C(l$.$$.fragment,f),C(u3.$$.fragment,f),C(i$.$$.fragment,f),C(w3.$$.fragment,f),C(d$.$$.fragment,f),C(c$.$$.fragment,f),C(m$.$$.fragment,f),C(L3.$$.fragment,f),C(g$.$$.fragment,f),C(I3.$$.fragment,f),C(h$.$$.fragment,f),C(p$.$$.fragment,f),C(_$.$$.fragment,f),C(q3.$$.fragment,f),C(b$.$$.fragment,f),C(D3.$$.fragment,f),C(v$.$$.fragment,f),C(F$.$$.fragment,f),C(M$.$$.fragment,f),C(O3.$$.fragment,f),C(E$.$$.fragment,f),C(z3.$$.fragment,f),C(w$.$$.fragment,f),C(A$.$$.fragment,f),C(y$.$$.fragment,f),C(Q3.$$.fragment,f),C(x$.$$.fragment,f),C(U3.$$.fragment,f),iVe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(yf),f&&t(at),f&&t(Oe),f&&t(We),f&&t($f),w(ya,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t(xa),f&&t(tGe),f&&t(yi),w(F6),f&&t(aGe),f&&t(In),f&&t(nGe),w(T6,f),f&&t(sGe),f&&t(Kk),f&&t(lGe),w(Rf,f),f&&t(iGe),f&&t(xi),w(M6),f&&t(dGe),f&&t(wo),w(E6),w(A6),w(Gg),w(L6),f&&t(cGe),f&&t(ki),w(y6),f&&t(fGe),f&&t(Ao),w(x6),w(S6),w(Eh),w(R6),f&&t(mGe),f&&t(Si),w(P6),f&&t(gGe),f&&t(Lo),w(B6),w(q6),w(ap),w(np),w(j6),f&&t(hGe),f&&t(Ri),w(D6),f&&t(pGe),f&&t(yo),w(G6),w(X6),w(wp),w(Ap),w(z6),f&&t(uGe),f&&t(Bi),w(W6),f&&t(_Ge),f&&t(xo),w(Q6),w(U6),w(xp),w(J6),w(x_),f&&t(bGe),f&&t(qi),w(Y6),f&&t(vGe),f&&t($o),w(K6),w(eL),w(k_),w(oL),w(M1),f&&t(FGe),f&&t(Gi),w(rL),f&&t(TGe),f&&t(ko),w(tL),w(nL),w(C1),w(sL),w(c2),f&&t(MGe),f&&t(Xi),w(lL),f&&t(EGe),f&&t(So),w(iL),w(cL),w(m2),w(fL),w(J2),f&&t(CGe),f&&t(Qi),w(mL),f&&t(wGe),f&&t(Ro),w(gL),w(pL),w(K2),w(uL),w(_b),f&&t(AGe),f&&t(Ji),w(_L),f&&t(LGe),f&&t(Po),w(bL),w(FL),w(vb),w(TL),w(hv),f&&t(yGe),f&&t(Zi),w(ML),f&&t(xGe),f&&t(Bo),w(EL),w(wL),w(uv),w(AL),w(Qv),f&&t($Ge),f&&t(rd),w(LL),f&&t(kGe),f&&t(Io),w(yL),w($L),w(Uv),w(kL),w(r0),f&&t(SGe),f&&t(nd),w(SL),f&&t(RGe),f&&t(No),w(RL),w(BL),w(a0),w(IL),w(D0),f&&t(PGe),f&&t(id),w(NL),f&&t(BGe),f&&t(qo),w(qL),w(DL),w(O0),w(GL),w($F),f&&t(IGe),f&&t(fd),w(OL),f&&t(NGe),f&&t(jo),w(VL),w(zL),w(SF),w(WL),w(BF),f&&t(qGe),f&&t(hd),w(QL),f&&t(jGe),f&&t(Do),w(HL),w(JL),w(NF),w(YL),w(YF),f&&t(DGe),f&&t(_d),w(KL),f&&t(GGe),f&&t(Go),w(ZL),w(oy),w(ZF),w(ry),w(rT),f&&t(OGe),f&&t(Fd),w(ty),f&&t(VGe),f&&t(Oo),w(ay),w(sy),w(aT),w(ly),w(lT),f&&t(XGe),f&&t(Ed),w(iy),f&&t(zGe),f&&t(Vo),w(dy),w(fy),w(dT),w(my),w(FT),f&&t(WGe),f&&t(Ad),w(gy),f&&t(QGe),f&&t(Xo),w(hy),w(uy),w(MT),w(_y),w(xT),f&&t(HGe),f&&t(xd),w(by),f&&t(UGe),f&&t(zo),w(vy),w(Ty),w(kT),w(My),w(VT),f&&t(JGe),f&&t(Sd),w(Ey),f&&t(YGe),f&&t(Wo),w(Cy),w(Ay),w(zT),w(Ly),w(UT),f&&t(KGe),f&&t(Bd),w(xy),f&&t(ZGe),f&&t(Qo),w($y),w(Sy),w(YT),w(Ry),w(a7),f&&t(eOe),f&&t(qd),w(Py),f&&t(oOe),f&&t(Ho),w(By),w(Ny),w(s7),w(qy),w(f7),f&&t(rOe),f&&t(Od),w(jy),f&&t(tOe),f&&t(Uo),w(Dy),w(Oy),w(g7),w(Vy),w(_7),f&&t(aOe),f&&t(zd),w(zy),f&&t(nOe),f&&t(Jo),w(Wy),w(Hy),w(v7),w(Uy),w(M7),f&&t(sOe),f&&t(Hd),w(Jy),f&&t(lOe),f&&t(Yo),w(Yy),w(Zy),w(C7),w(e8),w($7),f&&t(iOe),f&&t(Yd),w(o8),f&&t(dOe),f&&t(Ko),w(r8),w(a8),w(S7),w(n8),w(B7),f&&t(cOe),f&&t(ec),w(s8),f&&t(fOe),f&&t(Zo),w(l8),w(d8),w(N7),w(c8),w($9),f&&t(mOe),f&&t(tc),w(f8),f&&t(gOe),f&&t(er),w(m8),w(h8),w(S9),w(p8),w(rM),f&&t(hOe),f&&t(sc),w(u8),f&&t(pOe),f&&t(or),w(_8),w(v8),w(aM),w(F8),w(bM),f&&t(uOe),f&&t(dc),w(T8),f&&t(_Oe),f&&t(rr),w(M8),w(C8),w(FM),w(w8),w(wM),f&&t(bOe),f&&t(mc),w(A8),f&&t(vOe),f&&t(tr),w(L8),w(x8),w(LM),w($8),w(HM),f&&t(FOe),f&&t(pc),w(k8),f&&t(TOe),f&&t(ar),w(S8),w(P8),w(JM),w(B8),w(l4),f&&t(MOe),f&&t(bc),w(I8),f&&t(EOe),f&&t(nr),w(N8),w(j8),w(d4),w(D8),w(I4),f&&t(COe),f&&t(Tc),w(G8),f&&t(wOe),f&&t(sr),w(O8),w(X8),w(q4),w(z8),w(rE),f&&t(AOe),f&&t(Cc),w(W8),f&&t(LOe),f&&t(lr),w(Q8),w(U8),w(aE),w(J8),w(lE),f&&t(yOe),f&&t(Lc),w(K8),f&&t(xOe),f&&t(ir),w(Z8),w(ox),w(dE),w(rx),w(fE),f&&t($Oe),f&&t($c),w(tx),f&&t(kOe),f&&t(dr),w(ax),w(sx),w(gE),w(lx),w(PE),f&&t(SOe),f&&t(Rc),w(ix),f&&t(ROe),f&&t(cr),w(dx),w(fx),w(IE),w(mx),w(tC),f&&t(POe),f&&t(Ic),w(gx),f&&t(BOe),f&&t(fr),w(hx),w(ux),w(nC),w(_x),w(lC),f&&t(IOe),f&&t(jc),w(bx),f&&t(NOe),f&&t(mr),w(vx),w(Tx),w(dC),w(Mx),w(fC),f&&t(qOe),f&&t(Oc),w(Ex),f&&t(jOe),f&&t(gr),w(Cx),w(Ax),w(gC),w(Lx),w(GC),f&&t(DOe),f&&t(zc),w(yx),f&&t(GOe),f&&t(hr),w(xx),w(kx),w(VC),w(Sx),w(e5),f&&t(OOe),f&&t(Hc),w(Rx),f&&t(VOe),f&&t(pr),w(Px),w(Ix),w(r5),w(Nx),w(u5),f&&t(XOe),f&&t(Yc),w(qx),f&&t(zOe),f&&t(ur),w(jx),w(Gx),w(b5),w(Ox),w(x5),f&&t(WOe),f&&t(ef),w(Vx),f&&t(QOe),f&&t(_r),w(Xx),w(Wx),w(k5),w(Qx),w(O5),f&&t(HOe),f&&t(tf),w(Hx),f&&t(UOe),f&&t(br),w(Ux),w(Yx),w(X5),w(Kx),w(o3),f&&t(JOe),f&&t(sf),w(Zx),f&&t(YOe),f&&t(vr),w(e$),w(r$),w(t3),w(t$),w(h3),f&&t(KOe),f&&t(cf),w(a$),f&&t(ZOe),f&&t(Fr),w(n$),w(l$),w(u3),w(i$),w(w3),f&&t(eVe),f&&t(gf),w(d$),f&&t(oVe),f&&t(Tr),w(c$),w(m$),w(L3),w(g$),w(I3),f&&t(rVe),f&&t(uf),w(h$),f&&t(tVe),f&&t(Mr),w(p$),w(_$),w(q3),w(b$),w(D3),f&&t(aVe),f&&t(vf),w(v$),f&&t(nVe),f&&t(Er),w(F$),w(M$),w(O3),w(E$),w(z3),f&&t(sVe),f&&t(Mf),w(w$),f&&t(lVe),f&&t(Cr),w(A$),w(y$),w(Q3),w(x$),w(U3)}}}const RDt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function PDt(x){return Sqt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class GDt extends yqt{constructor(g){super();xqt(this,g,PDt,SDt,$qt,{})}}export{GDt as default,RDt as metadata};
