import{S as YHt,i as KHt,s as ZHt,e as a,k as l,w as F,t as o,M as eUt,c as n,d as t,m as i,a as s,x as T,h as r,b as d,G as e,g as b,y as M,q as E,o as C,B as w,v as oUt,L as q}from"../../chunks/vendor-hf-doc-builder.js";import{T as Zat}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as N}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function rUt($){let g,v,p,m,_,c,h,wo,xi,If,lt,$i,ki,fy,Nf,Oe,Qe,Si,Pn,my,Bn,In,gy,Ri,Nn,hy,Pi,qf,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),c=a("code"),h=o("PretrainedConfig"),wo=o(`, make sure its
`),xi=a("code"),If=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),$i=a("code"),ki=o('"new-model"'),fy=o(")."),Nf=l(),Oe=a("p"),Qe=o("Likewise, if your "),Si=a("code"),Pn=o("NewModel"),my=o(" is a subclass of "),Bn=a("a"),In=o("PreTrainedModel"),gy=o(`, make sure its
`),Ri=a("code"),Nn=o("config_class"),hy=o(` attribute is set to the same class you use when registering the model (here
`),Pi=a("code"),qf=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var HS=s(p);m=r(HS,"NewModelConfig"),HS.forEach(t),_=r(Ae," is a subclass of "),c=n(Ae,"CODE",{});var Bi=s(c);h=r(Bi,"PretrainedConfig"),Bi.forEach(t),wo=r(Ae,`, make sure its
`),xi=n(Ae,"CODE",{});var US=s(xi);If=r(US,"model_type"),US.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),$i=n(Ae,"CODE",{});var JS=s($i);ki=r(JS,'"new-model"'),JS.forEach(t),fy=r(Ae,")."),Ae.forEach(t),Nf=i(He),Oe=n(He,"P",{});var Ao=s(Oe);Qe=r(Ao,"Likewise, if your "),Si=n(Ao,"CODE",{});var Ra=s(Si);Pn=r(Ra,"NewModel"),Ra.forEach(t),my=r(Ao," is a subclass of "),Bn=n(Ao,"A",{href:!0});var YS=s(Bn);In=r(YS,"PreTrainedModel"),YS.forEach(t),gy=r(Ao,`, make sure its
`),Ri=n(Ao,"CODE",{});var jf=s(Ri);Nn=r(jf,"config_class"),jf.forEach(t),hy=r(Ao,` attribute is set to the same class you use when registering the model (here
`),Pi=n(Ao,"CODE",{});var KS=s(Pi);qf=r(KS,"NewModelConfig"),KS.forEach(t),Sa=r(Ao,")."),Ao.forEach(t),this.h()},h(){d(Bn,"href","/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,c),e(c,h),e(g,wo),e(g,xi),e(xi,If),e(g,lt),e(g,$i),e($i,ki),e(g,fy),b(He,Nf,Ae),b(He,Oe,Ae),e(Oe,Qe),e(Oe,Si),e(Si,Pn),e(Oe,my),e(Oe,Bn),e(Bn,In),e(Oe,gy),e(Oe,Ri),e(Ri,Nn),e(Oe,hy),e(Oe,Pi),e(Pi,qf),e(Oe,Sa)},d(He){He&&t(g),He&&t(Nf),He&&t(Oe)}}}function tUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function aUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function nUt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var wo=s(p);m=r(wo,"use_auth_token=True"),wo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(c,h){b(c,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(c){c&&t(g)}}}function sUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function lUt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var wo=s(p);m=r(wo,"use_auth_token=True"),wo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(c,h){b(c,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(c){c&&t(g)}}}function iUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function dUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function cUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function fUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function mUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function gUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function hUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function pUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function _Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function uUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function bUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function vUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function FUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function TUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function MUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function EUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function CUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function wUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function AUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function LUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function yUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function xUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function $Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function kUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function SUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function RUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function PUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function BUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function IUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function NUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function qUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function jUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function DUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function GUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function OUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function VUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function XUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function zUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function WUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function QUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function HUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function UUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function JUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function YUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function KUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function ZUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function eJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function oJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function rJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function tJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function aJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function nJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function sJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function lJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function iJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function dJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function cJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function fJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function mJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function gJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function hJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function pJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function _Jt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function uJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function bJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function vJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function FJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function TJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function MJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function EJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function CJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function wJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function AJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function LJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function yJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function xJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function $Jt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function kJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function SJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function RJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function PJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function BJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function IJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function NJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function qJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function jJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function DJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function GJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function OJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function VJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function XJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function zJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function WJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function QJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function HJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function UJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function JJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function YJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function KJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function ZJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function eYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function oYt($){let g,v,p,m,_,c,h,wo,xi,If,lt,$i,ki,fy,Nf,Oe,Qe,Si,Pn,my,Bn,In,gy,Ri,Nn,hy,Pi,qf,Sa,He,Ae,HS,Bi,US,JS,Ao,Ra,YS,jf,KS,aUe,VXe,Ii,Df,Yae,py,nUe,Kae,sUe,XXe,qn,lUe,Zae,iUe,dUe,ene,cUe,fUe,zXe,_y,WXe,ZS,mUe,QXe,Gf,HXe,Ni,Of,one,uy,gUe,rne,hUe,UXe,Lo,by,pUe,vy,_Ue,eR,uUe,bUe,vUe,Fy,FUe,tne,TUe,MUe,EUe,yr,Ty,CUe,ane,wUe,AUe,qi,LUe,nne,yUe,xUe,sne,$Ue,kUe,SUe,A,Vf,lne,RUe,PUe,oR,BUe,IUe,NUe,Xf,ine,qUe,jUe,rR,DUe,GUe,OUe,zf,dne,VUe,XUe,tR,zUe,WUe,QUe,Wf,cne,HUe,UUe,aR,JUe,YUe,KUe,Qf,fne,ZUe,eJe,nR,oJe,rJe,tJe,Hf,mne,aJe,nJe,sR,sJe,lJe,iJe,Uf,gne,dJe,cJe,lR,fJe,mJe,gJe,Jf,hne,hJe,pJe,iR,_Je,uJe,bJe,Yf,pne,vJe,FJe,dR,TJe,MJe,EJe,Kf,_ne,CJe,wJe,cR,AJe,LJe,yJe,Zf,une,xJe,$Je,fR,kJe,SJe,RJe,em,bne,PJe,BJe,mR,IJe,NJe,qJe,om,vne,jJe,DJe,gR,GJe,OJe,VJe,rm,Fne,XJe,zJe,hR,WJe,QJe,HJe,tm,Tne,UJe,JJe,pR,YJe,KJe,ZJe,am,Mne,eYe,oYe,_R,rYe,tYe,aYe,nm,Ene,nYe,sYe,uR,lYe,iYe,dYe,sm,Cne,cYe,fYe,bR,mYe,gYe,hYe,lm,wne,pYe,_Ye,vR,uYe,bYe,vYe,im,Ane,FYe,TYe,FR,MYe,EYe,CYe,dm,Lne,wYe,AYe,TR,LYe,yYe,xYe,cm,yne,$Ye,kYe,MR,SYe,RYe,PYe,fm,xne,BYe,IYe,ER,NYe,qYe,jYe,mm,$ne,DYe,GYe,CR,OYe,VYe,XYe,gm,kne,zYe,WYe,wR,QYe,HYe,UYe,hm,Sne,JYe,YYe,AR,KYe,ZYe,eKe,pm,Rne,oKe,rKe,LR,tKe,aKe,nKe,_m,Pne,sKe,lKe,yR,iKe,dKe,cKe,um,Bne,fKe,mKe,xR,gKe,hKe,pKe,bm,Ine,_Ke,uKe,$R,bKe,vKe,FKe,vm,Nne,TKe,MKe,kR,EKe,CKe,wKe,Fm,qne,AKe,LKe,SR,yKe,xKe,$Ke,Tm,jne,kKe,SKe,RR,RKe,PKe,BKe,Mm,Dne,IKe,NKe,PR,qKe,jKe,DKe,Em,Gne,GKe,OKe,BR,VKe,XKe,zKe,Cm,One,WKe,QKe,IR,HKe,UKe,JKe,wm,Vne,YKe,KKe,NR,ZKe,eZe,oZe,Am,Xne,rZe,tZe,qR,aZe,nZe,sZe,Lm,zne,lZe,iZe,jR,dZe,cZe,fZe,ym,Wne,mZe,gZe,DR,hZe,pZe,_Ze,xm,Qne,uZe,bZe,GR,vZe,FZe,TZe,$m,Hne,MZe,EZe,OR,CZe,wZe,AZe,km,Une,LZe,yZe,VR,xZe,$Ze,kZe,Sm,Jne,SZe,RZe,XR,PZe,BZe,IZe,Rm,Yne,NZe,qZe,zR,jZe,DZe,GZe,Pm,Kne,OZe,VZe,WR,XZe,zZe,WZe,Bm,Zne,QZe,HZe,QR,UZe,JZe,YZe,Im,ese,KZe,ZZe,HR,eeo,oeo,reo,Nm,ose,teo,aeo,UR,neo,seo,leo,qm,rse,ieo,deo,JR,ceo,feo,meo,jm,tse,geo,heo,YR,peo,_eo,ueo,Dm,ase,beo,veo,KR,Feo,Teo,Meo,Gm,nse,Eeo,Ceo,ZR,weo,Aeo,Leo,Om,sse,yeo,xeo,eP,$eo,keo,Seo,Vm,lse,Reo,Peo,oP,Beo,Ieo,Neo,Xm,ise,qeo,jeo,rP,Deo,Geo,Oeo,zm,dse,Veo,Xeo,tP,zeo,Weo,Qeo,Wm,cse,Heo,Ueo,aP,Jeo,Yeo,Keo,Qm,fse,Zeo,eoo,nP,ooo,roo,too,Hm,mse,aoo,noo,sP,soo,loo,ioo,Um,gse,doo,coo,lP,foo,moo,goo,Jm,hse,hoo,poo,iP,_oo,uoo,boo,Ym,pse,voo,Foo,dP,Too,Moo,Eoo,Km,_se,Coo,woo,cP,Aoo,Loo,yoo,Zm,use,xoo,$oo,fP,koo,Soo,Roo,eg,bse,Poo,Boo,mP,Ioo,Noo,qoo,og,vse,joo,Doo,gP,Goo,Ooo,Voo,rg,Fse,Xoo,zoo,hP,Woo,Qoo,Hoo,tg,Tse,Uoo,Joo,pP,Yoo,Koo,Zoo,ag,Mse,ero,oro,_P,rro,tro,aro,ng,Ese,nro,sro,uP,lro,iro,dro,sg,Cse,cro,fro,bP,mro,gro,hro,lg,wse,pro,_ro,vP,uro,bro,vro,ig,Ase,Fro,Tro,FP,Mro,Ero,Cro,dg,Lse,wro,Aro,TP,Lro,yro,xro,cg,yse,$ro,kro,MP,Sro,Rro,Pro,fg,xse,Bro,Iro,EP,Nro,qro,jro,mg,$se,Dro,Gro,CP,Oro,Vro,Xro,gg,kse,zro,Wro,wP,Qro,Hro,Uro,hg,Sse,Jro,Yro,AP,Kro,Zro,eto,pg,Rse,oto,rto,LP,tto,ato,nto,_g,Pse,sto,lto,yP,ito,dto,cto,ug,Bse,fto,mto,xP,gto,hto,pto,bg,Ise,_to,uto,$P,bto,vto,Fto,vg,Nse,Tto,Mto,kP,Eto,Cto,wto,Fg,qse,Ato,Lto,SP,yto,xto,$to,Tg,jse,kto,Sto,RP,Rto,Pto,Bto,Mg,Dse,Ito,Nto,PP,qto,jto,Dto,Eg,Gse,Gto,Oto,BP,Vto,Xto,zto,Cg,Ose,Wto,Qto,IP,Hto,Uto,Jto,wg,Vse,Yto,Kto,NP,Zto,eao,oao,Ag,Xse,rao,tao,qP,aao,nao,sao,Lg,zse,lao,iao,jP,dao,cao,fao,yg,Wse,mao,gao,DP,hao,pao,_ao,xg,Qse,uao,bao,GP,vao,Fao,Tao,$g,Hse,Mao,Eao,OP,Cao,wao,Aao,kg,Use,Lao,yao,VP,xao,$ao,kao,Sg,Jse,Sao,Rao,XP,Pao,Bao,Iao,Rg,Yse,Nao,qao,zP,jao,Dao,Gao,Pg,Kse,Oao,Vao,WP,Xao,zao,Wao,Bg,Zse,Qao,Hao,QP,Uao,Jao,Yao,Ig,ele,Kao,Zao,HP,eno,ono,rno,Ng,ole,tno,ano,UP,nno,sno,lno,qg,rle,ino,dno,JP,cno,fno,mno,jg,tle,gno,hno,YP,pno,_no,uno,Dg,ale,bno,vno,KP,Fno,Tno,Mno,Gg,nle,Eno,Cno,ZP,wno,Ano,Lno,Og,sle,yno,xno,eB,$no,kno,Sno,Vg,lle,Rno,Pno,oB,Bno,Ino,Nno,Xg,ile,qno,jno,rB,Dno,Gno,Ono,zg,dle,Vno,Xno,tB,zno,Wno,Qno,Wg,cle,Hno,Uno,aB,Jno,Yno,Kno,Qg,fle,Zno,eso,nB,oso,rso,tso,Hg,mle,aso,nso,sB,sso,lso,iso,Ug,gle,dso,cso,lB,fso,mso,gso,Jg,hle,hso,pso,iB,_so,uso,bso,Yg,ple,vso,Fso,dB,Tso,Mso,Eso,Kg,_le,Cso,wso,cB,Aso,Lso,yso,Zg,ule,xso,$so,fB,kso,Sso,Rso,eh,Pso,oh,My,Bso,ble,Iso,JXe,ji,rh,vle,Ey,Nso,Fle,qso,YXe,yo,Cy,jso,wy,Dso,mB,Gso,Oso,Vso,Ay,Xso,Tle,zso,Wso,Qso,xr,Ly,Hso,Mle,Uso,Jso,Pa,Yso,Ele,Kso,Zso,Cle,elo,olo,wle,rlo,tlo,alo,k,jn,Ale,nlo,slo,gB,llo,ilo,hB,dlo,clo,flo,Dn,Lle,mlo,glo,pB,hlo,plo,_B,_lo,ulo,blo,Gn,yle,vlo,Flo,uB,Tlo,Mlo,bB,Elo,Clo,wlo,th,xle,Alo,Llo,vB,ylo,xlo,$lo,On,$le,klo,Slo,FB,Rlo,Plo,TB,Blo,Ilo,Nlo,ah,kle,qlo,jlo,MB,Dlo,Glo,Olo,nh,Sle,Vlo,Xlo,EB,zlo,Wlo,Qlo,sh,Rle,Hlo,Ulo,CB,Jlo,Ylo,Klo,Vn,Ple,Zlo,eio,wB,oio,rio,AB,tio,aio,nio,Xn,Ble,sio,lio,LB,iio,dio,yB,cio,fio,mio,zn,Ile,gio,hio,xB,pio,_io,$B,uio,bio,vio,lh,Nle,Fio,Tio,kB,Mio,Eio,Cio,ih,qle,wio,Aio,SB,Lio,yio,xio,dh,jle,$io,kio,RB,Sio,Rio,Pio,Wn,Dle,Bio,Iio,PB,Nio,qio,BB,jio,Dio,Gio,ch,Gle,Oio,Vio,IB,Xio,zio,Wio,Qn,Ole,Qio,Hio,NB,Uio,Jio,qB,Yio,Kio,Zio,Hn,Vle,edo,odo,jB,rdo,tdo,DB,ado,ndo,sdo,Un,Xle,ldo,ido,GB,ddo,cdo,OB,fdo,mdo,gdo,Jn,zle,hdo,pdo,VB,_do,udo,XB,bdo,vdo,Fdo,fh,Wle,Tdo,Mdo,zB,Edo,Cdo,wdo,Yn,Qle,Ado,Ldo,WB,ydo,xdo,QB,$do,kdo,Sdo,Kn,Hle,Rdo,Pdo,HB,Bdo,Ido,UB,Ndo,qdo,jdo,Zn,Ule,Ddo,Gdo,JB,Odo,Vdo,YB,Xdo,zdo,Wdo,es,Jle,Qdo,Hdo,KB,Udo,Jdo,ZB,Ydo,Kdo,Zdo,os,Yle,eco,oco,eI,rco,tco,oI,aco,nco,sco,rs,Kle,lco,ico,rI,dco,cco,tI,fco,mco,gco,mh,Zle,hco,pco,aI,_co,uco,bco,ts,eie,vco,Fco,nI,Tco,Mco,sI,Eco,Cco,wco,gh,oie,Aco,Lco,lI,yco,xco,$co,as,rie,kco,Sco,iI,Rco,Pco,dI,Bco,Ico,Nco,ns,tie,qco,jco,cI,Dco,Gco,fI,Oco,Vco,Xco,ss,aie,zco,Wco,mI,Qco,Hco,gI,Uco,Jco,Yco,hh,nie,Kco,Zco,hI,efo,ofo,rfo,ls,sie,tfo,afo,pI,nfo,sfo,_I,lfo,ifo,dfo,is,lie,cfo,ffo,uI,mfo,gfo,bI,hfo,pfo,_fo,ds,iie,ufo,bfo,vI,vfo,Ffo,FI,Tfo,Mfo,Efo,ph,die,Cfo,wfo,TI,Afo,Lfo,yfo,cs,cie,xfo,$fo,MI,kfo,Sfo,EI,Rfo,Pfo,Bfo,fs,fie,Ifo,Nfo,CI,qfo,jfo,wI,Dfo,Gfo,Ofo,ms,mie,Vfo,Xfo,AI,zfo,Wfo,LI,Qfo,Hfo,Ufo,gs,gie,Jfo,Yfo,yI,Kfo,Zfo,xI,emo,omo,rmo,hs,hie,tmo,amo,$I,nmo,smo,kI,lmo,imo,dmo,ps,pie,cmo,fmo,SI,mmo,gmo,RI,hmo,pmo,_mo,_s,_ie,umo,bmo,PI,vmo,Fmo,BI,Tmo,Mmo,Emo,us,uie,Cmo,wmo,II,Amo,Lmo,NI,ymo,xmo,$mo,_h,bie,kmo,Smo,qI,Rmo,Pmo,Bmo,bs,vie,Imo,Nmo,jI,qmo,jmo,DI,Dmo,Gmo,Omo,uh,Fie,Vmo,Xmo,GI,zmo,Wmo,Qmo,bh,Tie,Hmo,Umo,OI,Jmo,Ymo,Kmo,vs,Mie,Zmo,ego,VI,ogo,rgo,XI,tgo,ago,ngo,Fs,Eie,sgo,lgo,zI,igo,dgo,WI,cgo,fgo,mgo,Ts,Cie,ggo,hgo,QI,pgo,_go,HI,ugo,bgo,vgo,vh,wie,Fgo,Tgo,UI,Mgo,Ego,Cgo,Ms,Aie,wgo,Ago,JI,Lgo,ygo,YI,xgo,$go,kgo,Es,Lie,Sgo,Rgo,KI,Pgo,Bgo,ZI,Igo,Ngo,qgo,Cs,yie,jgo,Dgo,eN,Ggo,Ogo,oN,Vgo,Xgo,zgo,ws,xie,Wgo,Qgo,rN,Hgo,Ugo,tN,Jgo,Ygo,Kgo,As,$ie,Zgo,eho,aN,oho,rho,nN,tho,aho,nho,Ls,kie,sho,lho,sN,iho,dho,lN,cho,fho,mho,ys,Sie,gho,hho,iN,pho,_ho,dN,uho,bho,vho,xs,Rie,Fho,Tho,cN,Mho,Eho,fN,Cho,who,Aho,Fh,Pie,Lho,yho,mN,xho,$ho,kho,$s,Bie,Sho,Rho,gN,Pho,Bho,hN,Iho,Nho,qho,ks,Iie,jho,Dho,pN,Gho,Oho,_N,Vho,Xho,zho,Th,Nie,Who,Qho,uN,Hho,Uho,Jho,Mh,qie,Yho,Kho,bN,Zho,epo,opo,Eh,jie,rpo,tpo,vN,apo,npo,spo,Ch,Die,lpo,ipo,FN,dpo,cpo,fpo,Ss,Gie,mpo,gpo,TN,hpo,ppo,MN,_po,upo,bpo,wh,Oie,vpo,Fpo,EN,Tpo,Mpo,Epo,Rs,Vie,Cpo,wpo,CN,Apo,Lpo,wN,ypo,xpo,$po,Ps,Xie,kpo,Spo,AN,Rpo,Ppo,LN,Bpo,Ipo,Npo,Bs,zie,qpo,jpo,yN,Dpo,Gpo,xN,Opo,Vpo,Xpo,Is,Wie,zpo,Wpo,$N,Qpo,Hpo,kN,Upo,Jpo,Ypo,Ns,Qie,Kpo,Zpo,SN,e_o,o_o,RN,r_o,t_o,a_o,qs,Hie,n_o,s_o,PN,l_o,i_o,BN,d_o,c_o,f_o,Ah,Uie,m_o,g_o,IN,h_o,p_o,__o,Lh,Jie,u_o,b_o,NN,v_o,F_o,T_o,js,Yie,M_o,E_o,qN,C_o,w_o,jN,A_o,L_o,y_o,Ds,Kie,x_o,$_o,DN,k_o,S_o,GN,R_o,P_o,B_o,Gs,Zie,I_o,N_o,ON,q_o,j_o,VN,D_o,G_o,O_o,yh,ede,V_o,X_o,XN,z_o,W_o,Q_o,xh,ode,H_o,U_o,zN,J_o,Y_o,K_o,$h,rde,Z_o,euo,WN,ouo,ruo,tuo,Os,tde,auo,nuo,QN,suo,luo,HN,iuo,duo,cuo,Vs,ade,fuo,muo,UN,guo,huo,JN,puo,_uo,uuo,kh,nde,buo,vuo,YN,Fuo,Tuo,Muo,Sh,sde,Euo,Cuo,KN,wuo,Auo,Luo,Rh,lde,yuo,xuo,ZN,$uo,kuo,Suo,Xs,ide,Ruo,Puo,eq,Buo,Iuo,oq,Nuo,quo,juo,Ph,dde,Duo,Guo,rq,Ouo,Vuo,Xuo,Bh,cde,zuo,Wuo,tq,Quo,Huo,Uuo,zs,fde,Juo,Yuo,aq,Kuo,Zuo,nq,e1o,o1o,r1o,Ws,mde,t1o,a1o,sq,n1o,s1o,lq,l1o,i1o,d1o,Qs,gde,c1o,f1o,iq,m1o,g1o,dq,h1o,p1o,_1o,Hs,hde,u1o,b1o,cq,v1o,F1o,fq,T1o,M1o,E1o,Ih,C1o,Nh,yy,w1o,pde,A1o,KXe,Di,qh,_de,xy,L1o,ude,y1o,ZXe,xo,$y,x1o,ky,$1o,mq,k1o,S1o,R1o,Sy,P1o,bde,B1o,I1o,N1o,Ue,Ry,q1o,vde,j1o,D1o,Ba,G1o,Fde,O1o,V1o,Tde,X1o,z1o,Mde,W1o,Q1o,H1o,J,jh,Ede,U1o,J1o,gq,Y1o,K1o,Z1o,Dh,Cde,e4o,o4o,hq,r4o,t4o,a4o,Gh,wde,n4o,s4o,pq,l4o,i4o,d4o,Oh,Ade,c4o,f4o,_q,m4o,g4o,h4o,Vh,Lde,p4o,_4o,uq,u4o,b4o,v4o,Xh,yde,F4o,T4o,bq,M4o,E4o,C4o,zh,xde,w4o,A4o,vq,L4o,y4o,x4o,Wh,$de,$4o,k4o,Fq,S4o,R4o,P4o,Qh,kde,B4o,I4o,Tq,N4o,q4o,j4o,Hh,Sde,D4o,G4o,Mq,O4o,V4o,X4o,Uh,Rde,z4o,W4o,Eq,Q4o,H4o,U4o,Jh,Pde,J4o,Y4o,Cq,K4o,Z4o,e2o,Yh,Bde,o2o,r2o,wq,t2o,a2o,n2o,Kh,Ide,s2o,l2o,Aq,i2o,d2o,c2o,Zh,Nde,f2o,m2o,Lq,g2o,h2o,p2o,ep,qde,_2o,u2o,yq,b2o,v2o,F2o,op,jde,T2o,M2o,xq,E2o,C2o,w2o,rp,Dde,A2o,L2o,$q,y2o,x2o,$2o,tp,Gde,k2o,S2o,kq,R2o,P2o,B2o,ap,Ode,I2o,N2o,Sq,q2o,j2o,D2o,np,Vde,G2o,O2o,Rq,V2o,X2o,z2o,sp,Xde,W2o,Q2o,Pq,H2o,U2o,J2o,lp,zde,Y2o,K2o,Bq,Z2o,ebo,obo,ip,Wde,rbo,tbo,Iq,abo,nbo,sbo,dp,Qde,lbo,ibo,Nq,dbo,cbo,fbo,cp,Hde,mbo,gbo,qq,hbo,pbo,_bo,fp,Ude,ubo,bbo,jq,vbo,Fbo,Tbo,mp,Jde,Mbo,Ebo,Dq,Cbo,wbo,Abo,gp,Yde,Lbo,ybo,Gq,xbo,$bo,kbo,hp,Kde,Sbo,Rbo,Oq,Pbo,Bbo,Ibo,pp,Zde,Nbo,qbo,Vq,jbo,Dbo,Gbo,_p,ece,Obo,Vbo,Xq,Xbo,zbo,Wbo,up,oce,Qbo,Hbo,zq,Ubo,Jbo,Ybo,bp,rce,Kbo,Zbo,Wq,evo,ovo,rvo,vp,tce,tvo,avo,Qq,nvo,svo,lvo,Fp,ivo,Tp,dvo,Mp,Py,cvo,ace,fvo,eze,Gi,Ep,nce,By,mvo,sce,gvo,oze,$o,Iy,hvo,Ny,pvo,Hq,_vo,uvo,bvo,qy,vvo,lce,Fvo,Tvo,Mvo,Je,jy,Evo,ice,Cvo,wvo,Oi,Avo,dce,Lvo,yvo,cce,xvo,$vo,kvo,fe,Cp,fce,Svo,Rvo,Uq,Pvo,Bvo,Ivo,wp,mce,Nvo,qvo,Jq,jvo,Dvo,Gvo,Ap,gce,Ovo,Vvo,Yq,Xvo,zvo,Wvo,Lp,hce,Qvo,Hvo,Kq,Uvo,Jvo,Yvo,yp,pce,Kvo,Zvo,Zq,e0o,o0o,r0o,xp,_ce,t0o,a0o,ej,n0o,s0o,l0o,$p,uce,i0o,d0o,oj,c0o,f0o,m0o,kp,bce,g0o,h0o,rj,p0o,_0o,u0o,Sp,vce,b0o,v0o,tj,F0o,T0o,M0o,Rp,Fce,E0o,C0o,aj,w0o,A0o,L0o,Pp,Tce,y0o,x0o,nj,$0o,k0o,S0o,Bp,Mce,R0o,P0o,sj,B0o,I0o,N0o,Ip,Ece,q0o,j0o,lj,D0o,G0o,O0o,Np,Cce,V0o,X0o,ij,z0o,W0o,Q0o,qp,wce,H0o,U0o,dj,J0o,Y0o,K0o,jp,Ace,Z0o,eFo,cj,oFo,rFo,tFo,Dp,Lce,aFo,nFo,fj,sFo,lFo,iFo,Gp,yce,dFo,cFo,mj,fFo,mFo,gFo,Op,xce,hFo,pFo,gj,_Fo,uFo,bFo,Vp,vFo,Xp,FFo,zp,Dy,TFo,$ce,MFo,rze,Vi,Wp,kce,Gy,EFo,Sce,CFo,tze,ko,Oy,wFo,Xi,AFo,hj,LFo,yFo,pj,xFo,$Fo,kFo,Vy,SFo,Rce,RFo,PFo,BFo,it,Xy,IFo,Pce,NFo,qFo,zi,jFo,Bce,DFo,GFo,_j,OFo,VFo,XFo,Qp,zFo,Ye,zy,WFo,Ice,QFo,HFo,Ia,UFo,Nce,JFo,YFo,qce,KFo,ZFo,jce,e6o,o6o,r6o,y,Hp,Dce,t6o,a6o,uj,n6o,s6o,l6o,Up,Gce,i6o,d6o,bj,c6o,f6o,m6o,Jp,Oce,g6o,h6o,vj,p6o,_6o,u6o,Yp,Vce,b6o,v6o,Fj,F6o,T6o,M6o,Kp,Xce,E6o,C6o,Tj,w6o,A6o,L6o,Zp,zce,y6o,x6o,Mj,$6o,k6o,S6o,e_,Wce,R6o,P6o,Ej,B6o,I6o,N6o,o_,Qce,q6o,j6o,Cj,D6o,G6o,O6o,r_,Hce,V6o,X6o,wj,z6o,W6o,Q6o,t_,Uce,H6o,U6o,Aj,J6o,Y6o,K6o,a_,Jce,Z6o,eTo,Lj,oTo,rTo,tTo,n_,Yce,aTo,nTo,yj,sTo,lTo,iTo,s_,Kce,dTo,cTo,xj,fTo,mTo,gTo,l_,Zce,hTo,pTo,$j,_To,uTo,bTo,i_,efe,vTo,FTo,kj,TTo,MTo,ETo,d_,ofe,CTo,wTo,Sj,ATo,LTo,yTo,c_,rfe,xTo,$To,Rj,kTo,STo,RTo,f_,tfe,PTo,BTo,Pj,ITo,NTo,qTo,m_,afe,jTo,DTo,Bj,GTo,OTo,VTo,g_,nfe,XTo,zTo,Ij,WTo,QTo,HTo,h_,sfe,UTo,JTo,Nj,YTo,KTo,ZTo,p_,lfe,e7o,o7o,qj,r7o,t7o,a7o,__,ife,n7o,s7o,jj,l7o,i7o,d7o,u_,dfe,c7o,f7o,Dj,m7o,g7o,h7o,b_,cfe,p7o,_7o,Gj,u7o,b7o,v7o,v_,ffe,F7o,T7o,Oj,M7o,E7o,C7o,F_,mfe,w7o,A7o,Vj,L7o,y7o,x7o,T_,gfe,$7o,k7o,Xj,S7o,R7o,P7o,M_,hfe,B7o,I7o,zj,N7o,q7o,j7o,E_,pfe,D7o,G7o,Wj,O7o,V7o,X7o,C_,_fe,z7o,W7o,Qj,Q7o,H7o,U7o,w_,ufe,J7o,Y7o,Hj,K7o,Z7o,eMo,A_,bfe,oMo,rMo,Uj,tMo,aMo,nMo,L_,vfe,sMo,lMo,Jj,iMo,dMo,cMo,Us,Ffe,fMo,mMo,Yj,gMo,hMo,Kj,pMo,_Mo,uMo,y_,Tfe,bMo,vMo,Zj,FMo,TMo,MMo,x_,Mfe,EMo,CMo,eD,wMo,AMo,LMo,$_,Efe,yMo,xMo,oD,$Mo,kMo,SMo,k_,Cfe,RMo,PMo,rD,BMo,IMo,NMo,S_,wfe,qMo,jMo,tD,DMo,GMo,OMo,R_,Afe,VMo,XMo,aD,zMo,WMo,QMo,P_,Lfe,HMo,UMo,nD,JMo,YMo,KMo,B_,yfe,ZMo,eEo,sD,oEo,rEo,tEo,I_,xfe,aEo,nEo,lD,sEo,lEo,iEo,N_,$fe,dEo,cEo,iD,fEo,mEo,gEo,q_,kfe,hEo,pEo,dD,_Eo,uEo,bEo,j_,Sfe,vEo,FEo,cD,TEo,MEo,EEo,D_,Rfe,CEo,wEo,fD,AEo,LEo,yEo,G_,Pfe,xEo,$Eo,mD,kEo,SEo,REo,O_,Bfe,PEo,BEo,gD,IEo,NEo,qEo,V_,Ife,jEo,DEo,hD,GEo,OEo,VEo,X_,Nfe,XEo,zEo,pD,WEo,QEo,HEo,z_,qfe,UEo,JEo,_D,YEo,KEo,ZEo,W_,jfe,eCo,oCo,uD,rCo,tCo,aCo,Q_,Dfe,nCo,sCo,bD,lCo,iCo,dCo,H_,Gfe,cCo,fCo,vD,mCo,gCo,hCo,U_,Ofe,pCo,_Co,FD,uCo,bCo,vCo,J_,Vfe,FCo,TCo,TD,MCo,ECo,CCo,Y_,Xfe,wCo,ACo,MD,LCo,yCo,xCo,K_,zfe,$Co,kCo,ED,SCo,RCo,PCo,Z_,Wfe,BCo,ICo,CD,NCo,qCo,jCo,eu,Qfe,DCo,GCo,wD,OCo,VCo,XCo,ou,Hfe,zCo,WCo,AD,QCo,HCo,UCo,ru,Ufe,JCo,YCo,LD,KCo,ZCo,e5o,tu,Jfe,o5o,r5o,yD,t5o,a5o,n5o,au,Yfe,s5o,l5o,xD,i5o,d5o,c5o,nu,Kfe,f5o,m5o,$D,g5o,h5o,p5o,su,Zfe,_5o,u5o,kD,b5o,v5o,F5o,lu,eme,T5o,M5o,SD,E5o,C5o,w5o,iu,ome,A5o,L5o,RD,y5o,x5o,$5o,du,rme,k5o,S5o,PD,R5o,P5o,B5o,cu,tme,I5o,N5o,BD,q5o,j5o,D5o,fu,ame,G5o,O5o,ID,V5o,X5o,z5o,mu,nme,W5o,Q5o,ND,H5o,U5o,J5o,gu,sme,Y5o,K5o,qD,Z5o,e3o,o3o,hu,lme,r3o,t3o,jD,a3o,n3o,s3o,pu,ime,l3o,i3o,DD,d3o,c3o,f3o,_u,dme,m3o,g3o,GD,h3o,p3o,_3o,uu,cme,u3o,b3o,OD,v3o,F3o,T3o,bu,fme,M3o,E3o,VD,C3o,w3o,A3o,vu,mme,L3o,y3o,XD,x3o,$3o,k3o,Fu,gme,S3o,R3o,zD,P3o,B3o,I3o,Tu,hme,N3o,q3o,WD,j3o,D3o,G3o,Mu,pme,O3o,V3o,QD,X3o,z3o,W3o,Eu,_me,Q3o,H3o,HD,U3o,J3o,Y3o,Cu,ume,K3o,Z3o,UD,ewo,owo,rwo,wu,bme,two,awo,JD,nwo,swo,lwo,Au,vme,iwo,dwo,YD,cwo,fwo,mwo,Lu,Fme,gwo,hwo,KD,pwo,_wo,uwo,yu,Tme,bwo,vwo,ZD,Fwo,Two,Mwo,xu,Mme,Ewo,Cwo,eG,wwo,Awo,Lwo,$u,Eme,ywo,xwo,oG,$wo,kwo,Swo,ku,Cme,Rwo,Pwo,rG,Bwo,Iwo,Nwo,Su,wme,qwo,jwo,tG,Dwo,Gwo,Owo,Ru,Ame,Vwo,Xwo,aG,zwo,Wwo,Qwo,Pu,Lme,Hwo,Uwo,nG,Jwo,Ywo,Kwo,Bu,yme,Zwo,eAo,sG,oAo,rAo,tAo,Iu,xme,aAo,nAo,lG,sAo,lAo,iAo,Nu,$me,dAo,cAo,iG,fAo,mAo,gAo,qu,kme,hAo,pAo,dG,_Ao,uAo,bAo,ju,Sme,vAo,FAo,cG,TAo,MAo,EAo,Du,Rme,CAo,wAo,fG,AAo,LAo,yAo,Gu,Pme,xAo,$Ao,mG,kAo,SAo,RAo,Ou,Bme,PAo,BAo,gG,IAo,NAo,qAo,Vu,Ime,jAo,DAo,hG,GAo,OAo,VAo,Xu,Nme,XAo,zAo,pG,WAo,QAo,HAo,zu,qme,UAo,JAo,_G,YAo,KAo,ZAo,Wu,jme,eLo,oLo,uG,rLo,tLo,aLo,Qu,Dme,nLo,sLo,bG,lLo,iLo,dLo,Hu,Gme,cLo,fLo,vG,mLo,gLo,hLo,Uu,Ome,pLo,_Lo,FG,uLo,bLo,vLo,Ju,Vme,FLo,TLo,TG,MLo,ELo,CLo,Yu,Xme,wLo,ALo,MG,LLo,yLo,xLo,Ku,$Lo,zme,kLo,SLo,Wme,RLo,PLo,Zu,aze,Wi,e1,Qme,Wy,BLo,Hme,ILo,nze,So,Qy,NLo,Qi,qLo,EG,jLo,DLo,CG,GLo,OLo,VLo,Hy,XLo,Ume,zLo,WLo,QLo,dt,Uy,HLo,Jme,ULo,JLo,Hi,YLo,Yme,KLo,ZLo,wG,eyo,oyo,ryo,o1,tyo,Ke,Jy,ayo,Kme,nyo,syo,Na,lyo,Zme,iyo,dyo,ege,cyo,fyo,oge,myo,gyo,hyo,G,r1,rge,pyo,_yo,AG,uyo,byo,vyo,t1,tge,Fyo,Tyo,LG,Myo,Eyo,Cyo,a1,age,wyo,Ayo,yG,Lyo,yyo,xyo,n1,nge,$yo,kyo,xG,Syo,Ryo,Pyo,s1,sge,Byo,Iyo,$G,Nyo,qyo,jyo,l1,lge,Dyo,Gyo,kG,Oyo,Vyo,Xyo,i1,ige,zyo,Wyo,SG,Qyo,Hyo,Uyo,d1,dge,Jyo,Yyo,RG,Kyo,Zyo,e8o,c1,cge,o8o,r8o,PG,t8o,a8o,n8o,f1,fge,s8o,l8o,BG,i8o,d8o,c8o,m1,mge,f8o,m8o,IG,g8o,h8o,p8o,g1,gge,_8o,u8o,NG,b8o,v8o,F8o,h1,hge,T8o,M8o,qG,E8o,C8o,w8o,p1,pge,A8o,L8o,jG,y8o,x8o,$8o,_1,_ge,k8o,S8o,DG,R8o,P8o,B8o,u1,uge,I8o,N8o,GG,q8o,j8o,D8o,b1,bge,G8o,O8o,OG,V8o,X8o,z8o,v1,vge,W8o,Q8o,VG,H8o,U8o,J8o,F1,Fge,Y8o,K8o,XG,Z8o,e9o,o9o,T1,Tge,r9o,t9o,zG,a9o,n9o,s9o,M1,Mge,l9o,i9o,WG,d9o,c9o,f9o,E1,Ege,m9o,g9o,QG,h9o,p9o,_9o,C1,Cge,u9o,b9o,HG,v9o,F9o,T9o,w1,wge,M9o,E9o,UG,C9o,w9o,A9o,A1,Age,L9o,y9o,JG,x9o,$9o,k9o,L1,Lge,S9o,R9o,YG,P9o,B9o,I9o,y1,yge,N9o,q9o,KG,j9o,D9o,G9o,x1,xge,O9o,V9o,ZG,X9o,z9o,W9o,$1,$ge,Q9o,H9o,eO,U9o,J9o,Y9o,k1,kge,K9o,Z9o,oO,exo,oxo,rxo,S1,Sge,txo,axo,rO,nxo,sxo,lxo,R1,Rge,ixo,dxo,tO,cxo,fxo,mxo,P1,Pge,gxo,hxo,aO,pxo,_xo,uxo,B1,Bge,bxo,vxo,nO,Fxo,Txo,Mxo,I1,Ige,Exo,Cxo,sO,wxo,Axo,Lxo,N1,Nge,yxo,xxo,lO,$xo,kxo,Sxo,q1,qge,Rxo,Pxo,iO,Bxo,Ixo,Nxo,j1,jge,qxo,jxo,dO,Dxo,Gxo,Oxo,D1,Dge,Vxo,Xxo,cO,zxo,Wxo,Qxo,G1,Gge,Hxo,Uxo,fO,Jxo,Yxo,Kxo,O1,Oge,Zxo,e$o,mO,o$o,r$o,t$o,V1,Vge,a$o,n$o,gO,s$o,l$o,i$o,X1,Xge,d$o,c$o,hO,f$o,m$o,g$o,z1,zge,h$o,p$o,pO,_$o,u$o,b$o,W1,Wge,v$o,F$o,_O,T$o,M$o,E$o,Q1,C$o,Qge,w$o,A$o,Hge,L$o,y$o,H1,sze,Ui,U1,Uge,Yy,x$o,Jge,$$o,lze,Ro,Ky,k$o,Ji,S$o,uO,R$o,P$o,bO,B$o,I$o,N$o,Zy,q$o,Yge,j$o,D$o,G$o,ct,e8,O$o,Kge,V$o,X$o,Yi,z$o,Zge,W$o,Q$o,vO,H$o,U$o,J$o,J1,Y$o,Ze,o8,K$o,ehe,Z$o,eko,qa,oko,ohe,rko,tko,rhe,ako,nko,the,sko,lko,iko,z,Y1,ahe,dko,cko,FO,fko,mko,gko,K1,nhe,hko,pko,TO,_ko,uko,bko,Z1,she,vko,Fko,MO,Tko,Mko,Eko,e4,lhe,Cko,wko,EO,Ako,Lko,yko,o4,ihe,xko,$ko,CO,kko,Sko,Rko,r4,dhe,Pko,Bko,wO,Iko,Nko,qko,t4,che,jko,Dko,AO,Gko,Oko,Vko,a4,fhe,Xko,zko,LO,Wko,Qko,Hko,n4,mhe,Uko,Jko,yO,Yko,Kko,Zko,s4,ghe,eSo,oSo,xO,rSo,tSo,aSo,l4,hhe,nSo,sSo,$O,lSo,iSo,dSo,i4,phe,cSo,fSo,kO,mSo,gSo,hSo,d4,_he,pSo,_So,SO,uSo,bSo,vSo,c4,uhe,FSo,TSo,RO,MSo,ESo,CSo,f4,bhe,wSo,ASo,PO,LSo,ySo,xSo,m4,vhe,$So,kSo,BO,SSo,RSo,PSo,g4,Fhe,BSo,ISo,IO,NSo,qSo,jSo,h4,The,DSo,GSo,NO,OSo,VSo,XSo,p4,Mhe,zSo,WSo,qO,QSo,HSo,USo,_4,Ehe,JSo,YSo,jO,KSo,ZSo,eRo,u4,Che,oRo,rRo,DO,tRo,aRo,nRo,b4,whe,sRo,lRo,GO,iRo,dRo,cRo,v4,Ahe,fRo,mRo,OO,gRo,hRo,pRo,F4,Lhe,_Ro,uRo,VO,bRo,vRo,FRo,T4,yhe,TRo,MRo,XO,ERo,CRo,wRo,M4,xhe,ARo,LRo,zO,yRo,xRo,$Ro,E4,$he,kRo,SRo,WO,RRo,PRo,BRo,C4,khe,IRo,NRo,QO,qRo,jRo,DRo,w4,She,GRo,ORo,HO,VRo,XRo,zRo,A4,Rhe,WRo,QRo,UO,HRo,URo,JRo,L4,Phe,YRo,KRo,JO,ZRo,ePo,oPo,y4,Bhe,rPo,tPo,YO,aPo,nPo,sPo,x4,Ihe,lPo,iPo,KO,dPo,cPo,fPo,$4,Nhe,mPo,gPo,ZO,hPo,pPo,_Po,k4,qhe,uPo,bPo,eV,vPo,FPo,TPo,S4,jhe,MPo,EPo,oV,CPo,wPo,APo,R4,Dhe,LPo,yPo,rV,xPo,$Po,kPo,P4,Ghe,SPo,RPo,tV,PPo,BPo,IPo,B4,Ohe,NPo,qPo,aV,jPo,DPo,GPo,I4,Vhe,OPo,VPo,nV,XPo,zPo,WPo,N4,QPo,Xhe,HPo,UPo,zhe,JPo,YPo,q4,ize,Ki,j4,Whe,r8,KPo,Qhe,ZPo,dze,Po,t8,eBo,Zi,oBo,sV,rBo,tBo,lV,aBo,nBo,sBo,a8,lBo,Hhe,iBo,dBo,cBo,ft,n8,fBo,Uhe,mBo,gBo,ed,hBo,Jhe,pBo,_Bo,iV,uBo,bBo,vBo,D4,FBo,eo,s8,TBo,Yhe,MBo,EBo,ja,CBo,Khe,wBo,ABo,Zhe,LBo,yBo,epe,xBo,$Bo,kBo,Q,G4,ope,SBo,RBo,dV,PBo,BBo,IBo,O4,rpe,NBo,qBo,cV,jBo,DBo,GBo,V4,tpe,OBo,VBo,fV,XBo,zBo,WBo,X4,ape,QBo,HBo,mV,UBo,JBo,YBo,z4,npe,KBo,ZBo,gV,eIo,oIo,rIo,W4,spe,tIo,aIo,hV,nIo,sIo,lIo,Q4,lpe,iIo,dIo,pV,cIo,fIo,mIo,H4,ipe,gIo,hIo,_V,pIo,_Io,uIo,U4,dpe,bIo,vIo,uV,FIo,TIo,MIo,J4,cpe,EIo,CIo,bV,wIo,AIo,LIo,Y4,fpe,yIo,xIo,vV,$Io,kIo,SIo,K4,mpe,RIo,PIo,FV,BIo,IIo,NIo,Z4,gpe,qIo,jIo,TV,DIo,GIo,OIo,e2,hpe,VIo,XIo,MV,zIo,WIo,QIo,o2,ppe,HIo,UIo,EV,JIo,YIo,KIo,r2,_pe,ZIo,eNo,CV,oNo,rNo,tNo,t2,upe,aNo,nNo,wV,sNo,lNo,iNo,a2,bpe,dNo,cNo,AV,fNo,mNo,gNo,n2,vpe,hNo,pNo,LV,_No,uNo,bNo,s2,Fpe,vNo,FNo,yV,TNo,MNo,ENo,l2,Tpe,CNo,wNo,xV,ANo,LNo,yNo,i2,Mpe,xNo,$No,$V,kNo,SNo,RNo,d2,Epe,PNo,BNo,kV,INo,NNo,qNo,c2,Cpe,jNo,DNo,SV,GNo,ONo,VNo,f2,wpe,XNo,zNo,RV,WNo,QNo,HNo,m2,Ape,UNo,JNo,PV,YNo,KNo,ZNo,g2,Lpe,eqo,oqo,BV,rqo,tqo,aqo,h2,ype,nqo,sqo,IV,lqo,iqo,dqo,p2,xpe,cqo,fqo,NV,mqo,gqo,hqo,_2,$pe,pqo,_qo,qV,uqo,bqo,vqo,u2,kpe,Fqo,Tqo,jV,Mqo,Eqo,Cqo,b2,Spe,wqo,Aqo,DV,Lqo,yqo,xqo,v2,Rpe,$qo,kqo,GV,Sqo,Rqo,Pqo,F2,Ppe,Bqo,Iqo,Bpe,Nqo,qqo,jqo,T2,Ipe,Dqo,Gqo,OV,Oqo,Vqo,Xqo,M2,Npe,zqo,Wqo,VV,Qqo,Hqo,Uqo,E2,qpe,Jqo,Yqo,XV,Kqo,Zqo,ejo,C2,jpe,ojo,rjo,zV,tjo,ajo,njo,w2,sjo,Dpe,ljo,ijo,Gpe,djo,cjo,A2,cze,od,L2,Ope,l8,fjo,Vpe,mjo,fze,Bo,i8,gjo,rd,hjo,WV,pjo,_jo,QV,ujo,bjo,vjo,d8,Fjo,Xpe,Tjo,Mjo,Ejo,mt,c8,Cjo,zpe,wjo,Ajo,td,Ljo,Wpe,yjo,xjo,HV,$jo,kjo,Sjo,y2,Rjo,oo,f8,Pjo,Qpe,Bjo,Ijo,Da,Njo,Hpe,qjo,jjo,Upe,Djo,Gjo,Jpe,Ojo,Vjo,Xjo,me,x2,Ype,zjo,Wjo,UV,Qjo,Hjo,Ujo,$2,Kpe,Jjo,Yjo,JV,Kjo,Zjo,eDo,k2,Zpe,oDo,rDo,YV,tDo,aDo,nDo,S2,e_e,sDo,lDo,KV,iDo,dDo,cDo,R2,o_e,fDo,mDo,ZV,gDo,hDo,pDo,P2,r_e,_Do,uDo,eX,bDo,vDo,FDo,B2,t_e,TDo,MDo,oX,EDo,CDo,wDo,I2,a_e,ADo,LDo,rX,yDo,xDo,$Do,N2,n_e,kDo,SDo,tX,RDo,PDo,BDo,q2,s_e,IDo,NDo,aX,qDo,jDo,DDo,j2,l_e,GDo,ODo,nX,VDo,XDo,zDo,D2,i_e,WDo,QDo,sX,HDo,UDo,JDo,G2,d_e,YDo,KDo,lX,ZDo,eGo,oGo,O2,c_e,rGo,tGo,iX,aGo,nGo,sGo,V2,f_e,lGo,iGo,dX,dGo,cGo,fGo,X2,m_e,mGo,gGo,cX,hGo,pGo,_Go,z2,g_e,uGo,bGo,fX,vGo,FGo,TGo,W2,h_e,MGo,EGo,mX,CGo,wGo,AGo,Q2,p_e,LGo,yGo,gX,xGo,$Go,kGo,H2,SGo,__e,RGo,PGo,u_e,BGo,IGo,U2,mze,ad,J2,b_e,m8,NGo,v_e,qGo,gze,Io,g8,jGo,nd,DGo,hX,GGo,OGo,pX,VGo,XGo,zGo,h8,WGo,F_e,QGo,HGo,UGo,gt,p8,JGo,T_e,YGo,KGo,sd,ZGo,M_e,eOo,oOo,_X,rOo,tOo,aOo,Y2,nOo,ro,_8,sOo,E_e,lOo,iOo,Ga,dOo,C_e,cOo,fOo,w_e,mOo,gOo,A_e,hOo,pOo,_Oo,B,K2,L_e,uOo,bOo,uX,vOo,FOo,TOo,Z2,y_e,MOo,EOo,bX,COo,wOo,AOo,eb,x_e,LOo,yOo,vX,xOo,$Oo,kOo,ob,$_e,SOo,ROo,FX,POo,BOo,IOo,rb,k_e,NOo,qOo,TX,jOo,DOo,GOo,tb,S_e,OOo,VOo,MX,XOo,zOo,WOo,ab,R_e,QOo,HOo,EX,UOo,JOo,YOo,nb,P_e,KOo,ZOo,CX,eVo,oVo,rVo,sb,B_e,tVo,aVo,wX,nVo,sVo,lVo,lb,I_e,iVo,dVo,AX,cVo,fVo,mVo,ib,N_e,gVo,hVo,LX,pVo,_Vo,uVo,db,q_e,bVo,vVo,yX,FVo,TVo,MVo,cb,j_e,EVo,CVo,xX,wVo,AVo,LVo,fb,D_e,yVo,xVo,$X,$Vo,kVo,SVo,mb,G_e,RVo,PVo,kX,BVo,IVo,NVo,gb,O_e,qVo,jVo,SX,DVo,GVo,OVo,hb,V_e,VVo,XVo,RX,zVo,WVo,QVo,pb,X_e,HVo,UVo,PX,JVo,YVo,KVo,_b,z_e,ZVo,eXo,BX,oXo,rXo,tXo,ub,W_e,aXo,nXo,IX,sXo,lXo,iXo,bb,Q_e,dXo,cXo,NX,fXo,mXo,gXo,vb,H_e,hXo,pXo,qX,_Xo,uXo,bXo,Fb,U_e,vXo,FXo,jX,TXo,MXo,EXo,Tb,J_e,CXo,wXo,DX,AXo,LXo,yXo,Mb,Y_e,xXo,$Xo,GX,kXo,SXo,RXo,Eb,K_e,PXo,BXo,OX,IXo,NXo,qXo,Cb,Z_e,jXo,DXo,VX,GXo,OXo,VXo,wb,eue,XXo,zXo,XX,WXo,QXo,HXo,Ab,oue,UXo,JXo,zX,YXo,KXo,ZXo,Lb,rue,ezo,ozo,WX,rzo,tzo,azo,yb,tue,nzo,szo,QX,lzo,izo,dzo,xb,aue,czo,fzo,HX,mzo,gzo,hzo,$b,nue,pzo,_zo,UX,uzo,bzo,vzo,kb,sue,Fzo,Tzo,JX,Mzo,Ezo,Czo,Sb,lue,wzo,Azo,YX,Lzo,yzo,xzo,Rb,iue,$zo,kzo,KX,Szo,Rzo,Pzo,Pb,due,Bzo,Izo,ZX,Nzo,qzo,jzo,Bb,cue,Dzo,Gzo,ez,Ozo,Vzo,Xzo,Ib,fue,zzo,Wzo,oz,Qzo,Hzo,Uzo,Nb,mue,Jzo,Yzo,rz,Kzo,Zzo,eWo,qb,gue,oWo,rWo,tz,tWo,aWo,nWo,jb,hue,sWo,lWo,az,iWo,dWo,cWo,Db,pue,fWo,mWo,nz,gWo,hWo,pWo,Gb,_ue,_Wo,uWo,sz,bWo,vWo,FWo,Ob,uue,TWo,MWo,lz,EWo,CWo,wWo,Vb,bue,AWo,LWo,iz,yWo,xWo,$Wo,Xb,vue,kWo,SWo,dz,RWo,PWo,BWo,zb,Fue,IWo,NWo,cz,qWo,jWo,DWo,Wb,Tue,GWo,OWo,fz,VWo,XWo,zWo,Qb,Mue,WWo,QWo,mz,HWo,UWo,JWo,Hb,Eue,YWo,KWo,gz,ZWo,eQo,oQo,Ub,rQo,Cue,tQo,aQo,wue,nQo,sQo,Jb,hze,ld,Yb,Aue,u8,lQo,Lue,iQo,pze,No,b8,dQo,id,cQo,hz,fQo,mQo,pz,gQo,hQo,pQo,v8,_Qo,yue,uQo,bQo,vQo,ht,F8,FQo,xue,TQo,MQo,dd,EQo,$ue,CQo,wQo,_z,AQo,LQo,yQo,Kb,xQo,to,T8,$Qo,kue,kQo,SQo,Oa,RQo,Sue,PQo,BQo,Rue,IQo,NQo,Pue,qQo,jQo,DQo,Z,Zb,Bue,GQo,OQo,uz,VQo,XQo,zQo,ev,Iue,WQo,QQo,bz,HQo,UQo,JQo,ov,Nue,YQo,KQo,vz,ZQo,eHo,oHo,rv,que,rHo,tHo,Fz,aHo,nHo,sHo,tv,jue,lHo,iHo,Tz,dHo,cHo,fHo,av,Due,mHo,gHo,Mz,hHo,pHo,_Ho,nv,Gue,uHo,bHo,Ez,vHo,FHo,THo,sv,Oue,MHo,EHo,Cz,CHo,wHo,AHo,lv,Vue,LHo,yHo,wz,xHo,$Ho,kHo,iv,Xue,SHo,RHo,Az,PHo,BHo,IHo,dv,zue,NHo,qHo,Lz,jHo,DHo,GHo,cv,Wue,OHo,VHo,yz,XHo,zHo,WHo,fv,Que,QHo,HHo,xz,UHo,JHo,YHo,mv,Hue,KHo,ZHo,$z,eUo,oUo,rUo,gv,Uue,tUo,aUo,kz,nUo,sUo,lUo,hv,Jue,iUo,dUo,Sz,cUo,fUo,mUo,pv,Yue,gUo,hUo,Rz,pUo,_Uo,uUo,_v,Kue,bUo,vUo,Pz,FUo,TUo,MUo,uv,Zue,EUo,CUo,Bz,wUo,AUo,LUo,bv,e1e,yUo,xUo,Iz,$Uo,kUo,SUo,vv,o1e,RUo,PUo,Nz,BUo,IUo,NUo,Fv,r1e,qUo,jUo,qz,DUo,GUo,OUo,Tv,t1e,VUo,XUo,jz,zUo,WUo,QUo,Mv,a1e,HUo,UUo,Dz,JUo,YUo,KUo,Ev,n1e,ZUo,eJo,Gz,oJo,rJo,tJo,Cv,s1e,aJo,nJo,Oz,sJo,lJo,iJo,wv,l1e,dJo,cJo,Vz,fJo,mJo,gJo,Av,i1e,hJo,pJo,Xz,_Jo,uJo,bJo,Lv,d1e,vJo,FJo,zz,TJo,MJo,EJo,yv,c1e,CJo,wJo,Wz,AJo,LJo,yJo,xv,xJo,f1e,$Jo,kJo,m1e,SJo,RJo,$v,_ze,cd,kv,g1e,M8,PJo,h1e,BJo,uze,qo,E8,IJo,fd,NJo,Qz,qJo,jJo,Hz,DJo,GJo,OJo,C8,VJo,p1e,XJo,zJo,WJo,pt,w8,QJo,_1e,HJo,UJo,md,JJo,u1e,YJo,KJo,Uz,ZJo,eYo,oYo,Sv,rYo,ao,A8,tYo,b1e,aYo,nYo,Va,sYo,v1e,lYo,iYo,F1e,dYo,cYo,T1e,fYo,mYo,gYo,jo,Rv,M1e,hYo,pYo,Jz,_Yo,uYo,bYo,Pv,E1e,vYo,FYo,Yz,TYo,MYo,EYo,Bv,C1e,CYo,wYo,Kz,AYo,LYo,yYo,Iv,w1e,xYo,$Yo,Zz,kYo,SYo,RYo,Nv,A1e,PYo,BYo,eW,IYo,NYo,qYo,qv,L1e,jYo,DYo,oW,GYo,OYo,VYo,jv,XYo,y1e,zYo,WYo,x1e,QYo,HYo,Dv,bze,gd,Gv,$1e,L8,UYo,k1e,JYo,vze,Do,y8,YYo,hd,KYo,rW,ZYo,eKo,tW,oKo,rKo,tKo,x8,aKo,S1e,nKo,sKo,lKo,_t,$8,iKo,R1e,dKo,cKo,pd,fKo,P1e,mKo,gKo,aW,hKo,pKo,_Ko,Ov,uKo,no,k8,bKo,B1e,vKo,FKo,Xa,TKo,I1e,MKo,EKo,N1e,CKo,wKo,q1e,AKo,LKo,yKo,U,Vv,j1e,xKo,$Ko,nW,kKo,SKo,RKo,Xv,D1e,PKo,BKo,sW,IKo,NKo,qKo,zv,G1e,jKo,DKo,lW,GKo,OKo,VKo,Wv,O1e,XKo,zKo,iW,WKo,QKo,HKo,Qv,V1e,UKo,JKo,dW,YKo,KKo,ZKo,Hv,X1e,eZo,oZo,cW,rZo,tZo,aZo,Uv,z1e,nZo,sZo,fW,lZo,iZo,dZo,Jv,W1e,cZo,fZo,mW,mZo,gZo,hZo,Yv,Q1e,pZo,_Zo,gW,uZo,bZo,vZo,Kv,H1e,FZo,TZo,hW,MZo,EZo,CZo,Zv,U1e,wZo,AZo,pW,LZo,yZo,xZo,e0,J1e,$Zo,kZo,_W,SZo,RZo,PZo,o0,Y1e,BZo,IZo,uW,NZo,qZo,jZo,r0,K1e,DZo,GZo,bW,OZo,VZo,XZo,t0,Z1e,zZo,WZo,vW,QZo,HZo,UZo,a0,e4e,JZo,YZo,FW,KZo,ZZo,eer,n0,o4e,oer,rer,TW,ter,aer,ner,s0,r4e,ser,ler,MW,ier,der,cer,l0,t4e,fer,mer,EW,ger,her,per,i0,a4e,_er,uer,CW,ber,ver,Fer,d0,n4e,Ter,Mer,wW,Eer,Cer,wer,c0,s4e,Aer,Ler,AW,yer,xer,$er,f0,l4e,ker,Ser,LW,Rer,Per,Ber,m0,i4e,Ier,Ner,yW,qer,jer,Der,g0,d4e,Ger,Oer,xW,Ver,Xer,zer,h0,c4e,Wer,Qer,$W,Her,Uer,Jer,p0,f4e,Yer,Ker,kW,Zer,eor,oor,_0,m4e,ror,tor,SW,aor,nor,sor,u0,g4e,lor,ior,RW,dor,cor,mor,b0,h4e,gor,hor,PW,por,_or,uor,v0,p4e,bor,vor,BW,For,Tor,Mor,F0,_4e,Eor,Cor,IW,wor,Aor,Lor,T0,u4e,yor,xor,NW,$or,kor,Sor,M0,b4e,Ror,Por,qW,Bor,Ior,Nor,E0,v4e,qor,jor,jW,Dor,Gor,Oor,C0,F4e,Vor,Xor,DW,zor,Wor,Qor,w0,Hor,T4e,Uor,Jor,M4e,Yor,Kor,A0,Fze,_d,L0,E4e,S8,Zor,C4e,err,Tze,Go,R8,orr,ud,rrr,GW,trr,arr,OW,nrr,srr,lrr,P8,irr,w4e,drr,crr,frr,ut,B8,mrr,A4e,grr,hrr,bd,prr,L4e,_rr,urr,VW,brr,vrr,Frr,y0,Trr,so,I8,Mrr,y4e,Err,Crr,za,wrr,x4e,Arr,Lrr,$4e,yrr,xrr,k4e,$rr,krr,Srr,V,x0,S4e,Rrr,Prr,XW,Brr,Irr,Nrr,$0,R4e,qrr,jrr,zW,Drr,Grr,Orr,k0,P4e,Vrr,Xrr,WW,zrr,Wrr,Qrr,S0,B4e,Hrr,Urr,QW,Jrr,Yrr,Krr,R0,I4e,Zrr,etr,HW,otr,rtr,ttr,P0,N4e,atr,ntr,UW,str,ltr,itr,B0,q4e,dtr,ctr,JW,ftr,mtr,gtr,I0,j4e,htr,ptr,YW,_tr,utr,btr,N0,D4e,vtr,Ftr,KW,Ttr,Mtr,Etr,q0,G4e,Ctr,wtr,ZW,Atr,Ltr,ytr,j0,O4e,xtr,$tr,eQ,ktr,Str,Rtr,D0,V4e,Ptr,Btr,oQ,Itr,Ntr,qtr,G0,X4e,jtr,Dtr,rQ,Gtr,Otr,Vtr,O0,z4e,Xtr,ztr,tQ,Wtr,Qtr,Htr,V0,W4e,Utr,Jtr,aQ,Ytr,Ktr,Ztr,X0,Q4e,ear,oar,nQ,rar,tar,aar,z0,H4e,nar,sar,sQ,lar,iar,dar,W0,U4e,car,far,lQ,mar,gar,har,Q0,J4e,par,_ar,iQ,uar,bar,Far,H0,Y4e,Tar,Mar,dQ,Ear,Car,war,U0,K4e,Aar,Lar,cQ,yar,xar,$ar,J0,Z4e,kar,Sar,fQ,Rar,Par,Bar,Y0,e2e,Iar,Nar,mQ,qar,jar,Dar,K0,o2e,Gar,Oar,gQ,Var,Xar,zar,Z0,r2e,War,Qar,hQ,Har,Uar,Jar,eF,t2e,Yar,Kar,pQ,Zar,enr,onr,oF,a2e,rnr,tnr,_Q,anr,nnr,snr,rF,n2e,lnr,inr,uQ,dnr,cnr,fnr,tF,s2e,mnr,gnr,bQ,hnr,pnr,_nr,aF,l2e,unr,bnr,vQ,vnr,Fnr,Tnr,nF,i2e,Mnr,Enr,FQ,Cnr,wnr,Anr,sF,d2e,Lnr,ynr,TQ,xnr,$nr,knr,lF,c2e,Snr,Rnr,MQ,Pnr,Bnr,Inr,iF,f2e,Nnr,qnr,EQ,jnr,Dnr,Gnr,dF,m2e,Onr,Vnr,CQ,Xnr,znr,Wnr,cF,g2e,Qnr,Hnr,wQ,Unr,Jnr,Ynr,fF,h2e,Knr,Znr,AQ,esr,osr,rsr,mF,p2e,tsr,asr,LQ,nsr,ssr,lsr,gF,_2e,isr,dsr,yQ,csr,fsr,msr,hF,u2e,gsr,hsr,xQ,psr,_sr,usr,pF,b2e,bsr,vsr,$Q,Fsr,Tsr,Msr,_F,v2e,Esr,Csr,kQ,wsr,Asr,Lsr,uF,ysr,F2e,xsr,$sr,T2e,ksr,Ssr,bF,Mze,vd,vF,M2e,N8,Rsr,E2e,Psr,Eze,Oo,q8,Bsr,Fd,Isr,SQ,Nsr,qsr,RQ,jsr,Dsr,Gsr,j8,Osr,C2e,Vsr,Xsr,zsr,bt,D8,Wsr,w2e,Qsr,Hsr,Td,Usr,A2e,Jsr,Ysr,PQ,Ksr,Zsr,elr,FF,olr,lo,G8,rlr,L2e,tlr,alr,Wa,nlr,y2e,slr,llr,x2e,ilr,dlr,$2e,clr,flr,mlr,k2e,TF,S2e,glr,hlr,BQ,plr,_lr,ulr,MF,blr,R2e,vlr,Flr,P2e,Tlr,Mlr,EF,Cze,Md,CF,B2e,O8,Elr,I2e,Clr,wze,Vo,V8,wlr,Ed,Alr,IQ,Llr,ylr,NQ,xlr,$lr,klr,X8,Slr,N2e,Rlr,Plr,Blr,vt,z8,Ilr,q2e,Nlr,qlr,Cd,jlr,j2e,Dlr,Glr,qQ,Olr,Vlr,Xlr,wF,zlr,io,W8,Wlr,D2e,Qlr,Hlr,Qa,Ulr,G2e,Jlr,Ylr,O2e,Klr,Zlr,V2e,eir,oir,rir,ve,AF,X2e,tir,air,jQ,nir,sir,lir,LF,z2e,iir,dir,DQ,cir,fir,mir,yF,W2e,gir,hir,GQ,pir,_ir,uir,xF,Q2e,bir,vir,OQ,Fir,Tir,Mir,Js,H2e,Eir,Cir,VQ,wir,Air,XQ,Lir,yir,xir,$F,U2e,$ir,kir,zQ,Sir,Rir,Pir,Ys,J2e,Bir,Iir,WQ,Nir,qir,QQ,jir,Dir,Gir,kF,Y2e,Oir,Vir,HQ,Xir,zir,Wir,Ft,K2e,Qir,Hir,UQ,Uir,Jir,JQ,Yir,Kir,YQ,Zir,edr,odr,SF,Z2e,rdr,tdr,KQ,adr,ndr,sdr,RF,ebe,ldr,idr,ZQ,ddr,cdr,fdr,PF,obe,mdr,gdr,eH,hdr,pdr,_dr,BF,rbe,udr,bdr,oH,vdr,Fdr,Tdr,IF,tbe,Mdr,Edr,rH,Cdr,wdr,Adr,NF,abe,Ldr,ydr,tH,xdr,$dr,kdr,qF,nbe,Sdr,Rdr,aH,Pdr,Bdr,Idr,jF,Ndr,sbe,qdr,jdr,lbe,Ddr,Gdr,DF,Aze,wd,GF,ibe,Q8,Odr,dbe,Vdr,Lze,Xo,H8,Xdr,Ad,zdr,nH,Wdr,Qdr,sH,Hdr,Udr,Jdr,U8,Ydr,cbe,Kdr,Zdr,ecr,Tt,J8,ocr,fbe,rcr,tcr,Ld,acr,mbe,ncr,scr,lH,lcr,icr,dcr,OF,ccr,co,Y8,fcr,gbe,mcr,gcr,Ha,hcr,hbe,pcr,_cr,pbe,ucr,bcr,_be,vcr,Fcr,Tcr,ube,VF,bbe,Mcr,Ecr,iH,Ccr,wcr,Acr,XF,Lcr,vbe,ycr,xcr,Fbe,$cr,kcr,zF,yze,yd,WF,Tbe,K8,Scr,Mbe,Rcr,xze,zo,Z8,Pcr,xd,Bcr,dH,Icr,Ncr,cH,qcr,jcr,Dcr,e9,Gcr,Ebe,Ocr,Vcr,Xcr,Mt,o9,zcr,Cbe,Wcr,Qcr,$d,Hcr,wbe,Ucr,Jcr,fH,Ycr,Kcr,Zcr,QF,efr,fo,r9,ofr,Abe,rfr,tfr,Ua,afr,Lbe,nfr,sfr,ybe,lfr,ifr,xbe,dfr,cfr,ffr,$be,HF,kbe,mfr,gfr,mH,hfr,pfr,_fr,UF,ufr,Sbe,bfr,vfr,Rbe,Ffr,Tfr,JF,$ze,kd,YF,Pbe,t9,Mfr,Bbe,Efr,kze,Wo,a9,Cfr,Sd,wfr,gH,Afr,Lfr,hH,yfr,xfr,$fr,n9,kfr,Ibe,Sfr,Rfr,Pfr,Et,s9,Bfr,Nbe,Ifr,Nfr,Rd,qfr,qbe,jfr,Dfr,pH,Gfr,Ofr,Vfr,KF,Xfr,mo,l9,zfr,jbe,Wfr,Qfr,Ja,Hfr,Dbe,Ufr,Jfr,Gbe,Yfr,Kfr,Obe,Zfr,emr,omr,Pe,ZF,Vbe,rmr,tmr,_H,amr,nmr,smr,e6,Xbe,lmr,imr,uH,dmr,cmr,fmr,o6,zbe,mmr,gmr,bH,hmr,pmr,_mr,r6,Wbe,umr,bmr,vH,vmr,Fmr,Tmr,t6,Qbe,Mmr,Emr,FH,Cmr,wmr,Amr,a6,Hbe,Lmr,ymr,TH,xmr,$mr,kmr,n6,Ube,Smr,Rmr,MH,Pmr,Bmr,Imr,s6,Jbe,Nmr,qmr,EH,jmr,Dmr,Gmr,l6,Ybe,Omr,Vmr,CH,Xmr,zmr,Wmr,i6,Qmr,Kbe,Hmr,Umr,Zbe,Jmr,Ymr,d6,Sze,Pd,c6,eve,i9,Kmr,ove,Zmr,Rze,Qo,d9,egr,Bd,ogr,wH,rgr,tgr,AH,agr,ngr,sgr,c9,lgr,rve,igr,dgr,cgr,Ct,f9,fgr,tve,mgr,ggr,Id,hgr,ave,pgr,_gr,LH,ugr,bgr,vgr,f6,Fgr,go,m9,Tgr,nve,Mgr,Egr,Ya,Cgr,sve,wgr,Agr,lve,Lgr,ygr,ive,xgr,$gr,kgr,rt,m6,dve,Sgr,Rgr,yH,Pgr,Bgr,Igr,g6,cve,Ngr,qgr,xH,jgr,Dgr,Ggr,h6,fve,Ogr,Vgr,$H,Xgr,zgr,Wgr,p6,mve,Qgr,Hgr,kH,Ugr,Jgr,Ygr,_6,gve,Kgr,Zgr,SH,ehr,ohr,rhr,u6,thr,hve,ahr,nhr,pve,shr,lhr,b6,Pze,Nd,v6,_ve,g9,ihr,uve,dhr,Bze,Ho,h9,chr,qd,fhr,RH,mhr,ghr,PH,hhr,phr,_hr,p9,uhr,bve,bhr,vhr,Fhr,wt,_9,Thr,vve,Mhr,Ehr,jd,Chr,Fve,whr,Ahr,BH,Lhr,yhr,xhr,F6,$hr,ho,u9,khr,Tve,Shr,Rhr,Ka,Phr,Mve,Bhr,Ihr,Eve,Nhr,qhr,Cve,jhr,Dhr,Ghr,Le,T6,wve,Ohr,Vhr,IH,Xhr,zhr,Whr,M6,Ave,Qhr,Hhr,NH,Uhr,Jhr,Yhr,E6,Lve,Khr,Zhr,qH,epr,opr,rpr,C6,yve,tpr,apr,jH,npr,spr,lpr,w6,xve,ipr,dpr,DH,cpr,fpr,mpr,A6,$ve,gpr,hpr,GH,ppr,_pr,upr,L6,kve,bpr,vpr,OH,Fpr,Tpr,Mpr,y6,Sve,Epr,Cpr,VH,wpr,Apr,Lpr,x6,Rve,ypr,xpr,XH,$pr,kpr,Spr,$6,Pve,Rpr,Ppr,zH,Bpr,Ipr,Npr,k6,qpr,Bve,jpr,Dpr,Ive,Gpr,Opr,S6,Ize,Dd,R6,Nve,b9,Vpr,qve,Xpr,Nze,Uo,v9,zpr,Gd,Wpr,WH,Qpr,Hpr,QH,Upr,Jpr,Ypr,F9,Kpr,jve,Zpr,e_r,o_r,At,T9,r_r,Dve,t_r,a_r,Od,n_r,Gve,s_r,l_r,HH,i_r,d_r,c_r,P6,f_r,po,M9,m_r,Ove,g_r,h_r,Za,p_r,Vve,__r,u_r,Xve,b_r,v_r,zve,F_r,T_r,M_r,E9,B6,Wve,E_r,C_r,UH,w_r,A_r,L_r,I6,Qve,y_r,x_r,JH,$_r,k_r,S_r,N6,R_r,Hve,P_r,B_r,Uve,I_r,N_r,q6,qze,Vd,j6,Jve,C9,q_r,Yve,j_r,jze,Jo,w9,D_r,Xd,G_r,YH,O_r,V_r,KH,X_r,z_r,W_r,A9,Q_r,Kve,H_r,U_r,J_r,Lt,L9,Y_r,Zve,K_r,Z_r,zd,eur,e0e,our,rur,ZH,tur,aur,nur,D6,sur,_o,y9,lur,o0e,iur,dur,en,cur,r0e,fur,mur,t0e,gur,hur,a0e,pur,_ur,uur,tt,G6,n0e,bur,vur,eU,Fur,Tur,Mur,O6,s0e,Eur,Cur,oU,wur,Aur,Lur,V6,l0e,yur,xur,rU,$ur,kur,Sur,X6,i0e,Rur,Pur,tU,Bur,Iur,Nur,z6,d0e,qur,jur,aU,Dur,Gur,Our,W6,Vur,c0e,Xur,zur,f0e,Wur,Qur,Q6,Dze,Wd,H6,m0e,x9,Hur,g0e,Uur,Gze,Yo,$9,Jur,Qd,Yur,nU,Kur,Zur,sU,e1r,o1r,r1r,k9,t1r,h0e,a1r,n1r,s1r,yt,S9,l1r,p0e,i1r,d1r,Hd,c1r,_0e,f1r,m1r,lU,g1r,h1r,p1r,U6,_1r,uo,R9,u1r,u0e,b1r,v1r,on,F1r,b0e,T1r,M1r,v0e,E1r,C1r,F0e,w1r,A1r,L1r,Ud,J6,T0e,y1r,x1r,iU,$1r,k1r,S1r,Y6,M0e,R1r,P1r,dU,B1r,I1r,N1r,K6,E0e,q1r,j1r,cU,D1r,G1r,O1r,Z6,V1r,C0e,X1r,z1r,w0e,W1r,Q1r,eT,Oze,Jd,oT,A0e,P9,H1r,L0e,U1r,Vze,Ko,B9,J1r,Yd,Y1r,fU,K1r,Z1r,mU,e4r,o4r,r4r,I9,t4r,y0e,a4r,n4r,s4r,xt,N9,l4r,x0e,i4r,d4r,Kd,c4r,$0e,f4r,m4r,gU,g4r,h4r,p4r,rT,_4r,bo,q9,u4r,k0e,b4r,v4r,rn,F4r,S0e,T4r,M4r,R0e,E4r,C4r,P0e,w4r,A4r,L4r,j9,tT,B0e,y4r,x4r,hU,$4r,k4r,S4r,aT,I0e,R4r,P4r,pU,B4r,I4r,N4r,nT,q4r,N0e,j4r,D4r,q0e,G4r,O4r,sT,Xze,Zd,lT,j0e,D9,V4r,D0e,X4r,zze,Zo,G9,z4r,ec,W4r,_U,Q4r,H4r,uU,U4r,J4r,Y4r,O9,K4r,G0e,Z4r,e2r,o2r,$t,V9,r2r,O0e,t2r,a2r,oc,n2r,V0e,s2r,l2r,bU,i2r,d2r,c2r,iT,f2r,vo,X9,m2r,X0e,g2r,h2r,tn,p2r,z0e,_2r,u2r,W0e,b2r,v2r,Q0e,F2r,T2r,M2r,H0e,dT,U0e,E2r,C2r,vU,w2r,A2r,L2r,cT,y2r,J0e,x2r,$2r,Y0e,k2r,S2r,fT,Wze,rc,mT,K0e,z9,R2r,Z0e,P2r,Qze,er,W9,B2r,tc,I2r,FU,N2r,q2r,TU,j2r,D2r,G2r,Q9,O2r,eFe,V2r,X2r,z2r,kt,H9,W2r,oFe,Q2r,H2r,ac,U2r,rFe,J2r,Y2r,MU,K2r,Z2r,ebr,gT,obr,Fo,U9,rbr,tFe,tbr,abr,an,nbr,aFe,sbr,lbr,nFe,ibr,dbr,sFe,cbr,fbr,mbr,at,hT,lFe,gbr,hbr,EU,pbr,_br,ubr,pT,iFe,bbr,vbr,CU,Fbr,Tbr,Mbr,_T,dFe,Ebr,Cbr,wU,wbr,Abr,Lbr,uT,cFe,ybr,xbr,AU,$br,kbr,Sbr,bT,fFe,Rbr,Pbr,LU,Bbr,Ibr,Nbr,vT,qbr,mFe,jbr,Dbr,gFe,Gbr,Obr,FT,Hze,nc,TT,hFe,J9,Vbr,pFe,Xbr,Uze,or,Y9,zbr,sc,Wbr,yU,Qbr,Hbr,xU,Ubr,Jbr,Ybr,K9,Kbr,_Fe,Zbr,evr,ovr,St,Z9,rvr,uFe,tvr,avr,lc,nvr,bFe,svr,lvr,$U,ivr,dvr,cvr,MT,fvr,To,ex,mvr,vFe,gvr,hvr,nn,pvr,FFe,_vr,uvr,TFe,bvr,vvr,MFe,Fvr,Tvr,Mvr,EFe,ET,CFe,Evr,Cvr,kU,wvr,Avr,Lvr,CT,yvr,wFe,xvr,$vr,AFe,kvr,Svr,wT,Jze,ic,AT,LFe,ox,Rvr,yFe,Pvr,Yze,rr,rx,Bvr,dc,Ivr,SU,Nvr,qvr,RU,jvr,Dvr,Gvr,tx,Ovr,xFe,Vvr,Xvr,zvr,Rt,ax,Wvr,$Fe,Qvr,Hvr,cc,Uvr,kFe,Jvr,Yvr,PU,Kvr,Zvr,e0r,LT,o0r,$r,nx,r0r,SFe,t0r,a0r,sn,n0r,RFe,s0r,l0r,PFe,i0r,d0r,BFe,c0r,f0r,m0r,I,yT,IFe,g0r,h0r,BU,p0r,_0r,u0r,xT,NFe,b0r,v0r,IU,F0r,T0r,M0r,$T,qFe,E0r,C0r,NU,w0r,A0r,L0r,kT,jFe,y0r,x0r,qU,$0r,k0r,S0r,ST,DFe,R0r,P0r,jU,B0r,I0r,N0r,RT,GFe,q0r,j0r,DU,D0r,G0r,O0r,PT,OFe,V0r,X0r,GU,z0r,W0r,Q0r,BT,VFe,H0r,U0r,OU,J0r,Y0r,K0r,IT,XFe,Z0r,eFr,VU,oFr,rFr,tFr,NT,zFe,aFr,nFr,XU,sFr,lFr,iFr,qT,WFe,dFr,cFr,zU,fFr,mFr,gFr,jT,QFe,hFr,pFr,WU,_Fr,uFr,bFr,DT,HFe,vFr,FFr,QU,TFr,MFr,EFr,GT,UFe,CFr,wFr,HU,AFr,LFr,yFr,OT,JFe,xFr,$Fr,UU,kFr,SFr,RFr,VT,YFe,PFr,BFr,JU,IFr,NFr,qFr,XT,KFe,jFr,DFr,YU,GFr,OFr,VFr,zT,ZFe,XFr,zFr,KU,WFr,QFr,HFr,Ks,e6e,UFr,JFr,ZU,YFr,KFr,eJ,ZFr,e6r,o6r,WT,o6e,r6r,t6r,oJ,a6r,n6r,s6r,QT,r6e,l6r,i6r,rJ,d6r,c6r,f6r,HT,t6e,m6r,g6r,tJ,h6r,p6r,_6r,UT,a6e,u6r,b6r,aJ,v6r,F6r,T6r,JT,n6e,M6r,E6r,nJ,C6r,w6r,A6r,YT,s6e,L6r,y6r,sJ,x6r,$6r,k6r,KT,l6e,S6r,R6r,lJ,P6r,B6r,I6r,ZT,i6e,N6r,q6r,iJ,j6r,D6r,G6r,e7,d6e,O6r,V6r,dJ,X6r,z6r,W6r,o7,c6e,Q6r,H6r,cJ,U6r,J6r,Y6r,r7,f6e,K6r,Z6r,fJ,eTr,oTr,rTr,t7,m6e,tTr,aTr,mJ,nTr,sTr,lTr,a7,g6e,iTr,dTr,gJ,cTr,fTr,mTr,n7,h6e,gTr,hTr,hJ,pTr,_Tr,uTr,s7,p6e,bTr,vTr,pJ,FTr,TTr,MTr,l7,_6e,ETr,CTr,_J,wTr,ATr,LTr,i7,u6e,yTr,xTr,uJ,$Tr,kTr,STr,d7,b6e,RTr,PTr,bJ,BTr,ITr,NTr,c7,v6e,qTr,jTr,vJ,DTr,GTr,OTr,f7,F6e,VTr,XTr,FJ,zTr,WTr,QTr,m7,T6e,HTr,UTr,TJ,JTr,YTr,KTr,g7,M6e,ZTr,e7r,MJ,o7r,r7r,t7r,h7,E6e,a7r,n7r,EJ,s7r,l7r,i7r,p7,C6e,d7r,c7r,CJ,f7r,m7r,g7r,_7,w6e,h7r,p7r,wJ,_7r,u7r,b7r,u7,A6e,v7r,F7r,AJ,T7r,M7r,E7r,b7,L6e,C7r,w7r,LJ,A7r,L7r,y7r,v7,y6e,x7r,$7r,yJ,k7r,S7r,R7r,F7,x6e,P7r,B7r,xJ,I7r,N7r,q7r,T7,$6e,j7r,D7r,$J,G7r,O7r,V7r,M7,k6e,X7r,z7r,kJ,W7r,Q7r,H7r,E7,S6e,U7r,J7r,SJ,Y7r,K7r,Z7r,C7,Kze,fc,w7,R6e,sx,eMr,P6e,oMr,Zze,tr,lx,rMr,mc,tMr,RJ,aMr,nMr,PJ,sMr,lMr,iMr,ix,dMr,B6e,cMr,fMr,mMr,Pt,dx,gMr,I6e,hMr,pMr,gc,_Mr,N6e,uMr,bMr,BJ,vMr,FMr,TMr,A7,MMr,kr,cx,EMr,q6e,CMr,wMr,ln,AMr,j6e,LMr,yMr,D6e,xMr,$Mr,G6e,kMr,SMr,RMr,se,L7,O6e,PMr,BMr,IJ,IMr,NMr,qMr,y7,V6e,jMr,DMr,NJ,GMr,OMr,VMr,x7,X6e,XMr,zMr,qJ,WMr,QMr,HMr,$7,z6e,UMr,JMr,jJ,YMr,KMr,ZMr,k7,W6e,eEr,oEr,DJ,rEr,tEr,aEr,S7,Q6e,nEr,sEr,GJ,lEr,iEr,dEr,R7,H6e,cEr,fEr,OJ,mEr,gEr,hEr,P7,U6e,pEr,_Er,VJ,uEr,bEr,vEr,B7,J6e,FEr,TEr,XJ,MEr,EEr,CEr,I7,Y6e,wEr,AEr,zJ,LEr,yEr,xEr,N7,K6e,$Er,kEr,WJ,SEr,REr,PEr,q7,Z6e,BEr,IEr,QJ,NEr,qEr,jEr,j7,eTe,DEr,GEr,HJ,OEr,VEr,XEr,D7,oTe,zEr,WEr,UJ,QEr,HEr,UEr,G7,rTe,JEr,YEr,JJ,KEr,ZEr,eCr,O7,tTe,oCr,rCr,YJ,tCr,aCr,nCr,V7,aTe,sCr,lCr,KJ,iCr,dCr,cCr,X7,nTe,fCr,mCr,ZJ,gCr,hCr,pCr,z7,sTe,_Cr,uCr,eY,bCr,vCr,FCr,W7,lTe,TCr,MCr,oY,ECr,CCr,wCr,Q7,iTe,ACr,LCr,rY,yCr,xCr,$Cr,H7,dTe,kCr,SCr,tY,RCr,PCr,BCr,U7,cTe,ICr,NCr,aY,qCr,jCr,DCr,J7,eWe,hc,Y7,fTe,fx,GCr,mTe,OCr,oWe,ar,mx,VCr,pc,XCr,nY,zCr,WCr,sY,QCr,HCr,UCr,gx,JCr,gTe,YCr,KCr,ZCr,Bt,hx,e5r,hTe,o5r,r5r,_c,t5r,pTe,a5r,n5r,lY,s5r,l5r,i5r,K7,d5r,Sr,px,c5r,_Te,f5r,m5r,dn,g5r,uTe,h5r,p5r,bTe,_5r,u5r,vTe,b5r,v5r,F5r,Me,Z7,FTe,T5r,M5r,iY,E5r,C5r,w5r,eM,TTe,A5r,L5r,dY,y5r,x5r,$5r,oM,MTe,k5r,S5r,cY,R5r,P5r,B5r,rM,ETe,I5r,N5r,fY,q5r,j5r,D5r,tM,CTe,G5r,O5r,mY,V5r,X5r,z5r,aM,wTe,W5r,Q5r,gY,H5r,U5r,J5r,nM,ATe,Y5r,K5r,hY,Z5r,e3r,o3r,sM,LTe,r3r,t3r,pY,a3r,n3r,s3r,lM,yTe,l3r,i3r,_Y,d3r,c3r,f3r,iM,xTe,m3r,g3r,uY,h3r,p3r,_3r,dM,$Te,u3r,b3r,bY,v3r,F3r,T3r,cM,kTe,M3r,E3r,vY,C3r,w3r,A3r,fM,STe,L3r,y3r,FY,x3r,$3r,k3r,mM,rWe,uc,gM,RTe,_x,S3r,PTe,R3r,tWe,nr,ux,P3r,bc,B3r,TY,I3r,N3r,MY,q3r,j3r,D3r,bx,G3r,BTe,O3r,V3r,X3r,It,vx,z3r,ITe,W3r,Q3r,vc,H3r,NTe,U3r,J3r,EY,Y3r,K3r,Z3r,hM,ewr,Rr,Fx,owr,qTe,rwr,twr,cn,awr,jTe,nwr,swr,DTe,lwr,iwr,GTe,dwr,cwr,fwr,Ve,pM,OTe,mwr,gwr,CY,hwr,pwr,_wr,_M,VTe,uwr,bwr,wY,vwr,Fwr,Twr,Zs,XTe,Mwr,Ewr,AY,Cwr,wwr,LY,Awr,Lwr,ywr,uM,zTe,xwr,$wr,yY,kwr,Swr,Rwr,bM,WTe,Pwr,Bwr,xY,Iwr,Nwr,qwr,vM,QTe,jwr,Dwr,$Y,Gwr,Owr,Vwr,FM,HTe,Xwr,zwr,kY,Wwr,Qwr,Hwr,TM,UTe,Uwr,Jwr,SY,Ywr,Kwr,Zwr,MM,aWe,Fc,EM,JTe,Tx,eAr,YTe,oAr,nWe,sr,Mx,rAr,Tc,tAr,RY,aAr,nAr,PY,sAr,lAr,iAr,Ex,dAr,KTe,cAr,fAr,mAr,Nt,Cx,gAr,ZTe,hAr,pAr,Mc,_Ar,e7e,uAr,bAr,BY,vAr,FAr,TAr,CM,MAr,Pr,wx,EAr,o7e,CAr,wAr,fn,AAr,r7e,LAr,yAr,t7e,xAr,$Ar,a7e,kAr,SAr,RAr,ie,wM,n7e,PAr,BAr,IY,IAr,NAr,qAr,AM,s7e,jAr,DAr,NY,GAr,OAr,VAr,LM,l7e,XAr,zAr,qY,WAr,QAr,HAr,yM,i7e,UAr,JAr,jY,YAr,KAr,ZAr,xM,d7e,eLr,oLr,DY,rLr,tLr,aLr,$M,c7e,nLr,sLr,GY,lLr,iLr,dLr,kM,f7e,cLr,fLr,OY,mLr,gLr,hLr,SM,m7e,pLr,_Lr,VY,uLr,bLr,vLr,RM,g7e,FLr,TLr,XY,MLr,ELr,CLr,PM,h7e,wLr,ALr,zY,LLr,yLr,xLr,BM,p7e,$Lr,kLr,WY,SLr,RLr,PLr,IM,_7e,BLr,ILr,QY,NLr,qLr,jLr,NM,u7e,DLr,GLr,HY,OLr,VLr,XLr,qM,b7e,zLr,WLr,UY,QLr,HLr,ULr,jM,v7e,JLr,YLr,JY,KLr,ZLr,eyr,DM,F7e,oyr,ryr,YY,tyr,ayr,nyr,GM,T7e,syr,lyr,KY,iyr,dyr,cyr,OM,M7e,fyr,myr,ZY,gyr,hyr,pyr,VM,E7e,_yr,uyr,eK,byr,vyr,Fyr,XM,C7e,Tyr,Myr,oK,Eyr,Cyr,wyr,zM,sWe,Ec,WM,w7e,Ax,Ayr,A7e,Lyr,lWe,lr,Lx,yyr,Cc,xyr,rK,$yr,kyr,tK,Syr,Ryr,Pyr,yx,Byr,L7e,Iyr,Nyr,qyr,qt,xx,jyr,y7e,Dyr,Gyr,wc,Oyr,x7e,Vyr,Xyr,aK,zyr,Wyr,Qyr,QM,Hyr,Br,$x,Uyr,$7e,Jyr,Yyr,mn,Kyr,k7e,Zyr,e8r,S7e,o8r,r8r,R7e,t8r,a8r,n8r,ye,HM,P7e,s8r,l8r,nK,i8r,d8r,c8r,UM,B7e,f8r,m8r,sK,g8r,h8r,p8r,JM,I7e,_8r,u8r,lK,b8r,v8r,F8r,YM,N7e,T8r,M8r,iK,E8r,C8r,w8r,KM,q7e,A8r,L8r,dK,y8r,x8r,$8r,ZM,j7e,k8r,S8r,cK,R8r,P8r,B8r,eE,D7e,I8r,N8r,fK,q8r,j8r,D8r,oE,G7e,G8r,O8r,mK,V8r,X8r,z8r,rE,O7e,W8r,Q8r,gK,H8r,U8r,J8r,tE,V7e,Y8r,K8r,hK,Z8r,e9r,o9r,aE,iWe,Ac,nE,X7e,kx,r9r,z7e,t9r,dWe,ir,Sx,a9r,Lc,n9r,pK,s9r,l9r,_K,i9r,d9r,c9r,Rx,f9r,W7e,m9r,g9r,h9r,jt,Px,p9r,Q7e,_9r,u9r,yc,b9r,H7e,v9r,F9r,uK,T9r,M9r,E9r,sE,C9r,Ir,Bx,w9r,U7e,A9r,L9r,gn,y9r,J7e,x9r,$9r,Y7e,k9r,S9r,K7e,R9r,P9r,B9r,te,lE,Z7e,I9r,N9r,bK,q9r,j9r,D9r,iE,eMe,G9r,O9r,vK,V9r,X9r,z9r,dE,oMe,W9r,Q9r,FK,H9r,U9r,J9r,cE,rMe,Y9r,K9r,TK,Z9r,exr,oxr,fE,tMe,rxr,txr,MK,axr,nxr,sxr,mE,aMe,lxr,ixr,EK,dxr,cxr,fxr,gE,nMe,mxr,gxr,CK,hxr,pxr,_xr,hE,sMe,uxr,bxr,wK,vxr,Fxr,Txr,pE,lMe,Mxr,Exr,AK,Cxr,wxr,Axr,_E,iMe,Lxr,yxr,LK,xxr,$xr,kxr,uE,dMe,Sxr,Rxr,yK,Pxr,Bxr,Ixr,bE,cMe,Nxr,qxr,xK,jxr,Dxr,Gxr,vE,fMe,Oxr,Vxr,$K,Xxr,zxr,Wxr,FE,mMe,Qxr,Hxr,kK,Uxr,Jxr,Yxr,TE,gMe,Kxr,Zxr,SK,e$r,o$r,r$r,ME,hMe,t$r,a$r,RK,n$r,s$r,l$r,EE,pMe,i$r,d$r,PK,c$r,f$r,m$r,CE,_Me,g$r,h$r,BK,p$r,_$r,u$r,wE,uMe,b$r,v$r,IK,F$r,T$r,M$r,AE,bMe,E$r,C$r,NK,w$r,A$r,L$r,LE,vMe,y$r,x$r,qK,$$r,k$r,S$r,yE,FMe,R$r,P$r,jK,B$r,I$r,N$r,xE,TMe,q$r,j$r,DK,D$r,G$r,O$r,$E,MMe,V$r,X$r,GK,z$r,W$r,Q$r,kE,EMe,H$r,U$r,OK,J$r,Y$r,K$r,SE,CMe,Z$r,ekr,VK,okr,rkr,tkr,RE,cWe,xc,PE,wMe,Ix,akr,AMe,nkr,fWe,dr,Nx,skr,$c,lkr,XK,ikr,dkr,zK,ckr,fkr,mkr,qx,gkr,LMe,hkr,pkr,_kr,Dt,jx,ukr,yMe,bkr,vkr,kc,Fkr,xMe,Tkr,Mkr,WK,Ekr,Ckr,wkr,BE,Akr,Nr,Dx,Lkr,$Me,ykr,xkr,hn,$kr,kMe,kkr,Skr,SMe,Rkr,Pkr,RMe,Bkr,Ikr,Nkr,be,IE,PMe,qkr,jkr,QK,Dkr,Gkr,Okr,NE,BMe,Vkr,Xkr,HK,zkr,Wkr,Qkr,qE,IMe,Hkr,Ukr,UK,Jkr,Ykr,Kkr,jE,NMe,Zkr,eSr,JK,oSr,rSr,tSr,DE,qMe,aSr,nSr,YK,sSr,lSr,iSr,GE,jMe,dSr,cSr,KK,fSr,mSr,gSr,OE,DMe,hSr,pSr,ZK,_Sr,uSr,bSr,VE,GMe,vSr,FSr,eZ,TSr,MSr,ESr,XE,OMe,CSr,wSr,oZ,ASr,LSr,ySr,zE,VMe,xSr,$Sr,rZ,kSr,SSr,RSr,WE,XMe,PSr,BSr,tZ,ISr,NSr,qSr,QE,zMe,jSr,DSr,aZ,GSr,OSr,VSr,HE,WMe,XSr,zSr,nZ,WSr,QSr,HSr,UE,QMe,USr,JSr,sZ,YSr,KSr,ZSr,JE,HMe,eRr,oRr,lZ,rRr,tRr,aRr,YE,UMe,nRr,sRr,iZ,lRr,iRr,dRr,KE,JMe,cRr,fRr,dZ,mRr,gRr,hRr,ZE,mWe,Sc,eC,YMe,Gx,pRr,KMe,_Rr,gWe,cr,Ox,uRr,Rc,bRr,cZ,vRr,FRr,fZ,TRr,MRr,ERr,Vx,CRr,ZMe,wRr,ARr,LRr,Gt,Xx,yRr,eEe,xRr,$Rr,Pc,kRr,oEe,SRr,RRr,mZ,PRr,BRr,IRr,oC,NRr,qr,zx,qRr,rEe,jRr,DRr,pn,GRr,tEe,ORr,VRr,aEe,XRr,zRr,nEe,WRr,QRr,HRr,Wx,rC,sEe,URr,JRr,gZ,YRr,KRr,ZRr,tC,lEe,ePr,oPr,hZ,rPr,tPr,aPr,aC,hWe,Bc,nC,iEe,Qx,nPr,dEe,sPr,pWe,fr,Hx,lPr,Ic,iPr,pZ,dPr,cPr,_Z,fPr,mPr,gPr,Ux,hPr,cEe,pPr,_Pr,uPr,Ot,Jx,bPr,fEe,vPr,FPr,Nc,TPr,mEe,MPr,EPr,uZ,CPr,wPr,APr,sC,LPr,jr,Yx,yPr,gEe,xPr,$Pr,_n,kPr,hEe,SPr,RPr,pEe,PPr,BPr,_Ee,IPr,NPr,qPr,uEe,lC,bEe,jPr,DPr,bZ,GPr,OPr,VPr,iC,_We,qc,dC,vEe,Kx,XPr,FEe,zPr,uWe,mr,Zx,WPr,jc,QPr,vZ,HPr,UPr,FZ,JPr,YPr,KPr,e$,ZPr,TEe,eBr,oBr,rBr,Vt,o$,tBr,MEe,aBr,nBr,Dc,sBr,EEe,lBr,iBr,TZ,dBr,cBr,fBr,cC,mBr,Dr,r$,gBr,CEe,hBr,pBr,un,_Br,wEe,uBr,bBr,AEe,vBr,FBr,LEe,TBr,MBr,EBr,de,fC,yEe,CBr,wBr,MZ,ABr,LBr,yBr,mC,xEe,xBr,$Br,EZ,kBr,SBr,RBr,gC,$Ee,PBr,BBr,CZ,IBr,NBr,qBr,hC,kEe,jBr,DBr,wZ,GBr,OBr,VBr,pC,SEe,XBr,zBr,AZ,WBr,QBr,HBr,_C,REe,UBr,JBr,LZ,YBr,KBr,ZBr,uC,PEe,eIr,oIr,yZ,rIr,tIr,aIr,bC,BEe,nIr,sIr,xZ,lIr,iIr,dIr,vC,IEe,cIr,fIr,$Z,mIr,gIr,hIr,FC,NEe,pIr,_Ir,kZ,uIr,bIr,vIr,TC,qEe,FIr,TIr,SZ,MIr,EIr,CIr,MC,jEe,wIr,AIr,RZ,LIr,yIr,xIr,EC,DEe,$Ir,kIr,PZ,SIr,RIr,PIr,CC,GEe,BIr,IIr,BZ,NIr,qIr,jIr,wC,OEe,DIr,GIr,IZ,OIr,VIr,XIr,AC,VEe,zIr,WIr,NZ,QIr,HIr,UIr,LC,XEe,JIr,YIr,qZ,KIr,ZIr,eNr,yC,zEe,oNr,rNr,jZ,tNr,aNr,nNr,xC,WEe,sNr,lNr,DZ,iNr,dNr,cNr,$C,QEe,fNr,mNr,GZ,gNr,hNr,pNr,kC,bWe,Gc,SC,HEe,t$,_Nr,UEe,uNr,vWe,gr,a$,bNr,Oc,vNr,OZ,FNr,TNr,VZ,MNr,ENr,CNr,n$,wNr,JEe,ANr,LNr,yNr,Xt,s$,xNr,YEe,$Nr,kNr,Vc,SNr,KEe,RNr,PNr,XZ,BNr,INr,NNr,RC,qNr,Gr,l$,jNr,ZEe,DNr,GNr,bn,ONr,eCe,VNr,XNr,oCe,zNr,WNr,rCe,QNr,HNr,UNr,ce,PC,tCe,JNr,YNr,zZ,KNr,ZNr,eqr,BC,aCe,oqr,rqr,WZ,tqr,aqr,nqr,IC,nCe,sqr,lqr,QZ,iqr,dqr,cqr,NC,sCe,fqr,mqr,HZ,gqr,hqr,pqr,qC,lCe,_qr,uqr,UZ,bqr,vqr,Fqr,jC,iCe,Tqr,Mqr,JZ,Eqr,Cqr,wqr,DC,dCe,Aqr,Lqr,YZ,yqr,xqr,$qr,GC,cCe,kqr,Sqr,KZ,Rqr,Pqr,Bqr,OC,fCe,Iqr,Nqr,ZZ,qqr,jqr,Dqr,VC,mCe,Gqr,Oqr,eee,Vqr,Xqr,zqr,XC,gCe,Wqr,Qqr,oee,Hqr,Uqr,Jqr,zC,hCe,Yqr,Kqr,ree,Zqr,ejr,ojr,WC,pCe,rjr,tjr,tee,ajr,njr,sjr,QC,_Ce,ljr,ijr,aee,djr,cjr,fjr,HC,uCe,mjr,gjr,nee,hjr,pjr,_jr,UC,bCe,ujr,bjr,see,vjr,Fjr,Tjr,JC,vCe,Mjr,Ejr,lee,Cjr,wjr,Ajr,YC,FCe,Ljr,yjr,iee,xjr,$jr,kjr,KC,TCe,Sjr,Rjr,dee,Pjr,Bjr,Ijr,ZC,MCe,Njr,qjr,cee,jjr,Djr,Gjr,e5,FWe,Xc,o5,ECe,i$,Ojr,CCe,Vjr,TWe,hr,d$,Xjr,zc,zjr,fee,Wjr,Qjr,mee,Hjr,Ujr,Jjr,c$,Yjr,wCe,Kjr,Zjr,eDr,zt,f$,oDr,ACe,rDr,tDr,Wc,aDr,LCe,nDr,sDr,gee,lDr,iDr,dDr,r5,cDr,Or,m$,fDr,yCe,mDr,gDr,vn,hDr,xCe,pDr,_Dr,$Ce,uDr,bDr,kCe,vDr,FDr,TDr,SCe,t5,RCe,MDr,EDr,hee,CDr,wDr,ADr,a5,MWe,Qc,n5,PCe,g$,LDr,BCe,yDr,EWe,pr,h$,xDr,Hc,$Dr,pee,kDr,SDr,_ee,RDr,PDr,BDr,p$,IDr,ICe,NDr,qDr,jDr,Wt,_$,DDr,NCe,GDr,ODr,Uc,VDr,qCe,XDr,zDr,uee,WDr,QDr,HDr,s5,UDr,Vr,u$,JDr,jCe,YDr,KDr,Fn,ZDr,DCe,eGr,oGr,GCe,rGr,tGr,OCe,aGr,nGr,sGr,VCe,l5,XCe,lGr,iGr,bee,dGr,cGr,fGr,i5,CWe,Jc,d5,zCe,b$,mGr,WCe,gGr,wWe,_r,v$,hGr,Yc,pGr,vee,_Gr,uGr,Fee,bGr,vGr,FGr,F$,TGr,QCe,MGr,EGr,CGr,Qt,T$,wGr,HCe,AGr,LGr,Kc,yGr,UCe,xGr,$Gr,Tee,kGr,SGr,RGr,c5,PGr,Xr,M$,BGr,JCe,IGr,NGr,Tn,qGr,YCe,jGr,DGr,KCe,GGr,OGr,ZCe,VGr,XGr,zGr,oe,f5,e5e,WGr,QGr,Mee,HGr,UGr,JGr,m5,o5e,YGr,KGr,Eee,ZGr,eOr,oOr,g5,r5e,rOr,tOr,Cee,aOr,nOr,sOr,h5,t5e,lOr,iOr,wee,dOr,cOr,fOr,p5,a5e,mOr,gOr,Aee,hOr,pOr,_Or,_5,n5e,uOr,bOr,Lee,vOr,FOr,TOr,u5,s5e,MOr,EOr,yee,COr,wOr,AOr,b5,l5e,LOr,yOr,xee,xOr,$Or,kOr,v5,i5e,SOr,ROr,$ee,POr,BOr,IOr,F5,d5e,NOr,qOr,kee,jOr,DOr,GOr,T5,c5e,OOr,VOr,See,XOr,zOr,WOr,M5,f5e,QOr,HOr,Ree,UOr,JOr,YOr,E5,m5e,KOr,ZOr,Pee,eVr,oVr,rVr,C5,g5e,tVr,aVr,Bee,nVr,sVr,lVr,w5,h5e,iVr,dVr,Iee,cVr,fVr,mVr,A5,p5e,gVr,hVr,Nee,pVr,_Vr,uVr,L5,_5e,bVr,vVr,qee,FVr,TVr,MVr,y5,u5e,EVr,CVr,jee,wVr,AVr,LVr,x5,b5e,yVr,xVr,Dee,$Vr,kVr,SVr,$5,v5e,RVr,PVr,Gee,BVr,IVr,NVr,k5,F5e,qVr,jVr,Oee,DVr,GVr,OVr,S5,T5e,VVr,XVr,Vee,zVr,WVr,QVr,R5,M5e,HVr,UVr,Xee,JVr,YVr,KVr,P5,E5e,ZVr,eXr,zee,oXr,rXr,tXr,B5,C5e,aXr,nXr,Wee,sXr,lXr,iXr,I5,w5e,dXr,cXr,Qee,fXr,mXr,gXr,N5,A5e,hXr,pXr,Hee,_Xr,uXr,bXr,q5,AWe,Zc,j5,L5e,E$,vXr,y5e,FXr,LWe,ur,C$,TXr,ef,MXr,Uee,EXr,CXr,Jee,wXr,AXr,LXr,w$,yXr,x5e,xXr,$Xr,kXr,Ht,A$,SXr,$5e,RXr,PXr,of,BXr,k5e,IXr,NXr,Yee,qXr,jXr,DXr,D5,GXr,zr,L$,OXr,S5e,VXr,XXr,Mn,zXr,R5e,WXr,QXr,P5e,HXr,UXr,B5e,JXr,YXr,KXr,xe,G5,I5e,ZXr,ezr,Kee,ozr,rzr,tzr,O5,N5e,azr,nzr,Zee,szr,lzr,izr,V5,q5e,dzr,czr,eoe,fzr,mzr,gzr,X5,j5e,hzr,pzr,ooe,_zr,uzr,bzr,z5,D5e,vzr,Fzr,roe,Tzr,Mzr,Ezr,W5,G5e,Czr,wzr,toe,Azr,Lzr,yzr,Q5,O5e,xzr,$zr,aoe,kzr,Szr,Rzr,H5,V5e,Pzr,Bzr,noe,Izr,Nzr,qzr,U5,X5e,jzr,Dzr,soe,Gzr,Ozr,Vzr,J5,z5e,Xzr,zzr,loe,Wzr,Qzr,Hzr,Y5,yWe,rf,K5,W5e,y$,Uzr,Q5e,Jzr,xWe,br,x$,Yzr,tf,Kzr,ioe,Zzr,eWr,doe,oWr,rWr,tWr,$$,aWr,H5e,nWr,sWr,lWr,Ut,k$,iWr,U5e,dWr,cWr,af,fWr,J5e,mWr,gWr,coe,hWr,pWr,_Wr,Z5,uWr,Wr,S$,bWr,Y5e,vWr,FWr,En,TWr,K5e,MWr,EWr,Z5e,CWr,wWr,e3e,AWr,LWr,yWr,Ee,e3,o3e,xWr,$Wr,foe,kWr,SWr,RWr,o3,r3e,PWr,BWr,moe,IWr,NWr,qWr,r3,t3e,jWr,DWr,goe,GWr,OWr,VWr,t3,a3e,XWr,zWr,hoe,WWr,QWr,HWr,a3,n3e,UWr,JWr,poe,YWr,KWr,ZWr,n3,s3e,eQr,oQr,_oe,rQr,tQr,aQr,s3,l3e,nQr,sQr,uoe,lQr,iQr,dQr,l3,i3e,cQr,fQr,boe,mQr,gQr,hQr,i3,d3e,pQr,_Qr,voe,uQr,bQr,vQr,d3,c3e,FQr,TQr,Foe,MQr,EQr,CQr,c3,f3e,wQr,AQr,Toe,LQr,yQr,xQr,f3,m3e,$Qr,kQr,Moe,SQr,RQr,PQr,m3,g3e,BQr,IQr,Eoe,NQr,qQr,jQr,g3,$We,nf,h3,h3e,R$,DQr,p3e,GQr,kWe,vr,P$,OQr,sf,VQr,Coe,XQr,zQr,woe,WQr,QQr,HQr,B$,UQr,_3e,JQr,YQr,KQr,Jt,I$,ZQr,u3e,eHr,oHr,lf,rHr,b3e,tHr,aHr,Aoe,nHr,sHr,lHr,p3,iHr,Qr,N$,dHr,v3e,cHr,fHr,Cn,mHr,F3e,gHr,hHr,T3e,pHr,_Hr,M3e,uHr,bHr,vHr,$e,_3,E3e,FHr,THr,Loe,MHr,EHr,CHr,u3,C3e,wHr,AHr,yoe,LHr,yHr,xHr,b3,w3e,$Hr,kHr,xoe,SHr,RHr,PHr,v3,A3e,BHr,IHr,$oe,NHr,qHr,jHr,F3,L3e,DHr,GHr,koe,OHr,VHr,XHr,T3,y3e,zHr,WHr,Soe,QHr,HHr,UHr,M3,x3e,JHr,YHr,Roe,KHr,ZHr,eUr,E3,$3e,oUr,rUr,Poe,tUr,aUr,nUr,C3,k3e,sUr,lUr,Boe,iUr,dUr,cUr,w3,S3e,fUr,mUr,Ioe,gUr,hUr,pUr,A3,SWe,df,L3,R3e,q$,_Ur,P3e,uUr,RWe,Fr,j$,bUr,cf,vUr,Noe,FUr,TUr,qoe,MUr,EUr,CUr,D$,wUr,B3e,AUr,LUr,yUr,Yt,G$,xUr,I3e,$Ur,kUr,ff,SUr,N3e,RUr,PUr,joe,BUr,IUr,NUr,y3,qUr,Hr,O$,jUr,q3e,DUr,GUr,wn,OUr,j3e,VUr,XUr,D3e,zUr,WUr,G3e,QUr,HUr,UUr,ke,x3,O3e,JUr,YUr,Doe,KUr,ZUr,eJr,$3,V3e,oJr,rJr,Goe,tJr,aJr,nJr,k3,X3e,sJr,lJr,Ooe,iJr,dJr,cJr,S3,z3e,fJr,mJr,Voe,gJr,hJr,pJr,R3,W3e,_Jr,uJr,Xoe,bJr,vJr,FJr,P3,Q3e,TJr,MJr,zoe,EJr,CJr,wJr,B3,H3e,AJr,LJr,Woe,yJr,xJr,$Jr,I3,U3e,kJr,SJr,Qoe,RJr,PJr,BJr,N3,J3e,IJr,NJr,Hoe,qJr,jJr,DJr,q3,Y3e,GJr,OJr,Uoe,VJr,XJr,zJr,j3,PWe,mf,D3,K3e,V$,WJr,Z3e,QJr,BWe,Tr,X$,HJr,gf,UJr,Joe,JJr,YJr,Yoe,KJr,ZJr,eYr,z$,oYr,ewe,rYr,tYr,aYr,Kt,W$,nYr,owe,sYr,lYr,hf,iYr,rwe,dYr,cYr,Koe,fYr,mYr,gYr,G3,hYr,Ur,Q$,pYr,twe,_Yr,uYr,An,bYr,awe,vYr,FYr,nwe,TYr,MYr,swe,EYr,CYr,wYr,Se,O3,lwe,AYr,LYr,Zoe,yYr,xYr,$Yr,V3,iwe,kYr,SYr,ere,RYr,PYr,BYr,X3,dwe,IYr,NYr,ore,qYr,jYr,DYr,z3,cwe,GYr,OYr,rre,VYr,XYr,zYr,W3,fwe,WYr,QYr,tre,HYr,UYr,JYr,Q3,mwe,YYr,KYr,are,ZYr,eKr,oKr,H3,gwe,rKr,tKr,nre,aKr,nKr,sKr,U3,hwe,lKr,iKr,sre,dKr,cKr,fKr,J3,pwe,mKr,gKr,lre,hKr,pKr,_Kr,Y3,_we,uKr,bKr,ire,vKr,FKr,TKr,K3,IWe,pf,Z3,uwe,H$,MKr,bwe,EKr,NWe,Mr,U$,CKr,_f,wKr,dre,AKr,LKr,cre,yKr,xKr,$Kr,J$,kKr,vwe,SKr,RKr,PKr,Zt,Y$,BKr,Fwe,IKr,NKr,uf,qKr,Twe,jKr,DKr,fre,GKr,OKr,VKr,ew,XKr,Jr,K$,zKr,Mwe,WKr,QKr,Ln,HKr,Ewe,UKr,JKr,Cwe,YKr,KKr,wwe,ZKr,eZr,oZr,Re,ow,Awe,rZr,tZr,mre,aZr,nZr,sZr,rw,Lwe,lZr,iZr,gre,dZr,cZr,fZr,tw,ywe,mZr,gZr,hre,hZr,pZr,_Zr,aw,xwe,uZr,bZr,pre,vZr,FZr,TZr,nw,$we,MZr,EZr,_re,CZr,wZr,AZr,sw,kwe,LZr,yZr,ure,xZr,$Zr,kZr,lw,Swe,SZr,RZr,bre,PZr,BZr,IZr,iw,Rwe,NZr,qZr,vre,jZr,DZr,GZr,dw,Pwe,OZr,VZr,Fre,XZr,zZr,WZr,cw,Bwe,QZr,HZr,Tre,UZr,JZr,YZr,fw,qWe,bf,mw,Iwe,Z$,KZr,Nwe,ZZr,jWe,Er,ek,eet,vf,oet,Mre,ret,tet,Ere,aet,net,set,ok,iet,qwe,det,cet,fet,ea,rk,met,jwe,get,het,Ff,pet,Dwe,_et,uet,Cre,bet,vet,Fet,gw,Tet,Yr,tk,Met,Gwe,Eet,Cet,yn,wet,Owe,Aet,Let,Vwe,yet,xet,Xwe,$et,ket,Set,Xe,hw,zwe,Ret,Pet,wre,Bet,Iet,Net,pw,Wwe,qet,jet,Are,Det,Get,Oet,_w,Qwe,Vet,Xet,Lre,zet,Wet,Qet,uw,Hwe,Het,Uet,yre,Jet,Yet,Ket,bw,Uwe,Zet,eot,xre,oot,rot,tot,vw,Jwe,aot,not,$re,sot,lot,iot,Fw,Ywe,dot,cot,kre,fot,mot,got,Tw,Kwe,hot,pot,Sre,_ot,uot,bot,Mw,DWe,Tf,Ew,Zwe,ak,vot,eAe,Fot,GWe,Cr,nk,Tot,Mf,Mot,Rre,Eot,Cot,Pre,wot,Aot,Lot,sk,yot,oAe,xot,$ot,kot,oa,lk,Sot,rAe,Rot,Pot,Ef,Bot,tAe,Iot,Not,Bre,qot,jot,Dot,Cw,Got,Kr,ik,Oot,aAe,Vot,Xot,xn,zot,nAe,Wot,Qot,sAe,Hot,Uot,lAe,Jot,Yot,Kot,ze,ww,iAe,Zot,ert,Ire,ort,rrt,trt,Aw,dAe,art,nrt,Nre,srt,lrt,irt,Lw,cAe,drt,crt,qre,frt,mrt,grt,yw,fAe,hrt,prt,jre,_rt,urt,brt,xw,mAe,vrt,Frt,Dre,Trt,Mrt,Ert,$w,gAe,Crt,wrt,Gre,Art,Lrt,yrt,kw,hAe,xrt,$rt,Ore,krt,Srt,Rrt,Sw,pAe,Prt,Brt,Vre,Irt,Nrt,qrt,Rw,OWe,Cf,Pw,_Ae,dk,jrt,uAe,Drt,VWe,wr,ck,Grt,wf,Ort,Xre,Vrt,Xrt,zre,zrt,Wrt,Qrt,fk,Hrt,bAe,Urt,Jrt,Yrt,ra,mk,Krt,vAe,Zrt,ett,Af,ott,FAe,rtt,ttt,Wre,att,ntt,stt,Bw,ltt,Zr,gk,itt,TAe,dtt,ctt,$n,ftt,MAe,mtt,gtt,EAe,htt,ptt,CAe,_tt,utt,btt,wAe,Iw,AAe,vtt,Ftt,Qre,Ttt,Mtt,Ett,Nw,XWe,Lf,qw,LAe,hk,Ctt,yAe,wtt,zWe,Ar,pk,Att,yf,Ltt,Hre,ytt,xtt,Ure,$tt,ktt,Stt,_k,Rtt,xAe,Ptt,Btt,Itt,ta,uk,Ntt,$Ae,qtt,jtt,xf,Dtt,kAe,Gtt,Ott,Jre,Vtt,Xtt,ztt,jw,Wtt,et,bk,Qtt,SAe,Htt,Utt,kn,Jtt,RAe,Ytt,Ktt,PAe,Ztt,eat,BAe,oat,rat,tat,vk,Dw,IAe,aat,nat,Yre,sat,lat,iat,Gw,NAe,dat,cat,Kre,fat,mat,gat,Ow,WWe,$f,Vw,qAe,Fk,hat,jAe,pat,QWe,Lr,Tk,_at,kf,uat,Zre,bat,vat,ete,Fat,Tat,Mat,Mk,Eat,DAe,Cat,wat,Aat,aa,Ek,Lat,GAe,yat,xat,Sf,$at,OAe,kat,Sat,ote,Rat,Pat,Bat,Xw,Iat,ot,Ck,Nat,VAe,qat,jat,Sn,Dat,XAe,Gat,Oat,zAe,Vat,Xat,WAe,zat,Wat,Qat,QAe,zw,HAe,Hat,Uat,rte,Jat,Yat,Kat,Ww,HWe;return c=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),py=new re({}),_y=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Gf=new Zat({props:{warning:!0,$$slots:{default:[rUt]},$$scope:{ctx:$}}}),uy=new re({}),by=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/configuration_auto.py#L614"}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/configuration_auto.py#L637"}}),eh=new N({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[tUt]},$$scope:{ctx:$}}}),My=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/configuration_auto.py#L760"}}),Ey=new re({}),Cy=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/tokenization_auto.py#L411"}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17640/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/tokenization_auto.py#L425"}}),Ih=new N({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[aUt]},$$scope:{ctx:$}}}),yy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/tokenization_auto.py#L624"}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/feature_extraction_auto.py#L196"}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17640/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/feature_extraction_auto.py#L210"}}),Fp=new Zat({props:{$$slots:{default:[nUt]},$$scope:{ctx:$}}}),Tp=new N({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[sUt]},$$scope:{ctx:$}}}),Py=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/feature_extraction_auto.py#L337"}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/processing_auto.py#L90"}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/processing_auto.py#L104"}}),Vp=new Zat({props:{$$slots:{default:[lUt]},$$scope:{ctx:$}}}),Xp=new N({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[iUt]},$$scope:{ctx:$}}}),Dy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/processing_auto.py#L257"}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L787"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),Qp=new N({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[dUt]},$$scope:{ctx:$}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),Zu=new N({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[cUt]},$$scope:{ctx:$}}}),Wy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L794"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),o1=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[fUt]},$$scope:{ctx:$}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),H1=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[mUt]},$$scope:{ctx:$}}}),Yy=new re({}),Ky=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L809"}}),e8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),J1=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[gUt]},$$scope:{ctx:$}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),q4=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[hUt]},$$scope:{ctx:$}}}),r8=new re({}),t8=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L816"}}),n8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),D4=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[pUt]},$$scope:{ctx:$}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),A2=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[_Ut]},$$scope:{ctx:$}}}),l8=new re({}),i8=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L823"}}),c8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),y2=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[uUt]},$$scope:{ctx:$}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),U2=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[bUt]},$$scope:{ctx:$}}}),m8=new re({}),g8=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L832"}}),p8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),Y2=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[vUt]},$$scope:{ctx:$}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),Jb=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[FUt]},$$scope:{ctx:$}}}),u8=new re({}),b8=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L877"}}),F8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),Kb=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[TUt]},$$scope:{ctx:$}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),$v=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[MUt]},$$scope:{ctx:$}}}),M8=new re({}),E8=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L884"}}),w8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),Sv=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[EUt]},$$scope:{ctx:$}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),Dv=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[CUt]},$$scope:{ctx:$}}}),L8=new re({}),y8=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L870"}}),$8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),Ov=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[wUt]},$$scope:{ctx:$}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),A0=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[AUt]},$$scope:{ctx:$}}}),S8=new re({}),R8=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L841"}}),B8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),y0=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[LUt]},$$scope:{ctx:$}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),bF=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[yUt]},$$scope:{ctx:$}}}),N8=new re({}),q8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L848"}}),D8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),FF=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[xUt]},$$scope:{ctx:$}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),EF=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[$Ut]},$$scope:{ctx:$}}}),O8=new re({}),V8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L893"}}),z8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17640/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17640/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17640/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17640/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),wF=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[kUt]},$$scope:{ctx:$}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),DF=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[SUt]},$$scope:{ctx:$}}}),Q8=new re({}),H8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L932"}}),J8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),OF=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[RUt]},$$scope:{ctx:$}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),zF=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[PUt]},$$scope:{ctx:$}}}),K8=new re({}),Z8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L859"}}),o9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),QF=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[BUt]},$$scope:{ctx:$}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),JF=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[IUt]},$$scope:{ctx:$}}}),t9=new re({}),a9=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L939"}}),s9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),KF=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[NUt]},$$scope:{ctx:$}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),d6=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[qUt]},$$scope:{ctx:$}}}),i9=new re({}),d9=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L962"}}),f9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),f6=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[jUt]},$$scope:{ctx:$}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),b6=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[DUt]},$$scope:{ctx:$}}}),g9=new re({}),h9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L946"}}),_9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),F6=new N({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[GUt]},$$scope:{ctx:$}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),S6=new N({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[OUt]},$$scope:{ctx:$}}}),b9=new re({}),v9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L953"}}),T9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),P6=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[VUt]},$$scope:{ctx:$}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),q6=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[XUt]},$$scope:{ctx:$}}}),C9=new re({}),w9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L971"}}),L9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),D6=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[zUt]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),Q6=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[WUt]},$$scope:{ctx:$}}}),x9=new re({}),$9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L978"}}),S9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),U6=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[QUt]},$$scope:{ctx:$}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),eT=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[HUt]},$$scope:{ctx:$}}}),P9=new re({}),B9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L925"}}),N9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),rT=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[UUt]},$$scope:{ctx:$}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),sT=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[JUt]},$$scope:{ctx:$}}}),D9=new re({}),G9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L900"}}),V9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),iT=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[YUt]},$$scope:{ctx:$}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[KUt]},$$scope:{ctx:$}}}),z9=new re({}),W9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L907"}}),H9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),gT=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[ZUt]},$$scope:{ctx:$}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[eJt]},$$scope:{ctx:$}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_auto.py#L916"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[oJt]},$$scope:{ctx:$}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),wT=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[rJt]},$$scope:{ctx:$}}}),ox=new re({}),rx=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),LT=new N({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[tJt]},$$scope:{ctx:$}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),C7=new N({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[aJt]},$$scope:{ctx:$}}}),sx=new re({}),lx=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),A7=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[nJt]},$$scope:{ctx:$}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),J7=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[sJt]},$$scope:{ctx:$}}}),fx=new re({}),mx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),K7=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[lJt]},$$scope:{ctx:$}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),mM=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[iJt]},$$scope:{ctx:$}}}),_x=new re({}),ux=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_17640/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),hM=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[dJt]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),MM=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[cJt]},$$scope:{ctx:$}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),CM=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[fJt]},$$scope:{ctx:$}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),zM=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[mJt]},$$scope:{ctx:$}}}),Ax=new re({}),Lx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[gJt]},$$scope:{ctx:$}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),aE=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[hJt]},$$scope:{ctx:$}}}),kx=new re({}),Sx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),Px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),sE=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[pJt]},$$scope:{ctx:$}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),RE=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[_Jt]},$$scope:{ctx:$}}}),Ix=new re({}),Nx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),BE=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[uJt]},$$scope:{ctx:$}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),ZE=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[bJt]},$$scope:{ctx:$}}}),Gx=new re({}),Ox=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[vJt]},$$scope:{ctx:$}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),aC=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[FJt]},$$scope:{ctx:$}}}),Qx=new re({}),Hx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),sC=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[TJt]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),iC=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[MJt]},$$scope:{ctx:$}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),o$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),cC=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[EJt]},$$scope:{ctx:$}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),kC=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[CJt]},$$scope:{ctx:$}}}),t$=new re({}),a$=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),s$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),RC=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[wJt]},$$scope:{ctx:$}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[AJt]},$$scope:{ctx:$}}}),i$=new re({}),d$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),f$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[LJt]},$$scope:{ctx:$}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),a5=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[yJt]},$$scope:{ctx:$}}}),g$=new re({}),h$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),_$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),s5=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[xJt]},$$scope:{ctx:$}}}),u$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),i5=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[$Jt]},$$scope:{ctx:$}}}),b$=new re({}),v$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),T$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),c5=new N({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[kJt]},$$scope:{ctx:$}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),q5=new N({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[SJt]},$$scope:{ctx:$}}}),E$=new re({}),C$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),A$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),D5=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[RJt]},$$scope:{ctx:$}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),Y5=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[PJt]},$$scope:{ctx:$}}}),y$=new re({}),x$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),k$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),Z5=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[BJt]},$$scope:{ctx:$}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),g3=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[IJt]},$$scope:{ctx:$}}}),R$=new re({}),P$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),I$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),p3=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[NJt]},$$scope:{ctx:$}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),A3=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[qJt]},$$scope:{ctx:$}}}),q$=new re({}),j$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),G$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),y3=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[jJt]},$$scope:{ctx:$}}}),O$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),j3=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[DJt]},$$scope:{ctx:$}}}),V$=new re({}),X$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),W$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[GJt]},$$scope:{ctx:$}}}),Q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),K3=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[OJt]},$$scope:{ctx:$}}}),H$=new re({}),U$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),Y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),ew=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[VJt]},$$scope:{ctx:$}}}),K$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),fw=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[XJt]},$$scope:{ctx:$}}}),Z$=new re({}),ek=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),rk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),gw=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[zJt]},$$scope:{ctx:$}}}),tk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),Mw=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[WJt]},$$scope:{ctx:$}}}),ak=new re({}),nk=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),lk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),Cw=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[QJt]},$$scope:{ctx:$}}}),ik=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),Rw=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[HJt]},$$scope:{ctx:$}}}),dk=new re({}),ck=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),mk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),Bw=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[UJt]},$$scope:{ctx:$}}}),gk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),Nw=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[JJt]},$$scope:{ctx:$}}}),hk=new re({}),pk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),uk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17640/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),jw=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[YJt]},$$scope:{ctx:$}}}),bk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),Ow=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[KJt]},$$scope:{ctx:$}}}),Fk=new re({}),Tk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),Ek=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17640/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17640/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L389"}}),Xw=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[ZJt]},$$scope:{ctx:$}}}),Ck=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17640/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17640/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17640/src/transformers/models/auto/auto_factory.py#L417"}}),Ww=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[eYt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(c.$$.fragment),h=l(),wo=a("span"),xi=o("Auto Classes"),If=l(),lt=a("p"),$i=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ki=a("code"),fy=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Si=o("Instantiating one of "),Pn=a("a"),my=o("AutoConfig"),Bn=o(", "),In=a("a"),gy=o("AutoModel"),Ri=o(`, and
`),Nn=a("a"),hy=o("AutoTokenizer"),Pi=o(" will directly create a class of the relevant architecture. For instance"),qf=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),HS=o("will create a model that is an instance of "),Bi=a("a"),US=o("BertModel"),JS=o("."),Ao=l(),Ra=a("p"),YS=o("There is one class of "),jf=a("code"),KS=o("AutoModel"),aUe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),VXe=l(),Ii=a("h2"),Df=a("a"),Yae=a("span"),F(py.$$.fragment),nUe=l(),Kae=a("span"),sUe=o("Extending the Auto Classes"),XXe=l(),qn=a("p"),lUe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Zae=a("code"),iUe=o("NewModel"),dUe=o(", make sure you have a "),ene=a("code"),cUe=o("NewModelConfig"),fUe=o(` then you can add those to the auto
classes like this:`),zXe=l(),F(_y.$$.fragment),WXe=l(),ZS=a("p"),mUe=o("You will then be able to use the auto classes like you would usually do!"),QXe=l(),F(Gf.$$.fragment),HXe=l(),Ni=a("h2"),Of=a("a"),one=a("span"),F(uy.$$.fragment),gUe=l(),rne=a("span"),hUe=o("AutoConfig"),UXe=l(),Lo=a("div"),F(by.$$.fragment),pUe=l(),vy=a("p"),_Ue=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),eR=a("a"),uUe=o("from_pretrained()"),bUe=o(" class method."),vUe=l(),Fy=a("p"),FUe=o("This class cannot be instantiated directly using "),tne=a("code"),TUe=o("__init__()"),MUe=o(" (throws an error)."),EUe=l(),yr=a("div"),F(Ty.$$.fragment),CUe=l(),ane=a("p"),wUe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),AUe=l(),qi=a("p"),LUe=o("The configuration class to instantiate is selected based on the "),nne=a("code"),yUe=o("model_type"),xUe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),sne=a("code"),$Ue=o("pretrained_model_name_or_path"),kUe=o(":"),SUe=l(),A=a("ul"),Vf=a("li"),lne=a("strong"),RUe=o("albert"),PUe=o(" \u2014 "),oR=a("a"),BUe=o("AlbertConfig"),IUe=o(" (ALBERT model)"),NUe=l(),Xf=a("li"),ine=a("strong"),qUe=o("bart"),jUe=o(" \u2014 "),rR=a("a"),DUe=o("BartConfig"),GUe=o(" (BART model)"),OUe=l(),zf=a("li"),dne=a("strong"),VUe=o("beit"),XUe=o(" \u2014 "),tR=a("a"),zUe=o("BeitConfig"),WUe=o(" (BEiT model)"),QUe=l(),Wf=a("li"),cne=a("strong"),HUe=o("bert"),UUe=o(" \u2014 "),aR=a("a"),JUe=o("BertConfig"),YUe=o(" (BERT model)"),KUe=l(),Qf=a("li"),fne=a("strong"),ZUe=o("bert-generation"),eJe=o(" \u2014 "),nR=a("a"),oJe=o("BertGenerationConfig"),rJe=o(" (Bert Generation model)"),tJe=l(),Hf=a("li"),mne=a("strong"),aJe=o("big_bird"),nJe=o(" \u2014 "),sR=a("a"),sJe=o("BigBirdConfig"),lJe=o(" (BigBird model)"),iJe=l(),Uf=a("li"),gne=a("strong"),dJe=o("bigbird_pegasus"),cJe=o(" \u2014 "),lR=a("a"),fJe=o("BigBirdPegasusConfig"),mJe=o(" (BigBird-Pegasus model)"),gJe=l(),Jf=a("li"),hne=a("strong"),hJe=o("blenderbot"),pJe=o(" \u2014 "),iR=a("a"),_Je=o("BlenderbotConfig"),uJe=o(" (Blenderbot model)"),bJe=l(),Yf=a("li"),pne=a("strong"),vJe=o("blenderbot-small"),FJe=o(" \u2014 "),dR=a("a"),TJe=o("BlenderbotSmallConfig"),MJe=o(" (BlenderbotSmall model)"),EJe=l(),Kf=a("li"),_ne=a("strong"),CJe=o("bloom"),wJe=o(" \u2014 "),cR=a("a"),AJe=o("BloomConfig"),LJe=o(" (BLOOM model)"),yJe=l(),Zf=a("li"),une=a("strong"),xJe=o("camembert"),$Je=o(" \u2014 "),fR=a("a"),kJe=o("CamembertConfig"),SJe=o(" (CamemBERT model)"),RJe=l(),em=a("li"),bne=a("strong"),PJe=o("canine"),BJe=o(" \u2014 "),mR=a("a"),IJe=o("CanineConfig"),NJe=o(" (CANINE model)"),qJe=l(),om=a("li"),vne=a("strong"),jJe=o("clip"),DJe=o(" \u2014 "),gR=a("a"),GJe=o("CLIPConfig"),OJe=o(" (CLIP model)"),VJe=l(),rm=a("li"),Fne=a("strong"),XJe=o("codegen"),zJe=o(" \u2014 "),hR=a("a"),WJe=o("CodeGenConfig"),QJe=o(" (CodeGen model)"),HJe=l(),tm=a("li"),Tne=a("strong"),UJe=o("convbert"),JJe=o(" \u2014 "),pR=a("a"),YJe=o("ConvBertConfig"),KJe=o(" (ConvBERT model)"),ZJe=l(),am=a("li"),Mne=a("strong"),eYe=o("convnext"),oYe=o(" \u2014 "),_R=a("a"),rYe=o("ConvNextConfig"),tYe=o(" (ConvNeXT model)"),aYe=l(),nm=a("li"),Ene=a("strong"),nYe=o("ctrl"),sYe=o(" \u2014 "),uR=a("a"),lYe=o("CTRLConfig"),iYe=o(" (CTRL model)"),dYe=l(),sm=a("li"),Cne=a("strong"),cYe=o("cvt"),fYe=o(" \u2014 "),bR=a("a"),mYe=o("CvtConfig"),gYe=o(" (CvT model)"),hYe=l(),lm=a("li"),wne=a("strong"),pYe=o("data2vec-audio"),_Ye=o(" \u2014 "),vR=a("a"),uYe=o("Data2VecAudioConfig"),bYe=o(" (Data2VecAudio model)"),vYe=l(),im=a("li"),Ane=a("strong"),FYe=o("data2vec-text"),TYe=o(" \u2014 "),FR=a("a"),MYe=o("Data2VecTextConfig"),EYe=o(" (Data2VecText model)"),CYe=l(),dm=a("li"),Lne=a("strong"),wYe=o("data2vec-vision"),AYe=o(" \u2014 "),TR=a("a"),LYe=o("Data2VecVisionConfig"),yYe=o(" (Data2VecVision model)"),xYe=l(),cm=a("li"),yne=a("strong"),$Ye=o("deberta"),kYe=o(" \u2014 "),MR=a("a"),SYe=o("DebertaConfig"),RYe=o(" (DeBERTa model)"),PYe=l(),fm=a("li"),xne=a("strong"),BYe=o("deberta-v2"),IYe=o(" \u2014 "),ER=a("a"),NYe=o("DebertaV2Config"),qYe=o(" (DeBERTa-v2 model)"),jYe=l(),mm=a("li"),$ne=a("strong"),DYe=o("decision_transformer"),GYe=o(" \u2014 "),CR=a("a"),OYe=o("DecisionTransformerConfig"),VYe=o(" (Decision Transformer model)"),XYe=l(),gm=a("li"),kne=a("strong"),zYe=o("deit"),WYe=o(" \u2014 "),wR=a("a"),QYe=o("DeiTConfig"),HYe=o(" (DeiT model)"),UYe=l(),hm=a("li"),Sne=a("strong"),JYe=o("detr"),YYe=o(" \u2014 "),AR=a("a"),KYe=o("DetrConfig"),ZYe=o(" (DETR model)"),eKe=l(),pm=a("li"),Rne=a("strong"),oKe=o("distilbert"),rKe=o(" \u2014 "),LR=a("a"),tKe=o("DistilBertConfig"),aKe=o(" (DistilBERT model)"),nKe=l(),_m=a("li"),Pne=a("strong"),sKe=o("dpr"),lKe=o(" \u2014 "),yR=a("a"),iKe=o("DPRConfig"),dKe=o(" (DPR model)"),cKe=l(),um=a("li"),Bne=a("strong"),fKe=o("dpt"),mKe=o(" \u2014 "),xR=a("a"),gKe=o("DPTConfig"),hKe=o(" (DPT model)"),pKe=l(),bm=a("li"),Ine=a("strong"),_Ke=o("electra"),uKe=o(" \u2014 "),$R=a("a"),bKe=o("ElectraConfig"),vKe=o(" (ELECTRA model)"),FKe=l(),vm=a("li"),Nne=a("strong"),TKe=o("encoder-decoder"),MKe=o(" \u2014 "),kR=a("a"),EKe=o("EncoderDecoderConfig"),CKe=o(" (Encoder decoder model)"),wKe=l(),Fm=a("li"),qne=a("strong"),AKe=o("flaubert"),LKe=o(" \u2014 "),SR=a("a"),yKe=o("FlaubertConfig"),xKe=o(" (FlauBERT model)"),$Ke=l(),Tm=a("li"),jne=a("strong"),kKe=o("flava"),SKe=o(" \u2014 "),RR=a("a"),RKe=o("FlavaConfig"),PKe=o(" (FLAVA model)"),BKe=l(),Mm=a("li"),Dne=a("strong"),IKe=o("fnet"),NKe=o(" \u2014 "),PR=a("a"),qKe=o("FNetConfig"),jKe=o(" (FNet model)"),DKe=l(),Em=a("li"),Gne=a("strong"),GKe=o("fsmt"),OKe=o(" \u2014 "),BR=a("a"),VKe=o("FSMTConfig"),XKe=o(" (FairSeq Machine-Translation model)"),zKe=l(),Cm=a("li"),One=a("strong"),WKe=o("funnel"),QKe=o(" \u2014 "),IR=a("a"),HKe=o("FunnelConfig"),UKe=o(" (Funnel Transformer model)"),JKe=l(),wm=a("li"),Vne=a("strong"),YKe=o("glpn"),KKe=o(" \u2014 "),NR=a("a"),ZKe=o("GLPNConfig"),eZe=o(" (GLPN model)"),oZe=l(),Am=a("li"),Xne=a("strong"),rZe=o("gpt2"),tZe=o(" \u2014 "),qR=a("a"),aZe=o("GPT2Config"),nZe=o(" (OpenAI GPT-2 model)"),sZe=l(),Lm=a("li"),zne=a("strong"),lZe=o("gpt_neo"),iZe=o(" \u2014 "),jR=a("a"),dZe=o("GPTNeoConfig"),cZe=o(" (GPT Neo model)"),fZe=l(),ym=a("li"),Wne=a("strong"),mZe=o("gpt_neox"),gZe=o(" \u2014 "),DR=a("a"),hZe=o("GPTNeoXConfig"),pZe=o(" (GPT NeoX model)"),_Ze=l(),xm=a("li"),Qne=a("strong"),uZe=o("gptj"),bZe=o(" \u2014 "),GR=a("a"),vZe=o("GPTJConfig"),FZe=o(" (GPT-J model)"),TZe=l(),$m=a("li"),Hne=a("strong"),MZe=o("groupvit"),EZe=o(" \u2014 "),OR=a("a"),CZe=o("GroupViTConfig"),wZe=o(" (GroupViT model)"),AZe=l(),km=a("li"),Une=a("strong"),LZe=o("hubert"),yZe=o(" \u2014 "),VR=a("a"),xZe=o("HubertConfig"),$Ze=o(" (Hubert model)"),kZe=l(),Sm=a("li"),Jne=a("strong"),SZe=o("ibert"),RZe=o(" \u2014 "),XR=a("a"),PZe=o("IBertConfig"),BZe=o(" (I-BERT model)"),IZe=l(),Rm=a("li"),Yne=a("strong"),NZe=o("imagegpt"),qZe=o(" \u2014 "),zR=a("a"),jZe=o("ImageGPTConfig"),DZe=o(" (ImageGPT model)"),GZe=l(),Pm=a("li"),Kne=a("strong"),OZe=o("layoutlm"),VZe=o(" \u2014 "),WR=a("a"),XZe=o("LayoutLMConfig"),zZe=o(" (LayoutLM model)"),WZe=l(),Bm=a("li"),Zne=a("strong"),QZe=o("layoutlmv2"),HZe=o(" \u2014 "),QR=a("a"),UZe=o("LayoutLMv2Config"),JZe=o(" (LayoutLMv2 model)"),YZe=l(),Im=a("li"),ese=a("strong"),KZe=o("layoutlmv3"),ZZe=o(" \u2014 "),HR=a("a"),eeo=o("LayoutLMv3Config"),oeo=o(" (LayoutLMv3 model)"),reo=l(),Nm=a("li"),ose=a("strong"),teo=o("led"),aeo=o(" \u2014 "),UR=a("a"),neo=o("LEDConfig"),seo=o(" (LED model)"),leo=l(),qm=a("li"),rse=a("strong"),ieo=o("levit"),deo=o(" \u2014 "),JR=a("a"),ceo=o("LevitConfig"),feo=o(" (LeViT model)"),meo=l(),jm=a("li"),tse=a("strong"),geo=o("longformer"),heo=o(" \u2014 "),YR=a("a"),peo=o("LongformerConfig"),_eo=o(" (Longformer model)"),ueo=l(),Dm=a("li"),ase=a("strong"),beo=o("longt5"),veo=o(" \u2014 "),KR=a("a"),Feo=o("LongT5Config"),Teo=o(" (LongT5 model)"),Meo=l(),Gm=a("li"),nse=a("strong"),Eeo=o("luke"),Ceo=o(" \u2014 "),ZR=a("a"),weo=o("LukeConfig"),Aeo=o(" (LUKE model)"),Leo=l(),Om=a("li"),sse=a("strong"),yeo=o("lxmert"),xeo=o(" \u2014 "),eP=a("a"),$eo=o("LxmertConfig"),keo=o(" (LXMERT model)"),Seo=l(),Vm=a("li"),lse=a("strong"),Reo=o("m2m_100"),Peo=o(" \u2014 "),oP=a("a"),Beo=o("M2M100Config"),Ieo=o(" (M2M100 model)"),Neo=l(),Xm=a("li"),ise=a("strong"),qeo=o("marian"),jeo=o(" \u2014 "),rP=a("a"),Deo=o("MarianConfig"),Geo=o(" (Marian model)"),Oeo=l(),zm=a("li"),dse=a("strong"),Veo=o("maskformer"),Xeo=o(" \u2014 "),tP=a("a"),zeo=o("MaskFormerConfig"),Weo=o(" (MaskFormer model)"),Qeo=l(),Wm=a("li"),cse=a("strong"),Heo=o("mbart"),Ueo=o(" \u2014 "),aP=a("a"),Jeo=o("MBartConfig"),Yeo=o(" (mBART model)"),Keo=l(),Qm=a("li"),fse=a("strong"),Zeo=o("mctct"),eoo=o(" \u2014 "),nP=a("a"),ooo=o("MCTCTConfig"),roo=o(" (M-CTC-T model)"),too=l(),Hm=a("li"),mse=a("strong"),aoo=o("megatron-bert"),noo=o(" \u2014 "),sP=a("a"),soo=o("MegatronBertConfig"),loo=o(" (Megatron-BERT model)"),ioo=l(),Um=a("li"),gse=a("strong"),doo=o("mobilebert"),coo=o(" \u2014 "),lP=a("a"),foo=o("MobileBertConfig"),moo=o(" (MobileBERT model)"),goo=l(),Jm=a("li"),hse=a("strong"),hoo=o("mobilevit"),poo=o(" \u2014 "),iP=a("a"),_oo=o("MobileViTConfig"),uoo=o(" (MobileViT model)"),boo=l(),Ym=a("li"),pse=a("strong"),voo=o("mpnet"),Foo=o(" \u2014 "),dP=a("a"),Too=o("MPNetConfig"),Moo=o(" (MPNet model)"),Eoo=l(),Km=a("li"),_se=a("strong"),Coo=o("mt5"),woo=o(" \u2014 "),cP=a("a"),Aoo=o("MT5Config"),Loo=o(" (MT5 model)"),yoo=l(),Zm=a("li"),use=a("strong"),xoo=o("mvp"),$oo=o(" \u2014 "),fP=a("a"),koo=o("MvpConfig"),Soo=o(" (MVP model)"),Roo=l(),eg=a("li"),bse=a("strong"),Poo=o("nezha"),Boo=o(" \u2014 "),mP=a("a"),Ioo=o("NezhaConfig"),Noo=o(" (Nezha model)"),qoo=l(),og=a("li"),vse=a("strong"),joo=o("nystromformer"),Doo=o(" \u2014 "),gP=a("a"),Goo=o("NystromformerConfig"),Ooo=o(" (Nystr\xF6mformer model)"),Voo=l(),rg=a("li"),Fse=a("strong"),Xoo=o("openai-gpt"),zoo=o(" \u2014 "),hP=a("a"),Woo=o("OpenAIGPTConfig"),Qoo=o(" (OpenAI GPT model)"),Hoo=l(),tg=a("li"),Tse=a("strong"),Uoo=o("opt"),Joo=o(" \u2014 "),pP=a("a"),Yoo=o("OPTConfig"),Koo=o(" (OPT model)"),Zoo=l(),ag=a("li"),Mse=a("strong"),ero=o("owlvit"),oro=o(" \u2014 "),_P=a("a"),rro=o("OwlViTConfig"),tro=o(" (OWL-ViT model)"),aro=l(),ng=a("li"),Ese=a("strong"),nro=o("pegasus"),sro=o(" \u2014 "),uP=a("a"),lro=o("PegasusConfig"),iro=o(" (Pegasus model)"),dro=l(),sg=a("li"),Cse=a("strong"),cro=o("perceiver"),fro=o(" \u2014 "),bP=a("a"),mro=o("PerceiverConfig"),gro=o(" (Perceiver model)"),hro=l(),lg=a("li"),wse=a("strong"),pro=o("plbart"),_ro=o(" \u2014 "),vP=a("a"),uro=o("PLBartConfig"),bro=o(" (PLBart model)"),vro=l(),ig=a("li"),Ase=a("strong"),Fro=o("poolformer"),Tro=o(" \u2014 "),FP=a("a"),Mro=o("PoolFormerConfig"),Ero=o(" (PoolFormer model)"),Cro=l(),dg=a("li"),Lse=a("strong"),wro=o("prophetnet"),Aro=o(" \u2014 "),TP=a("a"),Lro=o("ProphetNetConfig"),yro=o(" (ProphetNet model)"),xro=l(),cg=a("li"),yse=a("strong"),$ro=o("qdqbert"),kro=o(" \u2014 "),MP=a("a"),Sro=o("QDQBertConfig"),Rro=o(" (QDQBert model)"),Pro=l(),fg=a("li"),xse=a("strong"),Bro=o("rag"),Iro=o(" \u2014 "),EP=a("a"),Nro=o("RagConfig"),qro=o(" (RAG model)"),jro=l(),mg=a("li"),$se=a("strong"),Dro=o("realm"),Gro=o(" \u2014 "),CP=a("a"),Oro=o("RealmConfig"),Vro=o(" (REALM model)"),Xro=l(),gg=a("li"),kse=a("strong"),zro=o("reformer"),Wro=o(" \u2014 "),wP=a("a"),Qro=o("ReformerConfig"),Hro=o(" (Reformer model)"),Uro=l(),hg=a("li"),Sse=a("strong"),Jro=o("regnet"),Yro=o(" \u2014 "),AP=a("a"),Kro=o("RegNetConfig"),Zro=o(" (RegNet model)"),eto=l(),pg=a("li"),Rse=a("strong"),oto=o("rembert"),rto=o(" \u2014 "),LP=a("a"),tto=o("RemBertConfig"),ato=o(" (RemBERT model)"),nto=l(),_g=a("li"),Pse=a("strong"),sto=o("resnet"),lto=o(" \u2014 "),yP=a("a"),ito=o("ResNetConfig"),dto=o(" (ResNet model)"),cto=l(),ug=a("li"),Bse=a("strong"),fto=o("retribert"),mto=o(" \u2014 "),xP=a("a"),gto=o("RetriBertConfig"),hto=o(" (RetriBERT model)"),pto=l(),bg=a("li"),Ise=a("strong"),_to=o("roberta"),uto=o(" \u2014 "),$P=a("a"),bto=o("RobertaConfig"),vto=o(" (RoBERTa model)"),Fto=l(),vg=a("li"),Nse=a("strong"),Tto=o("roformer"),Mto=o(" \u2014 "),kP=a("a"),Eto=o("RoFormerConfig"),Cto=o(" (RoFormer model)"),wto=l(),Fg=a("li"),qse=a("strong"),Ato=o("segformer"),Lto=o(" \u2014 "),SP=a("a"),yto=o("SegformerConfig"),xto=o(" (SegFormer model)"),$to=l(),Tg=a("li"),jse=a("strong"),kto=o("sew"),Sto=o(" \u2014 "),RP=a("a"),Rto=o("SEWConfig"),Pto=o(" (SEW model)"),Bto=l(),Mg=a("li"),Dse=a("strong"),Ito=o("sew-d"),Nto=o(" \u2014 "),PP=a("a"),qto=o("SEWDConfig"),jto=o(" (SEW-D model)"),Dto=l(),Eg=a("li"),Gse=a("strong"),Gto=o("speech-encoder-decoder"),Oto=o(" \u2014 "),BP=a("a"),Vto=o("SpeechEncoderDecoderConfig"),Xto=o(" (Speech Encoder decoder model)"),zto=l(),Cg=a("li"),Ose=a("strong"),Wto=o("speech_to_text"),Qto=o(" \u2014 "),IP=a("a"),Hto=o("Speech2TextConfig"),Uto=o(" (Speech2Text model)"),Jto=l(),wg=a("li"),Vse=a("strong"),Yto=o("speech_to_text_2"),Kto=o(" \u2014 "),NP=a("a"),Zto=o("Speech2Text2Config"),eao=o(" (Speech2Text2 model)"),oao=l(),Ag=a("li"),Xse=a("strong"),rao=o("splinter"),tao=o(" \u2014 "),qP=a("a"),aao=o("SplinterConfig"),nao=o(" (Splinter model)"),sao=l(),Lg=a("li"),zse=a("strong"),lao=o("squeezebert"),iao=o(" \u2014 "),jP=a("a"),dao=o("SqueezeBertConfig"),cao=o(" (SqueezeBERT model)"),fao=l(),yg=a("li"),Wse=a("strong"),mao=o("swin"),gao=o(" \u2014 "),DP=a("a"),hao=o("SwinConfig"),pao=o(" (Swin Transformer model)"),_ao=l(),xg=a("li"),Qse=a("strong"),uao=o("t5"),bao=o(" \u2014 "),GP=a("a"),vao=o("T5Config"),Fao=o(" (T5 model)"),Tao=l(),$g=a("li"),Hse=a("strong"),Mao=o("tapas"),Eao=o(" \u2014 "),OP=a("a"),Cao=o("TapasConfig"),wao=o(" (TAPAS model)"),Aao=l(),kg=a("li"),Use=a("strong"),Lao=o("trajectory_transformer"),yao=o(" \u2014 "),VP=a("a"),xao=o("TrajectoryTransformerConfig"),$ao=o(" (Trajectory Transformer model)"),kao=l(),Sg=a("li"),Jse=a("strong"),Sao=o("transfo-xl"),Rao=o(" \u2014 "),XP=a("a"),Pao=o("TransfoXLConfig"),Bao=o(" (Transformer-XL model)"),Iao=l(),Rg=a("li"),Yse=a("strong"),Nao=o("trocr"),qao=o(" \u2014 "),zP=a("a"),jao=o("TrOCRConfig"),Dao=o(" (TrOCR model)"),Gao=l(),Pg=a("li"),Kse=a("strong"),Oao=o("unispeech"),Vao=o(" \u2014 "),WP=a("a"),Xao=o("UniSpeechConfig"),zao=o(" (UniSpeech model)"),Wao=l(),Bg=a("li"),Zse=a("strong"),Qao=o("unispeech-sat"),Hao=o(" \u2014 "),QP=a("a"),Uao=o("UniSpeechSatConfig"),Jao=o(" (UniSpeechSat model)"),Yao=l(),Ig=a("li"),ele=a("strong"),Kao=o("van"),Zao=o(" \u2014 "),HP=a("a"),eno=o("VanConfig"),ono=o(" (VAN model)"),rno=l(),Ng=a("li"),ole=a("strong"),tno=o("vilt"),ano=o(" \u2014 "),UP=a("a"),nno=o("ViltConfig"),sno=o(" (ViLT model)"),lno=l(),qg=a("li"),rle=a("strong"),ino=o("vision-encoder-decoder"),dno=o(" \u2014 "),JP=a("a"),cno=o("VisionEncoderDecoderConfig"),fno=o(" (Vision Encoder decoder model)"),mno=l(),jg=a("li"),tle=a("strong"),gno=o("vision-text-dual-encoder"),hno=o(" \u2014 "),YP=a("a"),pno=o("VisionTextDualEncoderConfig"),_no=o(" (VisionTextDualEncoder model)"),uno=l(),Dg=a("li"),ale=a("strong"),bno=o("visual_bert"),vno=o(" \u2014 "),KP=a("a"),Fno=o("VisualBertConfig"),Tno=o(" (VisualBERT model)"),Mno=l(),Gg=a("li"),nle=a("strong"),Eno=o("vit"),Cno=o(" \u2014 "),ZP=a("a"),wno=o("ViTConfig"),Ano=o(" (ViT model)"),Lno=l(),Og=a("li"),sle=a("strong"),yno=o("vit_mae"),xno=o(" \u2014 "),eB=a("a"),$no=o("ViTMAEConfig"),kno=o(" (ViTMAE model)"),Sno=l(),Vg=a("li"),lle=a("strong"),Rno=o("wav2vec2"),Pno=o(" \u2014 "),oB=a("a"),Bno=o("Wav2Vec2Config"),Ino=o(" (Wav2Vec2 model)"),Nno=l(),Xg=a("li"),ile=a("strong"),qno=o("wav2vec2-conformer"),jno=o(" \u2014 "),rB=a("a"),Dno=o("Wav2Vec2ConformerConfig"),Gno=o(" (Wav2Vec2-Conformer model)"),Ono=l(),zg=a("li"),dle=a("strong"),Vno=o("wavlm"),Xno=o(" \u2014 "),tB=a("a"),zno=o("WavLMConfig"),Wno=o(" (WavLM model)"),Qno=l(),Wg=a("li"),cle=a("strong"),Hno=o("xglm"),Uno=o(" \u2014 "),aB=a("a"),Jno=o("XGLMConfig"),Yno=o(" (XGLM model)"),Kno=l(),Qg=a("li"),fle=a("strong"),Zno=o("xlm"),eso=o(" \u2014 "),nB=a("a"),oso=o("XLMConfig"),rso=o(" (XLM model)"),tso=l(),Hg=a("li"),mle=a("strong"),aso=o("xlm-prophetnet"),nso=o(" \u2014 "),sB=a("a"),sso=o("XLMProphetNetConfig"),lso=o(" (XLM-ProphetNet model)"),iso=l(),Ug=a("li"),gle=a("strong"),dso=o("xlm-roberta"),cso=o(" \u2014 "),lB=a("a"),fso=o("XLMRobertaConfig"),mso=o(" (XLM-RoBERTa model)"),gso=l(),Jg=a("li"),hle=a("strong"),hso=o("xlm-roberta-xl"),pso=o(" \u2014 "),iB=a("a"),_so=o("XLMRobertaXLConfig"),uso=o(" (XLM-RoBERTa-XL model)"),bso=l(),Yg=a("li"),ple=a("strong"),vso=o("xlnet"),Fso=o(" \u2014 "),dB=a("a"),Tso=o("XLNetConfig"),Mso=o(" (XLNet model)"),Eso=l(),Kg=a("li"),_le=a("strong"),Cso=o("yolos"),wso=o(" \u2014 "),cB=a("a"),Aso=o("YolosConfig"),Lso=o(" (YOLOS model)"),yso=l(),Zg=a("li"),ule=a("strong"),xso=o("yoso"),$so=o(" \u2014 "),fB=a("a"),kso=o("YosoConfig"),Sso=o(" (YOSO model)"),Rso=l(),F(eh.$$.fragment),Pso=l(),oh=a("div"),F(My.$$.fragment),Bso=l(),ble=a("p"),Iso=o("Register a new configuration for this class."),JXe=l(),ji=a("h2"),rh=a("a"),vle=a("span"),F(Ey.$$.fragment),Nso=l(),Fle=a("span"),qso=o("AutoTokenizer"),YXe=l(),yo=a("div"),F(Cy.$$.fragment),jso=l(),wy=a("p"),Dso=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),mB=a("a"),Gso=o("AutoTokenizer.from_pretrained()"),Oso=o(" class method."),Vso=l(),Ay=a("p"),Xso=o("This class cannot be instantiated directly using "),Tle=a("code"),zso=o("__init__()"),Wso=o(" (throws an error)."),Qso=l(),xr=a("div"),F(Ly.$$.fragment),Hso=l(),Mle=a("p"),Uso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Jso=l(),Pa=a("p"),Yso=o("The tokenizer class to instantiate is selected based on the "),Ele=a("code"),Kso=o("model_type"),Zso=o(` property of the config object (either
passed as an argument or loaded from `),Cle=a("code"),elo=o("pretrained_model_name_or_path"),olo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wle=a("code"),rlo=o("pretrained_model_name_or_path"),tlo=o(":"),alo=l(),k=a("ul"),jn=a("li"),Ale=a("strong"),nlo=o("albert"),slo=o(" \u2014 "),gB=a("a"),llo=o("AlbertTokenizer"),ilo=o(" or "),hB=a("a"),dlo=o("AlbertTokenizerFast"),clo=o(" (ALBERT model)"),flo=l(),Dn=a("li"),Lle=a("strong"),mlo=o("bart"),glo=o(" \u2014 "),pB=a("a"),hlo=o("BartTokenizer"),plo=o(" or "),_B=a("a"),_lo=o("BartTokenizerFast"),ulo=o(" (BART model)"),blo=l(),Gn=a("li"),yle=a("strong"),vlo=o("barthez"),Flo=o(" \u2014 "),uB=a("a"),Tlo=o("BarthezTokenizer"),Mlo=o(" or "),bB=a("a"),Elo=o("BarthezTokenizerFast"),Clo=o(" (BARThez model)"),wlo=l(),th=a("li"),xle=a("strong"),Alo=o("bartpho"),Llo=o(" \u2014 "),vB=a("a"),ylo=o("BartphoTokenizer"),xlo=o(" (BARTpho model)"),$lo=l(),On=a("li"),$le=a("strong"),klo=o("bert"),Slo=o(" \u2014 "),FB=a("a"),Rlo=o("BertTokenizer"),Plo=o(" or "),TB=a("a"),Blo=o("BertTokenizerFast"),Ilo=o(" (BERT model)"),Nlo=l(),ah=a("li"),kle=a("strong"),qlo=o("bert-generation"),jlo=o(" \u2014 "),MB=a("a"),Dlo=o("BertGenerationTokenizer"),Glo=o(" (Bert Generation model)"),Olo=l(),nh=a("li"),Sle=a("strong"),Vlo=o("bert-japanese"),Xlo=o(" \u2014 "),EB=a("a"),zlo=o("BertJapaneseTokenizer"),Wlo=o(" (BertJapanese model)"),Qlo=l(),sh=a("li"),Rle=a("strong"),Hlo=o("bertweet"),Ulo=o(" \u2014 "),CB=a("a"),Jlo=o("BertweetTokenizer"),Ylo=o(" (BERTweet model)"),Klo=l(),Vn=a("li"),Ple=a("strong"),Zlo=o("big_bird"),eio=o(" \u2014 "),wB=a("a"),oio=o("BigBirdTokenizer"),rio=o(" or "),AB=a("a"),tio=o("BigBirdTokenizerFast"),aio=o(" (BigBird model)"),nio=l(),Xn=a("li"),Ble=a("strong"),sio=o("bigbird_pegasus"),lio=o(" \u2014 "),LB=a("a"),iio=o("PegasusTokenizer"),dio=o(" or "),yB=a("a"),cio=o("PegasusTokenizerFast"),fio=o(" (BigBird-Pegasus model)"),mio=l(),zn=a("li"),Ile=a("strong"),gio=o("blenderbot"),hio=o(" \u2014 "),xB=a("a"),pio=o("BlenderbotTokenizer"),_io=o(" or "),$B=a("a"),uio=o("BlenderbotTokenizerFast"),bio=o(" (Blenderbot model)"),vio=l(),lh=a("li"),Nle=a("strong"),Fio=o("blenderbot-small"),Tio=o(" \u2014 "),kB=a("a"),Mio=o("BlenderbotSmallTokenizer"),Eio=o(" (BlenderbotSmall model)"),Cio=l(),ih=a("li"),qle=a("strong"),wio=o("bloom"),Aio=o(" \u2014 "),SB=a("a"),Lio=o("BloomTokenizerFast"),yio=o(" (BLOOM model)"),xio=l(),dh=a("li"),jle=a("strong"),$io=o("byt5"),kio=o(" \u2014 "),RB=a("a"),Sio=o("ByT5Tokenizer"),Rio=o(" (ByT5 model)"),Pio=l(),Wn=a("li"),Dle=a("strong"),Bio=o("camembert"),Iio=o(" \u2014 "),PB=a("a"),Nio=o("CamembertTokenizer"),qio=o(" or "),BB=a("a"),jio=o("CamembertTokenizerFast"),Dio=o(" (CamemBERT model)"),Gio=l(),ch=a("li"),Gle=a("strong"),Oio=o("canine"),Vio=o(" \u2014 "),IB=a("a"),Xio=o("CanineTokenizer"),zio=o(" (CANINE model)"),Wio=l(),Qn=a("li"),Ole=a("strong"),Qio=o("clip"),Hio=o(" \u2014 "),NB=a("a"),Uio=o("CLIPTokenizer"),Jio=o(" or "),qB=a("a"),Yio=o("CLIPTokenizerFast"),Kio=o(" (CLIP model)"),Zio=l(),Hn=a("li"),Vle=a("strong"),edo=o("codegen"),odo=o(" \u2014 "),jB=a("a"),rdo=o("CodeGenTokenizer"),tdo=o(" or "),DB=a("a"),ado=o("CodeGenTokenizerFast"),ndo=o(" (CodeGen model)"),sdo=l(),Un=a("li"),Xle=a("strong"),ldo=o("convbert"),ido=o(" \u2014 "),GB=a("a"),ddo=o("ConvBertTokenizer"),cdo=o(" or "),OB=a("a"),fdo=o("ConvBertTokenizerFast"),mdo=o(" (ConvBERT model)"),gdo=l(),Jn=a("li"),zle=a("strong"),hdo=o("cpm"),pdo=o(" \u2014 "),VB=a("a"),_do=o("CpmTokenizer"),udo=o(" or "),XB=a("a"),bdo=o("CpmTokenizerFast"),vdo=o(" (CPM model)"),Fdo=l(),fh=a("li"),Wle=a("strong"),Tdo=o("ctrl"),Mdo=o(" \u2014 "),zB=a("a"),Edo=o("CTRLTokenizer"),Cdo=o(" (CTRL model)"),wdo=l(),Yn=a("li"),Qle=a("strong"),Ado=o("data2vec-text"),Ldo=o(" \u2014 "),WB=a("a"),ydo=o("RobertaTokenizer"),xdo=o(" or "),QB=a("a"),$do=o("RobertaTokenizerFast"),kdo=o(" (Data2VecText model)"),Sdo=l(),Kn=a("li"),Hle=a("strong"),Rdo=o("deberta"),Pdo=o(" \u2014 "),HB=a("a"),Bdo=o("DebertaTokenizer"),Ido=o(" or "),UB=a("a"),Ndo=o("DebertaTokenizerFast"),qdo=o(" (DeBERTa model)"),jdo=l(),Zn=a("li"),Ule=a("strong"),Ddo=o("deberta-v2"),Gdo=o(" \u2014 "),JB=a("a"),Odo=o("DebertaV2Tokenizer"),Vdo=o(" or "),YB=a("a"),Xdo=o("DebertaV2TokenizerFast"),zdo=o(" (DeBERTa-v2 model)"),Wdo=l(),es=a("li"),Jle=a("strong"),Qdo=o("distilbert"),Hdo=o(" \u2014 "),KB=a("a"),Udo=o("DistilBertTokenizer"),Jdo=o(" or "),ZB=a("a"),Ydo=o("DistilBertTokenizerFast"),Kdo=o(" (DistilBERT model)"),Zdo=l(),os=a("li"),Yle=a("strong"),eco=o("dpr"),oco=o(" \u2014 "),eI=a("a"),rco=o("DPRQuestionEncoderTokenizer"),tco=o(" or "),oI=a("a"),aco=o("DPRQuestionEncoderTokenizerFast"),nco=o(" (DPR model)"),sco=l(),rs=a("li"),Kle=a("strong"),lco=o("electra"),ico=o(" \u2014 "),rI=a("a"),dco=o("ElectraTokenizer"),cco=o(" or "),tI=a("a"),fco=o("ElectraTokenizerFast"),mco=o(" (ELECTRA model)"),gco=l(),mh=a("li"),Zle=a("strong"),hco=o("flaubert"),pco=o(" \u2014 "),aI=a("a"),_co=o("FlaubertTokenizer"),uco=o(" (FlauBERT model)"),bco=l(),ts=a("li"),eie=a("strong"),vco=o("fnet"),Fco=o(" \u2014 "),nI=a("a"),Tco=o("FNetTokenizer"),Mco=o(" or "),sI=a("a"),Eco=o("FNetTokenizerFast"),Cco=o(" (FNet model)"),wco=l(),gh=a("li"),oie=a("strong"),Aco=o("fsmt"),Lco=o(" \u2014 "),lI=a("a"),yco=o("FSMTTokenizer"),xco=o(" (FairSeq Machine-Translation model)"),$co=l(),as=a("li"),rie=a("strong"),kco=o("funnel"),Sco=o(" \u2014 "),iI=a("a"),Rco=o("FunnelTokenizer"),Pco=o(" or "),dI=a("a"),Bco=o("FunnelTokenizerFast"),Ico=o(" (Funnel Transformer model)"),Nco=l(),ns=a("li"),tie=a("strong"),qco=o("gpt2"),jco=o(" \u2014 "),cI=a("a"),Dco=o("GPT2Tokenizer"),Gco=o(" or "),fI=a("a"),Oco=o("GPT2TokenizerFast"),Vco=o(" (OpenAI GPT-2 model)"),Xco=l(),ss=a("li"),aie=a("strong"),zco=o("gpt_neo"),Wco=o(" \u2014 "),mI=a("a"),Qco=o("GPT2Tokenizer"),Hco=o(" or "),gI=a("a"),Uco=o("GPT2TokenizerFast"),Jco=o(" (GPT Neo model)"),Yco=l(),hh=a("li"),nie=a("strong"),Kco=o("gpt_neox"),Zco=o(" \u2014 "),hI=a("a"),efo=o("GPTNeoXTokenizerFast"),ofo=o(" (GPT NeoX model)"),rfo=l(),ls=a("li"),sie=a("strong"),tfo=o("gptj"),afo=o(" \u2014 "),pI=a("a"),nfo=o("GPT2Tokenizer"),sfo=o(" or "),_I=a("a"),lfo=o("GPT2TokenizerFast"),ifo=o(" (GPT-J model)"),dfo=l(),is=a("li"),lie=a("strong"),cfo=o("groupvit"),ffo=o(" \u2014 "),uI=a("a"),mfo=o("CLIPTokenizer"),gfo=o(" or "),bI=a("a"),hfo=o("CLIPTokenizerFast"),pfo=o(" (GroupViT model)"),_fo=l(),ds=a("li"),iie=a("strong"),ufo=o("herbert"),bfo=o(" \u2014 "),vI=a("a"),vfo=o("HerbertTokenizer"),Ffo=o(" or "),FI=a("a"),Tfo=o("HerbertTokenizerFast"),Mfo=o(" (HerBERT model)"),Efo=l(),ph=a("li"),die=a("strong"),Cfo=o("hubert"),wfo=o(" \u2014 "),TI=a("a"),Afo=o("Wav2Vec2CTCTokenizer"),Lfo=o(" (Hubert model)"),yfo=l(),cs=a("li"),cie=a("strong"),xfo=o("ibert"),$fo=o(" \u2014 "),MI=a("a"),kfo=o("RobertaTokenizer"),Sfo=o(" or "),EI=a("a"),Rfo=o("RobertaTokenizerFast"),Pfo=o(" (I-BERT model)"),Bfo=l(),fs=a("li"),fie=a("strong"),Ifo=o("layoutlm"),Nfo=o(" \u2014 "),CI=a("a"),qfo=o("LayoutLMTokenizer"),jfo=o(" or "),wI=a("a"),Dfo=o("LayoutLMTokenizerFast"),Gfo=o(" (LayoutLM model)"),Ofo=l(),ms=a("li"),mie=a("strong"),Vfo=o("layoutlmv2"),Xfo=o(" \u2014 "),AI=a("a"),zfo=o("LayoutLMv2Tokenizer"),Wfo=o(" or "),LI=a("a"),Qfo=o("LayoutLMv2TokenizerFast"),Hfo=o(" (LayoutLMv2 model)"),Ufo=l(),gs=a("li"),gie=a("strong"),Jfo=o("layoutlmv3"),Yfo=o(" \u2014 "),yI=a("a"),Kfo=o("LayoutLMv3Tokenizer"),Zfo=o(" or "),xI=a("a"),emo=o("LayoutLMv3TokenizerFast"),omo=o(" (LayoutLMv3 model)"),rmo=l(),hs=a("li"),hie=a("strong"),tmo=o("layoutxlm"),amo=o(" \u2014 "),$I=a("a"),nmo=o("LayoutXLMTokenizer"),smo=o(" or "),kI=a("a"),lmo=o("LayoutXLMTokenizerFast"),imo=o(" (LayoutXLM model)"),dmo=l(),ps=a("li"),pie=a("strong"),cmo=o("led"),fmo=o(" \u2014 "),SI=a("a"),mmo=o("LEDTokenizer"),gmo=o(" or "),RI=a("a"),hmo=o("LEDTokenizerFast"),pmo=o(" (LED model)"),_mo=l(),_s=a("li"),_ie=a("strong"),umo=o("longformer"),bmo=o(" \u2014 "),PI=a("a"),vmo=o("LongformerTokenizer"),Fmo=o(" or "),BI=a("a"),Tmo=o("LongformerTokenizerFast"),Mmo=o(" (Longformer model)"),Emo=l(),us=a("li"),uie=a("strong"),Cmo=o("longt5"),wmo=o(" \u2014 "),II=a("a"),Amo=o("T5Tokenizer"),Lmo=o(" or "),NI=a("a"),ymo=o("T5TokenizerFast"),xmo=o(" (LongT5 model)"),$mo=l(),_h=a("li"),bie=a("strong"),kmo=o("luke"),Smo=o(" \u2014 "),qI=a("a"),Rmo=o("LukeTokenizer"),Pmo=o(" (LUKE model)"),Bmo=l(),bs=a("li"),vie=a("strong"),Imo=o("lxmert"),Nmo=o(" \u2014 "),jI=a("a"),qmo=o("LxmertTokenizer"),jmo=o(" or "),DI=a("a"),Dmo=o("LxmertTokenizerFast"),Gmo=o(" (LXMERT model)"),Omo=l(),uh=a("li"),Fie=a("strong"),Vmo=o("m2m_100"),Xmo=o(" \u2014 "),GI=a("a"),zmo=o("M2M100Tokenizer"),Wmo=o(" (M2M100 model)"),Qmo=l(),bh=a("li"),Tie=a("strong"),Hmo=o("marian"),Umo=o(" \u2014 "),OI=a("a"),Jmo=o("MarianTokenizer"),Ymo=o(" (Marian model)"),Kmo=l(),vs=a("li"),Mie=a("strong"),Zmo=o("mbart"),ego=o(" \u2014 "),VI=a("a"),ogo=o("MBartTokenizer"),rgo=o(" or "),XI=a("a"),tgo=o("MBartTokenizerFast"),ago=o(" (mBART model)"),ngo=l(),Fs=a("li"),Eie=a("strong"),sgo=o("mbart50"),lgo=o(" \u2014 "),zI=a("a"),igo=o("MBart50Tokenizer"),dgo=o(" or "),WI=a("a"),cgo=o("MBart50TokenizerFast"),fgo=o(" (mBART-50 model)"),mgo=l(),Ts=a("li"),Cie=a("strong"),ggo=o("megatron-bert"),hgo=o(" \u2014 "),QI=a("a"),pgo=o("BertTokenizer"),_go=o(" or "),HI=a("a"),ugo=o("BertTokenizerFast"),bgo=o(" (Megatron-BERT model)"),vgo=l(),vh=a("li"),wie=a("strong"),Fgo=o("mluke"),Tgo=o(" \u2014 "),UI=a("a"),Mgo=o("MLukeTokenizer"),Ego=o(" (mLUKE model)"),Cgo=l(),Ms=a("li"),Aie=a("strong"),wgo=o("mobilebert"),Ago=o(" \u2014 "),JI=a("a"),Lgo=o("MobileBertTokenizer"),ygo=o(" or "),YI=a("a"),xgo=o("MobileBertTokenizerFast"),$go=o(" (MobileBERT model)"),kgo=l(),Es=a("li"),Lie=a("strong"),Sgo=o("mpnet"),Rgo=o(" \u2014 "),KI=a("a"),Pgo=o("MPNetTokenizer"),Bgo=o(" or "),ZI=a("a"),Igo=o("MPNetTokenizerFast"),Ngo=o(" (MPNet model)"),qgo=l(),Cs=a("li"),yie=a("strong"),jgo=o("mt5"),Dgo=o(" \u2014 "),eN=a("a"),Ggo=o("MT5Tokenizer"),Ogo=o(" or "),oN=a("a"),Vgo=o("MT5TokenizerFast"),Xgo=o(" (MT5 model)"),zgo=l(),ws=a("li"),xie=a("strong"),Wgo=o("mvp"),Qgo=o(" \u2014 "),rN=a("a"),Hgo=o("MvpTokenizer"),Ugo=o(" or "),tN=a("a"),Jgo=o("MvpTokenizerFast"),Ygo=o(" (MVP model)"),Kgo=l(),As=a("li"),$ie=a("strong"),Zgo=o("nezha"),eho=o(" \u2014 "),aN=a("a"),oho=o("BertTokenizer"),rho=o(" or "),nN=a("a"),tho=o("BertTokenizerFast"),aho=o(" (Nezha model)"),nho=l(),Ls=a("li"),kie=a("strong"),sho=o("nllb"),lho=o(" \u2014 "),sN=a("a"),iho=o("NllbTokenizer"),dho=o(" or "),lN=a("a"),cho=o("NllbTokenizerFast"),fho=o(" (NLLB model)"),mho=l(),ys=a("li"),Sie=a("strong"),gho=o("nystromformer"),hho=o(" \u2014 "),iN=a("a"),pho=o("AlbertTokenizer"),_ho=o(" or "),dN=a("a"),uho=o("AlbertTokenizerFast"),bho=o(" (Nystr\xF6mformer model)"),vho=l(),xs=a("li"),Rie=a("strong"),Fho=o("openai-gpt"),Tho=o(" \u2014 "),cN=a("a"),Mho=o("OpenAIGPTTokenizer"),Eho=o(" or "),fN=a("a"),Cho=o("OpenAIGPTTokenizerFast"),who=o(" (OpenAI GPT model)"),Aho=l(),Fh=a("li"),Pie=a("strong"),Lho=o("opt"),yho=o(" \u2014 "),mN=a("a"),xho=o("GPT2Tokenizer"),$ho=o(" (OPT model)"),kho=l(),$s=a("li"),Bie=a("strong"),Sho=o("owlvit"),Rho=o(" \u2014 "),gN=a("a"),Pho=o("CLIPTokenizer"),Bho=o(" or "),hN=a("a"),Iho=o("CLIPTokenizerFast"),Nho=o(" (OWL-ViT model)"),qho=l(),ks=a("li"),Iie=a("strong"),jho=o("pegasus"),Dho=o(" \u2014 "),pN=a("a"),Gho=o("PegasusTokenizer"),Oho=o(" or "),_N=a("a"),Vho=o("PegasusTokenizerFast"),Xho=o(" (Pegasus model)"),zho=l(),Th=a("li"),Nie=a("strong"),Who=o("perceiver"),Qho=o(" \u2014 "),uN=a("a"),Hho=o("PerceiverTokenizer"),Uho=o(" (Perceiver model)"),Jho=l(),Mh=a("li"),qie=a("strong"),Yho=o("phobert"),Kho=o(" \u2014 "),bN=a("a"),Zho=o("PhobertTokenizer"),epo=o(" (PhoBERT model)"),opo=l(),Eh=a("li"),jie=a("strong"),rpo=o("plbart"),tpo=o(" \u2014 "),vN=a("a"),apo=o("PLBartTokenizer"),npo=o(" (PLBart model)"),spo=l(),Ch=a("li"),Die=a("strong"),lpo=o("prophetnet"),ipo=o(" \u2014 "),FN=a("a"),dpo=o("ProphetNetTokenizer"),cpo=o(" (ProphetNet model)"),fpo=l(),Ss=a("li"),Gie=a("strong"),mpo=o("qdqbert"),gpo=o(" \u2014 "),TN=a("a"),hpo=o("BertTokenizer"),ppo=o(" or "),MN=a("a"),_po=o("BertTokenizerFast"),upo=o(" (QDQBert model)"),bpo=l(),wh=a("li"),Oie=a("strong"),vpo=o("rag"),Fpo=o(" \u2014 "),EN=a("a"),Tpo=o("RagTokenizer"),Mpo=o(" (RAG model)"),Epo=l(),Rs=a("li"),Vie=a("strong"),Cpo=o("realm"),wpo=o(" \u2014 "),CN=a("a"),Apo=o("RealmTokenizer"),Lpo=o(" or "),wN=a("a"),ypo=o("RealmTokenizerFast"),xpo=o(" (REALM model)"),$po=l(),Ps=a("li"),Xie=a("strong"),kpo=o("reformer"),Spo=o(" \u2014 "),AN=a("a"),Rpo=o("ReformerTokenizer"),Ppo=o(" or "),LN=a("a"),Bpo=o("ReformerTokenizerFast"),Ipo=o(" (Reformer model)"),Npo=l(),Bs=a("li"),zie=a("strong"),qpo=o("rembert"),jpo=o(" \u2014 "),yN=a("a"),Dpo=o("RemBertTokenizer"),Gpo=o(" or "),xN=a("a"),Opo=o("RemBertTokenizerFast"),Vpo=o(" (RemBERT model)"),Xpo=l(),Is=a("li"),Wie=a("strong"),zpo=o("retribert"),Wpo=o(" \u2014 "),$N=a("a"),Qpo=o("RetriBertTokenizer"),Hpo=o(" or "),kN=a("a"),Upo=o("RetriBertTokenizerFast"),Jpo=o(" (RetriBERT model)"),Ypo=l(),Ns=a("li"),Qie=a("strong"),Kpo=o("roberta"),Zpo=o(" \u2014 "),SN=a("a"),e_o=o("RobertaTokenizer"),o_o=o(" or "),RN=a("a"),r_o=o("RobertaTokenizerFast"),t_o=o(" (RoBERTa model)"),a_o=l(),qs=a("li"),Hie=a("strong"),n_o=o("roformer"),s_o=o(" \u2014 "),PN=a("a"),l_o=o("RoFormerTokenizer"),i_o=o(" or "),BN=a("a"),d_o=o("RoFormerTokenizerFast"),c_o=o(" (RoFormer model)"),f_o=l(),Ah=a("li"),Uie=a("strong"),m_o=o("speech_to_text"),g_o=o(" \u2014 "),IN=a("a"),h_o=o("Speech2TextTokenizer"),p_o=o(" (Speech2Text model)"),__o=l(),Lh=a("li"),Jie=a("strong"),u_o=o("speech_to_text_2"),b_o=o(" \u2014 "),NN=a("a"),v_o=o("Speech2Text2Tokenizer"),F_o=o(" (Speech2Text2 model)"),T_o=l(),js=a("li"),Yie=a("strong"),M_o=o("splinter"),E_o=o(" \u2014 "),qN=a("a"),C_o=o("SplinterTokenizer"),w_o=o(" or "),jN=a("a"),A_o=o("SplinterTokenizerFast"),L_o=o(" (Splinter model)"),y_o=l(),Ds=a("li"),Kie=a("strong"),x_o=o("squeezebert"),$_o=o(" \u2014 "),DN=a("a"),k_o=o("SqueezeBertTokenizer"),S_o=o(" or "),GN=a("a"),R_o=o("SqueezeBertTokenizerFast"),P_o=o(" (SqueezeBERT model)"),B_o=l(),Gs=a("li"),Zie=a("strong"),I_o=o("t5"),N_o=o(" \u2014 "),ON=a("a"),q_o=o("T5Tokenizer"),j_o=o(" or "),VN=a("a"),D_o=o("T5TokenizerFast"),G_o=o(" (T5 model)"),O_o=l(),yh=a("li"),ede=a("strong"),V_o=o("tapas"),X_o=o(" \u2014 "),XN=a("a"),z_o=o("TapasTokenizer"),W_o=o(" (TAPAS model)"),Q_o=l(),xh=a("li"),ode=a("strong"),H_o=o("tapex"),U_o=o(" \u2014 "),zN=a("a"),J_o=o("TapexTokenizer"),Y_o=o(" (TAPEX model)"),K_o=l(),$h=a("li"),rde=a("strong"),Z_o=o("transfo-xl"),euo=o(" \u2014 "),WN=a("a"),ouo=o("TransfoXLTokenizer"),ruo=o(" (Transformer-XL model)"),tuo=l(),Os=a("li"),tde=a("strong"),auo=o("vilt"),nuo=o(" \u2014 "),QN=a("a"),suo=o("BertTokenizer"),luo=o(" or "),HN=a("a"),iuo=o("BertTokenizerFast"),duo=o(" (ViLT model)"),cuo=l(),Vs=a("li"),ade=a("strong"),fuo=o("visual_bert"),muo=o(" \u2014 "),UN=a("a"),guo=o("BertTokenizer"),huo=o(" or "),JN=a("a"),puo=o("BertTokenizerFast"),_uo=o(" (VisualBERT model)"),uuo=l(),kh=a("li"),nde=a("strong"),buo=o("wav2vec2"),vuo=o(" \u2014 "),YN=a("a"),Fuo=o("Wav2Vec2CTCTokenizer"),Tuo=o(" (Wav2Vec2 model)"),Muo=l(),Sh=a("li"),sde=a("strong"),Euo=o("wav2vec2-conformer"),Cuo=o(" \u2014 "),KN=a("a"),wuo=o("Wav2Vec2CTCTokenizer"),Auo=o(" (Wav2Vec2-Conformer model)"),Luo=l(),Rh=a("li"),lde=a("strong"),yuo=o("wav2vec2_phoneme"),xuo=o(" \u2014 "),ZN=a("a"),$uo=o("Wav2Vec2PhonemeCTCTokenizer"),kuo=o(" (Wav2Vec2Phoneme model)"),Suo=l(),Xs=a("li"),ide=a("strong"),Ruo=o("xglm"),Puo=o(" \u2014 "),eq=a("a"),Buo=o("XGLMTokenizer"),Iuo=o(" or "),oq=a("a"),Nuo=o("XGLMTokenizerFast"),quo=o(" (XGLM model)"),juo=l(),Ph=a("li"),dde=a("strong"),Duo=o("xlm"),Guo=o(" \u2014 "),rq=a("a"),Ouo=o("XLMTokenizer"),Vuo=o(" (XLM model)"),Xuo=l(),Bh=a("li"),cde=a("strong"),zuo=o("xlm-prophetnet"),Wuo=o(" \u2014 "),tq=a("a"),Quo=o("XLMProphetNetTokenizer"),Huo=o(" (XLM-ProphetNet model)"),Uuo=l(),zs=a("li"),fde=a("strong"),Juo=o("xlm-roberta"),Yuo=o(" \u2014 "),aq=a("a"),Kuo=o("XLMRobertaTokenizer"),Zuo=o(" or "),nq=a("a"),e1o=o("XLMRobertaTokenizerFast"),o1o=o(" (XLM-RoBERTa model)"),r1o=l(),Ws=a("li"),mde=a("strong"),t1o=o("xlm-roberta-xl"),a1o=o(" \u2014 "),sq=a("a"),n1o=o("RobertaTokenizer"),s1o=o(" or "),lq=a("a"),l1o=o("RobertaTokenizerFast"),i1o=o(" (XLM-RoBERTa-XL model)"),d1o=l(),Qs=a("li"),gde=a("strong"),c1o=o("xlnet"),f1o=o(" \u2014 "),iq=a("a"),m1o=o("XLNetTokenizer"),g1o=o(" or "),dq=a("a"),h1o=o("XLNetTokenizerFast"),p1o=o(" (XLNet model)"),_1o=l(),Hs=a("li"),hde=a("strong"),u1o=o("yoso"),b1o=o(" \u2014 "),cq=a("a"),v1o=o("AlbertTokenizer"),F1o=o(" or "),fq=a("a"),T1o=o("AlbertTokenizerFast"),M1o=o(" (YOSO model)"),E1o=l(),F(Ih.$$.fragment),C1o=l(),Nh=a("div"),F(yy.$$.fragment),w1o=l(),pde=a("p"),A1o=o("Register a new tokenizer in this mapping."),KXe=l(),Di=a("h2"),qh=a("a"),_de=a("span"),F(xy.$$.fragment),L1o=l(),ude=a("span"),y1o=o("AutoFeatureExtractor"),ZXe=l(),xo=a("div"),F($y.$$.fragment),x1o=l(),ky=a("p"),$1o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),mq=a("a"),k1o=o("AutoFeatureExtractor.from_pretrained()"),S1o=o(" class method."),R1o=l(),Sy=a("p"),P1o=o("This class cannot be instantiated directly using "),bde=a("code"),B1o=o("__init__()"),I1o=o(" (throws an error)."),N1o=l(),Ue=a("div"),F(Ry.$$.fragment),q1o=l(),vde=a("p"),j1o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),D1o=l(),Ba=a("p"),G1o=o("The feature extractor class to instantiate is selected based on the "),Fde=a("code"),O1o=o("model_type"),V1o=o(` property of the config object
(either passed as an argument or loaded from `),Tde=a("code"),X1o=o("pretrained_model_name_or_path"),z1o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Mde=a("code"),W1o=o("pretrained_model_name_or_path"),Q1o=o(":"),H1o=l(),J=a("ul"),jh=a("li"),Ede=a("strong"),U1o=o("beit"),J1o=o(" \u2014 "),gq=a("a"),Y1o=o("BeitFeatureExtractor"),K1o=o(" (BEiT model)"),Z1o=l(),Dh=a("li"),Cde=a("strong"),e4o=o("clip"),o4o=o(" \u2014 "),hq=a("a"),r4o=o("CLIPFeatureExtractor"),t4o=o(" (CLIP model)"),a4o=l(),Gh=a("li"),wde=a("strong"),n4o=o("convnext"),s4o=o(" \u2014 "),pq=a("a"),l4o=o("ConvNextFeatureExtractor"),i4o=o(" (ConvNeXT model)"),d4o=l(),Oh=a("li"),Ade=a("strong"),c4o=o("cvt"),f4o=o(" \u2014 "),_q=a("a"),m4o=o("ConvNextFeatureExtractor"),g4o=o(" (CvT model)"),h4o=l(),Vh=a("li"),Lde=a("strong"),p4o=o("data2vec-audio"),_4o=o(" \u2014 "),uq=a("a"),u4o=o("Wav2Vec2FeatureExtractor"),b4o=o(" (Data2VecAudio model)"),v4o=l(),Xh=a("li"),yde=a("strong"),F4o=o("data2vec-vision"),T4o=o(" \u2014 "),bq=a("a"),M4o=o("BeitFeatureExtractor"),E4o=o(" (Data2VecVision model)"),C4o=l(),zh=a("li"),xde=a("strong"),w4o=o("deit"),A4o=o(" \u2014 "),vq=a("a"),L4o=o("DeiTFeatureExtractor"),y4o=o(" (DeiT model)"),x4o=l(),Wh=a("li"),$de=a("strong"),$4o=o("detr"),k4o=o(" \u2014 "),Fq=a("a"),S4o=o("DetrFeatureExtractor"),R4o=o(" (DETR model)"),P4o=l(),Qh=a("li"),kde=a("strong"),B4o=o("dpt"),I4o=o(" \u2014 "),Tq=a("a"),N4o=o("DPTFeatureExtractor"),q4o=o(" (DPT model)"),j4o=l(),Hh=a("li"),Sde=a("strong"),D4o=o("flava"),G4o=o(" \u2014 "),Mq=a("a"),O4o=o("FlavaFeatureExtractor"),V4o=o(" (FLAVA model)"),X4o=l(),Uh=a("li"),Rde=a("strong"),z4o=o("glpn"),W4o=o(" \u2014 "),Eq=a("a"),Q4o=o("GLPNFeatureExtractor"),H4o=o(" (GLPN model)"),U4o=l(),Jh=a("li"),Pde=a("strong"),J4o=o("groupvit"),Y4o=o(" \u2014 "),Cq=a("a"),K4o=o("CLIPFeatureExtractor"),Z4o=o(" (GroupViT model)"),e2o=l(),Yh=a("li"),Bde=a("strong"),o2o=o("hubert"),r2o=o(" \u2014 "),wq=a("a"),t2o=o("Wav2Vec2FeatureExtractor"),a2o=o(" (Hubert model)"),n2o=l(),Kh=a("li"),Ide=a("strong"),s2o=o("imagegpt"),l2o=o(" \u2014 "),Aq=a("a"),i2o=o("ImageGPTFeatureExtractor"),d2o=o(" (ImageGPT model)"),c2o=l(),Zh=a("li"),Nde=a("strong"),f2o=o("layoutlmv2"),m2o=o(" \u2014 "),Lq=a("a"),g2o=o("LayoutLMv2FeatureExtractor"),h2o=o(" (LayoutLMv2 model)"),p2o=l(),ep=a("li"),qde=a("strong"),_2o=o("layoutlmv3"),u2o=o(" \u2014 "),yq=a("a"),b2o=o("LayoutLMv3FeatureExtractor"),v2o=o(" (LayoutLMv3 model)"),F2o=l(),op=a("li"),jde=a("strong"),T2o=o("levit"),M2o=o(" \u2014 "),xq=a("a"),E2o=o("LevitFeatureExtractor"),C2o=o(" (LeViT model)"),w2o=l(),rp=a("li"),Dde=a("strong"),A2o=o("maskformer"),L2o=o(" \u2014 "),$q=a("a"),y2o=o("MaskFormerFeatureExtractor"),x2o=o(" (MaskFormer model)"),$2o=l(),tp=a("li"),Gde=a("strong"),k2o=o("mctct"),S2o=o(" \u2014 "),kq=a("a"),R2o=o("MCTCTFeatureExtractor"),P2o=o(" (M-CTC-T model)"),B2o=l(),ap=a("li"),Ode=a("strong"),I2o=o("mobilevit"),N2o=o(" \u2014 "),Sq=a("a"),q2o=o("MobileViTFeatureExtractor"),j2o=o(" (MobileViT model)"),D2o=l(),np=a("li"),Vde=a("strong"),G2o=o("owlvit"),O2o=o(" \u2014 "),Rq=a("a"),V2o=o("OwlViTFeatureExtractor"),X2o=o(" (OWL-ViT model)"),z2o=l(),sp=a("li"),Xde=a("strong"),W2o=o("perceiver"),Q2o=o(" \u2014 "),Pq=a("a"),H2o=o("PerceiverFeatureExtractor"),U2o=o(" (Perceiver model)"),J2o=l(),lp=a("li"),zde=a("strong"),Y2o=o("poolformer"),K2o=o(" \u2014 "),Bq=a("a"),Z2o=o("PoolFormerFeatureExtractor"),ebo=o(" (PoolFormer model)"),obo=l(),ip=a("li"),Wde=a("strong"),rbo=o("regnet"),tbo=o(" \u2014 "),Iq=a("a"),abo=o("ConvNextFeatureExtractor"),nbo=o(" (RegNet model)"),sbo=l(),dp=a("li"),Qde=a("strong"),lbo=o("resnet"),ibo=o(" \u2014 "),Nq=a("a"),dbo=o("ConvNextFeatureExtractor"),cbo=o(" (ResNet model)"),fbo=l(),cp=a("li"),Hde=a("strong"),mbo=o("segformer"),gbo=o(" \u2014 "),qq=a("a"),hbo=o("SegformerFeatureExtractor"),pbo=o(" (SegFormer model)"),_bo=l(),fp=a("li"),Ude=a("strong"),ubo=o("speech_to_text"),bbo=o(" \u2014 "),jq=a("a"),vbo=o("Speech2TextFeatureExtractor"),Fbo=o(" (Speech2Text model)"),Tbo=l(),mp=a("li"),Jde=a("strong"),Mbo=o("swin"),Ebo=o(" \u2014 "),Dq=a("a"),Cbo=o("ViTFeatureExtractor"),wbo=o(" (Swin Transformer model)"),Abo=l(),gp=a("li"),Yde=a("strong"),Lbo=o("van"),ybo=o(" \u2014 "),Gq=a("a"),xbo=o("ConvNextFeatureExtractor"),$bo=o(" (VAN model)"),kbo=l(),hp=a("li"),Kde=a("strong"),Sbo=o("vilt"),Rbo=o(" \u2014 "),Oq=a("a"),Pbo=o("ViltFeatureExtractor"),Bbo=o(" (ViLT model)"),Ibo=l(),pp=a("li"),Zde=a("strong"),Nbo=o("vit"),qbo=o(" \u2014 "),Vq=a("a"),jbo=o("ViTFeatureExtractor"),Dbo=o(" (ViT model)"),Gbo=l(),_p=a("li"),ece=a("strong"),Obo=o("vit_mae"),Vbo=o(" \u2014 "),Xq=a("a"),Xbo=o("ViTFeatureExtractor"),zbo=o(" (ViTMAE model)"),Wbo=l(),up=a("li"),oce=a("strong"),Qbo=o("wav2vec2"),Hbo=o(" \u2014 "),zq=a("a"),Ubo=o("Wav2Vec2FeatureExtractor"),Jbo=o(" (Wav2Vec2 model)"),Ybo=l(),bp=a("li"),rce=a("strong"),Kbo=o("wav2vec2-conformer"),Zbo=o(" \u2014 "),Wq=a("a"),evo=o("Wav2Vec2FeatureExtractor"),ovo=o(" (Wav2Vec2-Conformer model)"),rvo=l(),vp=a("li"),tce=a("strong"),tvo=o("yolos"),avo=o(" \u2014 "),Qq=a("a"),nvo=o("YolosFeatureExtractor"),svo=o(" (YOLOS model)"),lvo=l(),F(Fp.$$.fragment),ivo=l(),F(Tp.$$.fragment),dvo=l(),Mp=a("div"),F(Py.$$.fragment),cvo=l(),ace=a("p"),fvo=o("Register a new feature extractor for this class."),eze=l(),Gi=a("h2"),Ep=a("a"),nce=a("span"),F(By.$$.fragment),mvo=l(),sce=a("span"),gvo=o("AutoProcessor"),oze=l(),$o=a("div"),F(Iy.$$.fragment),hvo=l(),Ny=a("p"),pvo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Hq=a("a"),_vo=o("AutoProcessor.from_pretrained()"),uvo=o(" class method."),bvo=l(),qy=a("p"),vvo=o("This class cannot be instantiated directly using "),lce=a("code"),Fvo=o("__init__()"),Tvo=o(" (throws an error)."),Mvo=l(),Je=a("div"),F(jy.$$.fragment),Evo=l(),ice=a("p"),Cvo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),wvo=l(),Oi=a("p"),Avo=o("The processor class to instantiate is selected based on the "),dce=a("code"),Lvo=o("model_type"),yvo=o(` property of the config object (either
passed as an argument or loaded from `),cce=a("code"),xvo=o("pretrained_model_name_or_path"),$vo=o(" if possible):"),kvo=l(),fe=a("ul"),Cp=a("li"),fce=a("strong"),Svo=o("clip"),Rvo=o(" \u2014 "),Uq=a("a"),Pvo=o("CLIPProcessor"),Bvo=o(" (CLIP model)"),Ivo=l(),wp=a("li"),mce=a("strong"),Nvo=o("flava"),qvo=o(" \u2014 "),Jq=a("a"),jvo=o("FlavaProcessor"),Dvo=o(" (FLAVA model)"),Gvo=l(),Ap=a("li"),gce=a("strong"),Ovo=o("groupvit"),Vvo=o(" \u2014 "),Yq=a("a"),Xvo=o("CLIPProcessor"),zvo=o(" (GroupViT model)"),Wvo=l(),Lp=a("li"),hce=a("strong"),Qvo=o("layoutlmv2"),Hvo=o(" \u2014 "),Kq=a("a"),Uvo=o("LayoutLMv2Processor"),Jvo=o(" (LayoutLMv2 model)"),Yvo=l(),yp=a("li"),pce=a("strong"),Kvo=o("layoutlmv3"),Zvo=o(" \u2014 "),Zq=a("a"),e0o=o("LayoutLMv3Processor"),o0o=o(" (LayoutLMv3 model)"),r0o=l(),xp=a("li"),_ce=a("strong"),t0o=o("layoutxlm"),a0o=o(" \u2014 "),ej=a("a"),n0o=o("LayoutXLMProcessor"),s0o=o(" (LayoutXLM model)"),l0o=l(),$p=a("li"),uce=a("strong"),i0o=o("owlvit"),d0o=o(" \u2014 "),oj=a("a"),c0o=o("OwlViTProcessor"),f0o=o(" (OWL-ViT model)"),m0o=l(),kp=a("li"),bce=a("strong"),g0o=o("sew"),h0o=o(" \u2014 "),rj=a("a"),p0o=o("Wav2Vec2Processor"),_0o=o(" (SEW model)"),u0o=l(),Sp=a("li"),vce=a("strong"),b0o=o("sew-d"),v0o=o(" \u2014 "),tj=a("a"),F0o=o("Wav2Vec2Processor"),T0o=o(" (SEW-D model)"),M0o=l(),Rp=a("li"),Fce=a("strong"),E0o=o("speech_to_text"),C0o=o(" \u2014 "),aj=a("a"),w0o=o("Speech2TextProcessor"),A0o=o(" (Speech2Text model)"),L0o=l(),Pp=a("li"),Tce=a("strong"),y0o=o("speech_to_text_2"),x0o=o(" \u2014 "),nj=a("a"),$0o=o("Speech2Text2Processor"),k0o=o(" (Speech2Text2 model)"),S0o=l(),Bp=a("li"),Mce=a("strong"),R0o=o("trocr"),P0o=o(" \u2014 "),sj=a("a"),B0o=o("TrOCRProcessor"),I0o=o(" (TrOCR model)"),N0o=l(),Ip=a("li"),Ece=a("strong"),q0o=o("unispeech"),j0o=o(" \u2014 "),lj=a("a"),D0o=o("Wav2Vec2Processor"),G0o=o(" (UniSpeech model)"),O0o=l(),Np=a("li"),Cce=a("strong"),V0o=o("unispeech-sat"),X0o=o(" \u2014 "),ij=a("a"),z0o=o("Wav2Vec2Processor"),W0o=o(" (UniSpeechSat model)"),Q0o=l(),qp=a("li"),wce=a("strong"),H0o=o("vilt"),U0o=o(" \u2014 "),dj=a("a"),J0o=o("ViltProcessor"),Y0o=o(" (ViLT model)"),K0o=l(),jp=a("li"),Ace=a("strong"),Z0o=o("vision-text-dual-encoder"),eFo=o(" \u2014 "),cj=a("a"),oFo=o("VisionTextDualEncoderProcessor"),rFo=o(" (VisionTextDualEncoder model)"),tFo=l(),Dp=a("li"),Lce=a("strong"),aFo=o("wav2vec2"),nFo=o(" \u2014 "),fj=a("a"),sFo=o("Wav2Vec2Processor"),lFo=o(" (Wav2Vec2 model)"),iFo=l(),Gp=a("li"),yce=a("strong"),dFo=o("wav2vec2-conformer"),cFo=o(" \u2014 "),mj=a("a"),fFo=o("Wav2Vec2Processor"),mFo=o(" (Wav2Vec2-Conformer model)"),gFo=l(),Op=a("li"),xce=a("strong"),hFo=o("wavlm"),pFo=o(" \u2014 "),gj=a("a"),_Fo=o("Wav2Vec2Processor"),uFo=o(" (WavLM model)"),bFo=l(),F(Vp.$$.fragment),vFo=l(),F(Xp.$$.fragment),FFo=l(),zp=a("div"),F(Dy.$$.fragment),TFo=l(),$ce=a("p"),MFo=o("Register a new processor for this class."),rze=l(),Vi=a("h2"),Wp=a("a"),kce=a("span"),F(Gy.$$.fragment),EFo=l(),Sce=a("span"),CFo=o("AutoModel"),tze=l(),ko=a("div"),F(Oy.$$.fragment),wFo=l(),Xi=a("p"),AFo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hj=a("a"),LFo=o("from_pretrained()"),yFo=o(" class method or the "),pj=a("a"),xFo=o("from_config()"),$Fo=o(` class
method.`),kFo=l(),Vy=a("p"),SFo=o("This class cannot be instantiated directly using "),Rce=a("code"),RFo=o("__init__()"),PFo=o(" (throws an error)."),BFo=l(),it=a("div"),F(Xy.$$.fragment),IFo=l(),Pce=a("p"),NFo=o("Instantiates one of the base model classes of the library from a configuration."),qFo=l(),zi=a("p"),jFo=o(`Note:
Loading a model from its configuration file does `),Bce=a("strong"),DFo=o("not"),GFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_j=a("a"),OFo=o("from_pretrained()"),VFo=o(" to load the model weights."),XFo=l(),F(Qp.$$.fragment),zFo=l(),Ye=a("div"),F(zy.$$.fragment),WFo=l(),Ice=a("p"),QFo=o("Instantiate one of the base model classes of the library from a pretrained model."),HFo=l(),Ia=a("p"),UFo=o("The model class to instantiate is selected based on the "),Nce=a("code"),JFo=o("model_type"),YFo=o(` property of the config object (either
passed as an argument or loaded from `),qce=a("code"),KFo=o("pretrained_model_name_or_path"),ZFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=a("code"),e6o=o("pretrained_model_name_or_path"),o6o=o(":"),r6o=l(),y=a("ul"),Hp=a("li"),Dce=a("strong"),t6o=o("albert"),a6o=o(" \u2014 "),uj=a("a"),n6o=o("AlbertModel"),s6o=o(" (ALBERT model)"),l6o=l(),Up=a("li"),Gce=a("strong"),i6o=o("bart"),d6o=o(" \u2014 "),bj=a("a"),c6o=o("BartModel"),f6o=o(" (BART model)"),m6o=l(),Jp=a("li"),Oce=a("strong"),g6o=o("beit"),h6o=o(" \u2014 "),vj=a("a"),p6o=o("BeitModel"),_6o=o(" (BEiT model)"),u6o=l(),Yp=a("li"),Vce=a("strong"),b6o=o("bert"),v6o=o(" \u2014 "),Fj=a("a"),F6o=o("BertModel"),T6o=o(" (BERT model)"),M6o=l(),Kp=a("li"),Xce=a("strong"),E6o=o("bert-generation"),C6o=o(" \u2014 "),Tj=a("a"),w6o=o("BertGenerationEncoder"),A6o=o(" (Bert Generation model)"),L6o=l(),Zp=a("li"),zce=a("strong"),y6o=o("big_bird"),x6o=o(" \u2014 "),Mj=a("a"),$6o=o("BigBirdModel"),k6o=o(" (BigBird model)"),S6o=l(),e_=a("li"),Wce=a("strong"),R6o=o("bigbird_pegasus"),P6o=o(" \u2014 "),Ej=a("a"),B6o=o("BigBirdPegasusModel"),I6o=o(" (BigBird-Pegasus model)"),N6o=l(),o_=a("li"),Qce=a("strong"),q6o=o("blenderbot"),j6o=o(" \u2014 "),Cj=a("a"),D6o=o("BlenderbotModel"),G6o=o(" (Blenderbot model)"),O6o=l(),r_=a("li"),Hce=a("strong"),V6o=o("blenderbot-small"),X6o=o(" \u2014 "),wj=a("a"),z6o=o("BlenderbotSmallModel"),W6o=o(" (BlenderbotSmall model)"),Q6o=l(),t_=a("li"),Uce=a("strong"),H6o=o("bloom"),U6o=o(" \u2014 "),Aj=a("a"),J6o=o("BloomModel"),Y6o=o(" (BLOOM model)"),K6o=l(),a_=a("li"),Jce=a("strong"),Z6o=o("camembert"),eTo=o(" \u2014 "),Lj=a("a"),oTo=o("CamembertModel"),rTo=o(" (CamemBERT model)"),tTo=l(),n_=a("li"),Yce=a("strong"),aTo=o("canine"),nTo=o(" \u2014 "),yj=a("a"),sTo=o("CanineModel"),lTo=o(" (CANINE model)"),iTo=l(),s_=a("li"),Kce=a("strong"),dTo=o("clip"),cTo=o(" \u2014 "),xj=a("a"),fTo=o("CLIPModel"),mTo=o(" (CLIP model)"),gTo=l(),l_=a("li"),Zce=a("strong"),hTo=o("codegen"),pTo=o(" \u2014 "),$j=a("a"),_To=o("CodeGenModel"),uTo=o(" (CodeGen model)"),bTo=l(),i_=a("li"),efe=a("strong"),vTo=o("convbert"),FTo=o(" \u2014 "),kj=a("a"),TTo=o("ConvBertModel"),MTo=o(" (ConvBERT model)"),ETo=l(),d_=a("li"),ofe=a("strong"),CTo=o("convnext"),wTo=o(" \u2014 "),Sj=a("a"),ATo=o("ConvNextModel"),LTo=o(" (ConvNeXT model)"),yTo=l(),c_=a("li"),rfe=a("strong"),xTo=o("ctrl"),$To=o(" \u2014 "),Rj=a("a"),kTo=o("CTRLModel"),STo=o(" (CTRL model)"),RTo=l(),f_=a("li"),tfe=a("strong"),PTo=o("cvt"),BTo=o(" \u2014 "),Pj=a("a"),ITo=o("CvtModel"),NTo=o(" (CvT model)"),qTo=l(),m_=a("li"),afe=a("strong"),jTo=o("data2vec-audio"),DTo=o(" \u2014 "),Bj=a("a"),GTo=o("Data2VecAudioModel"),OTo=o(" (Data2VecAudio model)"),VTo=l(),g_=a("li"),nfe=a("strong"),XTo=o("data2vec-text"),zTo=o(" \u2014 "),Ij=a("a"),WTo=o("Data2VecTextModel"),QTo=o(" (Data2VecText model)"),HTo=l(),h_=a("li"),sfe=a("strong"),UTo=o("data2vec-vision"),JTo=o(" \u2014 "),Nj=a("a"),YTo=o("Data2VecVisionModel"),KTo=o(" (Data2VecVision model)"),ZTo=l(),p_=a("li"),lfe=a("strong"),e7o=o("deberta"),o7o=o(" \u2014 "),qj=a("a"),r7o=o("DebertaModel"),t7o=o(" (DeBERTa model)"),a7o=l(),__=a("li"),ife=a("strong"),n7o=o("deberta-v2"),s7o=o(" \u2014 "),jj=a("a"),l7o=o("DebertaV2Model"),i7o=o(" (DeBERTa-v2 model)"),d7o=l(),u_=a("li"),dfe=a("strong"),c7o=o("decision_transformer"),f7o=o(" \u2014 "),Dj=a("a"),m7o=o("DecisionTransformerModel"),g7o=o(" (Decision Transformer model)"),h7o=l(),b_=a("li"),cfe=a("strong"),p7o=o("deit"),_7o=o(" \u2014 "),Gj=a("a"),u7o=o("DeiTModel"),b7o=o(" (DeiT model)"),v7o=l(),v_=a("li"),ffe=a("strong"),F7o=o("detr"),T7o=o(" \u2014 "),Oj=a("a"),M7o=o("DetrModel"),E7o=o(" (DETR model)"),C7o=l(),F_=a("li"),mfe=a("strong"),w7o=o("distilbert"),A7o=o(" \u2014 "),Vj=a("a"),L7o=o("DistilBertModel"),y7o=o(" (DistilBERT model)"),x7o=l(),T_=a("li"),gfe=a("strong"),$7o=o("dpr"),k7o=o(" \u2014 "),Xj=a("a"),S7o=o("DPRQuestionEncoder"),R7o=o(" (DPR model)"),P7o=l(),M_=a("li"),hfe=a("strong"),B7o=o("dpt"),I7o=o(" \u2014 "),zj=a("a"),N7o=o("DPTModel"),q7o=o(" (DPT model)"),j7o=l(),E_=a("li"),pfe=a("strong"),D7o=o("electra"),G7o=o(" \u2014 "),Wj=a("a"),O7o=o("ElectraModel"),V7o=o(" (ELECTRA model)"),X7o=l(),C_=a("li"),_fe=a("strong"),z7o=o("flaubert"),W7o=o(" \u2014 "),Qj=a("a"),Q7o=o("FlaubertModel"),H7o=o(" (FlauBERT model)"),U7o=l(),w_=a("li"),ufe=a("strong"),J7o=o("flava"),Y7o=o(" \u2014 "),Hj=a("a"),K7o=o("FlavaModel"),Z7o=o(" (FLAVA model)"),eMo=l(),A_=a("li"),bfe=a("strong"),oMo=o("fnet"),rMo=o(" \u2014 "),Uj=a("a"),tMo=o("FNetModel"),aMo=o(" (FNet model)"),nMo=l(),L_=a("li"),vfe=a("strong"),sMo=o("fsmt"),lMo=o(" \u2014 "),Jj=a("a"),iMo=o("FSMTModel"),dMo=o(" (FairSeq Machine-Translation model)"),cMo=l(),Us=a("li"),Ffe=a("strong"),fMo=o("funnel"),mMo=o(" \u2014 "),Yj=a("a"),gMo=o("FunnelModel"),hMo=o(" or "),Kj=a("a"),pMo=o("FunnelBaseModel"),_Mo=o(" (Funnel Transformer model)"),uMo=l(),y_=a("li"),Tfe=a("strong"),bMo=o("glpn"),vMo=o(" \u2014 "),Zj=a("a"),FMo=o("GLPNModel"),TMo=o(" (GLPN model)"),MMo=l(),x_=a("li"),Mfe=a("strong"),EMo=o("gpt2"),CMo=o(" \u2014 "),eD=a("a"),wMo=o("GPT2Model"),AMo=o(" (OpenAI GPT-2 model)"),LMo=l(),$_=a("li"),Efe=a("strong"),yMo=o("gpt_neo"),xMo=o(" \u2014 "),oD=a("a"),$Mo=o("GPTNeoModel"),kMo=o(" (GPT Neo model)"),SMo=l(),k_=a("li"),Cfe=a("strong"),RMo=o("gpt_neox"),PMo=o(" \u2014 "),rD=a("a"),BMo=o("GPTNeoXModel"),IMo=o(" (GPT NeoX model)"),NMo=l(),S_=a("li"),wfe=a("strong"),qMo=o("gptj"),jMo=o(" \u2014 "),tD=a("a"),DMo=o("GPTJModel"),GMo=o(" (GPT-J model)"),OMo=l(),R_=a("li"),Afe=a("strong"),VMo=o("groupvit"),XMo=o(" \u2014 "),aD=a("a"),zMo=o("GroupViTModel"),WMo=o(" (GroupViT model)"),QMo=l(),P_=a("li"),Lfe=a("strong"),HMo=o("hubert"),UMo=o(" \u2014 "),nD=a("a"),JMo=o("HubertModel"),YMo=o(" (Hubert model)"),KMo=l(),B_=a("li"),yfe=a("strong"),ZMo=o("ibert"),eEo=o(" \u2014 "),sD=a("a"),oEo=o("IBertModel"),rEo=o(" (I-BERT model)"),tEo=l(),I_=a("li"),xfe=a("strong"),aEo=o("imagegpt"),nEo=o(" \u2014 "),lD=a("a"),sEo=o("ImageGPTModel"),lEo=o(" (ImageGPT model)"),iEo=l(),N_=a("li"),$fe=a("strong"),dEo=o("layoutlm"),cEo=o(" \u2014 "),iD=a("a"),fEo=o("LayoutLMModel"),mEo=o(" (LayoutLM model)"),gEo=l(),q_=a("li"),kfe=a("strong"),hEo=o("layoutlmv2"),pEo=o(" \u2014 "),dD=a("a"),_Eo=o("LayoutLMv2Model"),uEo=o(" (LayoutLMv2 model)"),bEo=l(),j_=a("li"),Sfe=a("strong"),vEo=o("layoutlmv3"),FEo=o(" \u2014 "),cD=a("a"),TEo=o("LayoutLMv3Model"),MEo=o(" (LayoutLMv3 model)"),EEo=l(),D_=a("li"),Rfe=a("strong"),CEo=o("led"),wEo=o(" \u2014 "),fD=a("a"),AEo=o("LEDModel"),LEo=o(" (LED model)"),yEo=l(),G_=a("li"),Pfe=a("strong"),xEo=o("levit"),$Eo=o(" \u2014 "),mD=a("a"),kEo=o("LevitModel"),SEo=o(" (LeViT model)"),REo=l(),O_=a("li"),Bfe=a("strong"),PEo=o("longformer"),BEo=o(" \u2014 "),gD=a("a"),IEo=o("LongformerModel"),NEo=o(" (Longformer model)"),qEo=l(),V_=a("li"),Ife=a("strong"),jEo=o("longt5"),DEo=o(" \u2014 "),hD=a("a"),GEo=o("LongT5Model"),OEo=o(" (LongT5 model)"),VEo=l(),X_=a("li"),Nfe=a("strong"),XEo=o("luke"),zEo=o(" \u2014 "),pD=a("a"),WEo=o("LukeModel"),QEo=o(" (LUKE model)"),HEo=l(),z_=a("li"),qfe=a("strong"),UEo=o("lxmert"),JEo=o(" \u2014 "),_D=a("a"),YEo=o("LxmertModel"),KEo=o(" (LXMERT model)"),ZEo=l(),W_=a("li"),jfe=a("strong"),eCo=o("m2m_100"),oCo=o(" \u2014 "),uD=a("a"),rCo=o("M2M100Model"),tCo=o(" (M2M100 model)"),aCo=l(),Q_=a("li"),Dfe=a("strong"),nCo=o("marian"),sCo=o(" \u2014 "),bD=a("a"),lCo=o("MarianModel"),iCo=o(" (Marian model)"),dCo=l(),H_=a("li"),Gfe=a("strong"),cCo=o("maskformer"),fCo=o(" \u2014 "),vD=a("a"),mCo=o("MaskFormerModel"),gCo=o(" (MaskFormer model)"),hCo=l(),U_=a("li"),Ofe=a("strong"),pCo=o("mbart"),_Co=o(" \u2014 "),FD=a("a"),uCo=o("MBartModel"),bCo=o(" (mBART model)"),vCo=l(),J_=a("li"),Vfe=a("strong"),FCo=o("mctct"),TCo=o(" \u2014 "),TD=a("a"),MCo=o("MCTCTModel"),ECo=o(" (M-CTC-T model)"),CCo=l(),Y_=a("li"),Xfe=a("strong"),wCo=o("megatron-bert"),ACo=o(" \u2014 "),MD=a("a"),LCo=o("MegatronBertModel"),yCo=o(" (Megatron-BERT model)"),xCo=l(),K_=a("li"),zfe=a("strong"),$Co=o("mobilebert"),kCo=o(" \u2014 "),ED=a("a"),SCo=o("MobileBertModel"),RCo=o(" (MobileBERT model)"),PCo=l(),Z_=a("li"),Wfe=a("strong"),BCo=o("mobilevit"),ICo=o(" \u2014 "),CD=a("a"),NCo=o("MobileViTModel"),qCo=o(" (MobileViT model)"),jCo=l(),eu=a("li"),Qfe=a("strong"),DCo=o("mpnet"),GCo=o(" \u2014 "),wD=a("a"),OCo=o("MPNetModel"),VCo=o(" (MPNet model)"),XCo=l(),ou=a("li"),Hfe=a("strong"),zCo=o("mt5"),WCo=o(" \u2014 "),AD=a("a"),QCo=o("MT5Model"),HCo=o(" (MT5 model)"),UCo=l(),ru=a("li"),Ufe=a("strong"),JCo=o("mvp"),YCo=o(" \u2014 "),LD=a("a"),KCo=o("MvpModel"),ZCo=o(" (MVP model)"),e5o=l(),tu=a("li"),Jfe=a("strong"),o5o=o("nezha"),r5o=o(" \u2014 "),yD=a("a"),t5o=o("NezhaModel"),a5o=o(" (Nezha model)"),n5o=l(),au=a("li"),Yfe=a("strong"),s5o=o("nllb"),l5o=o(" \u2014 "),xD=a("a"),i5o=o("M2M100Model"),d5o=o(" (NLLB model)"),c5o=l(),nu=a("li"),Kfe=a("strong"),f5o=o("nystromformer"),m5o=o(" \u2014 "),$D=a("a"),g5o=o("NystromformerModel"),h5o=o(" (Nystr\xF6mformer model)"),p5o=l(),su=a("li"),Zfe=a("strong"),_5o=o("openai-gpt"),u5o=o(" \u2014 "),kD=a("a"),b5o=o("OpenAIGPTModel"),v5o=o(" (OpenAI GPT model)"),F5o=l(),lu=a("li"),eme=a("strong"),T5o=o("opt"),M5o=o(" \u2014 "),SD=a("a"),E5o=o("OPTModel"),C5o=o(" (OPT model)"),w5o=l(),iu=a("li"),ome=a("strong"),A5o=o("owlvit"),L5o=o(" \u2014 "),RD=a("a"),y5o=o("OwlViTModel"),x5o=o(" (OWL-ViT model)"),$5o=l(),du=a("li"),rme=a("strong"),k5o=o("pegasus"),S5o=o(" \u2014 "),PD=a("a"),R5o=o("PegasusModel"),P5o=o(" (Pegasus model)"),B5o=l(),cu=a("li"),tme=a("strong"),I5o=o("perceiver"),N5o=o(" \u2014 "),BD=a("a"),q5o=o("PerceiverModel"),j5o=o(" (Perceiver model)"),D5o=l(),fu=a("li"),ame=a("strong"),G5o=o("plbart"),O5o=o(" \u2014 "),ID=a("a"),V5o=o("PLBartModel"),X5o=o(" (PLBart model)"),z5o=l(),mu=a("li"),nme=a("strong"),W5o=o("poolformer"),Q5o=o(" \u2014 "),ND=a("a"),H5o=o("PoolFormerModel"),U5o=o(" (PoolFormer model)"),J5o=l(),gu=a("li"),sme=a("strong"),Y5o=o("prophetnet"),K5o=o(" \u2014 "),qD=a("a"),Z5o=o("ProphetNetModel"),e3o=o(" (ProphetNet model)"),o3o=l(),hu=a("li"),lme=a("strong"),r3o=o("qdqbert"),t3o=o(" \u2014 "),jD=a("a"),a3o=o("QDQBertModel"),n3o=o(" (QDQBert model)"),s3o=l(),pu=a("li"),ime=a("strong"),l3o=o("reformer"),i3o=o(" \u2014 "),DD=a("a"),d3o=o("ReformerModel"),c3o=o(" (Reformer model)"),f3o=l(),_u=a("li"),dme=a("strong"),m3o=o("regnet"),g3o=o(" \u2014 "),GD=a("a"),h3o=o("RegNetModel"),p3o=o(" (RegNet model)"),_3o=l(),uu=a("li"),cme=a("strong"),u3o=o("rembert"),b3o=o(" \u2014 "),OD=a("a"),v3o=o("RemBertModel"),F3o=o(" (RemBERT model)"),T3o=l(),bu=a("li"),fme=a("strong"),M3o=o("resnet"),E3o=o(" \u2014 "),VD=a("a"),C3o=o("ResNetModel"),w3o=o(" (ResNet model)"),A3o=l(),vu=a("li"),mme=a("strong"),L3o=o("retribert"),y3o=o(" \u2014 "),XD=a("a"),x3o=o("RetriBertModel"),$3o=o(" (RetriBERT model)"),k3o=l(),Fu=a("li"),gme=a("strong"),S3o=o("roberta"),R3o=o(" \u2014 "),zD=a("a"),P3o=o("RobertaModel"),B3o=o(" (RoBERTa model)"),I3o=l(),Tu=a("li"),hme=a("strong"),N3o=o("roformer"),q3o=o(" \u2014 "),WD=a("a"),j3o=o("RoFormerModel"),D3o=o(" (RoFormer model)"),G3o=l(),Mu=a("li"),pme=a("strong"),O3o=o("segformer"),V3o=o(" \u2014 "),QD=a("a"),X3o=o("SegformerModel"),z3o=o(" (SegFormer model)"),W3o=l(),Eu=a("li"),_me=a("strong"),Q3o=o("sew"),H3o=o(" \u2014 "),HD=a("a"),U3o=o("SEWModel"),J3o=o(" (SEW model)"),Y3o=l(),Cu=a("li"),ume=a("strong"),K3o=o("sew-d"),Z3o=o(" \u2014 "),UD=a("a"),ewo=o("SEWDModel"),owo=o(" (SEW-D model)"),rwo=l(),wu=a("li"),bme=a("strong"),two=o("speech_to_text"),awo=o(" \u2014 "),JD=a("a"),nwo=o("Speech2TextModel"),swo=o(" (Speech2Text model)"),lwo=l(),Au=a("li"),vme=a("strong"),iwo=o("splinter"),dwo=o(" \u2014 "),YD=a("a"),cwo=o("SplinterModel"),fwo=o(" (Splinter model)"),mwo=l(),Lu=a("li"),Fme=a("strong"),gwo=o("squeezebert"),hwo=o(" \u2014 "),KD=a("a"),pwo=o("SqueezeBertModel"),_wo=o(" (SqueezeBERT model)"),uwo=l(),yu=a("li"),Tme=a("strong"),bwo=o("swin"),vwo=o(" \u2014 "),ZD=a("a"),Fwo=o("SwinModel"),Two=o(" (Swin Transformer model)"),Mwo=l(),xu=a("li"),Mme=a("strong"),Ewo=o("t5"),Cwo=o(" \u2014 "),eG=a("a"),wwo=o("T5Model"),Awo=o(" (T5 model)"),Lwo=l(),$u=a("li"),Eme=a("strong"),ywo=o("tapas"),xwo=o(" \u2014 "),oG=a("a"),$wo=o("TapasModel"),kwo=o(" (TAPAS model)"),Swo=l(),ku=a("li"),Cme=a("strong"),Rwo=o("trajectory_transformer"),Pwo=o(" \u2014 "),rG=a("a"),Bwo=o("TrajectoryTransformerModel"),Iwo=o(" (Trajectory Transformer model)"),Nwo=l(),Su=a("li"),wme=a("strong"),qwo=o("transfo-xl"),jwo=o(" \u2014 "),tG=a("a"),Dwo=o("TransfoXLModel"),Gwo=o(" (Transformer-XL model)"),Owo=l(),Ru=a("li"),Ame=a("strong"),Vwo=o("unispeech"),Xwo=o(" \u2014 "),aG=a("a"),zwo=o("UniSpeechModel"),Wwo=o(" (UniSpeech model)"),Qwo=l(),Pu=a("li"),Lme=a("strong"),Hwo=o("unispeech-sat"),Uwo=o(" \u2014 "),nG=a("a"),Jwo=o("UniSpeechSatModel"),Ywo=o(" (UniSpeechSat model)"),Kwo=l(),Bu=a("li"),yme=a("strong"),Zwo=o("van"),eAo=o(" \u2014 "),sG=a("a"),oAo=o("VanModel"),rAo=o(" (VAN model)"),tAo=l(),Iu=a("li"),xme=a("strong"),aAo=o("vilt"),nAo=o(" \u2014 "),lG=a("a"),sAo=o("ViltModel"),lAo=o(" (ViLT model)"),iAo=l(),Nu=a("li"),$me=a("strong"),dAo=o("vision-text-dual-encoder"),cAo=o(" \u2014 "),iG=a("a"),fAo=o("VisionTextDualEncoderModel"),mAo=o(" (VisionTextDualEncoder model)"),gAo=l(),qu=a("li"),kme=a("strong"),hAo=o("visual_bert"),pAo=o(" \u2014 "),dG=a("a"),_Ao=o("VisualBertModel"),uAo=o(" (VisualBERT model)"),bAo=l(),ju=a("li"),Sme=a("strong"),vAo=o("vit"),FAo=o(" \u2014 "),cG=a("a"),TAo=o("ViTModel"),MAo=o(" (ViT model)"),EAo=l(),Du=a("li"),Rme=a("strong"),CAo=o("vit_mae"),wAo=o(" \u2014 "),fG=a("a"),AAo=o("ViTMAEModel"),LAo=o(" (ViTMAE model)"),yAo=l(),Gu=a("li"),Pme=a("strong"),xAo=o("wav2vec2"),$Ao=o(" \u2014 "),mG=a("a"),kAo=o("Wav2Vec2Model"),SAo=o(" (Wav2Vec2 model)"),RAo=l(),Ou=a("li"),Bme=a("strong"),PAo=o("wav2vec2-conformer"),BAo=o(" \u2014 "),gG=a("a"),IAo=o("Wav2Vec2ConformerModel"),NAo=o(" (Wav2Vec2-Conformer model)"),qAo=l(),Vu=a("li"),Ime=a("strong"),jAo=o("wavlm"),DAo=o(" \u2014 "),hG=a("a"),GAo=o("WavLMModel"),OAo=o(" (WavLM model)"),VAo=l(),Xu=a("li"),Nme=a("strong"),XAo=o("xglm"),zAo=o(" \u2014 "),pG=a("a"),WAo=o("XGLMModel"),QAo=o(" (XGLM model)"),HAo=l(),zu=a("li"),qme=a("strong"),UAo=o("xlm"),JAo=o(" \u2014 "),_G=a("a"),YAo=o("XLMModel"),KAo=o(" (XLM model)"),ZAo=l(),Wu=a("li"),jme=a("strong"),eLo=o("xlm-prophetnet"),oLo=o(" \u2014 "),uG=a("a"),rLo=o("XLMProphetNetModel"),tLo=o(" (XLM-ProphetNet model)"),aLo=l(),Qu=a("li"),Dme=a("strong"),nLo=o("xlm-roberta"),sLo=o(" \u2014 "),bG=a("a"),lLo=o("XLMRobertaModel"),iLo=o(" (XLM-RoBERTa model)"),dLo=l(),Hu=a("li"),Gme=a("strong"),cLo=o("xlm-roberta-xl"),fLo=o(" \u2014 "),vG=a("a"),mLo=o("XLMRobertaXLModel"),gLo=o(" (XLM-RoBERTa-XL model)"),hLo=l(),Uu=a("li"),Ome=a("strong"),pLo=o("xlnet"),_Lo=o(" \u2014 "),FG=a("a"),uLo=o("XLNetModel"),bLo=o(" (XLNet model)"),vLo=l(),Ju=a("li"),Vme=a("strong"),FLo=o("yolos"),TLo=o(" \u2014 "),TG=a("a"),MLo=o("YolosModel"),ELo=o(" (YOLOS model)"),CLo=l(),Yu=a("li"),Xme=a("strong"),wLo=o("yoso"),ALo=o(" \u2014 "),MG=a("a"),LLo=o("YosoModel"),yLo=o(" (YOSO model)"),xLo=l(),Ku=a("p"),$Lo=o("The model is set in evaluation mode by default using "),zme=a("code"),kLo=o("model.eval()"),SLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wme=a("code"),RLo=o("model.train()"),PLo=l(),F(Zu.$$.fragment),aze=l(),Wi=a("h2"),e1=a("a"),Qme=a("span"),F(Wy.$$.fragment),BLo=l(),Hme=a("span"),ILo=o("AutoModelForPreTraining"),nze=l(),So=a("div"),F(Qy.$$.fragment),NLo=l(),Qi=a("p"),qLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EG=a("a"),jLo=o("from_pretrained()"),DLo=o(" class method or the "),CG=a("a"),GLo=o("from_config()"),OLo=o(` class
method.`),VLo=l(),Hy=a("p"),XLo=o("This class cannot be instantiated directly using "),Ume=a("code"),zLo=o("__init__()"),WLo=o(" (throws an error)."),QLo=l(),dt=a("div"),F(Uy.$$.fragment),HLo=l(),Jme=a("p"),ULo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),JLo=l(),Hi=a("p"),YLo=o(`Note:
Loading a model from its configuration file does `),Yme=a("strong"),KLo=o("not"),ZLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wG=a("a"),eyo=o("from_pretrained()"),oyo=o(" to load the model weights."),ryo=l(),F(o1.$$.fragment),tyo=l(),Ke=a("div"),F(Jy.$$.fragment),ayo=l(),Kme=a("p"),nyo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),syo=l(),Na=a("p"),lyo=o("The model class to instantiate is selected based on the "),Zme=a("code"),iyo=o("model_type"),dyo=o(` property of the config object (either
passed as an argument or loaded from `),ege=a("code"),cyo=o("pretrained_model_name_or_path"),fyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=a("code"),myo=o("pretrained_model_name_or_path"),gyo=o(":"),hyo=l(),G=a("ul"),r1=a("li"),rge=a("strong"),pyo=o("albert"),_yo=o(" \u2014 "),AG=a("a"),uyo=o("AlbertForPreTraining"),byo=o(" (ALBERT model)"),vyo=l(),t1=a("li"),tge=a("strong"),Fyo=o("bart"),Tyo=o(" \u2014 "),LG=a("a"),Myo=o("BartForConditionalGeneration"),Eyo=o(" (BART model)"),Cyo=l(),a1=a("li"),age=a("strong"),wyo=o("bert"),Ayo=o(" \u2014 "),yG=a("a"),Lyo=o("BertForPreTraining"),yyo=o(" (BERT model)"),xyo=l(),n1=a("li"),nge=a("strong"),$yo=o("big_bird"),kyo=o(" \u2014 "),xG=a("a"),Syo=o("BigBirdForPreTraining"),Ryo=o(" (BigBird model)"),Pyo=l(),s1=a("li"),sge=a("strong"),Byo=o("bloom"),Iyo=o(" \u2014 "),$G=a("a"),Nyo=o("BloomForCausalLM"),qyo=o(" (BLOOM model)"),jyo=l(),l1=a("li"),lge=a("strong"),Dyo=o("camembert"),Gyo=o(" \u2014 "),kG=a("a"),Oyo=o("CamembertForMaskedLM"),Vyo=o(" (CamemBERT model)"),Xyo=l(),i1=a("li"),ige=a("strong"),zyo=o("ctrl"),Wyo=o(" \u2014 "),SG=a("a"),Qyo=o("CTRLLMHeadModel"),Hyo=o(" (CTRL model)"),Uyo=l(),d1=a("li"),dge=a("strong"),Jyo=o("data2vec-text"),Yyo=o(" \u2014 "),RG=a("a"),Kyo=o("Data2VecTextForMaskedLM"),Zyo=o(" (Data2VecText model)"),e8o=l(),c1=a("li"),cge=a("strong"),o8o=o("deberta"),r8o=o(" \u2014 "),PG=a("a"),t8o=o("DebertaForMaskedLM"),a8o=o(" (DeBERTa model)"),n8o=l(),f1=a("li"),fge=a("strong"),s8o=o("deberta-v2"),l8o=o(" \u2014 "),BG=a("a"),i8o=o("DebertaV2ForMaskedLM"),d8o=o(" (DeBERTa-v2 model)"),c8o=l(),m1=a("li"),mge=a("strong"),f8o=o("distilbert"),m8o=o(" \u2014 "),IG=a("a"),g8o=o("DistilBertForMaskedLM"),h8o=o(" (DistilBERT model)"),p8o=l(),g1=a("li"),gge=a("strong"),_8o=o("electra"),u8o=o(" \u2014 "),NG=a("a"),b8o=o("ElectraForPreTraining"),v8o=o(" (ELECTRA model)"),F8o=l(),h1=a("li"),hge=a("strong"),T8o=o("flaubert"),M8o=o(" \u2014 "),qG=a("a"),E8o=o("FlaubertWithLMHeadModel"),C8o=o(" (FlauBERT model)"),w8o=l(),p1=a("li"),pge=a("strong"),A8o=o("flava"),L8o=o(" \u2014 "),jG=a("a"),y8o=o("FlavaForPreTraining"),x8o=o(" (FLAVA model)"),$8o=l(),_1=a("li"),_ge=a("strong"),k8o=o("fnet"),S8o=o(" \u2014 "),DG=a("a"),R8o=o("FNetForPreTraining"),P8o=o(" (FNet model)"),B8o=l(),u1=a("li"),uge=a("strong"),I8o=o("fsmt"),N8o=o(" \u2014 "),GG=a("a"),q8o=o("FSMTForConditionalGeneration"),j8o=o(" (FairSeq Machine-Translation model)"),D8o=l(),b1=a("li"),bge=a("strong"),G8o=o("funnel"),O8o=o(" \u2014 "),OG=a("a"),V8o=o("FunnelForPreTraining"),X8o=o(" (Funnel Transformer model)"),z8o=l(),v1=a("li"),vge=a("strong"),W8o=o("gpt2"),Q8o=o(" \u2014 "),VG=a("a"),H8o=o("GPT2LMHeadModel"),U8o=o(" (OpenAI GPT-2 model)"),J8o=l(),F1=a("li"),Fge=a("strong"),Y8o=o("ibert"),K8o=o(" \u2014 "),XG=a("a"),Z8o=o("IBertForMaskedLM"),e9o=o(" (I-BERT model)"),o9o=l(),T1=a("li"),Tge=a("strong"),r9o=o("layoutlm"),t9o=o(" \u2014 "),zG=a("a"),a9o=o("LayoutLMForMaskedLM"),n9o=o(" (LayoutLM model)"),s9o=l(),M1=a("li"),Mge=a("strong"),l9o=o("longformer"),i9o=o(" \u2014 "),WG=a("a"),d9o=o("LongformerForMaskedLM"),c9o=o(" (Longformer model)"),f9o=l(),E1=a("li"),Ege=a("strong"),m9o=o("lxmert"),g9o=o(" \u2014 "),QG=a("a"),h9o=o("LxmertForPreTraining"),p9o=o(" (LXMERT model)"),_9o=l(),C1=a("li"),Cge=a("strong"),u9o=o("megatron-bert"),b9o=o(" \u2014 "),HG=a("a"),v9o=o("MegatronBertForPreTraining"),F9o=o(" (Megatron-BERT model)"),T9o=l(),w1=a("li"),wge=a("strong"),M9o=o("mobilebert"),E9o=o(" \u2014 "),UG=a("a"),C9o=o("MobileBertForPreTraining"),w9o=o(" (MobileBERT model)"),A9o=l(),A1=a("li"),Age=a("strong"),L9o=o("mpnet"),y9o=o(" \u2014 "),JG=a("a"),x9o=o("MPNetForMaskedLM"),$9o=o(" (MPNet model)"),k9o=l(),L1=a("li"),Lge=a("strong"),S9o=o("mvp"),R9o=o(" \u2014 "),YG=a("a"),P9o=o("MvpForConditionalGeneration"),B9o=o(" (MVP model)"),I9o=l(),y1=a("li"),yge=a("strong"),N9o=o("nezha"),q9o=o(" \u2014 "),KG=a("a"),j9o=o("NezhaForPreTraining"),D9o=o(" (Nezha model)"),G9o=l(),x1=a("li"),xge=a("strong"),O9o=o("openai-gpt"),V9o=o(" \u2014 "),ZG=a("a"),X9o=o("OpenAIGPTLMHeadModel"),z9o=o(" (OpenAI GPT model)"),W9o=l(),$1=a("li"),$ge=a("strong"),Q9o=o("retribert"),H9o=o(" \u2014 "),eO=a("a"),U9o=o("RetriBertModel"),J9o=o(" (RetriBERT model)"),Y9o=l(),k1=a("li"),kge=a("strong"),K9o=o("roberta"),Z9o=o(" \u2014 "),oO=a("a"),exo=o("RobertaForMaskedLM"),oxo=o(" (RoBERTa model)"),rxo=l(),S1=a("li"),Sge=a("strong"),txo=o("splinter"),axo=o(" \u2014 "),rO=a("a"),nxo=o("SplinterForPreTraining"),sxo=o(" (Splinter model)"),lxo=l(),R1=a("li"),Rge=a("strong"),ixo=o("squeezebert"),dxo=o(" \u2014 "),tO=a("a"),cxo=o("SqueezeBertForMaskedLM"),fxo=o(" (SqueezeBERT model)"),mxo=l(),P1=a("li"),Pge=a("strong"),gxo=o("t5"),hxo=o(" \u2014 "),aO=a("a"),pxo=o("T5ForConditionalGeneration"),_xo=o(" (T5 model)"),uxo=l(),B1=a("li"),Bge=a("strong"),bxo=o("tapas"),vxo=o(" \u2014 "),nO=a("a"),Fxo=o("TapasForMaskedLM"),Txo=o(" (TAPAS model)"),Mxo=l(),I1=a("li"),Ige=a("strong"),Exo=o("transfo-xl"),Cxo=o(" \u2014 "),sO=a("a"),wxo=o("TransfoXLLMHeadModel"),Axo=o(" (Transformer-XL model)"),Lxo=l(),N1=a("li"),Nge=a("strong"),yxo=o("unispeech"),xxo=o(" \u2014 "),lO=a("a"),$xo=o("UniSpeechForPreTraining"),kxo=o(" (UniSpeech model)"),Sxo=l(),q1=a("li"),qge=a("strong"),Rxo=o("unispeech-sat"),Pxo=o(" \u2014 "),iO=a("a"),Bxo=o("UniSpeechSatForPreTraining"),Ixo=o(" (UniSpeechSat model)"),Nxo=l(),j1=a("li"),jge=a("strong"),qxo=o("visual_bert"),jxo=o(" \u2014 "),dO=a("a"),Dxo=o("VisualBertForPreTraining"),Gxo=o(" (VisualBERT model)"),Oxo=l(),D1=a("li"),Dge=a("strong"),Vxo=o("vit_mae"),Xxo=o(" \u2014 "),cO=a("a"),zxo=o("ViTMAEForPreTraining"),Wxo=o(" (ViTMAE model)"),Qxo=l(),G1=a("li"),Gge=a("strong"),Hxo=o("wav2vec2"),Uxo=o(" \u2014 "),fO=a("a"),Jxo=o("Wav2Vec2ForPreTraining"),Yxo=o(" (Wav2Vec2 model)"),Kxo=l(),O1=a("li"),Oge=a("strong"),Zxo=o("wav2vec2-conformer"),e$o=o(" \u2014 "),mO=a("a"),o$o=o("Wav2Vec2ConformerForPreTraining"),r$o=o(" (Wav2Vec2-Conformer model)"),t$o=l(),V1=a("li"),Vge=a("strong"),a$o=o("xlm"),n$o=o(" \u2014 "),gO=a("a"),s$o=o("XLMWithLMHeadModel"),l$o=o(" (XLM model)"),i$o=l(),X1=a("li"),Xge=a("strong"),d$o=o("xlm-roberta"),c$o=o(" \u2014 "),hO=a("a"),f$o=o("XLMRobertaForMaskedLM"),m$o=o(" (XLM-RoBERTa model)"),g$o=l(),z1=a("li"),zge=a("strong"),h$o=o("xlm-roberta-xl"),p$o=o(" \u2014 "),pO=a("a"),_$o=o("XLMRobertaXLForMaskedLM"),u$o=o(" (XLM-RoBERTa-XL model)"),b$o=l(),W1=a("li"),Wge=a("strong"),v$o=o("xlnet"),F$o=o(" \u2014 "),_O=a("a"),T$o=o("XLNetLMHeadModel"),M$o=o(" (XLNet model)"),E$o=l(),Q1=a("p"),C$o=o("The model is set in evaluation mode by default using "),Qge=a("code"),w$o=o("model.eval()"),A$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=a("code"),L$o=o("model.train()"),y$o=l(),F(H1.$$.fragment),sze=l(),Ui=a("h2"),U1=a("a"),Uge=a("span"),F(Yy.$$.fragment),x$o=l(),Jge=a("span"),$$o=o("AutoModelForCausalLM"),lze=l(),Ro=a("div"),F(Ky.$$.fragment),k$o=l(),Ji=a("p"),S$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uO=a("a"),R$o=o("from_pretrained()"),P$o=o(" class method or the "),bO=a("a"),B$o=o("from_config()"),I$o=o(` class
method.`),N$o=l(),Zy=a("p"),q$o=o("This class cannot be instantiated directly using "),Yge=a("code"),j$o=o("__init__()"),D$o=o(" (throws an error)."),G$o=l(),ct=a("div"),F(e8.$$.fragment),O$o=l(),Kge=a("p"),V$o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),X$o=l(),Yi=a("p"),z$o=o(`Note:
Loading a model from its configuration file does `),Zge=a("strong"),W$o=o("not"),Q$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=a("a"),H$o=o("from_pretrained()"),U$o=o(" to load the model weights."),J$o=l(),F(J1.$$.fragment),Y$o=l(),Ze=a("div"),F(o8.$$.fragment),K$o=l(),ehe=a("p"),Z$o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),eko=l(),qa=a("p"),oko=o("The model class to instantiate is selected based on the "),ohe=a("code"),rko=o("model_type"),tko=o(` property of the config object (either
passed as an argument or loaded from `),rhe=a("code"),ako=o("pretrained_model_name_or_path"),nko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=a("code"),sko=o("pretrained_model_name_or_path"),lko=o(":"),iko=l(),z=a("ul"),Y1=a("li"),ahe=a("strong"),dko=o("bart"),cko=o(" \u2014 "),FO=a("a"),fko=o("BartForCausalLM"),mko=o(" (BART model)"),gko=l(),K1=a("li"),nhe=a("strong"),hko=o("bert"),pko=o(" \u2014 "),TO=a("a"),_ko=o("BertLMHeadModel"),uko=o(" (BERT model)"),bko=l(),Z1=a("li"),she=a("strong"),vko=o("bert-generation"),Fko=o(" \u2014 "),MO=a("a"),Tko=o("BertGenerationDecoder"),Mko=o(" (Bert Generation model)"),Eko=l(),e4=a("li"),lhe=a("strong"),Cko=o("big_bird"),wko=o(" \u2014 "),EO=a("a"),Ako=o("BigBirdForCausalLM"),Lko=o(" (BigBird model)"),yko=l(),o4=a("li"),ihe=a("strong"),xko=o("bigbird_pegasus"),$ko=o(" \u2014 "),CO=a("a"),kko=o("BigBirdPegasusForCausalLM"),Sko=o(" (BigBird-Pegasus model)"),Rko=l(),r4=a("li"),dhe=a("strong"),Pko=o("blenderbot"),Bko=o(" \u2014 "),wO=a("a"),Iko=o("BlenderbotForCausalLM"),Nko=o(" (Blenderbot model)"),qko=l(),t4=a("li"),che=a("strong"),jko=o("blenderbot-small"),Dko=o(" \u2014 "),AO=a("a"),Gko=o("BlenderbotSmallForCausalLM"),Oko=o(" (BlenderbotSmall model)"),Vko=l(),a4=a("li"),fhe=a("strong"),Xko=o("bloom"),zko=o(" \u2014 "),LO=a("a"),Wko=o("BloomForCausalLM"),Qko=o(" (BLOOM model)"),Hko=l(),n4=a("li"),mhe=a("strong"),Uko=o("camembert"),Jko=o(" \u2014 "),yO=a("a"),Yko=o("CamembertForCausalLM"),Kko=o(" (CamemBERT model)"),Zko=l(),s4=a("li"),ghe=a("strong"),eSo=o("codegen"),oSo=o(" \u2014 "),xO=a("a"),rSo=o("CodeGenForCausalLM"),tSo=o(" (CodeGen model)"),aSo=l(),l4=a("li"),hhe=a("strong"),nSo=o("ctrl"),sSo=o(" \u2014 "),$O=a("a"),lSo=o("CTRLLMHeadModel"),iSo=o(" (CTRL model)"),dSo=l(),i4=a("li"),phe=a("strong"),cSo=o("data2vec-text"),fSo=o(" \u2014 "),kO=a("a"),mSo=o("Data2VecTextForCausalLM"),gSo=o(" (Data2VecText model)"),hSo=l(),d4=a("li"),_he=a("strong"),pSo=o("electra"),_So=o(" \u2014 "),SO=a("a"),uSo=o("ElectraForCausalLM"),bSo=o(" (ELECTRA model)"),vSo=l(),c4=a("li"),uhe=a("strong"),FSo=o("gpt2"),TSo=o(" \u2014 "),RO=a("a"),MSo=o("GPT2LMHeadModel"),ESo=o(" (OpenAI GPT-2 model)"),CSo=l(),f4=a("li"),bhe=a("strong"),wSo=o("gpt_neo"),ASo=o(" \u2014 "),PO=a("a"),LSo=o("GPTNeoForCausalLM"),ySo=o(" (GPT Neo model)"),xSo=l(),m4=a("li"),vhe=a("strong"),$So=o("gpt_neox"),kSo=o(" \u2014 "),BO=a("a"),SSo=o("GPTNeoXForCausalLM"),RSo=o(" (GPT NeoX model)"),PSo=l(),g4=a("li"),Fhe=a("strong"),BSo=o("gptj"),ISo=o(" \u2014 "),IO=a("a"),NSo=o("GPTJForCausalLM"),qSo=o(" (GPT-J model)"),jSo=l(),h4=a("li"),The=a("strong"),DSo=o("marian"),GSo=o(" \u2014 "),NO=a("a"),OSo=o("MarianForCausalLM"),VSo=o(" (Marian model)"),XSo=l(),p4=a("li"),Mhe=a("strong"),zSo=o("mbart"),WSo=o(" \u2014 "),qO=a("a"),QSo=o("MBartForCausalLM"),HSo=o(" (mBART model)"),USo=l(),_4=a("li"),Ehe=a("strong"),JSo=o("megatron-bert"),YSo=o(" \u2014 "),jO=a("a"),KSo=o("MegatronBertForCausalLM"),ZSo=o(" (Megatron-BERT model)"),eRo=l(),u4=a("li"),Che=a("strong"),oRo=o("mvp"),rRo=o(" \u2014 "),DO=a("a"),tRo=o("MvpForCausalLM"),aRo=o(" (MVP model)"),nRo=l(),b4=a("li"),whe=a("strong"),sRo=o("openai-gpt"),lRo=o(" \u2014 "),GO=a("a"),iRo=o("OpenAIGPTLMHeadModel"),dRo=o(" (OpenAI GPT model)"),cRo=l(),v4=a("li"),Ahe=a("strong"),fRo=o("opt"),mRo=o(" \u2014 "),OO=a("a"),gRo=o("OPTForCausalLM"),hRo=o(" (OPT model)"),pRo=l(),F4=a("li"),Lhe=a("strong"),_Ro=o("pegasus"),uRo=o(" \u2014 "),VO=a("a"),bRo=o("PegasusForCausalLM"),vRo=o(" (Pegasus model)"),FRo=l(),T4=a("li"),yhe=a("strong"),TRo=o("plbart"),MRo=o(" \u2014 "),XO=a("a"),ERo=o("PLBartForCausalLM"),CRo=o(" (PLBart model)"),wRo=l(),M4=a("li"),xhe=a("strong"),ARo=o("prophetnet"),LRo=o(" \u2014 "),zO=a("a"),yRo=o("ProphetNetForCausalLM"),xRo=o(" (ProphetNet model)"),$Ro=l(),E4=a("li"),$he=a("strong"),kRo=o("qdqbert"),SRo=o(" \u2014 "),WO=a("a"),RRo=o("QDQBertLMHeadModel"),PRo=o(" (QDQBert model)"),BRo=l(),C4=a("li"),khe=a("strong"),IRo=o("reformer"),NRo=o(" \u2014 "),QO=a("a"),qRo=o("ReformerModelWithLMHead"),jRo=o(" (Reformer model)"),DRo=l(),w4=a("li"),She=a("strong"),GRo=o("rembert"),ORo=o(" \u2014 "),HO=a("a"),VRo=o("RemBertForCausalLM"),XRo=o(" (RemBERT model)"),zRo=l(),A4=a("li"),Rhe=a("strong"),WRo=o("roberta"),QRo=o(" \u2014 "),UO=a("a"),HRo=o("RobertaForCausalLM"),URo=o(" (RoBERTa model)"),JRo=l(),L4=a("li"),Phe=a("strong"),YRo=o("roformer"),KRo=o(" \u2014 "),JO=a("a"),ZRo=o("RoFormerForCausalLM"),ePo=o(" (RoFormer model)"),oPo=l(),y4=a("li"),Bhe=a("strong"),rPo=o("speech_to_text_2"),tPo=o(" \u2014 "),YO=a("a"),aPo=o("Speech2Text2ForCausalLM"),nPo=o(" (Speech2Text2 model)"),sPo=l(),x4=a("li"),Ihe=a("strong"),lPo=o("transfo-xl"),iPo=o(" \u2014 "),KO=a("a"),dPo=o("TransfoXLLMHeadModel"),cPo=o(" (Transformer-XL model)"),fPo=l(),$4=a("li"),Nhe=a("strong"),mPo=o("trocr"),gPo=o(" \u2014 "),ZO=a("a"),hPo=o("TrOCRForCausalLM"),pPo=o(" (TrOCR model)"),_Po=l(),k4=a("li"),qhe=a("strong"),uPo=o("xglm"),bPo=o(" \u2014 "),eV=a("a"),vPo=o("XGLMForCausalLM"),FPo=o(" (XGLM model)"),TPo=l(),S4=a("li"),jhe=a("strong"),MPo=o("xlm"),EPo=o(" \u2014 "),oV=a("a"),CPo=o("XLMWithLMHeadModel"),wPo=o(" (XLM model)"),APo=l(),R4=a("li"),Dhe=a("strong"),LPo=o("xlm-prophetnet"),yPo=o(" \u2014 "),rV=a("a"),xPo=o("XLMProphetNetForCausalLM"),$Po=o(" (XLM-ProphetNet model)"),kPo=l(),P4=a("li"),Ghe=a("strong"),SPo=o("xlm-roberta"),RPo=o(" \u2014 "),tV=a("a"),PPo=o("XLMRobertaForCausalLM"),BPo=o(" (XLM-RoBERTa model)"),IPo=l(),B4=a("li"),Ohe=a("strong"),NPo=o("xlm-roberta-xl"),qPo=o(" \u2014 "),aV=a("a"),jPo=o("XLMRobertaXLForCausalLM"),DPo=o(" (XLM-RoBERTa-XL model)"),GPo=l(),I4=a("li"),Vhe=a("strong"),OPo=o("xlnet"),VPo=o(" \u2014 "),nV=a("a"),XPo=o("XLNetLMHeadModel"),zPo=o(" (XLNet model)"),WPo=l(),N4=a("p"),QPo=o("The model is set in evaluation mode by default using "),Xhe=a("code"),HPo=o("model.eval()"),UPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zhe=a("code"),JPo=o("model.train()"),YPo=l(),F(q4.$$.fragment),ize=l(),Ki=a("h2"),j4=a("a"),Whe=a("span"),F(r8.$$.fragment),KPo=l(),Qhe=a("span"),ZPo=o("AutoModelForMaskedLM"),dze=l(),Po=a("div"),F(t8.$$.fragment),eBo=l(),Zi=a("p"),oBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sV=a("a"),rBo=o("from_pretrained()"),tBo=o(" class method or the "),lV=a("a"),aBo=o("from_config()"),nBo=o(` class
method.`),sBo=l(),a8=a("p"),lBo=o("This class cannot be instantiated directly using "),Hhe=a("code"),iBo=o("__init__()"),dBo=o(" (throws an error)."),cBo=l(),ft=a("div"),F(n8.$$.fragment),fBo=l(),Uhe=a("p"),mBo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gBo=l(),ed=a("p"),hBo=o(`Note:
Loading a model from its configuration file does `),Jhe=a("strong"),pBo=o("not"),_Bo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=a("a"),uBo=o("from_pretrained()"),bBo=o(" to load the model weights."),vBo=l(),F(D4.$$.fragment),FBo=l(),eo=a("div"),F(s8.$$.fragment),TBo=l(),Yhe=a("p"),MBo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),EBo=l(),ja=a("p"),CBo=o("The model class to instantiate is selected based on the "),Khe=a("code"),wBo=o("model_type"),ABo=o(` property of the config object (either
passed as an argument or loaded from `),Zhe=a("code"),LBo=o("pretrained_model_name_or_path"),yBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),epe=a("code"),xBo=o("pretrained_model_name_or_path"),$Bo=o(":"),kBo=l(),Q=a("ul"),G4=a("li"),ope=a("strong"),SBo=o("albert"),RBo=o(" \u2014 "),dV=a("a"),PBo=o("AlbertForMaskedLM"),BBo=o(" (ALBERT model)"),IBo=l(),O4=a("li"),rpe=a("strong"),NBo=o("bart"),qBo=o(" \u2014 "),cV=a("a"),jBo=o("BartForConditionalGeneration"),DBo=o(" (BART model)"),GBo=l(),V4=a("li"),tpe=a("strong"),OBo=o("bert"),VBo=o(" \u2014 "),fV=a("a"),XBo=o("BertForMaskedLM"),zBo=o(" (BERT model)"),WBo=l(),X4=a("li"),ape=a("strong"),QBo=o("big_bird"),HBo=o(" \u2014 "),mV=a("a"),UBo=o("BigBirdForMaskedLM"),JBo=o(" (BigBird model)"),YBo=l(),z4=a("li"),npe=a("strong"),KBo=o("camembert"),ZBo=o(" \u2014 "),gV=a("a"),eIo=o("CamembertForMaskedLM"),oIo=o(" (CamemBERT model)"),rIo=l(),W4=a("li"),spe=a("strong"),tIo=o("convbert"),aIo=o(" \u2014 "),hV=a("a"),nIo=o("ConvBertForMaskedLM"),sIo=o(" (ConvBERT model)"),lIo=l(),Q4=a("li"),lpe=a("strong"),iIo=o("data2vec-text"),dIo=o(" \u2014 "),pV=a("a"),cIo=o("Data2VecTextForMaskedLM"),fIo=o(" (Data2VecText model)"),mIo=l(),H4=a("li"),ipe=a("strong"),gIo=o("deberta"),hIo=o(" \u2014 "),_V=a("a"),pIo=o("DebertaForMaskedLM"),_Io=o(" (DeBERTa model)"),uIo=l(),U4=a("li"),dpe=a("strong"),bIo=o("deberta-v2"),vIo=o(" \u2014 "),uV=a("a"),FIo=o("DebertaV2ForMaskedLM"),TIo=o(" (DeBERTa-v2 model)"),MIo=l(),J4=a("li"),cpe=a("strong"),EIo=o("distilbert"),CIo=o(" \u2014 "),bV=a("a"),wIo=o("DistilBertForMaskedLM"),AIo=o(" (DistilBERT model)"),LIo=l(),Y4=a("li"),fpe=a("strong"),yIo=o("electra"),xIo=o(" \u2014 "),vV=a("a"),$Io=o("ElectraForMaskedLM"),kIo=o(" (ELECTRA model)"),SIo=l(),K4=a("li"),mpe=a("strong"),RIo=o("flaubert"),PIo=o(" \u2014 "),FV=a("a"),BIo=o("FlaubertWithLMHeadModel"),IIo=o(" (FlauBERT model)"),NIo=l(),Z4=a("li"),gpe=a("strong"),qIo=o("fnet"),jIo=o(" \u2014 "),TV=a("a"),DIo=o("FNetForMaskedLM"),GIo=o(" (FNet model)"),OIo=l(),e2=a("li"),hpe=a("strong"),VIo=o("funnel"),XIo=o(" \u2014 "),MV=a("a"),zIo=o("FunnelForMaskedLM"),WIo=o(" (Funnel Transformer model)"),QIo=l(),o2=a("li"),ppe=a("strong"),HIo=o("ibert"),UIo=o(" \u2014 "),EV=a("a"),JIo=o("IBertForMaskedLM"),YIo=o(" (I-BERT model)"),KIo=l(),r2=a("li"),_pe=a("strong"),ZIo=o("layoutlm"),eNo=o(" \u2014 "),CV=a("a"),oNo=o("LayoutLMForMaskedLM"),rNo=o(" (LayoutLM model)"),tNo=l(),t2=a("li"),upe=a("strong"),aNo=o("longformer"),nNo=o(" \u2014 "),wV=a("a"),sNo=o("LongformerForMaskedLM"),lNo=o(" (Longformer model)"),iNo=l(),a2=a("li"),bpe=a("strong"),dNo=o("luke"),cNo=o(" \u2014 "),AV=a("a"),fNo=o("LukeForMaskedLM"),mNo=o(" (LUKE model)"),gNo=l(),n2=a("li"),vpe=a("strong"),hNo=o("mbart"),pNo=o(" \u2014 "),LV=a("a"),_No=o("MBartForConditionalGeneration"),uNo=o(" (mBART model)"),bNo=l(),s2=a("li"),Fpe=a("strong"),vNo=o("megatron-bert"),FNo=o(" \u2014 "),yV=a("a"),TNo=o("MegatronBertForMaskedLM"),MNo=o(" (Megatron-BERT model)"),ENo=l(),l2=a("li"),Tpe=a("strong"),CNo=o("mobilebert"),wNo=o(" \u2014 "),xV=a("a"),ANo=o("MobileBertForMaskedLM"),LNo=o(" (MobileBERT model)"),yNo=l(),i2=a("li"),Mpe=a("strong"),xNo=o("mpnet"),$No=o(" \u2014 "),$V=a("a"),kNo=o("MPNetForMaskedLM"),SNo=o(" (MPNet model)"),RNo=l(),d2=a("li"),Epe=a("strong"),PNo=o("mvp"),BNo=o(" \u2014 "),kV=a("a"),INo=o("MvpForConditionalGeneration"),NNo=o(" (MVP model)"),qNo=l(),c2=a("li"),Cpe=a("strong"),jNo=o("nezha"),DNo=o(" \u2014 "),SV=a("a"),GNo=o("NezhaForMaskedLM"),ONo=o(" (Nezha model)"),VNo=l(),f2=a("li"),wpe=a("strong"),XNo=o("nystromformer"),zNo=o(" \u2014 "),RV=a("a"),WNo=o("NystromformerForMaskedLM"),QNo=o(" (Nystr\xF6mformer model)"),HNo=l(),m2=a("li"),Ape=a("strong"),UNo=o("perceiver"),JNo=o(" \u2014 "),PV=a("a"),YNo=o("PerceiverForMaskedLM"),KNo=o(" (Perceiver model)"),ZNo=l(),g2=a("li"),Lpe=a("strong"),eqo=o("qdqbert"),oqo=o(" \u2014 "),BV=a("a"),rqo=o("QDQBertForMaskedLM"),tqo=o(" (QDQBert model)"),aqo=l(),h2=a("li"),ype=a("strong"),nqo=o("reformer"),sqo=o(" \u2014 "),IV=a("a"),lqo=o("ReformerForMaskedLM"),iqo=o(" (Reformer model)"),dqo=l(),p2=a("li"),xpe=a("strong"),cqo=o("rembert"),fqo=o(" \u2014 "),NV=a("a"),mqo=o("RemBertForMaskedLM"),gqo=o(" (RemBERT model)"),hqo=l(),_2=a("li"),$pe=a("strong"),pqo=o("roberta"),_qo=o(" \u2014 "),qV=a("a"),uqo=o("RobertaForMaskedLM"),bqo=o(" (RoBERTa model)"),vqo=l(),u2=a("li"),kpe=a("strong"),Fqo=o("roformer"),Tqo=o(" \u2014 "),jV=a("a"),Mqo=o("RoFormerForMaskedLM"),Eqo=o(" (RoFormer model)"),Cqo=l(),b2=a("li"),Spe=a("strong"),wqo=o("squeezebert"),Aqo=o(" \u2014 "),DV=a("a"),Lqo=o("SqueezeBertForMaskedLM"),yqo=o(" (SqueezeBERT model)"),xqo=l(),v2=a("li"),Rpe=a("strong"),$qo=o("tapas"),kqo=o(" \u2014 "),GV=a("a"),Sqo=o("TapasForMaskedLM"),Rqo=o(" (TAPAS model)"),Pqo=l(),F2=a("li"),Ppe=a("strong"),Bqo=o("wav2vec2"),Iqo=o(" \u2014 "),Bpe=a("code"),Nqo=o("Wav2Vec2ForMaskedLM"),qqo=o(" (Wav2Vec2 model)"),jqo=l(),T2=a("li"),Ipe=a("strong"),Dqo=o("xlm"),Gqo=o(" \u2014 "),OV=a("a"),Oqo=o("XLMWithLMHeadModel"),Vqo=o(" (XLM model)"),Xqo=l(),M2=a("li"),Npe=a("strong"),zqo=o("xlm-roberta"),Wqo=o(" \u2014 "),VV=a("a"),Qqo=o("XLMRobertaForMaskedLM"),Hqo=o(" (XLM-RoBERTa model)"),Uqo=l(),E2=a("li"),qpe=a("strong"),Jqo=o("xlm-roberta-xl"),Yqo=o(" \u2014 "),XV=a("a"),Kqo=o("XLMRobertaXLForMaskedLM"),Zqo=o(" (XLM-RoBERTa-XL model)"),ejo=l(),C2=a("li"),jpe=a("strong"),ojo=o("yoso"),rjo=o(" \u2014 "),zV=a("a"),tjo=o("YosoForMaskedLM"),ajo=o(" (YOSO model)"),njo=l(),w2=a("p"),sjo=o("The model is set in evaluation mode by default using "),Dpe=a("code"),ljo=o("model.eval()"),ijo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=a("code"),djo=o("model.train()"),cjo=l(),F(A2.$$.fragment),cze=l(),od=a("h2"),L2=a("a"),Ope=a("span"),F(l8.$$.fragment),fjo=l(),Vpe=a("span"),mjo=o("AutoModelForSeq2SeqLM"),fze=l(),Bo=a("div"),F(i8.$$.fragment),gjo=l(),rd=a("p"),hjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WV=a("a"),pjo=o("from_pretrained()"),_jo=o(" class method or the "),QV=a("a"),ujo=o("from_config()"),bjo=o(` class
method.`),vjo=l(),d8=a("p"),Fjo=o("This class cannot be instantiated directly using "),Xpe=a("code"),Tjo=o("__init__()"),Mjo=o(" (throws an error)."),Ejo=l(),mt=a("div"),F(c8.$$.fragment),Cjo=l(),zpe=a("p"),wjo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ajo=l(),td=a("p"),Ljo=o(`Note:
Loading a model from its configuration file does `),Wpe=a("strong"),yjo=o("not"),xjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=a("a"),$jo=o("from_pretrained()"),kjo=o(" to load the model weights."),Sjo=l(),F(y2.$$.fragment),Rjo=l(),oo=a("div"),F(f8.$$.fragment),Pjo=l(),Qpe=a("p"),Bjo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ijo=l(),Da=a("p"),Njo=o("The model class to instantiate is selected based on the "),Hpe=a("code"),qjo=o("model_type"),jjo=o(` property of the config object (either
passed as an argument or loaded from `),Upe=a("code"),Djo=o("pretrained_model_name_or_path"),Gjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=a("code"),Ojo=o("pretrained_model_name_or_path"),Vjo=o(":"),Xjo=l(),me=a("ul"),x2=a("li"),Ype=a("strong"),zjo=o("bart"),Wjo=o(" \u2014 "),UV=a("a"),Qjo=o("BartForConditionalGeneration"),Hjo=o(" (BART model)"),Ujo=l(),$2=a("li"),Kpe=a("strong"),Jjo=o("bigbird_pegasus"),Yjo=o(" \u2014 "),JV=a("a"),Kjo=o("BigBirdPegasusForConditionalGeneration"),Zjo=o(" (BigBird-Pegasus model)"),eDo=l(),k2=a("li"),Zpe=a("strong"),oDo=o("blenderbot"),rDo=o(" \u2014 "),YV=a("a"),tDo=o("BlenderbotForConditionalGeneration"),aDo=o(" (Blenderbot model)"),nDo=l(),S2=a("li"),e_e=a("strong"),sDo=o("blenderbot-small"),lDo=o(" \u2014 "),KV=a("a"),iDo=o("BlenderbotSmallForConditionalGeneration"),dDo=o(" (BlenderbotSmall model)"),cDo=l(),R2=a("li"),o_e=a("strong"),fDo=o("encoder-decoder"),mDo=o(" \u2014 "),ZV=a("a"),gDo=o("EncoderDecoderModel"),hDo=o(" (Encoder decoder model)"),pDo=l(),P2=a("li"),r_e=a("strong"),_Do=o("fsmt"),uDo=o(" \u2014 "),eX=a("a"),bDo=o("FSMTForConditionalGeneration"),vDo=o(" (FairSeq Machine-Translation model)"),FDo=l(),B2=a("li"),t_e=a("strong"),TDo=o("led"),MDo=o(" \u2014 "),oX=a("a"),EDo=o("LEDForConditionalGeneration"),CDo=o(" (LED model)"),wDo=l(),I2=a("li"),a_e=a("strong"),ADo=o("longt5"),LDo=o(" \u2014 "),rX=a("a"),yDo=o("LongT5ForConditionalGeneration"),xDo=o(" (LongT5 model)"),$Do=l(),N2=a("li"),n_e=a("strong"),kDo=o("m2m_100"),SDo=o(" \u2014 "),tX=a("a"),RDo=o("M2M100ForConditionalGeneration"),PDo=o(" (M2M100 model)"),BDo=l(),q2=a("li"),s_e=a("strong"),IDo=o("marian"),NDo=o(" \u2014 "),aX=a("a"),qDo=o("MarianMTModel"),jDo=o(" (Marian model)"),DDo=l(),j2=a("li"),l_e=a("strong"),GDo=o("mbart"),ODo=o(" \u2014 "),nX=a("a"),VDo=o("MBartForConditionalGeneration"),XDo=o(" (mBART model)"),zDo=l(),D2=a("li"),i_e=a("strong"),WDo=o("mt5"),QDo=o(" \u2014 "),sX=a("a"),HDo=o("MT5ForConditionalGeneration"),UDo=o(" (MT5 model)"),JDo=l(),G2=a("li"),d_e=a("strong"),YDo=o("mvp"),KDo=o(" \u2014 "),lX=a("a"),ZDo=o("MvpForConditionalGeneration"),eGo=o(" (MVP model)"),oGo=l(),O2=a("li"),c_e=a("strong"),rGo=o("nllb"),tGo=o(" \u2014 "),iX=a("a"),aGo=o("M2M100ForConditionalGeneration"),nGo=o(" (NLLB model)"),sGo=l(),V2=a("li"),f_e=a("strong"),lGo=o("pegasus"),iGo=o(" \u2014 "),dX=a("a"),dGo=o("PegasusForConditionalGeneration"),cGo=o(" (Pegasus model)"),fGo=l(),X2=a("li"),m_e=a("strong"),mGo=o("plbart"),gGo=o(" \u2014 "),cX=a("a"),hGo=o("PLBartForConditionalGeneration"),pGo=o(" (PLBart model)"),_Go=l(),z2=a("li"),g_e=a("strong"),uGo=o("prophetnet"),bGo=o(" \u2014 "),fX=a("a"),vGo=o("ProphetNetForConditionalGeneration"),FGo=o(" (ProphetNet model)"),TGo=l(),W2=a("li"),h_e=a("strong"),MGo=o("t5"),EGo=o(" \u2014 "),mX=a("a"),CGo=o("T5ForConditionalGeneration"),wGo=o(" (T5 model)"),AGo=l(),Q2=a("li"),p_e=a("strong"),LGo=o("xlm-prophetnet"),yGo=o(" \u2014 "),gX=a("a"),xGo=o("XLMProphetNetForConditionalGeneration"),$Go=o(" (XLM-ProphetNet model)"),kGo=l(),H2=a("p"),SGo=o("The model is set in evaluation mode by default using "),__e=a("code"),RGo=o("model.eval()"),PGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u_e=a("code"),BGo=o("model.train()"),IGo=l(),F(U2.$$.fragment),mze=l(),ad=a("h2"),J2=a("a"),b_e=a("span"),F(m8.$$.fragment),NGo=l(),v_e=a("span"),qGo=o("AutoModelForSequenceClassification"),gze=l(),Io=a("div"),F(g8.$$.fragment),jGo=l(),nd=a("p"),DGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hX=a("a"),GGo=o("from_pretrained()"),OGo=o(" class method or the "),pX=a("a"),VGo=o("from_config()"),XGo=o(` class
method.`),zGo=l(),h8=a("p"),WGo=o("This class cannot be instantiated directly using "),F_e=a("code"),QGo=o("__init__()"),HGo=o(" (throws an error)."),UGo=l(),gt=a("div"),F(p8.$$.fragment),JGo=l(),T_e=a("p"),YGo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KGo=l(),sd=a("p"),ZGo=o(`Note:
Loading a model from its configuration file does `),M_e=a("strong"),eOo=o("not"),oOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=a("a"),rOo=o("from_pretrained()"),tOo=o(" to load the model weights."),aOo=l(),F(Y2.$$.fragment),nOo=l(),ro=a("div"),F(_8.$$.fragment),sOo=l(),E_e=a("p"),lOo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iOo=l(),Ga=a("p"),dOo=o("The model class to instantiate is selected based on the "),C_e=a("code"),cOo=o("model_type"),fOo=o(` property of the config object (either
passed as an argument or loaded from `),w_e=a("code"),mOo=o("pretrained_model_name_or_path"),gOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A_e=a("code"),hOo=o("pretrained_model_name_or_path"),pOo=o(":"),_Oo=l(),B=a("ul"),K2=a("li"),L_e=a("strong"),uOo=o("albert"),bOo=o(" \u2014 "),uX=a("a"),vOo=o("AlbertForSequenceClassification"),FOo=o(" (ALBERT model)"),TOo=l(),Z2=a("li"),y_e=a("strong"),MOo=o("bart"),EOo=o(" \u2014 "),bX=a("a"),COo=o("BartForSequenceClassification"),wOo=o(" (BART model)"),AOo=l(),eb=a("li"),x_e=a("strong"),LOo=o("bert"),yOo=o(" \u2014 "),vX=a("a"),xOo=o("BertForSequenceClassification"),$Oo=o(" (BERT model)"),kOo=l(),ob=a("li"),$_e=a("strong"),SOo=o("big_bird"),ROo=o(" \u2014 "),FX=a("a"),POo=o("BigBirdForSequenceClassification"),BOo=o(" (BigBird model)"),IOo=l(),rb=a("li"),k_e=a("strong"),NOo=o("bigbird_pegasus"),qOo=o(" \u2014 "),TX=a("a"),jOo=o("BigBirdPegasusForSequenceClassification"),DOo=o(" (BigBird-Pegasus model)"),GOo=l(),tb=a("li"),S_e=a("strong"),OOo=o("bloom"),VOo=o(" \u2014 "),MX=a("a"),XOo=o("BloomForSequenceClassification"),zOo=o(" (BLOOM model)"),WOo=l(),ab=a("li"),R_e=a("strong"),QOo=o("camembert"),HOo=o(" \u2014 "),EX=a("a"),UOo=o("CamembertForSequenceClassification"),JOo=o(" (CamemBERT model)"),YOo=l(),nb=a("li"),P_e=a("strong"),KOo=o("canine"),ZOo=o(" \u2014 "),CX=a("a"),eVo=o("CanineForSequenceClassification"),oVo=o(" (CANINE model)"),rVo=l(),sb=a("li"),B_e=a("strong"),tVo=o("convbert"),aVo=o(" \u2014 "),wX=a("a"),nVo=o("ConvBertForSequenceClassification"),sVo=o(" (ConvBERT model)"),lVo=l(),lb=a("li"),I_e=a("strong"),iVo=o("ctrl"),dVo=o(" \u2014 "),AX=a("a"),cVo=o("CTRLForSequenceClassification"),fVo=o(" (CTRL model)"),mVo=l(),ib=a("li"),N_e=a("strong"),gVo=o("data2vec-text"),hVo=o(" \u2014 "),LX=a("a"),pVo=o("Data2VecTextForSequenceClassification"),_Vo=o(" (Data2VecText model)"),uVo=l(),db=a("li"),q_e=a("strong"),bVo=o("deberta"),vVo=o(" \u2014 "),yX=a("a"),FVo=o("DebertaForSequenceClassification"),TVo=o(" (DeBERTa model)"),MVo=l(),cb=a("li"),j_e=a("strong"),EVo=o("deberta-v2"),CVo=o(" \u2014 "),xX=a("a"),wVo=o("DebertaV2ForSequenceClassification"),AVo=o(" (DeBERTa-v2 model)"),LVo=l(),fb=a("li"),D_e=a("strong"),yVo=o("distilbert"),xVo=o(" \u2014 "),$X=a("a"),$Vo=o("DistilBertForSequenceClassification"),kVo=o(" (DistilBERT model)"),SVo=l(),mb=a("li"),G_e=a("strong"),RVo=o("electra"),PVo=o(" \u2014 "),kX=a("a"),BVo=o("ElectraForSequenceClassification"),IVo=o(" (ELECTRA model)"),NVo=l(),gb=a("li"),O_e=a("strong"),qVo=o("flaubert"),jVo=o(" \u2014 "),SX=a("a"),DVo=o("FlaubertForSequenceClassification"),GVo=o(" (FlauBERT model)"),OVo=l(),hb=a("li"),V_e=a("strong"),VVo=o("fnet"),XVo=o(" \u2014 "),RX=a("a"),zVo=o("FNetForSequenceClassification"),WVo=o(" (FNet model)"),QVo=l(),pb=a("li"),X_e=a("strong"),HVo=o("funnel"),UVo=o(" \u2014 "),PX=a("a"),JVo=o("FunnelForSequenceClassification"),YVo=o(" (Funnel Transformer model)"),KVo=l(),_b=a("li"),z_e=a("strong"),ZVo=o("gpt2"),eXo=o(" \u2014 "),BX=a("a"),oXo=o("GPT2ForSequenceClassification"),rXo=o(" (OpenAI GPT-2 model)"),tXo=l(),ub=a("li"),W_e=a("strong"),aXo=o("gpt_neo"),nXo=o(" \u2014 "),IX=a("a"),sXo=o("GPTNeoForSequenceClassification"),lXo=o(" (GPT Neo model)"),iXo=l(),bb=a("li"),Q_e=a("strong"),dXo=o("gptj"),cXo=o(" \u2014 "),NX=a("a"),fXo=o("GPTJForSequenceClassification"),mXo=o(" (GPT-J model)"),gXo=l(),vb=a("li"),H_e=a("strong"),hXo=o("ibert"),pXo=o(" \u2014 "),qX=a("a"),_Xo=o("IBertForSequenceClassification"),uXo=o(" (I-BERT model)"),bXo=l(),Fb=a("li"),U_e=a("strong"),vXo=o("layoutlm"),FXo=o(" \u2014 "),jX=a("a"),TXo=o("LayoutLMForSequenceClassification"),MXo=o(" (LayoutLM model)"),EXo=l(),Tb=a("li"),J_e=a("strong"),CXo=o("layoutlmv2"),wXo=o(" \u2014 "),DX=a("a"),AXo=o("LayoutLMv2ForSequenceClassification"),LXo=o(" (LayoutLMv2 model)"),yXo=l(),Mb=a("li"),Y_e=a("strong"),xXo=o("layoutlmv3"),$Xo=o(" \u2014 "),GX=a("a"),kXo=o("LayoutLMv3ForSequenceClassification"),SXo=o(" (LayoutLMv3 model)"),RXo=l(),Eb=a("li"),K_e=a("strong"),PXo=o("led"),BXo=o(" \u2014 "),OX=a("a"),IXo=o("LEDForSequenceClassification"),NXo=o(" (LED model)"),qXo=l(),Cb=a("li"),Z_e=a("strong"),jXo=o("longformer"),DXo=o(" \u2014 "),VX=a("a"),GXo=o("LongformerForSequenceClassification"),OXo=o(" (Longformer model)"),VXo=l(),wb=a("li"),eue=a("strong"),XXo=o("mbart"),zXo=o(" \u2014 "),XX=a("a"),WXo=o("MBartForSequenceClassification"),QXo=o(" (mBART model)"),HXo=l(),Ab=a("li"),oue=a("strong"),UXo=o("megatron-bert"),JXo=o(" \u2014 "),zX=a("a"),YXo=o("MegatronBertForSequenceClassification"),KXo=o(" (Megatron-BERT model)"),ZXo=l(),Lb=a("li"),rue=a("strong"),ezo=o("mobilebert"),ozo=o(" \u2014 "),WX=a("a"),rzo=o("MobileBertForSequenceClassification"),tzo=o(" (MobileBERT model)"),azo=l(),yb=a("li"),tue=a("strong"),nzo=o("mpnet"),szo=o(" \u2014 "),QX=a("a"),lzo=o("MPNetForSequenceClassification"),izo=o(" (MPNet model)"),dzo=l(),xb=a("li"),aue=a("strong"),czo=o("mvp"),fzo=o(" \u2014 "),HX=a("a"),mzo=o("MvpForSequenceClassification"),gzo=o(" (MVP model)"),hzo=l(),$b=a("li"),nue=a("strong"),pzo=o("nezha"),_zo=o(" \u2014 "),UX=a("a"),uzo=o("NezhaForSequenceClassification"),bzo=o(" (Nezha model)"),vzo=l(),kb=a("li"),sue=a("strong"),Fzo=o("nystromformer"),Tzo=o(" \u2014 "),JX=a("a"),Mzo=o("NystromformerForSequenceClassification"),Ezo=o(" (Nystr\xF6mformer model)"),Czo=l(),Sb=a("li"),lue=a("strong"),wzo=o("openai-gpt"),Azo=o(" \u2014 "),YX=a("a"),Lzo=o("OpenAIGPTForSequenceClassification"),yzo=o(" (OpenAI GPT model)"),xzo=l(),Rb=a("li"),iue=a("strong"),$zo=o("opt"),kzo=o(" \u2014 "),KX=a("a"),Szo=o("OPTForSequenceClassification"),Rzo=o(" (OPT model)"),Pzo=l(),Pb=a("li"),due=a("strong"),Bzo=o("perceiver"),Izo=o(" \u2014 "),ZX=a("a"),Nzo=o("PerceiverForSequenceClassification"),qzo=o(" (Perceiver model)"),jzo=l(),Bb=a("li"),cue=a("strong"),Dzo=o("plbart"),Gzo=o(" \u2014 "),ez=a("a"),Ozo=o("PLBartForSequenceClassification"),Vzo=o(" (PLBart model)"),Xzo=l(),Ib=a("li"),fue=a("strong"),zzo=o("qdqbert"),Wzo=o(" \u2014 "),oz=a("a"),Qzo=o("QDQBertForSequenceClassification"),Hzo=o(" (QDQBert model)"),Uzo=l(),Nb=a("li"),mue=a("strong"),Jzo=o("reformer"),Yzo=o(" \u2014 "),rz=a("a"),Kzo=o("ReformerForSequenceClassification"),Zzo=o(" (Reformer model)"),eWo=l(),qb=a("li"),gue=a("strong"),oWo=o("rembert"),rWo=o(" \u2014 "),tz=a("a"),tWo=o("RemBertForSequenceClassification"),aWo=o(" (RemBERT model)"),nWo=l(),jb=a("li"),hue=a("strong"),sWo=o("roberta"),lWo=o(" \u2014 "),az=a("a"),iWo=o("RobertaForSequenceClassification"),dWo=o(" (RoBERTa model)"),cWo=l(),Db=a("li"),pue=a("strong"),fWo=o("roformer"),mWo=o(" \u2014 "),nz=a("a"),gWo=o("RoFormerForSequenceClassification"),hWo=o(" (RoFormer model)"),pWo=l(),Gb=a("li"),_ue=a("strong"),_Wo=o("squeezebert"),uWo=o(" \u2014 "),sz=a("a"),bWo=o("SqueezeBertForSequenceClassification"),vWo=o(" (SqueezeBERT model)"),FWo=l(),Ob=a("li"),uue=a("strong"),TWo=o("tapas"),MWo=o(" \u2014 "),lz=a("a"),EWo=o("TapasForSequenceClassification"),CWo=o(" (TAPAS model)"),wWo=l(),Vb=a("li"),bue=a("strong"),AWo=o("transfo-xl"),LWo=o(" \u2014 "),iz=a("a"),yWo=o("TransfoXLForSequenceClassification"),xWo=o(" (Transformer-XL model)"),$Wo=l(),Xb=a("li"),vue=a("strong"),kWo=o("xlm"),SWo=o(" \u2014 "),dz=a("a"),RWo=o("XLMForSequenceClassification"),PWo=o(" (XLM model)"),BWo=l(),zb=a("li"),Fue=a("strong"),IWo=o("xlm-roberta"),NWo=o(" \u2014 "),cz=a("a"),qWo=o("XLMRobertaForSequenceClassification"),jWo=o(" (XLM-RoBERTa model)"),DWo=l(),Wb=a("li"),Tue=a("strong"),GWo=o("xlm-roberta-xl"),OWo=o(" \u2014 "),fz=a("a"),VWo=o("XLMRobertaXLForSequenceClassification"),XWo=o(" (XLM-RoBERTa-XL model)"),zWo=l(),Qb=a("li"),Mue=a("strong"),WWo=o("xlnet"),QWo=o(" \u2014 "),mz=a("a"),HWo=o("XLNetForSequenceClassification"),UWo=o(" (XLNet model)"),JWo=l(),Hb=a("li"),Eue=a("strong"),YWo=o("yoso"),KWo=o(" \u2014 "),gz=a("a"),ZWo=o("YosoForSequenceClassification"),eQo=o(" (YOSO model)"),oQo=l(),Ub=a("p"),rQo=o("The model is set in evaluation mode by default using "),Cue=a("code"),tQo=o("model.eval()"),aQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=a("code"),nQo=o("model.train()"),sQo=l(),F(Jb.$$.fragment),hze=l(),ld=a("h2"),Yb=a("a"),Aue=a("span"),F(u8.$$.fragment),lQo=l(),Lue=a("span"),iQo=o("AutoModelForMultipleChoice"),pze=l(),No=a("div"),F(b8.$$.fragment),dQo=l(),id=a("p"),cQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hz=a("a"),fQo=o("from_pretrained()"),mQo=o(" class method or the "),pz=a("a"),gQo=o("from_config()"),hQo=o(` class
method.`),pQo=l(),v8=a("p"),_Qo=o("This class cannot be instantiated directly using "),yue=a("code"),uQo=o("__init__()"),bQo=o(" (throws an error)."),vQo=l(),ht=a("div"),F(F8.$$.fragment),FQo=l(),xue=a("p"),TQo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),MQo=l(),dd=a("p"),EQo=o(`Note:
Loading a model from its configuration file does `),$ue=a("strong"),CQo=o("not"),wQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),AQo=o("from_pretrained()"),LQo=o(" to load the model weights."),yQo=l(),F(Kb.$$.fragment),xQo=l(),to=a("div"),F(T8.$$.fragment),$Qo=l(),kue=a("p"),kQo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),SQo=l(),Oa=a("p"),RQo=o("The model class to instantiate is selected based on the "),Sue=a("code"),PQo=o("model_type"),BQo=o(` property of the config object (either
passed as an argument or loaded from `),Rue=a("code"),IQo=o("pretrained_model_name_or_path"),NQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=a("code"),qQo=o("pretrained_model_name_or_path"),jQo=o(":"),DQo=l(),Z=a("ul"),Zb=a("li"),Bue=a("strong"),GQo=o("albert"),OQo=o(" \u2014 "),uz=a("a"),VQo=o("AlbertForMultipleChoice"),XQo=o(" (ALBERT model)"),zQo=l(),ev=a("li"),Iue=a("strong"),WQo=o("bert"),QQo=o(" \u2014 "),bz=a("a"),HQo=o("BertForMultipleChoice"),UQo=o(" (BERT model)"),JQo=l(),ov=a("li"),Nue=a("strong"),YQo=o("big_bird"),KQo=o(" \u2014 "),vz=a("a"),ZQo=o("BigBirdForMultipleChoice"),eHo=o(" (BigBird model)"),oHo=l(),rv=a("li"),que=a("strong"),rHo=o("camembert"),tHo=o(" \u2014 "),Fz=a("a"),aHo=o("CamembertForMultipleChoice"),nHo=o(" (CamemBERT model)"),sHo=l(),tv=a("li"),jue=a("strong"),lHo=o("canine"),iHo=o(" \u2014 "),Tz=a("a"),dHo=o("CanineForMultipleChoice"),cHo=o(" (CANINE model)"),fHo=l(),av=a("li"),Due=a("strong"),mHo=o("convbert"),gHo=o(" \u2014 "),Mz=a("a"),hHo=o("ConvBertForMultipleChoice"),pHo=o(" (ConvBERT model)"),_Ho=l(),nv=a("li"),Gue=a("strong"),uHo=o("data2vec-text"),bHo=o(" \u2014 "),Ez=a("a"),vHo=o("Data2VecTextForMultipleChoice"),FHo=o(" (Data2VecText model)"),THo=l(),sv=a("li"),Oue=a("strong"),MHo=o("deberta-v2"),EHo=o(" \u2014 "),Cz=a("a"),CHo=o("DebertaV2ForMultipleChoice"),wHo=o(" (DeBERTa-v2 model)"),AHo=l(),lv=a("li"),Vue=a("strong"),LHo=o("distilbert"),yHo=o(" \u2014 "),wz=a("a"),xHo=o("DistilBertForMultipleChoice"),$Ho=o(" (DistilBERT model)"),kHo=l(),iv=a("li"),Xue=a("strong"),SHo=o("electra"),RHo=o(" \u2014 "),Az=a("a"),PHo=o("ElectraForMultipleChoice"),BHo=o(" (ELECTRA model)"),IHo=l(),dv=a("li"),zue=a("strong"),NHo=o("flaubert"),qHo=o(" \u2014 "),Lz=a("a"),jHo=o("FlaubertForMultipleChoice"),DHo=o(" (FlauBERT model)"),GHo=l(),cv=a("li"),Wue=a("strong"),OHo=o("fnet"),VHo=o(" \u2014 "),yz=a("a"),XHo=o("FNetForMultipleChoice"),zHo=o(" (FNet model)"),WHo=l(),fv=a("li"),Que=a("strong"),QHo=o("funnel"),HHo=o(" \u2014 "),xz=a("a"),UHo=o("FunnelForMultipleChoice"),JHo=o(" (Funnel Transformer model)"),YHo=l(),mv=a("li"),Hue=a("strong"),KHo=o("ibert"),ZHo=o(" \u2014 "),$z=a("a"),eUo=o("IBertForMultipleChoice"),oUo=o(" (I-BERT model)"),rUo=l(),gv=a("li"),Uue=a("strong"),tUo=o("longformer"),aUo=o(" \u2014 "),kz=a("a"),nUo=o("LongformerForMultipleChoice"),sUo=o(" (Longformer model)"),lUo=l(),hv=a("li"),Jue=a("strong"),iUo=o("megatron-bert"),dUo=o(" \u2014 "),Sz=a("a"),cUo=o("MegatronBertForMultipleChoice"),fUo=o(" (Megatron-BERT model)"),mUo=l(),pv=a("li"),Yue=a("strong"),gUo=o("mobilebert"),hUo=o(" \u2014 "),Rz=a("a"),pUo=o("MobileBertForMultipleChoice"),_Uo=o(" (MobileBERT model)"),uUo=l(),_v=a("li"),Kue=a("strong"),bUo=o("mpnet"),vUo=o(" \u2014 "),Pz=a("a"),FUo=o("MPNetForMultipleChoice"),TUo=o(" (MPNet model)"),MUo=l(),uv=a("li"),Zue=a("strong"),EUo=o("nezha"),CUo=o(" \u2014 "),Bz=a("a"),wUo=o("NezhaForMultipleChoice"),AUo=o(" (Nezha model)"),LUo=l(),bv=a("li"),e1e=a("strong"),yUo=o("nystromformer"),xUo=o(" \u2014 "),Iz=a("a"),$Uo=o("NystromformerForMultipleChoice"),kUo=o(" (Nystr\xF6mformer model)"),SUo=l(),vv=a("li"),o1e=a("strong"),RUo=o("qdqbert"),PUo=o(" \u2014 "),Nz=a("a"),BUo=o("QDQBertForMultipleChoice"),IUo=o(" (QDQBert model)"),NUo=l(),Fv=a("li"),r1e=a("strong"),qUo=o("rembert"),jUo=o(" \u2014 "),qz=a("a"),DUo=o("RemBertForMultipleChoice"),GUo=o(" (RemBERT model)"),OUo=l(),Tv=a("li"),t1e=a("strong"),VUo=o("roberta"),XUo=o(" \u2014 "),jz=a("a"),zUo=o("RobertaForMultipleChoice"),WUo=o(" (RoBERTa model)"),QUo=l(),Mv=a("li"),a1e=a("strong"),HUo=o("roformer"),UUo=o(" \u2014 "),Dz=a("a"),JUo=o("RoFormerForMultipleChoice"),YUo=o(" (RoFormer model)"),KUo=l(),Ev=a("li"),n1e=a("strong"),ZUo=o("squeezebert"),eJo=o(" \u2014 "),Gz=a("a"),oJo=o("SqueezeBertForMultipleChoice"),rJo=o(" (SqueezeBERT model)"),tJo=l(),Cv=a("li"),s1e=a("strong"),aJo=o("xlm"),nJo=o(" \u2014 "),Oz=a("a"),sJo=o("XLMForMultipleChoice"),lJo=o(" (XLM model)"),iJo=l(),wv=a("li"),l1e=a("strong"),dJo=o("xlm-roberta"),cJo=o(" \u2014 "),Vz=a("a"),fJo=o("XLMRobertaForMultipleChoice"),mJo=o(" (XLM-RoBERTa model)"),gJo=l(),Av=a("li"),i1e=a("strong"),hJo=o("xlm-roberta-xl"),pJo=o(" \u2014 "),Xz=a("a"),_Jo=o("XLMRobertaXLForMultipleChoice"),uJo=o(" (XLM-RoBERTa-XL model)"),bJo=l(),Lv=a("li"),d1e=a("strong"),vJo=o("xlnet"),FJo=o(" \u2014 "),zz=a("a"),TJo=o("XLNetForMultipleChoice"),MJo=o(" (XLNet model)"),EJo=l(),yv=a("li"),c1e=a("strong"),CJo=o("yoso"),wJo=o(" \u2014 "),Wz=a("a"),AJo=o("YosoForMultipleChoice"),LJo=o(" (YOSO model)"),yJo=l(),xv=a("p"),xJo=o("The model is set in evaluation mode by default using "),f1e=a("code"),$Jo=o("model.eval()"),kJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m1e=a("code"),SJo=o("model.train()"),RJo=l(),F($v.$$.fragment),_ze=l(),cd=a("h2"),kv=a("a"),g1e=a("span"),F(M8.$$.fragment),PJo=l(),h1e=a("span"),BJo=o("AutoModelForNextSentencePrediction"),uze=l(),qo=a("div"),F(E8.$$.fragment),IJo=l(),fd=a("p"),NJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Qz=a("a"),qJo=o("from_pretrained()"),jJo=o(" class method or the "),Hz=a("a"),DJo=o("from_config()"),GJo=o(` class
method.`),OJo=l(),C8=a("p"),VJo=o("This class cannot be instantiated directly using "),p1e=a("code"),XJo=o("__init__()"),zJo=o(" (throws an error)."),WJo=l(),pt=a("div"),F(w8.$$.fragment),QJo=l(),_1e=a("p"),HJo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),UJo=l(),md=a("p"),JJo=o(`Note:
Loading a model from its configuration file does `),u1e=a("strong"),YJo=o("not"),KJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=a("a"),ZJo=o("from_pretrained()"),eYo=o(" to load the model weights."),oYo=l(),F(Sv.$$.fragment),rYo=l(),ao=a("div"),F(A8.$$.fragment),tYo=l(),b1e=a("p"),aYo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nYo=l(),Va=a("p"),sYo=o("The model class to instantiate is selected based on the "),v1e=a("code"),lYo=o("model_type"),iYo=o(` property of the config object (either
passed as an argument or loaded from `),F1e=a("code"),dYo=o("pretrained_model_name_or_path"),cYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T1e=a("code"),fYo=o("pretrained_model_name_or_path"),mYo=o(":"),gYo=l(),jo=a("ul"),Rv=a("li"),M1e=a("strong"),hYo=o("bert"),pYo=o(" \u2014 "),Jz=a("a"),_Yo=o("BertForNextSentencePrediction"),uYo=o(" (BERT model)"),bYo=l(),Pv=a("li"),E1e=a("strong"),vYo=o("fnet"),FYo=o(" \u2014 "),Yz=a("a"),TYo=o("FNetForNextSentencePrediction"),MYo=o(" (FNet model)"),EYo=l(),Bv=a("li"),C1e=a("strong"),CYo=o("megatron-bert"),wYo=o(" \u2014 "),Kz=a("a"),AYo=o("MegatronBertForNextSentencePrediction"),LYo=o(" (Megatron-BERT model)"),yYo=l(),Iv=a("li"),w1e=a("strong"),xYo=o("mobilebert"),$Yo=o(" \u2014 "),Zz=a("a"),kYo=o("MobileBertForNextSentencePrediction"),SYo=o(" (MobileBERT model)"),RYo=l(),Nv=a("li"),A1e=a("strong"),PYo=o("nezha"),BYo=o(" \u2014 "),eW=a("a"),IYo=o("NezhaForNextSentencePrediction"),NYo=o(" (Nezha model)"),qYo=l(),qv=a("li"),L1e=a("strong"),jYo=o("qdqbert"),DYo=o(" \u2014 "),oW=a("a"),GYo=o("QDQBertForNextSentencePrediction"),OYo=o(" (QDQBert model)"),VYo=l(),jv=a("p"),XYo=o("The model is set in evaluation mode by default using "),y1e=a("code"),zYo=o("model.eval()"),WYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x1e=a("code"),QYo=o("model.train()"),HYo=l(),F(Dv.$$.fragment),bze=l(),gd=a("h2"),Gv=a("a"),$1e=a("span"),F(L8.$$.fragment),UYo=l(),k1e=a("span"),JYo=o("AutoModelForTokenClassification"),vze=l(),Do=a("div"),F(y8.$$.fragment),YYo=l(),hd=a("p"),KYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rW=a("a"),ZYo=o("from_pretrained()"),eKo=o(" class method or the "),tW=a("a"),oKo=o("from_config()"),rKo=o(` class
method.`),tKo=l(),x8=a("p"),aKo=o("This class cannot be instantiated directly using "),S1e=a("code"),nKo=o("__init__()"),sKo=o(" (throws an error)."),lKo=l(),_t=a("div"),F($8.$$.fragment),iKo=l(),R1e=a("p"),dKo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cKo=l(),pd=a("p"),fKo=o(`Note:
Loading a model from its configuration file does `),P1e=a("strong"),mKo=o("not"),gKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=a("a"),hKo=o("from_pretrained()"),pKo=o(" to load the model weights."),_Ko=l(),F(Ov.$$.fragment),uKo=l(),no=a("div"),F(k8.$$.fragment),bKo=l(),B1e=a("p"),vKo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),FKo=l(),Xa=a("p"),TKo=o("The model class to instantiate is selected based on the "),I1e=a("code"),MKo=o("model_type"),EKo=o(` property of the config object (either
passed as an argument or loaded from `),N1e=a("code"),CKo=o("pretrained_model_name_or_path"),wKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q1e=a("code"),AKo=o("pretrained_model_name_or_path"),LKo=o(":"),yKo=l(),U=a("ul"),Vv=a("li"),j1e=a("strong"),xKo=o("albert"),$Ko=o(" \u2014 "),nW=a("a"),kKo=o("AlbertForTokenClassification"),SKo=o(" (ALBERT model)"),RKo=l(),Xv=a("li"),D1e=a("strong"),PKo=o("bert"),BKo=o(" \u2014 "),sW=a("a"),IKo=o("BertForTokenClassification"),NKo=o(" (BERT model)"),qKo=l(),zv=a("li"),G1e=a("strong"),jKo=o("big_bird"),DKo=o(" \u2014 "),lW=a("a"),GKo=o("BigBirdForTokenClassification"),OKo=o(" (BigBird model)"),VKo=l(),Wv=a("li"),O1e=a("strong"),XKo=o("bloom"),zKo=o(" \u2014 "),iW=a("a"),WKo=o("BloomForTokenClassification"),QKo=o(" (BLOOM model)"),HKo=l(),Qv=a("li"),V1e=a("strong"),UKo=o("camembert"),JKo=o(" \u2014 "),dW=a("a"),YKo=o("CamembertForTokenClassification"),KKo=o(" (CamemBERT model)"),ZKo=l(),Hv=a("li"),X1e=a("strong"),eZo=o("canine"),oZo=o(" \u2014 "),cW=a("a"),rZo=o("CanineForTokenClassification"),tZo=o(" (CANINE model)"),aZo=l(),Uv=a("li"),z1e=a("strong"),nZo=o("convbert"),sZo=o(" \u2014 "),fW=a("a"),lZo=o("ConvBertForTokenClassification"),iZo=o(" (ConvBERT model)"),dZo=l(),Jv=a("li"),W1e=a("strong"),cZo=o("data2vec-text"),fZo=o(" \u2014 "),mW=a("a"),mZo=o("Data2VecTextForTokenClassification"),gZo=o(" (Data2VecText model)"),hZo=l(),Yv=a("li"),Q1e=a("strong"),pZo=o("deberta"),_Zo=o(" \u2014 "),gW=a("a"),uZo=o("DebertaForTokenClassification"),bZo=o(" (DeBERTa model)"),vZo=l(),Kv=a("li"),H1e=a("strong"),FZo=o("deberta-v2"),TZo=o(" \u2014 "),hW=a("a"),MZo=o("DebertaV2ForTokenClassification"),EZo=o(" (DeBERTa-v2 model)"),CZo=l(),Zv=a("li"),U1e=a("strong"),wZo=o("distilbert"),AZo=o(" \u2014 "),pW=a("a"),LZo=o("DistilBertForTokenClassification"),yZo=o(" (DistilBERT model)"),xZo=l(),e0=a("li"),J1e=a("strong"),$Zo=o("electra"),kZo=o(" \u2014 "),_W=a("a"),SZo=o("ElectraForTokenClassification"),RZo=o(" (ELECTRA model)"),PZo=l(),o0=a("li"),Y1e=a("strong"),BZo=o("flaubert"),IZo=o(" \u2014 "),uW=a("a"),NZo=o("FlaubertForTokenClassification"),qZo=o(" (FlauBERT model)"),jZo=l(),r0=a("li"),K1e=a("strong"),DZo=o("fnet"),GZo=o(" \u2014 "),bW=a("a"),OZo=o("FNetForTokenClassification"),VZo=o(" (FNet model)"),XZo=l(),t0=a("li"),Z1e=a("strong"),zZo=o("funnel"),WZo=o(" \u2014 "),vW=a("a"),QZo=o("FunnelForTokenClassification"),HZo=o(" (Funnel Transformer model)"),UZo=l(),a0=a("li"),e4e=a("strong"),JZo=o("gpt2"),YZo=o(" \u2014 "),FW=a("a"),KZo=o("GPT2ForTokenClassification"),ZZo=o(" (OpenAI GPT-2 model)"),eer=l(),n0=a("li"),o4e=a("strong"),oer=o("ibert"),rer=o(" \u2014 "),TW=a("a"),ter=o("IBertForTokenClassification"),aer=o(" (I-BERT model)"),ner=l(),s0=a("li"),r4e=a("strong"),ser=o("layoutlm"),ler=o(" \u2014 "),MW=a("a"),ier=o("LayoutLMForTokenClassification"),der=o(" (LayoutLM model)"),cer=l(),l0=a("li"),t4e=a("strong"),fer=o("layoutlmv2"),mer=o(" \u2014 "),EW=a("a"),ger=o("LayoutLMv2ForTokenClassification"),her=o(" (LayoutLMv2 model)"),per=l(),i0=a("li"),a4e=a("strong"),_er=o("layoutlmv3"),uer=o(" \u2014 "),CW=a("a"),ber=o("LayoutLMv3ForTokenClassification"),ver=o(" (LayoutLMv3 model)"),Fer=l(),d0=a("li"),n4e=a("strong"),Ter=o("longformer"),Mer=o(" \u2014 "),wW=a("a"),Eer=o("LongformerForTokenClassification"),Cer=o(" (Longformer model)"),wer=l(),c0=a("li"),s4e=a("strong"),Aer=o("megatron-bert"),Ler=o(" \u2014 "),AW=a("a"),yer=o("MegatronBertForTokenClassification"),xer=o(" (Megatron-BERT model)"),$er=l(),f0=a("li"),l4e=a("strong"),ker=o("mobilebert"),Ser=o(" \u2014 "),LW=a("a"),Rer=o("MobileBertForTokenClassification"),Per=o(" (MobileBERT model)"),Ber=l(),m0=a("li"),i4e=a("strong"),Ier=o("mpnet"),Ner=o(" \u2014 "),yW=a("a"),qer=o("MPNetForTokenClassification"),jer=o(" (MPNet model)"),Der=l(),g0=a("li"),d4e=a("strong"),Ger=o("nezha"),Oer=o(" \u2014 "),xW=a("a"),Ver=o("NezhaForTokenClassification"),Xer=o(" (Nezha model)"),zer=l(),h0=a("li"),c4e=a("strong"),Wer=o("nystromformer"),Qer=o(" \u2014 "),$W=a("a"),Her=o("NystromformerForTokenClassification"),Uer=o(" (Nystr\xF6mformer model)"),Jer=l(),p0=a("li"),f4e=a("strong"),Yer=o("qdqbert"),Ker=o(" \u2014 "),kW=a("a"),Zer=o("QDQBertForTokenClassification"),eor=o(" (QDQBert model)"),oor=l(),_0=a("li"),m4e=a("strong"),ror=o("rembert"),tor=o(" \u2014 "),SW=a("a"),aor=o("RemBertForTokenClassification"),nor=o(" (RemBERT model)"),sor=l(),u0=a("li"),g4e=a("strong"),lor=o("roberta"),ior=o(" \u2014 "),RW=a("a"),dor=o("RobertaForTokenClassification"),cor=o(" (RoBERTa model)"),mor=l(),b0=a("li"),h4e=a("strong"),gor=o("roformer"),hor=o(" \u2014 "),PW=a("a"),por=o("RoFormerForTokenClassification"),_or=o(" (RoFormer model)"),uor=l(),v0=a("li"),p4e=a("strong"),bor=o("squeezebert"),vor=o(" \u2014 "),BW=a("a"),For=o("SqueezeBertForTokenClassification"),Tor=o(" (SqueezeBERT model)"),Mor=l(),F0=a("li"),_4e=a("strong"),Eor=o("xlm"),Cor=o(" \u2014 "),IW=a("a"),wor=o("XLMForTokenClassification"),Aor=o(" (XLM model)"),Lor=l(),T0=a("li"),u4e=a("strong"),yor=o("xlm-roberta"),xor=o(" \u2014 "),NW=a("a"),$or=o("XLMRobertaForTokenClassification"),kor=o(" (XLM-RoBERTa model)"),Sor=l(),M0=a("li"),b4e=a("strong"),Ror=o("xlm-roberta-xl"),Por=o(" \u2014 "),qW=a("a"),Bor=o("XLMRobertaXLForTokenClassification"),Ior=o(" (XLM-RoBERTa-XL model)"),Nor=l(),E0=a("li"),v4e=a("strong"),qor=o("xlnet"),jor=o(" \u2014 "),jW=a("a"),Dor=o("XLNetForTokenClassification"),Gor=o(" (XLNet model)"),Oor=l(),C0=a("li"),F4e=a("strong"),Vor=o("yoso"),Xor=o(" \u2014 "),DW=a("a"),zor=o("YosoForTokenClassification"),Wor=o(" (YOSO model)"),Qor=l(),w0=a("p"),Hor=o("The model is set in evaluation mode by default using "),T4e=a("code"),Uor=o("model.eval()"),Jor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M4e=a("code"),Yor=o("model.train()"),Kor=l(),F(A0.$$.fragment),Fze=l(),_d=a("h2"),L0=a("a"),E4e=a("span"),F(S8.$$.fragment),Zor=l(),C4e=a("span"),err=o("AutoModelForQuestionAnswering"),Tze=l(),Go=a("div"),F(R8.$$.fragment),orr=l(),ud=a("p"),rrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GW=a("a"),trr=o("from_pretrained()"),arr=o(" class method or the "),OW=a("a"),nrr=o("from_config()"),srr=o(` class
method.`),lrr=l(),P8=a("p"),irr=o("This class cannot be instantiated directly using "),w4e=a("code"),drr=o("__init__()"),crr=o(" (throws an error)."),frr=l(),ut=a("div"),F(B8.$$.fragment),mrr=l(),A4e=a("p"),grr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hrr=l(),bd=a("p"),prr=o(`Note:
Loading a model from its configuration file does `),L4e=a("strong"),_rr=o("not"),urr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),brr=o("from_pretrained()"),vrr=o(" to load the model weights."),Frr=l(),F(y0.$$.fragment),Trr=l(),so=a("div"),F(I8.$$.fragment),Mrr=l(),y4e=a("p"),Err=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Crr=l(),za=a("p"),wrr=o("The model class to instantiate is selected based on the "),x4e=a("code"),Arr=o("model_type"),Lrr=o(` property of the config object (either
passed as an argument or loaded from `),$4e=a("code"),yrr=o("pretrained_model_name_or_path"),xrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=a("code"),$rr=o("pretrained_model_name_or_path"),krr=o(":"),Srr=l(),V=a("ul"),x0=a("li"),S4e=a("strong"),Rrr=o("albert"),Prr=o(" \u2014 "),XW=a("a"),Brr=o("AlbertForQuestionAnswering"),Irr=o(" (ALBERT model)"),Nrr=l(),$0=a("li"),R4e=a("strong"),qrr=o("bart"),jrr=o(" \u2014 "),zW=a("a"),Drr=o("BartForQuestionAnswering"),Grr=o(" (BART model)"),Orr=l(),k0=a("li"),P4e=a("strong"),Vrr=o("bert"),Xrr=o(" \u2014 "),WW=a("a"),zrr=o("BertForQuestionAnswering"),Wrr=o(" (BERT model)"),Qrr=l(),S0=a("li"),B4e=a("strong"),Hrr=o("big_bird"),Urr=o(" \u2014 "),QW=a("a"),Jrr=o("BigBirdForQuestionAnswering"),Yrr=o(" (BigBird model)"),Krr=l(),R0=a("li"),I4e=a("strong"),Zrr=o("bigbird_pegasus"),etr=o(" \u2014 "),HW=a("a"),otr=o("BigBirdPegasusForQuestionAnswering"),rtr=o(" (BigBird-Pegasus model)"),ttr=l(),P0=a("li"),N4e=a("strong"),atr=o("camembert"),ntr=o(" \u2014 "),UW=a("a"),str=o("CamembertForQuestionAnswering"),ltr=o(" (CamemBERT model)"),itr=l(),B0=a("li"),q4e=a("strong"),dtr=o("canine"),ctr=o(" \u2014 "),JW=a("a"),ftr=o("CanineForQuestionAnswering"),mtr=o(" (CANINE model)"),gtr=l(),I0=a("li"),j4e=a("strong"),htr=o("convbert"),ptr=o(" \u2014 "),YW=a("a"),_tr=o("ConvBertForQuestionAnswering"),utr=o(" (ConvBERT model)"),btr=l(),N0=a("li"),D4e=a("strong"),vtr=o("data2vec-text"),Ftr=o(" \u2014 "),KW=a("a"),Ttr=o("Data2VecTextForQuestionAnswering"),Mtr=o(" (Data2VecText model)"),Etr=l(),q0=a("li"),G4e=a("strong"),Ctr=o("deberta"),wtr=o(" \u2014 "),ZW=a("a"),Atr=o("DebertaForQuestionAnswering"),Ltr=o(" (DeBERTa model)"),ytr=l(),j0=a("li"),O4e=a("strong"),xtr=o("deberta-v2"),$tr=o(" \u2014 "),eQ=a("a"),ktr=o("DebertaV2ForQuestionAnswering"),Str=o(" (DeBERTa-v2 model)"),Rtr=l(),D0=a("li"),V4e=a("strong"),Ptr=o("distilbert"),Btr=o(" \u2014 "),oQ=a("a"),Itr=o("DistilBertForQuestionAnswering"),Ntr=o(" (DistilBERT model)"),qtr=l(),G0=a("li"),X4e=a("strong"),jtr=o("electra"),Dtr=o(" \u2014 "),rQ=a("a"),Gtr=o("ElectraForQuestionAnswering"),Otr=o(" (ELECTRA model)"),Vtr=l(),O0=a("li"),z4e=a("strong"),Xtr=o("flaubert"),ztr=o(" \u2014 "),tQ=a("a"),Wtr=o("FlaubertForQuestionAnsweringSimple"),Qtr=o(" (FlauBERT model)"),Htr=l(),V0=a("li"),W4e=a("strong"),Utr=o("fnet"),Jtr=o(" \u2014 "),aQ=a("a"),Ytr=o("FNetForQuestionAnswering"),Ktr=o(" (FNet model)"),Ztr=l(),X0=a("li"),Q4e=a("strong"),ear=o("funnel"),oar=o(" \u2014 "),nQ=a("a"),rar=o("FunnelForQuestionAnswering"),tar=o(" (Funnel Transformer model)"),aar=l(),z0=a("li"),H4e=a("strong"),nar=o("gptj"),sar=o(" \u2014 "),sQ=a("a"),lar=o("GPTJForQuestionAnswering"),iar=o(" (GPT-J model)"),dar=l(),W0=a("li"),U4e=a("strong"),car=o("ibert"),far=o(" \u2014 "),lQ=a("a"),mar=o("IBertForQuestionAnswering"),gar=o(" (I-BERT model)"),har=l(),Q0=a("li"),J4e=a("strong"),par=o("layoutlmv2"),_ar=o(" \u2014 "),iQ=a("a"),uar=o("LayoutLMv2ForQuestionAnswering"),bar=o(" (LayoutLMv2 model)"),Far=l(),H0=a("li"),Y4e=a("strong"),Tar=o("layoutlmv3"),Mar=o(" \u2014 "),dQ=a("a"),Ear=o("LayoutLMv3ForQuestionAnswering"),Car=o(" (LayoutLMv3 model)"),war=l(),U0=a("li"),K4e=a("strong"),Aar=o("led"),Lar=o(" \u2014 "),cQ=a("a"),yar=o("LEDForQuestionAnswering"),xar=o(" (LED model)"),$ar=l(),J0=a("li"),Z4e=a("strong"),kar=o("longformer"),Sar=o(" \u2014 "),fQ=a("a"),Rar=o("LongformerForQuestionAnswering"),Par=o(" (Longformer model)"),Bar=l(),Y0=a("li"),e2e=a("strong"),Iar=o("lxmert"),Nar=o(" \u2014 "),mQ=a("a"),qar=o("LxmertForQuestionAnswering"),jar=o(" (LXMERT model)"),Dar=l(),K0=a("li"),o2e=a("strong"),Gar=o("mbart"),Oar=o(" \u2014 "),gQ=a("a"),Var=o("MBartForQuestionAnswering"),Xar=o(" (mBART model)"),zar=l(),Z0=a("li"),r2e=a("strong"),War=o("megatron-bert"),Qar=o(" \u2014 "),hQ=a("a"),Har=o("MegatronBertForQuestionAnswering"),Uar=o(" (Megatron-BERT model)"),Jar=l(),eF=a("li"),t2e=a("strong"),Yar=o("mobilebert"),Kar=o(" \u2014 "),pQ=a("a"),Zar=o("MobileBertForQuestionAnswering"),enr=o(" (MobileBERT model)"),onr=l(),oF=a("li"),a2e=a("strong"),rnr=o("mpnet"),tnr=o(" \u2014 "),_Q=a("a"),anr=o("MPNetForQuestionAnswering"),nnr=o(" (MPNet model)"),snr=l(),rF=a("li"),n2e=a("strong"),lnr=o("mvp"),inr=o(" \u2014 "),uQ=a("a"),dnr=o("MvpForQuestionAnswering"),cnr=o(" (MVP model)"),fnr=l(),tF=a("li"),s2e=a("strong"),mnr=o("nezha"),gnr=o(" \u2014 "),bQ=a("a"),hnr=o("NezhaForQuestionAnswering"),pnr=o(" (Nezha model)"),_nr=l(),aF=a("li"),l2e=a("strong"),unr=o("nystromformer"),bnr=o(" \u2014 "),vQ=a("a"),vnr=o("NystromformerForQuestionAnswering"),Fnr=o(" (Nystr\xF6mformer model)"),Tnr=l(),nF=a("li"),i2e=a("strong"),Mnr=o("qdqbert"),Enr=o(" \u2014 "),FQ=a("a"),Cnr=o("QDQBertForQuestionAnswering"),wnr=o(" (QDQBert model)"),Anr=l(),sF=a("li"),d2e=a("strong"),Lnr=o("reformer"),ynr=o(" \u2014 "),TQ=a("a"),xnr=o("ReformerForQuestionAnswering"),$nr=o(" (Reformer model)"),knr=l(),lF=a("li"),c2e=a("strong"),Snr=o("rembert"),Rnr=o(" \u2014 "),MQ=a("a"),Pnr=o("RemBertForQuestionAnswering"),Bnr=o(" (RemBERT model)"),Inr=l(),iF=a("li"),f2e=a("strong"),Nnr=o("roberta"),qnr=o(" \u2014 "),EQ=a("a"),jnr=o("RobertaForQuestionAnswering"),Dnr=o(" (RoBERTa model)"),Gnr=l(),dF=a("li"),m2e=a("strong"),Onr=o("roformer"),Vnr=o(" \u2014 "),CQ=a("a"),Xnr=o("RoFormerForQuestionAnswering"),znr=o(" (RoFormer model)"),Wnr=l(),cF=a("li"),g2e=a("strong"),Qnr=o("splinter"),Hnr=o(" \u2014 "),wQ=a("a"),Unr=o("SplinterForQuestionAnswering"),Jnr=o(" (Splinter model)"),Ynr=l(),fF=a("li"),h2e=a("strong"),Knr=o("squeezebert"),Znr=o(" \u2014 "),AQ=a("a"),esr=o("SqueezeBertForQuestionAnswering"),osr=o(" (SqueezeBERT model)"),rsr=l(),mF=a("li"),p2e=a("strong"),tsr=o("xlm"),asr=o(" \u2014 "),LQ=a("a"),nsr=o("XLMForQuestionAnsweringSimple"),ssr=o(" (XLM model)"),lsr=l(),gF=a("li"),_2e=a("strong"),isr=o("xlm-roberta"),dsr=o(" \u2014 "),yQ=a("a"),csr=o("XLMRobertaForQuestionAnswering"),fsr=o(" (XLM-RoBERTa model)"),msr=l(),hF=a("li"),u2e=a("strong"),gsr=o("xlm-roberta-xl"),hsr=o(" \u2014 "),xQ=a("a"),psr=o("XLMRobertaXLForQuestionAnswering"),_sr=o(" (XLM-RoBERTa-XL model)"),usr=l(),pF=a("li"),b2e=a("strong"),bsr=o("xlnet"),vsr=o(" \u2014 "),$Q=a("a"),Fsr=o("XLNetForQuestionAnsweringSimple"),Tsr=o(" (XLNet model)"),Msr=l(),_F=a("li"),v2e=a("strong"),Esr=o("yoso"),Csr=o(" \u2014 "),kQ=a("a"),wsr=o("YosoForQuestionAnswering"),Asr=o(" (YOSO model)"),Lsr=l(),uF=a("p"),ysr=o("The model is set in evaluation mode by default using "),F2e=a("code"),xsr=o("model.eval()"),$sr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=a("code"),ksr=o("model.train()"),Ssr=l(),F(bF.$$.fragment),Mze=l(),vd=a("h2"),vF=a("a"),M2e=a("span"),F(N8.$$.fragment),Rsr=l(),E2e=a("span"),Psr=o("AutoModelForTableQuestionAnswering"),Eze=l(),Oo=a("div"),F(q8.$$.fragment),Bsr=l(),Fd=a("p"),Isr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),SQ=a("a"),Nsr=o("from_pretrained()"),qsr=o(" class method or the "),RQ=a("a"),jsr=o("from_config()"),Dsr=o(` class
method.`),Gsr=l(),j8=a("p"),Osr=o("This class cannot be instantiated directly using "),C2e=a("code"),Vsr=o("__init__()"),Xsr=o(" (throws an error)."),zsr=l(),bt=a("div"),F(D8.$$.fragment),Wsr=l(),w2e=a("p"),Qsr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Hsr=l(),Td=a("p"),Usr=o(`Note:
Loading a model from its configuration file does `),A2e=a("strong"),Jsr=o("not"),Ysr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=a("a"),Ksr=o("from_pretrained()"),Zsr=o(" to load the model weights."),elr=l(),F(FF.$$.fragment),olr=l(),lo=a("div"),F(G8.$$.fragment),rlr=l(),L2e=a("p"),tlr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),alr=l(),Wa=a("p"),nlr=o("The model class to instantiate is selected based on the "),y2e=a("code"),slr=o("model_type"),llr=o(` property of the config object (either
passed as an argument or loaded from `),x2e=a("code"),ilr=o("pretrained_model_name_or_path"),dlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=a("code"),clr=o("pretrained_model_name_or_path"),flr=o(":"),mlr=l(),k2e=a("ul"),TF=a("li"),S2e=a("strong"),glr=o("tapas"),hlr=o(" \u2014 "),BQ=a("a"),plr=o("TapasForQuestionAnswering"),_lr=o(" (TAPAS model)"),ulr=l(),MF=a("p"),blr=o("The model is set in evaluation mode by default using "),R2e=a("code"),vlr=o("model.eval()"),Flr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P2e=a("code"),Tlr=o("model.train()"),Mlr=l(),F(EF.$$.fragment),Cze=l(),Md=a("h2"),CF=a("a"),B2e=a("span"),F(O8.$$.fragment),Elr=l(),I2e=a("span"),Clr=o("AutoModelForImageClassification"),wze=l(),Vo=a("div"),F(V8.$$.fragment),wlr=l(),Ed=a("p"),Alr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),IQ=a("a"),Llr=o("from_pretrained()"),ylr=o(" class method or the "),NQ=a("a"),xlr=o("from_config()"),$lr=o(` class
method.`),klr=l(),X8=a("p"),Slr=o("This class cannot be instantiated directly using "),N2e=a("code"),Rlr=o("__init__()"),Plr=o(" (throws an error)."),Blr=l(),vt=a("div"),F(z8.$$.fragment),Ilr=l(),q2e=a("p"),Nlr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qlr=l(),Cd=a("p"),jlr=o(`Note:
Loading a model from its configuration file does `),j2e=a("strong"),Dlr=o("not"),Glr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=a("a"),Olr=o("from_pretrained()"),Vlr=o(" to load the model weights."),Xlr=l(),F(wF.$$.fragment),zlr=l(),io=a("div"),F(W8.$$.fragment),Wlr=l(),D2e=a("p"),Qlr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Hlr=l(),Qa=a("p"),Ulr=o("The model class to instantiate is selected based on the "),G2e=a("code"),Jlr=o("model_type"),Ylr=o(` property of the config object (either
passed as an argument or loaded from `),O2e=a("code"),Klr=o("pretrained_model_name_or_path"),Zlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=a("code"),eir=o("pretrained_model_name_or_path"),oir=o(":"),rir=l(),ve=a("ul"),AF=a("li"),X2e=a("strong"),tir=o("beit"),air=o(" \u2014 "),jQ=a("a"),nir=o("BeitForImageClassification"),sir=o(" (BEiT model)"),lir=l(),LF=a("li"),z2e=a("strong"),iir=o("convnext"),dir=o(" \u2014 "),DQ=a("a"),cir=o("ConvNextForImageClassification"),fir=o(" (ConvNeXT model)"),mir=l(),yF=a("li"),W2e=a("strong"),gir=o("cvt"),hir=o(" \u2014 "),GQ=a("a"),pir=o("CvtForImageClassification"),_ir=o(" (CvT model)"),uir=l(),xF=a("li"),Q2e=a("strong"),bir=o("data2vec-vision"),vir=o(" \u2014 "),OQ=a("a"),Fir=o("Data2VecVisionForImageClassification"),Tir=o(" (Data2VecVision model)"),Mir=l(),Js=a("li"),H2e=a("strong"),Eir=o("deit"),Cir=o(" \u2014 "),VQ=a("a"),wir=o("DeiTForImageClassification"),Air=o(" or "),XQ=a("a"),Lir=o("DeiTForImageClassificationWithTeacher"),yir=o(" (DeiT model)"),xir=l(),$F=a("li"),U2e=a("strong"),$ir=o("imagegpt"),kir=o(" \u2014 "),zQ=a("a"),Sir=o("ImageGPTForImageClassification"),Rir=o(" (ImageGPT model)"),Pir=l(),Ys=a("li"),J2e=a("strong"),Bir=o("levit"),Iir=o(" \u2014 "),WQ=a("a"),Nir=o("LevitForImageClassification"),qir=o(" or "),QQ=a("a"),jir=o("LevitForImageClassificationWithTeacher"),Dir=o(" (LeViT model)"),Gir=l(),kF=a("li"),Y2e=a("strong"),Oir=o("mobilevit"),Vir=o(" \u2014 "),HQ=a("a"),Xir=o("MobileViTForImageClassification"),zir=o(" (MobileViT model)"),Wir=l(),Ft=a("li"),K2e=a("strong"),Qir=o("perceiver"),Hir=o(" \u2014 "),UQ=a("a"),Uir=o("PerceiverForImageClassificationLearned"),Jir=o(" or "),JQ=a("a"),Yir=o("PerceiverForImageClassificationFourier"),Kir=o(" or "),YQ=a("a"),Zir=o("PerceiverForImageClassificationConvProcessing"),edr=o(" (Perceiver model)"),odr=l(),SF=a("li"),Z2e=a("strong"),rdr=o("poolformer"),tdr=o(" \u2014 "),KQ=a("a"),adr=o("PoolFormerForImageClassification"),ndr=o(" (PoolFormer model)"),sdr=l(),RF=a("li"),ebe=a("strong"),ldr=o("regnet"),idr=o(" \u2014 "),ZQ=a("a"),ddr=o("RegNetForImageClassification"),cdr=o(" (RegNet model)"),fdr=l(),PF=a("li"),obe=a("strong"),mdr=o("resnet"),gdr=o(" \u2014 "),eH=a("a"),hdr=o("ResNetForImageClassification"),pdr=o(" (ResNet model)"),_dr=l(),BF=a("li"),rbe=a("strong"),udr=o("segformer"),bdr=o(" \u2014 "),oH=a("a"),vdr=o("SegformerForImageClassification"),Fdr=o(" (SegFormer model)"),Tdr=l(),IF=a("li"),tbe=a("strong"),Mdr=o("swin"),Edr=o(" \u2014 "),rH=a("a"),Cdr=o("SwinForImageClassification"),wdr=o(" (Swin Transformer model)"),Adr=l(),NF=a("li"),abe=a("strong"),Ldr=o("van"),ydr=o(" \u2014 "),tH=a("a"),xdr=o("VanForImageClassification"),$dr=o(" (VAN model)"),kdr=l(),qF=a("li"),nbe=a("strong"),Sdr=o("vit"),Rdr=o(" \u2014 "),aH=a("a"),Pdr=o("ViTForImageClassification"),Bdr=o(" (ViT model)"),Idr=l(),jF=a("p"),Ndr=o("The model is set in evaluation mode by default using "),sbe=a("code"),qdr=o("model.eval()"),jdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lbe=a("code"),Ddr=o("model.train()"),Gdr=l(),F(DF.$$.fragment),Aze=l(),wd=a("h2"),GF=a("a"),ibe=a("span"),F(Q8.$$.fragment),Odr=l(),dbe=a("span"),Vdr=o("AutoModelForVision2Seq"),Lze=l(),Xo=a("div"),F(H8.$$.fragment),Xdr=l(),Ad=a("p"),zdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nH=a("a"),Wdr=o("from_pretrained()"),Qdr=o(" class method or the "),sH=a("a"),Hdr=o("from_config()"),Udr=o(` class
method.`),Jdr=l(),U8=a("p"),Ydr=o("This class cannot be instantiated directly using "),cbe=a("code"),Kdr=o("__init__()"),Zdr=o(" (throws an error)."),ecr=l(),Tt=a("div"),F(J8.$$.fragment),ocr=l(),fbe=a("p"),rcr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tcr=l(),Ld=a("p"),acr=o(`Note:
Loading a model from its configuration file does `),mbe=a("strong"),ncr=o("not"),scr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),lcr=o("from_pretrained()"),icr=o(" to load the model weights."),dcr=l(),F(OF.$$.fragment),ccr=l(),co=a("div"),F(Y8.$$.fragment),fcr=l(),gbe=a("p"),mcr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gcr=l(),Ha=a("p"),hcr=o("The model class to instantiate is selected based on the "),hbe=a("code"),pcr=o("model_type"),_cr=o(` property of the config object (either
passed as an argument or loaded from `),pbe=a("code"),ucr=o("pretrained_model_name_or_path"),bcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=a("code"),vcr=o("pretrained_model_name_or_path"),Fcr=o(":"),Tcr=l(),ube=a("ul"),VF=a("li"),bbe=a("strong"),Mcr=o("vision-encoder-decoder"),Ecr=o(" \u2014 "),iH=a("a"),Ccr=o("VisionEncoderDecoderModel"),wcr=o(" (Vision Encoder decoder model)"),Acr=l(),XF=a("p"),Lcr=o("The model is set in evaluation mode by default using "),vbe=a("code"),ycr=o("model.eval()"),xcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fbe=a("code"),$cr=o("model.train()"),kcr=l(),F(zF.$$.fragment),yze=l(),yd=a("h2"),WF=a("a"),Tbe=a("span"),F(K8.$$.fragment),Scr=l(),Mbe=a("span"),Rcr=o("AutoModelForVisualQuestionAnswering"),xze=l(),zo=a("div"),F(Z8.$$.fragment),Pcr=l(),xd=a("p"),Bcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),dH=a("a"),Icr=o("from_pretrained()"),Ncr=o(" class method or the "),cH=a("a"),qcr=o("from_config()"),jcr=o(` class
method.`),Dcr=l(),e9=a("p"),Gcr=o("This class cannot be instantiated directly using "),Ebe=a("code"),Ocr=o("__init__()"),Vcr=o(" (throws an error)."),Xcr=l(),Mt=a("div"),F(o9.$$.fragment),zcr=l(),Cbe=a("p"),Wcr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Qcr=l(),$d=a("p"),Hcr=o(`Note:
Loading a model from its configuration file does `),wbe=a("strong"),Ucr=o("not"),Jcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),Ycr=o("from_pretrained()"),Kcr=o(" to load the model weights."),Zcr=l(),F(QF.$$.fragment),efr=l(),fo=a("div"),F(r9.$$.fragment),ofr=l(),Abe=a("p"),rfr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),tfr=l(),Ua=a("p"),afr=o("The model class to instantiate is selected based on the "),Lbe=a("code"),nfr=o("model_type"),sfr=o(` property of the config object (either
passed as an argument or loaded from `),ybe=a("code"),lfr=o("pretrained_model_name_or_path"),ifr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),dfr=o("pretrained_model_name_or_path"),cfr=o(":"),ffr=l(),$be=a("ul"),HF=a("li"),kbe=a("strong"),mfr=o("vilt"),gfr=o(" \u2014 "),mH=a("a"),hfr=o("ViltForQuestionAnswering"),pfr=o(" (ViLT model)"),_fr=l(),UF=a("p"),ufr=o("The model is set in evaluation mode by default using "),Sbe=a("code"),bfr=o("model.eval()"),vfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rbe=a("code"),Ffr=o("model.train()"),Tfr=l(),F(JF.$$.fragment),$ze=l(),kd=a("h2"),YF=a("a"),Pbe=a("span"),F(t9.$$.fragment),Mfr=l(),Bbe=a("span"),Efr=o("AutoModelForAudioClassification"),kze=l(),Wo=a("div"),F(a9.$$.fragment),Cfr=l(),Sd=a("p"),wfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),gH=a("a"),Afr=o("from_pretrained()"),Lfr=o(" class method or the "),hH=a("a"),yfr=o("from_config()"),xfr=o(` class
method.`),$fr=l(),n9=a("p"),kfr=o("This class cannot be instantiated directly using "),Ibe=a("code"),Sfr=o("__init__()"),Rfr=o(" (throws an error)."),Pfr=l(),Et=a("div"),F(s9.$$.fragment),Bfr=l(),Nbe=a("p"),Ifr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Nfr=l(),Rd=a("p"),qfr=o(`Note:
Loading a model from its configuration file does `),qbe=a("strong"),jfr=o("not"),Dfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),Gfr=o("from_pretrained()"),Ofr=o(" to load the model weights."),Vfr=l(),F(KF.$$.fragment),Xfr=l(),mo=a("div"),F(l9.$$.fragment),zfr=l(),jbe=a("p"),Wfr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Qfr=l(),Ja=a("p"),Hfr=o("The model class to instantiate is selected based on the "),Dbe=a("code"),Ufr=o("model_type"),Jfr=o(` property of the config object (either
passed as an argument or loaded from `),Gbe=a("code"),Yfr=o("pretrained_model_name_or_path"),Kfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=a("code"),Zfr=o("pretrained_model_name_or_path"),emr=o(":"),omr=l(),Pe=a("ul"),ZF=a("li"),Vbe=a("strong"),rmr=o("data2vec-audio"),tmr=o(" \u2014 "),_H=a("a"),amr=o("Data2VecAudioForSequenceClassification"),nmr=o(" (Data2VecAudio model)"),smr=l(),e6=a("li"),Xbe=a("strong"),lmr=o("hubert"),imr=o(" \u2014 "),uH=a("a"),dmr=o("HubertForSequenceClassification"),cmr=o(" (Hubert model)"),fmr=l(),o6=a("li"),zbe=a("strong"),mmr=o("sew"),gmr=o(" \u2014 "),bH=a("a"),hmr=o("SEWForSequenceClassification"),pmr=o(" (SEW model)"),_mr=l(),r6=a("li"),Wbe=a("strong"),umr=o("sew-d"),bmr=o(" \u2014 "),vH=a("a"),vmr=o("SEWDForSequenceClassification"),Fmr=o(" (SEW-D model)"),Tmr=l(),t6=a("li"),Qbe=a("strong"),Mmr=o("unispeech"),Emr=o(" \u2014 "),FH=a("a"),Cmr=o("UniSpeechForSequenceClassification"),wmr=o(" (UniSpeech model)"),Amr=l(),a6=a("li"),Hbe=a("strong"),Lmr=o("unispeech-sat"),ymr=o(" \u2014 "),TH=a("a"),xmr=o("UniSpeechSatForSequenceClassification"),$mr=o(" (UniSpeechSat model)"),kmr=l(),n6=a("li"),Ube=a("strong"),Smr=o("wav2vec2"),Rmr=o(" \u2014 "),MH=a("a"),Pmr=o("Wav2Vec2ForSequenceClassification"),Bmr=o(" (Wav2Vec2 model)"),Imr=l(),s6=a("li"),Jbe=a("strong"),Nmr=o("wav2vec2-conformer"),qmr=o(" \u2014 "),EH=a("a"),jmr=o("Wav2Vec2ConformerForSequenceClassification"),Dmr=o(" (Wav2Vec2-Conformer model)"),Gmr=l(),l6=a("li"),Ybe=a("strong"),Omr=o("wavlm"),Vmr=o(" \u2014 "),CH=a("a"),Xmr=o("WavLMForSequenceClassification"),zmr=o(" (WavLM model)"),Wmr=l(),i6=a("p"),Qmr=o("The model is set in evaluation mode by default using "),Kbe=a("code"),Hmr=o("model.eval()"),Umr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zbe=a("code"),Jmr=o("model.train()"),Ymr=l(),F(d6.$$.fragment),Sze=l(),Pd=a("h2"),c6=a("a"),eve=a("span"),F(i9.$$.fragment),Kmr=l(),ove=a("span"),Zmr=o("AutoModelForAudioFrameClassification"),Rze=l(),Qo=a("div"),F(d9.$$.fragment),egr=l(),Bd=a("p"),ogr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),wH=a("a"),rgr=o("from_pretrained()"),tgr=o(" class method or the "),AH=a("a"),agr=o("from_config()"),ngr=o(` class
method.`),sgr=l(),c9=a("p"),lgr=o("This class cannot be instantiated directly using "),rve=a("code"),igr=o("__init__()"),dgr=o(" (throws an error)."),cgr=l(),Ct=a("div"),F(f9.$$.fragment),fgr=l(),tve=a("p"),mgr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ggr=l(),Id=a("p"),hgr=o(`Note:
Loading a model from its configuration file does `),ave=a("strong"),pgr=o("not"),_gr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=a("a"),ugr=o("from_pretrained()"),bgr=o(" to load the model weights."),vgr=l(),F(f6.$$.fragment),Fgr=l(),go=a("div"),F(m9.$$.fragment),Tgr=l(),nve=a("p"),Mgr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Egr=l(),Ya=a("p"),Cgr=o("The model class to instantiate is selected based on the "),sve=a("code"),wgr=o("model_type"),Agr=o(` property of the config object (either
passed as an argument or loaded from `),lve=a("code"),Lgr=o("pretrained_model_name_or_path"),ygr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=a("code"),xgr=o("pretrained_model_name_or_path"),$gr=o(":"),kgr=l(),rt=a("ul"),m6=a("li"),dve=a("strong"),Sgr=o("data2vec-audio"),Rgr=o(" \u2014 "),yH=a("a"),Pgr=o("Data2VecAudioForAudioFrameClassification"),Bgr=o(" (Data2VecAudio model)"),Igr=l(),g6=a("li"),cve=a("strong"),Ngr=o("unispeech-sat"),qgr=o(" \u2014 "),xH=a("a"),jgr=o("UniSpeechSatForAudioFrameClassification"),Dgr=o(" (UniSpeechSat model)"),Ggr=l(),h6=a("li"),fve=a("strong"),Ogr=o("wav2vec2"),Vgr=o(" \u2014 "),$H=a("a"),Xgr=o("Wav2Vec2ForAudioFrameClassification"),zgr=o(" (Wav2Vec2 model)"),Wgr=l(),p6=a("li"),mve=a("strong"),Qgr=o("wav2vec2-conformer"),Hgr=o(" \u2014 "),kH=a("a"),Ugr=o("Wav2Vec2ConformerForAudioFrameClassification"),Jgr=o(" (Wav2Vec2-Conformer model)"),Ygr=l(),_6=a("li"),gve=a("strong"),Kgr=o("wavlm"),Zgr=o(" \u2014 "),SH=a("a"),ehr=o("WavLMForAudioFrameClassification"),ohr=o(" (WavLM model)"),rhr=l(),u6=a("p"),thr=o("The model is set in evaluation mode by default using "),hve=a("code"),ahr=o("model.eval()"),nhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pve=a("code"),shr=o("model.train()"),lhr=l(),F(b6.$$.fragment),Pze=l(),Nd=a("h2"),v6=a("a"),_ve=a("span"),F(g9.$$.fragment),ihr=l(),uve=a("span"),dhr=o("AutoModelForCTC"),Bze=l(),Ho=a("div"),F(h9.$$.fragment),chr=l(),qd=a("p"),fhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),RH=a("a"),mhr=o("from_pretrained()"),ghr=o(" class method or the "),PH=a("a"),hhr=o("from_config()"),phr=o(` class
method.`),_hr=l(),p9=a("p"),uhr=o("This class cannot be instantiated directly using "),bve=a("code"),bhr=o("__init__()"),vhr=o(" (throws an error)."),Fhr=l(),wt=a("div"),F(_9.$$.fragment),Thr=l(),vve=a("p"),Mhr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Ehr=l(),jd=a("p"),Chr=o(`Note:
Loading a model from its configuration file does `),Fve=a("strong"),whr=o("not"),Ahr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),Lhr=o("from_pretrained()"),yhr=o(" to load the model weights."),xhr=l(),F(F6.$$.fragment),$hr=l(),ho=a("div"),F(u9.$$.fragment),khr=l(),Tve=a("p"),Shr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Rhr=l(),Ka=a("p"),Phr=o("The model class to instantiate is selected based on the "),Mve=a("code"),Bhr=o("model_type"),Ihr=o(` property of the config object (either
passed as an argument or loaded from `),Eve=a("code"),Nhr=o("pretrained_model_name_or_path"),qhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=a("code"),jhr=o("pretrained_model_name_or_path"),Dhr=o(":"),Ghr=l(),Le=a("ul"),T6=a("li"),wve=a("strong"),Ohr=o("data2vec-audio"),Vhr=o(" \u2014 "),IH=a("a"),Xhr=o("Data2VecAudioForCTC"),zhr=o(" (Data2VecAudio model)"),Whr=l(),M6=a("li"),Ave=a("strong"),Qhr=o("hubert"),Hhr=o(" \u2014 "),NH=a("a"),Uhr=o("HubertForCTC"),Jhr=o(" (Hubert model)"),Yhr=l(),E6=a("li"),Lve=a("strong"),Khr=o("mctct"),Zhr=o(" \u2014 "),qH=a("a"),epr=o("MCTCTForCTC"),opr=o(" (M-CTC-T model)"),rpr=l(),C6=a("li"),yve=a("strong"),tpr=o("sew"),apr=o(" \u2014 "),jH=a("a"),npr=o("SEWForCTC"),spr=o(" (SEW model)"),lpr=l(),w6=a("li"),xve=a("strong"),ipr=o("sew-d"),dpr=o(" \u2014 "),DH=a("a"),cpr=o("SEWDForCTC"),fpr=o(" (SEW-D model)"),mpr=l(),A6=a("li"),$ve=a("strong"),gpr=o("unispeech"),hpr=o(" \u2014 "),GH=a("a"),ppr=o("UniSpeechForCTC"),_pr=o(" (UniSpeech model)"),upr=l(),L6=a("li"),kve=a("strong"),bpr=o("unispeech-sat"),vpr=o(" \u2014 "),OH=a("a"),Fpr=o("UniSpeechSatForCTC"),Tpr=o(" (UniSpeechSat model)"),Mpr=l(),y6=a("li"),Sve=a("strong"),Epr=o("wav2vec2"),Cpr=o(" \u2014 "),VH=a("a"),wpr=o("Wav2Vec2ForCTC"),Apr=o(" (Wav2Vec2 model)"),Lpr=l(),x6=a("li"),Rve=a("strong"),ypr=o("wav2vec2-conformer"),xpr=o(" \u2014 "),XH=a("a"),$pr=o("Wav2Vec2ConformerForCTC"),kpr=o(" (Wav2Vec2-Conformer model)"),Spr=l(),$6=a("li"),Pve=a("strong"),Rpr=o("wavlm"),Ppr=o(" \u2014 "),zH=a("a"),Bpr=o("WavLMForCTC"),Ipr=o(" (WavLM model)"),Npr=l(),k6=a("p"),qpr=o("The model is set in evaluation mode by default using "),Bve=a("code"),jpr=o("model.eval()"),Dpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ive=a("code"),Gpr=o("model.train()"),Opr=l(),F(S6.$$.fragment),Ize=l(),Dd=a("h2"),R6=a("a"),Nve=a("span"),F(b9.$$.fragment),Vpr=l(),qve=a("span"),Xpr=o("AutoModelForSpeechSeq2Seq"),Nze=l(),Uo=a("div"),F(v9.$$.fragment),zpr=l(),Gd=a("p"),Wpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),WH=a("a"),Qpr=o("from_pretrained()"),Hpr=o(" class method or the "),QH=a("a"),Upr=o("from_config()"),Jpr=o(` class
method.`),Ypr=l(),F9=a("p"),Kpr=o("This class cannot be instantiated directly using "),jve=a("code"),Zpr=o("__init__()"),e_r=o(" (throws an error)."),o_r=l(),At=a("div"),F(T9.$$.fragment),r_r=l(),Dve=a("p"),t_r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),a_r=l(),Od=a("p"),n_r=o(`Note:
Loading a model from its configuration file does `),Gve=a("strong"),s_r=o("not"),l_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),i_r=o("from_pretrained()"),d_r=o(" to load the model weights."),c_r=l(),F(P6.$$.fragment),f_r=l(),po=a("div"),F(M9.$$.fragment),m_r=l(),Ove=a("p"),g_r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),h_r=l(),Za=a("p"),p_r=o("The model class to instantiate is selected based on the "),Vve=a("code"),__r=o("model_type"),u_r=o(` property of the config object (either
passed as an argument or loaded from `),Xve=a("code"),b_r=o("pretrained_model_name_or_path"),v_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zve=a("code"),F_r=o("pretrained_model_name_or_path"),T_r=o(":"),M_r=l(),E9=a("ul"),B6=a("li"),Wve=a("strong"),E_r=o("speech-encoder-decoder"),C_r=o(" \u2014 "),UH=a("a"),w_r=o("SpeechEncoderDecoderModel"),A_r=o(" (Speech Encoder decoder model)"),L_r=l(),I6=a("li"),Qve=a("strong"),y_r=o("speech_to_text"),x_r=o(" \u2014 "),JH=a("a"),$_r=o("Speech2TextForConditionalGeneration"),k_r=o(" (Speech2Text model)"),S_r=l(),N6=a("p"),R_r=o("The model is set in evaluation mode by default using "),Hve=a("code"),P_r=o("model.eval()"),B_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uve=a("code"),I_r=o("model.train()"),N_r=l(),F(q6.$$.fragment),qze=l(),Vd=a("h2"),j6=a("a"),Jve=a("span"),F(C9.$$.fragment),q_r=l(),Yve=a("span"),j_r=o("AutoModelForAudioXVector"),jze=l(),Jo=a("div"),F(w9.$$.fragment),D_r=l(),Xd=a("p"),G_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),YH=a("a"),O_r=o("from_pretrained()"),V_r=o(" class method or the "),KH=a("a"),X_r=o("from_config()"),z_r=o(` class
method.`),W_r=l(),A9=a("p"),Q_r=o("This class cannot be instantiated directly using "),Kve=a("code"),H_r=o("__init__()"),U_r=o(" (throws an error)."),J_r=l(),Lt=a("div"),F(L9.$$.fragment),Y_r=l(),Zve=a("p"),K_r=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Z_r=l(),zd=a("p"),eur=o(`Note:
Loading a model from its configuration file does `),e0e=a("strong"),our=o("not"),rur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=a("a"),tur=o("from_pretrained()"),aur=o(" to load the model weights."),nur=l(),F(D6.$$.fragment),sur=l(),_o=a("div"),F(y9.$$.fragment),lur=l(),o0e=a("p"),iur=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),dur=l(),en=a("p"),cur=o("The model class to instantiate is selected based on the "),r0e=a("code"),fur=o("model_type"),mur=o(` property of the config object (either
passed as an argument or loaded from `),t0e=a("code"),gur=o("pretrained_model_name_or_path"),hur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a0e=a("code"),pur=o("pretrained_model_name_or_path"),_ur=o(":"),uur=l(),tt=a("ul"),G6=a("li"),n0e=a("strong"),bur=o("data2vec-audio"),vur=o(" \u2014 "),eU=a("a"),Fur=o("Data2VecAudioForXVector"),Tur=o(" (Data2VecAudio model)"),Mur=l(),O6=a("li"),s0e=a("strong"),Eur=o("unispeech-sat"),Cur=o(" \u2014 "),oU=a("a"),wur=o("UniSpeechSatForXVector"),Aur=o(" (UniSpeechSat model)"),Lur=l(),V6=a("li"),l0e=a("strong"),yur=o("wav2vec2"),xur=o(" \u2014 "),rU=a("a"),$ur=o("Wav2Vec2ForXVector"),kur=o(" (Wav2Vec2 model)"),Sur=l(),X6=a("li"),i0e=a("strong"),Rur=o("wav2vec2-conformer"),Pur=o(" \u2014 "),tU=a("a"),Bur=o("Wav2Vec2ConformerForXVector"),Iur=o(" (Wav2Vec2-Conformer model)"),Nur=l(),z6=a("li"),d0e=a("strong"),qur=o("wavlm"),jur=o(" \u2014 "),aU=a("a"),Dur=o("WavLMForXVector"),Gur=o(" (WavLM model)"),Our=l(),W6=a("p"),Vur=o("The model is set in evaluation mode by default using "),c0e=a("code"),Xur=o("model.eval()"),zur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f0e=a("code"),Wur=o("model.train()"),Qur=l(),F(Q6.$$.fragment),Dze=l(),Wd=a("h2"),H6=a("a"),m0e=a("span"),F(x9.$$.fragment),Hur=l(),g0e=a("span"),Uur=o("AutoModelForMaskedImageModeling"),Gze=l(),Yo=a("div"),F($9.$$.fragment),Jur=l(),Qd=a("p"),Yur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),nU=a("a"),Kur=o("from_pretrained()"),Zur=o(" class method or the "),sU=a("a"),e1r=o("from_config()"),o1r=o(` class
method.`),r1r=l(),k9=a("p"),t1r=o("This class cannot be instantiated directly using "),h0e=a("code"),a1r=o("__init__()"),n1r=o(" (throws an error)."),s1r=l(),yt=a("div"),F(S9.$$.fragment),l1r=l(),p0e=a("p"),i1r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),d1r=l(),Hd=a("p"),c1r=o(`Note:
Loading a model from its configuration file does `),_0e=a("strong"),f1r=o("not"),m1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),g1r=o("from_pretrained()"),h1r=o(" to load the model weights."),p1r=l(),F(U6.$$.fragment),_1r=l(),uo=a("div"),F(R9.$$.fragment),u1r=l(),u0e=a("p"),b1r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),v1r=l(),on=a("p"),F1r=o("The model class to instantiate is selected based on the "),b0e=a("code"),T1r=o("model_type"),M1r=o(` property of the config object (either
passed as an argument or loaded from `),v0e=a("code"),E1r=o("pretrained_model_name_or_path"),C1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=a("code"),w1r=o("pretrained_model_name_or_path"),A1r=o(":"),L1r=l(),Ud=a("ul"),J6=a("li"),T0e=a("strong"),y1r=o("deit"),x1r=o(" \u2014 "),iU=a("a"),$1r=o("DeiTForMaskedImageModeling"),k1r=o(" (DeiT model)"),S1r=l(),Y6=a("li"),M0e=a("strong"),R1r=o("swin"),P1r=o(" \u2014 "),dU=a("a"),B1r=o("SwinForMaskedImageModeling"),I1r=o(" (Swin Transformer model)"),N1r=l(),K6=a("li"),E0e=a("strong"),q1r=o("vit"),j1r=o(" \u2014 "),cU=a("a"),D1r=o("ViTForMaskedImageModeling"),G1r=o(" (ViT model)"),O1r=l(),Z6=a("p"),V1r=o("The model is set in evaluation mode by default using "),C0e=a("code"),X1r=o("model.eval()"),z1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w0e=a("code"),W1r=o("model.train()"),Q1r=l(),F(eT.$$.fragment),Oze=l(),Jd=a("h2"),oT=a("a"),A0e=a("span"),F(P9.$$.fragment),H1r=l(),L0e=a("span"),U1r=o("AutoModelForObjectDetection"),Vze=l(),Ko=a("div"),F(B9.$$.fragment),J1r=l(),Yd=a("p"),Y1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),fU=a("a"),K1r=o("from_pretrained()"),Z1r=o(" class method or the "),mU=a("a"),e4r=o("from_config()"),o4r=o(` class
method.`),r4r=l(),I9=a("p"),t4r=o("This class cannot be instantiated directly using "),y0e=a("code"),a4r=o("__init__()"),n4r=o(" (throws an error)."),s4r=l(),xt=a("div"),F(N9.$$.fragment),l4r=l(),x0e=a("p"),i4r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),d4r=l(),Kd=a("p"),c4r=o(`Note:
Loading a model from its configuration file does `),$0e=a("strong"),f4r=o("not"),m4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),g4r=o("from_pretrained()"),h4r=o(" to load the model weights."),p4r=l(),F(rT.$$.fragment),_4r=l(),bo=a("div"),F(q9.$$.fragment),u4r=l(),k0e=a("p"),b4r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),v4r=l(),rn=a("p"),F4r=o("The model class to instantiate is selected based on the "),S0e=a("code"),T4r=o("model_type"),M4r=o(` property of the config object (either
passed as an argument or loaded from `),R0e=a("code"),E4r=o("pretrained_model_name_or_path"),C4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P0e=a("code"),w4r=o("pretrained_model_name_or_path"),A4r=o(":"),L4r=l(),j9=a("ul"),tT=a("li"),B0e=a("strong"),y4r=o("detr"),x4r=o(" \u2014 "),hU=a("a"),$4r=o("DetrForObjectDetection"),k4r=o(" (DETR model)"),S4r=l(),aT=a("li"),I0e=a("strong"),R4r=o("yolos"),P4r=o(" \u2014 "),pU=a("a"),B4r=o("YolosForObjectDetection"),I4r=o(" (YOLOS model)"),N4r=l(),nT=a("p"),q4r=o("The model is set in evaluation mode by default using "),N0e=a("code"),j4r=o("model.eval()"),D4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q0e=a("code"),G4r=o("model.train()"),O4r=l(),F(sT.$$.fragment),Xze=l(),Zd=a("h2"),lT=a("a"),j0e=a("span"),F(D9.$$.fragment),V4r=l(),D0e=a("span"),X4r=o("AutoModelForImageSegmentation"),zze=l(),Zo=a("div"),F(G9.$$.fragment),z4r=l(),ec=a("p"),W4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),_U=a("a"),Q4r=o("from_pretrained()"),H4r=o(" class method or the "),uU=a("a"),U4r=o("from_config()"),J4r=o(` class
method.`),Y4r=l(),O9=a("p"),K4r=o("This class cannot be instantiated directly using "),G0e=a("code"),Z4r=o("__init__()"),e2r=o(" (throws an error)."),o2r=l(),$t=a("div"),F(V9.$$.fragment),r2r=l(),O0e=a("p"),t2r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),a2r=l(),oc=a("p"),n2r=o(`Note:
Loading a model from its configuration file does `),V0e=a("strong"),s2r=o("not"),l2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=a("a"),i2r=o("from_pretrained()"),d2r=o(" to load the model weights."),c2r=l(),F(iT.$$.fragment),f2r=l(),vo=a("div"),F(X9.$$.fragment),m2r=l(),X0e=a("p"),g2r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),h2r=l(),tn=a("p"),p2r=o("The model class to instantiate is selected based on the "),z0e=a("code"),_2r=o("model_type"),u2r=o(` property of the config object (either
passed as an argument or loaded from `),W0e=a("code"),b2r=o("pretrained_model_name_or_path"),v2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q0e=a("code"),F2r=o("pretrained_model_name_or_path"),T2r=o(":"),M2r=l(),H0e=a("ul"),dT=a("li"),U0e=a("strong"),E2r=o("detr"),C2r=o(" \u2014 "),vU=a("a"),w2r=o("DetrForSegmentation"),A2r=o(" (DETR model)"),L2r=l(),cT=a("p"),y2r=o("The model is set in evaluation mode by default using "),J0e=a("code"),x2r=o("model.eval()"),$2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y0e=a("code"),k2r=o("model.train()"),S2r=l(),F(fT.$$.fragment),Wze=l(),rc=a("h2"),mT=a("a"),K0e=a("span"),F(z9.$$.fragment),R2r=l(),Z0e=a("span"),P2r=o("AutoModelForSemanticSegmentation"),Qze=l(),er=a("div"),F(W9.$$.fragment),B2r=l(),tc=a("p"),I2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),FU=a("a"),N2r=o("from_pretrained()"),q2r=o(" class method or the "),TU=a("a"),j2r=o("from_config()"),D2r=o(` class
method.`),G2r=l(),Q9=a("p"),O2r=o("This class cannot be instantiated directly using "),eFe=a("code"),V2r=o("__init__()"),X2r=o(" (throws an error)."),z2r=l(),kt=a("div"),F(H9.$$.fragment),W2r=l(),oFe=a("p"),Q2r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),H2r=l(),ac=a("p"),U2r=o(`Note:
Loading a model from its configuration file does `),rFe=a("strong"),J2r=o("not"),Y2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=a("a"),K2r=o("from_pretrained()"),Z2r=o(" to load the model weights."),ebr=l(),F(gT.$$.fragment),obr=l(),Fo=a("div"),F(U9.$$.fragment),rbr=l(),tFe=a("p"),tbr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),abr=l(),an=a("p"),nbr=o("The model class to instantiate is selected based on the "),aFe=a("code"),sbr=o("model_type"),lbr=o(` property of the config object (either
passed as an argument or loaded from `),nFe=a("code"),ibr=o("pretrained_model_name_or_path"),dbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sFe=a("code"),cbr=o("pretrained_model_name_or_path"),fbr=o(":"),mbr=l(),at=a("ul"),hT=a("li"),lFe=a("strong"),gbr=o("beit"),hbr=o(" \u2014 "),EU=a("a"),pbr=o("BeitForSemanticSegmentation"),_br=o(" (BEiT model)"),ubr=l(),pT=a("li"),iFe=a("strong"),bbr=o("data2vec-vision"),vbr=o(" \u2014 "),CU=a("a"),Fbr=o("Data2VecVisionForSemanticSegmentation"),Tbr=o(" (Data2VecVision model)"),Mbr=l(),_T=a("li"),dFe=a("strong"),Ebr=o("dpt"),Cbr=o(" \u2014 "),wU=a("a"),wbr=o("DPTForSemanticSegmentation"),Abr=o(" (DPT model)"),Lbr=l(),uT=a("li"),cFe=a("strong"),ybr=o("mobilevit"),xbr=o(" \u2014 "),AU=a("a"),$br=o("MobileViTForSemanticSegmentation"),kbr=o(" (MobileViT model)"),Sbr=l(),bT=a("li"),fFe=a("strong"),Rbr=o("segformer"),Pbr=o(" \u2014 "),LU=a("a"),Bbr=o("SegformerForSemanticSegmentation"),Ibr=o(" (SegFormer model)"),Nbr=l(),vT=a("p"),qbr=o("The model is set in evaluation mode by default using "),mFe=a("code"),jbr=o("model.eval()"),Dbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gFe=a("code"),Gbr=o("model.train()"),Obr=l(),F(FT.$$.fragment),Hze=l(),nc=a("h2"),TT=a("a"),hFe=a("span"),F(J9.$$.fragment),Vbr=l(),pFe=a("span"),Xbr=o("AutoModelForInstanceSegmentation"),Uze=l(),or=a("div"),F(Y9.$$.fragment),zbr=l(),sc=a("p"),Wbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),yU=a("a"),Qbr=o("from_pretrained()"),Hbr=o(" class method or the "),xU=a("a"),Ubr=o("from_config()"),Jbr=o(` class
method.`),Ybr=l(),K9=a("p"),Kbr=o("This class cannot be instantiated directly using "),_Fe=a("code"),Zbr=o("__init__()"),evr=o(" (throws an error)."),ovr=l(),St=a("div"),F(Z9.$$.fragment),rvr=l(),uFe=a("p"),tvr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),avr=l(),lc=a("p"),nvr=o(`Note:
Loading a model from its configuration file does `),bFe=a("strong"),svr=o("not"),lvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=a("a"),ivr=o("from_pretrained()"),dvr=o(" to load the model weights."),cvr=l(),F(MT.$$.fragment),fvr=l(),To=a("div"),F(ex.$$.fragment),mvr=l(),vFe=a("p"),gvr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),hvr=l(),nn=a("p"),pvr=o("The model class to instantiate is selected based on the "),FFe=a("code"),_vr=o("model_type"),uvr=o(` property of the config object (either
passed as an argument or loaded from `),TFe=a("code"),bvr=o("pretrained_model_name_or_path"),vvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=a("code"),Fvr=o("pretrained_model_name_or_path"),Tvr=o(":"),Mvr=l(),EFe=a("ul"),ET=a("li"),CFe=a("strong"),Evr=o("maskformer"),Cvr=o(" \u2014 "),kU=a("a"),wvr=o("MaskFormerForInstanceSegmentation"),Avr=o(" (MaskFormer model)"),Lvr=l(),CT=a("p"),yvr=o("The model is set in evaluation mode by default using "),wFe=a("code"),xvr=o("model.eval()"),$vr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),AFe=a("code"),kvr=o("model.train()"),Svr=l(),F(wT.$$.fragment),Jze=l(),ic=a("h2"),AT=a("a"),LFe=a("span"),F(ox.$$.fragment),Rvr=l(),yFe=a("span"),Pvr=o("TFAutoModel"),Yze=l(),rr=a("div"),F(rx.$$.fragment),Bvr=l(),dc=a("p"),Ivr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SU=a("a"),Nvr=o("from_pretrained()"),qvr=o(" class method or the "),RU=a("a"),jvr=o("from_config()"),Dvr=o(` class
method.`),Gvr=l(),tx=a("p"),Ovr=o("This class cannot be instantiated directly using "),xFe=a("code"),Vvr=o("__init__()"),Xvr=o(" (throws an error)."),zvr=l(),Rt=a("div"),F(ax.$$.fragment),Wvr=l(),$Fe=a("p"),Qvr=o("Instantiates one of the base model classes of the library from a configuration."),Hvr=l(),cc=a("p"),Uvr=o(`Note:
Loading a model from its configuration file does `),kFe=a("strong"),Jvr=o("not"),Yvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=a("a"),Kvr=o("from_pretrained()"),Zvr=o(" to load the model weights."),e0r=l(),F(LT.$$.fragment),o0r=l(),$r=a("div"),F(nx.$$.fragment),r0r=l(),SFe=a("p"),t0r=o("Instantiate one of the base model classes of the library from a pretrained model."),a0r=l(),sn=a("p"),n0r=o("The model class to instantiate is selected based on the "),RFe=a("code"),s0r=o("model_type"),l0r=o(` property of the config object (either
passed as an argument or loaded from `),PFe=a("code"),i0r=o("pretrained_model_name_or_path"),d0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),c0r=o("pretrained_model_name_or_path"),f0r=o(":"),m0r=l(),I=a("ul"),yT=a("li"),IFe=a("strong"),g0r=o("albert"),h0r=o(" \u2014 "),BU=a("a"),p0r=o("TFAlbertModel"),_0r=o(" (ALBERT model)"),u0r=l(),xT=a("li"),NFe=a("strong"),b0r=o("bart"),v0r=o(" \u2014 "),IU=a("a"),F0r=o("TFBartModel"),T0r=o(" (BART model)"),M0r=l(),$T=a("li"),qFe=a("strong"),E0r=o("bert"),C0r=o(" \u2014 "),NU=a("a"),w0r=o("TFBertModel"),A0r=o(" (BERT model)"),L0r=l(),kT=a("li"),jFe=a("strong"),y0r=o("blenderbot"),x0r=o(" \u2014 "),qU=a("a"),$0r=o("TFBlenderbotModel"),k0r=o(" (Blenderbot model)"),S0r=l(),ST=a("li"),DFe=a("strong"),R0r=o("blenderbot-small"),P0r=o(" \u2014 "),jU=a("a"),B0r=o("TFBlenderbotSmallModel"),I0r=o(" (BlenderbotSmall model)"),N0r=l(),RT=a("li"),GFe=a("strong"),q0r=o("camembert"),j0r=o(" \u2014 "),DU=a("a"),D0r=o("TFCamembertModel"),G0r=o(" (CamemBERT model)"),O0r=l(),PT=a("li"),OFe=a("strong"),V0r=o("clip"),X0r=o(" \u2014 "),GU=a("a"),z0r=o("TFCLIPModel"),W0r=o(" (CLIP model)"),Q0r=l(),BT=a("li"),VFe=a("strong"),H0r=o("convbert"),U0r=o(" \u2014 "),OU=a("a"),J0r=o("TFConvBertModel"),Y0r=o(" (ConvBERT model)"),K0r=l(),IT=a("li"),XFe=a("strong"),Z0r=o("convnext"),eFr=o(" \u2014 "),VU=a("a"),oFr=o("TFConvNextModel"),rFr=o(" (ConvNeXT model)"),tFr=l(),NT=a("li"),zFe=a("strong"),aFr=o("ctrl"),nFr=o(" \u2014 "),XU=a("a"),sFr=o("TFCTRLModel"),lFr=o(" (CTRL model)"),iFr=l(),qT=a("li"),WFe=a("strong"),dFr=o("data2vec-vision"),cFr=o(" \u2014 "),zU=a("a"),fFr=o("TFData2VecVisionModel"),mFr=o(" (Data2VecVision model)"),gFr=l(),jT=a("li"),QFe=a("strong"),hFr=o("deberta"),pFr=o(" \u2014 "),WU=a("a"),_Fr=o("TFDebertaModel"),uFr=o(" (DeBERTa model)"),bFr=l(),DT=a("li"),HFe=a("strong"),vFr=o("deberta-v2"),FFr=o(" \u2014 "),QU=a("a"),TFr=o("TFDebertaV2Model"),MFr=o(" (DeBERTa-v2 model)"),EFr=l(),GT=a("li"),UFe=a("strong"),CFr=o("deit"),wFr=o(" \u2014 "),HU=a("a"),AFr=o("TFDeiTModel"),LFr=o(" (DeiT model)"),yFr=l(),OT=a("li"),JFe=a("strong"),xFr=o("distilbert"),$Fr=o(" \u2014 "),UU=a("a"),kFr=o("TFDistilBertModel"),SFr=o(" (DistilBERT model)"),RFr=l(),VT=a("li"),YFe=a("strong"),PFr=o("dpr"),BFr=o(" \u2014 "),JU=a("a"),IFr=o("TFDPRQuestionEncoder"),NFr=o(" (DPR model)"),qFr=l(),XT=a("li"),KFe=a("strong"),jFr=o("electra"),DFr=o(" \u2014 "),YU=a("a"),GFr=o("TFElectraModel"),OFr=o(" (ELECTRA model)"),VFr=l(),zT=a("li"),ZFe=a("strong"),XFr=o("flaubert"),zFr=o(" \u2014 "),KU=a("a"),WFr=o("TFFlaubertModel"),QFr=o(" (FlauBERT model)"),HFr=l(),Ks=a("li"),e6e=a("strong"),UFr=o("funnel"),JFr=o(" \u2014 "),ZU=a("a"),YFr=o("TFFunnelModel"),KFr=o(" or "),eJ=a("a"),ZFr=o("TFFunnelBaseModel"),e6r=o(" (Funnel Transformer model)"),o6r=l(),WT=a("li"),o6e=a("strong"),r6r=o("gpt2"),t6r=o(" \u2014 "),oJ=a("a"),a6r=o("TFGPT2Model"),n6r=o(" (OpenAI GPT-2 model)"),s6r=l(),QT=a("li"),r6e=a("strong"),l6r=o("gptj"),i6r=o(" \u2014 "),rJ=a("a"),d6r=o("TFGPTJModel"),c6r=o(" (GPT-J model)"),f6r=l(),HT=a("li"),t6e=a("strong"),m6r=o("hubert"),g6r=o(" \u2014 "),tJ=a("a"),h6r=o("TFHubertModel"),p6r=o(" (Hubert model)"),_6r=l(),UT=a("li"),a6e=a("strong"),u6r=o("layoutlm"),b6r=o(" \u2014 "),aJ=a("a"),v6r=o("TFLayoutLMModel"),F6r=o(" (LayoutLM model)"),T6r=l(),JT=a("li"),n6e=a("strong"),M6r=o("led"),E6r=o(" \u2014 "),nJ=a("a"),C6r=o("TFLEDModel"),w6r=o(" (LED model)"),A6r=l(),YT=a("li"),s6e=a("strong"),L6r=o("longformer"),y6r=o(" \u2014 "),sJ=a("a"),x6r=o("TFLongformerModel"),$6r=o(" (Longformer model)"),k6r=l(),KT=a("li"),l6e=a("strong"),S6r=o("lxmert"),R6r=o(" \u2014 "),lJ=a("a"),P6r=o("TFLxmertModel"),B6r=o(" (LXMERT model)"),I6r=l(),ZT=a("li"),i6e=a("strong"),N6r=o("marian"),q6r=o(" \u2014 "),iJ=a("a"),j6r=o("TFMarianModel"),D6r=o(" (Marian model)"),G6r=l(),e7=a("li"),d6e=a("strong"),O6r=o("mbart"),V6r=o(" \u2014 "),dJ=a("a"),X6r=o("TFMBartModel"),z6r=o(" (mBART model)"),W6r=l(),o7=a("li"),c6e=a("strong"),Q6r=o("mobilebert"),H6r=o(" \u2014 "),cJ=a("a"),U6r=o("TFMobileBertModel"),J6r=o(" (MobileBERT model)"),Y6r=l(),r7=a("li"),f6e=a("strong"),K6r=o("mpnet"),Z6r=o(" \u2014 "),fJ=a("a"),eTr=o("TFMPNetModel"),oTr=o(" (MPNet model)"),rTr=l(),t7=a("li"),m6e=a("strong"),tTr=o("mt5"),aTr=o(" \u2014 "),mJ=a("a"),nTr=o("TFMT5Model"),sTr=o(" (MT5 model)"),lTr=l(),a7=a("li"),g6e=a("strong"),iTr=o("openai-gpt"),dTr=o(" \u2014 "),gJ=a("a"),cTr=o("TFOpenAIGPTModel"),fTr=o(" (OpenAI GPT model)"),mTr=l(),n7=a("li"),h6e=a("strong"),gTr=o("opt"),hTr=o(" \u2014 "),hJ=a("a"),pTr=o("TFOPTModel"),_Tr=o(" (OPT model)"),uTr=l(),s7=a("li"),p6e=a("strong"),bTr=o("pegasus"),vTr=o(" \u2014 "),pJ=a("a"),FTr=o("TFPegasusModel"),TTr=o(" (Pegasus model)"),MTr=l(),l7=a("li"),_6e=a("strong"),ETr=o("regnet"),CTr=o(" \u2014 "),_J=a("a"),wTr=o("TFRegNetModel"),ATr=o(" (RegNet model)"),LTr=l(),i7=a("li"),u6e=a("strong"),yTr=o("rembert"),xTr=o(" \u2014 "),uJ=a("a"),$Tr=o("TFRemBertModel"),kTr=o(" (RemBERT model)"),STr=l(),d7=a("li"),b6e=a("strong"),RTr=o("resnet"),PTr=o(" \u2014 "),bJ=a("a"),BTr=o("TFResNetModel"),ITr=o(" (ResNet model)"),NTr=l(),c7=a("li"),v6e=a("strong"),qTr=o("roberta"),jTr=o(" \u2014 "),vJ=a("a"),DTr=o("TFRobertaModel"),GTr=o(" (RoBERTa model)"),OTr=l(),f7=a("li"),F6e=a("strong"),VTr=o("roformer"),XTr=o(" \u2014 "),FJ=a("a"),zTr=o("TFRoFormerModel"),WTr=o(" (RoFormer model)"),QTr=l(),m7=a("li"),T6e=a("strong"),HTr=o("segformer"),UTr=o(" \u2014 "),TJ=a("a"),JTr=o("TFSegformerModel"),YTr=o(" (SegFormer model)"),KTr=l(),g7=a("li"),M6e=a("strong"),ZTr=o("speech_to_text"),e7r=o(" \u2014 "),MJ=a("a"),o7r=o("TFSpeech2TextModel"),r7r=o(" (Speech2Text model)"),t7r=l(),h7=a("li"),E6e=a("strong"),a7r=o("swin"),n7r=o(" \u2014 "),EJ=a("a"),s7r=o("TFSwinModel"),l7r=o(" (Swin Transformer model)"),i7r=l(),p7=a("li"),C6e=a("strong"),d7r=o("t5"),c7r=o(" \u2014 "),CJ=a("a"),f7r=o("TFT5Model"),m7r=o(" (T5 model)"),g7r=l(),_7=a("li"),w6e=a("strong"),h7r=o("tapas"),p7r=o(" \u2014 "),wJ=a("a"),_7r=o("TFTapasModel"),u7r=o(" (TAPAS model)"),b7r=l(),u7=a("li"),A6e=a("strong"),v7r=o("transfo-xl"),F7r=o(" \u2014 "),AJ=a("a"),T7r=o("TFTransfoXLModel"),M7r=o(" (Transformer-XL model)"),E7r=l(),b7=a("li"),L6e=a("strong"),C7r=o("vit"),w7r=o(" \u2014 "),LJ=a("a"),A7r=o("TFViTModel"),L7r=o(" (ViT model)"),y7r=l(),v7=a("li"),y6e=a("strong"),x7r=o("vit_mae"),$7r=o(" \u2014 "),yJ=a("a"),k7r=o("TFViTMAEModel"),S7r=o(" (ViTMAE model)"),R7r=l(),F7=a("li"),x6e=a("strong"),P7r=o("wav2vec2"),B7r=o(" \u2014 "),xJ=a("a"),I7r=o("TFWav2Vec2Model"),N7r=o(" (Wav2Vec2 model)"),q7r=l(),T7=a("li"),$6e=a("strong"),j7r=o("xlm"),D7r=o(" \u2014 "),$J=a("a"),G7r=o("TFXLMModel"),O7r=o(" (XLM model)"),V7r=l(),M7=a("li"),k6e=a("strong"),X7r=o("xlm-roberta"),z7r=o(" \u2014 "),kJ=a("a"),W7r=o("TFXLMRobertaModel"),Q7r=o(" (XLM-RoBERTa model)"),H7r=l(),E7=a("li"),S6e=a("strong"),U7r=o("xlnet"),J7r=o(" \u2014 "),SJ=a("a"),Y7r=o("TFXLNetModel"),K7r=o(" (XLNet model)"),Z7r=l(),F(C7.$$.fragment),Kze=l(),fc=a("h2"),w7=a("a"),R6e=a("span"),F(sx.$$.fragment),eMr=l(),P6e=a("span"),oMr=o("TFAutoModelForPreTraining"),Zze=l(),tr=a("div"),F(lx.$$.fragment),rMr=l(),mc=a("p"),tMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RJ=a("a"),aMr=o("from_pretrained()"),nMr=o(" class method or the "),PJ=a("a"),sMr=o("from_config()"),lMr=o(` class
method.`),iMr=l(),ix=a("p"),dMr=o("This class cannot be instantiated directly using "),B6e=a("code"),cMr=o("__init__()"),fMr=o(" (throws an error)."),mMr=l(),Pt=a("div"),F(dx.$$.fragment),gMr=l(),I6e=a("p"),hMr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pMr=l(),gc=a("p"),_Mr=o(`Note:
Loading a model from its configuration file does `),N6e=a("strong"),uMr=o("not"),bMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),vMr=o("from_pretrained()"),FMr=o(" to load the model weights."),TMr=l(),F(A7.$$.fragment),MMr=l(),kr=a("div"),F(cx.$$.fragment),EMr=l(),q6e=a("p"),CMr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wMr=l(),ln=a("p"),AMr=o("The model class to instantiate is selected based on the "),j6e=a("code"),LMr=o("model_type"),yMr=o(` property of the config object (either
passed as an argument or loaded from `),D6e=a("code"),xMr=o("pretrained_model_name_or_path"),$Mr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=a("code"),kMr=o("pretrained_model_name_or_path"),SMr=o(":"),RMr=l(),se=a("ul"),L7=a("li"),O6e=a("strong"),PMr=o("albert"),BMr=o(" \u2014 "),IJ=a("a"),IMr=o("TFAlbertForPreTraining"),NMr=o(" (ALBERT model)"),qMr=l(),y7=a("li"),V6e=a("strong"),jMr=o("bart"),DMr=o(" \u2014 "),NJ=a("a"),GMr=o("TFBartForConditionalGeneration"),OMr=o(" (BART model)"),VMr=l(),x7=a("li"),X6e=a("strong"),XMr=o("bert"),zMr=o(" \u2014 "),qJ=a("a"),WMr=o("TFBertForPreTraining"),QMr=o(" (BERT model)"),HMr=l(),$7=a("li"),z6e=a("strong"),UMr=o("camembert"),JMr=o(" \u2014 "),jJ=a("a"),YMr=o("TFCamembertForMaskedLM"),KMr=o(" (CamemBERT model)"),ZMr=l(),k7=a("li"),W6e=a("strong"),eEr=o("ctrl"),oEr=o(" \u2014 "),DJ=a("a"),rEr=o("TFCTRLLMHeadModel"),tEr=o(" (CTRL model)"),aEr=l(),S7=a("li"),Q6e=a("strong"),nEr=o("distilbert"),sEr=o(" \u2014 "),GJ=a("a"),lEr=o("TFDistilBertForMaskedLM"),iEr=o(" (DistilBERT model)"),dEr=l(),R7=a("li"),H6e=a("strong"),cEr=o("electra"),fEr=o(" \u2014 "),OJ=a("a"),mEr=o("TFElectraForPreTraining"),gEr=o(" (ELECTRA model)"),hEr=l(),P7=a("li"),U6e=a("strong"),pEr=o("flaubert"),_Er=o(" \u2014 "),VJ=a("a"),uEr=o("TFFlaubertWithLMHeadModel"),bEr=o(" (FlauBERT model)"),vEr=l(),B7=a("li"),J6e=a("strong"),FEr=o("funnel"),TEr=o(" \u2014 "),XJ=a("a"),MEr=o("TFFunnelForPreTraining"),EEr=o(" (Funnel Transformer model)"),CEr=l(),I7=a("li"),Y6e=a("strong"),wEr=o("gpt2"),AEr=o(" \u2014 "),zJ=a("a"),LEr=o("TFGPT2LMHeadModel"),yEr=o(" (OpenAI GPT-2 model)"),xEr=l(),N7=a("li"),K6e=a("strong"),$Er=o("layoutlm"),kEr=o(" \u2014 "),WJ=a("a"),SEr=o("TFLayoutLMForMaskedLM"),REr=o(" (LayoutLM model)"),PEr=l(),q7=a("li"),Z6e=a("strong"),BEr=o("lxmert"),IEr=o(" \u2014 "),QJ=a("a"),NEr=o("TFLxmertForPreTraining"),qEr=o(" (LXMERT model)"),jEr=l(),j7=a("li"),eTe=a("strong"),DEr=o("mobilebert"),GEr=o(" \u2014 "),HJ=a("a"),OEr=o("TFMobileBertForPreTraining"),VEr=o(" (MobileBERT model)"),XEr=l(),D7=a("li"),oTe=a("strong"),zEr=o("mpnet"),WEr=o(" \u2014 "),UJ=a("a"),QEr=o("TFMPNetForMaskedLM"),HEr=o(" (MPNet model)"),UEr=l(),G7=a("li"),rTe=a("strong"),JEr=o("openai-gpt"),YEr=o(" \u2014 "),JJ=a("a"),KEr=o("TFOpenAIGPTLMHeadModel"),ZEr=o(" (OpenAI GPT model)"),eCr=l(),O7=a("li"),tTe=a("strong"),oCr=o("roberta"),rCr=o(" \u2014 "),YJ=a("a"),tCr=o("TFRobertaForMaskedLM"),aCr=o(" (RoBERTa model)"),nCr=l(),V7=a("li"),aTe=a("strong"),sCr=o("t5"),lCr=o(" \u2014 "),KJ=a("a"),iCr=o("TFT5ForConditionalGeneration"),dCr=o(" (T5 model)"),cCr=l(),X7=a("li"),nTe=a("strong"),fCr=o("tapas"),mCr=o(" \u2014 "),ZJ=a("a"),gCr=o("TFTapasForMaskedLM"),hCr=o(" (TAPAS model)"),pCr=l(),z7=a("li"),sTe=a("strong"),_Cr=o("transfo-xl"),uCr=o(" \u2014 "),eY=a("a"),bCr=o("TFTransfoXLLMHeadModel"),vCr=o(" (Transformer-XL model)"),FCr=l(),W7=a("li"),lTe=a("strong"),TCr=o("vit_mae"),MCr=o(" \u2014 "),oY=a("a"),ECr=o("TFViTMAEForPreTraining"),CCr=o(" (ViTMAE model)"),wCr=l(),Q7=a("li"),iTe=a("strong"),ACr=o("xlm"),LCr=o(" \u2014 "),rY=a("a"),yCr=o("TFXLMWithLMHeadModel"),xCr=o(" (XLM model)"),$Cr=l(),H7=a("li"),dTe=a("strong"),kCr=o("xlm-roberta"),SCr=o(" \u2014 "),tY=a("a"),RCr=o("TFXLMRobertaForMaskedLM"),PCr=o(" (XLM-RoBERTa model)"),BCr=l(),U7=a("li"),cTe=a("strong"),ICr=o("xlnet"),NCr=o(" \u2014 "),aY=a("a"),qCr=o("TFXLNetLMHeadModel"),jCr=o(" (XLNet model)"),DCr=l(),F(J7.$$.fragment),eWe=l(),hc=a("h2"),Y7=a("a"),fTe=a("span"),F(fx.$$.fragment),GCr=l(),mTe=a("span"),OCr=o("TFAutoModelForCausalLM"),oWe=l(),ar=a("div"),F(mx.$$.fragment),VCr=l(),pc=a("p"),XCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nY=a("a"),zCr=o("from_pretrained()"),WCr=o(" class method or the "),sY=a("a"),QCr=o("from_config()"),HCr=o(` class
method.`),UCr=l(),gx=a("p"),JCr=o("This class cannot be instantiated directly using "),gTe=a("code"),YCr=o("__init__()"),KCr=o(" (throws an error)."),ZCr=l(),Bt=a("div"),F(hx.$$.fragment),e5r=l(),hTe=a("p"),o5r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),r5r=l(),_c=a("p"),t5r=o(`Note:
Loading a model from its configuration file does `),pTe=a("strong"),a5r=o("not"),n5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=a("a"),s5r=o("from_pretrained()"),l5r=o(" to load the model weights."),i5r=l(),F(K7.$$.fragment),d5r=l(),Sr=a("div"),F(px.$$.fragment),c5r=l(),_Te=a("p"),f5r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),m5r=l(),dn=a("p"),g5r=o("The model class to instantiate is selected based on the "),uTe=a("code"),h5r=o("model_type"),p5r=o(` property of the config object (either
passed as an argument or loaded from `),bTe=a("code"),_5r=o("pretrained_model_name_or_path"),u5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=a("code"),b5r=o("pretrained_model_name_or_path"),v5r=o(":"),F5r=l(),Me=a("ul"),Z7=a("li"),FTe=a("strong"),T5r=o("bert"),M5r=o(" \u2014 "),iY=a("a"),E5r=o("TFBertLMHeadModel"),C5r=o(" (BERT model)"),w5r=l(),eM=a("li"),TTe=a("strong"),A5r=o("camembert"),L5r=o(" \u2014 "),dY=a("a"),y5r=o("TFCamembertForCausalLM"),x5r=o(" (CamemBERT model)"),$5r=l(),oM=a("li"),MTe=a("strong"),k5r=o("ctrl"),S5r=o(" \u2014 "),cY=a("a"),R5r=o("TFCTRLLMHeadModel"),P5r=o(" (CTRL model)"),B5r=l(),rM=a("li"),ETe=a("strong"),I5r=o("gpt2"),N5r=o(" \u2014 "),fY=a("a"),q5r=o("TFGPT2LMHeadModel"),j5r=o(" (OpenAI GPT-2 model)"),D5r=l(),tM=a("li"),CTe=a("strong"),G5r=o("gptj"),O5r=o(" \u2014 "),mY=a("a"),V5r=o("TFGPTJForCausalLM"),X5r=o(" (GPT-J model)"),z5r=l(),aM=a("li"),wTe=a("strong"),W5r=o("openai-gpt"),Q5r=o(" \u2014 "),gY=a("a"),H5r=o("TFOpenAIGPTLMHeadModel"),U5r=o(" (OpenAI GPT model)"),J5r=l(),nM=a("li"),ATe=a("strong"),Y5r=o("opt"),K5r=o(" \u2014 "),hY=a("a"),Z5r=o("TFOPTForCausalLM"),e3r=o(" (OPT model)"),o3r=l(),sM=a("li"),LTe=a("strong"),r3r=o("rembert"),t3r=o(" \u2014 "),pY=a("a"),a3r=o("TFRemBertForCausalLM"),n3r=o(" (RemBERT model)"),s3r=l(),lM=a("li"),yTe=a("strong"),l3r=o("roberta"),i3r=o(" \u2014 "),_Y=a("a"),d3r=o("TFRobertaForCausalLM"),c3r=o(" (RoBERTa model)"),f3r=l(),iM=a("li"),xTe=a("strong"),m3r=o("roformer"),g3r=o(" \u2014 "),uY=a("a"),h3r=o("TFRoFormerForCausalLM"),p3r=o(" (RoFormer model)"),_3r=l(),dM=a("li"),$Te=a("strong"),u3r=o("transfo-xl"),b3r=o(" \u2014 "),bY=a("a"),v3r=o("TFTransfoXLLMHeadModel"),F3r=o(" (Transformer-XL model)"),T3r=l(),cM=a("li"),kTe=a("strong"),M3r=o("xlm"),E3r=o(" \u2014 "),vY=a("a"),C3r=o("TFXLMWithLMHeadModel"),w3r=o(" (XLM model)"),A3r=l(),fM=a("li"),STe=a("strong"),L3r=o("xlnet"),y3r=o(" \u2014 "),FY=a("a"),x3r=o("TFXLNetLMHeadModel"),$3r=o(" (XLNet model)"),k3r=l(),F(mM.$$.fragment),rWe=l(),uc=a("h2"),gM=a("a"),RTe=a("span"),F(_x.$$.fragment),S3r=l(),PTe=a("span"),R3r=o("TFAutoModelForImageClassification"),tWe=l(),nr=a("div"),F(ux.$$.fragment),P3r=l(),bc=a("p"),B3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TY=a("a"),I3r=o("from_pretrained()"),N3r=o(" class method or the "),MY=a("a"),q3r=o("from_config()"),j3r=o(` class
method.`),D3r=l(),bx=a("p"),G3r=o("This class cannot be instantiated directly using "),BTe=a("code"),O3r=o("__init__()"),V3r=o(" (throws an error)."),X3r=l(),It=a("div"),F(vx.$$.fragment),z3r=l(),ITe=a("p"),W3r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Q3r=l(),vc=a("p"),H3r=o(`Note:
Loading a model from its configuration file does `),NTe=a("strong"),U3r=o("not"),J3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),Y3r=o("from_pretrained()"),K3r=o(" to load the model weights."),Z3r=l(),F(hM.$$.fragment),ewr=l(),Rr=a("div"),F(Fx.$$.fragment),owr=l(),qTe=a("p"),rwr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),twr=l(),cn=a("p"),awr=o("The model class to instantiate is selected based on the "),jTe=a("code"),nwr=o("model_type"),swr=o(` property of the config object (either
passed as an argument or loaded from `),DTe=a("code"),lwr=o("pretrained_model_name_or_path"),iwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=a("code"),dwr=o("pretrained_model_name_or_path"),cwr=o(":"),fwr=l(),Ve=a("ul"),pM=a("li"),OTe=a("strong"),mwr=o("convnext"),gwr=o(" \u2014 "),CY=a("a"),hwr=o("TFConvNextForImageClassification"),pwr=o(" (ConvNeXT model)"),_wr=l(),_M=a("li"),VTe=a("strong"),uwr=o("data2vec-vision"),bwr=o(" \u2014 "),wY=a("a"),vwr=o("TFData2VecVisionForImageClassification"),Fwr=o(" (Data2VecVision model)"),Twr=l(),Zs=a("li"),XTe=a("strong"),Mwr=o("deit"),Ewr=o(" \u2014 "),AY=a("a"),Cwr=o("TFDeiTForImageClassification"),wwr=o(" or "),LY=a("a"),Awr=o("TFDeiTForImageClassificationWithTeacher"),Lwr=o(" (DeiT model)"),ywr=l(),uM=a("li"),zTe=a("strong"),xwr=o("regnet"),$wr=o(" \u2014 "),yY=a("a"),kwr=o("TFRegNetForImageClassification"),Swr=o(" (RegNet model)"),Rwr=l(),bM=a("li"),WTe=a("strong"),Pwr=o("resnet"),Bwr=o(" \u2014 "),xY=a("a"),Iwr=o("TFResNetForImageClassification"),Nwr=o(" (ResNet model)"),qwr=l(),vM=a("li"),QTe=a("strong"),jwr=o("segformer"),Dwr=o(" \u2014 "),$Y=a("a"),Gwr=o("TFSegformerForImageClassification"),Owr=o(" (SegFormer model)"),Vwr=l(),FM=a("li"),HTe=a("strong"),Xwr=o("swin"),zwr=o(" \u2014 "),kY=a("a"),Wwr=o("TFSwinForImageClassification"),Qwr=o(" (Swin Transformer model)"),Hwr=l(),TM=a("li"),UTe=a("strong"),Uwr=o("vit"),Jwr=o(" \u2014 "),SY=a("a"),Ywr=o("TFViTForImageClassification"),Kwr=o(" (ViT model)"),Zwr=l(),F(MM.$$.fragment),aWe=l(),Fc=a("h2"),EM=a("a"),JTe=a("span"),F(Tx.$$.fragment),eAr=l(),YTe=a("span"),oAr=o("TFAutoModelForMaskedLM"),nWe=l(),sr=a("div"),F(Mx.$$.fragment),rAr=l(),Tc=a("p"),tAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RY=a("a"),aAr=o("from_pretrained()"),nAr=o(" class method or the "),PY=a("a"),sAr=o("from_config()"),lAr=o(` class
method.`),iAr=l(),Ex=a("p"),dAr=o("This class cannot be instantiated directly using "),KTe=a("code"),cAr=o("__init__()"),fAr=o(" (throws an error)."),mAr=l(),Nt=a("div"),F(Cx.$$.fragment),gAr=l(),ZTe=a("p"),hAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pAr=l(),Mc=a("p"),_Ar=o(`Note:
Loading a model from its configuration file does `),e7e=a("strong"),uAr=o("not"),bAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=a("a"),vAr=o("from_pretrained()"),FAr=o(" to load the model weights."),TAr=l(),F(CM.$$.fragment),MAr=l(),Pr=a("div"),F(wx.$$.fragment),EAr=l(),o7e=a("p"),CAr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wAr=l(),fn=a("p"),AAr=o("The model class to instantiate is selected based on the "),r7e=a("code"),LAr=o("model_type"),yAr=o(` property of the config object (either
passed as an argument or loaded from `),t7e=a("code"),xAr=o("pretrained_model_name_or_path"),$Ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a7e=a("code"),kAr=o("pretrained_model_name_or_path"),SAr=o(":"),RAr=l(),ie=a("ul"),wM=a("li"),n7e=a("strong"),PAr=o("albert"),BAr=o(" \u2014 "),IY=a("a"),IAr=o("TFAlbertForMaskedLM"),NAr=o(" (ALBERT model)"),qAr=l(),AM=a("li"),s7e=a("strong"),jAr=o("bert"),DAr=o(" \u2014 "),NY=a("a"),GAr=o("TFBertForMaskedLM"),OAr=o(" (BERT model)"),VAr=l(),LM=a("li"),l7e=a("strong"),XAr=o("camembert"),zAr=o(" \u2014 "),qY=a("a"),WAr=o("TFCamembertForMaskedLM"),QAr=o(" (CamemBERT model)"),HAr=l(),yM=a("li"),i7e=a("strong"),UAr=o("convbert"),JAr=o(" \u2014 "),jY=a("a"),YAr=o("TFConvBertForMaskedLM"),KAr=o(" (ConvBERT model)"),ZAr=l(),xM=a("li"),d7e=a("strong"),eLr=o("deberta"),oLr=o(" \u2014 "),DY=a("a"),rLr=o("TFDebertaForMaskedLM"),tLr=o(" (DeBERTa model)"),aLr=l(),$M=a("li"),c7e=a("strong"),nLr=o("deberta-v2"),sLr=o(" \u2014 "),GY=a("a"),lLr=o("TFDebertaV2ForMaskedLM"),iLr=o(" (DeBERTa-v2 model)"),dLr=l(),kM=a("li"),f7e=a("strong"),cLr=o("distilbert"),fLr=o(" \u2014 "),OY=a("a"),mLr=o("TFDistilBertForMaskedLM"),gLr=o(" (DistilBERT model)"),hLr=l(),SM=a("li"),m7e=a("strong"),pLr=o("electra"),_Lr=o(" \u2014 "),VY=a("a"),uLr=o("TFElectraForMaskedLM"),bLr=o(" (ELECTRA model)"),vLr=l(),RM=a("li"),g7e=a("strong"),FLr=o("flaubert"),TLr=o(" \u2014 "),XY=a("a"),MLr=o("TFFlaubertWithLMHeadModel"),ELr=o(" (FlauBERT model)"),CLr=l(),PM=a("li"),h7e=a("strong"),wLr=o("funnel"),ALr=o(" \u2014 "),zY=a("a"),LLr=o("TFFunnelForMaskedLM"),yLr=o(" (Funnel Transformer model)"),xLr=l(),BM=a("li"),p7e=a("strong"),$Lr=o("layoutlm"),kLr=o(" \u2014 "),WY=a("a"),SLr=o("TFLayoutLMForMaskedLM"),RLr=o(" (LayoutLM model)"),PLr=l(),IM=a("li"),_7e=a("strong"),BLr=o("longformer"),ILr=o(" \u2014 "),QY=a("a"),NLr=o("TFLongformerForMaskedLM"),qLr=o(" (Longformer model)"),jLr=l(),NM=a("li"),u7e=a("strong"),DLr=o("mobilebert"),GLr=o(" \u2014 "),HY=a("a"),OLr=o("TFMobileBertForMaskedLM"),VLr=o(" (MobileBERT model)"),XLr=l(),qM=a("li"),b7e=a("strong"),zLr=o("mpnet"),WLr=o(" \u2014 "),UY=a("a"),QLr=o("TFMPNetForMaskedLM"),HLr=o(" (MPNet model)"),ULr=l(),jM=a("li"),v7e=a("strong"),JLr=o("rembert"),YLr=o(" \u2014 "),JY=a("a"),KLr=o("TFRemBertForMaskedLM"),ZLr=o(" (RemBERT model)"),eyr=l(),DM=a("li"),F7e=a("strong"),oyr=o("roberta"),ryr=o(" \u2014 "),YY=a("a"),tyr=o("TFRobertaForMaskedLM"),ayr=o(" (RoBERTa model)"),nyr=l(),GM=a("li"),T7e=a("strong"),syr=o("roformer"),lyr=o(" \u2014 "),KY=a("a"),iyr=o("TFRoFormerForMaskedLM"),dyr=o(" (RoFormer model)"),cyr=l(),OM=a("li"),M7e=a("strong"),fyr=o("tapas"),myr=o(" \u2014 "),ZY=a("a"),gyr=o("TFTapasForMaskedLM"),hyr=o(" (TAPAS model)"),pyr=l(),VM=a("li"),E7e=a("strong"),_yr=o("xlm"),uyr=o(" \u2014 "),eK=a("a"),byr=o("TFXLMWithLMHeadModel"),vyr=o(" (XLM model)"),Fyr=l(),XM=a("li"),C7e=a("strong"),Tyr=o("xlm-roberta"),Myr=o(" \u2014 "),oK=a("a"),Eyr=o("TFXLMRobertaForMaskedLM"),Cyr=o(" (XLM-RoBERTa model)"),wyr=l(),F(zM.$$.fragment),sWe=l(),Ec=a("h2"),WM=a("a"),w7e=a("span"),F(Ax.$$.fragment),Ayr=l(),A7e=a("span"),Lyr=o("TFAutoModelForSeq2SeqLM"),lWe=l(),lr=a("div"),F(Lx.$$.fragment),yyr=l(),Cc=a("p"),xyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rK=a("a"),$yr=o("from_pretrained()"),kyr=o(" class method or the "),tK=a("a"),Syr=o("from_config()"),Ryr=o(` class
method.`),Pyr=l(),yx=a("p"),Byr=o("This class cannot be instantiated directly using "),L7e=a("code"),Iyr=o("__init__()"),Nyr=o(" (throws an error)."),qyr=l(),qt=a("div"),F(xx.$$.fragment),jyr=l(),y7e=a("p"),Dyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Gyr=l(),wc=a("p"),Oyr=o(`Note:
Loading a model from its configuration file does `),x7e=a("strong"),Vyr=o("not"),Xyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),zyr=o("from_pretrained()"),Wyr=o(" to load the model weights."),Qyr=l(),F(QM.$$.fragment),Hyr=l(),Br=a("div"),F($x.$$.fragment),Uyr=l(),$7e=a("p"),Jyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Yyr=l(),mn=a("p"),Kyr=o("The model class to instantiate is selected based on the "),k7e=a("code"),Zyr=o("model_type"),e8r=o(` property of the config object (either
passed as an argument or loaded from `),S7e=a("code"),o8r=o("pretrained_model_name_or_path"),r8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=a("code"),t8r=o("pretrained_model_name_or_path"),a8r=o(":"),n8r=l(),ye=a("ul"),HM=a("li"),P7e=a("strong"),s8r=o("bart"),l8r=o(" \u2014 "),nK=a("a"),i8r=o("TFBartForConditionalGeneration"),d8r=o(" (BART model)"),c8r=l(),UM=a("li"),B7e=a("strong"),f8r=o("blenderbot"),m8r=o(" \u2014 "),sK=a("a"),g8r=o("TFBlenderbotForConditionalGeneration"),h8r=o(" (Blenderbot model)"),p8r=l(),JM=a("li"),I7e=a("strong"),_8r=o("blenderbot-small"),u8r=o(" \u2014 "),lK=a("a"),b8r=o("TFBlenderbotSmallForConditionalGeneration"),v8r=o(" (BlenderbotSmall model)"),F8r=l(),YM=a("li"),N7e=a("strong"),T8r=o("encoder-decoder"),M8r=o(" \u2014 "),iK=a("a"),E8r=o("TFEncoderDecoderModel"),C8r=o(" (Encoder decoder model)"),w8r=l(),KM=a("li"),q7e=a("strong"),A8r=o("led"),L8r=o(" \u2014 "),dK=a("a"),y8r=o("TFLEDForConditionalGeneration"),x8r=o(" (LED model)"),$8r=l(),ZM=a("li"),j7e=a("strong"),k8r=o("marian"),S8r=o(" \u2014 "),cK=a("a"),R8r=o("TFMarianMTModel"),P8r=o(" (Marian model)"),B8r=l(),eE=a("li"),D7e=a("strong"),I8r=o("mbart"),N8r=o(" \u2014 "),fK=a("a"),q8r=o("TFMBartForConditionalGeneration"),j8r=o(" (mBART model)"),D8r=l(),oE=a("li"),G7e=a("strong"),G8r=o("mt5"),O8r=o(" \u2014 "),mK=a("a"),V8r=o("TFMT5ForConditionalGeneration"),X8r=o(" (MT5 model)"),z8r=l(),rE=a("li"),O7e=a("strong"),W8r=o("pegasus"),Q8r=o(" \u2014 "),gK=a("a"),H8r=o("TFPegasusForConditionalGeneration"),U8r=o(" (Pegasus model)"),J8r=l(),tE=a("li"),V7e=a("strong"),Y8r=o("t5"),K8r=o(" \u2014 "),hK=a("a"),Z8r=o("TFT5ForConditionalGeneration"),e9r=o(" (T5 model)"),o9r=l(),F(aE.$$.fragment),iWe=l(),Ac=a("h2"),nE=a("a"),X7e=a("span"),F(kx.$$.fragment),r9r=l(),z7e=a("span"),t9r=o("TFAutoModelForSequenceClassification"),dWe=l(),ir=a("div"),F(Sx.$$.fragment),a9r=l(),Lc=a("p"),n9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pK=a("a"),s9r=o("from_pretrained()"),l9r=o(" class method or the "),_K=a("a"),i9r=o("from_config()"),d9r=o(` class
method.`),c9r=l(),Rx=a("p"),f9r=o("This class cannot be instantiated directly using "),W7e=a("code"),m9r=o("__init__()"),g9r=o(" (throws an error)."),h9r=l(),jt=a("div"),F(Px.$$.fragment),p9r=l(),Q7e=a("p"),_9r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),u9r=l(),yc=a("p"),b9r=o(`Note:
Loading a model from its configuration file does `),H7e=a("strong"),v9r=o("not"),F9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),T9r=o("from_pretrained()"),M9r=o(" to load the model weights."),E9r=l(),F(sE.$$.fragment),C9r=l(),Ir=a("div"),F(Bx.$$.fragment),w9r=l(),U7e=a("p"),A9r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),L9r=l(),gn=a("p"),y9r=o("The model class to instantiate is selected based on the "),J7e=a("code"),x9r=o("model_type"),$9r=o(` property of the config object (either
passed as an argument or loaded from `),Y7e=a("code"),k9r=o("pretrained_model_name_or_path"),S9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=a("code"),R9r=o("pretrained_model_name_or_path"),P9r=o(":"),B9r=l(),te=a("ul"),lE=a("li"),Z7e=a("strong"),I9r=o("albert"),N9r=o(" \u2014 "),bK=a("a"),q9r=o("TFAlbertForSequenceClassification"),j9r=o(" (ALBERT model)"),D9r=l(),iE=a("li"),eMe=a("strong"),G9r=o("bert"),O9r=o(" \u2014 "),vK=a("a"),V9r=o("TFBertForSequenceClassification"),X9r=o(" (BERT model)"),z9r=l(),dE=a("li"),oMe=a("strong"),W9r=o("camembert"),Q9r=o(" \u2014 "),FK=a("a"),H9r=o("TFCamembertForSequenceClassification"),U9r=o(" (CamemBERT model)"),J9r=l(),cE=a("li"),rMe=a("strong"),Y9r=o("convbert"),K9r=o(" \u2014 "),TK=a("a"),Z9r=o("TFConvBertForSequenceClassification"),exr=o(" (ConvBERT model)"),oxr=l(),fE=a("li"),tMe=a("strong"),rxr=o("ctrl"),txr=o(" \u2014 "),MK=a("a"),axr=o("TFCTRLForSequenceClassification"),nxr=o(" (CTRL model)"),sxr=l(),mE=a("li"),aMe=a("strong"),lxr=o("deberta"),ixr=o(" \u2014 "),EK=a("a"),dxr=o("TFDebertaForSequenceClassification"),cxr=o(" (DeBERTa model)"),fxr=l(),gE=a("li"),nMe=a("strong"),mxr=o("deberta-v2"),gxr=o(" \u2014 "),CK=a("a"),hxr=o("TFDebertaV2ForSequenceClassification"),pxr=o(" (DeBERTa-v2 model)"),_xr=l(),hE=a("li"),sMe=a("strong"),uxr=o("distilbert"),bxr=o(" \u2014 "),wK=a("a"),vxr=o("TFDistilBertForSequenceClassification"),Fxr=o(" (DistilBERT model)"),Txr=l(),pE=a("li"),lMe=a("strong"),Mxr=o("electra"),Exr=o(" \u2014 "),AK=a("a"),Cxr=o("TFElectraForSequenceClassification"),wxr=o(" (ELECTRA model)"),Axr=l(),_E=a("li"),iMe=a("strong"),Lxr=o("flaubert"),yxr=o(" \u2014 "),LK=a("a"),xxr=o("TFFlaubertForSequenceClassification"),$xr=o(" (FlauBERT model)"),kxr=l(),uE=a("li"),dMe=a("strong"),Sxr=o("funnel"),Rxr=o(" \u2014 "),yK=a("a"),Pxr=o("TFFunnelForSequenceClassification"),Bxr=o(" (Funnel Transformer model)"),Ixr=l(),bE=a("li"),cMe=a("strong"),Nxr=o("gpt2"),qxr=o(" \u2014 "),xK=a("a"),jxr=o("TFGPT2ForSequenceClassification"),Dxr=o(" (OpenAI GPT-2 model)"),Gxr=l(),vE=a("li"),fMe=a("strong"),Oxr=o("gptj"),Vxr=o(" \u2014 "),$K=a("a"),Xxr=o("TFGPTJForSequenceClassification"),zxr=o(" (GPT-J model)"),Wxr=l(),FE=a("li"),mMe=a("strong"),Qxr=o("layoutlm"),Hxr=o(" \u2014 "),kK=a("a"),Uxr=o("TFLayoutLMForSequenceClassification"),Jxr=o(" (LayoutLM model)"),Yxr=l(),TE=a("li"),gMe=a("strong"),Kxr=o("longformer"),Zxr=o(" \u2014 "),SK=a("a"),e$r=o("TFLongformerForSequenceClassification"),o$r=o(" (Longformer model)"),r$r=l(),ME=a("li"),hMe=a("strong"),t$r=o("mobilebert"),a$r=o(" \u2014 "),RK=a("a"),n$r=o("TFMobileBertForSequenceClassification"),s$r=o(" (MobileBERT model)"),l$r=l(),EE=a("li"),pMe=a("strong"),i$r=o("mpnet"),d$r=o(" \u2014 "),PK=a("a"),c$r=o("TFMPNetForSequenceClassification"),f$r=o(" (MPNet model)"),m$r=l(),CE=a("li"),_Me=a("strong"),g$r=o("openai-gpt"),h$r=o(" \u2014 "),BK=a("a"),p$r=o("TFOpenAIGPTForSequenceClassification"),_$r=o(" (OpenAI GPT model)"),u$r=l(),wE=a("li"),uMe=a("strong"),b$r=o("rembert"),v$r=o(" \u2014 "),IK=a("a"),F$r=o("TFRemBertForSequenceClassification"),T$r=o(" (RemBERT model)"),M$r=l(),AE=a("li"),bMe=a("strong"),E$r=o("roberta"),C$r=o(" \u2014 "),NK=a("a"),w$r=o("TFRobertaForSequenceClassification"),A$r=o(" (RoBERTa model)"),L$r=l(),LE=a("li"),vMe=a("strong"),y$r=o("roformer"),x$r=o(" \u2014 "),qK=a("a"),$$r=o("TFRoFormerForSequenceClassification"),k$r=o(" (RoFormer model)"),S$r=l(),yE=a("li"),FMe=a("strong"),R$r=o("tapas"),P$r=o(" \u2014 "),jK=a("a"),B$r=o("TFTapasForSequenceClassification"),I$r=o(" (TAPAS model)"),N$r=l(),xE=a("li"),TMe=a("strong"),q$r=o("transfo-xl"),j$r=o(" \u2014 "),DK=a("a"),D$r=o("TFTransfoXLForSequenceClassification"),G$r=o(" (Transformer-XL model)"),O$r=l(),$E=a("li"),MMe=a("strong"),V$r=o("xlm"),X$r=o(" \u2014 "),GK=a("a"),z$r=o("TFXLMForSequenceClassification"),W$r=o(" (XLM model)"),Q$r=l(),kE=a("li"),EMe=a("strong"),H$r=o("xlm-roberta"),U$r=o(" \u2014 "),OK=a("a"),J$r=o("TFXLMRobertaForSequenceClassification"),Y$r=o(" (XLM-RoBERTa model)"),K$r=l(),SE=a("li"),CMe=a("strong"),Z$r=o("xlnet"),ekr=o(" \u2014 "),VK=a("a"),okr=o("TFXLNetForSequenceClassification"),rkr=o(" (XLNet model)"),tkr=l(),F(RE.$$.fragment),cWe=l(),xc=a("h2"),PE=a("a"),wMe=a("span"),F(Ix.$$.fragment),akr=l(),AMe=a("span"),nkr=o("TFAutoModelForMultipleChoice"),fWe=l(),dr=a("div"),F(Nx.$$.fragment),skr=l(),$c=a("p"),lkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XK=a("a"),ikr=o("from_pretrained()"),dkr=o(" class method or the "),zK=a("a"),ckr=o("from_config()"),fkr=o(` class
method.`),mkr=l(),qx=a("p"),gkr=o("This class cannot be instantiated directly using "),LMe=a("code"),hkr=o("__init__()"),pkr=o(" (throws an error)."),_kr=l(),Dt=a("div"),F(jx.$$.fragment),ukr=l(),yMe=a("p"),bkr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vkr=l(),kc=a("p"),Fkr=o(`Note:
Loading a model from its configuration file does `),xMe=a("strong"),Tkr=o("not"),Mkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=a("a"),Ekr=o("from_pretrained()"),Ckr=o(" to load the model weights."),wkr=l(),F(BE.$$.fragment),Akr=l(),Nr=a("div"),F(Dx.$$.fragment),Lkr=l(),$Me=a("p"),ykr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xkr=l(),hn=a("p"),$kr=o("The model class to instantiate is selected based on the "),kMe=a("code"),kkr=o("model_type"),Skr=o(` property of the config object (either
passed as an argument or loaded from `),SMe=a("code"),Rkr=o("pretrained_model_name_or_path"),Pkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RMe=a("code"),Bkr=o("pretrained_model_name_or_path"),Ikr=o(":"),Nkr=l(),be=a("ul"),IE=a("li"),PMe=a("strong"),qkr=o("albert"),jkr=o(" \u2014 "),QK=a("a"),Dkr=o("TFAlbertForMultipleChoice"),Gkr=o(" (ALBERT model)"),Okr=l(),NE=a("li"),BMe=a("strong"),Vkr=o("bert"),Xkr=o(" \u2014 "),HK=a("a"),zkr=o("TFBertForMultipleChoice"),Wkr=o(" (BERT model)"),Qkr=l(),qE=a("li"),IMe=a("strong"),Hkr=o("camembert"),Ukr=o(" \u2014 "),UK=a("a"),Jkr=o("TFCamembertForMultipleChoice"),Ykr=o(" (CamemBERT model)"),Kkr=l(),jE=a("li"),NMe=a("strong"),Zkr=o("convbert"),eSr=o(" \u2014 "),JK=a("a"),oSr=o("TFConvBertForMultipleChoice"),rSr=o(" (ConvBERT model)"),tSr=l(),DE=a("li"),qMe=a("strong"),aSr=o("distilbert"),nSr=o(" \u2014 "),YK=a("a"),sSr=o("TFDistilBertForMultipleChoice"),lSr=o(" (DistilBERT model)"),iSr=l(),GE=a("li"),jMe=a("strong"),dSr=o("electra"),cSr=o(" \u2014 "),KK=a("a"),fSr=o("TFElectraForMultipleChoice"),mSr=o(" (ELECTRA model)"),gSr=l(),OE=a("li"),DMe=a("strong"),hSr=o("flaubert"),pSr=o(" \u2014 "),ZK=a("a"),_Sr=o("TFFlaubertForMultipleChoice"),uSr=o(" (FlauBERT model)"),bSr=l(),VE=a("li"),GMe=a("strong"),vSr=o("funnel"),FSr=o(" \u2014 "),eZ=a("a"),TSr=o("TFFunnelForMultipleChoice"),MSr=o(" (Funnel Transformer model)"),ESr=l(),XE=a("li"),OMe=a("strong"),CSr=o("longformer"),wSr=o(" \u2014 "),oZ=a("a"),ASr=o("TFLongformerForMultipleChoice"),LSr=o(" (Longformer model)"),ySr=l(),zE=a("li"),VMe=a("strong"),xSr=o("mobilebert"),$Sr=o(" \u2014 "),rZ=a("a"),kSr=o("TFMobileBertForMultipleChoice"),SSr=o(" (MobileBERT model)"),RSr=l(),WE=a("li"),XMe=a("strong"),PSr=o("mpnet"),BSr=o(" \u2014 "),tZ=a("a"),ISr=o("TFMPNetForMultipleChoice"),NSr=o(" (MPNet model)"),qSr=l(),QE=a("li"),zMe=a("strong"),jSr=o("rembert"),DSr=o(" \u2014 "),aZ=a("a"),GSr=o("TFRemBertForMultipleChoice"),OSr=o(" (RemBERT model)"),VSr=l(),HE=a("li"),WMe=a("strong"),XSr=o("roberta"),zSr=o(" \u2014 "),nZ=a("a"),WSr=o("TFRobertaForMultipleChoice"),QSr=o(" (RoBERTa model)"),HSr=l(),UE=a("li"),QMe=a("strong"),USr=o("roformer"),JSr=o(" \u2014 "),sZ=a("a"),YSr=o("TFRoFormerForMultipleChoice"),KSr=o(" (RoFormer model)"),ZSr=l(),JE=a("li"),HMe=a("strong"),eRr=o("xlm"),oRr=o(" \u2014 "),lZ=a("a"),rRr=o("TFXLMForMultipleChoice"),tRr=o(" (XLM model)"),aRr=l(),YE=a("li"),UMe=a("strong"),nRr=o("xlm-roberta"),sRr=o(" \u2014 "),iZ=a("a"),lRr=o("TFXLMRobertaForMultipleChoice"),iRr=o(" (XLM-RoBERTa model)"),dRr=l(),KE=a("li"),JMe=a("strong"),cRr=o("xlnet"),fRr=o(" \u2014 "),dZ=a("a"),mRr=o("TFXLNetForMultipleChoice"),gRr=o(" (XLNet model)"),hRr=l(),F(ZE.$$.fragment),mWe=l(),Sc=a("h2"),eC=a("a"),YMe=a("span"),F(Gx.$$.fragment),pRr=l(),KMe=a("span"),_Rr=o("TFAutoModelForNextSentencePrediction"),gWe=l(),cr=a("div"),F(Ox.$$.fragment),uRr=l(),Rc=a("p"),bRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cZ=a("a"),vRr=o("from_pretrained()"),FRr=o(" class method or the "),fZ=a("a"),TRr=o("from_config()"),MRr=o(` class
method.`),ERr=l(),Vx=a("p"),CRr=o("This class cannot be instantiated directly using "),ZMe=a("code"),wRr=o("__init__()"),ARr=o(" (throws an error)."),LRr=l(),Gt=a("div"),F(Xx.$$.fragment),yRr=l(),eEe=a("p"),xRr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Rr=l(),Pc=a("p"),kRr=o(`Note:
Loading a model from its configuration file does `),oEe=a("strong"),SRr=o("not"),RRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=a("a"),PRr=o("from_pretrained()"),BRr=o(" to load the model weights."),IRr=l(),F(oC.$$.fragment),NRr=l(),qr=a("div"),F(zx.$$.fragment),qRr=l(),rEe=a("p"),jRr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DRr=l(),pn=a("p"),GRr=o("The model class to instantiate is selected based on the "),tEe=a("code"),ORr=o("model_type"),VRr=o(` property of the config object (either
passed as an argument or loaded from `),aEe=a("code"),XRr=o("pretrained_model_name_or_path"),zRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nEe=a("code"),WRr=o("pretrained_model_name_or_path"),QRr=o(":"),HRr=l(),Wx=a("ul"),rC=a("li"),sEe=a("strong"),URr=o("bert"),JRr=o(" \u2014 "),gZ=a("a"),YRr=o("TFBertForNextSentencePrediction"),KRr=o(" (BERT model)"),ZRr=l(),tC=a("li"),lEe=a("strong"),ePr=o("mobilebert"),oPr=o(" \u2014 "),hZ=a("a"),rPr=o("TFMobileBertForNextSentencePrediction"),tPr=o(" (MobileBERT model)"),aPr=l(),F(aC.$$.fragment),hWe=l(),Bc=a("h2"),nC=a("a"),iEe=a("span"),F(Qx.$$.fragment),nPr=l(),dEe=a("span"),sPr=o("TFAutoModelForTableQuestionAnswering"),pWe=l(),fr=a("div"),F(Hx.$$.fragment),lPr=l(),Ic=a("p"),iPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pZ=a("a"),dPr=o("from_pretrained()"),cPr=o(" class method or the "),_Z=a("a"),fPr=o("from_config()"),mPr=o(` class
method.`),gPr=l(),Ux=a("p"),hPr=o("This class cannot be instantiated directly using "),cEe=a("code"),pPr=o("__init__()"),_Pr=o(" (throws an error)."),uPr=l(),Ot=a("div"),F(Jx.$$.fragment),bPr=l(),fEe=a("p"),vPr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),FPr=l(),Nc=a("p"),TPr=o(`Note:
Loading a model from its configuration file does `),mEe=a("strong"),MPr=o("not"),EPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=a("a"),CPr=o("from_pretrained()"),wPr=o(" to load the model weights."),APr=l(),F(sC.$$.fragment),LPr=l(),jr=a("div"),F(Yx.$$.fragment),yPr=l(),gEe=a("p"),xPr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$Pr=l(),_n=a("p"),kPr=o("The model class to instantiate is selected based on the "),hEe=a("code"),SPr=o("model_type"),RPr=o(` property of the config object (either
passed as an argument or loaded from `),pEe=a("code"),PPr=o("pretrained_model_name_or_path"),BPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ee=a("code"),IPr=o("pretrained_model_name_or_path"),NPr=o(":"),qPr=l(),uEe=a("ul"),lC=a("li"),bEe=a("strong"),jPr=o("tapas"),DPr=o(" \u2014 "),bZ=a("a"),GPr=o("TFTapasForQuestionAnswering"),OPr=o(" (TAPAS model)"),VPr=l(),F(iC.$$.fragment),_We=l(),qc=a("h2"),dC=a("a"),vEe=a("span"),F(Kx.$$.fragment),XPr=l(),FEe=a("span"),zPr=o("TFAutoModelForTokenClassification"),uWe=l(),mr=a("div"),F(Zx.$$.fragment),WPr=l(),jc=a("p"),QPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vZ=a("a"),HPr=o("from_pretrained()"),UPr=o(" class method or the "),FZ=a("a"),JPr=o("from_config()"),YPr=o(` class
method.`),KPr=l(),e$=a("p"),ZPr=o("This class cannot be instantiated directly using "),TEe=a("code"),eBr=o("__init__()"),oBr=o(" (throws an error)."),rBr=l(),Vt=a("div"),F(o$.$$.fragment),tBr=l(),MEe=a("p"),aBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nBr=l(),Dc=a("p"),sBr=o(`Note:
Loading a model from its configuration file does `),EEe=a("strong"),lBr=o("not"),iBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=a("a"),dBr=o("from_pretrained()"),cBr=o(" to load the model weights."),fBr=l(),F(cC.$$.fragment),mBr=l(),Dr=a("div"),F(r$.$$.fragment),gBr=l(),CEe=a("p"),hBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pBr=l(),un=a("p"),_Br=o("The model class to instantiate is selected based on the "),wEe=a("code"),uBr=o("model_type"),bBr=o(` property of the config object (either
passed as an argument or loaded from `),AEe=a("code"),vBr=o("pretrained_model_name_or_path"),FBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LEe=a("code"),TBr=o("pretrained_model_name_or_path"),MBr=o(":"),EBr=l(),de=a("ul"),fC=a("li"),yEe=a("strong"),CBr=o("albert"),wBr=o(" \u2014 "),MZ=a("a"),ABr=o("TFAlbertForTokenClassification"),LBr=o(" (ALBERT model)"),yBr=l(),mC=a("li"),xEe=a("strong"),xBr=o("bert"),$Br=o(" \u2014 "),EZ=a("a"),kBr=o("TFBertForTokenClassification"),SBr=o(" (BERT model)"),RBr=l(),gC=a("li"),$Ee=a("strong"),PBr=o("camembert"),BBr=o(" \u2014 "),CZ=a("a"),IBr=o("TFCamembertForTokenClassification"),NBr=o(" (CamemBERT model)"),qBr=l(),hC=a("li"),kEe=a("strong"),jBr=o("convbert"),DBr=o(" \u2014 "),wZ=a("a"),GBr=o("TFConvBertForTokenClassification"),OBr=o(" (ConvBERT model)"),VBr=l(),pC=a("li"),SEe=a("strong"),XBr=o("deberta"),zBr=o(" \u2014 "),AZ=a("a"),WBr=o("TFDebertaForTokenClassification"),QBr=o(" (DeBERTa model)"),HBr=l(),_C=a("li"),REe=a("strong"),UBr=o("deberta-v2"),JBr=o(" \u2014 "),LZ=a("a"),YBr=o("TFDebertaV2ForTokenClassification"),KBr=o(" (DeBERTa-v2 model)"),ZBr=l(),uC=a("li"),PEe=a("strong"),eIr=o("distilbert"),oIr=o(" \u2014 "),yZ=a("a"),rIr=o("TFDistilBertForTokenClassification"),tIr=o(" (DistilBERT model)"),aIr=l(),bC=a("li"),BEe=a("strong"),nIr=o("electra"),sIr=o(" \u2014 "),xZ=a("a"),lIr=o("TFElectraForTokenClassification"),iIr=o(" (ELECTRA model)"),dIr=l(),vC=a("li"),IEe=a("strong"),cIr=o("flaubert"),fIr=o(" \u2014 "),$Z=a("a"),mIr=o("TFFlaubertForTokenClassification"),gIr=o(" (FlauBERT model)"),hIr=l(),FC=a("li"),NEe=a("strong"),pIr=o("funnel"),_Ir=o(" \u2014 "),kZ=a("a"),uIr=o("TFFunnelForTokenClassification"),bIr=o(" (Funnel Transformer model)"),vIr=l(),TC=a("li"),qEe=a("strong"),FIr=o("layoutlm"),TIr=o(" \u2014 "),SZ=a("a"),MIr=o("TFLayoutLMForTokenClassification"),EIr=o(" (LayoutLM model)"),CIr=l(),MC=a("li"),jEe=a("strong"),wIr=o("longformer"),AIr=o(" \u2014 "),RZ=a("a"),LIr=o("TFLongformerForTokenClassification"),yIr=o(" (Longformer model)"),xIr=l(),EC=a("li"),DEe=a("strong"),$Ir=o("mobilebert"),kIr=o(" \u2014 "),PZ=a("a"),SIr=o("TFMobileBertForTokenClassification"),RIr=o(" (MobileBERT model)"),PIr=l(),CC=a("li"),GEe=a("strong"),BIr=o("mpnet"),IIr=o(" \u2014 "),BZ=a("a"),NIr=o("TFMPNetForTokenClassification"),qIr=o(" (MPNet model)"),jIr=l(),wC=a("li"),OEe=a("strong"),DIr=o("rembert"),GIr=o(" \u2014 "),IZ=a("a"),OIr=o("TFRemBertForTokenClassification"),VIr=o(" (RemBERT model)"),XIr=l(),AC=a("li"),VEe=a("strong"),zIr=o("roberta"),WIr=o(" \u2014 "),NZ=a("a"),QIr=o("TFRobertaForTokenClassification"),HIr=o(" (RoBERTa model)"),UIr=l(),LC=a("li"),XEe=a("strong"),JIr=o("roformer"),YIr=o(" \u2014 "),qZ=a("a"),KIr=o("TFRoFormerForTokenClassification"),ZIr=o(" (RoFormer model)"),eNr=l(),yC=a("li"),zEe=a("strong"),oNr=o("xlm"),rNr=o(" \u2014 "),jZ=a("a"),tNr=o("TFXLMForTokenClassification"),aNr=o(" (XLM model)"),nNr=l(),xC=a("li"),WEe=a("strong"),sNr=o("xlm-roberta"),lNr=o(" \u2014 "),DZ=a("a"),iNr=o("TFXLMRobertaForTokenClassification"),dNr=o(" (XLM-RoBERTa model)"),cNr=l(),$C=a("li"),QEe=a("strong"),fNr=o("xlnet"),mNr=o(" \u2014 "),GZ=a("a"),gNr=o("TFXLNetForTokenClassification"),hNr=o(" (XLNet model)"),pNr=l(),F(kC.$$.fragment),bWe=l(),Gc=a("h2"),SC=a("a"),HEe=a("span"),F(t$.$$.fragment),_Nr=l(),UEe=a("span"),uNr=o("TFAutoModelForQuestionAnswering"),vWe=l(),gr=a("div"),F(a$.$$.fragment),bNr=l(),Oc=a("p"),vNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),OZ=a("a"),FNr=o("from_pretrained()"),TNr=o(" class method or the "),VZ=a("a"),MNr=o("from_config()"),ENr=o(` class
method.`),CNr=l(),n$=a("p"),wNr=o("This class cannot be instantiated directly using "),JEe=a("code"),ANr=o("__init__()"),LNr=o(" (throws an error)."),yNr=l(),Xt=a("div"),F(s$.$$.fragment),xNr=l(),YEe=a("p"),$Nr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kNr=l(),Vc=a("p"),SNr=o(`Note:
Loading a model from its configuration file does `),KEe=a("strong"),RNr=o("not"),PNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=a("a"),BNr=o("from_pretrained()"),INr=o(" to load the model weights."),NNr=l(),F(RC.$$.fragment),qNr=l(),Gr=a("div"),F(l$.$$.fragment),jNr=l(),ZEe=a("p"),DNr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),GNr=l(),bn=a("p"),ONr=o("The model class to instantiate is selected based on the "),eCe=a("code"),VNr=o("model_type"),XNr=o(` property of the config object (either
passed as an argument or loaded from `),oCe=a("code"),zNr=o("pretrained_model_name_or_path"),WNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rCe=a("code"),QNr=o("pretrained_model_name_or_path"),HNr=o(":"),UNr=l(),ce=a("ul"),PC=a("li"),tCe=a("strong"),JNr=o("albert"),YNr=o(" \u2014 "),zZ=a("a"),KNr=o("TFAlbertForQuestionAnswering"),ZNr=o(" (ALBERT model)"),eqr=l(),BC=a("li"),aCe=a("strong"),oqr=o("bert"),rqr=o(" \u2014 "),WZ=a("a"),tqr=o("TFBertForQuestionAnswering"),aqr=o(" (BERT model)"),nqr=l(),IC=a("li"),nCe=a("strong"),sqr=o("camembert"),lqr=o(" \u2014 "),QZ=a("a"),iqr=o("TFCamembertForQuestionAnswering"),dqr=o(" (CamemBERT model)"),cqr=l(),NC=a("li"),sCe=a("strong"),fqr=o("convbert"),mqr=o(" \u2014 "),HZ=a("a"),gqr=o("TFConvBertForQuestionAnswering"),hqr=o(" (ConvBERT model)"),pqr=l(),qC=a("li"),lCe=a("strong"),_qr=o("deberta"),uqr=o(" \u2014 "),UZ=a("a"),bqr=o("TFDebertaForQuestionAnswering"),vqr=o(" (DeBERTa model)"),Fqr=l(),jC=a("li"),iCe=a("strong"),Tqr=o("deberta-v2"),Mqr=o(" \u2014 "),JZ=a("a"),Eqr=o("TFDebertaV2ForQuestionAnswering"),Cqr=o(" (DeBERTa-v2 model)"),wqr=l(),DC=a("li"),dCe=a("strong"),Aqr=o("distilbert"),Lqr=o(" \u2014 "),YZ=a("a"),yqr=o("TFDistilBertForQuestionAnswering"),xqr=o(" (DistilBERT model)"),$qr=l(),GC=a("li"),cCe=a("strong"),kqr=o("electra"),Sqr=o(" \u2014 "),KZ=a("a"),Rqr=o("TFElectraForQuestionAnswering"),Pqr=o(" (ELECTRA model)"),Bqr=l(),OC=a("li"),fCe=a("strong"),Iqr=o("flaubert"),Nqr=o(" \u2014 "),ZZ=a("a"),qqr=o("TFFlaubertForQuestionAnsweringSimple"),jqr=o(" (FlauBERT model)"),Dqr=l(),VC=a("li"),mCe=a("strong"),Gqr=o("funnel"),Oqr=o(" \u2014 "),eee=a("a"),Vqr=o("TFFunnelForQuestionAnswering"),Xqr=o(" (Funnel Transformer model)"),zqr=l(),XC=a("li"),gCe=a("strong"),Wqr=o("gptj"),Qqr=o(" \u2014 "),oee=a("a"),Hqr=o("TFGPTJForQuestionAnswering"),Uqr=o(" (GPT-J model)"),Jqr=l(),zC=a("li"),hCe=a("strong"),Yqr=o("longformer"),Kqr=o(" \u2014 "),ree=a("a"),Zqr=o("TFLongformerForQuestionAnswering"),ejr=o(" (Longformer model)"),ojr=l(),WC=a("li"),pCe=a("strong"),rjr=o("mobilebert"),tjr=o(" \u2014 "),tee=a("a"),ajr=o("TFMobileBertForQuestionAnswering"),njr=o(" (MobileBERT model)"),sjr=l(),QC=a("li"),_Ce=a("strong"),ljr=o("mpnet"),ijr=o(" \u2014 "),aee=a("a"),djr=o("TFMPNetForQuestionAnswering"),cjr=o(" (MPNet model)"),fjr=l(),HC=a("li"),uCe=a("strong"),mjr=o("rembert"),gjr=o(" \u2014 "),nee=a("a"),hjr=o("TFRemBertForQuestionAnswering"),pjr=o(" (RemBERT model)"),_jr=l(),UC=a("li"),bCe=a("strong"),ujr=o("roberta"),bjr=o(" \u2014 "),see=a("a"),vjr=o("TFRobertaForQuestionAnswering"),Fjr=o(" (RoBERTa model)"),Tjr=l(),JC=a("li"),vCe=a("strong"),Mjr=o("roformer"),Ejr=o(" \u2014 "),lee=a("a"),Cjr=o("TFRoFormerForQuestionAnswering"),wjr=o(" (RoFormer model)"),Ajr=l(),YC=a("li"),FCe=a("strong"),Ljr=o("xlm"),yjr=o(" \u2014 "),iee=a("a"),xjr=o("TFXLMForQuestionAnsweringSimple"),$jr=o(" (XLM model)"),kjr=l(),KC=a("li"),TCe=a("strong"),Sjr=o("xlm-roberta"),Rjr=o(" \u2014 "),dee=a("a"),Pjr=o("TFXLMRobertaForQuestionAnswering"),Bjr=o(" (XLM-RoBERTa model)"),Ijr=l(),ZC=a("li"),MCe=a("strong"),Njr=o("xlnet"),qjr=o(" \u2014 "),cee=a("a"),jjr=o("TFXLNetForQuestionAnsweringSimple"),Djr=o(" (XLNet model)"),Gjr=l(),F(e5.$$.fragment),FWe=l(),Xc=a("h2"),o5=a("a"),ECe=a("span"),F(i$.$$.fragment),Ojr=l(),CCe=a("span"),Vjr=o("TFAutoModelForVision2Seq"),TWe=l(),hr=a("div"),F(d$.$$.fragment),Xjr=l(),zc=a("p"),zjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fee=a("a"),Wjr=o("from_pretrained()"),Qjr=o(" class method or the "),mee=a("a"),Hjr=o("from_config()"),Ujr=o(` class
method.`),Jjr=l(),c$=a("p"),Yjr=o("This class cannot be instantiated directly using "),wCe=a("code"),Kjr=o("__init__()"),Zjr=o(" (throws an error)."),eDr=l(),zt=a("div"),F(f$.$$.fragment),oDr=l(),ACe=a("p"),rDr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tDr=l(),Wc=a("p"),aDr=o(`Note:
Loading a model from its configuration file does `),LCe=a("strong"),nDr=o("not"),sDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=a("a"),lDr=o("from_pretrained()"),iDr=o(" to load the model weights."),dDr=l(),F(r5.$$.fragment),cDr=l(),Or=a("div"),F(m$.$$.fragment),fDr=l(),yCe=a("p"),mDr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gDr=l(),vn=a("p"),hDr=o("The model class to instantiate is selected based on the "),xCe=a("code"),pDr=o("model_type"),_Dr=o(` property of the config object (either
passed as an argument or loaded from `),$Ce=a("code"),uDr=o("pretrained_model_name_or_path"),bDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kCe=a("code"),vDr=o("pretrained_model_name_or_path"),FDr=o(":"),TDr=l(),SCe=a("ul"),t5=a("li"),RCe=a("strong"),MDr=o("vision-encoder-decoder"),EDr=o(" \u2014 "),hee=a("a"),CDr=o("TFVisionEncoderDecoderModel"),wDr=o(" (Vision Encoder decoder model)"),ADr=l(),F(a5.$$.fragment),MWe=l(),Qc=a("h2"),n5=a("a"),PCe=a("span"),F(g$.$$.fragment),LDr=l(),BCe=a("span"),yDr=o("TFAutoModelForSpeechSeq2Seq"),EWe=l(),pr=a("div"),F(h$.$$.fragment),xDr=l(),Hc=a("p"),$Dr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pee=a("a"),kDr=o("from_pretrained()"),SDr=o(" class method or the "),_ee=a("a"),RDr=o("from_config()"),PDr=o(` class
method.`),BDr=l(),p$=a("p"),IDr=o("This class cannot be instantiated directly using "),ICe=a("code"),NDr=o("__init__()"),qDr=o(" (throws an error)."),jDr=l(),Wt=a("div"),F(_$.$$.fragment),DDr=l(),NCe=a("p"),GDr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ODr=l(),Uc=a("p"),VDr=o(`Note:
Loading a model from its configuration file does `),qCe=a("strong"),XDr=o("not"),zDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uee=a("a"),WDr=o("from_pretrained()"),QDr=o(" to load the model weights."),HDr=l(),F(s5.$$.fragment),UDr=l(),Vr=a("div"),F(u$.$$.fragment),JDr=l(),jCe=a("p"),YDr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),KDr=l(),Fn=a("p"),ZDr=o("The model class to instantiate is selected based on the "),DCe=a("code"),eGr=o("model_type"),oGr=o(` property of the config object (either
passed as an argument or loaded from `),GCe=a("code"),rGr=o("pretrained_model_name_or_path"),tGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OCe=a("code"),aGr=o("pretrained_model_name_or_path"),nGr=o(":"),sGr=l(),VCe=a("ul"),l5=a("li"),XCe=a("strong"),lGr=o("speech_to_text"),iGr=o(" \u2014 "),bee=a("a"),dGr=o("TFSpeech2TextForConditionalGeneration"),cGr=o(" (Speech2Text model)"),fGr=l(),F(i5.$$.fragment),CWe=l(),Jc=a("h2"),d5=a("a"),zCe=a("span"),F(b$.$$.fragment),mGr=l(),WCe=a("span"),gGr=o("FlaxAutoModel"),wWe=l(),_r=a("div"),F(v$.$$.fragment),hGr=l(),Yc=a("p"),pGr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vee=a("a"),_Gr=o("from_pretrained()"),uGr=o(" class method or the "),Fee=a("a"),bGr=o("from_config()"),vGr=o(` class
method.`),FGr=l(),F$=a("p"),TGr=o("This class cannot be instantiated directly using "),QCe=a("code"),MGr=o("__init__()"),EGr=o(" (throws an error)."),CGr=l(),Qt=a("div"),F(T$.$$.fragment),wGr=l(),HCe=a("p"),AGr=o("Instantiates one of the base model classes of the library from a configuration."),LGr=l(),Kc=a("p"),yGr=o(`Note:
Loading a model from its configuration file does `),UCe=a("strong"),xGr=o("not"),$Gr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tee=a("a"),kGr=o("from_pretrained()"),SGr=o(" to load the model weights."),RGr=l(),F(c5.$$.fragment),PGr=l(),Xr=a("div"),F(M$.$$.fragment),BGr=l(),JCe=a("p"),IGr=o("Instantiate one of the base model classes of the library from a pretrained model."),NGr=l(),Tn=a("p"),qGr=o("The model class to instantiate is selected based on the "),YCe=a("code"),jGr=o("model_type"),DGr=o(` property of the config object (either
passed as an argument or loaded from `),KCe=a("code"),GGr=o("pretrained_model_name_or_path"),OGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=a("code"),VGr=o("pretrained_model_name_or_path"),XGr=o(":"),zGr=l(),oe=a("ul"),f5=a("li"),e5e=a("strong"),WGr=o("albert"),QGr=o(" \u2014 "),Mee=a("a"),HGr=o("FlaxAlbertModel"),UGr=o(" (ALBERT model)"),JGr=l(),m5=a("li"),o5e=a("strong"),YGr=o("bart"),KGr=o(" \u2014 "),Eee=a("a"),ZGr=o("FlaxBartModel"),eOr=o(" (BART model)"),oOr=l(),g5=a("li"),r5e=a("strong"),rOr=o("beit"),tOr=o(" \u2014 "),Cee=a("a"),aOr=o("FlaxBeitModel"),nOr=o(" (BEiT model)"),sOr=l(),h5=a("li"),t5e=a("strong"),lOr=o("bert"),iOr=o(" \u2014 "),wee=a("a"),dOr=o("FlaxBertModel"),cOr=o(" (BERT model)"),fOr=l(),p5=a("li"),a5e=a("strong"),mOr=o("big_bird"),gOr=o(" \u2014 "),Aee=a("a"),hOr=o("FlaxBigBirdModel"),pOr=o(" (BigBird model)"),_Or=l(),_5=a("li"),n5e=a("strong"),uOr=o("blenderbot"),bOr=o(" \u2014 "),Lee=a("a"),vOr=o("FlaxBlenderbotModel"),FOr=o(" (Blenderbot model)"),TOr=l(),u5=a("li"),s5e=a("strong"),MOr=o("blenderbot-small"),EOr=o(" \u2014 "),yee=a("a"),COr=o("FlaxBlenderbotSmallModel"),wOr=o(" (BlenderbotSmall model)"),AOr=l(),b5=a("li"),l5e=a("strong"),LOr=o("clip"),yOr=o(" \u2014 "),xee=a("a"),xOr=o("FlaxCLIPModel"),$Or=o(" (CLIP model)"),kOr=l(),v5=a("li"),i5e=a("strong"),SOr=o("distilbert"),ROr=o(" \u2014 "),$ee=a("a"),POr=o("FlaxDistilBertModel"),BOr=o(" (DistilBERT model)"),IOr=l(),F5=a("li"),d5e=a("strong"),NOr=o("electra"),qOr=o(" \u2014 "),kee=a("a"),jOr=o("FlaxElectraModel"),DOr=o(" (ELECTRA model)"),GOr=l(),T5=a("li"),c5e=a("strong"),OOr=o("gpt2"),VOr=o(" \u2014 "),See=a("a"),XOr=o("FlaxGPT2Model"),zOr=o(" (OpenAI GPT-2 model)"),WOr=l(),M5=a("li"),f5e=a("strong"),QOr=o("gpt_neo"),HOr=o(" \u2014 "),Ree=a("a"),UOr=o("FlaxGPTNeoModel"),JOr=o(" (GPT Neo model)"),YOr=l(),E5=a("li"),m5e=a("strong"),KOr=o("gptj"),ZOr=o(" \u2014 "),Pee=a("a"),eVr=o("FlaxGPTJModel"),oVr=o(" (GPT-J model)"),rVr=l(),C5=a("li"),g5e=a("strong"),tVr=o("longt5"),aVr=o(" \u2014 "),Bee=a("a"),nVr=o("FlaxLongT5Model"),sVr=o(" (LongT5 model)"),lVr=l(),w5=a("li"),h5e=a("strong"),iVr=o("marian"),dVr=o(" \u2014 "),Iee=a("a"),cVr=o("FlaxMarianModel"),fVr=o(" (Marian model)"),mVr=l(),A5=a("li"),p5e=a("strong"),gVr=o("mbart"),hVr=o(" \u2014 "),Nee=a("a"),pVr=o("FlaxMBartModel"),_Vr=o(" (mBART model)"),uVr=l(),L5=a("li"),_5e=a("strong"),bVr=o("mt5"),vVr=o(" \u2014 "),qee=a("a"),FVr=o("FlaxMT5Model"),TVr=o(" (MT5 model)"),MVr=l(),y5=a("li"),u5e=a("strong"),EVr=o("opt"),CVr=o(" \u2014 "),jee=a("a"),wVr=o("FlaxOPTModel"),AVr=o(" (OPT model)"),LVr=l(),x5=a("li"),b5e=a("strong"),yVr=o("pegasus"),xVr=o(" \u2014 "),Dee=a("a"),$Vr=o("FlaxPegasusModel"),kVr=o(" (Pegasus model)"),SVr=l(),$5=a("li"),v5e=a("strong"),RVr=o("roberta"),PVr=o(" \u2014 "),Gee=a("a"),BVr=o("FlaxRobertaModel"),IVr=o(" (RoBERTa model)"),NVr=l(),k5=a("li"),F5e=a("strong"),qVr=o("roformer"),jVr=o(" \u2014 "),Oee=a("a"),DVr=o("FlaxRoFormerModel"),GVr=o(" (RoFormer model)"),OVr=l(),S5=a("li"),T5e=a("strong"),VVr=o("t5"),XVr=o(" \u2014 "),Vee=a("a"),zVr=o("FlaxT5Model"),WVr=o(" (T5 model)"),QVr=l(),R5=a("li"),M5e=a("strong"),HVr=o("vision-text-dual-encoder"),UVr=o(" \u2014 "),Xee=a("a"),JVr=o("FlaxVisionTextDualEncoderModel"),YVr=o(" (VisionTextDualEncoder model)"),KVr=l(),P5=a("li"),E5e=a("strong"),ZVr=o("vit"),eXr=o(" \u2014 "),zee=a("a"),oXr=o("FlaxViTModel"),rXr=o(" (ViT model)"),tXr=l(),B5=a("li"),C5e=a("strong"),aXr=o("wav2vec2"),nXr=o(" \u2014 "),Wee=a("a"),sXr=o("FlaxWav2Vec2Model"),lXr=o(" (Wav2Vec2 model)"),iXr=l(),I5=a("li"),w5e=a("strong"),dXr=o("xglm"),cXr=o(" \u2014 "),Qee=a("a"),fXr=o("FlaxXGLMModel"),mXr=o(" (XGLM model)"),gXr=l(),N5=a("li"),A5e=a("strong"),hXr=o("xlm-roberta"),pXr=o(" \u2014 "),Hee=a("a"),_Xr=o("FlaxXLMRobertaModel"),uXr=o(" (XLM-RoBERTa model)"),bXr=l(),F(q5.$$.fragment),AWe=l(),Zc=a("h2"),j5=a("a"),L5e=a("span"),F(E$.$$.fragment),vXr=l(),y5e=a("span"),FXr=o("FlaxAutoModelForCausalLM"),LWe=l(),ur=a("div"),F(C$.$$.fragment),TXr=l(),ef=a("p"),MXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Uee=a("a"),EXr=o("from_pretrained()"),CXr=o(" class method or the "),Jee=a("a"),wXr=o("from_config()"),AXr=o(` class
method.`),LXr=l(),w$=a("p"),yXr=o("This class cannot be instantiated directly using "),x5e=a("code"),xXr=o("__init__()"),$Xr=o(" (throws an error)."),kXr=l(),Ht=a("div"),F(A$.$$.fragment),SXr=l(),$5e=a("p"),RXr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),PXr=l(),of=a("p"),BXr=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),IXr=o("not"),NXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=a("a"),qXr=o("from_pretrained()"),jXr=o(" to load the model weights."),DXr=l(),F(D5.$$.fragment),GXr=l(),zr=a("div"),F(L$.$$.fragment),OXr=l(),S5e=a("p"),VXr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),XXr=l(),Mn=a("p"),zXr=o("The model class to instantiate is selected based on the "),R5e=a("code"),WXr=o("model_type"),QXr=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),HXr=o("pretrained_model_name_or_path"),UXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),JXr=o("pretrained_model_name_or_path"),YXr=o(":"),KXr=l(),xe=a("ul"),G5=a("li"),I5e=a("strong"),ZXr=o("bart"),ezr=o(" \u2014 "),Kee=a("a"),ozr=o("FlaxBartForCausalLM"),rzr=o(" (BART model)"),tzr=l(),O5=a("li"),N5e=a("strong"),azr=o("bert"),nzr=o(" \u2014 "),Zee=a("a"),szr=o("FlaxBertForCausalLM"),lzr=o(" (BERT model)"),izr=l(),V5=a("li"),q5e=a("strong"),dzr=o("big_bird"),czr=o(" \u2014 "),eoe=a("a"),fzr=o("FlaxBigBirdForCausalLM"),mzr=o(" (BigBird model)"),gzr=l(),X5=a("li"),j5e=a("strong"),hzr=o("electra"),pzr=o(" \u2014 "),ooe=a("a"),_zr=o("FlaxElectraForCausalLM"),uzr=o(" (ELECTRA model)"),bzr=l(),z5=a("li"),D5e=a("strong"),vzr=o("gpt2"),Fzr=o(" \u2014 "),roe=a("a"),Tzr=o("FlaxGPT2LMHeadModel"),Mzr=o(" (OpenAI GPT-2 model)"),Ezr=l(),W5=a("li"),G5e=a("strong"),Czr=o("gpt_neo"),wzr=o(" \u2014 "),toe=a("a"),Azr=o("FlaxGPTNeoForCausalLM"),Lzr=o(" (GPT Neo model)"),yzr=l(),Q5=a("li"),O5e=a("strong"),xzr=o("gptj"),$zr=o(" \u2014 "),aoe=a("a"),kzr=o("FlaxGPTJForCausalLM"),Szr=o(" (GPT-J model)"),Rzr=l(),H5=a("li"),V5e=a("strong"),Pzr=o("opt"),Bzr=o(" \u2014 "),noe=a("a"),Izr=o("FlaxOPTForCausalLM"),Nzr=o(" (OPT model)"),qzr=l(),U5=a("li"),X5e=a("strong"),jzr=o("roberta"),Dzr=o(" \u2014 "),soe=a("a"),Gzr=o("FlaxRobertaForCausalLM"),Ozr=o(" (RoBERTa model)"),Vzr=l(),J5=a("li"),z5e=a("strong"),Xzr=o("xglm"),zzr=o(" \u2014 "),loe=a("a"),Wzr=o("FlaxXGLMForCausalLM"),Qzr=o(" (XGLM model)"),Hzr=l(),F(Y5.$$.fragment),yWe=l(),rf=a("h2"),K5=a("a"),W5e=a("span"),F(y$.$$.fragment),Uzr=l(),Q5e=a("span"),Jzr=o("FlaxAutoModelForPreTraining"),xWe=l(),br=a("div"),F(x$.$$.fragment),Yzr=l(),tf=a("p"),Kzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ioe=a("a"),Zzr=o("from_pretrained()"),eWr=o(" class method or the "),doe=a("a"),oWr=o("from_config()"),rWr=o(` class
method.`),tWr=l(),$$=a("p"),aWr=o("This class cannot be instantiated directly using "),H5e=a("code"),nWr=o("__init__()"),sWr=o(" (throws an error)."),lWr=l(),Ut=a("div"),F(k$.$$.fragment),iWr=l(),U5e=a("p"),dWr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cWr=l(),af=a("p"),fWr=o(`Note:
Loading a model from its configuration file does `),J5e=a("strong"),mWr=o("not"),gWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),coe=a("a"),hWr=o("from_pretrained()"),pWr=o(" to load the model weights."),_Wr=l(),F(Z5.$$.fragment),uWr=l(),Wr=a("div"),F(S$.$$.fragment),bWr=l(),Y5e=a("p"),vWr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),FWr=l(),En=a("p"),TWr=o("The model class to instantiate is selected based on the "),K5e=a("code"),MWr=o("model_type"),EWr=o(` property of the config object (either
passed as an argument or loaded from `),Z5e=a("code"),CWr=o("pretrained_model_name_or_path"),wWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e3e=a("code"),AWr=o("pretrained_model_name_or_path"),LWr=o(":"),yWr=l(),Ee=a("ul"),e3=a("li"),o3e=a("strong"),xWr=o("albert"),$Wr=o(" \u2014 "),foe=a("a"),kWr=o("FlaxAlbertForPreTraining"),SWr=o(" (ALBERT model)"),RWr=l(),o3=a("li"),r3e=a("strong"),PWr=o("bart"),BWr=o(" \u2014 "),moe=a("a"),IWr=o("FlaxBartForConditionalGeneration"),NWr=o(" (BART model)"),qWr=l(),r3=a("li"),t3e=a("strong"),jWr=o("bert"),DWr=o(" \u2014 "),goe=a("a"),GWr=o("FlaxBertForPreTraining"),OWr=o(" (BERT model)"),VWr=l(),t3=a("li"),a3e=a("strong"),XWr=o("big_bird"),zWr=o(" \u2014 "),hoe=a("a"),WWr=o("FlaxBigBirdForPreTraining"),QWr=o(" (BigBird model)"),HWr=l(),a3=a("li"),n3e=a("strong"),UWr=o("electra"),JWr=o(" \u2014 "),poe=a("a"),YWr=o("FlaxElectraForPreTraining"),KWr=o(" (ELECTRA model)"),ZWr=l(),n3=a("li"),s3e=a("strong"),eQr=o("longt5"),oQr=o(" \u2014 "),_oe=a("a"),rQr=o("FlaxLongT5ForConditionalGeneration"),tQr=o(" (LongT5 model)"),aQr=l(),s3=a("li"),l3e=a("strong"),nQr=o("mbart"),sQr=o(" \u2014 "),uoe=a("a"),lQr=o("FlaxMBartForConditionalGeneration"),iQr=o(" (mBART model)"),dQr=l(),l3=a("li"),i3e=a("strong"),cQr=o("mt5"),fQr=o(" \u2014 "),boe=a("a"),mQr=o("FlaxMT5ForConditionalGeneration"),gQr=o(" (MT5 model)"),hQr=l(),i3=a("li"),d3e=a("strong"),pQr=o("roberta"),_Qr=o(" \u2014 "),voe=a("a"),uQr=o("FlaxRobertaForMaskedLM"),bQr=o(" (RoBERTa model)"),vQr=l(),d3=a("li"),c3e=a("strong"),FQr=o("roformer"),TQr=o(" \u2014 "),Foe=a("a"),MQr=o("FlaxRoFormerForMaskedLM"),EQr=o(" (RoFormer model)"),CQr=l(),c3=a("li"),f3e=a("strong"),wQr=o("t5"),AQr=o(" \u2014 "),Toe=a("a"),LQr=o("FlaxT5ForConditionalGeneration"),yQr=o(" (T5 model)"),xQr=l(),f3=a("li"),m3e=a("strong"),$Qr=o("wav2vec2"),kQr=o(" \u2014 "),Moe=a("a"),SQr=o("FlaxWav2Vec2ForPreTraining"),RQr=o(" (Wav2Vec2 model)"),PQr=l(),m3=a("li"),g3e=a("strong"),BQr=o("xlm-roberta"),IQr=o(" \u2014 "),Eoe=a("a"),NQr=o("FlaxXLMRobertaForMaskedLM"),qQr=o(" (XLM-RoBERTa model)"),jQr=l(),F(g3.$$.fragment),$We=l(),nf=a("h2"),h3=a("a"),h3e=a("span"),F(R$.$$.fragment),DQr=l(),p3e=a("span"),GQr=o("FlaxAutoModelForMaskedLM"),kWe=l(),vr=a("div"),F(P$.$$.fragment),OQr=l(),sf=a("p"),VQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Coe=a("a"),XQr=o("from_pretrained()"),zQr=o(" class method or the "),woe=a("a"),WQr=o("from_config()"),QQr=o(` class
method.`),HQr=l(),B$=a("p"),UQr=o("This class cannot be instantiated directly using "),_3e=a("code"),JQr=o("__init__()"),YQr=o(" (throws an error)."),KQr=l(),Jt=a("div"),F(I$.$$.fragment),ZQr=l(),u3e=a("p"),eHr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oHr=l(),lf=a("p"),rHr=o(`Note:
Loading a model from its configuration file does `),b3e=a("strong"),tHr=o("not"),aHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=a("a"),nHr=o("from_pretrained()"),sHr=o(" to load the model weights."),lHr=l(),F(p3.$$.fragment),iHr=l(),Qr=a("div"),F(N$.$$.fragment),dHr=l(),v3e=a("p"),cHr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),fHr=l(),Cn=a("p"),mHr=o("The model class to instantiate is selected based on the "),F3e=a("code"),gHr=o("model_type"),hHr=o(` property of the config object (either
passed as an argument or loaded from `),T3e=a("code"),pHr=o("pretrained_model_name_or_path"),_Hr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M3e=a("code"),uHr=o("pretrained_model_name_or_path"),bHr=o(":"),vHr=l(),$e=a("ul"),_3=a("li"),E3e=a("strong"),FHr=o("albert"),THr=o(" \u2014 "),Loe=a("a"),MHr=o("FlaxAlbertForMaskedLM"),EHr=o(" (ALBERT model)"),CHr=l(),u3=a("li"),C3e=a("strong"),wHr=o("bart"),AHr=o(" \u2014 "),yoe=a("a"),LHr=o("FlaxBartForConditionalGeneration"),yHr=o(" (BART model)"),xHr=l(),b3=a("li"),w3e=a("strong"),$Hr=o("bert"),kHr=o(" \u2014 "),xoe=a("a"),SHr=o("FlaxBertForMaskedLM"),RHr=o(" (BERT model)"),PHr=l(),v3=a("li"),A3e=a("strong"),BHr=o("big_bird"),IHr=o(" \u2014 "),$oe=a("a"),NHr=o("FlaxBigBirdForMaskedLM"),qHr=o(" (BigBird model)"),jHr=l(),F3=a("li"),L3e=a("strong"),DHr=o("distilbert"),GHr=o(" \u2014 "),koe=a("a"),OHr=o("FlaxDistilBertForMaskedLM"),VHr=o(" (DistilBERT model)"),XHr=l(),T3=a("li"),y3e=a("strong"),zHr=o("electra"),WHr=o(" \u2014 "),Soe=a("a"),QHr=o("FlaxElectraForMaskedLM"),HHr=o(" (ELECTRA model)"),UHr=l(),M3=a("li"),x3e=a("strong"),JHr=o("mbart"),YHr=o(" \u2014 "),Roe=a("a"),KHr=o("FlaxMBartForConditionalGeneration"),ZHr=o(" (mBART model)"),eUr=l(),E3=a("li"),$3e=a("strong"),oUr=o("roberta"),rUr=o(" \u2014 "),Poe=a("a"),tUr=o("FlaxRobertaForMaskedLM"),aUr=o(" (RoBERTa model)"),nUr=l(),C3=a("li"),k3e=a("strong"),sUr=o("roformer"),lUr=o(" \u2014 "),Boe=a("a"),iUr=o("FlaxRoFormerForMaskedLM"),dUr=o(" (RoFormer model)"),cUr=l(),w3=a("li"),S3e=a("strong"),fUr=o("xlm-roberta"),mUr=o(" \u2014 "),Ioe=a("a"),gUr=o("FlaxXLMRobertaForMaskedLM"),hUr=o(" (XLM-RoBERTa model)"),pUr=l(),F(A3.$$.fragment),SWe=l(),df=a("h2"),L3=a("a"),R3e=a("span"),F(q$.$$.fragment),_Ur=l(),P3e=a("span"),uUr=o("FlaxAutoModelForSeq2SeqLM"),RWe=l(),Fr=a("div"),F(j$.$$.fragment),bUr=l(),cf=a("p"),vUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Noe=a("a"),FUr=o("from_pretrained()"),TUr=o(" class method or the "),qoe=a("a"),MUr=o("from_config()"),EUr=o(` class
method.`),CUr=l(),D$=a("p"),wUr=o("This class cannot be instantiated directly using "),B3e=a("code"),AUr=o("__init__()"),LUr=o(" (throws an error)."),yUr=l(),Yt=a("div"),F(G$.$$.fragment),xUr=l(),I3e=a("p"),$Ur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kUr=l(),ff=a("p"),SUr=o(`Note:
Loading a model from its configuration file does `),N3e=a("strong"),RUr=o("not"),PUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),joe=a("a"),BUr=o("from_pretrained()"),IUr=o(" to load the model weights."),NUr=l(),F(y3.$$.fragment),qUr=l(),Hr=a("div"),F(O$.$$.fragment),jUr=l(),q3e=a("p"),DUr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),GUr=l(),wn=a("p"),OUr=o("The model class to instantiate is selected based on the "),j3e=a("code"),VUr=o("model_type"),XUr=o(` property of the config object (either
passed as an argument or loaded from `),D3e=a("code"),zUr=o("pretrained_model_name_or_path"),WUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G3e=a("code"),QUr=o("pretrained_model_name_or_path"),HUr=o(":"),UUr=l(),ke=a("ul"),x3=a("li"),O3e=a("strong"),JUr=o("bart"),YUr=o(" \u2014 "),Doe=a("a"),KUr=o("FlaxBartForConditionalGeneration"),ZUr=o(" (BART model)"),eJr=l(),$3=a("li"),V3e=a("strong"),oJr=o("blenderbot"),rJr=o(" \u2014 "),Goe=a("a"),tJr=o("FlaxBlenderbotForConditionalGeneration"),aJr=o(" (Blenderbot model)"),nJr=l(),k3=a("li"),X3e=a("strong"),sJr=o("blenderbot-small"),lJr=o(" \u2014 "),Ooe=a("a"),iJr=o("FlaxBlenderbotSmallForConditionalGeneration"),dJr=o(" (BlenderbotSmall model)"),cJr=l(),S3=a("li"),z3e=a("strong"),fJr=o("encoder-decoder"),mJr=o(" \u2014 "),Voe=a("a"),gJr=o("FlaxEncoderDecoderModel"),hJr=o(" (Encoder decoder model)"),pJr=l(),R3=a("li"),W3e=a("strong"),_Jr=o("longt5"),uJr=o(" \u2014 "),Xoe=a("a"),bJr=o("FlaxLongT5ForConditionalGeneration"),vJr=o(" (LongT5 model)"),FJr=l(),P3=a("li"),Q3e=a("strong"),TJr=o("marian"),MJr=o(" \u2014 "),zoe=a("a"),EJr=o("FlaxMarianMTModel"),CJr=o(" (Marian model)"),wJr=l(),B3=a("li"),H3e=a("strong"),AJr=o("mbart"),LJr=o(" \u2014 "),Woe=a("a"),yJr=o("FlaxMBartForConditionalGeneration"),xJr=o(" (mBART model)"),$Jr=l(),I3=a("li"),U3e=a("strong"),kJr=o("mt5"),SJr=o(" \u2014 "),Qoe=a("a"),RJr=o("FlaxMT5ForConditionalGeneration"),PJr=o(" (MT5 model)"),BJr=l(),N3=a("li"),J3e=a("strong"),IJr=o("pegasus"),NJr=o(" \u2014 "),Hoe=a("a"),qJr=o("FlaxPegasusForConditionalGeneration"),jJr=o(" (Pegasus model)"),DJr=l(),q3=a("li"),Y3e=a("strong"),GJr=o("t5"),OJr=o(" \u2014 "),Uoe=a("a"),VJr=o("FlaxT5ForConditionalGeneration"),XJr=o(" (T5 model)"),zJr=l(),F(j3.$$.fragment),PWe=l(),mf=a("h2"),D3=a("a"),K3e=a("span"),F(V$.$$.fragment),WJr=l(),Z3e=a("span"),QJr=o("FlaxAutoModelForSequenceClassification"),BWe=l(),Tr=a("div"),F(X$.$$.fragment),HJr=l(),gf=a("p"),UJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Joe=a("a"),JJr=o("from_pretrained()"),YJr=o(" class method or the "),Yoe=a("a"),KJr=o("from_config()"),ZJr=o(` class
method.`),eYr=l(),z$=a("p"),oYr=o("This class cannot be instantiated directly using "),ewe=a("code"),rYr=o("__init__()"),tYr=o(" (throws an error)."),aYr=l(),Kt=a("div"),F(W$.$$.fragment),nYr=l(),owe=a("p"),sYr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lYr=l(),hf=a("p"),iYr=o(`Note:
Loading a model from its configuration file does `),rwe=a("strong"),dYr=o("not"),cYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Koe=a("a"),fYr=o("from_pretrained()"),mYr=o(" to load the model weights."),gYr=l(),F(G3.$$.fragment),hYr=l(),Ur=a("div"),F(Q$.$$.fragment),pYr=l(),twe=a("p"),_Yr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uYr=l(),An=a("p"),bYr=o("The model class to instantiate is selected based on the "),awe=a("code"),vYr=o("model_type"),FYr=o(` property of the config object (either
passed as an argument or loaded from `),nwe=a("code"),TYr=o("pretrained_model_name_or_path"),MYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),swe=a("code"),EYr=o("pretrained_model_name_or_path"),CYr=o(":"),wYr=l(),Se=a("ul"),O3=a("li"),lwe=a("strong"),AYr=o("albert"),LYr=o(" \u2014 "),Zoe=a("a"),yYr=o("FlaxAlbertForSequenceClassification"),xYr=o(" (ALBERT model)"),$Yr=l(),V3=a("li"),iwe=a("strong"),kYr=o("bart"),SYr=o(" \u2014 "),ere=a("a"),RYr=o("FlaxBartForSequenceClassification"),PYr=o(" (BART model)"),BYr=l(),X3=a("li"),dwe=a("strong"),IYr=o("bert"),NYr=o(" \u2014 "),ore=a("a"),qYr=o("FlaxBertForSequenceClassification"),jYr=o(" (BERT model)"),DYr=l(),z3=a("li"),cwe=a("strong"),GYr=o("big_bird"),OYr=o(" \u2014 "),rre=a("a"),VYr=o("FlaxBigBirdForSequenceClassification"),XYr=o(" (BigBird model)"),zYr=l(),W3=a("li"),fwe=a("strong"),WYr=o("distilbert"),QYr=o(" \u2014 "),tre=a("a"),HYr=o("FlaxDistilBertForSequenceClassification"),UYr=o(" (DistilBERT model)"),JYr=l(),Q3=a("li"),mwe=a("strong"),YYr=o("electra"),KYr=o(" \u2014 "),are=a("a"),ZYr=o("FlaxElectraForSequenceClassification"),eKr=o(" (ELECTRA model)"),oKr=l(),H3=a("li"),gwe=a("strong"),rKr=o("mbart"),tKr=o(" \u2014 "),nre=a("a"),aKr=o("FlaxMBartForSequenceClassification"),nKr=o(" (mBART model)"),sKr=l(),U3=a("li"),hwe=a("strong"),lKr=o("roberta"),iKr=o(" \u2014 "),sre=a("a"),dKr=o("FlaxRobertaForSequenceClassification"),cKr=o(" (RoBERTa model)"),fKr=l(),J3=a("li"),pwe=a("strong"),mKr=o("roformer"),gKr=o(" \u2014 "),lre=a("a"),hKr=o("FlaxRoFormerForSequenceClassification"),pKr=o(" (RoFormer model)"),_Kr=l(),Y3=a("li"),_we=a("strong"),uKr=o("xlm-roberta"),bKr=o(" \u2014 "),ire=a("a"),vKr=o("FlaxXLMRobertaForSequenceClassification"),FKr=o(" (XLM-RoBERTa model)"),TKr=l(),F(K3.$$.fragment),IWe=l(),pf=a("h2"),Z3=a("a"),uwe=a("span"),F(H$.$$.fragment),MKr=l(),bwe=a("span"),EKr=o("FlaxAutoModelForQuestionAnswering"),NWe=l(),Mr=a("div"),F(U$.$$.fragment),CKr=l(),_f=a("p"),wKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dre=a("a"),AKr=o("from_pretrained()"),LKr=o(" class method or the "),cre=a("a"),yKr=o("from_config()"),xKr=o(` class
method.`),$Kr=l(),J$=a("p"),kKr=o("This class cannot be instantiated directly using "),vwe=a("code"),SKr=o("__init__()"),RKr=o(" (throws an error)."),PKr=l(),Zt=a("div"),F(Y$.$$.fragment),BKr=l(),Fwe=a("p"),IKr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),NKr=l(),uf=a("p"),qKr=o(`Note:
Loading a model from its configuration file does `),Twe=a("strong"),jKr=o("not"),DKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=a("a"),GKr=o("from_pretrained()"),OKr=o(" to load the model weights."),VKr=l(),F(ew.$$.fragment),XKr=l(),Jr=a("div"),F(K$.$$.fragment),zKr=l(),Mwe=a("p"),WKr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),QKr=l(),Ln=a("p"),HKr=o("The model class to instantiate is selected based on the "),Ewe=a("code"),UKr=o("model_type"),JKr=o(` property of the config object (either
passed as an argument or loaded from `),Cwe=a("code"),YKr=o("pretrained_model_name_or_path"),KKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wwe=a("code"),ZKr=o("pretrained_model_name_or_path"),eZr=o(":"),oZr=l(),Re=a("ul"),ow=a("li"),Awe=a("strong"),rZr=o("albert"),tZr=o(" \u2014 "),mre=a("a"),aZr=o("FlaxAlbertForQuestionAnswering"),nZr=o(" (ALBERT model)"),sZr=l(),rw=a("li"),Lwe=a("strong"),lZr=o("bart"),iZr=o(" \u2014 "),gre=a("a"),dZr=o("FlaxBartForQuestionAnswering"),cZr=o(" (BART model)"),fZr=l(),tw=a("li"),ywe=a("strong"),mZr=o("bert"),gZr=o(" \u2014 "),hre=a("a"),hZr=o("FlaxBertForQuestionAnswering"),pZr=o(" (BERT model)"),_Zr=l(),aw=a("li"),xwe=a("strong"),uZr=o("big_bird"),bZr=o(" \u2014 "),pre=a("a"),vZr=o("FlaxBigBirdForQuestionAnswering"),FZr=o(" (BigBird model)"),TZr=l(),nw=a("li"),$we=a("strong"),MZr=o("distilbert"),EZr=o(" \u2014 "),_re=a("a"),CZr=o("FlaxDistilBertForQuestionAnswering"),wZr=o(" (DistilBERT model)"),AZr=l(),sw=a("li"),kwe=a("strong"),LZr=o("electra"),yZr=o(" \u2014 "),ure=a("a"),xZr=o("FlaxElectraForQuestionAnswering"),$Zr=o(" (ELECTRA model)"),kZr=l(),lw=a("li"),Swe=a("strong"),SZr=o("mbart"),RZr=o(" \u2014 "),bre=a("a"),PZr=o("FlaxMBartForQuestionAnswering"),BZr=o(" (mBART model)"),IZr=l(),iw=a("li"),Rwe=a("strong"),NZr=o("roberta"),qZr=o(" \u2014 "),vre=a("a"),jZr=o("FlaxRobertaForQuestionAnswering"),DZr=o(" (RoBERTa model)"),GZr=l(),dw=a("li"),Pwe=a("strong"),OZr=o("roformer"),VZr=o(" \u2014 "),Fre=a("a"),XZr=o("FlaxRoFormerForQuestionAnswering"),zZr=o(" (RoFormer model)"),WZr=l(),cw=a("li"),Bwe=a("strong"),QZr=o("xlm-roberta"),HZr=o(" \u2014 "),Tre=a("a"),UZr=o("FlaxXLMRobertaForQuestionAnswering"),JZr=o(" (XLM-RoBERTa model)"),YZr=l(),F(fw.$$.fragment),qWe=l(),bf=a("h2"),mw=a("a"),Iwe=a("span"),F(Z$.$$.fragment),KZr=l(),Nwe=a("span"),ZZr=o("FlaxAutoModelForTokenClassification"),jWe=l(),Er=a("div"),F(ek.$$.fragment),eet=l(),vf=a("p"),oet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Mre=a("a"),ret=o("from_pretrained()"),tet=o(" class method or the "),Ere=a("a"),aet=o("from_config()"),net=o(` class
method.`),set=l(),ok=a("p"),iet=o("This class cannot be instantiated directly using "),qwe=a("code"),det=o("__init__()"),cet=o(" (throws an error)."),fet=l(),ea=a("div"),F(rk.$$.fragment),met=l(),jwe=a("p"),get=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),het=l(),Ff=a("p"),pet=o(`Note:
Loading a model from its configuration file does `),Dwe=a("strong"),_et=o("not"),uet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=a("a"),bet=o("from_pretrained()"),vet=o(" to load the model weights."),Fet=l(),F(gw.$$.fragment),Tet=l(),Yr=a("div"),F(tk.$$.fragment),Met=l(),Gwe=a("p"),Eet=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Cet=l(),yn=a("p"),wet=o("The model class to instantiate is selected based on the "),Owe=a("code"),Aet=o("model_type"),Let=o(` property of the config object (either
passed as an argument or loaded from `),Vwe=a("code"),yet=o("pretrained_model_name_or_path"),xet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xwe=a("code"),$et=o("pretrained_model_name_or_path"),ket=o(":"),Set=l(),Xe=a("ul"),hw=a("li"),zwe=a("strong"),Ret=o("albert"),Pet=o(" \u2014 "),wre=a("a"),Bet=o("FlaxAlbertForTokenClassification"),Iet=o(" (ALBERT model)"),Net=l(),pw=a("li"),Wwe=a("strong"),qet=o("bert"),jet=o(" \u2014 "),Are=a("a"),Det=o("FlaxBertForTokenClassification"),Get=o(" (BERT model)"),Oet=l(),_w=a("li"),Qwe=a("strong"),Vet=o("big_bird"),Xet=o(" \u2014 "),Lre=a("a"),zet=o("FlaxBigBirdForTokenClassification"),Wet=o(" (BigBird model)"),Qet=l(),uw=a("li"),Hwe=a("strong"),Het=o("distilbert"),Uet=o(" \u2014 "),yre=a("a"),Jet=o("FlaxDistilBertForTokenClassification"),Yet=o(" (DistilBERT model)"),Ket=l(),bw=a("li"),Uwe=a("strong"),Zet=o("electra"),eot=o(" \u2014 "),xre=a("a"),oot=o("FlaxElectraForTokenClassification"),rot=o(" (ELECTRA model)"),tot=l(),vw=a("li"),Jwe=a("strong"),aot=o("roberta"),not=o(" \u2014 "),$re=a("a"),sot=o("FlaxRobertaForTokenClassification"),lot=o(" (RoBERTa model)"),iot=l(),Fw=a("li"),Ywe=a("strong"),dot=o("roformer"),cot=o(" \u2014 "),kre=a("a"),fot=o("FlaxRoFormerForTokenClassification"),mot=o(" (RoFormer model)"),got=l(),Tw=a("li"),Kwe=a("strong"),hot=o("xlm-roberta"),pot=o(" \u2014 "),Sre=a("a"),_ot=o("FlaxXLMRobertaForTokenClassification"),uot=o(" (XLM-RoBERTa model)"),bot=l(),F(Mw.$$.fragment),DWe=l(),Tf=a("h2"),Ew=a("a"),Zwe=a("span"),F(ak.$$.fragment),vot=l(),eAe=a("span"),Fot=o("FlaxAutoModelForMultipleChoice"),GWe=l(),Cr=a("div"),F(nk.$$.fragment),Tot=l(),Mf=a("p"),Mot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Rre=a("a"),Eot=o("from_pretrained()"),Cot=o(" class method or the "),Pre=a("a"),wot=o("from_config()"),Aot=o(` class
method.`),Lot=l(),sk=a("p"),yot=o("This class cannot be instantiated directly using "),oAe=a("code"),xot=o("__init__()"),$ot=o(" (throws an error)."),kot=l(),oa=a("div"),F(lk.$$.fragment),Sot=l(),rAe=a("p"),Rot=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Pot=l(),Ef=a("p"),Bot=o(`Note:
Loading a model from its configuration file does `),tAe=a("strong"),Iot=o("not"),Not=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=a("a"),qot=o("from_pretrained()"),jot=o(" to load the model weights."),Dot=l(),F(Cw.$$.fragment),Got=l(),Kr=a("div"),F(ik.$$.fragment),Oot=l(),aAe=a("p"),Vot=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Xot=l(),xn=a("p"),zot=o("The model class to instantiate is selected based on the "),nAe=a("code"),Wot=o("model_type"),Qot=o(` property of the config object (either
passed as an argument or loaded from `),sAe=a("code"),Hot=o("pretrained_model_name_or_path"),Uot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lAe=a("code"),Jot=o("pretrained_model_name_or_path"),Yot=o(":"),Kot=l(),ze=a("ul"),ww=a("li"),iAe=a("strong"),Zot=o("albert"),ert=o(" \u2014 "),Ire=a("a"),ort=o("FlaxAlbertForMultipleChoice"),rrt=o(" (ALBERT model)"),trt=l(),Aw=a("li"),dAe=a("strong"),art=o("bert"),nrt=o(" \u2014 "),Nre=a("a"),srt=o("FlaxBertForMultipleChoice"),lrt=o(" (BERT model)"),irt=l(),Lw=a("li"),cAe=a("strong"),drt=o("big_bird"),crt=o(" \u2014 "),qre=a("a"),frt=o("FlaxBigBirdForMultipleChoice"),mrt=o(" (BigBird model)"),grt=l(),yw=a("li"),fAe=a("strong"),hrt=o("distilbert"),prt=o(" \u2014 "),jre=a("a"),_rt=o("FlaxDistilBertForMultipleChoice"),urt=o(" (DistilBERT model)"),brt=l(),xw=a("li"),mAe=a("strong"),vrt=o("electra"),Frt=o(" \u2014 "),Dre=a("a"),Trt=o("FlaxElectraForMultipleChoice"),Mrt=o(" (ELECTRA model)"),Ert=l(),$w=a("li"),gAe=a("strong"),Crt=o("roberta"),wrt=o(" \u2014 "),Gre=a("a"),Art=o("FlaxRobertaForMultipleChoice"),Lrt=o(" (RoBERTa model)"),yrt=l(),kw=a("li"),hAe=a("strong"),xrt=o("roformer"),$rt=o(" \u2014 "),Ore=a("a"),krt=o("FlaxRoFormerForMultipleChoice"),Srt=o(" (RoFormer model)"),Rrt=l(),Sw=a("li"),pAe=a("strong"),Prt=o("xlm-roberta"),Brt=o(" \u2014 "),Vre=a("a"),Irt=o("FlaxXLMRobertaForMultipleChoice"),Nrt=o(" (XLM-RoBERTa model)"),qrt=l(),F(Rw.$$.fragment),OWe=l(),Cf=a("h2"),Pw=a("a"),_Ae=a("span"),F(dk.$$.fragment),jrt=l(),uAe=a("span"),Drt=o("FlaxAutoModelForNextSentencePrediction"),VWe=l(),wr=a("div"),F(ck.$$.fragment),Grt=l(),wf=a("p"),Ort=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Xre=a("a"),Vrt=o("from_pretrained()"),Xrt=o(" class method or the "),zre=a("a"),zrt=o("from_config()"),Wrt=o(` class
method.`),Qrt=l(),fk=a("p"),Hrt=o("This class cannot be instantiated directly using "),bAe=a("code"),Urt=o("__init__()"),Jrt=o(" (throws an error)."),Yrt=l(),ra=a("div"),F(mk.$$.fragment),Krt=l(),vAe=a("p"),Zrt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ett=l(),Af=a("p"),ott=o(`Note:
Loading a model from its configuration file does `),FAe=a("strong"),rtt=o("not"),ttt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wre=a("a"),att=o("from_pretrained()"),ntt=o(" to load the model weights."),stt=l(),F(Bw.$$.fragment),ltt=l(),Zr=a("div"),F(gk.$$.fragment),itt=l(),TAe=a("p"),dtt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ctt=l(),$n=a("p"),ftt=o("The model class to instantiate is selected based on the "),MAe=a("code"),mtt=o("model_type"),gtt=o(` property of the config object (either
passed as an argument or loaded from `),EAe=a("code"),htt=o("pretrained_model_name_or_path"),ptt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CAe=a("code"),_tt=o("pretrained_model_name_or_path"),utt=o(":"),btt=l(),wAe=a("ul"),Iw=a("li"),AAe=a("strong"),vtt=o("bert"),Ftt=o(" \u2014 "),Qre=a("a"),Ttt=o("FlaxBertForNextSentencePrediction"),Mtt=o(" (BERT model)"),Ett=l(),F(Nw.$$.fragment),XWe=l(),Lf=a("h2"),qw=a("a"),LAe=a("span"),F(hk.$$.fragment),Ctt=l(),yAe=a("span"),wtt=o("FlaxAutoModelForImageClassification"),zWe=l(),Ar=a("div"),F(pk.$$.fragment),Att=l(),yf=a("p"),Ltt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Hre=a("a"),ytt=o("from_pretrained()"),xtt=o(" class method or the "),Ure=a("a"),$tt=o("from_config()"),ktt=o(` class
method.`),Stt=l(),_k=a("p"),Rtt=o("This class cannot be instantiated directly using "),xAe=a("code"),Ptt=o("__init__()"),Btt=o(" (throws an error)."),Itt=l(),ta=a("div"),F(uk.$$.fragment),Ntt=l(),$Ae=a("p"),qtt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jtt=l(),xf=a("p"),Dtt=o(`Note:
Loading a model from its configuration file does `),kAe=a("strong"),Gtt=o("not"),Ott=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jre=a("a"),Vtt=o("from_pretrained()"),Xtt=o(" to load the model weights."),ztt=l(),F(jw.$$.fragment),Wtt=l(),et=a("div"),F(bk.$$.fragment),Qtt=l(),SAe=a("p"),Htt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Utt=l(),kn=a("p"),Jtt=o("The model class to instantiate is selected based on the "),RAe=a("code"),Ytt=o("model_type"),Ktt=o(` property of the config object (either
passed as an argument or loaded from `),PAe=a("code"),Ztt=o("pretrained_model_name_or_path"),eat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BAe=a("code"),oat=o("pretrained_model_name_or_path"),rat=o(":"),tat=l(),vk=a("ul"),Dw=a("li"),IAe=a("strong"),aat=o("beit"),nat=o(" \u2014 "),Yre=a("a"),sat=o("FlaxBeitForImageClassification"),lat=o(" (BEiT model)"),iat=l(),Gw=a("li"),NAe=a("strong"),dat=o("vit"),cat=o(" \u2014 "),Kre=a("a"),fat=o("FlaxViTForImageClassification"),mat=o(" (ViT model)"),gat=l(),F(Ow.$$.fragment),WWe=l(),$f=a("h2"),Vw=a("a"),qAe=a("span"),F(Fk.$$.fragment),hat=l(),jAe=a("span"),pat=o("FlaxAutoModelForVision2Seq"),QWe=l(),Lr=a("div"),F(Tk.$$.fragment),_at=l(),kf=a("p"),uat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Zre=a("a"),bat=o("from_pretrained()"),vat=o(" class method or the "),ete=a("a"),Fat=o("from_config()"),Tat=o(` class
method.`),Mat=l(),Mk=a("p"),Eat=o("This class cannot be instantiated directly using "),DAe=a("code"),Cat=o("__init__()"),wat=o(" (throws an error)."),Aat=l(),aa=a("div"),F(Ek.$$.fragment),Lat=l(),GAe=a("p"),yat=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xat=l(),Sf=a("p"),$at=o(`Note:
Loading a model from its configuration file does `),OAe=a("strong"),kat=o("not"),Sat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ote=a("a"),Rat=o("from_pretrained()"),Pat=o(" to load the model weights."),Bat=l(),F(Xw.$$.fragment),Iat=l(),ot=a("div"),F(Ck.$$.fragment),Nat=l(),VAe=a("p"),qat=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jat=l(),Sn=a("p"),Dat=o("The model class to instantiate is selected based on the "),XAe=a("code"),Gat=o("model_type"),Oat=o(` property of the config object (either
passed as an argument or loaded from `),zAe=a("code"),Vat=o("pretrained_model_name_or_path"),Xat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WAe=a("code"),zat=o("pretrained_model_name_or_path"),Wat=o(":"),Qat=l(),QAe=a("ul"),zw=a("li"),HAe=a("strong"),Hat=o("vision-encoder-decoder"),Uat=o(" \u2014 "),rte=a("a"),Jat=o("FlaxVisionEncoderDecoderModel"),Yat=o(" (Vision Encoder decoder model)"),Kat=l(),F(Ww.$$.fragment),this.h()},l(f){const u=eUt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var wk=s(p);m=n(wk,"A",{id:!0,class:!0,href:!0});var UAe=s(m);_=n(UAe,"SPAN",{});var JAe=s(_);T(c.$$.fragment,JAe),JAe.forEach(t),UAe.forEach(t),h=i(wk),wo=n(wk,"SPAN",{});var YAe=s(wo);xi=r(YAe,"Auto Classes"),YAe.forEach(t),wk.forEach(t),If=i(f),lt=n(f,"P",{});var Ak=s(lt);$i=r(Ak,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ki=n(Ak,"CODE",{});var KAe=s(ki);fy=r(KAe,"from_pretrained()"),KAe.forEach(t),Nf=r(Ak,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ak.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Rn=s(Qe);Si=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var ZAe=s(Pn);my=r(ZAe,"AutoConfig"),ZAe.forEach(t),Bn=r(Rn,", "),In=n(Rn,"A",{href:!0});var eLe=s(In);gy=r(eLe,"AutoModel"),eLe.forEach(t),Ri=r(Rn,`, and
`),Nn=n(Rn,"A",{href:!0});var oLe=s(Nn);hy=r(oLe,"AutoTokenizer"),oLe.forEach(t),Pi=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),qf=i(f),T(Sa.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var Lk=s(Ae);HS=r(Lk,"will create a model that is an instance of "),Bi=n(Lk,"A",{href:!0});var rLe=s(Bi);US=r(rLe,"BertModel"),rLe.forEach(t),JS=r(Lk,"."),Lk.forEach(t),Ao=i(f),Ra=n(f,"P",{});var yk=s(Ra);YS=r(yk,"There is one class of "),jf=n(yk,"CODE",{});var tLe=s(jf);KS=r(tLe,"AutoModel"),tLe.forEach(t),aUe=r(yk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),yk.forEach(t),VXe=i(f),Ii=n(f,"H2",{class:!0});var xk=s(Ii);Df=n(xk,"A",{id:!0,class:!0,href:!0});var aLe=s(Df);Yae=n(aLe,"SPAN",{});var nLe=s(Yae);T(py.$$.fragment,nLe),nLe.forEach(t),aLe.forEach(t),nUe=i(xk),Kae=n(xk,"SPAN",{});var sLe=s(Kae);sUe=r(sLe,"Extending the Auto Classes"),sLe.forEach(t),xk.forEach(t),XXe=i(f),qn=n(f,"P",{});var Rf=s(qn);lUe=r(Rf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Zae=n(Rf,"CODE",{});var lLe=s(Zae);iUe=r(lLe,"NewModel"),lLe.forEach(t),dUe=r(Rf,", make sure you have a "),ene=n(Rf,"CODE",{});var iLe=s(ene);cUe=r(iLe,"NewModelConfig"),iLe.forEach(t),fUe=r(Rf,` then you can add those to the auto
classes like this:`),Rf.forEach(t),zXe=i(f),T(_y.$$.fragment,f),WXe=i(f),ZS=n(f,"P",{});var dLe=s(ZS);mUe=r(dLe,"You will then be able to use the auto classes like you would usually do!"),dLe.forEach(t),QXe=i(f),T(Gf.$$.fragment,f),HXe=i(f),Ni=n(f,"H2",{class:!0});var $k=s(Ni);Of=n($k,"A",{id:!0,class:!0,href:!0});var cLe=s(Of);one=n(cLe,"SPAN",{});var fLe=s(one);T(uy.$$.fragment,fLe),fLe.forEach(t),cLe.forEach(t),gUe=i($k),rne=n($k,"SPAN",{});var mLe=s(rne);hUe=r(mLe,"AutoConfig"),mLe.forEach(t),$k.forEach(t),UXe=i(f),Lo=n(f,"DIV",{class:!0});var nt=s(Lo);T(by.$$.fragment,nt),pUe=i(nt),vy=n(nt,"P",{});var kk=s(vy);_Ue=r(kk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),eR=n(kk,"A",{href:!0});var gLe=s(eR);uUe=r(gLe,"from_pretrained()"),gLe.forEach(t),bUe=r(kk," class method."),kk.forEach(t),vUe=i(nt),Fy=n(nt,"P",{});var Sk=s(Fy);FUe=r(Sk,"This class cannot be instantiated directly using "),tne=n(Sk,"CODE",{});var hLe=s(tne);TUe=r(hLe,"__init__()"),hLe.forEach(t),MUe=r(Sk," (throws an error)."),Sk.forEach(t),EUe=i(nt),yr=n(nt,"DIV",{class:!0});var st=s(yr);T(Ty.$$.fragment,st),CUe=i(st),ane=n(st,"P",{});var pLe=s(ane);wUe=r(pLe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),pLe.forEach(t),AUe=i(st),qi=n(st,"P",{});var Pf=s(qi);LUe=r(Pf,"The configuration class to instantiate is selected based on the "),nne=n(Pf,"CODE",{});var _Le=s(nne);yUe=r(_Le,"model_type"),_Le.forEach(t),xUe=r(Pf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),sne=n(Pf,"CODE",{});var uLe=s(sne);$Ue=r(uLe,"pretrained_model_name_or_path"),uLe.forEach(t),kUe=r(Pf,":"),Pf.forEach(t),SUe=i(st),A=n(st,"UL",{});var L=s(A);Vf=n(L,"LI",{});var Qw=s(Vf);lne=n(Qw,"STRONG",{});var bLe=s(lne);RUe=r(bLe,"albert"),bLe.forEach(t),PUe=r(Qw," \u2014 "),oR=n(Qw,"A",{href:!0});var vLe=s(oR);BUe=r(vLe,"AlbertConfig"),vLe.forEach(t),IUe=r(Qw," (ALBERT model)"),Qw.forEach(t),NUe=i(L),Xf=n(L,"LI",{});var Hw=s(Xf);ine=n(Hw,"STRONG",{});var FLe=s(ine);qUe=r(FLe,"bart"),FLe.forEach(t),jUe=r(Hw," \u2014 "),rR=n(Hw,"A",{href:!0});var TLe=s(rR);DUe=r(TLe,"BartConfig"),TLe.forEach(t),GUe=r(Hw," (BART model)"),Hw.forEach(t),OUe=i(L),zf=n(L,"LI",{});var Uw=s(zf);dne=n(Uw,"STRONG",{});var MLe=s(dne);VUe=r(MLe,"beit"),MLe.forEach(t),XUe=r(Uw," \u2014 "),tR=n(Uw,"A",{href:!0});var ELe=s(tR);zUe=r(ELe,"BeitConfig"),ELe.forEach(t),WUe=r(Uw," (BEiT model)"),Uw.forEach(t),QUe=i(L),Wf=n(L,"LI",{});var Jw=s(Wf);cne=n(Jw,"STRONG",{});var CLe=s(cne);HUe=r(CLe,"bert"),CLe.forEach(t),UUe=r(Jw," \u2014 "),aR=n(Jw,"A",{href:!0});var wLe=s(aR);JUe=r(wLe,"BertConfig"),wLe.forEach(t),YUe=r(Jw," (BERT model)"),Jw.forEach(t),KUe=i(L),Qf=n(L,"LI",{});var Yw=s(Qf);fne=n(Yw,"STRONG",{});var ALe=s(fne);ZUe=r(ALe,"bert-generation"),ALe.forEach(t),eJe=r(Yw," \u2014 "),nR=n(Yw,"A",{href:!0});var LLe=s(nR);oJe=r(LLe,"BertGenerationConfig"),LLe.forEach(t),rJe=r(Yw," (Bert Generation model)"),Yw.forEach(t),tJe=i(L),Hf=n(L,"LI",{});var Kw=s(Hf);mne=n(Kw,"STRONG",{});var yLe=s(mne);aJe=r(yLe,"big_bird"),yLe.forEach(t),nJe=r(Kw," \u2014 "),sR=n(Kw,"A",{href:!0});var xLe=s(sR);sJe=r(xLe,"BigBirdConfig"),xLe.forEach(t),lJe=r(Kw," (BigBird model)"),Kw.forEach(t),iJe=i(L),Uf=n(L,"LI",{});var Zw=s(Uf);gne=n(Zw,"STRONG",{});var $Le=s(gne);dJe=r($Le,"bigbird_pegasus"),$Le.forEach(t),cJe=r(Zw," \u2014 "),lR=n(Zw,"A",{href:!0});var kLe=s(lR);fJe=r(kLe,"BigBirdPegasusConfig"),kLe.forEach(t),mJe=r(Zw," (BigBird-Pegasus model)"),Zw.forEach(t),gJe=i(L),Jf=n(L,"LI",{});var eA=s(Jf);hne=n(eA,"STRONG",{});var SLe=s(hne);hJe=r(SLe,"blenderbot"),SLe.forEach(t),pJe=r(eA," \u2014 "),iR=n(eA,"A",{href:!0});var RLe=s(iR);_Je=r(RLe,"BlenderbotConfig"),RLe.forEach(t),uJe=r(eA," (Blenderbot model)"),eA.forEach(t),bJe=i(L),Yf=n(L,"LI",{});var oA=s(Yf);pne=n(oA,"STRONG",{});var PLe=s(pne);vJe=r(PLe,"blenderbot-small"),PLe.forEach(t),FJe=r(oA," \u2014 "),dR=n(oA,"A",{href:!0});var BLe=s(dR);TJe=r(BLe,"BlenderbotSmallConfig"),BLe.forEach(t),MJe=r(oA," (BlenderbotSmall model)"),oA.forEach(t),EJe=i(L),Kf=n(L,"LI",{});var rA=s(Kf);_ne=n(rA,"STRONG",{});var ILe=s(_ne);CJe=r(ILe,"bloom"),ILe.forEach(t),wJe=r(rA," \u2014 "),cR=n(rA,"A",{href:!0});var NLe=s(cR);AJe=r(NLe,"BloomConfig"),NLe.forEach(t),LJe=r(rA," (BLOOM model)"),rA.forEach(t),yJe=i(L),Zf=n(L,"LI",{});var tA=s(Zf);une=n(tA,"STRONG",{});var qLe=s(une);xJe=r(qLe,"camembert"),qLe.forEach(t),$Je=r(tA," \u2014 "),fR=n(tA,"A",{href:!0});var jLe=s(fR);kJe=r(jLe,"CamembertConfig"),jLe.forEach(t),SJe=r(tA," (CamemBERT model)"),tA.forEach(t),RJe=i(L),em=n(L,"LI",{});var aA=s(em);bne=n(aA,"STRONG",{});var DLe=s(bne);PJe=r(DLe,"canine"),DLe.forEach(t),BJe=r(aA," \u2014 "),mR=n(aA,"A",{href:!0});var GLe=s(mR);IJe=r(GLe,"CanineConfig"),GLe.forEach(t),NJe=r(aA," (CANINE model)"),aA.forEach(t),qJe=i(L),om=n(L,"LI",{});var nA=s(om);vne=n(nA,"STRONG",{});var OLe=s(vne);jJe=r(OLe,"clip"),OLe.forEach(t),DJe=r(nA," \u2014 "),gR=n(nA,"A",{href:!0});var VLe=s(gR);GJe=r(VLe,"CLIPConfig"),VLe.forEach(t),OJe=r(nA," (CLIP model)"),nA.forEach(t),VJe=i(L),rm=n(L,"LI",{});var sA=s(rm);Fne=n(sA,"STRONG",{});var XLe=s(Fne);XJe=r(XLe,"codegen"),XLe.forEach(t),zJe=r(sA," \u2014 "),hR=n(sA,"A",{href:!0});var zLe=s(hR);WJe=r(zLe,"CodeGenConfig"),zLe.forEach(t),QJe=r(sA," (CodeGen model)"),sA.forEach(t),HJe=i(L),tm=n(L,"LI",{});var lA=s(tm);Tne=n(lA,"STRONG",{});var WLe=s(Tne);UJe=r(WLe,"convbert"),WLe.forEach(t),JJe=r(lA," \u2014 "),pR=n(lA,"A",{href:!0});var QLe=s(pR);YJe=r(QLe,"ConvBertConfig"),QLe.forEach(t),KJe=r(lA," (ConvBERT model)"),lA.forEach(t),ZJe=i(L),am=n(L,"LI",{});var iA=s(am);Mne=n(iA,"STRONG",{});var HLe=s(Mne);eYe=r(HLe,"convnext"),HLe.forEach(t),oYe=r(iA," \u2014 "),_R=n(iA,"A",{href:!0});var ULe=s(_R);rYe=r(ULe,"ConvNextConfig"),ULe.forEach(t),tYe=r(iA," (ConvNeXT model)"),iA.forEach(t),aYe=i(L),nm=n(L,"LI",{});var dA=s(nm);Ene=n(dA,"STRONG",{});var JLe=s(Ene);nYe=r(JLe,"ctrl"),JLe.forEach(t),sYe=r(dA," \u2014 "),uR=n(dA,"A",{href:!0});var YLe=s(uR);lYe=r(YLe,"CTRLConfig"),YLe.forEach(t),iYe=r(dA," (CTRL model)"),dA.forEach(t),dYe=i(L),sm=n(L,"LI",{});var cA=s(sm);Cne=n(cA,"STRONG",{});var KLe=s(Cne);cYe=r(KLe,"cvt"),KLe.forEach(t),fYe=r(cA," \u2014 "),bR=n(cA,"A",{href:!0});var ZLe=s(bR);mYe=r(ZLe,"CvtConfig"),ZLe.forEach(t),gYe=r(cA," (CvT model)"),cA.forEach(t),hYe=i(L),lm=n(L,"LI",{});var fA=s(lm);wne=n(fA,"STRONG",{});var eye=s(wne);pYe=r(eye,"data2vec-audio"),eye.forEach(t),_Ye=r(fA," \u2014 "),vR=n(fA,"A",{href:!0});var oye=s(vR);uYe=r(oye,"Data2VecAudioConfig"),oye.forEach(t),bYe=r(fA," (Data2VecAudio model)"),fA.forEach(t),vYe=i(L),im=n(L,"LI",{});var mA=s(im);Ane=n(mA,"STRONG",{});var rye=s(Ane);FYe=r(rye,"data2vec-text"),rye.forEach(t),TYe=r(mA," \u2014 "),FR=n(mA,"A",{href:!0});var tye=s(FR);MYe=r(tye,"Data2VecTextConfig"),tye.forEach(t),EYe=r(mA," (Data2VecText model)"),mA.forEach(t),CYe=i(L),dm=n(L,"LI",{});var gA=s(dm);Lne=n(gA,"STRONG",{});var aye=s(Lne);wYe=r(aye,"data2vec-vision"),aye.forEach(t),AYe=r(gA," \u2014 "),TR=n(gA,"A",{href:!0});var nye=s(TR);LYe=r(nye,"Data2VecVisionConfig"),nye.forEach(t),yYe=r(gA," (Data2VecVision model)"),gA.forEach(t),xYe=i(L),cm=n(L,"LI",{});var hA=s(cm);yne=n(hA,"STRONG",{});var sye=s(yne);$Ye=r(sye,"deberta"),sye.forEach(t),kYe=r(hA," \u2014 "),MR=n(hA,"A",{href:!0});var lye=s(MR);SYe=r(lye,"DebertaConfig"),lye.forEach(t),RYe=r(hA," (DeBERTa model)"),hA.forEach(t),PYe=i(L),fm=n(L,"LI",{});var pA=s(fm);xne=n(pA,"STRONG",{});var iye=s(xne);BYe=r(iye,"deberta-v2"),iye.forEach(t),IYe=r(pA," \u2014 "),ER=n(pA,"A",{href:!0});var dye=s(ER);NYe=r(dye,"DebertaV2Config"),dye.forEach(t),qYe=r(pA," (DeBERTa-v2 model)"),pA.forEach(t),jYe=i(L),mm=n(L,"LI",{});var _A=s(mm);$ne=n(_A,"STRONG",{});var ent=s($ne);DYe=r(ent,"decision_transformer"),ent.forEach(t),GYe=r(_A," \u2014 "),CR=n(_A,"A",{href:!0});var ont=s(CR);OYe=r(ont,"DecisionTransformerConfig"),ont.forEach(t),VYe=r(_A," (Decision Transformer model)"),_A.forEach(t),XYe=i(L),gm=n(L,"LI",{});var cye=s(gm);kne=n(cye,"STRONG",{});var rnt=s(kne);zYe=r(rnt,"deit"),rnt.forEach(t),WYe=r(cye," \u2014 "),wR=n(cye,"A",{href:!0});var tnt=s(wR);QYe=r(tnt,"DeiTConfig"),tnt.forEach(t),HYe=r(cye," (DeiT model)"),cye.forEach(t),UYe=i(L),hm=n(L,"LI",{});var fye=s(hm);Sne=n(fye,"STRONG",{});var ant=s(Sne);JYe=r(ant,"detr"),ant.forEach(t),YYe=r(fye," \u2014 "),AR=n(fye,"A",{href:!0});var nnt=s(AR);KYe=r(nnt,"DetrConfig"),nnt.forEach(t),ZYe=r(fye," (DETR model)"),fye.forEach(t),eKe=i(L),pm=n(L,"LI",{});var mye=s(pm);Rne=n(mye,"STRONG",{});var snt=s(Rne);oKe=r(snt,"distilbert"),snt.forEach(t),rKe=r(mye," \u2014 "),LR=n(mye,"A",{href:!0});var lnt=s(LR);tKe=r(lnt,"DistilBertConfig"),lnt.forEach(t),aKe=r(mye," (DistilBERT model)"),mye.forEach(t),nKe=i(L),_m=n(L,"LI",{});var gye=s(_m);Pne=n(gye,"STRONG",{});var int=s(Pne);sKe=r(int,"dpr"),int.forEach(t),lKe=r(gye," \u2014 "),yR=n(gye,"A",{href:!0});var dnt=s(yR);iKe=r(dnt,"DPRConfig"),dnt.forEach(t),dKe=r(gye," (DPR model)"),gye.forEach(t),cKe=i(L),um=n(L,"LI",{});var hye=s(um);Bne=n(hye,"STRONG",{});var cnt=s(Bne);fKe=r(cnt,"dpt"),cnt.forEach(t),mKe=r(hye," \u2014 "),xR=n(hye,"A",{href:!0});var fnt=s(xR);gKe=r(fnt,"DPTConfig"),fnt.forEach(t),hKe=r(hye," (DPT model)"),hye.forEach(t),pKe=i(L),bm=n(L,"LI",{});var pye=s(bm);Ine=n(pye,"STRONG",{});var mnt=s(Ine);_Ke=r(mnt,"electra"),mnt.forEach(t),uKe=r(pye," \u2014 "),$R=n(pye,"A",{href:!0});var gnt=s($R);bKe=r(gnt,"ElectraConfig"),gnt.forEach(t),vKe=r(pye," (ELECTRA model)"),pye.forEach(t),FKe=i(L),vm=n(L,"LI",{});var _ye=s(vm);Nne=n(_ye,"STRONG",{});var hnt=s(Nne);TKe=r(hnt,"encoder-decoder"),hnt.forEach(t),MKe=r(_ye," \u2014 "),kR=n(_ye,"A",{href:!0});var pnt=s(kR);EKe=r(pnt,"EncoderDecoderConfig"),pnt.forEach(t),CKe=r(_ye," (Encoder decoder model)"),_ye.forEach(t),wKe=i(L),Fm=n(L,"LI",{});var uye=s(Fm);qne=n(uye,"STRONG",{});var _nt=s(qne);AKe=r(_nt,"flaubert"),_nt.forEach(t),LKe=r(uye," \u2014 "),SR=n(uye,"A",{href:!0});var unt=s(SR);yKe=r(unt,"FlaubertConfig"),unt.forEach(t),xKe=r(uye," (FlauBERT model)"),uye.forEach(t),$Ke=i(L),Tm=n(L,"LI",{});var bye=s(Tm);jne=n(bye,"STRONG",{});var bnt=s(jne);kKe=r(bnt,"flava"),bnt.forEach(t),SKe=r(bye," \u2014 "),RR=n(bye,"A",{href:!0});var vnt=s(RR);RKe=r(vnt,"FlavaConfig"),vnt.forEach(t),PKe=r(bye," (FLAVA model)"),bye.forEach(t),BKe=i(L),Mm=n(L,"LI",{});var vye=s(Mm);Dne=n(vye,"STRONG",{});var Fnt=s(Dne);IKe=r(Fnt,"fnet"),Fnt.forEach(t),NKe=r(vye," \u2014 "),PR=n(vye,"A",{href:!0});var Tnt=s(PR);qKe=r(Tnt,"FNetConfig"),Tnt.forEach(t),jKe=r(vye," (FNet model)"),vye.forEach(t),DKe=i(L),Em=n(L,"LI",{});var Fye=s(Em);Gne=n(Fye,"STRONG",{});var Mnt=s(Gne);GKe=r(Mnt,"fsmt"),Mnt.forEach(t),OKe=r(Fye," \u2014 "),BR=n(Fye,"A",{href:!0});var Ent=s(BR);VKe=r(Ent,"FSMTConfig"),Ent.forEach(t),XKe=r(Fye," (FairSeq Machine-Translation model)"),Fye.forEach(t),zKe=i(L),Cm=n(L,"LI",{});var Tye=s(Cm);One=n(Tye,"STRONG",{});var Cnt=s(One);WKe=r(Cnt,"funnel"),Cnt.forEach(t),QKe=r(Tye," \u2014 "),IR=n(Tye,"A",{href:!0});var wnt=s(IR);HKe=r(wnt,"FunnelConfig"),wnt.forEach(t),UKe=r(Tye," (Funnel Transformer model)"),Tye.forEach(t),JKe=i(L),wm=n(L,"LI",{});var Mye=s(wm);Vne=n(Mye,"STRONG",{});var Ant=s(Vne);YKe=r(Ant,"glpn"),Ant.forEach(t),KKe=r(Mye," \u2014 "),NR=n(Mye,"A",{href:!0});var Lnt=s(NR);ZKe=r(Lnt,"GLPNConfig"),Lnt.forEach(t),eZe=r(Mye," (GLPN model)"),Mye.forEach(t),oZe=i(L),Am=n(L,"LI",{});var Eye=s(Am);Xne=n(Eye,"STRONG",{});var ynt=s(Xne);rZe=r(ynt,"gpt2"),ynt.forEach(t),tZe=r(Eye," \u2014 "),qR=n(Eye,"A",{href:!0});var xnt=s(qR);aZe=r(xnt,"GPT2Config"),xnt.forEach(t),nZe=r(Eye," (OpenAI GPT-2 model)"),Eye.forEach(t),sZe=i(L),Lm=n(L,"LI",{});var Cye=s(Lm);zne=n(Cye,"STRONG",{});var $nt=s(zne);lZe=r($nt,"gpt_neo"),$nt.forEach(t),iZe=r(Cye," \u2014 "),jR=n(Cye,"A",{href:!0});var knt=s(jR);dZe=r(knt,"GPTNeoConfig"),knt.forEach(t),cZe=r(Cye," (GPT Neo model)"),Cye.forEach(t),fZe=i(L),ym=n(L,"LI",{});var wye=s(ym);Wne=n(wye,"STRONG",{});var Snt=s(Wne);mZe=r(Snt,"gpt_neox"),Snt.forEach(t),gZe=r(wye," \u2014 "),DR=n(wye,"A",{href:!0});var Rnt=s(DR);hZe=r(Rnt,"GPTNeoXConfig"),Rnt.forEach(t),pZe=r(wye," (GPT NeoX model)"),wye.forEach(t),_Ze=i(L),xm=n(L,"LI",{});var Aye=s(xm);Qne=n(Aye,"STRONG",{});var Pnt=s(Qne);uZe=r(Pnt,"gptj"),Pnt.forEach(t),bZe=r(Aye," \u2014 "),GR=n(Aye,"A",{href:!0});var Bnt=s(GR);vZe=r(Bnt,"GPTJConfig"),Bnt.forEach(t),FZe=r(Aye," (GPT-J model)"),Aye.forEach(t),TZe=i(L),$m=n(L,"LI",{});var Lye=s($m);Hne=n(Lye,"STRONG",{});var Int=s(Hne);MZe=r(Int,"groupvit"),Int.forEach(t),EZe=r(Lye," \u2014 "),OR=n(Lye,"A",{href:!0});var Nnt=s(OR);CZe=r(Nnt,"GroupViTConfig"),Nnt.forEach(t),wZe=r(Lye," (GroupViT model)"),Lye.forEach(t),AZe=i(L),km=n(L,"LI",{});var yye=s(km);Une=n(yye,"STRONG",{});var qnt=s(Une);LZe=r(qnt,"hubert"),qnt.forEach(t),yZe=r(yye," \u2014 "),VR=n(yye,"A",{href:!0});var jnt=s(VR);xZe=r(jnt,"HubertConfig"),jnt.forEach(t),$Ze=r(yye," (Hubert model)"),yye.forEach(t),kZe=i(L),Sm=n(L,"LI",{});var xye=s(Sm);Jne=n(xye,"STRONG",{});var Dnt=s(Jne);SZe=r(Dnt,"ibert"),Dnt.forEach(t),RZe=r(xye," \u2014 "),XR=n(xye,"A",{href:!0});var Gnt=s(XR);PZe=r(Gnt,"IBertConfig"),Gnt.forEach(t),BZe=r(xye," (I-BERT model)"),xye.forEach(t),IZe=i(L),Rm=n(L,"LI",{});var $ye=s(Rm);Yne=n($ye,"STRONG",{});var Ont=s(Yne);NZe=r(Ont,"imagegpt"),Ont.forEach(t),qZe=r($ye," \u2014 "),zR=n($ye,"A",{href:!0});var Vnt=s(zR);jZe=r(Vnt,"ImageGPTConfig"),Vnt.forEach(t),DZe=r($ye," (ImageGPT model)"),$ye.forEach(t),GZe=i(L),Pm=n(L,"LI",{});var kye=s(Pm);Kne=n(kye,"STRONG",{});var Xnt=s(Kne);OZe=r(Xnt,"layoutlm"),Xnt.forEach(t),VZe=r(kye," \u2014 "),WR=n(kye,"A",{href:!0});var znt=s(WR);XZe=r(znt,"LayoutLMConfig"),znt.forEach(t),zZe=r(kye," (LayoutLM model)"),kye.forEach(t),WZe=i(L),Bm=n(L,"LI",{});var Sye=s(Bm);Zne=n(Sye,"STRONG",{});var Wnt=s(Zne);QZe=r(Wnt,"layoutlmv2"),Wnt.forEach(t),HZe=r(Sye," \u2014 "),QR=n(Sye,"A",{href:!0});var Qnt=s(QR);UZe=r(Qnt,"LayoutLMv2Config"),Qnt.forEach(t),JZe=r(Sye," (LayoutLMv2 model)"),Sye.forEach(t),YZe=i(L),Im=n(L,"LI",{});var Rye=s(Im);ese=n(Rye,"STRONG",{});var Hnt=s(ese);KZe=r(Hnt,"layoutlmv3"),Hnt.forEach(t),ZZe=r(Rye," \u2014 "),HR=n(Rye,"A",{href:!0});var Unt=s(HR);eeo=r(Unt,"LayoutLMv3Config"),Unt.forEach(t),oeo=r(Rye," (LayoutLMv3 model)"),Rye.forEach(t),reo=i(L),Nm=n(L,"LI",{});var Pye=s(Nm);ose=n(Pye,"STRONG",{});var Jnt=s(ose);teo=r(Jnt,"led"),Jnt.forEach(t),aeo=r(Pye," \u2014 "),UR=n(Pye,"A",{href:!0});var Ynt=s(UR);neo=r(Ynt,"LEDConfig"),Ynt.forEach(t),seo=r(Pye," (LED model)"),Pye.forEach(t),leo=i(L),qm=n(L,"LI",{});var Bye=s(qm);rse=n(Bye,"STRONG",{});var Knt=s(rse);ieo=r(Knt,"levit"),Knt.forEach(t),deo=r(Bye," \u2014 "),JR=n(Bye,"A",{href:!0});var Znt=s(JR);ceo=r(Znt,"LevitConfig"),Znt.forEach(t),feo=r(Bye," (LeViT model)"),Bye.forEach(t),meo=i(L),jm=n(L,"LI",{});var Iye=s(jm);tse=n(Iye,"STRONG",{});var est=s(tse);geo=r(est,"longformer"),est.forEach(t),heo=r(Iye," \u2014 "),YR=n(Iye,"A",{href:!0});var ost=s(YR);peo=r(ost,"LongformerConfig"),ost.forEach(t),_eo=r(Iye," (Longformer model)"),Iye.forEach(t),ueo=i(L),Dm=n(L,"LI",{});var Nye=s(Dm);ase=n(Nye,"STRONG",{});var rst=s(ase);beo=r(rst,"longt5"),rst.forEach(t),veo=r(Nye," \u2014 "),KR=n(Nye,"A",{href:!0});var tst=s(KR);Feo=r(tst,"LongT5Config"),tst.forEach(t),Teo=r(Nye," (LongT5 model)"),Nye.forEach(t),Meo=i(L),Gm=n(L,"LI",{});var qye=s(Gm);nse=n(qye,"STRONG",{});var ast=s(nse);Eeo=r(ast,"luke"),ast.forEach(t),Ceo=r(qye," \u2014 "),ZR=n(qye,"A",{href:!0});var nst=s(ZR);weo=r(nst,"LukeConfig"),nst.forEach(t),Aeo=r(qye," (LUKE model)"),qye.forEach(t),Leo=i(L),Om=n(L,"LI",{});var jye=s(Om);sse=n(jye,"STRONG",{});var sst=s(sse);yeo=r(sst,"lxmert"),sst.forEach(t),xeo=r(jye," \u2014 "),eP=n(jye,"A",{href:!0});var lst=s(eP);$eo=r(lst,"LxmertConfig"),lst.forEach(t),keo=r(jye," (LXMERT model)"),jye.forEach(t),Seo=i(L),Vm=n(L,"LI",{});var Dye=s(Vm);lse=n(Dye,"STRONG",{});var ist=s(lse);Reo=r(ist,"m2m_100"),ist.forEach(t),Peo=r(Dye," \u2014 "),oP=n(Dye,"A",{href:!0});var dst=s(oP);Beo=r(dst,"M2M100Config"),dst.forEach(t),Ieo=r(Dye," (M2M100 model)"),Dye.forEach(t),Neo=i(L),Xm=n(L,"LI",{});var Gye=s(Xm);ise=n(Gye,"STRONG",{});var cst=s(ise);qeo=r(cst,"marian"),cst.forEach(t),jeo=r(Gye," \u2014 "),rP=n(Gye,"A",{href:!0});var fst=s(rP);Deo=r(fst,"MarianConfig"),fst.forEach(t),Geo=r(Gye," (Marian model)"),Gye.forEach(t),Oeo=i(L),zm=n(L,"LI",{});var Oye=s(zm);dse=n(Oye,"STRONG",{});var mst=s(dse);Veo=r(mst,"maskformer"),mst.forEach(t),Xeo=r(Oye," \u2014 "),tP=n(Oye,"A",{href:!0});var gst=s(tP);zeo=r(gst,"MaskFormerConfig"),gst.forEach(t),Weo=r(Oye," (MaskFormer model)"),Oye.forEach(t),Qeo=i(L),Wm=n(L,"LI",{});var Vye=s(Wm);cse=n(Vye,"STRONG",{});var hst=s(cse);Heo=r(hst,"mbart"),hst.forEach(t),Ueo=r(Vye," \u2014 "),aP=n(Vye,"A",{href:!0});var pst=s(aP);Jeo=r(pst,"MBartConfig"),pst.forEach(t),Yeo=r(Vye," (mBART model)"),Vye.forEach(t),Keo=i(L),Qm=n(L,"LI",{});var Xye=s(Qm);fse=n(Xye,"STRONG",{});var _st=s(fse);Zeo=r(_st,"mctct"),_st.forEach(t),eoo=r(Xye," \u2014 "),nP=n(Xye,"A",{href:!0});var ust=s(nP);ooo=r(ust,"MCTCTConfig"),ust.forEach(t),roo=r(Xye," (M-CTC-T model)"),Xye.forEach(t),too=i(L),Hm=n(L,"LI",{});var zye=s(Hm);mse=n(zye,"STRONG",{});var bst=s(mse);aoo=r(bst,"megatron-bert"),bst.forEach(t),noo=r(zye," \u2014 "),sP=n(zye,"A",{href:!0});var vst=s(sP);soo=r(vst,"MegatronBertConfig"),vst.forEach(t),loo=r(zye," (Megatron-BERT model)"),zye.forEach(t),ioo=i(L),Um=n(L,"LI",{});var Wye=s(Um);gse=n(Wye,"STRONG",{});var Fst=s(gse);doo=r(Fst,"mobilebert"),Fst.forEach(t),coo=r(Wye," \u2014 "),lP=n(Wye,"A",{href:!0});var Tst=s(lP);foo=r(Tst,"MobileBertConfig"),Tst.forEach(t),moo=r(Wye," (MobileBERT model)"),Wye.forEach(t),goo=i(L),Jm=n(L,"LI",{});var Qye=s(Jm);hse=n(Qye,"STRONG",{});var Mst=s(hse);hoo=r(Mst,"mobilevit"),Mst.forEach(t),poo=r(Qye," \u2014 "),iP=n(Qye,"A",{href:!0});var Est=s(iP);_oo=r(Est,"MobileViTConfig"),Est.forEach(t),uoo=r(Qye," (MobileViT model)"),Qye.forEach(t),boo=i(L),Ym=n(L,"LI",{});var Hye=s(Ym);pse=n(Hye,"STRONG",{});var Cst=s(pse);voo=r(Cst,"mpnet"),Cst.forEach(t),Foo=r(Hye," \u2014 "),dP=n(Hye,"A",{href:!0});var wst=s(dP);Too=r(wst,"MPNetConfig"),wst.forEach(t),Moo=r(Hye," (MPNet model)"),Hye.forEach(t),Eoo=i(L),Km=n(L,"LI",{});var Uye=s(Km);_se=n(Uye,"STRONG",{});var Ast=s(_se);Coo=r(Ast,"mt5"),Ast.forEach(t),woo=r(Uye," \u2014 "),cP=n(Uye,"A",{href:!0});var Lst=s(cP);Aoo=r(Lst,"MT5Config"),Lst.forEach(t),Loo=r(Uye," (MT5 model)"),Uye.forEach(t),yoo=i(L),Zm=n(L,"LI",{});var Jye=s(Zm);use=n(Jye,"STRONG",{});var yst=s(use);xoo=r(yst,"mvp"),yst.forEach(t),$oo=r(Jye," \u2014 "),fP=n(Jye,"A",{href:!0});var xst=s(fP);koo=r(xst,"MvpConfig"),xst.forEach(t),Soo=r(Jye," (MVP model)"),Jye.forEach(t),Roo=i(L),eg=n(L,"LI",{});var Yye=s(eg);bse=n(Yye,"STRONG",{});var $st=s(bse);Poo=r($st,"nezha"),$st.forEach(t),Boo=r(Yye," \u2014 "),mP=n(Yye,"A",{href:!0});var kst=s(mP);Ioo=r(kst,"NezhaConfig"),kst.forEach(t),Noo=r(Yye," (Nezha model)"),Yye.forEach(t),qoo=i(L),og=n(L,"LI",{});var Kye=s(og);vse=n(Kye,"STRONG",{});var Sst=s(vse);joo=r(Sst,"nystromformer"),Sst.forEach(t),Doo=r(Kye," \u2014 "),gP=n(Kye,"A",{href:!0});var Rst=s(gP);Goo=r(Rst,"NystromformerConfig"),Rst.forEach(t),Ooo=r(Kye," (Nystr\xF6mformer model)"),Kye.forEach(t),Voo=i(L),rg=n(L,"LI",{});var Zye=s(rg);Fse=n(Zye,"STRONG",{});var Pst=s(Fse);Xoo=r(Pst,"openai-gpt"),Pst.forEach(t),zoo=r(Zye," \u2014 "),hP=n(Zye,"A",{href:!0});var Bst=s(hP);Woo=r(Bst,"OpenAIGPTConfig"),Bst.forEach(t),Qoo=r(Zye," (OpenAI GPT model)"),Zye.forEach(t),Hoo=i(L),tg=n(L,"LI",{});var e8e=s(tg);Tse=n(e8e,"STRONG",{});var Ist=s(Tse);Uoo=r(Ist,"opt"),Ist.forEach(t),Joo=r(e8e," \u2014 "),pP=n(e8e,"A",{href:!0});var Nst=s(pP);Yoo=r(Nst,"OPTConfig"),Nst.forEach(t),Koo=r(e8e," (OPT model)"),e8e.forEach(t),Zoo=i(L),ag=n(L,"LI",{});var o8e=s(ag);Mse=n(o8e,"STRONG",{});var qst=s(Mse);ero=r(qst,"owlvit"),qst.forEach(t),oro=r(o8e," \u2014 "),_P=n(o8e,"A",{href:!0});var jst=s(_P);rro=r(jst,"OwlViTConfig"),jst.forEach(t),tro=r(o8e," (OWL-ViT model)"),o8e.forEach(t),aro=i(L),ng=n(L,"LI",{});var r8e=s(ng);Ese=n(r8e,"STRONG",{});var Dst=s(Ese);nro=r(Dst,"pegasus"),Dst.forEach(t),sro=r(r8e," \u2014 "),uP=n(r8e,"A",{href:!0});var Gst=s(uP);lro=r(Gst,"PegasusConfig"),Gst.forEach(t),iro=r(r8e," (Pegasus model)"),r8e.forEach(t),dro=i(L),sg=n(L,"LI",{});var t8e=s(sg);Cse=n(t8e,"STRONG",{});var Ost=s(Cse);cro=r(Ost,"perceiver"),Ost.forEach(t),fro=r(t8e," \u2014 "),bP=n(t8e,"A",{href:!0});var Vst=s(bP);mro=r(Vst,"PerceiverConfig"),Vst.forEach(t),gro=r(t8e," (Perceiver model)"),t8e.forEach(t),hro=i(L),lg=n(L,"LI",{});var a8e=s(lg);wse=n(a8e,"STRONG",{});var Xst=s(wse);pro=r(Xst,"plbart"),Xst.forEach(t),_ro=r(a8e," \u2014 "),vP=n(a8e,"A",{href:!0});var zst=s(vP);uro=r(zst,"PLBartConfig"),zst.forEach(t),bro=r(a8e," (PLBart model)"),a8e.forEach(t),vro=i(L),ig=n(L,"LI",{});var n8e=s(ig);Ase=n(n8e,"STRONG",{});var Wst=s(Ase);Fro=r(Wst,"poolformer"),Wst.forEach(t),Tro=r(n8e," \u2014 "),FP=n(n8e,"A",{href:!0});var Qst=s(FP);Mro=r(Qst,"PoolFormerConfig"),Qst.forEach(t),Ero=r(n8e," (PoolFormer model)"),n8e.forEach(t),Cro=i(L),dg=n(L,"LI",{});var s8e=s(dg);Lse=n(s8e,"STRONG",{});var Hst=s(Lse);wro=r(Hst,"prophetnet"),Hst.forEach(t),Aro=r(s8e," \u2014 "),TP=n(s8e,"A",{href:!0});var Ust=s(TP);Lro=r(Ust,"ProphetNetConfig"),Ust.forEach(t),yro=r(s8e," (ProphetNet model)"),s8e.forEach(t),xro=i(L),cg=n(L,"LI",{});var l8e=s(cg);yse=n(l8e,"STRONG",{});var Jst=s(yse);$ro=r(Jst,"qdqbert"),Jst.forEach(t),kro=r(l8e," \u2014 "),MP=n(l8e,"A",{href:!0});var Yst=s(MP);Sro=r(Yst,"QDQBertConfig"),Yst.forEach(t),Rro=r(l8e," (QDQBert model)"),l8e.forEach(t),Pro=i(L),fg=n(L,"LI",{});var i8e=s(fg);xse=n(i8e,"STRONG",{});var Kst=s(xse);Bro=r(Kst,"rag"),Kst.forEach(t),Iro=r(i8e," \u2014 "),EP=n(i8e,"A",{href:!0});var Zst=s(EP);Nro=r(Zst,"RagConfig"),Zst.forEach(t),qro=r(i8e," (RAG model)"),i8e.forEach(t),jro=i(L),mg=n(L,"LI",{});var d8e=s(mg);$se=n(d8e,"STRONG",{});var elt=s($se);Dro=r(elt,"realm"),elt.forEach(t),Gro=r(d8e," \u2014 "),CP=n(d8e,"A",{href:!0});var olt=s(CP);Oro=r(olt,"RealmConfig"),olt.forEach(t),Vro=r(d8e," (REALM model)"),d8e.forEach(t),Xro=i(L),gg=n(L,"LI",{});var c8e=s(gg);kse=n(c8e,"STRONG",{});var rlt=s(kse);zro=r(rlt,"reformer"),rlt.forEach(t),Wro=r(c8e," \u2014 "),wP=n(c8e,"A",{href:!0});var tlt=s(wP);Qro=r(tlt,"ReformerConfig"),tlt.forEach(t),Hro=r(c8e," (Reformer model)"),c8e.forEach(t),Uro=i(L),hg=n(L,"LI",{});var f8e=s(hg);Sse=n(f8e,"STRONG",{});var alt=s(Sse);Jro=r(alt,"regnet"),alt.forEach(t),Yro=r(f8e," \u2014 "),AP=n(f8e,"A",{href:!0});var nlt=s(AP);Kro=r(nlt,"RegNetConfig"),nlt.forEach(t),Zro=r(f8e," (RegNet model)"),f8e.forEach(t),eto=i(L),pg=n(L,"LI",{});var m8e=s(pg);Rse=n(m8e,"STRONG",{});var slt=s(Rse);oto=r(slt,"rembert"),slt.forEach(t),rto=r(m8e," \u2014 "),LP=n(m8e,"A",{href:!0});var llt=s(LP);tto=r(llt,"RemBertConfig"),llt.forEach(t),ato=r(m8e," (RemBERT model)"),m8e.forEach(t),nto=i(L),_g=n(L,"LI",{});var g8e=s(_g);Pse=n(g8e,"STRONG",{});var ilt=s(Pse);sto=r(ilt,"resnet"),ilt.forEach(t),lto=r(g8e," \u2014 "),yP=n(g8e,"A",{href:!0});var dlt=s(yP);ito=r(dlt,"ResNetConfig"),dlt.forEach(t),dto=r(g8e," (ResNet model)"),g8e.forEach(t),cto=i(L),ug=n(L,"LI",{});var h8e=s(ug);Bse=n(h8e,"STRONG",{});var clt=s(Bse);fto=r(clt,"retribert"),clt.forEach(t),mto=r(h8e," \u2014 "),xP=n(h8e,"A",{href:!0});var flt=s(xP);gto=r(flt,"RetriBertConfig"),flt.forEach(t),hto=r(h8e," (RetriBERT model)"),h8e.forEach(t),pto=i(L),bg=n(L,"LI",{});var p8e=s(bg);Ise=n(p8e,"STRONG",{});var mlt=s(Ise);_to=r(mlt,"roberta"),mlt.forEach(t),uto=r(p8e," \u2014 "),$P=n(p8e,"A",{href:!0});var glt=s($P);bto=r(glt,"RobertaConfig"),glt.forEach(t),vto=r(p8e," (RoBERTa model)"),p8e.forEach(t),Fto=i(L),vg=n(L,"LI",{});var _8e=s(vg);Nse=n(_8e,"STRONG",{});var hlt=s(Nse);Tto=r(hlt,"roformer"),hlt.forEach(t),Mto=r(_8e," \u2014 "),kP=n(_8e,"A",{href:!0});var plt=s(kP);Eto=r(plt,"RoFormerConfig"),plt.forEach(t),Cto=r(_8e," (RoFormer model)"),_8e.forEach(t),wto=i(L),Fg=n(L,"LI",{});var u8e=s(Fg);qse=n(u8e,"STRONG",{});var _lt=s(qse);Ato=r(_lt,"segformer"),_lt.forEach(t),Lto=r(u8e," \u2014 "),SP=n(u8e,"A",{href:!0});var ult=s(SP);yto=r(ult,"SegformerConfig"),ult.forEach(t),xto=r(u8e," (SegFormer model)"),u8e.forEach(t),$to=i(L),Tg=n(L,"LI",{});var b8e=s(Tg);jse=n(b8e,"STRONG",{});var blt=s(jse);kto=r(blt,"sew"),blt.forEach(t),Sto=r(b8e," \u2014 "),RP=n(b8e,"A",{href:!0});var vlt=s(RP);Rto=r(vlt,"SEWConfig"),vlt.forEach(t),Pto=r(b8e," (SEW model)"),b8e.forEach(t),Bto=i(L),Mg=n(L,"LI",{});var v8e=s(Mg);Dse=n(v8e,"STRONG",{});var Flt=s(Dse);Ito=r(Flt,"sew-d"),Flt.forEach(t),Nto=r(v8e," \u2014 "),PP=n(v8e,"A",{href:!0});var Tlt=s(PP);qto=r(Tlt,"SEWDConfig"),Tlt.forEach(t),jto=r(v8e," (SEW-D model)"),v8e.forEach(t),Dto=i(L),Eg=n(L,"LI",{});var F8e=s(Eg);Gse=n(F8e,"STRONG",{});var Mlt=s(Gse);Gto=r(Mlt,"speech-encoder-decoder"),Mlt.forEach(t),Oto=r(F8e," \u2014 "),BP=n(F8e,"A",{href:!0});var Elt=s(BP);Vto=r(Elt,"SpeechEncoderDecoderConfig"),Elt.forEach(t),Xto=r(F8e," (Speech Encoder decoder model)"),F8e.forEach(t),zto=i(L),Cg=n(L,"LI",{});var T8e=s(Cg);Ose=n(T8e,"STRONG",{});var Clt=s(Ose);Wto=r(Clt,"speech_to_text"),Clt.forEach(t),Qto=r(T8e," \u2014 "),IP=n(T8e,"A",{href:!0});var wlt=s(IP);Hto=r(wlt,"Speech2TextConfig"),wlt.forEach(t),Uto=r(T8e," (Speech2Text model)"),T8e.forEach(t),Jto=i(L),wg=n(L,"LI",{});var M8e=s(wg);Vse=n(M8e,"STRONG",{});var Alt=s(Vse);Yto=r(Alt,"speech_to_text_2"),Alt.forEach(t),Kto=r(M8e," \u2014 "),NP=n(M8e,"A",{href:!0});var Llt=s(NP);Zto=r(Llt,"Speech2Text2Config"),Llt.forEach(t),eao=r(M8e," (Speech2Text2 model)"),M8e.forEach(t),oao=i(L),Ag=n(L,"LI",{});var E8e=s(Ag);Xse=n(E8e,"STRONG",{});var ylt=s(Xse);rao=r(ylt,"splinter"),ylt.forEach(t),tao=r(E8e," \u2014 "),qP=n(E8e,"A",{href:!0});var xlt=s(qP);aao=r(xlt,"SplinterConfig"),xlt.forEach(t),nao=r(E8e," (Splinter model)"),E8e.forEach(t),sao=i(L),Lg=n(L,"LI",{});var C8e=s(Lg);zse=n(C8e,"STRONG",{});var $lt=s(zse);lao=r($lt,"squeezebert"),$lt.forEach(t),iao=r(C8e," \u2014 "),jP=n(C8e,"A",{href:!0});var klt=s(jP);dao=r(klt,"SqueezeBertConfig"),klt.forEach(t),cao=r(C8e," (SqueezeBERT model)"),C8e.forEach(t),fao=i(L),yg=n(L,"LI",{});var w8e=s(yg);Wse=n(w8e,"STRONG",{});var Slt=s(Wse);mao=r(Slt,"swin"),Slt.forEach(t),gao=r(w8e," \u2014 "),DP=n(w8e,"A",{href:!0});var Rlt=s(DP);hao=r(Rlt,"SwinConfig"),Rlt.forEach(t),pao=r(w8e," (Swin Transformer model)"),w8e.forEach(t),_ao=i(L),xg=n(L,"LI",{});var A8e=s(xg);Qse=n(A8e,"STRONG",{});var Plt=s(Qse);uao=r(Plt,"t5"),Plt.forEach(t),bao=r(A8e," \u2014 "),GP=n(A8e,"A",{href:!0});var Blt=s(GP);vao=r(Blt,"T5Config"),Blt.forEach(t),Fao=r(A8e," (T5 model)"),A8e.forEach(t),Tao=i(L),$g=n(L,"LI",{});var L8e=s($g);Hse=n(L8e,"STRONG",{});var Ilt=s(Hse);Mao=r(Ilt,"tapas"),Ilt.forEach(t),Eao=r(L8e," \u2014 "),OP=n(L8e,"A",{href:!0});var Nlt=s(OP);Cao=r(Nlt,"TapasConfig"),Nlt.forEach(t),wao=r(L8e," (TAPAS model)"),L8e.forEach(t),Aao=i(L),kg=n(L,"LI",{});var y8e=s(kg);Use=n(y8e,"STRONG",{});var qlt=s(Use);Lao=r(qlt,"trajectory_transformer"),qlt.forEach(t),yao=r(y8e," \u2014 "),VP=n(y8e,"A",{href:!0});var jlt=s(VP);xao=r(jlt,"TrajectoryTransformerConfig"),jlt.forEach(t),$ao=r(y8e," (Trajectory Transformer model)"),y8e.forEach(t),kao=i(L),Sg=n(L,"LI",{});var x8e=s(Sg);Jse=n(x8e,"STRONG",{});var Dlt=s(Jse);Sao=r(Dlt,"transfo-xl"),Dlt.forEach(t),Rao=r(x8e," \u2014 "),XP=n(x8e,"A",{href:!0});var Glt=s(XP);Pao=r(Glt,"TransfoXLConfig"),Glt.forEach(t),Bao=r(x8e," (Transformer-XL model)"),x8e.forEach(t),Iao=i(L),Rg=n(L,"LI",{});var $8e=s(Rg);Yse=n($8e,"STRONG",{});var Olt=s(Yse);Nao=r(Olt,"trocr"),Olt.forEach(t),qao=r($8e," \u2014 "),zP=n($8e,"A",{href:!0});var Vlt=s(zP);jao=r(Vlt,"TrOCRConfig"),Vlt.forEach(t),Dao=r($8e," (TrOCR model)"),$8e.forEach(t),Gao=i(L),Pg=n(L,"LI",{});var k8e=s(Pg);Kse=n(k8e,"STRONG",{});var Xlt=s(Kse);Oao=r(Xlt,"unispeech"),Xlt.forEach(t),Vao=r(k8e," \u2014 "),WP=n(k8e,"A",{href:!0});var zlt=s(WP);Xao=r(zlt,"UniSpeechConfig"),zlt.forEach(t),zao=r(k8e," (UniSpeech model)"),k8e.forEach(t),Wao=i(L),Bg=n(L,"LI",{});var S8e=s(Bg);Zse=n(S8e,"STRONG",{});var Wlt=s(Zse);Qao=r(Wlt,"unispeech-sat"),Wlt.forEach(t),Hao=r(S8e," \u2014 "),QP=n(S8e,"A",{href:!0});var Qlt=s(QP);Uao=r(Qlt,"UniSpeechSatConfig"),Qlt.forEach(t),Jao=r(S8e," (UniSpeechSat model)"),S8e.forEach(t),Yao=i(L),Ig=n(L,"LI",{});var R8e=s(Ig);ele=n(R8e,"STRONG",{});var Hlt=s(ele);Kao=r(Hlt,"van"),Hlt.forEach(t),Zao=r(R8e," \u2014 "),HP=n(R8e,"A",{href:!0});var Ult=s(HP);eno=r(Ult,"VanConfig"),Ult.forEach(t),ono=r(R8e," (VAN model)"),R8e.forEach(t),rno=i(L),Ng=n(L,"LI",{});var P8e=s(Ng);ole=n(P8e,"STRONG",{});var Jlt=s(ole);tno=r(Jlt,"vilt"),Jlt.forEach(t),ano=r(P8e," \u2014 "),UP=n(P8e,"A",{href:!0});var Ylt=s(UP);nno=r(Ylt,"ViltConfig"),Ylt.forEach(t),sno=r(P8e," (ViLT model)"),P8e.forEach(t),lno=i(L),qg=n(L,"LI",{});var B8e=s(qg);rle=n(B8e,"STRONG",{});var Klt=s(rle);ino=r(Klt,"vision-encoder-decoder"),Klt.forEach(t),dno=r(B8e," \u2014 "),JP=n(B8e,"A",{href:!0});var Zlt=s(JP);cno=r(Zlt,"VisionEncoderDecoderConfig"),Zlt.forEach(t),fno=r(B8e," (Vision Encoder decoder model)"),B8e.forEach(t),mno=i(L),jg=n(L,"LI",{});var I8e=s(jg);tle=n(I8e,"STRONG",{});var eit=s(tle);gno=r(eit,"vision-text-dual-encoder"),eit.forEach(t),hno=r(I8e," \u2014 "),YP=n(I8e,"A",{href:!0});var oit=s(YP);pno=r(oit,"VisionTextDualEncoderConfig"),oit.forEach(t),_no=r(I8e," (VisionTextDualEncoder model)"),I8e.forEach(t),uno=i(L),Dg=n(L,"LI",{});var N8e=s(Dg);ale=n(N8e,"STRONG",{});var rit=s(ale);bno=r(rit,"visual_bert"),rit.forEach(t),vno=r(N8e," \u2014 "),KP=n(N8e,"A",{href:!0});var tit=s(KP);Fno=r(tit,"VisualBertConfig"),tit.forEach(t),Tno=r(N8e," (VisualBERT model)"),N8e.forEach(t),Mno=i(L),Gg=n(L,"LI",{});var q8e=s(Gg);nle=n(q8e,"STRONG",{});var ait=s(nle);Eno=r(ait,"vit"),ait.forEach(t),Cno=r(q8e," \u2014 "),ZP=n(q8e,"A",{href:!0});var nit=s(ZP);wno=r(nit,"ViTConfig"),nit.forEach(t),Ano=r(q8e," (ViT model)"),q8e.forEach(t),Lno=i(L),Og=n(L,"LI",{});var j8e=s(Og);sle=n(j8e,"STRONG",{});var sit=s(sle);yno=r(sit,"vit_mae"),sit.forEach(t),xno=r(j8e," \u2014 "),eB=n(j8e,"A",{href:!0});var lit=s(eB);$no=r(lit,"ViTMAEConfig"),lit.forEach(t),kno=r(j8e," (ViTMAE model)"),j8e.forEach(t),Sno=i(L),Vg=n(L,"LI",{});var D8e=s(Vg);lle=n(D8e,"STRONG",{});var iit=s(lle);Rno=r(iit,"wav2vec2"),iit.forEach(t),Pno=r(D8e," \u2014 "),oB=n(D8e,"A",{href:!0});var dit=s(oB);Bno=r(dit,"Wav2Vec2Config"),dit.forEach(t),Ino=r(D8e," (Wav2Vec2 model)"),D8e.forEach(t),Nno=i(L),Xg=n(L,"LI",{});var G8e=s(Xg);ile=n(G8e,"STRONG",{});var cit=s(ile);qno=r(cit,"wav2vec2-conformer"),cit.forEach(t),jno=r(G8e," \u2014 "),rB=n(G8e,"A",{href:!0});var fit=s(rB);Dno=r(fit,"Wav2Vec2ConformerConfig"),fit.forEach(t),Gno=r(G8e," (Wav2Vec2-Conformer model)"),G8e.forEach(t),Ono=i(L),zg=n(L,"LI",{});var O8e=s(zg);dle=n(O8e,"STRONG",{});var mit=s(dle);Vno=r(mit,"wavlm"),mit.forEach(t),Xno=r(O8e," \u2014 "),tB=n(O8e,"A",{href:!0});var git=s(tB);zno=r(git,"WavLMConfig"),git.forEach(t),Wno=r(O8e," (WavLM model)"),O8e.forEach(t),Qno=i(L),Wg=n(L,"LI",{});var V8e=s(Wg);cle=n(V8e,"STRONG",{});var hit=s(cle);Hno=r(hit,"xglm"),hit.forEach(t),Uno=r(V8e," \u2014 "),aB=n(V8e,"A",{href:!0});var pit=s(aB);Jno=r(pit,"XGLMConfig"),pit.forEach(t),Yno=r(V8e," (XGLM model)"),V8e.forEach(t),Kno=i(L),Qg=n(L,"LI",{});var X8e=s(Qg);fle=n(X8e,"STRONG",{});var _it=s(fle);Zno=r(_it,"xlm"),_it.forEach(t),eso=r(X8e," \u2014 "),nB=n(X8e,"A",{href:!0});var uit=s(nB);oso=r(uit,"XLMConfig"),uit.forEach(t),rso=r(X8e," (XLM model)"),X8e.forEach(t),tso=i(L),Hg=n(L,"LI",{});var z8e=s(Hg);mle=n(z8e,"STRONG",{});var bit=s(mle);aso=r(bit,"xlm-prophetnet"),bit.forEach(t),nso=r(z8e," \u2014 "),sB=n(z8e,"A",{href:!0});var vit=s(sB);sso=r(vit,"XLMProphetNetConfig"),vit.forEach(t),lso=r(z8e," (XLM-ProphetNet model)"),z8e.forEach(t),iso=i(L),Ug=n(L,"LI",{});var W8e=s(Ug);gle=n(W8e,"STRONG",{});var Fit=s(gle);dso=r(Fit,"xlm-roberta"),Fit.forEach(t),cso=r(W8e," \u2014 "),lB=n(W8e,"A",{href:!0});var Tit=s(lB);fso=r(Tit,"XLMRobertaConfig"),Tit.forEach(t),mso=r(W8e," (XLM-RoBERTa model)"),W8e.forEach(t),gso=i(L),Jg=n(L,"LI",{});var Q8e=s(Jg);hle=n(Q8e,"STRONG",{});var Mit=s(hle);hso=r(Mit,"xlm-roberta-xl"),Mit.forEach(t),pso=r(Q8e," \u2014 "),iB=n(Q8e,"A",{href:!0});var Eit=s(iB);_so=r(Eit,"XLMRobertaXLConfig"),Eit.forEach(t),uso=r(Q8e," (XLM-RoBERTa-XL model)"),Q8e.forEach(t),bso=i(L),Yg=n(L,"LI",{});var H8e=s(Yg);ple=n(H8e,"STRONG",{});var Cit=s(ple);vso=r(Cit,"xlnet"),Cit.forEach(t),Fso=r(H8e," \u2014 "),dB=n(H8e,"A",{href:!0});var wit=s(dB);Tso=r(wit,"XLNetConfig"),wit.forEach(t),Mso=r(H8e," (XLNet model)"),H8e.forEach(t),Eso=i(L),Kg=n(L,"LI",{});var U8e=s(Kg);_le=n(U8e,"STRONG",{});var Ait=s(_le);Cso=r(Ait,"yolos"),Ait.forEach(t),wso=r(U8e," \u2014 "),cB=n(U8e,"A",{href:!0});var Lit=s(cB);Aso=r(Lit,"YolosConfig"),Lit.forEach(t),Lso=r(U8e," (YOLOS model)"),U8e.forEach(t),yso=i(L),Zg=n(L,"LI",{});var J8e=s(Zg);ule=n(J8e,"STRONG",{});var yit=s(ule);xso=r(yit,"yoso"),yit.forEach(t),$so=r(J8e," \u2014 "),fB=n(J8e,"A",{href:!0});var xit=s(fB);kso=r(xit,"YosoConfig"),xit.forEach(t),Sso=r(J8e," (YOSO model)"),J8e.forEach(t),L.forEach(t),Rso=i(st),T(eh.$$.fragment,st),st.forEach(t),Pso=i(nt),oh=n(nt,"DIV",{class:!0});var UWe=s(oh);T(My.$$.fragment,UWe),Bso=i(UWe),ble=n(UWe,"P",{});var $it=s(ble);Iso=r($it,"Register a new configuration for this class."),$it.forEach(t),UWe.forEach(t),nt.forEach(t),JXe=i(f),ji=n(f,"H2",{class:!0});var JWe=s(ji);rh=n(JWe,"A",{id:!0,class:!0,href:!0});var kit=s(rh);vle=n(kit,"SPAN",{});var Sit=s(vle);T(Ey.$$.fragment,Sit),Sit.forEach(t),kit.forEach(t),Nso=i(JWe),Fle=n(JWe,"SPAN",{});var Rit=s(Fle);qso=r(Rit,"AutoTokenizer"),Rit.forEach(t),JWe.forEach(t),YXe=i(f),yo=n(f,"DIV",{class:!0});var el=s(yo);T(Cy.$$.fragment,el),jso=i(el),wy=n(el,"P",{});var YWe=s(wy);Dso=r(YWe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),mB=n(YWe,"A",{href:!0});var Pit=s(mB);Gso=r(Pit,"AutoTokenizer.from_pretrained()"),Pit.forEach(t),Oso=r(YWe," class method."),YWe.forEach(t),Vso=i(el),Ay=n(el,"P",{});var KWe=s(Ay);Xso=r(KWe,"This class cannot be instantiated directly using "),Tle=n(KWe,"CODE",{});var Bit=s(Tle);zso=r(Bit,"__init__()"),Bit.forEach(t),Wso=r(KWe," (throws an error)."),KWe.forEach(t),Qso=i(el),xr=n(el,"DIV",{class:!0});var ol=s(xr);T(Ly.$$.fragment,ol),Hso=i(ol),Mle=n(ol,"P",{});var Iit=s(Mle);Uso=r(Iit,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Iit.forEach(t),Jso=i(ol),Pa=n(ol,"P",{});var uA=s(Pa);Yso=r(uA,"The tokenizer class to instantiate is selected based on the "),Ele=n(uA,"CODE",{});var Nit=s(Ele);Kso=r(Nit,"model_type"),Nit.forEach(t),Zso=r(uA,` property of the config object (either
passed as an argument or loaded from `),Cle=n(uA,"CODE",{});var qit=s(Cle);elo=r(qit,"pretrained_model_name_or_path"),qit.forEach(t),olo=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wle=n(uA,"CODE",{});var jit=s(wle);rlo=r(jit,"pretrained_model_name_or_path"),jit.forEach(t),tlo=r(uA,":"),uA.forEach(t),alo=i(ol),k=n(ol,"UL",{});var S=s(k);jn=n(S,"LI",{});var Rk=s(jn);Ale=n(Rk,"STRONG",{});var Dit=s(Ale);nlo=r(Dit,"albert"),Dit.forEach(t),slo=r(Rk," \u2014 "),gB=n(Rk,"A",{href:!0});var Git=s(gB);llo=r(Git,"AlbertTokenizer"),Git.forEach(t),ilo=r(Rk," or "),hB=n(Rk,"A",{href:!0});var Oit=s(hB);dlo=r(Oit,"AlbertTokenizerFast"),Oit.forEach(t),clo=r(Rk," (ALBERT model)"),Rk.forEach(t),flo=i(S),Dn=n(S,"LI",{});var Pk=s(Dn);Lle=n(Pk,"STRONG",{});var Vit=s(Lle);mlo=r(Vit,"bart"),Vit.forEach(t),glo=r(Pk," \u2014 "),pB=n(Pk,"A",{href:!0});var Xit=s(pB);hlo=r(Xit,"BartTokenizer"),Xit.forEach(t),plo=r(Pk," or "),_B=n(Pk,"A",{href:!0});var zit=s(_B);_lo=r(zit,"BartTokenizerFast"),zit.forEach(t),ulo=r(Pk," (BART model)"),Pk.forEach(t),blo=i(S),Gn=n(S,"LI",{});var Bk=s(Gn);yle=n(Bk,"STRONG",{});var Wit=s(yle);vlo=r(Wit,"barthez"),Wit.forEach(t),Flo=r(Bk," \u2014 "),uB=n(Bk,"A",{href:!0});var Qit=s(uB);Tlo=r(Qit,"BarthezTokenizer"),Qit.forEach(t),Mlo=r(Bk," or "),bB=n(Bk,"A",{href:!0});var Hit=s(bB);Elo=r(Hit,"BarthezTokenizerFast"),Hit.forEach(t),Clo=r(Bk," (BARThez model)"),Bk.forEach(t),wlo=i(S),th=n(S,"LI",{});var Y8e=s(th);xle=n(Y8e,"STRONG",{});var Uit=s(xle);Alo=r(Uit,"bartpho"),Uit.forEach(t),Llo=r(Y8e," \u2014 "),vB=n(Y8e,"A",{href:!0});var Jit=s(vB);ylo=r(Jit,"BartphoTokenizer"),Jit.forEach(t),xlo=r(Y8e," (BARTpho model)"),Y8e.forEach(t),$lo=i(S),On=n(S,"LI",{});var Ik=s(On);$le=n(Ik,"STRONG",{});var Yit=s($le);klo=r(Yit,"bert"),Yit.forEach(t),Slo=r(Ik," \u2014 "),FB=n(Ik,"A",{href:!0});var Kit=s(FB);Rlo=r(Kit,"BertTokenizer"),Kit.forEach(t),Plo=r(Ik," or "),TB=n(Ik,"A",{href:!0});var Zit=s(TB);Blo=r(Zit,"BertTokenizerFast"),Zit.forEach(t),Ilo=r(Ik," (BERT model)"),Ik.forEach(t),Nlo=i(S),ah=n(S,"LI",{});var K8e=s(ah);kle=n(K8e,"STRONG",{});var edt=s(kle);qlo=r(edt,"bert-generation"),edt.forEach(t),jlo=r(K8e," \u2014 "),MB=n(K8e,"A",{href:!0});var odt=s(MB);Dlo=r(odt,"BertGenerationTokenizer"),odt.forEach(t),Glo=r(K8e," (Bert Generation model)"),K8e.forEach(t),Olo=i(S),nh=n(S,"LI",{});var Z8e=s(nh);Sle=n(Z8e,"STRONG",{});var rdt=s(Sle);Vlo=r(rdt,"bert-japanese"),rdt.forEach(t),Xlo=r(Z8e," \u2014 "),EB=n(Z8e,"A",{href:!0});var tdt=s(EB);zlo=r(tdt,"BertJapaneseTokenizer"),tdt.forEach(t),Wlo=r(Z8e," (BertJapanese model)"),Z8e.forEach(t),Qlo=i(S),sh=n(S,"LI",{});var e9e=s(sh);Rle=n(e9e,"STRONG",{});var adt=s(Rle);Hlo=r(adt,"bertweet"),adt.forEach(t),Ulo=r(e9e," \u2014 "),CB=n(e9e,"A",{href:!0});var ndt=s(CB);Jlo=r(ndt,"BertweetTokenizer"),ndt.forEach(t),Ylo=r(e9e," (BERTweet model)"),e9e.forEach(t),Klo=i(S),Vn=n(S,"LI",{});var Nk=s(Vn);Ple=n(Nk,"STRONG",{});var sdt=s(Ple);Zlo=r(sdt,"big_bird"),sdt.forEach(t),eio=r(Nk," \u2014 "),wB=n(Nk,"A",{href:!0});var ldt=s(wB);oio=r(ldt,"BigBirdTokenizer"),ldt.forEach(t),rio=r(Nk," or "),AB=n(Nk,"A",{href:!0});var idt=s(AB);tio=r(idt,"BigBirdTokenizerFast"),idt.forEach(t),aio=r(Nk," (BigBird model)"),Nk.forEach(t),nio=i(S),Xn=n(S,"LI",{});var qk=s(Xn);Ble=n(qk,"STRONG",{});var ddt=s(Ble);sio=r(ddt,"bigbird_pegasus"),ddt.forEach(t),lio=r(qk," \u2014 "),LB=n(qk,"A",{href:!0});var cdt=s(LB);iio=r(cdt,"PegasusTokenizer"),cdt.forEach(t),dio=r(qk," or "),yB=n(qk,"A",{href:!0});var fdt=s(yB);cio=r(fdt,"PegasusTokenizerFast"),fdt.forEach(t),fio=r(qk," (BigBird-Pegasus model)"),qk.forEach(t),mio=i(S),zn=n(S,"LI",{});var jk=s(zn);Ile=n(jk,"STRONG",{});var mdt=s(Ile);gio=r(mdt,"blenderbot"),mdt.forEach(t),hio=r(jk," \u2014 "),xB=n(jk,"A",{href:!0});var gdt=s(xB);pio=r(gdt,"BlenderbotTokenizer"),gdt.forEach(t),_io=r(jk," or "),$B=n(jk,"A",{href:!0});var hdt=s($B);uio=r(hdt,"BlenderbotTokenizerFast"),hdt.forEach(t),bio=r(jk," (Blenderbot model)"),jk.forEach(t),vio=i(S),lh=n(S,"LI",{});var o9e=s(lh);Nle=n(o9e,"STRONG",{});var pdt=s(Nle);Fio=r(pdt,"blenderbot-small"),pdt.forEach(t),Tio=r(o9e," \u2014 "),kB=n(o9e,"A",{href:!0});var _dt=s(kB);Mio=r(_dt,"BlenderbotSmallTokenizer"),_dt.forEach(t),Eio=r(o9e," (BlenderbotSmall model)"),o9e.forEach(t),Cio=i(S),ih=n(S,"LI",{});var r9e=s(ih);qle=n(r9e,"STRONG",{});var udt=s(qle);wio=r(udt,"bloom"),udt.forEach(t),Aio=r(r9e," \u2014 "),SB=n(r9e,"A",{href:!0});var bdt=s(SB);Lio=r(bdt,"BloomTokenizerFast"),bdt.forEach(t),yio=r(r9e," (BLOOM model)"),r9e.forEach(t),xio=i(S),dh=n(S,"LI",{});var t9e=s(dh);jle=n(t9e,"STRONG",{});var vdt=s(jle);$io=r(vdt,"byt5"),vdt.forEach(t),kio=r(t9e," \u2014 "),RB=n(t9e,"A",{href:!0});var Fdt=s(RB);Sio=r(Fdt,"ByT5Tokenizer"),Fdt.forEach(t),Rio=r(t9e," (ByT5 model)"),t9e.forEach(t),Pio=i(S),Wn=n(S,"LI",{});var Dk=s(Wn);Dle=n(Dk,"STRONG",{});var Tdt=s(Dle);Bio=r(Tdt,"camembert"),Tdt.forEach(t),Iio=r(Dk," \u2014 "),PB=n(Dk,"A",{href:!0});var Mdt=s(PB);Nio=r(Mdt,"CamembertTokenizer"),Mdt.forEach(t),qio=r(Dk," or "),BB=n(Dk,"A",{href:!0});var Edt=s(BB);jio=r(Edt,"CamembertTokenizerFast"),Edt.forEach(t),Dio=r(Dk," (CamemBERT model)"),Dk.forEach(t),Gio=i(S),ch=n(S,"LI",{});var a9e=s(ch);Gle=n(a9e,"STRONG",{});var Cdt=s(Gle);Oio=r(Cdt,"canine"),Cdt.forEach(t),Vio=r(a9e," \u2014 "),IB=n(a9e,"A",{href:!0});var wdt=s(IB);Xio=r(wdt,"CanineTokenizer"),wdt.forEach(t),zio=r(a9e," (CANINE model)"),a9e.forEach(t),Wio=i(S),Qn=n(S,"LI",{});var Gk=s(Qn);Ole=n(Gk,"STRONG",{});var Adt=s(Ole);Qio=r(Adt,"clip"),Adt.forEach(t),Hio=r(Gk," \u2014 "),NB=n(Gk,"A",{href:!0});var Ldt=s(NB);Uio=r(Ldt,"CLIPTokenizer"),Ldt.forEach(t),Jio=r(Gk," or "),qB=n(Gk,"A",{href:!0});var ydt=s(qB);Yio=r(ydt,"CLIPTokenizerFast"),ydt.forEach(t),Kio=r(Gk," (CLIP model)"),Gk.forEach(t),Zio=i(S),Hn=n(S,"LI",{});var Ok=s(Hn);Vle=n(Ok,"STRONG",{});var xdt=s(Vle);edo=r(xdt,"codegen"),xdt.forEach(t),odo=r(Ok," \u2014 "),jB=n(Ok,"A",{href:!0});var $dt=s(jB);rdo=r($dt,"CodeGenTokenizer"),$dt.forEach(t),tdo=r(Ok," or "),DB=n(Ok,"A",{href:!0});var kdt=s(DB);ado=r(kdt,"CodeGenTokenizerFast"),kdt.forEach(t),ndo=r(Ok," (CodeGen model)"),Ok.forEach(t),sdo=i(S),Un=n(S,"LI",{});var Vk=s(Un);Xle=n(Vk,"STRONG",{});var Sdt=s(Xle);ldo=r(Sdt,"convbert"),Sdt.forEach(t),ido=r(Vk," \u2014 "),GB=n(Vk,"A",{href:!0});var Rdt=s(GB);ddo=r(Rdt,"ConvBertTokenizer"),Rdt.forEach(t),cdo=r(Vk," or "),OB=n(Vk,"A",{href:!0});var Pdt=s(OB);fdo=r(Pdt,"ConvBertTokenizerFast"),Pdt.forEach(t),mdo=r(Vk," (ConvBERT model)"),Vk.forEach(t),gdo=i(S),Jn=n(S,"LI",{});var Xk=s(Jn);zle=n(Xk,"STRONG",{});var Bdt=s(zle);hdo=r(Bdt,"cpm"),Bdt.forEach(t),pdo=r(Xk," \u2014 "),VB=n(Xk,"A",{href:!0});var Idt=s(VB);_do=r(Idt,"CpmTokenizer"),Idt.forEach(t),udo=r(Xk," or "),XB=n(Xk,"A",{href:!0});var Ndt=s(XB);bdo=r(Ndt,"CpmTokenizerFast"),Ndt.forEach(t),vdo=r(Xk," (CPM model)"),Xk.forEach(t),Fdo=i(S),fh=n(S,"LI",{});var n9e=s(fh);Wle=n(n9e,"STRONG",{});var qdt=s(Wle);Tdo=r(qdt,"ctrl"),qdt.forEach(t),Mdo=r(n9e," \u2014 "),zB=n(n9e,"A",{href:!0});var jdt=s(zB);Edo=r(jdt,"CTRLTokenizer"),jdt.forEach(t),Cdo=r(n9e," (CTRL model)"),n9e.forEach(t),wdo=i(S),Yn=n(S,"LI",{});var zk=s(Yn);Qle=n(zk,"STRONG",{});var Ddt=s(Qle);Ado=r(Ddt,"data2vec-text"),Ddt.forEach(t),Ldo=r(zk," \u2014 "),WB=n(zk,"A",{href:!0});var Gdt=s(WB);ydo=r(Gdt,"RobertaTokenizer"),Gdt.forEach(t),xdo=r(zk," or "),QB=n(zk,"A",{href:!0});var Odt=s(QB);$do=r(Odt,"RobertaTokenizerFast"),Odt.forEach(t),kdo=r(zk," (Data2VecText model)"),zk.forEach(t),Sdo=i(S),Kn=n(S,"LI",{});var Wk=s(Kn);Hle=n(Wk,"STRONG",{});var Vdt=s(Hle);Rdo=r(Vdt,"deberta"),Vdt.forEach(t),Pdo=r(Wk," \u2014 "),HB=n(Wk,"A",{href:!0});var Xdt=s(HB);Bdo=r(Xdt,"DebertaTokenizer"),Xdt.forEach(t),Ido=r(Wk," or "),UB=n(Wk,"A",{href:!0});var zdt=s(UB);Ndo=r(zdt,"DebertaTokenizerFast"),zdt.forEach(t),qdo=r(Wk," (DeBERTa model)"),Wk.forEach(t),jdo=i(S),Zn=n(S,"LI",{});var Qk=s(Zn);Ule=n(Qk,"STRONG",{});var Wdt=s(Ule);Ddo=r(Wdt,"deberta-v2"),Wdt.forEach(t),Gdo=r(Qk," \u2014 "),JB=n(Qk,"A",{href:!0});var Qdt=s(JB);Odo=r(Qdt,"DebertaV2Tokenizer"),Qdt.forEach(t),Vdo=r(Qk," or "),YB=n(Qk,"A",{href:!0});var Hdt=s(YB);Xdo=r(Hdt,"DebertaV2TokenizerFast"),Hdt.forEach(t),zdo=r(Qk," (DeBERTa-v2 model)"),Qk.forEach(t),Wdo=i(S),es=n(S,"LI",{});var Hk=s(es);Jle=n(Hk,"STRONG",{});var Udt=s(Jle);Qdo=r(Udt,"distilbert"),Udt.forEach(t),Hdo=r(Hk," \u2014 "),KB=n(Hk,"A",{href:!0});var Jdt=s(KB);Udo=r(Jdt,"DistilBertTokenizer"),Jdt.forEach(t),Jdo=r(Hk," or "),ZB=n(Hk,"A",{href:!0});var Ydt=s(ZB);Ydo=r(Ydt,"DistilBertTokenizerFast"),Ydt.forEach(t),Kdo=r(Hk," (DistilBERT model)"),Hk.forEach(t),Zdo=i(S),os=n(S,"LI",{});var Uk=s(os);Yle=n(Uk,"STRONG",{});var Kdt=s(Yle);eco=r(Kdt,"dpr"),Kdt.forEach(t),oco=r(Uk," \u2014 "),eI=n(Uk,"A",{href:!0});var Zdt=s(eI);rco=r(Zdt,"DPRQuestionEncoderTokenizer"),Zdt.forEach(t),tco=r(Uk," or "),oI=n(Uk,"A",{href:!0});var ect=s(oI);aco=r(ect,"DPRQuestionEncoderTokenizerFast"),ect.forEach(t),nco=r(Uk," (DPR model)"),Uk.forEach(t),sco=i(S),rs=n(S,"LI",{});var Jk=s(rs);Kle=n(Jk,"STRONG",{});var oct=s(Kle);lco=r(oct,"electra"),oct.forEach(t),ico=r(Jk," \u2014 "),rI=n(Jk,"A",{href:!0});var rct=s(rI);dco=r(rct,"ElectraTokenizer"),rct.forEach(t),cco=r(Jk," or "),tI=n(Jk,"A",{href:!0});var tct=s(tI);fco=r(tct,"ElectraTokenizerFast"),tct.forEach(t),mco=r(Jk," (ELECTRA model)"),Jk.forEach(t),gco=i(S),mh=n(S,"LI",{});var s9e=s(mh);Zle=n(s9e,"STRONG",{});var act=s(Zle);hco=r(act,"flaubert"),act.forEach(t),pco=r(s9e," \u2014 "),aI=n(s9e,"A",{href:!0});var nct=s(aI);_co=r(nct,"FlaubertTokenizer"),nct.forEach(t),uco=r(s9e," (FlauBERT model)"),s9e.forEach(t),bco=i(S),ts=n(S,"LI",{});var Yk=s(ts);eie=n(Yk,"STRONG",{});var sct=s(eie);vco=r(sct,"fnet"),sct.forEach(t),Fco=r(Yk," \u2014 "),nI=n(Yk,"A",{href:!0});var lct=s(nI);Tco=r(lct,"FNetTokenizer"),lct.forEach(t),Mco=r(Yk," or "),sI=n(Yk,"A",{href:!0});var ict=s(sI);Eco=r(ict,"FNetTokenizerFast"),ict.forEach(t),Cco=r(Yk," (FNet model)"),Yk.forEach(t),wco=i(S),gh=n(S,"LI",{});var l9e=s(gh);oie=n(l9e,"STRONG",{});var dct=s(oie);Aco=r(dct,"fsmt"),dct.forEach(t),Lco=r(l9e," \u2014 "),lI=n(l9e,"A",{href:!0});var cct=s(lI);yco=r(cct,"FSMTTokenizer"),cct.forEach(t),xco=r(l9e," (FairSeq Machine-Translation model)"),l9e.forEach(t),$co=i(S),as=n(S,"LI",{});var Kk=s(as);rie=n(Kk,"STRONG",{});var fct=s(rie);kco=r(fct,"funnel"),fct.forEach(t),Sco=r(Kk," \u2014 "),iI=n(Kk,"A",{href:!0});var mct=s(iI);Rco=r(mct,"FunnelTokenizer"),mct.forEach(t),Pco=r(Kk," or "),dI=n(Kk,"A",{href:!0});var gct=s(dI);Bco=r(gct,"FunnelTokenizerFast"),gct.forEach(t),Ico=r(Kk," (Funnel Transformer model)"),Kk.forEach(t),Nco=i(S),ns=n(S,"LI",{});var Zk=s(ns);tie=n(Zk,"STRONG",{});var hct=s(tie);qco=r(hct,"gpt2"),hct.forEach(t),jco=r(Zk," \u2014 "),cI=n(Zk,"A",{href:!0});var pct=s(cI);Dco=r(pct,"GPT2Tokenizer"),pct.forEach(t),Gco=r(Zk," or "),fI=n(Zk,"A",{href:!0});var _ct=s(fI);Oco=r(_ct,"GPT2TokenizerFast"),_ct.forEach(t),Vco=r(Zk," (OpenAI GPT-2 model)"),Zk.forEach(t),Xco=i(S),ss=n(S,"LI",{});var eS=s(ss);aie=n(eS,"STRONG",{});var uct=s(aie);zco=r(uct,"gpt_neo"),uct.forEach(t),Wco=r(eS," \u2014 "),mI=n(eS,"A",{href:!0});var bct=s(mI);Qco=r(bct,"GPT2Tokenizer"),bct.forEach(t),Hco=r(eS," or "),gI=n(eS,"A",{href:!0});var vct=s(gI);Uco=r(vct,"GPT2TokenizerFast"),vct.forEach(t),Jco=r(eS," (GPT Neo model)"),eS.forEach(t),Yco=i(S),hh=n(S,"LI",{});var i9e=s(hh);nie=n(i9e,"STRONG",{});var Fct=s(nie);Kco=r(Fct,"gpt_neox"),Fct.forEach(t),Zco=r(i9e," \u2014 "),hI=n(i9e,"A",{href:!0});var Tct=s(hI);efo=r(Tct,"GPTNeoXTokenizerFast"),Tct.forEach(t),ofo=r(i9e," (GPT NeoX model)"),i9e.forEach(t),rfo=i(S),ls=n(S,"LI",{});var oS=s(ls);sie=n(oS,"STRONG",{});var Mct=s(sie);tfo=r(Mct,"gptj"),Mct.forEach(t),afo=r(oS," \u2014 "),pI=n(oS,"A",{href:!0});var Ect=s(pI);nfo=r(Ect,"GPT2Tokenizer"),Ect.forEach(t),sfo=r(oS," or "),_I=n(oS,"A",{href:!0});var Cct=s(_I);lfo=r(Cct,"GPT2TokenizerFast"),Cct.forEach(t),ifo=r(oS," (GPT-J model)"),oS.forEach(t),dfo=i(S),is=n(S,"LI",{});var rS=s(is);lie=n(rS,"STRONG",{});var wct=s(lie);cfo=r(wct,"groupvit"),wct.forEach(t),ffo=r(rS," \u2014 "),uI=n(rS,"A",{href:!0});var Act=s(uI);mfo=r(Act,"CLIPTokenizer"),Act.forEach(t),gfo=r(rS," or "),bI=n(rS,"A",{href:!0});var Lct=s(bI);hfo=r(Lct,"CLIPTokenizerFast"),Lct.forEach(t),pfo=r(rS," (GroupViT model)"),rS.forEach(t),_fo=i(S),ds=n(S,"LI",{});var tS=s(ds);iie=n(tS,"STRONG",{});var yct=s(iie);ufo=r(yct,"herbert"),yct.forEach(t),bfo=r(tS," \u2014 "),vI=n(tS,"A",{href:!0});var xct=s(vI);vfo=r(xct,"HerbertTokenizer"),xct.forEach(t),Ffo=r(tS," or "),FI=n(tS,"A",{href:!0});var $ct=s(FI);Tfo=r($ct,"HerbertTokenizerFast"),$ct.forEach(t),Mfo=r(tS," (HerBERT model)"),tS.forEach(t),Efo=i(S),ph=n(S,"LI",{});var d9e=s(ph);die=n(d9e,"STRONG",{});var kct=s(die);Cfo=r(kct,"hubert"),kct.forEach(t),wfo=r(d9e," \u2014 "),TI=n(d9e,"A",{href:!0});var Sct=s(TI);Afo=r(Sct,"Wav2Vec2CTCTokenizer"),Sct.forEach(t),Lfo=r(d9e," (Hubert model)"),d9e.forEach(t),yfo=i(S),cs=n(S,"LI",{});var aS=s(cs);cie=n(aS,"STRONG",{});var Rct=s(cie);xfo=r(Rct,"ibert"),Rct.forEach(t),$fo=r(aS," \u2014 "),MI=n(aS,"A",{href:!0});var Pct=s(MI);kfo=r(Pct,"RobertaTokenizer"),Pct.forEach(t),Sfo=r(aS," or "),EI=n(aS,"A",{href:!0});var Bct=s(EI);Rfo=r(Bct,"RobertaTokenizerFast"),Bct.forEach(t),Pfo=r(aS," (I-BERT model)"),aS.forEach(t),Bfo=i(S),fs=n(S,"LI",{});var nS=s(fs);fie=n(nS,"STRONG",{});var Ict=s(fie);Ifo=r(Ict,"layoutlm"),Ict.forEach(t),Nfo=r(nS," \u2014 "),CI=n(nS,"A",{href:!0});var Nct=s(CI);qfo=r(Nct,"LayoutLMTokenizer"),Nct.forEach(t),jfo=r(nS," or "),wI=n(nS,"A",{href:!0});var qct=s(wI);Dfo=r(qct,"LayoutLMTokenizerFast"),qct.forEach(t),Gfo=r(nS," (LayoutLM model)"),nS.forEach(t),Ofo=i(S),ms=n(S,"LI",{});var sS=s(ms);mie=n(sS,"STRONG",{});var jct=s(mie);Vfo=r(jct,"layoutlmv2"),jct.forEach(t),Xfo=r(sS," \u2014 "),AI=n(sS,"A",{href:!0});var Dct=s(AI);zfo=r(Dct,"LayoutLMv2Tokenizer"),Dct.forEach(t),Wfo=r(sS," or "),LI=n(sS,"A",{href:!0});var Gct=s(LI);Qfo=r(Gct,"LayoutLMv2TokenizerFast"),Gct.forEach(t),Hfo=r(sS," (LayoutLMv2 model)"),sS.forEach(t),Ufo=i(S),gs=n(S,"LI",{});var lS=s(gs);gie=n(lS,"STRONG",{});var Oct=s(gie);Jfo=r(Oct,"layoutlmv3"),Oct.forEach(t),Yfo=r(lS," \u2014 "),yI=n(lS,"A",{href:!0});var Vct=s(yI);Kfo=r(Vct,"LayoutLMv3Tokenizer"),Vct.forEach(t),Zfo=r(lS," or "),xI=n(lS,"A",{href:!0});var Xct=s(xI);emo=r(Xct,"LayoutLMv3TokenizerFast"),Xct.forEach(t),omo=r(lS," (LayoutLMv3 model)"),lS.forEach(t),rmo=i(S),hs=n(S,"LI",{});var iS=s(hs);hie=n(iS,"STRONG",{});var zct=s(hie);tmo=r(zct,"layoutxlm"),zct.forEach(t),amo=r(iS," \u2014 "),$I=n(iS,"A",{href:!0});var Wct=s($I);nmo=r(Wct,"LayoutXLMTokenizer"),Wct.forEach(t),smo=r(iS," or "),kI=n(iS,"A",{href:!0});var Qct=s(kI);lmo=r(Qct,"LayoutXLMTokenizerFast"),Qct.forEach(t),imo=r(iS," (LayoutXLM model)"),iS.forEach(t),dmo=i(S),ps=n(S,"LI",{});var dS=s(ps);pie=n(dS,"STRONG",{});var Hct=s(pie);cmo=r(Hct,"led"),Hct.forEach(t),fmo=r(dS," \u2014 "),SI=n(dS,"A",{href:!0});var Uct=s(SI);mmo=r(Uct,"LEDTokenizer"),Uct.forEach(t),gmo=r(dS," or "),RI=n(dS,"A",{href:!0});var Jct=s(RI);hmo=r(Jct,"LEDTokenizerFast"),Jct.forEach(t),pmo=r(dS," (LED model)"),dS.forEach(t),_mo=i(S),_s=n(S,"LI",{});var cS=s(_s);_ie=n(cS,"STRONG",{});var Yct=s(_ie);umo=r(Yct,"longformer"),Yct.forEach(t),bmo=r(cS," \u2014 "),PI=n(cS,"A",{href:!0});var Kct=s(PI);vmo=r(Kct,"LongformerTokenizer"),Kct.forEach(t),Fmo=r(cS," or "),BI=n(cS,"A",{href:!0});var Zct=s(BI);Tmo=r(Zct,"LongformerTokenizerFast"),Zct.forEach(t),Mmo=r(cS," (Longformer model)"),cS.forEach(t),Emo=i(S),us=n(S,"LI",{});var fS=s(us);uie=n(fS,"STRONG",{});var eft=s(uie);Cmo=r(eft,"longt5"),eft.forEach(t),wmo=r(fS," \u2014 "),II=n(fS,"A",{href:!0});var oft=s(II);Amo=r(oft,"T5Tokenizer"),oft.forEach(t),Lmo=r(fS," or "),NI=n(fS,"A",{href:!0});var rft=s(NI);ymo=r(rft,"T5TokenizerFast"),rft.forEach(t),xmo=r(fS," (LongT5 model)"),fS.forEach(t),$mo=i(S),_h=n(S,"LI",{});var c9e=s(_h);bie=n(c9e,"STRONG",{});var tft=s(bie);kmo=r(tft,"luke"),tft.forEach(t),Smo=r(c9e," \u2014 "),qI=n(c9e,"A",{href:!0});var aft=s(qI);Rmo=r(aft,"LukeTokenizer"),aft.forEach(t),Pmo=r(c9e," (LUKE model)"),c9e.forEach(t),Bmo=i(S),bs=n(S,"LI",{});var mS=s(bs);vie=n(mS,"STRONG",{});var nft=s(vie);Imo=r(nft,"lxmert"),nft.forEach(t),Nmo=r(mS," \u2014 "),jI=n(mS,"A",{href:!0});var sft=s(jI);qmo=r(sft,"LxmertTokenizer"),sft.forEach(t),jmo=r(mS," or "),DI=n(mS,"A",{href:!0});var lft=s(DI);Dmo=r(lft,"LxmertTokenizerFast"),lft.forEach(t),Gmo=r(mS," (LXMERT model)"),mS.forEach(t),Omo=i(S),uh=n(S,"LI",{});var f9e=s(uh);Fie=n(f9e,"STRONG",{});var ift=s(Fie);Vmo=r(ift,"m2m_100"),ift.forEach(t),Xmo=r(f9e," \u2014 "),GI=n(f9e,"A",{href:!0});var dft=s(GI);zmo=r(dft,"M2M100Tokenizer"),dft.forEach(t),Wmo=r(f9e," (M2M100 model)"),f9e.forEach(t),Qmo=i(S),bh=n(S,"LI",{});var m9e=s(bh);Tie=n(m9e,"STRONG",{});var cft=s(Tie);Hmo=r(cft,"marian"),cft.forEach(t),Umo=r(m9e," \u2014 "),OI=n(m9e,"A",{href:!0});var fft=s(OI);Jmo=r(fft,"MarianTokenizer"),fft.forEach(t),Ymo=r(m9e," (Marian model)"),m9e.forEach(t),Kmo=i(S),vs=n(S,"LI",{});var gS=s(vs);Mie=n(gS,"STRONG",{});var mft=s(Mie);Zmo=r(mft,"mbart"),mft.forEach(t),ego=r(gS," \u2014 "),VI=n(gS,"A",{href:!0});var gft=s(VI);ogo=r(gft,"MBartTokenizer"),gft.forEach(t),rgo=r(gS," or "),XI=n(gS,"A",{href:!0});var hft=s(XI);tgo=r(hft,"MBartTokenizerFast"),hft.forEach(t),ago=r(gS," (mBART model)"),gS.forEach(t),ngo=i(S),Fs=n(S,"LI",{});var hS=s(Fs);Eie=n(hS,"STRONG",{});var pft=s(Eie);sgo=r(pft,"mbart50"),pft.forEach(t),lgo=r(hS," \u2014 "),zI=n(hS,"A",{href:!0});var _ft=s(zI);igo=r(_ft,"MBart50Tokenizer"),_ft.forEach(t),dgo=r(hS," or "),WI=n(hS,"A",{href:!0});var uft=s(WI);cgo=r(uft,"MBart50TokenizerFast"),uft.forEach(t),fgo=r(hS," (mBART-50 model)"),hS.forEach(t),mgo=i(S),Ts=n(S,"LI",{});var pS=s(Ts);Cie=n(pS,"STRONG",{});var bft=s(Cie);ggo=r(bft,"megatron-bert"),bft.forEach(t),hgo=r(pS," \u2014 "),QI=n(pS,"A",{href:!0});var vft=s(QI);pgo=r(vft,"BertTokenizer"),vft.forEach(t),_go=r(pS," or "),HI=n(pS,"A",{href:!0});var Fft=s(HI);ugo=r(Fft,"BertTokenizerFast"),Fft.forEach(t),bgo=r(pS," (Megatron-BERT model)"),pS.forEach(t),vgo=i(S),vh=n(S,"LI",{});var g9e=s(vh);wie=n(g9e,"STRONG",{});var Tft=s(wie);Fgo=r(Tft,"mluke"),Tft.forEach(t),Tgo=r(g9e," \u2014 "),UI=n(g9e,"A",{href:!0});var Mft=s(UI);Mgo=r(Mft,"MLukeTokenizer"),Mft.forEach(t),Ego=r(g9e," (mLUKE model)"),g9e.forEach(t),Cgo=i(S),Ms=n(S,"LI",{});var _S=s(Ms);Aie=n(_S,"STRONG",{});var Eft=s(Aie);wgo=r(Eft,"mobilebert"),Eft.forEach(t),Ago=r(_S," \u2014 "),JI=n(_S,"A",{href:!0});var Cft=s(JI);Lgo=r(Cft,"MobileBertTokenizer"),Cft.forEach(t),ygo=r(_S," or "),YI=n(_S,"A",{href:!0});var wft=s(YI);xgo=r(wft,"MobileBertTokenizerFast"),wft.forEach(t),$go=r(_S," (MobileBERT model)"),_S.forEach(t),kgo=i(S),Es=n(S,"LI",{});var uS=s(Es);Lie=n(uS,"STRONG",{});var Aft=s(Lie);Sgo=r(Aft,"mpnet"),Aft.forEach(t),Rgo=r(uS," \u2014 "),KI=n(uS,"A",{href:!0});var Lft=s(KI);Pgo=r(Lft,"MPNetTokenizer"),Lft.forEach(t),Bgo=r(uS," or "),ZI=n(uS,"A",{href:!0});var yft=s(ZI);Igo=r(yft,"MPNetTokenizerFast"),yft.forEach(t),Ngo=r(uS," (MPNet model)"),uS.forEach(t),qgo=i(S),Cs=n(S,"LI",{});var bS=s(Cs);yie=n(bS,"STRONG",{});var xft=s(yie);jgo=r(xft,"mt5"),xft.forEach(t),Dgo=r(bS," \u2014 "),eN=n(bS,"A",{href:!0});var $ft=s(eN);Ggo=r($ft,"MT5Tokenizer"),$ft.forEach(t),Ogo=r(bS," or "),oN=n(bS,"A",{href:!0});var kft=s(oN);Vgo=r(kft,"MT5TokenizerFast"),kft.forEach(t),Xgo=r(bS," (MT5 model)"),bS.forEach(t),zgo=i(S),ws=n(S,"LI",{});var vS=s(ws);xie=n(vS,"STRONG",{});var Sft=s(xie);Wgo=r(Sft,"mvp"),Sft.forEach(t),Qgo=r(vS," \u2014 "),rN=n(vS,"A",{href:!0});var Rft=s(rN);Hgo=r(Rft,"MvpTokenizer"),Rft.forEach(t),Ugo=r(vS," or "),tN=n(vS,"A",{href:!0});var Pft=s(tN);Jgo=r(Pft,"MvpTokenizerFast"),Pft.forEach(t),Ygo=r(vS," (MVP model)"),vS.forEach(t),Kgo=i(S),As=n(S,"LI",{});var FS=s(As);$ie=n(FS,"STRONG",{});var Bft=s($ie);Zgo=r(Bft,"nezha"),Bft.forEach(t),eho=r(FS," \u2014 "),aN=n(FS,"A",{href:!0});var Ift=s(aN);oho=r(Ift,"BertTokenizer"),Ift.forEach(t),rho=r(FS," or "),nN=n(FS,"A",{href:!0});var Nft=s(nN);tho=r(Nft,"BertTokenizerFast"),Nft.forEach(t),aho=r(FS," (Nezha model)"),FS.forEach(t),nho=i(S),Ls=n(S,"LI",{});var TS=s(Ls);kie=n(TS,"STRONG",{});var qft=s(kie);sho=r(qft,"nllb"),qft.forEach(t),lho=r(TS," \u2014 "),sN=n(TS,"A",{href:!0});var jft=s(sN);iho=r(jft,"NllbTokenizer"),jft.forEach(t),dho=r(TS," or "),lN=n(TS,"A",{href:!0});var Dft=s(lN);cho=r(Dft,"NllbTokenizerFast"),Dft.forEach(t),fho=r(TS," (NLLB model)"),TS.forEach(t),mho=i(S),ys=n(S,"LI",{});var MS=s(ys);Sie=n(MS,"STRONG",{});var Gft=s(Sie);gho=r(Gft,"nystromformer"),Gft.forEach(t),hho=r(MS," \u2014 "),iN=n(MS,"A",{href:!0});var Oft=s(iN);pho=r(Oft,"AlbertTokenizer"),Oft.forEach(t),_ho=r(MS," or "),dN=n(MS,"A",{href:!0});var Vft=s(dN);uho=r(Vft,"AlbertTokenizerFast"),Vft.forEach(t),bho=r(MS," (Nystr\xF6mformer model)"),MS.forEach(t),vho=i(S),xs=n(S,"LI",{});var ES=s(xs);Rie=n(ES,"STRONG",{});var Xft=s(Rie);Fho=r(Xft,"openai-gpt"),Xft.forEach(t),Tho=r(ES," \u2014 "),cN=n(ES,"A",{href:!0});var zft=s(cN);Mho=r(zft,"OpenAIGPTTokenizer"),zft.forEach(t),Eho=r(ES," or "),fN=n(ES,"A",{href:!0});var Wft=s(fN);Cho=r(Wft,"OpenAIGPTTokenizerFast"),Wft.forEach(t),who=r(ES," (OpenAI GPT model)"),ES.forEach(t),Aho=i(S),Fh=n(S,"LI",{});var h9e=s(Fh);Pie=n(h9e,"STRONG",{});var Qft=s(Pie);Lho=r(Qft,"opt"),Qft.forEach(t),yho=r(h9e," \u2014 "),mN=n(h9e,"A",{href:!0});var Hft=s(mN);xho=r(Hft,"GPT2Tokenizer"),Hft.forEach(t),$ho=r(h9e," (OPT model)"),h9e.forEach(t),kho=i(S),$s=n(S,"LI",{});var CS=s($s);Bie=n(CS,"STRONG",{});var Uft=s(Bie);Sho=r(Uft,"owlvit"),Uft.forEach(t),Rho=r(CS," \u2014 "),gN=n(CS,"A",{href:!0});var Jft=s(gN);Pho=r(Jft,"CLIPTokenizer"),Jft.forEach(t),Bho=r(CS," or "),hN=n(CS,"A",{href:!0});var Yft=s(hN);Iho=r(Yft,"CLIPTokenizerFast"),Yft.forEach(t),Nho=r(CS," (OWL-ViT model)"),CS.forEach(t),qho=i(S),ks=n(S,"LI",{});var wS=s(ks);Iie=n(wS,"STRONG",{});var Kft=s(Iie);jho=r(Kft,"pegasus"),Kft.forEach(t),Dho=r(wS," \u2014 "),pN=n(wS,"A",{href:!0});var Zft=s(pN);Gho=r(Zft,"PegasusTokenizer"),Zft.forEach(t),Oho=r(wS," or "),_N=n(wS,"A",{href:!0});var emt=s(_N);Vho=r(emt,"PegasusTokenizerFast"),emt.forEach(t),Xho=r(wS," (Pegasus model)"),wS.forEach(t),zho=i(S),Th=n(S,"LI",{});var p9e=s(Th);Nie=n(p9e,"STRONG",{});var omt=s(Nie);Who=r(omt,"perceiver"),omt.forEach(t),Qho=r(p9e," \u2014 "),uN=n(p9e,"A",{href:!0});var rmt=s(uN);Hho=r(rmt,"PerceiverTokenizer"),rmt.forEach(t),Uho=r(p9e," (Perceiver model)"),p9e.forEach(t),Jho=i(S),Mh=n(S,"LI",{});var _9e=s(Mh);qie=n(_9e,"STRONG",{});var tmt=s(qie);Yho=r(tmt,"phobert"),tmt.forEach(t),Kho=r(_9e," \u2014 "),bN=n(_9e,"A",{href:!0});var amt=s(bN);Zho=r(amt,"PhobertTokenizer"),amt.forEach(t),epo=r(_9e," (PhoBERT model)"),_9e.forEach(t),opo=i(S),Eh=n(S,"LI",{});var u9e=s(Eh);jie=n(u9e,"STRONG",{});var nmt=s(jie);rpo=r(nmt,"plbart"),nmt.forEach(t),tpo=r(u9e," \u2014 "),vN=n(u9e,"A",{href:!0});var smt=s(vN);apo=r(smt,"PLBartTokenizer"),smt.forEach(t),npo=r(u9e," (PLBart model)"),u9e.forEach(t),spo=i(S),Ch=n(S,"LI",{});var b9e=s(Ch);Die=n(b9e,"STRONG",{});var lmt=s(Die);lpo=r(lmt,"prophetnet"),lmt.forEach(t),ipo=r(b9e," \u2014 "),FN=n(b9e,"A",{href:!0});var imt=s(FN);dpo=r(imt,"ProphetNetTokenizer"),imt.forEach(t),cpo=r(b9e," (ProphetNet model)"),b9e.forEach(t),fpo=i(S),Ss=n(S,"LI",{});var AS=s(Ss);Gie=n(AS,"STRONG",{});var dmt=s(Gie);mpo=r(dmt,"qdqbert"),dmt.forEach(t),gpo=r(AS," \u2014 "),TN=n(AS,"A",{href:!0});var cmt=s(TN);hpo=r(cmt,"BertTokenizer"),cmt.forEach(t),ppo=r(AS," or "),MN=n(AS,"A",{href:!0});var fmt=s(MN);_po=r(fmt,"BertTokenizerFast"),fmt.forEach(t),upo=r(AS," (QDQBert model)"),AS.forEach(t),bpo=i(S),wh=n(S,"LI",{});var v9e=s(wh);Oie=n(v9e,"STRONG",{});var mmt=s(Oie);vpo=r(mmt,"rag"),mmt.forEach(t),Fpo=r(v9e," \u2014 "),EN=n(v9e,"A",{href:!0});var gmt=s(EN);Tpo=r(gmt,"RagTokenizer"),gmt.forEach(t),Mpo=r(v9e," (RAG model)"),v9e.forEach(t),Epo=i(S),Rs=n(S,"LI",{});var LS=s(Rs);Vie=n(LS,"STRONG",{});var hmt=s(Vie);Cpo=r(hmt,"realm"),hmt.forEach(t),wpo=r(LS," \u2014 "),CN=n(LS,"A",{href:!0});var pmt=s(CN);Apo=r(pmt,"RealmTokenizer"),pmt.forEach(t),Lpo=r(LS," or "),wN=n(LS,"A",{href:!0});var _mt=s(wN);ypo=r(_mt,"RealmTokenizerFast"),_mt.forEach(t),xpo=r(LS," (REALM model)"),LS.forEach(t),$po=i(S),Ps=n(S,"LI",{});var yS=s(Ps);Xie=n(yS,"STRONG",{});var umt=s(Xie);kpo=r(umt,"reformer"),umt.forEach(t),Spo=r(yS," \u2014 "),AN=n(yS,"A",{href:!0});var bmt=s(AN);Rpo=r(bmt,"ReformerTokenizer"),bmt.forEach(t),Ppo=r(yS," or "),LN=n(yS,"A",{href:!0});var vmt=s(LN);Bpo=r(vmt,"ReformerTokenizerFast"),vmt.forEach(t),Ipo=r(yS," (Reformer model)"),yS.forEach(t),Npo=i(S),Bs=n(S,"LI",{});var xS=s(Bs);zie=n(xS,"STRONG",{});var Fmt=s(zie);qpo=r(Fmt,"rembert"),Fmt.forEach(t),jpo=r(xS," \u2014 "),yN=n(xS,"A",{href:!0});var Tmt=s(yN);Dpo=r(Tmt,"RemBertTokenizer"),Tmt.forEach(t),Gpo=r(xS," or "),xN=n(xS,"A",{href:!0});var Mmt=s(xN);Opo=r(Mmt,"RemBertTokenizerFast"),Mmt.forEach(t),Vpo=r(xS," (RemBERT model)"),xS.forEach(t),Xpo=i(S),Is=n(S,"LI",{});var $S=s(Is);Wie=n($S,"STRONG",{});var Emt=s(Wie);zpo=r(Emt,"retribert"),Emt.forEach(t),Wpo=r($S," \u2014 "),$N=n($S,"A",{href:!0});var Cmt=s($N);Qpo=r(Cmt,"RetriBertTokenizer"),Cmt.forEach(t),Hpo=r($S," or "),kN=n($S,"A",{href:!0});var wmt=s(kN);Upo=r(wmt,"RetriBertTokenizerFast"),wmt.forEach(t),Jpo=r($S," (RetriBERT model)"),$S.forEach(t),Ypo=i(S),Ns=n(S,"LI",{});var kS=s(Ns);Qie=n(kS,"STRONG",{});var Amt=s(Qie);Kpo=r(Amt,"roberta"),Amt.forEach(t),Zpo=r(kS," \u2014 "),SN=n(kS,"A",{href:!0});var Lmt=s(SN);e_o=r(Lmt,"RobertaTokenizer"),Lmt.forEach(t),o_o=r(kS," or "),RN=n(kS,"A",{href:!0});var ymt=s(RN);r_o=r(ymt,"RobertaTokenizerFast"),ymt.forEach(t),t_o=r(kS," (RoBERTa model)"),kS.forEach(t),a_o=i(S),qs=n(S,"LI",{});var SS=s(qs);Hie=n(SS,"STRONG",{});var xmt=s(Hie);n_o=r(xmt,"roformer"),xmt.forEach(t),s_o=r(SS," \u2014 "),PN=n(SS,"A",{href:!0});var $mt=s(PN);l_o=r($mt,"RoFormerTokenizer"),$mt.forEach(t),i_o=r(SS," or "),BN=n(SS,"A",{href:!0});var kmt=s(BN);d_o=r(kmt,"RoFormerTokenizerFast"),kmt.forEach(t),c_o=r(SS," (RoFormer model)"),SS.forEach(t),f_o=i(S),Ah=n(S,"LI",{});var F9e=s(Ah);Uie=n(F9e,"STRONG",{});var Smt=s(Uie);m_o=r(Smt,"speech_to_text"),Smt.forEach(t),g_o=r(F9e," \u2014 "),IN=n(F9e,"A",{href:!0});var Rmt=s(IN);h_o=r(Rmt,"Speech2TextTokenizer"),Rmt.forEach(t),p_o=r(F9e," (Speech2Text model)"),F9e.forEach(t),__o=i(S),Lh=n(S,"LI",{});var T9e=s(Lh);Jie=n(T9e,"STRONG",{});var Pmt=s(Jie);u_o=r(Pmt,"speech_to_text_2"),Pmt.forEach(t),b_o=r(T9e," \u2014 "),NN=n(T9e,"A",{href:!0});var Bmt=s(NN);v_o=r(Bmt,"Speech2Text2Tokenizer"),Bmt.forEach(t),F_o=r(T9e," (Speech2Text2 model)"),T9e.forEach(t),T_o=i(S),js=n(S,"LI",{});var RS=s(js);Yie=n(RS,"STRONG",{});var Imt=s(Yie);M_o=r(Imt,"splinter"),Imt.forEach(t),E_o=r(RS," \u2014 "),qN=n(RS,"A",{href:!0});var Nmt=s(qN);C_o=r(Nmt,"SplinterTokenizer"),Nmt.forEach(t),w_o=r(RS," or "),jN=n(RS,"A",{href:!0});var qmt=s(jN);A_o=r(qmt,"SplinterTokenizerFast"),qmt.forEach(t),L_o=r(RS," (Splinter model)"),RS.forEach(t),y_o=i(S),Ds=n(S,"LI",{});var PS=s(Ds);Kie=n(PS,"STRONG",{});var jmt=s(Kie);x_o=r(jmt,"squeezebert"),jmt.forEach(t),$_o=r(PS," \u2014 "),DN=n(PS,"A",{href:!0});var Dmt=s(DN);k_o=r(Dmt,"SqueezeBertTokenizer"),Dmt.forEach(t),S_o=r(PS," or "),GN=n(PS,"A",{href:!0});var Gmt=s(GN);R_o=r(Gmt,"SqueezeBertTokenizerFast"),Gmt.forEach(t),P_o=r(PS," (SqueezeBERT model)"),PS.forEach(t),B_o=i(S),Gs=n(S,"LI",{});var BS=s(Gs);Zie=n(BS,"STRONG",{});var Omt=s(Zie);I_o=r(Omt,"t5"),Omt.forEach(t),N_o=r(BS," \u2014 "),ON=n(BS,"A",{href:!0});var Vmt=s(ON);q_o=r(Vmt,"T5Tokenizer"),Vmt.forEach(t),j_o=r(BS," or "),VN=n(BS,"A",{href:!0});var Xmt=s(VN);D_o=r(Xmt,"T5TokenizerFast"),Xmt.forEach(t),G_o=r(BS," (T5 model)"),BS.forEach(t),O_o=i(S),yh=n(S,"LI",{});var M9e=s(yh);ede=n(M9e,"STRONG",{});var zmt=s(ede);V_o=r(zmt,"tapas"),zmt.forEach(t),X_o=r(M9e," \u2014 "),XN=n(M9e,"A",{href:!0});var Wmt=s(XN);z_o=r(Wmt,"TapasTokenizer"),Wmt.forEach(t),W_o=r(M9e," (TAPAS model)"),M9e.forEach(t),Q_o=i(S),xh=n(S,"LI",{});var E9e=s(xh);ode=n(E9e,"STRONG",{});var Qmt=s(ode);H_o=r(Qmt,"tapex"),Qmt.forEach(t),U_o=r(E9e," \u2014 "),zN=n(E9e,"A",{href:!0});var Hmt=s(zN);J_o=r(Hmt,"TapexTokenizer"),Hmt.forEach(t),Y_o=r(E9e," (TAPEX model)"),E9e.forEach(t),K_o=i(S),$h=n(S,"LI",{});var C9e=s($h);rde=n(C9e,"STRONG",{});var Umt=s(rde);Z_o=r(Umt,"transfo-xl"),Umt.forEach(t),euo=r(C9e," \u2014 "),WN=n(C9e,"A",{href:!0});var Jmt=s(WN);ouo=r(Jmt,"TransfoXLTokenizer"),Jmt.forEach(t),ruo=r(C9e," (Transformer-XL model)"),C9e.forEach(t),tuo=i(S),Os=n(S,"LI",{});var IS=s(Os);tde=n(IS,"STRONG",{});var Ymt=s(tde);auo=r(Ymt,"vilt"),Ymt.forEach(t),nuo=r(IS," \u2014 "),QN=n(IS,"A",{href:!0});var Kmt=s(QN);suo=r(Kmt,"BertTokenizer"),Kmt.forEach(t),luo=r(IS," or "),HN=n(IS,"A",{href:!0});var Zmt=s(HN);iuo=r(Zmt,"BertTokenizerFast"),Zmt.forEach(t),duo=r(IS," (ViLT model)"),IS.forEach(t),cuo=i(S),Vs=n(S,"LI",{});var NS=s(Vs);ade=n(NS,"STRONG",{});var egt=s(ade);fuo=r(egt,"visual_bert"),egt.forEach(t),muo=r(NS," \u2014 "),UN=n(NS,"A",{href:!0});var ogt=s(UN);guo=r(ogt,"BertTokenizer"),ogt.forEach(t),huo=r(NS," or "),JN=n(NS,"A",{href:!0});var rgt=s(JN);puo=r(rgt,"BertTokenizerFast"),rgt.forEach(t),_uo=r(NS," (VisualBERT model)"),NS.forEach(t),uuo=i(S),kh=n(S,"LI",{});var w9e=s(kh);nde=n(w9e,"STRONG",{});var tgt=s(nde);buo=r(tgt,"wav2vec2"),tgt.forEach(t),vuo=r(w9e," \u2014 "),YN=n(w9e,"A",{href:!0});var agt=s(YN);Fuo=r(agt,"Wav2Vec2CTCTokenizer"),agt.forEach(t),Tuo=r(w9e," (Wav2Vec2 model)"),w9e.forEach(t),Muo=i(S),Sh=n(S,"LI",{});var A9e=s(Sh);sde=n(A9e,"STRONG",{});var ngt=s(sde);Euo=r(ngt,"wav2vec2-conformer"),ngt.forEach(t),Cuo=r(A9e," \u2014 "),KN=n(A9e,"A",{href:!0});var sgt=s(KN);wuo=r(sgt,"Wav2Vec2CTCTokenizer"),sgt.forEach(t),Auo=r(A9e," (Wav2Vec2-Conformer model)"),A9e.forEach(t),Luo=i(S),Rh=n(S,"LI",{});var L9e=s(Rh);lde=n(L9e,"STRONG",{});var lgt=s(lde);yuo=r(lgt,"wav2vec2_phoneme"),lgt.forEach(t),xuo=r(L9e," \u2014 "),ZN=n(L9e,"A",{href:!0});var igt=s(ZN);$uo=r(igt,"Wav2Vec2PhonemeCTCTokenizer"),igt.forEach(t),kuo=r(L9e," (Wav2Vec2Phoneme model)"),L9e.forEach(t),Suo=i(S),Xs=n(S,"LI",{});var qS=s(Xs);ide=n(qS,"STRONG",{});var dgt=s(ide);Ruo=r(dgt,"xglm"),dgt.forEach(t),Puo=r(qS," \u2014 "),eq=n(qS,"A",{href:!0});var cgt=s(eq);Buo=r(cgt,"XGLMTokenizer"),cgt.forEach(t),Iuo=r(qS," or "),oq=n(qS,"A",{href:!0});var fgt=s(oq);Nuo=r(fgt,"XGLMTokenizerFast"),fgt.forEach(t),quo=r(qS," (XGLM model)"),qS.forEach(t),juo=i(S),Ph=n(S,"LI",{});var y9e=s(Ph);dde=n(y9e,"STRONG",{});var mgt=s(dde);Duo=r(mgt,"xlm"),mgt.forEach(t),Guo=r(y9e," \u2014 "),rq=n(y9e,"A",{href:!0});var ggt=s(rq);Ouo=r(ggt,"XLMTokenizer"),ggt.forEach(t),Vuo=r(y9e," (XLM model)"),y9e.forEach(t),Xuo=i(S),Bh=n(S,"LI",{});var x9e=s(Bh);cde=n(x9e,"STRONG",{});var hgt=s(cde);zuo=r(hgt,"xlm-prophetnet"),hgt.forEach(t),Wuo=r(x9e," \u2014 "),tq=n(x9e,"A",{href:!0});var pgt=s(tq);Quo=r(pgt,"XLMProphetNetTokenizer"),pgt.forEach(t),Huo=r(x9e," (XLM-ProphetNet model)"),x9e.forEach(t),Uuo=i(S),zs=n(S,"LI",{});var jS=s(zs);fde=n(jS,"STRONG",{});var _gt=s(fde);Juo=r(_gt,"xlm-roberta"),_gt.forEach(t),Yuo=r(jS," \u2014 "),aq=n(jS,"A",{href:!0});var ugt=s(aq);Kuo=r(ugt,"XLMRobertaTokenizer"),ugt.forEach(t),Zuo=r(jS," or "),nq=n(jS,"A",{href:!0});var bgt=s(nq);e1o=r(bgt,"XLMRobertaTokenizerFast"),bgt.forEach(t),o1o=r(jS," (XLM-RoBERTa model)"),jS.forEach(t),r1o=i(S),Ws=n(S,"LI",{});var DS=s(Ws);mde=n(DS,"STRONG",{});var vgt=s(mde);t1o=r(vgt,"xlm-roberta-xl"),vgt.forEach(t),a1o=r(DS," \u2014 "),sq=n(DS,"A",{href:!0});var Fgt=s(sq);n1o=r(Fgt,"RobertaTokenizer"),Fgt.forEach(t),s1o=r(DS," or "),lq=n(DS,"A",{href:!0});var Tgt=s(lq);l1o=r(Tgt,"RobertaTokenizerFast"),Tgt.forEach(t),i1o=r(DS," (XLM-RoBERTa-XL model)"),DS.forEach(t),d1o=i(S),Qs=n(S,"LI",{});var GS=s(Qs);gde=n(GS,"STRONG",{});var Mgt=s(gde);c1o=r(Mgt,"xlnet"),Mgt.forEach(t),f1o=r(GS," \u2014 "),iq=n(GS,"A",{href:!0});var Egt=s(iq);m1o=r(Egt,"XLNetTokenizer"),Egt.forEach(t),g1o=r(GS," or "),dq=n(GS,"A",{href:!0});var Cgt=s(dq);h1o=r(Cgt,"XLNetTokenizerFast"),Cgt.forEach(t),p1o=r(GS," (XLNet model)"),GS.forEach(t),_1o=i(S),Hs=n(S,"LI",{});var OS=s(Hs);hde=n(OS,"STRONG",{});var wgt=s(hde);u1o=r(wgt,"yoso"),wgt.forEach(t),b1o=r(OS," \u2014 "),cq=n(OS,"A",{href:!0});var Agt=s(cq);v1o=r(Agt,"AlbertTokenizer"),Agt.forEach(t),F1o=r(OS," or "),fq=n(OS,"A",{href:!0});var Lgt=s(fq);T1o=r(Lgt,"AlbertTokenizerFast"),Lgt.forEach(t),M1o=r(OS," (YOSO model)"),OS.forEach(t),S.forEach(t),E1o=i(ol),T(Ih.$$.fragment,ol),ol.forEach(t),C1o=i(el),Nh=n(el,"DIV",{class:!0});var ZWe=s(Nh);T(yy.$$.fragment,ZWe),w1o=i(ZWe),pde=n(ZWe,"P",{});var ygt=s(pde);A1o=r(ygt,"Register a new tokenizer in this mapping."),ygt.forEach(t),ZWe.forEach(t),el.forEach(t),KXe=i(f),Di=n(f,"H2",{class:!0});var eQe=s(Di);qh=n(eQe,"A",{id:!0,class:!0,href:!0});var xgt=s(qh);_de=n(xgt,"SPAN",{});var $gt=s(_de);T(xy.$$.fragment,$gt),$gt.forEach(t),xgt.forEach(t),L1o=i(eQe),ude=n(eQe,"SPAN",{});var kgt=s(ude);y1o=r(kgt,"AutoFeatureExtractor"),kgt.forEach(t),eQe.forEach(t),ZXe=i(f),xo=n(f,"DIV",{class:!0});var rl=s(xo);T($y.$$.fragment,rl),x1o=i(rl),ky=n(rl,"P",{});var oQe=s(ky);$1o=r(oQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),mq=n(oQe,"A",{href:!0});var Sgt=s(mq);k1o=r(Sgt,"AutoFeatureExtractor.from_pretrained()"),Sgt.forEach(t),S1o=r(oQe," class method."),oQe.forEach(t),R1o=i(rl),Sy=n(rl,"P",{});var rQe=s(Sy);P1o=r(rQe,"This class cannot be instantiated directly using "),bde=n(rQe,"CODE",{});var Rgt=s(bde);B1o=r(Rgt,"__init__()"),Rgt.forEach(t),I1o=r(rQe," (throws an error)."),rQe.forEach(t),N1o=i(rl),Ue=n(rl,"DIV",{class:!0});var na=s(Ue);T(Ry.$$.fragment,na),q1o=i(na),vde=n(na,"P",{});var Pgt=s(vde);j1o=r(Pgt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Pgt.forEach(t),D1o=i(na),Ba=n(na,"P",{});var bA=s(Ba);G1o=r(bA,"The feature extractor class to instantiate is selected based on the "),Fde=n(bA,"CODE",{});var Bgt=s(Fde);O1o=r(Bgt,"model_type"),Bgt.forEach(t),V1o=r(bA,` property of the config object
(either passed as an argument or loaded from `),Tde=n(bA,"CODE",{});var Igt=s(Tde);X1o=r(Igt,"pretrained_model_name_or_path"),Igt.forEach(t),z1o=r(bA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Mde=n(bA,"CODE",{});var Ngt=s(Mde);W1o=r(Ngt,"pretrained_model_name_or_path"),Ngt.forEach(t),Q1o=r(bA,":"),bA.forEach(t),H1o=i(na),J=n(na,"UL",{});var K=s(J);jh=n(K,"LI",{});var $9e=s(jh);Ede=n($9e,"STRONG",{});var qgt=s(Ede);U1o=r(qgt,"beit"),qgt.forEach(t),J1o=r($9e," \u2014 "),gq=n($9e,"A",{href:!0});var jgt=s(gq);Y1o=r(jgt,"BeitFeatureExtractor"),jgt.forEach(t),K1o=r($9e," (BEiT model)"),$9e.forEach(t),Z1o=i(K),Dh=n(K,"LI",{});var k9e=s(Dh);Cde=n(k9e,"STRONG",{});var Dgt=s(Cde);e4o=r(Dgt,"clip"),Dgt.forEach(t),o4o=r(k9e," \u2014 "),hq=n(k9e,"A",{href:!0});var Ggt=s(hq);r4o=r(Ggt,"CLIPFeatureExtractor"),Ggt.forEach(t),t4o=r(k9e," (CLIP model)"),k9e.forEach(t),a4o=i(K),Gh=n(K,"LI",{});var S9e=s(Gh);wde=n(S9e,"STRONG",{});var Ogt=s(wde);n4o=r(Ogt,"convnext"),Ogt.forEach(t),s4o=r(S9e," \u2014 "),pq=n(S9e,"A",{href:!0});var Vgt=s(pq);l4o=r(Vgt,"ConvNextFeatureExtractor"),Vgt.forEach(t),i4o=r(S9e," (ConvNeXT model)"),S9e.forEach(t),d4o=i(K),Oh=n(K,"LI",{});var R9e=s(Oh);Ade=n(R9e,"STRONG",{});var Xgt=s(Ade);c4o=r(Xgt,"cvt"),Xgt.forEach(t),f4o=r(R9e," \u2014 "),_q=n(R9e,"A",{href:!0});var zgt=s(_q);m4o=r(zgt,"ConvNextFeatureExtractor"),zgt.forEach(t),g4o=r(R9e," (CvT model)"),R9e.forEach(t),h4o=i(K),Vh=n(K,"LI",{});var P9e=s(Vh);Lde=n(P9e,"STRONG",{});var Wgt=s(Lde);p4o=r(Wgt,"data2vec-audio"),Wgt.forEach(t),_4o=r(P9e," \u2014 "),uq=n(P9e,"A",{href:!0});var Qgt=s(uq);u4o=r(Qgt,"Wav2Vec2FeatureExtractor"),Qgt.forEach(t),b4o=r(P9e," (Data2VecAudio model)"),P9e.forEach(t),v4o=i(K),Xh=n(K,"LI",{});var B9e=s(Xh);yde=n(B9e,"STRONG",{});var Hgt=s(yde);F4o=r(Hgt,"data2vec-vision"),Hgt.forEach(t),T4o=r(B9e," \u2014 "),bq=n(B9e,"A",{href:!0});var Ugt=s(bq);M4o=r(Ugt,"BeitFeatureExtractor"),Ugt.forEach(t),E4o=r(B9e," (Data2VecVision model)"),B9e.forEach(t),C4o=i(K),zh=n(K,"LI",{});var I9e=s(zh);xde=n(I9e,"STRONG",{});var Jgt=s(xde);w4o=r(Jgt,"deit"),Jgt.forEach(t),A4o=r(I9e," \u2014 "),vq=n(I9e,"A",{href:!0});var Ygt=s(vq);L4o=r(Ygt,"DeiTFeatureExtractor"),Ygt.forEach(t),y4o=r(I9e," (DeiT model)"),I9e.forEach(t),x4o=i(K),Wh=n(K,"LI",{});var N9e=s(Wh);$de=n(N9e,"STRONG",{});var Kgt=s($de);$4o=r(Kgt,"detr"),Kgt.forEach(t),k4o=r(N9e," \u2014 "),Fq=n(N9e,"A",{href:!0});var Zgt=s(Fq);S4o=r(Zgt,"DetrFeatureExtractor"),Zgt.forEach(t),R4o=r(N9e," (DETR model)"),N9e.forEach(t),P4o=i(K),Qh=n(K,"LI",{});var q9e=s(Qh);kde=n(q9e,"STRONG",{});var eht=s(kde);B4o=r(eht,"dpt"),eht.forEach(t),I4o=r(q9e," \u2014 "),Tq=n(q9e,"A",{href:!0});var oht=s(Tq);N4o=r(oht,"DPTFeatureExtractor"),oht.forEach(t),q4o=r(q9e," (DPT model)"),q9e.forEach(t),j4o=i(K),Hh=n(K,"LI",{});var j9e=s(Hh);Sde=n(j9e,"STRONG",{});var rht=s(Sde);D4o=r(rht,"flava"),rht.forEach(t),G4o=r(j9e," \u2014 "),Mq=n(j9e,"A",{href:!0});var tht=s(Mq);O4o=r(tht,"FlavaFeatureExtractor"),tht.forEach(t),V4o=r(j9e," (FLAVA model)"),j9e.forEach(t),X4o=i(K),Uh=n(K,"LI",{});var D9e=s(Uh);Rde=n(D9e,"STRONG",{});var aht=s(Rde);z4o=r(aht,"glpn"),aht.forEach(t),W4o=r(D9e," \u2014 "),Eq=n(D9e,"A",{href:!0});var nht=s(Eq);Q4o=r(nht,"GLPNFeatureExtractor"),nht.forEach(t),H4o=r(D9e," (GLPN model)"),D9e.forEach(t),U4o=i(K),Jh=n(K,"LI",{});var G9e=s(Jh);Pde=n(G9e,"STRONG",{});var sht=s(Pde);J4o=r(sht,"groupvit"),sht.forEach(t),Y4o=r(G9e," \u2014 "),Cq=n(G9e,"A",{href:!0});var lht=s(Cq);K4o=r(lht,"CLIPFeatureExtractor"),lht.forEach(t),Z4o=r(G9e," (GroupViT model)"),G9e.forEach(t),e2o=i(K),Yh=n(K,"LI",{});var O9e=s(Yh);Bde=n(O9e,"STRONG",{});var iht=s(Bde);o2o=r(iht,"hubert"),iht.forEach(t),r2o=r(O9e," \u2014 "),wq=n(O9e,"A",{href:!0});var dht=s(wq);t2o=r(dht,"Wav2Vec2FeatureExtractor"),dht.forEach(t),a2o=r(O9e," (Hubert model)"),O9e.forEach(t),n2o=i(K),Kh=n(K,"LI",{});var V9e=s(Kh);Ide=n(V9e,"STRONG",{});var cht=s(Ide);s2o=r(cht,"imagegpt"),cht.forEach(t),l2o=r(V9e," \u2014 "),Aq=n(V9e,"A",{href:!0});var fht=s(Aq);i2o=r(fht,"ImageGPTFeatureExtractor"),fht.forEach(t),d2o=r(V9e," (ImageGPT model)"),V9e.forEach(t),c2o=i(K),Zh=n(K,"LI",{});var X9e=s(Zh);Nde=n(X9e,"STRONG",{});var mht=s(Nde);f2o=r(mht,"layoutlmv2"),mht.forEach(t),m2o=r(X9e," \u2014 "),Lq=n(X9e,"A",{href:!0});var ght=s(Lq);g2o=r(ght,"LayoutLMv2FeatureExtractor"),ght.forEach(t),h2o=r(X9e," (LayoutLMv2 model)"),X9e.forEach(t),p2o=i(K),ep=n(K,"LI",{});var z9e=s(ep);qde=n(z9e,"STRONG",{});var hht=s(qde);_2o=r(hht,"layoutlmv3"),hht.forEach(t),u2o=r(z9e," \u2014 "),yq=n(z9e,"A",{href:!0});var pht=s(yq);b2o=r(pht,"LayoutLMv3FeatureExtractor"),pht.forEach(t),v2o=r(z9e," (LayoutLMv3 model)"),z9e.forEach(t),F2o=i(K),op=n(K,"LI",{});var W9e=s(op);jde=n(W9e,"STRONG",{});var _ht=s(jde);T2o=r(_ht,"levit"),_ht.forEach(t),M2o=r(W9e," \u2014 "),xq=n(W9e,"A",{href:!0});var uht=s(xq);E2o=r(uht,"LevitFeatureExtractor"),uht.forEach(t),C2o=r(W9e," (LeViT model)"),W9e.forEach(t),w2o=i(K),rp=n(K,"LI",{});var Q9e=s(rp);Dde=n(Q9e,"STRONG",{});var bht=s(Dde);A2o=r(bht,"maskformer"),bht.forEach(t),L2o=r(Q9e," \u2014 "),$q=n(Q9e,"A",{href:!0});var vht=s($q);y2o=r(vht,"MaskFormerFeatureExtractor"),vht.forEach(t),x2o=r(Q9e," (MaskFormer model)"),Q9e.forEach(t),$2o=i(K),tp=n(K,"LI",{});var H9e=s(tp);Gde=n(H9e,"STRONG",{});var Fht=s(Gde);k2o=r(Fht,"mctct"),Fht.forEach(t),S2o=r(H9e," \u2014 "),kq=n(H9e,"A",{href:!0});var Tht=s(kq);R2o=r(Tht,"MCTCTFeatureExtractor"),Tht.forEach(t),P2o=r(H9e," (M-CTC-T model)"),H9e.forEach(t),B2o=i(K),ap=n(K,"LI",{});var U9e=s(ap);Ode=n(U9e,"STRONG",{});var Mht=s(Ode);I2o=r(Mht,"mobilevit"),Mht.forEach(t),N2o=r(U9e," \u2014 "),Sq=n(U9e,"A",{href:!0});var Eht=s(Sq);q2o=r(Eht,"MobileViTFeatureExtractor"),Eht.forEach(t),j2o=r(U9e," (MobileViT model)"),U9e.forEach(t),D2o=i(K),np=n(K,"LI",{});var J9e=s(np);Vde=n(J9e,"STRONG",{});var Cht=s(Vde);G2o=r(Cht,"owlvit"),Cht.forEach(t),O2o=r(J9e," \u2014 "),Rq=n(J9e,"A",{href:!0});var wht=s(Rq);V2o=r(wht,"OwlViTFeatureExtractor"),wht.forEach(t),X2o=r(J9e," (OWL-ViT model)"),J9e.forEach(t),z2o=i(K),sp=n(K,"LI",{});var Y9e=s(sp);Xde=n(Y9e,"STRONG",{});var Aht=s(Xde);W2o=r(Aht,"perceiver"),Aht.forEach(t),Q2o=r(Y9e," \u2014 "),Pq=n(Y9e,"A",{href:!0});var Lht=s(Pq);H2o=r(Lht,"PerceiverFeatureExtractor"),Lht.forEach(t),U2o=r(Y9e," (Perceiver model)"),Y9e.forEach(t),J2o=i(K),lp=n(K,"LI",{});var K9e=s(lp);zde=n(K9e,"STRONG",{});var yht=s(zde);Y2o=r(yht,"poolformer"),yht.forEach(t),K2o=r(K9e," \u2014 "),Bq=n(K9e,"A",{href:!0});var xht=s(Bq);Z2o=r(xht,"PoolFormerFeatureExtractor"),xht.forEach(t),ebo=r(K9e," (PoolFormer model)"),K9e.forEach(t),obo=i(K),ip=n(K,"LI",{});var Z9e=s(ip);Wde=n(Z9e,"STRONG",{});var $ht=s(Wde);rbo=r($ht,"regnet"),$ht.forEach(t),tbo=r(Z9e," \u2014 "),Iq=n(Z9e,"A",{href:!0});var kht=s(Iq);abo=r(kht,"ConvNextFeatureExtractor"),kht.forEach(t),nbo=r(Z9e," (RegNet model)"),Z9e.forEach(t),sbo=i(K),dp=n(K,"LI",{});var exe=s(dp);Qde=n(exe,"STRONG",{});var Sht=s(Qde);lbo=r(Sht,"resnet"),Sht.forEach(t),ibo=r(exe," \u2014 "),Nq=n(exe,"A",{href:!0});var Rht=s(Nq);dbo=r(Rht,"ConvNextFeatureExtractor"),Rht.forEach(t),cbo=r(exe," (ResNet model)"),exe.forEach(t),fbo=i(K),cp=n(K,"LI",{});var oxe=s(cp);Hde=n(oxe,"STRONG",{});var Pht=s(Hde);mbo=r(Pht,"segformer"),Pht.forEach(t),gbo=r(oxe," \u2014 "),qq=n(oxe,"A",{href:!0});var Bht=s(qq);hbo=r(Bht,"SegformerFeatureExtractor"),Bht.forEach(t),pbo=r(oxe," (SegFormer model)"),oxe.forEach(t),_bo=i(K),fp=n(K,"LI",{});var rxe=s(fp);Ude=n(rxe,"STRONG",{});var Iht=s(Ude);ubo=r(Iht,"speech_to_text"),Iht.forEach(t),bbo=r(rxe," \u2014 "),jq=n(rxe,"A",{href:!0});var Nht=s(jq);vbo=r(Nht,"Speech2TextFeatureExtractor"),Nht.forEach(t),Fbo=r(rxe," (Speech2Text model)"),rxe.forEach(t),Tbo=i(K),mp=n(K,"LI",{});var txe=s(mp);Jde=n(txe,"STRONG",{});var qht=s(Jde);Mbo=r(qht,"swin"),qht.forEach(t),Ebo=r(txe," \u2014 "),Dq=n(txe,"A",{href:!0});var jht=s(Dq);Cbo=r(jht,"ViTFeatureExtractor"),jht.forEach(t),wbo=r(txe," (Swin Transformer model)"),txe.forEach(t),Abo=i(K),gp=n(K,"LI",{});var axe=s(gp);Yde=n(axe,"STRONG",{});var Dht=s(Yde);Lbo=r(Dht,"van"),Dht.forEach(t),ybo=r(axe," \u2014 "),Gq=n(axe,"A",{href:!0});var Ght=s(Gq);xbo=r(Ght,"ConvNextFeatureExtractor"),Ght.forEach(t),$bo=r(axe," (VAN model)"),axe.forEach(t),kbo=i(K),hp=n(K,"LI",{});var nxe=s(hp);Kde=n(nxe,"STRONG",{});var Oht=s(Kde);Sbo=r(Oht,"vilt"),Oht.forEach(t),Rbo=r(nxe," \u2014 "),Oq=n(nxe,"A",{href:!0});var Vht=s(Oq);Pbo=r(Vht,"ViltFeatureExtractor"),Vht.forEach(t),Bbo=r(nxe," (ViLT model)"),nxe.forEach(t),Ibo=i(K),pp=n(K,"LI",{});var sxe=s(pp);Zde=n(sxe,"STRONG",{});var Xht=s(Zde);Nbo=r(Xht,"vit"),Xht.forEach(t),qbo=r(sxe," \u2014 "),Vq=n(sxe,"A",{href:!0});var zht=s(Vq);jbo=r(zht,"ViTFeatureExtractor"),zht.forEach(t),Dbo=r(sxe," (ViT model)"),sxe.forEach(t),Gbo=i(K),_p=n(K,"LI",{});var lxe=s(_p);ece=n(lxe,"STRONG",{});var Wht=s(ece);Obo=r(Wht,"vit_mae"),Wht.forEach(t),Vbo=r(lxe," \u2014 "),Xq=n(lxe,"A",{href:!0});var Qht=s(Xq);Xbo=r(Qht,"ViTFeatureExtractor"),Qht.forEach(t),zbo=r(lxe," (ViTMAE model)"),lxe.forEach(t),Wbo=i(K),up=n(K,"LI",{});var ixe=s(up);oce=n(ixe,"STRONG",{});var Hht=s(oce);Qbo=r(Hht,"wav2vec2"),Hht.forEach(t),Hbo=r(ixe," \u2014 "),zq=n(ixe,"A",{href:!0});var Uht=s(zq);Ubo=r(Uht,"Wav2Vec2FeatureExtractor"),Uht.forEach(t),Jbo=r(ixe," (Wav2Vec2 model)"),ixe.forEach(t),Ybo=i(K),bp=n(K,"LI",{});var dxe=s(bp);rce=n(dxe,"STRONG",{});var Jht=s(rce);Kbo=r(Jht,"wav2vec2-conformer"),Jht.forEach(t),Zbo=r(dxe," \u2014 "),Wq=n(dxe,"A",{href:!0});var Yht=s(Wq);evo=r(Yht,"Wav2Vec2FeatureExtractor"),Yht.forEach(t),ovo=r(dxe," (Wav2Vec2-Conformer model)"),dxe.forEach(t),rvo=i(K),vp=n(K,"LI",{});var cxe=s(vp);tce=n(cxe,"STRONG",{});var Kht=s(tce);tvo=r(Kht,"yolos"),Kht.forEach(t),avo=r(cxe," \u2014 "),Qq=n(cxe,"A",{href:!0});var Zht=s(Qq);nvo=r(Zht,"YolosFeatureExtractor"),Zht.forEach(t),svo=r(cxe," (YOLOS model)"),cxe.forEach(t),K.forEach(t),lvo=i(na),T(Fp.$$.fragment,na),ivo=i(na),T(Tp.$$.fragment,na),na.forEach(t),dvo=i(rl),Mp=n(rl,"DIV",{class:!0});var tQe=s(Mp);T(Py.$$.fragment,tQe),cvo=i(tQe),ace=n(tQe,"P",{});var ept=s(ace);fvo=r(ept,"Register a new feature extractor for this class."),ept.forEach(t),tQe.forEach(t),rl.forEach(t),eze=i(f),Gi=n(f,"H2",{class:!0});var aQe=s(Gi);Ep=n(aQe,"A",{id:!0,class:!0,href:!0});var opt=s(Ep);nce=n(opt,"SPAN",{});var rpt=s(nce);T(By.$$.fragment,rpt),rpt.forEach(t),opt.forEach(t),mvo=i(aQe),sce=n(aQe,"SPAN",{});var tpt=s(sce);gvo=r(tpt,"AutoProcessor"),tpt.forEach(t),aQe.forEach(t),oze=i(f),$o=n(f,"DIV",{class:!0});var tl=s($o);T(Iy.$$.fragment,tl),hvo=i(tl),Ny=n(tl,"P",{});var nQe=s(Ny);pvo=r(nQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Hq=n(nQe,"A",{href:!0});var apt=s(Hq);_vo=r(apt,"AutoProcessor.from_pretrained()"),apt.forEach(t),uvo=r(nQe," class method."),nQe.forEach(t),bvo=i(tl),qy=n(tl,"P",{});var sQe=s(qy);vvo=r(sQe,"This class cannot be instantiated directly using "),lce=n(sQe,"CODE",{});var npt=s(lce);Fvo=r(npt,"__init__()"),npt.forEach(t),Tvo=r(sQe," (throws an error)."),sQe.forEach(t),Mvo=i(tl),Je=n(tl,"DIV",{class:!0});var sa=s(Je);T(jy.$$.fragment,sa),Evo=i(sa),ice=n(sa,"P",{});var spt=s(ice);Cvo=r(spt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),spt.forEach(t),wvo=i(sa),Oi=n(sa,"P",{});var tte=s(Oi);Avo=r(tte,"The processor class to instantiate is selected based on the "),dce=n(tte,"CODE",{});var lpt=s(dce);Lvo=r(lpt,"model_type"),lpt.forEach(t),yvo=r(tte,` property of the config object (either
passed as an argument or loaded from `),cce=n(tte,"CODE",{});var ipt=s(cce);xvo=r(ipt,"pretrained_model_name_or_path"),ipt.forEach(t),$vo=r(tte," if possible):"),tte.forEach(t),kvo=i(sa),fe=n(sa,"UL",{});var _e=s(fe);Cp=n(_e,"LI",{});var fxe=s(Cp);fce=n(fxe,"STRONG",{});var dpt=s(fce);Svo=r(dpt,"clip"),dpt.forEach(t),Rvo=r(fxe," \u2014 "),Uq=n(fxe,"A",{href:!0});var cpt=s(Uq);Pvo=r(cpt,"CLIPProcessor"),cpt.forEach(t),Bvo=r(fxe," (CLIP model)"),fxe.forEach(t),Ivo=i(_e),wp=n(_e,"LI",{});var mxe=s(wp);mce=n(mxe,"STRONG",{});var fpt=s(mce);Nvo=r(fpt,"flava"),fpt.forEach(t),qvo=r(mxe," \u2014 "),Jq=n(mxe,"A",{href:!0});var mpt=s(Jq);jvo=r(mpt,"FlavaProcessor"),mpt.forEach(t),Dvo=r(mxe," (FLAVA model)"),mxe.forEach(t),Gvo=i(_e),Ap=n(_e,"LI",{});var gxe=s(Ap);gce=n(gxe,"STRONG",{});var gpt=s(gce);Ovo=r(gpt,"groupvit"),gpt.forEach(t),Vvo=r(gxe," \u2014 "),Yq=n(gxe,"A",{href:!0});var hpt=s(Yq);Xvo=r(hpt,"CLIPProcessor"),hpt.forEach(t),zvo=r(gxe," (GroupViT model)"),gxe.forEach(t),Wvo=i(_e),Lp=n(_e,"LI",{});var hxe=s(Lp);hce=n(hxe,"STRONG",{});var ppt=s(hce);Qvo=r(ppt,"layoutlmv2"),ppt.forEach(t),Hvo=r(hxe," \u2014 "),Kq=n(hxe,"A",{href:!0});var _pt=s(Kq);Uvo=r(_pt,"LayoutLMv2Processor"),_pt.forEach(t),Jvo=r(hxe," (LayoutLMv2 model)"),hxe.forEach(t),Yvo=i(_e),yp=n(_e,"LI",{});var pxe=s(yp);pce=n(pxe,"STRONG",{});var upt=s(pce);Kvo=r(upt,"layoutlmv3"),upt.forEach(t),Zvo=r(pxe," \u2014 "),Zq=n(pxe,"A",{href:!0});var bpt=s(Zq);e0o=r(bpt,"LayoutLMv3Processor"),bpt.forEach(t),o0o=r(pxe," (LayoutLMv3 model)"),pxe.forEach(t),r0o=i(_e),xp=n(_e,"LI",{});var _xe=s(xp);_ce=n(_xe,"STRONG",{});var vpt=s(_ce);t0o=r(vpt,"layoutxlm"),vpt.forEach(t),a0o=r(_xe," \u2014 "),ej=n(_xe,"A",{href:!0});var Fpt=s(ej);n0o=r(Fpt,"LayoutXLMProcessor"),Fpt.forEach(t),s0o=r(_xe," (LayoutXLM model)"),_xe.forEach(t),l0o=i(_e),$p=n(_e,"LI",{});var uxe=s($p);uce=n(uxe,"STRONG",{});var Tpt=s(uce);i0o=r(Tpt,"owlvit"),Tpt.forEach(t),d0o=r(uxe," \u2014 "),oj=n(uxe,"A",{href:!0});var Mpt=s(oj);c0o=r(Mpt,"OwlViTProcessor"),Mpt.forEach(t),f0o=r(uxe," (OWL-ViT model)"),uxe.forEach(t),m0o=i(_e),kp=n(_e,"LI",{});var bxe=s(kp);bce=n(bxe,"STRONG",{});var Ept=s(bce);g0o=r(Ept,"sew"),Ept.forEach(t),h0o=r(bxe," \u2014 "),rj=n(bxe,"A",{href:!0});var Cpt=s(rj);p0o=r(Cpt,"Wav2Vec2Processor"),Cpt.forEach(t),_0o=r(bxe," (SEW model)"),bxe.forEach(t),u0o=i(_e),Sp=n(_e,"LI",{});var vxe=s(Sp);vce=n(vxe,"STRONG",{});var wpt=s(vce);b0o=r(wpt,"sew-d"),wpt.forEach(t),v0o=r(vxe," \u2014 "),tj=n(vxe,"A",{href:!0});var Apt=s(tj);F0o=r(Apt,"Wav2Vec2Processor"),Apt.forEach(t),T0o=r(vxe," (SEW-D model)"),vxe.forEach(t),M0o=i(_e),Rp=n(_e,"LI",{});var Fxe=s(Rp);Fce=n(Fxe,"STRONG",{});var Lpt=s(Fce);E0o=r(Lpt,"speech_to_text"),Lpt.forEach(t),C0o=r(Fxe," \u2014 "),aj=n(Fxe,"A",{href:!0});var ypt=s(aj);w0o=r(ypt,"Speech2TextProcessor"),ypt.forEach(t),A0o=r(Fxe," (Speech2Text model)"),Fxe.forEach(t),L0o=i(_e),Pp=n(_e,"LI",{});var Txe=s(Pp);Tce=n(Txe,"STRONG",{});var xpt=s(Tce);y0o=r(xpt,"speech_to_text_2"),xpt.forEach(t),x0o=r(Txe," \u2014 "),nj=n(Txe,"A",{href:!0});var $pt=s(nj);$0o=r($pt,"Speech2Text2Processor"),$pt.forEach(t),k0o=r(Txe," (Speech2Text2 model)"),Txe.forEach(t),S0o=i(_e),Bp=n(_e,"LI",{});var Mxe=s(Bp);Mce=n(Mxe,"STRONG",{});var kpt=s(Mce);R0o=r(kpt,"trocr"),kpt.forEach(t),P0o=r(Mxe," \u2014 "),sj=n(Mxe,"A",{href:!0});var Spt=s(sj);B0o=r(Spt,"TrOCRProcessor"),Spt.forEach(t),I0o=r(Mxe," (TrOCR model)"),Mxe.forEach(t),N0o=i(_e),Ip=n(_e,"LI",{});var Exe=s(Ip);Ece=n(Exe,"STRONG",{});var Rpt=s(Ece);q0o=r(Rpt,"unispeech"),Rpt.forEach(t),j0o=r(Exe," \u2014 "),lj=n(Exe,"A",{href:!0});var Ppt=s(lj);D0o=r(Ppt,"Wav2Vec2Processor"),Ppt.forEach(t),G0o=r(Exe," (UniSpeech model)"),Exe.forEach(t),O0o=i(_e),Np=n(_e,"LI",{});var Cxe=s(Np);Cce=n(Cxe,"STRONG",{});var Bpt=s(Cce);V0o=r(Bpt,"unispeech-sat"),Bpt.forEach(t),X0o=r(Cxe," \u2014 "),ij=n(Cxe,"A",{href:!0});var Ipt=s(ij);z0o=r(Ipt,"Wav2Vec2Processor"),Ipt.forEach(t),W0o=r(Cxe," (UniSpeechSat model)"),Cxe.forEach(t),Q0o=i(_e),qp=n(_e,"LI",{});var wxe=s(qp);wce=n(wxe,"STRONG",{});var Npt=s(wce);H0o=r(Npt,"vilt"),Npt.forEach(t),U0o=r(wxe," \u2014 "),dj=n(wxe,"A",{href:!0});var qpt=s(dj);J0o=r(qpt,"ViltProcessor"),qpt.forEach(t),Y0o=r(wxe," (ViLT model)"),wxe.forEach(t),K0o=i(_e),jp=n(_e,"LI",{});var Axe=s(jp);Ace=n(Axe,"STRONG",{});var jpt=s(Ace);Z0o=r(jpt,"vision-text-dual-encoder"),jpt.forEach(t),eFo=r(Axe," \u2014 "),cj=n(Axe,"A",{href:!0});var Dpt=s(cj);oFo=r(Dpt,"VisionTextDualEncoderProcessor"),Dpt.forEach(t),rFo=r(Axe," (VisionTextDualEncoder model)"),Axe.forEach(t),tFo=i(_e),Dp=n(_e,"LI",{});var Lxe=s(Dp);Lce=n(Lxe,"STRONG",{});var Gpt=s(Lce);aFo=r(Gpt,"wav2vec2"),Gpt.forEach(t),nFo=r(Lxe," \u2014 "),fj=n(Lxe,"A",{href:!0});var Opt=s(fj);sFo=r(Opt,"Wav2Vec2Processor"),Opt.forEach(t),lFo=r(Lxe," (Wav2Vec2 model)"),Lxe.forEach(t),iFo=i(_e),Gp=n(_e,"LI",{});var yxe=s(Gp);yce=n(yxe,"STRONG",{});var Vpt=s(yce);dFo=r(Vpt,"wav2vec2-conformer"),Vpt.forEach(t),cFo=r(yxe," \u2014 "),mj=n(yxe,"A",{href:!0});var Xpt=s(mj);fFo=r(Xpt,"Wav2Vec2Processor"),Xpt.forEach(t),mFo=r(yxe," (Wav2Vec2-Conformer model)"),yxe.forEach(t),gFo=i(_e),Op=n(_e,"LI",{});var xxe=s(Op);xce=n(xxe,"STRONG",{});var zpt=s(xce);hFo=r(zpt,"wavlm"),zpt.forEach(t),pFo=r(xxe," \u2014 "),gj=n(xxe,"A",{href:!0});var Wpt=s(gj);_Fo=r(Wpt,"Wav2Vec2Processor"),Wpt.forEach(t),uFo=r(xxe," (WavLM model)"),xxe.forEach(t),_e.forEach(t),bFo=i(sa),T(Vp.$$.fragment,sa),vFo=i(sa),T(Xp.$$.fragment,sa),sa.forEach(t),FFo=i(tl),zp=n(tl,"DIV",{class:!0});var lQe=s(zp);T(Dy.$$.fragment,lQe),TFo=i(lQe),$ce=n(lQe,"P",{});var Qpt=s($ce);MFo=r(Qpt,"Register a new processor for this class."),Qpt.forEach(t),lQe.forEach(t),tl.forEach(t),rze=i(f),Vi=n(f,"H2",{class:!0});var iQe=s(Vi);Wp=n(iQe,"A",{id:!0,class:!0,href:!0});var Hpt=s(Wp);kce=n(Hpt,"SPAN",{});var Upt=s(kce);T(Gy.$$.fragment,Upt),Upt.forEach(t),Hpt.forEach(t),EFo=i(iQe),Sce=n(iQe,"SPAN",{});var Jpt=s(Sce);CFo=r(Jpt,"AutoModel"),Jpt.forEach(t),iQe.forEach(t),tze=i(f),ko=n(f,"DIV",{class:!0});var al=s(ko);T(Oy.$$.fragment,al),wFo=i(al),Xi=n(al,"P",{});var ate=s(Xi);AFo=r(ate,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hj=n(ate,"A",{href:!0});var Ypt=s(hj);LFo=r(Ypt,"from_pretrained()"),Ypt.forEach(t),yFo=r(ate," class method or the "),pj=n(ate,"A",{href:!0});var Kpt=s(pj);xFo=r(Kpt,"from_config()"),Kpt.forEach(t),$Fo=r(ate,` class
method.`),ate.forEach(t),kFo=i(al),Vy=n(al,"P",{});var dQe=s(Vy);SFo=r(dQe,"This class cannot be instantiated directly using "),Rce=n(dQe,"CODE",{});var Zpt=s(Rce);RFo=r(Zpt,"__init__()"),Zpt.forEach(t),PFo=r(dQe," (throws an error)."),dQe.forEach(t),BFo=i(al),it=n(al,"DIV",{class:!0});var vA=s(it);T(Xy.$$.fragment,vA),IFo=i(vA),Pce=n(vA,"P",{});var e_t=s(Pce);NFo=r(e_t,"Instantiates one of the base model classes of the library from a configuration."),e_t.forEach(t),qFo=i(vA),zi=n(vA,"P",{});var nte=s(zi);jFo=r(nte,`Note:
Loading a model from its configuration file does `),Bce=n(nte,"STRONG",{});var o_t=s(Bce);DFo=r(o_t,"not"),o_t.forEach(t),GFo=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),_j=n(nte,"A",{href:!0});var r_t=s(_j);OFo=r(r_t,"from_pretrained()"),r_t.forEach(t),VFo=r(nte," to load the model weights."),nte.forEach(t),XFo=i(vA),T(Qp.$$.fragment,vA),vA.forEach(t),zFo=i(al),Ye=n(al,"DIV",{class:!0});var la=s(Ye);T(zy.$$.fragment,la),WFo=i(la),Ice=n(la,"P",{});var t_t=s(Ice);QFo=r(t_t,"Instantiate one of the base model classes of the library from a pretrained model."),t_t.forEach(t),HFo=i(la),Ia=n(la,"P",{});var FA=s(Ia);UFo=r(FA,"The model class to instantiate is selected based on the "),Nce=n(FA,"CODE",{});var a_t=s(Nce);JFo=r(a_t,"model_type"),a_t.forEach(t),YFo=r(FA,` property of the config object (either
passed as an argument or loaded from `),qce=n(FA,"CODE",{});var n_t=s(qce);KFo=r(n_t,"pretrained_model_name_or_path"),n_t.forEach(t),ZFo=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=n(FA,"CODE",{});var s_t=s(jce);e6o=r(s_t,"pretrained_model_name_or_path"),s_t.forEach(t),o6o=r(FA,":"),FA.forEach(t),r6o=i(la),y=n(la,"UL",{});var x=s(y);Hp=n(x,"LI",{});var $xe=s(Hp);Dce=n($xe,"STRONG",{});var l_t=s(Dce);t6o=r(l_t,"albert"),l_t.forEach(t),a6o=r($xe," \u2014 "),uj=n($xe,"A",{href:!0});var i_t=s(uj);n6o=r(i_t,"AlbertModel"),i_t.forEach(t),s6o=r($xe," (ALBERT model)"),$xe.forEach(t),l6o=i(x),Up=n(x,"LI",{});var kxe=s(Up);Gce=n(kxe,"STRONG",{});var d_t=s(Gce);i6o=r(d_t,"bart"),d_t.forEach(t),d6o=r(kxe," \u2014 "),bj=n(kxe,"A",{href:!0});var c_t=s(bj);c6o=r(c_t,"BartModel"),c_t.forEach(t),f6o=r(kxe," (BART model)"),kxe.forEach(t),m6o=i(x),Jp=n(x,"LI",{});var Sxe=s(Jp);Oce=n(Sxe,"STRONG",{});var f_t=s(Oce);g6o=r(f_t,"beit"),f_t.forEach(t),h6o=r(Sxe," \u2014 "),vj=n(Sxe,"A",{href:!0});var m_t=s(vj);p6o=r(m_t,"BeitModel"),m_t.forEach(t),_6o=r(Sxe," (BEiT model)"),Sxe.forEach(t),u6o=i(x),Yp=n(x,"LI",{});var Rxe=s(Yp);Vce=n(Rxe,"STRONG",{});var g_t=s(Vce);b6o=r(g_t,"bert"),g_t.forEach(t),v6o=r(Rxe," \u2014 "),Fj=n(Rxe,"A",{href:!0});var h_t=s(Fj);F6o=r(h_t,"BertModel"),h_t.forEach(t),T6o=r(Rxe," (BERT model)"),Rxe.forEach(t),M6o=i(x),Kp=n(x,"LI",{});var Pxe=s(Kp);Xce=n(Pxe,"STRONG",{});var p_t=s(Xce);E6o=r(p_t,"bert-generation"),p_t.forEach(t),C6o=r(Pxe," \u2014 "),Tj=n(Pxe,"A",{href:!0});var __t=s(Tj);w6o=r(__t,"BertGenerationEncoder"),__t.forEach(t),A6o=r(Pxe," (Bert Generation model)"),Pxe.forEach(t),L6o=i(x),Zp=n(x,"LI",{});var Bxe=s(Zp);zce=n(Bxe,"STRONG",{});var u_t=s(zce);y6o=r(u_t,"big_bird"),u_t.forEach(t),x6o=r(Bxe," \u2014 "),Mj=n(Bxe,"A",{href:!0});var b_t=s(Mj);$6o=r(b_t,"BigBirdModel"),b_t.forEach(t),k6o=r(Bxe," (BigBird model)"),Bxe.forEach(t),S6o=i(x),e_=n(x,"LI",{});var Ixe=s(e_);Wce=n(Ixe,"STRONG",{});var v_t=s(Wce);R6o=r(v_t,"bigbird_pegasus"),v_t.forEach(t),P6o=r(Ixe," \u2014 "),Ej=n(Ixe,"A",{href:!0});var F_t=s(Ej);B6o=r(F_t,"BigBirdPegasusModel"),F_t.forEach(t),I6o=r(Ixe," (BigBird-Pegasus model)"),Ixe.forEach(t),N6o=i(x),o_=n(x,"LI",{});var Nxe=s(o_);Qce=n(Nxe,"STRONG",{});var T_t=s(Qce);q6o=r(T_t,"blenderbot"),T_t.forEach(t),j6o=r(Nxe," \u2014 "),Cj=n(Nxe,"A",{href:!0});var M_t=s(Cj);D6o=r(M_t,"BlenderbotModel"),M_t.forEach(t),G6o=r(Nxe," (Blenderbot model)"),Nxe.forEach(t),O6o=i(x),r_=n(x,"LI",{});var qxe=s(r_);Hce=n(qxe,"STRONG",{});var E_t=s(Hce);V6o=r(E_t,"blenderbot-small"),E_t.forEach(t),X6o=r(qxe," \u2014 "),wj=n(qxe,"A",{href:!0});var C_t=s(wj);z6o=r(C_t,"BlenderbotSmallModel"),C_t.forEach(t),W6o=r(qxe," (BlenderbotSmall model)"),qxe.forEach(t),Q6o=i(x),t_=n(x,"LI",{});var jxe=s(t_);Uce=n(jxe,"STRONG",{});var w_t=s(Uce);H6o=r(w_t,"bloom"),w_t.forEach(t),U6o=r(jxe," \u2014 "),Aj=n(jxe,"A",{href:!0});var A_t=s(Aj);J6o=r(A_t,"BloomModel"),A_t.forEach(t),Y6o=r(jxe," (BLOOM model)"),jxe.forEach(t),K6o=i(x),a_=n(x,"LI",{});var Dxe=s(a_);Jce=n(Dxe,"STRONG",{});var L_t=s(Jce);Z6o=r(L_t,"camembert"),L_t.forEach(t),eTo=r(Dxe," \u2014 "),Lj=n(Dxe,"A",{href:!0});var y_t=s(Lj);oTo=r(y_t,"CamembertModel"),y_t.forEach(t),rTo=r(Dxe," (CamemBERT model)"),Dxe.forEach(t),tTo=i(x),n_=n(x,"LI",{});var Gxe=s(n_);Yce=n(Gxe,"STRONG",{});var x_t=s(Yce);aTo=r(x_t,"canine"),x_t.forEach(t),nTo=r(Gxe," \u2014 "),yj=n(Gxe,"A",{href:!0});var $_t=s(yj);sTo=r($_t,"CanineModel"),$_t.forEach(t),lTo=r(Gxe," (CANINE model)"),Gxe.forEach(t),iTo=i(x),s_=n(x,"LI",{});var Oxe=s(s_);Kce=n(Oxe,"STRONG",{});var k_t=s(Kce);dTo=r(k_t,"clip"),k_t.forEach(t),cTo=r(Oxe," \u2014 "),xj=n(Oxe,"A",{href:!0});var S_t=s(xj);fTo=r(S_t,"CLIPModel"),S_t.forEach(t),mTo=r(Oxe," (CLIP model)"),Oxe.forEach(t),gTo=i(x),l_=n(x,"LI",{});var Vxe=s(l_);Zce=n(Vxe,"STRONG",{});var R_t=s(Zce);hTo=r(R_t,"codegen"),R_t.forEach(t),pTo=r(Vxe," \u2014 "),$j=n(Vxe,"A",{href:!0});var P_t=s($j);_To=r(P_t,"CodeGenModel"),P_t.forEach(t),uTo=r(Vxe," (CodeGen model)"),Vxe.forEach(t),bTo=i(x),i_=n(x,"LI",{});var Xxe=s(i_);efe=n(Xxe,"STRONG",{});var B_t=s(efe);vTo=r(B_t,"convbert"),B_t.forEach(t),FTo=r(Xxe," \u2014 "),kj=n(Xxe,"A",{href:!0});var I_t=s(kj);TTo=r(I_t,"ConvBertModel"),I_t.forEach(t),MTo=r(Xxe," (ConvBERT model)"),Xxe.forEach(t),ETo=i(x),d_=n(x,"LI",{});var zxe=s(d_);ofe=n(zxe,"STRONG",{});var N_t=s(ofe);CTo=r(N_t,"convnext"),N_t.forEach(t),wTo=r(zxe," \u2014 "),Sj=n(zxe,"A",{href:!0});var q_t=s(Sj);ATo=r(q_t,"ConvNextModel"),q_t.forEach(t),LTo=r(zxe," (ConvNeXT model)"),zxe.forEach(t),yTo=i(x),c_=n(x,"LI",{});var Wxe=s(c_);rfe=n(Wxe,"STRONG",{});var j_t=s(rfe);xTo=r(j_t,"ctrl"),j_t.forEach(t),$To=r(Wxe," \u2014 "),Rj=n(Wxe,"A",{href:!0});var D_t=s(Rj);kTo=r(D_t,"CTRLModel"),D_t.forEach(t),STo=r(Wxe," (CTRL model)"),Wxe.forEach(t),RTo=i(x),f_=n(x,"LI",{});var Qxe=s(f_);tfe=n(Qxe,"STRONG",{});var G_t=s(tfe);PTo=r(G_t,"cvt"),G_t.forEach(t),BTo=r(Qxe," \u2014 "),Pj=n(Qxe,"A",{href:!0});var O_t=s(Pj);ITo=r(O_t,"CvtModel"),O_t.forEach(t),NTo=r(Qxe," (CvT model)"),Qxe.forEach(t),qTo=i(x),m_=n(x,"LI",{});var Hxe=s(m_);afe=n(Hxe,"STRONG",{});var V_t=s(afe);jTo=r(V_t,"data2vec-audio"),V_t.forEach(t),DTo=r(Hxe," \u2014 "),Bj=n(Hxe,"A",{href:!0});var X_t=s(Bj);GTo=r(X_t,"Data2VecAudioModel"),X_t.forEach(t),OTo=r(Hxe," (Data2VecAudio model)"),Hxe.forEach(t),VTo=i(x),g_=n(x,"LI",{});var Uxe=s(g_);nfe=n(Uxe,"STRONG",{});var z_t=s(nfe);XTo=r(z_t,"data2vec-text"),z_t.forEach(t),zTo=r(Uxe," \u2014 "),Ij=n(Uxe,"A",{href:!0});var W_t=s(Ij);WTo=r(W_t,"Data2VecTextModel"),W_t.forEach(t),QTo=r(Uxe," (Data2VecText model)"),Uxe.forEach(t),HTo=i(x),h_=n(x,"LI",{});var Jxe=s(h_);sfe=n(Jxe,"STRONG",{});var Q_t=s(sfe);UTo=r(Q_t,"data2vec-vision"),Q_t.forEach(t),JTo=r(Jxe," \u2014 "),Nj=n(Jxe,"A",{href:!0});var H_t=s(Nj);YTo=r(H_t,"Data2VecVisionModel"),H_t.forEach(t),KTo=r(Jxe," (Data2VecVision model)"),Jxe.forEach(t),ZTo=i(x),p_=n(x,"LI",{});var Yxe=s(p_);lfe=n(Yxe,"STRONG",{});var U_t=s(lfe);e7o=r(U_t,"deberta"),U_t.forEach(t),o7o=r(Yxe," \u2014 "),qj=n(Yxe,"A",{href:!0});var J_t=s(qj);r7o=r(J_t,"DebertaModel"),J_t.forEach(t),t7o=r(Yxe," (DeBERTa model)"),Yxe.forEach(t),a7o=i(x),__=n(x,"LI",{});var Kxe=s(__);ife=n(Kxe,"STRONG",{});var Y_t=s(ife);n7o=r(Y_t,"deberta-v2"),Y_t.forEach(t),s7o=r(Kxe," \u2014 "),jj=n(Kxe,"A",{href:!0});var K_t=s(jj);l7o=r(K_t,"DebertaV2Model"),K_t.forEach(t),i7o=r(Kxe," (DeBERTa-v2 model)"),Kxe.forEach(t),d7o=i(x),u_=n(x,"LI",{});var Zxe=s(u_);dfe=n(Zxe,"STRONG",{});var Z_t=s(dfe);c7o=r(Z_t,"decision_transformer"),Z_t.forEach(t),f7o=r(Zxe," \u2014 "),Dj=n(Zxe,"A",{href:!0});var eut=s(Dj);m7o=r(eut,"DecisionTransformerModel"),eut.forEach(t),g7o=r(Zxe," (Decision Transformer model)"),Zxe.forEach(t),h7o=i(x),b_=n(x,"LI",{});var e$e=s(b_);cfe=n(e$e,"STRONG",{});var out=s(cfe);p7o=r(out,"deit"),out.forEach(t),_7o=r(e$e," \u2014 "),Gj=n(e$e,"A",{href:!0});var rut=s(Gj);u7o=r(rut,"DeiTModel"),rut.forEach(t),b7o=r(e$e," (DeiT model)"),e$e.forEach(t),v7o=i(x),v_=n(x,"LI",{});var o$e=s(v_);ffe=n(o$e,"STRONG",{});var tut=s(ffe);F7o=r(tut,"detr"),tut.forEach(t),T7o=r(o$e," \u2014 "),Oj=n(o$e,"A",{href:!0});var aut=s(Oj);M7o=r(aut,"DetrModel"),aut.forEach(t),E7o=r(o$e," (DETR model)"),o$e.forEach(t),C7o=i(x),F_=n(x,"LI",{});var r$e=s(F_);mfe=n(r$e,"STRONG",{});var nut=s(mfe);w7o=r(nut,"distilbert"),nut.forEach(t),A7o=r(r$e," \u2014 "),Vj=n(r$e,"A",{href:!0});var sut=s(Vj);L7o=r(sut,"DistilBertModel"),sut.forEach(t),y7o=r(r$e," (DistilBERT model)"),r$e.forEach(t),x7o=i(x),T_=n(x,"LI",{});var t$e=s(T_);gfe=n(t$e,"STRONG",{});var lut=s(gfe);$7o=r(lut,"dpr"),lut.forEach(t),k7o=r(t$e," \u2014 "),Xj=n(t$e,"A",{href:!0});var iut=s(Xj);S7o=r(iut,"DPRQuestionEncoder"),iut.forEach(t),R7o=r(t$e," (DPR model)"),t$e.forEach(t),P7o=i(x),M_=n(x,"LI",{});var a$e=s(M_);hfe=n(a$e,"STRONG",{});var dut=s(hfe);B7o=r(dut,"dpt"),dut.forEach(t),I7o=r(a$e," \u2014 "),zj=n(a$e,"A",{href:!0});var cut=s(zj);N7o=r(cut,"DPTModel"),cut.forEach(t),q7o=r(a$e," (DPT model)"),a$e.forEach(t),j7o=i(x),E_=n(x,"LI",{});var n$e=s(E_);pfe=n(n$e,"STRONG",{});var fut=s(pfe);D7o=r(fut,"electra"),fut.forEach(t),G7o=r(n$e," \u2014 "),Wj=n(n$e,"A",{href:!0});var mut=s(Wj);O7o=r(mut,"ElectraModel"),mut.forEach(t),V7o=r(n$e," (ELECTRA model)"),n$e.forEach(t),X7o=i(x),C_=n(x,"LI",{});var s$e=s(C_);_fe=n(s$e,"STRONG",{});var gut=s(_fe);z7o=r(gut,"flaubert"),gut.forEach(t),W7o=r(s$e," \u2014 "),Qj=n(s$e,"A",{href:!0});var hut=s(Qj);Q7o=r(hut,"FlaubertModel"),hut.forEach(t),H7o=r(s$e," (FlauBERT model)"),s$e.forEach(t),U7o=i(x),w_=n(x,"LI",{});var l$e=s(w_);ufe=n(l$e,"STRONG",{});var put=s(ufe);J7o=r(put,"flava"),put.forEach(t),Y7o=r(l$e," \u2014 "),Hj=n(l$e,"A",{href:!0});var _ut=s(Hj);K7o=r(_ut,"FlavaModel"),_ut.forEach(t),Z7o=r(l$e," (FLAVA model)"),l$e.forEach(t),eMo=i(x),A_=n(x,"LI",{});var i$e=s(A_);bfe=n(i$e,"STRONG",{});var uut=s(bfe);oMo=r(uut,"fnet"),uut.forEach(t),rMo=r(i$e," \u2014 "),Uj=n(i$e,"A",{href:!0});var but=s(Uj);tMo=r(but,"FNetModel"),but.forEach(t),aMo=r(i$e," (FNet model)"),i$e.forEach(t),nMo=i(x),L_=n(x,"LI",{});var d$e=s(L_);vfe=n(d$e,"STRONG",{});var vut=s(vfe);sMo=r(vut,"fsmt"),vut.forEach(t),lMo=r(d$e," \u2014 "),Jj=n(d$e,"A",{href:!0});var Fut=s(Jj);iMo=r(Fut,"FSMTModel"),Fut.forEach(t),dMo=r(d$e," (FairSeq Machine-Translation model)"),d$e.forEach(t),cMo=i(x),Us=n(x,"LI",{});var VS=s(Us);Ffe=n(VS,"STRONG",{});var Tut=s(Ffe);fMo=r(Tut,"funnel"),Tut.forEach(t),mMo=r(VS," \u2014 "),Yj=n(VS,"A",{href:!0});var Mut=s(Yj);gMo=r(Mut,"FunnelModel"),Mut.forEach(t),hMo=r(VS," or "),Kj=n(VS,"A",{href:!0});var Eut=s(Kj);pMo=r(Eut,"FunnelBaseModel"),Eut.forEach(t),_Mo=r(VS," (Funnel Transformer model)"),VS.forEach(t),uMo=i(x),y_=n(x,"LI",{});var c$e=s(y_);Tfe=n(c$e,"STRONG",{});var Cut=s(Tfe);bMo=r(Cut,"glpn"),Cut.forEach(t),vMo=r(c$e," \u2014 "),Zj=n(c$e,"A",{href:!0});var wut=s(Zj);FMo=r(wut,"GLPNModel"),wut.forEach(t),TMo=r(c$e," (GLPN model)"),c$e.forEach(t),MMo=i(x),x_=n(x,"LI",{});var f$e=s(x_);Mfe=n(f$e,"STRONG",{});var Aut=s(Mfe);EMo=r(Aut,"gpt2"),Aut.forEach(t),CMo=r(f$e," \u2014 "),eD=n(f$e,"A",{href:!0});var Lut=s(eD);wMo=r(Lut,"GPT2Model"),Lut.forEach(t),AMo=r(f$e," (OpenAI GPT-2 model)"),f$e.forEach(t),LMo=i(x),$_=n(x,"LI",{});var m$e=s($_);Efe=n(m$e,"STRONG",{});var yut=s(Efe);yMo=r(yut,"gpt_neo"),yut.forEach(t),xMo=r(m$e," \u2014 "),oD=n(m$e,"A",{href:!0});var xut=s(oD);$Mo=r(xut,"GPTNeoModel"),xut.forEach(t),kMo=r(m$e," (GPT Neo model)"),m$e.forEach(t),SMo=i(x),k_=n(x,"LI",{});var g$e=s(k_);Cfe=n(g$e,"STRONG",{});var $ut=s(Cfe);RMo=r($ut,"gpt_neox"),$ut.forEach(t),PMo=r(g$e," \u2014 "),rD=n(g$e,"A",{href:!0});var kut=s(rD);BMo=r(kut,"GPTNeoXModel"),kut.forEach(t),IMo=r(g$e," (GPT NeoX model)"),g$e.forEach(t),NMo=i(x),S_=n(x,"LI",{});var h$e=s(S_);wfe=n(h$e,"STRONG",{});var Sut=s(wfe);qMo=r(Sut,"gptj"),Sut.forEach(t),jMo=r(h$e," \u2014 "),tD=n(h$e,"A",{href:!0});var Rut=s(tD);DMo=r(Rut,"GPTJModel"),Rut.forEach(t),GMo=r(h$e," (GPT-J model)"),h$e.forEach(t),OMo=i(x),R_=n(x,"LI",{});var p$e=s(R_);Afe=n(p$e,"STRONG",{});var Put=s(Afe);VMo=r(Put,"groupvit"),Put.forEach(t),XMo=r(p$e," \u2014 "),aD=n(p$e,"A",{href:!0});var But=s(aD);zMo=r(But,"GroupViTModel"),But.forEach(t),WMo=r(p$e," (GroupViT model)"),p$e.forEach(t),QMo=i(x),P_=n(x,"LI",{});var _$e=s(P_);Lfe=n(_$e,"STRONG",{});var Iut=s(Lfe);HMo=r(Iut,"hubert"),Iut.forEach(t),UMo=r(_$e," \u2014 "),nD=n(_$e,"A",{href:!0});var Nut=s(nD);JMo=r(Nut,"HubertModel"),Nut.forEach(t),YMo=r(_$e," (Hubert model)"),_$e.forEach(t),KMo=i(x),B_=n(x,"LI",{});var u$e=s(B_);yfe=n(u$e,"STRONG",{});var qut=s(yfe);ZMo=r(qut,"ibert"),qut.forEach(t),eEo=r(u$e," \u2014 "),sD=n(u$e,"A",{href:!0});var jut=s(sD);oEo=r(jut,"IBertModel"),jut.forEach(t),rEo=r(u$e," (I-BERT model)"),u$e.forEach(t),tEo=i(x),I_=n(x,"LI",{});var b$e=s(I_);xfe=n(b$e,"STRONG",{});var Dut=s(xfe);aEo=r(Dut,"imagegpt"),Dut.forEach(t),nEo=r(b$e," \u2014 "),lD=n(b$e,"A",{href:!0});var Gut=s(lD);sEo=r(Gut,"ImageGPTModel"),Gut.forEach(t),lEo=r(b$e," (ImageGPT model)"),b$e.forEach(t),iEo=i(x),N_=n(x,"LI",{});var v$e=s(N_);$fe=n(v$e,"STRONG",{});var Out=s($fe);dEo=r(Out,"layoutlm"),Out.forEach(t),cEo=r(v$e," \u2014 "),iD=n(v$e,"A",{href:!0});var Vut=s(iD);fEo=r(Vut,"LayoutLMModel"),Vut.forEach(t),mEo=r(v$e," (LayoutLM model)"),v$e.forEach(t),gEo=i(x),q_=n(x,"LI",{});var F$e=s(q_);kfe=n(F$e,"STRONG",{});var Xut=s(kfe);hEo=r(Xut,"layoutlmv2"),Xut.forEach(t),pEo=r(F$e," \u2014 "),dD=n(F$e,"A",{href:!0});var zut=s(dD);_Eo=r(zut,"LayoutLMv2Model"),zut.forEach(t),uEo=r(F$e," (LayoutLMv2 model)"),F$e.forEach(t),bEo=i(x),j_=n(x,"LI",{});var T$e=s(j_);Sfe=n(T$e,"STRONG",{});var Wut=s(Sfe);vEo=r(Wut,"layoutlmv3"),Wut.forEach(t),FEo=r(T$e," \u2014 "),cD=n(T$e,"A",{href:!0});var Qut=s(cD);TEo=r(Qut,"LayoutLMv3Model"),Qut.forEach(t),MEo=r(T$e," (LayoutLMv3 model)"),T$e.forEach(t),EEo=i(x),D_=n(x,"LI",{});var M$e=s(D_);Rfe=n(M$e,"STRONG",{});var Hut=s(Rfe);CEo=r(Hut,"led"),Hut.forEach(t),wEo=r(M$e," \u2014 "),fD=n(M$e,"A",{href:!0});var Uut=s(fD);AEo=r(Uut,"LEDModel"),Uut.forEach(t),LEo=r(M$e," (LED model)"),M$e.forEach(t),yEo=i(x),G_=n(x,"LI",{});var E$e=s(G_);Pfe=n(E$e,"STRONG",{});var Jut=s(Pfe);xEo=r(Jut,"levit"),Jut.forEach(t),$Eo=r(E$e," \u2014 "),mD=n(E$e,"A",{href:!0});var Yut=s(mD);kEo=r(Yut,"LevitModel"),Yut.forEach(t),SEo=r(E$e," (LeViT model)"),E$e.forEach(t),REo=i(x),O_=n(x,"LI",{});var C$e=s(O_);Bfe=n(C$e,"STRONG",{});var Kut=s(Bfe);PEo=r(Kut,"longformer"),Kut.forEach(t),BEo=r(C$e," \u2014 "),gD=n(C$e,"A",{href:!0});var Zut=s(gD);IEo=r(Zut,"LongformerModel"),Zut.forEach(t),NEo=r(C$e," (Longformer model)"),C$e.forEach(t),qEo=i(x),V_=n(x,"LI",{});var w$e=s(V_);Ife=n(w$e,"STRONG",{});var e1t=s(Ife);jEo=r(e1t,"longt5"),e1t.forEach(t),DEo=r(w$e," \u2014 "),hD=n(w$e,"A",{href:!0});var o1t=s(hD);GEo=r(o1t,"LongT5Model"),o1t.forEach(t),OEo=r(w$e," (LongT5 model)"),w$e.forEach(t),VEo=i(x),X_=n(x,"LI",{});var A$e=s(X_);Nfe=n(A$e,"STRONG",{});var r1t=s(Nfe);XEo=r(r1t,"luke"),r1t.forEach(t),zEo=r(A$e," \u2014 "),pD=n(A$e,"A",{href:!0});var t1t=s(pD);WEo=r(t1t,"LukeModel"),t1t.forEach(t),QEo=r(A$e," (LUKE model)"),A$e.forEach(t),HEo=i(x),z_=n(x,"LI",{});var L$e=s(z_);qfe=n(L$e,"STRONG",{});var a1t=s(qfe);UEo=r(a1t,"lxmert"),a1t.forEach(t),JEo=r(L$e," \u2014 "),_D=n(L$e,"A",{href:!0});var n1t=s(_D);YEo=r(n1t,"LxmertModel"),n1t.forEach(t),KEo=r(L$e," (LXMERT model)"),L$e.forEach(t),ZEo=i(x),W_=n(x,"LI",{});var y$e=s(W_);jfe=n(y$e,"STRONG",{});var s1t=s(jfe);eCo=r(s1t,"m2m_100"),s1t.forEach(t),oCo=r(y$e," \u2014 "),uD=n(y$e,"A",{href:!0});var l1t=s(uD);rCo=r(l1t,"M2M100Model"),l1t.forEach(t),tCo=r(y$e," (M2M100 model)"),y$e.forEach(t),aCo=i(x),Q_=n(x,"LI",{});var x$e=s(Q_);Dfe=n(x$e,"STRONG",{});var i1t=s(Dfe);nCo=r(i1t,"marian"),i1t.forEach(t),sCo=r(x$e," \u2014 "),bD=n(x$e,"A",{href:!0});var d1t=s(bD);lCo=r(d1t,"MarianModel"),d1t.forEach(t),iCo=r(x$e," (Marian model)"),x$e.forEach(t),dCo=i(x),H_=n(x,"LI",{});var $$e=s(H_);Gfe=n($$e,"STRONG",{});var c1t=s(Gfe);cCo=r(c1t,"maskformer"),c1t.forEach(t),fCo=r($$e," \u2014 "),vD=n($$e,"A",{href:!0});var f1t=s(vD);mCo=r(f1t,"MaskFormerModel"),f1t.forEach(t),gCo=r($$e," (MaskFormer model)"),$$e.forEach(t),hCo=i(x),U_=n(x,"LI",{});var k$e=s(U_);Ofe=n(k$e,"STRONG",{});var m1t=s(Ofe);pCo=r(m1t,"mbart"),m1t.forEach(t),_Co=r(k$e," \u2014 "),FD=n(k$e,"A",{href:!0});var g1t=s(FD);uCo=r(g1t,"MBartModel"),g1t.forEach(t),bCo=r(k$e," (mBART model)"),k$e.forEach(t),vCo=i(x),J_=n(x,"LI",{});var S$e=s(J_);Vfe=n(S$e,"STRONG",{});var h1t=s(Vfe);FCo=r(h1t,"mctct"),h1t.forEach(t),TCo=r(S$e," \u2014 "),TD=n(S$e,"A",{href:!0});var p1t=s(TD);MCo=r(p1t,"MCTCTModel"),p1t.forEach(t),ECo=r(S$e," (M-CTC-T model)"),S$e.forEach(t),CCo=i(x),Y_=n(x,"LI",{});var R$e=s(Y_);Xfe=n(R$e,"STRONG",{});var _1t=s(Xfe);wCo=r(_1t,"megatron-bert"),_1t.forEach(t),ACo=r(R$e," \u2014 "),MD=n(R$e,"A",{href:!0});var u1t=s(MD);LCo=r(u1t,"MegatronBertModel"),u1t.forEach(t),yCo=r(R$e," (Megatron-BERT model)"),R$e.forEach(t),xCo=i(x),K_=n(x,"LI",{});var P$e=s(K_);zfe=n(P$e,"STRONG",{});var b1t=s(zfe);$Co=r(b1t,"mobilebert"),b1t.forEach(t),kCo=r(P$e," \u2014 "),ED=n(P$e,"A",{href:!0});var v1t=s(ED);SCo=r(v1t,"MobileBertModel"),v1t.forEach(t),RCo=r(P$e," (MobileBERT model)"),P$e.forEach(t),PCo=i(x),Z_=n(x,"LI",{});var B$e=s(Z_);Wfe=n(B$e,"STRONG",{});var F1t=s(Wfe);BCo=r(F1t,"mobilevit"),F1t.forEach(t),ICo=r(B$e," \u2014 "),CD=n(B$e,"A",{href:!0});var T1t=s(CD);NCo=r(T1t,"MobileViTModel"),T1t.forEach(t),qCo=r(B$e," (MobileViT model)"),B$e.forEach(t),jCo=i(x),eu=n(x,"LI",{});var I$e=s(eu);Qfe=n(I$e,"STRONG",{});var M1t=s(Qfe);DCo=r(M1t,"mpnet"),M1t.forEach(t),GCo=r(I$e," \u2014 "),wD=n(I$e,"A",{href:!0});var E1t=s(wD);OCo=r(E1t,"MPNetModel"),E1t.forEach(t),VCo=r(I$e," (MPNet model)"),I$e.forEach(t),XCo=i(x),ou=n(x,"LI",{});var N$e=s(ou);Hfe=n(N$e,"STRONG",{});var C1t=s(Hfe);zCo=r(C1t,"mt5"),C1t.forEach(t),WCo=r(N$e," \u2014 "),AD=n(N$e,"A",{href:!0});var w1t=s(AD);QCo=r(w1t,"MT5Model"),w1t.forEach(t),HCo=r(N$e," (MT5 model)"),N$e.forEach(t),UCo=i(x),ru=n(x,"LI",{});var q$e=s(ru);Ufe=n(q$e,"STRONG",{});var A1t=s(Ufe);JCo=r(A1t,"mvp"),A1t.forEach(t),YCo=r(q$e," \u2014 "),LD=n(q$e,"A",{href:!0});var L1t=s(LD);KCo=r(L1t,"MvpModel"),L1t.forEach(t),ZCo=r(q$e," (MVP model)"),q$e.forEach(t),e5o=i(x),tu=n(x,"LI",{});var j$e=s(tu);Jfe=n(j$e,"STRONG",{});var y1t=s(Jfe);o5o=r(y1t,"nezha"),y1t.forEach(t),r5o=r(j$e," \u2014 "),yD=n(j$e,"A",{href:!0});var x1t=s(yD);t5o=r(x1t,"NezhaModel"),x1t.forEach(t),a5o=r(j$e," (Nezha model)"),j$e.forEach(t),n5o=i(x),au=n(x,"LI",{});var D$e=s(au);Yfe=n(D$e,"STRONG",{});var $1t=s(Yfe);s5o=r($1t,"nllb"),$1t.forEach(t),l5o=r(D$e," \u2014 "),xD=n(D$e,"A",{href:!0});var k1t=s(xD);i5o=r(k1t,"M2M100Model"),k1t.forEach(t),d5o=r(D$e," (NLLB model)"),D$e.forEach(t),c5o=i(x),nu=n(x,"LI",{});var G$e=s(nu);Kfe=n(G$e,"STRONG",{});var S1t=s(Kfe);f5o=r(S1t,"nystromformer"),S1t.forEach(t),m5o=r(G$e," \u2014 "),$D=n(G$e,"A",{href:!0});var R1t=s($D);g5o=r(R1t,"NystromformerModel"),R1t.forEach(t),h5o=r(G$e," (Nystr\xF6mformer model)"),G$e.forEach(t),p5o=i(x),su=n(x,"LI",{});var O$e=s(su);Zfe=n(O$e,"STRONG",{});var P1t=s(Zfe);_5o=r(P1t,"openai-gpt"),P1t.forEach(t),u5o=r(O$e," \u2014 "),kD=n(O$e,"A",{href:!0});var B1t=s(kD);b5o=r(B1t,"OpenAIGPTModel"),B1t.forEach(t),v5o=r(O$e," (OpenAI GPT model)"),O$e.forEach(t),F5o=i(x),lu=n(x,"LI",{});var V$e=s(lu);eme=n(V$e,"STRONG",{});var I1t=s(eme);T5o=r(I1t,"opt"),I1t.forEach(t),M5o=r(V$e," \u2014 "),SD=n(V$e,"A",{href:!0});var N1t=s(SD);E5o=r(N1t,"OPTModel"),N1t.forEach(t),C5o=r(V$e," (OPT model)"),V$e.forEach(t),w5o=i(x),iu=n(x,"LI",{});var X$e=s(iu);ome=n(X$e,"STRONG",{});var q1t=s(ome);A5o=r(q1t,"owlvit"),q1t.forEach(t),L5o=r(X$e," \u2014 "),RD=n(X$e,"A",{href:!0});var j1t=s(RD);y5o=r(j1t,"OwlViTModel"),j1t.forEach(t),x5o=r(X$e," (OWL-ViT model)"),X$e.forEach(t),$5o=i(x),du=n(x,"LI",{});var z$e=s(du);rme=n(z$e,"STRONG",{});var D1t=s(rme);k5o=r(D1t,"pegasus"),D1t.forEach(t),S5o=r(z$e," \u2014 "),PD=n(z$e,"A",{href:!0});var G1t=s(PD);R5o=r(G1t,"PegasusModel"),G1t.forEach(t),P5o=r(z$e," (Pegasus model)"),z$e.forEach(t),B5o=i(x),cu=n(x,"LI",{});var W$e=s(cu);tme=n(W$e,"STRONG",{});var O1t=s(tme);I5o=r(O1t,"perceiver"),O1t.forEach(t),N5o=r(W$e," \u2014 "),BD=n(W$e,"A",{href:!0});var V1t=s(BD);q5o=r(V1t,"PerceiverModel"),V1t.forEach(t),j5o=r(W$e," (Perceiver model)"),W$e.forEach(t),D5o=i(x),fu=n(x,"LI",{});var Q$e=s(fu);ame=n(Q$e,"STRONG",{});var X1t=s(ame);G5o=r(X1t,"plbart"),X1t.forEach(t),O5o=r(Q$e," \u2014 "),ID=n(Q$e,"A",{href:!0});var z1t=s(ID);V5o=r(z1t,"PLBartModel"),z1t.forEach(t),X5o=r(Q$e," (PLBart model)"),Q$e.forEach(t),z5o=i(x),mu=n(x,"LI",{});var H$e=s(mu);nme=n(H$e,"STRONG",{});var W1t=s(nme);W5o=r(W1t,"poolformer"),W1t.forEach(t),Q5o=r(H$e," \u2014 "),ND=n(H$e,"A",{href:!0});var Q1t=s(ND);H5o=r(Q1t,"PoolFormerModel"),Q1t.forEach(t),U5o=r(H$e," (PoolFormer model)"),H$e.forEach(t),J5o=i(x),gu=n(x,"LI",{});var U$e=s(gu);sme=n(U$e,"STRONG",{});var H1t=s(sme);Y5o=r(H1t,"prophetnet"),H1t.forEach(t),K5o=r(U$e," \u2014 "),qD=n(U$e,"A",{href:!0});var U1t=s(qD);Z5o=r(U1t,"ProphetNetModel"),U1t.forEach(t),e3o=r(U$e," (ProphetNet model)"),U$e.forEach(t),o3o=i(x),hu=n(x,"LI",{});var J$e=s(hu);lme=n(J$e,"STRONG",{});var J1t=s(lme);r3o=r(J1t,"qdqbert"),J1t.forEach(t),t3o=r(J$e," \u2014 "),jD=n(J$e,"A",{href:!0});var Y1t=s(jD);a3o=r(Y1t,"QDQBertModel"),Y1t.forEach(t),n3o=r(J$e," (QDQBert model)"),J$e.forEach(t),s3o=i(x),pu=n(x,"LI",{});var Y$e=s(pu);ime=n(Y$e,"STRONG",{});var K1t=s(ime);l3o=r(K1t,"reformer"),K1t.forEach(t),i3o=r(Y$e," \u2014 "),DD=n(Y$e,"A",{href:!0});var Z1t=s(DD);d3o=r(Z1t,"ReformerModel"),Z1t.forEach(t),c3o=r(Y$e," (Reformer model)"),Y$e.forEach(t),f3o=i(x),_u=n(x,"LI",{});var K$e=s(_u);dme=n(K$e,"STRONG",{});var e4t=s(dme);m3o=r(e4t,"regnet"),e4t.forEach(t),g3o=r(K$e," \u2014 "),GD=n(K$e,"A",{href:!0});var o4t=s(GD);h3o=r(o4t,"RegNetModel"),o4t.forEach(t),p3o=r(K$e," (RegNet model)"),K$e.forEach(t),_3o=i(x),uu=n(x,"LI",{});var Z$e=s(uu);cme=n(Z$e,"STRONG",{});var r4t=s(cme);u3o=r(r4t,"rembert"),r4t.forEach(t),b3o=r(Z$e," \u2014 "),OD=n(Z$e,"A",{href:!0});var t4t=s(OD);v3o=r(t4t,"RemBertModel"),t4t.forEach(t),F3o=r(Z$e," (RemBERT model)"),Z$e.forEach(t),T3o=i(x),bu=n(x,"LI",{});var eke=s(bu);fme=n(eke,"STRONG",{});var a4t=s(fme);M3o=r(a4t,"resnet"),a4t.forEach(t),E3o=r(eke," \u2014 "),VD=n(eke,"A",{href:!0});var n4t=s(VD);C3o=r(n4t,"ResNetModel"),n4t.forEach(t),w3o=r(eke," (ResNet model)"),eke.forEach(t),A3o=i(x),vu=n(x,"LI",{});var oke=s(vu);mme=n(oke,"STRONG",{});var s4t=s(mme);L3o=r(s4t,"retribert"),s4t.forEach(t),y3o=r(oke," \u2014 "),XD=n(oke,"A",{href:!0});var l4t=s(XD);x3o=r(l4t,"RetriBertModel"),l4t.forEach(t),$3o=r(oke," (RetriBERT model)"),oke.forEach(t),k3o=i(x),Fu=n(x,"LI",{});var rke=s(Fu);gme=n(rke,"STRONG",{});var i4t=s(gme);S3o=r(i4t,"roberta"),i4t.forEach(t),R3o=r(rke," \u2014 "),zD=n(rke,"A",{href:!0});var d4t=s(zD);P3o=r(d4t,"RobertaModel"),d4t.forEach(t),B3o=r(rke," (RoBERTa model)"),rke.forEach(t),I3o=i(x),Tu=n(x,"LI",{});var tke=s(Tu);hme=n(tke,"STRONG",{});var c4t=s(hme);N3o=r(c4t,"roformer"),c4t.forEach(t),q3o=r(tke," \u2014 "),WD=n(tke,"A",{href:!0});var f4t=s(WD);j3o=r(f4t,"RoFormerModel"),f4t.forEach(t),D3o=r(tke," (RoFormer model)"),tke.forEach(t),G3o=i(x),Mu=n(x,"LI",{});var ake=s(Mu);pme=n(ake,"STRONG",{});var m4t=s(pme);O3o=r(m4t,"segformer"),m4t.forEach(t),V3o=r(ake," \u2014 "),QD=n(ake,"A",{href:!0});var g4t=s(QD);X3o=r(g4t,"SegformerModel"),g4t.forEach(t),z3o=r(ake," (SegFormer model)"),ake.forEach(t),W3o=i(x),Eu=n(x,"LI",{});var nke=s(Eu);_me=n(nke,"STRONG",{});var h4t=s(_me);Q3o=r(h4t,"sew"),h4t.forEach(t),H3o=r(nke," \u2014 "),HD=n(nke,"A",{href:!0});var p4t=s(HD);U3o=r(p4t,"SEWModel"),p4t.forEach(t),J3o=r(nke," (SEW model)"),nke.forEach(t),Y3o=i(x),Cu=n(x,"LI",{});var ske=s(Cu);ume=n(ske,"STRONG",{});var _4t=s(ume);K3o=r(_4t,"sew-d"),_4t.forEach(t),Z3o=r(ske," \u2014 "),UD=n(ske,"A",{href:!0});var u4t=s(UD);ewo=r(u4t,"SEWDModel"),u4t.forEach(t),owo=r(ske," (SEW-D model)"),ske.forEach(t),rwo=i(x),wu=n(x,"LI",{});var lke=s(wu);bme=n(lke,"STRONG",{});var b4t=s(bme);two=r(b4t,"speech_to_text"),b4t.forEach(t),awo=r(lke," \u2014 "),JD=n(lke,"A",{href:!0});var v4t=s(JD);nwo=r(v4t,"Speech2TextModel"),v4t.forEach(t),swo=r(lke," (Speech2Text model)"),lke.forEach(t),lwo=i(x),Au=n(x,"LI",{});var ike=s(Au);vme=n(ike,"STRONG",{});var F4t=s(vme);iwo=r(F4t,"splinter"),F4t.forEach(t),dwo=r(ike," \u2014 "),YD=n(ike,"A",{href:!0});var T4t=s(YD);cwo=r(T4t,"SplinterModel"),T4t.forEach(t),fwo=r(ike," (Splinter model)"),ike.forEach(t),mwo=i(x),Lu=n(x,"LI",{});var dke=s(Lu);Fme=n(dke,"STRONG",{});var M4t=s(Fme);gwo=r(M4t,"squeezebert"),M4t.forEach(t),hwo=r(dke," \u2014 "),KD=n(dke,"A",{href:!0});var E4t=s(KD);pwo=r(E4t,"SqueezeBertModel"),E4t.forEach(t),_wo=r(dke," (SqueezeBERT model)"),dke.forEach(t),uwo=i(x),yu=n(x,"LI",{});var cke=s(yu);Tme=n(cke,"STRONG",{});var C4t=s(Tme);bwo=r(C4t,"swin"),C4t.forEach(t),vwo=r(cke," \u2014 "),ZD=n(cke,"A",{href:!0});var w4t=s(ZD);Fwo=r(w4t,"SwinModel"),w4t.forEach(t),Two=r(cke," (Swin Transformer model)"),cke.forEach(t),Mwo=i(x),xu=n(x,"LI",{});var fke=s(xu);Mme=n(fke,"STRONG",{});var A4t=s(Mme);Ewo=r(A4t,"t5"),A4t.forEach(t),Cwo=r(fke," \u2014 "),eG=n(fke,"A",{href:!0});var L4t=s(eG);wwo=r(L4t,"T5Model"),L4t.forEach(t),Awo=r(fke," (T5 model)"),fke.forEach(t),Lwo=i(x),$u=n(x,"LI",{});var mke=s($u);Eme=n(mke,"STRONG",{});var y4t=s(Eme);ywo=r(y4t,"tapas"),y4t.forEach(t),xwo=r(mke," \u2014 "),oG=n(mke,"A",{href:!0});var x4t=s(oG);$wo=r(x4t,"TapasModel"),x4t.forEach(t),kwo=r(mke," (TAPAS model)"),mke.forEach(t),Swo=i(x),ku=n(x,"LI",{});var gke=s(ku);Cme=n(gke,"STRONG",{});var $4t=s(Cme);Rwo=r($4t,"trajectory_transformer"),$4t.forEach(t),Pwo=r(gke," \u2014 "),rG=n(gke,"A",{href:!0});var k4t=s(rG);Bwo=r(k4t,"TrajectoryTransformerModel"),k4t.forEach(t),Iwo=r(gke," (Trajectory Transformer model)"),gke.forEach(t),Nwo=i(x),Su=n(x,"LI",{});var hke=s(Su);wme=n(hke,"STRONG",{});var S4t=s(wme);qwo=r(S4t,"transfo-xl"),S4t.forEach(t),jwo=r(hke," \u2014 "),tG=n(hke,"A",{href:!0});var R4t=s(tG);Dwo=r(R4t,"TransfoXLModel"),R4t.forEach(t),Gwo=r(hke," (Transformer-XL model)"),hke.forEach(t),Owo=i(x),Ru=n(x,"LI",{});var pke=s(Ru);Ame=n(pke,"STRONG",{});var P4t=s(Ame);Vwo=r(P4t,"unispeech"),P4t.forEach(t),Xwo=r(pke," \u2014 "),aG=n(pke,"A",{href:!0});var B4t=s(aG);zwo=r(B4t,"UniSpeechModel"),B4t.forEach(t),Wwo=r(pke," (UniSpeech model)"),pke.forEach(t),Qwo=i(x),Pu=n(x,"LI",{});var _ke=s(Pu);Lme=n(_ke,"STRONG",{});var I4t=s(Lme);Hwo=r(I4t,"unispeech-sat"),I4t.forEach(t),Uwo=r(_ke," \u2014 "),nG=n(_ke,"A",{href:!0});var N4t=s(nG);Jwo=r(N4t,"UniSpeechSatModel"),N4t.forEach(t),Ywo=r(_ke," (UniSpeechSat model)"),_ke.forEach(t),Kwo=i(x),Bu=n(x,"LI",{});var uke=s(Bu);yme=n(uke,"STRONG",{});var q4t=s(yme);Zwo=r(q4t,"van"),q4t.forEach(t),eAo=r(uke," \u2014 "),sG=n(uke,"A",{href:!0});var j4t=s(sG);oAo=r(j4t,"VanModel"),j4t.forEach(t),rAo=r(uke," (VAN model)"),uke.forEach(t),tAo=i(x),Iu=n(x,"LI",{});var bke=s(Iu);xme=n(bke,"STRONG",{});var D4t=s(xme);aAo=r(D4t,"vilt"),D4t.forEach(t),nAo=r(bke," \u2014 "),lG=n(bke,"A",{href:!0});var G4t=s(lG);sAo=r(G4t,"ViltModel"),G4t.forEach(t),lAo=r(bke," (ViLT model)"),bke.forEach(t),iAo=i(x),Nu=n(x,"LI",{});var vke=s(Nu);$me=n(vke,"STRONG",{});var O4t=s($me);dAo=r(O4t,"vision-text-dual-encoder"),O4t.forEach(t),cAo=r(vke," \u2014 "),iG=n(vke,"A",{href:!0});var V4t=s(iG);fAo=r(V4t,"VisionTextDualEncoderModel"),V4t.forEach(t),mAo=r(vke," (VisionTextDualEncoder model)"),vke.forEach(t),gAo=i(x),qu=n(x,"LI",{});var Fke=s(qu);kme=n(Fke,"STRONG",{});var X4t=s(kme);hAo=r(X4t,"visual_bert"),X4t.forEach(t),pAo=r(Fke," \u2014 "),dG=n(Fke,"A",{href:!0});var z4t=s(dG);_Ao=r(z4t,"VisualBertModel"),z4t.forEach(t),uAo=r(Fke," (VisualBERT model)"),Fke.forEach(t),bAo=i(x),ju=n(x,"LI",{});var Tke=s(ju);Sme=n(Tke,"STRONG",{});var W4t=s(Sme);vAo=r(W4t,"vit"),W4t.forEach(t),FAo=r(Tke," \u2014 "),cG=n(Tke,"A",{href:!0});var Q4t=s(cG);TAo=r(Q4t,"ViTModel"),Q4t.forEach(t),MAo=r(Tke," (ViT model)"),Tke.forEach(t),EAo=i(x),Du=n(x,"LI",{});var Mke=s(Du);Rme=n(Mke,"STRONG",{});var H4t=s(Rme);CAo=r(H4t,"vit_mae"),H4t.forEach(t),wAo=r(Mke," \u2014 "),fG=n(Mke,"A",{href:!0});var U4t=s(fG);AAo=r(U4t,"ViTMAEModel"),U4t.forEach(t),LAo=r(Mke," (ViTMAE model)"),Mke.forEach(t),yAo=i(x),Gu=n(x,"LI",{});var Eke=s(Gu);Pme=n(Eke,"STRONG",{});var J4t=s(Pme);xAo=r(J4t,"wav2vec2"),J4t.forEach(t),$Ao=r(Eke," \u2014 "),mG=n(Eke,"A",{href:!0});var Y4t=s(mG);kAo=r(Y4t,"Wav2Vec2Model"),Y4t.forEach(t),SAo=r(Eke," (Wav2Vec2 model)"),Eke.forEach(t),RAo=i(x),Ou=n(x,"LI",{});var Cke=s(Ou);Bme=n(Cke,"STRONG",{});var K4t=s(Bme);PAo=r(K4t,"wav2vec2-conformer"),K4t.forEach(t),BAo=r(Cke," \u2014 "),gG=n(Cke,"A",{href:!0});var Z4t=s(gG);IAo=r(Z4t,"Wav2Vec2ConformerModel"),Z4t.forEach(t),NAo=r(Cke," (Wav2Vec2-Conformer model)"),Cke.forEach(t),qAo=i(x),Vu=n(x,"LI",{});var wke=s(Vu);Ime=n(wke,"STRONG",{});var e2t=s(Ime);jAo=r(e2t,"wavlm"),e2t.forEach(t),DAo=r(wke," \u2014 "),hG=n(wke,"A",{href:!0});var o2t=s(hG);GAo=r(o2t,"WavLMModel"),o2t.forEach(t),OAo=r(wke," (WavLM model)"),wke.forEach(t),VAo=i(x),Xu=n(x,"LI",{});var Ake=s(Xu);Nme=n(Ake,"STRONG",{});var r2t=s(Nme);XAo=r(r2t,"xglm"),r2t.forEach(t),zAo=r(Ake," \u2014 "),pG=n(Ake,"A",{href:!0});var t2t=s(pG);WAo=r(t2t,"XGLMModel"),t2t.forEach(t),QAo=r(Ake," (XGLM model)"),Ake.forEach(t),HAo=i(x),zu=n(x,"LI",{});var Lke=s(zu);qme=n(Lke,"STRONG",{});var a2t=s(qme);UAo=r(a2t,"xlm"),a2t.forEach(t),JAo=r(Lke," \u2014 "),_G=n(Lke,"A",{href:!0});var n2t=s(_G);YAo=r(n2t,"XLMModel"),n2t.forEach(t),KAo=r(Lke," (XLM model)"),Lke.forEach(t),ZAo=i(x),Wu=n(x,"LI",{});var yke=s(Wu);jme=n(yke,"STRONG",{});var s2t=s(jme);eLo=r(s2t,"xlm-prophetnet"),s2t.forEach(t),oLo=r(yke," \u2014 "),uG=n(yke,"A",{href:!0});var l2t=s(uG);rLo=r(l2t,"XLMProphetNetModel"),l2t.forEach(t),tLo=r(yke," (XLM-ProphetNet model)"),yke.forEach(t),aLo=i(x),Qu=n(x,"LI",{});var xke=s(Qu);Dme=n(xke,"STRONG",{});var i2t=s(Dme);nLo=r(i2t,"xlm-roberta"),i2t.forEach(t),sLo=r(xke," \u2014 "),bG=n(xke,"A",{href:!0});var d2t=s(bG);lLo=r(d2t,"XLMRobertaModel"),d2t.forEach(t),iLo=r(xke," (XLM-RoBERTa model)"),xke.forEach(t),dLo=i(x),Hu=n(x,"LI",{});var $ke=s(Hu);Gme=n($ke,"STRONG",{});var c2t=s(Gme);cLo=r(c2t,"xlm-roberta-xl"),c2t.forEach(t),fLo=r($ke," \u2014 "),vG=n($ke,"A",{href:!0});var f2t=s(vG);mLo=r(f2t,"XLMRobertaXLModel"),f2t.forEach(t),gLo=r($ke," (XLM-RoBERTa-XL model)"),$ke.forEach(t),hLo=i(x),Uu=n(x,"LI",{});var kke=s(Uu);Ome=n(kke,"STRONG",{});var m2t=s(Ome);pLo=r(m2t,"xlnet"),m2t.forEach(t),_Lo=r(kke," \u2014 "),FG=n(kke,"A",{href:!0});var g2t=s(FG);uLo=r(g2t,"XLNetModel"),g2t.forEach(t),bLo=r(kke," (XLNet model)"),kke.forEach(t),vLo=i(x),Ju=n(x,"LI",{});var Ske=s(Ju);Vme=n(Ske,"STRONG",{});var h2t=s(Vme);FLo=r(h2t,"yolos"),h2t.forEach(t),TLo=r(Ske," \u2014 "),TG=n(Ske,"A",{href:!0});var p2t=s(TG);MLo=r(p2t,"YolosModel"),p2t.forEach(t),ELo=r(Ske," (YOLOS model)"),Ske.forEach(t),CLo=i(x),Yu=n(x,"LI",{});var Rke=s(Yu);Xme=n(Rke,"STRONG",{});var _2t=s(Xme);wLo=r(_2t,"yoso"),_2t.forEach(t),ALo=r(Rke," \u2014 "),MG=n(Rke,"A",{href:!0});var u2t=s(MG);LLo=r(u2t,"YosoModel"),u2t.forEach(t),yLo=r(Rke," (YOSO model)"),Rke.forEach(t),x.forEach(t),xLo=i(la),Ku=n(la,"P",{});var Pke=s(Ku);$Lo=r(Pke,"The model is set in evaluation mode by default using "),zme=n(Pke,"CODE",{});var b2t=s(zme);kLo=r(b2t,"model.eval()"),b2t.forEach(t),SLo=r(Pke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wme=n(Pke,"CODE",{});var v2t=s(Wme);RLo=r(v2t,"model.train()"),v2t.forEach(t),Pke.forEach(t),PLo=i(la),T(Zu.$$.fragment,la),la.forEach(t),al.forEach(t),aze=i(f),Wi=n(f,"H2",{class:!0});var cQe=s(Wi);e1=n(cQe,"A",{id:!0,class:!0,href:!0});var F2t=s(e1);Qme=n(F2t,"SPAN",{});var T2t=s(Qme);T(Wy.$$.fragment,T2t),T2t.forEach(t),F2t.forEach(t),BLo=i(cQe),Hme=n(cQe,"SPAN",{});var M2t=s(Hme);ILo=r(M2t,"AutoModelForPreTraining"),M2t.forEach(t),cQe.forEach(t),nze=i(f),So=n(f,"DIV",{class:!0});var nl=s(So);T(Qy.$$.fragment,nl),NLo=i(nl),Qi=n(nl,"P",{});var ste=s(Qi);qLo=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EG=n(ste,"A",{href:!0});var E2t=s(EG);jLo=r(E2t,"from_pretrained()"),E2t.forEach(t),DLo=r(ste," class method or the "),CG=n(ste,"A",{href:!0});var C2t=s(CG);GLo=r(C2t,"from_config()"),C2t.forEach(t),OLo=r(ste,` class
method.`),ste.forEach(t),VLo=i(nl),Hy=n(nl,"P",{});var fQe=s(Hy);XLo=r(fQe,"This class cannot be instantiated directly using "),Ume=n(fQe,"CODE",{});var w2t=s(Ume);zLo=r(w2t,"__init__()"),w2t.forEach(t),WLo=r(fQe," (throws an error)."),fQe.forEach(t),QLo=i(nl),dt=n(nl,"DIV",{class:!0});var TA=s(dt);T(Uy.$$.fragment,TA),HLo=i(TA),Jme=n(TA,"P",{});var A2t=s(Jme);ULo=r(A2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),A2t.forEach(t),JLo=i(TA),Hi=n(TA,"P",{});var lte=s(Hi);YLo=r(lte,`Note:
Loading a model from its configuration file does `),Yme=n(lte,"STRONG",{});var L2t=s(Yme);KLo=r(L2t,"not"),L2t.forEach(t),ZLo=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),wG=n(lte,"A",{href:!0});var y2t=s(wG);eyo=r(y2t,"from_pretrained()"),y2t.forEach(t),oyo=r(lte," to load the model weights."),lte.forEach(t),ryo=i(TA),T(o1.$$.fragment,TA),TA.forEach(t),tyo=i(nl),Ke=n(nl,"DIV",{class:!0});var ia=s(Ke);T(Jy.$$.fragment,ia),ayo=i(ia),Kme=n(ia,"P",{});var x2t=s(Kme);nyo=r(x2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),x2t.forEach(t),syo=i(ia),Na=n(ia,"P",{});var MA=s(Na);lyo=r(MA,"The model class to instantiate is selected based on the "),Zme=n(MA,"CODE",{});var $2t=s(Zme);iyo=r($2t,"model_type"),$2t.forEach(t),dyo=r(MA,` property of the config object (either
passed as an argument or loaded from `),ege=n(MA,"CODE",{});var k2t=s(ege);cyo=r(k2t,"pretrained_model_name_or_path"),k2t.forEach(t),fyo=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=n(MA,"CODE",{});var S2t=s(oge);myo=r(S2t,"pretrained_model_name_or_path"),S2t.forEach(t),gyo=r(MA,":"),MA.forEach(t),hyo=i(ia),G=n(ia,"UL",{});var O=s(G);r1=n(O,"LI",{});var Bke=s(r1);rge=n(Bke,"STRONG",{});var R2t=s(rge);pyo=r(R2t,"albert"),R2t.forEach(t),_yo=r(Bke," \u2014 "),AG=n(Bke,"A",{href:!0});var P2t=s(AG);uyo=r(P2t,"AlbertForPreTraining"),P2t.forEach(t),byo=r(Bke," (ALBERT model)"),Bke.forEach(t),vyo=i(O),t1=n(O,"LI",{});var Ike=s(t1);tge=n(Ike,"STRONG",{});var B2t=s(tge);Fyo=r(B2t,"bart"),B2t.forEach(t),Tyo=r(Ike," \u2014 "),LG=n(Ike,"A",{href:!0});var I2t=s(LG);Myo=r(I2t,"BartForConditionalGeneration"),I2t.forEach(t),Eyo=r(Ike," (BART model)"),Ike.forEach(t),Cyo=i(O),a1=n(O,"LI",{});var Nke=s(a1);age=n(Nke,"STRONG",{});var N2t=s(age);wyo=r(N2t,"bert"),N2t.forEach(t),Ayo=r(Nke," \u2014 "),yG=n(Nke,"A",{href:!0});var q2t=s(yG);Lyo=r(q2t,"BertForPreTraining"),q2t.forEach(t),yyo=r(Nke," (BERT model)"),Nke.forEach(t),xyo=i(O),n1=n(O,"LI",{});var qke=s(n1);nge=n(qke,"STRONG",{});var j2t=s(nge);$yo=r(j2t,"big_bird"),j2t.forEach(t),kyo=r(qke," \u2014 "),xG=n(qke,"A",{href:!0});var D2t=s(xG);Syo=r(D2t,"BigBirdForPreTraining"),D2t.forEach(t),Ryo=r(qke," (BigBird model)"),qke.forEach(t),Pyo=i(O),s1=n(O,"LI",{});var jke=s(s1);sge=n(jke,"STRONG",{});var G2t=s(sge);Byo=r(G2t,"bloom"),G2t.forEach(t),Iyo=r(jke," \u2014 "),$G=n(jke,"A",{href:!0});var O2t=s($G);Nyo=r(O2t,"BloomForCausalLM"),O2t.forEach(t),qyo=r(jke," (BLOOM model)"),jke.forEach(t),jyo=i(O),l1=n(O,"LI",{});var Dke=s(l1);lge=n(Dke,"STRONG",{});var V2t=s(lge);Dyo=r(V2t,"camembert"),V2t.forEach(t),Gyo=r(Dke," \u2014 "),kG=n(Dke,"A",{href:!0});var X2t=s(kG);Oyo=r(X2t,"CamembertForMaskedLM"),X2t.forEach(t),Vyo=r(Dke," (CamemBERT model)"),Dke.forEach(t),Xyo=i(O),i1=n(O,"LI",{});var Gke=s(i1);ige=n(Gke,"STRONG",{});var z2t=s(ige);zyo=r(z2t,"ctrl"),z2t.forEach(t),Wyo=r(Gke," \u2014 "),SG=n(Gke,"A",{href:!0});var W2t=s(SG);Qyo=r(W2t,"CTRLLMHeadModel"),W2t.forEach(t),Hyo=r(Gke," (CTRL model)"),Gke.forEach(t),Uyo=i(O),d1=n(O,"LI",{});var Oke=s(d1);dge=n(Oke,"STRONG",{});var Q2t=s(dge);Jyo=r(Q2t,"data2vec-text"),Q2t.forEach(t),Yyo=r(Oke," \u2014 "),RG=n(Oke,"A",{href:!0});var H2t=s(RG);Kyo=r(H2t,"Data2VecTextForMaskedLM"),H2t.forEach(t),Zyo=r(Oke," (Data2VecText model)"),Oke.forEach(t),e8o=i(O),c1=n(O,"LI",{});var Vke=s(c1);cge=n(Vke,"STRONG",{});var U2t=s(cge);o8o=r(U2t,"deberta"),U2t.forEach(t),r8o=r(Vke," \u2014 "),PG=n(Vke,"A",{href:!0});var J2t=s(PG);t8o=r(J2t,"DebertaForMaskedLM"),J2t.forEach(t),a8o=r(Vke," (DeBERTa model)"),Vke.forEach(t),n8o=i(O),f1=n(O,"LI",{});var Xke=s(f1);fge=n(Xke,"STRONG",{});var Y2t=s(fge);s8o=r(Y2t,"deberta-v2"),Y2t.forEach(t),l8o=r(Xke," \u2014 "),BG=n(Xke,"A",{href:!0});var K2t=s(BG);i8o=r(K2t,"DebertaV2ForMaskedLM"),K2t.forEach(t),d8o=r(Xke," (DeBERTa-v2 model)"),Xke.forEach(t),c8o=i(O),m1=n(O,"LI",{});var zke=s(m1);mge=n(zke,"STRONG",{});var Z2t=s(mge);f8o=r(Z2t,"distilbert"),Z2t.forEach(t),m8o=r(zke," \u2014 "),IG=n(zke,"A",{href:!0});var ebt=s(IG);g8o=r(ebt,"DistilBertForMaskedLM"),ebt.forEach(t),h8o=r(zke," (DistilBERT model)"),zke.forEach(t),p8o=i(O),g1=n(O,"LI",{});var Wke=s(g1);gge=n(Wke,"STRONG",{});var obt=s(gge);_8o=r(obt,"electra"),obt.forEach(t),u8o=r(Wke," \u2014 "),NG=n(Wke,"A",{href:!0});var rbt=s(NG);b8o=r(rbt,"ElectraForPreTraining"),rbt.forEach(t),v8o=r(Wke," (ELECTRA model)"),Wke.forEach(t),F8o=i(O),h1=n(O,"LI",{});var Qke=s(h1);hge=n(Qke,"STRONG",{});var tbt=s(hge);T8o=r(tbt,"flaubert"),tbt.forEach(t),M8o=r(Qke," \u2014 "),qG=n(Qke,"A",{href:!0});var abt=s(qG);E8o=r(abt,"FlaubertWithLMHeadModel"),abt.forEach(t),C8o=r(Qke," (FlauBERT model)"),Qke.forEach(t),w8o=i(O),p1=n(O,"LI",{});var Hke=s(p1);pge=n(Hke,"STRONG",{});var nbt=s(pge);A8o=r(nbt,"flava"),nbt.forEach(t),L8o=r(Hke," \u2014 "),jG=n(Hke,"A",{href:!0});var sbt=s(jG);y8o=r(sbt,"FlavaForPreTraining"),sbt.forEach(t),x8o=r(Hke," (FLAVA model)"),Hke.forEach(t),$8o=i(O),_1=n(O,"LI",{});var Uke=s(_1);_ge=n(Uke,"STRONG",{});var lbt=s(_ge);k8o=r(lbt,"fnet"),lbt.forEach(t),S8o=r(Uke," \u2014 "),DG=n(Uke,"A",{href:!0});var ibt=s(DG);R8o=r(ibt,"FNetForPreTraining"),ibt.forEach(t),P8o=r(Uke," (FNet model)"),Uke.forEach(t),B8o=i(O),u1=n(O,"LI",{});var Jke=s(u1);uge=n(Jke,"STRONG",{});var dbt=s(uge);I8o=r(dbt,"fsmt"),dbt.forEach(t),N8o=r(Jke," \u2014 "),GG=n(Jke,"A",{href:!0});var cbt=s(GG);q8o=r(cbt,"FSMTForConditionalGeneration"),cbt.forEach(t),j8o=r(Jke," (FairSeq Machine-Translation model)"),Jke.forEach(t),D8o=i(O),b1=n(O,"LI",{});var Yke=s(b1);bge=n(Yke,"STRONG",{});var fbt=s(bge);G8o=r(fbt,"funnel"),fbt.forEach(t),O8o=r(Yke," \u2014 "),OG=n(Yke,"A",{href:!0});var mbt=s(OG);V8o=r(mbt,"FunnelForPreTraining"),mbt.forEach(t),X8o=r(Yke," (Funnel Transformer model)"),Yke.forEach(t),z8o=i(O),v1=n(O,"LI",{});var Kke=s(v1);vge=n(Kke,"STRONG",{});var gbt=s(vge);W8o=r(gbt,"gpt2"),gbt.forEach(t),Q8o=r(Kke," \u2014 "),VG=n(Kke,"A",{href:!0});var hbt=s(VG);H8o=r(hbt,"GPT2LMHeadModel"),hbt.forEach(t),U8o=r(Kke," (OpenAI GPT-2 model)"),Kke.forEach(t),J8o=i(O),F1=n(O,"LI",{});var Zke=s(F1);Fge=n(Zke,"STRONG",{});var pbt=s(Fge);Y8o=r(pbt,"ibert"),pbt.forEach(t),K8o=r(Zke," \u2014 "),XG=n(Zke,"A",{href:!0});var _bt=s(XG);Z8o=r(_bt,"IBertForMaskedLM"),_bt.forEach(t),e9o=r(Zke," (I-BERT model)"),Zke.forEach(t),o9o=i(O),T1=n(O,"LI",{});var eSe=s(T1);Tge=n(eSe,"STRONG",{});var ubt=s(Tge);r9o=r(ubt,"layoutlm"),ubt.forEach(t),t9o=r(eSe," \u2014 "),zG=n(eSe,"A",{href:!0});var bbt=s(zG);a9o=r(bbt,"LayoutLMForMaskedLM"),bbt.forEach(t),n9o=r(eSe," (LayoutLM model)"),eSe.forEach(t),s9o=i(O),M1=n(O,"LI",{});var oSe=s(M1);Mge=n(oSe,"STRONG",{});var vbt=s(Mge);l9o=r(vbt,"longformer"),vbt.forEach(t),i9o=r(oSe," \u2014 "),WG=n(oSe,"A",{href:!0});var Fbt=s(WG);d9o=r(Fbt,"LongformerForMaskedLM"),Fbt.forEach(t),c9o=r(oSe," (Longformer model)"),oSe.forEach(t),f9o=i(O),E1=n(O,"LI",{});var rSe=s(E1);Ege=n(rSe,"STRONG",{});var Tbt=s(Ege);m9o=r(Tbt,"lxmert"),Tbt.forEach(t),g9o=r(rSe," \u2014 "),QG=n(rSe,"A",{href:!0});var Mbt=s(QG);h9o=r(Mbt,"LxmertForPreTraining"),Mbt.forEach(t),p9o=r(rSe," (LXMERT model)"),rSe.forEach(t),_9o=i(O),C1=n(O,"LI",{});var tSe=s(C1);Cge=n(tSe,"STRONG",{});var Ebt=s(Cge);u9o=r(Ebt,"megatron-bert"),Ebt.forEach(t),b9o=r(tSe," \u2014 "),HG=n(tSe,"A",{href:!0});var Cbt=s(HG);v9o=r(Cbt,"MegatronBertForPreTraining"),Cbt.forEach(t),F9o=r(tSe," (Megatron-BERT model)"),tSe.forEach(t),T9o=i(O),w1=n(O,"LI",{});var aSe=s(w1);wge=n(aSe,"STRONG",{});var wbt=s(wge);M9o=r(wbt,"mobilebert"),wbt.forEach(t),E9o=r(aSe," \u2014 "),UG=n(aSe,"A",{href:!0});var Abt=s(UG);C9o=r(Abt,"MobileBertForPreTraining"),Abt.forEach(t),w9o=r(aSe," (MobileBERT model)"),aSe.forEach(t),A9o=i(O),A1=n(O,"LI",{});var nSe=s(A1);Age=n(nSe,"STRONG",{});var Lbt=s(Age);L9o=r(Lbt,"mpnet"),Lbt.forEach(t),y9o=r(nSe," \u2014 "),JG=n(nSe,"A",{href:!0});var ybt=s(JG);x9o=r(ybt,"MPNetForMaskedLM"),ybt.forEach(t),$9o=r(nSe," (MPNet model)"),nSe.forEach(t),k9o=i(O),L1=n(O,"LI",{});var sSe=s(L1);Lge=n(sSe,"STRONG",{});var xbt=s(Lge);S9o=r(xbt,"mvp"),xbt.forEach(t),R9o=r(sSe," \u2014 "),YG=n(sSe,"A",{href:!0});var $bt=s(YG);P9o=r($bt,"MvpForConditionalGeneration"),$bt.forEach(t),B9o=r(sSe," (MVP model)"),sSe.forEach(t),I9o=i(O),y1=n(O,"LI",{});var lSe=s(y1);yge=n(lSe,"STRONG",{});var kbt=s(yge);N9o=r(kbt,"nezha"),kbt.forEach(t),q9o=r(lSe," \u2014 "),KG=n(lSe,"A",{href:!0});var Sbt=s(KG);j9o=r(Sbt,"NezhaForPreTraining"),Sbt.forEach(t),D9o=r(lSe," (Nezha model)"),lSe.forEach(t),G9o=i(O),x1=n(O,"LI",{});var iSe=s(x1);xge=n(iSe,"STRONG",{});var Rbt=s(xge);O9o=r(Rbt,"openai-gpt"),Rbt.forEach(t),V9o=r(iSe," \u2014 "),ZG=n(iSe,"A",{href:!0});var Pbt=s(ZG);X9o=r(Pbt,"OpenAIGPTLMHeadModel"),Pbt.forEach(t),z9o=r(iSe," (OpenAI GPT model)"),iSe.forEach(t),W9o=i(O),$1=n(O,"LI",{});var dSe=s($1);$ge=n(dSe,"STRONG",{});var Bbt=s($ge);Q9o=r(Bbt,"retribert"),Bbt.forEach(t),H9o=r(dSe," \u2014 "),eO=n(dSe,"A",{href:!0});var Ibt=s(eO);U9o=r(Ibt,"RetriBertModel"),Ibt.forEach(t),J9o=r(dSe," (RetriBERT model)"),dSe.forEach(t),Y9o=i(O),k1=n(O,"LI",{});var cSe=s(k1);kge=n(cSe,"STRONG",{});var Nbt=s(kge);K9o=r(Nbt,"roberta"),Nbt.forEach(t),Z9o=r(cSe," \u2014 "),oO=n(cSe,"A",{href:!0});var qbt=s(oO);exo=r(qbt,"RobertaForMaskedLM"),qbt.forEach(t),oxo=r(cSe," (RoBERTa model)"),cSe.forEach(t),rxo=i(O),S1=n(O,"LI",{});var fSe=s(S1);Sge=n(fSe,"STRONG",{});var jbt=s(Sge);txo=r(jbt,"splinter"),jbt.forEach(t),axo=r(fSe," \u2014 "),rO=n(fSe,"A",{href:!0});var Dbt=s(rO);nxo=r(Dbt,"SplinterForPreTraining"),Dbt.forEach(t),sxo=r(fSe," (Splinter model)"),fSe.forEach(t),lxo=i(O),R1=n(O,"LI",{});var mSe=s(R1);Rge=n(mSe,"STRONG",{});var Gbt=s(Rge);ixo=r(Gbt,"squeezebert"),Gbt.forEach(t),dxo=r(mSe," \u2014 "),tO=n(mSe,"A",{href:!0});var Obt=s(tO);cxo=r(Obt,"SqueezeBertForMaskedLM"),Obt.forEach(t),fxo=r(mSe," (SqueezeBERT model)"),mSe.forEach(t),mxo=i(O),P1=n(O,"LI",{});var gSe=s(P1);Pge=n(gSe,"STRONG",{});var Vbt=s(Pge);gxo=r(Vbt,"t5"),Vbt.forEach(t),hxo=r(gSe," \u2014 "),aO=n(gSe,"A",{href:!0});var Xbt=s(aO);pxo=r(Xbt,"T5ForConditionalGeneration"),Xbt.forEach(t),_xo=r(gSe," (T5 model)"),gSe.forEach(t),uxo=i(O),B1=n(O,"LI",{});var hSe=s(B1);Bge=n(hSe,"STRONG",{});var zbt=s(Bge);bxo=r(zbt,"tapas"),zbt.forEach(t),vxo=r(hSe," \u2014 "),nO=n(hSe,"A",{href:!0});var Wbt=s(nO);Fxo=r(Wbt,"TapasForMaskedLM"),Wbt.forEach(t),Txo=r(hSe," (TAPAS model)"),hSe.forEach(t),Mxo=i(O),I1=n(O,"LI",{});var pSe=s(I1);Ige=n(pSe,"STRONG",{});var Qbt=s(Ige);Exo=r(Qbt,"transfo-xl"),Qbt.forEach(t),Cxo=r(pSe," \u2014 "),sO=n(pSe,"A",{href:!0});var Hbt=s(sO);wxo=r(Hbt,"TransfoXLLMHeadModel"),Hbt.forEach(t),Axo=r(pSe," (Transformer-XL model)"),pSe.forEach(t),Lxo=i(O),N1=n(O,"LI",{});var _Se=s(N1);Nge=n(_Se,"STRONG",{});var Ubt=s(Nge);yxo=r(Ubt,"unispeech"),Ubt.forEach(t),xxo=r(_Se," \u2014 "),lO=n(_Se,"A",{href:!0});var Jbt=s(lO);$xo=r(Jbt,"UniSpeechForPreTraining"),Jbt.forEach(t),kxo=r(_Se," (UniSpeech model)"),_Se.forEach(t),Sxo=i(O),q1=n(O,"LI",{});var uSe=s(q1);qge=n(uSe,"STRONG",{});var Ybt=s(qge);Rxo=r(Ybt,"unispeech-sat"),Ybt.forEach(t),Pxo=r(uSe," \u2014 "),iO=n(uSe,"A",{href:!0});var Kbt=s(iO);Bxo=r(Kbt,"UniSpeechSatForPreTraining"),Kbt.forEach(t),Ixo=r(uSe," (UniSpeechSat model)"),uSe.forEach(t),Nxo=i(O),j1=n(O,"LI",{});var bSe=s(j1);jge=n(bSe,"STRONG",{});var Zbt=s(jge);qxo=r(Zbt,"visual_bert"),Zbt.forEach(t),jxo=r(bSe," \u2014 "),dO=n(bSe,"A",{href:!0});var evt=s(dO);Dxo=r(evt,"VisualBertForPreTraining"),evt.forEach(t),Gxo=r(bSe," (VisualBERT model)"),bSe.forEach(t),Oxo=i(O),D1=n(O,"LI",{});var vSe=s(D1);Dge=n(vSe,"STRONG",{});var ovt=s(Dge);Vxo=r(ovt,"vit_mae"),ovt.forEach(t),Xxo=r(vSe," \u2014 "),cO=n(vSe,"A",{href:!0});var rvt=s(cO);zxo=r(rvt,"ViTMAEForPreTraining"),rvt.forEach(t),Wxo=r(vSe," (ViTMAE model)"),vSe.forEach(t),Qxo=i(O),G1=n(O,"LI",{});var FSe=s(G1);Gge=n(FSe,"STRONG",{});var tvt=s(Gge);Hxo=r(tvt,"wav2vec2"),tvt.forEach(t),Uxo=r(FSe," \u2014 "),fO=n(FSe,"A",{href:!0});var avt=s(fO);Jxo=r(avt,"Wav2Vec2ForPreTraining"),avt.forEach(t),Yxo=r(FSe," (Wav2Vec2 model)"),FSe.forEach(t),Kxo=i(O),O1=n(O,"LI",{});var TSe=s(O1);Oge=n(TSe,"STRONG",{});var nvt=s(Oge);Zxo=r(nvt,"wav2vec2-conformer"),nvt.forEach(t),e$o=r(TSe," \u2014 "),mO=n(TSe,"A",{href:!0});var svt=s(mO);o$o=r(svt,"Wav2Vec2ConformerForPreTraining"),svt.forEach(t),r$o=r(TSe," (Wav2Vec2-Conformer model)"),TSe.forEach(t),t$o=i(O),V1=n(O,"LI",{});var MSe=s(V1);Vge=n(MSe,"STRONG",{});var lvt=s(Vge);a$o=r(lvt,"xlm"),lvt.forEach(t),n$o=r(MSe," \u2014 "),gO=n(MSe,"A",{href:!0});var ivt=s(gO);s$o=r(ivt,"XLMWithLMHeadModel"),ivt.forEach(t),l$o=r(MSe," (XLM model)"),MSe.forEach(t),i$o=i(O),X1=n(O,"LI",{});var ESe=s(X1);Xge=n(ESe,"STRONG",{});var dvt=s(Xge);d$o=r(dvt,"xlm-roberta"),dvt.forEach(t),c$o=r(ESe," \u2014 "),hO=n(ESe,"A",{href:!0});var cvt=s(hO);f$o=r(cvt,"XLMRobertaForMaskedLM"),cvt.forEach(t),m$o=r(ESe," (XLM-RoBERTa model)"),ESe.forEach(t),g$o=i(O),z1=n(O,"LI",{});var CSe=s(z1);zge=n(CSe,"STRONG",{});var fvt=s(zge);h$o=r(fvt,"xlm-roberta-xl"),fvt.forEach(t),p$o=r(CSe," \u2014 "),pO=n(CSe,"A",{href:!0});var mvt=s(pO);_$o=r(mvt,"XLMRobertaXLForMaskedLM"),mvt.forEach(t),u$o=r(CSe," (XLM-RoBERTa-XL model)"),CSe.forEach(t),b$o=i(O),W1=n(O,"LI",{});var wSe=s(W1);Wge=n(wSe,"STRONG",{});var gvt=s(Wge);v$o=r(gvt,"xlnet"),gvt.forEach(t),F$o=r(wSe," \u2014 "),_O=n(wSe,"A",{href:!0});var hvt=s(_O);T$o=r(hvt,"XLNetLMHeadModel"),hvt.forEach(t),M$o=r(wSe," (XLNet model)"),wSe.forEach(t),O.forEach(t),E$o=i(ia),Q1=n(ia,"P",{});var ASe=s(Q1);C$o=r(ASe,"The model is set in evaluation mode by default using "),Qge=n(ASe,"CODE",{});var pvt=s(Qge);w$o=r(pvt,"model.eval()"),pvt.forEach(t),A$o=r(ASe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=n(ASe,"CODE",{});var _vt=s(Hge);L$o=r(_vt,"model.train()"),_vt.forEach(t),ASe.forEach(t),y$o=i(ia),T(H1.$$.fragment,ia),ia.forEach(t),nl.forEach(t),sze=i(f),Ui=n(f,"H2",{class:!0});var mQe=s(Ui);U1=n(mQe,"A",{id:!0,class:!0,href:!0});var uvt=s(U1);Uge=n(uvt,"SPAN",{});var bvt=s(Uge);T(Yy.$$.fragment,bvt),bvt.forEach(t),uvt.forEach(t),x$o=i(mQe),Jge=n(mQe,"SPAN",{});var vvt=s(Jge);$$o=r(vvt,"AutoModelForCausalLM"),vvt.forEach(t),mQe.forEach(t),lze=i(f),Ro=n(f,"DIV",{class:!0});var sl=s(Ro);T(Ky.$$.fragment,sl),k$o=i(sl),Ji=n(sl,"P",{});var ite=s(Ji);S$o=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uO=n(ite,"A",{href:!0});var Fvt=s(uO);R$o=r(Fvt,"from_pretrained()"),Fvt.forEach(t),P$o=r(ite," class method or the "),bO=n(ite,"A",{href:!0});var Tvt=s(bO);B$o=r(Tvt,"from_config()"),Tvt.forEach(t),I$o=r(ite,` class
method.`),ite.forEach(t),N$o=i(sl),Zy=n(sl,"P",{});var gQe=s(Zy);q$o=r(gQe,"This class cannot be instantiated directly using "),Yge=n(gQe,"CODE",{});var Mvt=s(Yge);j$o=r(Mvt,"__init__()"),Mvt.forEach(t),D$o=r(gQe," (throws an error)."),gQe.forEach(t),G$o=i(sl),ct=n(sl,"DIV",{class:!0});var EA=s(ct);T(e8.$$.fragment,EA),O$o=i(EA),Kge=n(EA,"P",{});var Evt=s(Kge);V$o=r(Evt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Evt.forEach(t),X$o=i(EA),Yi=n(EA,"P",{});var dte=s(Yi);z$o=r(dte,`Note:
Loading a model from its configuration file does `),Zge=n(dte,"STRONG",{});var Cvt=s(Zge);W$o=r(Cvt,"not"),Cvt.forEach(t),Q$o=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=n(dte,"A",{href:!0});var wvt=s(vO);H$o=r(wvt,"from_pretrained()"),wvt.forEach(t),U$o=r(dte," to load the model weights."),dte.forEach(t),J$o=i(EA),T(J1.$$.fragment,EA),EA.forEach(t),Y$o=i(sl),Ze=n(sl,"DIV",{class:!0});var da=s(Ze);T(o8.$$.fragment,da),K$o=i(da),ehe=n(da,"P",{});var Avt=s(ehe);Z$o=r(Avt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Avt.forEach(t),eko=i(da),qa=n(da,"P",{});var CA=s(qa);oko=r(CA,"The model class to instantiate is selected based on the "),ohe=n(CA,"CODE",{});var Lvt=s(ohe);rko=r(Lvt,"model_type"),Lvt.forEach(t),tko=r(CA,` property of the config object (either
passed as an argument or loaded from `),rhe=n(CA,"CODE",{});var yvt=s(rhe);ako=r(yvt,"pretrained_model_name_or_path"),yvt.forEach(t),nko=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=n(CA,"CODE",{});var xvt=s(the);sko=r(xvt,"pretrained_model_name_or_path"),xvt.forEach(t),lko=r(CA,":"),CA.forEach(t),iko=i(da),z=n(da,"UL",{});var W=s(z);Y1=n(W,"LI",{});var LSe=s(Y1);ahe=n(LSe,"STRONG",{});var $vt=s(ahe);dko=r($vt,"bart"),$vt.forEach(t),cko=r(LSe," \u2014 "),FO=n(LSe,"A",{href:!0});var kvt=s(FO);fko=r(kvt,"BartForCausalLM"),kvt.forEach(t),mko=r(LSe," (BART model)"),LSe.forEach(t),gko=i(W),K1=n(W,"LI",{});var ySe=s(K1);nhe=n(ySe,"STRONG",{});var Svt=s(nhe);hko=r(Svt,"bert"),Svt.forEach(t),pko=r(ySe," \u2014 "),TO=n(ySe,"A",{href:!0});var Rvt=s(TO);_ko=r(Rvt,"BertLMHeadModel"),Rvt.forEach(t),uko=r(ySe," (BERT model)"),ySe.forEach(t),bko=i(W),Z1=n(W,"LI",{});var xSe=s(Z1);she=n(xSe,"STRONG",{});var Pvt=s(she);vko=r(Pvt,"bert-generation"),Pvt.forEach(t),Fko=r(xSe," \u2014 "),MO=n(xSe,"A",{href:!0});var Bvt=s(MO);Tko=r(Bvt,"BertGenerationDecoder"),Bvt.forEach(t),Mko=r(xSe," (Bert Generation model)"),xSe.forEach(t),Eko=i(W),e4=n(W,"LI",{});var $Se=s(e4);lhe=n($Se,"STRONG",{});var Ivt=s(lhe);Cko=r(Ivt,"big_bird"),Ivt.forEach(t),wko=r($Se," \u2014 "),EO=n($Se,"A",{href:!0});var Nvt=s(EO);Ako=r(Nvt,"BigBirdForCausalLM"),Nvt.forEach(t),Lko=r($Se," (BigBird model)"),$Se.forEach(t),yko=i(W),o4=n(W,"LI",{});var kSe=s(o4);ihe=n(kSe,"STRONG",{});var qvt=s(ihe);xko=r(qvt,"bigbird_pegasus"),qvt.forEach(t),$ko=r(kSe," \u2014 "),CO=n(kSe,"A",{href:!0});var jvt=s(CO);kko=r(jvt,"BigBirdPegasusForCausalLM"),jvt.forEach(t),Sko=r(kSe," (BigBird-Pegasus model)"),kSe.forEach(t),Rko=i(W),r4=n(W,"LI",{});var SSe=s(r4);dhe=n(SSe,"STRONG",{});var Dvt=s(dhe);Pko=r(Dvt,"blenderbot"),Dvt.forEach(t),Bko=r(SSe," \u2014 "),wO=n(SSe,"A",{href:!0});var Gvt=s(wO);Iko=r(Gvt,"BlenderbotForCausalLM"),Gvt.forEach(t),Nko=r(SSe," (Blenderbot model)"),SSe.forEach(t),qko=i(W),t4=n(W,"LI",{});var RSe=s(t4);che=n(RSe,"STRONG",{});var Ovt=s(che);jko=r(Ovt,"blenderbot-small"),Ovt.forEach(t),Dko=r(RSe," \u2014 "),AO=n(RSe,"A",{href:!0});var Vvt=s(AO);Gko=r(Vvt,"BlenderbotSmallForCausalLM"),Vvt.forEach(t),Oko=r(RSe," (BlenderbotSmall model)"),RSe.forEach(t),Vko=i(W),a4=n(W,"LI",{});var PSe=s(a4);fhe=n(PSe,"STRONG",{});var Xvt=s(fhe);Xko=r(Xvt,"bloom"),Xvt.forEach(t),zko=r(PSe," \u2014 "),LO=n(PSe,"A",{href:!0});var zvt=s(LO);Wko=r(zvt,"BloomForCausalLM"),zvt.forEach(t),Qko=r(PSe," (BLOOM model)"),PSe.forEach(t),Hko=i(W),n4=n(W,"LI",{});var BSe=s(n4);mhe=n(BSe,"STRONG",{});var Wvt=s(mhe);Uko=r(Wvt,"camembert"),Wvt.forEach(t),Jko=r(BSe," \u2014 "),yO=n(BSe,"A",{href:!0});var Qvt=s(yO);Yko=r(Qvt,"CamembertForCausalLM"),Qvt.forEach(t),Kko=r(BSe," (CamemBERT model)"),BSe.forEach(t),Zko=i(W),s4=n(W,"LI",{});var ISe=s(s4);ghe=n(ISe,"STRONG",{});var Hvt=s(ghe);eSo=r(Hvt,"codegen"),Hvt.forEach(t),oSo=r(ISe," \u2014 "),xO=n(ISe,"A",{href:!0});var Uvt=s(xO);rSo=r(Uvt,"CodeGenForCausalLM"),Uvt.forEach(t),tSo=r(ISe," (CodeGen model)"),ISe.forEach(t),aSo=i(W),l4=n(W,"LI",{});var NSe=s(l4);hhe=n(NSe,"STRONG",{});var Jvt=s(hhe);nSo=r(Jvt,"ctrl"),Jvt.forEach(t),sSo=r(NSe," \u2014 "),$O=n(NSe,"A",{href:!0});var Yvt=s($O);lSo=r(Yvt,"CTRLLMHeadModel"),Yvt.forEach(t),iSo=r(NSe," (CTRL model)"),NSe.forEach(t),dSo=i(W),i4=n(W,"LI",{});var qSe=s(i4);phe=n(qSe,"STRONG",{});var Kvt=s(phe);cSo=r(Kvt,"data2vec-text"),Kvt.forEach(t),fSo=r(qSe," \u2014 "),kO=n(qSe,"A",{href:!0});var Zvt=s(kO);mSo=r(Zvt,"Data2VecTextForCausalLM"),Zvt.forEach(t),gSo=r(qSe," (Data2VecText model)"),qSe.forEach(t),hSo=i(W),d4=n(W,"LI",{});var jSe=s(d4);_he=n(jSe,"STRONG",{});var e0t=s(_he);pSo=r(e0t,"electra"),e0t.forEach(t),_So=r(jSe," \u2014 "),SO=n(jSe,"A",{href:!0});var o0t=s(SO);uSo=r(o0t,"ElectraForCausalLM"),o0t.forEach(t),bSo=r(jSe," (ELECTRA model)"),jSe.forEach(t),vSo=i(W),c4=n(W,"LI",{});var DSe=s(c4);uhe=n(DSe,"STRONG",{});var r0t=s(uhe);FSo=r(r0t,"gpt2"),r0t.forEach(t),TSo=r(DSe," \u2014 "),RO=n(DSe,"A",{href:!0});var t0t=s(RO);MSo=r(t0t,"GPT2LMHeadModel"),t0t.forEach(t),ESo=r(DSe," (OpenAI GPT-2 model)"),DSe.forEach(t),CSo=i(W),f4=n(W,"LI",{});var GSe=s(f4);bhe=n(GSe,"STRONG",{});var a0t=s(bhe);wSo=r(a0t,"gpt_neo"),a0t.forEach(t),ASo=r(GSe," \u2014 "),PO=n(GSe,"A",{href:!0});var n0t=s(PO);LSo=r(n0t,"GPTNeoForCausalLM"),n0t.forEach(t),ySo=r(GSe," (GPT Neo model)"),GSe.forEach(t),xSo=i(W),m4=n(W,"LI",{});var OSe=s(m4);vhe=n(OSe,"STRONG",{});var s0t=s(vhe);$So=r(s0t,"gpt_neox"),s0t.forEach(t),kSo=r(OSe," \u2014 "),BO=n(OSe,"A",{href:!0});var l0t=s(BO);SSo=r(l0t,"GPTNeoXForCausalLM"),l0t.forEach(t),RSo=r(OSe," (GPT NeoX model)"),OSe.forEach(t),PSo=i(W),g4=n(W,"LI",{});var VSe=s(g4);Fhe=n(VSe,"STRONG",{});var i0t=s(Fhe);BSo=r(i0t,"gptj"),i0t.forEach(t),ISo=r(VSe," \u2014 "),IO=n(VSe,"A",{href:!0});var d0t=s(IO);NSo=r(d0t,"GPTJForCausalLM"),d0t.forEach(t),qSo=r(VSe," (GPT-J model)"),VSe.forEach(t),jSo=i(W),h4=n(W,"LI",{});var XSe=s(h4);The=n(XSe,"STRONG",{});var c0t=s(The);DSo=r(c0t,"marian"),c0t.forEach(t),GSo=r(XSe," \u2014 "),NO=n(XSe,"A",{href:!0});var f0t=s(NO);OSo=r(f0t,"MarianForCausalLM"),f0t.forEach(t),VSo=r(XSe," (Marian model)"),XSe.forEach(t),XSo=i(W),p4=n(W,"LI",{});var zSe=s(p4);Mhe=n(zSe,"STRONG",{});var m0t=s(Mhe);zSo=r(m0t,"mbart"),m0t.forEach(t),WSo=r(zSe," \u2014 "),qO=n(zSe,"A",{href:!0});var g0t=s(qO);QSo=r(g0t,"MBartForCausalLM"),g0t.forEach(t),HSo=r(zSe," (mBART model)"),zSe.forEach(t),USo=i(W),_4=n(W,"LI",{});var WSe=s(_4);Ehe=n(WSe,"STRONG",{});var h0t=s(Ehe);JSo=r(h0t,"megatron-bert"),h0t.forEach(t),YSo=r(WSe," \u2014 "),jO=n(WSe,"A",{href:!0});var p0t=s(jO);KSo=r(p0t,"MegatronBertForCausalLM"),p0t.forEach(t),ZSo=r(WSe," (Megatron-BERT model)"),WSe.forEach(t),eRo=i(W),u4=n(W,"LI",{});var QSe=s(u4);Che=n(QSe,"STRONG",{});var _0t=s(Che);oRo=r(_0t,"mvp"),_0t.forEach(t),rRo=r(QSe," \u2014 "),DO=n(QSe,"A",{href:!0});var u0t=s(DO);tRo=r(u0t,"MvpForCausalLM"),u0t.forEach(t),aRo=r(QSe," (MVP model)"),QSe.forEach(t),nRo=i(W),b4=n(W,"LI",{});var HSe=s(b4);whe=n(HSe,"STRONG",{});var b0t=s(whe);sRo=r(b0t,"openai-gpt"),b0t.forEach(t),lRo=r(HSe," \u2014 "),GO=n(HSe,"A",{href:!0});var v0t=s(GO);iRo=r(v0t,"OpenAIGPTLMHeadModel"),v0t.forEach(t),dRo=r(HSe," (OpenAI GPT model)"),HSe.forEach(t),cRo=i(W),v4=n(W,"LI",{});var USe=s(v4);Ahe=n(USe,"STRONG",{});var F0t=s(Ahe);fRo=r(F0t,"opt"),F0t.forEach(t),mRo=r(USe," \u2014 "),OO=n(USe,"A",{href:!0});var T0t=s(OO);gRo=r(T0t,"OPTForCausalLM"),T0t.forEach(t),hRo=r(USe," (OPT model)"),USe.forEach(t),pRo=i(W),F4=n(W,"LI",{});var JSe=s(F4);Lhe=n(JSe,"STRONG",{});var M0t=s(Lhe);_Ro=r(M0t,"pegasus"),M0t.forEach(t),uRo=r(JSe," \u2014 "),VO=n(JSe,"A",{href:!0});var E0t=s(VO);bRo=r(E0t,"PegasusForCausalLM"),E0t.forEach(t),vRo=r(JSe," (Pegasus model)"),JSe.forEach(t),FRo=i(W),T4=n(W,"LI",{});var YSe=s(T4);yhe=n(YSe,"STRONG",{});var C0t=s(yhe);TRo=r(C0t,"plbart"),C0t.forEach(t),MRo=r(YSe," \u2014 "),XO=n(YSe,"A",{href:!0});var w0t=s(XO);ERo=r(w0t,"PLBartForCausalLM"),w0t.forEach(t),CRo=r(YSe," (PLBart model)"),YSe.forEach(t),wRo=i(W),M4=n(W,"LI",{});var KSe=s(M4);xhe=n(KSe,"STRONG",{});var A0t=s(xhe);ARo=r(A0t,"prophetnet"),A0t.forEach(t),LRo=r(KSe," \u2014 "),zO=n(KSe,"A",{href:!0});var L0t=s(zO);yRo=r(L0t,"ProphetNetForCausalLM"),L0t.forEach(t),xRo=r(KSe," (ProphetNet model)"),KSe.forEach(t),$Ro=i(W),E4=n(W,"LI",{});var ZSe=s(E4);$he=n(ZSe,"STRONG",{});var y0t=s($he);kRo=r(y0t,"qdqbert"),y0t.forEach(t),SRo=r(ZSe," \u2014 "),WO=n(ZSe,"A",{href:!0});var x0t=s(WO);RRo=r(x0t,"QDQBertLMHeadModel"),x0t.forEach(t),PRo=r(ZSe," (QDQBert model)"),ZSe.forEach(t),BRo=i(W),C4=n(W,"LI",{});var eRe=s(C4);khe=n(eRe,"STRONG",{});var $0t=s(khe);IRo=r($0t,"reformer"),$0t.forEach(t),NRo=r(eRe," \u2014 "),QO=n(eRe,"A",{href:!0});var k0t=s(QO);qRo=r(k0t,"ReformerModelWithLMHead"),k0t.forEach(t),jRo=r(eRe," (Reformer model)"),eRe.forEach(t),DRo=i(W),w4=n(W,"LI",{});var oRe=s(w4);She=n(oRe,"STRONG",{});var S0t=s(She);GRo=r(S0t,"rembert"),S0t.forEach(t),ORo=r(oRe," \u2014 "),HO=n(oRe,"A",{href:!0});var R0t=s(HO);VRo=r(R0t,"RemBertForCausalLM"),R0t.forEach(t),XRo=r(oRe," (RemBERT model)"),oRe.forEach(t),zRo=i(W),A4=n(W,"LI",{});var rRe=s(A4);Rhe=n(rRe,"STRONG",{});var P0t=s(Rhe);WRo=r(P0t,"roberta"),P0t.forEach(t),QRo=r(rRe," \u2014 "),UO=n(rRe,"A",{href:!0});var B0t=s(UO);HRo=r(B0t,"RobertaForCausalLM"),B0t.forEach(t),URo=r(rRe," (RoBERTa model)"),rRe.forEach(t),JRo=i(W),L4=n(W,"LI",{});var tRe=s(L4);Phe=n(tRe,"STRONG",{});var I0t=s(Phe);YRo=r(I0t,"roformer"),I0t.forEach(t),KRo=r(tRe," \u2014 "),JO=n(tRe,"A",{href:!0});var N0t=s(JO);ZRo=r(N0t,"RoFormerForCausalLM"),N0t.forEach(t),ePo=r(tRe," (RoFormer model)"),tRe.forEach(t),oPo=i(W),y4=n(W,"LI",{});var aRe=s(y4);Bhe=n(aRe,"STRONG",{});var q0t=s(Bhe);rPo=r(q0t,"speech_to_text_2"),q0t.forEach(t),tPo=r(aRe," \u2014 "),YO=n(aRe,"A",{href:!0});var j0t=s(YO);aPo=r(j0t,"Speech2Text2ForCausalLM"),j0t.forEach(t),nPo=r(aRe," (Speech2Text2 model)"),aRe.forEach(t),sPo=i(W),x4=n(W,"LI",{});var nRe=s(x4);Ihe=n(nRe,"STRONG",{});var D0t=s(Ihe);lPo=r(D0t,"transfo-xl"),D0t.forEach(t),iPo=r(nRe," \u2014 "),KO=n(nRe,"A",{href:!0});var G0t=s(KO);dPo=r(G0t,"TransfoXLLMHeadModel"),G0t.forEach(t),cPo=r(nRe," (Transformer-XL model)"),nRe.forEach(t),fPo=i(W),$4=n(W,"LI",{});var sRe=s($4);Nhe=n(sRe,"STRONG",{});var O0t=s(Nhe);mPo=r(O0t,"trocr"),O0t.forEach(t),gPo=r(sRe," \u2014 "),ZO=n(sRe,"A",{href:!0});var V0t=s(ZO);hPo=r(V0t,"TrOCRForCausalLM"),V0t.forEach(t),pPo=r(sRe," (TrOCR model)"),sRe.forEach(t),_Po=i(W),k4=n(W,"LI",{});var lRe=s(k4);qhe=n(lRe,"STRONG",{});var X0t=s(qhe);uPo=r(X0t,"xglm"),X0t.forEach(t),bPo=r(lRe," \u2014 "),eV=n(lRe,"A",{href:!0});var z0t=s(eV);vPo=r(z0t,"XGLMForCausalLM"),z0t.forEach(t),FPo=r(lRe," (XGLM model)"),lRe.forEach(t),TPo=i(W),S4=n(W,"LI",{});var iRe=s(S4);jhe=n(iRe,"STRONG",{});var W0t=s(jhe);MPo=r(W0t,"xlm"),W0t.forEach(t),EPo=r(iRe," \u2014 "),oV=n(iRe,"A",{href:!0});var Q0t=s(oV);CPo=r(Q0t,"XLMWithLMHeadModel"),Q0t.forEach(t),wPo=r(iRe," (XLM model)"),iRe.forEach(t),APo=i(W),R4=n(W,"LI",{});var dRe=s(R4);Dhe=n(dRe,"STRONG",{});var H0t=s(Dhe);LPo=r(H0t,"xlm-prophetnet"),H0t.forEach(t),yPo=r(dRe," \u2014 "),rV=n(dRe,"A",{href:!0});var U0t=s(rV);xPo=r(U0t,"XLMProphetNetForCausalLM"),U0t.forEach(t),$Po=r(dRe," (XLM-ProphetNet model)"),dRe.forEach(t),kPo=i(W),P4=n(W,"LI",{});var cRe=s(P4);Ghe=n(cRe,"STRONG",{});var J0t=s(Ghe);SPo=r(J0t,"xlm-roberta"),J0t.forEach(t),RPo=r(cRe," \u2014 "),tV=n(cRe,"A",{href:!0});var Y0t=s(tV);PPo=r(Y0t,"XLMRobertaForCausalLM"),Y0t.forEach(t),BPo=r(cRe," (XLM-RoBERTa model)"),cRe.forEach(t),IPo=i(W),B4=n(W,"LI",{});var fRe=s(B4);Ohe=n(fRe,"STRONG",{});var K0t=s(Ohe);NPo=r(K0t,"xlm-roberta-xl"),K0t.forEach(t),qPo=r(fRe," \u2014 "),aV=n(fRe,"A",{href:!0});var Z0t=s(aV);jPo=r(Z0t,"XLMRobertaXLForCausalLM"),Z0t.forEach(t),DPo=r(fRe," (XLM-RoBERTa-XL model)"),fRe.forEach(t),GPo=i(W),I4=n(W,"LI",{});var mRe=s(I4);Vhe=n(mRe,"STRONG",{});var eFt=s(Vhe);OPo=r(eFt,"xlnet"),eFt.forEach(t),VPo=r(mRe," \u2014 "),nV=n(mRe,"A",{href:!0});var oFt=s(nV);XPo=r(oFt,"XLNetLMHeadModel"),oFt.forEach(t),zPo=r(mRe," (XLNet model)"),mRe.forEach(t),W.forEach(t),WPo=i(da),N4=n(da,"P",{});var gRe=s(N4);QPo=r(gRe,"The model is set in evaluation mode by default using "),Xhe=n(gRe,"CODE",{});var rFt=s(Xhe);HPo=r(rFt,"model.eval()"),rFt.forEach(t),UPo=r(gRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zhe=n(gRe,"CODE",{});var tFt=s(zhe);JPo=r(tFt,"model.train()"),tFt.forEach(t),gRe.forEach(t),YPo=i(da),T(q4.$$.fragment,da),da.forEach(t),sl.forEach(t),ize=i(f),Ki=n(f,"H2",{class:!0});var hQe=s(Ki);j4=n(hQe,"A",{id:!0,class:!0,href:!0});var aFt=s(j4);Whe=n(aFt,"SPAN",{});var nFt=s(Whe);T(r8.$$.fragment,nFt),nFt.forEach(t),aFt.forEach(t),KPo=i(hQe),Qhe=n(hQe,"SPAN",{});var sFt=s(Qhe);ZPo=r(sFt,"AutoModelForMaskedLM"),sFt.forEach(t),hQe.forEach(t),dze=i(f),Po=n(f,"DIV",{class:!0});var ll=s(Po);T(t8.$$.fragment,ll),eBo=i(ll),Zi=n(ll,"P",{});var cte=s(Zi);oBo=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sV=n(cte,"A",{href:!0});var lFt=s(sV);rBo=r(lFt,"from_pretrained()"),lFt.forEach(t),tBo=r(cte," class method or the "),lV=n(cte,"A",{href:!0});var iFt=s(lV);aBo=r(iFt,"from_config()"),iFt.forEach(t),nBo=r(cte,` class
method.`),cte.forEach(t),sBo=i(ll),a8=n(ll,"P",{});var pQe=s(a8);lBo=r(pQe,"This class cannot be instantiated directly using "),Hhe=n(pQe,"CODE",{});var dFt=s(Hhe);iBo=r(dFt,"__init__()"),dFt.forEach(t),dBo=r(pQe," (throws an error)."),pQe.forEach(t),cBo=i(ll),ft=n(ll,"DIV",{class:!0});var wA=s(ft);T(n8.$$.fragment,wA),fBo=i(wA),Uhe=n(wA,"P",{});var cFt=s(Uhe);mBo=r(cFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),cFt.forEach(t),gBo=i(wA),ed=n(wA,"P",{});var fte=s(ed);hBo=r(fte,`Note:
Loading a model from its configuration file does `),Jhe=n(fte,"STRONG",{});var fFt=s(Jhe);pBo=r(fFt,"not"),fFt.forEach(t),_Bo=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=n(fte,"A",{href:!0});var mFt=s(iV);uBo=r(mFt,"from_pretrained()"),mFt.forEach(t),bBo=r(fte," to load the model weights."),fte.forEach(t),vBo=i(wA),T(D4.$$.fragment,wA),wA.forEach(t),FBo=i(ll),eo=n(ll,"DIV",{class:!0});var ca=s(eo);T(s8.$$.fragment,ca),TBo=i(ca),Yhe=n(ca,"P",{});var gFt=s(Yhe);MBo=r(gFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),gFt.forEach(t),EBo=i(ca),ja=n(ca,"P",{});var AA=s(ja);CBo=r(AA,"The model class to instantiate is selected based on the "),Khe=n(AA,"CODE",{});var hFt=s(Khe);wBo=r(hFt,"model_type"),hFt.forEach(t),ABo=r(AA,` property of the config object (either
passed as an argument or loaded from `),Zhe=n(AA,"CODE",{});var pFt=s(Zhe);LBo=r(pFt,"pretrained_model_name_or_path"),pFt.forEach(t),yBo=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),epe=n(AA,"CODE",{});var _Ft=s(epe);xBo=r(_Ft,"pretrained_model_name_or_path"),_Ft.forEach(t),$Bo=r(AA,":"),AA.forEach(t),kBo=i(ca),Q=n(ca,"UL",{});var H=s(Q);G4=n(H,"LI",{});var hRe=s(G4);ope=n(hRe,"STRONG",{});var uFt=s(ope);SBo=r(uFt,"albert"),uFt.forEach(t),RBo=r(hRe," \u2014 "),dV=n(hRe,"A",{href:!0});var bFt=s(dV);PBo=r(bFt,"AlbertForMaskedLM"),bFt.forEach(t),BBo=r(hRe," (ALBERT model)"),hRe.forEach(t),IBo=i(H),O4=n(H,"LI",{});var pRe=s(O4);rpe=n(pRe,"STRONG",{});var vFt=s(rpe);NBo=r(vFt,"bart"),vFt.forEach(t),qBo=r(pRe," \u2014 "),cV=n(pRe,"A",{href:!0});var FFt=s(cV);jBo=r(FFt,"BartForConditionalGeneration"),FFt.forEach(t),DBo=r(pRe," (BART model)"),pRe.forEach(t),GBo=i(H),V4=n(H,"LI",{});var _Re=s(V4);tpe=n(_Re,"STRONG",{});var TFt=s(tpe);OBo=r(TFt,"bert"),TFt.forEach(t),VBo=r(_Re," \u2014 "),fV=n(_Re,"A",{href:!0});var MFt=s(fV);XBo=r(MFt,"BertForMaskedLM"),MFt.forEach(t),zBo=r(_Re," (BERT model)"),_Re.forEach(t),WBo=i(H),X4=n(H,"LI",{});var uRe=s(X4);ape=n(uRe,"STRONG",{});var EFt=s(ape);QBo=r(EFt,"big_bird"),EFt.forEach(t),HBo=r(uRe," \u2014 "),mV=n(uRe,"A",{href:!0});var CFt=s(mV);UBo=r(CFt,"BigBirdForMaskedLM"),CFt.forEach(t),JBo=r(uRe," (BigBird model)"),uRe.forEach(t),YBo=i(H),z4=n(H,"LI",{});var bRe=s(z4);npe=n(bRe,"STRONG",{});var wFt=s(npe);KBo=r(wFt,"camembert"),wFt.forEach(t),ZBo=r(bRe," \u2014 "),gV=n(bRe,"A",{href:!0});var AFt=s(gV);eIo=r(AFt,"CamembertForMaskedLM"),AFt.forEach(t),oIo=r(bRe," (CamemBERT model)"),bRe.forEach(t),rIo=i(H),W4=n(H,"LI",{});var vRe=s(W4);spe=n(vRe,"STRONG",{});var LFt=s(spe);tIo=r(LFt,"convbert"),LFt.forEach(t),aIo=r(vRe," \u2014 "),hV=n(vRe,"A",{href:!0});var yFt=s(hV);nIo=r(yFt,"ConvBertForMaskedLM"),yFt.forEach(t),sIo=r(vRe," (ConvBERT model)"),vRe.forEach(t),lIo=i(H),Q4=n(H,"LI",{});var FRe=s(Q4);lpe=n(FRe,"STRONG",{});var xFt=s(lpe);iIo=r(xFt,"data2vec-text"),xFt.forEach(t),dIo=r(FRe," \u2014 "),pV=n(FRe,"A",{href:!0});var $Ft=s(pV);cIo=r($Ft,"Data2VecTextForMaskedLM"),$Ft.forEach(t),fIo=r(FRe," (Data2VecText model)"),FRe.forEach(t),mIo=i(H),H4=n(H,"LI",{});var TRe=s(H4);ipe=n(TRe,"STRONG",{});var kFt=s(ipe);gIo=r(kFt,"deberta"),kFt.forEach(t),hIo=r(TRe," \u2014 "),_V=n(TRe,"A",{href:!0});var SFt=s(_V);pIo=r(SFt,"DebertaForMaskedLM"),SFt.forEach(t),_Io=r(TRe," (DeBERTa model)"),TRe.forEach(t),uIo=i(H),U4=n(H,"LI",{});var MRe=s(U4);dpe=n(MRe,"STRONG",{});var RFt=s(dpe);bIo=r(RFt,"deberta-v2"),RFt.forEach(t),vIo=r(MRe," \u2014 "),uV=n(MRe,"A",{href:!0});var PFt=s(uV);FIo=r(PFt,"DebertaV2ForMaskedLM"),PFt.forEach(t),TIo=r(MRe," (DeBERTa-v2 model)"),MRe.forEach(t),MIo=i(H),J4=n(H,"LI",{});var ERe=s(J4);cpe=n(ERe,"STRONG",{});var BFt=s(cpe);EIo=r(BFt,"distilbert"),BFt.forEach(t),CIo=r(ERe," \u2014 "),bV=n(ERe,"A",{href:!0});var IFt=s(bV);wIo=r(IFt,"DistilBertForMaskedLM"),IFt.forEach(t),AIo=r(ERe," (DistilBERT model)"),ERe.forEach(t),LIo=i(H),Y4=n(H,"LI",{});var CRe=s(Y4);fpe=n(CRe,"STRONG",{});var NFt=s(fpe);yIo=r(NFt,"electra"),NFt.forEach(t),xIo=r(CRe," \u2014 "),vV=n(CRe,"A",{href:!0});var qFt=s(vV);$Io=r(qFt,"ElectraForMaskedLM"),qFt.forEach(t),kIo=r(CRe," (ELECTRA model)"),CRe.forEach(t),SIo=i(H),K4=n(H,"LI",{});var wRe=s(K4);mpe=n(wRe,"STRONG",{});var jFt=s(mpe);RIo=r(jFt,"flaubert"),jFt.forEach(t),PIo=r(wRe," \u2014 "),FV=n(wRe,"A",{href:!0});var DFt=s(FV);BIo=r(DFt,"FlaubertWithLMHeadModel"),DFt.forEach(t),IIo=r(wRe," (FlauBERT model)"),wRe.forEach(t),NIo=i(H),Z4=n(H,"LI",{});var ARe=s(Z4);gpe=n(ARe,"STRONG",{});var GFt=s(gpe);qIo=r(GFt,"fnet"),GFt.forEach(t),jIo=r(ARe," \u2014 "),TV=n(ARe,"A",{href:!0});var OFt=s(TV);DIo=r(OFt,"FNetForMaskedLM"),OFt.forEach(t),GIo=r(ARe," (FNet model)"),ARe.forEach(t),OIo=i(H),e2=n(H,"LI",{});var LRe=s(e2);hpe=n(LRe,"STRONG",{});var VFt=s(hpe);VIo=r(VFt,"funnel"),VFt.forEach(t),XIo=r(LRe," \u2014 "),MV=n(LRe,"A",{href:!0});var XFt=s(MV);zIo=r(XFt,"FunnelForMaskedLM"),XFt.forEach(t),WIo=r(LRe," (Funnel Transformer model)"),LRe.forEach(t),QIo=i(H),o2=n(H,"LI",{});var yRe=s(o2);ppe=n(yRe,"STRONG",{});var zFt=s(ppe);HIo=r(zFt,"ibert"),zFt.forEach(t),UIo=r(yRe," \u2014 "),EV=n(yRe,"A",{href:!0});var WFt=s(EV);JIo=r(WFt,"IBertForMaskedLM"),WFt.forEach(t),YIo=r(yRe," (I-BERT model)"),yRe.forEach(t),KIo=i(H),r2=n(H,"LI",{});var xRe=s(r2);_pe=n(xRe,"STRONG",{});var QFt=s(_pe);ZIo=r(QFt,"layoutlm"),QFt.forEach(t),eNo=r(xRe," \u2014 "),CV=n(xRe,"A",{href:!0});var HFt=s(CV);oNo=r(HFt,"LayoutLMForMaskedLM"),HFt.forEach(t),rNo=r(xRe," (LayoutLM model)"),xRe.forEach(t),tNo=i(H),t2=n(H,"LI",{});var $Re=s(t2);upe=n($Re,"STRONG",{});var UFt=s(upe);aNo=r(UFt,"longformer"),UFt.forEach(t),nNo=r($Re," \u2014 "),wV=n($Re,"A",{href:!0});var JFt=s(wV);sNo=r(JFt,"LongformerForMaskedLM"),JFt.forEach(t),lNo=r($Re," (Longformer model)"),$Re.forEach(t),iNo=i(H),a2=n(H,"LI",{});var kRe=s(a2);bpe=n(kRe,"STRONG",{});var YFt=s(bpe);dNo=r(YFt,"luke"),YFt.forEach(t),cNo=r(kRe," \u2014 "),AV=n(kRe,"A",{href:!0});var KFt=s(AV);fNo=r(KFt,"LukeForMaskedLM"),KFt.forEach(t),mNo=r(kRe," (LUKE model)"),kRe.forEach(t),gNo=i(H),n2=n(H,"LI",{});var SRe=s(n2);vpe=n(SRe,"STRONG",{});var ZFt=s(vpe);hNo=r(ZFt,"mbart"),ZFt.forEach(t),pNo=r(SRe," \u2014 "),LV=n(SRe,"A",{href:!0});var e6t=s(LV);_No=r(e6t,"MBartForConditionalGeneration"),e6t.forEach(t),uNo=r(SRe," (mBART model)"),SRe.forEach(t),bNo=i(H),s2=n(H,"LI",{});var RRe=s(s2);Fpe=n(RRe,"STRONG",{});var o6t=s(Fpe);vNo=r(o6t,"megatron-bert"),o6t.forEach(t),FNo=r(RRe," \u2014 "),yV=n(RRe,"A",{href:!0});var r6t=s(yV);TNo=r(r6t,"MegatronBertForMaskedLM"),r6t.forEach(t),MNo=r(RRe," (Megatron-BERT model)"),RRe.forEach(t),ENo=i(H),l2=n(H,"LI",{});var PRe=s(l2);Tpe=n(PRe,"STRONG",{});var t6t=s(Tpe);CNo=r(t6t,"mobilebert"),t6t.forEach(t),wNo=r(PRe," \u2014 "),xV=n(PRe,"A",{href:!0});var a6t=s(xV);ANo=r(a6t,"MobileBertForMaskedLM"),a6t.forEach(t),LNo=r(PRe," (MobileBERT model)"),PRe.forEach(t),yNo=i(H),i2=n(H,"LI",{});var BRe=s(i2);Mpe=n(BRe,"STRONG",{});var n6t=s(Mpe);xNo=r(n6t,"mpnet"),n6t.forEach(t),$No=r(BRe," \u2014 "),$V=n(BRe,"A",{href:!0});var s6t=s($V);kNo=r(s6t,"MPNetForMaskedLM"),s6t.forEach(t),SNo=r(BRe," (MPNet model)"),BRe.forEach(t),RNo=i(H),d2=n(H,"LI",{});var IRe=s(d2);Epe=n(IRe,"STRONG",{});var l6t=s(Epe);PNo=r(l6t,"mvp"),l6t.forEach(t),BNo=r(IRe," \u2014 "),kV=n(IRe,"A",{href:!0});var i6t=s(kV);INo=r(i6t,"MvpForConditionalGeneration"),i6t.forEach(t),NNo=r(IRe," (MVP model)"),IRe.forEach(t),qNo=i(H),c2=n(H,"LI",{});var NRe=s(c2);Cpe=n(NRe,"STRONG",{});var d6t=s(Cpe);jNo=r(d6t,"nezha"),d6t.forEach(t),DNo=r(NRe," \u2014 "),SV=n(NRe,"A",{href:!0});var c6t=s(SV);GNo=r(c6t,"NezhaForMaskedLM"),c6t.forEach(t),ONo=r(NRe," (Nezha model)"),NRe.forEach(t),VNo=i(H),f2=n(H,"LI",{});var qRe=s(f2);wpe=n(qRe,"STRONG",{});var f6t=s(wpe);XNo=r(f6t,"nystromformer"),f6t.forEach(t),zNo=r(qRe," \u2014 "),RV=n(qRe,"A",{href:!0});var m6t=s(RV);WNo=r(m6t,"NystromformerForMaskedLM"),m6t.forEach(t),QNo=r(qRe," (Nystr\xF6mformer model)"),qRe.forEach(t),HNo=i(H),m2=n(H,"LI",{});var jRe=s(m2);Ape=n(jRe,"STRONG",{});var g6t=s(Ape);UNo=r(g6t,"perceiver"),g6t.forEach(t),JNo=r(jRe," \u2014 "),PV=n(jRe,"A",{href:!0});var h6t=s(PV);YNo=r(h6t,"PerceiverForMaskedLM"),h6t.forEach(t),KNo=r(jRe," (Perceiver model)"),jRe.forEach(t),ZNo=i(H),g2=n(H,"LI",{});var DRe=s(g2);Lpe=n(DRe,"STRONG",{});var p6t=s(Lpe);eqo=r(p6t,"qdqbert"),p6t.forEach(t),oqo=r(DRe," \u2014 "),BV=n(DRe,"A",{href:!0});var _6t=s(BV);rqo=r(_6t,"QDQBertForMaskedLM"),_6t.forEach(t),tqo=r(DRe," (QDQBert model)"),DRe.forEach(t),aqo=i(H),h2=n(H,"LI",{});var GRe=s(h2);ype=n(GRe,"STRONG",{});var u6t=s(ype);nqo=r(u6t,"reformer"),u6t.forEach(t),sqo=r(GRe," \u2014 "),IV=n(GRe,"A",{href:!0});var b6t=s(IV);lqo=r(b6t,"ReformerForMaskedLM"),b6t.forEach(t),iqo=r(GRe," (Reformer model)"),GRe.forEach(t),dqo=i(H),p2=n(H,"LI",{});var ORe=s(p2);xpe=n(ORe,"STRONG",{});var v6t=s(xpe);cqo=r(v6t,"rembert"),v6t.forEach(t),fqo=r(ORe," \u2014 "),NV=n(ORe,"A",{href:!0});var F6t=s(NV);mqo=r(F6t,"RemBertForMaskedLM"),F6t.forEach(t),gqo=r(ORe," (RemBERT model)"),ORe.forEach(t),hqo=i(H),_2=n(H,"LI",{});var VRe=s(_2);$pe=n(VRe,"STRONG",{});var T6t=s($pe);pqo=r(T6t,"roberta"),T6t.forEach(t),_qo=r(VRe," \u2014 "),qV=n(VRe,"A",{href:!0});var M6t=s(qV);uqo=r(M6t,"RobertaForMaskedLM"),M6t.forEach(t),bqo=r(VRe," (RoBERTa model)"),VRe.forEach(t),vqo=i(H),u2=n(H,"LI",{});var XRe=s(u2);kpe=n(XRe,"STRONG",{});var E6t=s(kpe);Fqo=r(E6t,"roformer"),E6t.forEach(t),Tqo=r(XRe," \u2014 "),jV=n(XRe,"A",{href:!0});var C6t=s(jV);Mqo=r(C6t,"RoFormerForMaskedLM"),C6t.forEach(t),Eqo=r(XRe," (RoFormer model)"),XRe.forEach(t),Cqo=i(H),b2=n(H,"LI",{});var zRe=s(b2);Spe=n(zRe,"STRONG",{});var w6t=s(Spe);wqo=r(w6t,"squeezebert"),w6t.forEach(t),Aqo=r(zRe," \u2014 "),DV=n(zRe,"A",{href:!0});var A6t=s(DV);Lqo=r(A6t,"SqueezeBertForMaskedLM"),A6t.forEach(t),yqo=r(zRe," (SqueezeBERT model)"),zRe.forEach(t),xqo=i(H),v2=n(H,"LI",{});var WRe=s(v2);Rpe=n(WRe,"STRONG",{});var L6t=s(Rpe);$qo=r(L6t,"tapas"),L6t.forEach(t),kqo=r(WRe," \u2014 "),GV=n(WRe,"A",{href:!0});var y6t=s(GV);Sqo=r(y6t,"TapasForMaskedLM"),y6t.forEach(t),Rqo=r(WRe," (TAPAS model)"),WRe.forEach(t),Pqo=i(H),F2=n(H,"LI",{});var QRe=s(F2);Ppe=n(QRe,"STRONG",{});var x6t=s(Ppe);Bqo=r(x6t,"wav2vec2"),x6t.forEach(t),Iqo=r(QRe," \u2014 "),Bpe=n(QRe,"CODE",{});var $6t=s(Bpe);Nqo=r($6t,"Wav2Vec2ForMaskedLM"),$6t.forEach(t),qqo=r(QRe," (Wav2Vec2 model)"),QRe.forEach(t),jqo=i(H),T2=n(H,"LI",{});var HRe=s(T2);Ipe=n(HRe,"STRONG",{});var k6t=s(Ipe);Dqo=r(k6t,"xlm"),k6t.forEach(t),Gqo=r(HRe," \u2014 "),OV=n(HRe,"A",{href:!0});var S6t=s(OV);Oqo=r(S6t,"XLMWithLMHeadModel"),S6t.forEach(t),Vqo=r(HRe," (XLM model)"),HRe.forEach(t),Xqo=i(H),M2=n(H,"LI",{});var URe=s(M2);Npe=n(URe,"STRONG",{});var R6t=s(Npe);zqo=r(R6t,"xlm-roberta"),R6t.forEach(t),Wqo=r(URe," \u2014 "),VV=n(URe,"A",{href:!0});var P6t=s(VV);Qqo=r(P6t,"XLMRobertaForMaskedLM"),P6t.forEach(t),Hqo=r(URe," (XLM-RoBERTa model)"),URe.forEach(t),Uqo=i(H),E2=n(H,"LI",{});var JRe=s(E2);qpe=n(JRe,"STRONG",{});var B6t=s(qpe);Jqo=r(B6t,"xlm-roberta-xl"),B6t.forEach(t),Yqo=r(JRe," \u2014 "),XV=n(JRe,"A",{href:!0});var I6t=s(XV);Kqo=r(I6t,"XLMRobertaXLForMaskedLM"),I6t.forEach(t),Zqo=r(JRe," (XLM-RoBERTa-XL model)"),JRe.forEach(t),ejo=i(H),C2=n(H,"LI",{});var YRe=s(C2);jpe=n(YRe,"STRONG",{});var N6t=s(jpe);ojo=r(N6t,"yoso"),N6t.forEach(t),rjo=r(YRe," \u2014 "),zV=n(YRe,"A",{href:!0});var q6t=s(zV);tjo=r(q6t,"YosoForMaskedLM"),q6t.forEach(t),ajo=r(YRe," (YOSO model)"),YRe.forEach(t),H.forEach(t),njo=i(ca),w2=n(ca,"P",{});var KRe=s(w2);sjo=r(KRe,"The model is set in evaluation mode by default using "),Dpe=n(KRe,"CODE",{});var j6t=s(Dpe);ljo=r(j6t,"model.eval()"),j6t.forEach(t),ijo=r(KRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=n(KRe,"CODE",{});var D6t=s(Gpe);djo=r(D6t,"model.train()"),D6t.forEach(t),KRe.forEach(t),cjo=i(ca),T(A2.$$.fragment,ca),ca.forEach(t),ll.forEach(t),cze=i(f),od=n(f,"H2",{class:!0});var _Qe=s(od);L2=n(_Qe,"A",{id:!0,class:!0,href:!0});var G6t=s(L2);Ope=n(G6t,"SPAN",{});var O6t=s(Ope);T(l8.$$.fragment,O6t),O6t.forEach(t),G6t.forEach(t),fjo=i(_Qe),Vpe=n(_Qe,"SPAN",{});var V6t=s(Vpe);mjo=r(V6t,"AutoModelForSeq2SeqLM"),V6t.forEach(t),_Qe.forEach(t),fze=i(f),Bo=n(f,"DIV",{class:!0});var il=s(Bo);T(i8.$$.fragment,il),gjo=i(il),rd=n(il,"P",{});var mte=s(rd);hjo=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WV=n(mte,"A",{href:!0});var X6t=s(WV);pjo=r(X6t,"from_pretrained()"),X6t.forEach(t),_jo=r(mte," class method or the "),QV=n(mte,"A",{href:!0});var z6t=s(QV);ujo=r(z6t,"from_config()"),z6t.forEach(t),bjo=r(mte,` class
method.`),mte.forEach(t),vjo=i(il),d8=n(il,"P",{});var uQe=s(d8);Fjo=r(uQe,"This class cannot be instantiated directly using "),Xpe=n(uQe,"CODE",{});var W6t=s(Xpe);Tjo=r(W6t,"__init__()"),W6t.forEach(t),Mjo=r(uQe," (throws an error)."),uQe.forEach(t),Ejo=i(il),mt=n(il,"DIV",{class:!0});var LA=s(mt);T(c8.$$.fragment,LA),Cjo=i(LA),zpe=n(LA,"P",{});var Q6t=s(zpe);wjo=r(Q6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Q6t.forEach(t),Ajo=i(LA),td=n(LA,"P",{});var gte=s(td);Ljo=r(gte,`Note:
Loading a model from its configuration file does `),Wpe=n(gte,"STRONG",{});var H6t=s(Wpe);yjo=r(H6t,"not"),H6t.forEach(t),xjo=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=n(gte,"A",{href:!0});var U6t=s(HV);$jo=r(U6t,"from_pretrained()"),U6t.forEach(t),kjo=r(gte," to load the model weights."),gte.forEach(t),Sjo=i(LA),T(y2.$$.fragment,LA),LA.forEach(t),Rjo=i(il),oo=n(il,"DIV",{class:!0});var fa=s(oo);T(f8.$$.fragment,fa),Pjo=i(fa),Qpe=n(fa,"P",{});var J6t=s(Qpe);Bjo=r(J6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),J6t.forEach(t),Ijo=i(fa),Da=n(fa,"P",{});var yA=s(Da);Njo=r(yA,"The model class to instantiate is selected based on the "),Hpe=n(yA,"CODE",{});var Y6t=s(Hpe);qjo=r(Y6t,"model_type"),Y6t.forEach(t),jjo=r(yA,` property of the config object (either
passed as an argument or loaded from `),Upe=n(yA,"CODE",{});var K6t=s(Upe);Djo=r(K6t,"pretrained_model_name_or_path"),K6t.forEach(t),Gjo=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=n(yA,"CODE",{});var Z6t=s(Jpe);Ojo=r(Z6t,"pretrained_model_name_or_path"),Z6t.forEach(t),Vjo=r(yA,":"),yA.forEach(t),Xjo=i(fa),me=n(fa,"UL",{});var ue=s(me);x2=n(ue,"LI",{});var ZRe=s(x2);Ype=n(ZRe,"STRONG",{});var eTt=s(Ype);zjo=r(eTt,"bart"),eTt.forEach(t),Wjo=r(ZRe," \u2014 "),UV=n(ZRe,"A",{href:!0});var oTt=s(UV);Qjo=r(oTt,"BartForConditionalGeneration"),oTt.forEach(t),Hjo=r(ZRe," (BART model)"),ZRe.forEach(t),Ujo=i(ue),$2=n(ue,"LI",{});var ePe=s($2);Kpe=n(ePe,"STRONG",{});var rTt=s(Kpe);Jjo=r(rTt,"bigbird_pegasus"),rTt.forEach(t),Yjo=r(ePe," \u2014 "),JV=n(ePe,"A",{href:!0});var tTt=s(JV);Kjo=r(tTt,"BigBirdPegasusForConditionalGeneration"),tTt.forEach(t),Zjo=r(ePe," (BigBird-Pegasus model)"),ePe.forEach(t),eDo=i(ue),k2=n(ue,"LI",{});var oPe=s(k2);Zpe=n(oPe,"STRONG",{});var aTt=s(Zpe);oDo=r(aTt,"blenderbot"),aTt.forEach(t),rDo=r(oPe," \u2014 "),YV=n(oPe,"A",{href:!0});var nTt=s(YV);tDo=r(nTt,"BlenderbotForConditionalGeneration"),nTt.forEach(t),aDo=r(oPe," (Blenderbot model)"),oPe.forEach(t),nDo=i(ue),S2=n(ue,"LI",{});var rPe=s(S2);e_e=n(rPe,"STRONG",{});var sTt=s(e_e);sDo=r(sTt,"blenderbot-small"),sTt.forEach(t),lDo=r(rPe," \u2014 "),KV=n(rPe,"A",{href:!0});var lTt=s(KV);iDo=r(lTt,"BlenderbotSmallForConditionalGeneration"),lTt.forEach(t),dDo=r(rPe," (BlenderbotSmall model)"),rPe.forEach(t),cDo=i(ue),R2=n(ue,"LI",{});var tPe=s(R2);o_e=n(tPe,"STRONG",{});var iTt=s(o_e);fDo=r(iTt,"encoder-decoder"),iTt.forEach(t),mDo=r(tPe," \u2014 "),ZV=n(tPe,"A",{href:!0});var dTt=s(ZV);gDo=r(dTt,"EncoderDecoderModel"),dTt.forEach(t),hDo=r(tPe," (Encoder decoder model)"),tPe.forEach(t),pDo=i(ue),P2=n(ue,"LI",{});var aPe=s(P2);r_e=n(aPe,"STRONG",{});var cTt=s(r_e);_Do=r(cTt,"fsmt"),cTt.forEach(t),uDo=r(aPe," \u2014 "),eX=n(aPe,"A",{href:!0});var fTt=s(eX);bDo=r(fTt,"FSMTForConditionalGeneration"),fTt.forEach(t),vDo=r(aPe," (FairSeq Machine-Translation model)"),aPe.forEach(t),FDo=i(ue),B2=n(ue,"LI",{});var nPe=s(B2);t_e=n(nPe,"STRONG",{});var mTt=s(t_e);TDo=r(mTt,"led"),mTt.forEach(t),MDo=r(nPe," \u2014 "),oX=n(nPe,"A",{href:!0});var gTt=s(oX);EDo=r(gTt,"LEDForConditionalGeneration"),gTt.forEach(t),CDo=r(nPe," (LED model)"),nPe.forEach(t),wDo=i(ue),I2=n(ue,"LI",{});var sPe=s(I2);a_e=n(sPe,"STRONG",{});var hTt=s(a_e);ADo=r(hTt,"longt5"),hTt.forEach(t),LDo=r(sPe," \u2014 "),rX=n(sPe,"A",{href:!0});var pTt=s(rX);yDo=r(pTt,"LongT5ForConditionalGeneration"),pTt.forEach(t),xDo=r(sPe," (LongT5 model)"),sPe.forEach(t),$Do=i(ue),N2=n(ue,"LI",{});var lPe=s(N2);n_e=n(lPe,"STRONG",{});var _Tt=s(n_e);kDo=r(_Tt,"m2m_100"),_Tt.forEach(t),SDo=r(lPe," \u2014 "),tX=n(lPe,"A",{href:!0});var uTt=s(tX);RDo=r(uTt,"M2M100ForConditionalGeneration"),uTt.forEach(t),PDo=r(lPe," (M2M100 model)"),lPe.forEach(t),BDo=i(ue),q2=n(ue,"LI",{});var iPe=s(q2);s_e=n(iPe,"STRONG",{});var bTt=s(s_e);IDo=r(bTt,"marian"),bTt.forEach(t),NDo=r(iPe," \u2014 "),aX=n(iPe,"A",{href:!0});var vTt=s(aX);qDo=r(vTt,"MarianMTModel"),vTt.forEach(t),jDo=r(iPe," (Marian model)"),iPe.forEach(t),DDo=i(ue),j2=n(ue,"LI",{});var dPe=s(j2);l_e=n(dPe,"STRONG",{});var FTt=s(l_e);GDo=r(FTt,"mbart"),FTt.forEach(t),ODo=r(dPe," \u2014 "),nX=n(dPe,"A",{href:!0});var TTt=s(nX);VDo=r(TTt,"MBartForConditionalGeneration"),TTt.forEach(t),XDo=r(dPe," (mBART model)"),dPe.forEach(t),zDo=i(ue),D2=n(ue,"LI",{});var cPe=s(D2);i_e=n(cPe,"STRONG",{});var MTt=s(i_e);WDo=r(MTt,"mt5"),MTt.forEach(t),QDo=r(cPe," \u2014 "),sX=n(cPe,"A",{href:!0});var ETt=s(sX);HDo=r(ETt,"MT5ForConditionalGeneration"),ETt.forEach(t),UDo=r(cPe," (MT5 model)"),cPe.forEach(t),JDo=i(ue),G2=n(ue,"LI",{});var fPe=s(G2);d_e=n(fPe,"STRONG",{});var CTt=s(d_e);YDo=r(CTt,"mvp"),CTt.forEach(t),KDo=r(fPe," \u2014 "),lX=n(fPe,"A",{href:!0});var wTt=s(lX);ZDo=r(wTt,"MvpForConditionalGeneration"),wTt.forEach(t),eGo=r(fPe," (MVP model)"),fPe.forEach(t),oGo=i(ue),O2=n(ue,"LI",{});var mPe=s(O2);c_e=n(mPe,"STRONG",{});var ATt=s(c_e);rGo=r(ATt,"nllb"),ATt.forEach(t),tGo=r(mPe," \u2014 "),iX=n(mPe,"A",{href:!0});var LTt=s(iX);aGo=r(LTt,"M2M100ForConditionalGeneration"),LTt.forEach(t),nGo=r(mPe," (NLLB model)"),mPe.forEach(t),sGo=i(ue),V2=n(ue,"LI",{});var gPe=s(V2);f_e=n(gPe,"STRONG",{});var yTt=s(f_e);lGo=r(yTt,"pegasus"),yTt.forEach(t),iGo=r(gPe," \u2014 "),dX=n(gPe,"A",{href:!0});var xTt=s(dX);dGo=r(xTt,"PegasusForConditionalGeneration"),xTt.forEach(t),cGo=r(gPe," (Pegasus model)"),gPe.forEach(t),fGo=i(ue),X2=n(ue,"LI",{});var hPe=s(X2);m_e=n(hPe,"STRONG",{});var $Tt=s(m_e);mGo=r($Tt,"plbart"),$Tt.forEach(t),gGo=r(hPe," \u2014 "),cX=n(hPe,"A",{href:!0});var kTt=s(cX);hGo=r(kTt,"PLBartForConditionalGeneration"),kTt.forEach(t),pGo=r(hPe," (PLBart model)"),hPe.forEach(t),_Go=i(ue),z2=n(ue,"LI",{});var pPe=s(z2);g_e=n(pPe,"STRONG",{});var STt=s(g_e);uGo=r(STt,"prophetnet"),STt.forEach(t),bGo=r(pPe," \u2014 "),fX=n(pPe,"A",{href:!0});var RTt=s(fX);vGo=r(RTt,"ProphetNetForConditionalGeneration"),RTt.forEach(t),FGo=r(pPe," (ProphetNet model)"),pPe.forEach(t),TGo=i(ue),W2=n(ue,"LI",{});var _Pe=s(W2);h_e=n(_Pe,"STRONG",{});var PTt=s(h_e);MGo=r(PTt,"t5"),PTt.forEach(t),EGo=r(_Pe," \u2014 "),mX=n(_Pe,"A",{href:!0});var BTt=s(mX);CGo=r(BTt,"T5ForConditionalGeneration"),BTt.forEach(t),wGo=r(_Pe," (T5 model)"),_Pe.forEach(t),AGo=i(ue),Q2=n(ue,"LI",{});var uPe=s(Q2);p_e=n(uPe,"STRONG",{});var ITt=s(p_e);LGo=r(ITt,"xlm-prophetnet"),ITt.forEach(t),yGo=r(uPe," \u2014 "),gX=n(uPe,"A",{href:!0});var NTt=s(gX);xGo=r(NTt,"XLMProphetNetForConditionalGeneration"),NTt.forEach(t),$Go=r(uPe," (XLM-ProphetNet model)"),uPe.forEach(t),ue.forEach(t),kGo=i(fa),H2=n(fa,"P",{});var bPe=s(H2);SGo=r(bPe,"The model is set in evaluation mode by default using "),__e=n(bPe,"CODE",{});var qTt=s(__e);RGo=r(qTt,"model.eval()"),qTt.forEach(t),PGo=r(bPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u_e=n(bPe,"CODE",{});var jTt=s(u_e);BGo=r(jTt,"model.train()"),jTt.forEach(t),bPe.forEach(t),IGo=i(fa),T(U2.$$.fragment,fa),fa.forEach(t),il.forEach(t),mze=i(f),ad=n(f,"H2",{class:!0});var bQe=s(ad);J2=n(bQe,"A",{id:!0,class:!0,href:!0});var DTt=s(J2);b_e=n(DTt,"SPAN",{});var GTt=s(b_e);T(m8.$$.fragment,GTt),GTt.forEach(t),DTt.forEach(t),NGo=i(bQe),v_e=n(bQe,"SPAN",{});var OTt=s(v_e);qGo=r(OTt,"AutoModelForSequenceClassification"),OTt.forEach(t),bQe.forEach(t),gze=i(f),Io=n(f,"DIV",{class:!0});var dl=s(Io);T(g8.$$.fragment,dl),jGo=i(dl),nd=n(dl,"P",{});var hte=s(nd);DGo=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hX=n(hte,"A",{href:!0});var VTt=s(hX);GGo=r(VTt,"from_pretrained()"),VTt.forEach(t),OGo=r(hte," class method or the "),pX=n(hte,"A",{href:!0});var XTt=s(pX);VGo=r(XTt,"from_config()"),XTt.forEach(t),XGo=r(hte,` class
method.`),hte.forEach(t),zGo=i(dl),h8=n(dl,"P",{});var vQe=s(h8);WGo=r(vQe,"This class cannot be instantiated directly using "),F_e=n(vQe,"CODE",{});var zTt=s(F_e);QGo=r(zTt,"__init__()"),zTt.forEach(t),HGo=r(vQe," (throws an error)."),vQe.forEach(t),UGo=i(dl),gt=n(dl,"DIV",{class:!0});var xA=s(gt);T(p8.$$.fragment,xA),JGo=i(xA),T_e=n(xA,"P",{});var WTt=s(T_e);YGo=r(WTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),WTt.forEach(t),KGo=i(xA),sd=n(xA,"P",{});var pte=s(sd);ZGo=r(pte,`Note:
Loading a model from its configuration file does `),M_e=n(pte,"STRONG",{});var QTt=s(M_e);eOo=r(QTt,"not"),QTt.forEach(t),oOo=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=n(pte,"A",{href:!0});var HTt=s(_X);rOo=r(HTt,"from_pretrained()"),HTt.forEach(t),tOo=r(pte," to load the model weights."),pte.forEach(t),aOo=i(xA),T(Y2.$$.fragment,xA),xA.forEach(t),nOo=i(dl),ro=n(dl,"DIV",{class:!0});var ma=s(ro);T(_8.$$.fragment,ma),sOo=i(ma),E_e=n(ma,"P",{});var UTt=s(E_e);lOo=r(UTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),UTt.forEach(t),iOo=i(ma),Ga=n(ma,"P",{});var $A=s(Ga);dOo=r($A,"The model class to instantiate is selected based on the "),C_e=n($A,"CODE",{});var JTt=s(C_e);cOo=r(JTt,"model_type"),JTt.forEach(t),fOo=r($A,` property of the config object (either
passed as an argument or loaded from `),w_e=n($A,"CODE",{});var YTt=s(w_e);mOo=r(YTt,"pretrained_model_name_or_path"),YTt.forEach(t),gOo=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A_e=n($A,"CODE",{});var KTt=s(A_e);hOo=r(KTt,"pretrained_model_name_or_path"),KTt.forEach(t),pOo=r($A,":"),$A.forEach(t),_Oo=i(ma),B=n(ma,"UL",{});var j=s(B);K2=n(j,"LI",{});var vPe=s(K2);L_e=n(vPe,"STRONG",{});var ZTt=s(L_e);uOo=r(ZTt,"albert"),ZTt.forEach(t),bOo=r(vPe," \u2014 "),uX=n(vPe,"A",{href:!0});var e7t=s(uX);vOo=r(e7t,"AlbertForSequenceClassification"),e7t.forEach(t),FOo=r(vPe," (ALBERT model)"),vPe.forEach(t),TOo=i(j),Z2=n(j,"LI",{});var FPe=s(Z2);y_e=n(FPe,"STRONG",{});var o7t=s(y_e);MOo=r(o7t,"bart"),o7t.forEach(t),EOo=r(FPe," \u2014 "),bX=n(FPe,"A",{href:!0});var r7t=s(bX);COo=r(r7t,"BartForSequenceClassification"),r7t.forEach(t),wOo=r(FPe," (BART model)"),FPe.forEach(t),AOo=i(j),eb=n(j,"LI",{});var TPe=s(eb);x_e=n(TPe,"STRONG",{});var t7t=s(x_e);LOo=r(t7t,"bert"),t7t.forEach(t),yOo=r(TPe," \u2014 "),vX=n(TPe,"A",{href:!0});var a7t=s(vX);xOo=r(a7t,"BertForSequenceClassification"),a7t.forEach(t),$Oo=r(TPe," (BERT model)"),TPe.forEach(t),kOo=i(j),ob=n(j,"LI",{});var MPe=s(ob);$_e=n(MPe,"STRONG",{});var n7t=s($_e);SOo=r(n7t,"big_bird"),n7t.forEach(t),ROo=r(MPe," \u2014 "),FX=n(MPe,"A",{href:!0});var s7t=s(FX);POo=r(s7t,"BigBirdForSequenceClassification"),s7t.forEach(t),BOo=r(MPe," (BigBird model)"),MPe.forEach(t),IOo=i(j),rb=n(j,"LI",{});var EPe=s(rb);k_e=n(EPe,"STRONG",{});var l7t=s(k_e);NOo=r(l7t,"bigbird_pegasus"),l7t.forEach(t),qOo=r(EPe," \u2014 "),TX=n(EPe,"A",{href:!0});var i7t=s(TX);jOo=r(i7t,"BigBirdPegasusForSequenceClassification"),i7t.forEach(t),DOo=r(EPe," (BigBird-Pegasus model)"),EPe.forEach(t),GOo=i(j),tb=n(j,"LI",{});var CPe=s(tb);S_e=n(CPe,"STRONG",{});var d7t=s(S_e);OOo=r(d7t,"bloom"),d7t.forEach(t),VOo=r(CPe," \u2014 "),MX=n(CPe,"A",{href:!0});var c7t=s(MX);XOo=r(c7t,"BloomForSequenceClassification"),c7t.forEach(t),zOo=r(CPe," (BLOOM model)"),CPe.forEach(t),WOo=i(j),ab=n(j,"LI",{});var wPe=s(ab);R_e=n(wPe,"STRONG",{});var f7t=s(R_e);QOo=r(f7t,"camembert"),f7t.forEach(t),HOo=r(wPe," \u2014 "),EX=n(wPe,"A",{href:!0});var m7t=s(EX);UOo=r(m7t,"CamembertForSequenceClassification"),m7t.forEach(t),JOo=r(wPe," (CamemBERT model)"),wPe.forEach(t),YOo=i(j),nb=n(j,"LI",{});var APe=s(nb);P_e=n(APe,"STRONG",{});var g7t=s(P_e);KOo=r(g7t,"canine"),g7t.forEach(t),ZOo=r(APe," \u2014 "),CX=n(APe,"A",{href:!0});var h7t=s(CX);eVo=r(h7t,"CanineForSequenceClassification"),h7t.forEach(t),oVo=r(APe," (CANINE model)"),APe.forEach(t),rVo=i(j),sb=n(j,"LI",{});var LPe=s(sb);B_e=n(LPe,"STRONG",{});var p7t=s(B_e);tVo=r(p7t,"convbert"),p7t.forEach(t),aVo=r(LPe," \u2014 "),wX=n(LPe,"A",{href:!0});var _7t=s(wX);nVo=r(_7t,"ConvBertForSequenceClassification"),_7t.forEach(t),sVo=r(LPe," (ConvBERT model)"),LPe.forEach(t),lVo=i(j),lb=n(j,"LI",{});var yPe=s(lb);I_e=n(yPe,"STRONG",{});var u7t=s(I_e);iVo=r(u7t,"ctrl"),u7t.forEach(t),dVo=r(yPe," \u2014 "),AX=n(yPe,"A",{href:!0});var b7t=s(AX);cVo=r(b7t,"CTRLForSequenceClassification"),b7t.forEach(t),fVo=r(yPe," (CTRL model)"),yPe.forEach(t),mVo=i(j),ib=n(j,"LI",{});var xPe=s(ib);N_e=n(xPe,"STRONG",{});var v7t=s(N_e);gVo=r(v7t,"data2vec-text"),v7t.forEach(t),hVo=r(xPe," \u2014 "),LX=n(xPe,"A",{href:!0});var F7t=s(LX);pVo=r(F7t,"Data2VecTextForSequenceClassification"),F7t.forEach(t),_Vo=r(xPe," (Data2VecText model)"),xPe.forEach(t),uVo=i(j),db=n(j,"LI",{});var $Pe=s(db);q_e=n($Pe,"STRONG",{});var T7t=s(q_e);bVo=r(T7t,"deberta"),T7t.forEach(t),vVo=r($Pe," \u2014 "),yX=n($Pe,"A",{href:!0});var M7t=s(yX);FVo=r(M7t,"DebertaForSequenceClassification"),M7t.forEach(t),TVo=r($Pe," (DeBERTa model)"),$Pe.forEach(t),MVo=i(j),cb=n(j,"LI",{});var kPe=s(cb);j_e=n(kPe,"STRONG",{});var E7t=s(j_e);EVo=r(E7t,"deberta-v2"),E7t.forEach(t),CVo=r(kPe," \u2014 "),xX=n(kPe,"A",{href:!0});var C7t=s(xX);wVo=r(C7t,"DebertaV2ForSequenceClassification"),C7t.forEach(t),AVo=r(kPe," (DeBERTa-v2 model)"),kPe.forEach(t),LVo=i(j),fb=n(j,"LI",{});var SPe=s(fb);D_e=n(SPe,"STRONG",{});var w7t=s(D_e);yVo=r(w7t,"distilbert"),w7t.forEach(t),xVo=r(SPe," \u2014 "),$X=n(SPe,"A",{href:!0});var A7t=s($X);$Vo=r(A7t,"DistilBertForSequenceClassification"),A7t.forEach(t),kVo=r(SPe," (DistilBERT model)"),SPe.forEach(t),SVo=i(j),mb=n(j,"LI",{});var RPe=s(mb);G_e=n(RPe,"STRONG",{});var L7t=s(G_e);RVo=r(L7t,"electra"),L7t.forEach(t),PVo=r(RPe," \u2014 "),kX=n(RPe,"A",{href:!0});var y7t=s(kX);BVo=r(y7t,"ElectraForSequenceClassification"),y7t.forEach(t),IVo=r(RPe," (ELECTRA model)"),RPe.forEach(t),NVo=i(j),gb=n(j,"LI",{});var PPe=s(gb);O_e=n(PPe,"STRONG",{});var x7t=s(O_e);qVo=r(x7t,"flaubert"),x7t.forEach(t),jVo=r(PPe," \u2014 "),SX=n(PPe,"A",{href:!0});var $7t=s(SX);DVo=r($7t,"FlaubertForSequenceClassification"),$7t.forEach(t),GVo=r(PPe," (FlauBERT model)"),PPe.forEach(t),OVo=i(j),hb=n(j,"LI",{});var BPe=s(hb);V_e=n(BPe,"STRONG",{});var k7t=s(V_e);VVo=r(k7t,"fnet"),k7t.forEach(t),XVo=r(BPe," \u2014 "),RX=n(BPe,"A",{href:!0});var S7t=s(RX);zVo=r(S7t,"FNetForSequenceClassification"),S7t.forEach(t),WVo=r(BPe," (FNet model)"),BPe.forEach(t),QVo=i(j),pb=n(j,"LI",{});var IPe=s(pb);X_e=n(IPe,"STRONG",{});var R7t=s(X_e);HVo=r(R7t,"funnel"),R7t.forEach(t),UVo=r(IPe," \u2014 "),PX=n(IPe,"A",{href:!0});var P7t=s(PX);JVo=r(P7t,"FunnelForSequenceClassification"),P7t.forEach(t),YVo=r(IPe," (Funnel Transformer model)"),IPe.forEach(t),KVo=i(j),_b=n(j,"LI",{});var NPe=s(_b);z_e=n(NPe,"STRONG",{});var B7t=s(z_e);ZVo=r(B7t,"gpt2"),B7t.forEach(t),eXo=r(NPe," \u2014 "),BX=n(NPe,"A",{href:!0});var I7t=s(BX);oXo=r(I7t,"GPT2ForSequenceClassification"),I7t.forEach(t),rXo=r(NPe," (OpenAI GPT-2 model)"),NPe.forEach(t),tXo=i(j),ub=n(j,"LI",{});var qPe=s(ub);W_e=n(qPe,"STRONG",{});var N7t=s(W_e);aXo=r(N7t,"gpt_neo"),N7t.forEach(t),nXo=r(qPe," \u2014 "),IX=n(qPe,"A",{href:!0});var q7t=s(IX);sXo=r(q7t,"GPTNeoForSequenceClassification"),q7t.forEach(t),lXo=r(qPe," (GPT Neo model)"),qPe.forEach(t),iXo=i(j),bb=n(j,"LI",{});var jPe=s(bb);Q_e=n(jPe,"STRONG",{});var j7t=s(Q_e);dXo=r(j7t,"gptj"),j7t.forEach(t),cXo=r(jPe," \u2014 "),NX=n(jPe,"A",{href:!0});var D7t=s(NX);fXo=r(D7t,"GPTJForSequenceClassification"),D7t.forEach(t),mXo=r(jPe," (GPT-J model)"),jPe.forEach(t),gXo=i(j),vb=n(j,"LI",{});var DPe=s(vb);H_e=n(DPe,"STRONG",{});var G7t=s(H_e);hXo=r(G7t,"ibert"),G7t.forEach(t),pXo=r(DPe," \u2014 "),qX=n(DPe,"A",{href:!0});var O7t=s(qX);_Xo=r(O7t,"IBertForSequenceClassification"),O7t.forEach(t),uXo=r(DPe," (I-BERT model)"),DPe.forEach(t),bXo=i(j),Fb=n(j,"LI",{});var GPe=s(Fb);U_e=n(GPe,"STRONG",{});var V7t=s(U_e);vXo=r(V7t,"layoutlm"),V7t.forEach(t),FXo=r(GPe," \u2014 "),jX=n(GPe,"A",{href:!0});var X7t=s(jX);TXo=r(X7t,"LayoutLMForSequenceClassification"),X7t.forEach(t),MXo=r(GPe," (LayoutLM model)"),GPe.forEach(t),EXo=i(j),Tb=n(j,"LI",{});var OPe=s(Tb);J_e=n(OPe,"STRONG",{});var z7t=s(J_e);CXo=r(z7t,"layoutlmv2"),z7t.forEach(t),wXo=r(OPe," \u2014 "),DX=n(OPe,"A",{href:!0});var W7t=s(DX);AXo=r(W7t,"LayoutLMv2ForSequenceClassification"),W7t.forEach(t),LXo=r(OPe," (LayoutLMv2 model)"),OPe.forEach(t),yXo=i(j),Mb=n(j,"LI",{});var VPe=s(Mb);Y_e=n(VPe,"STRONG",{});var Q7t=s(Y_e);xXo=r(Q7t,"layoutlmv3"),Q7t.forEach(t),$Xo=r(VPe," \u2014 "),GX=n(VPe,"A",{href:!0});var H7t=s(GX);kXo=r(H7t,"LayoutLMv3ForSequenceClassification"),H7t.forEach(t),SXo=r(VPe," (LayoutLMv3 model)"),VPe.forEach(t),RXo=i(j),Eb=n(j,"LI",{});var XPe=s(Eb);K_e=n(XPe,"STRONG",{});var U7t=s(K_e);PXo=r(U7t,"led"),U7t.forEach(t),BXo=r(XPe," \u2014 "),OX=n(XPe,"A",{href:!0});var J7t=s(OX);IXo=r(J7t,"LEDForSequenceClassification"),J7t.forEach(t),NXo=r(XPe," (LED model)"),XPe.forEach(t),qXo=i(j),Cb=n(j,"LI",{});var zPe=s(Cb);Z_e=n(zPe,"STRONG",{});var Y7t=s(Z_e);jXo=r(Y7t,"longformer"),Y7t.forEach(t),DXo=r(zPe," \u2014 "),VX=n(zPe,"A",{href:!0});var K7t=s(VX);GXo=r(K7t,"LongformerForSequenceClassification"),K7t.forEach(t),OXo=r(zPe," (Longformer model)"),zPe.forEach(t),VXo=i(j),wb=n(j,"LI",{});var WPe=s(wb);eue=n(WPe,"STRONG",{});var Z7t=s(eue);XXo=r(Z7t,"mbart"),Z7t.forEach(t),zXo=r(WPe," \u2014 "),XX=n(WPe,"A",{href:!0});var eMt=s(XX);WXo=r(eMt,"MBartForSequenceClassification"),eMt.forEach(t),QXo=r(WPe," (mBART model)"),WPe.forEach(t),HXo=i(j),Ab=n(j,"LI",{});var QPe=s(Ab);oue=n(QPe,"STRONG",{});var oMt=s(oue);UXo=r(oMt,"megatron-bert"),oMt.forEach(t),JXo=r(QPe," \u2014 "),zX=n(QPe,"A",{href:!0});var rMt=s(zX);YXo=r(rMt,"MegatronBertForSequenceClassification"),rMt.forEach(t),KXo=r(QPe," (Megatron-BERT model)"),QPe.forEach(t),ZXo=i(j),Lb=n(j,"LI",{});var HPe=s(Lb);rue=n(HPe,"STRONG",{});var tMt=s(rue);ezo=r(tMt,"mobilebert"),tMt.forEach(t),ozo=r(HPe," \u2014 "),WX=n(HPe,"A",{href:!0});var aMt=s(WX);rzo=r(aMt,"MobileBertForSequenceClassification"),aMt.forEach(t),tzo=r(HPe," (MobileBERT model)"),HPe.forEach(t),azo=i(j),yb=n(j,"LI",{});var UPe=s(yb);tue=n(UPe,"STRONG",{});var nMt=s(tue);nzo=r(nMt,"mpnet"),nMt.forEach(t),szo=r(UPe," \u2014 "),QX=n(UPe,"A",{href:!0});var sMt=s(QX);lzo=r(sMt,"MPNetForSequenceClassification"),sMt.forEach(t),izo=r(UPe," (MPNet model)"),UPe.forEach(t),dzo=i(j),xb=n(j,"LI",{});var JPe=s(xb);aue=n(JPe,"STRONG",{});var lMt=s(aue);czo=r(lMt,"mvp"),lMt.forEach(t),fzo=r(JPe," \u2014 "),HX=n(JPe,"A",{href:!0});var iMt=s(HX);mzo=r(iMt,"MvpForSequenceClassification"),iMt.forEach(t),gzo=r(JPe," (MVP model)"),JPe.forEach(t),hzo=i(j),$b=n(j,"LI",{});var YPe=s($b);nue=n(YPe,"STRONG",{});var dMt=s(nue);pzo=r(dMt,"nezha"),dMt.forEach(t),_zo=r(YPe," \u2014 "),UX=n(YPe,"A",{href:!0});var cMt=s(UX);uzo=r(cMt,"NezhaForSequenceClassification"),cMt.forEach(t),bzo=r(YPe," (Nezha model)"),YPe.forEach(t),vzo=i(j),kb=n(j,"LI",{});var KPe=s(kb);sue=n(KPe,"STRONG",{});var fMt=s(sue);Fzo=r(fMt,"nystromformer"),fMt.forEach(t),Tzo=r(KPe," \u2014 "),JX=n(KPe,"A",{href:!0});var mMt=s(JX);Mzo=r(mMt,"NystromformerForSequenceClassification"),mMt.forEach(t),Ezo=r(KPe," (Nystr\xF6mformer model)"),KPe.forEach(t),Czo=i(j),Sb=n(j,"LI",{});var ZPe=s(Sb);lue=n(ZPe,"STRONG",{});var gMt=s(lue);wzo=r(gMt,"openai-gpt"),gMt.forEach(t),Azo=r(ZPe," \u2014 "),YX=n(ZPe,"A",{href:!0});var hMt=s(YX);Lzo=r(hMt,"OpenAIGPTForSequenceClassification"),hMt.forEach(t),yzo=r(ZPe," (OpenAI GPT model)"),ZPe.forEach(t),xzo=i(j),Rb=n(j,"LI",{});var eBe=s(Rb);iue=n(eBe,"STRONG",{});var pMt=s(iue);$zo=r(pMt,"opt"),pMt.forEach(t),kzo=r(eBe," \u2014 "),KX=n(eBe,"A",{href:!0});var _Mt=s(KX);Szo=r(_Mt,"OPTForSequenceClassification"),_Mt.forEach(t),Rzo=r(eBe," (OPT model)"),eBe.forEach(t),Pzo=i(j),Pb=n(j,"LI",{});var oBe=s(Pb);due=n(oBe,"STRONG",{});var uMt=s(due);Bzo=r(uMt,"perceiver"),uMt.forEach(t),Izo=r(oBe," \u2014 "),ZX=n(oBe,"A",{href:!0});var bMt=s(ZX);Nzo=r(bMt,"PerceiverForSequenceClassification"),bMt.forEach(t),qzo=r(oBe," (Perceiver model)"),oBe.forEach(t),jzo=i(j),Bb=n(j,"LI",{});var rBe=s(Bb);cue=n(rBe,"STRONG",{});var vMt=s(cue);Dzo=r(vMt,"plbart"),vMt.forEach(t),Gzo=r(rBe," \u2014 "),ez=n(rBe,"A",{href:!0});var FMt=s(ez);Ozo=r(FMt,"PLBartForSequenceClassification"),FMt.forEach(t),Vzo=r(rBe," (PLBart model)"),rBe.forEach(t),Xzo=i(j),Ib=n(j,"LI",{});var tBe=s(Ib);fue=n(tBe,"STRONG",{});var TMt=s(fue);zzo=r(TMt,"qdqbert"),TMt.forEach(t),Wzo=r(tBe," \u2014 "),oz=n(tBe,"A",{href:!0});var MMt=s(oz);Qzo=r(MMt,"QDQBertForSequenceClassification"),MMt.forEach(t),Hzo=r(tBe," (QDQBert model)"),tBe.forEach(t),Uzo=i(j),Nb=n(j,"LI",{});var aBe=s(Nb);mue=n(aBe,"STRONG",{});var EMt=s(mue);Jzo=r(EMt,"reformer"),EMt.forEach(t),Yzo=r(aBe," \u2014 "),rz=n(aBe,"A",{href:!0});var CMt=s(rz);Kzo=r(CMt,"ReformerForSequenceClassification"),CMt.forEach(t),Zzo=r(aBe," (Reformer model)"),aBe.forEach(t),eWo=i(j),qb=n(j,"LI",{});var nBe=s(qb);gue=n(nBe,"STRONG",{});var wMt=s(gue);oWo=r(wMt,"rembert"),wMt.forEach(t),rWo=r(nBe," \u2014 "),tz=n(nBe,"A",{href:!0});var AMt=s(tz);tWo=r(AMt,"RemBertForSequenceClassification"),AMt.forEach(t),aWo=r(nBe," (RemBERT model)"),nBe.forEach(t),nWo=i(j),jb=n(j,"LI",{});var sBe=s(jb);hue=n(sBe,"STRONG",{});var LMt=s(hue);sWo=r(LMt,"roberta"),LMt.forEach(t),lWo=r(sBe," \u2014 "),az=n(sBe,"A",{href:!0});var yMt=s(az);iWo=r(yMt,"RobertaForSequenceClassification"),yMt.forEach(t),dWo=r(sBe," (RoBERTa model)"),sBe.forEach(t),cWo=i(j),Db=n(j,"LI",{});var lBe=s(Db);pue=n(lBe,"STRONG",{});var xMt=s(pue);fWo=r(xMt,"roformer"),xMt.forEach(t),mWo=r(lBe," \u2014 "),nz=n(lBe,"A",{href:!0});var $Mt=s(nz);gWo=r($Mt,"RoFormerForSequenceClassification"),$Mt.forEach(t),hWo=r(lBe," (RoFormer model)"),lBe.forEach(t),pWo=i(j),Gb=n(j,"LI",{});var iBe=s(Gb);_ue=n(iBe,"STRONG",{});var kMt=s(_ue);_Wo=r(kMt,"squeezebert"),kMt.forEach(t),uWo=r(iBe," \u2014 "),sz=n(iBe,"A",{href:!0});var SMt=s(sz);bWo=r(SMt,"SqueezeBertForSequenceClassification"),SMt.forEach(t),vWo=r(iBe," (SqueezeBERT model)"),iBe.forEach(t),FWo=i(j),Ob=n(j,"LI",{});var dBe=s(Ob);uue=n(dBe,"STRONG",{});var RMt=s(uue);TWo=r(RMt,"tapas"),RMt.forEach(t),MWo=r(dBe," \u2014 "),lz=n(dBe,"A",{href:!0});var PMt=s(lz);EWo=r(PMt,"TapasForSequenceClassification"),PMt.forEach(t),CWo=r(dBe," (TAPAS model)"),dBe.forEach(t),wWo=i(j),Vb=n(j,"LI",{});var cBe=s(Vb);bue=n(cBe,"STRONG",{});var BMt=s(bue);AWo=r(BMt,"transfo-xl"),BMt.forEach(t),LWo=r(cBe," \u2014 "),iz=n(cBe,"A",{href:!0});var IMt=s(iz);yWo=r(IMt,"TransfoXLForSequenceClassification"),IMt.forEach(t),xWo=r(cBe," (Transformer-XL model)"),cBe.forEach(t),$Wo=i(j),Xb=n(j,"LI",{});var fBe=s(Xb);vue=n(fBe,"STRONG",{});var NMt=s(vue);kWo=r(NMt,"xlm"),NMt.forEach(t),SWo=r(fBe," \u2014 "),dz=n(fBe,"A",{href:!0});var qMt=s(dz);RWo=r(qMt,"XLMForSequenceClassification"),qMt.forEach(t),PWo=r(fBe," (XLM model)"),fBe.forEach(t),BWo=i(j),zb=n(j,"LI",{});var mBe=s(zb);Fue=n(mBe,"STRONG",{});var jMt=s(Fue);IWo=r(jMt,"xlm-roberta"),jMt.forEach(t),NWo=r(mBe," \u2014 "),cz=n(mBe,"A",{href:!0});var DMt=s(cz);qWo=r(DMt,"XLMRobertaForSequenceClassification"),DMt.forEach(t),jWo=r(mBe," (XLM-RoBERTa model)"),mBe.forEach(t),DWo=i(j),Wb=n(j,"LI",{});var gBe=s(Wb);Tue=n(gBe,"STRONG",{});var GMt=s(Tue);GWo=r(GMt,"xlm-roberta-xl"),GMt.forEach(t),OWo=r(gBe," \u2014 "),fz=n(gBe,"A",{href:!0});var OMt=s(fz);VWo=r(OMt,"XLMRobertaXLForSequenceClassification"),OMt.forEach(t),XWo=r(gBe," (XLM-RoBERTa-XL model)"),gBe.forEach(t),zWo=i(j),Qb=n(j,"LI",{});var hBe=s(Qb);Mue=n(hBe,"STRONG",{});var VMt=s(Mue);WWo=r(VMt,"xlnet"),VMt.forEach(t),QWo=r(hBe," \u2014 "),mz=n(hBe,"A",{href:!0});var XMt=s(mz);HWo=r(XMt,"XLNetForSequenceClassification"),XMt.forEach(t),UWo=r(hBe," (XLNet model)"),hBe.forEach(t),JWo=i(j),Hb=n(j,"LI",{});var pBe=s(Hb);Eue=n(pBe,"STRONG",{});var zMt=s(Eue);YWo=r(zMt,"yoso"),zMt.forEach(t),KWo=r(pBe," \u2014 "),gz=n(pBe,"A",{href:!0});var WMt=s(gz);ZWo=r(WMt,"YosoForSequenceClassification"),WMt.forEach(t),eQo=r(pBe," (YOSO model)"),pBe.forEach(t),j.forEach(t),oQo=i(ma),Ub=n(ma,"P",{});var _Be=s(Ub);rQo=r(_Be,"The model is set in evaluation mode by default using "),Cue=n(_Be,"CODE",{});var QMt=s(Cue);tQo=r(QMt,"model.eval()"),QMt.forEach(t),aQo=r(_Be,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=n(_Be,"CODE",{});var HMt=s(wue);nQo=r(HMt,"model.train()"),HMt.forEach(t),_Be.forEach(t),sQo=i(ma),T(Jb.$$.fragment,ma),ma.forEach(t),dl.forEach(t),hze=i(f),ld=n(f,"H2",{class:!0});var FQe=s(ld);Yb=n(FQe,"A",{id:!0,class:!0,href:!0});var UMt=s(Yb);Aue=n(UMt,"SPAN",{});var JMt=s(Aue);T(u8.$$.fragment,JMt),JMt.forEach(t),UMt.forEach(t),lQo=i(FQe),Lue=n(FQe,"SPAN",{});var YMt=s(Lue);iQo=r(YMt,"AutoModelForMultipleChoice"),YMt.forEach(t),FQe.forEach(t),pze=i(f),No=n(f,"DIV",{class:!0});var cl=s(No);T(b8.$$.fragment,cl),dQo=i(cl),id=n(cl,"P",{});var _te=s(id);cQo=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hz=n(_te,"A",{href:!0});var KMt=s(hz);fQo=r(KMt,"from_pretrained()"),KMt.forEach(t),mQo=r(_te," class method or the "),pz=n(_te,"A",{href:!0});var ZMt=s(pz);gQo=r(ZMt,"from_config()"),ZMt.forEach(t),hQo=r(_te,` class
method.`),_te.forEach(t),pQo=i(cl),v8=n(cl,"P",{});var TQe=s(v8);_Qo=r(TQe,"This class cannot be instantiated directly using "),yue=n(TQe,"CODE",{});var eEt=s(yue);uQo=r(eEt,"__init__()"),eEt.forEach(t),bQo=r(TQe," (throws an error)."),TQe.forEach(t),vQo=i(cl),ht=n(cl,"DIV",{class:!0});var kA=s(ht);T(F8.$$.fragment,kA),FQo=i(kA),xue=n(kA,"P",{});var oEt=s(xue);TQo=r(oEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oEt.forEach(t),MQo=i(kA),dd=n(kA,"P",{});var ute=s(dd);EQo=r(ute,`Note:
Loading a model from its configuration file does `),$ue=n(ute,"STRONG",{});var rEt=s($ue);CQo=r(rEt,"not"),rEt.forEach(t),wQo=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(ute,"A",{href:!0});var tEt=s(_z);AQo=r(tEt,"from_pretrained()"),tEt.forEach(t),LQo=r(ute," to load the model weights."),ute.forEach(t),yQo=i(kA),T(Kb.$$.fragment,kA),kA.forEach(t),xQo=i(cl),to=n(cl,"DIV",{class:!0});var ga=s(to);T(T8.$$.fragment,ga),$Qo=i(ga),kue=n(ga,"P",{});var aEt=s(kue);kQo=r(aEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),aEt.forEach(t),SQo=i(ga),Oa=n(ga,"P",{});var SA=s(Oa);RQo=r(SA,"The model class to instantiate is selected based on the "),Sue=n(SA,"CODE",{});var nEt=s(Sue);PQo=r(nEt,"model_type"),nEt.forEach(t),BQo=r(SA,` property of the config object (either
passed as an argument or loaded from `),Rue=n(SA,"CODE",{});var sEt=s(Rue);IQo=r(sEt,"pretrained_model_name_or_path"),sEt.forEach(t),NQo=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=n(SA,"CODE",{});var lEt=s(Pue);qQo=r(lEt,"pretrained_model_name_or_path"),lEt.forEach(t),jQo=r(SA,":"),SA.forEach(t),DQo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);Zb=n(ee,"LI",{});var uBe=s(Zb);Bue=n(uBe,"STRONG",{});var iEt=s(Bue);GQo=r(iEt,"albert"),iEt.forEach(t),OQo=r(uBe," \u2014 "),uz=n(uBe,"A",{href:!0});var dEt=s(uz);VQo=r(dEt,"AlbertForMultipleChoice"),dEt.forEach(t),XQo=r(uBe," (ALBERT model)"),uBe.forEach(t),zQo=i(ee),ev=n(ee,"LI",{});var bBe=s(ev);Iue=n(bBe,"STRONG",{});var cEt=s(Iue);WQo=r(cEt,"bert"),cEt.forEach(t),QQo=r(bBe," \u2014 "),bz=n(bBe,"A",{href:!0});var fEt=s(bz);HQo=r(fEt,"BertForMultipleChoice"),fEt.forEach(t),UQo=r(bBe," (BERT model)"),bBe.forEach(t),JQo=i(ee),ov=n(ee,"LI",{});var vBe=s(ov);Nue=n(vBe,"STRONG",{});var mEt=s(Nue);YQo=r(mEt,"big_bird"),mEt.forEach(t),KQo=r(vBe," \u2014 "),vz=n(vBe,"A",{href:!0});var gEt=s(vz);ZQo=r(gEt,"BigBirdForMultipleChoice"),gEt.forEach(t),eHo=r(vBe," (BigBird model)"),vBe.forEach(t),oHo=i(ee),rv=n(ee,"LI",{});var FBe=s(rv);que=n(FBe,"STRONG",{});var hEt=s(que);rHo=r(hEt,"camembert"),hEt.forEach(t),tHo=r(FBe," \u2014 "),Fz=n(FBe,"A",{href:!0});var pEt=s(Fz);aHo=r(pEt,"CamembertForMultipleChoice"),pEt.forEach(t),nHo=r(FBe," (CamemBERT model)"),FBe.forEach(t),sHo=i(ee),tv=n(ee,"LI",{});var TBe=s(tv);jue=n(TBe,"STRONG",{});var _Et=s(jue);lHo=r(_Et,"canine"),_Et.forEach(t),iHo=r(TBe," \u2014 "),Tz=n(TBe,"A",{href:!0});var uEt=s(Tz);dHo=r(uEt,"CanineForMultipleChoice"),uEt.forEach(t),cHo=r(TBe," (CANINE model)"),TBe.forEach(t),fHo=i(ee),av=n(ee,"LI",{});var MBe=s(av);Due=n(MBe,"STRONG",{});var bEt=s(Due);mHo=r(bEt,"convbert"),bEt.forEach(t),gHo=r(MBe," \u2014 "),Mz=n(MBe,"A",{href:!0});var vEt=s(Mz);hHo=r(vEt,"ConvBertForMultipleChoice"),vEt.forEach(t),pHo=r(MBe," (ConvBERT model)"),MBe.forEach(t),_Ho=i(ee),nv=n(ee,"LI",{});var EBe=s(nv);Gue=n(EBe,"STRONG",{});var FEt=s(Gue);uHo=r(FEt,"data2vec-text"),FEt.forEach(t),bHo=r(EBe," \u2014 "),Ez=n(EBe,"A",{href:!0});var TEt=s(Ez);vHo=r(TEt,"Data2VecTextForMultipleChoice"),TEt.forEach(t),FHo=r(EBe," (Data2VecText model)"),EBe.forEach(t),THo=i(ee),sv=n(ee,"LI",{});var CBe=s(sv);Oue=n(CBe,"STRONG",{});var MEt=s(Oue);MHo=r(MEt,"deberta-v2"),MEt.forEach(t),EHo=r(CBe," \u2014 "),Cz=n(CBe,"A",{href:!0});var EEt=s(Cz);CHo=r(EEt,"DebertaV2ForMultipleChoice"),EEt.forEach(t),wHo=r(CBe," (DeBERTa-v2 model)"),CBe.forEach(t),AHo=i(ee),lv=n(ee,"LI",{});var wBe=s(lv);Vue=n(wBe,"STRONG",{});var CEt=s(Vue);LHo=r(CEt,"distilbert"),CEt.forEach(t),yHo=r(wBe," \u2014 "),wz=n(wBe,"A",{href:!0});var wEt=s(wz);xHo=r(wEt,"DistilBertForMultipleChoice"),wEt.forEach(t),$Ho=r(wBe," (DistilBERT model)"),wBe.forEach(t),kHo=i(ee),iv=n(ee,"LI",{});var ABe=s(iv);Xue=n(ABe,"STRONG",{});var AEt=s(Xue);SHo=r(AEt,"electra"),AEt.forEach(t),RHo=r(ABe," \u2014 "),Az=n(ABe,"A",{href:!0});var LEt=s(Az);PHo=r(LEt,"ElectraForMultipleChoice"),LEt.forEach(t),BHo=r(ABe," (ELECTRA model)"),ABe.forEach(t),IHo=i(ee),dv=n(ee,"LI",{});var LBe=s(dv);zue=n(LBe,"STRONG",{});var yEt=s(zue);NHo=r(yEt,"flaubert"),yEt.forEach(t),qHo=r(LBe," \u2014 "),Lz=n(LBe,"A",{href:!0});var xEt=s(Lz);jHo=r(xEt,"FlaubertForMultipleChoice"),xEt.forEach(t),DHo=r(LBe," (FlauBERT model)"),LBe.forEach(t),GHo=i(ee),cv=n(ee,"LI",{});var yBe=s(cv);Wue=n(yBe,"STRONG",{});var $Et=s(Wue);OHo=r($Et,"fnet"),$Et.forEach(t),VHo=r(yBe," \u2014 "),yz=n(yBe,"A",{href:!0});var kEt=s(yz);XHo=r(kEt,"FNetForMultipleChoice"),kEt.forEach(t),zHo=r(yBe," (FNet model)"),yBe.forEach(t),WHo=i(ee),fv=n(ee,"LI",{});var xBe=s(fv);Que=n(xBe,"STRONG",{});var SEt=s(Que);QHo=r(SEt,"funnel"),SEt.forEach(t),HHo=r(xBe," \u2014 "),xz=n(xBe,"A",{href:!0});var REt=s(xz);UHo=r(REt,"FunnelForMultipleChoice"),REt.forEach(t),JHo=r(xBe," (Funnel Transformer model)"),xBe.forEach(t),YHo=i(ee),mv=n(ee,"LI",{});var $Be=s(mv);Hue=n($Be,"STRONG",{});var PEt=s(Hue);KHo=r(PEt,"ibert"),PEt.forEach(t),ZHo=r($Be," \u2014 "),$z=n($Be,"A",{href:!0});var BEt=s($z);eUo=r(BEt,"IBertForMultipleChoice"),BEt.forEach(t),oUo=r($Be," (I-BERT model)"),$Be.forEach(t),rUo=i(ee),gv=n(ee,"LI",{});var kBe=s(gv);Uue=n(kBe,"STRONG",{});var IEt=s(Uue);tUo=r(IEt,"longformer"),IEt.forEach(t),aUo=r(kBe," \u2014 "),kz=n(kBe,"A",{href:!0});var NEt=s(kz);nUo=r(NEt,"LongformerForMultipleChoice"),NEt.forEach(t),sUo=r(kBe," (Longformer model)"),kBe.forEach(t),lUo=i(ee),hv=n(ee,"LI",{});var SBe=s(hv);Jue=n(SBe,"STRONG",{});var qEt=s(Jue);iUo=r(qEt,"megatron-bert"),qEt.forEach(t),dUo=r(SBe," \u2014 "),Sz=n(SBe,"A",{href:!0});var jEt=s(Sz);cUo=r(jEt,"MegatronBertForMultipleChoice"),jEt.forEach(t),fUo=r(SBe," (Megatron-BERT model)"),SBe.forEach(t),mUo=i(ee),pv=n(ee,"LI",{});var RBe=s(pv);Yue=n(RBe,"STRONG",{});var DEt=s(Yue);gUo=r(DEt,"mobilebert"),DEt.forEach(t),hUo=r(RBe," \u2014 "),Rz=n(RBe,"A",{href:!0});var GEt=s(Rz);pUo=r(GEt,"MobileBertForMultipleChoice"),GEt.forEach(t),_Uo=r(RBe," (MobileBERT model)"),RBe.forEach(t),uUo=i(ee),_v=n(ee,"LI",{});var PBe=s(_v);Kue=n(PBe,"STRONG",{});var OEt=s(Kue);bUo=r(OEt,"mpnet"),OEt.forEach(t),vUo=r(PBe," \u2014 "),Pz=n(PBe,"A",{href:!0});var VEt=s(Pz);FUo=r(VEt,"MPNetForMultipleChoice"),VEt.forEach(t),TUo=r(PBe," (MPNet model)"),PBe.forEach(t),MUo=i(ee),uv=n(ee,"LI",{});var BBe=s(uv);Zue=n(BBe,"STRONG",{});var XEt=s(Zue);EUo=r(XEt,"nezha"),XEt.forEach(t),CUo=r(BBe," \u2014 "),Bz=n(BBe,"A",{href:!0});var zEt=s(Bz);wUo=r(zEt,"NezhaForMultipleChoice"),zEt.forEach(t),AUo=r(BBe," (Nezha model)"),BBe.forEach(t),LUo=i(ee),bv=n(ee,"LI",{});var IBe=s(bv);e1e=n(IBe,"STRONG",{});var WEt=s(e1e);yUo=r(WEt,"nystromformer"),WEt.forEach(t),xUo=r(IBe," \u2014 "),Iz=n(IBe,"A",{href:!0});var QEt=s(Iz);$Uo=r(QEt,"NystromformerForMultipleChoice"),QEt.forEach(t),kUo=r(IBe," (Nystr\xF6mformer model)"),IBe.forEach(t),SUo=i(ee),vv=n(ee,"LI",{});var NBe=s(vv);o1e=n(NBe,"STRONG",{});var HEt=s(o1e);RUo=r(HEt,"qdqbert"),HEt.forEach(t),PUo=r(NBe," \u2014 "),Nz=n(NBe,"A",{href:!0});var UEt=s(Nz);BUo=r(UEt,"QDQBertForMultipleChoice"),UEt.forEach(t),IUo=r(NBe," (QDQBert model)"),NBe.forEach(t),NUo=i(ee),Fv=n(ee,"LI",{});var qBe=s(Fv);r1e=n(qBe,"STRONG",{});var JEt=s(r1e);qUo=r(JEt,"rembert"),JEt.forEach(t),jUo=r(qBe," \u2014 "),qz=n(qBe,"A",{href:!0});var YEt=s(qz);DUo=r(YEt,"RemBertForMultipleChoice"),YEt.forEach(t),GUo=r(qBe," (RemBERT model)"),qBe.forEach(t),OUo=i(ee),Tv=n(ee,"LI",{});var jBe=s(Tv);t1e=n(jBe,"STRONG",{});var KEt=s(t1e);VUo=r(KEt,"roberta"),KEt.forEach(t),XUo=r(jBe," \u2014 "),jz=n(jBe,"A",{href:!0});var ZEt=s(jz);zUo=r(ZEt,"RobertaForMultipleChoice"),ZEt.forEach(t),WUo=r(jBe," (RoBERTa model)"),jBe.forEach(t),QUo=i(ee),Mv=n(ee,"LI",{});var DBe=s(Mv);a1e=n(DBe,"STRONG",{});var eCt=s(a1e);HUo=r(eCt,"roformer"),eCt.forEach(t),UUo=r(DBe," \u2014 "),Dz=n(DBe,"A",{href:!0});var oCt=s(Dz);JUo=r(oCt,"RoFormerForMultipleChoice"),oCt.forEach(t),YUo=r(DBe," (RoFormer model)"),DBe.forEach(t),KUo=i(ee),Ev=n(ee,"LI",{});var GBe=s(Ev);n1e=n(GBe,"STRONG",{});var rCt=s(n1e);ZUo=r(rCt,"squeezebert"),rCt.forEach(t),eJo=r(GBe," \u2014 "),Gz=n(GBe,"A",{href:!0});var tCt=s(Gz);oJo=r(tCt,"SqueezeBertForMultipleChoice"),tCt.forEach(t),rJo=r(GBe," (SqueezeBERT model)"),GBe.forEach(t),tJo=i(ee),Cv=n(ee,"LI",{});var OBe=s(Cv);s1e=n(OBe,"STRONG",{});var aCt=s(s1e);aJo=r(aCt,"xlm"),aCt.forEach(t),nJo=r(OBe," \u2014 "),Oz=n(OBe,"A",{href:!0});var nCt=s(Oz);sJo=r(nCt,"XLMForMultipleChoice"),nCt.forEach(t),lJo=r(OBe," (XLM model)"),OBe.forEach(t),iJo=i(ee),wv=n(ee,"LI",{});var VBe=s(wv);l1e=n(VBe,"STRONG",{});var sCt=s(l1e);dJo=r(sCt,"xlm-roberta"),sCt.forEach(t),cJo=r(VBe," \u2014 "),Vz=n(VBe,"A",{href:!0});var lCt=s(Vz);fJo=r(lCt,"XLMRobertaForMultipleChoice"),lCt.forEach(t),mJo=r(VBe," (XLM-RoBERTa model)"),VBe.forEach(t),gJo=i(ee),Av=n(ee,"LI",{});var XBe=s(Av);i1e=n(XBe,"STRONG",{});var iCt=s(i1e);hJo=r(iCt,"xlm-roberta-xl"),iCt.forEach(t),pJo=r(XBe," \u2014 "),Xz=n(XBe,"A",{href:!0});var dCt=s(Xz);_Jo=r(dCt,"XLMRobertaXLForMultipleChoice"),dCt.forEach(t),uJo=r(XBe," (XLM-RoBERTa-XL model)"),XBe.forEach(t),bJo=i(ee),Lv=n(ee,"LI",{});var zBe=s(Lv);d1e=n(zBe,"STRONG",{});var cCt=s(d1e);vJo=r(cCt,"xlnet"),cCt.forEach(t),FJo=r(zBe," \u2014 "),zz=n(zBe,"A",{href:!0});var fCt=s(zz);TJo=r(fCt,"XLNetForMultipleChoice"),fCt.forEach(t),MJo=r(zBe," (XLNet model)"),zBe.forEach(t),EJo=i(ee),yv=n(ee,"LI",{});var WBe=s(yv);c1e=n(WBe,"STRONG",{});var mCt=s(c1e);CJo=r(mCt,"yoso"),mCt.forEach(t),wJo=r(WBe," \u2014 "),Wz=n(WBe,"A",{href:!0});var gCt=s(Wz);AJo=r(gCt,"YosoForMultipleChoice"),gCt.forEach(t),LJo=r(WBe," (YOSO model)"),WBe.forEach(t),ee.forEach(t),yJo=i(ga),xv=n(ga,"P",{});var QBe=s(xv);xJo=r(QBe,"The model is set in evaluation mode by default using "),f1e=n(QBe,"CODE",{});var hCt=s(f1e);$Jo=r(hCt,"model.eval()"),hCt.forEach(t),kJo=r(QBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m1e=n(QBe,"CODE",{});var pCt=s(m1e);SJo=r(pCt,"model.train()"),pCt.forEach(t),QBe.forEach(t),RJo=i(ga),T($v.$$.fragment,ga),ga.forEach(t),cl.forEach(t),_ze=i(f),cd=n(f,"H2",{class:!0});var MQe=s(cd);kv=n(MQe,"A",{id:!0,class:!0,href:!0});var _Ct=s(kv);g1e=n(_Ct,"SPAN",{});var uCt=s(g1e);T(M8.$$.fragment,uCt),uCt.forEach(t),_Ct.forEach(t),PJo=i(MQe),h1e=n(MQe,"SPAN",{});var bCt=s(h1e);BJo=r(bCt,"AutoModelForNextSentencePrediction"),bCt.forEach(t),MQe.forEach(t),uze=i(f),qo=n(f,"DIV",{class:!0});var fl=s(qo);T(E8.$$.fragment,fl),IJo=i(fl),fd=n(fl,"P",{});var bte=s(fd);NJo=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Qz=n(bte,"A",{href:!0});var vCt=s(Qz);qJo=r(vCt,"from_pretrained()"),vCt.forEach(t),jJo=r(bte," class method or the "),Hz=n(bte,"A",{href:!0});var FCt=s(Hz);DJo=r(FCt,"from_config()"),FCt.forEach(t),GJo=r(bte,` class
method.`),bte.forEach(t),OJo=i(fl),C8=n(fl,"P",{});var EQe=s(C8);VJo=r(EQe,"This class cannot be instantiated directly using "),p1e=n(EQe,"CODE",{});var TCt=s(p1e);XJo=r(TCt,"__init__()"),TCt.forEach(t),zJo=r(EQe," (throws an error)."),EQe.forEach(t),WJo=i(fl),pt=n(fl,"DIV",{class:!0});var RA=s(pt);T(w8.$$.fragment,RA),QJo=i(RA),_1e=n(RA,"P",{});var MCt=s(_1e);HJo=r(MCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),MCt.forEach(t),UJo=i(RA),md=n(RA,"P",{});var vte=s(md);JJo=r(vte,`Note:
Loading a model from its configuration file does `),u1e=n(vte,"STRONG",{});var ECt=s(u1e);YJo=r(ECt,"not"),ECt.forEach(t),KJo=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=n(vte,"A",{href:!0});var CCt=s(Uz);ZJo=r(CCt,"from_pretrained()"),CCt.forEach(t),eYo=r(vte," to load the model weights."),vte.forEach(t),oYo=i(RA),T(Sv.$$.fragment,RA),RA.forEach(t),rYo=i(fl),ao=n(fl,"DIV",{class:!0});var ha=s(ao);T(A8.$$.fragment,ha),tYo=i(ha),b1e=n(ha,"P",{});var wCt=s(b1e);aYo=r(wCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wCt.forEach(t),nYo=i(ha),Va=n(ha,"P",{});var PA=s(Va);sYo=r(PA,"The model class to instantiate is selected based on the "),v1e=n(PA,"CODE",{});var ACt=s(v1e);lYo=r(ACt,"model_type"),ACt.forEach(t),iYo=r(PA,` property of the config object (either
passed as an argument or loaded from `),F1e=n(PA,"CODE",{});var LCt=s(F1e);dYo=r(LCt,"pretrained_model_name_or_path"),LCt.forEach(t),cYo=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T1e=n(PA,"CODE",{});var yCt=s(T1e);fYo=r(yCt,"pretrained_model_name_or_path"),yCt.forEach(t),mYo=r(PA,":"),PA.forEach(t),gYo=i(ha),jo=n(ha,"UL",{});var pa=s(jo);Rv=n(pa,"LI",{});var HBe=s(Rv);M1e=n(HBe,"STRONG",{});var xCt=s(M1e);hYo=r(xCt,"bert"),xCt.forEach(t),pYo=r(HBe," \u2014 "),Jz=n(HBe,"A",{href:!0});var $Ct=s(Jz);_Yo=r($Ct,"BertForNextSentencePrediction"),$Ct.forEach(t),uYo=r(HBe," (BERT model)"),HBe.forEach(t),bYo=i(pa),Pv=n(pa,"LI",{});var UBe=s(Pv);E1e=n(UBe,"STRONG",{});var kCt=s(E1e);vYo=r(kCt,"fnet"),kCt.forEach(t),FYo=r(UBe," \u2014 "),Yz=n(UBe,"A",{href:!0});var SCt=s(Yz);TYo=r(SCt,"FNetForNextSentencePrediction"),SCt.forEach(t),MYo=r(UBe," (FNet model)"),UBe.forEach(t),EYo=i(pa),Bv=n(pa,"LI",{});var JBe=s(Bv);C1e=n(JBe,"STRONG",{});var RCt=s(C1e);CYo=r(RCt,"megatron-bert"),RCt.forEach(t),wYo=r(JBe," \u2014 "),Kz=n(JBe,"A",{href:!0});var PCt=s(Kz);AYo=r(PCt,"MegatronBertForNextSentencePrediction"),PCt.forEach(t),LYo=r(JBe," (Megatron-BERT model)"),JBe.forEach(t),yYo=i(pa),Iv=n(pa,"LI",{});var YBe=s(Iv);w1e=n(YBe,"STRONG",{});var BCt=s(w1e);xYo=r(BCt,"mobilebert"),BCt.forEach(t),$Yo=r(YBe," \u2014 "),Zz=n(YBe,"A",{href:!0});var ICt=s(Zz);kYo=r(ICt,"MobileBertForNextSentencePrediction"),ICt.forEach(t),SYo=r(YBe," (MobileBERT model)"),YBe.forEach(t),RYo=i(pa),Nv=n(pa,"LI",{});var KBe=s(Nv);A1e=n(KBe,"STRONG",{});var NCt=s(A1e);PYo=r(NCt,"nezha"),NCt.forEach(t),BYo=r(KBe," \u2014 "),eW=n(KBe,"A",{href:!0});var qCt=s(eW);IYo=r(qCt,"NezhaForNextSentencePrediction"),qCt.forEach(t),NYo=r(KBe," (Nezha model)"),KBe.forEach(t),qYo=i(pa),qv=n(pa,"LI",{});var ZBe=s(qv);L1e=n(ZBe,"STRONG",{});var jCt=s(L1e);jYo=r(jCt,"qdqbert"),jCt.forEach(t),DYo=r(ZBe," \u2014 "),oW=n(ZBe,"A",{href:!0});var DCt=s(oW);GYo=r(DCt,"QDQBertForNextSentencePrediction"),DCt.forEach(t),OYo=r(ZBe," (QDQBert model)"),ZBe.forEach(t),pa.forEach(t),VYo=i(ha),jv=n(ha,"P",{});var eIe=s(jv);XYo=r(eIe,"The model is set in evaluation mode by default using "),y1e=n(eIe,"CODE",{});var GCt=s(y1e);zYo=r(GCt,"model.eval()"),GCt.forEach(t),WYo=r(eIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x1e=n(eIe,"CODE",{});var OCt=s(x1e);QYo=r(OCt,"model.train()"),OCt.forEach(t),eIe.forEach(t),HYo=i(ha),T(Dv.$$.fragment,ha),ha.forEach(t),fl.forEach(t),bze=i(f),gd=n(f,"H2",{class:!0});var CQe=s(gd);Gv=n(CQe,"A",{id:!0,class:!0,href:!0});var VCt=s(Gv);$1e=n(VCt,"SPAN",{});var XCt=s($1e);T(L8.$$.fragment,XCt),XCt.forEach(t),VCt.forEach(t),UYo=i(CQe),k1e=n(CQe,"SPAN",{});var zCt=s(k1e);JYo=r(zCt,"AutoModelForTokenClassification"),zCt.forEach(t),CQe.forEach(t),vze=i(f),Do=n(f,"DIV",{class:!0});var ml=s(Do);T(y8.$$.fragment,ml),YYo=i(ml),hd=n(ml,"P",{});var Fte=s(hd);KYo=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rW=n(Fte,"A",{href:!0});var WCt=s(rW);ZYo=r(WCt,"from_pretrained()"),WCt.forEach(t),eKo=r(Fte," class method or the "),tW=n(Fte,"A",{href:!0});var QCt=s(tW);oKo=r(QCt,"from_config()"),QCt.forEach(t),rKo=r(Fte,` class
method.`),Fte.forEach(t),tKo=i(ml),x8=n(ml,"P",{});var wQe=s(x8);aKo=r(wQe,"This class cannot be instantiated directly using "),S1e=n(wQe,"CODE",{});var HCt=s(S1e);nKo=r(HCt,"__init__()"),HCt.forEach(t),sKo=r(wQe," (throws an error)."),wQe.forEach(t),lKo=i(ml),_t=n(ml,"DIV",{class:!0});var BA=s(_t);T($8.$$.fragment,BA),iKo=i(BA),R1e=n(BA,"P",{});var UCt=s(R1e);dKo=r(UCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),UCt.forEach(t),cKo=i(BA),pd=n(BA,"P",{});var Tte=s(pd);fKo=r(Tte,`Note:
Loading a model from its configuration file does `),P1e=n(Tte,"STRONG",{});var JCt=s(P1e);mKo=r(JCt,"not"),JCt.forEach(t),gKo=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=n(Tte,"A",{href:!0});var YCt=s(aW);hKo=r(YCt,"from_pretrained()"),YCt.forEach(t),pKo=r(Tte," to load the model weights."),Tte.forEach(t),_Ko=i(BA),T(Ov.$$.fragment,BA),BA.forEach(t),uKo=i(ml),no=n(ml,"DIV",{class:!0});var _a=s(no);T(k8.$$.fragment,_a),bKo=i(_a),B1e=n(_a,"P",{});var KCt=s(B1e);vKo=r(KCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),KCt.forEach(t),FKo=i(_a),Xa=n(_a,"P",{});var IA=s(Xa);TKo=r(IA,"The model class to instantiate is selected based on the "),I1e=n(IA,"CODE",{});var ZCt=s(I1e);MKo=r(ZCt,"model_type"),ZCt.forEach(t),EKo=r(IA,` property of the config object (either
passed as an argument or loaded from `),N1e=n(IA,"CODE",{});var e5t=s(N1e);CKo=r(e5t,"pretrained_model_name_or_path"),e5t.forEach(t),wKo=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q1e=n(IA,"CODE",{});var o5t=s(q1e);AKo=r(o5t,"pretrained_model_name_or_path"),o5t.forEach(t),LKo=r(IA,":"),IA.forEach(t),yKo=i(_a),U=n(_a,"UL",{});var Y=s(U);Vv=n(Y,"LI",{});var oIe=s(Vv);j1e=n(oIe,"STRONG",{});var r5t=s(j1e);xKo=r(r5t,"albert"),r5t.forEach(t),$Ko=r(oIe," \u2014 "),nW=n(oIe,"A",{href:!0});var t5t=s(nW);kKo=r(t5t,"AlbertForTokenClassification"),t5t.forEach(t),SKo=r(oIe," (ALBERT model)"),oIe.forEach(t),RKo=i(Y),Xv=n(Y,"LI",{});var rIe=s(Xv);D1e=n(rIe,"STRONG",{});var a5t=s(D1e);PKo=r(a5t,"bert"),a5t.forEach(t),BKo=r(rIe," \u2014 "),sW=n(rIe,"A",{href:!0});var n5t=s(sW);IKo=r(n5t,"BertForTokenClassification"),n5t.forEach(t),NKo=r(rIe," (BERT model)"),rIe.forEach(t),qKo=i(Y),zv=n(Y,"LI",{});var tIe=s(zv);G1e=n(tIe,"STRONG",{});var s5t=s(G1e);jKo=r(s5t,"big_bird"),s5t.forEach(t),DKo=r(tIe," \u2014 "),lW=n(tIe,"A",{href:!0});var l5t=s(lW);GKo=r(l5t,"BigBirdForTokenClassification"),l5t.forEach(t),OKo=r(tIe," (BigBird model)"),tIe.forEach(t),VKo=i(Y),Wv=n(Y,"LI",{});var aIe=s(Wv);O1e=n(aIe,"STRONG",{});var i5t=s(O1e);XKo=r(i5t,"bloom"),i5t.forEach(t),zKo=r(aIe," \u2014 "),iW=n(aIe,"A",{href:!0});var d5t=s(iW);WKo=r(d5t,"BloomForTokenClassification"),d5t.forEach(t),QKo=r(aIe," (BLOOM model)"),aIe.forEach(t),HKo=i(Y),Qv=n(Y,"LI",{});var nIe=s(Qv);V1e=n(nIe,"STRONG",{});var c5t=s(V1e);UKo=r(c5t,"camembert"),c5t.forEach(t),JKo=r(nIe," \u2014 "),dW=n(nIe,"A",{href:!0});var f5t=s(dW);YKo=r(f5t,"CamembertForTokenClassification"),f5t.forEach(t),KKo=r(nIe," (CamemBERT model)"),nIe.forEach(t),ZKo=i(Y),Hv=n(Y,"LI",{});var sIe=s(Hv);X1e=n(sIe,"STRONG",{});var m5t=s(X1e);eZo=r(m5t,"canine"),m5t.forEach(t),oZo=r(sIe," \u2014 "),cW=n(sIe,"A",{href:!0});var g5t=s(cW);rZo=r(g5t,"CanineForTokenClassification"),g5t.forEach(t),tZo=r(sIe," (CANINE model)"),sIe.forEach(t),aZo=i(Y),Uv=n(Y,"LI",{});var lIe=s(Uv);z1e=n(lIe,"STRONG",{});var h5t=s(z1e);nZo=r(h5t,"convbert"),h5t.forEach(t),sZo=r(lIe," \u2014 "),fW=n(lIe,"A",{href:!0});var p5t=s(fW);lZo=r(p5t,"ConvBertForTokenClassification"),p5t.forEach(t),iZo=r(lIe," (ConvBERT model)"),lIe.forEach(t),dZo=i(Y),Jv=n(Y,"LI",{});var iIe=s(Jv);W1e=n(iIe,"STRONG",{});var _5t=s(W1e);cZo=r(_5t,"data2vec-text"),_5t.forEach(t),fZo=r(iIe," \u2014 "),mW=n(iIe,"A",{href:!0});var u5t=s(mW);mZo=r(u5t,"Data2VecTextForTokenClassification"),u5t.forEach(t),gZo=r(iIe," (Data2VecText model)"),iIe.forEach(t),hZo=i(Y),Yv=n(Y,"LI",{});var dIe=s(Yv);Q1e=n(dIe,"STRONG",{});var b5t=s(Q1e);pZo=r(b5t,"deberta"),b5t.forEach(t),_Zo=r(dIe," \u2014 "),gW=n(dIe,"A",{href:!0});var v5t=s(gW);uZo=r(v5t,"DebertaForTokenClassification"),v5t.forEach(t),bZo=r(dIe," (DeBERTa model)"),dIe.forEach(t),vZo=i(Y),Kv=n(Y,"LI",{});var cIe=s(Kv);H1e=n(cIe,"STRONG",{});var F5t=s(H1e);FZo=r(F5t,"deberta-v2"),F5t.forEach(t),TZo=r(cIe," \u2014 "),hW=n(cIe,"A",{href:!0});var T5t=s(hW);MZo=r(T5t,"DebertaV2ForTokenClassification"),T5t.forEach(t),EZo=r(cIe," (DeBERTa-v2 model)"),cIe.forEach(t),CZo=i(Y),Zv=n(Y,"LI",{});var fIe=s(Zv);U1e=n(fIe,"STRONG",{});var M5t=s(U1e);wZo=r(M5t,"distilbert"),M5t.forEach(t),AZo=r(fIe," \u2014 "),pW=n(fIe,"A",{href:!0});var E5t=s(pW);LZo=r(E5t,"DistilBertForTokenClassification"),E5t.forEach(t),yZo=r(fIe," (DistilBERT model)"),fIe.forEach(t),xZo=i(Y),e0=n(Y,"LI",{});var mIe=s(e0);J1e=n(mIe,"STRONG",{});var C5t=s(J1e);$Zo=r(C5t,"electra"),C5t.forEach(t),kZo=r(mIe," \u2014 "),_W=n(mIe,"A",{href:!0});var w5t=s(_W);SZo=r(w5t,"ElectraForTokenClassification"),w5t.forEach(t),RZo=r(mIe," (ELECTRA model)"),mIe.forEach(t),PZo=i(Y),o0=n(Y,"LI",{});var gIe=s(o0);Y1e=n(gIe,"STRONG",{});var A5t=s(Y1e);BZo=r(A5t,"flaubert"),A5t.forEach(t),IZo=r(gIe," \u2014 "),uW=n(gIe,"A",{href:!0});var L5t=s(uW);NZo=r(L5t,"FlaubertForTokenClassification"),L5t.forEach(t),qZo=r(gIe," (FlauBERT model)"),gIe.forEach(t),jZo=i(Y),r0=n(Y,"LI",{});var hIe=s(r0);K1e=n(hIe,"STRONG",{});var y5t=s(K1e);DZo=r(y5t,"fnet"),y5t.forEach(t),GZo=r(hIe," \u2014 "),bW=n(hIe,"A",{href:!0});var x5t=s(bW);OZo=r(x5t,"FNetForTokenClassification"),x5t.forEach(t),VZo=r(hIe," (FNet model)"),hIe.forEach(t),XZo=i(Y),t0=n(Y,"LI",{});var pIe=s(t0);Z1e=n(pIe,"STRONG",{});var $5t=s(Z1e);zZo=r($5t,"funnel"),$5t.forEach(t),WZo=r(pIe," \u2014 "),vW=n(pIe,"A",{href:!0});var k5t=s(vW);QZo=r(k5t,"FunnelForTokenClassification"),k5t.forEach(t),HZo=r(pIe," (Funnel Transformer model)"),pIe.forEach(t),UZo=i(Y),a0=n(Y,"LI",{});var _Ie=s(a0);e4e=n(_Ie,"STRONG",{});var S5t=s(e4e);JZo=r(S5t,"gpt2"),S5t.forEach(t),YZo=r(_Ie," \u2014 "),FW=n(_Ie,"A",{href:!0});var R5t=s(FW);KZo=r(R5t,"GPT2ForTokenClassification"),R5t.forEach(t),ZZo=r(_Ie," (OpenAI GPT-2 model)"),_Ie.forEach(t),eer=i(Y),n0=n(Y,"LI",{});var uIe=s(n0);o4e=n(uIe,"STRONG",{});var P5t=s(o4e);oer=r(P5t,"ibert"),P5t.forEach(t),rer=r(uIe," \u2014 "),TW=n(uIe,"A",{href:!0});var B5t=s(TW);ter=r(B5t,"IBertForTokenClassification"),B5t.forEach(t),aer=r(uIe," (I-BERT model)"),uIe.forEach(t),ner=i(Y),s0=n(Y,"LI",{});var bIe=s(s0);r4e=n(bIe,"STRONG",{});var I5t=s(r4e);ser=r(I5t,"layoutlm"),I5t.forEach(t),ler=r(bIe," \u2014 "),MW=n(bIe,"A",{href:!0});var N5t=s(MW);ier=r(N5t,"LayoutLMForTokenClassification"),N5t.forEach(t),der=r(bIe," (LayoutLM model)"),bIe.forEach(t),cer=i(Y),l0=n(Y,"LI",{});var vIe=s(l0);t4e=n(vIe,"STRONG",{});var q5t=s(t4e);fer=r(q5t,"layoutlmv2"),q5t.forEach(t),mer=r(vIe," \u2014 "),EW=n(vIe,"A",{href:!0});var j5t=s(EW);ger=r(j5t,"LayoutLMv2ForTokenClassification"),j5t.forEach(t),her=r(vIe," (LayoutLMv2 model)"),vIe.forEach(t),per=i(Y),i0=n(Y,"LI",{});var FIe=s(i0);a4e=n(FIe,"STRONG",{});var D5t=s(a4e);_er=r(D5t,"layoutlmv3"),D5t.forEach(t),uer=r(FIe," \u2014 "),CW=n(FIe,"A",{href:!0});var G5t=s(CW);ber=r(G5t,"LayoutLMv3ForTokenClassification"),G5t.forEach(t),ver=r(FIe," (LayoutLMv3 model)"),FIe.forEach(t),Fer=i(Y),d0=n(Y,"LI",{});var TIe=s(d0);n4e=n(TIe,"STRONG",{});var O5t=s(n4e);Ter=r(O5t,"longformer"),O5t.forEach(t),Mer=r(TIe," \u2014 "),wW=n(TIe,"A",{href:!0});var V5t=s(wW);Eer=r(V5t,"LongformerForTokenClassification"),V5t.forEach(t),Cer=r(TIe," (Longformer model)"),TIe.forEach(t),wer=i(Y),c0=n(Y,"LI",{});var MIe=s(c0);s4e=n(MIe,"STRONG",{});var X5t=s(s4e);Aer=r(X5t,"megatron-bert"),X5t.forEach(t),Ler=r(MIe," \u2014 "),AW=n(MIe,"A",{href:!0});var z5t=s(AW);yer=r(z5t,"MegatronBertForTokenClassification"),z5t.forEach(t),xer=r(MIe," (Megatron-BERT model)"),MIe.forEach(t),$er=i(Y),f0=n(Y,"LI",{});var EIe=s(f0);l4e=n(EIe,"STRONG",{});var W5t=s(l4e);ker=r(W5t,"mobilebert"),W5t.forEach(t),Ser=r(EIe," \u2014 "),LW=n(EIe,"A",{href:!0});var Q5t=s(LW);Rer=r(Q5t,"MobileBertForTokenClassification"),Q5t.forEach(t),Per=r(EIe," (MobileBERT model)"),EIe.forEach(t),Ber=i(Y),m0=n(Y,"LI",{});var CIe=s(m0);i4e=n(CIe,"STRONG",{});var H5t=s(i4e);Ier=r(H5t,"mpnet"),H5t.forEach(t),Ner=r(CIe," \u2014 "),yW=n(CIe,"A",{href:!0});var U5t=s(yW);qer=r(U5t,"MPNetForTokenClassification"),U5t.forEach(t),jer=r(CIe," (MPNet model)"),CIe.forEach(t),Der=i(Y),g0=n(Y,"LI",{});var wIe=s(g0);d4e=n(wIe,"STRONG",{});var J5t=s(d4e);Ger=r(J5t,"nezha"),J5t.forEach(t),Oer=r(wIe," \u2014 "),xW=n(wIe,"A",{href:!0});var Y5t=s(xW);Ver=r(Y5t,"NezhaForTokenClassification"),Y5t.forEach(t),Xer=r(wIe," (Nezha model)"),wIe.forEach(t),zer=i(Y),h0=n(Y,"LI",{});var AIe=s(h0);c4e=n(AIe,"STRONG",{});var K5t=s(c4e);Wer=r(K5t,"nystromformer"),K5t.forEach(t),Qer=r(AIe," \u2014 "),$W=n(AIe,"A",{href:!0});var Z5t=s($W);Her=r(Z5t,"NystromformerForTokenClassification"),Z5t.forEach(t),Uer=r(AIe," (Nystr\xF6mformer model)"),AIe.forEach(t),Jer=i(Y),p0=n(Y,"LI",{});var LIe=s(p0);f4e=n(LIe,"STRONG",{});var e3t=s(f4e);Yer=r(e3t,"qdqbert"),e3t.forEach(t),Ker=r(LIe," \u2014 "),kW=n(LIe,"A",{href:!0});var o3t=s(kW);Zer=r(o3t,"QDQBertForTokenClassification"),o3t.forEach(t),eor=r(LIe," (QDQBert model)"),LIe.forEach(t),oor=i(Y),_0=n(Y,"LI",{});var yIe=s(_0);m4e=n(yIe,"STRONG",{});var r3t=s(m4e);ror=r(r3t,"rembert"),r3t.forEach(t),tor=r(yIe," \u2014 "),SW=n(yIe,"A",{href:!0});var t3t=s(SW);aor=r(t3t,"RemBertForTokenClassification"),t3t.forEach(t),nor=r(yIe," (RemBERT model)"),yIe.forEach(t),sor=i(Y),u0=n(Y,"LI",{});var xIe=s(u0);g4e=n(xIe,"STRONG",{});var a3t=s(g4e);lor=r(a3t,"roberta"),a3t.forEach(t),ior=r(xIe," \u2014 "),RW=n(xIe,"A",{href:!0});var n3t=s(RW);dor=r(n3t,"RobertaForTokenClassification"),n3t.forEach(t),cor=r(xIe," (RoBERTa model)"),xIe.forEach(t),mor=i(Y),b0=n(Y,"LI",{});var $Ie=s(b0);h4e=n($Ie,"STRONG",{});var s3t=s(h4e);gor=r(s3t,"roformer"),s3t.forEach(t),hor=r($Ie," \u2014 "),PW=n($Ie,"A",{href:!0});var l3t=s(PW);por=r(l3t,"RoFormerForTokenClassification"),l3t.forEach(t),_or=r($Ie," (RoFormer model)"),$Ie.forEach(t),uor=i(Y),v0=n(Y,"LI",{});var kIe=s(v0);p4e=n(kIe,"STRONG",{});var i3t=s(p4e);bor=r(i3t,"squeezebert"),i3t.forEach(t),vor=r(kIe," \u2014 "),BW=n(kIe,"A",{href:!0});var d3t=s(BW);For=r(d3t,"SqueezeBertForTokenClassification"),d3t.forEach(t),Tor=r(kIe," (SqueezeBERT model)"),kIe.forEach(t),Mor=i(Y),F0=n(Y,"LI",{});var SIe=s(F0);_4e=n(SIe,"STRONG",{});var c3t=s(_4e);Eor=r(c3t,"xlm"),c3t.forEach(t),Cor=r(SIe," \u2014 "),IW=n(SIe,"A",{href:!0});var f3t=s(IW);wor=r(f3t,"XLMForTokenClassification"),f3t.forEach(t),Aor=r(SIe," (XLM model)"),SIe.forEach(t),Lor=i(Y),T0=n(Y,"LI",{});var RIe=s(T0);u4e=n(RIe,"STRONG",{});var m3t=s(u4e);yor=r(m3t,"xlm-roberta"),m3t.forEach(t),xor=r(RIe," \u2014 "),NW=n(RIe,"A",{href:!0});var g3t=s(NW);$or=r(g3t,"XLMRobertaForTokenClassification"),g3t.forEach(t),kor=r(RIe," (XLM-RoBERTa model)"),RIe.forEach(t),Sor=i(Y),M0=n(Y,"LI",{});var PIe=s(M0);b4e=n(PIe,"STRONG",{});var h3t=s(b4e);Ror=r(h3t,"xlm-roberta-xl"),h3t.forEach(t),Por=r(PIe," \u2014 "),qW=n(PIe,"A",{href:!0});var p3t=s(qW);Bor=r(p3t,"XLMRobertaXLForTokenClassification"),p3t.forEach(t),Ior=r(PIe," (XLM-RoBERTa-XL model)"),PIe.forEach(t),Nor=i(Y),E0=n(Y,"LI",{});var BIe=s(E0);v4e=n(BIe,"STRONG",{});var _3t=s(v4e);qor=r(_3t,"xlnet"),_3t.forEach(t),jor=r(BIe," \u2014 "),jW=n(BIe,"A",{href:!0});var u3t=s(jW);Dor=r(u3t,"XLNetForTokenClassification"),u3t.forEach(t),Gor=r(BIe," (XLNet model)"),BIe.forEach(t),Oor=i(Y),C0=n(Y,"LI",{});var IIe=s(C0);F4e=n(IIe,"STRONG",{});var b3t=s(F4e);Vor=r(b3t,"yoso"),b3t.forEach(t),Xor=r(IIe," \u2014 "),DW=n(IIe,"A",{href:!0});var v3t=s(DW);zor=r(v3t,"YosoForTokenClassification"),v3t.forEach(t),Wor=r(IIe," (YOSO model)"),IIe.forEach(t),Y.forEach(t),Qor=i(_a),w0=n(_a,"P",{});var NIe=s(w0);Hor=r(NIe,"The model is set in evaluation mode by default using "),T4e=n(NIe,"CODE",{});var F3t=s(T4e);Uor=r(F3t,"model.eval()"),F3t.forEach(t),Jor=r(NIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M4e=n(NIe,"CODE",{});var T3t=s(M4e);Yor=r(T3t,"model.train()"),T3t.forEach(t),NIe.forEach(t),Kor=i(_a),T(A0.$$.fragment,_a),_a.forEach(t),ml.forEach(t),Fze=i(f),_d=n(f,"H2",{class:!0});var AQe=s(_d);L0=n(AQe,"A",{id:!0,class:!0,href:!0});var M3t=s(L0);E4e=n(M3t,"SPAN",{});var E3t=s(E4e);T(S8.$$.fragment,E3t),E3t.forEach(t),M3t.forEach(t),Zor=i(AQe),C4e=n(AQe,"SPAN",{});var C3t=s(C4e);err=r(C3t,"AutoModelForQuestionAnswering"),C3t.forEach(t),AQe.forEach(t),Tze=i(f),Go=n(f,"DIV",{class:!0});var gl=s(Go);T(R8.$$.fragment,gl),orr=i(gl),ud=n(gl,"P",{});var Mte=s(ud);rrr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GW=n(Mte,"A",{href:!0});var w3t=s(GW);trr=r(w3t,"from_pretrained()"),w3t.forEach(t),arr=r(Mte," class method or the "),OW=n(Mte,"A",{href:!0});var A3t=s(OW);nrr=r(A3t,"from_config()"),A3t.forEach(t),srr=r(Mte,` class
method.`),Mte.forEach(t),lrr=i(gl),P8=n(gl,"P",{});var LQe=s(P8);irr=r(LQe,"This class cannot be instantiated directly using "),w4e=n(LQe,"CODE",{});var L3t=s(w4e);drr=r(L3t,"__init__()"),L3t.forEach(t),crr=r(LQe," (throws an error)."),LQe.forEach(t),frr=i(gl),ut=n(gl,"DIV",{class:!0});var NA=s(ut);T(B8.$$.fragment,NA),mrr=i(NA),A4e=n(NA,"P",{});var y3t=s(A4e);grr=r(y3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),y3t.forEach(t),hrr=i(NA),bd=n(NA,"P",{});var Ete=s(bd);prr=r(Ete,`Note:
Loading a model from its configuration file does `),L4e=n(Ete,"STRONG",{});var x3t=s(L4e);_rr=r(x3t,"not"),x3t.forEach(t),urr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(Ete,"A",{href:!0});var $3t=s(VW);brr=r($3t,"from_pretrained()"),$3t.forEach(t),vrr=r(Ete," to load the model weights."),Ete.forEach(t),Frr=i(NA),T(y0.$$.fragment,NA),NA.forEach(t),Trr=i(gl),so=n(gl,"DIV",{class:!0});var ua=s(so);T(I8.$$.fragment,ua),Mrr=i(ua),y4e=n(ua,"P",{});var k3t=s(y4e);Err=r(k3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),k3t.forEach(t),Crr=i(ua),za=n(ua,"P",{});var qA=s(za);wrr=r(qA,"The model class to instantiate is selected based on the "),x4e=n(qA,"CODE",{});var S3t=s(x4e);Arr=r(S3t,"model_type"),S3t.forEach(t),Lrr=r(qA,` property of the config object (either
passed as an argument or loaded from `),$4e=n(qA,"CODE",{});var R3t=s($4e);yrr=r(R3t,"pretrained_model_name_or_path"),R3t.forEach(t),xrr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=n(qA,"CODE",{});var P3t=s(k4e);$rr=r(P3t,"pretrained_model_name_or_path"),P3t.forEach(t),krr=r(qA,":"),qA.forEach(t),Srr=i(ua),V=n(ua,"UL",{});var X=s(V);x0=n(X,"LI",{});var qIe=s(x0);S4e=n(qIe,"STRONG",{});var B3t=s(S4e);Rrr=r(B3t,"albert"),B3t.forEach(t),Prr=r(qIe," \u2014 "),XW=n(qIe,"A",{href:!0});var I3t=s(XW);Brr=r(I3t,"AlbertForQuestionAnswering"),I3t.forEach(t),Irr=r(qIe," (ALBERT model)"),qIe.forEach(t),Nrr=i(X),$0=n(X,"LI",{});var jIe=s($0);R4e=n(jIe,"STRONG",{});var N3t=s(R4e);qrr=r(N3t,"bart"),N3t.forEach(t),jrr=r(jIe," \u2014 "),zW=n(jIe,"A",{href:!0});var q3t=s(zW);Drr=r(q3t,"BartForQuestionAnswering"),q3t.forEach(t),Grr=r(jIe," (BART model)"),jIe.forEach(t),Orr=i(X),k0=n(X,"LI",{});var DIe=s(k0);P4e=n(DIe,"STRONG",{});var j3t=s(P4e);Vrr=r(j3t,"bert"),j3t.forEach(t),Xrr=r(DIe," \u2014 "),WW=n(DIe,"A",{href:!0});var D3t=s(WW);zrr=r(D3t,"BertForQuestionAnswering"),D3t.forEach(t),Wrr=r(DIe," (BERT model)"),DIe.forEach(t),Qrr=i(X),S0=n(X,"LI",{});var GIe=s(S0);B4e=n(GIe,"STRONG",{});var G3t=s(B4e);Hrr=r(G3t,"big_bird"),G3t.forEach(t),Urr=r(GIe," \u2014 "),QW=n(GIe,"A",{href:!0});var O3t=s(QW);Jrr=r(O3t,"BigBirdForQuestionAnswering"),O3t.forEach(t),Yrr=r(GIe," (BigBird model)"),GIe.forEach(t),Krr=i(X),R0=n(X,"LI",{});var OIe=s(R0);I4e=n(OIe,"STRONG",{});var V3t=s(I4e);Zrr=r(V3t,"bigbird_pegasus"),V3t.forEach(t),etr=r(OIe," \u2014 "),HW=n(OIe,"A",{href:!0});var X3t=s(HW);otr=r(X3t,"BigBirdPegasusForQuestionAnswering"),X3t.forEach(t),rtr=r(OIe," (BigBird-Pegasus model)"),OIe.forEach(t),ttr=i(X),P0=n(X,"LI",{});var VIe=s(P0);N4e=n(VIe,"STRONG",{});var z3t=s(N4e);atr=r(z3t,"camembert"),z3t.forEach(t),ntr=r(VIe," \u2014 "),UW=n(VIe,"A",{href:!0});var W3t=s(UW);str=r(W3t,"CamembertForQuestionAnswering"),W3t.forEach(t),ltr=r(VIe," (CamemBERT model)"),VIe.forEach(t),itr=i(X),B0=n(X,"LI",{});var XIe=s(B0);q4e=n(XIe,"STRONG",{});var Q3t=s(q4e);dtr=r(Q3t,"canine"),Q3t.forEach(t),ctr=r(XIe," \u2014 "),JW=n(XIe,"A",{href:!0});var H3t=s(JW);ftr=r(H3t,"CanineForQuestionAnswering"),H3t.forEach(t),mtr=r(XIe," (CANINE model)"),XIe.forEach(t),gtr=i(X),I0=n(X,"LI",{});var zIe=s(I0);j4e=n(zIe,"STRONG",{});var U3t=s(j4e);htr=r(U3t,"convbert"),U3t.forEach(t),ptr=r(zIe," \u2014 "),YW=n(zIe,"A",{href:!0});var J3t=s(YW);_tr=r(J3t,"ConvBertForQuestionAnswering"),J3t.forEach(t),utr=r(zIe," (ConvBERT model)"),zIe.forEach(t),btr=i(X),N0=n(X,"LI",{});var WIe=s(N0);D4e=n(WIe,"STRONG",{});var Y3t=s(D4e);vtr=r(Y3t,"data2vec-text"),Y3t.forEach(t),Ftr=r(WIe," \u2014 "),KW=n(WIe,"A",{href:!0});var K3t=s(KW);Ttr=r(K3t,"Data2VecTextForQuestionAnswering"),K3t.forEach(t),Mtr=r(WIe," (Data2VecText model)"),WIe.forEach(t),Etr=i(X),q0=n(X,"LI",{});var QIe=s(q0);G4e=n(QIe,"STRONG",{});var Z3t=s(G4e);Ctr=r(Z3t,"deberta"),Z3t.forEach(t),wtr=r(QIe," \u2014 "),ZW=n(QIe,"A",{href:!0});var ewt=s(ZW);Atr=r(ewt,"DebertaForQuestionAnswering"),ewt.forEach(t),Ltr=r(QIe," (DeBERTa model)"),QIe.forEach(t),ytr=i(X),j0=n(X,"LI",{});var HIe=s(j0);O4e=n(HIe,"STRONG",{});var owt=s(O4e);xtr=r(owt,"deberta-v2"),owt.forEach(t),$tr=r(HIe," \u2014 "),eQ=n(HIe,"A",{href:!0});var rwt=s(eQ);ktr=r(rwt,"DebertaV2ForQuestionAnswering"),rwt.forEach(t),Str=r(HIe," (DeBERTa-v2 model)"),HIe.forEach(t),Rtr=i(X),D0=n(X,"LI",{});var UIe=s(D0);V4e=n(UIe,"STRONG",{});var twt=s(V4e);Ptr=r(twt,"distilbert"),twt.forEach(t),Btr=r(UIe," \u2014 "),oQ=n(UIe,"A",{href:!0});var awt=s(oQ);Itr=r(awt,"DistilBertForQuestionAnswering"),awt.forEach(t),Ntr=r(UIe," (DistilBERT model)"),UIe.forEach(t),qtr=i(X),G0=n(X,"LI",{});var JIe=s(G0);X4e=n(JIe,"STRONG",{});var nwt=s(X4e);jtr=r(nwt,"electra"),nwt.forEach(t),Dtr=r(JIe," \u2014 "),rQ=n(JIe,"A",{href:!0});var swt=s(rQ);Gtr=r(swt,"ElectraForQuestionAnswering"),swt.forEach(t),Otr=r(JIe," (ELECTRA model)"),JIe.forEach(t),Vtr=i(X),O0=n(X,"LI",{});var YIe=s(O0);z4e=n(YIe,"STRONG",{});var lwt=s(z4e);Xtr=r(lwt,"flaubert"),lwt.forEach(t),ztr=r(YIe," \u2014 "),tQ=n(YIe,"A",{href:!0});var iwt=s(tQ);Wtr=r(iwt,"FlaubertForQuestionAnsweringSimple"),iwt.forEach(t),Qtr=r(YIe," (FlauBERT model)"),YIe.forEach(t),Htr=i(X),V0=n(X,"LI",{});var KIe=s(V0);W4e=n(KIe,"STRONG",{});var dwt=s(W4e);Utr=r(dwt,"fnet"),dwt.forEach(t),Jtr=r(KIe," \u2014 "),aQ=n(KIe,"A",{href:!0});var cwt=s(aQ);Ytr=r(cwt,"FNetForQuestionAnswering"),cwt.forEach(t),Ktr=r(KIe," (FNet model)"),KIe.forEach(t),Ztr=i(X),X0=n(X,"LI",{});var ZIe=s(X0);Q4e=n(ZIe,"STRONG",{});var fwt=s(Q4e);ear=r(fwt,"funnel"),fwt.forEach(t),oar=r(ZIe," \u2014 "),nQ=n(ZIe,"A",{href:!0});var mwt=s(nQ);rar=r(mwt,"FunnelForQuestionAnswering"),mwt.forEach(t),tar=r(ZIe," (Funnel Transformer model)"),ZIe.forEach(t),aar=i(X),z0=n(X,"LI",{});var eNe=s(z0);H4e=n(eNe,"STRONG",{});var gwt=s(H4e);nar=r(gwt,"gptj"),gwt.forEach(t),sar=r(eNe," \u2014 "),sQ=n(eNe,"A",{href:!0});var hwt=s(sQ);lar=r(hwt,"GPTJForQuestionAnswering"),hwt.forEach(t),iar=r(eNe," (GPT-J model)"),eNe.forEach(t),dar=i(X),W0=n(X,"LI",{});var oNe=s(W0);U4e=n(oNe,"STRONG",{});var pwt=s(U4e);car=r(pwt,"ibert"),pwt.forEach(t),far=r(oNe," \u2014 "),lQ=n(oNe,"A",{href:!0});var _wt=s(lQ);mar=r(_wt,"IBertForQuestionAnswering"),_wt.forEach(t),gar=r(oNe," (I-BERT model)"),oNe.forEach(t),har=i(X),Q0=n(X,"LI",{});var rNe=s(Q0);J4e=n(rNe,"STRONG",{});var uwt=s(J4e);par=r(uwt,"layoutlmv2"),uwt.forEach(t),_ar=r(rNe," \u2014 "),iQ=n(rNe,"A",{href:!0});var bwt=s(iQ);uar=r(bwt,"LayoutLMv2ForQuestionAnswering"),bwt.forEach(t),bar=r(rNe," (LayoutLMv2 model)"),rNe.forEach(t),Far=i(X),H0=n(X,"LI",{});var tNe=s(H0);Y4e=n(tNe,"STRONG",{});var vwt=s(Y4e);Tar=r(vwt,"layoutlmv3"),vwt.forEach(t),Mar=r(tNe," \u2014 "),dQ=n(tNe,"A",{href:!0});var Fwt=s(dQ);Ear=r(Fwt,"LayoutLMv3ForQuestionAnswering"),Fwt.forEach(t),Car=r(tNe," (LayoutLMv3 model)"),tNe.forEach(t),war=i(X),U0=n(X,"LI",{});var aNe=s(U0);K4e=n(aNe,"STRONG",{});var Twt=s(K4e);Aar=r(Twt,"led"),Twt.forEach(t),Lar=r(aNe," \u2014 "),cQ=n(aNe,"A",{href:!0});var Mwt=s(cQ);yar=r(Mwt,"LEDForQuestionAnswering"),Mwt.forEach(t),xar=r(aNe," (LED model)"),aNe.forEach(t),$ar=i(X),J0=n(X,"LI",{});var nNe=s(J0);Z4e=n(nNe,"STRONG",{});var Ewt=s(Z4e);kar=r(Ewt,"longformer"),Ewt.forEach(t),Sar=r(nNe," \u2014 "),fQ=n(nNe,"A",{href:!0});var Cwt=s(fQ);Rar=r(Cwt,"LongformerForQuestionAnswering"),Cwt.forEach(t),Par=r(nNe," (Longformer model)"),nNe.forEach(t),Bar=i(X),Y0=n(X,"LI",{});var sNe=s(Y0);e2e=n(sNe,"STRONG",{});var wwt=s(e2e);Iar=r(wwt,"lxmert"),wwt.forEach(t),Nar=r(sNe," \u2014 "),mQ=n(sNe,"A",{href:!0});var Awt=s(mQ);qar=r(Awt,"LxmertForQuestionAnswering"),Awt.forEach(t),jar=r(sNe," (LXMERT model)"),sNe.forEach(t),Dar=i(X),K0=n(X,"LI",{});var lNe=s(K0);o2e=n(lNe,"STRONG",{});var Lwt=s(o2e);Gar=r(Lwt,"mbart"),Lwt.forEach(t),Oar=r(lNe," \u2014 "),gQ=n(lNe,"A",{href:!0});var ywt=s(gQ);Var=r(ywt,"MBartForQuestionAnswering"),ywt.forEach(t),Xar=r(lNe," (mBART model)"),lNe.forEach(t),zar=i(X),Z0=n(X,"LI",{});var iNe=s(Z0);r2e=n(iNe,"STRONG",{});var xwt=s(r2e);War=r(xwt,"megatron-bert"),xwt.forEach(t),Qar=r(iNe," \u2014 "),hQ=n(iNe,"A",{href:!0});var $wt=s(hQ);Har=r($wt,"MegatronBertForQuestionAnswering"),$wt.forEach(t),Uar=r(iNe," (Megatron-BERT model)"),iNe.forEach(t),Jar=i(X),eF=n(X,"LI",{});var dNe=s(eF);t2e=n(dNe,"STRONG",{});var kwt=s(t2e);Yar=r(kwt,"mobilebert"),kwt.forEach(t),Kar=r(dNe," \u2014 "),pQ=n(dNe,"A",{href:!0});var Swt=s(pQ);Zar=r(Swt,"MobileBertForQuestionAnswering"),Swt.forEach(t),enr=r(dNe," (MobileBERT model)"),dNe.forEach(t),onr=i(X),oF=n(X,"LI",{});var cNe=s(oF);a2e=n(cNe,"STRONG",{});var Rwt=s(a2e);rnr=r(Rwt,"mpnet"),Rwt.forEach(t),tnr=r(cNe," \u2014 "),_Q=n(cNe,"A",{href:!0});var Pwt=s(_Q);anr=r(Pwt,"MPNetForQuestionAnswering"),Pwt.forEach(t),nnr=r(cNe," (MPNet model)"),cNe.forEach(t),snr=i(X),rF=n(X,"LI",{});var fNe=s(rF);n2e=n(fNe,"STRONG",{});var Bwt=s(n2e);lnr=r(Bwt,"mvp"),Bwt.forEach(t),inr=r(fNe," \u2014 "),uQ=n(fNe,"A",{href:!0});var Iwt=s(uQ);dnr=r(Iwt,"MvpForQuestionAnswering"),Iwt.forEach(t),cnr=r(fNe," (MVP model)"),fNe.forEach(t),fnr=i(X),tF=n(X,"LI",{});var mNe=s(tF);s2e=n(mNe,"STRONG",{});var Nwt=s(s2e);mnr=r(Nwt,"nezha"),Nwt.forEach(t),gnr=r(mNe," \u2014 "),bQ=n(mNe,"A",{href:!0});var qwt=s(bQ);hnr=r(qwt,"NezhaForQuestionAnswering"),qwt.forEach(t),pnr=r(mNe," (Nezha model)"),mNe.forEach(t),_nr=i(X),aF=n(X,"LI",{});var gNe=s(aF);l2e=n(gNe,"STRONG",{});var jwt=s(l2e);unr=r(jwt,"nystromformer"),jwt.forEach(t),bnr=r(gNe," \u2014 "),vQ=n(gNe,"A",{href:!0});var Dwt=s(vQ);vnr=r(Dwt,"NystromformerForQuestionAnswering"),Dwt.forEach(t),Fnr=r(gNe," (Nystr\xF6mformer model)"),gNe.forEach(t),Tnr=i(X),nF=n(X,"LI",{});var hNe=s(nF);i2e=n(hNe,"STRONG",{});var Gwt=s(i2e);Mnr=r(Gwt,"qdqbert"),Gwt.forEach(t),Enr=r(hNe," \u2014 "),FQ=n(hNe,"A",{href:!0});var Owt=s(FQ);Cnr=r(Owt,"QDQBertForQuestionAnswering"),Owt.forEach(t),wnr=r(hNe," (QDQBert model)"),hNe.forEach(t),Anr=i(X),sF=n(X,"LI",{});var pNe=s(sF);d2e=n(pNe,"STRONG",{});var Vwt=s(d2e);Lnr=r(Vwt,"reformer"),Vwt.forEach(t),ynr=r(pNe," \u2014 "),TQ=n(pNe,"A",{href:!0});var Xwt=s(TQ);xnr=r(Xwt,"ReformerForQuestionAnswering"),Xwt.forEach(t),$nr=r(pNe," (Reformer model)"),pNe.forEach(t),knr=i(X),lF=n(X,"LI",{});var _Ne=s(lF);c2e=n(_Ne,"STRONG",{});var zwt=s(c2e);Snr=r(zwt,"rembert"),zwt.forEach(t),Rnr=r(_Ne," \u2014 "),MQ=n(_Ne,"A",{href:!0});var Wwt=s(MQ);Pnr=r(Wwt,"RemBertForQuestionAnswering"),Wwt.forEach(t),Bnr=r(_Ne," (RemBERT model)"),_Ne.forEach(t),Inr=i(X),iF=n(X,"LI",{});var uNe=s(iF);f2e=n(uNe,"STRONG",{});var Qwt=s(f2e);Nnr=r(Qwt,"roberta"),Qwt.forEach(t),qnr=r(uNe," \u2014 "),EQ=n(uNe,"A",{href:!0});var Hwt=s(EQ);jnr=r(Hwt,"RobertaForQuestionAnswering"),Hwt.forEach(t),Dnr=r(uNe," (RoBERTa model)"),uNe.forEach(t),Gnr=i(X),dF=n(X,"LI",{});var bNe=s(dF);m2e=n(bNe,"STRONG",{});var Uwt=s(m2e);Onr=r(Uwt,"roformer"),Uwt.forEach(t),Vnr=r(bNe," \u2014 "),CQ=n(bNe,"A",{href:!0});var Jwt=s(CQ);Xnr=r(Jwt,"RoFormerForQuestionAnswering"),Jwt.forEach(t),znr=r(bNe," (RoFormer model)"),bNe.forEach(t),Wnr=i(X),cF=n(X,"LI",{});var vNe=s(cF);g2e=n(vNe,"STRONG",{});var Ywt=s(g2e);Qnr=r(Ywt,"splinter"),Ywt.forEach(t),Hnr=r(vNe," \u2014 "),wQ=n(vNe,"A",{href:!0});var Kwt=s(wQ);Unr=r(Kwt,"SplinterForQuestionAnswering"),Kwt.forEach(t),Jnr=r(vNe," (Splinter model)"),vNe.forEach(t),Ynr=i(X),fF=n(X,"LI",{});var FNe=s(fF);h2e=n(FNe,"STRONG",{});var Zwt=s(h2e);Knr=r(Zwt,"squeezebert"),Zwt.forEach(t),Znr=r(FNe," \u2014 "),AQ=n(FNe,"A",{href:!0});var eAt=s(AQ);esr=r(eAt,"SqueezeBertForQuestionAnswering"),eAt.forEach(t),osr=r(FNe," (SqueezeBERT model)"),FNe.forEach(t),rsr=i(X),mF=n(X,"LI",{});var TNe=s(mF);p2e=n(TNe,"STRONG",{});var oAt=s(p2e);tsr=r(oAt,"xlm"),oAt.forEach(t),asr=r(TNe," \u2014 "),LQ=n(TNe,"A",{href:!0});var rAt=s(LQ);nsr=r(rAt,"XLMForQuestionAnsweringSimple"),rAt.forEach(t),ssr=r(TNe," (XLM model)"),TNe.forEach(t),lsr=i(X),gF=n(X,"LI",{});var MNe=s(gF);_2e=n(MNe,"STRONG",{});var tAt=s(_2e);isr=r(tAt,"xlm-roberta"),tAt.forEach(t),dsr=r(MNe," \u2014 "),yQ=n(MNe,"A",{href:!0});var aAt=s(yQ);csr=r(aAt,"XLMRobertaForQuestionAnswering"),aAt.forEach(t),fsr=r(MNe," (XLM-RoBERTa model)"),MNe.forEach(t),msr=i(X),hF=n(X,"LI",{});var ENe=s(hF);u2e=n(ENe,"STRONG",{});var nAt=s(u2e);gsr=r(nAt,"xlm-roberta-xl"),nAt.forEach(t),hsr=r(ENe," \u2014 "),xQ=n(ENe,"A",{href:!0});var sAt=s(xQ);psr=r(sAt,"XLMRobertaXLForQuestionAnswering"),sAt.forEach(t),_sr=r(ENe," (XLM-RoBERTa-XL model)"),ENe.forEach(t),usr=i(X),pF=n(X,"LI",{});var CNe=s(pF);b2e=n(CNe,"STRONG",{});var lAt=s(b2e);bsr=r(lAt,"xlnet"),lAt.forEach(t),vsr=r(CNe," \u2014 "),$Q=n(CNe,"A",{href:!0});var iAt=s($Q);Fsr=r(iAt,"XLNetForQuestionAnsweringSimple"),iAt.forEach(t),Tsr=r(CNe," (XLNet model)"),CNe.forEach(t),Msr=i(X),_F=n(X,"LI",{});var wNe=s(_F);v2e=n(wNe,"STRONG",{});var dAt=s(v2e);Esr=r(dAt,"yoso"),dAt.forEach(t),Csr=r(wNe," \u2014 "),kQ=n(wNe,"A",{href:!0});var cAt=s(kQ);wsr=r(cAt,"YosoForQuestionAnswering"),cAt.forEach(t),Asr=r(wNe," (YOSO model)"),wNe.forEach(t),X.forEach(t),Lsr=i(ua),uF=n(ua,"P",{});var ANe=s(uF);ysr=r(ANe,"The model is set in evaluation mode by default using "),F2e=n(ANe,"CODE",{});var fAt=s(F2e);xsr=r(fAt,"model.eval()"),fAt.forEach(t),$sr=r(ANe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=n(ANe,"CODE",{});var mAt=s(T2e);ksr=r(mAt,"model.train()"),mAt.forEach(t),ANe.forEach(t),Ssr=i(ua),T(bF.$$.fragment,ua),ua.forEach(t),gl.forEach(t),Mze=i(f),vd=n(f,"H2",{class:!0});var yQe=s(vd);vF=n(yQe,"A",{id:!0,class:!0,href:!0});var gAt=s(vF);M2e=n(gAt,"SPAN",{});var hAt=s(M2e);T(N8.$$.fragment,hAt),hAt.forEach(t),gAt.forEach(t),Rsr=i(yQe),E2e=n(yQe,"SPAN",{});var pAt=s(E2e);Psr=r(pAt,"AutoModelForTableQuestionAnswering"),pAt.forEach(t),yQe.forEach(t),Eze=i(f),Oo=n(f,"DIV",{class:!0});var hl=s(Oo);T(q8.$$.fragment,hl),Bsr=i(hl),Fd=n(hl,"P",{});var Cte=s(Fd);Isr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),SQ=n(Cte,"A",{href:!0});var _At=s(SQ);Nsr=r(_At,"from_pretrained()"),_At.forEach(t),qsr=r(Cte," class method or the "),RQ=n(Cte,"A",{href:!0});var uAt=s(RQ);jsr=r(uAt,"from_config()"),uAt.forEach(t),Dsr=r(Cte,` class
method.`),Cte.forEach(t),Gsr=i(hl),j8=n(hl,"P",{});var xQe=s(j8);Osr=r(xQe,"This class cannot be instantiated directly using "),C2e=n(xQe,"CODE",{});var bAt=s(C2e);Vsr=r(bAt,"__init__()"),bAt.forEach(t),Xsr=r(xQe," (throws an error)."),xQe.forEach(t),zsr=i(hl),bt=n(hl,"DIV",{class:!0});var jA=s(bt);T(D8.$$.fragment,jA),Wsr=i(jA),w2e=n(jA,"P",{});var vAt=s(w2e);Qsr=r(vAt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vAt.forEach(t),Hsr=i(jA),Td=n(jA,"P",{});var wte=s(Td);Usr=r(wte,`Note:
Loading a model from its configuration file does `),A2e=n(wte,"STRONG",{});var FAt=s(A2e);Jsr=r(FAt,"not"),FAt.forEach(t),Ysr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=n(wte,"A",{href:!0});var TAt=s(PQ);Ksr=r(TAt,"from_pretrained()"),TAt.forEach(t),Zsr=r(wte," to load the model weights."),wte.forEach(t),elr=i(jA),T(FF.$$.fragment,jA),jA.forEach(t),olr=i(hl),lo=n(hl,"DIV",{class:!0});var ba=s(lo);T(G8.$$.fragment,ba),rlr=i(ba),L2e=n(ba,"P",{});var MAt=s(L2e);tlr=r(MAt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),MAt.forEach(t),alr=i(ba),Wa=n(ba,"P",{});var DA=s(Wa);nlr=r(DA,"The model class to instantiate is selected based on the "),y2e=n(DA,"CODE",{});var EAt=s(y2e);slr=r(EAt,"model_type"),EAt.forEach(t),llr=r(DA,` property of the config object (either
passed as an argument or loaded from `),x2e=n(DA,"CODE",{});var CAt=s(x2e);ilr=r(CAt,"pretrained_model_name_or_path"),CAt.forEach(t),dlr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=n(DA,"CODE",{});var wAt=s($2e);clr=r(wAt,"pretrained_model_name_or_path"),wAt.forEach(t),flr=r(DA,":"),DA.forEach(t),mlr=i(ba),k2e=n(ba,"UL",{});var AAt=s(k2e);TF=n(AAt,"LI",{});var LNe=s(TF);S2e=n(LNe,"STRONG",{});var LAt=s(S2e);glr=r(LAt,"tapas"),LAt.forEach(t),hlr=r(LNe," \u2014 "),BQ=n(LNe,"A",{href:!0});var yAt=s(BQ);plr=r(yAt,"TapasForQuestionAnswering"),yAt.forEach(t),_lr=r(LNe," (TAPAS model)"),LNe.forEach(t),AAt.forEach(t),ulr=i(ba),MF=n(ba,"P",{});var yNe=s(MF);blr=r(yNe,"The model is set in evaluation mode by default using "),R2e=n(yNe,"CODE",{});var xAt=s(R2e);vlr=r(xAt,"model.eval()"),xAt.forEach(t),Flr=r(yNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P2e=n(yNe,"CODE",{});var $At=s(P2e);Tlr=r($At,"model.train()"),$At.forEach(t),yNe.forEach(t),Mlr=i(ba),T(EF.$$.fragment,ba),ba.forEach(t),hl.forEach(t),Cze=i(f),Md=n(f,"H2",{class:!0});var $Qe=s(Md);CF=n($Qe,"A",{id:!0,class:!0,href:!0});var kAt=s(CF);B2e=n(kAt,"SPAN",{});var SAt=s(B2e);T(O8.$$.fragment,SAt),SAt.forEach(t),kAt.forEach(t),Elr=i($Qe),I2e=n($Qe,"SPAN",{});var RAt=s(I2e);Clr=r(RAt,"AutoModelForImageClassification"),RAt.forEach(t),$Qe.forEach(t),wze=i(f),Vo=n(f,"DIV",{class:!0});var pl=s(Vo);T(V8.$$.fragment,pl),wlr=i(pl),Ed=n(pl,"P",{});var Ate=s(Ed);Alr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),IQ=n(Ate,"A",{href:!0});var PAt=s(IQ);Llr=r(PAt,"from_pretrained()"),PAt.forEach(t),ylr=r(Ate," class method or the "),NQ=n(Ate,"A",{href:!0});var BAt=s(NQ);xlr=r(BAt,"from_config()"),BAt.forEach(t),$lr=r(Ate,` class
method.`),Ate.forEach(t),klr=i(pl),X8=n(pl,"P",{});var kQe=s(X8);Slr=r(kQe,"This class cannot be instantiated directly using "),N2e=n(kQe,"CODE",{});var IAt=s(N2e);Rlr=r(IAt,"__init__()"),IAt.forEach(t),Plr=r(kQe," (throws an error)."),kQe.forEach(t),Blr=i(pl),vt=n(pl,"DIV",{class:!0});var GA=s(vt);T(z8.$$.fragment,GA),Ilr=i(GA),q2e=n(GA,"P",{});var NAt=s(q2e);Nlr=r(NAt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),NAt.forEach(t),qlr=i(GA),Cd=n(GA,"P",{});var Lte=s(Cd);jlr=r(Lte,`Note:
Loading a model from its configuration file does `),j2e=n(Lte,"STRONG",{});var qAt=s(j2e);Dlr=r(qAt,"not"),qAt.forEach(t),Glr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=n(Lte,"A",{href:!0});var jAt=s(qQ);Olr=r(jAt,"from_pretrained()"),jAt.forEach(t),Vlr=r(Lte," to load the model weights."),Lte.forEach(t),Xlr=i(GA),T(wF.$$.fragment,GA),GA.forEach(t),zlr=i(pl),io=n(pl,"DIV",{class:!0});var va=s(io);T(W8.$$.fragment,va),Wlr=i(va),D2e=n(va,"P",{});var DAt=s(D2e);Qlr=r(DAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),DAt.forEach(t),Hlr=i(va),Qa=n(va,"P",{});var OA=s(Qa);Ulr=r(OA,"The model class to instantiate is selected based on the "),G2e=n(OA,"CODE",{});var GAt=s(G2e);Jlr=r(GAt,"model_type"),GAt.forEach(t),Ylr=r(OA,` property of the config object (either
passed as an argument or loaded from `),O2e=n(OA,"CODE",{});var OAt=s(O2e);Klr=r(OAt,"pretrained_model_name_or_path"),OAt.forEach(t),Zlr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=n(OA,"CODE",{});var VAt=s(V2e);eir=r(VAt,"pretrained_model_name_or_path"),VAt.forEach(t),oir=r(OA,":"),OA.forEach(t),rir=i(va),ve=n(va,"UL",{});var Te=s(ve);AF=n(Te,"LI",{});var xNe=s(AF);X2e=n(xNe,"STRONG",{});var XAt=s(X2e);tir=r(XAt,"beit"),XAt.forEach(t),air=r(xNe," \u2014 "),jQ=n(xNe,"A",{href:!0});var zAt=s(jQ);nir=r(zAt,"BeitForImageClassification"),zAt.forEach(t),sir=r(xNe," (BEiT model)"),xNe.forEach(t),lir=i(Te),LF=n(Te,"LI",{});var $Ne=s(LF);z2e=n($Ne,"STRONG",{});var WAt=s(z2e);iir=r(WAt,"convnext"),WAt.forEach(t),dir=r($Ne," \u2014 "),DQ=n($Ne,"A",{href:!0});var QAt=s(DQ);cir=r(QAt,"ConvNextForImageClassification"),QAt.forEach(t),fir=r($Ne," (ConvNeXT model)"),$Ne.forEach(t),mir=i(Te),yF=n(Te,"LI",{});var kNe=s(yF);W2e=n(kNe,"STRONG",{});var HAt=s(W2e);gir=r(HAt,"cvt"),HAt.forEach(t),hir=r(kNe," \u2014 "),GQ=n(kNe,"A",{href:!0});var UAt=s(GQ);pir=r(UAt,"CvtForImageClassification"),UAt.forEach(t),_ir=r(kNe," (CvT model)"),kNe.forEach(t),uir=i(Te),xF=n(Te,"LI",{});var SNe=s(xF);Q2e=n(SNe,"STRONG",{});var JAt=s(Q2e);bir=r(JAt,"data2vec-vision"),JAt.forEach(t),vir=r(SNe," \u2014 "),OQ=n(SNe,"A",{href:!0});var YAt=s(OQ);Fir=r(YAt,"Data2VecVisionForImageClassification"),YAt.forEach(t),Tir=r(SNe," (Data2VecVision model)"),SNe.forEach(t),Mir=i(Te),Js=n(Te,"LI",{});var XS=s(Js);H2e=n(XS,"STRONG",{});var KAt=s(H2e);Eir=r(KAt,"deit"),KAt.forEach(t),Cir=r(XS," \u2014 "),VQ=n(XS,"A",{href:!0});var ZAt=s(VQ);wir=r(ZAt,"DeiTForImageClassification"),ZAt.forEach(t),Air=r(XS," or "),XQ=n(XS,"A",{href:!0});var eLt=s(XQ);Lir=r(eLt,"DeiTForImageClassificationWithTeacher"),eLt.forEach(t),yir=r(XS," (DeiT model)"),XS.forEach(t),xir=i(Te),$F=n(Te,"LI",{});var RNe=s($F);U2e=n(RNe,"STRONG",{});var oLt=s(U2e);$ir=r(oLt,"imagegpt"),oLt.forEach(t),kir=r(RNe," \u2014 "),zQ=n(RNe,"A",{href:!0});var rLt=s(zQ);Sir=r(rLt,"ImageGPTForImageClassification"),rLt.forEach(t),Rir=r(RNe," (ImageGPT model)"),RNe.forEach(t),Pir=i(Te),Ys=n(Te,"LI",{});var zS=s(Ys);J2e=n(zS,"STRONG",{});var tLt=s(J2e);Bir=r(tLt,"levit"),tLt.forEach(t),Iir=r(zS," \u2014 "),WQ=n(zS,"A",{href:!0});var aLt=s(WQ);Nir=r(aLt,"LevitForImageClassification"),aLt.forEach(t),qir=r(zS," or "),QQ=n(zS,"A",{href:!0});var nLt=s(QQ);jir=r(nLt,"LevitForImageClassificationWithTeacher"),nLt.forEach(t),Dir=r(zS," (LeViT model)"),zS.forEach(t),Gir=i(Te),kF=n(Te,"LI",{});var PNe=s(kF);Y2e=n(PNe,"STRONG",{});var sLt=s(Y2e);Oir=r(sLt,"mobilevit"),sLt.forEach(t),Vir=r(PNe," \u2014 "),HQ=n(PNe,"A",{href:!0});var lLt=s(HQ);Xir=r(lLt,"MobileViTForImageClassification"),lLt.forEach(t),zir=r(PNe," (MobileViT model)"),PNe.forEach(t),Wir=i(Te),Ft=n(Te,"LI",{});var Bf=s(Ft);K2e=n(Bf,"STRONG",{});var iLt=s(K2e);Qir=r(iLt,"perceiver"),iLt.forEach(t),Hir=r(Bf," \u2014 "),UQ=n(Bf,"A",{href:!0});var dLt=s(UQ);Uir=r(dLt,"PerceiverForImageClassificationLearned"),dLt.forEach(t),Jir=r(Bf," or "),JQ=n(Bf,"A",{href:!0});var cLt=s(JQ);Yir=r(cLt,"PerceiverForImageClassificationFourier"),cLt.forEach(t),Kir=r(Bf," or "),YQ=n(Bf,"A",{href:!0});var fLt=s(YQ);Zir=r(fLt,"PerceiverForImageClassificationConvProcessing"),fLt.forEach(t),edr=r(Bf," (Perceiver model)"),Bf.forEach(t),odr=i(Te),SF=n(Te,"LI",{});var BNe=s(SF);Z2e=n(BNe,"STRONG",{});var mLt=s(Z2e);rdr=r(mLt,"poolformer"),mLt.forEach(t),tdr=r(BNe," \u2014 "),KQ=n(BNe,"A",{href:!0});var gLt=s(KQ);adr=r(gLt,"PoolFormerForImageClassification"),gLt.forEach(t),ndr=r(BNe," (PoolFormer model)"),BNe.forEach(t),sdr=i(Te),RF=n(Te,"LI",{});var INe=s(RF);ebe=n(INe,"STRONG",{});var hLt=s(ebe);ldr=r(hLt,"regnet"),hLt.forEach(t),idr=r(INe," \u2014 "),ZQ=n(INe,"A",{href:!0});var pLt=s(ZQ);ddr=r(pLt,"RegNetForImageClassification"),pLt.forEach(t),cdr=r(INe," (RegNet model)"),INe.forEach(t),fdr=i(Te),PF=n(Te,"LI",{});var NNe=s(PF);obe=n(NNe,"STRONG",{});var _Lt=s(obe);mdr=r(_Lt,"resnet"),_Lt.forEach(t),gdr=r(NNe," \u2014 "),eH=n(NNe,"A",{href:!0});var uLt=s(eH);hdr=r(uLt,"ResNetForImageClassification"),uLt.forEach(t),pdr=r(NNe," (ResNet model)"),NNe.forEach(t),_dr=i(Te),BF=n(Te,"LI",{});var qNe=s(BF);rbe=n(qNe,"STRONG",{});var bLt=s(rbe);udr=r(bLt,"segformer"),bLt.forEach(t),bdr=r(qNe," \u2014 "),oH=n(qNe,"A",{href:!0});var vLt=s(oH);vdr=r(vLt,"SegformerForImageClassification"),vLt.forEach(t),Fdr=r(qNe," (SegFormer model)"),qNe.forEach(t),Tdr=i(Te),IF=n(Te,"LI",{});var jNe=s(IF);tbe=n(jNe,"STRONG",{});var FLt=s(tbe);Mdr=r(FLt,"swin"),FLt.forEach(t),Edr=r(jNe," \u2014 "),rH=n(jNe,"A",{href:!0});var TLt=s(rH);Cdr=r(TLt,"SwinForImageClassification"),TLt.forEach(t),wdr=r(jNe," (Swin Transformer model)"),jNe.forEach(t),Adr=i(Te),NF=n(Te,"LI",{});var DNe=s(NF);abe=n(DNe,"STRONG",{});var MLt=s(abe);Ldr=r(MLt,"van"),MLt.forEach(t),ydr=r(DNe," \u2014 "),tH=n(DNe,"A",{href:!0});var ELt=s(tH);xdr=r(ELt,"VanForImageClassification"),ELt.forEach(t),$dr=r(DNe," (VAN model)"),DNe.forEach(t),kdr=i(Te),qF=n(Te,"LI",{});var GNe=s(qF);nbe=n(GNe,"STRONG",{});var CLt=s(nbe);Sdr=r(CLt,"vit"),CLt.forEach(t),Rdr=r(GNe," \u2014 "),aH=n(GNe,"A",{href:!0});var wLt=s(aH);Pdr=r(wLt,"ViTForImageClassification"),wLt.forEach(t),Bdr=r(GNe," (ViT model)"),GNe.forEach(t),Te.forEach(t),Idr=i(va),jF=n(va,"P",{});var ONe=s(jF);Ndr=r(ONe,"The model is set in evaluation mode by default using "),sbe=n(ONe,"CODE",{});var ALt=s(sbe);qdr=r(ALt,"model.eval()"),ALt.forEach(t),jdr=r(ONe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lbe=n(ONe,"CODE",{});var LLt=s(lbe);Ddr=r(LLt,"model.train()"),LLt.forEach(t),ONe.forEach(t),Gdr=i(va),T(DF.$$.fragment,va),va.forEach(t),pl.forEach(t),Aze=i(f),wd=n(f,"H2",{class:!0});var SQe=s(wd);GF=n(SQe,"A",{id:!0,class:!0,href:!0});var yLt=s(GF);ibe=n(yLt,"SPAN",{});var xLt=s(ibe);T(Q8.$$.fragment,xLt),xLt.forEach(t),yLt.forEach(t),Odr=i(SQe),dbe=n(SQe,"SPAN",{});var $Lt=s(dbe);Vdr=r($Lt,"AutoModelForVision2Seq"),$Lt.forEach(t),SQe.forEach(t),Lze=i(f),Xo=n(f,"DIV",{class:!0});var _l=s(Xo);T(H8.$$.fragment,_l),Xdr=i(_l),Ad=n(_l,"P",{});var yte=s(Ad);zdr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nH=n(yte,"A",{href:!0});var kLt=s(nH);Wdr=r(kLt,"from_pretrained()"),kLt.forEach(t),Qdr=r(yte," class method or the "),sH=n(yte,"A",{href:!0});var SLt=s(sH);Hdr=r(SLt,"from_config()"),SLt.forEach(t),Udr=r(yte,` class
method.`),yte.forEach(t),Jdr=i(_l),U8=n(_l,"P",{});var RQe=s(U8);Ydr=r(RQe,"This class cannot be instantiated directly using "),cbe=n(RQe,"CODE",{});var RLt=s(cbe);Kdr=r(RLt,"__init__()"),RLt.forEach(t),Zdr=r(RQe," (throws an error)."),RQe.forEach(t),ecr=i(_l),Tt=n(_l,"DIV",{class:!0});var VA=s(Tt);T(J8.$$.fragment,VA),ocr=i(VA),fbe=n(VA,"P",{});var PLt=s(fbe);rcr=r(PLt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),PLt.forEach(t),tcr=i(VA),Ld=n(VA,"P",{});var xte=s(Ld);acr=r(xte,`Note:
Loading a model from its configuration file does `),mbe=n(xte,"STRONG",{});var BLt=s(mbe);ncr=r(BLt,"not"),BLt.forEach(t),scr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(xte,"A",{href:!0});var ILt=s(lH);lcr=r(ILt,"from_pretrained()"),ILt.forEach(t),icr=r(xte," to load the model weights."),xte.forEach(t),dcr=i(VA),T(OF.$$.fragment,VA),VA.forEach(t),ccr=i(_l),co=n(_l,"DIV",{class:!0});var Fa=s(co);T(Y8.$$.fragment,Fa),fcr=i(Fa),gbe=n(Fa,"P",{});var NLt=s(gbe);mcr=r(NLt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NLt.forEach(t),gcr=i(Fa),Ha=n(Fa,"P",{});var XA=s(Ha);hcr=r(XA,"The model class to instantiate is selected based on the "),hbe=n(XA,"CODE",{});var qLt=s(hbe);pcr=r(qLt,"model_type"),qLt.forEach(t),_cr=r(XA,` property of the config object (either
passed as an argument or loaded from `),pbe=n(XA,"CODE",{});var jLt=s(pbe);ucr=r(jLt,"pretrained_model_name_or_path"),jLt.forEach(t),bcr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=n(XA,"CODE",{});var DLt=s(_be);vcr=r(DLt,"pretrained_model_name_or_path"),DLt.forEach(t),Fcr=r(XA,":"),XA.forEach(t),Tcr=i(Fa),ube=n(Fa,"UL",{});var GLt=s(ube);VF=n(GLt,"LI",{});var VNe=s(VF);bbe=n(VNe,"STRONG",{});var OLt=s(bbe);Mcr=r(OLt,"vision-encoder-decoder"),OLt.forEach(t),Ecr=r(VNe," \u2014 "),iH=n(VNe,"A",{href:!0});var VLt=s(iH);Ccr=r(VLt,"VisionEncoderDecoderModel"),VLt.forEach(t),wcr=r(VNe," (Vision Encoder decoder model)"),VNe.forEach(t),GLt.forEach(t),Acr=i(Fa),XF=n(Fa,"P",{});var XNe=s(XF);Lcr=r(XNe,"The model is set in evaluation mode by default using "),vbe=n(XNe,"CODE",{});var XLt=s(vbe);ycr=r(XLt,"model.eval()"),XLt.forEach(t),xcr=r(XNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fbe=n(XNe,"CODE",{});var zLt=s(Fbe);$cr=r(zLt,"model.train()"),zLt.forEach(t),XNe.forEach(t),kcr=i(Fa),T(zF.$$.fragment,Fa),Fa.forEach(t),_l.forEach(t),yze=i(f),yd=n(f,"H2",{class:!0});var PQe=s(yd);WF=n(PQe,"A",{id:!0,class:!0,href:!0});var WLt=s(WF);Tbe=n(WLt,"SPAN",{});var QLt=s(Tbe);T(K8.$$.fragment,QLt),QLt.forEach(t),WLt.forEach(t),Scr=i(PQe),Mbe=n(PQe,"SPAN",{});var HLt=s(Mbe);Rcr=r(HLt,"AutoModelForVisualQuestionAnswering"),HLt.forEach(t),PQe.forEach(t),xze=i(f),zo=n(f,"DIV",{class:!0});var ul=s(zo);T(Z8.$$.fragment,ul),Pcr=i(ul),xd=n(ul,"P",{});var $te=s(xd);Bcr=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),dH=n($te,"A",{href:!0});var ULt=s(dH);Icr=r(ULt,"from_pretrained()"),ULt.forEach(t),Ncr=r($te," class method or the "),cH=n($te,"A",{href:!0});var JLt=s(cH);qcr=r(JLt,"from_config()"),JLt.forEach(t),jcr=r($te,` class
method.`),$te.forEach(t),Dcr=i(ul),e9=n(ul,"P",{});var BQe=s(e9);Gcr=r(BQe,"This class cannot be instantiated directly using "),Ebe=n(BQe,"CODE",{});var YLt=s(Ebe);Ocr=r(YLt,"__init__()"),YLt.forEach(t),Vcr=r(BQe," (throws an error)."),BQe.forEach(t),Xcr=i(ul),Mt=n(ul,"DIV",{class:!0});var zA=s(Mt);T(o9.$$.fragment,zA),zcr=i(zA),Cbe=n(zA,"P",{});var KLt=s(Cbe);Wcr=r(KLt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),KLt.forEach(t),Qcr=i(zA),$d=n(zA,"P",{});var kte=s($d);Hcr=r(kte,`Note:
Loading a model from its configuration file does `),wbe=n(kte,"STRONG",{});var ZLt=s(wbe);Ucr=r(ZLt,"not"),ZLt.forEach(t),Jcr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(kte,"A",{href:!0});var eyt=s(fH);Ycr=r(eyt,"from_pretrained()"),eyt.forEach(t),Kcr=r(kte," to load the model weights."),kte.forEach(t),Zcr=i(zA),T(QF.$$.fragment,zA),zA.forEach(t),efr=i(ul),fo=n(ul,"DIV",{class:!0});var Ta=s(fo);T(r9.$$.fragment,Ta),ofr=i(Ta),Abe=n(Ta,"P",{});var oyt=s(Abe);rfr=r(oyt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),oyt.forEach(t),tfr=i(Ta),Ua=n(Ta,"P",{});var WA=s(Ua);afr=r(WA,"The model class to instantiate is selected based on the "),Lbe=n(WA,"CODE",{});var ryt=s(Lbe);nfr=r(ryt,"model_type"),ryt.forEach(t),sfr=r(WA,` property of the config object (either
passed as an argument or loaded from `),ybe=n(WA,"CODE",{});var tyt=s(ybe);lfr=r(tyt,"pretrained_model_name_or_path"),tyt.forEach(t),ifr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(WA,"CODE",{});var ayt=s(xbe);dfr=r(ayt,"pretrained_model_name_or_path"),ayt.forEach(t),cfr=r(WA,":"),WA.forEach(t),ffr=i(Ta),$be=n(Ta,"UL",{});var nyt=s($be);HF=n(nyt,"LI",{});var zNe=s(HF);kbe=n(zNe,"STRONG",{});var syt=s(kbe);mfr=r(syt,"vilt"),syt.forEach(t),gfr=r(zNe," \u2014 "),mH=n(zNe,"A",{href:!0});var lyt=s(mH);hfr=r(lyt,"ViltForQuestionAnswering"),lyt.forEach(t),pfr=r(zNe," (ViLT model)"),zNe.forEach(t),nyt.forEach(t),_fr=i(Ta),UF=n(Ta,"P",{});var WNe=s(UF);ufr=r(WNe,"The model is set in evaluation mode by default using "),Sbe=n(WNe,"CODE",{});var iyt=s(Sbe);bfr=r(iyt,"model.eval()"),iyt.forEach(t),vfr=r(WNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rbe=n(WNe,"CODE",{});var dyt=s(Rbe);Ffr=r(dyt,"model.train()"),dyt.forEach(t),WNe.forEach(t),Tfr=i(Ta),T(JF.$$.fragment,Ta),Ta.forEach(t),ul.forEach(t),$ze=i(f),kd=n(f,"H2",{class:!0});var IQe=s(kd);YF=n(IQe,"A",{id:!0,class:!0,href:!0});var cyt=s(YF);Pbe=n(cyt,"SPAN",{});var fyt=s(Pbe);T(t9.$$.fragment,fyt),fyt.forEach(t),cyt.forEach(t),Mfr=i(IQe),Bbe=n(IQe,"SPAN",{});var myt=s(Bbe);Efr=r(myt,"AutoModelForAudioClassification"),myt.forEach(t),IQe.forEach(t),kze=i(f),Wo=n(f,"DIV",{class:!0});var bl=s(Wo);T(a9.$$.fragment,bl),Cfr=i(bl),Sd=n(bl,"P",{});var Ste=s(Sd);wfr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),gH=n(Ste,"A",{href:!0});var gyt=s(gH);Afr=r(gyt,"from_pretrained()"),gyt.forEach(t),Lfr=r(Ste," class method or the "),hH=n(Ste,"A",{href:!0});var hyt=s(hH);yfr=r(hyt,"from_config()"),hyt.forEach(t),xfr=r(Ste,` class
method.`),Ste.forEach(t),$fr=i(bl),n9=n(bl,"P",{});var NQe=s(n9);kfr=r(NQe,"This class cannot be instantiated directly using "),Ibe=n(NQe,"CODE",{});var pyt=s(Ibe);Sfr=r(pyt,"__init__()"),pyt.forEach(t),Rfr=r(NQe," (throws an error)."),NQe.forEach(t),Pfr=i(bl),Et=n(bl,"DIV",{class:!0});var QA=s(Et);T(s9.$$.fragment,QA),Bfr=i(QA),Nbe=n(QA,"P",{});var _yt=s(Nbe);Ifr=r(_yt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),_yt.forEach(t),Nfr=i(QA),Rd=n(QA,"P",{});var Rte=s(Rd);qfr=r(Rte,`Note:
Loading a model from its configuration file does `),qbe=n(Rte,"STRONG",{});var uyt=s(qbe);jfr=r(uyt,"not"),uyt.forEach(t),Dfr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(Rte,"A",{href:!0});var byt=s(pH);Gfr=r(byt,"from_pretrained()"),byt.forEach(t),Ofr=r(Rte," to load the model weights."),Rte.forEach(t),Vfr=i(QA),T(KF.$$.fragment,QA),QA.forEach(t),Xfr=i(bl),mo=n(bl,"DIV",{class:!0});var Ma=s(mo);T(l9.$$.fragment,Ma),zfr=i(Ma),jbe=n(Ma,"P",{});var vyt=s(jbe);Wfr=r(vyt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),vyt.forEach(t),Qfr=i(Ma),Ja=n(Ma,"P",{});var HA=s(Ja);Hfr=r(HA,"The model class to instantiate is selected based on the "),Dbe=n(HA,"CODE",{});var Fyt=s(Dbe);Ufr=r(Fyt,"model_type"),Fyt.forEach(t),Jfr=r(HA,` property of the config object (either
passed as an argument or loaded from `),Gbe=n(HA,"CODE",{});var Tyt=s(Gbe);Yfr=r(Tyt,"pretrained_model_name_or_path"),Tyt.forEach(t),Kfr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=n(HA,"CODE",{});var Myt=s(Obe);Zfr=r(Myt,"pretrained_model_name_or_path"),Myt.forEach(t),emr=r(HA,":"),HA.forEach(t),omr=i(Ma),Pe=n(Ma,"UL",{});var We=s(Pe);ZF=n(We,"LI",{});var QNe=s(ZF);Vbe=n(QNe,"STRONG",{});var Eyt=s(Vbe);rmr=r(Eyt,"data2vec-audio"),Eyt.forEach(t),tmr=r(QNe," \u2014 "),_H=n(QNe,"A",{href:!0});var Cyt=s(_H);amr=r(Cyt,"Data2VecAudioForSequenceClassification"),Cyt.forEach(t),nmr=r(QNe," (Data2VecAudio model)"),QNe.forEach(t),smr=i(We),e6=n(We,"LI",{});var HNe=s(e6);Xbe=n(HNe,"STRONG",{});var wyt=s(Xbe);lmr=r(wyt,"hubert"),wyt.forEach(t),imr=r(HNe," \u2014 "),uH=n(HNe,"A",{href:!0});var Ayt=s(uH);dmr=r(Ayt,"HubertForSequenceClassification"),Ayt.forEach(t),cmr=r(HNe," (Hubert model)"),HNe.forEach(t),fmr=i(We),o6=n(We,"LI",{});var UNe=s(o6);zbe=n(UNe,"STRONG",{});var Lyt=s(zbe);mmr=r(Lyt,"sew"),Lyt.forEach(t),gmr=r(UNe," \u2014 "),bH=n(UNe,"A",{href:!0});var yyt=s(bH);hmr=r(yyt,"SEWForSequenceClassification"),yyt.forEach(t),pmr=r(UNe," (SEW model)"),UNe.forEach(t),_mr=i(We),r6=n(We,"LI",{});var JNe=s(r6);Wbe=n(JNe,"STRONG",{});var xyt=s(Wbe);umr=r(xyt,"sew-d"),xyt.forEach(t),bmr=r(JNe," \u2014 "),vH=n(JNe,"A",{href:!0});var $yt=s(vH);vmr=r($yt,"SEWDForSequenceClassification"),$yt.forEach(t),Fmr=r(JNe," (SEW-D model)"),JNe.forEach(t),Tmr=i(We),t6=n(We,"LI",{});var YNe=s(t6);Qbe=n(YNe,"STRONG",{});var kyt=s(Qbe);Mmr=r(kyt,"unispeech"),kyt.forEach(t),Emr=r(YNe," \u2014 "),FH=n(YNe,"A",{href:!0});var Syt=s(FH);Cmr=r(Syt,"UniSpeechForSequenceClassification"),Syt.forEach(t),wmr=r(YNe," (UniSpeech model)"),YNe.forEach(t),Amr=i(We),a6=n(We,"LI",{});var KNe=s(a6);Hbe=n(KNe,"STRONG",{});var Ryt=s(Hbe);Lmr=r(Ryt,"unispeech-sat"),Ryt.forEach(t),ymr=r(KNe," \u2014 "),TH=n(KNe,"A",{href:!0});var Pyt=s(TH);xmr=r(Pyt,"UniSpeechSatForSequenceClassification"),Pyt.forEach(t),$mr=r(KNe," (UniSpeechSat model)"),KNe.forEach(t),kmr=i(We),n6=n(We,"LI",{});var ZNe=s(n6);Ube=n(ZNe,"STRONG",{});var Byt=s(Ube);Smr=r(Byt,"wav2vec2"),Byt.forEach(t),Rmr=r(ZNe," \u2014 "),MH=n(ZNe,"A",{href:!0});var Iyt=s(MH);Pmr=r(Iyt,"Wav2Vec2ForSequenceClassification"),Iyt.forEach(t),Bmr=r(ZNe," (Wav2Vec2 model)"),ZNe.forEach(t),Imr=i(We),s6=n(We,"LI",{});var eqe=s(s6);Jbe=n(eqe,"STRONG",{});var Nyt=s(Jbe);Nmr=r(Nyt,"wav2vec2-conformer"),Nyt.forEach(t),qmr=r(eqe," \u2014 "),EH=n(eqe,"A",{href:!0});var qyt=s(EH);jmr=r(qyt,"Wav2Vec2ConformerForSequenceClassification"),qyt.forEach(t),Dmr=r(eqe," (Wav2Vec2-Conformer model)"),eqe.forEach(t),Gmr=i(We),l6=n(We,"LI",{});var oqe=s(l6);Ybe=n(oqe,"STRONG",{});var jyt=s(Ybe);Omr=r(jyt,"wavlm"),jyt.forEach(t),Vmr=r(oqe," \u2014 "),CH=n(oqe,"A",{href:!0});var Dyt=s(CH);Xmr=r(Dyt,"WavLMForSequenceClassification"),Dyt.forEach(t),zmr=r(oqe," (WavLM model)"),oqe.forEach(t),We.forEach(t),Wmr=i(Ma),i6=n(Ma,"P",{});var rqe=s(i6);Qmr=r(rqe,"The model is set in evaluation mode by default using "),Kbe=n(rqe,"CODE",{});var Gyt=s(Kbe);Hmr=r(Gyt,"model.eval()"),Gyt.forEach(t),Umr=r(rqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zbe=n(rqe,"CODE",{});var Oyt=s(Zbe);Jmr=r(Oyt,"model.train()"),Oyt.forEach(t),rqe.forEach(t),Ymr=i(Ma),T(d6.$$.fragment,Ma),Ma.forEach(t),bl.forEach(t),Sze=i(f),Pd=n(f,"H2",{class:!0});var qQe=s(Pd);c6=n(qQe,"A",{id:!0,class:!0,href:!0});var Vyt=s(c6);eve=n(Vyt,"SPAN",{});var Xyt=s(eve);T(i9.$$.fragment,Xyt),Xyt.forEach(t),Vyt.forEach(t),Kmr=i(qQe),ove=n(qQe,"SPAN",{});var zyt=s(ove);Zmr=r(zyt,"AutoModelForAudioFrameClassification"),zyt.forEach(t),qQe.forEach(t),Rze=i(f),Qo=n(f,"DIV",{class:!0});var vl=s(Qo);T(d9.$$.fragment,vl),egr=i(vl),Bd=n(vl,"P",{});var Pte=s(Bd);ogr=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),wH=n(Pte,"A",{href:!0});var Wyt=s(wH);rgr=r(Wyt,"from_pretrained()"),Wyt.forEach(t),tgr=r(Pte," class method or the "),AH=n(Pte,"A",{href:!0});var Qyt=s(AH);agr=r(Qyt,"from_config()"),Qyt.forEach(t),ngr=r(Pte,` class
method.`),Pte.forEach(t),sgr=i(vl),c9=n(vl,"P",{});var jQe=s(c9);lgr=r(jQe,"This class cannot be instantiated directly using "),rve=n(jQe,"CODE",{});var Hyt=s(rve);igr=r(Hyt,"__init__()"),Hyt.forEach(t),dgr=r(jQe," (throws an error)."),jQe.forEach(t),cgr=i(vl),Ct=n(vl,"DIV",{class:!0});var UA=s(Ct);T(f9.$$.fragment,UA),fgr=i(UA),tve=n(UA,"P",{});var Uyt=s(tve);mgr=r(Uyt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Uyt.forEach(t),ggr=i(UA),Id=n(UA,"P",{});var Bte=s(Id);hgr=r(Bte,`Note:
Loading a model from its configuration file does `),ave=n(Bte,"STRONG",{});var Jyt=s(ave);pgr=r(Jyt,"not"),Jyt.forEach(t),_gr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=n(Bte,"A",{href:!0});var Yyt=s(LH);ugr=r(Yyt,"from_pretrained()"),Yyt.forEach(t),bgr=r(Bte," to load the model weights."),Bte.forEach(t),vgr=i(UA),T(f6.$$.fragment,UA),UA.forEach(t),Fgr=i(vl),go=n(vl,"DIV",{class:!0});var Ea=s(go);T(m9.$$.fragment,Ea),Tgr=i(Ea),nve=n(Ea,"P",{});var Kyt=s(nve);Mgr=r(Kyt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Kyt.forEach(t),Egr=i(Ea),Ya=n(Ea,"P",{});var JA=s(Ya);Cgr=r(JA,"The model class to instantiate is selected based on the "),sve=n(JA,"CODE",{});var Zyt=s(sve);wgr=r(Zyt,"model_type"),Zyt.forEach(t),Agr=r(JA,` property of the config object (either
passed as an argument or loaded from `),lve=n(JA,"CODE",{});var e8t=s(lve);Lgr=r(e8t,"pretrained_model_name_or_path"),e8t.forEach(t),ygr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=n(JA,"CODE",{});var o8t=s(ive);xgr=r(o8t,"pretrained_model_name_or_path"),o8t.forEach(t),$gr=r(JA,":"),JA.forEach(t),kgr=i(Ea),rt=n(Ea,"UL",{});var Fl=s(rt);m6=n(Fl,"LI",{});var tqe=s(m6);dve=n(tqe,"STRONG",{});var r8t=s(dve);Sgr=r(r8t,"data2vec-audio"),r8t.forEach(t),Rgr=r(tqe," \u2014 "),yH=n(tqe,"A",{href:!0});var t8t=s(yH);Pgr=r(t8t,"Data2VecAudioForAudioFrameClassification"),t8t.forEach(t),Bgr=r(tqe," (Data2VecAudio model)"),tqe.forEach(t),Igr=i(Fl),g6=n(Fl,"LI",{});var aqe=s(g6);cve=n(aqe,"STRONG",{});var a8t=s(cve);Ngr=r(a8t,"unispeech-sat"),a8t.forEach(t),qgr=r(aqe," \u2014 "),xH=n(aqe,"A",{href:!0});var n8t=s(xH);jgr=r(n8t,"UniSpeechSatForAudioFrameClassification"),n8t.forEach(t),Dgr=r(aqe," (UniSpeechSat model)"),aqe.forEach(t),Ggr=i(Fl),h6=n(Fl,"LI",{});var nqe=s(h6);fve=n(nqe,"STRONG",{});var s8t=s(fve);Ogr=r(s8t,"wav2vec2"),s8t.forEach(t),Vgr=r(nqe," \u2014 "),$H=n(nqe,"A",{href:!0});var l8t=s($H);Xgr=r(l8t,"Wav2Vec2ForAudioFrameClassification"),l8t.forEach(t),zgr=r(nqe," (Wav2Vec2 model)"),nqe.forEach(t),Wgr=i(Fl),p6=n(Fl,"LI",{});var sqe=s(p6);mve=n(sqe,"STRONG",{});var i8t=s(mve);Qgr=r(i8t,"wav2vec2-conformer"),i8t.forEach(t),Hgr=r(sqe," \u2014 "),kH=n(sqe,"A",{href:!0});var d8t=s(kH);Ugr=r(d8t,"Wav2Vec2ConformerForAudioFrameClassification"),d8t.forEach(t),Jgr=r(sqe," (Wav2Vec2-Conformer model)"),sqe.forEach(t),Ygr=i(Fl),_6=n(Fl,"LI",{});var lqe=s(_6);gve=n(lqe,"STRONG",{});var c8t=s(gve);Kgr=r(c8t,"wavlm"),c8t.forEach(t),Zgr=r(lqe," \u2014 "),SH=n(lqe,"A",{href:!0});var f8t=s(SH);ehr=r(f8t,"WavLMForAudioFrameClassification"),f8t.forEach(t),ohr=r(lqe," (WavLM model)"),lqe.forEach(t),Fl.forEach(t),rhr=i(Ea),u6=n(Ea,"P",{});var iqe=s(u6);thr=r(iqe,"The model is set in evaluation mode by default using "),hve=n(iqe,"CODE",{});var m8t=s(hve);ahr=r(m8t,"model.eval()"),m8t.forEach(t),nhr=r(iqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pve=n(iqe,"CODE",{});var g8t=s(pve);shr=r(g8t,"model.train()"),g8t.forEach(t),iqe.forEach(t),lhr=i(Ea),T(b6.$$.fragment,Ea),Ea.forEach(t),vl.forEach(t),Pze=i(f),Nd=n(f,"H2",{class:!0});var DQe=s(Nd);v6=n(DQe,"A",{id:!0,class:!0,href:!0});var h8t=s(v6);_ve=n(h8t,"SPAN",{});var p8t=s(_ve);T(g9.$$.fragment,p8t),p8t.forEach(t),h8t.forEach(t),ihr=i(DQe),uve=n(DQe,"SPAN",{});var _8t=s(uve);dhr=r(_8t,"AutoModelForCTC"),_8t.forEach(t),DQe.forEach(t),Bze=i(f),Ho=n(f,"DIV",{class:!0});var Tl=s(Ho);T(h9.$$.fragment,Tl),chr=i(Tl),qd=n(Tl,"P",{});var Ite=s(qd);fhr=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),RH=n(Ite,"A",{href:!0});var u8t=s(RH);mhr=r(u8t,"from_pretrained()"),u8t.forEach(t),ghr=r(Ite," class method or the "),PH=n(Ite,"A",{href:!0});var b8t=s(PH);hhr=r(b8t,"from_config()"),b8t.forEach(t),phr=r(Ite,` class
method.`),Ite.forEach(t),_hr=i(Tl),p9=n(Tl,"P",{});var GQe=s(p9);uhr=r(GQe,"This class cannot be instantiated directly using "),bve=n(GQe,"CODE",{});var v8t=s(bve);bhr=r(v8t,"__init__()"),v8t.forEach(t),vhr=r(GQe," (throws an error)."),GQe.forEach(t),Fhr=i(Tl),wt=n(Tl,"DIV",{class:!0});var YA=s(wt);T(_9.$$.fragment,YA),Thr=i(YA),vve=n(YA,"P",{});var F8t=s(vve);Mhr=r(F8t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),F8t.forEach(t),Ehr=i(YA),jd=n(YA,"P",{});var Nte=s(jd);Chr=r(Nte,`Note:
Loading a model from its configuration file does `),Fve=n(Nte,"STRONG",{});var T8t=s(Fve);whr=r(T8t,"not"),T8t.forEach(t),Ahr=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(Nte,"A",{href:!0});var M8t=s(BH);Lhr=r(M8t,"from_pretrained()"),M8t.forEach(t),yhr=r(Nte," to load the model weights."),Nte.forEach(t),xhr=i(YA),T(F6.$$.fragment,YA),YA.forEach(t),$hr=i(Tl),ho=n(Tl,"DIV",{class:!0});var Ca=s(ho);T(u9.$$.fragment,Ca),khr=i(Ca),Tve=n(Ca,"P",{});var E8t=s(Tve);Shr=r(E8t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),E8t.forEach(t),Rhr=i(Ca),Ka=n(Ca,"P",{});var KA=s(Ka);Phr=r(KA,"The model class to instantiate is selected based on the "),Mve=n(KA,"CODE",{});var C8t=s(Mve);Bhr=r(C8t,"model_type"),C8t.forEach(t),Ihr=r(KA,` property of the config object (either
passed as an argument or loaded from `),Eve=n(KA,"CODE",{});var w8t=s(Eve);Nhr=r(w8t,"pretrained_model_name_or_path"),w8t.forEach(t),qhr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=n(KA,"CODE",{});var A8t=s(Cve);jhr=r(A8t,"pretrained_model_name_or_path"),A8t.forEach(t),Dhr=r(KA,":"),KA.forEach(t),Ghr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);T6=n(Be,"LI",{});var dqe=s(T6);wve=n(dqe,"STRONG",{});var L8t=s(wve);Ohr=r(L8t,"data2vec-audio"),L8t.forEach(t),Vhr=r(dqe," \u2014 "),IH=n(dqe,"A",{href:!0});var y8t=s(IH);Xhr=r(y8t,"Data2VecAudioForCTC"),y8t.forEach(t),zhr=r(dqe," (Data2VecAudio model)"),dqe.forEach(t),Whr=i(Be),M6=n(Be,"LI",{});var cqe=s(M6);Ave=n(cqe,"STRONG",{});var x8t=s(Ave);Qhr=r(x8t,"hubert"),x8t.forEach(t),Hhr=r(cqe," \u2014 "),NH=n(cqe,"A",{href:!0});var $8t=s(NH);Uhr=r($8t,"HubertForCTC"),$8t.forEach(t),Jhr=r(cqe," (Hubert model)"),cqe.forEach(t),Yhr=i(Be),E6=n(Be,"LI",{});var fqe=s(E6);Lve=n(fqe,"STRONG",{});var k8t=s(Lve);Khr=r(k8t,"mctct"),k8t.forEach(t),Zhr=r(fqe," \u2014 "),qH=n(fqe,"A",{href:!0});var S8t=s(qH);epr=r(S8t,"MCTCTForCTC"),S8t.forEach(t),opr=r(fqe," (M-CTC-T model)"),fqe.forEach(t),rpr=i(Be),C6=n(Be,"LI",{});var mqe=s(C6);yve=n(mqe,"STRONG",{});var R8t=s(yve);tpr=r(R8t,"sew"),R8t.forEach(t),apr=r(mqe," \u2014 "),jH=n(mqe,"A",{href:!0});var P8t=s(jH);npr=r(P8t,"SEWForCTC"),P8t.forEach(t),spr=r(mqe," (SEW model)"),mqe.forEach(t),lpr=i(Be),w6=n(Be,"LI",{});var gqe=s(w6);xve=n(gqe,"STRONG",{});var B8t=s(xve);ipr=r(B8t,"sew-d"),B8t.forEach(t),dpr=r(gqe," \u2014 "),DH=n(gqe,"A",{href:!0});var I8t=s(DH);cpr=r(I8t,"SEWDForCTC"),I8t.forEach(t),fpr=r(gqe," (SEW-D model)"),gqe.forEach(t),mpr=i(Be),A6=n(Be,"LI",{});var hqe=s(A6);$ve=n(hqe,"STRONG",{});var N8t=s($ve);gpr=r(N8t,"unispeech"),N8t.forEach(t),hpr=r(hqe," \u2014 "),GH=n(hqe,"A",{href:!0});var q8t=s(GH);ppr=r(q8t,"UniSpeechForCTC"),q8t.forEach(t),_pr=r(hqe," (UniSpeech model)"),hqe.forEach(t),upr=i(Be),L6=n(Be,"LI",{});var pqe=s(L6);kve=n(pqe,"STRONG",{});var j8t=s(kve);bpr=r(j8t,"unispeech-sat"),j8t.forEach(t),vpr=r(pqe," \u2014 "),OH=n(pqe,"A",{href:!0});var D8t=s(OH);Fpr=r(D8t,"UniSpeechSatForCTC"),D8t.forEach(t),Tpr=r(pqe," (UniSpeechSat model)"),pqe.forEach(t),Mpr=i(Be),y6=n(Be,"LI",{});var _qe=s(y6);Sve=n(_qe,"STRONG",{});var G8t=s(Sve);Epr=r(G8t,"wav2vec2"),G8t.forEach(t),Cpr=r(_qe," \u2014 "),VH=n(_qe,"A",{href:!0});var O8t=s(VH);wpr=r(O8t,"Wav2Vec2ForCTC"),O8t.forEach(t),Apr=r(_qe," (Wav2Vec2 model)"),_qe.forEach(t),Lpr=i(Be),x6=n(Be,"LI",{});var uqe=s(x6);Rve=n(uqe,"STRONG",{});var V8t=s(Rve);ypr=r(V8t,"wav2vec2-conformer"),V8t.forEach(t),xpr=r(uqe," \u2014 "),XH=n(uqe,"A",{href:!0});var X8t=s(XH);$pr=r(X8t,"Wav2Vec2ConformerForCTC"),X8t.forEach(t),kpr=r(uqe," (Wav2Vec2-Conformer model)"),uqe.forEach(t),Spr=i(Be),$6=n(Be,"LI",{});var bqe=s($6);Pve=n(bqe,"STRONG",{});var z8t=s(Pve);Rpr=r(z8t,"wavlm"),z8t.forEach(t),Ppr=r(bqe," \u2014 "),zH=n(bqe,"A",{href:!0});var W8t=s(zH);Bpr=r(W8t,"WavLMForCTC"),W8t.forEach(t),Ipr=r(bqe," (WavLM model)"),bqe.forEach(t),Be.forEach(t),Npr=i(Ca),k6=n(Ca,"P",{});var vqe=s(k6);qpr=r(vqe,"The model is set in evaluation mode by default using "),Bve=n(vqe,"CODE",{});var Q8t=s(Bve);jpr=r(Q8t,"model.eval()"),Q8t.forEach(t),Dpr=r(vqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ive=n(vqe,"CODE",{});var H8t=s(Ive);Gpr=r(H8t,"model.train()"),H8t.forEach(t),vqe.forEach(t),Opr=i(Ca),T(S6.$$.fragment,Ca),Ca.forEach(t),Tl.forEach(t),Ize=i(f),Dd=n(f,"H2",{class:!0});var OQe=s(Dd);R6=n(OQe,"A",{id:!0,class:!0,href:!0});var U8t=s(R6);Nve=n(U8t,"SPAN",{});var J8t=s(Nve);T(b9.$$.fragment,J8t),J8t.forEach(t),U8t.forEach(t),Vpr=i(OQe),qve=n(OQe,"SPAN",{});var Y8t=s(qve);Xpr=r(Y8t,"AutoModelForSpeechSeq2Seq"),Y8t.forEach(t),OQe.forEach(t),Nze=i(f),Uo=n(f,"DIV",{class:!0});var Ml=s(Uo);T(v9.$$.fragment,Ml),zpr=i(Ml),Gd=n(Ml,"P",{});var qte=s(Gd);Wpr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),WH=n(qte,"A",{href:!0});var K8t=s(WH);Qpr=r(K8t,"from_pretrained()"),K8t.forEach(t),Hpr=r(qte," class method or the "),QH=n(qte,"A",{href:!0});var Z8t=s(QH);Upr=r(Z8t,"from_config()"),Z8t.forEach(t),Jpr=r(qte,` class
method.`),qte.forEach(t),Ypr=i(Ml),F9=n(Ml,"P",{});var VQe=s(F9);Kpr=r(VQe,"This class cannot be instantiated directly using "),jve=n(VQe,"CODE",{});var e9t=s(jve);Zpr=r(e9t,"__init__()"),e9t.forEach(t),e_r=r(VQe," (throws an error)."),VQe.forEach(t),o_r=i(Ml),At=n(Ml,"DIV",{class:!0});var ZA=s(At);T(T9.$$.fragment,ZA),r_r=i(ZA),Dve=n(ZA,"P",{});var o9t=s(Dve);t_r=r(o9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),o9t.forEach(t),a_r=i(ZA),Od=n(ZA,"P",{});var jte=s(Od);n_r=r(jte,`Note:
Loading a model from its configuration file does `),Gve=n(jte,"STRONG",{});var r9t=s(Gve);s_r=r(r9t,"not"),r9t.forEach(t),l_r=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(jte,"A",{href:!0});var t9t=s(HH);i_r=r(t9t,"from_pretrained()"),t9t.forEach(t),d_r=r(jte," to load the model weights."),jte.forEach(t),c_r=i(ZA),T(P6.$$.fragment,ZA),ZA.forEach(t),f_r=i(Ml),po=n(Ml,"DIV",{class:!0});var wa=s(po);T(M9.$$.fragment,wa),m_r=i(wa),Ove=n(wa,"P",{});var a9t=s(Ove);g_r=r(a9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),a9t.forEach(t),h_r=i(wa),Za=n(wa,"P",{});var eL=s(Za);p_r=r(eL,"The model class to instantiate is selected based on the "),Vve=n(eL,"CODE",{});var n9t=s(Vve);__r=r(n9t,"model_type"),n9t.forEach(t),u_r=r(eL,` property of the config object (either
passed as an argument or loaded from `),Xve=n(eL,"CODE",{});var s9t=s(Xve);b_r=r(s9t,"pretrained_model_name_or_path"),s9t.forEach(t),v_r=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zve=n(eL,"CODE",{});var l9t=s(zve);F_r=r(l9t,"pretrained_model_name_or_path"),l9t.forEach(t),T_r=r(eL,":"),eL.forEach(t),M_r=i(wa),E9=n(wa,"UL",{});var XQe=s(E9);B6=n(XQe,"LI",{});var Fqe=s(B6);Wve=n(Fqe,"STRONG",{});var i9t=s(Wve);E_r=r(i9t,"speech-encoder-decoder"),i9t.forEach(t),C_r=r(Fqe," \u2014 "),UH=n(Fqe,"A",{href:!0});var d9t=s(UH);w_r=r(d9t,"SpeechEncoderDecoderModel"),d9t.forEach(t),A_r=r(Fqe," (Speech Encoder decoder model)"),Fqe.forEach(t),L_r=i(XQe),I6=n(XQe,"LI",{});var Tqe=s(I6);Qve=n(Tqe,"STRONG",{});var c9t=s(Qve);y_r=r(c9t,"speech_to_text"),c9t.forEach(t),x_r=r(Tqe," \u2014 "),JH=n(Tqe,"A",{href:!0});var f9t=s(JH);$_r=r(f9t,"Speech2TextForConditionalGeneration"),f9t.forEach(t),k_r=r(Tqe," (Speech2Text model)"),Tqe.forEach(t),XQe.forEach(t),S_r=i(wa),N6=n(wa,"P",{});var Mqe=s(N6);R_r=r(Mqe,"The model is set in evaluation mode by default using "),Hve=n(Mqe,"CODE",{});var m9t=s(Hve);P_r=r(m9t,"model.eval()"),m9t.forEach(t),B_r=r(Mqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uve=n(Mqe,"CODE",{});var g9t=s(Uve);I_r=r(g9t,"model.train()"),g9t.forEach(t),Mqe.forEach(t),N_r=i(wa),T(q6.$$.fragment,wa),wa.forEach(t),Ml.forEach(t),qze=i(f),Vd=n(f,"H2",{class:!0});var zQe=s(Vd);j6=n(zQe,"A",{id:!0,class:!0,href:!0});var h9t=s(j6);Jve=n(h9t,"SPAN",{});var p9t=s(Jve);T(C9.$$.fragment,p9t),p9t.forEach(t),h9t.forEach(t),q_r=i(zQe),Yve=n(zQe,"SPAN",{});var _9t=s(Yve);j_r=r(_9t,"AutoModelForAudioXVector"),_9t.forEach(t),zQe.forEach(t),jze=i(f),Jo=n(f,"DIV",{class:!0});var El=s(Jo);T(w9.$$.fragment,El),D_r=i(El),Xd=n(El,"P",{});var Dte=s(Xd);G_r=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),YH=n(Dte,"A",{href:!0});var u9t=s(YH);O_r=r(u9t,"from_pretrained()"),u9t.forEach(t),V_r=r(Dte," class method or the "),KH=n(Dte,"A",{href:!0});var b9t=s(KH);X_r=r(b9t,"from_config()"),b9t.forEach(t),z_r=r(Dte,` class
method.`),Dte.forEach(t),W_r=i(El),A9=n(El,"P",{});var WQe=s(A9);Q_r=r(WQe,"This class cannot be instantiated directly using "),Kve=n(WQe,"CODE",{});var v9t=s(Kve);H_r=r(v9t,"__init__()"),v9t.forEach(t),U_r=r(WQe," (throws an error)."),WQe.forEach(t),J_r=i(El),Lt=n(El,"DIV",{class:!0});var oL=s(Lt);T(L9.$$.fragment,oL),Y_r=i(oL),Zve=n(oL,"P",{});var F9t=s(Zve);K_r=r(F9t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),F9t.forEach(t),Z_r=i(oL),zd=n(oL,"P",{});var Gte=s(zd);eur=r(Gte,`Note:
Loading a model from its configuration file does `),e0e=n(Gte,"STRONG",{});var T9t=s(e0e);our=r(T9t,"not"),T9t.forEach(t),rur=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=n(Gte,"A",{href:!0});var M9t=s(ZH);tur=r(M9t,"from_pretrained()"),M9t.forEach(t),aur=r(Gte," to load the model weights."),Gte.forEach(t),nur=i(oL),T(D6.$$.fragment,oL),oL.forEach(t),sur=i(El),_o=n(El,"DIV",{class:!0});var Aa=s(_o);T(y9.$$.fragment,Aa),lur=i(Aa),o0e=n(Aa,"P",{});var E9t=s(o0e);iur=r(E9t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),E9t.forEach(t),dur=i(Aa),en=n(Aa,"P",{});var rL=s(en);cur=r(rL,"The model class to instantiate is selected based on the "),r0e=n(rL,"CODE",{});var C9t=s(r0e);fur=r(C9t,"model_type"),C9t.forEach(t),mur=r(rL,` property of the config object (either
passed as an argument or loaded from `),t0e=n(rL,"CODE",{});var w9t=s(t0e);gur=r(w9t,"pretrained_model_name_or_path"),w9t.forEach(t),hur=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a0e=n(rL,"CODE",{});var A9t=s(a0e);pur=r(A9t,"pretrained_model_name_or_path"),A9t.forEach(t),_ur=r(rL,":"),rL.forEach(t),uur=i(Aa),tt=n(Aa,"UL",{});var Cl=s(tt);G6=n(Cl,"LI",{});var Eqe=s(G6);n0e=n(Eqe,"STRONG",{});var L9t=s(n0e);bur=r(L9t,"data2vec-audio"),L9t.forEach(t),vur=r(Eqe," \u2014 "),eU=n(Eqe,"A",{href:!0});var y9t=s(eU);Fur=r(y9t,"Data2VecAudioForXVector"),y9t.forEach(t),Tur=r(Eqe," (Data2VecAudio model)"),Eqe.forEach(t),Mur=i(Cl),O6=n(Cl,"LI",{});var Cqe=s(O6);s0e=n(Cqe,"STRONG",{});var x9t=s(s0e);Eur=r(x9t,"unispeech-sat"),x9t.forEach(t),Cur=r(Cqe," \u2014 "),oU=n(Cqe,"A",{href:!0});var $9t=s(oU);wur=r($9t,"UniSpeechSatForXVector"),$9t.forEach(t),Aur=r(Cqe," (UniSpeechSat model)"),Cqe.forEach(t),Lur=i(Cl),V6=n(Cl,"LI",{});var wqe=s(V6);l0e=n(wqe,"STRONG",{});var k9t=s(l0e);yur=r(k9t,"wav2vec2"),k9t.forEach(t),xur=r(wqe," \u2014 "),rU=n(wqe,"A",{href:!0});var S9t=s(rU);$ur=r(S9t,"Wav2Vec2ForXVector"),S9t.forEach(t),kur=r(wqe," (Wav2Vec2 model)"),wqe.forEach(t),Sur=i(Cl),X6=n(Cl,"LI",{});var Aqe=s(X6);i0e=n(Aqe,"STRONG",{});var R9t=s(i0e);Rur=r(R9t,"wav2vec2-conformer"),R9t.forEach(t),Pur=r(Aqe," \u2014 "),tU=n(Aqe,"A",{href:!0});var P9t=s(tU);Bur=r(P9t,"Wav2Vec2ConformerForXVector"),P9t.forEach(t),Iur=r(Aqe," (Wav2Vec2-Conformer model)"),Aqe.forEach(t),Nur=i(Cl),z6=n(Cl,"LI",{});var Lqe=s(z6);d0e=n(Lqe,"STRONG",{});var B9t=s(d0e);qur=r(B9t,"wavlm"),B9t.forEach(t),jur=r(Lqe," \u2014 "),aU=n(Lqe,"A",{href:!0});var I9t=s(aU);Dur=r(I9t,"WavLMForXVector"),I9t.forEach(t),Gur=r(Lqe," (WavLM model)"),Lqe.forEach(t),Cl.forEach(t),Our=i(Aa),W6=n(Aa,"P",{});var yqe=s(W6);Vur=r(yqe,"The model is set in evaluation mode by default using "),c0e=n(yqe,"CODE",{});var N9t=s(c0e);Xur=r(N9t,"model.eval()"),N9t.forEach(t),zur=r(yqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f0e=n(yqe,"CODE",{});var q9t=s(f0e);Wur=r(q9t,"model.train()"),q9t.forEach(t),yqe.forEach(t),Qur=i(Aa),T(Q6.$$.fragment,Aa),Aa.forEach(t),El.forEach(t),Dze=i(f),Wd=n(f,"H2",{class:!0});var QQe=s(Wd);H6=n(QQe,"A",{id:!0,class:!0,href:!0});var j9t=s(H6);m0e=n(j9t,"SPAN",{});var D9t=s(m0e);T(x9.$$.fragment,D9t),D9t.forEach(t),j9t.forEach(t),Hur=i(QQe),g0e=n(QQe,"SPAN",{});var G9t=s(g0e);Uur=r(G9t,"AutoModelForMaskedImageModeling"),G9t.forEach(t),QQe.forEach(t),Gze=i(f),Yo=n(f,"DIV",{class:!0});var wl=s(Yo);T($9.$$.fragment,wl),Jur=i(wl),Qd=n(wl,"P",{});var Ote=s(Qd);Yur=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),nU=n(Ote,"A",{href:!0});var O9t=s(nU);Kur=r(O9t,"from_pretrained()"),O9t.forEach(t),Zur=r(Ote," class method or the "),sU=n(Ote,"A",{href:!0});var V9t=s(sU);e1r=r(V9t,"from_config()"),V9t.forEach(t),o1r=r(Ote,` class
method.`),Ote.forEach(t),r1r=i(wl),k9=n(wl,"P",{});var HQe=s(k9);t1r=r(HQe,"This class cannot be instantiated directly using "),h0e=n(HQe,"CODE",{});var X9t=s(h0e);a1r=r(X9t,"__init__()"),X9t.forEach(t),n1r=r(HQe," (throws an error)."),HQe.forEach(t),s1r=i(wl),yt=n(wl,"DIV",{class:!0});var tL=s(yt);T(S9.$$.fragment,tL),l1r=i(tL),p0e=n(tL,"P",{});var z9t=s(p0e);i1r=r(z9t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),z9t.forEach(t),d1r=i(tL),Hd=n(tL,"P",{});var Vte=s(Hd);c1r=r(Vte,`Note:
Loading a model from its configuration file does `),_0e=n(Vte,"STRONG",{});var W9t=s(_0e);f1r=r(W9t,"not"),W9t.forEach(t),m1r=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(Vte,"A",{href:!0});var Q9t=s(lU);g1r=r(Q9t,"from_pretrained()"),Q9t.forEach(t),h1r=r(Vte," to load the model weights."),Vte.forEach(t),p1r=i(tL),T(U6.$$.fragment,tL),tL.forEach(t),_1r=i(wl),uo=n(wl,"DIV",{class:!0});var La=s(uo);T(R9.$$.fragment,La),u1r=i(La),u0e=n(La,"P",{});var H9t=s(u0e);b1r=r(H9t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),H9t.forEach(t),v1r=i(La),on=n(La,"P",{});var aL=s(on);F1r=r(aL,"The model class to instantiate is selected based on the "),b0e=n(aL,"CODE",{});var U9t=s(b0e);T1r=r(U9t,"model_type"),U9t.forEach(t),M1r=r(aL,` property of the config object (either
passed as an argument or loaded from `),v0e=n(aL,"CODE",{});var J9t=s(v0e);E1r=r(J9t,"pretrained_model_name_or_path"),J9t.forEach(t),C1r=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=n(aL,"CODE",{});var Y9t=s(F0e);w1r=r(Y9t,"pretrained_model_name_or_path"),Y9t.forEach(t),A1r=r(aL,":"),aL.forEach(t),L1r=i(La),Ud=n(La,"UL",{});var Xte=s(Ud);J6=n(Xte,"LI",{});var xqe=s(J6);T0e=n(xqe,"STRONG",{});var K9t=s(T0e);y1r=r(K9t,"deit"),K9t.forEach(t),x1r=r(xqe," \u2014 "),iU=n(xqe,"A",{href:!0});var Z9t=s(iU);$1r=r(Z9t,"DeiTForMaskedImageModeling"),Z9t.forEach(t),k1r=r(xqe," (DeiT model)"),xqe.forEach(t),S1r=i(Xte),Y6=n(Xte,"LI",{});var $qe=s(Y6);M0e=n($qe,"STRONG",{});var ext=s(M0e);R1r=r(ext,"swin"),ext.forEach(t),P1r=r($qe," \u2014 "),dU=n($qe,"A",{href:!0});var oxt=s(dU);B1r=r(oxt,"SwinForMaskedImageModeling"),oxt.forEach(t),I1r=r($qe," (Swin Transformer model)"),$qe.forEach(t),N1r=i(Xte),K6=n(Xte,"LI",{});var kqe=s(K6);E0e=n(kqe,"STRONG",{});var rxt=s(E0e);q1r=r(rxt,"vit"),rxt.forEach(t),j1r=r(kqe," \u2014 "),cU=n(kqe,"A",{href:!0});var txt=s(cU);D1r=r(txt,"ViTForMaskedImageModeling"),txt.forEach(t),G1r=r(kqe," (ViT model)"),kqe.forEach(t),Xte.forEach(t),O1r=i(La),Z6=n(La,"P",{});var Sqe=s(Z6);V1r=r(Sqe,"The model is set in evaluation mode by default using "),C0e=n(Sqe,"CODE",{});var axt=s(C0e);X1r=r(axt,"model.eval()"),axt.forEach(t),z1r=r(Sqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w0e=n(Sqe,"CODE",{});var nxt=s(w0e);W1r=r(nxt,"model.train()"),nxt.forEach(t),Sqe.forEach(t),Q1r=i(La),T(eT.$$.fragment,La),La.forEach(t),wl.forEach(t),Oze=i(f),Jd=n(f,"H2",{class:!0});var UQe=s(Jd);oT=n(UQe,"A",{id:!0,class:!0,href:!0});var sxt=s(oT);A0e=n(sxt,"SPAN",{});var lxt=s(A0e);T(P9.$$.fragment,lxt),lxt.forEach(t),sxt.forEach(t),H1r=i(UQe),L0e=n(UQe,"SPAN",{});var ixt=s(L0e);U1r=r(ixt,"AutoModelForObjectDetection"),ixt.forEach(t),UQe.forEach(t),Vze=i(f),Ko=n(f,"DIV",{class:!0});var Al=s(Ko);T(B9.$$.fragment,Al),J1r=i(Al),Yd=n(Al,"P",{});var zte=s(Yd);Y1r=r(zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),fU=n(zte,"A",{href:!0});var dxt=s(fU);K1r=r(dxt,"from_pretrained()"),dxt.forEach(t),Z1r=r(zte," class method or the "),mU=n(zte,"A",{href:!0});var cxt=s(mU);e4r=r(cxt,"from_config()"),cxt.forEach(t),o4r=r(zte,` class
method.`),zte.forEach(t),r4r=i(Al),I9=n(Al,"P",{});var JQe=s(I9);t4r=r(JQe,"This class cannot be instantiated directly using "),y0e=n(JQe,"CODE",{});var fxt=s(y0e);a4r=r(fxt,"__init__()"),fxt.forEach(t),n4r=r(JQe," (throws an error)."),JQe.forEach(t),s4r=i(Al),xt=n(Al,"DIV",{class:!0});var nL=s(xt);T(N9.$$.fragment,nL),l4r=i(nL),x0e=n(nL,"P",{});var mxt=s(x0e);i4r=r(mxt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),mxt.forEach(t),d4r=i(nL),Kd=n(nL,"P",{});var Wte=s(Kd);c4r=r(Wte,`Note:
Loading a model from its configuration file does `),$0e=n(Wte,"STRONG",{});var gxt=s($0e);f4r=r(gxt,"not"),gxt.forEach(t),m4r=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(Wte,"A",{href:!0});var hxt=s(gU);g4r=r(hxt,"from_pretrained()"),hxt.forEach(t),h4r=r(Wte," to load the model weights."),Wte.forEach(t),p4r=i(nL),T(rT.$$.fragment,nL),nL.forEach(t),_4r=i(Al),bo=n(Al,"DIV",{class:!0});var ya=s(bo);T(q9.$$.fragment,ya),u4r=i(ya),k0e=n(ya,"P",{});var pxt=s(k0e);b4r=r(pxt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),pxt.forEach(t),v4r=i(ya),rn=n(ya,"P",{});var sL=s(rn);F4r=r(sL,"The model class to instantiate is selected based on the "),S0e=n(sL,"CODE",{});var _xt=s(S0e);T4r=r(_xt,"model_type"),_xt.forEach(t),M4r=r(sL,` property of the config object (either
passed as an argument or loaded from `),R0e=n(sL,"CODE",{});var uxt=s(R0e);E4r=r(uxt,"pretrained_model_name_or_path"),uxt.forEach(t),C4r=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P0e=n(sL,"CODE",{});var bxt=s(P0e);w4r=r(bxt,"pretrained_model_name_or_path"),bxt.forEach(t),A4r=r(sL,":"),sL.forEach(t),L4r=i(ya),j9=n(ya,"UL",{});var YQe=s(j9);tT=n(YQe,"LI",{});var Rqe=s(tT);B0e=n(Rqe,"STRONG",{});var vxt=s(B0e);y4r=r(vxt,"detr"),vxt.forEach(t),x4r=r(Rqe," \u2014 "),hU=n(Rqe,"A",{href:!0});var Fxt=s(hU);$4r=r(Fxt,"DetrForObjectDetection"),Fxt.forEach(t),k4r=r(Rqe," (DETR model)"),Rqe.forEach(t),S4r=i(YQe),aT=n(YQe,"LI",{});var Pqe=s(aT);I0e=n(Pqe,"STRONG",{});var Txt=s(I0e);R4r=r(Txt,"yolos"),Txt.forEach(t),P4r=r(Pqe," \u2014 "),pU=n(Pqe,"A",{href:!0});var Mxt=s(pU);B4r=r(Mxt,"YolosForObjectDetection"),Mxt.forEach(t),I4r=r(Pqe," (YOLOS model)"),Pqe.forEach(t),YQe.forEach(t),N4r=i(ya),nT=n(ya,"P",{});var Bqe=s(nT);q4r=r(Bqe,"The model is set in evaluation mode by default using "),N0e=n(Bqe,"CODE",{});var Ext=s(N0e);j4r=r(Ext,"model.eval()"),Ext.forEach(t),D4r=r(Bqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q0e=n(Bqe,"CODE",{});var Cxt=s(q0e);G4r=r(Cxt,"model.train()"),Cxt.forEach(t),Bqe.forEach(t),O4r=i(ya),T(sT.$$.fragment,ya),ya.forEach(t),Al.forEach(t),Xze=i(f),Zd=n(f,"H2",{class:!0});var KQe=s(Zd);lT=n(KQe,"A",{id:!0,class:!0,href:!0});var wxt=s(lT);j0e=n(wxt,"SPAN",{});var Axt=s(j0e);T(D9.$$.fragment,Axt),Axt.forEach(t),wxt.forEach(t),V4r=i(KQe),D0e=n(KQe,"SPAN",{});var Lxt=s(D0e);X4r=r(Lxt,"AutoModelForImageSegmentation"),Lxt.forEach(t),KQe.forEach(t),zze=i(f),Zo=n(f,"DIV",{class:!0});var Ll=s(Zo);T(G9.$$.fragment,Ll),z4r=i(Ll),ec=n(Ll,"P",{});var Qte=s(ec);W4r=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),_U=n(Qte,"A",{href:!0});var yxt=s(_U);Q4r=r(yxt,"from_pretrained()"),yxt.forEach(t),H4r=r(Qte," class method or the "),uU=n(Qte,"A",{href:!0});var xxt=s(uU);U4r=r(xxt,"from_config()"),xxt.forEach(t),J4r=r(Qte,` class
method.`),Qte.forEach(t),Y4r=i(Ll),O9=n(Ll,"P",{});var ZQe=s(O9);K4r=r(ZQe,"This class cannot be instantiated directly using "),G0e=n(ZQe,"CODE",{});var $xt=s(G0e);Z4r=r($xt,"__init__()"),$xt.forEach(t),e2r=r(ZQe," (throws an error)."),ZQe.forEach(t),o2r=i(Ll),$t=n(Ll,"DIV",{class:!0});var lL=s($t);T(V9.$$.fragment,lL),r2r=i(lL),O0e=n(lL,"P",{});var kxt=s(O0e);t2r=r(kxt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),kxt.forEach(t),a2r=i(lL),oc=n(lL,"P",{});var Hte=s(oc);n2r=r(Hte,`Note:
Loading a model from its configuration file does `),V0e=n(Hte,"STRONG",{});var Sxt=s(V0e);s2r=r(Sxt,"not"),Sxt.forEach(t),l2r=r(Hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=n(Hte,"A",{href:!0});var Rxt=s(bU);i2r=r(Rxt,"from_pretrained()"),Rxt.forEach(t),d2r=r(Hte," to load the model weights."),Hte.forEach(t),c2r=i(lL),T(iT.$$.fragment,lL),lL.forEach(t),f2r=i(Ll),vo=n(Ll,"DIV",{class:!0});var xa=s(vo);T(X9.$$.fragment,xa),m2r=i(xa),X0e=n(xa,"P",{});var Pxt=s(X0e);g2r=r(Pxt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Pxt.forEach(t),h2r=i(xa),tn=n(xa,"P",{});var iL=s(tn);p2r=r(iL,"The model class to instantiate is selected based on the "),z0e=n(iL,"CODE",{});var Bxt=s(z0e);_2r=r(Bxt,"model_type"),Bxt.forEach(t),u2r=r(iL,` property of the config object (either
passed as an argument or loaded from `),W0e=n(iL,"CODE",{});var Ixt=s(W0e);b2r=r(Ixt,"pretrained_model_name_or_path"),Ixt.forEach(t),v2r=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q0e=n(iL,"CODE",{});var Nxt=s(Q0e);F2r=r(Nxt,"pretrained_model_name_or_path"),Nxt.forEach(t),T2r=r(iL,":"),iL.forEach(t),M2r=i(xa),H0e=n(xa,"UL",{});var qxt=s(H0e);dT=n(qxt,"LI",{});var Iqe=s(dT);U0e=n(Iqe,"STRONG",{});var jxt=s(U0e);E2r=r(jxt,"detr"),jxt.forEach(t),C2r=r(Iqe," \u2014 "),vU=n(Iqe,"A",{href:!0});var Dxt=s(vU);w2r=r(Dxt,"DetrForSegmentation"),Dxt.forEach(t),A2r=r(Iqe," (DETR model)"),Iqe.forEach(t),qxt.forEach(t),L2r=i(xa),cT=n(xa,"P",{});var Nqe=s(cT);y2r=r(Nqe,"The model is set in evaluation mode by default using "),J0e=n(Nqe,"CODE",{});var Gxt=s(J0e);x2r=r(Gxt,"model.eval()"),Gxt.forEach(t),$2r=r(Nqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y0e=n(Nqe,"CODE",{});var Oxt=s(Y0e);k2r=r(Oxt,"model.train()"),Oxt.forEach(t),Nqe.forEach(t),S2r=i(xa),T(fT.$$.fragment,xa),xa.forEach(t),Ll.forEach(t),Wze=i(f),rc=n(f,"H2",{class:!0});var eHe=s(rc);mT=n(eHe,"A",{id:!0,class:!0,href:!0});var Vxt=s(mT);K0e=n(Vxt,"SPAN",{});var Xxt=s(K0e);T(z9.$$.fragment,Xxt),Xxt.forEach(t),Vxt.forEach(t),R2r=i(eHe),Z0e=n(eHe,"SPAN",{});var zxt=s(Z0e);P2r=r(zxt,"AutoModelForSemanticSegmentation"),zxt.forEach(t),eHe.forEach(t),Qze=i(f),er=n(f,"DIV",{class:!0});var yl=s(er);T(W9.$$.fragment,yl),B2r=i(yl),tc=n(yl,"P",{});var Ute=s(tc);I2r=r(Ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),FU=n(Ute,"A",{href:!0});var Wxt=s(FU);N2r=r(Wxt,"from_pretrained()"),Wxt.forEach(t),q2r=r(Ute," class method or the "),TU=n(Ute,"A",{href:!0});var Qxt=s(TU);j2r=r(Qxt,"from_config()"),Qxt.forEach(t),D2r=r(Ute,` class
method.`),Ute.forEach(t),G2r=i(yl),Q9=n(yl,"P",{});var oHe=s(Q9);O2r=r(oHe,"This class cannot be instantiated directly using "),eFe=n(oHe,"CODE",{});var Hxt=s(eFe);V2r=r(Hxt,"__init__()"),Hxt.forEach(t),X2r=r(oHe," (throws an error)."),oHe.forEach(t),z2r=i(yl),kt=n(yl,"DIV",{class:!0});var dL=s(kt);T(H9.$$.fragment,dL),W2r=i(dL),oFe=n(dL,"P",{});var Uxt=s(oFe);Q2r=r(Uxt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Uxt.forEach(t),H2r=i(dL),ac=n(dL,"P",{});var Jte=s(ac);U2r=r(Jte,`Note:
Loading a model from its configuration file does `),rFe=n(Jte,"STRONG",{});var Jxt=s(rFe);J2r=r(Jxt,"not"),Jxt.forEach(t),Y2r=r(Jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=n(Jte,"A",{href:!0});var Yxt=s(MU);K2r=r(Yxt,"from_pretrained()"),Yxt.forEach(t),Z2r=r(Jte," to load the model weights."),Jte.forEach(t),ebr=i(dL),T(gT.$$.fragment,dL),dL.forEach(t),obr=i(yl),Fo=n(yl,"DIV",{class:!0});var $a=s(Fo);T(U9.$$.fragment,$a),rbr=i($a),tFe=n($a,"P",{});var Kxt=s(tFe);tbr=r(Kxt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Kxt.forEach(t),abr=i($a),an=n($a,"P",{});var cL=s(an);nbr=r(cL,"The model class to instantiate is selected based on the "),aFe=n(cL,"CODE",{});var Zxt=s(aFe);sbr=r(Zxt,"model_type"),Zxt.forEach(t),lbr=r(cL,` property of the config object (either
passed as an argument or loaded from `),nFe=n(cL,"CODE",{});var e$t=s(nFe);ibr=r(e$t,"pretrained_model_name_or_path"),e$t.forEach(t),dbr=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sFe=n(cL,"CODE",{});var o$t=s(sFe);cbr=r(o$t,"pretrained_model_name_or_path"),o$t.forEach(t),fbr=r(cL,":"),cL.forEach(t),mbr=i($a),at=n($a,"UL",{});var xl=s(at);hT=n(xl,"LI",{});var qqe=s(hT);lFe=n(qqe,"STRONG",{});var r$t=s(lFe);gbr=r(r$t,"beit"),r$t.forEach(t),hbr=r(qqe," \u2014 "),EU=n(qqe,"A",{href:!0});var t$t=s(EU);pbr=r(t$t,"BeitForSemanticSegmentation"),t$t.forEach(t),_br=r(qqe," (BEiT model)"),qqe.forEach(t),ubr=i(xl),pT=n(xl,"LI",{});var jqe=s(pT);iFe=n(jqe,"STRONG",{});var a$t=s(iFe);bbr=r(a$t,"data2vec-vision"),a$t.forEach(t),vbr=r(jqe," \u2014 "),CU=n(jqe,"A",{href:!0});var n$t=s(CU);Fbr=r(n$t,"Data2VecVisionForSemanticSegmentation"),n$t.forEach(t),Tbr=r(jqe," (Data2VecVision model)"),jqe.forEach(t),Mbr=i(xl),_T=n(xl,"LI",{});var Dqe=s(_T);dFe=n(Dqe,"STRONG",{});var s$t=s(dFe);Ebr=r(s$t,"dpt"),s$t.forEach(t),Cbr=r(Dqe," \u2014 "),wU=n(Dqe,"A",{href:!0});var l$t=s(wU);wbr=r(l$t,"DPTForSemanticSegmentation"),l$t.forEach(t),Abr=r(Dqe," (DPT model)"),Dqe.forEach(t),Lbr=i(xl),uT=n(xl,"LI",{});var Gqe=s(uT);cFe=n(Gqe,"STRONG",{});var i$t=s(cFe);ybr=r(i$t,"mobilevit"),i$t.forEach(t),xbr=r(Gqe," \u2014 "),AU=n(Gqe,"A",{href:!0});var d$t=s(AU);$br=r(d$t,"MobileViTForSemanticSegmentation"),d$t.forEach(t),kbr=r(Gqe," (MobileViT model)"),Gqe.forEach(t),Sbr=i(xl),bT=n(xl,"LI",{});var Oqe=s(bT);fFe=n(Oqe,"STRONG",{});var c$t=s(fFe);Rbr=r(c$t,"segformer"),c$t.forEach(t),Pbr=r(Oqe," \u2014 "),LU=n(Oqe,"A",{href:!0});var f$t=s(LU);Bbr=r(f$t,"SegformerForSemanticSegmentation"),f$t.forEach(t),Ibr=r(Oqe," (SegFormer model)"),Oqe.forEach(t),xl.forEach(t),Nbr=i($a),vT=n($a,"P",{});var Vqe=s(vT);qbr=r(Vqe,"The model is set in evaluation mode by default using "),mFe=n(Vqe,"CODE",{});var m$t=s(mFe);jbr=r(m$t,"model.eval()"),m$t.forEach(t),Dbr=r(Vqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gFe=n(Vqe,"CODE",{});var g$t=s(gFe);Gbr=r(g$t,"model.train()"),g$t.forEach(t),Vqe.forEach(t),Obr=i($a),T(FT.$$.fragment,$a),$a.forEach(t),yl.forEach(t),Hze=i(f),nc=n(f,"H2",{class:!0});var rHe=s(nc);TT=n(rHe,"A",{id:!0,class:!0,href:!0});var h$t=s(TT);hFe=n(h$t,"SPAN",{});var p$t=s(hFe);T(J9.$$.fragment,p$t),p$t.forEach(t),h$t.forEach(t),Vbr=i(rHe),pFe=n(rHe,"SPAN",{});var _$t=s(pFe);Xbr=r(_$t,"AutoModelForInstanceSegmentation"),_$t.forEach(t),rHe.forEach(t),Uze=i(f),or=n(f,"DIV",{class:!0});var $l=s(or);T(Y9.$$.fragment,$l),zbr=i($l),sc=n($l,"P",{});var Yte=s(sc);Wbr=r(Yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),yU=n(Yte,"A",{href:!0});var u$t=s(yU);Qbr=r(u$t,"from_pretrained()"),u$t.forEach(t),Hbr=r(Yte," class method or the "),xU=n(Yte,"A",{href:!0});var b$t=s(xU);Ubr=r(b$t,"from_config()"),b$t.forEach(t),Jbr=r(Yte,` class
method.`),Yte.forEach(t),Ybr=i($l),K9=n($l,"P",{});var tHe=s(K9);Kbr=r(tHe,"This class cannot be instantiated directly using "),_Fe=n(tHe,"CODE",{});var v$t=s(_Fe);Zbr=r(v$t,"__init__()"),v$t.forEach(t),evr=r(tHe," (throws an error)."),tHe.forEach(t),ovr=i($l),St=n($l,"DIV",{class:!0});var fL=s(St);T(Z9.$$.fragment,fL),rvr=i(fL),uFe=n(fL,"P",{});var F$t=s(uFe);tvr=r(F$t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),F$t.forEach(t),avr=i(fL),lc=n(fL,"P",{});var Kte=s(lc);nvr=r(Kte,`Note:
Loading a model from its configuration file does `),bFe=n(Kte,"STRONG",{});var T$t=s(bFe);svr=r(T$t,"not"),T$t.forEach(t),lvr=r(Kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=n(Kte,"A",{href:!0});var M$t=s($U);ivr=r(M$t,"from_pretrained()"),M$t.forEach(t),dvr=r(Kte," to load the model weights."),Kte.forEach(t),cvr=i(fL),T(MT.$$.fragment,fL),fL.forEach(t),fvr=i($l),To=n($l,"DIV",{class:!0});var ka=s(To);T(ex.$$.fragment,ka),mvr=i(ka),vFe=n(ka,"P",{});var E$t=s(vFe);gvr=r(E$t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),E$t.forEach(t),hvr=i(ka),nn=n(ka,"P",{});var mL=s(nn);pvr=r(mL,"The model class to instantiate is selected based on the "),FFe=n(mL,"CODE",{});var C$t=s(FFe);_vr=r(C$t,"model_type"),C$t.forEach(t),uvr=r(mL,` property of the config object (either
passed as an argument or loaded from `),TFe=n(mL,"CODE",{});var w$t=s(TFe);bvr=r(w$t,"pretrained_model_name_or_path"),w$t.forEach(t),vvr=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=n(mL,"CODE",{});var A$t=s(MFe);Fvr=r(A$t,"pretrained_model_name_or_path"),A$t.forEach(t),Tvr=r(mL,":"),mL.forEach(t),Mvr=i(ka),EFe=n(ka,"UL",{});var L$t=s(EFe);ET=n(L$t,"LI",{});var Xqe=s(ET);CFe=n(Xqe,"STRONG",{});var y$t=s(CFe);Evr=r(y$t,"maskformer"),y$t.forEach(t),Cvr=r(Xqe," \u2014 "),kU=n(Xqe,"A",{href:!0});var x$t=s(kU);wvr=r(x$t,"MaskFormerForInstanceSegmentation"),x$t.forEach(t),Avr=r(Xqe," (MaskFormer model)"),Xqe.forEach(t),L$t.forEach(t),Lvr=i(ka),CT=n(ka,"P",{});var zqe=s(CT);yvr=r(zqe,"The model is set in evaluation mode by default using "),wFe=n(zqe,"CODE",{});var $$t=s(wFe);xvr=r($$t,"model.eval()"),$$t.forEach(t),$vr=r(zqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),AFe=n(zqe,"CODE",{});var k$t=s(AFe);kvr=r(k$t,"model.train()"),k$t.forEach(t),zqe.forEach(t),Svr=i(ka),T(wT.$$.fragment,ka),ka.forEach(t),$l.forEach(t),Jze=i(f),ic=n(f,"H2",{class:!0});var aHe=s(ic);AT=n(aHe,"A",{id:!0,class:!0,href:!0});var S$t=s(AT);LFe=n(S$t,"SPAN",{});var R$t=s(LFe);T(ox.$$.fragment,R$t),R$t.forEach(t),S$t.forEach(t),Rvr=i(aHe),yFe=n(aHe,"SPAN",{});var P$t=s(yFe);Pvr=r(P$t,"TFAutoModel"),P$t.forEach(t),aHe.forEach(t),Yze=i(f),rr=n(f,"DIV",{class:!0});var kl=s(rr);T(rx.$$.fragment,kl),Bvr=i(kl),dc=n(kl,"P",{});var Zte=s(dc);Ivr=r(Zte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SU=n(Zte,"A",{href:!0});var B$t=s(SU);Nvr=r(B$t,"from_pretrained()"),B$t.forEach(t),qvr=r(Zte," class method or the "),RU=n(Zte,"A",{href:!0});var I$t=s(RU);jvr=r(I$t,"from_config()"),I$t.forEach(t),Dvr=r(Zte,` class
method.`),Zte.forEach(t),Gvr=i(kl),tx=n(kl,"P",{});var nHe=s(tx);Ovr=r(nHe,"This class cannot be instantiated directly using "),xFe=n(nHe,"CODE",{});var N$t=s(xFe);Vvr=r(N$t,"__init__()"),N$t.forEach(t),Xvr=r(nHe," (throws an error)."),nHe.forEach(t),zvr=i(kl),Rt=n(kl,"DIV",{class:!0});var gL=s(Rt);T(ax.$$.fragment,gL),Wvr=i(gL),$Fe=n(gL,"P",{});var q$t=s($Fe);Qvr=r(q$t,"Instantiates one of the base model classes of the library from a configuration."),q$t.forEach(t),Hvr=i(gL),cc=n(gL,"P",{});var eae=s(cc);Uvr=r(eae,`Note:
Loading a model from its configuration file does `),kFe=n(eae,"STRONG",{});var j$t=s(kFe);Jvr=r(j$t,"not"),j$t.forEach(t),Yvr=r(eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=n(eae,"A",{href:!0});var D$t=s(PU);Kvr=r(D$t,"from_pretrained()"),D$t.forEach(t),Zvr=r(eae," to load the model weights."),eae.forEach(t),e0r=i(gL),T(LT.$$.fragment,gL),gL.forEach(t),o0r=i(kl),$r=n(kl,"DIV",{class:!0});var Sl=s($r);T(nx.$$.fragment,Sl),r0r=i(Sl),SFe=n(Sl,"P",{});var G$t=s(SFe);t0r=r(G$t,"Instantiate one of the base model classes of the library from a pretrained model."),G$t.forEach(t),a0r=i(Sl),sn=n(Sl,"P",{});var hL=s(sn);n0r=r(hL,"The model class to instantiate is selected based on the "),RFe=n(hL,"CODE",{});var O$t=s(RFe);s0r=r(O$t,"model_type"),O$t.forEach(t),l0r=r(hL,` property of the config object (either
passed as an argument or loaded from `),PFe=n(hL,"CODE",{});var V$t=s(PFe);i0r=r(V$t,"pretrained_model_name_or_path"),V$t.forEach(t),d0r=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(hL,"CODE",{});var X$t=s(BFe);c0r=r(X$t,"pretrained_model_name_or_path"),X$t.forEach(t),f0r=r(hL,":"),hL.forEach(t),m0r=i(Sl),I=n(Sl,"UL",{});var D=s(I);yT=n(D,"LI",{});var Wqe=s(yT);IFe=n(Wqe,"STRONG",{});var z$t=s(IFe);g0r=r(z$t,"albert"),z$t.forEach(t),h0r=r(Wqe," \u2014 "),BU=n(Wqe,"A",{href:!0});var W$t=s(BU);p0r=r(W$t,"TFAlbertModel"),W$t.forEach(t),_0r=r(Wqe," (ALBERT model)"),Wqe.forEach(t),u0r=i(D),xT=n(D,"LI",{});var Qqe=s(xT);NFe=n(Qqe,"STRONG",{});var Q$t=s(NFe);b0r=r(Q$t,"bart"),Q$t.forEach(t),v0r=r(Qqe," \u2014 "),IU=n(Qqe,"A",{href:!0});var H$t=s(IU);F0r=r(H$t,"TFBartModel"),H$t.forEach(t),T0r=r(Qqe," (BART model)"),Qqe.forEach(t),M0r=i(D),$T=n(D,"LI",{});var Hqe=s($T);qFe=n(Hqe,"STRONG",{});var U$t=s(qFe);E0r=r(U$t,"bert"),U$t.forEach(t),C0r=r(Hqe," \u2014 "),NU=n(Hqe,"A",{href:!0});var J$t=s(NU);w0r=r(J$t,"TFBertModel"),J$t.forEach(t),A0r=r(Hqe," (BERT model)"),Hqe.forEach(t),L0r=i(D),kT=n(D,"LI",{});var Uqe=s(kT);jFe=n(Uqe,"STRONG",{});var Y$t=s(jFe);y0r=r(Y$t,"blenderbot"),Y$t.forEach(t),x0r=r(Uqe," \u2014 "),qU=n(Uqe,"A",{href:!0});var K$t=s(qU);$0r=r(K$t,"TFBlenderbotModel"),K$t.forEach(t),k0r=r(Uqe," (Blenderbot model)"),Uqe.forEach(t),S0r=i(D),ST=n(D,"LI",{});var Jqe=s(ST);DFe=n(Jqe,"STRONG",{});var Z$t=s(DFe);R0r=r(Z$t,"blenderbot-small"),Z$t.forEach(t),P0r=r(Jqe," \u2014 "),jU=n(Jqe,"A",{href:!0});var ekt=s(jU);B0r=r(ekt,"TFBlenderbotSmallModel"),ekt.forEach(t),I0r=r(Jqe," (BlenderbotSmall model)"),Jqe.forEach(t),N0r=i(D),RT=n(D,"LI",{});var Yqe=s(RT);GFe=n(Yqe,"STRONG",{});var okt=s(GFe);q0r=r(okt,"camembert"),okt.forEach(t),j0r=r(Yqe," \u2014 "),DU=n(Yqe,"A",{href:!0});var rkt=s(DU);D0r=r(rkt,"TFCamembertModel"),rkt.forEach(t),G0r=r(Yqe," (CamemBERT model)"),Yqe.forEach(t),O0r=i(D),PT=n(D,"LI",{});var Kqe=s(PT);OFe=n(Kqe,"STRONG",{});var tkt=s(OFe);V0r=r(tkt,"clip"),tkt.forEach(t),X0r=r(Kqe," \u2014 "),GU=n(Kqe,"A",{href:!0});var akt=s(GU);z0r=r(akt,"TFCLIPModel"),akt.forEach(t),W0r=r(Kqe," (CLIP model)"),Kqe.forEach(t),Q0r=i(D),BT=n(D,"LI",{});var Zqe=s(BT);VFe=n(Zqe,"STRONG",{});var nkt=s(VFe);H0r=r(nkt,"convbert"),nkt.forEach(t),U0r=r(Zqe," \u2014 "),OU=n(Zqe,"A",{href:!0});var skt=s(OU);J0r=r(skt,"TFConvBertModel"),skt.forEach(t),Y0r=r(Zqe," (ConvBERT model)"),Zqe.forEach(t),K0r=i(D),IT=n(D,"LI",{});var eje=s(IT);XFe=n(eje,"STRONG",{});var lkt=s(XFe);Z0r=r(lkt,"convnext"),lkt.forEach(t),eFr=r(eje," \u2014 "),VU=n(eje,"A",{href:!0});var ikt=s(VU);oFr=r(ikt,"TFConvNextModel"),ikt.forEach(t),rFr=r(eje," (ConvNeXT model)"),eje.forEach(t),tFr=i(D),NT=n(D,"LI",{});var oje=s(NT);zFe=n(oje,"STRONG",{});var dkt=s(zFe);aFr=r(dkt,"ctrl"),dkt.forEach(t),nFr=r(oje," \u2014 "),XU=n(oje,"A",{href:!0});var ckt=s(XU);sFr=r(ckt,"TFCTRLModel"),ckt.forEach(t),lFr=r(oje," (CTRL model)"),oje.forEach(t),iFr=i(D),qT=n(D,"LI",{});var rje=s(qT);WFe=n(rje,"STRONG",{});var fkt=s(WFe);dFr=r(fkt,"data2vec-vision"),fkt.forEach(t),cFr=r(rje," \u2014 "),zU=n(rje,"A",{href:!0});var mkt=s(zU);fFr=r(mkt,"TFData2VecVisionModel"),mkt.forEach(t),mFr=r(rje," (Data2VecVision model)"),rje.forEach(t),gFr=i(D),jT=n(D,"LI",{});var tje=s(jT);QFe=n(tje,"STRONG",{});var gkt=s(QFe);hFr=r(gkt,"deberta"),gkt.forEach(t),pFr=r(tje," \u2014 "),WU=n(tje,"A",{href:!0});var hkt=s(WU);_Fr=r(hkt,"TFDebertaModel"),hkt.forEach(t),uFr=r(tje," (DeBERTa model)"),tje.forEach(t),bFr=i(D),DT=n(D,"LI",{});var aje=s(DT);HFe=n(aje,"STRONG",{});var pkt=s(HFe);vFr=r(pkt,"deberta-v2"),pkt.forEach(t),FFr=r(aje," \u2014 "),QU=n(aje,"A",{href:!0});var _kt=s(QU);TFr=r(_kt,"TFDebertaV2Model"),_kt.forEach(t),MFr=r(aje," (DeBERTa-v2 model)"),aje.forEach(t),EFr=i(D),GT=n(D,"LI",{});var nje=s(GT);UFe=n(nje,"STRONG",{});var ukt=s(UFe);CFr=r(ukt,"deit"),ukt.forEach(t),wFr=r(nje," \u2014 "),HU=n(nje,"A",{href:!0});var bkt=s(HU);AFr=r(bkt,"TFDeiTModel"),bkt.forEach(t),LFr=r(nje," (DeiT model)"),nje.forEach(t),yFr=i(D),OT=n(D,"LI",{});var sje=s(OT);JFe=n(sje,"STRONG",{});var vkt=s(JFe);xFr=r(vkt,"distilbert"),vkt.forEach(t),$Fr=r(sje," \u2014 "),UU=n(sje,"A",{href:!0});var Fkt=s(UU);kFr=r(Fkt,"TFDistilBertModel"),Fkt.forEach(t),SFr=r(sje," (DistilBERT model)"),sje.forEach(t),RFr=i(D),VT=n(D,"LI",{});var lje=s(VT);YFe=n(lje,"STRONG",{});var Tkt=s(YFe);PFr=r(Tkt,"dpr"),Tkt.forEach(t),BFr=r(lje," \u2014 "),JU=n(lje,"A",{href:!0});var Mkt=s(JU);IFr=r(Mkt,"TFDPRQuestionEncoder"),Mkt.forEach(t),NFr=r(lje," (DPR model)"),lje.forEach(t),qFr=i(D),XT=n(D,"LI",{});var ije=s(XT);KFe=n(ije,"STRONG",{});var Ekt=s(KFe);jFr=r(Ekt,"electra"),Ekt.forEach(t),DFr=r(ije," \u2014 "),YU=n(ije,"A",{href:!0});var Ckt=s(YU);GFr=r(Ckt,"TFElectraModel"),Ckt.forEach(t),OFr=r(ije," (ELECTRA model)"),ije.forEach(t),VFr=i(D),zT=n(D,"LI",{});var dje=s(zT);ZFe=n(dje,"STRONG",{});var wkt=s(ZFe);XFr=r(wkt,"flaubert"),wkt.forEach(t),zFr=r(dje," \u2014 "),KU=n(dje,"A",{href:!0});var Akt=s(KU);WFr=r(Akt,"TFFlaubertModel"),Akt.forEach(t),QFr=r(dje," (FlauBERT model)"),dje.forEach(t),HFr=i(D),Ks=n(D,"LI",{});var WS=s(Ks);e6e=n(WS,"STRONG",{});var Lkt=s(e6e);UFr=r(Lkt,"funnel"),Lkt.forEach(t),JFr=r(WS," \u2014 "),ZU=n(WS,"A",{href:!0});var ykt=s(ZU);YFr=r(ykt,"TFFunnelModel"),ykt.forEach(t),KFr=r(WS," or "),eJ=n(WS,"A",{href:!0});var xkt=s(eJ);ZFr=r(xkt,"TFFunnelBaseModel"),xkt.forEach(t),e6r=r(WS," (Funnel Transformer model)"),WS.forEach(t),o6r=i(D),WT=n(D,"LI",{});var cje=s(WT);o6e=n(cje,"STRONG",{});var $kt=s(o6e);r6r=r($kt,"gpt2"),$kt.forEach(t),t6r=r(cje," \u2014 "),oJ=n(cje,"A",{href:!0});var kkt=s(oJ);a6r=r(kkt,"TFGPT2Model"),kkt.forEach(t),n6r=r(cje," (OpenAI GPT-2 model)"),cje.forEach(t),s6r=i(D),QT=n(D,"LI",{});var fje=s(QT);r6e=n(fje,"STRONG",{});var Skt=s(r6e);l6r=r(Skt,"gptj"),Skt.forEach(t),i6r=r(fje," \u2014 "),rJ=n(fje,"A",{href:!0});var Rkt=s(rJ);d6r=r(Rkt,"TFGPTJModel"),Rkt.forEach(t),c6r=r(fje," (GPT-J model)"),fje.forEach(t),f6r=i(D),HT=n(D,"LI",{});var mje=s(HT);t6e=n(mje,"STRONG",{});var Pkt=s(t6e);m6r=r(Pkt,"hubert"),Pkt.forEach(t),g6r=r(mje," \u2014 "),tJ=n(mje,"A",{href:!0});var Bkt=s(tJ);h6r=r(Bkt,"TFHubertModel"),Bkt.forEach(t),p6r=r(mje," (Hubert model)"),mje.forEach(t),_6r=i(D),UT=n(D,"LI",{});var gje=s(UT);a6e=n(gje,"STRONG",{});var Ikt=s(a6e);u6r=r(Ikt,"layoutlm"),Ikt.forEach(t),b6r=r(gje," \u2014 "),aJ=n(gje,"A",{href:!0});var Nkt=s(aJ);v6r=r(Nkt,"TFLayoutLMModel"),Nkt.forEach(t),F6r=r(gje," (LayoutLM model)"),gje.forEach(t),T6r=i(D),JT=n(D,"LI",{});var hje=s(JT);n6e=n(hje,"STRONG",{});var qkt=s(n6e);M6r=r(qkt,"led"),qkt.forEach(t),E6r=r(hje," \u2014 "),nJ=n(hje,"A",{href:!0});var jkt=s(nJ);C6r=r(jkt,"TFLEDModel"),jkt.forEach(t),w6r=r(hje," (LED model)"),hje.forEach(t),A6r=i(D),YT=n(D,"LI",{});var pje=s(YT);s6e=n(pje,"STRONG",{});var Dkt=s(s6e);L6r=r(Dkt,"longformer"),Dkt.forEach(t),y6r=r(pje," \u2014 "),sJ=n(pje,"A",{href:!0});var Gkt=s(sJ);x6r=r(Gkt,"TFLongformerModel"),Gkt.forEach(t),$6r=r(pje," (Longformer model)"),pje.forEach(t),k6r=i(D),KT=n(D,"LI",{});var _je=s(KT);l6e=n(_je,"STRONG",{});var Okt=s(l6e);S6r=r(Okt,"lxmert"),Okt.forEach(t),R6r=r(_je," \u2014 "),lJ=n(_je,"A",{href:!0});var Vkt=s(lJ);P6r=r(Vkt,"TFLxmertModel"),Vkt.forEach(t),B6r=r(_je," (LXMERT model)"),_je.forEach(t),I6r=i(D),ZT=n(D,"LI",{});var uje=s(ZT);i6e=n(uje,"STRONG",{});var Xkt=s(i6e);N6r=r(Xkt,"marian"),Xkt.forEach(t),q6r=r(uje," \u2014 "),iJ=n(uje,"A",{href:!0});var zkt=s(iJ);j6r=r(zkt,"TFMarianModel"),zkt.forEach(t),D6r=r(uje," (Marian model)"),uje.forEach(t),G6r=i(D),e7=n(D,"LI",{});var bje=s(e7);d6e=n(bje,"STRONG",{});var Wkt=s(d6e);O6r=r(Wkt,"mbart"),Wkt.forEach(t),V6r=r(bje," \u2014 "),dJ=n(bje,"A",{href:!0});var Qkt=s(dJ);X6r=r(Qkt,"TFMBartModel"),Qkt.forEach(t),z6r=r(bje," (mBART model)"),bje.forEach(t),W6r=i(D),o7=n(D,"LI",{});var vje=s(o7);c6e=n(vje,"STRONG",{});var Hkt=s(c6e);Q6r=r(Hkt,"mobilebert"),Hkt.forEach(t),H6r=r(vje," \u2014 "),cJ=n(vje,"A",{href:!0});var Ukt=s(cJ);U6r=r(Ukt,"TFMobileBertModel"),Ukt.forEach(t),J6r=r(vje," (MobileBERT model)"),vje.forEach(t),Y6r=i(D),r7=n(D,"LI",{});var Fje=s(r7);f6e=n(Fje,"STRONG",{});var Jkt=s(f6e);K6r=r(Jkt,"mpnet"),Jkt.forEach(t),Z6r=r(Fje," \u2014 "),fJ=n(Fje,"A",{href:!0});var Ykt=s(fJ);eTr=r(Ykt,"TFMPNetModel"),Ykt.forEach(t),oTr=r(Fje," (MPNet model)"),Fje.forEach(t),rTr=i(D),t7=n(D,"LI",{});var Tje=s(t7);m6e=n(Tje,"STRONG",{});var Kkt=s(m6e);tTr=r(Kkt,"mt5"),Kkt.forEach(t),aTr=r(Tje," \u2014 "),mJ=n(Tje,"A",{href:!0});var Zkt=s(mJ);nTr=r(Zkt,"TFMT5Model"),Zkt.forEach(t),sTr=r(Tje," (MT5 model)"),Tje.forEach(t),lTr=i(D),a7=n(D,"LI",{});var Mje=s(a7);g6e=n(Mje,"STRONG",{});var eSt=s(g6e);iTr=r(eSt,"openai-gpt"),eSt.forEach(t),dTr=r(Mje," \u2014 "),gJ=n(Mje,"A",{href:!0});var oSt=s(gJ);cTr=r(oSt,"TFOpenAIGPTModel"),oSt.forEach(t),fTr=r(Mje," (OpenAI GPT model)"),Mje.forEach(t),mTr=i(D),n7=n(D,"LI",{});var Eje=s(n7);h6e=n(Eje,"STRONG",{});var rSt=s(h6e);gTr=r(rSt,"opt"),rSt.forEach(t),hTr=r(Eje," \u2014 "),hJ=n(Eje,"A",{href:!0});var tSt=s(hJ);pTr=r(tSt,"TFOPTModel"),tSt.forEach(t),_Tr=r(Eje," (OPT model)"),Eje.forEach(t),uTr=i(D),s7=n(D,"LI",{});var Cje=s(s7);p6e=n(Cje,"STRONG",{});var aSt=s(p6e);bTr=r(aSt,"pegasus"),aSt.forEach(t),vTr=r(Cje," \u2014 "),pJ=n(Cje,"A",{href:!0});var nSt=s(pJ);FTr=r(nSt,"TFPegasusModel"),nSt.forEach(t),TTr=r(Cje," (Pegasus model)"),Cje.forEach(t),MTr=i(D),l7=n(D,"LI",{});var wje=s(l7);_6e=n(wje,"STRONG",{});var sSt=s(_6e);ETr=r(sSt,"regnet"),sSt.forEach(t),CTr=r(wje," \u2014 "),_J=n(wje,"A",{href:!0});var lSt=s(_J);wTr=r(lSt,"TFRegNetModel"),lSt.forEach(t),ATr=r(wje," (RegNet model)"),wje.forEach(t),LTr=i(D),i7=n(D,"LI",{});var Aje=s(i7);u6e=n(Aje,"STRONG",{});var iSt=s(u6e);yTr=r(iSt,"rembert"),iSt.forEach(t),xTr=r(Aje," \u2014 "),uJ=n(Aje,"A",{href:!0});var dSt=s(uJ);$Tr=r(dSt,"TFRemBertModel"),dSt.forEach(t),kTr=r(Aje," (RemBERT model)"),Aje.forEach(t),STr=i(D),d7=n(D,"LI",{});var Lje=s(d7);b6e=n(Lje,"STRONG",{});var cSt=s(b6e);RTr=r(cSt,"resnet"),cSt.forEach(t),PTr=r(Lje," \u2014 "),bJ=n(Lje,"A",{href:!0});var fSt=s(bJ);BTr=r(fSt,"TFResNetModel"),fSt.forEach(t),ITr=r(Lje," (ResNet model)"),Lje.forEach(t),NTr=i(D),c7=n(D,"LI",{});var yje=s(c7);v6e=n(yje,"STRONG",{});var mSt=s(v6e);qTr=r(mSt,"roberta"),mSt.forEach(t),jTr=r(yje," \u2014 "),vJ=n(yje,"A",{href:!0});var gSt=s(vJ);DTr=r(gSt,"TFRobertaModel"),gSt.forEach(t),GTr=r(yje," (RoBERTa model)"),yje.forEach(t),OTr=i(D),f7=n(D,"LI",{});var xje=s(f7);F6e=n(xje,"STRONG",{});var hSt=s(F6e);VTr=r(hSt,"roformer"),hSt.forEach(t),XTr=r(xje," \u2014 "),FJ=n(xje,"A",{href:!0});var pSt=s(FJ);zTr=r(pSt,"TFRoFormerModel"),pSt.forEach(t),WTr=r(xje," (RoFormer model)"),xje.forEach(t),QTr=i(D),m7=n(D,"LI",{});var $je=s(m7);T6e=n($je,"STRONG",{});var _St=s(T6e);HTr=r(_St,"segformer"),_St.forEach(t),UTr=r($je," \u2014 "),TJ=n($je,"A",{href:!0});var uSt=s(TJ);JTr=r(uSt,"TFSegformerModel"),uSt.forEach(t),YTr=r($je," (SegFormer model)"),$je.forEach(t),KTr=i(D),g7=n(D,"LI",{});var kje=s(g7);M6e=n(kje,"STRONG",{});var bSt=s(M6e);ZTr=r(bSt,"speech_to_text"),bSt.forEach(t),e7r=r(kje," \u2014 "),MJ=n(kje,"A",{href:!0});var vSt=s(MJ);o7r=r(vSt,"TFSpeech2TextModel"),vSt.forEach(t),r7r=r(kje," (Speech2Text model)"),kje.forEach(t),t7r=i(D),h7=n(D,"LI",{});var Sje=s(h7);E6e=n(Sje,"STRONG",{});var FSt=s(E6e);a7r=r(FSt,"swin"),FSt.forEach(t),n7r=r(Sje," \u2014 "),EJ=n(Sje,"A",{href:!0});var TSt=s(EJ);s7r=r(TSt,"TFSwinModel"),TSt.forEach(t),l7r=r(Sje," (Swin Transformer model)"),Sje.forEach(t),i7r=i(D),p7=n(D,"LI",{});var Rje=s(p7);C6e=n(Rje,"STRONG",{});var MSt=s(C6e);d7r=r(MSt,"t5"),MSt.forEach(t),c7r=r(Rje," \u2014 "),CJ=n(Rje,"A",{href:!0});var ESt=s(CJ);f7r=r(ESt,"TFT5Model"),ESt.forEach(t),m7r=r(Rje," (T5 model)"),Rje.forEach(t),g7r=i(D),_7=n(D,"LI",{});var Pje=s(_7);w6e=n(Pje,"STRONG",{});var CSt=s(w6e);h7r=r(CSt,"tapas"),CSt.forEach(t),p7r=r(Pje," \u2014 "),wJ=n(Pje,"A",{href:!0});var wSt=s(wJ);_7r=r(wSt,"TFTapasModel"),wSt.forEach(t),u7r=r(Pje," (TAPAS model)"),Pje.forEach(t),b7r=i(D),u7=n(D,"LI",{});var Bje=s(u7);A6e=n(Bje,"STRONG",{});var ASt=s(A6e);v7r=r(ASt,"transfo-xl"),ASt.forEach(t),F7r=r(Bje," \u2014 "),AJ=n(Bje,"A",{href:!0});var LSt=s(AJ);T7r=r(LSt,"TFTransfoXLModel"),LSt.forEach(t),M7r=r(Bje," (Transformer-XL model)"),Bje.forEach(t),E7r=i(D),b7=n(D,"LI",{});var Ije=s(b7);L6e=n(Ije,"STRONG",{});var ySt=s(L6e);C7r=r(ySt,"vit"),ySt.forEach(t),w7r=r(Ije," \u2014 "),LJ=n(Ije,"A",{href:!0});var xSt=s(LJ);A7r=r(xSt,"TFViTModel"),xSt.forEach(t),L7r=r(Ije," (ViT model)"),Ije.forEach(t),y7r=i(D),v7=n(D,"LI",{});var Nje=s(v7);y6e=n(Nje,"STRONG",{});var $St=s(y6e);x7r=r($St,"vit_mae"),$St.forEach(t),$7r=r(Nje," \u2014 "),yJ=n(Nje,"A",{href:!0});var kSt=s(yJ);k7r=r(kSt,"TFViTMAEModel"),kSt.forEach(t),S7r=r(Nje," (ViTMAE model)"),Nje.forEach(t),R7r=i(D),F7=n(D,"LI",{});var qje=s(F7);x6e=n(qje,"STRONG",{});var SSt=s(x6e);P7r=r(SSt,"wav2vec2"),SSt.forEach(t),B7r=r(qje," \u2014 "),xJ=n(qje,"A",{href:!0});var RSt=s(xJ);I7r=r(RSt,"TFWav2Vec2Model"),RSt.forEach(t),N7r=r(qje," (Wav2Vec2 model)"),qje.forEach(t),q7r=i(D),T7=n(D,"LI",{});var jje=s(T7);$6e=n(jje,"STRONG",{});var PSt=s($6e);j7r=r(PSt,"xlm"),PSt.forEach(t),D7r=r(jje," \u2014 "),$J=n(jje,"A",{href:!0});var BSt=s($J);G7r=r(BSt,"TFXLMModel"),BSt.forEach(t),O7r=r(jje," (XLM model)"),jje.forEach(t),V7r=i(D),M7=n(D,"LI",{});var Dje=s(M7);k6e=n(Dje,"STRONG",{});var ISt=s(k6e);X7r=r(ISt,"xlm-roberta"),ISt.forEach(t),z7r=r(Dje," \u2014 "),kJ=n(Dje,"A",{href:!0});var NSt=s(kJ);W7r=r(NSt,"TFXLMRobertaModel"),NSt.forEach(t),Q7r=r(Dje," (XLM-RoBERTa model)"),Dje.forEach(t),H7r=i(D),E7=n(D,"LI",{});var Gje=s(E7);S6e=n(Gje,"STRONG",{});var qSt=s(S6e);U7r=r(qSt,"xlnet"),qSt.forEach(t),J7r=r(Gje," \u2014 "),SJ=n(Gje,"A",{href:!0});var jSt=s(SJ);Y7r=r(jSt,"TFXLNetModel"),jSt.forEach(t),K7r=r(Gje," (XLNet model)"),Gje.forEach(t),D.forEach(t),Z7r=i(Sl),T(C7.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),Kze=i(f),fc=n(f,"H2",{class:!0});var sHe=s(fc);w7=n(sHe,"A",{id:!0,class:!0,href:!0});var DSt=s(w7);R6e=n(DSt,"SPAN",{});var GSt=s(R6e);T(sx.$$.fragment,GSt),GSt.forEach(t),DSt.forEach(t),eMr=i(sHe),P6e=n(sHe,"SPAN",{});var OSt=s(P6e);oMr=r(OSt,"TFAutoModelForPreTraining"),OSt.forEach(t),sHe.forEach(t),Zze=i(f),tr=n(f,"DIV",{class:!0});var Rl=s(tr);T(lx.$$.fragment,Rl),rMr=i(Rl),mc=n(Rl,"P",{});var oae=s(mc);tMr=r(oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RJ=n(oae,"A",{href:!0});var VSt=s(RJ);aMr=r(VSt,"from_pretrained()"),VSt.forEach(t),nMr=r(oae," class method or the "),PJ=n(oae,"A",{href:!0});var XSt=s(PJ);sMr=r(XSt,"from_config()"),XSt.forEach(t),lMr=r(oae,` class
method.`),oae.forEach(t),iMr=i(Rl),ix=n(Rl,"P",{});var lHe=s(ix);dMr=r(lHe,"This class cannot be instantiated directly using "),B6e=n(lHe,"CODE",{});var zSt=s(B6e);cMr=r(zSt,"__init__()"),zSt.forEach(t),fMr=r(lHe," (throws an error)."),lHe.forEach(t),mMr=i(Rl),Pt=n(Rl,"DIV",{class:!0});var pL=s(Pt);T(dx.$$.fragment,pL),gMr=i(pL),I6e=n(pL,"P",{});var WSt=s(I6e);hMr=r(WSt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),WSt.forEach(t),pMr=i(pL),gc=n(pL,"P",{});var rae=s(gc);_Mr=r(rae,`Note:
Loading a model from its configuration file does `),N6e=n(rae,"STRONG",{});var QSt=s(N6e);uMr=r(QSt,"not"),QSt.forEach(t),bMr=r(rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(rae,"A",{href:!0});var HSt=s(BJ);vMr=r(HSt,"from_pretrained()"),HSt.forEach(t),FMr=r(rae," to load the model weights."),rae.forEach(t),TMr=i(pL),T(A7.$$.fragment,pL),pL.forEach(t),MMr=i(Rl),kr=n(Rl,"DIV",{class:!0});var Pl=s(kr);T(cx.$$.fragment,Pl),EMr=i(Pl),q6e=n(Pl,"P",{});var USt=s(q6e);CMr=r(USt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),USt.forEach(t),wMr=i(Pl),ln=n(Pl,"P",{});var _L=s(ln);AMr=r(_L,"The model class to instantiate is selected based on the "),j6e=n(_L,"CODE",{});var JSt=s(j6e);LMr=r(JSt,"model_type"),JSt.forEach(t),yMr=r(_L,` property of the config object (either
passed as an argument or loaded from `),D6e=n(_L,"CODE",{});var YSt=s(D6e);xMr=r(YSt,"pretrained_model_name_or_path"),YSt.forEach(t),$Mr=r(_L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=n(_L,"CODE",{});var KSt=s(G6e);kMr=r(KSt,"pretrained_model_name_or_path"),KSt.forEach(t),SMr=r(_L,":"),_L.forEach(t),RMr=i(Pl),se=n(Pl,"UL",{});var le=s(se);L7=n(le,"LI",{});var Oje=s(L7);O6e=n(Oje,"STRONG",{});var ZSt=s(O6e);PMr=r(ZSt,"albert"),ZSt.forEach(t),BMr=r(Oje," \u2014 "),IJ=n(Oje,"A",{href:!0});var eRt=s(IJ);IMr=r(eRt,"TFAlbertForPreTraining"),eRt.forEach(t),NMr=r(Oje," (ALBERT model)"),Oje.forEach(t),qMr=i(le),y7=n(le,"LI",{});var Vje=s(y7);V6e=n(Vje,"STRONG",{});var oRt=s(V6e);jMr=r(oRt,"bart"),oRt.forEach(t),DMr=r(Vje," \u2014 "),NJ=n(Vje,"A",{href:!0});var rRt=s(NJ);GMr=r(rRt,"TFBartForConditionalGeneration"),rRt.forEach(t),OMr=r(Vje," (BART model)"),Vje.forEach(t),VMr=i(le),x7=n(le,"LI",{});var Xje=s(x7);X6e=n(Xje,"STRONG",{});var tRt=s(X6e);XMr=r(tRt,"bert"),tRt.forEach(t),zMr=r(Xje," \u2014 "),qJ=n(Xje,"A",{href:!0});var aRt=s(qJ);WMr=r(aRt,"TFBertForPreTraining"),aRt.forEach(t),QMr=r(Xje," (BERT model)"),Xje.forEach(t),HMr=i(le),$7=n(le,"LI",{});var zje=s($7);z6e=n(zje,"STRONG",{});var nRt=s(z6e);UMr=r(nRt,"camembert"),nRt.forEach(t),JMr=r(zje," \u2014 "),jJ=n(zje,"A",{href:!0});var sRt=s(jJ);YMr=r(sRt,"TFCamembertForMaskedLM"),sRt.forEach(t),KMr=r(zje," (CamemBERT model)"),zje.forEach(t),ZMr=i(le),k7=n(le,"LI",{});var Wje=s(k7);W6e=n(Wje,"STRONG",{});var lRt=s(W6e);eEr=r(lRt,"ctrl"),lRt.forEach(t),oEr=r(Wje," \u2014 "),DJ=n(Wje,"A",{href:!0});var iRt=s(DJ);rEr=r(iRt,"TFCTRLLMHeadModel"),iRt.forEach(t),tEr=r(Wje," (CTRL model)"),Wje.forEach(t),aEr=i(le),S7=n(le,"LI",{});var Qje=s(S7);Q6e=n(Qje,"STRONG",{});var dRt=s(Q6e);nEr=r(dRt,"distilbert"),dRt.forEach(t),sEr=r(Qje," \u2014 "),GJ=n(Qje,"A",{href:!0});var cRt=s(GJ);lEr=r(cRt,"TFDistilBertForMaskedLM"),cRt.forEach(t),iEr=r(Qje," (DistilBERT model)"),Qje.forEach(t),dEr=i(le),R7=n(le,"LI",{});var Hje=s(R7);H6e=n(Hje,"STRONG",{});var fRt=s(H6e);cEr=r(fRt,"electra"),fRt.forEach(t),fEr=r(Hje," \u2014 "),OJ=n(Hje,"A",{href:!0});var mRt=s(OJ);mEr=r(mRt,"TFElectraForPreTraining"),mRt.forEach(t),gEr=r(Hje," (ELECTRA model)"),Hje.forEach(t),hEr=i(le),P7=n(le,"LI",{});var Uje=s(P7);U6e=n(Uje,"STRONG",{});var gRt=s(U6e);pEr=r(gRt,"flaubert"),gRt.forEach(t),_Er=r(Uje," \u2014 "),VJ=n(Uje,"A",{href:!0});var hRt=s(VJ);uEr=r(hRt,"TFFlaubertWithLMHeadModel"),hRt.forEach(t),bEr=r(Uje," (FlauBERT model)"),Uje.forEach(t),vEr=i(le),B7=n(le,"LI",{});var Jje=s(B7);J6e=n(Jje,"STRONG",{});var pRt=s(J6e);FEr=r(pRt,"funnel"),pRt.forEach(t),TEr=r(Jje," \u2014 "),XJ=n(Jje,"A",{href:!0});var _Rt=s(XJ);MEr=r(_Rt,"TFFunnelForPreTraining"),_Rt.forEach(t),EEr=r(Jje," (Funnel Transformer model)"),Jje.forEach(t),CEr=i(le),I7=n(le,"LI",{});var Yje=s(I7);Y6e=n(Yje,"STRONG",{});var uRt=s(Y6e);wEr=r(uRt,"gpt2"),uRt.forEach(t),AEr=r(Yje," \u2014 "),zJ=n(Yje,"A",{href:!0});var bRt=s(zJ);LEr=r(bRt,"TFGPT2LMHeadModel"),bRt.forEach(t),yEr=r(Yje," (OpenAI GPT-2 model)"),Yje.forEach(t),xEr=i(le),N7=n(le,"LI",{});var Kje=s(N7);K6e=n(Kje,"STRONG",{});var vRt=s(K6e);$Er=r(vRt,"layoutlm"),vRt.forEach(t),kEr=r(Kje," \u2014 "),WJ=n(Kje,"A",{href:!0});var FRt=s(WJ);SEr=r(FRt,"TFLayoutLMForMaskedLM"),FRt.forEach(t),REr=r(Kje," (LayoutLM model)"),Kje.forEach(t),PEr=i(le),q7=n(le,"LI",{});var Zje=s(q7);Z6e=n(Zje,"STRONG",{});var TRt=s(Z6e);BEr=r(TRt,"lxmert"),TRt.forEach(t),IEr=r(Zje," \u2014 "),QJ=n(Zje,"A",{href:!0});var MRt=s(QJ);NEr=r(MRt,"TFLxmertForPreTraining"),MRt.forEach(t),qEr=r(Zje," (LXMERT model)"),Zje.forEach(t),jEr=i(le),j7=n(le,"LI",{});var eDe=s(j7);eTe=n(eDe,"STRONG",{});var ERt=s(eTe);DEr=r(ERt,"mobilebert"),ERt.forEach(t),GEr=r(eDe," \u2014 "),HJ=n(eDe,"A",{href:!0});var CRt=s(HJ);OEr=r(CRt,"TFMobileBertForPreTraining"),CRt.forEach(t),VEr=r(eDe," (MobileBERT model)"),eDe.forEach(t),XEr=i(le),D7=n(le,"LI",{});var oDe=s(D7);oTe=n(oDe,"STRONG",{});var wRt=s(oTe);zEr=r(wRt,"mpnet"),wRt.forEach(t),WEr=r(oDe," \u2014 "),UJ=n(oDe,"A",{href:!0});var ARt=s(UJ);QEr=r(ARt,"TFMPNetForMaskedLM"),ARt.forEach(t),HEr=r(oDe," (MPNet model)"),oDe.forEach(t),UEr=i(le),G7=n(le,"LI",{});var rDe=s(G7);rTe=n(rDe,"STRONG",{});var LRt=s(rTe);JEr=r(LRt,"openai-gpt"),LRt.forEach(t),YEr=r(rDe," \u2014 "),JJ=n(rDe,"A",{href:!0});var yRt=s(JJ);KEr=r(yRt,"TFOpenAIGPTLMHeadModel"),yRt.forEach(t),ZEr=r(rDe," (OpenAI GPT model)"),rDe.forEach(t),eCr=i(le),O7=n(le,"LI",{});var tDe=s(O7);tTe=n(tDe,"STRONG",{});var xRt=s(tTe);oCr=r(xRt,"roberta"),xRt.forEach(t),rCr=r(tDe," \u2014 "),YJ=n(tDe,"A",{href:!0});var $Rt=s(YJ);tCr=r($Rt,"TFRobertaForMaskedLM"),$Rt.forEach(t),aCr=r(tDe," (RoBERTa model)"),tDe.forEach(t),nCr=i(le),V7=n(le,"LI",{});var aDe=s(V7);aTe=n(aDe,"STRONG",{});var kRt=s(aTe);sCr=r(kRt,"t5"),kRt.forEach(t),lCr=r(aDe," \u2014 "),KJ=n(aDe,"A",{href:!0});var SRt=s(KJ);iCr=r(SRt,"TFT5ForConditionalGeneration"),SRt.forEach(t),dCr=r(aDe," (T5 model)"),aDe.forEach(t),cCr=i(le),X7=n(le,"LI",{});var nDe=s(X7);nTe=n(nDe,"STRONG",{});var RRt=s(nTe);fCr=r(RRt,"tapas"),RRt.forEach(t),mCr=r(nDe," \u2014 "),ZJ=n(nDe,"A",{href:!0});var PRt=s(ZJ);gCr=r(PRt,"TFTapasForMaskedLM"),PRt.forEach(t),hCr=r(nDe," (TAPAS model)"),nDe.forEach(t),pCr=i(le),z7=n(le,"LI",{});var sDe=s(z7);sTe=n(sDe,"STRONG",{});var BRt=s(sTe);_Cr=r(BRt,"transfo-xl"),BRt.forEach(t),uCr=r(sDe," \u2014 "),eY=n(sDe,"A",{href:!0});var IRt=s(eY);bCr=r(IRt,"TFTransfoXLLMHeadModel"),IRt.forEach(t),vCr=r(sDe," (Transformer-XL model)"),sDe.forEach(t),FCr=i(le),W7=n(le,"LI",{});var lDe=s(W7);lTe=n(lDe,"STRONG",{});var NRt=s(lTe);TCr=r(NRt,"vit_mae"),NRt.forEach(t),MCr=r(lDe," \u2014 "),oY=n(lDe,"A",{href:!0});var qRt=s(oY);ECr=r(qRt,"TFViTMAEForPreTraining"),qRt.forEach(t),CCr=r(lDe," (ViTMAE model)"),lDe.forEach(t),wCr=i(le),Q7=n(le,"LI",{});var iDe=s(Q7);iTe=n(iDe,"STRONG",{});var jRt=s(iTe);ACr=r(jRt,"xlm"),jRt.forEach(t),LCr=r(iDe," \u2014 "),rY=n(iDe,"A",{href:!0});var DRt=s(rY);yCr=r(DRt,"TFXLMWithLMHeadModel"),DRt.forEach(t),xCr=r(iDe," (XLM model)"),iDe.forEach(t),$Cr=i(le),H7=n(le,"LI",{});var dDe=s(H7);dTe=n(dDe,"STRONG",{});var GRt=s(dTe);kCr=r(GRt,"xlm-roberta"),GRt.forEach(t),SCr=r(dDe," \u2014 "),tY=n(dDe,"A",{href:!0});var ORt=s(tY);RCr=r(ORt,"TFXLMRobertaForMaskedLM"),ORt.forEach(t),PCr=r(dDe," (XLM-RoBERTa model)"),dDe.forEach(t),BCr=i(le),U7=n(le,"LI",{});var cDe=s(U7);cTe=n(cDe,"STRONG",{});var VRt=s(cTe);ICr=r(VRt,"xlnet"),VRt.forEach(t),NCr=r(cDe," \u2014 "),aY=n(cDe,"A",{href:!0});var XRt=s(aY);qCr=r(XRt,"TFXLNetLMHeadModel"),XRt.forEach(t),jCr=r(cDe," (XLNet model)"),cDe.forEach(t),le.forEach(t),DCr=i(Pl),T(J7.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),eWe=i(f),hc=n(f,"H2",{class:!0});var iHe=s(hc);Y7=n(iHe,"A",{id:!0,class:!0,href:!0});var zRt=s(Y7);fTe=n(zRt,"SPAN",{});var WRt=s(fTe);T(fx.$$.fragment,WRt),WRt.forEach(t),zRt.forEach(t),GCr=i(iHe),mTe=n(iHe,"SPAN",{});var QRt=s(mTe);OCr=r(QRt,"TFAutoModelForCausalLM"),QRt.forEach(t),iHe.forEach(t),oWe=i(f),ar=n(f,"DIV",{class:!0});var Bl=s(ar);T(mx.$$.fragment,Bl),VCr=i(Bl),pc=n(Bl,"P",{});var tae=s(pc);XCr=r(tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nY=n(tae,"A",{href:!0});var HRt=s(nY);zCr=r(HRt,"from_pretrained()"),HRt.forEach(t),WCr=r(tae," class method or the "),sY=n(tae,"A",{href:!0});var URt=s(sY);QCr=r(URt,"from_config()"),URt.forEach(t),HCr=r(tae,` class
method.`),tae.forEach(t),UCr=i(Bl),gx=n(Bl,"P",{});var dHe=s(gx);JCr=r(dHe,"This class cannot be instantiated directly using "),gTe=n(dHe,"CODE",{});var JRt=s(gTe);YCr=r(JRt,"__init__()"),JRt.forEach(t),KCr=r(dHe," (throws an error)."),dHe.forEach(t),ZCr=i(Bl),Bt=n(Bl,"DIV",{class:!0});var uL=s(Bt);T(hx.$$.fragment,uL),e5r=i(uL),hTe=n(uL,"P",{});var YRt=s(hTe);o5r=r(YRt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),YRt.forEach(t),r5r=i(uL),_c=n(uL,"P",{});var aae=s(_c);t5r=r(aae,`Note:
Loading a model from its configuration file does `),pTe=n(aae,"STRONG",{});var KRt=s(pTe);a5r=r(KRt,"not"),KRt.forEach(t),n5r=r(aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=n(aae,"A",{href:!0});var ZRt=s(lY);s5r=r(ZRt,"from_pretrained()"),ZRt.forEach(t),l5r=r(aae," to load the model weights."),aae.forEach(t),i5r=i(uL),T(K7.$$.fragment,uL),uL.forEach(t),d5r=i(Bl),Sr=n(Bl,"DIV",{class:!0});var Il=s(Sr);T(px.$$.fragment,Il),c5r=i(Il),_Te=n(Il,"P",{});var ePt=s(_Te);f5r=r(ePt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ePt.forEach(t),m5r=i(Il),dn=n(Il,"P",{});var bL=s(dn);g5r=r(bL,"The model class to instantiate is selected based on the "),uTe=n(bL,"CODE",{});var oPt=s(uTe);h5r=r(oPt,"model_type"),oPt.forEach(t),p5r=r(bL,` property of the config object (either
passed as an argument or loaded from `),bTe=n(bL,"CODE",{});var rPt=s(bTe);_5r=r(rPt,"pretrained_model_name_or_path"),rPt.forEach(t),u5r=r(bL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=n(bL,"CODE",{});var tPt=s(vTe);b5r=r(tPt,"pretrained_model_name_or_path"),tPt.forEach(t),v5r=r(bL,":"),bL.forEach(t),F5r=i(Il),Me=n(Il,"UL",{});var Ce=s(Me);Z7=n(Ce,"LI",{});var fDe=s(Z7);FTe=n(fDe,"STRONG",{});var aPt=s(FTe);T5r=r(aPt,"bert"),aPt.forEach(t),M5r=r(fDe," \u2014 "),iY=n(fDe,"A",{href:!0});var nPt=s(iY);E5r=r(nPt,"TFBertLMHeadModel"),nPt.forEach(t),C5r=r(fDe," (BERT model)"),fDe.forEach(t),w5r=i(Ce),eM=n(Ce,"LI",{});var mDe=s(eM);TTe=n(mDe,"STRONG",{});var sPt=s(TTe);A5r=r(sPt,"camembert"),sPt.forEach(t),L5r=r(mDe," \u2014 "),dY=n(mDe,"A",{href:!0});var lPt=s(dY);y5r=r(lPt,"TFCamembertForCausalLM"),lPt.forEach(t),x5r=r(mDe," (CamemBERT model)"),mDe.forEach(t),$5r=i(Ce),oM=n(Ce,"LI",{});var gDe=s(oM);MTe=n(gDe,"STRONG",{});var iPt=s(MTe);k5r=r(iPt,"ctrl"),iPt.forEach(t),S5r=r(gDe," \u2014 "),cY=n(gDe,"A",{href:!0});var dPt=s(cY);R5r=r(dPt,"TFCTRLLMHeadModel"),dPt.forEach(t),P5r=r(gDe," (CTRL model)"),gDe.forEach(t),B5r=i(Ce),rM=n(Ce,"LI",{});var hDe=s(rM);ETe=n(hDe,"STRONG",{});var cPt=s(ETe);I5r=r(cPt,"gpt2"),cPt.forEach(t),N5r=r(hDe," \u2014 "),fY=n(hDe,"A",{href:!0});var fPt=s(fY);q5r=r(fPt,"TFGPT2LMHeadModel"),fPt.forEach(t),j5r=r(hDe," (OpenAI GPT-2 model)"),hDe.forEach(t),D5r=i(Ce),tM=n(Ce,"LI",{});var pDe=s(tM);CTe=n(pDe,"STRONG",{});var mPt=s(CTe);G5r=r(mPt,"gptj"),mPt.forEach(t),O5r=r(pDe," \u2014 "),mY=n(pDe,"A",{href:!0});var gPt=s(mY);V5r=r(gPt,"TFGPTJForCausalLM"),gPt.forEach(t),X5r=r(pDe," (GPT-J model)"),pDe.forEach(t),z5r=i(Ce),aM=n(Ce,"LI",{});var _De=s(aM);wTe=n(_De,"STRONG",{});var hPt=s(wTe);W5r=r(hPt,"openai-gpt"),hPt.forEach(t),Q5r=r(_De," \u2014 "),gY=n(_De,"A",{href:!0});var pPt=s(gY);H5r=r(pPt,"TFOpenAIGPTLMHeadModel"),pPt.forEach(t),U5r=r(_De," (OpenAI GPT model)"),_De.forEach(t),J5r=i(Ce),nM=n(Ce,"LI",{});var uDe=s(nM);ATe=n(uDe,"STRONG",{});var _Pt=s(ATe);Y5r=r(_Pt,"opt"),_Pt.forEach(t),K5r=r(uDe," \u2014 "),hY=n(uDe,"A",{href:!0});var uPt=s(hY);Z5r=r(uPt,"TFOPTForCausalLM"),uPt.forEach(t),e3r=r(uDe," (OPT model)"),uDe.forEach(t),o3r=i(Ce),sM=n(Ce,"LI",{});var bDe=s(sM);LTe=n(bDe,"STRONG",{});var bPt=s(LTe);r3r=r(bPt,"rembert"),bPt.forEach(t),t3r=r(bDe," \u2014 "),pY=n(bDe,"A",{href:!0});var vPt=s(pY);a3r=r(vPt,"TFRemBertForCausalLM"),vPt.forEach(t),n3r=r(bDe," (RemBERT model)"),bDe.forEach(t),s3r=i(Ce),lM=n(Ce,"LI",{});var vDe=s(lM);yTe=n(vDe,"STRONG",{});var FPt=s(yTe);l3r=r(FPt,"roberta"),FPt.forEach(t),i3r=r(vDe," \u2014 "),_Y=n(vDe,"A",{href:!0});var TPt=s(_Y);d3r=r(TPt,"TFRobertaForCausalLM"),TPt.forEach(t),c3r=r(vDe," (RoBERTa model)"),vDe.forEach(t),f3r=i(Ce),iM=n(Ce,"LI",{});var FDe=s(iM);xTe=n(FDe,"STRONG",{});var MPt=s(xTe);m3r=r(MPt,"roformer"),MPt.forEach(t),g3r=r(FDe," \u2014 "),uY=n(FDe,"A",{href:!0});var EPt=s(uY);h3r=r(EPt,"TFRoFormerForCausalLM"),EPt.forEach(t),p3r=r(FDe," (RoFormer model)"),FDe.forEach(t),_3r=i(Ce),dM=n(Ce,"LI",{});var TDe=s(dM);$Te=n(TDe,"STRONG",{});var CPt=s($Te);u3r=r(CPt,"transfo-xl"),CPt.forEach(t),b3r=r(TDe," \u2014 "),bY=n(TDe,"A",{href:!0});var wPt=s(bY);v3r=r(wPt,"TFTransfoXLLMHeadModel"),wPt.forEach(t),F3r=r(TDe," (Transformer-XL model)"),TDe.forEach(t),T3r=i(Ce),cM=n(Ce,"LI",{});var MDe=s(cM);kTe=n(MDe,"STRONG",{});var APt=s(kTe);M3r=r(APt,"xlm"),APt.forEach(t),E3r=r(MDe," \u2014 "),vY=n(MDe,"A",{href:!0});var LPt=s(vY);C3r=r(LPt,"TFXLMWithLMHeadModel"),LPt.forEach(t),w3r=r(MDe," (XLM model)"),MDe.forEach(t),A3r=i(Ce),fM=n(Ce,"LI",{});var EDe=s(fM);STe=n(EDe,"STRONG",{});var yPt=s(STe);L3r=r(yPt,"xlnet"),yPt.forEach(t),y3r=r(EDe," \u2014 "),FY=n(EDe,"A",{href:!0});var xPt=s(FY);x3r=r(xPt,"TFXLNetLMHeadModel"),xPt.forEach(t),$3r=r(EDe," (XLNet model)"),EDe.forEach(t),Ce.forEach(t),k3r=i(Il),T(mM.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),rWe=i(f),uc=n(f,"H2",{class:!0});var cHe=s(uc);gM=n(cHe,"A",{id:!0,class:!0,href:!0});var $Pt=s(gM);RTe=n($Pt,"SPAN",{});var kPt=s(RTe);T(_x.$$.fragment,kPt),kPt.forEach(t),$Pt.forEach(t),S3r=i(cHe),PTe=n(cHe,"SPAN",{});var SPt=s(PTe);R3r=r(SPt,"TFAutoModelForImageClassification"),SPt.forEach(t),cHe.forEach(t),tWe=i(f),nr=n(f,"DIV",{class:!0});var Nl=s(nr);T(ux.$$.fragment,Nl),P3r=i(Nl),bc=n(Nl,"P",{});var nae=s(bc);B3r=r(nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TY=n(nae,"A",{href:!0});var RPt=s(TY);I3r=r(RPt,"from_pretrained()"),RPt.forEach(t),N3r=r(nae," class method or the "),MY=n(nae,"A",{href:!0});var PPt=s(MY);q3r=r(PPt,"from_config()"),PPt.forEach(t),j3r=r(nae,` class
method.`),nae.forEach(t),D3r=i(Nl),bx=n(Nl,"P",{});var fHe=s(bx);G3r=r(fHe,"This class cannot be instantiated directly using "),BTe=n(fHe,"CODE",{});var BPt=s(BTe);O3r=r(BPt,"__init__()"),BPt.forEach(t),V3r=r(fHe," (throws an error)."),fHe.forEach(t),X3r=i(Nl),It=n(Nl,"DIV",{class:!0});var vL=s(It);T(vx.$$.fragment,vL),z3r=i(vL),ITe=n(vL,"P",{});var IPt=s(ITe);W3r=r(IPt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),IPt.forEach(t),Q3r=i(vL),vc=n(vL,"P",{});var sae=s(vc);H3r=r(sae,`Note:
Loading a model from its configuration file does `),NTe=n(sae,"STRONG",{});var NPt=s(NTe);U3r=r(NPt,"not"),NPt.forEach(t),J3r=r(sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(sae,"A",{href:!0});var qPt=s(EY);Y3r=r(qPt,"from_pretrained()"),qPt.forEach(t),K3r=r(sae," to load the model weights."),sae.forEach(t),Z3r=i(vL),T(hM.$$.fragment,vL),vL.forEach(t),ewr=i(Nl),Rr=n(Nl,"DIV",{class:!0});var ql=s(Rr);T(Fx.$$.fragment,ql),owr=i(ql),qTe=n(ql,"P",{});var jPt=s(qTe);rwr=r(jPt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jPt.forEach(t),twr=i(ql),cn=n(ql,"P",{});var FL=s(cn);awr=r(FL,"The model class to instantiate is selected based on the "),jTe=n(FL,"CODE",{});var DPt=s(jTe);nwr=r(DPt,"model_type"),DPt.forEach(t),swr=r(FL,` property of the config object (either
passed as an argument or loaded from `),DTe=n(FL,"CODE",{});var GPt=s(DTe);lwr=r(GPt,"pretrained_model_name_or_path"),GPt.forEach(t),iwr=r(FL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=n(FL,"CODE",{});var OPt=s(GTe);dwr=r(OPt,"pretrained_model_name_or_path"),OPt.forEach(t),cwr=r(FL,":"),FL.forEach(t),fwr=i(ql),Ve=n(ql,"UL",{});var Mo=s(Ve);pM=n(Mo,"LI",{});var CDe=s(pM);OTe=n(CDe,"STRONG",{});var VPt=s(OTe);mwr=r(VPt,"convnext"),VPt.forEach(t),gwr=r(CDe," \u2014 "),CY=n(CDe,"A",{href:!0});var XPt=s(CY);hwr=r(XPt,"TFConvNextForImageClassification"),XPt.forEach(t),pwr=r(CDe," (ConvNeXT model)"),CDe.forEach(t),_wr=i(Mo),_M=n(Mo,"LI",{});var wDe=s(_M);VTe=n(wDe,"STRONG",{});var zPt=s(VTe);uwr=r(zPt,"data2vec-vision"),zPt.forEach(t),bwr=r(wDe," \u2014 "),wY=n(wDe,"A",{href:!0});var WPt=s(wY);vwr=r(WPt,"TFData2VecVisionForImageClassification"),WPt.forEach(t),Fwr=r(wDe," (Data2VecVision model)"),wDe.forEach(t),Twr=i(Mo),Zs=n(Mo,"LI",{});var QS=s(Zs);XTe=n(QS,"STRONG",{});var QPt=s(XTe);Mwr=r(QPt,"deit"),QPt.forEach(t),Ewr=r(QS," \u2014 "),AY=n(QS,"A",{href:!0});var HPt=s(AY);Cwr=r(HPt,"TFDeiTForImageClassification"),HPt.forEach(t),wwr=r(QS," or "),LY=n(QS,"A",{href:!0});var UPt=s(LY);Awr=r(UPt,"TFDeiTForImageClassificationWithTeacher"),UPt.forEach(t),Lwr=r(QS," (DeiT model)"),QS.forEach(t),ywr=i(Mo),uM=n(Mo,"LI",{});var ADe=s(uM);zTe=n(ADe,"STRONG",{});var JPt=s(zTe);xwr=r(JPt,"regnet"),JPt.forEach(t),$wr=r(ADe," \u2014 "),yY=n(ADe,"A",{href:!0});var YPt=s(yY);kwr=r(YPt,"TFRegNetForImageClassification"),YPt.forEach(t),Swr=r(ADe," (RegNet model)"),ADe.forEach(t),Rwr=i(Mo),bM=n(Mo,"LI",{});var LDe=s(bM);WTe=n(LDe,"STRONG",{});var KPt=s(WTe);Pwr=r(KPt,"resnet"),KPt.forEach(t),Bwr=r(LDe," \u2014 "),xY=n(LDe,"A",{href:!0});var ZPt=s(xY);Iwr=r(ZPt,"TFResNetForImageClassification"),ZPt.forEach(t),Nwr=r(LDe," (ResNet model)"),LDe.forEach(t),qwr=i(Mo),vM=n(Mo,"LI",{});var yDe=s(vM);QTe=n(yDe,"STRONG",{});var eBt=s(QTe);jwr=r(eBt,"segformer"),eBt.forEach(t),Dwr=r(yDe," \u2014 "),$Y=n(yDe,"A",{href:!0});var oBt=s($Y);Gwr=r(oBt,"TFSegformerForImageClassification"),oBt.forEach(t),Owr=r(yDe," (SegFormer model)"),yDe.forEach(t),Vwr=i(Mo),FM=n(Mo,"LI",{});var xDe=s(FM);HTe=n(xDe,"STRONG",{});var rBt=s(HTe);Xwr=r(rBt,"swin"),rBt.forEach(t),zwr=r(xDe," \u2014 "),kY=n(xDe,"A",{href:!0});var tBt=s(kY);Wwr=r(tBt,"TFSwinForImageClassification"),tBt.forEach(t),Qwr=r(xDe," (Swin Transformer model)"),xDe.forEach(t),Hwr=i(Mo),TM=n(Mo,"LI",{});var $De=s(TM);UTe=n($De,"STRONG",{});var aBt=s(UTe);Uwr=r(aBt,"vit"),aBt.forEach(t),Jwr=r($De," \u2014 "),SY=n($De,"A",{href:!0});var nBt=s(SY);Ywr=r(nBt,"TFViTForImageClassification"),nBt.forEach(t),Kwr=r($De," (ViT model)"),$De.forEach(t),Mo.forEach(t),Zwr=i(ql),T(MM.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),aWe=i(f),Fc=n(f,"H2",{class:!0});var mHe=s(Fc);EM=n(mHe,"A",{id:!0,class:!0,href:!0});var sBt=s(EM);JTe=n(sBt,"SPAN",{});var lBt=s(JTe);T(Tx.$$.fragment,lBt),lBt.forEach(t),sBt.forEach(t),eAr=i(mHe),YTe=n(mHe,"SPAN",{});var iBt=s(YTe);oAr=r(iBt,"TFAutoModelForMaskedLM"),iBt.forEach(t),mHe.forEach(t),nWe=i(f),sr=n(f,"DIV",{class:!0});var jl=s(sr);T(Mx.$$.fragment,jl),rAr=i(jl),Tc=n(jl,"P",{});var lae=s(Tc);tAr=r(lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RY=n(lae,"A",{href:!0});var dBt=s(RY);aAr=r(dBt,"from_pretrained()"),dBt.forEach(t),nAr=r(lae," class method or the "),PY=n(lae,"A",{href:!0});var cBt=s(PY);sAr=r(cBt,"from_config()"),cBt.forEach(t),lAr=r(lae,` class
method.`),lae.forEach(t),iAr=i(jl),Ex=n(jl,"P",{});var gHe=s(Ex);dAr=r(gHe,"This class cannot be instantiated directly using "),KTe=n(gHe,"CODE",{});var fBt=s(KTe);cAr=r(fBt,"__init__()"),fBt.forEach(t),fAr=r(gHe," (throws an error)."),gHe.forEach(t),mAr=i(jl),Nt=n(jl,"DIV",{class:!0});var TL=s(Nt);T(Cx.$$.fragment,TL),gAr=i(TL),ZTe=n(TL,"P",{});var mBt=s(ZTe);hAr=r(mBt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mBt.forEach(t),pAr=i(TL),Mc=n(TL,"P",{});var iae=s(Mc);_Ar=r(iae,`Note:
Loading a model from its configuration file does `),e7e=n(iae,"STRONG",{});var gBt=s(e7e);uAr=r(gBt,"not"),gBt.forEach(t),bAr=r(iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=n(iae,"A",{href:!0});var hBt=s(BY);vAr=r(hBt,"from_pretrained()"),hBt.forEach(t),FAr=r(iae," to load the model weights."),iae.forEach(t),TAr=i(TL),T(CM.$$.fragment,TL),TL.forEach(t),MAr=i(jl),Pr=n(jl,"DIV",{class:!0});var Dl=s(Pr);T(wx.$$.fragment,Dl),EAr=i(Dl),o7e=n(Dl,"P",{});var pBt=s(o7e);CAr=r(pBt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pBt.forEach(t),wAr=i(Dl),fn=n(Dl,"P",{});var ML=s(fn);AAr=r(ML,"The model class to instantiate is selected based on the "),r7e=n(ML,"CODE",{});var _Bt=s(r7e);LAr=r(_Bt,"model_type"),_Bt.forEach(t),yAr=r(ML,` property of the config object (either
passed as an argument or loaded from `),t7e=n(ML,"CODE",{});var uBt=s(t7e);xAr=r(uBt,"pretrained_model_name_or_path"),uBt.forEach(t),$Ar=r(ML,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a7e=n(ML,"CODE",{});var bBt=s(a7e);kAr=r(bBt,"pretrained_model_name_or_path"),bBt.forEach(t),SAr=r(ML,":"),ML.forEach(t),RAr=i(Dl),ie=n(Dl,"UL",{});var ge=s(ie);wM=n(ge,"LI",{});var kDe=s(wM);n7e=n(kDe,"STRONG",{});var vBt=s(n7e);PAr=r(vBt,"albert"),vBt.forEach(t),BAr=r(kDe," \u2014 "),IY=n(kDe,"A",{href:!0});var FBt=s(IY);IAr=r(FBt,"TFAlbertForMaskedLM"),FBt.forEach(t),NAr=r(kDe," (ALBERT model)"),kDe.forEach(t),qAr=i(ge),AM=n(ge,"LI",{});var SDe=s(AM);s7e=n(SDe,"STRONG",{});var TBt=s(s7e);jAr=r(TBt,"bert"),TBt.forEach(t),DAr=r(SDe," \u2014 "),NY=n(SDe,"A",{href:!0});var MBt=s(NY);GAr=r(MBt,"TFBertForMaskedLM"),MBt.forEach(t),OAr=r(SDe," (BERT model)"),SDe.forEach(t),VAr=i(ge),LM=n(ge,"LI",{});var RDe=s(LM);l7e=n(RDe,"STRONG",{});var EBt=s(l7e);XAr=r(EBt,"camembert"),EBt.forEach(t),zAr=r(RDe," \u2014 "),qY=n(RDe,"A",{href:!0});var CBt=s(qY);WAr=r(CBt,"TFCamembertForMaskedLM"),CBt.forEach(t),QAr=r(RDe," (CamemBERT model)"),RDe.forEach(t),HAr=i(ge),yM=n(ge,"LI",{});var PDe=s(yM);i7e=n(PDe,"STRONG",{});var wBt=s(i7e);UAr=r(wBt,"convbert"),wBt.forEach(t),JAr=r(PDe," \u2014 "),jY=n(PDe,"A",{href:!0});var ABt=s(jY);YAr=r(ABt,"TFConvBertForMaskedLM"),ABt.forEach(t),KAr=r(PDe," (ConvBERT model)"),PDe.forEach(t),ZAr=i(ge),xM=n(ge,"LI",{});var BDe=s(xM);d7e=n(BDe,"STRONG",{});var LBt=s(d7e);eLr=r(LBt,"deberta"),LBt.forEach(t),oLr=r(BDe," \u2014 "),DY=n(BDe,"A",{href:!0});var yBt=s(DY);rLr=r(yBt,"TFDebertaForMaskedLM"),yBt.forEach(t),tLr=r(BDe," (DeBERTa model)"),BDe.forEach(t),aLr=i(ge),$M=n(ge,"LI",{});var IDe=s($M);c7e=n(IDe,"STRONG",{});var xBt=s(c7e);nLr=r(xBt,"deberta-v2"),xBt.forEach(t),sLr=r(IDe," \u2014 "),GY=n(IDe,"A",{href:!0});var $Bt=s(GY);lLr=r($Bt,"TFDebertaV2ForMaskedLM"),$Bt.forEach(t),iLr=r(IDe," (DeBERTa-v2 model)"),IDe.forEach(t),dLr=i(ge),kM=n(ge,"LI",{});var NDe=s(kM);f7e=n(NDe,"STRONG",{});var kBt=s(f7e);cLr=r(kBt,"distilbert"),kBt.forEach(t),fLr=r(NDe," \u2014 "),OY=n(NDe,"A",{href:!0});var SBt=s(OY);mLr=r(SBt,"TFDistilBertForMaskedLM"),SBt.forEach(t),gLr=r(NDe," (DistilBERT model)"),NDe.forEach(t),hLr=i(ge),SM=n(ge,"LI",{});var qDe=s(SM);m7e=n(qDe,"STRONG",{});var RBt=s(m7e);pLr=r(RBt,"electra"),RBt.forEach(t),_Lr=r(qDe," \u2014 "),VY=n(qDe,"A",{href:!0});var PBt=s(VY);uLr=r(PBt,"TFElectraForMaskedLM"),PBt.forEach(t),bLr=r(qDe," (ELECTRA model)"),qDe.forEach(t),vLr=i(ge),RM=n(ge,"LI",{});var jDe=s(RM);g7e=n(jDe,"STRONG",{});var BBt=s(g7e);FLr=r(BBt,"flaubert"),BBt.forEach(t),TLr=r(jDe," \u2014 "),XY=n(jDe,"A",{href:!0});var IBt=s(XY);MLr=r(IBt,"TFFlaubertWithLMHeadModel"),IBt.forEach(t),ELr=r(jDe," (FlauBERT model)"),jDe.forEach(t),CLr=i(ge),PM=n(ge,"LI",{});var DDe=s(PM);h7e=n(DDe,"STRONG",{});var NBt=s(h7e);wLr=r(NBt,"funnel"),NBt.forEach(t),ALr=r(DDe," \u2014 "),zY=n(DDe,"A",{href:!0});var qBt=s(zY);LLr=r(qBt,"TFFunnelForMaskedLM"),qBt.forEach(t),yLr=r(DDe," (Funnel Transformer model)"),DDe.forEach(t),xLr=i(ge),BM=n(ge,"LI",{});var GDe=s(BM);p7e=n(GDe,"STRONG",{});var jBt=s(p7e);$Lr=r(jBt,"layoutlm"),jBt.forEach(t),kLr=r(GDe," \u2014 "),WY=n(GDe,"A",{href:!0});var DBt=s(WY);SLr=r(DBt,"TFLayoutLMForMaskedLM"),DBt.forEach(t),RLr=r(GDe," (LayoutLM model)"),GDe.forEach(t),PLr=i(ge),IM=n(ge,"LI",{});var ODe=s(IM);_7e=n(ODe,"STRONG",{});var GBt=s(_7e);BLr=r(GBt,"longformer"),GBt.forEach(t),ILr=r(ODe," \u2014 "),QY=n(ODe,"A",{href:!0});var OBt=s(QY);NLr=r(OBt,"TFLongformerForMaskedLM"),OBt.forEach(t),qLr=r(ODe," (Longformer model)"),ODe.forEach(t),jLr=i(ge),NM=n(ge,"LI",{});var VDe=s(NM);u7e=n(VDe,"STRONG",{});var VBt=s(u7e);DLr=r(VBt,"mobilebert"),VBt.forEach(t),GLr=r(VDe," \u2014 "),HY=n(VDe,"A",{href:!0});var XBt=s(HY);OLr=r(XBt,"TFMobileBertForMaskedLM"),XBt.forEach(t),VLr=r(VDe," (MobileBERT model)"),VDe.forEach(t),XLr=i(ge),qM=n(ge,"LI",{});var XDe=s(qM);b7e=n(XDe,"STRONG",{});var zBt=s(b7e);zLr=r(zBt,"mpnet"),zBt.forEach(t),WLr=r(XDe," \u2014 "),UY=n(XDe,"A",{href:!0});var WBt=s(UY);QLr=r(WBt,"TFMPNetForMaskedLM"),WBt.forEach(t),HLr=r(XDe," (MPNet model)"),XDe.forEach(t),ULr=i(ge),jM=n(ge,"LI",{});var zDe=s(jM);v7e=n(zDe,"STRONG",{});var QBt=s(v7e);JLr=r(QBt,"rembert"),QBt.forEach(t),YLr=r(zDe," \u2014 "),JY=n(zDe,"A",{href:!0});var HBt=s(JY);KLr=r(HBt,"TFRemBertForMaskedLM"),HBt.forEach(t),ZLr=r(zDe," (RemBERT model)"),zDe.forEach(t),eyr=i(ge),DM=n(ge,"LI",{});var WDe=s(DM);F7e=n(WDe,"STRONG",{});var UBt=s(F7e);oyr=r(UBt,"roberta"),UBt.forEach(t),ryr=r(WDe," \u2014 "),YY=n(WDe,"A",{href:!0});var JBt=s(YY);tyr=r(JBt,"TFRobertaForMaskedLM"),JBt.forEach(t),ayr=r(WDe," (RoBERTa model)"),WDe.forEach(t),nyr=i(ge),GM=n(ge,"LI",{});var QDe=s(GM);T7e=n(QDe,"STRONG",{});var YBt=s(T7e);syr=r(YBt,"roformer"),YBt.forEach(t),lyr=r(QDe," \u2014 "),KY=n(QDe,"A",{href:!0});var KBt=s(KY);iyr=r(KBt,"TFRoFormerForMaskedLM"),KBt.forEach(t),dyr=r(QDe," (RoFormer model)"),QDe.forEach(t),cyr=i(ge),OM=n(ge,"LI",{});var HDe=s(OM);M7e=n(HDe,"STRONG",{});var ZBt=s(M7e);fyr=r(ZBt,"tapas"),ZBt.forEach(t),myr=r(HDe," \u2014 "),ZY=n(HDe,"A",{href:!0});var eIt=s(ZY);gyr=r(eIt,"TFTapasForMaskedLM"),eIt.forEach(t),hyr=r(HDe," (TAPAS model)"),HDe.forEach(t),pyr=i(ge),VM=n(ge,"LI",{});var UDe=s(VM);E7e=n(UDe,"STRONG",{});var oIt=s(E7e);_yr=r(oIt,"xlm"),oIt.forEach(t),uyr=r(UDe," \u2014 "),eK=n(UDe,"A",{href:!0});var rIt=s(eK);byr=r(rIt,"TFXLMWithLMHeadModel"),rIt.forEach(t),vyr=r(UDe," (XLM model)"),UDe.forEach(t),Fyr=i(ge),XM=n(ge,"LI",{});var JDe=s(XM);C7e=n(JDe,"STRONG",{});var tIt=s(C7e);Tyr=r(tIt,"xlm-roberta"),tIt.forEach(t),Myr=r(JDe," \u2014 "),oK=n(JDe,"A",{href:!0});var aIt=s(oK);Eyr=r(aIt,"TFXLMRobertaForMaskedLM"),aIt.forEach(t),Cyr=r(JDe," (XLM-RoBERTa model)"),JDe.forEach(t),ge.forEach(t),wyr=i(Dl),T(zM.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),sWe=i(f),Ec=n(f,"H2",{class:!0});var hHe=s(Ec);WM=n(hHe,"A",{id:!0,class:!0,href:!0});var nIt=s(WM);w7e=n(nIt,"SPAN",{});var sIt=s(w7e);T(Ax.$$.fragment,sIt),sIt.forEach(t),nIt.forEach(t),Ayr=i(hHe),A7e=n(hHe,"SPAN",{});var lIt=s(A7e);Lyr=r(lIt,"TFAutoModelForSeq2SeqLM"),lIt.forEach(t),hHe.forEach(t),lWe=i(f),lr=n(f,"DIV",{class:!0});var Gl=s(lr);T(Lx.$$.fragment,Gl),yyr=i(Gl),Cc=n(Gl,"P",{});var dae=s(Cc);xyr=r(dae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rK=n(dae,"A",{href:!0});var iIt=s(rK);$yr=r(iIt,"from_pretrained()"),iIt.forEach(t),kyr=r(dae," class method or the "),tK=n(dae,"A",{href:!0});var dIt=s(tK);Syr=r(dIt,"from_config()"),dIt.forEach(t),Ryr=r(dae,` class
method.`),dae.forEach(t),Pyr=i(Gl),yx=n(Gl,"P",{});var pHe=s(yx);Byr=r(pHe,"This class cannot be instantiated directly using "),L7e=n(pHe,"CODE",{});var cIt=s(L7e);Iyr=r(cIt,"__init__()"),cIt.forEach(t),Nyr=r(pHe," (throws an error)."),pHe.forEach(t),qyr=i(Gl),qt=n(Gl,"DIV",{class:!0});var EL=s(qt);T(xx.$$.fragment,EL),jyr=i(EL),y7e=n(EL,"P",{});var fIt=s(y7e);Dyr=r(fIt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fIt.forEach(t),Gyr=i(EL),wc=n(EL,"P",{});var cae=s(wc);Oyr=r(cae,`Note:
Loading a model from its configuration file does `),x7e=n(cae,"STRONG",{});var mIt=s(x7e);Vyr=r(mIt,"not"),mIt.forEach(t),Xyr=r(cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(cae,"A",{href:!0});var gIt=s(aK);zyr=r(gIt,"from_pretrained()"),gIt.forEach(t),Wyr=r(cae," to load the model weights."),cae.forEach(t),Qyr=i(EL),T(QM.$$.fragment,EL),EL.forEach(t),Hyr=i(Gl),Br=n(Gl,"DIV",{class:!0});var Ol=s(Br);T($x.$$.fragment,Ol),Uyr=i(Ol),$7e=n(Ol,"P",{});var hIt=s($7e);Jyr=r(hIt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hIt.forEach(t),Yyr=i(Ol),mn=n(Ol,"P",{});var CL=s(mn);Kyr=r(CL,"The model class to instantiate is selected based on the "),k7e=n(CL,"CODE",{});var pIt=s(k7e);Zyr=r(pIt,"model_type"),pIt.forEach(t),e8r=r(CL,` property of the config object (either
passed as an argument or loaded from `),S7e=n(CL,"CODE",{});var _It=s(S7e);o8r=r(_It,"pretrained_model_name_or_path"),_It.forEach(t),r8r=r(CL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=n(CL,"CODE",{});var uIt=s(R7e);t8r=r(uIt,"pretrained_model_name_or_path"),uIt.forEach(t),a8r=r(CL,":"),CL.forEach(t),n8r=i(Ol),ye=n(Ol,"UL",{});var Ie=s(ye);HM=n(Ie,"LI",{});var YDe=s(HM);P7e=n(YDe,"STRONG",{});var bIt=s(P7e);s8r=r(bIt,"bart"),bIt.forEach(t),l8r=r(YDe," \u2014 "),nK=n(YDe,"A",{href:!0});var vIt=s(nK);i8r=r(vIt,"TFBartForConditionalGeneration"),vIt.forEach(t),d8r=r(YDe," (BART model)"),YDe.forEach(t),c8r=i(Ie),UM=n(Ie,"LI",{});var KDe=s(UM);B7e=n(KDe,"STRONG",{});var FIt=s(B7e);f8r=r(FIt,"blenderbot"),FIt.forEach(t),m8r=r(KDe," \u2014 "),sK=n(KDe,"A",{href:!0});var TIt=s(sK);g8r=r(TIt,"TFBlenderbotForConditionalGeneration"),TIt.forEach(t),h8r=r(KDe," (Blenderbot model)"),KDe.forEach(t),p8r=i(Ie),JM=n(Ie,"LI",{});var ZDe=s(JM);I7e=n(ZDe,"STRONG",{});var MIt=s(I7e);_8r=r(MIt,"blenderbot-small"),MIt.forEach(t),u8r=r(ZDe," \u2014 "),lK=n(ZDe,"A",{href:!0});var EIt=s(lK);b8r=r(EIt,"TFBlenderbotSmallForConditionalGeneration"),EIt.forEach(t),v8r=r(ZDe," (BlenderbotSmall model)"),ZDe.forEach(t),F8r=i(Ie),YM=n(Ie,"LI",{});var eGe=s(YM);N7e=n(eGe,"STRONG",{});var CIt=s(N7e);T8r=r(CIt,"encoder-decoder"),CIt.forEach(t),M8r=r(eGe," \u2014 "),iK=n(eGe,"A",{href:!0});var wIt=s(iK);E8r=r(wIt,"TFEncoderDecoderModel"),wIt.forEach(t),C8r=r(eGe," (Encoder decoder model)"),eGe.forEach(t),w8r=i(Ie),KM=n(Ie,"LI",{});var oGe=s(KM);q7e=n(oGe,"STRONG",{});var AIt=s(q7e);A8r=r(AIt,"led"),AIt.forEach(t),L8r=r(oGe," \u2014 "),dK=n(oGe,"A",{href:!0});var LIt=s(dK);y8r=r(LIt,"TFLEDForConditionalGeneration"),LIt.forEach(t),x8r=r(oGe," (LED model)"),oGe.forEach(t),$8r=i(Ie),ZM=n(Ie,"LI",{});var rGe=s(ZM);j7e=n(rGe,"STRONG",{});var yIt=s(j7e);k8r=r(yIt,"marian"),yIt.forEach(t),S8r=r(rGe," \u2014 "),cK=n(rGe,"A",{href:!0});var xIt=s(cK);R8r=r(xIt,"TFMarianMTModel"),xIt.forEach(t),P8r=r(rGe," (Marian model)"),rGe.forEach(t),B8r=i(Ie),eE=n(Ie,"LI",{});var tGe=s(eE);D7e=n(tGe,"STRONG",{});var $It=s(D7e);I8r=r($It,"mbart"),$It.forEach(t),N8r=r(tGe," \u2014 "),fK=n(tGe,"A",{href:!0});var kIt=s(fK);q8r=r(kIt,"TFMBartForConditionalGeneration"),kIt.forEach(t),j8r=r(tGe," (mBART model)"),tGe.forEach(t),D8r=i(Ie),oE=n(Ie,"LI",{});var aGe=s(oE);G7e=n(aGe,"STRONG",{});var SIt=s(G7e);G8r=r(SIt,"mt5"),SIt.forEach(t),O8r=r(aGe," \u2014 "),mK=n(aGe,"A",{href:!0});var RIt=s(mK);V8r=r(RIt,"TFMT5ForConditionalGeneration"),RIt.forEach(t),X8r=r(aGe," (MT5 model)"),aGe.forEach(t),z8r=i(Ie),rE=n(Ie,"LI",{});var nGe=s(rE);O7e=n(nGe,"STRONG",{});var PIt=s(O7e);W8r=r(PIt,"pegasus"),PIt.forEach(t),Q8r=r(nGe," \u2014 "),gK=n(nGe,"A",{href:!0});var BIt=s(gK);H8r=r(BIt,"TFPegasusForConditionalGeneration"),BIt.forEach(t),U8r=r(nGe," (Pegasus model)"),nGe.forEach(t),J8r=i(Ie),tE=n(Ie,"LI",{});var sGe=s(tE);V7e=n(sGe,"STRONG",{});var IIt=s(V7e);Y8r=r(IIt,"t5"),IIt.forEach(t),K8r=r(sGe," \u2014 "),hK=n(sGe,"A",{href:!0});var NIt=s(hK);Z8r=r(NIt,"TFT5ForConditionalGeneration"),NIt.forEach(t),e9r=r(sGe," (T5 model)"),sGe.forEach(t),Ie.forEach(t),o9r=i(Ol),T(aE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),iWe=i(f),Ac=n(f,"H2",{class:!0});var _He=s(Ac);nE=n(_He,"A",{id:!0,class:!0,href:!0});var qIt=s(nE);X7e=n(qIt,"SPAN",{});var jIt=s(X7e);T(kx.$$.fragment,jIt),jIt.forEach(t),qIt.forEach(t),r9r=i(_He),z7e=n(_He,"SPAN",{});var DIt=s(z7e);t9r=r(DIt,"TFAutoModelForSequenceClassification"),DIt.forEach(t),_He.forEach(t),dWe=i(f),ir=n(f,"DIV",{class:!0});var Vl=s(ir);T(Sx.$$.fragment,Vl),a9r=i(Vl),Lc=n(Vl,"P",{});var fae=s(Lc);n9r=r(fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pK=n(fae,"A",{href:!0});var GIt=s(pK);s9r=r(GIt,"from_pretrained()"),GIt.forEach(t),l9r=r(fae," class method or the "),_K=n(fae,"A",{href:!0});var OIt=s(_K);i9r=r(OIt,"from_config()"),OIt.forEach(t),d9r=r(fae,` class
method.`),fae.forEach(t),c9r=i(Vl),Rx=n(Vl,"P",{});var uHe=s(Rx);f9r=r(uHe,"This class cannot be instantiated directly using "),W7e=n(uHe,"CODE",{});var VIt=s(W7e);m9r=r(VIt,"__init__()"),VIt.forEach(t),g9r=r(uHe," (throws an error)."),uHe.forEach(t),h9r=i(Vl),jt=n(Vl,"DIV",{class:!0});var wL=s(jt);T(Px.$$.fragment,wL),p9r=i(wL),Q7e=n(wL,"P",{});var XIt=s(Q7e);_9r=r(XIt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XIt.forEach(t),u9r=i(wL),yc=n(wL,"P",{});var mae=s(yc);b9r=r(mae,`Note:
Loading a model from its configuration file does `),H7e=n(mae,"STRONG",{});var zIt=s(H7e);v9r=r(zIt,"not"),zIt.forEach(t),F9r=r(mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(mae,"A",{href:!0});var WIt=s(uK);T9r=r(WIt,"from_pretrained()"),WIt.forEach(t),M9r=r(mae," to load the model weights."),mae.forEach(t),E9r=i(wL),T(sE.$$.fragment,wL),wL.forEach(t),C9r=i(Vl),Ir=n(Vl,"DIV",{class:!0});var Xl=s(Ir);T(Bx.$$.fragment,Xl),w9r=i(Xl),U7e=n(Xl,"P",{});var QIt=s(U7e);A9r=r(QIt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),QIt.forEach(t),L9r=i(Xl),gn=n(Xl,"P",{});var AL=s(gn);y9r=r(AL,"The model class to instantiate is selected based on the "),J7e=n(AL,"CODE",{});var HIt=s(J7e);x9r=r(HIt,"model_type"),HIt.forEach(t),$9r=r(AL,` property of the config object (either
passed as an argument or loaded from `),Y7e=n(AL,"CODE",{});var UIt=s(Y7e);k9r=r(UIt,"pretrained_model_name_or_path"),UIt.forEach(t),S9r=r(AL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=n(AL,"CODE",{});var JIt=s(K7e);R9r=r(JIt,"pretrained_model_name_or_path"),JIt.forEach(t),P9r=r(AL,":"),AL.forEach(t),B9r=i(Xl),te=n(Xl,"UL",{});var ne=s(te);lE=n(ne,"LI",{});var lGe=s(lE);Z7e=n(lGe,"STRONG",{});var YIt=s(Z7e);I9r=r(YIt,"albert"),YIt.forEach(t),N9r=r(lGe," \u2014 "),bK=n(lGe,"A",{href:!0});var KIt=s(bK);q9r=r(KIt,"TFAlbertForSequenceClassification"),KIt.forEach(t),j9r=r(lGe," (ALBERT model)"),lGe.forEach(t),D9r=i(ne),iE=n(ne,"LI",{});var iGe=s(iE);eMe=n(iGe,"STRONG",{});var ZIt=s(eMe);G9r=r(ZIt,"bert"),ZIt.forEach(t),O9r=r(iGe," \u2014 "),vK=n(iGe,"A",{href:!0});var eNt=s(vK);V9r=r(eNt,"TFBertForSequenceClassification"),eNt.forEach(t),X9r=r(iGe," (BERT model)"),iGe.forEach(t),z9r=i(ne),dE=n(ne,"LI",{});var dGe=s(dE);oMe=n(dGe,"STRONG",{});var oNt=s(oMe);W9r=r(oNt,"camembert"),oNt.forEach(t),Q9r=r(dGe," \u2014 "),FK=n(dGe,"A",{href:!0});var rNt=s(FK);H9r=r(rNt,"TFCamembertForSequenceClassification"),rNt.forEach(t),U9r=r(dGe," (CamemBERT model)"),dGe.forEach(t),J9r=i(ne),cE=n(ne,"LI",{});var cGe=s(cE);rMe=n(cGe,"STRONG",{});var tNt=s(rMe);Y9r=r(tNt,"convbert"),tNt.forEach(t),K9r=r(cGe," \u2014 "),TK=n(cGe,"A",{href:!0});var aNt=s(TK);Z9r=r(aNt,"TFConvBertForSequenceClassification"),aNt.forEach(t),exr=r(cGe," (ConvBERT model)"),cGe.forEach(t),oxr=i(ne),fE=n(ne,"LI",{});var fGe=s(fE);tMe=n(fGe,"STRONG",{});var nNt=s(tMe);rxr=r(nNt,"ctrl"),nNt.forEach(t),txr=r(fGe," \u2014 "),MK=n(fGe,"A",{href:!0});var sNt=s(MK);axr=r(sNt,"TFCTRLForSequenceClassification"),sNt.forEach(t),nxr=r(fGe," (CTRL model)"),fGe.forEach(t),sxr=i(ne),mE=n(ne,"LI",{});var mGe=s(mE);aMe=n(mGe,"STRONG",{});var lNt=s(aMe);lxr=r(lNt,"deberta"),lNt.forEach(t),ixr=r(mGe," \u2014 "),EK=n(mGe,"A",{href:!0});var iNt=s(EK);dxr=r(iNt,"TFDebertaForSequenceClassification"),iNt.forEach(t),cxr=r(mGe," (DeBERTa model)"),mGe.forEach(t),fxr=i(ne),gE=n(ne,"LI",{});var gGe=s(gE);nMe=n(gGe,"STRONG",{});var dNt=s(nMe);mxr=r(dNt,"deberta-v2"),dNt.forEach(t),gxr=r(gGe," \u2014 "),CK=n(gGe,"A",{href:!0});var cNt=s(CK);hxr=r(cNt,"TFDebertaV2ForSequenceClassification"),cNt.forEach(t),pxr=r(gGe," (DeBERTa-v2 model)"),gGe.forEach(t),_xr=i(ne),hE=n(ne,"LI",{});var hGe=s(hE);sMe=n(hGe,"STRONG",{});var fNt=s(sMe);uxr=r(fNt,"distilbert"),fNt.forEach(t),bxr=r(hGe," \u2014 "),wK=n(hGe,"A",{href:!0});var mNt=s(wK);vxr=r(mNt,"TFDistilBertForSequenceClassification"),mNt.forEach(t),Fxr=r(hGe," (DistilBERT model)"),hGe.forEach(t),Txr=i(ne),pE=n(ne,"LI",{});var pGe=s(pE);lMe=n(pGe,"STRONG",{});var gNt=s(lMe);Mxr=r(gNt,"electra"),gNt.forEach(t),Exr=r(pGe," \u2014 "),AK=n(pGe,"A",{href:!0});var hNt=s(AK);Cxr=r(hNt,"TFElectraForSequenceClassification"),hNt.forEach(t),wxr=r(pGe," (ELECTRA model)"),pGe.forEach(t),Axr=i(ne),_E=n(ne,"LI",{});var _Ge=s(_E);iMe=n(_Ge,"STRONG",{});var pNt=s(iMe);Lxr=r(pNt,"flaubert"),pNt.forEach(t),yxr=r(_Ge," \u2014 "),LK=n(_Ge,"A",{href:!0});var _Nt=s(LK);xxr=r(_Nt,"TFFlaubertForSequenceClassification"),_Nt.forEach(t),$xr=r(_Ge," (FlauBERT model)"),_Ge.forEach(t),kxr=i(ne),uE=n(ne,"LI",{});var uGe=s(uE);dMe=n(uGe,"STRONG",{});var uNt=s(dMe);Sxr=r(uNt,"funnel"),uNt.forEach(t),Rxr=r(uGe," \u2014 "),yK=n(uGe,"A",{href:!0});var bNt=s(yK);Pxr=r(bNt,"TFFunnelForSequenceClassification"),bNt.forEach(t),Bxr=r(uGe," (Funnel Transformer model)"),uGe.forEach(t),Ixr=i(ne),bE=n(ne,"LI",{});var bGe=s(bE);cMe=n(bGe,"STRONG",{});var vNt=s(cMe);Nxr=r(vNt,"gpt2"),vNt.forEach(t),qxr=r(bGe," \u2014 "),xK=n(bGe,"A",{href:!0});var FNt=s(xK);jxr=r(FNt,"TFGPT2ForSequenceClassification"),FNt.forEach(t),Dxr=r(bGe," (OpenAI GPT-2 model)"),bGe.forEach(t),Gxr=i(ne),vE=n(ne,"LI",{});var vGe=s(vE);fMe=n(vGe,"STRONG",{});var TNt=s(fMe);Oxr=r(TNt,"gptj"),TNt.forEach(t),Vxr=r(vGe," \u2014 "),$K=n(vGe,"A",{href:!0});var MNt=s($K);Xxr=r(MNt,"TFGPTJForSequenceClassification"),MNt.forEach(t),zxr=r(vGe," (GPT-J model)"),vGe.forEach(t),Wxr=i(ne),FE=n(ne,"LI",{});var FGe=s(FE);mMe=n(FGe,"STRONG",{});var ENt=s(mMe);Qxr=r(ENt,"layoutlm"),ENt.forEach(t),Hxr=r(FGe," \u2014 "),kK=n(FGe,"A",{href:!0});var CNt=s(kK);Uxr=r(CNt,"TFLayoutLMForSequenceClassification"),CNt.forEach(t),Jxr=r(FGe," (LayoutLM model)"),FGe.forEach(t),Yxr=i(ne),TE=n(ne,"LI",{});var TGe=s(TE);gMe=n(TGe,"STRONG",{});var wNt=s(gMe);Kxr=r(wNt,"longformer"),wNt.forEach(t),Zxr=r(TGe," \u2014 "),SK=n(TGe,"A",{href:!0});var ANt=s(SK);e$r=r(ANt,"TFLongformerForSequenceClassification"),ANt.forEach(t),o$r=r(TGe," (Longformer model)"),TGe.forEach(t),r$r=i(ne),ME=n(ne,"LI",{});var MGe=s(ME);hMe=n(MGe,"STRONG",{});var LNt=s(hMe);t$r=r(LNt,"mobilebert"),LNt.forEach(t),a$r=r(MGe," \u2014 "),RK=n(MGe,"A",{href:!0});var yNt=s(RK);n$r=r(yNt,"TFMobileBertForSequenceClassification"),yNt.forEach(t),s$r=r(MGe," (MobileBERT model)"),MGe.forEach(t),l$r=i(ne),EE=n(ne,"LI",{});var EGe=s(EE);pMe=n(EGe,"STRONG",{});var xNt=s(pMe);i$r=r(xNt,"mpnet"),xNt.forEach(t),d$r=r(EGe," \u2014 "),PK=n(EGe,"A",{href:!0});var $Nt=s(PK);c$r=r($Nt,"TFMPNetForSequenceClassification"),$Nt.forEach(t),f$r=r(EGe," (MPNet model)"),EGe.forEach(t),m$r=i(ne),CE=n(ne,"LI",{});var CGe=s(CE);_Me=n(CGe,"STRONG",{});var kNt=s(_Me);g$r=r(kNt,"openai-gpt"),kNt.forEach(t),h$r=r(CGe," \u2014 "),BK=n(CGe,"A",{href:!0});var SNt=s(BK);p$r=r(SNt,"TFOpenAIGPTForSequenceClassification"),SNt.forEach(t),_$r=r(CGe," (OpenAI GPT model)"),CGe.forEach(t),u$r=i(ne),wE=n(ne,"LI",{});var wGe=s(wE);uMe=n(wGe,"STRONG",{});var RNt=s(uMe);b$r=r(RNt,"rembert"),RNt.forEach(t),v$r=r(wGe," \u2014 "),IK=n(wGe,"A",{href:!0});var PNt=s(IK);F$r=r(PNt,"TFRemBertForSequenceClassification"),PNt.forEach(t),T$r=r(wGe," (RemBERT model)"),wGe.forEach(t),M$r=i(ne),AE=n(ne,"LI",{});var AGe=s(AE);bMe=n(AGe,"STRONG",{});var BNt=s(bMe);E$r=r(BNt,"roberta"),BNt.forEach(t),C$r=r(AGe," \u2014 "),NK=n(AGe,"A",{href:!0});var INt=s(NK);w$r=r(INt,"TFRobertaForSequenceClassification"),INt.forEach(t),A$r=r(AGe," (RoBERTa model)"),AGe.forEach(t),L$r=i(ne),LE=n(ne,"LI",{});var LGe=s(LE);vMe=n(LGe,"STRONG",{});var NNt=s(vMe);y$r=r(NNt,"roformer"),NNt.forEach(t),x$r=r(LGe," \u2014 "),qK=n(LGe,"A",{href:!0});var qNt=s(qK);$$r=r(qNt,"TFRoFormerForSequenceClassification"),qNt.forEach(t),k$r=r(LGe," (RoFormer model)"),LGe.forEach(t),S$r=i(ne),yE=n(ne,"LI",{});var yGe=s(yE);FMe=n(yGe,"STRONG",{});var jNt=s(FMe);R$r=r(jNt,"tapas"),jNt.forEach(t),P$r=r(yGe," \u2014 "),jK=n(yGe,"A",{href:!0});var DNt=s(jK);B$r=r(DNt,"TFTapasForSequenceClassification"),DNt.forEach(t),I$r=r(yGe," (TAPAS model)"),yGe.forEach(t),N$r=i(ne),xE=n(ne,"LI",{});var xGe=s(xE);TMe=n(xGe,"STRONG",{});var GNt=s(TMe);q$r=r(GNt,"transfo-xl"),GNt.forEach(t),j$r=r(xGe," \u2014 "),DK=n(xGe,"A",{href:!0});var ONt=s(DK);D$r=r(ONt,"TFTransfoXLForSequenceClassification"),ONt.forEach(t),G$r=r(xGe," (Transformer-XL model)"),xGe.forEach(t),O$r=i(ne),$E=n(ne,"LI",{});var $Ge=s($E);MMe=n($Ge,"STRONG",{});var VNt=s(MMe);V$r=r(VNt,"xlm"),VNt.forEach(t),X$r=r($Ge," \u2014 "),GK=n($Ge,"A",{href:!0});var XNt=s(GK);z$r=r(XNt,"TFXLMForSequenceClassification"),XNt.forEach(t),W$r=r($Ge," (XLM model)"),$Ge.forEach(t),Q$r=i(ne),kE=n(ne,"LI",{});var kGe=s(kE);EMe=n(kGe,"STRONG",{});var zNt=s(EMe);H$r=r(zNt,"xlm-roberta"),zNt.forEach(t),U$r=r(kGe," \u2014 "),OK=n(kGe,"A",{href:!0});var WNt=s(OK);J$r=r(WNt,"TFXLMRobertaForSequenceClassification"),WNt.forEach(t),Y$r=r(kGe," (XLM-RoBERTa model)"),kGe.forEach(t),K$r=i(ne),SE=n(ne,"LI",{});var SGe=s(SE);CMe=n(SGe,"STRONG",{});var QNt=s(CMe);Z$r=r(QNt,"xlnet"),QNt.forEach(t),ekr=r(SGe," \u2014 "),VK=n(SGe,"A",{href:!0});var HNt=s(VK);okr=r(HNt,"TFXLNetForSequenceClassification"),HNt.forEach(t),rkr=r(SGe," (XLNet model)"),SGe.forEach(t),ne.forEach(t),tkr=i(Xl),T(RE.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),cWe=i(f),xc=n(f,"H2",{class:!0});var bHe=s(xc);PE=n(bHe,"A",{id:!0,class:!0,href:!0});var UNt=s(PE);wMe=n(UNt,"SPAN",{});var JNt=s(wMe);T(Ix.$$.fragment,JNt),JNt.forEach(t),UNt.forEach(t),akr=i(bHe),AMe=n(bHe,"SPAN",{});var YNt=s(AMe);nkr=r(YNt,"TFAutoModelForMultipleChoice"),YNt.forEach(t),bHe.forEach(t),fWe=i(f),dr=n(f,"DIV",{class:!0});var zl=s(dr);T(Nx.$$.fragment,zl),skr=i(zl),$c=n(zl,"P",{});var gae=s($c);lkr=r(gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XK=n(gae,"A",{href:!0});var KNt=s(XK);ikr=r(KNt,"from_pretrained()"),KNt.forEach(t),dkr=r(gae," class method or the "),zK=n(gae,"A",{href:!0});var ZNt=s(zK);ckr=r(ZNt,"from_config()"),ZNt.forEach(t),fkr=r(gae,` class
method.`),gae.forEach(t),mkr=i(zl),qx=n(zl,"P",{});var vHe=s(qx);gkr=r(vHe,"This class cannot be instantiated directly using "),LMe=n(vHe,"CODE",{});var eqt=s(LMe);hkr=r(eqt,"__init__()"),eqt.forEach(t),pkr=r(vHe," (throws an error)."),vHe.forEach(t),_kr=i(zl),Dt=n(zl,"DIV",{class:!0});var LL=s(Dt);T(jx.$$.fragment,LL),ukr=i(LL),yMe=n(LL,"P",{});var oqt=s(yMe);bkr=r(oqt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oqt.forEach(t),vkr=i(LL),kc=n(LL,"P",{});var hae=s(kc);Fkr=r(hae,`Note:
Loading a model from its configuration file does `),xMe=n(hae,"STRONG",{});var rqt=s(xMe);Tkr=r(rqt,"not"),rqt.forEach(t),Mkr=r(hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=n(hae,"A",{href:!0});var tqt=s(WK);Ekr=r(tqt,"from_pretrained()"),tqt.forEach(t),Ckr=r(hae," to load the model weights."),hae.forEach(t),wkr=i(LL),T(BE.$$.fragment,LL),LL.forEach(t),Akr=i(zl),Nr=n(zl,"DIV",{class:!0});var Wl=s(Nr);T(Dx.$$.fragment,Wl),Lkr=i(Wl),$Me=n(Wl,"P",{});var aqt=s($Me);ykr=r(aqt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),aqt.forEach(t),xkr=i(Wl),hn=n(Wl,"P",{});var yL=s(hn);$kr=r(yL,"The model class to instantiate is selected based on the "),kMe=n(yL,"CODE",{});var nqt=s(kMe);kkr=r(nqt,"model_type"),nqt.forEach(t),Skr=r(yL,` property of the config object (either
passed as an argument or loaded from `),SMe=n(yL,"CODE",{});var sqt=s(SMe);Rkr=r(sqt,"pretrained_model_name_or_path"),sqt.forEach(t),Pkr=r(yL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RMe=n(yL,"CODE",{});var lqt=s(RMe);Bkr=r(lqt,"pretrained_model_name_or_path"),lqt.forEach(t),Ikr=r(yL,":"),yL.forEach(t),Nkr=i(Wl),be=n(Wl,"UL",{});var Fe=s(be);IE=n(Fe,"LI",{});var RGe=s(IE);PMe=n(RGe,"STRONG",{});var iqt=s(PMe);qkr=r(iqt,"albert"),iqt.forEach(t),jkr=r(RGe," \u2014 "),QK=n(RGe,"A",{href:!0});var dqt=s(QK);Dkr=r(dqt,"TFAlbertForMultipleChoice"),dqt.forEach(t),Gkr=r(RGe," (ALBERT model)"),RGe.forEach(t),Okr=i(Fe),NE=n(Fe,"LI",{});var PGe=s(NE);BMe=n(PGe,"STRONG",{});var cqt=s(BMe);Vkr=r(cqt,"bert"),cqt.forEach(t),Xkr=r(PGe," \u2014 "),HK=n(PGe,"A",{href:!0});var fqt=s(HK);zkr=r(fqt,"TFBertForMultipleChoice"),fqt.forEach(t),Wkr=r(PGe," (BERT model)"),PGe.forEach(t),Qkr=i(Fe),qE=n(Fe,"LI",{});var BGe=s(qE);IMe=n(BGe,"STRONG",{});var mqt=s(IMe);Hkr=r(mqt,"camembert"),mqt.forEach(t),Ukr=r(BGe," \u2014 "),UK=n(BGe,"A",{href:!0});var gqt=s(UK);Jkr=r(gqt,"TFCamembertForMultipleChoice"),gqt.forEach(t),Ykr=r(BGe," (CamemBERT model)"),BGe.forEach(t),Kkr=i(Fe),jE=n(Fe,"LI",{});var IGe=s(jE);NMe=n(IGe,"STRONG",{});var hqt=s(NMe);Zkr=r(hqt,"convbert"),hqt.forEach(t),eSr=r(IGe," \u2014 "),JK=n(IGe,"A",{href:!0});var pqt=s(JK);oSr=r(pqt,"TFConvBertForMultipleChoice"),pqt.forEach(t),rSr=r(IGe," (ConvBERT model)"),IGe.forEach(t),tSr=i(Fe),DE=n(Fe,"LI",{});var NGe=s(DE);qMe=n(NGe,"STRONG",{});var _qt=s(qMe);aSr=r(_qt,"distilbert"),_qt.forEach(t),nSr=r(NGe," \u2014 "),YK=n(NGe,"A",{href:!0});var uqt=s(YK);sSr=r(uqt,"TFDistilBertForMultipleChoice"),uqt.forEach(t),lSr=r(NGe," (DistilBERT model)"),NGe.forEach(t),iSr=i(Fe),GE=n(Fe,"LI",{});var qGe=s(GE);jMe=n(qGe,"STRONG",{});var bqt=s(jMe);dSr=r(bqt,"electra"),bqt.forEach(t),cSr=r(qGe," \u2014 "),KK=n(qGe,"A",{href:!0});var vqt=s(KK);fSr=r(vqt,"TFElectraForMultipleChoice"),vqt.forEach(t),mSr=r(qGe," (ELECTRA model)"),qGe.forEach(t),gSr=i(Fe),OE=n(Fe,"LI",{});var jGe=s(OE);DMe=n(jGe,"STRONG",{});var Fqt=s(DMe);hSr=r(Fqt,"flaubert"),Fqt.forEach(t),pSr=r(jGe," \u2014 "),ZK=n(jGe,"A",{href:!0});var Tqt=s(ZK);_Sr=r(Tqt,"TFFlaubertForMultipleChoice"),Tqt.forEach(t),uSr=r(jGe," (FlauBERT model)"),jGe.forEach(t),bSr=i(Fe),VE=n(Fe,"LI",{});var DGe=s(VE);GMe=n(DGe,"STRONG",{});var Mqt=s(GMe);vSr=r(Mqt,"funnel"),Mqt.forEach(t),FSr=r(DGe," \u2014 "),eZ=n(DGe,"A",{href:!0});var Eqt=s(eZ);TSr=r(Eqt,"TFFunnelForMultipleChoice"),Eqt.forEach(t),MSr=r(DGe," (Funnel Transformer model)"),DGe.forEach(t),ESr=i(Fe),XE=n(Fe,"LI",{});var GGe=s(XE);OMe=n(GGe,"STRONG",{});var Cqt=s(OMe);CSr=r(Cqt,"longformer"),Cqt.forEach(t),wSr=r(GGe," \u2014 "),oZ=n(GGe,"A",{href:!0});var wqt=s(oZ);ASr=r(wqt,"TFLongformerForMultipleChoice"),wqt.forEach(t),LSr=r(GGe," (Longformer model)"),GGe.forEach(t),ySr=i(Fe),zE=n(Fe,"LI",{});var OGe=s(zE);VMe=n(OGe,"STRONG",{});var Aqt=s(VMe);xSr=r(Aqt,"mobilebert"),Aqt.forEach(t),$Sr=r(OGe," \u2014 "),rZ=n(OGe,"A",{href:!0});var Lqt=s(rZ);kSr=r(Lqt,"TFMobileBertForMultipleChoice"),Lqt.forEach(t),SSr=r(OGe," (MobileBERT model)"),OGe.forEach(t),RSr=i(Fe),WE=n(Fe,"LI",{});var VGe=s(WE);XMe=n(VGe,"STRONG",{});var yqt=s(XMe);PSr=r(yqt,"mpnet"),yqt.forEach(t),BSr=r(VGe," \u2014 "),tZ=n(VGe,"A",{href:!0});var xqt=s(tZ);ISr=r(xqt,"TFMPNetForMultipleChoice"),xqt.forEach(t),NSr=r(VGe," (MPNet model)"),VGe.forEach(t),qSr=i(Fe),QE=n(Fe,"LI",{});var XGe=s(QE);zMe=n(XGe,"STRONG",{});var $qt=s(zMe);jSr=r($qt,"rembert"),$qt.forEach(t),DSr=r(XGe," \u2014 "),aZ=n(XGe,"A",{href:!0});var kqt=s(aZ);GSr=r(kqt,"TFRemBertForMultipleChoice"),kqt.forEach(t),OSr=r(XGe," (RemBERT model)"),XGe.forEach(t),VSr=i(Fe),HE=n(Fe,"LI",{});var zGe=s(HE);WMe=n(zGe,"STRONG",{});var Sqt=s(WMe);XSr=r(Sqt,"roberta"),Sqt.forEach(t),zSr=r(zGe," \u2014 "),nZ=n(zGe,"A",{href:!0});var Rqt=s(nZ);WSr=r(Rqt,"TFRobertaForMultipleChoice"),Rqt.forEach(t),QSr=r(zGe," (RoBERTa model)"),zGe.forEach(t),HSr=i(Fe),UE=n(Fe,"LI",{});var WGe=s(UE);QMe=n(WGe,"STRONG",{});var Pqt=s(QMe);USr=r(Pqt,"roformer"),Pqt.forEach(t),JSr=r(WGe," \u2014 "),sZ=n(WGe,"A",{href:!0});var Bqt=s(sZ);YSr=r(Bqt,"TFRoFormerForMultipleChoice"),Bqt.forEach(t),KSr=r(WGe," (RoFormer model)"),WGe.forEach(t),ZSr=i(Fe),JE=n(Fe,"LI",{});var QGe=s(JE);HMe=n(QGe,"STRONG",{});var Iqt=s(HMe);eRr=r(Iqt,"xlm"),Iqt.forEach(t),oRr=r(QGe," \u2014 "),lZ=n(QGe,"A",{href:!0});var Nqt=s(lZ);rRr=r(Nqt,"TFXLMForMultipleChoice"),Nqt.forEach(t),tRr=r(QGe," (XLM model)"),QGe.forEach(t),aRr=i(Fe),YE=n(Fe,"LI",{});var HGe=s(YE);UMe=n(HGe,"STRONG",{});var qqt=s(UMe);nRr=r(qqt,"xlm-roberta"),qqt.forEach(t),sRr=r(HGe," \u2014 "),iZ=n(HGe,"A",{href:!0});var jqt=s(iZ);lRr=r(jqt,"TFXLMRobertaForMultipleChoice"),jqt.forEach(t),iRr=r(HGe," (XLM-RoBERTa model)"),HGe.forEach(t),dRr=i(Fe),KE=n(Fe,"LI",{});var UGe=s(KE);JMe=n(UGe,"STRONG",{});var Dqt=s(JMe);cRr=r(Dqt,"xlnet"),Dqt.forEach(t),fRr=r(UGe," \u2014 "),dZ=n(UGe,"A",{href:!0});var Gqt=s(dZ);mRr=r(Gqt,"TFXLNetForMultipleChoice"),Gqt.forEach(t),gRr=r(UGe," (XLNet model)"),UGe.forEach(t),Fe.forEach(t),hRr=i(Wl),T(ZE.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),mWe=i(f),Sc=n(f,"H2",{class:!0});var FHe=s(Sc);eC=n(FHe,"A",{id:!0,class:!0,href:!0});var Oqt=s(eC);YMe=n(Oqt,"SPAN",{});var Vqt=s(YMe);T(Gx.$$.fragment,Vqt),Vqt.forEach(t),Oqt.forEach(t),pRr=i(FHe),KMe=n(FHe,"SPAN",{});var Xqt=s(KMe);_Rr=r(Xqt,"TFAutoModelForNextSentencePrediction"),Xqt.forEach(t),FHe.forEach(t),gWe=i(f),cr=n(f,"DIV",{class:!0});var Ql=s(cr);T(Ox.$$.fragment,Ql),uRr=i(Ql),Rc=n(Ql,"P",{});var pae=s(Rc);bRr=r(pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cZ=n(pae,"A",{href:!0});var zqt=s(cZ);vRr=r(zqt,"from_pretrained()"),zqt.forEach(t),FRr=r(pae," class method or the "),fZ=n(pae,"A",{href:!0});var Wqt=s(fZ);TRr=r(Wqt,"from_config()"),Wqt.forEach(t),MRr=r(pae,` class
method.`),pae.forEach(t),ERr=i(Ql),Vx=n(Ql,"P",{});var THe=s(Vx);CRr=r(THe,"This class cannot be instantiated directly using "),ZMe=n(THe,"CODE",{});var Qqt=s(ZMe);wRr=r(Qqt,"__init__()"),Qqt.forEach(t),ARr=r(THe," (throws an error)."),THe.forEach(t),LRr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var xL=s(Gt);T(Xx.$$.fragment,xL),yRr=i(xL),eEe=n(xL,"P",{});var Hqt=s(eEe);xRr=r(Hqt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Hqt.forEach(t),$Rr=i(xL),Pc=n(xL,"P",{});var _ae=s(Pc);kRr=r(_ae,`Note:
Loading a model from its configuration file does `),oEe=n(_ae,"STRONG",{});var Uqt=s(oEe);SRr=r(Uqt,"not"),Uqt.forEach(t),RRr=r(_ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=n(_ae,"A",{href:!0});var Jqt=s(mZ);PRr=r(Jqt,"from_pretrained()"),Jqt.forEach(t),BRr=r(_ae," to load the model weights."),_ae.forEach(t),IRr=i(xL),T(oC.$$.fragment,xL),xL.forEach(t),NRr=i(Ql),qr=n(Ql,"DIV",{class:!0});var Hl=s(qr);T(zx.$$.fragment,Hl),qRr=i(Hl),rEe=n(Hl,"P",{});var Yqt=s(rEe);jRr=r(Yqt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Yqt.forEach(t),DRr=i(Hl),pn=n(Hl,"P",{});var $L=s(pn);GRr=r($L,"The model class to instantiate is selected based on the "),tEe=n($L,"CODE",{});var Kqt=s(tEe);ORr=r(Kqt,"model_type"),Kqt.forEach(t),VRr=r($L,` property of the config object (either
passed as an argument or loaded from `),aEe=n($L,"CODE",{});var Zqt=s(aEe);XRr=r(Zqt,"pretrained_model_name_or_path"),Zqt.forEach(t),zRr=r($L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nEe=n($L,"CODE",{});var ejt=s(nEe);WRr=r(ejt,"pretrained_model_name_or_path"),ejt.forEach(t),QRr=r($L,":"),$L.forEach(t),HRr=i(Hl),Wx=n(Hl,"UL",{});var MHe=s(Wx);rC=n(MHe,"LI",{});var JGe=s(rC);sEe=n(JGe,"STRONG",{});var ojt=s(sEe);URr=r(ojt,"bert"),ojt.forEach(t),JRr=r(JGe," \u2014 "),gZ=n(JGe,"A",{href:!0});var rjt=s(gZ);YRr=r(rjt,"TFBertForNextSentencePrediction"),rjt.forEach(t),KRr=r(JGe," (BERT model)"),JGe.forEach(t),ZRr=i(MHe),tC=n(MHe,"LI",{});var YGe=s(tC);lEe=n(YGe,"STRONG",{});var tjt=s(lEe);ePr=r(tjt,"mobilebert"),tjt.forEach(t),oPr=r(YGe," \u2014 "),hZ=n(YGe,"A",{href:!0});var ajt=s(hZ);rPr=r(ajt,"TFMobileBertForNextSentencePrediction"),ajt.forEach(t),tPr=r(YGe," (MobileBERT model)"),YGe.forEach(t),MHe.forEach(t),aPr=i(Hl),T(aC.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),hWe=i(f),Bc=n(f,"H2",{class:!0});var EHe=s(Bc);nC=n(EHe,"A",{id:!0,class:!0,href:!0});var njt=s(nC);iEe=n(njt,"SPAN",{});var sjt=s(iEe);T(Qx.$$.fragment,sjt),sjt.forEach(t),njt.forEach(t),nPr=i(EHe),dEe=n(EHe,"SPAN",{});var ljt=s(dEe);sPr=r(ljt,"TFAutoModelForTableQuestionAnswering"),ljt.forEach(t),EHe.forEach(t),pWe=i(f),fr=n(f,"DIV",{class:!0});var Ul=s(fr);T(Hx.$$.fragment,Ul),lPr=i(Ul),Ic=n(Ul,"P",{});var uae=s(Ic);iPr=r(uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pZ=n(uae,"A",{href:!0});var ijt=s(pZ);dPr=r(ijt,"from_pretrained()"),ijt.forEach(t),cPr=r(uae," class method or the "),_Z=n(uae,"A",{href:!0});var djt=s(_Z);fPr=r(djt,"from_config()"),djt.forEach(t),mPr=r(uae,` class
method.`),uae.forEach(t),gPr=i(Ul),Ux=n(Ul,"P",{});var CHe=s(Ux);hPr=r(CHe,"This class cannot be instantiated directly using "),cEe=n(CHe,"CODE",{});var cjt=s(cEe);pPr=r(cjt,"__init__()"),cjt.forEach(t),_Pr=r(CHe," (throws an error)."),CHe.forEach(t),uPr=i(Ul),Ot=n(Ul,"DIV",{class:!0});var kL=s(Ot);T(Jx.$$.fragment,kL),bPr=i(kL),fEe=n(kL,"P",{});var fjt=s(fEe);vPr=r(fjt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fjt.forEach(t),FPr=i(kL),Nc=n(kL,"P",{});var bae=s(Nc);TPr=r(bae,`Note:
Loading a model from its configuration file does `),mEe=n(bae,"STRONG",{});var mjt=s(mEe);MPr=r(mjt,"not"),mjt.forEach(t),EPr=r(bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=n(bae,"A",{href:!0});var gjt=s(uZ);CPr=r(gjt,"from_pretrained()"),gjt.forEach(t),wPr=r(bae," to load the model weights."),bae.forEach(t),APr=i(kL),T(sC.$$.fragment,kL),kL.forEach(t),LPr=i(Ul),jr=n(Ul,"DIV",{class:!0});var Jl=s(jr);T(Yx.$$.fragment,Jl),yPr=i(Jl),gEe=n(Jl,"P",{});var hjt=s(gEe);xPr=r(hjt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),hjt.forEach(t),$Pr=i(Jl),_n=n(Jl,"P",{});var SL=s(_n);kPr=r(SL,"The model class to instantiate is selected based on the "),hEe=n(SL,"CODE",{});var pjt=s(hEe);SPr=r(pjt,"model_type"),pjt.forEach(t),RPr=r(SL,` property of the config object (either
passed as an argument or loaded from `),pEe=n(SL,"CODE",{});var _jt=s(pEe);PPr=r(_jt,"pretrained_model_name_or_path"),_jt.forEach(t),BPr=r(SL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ee=n(SL,"CODE",{});var ujt=s(_Ee);IPr=r(ujt,"pretrained_model_name_or_path"),ujt.forEach(t),NPr=r(SL,":"),SL.forEach(t),qPr=i(Jl),uEe=n(Jl,"UL",{});var bjt=s(uEe);lC=n(bjt,"LI",{});var KGe=s(lC);bEe=n(KGe,"STRONG",{});var vjt=s(bEe);jPr=r(vjt,"tapas"),vjt.forEach(t),DPr=r(KGe," \u2014 "),bZ=n(KGe,"A",{href:!0});var Fjt=s(bZ);GPr=r(Fjt,"TFTapasForQuestionAnswering"),Fjt.forEach(t),OPr=r(KGe," (TAPAS model)"),KGe.forEach(t),bjt.forEach(t),VPr=i(Jl),T(iC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),_We=i(f),qc=n(f,"H2",{class:!0});var wHe=s(qc);dC=n(wHe,"A",{id:!0,class:!0,href:!0});var Tjt=s(dC);vEe=n(Tjt,"SPAN",{});var Mjt=s(vEe);T(Kx.$$.fragment,Mjt),Mjt.forEach(t),Tjt.forEach(t),XPr=i(wHe),FEe=n(wHe,"SPAN",{});var Ejt=s(FEe);zPr=r(Ejt,"TFAutoModelForTokenClassification"),Ejt.forEach(t),wHe.forEach(t),uWe=i(f),mr=n(f,"DIV",{class:!0});var Yl=s(mr);T(Zx.$$.fragment,Yl),WPr=i(Yl),jc=n(Yl,"P",{});var vae=s(jc);QPr=r(vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vZ=n(vae,"A",{href:!0});var Cjt=s(vZ);HPr=r(Cjt,"from_pretrained()"),Cjt.forEach(t),UPr=r(vae," class method or the "),FZ=n(vae,"A",{href:!0});var wjt=s(FZ);JPr=r(wjt,"from_config()"),wjt.forEach(t),YPr=r(vae,` class
method.`),vae.forEach(t),KPr=i(Yl),e$=n(Yl,"P",{});var AHe=s(e$);ZPr=r(AHe,"This class cannot be instantiated directly using "),TEe=n(AHe,"CODE",{});var Ajt=s(TEe);eBr=r(Ajt,"__init__()"),Ajt.forEach(t),oBr=r(AHe," (throws an error)."),AHe.forEach(t),rBr=i(Yl),Vt=n(Yl,"DIV",{class:!0});var RL=s(Vt);T(o$.$$.fragment,RL),tBr=i(RL),MEe=n(RL,"P",{});var Ljt=s(MEe);aBr=r(Ljt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ljt.forEach(t),nBr=i(RL),Dc=n(RL,"P",{});var Fae=s(Dc);sBr=r(Fae,`Note:
Loading a model from its configuration file does `),EEe=n(Fae,"STRONG",{});var yjt=s(EEe);lBr=r(yjt,"not"),yjt.forEach(t),iBr=r(Fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=n(Fae,"A",{href:!0});var xjt=s(TZ);dBr=r(xjt,"from_pretrained()"),xjt.forEach(t),cBr=r(Fae," to load the model weights."),Fae.forEach(t),fBr=i(RL),T(cC.$$.fragment,RL),RL.forEach(t),mBr=i(Yl),Dr=n(Yl,"DIV",{class:!0});var Kl=s(Dr);T(r$.$$.fragment,Kl),gBr=i(Kl),CEe=n(Kl,"P",{});var $jt=s(CEe);hBr=r($jt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$jt.forEach(t),pBr=i(Kl),un=n(Kl,"P",{});var PL=s(un);_Br=r(PL,"The model class to instantiate is selected based on the "),wEe=n(PL,"CODE",{});var kjt=s(wEe);uBr=r(kjt,"model_type"),kjt.forEach(t),bBr=r(PL,` property of the config object (either
passed as an argument or loaded from `),AEe=n(PL,"CODE",{});var Sjt=s(AEe);vBr=r(Sjt,"pretrained_model_name_or_path"),Sjt.forEach(t),FBr=r(PL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LEe=n(PL,"CODE",{});var Rjt=s(LEe);TBr=r(Rjt,"pretrained_model_name_or_path"),Rjt.forEach(t),MBr=r(PL,":"),PL.forEach(t),EBr=i(Kl),de=n(Kl,"UL",{});var he=s(de);fC=n(he,"LI",{});var ZGe=s(fC);yEe=n(ZGe,"STRONG",{});var Pjt=s(yEe);CBr=r(Pjt,"albert"),Pjt.forEach(t),wBr=r(ZGe," \u2014 "),MZ=n(ZGe,"A",{href:!0});var Bjt=s(MZ);ABr=r(Bjt,"TFAlbertForTokenClassification"),Bjt.forEach(t),LBr=r(ZGe," (ALBERT model)"),ZGe.forEach(t),yBr=i(he),mC=n(he,"LI",{});var eOe=s(mC);xEe=n(eOe,"STRONG",{});var Ijt=s(xEe);xBr=r(Ijt,"bert"),Ijt.forEach(t),$Br=r(eOe," \u2014 "),EZ=n(eOe,"A",{href:!0});var Njt=s(EZ);kBr=r(Njt,"TFBertForTokenClassification"),Njt.forEach(t),SBr=r(eOe," (BERT model)"),eOe.forEach(t),RBr=i(he),gC=n(he,"LI",{});var oOe=s(gC);$Ee=n(oOe,"STRONG",{});var qjt=s($Ee);PBr=r(qjt,"camembert"),qjt.forEach(t),BBr=r(oOe," \u2014 "),CZ=n(oOe,"A",{href:!0});var jjt=s(CZ);IBr=r(jjt,"TFCamembertForTokenClassification"),jjt.forEach(t),NBr=r(oOe," (CamemBERT model)"),oOe.forEach(t),qBr=i(he),hC=n(he,"LI",{});var rOe=s(hC);kEe=n(rOe,"STRONG",{});var Djt=s(kEe);jBr=r(Djt,"convbert"),Djt.forEach(t),DBr=r(rOe," \u2014 "),wZ=n(rOe,"A",{href:!0});var Gjt=s(wZ);GBr=r(Gjt,"TFConvBertForTokenClassification"),Gjt.forEach(t),OBr=r(rOe," (ConvBERT model)"),rOe.forEach(t),VBr=i(he),pC=n(he,"LI",{});var tOe=s(pC);SEe=n(tOe,"STRONG",{});var Ojt=s(SEe);XBr=r(Ojt,"deberta"),Ojt.forEach(t),zBr=r(tOe," \u2014 "),AZ=n(tOe,"A",{href:!0});var Vjt=s(AZ);WBr=r(Vjt,"TFDebertaForTokenClassification"),Vjt.forEach(t),QBr=r(tOe," (DeBERTa model)"),tOe.forEach(t),HBr=i(he),_C=n(he,"LI",{});var aOe=s(_C);REe=n(aOe,"STRONG",{});var Xjt=s(REe);UBr=r(Xjt,"deberta-v2"),Xjt.forEach(t),JBr=r(aOe," \u2014 "),LZ=n(aOe,"A",{href:!0});var zjt=s(LZ);YBr=r(zjt,"TFDebertaV2ForTokenClassification"),zjt.forEach(t),KBr=r(aOe," (DeBERTa-v2 model)"),aOe.forEach(t),ZBr=i(he),uC=n(he,"LI",{});var nOe=s(uC);PEe=n(nOe,"STRONG",{});var Wjt=s(PEe);eIr=r(Wjt,"distilbert"),Wjt.forEach(t),oIr=r(nOe," \u2014 "),yZ=n(nOe,"A",{href:!0});var Qjt=s(yZ);rIr=r(Qjt,"TFDistilBertForTokenClassification"),Qjt.forEach(t),tIr=r(nOe," (DistilBERT model)"),nOe.forEach(t),aIr=i(he),bC=n(he,"LI",{});var sOe=s(bC);BEe=n(sOe,"STRONG",{});var Hjt=s(BEe);nIr=r(Hjt,"electra"),Hjt.forEach(t),sIr=r(sOe," \u2014 "),xZ=n(sOe,"A",{href:!0});var Ujt=s(xZ);lIr=r(Ujt,"TFElectraForTokenClassification"),Ujt.forEach(t),iIr=r(sOe," (ELECTRA model)"),sOe.forEach(t),dIr=i(he),vC=n(he,"LI",{});var lOe=s(vC);IEe=n(lOe,"STRONG",{});var Jjt=s(IEe);cIr=r(Jjt,"flaubert"),Jjt.forEach(t),fIr=r(lOe," \u2014 "),$Z=n(lOe,"A",{href:!0});var Yjt=s($Z);mIr=r(Yjt,"TFFlaubertForTokenClassification"),Yjt.forEach(t),gIr=r(lOe," (FlauBERT model)"),lOe.forEach(t),hIr=i(he),FC=n(he,"LI",{});var iOe=s(FC);NEe=n(iOe,"STRONG",{});var Kjt=s(NEe);pIr=r(Kjt,"funnel"),Kjt.forEach(t),_Ir=r(iOe," \u2014 "),kZ=n(iOe,"A",{href:!0});var Zjt=s(kZ);uIr=r(Zjt,"TFFunnelForTokenClassification"),Zjt.forEach(t),bIr=r(iOe," (Funnel Transformer model)"),iOe.forEach(t),vIr=i(he),TC=n(he,"LI",{});var dOe=s(TC);qEe=n(dOe,"STRONG",{});var eDt=s(qEe);FIr=r(eDt,"layoutlm"),eDt.forEach(t),TIr=r(dOe," \u2014 "),SZ=n(dOe,"A",{href:!0});var oDt=s(SZ);MIr=r(oDt,"TFLayoutLMForTokenClassification"),oDt.forEach(t),EIr=r(dOe," (LayoutLM model)"),dOe.forEach(t),CIr=i(he),MC=n(he,"LI",{});var cOe=s(MC);jEe=n(cOe,"STRONG",{});var rDt=s(jEe);wIr=r(rDt,"longformer"),rDt.forEach(t),AIr=r(cOe," \u2014 "),RZ=n(cOe,"A",{href:!0});var tDt=s(RZ);LIr=r(tDt,"TFLongformerForTokenClassification"),tDt.forEach(t),yIr=r(cOe," (Longformer model)"),cOe.forEach(t),xIr=i(he),EC=n(he,"LI",{});var fOe=s(EC);DEe=n(fOe,"STRONG",{});var aDt=s(DEe);$Ir=r(aDt,"mobilebert"),aDt.forEach(t),kIr=r(fOe," \u2014 "),PZ=n(fOe,"A",{href:!0});var nDt=s(PZ);SIr=r(nDt,"TFMobileBertForTokenClassification"),nDt.forEach(t),RIr=r(fOe," (MobileBERT model)"),fOe.forEach(t),PIr=i(he),CC=n(he,"LI",{});var mOe=s(CC);GEe=n(mOe,"STRONG",{});var sDt=s(GEe);BIr=r(sDt,"mpnet"),sDt.forEach(t),IIr=r(mOe," \u2014 "),BZ=n(mOe,"A",{href:!0});var lDt=s(BZ);NIr=r(lDt,"TFMPNetForTokenClassification"),lDt.forEach(t),qIr=r(mOe," (MPNet model)"),mOe.forEach(t),jIr=i(he),wC=n(he,"LI",{});var gOe=s(wC);OEe=n(gOe,"STRONG",{});var iDt=s(OEe);DIr=r(iDt,"rembert"),iDt.forEach(t),GIr=r(gOe," \u2014 "),IZ=n(gOe,"A",{href:!0});var dDt=s(IZ);OIr=r(dDt,"TFRemBertForTokenClassification"),dDt.forEach(t),VIr=r(gOe," (RemBERT model)"),gOe.forEach(t),XIr=i(he),AC=n(he,"LI",{});var hOe=s(AC);VEe=n(hOe,"STRONG",{});var cDt=s(VEe);zIr=r(cDt,"roberta"),cDt.forEach(t),WIr=r(hOe," \u2014 "),NZ=n(hOe,"A",{href:!0});var fDt=s(NZ);QIr=r(fDt,"TFRobertaForTokenClassification"),fDt.forEach(t),HIr=r(hOe," (RoBERTa model)"),hOe.forEach(t),UIr=i(he),LC=n(he,"LI",{});var pOe=s(LC);XEe=n(pOe,"STRONG",{});var mDt=s(XEe);JIr=r(mDt,"roformer"),mDt.forEach(t),YIr=r(pOe," \u2014 "),qZ=n(pOe,"A",{href:!0});var gDt=s(qZ);KIr=r(gDt,"TFRoFormerForTokenClassification"),gDt.forEach(t),ZIr=r(pOe," (RoFormer model)"),pOe.forEach(t),eNr=i(he),yC=n(he,"LI",{});var _Oe=s(yC);zEe=n(_Oe,"STRONG",{});var hDt=s(zEe);oNr=r(hDt,"xlm"),hDt.forEach(t),rNr=r(_Oe," \u2014 "),jZ=n(_Oe,"A",{href:!0});var pDt=s(jZ);tNr=r(pDt,"TFXLMForTokenClassification"),pDt.forEach(t),aNr=r(_Oe," (XLM model)"),_Oe.forEach(t),nNr=i(he),xC=n(he,"LI",{});var uOe=s(xC);WEe=n(uOe,"STRONG",{});var _Dt=s(WEe);sNr=r(_Dt,"xlm-roberta"),_Dt.forEach(t),lNr=r(uOe," \u2014 "),DZ=n(uOe,"A",{href:!0});var uDt=s(DZ);iNr=r(uDt,"TFXLMRobertaForTokenClassification"),uDt.forEach(t),dNr=r(uOe," (XLM-RoBERTa model)"),uOe.forEach(t),cNr=i(he),$C=n(he,"LI",{});var bOe=s($C);QEe=n(bOe,"STRONG",{});var bDt=s(QEe);fNr=r(bDt,"xlnet"),bDt.forEach(t),mNr=r(bOe," \u2014 "),GZ=n(bOe,"A",{href:!0});var vDt=s(GZ);gNr=r(vDt,"TFXLNetForTokenClassification"),vDt.forEach(t),hNr=r(bOe," (XLNet model)"),bOe.forEach(t),he.forEach(t),pNr=i(Kl),T(kC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),bWe=i(f),Gc=n(f,"H2",{class:!0});var LHe=s(Gc);SC=n(LHe,"A",{id:!0,class:!0,href:!0});var FDt=s(SC);HEe=n(FDt,"SPAN",{});var TDt=s(HEe);T(t$.$$.fragment,TDt),TDt.forEach(t),FDt.forEach(t),_Nr=i(LHe),UEe=n(LHe,"SPAN",{});var MDt=s(UEe);uNr=r(MDt,"TFAutoModelForQuestionAnswering"),MDt.forEach(t),LHe.forEach(t),vWe=i(f),gr=n(f,"DIV",{class:!0});var Zl=s(gr);T(a$.$$.fragment,Zl),bNr=i(Zl),Oc=n(Zl,"P",{});var Tae=s(Oc);vNr=r(Tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),OZ=n(Tae,"A",{href:!0});var EDt=s(OZ);FNr=r(EDt,"from_pretrained()"),EDt.forEach(t),TNr=r(Tae," class method or the "),VZ=n(Tae,"A",{href:!0});var CDt=s(VZ);MNr=r(CDt,"from_config()"),CDt.forEach(t),ENr=r(Tae,` class
method.`),Tae.forEach(t),CNr=i(Zl),n$=n(Zl,"P",{});var yHe=s(n$);wNr=r(yHe,"This class cannot be instantiated directly using "),JEe=n(yHe,"CODE",{});var wDt=s(JEe);ANr=r(wDt,"__init__()"),wDt.forEach(t),LNr=r(yHe," (throws an error)."),yHe.forEach(t),yNr=i(Zl),Xt=n(Zl,"DIV",{class:!0});var BL=s(Xt);T(s$.$$.fragment,BL),xNr=i(BL),YEe=n(BL,"P",{});var ADt=s(YEe);$Nr=r(ADt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ADt.forEach(t),kNr=i(BL),Vc=n(BL,"P",{});var Mae=s(Vc);SNr=r(Mae,`Note:
Loading a model from its configuration file does `),KEe=n(Mae,"STRONG",{});var LDt=s(KEe);RNr=r(LDt,"not"),LDt.forEach(t),PNr=r(Mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=n(Mae,"A",{href:!0});var yDt=s(XZ);BNr=r(yDt,"from_pretrained()"),yDt.forEach(t),INr=r(Mae," to load the model weights."),Mae.forEach(t),NNr=i(BL),T(RC.$$.fragment,BL),BL.forEach(t),qNr=i(Zl),Gr=n(Zl,"DIV",{class:!0});var ei=s(Gr);T(l$.$$.fragment,ei),jNr=i(ei),ZEe=n(ei,"P",{});var xDt=s(ZEe);DNr=r(xDt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xDt.forEach(t),GNr=i(ei),bn=n(ei,"P",{});var IL=s(bn);ONr=r(IL,"The model class to instantiate is selected based on the "),eCe=n(IL,"CODE",{});var $Dt=s(eCe);VNr=r($Dt,"model_type"),$Dt.forEach(t),XNr=r(IL,` property of the config object (either
passed as an argument or loaded from `),oCe=n(IL,"CODE",{});var kDt=s(oCe);zNr=r(kDt,"pretrained_model_name_or_path"),kDt.forEach(t),WNr=r(IL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rCe=n(IL,"CODE",{});var SDt=s(rCe);QNr=r(SDt,"pretrained_model_name_or_path"),SDt.forEach(t),HNr=r(IL,":"),IL.forEach(t),UNr=i(ei),ce=n(ei,"UL",{});var pe=s(ce);PC=n(pe,"LI",{});var vOe=s(PC);tCe=n(vOe,"STRONG",{});var RDt=s(tCe);JNr=r(RDt,"albert"),RDt.forEach(t),YNr=r(vOe," \u2014 "),zZ=n(vOe,"A",{href:!0});var PDt=s(zZ);KNr=r(PDt,"TFAlbertForQuestionAnswering"),PDt.forEach(t),ZNr=r(vOe," (ALBERT model)"),vOe.forEach(t),eqr=i(pe),BC=n(pe,"LI",{});var FOe=s(BC);aCe=n(FOe,"STRONG",{});var BDt=s(aCe);oqr=r(BDt,"bert"),BDt.forEach(t),rqr=r(FOe," \u2014 "),WZ=n(FOe,"A",{href:!0});var IDt=s(WZ);tqr=r(IDt,"TFBertForQuestionAnswering"),IDt.forEach(t),aqr=r(FOe," (BERT model)"),FOe.forEach(t),nqr=i(pe),IC=n(pe,"LI",{});var TOe=s(IC);nCe=n(TOe,"STRONG",{});var NDt=s(nCe);sqr=r(NDt,"camembert"),NDt.forEach(t),lqr=r(TOe," \u2014 "),QZ=n(TOe,"A",{href:!0});var qDt=s(QZ);iqr=r(qDt,"TFCamembertForQuestionAnswering"),qDt.forEach(t),dqr=r(TOe," (CamemBERT model)"),TOe.forEach(t),cqr=i(pe),NC=n(pe,"LI",{});var MOe=s(NC);sCe=n(MOe,"STRONG",{});var jDt=s(sCe);fqr=r(jDt,"convbert"),jDt.forEach(t),mqr=r(MOe," \u2014 "),HZ=n(MOe,"A",{href:!0});var DDt=s(HZ);gqr=r(DDt,"TFConvBertForQuestionAnswering"),DDt.forEach(t),hqr=r(MOe," (ConvBERT model)"),MOe.forEach(t),pqr=i(pe),qC=n(pe,"LI",{});var EOe=s(qC);lCe=n(EOe,"STRONG",{});var GDt=s(lCe);_qr=r(GDt,"deberta"),GDt.forEach(t),uqr=r(EOe," \u2014 "),UZ=n(EOe,"A",{href:!0});var ODt=s(UZ);bqr=r(ODt,"TFDebertaForQuestionAnswering"),ODt.forEach(t),vqr=r(EOe," (DeBERTa model)"),EOe.forEach(t),Fqr=i(pe),jC=n(pe,"LI",{});var COe=s(jC);iCe=n(COe,"STRONG",{});var VDt=s(iCe);Tqr=r(VDt,"deberta-v2"),VDt.forEach(t),Mqr=r(COe," \u2014 "),JZ=n(COe,"A",{href:!0});var XDt=s(JZ);Eqr=r(XDt,"TFDebertaV2ForQuestionAnswering"),XDt.forEach(t),Cqr=r(COe," (DeBERTa-v2 model)"),COe.forEach(t),wqr=i(pe),DC=n(pe,"LI",{});var wOe=s(DC);dCe=n(wOe,"STRONG",{});var zDt=s(dCe);Aqr=r(zDt,"distilbert"),zDt.forEach(t),Lqr=r(wOe," \u2014 "),YZ=n(wOe,"A",{href:!0});var WDt=s(YZ);yqr=r(WDt,"TFDistilBertForQuestionAnswering"),WDt.forEach(t),xqr=r(wOe," (DistilBERT model)"),wOe.forEach(t),$qr=i(pe),GC=n(pe,"LI",{});var AOe=s(GC);cCe=n(AOe,"STRONG",{});var QDt=s(cCe);kqr=r(QDt,"electra"),QDt.forEach(t),Sqr=r(AOe," \u2014 "),KZ=n(AOe,"A",{href:!0});var HDt=s(KZ);Rqr=r(HDt,"TFElectraForQuestionAnswering"),HDt.forEach(t),Pqr=r(AOe," (ELECTRA model)"),AOe.forEach(t),Bqr=i(pe),OC=n(pe,"LI",{});var LOe=s(OC);fCe=n(LOe,"STRONG",{});var UDt=s(fCe);Iqr=r(UDt,"flaubert"),UDt.forEach(t),Nqr=r(LOe," \u2014 "),ZZ=n(LOe,"A",{href:!0});var JDt=s(ZZ);qqr=r(JDt,"TFFlaubertForQuestionAnsweringSimple"),JDt.forEach(t),jqr=r(LOe," (FlauBERT model)"),LOe.forEach(t),Dqr=i(pe),VC=n(pe,"LI",{});var yOe=s(VC);mCe=n(yOe,"STRONG",{});var YDt=s(mCe);Gqr=r(YDt,"funnel"),YDt.forEach(t),Oqr=r(yOe," \u2014 "),eee=n(yOe,"A",{href:!0});var KDt=s(eee);Vqr=r(KDt,"TFFunnelForQuestionAnswering"),KDt.forEach(t),Xqr=r(yOe," (Funnel Transformer model)"),yOe.forEach(t),zqr=i(pe),XC=n(pe,"LI",{});var xOe=s(XC);gCe=n(xOe,"STRONG",{});var ZDt=s(gCe);Wqr=r(ZDt,"gptj"),ZDt.forEach(t),Qqr=r(xOe," \u2014 "),oee=n(xOe,"A",{href:!0});var eGt=s(oee);Hqr=r(eGt,"TFGPTJForQuestionAnswering"),eGt.forEach(t),Uqr=r(xOe," (GPT-J model)"),xOe.forEach(t),Jqr=i(pe),zC=n(pe,"LI",{});var $Oe=s(zC);hCe=n($Oe,"STRONG",{});var oGt=s(hCe);Yqr=r(oGt,"longformer"),oGt.forEach(t),Kqr=r($Oe," \u2014 "),ree=n($Oe,"A",{href:!0});var rGt=s(ree);Zqr=r(rGt,"TFLongformerForQuestionAnswering"),rGt.forEach(t),ejr=r($Oe," (Longformer model)"),$Oe.forEach(t),ojr=i(pe),WC=n(pe,"LI",{});var kOe=s(WC);pCe=n(kOe,"STRONG",{});var tGt=s(pCe);rjr=r(tGt,"mobilebert"),tGt.forEach(t),tjr=r(kOe," \u2014 "),tee=n(kOe,"A",{href:!0});var aGt=s(tee);ajr=r(aGt,"TFMobileBertForQuestionAnswering"),aGt.forEach(t),njr=r(kOe," (MobileBERT model)"),kOe.forEach(t),sjr=i(pe),QC=n(pe,"LI",{});var SOe=s(QC);_Ce=n(SOe,"STRONG",{});var nGt=s(_Ce);ljr=r(nGt,"mpnet"),nGt.forEach(t),ijr=r(SOe," \u2014 "),aee=n(SOe,"A",{href:!0});var sGt=s(aee);djr=r(sGt,"TFMPNetForQuestionAnswering"),sGt.forEach(t),cjr=r(SOe," (MPNet model)"),SOe.forEach(t),fjr=i(pe),HC=n(pe,"LI",{});var ROe=s(HC);uCe=n(ROe,"STRONG",{});var lGt=s(uCe);mjr=r(lGt,"rembert"),lGt.forEach(t),gjr=r(ROe," \u2014 "),nee=n(ROe,"A",{href:!0});var iGt=s(nee);hjr=r(iGt,"TFRemBertForQuestionAnswering"),iGt.forEach(t),pjr=r(ROe," (RemBERT model)"),ROe.forEach(t),_jr=i(pe),UC=n(pe,"LI",{});var POe=s(UC);bCe=n(POe,"STRONG",{});var dGt=s(bCe);ujr=r(dGt,"roberta"),dGt.forEach(t),bjr=r(POe," \u2014 "),see=n(POe,"A",{href:!0});var cGt=s(see);vjr=r(cGt,"TFRobertaForQuestionAnswering"),cGt.forEach(t),Fjr=r(POe," (RoBERTa model)"),POe.forEach(t),Tjr=i(pe),JC=n(pe,"LI",{});var BOe=s(JC);vCe=n(BOe,"STRONG",{});var fGt=s(vCe);Mjr=r(fGt,"roformer"),fGt.forEach(t),Ejr=r(BOe," \u2014 "),lee=n(BOe,"A",{href:!0});var mGt=s(lee);Cjr=r(mGt,"TFRoFormerForQuestionAnswering"),mGt.forEach(t),wjr=r(BOe," (RoFormer model)"),BOe.forEach(t),Ajr=i(pe),YC=n(pe,"LI",{});var IOe=s(YC);FCe=n(IOe,"STRONG",{});var gGt=s(FCe);Ljr=r(gGt,"xlm"),gGt.forEach(t),yjr=r(IOe," \u2014 "),iee=n(IOe,"A",{href:!0});var hGt=s(iee);xjr=r(hGt,"TFXLMForQuestionAnsweringSimple"),hGt.forEach(t),$jr=r(IOe," (XLM model)"),IOe.forEach(t),kjr=i(pe),KC=n(pe,"LI",{});var NOe=s(KC);TCe=n(NOe,"STRONG",{});var pGt=s(TCe);Sjr=r(pGt,"xlm-roberta"),pGt.forEach(t),Rjr=r(NOe," \u2014 "),dee=n(NOe,"A",{href:!0});var _Gt=s(dee);Pjr=r(_Gt,"TFXLMRobertaForQuestionAnswering"),_Gt.forEach(t),Bjr=r(NOe," (XLM-RoBERTa model)"),NOe.forEach(t),Ijr=i(pe),ZC=n(pe,"LI",{});var qOe=s(ZC);MCe=n(qOe,"STRONG",{});var uGt=s(MCe);Njr=r(uGt,"xlnet"),uGt.forEach(t),qjr=r(qOe," \u2014 "),cee=n(qOe,"A",{href:!0});var bGt=s(cee);jjr=r(bGt,"TFXLNetForQuestionAnsweringSimple"),bGt.forEach(t),Djr=r(qOe," (XLNet model)"),qOe.forEach(t),pe.forEach(t),Gjr=i(ei),T(e5.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),FWe=i(f),Xc=n(f,"H2",{class:!0});var xHe=s(Xc);o5=n(xHe,"A",{id:!0,class:!0,href:!0});var vGt=s(o5);ECe=n(vGt,"SPAN",{});var FGt=s(ECe);T(i$.$$.fragment,FGt),FGt.forEach(t),vGt.forEach(t),Ojr=i(xHe),CCe=n(xHe,"SPAN",{});var TGt=s(CCe);Vjr=r(TGt,"TFAutoModelForVision2Seq"),TGt.forEach(t),xHe.forEach(t),TWe=i(f),hr=n(f,"DIV",{class:!0});var oi=s(hr);T(d$.$$.fragment,oi),Xjr=i(oi),zc=n(oi,"P",{});var Eae=s(zc);zjr=r(Eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fee=n(Eae,"A",{href:!0});var MGt=s(fee);Wjr=r(MGt,"from_pretrained()"),MGt.forEach(t),Qjr=r(Eae," class method or the "),mee=n(Eae,"A",{href:!0});var EGt=s(mee);Hjr=r(EGt,"from_config()"),EGt.forEach(t),Ujr=r(Eae,` class
method.`),Eae.forEach(t),Jjr=i(oi),c$=n(oi,"P",{});var $He=s(c$);Yjr=r($He,"This class cannot be instantiated directly using "),wCe=n($He,"CODE",{});var CGt=s(wCe);Kjr=r(CGt,"__init__()"),CGt.forEach(t),Zjr=r($He," (throws an error)."),$He.forEach(t),eDr=i(oi),zt=n(oi,"DIV",{class:!0});var NL=s(zt);T(f$.$$.fragment,NL),oDr=i(NL),ACe=n(NL,"P",{});var wGt=s(ACe);rDr=r(wGt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wGt.forEach(t),tDr=i(NL),Wc=n(NL,"P",{});var Cae=s(Wc);aDr=r(Cae,`Note:
Loading a model from its configuration file does `),LCe=n(Cae,"STRONG",{});var AGt=s(LCe);nDr=r(AGt,"not"),AGt.forEach(t),sDr=r(Cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=n(Cae,"A",{href:!0});var LGt=s(gee);lDr=r(LGt,"from_pretrained()"),LGt.forEach(t),iDr=r(Cae," to load the model weights."),Cae.forEach(t),dDr=i(NL),T(r5.$$.fragment,NL),NL.forEach(t),cDr=i(oi),Or=n(oi,"DIV",{class:!0});var ri=s(Or);T(m$.$$.fragment,ri),fDr=i(ri),yCe=n(ri,"P",{});var yGt=s(yCe);mDr=r(yGt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yGt.forEach(t),gDr=i(ri),vn=n(ri,"P",{});var qL=s(vn);hDr=r(qL,"The model class to instantiate is selected based on the "),xCe=n(qL,"CODE",{});var xGt=s(xCe);pDr=r(xGt,"model_type"),xGt.forEach(t),_Dr=r(qL,` property of the config object (either
passed as an argument or loaded from `),$Ce=n(qL,"CODE",{});var $Gt=s($Ce);uDr=r($Gt,"pretrained_model_name_or_path"),$Gt.forEach(t),bDr=r(qL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kCe=n(qL,"CODE",{});var kGt=s(kCe);vDr=r(kGt,"pretrained_model_name_or_path"),kGt.forEach(t),FDr=r(qL,":"),qL.forEach(t),TDr=i(ri),SCe=n(ri,"UL",{});var SGt=s(SCe);t5=n(SGt,"LI",{});var jOe=s(t5);RCe=n(jOe,"STRONG",{});var RGt=s(RCe);MDr=r(RGt,"vision-encoder-decoder"),RGt.forEach(t),EDr=r(jOe," \u2014 "),hee=n(jOe,"A",{href:!0});var PGt=s(hee);CDr=r(PGt,"TFVisionEncoderDecoderModel"),PGt.forEach(t),wDr=r(jOe," (Vision Encoder decoder model)"),jOe.forEach(t),SGt.forEach(t),ADr=i(ri),T(a5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),MWe=i(f),Qc=n(f,"H2",{class:!0});var kHe=s(Qc);n5=n(kHe,"A",{id:!0,class:!0,href:!0});var BGt=s(n5);PCe=n(BGt,"SPAN",{});var IGt=s(PCe);T(g$.$$.fragment,IGt),IGt.forEach(t),BGt.forEach(t),LDr=i(kHe),BCe=n(kHe,"SPAN",{});var NGt=s(BCe);yDr=r(NGt,"TFAutoModelForSpeechSeq2Seq"),NGt.forEach(t),kHe.forEach(t),EWe=i(f),pr=n(f,"DIV",{class:!0});var ti=s(pr);T(h$.$$.fragment,ti),xDr=i(ti),Hc=n(ti,"P",{});var wae=s(Hc);$Dr=r(wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pee=n(wae,"A",{href:!0});var qGt=s(pee);kDr=r(qGt,"from_pretrained()"),qGt.forEach(t),SDr=r(wae," class method or the "),_ee=n(wae,"A",{href:!0});var jGt=s(_ee);RDr=r(jGt,"from_config()"),jGt.forEach(t),PDr=r(wae,` class
method.`),wae.forEach(t),BDr=i(ti),p$=n(ti,"P",{});var SHe=s(p$);IDr=r(SHe,"This class cannot be instantiated directly using "),ICe=n(SHe,"CODE",{});var DGt=s(ICe);NDr=r(DGt,"__init__()"),DGt.forEach(t),qDr=r(SHe," (throws an error)."),SHe.forEach(t),jDr=i(ti),Wt=n(ti,"DIV",{class:!0});var jL=s(Wt);T(_$.$$.fragment,jL),DDr=i(jL),NCe=n(jL,"P",{});var GGt=s(NCe);GDr=r(GGt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),GGt.forEach(t),ODr=i(jL),Uc=n(jL,"P",{});var Aae=s(Uc);VDr=r(Aae,`Note:
Loading a model from its configuration file does `),qCe=n(Aae,"STRONG",{});var OGt=s(qCe);XDr=r(OGt,"not"),OGt.forEach(t),zDr=r(Aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),uee=n(Aae,"A",{href:!0});var VGt=s(uee);WDr=r(VGt,"from_pretrained()"),VGt.forEach(t),QDr=r(Aae," to load the model weights."),Aae.forEach(t),HDr=i(jL),T(s5.$$.fragment,jL),jL.forEach(t),UDr=i(ti),Vr=n(ti,"DIV",{class:!0});var ai=s(Vr);T(u$.$$.fragment,ai),JDr=i(ai),jCe=n(ai,"P",{});var XGt=s(jCe);YDr=r(XGt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),XGt.forEach(t),KDr=i(ai),Fn=n(ai,"P",{});var DL=s(Fn);ZDr=r(DL,"The model class to instantiate is selected based on the "),DCe=n(DL,"CODE",{});var zGt=s(DCe);eGr=r(zGt,"model_type"),zGt.forEach(t),oGr=r(DL,` property of the config object (either
passed as an argument or loaded from `),GCe=n(DL,"CODE",{});var WGt=s(GCe);rGr=r(WGt,"pretrained_model_name_or_path"),WGt.forEach(t),tGr=r(DL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OCe=n(DL,"CODE",{});var QGt=s(OCe);aGr=r(QGt,"pretrained_model_name_or_path"),QGt.forEach(t),nGr=r(DL,":"),DL.forEach(t),sGr=i(ai),VCe=n(ai,"UL",{});var HGt=s(VCe);l5=n(HGt,"LI",{});var DOe=s(l5);XCe=n(DOe,"STRONG",{});var UGt=s(XCe);lGr=r(UGt,"speech_to_text"),UGt.forEach(t),iGr=r(DOe," \u2014 "),bee=n(DOe,"A",{href:!0});var JGt=s(bee);dGr=r(JGt,"TFSpeech2TextForConditionalGeneration"),JGt.forEach(t),cGr=r(DOe," (Speech2Text model)"),DOe.forEach(t),HGt.forEach(t),fGr=i(ai),T(i5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),CWe=i(f),Jc=n(f,"H2",{class:!0});var RHe=s(Jc);d5=n(RHe,"A",{id:!0,class:!0,href:!0});var YGt=s(d5);zCe=n(YGt,"SPAN",{});var KGt=s(zCe);T(b$.$$.fragment,KGt),KGt.forEach(t),YGt.forEach(t),mGr=i(RHe),WCe=n(RHe,"SPAN",{});var ZGt=s(WCe);gGr=r(ZGt,"FlaxAutoModel"),ZGt.forEach(t),RHe.forEach(t),wWe=i(f),_r=n(f,"DIV",{class:!0});var ni=s(_r);T(v$.$$.fragment,ni),hGr=i(ni),Yc=n(ni,"P",{});var Lae=s(Yc);pGr=r(Lae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vee=n(Lae,"A",{href:!0});var eOt=s(vee);_Gr=r(eOt,"from_pretrained()"),eOt.forEach(t),uGr=r(Lae," class method or the "),Fee=n(Lae,"A",{href:!0});var oOt=s(Fee);bGr=r(oOt,"from_config()"),oOt.forEach(t),vGr=r(Lae,` class
method.`),Lae.forEach(t),FGr=i(ni),F$=n(ni,"P",{});var PHe=s(F$);TGr=r(PHe,"This class cannot be instantiated directly using "),QCe=n(PHe,"CODE",{});var rOt=s(QCe);MGr=r(rOt,"__init__()"),rOt.forEach(t),EGr=r(PHe," (throws an error)."),PHe.forEach(t),CGr=i(ni),Qt=n(ni,"DIV",{class:!0});var GL=s(Qt);T(T$.$$.fragment,GL),wGr=i(GL),HCe=n(GL,"P",{});var tOt=s(HCe);AGr=r(tOt,"Instantiates one of the base model classes of the library from a configuration."),tOt.forEach(t),LGr=i(GL),Kc=n(GL,"P",{});var yae=s(Kc);yGr=r(yae,`Note:
Loading a model from its configuration file does `),UCe=n(yae,"STRONG",{});var aOt=s(UCe);xGr=r(aOt,"not"),aOt.forEach(t),$Gr=r(yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tee=n(yae,"A",{href:!0});var nOt=s(Tee);kGr=r(nOt,"from_pretrained()"),nOt.forEach(t),SGr=r(yae," to load the model weights."),yae.forEach(t),RGr=i(GL),T(c5.$$.fragment,GL),GL.forEach(t),PGr=i(ni),Xr=n(ni,"DIV",{class:!0});var si=s(Xr);T(M$.$$.fragment,si),BGr=i(si),JCe=n(si,"P",{});var sOt=s(JCe);IGr=r(sOt,"Instantiate one of the base model classes of the library from a pretrained model."),sOt.forEach(t),NGr=i(si),Tn=n(si,"P",{});var OL=s(Tn);qGr=r(OL,"The model class to instantiate is selected based on the "),YCe=n(OL,"CODE",{});var lOt=s(YCe);jGr=r(lOt,"model_type"),lOt.forEach(t),DGr=r(OL,` property of the config object (either
passed as an argument or loaded from `),KCe=n(OL,"CODE",{});var iOt=s(KCe);GGr=r(iOt,"pretrained_model_name_or_path"),iOt.forEach(t),OGr=r(OL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=n(OL,"CODE",{});var dOt=s(ZCe);VGr=r(dOt,"pretrained_model_name_or_path"),dOt.forEach(t),XGr=r(OL,":"),OL.forEach(t),zGr=i(si),oe=n(si,"UL",{});var ae=s(oe);f5=n(ae,"LI",{});var GOe=s(f5);e5e=n(GOe,"STRONG",{});var cOt=s(e5e);WGr=r(cOt,"albert"),cOt.forEach(t),QGr=r(GOe," \u2014 "),Mee=n(GOe,"A",{href:!0});var fOt=s(Mee);HGr=r(fOt,"FlaxAlbertModel"),fOt.forEach(t),UGr=r(GOe," (ALBERT model)"),GOe.forEach(t),JGr=i(ae),m5=n(ae,"LI",{});var OOe=s(m5);o5e=n(OOe,"STRONG",{});var mOt=s(o5e);YGr=r(mOt,"bart"),mOt.forEach(t),KGr=r(OOe," \u2014 "),Eee=n(OOe,"A",{href:!0});var gOt=s(Eee);ZGr=r(gOt,"FlaxBartModel"),gOt.forEach(t),eOr=r(OOe," (BART model)"),OOe.forEach(t),oOr=i(ae),g5=n(ae,"LI",{});var VOe=s(g5);r5e=n(VOe,"STRONG",{});var hOt=s(r5e);rOr=r(hOt,"beit"),hOt.forEach(t),tOr=r(VOe," \u2014 "),Cee=n(VOe,"A",{href:!0});var pOt=s(Cee);aOr=r(pOt,"FlaxBeitModel"),pOt.forEach(t),nOr=r(VOe," (BEiT model)"),VOe.forEach(t),sOr=i(ae),h5=n(ae,"LI",{});var XOe=s(h5);t5e=n(XOe,"STRONG",{});var _Ot=s(t5e);lOr=r(_Ot,"bert"),_Ot.forEach(t),iOr=r(XOe," \u2014 "),wee=n(XOe,"A",{href:!0});var uOt=s(wee);dOr=r(uOt,"FlaxBertModel"),uOt.forEach(t),cOr=r(XOe," (BERT model)"),XOe.forEach(t),fOr=i(ae),p5=n(ae,"LI",{});var zOe=s(p5);a5e=n(zOe,"STRONG",{});var bOt=s(a5e);mOr=r(bOt,"big_bird"),bOt.forEach(t),gOr=r(zOe," \u2014 "),Aee=n(zOe,"A",{href:!0});var vOt=s(Aee);hOr=r(vOt,"FlaxBigBirdModel"),vOt.forEach(t),pOr=r(zOe," (BigBird model)"),zOe.forEach(t),_Or=i(ae),_5=n(ae,"LI",{});var WOe=s(_5);n5e=n(WOe,"STRONG",{});var FOt=s(n5e);uOr=r(FOt,"blenderbot"),FOt.forEach(t),bOr=r(WOe," \u2014 "),Lee=n(WOe,"A",{href:!0});var TOt=s(Lee);vOr=r(TOt,"FlaxBlenderbotModel"),TOt.forEach(t),FOr=r(WOe," (Blenderbot model)"),WOe.forEach(t),TOr=i(ae),u5=n(ae,"LI",{});var QOe=s(u5);s5e=n(QOe,"STRONG",{});var MOt=s(s5e);MOr=r(MOt,"blenderbot-small"),MOt.forEach(t),EOr=r(QOe," \u2014 "),yee=n(QOe,"A",{href:!0});var EOt=s(yee);COr=r(EOt,"FlaxBlenderbotSmallModel"),EOt.forEach(t),wOr=r(QOe," (BlenderbotSmall model)"),QOe.forEach(t),AOr=i(ae),b5=n(ae,"LI",{});var HOe=s(b5);l5e=n(HOe,"STRONG",{});var COt=s(l5e);LOr=r(COt,"clip"),COt.forEach(t),yOr=r(HOe," \u2014 "),xee=n(HOe,"A",{href:!0});var wOt=s(xee);xOr=r(wOt,"FlaxCLIPModel"),wOt.forEach(t),$Or=r(HOe," (CLIP model)"),HOe.forEach(t),kOr=i(ae),v5=n(ae,"LI",{});var UOe=s(v5);i5e=n(UOe,"STRONG",{});var AOt=s(i5e);SOr=r(AOt,"distilbert"),AOt.forEach(t),ROr=r(UOe," \u2014 "),$ee=n(UOe,"A",{href:!0});var LOt=s($ee);POr=r(LOt,"FlaxDistilBertModel"),LOt.forEach(t),BOr=r(UOe," (DistilBERT model)"),UOe.forEach(t),IOr=i(ae),F5=n(ae,"LI",{});var JOe=s(F5);d5e=n(JOe,"STRONG",{});var yOt=s(d5e);NOr=r(yOt,"electra"),yOt.forEach(t),qOr=r(JOe," \u2014 "),kee=n(JOe,"A",{href:!0});var xOt=s(kee);jOr=r(xOt,"FlaxElectraModel"),xOt.forEach(t),DOr=r(JOe," (ELECTRA model)"),JOe.forEach(t),GOr=i(ae),T5=n(ae,"LI",{});var YOe=s(T5);c5e=n(YOe,"STRONG",{});var $Ot=s(c5e);OOr=r($Ot,"gpt2"),$Ot.forEach(t),VOr=r(YOe," \u2014 "),See=n(YOe,"A",{href:!0});var kOt=s(See);XOr=r(kOt,"FlaxGPT2Model"),kOt.forEach(t),zOr=r(YOe," (OpenAI GPT-2 model)"),YOe.forEach(t),WOr=i(ae),M5=n(ae,"LI",{});var KOe=s(M5);f5e=n(KOe,"STRONG",{});var SOt=s(f5e);QOr=r(SOt,"gpt_neo"),SOt.forEach(t),HOr=r(KOe," \u2014 "),Ree=n(KOe,"A",{href:!0});var ROt=s(Ree);UOr=r(ROt,"FlaxGPTNeoModel"),ROt.forEach(t),JOr=r(KOe," (GPT Neo model)"),KOe.forEach(t),YOr=i(ae),E5=n(ae,"LI",{});var ZOe=s(E5);m5e=n(ZOe,"STRONG",{});var POt=s(m5e);KOr=r(POt,"gptj"),POt.forEach(t),ZOr=r(ZOe," \u2014 "),Pee=n(ZOe,"A",{href:!0});var BOt=s(Pee);eVr=r(BOt,"FlaxGPTJModel"),BOt.forEach(t),oVr=r(ZOe," (GPT-J model)"),ZOe.forEach(t),rVr=i(ae),C5=n(ae,"LI",{});var eVe=s(C5);g5e=n(eVe,"STRONG",{});var IOt=s(g5e);tVr=r(IOt,"longt5"),IOt.forEach(t),aVr=r(eVe," \u2014 "),Bee=n(eVe,"A",{href:!0});var NOt=s(Bee);nVr=r(NOt,"FlaxLongT5Model"),NOt.forEach(t),sVr=r(eVe," (LongT5 model)"),eVe.forEach(t),lVr=i(ae),w5=n(ae,"LI",{});var oVe=s(w5);h5e=n(oVe,"STRONG",{});var qOt=s(h5e);iVr=r(qOt,"marian"),qOt.forEach(t),dVr=r(oVe," \u2014 "),Iee=n(oVe,"A",{href:!0});var jOt=s(Iee);cVr=r(jOt,"FlaxMarianModel"),jOt.forEach(t),fVr=r(oVe," (Marian model)"),oVe.forEach(t),mVr=i(ae),A5=n(ae,"LI",{});var rVe=s(A5);p5e=n(rVe,"STRONG",{});var DOt=s(p5e);gVr=r(DOt,"mbart"),DOt.forEach(t),hVr=r(rVe," \u2014 "),Nee=n(rVe,"A",{href:!0});var GOt=s(Nee);pVr=r(GOt,"FlaxMBartModel"),GOt.forEach(t),_Vr=r(rVe," (mBART model)"),rVe.forEach(t),uVr=i(ae),L5=n(ae,"LI",{});var tVe=s(L5);_5e=n(tVe,"STRONG",{});var OOt=s(_5e);bVr=r(OOt,"mt5"),OOt.forEach(t),vVr=r(tVe," \u2014 "),qee=n(tVe,"A",{href:!0});var VOt=s(qee);FVr=r(VOt,"FlaxMT5Model"),VOt.forEach(t),TVr=r(tVe," (MT5 model)"),tVe.forEach(t),MVr=i(ae),y5=n(ae,"LI",{});var aVe=s(y5);u5e=n(aVe,"STRONG",{});var XOt=s(u5e);EVr=r(XOt,"opt"),XOt.forEach(t),CVr=r(aVe," \u2014 "),jee=n(aVe,"A",{href:!0});var zOt=s(jee);wVr=r(zOt,"FlaxOPTModel"),zOt.forEach(t),AVr=r(aVe," (OPT model)"),aVe.forEach(t),LVr=i(ae),x5=n(ae,"LI",{});var nVe=s(x5);b5e=n(nVe,"STRONG",{});var WOt=s(b5e);yVr=r(WOt,"pegasus"),WOt.forEach(t),xVr=r(nVe," \u2014 "),Dee=n(nVe,"A",{href:!0});var QOt=s(Dee);$Vr=r(QOt,"FlaxPegasusModel"),QOt.forEach(t),kVr=r(nVe," (Pegasus model)"),nVe.forEach(t),SVr=i(ae),$5=n(ae,"LI",{});var sVe=s($5);v5e=n(sVe,"STRONG",{});var HOt=s(v5e);RVr=r(HOt,"roberta"),HOt.forEach(t),PVr=r(sVe," \u2014 "),Gee=n(sVe,"A",{href:!0});var UOt=s(Gee);BVr=r(UOt,"FlaxRobertaModel"),UOt.forEach(t),IVr=r(sVe," (RoBERTa model)"),sVe.forEach(t),NVr=i(ae),k5=n(ae,"LI",{});var lVe=s(k5);F5e=n(lVe,"STRONG",{});var JOt=s(F5e);qVr=r(JOt,"roformer"),JOt.forEach(t),jVr=r(lVe," \u2014 "),Oee=n(lVe,"A",{href:!0});var YOt=s(Oee);DVr=r(YOt,"FlaxRoFormerModel"),YOt.forEach(t),GVr=r(lVe," (RoFormer model)"),lVe.forEach(t),OVr=i(ae),S5=n(ae,"LI",{});var iVe=s(S5);T5e=n(iVe,"STRONG",{});var KOt=s(T5e);VVr=r(KOt,"t5"),KOt.forEach(t),XVr=r(iVe," \u2014 "),Vee=n(iVe,"A",{href:!0});var ZOt=s(Vee);zVr=r(ZOt,"FlaxT5Model"),ZOt.forEach(t),WVr=r(iVe," (T5 model)"),iVe.forEach(t),QVr=i(ae),R5=n(ae,"LI",{});var dVe=s(R5);M5e=n(dVe,"STRONG",{});var eVt=s(M5e);HVr=r(eVt,"vision-text-dual-encoder"),eVt.forEach(t),UVr=r(dVe," \u2014 "),Xee=n(dVe,"A",{href:!0});var oVt=s(Xee);JVr=r(oVt,"FlaxVisionTextDualEncoderModel"),oVt.forEach(t),YVr=r(dVe," (VisionTextDualEncoder model)"),dVe.forEach(t),KVr=i(ae),P5=n(ae,"LI",{});var cVe=s(P5);E5e=n(cVe,"STRONG",{});var rVt=s(E5e);ZVr=r(rVt,"vit"),rVt.forEach(t),eXr=r(cVe," \u2014 "),zee=n(cVe,"A",{href:!0});var tVt=s(zee);oXr=r(tVt,"FlaxViTModel"),tVt.forEach(t),rXr=r(cVe," (ViT model)"),cVe.forEach(t),tXr=i(ae),B5=n(ae,"LI",{});var fVe=s(B5);C5e=n(fVe,"STRONG",{});var aVt=s(C5e);aXr=r(aVt,"wav2vec2"),aVt.forEach(t),nXr=r(fVe," \u2014 "),Wee=n(fVe,"A",{href:!0});var nVt=s(Wee);sXr=r(nVt,"FlaxWav2Vec2Model"),nVt.forEach(t),lXr=r(fVe," (Wav2Vec2 model)"),fVe.forEach(t),iXr=i(ae),I5=n(ae,"LI",{});var mVe=s(I5);w5e=n(mVe,"STRONG",{});var sVt=s(w5e);dXr=r(sVt,"xglm"),sVt.forEach(t),cXr=r(mVe," \u2014 "),Qee=n(mVe,"A",{href:!0});var lVt=s(Qee);fXr=r(lVt,"FlaxXGLMModel"),lVt.forEach(t),mXr=r(mVe," (XGLM model)"),mVe.forEach(t),gXr=i(ae),N5=n(ae,"LI",{});var gVe=s(N5);A5e=n(gVe,"STRONG",{});var iVt=s(A5e);hXr=r(iVt,"xlm-roberta"),iVt.forEach(t),pXr=r(gVe," \u2014 "),Hee=n(gVe,"A",{href:!0});var dVt=s(Hee);_Xr=r(dVt,"FlaxXLMRobertaModel"),dVt.forEach(t),uXr=r(gVe," (XLM-RoBERTa model)"),gVe.forEach(t),ae.forEach(t),bXr=i(si),T(q5.$$.fragment,si),si.forEach(t),ni.forEach(t),AWe=i(f),Zc=n(f,"H2",{class:!0});var BHe=s(Zc);j5=n(BHe,"A",{id:!0,class:!0,href:!0});var cVt=s(j5);L5e=n(cVt,"SPAN",{});var fVt=s(L5e);T(E$.$$.fragment,fVt),fVt.forEach(t),cVt.forEach(t),vXr=i(BHe),y5e=n(BHe,"SPAN",{});var mVt=s(y5e);FXr=r(mVt,"FlaxAutoModelForCausalLM"),mVt.forEach(t),BHe.forEach(t),LWe=i(f),ur=n(f,"DIV",{class:!0});var li=s(ur);T(C$.$$.fragment,li),TXr=i(li),ef=n(li,"P",{});var xae=s(ef);MXr=r(xae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Uee=n(xae,"A",{href:!0});var gVt=s(Uee);EXr=r(gVt,"from_pretrained()"),gVt.forEach(t),CXr=r(xae," class method or the "),Jee=n(xae,"A",{href:!0});var hVt=s(Jee);wXr=r(hVt,"from_config()"),hVt.forEach(t),AXr=r(xae,` class
method.`),xae.forEach(t),LXr=i(li),w$=n(li,"P",{});var IHe=s(w$);yXr=r(IHe,"This class cannot be instantiated directly using "),x5e=n(IHe,"CODE",{});var pVt=s(x5e);xXr=r(pVt,"__init__()"),pVt.forEach(t),$Xr=r(IHe," (throws an error)."),IHe.forEach(t),kXr=i(li),Ht=n(li,"DIV",{class:!0});var VL=s(Ht);T(A$.$$.fragment,VL),SXr=i(VL),$5e=n(VL,"P",{});var _Vt=s($5e);RXr=r(_Vt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_Vt.forEach(t),PXr=i(VL),of=n(VL,"P",{});var $ae=s(of);BXr=r($ae,`Note:
Loading a model from its configuration file does `),k5e=n($ae,"STRONG",{});var uVt=s(k5e);IXr=r(uVt,"not"),uVt.forEach(t),NXr=r($ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=n($ae,"A",{href:!0});var bVt=s(Yee);qXr=r(bVt,"from_pretrained()"),bVt.forEach(t),jXr=r($ae," to load the model weights."),$ae.forEach(t),DXr=i(VL),T(D5.$$.fragment,VL),VL.forEach(t),GXr=i(li),zr=n(li,"DIV",{class:!0});var ii=s(zr);T(L$.$$.fragment,ii),OXr=i(ii),S5e=n(ii,"P",{});var vVt=s(S5e);VXr=r(vVt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vVt.forEach(t),XXr=i(ii),Mn=n(ii,"P",{});var XL=s(Mn);zXr=r(XL,"The model class to instantiate is selected based on the "),R5e=n(XL,"CODE",{});var FVt=s(R5e);WXr=r(FVt,"model_type"),FVt.forEach(t),QXr=r(XL,` property of the config object (either
passed as an argument or loaded from `),P5e=n(XL,"CODE",{});var TVt=s(P5e);HXr=r(TVt,"pretrained_model_name_or_path"),TVt.forEach(t),UXr=r(XL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(XL,"CODE",{});var MVt=s(B5e);JXr=r(MVt,"pretrained_model_name_or_path"),MVt.forEach(t),YXr=r(XL,":"),XL.forEach(t),KXr=i(ii),xe=n(ii,"UL",{});var Ne=s(xe);G5=n(Ne,"LI",{});var hVe=s(G5);I5e=n(hVe,"STRONG",{});var EVt=s(I5e);ZXr=r(EVt,"bart"),EVt.forEach(t),ezr=r(hVe," \u2014 "),Kee=n(hVe,"A",{href:!0});var CVt=s(Kee);ozr=r(CVt,"FlaxBartForCausalLM"),CVt.forEach(t),rzr=r(hVe," (BART model)"),hVe.forEach(t),tzr=i(Ne),O5=n(Ne,"LI",{});var pVe=s(O5);N5e=n(pVe,"STRONG",{});var wVt=s(N5e);azr=r(wVt,"bert"),wVt.forEach(t),nzr=r(pVe," \u2014 "),Zee=n(pVe,"A",{href:!0});var AVt=s(Zee);szr=r(AVt,"FlaxBertForCausalLM"),AVt.forEach(t),lzr=r(pVe," (BERT model)"),pVe.forEach(t),izr=i(Ne),V5=n(Ne,"LI",{});var _Ve=s(V5);q5e=n(_Ve,"STRONG",{});var LVt=s(q5e);dzr=r(LVt,"big_bird"),LVt.forEach(t),czr=r(_Ve," \u2014 "),eoe=n(_Ve,"A",{href:!0});var yVt=s(eoe);fzr=r(yVt,"FlaxBigBirdForCausalLM"),yVt.forEach(t),mzr=r(_Ve," (BigBird model)"),_Ve.forEach(t),gzr=i(Ne),X5=n(Ne,"LI",{});var uVe=s(X5);j5e=n(uVe,"STRONG",{});var xVt=s(j5e);hzr=r(xVt,"electra"),xVt.forEach(t),pzr=r(uVe," \u2014 "),ooe=n(uVe,"A",{href:!0});var $Vt=s(ooe);_zr=r($Vt,"FlaxElectraForCausalLM"),$Vt.forEach(t),uzr=r(uVe," (ELECTRA model)"),uVe.forEach(t),bzr=i(Ne),z5=n(Ne,"LI",{});var bVe=s(z5);D5e=n(bVe,"STRONG",{});var kVt=s(D5e);vzr=r(kVt,"gpt2"),kVt.forEach(t),Fzr=r(bVe," \u2014 "),roe=n(bVe,"A",{href:!0});var SVt=s(roe);Tzr=r(SVt,"FlaxGPT2LMHeadModel"),SVt.forEach(t),Mzr=r(bVe," (OpenAI GPT-2 model)"),bVe.forEach(t),Ezr=i(Ne),W5=n(Ne,"LI",{});var vVe=s(W5);G5e=n(vVe,"STRONG",{});var RVt=s(G5e);Czr=r(RVt,"gpt_neo"),RVt.forEach(t),wzr=r(vVe," \u2014 "),toe=n(vVe,"A",{href:!0});var PVt=s(toe);Azr=r(PVt,"FlaxGPTNeoForCausalLM"),PVt.forEach(t),Lzr=r(vVe," (GPT Neo model)"),vVe.forEach(t),yzr=i(Ne),Q5=n(Ne,"LI",{});var FVe=s(Q5);O5e=n(FVe,"STRONG",{});var BVt=s(O5e);xzr=r(BVt,"gptj"),BVt.forEach(t),$zr=r(FVe," \u2014 "),aoe=n(FVe,"A",{href:!0});var IVt=s(aoe);kzr=r(IVt,"FlaxGPTJForCausalLM"),IVt.forEach(t),Szr=r(FVe," (GPT-J model)"),FVe.forEach(t),Rzr=i(Ne),H5=n(Ne,"LI",{});var TVe=s(H5);V5e=n(TVe,"STRONG",{});var NVt=s(V5e);Pzr=r(NVt,"opt"),NVt.forEach(t),Bzr=r(TVe," \u2014 "),noe=n(TVe,"A",{href:!0});var qVt=s(noe);Izr=r(qVt,"FlaxOPTForCausalLM"),qVt.forEach(t),Nzr=r(TVe," (OPT model)"),TVe.forEach(t),qzr=i(Ne),U5=n(Ne,"LI",{});var MVe=s(U5);X5e=n(MVe,"STRONG",{});var jVt=s(X5e);jzr=r(jVt,"roberta"),jVt.forEach(t),Dzr=r(MVe," \u2014 "),soe=n(MVe,"A",{href:!0});var DVt=s(soe);Gzr=r(DVt,"FlaxRobertaForCausalLM"),DVt.forEach(t),Ozr=r(MVe," (RoBERTa model)"),MVe.forEach(t),Vzr=i(Ne),J5=n(Ne,"LI",{});var EVe=s(J5);z5e=n(EVe,"STRONG",{});var GVt=s(z5e);Xzr=r(GVt,"xglm"),GVt.forEach(t),zzr=r(EVe," \u2014 "),loe=n(EVe,"A",{href:!0});var OVt=s(loe);Wzr=r(OVt,"FlaxXGLMForCausalLM"),OVt.forEach(t),Qzr=r(EVe," (XGLM model)"),EVe.forEach(t),Ne.forEach(t),Hzr=i(ii),T(Y5.$$.fragment,ii),ii.forEach(t),li.forEach(t),yWe=i(f),rf=n(f,"H2",{class:!0});var NHe=s(rf);K5=n(NHe,"A",{id:!0,class:!0,href:!0});var VVt=s(K5);W5e=n(VVt,"SPAN",{});var XVt=s(W5e);T(y$.$$.fragment,XVt),XVt.forEach(t),VVt.forEach(t),Uzr=i(NHe),Q5e=n(NHe,"SPAN",{});var zVt=s(Q5e);Jzr=r(zVt,"FlaxAutoModelForPreTraining"),zVt.forEach(t),NHe.forEach(t),xWe=i(f),br=n(f,"DIV",{class:!0});var di=s(br);T(x$.$$.fragment,di),Yzr=i(di),tf=n(di,"P",{});var kae=s(tf);Kzr=r(kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ioe=n(kae,"A",{href:!0});var WVt=s(ioe);Zzr=r(WVt,"from_pretrained()"),WVt.forEach(t),eWr=r(kae," class method or the "),doe=n(kae,"A",{href:!0});var QVt=s(doe);oWr=r(QVt,"from_config()"),QVt.forEach(t),rWr=r(kae,` class
method.`),kae.forEach(t),tWr=i(di),$$=n(di,"P",{});var qHe=s($$);aWr=r(qHe,"This class cannot be instantiated directly using "),H5e=n(qHe,"CODE",{});var HVt=s(H5e);nWr=r(HVt,"__init__()"),HVt.forEach(t),sWr=r(qHe," (throws an error)."),qHe.forEach(t),lWr=i(di),Ut=n(di,"DIV",{class:!0});var zL=s(Ut);T(k$.$$.fragment,zL),iWr=i(zL),U5e=n(zL,"P",{});var UVt=s(U5e);dWr=r(UVt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),UVt.forEach(t),cWr=i(zL),af=n(zL,"P",{});var Sae=s(af);fWr=r(Sae,`Note:
Loading a model from its configuration file does `),J5e=n(Sae,"STRONG",{});var JVt=s(J5e);mWr=r(JVt,"not"),JVt.forEach(t),gWr=r(Sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),coe=n(Sae,"A",{href:!0});var YVt=s(coe);hWr=r(YVt,"from_pretrained()"),YVt.forEach(t),pWr=r(Sae," to load the model weights."),Sae.forEach(t),_Wr=i(zL),T(Z5.$$.fragment,zL),zL.forEach(t),uWr=i(di),Wr=n(di,"DIV",{class:!0});var ci=s(Wr);T(S$.$$.fragment,ci),bWr=i(ci),Y5e=n(ci,"P",{});var KVt=s(Y5e);vWr=r(KVt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),KVt.forEach(t),FWr=i(ci),En=n(ci,"P",{});var WL=s(En);TWr=r(WL,"The model class to instantiate is selected based on the "),K5e=n(WL,"CODE",{});var ZVt=s(K5e);MWr=r(ZVt,"model_type"),ZVt.forEach(t),EWr=r(WL,` property of the config object (either
passed as an argument or loaded from `),Z5e=n(WL,"CODE",{});var eXt=s(Z5e);CWr=r(eXt,"pretrained_model_name_or_path"),eXt.forEach(t),wWr=r(WL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e3e=n(WL,"CODE",{});var oXt=s(e3e);AWr=r(oXt,"pretrained_model_name_or_path"),oXt.forEach(t),LWr=r(WL,":"),WL.forEach(t),yWr=i(ci),Ee=n(ci,"UL",{});var we=s(Ee);e3=n(we,"LI",{});var CVe=s(e3);o3e=n(CVe,"STRONG",{});var rXt=s(o3e);xWr=r(rXt,"albert"),rXt.forEach(t),$Wr=r(CVe," \u2014 "),foe=n(CVe,"A",{href:!0});var tXt=s(foe);kWr=r(tXt,"FlaxAlbertForPreTraining"),tXt.forEach(t),SWr=r(CVe," (ALBERT model)"),CVe.forEach(t),RWr=i(we),o3=n(we,"LI",{});var wVe=s(o3);r3e=n(wVe,"STRONG",{});var aXt=s(r3e);PWr=r(aXt,"bart"),aXt.forEach(t),BWr=r(wVe," \u2014 "),moe=n(wVe,"A",{href:!0});var nXt=s(moe);IWr=r(nXt,"FlaxBartForConditionalGeneration"),nXt.forEach(t),NWr=r(wVe," (BART model)"),wVe.forEach(t),qWr=i(we),r3=n(we,"LI",{});var AVe=s(r3);t3e=n(AVe,"STRONG",{});var sXt=s(t3e);jWr=r(sXt,"bert"),sXt.forEach(t),DWr=r(AVe," \u2014 "),goe=n(AVe,"A",{href:!0});var lXt=s(goe);GWr=r(lXt,"FlaxBertForPreTraining"),lXt.forEach(t),OWr=r(AVe," (BERT model)"),AVe.forEach(t),VWr=i(we),t3=n(we,"LI",{});var LVe=s(t3);a3e=n(LVe,"STRONG",{});var iXt=s(a3e);XWr=r(iXt,"big_bird"),iXt.forEach(t),zWr=r(LVe," \u2014 "),hoe=n(LVe,"A",{href:!0});var dXt=s(hoe);WWr=r(dXt,"FlaxBigBirdForPreTraining"),dXt.forEach(t),QWr=r(LVe," (BigBird model)"),LVe.forEach(t),HWr=i(we),a3=n(we,"LI",{});var yVe=s(a3);n3e=n(yVe,"STRONG",{});var cXt=s(n3e);UWr=r(cXt,"electra"),cXt.forEach(t),JWr=r(yVe," \u2014 "),poe=n(yVe,"A",{href:!0});var fXt=s(poe);YWr=r(fXt,"FlaxElectraForPreTraining"),fXt.forEach(t),KWr=r(yVe," (ELECTRA model)"),yVe.forEach(t),ZWr=i(we),n3=n(we,"LI",{});var xVe=s(n3);s3e=n(xVe,"STRONG",{});var mXt=s(s3e);eQr=r(mXt,"longt5"),mXt.forEach(t),oQr=r(xVe," \u2014 "),_oe=n(xVe,"A",{href:!0});var gXt=s(_oe);rQr=r(gXt,"FlaxLongT5ForConditionalGeneration"),gXt.forEach(t),tQr=r(xVe," (LongT5 model)"),xVe.forEach(t),aQr=i(we),s3=n(we,"LI",{});var $Ve=s(s3);l3e=n($Ve,"STRONG",{});var hXt=s(l3e);nQr=r(hXt,"mbart"),hXt.forEach(t),sQr=r($Ve," \u2014 "),uoe=n($Ve,"A",{href:!0});var pXt=s(uoe);lQr=r(pXt,"FlaxMBartForConditionalGeneration"),pXt.forEach(t),iQr=r($Ve," (mBART model)"),$Ve.forEach(t),dQr=i(we),l3=n(we,"LI",{});var kVe=s(l3);i3e=n(kVe,"STRONG",{});var _Xt=s(i3e);cQr=r(_Xt,"mt5"),_Xt.forEach(t),fQr=r(kVe," \u2014 "),boe=n(kVe,"A",{href:!0});var uXt=s(boe);mQr=r(uXt,"FlaxMT5ForConditionalGeneration"),uXt.forEach(t),gQr=r(kVe," (MT5 model)"),kVe.forEach(t),hQr=i(we),i3=n(we,"LI",{});var SVe=s(i3);d3e=n(SVe,"STRONG",{});var bXt=s(d3e);pQr=r(bXt,"roberta"),bXt.forEach(t),_Qr=r(SVe," \u2014 "),voe=n(SVe,"A",{href:!0});var vXt=s(voe);uQr=r(vXt,"FlaxRobertaForMaskedLM"),vXt.forEach(t),bQr=r(SVe," (RoBERTa model)"),SVe.forEach(t),vQr=i(we),d3=n(we,"LI",{});var RVe=s(d3);c3e=n(RVe,"STRONG",{});var FXt=s(c3e);FQr=r(FXt,"roformer"),FXt.forEach(t),TQr=r(RVe," \u2014 "),Foe=n(RVe,"A",{href:!0});var TXt=s(Foe);MQr=r(TXt,"FlaxRoFormerForMaskedLM"),TXt.forEach(t),EQr=r(RVe," (RoFormer model)"),RVe.forEach(t),CQr=i(we),c3=n(we,"LI",{});var PVe=s(c3);f3e=n(PVe,"STRONG",{});var MXt=s(f3e);wQr=r(MXt,"t5"),MXt.forEach(t),AQr=r(PVe," \u2014 "),Toe=n(PVe,"A",{href:!0});var EXt=s(Toe);LQr=r(EXt,"FlaxT5ForConditionalGeneration"),EXt.forEach(t),yQr=r(PVe," (T5 model)"),PVe.forEach(t),xQr=i(we),f3=n(we,"LI",{});var BVe=s(f3);m3e=n(BVe,"STRONG",{});var CXt=s(m3e);$Qr=r(CXt,"wav2vec2"),CXt.forEach(t),kQr=r(BVe," \u2014 "),Moe=n(BVe,"A",{href:!0});var wXt=s(Moe);SQr=r(wXt,"FlaxWav2Vec2ForPreTraining"),wXt.forEach(t),RQr=r(BVe," (Wav2Vec2 model)"),BVe.forEach(t),PQr=i(we),m3=n(we,"LI",{});var IVe=s(m3);g3e=n(IVe,"STRONG",{});var AXt=s(g3e);BQr=r(AXt,"xlm-roberta"),AXt.forEach(t),IQr=r(IVe," \u2014 "),Eoe=n(IVe,"A",{href:!0});var LXt=s(Eoe);NQr=r(LXt,"FlaxXLMRobertaForMaskedLM"),LXt.forEach(t),qQr=r(IVe," (XLM-RoBERTa model)"),IVe.forEach(t),we.forEach(t),jQr=i(ci),T(g3.$$.fragment,ci),ci.forEach(t),di.forEach(t),$We=i(f),nf=n(f,"H2",{class:!0});var jHe=s(nf);h3=n(jHe,"A",{id:!0,class:!0,href:!0});var yXt=s(h3);h3e=n(yXt,"SPAN",{});var xXt=s(h3e);T(R$.$$.fragment,xXt),xXt.forEach(t),yXt.forEach(t),DQr=i(jHe),p3e=n(jHe,"SPAN",{});var $Xt=s(p3e);GQr=r($Xt,"FlaxAutoModelForMaskedLM"),$Xt.forEach(t),jHe.forEach(t),kWe=i(f),vr=n(f,"DIV",{class:!0});var fi=s(vr);T(P$.$$.fragment,fi),OQr=i(fi),sf=n(fi,"P",{});var Rae=s(sf);VQr=r(Rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Coe=n(Rae,"A",{href:!0});var kXt=s(Coe);XQr=r(kXt,"from_pretrained()"),kXt.forEach(t),zQr=r(Rae," class method or the "),woe=n(Rae,"A",{href:!0});var SXt=s(woe);WQr=r(SXt,"from_config()"),SXt.forEach(t),QQr=r(Rae,` class
method.`),Rae.forEach(t),HQr=i(fi),B$=n(fi,"P",{});var DHe=s(B$);UQr=r(DHe,"This class cannot be instantiated directly using "),_3e=n(DHe,"CODE",{});var RXt=s(_3e);JQr=r(RXt,"__init__()"),RXt.forEach(t),YQr=r(DHe," (throws an error)."),DHe.forEach(t),KQr=i(fi),Jt=n(fi,"DIV",{class:!0});var QL=s(Jt);T(I$.$$.fragment,QL),ZQr=i(QL),u3e=n(QL,"P",{});var PXt=s(u3e);eHr=r(PXt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PXt.forEach(t),oHr=i(QL),lf=n(QL,"P",{});var Pae=s(lf);rHr=r(Pae,`Note:
Loading a model from its configuration file does `),b3e=n(Pae,"STRONG",{});var BXt=s(b3e);tHr=r(BXt,"not"),BXt.forEach(t),aHr=r(Pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=n(Pae,"A",{href:!0});var IXt=s(Aoe);nHr=r(IXt,"from_pretrained()"),IXt.forEach(t),sHr=r(Pae," to load the model weights."),Pae.forEach(t),lHr=i(QL),T(p3.$$.fragment,QL),QL.forEach(t),iHr=i(fi),Qr=n(fi,"DIV",{class:!0});var mi=s(Qr);T(N$.$$.fragment,mi),dHr=i(mi),v3e=n(mi,"P",{});var NXt=s(v3e);cHr=r(NXt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),NXt.forEach(t),fHr=i(mi),Cn=n(mi,"P",{});var HL=s(Cn);mHr=r(HL,"The model class to instantiate is selected based on the "),F3e=n(HL,"CODE",{});var qXt=s(F3e);gHr=r(qXt,"model_type"),qXt.forEach(t),hHr=r(HL,` property of the config object (either
passed as an argument or loaded from `),T3e=n(HL,"CODE",{});var jXt=s(T3e);pHr=r(jXt,"pretrained_model_name_or_path"),jXt.forEach(t),_Hr=r(HL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M3e=n(HL,"CODE",{});var DXt=s(M3e);uHr=r(DXt,"pretrained_model_name_or_path"),DXt.forEach(t),bHr=r(HL,":"),HL.forEach(t),vHr=i(mi),$e=n(mi,"UL",{});var qe=s($e);_3=n(qe,"LI",{});var NVe=s(_3);E3e=n(NVe,"STRONG",{});var GXt=s(E3e);FHr=r(GXt,"albert"),GXt.forEach(t),THr=r(NVe," \u2014 "),Loe=n(NVe,"A",{href:!0});var OXt=s(Loe);MHr=r(OXt,"FlaxAlbertForMaskedLM"),OXt.forEach(t),EHr=r(NVe," (ALBERT model)"),NVe.forEach(t),CHr=i(qe),u3=n(qe,"LI",{});var qVe=s(u3);C3e=n(qVe,"STRONG",{});var VXt=s(C3e);wHr=r(VXt,"bart"),VXt.forEach(t),AHr=r(qVe," \u2014 "),yoe=n(qVe,"A",{href:!0});var XXt=s(yoe);LHr=r(XXt,"FlaxBartForConditionalGeneration"),XXt.forEach(t),yHr=r(qVe," (BART model)"),qVe.forEach(t),xHr=i(qe),b3=n(qe,"LI",{});var jVe=s(b3);w3e=n(jVe,"STRONG",{});var zXt=s(w3e);$Hr=r(zXt,"bert"),zXt.forEach(t),kHr=r(jVe," \u2014 "),xoe=n(jVe,"A",{href:!0});var WXt=s(xoe);SHr=r(WXt,"FlaxBertForMaskedLM"),WXt.forEach(t),RHr=r(jVe," (BERT model)"),jVe.forEach(t),PHr=i(qe),v3=n(qe,"LI",{});var DVe=s(v3);A3e=n(DVe,"STRONG",{});var QXt=s(A3e);BHr=r(QXt,"big_bird"),QXt.forEach(t),IHr=r(DVe," \u2014 "),$oe=n(DVe,"A",{href:!0});var HXt=s($oe);NHr=r(HXt,"FlaxBigBirdForMaskedLM"),HXt.forEach(t),qHr=r(DVe," (BigBird model)"),DVe.forEach(t),jHr=i(qe),F3=n(qe,"LI",{});var GVe=s(F3);L3e=n(GVe,"STRONG",{});var UXt=s(L3e);DHr=r(UXt,"distilbert"),UXt.forEach(t),GHr=r(GVe," \u2014 "),koe=n(GVe,"A",{href:!0});var JXt=s(koe);OHr=r(JXt,"FlaxDistilBertForMaskedLM"),JXt.forEach(t),VHr=r(GVe," (DistilBERT model)"),GVe.forEach(t),XHr=i(qe),T3=n(qe,"LI",{});var OVe=s(T3);y3e=n(OVe,"STRONG",{});var YXt=s(y3e);zHr=r(YXt,"electra"),YXt.forEach(t),WHr=r(OVe," \u2014 "),Soe=n(OVe,"A",{href:!0});var KXt=s(Soe);QHr=r(KXt,"FlaxElectraForMaskedLM"),KXt.forEach(t),HHr=r(OVe," (ELECTRA model)"),OVe.forEach(t),UHr=i(qe),M3=n(qe,"LI",{});var VVe=s(M3);x3e=n(VVe,"STRONG",{});var ZXt=s(x3e);JHr=r(ZXt,"mbart"),ZXt.forEach(t),YHr=r(VVe," \u2014 "),Roe=n(VVe,"A",{href:!0});var ezt=s(Roe);KHr=r(ezt,"FlaxMBartForConditionalGeneration"),ezt.forEach(t),ZHr=r(VVe," (mBART model)"),VVe.forEach(t),eUr=i(qe),E3=n(qe,"LI",{});var XVe=s(E3);$3e=n(XVe,"STRONG",{});var ozt=s($3e);oUr=r(ozt,"roberta"),ozt.forEach(t),rUr=r(XVe," \u2014 "),Poe=n(XVe,"A",{href:!0});var rzt=s(Poe);tUr=r(rzt,"FlaxRobertaForMaskedLM"),rzt.forEach(t),aUr=r(XVe," (RoBERTa model)"),XVe.forEach(t),nUr=i(qe),C3=n(qe,"LI",{});var zVe=s(C3);k3e=n(zVe,"STRONG",{});var tzt=s(k3e);sUr=r(tzt,"roformer"),tzt.forEach(t),lUr=r(zVe," \u2014 "),Boe=n(zVe,"A",{href:!0});var azt=s(Boe);iUr=r(azt,"FlaxRoFormerForMaskedLM"),azt.forEach(t),dUr=r(zVe," (RoFormer model)"),zVe.forEach(t),cUr=i(qe),w3=n(qe,"LI",{});var WVe=s(w3);S3e=n(WVe,"STRONG",{});var nzt=s(S3e);fUr=r(nzt,"xlm-roberta"),nzt.forEach(t),mUr=r(WVe," \u2014 "),Ioe=n(WVe,"A",{href:!0});var szt=s(Ioe);gUr=r(szt,"FlaxXLMRobertaForMaskedLM"),szt.forEach(t),hUr=r(WVe," (XLM-RoBERTa model)"),WVe.forEach(t),qe.forEach(t),pUr=i(mi),T(A3.$$.fragment,mi),mi.forEach(t),fi.forEach(t),SWe=i(f),df=n(f,"H2",{class:!0});var GHe=s(df);L3=n(GHe,"A",{id:!0,class:!0,href:!0});var lzt=s(L3);R3e=n(lzt,"SPAN",{});var izt=s(R3e);T(q$.$$.fragment,izt),izt.forEach(t),lzt.forEach(t),_Ur=i(GHe),P3e=n(GHe,"SPAN",{});var dzt=s(P3e);uUr=r(dzt,"FlaxAutoModelForSeq2SeqLM"),dzt.forEach(t),GHe.forEach(t),RWe=i(f),Fr=n(f,"DIV",{class:!0});var gi=s(Fr);T(j$.$$.fragment,gi),bUr=i(gi),cf=n(gi,"P",{});var Bae=s(cf);vUr=r(Bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Noe=n(Bae,"A",{href:!0});var czt=s(Noe);FUr=r(czt,"from_pretrained()"),czt.forEach(t),TUr=r(Bae," class method or the "),qoe=n(Bae,"A",{href:!0});var fzt=s(qoe);MUr=r(fzt,"from_config()"),fzt.forEach(t),EUr=r(Bae,` class
method.`),Bae.forEach(t),CUr=i(gi),D$=n(gi,"P",{});var OHe=s(D$);wUr=r(OHe,"This class cannot be instantiated directly using "),B3e=n(OHe,"CODE",{});var mzt=s(B3e);AUr=r(mzt,"__init__()"),mzt.forEach(t),LUr=r(OHe," (throws an error)."),OHe.forEach(t),yUr=i(gi),Yt=n(gi,"DIV",{class:!0});var UL=s(Yt);T(G$.$$.fragment,UL),xUr=i(UL),I3e=n(UL,"P",{});var gzt=s(I3e);$Ur=r(gzt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gzt.forEach(t),kUr=i(UL),ff=n(UL,"P",{});var Iae=s(ff);SUr=r(Iae,`Note:
Loading a model from its configuration file does `),N3e=n(Iae,"STRONG",{});var hzt=s(N3e);RUr=r(hzt,"not"),hzt.forEach(t),PUr=r(Iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),joe=n(Iae,"A",{href:!0});var pzt=s(joe);BUr=r(pzt,"from_pretrained()"),pzt.forEach(t),IUr=r(Iae," to load the model weights."),Iae.forEach(t),NUr=i(UL),T(y3.$$.fragment,UL),UL.forEach(t),qUr=i(gi),Hr=n(gi,"DIV",{class:!0});var hi=s(Hr);T(O$.$$.fragment,hi),jUr=i(hi),q3e=n(hi,"P",{});var _zt=s(q3e);DUr=r(_zt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_zt.forEach(t),GUr=i(hi),wn=n(hi,"P",{});var JL=s(wn);OUr=r(JL,"The model class to instantiate is selected based on the "),j3e=n(JL,"CODE",{});var uzt=s(j3e);VUr=r(uzt,"model_type"),uzt.forEach(t),XUr=r(JL,` property of the config object (either
passed as an argument or loaded from `),D3e=n(JL,"CODE",{});var bzt=s(D3e);zUr=r(bzt,"pretrained_model_name_or_path"),bzt.forEach(t),WUr=r(JL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G3e=n(JL,"CODE",{});var vzt=s(G3e);QUr=r(vzt,"pretrained_model_name_or_path"),vzt.forEach(t),HUr=r(JL,":"),JL.forEach(t),UUr=i(hi),ke=n(hi,"UL",{});var je=s(ke);x3=n(je,"LI",{});var QVe=s(x3);O3e=n(QVe,"STRONG",{});var Fzt=s(O3e);JUr=r(Fzt,"bart"),Fzt.forEach(t),YUr=r(QVe," \u2014 "),Doe=n(QVe,"A",{href:!0});var Tzt=s(Doe);KUr=r(Tzt,"FlaxBartForConditionalGeneration"),Tzt.forEach(t),ZUr=r(QVe," (BART model)"),QVe.forEach(t),eJr=i(je),$3=n(je,"LI",{});var HVe=s($3);V3e=n(HVe,"STRONG",{});var Mzt=s(V3e);oJr=r(Mzt,"blenderbot"),Mzt.forEach(t),rJr=r(HVe," \u2014 "),Goe=n(HVe,"A",{href:!0});var Ezt=s(Goe);tJr=r(Ezt,"FlaxBlenderbotForConditionalGeneration"),Ezt.forEach(t),aJr=r(HVe," (Blenderbot model)"),HVe.forEach(t),nJr=i(je),k3=n(je,"LI",{});var UVe=s(k3);X3e=n(UVe,"STRONG",{});var Czt=s(X3e);sJr=r(Czt,"blenderbot-small"),Czt.forEach(t),lJr=r(UVe," \u2014 "),Ooe=n(UVe,"A",{href:!0});var wzt=s(Ooe);iJr=r(wzt,"FlaxBlenderbotSmallForConditionalGeneration"),wzt.forEach(t),dJr=r(UVe," (BlenderbotSmall model)"),UVe.forEach(t),cJr=i(je),S3=n(je,"LI",{});var JVe=s(S3);z3e=n(JVe,"STRONG",{});var Azt=s(z3e);fJr=r(Azt,"encoder-decoder"),Azt.forEach(t),mJr=r(JVe," \u2014 "),Voe=n(JVe,"A",{href:!0});var Lzt=s(Voe);gJr=r(Lzt,"FlaxEncoderDecoderModel"),Lzt.forEach(t),hJr=r(JVe," (Encoder decoder model)"),JVe.forEach(t),pJr=i(je),R3=n(je,"LI",{});var YVe=s(R3);W3e=n(YVe,"STRONG",{});var yzt=s(W3e);_Jr=r(yzt,"longt5"),yzt.forEach(t),uJr=r(YVe," \u2014 "),Xoe=n(YVe,"A",{href:!0});var xzt=s(Xoe);bJr=r(xzt,"FlaxLongT5ForConditionalGeneration"),xzt.forEach(t),vJr=r(YVe," (LongT5 model)"),YVe.forEach(t),FJr=i(je),P3=n(je,"LI",{});var KVe=s(P3);Q3e=n(KVe,"STRONG",{});var $zt=s(Q3e);TJr=r($zt,"marian"),$zt.forEach(t),MJr=r(KVe," \u2014 "),zoe=n(KVe,"A",{href:!0});var kzt=s(zoe);EJr=r(kzt,"FlaxMarianMTModel"),kzt.forEach(t),CJr=r(KVe," (Marian model)"),KVe.forEach(t),wJr=i(je),B3=n(je,"LI",{});var ZVe=s(B3);H3e=n(ZVe,"STRONG",{});var Szt=s(H3e);AJr=r(Szt,"mbart"),Szt.forEach(t),LJr=r(ZVe," \u2014 "),Woe=n(ZVe,"A",{href:!0});var Rzt=s(Woe);yJr=r(Rzt,"FlaxMBartForConditionalGeneration"),Rzt.forEach(t),xJr=r(ZVe," (mBART model)"),ZVe.forEach(t),$Jr=i(je),I3=n(je,"LI",{});var eXe=s(I3);U3e=n(eXe,"STRONG",{});var Pzt=s(U3e);kJr=r(Pzt,"mt5"),Pzt.forEach(t),SJr=r(eXe," \u2014 "),Qoe=n(eXe,"A",{href:!0});var Bzt=s(Qoe);RJr=r(Bzt,"FlaxMT5ForConditionalGeneration"),Bzt.forEach(t),PJr=r(eXe," (MT5 model)"),eXe.forEach(t),BJr=i(je),N3=n(je,"LI",{});var oXe=s(N3);J3e=n(oXe,"STRONG",{});var Izt=s(J3e);IJr=r(Izt,"pegasus"),Izt.forEach(t),NJr=r(oXe," \u2014 "),Hoe=n(oXe,"A",{href:!0});var Nzt=s(Hoe);qJr=r(Nzt,"FlaxPegasusForConditionalGeneration"),Nzt.forEach(t),jJr=r(oXe," (Pegasus model)"),oXe.forEach(t),DJr=i(je),q3=n(je,"LI",{});var rXe=s(q3);Y3e=n(rXe,"STRONG",{});var qzt=s(Y3e);GJr=r(qzt,"t5"),qzt.forEach(t),OJr=r(rXe," \u2014 "),Uoe=n(rXe,"A",{href:!0});var jzt=s(Uoe);VJr=r(jzt,"FlaxT5ForConditionalGeneration"),jzt.forEach(t),XJr=r(rXe," (T5 model)"),rXe.forEach(t),je.forEach(t),zJr=i(hi),T(j3.$$.fragment,hi),hi.forEach(t),gi.forEach(t),PWe=i(f),mf=n(f,"H2",{class:!0});var VHe=s(mf);D3=n(VHe,"A",{id:!0,class:!0,href:!0});var Dzt=s(D3);K3e=n(Dzt,"SPAN",{});var Gzt=s(K3e);T(V$.$$.fragment,Gzt),Gzt.forEach(t),Dzt.forEach(t),WJr=i(VHe),Z3e=n(VHe,"SPAN",{});var Ozt=s(Z3e);QJr=r(Ozt,"FlaxAutoModelForSequenceClassification"),Ozt.forEach(t),VHe.forEach(t),BWe=i(f),Tr=n(f,"DIV",{class:!0});var pi=s(Tr);T(X$.$$.fragment,pi),HJr=i(pi),gf=n(pi,"P",{});var Nae=s(gf);UJr=r(Nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Joe=n(Nae,"A",{href:!0});var Vzt=s(Joe);JJr=r(Vzt,"from_pretrained()"),Vzt.forEach(t),YJr=r(Nae," class method or the "),Yoe=n(Nae,"A",{href:!0});var Xzt=s(Yoe);KJr=r(Xzt,"from_config()"),Xzt.forEach(t),ZJr=r(Nae,` class
method.`),Nae.forEach(t),eYr=i(pi),z$=n(pi,"P",{});var XHe=s(z$);oYr=r(XHe,"This class cannot be instantiated directly using "),ewe=n(XHe,"CODE",{});var zzt=s(ewe);rYr=r(zzt,"__init__()"),zzt.forEach(t),tYr=r(XHe," (throws an error)."),XHe.forEach(t),aYr=i(pi),Kt=n(pi,"DIV",{class:!0});var YL=s(Kt);T(W$.$$.fragment,YL),nYr=i(YL),owe=n(YL,"P",{});var Wzt=s(owe);sYr=r(Wzt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Wzt.forEach(t),lYr=i(YL),hf=n(YL,"P",{});var qae=s(hf);iYr=r(qae,`Note:
Loading a model from its configuration file does `),rwe=n(qae,"STRONG",{});var Qzt=s(rwe);dYr=r(Qzt,"not"),Qzt.forEach(t),cYr=r(qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Koe=n(qae,"A",{href:!0});var Hzt=s(Koe);fYr=r(Hzt,"from_pretrained()"),Hzt.forEach(t),mYr=r(qae," to load the model weights."),qae.forEach(t),gYr=i(YL),T(G3.$$.fragment,YL),YL.forEach(t),hYr=i(pi),Ur=n(pi,"DIV",{class:!0});var _i=s(Ur);T(Q$.$$.fragment,_i),pYr=i(_i),twe=n(_i,"P",{});var Uzt=s(twe);_Yr=r(Uzt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Uzt.forEach(t),uYr=i(_i),An=n(_i,"P",{});var KL=s(An);bYr=r(KL,"The model class to instantiate is selected based on the "),awe=n(KL,"CODE",{});var Jzt=s(awe);vYr=r(Jzt,"model_type"),Jzt.forEach(t),FYr=r(KL,` property of the config object (either
passed as an argument or loaded from `),nwe=n(KL,"CODE",{});var Yzt=s(nwe);TYr=r(Yzt,"pretrained_model_name_or_path"),Yzt.forEach(t),MYr=r(KL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),swe=n(KL,"CODE",{});var Kzt=s(swe);EYr=r(Kzt,"pretrained_model_name_or_path"),Kzt.forEach(t),CYr=r(KL,":"),KL.forEach(t),wYr=i(_i),Se=n(_i,"UL",{});var De=s(Se);O3=n(De,"LI",{});var tXe=s(O3);lwe=n(tXe,"STRONG",{});var Zzt=s(lwe);AYr=r(Zzt,"albert"),Zzt.forEach(t),LYr=r(tXe," \u2014 "),Zoe=n(tXe,"A",{href:!0});var eWt=s(Zoe);yYr=r(eWt,"FlaxAlbertForSequenceClassification"),eWt.forEach(t),xYr=r(tXe," (ALBERT model)"),tXe.forEach(t),$Yr=i(De),V3=n(De,"LI",{});var aXe=s(V3);iwe=n(aXe,"STRONG",{});var oWt=s(iwe);kYr=r(oWt,"bart"),oWt.forEach(t),SYr=r(aXe," \u2014 "),ere=n(aXe,"A",{href:!0});var rWt=s(ere);RYr=r(rWt,"FlaxBartForSequenceClassification"),rWt.forEach(t),PYr=r(aXe," (BART model)"),aXe.forEach(t),BYr=i(De),X3=n(De,"LI",{});var nXe=s(X3);dwe=n(nXe,"STRONG",{});var tWt=s(dwe);IYr=r(tWt,"bert"),tWt.forEach(t),NYr=r(nXe," \u2014 "),ore=n(nXe,"A",{href:!0});var aWt=s(ore);qYr=r(aWt,"FlaxBertForSequenceClassification"),aWt.forEach(t),jYr=r(nXe," (BERT model)"),nXe.forEach(t),DYr=i(De),z3=n(De,"LI",{});var sXe=s(z3);cwe=n(sXe,"STRONG",{});var nWt=s(cwe);GYr=r(nWt,"big_bird"),nWt.forEach(t),OYr=r(sXe," \u2014 "),rre=n(sXe,"A",{href:!0});var sWt=s(rre);VYr=r(sWt,"FlaxBigBirdForSequenceClassification"),sWt.forEach(t),XYr=r(sXe," (BigBird model)"),sXe.forEach(t),zYr=i(De),W3=n(De,"LI",{});var lXe=s(W3);fwe=n(lXe,"STRONG",{});var lWt=s(fwe);WYr=r(lWt,"distilbert"),lWt.forEach(t),QYr=r(lXe," \u2014 "),tre=n(lXe,"A",{href:!0});var iWt=s(tre);HYr=r(iWt,"FlaxDistilBertForSequenceClassification"),iWt.forEach(t),UYr=r(lXe," (DistilBERT model)"),lXe.forEach(t),JYr=i(De),Q3=n(De,"LI",{});var iXe=s(Q3);mwe=n(iXe,"STRONG",{});var dWt=s(mwe);YYr=r(dWt,"electra"),dWt.forEach(t),KYr=r(iXe," \u2014 "),are=n(iXe,"A",{href:!0});var cWt=s(are);ZYr=r(cWt,"FlaxElectraForSequenceClassification"),cWt.forEach(t),eKr=r(iXe," (ELECTRA model)"),iXe.forEach(t),oKr=i(De),H3=n(De,"LI",{});var dXe=s(H3);gwe=n(dXe,"STRONG",{});var fWt=s(gwe);rKr=r(fWt,"mbart"),fWt.forEach(t),tKr=r(dXe," \u2014 "),nre=n(dXe,"A",{href:!0});var mWt=s(nre);aKr=r(mWt,"FlaxMBartForSequenceClassification"),mWt.forEach(t),nKr=r(dXe," (mBART model)"),dXe.forEach(t),sKr=i(De),U3=n(De,"LI",{});var cXe=s(U3);hwe=n(cXe,"STRONG",{});var gWt=s(hwe);lKr=r(gWt,"roberta"),gWt.forEach(t),iKr=r(cXe," \u2014 "),sre=n(cXe,"A",{href:!0});var hWt=s(sre);dKr=r(hWt,"FlaxRobertaForSequenceClassification"),hWt.forEach(t),cKr=r(cXe," (RoBERTa model)"),cXe.forEach(t),fKr=i(De),J3=n(De,"LI",{});var fXe=s(J3);pwe=n(fXe,"STRONG",{});var pWt=s(pwe);mKr=r(pWt,"roformer"),pWt.forEach(t),gKr=r(fXe," \u2014 "),lre=n(fXe,"A",{href:!0});var _Wt=s(lre);hKr=r(_Wt,"FlaxRoFormerForSequenceClassification"),_Wt.forEach(t),pKr=r(fXe," (RoFormer model)"),fXe.forEach(t),_Kr=i(De),Y3=n(De,"LI",{});var mXe=s(Y3);_we=n(mXe,"STRONG",{});var uWt=s(_we);uKr=r(uWt,"xlm-roberta"),uWt.forEach(t),bKr=r(mXe," \u2014 "),ire=n(mXe,"A",{href:!0});var bWt=s(ire);vKr=r(bWt,"FlaxXLMRobertaForSequenceClassification"),bWt.forEach(t),FKr=r(mXe," (XLM-RoBERTa model)"),mXe.forEach(t),De.forEach(t),TKr=i(_i),T(K3.$$.fragment,_i),_i.forEach(t),pi.forEach(t),IWe=i(f),pf=n(f,"H2",{class:!0});var zHe=s(pf);Z3=n(zHe,"A",{id:!0,class:!0,href:!0});var vWt=s(Z3);uwe=n(vWt,"SPAN",{});var FWt=s(uwe);T(H$.$$.fragment,FWt),FWt.forEach(t),vWt.forEach(t),MKr=i(zHe),bwe=n(zHe,"SPAN",{});var TWt=s(bwe);EKr=r(TWt,"FlaxAutoModelForQuestionAnswering"),TWt.forEach(t),zHe.forEach(t),NWe=i(f),Mr=n(f,"DIV",{class:!0});var ui=s(Mr);T(U$.$$.fragment,ui),CKr=i(ui),_f=n(ui,"P",{});var jae=s(_f);wKr=r(jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dre=n(jae,"A",{href:!0});var MWt=s(dre);AKr=r(MWt,"from_pretrained()"),MWt.forEach(t),LKr=r(jae," class method or the "),cre=n(jae,"A",{href:!0});var EWt=s(cre);yKr=r(EWt,"from_config()"),EWt.forEach(t),xKr=r(jae,` class
method.`),jae.forEach(t),$Kr=i(ui),J$=n(ui,"P",{});var WHe=s(J$);kKr=r(WHe,"This class cannot be instantiated directly using "),vwe=n(WHe,"CODE",{});var CWt=s(vwe);SKr=r(CWt,"__init__()"),CWt.forEach(t),RKr=r(WHe," (throws an error)."),WHe.forEach(t),PKr=i(ui),Zt=n(ui,"DIV",{class:!0});var ZL=s(Zt);T(Y$.$$.fragment,ZL),BKr=i(ZL),Fwe=n(ZL,"P",{});var wWt=s(Fwe);IKr=r(wWt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wWt.forEach(t),NKr=i(ZL),uf=n(ZL,"P",{});var Dae=s(uf);qKr=r(Dae,`Note:
Loading a model from its configuration file does `),Twe=n(Dae,"STRONG",{});var AWt=s(Twe);jKr=r(AWt,"not"),AWt.forEach(t),DKr=r(Dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=n(Dae,"A",{href:!0});var LWt=s(fre);GKr=r(LWt,"from_pretrained()"),LWt.forEach(t),OKr=r(Dae," to load the model weights."),Dae.forEach(t),VKr=i(ZL),T(ew.$$.fragment,ZL),ZL.forEach(t),XKr=i(ui),Jr=n(ui,"DIV",{class:!0});var bi=s(Jr);T(K$.$$.fragment,bi),zKr=i(bi),Mwe=n(bi,"P",{});var yWt=s(Mwe);WKr=r(yWt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yWt.forEach(t),QKr=i(bi),Ln=n(bi,"P",{});var ey=s(Ln);HKr=r(ey,"The model class to instantiate is selected based on the "),Ewe=n(ey,"CODE",{});var xWt=s(Ewe);UKr=r(xWt,"model_type"),xWt.forEach(t),JKr=r(ey,` property of the config object (either
passed as an argument or loaded from `),Cwe=n(ey,"CODE",{});var $Wt=s(Cwe);YKr=r($Wt,"pretrained_model_name_or_path"),$Wt.forEach(t),KKr=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wwe=n(ey,"CODE",{});var kWt=s(wwe);ZKr=r(kWt,"pretrained_model_name_or_path"),kWt.forEach(t),eZr=r(ey,":"),ey.forEach(t),oZr=i(bi),Re=n(bi,"UL",{});var Ge=s(Re);ow=n(Ge,"LI",{});var gXe=s(ow);Awe=n(gXe,"STRONG",{});var SWt=s(Awe);rZr=r(SWt,"albert"),SWt.forEach(t),tZr=r(gXe," \u2014 "),mre=n(gXe,"A",{href:!0});var RWt=s(mre);aZr=r(RWt,"FlaxAlbertForQuestionAnswering"),RWt.forEach(t),nZr=r(gXe," (ALBERT model)"),gXe.forEach(t),sZr=i(Ge),rw=n(Ge,"LI",{});var hXe=s(rw);Lwe=n(hXe,"STRONG",{});var PWt=s(Lwe);lZr=r(PWt,"bart"),PWt.forEach(t),iZr=r(hXe," \u2014 "),gre=n(hXe,"A",{href:!0});var BWt=s(gre);dZr=r(BWt,"FlaxBartForQuestionAnswering"),BWt.forEach(t),cZr=r(hXe," (BART model)"),hXe.forEach(t),fZr=i(Ge),tw=n(Ge,"LI",{});var pXe=s(tw);ywe=n(pXe,"STRONG",{});var IWt=s(ywe);mZr=r(IWt,"bert"),IWt.forEach(t),gZr=r(pXe," \u2014 "),hre=n(pXe,"A",{href:!0});var NWt=s(hre);hZr=r(NWt,"FlaxBertForQuestionAnswering"),NWt.forEach(t),pZr=r(pXe," (BERT model)"),pXe.forEach(t),_Zr=i(Ge),aw=n(Ge,"LI",{});var _Xe=s(aw);xwe=n(_Xe,"STRONG",{});var qWt=s(xwe);uZr=r(qWt,"big_bird"),qWt.forEach(t),bZr=r(_Xe," \u2014 "),pre=n(_Xe,"A",{href:!0});var jWt=s(pre);vZr=r(jWt,"FlaxBigBirdForQuestionAnswering"),jWt.forEach(t),FZr=r(_Xe," (BigBird model)"),_Xe.forEach(t),TZr=i(Ge),nw=n(Ge,"LI",{});var uXe=s(nw);$we=n(uXe,"STRONG",{});var DWt=s($we);MZr=r(DWt,"distilbert"),DWt.forEach(t),EZr=r(uXe," \u2014 "),_re=n(uXe,"A",{href:!0});var GWt=s(_re);CZr=r(GWt,"FlaxDistilBertForQuestionAnswering"),GWt.forEach(t),wZr=r(uXe," (DistilBERT model)"),uXe.forEach(t),AZr=i(Ge),sw=n(Ge,"LI",{});var bXe=s(sw);kwe=n(bXe,"STRONG",{});var OWt=s(kwe);LZr=r(OWt,"electra"),OWt.forEach(t),yZr=r(bXe," \u2014 "),ure=n(bXe,"A",{href:!0});var VWt=s(ure);xZr=r(VWt,"FlaxElectraForQuestionAnswering"),VWt.forEach(t),$Zr=r(bXe," (ELECTRA model)"),bXe.forEach(t),kZr=i(Ge),lw=n(Ge,"LI",{});var vXe=s(lw);Swe=n(vXe,"STRONG",{});var XWt=s(Swe);SZr=r(XWt,"mbart"),XWt.forEach(t),RZr=r(vXe," \u2014 "),bre=n(vXe,"A",{href:!0});var zWt=s(bre);PZr=r(zWt,"FlaxMBartForQuestionAnswering"),zWt.forEach(t),BZr=r(vXe," (mBART model)"),vXe.forEach(t),IZr=i(Ge),iw=n(Ge,"LI",{});var FXe=s(iw);Rwe=n(FXe,"STRONG",{});var WWt=s(Rwe);NZr=r(WWt,"roberta"),WWt.forEach(t),qZr=r(FXe," \u2014 "),vre=n(FXe,"A",{href:!0});var QWt=s(vre);jZr=r(QWt,"FlaxRobertaForQuestionAnswering"),QWt.forEach(t),DZr=r(FXe," (RoBERTa model)"),FXe.forEach(t),GZr=i(Ge),dw=n(Ge,"LI",{});var TXe=s(dw);Pwe=n(TXe,"STRONG",{});var HWt=s(Pwe);OZr=r(HWt,"roformer"),HWt.forEach(t),VZr=r(TXe," \u2014 "),Fre=n(TXe,"A",{href:!0});var UWt=s(Fre);XZr=r(UWt,"FlaxRoFormerForQuestionAnswering"),UWt.forEach(t),zZr=r(TXe," (RoFormer model)"),TXe.forEach(t),WZr=i(Ge),cw=n(Ge,"LI",{});var MXe=s(cw);Bwe=n(MXe,"STRONG",{});var JWt=s(Bwe);QZr=r(JWt,"xlm-roberta"),JWt.forEach(t),HZr=r(MXe," \u2014 "),Tre=n(MXe,"A",{href:!0});var YWt=s(Tre);UZr=r(YWt,"FlaxXLMRobertaForQuestionAnswering"),YWt.forEach(t),JZr=r(MXe," (XLM-RoBERTa model)"),MXe.forEach(t),Ge.forEach(t),YZr=i(bi),T(fw.$$.fragment,bi),bi.forEach(t),ui.forEach(t),qWe=i(f),bf=n(f,"H2",{class:!0});var QHe=s(bf);mw=n(QHe,"A",{id:!0,class:!0,href:!0});var KWt=s(mw);Iwe=n(KWt,"SPAN",{});var ZWt=s(Iwe);T(Z$.$$.fragment,ZWt),ZWt.forEach(t),KWt.forEach(t),KZr=i(QHe),Nwe=n(QHe,"SPAN",{});var eQt=s(Nwe);ZZr=r(eQt,"FlaxAutoModelForTokenClassification"),eQt.forEach(t),QHe.forEach(t),jWe=i(f),Er=n(f,"DIV",{class:!0});var vi=s(Er);T(ek.$$.fragment,vi),eet=i(vi),vf=n(vi,"P",{});var Gae=s(vf);oet=r(Gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Mre=n(Gae,"A",{href:!0});var oQt=s(Mre);ret=r(oQt,"from_pretrained()"),oQt.forEach(t),tet=r(Gae," class method or the "),Ere=n(Gae,"A",{href:!0});var rQt=s(Ere);aet=r(rQt,"from_config()"),rQt.forEach(t),net=r(Gae,` class
method.`),Gae.forEach(t),set=i(vi),ok=n(vi,"P",{});var HHe=s(ok);iet=r(HHe,"This class cannot be instantiated directly using "),qwe=n(HHe,"CODE",{});var tQt=s(qwe);det=r(tQt,"__init__()"),tQt.forEach(t),cet=r(HHe," (throws an error)."),HHe.forEach(t),fet=i(vi),ea=n(vi,"DIV",{class:!0});var oy=s(ea);T(rk.$$.fragment,oy),met=i(oy),jwe=n(oy,"P",{});var aQt=s(jwe);get=r(aQt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),aQt.forEach(t),het=i(oy),Ff=n(oy,"P",{});var Oae=s(Ff);pet=r(Oae,`Note:
Loading a model from its configuration file does `),Dwe=n(Oae,"STRONG",{});var nQt=s(Dwe);_et=r(nQt,"not"),nQt.forEach(t),uet=r(Oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=n(Oae,"A",{href:!0});var sQt=s(Cre);bet=r(sQt,"from_pretrained()"),sQt.forEach(t),vet=r(Oae," to load the model weights."),Oae.forEach(t),Fet=i(oy),T(gw.$$.fragment,oy),oy.forEach(t),Tet=i(vi),Yr=n(vi,"DIV",{class:!0});var Fi=s(Yr);T(tk.$$.fragment,Fi),Met=i(Fi),Gwe=n(Fi,"P",{});var lQt=s(Gwe);Eet=r(lQt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lQt.forEach(t),Cet=i(Fi),yn=n(Fi,"P",{});var ry=s(yn);wet=r(ry,"The model class to instantiate is selected based on the "),Owe=n(ry,"CODE",{});var iQt=s(Owe);Aet=r(iQt,"model_type"),iQt.forEach(t),Let=r(ry,` property of the config object (either
passed as an argument or loaded from `),Vwe=n(ry,"CODE",{});var dQt=s(Vwe);yet=r(dQt,"pretrained_model_name_or_path"),dQt.forEach(t),xet=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xwe=n(ry,"CODE",{});var cQt=s(Xwe);$et=r(cQt,"pretrained_model_name_or_path"),cQt.forEach(t),ket=r(ry,":"),ry.forEach(t),Set=i(Fi),Xe=n(Fi,"UL",{});var Eo=s(Xe);hw=n(Eo,"LI",{});var EXe=s(hw);zwe=n(EXe,"STRONG",{});var fQt=s(zwe);Ret=r(fQt,"albert"),fQt.forEach(t),Pet=r(EXe," \u2014 "),wre=n(EXe,"A",{href:!0});var mQt=s(wre);Bet=r(mQt,"FlaxAlbertForTokenClassification"),mQt.forEach(t),Iet=r(EXe," (ALBERT model)"),EXe.forEach(t),Net=i(Eo),pw=n(Eo,"LI",{});var CXe=s(pw);Wwe=n(CXe,"STRONG",{});var gQt=s(Wwe);qet=r(gQt,"bert"),gQt.forEach(t),jet=r(CXe," \u2014 "),Are=n(CXe,"A",{href:!0});var hQt=s(Are);Det=r(hQt,"FlaxBertForTokenClassification"),hQt.forEach(t),Get=r(CXe," (BERT model)"),CXe.forEach(t),Oet=i(Eo),_w=n(Eo,"LI",{});var wXe=s(_w);Qwe=n(wXe,"STRONG",{});var pQt=s(Qwe);Vet=r(pQt,"big_bird"),pQt.forEach(t),Xet=r(wXe," \u2014 "),Lre=n(wXe,"A",{href:!0});var _Qt=s(Lre);zet=r(_Qt,"FlaxBigBirdForTokenClassification"),_Qt.forEach(t),Wet=r(wXe," (BigBird model)"),wXe.forEach(t),Qet=i(Eo),uw=n(Eo,"LI",{});var AXe=s(uw);Hwe=n(AXe,"STRONG",{});var uQt=s(Hwe);Het=r(uQt,"distilbert"),uQt.forEach(t),Uet=r(AXe," \u2014 "),yre=n(AXe,"A",{href:!0});var bQt=s(yre);Jet=r(bQt,"FlaxDistilBertForTokenClassification"),bQt.forEach(t),Yet=r(AXe," (DistilBERT model)"),AXe.forEach(t),Ket=i(Eo),bw=n(Eo,"LI",{});var LXe=s(bw);Uwe=n(LXe,"STRONG",{});var vQt=s(Uwe);Zet=r(vQt,"electra"),vQt.forEach(t),eot=r(LXe," \u2014 "),xre=n(LXe,"A",{href:!0});var FQt=s(xre);oot=r(FQt,"FlaxElectraForTokenClassification"),FQt.forEach(t),rot=r(LXe," (ELECTRA model)"),LXe.forEach(t),tot=i(Eo),vw=n(Eo,"LI",{});var yXe=s(vw);Jwe=n(yXe,"STRONG",{});var TQt=s(Jwe);aot=r(TQt,"roberta"),TQt.forEach(t),not=r(yXe," \u2014 "),$re=n(yXe,"A",{href:!0});var MQt=s($re);sot=r(MQt,"FlaxRobertaForTokenClassification"),MQt.forEach(t),lot=r(yXe," (RoBERTa model)"),yXe.forEach(t),iot=i(Eo),Fw=n(Eo,"LI",{});var xXe=s(Fw);Ywe=n(xXe,"STRONG",{});var EQt=s(Ywe);dot=r(EQt,"roformer"),EQt.forEach(t),cot=r(xXe," \u2014 "),kre=n(xXe,"A",{href:!0});var CQt=s(kre);fot=r(CQt,"FlaxRoFormerForTokenClassification"),CQt.forEach(t),mot=r(xXe," (RoFormer model)"),xXe.forEach(t),got=i(Eo),Tw=n(Eo,"LI",{});var $Xe=s(Tw);Kwe=n($Xe,"STRONG",{});var wQt=s(Kwe);hot=r(wQt,"xlm-roberta"),wQt.forEach(t),pot=r($Xe," \u2014 "),Sre=n($Xe,"A",{href:!0});var AQt=s(Sre);_ot=r(AQt,"FlaxXLMRobertaForTokenClassification"),AQt.forEach(t),uot=r($Xe," (XLM-RoBERTa model)"),$Xe.forEach(t),Eo.forEach(t),bot=i(Fi),T(Mw.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),DWe=i(f),Tf=n(f,"H2",{class:!0});var UHe=s(Tf);Ew=n(UHe,"A",{id:!0,class:!0,href:!0});var LQt=s(Ew);Zwe=n(LQt,"SPAN",{});var yQt=s(Zwe);T(ak.$$.fragment,yQt),yQt.forEach(t),LQt.forEach(t),vot=i(UHe),eAe=n(UHe,"SPAN",{});var xQt=s(eAe);Fot=r(xQt,"FlaxAutoModelForMultipleChoice"),xQt.forEach(t),UHe.forEach(t),GWe=i(f),Cr=n(f,"DIV",{class:!0});var Ti=s(Cr);T(nk.$$.fragment,Ti),Tot=i(Ti),Mf=n(Ti,"P",{});var Vae=s(Mf);Mot=r(Vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Rre=n(Vae,"A",{href:!0});var $Qt=s(Rre);Eot=r($Qt,"from_pretrained()"),$Qt.forEach(t),Cot=r(Vae," class method or the "),Pre=n(Vae,"A",{href:!0});var kQt=s(Pre);wot=r(kQt,"from_config()"),kQt.forEach(t),Aot=r(Vae,` class
method.`),Vae.forEach(t),Lot=i(Ti),sk=n(Ti,"P",{});var JHe=s(sk);yot=r(JHe,"This class cannot be instantiated directly using "),oAe=n(JHe,"CODE",{});var SQt=s(oAe);xot=r(SQt,"__init__()"),SQt.forEach(t),$ot=r(JHe," (throws an error)."),JHe.forEach(t),kot=i(Ti),oa=n(Ti,"DIV",{class:!0});var ty=s(oa);T(lk.$$.fragment,ty),Sot=i(ty),rAe=n(ty,"P",{});var RQt=s(rAe);Rot=r(RQt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),RQt.forEach(t),Pot=i(ty),Ef=n(ty,"P",{});var Xae=s(Ef);Bot=r(Xae,`Note:
Loading a model from its configuration file does `),tAe=n(Xae,"STRONG",{});var PQt=s(tAe);Iot=r(PQt,"not"),PQt.forEach(t),Not=r(Xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=n(Xae,"A",{href:!0});var BQt=s(Bre);qot=r(BQt,"from_pretrained()"),BQt.forEach(t),jot=r(Xae," to load the model weights."),Xae.forEach(t),Dot=i(ty),T(Cw.$$.fragment,ty),ty.forEach(t),Got=i(Ti),Kr=n(Ti,"DIV",{class:!0});var Mi=s(Kr);T(ik.$$.fragment,Mi),Oot=i(Mi),aAe=n(Mi,"P",{});var IQt=s(aAe);Vot=r(IQt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),IQt.forEach(t),Xot=i(Mi),xn=n(Mi,"P",{});var ay=s(xn);zot=r(ay,"The model class to instantiate is selected based on the "),nAe=n(ay,"CODE",{});var NQt=s(nAe);Wot=r(NQt,"model_type"),NQt.forEach(t),Qot=r(ay,` property of the config object (either
passed as an argument or loaded from `),sAe=n(ay,"CODE",{});var qQt=s(sAe);Hot=r(qQt,"pretrained_model_name_or_path"),qQt.forEach(t),Uot=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lAe=n(ay,"CODE",{});var jQt=s(lAe);Jot=r(jQt,"pretrained_model_name_or_path"),jQt.forEach(t),Yot=r(ay,":"),ay.forEach(t),Kot=i(Mi),ze=n(Mi,"UL",{});var Co=s(ze);ww=n(Co,"LI",{});var kXe=s(ww);iAe=n(kXe,"STRONG",{});var DQt=s(iAe);Zot=r(DQt,"albert"),DQt.forEach(t),ert=r(kXe," \u2014 "),Ire=n(kXe,"A",{href:!0});var GQt=s(Ire);ort=r(GQt,"FlaxAlbertForMultipleChoice"),GQt.forEach(t),rrt=r(kXe," (ALBERT model)"),kXe.forEach(t),trt=i(Co),Aw=n(Co,"LI",{});var SXe=s(Aw);dAe=n(SXe,"STRONG",{});var OQt=s(dAe);art=r(OQt,"bert"),OQt.forEach(t),nrt=r(SXe," \u2014 "),Nre=n(SXe,"A",{href:!0});var VQt=s(Nre);srt=r(VQt,"FlaxBertForMultipleChoice"),VQt.forEach(t),lrt=r(SXe," (BERT model)"),SXe.forEach(t),irt=i(Co),Lw=n(Co,"LI",{});var RXe=s(Lw);cAe=n(RXe,"STRONG",{});var XQt=s(cAe);drt=r(XQt,"big_bird"),XQt.forEach(t),crt=r(RXe," \u2014 "),qre=n(RXe,"A",{href:!0});var zQt=s(qre);frt=r(zQt,"FlaxBigBirdForMultipleChoice"),zQt.forEach(t),mrt=r(RXe," (BigBird model)"),RXe.forEach(t),grt=i(Co),yw=n(Co,"LI",{});var PXe=s(yw);fAe=n(PXe,"STRONG",{});var WQt=s(fAe);hrt=r(WQt,"distilbert"),WQt.forEach(t),prt=r(PXe," \u2014 "),jre=n(PXe,"A",{href:!0});var QQt=s(jre);_rt=r(QQt,"FlaxDistilBertForMultipleChoice"),QQt.forEach(t),urt=r(PXe," (DistilBERT model)"),PXe.forEach(t),brt=i(Co),xw=n(Co,"LI",{});var BXe=s(xw);mAe=n(BXe,"STRONG",{});var HQt=s(mAe);vrt=r(HQt,"electra"),HQt.forEach(t),Frt=r(BXe," \u2014 "),Dre=n(BXe,"A",{href:!0});var UQt=s(Dre);Trt=r(UQt,"FlaxElectraForMultipleChoice"),UQt.forEach(t),Mrt=r(BXe," (ELECTRA model)"),BXe.forEach(t),Ert=i(Co),$w=n(Co,"LI",{});var IXe=s($w);gAe=n(IXe,"STRONG",{});var JQt=s(gAe);Crt=r(JQt,"roberta"),JQt.forEach(t),wrt=r(IXe," \u2014 "),Gre=n(IXe,"A",{href:!0});var YQt=s(Gre);Art=r(YQt,"FlaxRobertaForMultipleChoice"),YQt.forEach(t),Lrt=r(IXe," (RoBERTa model)"),IXe.forEach(t),yrt=i(Co),kw=n(Co,"LI",{});var NXe=s(kw);hAe=n(NXe,"STRONG",{});var KQt=s(hAe);xrt=r(KQt,"roformer"),KQt.forEach(t),$rt=r(NXe," \u2014 "),Ore=n(NXe,"A",{href:!0});var ZQt=s(Ore);krt=r(ZQt,"FlaxRoFormerForMultipleChoice"),ZQt.forEach(t),Srt=r(NXe," (RoFormer model)"),NXe.forEach(t),Rrt=i(Co),Sw=n(Co,"LI",{});var qXe=s(Sw);pAe=n(qXe,"STRONG",{});var eHt=s(pAe);Prt=r(eHt,"xlm-roberta"),eHt.forEach(t),Brt=r(qXe," \u2014 "),Vre=n(qXe,"A",{href:!0});var oHt=s(Vre);Irt=r(oHt,"FlaxXLMRobertaForMultipleChoice"),oHt.forEach(t),Nrt=r(qXe," (XLM-RoBERTa model)"),qXe.forEach(t),Co.forEach(t),qrt=i(Mi),T(Rw.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),OWe=i(f),Cf=n(f,"H2",{class:!0});var YHe=s(Cf);Pw=n(YHe,"A",{id:!0,class:!0,href:!0});var rHt=s(Pw);_Ae=n(rHt,"SPAN",{});var tHt=s(_Ae);T(dk.$$.fragment,tHt),tHt.forEach(t),rHt.forEach(t),jrt=i(YHe),uAe=n(YHe,"SPAN",{});var aHt=s(uAe);Drt=r(aHt,"FlaxAutoModelForNextSentencePrediction"),aHt.forEach(t),YHe.forEach(t),VWe=i(f),wr=n(f,"DIV",{class:!0});var Ei=s(wr);T(ck.$$.fragment,Ei),Grt=i(Ei),wf=n(Ei,"P",{});var zae=s(wf);Ort=r(zae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Xre=n(zae,"A",{href:!0});var nHt=s(Xre);Vrt=r(nHt,"from_pretrained()"),nHt.forEach(t),Xrt=r(zae," class method or the "),zre=n(zae,"A",{href:!0});var sHt=s(zre);zrt=r(sHt,"from_config()"),sHt.forEach(t),Wrt=r(zae,` class
method.`),zae.forEach(t),Qrt=i(Ei),fk=n(Ei,"P",{});var KHe=s(fk);Hrt=r(KHe,"This class cannot be instantiated directly using "),bAe=n(KHe,"CODE",{});var lHt=s(bAe);Urt=r(lHt,"__init__()"),lHt.forEach(t),Jrt=r(KHe," (throws an error)."),KHe.forEach(t),Yrt=i(Ei),ra=n(Ei,"DIV",{class:!0});var ny=s(ra);T(mk.$$.fragment,ny),Krt=i(ny),vAe=n(ny,"P",{});var iHt=s(vAe);Zrt=r(iHt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),iHt.forEach(t),ett=i(ny),Af=n(ny,"P",{});var Wae=s(Af);ott=r(Wae,`Note:
Loading a model from its configuration file does `),FAe=n(Wae,"STRONG",{});var dHt=s(FAe);rtt=r(dHt,"not"),dHt.forEach(t),ttt=r(Wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wre=n(Wae,"A",{href:!0});var cHt=s(Wre);att=r(cHt,"from_pretrained()"),cHt.forEach(t),ntt=r(Wae," to load the model weights."),Wae.forEach(t),stt=i(ny),T(Bw.$$.fragment,ny),ny.forEach(t),ltt=i(Ei),Zr=n(Ei,"DIV",{class:!0});var Ci=s(Zr);T(gk.$$.fragment,Ci),itt=i(Ci),TAe=n(Ci,"P",{});var fHt=s(TAe);dtt=r(fHt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fHt.forEach(t),ctt=i(Ci),$n=n(Ci,"P",{});var sy=s($n);ftt=r(sy,"The model class to instantiate is selected based on the "),MAe=n(sy,"CODE",{});var mHt=s(MAe);mtt=r(mHt,"model_type"),mHt.forEach(t),gtt=r(sy,` property of the config object (either
passed as an argument or loaded from `),EAe=n(sy,"CODE",{});var gHt=s(EAe);htt=r(gHt,"pretrained_model_name_or_path"),gHt.forEach(t),ptt=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CAe=n(sy,"CODE",{});var hHt=s(CAe);_tt=r(hHt,"pretrained_model_name_or_path"),hHt.forEach(t),utt=r(sy,":"),sy.forEach(t),btt=i(Ci),wAe=n(Ci,"UL",{});var pHt=s(wAe);Iw=n(pHt,"LI",{});var jXe=s(Iw);AAe=n(jXe,"STRONG",{});var _Ht=s(AAe);vtt=r(_Ht,"bert"),_Ht.forEach(t),Ftt=r(jXe," \u2014 "),Qre=n(jXe,"A",{href:!0});var uHt=s(Qre);Ttt=r(uHt,"FlaxBertForNextSentencePrediction"),uHt.forEach(t),Mtt=r(jXe," (BERT model)"),jXe.forEach(t),pHt.forEach(t),Ett=i(Ci),T(Nw.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),XWe=i(f),Lf=n(f,"H2",{class:!0});var ZHe=s(Lf);qw=n(ZHe,"A",{id:!0,class:!0,href:!0});var bHt=s(qw);LAe=n(bHt,"SPAN",{});var vHt=s(LAe);T(hk.$$.fragment,vHt),vHt.forEach(t),bHt.forEach(t),Ctt=i(ZHe),yAe=n(ZHe,"SPAN",{});var FHt=s(yAe);wtt=r(FHt,"FlaxAutoModelForImageClassification"),FHt.forEach(t),ZHe.forEach(t),zWe=i(f),Ar=n(f,"DIV",{class:!0});var wi=s(Ar);T(pk.$$.fragment,wi),Att=i(wi),yf=n(wi,"P",{});var Qae=s(yf);Ltt=r(Qae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Hre=n(Qae,"A",{href:!0});var THt=s(Hre);ytt=r(THt,"from_pretrained()"),THt.forEach(t),xtt=r(Qae," class method or the "),Ure=n(Qae,"A",{href:!0});var MHt=s(Ure);$tt=r(MHt,"from_config()"),MHt.forEach(t),ktt=r(Qae,` class
method.`),Qae.forEach(t),Stt=i(wi),_k=n(wi,"P",{});var eUe=s(_k);Rtt=r(eUe,"This class cannot be instantiated directly using "),xAe=n(eUe,"CODE",{});var EHt=s(xAe);Ptt=r(EHt,"__init__()"),EHt.forEach(t),Btt=r(eUe," (throws an error)."),eUe.forEach(t),Itt=i(wi),ta=n(wi,"DIV",{class:!0});var ly=s(ta);T(uk.$$.fragment,ly),Ntt=i(ly),$Ae=n(ly,"P",{});var CHt=s($Ae);qtt=r(CHt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),CHt.forEach(t),jtt=i(ly),xf=n(ly,"P",{});var Hae=s(xf);Dtt=r(Hae,`Note:
Loading a model from its configuration file does `),kAe=n(Hae,"STRONG",{});var wHt=s(kAe);Gtt=r(wHt,"not"),wHt.forEach(t),Ott=r(Hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jre=n(Hae,"A",{href:!0});var AHt=s(Jre);Vtt=r(AHt,"from_pretrained()"),AHt.forEach(t),Xtt=r(Hae," to load the model weights."),Hae.forEach(t),ztt=i(ly),T(jw.$$.fragment,ly),ly.forEach(t),Wtt=i(wi),et=n(wi,"DIV",{class:!0});var Ai=s(et);T(bk.$$.fragment,Ai),Qtt=i(Ai),SAe=n(Ai,"P",{});var LHt=s(SAe);Htt=r(LHt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),LHt.forEach(t),Utt=i(Ai),kn=n(Ai,"P",{});var iy=s(kn);Jtt=r(iy,"The model class to instantiate is selected based on the "),RAe=n(iy,"CODE",{});var yHt=s(RAe);Ytt=r(yHt,"model_type"),yHt.forEach(t),Ktt=r(iy,` property of the config object (either
passed as an argument or loaded from `),PAe=n(iy,"CODE",{});var xHt=s(PAe);Ztt=r(xHt,"pretrained_model_name_or_path"),xHt.forEach(t),eat=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BAe=n(iy,"CODE",{});var $Ht=s(BAe);oat=r($Ht,"pretrained_model_name_or_path"),$Ht.forEach(t),rat=r(iy,":"),iy.forEach(t),tat=i(Ai),vk=n(Ai,"UL",{});var oUe=s(vk);Dw=n(oUe,"LI",{});var DXe=s(Dw);IAe=n(DXe,"STRONG",{});var kHt=s(IAe);aat=r(kHt,"beit"),kHt.forEach(t),nat=r(DXe," \u2014 "),Yre=n(DXe,"A",{href:!0});var SHt=s(Yre);sat=r(SHt,"FlaxBeitForImageClassification"),SHt.forEach(t),lat=r(DXe," (BEiT model)"),DXe.forEach(t),iat=i(oUe),Gw=n(oUe,"LI",{});var GXe=s(Gw);NAe=n(GXe,"STRONG",{});var RHt=s(NAe);dat=r(RHt,"vit"),RHt.forEach(t),cat=r(GXe," \u2014 "),Kre=n(GXe,"A",{href:!0});var PHt=s(Kre);fat=r(PHt,"FlaxViTForImageClassification"),PHt.forEach(t),mat=r(GXe," (ViT model)"),GXe.forEach(t),oUe.forEach(t),gat=i(Ai),T(Ow.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),WWe=i(f),$f=n(f,"H2",{class:!0});var rUe=s($f);Vw=n(rUe,"A",{id:!0,class:!0,href:!0});var BHt=s(Vw);qAe=n(BHt,"SPAN",{});var IHt=s(qAe);T(Fk.$$.fragment,IHt),IHt.forEach(t),BHt.forEach(t),hat=i(rUe),jAe=n(rUe,"SPAN",{});var NHt=s(jAe);pat=r(NHt,"FlaxAutoModelForVision2Seq"),NHt.forEach(t),rUe.forEach(t),QWe=i(f),Lr=n(f,"DIV",{class:!0});var Li=s(Lr);T(Tk.$$.fragment,Li),_at=i(Li),kf=n(Li,"P",{});var Uae=s(kf);uat=r(Uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Zre=n(Uae,"A",{href:!0});var qHt=s(Zre);bat=r(qHt,"from_pretrained()"),qHt.forEach(t),vat=r(Uae," class method or the "),ete=n(Uae,"A",{href:!0});var jHt=s(ete);Fat=r(jHt,"from_config()"),jHt.forEach(t),Tat=r(Uae,` class
method.`),Uae.forEach(t),Mat=i(Li),Mk=n(Li,"P",{});var tUe=s(Mk);Eat=r(tUe,"This class cannot be instantiated directly using "),DAe=n(tUe,"CODE",{});var DHt=s(DAe);Cat=r(DHt,"__init__()"),DHt.forEach(t),wat=r(tUe," (throws an error)."),tUe.forEach(t),Aat=i(Li),aa=n(Li,"DIV",{class:!0});var dy=s(aa);T(Ek.$$.fragment,dy),Lat=i(dy),GAe=n(dy,"P",{});var GHt=s(GAe);yat=r(GHt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),GHt.forEach(t),xat=i(dy),Sf=n(dy,"P",{});var Jae=s(Sf);$at=r(Jae,`Note:
Loading a model from its configuration file does `),OAe=n(Jae,"STRONG",{});var OHt=s(OAe);kat=r(OHt,"not"),OHt.forEach(t),Sat=r(Jae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ote=n(Jae,"A",{href:!0});var VHt=s(ote);Rat=r(VHt,"from_pretrained()"),VHt.forEach(t),Pat=r(Jae," to load the model weights."),Jae.forEach(t),Bat=i(dy),T(Xw.$$.fragment,dy),dy.forEach(t),Iat=i(Li),ot=n(Li,"DIV",{class:!0});var yi=s(ot);T(Ck.$$.fragment,yi),Nat=i(yi),VAe=n(yi,"P",{});var XHt=s(VAe);qat=r(XHt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),XHt.forEach(t),jat=i(yi),Sn=n(yi,"P",{});var cy=s(Sn);Dat=r(cy,"The model class to instantiate is selected based on the "),XAe=n(cy,"CODE",{});var zHt=s(XAe);Gat=r(zHt,"model_type"),zHt.forEach(t),Oat=r(cy,` property of the config object (either
passed as an argument or loaded from `),zAe=n(cy,"CODE",{});var WHt=s(zAe);Vat=r(WHt,"pretrained_model_name_or_path"),WHt.forEach(t),Xat=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WAe=n(cy,"CODE",{});var QHt=s(WAe);zat=r(QHt,"pretrained_model_name_or_path"),QHt.forEach(t),Wat=r(cy,":"),cy.forEach(t),Qat=i(yi),QAe=n(yi,"UL",{});var HHt=s(QAe);zw=n(HHt,"LI",{});var OXe=s(zw);HAe=n(OXe,"STRONG",{});var UHt=s(HAe);Hat=r(UHt,"vision-encoder-decoder"),UHt.forEach(t),Uat=r(OXe," \u2014 "),rte=n(OXe,"A",{href:!0});var JHt=s(rte);Jat=r(JHt,"FlaxVisionEncoderDecoderModel"),JHt.forEach(t),Yat=r(OXe," (Vision Encoder decoder model)"),OXe.forEach(t),HHt.forEach(t),Kat=i(yi),T(Ww.$$.fragment,yi),yi.forEach(t),Li.forEach(t),this.h()},h(){d(g,"name","hf:doc:metadata"),d(g,"content",JSON.stringify(rYt)),d(m,"id","auto-classes"),d(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m,"href","#auto-classes"),d(p,"class","relative group"),d(Pn,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.AutoConfig"),d(In,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.AutoModel"),d(Nn,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.AutoTokenizer"),d(Bi,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertModel"),d(Df,"id","extending-the-auto-classes"),d(Df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Df,"href","#extending-the-auto-classes"),d(Ii,"class","relative group"),d(Of,"id","transformers.AutoConfig"),d(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Of,"href","#transformers.AutoConfig"),d(Ni,"class","relative group"),d(eR,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(oR,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertConfig"),d(rR,"href","/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartConfig"),d(tR,"href","/docs/transformers/pr_17640/en/model_doc/beit#transformers.BeitConfig"),d(aR,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertConfig"),d(nR,"href","/docs/transformers/pr_17640/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(sR,"href","/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdConfig"),d(lR,"href","/docs/transformers/pr_17640/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(iR,"href","/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(dR,"href","/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(cR,"href","/docs/transformers/pr_17640/en/model_doc/bloom#transformers.BloomConfig"),d(fR,"href","/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertConfig"),d(mR,"href","/docs/transformers/pr_17640/en/model_doc/canine#transformers.CanineConfig"),d(gR,"href","/docs/transformers/pr_17640/en/model_doc/clip#transformers.CLIPConfig"),d(hR,"href","/docs/transformers/pr_17640/en/model_doc/codegen#transformers.CodeGenConfig"),d(pR,"href","/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertConfig"),d(_R,"href","/docs/transformers/pr_17640/en/model_doc/convnext#transformers.ConvNextConfig"),d(uR,"href","/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.CTRLConfig"),d(bR,"href","/docs/transformers/pr_17640/en/model_doc/cvt#transformers.CvtConfig"),d(vR,"href","/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(FR,"href","/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(TR,"href","/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(MR,"href","/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaConfig"),d(ER,"href","/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(CR,"href","/docs/transformers/pr_17640/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(wR,"href","/docs/transformers/pr_17640/en/model_doc/deit#transformers.DeiTConfig"),d(AR,"href","/docs/transformers/pr_17640/en/model_doc/detr#transformers.DetrConfig"),d(LR,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertConfig"),d(yR,"href","/docs/transformers/pr_17640/en/model_doc/dpr#transformers.DPRConfig"),d(xR,"href","/docs/transformers/pr_17640/en/model_doc/dpt#transformers.DPTConfig"),d($R,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraConfig"),d(kR,"href","/docs/transformers/pr_17640/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(SR,"href","/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertConfig"),d(RR,"href","/docs/transformers/pr_17640/en/model_doc/flava#transformers.FlavaConfig"),d(PR,"href","/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetConfig"),d(BR,"href","/docs/transformers/pr_17640/en/model_doc/fsmt#transformers.FSMTConfig"),d(IR,"href","/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelConfig"),d(NR,"href","/docs/transformers/pr_17640/en/model_doc/glpn#transformers.GLPNConfig"),d(qR,"href","/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2Config"),d(jR,"href","/docs/transformers/pr_17640/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(DR,"href","/docs/transformers/pr_17640/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),d(GR,"href","/docs/transformers/pr_17640/en/model_doc/gptj#transformers.GPTJConfig"),d(OR,"href","/docs/transformers/pr_17640/en/model_doc/groupvit#transformers.GroupViTConfig"),d(VR,"href","/docs/transformers/pr_17640/en/model_doc/hubert#transformers.HubertConfig"),d(XR,"href","/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertConfig"),d(zR,"href","/docs/transformers/pr_17640/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(WR,"href","/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(QR,"href","/docs/transformers/pr_17640/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(HR,"href","/docs/transformers/pr_17640/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),d(UR,"href","/docs/transformers/pr_17640/en/model_doc/led#transformers.LEDConfig"),d(JR,"href","/docs/transformers/pr_17640/en/model_doc/levit#transformers.LevitConfig"),d(YR,"href","/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerConfig"),d(KR,"href","/docs/transformers/pr_17640/en/model_doc/longt5#transformers.LongT5Config"),d(ZR,"href","/docs/transformers/pr_17640/en/model_doc/luke#transformers.LukeConfig"),d(eP,"href","/docs/transformers/pr_17640/en/model_doc/lxmert#transformers.LxmertConfig"),d(oP,"href","/docs/transformers/pr_17640/en/model_doc/m2m_100#transformers.M2M100Config"),d(rP,"href","/docs/transformers/pr_17640/en/model_doc/marian#transformers.MarianConfig"),d(tP,"href","/docs/transformers/pr_17640/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(aP,"href","/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartConfig"),d(nP,"href","/docs/transformers/pr_17640/en/model_doc/mctct#transformers.MCTCTConfig"),d(sP,"href","/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(lP,"href","/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(iP,"href","/docs/transformers/pr_17640/en/model_doc/mobilevit#transformers.MobileViTConfig"),d(dP,"href","/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetConfig"),d(cP,"href","/docs/transformers/pr_17640/en/model_doc/mt5#transformers.MT5Config"),d(fP,"href","/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpConfig"),d(mP,"href","/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaConfig"),d(gP,"href","/docs/transformers/pr_17640/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(hP,"href","/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(pP,"href","/docs/transformers/pr_17640/en/model_doc/opt#transformers.OPTConfig"),d(_P,"href","/docs/transformers/pr_17640/en/model_doc/owlvit#transformers.OwlViTConfig"),d(uP,"href","/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.PegasusConfig"),d(bP,"href","/docs/transformers/pr_17640/en/model_doc/perceiver#transformers.PerceiverConfig"),d(vP,"href","/docs/transformers/pr_17640/en/model_doc/plbart#transformers.PLBartConfig"),d(FP,"href","/docs/transformers/pr_17640/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(TP,"href","/docs/transformers/pr_17640/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(MP,"href","/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(EP,"href","/docs/transformers/pr_17640/en/model_doc/rag#transformers.RagConfig"),d(CP,"href","/docs/transformers/pr_17640/en/model_doc/realm#transformers.RealmConfig"),d(wP,"href","/docs/transformers/pr_17640/en/model_doc/reformer#transformers.ReformerConfig"),d(AP,"href","/docs/transformers/pr_17640/en/model_doc/regnet#transformers.RegNetConfig"),d(LP,"href","/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertConfig"),d(yP,"href","/docs/transformers/pr_17640/en/model_doc/resnet#transformers.ResNetConfig"),d(xP,"href","/docs/transformers/pr_17640/en/model_doc/retribert#transformers.RetriBertConfig"),d($P,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaConfig"),d(kP,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerConfig"),d(SP,"href","/docs/transformers/pr_17640/en/model_doc/segformer#transformers.SegformerConfig"),d(RP,"href","/docs/transformers/pr_17640/en/model_doc/sew#transformers.SEWConfig"),d(PP,"href","/docs/transformers/pr_17640/en/model_doc/sew-d#transformers.SEWDConfig"),d(BP,"href","/docs/transformers/pr_17640/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(IP,"href","/docs/transformers/pr_17640/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(NP,"href","/docs/transformers/pr_17640/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(qP,"href","/docs/transformers/pr_17640/en/model_doc/splinter#transformers.SplinterConfig"),d(jP,"href","/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(DP,"href","/docs/transformers/pr_17640/en/model_doc/swin#transformers.SwinConfig"),d(GP,"href","/docs/transformers/pr_17640/en/model_doc/t5#transformers.T5Config"),d(OP,"href","/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasConfig"),d(VP,"href","/docs/transformers/pr_17640/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),d(XP,"href","/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(zP,"href","/docs/transformers/pr_17640/en/model_doc/trocr#transformers.TrOCRConfig"),d(WP,"href","/docs/transformers/pr_17640/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(QP,"href","/docs/transformers/pr_17640/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(HP,"href","/docs/transformers/pr_17640/en/model_doc/van#transformers.VanConfig"),d(UP,"href","/docs/transformers/pr_17640/en/model_doc/vilt#transformers.ViltConfig"),d(JP,"href","/docs/transformers/pr_17640/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(YP,"href","/docs/transformers/pr_17640/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(KP,"href","/docs/transformers/pr_17640/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(ZP,"href","/docs/transformers/pr_17640/en/model_doc/vit#transformers.ViTConfig"),d(eB,"href","/docs/transformers/pr_17640/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(oB,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(rB,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),d(tB,"href","/docs/transformers/pr_17640/en/model_doc/wavlm#transformers.WavLMConfig"),d(aB,"href","/docs/transformers/pr_17640/en/model_doc/xglm#transformers.XGLMConfig"),d(nB,"href","/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMConfig"),d(sB,"href","/docs/transformers/pr_17640/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(lB,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(iB,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(dB,"href","/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetConfig"),d(cB,"href","/docs/transformers/pr_17640/en/model_doc/yolos#transformers.YolosConfig"),d(fB,"href","/docs/transformers/pr_17640/en/model_doc/yoso#transformers.YosoConfig"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rh,"id","transformers.AutoTokenizer"),d(rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rh,"href","#transformers.AutoTokenizer"),d(ji,"class","relative group"),d(mB,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(gB,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertTokenizer"),d(hB,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(pB,"href","/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartTokenizer"),d(_B,"href","/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartTokenizerFast"),d(uB,"href","/docs/transformers/pr_17640/en/model_doc/barthez#transformers.BarthezTokenizer"),d(bB,"href","/docs/transformers/pr_17640/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(vB,"href","/docs/transformers/pr_17640/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(FB,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertTokenizer"),d(TB,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertTokenizerFast"),d(MB,"href","/docs/transformers/pr_17640/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(EB,"href","/docs/transformers/pr_17640/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(CB,"href","/docs/transformers/pr_17640/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(wB,"href","/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(AB,"href","/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(LB,"href","/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(yB,"href","/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(xB,"href","/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d($B,"href","/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(kB,"href","/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(SB,"href","/docs/transformers/pr_17640/en/model_doc/bloom#transformers.BloomTokenizerFast"),d(RB,"href","/docs/transformers/pr_17640/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(PB,"href","/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertTokenizer"),d(BB,"href","/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(IB,"href","/docs/transformers/pr_17640/en/model_doc/canine#transformers.CanineTokenizer"),d(NB,"href","/docs/transformers/pr_17640/en/model_doc/clip#transformers.CLIPTokenizer"),d(qB,"href","/docs/transformers/pr_17640/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(jB,"href","/docs/transformers/pr_17640/en/model_doc/codegen#transformers.CodeGenTokenizer"),d(DB,"href","/docs/transformers/pr_17640/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),d(GB,"href","/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(OB,"href","/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(VB,"href","/docs/transformers/pr_17640/en/model_doc/cpm#transformers.CpmTokenizer"),d(XB,"href","/docs/transformers/pr_17640/en/model_doc/cpm#transformers.CpmTokenizerFast"),d(zB,"href","/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(WB,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaTokenizer"),d(QB,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(HB,"href","/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaTokenizer"),d(UB,"href","/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(JB,"href","/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(YB,"href","/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(KB,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(ZB,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(eI,"href","/docs/transformers/pr_17640/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(oI,"href","/docs/transformers/pr_17640/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(rI,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraTokenizer"),d(tI,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(aI,"href","/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(nI,"href","/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetTokenizer"),d(sI,"href","/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(lI,"href","/docs/transformers/pr_17640/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(iI,"href","/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelTokenizer"),d(dI,"href","/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(cI,"href","/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(fI,"href","/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(mI,"href","/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(gI,"href","/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(hI,"href","/docs/transformers/pr_17640/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),d(pI,"href","/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(_I,"href","/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(uI,"href","/docs/transformers/pr_17640/en/model_doc/clip#transformers.CLIPTokenizer"),d(bI,"href","/docs/transformers/pr_17640/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(vI,"href","/docs/transformers/pr_17640/en/model_doc/herbert#transformers.HerbertTokenizer"),d(FI,"href","/docs/transformers/pr_17640/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(TI,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(MI,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaTokenizer"),d(EI,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(CI,"href","/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(wI,"href","/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(AI,"href","/docs/transformers/pr_17640/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(LI,"href","/docs/transformers/pr_17640/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(yI,"href","/docs/transformers/pr_17640/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),d(xI,"href","/docs/transformers/pr_17640/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),d($I,"href","/docs/transformers/pr_17640/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(kI,"href","/docs/transformers/pr_17640/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(SI,"href","/docs/transformers/pr_17640/en/model_doc/led#transformers.LEDTokenizer"),d(RI,"href","/docs/transformers/pr_17640/en/model_doc/led#transformers.LEDTokenizerFast"),d(PI,"href","/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerTokenizer"),d(BI,"href","/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(II,"href","/docs/transformers/pr_17640/en/model_doc/mt5#transformers.T5Tokenizer"),d(NI,"href","/docs/transformers/pr_17640/en/model_doc/mt5#transformers.T5TokenizerFast"),d(qI,"href","/docs/transformers/pr_17640/en/model_doc/luke#transformers.LukeTokenizer"),d(jI,"href","/docs/transformers/pr_17640/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(DI,"href","/docs/transformers/pr_17640/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(GI,"href","/docs/transformers/pr_17640/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(OI,"href","/docs/transformers/pr_17640/en/model_doc/marian#transformers.MarianTokenizer"),d(VI,"href","/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartTokenizer"),d(XI,"href","/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(zI,"href","/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(WI,"href","/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(QI,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertTokenizer"),d(HI,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertTokenizerFast"),d(UI,"href","/docs/transformers/pr_17640/en/model_doc/mluke#transformers.MLukeTokenizer"),d(JI,"href","/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(YI,"href","/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(KI,"href","/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(ZI,"href","/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(eN,"href","/docs/transformers/pr_17640/en/model_doc/mt5#transformers.T5Tokenizer"),d(oN,"href","/docs/transformers/pr_17640/en/model_doc/mt5#transformers.T5TokenizerFast"),d(rN,"href","/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpTokenizer"),d(tN,"href","/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpTokenizerFast"),d(aN,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertTokenizer"),d(nN,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertTokenizerFast"),d(sN,"href","/docs/transformers/pr_17640/en/model_doc/nllb#transformers.NllbTokenizer"),d(lN,"href","/docs/transformers/pr_17640/en/model_doc/nllb#transformers.NllbTokenizerFast"),d(iN,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertTokenizer"),d(dN,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(cN,"href","/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(fN,"href","/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(mN,"href","/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(gN,"href","/docs/transformers/pr_17640/en/model_doc/clip#transformers.CLIPTokenizer"),d(hN,"href","/docs/transformers/pr_17640/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(pN,"href","/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(_N,"href","/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(uN,"href","/docs/transformers/pr_17640/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(bN,"href","/docs/transformers/pr_17640/en/model_doc/phobert#transformers.PhobertTokenizer"),d(vN,"href","/docs/transformers/pr_17640/en/model_doc/plbart#transformers.PLBartTokenizer"),d(FN,"href","/docs/transformers/pr_17640/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(TN,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertTokenizer"),d(MN,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertTokenizerFast"),d(EN,"href","/docs/transformers/pr_17640/en/model_doc/rag#transformers.RagTokenizer"),d(CN,"href","/docs/transformers/pr_17640/en/model_doc/realm#transformers.RealmTokenizer"),d(wN,"href","/docs/transformers/pr_17640/en/model_doc/realm#transformers.RealmTokenizerFast"),d(AN,"href","/docs/transformers/pr_17640/en/model_doc/reformer#transformers.ReformerTokenizer"),d(LN,"href","/docs/transformers/pr_17640/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(yN,"href","/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertTokenizer"),d(xN,"href","/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d($N,"href","/docs/transformers/pr_17640/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(kN,"href","/docs/transformers/pr_17640/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(SN,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaTokenizer"),d(RN,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(PN,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(BN,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(IN,"href","/docs/transformers/pr_17640/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(NN,"href","/docs/transformers/pr_17640/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(qN,"href","/docs/transformers/pr_17640/en/model_doc/splinter#transformers.SplinterTokenizer"),d(jN,"href","/docs/transformers/pr_17640/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(DN,"href","/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(GN,"href","/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(ON,"href","/docs/transformers/pr_17640/en/model_doc/mt5#transformers.T5Tokenizer"),d(VN,"href","/docs/transformers/pr_17640/en/model_doc/mt5#transformers.T5TokenizerFast"),d(XN,"href","/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasTokenizer"),d(zN,"href","/docs/transformers/pr_17640/en/model_doc/tapex#transformers.TapexTokenizer"),d(WN,"href","/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(QN,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertTokenizer"),d(HN,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertTokenizerFast"),d(UN,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertTokenizer"),d(JN,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertTokenizerFast"),d(YN,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(KN,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(ZN,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(eq,"href","/docs/transformers/pr_17640/en/model_doc/xglm#transformers.XGLMTokenizer"),d(oq,"href","/docs/transformers/pr_17640/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(rq,"href","/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMTokenizer"),d(tq,"href","/docs/transformers/pr_17640/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(aq,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(nq,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(sq,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaTokenizer"),d(lq,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(iq,"href","/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(dq,"href","/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(cq,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertTokenizer"),d(fq,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qh,"id","transformers.AutoFeatureExtractor"),d(qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qh,"href","#transformers.AutoFeatureExtractor"),d(Di,"class","relative group"),d(mq,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(gq,"href","/docs/transformers/pr_17640/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(hq,"href","/docs/transformers/pr_17640/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(pq,"href","/docs/transformers/pr_17640/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(_q,"href","/docs/transformers/pr_17640/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(uq,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(bq,"href","/docs/transformers/pr_17640/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(vq,"href","/docs/transformers/pr_17640/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(Fq,"href","/docs/transformers/pr_17640/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(Tq,"href","/docs/transformers/pr_17640/en/model_doc/dpt#transformers.DPTFeatureExtractor"),d(Mq,"href","/docs/transformers/pr_17640/en/model_doc/flava#transformers.FlavaFeatureExtractor"),d(Eq,"href","/docs/transformers/pr_17640/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),d(Cq,"href","/docs/transformers/pr_17640/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(wq,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Aq,"href","/docs/transformers/pr_17640/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),d(Lq,"href","/docs/transformers/pr_17640/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(yq,"href","/docs/transformers/pr_17640/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),d(xq,"href","/docs/transformers/pr_17640/en/model_doc/levit#transformers.LevitFeatureExtractor"),d($q,"href","/docs/transformers/pr_17640/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(kq,"href","/docs/transformers/pr_17640/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),d(Sq,"href","/docs/transformers/pr_17640/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),d(Rq,"href","/docs/transformers/pr_17640/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),d(Pq,"href","/docs/transformers/pr_17640/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(Bq,"href","/docs/transformers/pr_17640/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(Iq,"href","/docs/transformers/pr_17640/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Nq,"href","/docs/transformers/pr_17640/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(qq,"href","/docs/transformers/pr_17640/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(jq,"href","/docs/transformers/pr_17640/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(Dq,"href","/docs/transformers/pr_17640/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Gq,"href","/docs/transformers/pr_17640/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Oq,"href","/docs/transformers/pr_17640/en/model_doc/vilt#transformers.ViltFeatureExtractor"),d(Vq,"href","/docs/transformers/pr_17640/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Xq,"href","/docs/transformers/pr_17640/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(zq,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Wq,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Qq,"href","/docs/transformers/pr_17640/en/model_doc/yolos#transformers.YolosFeatureExtractor"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ep,"id","transformers.AutoProcessor"),d(Ep,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ep,"href","#transformers.AutoProcessor"),d(Gi,"class","relative group"),d(Hq,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(Uq,"href","/docs/transformers/pr_17640/en/model_doc/clip#transformers.CLIPProcessor"),d(Jq,"href","/docs/transformers/pr_17640/en/model_doc/flava#transformers.FlavaProcessor"),d(Yq,"href","/docs/transformers/pr_17640/en/model_doc/clip#transformers.CLIPProcessor"),d(Kq,"href","/docs/transformers/pr_17640/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(Zq,"href","/docs/transformers/pr_17640/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),d(ej,"href","/docs/transformers/pr_17640/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(oj,"href","/docs/transformers/pr_17640/en/model_doc/owlvit#transformers.OwlViTProcessor"),d(rj,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(tj,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(aj,"href","/docs/transformers/pr_17640/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(nj,"href","/docs/transformers/pr_17640/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(sj,"href","/docs/transformers/pr_17640/en/model_doc/trocr#transformers.TrOCRProcessor"),d(lj,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(ij,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(dj,"href","/docs/transformers/pr_17640/en/model_doc/vilt#transformers.ViltProcessor"),d(cj,"href","/docs/transformers/pr_17640/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(fj,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(mj,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(gj,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wp,"id","transformers.AutoModel"),d(Wp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Wp,"href","#transformers.AutoModel"),d(Vi,"class","relative group"),d(hj,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pj,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_j,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uj,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertModel"),d(bj,"href","/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartModel"),d(vj,"href","/docs/transformers/pr_17640/en/model_doc/beit#transformers.BeitModel"),d(Fj,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertModel"),d(Tj,"href","/docs/transformers/pr_17640/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(Mj,"href","/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdModel"),d(Ej,"href","/docs/transformers/pr_17640/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(Cj,"href","/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(wj,"href","/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(Aj,"href","/docs/transformers/pr_17640/en/model_doc/bloom#transformers.BloomModel"),d(Lj,"href","/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertModel"),d(yj,"href","/docs/transformers/pr_17640/en/model_doc/canine#transformers.CanineModel"),d(xj,"href","/docs/transformers/pr_17640/en/model_doc/clip#transformers.CLIPModel"),d($j,"href","/docs/transformers/pr_17640/en/model_doc/codegen#transformers.CodeGenModel"),d(kj,"href","/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertModel"),d(Sj,"href","/docs/transformers/pr_17640/en/model_doc/convnext#transformers.ConvNextModel"),d(Rj,"href","/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.CTRLModel"),d(Pj,"href","/docs/transformers/pr_17640/en/model_doc/cvt#transformers.CvtModel"),d(Bj,"href","/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(Ij,"href","/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(Nj,"href","/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(qj,"href","/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaModel"),d(jj,"href","/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(Dj,"href","/docs/transformers/pr_17640/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(Gj,"href","/docs/transformers/pr_17640/en/model_doc/deit#transformers.DeiTModel"),d(Oj,"href","/docs/transformers/pr_17640/en/model_doc/detr#transformers.DetrModel"),d(Vj,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertModel"),d(Xj,"href","/docs/transformers/pr_17640/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(zj,"href","/docs/transformers/pr_17640/en/model_doc/dpt#transformers.DPTModel"),d(Wj,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraModel"),d(Qj,"href","/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertModel"),d(Hj,"href","/docs/transformers/pr_17640/en/model_doc/flava#transformers.FlavaModel"),d(Uj,"href","/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetModel"),d(Jj,"href","/docs/transformers/pr_17640/en/model_doc/fsmt#transformers.FSMTModel"),d(Yj,"href","/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelModel"),d(Kj,"href","/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelBaseModel"),d(Zj,"href","/docs/transformers/pr_17640/en/model_doc/glpn#transformers.GLPNModel"),d(eD,"href","/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2Model"),d(oD,"href","/docs/transformers/pr_17640/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(rD,"href","/docs/transformers/pr_17640/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),d(tD,"href","/docs/transformers/pr_17640/en/model_doc/gptj#transformers.GPTJModel"),d(aD,"href","/docs/transformers/pr_17640/en/model_doc/groupvit#transformers.GroupViTModel"),d(nD,"href","/docs/transformers/pr_17640/en/model_doc/hubert#transformers.HubertModel"),d(sD,"href","/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertModel"),d(lD,"href","/docs/transformers/pr_17640/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(iD,"href","/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(dD,"href","/docs/transformers/pr_17640/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(cD,"href","/docs/transformers/pr_17640/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),d(fD,"href","/docs/transformers/pr_17640/en/model_doc/led#transformers.LEDModel"),d(mD,"href","/docs/transformers/pr_17640/en/model_doc/levit#transformers.LevitModel"),d(gD,"href","/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerModel"),d(hD,"href","/docs/transformers/pr_17640/en/model_doc/longt5#transformers.LongT5Model"),d(pD,"href","/docs/transformers/pr_17640/en/model_doc/luke#transformers.LukeModel"),d(_D,"href","/docs/transformers/pr_17640/en/model_doc/lxmert#transformers.LxmertModel"),d(uD,"href","/docs/transformers/pr_17640/en/model_doc/m2m_100#transformers.M2M100Model"),d(bD,"href","/docs/transformers/pr_17640/en/model_doc/marian#transformers.MarianModel"),d(vD,"href","/docs/transformers/pr_17640/en/model_doc/maskformer#transformers.MaskFormerModel"),d(FD,"href","/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartModel"),d(TD,"href","/docs/transformers/pr_17640/en/model_doc/mctct#transformers.MCTCTModel"),d(MD,"href","/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(ED,"href","/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertModel"),d(CD,"href","/docs/transformers/pr_17640/en/model_doc/mobilevit#transformers.MobileViTModel"),d(wD,"href","/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetModel"),d(AD,"href","/docs/transformers/pr_17640/en/model_doc/mt5#transformers.MT5Model"),d(LD,"href","/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpModel"),d(yD,"href","/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaModel"),d(xD,"href","/docs/transformers/pr_17640/en/model_doc/m2m_100#transformers.M2M100Model"),d($D,"href","/docs/transformers/pr_17640/en/model_doc/nystromformer#transformers.NystromformerModel"),d(kD,"href","/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(SD,"href","/docs/transformers/pr_17640/en/model_doc/opt#transformers.OPTModel"),d(RD,"href","/docs/transformers/pr_17640/en/model_doc/owlvit#transformers.OwlViTModel"),d(PD,"href","/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.PegasusModel"),d(BD,"href","/docs/transformers/pr_17640/en/model_doc/perceiver#transformers.PerceiverModel"),d(ID,"href","/docs/transformers/pr_17640/en/model_doc/plbart#transformers.PLBartModel"),d(ND,"href","/docs/transformers/pr_17640/en/model_doc/poolformer#transformers.PoolFormerModel"),d(qD,"href","/docs/transformers/pr_17640/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(jD,"href","/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertModel"),d(DD,"href","/docs/transformers/pr_17640/en/model_doc/reformer#transformers.ReformerModel"),d(GD,"href","/docs/transformers/pr_17640/en/model_doc/regnet#transformers.RegNetModel"),d(OD,"href","/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertModel"),d(VD,"href","/docs/transformers/pr_17640/en/model_doc/resnet#transformers.ResNetModel"),d(XD,"href","/docs/transformers/pr_17640/en/model_doc/retribert#transformers.RetriBertModel"),d(zD,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaModel"),d(WD,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerModel"),d(QD,"href","/docs/transformers/pr_17640/en/model_doc/segformer#transformers.SegformerModel"),d(HD,"href","/docs/transformers/pr_17640/en/model_doc/sew#transformers.SEWModel"),d(UD,"href","/docs/transformers/pr_17640/en/model_doc/sew-d#transformers.SEWDModel"),d(JD,"href","/docs/transformers/pr_17640/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(YD,"href","/docs/transformers/pr_17640/en/model_doc/splinter#transformers.SplinterModel"),d(KD,"href","/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(ZD,"href","/docs/transformers/pr_17640/en/model_doc/swin#transformers.SwinModel"),d(eG,"href","/docs/transformers/pr_17640/en/model_doc/t5#transformers.T5Model"),d(oG,"href","/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasModel"),d(rG,"href","/docs/transformers/pr_17640/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),d(tG,"href","/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(aG,"href","/docs/transformers/pr_17640/en/model_doc/unispeech#transformers.UniSpeechModel"),d(nG,"href","/docs/transformers/pr_17640/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(sG,"href","/docs/transformers/pr_17640/en/model_doc/van#transformers.VanModel"),d(lG,"href","/docs/transformers/pr_17640/en/model_doc/vilt#transformers.ViltModel"),d(iG,"href","/docs/transformers/pr_17640/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(dG,"href","/docs/transformers/pr_17640/en/model_doc/visual_bert#transformers.VisualBertModel"),d(cG,"href","/docs/transformers/pr_17640/en/model_doc/vit#transformers.ViTModel"),d(fG,"href","/docs/transformers/pr_17640/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(mG,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(gG,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),d(hG,"href","/docs/transformers/pr_17640/en/model_doc/wavlm#transformers.WavLMModel"),d(pG,"href","/docs/transformers/pr_17640/en/model_doc/xglm#transformers.XGLMModel"),d(_G,"href","/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMModel"),d(uG,"href","/docs/transformers/pr_17640/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(bG,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(vG,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(FG,"href","/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetModel"),d(TG,"href","/docs/transformers/pr_17640/en/model_doc/yolos#transformers.YolosModel"),d(MG,"href","/docs/transformers/pr_17640/en/model_doc/yoso#transformers.YosoModel"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(e1,"id","transformers.AutoModelForPreTraining"),d(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e1,"href","#transformers.AutoModelForPreTraining"),d(Wi,"class","relative group"),d(EG,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CG,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wG,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AG,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertForPreTraining"),d(LG,"href","/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(yG,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertForPreTraining"),d(xG,"href","/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d($G,"href","/docs/transformers/pr_17640/en/model_doc/bloom#transformers.BloomForCausalLM"),d(kG,"href","/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(SG,"href","/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(RG,"href","/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(PG,"href","/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(BG,"href","/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(IG,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(NG,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraForPreTraining"),d(qG,"href","/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(jG,"href","/docs/transformers/pr_17640/en/model_doc/flava#transformers.FlavaForPreTraining"),d(DG,"href","/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetForPreTraining"),d(GG,"href","/docs/transformers/pr_17640/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(OG,"href","/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(VG,"href","/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(XG,"href","/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(zG,"href","/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(WG,"href","/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(QG,"href","/docs/transformers/pr_17640/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(HG,"href","/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(UG,"href","/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(JG,"href","/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(YG,"href","/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(KG,"href","/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaForPreTraining"),d(ZG,"href","/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(eO,"href","/docs/transformers/pr_17640/en/model_doc/retribert#transformers.RetriBertModel"),d(oO,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(rO,"href","/docs/transformers/pr_17640/en/model_doc/splinter#transformers.SplinterForPreTraining"),d(tO,"href","/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(aO,"href","/docs/transformers/pr_17640/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(nO,"href","/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(sO,"href","/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(lO,"href","/docs/transformers/pr_17640/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(iO,"href","/docs/transformers/pr_17640/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(dO,"href","/docs/transformers/pr_17640/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(cO,"href","/docs/transformers/pr_17640/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(fO,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(mO,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),d(gO,"href","/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(hO,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(pO,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(_O,"href","/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U1,"id","transformers.AutoModelForCausalLM"),d(U1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U1,"href","#transformers.AutoModelForCausalLM"),d(Ui,"class","relative group"),d(uO,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bO,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vO,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FO,"href","/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartForCausalLM"),d(TO,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertLMHeadModel"),d(MO,"href","/docs/transformers/pr_17640/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(EO,"href","/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(CO,"href","/docs/transformers/pr_17640/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(wO,"href","/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(AO,"href","/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(LO,"href","/docs/transformers/pr_17640/en/model_doc/bloom#transformers.BloomForCausalLM"),d(yO,"href","/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(xO,"href","/docs/transformers/pr_17640/en/model_doc/codegen#transformers.CodeGenForCausalLM"),d($O,"href","/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(kO,"href","/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(SO,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraForCausalLM"),d(RO,"href","/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(PO,"href","/docs/transformers/pr_17640/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(BO,"href","/docs/transformers/pr_17640/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),d(IO,"href","/docs/transformers/pr_17640/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(NO,"href","/docs/transformers/pr_17640/en/model_doc/marian#transformers.MarianForCausalLM"),d(qO,"href","/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartForCausalLM"),d(jO,"href","/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(DO,"href","/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpForCausalLM"),d(GO,"href","/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(OO,"href","/docs/transformers/pr_17640/en/model_doc/opt#transformers.OPTForCausalLM"),d(VO,"href","/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(XO,"href","/docs/transformers/pr_17640/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(zO,"href","/docs/transformers/pr_17640/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(WO,"href","/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(QO,"href","/docs/transformers/pr_17640/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(HO,"href","/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(UO,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(JO,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(YO,"href","/docs/transformers/pr_17640/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(KO,"href","/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(ZO,"href","/docs/transformers/pr_17640/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(eV,"href","/docs/transformers/pr_17640/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(oV,"href","/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(rV,"href","/docs/transformers/pr_17640/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(tV,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(aV,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(nV,"href","/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j4,"id","transformers.AutoModelForMaskedLM"),d(j4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j4,"href","#transformers.AutoModelForMaskedLM"),d(Ki,"class","relative group"),d(sV,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lV,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iV,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dV,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(cV,"href","/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(fV,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertForMaskedLM"),d(mV,"href","/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(gV,"href","/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(hV,"href","/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(pV,"href","/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(_V,"href","/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(uV,"href","/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(bV,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(vV,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(FV,"href","/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(TV,"href","/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(MV,"href","/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(EV,"href","/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(CV,"href","/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(wV,"href","/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(AV,"href","/docs/transformers/pr_17640/en/model_doc/luke#transformers.LukeForMaskedLM"),d(LV,"href","/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(yV,"href","/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(xV,"href","/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d($V,"href","/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(kV,"href","/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(SV,"href","/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaForMaskedLM"),d(RV,"href","/docs/transformers/pr_17640/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(PV,"href","/docs/transformers/pr_17640/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(BV,"href","/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(IV,"href","/docs/transformers/pr_17640/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(NV,"href","/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(qV,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(jV,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(DV,"href","/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(GV,"href","/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(OV,"href","/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(VV,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(XV,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(zV,"href","/docs/transformers/pr_17640/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L2,"id","transformers.AutoModelForSeq2SeqLM"),d(L2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L2,"href","#transformers.AutoModelForSeq2SeqLM"),d(od,"class","relative group"),d(WV,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QV,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HV,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UV,"href","/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(JV,"href","/docs/transformers/pr_17640/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(YV,"href","/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(KV,"href","/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(ZV,"href","/docs/transformers/pr_17640/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(eX,"href","/docs/transformers/pr_17640/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(oX,"href","/docs/transformers/pr_17640/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(rX,"href","/docs/transformers/pr_17640/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),d(tX,"href","/docs/transformers/pr_17640/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(aX,"href","/docs/transformers/pr_17640/en/model_doc/marian#transformers.MarianMTModel"),d(nX,"href","/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(sX,"href","/docs/transformers/pr_17640/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(lX,"href","/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(iX,"href","/docs/transformers/pr_17640/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(dX,"href","/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(cX,"href","/docs/transformers/pr_17640/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(fX,"href","/docs/transformers/pr_17640/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(mX,"href","/docs/transformers/pr_17640/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(gX,"href","/docs/transformers/pr_17640/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J2,"id","transformers.AutoModelForSequenceClassification"),d(J2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J2,"href","#transformers.AutoModelForSequenceClassification"),d(ad,"class","relative group"),d(hX,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pX,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_X,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uX,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(bX,"href","/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartForSequenceClassification"),d(vX,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertForSequenceClassification"),d(FX,"href","/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(TX,"href","/docs/transformers/pr_17640/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(MX,"href","/docs/transformers/pr_17640/en/model_doc/bloom#transformers.BloomForSequenceClassification"),d(EX,"href","/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(CX,"href","/docs/transformers/pr_17640/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(wX,"href","/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(AX,"href","/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(LX,"href","/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(yX,"href","/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(xX,"href","/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d($X,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(kX,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(SX,"href","/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(RX,"href","/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(PX,"href","/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(BX,"href","/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(IX,"href","/docs/transformers/pr_17640/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(NX,"href","/docs/transformers/pr_17640/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(qX,"href","/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(jX,"href","/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(DX,"href","/docs/transformers/pr_17640/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(GX,"href","/docs/transformers/pr_17640/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),d(OX,"href","/docs/transformers/pr_17640/en/model_doc/led#transformers.LEDForSequenceClassification"),d(VX,"href","/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(XX,"href","/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(zX,"href","/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(WX,"href","/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(QX,"href","/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(HX,"href","/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpForSequenceClassification"),d(UX,"href","/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),d(JX,"href","/docs/transformers/pr_17640/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(YX,"href","/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(KX,"href","/docs/transformers/pr_17640/en/model_doc/opt#transformers.OPTForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_17640/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(ez,"href","/docs/transformers/pr_17640/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(oz,"href","/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(rz,"href","/docs/transformers/pr_17640/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(tz,"href","/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(az,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(nz,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(sz,"href","/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(lz,"href","/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(iz,"href","/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(dz,"href","/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(cz,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(fz,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(mz,"href","/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(gz,"href","/docs/transformers/pr_17640/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yb,"id","transformers.AutoModelForMultipleChoice"),d(Yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yb,"href","#transformers.AutoModelForMultipleChoice"),d(ld,"class","relative group"),d(hz,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pz,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_z,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uz,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(bz,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertForMultipleChoice"),d(vz,"href","/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(Fz,"href","/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(Tz,"href","/docs/transformers/pr_17640/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(Mz,"href","/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(Ez,"href","/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(Cz,"href","/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),d(wz,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(Az,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(yz,"href","/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(xz,"href","/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d($z,"href","/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(kz,"href","/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(Pz,"href","/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(Bz,"href","/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),d(Iz,"href","/docs/transformers/pr_17640/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(Nz,"href","/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(qz,"href","/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(jz,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(Dz,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(Gz,"href","/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(Oz,"href","/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(Vz,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(Xz,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(zz,"href","/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(Wz,"href","/docs/transformers/pr_17640/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kv,"id","transformers.AutoModelForNextSentencePrediction"),d(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kv,"href","#transformers.AutoModelForNextSentencePrediction"),d(cd,"class","relative group"),d(Qz,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hz,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Uz,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jz,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(Yz,"href","/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(Kz,"href","/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(Zz,"href","/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(eW,"href","/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),d(oW,"href","/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gv,"id","transformers.AutoModelForTokenClassification"),d(Gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gv,"href","#transformers.AutoModelForTokenClassification"),d(gd,"class","relative group"),d(rW,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tW,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aW,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nW,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(sW,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertForTokenClassification"),d(lW,"href","/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(iW,"href","/docs/transformers/pr_17640/en/model_doc/bloom#transformers.BloomForTokenClassification"),d(dW,"href","/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(cW,"href","/docs/transformers/pr_17640/en/model_doc/canine#transformers.CanineForTokenClassification"),d(fW,"href","/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(mW,"href","/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(gW,"href","/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(hW,"href","/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(pW,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(_W,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(uW,"href","/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(bW,"href","/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(vW,"href","/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(FW,"href","/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(TW,"href","/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(MW,"href","/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(EW,"href","/docs/transformers/pr_17640/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(CW,"href","/docs/transformers/pr_17640/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),d(wW,"href","/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(AW,"href","/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(LW,"href","/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(yW,"href","/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(xW,"href","/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaForTokenClassification"),d($W,"href","/docs/transformers/pr_17640/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(kW,"href","/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(SW,"href","/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(RW,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(PW,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(BW,"href","/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(IW,"href","/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(NW,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(qW,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(jW,"href","/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(DW,"href","/docs/transformers/pr_17640/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L0,"id","transformers.AutoModelForQuestionAnswering"),d(L0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L0,"href","#transformers.AutoModelForQuestionAnswering"),d(_d,"class","relative group"),d(GW,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OW,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VW,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XW,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(zW,"href","/docs/transformers/pr_17640/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(WW,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(QW,"href","/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(HW,"href","/docs/transformers/pr_17640/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(UW,"href","/docs/transformers/pr_17640/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(JW,"href","/docs/transformers/pr_17640/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(YW,"href","/docs/transformers/pr_17640/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(KW,"href","/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(ZW,"href","/docs/transformers/pr_17640/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(eQ,"href","/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(oQ,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(rQ,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(tQ,"href","/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(aQ,"href","/docs/transformers/pr_17640/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(nQ,"href","/docs/transformers/pr_17640/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(sQ,"href","/docs/transformers/pr_17640/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(lQ,"href","/docs/transformers/pr_17640/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(iQ,"href","/docs/transformers/pr_17640/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(dQ,"href","/docs/transformers/pr_17640/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),d(cQ,"href","/docs/transformers/pr_17640/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(fQ,"href","/docs/transformers/pr_17640/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(mQ,"href","/docs/transformers/pr_17640/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(gQ,"href","/docs/transformers/pr_17640/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(hQ,"href","/docs/transformers/pr_17640/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(pQ,"href","/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(_Q,"href","/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(uQ,"href","/docs/transformers/pr_17640/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),d(bQ,"href","/docs/transformers/pr_17640/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),d(vQ,"href","/docs/transformers/pr_17640/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(FQ,"href","/docs/transformers/pr_17640/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_17640/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(MQ,"href","/docs/transformers/pr_17640/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(EQ,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(wQ,"href","/docs/transformers/pr_17640/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(AQ,"href","/docs/transformers/pr_17640/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(LQ,"href","/docs/transformers/pr_17640/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(yQ,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(xQ,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d($Q,"href","/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(kQ,"href","/docs/transformers/pr_17640/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vF,"id","transformers.AutoModelForTableQuestionAnswering"),d(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vF,"href","#transformers.AutoModelForTableQuestionAnswering"),d(vd,"class","relative group"),d(SQ,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RQ,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PQ,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BQ,"href","/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CF,"id","transformers.AutoModelForImageClassification"),d(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CF,"href","#transformers.AutoModelForImageClassification"),d(Md,"class","relative group"),d(IQ,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NQ,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qQ,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jQ,"href","/docs/transformers/pr_17640/en/model_doc/beit#transformers.BeitForImageClassification"),d(DQ,"href","/docs/transformers/pr_17640/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(GQ,"href","/docs/transformers/pr_17640/en/model_doc/cvt#transformers.CvtForImageClassification"),d(OQ,"href","/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(VQ,"href","/docs/transformers/pr_17640/en/model_doc/deit#transformers.DeiTForImageClassification"),d(XQ,"href","/docs/transformers/pr_17640/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(zQ,"href","/docs/transformers/pr_17640/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(WQ,"href","/docs/transformers/pr_17640/en/model_doc/levit#transformers.LevitForImageClassification"),d(QQ,"href","/docs/transformers/pr_17640/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),d(HQ,"href","/docs/transformers/pr_17640/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),d(UQ,"href","/docs/transformers/pr_17640/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(JQ,"href","/docs/transformers/pr_17640/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(YQ,"href","/docs/transformers/pr_17640/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(KQ,"href","/docs/transformers/pr_17640/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(ZQ,"href","/docs/transformers/pr_17640/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(eH,"href","/docs/transformers/pr_17640/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(oH,"href","/docs/transformers/pr_17640/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(rH,"href","/docs/transformers/pr_17640/en/model_doc/swin#transformers.SwinForImageClassification"),d(tH,"href","/docs/transformers/pr_17640/en/model_doc/van#transformers.VanForImageClassification"),d(aH,"href","/docs/transformers/pr_17640/en/model_doc/vit#transformers.ViTForImageClassification"),d(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GF,"id","transformers.AutoModelForVision2Seq"),d(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(GF,"href","#transformers.AutoModelForVision2Seq"),d(wd,"class","relative group"),d(nH,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sH,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lH,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iH,"href","/docs/transformers/pr_17640/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WF,"id","transformers.AutoModelForVisualQuestionAnswering"),d(WF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WF,"href","#transformers.AutoModelForVisualQuestionAnswering"),d(yd,"class","relative group"),d(dH,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cH,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fH,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mH,"href","/docs/transformers/pr_17640/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),d(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YF,"id","transformers.AutoModelForAudioClassification"),d(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YF,"href","#transformers.AutoModelForAudioClassification"),d(kd,"class","relative group"),d(gH,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hH,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pH,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_H,"href","/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(uH,"href","/docs/transformers/pr_17640/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(bH,"href","/docs/transformers/pr_17640/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(vH,"href","/docs/transformers/pr_17640/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(FH,"href","/docs/transformers/pr_17640/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(TH,"href","/docs/transformers/pr_17640/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(MH,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(EH,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),d(CH,"href","/docs/transformers/pr_17640/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(c6,"id","transformers.AutoModelForAudioFrameClassification"),d(c6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c6,"href","#transformers.AutoModelForAudioFrameClassification"),d(Pd,"class","relative group"),d(wH,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AH,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LH,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yH,"href","/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(xH,"href","/docs/transformers/pr_17640/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d($H,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(kH,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),d(SH,"href","/docs/transformers/pr_17640/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(v6,"id","transformers.AutoModelForCTC"),d(v6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v6,"href","#transformers.AutoModelForCTC"),d(Nd,"class","relative group"),d(RH,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PH,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BH,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IH,"href","/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(NH,"href","/docs/transformers/pr_17640/en/model_doc/hubert#transformers.HubertForCTC"),d(qH,"href","/docs/transformers/pr_17640/en/model_doc/mctct#transformers.MCTCTForCTC"),d(jH,"href","/docs/transformers/pr_17640/en/model_doc/sew#transformers.SEWForCTC"),d(DH,"href","/docs/transformers/pr_17640/en/model_doc/sew-d#transformers.SEWDForCTC"),d(GH,"href","/docs/transformers/pr_17640/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(OH,"href","/docs/transformers/pr_17640/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(VH,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(XH,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),d(zH,"href","/docs/transformers/pr_17640/en/model_doc/wavlm#transformers.WavLMForCTC"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R6,"id","transformers.AutoModelForSpeechSeq2Seq"),d(R6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R6,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Dd,"class","relative group"),d(WH,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QH,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HH,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UH,"href","/docs/transformers/pr_17640/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(JH,"href","/docs/transformers/pr_17640/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j6,"id","transformers.AutoModelForAudioXVector"),d(j6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j6,"href","#transformers.AutoModelForAudioXVector"),d(Vd,"class","relative group"),d(YH,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KH,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZH,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eU,"href","/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(oU,"href","/docs/transformers/pr_17640/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(rU,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(tU,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),d(aU,"href","/docs/transformers/pr_17640/en/model_doc/wavlm#transformers.WavLMForXVector"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(H6,"id","transformers.AutoModelForMaskedImageModeling"),d(H6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H6,"href","#transformers.AutoModelForMaskedImageModeling"),d(Wd,"class","relative group"),d(nU,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sU,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lU,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iU,"href","/docs/transformers/pr_17640/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(dU,"href","/docs/transformers/pr_17640/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(cU,"href","/docs/transformers/pr_17640/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oT,"id","transformers.AutoModelForObjectDetection"),d(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oT,"href","#transformers.AutoModelForObjectDetection"),d(Jd,"class","relative group"),d(fU,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mU,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gU,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hU,"href","/docs/transformers/pr_17640/en/model_doc/detr#transformers.DetrForObjectDetection"),d(pU,"href","/docs/transformers/pr_17640/en/model_doc/yolos#transformers.YolosForObjectDetection"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lT,"id","transformers.AutoModelForImageSegmentation"),d(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lT,"href","#transformers.AutoModelForImageSegmentation"),d(Zd,"class","relative group"),d(_U,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uU,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bU,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vU,"href","/docs/transformers/pr_17640/en/model_doc/detr#transformers.DetrForSegmentation"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mT,"id","transformers.AutoModelForSemanticSegmentation"),d(mT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mT,"href","#transformers.AutoModelForSemanticSegmentation"),d(rc,"class","relative group"),d(FU,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TU,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MU,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EU,"href","/docs/transformers/pr_17640/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(CU,"href","/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(wU,"href","/docs/transformers/pr_17640/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(AU,"href","/docs/transformers/pr_17640/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),d(LU,"href","/docs/transformers/pr_17640/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TT,"id","transformers.AutoModelForInstanceSegmentation"),d(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TT,"href","#transformers.AutoModelForInstanceSegmentation"),d(nc,"class","relative group"),d(yU,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xU,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($U,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kU,"href","/docs/transformers/pr_17640/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AT,"id","transformers.TFAutoModel"),d(AT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AT,"href","#transformers.TFAutoModel"),d(ic,"class","relative group"),d(SU,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RU,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PU,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BU,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.TFAlbertModel"),d(IU,"href","/docs/transformers/pr_17640/en/model_doc/bart#transformers.TFBartModel"),d(NU,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.TFBertModel"),d(qU,"href","/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(jU,"href","/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(DU,"href","/docs/transformers/pr_17640/en/model_doc/camembert#transformers.TFCamembertModel"),d(GU,"href","/docs/transformers/pr_17640/en/model_doc/clip#transformers.TFCLIPModel"),d(OU,"href","/docs/transformers/pr_17640/en/model_doc/convbert#transformers.TFConvBertModel"),d(VU,"href","/docs/transformers/pr_17640/en/model_doc/convnext#transformers.TFConvNextModel"),d(XU,"href","/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.TFCTRLModel"),d(zU,"href","/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),d(WU,"href","/docs/transformers/pr_17640/en/model_doc/deberta#transformers.TFDebertaModel"),d(QU,"href","/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(HU,"href","/docs/transformers/pr_17640/en/model_doc/deit#transformers.TFDeiTModel"),d(UU,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(JU,"href","/docs/transformers/pr_17640/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(YU,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.TFElectraModel"),d(KU,"href","/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(ZU,"href","/docs/transformers/pr_17640/en/model_doc/funnel#transformers.TFFunnelModel"),d(eJ,"href","/docs/transformers/pr_17640/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(oJ,"href","/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.TFGPT2Model"),d(rJ,"href","/docs/transformers/pr_17640/en/model_doc/gptj#transformers.TFGPTJModel"),d(tJ,"href","/docs/transformers/pr_17640/en/model_doc/hubert#transformers.TFHubertModel"),d(aJ,"href","/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(nJ,"href","/docs/transformers/pr_17640/en/model_doc/led#transformers.TFLEDModel"),d(sJ,"href","/docs/transformers/pr_17640/en/model_doc/longformer#transformers.TFLongformerModel"),d(lJ,"href","/docs/transformers/pr_17640/en/model_doc/lxmert#transformers.TFLxmertModel"),d(iJ,"href","/docs/transformers/pr_17640/en/model_doc/marian#transformers.TFMarianModel"),d(dJ,"href","/docs/transformers/pr_17640/en/model_doc/mbart#transformers.TFMBartModel"),d(cJ,"href","/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(fJ,"href","/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.TFMPNetModel"),d(mJ,"href","/docs/transformers/pr_17640/en/model_doc/mt5#transformers.TFMT5Model"),d(gJ,"href","/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(hJ,"href","/docs/transformers/pr_17640/en/model_doc/opt#transformers.TFOPTModel"),d(pJ,"href","/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.TFPegasusModel"),d(_J,"href","/docs/transformers/pr_17640/en/model_doc/regnet#transformers.TFRegNetModel"),d(uJ,"href","/docs/transformers/pr_17640/en/model_doc/rembert#transformers.TFRemBertModel"),d(bJ,"href","/docs/transformers/pr_17640/en/model_doc/resnet#transformers.TFResNetModel"),d(vJ,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.TFRobertaModel"),d(FJ,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.TFRoFormerModel"),d(TJ,"href","/docs/transformers/pr_17640/en/model_doc/segformer#transformers.TFSegformerModel"),d(MJ,"href","/docs/transformers/pr_17640/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(EJ,"href","/docs/transformers/pr_17640/en/model_doc/swin#transformers.TFSwinModel"),d(CJ,"href","/docs/transformers/pr_17640/en/model_doc/t5#transformers.TFT5Model"),d(wJ,"href","/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TFTapasModel"),d(AJ,"href","/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(LJ,"href","/docs/transformers/pr_17640/en/model_doc/vit#transformers.TFViTModel"),d(yJ,"href","/docs/transformers/pr_17640/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(xJ,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d($J,"href","/docs/transformers/pr_17640/en/model_doc/xlm#transformers.TFXLMModel"),d(kJ,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(SJ,"href","/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.TFXLNetModel"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(w7,"id","transformers.TFAutoModelForPreTraining"),d(w7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w7,"href","#transformers.TFAutoModelForPreTraining"),d(fc,"class","relative group"),d(RJ,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PJ,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BJ,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IJ,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(NJ,"href","/docs/transformers/pr_17640/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(qJ,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.TFBertForPreTraining"),d(jJ,"href","/docs/transformers/pr_17640/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(DJ,"href","/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(GJ,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(OJ,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(VJ,"href","/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(XJ,"href","/docs/transformers/pr_17640/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(zJ,"href","/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(WJ,"href","/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(QJ,"href","/docs/transformers/pr_17640/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(HJ,"href","/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(UJ,"href","/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(JJ,"href","/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(YJ,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(KJ,"href","/docs/transformers/pr_17640/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(ZJ,"href","/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(eY,"href","/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(oY,"href","/docs/transformers/pr_17640/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(rY,"href","/docs/transformers/pr_17640/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(tY,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(aY,"href","/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y7,"id","transformers.TFAutoModelForCausalLM"),d(Y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y7,"href","#transformers.TFAutoModelForCausalLM"),d(hc,"class","relative group"),d(nY,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sY,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lY,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iY,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(dY,"href","/docs/transformers/pr_17640/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(cY,"href","/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(fY,"href","/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(mY,"href","/docs/transformers/pr_17640/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(gY,"href","/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(hY,"href","/docs/transformers/pr_17640/en/model_doc/opt#transformers.TFOPTForCausalLM"),d(pY,"href","/docs/transformers/pr_17640/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(_Y,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(uY,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(bY,"href","/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(vY,"href","/docs/transformers/pr_17640/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(FY,"href","/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gM,"id","transformers.TFAutoModelForImageClassification"),d(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gM,"href","#transformers.TFAutoModelForImageClassification"),d(uc,"class","relative group"),d(TY,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MY,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EY,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CY,"href","/docs/transformers/pr_17640/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(wY,"href","/docs/transformers/pr_17640/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),d(AY,"href","/docs/transformers/pr_17640/en/model_doc/deit#transformers.TFDeiTForImageClassification"),d(LY,"href","/docs/transformers/pr_17640/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),d(yY,"href","/docs/transformers/pr_17640/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),d(xY,"href","/docs/transformers/pr_17640/en/model_doc/resnet#transformers.TFResNetForImageClassification"),d($Y,"href","/docs/transformers/pr_17640/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),d(kY,"href","/docs/transformers/pr_17640/en/model_doc/swin#transformers.TFSwinForImageClassification"),d(SY,"href","/docs/transformers/pr_17640/en/model_doc/vit#transformers.TFViTForImageClassification"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EM,"id","transformers.TFAutoModelForMaskedLM"),d(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EM,"href","#transformers.TFAutoModelForMaskedLM"),d(Fc,"class","relative group"),d(RY,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PY,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BY,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IY,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(NY,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(qY,"href","/docs/transformers/pr_17640/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(jY,"href","/docs/transformers/pr_17640/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(DY,"href","/docs/transformers/pr_17640/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(GY,"href","/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(OY,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(VY,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(XY,"href","/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(zY,"href","/docs/transformers/pr_17640/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(WY,"href","/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(QY,"href","/docs/transformers/pr_17640/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(HY,"href","/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(UY,"href","/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(JY,"href","/docs/transformers/pr_17640/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(YY,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(KY,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(ZY,"href","/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(eK,"href","/docs/transformers/pr_17640/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(oK,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WM,"id","transformers.TFAutoModelForSeq2SeqLM"),d(WM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WM,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Ec,"class","relative group"),d(rK,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tK,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aK,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nK,"href","/docs/transformers/pr_17640/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(sK,"href","/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(lK,"href","/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(iK,"href","/docs/transformers/pr_17640/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(dK,"href","/docs/transformers/pr_17640/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(cK,"href","/docs/transformers/pr_17640/en/model_doc/marian#transformers.TFMarianMTModel"),d(fK,"href","/docs/transformers/pr_17640/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(mK,"href","/docs/transformers/pr_17640/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(gK,"href","/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(hK,"href","/docs/transformers/pr_17640/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nE,"id","transformers.TFAutoModelForSequenceClassification"),d(nE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nE,"href","#transformers.TFAutoModelForSequenceClassification"),d(Ac,"class","relative group"),d(pK,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_K,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uK,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bK,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(vK,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(FK,"href","/docs/transformers/pr_17640/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(TK,"href","/docs/transformers/pr_17640/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(MK,"href","/docs/transformers/pr_17640/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(EK,"href","/docs/transformers/pr_17640/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(CK,"href","/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(wK,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(AK,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(LK,"href","/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(yK,"href","/docs/transformers/pr_17640/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(xK,"href","/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d($K,"href","/docs/transformers/pr_17640/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(kK,"href","/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(SK,"href","/docs/transformers/pr_17640/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(RK,"href","/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(PK,"href","/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(BK,"href","/docs/transformers/pr_17640/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(IK,"href","/docs/transformers/pr_17640/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(NK,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(qK,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(jK,"href","/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(DK,"href","/docs/transformers/pr_17640/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(GK,"href","/docs/transformers/pr_17640/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(OK,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(VK,"href","/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PE,"id","transformers.TFAutoModelForMultipleChoice"),d(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(PE,"href","#transformers.TFAutoModelForMultipleChoice"),d(xc,"class","relative group"),d(XK,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zK,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WK,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QK,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(HK,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(UK,"href","/docs/transformers/pr_17640/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(JK,"href","/docs/transformers/pr_17640/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(YK,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(KK,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(ZK,"href","/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(eZ,"href","/docs/transformers/pr_17640/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(oZ,"href","/docs/transformers/pr_17640/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(rZ,"href","/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(tZ,"href","/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(aZ,"href","/docs/transformers/pr_17640/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(nZ,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(sZ,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(lZ,"href","/docs/transformers/pr_17640/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(iZ,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(dZ,"href","/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eC,"id","transformers.TFAutoModelForNextSentencePrediction"),d(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eC,"href","#transformers.TFAutoModelForNextSentencePrediction"),d(Sc,"class","relative group"),d(cZ,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fZ,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mZ,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gZ,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),d(hZ,"href","/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nC,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(nC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Bc,"class","relative group"),d(pZ,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_Z,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uZ,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bZ,"href","/docs/transformers/pr_17640/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dC,"id","transformers.TFAutoModelForTokenClassification"),d(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dC,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d(vZ,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FZ,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TZ,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MZ,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(EZ,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(CZ,"href","/docs/transformers/pr_17640/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(wZ,"href","/docs/transformers/pr_17640/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(AZ,"href","/docs/transformers/pr_17640/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(LZ,"href","/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(yZ,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(xZ,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d($Z,"href","/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(kZ,"href","/docs/transformers/pr_17640/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(SZ,"href","/docs/transformers/pr_17640/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(RZ,"href","/docs/transformers/pr_17640/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(PZ,"href","/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(BZ,"href","/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(IZ,"href","/docs/transformers/pr_17640/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(NZ,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(qZ,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(jZ,"href","/docs/transformers/pr_17640/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(DZ,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(GZ,"href","/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SC,"id","transformers.TFAutoModelForQuestionAnswering"),d(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SC,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Gc,"class","relative group"),d(OZ,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VZ,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XZ,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zZ,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(WZ,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(QZ,"href","/docs/transformers/pr_17640/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(HZ,"href","/docs/transformers/pr_17640/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(UZ,"href","/docs/transformers/pr_17640/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(JZ,"href","/docs/transformers/pr_17640/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(YZ,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(KZ,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(ZZ,"href","/docs/transformers/pr_17640/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(eee,"href","/docs/transformers/pr_17640/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(oee,"href","/docs/transformers/pr_17640/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(ree,"href","/docs/transformers/pr_17640/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(tee,"href","/docs/transformers/pr_17640/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(aee,"href","/docs/transformers/pr_17640/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(nee,"href","/docs/transformers/pr_17640/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(see,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(lee,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(iee,"href","/docs/transformers/pr_17640/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(dee,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(cee,"href","/docs/transformers/pr_17640/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(o5,"id","transformers.TFAutoModelForVision2Seq"),d(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o5,"href","#transformers.TFAutoModelForVision2Seq"),d(Xc,"class","relative group"),d(fee,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mee,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gee,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hee,"href","/docs/transformers/pr_17640/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(n5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Qc,"class","relative group"),d(pee,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_ee,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uee,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bee,"href","/docs/transformers/pr_17640/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(d5,"id","transformers.FlaxAutoModel"),d(d5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d5,"href","#transformers.FlaxAutoModel"),d(Jc,"class","relative group"),d(vee,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Fee,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Tee,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mee,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.FlaxAlbertModel"),d(Eee,"href","/docs/transformers/pr_17640/en/model_doc/bart#transformers.FlaxBartModel"),d(Cee,"href","/docs/transformers/pr_17640/en/model_doc/beit#transformers.FlaxBeitModel"),d(wee,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.FlaxBertModel"),d(Aee,"href","/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(Lee,"href","/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(yee,"href","/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(xee,"href","/docs/transformers/pr_17640/en/model_doc/clip#transformers.FlaxCLIPModel"),d($ee,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(kee,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.FlaxElectraModel"),d(See,"href","/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(Ree,"href","/docs/transformers/pr_17640/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(Pee,"href","/docs/transformers/pr_17640/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(Bee,"href","/docs/transformers/pr_17640/en/model_doc/longt5#transformers.FlaxLongT5Model"),d(Iee,"href","/docs/transformers/pr_17640/en/model_doc/marian#transformers.FlaxMarianModel"),d(Nee,"href","/docs/transformers/pr_17640/en/model_doc/mbart#transformers.FlaxMBartModel"),d(qee,"href","/docs/transformers/pr_17640/en/model_doc/mt5#transformers.FlaxMT5Model"),d(jee,"href","/docs/transformers/pr_17640/en/model_doc/opt#transformers.FlaxOPTModel"),d(Dee,"href","/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(Gee,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(Oee,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(Vee,"href","/docs/transformers/pr_17640/en/model_doc/t5#transformers.FlaxT5Model"),d(Xee,"href","/docs/transformers/pr_17640/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(zee,"href","/docs/transformers/pr_17640/en/model_doc/vit#transformers.FlaxViTModel"),d(Wee,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(Qee,"href","/docs/transformers/pr_17640/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(Hee,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j5,"id","transformers.FlaxAutoModelForCausalLM"),d(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j5,"href","#transformers.FlaxAutoModelForCausalLM"),d(Zc,"class","relative group"),d(Uee,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jee,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Yee,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kee,"href","/docs/transformers/pr_17640/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(Zee,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.FlaxBertForCausalLM"),d(eoe,"href","/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),d(ooe,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),d(roe,"href","/docs/transformers/pr_17640/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(toe,"href","/docs/transformers/pr_17640/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(aoe,"href","/docs/transformers/pr_17640/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(noe,"href","/docs/transformers/pr_17640/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),d(soe,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),d(loe,"href","/docs/transformers/pr_17640/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K5,"id","transformers.FlaxAutoModelForPreTraining"),d(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K5,"href","#transformers.FlaxAutoModelForPreTraining"),d(rf,"class","relative group"),d(ioe,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(doe,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(coe,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(foe,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(moe,"href","/docs/transformers/pr_17640/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(goe,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(hoe,"href","/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(poe,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(_oe,"href","/docs/transformers/pr_17640/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(uoe,"href","/docs/transformers/pr_17640/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(boe,"href","/docs/transformers/pr_17640/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(voe,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(Foe,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Toe,"href","/docs/transformers/pr_17640/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Moe,"href","/docs/transformers/pr_17640/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(Eoe,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(h3,"id","transformers.FlaxAutoModelForMaskedLM"),d(h3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h3,"href","#transformers.FlaxAutoModelForMaskedLM"),d(nf,"class","relative group"),d(Coe,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(woe,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Aoe,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Loe,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(yoe,"href","/docs/transformers/pr_17640/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(xoe,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d($oe,"href","/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(koe,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(Soe,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(Roe,"href","/docs/transformers/pr_17640/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(Poe,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(Boe,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Ioe,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(L3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(df,"class","relative group"),d(Noe,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qoe,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(joe,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Doe,"href","/docs/transformers/pr_17640/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(Goe,"href","/docs/transformers/pr_17640/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(Ooe,"href","/docs/transformers/pr_17640/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(Voe,"href","/docs/transformers/pr_17640/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(Xoe,"href","/docs/transformers/pr_17640/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(zoe,"href","/docs/transformers/pr_17640/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(Woe,"href","/docs/transformers/pr_17640/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(Qoe,"href","/docs/transformers/pr_17640/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(Hoe,"href","/docs/transformers/pr_17640/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(Uoe,"href","/docs/transformers/pr_17640/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(D3,"id","transformers.FlaxAutoModelForSequenceClassification"),d(D3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D3,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(mf,"class","relative group"),d(Joe,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yoe,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Koe,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zoe,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(ere,"href","/docs/transformers/pr_17640/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(ore,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(rre,"href","/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(tre,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(are,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(nre,"href","/docs/transformers/pr_17640/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(sre,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(lre,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(ire,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z3,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(pf,"class","relative group"),d(dre,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cre,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fre,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mre,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(gre,"href","/docs/transformers/pr_17640/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(hre,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(pre,"href","/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(_re,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(ure,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(bre,"href","/docs/transformers/pr_17640/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(vre,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(Fre,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Tre,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mw,"id","transformers.FlaxAutoModelForTokenClassification"),d(mw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mw,"href","#transformers.FlaxAutoModelForTokenClassification"),d(bf,"class","relative group"),d(Mre,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ere,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Cre,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wre,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(Are,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(Lre,"href","/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(yre,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(xre,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d($re,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(kre,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(Sre,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ew,"id","transformers.FlaxAutoModelForMultipleChoice"),d(Ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ew,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Tf,"class","relative group"),d(Rre,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pre,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Bre,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ire,"href","/docs/transformers/pr_17640/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(Nre,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(qre,"href","/docs/transformers/pr_17640/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(jre,"href","/docs/transformers/pr_17640/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Dre,"href","/docs/transformers/pr_17640/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(Gre,"href","/docs/transformers/pr_17640/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Ore,"href","/docs/transformers/pr_17640/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Vre,"href","/docs/transformers/pr_17640/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(Pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Cf,"class","relative group"),d(Xre,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zre,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Wre,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qre,"href","/docs/transformers/pr_17640/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qw,"id","transformers.FlaxAutoModelForImageClassification"),d(qw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qw,"href","#transformers.FlaxAutoModelForImageClassification"),d(Lf,"class","relative group"),d(Hre,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ure,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Jre,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yre,"href","/docs/transformers/pr_17640/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(Kre,"href","/docs/transformers/pr_17640/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vw,"id","transformers.FlaxAutoModelForVision2Seq"),d(Vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vw,"href","#transformers.FlaxAutoModelForVision2Seq"),d($f,"class","relative group"),d(Zre,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ete,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ote,"href","/docs/transformers/pr_17640/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rte,"href","/docs/transformers/pr_17640/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(c,_,null),e(p,h),e(p,wo),e(wo,xi),b(f,If,u),b(f,lt,u),e(lt,$i),e(lt,ki),e(ki,fy),e(lt,Nf),b(f,Oe,u),b(f,Qe,u),e(Qe,Si),e(Qe,Pn),e(Pn,my),e(Qe,Bn),e(Qe,In),e(In,gy),e(Qe,Ri),e(Qe,Nn),e(Nn,hy),e(Qe,Pi),b(f,qf,u),M(Sa,f,u),b(f,He,u),b(f,Ae,u),e(Ae,HS),e(Ae,Bi),e(Bi,US),e(Ae,JS),b(f,Ao,u),b(f,Ra,u),e(Ra,YS),e(Ra,jf),e(jf,KS),e(Ra,aUe),b(f,VXe,u),b(f,Ii,u),e(Ii,Df),e(Df,Yae),M(py,Yae,null),e(Ii,nUe),e(Ii,Kae),e(Kae,sUe),b(f,XXe,u),b(f,qn,u),e(qn,lUe),e(qn,Zae),e(Zae,iUe),e(qn,dUe),e(qn,ene),e(ene,cUe),e(qn,fUe),b(f,zXe,u),M(_y,f,u),b(f,WXe,u),b(f,ZS,u),e(ZS,mUe),b(f,QXe,u),M(Gf,f,u),b(f,HXe,u),b(f,Ni,u),e(Ni,Of),e(Of,one),M(uy,one,null),e(Ni,gUe),e(Ni,rne),e(rne,hUe),b(f,UXe,u),b(f,Lo,u),M(by,Lo,null),e(Lo,pUe),e(Lo,vy),e(vy,_Ue),e(vy,eR),e(eR,uUe),e(vy,bUe),e(Lo,vUe),e(Lo,Fy),e(Fy,FUe),e(Fy,tne),e(tne,TUe),e(Fy,MUe),e(Lo,EUe),e(Lo,yr),M(Ty,yr,null),e(yr,CUe),e(yr,ane),e(ane,wUe),e(yr,AUe),e(yr,qi),e(qi,LUe),e(qi,nne),e(nne,yUe),e(qi,xUe),e(qi,sne),e(sne,$Ue),e(qi,kUe),e(yr,SUe),e(yr,A),e(A,Vf),e(Vf,lne),e(lne,RUe),e(Vf,PUe),e(Vf,oR),e(oR,BUe),e(Vf,IUe),e(A,NUe),e(A,Xf),e(Xf,ine),e(ine,qUe),e(Xf,jUe),e(Xf,rR),e(rR,DUe),e(Xf,GUe),e(A,OUe),e(A,zf),e(zf,dne),e(dne,VUe),e(zf,XUe),e(zf,tR),e(tR,zUe),e(zf,WUe),e(A,QUe),e(A,Wf),e(Wf,cne),e(cne,HUe),e(Wf,UUe),e(Wf,aR),e(aR,JUe),e(Wf,YUe),e(A,KUe),e(A,Qf),e(Qf,fne),e(fne,ZUe),e(Qf,eJe),e(Qf,nR),e(nR,oJe),e(Qf,rJe),e(A,tJe),e(A,Hf),e(Hf,mne),e(mne,aJe),e(Hf,nJe),e(Hf,sR),e(sR,sJe),e(Hf,lJe),e(A,iJe),e(A,Uf),e(Uf,gne),e(gne,dJe),e(Uf,cJe),e(Uf,lR),e(lR,fJe),e(Uf,mJe),e(A,gJe),e(A,Jf),e(Jf,hne),e(hne,hJe),e(Jf,pJe),e(Jf,iR),e(iR,_Je),e(Jf,uJe),e(A,bJe),e(A,Yf),e(Yf,pne),e(pne,vJe),e(Yf,FJe),e(Yf,dR),e(dR,TJe),e(Yf,MJe),e(A,EJe),e(A,Kf),e(Kf,_ne),e(_ne,CJe),e(Kf,wJe),e(Kf,cR),e(cR,AJe),e(Kf,LJe),e(A,yJe),e(A,Zf),e(Zf,une),e(une,xJe),e(Zf,$Je),e(Zf,fR),e(fR,kJe),e(Zf,SJe),e(A,RJe),e(A,em),e(em,bne),e(bne,PJe),e(em,BJe),e(em,mR),e(mR,IJe),e(em,NJe),e(A,qJe),e(A,om),e(om,vne),e(vne,jJe),e(om,DJe),e(om,gR),e(gR,GJe),e(om,OJe),e(A,VJe),e(A,rm),e(rm,Fne),e(Fne,XJe),e(rm,zJe),e(rm,hR),e(hR,WJe),e(rm,QJe),e(A,HJe),e(A,tm),e(tm,Tne),e(Tne,UJe),e(tm,JJe),e(tm,pR),e(pR,YJe),e(tm,KJe),e(A,ZJe),e(A,am),e(am,Mne),e(Mne,eYe),e(am,oYe),e(am,_R),e(_R,rYe),e(am,tYe),e(A,aYe),e(A,nm),e(nm,Ene),e(Ene,nYe),e(nm,sYe),e(nm,uR),e(uR,lYe),e(nm,iYe),e(A,dYe),e(A,sm),e(sm,Cne),e(Cne,cYe),e(sm,fYe),e(sm,bR),e(bR,mYe),e(sm,gYe),e(A,hYe),e(A,lm),e(lm,wne),e(wne,pYe),e(lm,_Ye),e(lm,vR),e(vR,uYe),e(lm,bYe),e(A,vYe),e(A,im),e(im,Ane),e(Ane,FYe),e(im,TYe),e(im,FR),e(FR,MYe),e(im,EYe),e(A,CYe),e(A,dm),e(dm,Lne),e(Lne,wYe),e(dm,AYe),e(dm,TR),e(TR,LYe),e(dm,yYe),e(A,xYe),e(A,cm),e(cm,yne),e(yne,$Ye),e(cm,kYe),e(cm,MR),e(MR,SYe),e(cm,RYe),e(A,PYe),e(A,fm),e(fm,xne),e(xne,BYe),e(fm,IYe),e(fm,ER),e(ER,NYe),e(fm,qYe),e(A,jYe),e(A,mm),e(mm,$ne),e($ne,DYe),e(mm,GYe),e(mm,CR),e(CR,OYe),e(mm,VYe),e(A,XYe),e(A,gm),e(gm,kne),e(kne,zYe),e(gm,WYe),e(gm,wR),e(wR,QYe),e(gm,HYe),e(A,UYe),e(A,hm),e(hm,Sne),e(Sne,JYe),e(hm,YYe),e(hm,AR),e(AR,KYe),e(hm,ZYe),e(A,eKe),e(A,pm),e(pm,Rne),e(Rne,oKe),e(pm,rKe),e(pm,LR),e(LR,tKe),e(pm,aKe),e(A,nKe),e(A,_m),e(_m,Pne),e(Pne,sKe),e(_m,lKe),e(_m,yR),e(yR,iKe),e(_m,dKe),e(A,cKe),e(A,um),e(um,Bne),e(Bne,fKe),e(um,mKe),e(um,xR),e(xR,gKe),e(um,hKe),e(A,pKe),e(A,bm),e(bm,Ine),e(Ine,_Ke),e(bm,uKe),e(bm,$R),e($R,bKe),e(bm,vKe),e(A,FKe),e(A,vm),e(vm,Nne),e(Nne,TKe),e(vm,MKe),e(vm,kR),e(kR,EKe),e(vm,CKe),e(A,wKe),e(A,Fm),e(Fm,qne),e(qne,AKe),e(Fm,LKe),e(Fm,SR),e(SR,yKe),e(Fm,xKe),e(A,$Ke),e(A,Tm),e(Tm,jne),e(jne,kKe),e(Tm,SKe),e(Tm,RR),e(RR,RKe),e(Tm,PKe),e(A,BKe),e(A,Mm),e(Mm,Dne),e(Dne,IKe),e(Mm,NKe),e(Mm,PR),e(PR,qKe),e(Mm,jKe),e(A,DKe),e(A,Em),e(Em,Gne),e(Gne,GKe),e(Em,OKe),e(Em,BR),e(BR,VKe),e(Em,XKe),e(A,zKe),e(A,Cm),e(Cm,One),e(One,WKe),e(Cm,QKe),e(Cm,IR),e(IR,HKe),e(Cm,UKe),e(A,JKe),e(A,wm),e(wm,Vne),e(Vne,YKe),e(wm,KKe),e(wm,NR),e(NR,ZKe),e(wm,eZe),e(A,oZe),e(A,Am),e(Am,Xne),e(Xne,rZe),e(Am,tZe),e(Am,qR),e(qR,aZe),e(Am,nZe),e(A,sZe),e(A,Lm),e(Lm,zne),e(zne,lZe),e(Lm,iZe),e(Lm,jR),e(jR,dZe),e(Lm,cZe),e(A,fZe),e(A,ym),e(ym,Wne),e(Wne,mZe),e(ym,gZe),e(ym,DR),e(DR,hZe),e(ym,pZe),e(A,_Ze),e(A,xm),e(xm,Qne),e(Qne,uZe),e(xm,bZe),e(xm,GR),e(GR,vZe),e(xm,FZe),e(A,TZe),e(A,$m),e($m,Hne),e(Hne,MZe),e($m,EZe),e($m,OR),e(OR,CZe),e($m,wZe),e(A,AZe),e(A,km),e(km,Une),e(Une,LZe),e(km,yZe),e(km,VR),e(VR,xZe),e(km,$Ze),e(A,kZe),e(A,Sm),e(Sm,Jne),e(Jne,SZe),e(Sm,RZe),e(Sm,XR),e(XR,PZe),e(Sm,BZe),e(A,IZe),e(A,Rm),e(Rm,Yne),e(Yne,NZe),e(Rm,qZe),e(Rm,zR),e(zR,jZe),e(Rm,DZe),e(A,GZe),e(A,Pm),e(Pm,Kne),e(Kne,OZe),e(Pm,VZe),e(Pm,WR),e(WR,XZe),e(Pm,zZe),e(A,WZe),e(A,Bm),e(Bm,Zne),e(Zne,QZe),e(Bm,HZe),e(Bm,QR),e(QR,UZe),e(Bm,JZe),e(A,YZe),e(A,Im),e(Im,ese),e(ese,KZe),e(Im,ZZe),e(Im,HR),e(HR,eeo),e(Im,oeo),e(A,reo),e(A,Nm),e(Nm,ose),e(ose,teo),e(Nm,aeo),e(Nm,UR),e(UR,neo),e(Nm,seo),e(A,leo),e(A,qm),e(qm,rse),e(rse,ieo),e(qm,deo),e(qm,JR),e(JR,ceo),e(qm,feo),e(A,meo),e(A,jm),e(jm,tse),e(tse,geo),e(jm,heo),e(jm,YR),e(YR,peo),e(jm,_eo),e(A,ueo),e(A,Dm),e(Dm,ase),e(ase,beo),e(Dm,veo),e(Dm,KR),e(KR,Feo),e(Dm,Teo),e(A,Meo),e(A,Gm),e(Gm,nse),e(nse,Eeo),e(Gm,Ceo),e(Gm,ZR),e(ZR,weo),e(Gm,Aeo),e(A,Leo),e(A,Om),e(Om,sse),e(sse,yeo),e(Om,xeo),e(Om,eP),e(eP,$eo),e(Om,keo),e(A,Seo),e(A,Vm),e(Vm,lse),e(lse,Reo),e(Vm,Peo),e(Vm,oP),e(oP,Beo),e(Vm,Ieo),e(A,Neo),e(A,Xm),e(Xm,ise),e(ise,qeo),e(Xm,jeo),e(Xm,rP),e(rP,Deo),e(Xm,Geo),e(A,Oeo),e(A,zm),e(zm,dse),e(dse,Veo),e(zm,Xeo),e(zm,tP),e(tP,zeo),e(zm,Weo),e(A,Qeo),e(A,Wm),e(Wm,cse),e(cse,Heo),e(Wm,Ueo),e(Wm,aP),e(aP,Jeo),e(Wm,Yeo),e(A,Keo),e(A,Qm),e(Qm,fse),e(fse,Zeo),e(Qm,eoo),e(Qm,nP),e(nP,ooo),e(Qm,roo),e(A,too),e(A,Hm),e(Hm,mse),e(mse,aoo),e(Hm,noo),e(Hm,sP),e(sP,soo),e(Hm,loo),e(A,ioo),e(A,Um),e(Um,gse),e(gse,doo),e(Um,coo),e(Um,lP),e(lP,foo),e(Um,moo),e(A,goo),e(A,Jm),e(Jm,hse),e(hse,hoo),e(Jm,poo),e(Jm,iP),e(iP,_oo),e(Jm,uoo),e(A,boo),e(A,Ym),e(Ym,pse),e(pse,voo),e(Ym,Foo),e(Ym,dP),e(dP,Too),e(Ym,Moo),e(A,Eoo),e(A,Km),e(Km,_se),e(_se,Coo),e(Km,woo),e(Km,cP),e(cP,Aoo),e(Km,Loo),e(A,yoo),e(A,Zm),e(Zm,use),e(use,xoo),e(Zm,$oo),e(Zm,fP),e(fP,koo),e(Zm,Soo),e(A,Roo),e(A,eg),e(eg,bse),e(bse,Poo),e(eg,Boo),e(eg,mP),e(mP,Ioo),e(eg,Noo),e(A,qoo),e(A,og),e(og,vse),e(vse,joo),e(og,Doo),e(og,gP),e(gP,Goo),e(og,Ooo),e(A,Voo),e(A,rg),e(rg,Fse),e(Fse,Xoo),e(rg,zoo),e(rg,hP),e(hP,Woo),e(rg,Qoo),e(A,Hoo),e(A,tg),e(tg,Tse),e(Tse,Uoo),e(tg,Joo),e(tg,pP),e(pP,Yoo),e(tg,Koo),e(A,Zoo),e(A,ag),e(ag,Mse),e(Mse,ero),e(ag,oro),e(ag,_P),e(_P,rro),e(ag,tro),e(A,aro),e(A,ng),e(ng,Ese),e(Ese,nro),e(ng,sro),e(ng,uP),e(uP,lro),e(ng,iro),e(A,dro),e(A,sg),e(sg,Cse),e(Cse,cro),e(sg,fro),e(sg,bP),e(bP,mro),e(sg,gro),e(A,hro),e(A,lg),e(lg,wse),e(wse,pro),e(lg,_ro),e(lg,vP),e(vP,uro),e(lg,bro),e(A,vro),e(A,ig),e(ig,Ase),e(Ase,Fro),e(ig,Tro),e(ig,FP),e(FP,Mro),e(ig,Ero),e(A,Cro),e(A,dg),e(dg,Lse),e(Lse,wro),e(dg,Aro),e(dg,TP),e(TP,Lro),e(dg,yro),e(A,xro),e(A,cg),e(cg,yse),e(yse,$ro),e(cg,kro),e(cg,MP),e(MP,Sro),e(cg,Rro),e(A,Pro),e(A,fg),e(fg,xse),e(xse,Bro),e(fg,Iro),e(fg,EP),e(EP,Nro),e(fg,qro),e(A,jro),e(A,mg),e(mg,$se),e($se,Dro),e(mg,Gro),e(mg,CP),e(CP,Oro),e(mg,Vro),e(A,Xro),e(A,gg),e(gg,kse),e(kse,zro),e(gg,Wro),e(gg,wP),e(wP,Qro),e(gg,Hro),e(A,Uro),e(A,hg),e(hg,Sse),e(Sse,Jro),e(hg,Yro),e(hg,AP),e(AP,Kro),e(hg,Zro),e(A,eto),e(A,pg),e(pg,Rse),e(Rse,oto),e(pg,rto),e(pg,LP),e(LP,tto),e(pg,ato),e(A,nto),e(A,_g),e(_g,Pse),e(Pse,sto),e(_g,lto),e(_g,yP),e(yP,ito),e(_g,dto),e(A,cto),e(A,ug),e(ug,Bse),e(Bse,fto),e(ug,mto),e(ug,xP),e(xP,gto),e(ug,hto),e(A,pto),e(A,bg),e(bg,Ise),e(Ise,_to),e(bg,uto),e(bg,$P),e($P,bto),e(bg,vto),e(A,Fto),e(A,vg),e(vg,Nse),e(Nse,Tto),e(vg,Mto),e(vg,kP),e(kP,Eto),e(vg,Cto),e(A,wto),e(A,Fg),e(Fg,qse),e(qse,Ato),e(Fg,Lto),e(Fg,SP),e(SP,yto),e(Fg,xto),e(A,$to),e(A,Tg),e(Tg,jse),e(jse,kto),e(Tg,Sto),e(Tg,RP),e(RP,Rto),e(Tg,Pto),e(A,Bto),e(A,Mg),e(Mg,Dse),e(Dse,Ito),e(Mg,Nto),e(Mg,PP),e(PP,qto),e(Mg,jto),e(A,Dto),e(A,Eg),e(Eg,Gse),e(Gse,Gto),e(Eg,Oto),e(Eg,BP),e(BP,Vto),e(Eg,Xto),e(A,zto),e(A,Cg),e(Cg,Ose),e(Ose,Wto),e(Cg,Qto),e(Cg,IP),e(IP,Hto),e(Cg,Uto),e(A,Jto),e(A,wg),e(wg,Vse),e(Vse,Yto),e(wg,Kto),e(wg,NP),e(NP,Zto),e(wg,eao),e(A,oao),e(A,Ag),e(Ag,Xse),e(Xse,rao),e(Ag,tao),e(Ag,qP),e(qP,aao),e(Ag,nao),e(A,sao),e(A,Lg),e(Lg,zse),e(zse,lao),e(Lg,iao),e(Lg,jP),e(jP,dao),e(Lg,cao),e(A,fao),e(A,yg),e(yg,Wse),e(Wse,mao),e(yg,gao),e(yg,DP),e(DP,hao),e(yg,pao),e(A,_ao),e(A,xg),e(xg,Qse),e(Qse,uao),e(xg,bao),e(xg,GP),e(GP,vao),e(xg,Fao),e(A,Tao),e(A,$g),e($g,Hse),e(Hse,Mao),e($g,Eao),e($g,OP),e(OP,Cao),e($g,wao),e(A,Aao),e(A,kg),e(kg,Use),e(Use,Lao),e(kg,yao),e(kg,VP),e(VP,xao),e(kg,$ao),e(A,kao),e(A,Sg),e(Sg,Jse),e(Jse,Sao),e(Sg,Rao),e(Sg,XP),e(XP,Pao),e(Sg,Bao),e(A,Iao),e(A,Rg),e(Rg,Yse),e(Yse,Nao),e(Rg,qao),e(Rg,zP),e(zP,jao),e(Rg,Dao),e(A,Gao),e(A,Pg),e(Pg,Kse),e(Kse,Oao),e(Pg,Vao),e(Pg,WP),e(WP,Xao),e(Pg,zao),e(A,Wao),e(A,Bg),e(Bg,Zse),e(Zse,Qao),e(Bg,Hao),e(Bg,QP),e(QP,Uao),e(Bg,Jao),e(A,Yao),e(A,Ig),e(Ig,ele),e(ele,Kao),e(Ig,Zao),e(Ig,HP),e(HP,eno),e(Ig,ono),e(A,rno),e(A,Ng),e(Ng,ole),e(ole,tno),e(Ng,ano),e(Ng,UP),e(UP,nno),e(Ng,sno),e(A,lno),e(A,qg),e(qg,rle),e(rle,ino),e(qg,dno),e(qg,JP),e(JP,cno),e(qg,fno),e(A,mno),e(A,jg),e(jg,tle),e(tle,gno),e(jg,hno),e(jg,YP),e(YP,pno),e(jg,_no),e(A,uno),e(A,Dg),e(Dg,ale),e(ale,bno),e(Dg,vno),e(Dg,KP),e(KP,Fno),e(Dg,Tno),e(A,Mno),e(A,Gg),e(Gg,nle),e(nle,Eno),e(Gg,Cno),e(Gg,ZP),e(ZP,wno),e(Gg,Ano),e(A,Lno),e(A,Og),e(Og,sle),e(sle,yno),e(Og,xno),e(Og,eB),e(eB,$no),e(Og,kno),e(A,Sno),e(A,Vg),e(Vg,lle),e(lle,Rno),e(Vg,Pno),e(Vg,oB),e(oB,Bno),e(Vg,Ino),e(A,Nno),e(A,Xg),e(Xg,ile),e(ile,qno),e(Xg,jno),e(Xg,rB),e(rB,Dno),e(Xg,Gno),e(A,Ono),e(A,zg),e(zg,dle),e(dle,Vno),e(zg,Xno),e(zg,tB),e(tB,zno),e(zg,Wno),e(A,Qno),e(A,Wg),e(Wg,cle),e(cle,Hno),e(Wg,Uno),e(Wg,aB),e(aB,Jno),e(Wg,Yno),e(A,Kno),e(A,Qg),e(Qg,fle),e(fle,Zno),e(Qg,eso),e(Qg,nB),e(nB,oso),e(Qg,rso),e(A,tso),e(A,Hg),e(Hg,mle),e(mle,aso),e(Hg,nso),e(Hg,sB),e(sB,sso),e(Hg,lso),e(A,iso),e(A,Ug),e(Ug,gle),e(gle,dso),e(Ug,cso),e(Ug,lB),e(lB,fso),e(Ug,mso),e(A,gso),e(A,Jg),e(Jg,hle),e(hle,hso),e(Jg,pso),e(Jg,iB),e(iB,_so),e(Jg,uso),e(A,bso),e(A,Yg),e(Yg,ple),e(ple,vso),e(Yg,Fso),e(Yg,dB),e(dB,Tso),e(Yg,Mso),e(A,Eso),e(A,Kg),e(Kg,_le),e(_le,Cso),e(Kg,wso),e(Kg,cB),e(cB,Aso),e(Kg,Lso),e(A,yso),e(A,Zg),e(Zg,ule),e(ule,xso),e(Zg,$so),e(Zg,fB),e(fB,kso),e(Zg,Sso),e(yr,Rso),M(eh,yr,null),e(Lo,Pso),e(Lo,oh),M(My,oh,null),e(oh,Bso),e(oh,ble),e(ble,Iso),b(f,JXe,u),b(f,ji,u),e(ji,rh),e(rh,vle),M(Ey,vle,null),e(ji,Nso),e(ji,Fle),e(Fle,qso),b(f,YXe,u),b(f,yo,u),M(Cy,yo,null),e(yo,jso),e(yo,wy),e(wy,Dso),e(wy,mB),e(mB,Gso),e(wy,Oso),e(yo,Vso),e(yo,Ay),e(Ay,Xso),e(Ay,Tle),e(Tle,zso),e(Ay,Wso),e(yo,Qso),e(yo,xr),M(Ly,xr,null),e(xr,Hso),e(xr,Mle),e(Mle,Uso),e(xr,Jso),e(xr,Pa),e(Pa,Yso),e(Pa,Ele),e(Ele,Kso),e(Pa,Zso),e(Pa,Cle),e(Cle,elo),e(Pa,olo),e(Pa,wle),e(wle,rlo),e(Pa,tlo),e(xr,alo),e(xr,k),e(k,jn),e(jn,Ale),e(Ale,nlo),e(jn,slo),e(jn,gB),e(gB,llo),e(jn,ilo),e(jn,hB),e(hB,dlo),e(jn,clo),e(k,flo),e(k,Dn),e(Dn,Lle),e(Lle,mlo),e(Dn,glo),e(Dn,pB),e(pB,hlo),e(Dn,plo),e(Dn,_B),e(_B,_lo),e(Dn,ulo),e(k,blo),e(k,Gn),e(Gn,yle),e(yle,vlo),e(Gn,Flo),e(Gn,uB),e(uB,Tlo),e(Gn,Mlo),e(Gn,bB),e(bB,Elo),e(Gn,Clo),e(k,wlo),e(k,th),e(th,xle),e(xle,Alo),e(th,Llo),e(th,vB),e(vB,ylo),e(th,xlo),e(k,$lo),e(k,On),e(On,$le),e($le,klo),e(On,Slo),e(On,FB),e(FB,Rlo),e(On,Plo),e(On,TB),e(TB,Blo),e(On,Ilo),e(k,Nlo),e(k,ah),e(ah,kle),e(kle,qlo),e(ah,jlo),e(ah,MB),e(MB,Dlo),e(ah,Glo),e(k,Olo),e(k,nh),e(nh,Sle),e(Sle,Vlo),e(nh,Xlo),e(nh,EB),e(EB,zlo),e(nh,Wlo),e(k,Qlo),e(k,sh),e(sh,Rle),e(Rle,Hlo),e(sh,Ulo),e(sh,CB),e(CB,Jlo),e(sh,Ylo),e(k,Klo),e(k,Vn),e(Vn,Ple),e(Ple,Zlo),e(Vn,eio),e(Vn,wB),e(wB,oio),e(Vn,rio),e(Vn,AB),e(AB,tio),e(Vn,aio),e(k,nio),e(k,Xn),e(Xn,Ble),e(Ble,sio),e(Xn,lio),e(Xn,LB),e(LB,iio),e(Xn,dio),e(Xn,yB),e(yB,cio),e(Xn,fio),e(k,mio),e(k,zn),e(zn,Ile),e(Ile,gio),e(zn,hio),e(zn,xB),e(xB,pio),e(zn,_io),e(zn,$B),e($B,uio),e(zn,bio),e(k,vio),e(k,lh),e(lh,Nle),e(Nle,Fio),e(lh,Tio),e(lh,kB),e(kB,Mio),e(lh,Eio),e(k,Cio),e(k,ih),e(ih,qle),e(qle,wio),e(ih,Aio),e(ih,SB),e(SB,Lio),e(ih,yio),e(k,xio),e(k,dh),e(dh,jle),e(jle,$io),e(dh,kio),e(dh,RB),e(RB,Sio),e(dh,Rio),e(k,Pio),e(k,Wn),e(Wn,Dle),e(Dle,Bio),e(Wn,Iio),e(Wn,PB),e(PB,Nio),e(Wn,qio),e(Wn,BB),e(BB,jio),e(Wn,Dio),e(k,Gio),e(k,ch),e(ch,Gle),e(Gle,Oio),e(ch,Vio),e(ch,IB),e(IB,Xio),e(ch,zio),e(k,Wio),e(k,Qn),e(Qn,Ole),e(Ole,Qio),e(Qn,Hio),e(Qn,NB),e(NB,Uio),e(Qn,Jio),e(Qn,qB),e(qB,Yio),e(Qn,Kio),e(k,Zio),e(k,Hn),e(Hn,Vle),e(Vle,edo),e(Hn,odo),e(Hn,jB),e(jB,rdo),e(Hn,tdo),e(Hn,DB),e(DB,ado),e(Hn,ndo),e(k,sdo),e(k,Un),e(Un,Xle),e(Xle,ldo),e(Un,ido),e(Un,GB),e(GB,ddo),e(Un,cdo),e(Un,OB),e(OB,fdo),e(Un,mdo),e(k,gdo),e(k,Jn),e(Jn,zle),e(zle,hdo),e(Jn,pdo),e(Jn,VB),e(VB,_do),e(Jn,udo),e(Jn,XB),e(XB,bdo),e(Jn,vdo),e(k,Fdo),e(k,fh),e(fh,Wle),e(Wle,Tdo),e(fh,Mdo),e(fh,zB),e(zB,Edo),e(fh,Cdo),e(k,wdo),e(k,Yn),e(Yn,Qle),e(Qle,Ado),e(Yn,Ldo),e(Yn,WB),e(WB,ydo),e(Yn,xdo),e(Yn,QB),e(QB,$do),e(Yn,kdo),e(k,Sdo),e(k,Kn),e(Kn,Hle),e(Hle,Rdo),e(Kn,Pdo),e(Kn,HB),e(HB,Bdo),e(Kn,Ido),e(Kn,UB),e(UB,Ndo),e(Kn,qdo),e(k,jdo),e(k,Zn),e(Zn,Ule),e(Ule,Ddo),e(Zn,Gdo),e(Zn,JB),e(JB,Odo),e(Zn,Vdo),e(Zn,YB),e(YB,Xdo),e(Zn,zdo),e(k,Wdo),e(k,es),e(es,Jle),e(Jle,Qdo),e(es,Hdo),e(es,KB),e(KB,Udo),e(es,Jdo),e(es,ZB),e(ZB,Ydo),e(es,Kdo),e(k,Zdo),e(k,os),e(os,Yle),e(Yle,eco),e(os,oco),e(os,eI),e(eI,rco),e(os,tco),e(os,oI),e(oI,aco),e(os,nco),e(k,sco),e(k,rs),e(rs,Kle),e(Kle,lco),e(rs,ico),e(rs,rI),e(rI,dco),e(rs,cco),e(rs,tI),e(tI,fco),e(rs,mco),e(k,gco),e(k,mh),e(mh,Zle),e(Zle,hco),e(mh,pco),e(mh,aI),e(aI,_co),e(mh,uco),e(k,bco),e(k,ts),e(ts,eie),e(eie,vco),e(ts,Fco),e(ts,nI),e(nI,Tco),e(ts,Mco),e(ts,sI),e(sI,Eco),e(ts,Cco),e(k,wco),e(k,gh),e(gh,oie),e(oie,Aco),e(gh,Lco),e(gh,lI),e(lI,yco),e(gh,xco),e(k,$co),e(k,as),e(as,rie),e(rie,kco),e(as,Sco),e(as,iI),e(iI,Rco),e(as,Pco),e(as,dI),e(dI,Bco),e(as,Ico),e(k,Nco),e(k,ns),e(ns,tie),e(tie,qco),e(ns,jco),e(ns,cI),e(cI,Dco),e(ns,Gco),e(ns,fI),e(fI,Oco),e(ns,Vco),e(k,Xco),e(k,ss),e(ss,aie),e(aie,zco),e(ss,Wco),e(ss,mI),e(mI,Qco),e(ss,Hco),e(ss,gI),e(gI,Uco),e(ss,Jco),e(k,Yco),e(k,hh),e(hh,nie),e(nie,Kco),e(hh,Zco),e(hh,hI),e(hI,efo),e(hh,ofo),e(k,rfo),e(k,ls),e(ls,sie),e(sie,tfo),e(ls,afo),e(ls,pI),e(pI,nfo),e(ls,sfo),e(ls,_I),e(_I,lfo),e(ls,ifo),e(k,dfo),e(k,is),e(is,lie),e(lie,cfo),e(is,ffo),e(is,uI),e(uI,mfo),e(is,gfo),e(is,bI),e(bI,hfo),e(is,pfo),e(k,_fo),e(k,ds),e(ds,iie),e(iie,ufo),e(ds,bfo),e(ds,vI),e(vI,vfo),e(ds,Ffo),e(ds,FI),e(FI,Tfo),e(ds,Mfo),e(k,Efo),e(k,ph),e(ph,die),e(die,Cfo),e(ph,wfo),e(ph,TI),e(TI,Afo),e(ph,Lfo),e(k,yfo),e(k,cs),e(cs,cie),e(cie,xfo),e(cs,$fo),e(cs,MI),e(MI,kfo),e(cs,Sfo),e(cs,EI),e(EI,Rfo),e(cs,Pfo),e(k,Bfo),e(k,fs),e(fs,fie),e(fie,Ifo),e(fs,Nfo),e(fs,CI),e(CI,qfo),e(fs,jfo),e(fs,wI),e(wI,Dfo),e(fs,Gfo),e(k,Ofo),e(k,ms),e(ms,mie),e(mie,Vfo),e(ms,Xfo),e(ms,AI),e(AI,zfo),e(ms,Wfo),e(ms,LI),e(LI,Qfo),e(ms,Hfo),e(k,Ufo),e(k,gs),e(gs,gie),e(gie,Jfo),e(gs,Yfo),e(gs,yI),e(yI,Kfo),e(gs,Zfo),e(gs,xI),e(xI,emo),e(gs,omo),e(k,rmo),e(k,hs),e(hs,hie),e(hie,tmo),e(hs,amo),e(hs,$I),e($I,nmo),e(hs,smo),e(hs,kI),e(kI,lmo),e(hs,imo),e(k,dmo),e(k,ps),e(ps,pie),e(pie,cmo),e(ps,fmo),e(ps,SI),e(SI,mmo),e(ps,gmo),e(ps,RI),e(RI,hmo),e(ps,pmo),e(k,_mo),e(k,_s),e(_s,_ie),e(_ie,umo),e(_s,bmo),e(_s,PI),e(PI,vmo),e(_s,Fmo),e(_s,BI),e(BI,Tmo),e(_s,Mmo),e(k,Emo),e(k,us),e(us,uie),e(uie,Cmo),e(us,wmo),e(us,II),e(II,Amo),e(us,Lmo),e(us,NI),e(NI,ymo),e(us,xmo),e(k,$mo),e(k,_h),e(_h,bie),e(bie,kmo),e(_h,Smo),e(_h,qI),e(qI,Rmo),e(_h,Pmo),e(k,Bmo),e(k,bs),e(bs,vie),e(vie,Imo),e(bs,Nmo),e(bs,jI),e(jI,qmo),e(bs,jmo),e(bs,DI),e(DI,Dmo),e(bs,Gmo),e(k,Omo),e(k,uh),e(uh,Fie),e(Fie,Vmo),e(uh,Xmo),e(uh,GI),e(GI,zmo),e(uh,Wmo),e(k,Qmo),e(k,bh),e(bh,Tie),e(Tie,Hmo),e(bh,Umo),e(bh,OI),e(OI,Jmo),e(bh,Ymo),e(k,Kmo),e(k,vs),e(vs,Mie),e(Mie,Zmo),e(vs,ego),e(vs,VI),e(VI,ogo),e(vs,rgo),e(vs,XI),e(XI,tgo),e(vs,ago),e(k,ngo),e(k,Fs),e(Fs,Eie),e(Eie,sgo),e(Fs,lgo),e(Fs,zI),e(zI,igo),e(Fs,dgo),e(Fs,WI),e(WI,cgo),e(Fs,fgo),e(k,mgo),e(k,Ts),e(Ts,Cie),e(Cie,ggo),e(Ts,hgo),e(Ts,QI),e(QI,pgo),e(Ts,_go),e(Ts,HI),e(HI,ugo),e(Ts,bgo),e(k,vgo),e(k,vh),e(vh,wie),e(wie,Fgo),e(vh,Tgo),e(vh,UI),e(UI,Mgo),e(vh,Ego),e(k,Cgo),e(k,Ms),e(Ms,Aie),e(Aie,wgo),e(Ms,Ago),e(Ms,JI),e(JI,Lgo),e(Ms,ygo),e(Ms,YI),e(YI,xgo),e(Ms,$go),e(k,kgo),e(k,Es),e(Es,Lie),e(Lie,Sgo),e(Es,Rgo),e(Es,KI),e(KI,Pgo),e(Es,Bgo),e(Es,ZI),e(ZI,Igo),e(Es,Ngo),e(k,qgo),e(k,Cs),e(Cs,yie),e(yie,jgo),e(Cs,Dgo),e(Cs,eN),e(eN,Ggo),e(Cs,Ogo),e(Cs,oN),e(oN,Vgo),e(Cs,Xgo),e(k,zgo),e(k,ws),e(ws,xie),e(xie,Wgo),e(ws,Qgo),e(ws,rN),e(rN,Hgo),e(ws,Ugo),e(ws,tN),e(tN,Jgo),e(ws,Ygo),e(k,Kgo),e(k,As),e(As,$ie),e($ie,Zgo),e(As,eho),e(As,aN),e(aN,oho),e(As,rho),e(As,nN),e(nN,tho),e(As,aho),e(k,nho),e(k,Ls),e(Ls,kie),e(kie,sho),e(Ls,lho),e(Ls,sN),e(sN,iho),e(Ls,dho),e(Ls,lN),e(lN,cho),e(Ls,fho),e(k,mho),e(k,ys),e(ys,Sie),e(Sie,gho),e(ys,hho),e(ys,iN),e(iN,pho),e(ys,_ho),e(ys,dN),e(dN,uho),e(ys,bho),e(k,vho),e(k,xs),e(xs,Rie),e(Rie,Fho),e(xs,Tho),e(xs,cN),e(cN,Mho),e(xs,Eho),e(xs,fN),e(fN,Cho),e(xs,who),e(k,Aho),e(k,Fh),e(Fh,Pie),e(Pie,Lho),e(Fh,yho),e(Fh,mN),e(mN,xho),e(Fh,$ho),e(k,kho),e(k,$s),e($s,Bie),e(Bie,Sho),e($s,Rho),e($s,gN),e(gN,Pho),e($s,Bho),e($s,hN),e(hN,Iho),e($s,Nho),e(k,qho),e(k,ks),e(ks,Iie),e(Iie,jho),e(ks,Dho),e(ks,pN),e(pN,Gho),e(ks,Oho),e(ks,_N),e(_N,Vho),e(ks,Xho),e(k,zho),e(k,Th),e(Th,Nie),e(Nie,Who),e(Th,Qho),e(Th,uN),e(uN,Hho),e(Th,Uho),e(k,Jho),e(k,Mh),e(Mh,qie),e(qie,Yho),e(Mh,Kho),e(Mh,bN),e(bN,Zho),e(Mh,epo),e(k,opo),e(k,Eh),e(Eh,jie),e(jie,rpo),e(Eh,tpo),e(Eh,vN),e(vN,apo),e(Eh,npo),e(k,spo),e(k,Ch),e(Ch,Die),e(Die,lpo),e(Ch,ipo),e(Ch,FN),e(FN,dpo),e(Ch,cpo),e(k,fpo),e(k,Ss),e(Ss,Gie),e(Gie,mpo),e(Ss,gpo),e(Ss,TN),e(TN,hpo),e(Ss,ppo),e(Ss,MN),e(MN,_po),e(Ss,upo),e(k,bpo),e(k,wh),e(wh,Oie),e(Oie,vpo),e(wh,Fpo),e(wh,EN),e(EN,Tpo),e(wh,Mpo),e(k,Epo),e(k,Rs),e(Rs,Vie),e(Vie,Cpo),e(Rs,wpo),e(Rs,CN),e(CN,Apo),e(Rs,Lpo),e(Rs,wN),e(wN,ypo),e(Rs,xpo),e(k,$po),e(k,Ps),e(Ps,Xie),e(Xie,kpo),e(Ps,Spo),e(Ps,AN),e(AN,Rpo),e(Ps,Ppo),e(Ps,LN),e(LN,Bpo),e(Ps,Ipo),e(k,Npo),e(k,Bs),e(Bs,zie),e(zie,qpo),e(Bs,jpo),e(Bs,yN),e(yN,Dpo),e(Bs,Gpo),e(Bs,xN),e(xN,Opo),e(Bs,Vpo),e(k,Xpo),e(k,Is),e(Is,Wie),e(Wie,zpo),e(Is,Wpo),e(Is,$N),e($N,Qpo),e(Is,Hpo),e(Is,kN),e(kN,Upo),e(Is,Jpo),e(k,Ypo),e(k,Ns),e(Ns,Qie),e(Qie,Kpo),e(Ns,Zpo),e(Ns,SN),e(SN,e_o),e(Ns,o_o),e(Ns,RN),e(RN,r_o),e(Ns,t_o),e(k,a_o),e(k,qs),e(qs,Hie),e(Hie,n_o),e(qs,s_o),e(qs,PN),e(PN,l_o),e(qs,i_o),e(qs,BN),e(BN,d_o),e(qs,c_o),e(k,f_o),e(k,Ah),e(Ah,Uie),e(Uie,m_o),e(Ah,g_o),e(Ah,IN),e(IN,h_o),e(Ah,p_o),e(k,__o),e(k,Lh),e(Lh,Jie),e(Jie,u_o),e(Lh,b_o),e(Lh,NN),e(NN,v_o),e(Lh,F_o),e(k,T_o),e(k,js),e(js,Yie),e(Yie,M_o),e(js,E_o),e(js,qN),e(qN,C_o),e(js,w_o),e(js,jN),e(jN,A_o),e(js,L_o),e(k,y_o),e(k,Ds),e(Ds,Kie),e(Kie,x_o),e(Ds,$_o),e(Ds,DN),e(DN,k_o),e(Ds,S_o),e(Ds,GN),e(GN,R_o),e(Ds,P_o),e(k,B_o),e(k,Gs),e(Gs,Zie),e(Zie,I_o),e(Gs,N_o),e(Gs,ON),e(ON,q_o),e(Gs,j_o),e(Gs,VN),e(VN,D_o),e(Gs,G_o),e(k,O_o),e(k,yh),e(yh,ede),e(ede,V_o),e(yh,X_o),e(yh,XN),e(XN,z_o),e(yh,W_o),e(k,Q_o),e(k,xh),e(xh,ode),e(ode,H_o),e(xh,U_o),e(xh,zN),e(zN,J_o),e(xh,Y_o),e(k,K_o),e(k,$h),e($h,rde),e(rde,Z_o),e($h,euo),e($h,WN),e(WN,ouo),e($h,ruo),e(k,tuo),e(k,Os),e(Os,tde),e(tde,auo),e(Os,nuo),e(Os,QN),e(QN,suo),e(Os,luo),e(Os,HN),e(HN,iuo),e(Os,duo),e(k,cuo),e(k,Vs),e(Vs,ade),e(ade,fuo),e(Vs,muo),e(Vs,UN),e(UN,guo),e(Vs,huo),e(Vs,JN),e(JN,puo),e(Vs,_uo),e(k,uuo),e(k,kh),e(kh,nde),e(nde,buo),e(kh,vuo),e(kh,YN),e(YN,Fuo),e(kh,Tuo),e(k,Muo),e(k,Sh),e(Sh,sde),e(sde,Euo),e(Sh,Cuo),e(Sh,KN),e(KN,wuo),e(Sh,Auo),e(k,Luo),e(k,Rh),e(Rh,lde),e(lde,yuo),e(Rh,xuo),e(Rh,ZN),e(ZN,$uo),e(Rh,kuo),e(k,Suo),e(k,Xs),e(Xs,ide),e(ide,Ruo),e(Xs,Puo),e(Xs,eq),e(eq,Buo),e(Xs,Iuo),e(Xs,oq),e(oq,Nuo),e(Xs,quo),e(k,juo),e(k,Ph),e(Ph,dde),e(dde,Duo),e(Ph,Guo),e(Ph,rq),e(rq,Ouo),e(Ph,Vuo),e(k,Xuo),e(k,Bh),e(Bh,cde),e(cde,zuo),e(Bh,Wuo),e(Bh,tq),e(tq,Quo),e(Bh,Huo),e(k,Uuo),e(k,zs),e(zs,fde),e(fde,Juo),e(zs,Yuo),e(zs,aq),e(aq,Kuo),e(zs,Zuo),e(zs,nq),e(nq,e1o),e(zs,o1o),e(k,r1o),e(k,Ws),e(Ws,mde),e(mde,t1o),e(Ws,a1o),e(Ws,sq),e(sq,n1o),e(Ws,s1o),e(Ws,lq),e(lq,l1o),e(Ws,i1o),e(k,d1o),e(k,Qs),e(Qs,gde),e(gde,c1o),e(Qs,f1o),e(Qs,iq),e(iq,m1o),e(Qs,g1o),e(Qs,dq),e(dq,h1o),e(Qs,p1o),e(k,_1o),e(k,Hs),e(Hs,hde),e(hde,u1o),e(Hs,b1o),e(Hs,cq),e(cq,v1o),e(Hs,F1o),e(Hs,fq),e(fq,T1o),e(Hs,M1o),e(xr,E1o),M(Ih,xr,null),e(yo,C1o),e(yo,Nh),M(yy,Nh,null),e(Nh,w1o),e(Nh,pde),e(pde,A1o),b(f,KXe,u),b(f,Di,u),e(Di,qh),e(qh,_de),M(xy,_de,null),e(Di,L1o),e(Di,ude),e(ude,y1o),b(f,ZXe,u),b(f,xo,u),M($y,xo,null),e(xo,x1o),e(xo,ky),e(ky,$1o),e(ky,mq),e(mq,k1o),e(ky,S1o),e(xo,R1o),e(xo,Sy),e(Sy,P1o),e(Sy,bde),e(bde,B1o),e(Sy,I1o),e(xo,N1o),e(xo,Ue),M(Ry,Ue,null),e(Ue,q1o),e(Ue,vde),e(vde,j1o),e(Ue,D1o),e(Ue,Ba),e(Ba,G1o),e(Ba,Fde),e(Fde,O1o),e(Ba,V1o),e(Ba,Tde),e(Tde,X1o),e(Ba,z1o),e(Ba,Mde),e(Mde,W1o),e(Ba,Q1o),e(Ue,H1o),e(Ue,J),e(J,jh),e(jh,Ede),e(Ede,U1o),e(jh,J1o),e(jh,gq),e(gq,Y1o),e(jh,K1o),e(J,Z1o),e(J,Dh),e(Dh,Cde),e(Cde,e4o),e(Dh,o4o),e(Dh,hq),e(hq,r4o),e(Dh,t4o),e(J,a4o),e(J,Gh),e(Gh,wde),e(wde,n4o),e(Gh,s4o),e(Gh,pq),e(pq,l4o),e(Gh,i4o),e(J,d4o),e(J,Oh),e(Oh,Ade),e(Ade,c4o),e(Oh,f4o),e(Oh,_q),e(_q,m4o),e(Oh,g4o),e(J,h4o),e(J,Vh),e(Vh,Lde),e(Lde,p4o),e(Vh,_4o),e(Vh,uq),e(uq,u4o),e(Vh,b4o),e(J,v4o),e(J,Xh),e(Xh,yde),e(yde,F4o),e(Xh,T4o),e(Xh,bq),e(bq,M4o),e(Xh,E4o),e(J,C4o),e(J,zh),e(zh,xde),e(xde,w4o),e(zh,A4o),e(zh,vq),e(vq,L4o),e(zh,y4o),e(J,x4o),e(J,Wh),e(Wh,$de),e($de,$4o),e(Wh,k4o),e(Wh,Fq),e(Fq,S4o),e(Wh,R4o),e(J,P4o),e(J,Qh),e(Qh,kde),e(kde,B4o),e(Qh,I4o),e(Qh,Tq),e(Tq,N4o),e(Qh,q4o),e(J,j4o),e(J,Hh),e(Hh,Sde),e(Sde,D4o),e(Hh,G4o),e(Hh,Mq),e(Mq,O4o),e(Hh,V4o),e(J,X4o),e(J,Uh),e(Uh,Rde),e(Rde,z4o),e(Uh,W4o),e(Uh,Eq),e(Eq,Q4o),e(Uh,H4o),e(J,U4o),e(J,Jh),e(Jh,Pde),e(Pde,J4o),e(Jh,Y4o),e(Jh,Cq),e(Cq,K4o),e(Jh,Z4o),e(J,e2o),e(J,Yh),e(Yh,Bde),e(Bde,o2o),e(Yh,r2o),e(Yh,wq),e(wq,t2o),e(Yh,a2o),e(J,n2o),e(J,Kh),e(Kh,Ide),e(Ide,s2o),e(Kh,l2o),e(Kh,Aq),e(Aq,i2o),e(Kh,d2o),e(J,c2o),e(J,Zh),e(Zh,Nde),e(Nde,f2o),e(Zh,m2o),e(Zh,Lq),e(Lq,g2o),e(Zh,h2o),e(J,p2o),e(J,ep),e(ep,qde),e(qde,_2o),e(ep,u2o),e(ep,yq),e(yq,b2o),e(ep,v2o),e(J,F2o),e(J,op),e(op,jde),e(jde,T2o),e(op,M2o),e(op,xq),e(xq,E2o),e(op,C2o),e(J,w2o),e(J,rp),e(rp,Dde),e(Dde,A2o),e(rp,L2o),e(rp,$q),e($q,y2o),e(rp,x2o),e(J,$2o),e(J,tp),e(tp,Gde),e(Gde,k2o),e(tp,S2o),e(tp,kq),e(kq,R2o),e(tp,P2o),e(J,B2o),e(J,ap),e(ap,Ode),e(Ode,I2o),e(ap,N2o),e(ap,Sq),e(Sq,q2o),e(ap,j2o),e(J,D2o),e(J,np),e(np,Vde),e(Vde,G2o),e(np,O2o),e(np,Rq),e(Rq,V2o),e(np,X2o),e(J,z2o),e(J,sp),e(sp,Xde),e(Xde,W2o),e(sp,Q2o),e(sp,Pq),e(Pq,H2o),e(sp,U2o),e(J,J2o),e(J,lp),e(lp,zde),e(zde,Y2o),e(lp,K2o),e(lp,Bq),e(Bq,Z2o),e(lp,ebo),e(J,obo),e(J,ip),e(ip,Wde),e(Wde,rbo),e(ip,tbo),e(ip,Iq),e(Iq,abo),e(ip,nbo),e(J,sbo),e(J,dp),e(dp,Qde),e(Qde,lbo),e(dp,ibo),e(dp,Nq),e(Nq,dbo),e(dp,cbo),e(J,fbo),e(J,cp),e(cp,Hde),e(Hde,mbo),e(cp,gbo),e(cp,qq),e(qq,hbo),e(cp,pbo),e(J,_bo),e(J,fp),e(fp,Ude),e(Ude,ubo),e(fp,bbo),e(fp,jq),e(jq,vbo),e(fp,Fbo),e(J,Tbo),e(J,mp),e(mp,Jde),e(Jde,Mbo),e(mp,Ebo),e(mp,Dq),e(Dq,Cbo),e(mp,wbo),e(J,Abo),e(J,gp),e(gp,Yde),e(Yde,Lbo),e(gp,ybo),e(gp,Gq),e(Gq,xbo),e(gp,$bo),e(J,kbo),e(J,hp),e(hp,Kde),e(Kde,Sbo),e(hp,Rbo),e(hp,Oq),e(Oq,Pbo),e(hp,Bbo),e(J,Ibo),e(J,pp),e(pp,Zde),e(Zde,Nbo),e(pp,qbo),e(pp,Vq),e(Vq,jbo),e(pp,Dbo),e(J,Gbo),e(J,_p),e(_p,ece),e(ece,Obo),e(_p,Vbo),e(_p,Xq),e(Xq,Xbo),e(_p,zbo),e(J,Wbo),e(J,up),e(up,oce),e(oce,Qbo),e(up,Hbo),e(up,zq),e(zq,Ubo),e(up,Jbo),e(J,Ybo),e(J,bp),e(bp,rce),e(rce,Kbo),e(bp,Zbo),e(bp,Wq),e(Wq,evo),e(bp,ovo),e(J,rvo),e(J,vp),e(vp,tce),e(tce,tvo),e(vp,avo),e(vp,Qq),e(Qq,nvo),e(vp,svo),e(Ue,lvo),M(Fp,Ue,null),e(Ue,ivo),M(Tp,Ue,null),e(xo,dvo),e(xo,Mp),M(Py,Mp,null),e(Mp,cvo),e(Mp,ace),e(ace,fvo),b(f,eze,u),b(f,Gi,u),e(Gi,Ep),e(Ep,nce),M(By,nce,null),e(Gi,mvo),e(Gi,sce),e(sce,gvo),b(f,oze,u),b(f,$o,u),M(Iy,$o,null),e($o,hvo),e($o,Ny),e(Ny,pvo),e(Ny,Hq),e(Hq,_vo),e(Ny,uvo),e($o,bvo),e($o,qy),e(qy,vvo),e(qy,lce),e(lce,Fvo),e(qy,Tvo),e($o,Mvo),e($o,Je),M(jy,Je,null),e(Je,Evo),e(Je,ice),e(ice,Cvo),e(Je,wvo),e(Je,Oi),e(Oi,Avo),e(Oi,dce),e(dce,Lvo),e(Oi,yvo),e(Oi,cce),e(cce,xvo),e(Oi,$vo),e(Je,kvo),e(Je,fe),e(fe,Cp),e(Cp,fce),e(fce,Svo),e(Cp,Rvo),e(Cp,Uq),e(Uq,Pvo),e(Cp,Bvo),e(fe,Ivo),e(fe,wp),e(wp,mce),e(mce,Nvo),e(wp,qvo),e(wp,Jq),e(Jq,jvo),e(wp,Dvo),e(fe,Gvo),e(fe,Ap),e(Ap,gce),e(gce,Ovo),e(Ap,Vvo),e(Ap,Yq),e(Yq,Xvo),e(Ap,zvo),e(fe,Wvo),e(fe,Lp),e(Lp,hce),e(hce,Qvo),e(Lp,Hvo),e(Lp,Kq),e(Kq,Uvo),e(Lp,Jvo),e(fe,Yvo),e(fe,yp),e(yp,pce),e(pce,Kvo),e(yp,Zvo),e(yp,Zq),e(Zq,e0o),e(yp,o0o),e(fe,r0o),e(fe,xp),e(xp,_ce),e(_ce,t0o),e(xp,a0o),e(xp,ej),e(ej,n0o),e(xp,s0o),e(fe,l0o),e(fe,$p),e($p,uce),e(uce,i0o),e($p,d0o),e($p,oj),e(oj,c0o),e($p,f0o),e(fe,m0o),e(fe,kp),e(kp,bce),e(bce,g0o),e(kp,h0o),e(kp,rj),e(rj,p0o),e(kp,_0o),e(fe,u0o),e(fe,Sp),e(Sp,vce),e(vce,b0o),e(Sp,v0o),e(Sp,tj),e(tj,F0o),e(Sp,T0o),e(fe,M0o),e(fe,Rp),e(Rp,Fce),e(Fce,E0o),e(Rp,C0o),e(Rp,aj),e(aj,w0o),e(Rp,A0o),e(fe,L0o),e(fe,Pp),e(Pp,Tce),e(Tce,y0o),e(Pp,x0o),e(Pp,nj),e(nj,$0o),e(Pp,k0o),e(fe,S0o),e(fe,Bp),e(Bp,Mce),e(Mce,R0o),e(Bp,P0o),e(Bp,sj),e(sj,B0o),e(Bp,I0o),e(fe,N0o),e(fe,Ip),e(Ip,Ece),e(Ece,q0o),e(Ip,j0o),e(Ip,lj),e(lj,D0o),e(Ip,G0o),e(fe,O0o),e(fe,Np),e(Np,Cce),e(Cce,V0o),e(Np,X0o),e(Np,ij),e(ij,z0o),e(Np,W0o),e(fe,Q0o),e(fe,qp),e(qp,wce),e(wce,H0o),e(qp,U0o),e(qp,dj),e(dj,J0o),e(qp,Y0o),e(fe,K0o),e(fe,jp),e(jp,Ace),e(Ace,Z0o),e(jp,eFo),e(jp,cj),e(cj,oFo),e(jp,rFo),e(fe,tFo),e(fe,Dp),e(Dp,Lce),e(Lce,aFo),e(Dp,nFo),e(Dp,fj),e(fj,sFo),e(Dp,lFo),e(fe,iFo),e(fe,Gp),e(Gp,yce),e(yce,dFo),e(Gp,cFo),e(Gp,mj),e(mj,fFo),e(Gp,mFo),e(fe,gFo),e(fe,Op),e(Op,xce),e(xce,hFo),e(Op,pFo),e(Op,gj),e(gj,_Fo),e(Op,uFo),e(Je,bFo),M(Vp,Je,null),e(Je,vFo),M(Xp,Je,null),e($o,FFo),e($o,zp),M(Dy,zp,null),e(zp,TFo),e(zp,$ce),e($ce,MFo),b(f,rze,u),b(f,Vi,u),e(Vi,Wp),e(Wp,kce),M(Gy,kce,null),e(Vi,EFo),e(Vi,Sce),e(Sce,CFo),b(f,tze,u),b(f,ko,u),M(Oy,ko,null),e(ko,wFo),e(ko,Xi),e(Xi,AFo),e(Xi,hj),e(hj,LFo),e(Xi,yFo),e(Xi,pj),e(pj,xFo),e(Xi,$Fo),e(ko,kFo),e(ko,Vy),e(Vy,SFo),e(Vy,Rce),e(Rce,RFo),e(Vy,PFo),e(ko,BFo),e(ko,it),M(Xy,it,null),e(it,IFo),e(it,Pce),e(Pce,NFo),e(it,qFo),e(it,zi),e(zi,jFo),e(zi,Bce),e(Bce,DFo),e(zi,GFo),e(zi,_j),e(_j,OFo),e(zi,VFo),e(it,XFo),M(Qp,it,null),e(ko,zFo),e(ko,Ye),M(zy,Ye,null),e(Ye,WFo),e(Ye,Ice),e(Ice,QFo),e(Ye,HFo),e(Ye,Ia),e(Ia,UFo),e(Ia,Nce),e(Nce,JFo),e(Ia,YFo),e(Ia,qce),e(qce,KFo),e(Ia,ZFo),e(Ia,jce),e(jce,e6o),e(Ia,o6o),e(Ye,r6o),e(Ye,y),e(y,Hp),e(Hp,Dce),e(Dce,t6o),e(Hp,a6o),e(Hp,uj),e(uj,n6o),e(Hp,s6o),e(y,l6o),e(y,Up),e(Up,Gce),e(Gce,i6o),e(Up,d6o),e(Up,bj),e(bj,c6o),e(Up,f6o),e(y,m6o),e(y,Jp),e(Jp,Oce),e(Oce,g6o),e(Jp,h6o),e(Jp,vj),e(vj,p6o),e(Jp,_6o),e(y,u6o),e(y,Yp),e(Yp,Vce),e(Vce,b6o),e(Yp,v6o),e(Yp,Fj),e(Fj,F6o),e(Yp,T6o),e(y,M6o),e(y,Kp),e(Kp,Xce),e(Xce,E6o),e(Kp,C6o),e(Kp,Tj),e(Tj,w6o),e(Kp,A6o),e(y,L6o),e(y,Zp),e(Zp,zce),e(zce,y6o),e(Zp,x6o),e(Zp,Mj),e(Mj,$6o),e(Zp,k6o),e(y,S6o),e(y,e_),e(e_,Wce),e(Wce,R6o),e(e_,P6o),e(e_,Ej),e(Ej,B6o),e(e_,I6o),e(y,N6o),e(y,o_),e(o_,Qce),e(Qce,q6o),e(o_,j6o),e(o_,Cj),e(Cj,D6o),e(o_,G6o),e(y,O6o),e(y,r_),e(r_,Hce),e(Hce,V6o),e(r_,X6o),e(r_,wj),e(wj,z6o),e(r_,W6o),e(y,Q6o),e(y,t_),e(t_,Uce),e(Uce,H6o),e(t_,U6o),e(t_,Aj),e(Aj,J6o),e(t_,Y6o),e(y,K6o),e(y,a_),e(a_,Jce),e(Jce,Z6o),e(a_,eTo),e(a_,Lj),e(Lj,oTo),e(a_,rTo),e(y,tTo),e(y,n_),e(n_,Yce),e(Yce,aTo),e(n_,nTo),e(n_,yj),e(yj,sTo),e(n_,lTo),e(y,iTo),e(y,s_),e(s_,Kce),e(Kce,dTo),e(s_,cTo),e(s_,xj),e(xj,fTo),e(s_,mTo),e(y,gTo),e(y,l_),e(l_,Zce),e(Zce,hTo),e(l_,pTo),e(l_,$j),e($j,_To),e(l_,uTo),e(y,bTo),e(y,i_),e(i_,efe),e(efe,vTo),e(i_,FTo),e(i_,kj),e(kj,TTo),e(i_,MTo),e(y,ETo),e(y,d_),e(d_,ofe),e(ofe,CTo),e(d_,wTo),e(d_,Sj),e(Sj,ATo),e(d_,LTo),e(y,yTo),e(y,c_),e(c_,rfe),e(rfe,xTo),e(c_,$To),e(c_,Rj),e(Rj,kTo),e(c_,STo),e(y,RTo),e(y,f_),e(f_,tfe),e(tfe,PTo),e(f_,BTo),e(f_,Pj),e(Pj,ITo),e(f_,NTo),e(y,qTo),e(y,m_),e(m_,afe),e(afe,jTo),e(m_,DTo),e(m_,Bj),e(Bj,GTo),e(m_,OTo),e(y,VTo),e(y,g_),e(g_,nfe),e(nfe,XTo),e(g_,zTo),e(g_,Ij),e(Ij,WTo),e(g_,QTo),e(y,HTo),e(y,h_),e(h_,sfe),e(sfe,UTo),e(h_,JTo),e(h_,Nj),e(Nj,YTo),e(h_,KTo),e(y,ZTo),e(y,p_),e(p_,lfe),e(lfe,e7o),e(p_,o7o),e(p_,qj),e(qj,r7o),e(p_,t7o),e(y,a7o),e(y,__),e(__,ife),e(ife,n7o),e(__,s7o),e(__,jj),e(jj,l7o),e(__,i7o),e(y,d7o),e(y,u_),e(u_,dfe),e(dfe,c7o),e(u_,f7o),e(u_,Dj),e(Dj,m7o),e(u_,g7o),e(y,h7o),e(y,b_),e(b_,cfe),e(cfe,p7o),e(b_,_7o),e(b_,Gj),e(Gj,u7o),e(b_,b7o),e(y,v7o),e(y,v_),e(v_,ffe),e(ffe,F7o),e(v_,T7o),e(v_,Oj),e(Oj,M7o),e(v_,E7o),e(y,C7o),e(y,F_),e(F_,mfe),e(mfe,w7o),e(F_,A7o),e(F_,Vj),e(Vj,L7o),e(F_,y7o),e(y,x7o),e(y,T_),e(T_,gfe),e(gfe,$7o),e(T_,k7o),e(T_,Xj),e(Xj,S7o),e(T_,R7o),e(y,P7o),e(y,M_),e(M_,hfe),e(hfe,B7o),e(M_,I7o),e(M_,zj),e(zj,N7o),e(M_,q7o),e(y,j7o),e(y,E_),e(E_,pfe),e(pfe,D7o),e(E_,G7o),e(E_,Wj),e(Wj,O7o),e(E_,V7o),e(y,X7o),e(y,C_),e(C_,_fe),e(_fe,z7o),e(C_,W7o),e(C_,Qj),e(Qj,Q7o),e(C_,H7o),e(y,U7o),e(y,w_),e(w_,ufe),e(ufe,J7o),e(w_,Y7o),e(w_,Hj),e(Hj,K7o),e(w_,Z7o),e(y,eMo),e(y,A_),e(A_,bfe),e(bfe,oMo),e(A_,rMo),e(A_,Uj),e(Uj,tMo),e(A_,aMo),e(y,nMo),e(y,L_),e(L_,vfe),e(vfe,sMo),e(L_,lMo),e(L_,Jj),e(Jj,iMo),e(L_,dMo),e(y,cMo),e(y,Us),e(Us,Ffe),e(Ffe,fMo),e(Us,mMo),e(Us,Yj),e(Yj,gMo),e(Us,hMo),e(Us,Kj),e(Kj,pMo),e(Us,_Mo),e(y,uMo),e(y,y_),e(y_,Tfe),e(Tfe,bMo),e(y_,vMo),e(y_,Zj),e(Zj,FMo),e(y_,TMo),e(y,MMo),e(y,x_),e(x_,Mfe),e(Mfe,EMo),e(x_,CMo),e(x_,eD),e(eD,wMo),e(x_,AMo),e(y,LMo),e(y,$_),e($_,Efe),e(Efe,yMo),e($_,xMo),e($_,oD),e(oD,$Mo),e($_,kMo),e(y,SMo),e(y,k_),e(k_,Cfe),e(Cfe,RMo),e(k_,PMo),e(k_,rD),e(rD,BMo),e(k_,IMo),e(y,NMo),e(y,S_),e(S_,wfe),e(wfe,qMo),e(S_,jMo),e(S_,tD),e(tD,DMo),e(S_,GMo),e(y,OMo),e(y,R_),e(R_,Afe),e(Afe,VMo),e(R_,XMo),e(R_,aD),e(aD,zMo),e(R_,WMo),e(y,QMo),e(y,P_),e(P_,Lfe),e(Lfe,HMo),e(P_,UMo),e(P_,nD),e(nD,JMo),e(P_,YMo),e(y,KMo),e(y,B_),e(B_,yfe),e(yfe,ZMo),e(B_,eEo),e(B_,sD),e(sD,oEo),e(B_,rEo),e(y,tEo),e(y,I_),e(I_,xfe),e(xfe,aEo),e(I_,nEo),e(I_,lD),e(lD,sEo),e(I_,lEo),e(y,iEo),e(y,N_),e(N_,$fe),e($fe,dEo),e(N_,cEo),e(N_,iD),e(iD,fEo),e(N_,mEo),e(y,gEo),e(y,q_),e(q_,kfe),e(kfe,hEo),e(q_,pEo),e(q_,dD),e(dD,_Eo),e(q_,uEo),e(y,bEo),e(y,j_),e(j_,Sfe),e(Sfe,vEo),e(j_,FEo),e(j_,cD),e(cD,TEo),e(j_,MEo),e(y,EEo),e(y,D_),e(D_,Rfe),e(Rfe,CEo),e(D_,wEo),e(D_,fD),e(fD,AEo),e(D_,LEo),e(y,yEo),e(y,G_),e(G_,Pfe),e(Pfe,xEo),e(G_,$Eo),e(G_,mD),e(mD,kEo),e(G_,SEo),e(y,REo),e(y,O_),e(O_,Bfe),e(Bfe,PEo),e(O_,BEo),e(O_,gD),e(gD,IEo),e(O_,NEo),e(y,qEo),e(y,V_),e(V_,Ife),e(Ife,jEo),e(V_,DEo),e(V_,hD),e(hD,GEo),e(V_,OEo),e(y,VEo),e(y,X_),e(X_,Nfe),e(Nfe,XEo),e(X_,zEo),e(X_,pD),e(pD,WEo),e(X_,QEo),e(y,HEo),e(y,z_),e(z_,qfe),e(qfe,UEo),e(z_,JEo),e(z_,_D),e(_D,YEo),e(z_,KEo),e(y,ZEo),e(y,W_),e(W_,jfe),e(jfe,eCo),e(W_,oCo),e(W_,uD),e(uD,rCo),e(W_,tCo),e(y,aCo),e(y,Q_),e(Q_,Dfe),e(Dfe,nCo),e(Q_,sCo),e(Q_,bD),e(bD,lCo),e(Q_,iCo),e(y,dCo),e(y,H_),e(H_,Gfe),e(Gfe,cCo),e(H_,fCo),e(H_,vD),e(vD,mCo),e(H_,gCo),e(y,hCo),e(y,U_),e(U_,Ofe),e(Ofe,pCo),e(U_,_Co),e(U_,FD),e(FD,uCo),e(U_,bCo),e(y,vCo),e(y,J_),e(J_,Vfe),e(Vfe,FCo),e(J_,TCo),e(J_,TD),e(TD,MCo),e(J_,ECo),e(y,CCo),e(y,Y_),e(Y_,Xfe),e(Xfe,wCo),e(Y_,ACo),e(Y_,MD),e(MD,LCo),e(Y_,yCo),e(y,xCo),e(y,K_),e(K_,zfe),e(zfe,$Co),e(K_,kCo),e(K_,ED),e(ED,SCo),e(K_,RCo),e(y,PCo),e(y,Z_),e(Z_,Wfe),e(Wfe,BCo),e(Z_,ICo),e(Z_,CD),e(CD,NCo),e(Z_,qCo),e(y,jCo),e(y,eu),e(eu,Qfe),e(Qfe,DCo),e(eu,GCo),e(eu,wD),e(wD,OCo),e(eu,VCo),e(y,XCo),e(y,ou),e(ou,Hfe),e(Hfe,zCo),e(ou,WCo),e(ou,AD),e(AD,QCo),e(ou,HCo),e(y,UCo),e(y,ru),e(ru,Ufe),e(Ufe,JCo),e(ru,YCo),e(ru,LD),e(LD,KCo),e(ru,ZCo),e(y,e5o),e(y,tu),e(tu,Jfe),e(Jfe,o5o),e(tu,r5o),e(tu,yD),e(yD,t5o),e(tu,a5o),e(y,n5o),e(y,au),e(au,Yfe),e(Yfe,s5o),e(au,l5o),e(au,xD),e(xD,i5o),e(au,d5o),e(y,c5o),e(y,nu),e(nu,Kfe),e(Kfe,f5o),e(nu,m5o),e(nu,$D),e($D,g5o),e(nu,h5o),e(y,p5o),e(y,su),e(su,Zfe),e(Zfe,_5o),e(su,u5o),e(su,kD),e(kD,b5o),e(su,v5o),e(y,F5o),e(y,lu),e(lu,eme),e(eme,T5o),e(lu,M5o),e(lu,SD),e(SD,E5o),e(lu,C5o),e(y,w5o),e(y,iu),e(iu,ome),e(ome,A5o),e(iu,L5o),e(iu,RD),e(RD,y5o),e(iu,x5o),e(y,$5o),e(y,du),e(du,rme),e(rme,k5o),e(du,S5o),e(du,PD),e(PD,R5o),e(du,P5o),e(y,B5o),e(y,cu),e(cu,tme),e(tme,I5o),e(cu,N5o),e(cu,BD),e(BD,q5o),e(cu,j5o),e(y,D5o),e(y,fu),e(fu,ame),e(ame,G5o),e(fu,O5o),e(fu,ID),e(ID,V5o),e(fu,X5o),e(y,z5o),e(y,mu),e(mu,nme),e(nme,W5o),e(mu,Q5o),e(mu,ND),e(ND,H5o),e(mu,U5o),e(y,J5o),e(y,gu),e(gu,sme),e(sme,Y5o),e(gu,K5o),e(gu,qD),e(qD,Z5o),e(gu,e3o),e(y,o3o),e(y,hu),e(hu,lme),e(lme,r3o),e(hu,t3o),e(hu,jD),e(jD,a3o),e(hu,n3o),e(y,s3o),e(y,pu),e(pu,ime),e(ime,l3o),e(pu,i3o),e(pu,DD),e(DD,d3o),e(pu,c3o),e(y,f3o),e(y,_u),e(_u,dme),e(dme,m3o),e(_u,g3o),e(_u,GD),e(GD,h3o),e(_u,p3o),e(y,_3o),e(y,uu),e(uu,cme),e(cme,u3o),e(uu,b3o),e(uu,OD),e(OD,v3o),e(uu,F3o),e(y,T3o),e(y,bu),e(bu,fme),e(fme,M3o),e(bu,E3o),e(bu,VD),e(VD,C3o),e(bu,w3o),e(y,A3o),e(y,vu),e(vu,mme),e(mme,L3o),e(vu,y3o),e(vu,XD),e(XD,x3o),e(vu,$3o),e(y,k3o),e(y,Fu),e(Fu,gme),e(gme,S3o),e(Fu,R3o),e(Fu,zD),e(zD,P3o),e(Fu,B3o),e(y,I3o),e(y,Tu),e(Tu,hme),e(hme,N3o),e(Tu,q3o),e(Tu,WD),e(WD,j3o),e(Tu,D3o),e(y,G3o),e(y,Mu),e(Mu,pme),e(pme,O3o),e(Mu,V3o),e(Mu,QD),e(QD,X3o),e(Mu,z3o),e(y,W3o),e(y,Eu),e(Eu,_me),e(_me,Q3o),e(Eu,H3o),e(Eu,HD),e(HD,U3o),e(Eu,J3o),e(y,Y3o),e(y,Cu),e(Cu,ume),e(ume,K3o),e(Cu,Z3o),e(Cu,UD),e(UD,ewo),e(Cu,owo),e(y,rwo),e(y,wu),e(wu,bme),e(bme,two),e(wu,awo),e(wu,JD),e(JD,nwo),e(wu,swo),e(y,lwo),e(y,Au),e(Au,vme),e(vme,iwo),e(Au,dwo),e(Au,YD),e(YD,cwo),e(Au,fwo),e(y,mwo),e(y,Lu),e(Lu,Fme),e(Fme,gwo),e(Lu,hwo),e(Lu,KD),e(KD,pwo),e(Lu,_wo),e(y,uwo),e(y,yu),e(yu,Tme),e(Tme,bwo),e(yu,vwo),e(yu,ZD),e(ZD,Fwo),e(yu,Two),e(y,Mwo),e(y,xu),e(xu,Mme),e(Mme,Ewo),e(xu,Cwo),e(xu,eG),e(eG,wwo),e(xu,Awo),e(y,Lwo),e(y,$u),e($u,Eme),e(Eme,ywo),e($u,xwo),e($u,oG),e(oG,$wo),e($u,kwo),e(y,Swo),e(y,ku),e(ku,Cme),e(Cme,Rwo),e(ku,Pwo),e(ku,rG),e(rG,Bwo),e(ku,Iwo),e(y,Nwo),e(y,Su),e(Su,wme),e(wme,qwo),e(Su,jwo),e(Su,tG),e(tG,Dwo),e(Su,Gwo),e(y,Owo),e(y,Ru),e(Ru,Ame),e(Ame,Vwo),e(Ru,Xwo),e(Ru,aG),e(aG,zwo),e(Ru,Wwo),e(y,Qwo),e(y,Pu),e(Pu,Lme),e(Lme,Hwo),e(Pu,Uwo),e(Pu,nG),e(nG,Jwo),e(Pu,Ywo),e(y,Kwo),e(y,Bu),e(Bu,yme),e(yme,Zwo),e(Bu,eAo),e(Bu,sG),e(sG,oAo),e(Bu,rAo),e(y,tAo),e(y,Iu),e(Iu,xme),e(xme,aAo),e(Iu,nAo),e(Iu,lG),e(lG,sAo),e(Iu,lAo),e(y,iAo),e(y,Nu),e(Nu,$me),e($me,dAo),e(Nu,cAo),e(Nu,iG),e(iG,fAo),e(Nu,mAo),e(y,gAo),e(y,qu),e(qu,kme),e(kme,hAo),e(qu,pAo),e(qu,dG),e(dG,_Ao),e(qu,uAo),e(y,bAo),e(y,ju),e(ju,Sme),e(Sme,vAo),e(ju,FAo),e(ju,cG),e(cG,TAo),e(ju,MAo),e(y,EAo),e(y,Du),e(Du,Rme),e(Rme,CAo),e(Du,wAo),e(Du,fG),e(fG,AAo),e(Du,LAo),e(y,yAo),e(y,Gu),e(Gu,Pme),e(Pme,xAo),e(Gu,$Ao),e(Gu,mG),e(mG,kAo),e(Gu,SAo),e(y,RAo),e(y,Ou),e(Ou,Bme),e(Bme,PAo),e(Ou,BAo),e(Ou,gG),e(gG,IAo),e(Ou,NAo),e(y,qAo),e(y,Vu),e(Vu,Ime),e(Ime,jAo),e(Vu,DAo),e(Vu,hG),e(hG,GAo),e(Vu,OAo),e(y,VAo),e(y,Xu),e(Xu,Nme),e(Nme,XAo),e(Xu,zAo),e(Xu,pG),e(pG,WAo),e(Xu,QAo),e(y,HAo),e(y,zu),e(zu,qme),e(qme,UAo),e(zu,JAo),e(zu,_G),e(_G,YAo),e(zu,KAo),e(y,ZAo),e(y,Wu),e(Wu,jme),e(jme,eLo),e(Wu,oLo),e(Wu,uG),e(uG,rLo),e(Wu,tLo),e(y,aLo),e(y,Qu),e(Qu,Dme),e(Dme,nLo),e(Qu,sLo),e(Qu,bG),e(bG,lLo),e(Qu,iLo),e(y,dLo),e(y,Hu),e(Hu,Gme),e(Gme,cLo),e(Hu,fLo),e(Hu,vG),e(vG,mLo),e(Hu,gLo),e(y,hLo),e(y,Uu),e(Uu,Ome),e(Ome,pLo),e(Uu,_Lo),e(Uu,FG),e(FG,uLo),e(Uu,bLo),e(y,vLo),e(y,Ju),e(Ju,Vme),e(Vme,FLo),e(Ju,TLo),e(Ju,TG),e(TG,MLo),e(Ju,ELo),e(y,CLo),e(y,Yu),e(Yu,Xme),e(Xme,wLo),e(Yu,ALo),e(Yu,MG),e(MG,LLo),e(Yu,yLo),e(Ye,xLo),e(Ye,Ku),e(Ku,$Lo),e(Ku,zme),e(zme,kLo),e(Ku,SLo),e(Ku,Wme),e(Wme,RLo),e(Ye,PLo),M(Zu,Ye,null),b(f,aze,u),b(f,Wi,u),e(Wi,e1),e(e1,Qme),M(Wy,Qme,null),e(Wi,BLo),e(Wi,Hme),e(Hme,ILo),b(f,nze,u),b(f,So,u),M(Qy,So,null),e(So,NLo),e(So,Qi),e(Qi,qLo),e(Qi,EG),e(EG,jLo),e(Qi,DLo),e(Qi,CG),e(CG,GLo),e(Qi,OLo),e(So,VLo),e(So,Hy),e(Hy,XLo),e(Hy,Ume),e(Ume,zLo),e(Hy,WLo),e(So,QLo),e(So,dt),M(Uy,dt,null),e(dt,HLo),e(dt,Jme),e(Jme,ULo),e(dt,JLo),e(dt,Hi),e(Hi,YLo),e(Hi,Yme),e(Yme,KLo),e(Hi,ZLo),e(Hi,wG),e(wG,eyo),e(Hi,oyo),e(dt,ryo),M(o1,dt,null),e(So,tyo),e(So,Ke),M(Jy,Ke,null),e(Ke,ayo),e(Ke,Kme),e(Kme,nyo),e(Ke,syo),e(Ke,Na),e(Na,lyo),e(Na,Zme),e(Zme,iyo),e(Na,dyo),e(Na,ege),e(ege,cyo),e(Na,fyo),e(Na,oge),e(oge,myo),e(Na,gyo),e(Ke,hyo),e(Ke,G),e(G,r1),e(r1,rge),e(rge,pyo),e(r1,_yo),e(r1,AG),e(AG,uyo),e(r1,byo),e(G,vyo),e(G,t1),e(t1,tge),e(tge,Fyo),e(t1,Tyo),e(t1,LG),e(LG,Myo),e(t1,Eyo),e(G,Cyo),e(G,a1),e(a1,age),e(age,wyo),e(a1,Ayo),e(a1,yG),e(yG,Lyo),e(a1,yyo),e(G,xyo),e(G,n1),e(n1,nge),e(nge,$yo),e(n1,kyo),e(n1,xG),e(xG,Syo),e(n1,Ryo),e(G,Pyo),e(G,s1),e(s1,sge),e(sge,Byo),e(s1,Iyo),e(s1,$G),e($G,Nyo),e(s1,qyo),e(G,jyo),e(G,l1),e(l1,lge),e(lge,Dyo),e(l1,Gyo),e(l1,kG),e(kG,Oyo),e(l1,Vyo),e(G,Xyo),e(G,i1),e(i1,ige),e(ige,zyo),e(i1,Wyo),e(i1,SG),e(SG,Qyo),e(i1,Hyo),e(G,Uyo),e(G,d1),e(d1,dge),e(dge,Jyo),e(d1,Yyo),e(d1,RG),e(RG,Kyo),e(d1,Zyo),e(G,e8o),e(G,c1),e(c1,cge),e(cge,o8o),e(c1,r8o),e(c1,PG),e(PG,t8o),e(c1,a8o),e(G,n8o),e(G,f1),e(f1,fge),e(fge,s8o),e(f1,l8o),e(f1,BG),e(BG,i8o),e(f1,d8o),e(G,c8o),e(G,m1),e(m1,mge),e(mge,f8o),e(m1,m8o),e(m1,IG),e(IG,g8o),e(m1,h8o),e(G,p8o),e(G,g1),e(g1,gge),e(gge,_8o),e(g1,u8o),e(g1,NG),e(NG,b8o),e(g1,v8o),e(G,F8o),e(G,h1),e(h1,hge),e(hge,T8o),e(h1,M8o),e(h1,qG),e(qG,E8o),e(h1,C8o),e(G,w8o),e(G,p1),e(p1,pge),e(pge,A8o),e(p1,L8o),e(p1,jG),e(jG,y8o),e(p1,x8o),e(G,$8o),e(G,_1),e(_1,_ge),e(_ge,k8o),e(_1,S8o),e(_1,DG),e(DG,R8o),e(_1,P8o),e(G,B8o),e(G,u1),e(u1,uge),e(uge,I8o),e(u1,N8o),e(u1,GG),e(GG,q8o),e(u1,j8o),e(G,D8o),e(G,b1),e(b1,bge),e(bge,G8o),e(b1,O8o),e(b1,OG),e(OG,V8o),e(b1,X8o),e(G,z8o),e(G,v1),e(v1,vge),e(vge,W8o),e(v1,Q8o),e(v1,VG),e(VG,H8o),e(v1,U8o),e(G,J8o),e(G,F1),e(F1,Fge),e(Fge,Y8o),e(F1,K8o),e(F1,XG),e(XG,Z8o),e(F1,e9o),e(G,o9o),e(G,T1),e(T1,Tge),e(Tge,r9o),e(T1,t9o),e(T1,zG),e(zG,a9o),e(T1,n9o),e(G,s9o),e(G,M1),e(M1,Mge),e(Mge,l9o),e(M1,i9o),e(M1,WG),e(WG,d9o),e(M1,c9o),e(G,f9o),e(G,E1),e(E1,Ege),e(Ege,m9o),e(E1,g9o),e(E1,QG),e(QG,h9o),e(E1,p9o),e(G,_9o),e(G,C1),e(C1,Cge),e(Cge,u9o),e(C1,b9o),e(C1,HG),e(HG,v9o),e(C1,F9o),e(G,T9o),e(G,w1),e(w1,wge),e(wge,M9o),e(w1,E9o),e(w1,UG),e(UG,C9o),e(w1,w9o),e(G,A9o),e(G,A1),e(A1,Age),e(Age,L9o),e(A1,y9o),e(A1,JG),e(JG,x9o),e(A1,$9o),e(G,k9o),e(G,L1),e(L1,Lge),e(Lge,S9o),e(L1,R9o),e(L1,YG),e(YG,P9o),e(L1,B9o),e(G,I9o),e(G,y1),e(y1,yge),e(yge,N9o),e(y1,q9o),e(y1,KG),e(KG,j9o),e(y1,D9o),e(G,G9o),e(G,x1),e(x1,xge),e(xge,O9o),e(x1,V9o),e(x1,ZG),e(ZG,X9o),e(x1,z9o),e(G,W9o),e(G,$1),e($1,$ge),e($ge,Q9o),e($1,H9o),e($1,eO),e(eO,U9o),e($1,J9o),e(G,Y9o),e(G,k1),e(k1,kge),e(kge,K9o),e(k1,Z9o),e(k1,oO),e(oO,exo),e(k1,oxo),e(G,rxo),e(G,S1),e(S1,Sge),e(Sge,txo),e(S1,axo),e(S1,rO),e(rO,nxo),e(S1,sxo),e(G,lxo),e(G,R1),e(R1,Rge),e(Rge,ixo),e(R1,dxo),e(R1,tO),e(tO,cxo),e(R1,fxo),e(G,mxo),e(G,P1),e(P1,Pge),e(Pge,gxo),e(P1,hxo),e(P1,aO),e(aO,pxo),e(P1,_xo),e(G,uxo),e(G,B1),e(B1,Bge),e(Bge,bxo),e(B1,vxo),e(B1,nO),e(nO,Fxo),e(B1,Txo),e(G,Mxo),e(G,I1),e(I1,Ige),e(Ige,Exo),e(I1,Cxo),e(I1,sO),e(sO,wxo),e(I1,Axo),e(G,Lxo),e(G,N1),e(N1,Nge),e(Nge,yxo),e(N1,xxo),e(N1,lO),e(lO,$xo),e(N1,kxo),e(G,Sxo),e(G,q1),e(q1,qge),e(qge,Rxo),e(q1,Pxo),e(q1,iO),e(iO,Bxo),e(q1,Ixo),e(G,Nxo),e(G,j1),e(j1,jge),e(jge,qxo),e(j1,jxo),e(j1,dO),e(dO,Dxo),e(j1,Gxo),e(G,Oxo),e(G,D1),e(D1,Dge),e(Dge,Vxo),e(D1,Xxo),e(D1,cO),e(cO,zxo),e(D1,Wxo),e(G,Qxo),e(G,G1),e(G1,Gge),e(Gge,Hxo),e(G1,Uxo),e(G1,fO),e(fO,Jxo),e(G1,Yxo),e(G,Kxo),e(G,O1),e(O1,Oge),e(Oge,Zxo),e(O1,e$o),e(O1,mO),e(mO,o$o),e(O1,r$o),e(G,t$o),e(G,V1),e(V1,Vge),e(Vge,a$o),e(V1,n$o),e(V1,gO),e(gO,s$o),e(V1,l$o),e(G,i$o),e(G,X1),e(X1,Xge),e(Xge,d$o),e(X1,c$o),e(X1,hO),e(hO,f$o),e(X1,m$o),e(G,g$o),e(G,z1),e(z1,zge),e(zge,h$o),e(z1,p$o),e(z1,pO),e(pO,_$o),e(z1,u$o),e(G,b$o),e(G,W1),e(W1,Wge),e(Wge,v$o),e(W1,F$o),e(W1,_O),e(_O,T$o),e(W1,M$o),e(Ke,E$o),e(Ke,Q1),e(Q1,C$o),e(Q1,Qge),e(Qge,w$o),e(Q1,A$o),e(Q1,Hge),e(Hge,L$o),e(Ke,y$o),M(H1,Ke,null),b(f,sze,u),b(f,Ui,u),e(Ui,U1),e(U1,Uge),M(Yy,Uge,null),e(Ui,x$o),e(Ui,Jge),e(Jge,$$o),b(f,lze,u),b(f,Ro,u),M(Ky,Ro,null),e(Ro,k$o),e(Ro,Ji),e(Ji,S$o),e(Ji,uO),e(uO,R$o),e(Ji,P$o),e(Ji,bO),e(bO,B$o),e(Ji,I$o),e(Ro,N$o),e(Ro,Zy),e(Zy,q$o),e(Zy,Yge),e(Yge,j$o),e(Zy,D$o),e(Ro,G$o),e(Ro,ct),M(e8,ct,null),e(ct,O$o),e(ct,Kge),e(Kge,V$o),e(ct,X$o),e(ct,Yi),e(Yi,z$o),e(Yi,Zge),e(Zge,W$o),e(Yi,Q$o),e(Yi,vO),e(vO,H$o),e(Yi,U$o),e(ct,J$o),M(J1,ct,null),e(Ro,Y$o),e(Ro,Ze),M(o8,Ze,null),e(Ze,K$o),e(Ze,ehe),e(ehe,Z$o),e(Ze,eko),e(Ze,qa),e(qa,oko),e(qa,ohe),e(ohe,rko),e(qa,tko),e(qa,rhe),e(rhe,ako),e(qa,nko),e(qa,the),e(the,sko),e(qa,lko),e(Ze,iko),e(Ze,z),e(z,Y1),e(Y1,ahe),e(ahe,dko),e(Y1,cko),e(Y1,FO),e(FO,fko),e(Y1,mko),e(z,gko),e(z,K1),e(K1,nhe),e(nhe,hko),e(K1,pko),e(K1,TO),e(TO,_ko),e(K1,uko),e(z,bko),e(z,Z1),e(Z1,she),e(she,vko),e(Z1,Fko),e(Z1,MO),e(MO,Tko),e(Z1,Mko),e(z,Eko),e(z,e4),e(e4,lhe),e(lhe,Cko),e(e4,wko),e(e4,EO),e(EO,Ako),e(e4,Lko),e(z,yko),e(z,o4),e(o4,ihe),e(ihe,xko),e(o4,$ko),e(o4,CO),e(CO,kko),e(o4,Sko),e(z,Rko),e(z,r4),e(r4,dhe),e(dhe,Pko),e(r4,Bko),e(r4,wO),e(wO,Iko),e(r4,Nko),e(z,qko),e(z,t4),e(t4,che),e(che,jko),e(t4,Dko),e(t4,AO),e(AO,Gko),e(t4,Oko),e(z,Vko),e(z,a4),e(a4,fhe),e(fhe,Xko),e(a4,zko),e(a4,LO),e(LO,Wko),e(a4,Qko),e(z,Hko),e(z,n4),e(n4,mhe),e(mhe,Uko),e(n4,Jko),e(n4,yO),e(yO,Yko),e(n4,Kko),e(z,Zko),e(z,s4),e(s4,ghe),e(ghe,eSo),e(s4,oSo),e(s4,xO),e(xO,rSo),e(s4,tSo),e(z,aSo),e(z,l4),e(l4,hhe),e(hhe,nSo),e(l4,sSo),e(l4,$O),e($O,lSo),e(l4,iSo),e(z,dSo),e(z,i4),e(i4,phe),e(phe,cSo),e(i4,fSo),e(i4,kO),e(kO,mSo),e(i4,gSo),e(z,hSo),e(z,d4),e(d4,_he),e(_he,pSo),e(d4,_So),e(d4,SO),e(SO,uSo),e(d4,bSo),e(z,vSo),e(z,c4),e(c4,uhe),e(uhe,FSo),e(c4,TSo),e(c4,RO),e(RO,MSo),e(c4,ESo),e(z,CSo),e(z,f4),e(f4,bhe),e(bhe,wSo),e(f4,ASo),e(f4,PO),e(PO,LSo),e(f4,ySo),e(z,xSo),e(z,m4),e(m4,vhe),e(vhe,$So),e(m4,kSo),e(m4,BO),e(BO,SSo),e(m4,RSo),e(z,PSo),e(z,g4),e(g4,Fhe),e(Fhe,BSo),e(g4,ISo),e(g4,IO),e(IO,NSo),e(g4,qSo),e(z,jSo),e(z,h4),e(h4,The),e(The,DSo),e(h4,GSo),e(h4,NO),e(NO,OSo),e(h4,VSo),e(z,XSo),e(z,p4),e(p4,Mhe),e(Mhe,zSo),e(p4,WSo),e(p4,qO),e(qO,QSo),e(p4,HSo),e(z,USo),e(z,_4),e(_4,Ehe),e(Ehe,JSo),e(_4,YSo),e(_4,jO),e(jO,KSo),e(_4,ZSo),e(z,eRo),e(z,u4),e(u4,Che),e(Che,oRo),e(u4,rRo),e(u4,DO),e(DO,tRo),e(u4,aRo),e(z,nRo),e(z,b4),e(b4,whe),e(whe,sRo),e(b4,lRo),e(b4,GO),e(GO,iRo),e(b4,dRo),e(z,cRo),e(z,v4),e(v4,Ahe),e(Ahe,fRo),e(v4,mRo),e(v4,OO),e(OO,gRo),e(v4,hRo),e(z,pRo),e(z,F4),e(F4,Lhe),e(Lhe,_Ro),e(F4,uRo),e(F4,VO),e(VO,bRo),e(F4,vRo),e(z,FRo),e(z,T4),e(T4,yhe),e(yhe,TRo),e(T4,MRo),e(T4,XO),e(XO,ERo),e(T4,CRo),e(z,wRo),e(z,M4),e(M4,xhe),e(xhe,ARo),e(M4,LRo),e(M4,zO),e(zO,yRo),e(M4,xRo),e(z,$Ro),e(z,E4),e(E4,$he),e($he,kRo),e(E4,SRo),e(E4,WO),e(WO,RRo),e(E4,PRo),e(z,BRo),e(z,C4),e(C4,khe),e(khe,IRo),e(C4,NRo),e(C4,QO),e(QO,qRo),e(C4,jRo),e(z,DRo),e(z,w4),e(w4,She),e(She,GRo),e(w4,ORo),e(w4,HO),e(HO,VRo),e(w4,XRo),e(z,zRo),e(z,A4),e(A4,Rhe),e(Rhe,WRo),e(A4,QRo),e(A4,UO),e(UO,HRo),e(A4,URo),e(z,JRo),e(z,L4),e(L4,Phe),e(Phe,YRo),e(L4,KRo),e(L4,JO),e(JO,ZRo),e(L4,ePo),e(z,oPo),e(z,y4),e(y4,Bhe),e(Bhe,rPo),e(y4,tPo),e(y4,YO),e(YO,aPo),e(y4,nPo),e(z,sPo),e(z,x4),e(x4,Ihe),e(Ihe,lPo),e(x4,iPo),e(x4,KO),e(KO,dPo),e(x4,cPo),e(z,fPo),e(z,$4),e($4,Nhe),e(Nhe,mPo),e($4,gPo),e($4,ZO),e(ZO,hPo),e($4,pPo),e(z,_Po),e(z,k4),e(k4,qhe),e(qhe,uPo),e(k4,bPo),e(k4,eV),e(eV,vPo),e(k4,FPo),e(z,TPo),e(z,S4),e(S4,jhe),e(jhe,MPo),e(S4,EPo),e(S4,oV),e(oV,CPo),e(S4,wPo),e(z,APo),e(z,R4),e(R4,Dhe),e(Dhe,LPo),e(R4,yPo),e(R4,rV),e(rV,xPo),e(R4,$Po),e(z,kPo),e(z,P4),e(P4,Ghe),e(Ghe,SPo),e(P4,RPo),e(P4,tV),e(tV,PPo),e(P4,BPo),e(z,IPo),e(z,B4),e(B4,Ohe),e(Ohe,NPo),e(B4,qPo),e(B4,aV),e(aV,jPo),e(B4,DPo),e(z,GPo),e(z,I4),e(I4,Vhe),e(Vhe,OPo),e(I4,VPo),e(I4,nV),e(nV,XPo),e(I4,zPo),e(Ze,WPo),e(Ze,N4),e(N4,QPo),e(N4,Xhe),e(Xhe,HPo),e(N4,UPo),e(N4,zhe),e(zhe,JPo),e(Ze,YPo),M(q4,Ze,null),b(f,ize,u),b(f,Ki,u),e(Ki,j4),e(j4,Whe),M(r8,Whe,null),e(Ki,KPo),e(Ki,Qhe),e(Qhe,ZPo),b(f,dze,u),b(f,Po,u),M(t8,Po,null),e(Po,eBo),e(Po,Zi),e(Zi,oBo),e(Zi,sV),e(sV,rBo),e(Zi,tBo),e(Zi,lV),e(lV,aBo),e(Zi,nBo),e(Po,sBo),e(Po,a8),e(a8,lBo),e(a8,Hhe),e(Hhe,iBo),e(a8,dBo),e(Po,cBo),e(Po,ft),M(n8,ft,null),e(ft,fBo),e(ft,Uhe),e(Uhe,mBo),e(ft,gBo),e(ft,ed),e(ed,hBo),e(ed,Jhe),e(Jhe,pBo),e(ed,_Bo),e(ed,iV),e(iV,uBo),e(ed,bBo),e(ft,vBo),M(D4,ft,null),e(Po,FBo),e(Po,eo),M(s8,eo,null),e(eo,TBo),e(eo,Yhe),e(Yhe,MBo),e(eo,EBo),e(eo,ja),e(ja,CBo),e(ja,Khe),e(Khe,wBo),e(ja,ABo),e(ja,Zhe),e(Zhe,LBo),e(ja,yBo),e(ja,epe),e(epe,xBo),e(ja,$Bo),e(eo,kBo),e(eo,Q),e(Q,G4),e(G4,ope),e(ope,SBo),e(G4,RBo),e(G4,dV),e(dV,PBo),e(G4,BBo),e(Q,IBo),e(Q,O4),e(O4,rpe),e(rpe,NBo),e(O4,qBo),e(O4,cV),e(cV,jBo),e(O4,DBo),e(Q,GBo),e(Q,V4),e(V4,tpe),e(tpe,OBo),e(V4,VBo),e(V4,fV),e(fV,XBo),e(V4,zBo),e(Q,WBo),e(Q,X4),e(X4,ape),e(ape,QBo),e(X4,HBo),e(X4,mV),e(mV,UBo),e(X4,JBo),e(Q,YBo),e(Q,z4),e(z4,npe),e(npe,KBo),e(z4,ZBo),e(z4,gV),e(gV,eIo),e(z4,oIo),e(Q,rIo),e(Q,W4),e(W4,spe),e(spe,tIo),e(W4,aIo),e(W4,hV),e(hV,nIo),e(W4,sIo),e(Q,lIo),e(Q,Q4),e(Q4,lpe),e(lpe,iIo),e(Q4,dIo),e(Q4,pV),e(pV,cIo),e(Q4,fIo),e(Q,mIo),e(Q,H4),e(H4,ipe),e(ipe,gIo),e(H4,hIo),e(H4,_V),e(_V,pIo),e(H4,_Io),e(Q,uIo),e(Q,U4),e(U4,dpe),e(dpe,bIo),e(U4,vIo),e(U4,uV),e(uV,FIo),e(U4,TIo),e(Q,MIo),e(Q,J4),e(J4,cpe),e(cpe,EIo),e(J4,CIo),e(J4,bV),e(bV,wIo),e(J4,AIo),e(Q,LIo),e(Q,Y4),e(Y4,fpe),e(fpe,yIo),e(Y4,xIo),e(Y4,vV),e(vV,$Io),e(Y4,kIo),e(Q,SIo),e(Q,K4),e(K4,mpe),e(mpe,RIo),e(K4,PIo),e(K4,FV),e(FV,BIo),e(K4,IIo),e(Q,NIo),e(Q,Z4),e(Z4,gpe),e(gpe,qIo),e(Z4,jIo),e(Z4,TV),e(TV,DIo),e(Z4,GIo),e(Q,OIo),e(Q,e2),e(e2,hpe),e(hpe,VIo),e(e2,XIo),e(e2,MV),e(MV,zIo),e(e2,WIo),e(Q,QIo),e(Q,o2),e(o2,ppe),e(ppe,HIo),e(o2,UIo),e(o2,EV),e(EV,JIo),e(o2,YIo),e(Q,KIo),e(Q,r2),e(r2,_pe),e(_pe,ZIo),e(r2,eNo),e(r2,CV),e(CV,oNo),e(r2,rNo),e(Q,tNo),e(Q,t2),e(t2,upe),e(upe,aNo),e(t2,nNo),e(t2,wV),e(wV,sNo),e(t2,lNo),e(Q,iNo),e(Q,a2),e(a2,bpe),e(bpe,dNo),e(a2,cNo),e(a2,AV),e(AV,fNo),e(a2,mNo),e(Q,gNo),e(Q,n2),e(n2,vpe),e(vpe,hNo),e(n2,pNo),e(n2,LV),e(LV,_No),e(n2,uNo),e(Q,bNo),e(Q,s2),e(s2,Fpe),e(Fpe,vNo),e(s2,FNo),e(s2,yV),e(yV,TNo),e(s2,MNo),e(Q,ENo),e(Q,l2),e(l2,Tpe),e(Tpe,CNo),e(l2,wNo),e(l2,xV),e(xV,ANo),e(l2,LNo),e(Q,yNo),e(Q,i2),e(i2,Mpe),e(Mpe,xNo),e(i2,$No),e(i2,$V),e($V,kNo),e(i2,SNo),e(Q,RNo),e(Q,d2),e(d2,Epe),e(Epe,PNo),e(d2,BNo),e(d2,kV),e(kV,INo),e(d2,NNo),e(Q,qNo),e(Q,c2),e(c2,Cpe),e(Cpe,jNo),e(c2,DNo),e(c2,SV),e(SV,GNo),e(c2,ONo),e(Q,VNo),e(Q,f2),e(f2,wpe),e(wpe,XNo),e(f2,zNo),e(f2,RV),e(RV,WNo),e(f2,QNo),e(Q,HNo),e(Q,m2),e(m2,Ape),e(Ape,UNo),e(m2,JNo),e(m2,PV),e(PV,YNo),e(m2,KNo),e(Q,ZNo),e(Q,g2),e(g2,Lpe),e(Lpe,eqo),e(g2,oqo),e(g2,BV),e(BV,rqo),e(g2,tqo),e(Q,aqo),e(Q,h2),e(h2,ype),e(ype,nqo),e(h2,sqo),e(h2,IV),e(IV,lqo),e(h2,iqo),e(Q,dqo),e(Q,p2),e(p2,xpe),e(xpe,cqo),e(p2,fqo),e(p2,NV),e(NV,mqo),e(p2,gqo),e(Q,hqo),e(Q,_2),e(_2,$pe),e($pe,pqo),e(_2,_qo),e(_2,qV),e(qV,uqo),e(_2,bqo),e(Q,vqo),e(Q,u2),e(u2,kpe),e(kpe,Fqo),e(u2,Tqo),e(u2,jV),e(jV,Mqo),e(u2,Eqo),e(Q,Cqo),e(Q,b2),e(b2,Spe),e(Spe,wqo),e(b2,Aqo),e(b2,DV),e(DV,Lqo),e(b2,yqo),e(Q,xqo),e(Q,v2),e(v2,Rpe),e(Rpe,$qo),e(v2,kqo),e(v2,GV),e(GV,Sqo),e(v2,Rqo),e(Q,Pqo),e(Q,F2),e(F2,Ppe),e(Ppe,Bqo),e(F2,Iqo),e(F2,Bpe),e(Bpe,Nqo),e(F2,qqo),e(Q,jqo),e(Q,T2),e(T2,Ipe),e(Ipe,Dqo),e(T2,Gqo),e(T2,OV),e(OV,Oqo),e(T2,Vqo),e(Q,Xqo),e(Q,M2),e(M2,Npe),e(Npe,zqo),e(M2,Wqo),e(M2,VV),e(VV,Qqo),e(M2,Hqo),e(Q,Uqo),e(Q,E2),e(E2,qpe),e(qpe,Jqo),e(E2,Yqo),e(E2,XV),e(XV,Kqo),e(E2,Zqo),e(Q,ejo),e(Q,C2),e(C2,jpe),e(jpe,ojo),e(C2,rjo),e(C2,zV),e(zV,tjo),e(C2,ajo),e(eo,njo),e(eo,w2),e(w2,sjo),e(w2,Dpe),e(Dpe,ljo),e(w2,ijo),e(w2,Gpe),e(Gpe,djo),e(eo,cjo),M(A2,eo,null),b(f,cze,u),b(f,od,u),e(od,L2),e(L2,Ope),M(l8,Ope,null),e(od,fjo),e(od,Vpe),e(Vpe,mjo),b(f,fze,u),b(f,Bo,u),M(i8,Bo,null),e(Bo,gjo),e(Bo,rd),e(rd,hjo),e(rd,WV),e(WV,pjo),e(rd,_jo),e(rd,QV),e(QV,ujo),e(rd,bjo),e(Bo,vjo),e(Bo,d8),e(d8,Fjo),e(d8,Xpe),e(Xpe,Tjo),e(d8,Mjo),e(Bo,Ejo),e(Bo,mt),M(c8,mt,null),e(mt,Cjo),e(mt,zpe),e(zpe,wjo),e(mt,Ajo),e(mt,td),e(td,Ljo),e(td,Wpe),e(Wpe,yjo),e(td,xjo),e(td,HV),e(HV,$jo),e(td,kjo),e(mt,Sjo),M(y2,mt,null),e(Bo,Rjo),e(Bo,oo),M(f8,oo,null),e(oo,Pjo),e(oo,Qpe),e(Qpe,Bjo),e(oo,Ijo),e(oo,Da),e(Da,Njo),e(Da,Hpe),e(Hpe,qjo),e(Da,jjo),e(Da,Upe),e(Upe,Djo),e(Da,Gjo),e(Da,Jpe),e(Jpe,Ojo),e(Da,Vjo),e(oo,Xjo),e(oo,me),e(me,x2),e(x2,Ype),e(Ype,zjo),e(x2,Wjo),e(x2,UV),e(UV,Qjo),e(x2,Hjo),e(me,Ujo),e(me,$2),e($2,Kpe),e(Kpe,Jjo),e($2,Yjo),e($2,JV),e(JV,Kjo),e($2,Zjo),e(me,eDo),e(me,k2),e(k2,Zpe),e(Zpe,oDo),e(k2,rDo),e(k2,YV),e(YV,tDo),e(k2,aDo),e(me,nDo),e(me,S2),e(S2,e_e),e(e_e,sDo),e(S2,lDo),e(S2,KV),e(KV,iDo),e(S2,dDo),e(me,cDo),e(me,R2),e(R2,o_e),e(o_e,fDo),e(R2,mDo),e(R2,ZV),e(ZV,gDo),e(R2,hDo),e(me,pDo),e(me,P2),e(P2,r_e),e(r_e,_Do),e(P2,uDo),e(P2,eX),e(eX,bDo),e(P2,vDo),e(me,FDo),e(me,B2),e(B2,t_e),e(t_e,TDo),e(B2,MDo),e(B2,oX),e(oX,EDo),e(B2,CDo),e(me,wDo),e(me,I2),e(I2,a_e),e(a_e,ADo),e(I2,LDo),e(I2,rX),e(rX,yDo),e(I2,xDo),e(me,$Do),e(me,N2),e(N2,n_e),e(n_e,kDo),e(N2,SDo),e(N2,tX),e(tX,RDo),e(N2,PDo),e(me,BDo),e(me,q2),e(q2,s_e),e(s_e,IDo),e(q2,NDo),e(q2,aX),e(aX,qDo),e(q2,jDo),e(me,DDo),e(me,j2),e(j2,l_e),e(l_e,GDo),e(j2,ODo),e(j2,nX),e(nX,VDo),e(j2,XDo),e(me,zDo),e(me,D2),e(D2,i_e),e(i_e,WDo),e(D2,QDo),e(D2,sX),e(sX,HDo),e(D2,UDo),e(me,JDo),e(me,G2),e(G2,d_e),e(d_e,YDo),e(G2,KDo),e(G2,lX),e(lX,ZDo),e(G2,eGo),e(me,oGo),e(me,O2),e(O2,c_e),e(c_e,rGo),e(O2,tGo),e(O2,iX),e(iX,aGo),e(O2,nGo),e(me,sGo),e(me,V2),e(V2,f_e),e(f_e,lGo),e(V2,iGo),e(V2,dX),e(dX,dGo),e(V2,cGo),e(me,fGo),e(me,X2),e(X2,m_e),e(m_e,mGo),e(X2,gGo),e(X2,cX),e(cX,hGo),e(X2,pGo),e(me,_Go),e(me,z2),e(z2,g_e),e(g_e,uGo),e(z2,bGo),e(z2,fX),e(fX,vGo),e(z2,FGo),e(me,TGo),e(me,W2),e(W2,h_e),e(h_e,MGo),e(W2,EGo),e(W2,mX),e(mX,CGo),e(W2,wGo),e(me,AGo),e(me,Q2),e(Q2,p_e),e(p_e,LGo),e(Q2,yGo),e(Q2,gX),e(gX,xGo),e(Q2,$Go),e(oo,kGo),e(oo,H2),e(H2,SGo),e(H2,__e),e(__e,RGo),e(H2,PGo),e(H2,u_e),e(u_e,BGo),e(oo,IGo),M(U2,oo,null),b(f,mze,u),b(f,ad,u),e(ad,J2),e(J2,b_e),M(m8,b_e,null),e(ad,NGo),e(ad,v_e),e(v_e,qGo),b(f,gze,u),b(f,Io,u),M(g8,Io,null),e(Io,jGo),e(Io,nd),e(nd,DGo),e(nd,hX),e(hX,GGo),e(nd,OGo),e(nd,pX),e(pX,VGo),e(nd,XGo),e(Io,zGo),e(Io,h8),e(h8,WGo),e(h8,F_e),e(F_e,QGo),e(h8,HGo),e(Io,UGo),e(Io,gt),M(p8,gt,null),e(gt,JGo),e(gt,T_e),e(T_e,YGo),e(gt,KGo),e(gt,sd),e(sd,ZGo),e(sd,M_e),e(M_e,eOo),e(sd,oOo),e(sd,_X),e(_X,rOo),e(sd,tOo),e(gt,aOo),M(Y2,gt,null),e(Io,nOo),e(Io,ro),M(_8,ro,null),e(ro,sOo),e(ro,E_e),e(E_e,lOo),e(ro,iOo),e(ro,Ga),e(Ga,dOo),e(Ga,C_e),e(C_e,cOo),e(Ga,fOo),e(Ga,w_e),e(w_e,mOo),e(Ga,gOo),e(Ga,A_e),e(A_e,hOo),e(Ga,pOo),e(ro,_Oo),e(ro,B),e(B,K2),e(K2,L_e),e(L_e,uOo),e(K2,bOo),e(K2,uX),e(uX,vOo),e(K2,FOo),e(B,TOo),e(B,Z2),e(Z2,y_e),e(y_e,MOo),e(Z2,EOo),e(Z2,bX),e(bX,COo),e(Z2,wOo),e(B,AOo),e(B,eb),e(eb,x_e),e(x_e,LOo),e(eb,yOo),e(eb,vX),e(vX,xOo),e(eb,$Oo),e(B,kOo),e(B,ob),e(ob,$_e),e($_e,SOo),e(ob,ROo),e(ob,FX),e(FX,POo),e(ob,BOo),e(B,IOo),e(B,rb),e(rb,k_e),e(k_e,NOo),e(rb,qOo),e(rb,TX),e(TX,jOo),e(rb,DOo),e(B,GOo),e(B,tb),e(tb,S_e),e(S_e,OOo),e(tb,VOo),e(tb,MX),e(MX,XOo),e(tb,zOo),e(B,WOo),e(B,ab),e(ab,R_e),e(R_e,QOo),e(ab,HOo),e(ab,EX),e(EX,UOo),e(ab,JOo),e(B,YOo),e(B,nb),e(nb,P_e),e(P_e,KOo),e(nb,ZOo),e(nb,CX),e(CX,eVo),e(nb,oVo),e(B,rVo),e(B,sb),e(sb,B_e),e(B_e,tVo),e(sb,aVo),e(sb,wX),e(wX,nVo),e(sb,sVo),e(B,lVo),e(B,lb),e(lb,I_e),e(I_e,iVo),e(lb,dVo),e(lb,AX),e(AX,cVo),e(lb,fVo),e(B,mVo),e(B,ib),e(ib,N_e),e(N_e,gVo),e(ib,hVo),e(ib,LX),e(LX,pVo),e(ib,_Vo),e(B,uVo),e(B,db),e(db,q_e),e(q_e,bVo),e(db,vVo),e(db,yX),e(yX,FVo),e(db,TVo),e(B,MVo),e(B,cb),e(cb,j_e),e(j_e,EVo),e(cb,CVo),e(cb,xX),e(xX,wVo),e(cb,AVo),e(B,LVo),e(B,fb),e(fb,D_e),e(D_e,yVo),e(fb,xVo),e(fb,$X),e($X,$Vo),e(fb,kVo),e(B,SVo),e(B,mb),e(mb,G_e),e(G_e,RVo),e(mb,PVo),e(mb,kX),e(kX,BVo),e(mb,IVo),e(B,NVo),e(B,gb),e(gb,O_e),e(O_e,qVo),e(gb,jVo),e(gb,SX),e(SX,DVo),e(gb,GVo),e(B,OVo),e(B,hb),e(hb,V_e),e(V_e,VVo),e(hb,XVo),e(hb,RX),e(RX,zVo),e(hb,WVo),e(B,QVo),e(B,pb),e(pb,X_e),e(X_e,HVo),e(pb,UVo),e(pb,PX),e(PX,JVo),e(pb,YVo),e(B,KVo),e(B,_b),e(_b,z_e),e(z_e,ZVo),e(_b,eXo),e(_b,BX),e(BX,oXo),e(_b,rXo),e(B,tXo),e(B,ub),e(ub,W_e),e(W_e,aXo),e(ub,nXo),e(ub,IX),e(IX,sXo),e(ub,lXo),e(B,iXo),e(B,bb),e(bb,Q_e),e(Q_e,dXo),e(bb,cXo),e(bb,NX),e(NX,fXo),e(bb,mXo),e(B,gXo),e(B,vb),e(vb,H_e),e(H_e,hXo),e(vb,pXo),e(vb,qX),e(qX,_Xo),e(vb,uXo),e(B,bXo),e(B,Fb),e(Fb,U_e),e(U_e,vXo),e(Fb,FXo),e(Fb,jX),e(jX,TXo),e(Fb,MXo),e(B,EXo),e(B,Tb),e(Tb,J_e),e(J_e,CXo),e(Tb,wXo),e(Tb,DX),e(DX,AXo),e(Tb,LXo),e(B,yXo),e(B,Mb),e(Mb,Y_e),e(Y_e,xXo),e(Mb,$Xo),e(Mb,GX),e(GX,kXo),e(Mb,SXo),e(B,RXo),e(B,Eb),e(Eb,K_e),e(K_e,PXo),e(Eb,BXo),e(Eb,OX),e(OX,IXo),e(Eb,NXo),e(B,qXo),e(B,Cb),e(Cb,Z_e),e(Z_e,jXo),e(Cb,DXo),e(Cb,VX),e(VX,GXo),e(Cb,OXo),e(B,VXo),e(B,wb),e(wb,eue),e(eue,XXo),e(wb,zXo),e(wb,XX),e(XX,WXo),e(wb,QXo),e(B,HXo),e(B,Ab),e(Ab,oue),e(oue,UXo),e(Ab,JXo),e(Ab,zX),e(zX,YXo),e(Ab,KXo),e(B,ZXo),e(B,Lb),e(Lb,rue),e(rue,ezo),e(Lb,ozo),e(Lb,WX),e(WX,rzo),e(Lb,tzo),e(B,azo),e(B,yb),e(yb,tue),e(tue,nzo),e(yb,szo),e(yb,QX),e(QX,lzo),e(yb,izo),e(B,dzo),e(B,xb),e(xb,aue),e(aue,czo),e(xb,fzo),e(xb,HX),e(HX,mzo),e(xb,gzo),e(B,hzo),e(B,$b),e($b,nue),e(nue,pzo),e($b,_zo),e($b,UX),e(UX,uzo),e($b,bzo),e(B,vzo),e(B,kb),e(kb,sue),e(sue,Fzo),e(kb,Tzo),e(kb,JX),e(JX,Mzo),e(kb,Ezo),e(B,Czo),e(B,Sb),e(Sb,lue),e(lue,wzo),e(Sb,Azo),e(Sb,YX),e(YX,Lzo),e(Sb,yzo),e(B,xzo),e(B,Rb),e(Rb,iue),e(iue,$zo),e(Rb,kzo),e(Rb,KX),e(KX,Szo),e(Rb,Rzo),e(B,Pzo),e(B,Pb),e(Pb,due),e(due,Bzo),e(Pb,Izo),e(Pb,ZX),e(ZX,Nzo),e(Pb,qzo),e(B,jzo),e(B,Bb),e(Bb,cue),e(cue,Dzo),e(Bb,Gzo),e(Bb,ez),e(ez,Ozo),e(Bb,Vzo),e(B,Xzo),e(B,Ib),e(Ib,fue),e(fue,zzo),e(Ib,Wzo),e(Ib,oz),e(oz,Qzo),e(Ib,Hzo),e(B,Uzo),e(B,Nb),e(Nb,mue),e(mue,Jzo),e(Nb,Yzo),e(Nb,rz),e(rz,Kzo),e(Nb,Zzo),e(B,eWo),e(B,qb),e(qb,gue),e(gue,oWo),e(qb,rWo),e(qb,tz),e(tz,tWo),e(qb,aWo),e(B,nWo),e(B,jb),e(jb,hue),e(hue,sWo),e(jb,lWo),e(jb,az),e(az,iWo),e(jb,dWo),e(B,cWo),e(B,Db),e(Db,pue),e(pue,fWo),e(Db,mWo),e(Db,nz),e(nz,gWo),e(Db,hWo),e(B,pWo),e(B,Gb),e(Gb,_ue),e(_ue,_Wo),e(Gb,uWo),e(Gb,sz),e(sz,bWo),e(Gb,vWo),e(B,FWo),e(B,Ob),e(Ob,uue),e(uue,TWo),e(Ob,MWo),e(Ob,lz),e(lz,EWo),e(Ob,CWo),e(B,wWo),e(B,Vb),e(Vb,bue),e(bue,AWo),e(Vb,LWo),e(Vb,iz),e(iz,yWo),e(Vb,xWo),e(B,$Wo),e(B,Xb),e(Xb,vue),e(vue,kWo),e(Xb,SWo),e(Xb,dz),e(dz,RWo),e(Xb,PWo),e(B,BWo),e(B,zb),e(zb,Fue),e(Fue,IWo),e(zb,NWo),e(zb,cz),e(cz,qWo),e(zb,jWo),e(B,DWo),e(B,Wb),e(Wb,Tue),e(Tue,GWo),e(Wb,OWo),e(Wb,fz),e(fz,VWo),e(Wb,XWo),e(B,zWo),e(B,Qb),e(Qb,Mue),e(Mue,WWo),e(Qb,QWo),e(Qb,mz),e(mz,HWo),e(Qb,UWo),e(B,JWo),e(B,Hb),e(Hb,Eue),e(Eue,YWo),e(Hb,KWo),e(Hb,gz),e(gz,ZWo),e(Hb,eQo),e(ro,oQo),e(ro,Ub),e(Ub,rQo),e(Ub,Cue),e(Cue,tQo),e(Ub,aQo),e(Ub,wue),e(wue,nQo),e(ro,sQo),M(Jb,ro,null),b(f,hze,u),b(f,ld,u),e(ld,Yb),e(Yb,Aue),M(u8,Aue,null),e(ld,lQo),e(ld,Lue),e(Lue,iQo),b(f,pze,u),b(f,No,u),M(b8,No,null),e(No,dQo),e(No,id),e(id,cQo),e(id,hz),e(hz,fQo),e(id,mQo),e(id,pz),e(pz,gQo),e(id,hQo),e(No,pQo),e(No,v8),e(v8,_Qo),e(v8,yue),e(yue,uQo),e(v8,bQo),e(No,vQo),e(No,ht),M(F8,ht,null),e(ht,FQo),e(ht,xue),e(xue,TQo),e(ht,MQo),e(ht,dd),e(dd,EQo),e(dd,$ue),e($ue,CQo),e(dd,wQo),e(dd,_z),e(_z,AQo),e(dd,LQo),e(ht,yQo),M(Kb,ht,null),e(No,xQo),e(No,to),M(T8,to,null),e(to,$Qo),e(to,kue),e(kue,kQo),e(to,SQo),e(to,Oa),e(Oa,RQo),e(Oa,Sue),e(Sue,PQo),e(Oa,BQo),e(Oa,Rue),e(Rue,IQo),e(Oa,NQo),e(Oa,Pue),e(Pue,qQo),e(Oa,jQo),e(to,DQo),e(to,Z),e(Z,Zb),e(Zb,Bue),e(Bue,GQo),e(Zb,OQo),e(Zb,uz),e(uz,VQo),e(Zb,XQo),e(Z,zQo),e(Z,ev),e(ev,Iue),e(Iue,WQo),e(ev,QQo),e(ev,bz),e(bz,HQo),e(ev,UQo),e(Z,JQo),e(Z,ov),e(ov,Nue),e(Nue,YQo),e(ov,KQo),e(ov,vz),e(vz,ZQo),e(ov,eHo),e(Z,oHo),e(Z,rv),e(rv,que),e(que,rHo),e(rv,tHo),e(rv,Fz),e(Fz,aHo),e(rv,nHo),e(Z,sHo),e(Z,tv),e(tv,jue),e(jue,lHo),e(tv,iHo),e(tv,Tz),e(Tz,dHo),e(tv,cHo),e(Z,fHo),e(Z,av),e(av,Due),e(Due,mHo),e(av,gHo),e(av,Mz),e(Mz,hHo),e(av,pHo),e(Z,_Ho),e(Z,nv),e(nv,Gue),e(Gue,uHo),e(nv,bHo),e(nv,Ez),e(Ez,vHo),e(nv,FHo),e(Z,THo),e(Z,sv),e(sv,Oue),e(Oue,MHo),e(sv,EHo),e(sv,Cz),e(Cz,CHo),e(sv,wHo),e(Z,AHo),e(Z,lv),e(lv,Vue),e(Vue,LHo),e(lv,yHo),e(lv,wz),e(wz,xHo),e(lv,$Ho),e(Z,kHo),e(Z,iv),e(iv,Xue),e(Xue,SHo),e(iv,RHo),e(iv,Az),e(Az,PHo),e(iv,BHo),e(Z,IHo),e(Z,dv),e(dv,zue),e(zue,NHo),e(dv,qHo),e(dv,Lz),e(Lz,jHo),e(dv,DHo),e(Z,GHo),e(Z,cv),e(cv,Wue),e(Wue,OHo),e(cv,VHo),e(cv,yz),e(yz,XHo),e(cv,zHo),e(Z,WHo),e(Z,fv),e(fv,Que),e(Que,QHo),e(fv,HHo),e(fv,xz),e(xz,UHo),e(fv,JHo),e(Z,YHo),e(Z,mv),e(mv,Hue),e(Hue,KHo),e(mv,ZHo),e(mv,$z),e($z,eUo),e(mv,oUo),e(Z,rUo),e(Z,gv),e(gv,Uue),e(Uue,tUo),e(gv,aUo),e(gv,kz),e(kz,nUo),e(gv,sUo),e(Z,lUo),e(Z,hv),e(hv,Jue),e(Jue,iUo),e(hv,dUo),e(hv,Sz),e(Sz,cUo),e(hv,fUo),e(Z,mUo),e(Z,pv),e(pv,Yue),e(Yue,gUo),e(pv,hUo),e(pv,Rz),e(Rz,pUo),e(pv,_Uo),e(Z,uUo),e(Z,_v),e(_v,Kue),e(Kue,bUo),e(_v,vUo),e(_v,Pz),e(Pz,FUo),e(_v,TUo),e(Z,MUo),e(Z,uv),e(uv,Zue),e(Zue,EUo),e(uv,CUo),e(uv,Bz),e(Bz,wUo),e(uv,AUo),e(Z,LUo),e(Z,bv),e(bv,e1e),e(e1e,yUo),e(bv,xUo),e(bv,Iz),e(Iz,$Uo),e(bv,kUo),e(Z,SUo),e(Z,vv),e(vv,o1e),e(o1e,RUo),e(vv,PUo),e(vv,Nz),e(Nz,BUo),e(vv,IUo),e(Z,NUo),e(Z,Fv),e(Fv,r1e),e(r1e,qUo),e(Fv,jUo),e(Fv,qz),e(qz,DUo),e(Fv,GUo),e(Z,OUo),e(Z,Tv),e(Tv,t1e),e(t1e,VUo),e(Tv,XUo),e(Tv,jz),e(jz,zUo),e(Tv,WUo),e(Z,QUo),e(Z,Mv),e(Mv,a1e),e(a1e,HUo),e(Mv,UUo),e(Mv,Dz),e(Dz,JUo),e(Mv,YUo),e(Z,KUo),e(Z,Ev),e(Ev,n1e),e(n1e,ZUo),e(Ev,eJo),e(Ev,Gz),e(Gz,oJo),e(Ev,rJo),e(Z,tJo),e(Z,Cv),e(Cv,s1e),e(s1e,aJo),e(Cv,nJo),e(Cv,Oz),e(Oz,sJo),e(Cv,lJo),e(Z,iJo),e(Z,wv),e(wv,l1e),e(l1e,dJo),e(wv,cJo),e(wv,Vz),e(Vz,fJo),e(wv,mJo),e(Z,gJo),e(Z,Av),e(Av,i1e),e(i1e,hJo),e(Av,pJo),e(Av,Xz),e(Xz,_Jo),e(Av,uJo),e(Z,bJo),e(Z,Lv),e(Lv,d1e),e(d1e,vJo),e(Lv,FJo),e(Lv,zz),e(zz,TJo),e(Lv,MJo),e(Z,EJo),e(Z,yv),e(yv,c1e),e(c1e,CJo),e(yv,wJo),e(yv,Wz),e(Wz,AJo),e(yv,LJo),e(to,yJo),e(to,xv),e(xv,xJo),e(xv,f1e),e(f1e,$Jo),e(xv,kJo),e(xv,m1e),e(m1e,SJo),e(to,RJo),M($v,to,null),b(f,_ze,u),b(f,cd,u),e(cd,kv),e(kv,g1e),M(M8,g1e,null),e(cd,PJo),e(cd,h1e),e(h1e,BJo),b(f,uze,u),b(f,qo,u),M(E8,qo,null),e(qo,IJo),e(qo,fd),e(fd,NJo),e(fd,Qz),e(Qz,qJo),e(fd,jJo),e(fd,Hz),e(Hz,DJo),e(fd,GJo),e(qo,OJo),e(qo,C8),e(C8,VJo),e(C8,p1e),e(p1e,XJo),e(C8,zJo),e(qo,WJo),e(qo,pt),M(w8,pt,null),e(pt,QJo),e(pt,_1e),e(_1e,HJo),e(pt,UJo),e(pt,md),e(md,JJo),e(md,u1e),e(u1e,YJo),e(md,KJo),e(md,Uz),e(Uz,ZJo),e(md,eYo),e(pt,oYo),M(Sv,pt,null),e(qo,rYo),e(qo,ao),M(A8,ao,null),e(ao,tYo),e(ao,b1e),e(b1e,aYo),e(ao,nYo),e(ao,Va),e(Va,sYo),e(Va,v1e),e(v1e,lYo),e(Va,iYo),e(Va,F1e),e(F1e,dYo),e(Va,cYo),e(Va,T1e),e(T1e,fYo),e(Va,mYo),e(ao,gYo),e(ao,jo),e(jo,Rv),e(Rv,M1e),e(M1e,hYo),e(Rv,pYo),e(Rv,Jz),e(Jz,_Yo),e(Rv,uYo),e(jo,bYo),e(jo,Pv),e(Pv,E1e),e(E1e,vYo),e(Pv,FYo),e(Pv,Yz),e(Yz,TYo),e(Pv,MYo),e(jo,EYo),e(jo,Bv),e(Bv,C1e),e(C1e,CYo),e(Bv,wYo),e(Bv,Kz),e(Kz,AYo),e(Bv,LYo),e(jo,yYo),e(jo,Iv),e(Iv,w1e),e(w1e,xYo),e(Iv,$Yo),e(Iv,Zz),e(Zz,kYo),e(Iv,SYo),e(jo,RYo),e(jo,Nv),e(Nv,A1e),e(A1e,PYo),e(Nv,BYo),e(Nv,eW),e(eW,IYo),e(Nv,NYo),e(jo,qYo),e(jo,qv),e(qv,L1e),e(L1e,jYo),e(qv,DYo),e(qv,oW),e(oW,GYo),e(qv,OYo),e(ao,VYo),e(ao,jv),e(jv,XYo),e(jv,y1e),e(y1e,zYo),e(jv,WYo),e(jv,x1e),e(x1e,QYo),e(ao,HYo),M(Dv,ao,null),b(f,bze,u),b(f,gd,u),e(gd,Gv),e(Gv,$1e),M(L8,$1e,null),e(gd,UYo),e(gd,k1e),e(k1e,JYo),b(f,vze,u),b(f,Do,u),M(y8,Do,null),e(Do,YYo),e(Do,hd),e(hd,KYo),e(hd,rW),e(rW,ZYo),e(hd,eKo),e(hd,tW),e(tW,oKo),e(hd,rKo),e(Do,tKo),e(Do,x8),e(x8,aKo),e(x8,S1e),e(S1e,nKo),e(x8,sKo),e(Do,lKo),e(Do,_t),M($8,_t,null),e(_t,iKo),e(_t,R1e),e(R1e,dKo),e(_t,cKo),e(_t,pd),e(pd,fKo),e(pd,P1e),e(P1e,mKo),e(pd,gKo),e(pd,aW),e(aW,hKo),e(pd,pKo),e(_t,_Ko),M(Ov,_t,null),e(Do,uKo),e(Do,no),M(k8,no,null),e(no,bKo),e(no,B1e),e(B1e,vKo),e(no,FKo),e(no,Xa),e(Xa,TKo),e(Xa,I1e),e(I1e,MKo),e(Xa,EKo),e(Xa,N1e),e(N1e,CKo),e(Xa,wKo),e(Xa,q1e),e(q1e,AKo),e(Xa,LKo),e(no,yKo),e(no,U),e(U,Vv),e(Vv,j1e),e(j1e,xKo),e(Vv,$Ko),e(Vv,nW),e(nW,kKo),e(Vv,SKo),e(U,RKo),e(U,Xv),e(Xv,D1e),e(D1e,PKo),e(Xv,BKo),e(Xv,sW),e(sW,IKo),e(Xv,NKo),e(U,qKo),e(U,zv),e(zv,G1e),e(G1e,jKo),e(zv,DKo),e(zv,lW),e(lW,GKo),e(zv,OKo),e(U,VKo),e(U,Wv),e(Wv,O1e),e(O1e,XKo),e(Wv,zKo),e(Wv,iW),e(iW,WKo),e(Wv,QKo),e(U,HKo),e(U,Qv),e(Qv,V1e),e(V1e,UKo),e(Qv,JKo),e(Qv,dW),e(dW,YKo),e(Qv,KKo),e(U,ZKo),e(U,Hv),e(Hv,X1e),e(X1e,eZo),e(Hv,oZo),e(Hv,cW),e(cW,rZo),e(Hv,tZo),e(U,aZo),e(U,Uv),e(Uv,z1e),e(z1e,nZo),e(Uv,sZo),e(Uv,fW),e(fW,lZo),e(Uv,iZo),e(U,dZo),e(U,Jv),e(Jv,W1e),e(W1e,cZo),e(Jv,fZo),e(Jv,mW),e(mW,mZo),e(Jv,gZo),e(U,hZo),e(U,Yv),e(Yv,Q1e),e(Q1e,pZo),e(Yv,_Zo),e(Yv,gW),e(gW,uZo),e(Yv,bZo),e(U,vZo),e(U,Kv),e(Kv,H1e),e(H1e,FZo),e(Kv,TZo),e(Kv,hW),e(hW,MZo),e(Kv,EZo),e(U,CZo),e(U,Zv),e(Zv,U1e),e(U1e,wZo),e(Zv,AZo),e(Zv,pW),e(pW,LZo),e(Zv,yZo),e(U,xZo),e(U,e0),e(e0,J1e),e(J1e,$Zo),e(e0,kZo),e(e0,_W),e(_W,SZo),e(e0,RZo),e(U,PZo),e(U,o0),e(o0,Y1e),e(Y1e,BZo),e(o0,IZo),e(o0,uW),e(uW,NZo),e(o0,qZo),e(U,jZo),e(U,r0),e(r0,K1e),e(K1e,DZo),e(r0,GZo),e(r0,bW),e(bW,OZo),e(r0,VZo),e(U,XZo),e(U,t0),e(t0,Z1e),e(Z1e,zZo),e(t0,WZo),e(t0,vW),e(vW,QZo),e(t0,HZo),e(U,UZo),e(U,a0),e(a0,e4e),e(e4e,JZo),e(a0,YZo),e(a0,FW),e(FW,KZo),e(a0,ZZo),e(U,eer),e(U,n0),e(n0,o4e),e(o4e,oer),e(n0,rer),e(n0,TW),e(TW,ter),e(n0,aer),e(U,ner),e(U,s0),e(s0,r4e),e(r4e,ser),e(s0,ler),e(s0,MW),e(MW,ier),e(s0,der),e(U,cer),e(U,l0),e(l0,t4e),e(t4e,fer),e(l0,mer),e(l0,EW),e(EW,ger),e(l0,her),e(U,per),e(U,i0),e(i0,a4e),e(a4e,_er),e(i0,uer),e(i0,CW),e(CW,ber),e(i0,ver),e(U,Fer),e(U,d0),e(d0,n4e),e(n4e,Ter),e(d0,Mer),e(d0,wW),e(wW,Eer),e(d0,Cer),e(U,wer),e(U,c0),e(c0,s4e),e(s4e,Aer),e(c0,Ler),e(c0,AW),e(AW,yer),e(c0,xer),e(U,$er),e(U,f0),e(f0,l4e),e(l4e,ker),e(f0,Ser),e(f0,LW),e(LW,Rer),e(f0,Per),e(U,Ber),e(U,m0),e(m0,i4e),e(i4e,Ier),e(m0,Ner),e(m0,yW),e(yW,qer),e(m0,jer),e(U,Der),e(U,g0),e(g0,d4e),e(d4e,Ger),e(g0,Oer),e(g0,xW),e(xW,Ver),e(g0,Xer),e(U,zer),e(U,h0),e(h0,c4e),e(c4e,Wer),e(h0,Qer),e(h0,$W),e($W,Her),e(h0,Uer),e(U,Jer),e(U,p0),e(p0,f4e),e(f4e,Yer),e(p0,Ker),e(p0,kW),e(kW,Zer),e(p0,eor),e(U,oor),e(U,_0),e(_0,m4e),e(m4e,ror),e(_0,tor),e(_0,SW),e(SW,aor),e(_0,nor),e(U,sor),e(U,u0),e(u0,g4e),e(g4e,lor),e(u0,ior),e(u0,RW),e(RW,dor),e(u0,cor),e(U,mor),e(U,b0),e(b0,h4e),e(h4e,gor),e(b0,hor),e(b0,PW),e(PW,por),e(b0,_or),e(U,uor),e(U,v0),e(v0,p4e),e(p4e,bor),e(v0,vor),e(v0,BW),e(BW,For),e(v0,Tor),e(U,Mor),e(U,F0),e(F0,_4e),e(_4e,Eor),e(F0,Cor),e(F0,IW),e(IW,wor),e(F0,Aor),e(U,Lor),e(U,T0),e(T0,u4e),e(u4e,yor),e(T0,xor),e(T0,NW),e(NW,$or),e(T0,kor),e(U,Sor),e(U,M0),e(M0,b4e),e(b4e,Ror),e(M0,Por),e(M0,qW),e(qW,Bor),e(M0,Ior),e(U,Nor),e(U,E0),e(E0,v4e),e(v4e,qor),e(E0,jor),e(E0,jW),e(jW,Dor),e(E0,Gor),e(U,Oor),e(U,C0),e(C0,F4e),e(F4e,Vor),e(C0,Xor),e(C0,DW),e(DW,zor),e(C0,Wor),e(no,Qor),e(no,w0),e(w0,Hor),e(w0,T4e),e(T4e,Uor),e(w0,Jor),e(w0,M4e),e(M4e,Yor),e(no,Kor),M(A0,no,null),b(f,Fze,u),b(f,_d,u),e(_d,L0),e(L0,E4e),M(S8,E4e,null),e(_d,Zor),e(_d,C4e),e(C4e,err),b(f,Tze,u),b(f,Go,u),M(R8,Go,null),e(Go,orr),e(Go,ud),e(ud,rrr),e(ud,GW),e(GW,trr),e(ud,arr),e(ud,OW),e(OW,nrr),e(ud,srr),e(Go,lrr),e(Go,P8),e(P8,irr),e(P8,w4e),e(w4e,drr),e(P8,crr),e(Go,frr),e(Go,ut),M(B8,ut,null),e(ut,mrr),e(ut,A4e),e(A4e,grr),e(ut,hrr),e(ut,bd),e(bd,prr),e(bd,L4e),e(L4e,_rr),e(bd,urr),e(bd,VW),e(VW,brr),e(bd,vrr),e(ut,Frr),M(y0,ut,null),e(Go,Trr),e(Go,so),M(I8,so,null),e(so,Mrr),e(so,y4e),e(y4e,Err),e(so,Crr),e(so,za),e(za,wrr),e(za,x4e),e(x4e,Arr),e(za,Lrr),e(za,$4e),e($4e,yrr),e(za,xrr),e(za,k4e),e(k4e,$rr),e(za,krr),e(so,Srr),e(so,V),e(V,x0),e(x0,S4e),e(S4e,Rrr),e(x0,Prr),e(x0,XW),e(XW,Brr),e(x0,Irr),e(V,Nrr),e(V,$0),e($0,R4e),e(R4e,qrr),e($0,jrr),e($0,zW),e(zW,Drr),e($0,Grr),e(V,Orr),e(V,k0),e(k0,P4e),e(P4e,Vrr),e(k0,Xrr),e(k0,WW),e(WW,zrr),e(k0,Wrr),e(V,Qrr),e(V,S0),e(S0,B4e),e(B4e,Hrr),e(S0,Urr),e(S0,QW),e(QW,Jrr),e(S0,Yrr),e(V,Krr),e(V,R0),e(R0,I4e),e(I4e,Zrr),e(R0,etr),e(R0,HW),e(HW,otr),e(R0,rtr),e(V,ttr),e(V,P0),e(P0,N4e),e(N4e,atr),e(P0,ntr),e(P0,UW),e(UW,str),e(P0,ltr),e(V,itr),e(V,B0),e(B0,q4e),e(q4e,dtr),e(B0,ctr),e(B0,JW),e(JW,ftr),e(B0,mtr),e(V,gtr),e(V,I0),e(I0,j4e),e(j4e,htr),e(I0,ptr),e(I0,YW),e(YW,_tr),e(I0,utr),e(V,btr),e(V,N0),e(N0,D4e),e(D4e,vtr),e(N0,Ftr),e(N0,KW),e(KW,Ttr),e(N0,Mtr),e(V,Etr),e(V,q0),e(q0,G4e),e(G4e,Ctr),e(q0,wtr),e(q0,ZW),e(ZW,Atr),e(q0,Ltr),e(V,ytr),e(V,j0),e(j0,O4e),e(O4e,xtr),e(j0,$tr),e(j0,eQ),e(eQ,ktr),e(j0,Str),e(V,Rtr),e(V,D0),e(D0,V4e),e(V4e,Ptr),e(D0,Btr),e(D0,oQ),e(oQ,Itr),e(D0,Ntr),e(V,qtr),e(V,G0),e(G0,X4e),e(X4e,jtr),e(G0,Dtr),e(G0,rQ),e(rQ,Gtr),e(G0,Otr),e(V,Vtr),e(V,O0),e(O0,z4e),e(z4e,Xtr),e(O0,ztr),e(O0,tQ),e(tQ,Wtr),e(O0,Qtr),e(V,Htr),e(V,V0),e(V0,W4e),e(W4e,Utr),e(V0,Jtr),e(V0,aQ),e(aQ,Ytr),e(V0,Ktr),e(V,Ztr),e(V,X0),e(X0,Q4e),e(Q4e,ear),e(X0,oar),e(X0,nQ),e(nQ,rar),e(X0,tar),e(V,aar),e(V,z0),e(z0,H4e),e(H4e,nar),e(z0,sar),e(z0,sQ),e(sQ,lar),e(z0,iar),e(V,dar),e(V,W0),e(W0,U4e),e(U4e,car),e(W0,far),e(W0,lQ),e(lQ,mar),e(W0,gar),e(V,har),e(V,Q0),e(Q0,J4e),e(J4e,par),e(Q0,_ar),e(Q0,iQ),e(iQ,uar),e(Q0,bar),e(V,Far),e(V,H0),e(H0,Y4e),e(Y4e,Tar),e(H0,Mar),e(H0,dQ),e(dQ,Ear),e(H0,Car),e(V,war),e(V,U0),e(U0,K4e),e(K4e,Aar),e(U0,Lar),e(U0,cQ),e(cQ,yar),e(U0,xar),e(V,$ar),e(V,J0),e(J0,Z4e),e(Z4e,kar),e(J0,Sar),e(J0,fQ),e(fQ,Rar),e(J0,Par),e(V,Bar),e(V,Y0),e(Y0,e2e),e(e2e,Iar),e(Y0,Nar),e(Y0,mQ),e(mQ,qar),e(Y0,jar),e(V,Dar),e(V,K0),e(K0,o2e),e(o2e,Gar),e(K0,Oar),e(K0,gQ),e(gQ,Var),e(K0,Xar),e(V,zar),e(V,Z0),e(Z0,r2e),e(r2e,War),e(Z0,Qar),e(Z0,hQ),e(hQ,Har),e(Z0,Uar),e(V,Jar),e(V,eF),e(eF,t2e),e(t2e,Yar),e(eF,Kar),e(eF,pQ),e(pQ,Zar),e(eF,enr),e(V,onr),e(V,oF),e(oF,a2e),e(a2e,rnr),e(oF,tnr),e(oF,_Q),e(_Q,anr),e(oF,nnr),e(V,snr),e(V,rF),e(rF,n2e),e(n2e,lnr),e(rF,inr),e(rF,uQ),e(uQ,dnr),e(rF,cnr),e(V,fnr),e(V,tF),e(tF,s2e),e(s2e,mnr),e(tF,gnr),e(tF,bQ),e(bQ,hnr),e(tF,pnr),e(V,_nr),e(V,aF),e(aF,l2e),e(l2e,unr),e(aF,bnr),e(aF,vQ),e(vQ,vnr),e(aF,Fnr),e(V,Tnr),e(V,nF),e(nF,i2e),e(i2e,Mnr),e(nF,Enr),e(nF,FQ),e(FQ,Cnr),e(nF,wnr),e(V,Anr),e(V,sF),e(sF,d2e),e(d2e,Lnr),e(sF,ynr),e(sF,TQ),e(TQ,xnr),e(sF,$nr),e(V,knr),e(V,lF),e(lF,c2e),e(c2e,Snr),e(lF,Rnr),e(lF,MQ),e(MQ,Pnr),e(lF,Bnr),e(V,Inr),e(V,iF),e(iF,f2e),e(f2e,Nnr),e(iF,qnr),e(iF,EQ),e(EQ,jnr),e(iF,Dnr),e(V,Gnr),e(V,dF),e(dF,m2e),e(m2e,Onr),e(dF,Vnr),e(dF,CQ),e(CQ,Xnr),e(dF,znr),e(V,Wnr),e(V,cF),e(cF,g2e),e(g2e,Qnr),e(cF,Hnr),e(cF,wQ),e(wQ,Unr),e(cF,Jnr),e(V,Ynr),e(V,fF),e(fF,h2e),e(h2e,Knr),e(fF,Znr),e(fF,AQ),e(AQ,esr),e(fF,osr),e(V,rsr),e(V,mF),e(mF,p2e),e(p2e,tsr),e(mF,asr),e(mF,LQ),e(LQ,nsr),e(mF,ssr),e(V,lsr),e(V,gF),e(gF,_2e),e(_2e,isr),e(gF,dsr),e(gF,yQ),e(yQ,csr),e(gF,fsr),e(V,msr),e(V,hF),e(hF,u2e),e(u2e,gsr),e(hF,hsr),e(hF,xQ),e(xQ,psr),e(hF,_sr),e(V,usr),e(V,pF),e(pF,b2e),e(b2e,bsr),e(pF,vsr),e(pF,$Q),e($Q,Fsr),e(pF,Tsr),e(V,Msr),e(V,_F),e(_F,v2e),e(v2e,Esr),e(_F,Csr),e(_F,kQ),e(kQ,wsr),e(_F,Asr),e(so,Lsr),e(so,uF),e(uF,ysr),e(uF,F2e),e(F2e,xsr),e(uF,$sr),e(uF,T2e),e(T2e,ksr),e(so,Ssr),M(bF,so,null),b(f,Mze,u),b(f,vd,u),e(vd,vF),e(vF,M2e),M(N8,M2e,null),e(vd,Rsr),e(vd,E2e),e(E2e,Psr),b(f,Eze,u),b(f,Oo,u),M(q8,Oo,null),e(Oo,Bsr),e(Oo,Fd),e(Fd,Isr),e(Fd,SQ),e(SQ,Nsr),e(Fd,qsr),e(Fd,RQ),e(RQ,jsr),e(Fd,Dsr),e(Oo,Gsr),e(Oo,j8),e(j8,Osr),e(j8,C2e),e(C2e,Vsr),e(j8,Xsr),e(Oo,zsr),e(Oo,bt),M(D8,bt,null),e(bt,Wsr),e(bt,w2e),e(w2e,Qsr),e(bt,Hsr),e(bt,Td),e(Td,Usr),e(Td,A2e),e(A2e,Jsr),e(Td,Ysr),e(Td,PQ),e(PQ,Ksr),e(Td,Zsr),e(bt,elr),M(FF,bt,null),e(Oo,olr),e(Oo,lo),M(G8,lo,null),e(lo,rlr),e(lo,L2e),e(L2e,tlr),e(lo,alr),e(lo,Wa),e(Wa,nlr),e(Wa,y2e),e(y2e,slr),e(Wa,llr),e(Wa,x2e),e(x2e,ilr),e(Wa,dlr),e(Wa,$2e),e($2e,clr),e(Wa,flr),e(lo,mlr),e(lo,k2e),e(k2e,TF),e(TF,S2e),e(S2e,glr),e(TF,hlr),e(TF,BQ),e(BQ,plr),e(TF,_lr),e(lo,ulr),e(lo,MF),e(MF,blr),e(MF,R2e),e(R2e,vlr),e(MF,Flr),e(MF,P2e),e(P2e,Tlr),e(lo,Mlr),M(EF,lo,null),b(f,Cze,u),b(f,Md,u),e(Md,CF),e(CF,B2e),M(O8,B2e,null),e(Md,Elr),e(Md,I2e),e(I2e,Clr),b(f,wze,u),b(f,Vo,u),M(V8,Vo,null),e(Vo,wlr),e(Vo,Ed),e(Ed,Alr),e(Ed,IQ),e(IQ,Llr),e(Ed,ylr),e(Ed,NQ),e(NQ,xlr),e(Ed,$lr),e(Vo,klr),e(Vo,X8),e(X8,Slr),e(X8,N2e),e(N2e,Rlr),e(X8,Plr),e(Vo,Blr),e(Vo,vt),M(z8,vt,null),e(vt,Ilr),e(vt,q2e),e(q2e,Nlr),e(vt,qlr),e(vt,Cd),e(Cd,jlr),e(Cd,j2e),e(j2e,Dlr),e(Cd,Glr),e(Cd,qQ),e(qQ,Olr),e(Cd,Vlr),e(vt,Xlr),M(wF,vt,null),e(Vo,zlr),e(Vo,io),M(W8,io,null),e(io,Wlr),e(io,D2e),e(D2e,Qlr),e(io,Hlr),e(io,Qa),e(Qa,Ulr),e(Qa,G2e),e(G2e,Jlr),e(Qa,Ylr),e(Qa,O2e),e(O2e,Klr),e(Qa,Zlr),e(Qa,V2e),e(V2e,eir),e(Qa,oir),e(io,rir),e(io,ve),e(ve,AF),e(AF,X2e),e(X2e,tir),e(AF,air),e(AF,jQ),e(jQ,nir),e(AF,sir),e(ve,lir),e(ve,LF),e(LF,z2e),e(z2e,iir),e(LF,dir),e(LF,DQ),e(DQ,cir),e(LF,fir),e(ve,mir),e(ve,yF),e(yF,W2e),e(W2e,gir),e(yF,hir),e(yF,GQ),e(GQ,pir),e(yF,_ir),e(ve,uir),e(ve,xF),e(xF,Q2e),e(Q2e,bir),e(xF,vir),e(xF,OQ),e(OQ,Fir),e(xF,Tir),e(ve,Mir),e(ve,Js),e(Js,H2e),e(H2e,Eir),e(Js,Cir),e(Js,VQ),e(VQ,wir),e(Js,Air),e(Js,XQ),e(XQ,Lir),e(Js,yir),e(ve,xir),e(ve,$F),e($F,U2e),e(U2e,$ir),e($F,kir),e($F,zQ),e(zQ,Sir),e($F,Rir),e(ve,Pir),e(ve,Ys),e(Ys,J2e),e(J2e,Bir),e(Ys,Iir),e(Ys,WQ),e(WQ,Nir),e(Ys,qir),e(Ys,QQ),e(QQ,jir),e(Ys,Dir),e(ve,Gir),e(ve,kF),e(kF,Y2e),e(Y2e,Oir),e(kF,Vir),e(kF,HQ),e(HQ,Xir),e(kF,zir),e(ve,Wir),e(ve,Ft),e(Ft,K2e),e(K2e,Qir),e(Ft,Hir),e(Ft,UQ),e(UQ,Uir),e(Ft,Jir),e(Ft,JQ),e(JQ,Yir),e(Ft,Kir),e(Ft,YQ),e(YQ,Zir),e(Ft,edr),e(ve,odr),e(ve,SF),e(SF,Z2e),e(Z2e,rdr),e(SF,tdr),e(SF,KQ),e(KQ,adr),e(SF,ndr),e(ve,sdr),e(ve,RF),e(RF,ebe),e(ebe,ldr),e(RF,idr),e(RF,ZQ),e(ZQ,ddr),e(RF,cdr),e(ve,fdr),e(ve,PF),e(PF,obe),e(obe,mdr),e(PF,gdr),e(PF,eH),e(eH,hdr),e(PF,pdr),e(ve,_dr),e(ve,BF),e(BF,rbe),e(rbe,udr),e(BF,bdr),e(BF,oH),e(oH,vdr),e(BF,Fdr),e(ve,Tdr),e(ve,IF),e(IF,tbe),e(tbe,Mdr),e(IF,Edr),e(IF,rH),e(rH,Cdr),e(IF,wdr),e(ve,Adr),e(ve,NF),e(NF,abe),e(abe,Ldr),e(NF,ydr),e(NF,tH),e(tH,xdr),e(NF,$dr),e(ve,kdr),e(ve,qF),e(qF,nbe),e(nbe,Sdr),e(qF,Rdr),e(qF,aH),e(aH,Pdr),e(qF,Bdr),e(io,Idr),e(io,jF),e(jF,Ndr),e(jF,sbe),e(sbe,qdr),e(jF,jdr),e(jF,lbe),e(lbe,Ddr),e(io,Gdr),M(DF,io,null),b(f,Aze,u),b(f,wd,u),e(wd,GF),e(GF,ibe),M(Q8,ibe,null),e(wd,Odr),e(wd,dbe),e(dbe,Vdr),b(f,Lze,u),b(f,Xo,u),M(H8,Xo,null),e(Xo,Xdr),e(Xo,Ad),e(Ad,zdr),e(Ad,nH),e(nH,Wdr),e(Ad,Qdr),e(Ad,sH),e(sH,Hdr),e(Ad,Udr),e(Xo,Jdr),e(Xo,U8),e(U8,Ydr),e(U8,cbe),e(cbe,Kdr),e(U8,Zdr),e(Xo,ecr),e(Xo,Tt),M(J8,Tt,null),e(Tt,ocr),e(Tt,fbe),e(fbe,rcr),e(Tt,tcr),e(Tt,Ld),e(Ld,acr),e(Ld,mbe),e(mbe,ncr),e(Ld,scr),e(Ld,lH),e(lH,lcr),e(Ld,icr),e(Tt,dcr),M(OF,Tt,null),e(Xo,ccr),e(Xo,co),M(Y8,co,null),e(co,fcr),e(co,gbe),e(gbe,mcr),e(co,gcr),e(co,Ha),e(Ha,hcr),e(Ha,hbe),e(hbe,pcr),e(Ha,_cr),e(Ha,pbe),e(pbe,ucr),e(Ha,bcr),e(Ha,_be),e(_be,vcr),e(Ha,Fcr),e(co,Tcr),e(co,ube),e(ube,VF),e(VF,bbe),e(bbe,Mcr),e(VF,Ecr),e(VF,iH),e(iH,Ccr),e(VF,wcr),e(co,Acr),e(co,XF),e(XF,Lcr),e(XF,vbe),e(vbe,ycr),e(XF,xcr),e(XF,Fbe),e(Fbe,$cr),e(co,kcr),M(zF,co,null),b(f,yze,u),b(f,yd,u),e(yd,WF),e(WF,Tbe),M(K8,Tbe,null),e(yd,Scr),e(yd,Mbe),e(Mbe,Rcr),b(f,xze,u),b(f,zo,u),M(Z8,zo,null),e(zo,Pcr),e(zo,xd),e(xd,Bcr),e(xd,dH),e(dH,Icr),e(xd,Ncr),e(xd,cH),e(cH,qcr),e(xd,jcr),e(zo,Dcr),e(zo,e9),e(e9,Gcr),e(e9,Ebe),e(Ebe,Ocr),e(e9,Vcr),e(zo,Xcr),e(zo,Mt),M(o9,Mt,null),e(Mt,zcr),e(Mt,Cbe),e(Cbe,Wcr),e(Mt,Qcr),e(Mt,$d),e($d,Hcr),e($d,wbe),e(wbe,Ucr),e($d,Jcr),e($d,fH),e(fH,Ycr),e($d,Kcr),e(Mt,Zcr),M(QF,Mt,null),e(zo,efr),e(zo,fo),M(r9,fo,null),e(fo,ofr),e(fo,Abe),e(Abe,rfr),e(fo,tfr),e(fo,Ua),e(Ua,afr),e(Ua,Lbe),e(Lbe,nfr),e(Ua,sfr),e(Ua,ybe),e(ybe,lfr),e(Ua,ifr),e(Ua,xbe),e(xbe,dfr),e(Ua,cfr),e(fo,ffr),e(fo,$be),e($be,HF),e(HF,kbe),e(kbe,mfr),e(HF,gfr),e(HF,mH),e(mH,hfr),e(HF,pfr),e(fo,_fr),e(fo,UF),e(UF,ufr),e(UF,Sbe),e(Sbe,bfr),e(UF,vfr),e(UF,Rbe),e(Rbe,Ffr),e(fo,Tfr),M(JF,fo,null),b(f,$ze,u),b(f,kd,u),e(kd,YF),e(YF,Pbe),M(t9,Pbe,null),e(kd,Mfr),e(kd,Bbe),e(Bbe,Efr),b(f,kze,u),b(f,Wo,u),M(a9,Wo,null),e(Wo,Cfr),e(Wo,Sd),e(Sd,wfr),e(Sd,gH),e(gH,Afr),e(Sd,Lfr),e(Sd,hH),e(hH,yfr),e(Sd,xfr),e(Wo,$fr),e(Wo,n9),e(n9,kfr),e(n9,Ibe),e(Ibe,Sfr),e(n9,Rfr),e(Wo,Pfr),e(Wo,Et),M(s9,Et,null),e(Et,Bfr),e(Et,Nbe),e(Nbe,Ifr),e(Et,Nfr),e(Et,Rd),e(Rd,qfr),e(Rd,qbe),e(qbe,jfr),e(Rd,Dfr),e(Rd,pH),e(pH,Gfr),e(Rd,Ofr),e(Et,Vfr),M(KF,Et,null),e(Wo,Xfr),e(Wo,mo),M(l9,mo,null),e(mo,zfr),e(mo,jbe),e(jbe,Wfr),e(mo,Qfr),e(mo,Ja),e(Ja,Hfr),e(Ja,Dbe),e(Dbe,Ufr),e(Ja,Jfr),e(Ja,Gbe),e(Gbe,Yfr),e(Ja,Kfr),e(Ja,Obe),e(Obe,Zfr),e(Ja,emr),e(mo,omr),e(mo,Pe),e(Pe,ZF),e(ZF,Vbe),e(Vbe,rmr),e(ZF,tmr),e(ZF,_H),e(_H,amr),e(ZF,nmr),e(Pe,smr),e(Pe,e6),e(e6,Xbe),e(Xbe,lmr),e(e6,imr),e(e6,uH),e(uH,dmr),e(e6,cmr),e(Pe,fmr),e(Pe,o6),e(o6,zbe),e(zbe,mmr),e(o6,gmr),e(o6,bH),e(bH,hmr),e(o6,pmr),e(Pe,_mr),e(Pe,r6),e(r6,Wbe),e(Wbe,umr),e(r6,bmr),e(r6,vH),e(vH,vmr),e(r6,Fmr),e(Pe,Tmr),e(Pe,t6),e(t6,Qbe),e(Qbe,Mmr),e(t6,Emr),e(t6,FH),e(FH,Cmr),e(t6,wmr),e(Pe,Amr),e(Pe,a6),e(a6,Hbe),e(Hbe,Lmr),e(a6,ymr),e(a6,TH),e(TH,xmr),e(a6,$mr),e(Pe,kmr),e(Pe,n6),e(n6,Ube),e(Ube,Smr),e(n6,Rmr),e(n6,MH),e(MH,Pmr),e(n6,Bmr),e(Pe,Imr),e(Pe,s6),e(s6,Jbe),e(Jbe,Nmr),e(s6,qmr),e(s6,EH),e(EH,jmr),e(s6,Dmr),e(Pe,Gmr),e(Pe,l6),e(l6,Ybe),e(Ybe,Omr),e(l6,Vmr),e(l6,CH),e(CH,Xmr),e(l6,zmr),e(mo,Wmr),e(mo,i6),e(i6,Qmr),e(i6,Kbe),e(Kbe,Hmr),e(i6,Umr),e(i6,Zbe),e(Zbe,Jmr),e(mo,Ymr),M(d6,mo,null),b(f,Sze,u),b(f,Pd,u),e(Pd,c6),e(c6,eve),M(i9,eve,null),e(Pd,Kmr),e(Pd,ove),e(ove,Zmr),b(f,Rze,u),b(f,Qo,u),M(d9,Qo,null),e(Qo,egr),e(Qo,Bd),e(Bd,ogr),e(Bd,wH),e(wH,rgr),e(Bd,tgr),e(Bd,AH),e(AH,agr),e(Bd,ngr),e(Qo,sgr),e(Qo,c9),e(c9,lgr),e(c9,rve),e(rve,igr),e(c9,dgr),e(Qo,cgr),e(Qo,Ct),M(f9,Ct,null),e(Ct,fgr),e(Ct,tve),e(tve,mgr),e(Ct,ggr),e(Ct,Id),e(Id,hgr),e(Id,ave),e(ave,pgr),e(Id,_gr),e(Id,LH),e(LH,ugr),e(Id,bgr),e(Ct,vgr),M(f6,Ct,null),e(Qo,Fgr),e(Qo,go),M(m9,go,null),e(go,Tgr),e(go,nve),e(nve,Mgr),e(go,Egr),e(go,Ya),e(Ya,Cgr),e(Ya,sve),e(sve,wgr),e(Ya,Agr),e(Ya,lve),e(lve,Lgr),e(Ya,ygr),e(Ya,ive),e(ive,xgr),e(Ya,$gr),e(go,kgr),e(go,rt),e(rt,m6),e(m6,dve),e(dve,Sgr),e(m6,Rgr),e(m6,yH),e(yH,Pgr),e(m6,Bgr),e(rt,Igr),e(rt,g6),e(g6,cve),e(cve,Ngr),e(g6,qgr),e(g6,xH),e(xH,jgr),e(g6,Dgr),e(rt,Ggr),e(rt,h6),e(h6,fve),e(fve,Ogr),e(h6,Vgr),e(h6,$H),e($H,Xgr),e(h6,zgr),e(rt,Wgr),e(rt,p6),e(p6,mve),e(mve,Qgr),e(p6,Hgr),e(p6,kH),e(kH,Ugr),e(p6,Jgr),e(rt,Ygr),e(rt,_6),e(_6,gve),e(gve,Kgr),e(_6,Zgr),e(_6,SH),e(SH,ehr),e(_6,ohr),e(go,rhr),e(go,u6),e(u6,thr),e(u6,hve),e(hve,ahr),e(u6,nhr),e(u6,pve),e(pve,shr),e(go,lhr),M(b6,go,null),b(f,Pze,u),b(f,Nd,u),e(Nd,v6),e(v6,_ve),M(g9,_ve,null),e(Nd,ihr),e(Nd,uve),e(uve,dhr),b(f,Bze,u),b(f,Ho,u),M(h9,Ho,null),e(Ho,chr),e(Ho,qd),e(qd,fhr),e(qd,RH),e(RH,mhr),e(qd,ghr),e(qd,PH),e(PH,hhr),e(qd,phr),e(Ho,_hr),e(Ho,p9),e(p9,uhr),e(p9,bve),e(bve,bhr),e(p9,vhr),e(Ho,Fhr),e(Ho,wt),M(_9,wt,null),e(wt,Thr),e(wt,vve),e(vve,Mhr),e(wt,Ehr),e(wt,jd),e(jd,Chr),e(jd,Fve),e(Fve,whr),e(jd,Ahr),e(jd,BH),e(BH,Lhr),e(jd,yhr),e(wt,xhr),M(F6,wt,null),e(Ho,$hr),e(Ho,ho),M(u9,ho,null),e(ho,khr),e(ho,Tve),e(Tve,Shr),e(ho,Rhr),e(ho,Ka),e(Ka,Phr),e(Ka,Mve),e(Mve,Bhr),e(Ka,Ihr),e(Ka,Eve),e(Eve,Nhr),e(Ka,qhr),e(Ka,Cve),e(Cve,jhr),e(Ka,Dhr),e(ho,Ghr),e(ho,Le),e(Le,T6),e(T6,wve),e(wve,Ohr),e(T6,Vhr),e(T6,IH),e(IH,Xhr),e(T6,zhr),e(Le,Whr),e(Le,M6),e(M6,Ave),e(Ave,Qhr),e(M6,Hhr),e(M6,NH),e(NH,Uhr),e(M6,Jhr),e(Le,Yhr),e(Le,E6),e(E6,Lve),e(Lve,Khr),e(E6,Zhr),e(E6,qH),e(qH,epr),e(E6,opr),e(Le,rpr),e(Le,C6),e(C6,yve),e(yve,tpr),e(C6,apr),e(C6,jH),e(jH,npr),e(C6,spr),e(Le,lpr),e(Le,w6),e(w6,xve),e(xve,ipr),e(w6,dpr),e(w6,DH),e(DH,cpr),e(w6,fpr),e(Le,mpr),e(Le,A6),e(A6,$ve),e($ve,gpr),e(A6,hpr),e(A6,GH),e(GH,ppr),e(A6,_pr),e(Le,upr),e(Le,L6),e(L6,kve),e(kve,bpr),e(L6,vpr),e(L6,OH),e(OH,Fpr),e(L6,Tpr),e(Le,Mpr),e(Le,y6),e(y6,Sve),e(Sve,Epr),e(y6,Cpr),e(y6,VH),e(VH,wpr),e(y6,Apr),e(Le,Lpr),e(Le,x6),e(x6,Rve),e(Rve,ypr),e(x6,xpr),e(x6,XH),e(XH,$pr),e(x6,kpr),e(Le,Spr),e(Le,$6),e($6,Pve),e(Pve,Rpr),e($6,Ppr),e($6,zH),e(zH,Bpr),e($6,Ipr),e(ho,Npr),e(ho,k6),e(k6,qpr),e(k6,Bve),e(Bve,jpr),e(k6,Dpr),e(k6,Ive),e(Ive,Gpr),e(ho,Opr),M(S6,ho,null),b(f,Ize,u),b(f,Dd,u),e(Dd,R6),e(R6,Nve),M(b9,Nve,null),e(Dd,Vpr),e(Dd,qve),e(qve,Xpr),b(f,Nze,u),b(f,Uo,u),M(v9,Uo,null),e(Uo,zpr),e(Uo,Gd),e(Gd,Wpr),e(Gd,WH),e(WH,Qpr),e(Gd,Hpr),e(Gd,QH),e(QH,Upr),e(Gd,Jpr),e(Uo,Ypr),e(Uo,F9),e(F9,Kpr),e(F9,jve),e(jve,Zpr),e(F9,e_r),e(Uo,o_r),e(Uo,At),M(T9,At,null),e(At,r_r),e(At,Dve),e(Dve,t_r),e(At,a_r),e(At,Od),e(Od,n_r),e(Od,Gve),e(Gve,s_r),e(Od,l_r),e(Od,HH),e(HH,i_r),e(Od,d_r),e(At,c_r),M(P6,At,null),e(Uo,f_r),e(Uo,po),M(M9,po,null),e(po,m_r),e(po,Ove),e(Ove,g_r),e(po,h_r),e(po,Za),e(Za,p_r),e(Za,Vve),e(Vve,__r),e(Za,u_r),e(Za,Xve),e(Xve,b_r),e(Za,v_r),e(Za,zve),e(zve,F_r),e(Za,T_r),e(po,M_r),e(po,E9),e(E9,B6),e(B6,Wve),e(Wve,E_r),e(B6,C_r),e(B6,UH),e(UH,w_r),e(B6,A_r),e(E9,L_r),e(E9,I6),e(I6,Qve),e(Qve,y_r),e(I6,x_r),e(I6,JH),e(JH,$_r),e(I6,k_r),e(po,S_r),e(po,N6),e(N6,R_r),e(N6,Hve),e(Hve,P_r),e(N6,B_r),e(N6,Uve),e(Uve,I_r),e(po,N_r),M(q6,po,null),b(f,qze,u),b(f,Vd,u),e(Vd,j6),e(j6,Jve),M(C9,Jve,null),e(Vd,q_r),e(Vd,Yve),e(Yve,j_r),b(f,jze,u),b(f,Jo,u),M(w9,Jo,null),e(Jo,D_r),e(Jo,Xd),e(Xd,G_r),e(Xd,YH),e(YH,O_r),e(Xd,V_r),e(Xd,KH),e(KH,X_r),e(Xd,z_r),e(Jo,W_r),e(Jo,A9),e(A9,Q_r),e(A9,Kve),e(Kve,H_r),e(A9,U_r),e(Jo,J_r),e(Jo,Lt),M(L9,Lt,null),e(Lt,Y_r),e(Lt,Zve),e(Zve,K_r),e(Lt,Z_r),e(Lt,zd),e(zd,eur),e(zd,e0e),e(e0e,our),e(zd,rur),e(zd,ZH),e(ZH,tur),e(zd,aur),e(Lt,nur),M(D6,Lt,null),e(Jo,sur),e(Jo,_o),M(y9,_o,null),e(_o,lur),e(_o,o0e),e(o0e,iur),e(_o,dur),e(_o,en),e(en,cur),e(en,r0e),e(r0e,fur),e(en,mur),e(en,t0e),e(t0e,gur),e(en,hur),e(en,a0e),e(a0e,pur),e(en,_ur),e(_o,uur),e(_o,tt),e(tt,G6),e(G6,n0e),e(n0e,bur),e(G6,vur),e(G6,eU),e(eU,Fur),e(G6,Tur),e(tt,Mur),e(tt,O6),e(O6,s0e),e(s0e,Eur),e(O6,Cur),e(O6,oU),e(oU,wur),e(O6,Aur),e(tt,Lur),e(tt,V6),e(V6,l0e),e(l0e,yur),e(V6,xur),e(V6,rU),e(rU,$ur),e(V6,kur),e(tt,Sur),e(tt,X6),e(X6,i0e),e(i0e,Rur),e(X6,Pur),e(X6,tU),e(tU,Bur),e(X6,Iur),e(tt,Nur),e(tt,z6),e(z6,d0e),e(d0e,qur),e(z6,jur),e(z6,aU),e(aU,Dur),e(z6,Gur),e(_o,Our),e(_o,W6),e(W6,Vur),e(W6,c0e),e(c0e,Xur),e(W6,zur),e(W6,f0e),e(f0e,Wur),e(_o,Qur),M(Q6,_o,null),b(f,Dze,u),b(f,Wd,u),e(Wd,H6),e(H6,m0e),M(x9,m0e,null),e(Wd,Hur),e(Wd,g0e),e(g0e,Uur),b(f,Gze,u),b(f,Yo,u),M($9,Yo,null),e(Yo,Jur),e(Yo,Qd),e(Qd,Yur),e(Qd,nU),e(nU,Kur),e(Qd,Zur),e(Qd,sU),e(sU,e1r),e(Qd,o1r),e(Yo,r1r),e(Yo,k9),e(k9,t1r),e(k9,h0e),e(h0e,a1r),e(k9,n1r),e(Yo,s1r),e(Yo,yt),M(S9,yt,null),e(yt,l1r),e(yt,p0e),e(p0e,i1r),e(yt,d1r),e(yt,Hd),e(Hd,c1r),e(Hd,_0e),e(_0e,f1r),e(Hd,m1r),e(Hd,lU),e(lU,g1r),e(Hd,h1r),e(yt,p1r),M(U6,yt,null),e(Yo,_1r),e(Yo,uo),M(R9,uo,null),e(uo,u1r),e(uo,u0e),e(u0e,b1r),e(uo,v1r),e(uo,on),e(on,F1r),e(on,b0e),e(b0e,T1r),e(on,M1r),e(on,v0e),e(v0e,E1r),e(on,C1r),e(on,F0e),e(F0e,w1r),e(on,A1r),e(uo,L1r),e(uo,Ud),e(Ud,J6),e(J6,T0e),e(T0e,y1r),e(J6,x1r),e(J6,iU),e(iU,$1r),e(J6,k1r),e(Ud,S1r),e(Ud,Y6),e(Y6,M0e),e(M0e,R1r),e(Y6,P1r),e(Y6,dU),e(dU,B1r),e(Y6,I1r),e(Ud,N1r),e(Ud,K6),e(K6,E0e),e(E0e,q1r),e(K6,j1r),e(K6,cU),e(cU,D1r),e(K6,G1r),e(uo,O1r),e(uo,Z6),e(Z6,V1r),e(Z6,C0e),e(C0e,X1r),e(Z6,z1r),e(Z6,w0e),e(w0e,W1r),e(uo,Q1r),M(eT,uo,null),b(f,Oze,u),b(f,Jd,u),e(Jd,oT),e(oT,A0e),M(P9,A0e,null),e(Jd,H1r),e(Jd,L0e),e(L0e,U1r),b(f,Vze,u),b(f,Ko,u),M(B9,Ko,null),e(Ko,J1r),e(Ko,Yd),e(Yd,Y1r),e(Yd,fU),e(fU,K1r),e(Yd,Z1r),e(Yd,mU),e(mU,e4r),e(Yd,o4r),e(Ko,r4r),e(Ko,I9),e(I9,t4r),e(I9,y0e),e(y0e,a4r),e(I9,n4r),e(Ko,s4r),e(Ko,xt),M(N9,xt,null),e(xt,l4r),e(xt,x0e),e(x0e,i4r),e(xt,d4r),e(xt,Kd),e(Kd,c4r),e(Kd,$0e),e($0e,f4r),e(Kd,m4r),e(Kd,gU),e(gU,g4r),e(Kd,h4r),e(xt,p4r),M(rT,xt,null),e(Ko,_4r),e(Ko,bo),M(q9,bo,null),e(bo,u4r),e(bo,k0e),e(k0e,b4r),e(bo,v4r),e(bo,rn),e(rn,F4r),e(rn,S0e),e(S0e,T4r),e(rn,M4r),e(rn,R0e),e(R0e,E4r),e(rn,C4r),e(rn,P0e),e(P0e,w4r),e(rn,A4r),e(bo,L4r),e(bo,j9),e(j9,tT),e(tT,B0e),e(B0e,y4r),e(tT,x4r),e(tT,hU),e(hU,$4r),e(tT,k4r),e(j9,S4r),e(j9,aT),e(aT,I0e),e(I0e,R4r),e(aT,P4r),e(aT,pU),e(pU,B4r),e(aT,I4r),e(bo,N4r),e(bo,nT),e(nT,q4r),e(nT,N0e),e(N0e,j4r),e(nT,D4r),e(nT,q0e),e(q0e,G4r),e(bo,O4r),M(sT,bo,null),b(f,Xze,u),b(f,Zd,u),e(Zd,lT),e(lT,j0e),M(D9,j0e,null),e(Zd,V4r),e(Zd,D0e),e(D0e,X4r),b(f,zze,u),b(f,Zo,u),M(G9,Zo,null),e(Zo,z4r),e(Zo,ec),e(ec,W4r),e(ec,_U),e(_U,Q4r),e(ec,H4r),e(ec,uU),e(uU,U4r),e(ec,J4r),e(Zo,Y4r),e(Zo,O9),e(O9,K4r),e(O9,G0e),e(G0e,Z4r),e(O9,e2r),e(Zo,o2r),e(Zo,$t),M(V9,$t,null),e($t,r2r),e($t,O0e),e(O0e,t2r),e($t,a2r),e($t,oc),e(oc,n2r),e(oc,V0e),e(V0e,s2r),e(oc,l2r),e(oc,bU),e(bU,i2r),e(oc,d2r),e($t,c2r),M(iT,$t,null),e(Zo,f2r),e(Zo,vo),M(X9,vo,null),e(vo,m2r),e(vo,X0e),e(X0e,g2r),e(vo,h2r),e(vo,tn),e(tn,p2r),e(tn,z0e),e(z0e,_2r),e(tn,u2r),e(tn,W0e),e(W0e,b2r),e(tn,v2r),e(tn,Q0e),e(Q0e,F2r),e(tn,T2r),e(vo,M2r),e(vo,H0e),e(H0e,dT),e(dT,U0e),e(U0e,E2r),e(dT,C2r),e(dT,vU),e(vU,w2r),e(dT,A2r),e(vo,L2r),e(vo,cT),e(cT,y2r),e(cT,J0e),e(J0e,x2r),e(cT,$2r),e(cT,Y0e),e(Y0e,k2r),e(vo,S2r),M(fT,vo,null),b(f,Wze,u),b(f,rc,u),e(rc,mT),e(mT,K0e),M(z9,K0e,null),e(rc,R2r),e(rc,Z0e),e(Z0e,P2r),b(f,Qze,u),b(f,er,u),M(W9,er,null),e(er,B2r),e(er,tc),e(tc,I2r),e(tc,FU),e(FU,N2r),e(tc,q2r),e(tc,TU),e(TU,j2r),e(tc,D2r),e(er,G2r),e(er,Q9),e(Q9,O2r),e(Q9,eFe),e(eFe,V2r),e(Q9,X2r),e(er,z2r),e(er,kt),M(H9,kt,null),e(kt,W2r),e(kt,oFe),e(oFe,Q2r),e(kt,H2r),e(kt,ac),e(ac,U2r),e(ac,rFe),e(rFe,J2r),e(ac,Y2r),e(ac,MU),e(MU,K2r),e(ac,Z2r),e(kt,ebr),M(gT,kt,null),e(er,obr),e(er,Fo),M(U9,Fo,null),e(Fo,rbr),e(Fo,tFe),e(tFe,tbr),e(Fo,abr),e(Fo,an),e(an,nbr),e(an,aFe),e(aFe,sbr),e(an,lbr),e(an,nFe),e(nFe,ibr),e(an,dbr),e(an,sFe),e(sFe,cbr),e(an,fbr),e(Fo,mbr),e(Fo,at),e(at,hT),e(hT,lFe),e(lFe,gbr),e(hT,hbr),e(hT,EU),e(EU,pbr),e(hT,_br),e(at,ubr),e(at,pT),e(pT,iFe),e(iFe,bbr),e(pT,vbr),e(pT,CU),e(CU,Fbr),e(pT,Tbr),e(at,Mbr),e(at,_T),e(_T,dFe),e(dFe,Ebr),e(_T,Cbr),e(_T,wU),e(wU,wbr),e(_T,Abr),e(at,Lbr),e(at,uT),e(uT,cFe),e(cFe,ybr),e(uT,xbr),e(uT,AU),e(AU,$br),e(uT,kbr),e(at,Sbr),e(at,bT),e(bT,fFe),e(fFe,Rbr),e(bT,Pbr),e(bT,LU),e(LU,Bbr),e(bT,Ibr),e(Fo,Nbr),e(Fo,vT),e(vT,qbr),e(vT,mFe),e(mFe,jbr),e(vT,Dbr),e(vT,gFe),e(gFe,Gbr),e(Fo,Obr),M(FT,Fo,null),b(f,Hze,u),b(f,nc,u),e(nc,TT),e(TT,hFe),M(J9,hFe,null),e(nc,Vbr),e(nc,pFe),e(pFe,Xbr),b(f,Uze,u),b(f,or,u),M(Y9,or,null),e(or,zbr),e(or,sc),e(sc,Wbr),e(sc,yU),e(yU,Qbr),e(sc,Hbr),e(sc,xU),e(xU,Ubr),e(sc,Jbr),e(or,Ybr),e(or,K9),e(K9,Kbr),e(K9,_Fe),e(_Fe,Zbr),e(K9,evr),e(or,ovr),e(or,St),M(Z9,St,null),e(St,rvr),e(St,uFe),e(uFe,tvr),e(St,avr),e(St,lc),e(lc,nvr),e(lc,bFe),e(bFe,svr),e(lc,lvr),e(lc,$U),e($U,ivr),e(lc,dvr),e(St,cvr),M(MT,St,null),e(or,fvr),e(or,To),M(ex,To,null),e(To,mvr),e(To,vFe),e(vFe,gvr),e(To,hvr),e(To,nn),e(nn,pvr),e(nn,FFe),e(FFe,_vr),e(nn,uvr),e(nn,TFe),e(TFe,bvr),e(nn,vvr),e(nn,MFe),e(MFe,Fvr),e(nn,Tvr),e(To,Mvr),e(To,EFe),e(EFe,ET),e(ET,CFe),e(CFe,Evr),e(ET,Cvr),e(ET,kU),e(kU,wvr),e(ET,Avr),e(To,Lvr),e(To,CT),e(CT,yvr),e(CT,wFe),e(wFe,xvr),e(CT,$vr),e(CT,AFe),e(AFe,kvr),e(To,Svr),M(wT,To,null),b(f,Jze,u),b(f,ic,u),e(ic,AT),e(AT,LFe),M(ox,LFe,null),e(ic,Rvr),e(ic,yFe),e(yFe,Pvr),b(f,Yze,u),b(f,rr,u),M(rx,rr,null),e(rr,Bvr),e(rr,dc),e(dc,Ivr),e(dc,SU),e(SU,Nvr),e(dc,qvr),e(dc,RU),e(RU,jvr),e(dc,Dvr),e(rr,Gvr),e(rr,tx),e(tx,Ovr),e(tx,xFe),e(xFe,Vvr),e(tx,Xvr),e(rr,zvr),e(rr,Rt),M(ax,Rt,null),e(Rt,Wvr),e(Rt,$Fe),e($Fe,Qvr),e(Rt,Hvr),e(Rt,cc),e(cc,Uvr),e(cc,kFe),e(kFe,Jvr),e(cc,Yvr),e(cc,PU),e(PU,Kvr),e(cc,Zvr),e(Rt,e0r),M(LT,Rt,null),e(rr,o0r),e(rr,$r),M(nx,$r,null),e($r,r0r),e($r,SFe),e(SFe,t0r),e($r,a0r),e($r,sn),e(sn,n0r),e(sn,RFe),e(RFe,s0r),e(sn,l0r),e(sn,PFe),e(PFe,i0r),e(sn,d0r),e(sn,BFe),e(BFe,c0r),e(sn,f0r),e($r,m0r),e($r,I),e(I,yT),e(yT,IFe),e(IFe,g0r),e(yT,h0r),e(yT,BU),e(BU,p0r),e(yT,_0r),e(I,u0r),e(I,xT),e(xT,NFe),e(NFe,b0r),e(xT,v0r),e(xT,IU),e(IU,F0r),e(xT,T0r),e(I,M0r),e(I,$T),e($T,qFe),e(qFe,E0r),e($T,C0r),e($T,NU),e(NU,w0r),e($T,A0r),e(I,L0r),e(I,kT),e(kT,jFe),e(jFe,y0r),e(kT,x0r),e(kT,qU),e(qU,$0r),e(kT,k0r),e(I,S0r),e(I,ST),e(ST,DFe),e(DFe,R0r),e(ST,P0r),e(ST,jU),e(jU,B0r),e(ST,I0r),e(I,N0r),e(I,RT),e(RT,GFe),e(GFe,q0r),e(RT,j0r),e(RT,DU),e(DU,D0r),e(RT,G0r),e(I,O0r),e(I,PT),e(PT,OFe),e(OFe,V0r),e(PT,X0r),e(PT,GU),e(GU,z0r),e(PT,W0r),e(I,Q0r),e(I,BT),e(BT,VFe),e(VFe,H0r),e(BT,U0r),e(BT,OU),e(OU,J0r),e(BT,Y0r),e(I,K0r),e(I,IT),e(IT,XFe),e(XFe,Z0r),e(IT,eFr),e(IT,VU),e(VU,oFr),e(IT,rFr),e(I,tFr),e(I,NT),e(NT,zFe),e(zFe,aFr),e(NT,nFr),e(NT,XU),e(XU,sFr),e(NT,lFr),e(I,iFr),e(I,qT),e(qT,WFe),e(WFe,dFr),e(qT,cFr),e(qT,zU),e(zU,fFr),e(qT,mFr),e(I,gFr),e(I,jT),e(jT,QFe),e(QFe,hFr),e(jT,pFr),e(jT,WU),e(WU,_Fr),e(jT,uFr),e(I,bFr),e(I,DT),e(DT,HFe),e(HFe,vFr),e(DT,FFr),e(DT,QU),e(QU,TFr),e(DT,MFr),e(I,EFr),e(I,GT),e(GT,UFe),e(UFe,CFr),e(GT,wFr),e(GT,HU),e(HU,AFr),e(GT,LFr),e(I,yFr),e(I,OT),e(OT,JFe),e(JFe,xFr),e(OT,$Fr),e(OT,UU),e(UU,kFr),e(OT,SFr),e(I,RFr),e(I,VT),e(VT,YFe),e(YFe,PFr),e(VT,BFr),e(VT,JU),e(JU,IFr),e(VT,NFr),e(I,qFr),e(I,XT),e(XT,KFe),e(KFe,jFr),e(XT,DFr),e(XT,YU),e(YU,GFr),e(XT,OFr),e(I,VFr),e(I,zT),e(zT,ZFe),e(ZFe,XFr),e(zT,zFr),e(zT,KU),e(KU,WFr),e(zT,QFr),e(I,HFr),e(I,Ks),e(Ks,e6e),e(e6e,UFr),e(Ks,JFr),e(Ks,ZU),e(ZU,YFr),e(Ks,KFr),e(Ks,eJ),e(eJ,ZFr),e(Ks,e6r),e(I,o6r),e(I,WT),e(WT,o6e),e(o6e,r6r),e(WT,t6r),e(WT,oJ),e(oJ,a6r),e(WT,n6r),e(I,s6r),e(I,QT),e(QT,r6e),e(r6e,l6r),e(QT,i6r),e(QT,rJ),e(rJ,d6r),e(QT,c6r),e(I,f6r),e(I,HT),e(HT,t6e),e(t6e,m6r),e(HT,g6r),e(HT,tJ),e(tJ,h6r),e(HT,p6r),e(I,_6r),e(I,UT),e(UT,a6e),e(a6e,u6r),e(UT,b6r),e(UT,aJ),e(aJ,v6r),e(UT,F6r),e(I,T6r),e(I,JT),e(JT,n6e),e(n6e,M6r),e(JT,E6r),e(JT,nJ),e(nJ,C6r),e(JT,w6r),e(I,A6r),e(I,YT),e(YT,s6e),e(s6e,L6r),e(YT,y6r),e(YT,sJ),e(sJ,x6r),e(YT,$6r),e(I,k6r),e(I,KT),e(KT,l6e),e(l6e,S6r),e(KT,R6r),e(KT,lJ),e(lJ,P6r),e(KT,B6r),e(I,I6r),e(I,ZT),e(ZT,i6e),e(i6e,N6r),e(ZT,q6r),e(ZT,iJ),e(iJ,j6r),e(ZT,D6r),e(I,G6r),e(I,e7),e(e7,d6e),e(d6e,O6r),e(e7,V6r),e(e7,dJ),e(dJ,X6r),e(e7,z6r),e(I,W6r),e(I,o7),e(o7,c6e),e(c6e,Q6r),e(o7,H6r),e(o7,cJ),e(cJ,U6r),e(o7,J6r),e(I,Y6r),e(I,r7),e(r7,f6e),e(f6e,K6r),e(r7,Z6r),e(r7,fJ),e(fJ,eTr),e(r7,oTr),e(I,rTr),e(I,t7),e(t7,m6e),e(m6e,tTr),e(t7,aTr),e(t7,mJ),e(mJ,nTr),e(t7,sTr),e(I,lTr),e(I,a7),e(a7,g6e),e(g6e,iTr),e(a7,dTr),e(a7,gJ),e(gJ,cTr),e(a7,fTr),e(I,mTr),e(I,n7),e(n7,h6e),e(h6e,gTr),e(n7,hTr),e(n7,hJ),e(hJ,pTr),e(n7,_Tr),e(I,uTr),e(I,s7),e(s7,p6e),e(p6e,bTr),e(s7,vTr),e(s7,pJ),e(pJ,FTr),e(s7,TTr),e(I,MTr),e(I,l7),e(l7,_6e),e(_6e,ETr),e(l7,CTr),e(l7,_J),e(_J,wTr),e(l7,ATr),e(I,LTr),e(I,i7),e(i7,u6e),e(u6e,yTr),e(i7,xTr),e(i7,uJ),e(uJ,$Tr),e(i7,kTr),e(I,STr),e(I,d7),e(d7,b6e),e(b6e,RTr),e(d7,PTr),e(d7,bJ),e(bJ,BTr),e(d7,ITr),e(I,NTr),e(I,c7),e(c7,v6e),e(v6e,qTr),e(c7,jTr),e(c7,vJ),e(vJ,DTr),e(c7,GTr),e(I,OTr),e(I,f7),e(f7,F6e),e(F6e,VTr),e(f7,XTr),e(f7,FJ),e(FJ,zTr),e(f7,WTr),e(I,QTr),e(I,m7),e(m7,T6e),e(T6e,HTr),e(m7,UTr),e(m7,TJ),e(TJ,JTr),e(m7,YTr),e(I,KTr),e(I,g7),e(g7,M6e),e(M6e,ZTr),e(g7,e7r),e(g7,MJ),e(MJ,o7r),e(g7,r7r),e(I,t7r),e(I,h7),e(h7,E6e),e(E6e,a7r),e(h7,n7r),e(h7,EJ),e(EJ,s7r),e(h7,l7r),e(I,i7r),e(I,p7),e(p7,C6e),e(C6e,d7r),e(p7,c7r),e(p7,CJ),e(CJ,f7r),e(p7,m7r),e(I,g7r),e(I,_7),e(_7,w6e),e(w6e,h7r),e(_7,p7r),e(_7,wJ),e(wJ,_7r),e(_7,u7r),e(I,b7r),e(I,u7),e(u7,A6e),e(A6e,v7r),e(u7,F7r),e(u7,AJ),e(AJ,T7r),e(u7,M7r),e(I,E7r),e(I,b7),e(b7,L6e),e(L6e,C7r),e(b7,w7r),e(b7,LJ),e(LJ,A7r),e(b7,L7r),e(I,y7r),e(I,v7),e(v7,y6e),e(y6e,x7r),e(v7,$7r),e(v7,yJ),e(yJ,k7r),e(v7,S7r),e(I,R7r),e(I,F7),e(F7,x6e),e(x6e,P7r),e(F7,B7r),e(F7,xJ),e(xJ,I7r),e(F7,N7r),e(I,q7r),e(I,T7),e(T7,$6e),e($6e,j7r),e(T7,D7r),e(T7,$J),e($J,G7r),e(T7,O7r),e(I,V7r),e(I,M7),e(M7,k6e),e(k6e,X7r),e(M7,z7r),e(M7,kJ),e(kJ,W7r),e(M7,Q7r),e(I,H7r),e(I,E7),e(E7,S6e),e(S6e,U7r),e(E7,J7r),e(E7,SJ),e(SJ,Y7r),e(E7,K7r),e($r,Z7r),M(C7,$r,null),b(f,Kze,u),b(f,fc,u),e(fc,w7),e(w7,R6e),M(sx,R6e,null),e(fc,eMr),e(fc,P6e),e(P6e,oMr),b(f,Zze,u),b(f,tr,u),M(lx,tr,null),e(tr,rMr),e(tr,mc),e(mc,tMr),e(mc,RJ),e(RJ,aMr),e(mc,nMr),e(mc,PJ),e(PJ,sMr),e(mc,lMr),e(tr,iMr),e(tr,ix),e(ix,dMr),e(ix,B6e),e(B6e,cMr),e(ix,fMr),e(tr,mMr),e(tr,Pt),M(dx,Pt,null),e(Pt,gMr),e(Pt,I6e),e(I6e,hMr),e(Pt,pMr),e(Pt,gc),e(gc,_Mr),e(gc,N6e),e(N6e,uMr),e(gc,bMr),e(gc,BJ),e(BJ,vMr),e(gc,FMr),e(Pt,TMr),M(A7,Pt,null),e(tr,MMr),e(tr,kr),M(cx,kr,null),e(kr,EMr),e(kr,q6e),e(q6e,CMr),e(kr,wMr),e(kr,ln),e(ln,AMr),e(ln,j6e),e(j6e,LMr),e(ln,yMr),e(ln,D6e),e(D6e,xMr),e(ln,$Mr),e(ln,G6e),e(G6e,kMr),e(ln,SMr),e(kr,RMr),e(kr,se),e(se,L7),e(L7,O6e),e(O6e,PMr),e(L7,BMr),e(L7,IJ),e(IJ,IMr),e(L7,NMr),e(se,qMr),e(se,y7),e(y7,V6e),e(V6e,jMr),e(y7,DMr),e(y7,NJ),e(NJ,GMr),e(y7,OMr),e(se,VMr),e(se,x7),e(x7,X6e),e(X6e,XMr),e(x7,zMr),e(x7,qJ),e(qJ,WMr),e(x7,QMr),e(se,HMr),e(se,$7),e($7,z6e),e(z6e,UMr),e($7,JMr),e($7,jJ),e(jJ,YMr),e($7,KMr),e(se,ZMr),e(se,k7),e(k7,W6e),e(W6e,eEr),e(k7,oEr),e(k7,DJ),e(DJ,rEr),e(k7,tEr),e(se,aEr),e(se,S7),e(S7,Q6e),e(Q6e,nEr),e(S7,sEr),e(S7,GJ),e(GJ,lEr),e(S7,iEr),e(se,dEr),e(se,R7),e(R7,H6e),e(H6e,cEr),e(R7,fEr),e(R7,OJ),e(OJ,mEr),e(R7,gEr),e(se,hEr),e(se,P7),e(P7,U6e),e(U6e,pEr),e(P7,_Er),e(P7,VJ),e(VJ,uEr),e(P7,bEr),e(se,vEr),e(se,B7),e(B7,J6e),e(J6e,FEr),e(B7,TEr),e(B7,XJ),e(XJ,MEr),e(B7,EEr),e(se,CEr),e(se,I7),e(I7,Y6e),e(Y6e,wEr),e(I7,AEr),e(I7,zJ),e(zJ,LEr),e(I7,yEr),e(se,xEr),e(se,N7),e(N7,K6e),e(K6e,$Er),e(N7,kEr),e(N7,WJ),e(WJ,SEr),e(N7,REr),e(se,PEr),e(se,q7),e(q7,Z6e),e(Z6e,BEr),e(q7,IEr),e(q7,QJ),e(QJ,NEr),e(q7,qEr),e(se,jEr),e(se,j7),e(j7,eTe),e(eTe,DEr),e(j7,GEr),e(j7,HJ),e(HJ,OEr),e(j7,VEr),e(se,XEr),e(se,D7),e(D7,oTe),e(oTe,zEr),e(D7,WEr),e(D7,UJ),e(UJ,QEr),e(D7,HEr),e(se,UEr),e(se,G7),e(G7,rTe),e(rTe,JEr),e(G7,YEr),e(G7,JJ),e(JJ,KEr),e(G7,ZEr),e(se,eCr),e(se,O7),e(O7,tTe),e(tTe,oCr),e(O7,rCr),e(O7,YJ),e(YJ,tCr),e(O7,aCr),e(se,nCr),e(se,V7),e(V7,aTe),e(aTe,sCr),e(V7,lCr),e(V7,KJ),e(KJ,iCr),e(V7,dCr),e(se,cCr),e(se,X7),e(X7,nTe),e(nTe,fCr),e(X7,mCr),e(X7,ZJ),e(ZJ,gCr),e(X7,hCr),e(se,pCr),e(se,z7),e(z7,sTe),e(sTe,_Cr),e(z7,uCr),e(z7,eY),e(eY,bCr),e(z7,vCr),e(se,FCr),e(se,W7),e(W7,lTe),e(lTe,TCr),e(W7,MCr),e(W7,oY),e(oY,ECr),e(W7,CCr),e(se,wCr),e(se,Q7),e(Q7,iTe),e(iTe,ACr),e(Q7,LCr),e(Q7,rY),e(rY,yCr),e(Q7,xCr),e(se,$Cr),e(se,H7),e(H7,dTe),e(dTe,kCr),e(H7,SCr),e(H7,tY),e(tY,RCr),e(H7,PCr),e(se,BCr),e(se,U7),e(U7,cTe),e(cTe,ICr),e(U7,NCr),e(U7,aY),e(aY,qCr),e(U7,jCr),e(kr,DCr),M(J7,kr,null),b(f,eWe,u),b(f,hc,u),e(hc,Y7),e(Y7,fTe),M(fx,fTe,null),e(hc,GCr),e(hc,mTe),e(mTe,OCr),b(f,oWe,u),b(f,ar,u),M(mx,ar,null),e(ar,VCr),e(ar,pc),e(pc,XCr),e(pc,nY),e(nY,zCr),e(pc,WCr),e(pc,sY),e(sY,QCr),e(pc,HCr),e(ar,UCr),e(ar,gx),e(gx,JCr),e(gx,gTe),e(gTe,YCr),e(gx,KCr),e(ar,ZCr),e(ar,Bt),M(hx,Bt,null),e(Bt,e5r),e(Bt,hTe),e(hTe,o5r),e(Bt,r5r),e(Bt,_c),e(_c,t5r),e(_c,pTe),e(pTe,a5r),e(_c,n5r),e(_c,lY),e(lY,s5r),e(_c,l5r),e(Bt,i5r),M(K7,Bt,null),e(ar,d5r),e(ar,Sr),M(px,Sr,null),e(Sr,c5r),e(Sr,_Te),e(_Te,f5r),e(Sr,m5r),e(Sr,dn),e(dn,g5r),e(dn,uTe),e(uTe,h5r),e(dn,p5r),e(dn,bTe),e(bTe,_5r),e(dn,u5r),e(dn,vTe),e(vTe,b5r),e(dn,v5r),e(Sr,F5r),e(Sr,Me),e(Me,Z7),e(Z7,FTe),e(FTe,T5r),e(Z7,M5r),e(Z7,iY),e(iY,E5r),e(Z7,C5r),e(Me,w5r),e(Me,eM),e(eM,TTe),e(TTe,A5r),e(eM,L5r),e(eM,dY),e(dY,y5r),e(eM,x5r),e(Me,$5r),e(Me,oM),e(oM,MTe),e(MTe,k5r),e(oM,S5r),e(oM,cY),e(cY,R5r),e(oM,P5r),e(Me,B5r),e(Me,rM),e(rM,ETe),e(ETe,I5r),e(rM,N5r),e(rM,fY),e(fY,q5r),e(rM,j5r),e(Me,D5r),e(Me,tM),e(tM,CTe),e(CTe,G5r),e(tM,O5r),e(tM,mY),e(mY,V5r),e(tM,X5r),e(Me,z5r),e(Me,aM),e(aM,wTe),e(wTe,W5r),e(aM,Q5r),e(aM,gY),e(gY,H5r),e(aM,U5r),e(Me,J5r),e(Me,nM),e(nM,ATe),e(ATe,Y5r),e(nM,K5r),e(nM,hY),e(hY,Z5r),e(nM,e3r),e(Me,o3r),e(Me,sM),e(sM,LTe),e(LTe,r3r),e(sM,t3r),e(sM,pY),e(pY,a3r),e(sM,n3r),e(Me,s3r),e(Me,lM),e(lM,yTe),e(yTe,l3r),e(lM,i3r),e(lM,_Y),e(_Y,d3r),e(lM,c3r),e(Me,f3r),e(Me,iM),e(iM,xTe),e(xTe,m3r),e(iM,g3r),e(iM,uY),e(uY,h3r),e(iM,p3r),e(Me,_3r),e(Me,dM),e(dM,$Te),e($Te,u3r),e(dM,b3r),e(dM,bY),e(bY,v3r),e(dM,F3r),e(Me,T3r),e(Me,cM),e(cM,kTe),e(kTe,M3r),e(cM,E3r),e(cM,vY),e(vY,C3r),e(cM,w3r),e(Me,A3r),e(Me,fM),e(fM,STe),e(STe,L3r),e(fM,y3r),e(fM,FY),e(FY,x3r),e(fM,$3r),e(Sr,k3r),M(mM,Sr,null),b(f,rWe,u),b(f,uc,u),e(uc,gM),e(gM,RTe),M(_x,RTe,null),e(uc,S3r),e(uc,PTe),e(PTe,R3r),b(f,tWe,u),b(f,nr,u),M(ux,nr,null),e(nr,P3r),e(nr,bc),e(bc,B3r),e(bc,TY),e(TY,I3r),e(bc,N3r),e(bc,MY),e(MY,q3r),e(bc,j3r),e(nr,D3r),e(nr,bx),e(bx,G3r),e(bx,BTe),e(BTe,O3r),e(bx,V3r),e(nr,X3r),e(nr,It),M(vx,It,null),e(It,z3r),e(It,ITe),e(ITe,W3r),e(It,Q3r),e(It,vc),e(vc,H3r),e(vc,NTe),e(NTe,U3r),e(vc,J3r),e(vc,EY),e(EY,Y3r),e(vc,K3r),e(It,Z3r),M(hM,It,null),e(nr,ewr),e(nr,Rr),M(Fx,Rr,null),e(Rr,owr),e(Rr,qTe),e(qTe,rwr),e(Rr,twr),e(Rr,cn),e(cn,awr),e(cn,jTe),e(jTe,nwr),e(cn,swr),e(cn,DTe),e(DTe,lwr),e(cn,iwr),e(cn,GTe),e(GTe,dwr),e(cn,cwr),e(Rr,fwr),e(Rr,Ve),e(Ve,pM),e(pM,OTe),e(OTe,mwr),e(pM,gwr),e(pM,CY),e(CY,hwr),e(pM,pwr),e(Ve,_wr),e(Ve,_M),e(_M,VTe),e(VTe,uwr),e(_M,bwr),e(_M,wY),e(wY,vwr),e(_M,Fwr),e(Ve,Twr),e(Ve,Zs),e(Zs,XTe),e(XTe,Mwr),e(Zs,Ewr),e(Zs,AY),e(AY,Cwr),e(Zs,wwr),e(Zs,LY),e(LY,Awr),e(Zs,Lwr),e(Ve,ywr),e(Ve,uM),e(uM,zTe),e(zTe,xwr),e(uM,$wr),e(uM,yY),e(yY,kwr),e(uM,Swr),e(Ve,Rwr),e(Ve,bM),e(bM,WTe),e(WTe,Pwr),e(bM,Bwr),e(bM,xY),e(xY,Iwr),e(bM,Nwr),e(Ve,qwr),e(Ve,vM),e(vM,QTe),e(QTe,jwr),e(vM,Dwr),e(vM,$Y),e($Y,Gwr),e(vM,Owr),e(Ve,Vwr),e(Ve,FM),e(FM,HTe),e(HTe,Xwr),e(FM,zwr),e(FM,kY),e(kY,Wwr),e(FM,Qwr),e(Ve,Hwr),e(Ve,TM),e(TM,UTe),e(UTe,Uwr),e(TM,Jwr),e(TM,SY),e(SY,Ywr),e(TM,Kwr),e(Rr,Zwr),M(MM,Rr,null),b(f,aWe,u),b(f,Fc,u),e(Fc,EM),e(EM,JTe),M(Tx,JTe,null),e(Fc,eAr),e(Fc,YTe),e(YTe,oAr),b(f,nWe,u),b(f,sr,u),M(Mx,sr,null),e(sr,rAr),e(sr,Tc),e(Tc,tAr),e(Tc,RY),e(RY,aAr),e(Tc,nAr),e(Tc,PY),e(PY,sAr),e(Tc,lAr),e(sr,iAr),e(sr,Ex),e(Ex,dAr),e(Ex,KTe),e(KTe,cAr),e(Ex,fAr),e(sr,mAr),e(sr,Nt),M(Cx,Nt,null),e(Nt,gAr),e(Nt,ZTe),e(ZTe,hAr),e(Nt,pAr),e(Nt,Mc),e(Mc,_Ar),e(Mc,e7e),e(e7e,uAr),e(Mc,bAr),e(Mc,BY),e(BY,vAr),e(Mc,FAr),e(Nt,TAr),M(CM,Nt,null),e(sr,MAr),e(sr,Pr),M(wx,Pr,null),e(Pr,EAr),e(Pr,o7e),e(o7e,CAr),e(Pr,wAr),e(Pr,fn),e(fn,AAr),e(fn,r7e),e(r7e,LAr),e(fn,yAr),e(fn,t7e),e(t7e,xAr),e(fn,$Ar),e(fn,a7e),e(a7e,kAr),e(fn,SAr),e(Pr,RAr),e(Pr,ie),e(ie,wM),e(wM,n7e),e(n7e,PAr),e(wM,BAr),e(wM,IY),e(IY,IAr),e(wM,NAr),e(ie,qAr),e(ie,AM),e(AM,s7e),e(s7e,jAr),e(AM,DAr),e(AM,NY),e(NY,GAr),e(AM,OAr),e(ie,VAr),e(ie,LM),e(LM,l7e),e(l7e,XAr),e(LM,zAr),e(LM,qY),e(qY,WAr),e(LM,QAr),e(ie,HAr),e(ie,yM),e(yM,i7e),e(i7e,UAr),e(yM,JAr),e(yM,jY),e(jY,YAr),e(yM,KAr),e(ie,ZAr),e(ie,xM),e(xM,d7e),e(d7e,eLr),e(xM,oLr),e(xM,DY),e(DY,rLr),e(xM,tLr),e(ie,aLr),e(ie,$M),e($M,c7e),e(c7e,nLr),e($M,sLr),e($M,GY),e(GY,lLr),e($M,iLr),e(ie,dLr),e(ie,kM),e(kM,f7e),e(f7e,cLr),e(kM,fLr),e(kM,OY),e(OY,mLr),e(kM,gLr),e(ie,hLr),e(ie,SM),e(SM,m7e),e(m7e,pLr),e(SM,_Lr),e(SM,VY),e(VY,uLr),e(SM,bLr),e(ie,vLr),e(ie,RM),e(RM,g7e),e(g7e,FLr),e(RM,TLr),e(RM,XY),e(XY,MLr),e(RM,ELr),e(ie,CLr),e(ie,PM),e(PM,h7e),e(h7e,wLr),e(PM,ALr),e(PM,zY),e(zY,LLr),e(PM,yLr),e(ie,xLr),e(ie,BM),e(BM,p7e),e(p7e,$Lr),e(BM,kLr),e(BM,WY),e(WY,SLr),e(BM,RLr),e(ie,PLr),e(ie,IM),e(IM,_7e),e(_7e,BLr),e(IM,ILr),e(IM,QY),e(QY,NLr),e(IM,qLr),e(ie,jLr),e(ie,NM),e(NM,u7e),e(u7e,DLr),e(NM,GLr),e(NM,HY),e(HY,OLr),e(NM,VLr),e(ie,XLr),e(ie,qM),e(qM,b7e),e(b7e,zLr),e(qM,WLr),e(qM,UY),e(UY,QLr),e(qM,HLr),e(ie,ULr),e(ie,jM),e(jM,v7e),e(v7e,JLr),e(jM,YLr),e(jM,JY),e(JY,KLr),e(jM,ZLr),e(ie,eyr),e(ie,DM),e(DM,F7e),e(F7e,oyr),e(DM,ryr),e(DM,YY),e(YY,tyr),e(DM,ayr),e(ie,nyr),e(ie,GM),e(GM,T7e),e(T7e,syr),e(GM,lyr),e(GM,KY),e(KY,iyr),e(GM,dyr),e(ie,cyr),e(ie,OM),e(OM,M7e),e(M7e,fyr),e(OM,myr),e(OM,ZY),e(ZY,gyr),e(OM,hyr),e(ie,pyr),e(ie,VM),e(VM,E7e),e(E7e,_yr),e(VM,uyr),e(VM,eK),e(eK,byr),e(VM,vyr),e(ie,Fyr),e(ie,XM),e(XM,C7e),e(C7e,Tyr),e(XM,Myr),e(XM,oK),e(oK,Eyr),e(XM,Cyr),e(Pr,wyr),M(zM,Pr,null),b(f,sWe,u),b(f,Ec,u),e(Ec,WM),e(WM,w7e),M(Ax,w7e,null),e(Ec,Ayr),e(Ec,A7e),e(A7e,Lyr),b(f,lWe,u),b(f,lr,u),M(Lx,lr,null),e(lr,yyr),e(lr,Cc),e(Cc,xyr),e(Cc,rK),e(rK,$yr),e(Cc,kyr),e(Cc,tK),e(tK,Syr),e(Cc,Ryr),e(lr,Pyr),e(lr,yx),e(yx,Byr),e(yx,L7e),e(L7e,Iyr),e(yx,Nyr),e(lr,qyr),e(lr,qt),M(xx,qt,null),e(qt,jyr),e(qt,y7e),e(y7e,Dyr),e(qt,Gyr),e(qt,wc),e(wc,Oyr),e(wc,x7e),e(x7e,Vyr),e(wc,Xyr),e(wc,aK),e(aK,zyr),e(wc,Wyr),e(qt,Qyr),M(QM,qt,null),e(lr,Hyr),e(lr,Br),M($x,Br,null),e(Br,Uyr),e(Br,$7e),e($7e,Jyr),e(Br,Yyr),e(Br,mn),e(mn,Kyr),e(mn,k7e),e(k7e,Zyr),e(mn,e8r),e(mn,S7e),e(S7e,o8r),e(mn,r8r),e(mn,R7e),e(R7e,t8r),e(mn,a8r),e(Br,n8r),e(Br,ye),e(ye,HM),e(HM,P7e),e(P7e,s8r),e(HM,l8r),e(HM,nK),e(nK,i8r),e(HM,d8r),e(ye,c8r),e(ye,UM),e(UM,B7e),e(B7e,f8r),e(UM,m8r),e(UM,sK),e(sK,g8r),e(UM,h8r),e(ye,p8r),e(ye,JM),e(JM,I7e),e(I7e,_8r),e(JM,u8r),e(JM,lK),e(lK,b8r),e(JM,v8r),e(ye,F8r),e(ye,YM),e(YM,N7e),e(N7e,T8r),e(YM,M8r),e(YM,iK),e(iK,E8r),e(YM,C8r),e(ye,w8r),e(ye,KM),e(KM,q7e),e(q7e,A8r),e(KM,L8r),e(KM,dK),e(dK,y8r),e(KM,x8r),e(ye,$8r),e(ye,ZM),e(ZM,j7e),e(j7e,k8r),e(ZM,S8r),e(ZM,cK),e(cK,R8r),e(ZM,P8r),e(ye,B8r),e(ye,eE),e(eE,D7e),e(D7e,I8r),e(eE,N8r),e(eE,fK),e(fK,q8r),e(eE,j8r),e(ye,D8r),e(ye,oE),e(oE,G7e),e(G7e,G8r),e(oE,O8r),e(oE,mK),e(mK,V8r),e(oE,X8r),e(ye,z8r),e(ye,rE),e(rE,O7e),e(O7e,W8r),e(rE,Q8r),e(rE,gK),e(gK,H8r),e(rE,U8r),e(ye,J8r),e(ye,tE),e(tE,V7e),e(V7e,Y8r),e(tE,K8r),e(tE,hK),e(hK,Z8r),e(tE,e9r),e(Br,o9r),M(aE,Br,null),b(f,iWe,u),b(f,Ac,u),e(Ac,nE),e(nE,X7e),M(kx,X7e,null),e(Ac,r9r),e(Ac,z7e),e(z7e,t9r),b(f,dWe,u),b(f,ir,u),M(Sx,ir,null),e(ir,a9r),e(ir,Lc),e(Lc,n9r),e(Lc,pK),e(pK,s9r),e(Lc,l9r),e(Lc,_K),e(_K,i9r),e(Lc,d9r),e(ir,c9r),e(ir,Rx),e(Rx,f9r),e(Rx,W7e),e(W7e,m9r),e(Rx,g9r),e(ir,h9r),e(ir,jt),M(Px,jt,null),e(jt,p9r),e(jt,Q7e),e(Q7e,_9r),e(jt,u9r),e(jt,yc),e(yc,b9r),e(yc,H7e),e(H7e,v9r),e(yc,F9r),e(yc,uK),e(uK,T9r),e(yc,M9r),e(jt,E9r),M(sE,jt,null),e(ir,C9r),e(ir,Ir),M(Bx,Ir,null),e(Ir,w9r),e(Ir,U7e),e(U7e,A9r),e(Ir,L9r),e(Ir,gn),e(gn,y9r),e(gn,J7e),e(J7e,x9r),e(gn,$9r),e(gn,Y7e),e(Y7e,k9r),e(gn,S9r),e(gn,K7e),e(K7e,R9r),e(gn,P9r),e(Ir,B9r),e(Ir,te),e(te,lE),e(lE,Z7e),e(Z7e,I9r),e(lE,N9r),e(lE,bK),e(bK,q9r),e(lE,j9r),e(te,D9r),e(te,iE),e(iE,eMe),e(eMe,G9r),e(iE,O9r),e(iE,vK),e(vK,V9r),e(iE,X9r),e(te,z9r),e(te,dE),e(dE,oMe),e(oMe,W9r),e(dE,Q9r),e(dE,FK),e(FK,H9r),e(dE,U9r),e(te,J9r),e(te,cE),e(cE,rMe),e(rMe,Y9r),e(cE,K9r),e(cE,TK),e(TK,Z9r),e(cE,exr),e(te,oxr),e(te,fE),e(fE,tMe),e(tMe,rxr),e(fE,txr),e(fE,MK),e(MK,axr),e(fE,nxr),e(te,sxr),e(te,mE),e(mE,aMe),e(aMe,lxr),e(mE,ixr),e(mE,EK),e(EK,dxr),e(mE,cxr),e(te,fxr),e(te,gE),e(gE,nMe),e(nMe,mxr),e(gE,gxr),e(gE,CK),e(CK,hxr),e(gE,pxr),e(te,_xr),e(te,hE),e(hE,sMe),e(sMe,uxr),e(hE,bxr),e(hE,wK),e(wK,vxr),e(hE,Fxr),e(te,Txr),e(te,pE),e(pE,lMe),e(lMe,Mxr),e(pE,Exr),e(pE,AK),e(AK,Cxr),e(pE,wxr),e(te,Axr),e(te,_E),e(_E,iMe),e(iMe,Lxr),e(_E,yxr),e(_E,LK),e(LK,xxr),e(_E,$xr),e(te,kxr),e(te,uE),e(uE,dMe),e(dMe,Sxr),e(uE,Rxr),e(uE,yK),e(yK,Pxr),e(uE,Bxr),e(te,Ixr),e(te,bE),e(bE,cMe),e(cMe,Nxr),e(bE,qxr),e(bE,xK),e(xK,jxr),e(bE,Dxr),e(te,Gxr),e(te,vE),e(vE,fMe),e(fMe,Oxr),e(vE,Vxr),e(vE,$K),e($K,Xxr),e(vE,zxr),e(te,Wxr),e(te,FE),e(FE,mMe),e(mMe,Qxr),e(FE,Hxr),e(FE,kK),e(kK,Uxr),e(FE,Jxr),e(te,Yxr),e(te,TE),e(TE,gMe),e(gMe,Kxr),e(TE,Zxr),e(TE,SK),e(SK,e$r),e(TE,o$r),e(te,r$r),e(te,ME),e(ME,hMe),e(hMe,t$r),e(ME,a$r),e(ME,RK),e(RK,n$r),e(ME,s$r),e(te,l$r),e(te,EE),e(EE,pMe),e(pMe,i$r),e(EE,d$r),e(EE,PK),e(PK,c$r),e(EE,f$r),e(te,m$r),e(te,CE),e(CE,_Me),e(_Me,g$r),e(CE,h$r),e(CE,BK),e(BK,p$r),e(CE,_$r),e(te,u$r),e(te,wE),e(wE,uMe),e(uMe,b$r),e(wE,v$r),e(wE,IK),e(IK,F$r),e(wE,T$r),e(te,M$r),e(te,AE),e(AE,bMe),e(bMe,E$r),e(AE,C$r),e(AE,NK),e(NK,w$r),e(AE,A$r),e(te,L$r),e(te,LE),e(LE,vMe),e(vMe,y$r),e(LE,x$r),e(LE,qK),e(qK,$$r),e(LE,k$r),e(te,S$r),e(te,yE),e(yE,FMe),e(FMe,R$r),e(yE,P$r),e(yE,jK),e(jK,B$r),e(yE,I$r),e(te,N$r),e(te,xE),e(xE,TMe),e(TMe,q$r),e(xE,j$r),e(xE,DK),e(DK,D$r),e(xE,G$r),e(te,O$r),e(te,$E),e($E,MMe),e(MMe,V$r),e($E,X$r),e($E,GK),e(GK,z$r),e($E,W$r),e(te,Q$r),e(te,kE),e(kE,EMe),e(EMe,H$r),e(kE,U$r),e(kE,OK),e(OK,J$r),e(kE,Y$r),e(te,K$r),e(te,SE),e(SE,CMe),e(CMe,Z$r),e(SE,ekr),e(SE,VK),e(VK,okr),e(SE,rkr),e(Ir,tkr),M(RE,Ir,null),b(f,cWe,u),b(f,xc,u),e(xc,PE),e(PE,wMe),M(Ix,wMe,null),e(xc,akr),e(xc,AMe),e(AMe,nkr),b(f,fWe,u),b(f,dr,u),M(Nx,dr,null),e(dr,skr),e(dr,$c),e($c,lkr),e($c,XK),e(XK,ikr),e($c,dkr),e($c,zK),e(zK,ckr),e($c,fkr),e(dr,mkr),e(dr,qx),e(qx,gkr),e(qx,LMe),e(LMe,hkr),e(qx,pkr),e(dr,_kr),e(dr,Dt),M(jx,Dt,null),e(Dt,ukr),e(Dt,yMe),e(yMe,bkr),e(Dt,vkr),e(Dt,kc),e(kc,Fkr),e(kc,xMe),e(xMe,Tkr),e(kc,Mkr),e(kc,WK),e(WK,Ekr),e(kc,Ckr),e(Dt,wkr),M(BE,Dt,null),e(dr,Akr),e(dr,Nr),M(Dx,Nr,null),e(Nr,Lkr),e(Nr,$Me),e($Me,ykr),e(Nr,xkr),e(Nr,hn),e(hn,$kr),e(hn,kMe),e(kMe,kkr),e(hn,Skr),e(hn,SMe),e(SMe,Rkr),e(hn,Pkr),e(hn,RMe),e(RMe,Bkr),e(hn,Ikr),e(Nr,Nkr),e(Nr,be),e(be,IE),e(IE,PMe),e(PMe,qkr),e(IE,jkr),e(IE,QK),e(QK,Dkr),e(IE,Gkr),e(be,Okr),e(be,NE),e(NE,BMe),e(BMe,Vkr),e(NE,Xkr),e(NE,HK),e(HK,zkr),e(NE,Wkr),e(be,Qkr),e(be,qE),e(qE,IMe),e(IMe,Hkr),e(qE,Ukr),e(qE,UK),e(UK,Jkr),e(qE,Ykr),e(be,Kkr),e(be,jE),e(jE,NMe),e(NMe,Zkr),e(jE,eSr),e(jE,JK),e(JK,oSr),e(jE,rSr),e(be,tSr),e(be,DE),e(DE,qMe),e(qMe,aSr),e(DE,nSr),e(DE,YK),e(YK,sSr),e(DE,lSr),e(be,iSr),e(be,GE),e(GE,jMe),e(jMe,dSr),e(GE,cSr),e(GE,KK),e(KK,fSr),e(GE,mSr),e(be,gSr),e(be,OE),e(OE,DMe),e(DMe,hSr),e(OE,pSr),e(OE,ZK),e(ZK,_Sr),e(OE,uSr),e(be,bSr),e(be,VE),e(VE,GMe),e(GMe,vSr),e(VE,FSr),e(VE,eZ),e(eZ,TSr),e(VE,MSr),e(be,ESr),e(be,XE),e(XE,OMe),e(OMe,CSr),e(XE,wSr),e(XE,oZ),e(oZ,ASr),e(XE,LSr),e(be,ySr),e(be,zE),e(zE,VMe),e(VMe,xSr),e(zE,$Sr),e(zE,rZ),e(rZ,kSr),e(zE,SSr),e(be,RSr),e(be,WE),e(WE,XMe),e(XMe,PSr),e(WE,BSr),e(WE,tZ),e(tZ,ISr),e(WE,NSr),e(be,qSr),e(be,QE),e(QE,zMe),e(zMe,jSr),e(QE,DSr),e(QE,aZ),e(aZ,GSr),e(QE,OSr),e(be,VSr),e(be,HE),e(HE,WMe),e(WMe,XSr),e(HE,zSr),e(HE,nZ),e(nZ,WSr),e(HE,QSr),e(be,HSr),e(be,UE),e(UE,QMe),e(QMe,USr),e(UE,JSr),e(UE,sZ),e(sZ,YSr),e(UE,KSr),e(be,ZSr),e(be,JE),e(JE,HMe),e(HMe,eRr),e(JE,oRr),e(JE,lZ),e(lZ,rRr),e(JE,tRr),e(be,aRr),e(be,YE),e(YE,UMe),e(UMe,nRr),e(YE,sRr),e(YE,iZ),e(iZ,lRr),e(YE,iRr),e(be,dRr),e(be,KE),e(KE,JMe),e(JMe,cRr),e(KE,fRr),e(KE,dZ),e(dZ,mRr),e(KE,gRr),e(Nr,hRr),M(ZE,Nr,null),b(f,mWe,u),b(f,Sc,u),e(Sc,eC),e(eC,YMe),M(Gx,YMe,null),e(Sc,pRr),e(Sc,KMe),e(KMe,_Rr),b(f,gWe,u),b(f,cr,u),M(Ox,cr,null),e(cr,uRr),e(cr,Rc),e(Rc,bRr),e(Rc,cZ),e(cZ,vRr),e(Rc,FRr),e(Rc,fZ),e(fZ,TRr),e(Rc,MRr),e(cr,ERr),e(cr,Vx),e(Vx,CRr),e(Vx,ZMe),e(ZMe,wRr),e(Vx,ARr),e(cr,LRr),e(cr,Gt),M(Xx,Gt,null),e(Gt,yRr),e(Gt,eEe),e(eEe,xRr),e(Gt,$Rr),e(Gt,Pc),e(Pc,kRr),e(Pc,oEe),e(oEe,SRr),e(Pc,RRr),e(Pc,mZ),e(mZ,PRr),e(Pc,BRr),e(Gt,IRr),M(oC,Gt,null),e(cr,NRr),e(cr,qr),M(zx,qr,null),e(qr,qRr),e(qr,rEe),e(rEe,jRr),e(qr,DRr),e(qr,pn),e(pn,GRr),e(pn,tEe),e(tEe,ORr),e(pn,VRr),e(pn,aEe),e(aEe,XRr),e(pn,zRr),e(pn,nEe),e(nEe,WRr),e(pn,QRr),e(qr,HRr),e(qr,Wx),e(Wx,rC),e(rC,sEe),e(sEe,URr),e(rC,JRr),e(rC,gZ),e(gZ,YRr),e(rC,KRr),e(Wx,ZRr),e(Wx,tC),e(tC,lEe),e(lEe,ePr),e(tC,oPr),e(tC,hZ),e(hZ,rPr),e(tC,tPr),e(qr,aPr),M(aC,qr,null),b(f,hWe,u),b(f,Bc,u),e(Bc,nC),e(nC,iEe),M(Qx,iEe,null),e(Bc,nPr),e(Bc,dEe),e(dEe,sPr),b(f,pWe,u),b(f,fr,u),M(Hx,fr,null),e(fr,lPr),e(fr,Ic),e(Ic,iPr),e(Ic,pZ),e(pZ,dPr),e(Ic,cPr),e(Ic,_Z),e(_Z,fPr),e(Ic,mPr),e(fr,gPr),e(fr,Ux),e(Ux,hPr),e(Ux,cEe),e(cEe,pPr),e(Ux,_Pr),e(fr,uPr),e(fr,Ot),M(Jx,Ot,null),e(Ot,bPr),e(Ot,fEe),e(fEe,vPr),e(Ot,FPr),e(Ot,Nc),e(Nc,TPr),e(Nc,mEe),e(mEe,MPr),e(Nc,EPr),e(Nc,uZ),e(uZ,CPr),e(Nc,wPr),e(Ot,APr),M(sC,Ot,null),e(fr,LPr),e(fr,jr),M(Yx,jr,null),e(jr,yPr),e(jr,gEe),e(gEe,xPr),e(jr,$Pr),e(jr,_n),e(_n,kPr),e(_n,hEe),e(hEe,SPr),e(_n,RPr),e(_n,pEe),e(pEe,PPr),e(_n,BPr),e(_n,_Ee),e(_Ee,IPr),e(_n,NPr),e(jr,qPr),e(jr,uEe),e(uEe,lC),e(lC,bEe),e(bEe,jPr),e(lC,DPr),e(lC,bZ),e(bZ,GPr),e(lC,OPr),e(jr,VPr),M(iC,jr,null),b(f,_We,u),b(f,qc,u),e(qc,dC),e(dC,vEe),M(Kx,vEe,null),e(qc,XPr),e(qc,FEe),e(FEe,zPr),b(f,uWe,u),b(f,mr,u),M(Zx,mr,null),e(mr,WPr),e(mr,jc),e(jc,QPr),e(jc,vZ),e(vZ,HPr),e(jc,UPr),e(jc,FZ),e(FZ,JPr),e(jc,YPr),e(mr,KPr),e(mr,e$),e(e$,ZPr),e(e$,TEe),e(TEe,eBr),e(e$,oBr),e(mr,rBr),e(mr,Vt),M(o$,Vt,null),e(Vt,tBr),e(Vt,MEe),e(MEe,aBr),e(Vt,nBr),e(Vt,Dc),e(Dc,sBr),e(Dc,EEe),e(EEe,lBr),e(Dc,iBr),e(Dc,TZ),e(TZ,dBr),e(Dc,cBr),e(Vt,fBr),M(cC,Vt,null),e(mr,mBr),e(mr,Dr),M(r$,Dr,null),e(Dr,gBr),e(Dr,CEe),e(CEe,hBr),e(Dr,pBr),e(Dr,un),e(un,_Br),e(un,wEe),e(wEe,uBr),e(un,bBr),e(un,AEe),e(AEe,vBr),e(un,FBr),e(un,LEe),e(LEe,TBr),e(un,MBr),e(Dr,EBr),e(Dr,de),e(de,fC),e(fC,yEe),e(yEe,CBr),e(fC,wBr),e(fC,MZ),e(MZ,ABr),e(fC,LBr),e(de,yBr),e(de,mC),e(mC,xEe),e(xEe,xBr),e(mC,$Br),e(mC,EZ),e(EZ,kBr),e(mC,SBr),e(de,RBr),e(de,gC),e(gC,$Ee),e($Ee,PBr),e(gC,BBr),e(gC,CZ),e(CZ,IBr),e(gC,NBr),e(de,qBr),e(de,hC),e(hC,kEe),e(kEe,jBr),e(hC,DBr),e(hC,wZ),e(wZ,GBr),e(hC,OBr),e(de,VBr),e(de,pC),e(pC,SEe),e(SEe,XBr),e(pC,zBr),e(pC,AZ),e(AZ,WBr),e(pC,QBr),e(de,HBr),e(de,_C),e(_C,REe),e(REe,UBr),e(_C,JBr),e(_C,LZ),e(LZ,YBr),e(_C,KBr),e(de,ZBr),e(de,uC),e(uC,PEe),e(PEe,eIr),e(uC,oIr),e(uC,yZ),e(yZ,rIr),e(uC,tIr),e(de,aIr),e(de,bC),e(bC,BEe),e(BEe,nIr),e(bC,sIr),e(bC,xZ),e(xZ,lIr),e(bC,iIr),e(de,dIr),e(de,vC),e(vC,IEe),e(IEe,cIr),e(vC,fIr),e(vC,$Z),e($Z,mIr),e(vC,gIr),e(de,hIr),e(de,FC),e(FC,NEe),e(NEe,pIr),e(FC,_Ir),e(FC,kZ),e(kZ,uIr),e(FC,bIr),e(de,vIr),e(de,TC),e(TC,qEe),e(qEe,FIr),e(TC,TIr),e(TC,SZ),e(SZ,MIr),e(TC,EIr),e(de,CIr),e(de,MC),e(MC,jEe),e(jEe,wIr),e(MC,AIr),e(MC,RZ),e(RZ,LIr),e(MC,yIr),e(de,xIr),e(de,EC),e(EC,DEe),e(DEe,$Ir),e(EC,kIr),e(EC,PZ),e(PZ,SIr),e(EC,RIr),e(de,PIr),e(de,CC),e(CC,GEe),e(GEe,BIr),e(CC,IIr),e(CC,BZ),e(BZ,NIr),e(CC,qIr),e(de,jIr),e(de,wC),e(wC,OEe),e(OEe,DIr),e(wC,GIr),e(wC,IZ),e(IZ,OIr),e(wC,VIr),e(de,XIr),e(de,AC),e(AC,VEe),e(VEe,zIr),e(AC,WIr),e(AC,NZ),e(NZ,QIr),e(AC,HIr),e(de,UIr),e(de,LC),e(LC,XEe),e(XEe,JIr),e(LC,YIr),e(LC,qZ),e(qZ,KIr),e(LC,ZIr),e(de,eNr),e(de,yC),e(yC,zEe),e(zEe,oNr),e(yC,rNr),e(yC,jZ),e(jZ,tNr),e(yC,aNr),e(de,nNr),e(de,xC),e(xC,WEe),e(WEe,sNr),e(xC,lNr),e(xC,DZ),e(DZ,iNr),e(xC,dNr),e(de,cNr),e(de,$C),e($C,QEe),e(QEe,fNr),e($C,mNr),e($C,GZ),e(GZ,gNr),e($C,hNr),e(Dr,pNr),M(kC,Dr,null),b(f,bWe,u),b(f,Gc,u),e(Gc,SC),e(SC,HEe),M(t$,HEe,null),e(Gc,_Nr),e(Gc,UEe),e(UEe,uNr),b(f,vWe,u),b(f,gr,u),M(a$,gr,null),e(gr,bNr),e(gr,Oc),e(Oc,vNr),e(Oc,OZ),e(OZ,FNr),e(Oc,TNr),e(Oc,VZ),e(VZ,MNr),e(Oc,ENr),e(gr,CNr),e(gr,n$),e(n$,wNr),e(n$,JEe),e(JEe,ANr),e(n$,LNr),e(gr,yNr),e(gr,Xt),M(s$,Xt,null),e(Xt,xNr),e(Xt,YEe),e(YEe,$Nr),e(Xt,kNr),e(Xt,Vc),e(Vc,SNr),e(Vc,KEe),e(KEe,RNr),e(Vc,PNr),e(Vc,XZ),e(XZ,BNr),e(Vc,INr),e(Xt,NNr),M(RC,Xt,null),e(gr,qNr),e(gr,Gr),M(l$,Gr,null),e(Gr,jNr),e(Gr,ZEe),e(ZEe,DNr),e(Gr,GNr),e(Gr,bn),e(bn,ONr),e(bn,eCe),e(eCe,VNr),e(bn,XNr),e(bn,oCe),e(oCe,zNr),e(bn,WNr),e(bn,rCe),e(rCe,QNr),e(bn,HNr),e(Gr,UNr),e(Gr,ce),e(ce,PC),e(PC,tCe),e(tCe,JNr),e(PC,YNr),e(PC,zZ),e(zZ,KNr),e(PC,ZNr),e(ce,eqr),e(ce,BC),e(BC,aCe),e(aCe,oqr),e(BC,rqr),e(BC,WZ),e(WZ,tqr),e(BC,aqr),e(ce,nqr),e(ce,IC),e(IC,nCe),e(nCe,sqr),e(IC,lqr),e(IC,QZ),e(QZ,iqr),e(IC,dqr),e(ce,cqr),e(ce,NC),e(NC,sCe),e(sCe,fqr),e(NC,mqr),e(NC,HZ),e(HZ,gqr),e(NC,hqr),e(ce,pqr),e(ce,qC),e(qC,lCe),e(lCe,_qr),e(qC,uqr),e(qC,UZ),e(UZ,bqr),e(qC,vqr),e(ce,Fqr),e(ce,jC),e(jC,iCe),e(iCe,Tqr),e(jC,Mqr),e(jC,JZ),e(JZ,Eqr),e(jC,Cqr),e(ce,wqr),e(ce,DC),e(DC,dCe),e(dCe,Aqr),e(DC,Lqr),e(DC,YZ),e(YZ,yqr),e(DC,xqr),e(ce,$qr),e(ce,GC),e(GC,cCe),e(cCe,kqr),e(GC,Sqr),e(GC,KZ),e(KZ,Rqr),e(GC,Pqr),e(ce,Bqr),e(ce,OC),e(OC,fCe),e(fCe,Iqr),e(OC,Nqr),e(OC,ZZ),e(ZZ,qqr),e(OC,jqr),e(ce,Dqr),e(ce,VC),e(VC,mCe),e(mCe,Gqr),e(VC,Oqr),e(VC,eee),e(eee,Vqr),e(VC,Xqr),e(ce,zqr),e(ce,XC),e(XC,gCe),e(gCe,Wqr),e(XC,Qqr),e(XC,oee),e(oee,Hqr),e(XC,Uqr),e(ce,Jqr),e(ce,zC),e(zC,hCe),e(hCe,Yqr),e(zC,Kqr),e(zC,ree),e(ree,Zqr),e(zC,ejr),e(ce,ojr),e(ce,WC),e(WC,pCe),e(pCe,rjr),e(WC,tjr),e(WC,tee),e(tee,ajr),e(WC,njr),e(ce,sjr),e(ce,QC),e(QC,_Ce),e(_Ce,ljr),e(QC,ijr),e(QC,aee),e(aee,djr),e(QC,cjr),e(ce,fjr),e(ce,HC),e(HC,uCe),e(uCe,mjr),e(HC,gjr),e(HC,nee),e(nee,hjr),e(HC,pjr),e(ce,_jr),e(ce,UC),e(UC,bCe),e(bCe,ujr),e(UC,bjr),e(UC,see),e(see,vjr),e(UC,Fjr),e(ce,Tjr),e(ce,JC),e(JC,vCe),e(vCe,Mjr),e(JC,Ejr),e(JC,lee),e(lee,Cjr),e(JC,wjr),e(ce,Ajr),e(ce,YC),e(YC,FCe),e(FCe,Ljr),e(YC,yjr),e(YC,iee),e(iee,xjr),e(YC,$jr),e(ce,kjr),e(ce,KC),e(KC,TCe),e(TCe,Sjr),e(KC,Rjr),e(KC,dee),e(dee,Pjr),e(KC,Bjr),e(ce,Ijr),e(ce,ZC),e(ZC,MCe),e(MCe,Njr),e(ZC,qjr),e(ZC,cee),e(cee,jjr),e(ZC,Djr),e(Gr,Gjr),M(e5,Gr,null),b(f,FWe,u),b(f,Xc,u),e(Xc,o5),e(o5,ECe),M(i$,ECe,null),e(Xc,Ojr),e(Xc,CCe),e(CCe,Vjr),b(f,TWe,u),b(f,hr,u),M(d$,hr,null),e(hr,Xjr),e(hr,zc),e(zc,zjr),e(zc,fee),e(fee,Wjr),e(zc,Qjr),e(zc,mee),e(mee,Hjr),e(zc,Ujr),e(hr,Jjr),e(hr,c$),e(c$,Yjr),e(c$,wCe),e(wCe,Kjr),e(c$,Zjr),e(hr,eDr),e(hr,zt),M(f$,zt,null),e(zt,oDr),e(zt,ACe),e(ACe,rDr),e(zt,tDr),e(zt,Wc),e(Wc,aDr),e(Wc,LCe),e(LCe,nDr),e(Wc,sDr),e(Wc,gee),e(gee,lDr),e(Wc,iDr),e(zt,dDr),M(r5,zt,null),e(hr,cDr),e(hr,Or),M(m$,Or,null),e(Or,fDr),e(Or,yCe),e(yCe,mDr),e(Or,gDr),e(Or,vn),e(vn,hDr),e(vn,xCe),e(xCe,pDr),e(vn,_Dr),e(vn,$Ce),e($Ce,uDr),e(vn,bDr),e(vn,kCe),e(kCe,vDr),e(vn,FDr),e(Or,TDr),e(Or,SCe),e(SCe,t5),e(t5,RCe),e(RCe,MDr),e(t5,EDr),e(t5,hee),e(hee,CDr),e(t5,wDr),e(Or,ADr),M(a5,Or,null),b(f,MWe,u),b(f,Qc,u),e(Qc,n5),e(n5,PCe),M(g$,PCe,null),e(Qc,LDr),e(Qc,BCe),e(BCe,yDr),b(f,EWe,u),b(f,pr,u),M(h$,pr,null),e(pr,xDr),e(pr,Hc),e(Hc,$Dr),e(Hc,pee),e(pee,kDr),e(Hc,SDr),e(Hc,_ee),e(_ee,RDr),e(Hc,PDr),e(pr,BDr),e(pr,p$),e(p$,IDr),e(p$,ICe),e(ICe,NDr),e(p$,qDr),e(pr,jDr),e(pr,Wt),M(_$,Wt,null),e(Wt,DDr),e(Wt,NCe),e(NCe,GDr),e(Wt,ODr),e(Wt,Uc),e(Uc,VDr),e(Uc,qCe),e(qCe,XDr),e(Uc,zDr),e(Uc,uee),e(uee,WDr),e(Uc,QDr),e(Wt,HDr),M(s5,Wt,null),e(pr,UDr),e(pr,Vr),M(u$,Vr,null),e(Vr,JDr),e(Vr,jCe),e(jCe,YDr),e(Vr,KDr),e(Vr,Fn),e(Fn,ZDr),e(Fn,DCe),e(DCe,eGr),e(Fn,oGr),e(Fn,GCe),e(GCe,rGr),e(Fn,tGr),e(Fn,OCe),e(OCe,aGr),e(Fn,nGr),e(Vr,sGr),e(Vr,VCe),e(VCe,l5),e(l5,XCe),e(XCe,lGr),e(l5,iGr),e(l5,bee),e(bee,dGr),e(l5,cGr),e(Vr,fGr),M(i5,Vr,null),b(f,CWe,u),b(f,Jc,u),e(Jc,d5),e(d5,zCe),M(b$,zCe,null),e(Jc,mGr),e(Jc,WCe),e(WCe,gGr),b(f,wWe,u),b(f,_r,u),M(v$,_r,null),e(_r,hGr),e(_r,Yc),e(Yc,pGr),e(Yc,vee),e(vee,_Gr),e(Yc,uGr),e(Yc,Fee),e(Fee,bGr),e(Yc,vGr),e(_r,FGr),e(_r,F$),e(F$,TGr),e(F$,QCe),e(QCe,MGr),e(F$,EGr),e(_r,CGr),e(_r,Qt),M(T$,Qt,null),e(Qt,wGr),e(Qt,HCe),e(HCe,AGr),e(Qt,LGr),e(Qt,Kc),e(Kc,yGr),e(Kc,UCe),e(UCe,xGr),e(Kc,$Gr),e(Kc,Tee),e(Tee,kGr),e(Kc,SGr),e(Qt,RGr),M(c5,Qt,null),e(_r,PGr),e(_r,Xr),M(M$,Xr,null),e(Xr,BGr),e(Xr,JCe),e(JCe,IGr),e(Xr,NGr),e(Xr,Tn),e(Tn,qGr),e(Tn,YCe),e(YCe,jGr),e(Tn,DGr),e(Tn,KCe),e(KCe,GGr),e(Tn,OGr),e(Tn,ZCe),e(ZCe,VGr),e(Tn,XGr),e(Xr,zGr),e(Xr,oe),e(oe,f5),e(f5,e5e),e(e5e,WGr),e(f5,QGr),e(f5,Mee),e(Mee,HGr),e(f5,UGr),e(oe,JGr),e(oe,m5),e(m5,o5e),e(o5e,YGr),e(m5,KGr),e(m5,Eee),e(Eee,ZGr),e(m5,eOr),e(oe,oOr),e(oe,g5),e(g5,r5e),e(r5e,rOr),e(g5,tOr),e(g5,Cee),e(Cee,aOr),e(g5,nOr),e(oe,sOr),e(oe,h5),e(h5,t5e),e(t5e,lOr),e(h5,iOr),e(h5,wee),e(wee,dOr),e(h5,cOr),e(oe,fOr),e(oe,p5),e(p5,a5e),e(a5e,mOr),e(p5,gOr),e(p5,Aee),e(Aee,hOr),e(p5,pOr),e(oe,_Or),e(oe,_5),e(_5,n5e),e(n5e,uOr),e(_5,bOr),e(_5,Lee),e(Lee,vOr),e(_5,FOr),e(oe,TOr),e(oe,u5),e(u5,s5e),e(s5e,MOr),e(u5,EOr),e(u5,yee),e(yee,COr),e(u5,wOr),e(oe,AOr),e(oe,b5),e(b5,l5e),e(l5e,LOr),e(b5,yOr),e(b5,xee),e(xee,xOr),e(b5,$Or),e(oe,kOr),e(oe,v5),e(v5,i5e),e(i5e,SOr),e(v5,ROr),e(v5,$ee),e($ee,POr),e(v5,BOr),e(oe,IOr),e(oe,F5),e(F5,d5e),e(d5e,NOr),e(F5,qOr),e(F5,kee),e(kee,jOr),e(F5,DOr),e(oe,GOr),e(oe,T5),e(T5,c5e),e(c5e,OOr),e(T5,VOr),e(T5,See),e(See,XOr),e(T5,zOr),e(oe,WOr),e(oe,M5),e(M5,f5e),e(f5e,QOr),e(M5,HOr),e(M5,Ree),e(Ree,UOr),e(M5,JOr),e(oe,YOr),e(oe,E5),e(E5,m5e),e(m5e,KOr),e(E5,ZOr),e(E5,Pee),e(Pee,eVr),e(E5,oVr),e(oe,rVr),e(oe,C5),e(C5,g5e),e(g5e,tVr),e(C5,aVr),e(C5,Bee),e(Bee,nVr),e(C5,sVr),e(oe,lVr),e(oe,w5),e(w5,h5e),e(h5e,iVr),e(w5,dVr),e(w5,Iee),e(Iee,cVr),e(w5,fVr),e(oe,mVr),e(oe,A5),e(A5,p5e),e(p5e,gVr),e(A5,hVr),e(A5,Nee),e(Nee,pVr),e(A5,_Vr),e(oe,uVr),e(oe,L5),e(L5,_5e),e(_5e,bVr),e(L5,vVr),e(L5,qee),e(qee,FVr),e(L5,TVr),e(oe,MVr),e(oe,y5),e(y5,u5e),e(u5e,EVr),e(y5,CVr),e(y5,jee),e(jee,wVr),e(y5,AVr),e(oe,LVr),e(oe,x5),e(x5,b5e),e(b5e,yVr),e(x5,xVr),e(x5,Dee),e(Dee,$Vr),e(x5,kVr),e(oe,SVr),e(oe,$5),e($5,v5e),e(v5e,RVr),e($5,PVr),e($5,Gee),e(Gee,BVr),e($5,IVr),e(oe,NVr),e(oe,k5),e(k5,F5e),e(F5e,qVr),e(k5,jVr),e(k5,Oee),e(Oee,DVr),e(k5,GVr),e(oe,OVr),e(oe,S5),e(S5,T5e),e(T5e,VVr),e(S5,XVr),e(S5,Vee),e(Vee,zVr),e(S5,WVr),e(oe,QVr),e(oe,R5),e(R5,M5e),e(M5e,HVr),e(R5,UVr),e(R5,Xee),e(Xee,JVr),e(R5,YVr),e(oe,KVr),e(oe,P5),e(P5,E5e),e(E5e,ZVr),e(P5,eXr),e(P5,zee),e(zee,oXr),e(P5,rXr),e(oe,tXr),e(oe,B5),e(B5,C5e),e(C5e,aXr),e(B5,nXr),e(B5,Wee),e(Wee,sXr),e(B5,lXr),e(oe,iXr),e(oe,I5),e(I5,w5e),e(w5e,dXr),e(I5,cXr),e(I5,Qee),e(Qee,fXr),e(I5,mXr),e(oe,gXr),e(oe,N5),e(N5,A5e),e(A5e,hXr),e(N5,pXr),e(N5,Hee),e(Hee,_Xr),e(N5,uXr),e(Xr,bXr),M(q5,Xr,null),b(f,AWe,u),b(f,Zc,u),e(Zc,j5),e(j5,L5e),M(E$,L5e,null),e(Zc,vXr),e(Zc,y5e),e(y5e,FXr),b(f,LWe,u),b(f,ur,u),M(C$,ur,null),e(ur,TXr),e(ur,ef),e(ef,MXr),e(ef,Uee),e(Uee,EXr),e(ef,CXr),e(ef,Jee),e(Jee,wXr),e(ef,AXr),e(ur,LXr),e(ur,w$),e(w$,yXr),e(w$,x5e),e(x5e,xXr),e(w$,$Xr),e(ur,kXr),e(ur,Ht),M(A$,Ht,null),e(Ht,SXr),e(Ht,$5e),e($5e,RXr),e(Ht,PXr),e(Ht,of),e(of,BXr),e(of,k5e),e(k5e,IXr),e(of,NXr),e(of,Yee),e(Yee,qXr),e(of,jXr),e(Ht,DXr),M(D5,Ht,null),e(ur,GXr),e(ur,zr),M(L$,zr,null),e(zr,OXr),e(zr,S5e),e(S5e,VXr),e(zr,XXr),e(zr,Mn),e(Mn,zXr),e(Mn,R5e),e(R5e,WXr),e(Mn,QXr),e(Mn,P5e),e(P5e,HXr),e(Mn,UXr),e(Mn,B5e),e(B5e,JXr),e(Mn,YXr),e(zr,KXr),e(zr,xe),e(xe,G5),e(G5,I5e),e(I5e,ZXr),e(G5,ezr),e(G5,Kee),e(Kee,ozr),e(G5,rzr),e(xe,tzr),e(xe,O5),e(O5,N5e),e(N5e,azr),e(O5,nzr),e(O5,Zee),e(Zee,szr),e(O5,lzr),e(xe,izr),e(xe,V5),e(V5,q5e),e(q5e,dzr),e(V5,czr),e(V5,eoe),e(eoe,fzr),e(V5,mzr),e(xe,gzr),e(xe,X5),e(X5,j5e),e(j5e,hzr),e(X5,pzr),e(X5,ooe),e(ooe,_zr),e(X5,uzr),e(xe,bzr),e(xe,z5),e(z5,D5e),e(D5e,vzr),e(z5,Fzr),e(z5,roe),e(roe,Tzr),e(z5,Mzr),e(xe,Ezr),e(xe,W5),e(W5,G5e),e(G5e,Czr),e(W5,wzr),e(W5,toe),e(toe,Azr),e(W5,Lzr),e(xe,yzr),e(xe,Q5),e(Q5,O5e),e(O5e,xzr),e(Q5,$zr),e(Q5,aoe),e(aoe,kzr),e(Q5,Szr),e(xe,Rzr),e(xe,H5),e(H5,V5e),e(V5e,Pzr),e(H5,Bzr),e(H5,noe),e(noe,Izr),e(H5,Nzr),e(xe,qzr),e(xe,U5),e(U5,X5e),e(X5e,jzr),e(U5,Dzr),e(U5,soe),e(soe,Gzr),e(U5,Ozr),e(xe,Vzr),e(xe,J5),e(J5,z5e),e(z5e,Xzr),e(J5,zzr),e(J5,loe),e(loe,Wzr),e(J5,Qzr),e(zr,Hzr),M(Y5,zr,null),b(f,yWe,u),b(f,rf,u),e(rf,K5),e(K5,W5e),M(y$,W5e,null),e(rf,Uzr),e(rf,Q5e),e(Q5e,Jzr),b(f,xWe,u),b(f,br,u),M(x$,br,null),e(br,Yzr),e(br,tf),e(tf,Kzr),e(tf,ioe),e(ioe,Zzr),e(tf,eWr),e(tf,doe),e(doe,oWr),e(tf,rWr),e(br,tWr),e(br,$$),e($$,aWr),e($$,H5e),e(H5e,nWr),e($$,sWr),e(br,lWr),e(br,Ut),M(k$,Ut,null),e(Ut,iWr),e(Ut,U5e),e(U5e,dWr),e(Ut,cWr),e(Ut,af),e(af,fWr),e(af,J5e),e(J5e,mWr),e(af,gWr),e(af,coe),e(coe,hWr),e(af,pWr),e(Ut,_Wr),M(Z5,Ut,null),e(br,uWr),e(br,Wr),M(S$,Wr,null),e(Wr,bWr),e(Wr,Y5e),e(Y5e,vWr),e(Wr,FWr),e(Wr,En),e(En,TWr),e(En,K5e),e(K5e,MWr),e(En,EWr),e(En,Z5e),e(Z5e,CWr),e(En,wWr),e(En,e3e),e(e3e,AWr),e(En,LWr),e(Wr,yWr),e(Wr,Ee),e(Ee,e3),e(e3,o3e),e(o3e,xWr),e(e3,$Wr),e(e3,foe),e(foe,kWr),e(e3,SWr),e(Ee,RWr),e(Ee,o3),e(o3,r3e),e(r3e,PWr),e(o3,BWr),e(o3,moe),e(moe,IWr),e(o3,NWr),e(Ee,qWr),e(Ee,r3),e(r3,t3e),e(t3e,jWr),e(r3,DWr),e(r3,goe),e(goe,GWr),e(r3,OWr),e(Ee,VWr),e(Ee,t3),e(t3,a3e),e(a3e,XWr),e(t3,zWr),e(t3,hoe),e(hoe,WWr),e(t3,QWr),e(Ee,HWr),e(Ee,a3),e(a3,n3e),e(n3e,UWr),e(a3,JWr),e(a3,poe),e(poe,YWr),e(a3,KWr),e(Ee,ZWr),e(Ee,n3),e(n3,s3e),e(s3e,eQr),e(n3,oQr),e(n3,_oe),e(_oe,rQr),e(n3,tQr),e(Ee,aQr),e(Ee,s3),e(s3,l3e),e(l3e,nQr),e(s3,sQr),e(s3,uoe),e(uoe,lQr),e(s3,iQr),e(Ee,dQr),e(Ee,l3),e(l3,i3e),e(i3e,cQr),e(l3,fQr),e(l3,boe),e(boe,mQr),e(l3,gQr),e(Ee,hQr),e(Ee,i3),e(i3,d3e),e(d3e,pQr),e(i3,_Qr),e(i3,voe),e(voe,uQr),e(i3,bQr),e(Ee,vQr),e(Ee,d3),e(d3,c3e),e(c3e,FQr),e(d3,TQr),e(d3,Foe),e(Foe,MQr),e(d3,EQr),e(Ee,CQr),e(Ee,c3),e(c3,f3e),e(f3e,wQr),e(c3,AQr),e(c3,Toe),e(Toe,LQr),e(c3,yQr),e(Ee,xQr),e(Ee,f3),e(f3,m3e),e(m3e,$Qr),e(f3,kQr),e(f3,Moe),e(Moe,SQr),e(f3,RQr),e(Ee,PQr),e(Ee,m3),e(m3,g3e),e(g3e,BQr),e(m3,IQr),e(m3,Eoe),e(Eoe,NQr),e(m3,qQr),e(Wr,jQr),M(g3,Wr,null),b(f,$We,u),b(f,nf,u),e(nf,h3),e(h3,h3e),M(R$,h3e,null),e(nf,DQr),e(nf,p3e),e(p3e,GQr),b(f,kWe,u),b(f,vr,u),M(P$,vr,null),e(vr,OQr),e(vr,sf),e(sf,VQr),e(sf,Coe),e(Coe,XQr),e(sf,zQr),e(sf,woe),e(woe,WQr),e(sf,QQr),e(vr,HQr),e(vr,B$),e(B$,UQr),e(B$,_3e),e(_3e,JQr),e(B$,YQr),e(vr,KQr),e(vr,Jt),M(I$,Jt,null),e(Jt,ZQr),e(Jt,u3e),e(u3e,eHr),e(Jt,oHr),e(Jt,lf),e(lf,rHr),e(lf,b3e),e(b3e,tHr),e(lf,aHr),e(lf,Aoe),e(Aoe,nHr),e(lf,sHr),e(Jt,lHr),M(p3,Jt,null),e(vr,iHr),e(vr,Qr),M(N$,Qr,null),e(Qr,dHr),e(Qr,v3e),e(v3e,cHr),e(Qr,fHr),e(Qr,Cn),e(Cn,mHr),e(Cn,F3e),e(F3e,gHr),e(Cn,hHr),e(Cn,T3e),e(T3e,pHr),e(Cn,_Hr),e(Cn,M3e),e(M3e,uHr),e(Cn,bHr),e(Qr,vHr),e(Qr,$e),e($e,_3),e(_3,E3e),e(E3e,FHr),e(_3,THr),e(_3,Loe),e(Loe,MHr),e(_3,EHr),e($e,CHr),e($e,u3),e(u3,C3e),e(C3e,wHr),e(u3,AHr),e(u3,yoe),e(yoe,LHr),e(u3,yHr),e($e,xHr),e($e,b3),e(b3,w3e),e(w3e,$Hr),e(b3,kHr),e(b3,xoe),e(xoe,SHr),e(b3,RHr),e($e,PHr),e($e,v3),e(v3,A3e),e(A3e,BHr),e(v3,IHr),e(v3,$oe),e($oe,NHr),e(v3,qHr),e($e,jHr),e($e,F3),e(F3,L3e),e(L3e,DHr),e(F3,GHr),e(F3,koe),e(koe,OHr),e(F3,VHr),e($e,XHr),e($e,T3),e(T3,y3e),e(y3e,zHr),e(T3,WHr),e(T3,Soe),e(Soe,QHr),e(T3,HHr),e($e,UHr),e($e,M3),e(M3,x3e),e(x3e,JHr),e(M3,YHr),e(M3,Roe),e(Roe,KHr),e(M3,ZHr),e($e,eUr),e($e,E3),e(E3,$3e),e($3e,oUr),e(E3,rUr),e(E3,Poe),e(Poe,tUr),e(E3,aUr),e($e,nUr),e($e,C3),e(C3,k3e),e(k3e,sUr),e(C3,lUr),e(C3,Boe),e(Boe,iUr),e(C3,dUr),e($e,cUr),e($e,w3),e(w3,S3e),e(S3e,fUr),e(w3,mUr),e(w3,Ioe),e(Ioe,gUr),e(w3,hUr),e(Qr,pUr),M(A3,Qr,null),b(f,SWe,u),b(f,df,u),e(df,L3),e(L3,R3e),M(q$,R3e,null),e(df,_Ur),e(df,P3e),e(P3e,uUr),b(f,RWe,u),b(f,Fr,u),M(j$,Fr,null),e(Fr,bUr),e(Fr,cf),e(cf,vUr),e(cf,Noe),e(Noe,FUr),e(cf,TUr),e(cf,qoe),e(qoe,MUr),e(cf,EUr),e(Fr,CUr),e(Fr,D$),e(D$,wUr),e(D$,B3e),e(B3e,AUr),e(D$,LUr),e(Fr,yUr),e(Fr,Yt),M(G$,Yt,null),e(Yt,xUr),e(Yt,I3e),e(I3e,$Ur),e(Yt,kUr),e(Yt,ff),e(ff,SUr),e(ff,N3e),e(N3e,RUr),e(ff,PUr),e(ff,joe),e(joe,BUr),e(ff,IUr),e(Yt,NUr),M(y3,Yt,null),e(Fr,qUr),e(Fr,Hr),M(O$,Hr,null),e(Hr,jUr),e(Hr,q3e),e(q3e,DUr),e(Hr,GUr),e(Hr,wn),e(wn,OUr),e(wn,j3e),e(j3e,VUr),e(wn,XUr),e(wn,D3e),e(D3e,zUr),e(wn,WUr),e(wn,G3e),e(G3e,QUr),e(wn,HUr),e(Hr,UUr),e(Hr,ke),e(ke,x3),e(x3,O3e),e(O3e,JUr),e(x3,YUr),e(x3,Doe),e(Doe,KUr),e(x3,ZUr),e(ke,eJr),e(ke,$3),e($3,V3e),e(V3e,oJr),e($3,rJr),e($3,Goe),e(Goe,tJr),e($3,aJr),e(ke,nJr),e(ke,k3),e(k3,X3e),e(X3e,sJr),e(k3,lJr),e(k3,Ooe),e(Ooe,iJr),e(k3,dJr),e(ke,cJr),e(ke,S3),e(S3,z3e),e(z3e,fJr),e(S3,mJr),e(S3,Voe),e(Voe,gJr),e(S3,hJr),e(ke,pJr),e(ke,R3),e(R3,W3e),e(W3e,_Jr),e(R3,uJr),e(R3,Xoe),e(Xoe,bJr),e(R3,vJr),e(ke,FJr),e(ke,P3),e(P3,Q3e),e(Q3e,TJr),e(P3,MJr),e(P3,zoe),e(zoe,EJr),e(P3,CJr),e(ke,wJr),e(ke,B3),e(B3,H3e),e(H3e,AJr),e(B3,LJr),e(B3,Woe),e(Woe,yJr),e(B3,xJr),e(ke,$Jr),e(ke,I3),e(I3,U3e),e(U3e,kJr),e(I3,SJr),e(I3,Qoe),e(Qoe,RJr),e(I3,PJr),e(ke,BJr),e(ke,N3),e(N3,J3e),e(J3e,IJr),e(N3,NJr),e(N3,Hoe),e(Hoe,qJr),e(N3,jJr),e(ke,DJr),e(ke,q3),e(q3,Y3e),e(Y3e,GJr),e(q3,OJr),e(q3,Uoe),e(Uoe,VJr),e(q3,XJr),e(Hr,zJr),M(j3,Hr,null),b(f,PWe,u),b(f,mf,u),e(mf,D3),e(D3,K3e),M(V$,K3e,null),e(mf,WJr),e(mf,Z3e),e(Z3e,QJr),b(f,BWe,u),b(f,Tr,u),M(X$,Tr,null),e(Tr,HJr),e(Tr,gf),e(gf,UJr),e(gf,Joe),e(Joe,JJr),e(gf,YJr),e(gf,Yoe),e(Yoe,KJr),e(gf,ZJr),e(Tr,eYr),e(Tr,z$),e(z$,oYr),e(z$,ewe),e(ewe,rYr),e(z$,tYr),e(Tr,aYr),e(Tr,Kt),M(W$,Kt,null),e(Kt,nYr),e(Kt,owe),e(owe,sYr),e(Kt,lYr),e(Kt,hf),e(hf,iYr),e(hf,rwe),e(rwe,dYr),e(hf,cYr),e(hf,Koe),e(Koe,fYr),e(hf,mYr),e(Kt,gYr),M(G3,Kt,null),e(Tr,hYr),e(Tr,Ur),M(Q$,Ur,null),e(Ur,pYr),e(Ur,twe),e(twe,_Yr),e(Ur,uYr),e(Ur,An),e(An,bYr),e(An,awe),e(awe,vYr),e(An,FYr),e(An,nwe),e(nwe,TYr),e(An,MYr),e(An,swe),e(swe,EYr),e(An,CYr),e(Ur,wYr),e(Ur,Se),e(Se,O3),e(O3,lwe),e(lwe,AYr),e(O3,LYr),e(O3,Zoe),e(Zoe,yYr),e(O3,xYr),e(Se,$Yr),e(Se,V3),e(V3,iwe),e(iwe,kYr),e(V3,SYr),e(V3,ere),e(ere,RYr),e(V3,PYr),e(Se,BYr),e(Se,X3),e(X3,dwe),e(dwe,IYr),e(X3,NYr),e(X3,ore),e(ore,qYr),e(X3,jYr),e(Se,DYr),e(Se,z3),e(z3,cwe),e(cwe,GYr),e(z3,OYr),e(z3,rre),e(rre,VYr),e(z3,XYr),e(Se,zYr),e(Se,W3),e(W3,fwe),e(fwe,WYr),e(W3,QYr),e(W3,tre),e(tre,HYr),e(W3,UYr),e(Se,JYr),e(Se,Q3),e(Q3,mwe),e(mwe,YYr),e(Q3,KYr),e(Q3,are),e(are,ZYr),e(Q3,eKr),e(Se,oKr),e(Se,H3),e(H3,gwe),e(gwe,rKr),e(H3,tKr),e(H3,nre),e(nre,aKr),e(H3,nKr),e(Se,sKr),e(Se,U3),e(U3,hwe),e(hwe,lKr),e(U3,iKr),e(U3,sre),e(sre,dKr),e(U3,cKr),e(Se,fKr),e(Se,J3),e(J3,pwe),e(pwe,mKr),e(J3,gKr),e(J3,lre),e(lre,hKr),e(J3,pKr),e(Se,_Kr),e(Se,Y3),e(Y3,_we),e(_we,uKr),e(Y3,bKr),e(Y3,ire),e(ire,vKr),e(Y3,FKr),e(Ur,TKr),M(K3,Ur,null),b(f,IWe,u),b(f,pf,u),e(pf,Z3),e(Z3,uwe),M(H$,uwe,null),e(pf,MKr),e(pf,bwe),e(bwe,EKr),b(f,NWe,u),b(f,Mr,u),M(U$,Mr,null),e(Mr,CKr),e(Mr,_f),e(_f,wKr),e(_f,dre),e(dre,AKr),e(_f,LKr),e(_f,cre),e(cre,yKr),e(_f,xKr),e(Mr,$Kr),e(Mr,J$),e(J$,kKr),e(J$,vwe),e(vwe,SKr),e(J$,RKr),e(Mr,PKr),e(Mr,Zt),M(Y$,Zt,null),e(Zt,BKr),e(Zt,Fwe),e(Fwe,IKr),e(Zt,NKr),e(Zt,uf),e(uf,qKr),e(uf,Twe),e(Twe,jKr),e(uf,DKr),e(uf,fre),e(fre,GKr),e(uf,OKr),e(Zt,VKr),M(ew,Zt,null),e(Mr,XKr),e(Mr,Jr),M(K$,Jr,null),e(Jr,zKr),e(Jr,Mwe),e(Mwe,WKr),e(Jr,QKr),e(Jr,Ln),e(Ln,HKr),e(Ln,Ewe),e(Ewe,UKr),e(Ln,JKr),e(Ln,Cwe),e(Cwe,YKr),e(Ln,KKr),e(Ln,wwe),e(wwe,ZKr),e(Ln,eZr),e(Jr,oZr),e(Jr,Re),e(Re,ow),e(ow,Awe),e(Awe,rZr),e(ow,tZr),e(ow,mre),e(mre,aZr),e(ow,nZr),e(Re,sZr),e(Re,rw),e(rw,Lwe),e(Lwe,lZr),e(rw,iZr),e(rw,gre),e(gre,dZr),e(rw,cZr),e(Re,fZr),e(Re,tw),e(tw,ywe),e(ywe,mZr),e(tw,gZr),e(tw,hre),e(hre,hZr),e(tw,pZr),e(Re,_Zr),e(Re,aw),e(aw,xwe),e(xwe,uZr),e(aw,bZr),e(aw,pre),e(pre,vZr),e(aw,FZr),e(Re,TZr),e(Re,nw),e(nw,$we),e($we,MZr),e(nw,EZr),e(nw,_re),e(_re,CZr),e(nw,wZr),e(Re,AZr),e(Re,sw),e(sw,kwe),e(kwe,LZr),e(sw,yZr),e(sw,ure),e(ure,xZr),e(sw,$Zr),e(Re,kZr),e(Re,lw),e(lw,Swe),e(Swe,SZr),e(lw,RZr),e(lw,bre),e(bre,PZr),e(lw,BZr),e(Re,IZr),e(Re,iw),e(iw,Rwe),e(Rwe,NZr),e(iw,qZr),e(iw,vre),e(vre,jZr),e(iw,DZr),e(Re,GZr),e(Re,dw),e(dw,Pwe),e(Pwe,OZr),e(dw,VZr),e(dw,Fre),e(Fre,XZr),e(dw,zZr),e(Re,WZr),e(Re,cw),e(cw,Bwe),e(Bwe,QZr),e(cw,HZr),e(cw,Tre),e(Tre,UZr),e(cw,JZr),e(Jr,YZr),M(fw,Jr,null),b(f,qWe,u),b(f,bf,u),e(bf,mw),e(mw,Iwe),M(Z$,Iwe,null),e(bf,KZr),e(bf,Nwe),e(Nwe,ZZr),b(f,jWe,u),b(f,Er,u),M(ek,Er,null),e(Er,eet),e(Er,vf),e(vf,oet),e(vf,Mre),e(Mre,ret),e(vf,tet),e(vf,Ere),e(Ere,aet),e(vf,net),e(Er,set),e(Er,ok),e(ok,iet),e(ok,qwe),e(qwe,det),e(ok,cet),e(Er,fet),e(Er,ea),M(rk,ea,null),e(ea,met),e(ea,jwe),e(jwe,get),e(ea,het),e(ea,Ff),e(Ff,pet),e(Ff,Dwe),e(Dwe,_et),e(Ff,uet),e(Ff,Cre),e(Cre,bet),e(Ff,vet),e(ea,Fet),M(gw,ea,null),e(Er,Tet),e(Er,Yr),M(tk,Yr,null),e(Yr,Met),e(Yr,Gwe),e(Gwe,Eet),e(Yr,Cet),e(Yr,yn),e(yn,wet),e(yn,Owe),e(Owe,Aet),e(yn,Let),e(yn,Vwe),e(Vwe,yet),e(yn,xet),e(yn,Xwe),e(Xwe,$et),e(yn,ket),e(Yr,Set),e(Yr,Xe),e(Xe,hw),e(hw,zwe),e(zwe,Ret),e(hw,Pet),e(hw,wre),e(wre,Bet),e(hw,Iet),e(Xe,Net),e(Xe,pw),e(pw,Wwe),e(Wwe,qet),e(pw,jet),e(pw,Are),e(Are,Det),e(pw,Get),e(Xe,Oet),e(Xe,_w),e(_w,Qwe),e(Qwe,Vet),e(_w,Xet),e(_w,Lre),e(Lre,zet),e(_w,Wet),e(Xe,Qet),e(Xe,uw),e(uw,Hwe),e(Hwe,Het),e(uw,Uet),e(uw,yre),e(yre,Jet),e(uw,Yet),e(Xe,Ket),e(Xe,bw),e(bw,Uwe),e(Uwe,Zet),e(bw,eot),e(bw,xre),e(xre,oot),e(bw,rot),e(Xe,tot),e(Xe,vw),e(vw,Jwe),e(Jwe,aot),e(vw,not),e(vw,$re),e($re,sot),e(vw,lot),e(Xe,iot),e(Xe,Fw),e(Fw,Ywe),e(Ywe,dot),e(Fw,cot),e(Fw,kre),e(kre,fot),e(Fw,mot),e(Xe,got),e(Xe,Tw),e(Tw,Kwe),e(Kwe,hot),e(Tw,pot),e(Tw,Sre),e(Sre,_ot),e(Tw,uot),e(Yr,bot),M(Mw,Yr,null),b(f,DWe,u),b(f,Tf,u),e(Tf,Ew),e(Ew,Zwe),M(ak,Zwe,null),e(Tf,vot),e(Tf,eAe),e(eAe,Fot),b(f,GWe,u),b(f,Cr,u),M(nk,Cr,null),e(Cr,Tot),e(Cr,Mf),e(Mf,Mot),e(Mf,Rre),e(Rre,Eot),e(Mf,Cot),e(Mf,Pre),e(Pre,wot),e(Mf,Aot),e(Cr,Lot),e(Cr,sk),e(sk,yot),e(sk,oAe),e(oAe,xot),e(sk,$ot),e(Cr,kot),e(Cr,oa),M(lk,oa,null),e(oa,Sot),e(oa,rAe),e(rAe,Rot),e(oa,Pot),e(oa,Ef),e(Ef,Bot),e(Ef,tAe),e(tAe,Iot),e(Ef,Not),e(Ef,Bre),e(Bre,qot),e(Ef,jot),e(oa,Dot),M(Cw,oa,null),e(Cr,Got),e(Cr,Kr),M(ik,Kr,null),e(Kr,Oot),e(Kr,aAe),e(aAe,Vot),e(Kr,Xot),e(Kr,xn),e(xn,zot),e(xn,nAe),e(nAe,Wot),e(xn,Qot),e(xn,sAe),e(sAe,Hot),e(xn,Uot),e(xn,lAe),e(lAe,Jot),e(xn,Yot),e(Kr,Kot),e(Kr,ze),e(ze,ww),e(ww,iAe),e(iAe,Zot),e(ww,ert),e(ww,Ire),e(Ire,ort),e(ww,rrt),e(ze,trt),e(ze,Aw),e(Aw,dAe),e(dAe,art),e(Aw,nrt),e(Aw,Nre),e(Nre,srt),e(Aw,lrt),e(ze,irt),e(ze,Lw),e(Lw,cAe),e(cAe,drt),e(Lw,crt),e(Lw,qre),e(qre,frt),e(Lw,mrt),e(ze,grt),e(ze,yw),e(yw,fAe),e(fAe,hrt),e(yw,prt),e(yw,jre),e(jre,_rt),e(yw,urt),e(ze,brt),e(ze,xw),e(xw,mAe),e(mAe,vrt),e(xw,Frt),e(xw,Dre),e(Dre,Trt),e(xw,Mrt),e(ze,Ert),e(ze,$w),e($w,gAe),e(gAe,Crt),e($w,wrt),e($w,Gre),e(Gre,Art),e($w,Lrt),e(ze,yrt),e(ze,kw),e(kw,hAe),e(hAe,xrt),e(kw,$rt),e(kw,Ore),e(Ore,krt),e(kw,Srt),e(ze,Rrt),e(ze,Sw),e(Sw,pAe),e(pAe,Prt),e(Sw,Brt),e(Sw,Vre),e(Vre,Irt),e(Sw,Nrt),e(Kr,qrt),M(Rw,Kr,null),b(f,OWe,u),b(f,Cf,u),e(Cf,Pw),e(Pw,_Ae),M(dk,_Ae,null),e(Cf,jrt),e(Cf,uAe),e(uAe,Drt),b(f,VWe,u),b(f,wr,u),M(ck,wr,null),e(wr,Grt),e(wr,wf),e(wf,Ort),e(wf,Xre),e(Xre,Vrt),e(wf,Xrt),e(wf,zre),e(zre,zrt),e(wf,Wrt),e(wr,Qrt),e(wr,fk),e(fk,Hrt),e(fk,bAe),e(bAe,Urt),e(fk,Jrt),e(wr,Yrt),e(wr,ra),M(mk,ra,null),e(ra,Krt),e(ra,vAe),e(vAe,Zrt),e(ra,ett),e(ra,Af),e(Af,ott),e(Af,FAe),e(FAe,rtt),e(Af,ttt),e(Af,Wre),e(Wre,att),e(Af,ntt),e(ra,stt),M(Bw,ra,null),e(wr,ltt),e(wr,Zr),M(gk,Zr,null),e(Zr,itt),e(Zr,TAe),e(TAe,dtt),e(Zr,ctt),e(Zr,$n),e($n,ftt),e($n,MAe),e(MAe,mtt),e($n,gtt),e($n,EAe),e(EAe,htt),e($n,ptt),e($n,CAe),e(CAe,_tt),e($n,utt),e(Zr,btt),e(Zr,wAe),e(wAe,Iw),e(Iw,AAe),e(AAe,vtt),e(Iw,Ftt),e(Iw,Qre),e(Qre,Ttt),e(Iw,Mtt),e(Zr,Ett),M(Nw,Zr,null),b(f,XWe,u),b(f,Lf,u),e(Lf,qw),e(qw,LAe),M(hk,LAe,null),e(Lf,Ctt),e(Lf,yAe),e(yAe,wtt),b(f,zWe,u),b(f,Ar,u),M(pk,Ar,null),e(Ar,Att),e(Ar,yf),e(yf,Ltt),e(yf,Hre),e(Hre,ytt),e(yf,xtt),e(yf,Ure),e(Ure,$tt),e(yf,ktt),e(Ar,Stt),e(Ar,_k),e(_k,Rtt),e(_k,xAe),e(xAe,Ptt),e(_k,Btt),e(Ar,Itt),e(Ar,ta),M(uk,ta,null),e(ta,Ntt),e(ta,$Ae),e($Ae,qtt),e(ta,jtt),e(ta,xf),e(xf,Dtt),e(xf,kAe),e(kAe,Gtt),e(xf,Ott),e(xf,Jre),e(Jre,Vtt),e(xf,Xtt),e(ta,ztt),M(jw,ta,null),e(Ar,Wtt),e(Ar,et),M(bk,et,null),e(et,Qtt),e(et,SAe),e(SAe,Htt),e(et,Utt),e(et,kn),e(kn,Jtt),e(kn,RAe),e(RAe,Ytt),e(kn,Ktt),e(kn,PAe),e(PAe,Ztt),e(kn,eat),e(kn,BAe),e(BAe,oat),e(kn,rat),e(et,tat),e(et,vk),e(vk,Dw),e(Dw,IAe),e(IAe,aat),e(Dw,nat),e(Dw,Yre),e(Yre,sat),e(Dw,lat),e(vk,iat),e(vk,Gw),e(Gw,NAe),e(NAe,dat),e(Gw,cat),e(Gw,Kre),e(Kre,fat),e(Gw,mat),e(et,gat),M(Ow,et,null),b(f,WWe,u),b(f,$f,u),e($f,Vw),e(Vw,qAe),M(Fk,qAe,null),e($f,hat),e($f,jAe),e(jAe,pat),b(f,QWe,u),b(f,Lr,u),M(Tk,Lr,null),e(Lr,_at),e(Lr,kf),e(kf,uat),e(kf,Zre),e(Zre,bat),e(kf,vat),e(kf,ete),e(ete,Fat),e(kf,Tat),e(Lr,Mat),e(Lr,Mk),e(Mk,Eat),e(Mk,DAe),e(DAe,Cat),e(Mk,wat),e(Lr,Aat),e(Lr,aa),M(Ek,aa,null),e(aa,Lat),e(aa,GAe),e(GAe,yat),e(aa,xat),e(aa,Sf),e(Sf,$at),e(Sf,OAe),e(OAe,kat),e(Sf,Sat),e(Sf,ote),e(ote,Rat),e(Sf,Pat),e(aa,Bat),M(Xw,aa,null),e(Lr,Iat),e(Lr,ot),M(Ck,ot,null),e(ot,Nat),e(ot,VAe),e(VAe,qat),e(ot,jat),e(ot,Sn),e(Sn,Dat),e(Sn,XAe),e(XAe,Gat),e(Sn,Oat),e(Sn,zAe),e(zAe,Vat),e(Sn,Xat),e(Sn,WAe),e(WAe,zat),e(Sn,Wat),e(ot,Qat),e(ot,QAe),e(QAe,zw),e(zw,HAe),e(HAe,Hat),e(zw,Uat),e(zw,rte),e(rte,Jat),e(zw,Yat),e(ot,Kat),M(Ww,ot,null),HWe=!0},p(f,[u]){const wk={};u&2&&(wk.$$scope={dirty:u,ctx:f}),Gf.$set(wk);const UAe={};u&2&&(UAe.$$scope={dirty:u,ctx:f}),eh.$set(UAe);const JAe={};u&2&&(JAe.$$scope={dirty:u,ctx:f}),Ih.$set(JAe);const YAe={};u&2&&(YAe.$$scope={dirty:u,ctx:f}),Fp.$set(YAe);const Ak={};u&2&&(Ak.$$scope={dirty:u,ctx:f}),Tp.$set(Ak);const KAe={};u&2&&(KAe.$$scope={dirty:u,ctx:f}),Vp.$set(KAe);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),Xp.$set(Rn);const ZAe={};u&2&&(ZAe.$$scope={dirty:u,ctx:f}),Qp.$set(ZAe);const eLe={};u&2&&(eLe.$$scope={dirty:u,ctx:f}),Zu.$set(eLe);const oLe={};u&2&&(oLe.$$scope={dirty:u,ctx:f}),o1.$set(oLe);const Lk={};u&2&&(Lk.$$scope={dirty:u,ctx:f}),H1.$set(Lk);const rLe={};u&2&&(rLe.$$scope={dirty:u,ctx:f}),J1.$set(rLe);const yk={};u&2&&(yk.$$scope={dirty:u,ctx:f}),q4.$set(yk);const tLe={};u&2&&(tLe.$$scope={dirty:u,ctx:f}),D4.$set(tLe);const xk={};u&2&&(xk.$$scope={dirty:u,ctx:f}),A2.$set(xk);const aLe={};u&2&&(aLe.$$scope={dirty:u,ctx:f}),y2.$set(aLe);const nLe={};u&2&&(nLe.$$scope={dirty:u,ctx:f}),U2.$set(nLe);const sLe={};u&2&&(sLe.$$scope={dirty:u,ctx:f}),Y2.$set(sLe);const Rf={};u&2&&(Rf.$$scope={dirty:u,ctx:f}),Jb.$set(Rf);const lLe={};u&2&&(lLe.$$scope={dirty:u,ctx:f}),Kb.$set(lLe);const iLe={};u&2&&(iLe.$$scope={dirty:u,ctx:f}),$v.$set(iLe);const dLe={};u&2&&(dLe.$$scope={dirty:u,ctx:f}),Sv.$set(dLe);const $k={};u&2&&($k.$$scope={dirty:u,ctx:f}),Dv.$set($k);const cLe={};u&2&&(cLe.$$scope={dirty:u,ctx:f}),Ov.$set(cLe);const fLe={};u&2&&(fLe.$$scope={dirty:u,ctx:f}),A0.$set(fLe);const mLe={};u&2&&(mLe.$$scope={dirty:u,ctx:f}),y0.$set(mLe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),bF.$set(nt);const kk={};u&2&&(kk.$$scope={dirty:u,ctx:f}),FF.$set(kk);const gLe={};u&2&&(gLe.$$scope={dirty:u,ctx:f}),EF.$set(gLe);const Sk={};u&2&&(Sk.$$scope={dirty:u,ctx:f}),wF.$set(Sk);const hLe={};u&2&&(hLe.$$scope={dirty:u,ctx:f}),DF.$set(hLe);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),OF.$set(st);const pLe={};u&2&&(pLe.$$scope={dirty:u,ctx:f}),zF.$set(pLe);const Pf={};u&2&&(Pf.$$scope={dirty:u,ctx:f}),QF.$set(Pf);const _Le={};u&2&&(_Le.$$scope={dirty:u,ctx:f}),JF.$set(_Le);const uLe={};u&2&&(uLe.$$scope={dirty:u,ctx:f}),KF.$set(uLe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),d6.$set(L);const Qw={};u&2&&(Qw.$$scope={dirty:u,ctx:f}),f6.$set(Qw);const bLe={};u&2&&(bLe.$$scope={dirty:u,ctx:f}),b6.$set(bLe);const vLe={};u&2&&(vLe.$$scope={dirty:u,ctx:f}),F6.$set(vLe);const Hw={};u&2&&(Hw.$$scope={dirty:u,ctx:f}),S6.$set(Hw);const FLe={};u&2&&(FLe.$$scope={dirty:u,ctx:f}),P6.$set(FLe);const TLe={};u&2&&(TLe.$$scope={dirty:u,ctx:f}),q6.$set(TLe);const Uw={};u&2&&(Uw.$$scope={dirty:u,ctx:f}),D6.$set(Uw);const MLe={};u&2&&(MLe.$$scope={dirty:u,ctx:f}),Q6.$set(MLe);const ELe={};u&2&&(ELe.$$scope={dirty:u,ctx:f}),U6.$set(ELe);const Jw={};u&2&&(Jw.$$scope={dirty:u,ctx:f}),eT.$set(Jw);const CLe={};u&2&&(CLe.$$scope={dirty:u,ctx:f}),rT.$set(CLe);const wLe={};u&2&&(wLe.$$scope={dirty:u,ctx:f}),sT.$set(wLe);const Yw={};u&2&&(Yw.$$scope={dirty:u,ctx:f}),iT.$set(Yw);const ALe={};u&2&&(ALe.$$scope={dirty:u,ctx:f}),fT.$set(ALe);const LLe={};u&2&&(LLe.$$scope={dirty:u,ctx:f}),gT.$set(LLe);const Kw={};u&2&&(Kw.$$scope={dirty:u,ctx:f}),FT.$set(Kw);const yLe={};u&2&&(yLe.$$scope={dirty:u,ctx:f}),MT.$set(yLe);const xLe={};u&2&&(xLe.$$scope={dirty:u,ctx:f}),wT.$set(xLe);const Zw={};u&2&&(Zw.$$scope={dirty:u,ctx:f}),LT.$set(Zw);const $Le={};u&2&&($Le.$$scope={dirty:u,ctx:f}),C7.$set($Le);const kLe={};u&2&&(kLe.$$scope={dirty:u,ctx:f}),A7.$set(kLe);const eA={};u&2&&(eA.$$scope={dirty:u,ctx:f}),J7.$set(eA);const SLe={};u&2&&(SLe.$$scope={dirty:u,ctx:f}),K7.$set(SLe);const RLe={};u&2&&(RLe.$$scope={dirty:u,ctx:f}),mM.$set(RLe);const oA={};u&2&&(oA.$$scope={dirty:u,ctx:f}),hM.$set(oA);const PLe={};u&2&&(PLe.$$scope={dirty:u,ctx:f}),MM.$set(PLe);const BLe={};u&2&&(BLe.$$scope={dirty:u,ctx:f}),CM.$set(BLe);const rA={};u&2&&(rA.$$scope={dirty:u,ctx:f}),zM.$set(rA);const ILe={};u&2&&(ILe.$$scope={dirty:u,ctx:f}),QM.$set(ILe);const NLe={};u&2&&(NLe.$$scope={dirty:u,ctx:f}),aE.$set(NLe);const tA={};u&2&&(tA.$$scope={dirty:u,ctx:f}),sE.$set(tA);const qLe={};u&2&&(qLe.$$scope={dirty:u,ctx:f}),RE.$set(qLe);const jLe={};u&2&&(jLe.$$scope={dirty:u,ctx:f}),BE.$set(jLe);const aA={};u&2&&(aA.$$scope={dirty:u,ctx:f}),ZE.$set(aA);const DLe={};u&2&&(DLe.$$scope={dirty:u,ctx:f}),oC.$set(DLe);const GLe={};u&2&&(GLe.$$scope={dirty:u,ctx:f}),aC.$set(GLe);const nA={};u&2&&(nA.$$scope={dirty:u,ctx:f}),sC.$set(nA);const OLe={};u&2&&(OLe.$$scope={dirty:u,ctx:f}),iC.$set(OLe);const VLe={};u&2&&(VLe.$$scope={dirty:u,ctx:f}),cC.$set(VLe);const sA={};u&2&&(sA.$$scope={dirty:u,ctx:f}),kC.$set(sA);const XLe={};u&2&&(XLe.$$scope={dirty:u,ctx:f}),RC.$set(XLe);const zLe={};u&2&&(zLe.$$scope={dirty:u,ctx:f}),e5.$set(zLe);const lA={};u&2&&(lA.$$scope={dirty:u,ctx:f}),r5.$set(lA);const WLe={};u&2&&(WLe.$$scope={dirty:u,ctx:f}),a5.$set(WLe);const QLe={};u&2&&(QLe.$$scope={dirty:u,ctx:f}),s5.$set(QLe);const iA={};u&2&&(iA.$$scope={dirty:u,ctx:f}),i5.$set(iA);const HLe={};u&2&&(HLe.$$scope={dirty:u,ctx:f}),c5.$set(HLe);const ULe={};u&2&&(ULe.$$scope={dirty:u,ctx:f}),q5.$set(ULe);const dA={};u&2&&(dA.$$scope={dirty:u,ctx:f}),D5.$set(dA);const JLe={};u&2&&(JLe.$$scope={dirty:u,ctx:f}),Y5.$set(JLe);const YLe={};u&2&&(YLe.$$scope={dirty:u,ctx:f}),Z5.$set(YLe);const cA={};u&2&&(cA.$$scope={dirty:u,ctx:f}),g3.$set(cA);const KLe={};u&2&&(KLe.$$scope={dirty:u,ctx:f}),p3.$set(KLe);const ZLe={};u&2&&(ZLe.$$scope={dirty:u,ctx:f}),A3.$set(ZLe);const fA={};u&2&&(fA.$$scope={dirty:u,ctx:f}),y3.$set(fA);const eye={};u&2&&(eye.$$scope={dirty:u,ctx:f}),j3.$set(eye);const oye={};u&2&&(oye.$$scope={dirty:u,ctx:f}),G3.$set(oye);const mA={};u&2&&(mA.$$scope={dirty:u,ctx:f}),K3.$set(mA);const rye={};u&2&&(rye.$$scope={dirty:u,ctx:f}),ew.$set(rye);const tye={};u&2&&(tye.$$scope={dirty:u,ctx:f}),fw.$set(tye);const gA={};u&2&&(gA.$$scope={dirty:u,ctx:f}),gw.$set(gA);const aye={};u&2&&(aye.$$scope={dirty:u,ctx:f}),Mw.$set(aye);const nye={};u&2&&(nye.$$scope={dirty:u,ctx:f}),Cw.$set(nye);const hA={};u&2&&(hA.$$scope={dirty:u,ctx:f}),Rw.$set(hA);const sye={};u&2&&(sye.$$scope={dirty:u,ctx:f}),Bw.$set(sye);const lye={};u&2&&(lye.$$scope={dirty:u,ctx:f}),Nw.$set(lye);const pA={};u&2&&(pA.$$scope={dirty:u,ctx:f}),jw.$set(pA);const iye={};u&2&&(iye.$$scope={dirty:u,ctx:f}),Ow.$set(iye);const dye={};u&2&&(dye.$$scope={dirty:u,ctx:f}),Xw.$set(dye);const _A={};u&2&&(_A.$$scope={dirty:u,ctx:f}),Ww.$set(_A)},i(f){HWe||(E(c.$$.fragment,f),E(Sa.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(Gf.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Ty.$$.fragment,f),E(eh.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ly.$$.fragment,f),E(Ih.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Ry.$$.fragment,f),E(Fp.$$.fragment,f),E(Tp.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(jy.$$.fragment,f),E(Vp.$$.fragment,f),E(Xp.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(Qp.$$.fragment,f),E(zy.$$.fragment,f),E(Zu.$$.fragment,f),E(Wy.$$.fragment,f),E(Qy.$$.fragment,f),E(Uy.$$.fragment,f),E(o1.$$.fragment,f),E(Jy.$$.fragment,f),E(H1.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(e8.$$.fragment,f),E(J1.$$.fragment,f),E(o8.$$.fragment,f),E(q4.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(D4.$$.fragment,f),E(s8.$$.fragment,f),E(A2.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(y2.$$.fragment,f),E(f8.$$.fragment,f),E(U2.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(Y2.$$.fragment,f),E(_8.$$.fragment,f),E(Jb.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(Kb.$$.fragment,f),E(T8.$$.fragment,f),E($v.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(Sv.$$.fragment,f),E(A8.$$.fragment,f),E(Dv.$$.fragment,f),E(L8.$$.fragment,f),E(y8.$$.fragment,f),E($8.$$.fragment,f),E(Ov.$$.fragment,f),E(k8.$$.fragment,f),E(A0.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(y0.$$.fragment,f),E(I8.$$.fragment,f),E(bF.$$.fragment,f),E(N8.$$.fragment,f),E(q8.$$.fragment,f),E(D8.$$.fragment,f),E(FF.$$.fragment,f),E(G8.$$.fragment,f),E(EF.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(wF.$$.fragment,f),E(W8.$$.fragment,f),E(DF.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(OF.$$.fragment,f),E(Y8.$$.fragment,f),E(zF.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(o9.$$.fragment,f),E(QF.$$.fragment,f),E(r9.$$.fragment,f),E(JF.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(KF.$$.fragment,f),E(l9.$$.fragment,f),E(d6.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(f6.$$.fragment,f),E(m9.$$.fragment,f),E(b6.$$.fragment,f),E(g9.$$.fragment,f),E(h9.$$.fragment,f),E(_9.$$.fragment,f),E(F6.$$.fragment,f),E(u9.$$.fragment,f),E(S6.$$.fragment,f),E(b9.$$.fragment,f),E(v9.$$.fragment,f),E(T9.$$.fragment,f),E(P6.$$.fragment,f),E(M9.$$.fragment,f),E(q6.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(D6.$$.fragment,f),E(y9.$$.fragment,f),E(Q6.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(U6.$$.fragment,f),E(R9.$$.fragment,f),E(eT.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(N9.$$.fragment,f),E(rT.$$.fragment,f),E(q9.$$.fragment,f),E(sT.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(iT.$$.fragment,f),E(X9.$$.fragment,f),E(fT.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(H9.$$.fragment,f),E(gT.$$.fragment,f),E(U9.$$.fragment,f),E(FT.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(MT.$$.fragment,f),E(ex.$$.fragment,f),E(wT.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(LT.$$.fragment,f),E(nx.$$.fragment,f),E(C7.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(A7.$$.fragment,f),E(cx.$$.fragment,f),E(J7.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(K7.$$.fragment,f),E(px.$$.fragment,f),E(mM.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(hM.$$.fragment,f),E(Fx.$$.fragment,f),E(MM.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(CM.$$.fragment,f),E(wx.$$.fragment,f),E(zM.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(QM.$$.fragment,f),E($x.$$.fragment,f),E(aE.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(sE.$$.fragment,f),E(Bx.$$.fragment,f),E(RE.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(BE.$$.fragment,f),E(Dx.$$.fragment,f),E(ZE.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(oC.$$.fragment,f),E(zx.$$.fragment,f),E(aC.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(sC.$$.fragment,f),E(Yx.$$.fragment,f),E(iC.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(cC.$$.fragment,f),E(r$.$$.fragment,f),E(kC.$$.fragment,f),E(t$.$$.fragment,f),E(a$.$$.fragment,f),E(s$.$$.fragment,f),E(RC.$$.fragment,f),E(l$.$$.fragment,f),E(e5.$$.fragment,f),E(i$.$$.fragment,f),E(d$.$$.fragment,f),E(f$.$$.fragment,f),E(r5.$$.fragment,f),E(m$.$$.fragment,f),E(a5.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(_$.$$.fragment,f),E(s5.$$.fragment,f),E(u$.$$.fragment,f),E(i5.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E(c5.$$.fragment,f),E(M$.$$.fragment,f),E(q5.$$.fragment,f),E(E$.$$.fragment,f),E(C$.$$.fragment,f),E(A$.$$.fragment,f),E(D5.$$.fragment,f),E(L$.$$.fragment,f),E(Y5.$$.fragment,f),E(y$.$$.fragment,f),E(x$.$$.fragment,f),E(k$.$$.fragment,f),E(Z5.$$.fragment,f),E(S$.$$.fragment,f),E(g3.$$.fragment,f),E(R$.$$.fragment,f),E(P$.$$.fragment,f),E(I$.$$.fragment,f),E(p3.$$.fragment,f),E(N$.$$.fragment,f),E(A3.$$.fragment,f),E(q$.$$.fragment,f),E(j$.$$.fragment,f),E(G$.$$.fragment,f),E(y3.$$.fragment,f),E(O$.$$.fragment,f),E(j3.$$.fragment,f),E(V$.$$.fragment,f),E(X$.$$.fragment,f),E(W$.$$.fragment,f),E(G3.$$.fragment,f),E(Q$.$$.fragment,f),E(K3.$$.fragment,f),E(H$.$$.fragment,f),E(U$.$$.fragment,f),E(Y$.$$.fragment,f),E(ew.$$.fragment,f),E(K$.$$.fragment,f),E(fw.$$.fragment,f),E(Z$.$$.fragment,f),E(ek.$$.fragment,f),E(rk.$$.fragment,f),E(gw.$$.fragment,f),E(tk.$$.fragment,f),E(Mw.$$.fragment,f),E(ak.$$.fragment,f),E(nk.$$.fragment,f),E(lk.$$.fragment,f),E(Cw.$$.fragment,f),E(ik.$$.fragment,f),E(Rw.$$.fragment,f),E(dk.$$.fragment,f),E(ck.$$.fragment,f),E(mk.$$.fragment,f),E(Bw.$$.fragment,f),E(gk.$$.fragment,f),E(Nw.$$.fragment,f),E(hk.$$.fragment,f),E(pk.$$.fragment,f),E(uk.$$.fragment,f),E(jw.$$.fragment,f),E(bk.$$.fragment,f),E(Ow.$$.fragment,f),E(Fk.$$.fragment,f),E(Tk.$$.fragment,f),E(Ek.$$.fragment,f),E(Xw.$$.fragment,f),E(Ck.$$.fragment,f),E(Ww.$$.fragment,f),HWe=!0)},o(f){C(c.$$.fragment,f),C(Sa.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(Gf.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Ty.$$.fragment,f),C(eh.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ly.$$.fragment,f),C(Ih.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Ry.$$.fragment,f),C(Fp.$$.fragment,f),C(Tp.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(jy.$$.fragment,f),C(Vp.$$.fragment,f),C(Xp.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(Qp.$$.fragment,f),C(zy.$$.fragment,f),C(Zu.$$.fragment,f),C(Wy.$$.fragment,f),C(Qy.$$.fragment,f),C(Uy.$$.fragment,f),C(o1.$$.fragment,f),C(Jy.$$.fragment,f),C(H1.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(e8.$$.fragment,f),C(J1.$$.fragment,f),C(o8.$$.fragment,f),C(q4.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(D4.$$.fragment,f),C(s8.$$.fragment,f),C(A2.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(y2.$$.fragment,f),C(f8.$$.fragment,f),C(U2.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(Y2.$$.fragment,f),C(_8.$$.fragment,f),C(Jb.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(Kb.$$.fragment,f),C(T8.$$.fragment,f),C($v.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(Sv.$$.fragment,f),C(A8.$$.fragment,f),C(Dv.$$.fragment,f),C(L8.$$.fragment,f),C(y8.$$.fragment,f),C($8.$$.fragment,f),C(Ov.$$.fragment,f),C(k8.$$.fragment,f),C(A0.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(y0.$$.fragment,f),C(I8.$$.fragment,f),C(bF.$$.fragment,f),C(N8.$$.fragment,f),C(q8.$$.fragment,f),C(D8.$$.fragment,f),C(FF.$$.fragment,f),C(G8.$$.fragment,f),C(EF.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(wF.$$.fragment,f),C(W8.$$.fragment,f),C(DF.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(OF.$$.fragment,f),C(Y8.$$.fragment,f),C(zF.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(o9.$$.fragment,f),C(QF.$$.fragment,f),C(r9.$$.fragment,f),C(JF.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(KF.$$.fragment,f),C(l9.$$.fragment,f),C(d6.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(f6.$$.fragment,f),C(m9.$$.fragment,f),C(b6.$$.fragment,f),C(g9.$$.fragment,f),C(h9.$$.fragment,f),C(_9.$$.fragment,f),C(F6.$$.fragment,f),C(u9.$$.fragment,f),C(S6.$$.fragment,f),C(b9.$$.fragment,f),C(v9.$$.fragment,f),C(T9.$$.fragment,f),C(P6.$$.fragment,f),C(M9.$$.fragment,f),C(q6.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(D6.$$.fragment,f),C(y9.$$.fragment,f),C(Q6.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(U6.$$.fragment,f),C(R9.$$.fragment,f),C(eT.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(N9.$$.fragment,f),C(rT.$$.fragment,f),C(q9.$$.fragment,f),C(sT.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(iT.$$.fragment,f),C(X9.$$.fragment,f),C(fT.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(H9.$$.fragment,f),C(gT.$$.fragment,f),C(U9.$$.fragment,f),C(FT.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(MT.$$.fragment,f),C(ex.$$.fragment,f),C(wT.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(LT.$$.fragment,f),C(nx.$$.fragment,f),C(C7.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(A7.$$.fragment,f),C(cx.$$.fragment,f),C(J7.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(K7.$$.fragment,f),C(px.$$.fragment,f),C(mM.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(hM.$$.fragment,f),C(Fx.$$.fragment,f),C(MM.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(CM.$$.fragment,f),C(wx.$$.fragment,f),C(zM.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(QM.$$.fragment,f),C($x.$$.fragment,f),C(aE.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(sE.$$.fragment,f),C(Bx.$$.fragment,f),C(RE.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(BE.$$.fragment,f),C(Dx.$$.fragment,f),C(ZE.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(oC.$$.fragment,f),C(zx.$$.fragment,f),C(aC.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(sC.$$.fragment,f),C(Yx.$$.fragment,f),C(iC.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(cC.$$.fragment,f),C(r$.$$.fragment,f),C(kC.$$.fragment,f),C(t$.$$.fragment,f),C(a$.$$.fragment,f),C(s$.$$.fragment,f),C(RC.$$.fragment,f),C(l$.$$.fragment,f),C(e5.$$.fragment,f),C(i$.$$.fragment,f),C(d$.$$.fragment,f),C(f$.$$.fragment,f),C(r5.$$.fragment,f),C(m$.$$.fragment,f),C(a5.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(_$.$$.fragment,f),C(s5.$$.fragment,f),C(u$.$$.fragment,f),C(i5.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C(c5.$$.fragment,f),C(M$.$$.fragment,f),C(q5.$$.fragment,f),C(E$.$$.fragment,f),C(C$.$$.fragment,f),C(A$.$$.fragment,f),C(D5.$$.fragment,f),C(L$.$$.fragment,f),C(Y5.$$.fragment,f),C(y$.$$.fragment,f),C(x$.$$.fragment,f),C(k$.$$.fragment,f),C(Z5.$$.fragment,f),C(S$.$$.fragment,f),C(g3.$$.fragment,f),C(R$.$$.fragment,f),C(P$.$$.fragment,f),C(I$.$$.fragment,f),C(p3.$$.fragment,f),C(N$.$$.fragment,f),C(A3.$$.fragment,f),C(q$.$$.fragment,f),C(j$.$$.fragment,f),C(G$.$$.fragment,f),C(y3.$$.fragment,f),C(O$.$$.fragment,f),C(j3.$$.fragment,f),C(V$.$$.fragment,f),C(X$.$$.fragment,f),C(W$.$$.fragment,f),C(G3.$$.fragment,f),C(Q$.$$.fragment,f),C(K3.$$.fragment,f),C(H$.$$.fragment,f),C(U$.$$.fragment,f),C(Y$.$$.fragment,f),C(ew.$$.fragment,f),C(K$.$$.fragment,f),C(fw.$$.fragment,f),C(Z$.$$.fragment,f),C(ek.$$.fragment,f),C(rk.$$.fragment,f),C(gw.$$.fragment,f),C(tk.$$.fragment,f),C(Mw.$$.fragment,f),C(ak.$$.fragment,f),C(nk.$$.fragment,f),C(lk.$$.fragment,f),C(Cw.$$.fragment,f),C(ik.$$.fragment,f),C(Rw.$$.fragment,f),C(dk.$$.fragment,f),C(ck.$$.fragment,f),C(mk.$$.fragment,f),C(Bw.$$.fragment,f),C(gk.$$.fragment,f),C(Nw.$$.fragment,f),C(hk.$$.fragment,f),C(pk.$$.fragment,f),C(uk.$$.fragment,f),C(jw.$$.fragment,f),C(bk.$$.fragment,f),C(Ow.$$.fragment,f),C(Fk.$$.fragment,f),C(Tk.$$.fragment,f),C(Ek.$$.fragment,f),C(Xw.$$.fragment,f),C(Ck.$$.fragment,f),C(Ww.$$.fragment,f),HWe=!1},d(f){t(g),f&&t(v),f&&t(p),w(c),f&&t(If),f&&t(lt),f&&t(Oe),f&&t(Qe),f&&t(qf),w(Sa,f),f&&t(He),f&&t(Ae),f&&t(Ao),f&&t(Ra),f&&t(VXe),f&&t(Ii),w(py),f&&t(XXe),f&&t(qn),f&&t(zXe),w(_y,f),f&&t(WXe),f&&t(ZS),f&&t(QXe),w(Gf,f),f&&t(HXe),f&&t(Ni),w(uy),f&&t(UXe),f&&t(Lo),w(by),w(Ty),w(eh),w(My),f&&t(JXe),f&&t(ji),w(Ey),f&&t(YXe),f&&t(yo),w(Cy),w(Ly),w(Ih),w(yy),f&&t(KXe),f&&t(Di),w(xy),f&&t(ZXe),f&&t(xo),w($y),w(Ry),w(Fp),w(Tp),w(Py),f&&t(eze),f&&t(Gi),w(By),f&&t(oze),f&&t($o),w(Iy),w(jy),w(Vp),w(Xp),w(Dy),f&&t(rze),f&&t(Vi),w(Gy),f&&t(tze),f&&t(ko),w(Oy),w(Xy),w(Qp),w(zy),w(Zu),f&&t(aze),f&&t(Wi),w(Wy),f&&t(nze),f&&t(So),w(Qy),w(Uy),w(o1),w(Jy),w(H1),f&&t(sze),f&&t(Ui),w(Yy),f&&t(lze),f&&t(Ro),w(Ky),w(e8),w(J1),w(o8),w(q4),f&&t(ize),f&&t(Ki),w(r8),f&&t(dze),f&&t(Po),w(t8),w(n8),w(D4),w(s8),w(A2),f&&t(cze),f&&t(od),w(l8),f&&t(fze),f&&t(Bo),w(i8),w(c8),w(y2),w(f8),w(U2),f&&t(mze),f&&t(ad),w(m8),f&&t(gze),f&&t(Io),w(g8),w(p8),w(Y2),w(_8),w(Jb),f&&t(hze),f&&t(ld),w(u8),f&&t(pze),f&&t(No),w(b8),w(F8),w(Kb),w(T8),w($v),f&&t(_ze),f&&t(cd),w(M8),f&&t(uze),f&&t(qo),w(E8),w(w8),w(Sv),w(A8),w(Dv),f&&t(bze),f&&t(gd),w(L8),f&&t(vze),f&&t(Do),w(y8),w($8),w(Ov),w(k8),w(A0),f&&t(Fze),f&&t(_d),w(S8),f&&t(Tze),f&&t(Go),w(R8),w(B8),w(y0),w(I8),w(bF),f&&t(Mze),f&&t(vd),w(N8),f&&t(Eze),f&&t(Oo),w(q8),w(D8),w(FF),w(G8),w(EF),f&&t(Cze),f&&t(Md),w(O8),f&&t(wze),f&&t(Vo),w(V8),w(z8),w(wF),w(W8),w(DF),f&&t(Aze),f&&t(wd),w(Q8),f&&t(Lze),f&&t(Xo),w(H8),w(J8),w(OF),w(Y8),w(zF),f&&t(yze),f&&t(yd),w(K8),f&&t(xze),f&&t(zo),w(Z8),w(o9),w(QF),w(r9),w(JF),f&&t($ze),f&&t(kd),w(t9),f&&t(kze),f&&t(Wo),w(a9),w(s9),w(KF),w(l9),w(d6),f&&t(Sze),f&&t(Pd),w(i9),f&&t(Rze),f&&t(Qo),w(d9),w(f9),w(f6),w(m9),w(b6),f&&t(Pze),f&&t(Nd),w(g9),f&&t(Bze),f&&t(Ho),w(h9),w(_9),w(F6),w(u9),w(S6),f&&t(Ize),f&&t(Dd),w(b9),f&&t(Nze),f&&t(Uo),w(v9),w(T9),w(P6),w(M9),w(q6),f&&t(qze),f&&t(Vd),w(C9),f&&t(jze),f&&t(Jo),w(w9),w(L9),w(D6),w(y9),w(Q6),f&&t(Dze),f&&t(Wd),w(x9),f&&t(Gze),f&&t(Yo),w($9),w(S9),w(U6),w(R9),w(eT),f&&t(Oze),f&&t(Jd),w(P9),f&&t(Vze),f&&t(Ko),w(B9),w(N9),w(rT),w(q9),w(sT),f&&t(Xze),f&&t(Zd),w(D9),f&&t(zze),f&&t(Zo),w(G9),w(V9),w(iT),w(X9),w(fT),f&&t(Wze),f&&t(rc),w(z9),f&&t(Qze),f&&t(er),w(W9),w(H9),w(gT),w(U9),w(FT),f&&t(Hze),f&&t(nc),w(J9),f&&t(Uze),f&&t(or),w(Y9),w(Z9),w(MT),w(ex),w(wT),f&&t(Jze),f&&t(ic),w(ox),f&&t(Yze),f&&t(rr),w(rx),w(ax),w(LT),w(nx),w(C7),f&&t(Kze),f&&t(fc),w(sx),f&&t(Zze),f&&t(tr),w(lx),w(dx),w(A7),w(cx),w(J7),f&&t(eWe),f&&t(hc),w(fx),f&&t(oWe),f&&t(ar),w(mx),w(hx),w(K7),w(px),w(mM),f&&t(rWe),f&&t(uc),w(_x),f&&t(tWe),f&&t(nr),w(ux),w(vx),w(hM),w(Fx),w(MM),f&&t(aWe),f&&t(Fc),w(Tx),f&&t(nWe),f&&t(sr),w(Mx),w(Cx),w(CM),w(wx),w(zM),f&&t(sWe),f&&t(Ec),w(Ax),f&&t(lWe),f&&t(lr),w(Lx),w(xx),w(QM),w($x),w(aE),f&&t(iWe),f&&t(Ac),w(kx),f&&t(dWe),f&&t(ir),w(Sx),w(Px),w(sE),w(Bx),w(RE),f&&t(cWe),f&&t(xc),w(Ix),f&&t(fWe),f&&t(dr),w(Nx),w(jx),w(BE),w(Dx),w(ZE),f&&t(mWe),f&&t(Sc),w(Gx),f&&t(gWe),f&&t(cr),w(Ox),w(Xx),w(oC),w(zx),w(aC),f&&t(hWe),f&&t(Bc),w(Qx),f&&t(pWe),f&&t(fr),w(Hx),w(Jx),w(sC),w(Yx),w(iC),f&&t(_We),f&&t(qc),w(Kx),f&&t(uWe),f&&t(mr),w(Zx),w(o$),w(cC),w(r$),w(kC),f&&t(bWe),f&&t(Gc),w(t$),f&&t(vWe),f&&t(gr),w(a$),w(s$),w(RC),w(l$),w(e5),f&&t(FWe),f&&t(Xc),w(i$),f&&t(TWe),f&&t(hr),w(d$),w(f$),w(r5),w(m$),w(a5),f&&t(MWe),f&&t(Qc),w(g$),f&&t(EWe),f&&t(pr),w(h$),w(_$),w(s5),w(u$),w(i5),f&&t(CWe),f&&t(Jc),w(b$),f&&t(wWe),f&&t(_r),w(v$),w(T$),w(c5),w(M$),w(q5),f&&t(AWe),f&&t(Zc),w(E$),f&&t(LWe),f&&t(ur),w(C$),w(A$),w(D5),w(L$),w(Y5),f&&t(yWe),f&&t(rf),w(y$),f&&t(xWe),f&&t(br),w(x$),w(k$),w(Z5),w(S$),w(g3),f&&t($We),f&&t(nf),w(R$),f&&t(kWe),f&&t(vr),w(P$),w(I$),w(p3),w(N$),w(A3),f&&t(SWe),f&&t(df),w(q$),f&&t(RWe),f&&t(Fr),w(j$),w(G$),w(y3),w(O$),w(j3),f&&t(PWe),f&&t(mf),w(V$),f&&t(BWe),f&&t(Tr),w(X$),w(W$),w(G3),w(Q$),w(K3),f&&t(IWe),f&&t(pf),w(H$),f&&t(NWe),f&&t(Mr),w(U$),w(Y$),w(ew),w(K$),w(fw),f&&t(qWe),f&&t(bf),w(Z$),f&&t(jWe),f&&t(Er),w(ek),w(rk),w(gw),w(tk),w(Mw),f&&t(DWe),f&&t(Tf),w(ak),f&&t(GWe),f&&t(Cr),w(nk),w(lk),w(Cw),w(ik),w(Rw),f&&t(OWe),f&&t(Cf),w(dk),f&&t(VWe),f&&t(wr),w(ck),w(mk),w(Bw),w(gk),w(Nw),f&&t(XWe),f&&t(Lf),w(hk),f&&t(zWe),f&&t(Ar),w(pk),w(uk),w(jw),w(bk),w(Ow),f&&t(WWe),f&&t($f),w(Fk),f&&t(QWe),f&&t(Lr),w(Tk),w(Ek),w(Xw),w(Ck),w(Ww)}}}const rYt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function tYt($){return oUt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class cYt extends YHt{constructor(g){super();KHt(this,g,tYt,oYt,ZHt,{})}}export{cYt as default,rYt as metadata};
