import{S as _$t,i as b$t,s as v$t,e as a,k as l,w as F,t as o,M as F$t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as T$t,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as jVr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function M$t(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,C6,uf,je,We,hi,yn,w6,Ln,xn,A6,pi,$n,y6,ui,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),C6=o(")."),uf=l(),je=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),w6=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),A6=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),y6=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var W$=s(p);m=r(W$,"NewModelConfig"),W$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var Q$=s(fi);pf=r(Q$,"model_type"),Q$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var H$=s(mi);gi=r(H$,'"new-model"'),H$.forEach(t),C6=r(Ae,")."),Ae.forEach(t),uf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),w6=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var U$=s(Ln);xn=r(U$,"PreTrainedModel"),U$.forEach(t),A6=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),y6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var J$=s(ui);_f=r(J$,"NewModelConfig"),J$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,C6),b(Qe,uf,Ae),b(Qe,je,Ae),e(je,We),e(je,hi),e(hi,yn),e(je,w6),e(je,Ln),e(Ln,xn),e(je,A6),e(je,pi),e(pi,$n),e(je,y6),e(je,ui),e(ui,_f),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(je)}}}function E$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w$t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function A$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y$t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function L$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ekt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function okt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function akt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function skt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ikt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ckt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ukt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _kt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ekt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ckt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Akt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ykt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $kt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Skt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ikt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Okt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ukt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ykt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _St(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vSt(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,C6,uf,je,We,hi,yn,w6,Ln,xn,A6,pi,$n,y6,ui,_f,Ca,Qe,Ae,W$,_i,Q$,H$,Eo,wa,U$,bf,J$,gOe,rNe,bi,vf,ioe,L6,hOe,doe,pOe,tNe,kn,uOe,coe,_Oe,bOe,foe,vOe,FOe,aNe,x6,nNe,Y$,TOe,sNe,Ff,lNe,vi,Tf,moe,$6,MOe,goe,EOe,iNe,Co,k6,COe,S6,wOe,K$,AOe,yOe,LOe,R6,xOe,hoe,$Oe,kOe,SOe,Er,P6,ROe,poe,POe,BOe,Fi,IOe,uoe,qOe,NOe,_oe,jOe,DOe,GOe,A,Mf,boe,OOe,VOe,Z$,XOe,zOe,WOe,Ef,voe,QOe,HOe,ek,UOe,JOe,YOe,Cf,Foe,KOe,ZOe,ok,eVe,oVe,rVe,wf,Toe,tVe,aVe,rk,nVe,sVe,lVe,Af,Moe,iVe,dVe,tk,cVe,fVe,mVe,yf,Eoe,gVe,hVe,ak,pVe,uVe,_Ve,Lf,Coe,bVe,vVe,nk,FVe,TVe,MVe,xf,woe,EVe,CVe,sk,wVe,AVe,yVe,$f,Aoe,LVe,xVe,lk,$Ve,kVe,SVe,kf,yoe,RVe,PVe,ik,BVe,IVe,qVe,Sf,Loe,NVe,jVe,dk,DVe,GVe,OVe,Rf,xoe,VVe,XVe,ck,zVe,WVe,QVe,Pf,$oe,HVe,UVe,fk,JVe,YVe,KVe,Bf,koe,ZVe,eXe,mk,oXe,rXe,tXe,If,Soe,aXe,nXe,gk,sXe,lXe,iXe,qf,Roe,dXe,cXe,hk,fXe,mXe,gXe,Nf,Poe,hXe,pXe,pk,uXe,_Xe,bXe,jf,Boe,vXe,FXe,uk,TXe,MXe,EXe,Df,Ioe,CXe,wXe,_k,AXe,yXe,LXe,Gf,qoe,xXe,$Xe,bk,kXe,SXe,RXe,Of,Noe,PXe,BXe,vk,IXe,qXe,NXe,Vf,joe,jXe,DXe,Fk,GXe,OXe,VXe,Xf,Doe,XXe,zXe,Tk,WXe,QXe,HXe,zf,Goe,UXe,JXe,Mk,YXe,KXe,ZXe,Wf,Ooe,eze,oze,Ek,rze,tze,aze,Qf,Voe,nze,sze,Ck,lze,ize,dze,Hf,Xoe,cze,fze,wk,mze,gze,hze,Uf,zoe,pze,uze,Ak,_ze,bze,vze,Jf,Woe,Fze,Tze,yk,Mze,Eze,Cze,Yf,Qoe,wze,Aze,Lk,yze,Lze,xze,Kf,Hoe,$ze,kze,xk,Sze,Rze,Pze,Zf,Uoe,Bze,Ize,$k,qze,Nze,jze,em,Joe,Dze,Gze,kk,Oze,Vze,Xze,om,Yoe,zze,Wze,Sk,Qze,Hze,Uze,rm,Koe,Jze,Yze,Rk,Kze,Zze,eWe,tm,Zoe,oWe,rWe,Pk,tWe,aWe,nWe,am,ere,sWe,lWe,Bk,iWe,dWe,cWe,nm,ore,fWe,mWe,Ik,gWe,hWe,pWe,sm,rre,uWe,_We,qk,bWe,vWe,FWe,lm,tre,TWe,MWe,Nk,EWe,CWe,wWe,im,are,AWe,yWe,jk,LWe,xWe,$We,dm,nre,kWe,SWe,Dk,RWe,PWe,BWe,cm,sre,IWe,qWe,Gk,NWe,jWe,DWe,fm,lre,GWe,OWe,Ok,VWe,XWe,zWe,mm,ire,WWe,QWe,Vk,HWe,UWe,JWe,gm,dre,YWe,KWe,Xk,ZWe,eQe,oQe,hm,cre,rQe,tQe,zk,aQe,nQe,sQe,pm,fre,lQe,iQe,Wk,dQe,cQe,fQe,um,mre,mQe,gQe,Qk,hQe,pQe,uQe,_m,gre,_Qe,bQe,Hk,vQe,FQe,TQe,bm,hre,MQe,EQe,Uk,CQe,wQe,AQe,vm,pre,yQe,LQe,Jk,xQe,$Qe,kQe,Fm,ure,SQe,RQe,Yk,PQe,BQe,IQe,Tm,_re,qQe,NQe,Kk,jQe,DQe,GQe,Mm,bre,OQe,VQe,Zk,XQe,zQe,WQe,Em,vre,QQe,HQe,eS,UQe,JQe,YQe,Cm,Fre,KQe,ZQe,oS,eHe,oHe,rHe,wm,Tre,tHe,aHe,rS,nHe,sHe,lHe,Am,Mre,iHe,dHe,tS,cHe,fHe,mHe,ym,Ere,gHe,hHe,aS,pHe,uHe,_He,Lm,Cre,bHe,vHe,nS,FHe,THe,MHe,xm,wre,EHe,CHe,sS,wHe,AHe,yHe,$m,Are,LHe,xHe,lS,$He,kHe,SHe,km,yre,RHe,PHe,iS,BHe,IHe,qHe,Sm,Lre,NHe,jHe,dS,DHe,GHe,OHe,Rm,xre,VHe,XHe,cS,zHe,WHe,QHe,Pm,$re,HHe,UHe,fS,JHe,YHe,KHe,Bm,kre,ZHe,eUe,mS,oUe,rUe,tUe,Im,Sre,aUe,nUe,gS,sUe,lUe,iUe,qm,Rre,dUe,cUe,hS,fUe,mUe,gUe,Nm,Pre,hUe,pUe,pS,uUe,_Ue,bUe,jm,Bre,vUe,FUe,uS,TUe,MUe,EUe,Dm,Ire,CUe,wUe,_S,AUe,yUe,LUe,Gm,qre,xUe,$Ue,bS,kUe,SUe,RUe,Om,Nre,PUe,BUe,vS,IUe,qUe,NUe,Vm,jre,jUe,DUe,FS,GUe,OUe,VUe,Xm,Dre,XUe,zUe,TS,WUe,QUe,HUe,zm,Gre,UUe,JUe,MS,YUe,KUe,ZUe,Wm,Ore,eJe,oJe,ES,rJe,tJe,aJe,Qm,Vre,nJe,sJe,CS,lJe,iJe,dJe,Hm,Xre,cJe,fJe,wS,mJe,gJe,hJe,Um,zre,pJe,uJe,AS,_Je,bJe,vJe,Jm,Wre,FJe,TJe,yS,MJe,EJe,CJe,Ym,Qre,wJe,AJe,LS,yJe,LJe,xJe,Km,Hre,$Je,kJe,xS,SJe,RJe,PJe,Zm,Ure,BJe,IJe,$S,qJe,NJe,jJe,eg,Jre,DJe,GJe,kS,OJe,VJe,XJe,og,Yre,zJe,WJe,SS,QJe,HJe,UJe,rg,Kre,JJe,YJe,RS,KJe,ZJe,eYe,tg,Zre,oYe,rYe,PS,tYe,aYe,nYe,ag,ete,sYe,lYe,BS,iYe,dYe,cYe,ng,ote,fYe,mYe,IS,gYe,hYe,pYe,sg,rte,uYe,_Ye,qS,bYe,vYe,FYe,lg,tte,TYe,MYe,NS,EYe,CYe,wYe,ig,ate,AYe,yYe,jS,LYe,xYe,$Ye,dg,nte,kYe,SYe,DS,RYe,PYe,BYe,cg,ste,IYe,qYe,GS,NYe,jYe,DYe,fg,lte,GYe,OYe,OS,VYe,XYe,zYe,mg,ite,WYe,QYe,VS,HYe,UYe,JYe,gg,dte,YYe,KYe,XS,ZYe,eKe,oKe,hg,cte,rKe,tKe,zS,aKe,nKe,sKe,pg,fte,lKe,iKe,WS,dKe,cKe,fKe,ug,mte,mKe,gKe,QS,hKe,pKe,uKe,_g,gte,_Ke,bKe,HS,vKe,FKe,TKe,bg,hte,MKe,EKe,US,CKe,wKe,AKe,vg,pte,yKe,LKe,JS,xKe,$Ke,kKe,Fg,ute,SKe,RKe,YS,PKe,BKe,IKe,Tg,_te,qKe,NKe,KS,jKe,DKe,GKe,Mg,bte,OKe,VKe,ZS,XKe,zKe,WKe,Eg,QKe,Cg,B6,HKe,vte,UKe,dNe,Ti,wg,Fte,I6,JKe,Tte,YKe,cNe,wo,q6,KKe,N6,ZKe,eR,eZe,oZe,rZe,j6,tZe,Mte,aZe,nZe,sZe,Cr,D6,lZe,Ete,iZe,dZe,Aa,cZe,Cte,fZe,mZe,wte,gZe,hZe,Ate,pZe,uZe,_Ze,k,Sn,yte,bZe,vZe,oR,FZe,TZe,rR,MZe,EZe,CZe,Rn,Lte,wZe,AZe,tR,yZe,LZe,aR,xZe,$Ze,kZe,Pn,xte,SZe,RZe,nR,PZe,BZe,sR,IZe,qZe,NZe,Ag,$te,jZe,DZe,lR,GZe,OZe,VZe,Bn,kte,XZe,zZe,iR,WZe,QZe,dR,HZe,UZe,JZe,yg,Ste,YZe,KZe,cR,ZZe,eeo,oeo,Lg,Rte,reo,teo,fR,aeo,neo,seo,xg,Pte,leo,ieo,mR,deo,ceo,feo,In,Bte,meo,geo,gR,heo,peo,hR,ueo,_eo,beo,qn,Ite,veo,Feo,pR,Teo,Meo,uR,Eeo,Ceo,weo,Nn,qte,Aeo,yeo,_R,Leo,xeo,bR,$eo,keo,Seo,$g,Nte,Reo,Peo,vR,Beo,Ieo,qeo,kg,jte,Neo,jeo,FR,Deo,Geo,Oeo,jn,Dte,Veo,Xeo,TR,zeo,Weo,MR,Qeo,Heo,Ueo,Sg,Gte,Jeo,Yeo,ER,Keo,Zeo,eoo,Dn,Ote,ooo,roo,CR,too,aoo,wR,noo,soo,loo,Gn,Vte,ioo,doo,AR,coo,foo,yR,moo,goo,hoo,On,Xte,poo,uoo,LR,_oo,boo,xR,voo,Foo,Too,Rg,zte,Moo,Eoo,$R,Coo,woo,Aoo,Vn,Wte,yoo,Loo,kR,xoo,$oo,SR,koo,Soo,Roo,Xn,Qte,Poo,Boo,RR,Ioo,qoo,PR,Noo,joo,Doo,zn,Hte,Goo,Ooo,BR,Voo,Xoo,IR,zoo,Woo,Qoo,Wn,Ute,Hoo,Uoo,qR,Joo,Yoo,NR,Koo,Zoo,ero,Qn,Jte,oro,rro,jR,tro,aro,DR,nro,sro,lro,Hn,Yte,iro,dro,GR,cro,fro,OR,mro,gro,hro,Pg,Kte,pro,uro,VR,_ro,bro,vro,Un,Zte,Fro,Tro,XR,Mro,Ero,zR,Cro,wro,Aro,Bg,eae,yro,Lro,WR,xro,$ro,kro,Jn,oae,Sro,Rro,QR,Pro,Bro,HR,Iro,qro,Nro,Yn,rae,jro,Dro,UR,Gro,Oro,JR,Vro,Xro,zro,Kn,tae,Wro,Qro,YR,Hro,Uro,KR,Jro,Yro,Kro,Ig,aae,Zro,eto,ZR,oto,rto,tto,Zn,nae,ato,nto,eP,sto,lto,oP,ito,dto,cto,es,sae,fto,mto,rP,gto,hto,tP,pto,uto,_to,qg,lae,bto,vto,aP,Fto,Tto,Mto,os,iae,Eto,Cto,nP,wto,Ato,sP,yto,Lto,xto,rs,dae,$to,kto,lP,Sto,Rto,iP,Pto,Bto,Ito,ts,cae,qto,Nto,dP,jto,Dto,cP,Gto,Oto,Vto,as,fae,Xto,zto,fP,Wto,Qto,mP,Hto,Uto,Jto,ns,mae,Yto,Kto,gP,Zto,eao,hP,oao,rao,tao,ss,gae,aao,nao,pP,sao,lao,uP,iao,dao,cao,ls,hae,fao,mao,_P,gao,hao,bP,pao,uao,_ao,Ng,pae,bao,vao,vP,Fao,Tao,Mao,is,uae,Eao,Cao,FP,wao,Aao,TP,yao,Lao,xao,jg,_ae,$ao,kao,MP,Sao,Rao,Pao,Dg,bae,Bao,Iao,EP,qao,Nao,jao,ds,vae,Dao,Gao,CP,Oao,Vao,wP,Xao,zao,Wao,cs,Fae,Qao,Hao,AP,Uao,Jao,yP,Yao,Kao,Zao,fs,Tae,eno,ono,LP,rno,tno,xP,ano,nno,sno,Gg,Mae,lno,ino,$P,dno,cno,fno,ms,Eae,mno,gno,kP,hno,pno,SP,uno,_no,bno,gs,Cae,vno,Fno,RP,Tno,Mno,PP,Eno,Cno,wno,hs,wae,Ano,yno,BP,Lno,xno,IP,$no,kno,Sno,ps,Aae,Rno,Pno,qP,Bno,Ino,NP,qno,Nno,jno,us,yae,Dno,Gno,jP,Ono,Vno,DP,Xno,zno,Wno,Og,Lae,Qno,Hno,GP,Uno,Jno,Yno,_s,xae,Kno,Zno,OP,eso,oso,VP,rso,tso,aso,Vg,$ae,nso,sso,XP,lso,iso,dso,Xg,kae,cso,fso,zP,mso,gso,hso,zg,Sae,pso,uso,WP,_so,bso,vso,Wg,Rae,Fso,Tso,QP,Mso,Eso,Cso,bs,Pae,wso,Aso,HP,yso,Lso,UP,xso,$so,kso,Qg,Bae,Sso,Rso,JP,Pso,Bso,Iso,vs,Iae,qso,Nso,YP,jso,Dso,KP,Gso,Oso,Vso,Fs,qae,Xso,zso,ZP,Wso,Qso,eB,Hso,Uso,Jso,Ts,Nae,Yso,Kso,oB,Zso,elo,rB,olo,rlo,tlo,Ms,jae,alo,nlo,tB,slo,llo,aB,ilo,dlo,clo,Es,Dae,flo,mlo,nB,glo,hlo,sB,plo,ulo,_lo,Cs,Gae,blo,vlo,lB,Flo,Tlo,iB,Mlo,Elo,Clo,Hg,Oae,wlo,Alo,dB,ylo,Llo,xlo,Ug,Vae,$lo,klo,cB,Slo,Rlo,Plo,ws,Xae,Blo,Ilo,fB,qlo,Nlo,mB,jlo,Dlo,Glo,As,zae,Olo,Vlo,gB,Xlo,zlo,hB,Wlo,Qlo,Hlo,ys,Wae,Ulo,Jlo,pB,Ylo,Klo,uB,Zlo,eio,oio,Jg,Qae,rio,tio,_B,aio,nio,sio,Yg,Hae,lio,iio,bB,dio,cio,fio,Kg,Uae,mio,gio,vB,hio,pio,uio,Ls,Jae,_io,bio,FB,vio,Fio,TB,Tio,Mio,Eio,Zg,Yae,Cio,wio,MB,Aio,yio,Lio,eh,Kae,xio,$io,EB,kio,Sio,Rio,oh,Zae,Pio,Bio,CB,Iio,qio,Nio,xs,ene,jio,Dio,wB,Gio,Oio,AB,Vio,Xio,zio,rh,one,Wio,Qio,yB,Hio,Uio,Jio,th,rne,Yio,Kio,LB,Zio,edo,odo,$s,tne,rdo,tdo,xB,ado,ndo,$B,sdo,ldo,ido,ks,ane,ddo,cdo,kB,fdo,mdo,SB,gdo,hdo,pdo,Ss,nne,udo,_do,RB,bdo,vdo,PB,Fdo,Tdo,Mdo,Rs,sne,Edo,Cdo,BB,wdo,Ado,IB,ydo,Ldo,xdo,ah,$do,nh,G6,kdo,lne,Sdo,fNe,Mi,sh,ine,O6,Rdo,dne,Pdo,mNe,Ao,V6,Bdo,X6,Ido,qB,qdo,Ndo,jdo,z6,Ddo,cne,Gdo,Odo,Vdo,He,W6,Xdo,fne,zdo,Wdo,ya,Qdo,mne,Hdo,Udo,gne,Jdo,Ydo,hne,Kdo,Zdo,eco,Y,lh,pne,oco,rco,NB,tco,aco,nco,ih,une,sco,lco,jB,ico,dco,cco,dh,_ne,fco,mco,DB,gco,hco,pco,ch,bne,uco,_co,GB,bco,vco,Fco,fh,vne,Tco,Mco,OB,Eco,Cco,wco,mh,Fne,Aco,yco,VB,Lco,xco,$co,gh,Tne,kco,Sco,XB,Rco,Pco,Bco,hh,Mne,Ico,qco,zB,Nco,jco,Dco,ph,Ene,Gco,Oco,WB,Vco,Xco,zco,uh,Cne,Wco,Qco,QB,Hco,Uco,Jco,_h,wne,Yco,Kco,HB,Zco,efo,ofo,bh,Ane,rfo,tfo,UB,afo,nfo,sfo,vh,yne,lfo,ifo,JB,dfo,cfo,ffo,Fh,Lne,mfo,gfo,YB,hfo,pfo,ufo,Th,xne,_fo,bfo,KB,vfo,Ffo,Tfo,Mh,$ne,Mfo,Efo,ZB,Cfo,wfo,Afo,Eh,kne,yfo,Lfo,eI,xfo,$fo,kfo,Ch,Sne,Sfo,Rfo,oI,Pfo,Bfo,Ifo,wh,Rne,qfo,Nfo,rI,jfo,Dfo,Gfo,Ah,Pne,Ofo,Vfo,tI,Xfo,zfo,Wfo,yh,Bne,Qfo,Hfo,aI,Ufo,Jfo,Yfo,Lh,Ine,Kfo,Zfo,nI,emo,omo,rmo,xh,qne,tmo,amo,sI,nmo,smo,lmo,$h,Nne,imo,dmo,lI,cmo,fmo,mmo,kh,jne,gmo,hmo,iI,pmo,umo,_mo,Sh,Dne,bmo,vmo,dI,Fmo,Tmo,Mmo,Rh,Gne,Emo,Cmo,cI,wmo,Amo,ymo,Ph,One,Lmo,xmo,fI,$mo,kmo,Smo,Bh,Vne,Rmo,Pmo,mI,Bmo,Imo,qmo,Ih,Nmo,qh,jmo,Nh,Q6,Dmo,Xne,Gmo,gNe,Ei,jh,zne,H6,Omo,Wne,Vmo,hNe,yo,U6,Xmo,J6,zmo,gI,Wmo,Qmo,Hmo,Y6,Umo,Qne,Jmo,Ymo,Kmo,Ue,K6,Zmo,Hne,ego,ogo,Ci,rgo,Une,tgo,ago,Jne,ngo,sgo,lgo,he,Dh,Yne,igo,dgo,hI,cgo,fgo,mgo,Gh,Kne,ggo,hgo,Zne,pgo,ugo,_go,Oh,ese,bgo,vgo,pI,Fgo,Tgo,Mgo,Vh,ose,Ego,Cgo,uI,wgo,Ago,ygo,Xh,rse,Lgo,xgo,_I,$go,kgo,Sgo,zh,tse,Rgo,Pgo,bI,Bgo,Igo,qgo,Wh,ase,Ngo,jgo,vI,Dgo,Ggo,Ogo,Qh,nse,Vgo,Xgo,FI,zgo,Wgo,Qgo,Hh,sse,Hgo,Ugo,TI,Jgo,Ygo,Kgo,Uh,lse,Zgo,eho,MI,oho,rho,tho,Jh,ise,aho,nho,EI,sho,lho,iho,Yh,dse,dho,cho,CI,fho,mho,gho,Kh,cse,hho,pho,wI,uho,_ho,bho,Zh,fse,vho,Fho,AI,Tho,Mho,Eho,ep,mse,Cho,who,yI,Aho,yho,Lho,op,gse,xho,$ho,LI,kho,Sho,Rho,rp,hse,Pho,Bho,xI,Iho,qho,Nho,tp,jho,ap,Dho,np,Z6,Gho,pse,Oho,pNe,wi,sp,use,eA,Vho,_se,Xho,uNe,Lo,oA,zho,Ai,Who,$I,Qho,Hho,kI,Uho,Jho,Yho,rA,Kho,bse,Zho,epo,opo,tt,tA,rpo,vse,tpo,apo,yi,npo,Fse,spo,lpo,SI,ipo,dpo,cpo,lp,fpo,Je,aA,mpo,Tse,gpo,hpo,La,ppo,Mse,upo,_po,Ese,bpo,vpo,Cse,Fpo,Tpo,Mpo,x,ip,wse,Epo,Cpo,RI,wpo,Apo,ypo,dp,Ase,Lpo,xpo,PI,$po,kpo,Spo,cp,yse,Rpo,Ppo,BI,Bpo,Ipo,qpo,fp,Lse,Npo,jpo,II,Dpo,Gpo,Opo,mp,xse,Vpo,Xpo,qI,zpo,Wpo,Qpo,gp,$se,Hpo,Upo,NI,Jpo,Ypo,Kpo,hp,kse,Zpo,euo,jI,ouo,ruo,tuo,pp,Sse,auo,nuo,DI,suo,luo,iuo,up,Rse,duo,cuo,GI,fuo,muo,guo,_p,Pse,huo,puo,OI,uuo,_uo,buo,bp,Bse,vuo,Fuo,VI,Tuo,Muo,Euo,vp,Ise,Cuo,wuo,XI,Auo,yuo,Luo,Fp,qse,xuo,$uo,zI,kuo,Suo,Ruo,Tp,Nse,Puo,Buo,WI,Iuo,quo,Nuo,Mp,jse,juo,Duo,QI,Guo,Ouo,Vuo,Ep,Dse,Xuo,zuo,HI,Wuo,Quo,Huo,Cp,Gse,Uuo,Juo,UI,Yuo,Kuo,Zuo,wp,Ose,e_o,o_o,JI,r_o,t_o,a_o,Ap,Vse,n_o,s_o,YI,l_o,i_o,d_o,yp,Xse,c_o,f_o,KI,m_o,g_o,h_o,Lp,zse,p_o,u_o,ZI,__o,b_o,v_o,xp,Wse,F_o,T_o,eq,M_o,E_o,C_o,$p,Qse,w_o,A_o,oq,y_o,L_o,x_o,kp,Hse,$_o,k_o,rq,S_o,R_o,P_o,Sp,Use,B_o,I_o,tq,q_o,N_o,j_o,Rp,Jse,D_o,G_o,aq,O_o,V_o,X_o,Pp,Yse,z_o,W_o,nq,Q_o,H_o,U_o,Bp,Kse,J_o,Y_o,sq,K_o,Z_o,e1o,Ip,Zse,o1o,r1o,lq,t1o,a1o,n1o,qp,ele,s1o,l1o,iq,i1o,d1o,c1o,Np,ole,f1o,m1o,dq,g1o,h1o,p1o,jp,rle,u1o,_1o,cq,b1o,v1o,F1o,Ps,tle,T1o,M1o,fq,E1o,C1o,mq,w1o,A1o,y1o,Dp,ale,L1o,x1o,gq,$1o,k1o,S1o,Gp,nle,R1o,P1o,hq,B1o,I1o,q1o,Op,sle,N1o,j1o,pq,D1o,G1o,O1o,Vp,lle,V1o,X1o,uq,z1o,W1o,Q1o,Xp,ile,H1o,U1o,_q,J1o,Y1o,K1o,zp,dle,Z1o,e9o,bq,o9o,r9o,t9o,Wp,cle,a9o,n9o,vq,s9o,l9o,i9o,Qp,fle,d9o,c9o,Fq,f9o,m9o,g9o,Hp,mle,h9o,p9o,Tq,u9o,_9o,b9o,Up,gle,v9o,F9o,Mq,T9o,M9o,E9o,Jp,hle,C9o,w9o,Eq,A9o,y9o,L9o,Yp,ple,x9o,$9o,Cq,k9o,S9o,R9o,Kp,ule,P9o,B9o,wq,I9o,q9o,N9o,Zp,_le,j9o,D9o,Aq,G9o,O9o,V9o,eu,ble,X9o,z9o,yq,W9o,Q9o,H9o,ou,vle,U9o,J9o,Lq,Y9o,K9o,Z9o,ru,Fle,ebo,obo,xq,rbo,tbo,abo,tu,Tle,nbo,sbo,$q,lbo,ibo,dbo,au,Mle,cbo,fbo,kq,mbo,gbo,hbo,nu,Ele,pbo,ubo,Sq,_bo,bbo,vbo,su,Cle,Fbo,Tbo,Rq,Mbo,Ebo,Cbo,lu,wle,wbo,Abo,Pq,ybo,Lbo,xbo,iu,Ale,$bo,kbo,Bq,Sbo,Rbo,Pbo,du,yle,Bbo,Ibo,Iq,qbo,Nbo,jbo,cu,Lle,Dbo,Gbo,qq,Obo,Vbo,Xbo,fu,xle,zbo,Wbo,Nq,Qbo,Hbo,Ubo,mu,$le,Jbo,Ybo,jq,Kbo,Zbo,e2o,gu,kle,o2o,r2o,Dq,t2o,a2o,n2o,hu,Sle,s2o,l2o,Gq,i2o,d2o,c2o,pu,Rle,f2o,m2o,Oq,g2o,h2o,p2o,uu,Ple,u2o,_2o,Vq,b2o,v2o,F2o,_u,Ble,T2o,M2o,Xq,E2o,C2o,w2o,bu,Ile,A2o,y2o,zq,L2o,x2o,$2o,vu,qle,k2o,S2o,Wq,R2o,P2o,B2o,Fu,Nle,I2o,q2o,Qq,N2o,j2o,D2o,Tu,jle,G2o,O2o,Hq,V2o,X2o,z2o,Mu,Dle,W2o,Q2o,Uq,H2o,U2o,J2o,Eu,Gle,Y2o,K2o,Jq,Z2o,e4o,o4o,Cu,Ole,r4o,t4o,Yq,a4o,n4o,s4o,wu,Vle,l4o,i4o,Kq,d4o,c4o,f4o,Au,Xle,m4o,g4o,Zq,h4o,p4o,u4o,yu,zle,_4o,b4o,eN,v4o,F4o,T4o,Lu,Wle,M4o,E4o,oN,C4o,w4o,A4o,xu,Qle,y4o,L4o,rN,x4o,$4o,k4o,$u,Hle,S4o,R4o,tN,P4o,B4o,I4o,ku,Ule,q4o,N4o,aN,j4o,D4o,G4o,Su,Jle,O4o,V4o,nN,X4o,z4o,W4o,Ru,Yle,Q4o,H4o,sN,U4o,J4o,Y4o,Pu,Kle,K4o,Z4o,lN,evo,ovo,rvo,Bu,Zle,tvo,avo,iN,nvo,svo,lvo,Iu,eie,ivo,dvo,dN,cvo,fvo,mvo,qu,oie,gvo,hvo,cN,pvo,uvo,_vo,Nu,rie,bvo,vvo,fN,Fvo,Tvo,Mvo,ju,tie,Evo,Cvo,mN,wvo,Avo,yvo,Du,aie,Lvo,xvo,gN,$vo,kvo,Svo,Gu,nie,Rvo,Pvo,hN,Bvo,Ivo,qvo,Ou,sie,Nvo,jvo,pN,Dvo,Gvo,Ovo,Vu,lie,Vvo,Xvo,uN,zvo,Wvo,Qvo,Xu,iie,Hvo,Uvo,_N,Jvo,Yvo,Kvo,zu,die,Zvo,eFo,bN,oFo,rFo,tFo,Wu,cie,aFo,nFo,vN,sFo,lFo,iFo,Qu,fie,dFo,cFo,FN,fFo,mFo,gFo,Hu,mie,hFo,pFo,TN,uFo,_Fo,bFo,Uu,gie,vFo,FFo,MN,TFo,MFo,EFo,Ju,hie,CFo,wFo,EN,AFo,yFo,LFo,Yu,pie,xFo,$Fo,CN,kFo,SFo,RFo,Ku,uie,PFo,BFo,wN,IFo,qFo,NFo,Zu,_ie,jFo,DFo,AN,GFo,OFo,VFo,e_,bie,XFo,zFo,yN,WFo,QFo,HFo,o_,UFo,vie,JFo,YFo,Fie,KFo,ZFo,r_,_Ne,Li,t_,Tie,nA,eTo,Mie,oTo,bNe,xo,sA,rTo,xi,tTo,LN,aTo,nTo,xN,sTo,lTo,iTo,lA,dTo,Eie,cTo,fTo,mTo,at,iA,gTo,Cie,hTo,pTo,$i,uTo,wie,_To,bTo,$N,vTo,FTo,TTo,a_,MTo,Ye,dA,ETo,Aie,CTo,wTo,xa,ATo,yie,yTo,LTo,Lie,xTo,$To,xie,kTo,STo,RTo,G,n_,$ie,PTo,BTo,kN,ITo,qTo,NTo,s_,kie,jTo,DTo,SN,GTo,OTo,VTo,l_,Sie,XTo,zTo,RN,WTo,QTo,HTo,i_,Rie,UTo,JTo,PN,YTo,KTo,ZTo,d_,Pie,e7o,o7o,BN,r7o,t7o,a7o,c_,Bie,n7o,s7o,IN,l7o,i7o,d7o,f_,Iie,c7o,f7o,qN,m7o,g7o,h7o,m_,qie,p7o,u7o,NN,_7o,b7o,v7o,g_,Nie,F7o,T7o,jN,M7o,E7o,C7o,h_,jie,w7o,A7o,DN,y7o,L7o,x7o,p_,Die,$7o,k7o,GN,S7o,R7o,P7o,u_,Gie,B7o,I7o,ON,q7o,N7o,j7o,__,Oie,D7o,G7o,VN,O7o,V7o,X7o,b_,Vie,z7o,W7o,XN,Q7o,H7o,U7o,v_,Xie,J7o,Y7o,zN,K7o,Z7o,eMo,F_,zie,oMo,rMo,WN,tMo,aMo,nMo,T_,Wie,sMo,lMo,QN,iMo,dMo,cMo,M_,Qie,fMo,mMo,HN,gMo,hMo,pMo,E_,Hie,uMo,_Mo,UN,bMo,vMo,FMo,C_,Uie,TMo,MMo,JN,EMo,CMo,wMo,w_,Jie,AMo,yMo,YN,LMo,xMo,$Mo,A_,Yie,kMo,SMo,KN,RMo,PMo,BMo,y_,Kie,IMo,qMo,ZN,NMo,jMo,DMo,L_,Zie,GMo,OMo,ej,VMo,XMo,zMo,x_,ede,WMo,QMo,oj,HMo,UMo,JMo,$_,ode,YMo,KMo,rj,ZMo,eEo,oEo,k_,rde,rEo,tEo,tj,aEo,nEo,sEo,S_,tde,lEo,iEo,aj,dEo,cEo,fEo,R_,ade,mEo,gEo,nj,hEo,pEo,uEo,P_,nde,_Eo,bEo,sj,vEo,FEo,TEo,B_,sde,MEo,EEo,lj,CEo,wEo,AEo,I_,lde,yEo,LEo,ij,xEo,$Eo,kEo,q_,ide,SEo,REo,dj,PEo,BEo,IEo,N_,dde,qEo,NEo,cj,jEo,DEo,GEo,j_,cde,OEo,VEo,fj,XEo,zEo,WEo,D_,fde,QEo,HEo,mj,UEo,JEo,YEo,G_,mde,KEo,ZEo,gj,eCo,oCo,rCo,O_,gde,tCo,aCo,hj,nCo,sCo,lCo,V_,hde,iCo,dCo,pj,cCo,fCo,mCo,X_,pde,gCo,hCo,uj,pCo,uCo,_Co,z_,ude,bCo,vCo,_j,FCo,TCo,MCo,W_,_de,ECo,CCo,bj,wCo,ACo,yCo,Q_,LCo,bde,xCo,$Co,vde,kCo,SCo,H_,vNe,ki,U_,Fde,cA,RCo,Tde,PCo,FNe,$o,fA,BCo,Si,ICo,vj,qCo,NCo,Fj,jCo,DCo,GCo,mA,OCo,Mde,VCo,XCo,zCo,nt,gA,WCo,Ede,QCo,HCo,Ri,UCo,Cde,JCo,YCo,Tj,KCo,ZCo,e5o,J_,o5o,Ke,hA,r5o,wde,t5o,a5o,$a,n5o,Ade,s5o,l5o,yde,i5o,d5o,Lde,c5o,f5o,m5o,z,Y_,xde,g5o,h5o,Mj,p5o,u5o,_5o,K_,$de,b5o,v5o,Ej,F5o,T5o,M5o,Z_,kde,E5o,C5o,Cj,w5o,A5o,y5o,e1,Sde,L5o,x5o,wj,$5o,k5o,S5o,o1,Rde,R5o,P5o,Aj,B5o,I5o,q5o,r1,Pde,N5o,j5o,yj,D5o,G5o,O5o,t1,Bde,V5o,X5o,Lj,z5o,W5o,Q5o,a1,Ide,H5o,U5o,xj,J5o,Y5o,K5o,n1,qde,Z5o,e3o,$j,o3o,r3o,t3o,s1,Nde,a3o,n3o,kj,s3o,l3o,i3o,l1,jde,d3o,c3o,Sj,f3o,m3o,g3o,i1,Dde,h3o,p3o,Rj,u3o,_3o,b3o,d1,Gde,v3o,F3o,Pj,T3o,M3o,E3o,c1,Ode,C3o,w3o,Bj,A3o,y3o,L3o,f1,Vde,x3o,$3o,Ij,k3o,S3o,R3o,m1,Xde,P3o,B3o,qj,I3o,q3o,N3o,g1,zde,j3o,D3o,Nj,G3o,O3o,V3o,h1,Wde,X3o,z3o,jj,W3o,Q3o,H3o,p1,Qde,U3o,J3o,Dj,Y3o,K3o,Z3o,u1,Hde,ewo,owo,Gj,rwo,two,awo,_1,Ude,nwo,swo,Oj,lwo,iwo,dwo,b1,Jde,cwo,fwo,Vj,mwo,gwo,hwo,v1,Yde,pwo,uwo,Xj,_wo,bwo,vwo,F1,Kde,Fwo,Two,zj,Mwo,Ewo,Cwo,T1,Zde,wwo,Awo,Wj,ywo,Lwo,xwo,M1,ece,$wo,kwo,Qj,Swo,Rwo,Pwo,E1,oce,Bwo,Iwo,Hj,qwo,Nwo,jwo,C1,rce,Dwo,Gwo,Uj,Owo,Vwo,Xwo,w1,tce,zwo,Wwo,Jj,Qwo,Hwo,Uwo,A1,ace,Jwo,Ywo,Yj,Kwo,Zwo,e0o,y1,nce,o0o,r0o,Kj,t0o,a0o,n0o,L1,sce,s0o,l0o,Zj,i0o,d0o,c0o,x1,lce,f0o,m0o,eD,g0o,h0o,p0o,$1,ice,u0o,_0o,oD,b0o,v0o,F0o,k1,dce,T0o,M0o,rD,E0o,C0o,w0o,S1,cce,A0o,y0o,tD,L0o,x0o,$0o,R1,fce,k0o,S0o,aD,R0o,P0o,B0o,P1,I0o,mce,q0o,N0o,gce,j0o,D0o,B1,TNe,Pi,I1,hce,pA,G0o,pce,O0o,MNe,ko,uA,V0o,Bi,X0o,nD,z0o,W0o,sD,Q0o,H0o,U0o,_A,J0o,uce,Y0o,K0o,Z0o,st,bA,e6o,_ce,o6o,r6o,Ii,t6o,bce,a6o,n6o,lD,s6o,l6o,i6o,q1,d6o,Ze,vA,c6o,vce,f6o,m6o,ka,g6o,Fce,h6o,p6o,Tce,u6o,_6o,Mce,b6o,v6o,F6o,W,N1,Ece,T6o,M6o,iD,E6o,C6o,w6o,j1,Cce,A6o,y6o,dD,L6o,x6o,$6o,D1,wce,k6o,S6o,cD,R6o,P6o,B6o,G1,Ace,I6o,q6o,fD,N6o,j6o,D6o,O1,yce,G6o,O6o,mD,V6o,X6o,z6o,V1,Lce,W6o,Q6o,gD,H6o,U6o,J6o,X1,xce,Y6o,K6o,hD,Z6o,eAo,oAo,z1,$ce,rAo,tAo,pD,aAo,nAo,sAo,W1,kce,lAo,iAo,uD,dAo,cAo,fAo,Q1,Sce,mAo,gAo,_D,hAo,pAo,uAo,H1,Rce,_Ao,bAo,bD,vAo,FAo,TAo,U1,Pce,MAo,EAo,vD,CAo,wAo,AAo,J1,Bce,yAo,LAo,FD,xAo,$Ao,kAo,Y1,Ice,SAo,RAo,TD,PAo,BAo,IAo,K1,qce,qAo,NAo,MD,jAo,DAo,GAo,Z1,Nce,OAo,VAo,ED,XAo,zAo,WAo,e9,jce,QAo,HAo,CD,UAo,JAo,YAo,o9,Dce,KAo,ZAo,wD,eyo,oyo,ryo,r9,Gce,tyo,ayo,AD,nyo,syo,lyo,t9,Oce,iyo,dyo,yD,cyo,fyo,myo,a9,Vce,gyo,hyo,LD,pyo,uyo,_yo,n9,Xce,byo,vyo,xD,Fyo,Tyo,Myo,s9,zce,Eyo,Cyo,$D,wyo,Ayo,yyo,l9,Wce,Lyo,xyo,kD,$yo,kyo,Syo,i9,Qce,Ryo,Pyo,SD,Byo,Iyo,qyo,d9,Hce,Nyo,jyo,RD,Dyo,Gyo,Oyo,c9,Uce,Vyo,Xyo,PD,zyo,Wyo,Qyo,f9,Jce,Hyo,Uyo,BD,Jyo,Yyo,Kyo,m9,Yce,Zyo,eLo,ID,oLo,rLo,tLo,g9,Kce,aLo,nLo,qD,sLo,lLo,iLo,h9,Zce,dLo,cLo,ND,fLo,mLo,gLo,p9,efe,hLo,pLo,ofe,uLo,_Lo,bLo,u9,rfe,vLo,FLo,jD,TLo,MLo,ELo,_9,tfe,CLo,wLo,DD,ALo,yLo,LLo,b9,afe,xLo,$Lo,GD,kLo,SLo,RLo,v9,nfe,PLo,BLo,OD,ILo,qLo,NLo,F9,jLo,sfe,DLo,GLo,lfe,OLo,VLo,T9,ENe,qi,M9,ife,FA,XLo,dfe,zLo,CNe,So,TA,WLo,Ni,QLo,VD,HLo,ULo,XD,JLo,YLo,KLo,MA,ZLo,cfe,e8o,o8o,r8o,lt,EA,t8o,ffe,a8o,n8o,ji,s8o,mfe,l8o,i8o,zD,d8o,c8o,f8o,E9,m8o,eo,CA,g8o,gfe,h8o,p8o,Sa,u8o,hfe,_8o,b8o,pfe,v8o,F8o,ufe,T8o,M8o,E8o,ue,C9,_fe,C8o,w8o,WD,A8o,y8o,L8o,w9,bfe,x8o,$8o,QD,k8o,S8o,R8o,A9,vfe,P8o,B8o,HD,I8o,q8o,N8o,y9,Ffe,j8o,D8o,UD,G8o,O8o,V8o,L9,Tfe,X8o,z8o,JD,W8o,Q8o,H8o,x9,Mfe,U8o,J8o,YD,Y8o,K8o,Z8o,$9,Efe,exo,oxo,KD,rxo,txo,axo,k9,Cfe,nxo,sxo,ZD,lxo,ixo,dxo,S9,wfe,cxo,fxo,eG,mxo,gxo,hxo,R9,Afe,pxo,uxo,oG,_xo,bxo,vxo,P9,yfe,Fxo,Txo,rG,Mxo,Exo,Cxo,B9,Lfe,wxo,Axo,tG,yxo,Lxo,xxo,I9,xfe,$xo,kxo,aG,Sxo,Rxo,Pxo,q9,$fe,Bxo,Ixo,nG,qxo,Nxo,jxo,N9,kfe,Dxo,Gxo,sG,Oxo,Vxo,Xxo,j9,Sfe,zxo,Wxo,lG,Qxo,Hxo,Uxo,D9,Jxo,Rfe,Yxo,Kxo,Pfe,Zxo,e$o,G9,wNe,Di,O9,Bfe,wA,o$o,Ife,r$o,ANe,Ro,AA,t$o,Gi,a$o,iG,n$o,s$o,dG,l$o,i$o,d$o,yA,c$o,qfe,f$o,m$o,g$o,it,LA,h$o,Nfe,p$o,u$o,Oi,_$o,jfe,b$o,v$o,cG,F$o,T$o,M$o,V9,E$o,oo,xA,C$o,Dfe,w$o,A$o,Ra,y$o,Gfe,L$o,x$o,Ofe,$$o,k$o,Vfe,S$o,R$o,P$o,q,X9,Xfe,B$o,I$o,fG,q$o,N$o,j$o,z9,zfe,D$o,G$o,mG,O$o,V$o,X$o,W9,Wfe,z$o,W$o,gG,Q$o,H$o,U$o,Q9,Qfe,J$o,Y$o,hG,K$o,Z$o,eko,H9,Hfe,oko,rko,pG,tko,ako,nko,U9,Ufe,sko,lko,uG,iko,dko,cko,J9,Jfe,fko,mko,_G,gko,hko,pko,Y9,Yfe,uko,_ko,bG,bko,vko,Fko,K9,Kfe,Tko,Mko,vG,Eko,Cko,wko,Z9,Zfe,Ako,yko,FG,Lko,xko,$ko,eb,eme,kko,Sko,TG,Rko,Pko,Bko,ob,ome,Iko,qko,MG,Nko,jko,Dko,rb,rme,Gko,Oko,EG,Vko,Xko,zko,tb,tme,Wko,Qko,CG,Hko,Uko,Jko,ab,ame,Yko,Kko,wG,Zko,eSo,oSo,nb,nme,rSo,tSo,AG,aSo,nSo,sSo,sb,sme,lSo,iSo,yG,dSo,cSo,fSo,lb,lme,mSo,gSo,LG,hSo,pSo,uSo,ib,ime,_So,bSo,xG,vSo,FSo,TSo,db,dme,MSo,ESo,$G,CSo,wSo,ASo,cb,cme,ySo,LSo,kG,xSo,$So,kSo,fb,fme,SSo,RSo,SG,PSo,BSo,ISo,mb,mme,qSo,NSo,RG,jSo,DSo,GSo,gb,gme,OSo,VSo,PG,XSo,zSo,WSo,hb,hme,QSo,HSo,BG,USo,JSo,YSo,pb,pme,KSo,ZSo,IG,eRo,oRo,rRo,ub,ume,tRo,aRo,qG,nRo,sRo,lRo,_b,_me,iRo,dRo,NG,cRo,fRo,mRo,bb,bme,gRo,hRo,jG,pRo,uRo,_Ro,vb,vme,bRo,vRo,DG,FRo,TRo,MRo,Fb,Fme,ERo,CRo,GG,wRo,ARo,yRo,Tb,Tme,LRo,xRo,OG,$Ro,kRo,SRo,Mb,Mme,RRo,PRo,VG,BRo,IRo,qRo,Eb,Eme,NRo,jRo,XG,DRo,GRo,ORo,Cb,Cme,VRo,XRo,zG,zRo,WRo,QRo,wb,wme,HRo,URo,WG,JRo,YRo,KRo,Ab,Ame,ZRo,ePo,QG,oPo,rPo,tPo,yb,yme,aPo,nPo,HG,sPo,lPo,iPo,Lb,Lme,dPo,cPo,UG,fPo,mPo,gPo,xb,xme,hPo,pPo,JG,uPo,_Po,bPo,$b,$me,vPo,FPo,YG,TPo,MPo,EPo,kb,kme,CPo,wPo,KG,APo,yPo,LPo,Sb,Sme,xPo,$Po,ZG,kPo,SPo,RPo,Rb,Rme,PPo,BPo,eO,IPo,qPo,NPo,Pb,Pme,jPo,DPo,oO,GPo,OPo,VPo,Bb,Bme,XPo,zPo,rO,WPo,QPo,HPo,Ib,Ime,UPo,JPo,tO,YPo,KPo,ZPo,qb,eBo,qme,oBo,rBo,Nme,tBo,aBo,Nb,yNe,Vi,jb,jme,$A,nBo,Dme,sBo,LNe,Po,kA,lBo,Xi,iBo,aO,dBo,cBo,nO,fBo,mBo,gBo,SA,hBo,Gme,pBo,uBo,_Bo,dt,RA,bBo,Ome,vBo,FBo,zi,TBo,Vme,MBo,EBo,sO,CBo,wBo,ABo,Db,yBo,ro,PA,LBo,Xme,xBo,$Bo,Pa,kBo,zme,SBo,RBo,Wme,PBo,BBo,Qme,IBo,qBo,NBo,K,Gb,Hme,jBo,DBo,lO,GBo,OBo,VBo,Ob,Ume,XBo,zBo,iO,WBo,QBo,HBo,Vb,Jme,UBo,JBo,dO,YBo,KBo,ZBo,Xb,Yme,eIo,oIo,cO,rIo,tIo,aIo,zb,Kme,nIo,sIo,fO,lIo,iIo,dIo,Wb,Zme,cIo,fIo,mO,mIo,gIo,hIo,Qb,ege,pIo,uIo,gO,_Io,bIo,vIo,Hb,oge,FIo,TIo,hO,MIo,EIo,CIo,Ub,rge,wIo,AIo,pO,yIo,LIo,xIo,Jb,tge,$Io,kIo,uO,SIo,RIo,PIo,Yb,age,BIo,IIo,_O,qIo,NIo,jIo,Kb,nge,DIo,GIo,bO,OIo,VIo,XIo,Zb,sge,zIo,WIo,vO,QIo,HIo,UIo,e2,lge,JIo,YIo,FO,KIo,ZIo,eqo,o2,ige,oqo,rqo,TO,tqo,aqo,nqo,r2,dge,sqo,lqo,MO,iqo,dqo,cqo,t2,cge,fqo,mqo,EO,gqo,hqo,pqo,a2,fge,uqo,_qo,CO,bqo,vqo,Fqo,n2,mge,Tqo,Mqo,wO,Eqo,Cqo,wqo,s2,gge,Aqo,yqo,AO,Lqo,xqo,$qo,l2,hge,kqo,Sqo,yO,Rqo,Pqo,Bqo,i2,pge,Iqo,qqo,LO,Nqo,jqo,Dqo,d2,uge,Gqo,Oqo,xO,Vqo,Xqo,zqo,c2,_ge,Wqo,Qqo,$O,Hqo,Uqo,Jqo,f2,bge,Yqo,Kqo,kO,Zqo,eNo,oNo,m2,vge,rNo,tNo,SO,aNo,nNo,sNo,g2,Fge,lNo,iNo,RO,dNo,cNo,fNo,h2,Tge,mNo,gNo,PO,hNo,pNo,uNo,p2,Mge,_No,bNo,BO,vNo,FNo,TNo,u2,MNo,Ege,ENo,CNo,Cge,wNo,ANo,_2,xNe,Wi,b2,wge,BA,yNo,Age,LNo,$Ne,Bo,IA,xNo,Qi,$No,IO,kNo,SNo,qO,RNo,PNo,BNo,qA,INo,yge,qNo,NNo,jNo,ct,NA,DNo,Lge,GNo,ONo,Hi,VNo,xge,XNo,zNo,NO,WNo,QNo,HNo,v2,UNo,to,jA,JNo,$ge,YNo,KNo,Ba,ZNo,kge,ejo,ojo,Sge,rjo,tjo,Rge,ajo,njo,sjo,Yr,F2,Pge,ljo,ijo,jO,djo,cjo,fjo,T2,Bge,mjo,gjo,DO,hjo,pjo,ujo,M2,Ige,_jo,bjo,GO,vjo,Fjo,Tjo,E2,qge,Mjo,Ejo,OO,Cjo,wjo,Ajo,C2,Nge,yjo,Ljo,VO,xjo,$jo,kjo,w2,Sjo,jge,Rjo,Pjo,Dge,Bjo,Ijo,A2,kNe,Ui,y2,Gge,DA,qjo,Oge,Njo,SNe,Io,GA,jjo,Ji,Djo,XO,Gjo,Ojo,zO,Vjo,Xjo,zjo,OA,Wjo,Vge,Qjo,Hjo,Ujo,ft,VA,Jjo,Xge,Yjo,Kjo,Yi,Zjo,zge,eDo,oDo,WO,rDo,tDo,aDo,L2,nDo,ao,XA,sDo,Wge,lDo,iDo,Ia,dDo,Qge,cDo,fDo,Hge,mDo,gDo,Uge,hDo,pDo,uDo,U,x2,Jge,_Do,bDo,QO,vDo,FDo,TDo,$2,Yge,MDo,EDo,HO,CDo,wDo,ADo,k2,Kge,yDo,LDo,UO,xDo,$Do,kDo,S2,Zge,SDo,RDo,JO,PDo,BDo,IDo,R2,ehe,qDo,NDo,YO,jDo,DDo,GDo,P2,ohe,ODo,VDo,KO,XDo,zDo,WDo,B2,rhe,QDo,HDo,ZO,UDo,JDo,YDo,I2,the,KDo,ZDo,eV,eGo,oGo,rGo,q2,ahe,tGo,aGo,oV,nGo,sGo,lGo,N2,nhe,iGo,dGo,rV,cGo,fGo,mGo,j2,she,gGo,hGo,tV,pGo,uGo,_Go,D2,lhe,bGo,vGo,aV,FGo,TGo,MGo,G2,ihe,EGo,CGo,nV,wGo,AGo,yGo,O2,dhe,LGo,xGo,sV,$Go,kGo,SGo,V2,che,RGo,PGo,lV,BGo,IGo,qGo,X2,fhe,NGo,jGo,iV,DGo,GGo,OGo,z2,mhe,VGo,XGo,dV,zGo,WGo,QGo,W2,ghe,HGo,UGo,cV,JGo,YGo,KGo,Q2,hhe,ZGo,eOo,fV,oOo,rOo,tOo,H2,phe,aOo,nOo,mV,sOo,lOo,iOo,U2,uhe,dOo,cOo,gV,fOo,mOo,gOo,J2,_he,hOo,pOo,hV,uOo,_Oo,bOo,Y2,bhe,vOo,FOo,pV,TOo,MOo,EOo,K2,vhe,COo,wOo,uV,AOo,yOo,LOo,Z2,Fhe,xOo,$Oo,_V,kOo,SOo,ROo,e4,The,POo,BOo,bV,IOo,qOo,NOo,o4,Mhe,jOo,DOo,vV,GOo,OOo,VOo,r4,Ehe,XOo,zOo,FV,WOo,QOo,HOo,t4,Che,UOo,JOo,TV,YOo,KOo,ZOo,a4,whe,eVo,oVo,MV,rVo,tVo,aVo,n4,Ahe,nVo,sVo,EV,lVo,iVo,dVo,s4,yhe,cVo,fVo,CV,mVo,gVo,hVo,l4,Lhe,pVo,uVo,wV,_Vo,bVo,vVo,i4,xhe,FVo,TVo,AV,MVo,EVo,CVo,d4,wVo,$he,AVo,yVo,khe,LVo,xVo,c4,RNe,Ki,f4,She,zA,$Vo,Rhe,kVo,PNe,qo,WA,SVo,Zi,RVo,yV,PVo,BVo,LV,IVo,qVo,NVo,QA,jVo,Phe,DVo,GVo,OVo,mt,HA,VVo,Bhe,XVo,zVo,ed,WVo,Ihe,QVo,HVo,xV,UVo,JVo,YVo,m4,KVo,no,UA,ZVo,qhe,eXo,oXo,qa,rXo,Nhe,tXo,aXo,jhe,nXo,sXo,Dhe,lXo,iXo,dXo,V,g4,Ghe,cXo,fXo,$V,mXo,gXo,hXo,h4,Ohe,pXo,uXo,kV,_Xo,bXo,vXo,p4,Vhe,FXo,TXo,SV,MXo,EXo,CXo,u4,Xhe,wXo,AXo,RV,yXo,LXo,xXo,_4,zhe,$Xo,kXo,PV,SXo,RXo,PXo,b4,Whe,BXo,IXo,BV,qXo,NXo,jXo,v4,Qhe,DXo,GXo,IV,OXo,VXo,XXo,F4,Hhe,zXo,WXo,qV,QXo,HXo,UXo,T4,Uhe,JXo,YXo,NV,KXo,ZXo,ezo,M4,Jhe,ozo,rzo,jV,tzo,azo,nzo,E4,Yhe,szo,lzo,DV,izo,dzo,czo,C4,Khe,fzo,mzo,GV,gzo,hzo,pzo,w4,Zhe,uzo,_zo,OV,bzo,vzo,Fzo,A4,epe,Tzo,Mzo,VV,Ezo,Czo,wzo,y4,ope,Azo,yzo,XV,Lzo,xzo,$zo,L4,rpe,kzo,Szo,zV,Rzo,Pzo,Bzo,x4,tpe,Izo,qzo,WV,Nzo,jzo,Dzo,$4,ape,Gzo,Ozo,QV,Vzo,Xzo,zzo,k4,npe,Wzo,Qzo,HV,Hzo,Uzo,Jzo,S4,spe,Yzo,Kzo,UV,Zzo,eWo,oWo,R4,lpe,rWo,tWo,JV,aWo,nWo,sWo,P4,ipe,lWo,iWo,YV,dWo,cWo,fWo,B4,dpe,mWo,gWo,KV,hWo,pWo,uWo,I4,cpe,_Wo,bWo,ZV,vWo,FWo,TWo,q4,fpe,MWo,EWo,eX,CWo,wWo,AWo,N4,mpe,yWo,LWo,oX,xWo,$Wo,kWo,j4,gpe,SWo,RWo,rX,PWo,BWo,IWo,D4,hpe,qWo,NWo,tX,jWo,DWo,GWo,G4,ppe,OWo,VWo,aX,XWo,zWo,WWo,O4,upe,QWo,HWo,nX,UWo,JWo,YWo,V4,_pe,KWo,ZWo,sX,eQo,oQo,rQo,X4,bpe,tQo,aQo,lX,nQo,sQo,lQo,z4,vpe,iQo,dQo,iX,cQo,fQo,mQo,W4,Fpe,gQo,hQo,dX,pQo,uQo,_Qo,Q4,Tpe,bQo,vQo,cX,FQo,TQo,MQo,H4,Mpe,EQo,CQo,fX,wQo,AQo,yQo,U4,Epe,LQo,xQo,mX,$Qo,kQo,SQo,J4,Cpe,RQo,PQo,gX,BQo,IQo,qQo,Y4,wpe,NQo,jQo,hX,DQo,GQo,OQo,K4,Ape,VQo,XQo,pX,zQo,WQo,QQo,Z4,HQo,ype,UQo,JQo,Lpe,YQo,KQo,ev,BNe,od,ov,xpe,JA,ZQo,$pe,eHo,INe,No,YA,oHo,rd,rHo,uX,tHo,aHo,_X,nHo,sHo,lHo,KA,iHo,kpe,dHo,cHo,fHo,gt,ZA,mHo,Spe,gHo,hHo,td,pHo,Rpe,uHo,_Ho,bX,bHo,vHo,FHo,rv,THo,so,ey,MHo,Ppe,EHo,CHo,Na,wHo,Bpe,AHo,yHo,Ipe,LHo,xHo,qpe,$Ho,kHo,SHo,Npe,tv,jpe,RHo,PHo,vX,BHo,IHo,qHo,av,NHo,Dpe,jHo,DHo,Gpe,GHo,OHo,nv,qNe,ad,sv,Ope,oy,VHo,Vpe,XHo,NNe,jo,ry,zHo,nd,WHo,FX,QHo,HHo,TX,UHo,JHo,YHo,ty,KHo,Xpe,ZHo,eUo,oUo,ht,ay,rUo,zpe,tUo,aUo,sd,nUo,Wpe,sUo,lUo,MX,iUo,dUo,cUo,lv,fUo,lo,ny,mUo,Qpe,gUo,hUo,ja,pUo,Hpe,uUo,_Uo,Upe,bUo,vUo,Jpe,FUo,TUo,MUo,Fe,iv,Ype,EUo,CUo,EX,wUo,AUo,yUo,dv,Kpe,LUo,xUo,CX,$Uo,kUo,SUo,cv,Zpe,RUo,PUo,wX,BUo,IUo,qUo,fv,eue,NUo,jUo,AX,DUo,GUo,OUo,Bs,oue,VUo,XUo,yX,zUo,WUo,LX,QUo,HUo,UUo,mv,rue,JUo,YUo,xX,KUo,ZUo,eJo,pt,tue,oJo,rJo,$X,tJo,aJo,kX,nJo,sJo,SX,lJo,iJo,dJo,gv,aue,cJo,fJo,RX,mJo,gJo,hJo,hv,nue,pJo,uJo,PX,_Jo,bJo,vJo,pv,sue,FJo,TJo,BX,MJo,EJo,CJo,uv,lue,wJo,AJo,IX,yJo,LJo,xJo,_v,iue,$Jo,kJo,qX,SJo,RJo,PJo,bv,due,BJo,IJo,NX,qJo,NJo,jJo,vv,cue,DJo,GJo,jX,OJo,VJo,XJo,Fv,zJo,fue,WJo,QJo,mue,HJo,UJo,Tv,jNe,ld,Mv,gue,sy,JJo,hue,YJo,DNe,Do,ly,KJo,id,ZJo,DX,eYo,oYo,GX,rYo,tYo,aYo,iy,nYo,pue,sYo,lYo,iYo,ut,dy,dYo,uue,cYo,fYo,dd,mYo,_ue,gYo,hYo,OX,pYo,uYo,_Yo,Ev,bYo,io,cy,vYo,bue,FYo,TYo,Da,MYo,vue,EYo,CYo,Fue,wYo,AYo,Tue,yYo,LYo,xYo,Mue,Cv,Eue,$Yo,kYo,VX,SYo,RYo,PYo,wv,BYo,Cue,IYo,qYo,wue,NYo,jYo,Av,GNe,cd,yv,Aue,fy,DYo,yue,GYo,ONe,Go,my,OYo,fd,VYo,XX,XYo,zYo,zX,WYo,QYo,HYo,gy,UYo,Lue,JYo,YYo,KYo,_t,hy,ZYo,xue,eKo,oKo,md,rKo,$ue,tKo,aKo,WX,nKo,sKo,lKo,Lv,iKo,co,py,dKo,kue,cKo,fKo,Ga,mKo,Sue,gKo,hKo,Rue,pKo,uKo,Pue,_Ko,bKo,vKo,ke,xv,Bue,FKo,TKo,QX,MKo,EKo,CKo,$v,Iue,wKo,AKo,HX,yKo,LKo,xKo,kv,que,$Ko,kKo,UX,SKo,RKo,PKo,Sv,Nue,BKo,IKo,JX,qKo,NKo,jKo,Rv,jue,DKo,GKo,YX,OKo,VKo,XKo,Pv,Due,zKo,WKo,KX,QKo,HKo,UKo,Bv,Gue,JKo,YKo,ZX,KKo,ZKo,eZo,Iv,Oue,oZo,rZo,ez,tZo,aZo,nZo,qv,Vue,sZo,lZo,oz,iZo,dZo,cZo,Nv,fZo,Xue,mZo,gZo,zue,hZo,pZo,jv,VNe,gd,Dv,Wue,uy,uZo,Que,_Zo,XNe,Oo,_y,bZo,hd,vZo,rz,FZo,TZo,tz,MZo,EZo,CZo,by,wZo,Hue,AZo,yZo,LZo,bt,vy,xZo,Uue,$Zo,kZo,pd,SZo,Jue,RZo,PZo,az,BZo,IZo,qZo,Gv,NZo,fo,Fy,jZo,Yue,DZo,GZo,Oa,OZo,Kue,VZo,XZo,Zue,zZo,WZo,e_e,QZo,HZo,UZo,Kr,Ov,o_e,JZo,YZo,nz,KZo,ZZo,eer,Vv,r_e,oer,rer,sz,ter,aer,ner,Xv,t_e,ser,ler,lz,ier,der,cer,zv,a_e,fer,mer,iz,ger,her,per,Wv,n_e,uer,_er,dz,ber,ver,Fer,Qv,Ter,s_e,Mer,Eer,l_e,Cer,wer,Hv,zNe,ud,Uv,i_e,Ty,Aer,d_e,yer,WNe,Vo,My,Ler,_d,xer,cz,$er,ker,fz,Ser,Rer,Per,Ey,Ber,c_e,Ier,qer,Ner,vt,Cy,jer,f_e,Der,Ger,bd,Oer,m_e,Ver,Xer,mz,zer,Wer,Qer,Jv,Her,mo,wy,Uer,g_e,Jer,Yer,Va,Ker,h_e,Zer,eor,p_e,oor,ror,u_e,tor,aor,nor,Se,Yv,__e,sor,lor,gz,ior,dor,cor,Kv,b_e,mor,gor,hz,hor,por,uor,Zv,v_e,_or,bor,pz,vor,For,Tor,eF,F_e,Mor,Eor,uz,Cor,wor,Aor,oF,T_e,yor,Lor,_z,xor,$or,kor,rF,M_e,Sor,Ror,bz,Por,Bor,Ior,tF,E_e,qor,Nor,vz,jor,Dor,Gor,aF,C_e,Oor,Vor,Fz,Xor,zor,Wor,nF,w_e,Qor,Hor,Tz,Uor,Jor,Yor,sF,Kor,A_e,Zor,err,y_e,orr,rrr,lF,QNe,vd,iF,L_e,Ay,trr,x_e,arr,HNe,Xo,yy,nrr,Fd,srr,Mz,lrr,irr,Ez,drr,crr,frr,Ly,mrr,$_e,grr,hrr,prr,Ft,xy,urr,k_e,_rr,brr,Td,vrr,S_e,Frr,Trr,Cz,Mrr,Err,Crr,dF,wrr,go,$y,Arr,R_e,yrr,Lrr,Xa,xrr,P_e,$rr,krr,B_e,Srr,Rrr,I_e,Prr,Brr,Irr,ky,cF,q_e,qrr,Nrr,wz,jrr,Drr,Grr,fF,N_e,Orr,Vrr,Az,Xrr,zrr,Wrr,mF,Qrr,j_e,Hrr,Urr,D_e,Jrr,Yrr,gF,UNe,Md,hF,G_e,Sy,Krr,O_e,Zrr,JNe,zo,Ry,etr,Ed,otr,yz,rtr,ttr,Lz,atr,ntr,str,Py,ltr,V_e,itr,dtr,ctr,Tt,By,ftr,X_e,mtr,gtr,Cd,htr,z_e,ptr,utr,xz,_tr,btr,vtr,pF,Ftr,ho,Iy,Ttr,W_e,Mtr,Etr,za,Ctr,Q_e,wtr,Atr,H_e,ytr,Ltr,U_e,xtr,$tr,ktr,Zr,uF,J_e,Str,Rtr,$z,Ptr,Btr,Itr,_F,Y_e,qtr,Ntr,kz,jtr,Dtr,Gtr,bF,K_e,Otr,Vtr,Sz,Xtr,ztr,Wtr,vF,Z_e,Qtr,Htr,Rz,Utr,Jtr,Ytr,FF,e1e,Ktr,Ztr,Pz,ear,oar,rar,TF,tar,o1e,aar,nar,r1e,sar,lar,MF,YNe,wd,EF,t1e,qy,iar,a1e,dar,KNe,Wo,Ny,car,Ad,far,Bz,mar,gar,Iz,har,par,uar,jy,_ar,n1e,bar,Far,Tar,Mt,Dy,Mar,s1e,Ear,Car,yd,war,l1e,Aar,yar,qz,Lar,xar,$ar,CF,kar,po,Gy,Sar,i1e,Rar,Par,Wa,Bar,d1e,Iar,qar,c1e,Nar,jar,f1e,Dar,Gar,Oar,Ld,wF,m1e,Var,Xar,Nz,zar,War,Qar,AF,g1e,Har,Uar,jz,Jar,Yar,Kar,yF,h1e,Zar,enr,Dz,onr,rnr,tnr,LF,anr,p1e,nnr,snr,u1e,lnr,inr,xF,ZNe,xd,$F,_1e,Oy,dnr,b1e,cnr,eje,Qo,Vy,fnr,$d,mnr,Gz,gnr,hnr,Oz,pnr,unr,_nr,Xy,bnr,v1e,vnr,Fnr,Tnr,Et,zy,Mnr,F1e,Enr,Cnr,kd,wnr,T1e,Anr,ynr,Vz,Lnr,xnr,$nr,kF,knr,uo,Wy,Snr,M1e,Rnr,Pnr,Qa,Bnr,E1e,Inr,qnr,C1e,Nnr,jnr,w1e,Dnr,Gnr,Onr,Qy,SF,A1e,Vnr,Xnr,Xz,znr,Wnr,Qnr,RF,y1e,Hnr,Unr,zz,Jnr,Ynr,Knr,PF,Znr,L1e,esr,osr,x1e,rsr,tsr,BF,oje,Sd,IF,$1e,Hy,asr,k1e,nsr,rje,Ho,Uy,ssr,Rd,lsr,Wz,isr,dsr,Qz,csr,fsr,msr,Jy,gsr,S1e,hsr,psr,usr,Ct,Yy,_sr,R1e,bsr,vsr,Pd,Fsr,P1e,Tsr,Msr,Hz,Esr,Csr,wsr,qF,Asr,_o,Ky,ysr,B1e,Lsr,xsr,Ha,$sr,I1e,ksr,Ssr,q1e,Rsr,Psr,N1e,Bsr,Isr,qsr,j1e,NF,D1e,Nsr,jsr,Uz,Dsr,Gsr,Osr,jF,Vsr,G1e,Xsr,zsr,O1e,Wsr,Qsr,DF,tje,Bd,GF,V1e,Zy,Hsr,X1e,Usr,aje,Uo,eL,Jsr,Id,Ysr,Jz,Ksr,Zsr,Yz,elr,olr,rlr,oL,tlr,z1e,alr,nlr,slr,wt,rL,llr,W1e,ilr,dlr,qd,clr,Q1e,flr,mlr,Kz,glr,hlr,plr,OF,ulr,bo,tL,_lr,H1e,blr,vlr,Ua,Flr,U1e,Tlr,Mlr,J1e,Elr,Clr,Y1e,wlr,Alr,ylr,Ja,VF,K1e,Llr,xlr,Zz,$lr,klr,Slr,XF,Z1e,Rlr,Plr,eW,Blr,Ilr,qlr,zF,e9e,Nlr,jlr,oW,Dlr,Glr,Olr,WF,o9e,Vlr,Xlr,rW,zlr,Wlr,Qlr,QF,Hlr,r9e,Ulr,Jlr,t9e,Ylr,Klr,HF,nje,Nd,UF,a9e,aL,Zlr,n9e,eir,sje,Jo,nL,oir,jd,rir,tW,tir,air,aW,nir,sir,lir,sL,iir,s9e,dir,cir,fir,At,lL,mir,l9e,gir,hir,Dd,pir,i9e,uir,_ir,nW,bir,vir,Fir,JF,Tir,vo,iL,Mir,d9e,Eir,Cir,Ya,wir,c9e,Air,yir,f9e,Lir,xir,m9e,$ir,kir,Sir,g9e,YF,h9e,Rir,Pir,sW,Bir,Iir,qir,KF,Nir,p9e,jir,Dir,u9e,Gir,Oir,ZF,lje,Gd,eT,_9e,dL,Vir,b9e,Xir,ije,Yo,cL,zir,Od,Wir,lW,Qir,Hir,iW,Uir,Jir,Yir,fL,Kir,v9e,Zir,edr,odr,yt,mL,rdr,F9e,tdr,adr,Vd,ndr,T9e,sdr,ldr,dW,idr,ddr,cdr,oT,fdr,wr,gL,mdr,M9e,gdr,hdr,Ka,pdr,E9e,udr,_dr,C9e,bdr,vdr,w9e,Fdr,Tdr,Mdr,N,rT,A9e,Edr,Cdr,cW,wdr,Adr,ydr,tT,y9e,Ldr,xdr,fW,$dr,kdr,Sdr,aT,L9e,Rdr,Pdr,mW,Bdr,Idr,qdr,nT,x9e,Ndr,jdr,gW,Ddr,Gdr,Odr,sT,$9e,Vdr,Xdr,hW,zdr,Wdr,Qdr,lT,k9e,Hdr,Udr,pW,Jdr,Ydr,Kdr,iT,S9e,Zdr,ecr,uW,ocr,rcr,tcr,dT,R9e,acr,ncr,_W,scr,lcr,icr,cT,P9e,dcr,ccr,bW,fcr,mcr,gcr,fT,B9e,hcr,pcr,vW,ucr,_cr,bcr,mT,I9e,vcr,Fcr,FW,Tcr,Mcr,Ecr,gT,q9e,Ccr,wcr,TW,Acr,ycr,Lcr,hT,N9e,xcr,$cr,MW,kcr,Scr,Rcr,pT,j9e,Pcr,Bcr,EW,Icr,qcr,Ncr,uT,D9e,jcr,Dcr,CW,Gcr,Ocr,Vcr,_T,G9e,Xcr,zcr,wW,Wcr,Qcr,Hcr,bT,O9e,Ucr,Jcr,AW,Ycr,Kcr,Zcr,Is,V9e,efr,ofr,yW,rfr,tfr,LW,afr,nfr,sfr,vT,X9e,lfr,ifr,xW,dfr,cfr,ffr,FT,z9e,mfr,gfr,$W,hfr,pfr,ufr,TT,W9e,_fr,bfr,kW,vfr,Ffr,Tfr,MT,Q9e,Mfr,Efr,SW,Cfr,wfr,Afr,ET,H9e,yfr,Lfr,RW,xfr,$fr,kfr,CT,U9e,Sfr,Rfr,PW,Pfr,Bfr,Ifr,wT,J9e,qfr,Nfr,BW,jfr,Dfr,Gfr,AT,Y9e,Ofr,Vfr,IW,Xfr,zfr,Wfr,yT,K9e,Qfr,Hfr,qW,Ufr,Jfr,Yfr,LT,Z9e,Kfr,Zfr,NW,emr,omr,rmr,xT,ebe,tmr,amr,jW,nmr,smr,lmr,$T,obe,imr,dmr,DW,cmr,fmr,mmr,kT,rbe,gmr,hmr,GW,pmr,umr,_mr,ST,tbe,bmr,vmr,OW,Fmr,Tmr,Mmr,RT,abe,Emr,Cmr,VW,wmr,Amr,ymr,PT,nbe,Lmr,xmr,XW,$mr,kmr,Smr,BT,sbe,Rmr,Pmr,zW,Bmr,Imr,qmr,IT,lbe,Nmr,jmr,WW,Dmr,Gmr,Omr,qT,ibe,Vmr,Xmr,QW,zmr,Wmr,Qmr,NT,dbe,Hmr,Umr,HW,Jmr,Ymr,Kmr,jT,cbe,Zmr,egr,UW,ogr,rgr,tgr,DT,fbe,agr,ngr,JW,sgr,lgr,igr,GT,mbe,dgr,cgr,YW,fgr,mgr,ggr,OT,gbe,hgr,pgr,KW,ugr,_gr,bgr,VT,hbe,vgr,Fgr,ZW,Tgr,Mgr,Egr,XT,pbe,Cgr,wgr,eQ,Agr,ygr,Lgr,zT,ube,xgr,$gr,oQ,kgr,Sgr,Rgr,WT,_be,Pgr,Bgr,rQ,Igr,qgr,Ngr,QT,dje,Xd,HT,bbe,hL,jgr,vbe,Dgr,cje,Ko,pL,Ggr,zd,Ogr,tQ,Vgr,Xgr,aQ,zgr,Wgr,Qgr,uL,Hgr,Fbe,Ugr,Jgr,Ygr,Lt,_L,Kgr,Tbe,Zgr,ehr,Wd,ohr,Mbe,rhr,thr,nQ,ahr,nhr,shr,UT,lhr,Ar,bL,ihr,Ebe,dhr,chr,Za,fhr,Cbe,mhr,ghr,wbe,hhr,phr,Abe,uhr,_hr,bhr,se,JT,ybe,vhr,Fhr,sQ,Thr,Mhr,Ehr,YT,Lbe,Chr,whr,lQ,Ahr,yhr,Lhr,KT,xbe,xhr,$hr,iQ,khr,Shr,Rhr,ZT,$be,Phr,Bhr,dQ,Ihr,qhr,Nhr,e7,kbe,jhr,Dhr,cQ,Ghr,Ohr,Vhr,o7,Sbe,Xhr,zhr,fQ,Whr,Qhr,Hhr,r7,Rbe,Uhr,Jhr,mQ,Yhr,Khr,Zhr,t7,Pbe,epr,opr,gQ,rpr,tpr,apr,a7,Bbe,npr,spr,hQ,lpr,ipr,dpr,n7,Ibe,cpr,fpr,pQ,mpr,gpr,hpr,s7,qbe,ppr,upr,uQ,_pr,bpr,vpr,l7,Nbe,Fpr,Tpr,_Q,Mpr,Epr,Cpr,i7,jbe,wpr,Apr,bQ,ypr,Lpr,xpr,d7,Dbe,$pr,kpr,vQ,Spr,Rpr,Ppr,c7,Gbe,Bpr,Ipr,FQ,qpr,Npr,jpr,f7,Obe,Dpr,Gpr,TQ,Opr,Vpr,Xpr,m7,Vbe,zpr,Wpr,MQ,Qpr,Hpr,Upr,g7,Xbe,Jpr,Ypr,EQ,Kpr,Zpr,eur,h7,zbe,our,rur,CQ,tur,aur,nur,p7,Wbe,sur,lur,wQ,iur,dur,cur,u7,Qbe,fur,mur,AQ,gur,hur,pur,_7,Hbe,uur,_ur,yQ,bur,vur,Fur,b7,Ube,Tur,Mur,LQ,Eur,Cur,wur,v7,fje,Qd,F7,Jbe,vL,Aur,Ybe,yur,mje,Zo,FL,Lur,Hd,xur,xQ,$ur,kur,$Q,Sur,Rur,Pur,TL,Bur,Kbe,Iur,qur,Nur,xt,ML,jur,Zbe,Dur,Gur,Ud,Our,e2e,Vur,Xur,kQ,zur,Wur,Qur,T7,Hur,yr,EL,Uur,o2e,Jur,Yur,en,Kur,r2e,Zur,e_r,t2e,o_r,r_r,a2e,t_r,a_r,n_r,Me,M7,n2e,s_r,l_r,SQ,i_r,d_r,c_r,E7,s2e,f_r,m_r,RQ,g_r,h_r,p_r,C7,l2e,u_r,__r,PQ,b_r,v_r,F_r,w7,i2e,T_r,M_r,BQ,E_r,C_r,w_r,A7,d2e,A_r,y_r,IQ,L_r,x_r,$_r,y7,c2e,k_r,S_r,qQ,R_r,P_r,B_r,L7,f2e,I_r,q_r,NQ,N_r,j_r,D_r,x7,m2e,G_r,O_r,jQ,V_r,X_r,z_r,$7,g2e,W_r,Q_r,DQ,H_r,U_r,J_r,k7,h2e,Y_r,K_r,GQ,Z_r,e1r,o1r,S7,p2e,r1r,t1r,OQ,a1r,n1r,s1r,R7,u2e,l1r,i1r,VQ,d1r,c1r,f1r,P7,gje,Jd,B7,_2e,CL,m1r,b2e,g1r,hje,er,wL,h1r,Yd,p1r,XQ,u1r,_1r,zQ,b1r,v1r,F1r,AL,T1r,v2e,M1r,E1r,C1r,$t,yL,w1r,F2e,A1r,y1r,Kd,L1r,T2e,x1r,$1r,WQ,k1r,S1r,R1r,I7,P1r,Lr,LL,B1r,M2e,I1r,q1r,on,N1r,E2e,j1r,D1r,C2e,G1r,O1r,w2e,V1r,X1r,z1r,rn,q7,A2e,W1r,Q1r,QQ,H1r,U1r,J1r,N7,y2e,Y1r,K1r,HQ,Z1r,e9r,o9r,j7,L2e,r9r,t9r,UQ,a9r,n9r,s9r,D7,x2e,l9r,i9r,JQ,d9r,c9r,f9r,G7,pje,Zd,O7,$2e,xL,m9r,k2e,g9r,uje,or,$L,h9r,ec,p9r,YQ,u9r,_9r,KQ,b9r,v9r,F9r,kL,T9r,S2e,M9r,E9r,C9r,kt,SL,w9r,R2e,A9r,y9r,oc,L9r,P2e,x9r,$9r,ZQ,k9r,S9r,R9r,V7,P9r,xr,RL,B9r,B2e,I9r,q9r,tn,N9r,I2e,j9r,D9r,q2e,G9r,O9r,N2e,V9r,X9r,z9r,ie,X7,j2e,W9r,Q9r,eH,H9r,U9r,J9r,z7,D2e,Y9r,K9r,oH,Z9r,ebr,obr,W7,G2e,rbr,tbr,rH,abr,nbr,sbr,Q7,O2e,lbr,ibr,tH,dbr,cbr,fbr,H7,V2e,mbr,gbr,aH,hbr,pbr,ubr,U7,X2e,_br,bbr,nH,vbr,Fbr,Tbr,J7,z2e,Mbr,Ebr,sH,Cbr,wbr,Abr,Y7,W2e,ybr,Lbr,lH,xbr,$br,kbr,K7,Q2e,Sbr,Rbr,iH,Pbr,Bbr,Ibr,Z7,H2e,qbr,Nbr,dH,jbr,Dbr,Gbr,eM,U2e,Obr,Vbr,cH,Xbr,zbr,Wbr,oM,J2e,Qbr,Hbr,fH,Ubr,Jbr,Ybr,rM,Y2e,Kbr,Zbr,mH,e2r,o2r,r2r,tM,K2e,t2r,a2r,gH,n2r,s2r,l2r,aM,Z2e,i2r,d2r,hH,c2r,f2r,m2r,nM,e4e,g2r,h2r,pH,p2r,u2r,_2r,sM,o4e,b2r,v2r,uH,F2r,T2r,M2r,lM,r4e,E2r,C2r,_H,w2r,A2r,y2r,iM,t4e,L2r,x2r,bH,$2r,k2r,S2r,dM,a4e,R2r,P2r,vH,B2r,I2r,q2r,cM,_je,rc,fM,n4e,PL,N2r,s4e,j2r,bje,rr,BL,D2r,tc,G2r,FH,O2r,V2r,TH,X2r,z2r,W2r,IL,Q2r,l4e,H2r,U2r,J2r,St,qL,Y2r,i4e,K2r,Z2r,ac,e4r,d4e,o4r,r4r,MH,t4r,a4r,n4r,mM,s4r,$r,NL,l4r,c4e,i4r,d4r,an,c4r,f4e,f4r,m4r,m4e,g4r,h4r,g4e,p4r,u4r,_4r,ye,gM,h4e,b4r,v4r,EH,F4r,T4r,M4r,hM,p4e,E4r,C4r,CH,w4r,A4r,y4r,pM,u4e,L4r,x4r,wH,$4r,k4r,S4r,uM,_4e,R4r,P4r,AH,B4r,I4r,q4r,_M,b4e,N4r,j4r,yH,D4r,G4r,O4r,bM,v4e,V4r,X4r,LH,z4r,W4r,Q4r,vM,F4e,H4r,U4r,xH,J4r,Y4r,K4r,FM,T4e,Z4r,evr,$H,ovr,rvr,tvr,TM,M4e,avr,nvr,kH,svr,lvr,ivr,MM,E4e,dvr,cvr,SH,fvr,mvr,gvr,EM,vje,nc,CM,C4e,jL,hvr,w4e,pvr,Fje,tr,DL,uvr,sc,_vr,RH,bvr,vvr,PH,Fvr,Tvr,Mvr,GL,Evr,A4e,Cvr,wvr,Avr,Rt,OL,yvr,y4e,Lvr,xvr,lc,$vr,L4e,kvr,Svr,BH,Rvr,Pvr,Bvr,wM,Ivr,kr,VL,qvr,x4e,Nvr,jvr,nn,Dvr,$4e,Gvr,Ovr,k4e,Vvr,Xvr,S4e,zvr,Wvr,Qvr,oe,AM,R4e,Hvr,Uvr,IH,Jvr,Yvr,Kvr,yM,P4e,Zvr,eFr,qH,oFr,rFr,tFr,LM,B4e,aFr,nFr,NH,sFr,lFr,iFr,xM,I4e,dFr,cFr,jH,fFr,mFr,gFr,$M,q4e,hFr,pFr,DH,uFr,_Fr,bFr,kM,N4e,vFr,FFr,GH,TFr,MFr,EFr,SM,j4e,CFr,wFr,OH,AFr,yFr,LFr,RM,D4e,xFr,$Fr,VH,kFr,SFr,RFr,PM,G4e,PFr,BFr,XH,IFr,qFr,NFr,BM,O4e,jFr,DFr,zH,GFr,OFr,VFr,IM,V4e,XFr,zFr,WH,WFr,QFr,HFr,qM,X4e,UFr,JFr,QH,YFr,KFr,ZFr,NM,z4e,eTr,oTr,HH,rTr,tTr,aTr,jM,W4e,nTr,sTr,UH,lTr,iTr,dTr,DM,Q4e,cTr,fTr,JH,mTr,gTr,hTr,GM,H4e,pTr,uTr,YH,_Tr,bTr,vTr,OM,U4e,FTr,TTr,KH,MTr,ETr,CTr,VM,J4e,wTr,ATr,ZH,yTr,LTr,xTr,XM,Y4e,$Tr,kTr,eU,STr,RTr,PTr,zM,K4e,BTr,ITr,oU,qTr,NTr,jTr,WM,Z4e,DTr,GTr,rU,OTr,VTr,XTr,QM,eve,zTr,WTr,tU,QTr,HTr,UTr,HM,ove,JTr,YTr,aU,KTr,ZTr,e7r,UM,rve,o7r,r7r,nU,t7r,a7r,n7r,JM,tve,s7r,l7r,sU,i7r,d7r,c7r,YM,ave,f7r,m7r,lU,g7r,h7r,p7r,KM,Tje,ic,ZM,nve,XL,u7r,sve,_7r,Mje,ar,zL,b7r,dc,v7r,iU,F7r,T7r,dU,M7r,E7r,C7r,WL,w7r,lve,A7r,y7r,L7r,Pt,QL,x7r,ive,$7r,k7r,cc,S7r,dve,R7r,P7r,cU,B7r,I7r,q7r,eE,N7r,Sr,HL,j7r,cve,D7r,G7r,sn,O7r,fve,V7r,X7r,mve,z7r,W7r,gve,Q7r,H7r,U7r,pe,oE,hve,J7r,Y7r,fU,K7r,Z7r,eMr,rE,pve,oMr,rMr,mU,tMr,aMr,nMr,tE,uve,sMr,lMr,gU,iMr,dMr,cMr,aE,_ve,fMr,mMr,hU,gMr,hMr,pMr,nE,bve,uMr,_Mr,pU,bMr,vMr,FMr,sE,vve,TMr,MMr,uU,EMr,CMr,wMr,lE,Fve,AMr,yMr,_U,LMr,xMr,$Mr,iE,Tve,kMr,SMr,bU,RMr,PMr,BMr,dE,Mve,IMr,qMr,vU,NMr,jMr,DMr,cE,Eve,GMr,OMr,FU,VMr,XMr,zMr,fE,Cve,WMr,QMr,TU,HMr,UMr,JMr,mE,wve,YMr,KMr,MU,ZMr,eEr,oEr,gE,Ave,rEr,tEr,EU,aEr,nEr,sEr,hE,yve,lEr,iEr,CU,dEr,cEr,fEr,pE,Lve,mEr,gEr,wU,hEr,pEr,uEr,uE,xve,_Er,bEr,AU,vEr,FEr,TEr,_E,$ve,MEr,EEr,yU,CEr,wEr,AEr,bE,Eje,fc,vE,kve,UL,yEr,Sve,LEr,Cje,nr,JL,xEr,mc,$Er,LU,kEr,SEr,xU,REr,PEr,BEr,YL,IEr,Rve,qEr,NEr,jEr,Bt,KL,DEr,Pve,GEr,OEr,gc,VEr,Bve,XEr,zEr,$U,WEr,QEr,HEr,FE,UEr,Rr,ZL,JEr,Ive,YEr,KEr,ln,ZEr,qve,eCr,oCr,Nve,rCr,tCr,jve,aCr,nCr,sCr,e8,TE,Dve,lCr,iCr,kU,dCr,cCr,fCr,ME,Gve,mCr,gCr,SU,hCr,pCr,uCr,EE,wje,hc,CE,Ove,o8,_Cr,Vve,bCr,Aje,sr,r8,vCr,pc,FCr,RU,TCr,MCr,PU,ECr,CCr,wCr,t8,ACr,Xve,yCr,LCr,xCr,It,a8,$Cr,zve,kCr,SCr,uc,RCr,Wve,PCr,BCr,BU,ICr,qCr,NCr,wE,jCr,Pr,n8,DCr,Qve,GCr,OCr,dn,VCr,Hve,XCr,zCr,Uve,WCr,QCr,Jve,HCr,UCr,JCr,Yve,AE,Kve,YCr,KCr,IU,ZCr,e5r,o5r,yE,yje,_c,LE,Zve,s8,r5r,eFe,t5r,Lje,lr,l8,a5r,bc,n5r,qU,s5r,l5r,NU,i5r,d5r,c5r,i8,f5r,oFe,m5r,g5r,h5r,qt,d8,p5r,rFe,u5r,_5r,vc,b5r,tFe,v5r,F5r,jU,T5r,M5r,E5r,xE,C5r,Br,c8,w5r,aFe,A5r,y5r,cn,L5r,nFe,x5r,$5r,sFe,k5r,S5r,lFe,R5r,P5r,B5r,de,$E,iFe,I5r,q5r,DU,N5r,j5r,D5r,kE,dFe,G5r,O5r,GU,V5r,X5r,z5r,SE,cFe,W5r,Q5r,OU,H5r,U5r,J5r,RE,fFe,Y5r,K5r,VU,Z5r,e3r,o3r,PE,mFe,r3r,t3r,XU,a3r,n3r,s3r,BE,gFe,l3r,i3r,zU,d3r,c3r,f3r,IE,hFe,m3r,g3r,WU,h3r,p3r,u3r,qE,pFe,_3r,b3r,QU,v3r,F3r,T3r,NE,uFe,M3r,E3r,HU,C3r,w3r,A3r,jE,_Fe,y3r,L3r,UU,x3r,$3r,k3r,DE,bFe,S3r,R3r,JU,P3r,B3r,I3r,GE,vFe,q3r,N3r,YU,j3r,D3r,G3r,OE,FFe,O3r,V3r,KU,X3r,z3r,W3r,VE,TFe,Q3r,H3r,ZU,U3r,J3r,Y3r,XE,MFe,K3r,Z3r,eJ,ewr,owr,rwr,zE,EFe,twr,awr,oJ,nwr,swr,lwr,WE,CFe,iwr,dwr,rJ,cwr,fwr,mwr,QE,wFe,gwr,hwr,tJ,pwr,uwr,_wr,HE,AFe,bwr,vwr,aJ,Fwr,Twr,Mwr,UE,yFe,Ewr,Cwr,nJ,wwr,Awr,ywr,JE,xje,Fc,YE,LFe,f8,Lwr,xFe,xwr,$je,ir,m8,$wr,Tc,kwr,sJ,Swr,Rwr,lJ,Pwr,Bwr,Iwr,g8,qwr,$Fe,Nwr,jwr,Dwr,Nt,h8,Gwr,kFe,Owr,Vwr,Mc,Xwr,SFe,zwr,Wwr,iJ,Qwr,Hwr,Uwr,KE,Jwr,Ir,p8,Ywr,RFe,Kwr,Zwr,fn,e0r,PFe,o0r,r0r,BFe,t0r,a0r,IFe,n0r,s0r,l0r,ce,ZE,qFe,i0r,d0r,dJ,c0r,f0r,m0r,eC,NFe,g0r,h0r,cJ,p0r,u0r,_0r,oC,jFe,b0r,v0r,fJ,F0r,T0r,M0r,rC,DFe,E0r,C0r,mJ,w0r,A0r,y0r,tC,GFe,L0r,x0r,gJ,$0r,k0r,S0r,aC,OFe,R0r,P0r,hJ,B0r,I0r,q0r,nC,VFe,N0r,j0r,pJ,D0r,G0r,O0r,sC,XFe,V0r,X0r,uJ,z0r,W0r,Q0r,lC,zFe,H0r,U0r,_J,J0r,Y0r,K0r,iC,WFe,Z0r,e6r,bJ,o6r,r6r,t6r,dC,QFe,a6r,n6r,vJ,s6r,l6r,i6r,cC,HFe,d6r,c6r,FJ,f6r,m6r,g6r,fC,UFe,h6r,p6r,TJ,u6r,_6r,b6r,mC,JFe,v6r,F6r,MJ,T6r,M6r,E6r,gC,YFe,C6r,w6r,EJ,A6r,y6r,L6r,hC,KFe,x6r,$6r,CJ,k6r,S6r,R6r,pC,ZFe,P6r,B6r,wJ,I6r,q6r,N6r,uC,eTe,j6r,D6r,AJ,G6r,O6r,V6r,_C,oTe,X6r,z6r,yJ,W6r,Q6r,H6r,bC,rTe,U6r,J6r,LJ,Y6r,K6r,Z6r,vC,kje,Ec,FC,tTe,u8,eAr,aTe,oAr,Sje,dr,_8,rAr,Cc,tAr,xJ,aAr,nAr,$J,sAr,lAr,iAr,b8,dAr,nTe,cAr,fAr,mAr,jt,v8,gAr,sTe,hAr,pAr,wc,uAr,lTe,_Ar,bAr,kJ,vAr,FAr,TAr,TC,MAr,qr,F8,EAr,iTe,CAr,wAr,mn,AAr,dTe,yAr,LAr,cTe,xAr,$Ar,fTe,kAr,SAr,RAr,mTe,MC,gTe,PAr,BAr,SJ,IAr,qAr,NAr,EC,Rje,Ac,CC,hTe,T8,jAr,pTe,DAr,Pje,cr,M8,GAr,yc,OAr,RJ,VAr,XAr,PJ,zAr,WAr,QAr,E8,HAr,uTe,UAr,JAr,YAr,Dt,C8,KAr,_Te,ZAr,eyr,Lc,oyr,bTe,ryr,tyr,BJ,ayr,nyr,syr,wC,lyr,Nr,w8,iyr,vTe,dyr,cyr,gn,fyr,FTe,myr,gyr,TTe,hyr,pyr,MTe,uyr,_yr,byr,ETe,AC,CTe,vyr,Fyr,IJ,Tyr,Myr,Eyr,yC,Bje,xc,LC,wTe,A8,Cyr,ATe,wyr,Ije,fr,y8,Ayr,$c,yyr,qJ,Lyr,xyr,NJ,$yr,kyr,Syr,L8,Ryr,yTe,Pyr,Byr,Iyr,Gt,x8,qyr,LTe,Nyr,jyr,kc,Dyr,xTe,Gyr,Oyr,jJ,Vyr,Xyr,zyr,xC,Wyr,jr,$8,Qyr,$Te,Hyr,Uyr,hn,Jyr,kTe,Yyr,Kyr,STe,Zyr,eLr,RTe,oLr,rLr,tLr,te,$C,PTe,aLr,nLr,DJ,sLr,lLr,iLr,kC,BTe,dLr,cLr,GJ,fLr,mLr,gLr,SC,ITe,hLr,pLr,OJ,uLr,_Lr,bLr,RC,qTe,vLr,FLr,VJ,TLr,MLr,ELr,PC,NTe,CLr,wLr,XJ,ALr,yLr,LLr,BC,jTe,xLr,$Lr,zJ,kLr,SLr,RLr,IC,DTe,PLr,BLr,WJ,ILr,qLr,NLr,qC,GTe,jLr,DLr,QJ,GLr,OLr,VLr,NC,OTe,XLr,zLr,HJ,WLr,QLr,HLr,jC,VTe,ULr,JLr,UJ,YLr,KLr,ZLr,DC,XTe,e8r,o8r,JJ,r8r,t8r,a8r,GC,zTe,n8r,s8r,YJ,l8r,i8r,d8r,OC,WTe,c8r,f8r,KJ,m8r,g8r,h8r,VC,QTe,p8r,u8r,ZJ,_8r,b8r,v8r,XC,HTe,F8r,T8r,eY,M8r,E8r,C8r,zC,UTe,w8r,A8r,oY,y8r,L8r,x8r,WC,JTe,$8r,k8r,rY,S8r,R8r,P8r,QC,YTe,B8r,I8r,tY,q8r,N8r,j8r,HC,KTe,D8r,G8r,aY,O8r,V8r,X8r,UC,ZTe,z8r,W8r,nY,Q8r,H8r,U8r,JC,e7e,J8r,Y8r,sY,K8r,Z8r,exr,YC,o7e,oxr,rxr,lY,txr,axr,nxr,KC,r7e,sxr,lxr,iY,ixr,dxr,cxr,ZC,t7e,fxr,mxr,dY,gxr,hxr,pxr,e5,a7e,uxr,_xr,cY,bxr,vxr,Fxr,o5,qje,Sc,r5,n7e,k8,Txr,s7e,Mxr,Nje,mr,S8,Exr,Rc,Cxr,fY,wxr,Axr,mY,yxr,Lxr,xxr,R8,$xr,l7e,kxr,Sxr,Rxr,Ot,P8,Pxr,i7e,Bxr,Ixr,Pc,qxr,d7e,Nxr,jxr,gY,Dxr,Gxr,Oxr,t5,Vxr,Dr,B8,Xxr,c7e,zxr,Wxr,pn,Qxr,f7e,Hxr,Uxr,m7e,Jxr,Yxr,g7e,Kxr,Zxr,e$r,Re,a5,h7e,o$r,r$r,hY,t$r,a$r,n$r,n5,p7e,s$r,l$r,pY,i$r,d$r,c$r,s5,u7e,f$r,m$r,uY,g$r,h$r,p$r,l5,_7e,u$r,_$r,_Y,b$r,v$r,F$r,i5,b7e,T$r,M$r,bY,E$r,C$r,w$r,d5,v7e,A$r,y$r,vY,L$r,x$r,$$r,c5,F7e,k$r,S$r,FY,R$r,P$r,B$r,f5,T7e,I$r,q$r,TY,N$r,j$r,D$r,m5,M7e,G$r,O$r,MY,V$r,X$r,z$r,g5,jje,Bc,h5,E7e,I8,W$r,C7e,Q$r,Dje,gr,q8,H$r,Ic,U$r,EY,J$r,Y$r,CY,K$r,Z$r,ekr,N8,okr,w7e,rkr,tkr,akr,Vt,j8,nkr,A7e,skr,lkr,qc,ikr,y7e,dkr,ckr,wY,fkr,mkr,gkr,p5,hkr,Gr,D8,pkr,L7e,ukr,_kr,un,bkr,x7e,vkr,Fkr,$7e,Tkr,Mkr,k7e,Ekr,Ckr,wkr,Ee,u5,S7e,Akr,ykr,AY,Lkr,xkr,$kr,_5,R7e,kkr,Skr,yY,Rkr,Pkr,Bkr,b5,P7e,Ikr,qkr,LY,Nkr,jkr,Dkr,v5,B7e,Gkr,Okr,xY,Vkr,Xkr,zkr,F5,I7e,Wkr,Qkr,$Y,Hkr,Ukr,Jkr,T5,q7e,Ykr,Kkr,kY,Zkr,eSr,oSr,M5,N7e,rSr,tSr,SY,aSr,nSr,sSr,E5,j7e,lSr,iSr,RY,dSr,cSr,fSr,C5,D7e,mSr,gSr,PY,hSr,pSr,uSr,w5,G7e,_Sr,bSr,BY,vSr,FSr,TSr,A5,O7e,MSr,ESr,IY,CSr,wSr,ASr,y5,V7e,ySr,LSr,qY,xSr,$Sr,kSr,L5,Gje,Nc,x5,X7e,G8,SSr,z7e,RSr,Oje,hr,O8,PSr,jc,BSr,NY,ISr,qSr,jY,NSr,jSr,DSr,V8,GSr,W7e,OSr,VSr,XSr,Xt,X8,zSr,Q7e,WSr,QSr,Dc,HSr,H7e,USr,JSr,DY,YSr,KSr,ZSr,$5,eRr,Or,z8,oRr,U7e,rRr,tRr,_n,aRr,J7e,nRr,sRr,Y7e,lRr,iRr,K7e,dRr,cRr,fRr,Le,k5,Z7e,mRr,gRr,GY,hRr,pRr,uRr,S5,eMe,_Rr,bRr,OY,vRr,FRr,TRr,R5,oMe,MRr,ERr,VY,CRr,wRr,ARr,P5,rMe,yRr,LRr,XY,xRr,$Rr,kRr,B5,tMe,SRr,RRr,zY,PRr,BRr,IRr,I5,aMe,qRr,NRr,WY,jRr,DRr,GRr,q5,nMe,ORr,VRr,QY,XRr,zRr,WRr,N5,sMe,QRr,HRr,HY,URr,JRr,YRr,j5,lMe,KRr,ZRr,UY,ePr,oPr,rPr,D5,iMe,tPr,aPr,JY,nPr,sPr,lPr,G5,Vje,Gc,O5,dMe,W8,iPr,cMe,dPr,Xje,pr,Q8,cPr,Oc,fPr,YY,mPr,gPr,KY,hPr,pPr,uPr,H8,_Pr,fMe,bPr,vPr,FPr,zt,U8,TPr,mMe,MPr,EPr,Vc,CPr,gMe,wPr,APr,ZY,yPr,LPr,xPr,V5,$Pr,Vr,J8,kPr,hMe,SPr,RPr,bn,PPr,pMe,BPr,IPr,uMe,qPr,NPr,_Me,jPr,DPr,GPr,Pe,X5,bMe,OPr,VPr,eK,XPr,zPr,WPr,z5,vMe,QPr,HPr,oK,UPr,JPr,YPr,W5,FMe,KPr,ZPr,rK,eBr,oBr,rBr,Q5,TMe,tBr,aBr,tK,nBr,sBr,lBr,H5,MMe,iBr,dBr,aK,cBr,fBr,mBr,U5,EMe,gBr,hBr,nK,pBr,uBr,_Br,J5,CMe,bBr,vBr,sK,FBr,TBr,MBr,Y5,wMe,EBr,CBr,lK,wBr,ABr,yBr,K5,AMe,LBr,xBr,iK,$Br,kBr,SBr,Z5,zje,Xc,e3,yMe,Y8,RBr,LMe,PBr,Wje,ur,K8,BBr,zc,IBr,dK,qBr,NBr,cK,jBr,DBr,GBr,Z8,OBr,xMe,VBr,XBr,zBr,Wt,ex,WBr,$Me,QBr,HBr,Wc,UBr,kMe,JBr,YBr,fK,KBr,ZBr,eIr,o3,oIr,Xr,ox,rIr,SMe,tIr,aIr,vn,nIr,RMe,sIr,lIr,PMe,iIr,dIr,BMe,cIr,fIr,mIr,xe,r3,IMe,gIr,hIr,mK,pIr,uIr,_Ir,t3,qMe,bIr,vIr,gK,FIr,TIr,MIr,a3,NMe,EIr,CIr,hK,wIr,AIr,yIr,n3,jMe,LIr,xIr,pK,$Ir,kIr,SIr,s3,DMe,RIr,PIr,uK,BIr,IIr,qIr,l3,GMe,NIr,jIr,_K,DIr,GIr,OIr,i3,OMe,VIr,XIr,bK,zIr,WIr,QIr,d3,VMe,HIr,UIr,vK,JIr,YIr,KIr,c3,XMe,ZIr,eqr,FK,oqr,rqr,tqr,f3,zMe,aqr,nqr,TK,sqr,lqr,iqr,m3,Qje,Qc,g3,WMe,rx,dqr,QMe,cqr,Hje,_r,tx,fqr,Hc,mqr,MK,gqr,hqr,EK,pqr,uqr,_qr,ax,bqr,HMe,vqr,Fqr,Tqr,Qt,nx,Mqr,UMe,Eqr,Cqr,Uc,wqr,JMe,Aqr,yqr,CK,Lqr,xqr,$qr,h3,kqr,zr,sx,Sqr,YMe,Rqr,Pqr,Fn,Bqr,KMe,Iqr,qqr,ZMe,Nqr,jqr,eEe,Dqr,Gqr,Oqr,$e,p3,oEe,Vqr,Xqr,wK,zqr,Wqr,Qqr,u3,rEe,Hqr,Uqr,AK,Jqr,Yqr,Kqr,_3,tEe,Zqr,eNr,yK,oNr,rNr,tNr,b3,aEe,aNr,nNr,LK,sNr,lNr,iNr,v3,nEe,dNr,cNr,xK,fNr,mNr,gNr,F3,sEe,hNr,pNr,$K,uNr,_Nr,bNr,T3,lEe,vNr,FNr,kK,TNr,MNr,ENr,M3,iEe,CNr,wNr,SK,ANr,yNr,LNr,E3,dEe,xNr,$Nr,RK,kNr,SNr,RNr,C3,cEe,PNr,BNr,PK,INr,qNr,NNr,w3,Uje,Jc,A3,fEe,lx,jNr,mEe,DNr,Jje,br,ix,GNr,Yc,ONr,BK,VNr,XNr,IK,zNr,WNr,QNr,dx,HNr,gEe,UNr,JNr,YNr,Ht,cx,KNr,hEe,ZNr,ejr,Kc,ojr,pEe,rjr,tjr,qK,ajr,njr,sjr,y3,ljr,Wr,fx,ijr,uEe,djr,cjr,Tn,fjr,_Ee,mjr,gjr,bEe,hjr,pjr,vEe,ujr,_jr,bjr,De,L3,FEe,vjr,Fjr,NK,Tjr,Mjr,Ejr,x3,TEe,Cjr,wjr,jK,Ajr,yjr,Ljr,$3,MEe,xjr,$jr,DK,kjr,Sjr,Rjr,k3,EEe,Pjr,Bjr,GK,Ijr,qjr,Njr,S3,CEe,jjr,Djr,OK,Gjr,Ojr,Vjr,R3,wEe,Xjr,zjr,VK,Wjr,Qjr,Hjr,P3,AEe,Ujr,Jjr,XK,Yjr,Kjr,Zjr,B3,yEe,eDr,oDr,zK,rDr,tDr,aDr,I3,Yje,Zc,q3,LEe,mx,nDr,xEe,sDr,Kje,vr,gx,lDr,ef,iDr,WK,dDr,cDr,QK,fDr,mDr,gDr,hx,hDr,$Ee,pDr,uDr,_Dr,Ut,px,bDr,kEe,vDr,FDr,of,TDr,SEe,MDr,EDr,HK,CDr,wDr,ADr,N3,yDr,Qr,ux,LDr,REe,xDr,$Dr,Mn,kDr,PEe,SDr,RDr,BEe,PDr,BDr,IEe,IDr,qDr,NDr,Ge,j3,qEe,jDr,DDr,UK,GDr,ODr,VDr,D3,NEe,XDr,zDr,JK,WDr,QDr,HDr,G3,jEe,UDr,JDr,YK,YDr,KDr,ZDr,O3,DEe,eGr,oGr,KK,rGr,tGr,aGr,V3,GEe,nGr,sGr,ZK,lGr,iGr,dGr,X3,OEe,cGr,fGr,eZ,mGr,gGr,hGr,z3,VEe,pGr,uGr,oZ,_Gr,bGr,vGr,W3,XEe,FGr,TGr,rZ,MGr,EGr,CGr,Q3,Zje,rf,H3,zEe,_x,wGr,WEe,AGr,eDe,Fr,bx,yGr,tf,LGr,tZ,xGr,$Gr,aZ,kGr,SGr,RGr,vx,PGr,QEe,BGr,IGr,qGr,Jt,Fx,NGr,HEe,jGr,DGr,af,GGr,UEe,OGr,VGr,nZ,XGr,zGr,WGr,U3,QGr,Hr,Tx,HGr,JEe,UGr,JGr,En,YGr,YEe,KGr,ZGr,KEe,eOr,oOr,ZEe,rOr,tOr,aOr,eCe,J3,oCe,nOr,sOr,sZ,lOr,iOr,dOr,Y3,oDe,nf,K3,rCe,Mx,cOr,tCe,fOr,rDe,Tr,Ex,mOr,sf,gOr,lZ,hOr,pOr,iZ,uOr,_Or,bOr,Cx,vOr,aCe,FOr,TOr,MOr,Yt,wx,EOr,nCe,COr,wOr,lf,AOr,sCe,yOr,LOr,dZ,xOr,$Or,kOr,Z3,SOr,Ur,Ax,ROr,lCe,POr,BOr,Cn,IOr,iCe,qOr,NOr,dCe,jOr,DOr,cCe,GOr,OOr,VOr,yx,ew,fCe,XOr,zOr,cZ,WOr,QOr,HOr,ow,mCe,UOr,JOr,fZ,YOr,KOr,ZOr,rw,tDe,df,tw,gCe,Lx,eVr,hCe,oVr,aDe,Mr,xx,rVr,cf,tVr,mZ,aVr,nVr,gZ,sVr,lVr,iVr,$x,dVr,pCe,cVr,fVr,mVr,Kt,kx,gVr,uCe,hVr,pVr,ff,uVr,_Ce,_Vr,bVr,hZ,vVr,FVr,TVr,aw,MVr,Jr,Sx,EVr,bCe,CVr,wVr,wn,AVr,vCe,yVr,LVr,FCe,xVr,$Vr,TCe,kVr,SVr,RVr,MCe,nw,ECe,PVr,BVr,pZ,IVr,qVr,NVr,sw,nDe;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),L6=new re({}),x6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new jVr({props:{warning:!0,$$slots:{default:[M$t]},$$scope:{ctx:L}}}),$6=new re({}),k6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/configuration_auto.py#L584"}}),P6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/configuration_auto.py#L607"}}),Eg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[E$t]},$$scope:{ctx:L}}}),B6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/configuration_auto.py#L730"}}),I6=new re({}),q6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/tokenization_auto.py#L390"}}),D6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17499/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/tokenization_auto.py#L404"}}),ah=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[C$t]},$$scope:{ctx:L}}}),G6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/tokenization_auto.py#L603"}}),O6=new re({}),V6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),W6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17499/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/feature_extraction_auto.py#L204"}}),Ih=new jVr({props:{$$slots:{default:[w$t]},$$scope:{ctx:L}}}),qh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[A$t]},$$scope:{ctx:L}}}),Q6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/feature_extraction_auto.py#L331"}}),H6=new re({}),U6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/processing_auto.py#L88"}}),K6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/processing_auto.py#L102"}}),tp=new jVr({props:{$$slots:{default:[y$t]},$$scope:{ctx:L}}}),ap=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[L$t]},$$scope:{ctx:L}}}),Z6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/processing_auto.py#L255"}}),eA=new re({}),oA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L737"}}),tA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),lp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[x$t]},$$scope:{ctx:L}}}),aA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),r_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[$$t]},$$scope:{ctx:L}}}),nA=new re({}),sA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L744"}}),iA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),a_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[k$t]},$$scope:{ctx:L}}}),dA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),H_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[S$t]},$$scope:{ctx:L}}}),cA=new re({}),fA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L759"}}),gA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),J_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[R$t]},$$scope:{ctx:L}}}),hA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),B1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[P$t]},$$scope:{ctx:L}}}),pA=new re({}),uA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L766"}}),bA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),q1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[B$t]},$$scope:{ctx:L}}}),vA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),T9=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[I$t]},$$scope:{ctx:L}}}),FA=new re({}),TA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L773"}}),EA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),E9=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[q$t]},$$scope:{ctx:L}}}),CA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),G9=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[N$t]},$$scope:{ctx:L}}}),wA=new re({}),AA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L782"}}),LA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),V9=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[j$t]},$$scope:{ctx:L}}}),xA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),Nb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[D$t]},$$scope:{ctx:L}}}),$A=new re({}),kA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L816"}}),RA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),Db=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[G$t]},$$scope:{ctx:L}}}),PA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),_2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[O$t]},$$scope:{ctx:L}}}),BA=new re({}),IA=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L823"}}),NA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),v2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[V$t]},$$scope:{ctx:L}}}),jA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),A2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[X$t]},$$scope:{ctx:L}}}),DA=new re({}),GA=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L809"}}),VA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),L2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[z$t]},$$scope:{ctx:L}}}),XA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),c4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[W$t]},$$scope:{ctx:L}}}),zA=new re({}),WA=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L791"}}),HA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),m4=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Q$t]},$$scope:{ctx:L}}}),UA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),ev=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[H$t]},$$scope:{ctx:L}}}),JA=new re({}),YA=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L798"}}),ZA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),rv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[U$t]},$$scope:{ctx:L}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),nv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[J$t]},$$scope:{ctx:L}}}),oy=new re({}),ry=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L832"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17499/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17499/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17499/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),lv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Y$t]},$$scope:{ctx:L}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),Tv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[K$t]},$$scope:{ctx:L}}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L871"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),Ev=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Z$t]},$$scope:{ctx:L}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),Av=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ekt]},$$scope:{ctx:L}}}),fy=new re({}),my=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L878"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),Lv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[okt]},$$scope:{ctx:L}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),jv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[rkt]},$$scope:{ctx:L}}}),uy=new re({}),_y=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L901"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),Gv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[tkt]},$$scope:{ctx:L}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),Hv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[akt]},$$scope:{ctx:L}}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L885"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),Jv=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[nkt]},$$scope:{ctx:L}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),lF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[skt]},$$scope:{ctx:L}}}),Ay=new re({}),yy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L892"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),dF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[lkt]},$$scope:{ctx:L}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),gF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[ikt]},$$scope:{ctx:L}}}),Sy=new re({}),Ry=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L910"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),pF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[dkt]},$$scope:{ctx:L}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),MF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[ckt]},$$scope:{ctx:L}}}),qy=new re({}),Ny=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L917"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),CF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[fkt]},$$scope:{ctx:L}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),xF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[mkt]},$$scope:{ctx:L}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L864"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),kF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),Hy=new re({}),Uy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L839"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),qF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[pkt]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),DF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[ukt]},$$scope:{ctx:L}}}),Zy=new re({}),eL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L846"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),OF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[bkt]},$$scope:{ctx:L}}}),aL=new re({}),nL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_auto.py#L855"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[vkt]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Fkt]},$$scope:{ctx:L}}}),dL=new re({}),cL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),mL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Tkt]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),QT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Mkt]},$$scope:{ctx:L}}}),hL=new re({}),pL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),_L=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),UT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Ekt]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),v7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Ckt]},$$scope:{ctx:L}}}),vL=new re({}),FL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),ML=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),T7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[wkt]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),P7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Akt]},$$scope:{ctx:L}}}),CL=new re({}),wL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),yL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),I7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[ykt]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),G7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),xL=new re({}),$L=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),SL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),V7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),cM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[$kt]},$$scope:{ctx:L}}}),PL=new re({}),BL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),qL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),mM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),EM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Skt]},$$scope:{ctx:L}}}),jL=new re({}),DL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),OL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),wM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),KM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),XL=new re({}),zL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),QL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),eE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),bE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),UL=new re({}),JL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),KL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),FE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),o8=new re({}),r8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),a8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),yE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),s8=new re({}),l8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),d8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),f8=new re({}),m8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),h8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),vC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),u8=new re({}),_8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),v8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),TC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),T8=new re({}),M8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),C8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),yC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),A8=new re({}),y8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),x8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),o5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),k8=new re({}),S8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),P8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),t5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),g5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),I8=new re({}),q8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),j8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),p5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),L5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[eSt]},$$scope:{ctx:L}}}),G8=new re({}),O8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),X8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),$5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),G5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),W8=new re({}),Q8=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),U8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),V5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),Y8=new re({}),K8=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),m3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),rx=new re({}),tx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),h3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),w3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),lx=new re({}),ix=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),y3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[dSt]},$$scope:{ctx:L}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),I3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),mx=new re({}),gx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),N3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[fSt]},$$scope:{ctx:L}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),Q3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[mSt]},$$scope:{ctx:L}}}),_x=new re({}),bx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[gSt]},$$scope:{ctx:L}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),Y3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),Mx=new re({}),Ex=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17499/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),Z3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),rw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),Lx=new re({}),xx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17499/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17499/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L389"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[_St]},$$scope:{ctx:L}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17499/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17499/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17499/src/transformers/models/auto/auto_factory.py#L417"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[bSt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),C6=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),w6=o("AutoConfig"),Ln=o(", "),xn=a("a"),A6=o("AutoModel"),pi=o(`, and
`),$n=a("a"),y6=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),W$=o("will create a model that is an instance of "),_i=a("a"),Q$=o("BertModel"),H$=o("."),Eo=l(),wa=a("p"),U$=o("There is one class of "),bf=a("code"),J$=o("AutoModel"),gOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),rNe=l(),bi=a("h2"),vf=a("a"),ioe=a("span"),F(L6.$$.fragment),hOe=l(),doe=a("span"),pOe=o("Extending the Auto Classes"),tNe=l(),kn=a("p"),uOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),coe=a("code"),_Oe=o("NewModel"),bOe=o(", make sure you have a "),foe=a("code"),vOe=o("NewModelConfig"),FOe=o(` then you can add those to the auto
classes like this:`),aNe=l(),F(x6.$$.fragment),nNe=l(),Y$=a("p"),TOe=o("You will then be able to use the auto classes like you would usually do!"),sNe=l(),F(Ff.$$.fragment),lNe=l(),vi=a("h2"),Tf=a("a"),moe=a("span"),F($6.$$.fragment),MOe=l(),goe=a("span"),EOe=o("AutoConfig"),iNe=l(),Co=a("div"),F(k6.$$.fragment),COe=l(),S6=a("p"),wOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),K$=a("a"),AOe=o("from_pretrained()"),yOe=o(" class method."),LOe=l(),R6=a("p"),xOe=o("This class cannot be instantiated directly using "),hoe=a("code"),$Oe=o("__init__()"),kOe=o(" (throws an error)."),SOe=l(),Er=a("div"),F(P6.$$.fragment),ROe=l(),poe=a("p"),POe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),BOe=l(),Fi=a("p"),IOe=o("The configuration class to instantiate is selected based on the "),uoe=a("code"),qOe=o("model_type"),NOe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),_oe=a("code"),jOe=o("pretrained_model_name_or_path"),DOe=o(":"),GOe=l(),A=a("ul"),Mf=a("li"),boe=a("strong"),OOe=o("albert"),VOe=o(" \u2014 "),Z$=a("a"),XOe=o("AlbertConfig"),zOe=o(" (ALBERT model)"),WOe=l(),Ef=a("li"),voe=a("strong"),QOe=o("bart"),HOe=o(" \u2014 "),ek=a("a"),UOe=o("BartConfig"),JOe=o(" (BART model)"),YOe=l(),Cf=a("li"),Foe=a("strong"),KOe=o("beit"),ZOe=o(" \u2014 "),ok=a("a"),eVe=o("BeitConfig"),oVe=o(" (BEiT model)"),rVe=l(),wf=a("li"),Toe=a("strong"),tVe=o("bert"),aVe=o(" \u2014 "),rk=a("a"),nVe=o("BertConfig"),sVe=o(" (BERT model)"),lVe=l(),Af=a("li"),Moe=a("strong"),iVe=o("bert-generation"),dVe=o(" \u2014 "),tk=a("a"),cVe=o("BertGenerationConfig"),fVe=o(" (Bert Generation model)"),mVe=l(),yf=a("li"),Eoe=a("strong"),gVe=o("big_bird"),hVe=o(" \u2014 "),ak=a("a"),pVe=o("BigBirdConfig"),uVe=o(" (BigBird model)"),_Ve=l(),Lf=a("li"),Coe=a("strong"),bVe=o("bigbird_pegasus"),vVe=o(" \u2014 "),nk=a("a"),FVe=o("BigBirdPegasusConfig"),TVe=o(" (BigBirdPegasus model)"),MVe=l(),xf=a("li"),woe=a("strong"),EVe=o("blenderbot"),CVe=o(" \u2014 "),sk=a("a"),wVe=o("BlenderbotConfig"),AVe=o(" (Blenderbot model)"),yVe=l(),$f=a("li"),Aoe=a("strong"),LVe=o("blenderbot-small"),xVe=o(" \u2014 "),lk=a("a"),$Ve=o("BlenderbotSmallConfig"),kVe=o(" (BlenderbotSmall model)"),SVe=l(),kf=a("li"),yoe=a("strong"),RVe=o("camembert"),PVe=o(" \u2014 "),ik=a("a"),BVe=o("CamembertConfig"),IVe=o(" (CamemBERT model)"),qVe=l(),Sf=a("li"),Loe=a("strong"),NVe=o("canine"),jVe=o(" \u2014 "),dk=a("a"),DVe=o("CanineConfig"),GVe=o(" (Canine model)"),OVe=l(),Rf=a("li"),xoe=a("strong"),VVe=o("clip"),XVe=o(" \u2014 "),ck=a("a"),zVe=o("CLIPConfig"),WVe=o(" (CLIP model)"),QVe=l(),Pf=a("li"),$oe=a("strong"),HVe=o("convbert"),UVe=o(" \u2014 "),fk=a("a"),JVe=o("ConvBertConfig"),YVe=o(" (ConvBERT model)"),KVe=l(),Bf=a("li"),koe=a("strong"),ZVe=o("convnext"),eXe=o(" \u2014 "),mk=a("a"),oXe=o("ConvNextConfig"),rXe=o(" (ConvNext model)"),tXe=l(),If=a("li"),Soe=a("strong"),aXe=o("ctrl"),nXe=o(" \u2014 "),gk=a("a"),sXe=o("CTRLConfig"),lXe=o(" (CTRL model)"),iXe=l(),qf=a("li"),Roe=a("strong"),dXe=o("cvt"),cXe=o(" \u2014 "),hk=a("a"),fXe=o("CvtConfig"),mXe=o(" (CvT model)"),gXe=l(),Nf=a("li"),Poe=a("strong"),hXe=o("data2vec-audio"),pXe=o(" \u2014 "),pk=a("a"),uXe=o("Data2VecAudioConfig"),_Xe=o(" (Data2VecAudio model)"),bXe=l(),jf=a("li"),Boe=a("strong"),vXe=o("data2vec-text"),FXe=o(" \u2014 "),uk=a("a"),TXe=o("Data2VecTextConfig"),MXe=o(" (Data2VecText model)"),EXe=l(),Df=a("li"),Ioe=a("strong"),CXe=o("data2vec-vision"),wXe=o(" \u2014 "),_k=a("a"),AXe=o("Data2VecVisionConfig"),yXe=o(" (Data2VecVision model)"),LXe=l(),Gf=a("li"),qoe=a("strong"),xXe=o("deberta"),$Xe=o(" \u2014 "),bk=a("a"),kXe=o("DebertaConfig"),SXe=o(" (DeBERTa model)"),RXe=l(),Of=a("li"),Noe=a("strong"),PXe=o("deberta-v2"),BXe=o(" \u2014 "),vk=a("a"),IXe=o("DebertaV2Config"),qXe=o(" (DeBERTa-v2 model)"),NXe=l(),Vf=a("li"),joe=a("strong"),jXe=o("decision_transformer"),DXe=o(" \u2014 "),Fk=a("a"),GXe=o("DecisionTransformerConfig"),OXe=o(" (Decision Transformer model)"),VXe=l(),Xf=a("li"),Doe=a("strong"),XXe=o("deit"),zXe=o(" \u2014 "),Tk=a("a"),WXe=o("DeiTConfig"),QXe=o(" (DeiT model)"),HXe=l(),zf=a("li"),Goe=a("strong"),UXe=o("detr"),JXe=o(" \u2014 "),Mk=a("a"),YXe=o("DetrConfig"),KXe=o(" (DETR model)"),ZXe=l(),Wf=a("li"),Ooe=a("strong"),eze=o("distilbert"),oze=o(" \u2014 "),Ek=a("a"),rze=o("DistilBertConfig"),tze=o(" (DistilBERT model)"),aze=l(),Qf=a("li"),Voe=a("strong"),nze=o("dpr"),sze=o(" \u2014 "),Ck=a("a"),lze=o("DPRConfig"),ize=o(" (DPR model)"),dze=l(),Hf=a("li"),Xoe=a("strong"),cze=o("dpt"),fze=o(" \u2014 "),wk=a("a"),mze=o("DPTConfig"),gze=o(" (DPT model)"),hze=l(),Uf=a("li"),zoe=a("strong"),pze=o("electra"),uze=o(" \u2014 "),Ak=a("a"),_ze=o("ElectraConfig"),bze=o(" (ELECTRA model)"),vze=l(),Jf=a("li"),Woe=a("strong"),Fze=o("encoder-decoder"),Tze=o(" \u2014 "),yk=a("a"),Mze=o("EncoderDecoderConfig"),Eze=o(" (Encoder decoder model)"),Cze=l(),Yf=a("li"),Qoe=a("strong"),wze=o("flaubert"),Aze=o(" \u2014 "),Lk=a("a"),yze=o("FlaubertConfig"),Lze=o(" (FlauBERT model)"),xze=l(),Kf=a("li"),Hoe=a("strong"),$ze=o("flava"),kze=o(" \u2014 "),xk=a("a"),Sze=o("FlavaConfig"),Rze=o(" (Flava model)"),Pze=l(),Zf=a("li"),Uoe=a("strong"),Bze=o("fnet"),Ize=o(" \u2014 "),$k=a("a"),qze=o("FNetConfig"),Nze=o(" (FNet model)"),jze=l(),em=a("li"),Joe=a("strong"),Dze=o("fsmt"),Gze=o(" \u2014 "),kk=a("a"),Oze=o("FSMTConfig"),Vze=o(" (FairSeq Machine-Translation model)"),Xze=l(),om=a("li"),Yoe=a("strong"),zze=o("funnel"),Wze=o(" \u2014 "),Sk=a("a"),Qze=o("FunnelConfig"),Hze=o(" (Funnel Transformer model)"),Uze=l(),rm=a("li"),Koe=a("strong"),Jze=o("glpn"),Yze=o(" \u2014 "),Rk=a("a"),Kze=o("GLPNConfig"),Zze=o(" (GLPN model)"),eWe=l(),tm=a("li"),Zoe=a("strong"),oWe=o("gpt2"),rWe=o(" \u2014 "),Pk=a("a"),tWe=o("GPT2Config"),aWe=o(" (OpenAI GPT-2 model)"),nWe=l(),am=a("li"),ere=a("strong"),sWe=o("gpt_neo"),lWe=o(" \u2014 "),Bk=a("a"),iWe=o("GPTNeoConfig"),dWe=o(" (GPT Neo model)"),cWe=l(),nm=a("li"),ore=a("strong"),fWe=o("gpt_neox"),mWe=o(" \u2014 "),Ik=a("a"),gWe=o("GPTNeoXConfig"),hWe=o(" (GPT NeoX model)"),pWe=l(),sm=a("li"),rre=a("strong"),uWe=o("gptj"),_We=o(" \u2014 "),qk=a("a"),bWe=o("GPTJConfig"),vWe=o(" (GPT-J model)"),FWe=l(),lm=a("li"),tre=a("strong"),TWe=o("hubert"),MWe=o(" \u2014 "),Nk=a("a"),EWe=o("HubertConfig"),CWe=o(" (Hubert model)"),wWe=l(),im=a("li"),are=a("strong"),AWe=o("ibert"),yWe=o(" \u2014 "),jk=a("a"),LWe=o("IBertConfig"),xWe=o(" (I-BERT model)"),$We=l(),dm=a("li"),nre=a("strong"),kWe=o("imagegpt"),SWe=o(" \u2014 "),Dk=a("a"),RWe=o("ImageGPTConfig"),PWe=o(" (ImageGPT model)"),BWe=l(),cm=a("li"),sre=a("strong"),IWe=o("layoutlm"),qWe=o(" \u2014 "),Gk=a("a"),NWe=o("LayoutLMConfig"),jWe=o(" (LayoutLM model)"),DWe=l(),fm=a("li"),lre=a("strong"),GWe=o("layoutlmv2"),OWe=o(" \u2014 "),Ok=a("a"),VWe=o("LayoutLMv2Config"),XWe=o(" (LayoutLMv2 model)"),zWe=l(),mm=a("li"),ire=a("strong"),WWe=o("layoutlmv3"),QWe=o(" \u2014 "),Vk=a("a"),HWe=o("LayoutLMv3Config"),UWe=o(" (LayoutLMv3 model)"),JWe=l(),gm=a("li"),dre=a("strong"),YWe=o("led"),KWe=o(" \u2014 "),Xk=a("a"),ZWe=o("LEDConfig"),eQe=o(" (LED model)"),oQe=l(),hm=a("li"),cre=a("strong"),rQe=o("longformer"),tQe=o(" \u2014 "),zk=a("a"),aQe=o("LongformerConfig"),nQe=o(" (Longformer model)"),sQe=l(),pm=a("li"),fre=a("strong"),lQe=o("luke"),iQe=o(" \u2014 "),Wk=a("a"),dQe=o("LukeConfig"),cQe=o(" (LUKE model)"),fQe=l(),um=a("li"),mre=a("strong"),mQe=o("lxmert"),gQe=o(" \u2014 "),Qk=a("a"),hQe=o("LxmertConfig"),pQe=o(" (LXMERT model)"),uQe=l(),_m=a("li"),gre=a("strong"),_Qe=o("m2m_100"),bQe=o(" \u2014 "),Hk=a("a"),vQe=o("M2M100Config"),FQe=o(" (M2M100 model)"),TQe=l(),bm=a("li"),hre=a("strong"),MQe=o("marian"),EQe=o(" \u2014 "),Uk=a("a"),CQe=o("MarianConfig"),wQe=o(" (Marian model)"),AQe=l(),vm=a("li"),pre=a("strong"),yQe=o("maskformer"),LQe=o(" \u2014 "),Jk=a("a"),xQe=o("MaskFormerConfig"),$Qe=o(" (MaskFormer model)"),kQe=l(),Fm=a("li"),ure=a("strong"),SQe=o("mbart"),RQe=o(" \u2014 "),Yk=a("a"),PQe=o("MBartConfig"),BQe=o(" (mBART model)"),IQe=l(),Tm=a("li"),_re=a("strong"),qQe=o("megatron-bert"),NQe=o(" \u2014 "),Kk=a("a"),jQe=o("MegatronBertConfig"),DQe=o(" (MegatronBert model)"),GQe=l(),Mm=a("li"),bre=a("strong"),OQe=o("mobilebert"),VQe=o(" \u2014 "),Zk=a("a"),XQe=o("MobileBertConfig"),zQe=o(" (MobileBERT model)"),WQe=l(),Em=a("li"),vre=a("strong"),QQe=o("mpnet"),HQe=o(" \u2014 "),eS=a("a"),UQe=o("MPNetConfig"),JQe=o(" (MPNet model)"),YQe=l(),Cm=a("li"),Fre=a("strong"),KQe=o("mt5"),ZQe=o(" \u2014 "),oS=a("a"),eHe=o("MT5Config"),oHe=o(" (mT5 model)"),rHe=l(),wm=a("li"),Tre=a("strong"),tHe=o("nystromformer"),aHe=o(" \u2014 "),rS=a("a"),nHe=o("NystromformerConfig"),sHe=o(" (Nystromformer model)"),lHe=l(),Am=a("li"),Mre=a("strong"),iHe=o("openai-gpt"),dHe=o(" \u2014 "),tS=a("a"),cHe=o("OpenAIGPTConfig"),fHe=o(" (OpenAI GPT model)"),mHe=l(),ym=a("li"),Ere=a("strong"),gHe=o("opt"),hHe=o(" \u2014 "),aS=a("a"),pHe=o("OPTConfig"),uHe=o(" (OPT model)"),_He=l(),Lm=a("li"),Cre=a("strong"),bHe=o("pegasus"),vHe=o(" \u2014 "),nS=a("a"),FHe=o("PegasusConfig"),THe=o(" (Pegasus model)"),MHe=l(),xm=a("li"),wre=a("strong"),EHe=o("perceiver"),CHe=o(" \u2014 "),sS=a("a"),wHe=o("PerceiverConfig"),AHe=o(" (Perceiver model)"),yHe=l(),$m=a("li"),Are=a("strong"),LHe=o("plbart"),xHe=o(" \u2014 "),lS=a("a"),$He=o("PLBartConfig"),kHe=o(" (PLBart model)"),SHe=l(),km=a("li"),yre=a("strong"),RHe=o("poolformer"),PHe=o(" \u2014 "),iS=a("a"),BHe=o("PoolFormerConfig"),IHe=o(" (PoolFormer model)"),qHe=l(),Sm=a("li"),Lre=a("strong"),NHe=o("prophetnet"),jHe=o(" \u2014 "),dS=a("a"),DHe=o("ProphetNetConfig"),GHe=o(" (ProphetNet model)"),OHe=l(),Rm=a("li"),xre=a("strong"),VHe=o("qdqbert"),XHe=o(" \u2014 "),cS=a("a"),zHe=o("QDQBertConfig"),WHe=o(" (QDQBert model)"),QHe=l(),Pm=a("li"),$re=a("strong"),HHe=o("rag"),UHe=o(" \u2014 "),fS=a("a"),JHe=o("RagConfig"),YHe=o(" (RAG model)"),KHe=l(),Bm=a("li"),kre=a("strong"),ZHe=o("realm"),eUe=o(" \u2014 "),mS=a("a"),oUe=o("RealmConfig"),rUe=o(" (Realm model)"),tUe=l(),Im=a("li"),Sre=a("strong"),aUe=o("reformer"),nUe=o(" \u2014 "),gS=a("a"),sUe=o("ReformerConfig"),lUe=o(" (Reformer model)"),iUe=l(),qm=a("li"),Rre=a("strong"),dUe=o("regnet"),cUe=o(" \u2014 "),hS=a("a"),fUe=o("RegNetConfig"),mUe=o(" (RegNet model)"),gUe=l(),Nm=a("li"),Pre=a("strong"),hUe=o("rembert"),pUe=o(" \u2014 "),pS=a("a"),uUe=o("RemBertConfig"),_Ue=o(" (RemBERT model)"),bUe=l(),jm=a("li"),Bre=a("strong"),vUe=o("resnet"),FUe=o(" \u2014 "),uS=a("a"),TUe=o("ResNetConfig"),MUe=o(" (ResNet model)"),EUe=l(),Dm=a("li"),Ire=a("strong"),CUe=o("retribert"),wUe=o(" \u2014 "),_S=a("a"),AUe=o("RetriBertConfig"),yUe=o(" (RetriBERT model)"),LUe=l(),Gm=a("li"),qre=a("strong"),xUe=o("roberta"),$Ue=o(" \u2014 "),bS=a("a"),kUe=o("RobertaConfig"),SUe=o(" (RoBERTa model)"),RUe=l(),Om=a("li"),Nre=a("strong"),PUe=o("roformer"),BUe=o(" \u2014 "),vS=a("a"),IUe=o("RoFormerConfig"),qUe=o(" (RoFormer model)"),NUe=l(),Vm=a("li"),jre=a("strong"),jUe=o("segformer"),DUe=o(" \u2014 "),FS=a("a"),GUe=o("SegformerConfig"),OUe=o(" (SegFormer model)"),VUe=l(),Xm=a("li"),Dre=a("strong"),XUe=o("sew"),zUe=o(" \u2014 "),TS=a("a"),WUe=o("SEWConfig"),QUe=o(" (SEW model)"),HUe=l(),zm=a("li"),Gre=a("strong"),UUe=o("sew-d"),JUe=o(" \u2014 "),MS=a("a"),YUe=o("SEWDConfig"),KUe=o(" (SEW-D model)"),ZUe=l(),Wm=a("li"),Ore=a("strong"),eJe=o("speech-encoder-decoder"),oJe=o(" \u2014 "),ES=a("a"),rJe=o("SpeechEncoderDecoderConfig"),tJe=o(" (Speech Encoder decoder model)"),aJe=l(),Qm=a("li"),Vre=a("strong"),nJe=o("speech_to_text"),sJe=o(" \u2014 "),CS=a("a"),lJe=o("Speech2TextConfig"),iJe=o(" (Speech2Text model)"),dJe=l(),Hm=a("li"),Xre=a("strong"),cJe=o("speech_to_text_2"),fJe=o(" \u2014 "),wS=a("a"),mJe=o("Speech2Text2Config"),gJe=o(" (Speech2Text2 model)"),hJe=l(),Um=a("li"),zre=a("strong"),pJe=o("splinter"),uJe=o(" \u2014 "),AS=a("a"),_Je=o("SplinterConfig"),bJe=o(" (Splinter model)"),vJe=l(),Jm=a("li"),Wre=a("strong"),FJe=o("squeezebert"),TJe=o(" \u2014 "),yS=a("a"),MJe=o("SqueezeBertConfig"),EJe=o(" (SqueezeBERT model)"),CJe=l(),Ym=a("li"),Qre=a("strong"),wJe=o("swin"),AJe=o(" \u2014 "),LS=a("a"),yJe=o("SwinConfig"),LJe=o(" (Swin model)"),xJe=l(),Km=a("li"),Hre=a("strong"),$Je=o("t5"),kJe=o(" \u2014 "),xS=a("a"),SJe=o("T5Config"),RJe=o(" (T5 model)"),PJe=l(),Zm=a("li"),Ure=a("strong"),BJe=o("tapas"),IJe=o(" \u2014 "),$S=a("a"),qJe=o("TapasConfig"),NJe=o(" (TAPAS model)"),jJe=l(),eg=a("li"),Jre=a("strong"),DJe=o("trajectory_transformer"),GJe=o(" \u2014 "),kS=a("a"),OJe=o("TrajectoryTransformerConfig"),VJe=o(" (Trajectory Transformer model)"),XJe=l(),og=a("li"),Yre=a("strong"),zJe=o("transfo-xl"),WJe=o(" \u2014 "),SS=a("a"),QJe=o("TransfoXLConfig"),HJe=o(" (Transformer-XL model)"),UJe=l(),rg=a("li"),Kre=a("strong"),JJe=o("trocr"),YJe=o(" \u2014 "),RS=a("a"),KJe=o("TrOCRConfig"),ZJe=o(" (TrOCR model)"),eYe=l(),tg=a("li"),Zre=a("strong"),oYe=o("unispeech"),rYe=o(" \u2014 "),PS=a("a"),tYe=o("UniSpeechConfig"),aYe=o(" (UniSpeech model)"),nYe=l(),ag=a("li"),ete=a("strong"),sYe=o("unispeech-sat"),lYe=o(" \u2014 "),BS=a("a"),iYe=o("UniSpeechSatConfig"),dYe=o(" (UniSpeechSat model)"),cYe=l(),ng=a("li"),ote=a("strong"),fYe=o("van"),mYe=o(" \u2014 "),IS=a("a"),gYe=o("VanConfig"),hYe=o(" (VAN model)"),pYe=l(),sg=a("li"),rte=a("strong"),uYe=o("vilt"),_Ye=o(" \u2014 "),qS=a("a"),bYe=o("ViltConfig"),vYe=o(" (ViLT model)"),FYe=l(),lg=a("li"),tte=a("strong"),TYe=o("vision-encoder-decoder"),MYe=o(" \u2014 "),NS=a("a"),EYe=o("VisionEncoderDecoderConfig"),CYe=o(" (Vision Encoder decoder model)"),wYe=l(),ig=a("li"),ate=a("strong"),AYe=o("vision-text-dual-encoder"),yYe=o(" \u2014 "),jS=a("a"),LYe=o("VisionTextDualEncoderConfig"),xYe=o(" (VisionTextDualEncoder model)"),$Ye=l(),dg=a("li"),nte=a("strong"),kYe=o("visual_bert"),SYe=o(" \u2014 "),DS=a("a"),RYe=o("VisualBertConfig"),PYe=o(" (VisualBert model)"),BYe=l(),cg=a("li"),ste=a("strong"),IYe=o("vit"),qYe=o(" \u2014 "),GS=a("a"),NYe=o("ViTConfig"),jYe=o(" (ViT model)"),DYe=l(),fg=a("li"),lte=a("strong"),GYe=o("vit_mae"),OYe=o(" \u2014 "),OS=a("a"),VYe=o("ViTMAEConfig"),XYe=o(" (ViTMAE model)"),zYe=l(),mg=a("li"),ite=a("strong"),WYe=o("wav2vec2"),QYe=o(" \u2014 "),VS=a("a"),HYe=o("Wav2Vec2Config"),UYe=o(" (Wav2Vec2 model)"),JYe=l(),gg=a("li"),dte=a("strong"),YYe=o("wav2vec2-conformer"),KYe=o(" \u2014 "),XS=a("a"),ZYe=o("Wav2Vec2ConformerConfig"),eKe=o(" (Wav2Vec2-Conformer model)"),oKe=l(),hg=a("li"),cte=a("strong"),rKe=o("wavlm"),tKe=o(" \u2014 "),zS=a("a"),aKe=o("WavLMConfig"),nKe=o(" (WavLM model)"),sKe=l(),pg=a("li"),fte=a("strong"),lKe=o("xglm"),iKe=o(" \u2014 "),WS=a("a"),dKe=o("XGLMConfig"),cKe=o(" (XGLM model)"),fKe=l(),ug=a("li"),mte=a("strong"),mKe=o("xlm"),gKe=o(" \u2014 "),QS=a("a"),hKe=o("XLMConfig"),pKe=o(" (XLM model)"),uKe=l(),_g=a("li"),gte=a("strong"),_Ke=o("xlm-prophetnet"),bKe=o(" \u2014 "),HS=a("a"),vKe=o("XLMProphetNetConfig"),FKe=o(" (XLMProphetNet model)"),TKe=l(),bg=a("li"),hte=a("strong"),MKe=o("xlm-roberta"),EKe=o(" \u2014 "),US=a("a"),CKe=o("XLMRobertaConfig"),wKe=o(" (XLM-RoBERTa model)"),AKe=l(),vg=a("li"),pte=a("strong"),yKe=o("xlm-roberta-xl"),LKe=o(" \u2014 "),JS=a("a"),xKe=o("XLMRobertaXLConfig"),$Ke=o(" (XLM-RoBERTa-XL model)"),kKe=l(),Fg=a("li"),ute=a("strong"),SKe=o("xlnet"),RKe=o(" \u2014 "),YS=a("a"),PKe=o("XLNetConfig"),BKe=o(" (XLNet model)"),IKe=l(),Tg=a("li"),_te=a("strong"),qKe=o("yolos"),NKe=o(" \u2014 "),KS=a("a"),jKe=o("YolosConfig"),DKe=o(" (YOLOS model)"),GKe=l(),Mg=a("li"),bte=a("strong"),OKe=o("yoso"),VKe=o(" \u2014 "),ZS=a("a"),XKe=o("YosoConfig"),zKe=o(" (YOSO model)"),WKe=l(),F(Eg.$$.fragment),QKe=l(),Cg=a("div"),F(B6.$$.fragment),HKe=l(),vte=a("p"),UKe=o("Register a new configuration for this class."),dNe=l(),Ti=a("h2"),wg=a("a"),Fte=a("span"),F(I6.$$.fragment),JKe=l(),Tte=a("span"),YKe=o("AutoTokenizer"),cNe=l(),wo=a("div"),F(q6.$$.fragment),KKe=l(),N6=a("p"),ZKe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),eR=a("a"),eZe=o("AutoTokenizer.from_pretrained()"),oZe=o(" class method."),rZe=l(),j6=a("p"),tZe=o("This class cannot be instantiated directly using "),Mte=a("code"),aZe=o("__init__()"),nZe=o(" (throws an error)."),sZe=l(),Cr=a("div"),F(D6.$$.fragment),lZe=l(),Ete=a("p"),iZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),dZe=l(),Aa=a("p"),cZe=o("The tokenizer class to instantiate is selected based on the "),Cte=a("code"),fZe=o("model_type"),mZe=o(` property of the config object (either
passed as an argument or loaded from `),wte=a("code"),gZe=o("pretrained_model_name_or_path"),hZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ate=a("code"),pZe=o("pretrained_model_name_or_path"),uZe=o(":"),_Ze=l(),k=a("ul"),Sn=a("li"),yte=a("strong"),bZe=o("albert"),vZe=o(" \u2014 "),oR=a("a"),FZe=o("AlbertTokenizer"),TZe=o(" or "),rR=a("a"),MZe=o("AlbertTokenizerFast"),EZe=o(" (ALBERT model)"),CZe=l(),Rn=a("li"),Lte=a("strong"),wZe=o("bart"),AZe=o(" \u2014 "),tR=a("a"),yZe=o("BartTokenizer"),LZe=o(" or "),aR=a("a"),xZe=o("BartTokenizerFast"),$Ze=o(" (BART model)"),kZe=l(),Pn=a("li"),xte=a("strong"),SZe=o("barthez"),RZe=o(" \u2014 "),nR=a("a"),PZe=o("BarthezTokenizer"),BZe=o(" or "),sR=a("a"),IZe=o("BarthezTokenizerFast"),qZe=o(" (BARThez model)"),NZe=l(),Ag=a("li"),$te=a("strong"),jZe=o("bartpho"),DZe=o(" \u2014 "),lR=a("a"),GZe=o("BartphoTokenizer"),OZe=o(" (BARTpho model)"),VZe=l(),Bn=a("li"),kte=a("strong"),XZe=o("bert"),zZe=o(" \u2014 "),iR=a("a"),WZe=o("BertTokenizer"),QZe=o(" or "),dR=a("a"),HZe=o("BertTokenizerFast"),UZe=o(" (BERT model)"),JZe=l(),yg=a("li"),Ste=a("strong"),YZe=o("bert-generation"),KZe=o(" \u2014 "),cR=a("a"),ZZe=o("BertGenerationTokenizer"),eeo=o(" (Bert Generation model)"),oeo=l(),Lg=a("li"),Rte=a("strong"),reo=o("bert-japanese"),teo=o(" \u2014 "),fR=a("a"),aeo=o("BertJapaneseTokenizer"),neo=o(" (BertJapanese model)"),seo=l(),xg=a("li"),Pte=a("strong"),leo=o("bertweet"),ieo=o(" \u2014 "),mR=a("a"),deo=o("BertweetTokenizer"),ceo=o(" (Bertweet model)"),feo=l(),In=a("li"),Bte=a("strong"),meo=o("big_bird"),geo=o(" \u2014 "),gR=a("a"),heo=o("BigBirdTokenizer"),peo=o(" or "),hR=a("a"),ueo=o("BigBirdTokenizerFast"),_eo=o(" (BigBird model)"),beo=l(),qn=a("li"),Ite=a("strong"),veo=o("bigbird_pegasus"),Feo=o(" \u2014 "),pR=a("a"),Teo=o("PegasusTokenizer"),Meo=o(" or "),uR=a("a"),Eeo=o("PegasusTokenizerFast"),Ceo=o(" (BigBirdPegasus model)"),weo=l(),Nn=a("li"),qte=a("strong"),Aeo=o("blenderbot"),yeo=o(" \u2014 "),_R=a("a"),Leo=o("BlenderbotTokenizer"),xeo=o(" or "),bR=a("a"),$eo=o("BlenderbotTokenizerFast"),keo=o(" (Blenderbot model)"),Seo=l(),$g=a("li"),Nte=a("strong"),Reo=o("blenderbot-small"),Peo=o(" \u2014 "),vR=a("a"),Beo=o("BlenderbotSmallTokenizer"),Ieo=o(" (BlenderbotSmall model)"),qeo=l(),kg=a("li"),jte=a("strong"),Neo=o("byt5"),jeo=o(" \u2014 "),FR=a("a"),Deo=o("ByT5Tokenizer"),Geo=o(" (ByT5 model)"),Oeo=l(),jn=a("li"),Dte=a("strong"),Veo=o("camembert"),Xeo=o(" \u2014 "),TR=a("a"),zeo=o("CamembertTokenizer"),Weo=o(" or "),MR=a("a"),Qeo=o("CamembertTokenizerFast"),Heo=o(" (CamemBERT model)"),Ueo=l(),Sg=a("li"),Gte=a("strong"),Jeo=o("canine"),Yeo=o(" \u2014 "),ER=a("a"),Keo=o("CanineTokenizer"),Zeo=o(" (Canine model)"),eoo=l(),Dn=a("li"),Ote=a("strong"),ooo=o("clip"),roo=o(" \u2014 "),CR=a("a"),too=o("CLIPTokenizer"),aoo=o(" or "),wR=a("a"),noo=o("CLIPTokenizerFast"),soo=o(" (CLIP model)"),loo=l(),Gn=a("li"),Vte=a("strong"),ioo=o("convbert"),doo=o(" \u2014 "),AR=a("a"),coo=o("ConvBertTokenizer"),foo=o(" or "),yR=a("a"),moo=o("ConvBertTokenizerFast"),goo=o(" (ConvBERT model)"),hoo=l(),On=a("li"),Xte=a("strong"),poo=o("cpm"),uoo=o(" \u2014 "),LR=a("a"),_oo=o("CpmTokenizer"),boo=o(" or "),xR=a("a"),voo=o("CpmTokenizerFast"),Foo=o(" (CPM model)"),Too=l(),Rg=a("li"),zte=a("strong"),Moo=o("ctrl"),Eoo=o(" \u2014 "),$R=a("a"),Coo=o("CTRLTokenizer"),woo=o(" (CTRL model)"),Aoo=l(),Vn=a("li"),Wte=a("strong"),yoo=o("data2vec-text"),Loo=o(" \u2014 "),kR=a("a"),xoo=o("RobertaTokenizer"),$oo=o(" or "),SR=a("a"),koo=o("RobertaTokenizerFast"),Soo=o(" (Data2VecText model)"),Roo=l(),Xn=a("li"),Qte=a("strong"),Poo=o("deberta"),Boo=o(" \u2014 "),RR=a("a"),Ioo=o("DebertaTokenizer"),qoo=o(" or "),PR=a("a"),Noo=o("DebertaTokenizerFast"),joo=o(" (DeBERTa model)"),Doo=l(),zn=a("li"),Hte=a("strong"),Goo=o("deberta-v2"),Ooo=o(" \u2014 "),BR=a("a"),Voo=o("DebertaV2Tokenizer"),Xoo=o(" or "),IR=a("a"),zoo=o("DebertaV2TokenizerFast"),Woo=o(" (DeBERTa-v2 model)"),Qoo=l(),Wn=a("li"),Ute=a("strong"),Hoo=o("distilbert"),Uoo=o(" \u2014 "),qR=a("a"),Joo=o("DistilBertTokenizer"),Yoo=o(" or "),NR=a("a"),Koo=o("DistilBertTokenizerFast"),Zoo=o(" (DistilBERT model)"),ero=l(),Qn=a("li"),Jte=a("strong"),oro=o("dpr"),rro=o(" \u2014 "),jR=a("a"),tro=o("DPRQuestionEncoderTokenizer"),aro=o(" or "),DR=a("a"),nro=o("DPRQuestionEncoderTokenizerFast"),sro=o(" (DPR model)"),lro=l(),Hn=a("li"),Yte=a("strong"),iro=o("electra"),dro=o(" \u2014 "),GR=a("a"),cro=o("ElectraTokenizer"),fro=o(" or "),OR=a("a"),mro=o("ElectraTokenizerFast"),gro=o(" (ELECTRA model)"),hro=l(),Pg=a("li"),Kte=a("strong"),pro=o("flaubert"),uro=o(" \u2014 "),VR=a("a"),_ro=o("FlaubertTokenizer"),bro=o(" (FlauBERT model)"),vro=l(),Un=a("li"),Zte=a("strong"),Fro=o("fnet"),Tro=o(" \u2014 "),XR=a("a"),Mro=o("FNetTokenizer"),Ero=o(" or "),zR=a("a"),Cro=o("FNetTokenizerFast"),wro=o(" (FNet model)"),Aro=l(),Bg=a("li"),eae=a("strong"),yro=o("fsmt"),Lro=o(" \u2014 "),WR=a("a"),xro=o("FSMTTokenizer"),$ro=o(" (FairSeq Machine-Translation model)"),kro=l(),Jn=a("li"),oae=a("strong"),Sro=o("funnel"),Rro=o(" \u2014 "),QR=a("a"),Pro=o("FunnelTokenizer"),Bro=o(" or "),HR=a("a"),Iro=o("FunnelTokenizerFast"),qro=o(" (Funnel Transformer model)"),Nro=l(),Yn=a("li"),rae=a("strong"),jro=o("gpt2"),Dro=o(" \u2014 "),UR=a("a"),Gro=o("GPT2Tokenizer"),Oro=o(" or "),JR=a("a"),Vro=o("GPT2TokenizerFast"),Xro=o(" (OpenAI GPT-2 model)"),zro=l(),Kn=a("li"),tae=a("strong"),Wro=o("gpt_neo"),Qro=o(" \u2014 "),YR=a("a"),Hro=o("GPT2Tokenizer"),Uro=o(" or "),KR=a("a"),Jro=o("GPT2TokenizerFast"),Yro=o(" (GPT Neo model)"),Kro=l(),Ig=a("li"),aae=a("strong"),Zro=o("gpt_neox"),eto=o(" \u2014 "),ZR=a("a"),oto=o("GPTNeoXTokenizerFast"),rto=o(" (GPT NeoX model)"),tto=l(),Zn=a("li"),nae=a("strong"),ato=o("gptj"),nto=o(" \u2014 "),eP=a("a"),sto=o("GPT2Tokenizer"),lto=o(" or "),oP=a("a"),ito=o("GPT2TokenizerFast"),dto=o(" (GPT-J model)"),cto=l(),es=a("li"),sae=a("strong"),fto=o("herbert"),mto=o(" \u2014 "),rP=a("a"),gto=o("HerbertTokenizer"),hto=o(" or "),tP=a("a"),pto=o("HerbertTokenizerFast"),uto=o(" (HerBERT model)"),_to=l(),qg=a("li"),lae=a("strong"),bto=o("hubert"),vto=o(" \u2014 "),aP=a("a"),Fto=o("Wav2Vec2CTCTokenizer"),Tto=o(" (Hubert model)"),Mto=l(),os=a("li"),iae=a("strong"),Eto=o("ibert"),Cto=o(" \u2014 "),nP=a("a"),wto=o("RobertaTokenizer"),Ato=o(" or "),sP=a("a"),yto=o("RobertaTokenizerFast"),Lto=o(" (I-BERT model)"),xto=l(),rs=a("li"),dae=a("strong"),$to=o("layoutlm"),kto=o(" \u2014 "),lP=a("a"),Sto=o("LayoutLMTokenizer"),Rto=o(" or "),iP=a("a"),Pto=o("LayoutLMTokenizerFast"),Bto=o(" (LayoutLM model)"),Ito=l(),ts=a("li"),cae=a("strong"),qto=o("layoutlmv2"),Nto=o(" \u2014 "),dP=a("a"),jto=o("LayoutLMv2Tokenizer"),Dto=o(" or "),cP=a("a"),Gto=o("LayoutLMv2TokenizerFast"),Oto=o(" (LayoutLMv2 model)"),Vto=l(),as=a("li"),fae=a("strong"),Xto=o("layoutlmv3"),zto=o(" \u2014 "),fP=a("a"),Wto=o("LayoutLMv3Tokenizer"),Qto=o(" or "),mP=a("a"),Hto=o("LayoutLMv3TokenizerFast"),Uto=o(" (LayoutLMv3 model)"),Jto=l(),ns=a("li"),mae=a("strong"),Yto=o("layoutxlm"),Kto=o(" \u2014 "),gP=a("a"),Zto=o("LayoutXLMTokenizer"),eao=o(" or "),hP=a("a"),oao=o("LayoutXLMTokenizerFast"),rao=o(" (LayoutXLM model)"),tao=l(),ss=a("li"),gae=a("strong"),aao=o("led"),nao=o(" \u2014 "),pP=a("a"),sao=o("LEDTokenizer"),lao=o(" or "),uP=a("a"),iao=o("LEDTokenizerFast"),dao=o(" (LED model)"),cao=l(),ls=a("li"),hae=a("strong"),fao=o("longformer"),mao=o(" \u2014 "),_P=a("a"),gao=o("LongformerTokenizer"),hao=o(" or "),bP=a("a"),pao=o("LongformerTokenizerFast"),uao=o(" (Longformer model)"),_ao=l(),Ng=a("li"),pae=a("strong"),bao=o("luke"),vao=o(" \u2014 "),vP=a("a"),Fao=o("LukeTokenizer"),Tao=o(" (LUKE model)"),Mao=l(),is=a("li"),uae=a("strong"),Eao=o("lxmert"),Cao=o(" \u2014 "),FP=a("a"),wao=o("LxmertTokenizer"),Aao=o(" or "),TP=a("a"),yao=o("LxmertTokenizerFast"),Lao=o(" (LXMERT model)"),xao=l(),jg=a("li"),_ae=a("strong"),$ao=o("m2m_100"),kao=o(" \u2014 "),MP=a("a"),Sao=o("M2M100Tokenizer"),Rao=o(" (M2M100 model)"),Pao=l(),Dg=a("li"),bae=a("strong"),Bao=o("marian"),Iao=o(" \u2014 "),EP=a("a"),qao=o("MarianTokenizer"),Nao=o(" (Marian model)"),jao=l(),ds=a("li"),vae=a("strong"),Dao=o("mbart"),Gao=o(" \u2014 "),CP=a("a"),Oao=o("MBartTokenizer"),Vao=o(" or "),wP=a("a"),Xao=o("MBartTokenizerFast"),zao=o(" (mBART model)"),Wao=l(),cs=a("li"),Fae=a("strong"),Qao=o("mbart50"),Hao=o(" \u2014 "),AP=a("a"),Uao=o("MBart50Tokenizer"),Jao=o(" or "),yP=a("a"),Yao=o("MBart50TokenizerFast"),Kao=o(" (mBART-50 model)"),Zao=l(),fs=a("li"),Tae=a("strong"),eno=o("megatron-bert"),ono=o(" \u2014 "),LP=a("a"),rno=o("BertTokenizer"),tno=o(" or "),xP=a("a"),ano=o("BertTokenizerFast"),nno=o(" (MegatronBert model)"),sno=l(),Gg=a("li"),Mae=a("strong"),lno=o("mluke"),ino=o(" \u2014 "),$P=a("a"),dno=o("MLukeTokenizer"),cno=o(" (mLUKE model)"),fno=l(),ms=a("li"),Eae=a("strong"),mno=o("mobilebert"),gno=o(" \u2014 "),kP=a("a"),hno=o("MobileBertTokenizer"),pno=o(" or "),SP=a("a"),uno=o("MobileBertTokenizerFast"),_no=o(" (MobileBERT model)"),bno=l(),gs=a("li"),Cae=a("strong"),vno=o("mpnet"),Fno=o(" \u2014 "),RP=a("a"),Tno=o("MPNetTokenizer"),Mno=o(" or "),PP=a("a"),Eno=o("MPNetTokenizerFast"),Cno=o(" (MPNet model)"),wno=l(),hs=a("li"),wae=a("strong"),Ano=o("mt5"),yno=o(" \u2014 "),BP=a("a"),Lno=o("MT5Tokenizer"),xno=o(" or "),IP=a("a"),$no=o("MT5TokenizerFast"),kno=o(" (mT5 model)"),Sno=l(),ps=a("li"),Aae=a("strong"),Rno=o("nystromformer"),Pno=o(" \u2014 "),qP=a("a"),Bno=o("AlbertTokenizer"),Ino=o(" or "),NP=a("a"),qno=o("AlbertTokenizerFast"),Nno=o(" (Nystromformer model)"),jno=l(),us=a("li"),yae=a("strong"),Dno=o("openai-gpt"),Gno=o(" \u2014 "),jP=a("a"),Ono=o("OpenAIGPTTokenizer"),Vno=o(" or "),DP=a("a"),Xno=o("OpenAIGPTTokenizerFast"),zno=o(" (OpenAI GPT model)"),Wno=l(),Og=a("li"),Lae=a("strong"),Qno=o("opt"),Hno=o(" \u2014 "),GP=a("a"),Uno=o("GPT2Tokenizer"),Jno=o(" (OPT model)"),Yno=l(),_s=a("li"),xae=a("strong"),Kno=o("pegasus"),Zno=o(" \u2014 "),OP=a("a"),eso=o("PegasusTokenizer"),oso=o(" or "),VP=a("a"),rso=o("PegasusTokenizerFast"),tso=o(" (Pegasus model)"),aso=l(),Vg=a("li"),$ae=a("strong"),nso=o("perceiver"),sso=o(" \u2014 "),XP=a("a"),lso=o("PerceiverTokenizer"),iso=o(" (Perceiver model)"),dso=l(),Xg=a("li"),kae=a("strong"),cso=o("phobert"),fso=o(" \u2014 "),zP=a("a"),mso=o("PhobertTokenizer"),gso=o(" (PhoBERT model)"),hso=l(),zg=a("li"),Sae=a("strong"),pso=o("plbart"),uso=o(" \u2014 "),WP=a("a"),_so=o("PLBartTokenizer"),bso=o(" (PLBart model)"),vso=l(),Wg=a("li"),Rae=a("strong"),Fso=o("prophetnet"),Tso=o(" \u2014 "),QP=a("a"),Mso=o("ProphetNetTokenizer"),Eso=o(" (ProphetNet model)"),Cso=l(),bs=a("li"),Pae=a("strong"),wso=o("qdqbert"),Aso=o(" \u2014 "),HP=a("a"),yso=o("BertTokenizer"),Lso=o(" or "),UP=a("a"),xso=o("BertTokenizerFast"),$so=o(" (QDQBert model)"),kso=l(),Qg=a("li"),Bae=a("strong"),Sso=o("rag"),Rso=o(" \u2014 "),JP=a("a"),Pso=o("RagTokenizer"),Bso=o(" (RAG model)"),Iso=l(),vs=a("li"),Iae=a("strong"),qso=o("realm"),Nso=o(" \u2014 "),YP=a("a"),jso=o("RealmTokenizer"),Dso=o(" or "),KP=a("a"),Gso=o("RealmTokenizerFast"),Oso=o(" (Realm model)"),Vso=l(),Fs=a("li"),qae=a("strong"),Xso=o("reformer"),zso=o(" \u2014 "),ZP=a("a"),Wso=o("ReformerTokenizer"),Qso=o(" or "),eB=a("a"),Hso=o("ReformerTokenizerFast"),Uso=o(" (Reformer model)"),Jso=l(),Ts=a("li"),Nae=a("strong"),Yso=o("rembert"),Kso=o(" \u2014 "),oB=a("a"),Zso=o("RemBertTokenizer"),elo=o(" or "),rB=a("a"),olo=o("RemBertTokenizerFast"),rlo=o(" (RemBERT model)"),tlo=l(),Ms=a("li"),jae=a("strong"),alo=o("retribert"),nlo=o(" \u2014 "),tB=a("a"),slo=o("RetriBertTokenizer"),llo=o(" or "),aB=a("a"),ilo=o("RetriBertTokenizerFast"),dlo=o(" (RetriBERT model)"),clo=l(),Es=a("li"),Dae=a("strong"),flo=o("roberta"),mlo=o(" \u2014 "),nB=a("a"),glo=o("RobertaTokenizer"),hlo=o(" or "),sB=a("a"),plo=o("RobertaTokenizerFast"),ulo=o(" (RoBERTa model)"),_lo=l(),Cs=a("li"),Gae=a("strong"),blo=o("roformer"),vlo=o(" \u2014 "),lB=a("a"),Flo=o("RoFormerTokenizer"),Tlo=o(" or "),iB=a("a"),Mlo=o("RoFormerTokenizerFast"),Elo=o(" (RoFormer model)"),Clo=l(),Hg=a("li"),Oae=a("strong"),wlo=o("speech_to_text"),Alo=o(" \u2014 "),dB=a("a"),ylo=o("Speech2TextTokenizer"),Llo=o(" (Speech2Text model)"),xlo=l(),Ug=a("li"),Vae=a("strong"),$lo=o("speech_to_text_2"),klo=o(" \u2014 "),cB=a("a"),Slo=o("Speech2Text2Tokenizer"),Rlo=o(" (Speech2Text2 model)"),Plo=l(),ws=a("li"),Xae=a("strong"),Blo=o("splinter"),Ilo=o(" \u2014 "),fB=a("a"),qlo=o("SplinterTokenizer"),Nlo=o(" or "),mB=a("a"),jlo=o("SplinterTokenizerFast"),Dlo=o(" (Splinter model)"),Glo=l(),As=a("li"),zae=a("strong"),Olo=o("squeezebert"),Vlo=o(" \u2014 "),gB=a("a"),Xlo=o("SqueezeBertTokenizer"),zlo=o(" or "),hB=a("a"),Wlo=o("SqueezeBertTokenizerFast"),Qlo=o(" (SqueezeBERT model)"),Hlo=l(),ys=a("li"),Wae=a("strong"),Ulo=o("t5"),Jlo=o(" \u2014 "),pB=a("a"),Ylo=o("T5Tokenizer"),Klo=o(" or "),uB=a("a"),Zlo=o("T5TokenizerFast"),eio=o(" (T5 model)"),oio=l(),Jg=a("li"),Qae=a("strong"),rio=o("tapas"),tio=o(" \u2014 "),_B=a("a"),aio=o("TapasTokenizer"),nio=o(" (TAPAS model)"),sio=l(),Yg=a("li"),Hae=a("strong"),lio=o("tapex"),iio=o(" \u2014 "),bB=a("a"),dio=o("TapexTokenizer"),cio=o(" (TAPEX model)"),fio=l(),Kg=a("li"),Uae=a("strong"),mio=o("transfo-xl"),gio=o(" \u2014 "),vB=a("a"),hio=o("TransfoXLTokenizer"),pio=o(" (Transformer-XL model)"),uio=l(),Ls=a("li"),Jae=a("strong"),_io=o("visual_bert"),bio=o(" \u2014 "),FB=a("a"),vio=o("BertTokenizer"),Fio=o(" or "),TB=a("a"),Tio=o("BertTokenizerFast"),Mio=o(" (VisualBert model)"),Eio=l(),Zg=a("li"),Yae=a("strong"),Cio=o("wav2vec2"),wio=o(" \u2014 "),MB=a("a"),Aio=o("Wav2Vec2CTCTokenizer"),yio=o(" (Wav2Vec2 model)"),Lio=l(),eh=a("li"),Kae=a("strong"),xio=o("wav2vec2-conformer"),$io=o(" \u2014 "),EB=a("a"),kio=o("Wav2Vec2CTCTokenizer"),Sio=o(" (Wav2Vec2-Conformer model)"),Rio=l(),oh=a("li"),Zae=a("strong"),Pio=o("wav2vec2_phoneme"),Bio=o(" \u2014 "),CB=a("a"),Iio=o("Wav2Vec2PhonemeCTCTokenizer"),qio=o(" (Wav2Vec2Phoneme model)"),Nio=l(),xs=a("li"),ene=a("strong"),jio=o("xglm"),Dio=o(" \u2014 "),wB=a("a"),Gio=o("XGLMTokenizer"),Oio=o(" or "),AB=a("a"),Vio=o("XGLMTokenizerFast"),Xio=o(" (XGLM model)"),zio=l(),rh=a("li"),one=a("strong"),Wio=o("xlm"),Qio=o(" \u2014 "),yB=a("a"),Hio=o("XLMTokenizer"),Uio=o(" (XLM model)"),Jio=l(),th=a("li"),rne=a("strong"),Yio=o("xlm-prophetnet"),Kio=o(" \u2014 "),LB=a("a"),Zio=o("XLMProphetNetTokenizer"),edo=o(" (XLMProphetNet model)"),odo=l(),$s=a("li"),tne=a("strong"),rdo=o("xlm-roberta"),tdo=o(" \u2014 "),xB=a("a"),ado=o("XLMRobertaTokenizer"),ndo=o(" or "),$B=a("a"),sdo=o("XLMRobertaTokenizerFast"),ldo=o(" (XLM-RoBERTa model)"),ido=l(),ks=a("li"),ane=a("strong"),ddo=o("xlm-roberta-xl"),cdo=o(" \u2014 "),kB=a("a"),fdo=o("RobertaTokenizer"),mdo=o(" or "),SB=a("a"),gdo=o("RobertaTokenizerFast"),hdo=o(" (XLM-RoBERTa-XL model)"),pdo=l(),Ss=a("li"),nne=a("strong"),udo=o("xlnet"),_do=o(" \u2014 "),RB=a("a"),bdo=o("XLNetTokenizer"),vdo=o(" or "),PB=a("a"),Fdo=o("XLNetTokenizerFast"),Tdo=o(" (XLNet model)"),Mdo=l(),Rs=a("li"),sne=a("strong"),Edo=o("yoso"),Cdo=o(" \u2014 "),BB=a("a"),wdo=o("AlbertTokenizer"),Ado=o(" or "),IB=a("a"),ydo=o("AlbertTokenizerFast"),Ldo=o(" (YOSO model)"),xdo=l(),F(ah.$$.fragment),$do=l(),nh=a("div"),F(G6.$$.fragment),kdo=l(),lne=a("p"),Sdo=o("Register a new tokenizer in this mapping."),fNe=l(),Mi=a("h2"),sh=a("a"),ine=a("span"),F(O6.$$.fragment),Rdo=l(),dne=a("span"),Pdo=o("AutoFeatureExtractor"),mNe=l(),Ao=a("div"),F(V6.$$.fragment),Bdo=l(),X6=a("p"),Ido=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),qB=a("a"),qdo=o("AutoFeatureExtractor.from_pretrained()"),Ndo=o(" class method."),jdo=l(),z6=a("p"),Ddo=o("This class cannot be instantiated directly using "),cne=a("code"),Gdo=o("__init__()"),Odo=o(" (throws an error)."),Vdo=l(),He=a("div"),F(W6.$$.fragment),Xdo=l(),fne=a("p"),zdo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Wdo=l(),ya=a("p"),Qdo=o("The feature extractor class to instantiate is selected based on the "),mne=a("code"),Hdo=o("model_type"),Udo=o(` property of the config object
(either passed as an argument or loaded from `),gne=a("code"),Jdo=o("pretrained_model_name_or_path"),Ydo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),hne=a("code"),Kdo=o("pretrained_model_name_or_path"),Zdo=o(":"),eco=l(),Y=a("ul"),lh=a("li"),pne=a("strong"),oco=o("beit"),rco=o(" \u2014 "),NB=a("a"),tco=o("BeitFeatureExtractor"),aco=o(" (BEiT model)"),nco=l(),ih=a("li"),une=a("strong"),sco=o("clip"),lco=o(" \u2014 "),jB=a("a"),ico=o("CLIPFeatureExtractor"),dco=o(" (CLIP model)"),cco=l(),dh=a("li"),_ne=a("strong"),fco=o("convnext"),mco=o(" \u2014 "),DB=a("a"),gco=o("ConvNextFeatureExtractor"),hco=o(" (ConvNext model)"),pco=l(),ch=a("li"),bne=a("strong"),uco=o("cvt"),_co=o(" \u2014 "),GB=a("a"),bco=o("ConvNextFeatureExtractor"),vco=o(" (CvT model)"),Fco=l(),fh=a("li"),vne=a("strong"),Tco=o("data2vec-audio"),Mco=o(" \u2014 "),OB=a("a"),Eco=o("Wav2Vec2FeatureExtractor"),Cco=o(" (Data2VecAudio model)"),wco=l(),mh=a("li"),Fne=a("strong"),Aco=o("data2vec-vision"),yco=o(" \u2014 "),VB=a("a"),Lco=o("BeitFeatureExtractor"),xco=o(" (Data2VecVision model)"),$co=l(),gh=a("li"),Tne=a("strong"),kco=o("deit"),Sco=o(" \u2014 "),XB=a("a"),Rco=o("DeiTFeatureExtractor"),Pco=o(" (DeiT model)"),Bco=l(),hh=a("li"),Mne=a("strong"),Ico=o("detr"),qco=o(" \u2014 "),zB=a("a"),Nco=o("DetrFeatureExtractor"),jco=o(" (DETR model)"),Dco=l(),ph=a("li"),Ene=a("strong"),Gco=o("dpt"),Oco=o(" \u2014 "),WB=a("a"),Vco=o("DPTFeatureExtractor"),Xco=o(" (DPT model)"),zco=l(),uh=a("li"),Cne=a("strong"),Wco=o("flava"),Qco=o(" \u2014 "),QB=a("a"),Hco=o("FlavaFeatureExtractor"),Uco=o(" (Flava model)"),Jco=l(),_h=a("li"),wne=a("strong"),Yco=o("glpn"),Kco=o(" \u2014 "),HB=a("a"),Zco=o("GLPNFeatureExtractor"),efo=o(" (GLPN model)"),ofo=l(),bh=a("li"),Ane=a("strong"),rfo=o("hubert"),tfo=o(" \u2014 "),UB=a("a"),afo=o("Wav2Vec2FeatureExtractor"),nfo=o(" (Hubert model)"),sfo=l(),vh=a("li"),yne=a("strong"),lfo=o("imagegpt"),ifo=o(" \u2014 "),JB=a("a"),dfo=o("ImageGPTFeatureExtractor"),cfo=o(" (ImageGPT model)"),ffo=l(),Fh=a("li"),Lne=a("strong"),mfo=o("layoutlmv2"),gfo=o(" \u2014 "),YB=a("a"),hfo=o("LayoutLMv2FeatureExtractor"),pfo=o(" (LayoutLMv2 model)"),ufo=l(),Th=a("li"),xne=a("strong"),_fo=o("layoutlmv3"),bfo=o(" \u2014 "),KB=a("a"),vfo=o("LayoutLMv3FeatureExtractor"),Ffo=o(" (LayoutLMv3 model)"),Tfo=l(),Mh=a("li"),$ne=a("strong"),Mfo=o("maskformer"),Efo=o(" \u2014 "),ZB=a("a"),Cfo=o("MaskFormerFeatureExtractor"),wfo=o(" (MaskFormer model)"),Afo=l(),Eh=a("li"),kne=a("strong"),yfo=o("perceiver"),Lfo=o(" \u2014 "),eI=a("a"),xfo=o("PerceiverFeatureExtractor"),$fo=o(" (Perceiver model)"),kfo=l(),Ch=a("li"),Sne=a("strong"),Sfo=o("poolformer"),Rfo=o(" \u2014 "),oI=a("a"),Pfo=o("PoolFormerFeatureExtractor"),Bfo=o(" (PoolFormer model)"),Ifo=l(),wh=a("li"),Rne=a("strong"),qfo=o("regnet"),Nfo=o(" \u2014 "),rI=a("a"),jfo=o("ConvNextFeatureExtractor"),Dfo=o(" (RegNet model)"),Gfo=l(),Ah=a("li"),Pne=a("strong"),Ofo=o("resnet"),Vfo=o(" \u2014 "),tI=a("a"),Xfo=o("ConvNextFeatureExtractor"),zfo=o(" (ResNet model)"),Wfo=l(),yh=a("li"),Bne=a("strong"),Qfo=o("segformer"),Hfo=o(" \u2014 "),aI=a("a"),Ufo=o("SegformerFeatureExtractor"),Jfo=o(" (SegFormer model)"),Yfo=l(),Lh=a("li"),Ine=a("strong"),Kfo=o("speech_to_text"),Zfo=o(" \u2014 "),nI=a("a"),emo=o("Speech2TextFeatureExtractor"),omo=o(" (Speech2Text model)"),rmo=l(),xh=a("li"),qne=a("strong"),tmo=o("swin"),amo=o(" \u2014 "),sI=a("a"),nmo=o("ViTFeatureExtractor"),smo=o(" (Swin model)"),lmo=l(),$h=a("li"),Nne=a("strong"),imo=o("van"),dmo=o(" \u2014 "),lI=a("a"),cmo=o("ConvNextFeatureExtractor"),fmo=o(" (VAN model)"),mmo=l(),kh=a("li"),jne=a("strong"),gmo=o("vit"),hmo=o(" \u2014 "),iI=a("a"),pmo=o("ViTFeatureExtractor"),umo=o(" (ViT model)"),_mo=l(),Sh=a("li"),Dne=a("strong"),bmo=o("vit_mae"),vmo=o(" \u2014 "),dI=a("a"),Fmo=o("ViTFeatureExtractor"),Tmo=o(" (ViTMAE model)"),Mmo=l(),Rh=a("li"),Gne=a("strong"),Emo=o("wav2vec2"),Cmo=o(" \u2014 "),cI=a("a"),wmo=o("Wav2Vec2FeatureExtractor"),Amo=o(" (Wav2Vec2 model)"),ymo=l(),Ph=a("li"),One=a("strong"),Lmo=o("wav2vec2-conformer"),xmo=o(" \u2014 "),fI=a("a"),$mo=o("Wav2Vec2FeatureExtractor"),kmo=o(" (Wav2Vec2-Conformer model)"),Smo=l(),Bh=a("li"),Vne=a("strong"),Rmo=o("yolos"),Pmo=o(" \u2014 "),mI=a("a"),Bmo=o("YolosFeatureExtractor"),Imo=o(" (YOLOS model)"),qmo=l(),F(Ih.$$.fragment),Nmo=l(),F(qh.$$.fragment),jmo=l(),Nh=a("div"),F(Q6.$$.fragment),Dmo=l(),Xne=a("p"),Gmo=o("Register a new feature extractor for this class."),gNe=l(),Ei=a("h2"),jh=a("a"),zne=a("span"),F(H6.$$.fragment),Omo=l(),Wne=a("span"),Vmo=o("AutoProcessor"),hNe=l(),yo=a("div"),F(U6.$$.fragment),Xmo=l(),J6=a("p"),zmo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),gI=a("a"),Wmo=o("AutoProcessor.from_pretrained()"),Qmo=o(" class method."),Hmo=l(),Y6=a("p"),Umo=o("This class cannot be instantiated directly using "),Qne=a("code"),Jmo=o("__init__()"),Ymo=o(" (throws an error)."),Kmo=l(),Ue=a("div"),F(K6.$$.fragment),Zmo=l(),Hne=a("p"),ego=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ogo=l(),Ci=a("p"),rgo=o("The processor class to instantiate is selected based on the "),Une=a("code"),tgo=o("model_type"),ago=o(` property of the config object (either
passed as an argument or loaded from `),Jne=a("code"),ngo=o("pretrained_model_name_or_path"),sgo=o(" if possible):"),lgo=l(),he=a("ul"),Dh=a("li"),Yne=a("strong"),igo=o("clip"),dgo=o(" \u2014 "),hI=a("a"),cgo=o("CLIPProcessor"),fgo=o(" (CLIP model)"),mgo=l(),Gh=a("li"),Kne=a("strong"),ggo=o("flava"),hgo=o(" \u2014 "),Zne=a("code"),pgo=o("FLAVAProcessor"),ugo=o(" (Flava model)"),_go=l(),Oh=a("li"),ese=a("strong"),bgo=o("layoutlmv2"),vgo=o(" \u2014 "),pI=a("a"),Fgo=o("LayoutLMv2Processor"),Tgo=o(" (LayoutLMv2 model)"),Mgo=l(),Vh=a("li"),ose=a("strong"),Ego=o("layoutlmv3"),Cgo=o(" \u2014 "),uI=a("a"),wgo=o("LayoutLMv3Processor"),Ago=o(" (LayoutLMv3 model)"),ygo=l(),Xh=a("li"),rse=a("strong"),Lgo=o("layoutxlm"),xgo=o(" \u2014 "),_I=a("a"),$go=o("LayoutXLMProcessor"),kgo=o(" (LayoutXLM model)"),Sgo=l(),zh=a("li"),tse=a("strong"),Rgo=o("sew"),Pgo=o(" \u2014 "),bI=a("a"),Bgo=o("Wav2Vec2Processor"),Igo=o(" (SEW model)"),qgo=l(),Wh=a("li"),ase=a("strong"),Ngo=o("sew-d"),jgo=o(" \u2014 "),vI=a("a"),Dgo=o("Wav2Vec2Processor"),Ggo=o(" (SEW-D model)"),Ogo=l(),Qh=a("li"),nse=a("strong"),Vgo=o("speech_to_text"),Xgo=o(" \u2014 "),FI=a("a"),zgo=o("Speech2TextProcessor"),Wgo=o(" (Speech2Text model)"),Qgo=l(),Hh=a("li"),sse=a("strong"),Hgo=o("speech_to_text_2"),Ugo=o(" \u2014 "),TI=a("a"),Jgo=o("Speech2Text2Processor"),Ygo=o(" (Speech2Text2 model)"),Kgo=l(),Uh=a("li"),lse=a("strong"),Zgo=o("trocr"),eho=o(" \u2014 "),MI=a("a"),oho=o("TrOCRProcessor"),rho=o(" (TrOCR model)"),tho=l(),Jh=a("li"),ise=a("strong"),aho=o("unispeech"),nho=o(" \u2014 "),EI=a("a"),sho=o("Wav2Vec2Processor"),lho=o(" (UniSpeech model)"),iho=l(),Yh=a("li"),dse=a("strong"),dho=o("unispeech-sat"),cho=o(" \u2014 "),CI=a("a"),fho=o("Wav2Vec2Processor"),mho=o(" (UniSpeechSat model)"),gho=l(),Kh=a("li"),cse=a("strong"),hho=o("vilt"),pho=o(" \u2014 "),wI=a("a"),uho=o("ViltProcessor"),_ho=o(" (ViLT model)"),bho=l(),Zh=a("li"),fse=a("strong"),vho=o("vision-text-dual-encoder"),Fho=o(" \u2014 "),AI=a("a"),Tho=o("VisionTextDualEncoderProcessor"),Mho=o(" (VisionTextDualEncoder model)"),Eho=l(),ep=a("li"),mse=a("strong"),Cho=o("wav2vec2"),who=o(" \u2014 "),yI=a("a"),Aho=o("Wav2Vec2Processor"),yho=o(" (Wav2Vec2 model)"),Lho=l(),op=a("li"),gse=a("strong"),xho=o("wav2vec2-conformer"),$ho=o(" \u2014 "),LI=a("a"),kho=o("Wav2Vec2Processor"),Sho=o(" (Wav2Vec2-Conformer model)"),Rho=l(),rp=a("li"),hse=a("strong"),Pho=o("wavlm"),Bho=o(" \u2014 "),xI=a("a"),Iho=o("Wav2Vec2Processor"),qho=o(" (WavLM model)"),Nho=l(),F(tp.$$.fragment),jho=l(),F(ap.$$.fragment),Dho=l(),np=a("div"),F(Z6.$$.fragment),Gho=l(),pse=a("p"),Oho=o("Register a new processor for this class."),pNe=l(),wi=a("h2"),sp=a("a"),use=a("span"),F(eA.$$.fragment),Vho=l(),_se=a("span"),Xho=o("AutoModel"),uNe=l(),Lo=a("div"),F(oA.$$.fragment),zho=l(),Ai=a("p"),Who=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$I=a("a"),Qho=o("from_pretrained()"),Hho=o(" class method or the "),kI=a("a"),Uho=o("from_config()"),Jho=o(` class
method.`),Yho=l(),rA=a("p"),Kho=o("This class cannot be instantiated directly using "),bse=a("code"),Zho=o("__init__()"),epo=o(" (throws an error)."),opo=l(),tt=a("div"),F(tA.$$.fragment),rpo=l(),vse=a("p"),tpo=o("Instantiates one of the base model classes of the library from a configuration."),apo=l(),yi=a("p"),npo=o(`Note:
Loading a model from its configuration file does `),Fse=a("strong"),spo=o("not"),lpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SI=a("a"),ipo=o("from_pretrained()"),dpo=o(" to load the model weights."),cpo=l(),F(lp.$$.fragment),fpo=l(),Je=a("div"),F(aA.$$.fragment),mpo=l(),Tse=a("p"),gpo=o("Instantiate one of the base model classes of the library from a pretrained model."),hpo=l(),La=a("p"),ppo=o("The model class to instantiate is selected based on the "),Mse=a("code"),upo=o("model_type"),_po=o(` property of the config object (either
passed as an argument or loaded from `),Ese=a("code"),bpo=o("pretrained_model_name_or_path"),vpo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cse=a("code"),Fpo=o("pretrained_model_name_or_path"),Tpo=o(":"),Mpo=l(),x=a("ul"),ip=a("li"),wse=a("strong"),Epo=o("albert"),Cpo=o(" \u2014 "),RI=a("a"),wpo=o("AlbertModel"),Apo=o(" (ALBERT model)"),ypo=l(),dp=a("li"),Ase=a("strong"),Lpo=o("bart"),xpo=o(" \u2014 "),PI=a("a"),$po=o("BartModel"),kpo=o(" (BART model)"),Spo=l(),cp=a("li"),yse=a("strong"),Rpo=o("beit"),Ppo=o(" \u2014 "),BI=a("a"),Bpo=o("BeitModel"),Ipo=o(" (BEiT model)"),qpo=l(),fp=a("li"),Lse=a("strong"),Npo=o("bert"),jpo=o(" \u2014 "),II=a("a"),Dpo=o("BertModel"),Gpo=o(" (BERT model)"),Opo=l(),mp=a("li"),xse=a("strong"),Vpo=o("bert-generation"),Xpo=o(" \u2014 "),qI=a("a"),zpo=o("BertGenerationEncoder"),Wpo=o(" (Bert Generation model)"),Qpo=l(),gp=a("li"),$se=a("strong"),Hpo=o("big_bird"),Upo=o(" \u2014 "),NI=a("a"),Jpo=o("BigBirdModel"),Ypo=o(" (BigBird model)"),Kpo=l(),hp=a("li"),kse=a("strong"),Zpo=o("bigbird_pegasus"),euo=o(" \u2014 "),jI=a("a"),ouo=o("BigBirdPegasusModel"),ruo=o(" (BigBirdPegasus model)"),tuo=l(),pp=a("li"),Sse=a("strong"),auo=o("blenderbot"),nuo=o(" \u2014 "),DI=a("a"),suo=o("BlenderbotModel"),luo=o(" (Blenderbot model)"),iuo=l(),up=a("li"),Rse=a("strong"),duo=o("blenderbot-small"),cuo=o(" \u2014 "),GI=a("a"),fuo=o("BlenderbotSmallModel"),muo=o(" (BlenderbotSmall model)"),guo=l(),_p=a("li"),Pse=a("strong"),huo=o("camembert"),puo=o(" \u2014 "),OI=a("a"),uuo=o("CamembertModel"),_uo=o(" (CamemBERT model)"),buo=l(),bp=a("li"),Bse=a("strong"),vuo=o("canine"),Fuo=o(" \u2014 "),VI=a("a"),Tuo=o("CanineModel"),Muo=o(" (Canine model)"),Euo=l(),vp=a("li"),Ise=a("strong"),Cuo=o("clip"),wuo=o(" \u2014 "),XI=a("a"),Auo=o("CLIPModel"),yuo=o(" (CLIP model)"),Luo=l(),Fp=a("li"),qse=a("strong"),xuo=o("convbert"),$uo=o(" \u2014 "),zI=a("a"),kuo=o("ConvBertModel"),Suo=o(" (ConvBERT model)"),Ruo=l(),Tp=a("li"),Nse=a("strong"),Puo=o("convnext"),Buo=o(" \u2014 "),WI=a("a"),Iuo=o("ConvNextModel"),quo=o(" (ConvNext model)"),Nuo=l(),Mp=a("li"),jse=a("strong"),juo=o("ctrl"),Duo=o(" \u2014 "),QI=a("a"),Guo=o("CTRLModel"),Ouo=o(" (CTRL model)"),Vuo=l(),Ep=a("li"),Dse=a("strong"),Xuo=o("cvt"),zuo=o(" \u2014 "),HI=a("a"),Wuo=o("CvtModel"),Quo=o(" (CvT model)"),Huo=l(),Cp=a("li"),Gse=a("strong"),Uuo=o("data2vec-audio"),Juo=o(" \u2014 "),UI=a("a"),Yuo=o("Data2VecAudioModel"),Kuo=o(" (Data2VecAudio model)"),Zuo=l(),wp=a("li"),Ose=a("strong"),e_o=o("data2vec-text"),o_o=o(" \u2014 "),JI=a("a"),r_o=o("Data2VecTextModel"),t_o=o(" (Data2VecText model)"),a_o=l(),Ap=a("li"),Vse=a("strong"),n_o=o("data2vec-vision"),s_o=o(" \u2014 "),YI=a("a"),l_o=o("Data2VecVisionModel"),i_o=o(" (Data2VecVision model)"),d_o=l(),yp=a("li"),Xse=a("strong"),c_o=o("deberta"),f_o=o(" \u2014 "),KI=a("a"),m_o=o("DebertaModel"),g_o=o(" (DeBERTa model)"),h_o=l(),Lp=a("li"),zse=a("strong"),p_o=o("deberta-v2"),u_o=o(" \u2014 "),ZI=a("a"),__o=o("DebertaV2Model"),b_o=o(" (DeBERTa-v2 model)"),v_o=l(),xp=a("li"),Wse=a("strong"),F_o=o("decision_transformer"),T_o=o(" \u2014 "),eq=a("a"),M_o=o("DecisionTransformerModel"),E_o=o(" (Decision Transformer model)"),C_o=l(),$p=a("li"),Qse=a("strong"),w_o=o("deit"),A_o=o(" \u2014 "),oq=a("a"),y_o=o("DeiTModel"),L_o=o(" (DeiT model)"),x_o=l(),kp=a("li"),Hse=a("strong"),$_o=o("detr"),k_o=o(" \u2014 "),rq=a("a"),S_o=o("DetrModel"),R_o=o(" (DETR model)"),P_o=l(),Sp=a("li"),Use=a("strong"),B_o=o("distilbert"),I_o=o(" \u2014 "),tq=a("a"),q_o=o("DistilBertModel"),N_o=o(" (DistilBERT model)"),j_o=l(),Rp=a("li"),Jse=a("strong"),D_o=o("dpr"),G_o=o(" \u2014 "),aq=a("a"),O_o=o("DPRQuestionEncoder"),V_o=o(" (DPR model)"),X_o=l(),Pp=a("li"),Yse=a("strong"),z_o=o("dpt"),W_o=o(" \u2014 "),nq=a("a"),Q_o=o("DPTModel"),H_o=o(" (DPT model)"),U_o=l(),Bp=a("li"),Kse=a("strong"),J_o=o("electra"),Y_o=o(" \u2014 "),sq=a("a"),K_o=o("ElectraModel"),Z_o=o(" (ELECTRA model)"),e1o=l(),Ip=a("li"),Zse=a("strong"),o1o=o("flaubert"),r1o=o(" \u2014 "),lq=a("a"),t1o=o("FlaubertModel"),a1o=o(" (FlauBERT model)"),n1o=l(),qp=a("li"),ele=a("strong"),s1o=o("flava"),l1o=o(" \u2014 "),iq=a("a"),i1o=o("FlavaModel"),d1o=o(" (Flava model)"),c1o=l(),Np=a("li"),ole=a("strong"),f1o=o("fnet"),m1o=o(" \u2014 "),dq=a("a"),g1o=o("FNetModel"),h1o=o(" (FNet model)"),p1o=l(),jp=a("li"),rle=a("strong"),u1o=o("fsmt"),_1o=o(" \u2014 "),cq=a("a"),b1o=o("FSMTModel"),v1o=o(" (FairSeq Machine-Translation model)"),F1o=l(),Ps=a("li"),tle=a("strong"),T1o=o("funnel"),M1o=o(" \u2014 "),fq=a("a"),E1o=o("FunnelModel"),C1o=o(" or "),mq=a("a"),w1o=o("FunnelBaseModel"),A1o=o(" (Funnel Transformer model)"),y1o=l(),Dp=a("li"),ale=a("strong"),L1o=o("glpn"),x1o=o(" \u2014 "),gq=a("a"),$1o=o("GLPNModel"),k1o=o(" (GLPN model)"),S1o=l(),Gp=a("li"),nle=a("strong"),R1o=o("gpt2"),P1o=o(" \u2014 "),hq=a("a"),B1o=o("GPT2Model"),I1o=o(" (OpenAI GPT-2 model)"),q1o=l(),Op=a("li"),sle=a("strong"),N1o=o("gpt_neo"),j1o=o(" \u2014 "),pq=a("a"),D1o=o("GPTNeoModel"),G1o=o(" (GPT Neo model)"),O1o=l(),Vp=a("li"),lle=a("strong"),V1o=o("gpt_neox"),X1o=o(" \u2014 "),uq=a("a"),z1o=o("GPTNeoXModel"),W1o=o(" (GPT NeoX model)"),Q1o=l(),Xp=a("li"),ile=a("strong"),H1o=o("gptj"),U1o=o(" \u2014 "),_q=a("a"),J1o=o("GPTJModel"),Y1o=o(" (GPT-J model)"),K1o=l(),zp=a("li"),dle=a("strong"),Z1o=o("hubert"),e9o=o(" \u2014 "),bq=a("a"),o9o=o("HubertModel"),r9o=o(" (Hubert model)"),t9o=l(),Wp=a("li"),cle=a("strong"),a9o=o("ibert"),n9o=o(" \u2014 "),vq=a("a"),s9o=o("IBertModel"),l9o=o(" (I-BERT model)"),i9o=l(),Qp=a("li"),fle=a("strong"),d9o=o("imagegpt"),c9o=o(" \u2014 "),Fq=a("a"),f9o=o("ImageGPTModel"),m9o=o(" (ImageGPT model)"),g9o=l(),Hp=a("li"),mle=a("strong"),h9o=o("layoutlm"),p9o=o(" \u2014 "),Tq=a("a"),u9o=o("LayoutLMModel"),_9o=o(" (LayoutLM model)"),b9o=l(),Up=a("li"),gle=a("strong"),v9o=o("layoutlmv2"),F9o=o(" \u2014 "),Mq=a("a"),T9o=o("LayoutLMv2Model"),M9o=o(" (LayoutLMv2 model)"),E9o=l(),Jp=a("li"),hle=a("strong"),C9o=o("layoutlmv3"),w9o=o(" \u2014 "),Eq=a("a"),A9o=o("LayoutLMv3Model"),y9o=o(" (LayoutLMv3 model)"),L9o=l(),Yp=a("li"),ple=a("strong"),x9o=o("led"),$9o=o(" \u2014 "),Cq=a("a"),k9o=o("LEDModel"),S9o=o(" (LED model)"),R9o=l(),Kp=a("li"),ule=a("strong"),P9o=o("longformer"),B9o=o(" \u2014 "),wq=a("a"),I9o=o("LongformerModel"),q9o=o(" (Longformer model)"),N9o=l(),Zp=a("li"),_le=a("strong"),j9o=o("luke"),D9o=o(" \u2014 "),Aq=a("a"),G9o=o("LukeModel"),O9o=o(" (LUKE model)"),V9o=l(),eu=a("li"),ble=a("strong"),X9o=o("lxmert"),z9o=o(" \u2014 "),yq=a("a"),W9o=o("LxmertModel"),Q9o=o(" (LXMERT model)"),H9o=l(),ou=a("li"),vle=a("strong"),U9o=o("m2m_100"),J9o=o(" \u2014 "),Lq=a("a"),Y9o=o("M2M100Model"),K9o=o(" (M2M100 model)"),Z9o=l(),ru=a("li"),Fle=a("strong"),ebo=o("marian"),obo=o(" \u2014 "),xq=a("a"),rbo=o("MarianModel"),tbo=o(" (Marian model)"),abo=l(),tu=a("li"),Tle=a("strong"),nbo=o("maskformer"),sbo=o(" \u2014 "),$q=a("a"),lbo=o("MaskFormerModel"),ibo=o(" (MaskFormer model)"),dbo=l(),au=a("li"),Mle=a("strong"),cbo=o("mbart"),fbo=o(" \u2014 "),kq=a("a"),mbo=o("MBartModel"),gbo=o(" (mBART model)"),hbo=l(),nu=a("li"),Ele=a("strong"),pbo=o("megatron-bert"),ubo=o(" \u2014 "),Sq=a("a"),_bo=o("MegatronBertModel"),bbo=o(" (MegatronBert model)"),vbo=l(),su=a("li"),Cle=a("strong"),Fbo=o("mobilebert"),Tbo=o(" \u2014 "),Rq=a("a"),Mbo=o("MobileBertModel"),Ebo=o(" (MobileBERT model)"),Cbo=l(),lu=a("li"),wle=a("strong"),wbo=o("mpnet"),Abo=o(" \u2014 "),Pq=a("a"),ybo=o("MPNetModel"),Lbo=o(" (MPNet model)"),xbo=l(),iu=a("li"),Ale=a("strong"),$bo=o("mt5"),kbo=o(" \u2014 "),Bq=a("a"),Sbo=o("MT5Model"),Rbo=o(" (mT5 model)"),Pbo=l(),du=a("li"),yle=a("strong"),Bbo=o("nystromformer"),Ibo=o(" \u2014 "),Iq=a("a"),qbo=o("NystromformerModel"),Nbo=o(" (Nystromformer model)"),jbo=l(),cu=a("li"),Lle=a("strong"),Dbo=o("openai-gpt"),Gbo=o(" \u2014 "),qq=a("a"),Obo=o("OpenAIGPTModel"),Vbo=o(" (OpenAI GPT model)"),Xbo=l(),fu=a("li"),xle=a("strong"),zbo=o("opt"),Wbo=o(" \u2014 "),Nq=a("a"),Qbo=o("OPTModel"),Hbo=o(" (OPT model)"),Ubo=l(),mu=a("li"),$le=a("strong"),Jbo=o("pegasus"),Ybo=o(" \u2014 "),jq=a("a"),Kbo=o("PegasusModel"),Zbo=o(" (Pegasus model)"),e2o=l(),gu=a("li"),kle=a("strong"),o2o=o("perceiver"),r2o=o(" \u2014 "),Dq=a("a"),t2o=o("PerceiverModel"),a2o=o(" (Perceiver model)"),n2o=l(),hu=a("li"),Sle=a("strong"),s2o=o("plbart"),l2o=o(" \u2014 "),Gq=a("a"),i2o=o("PLBartModel"),d2o=o(" (PLBart model)"),c2o=l(),pu=a("li"),Rle=a("strong"),f2o=o("poolformer"),m2o=o(" \u2014 "),Oq=a("a"),g2o=o("PoolFormerModel"),h2o=o(" (PoolFormer model)"),p2o=l(),uu=a("li"),Ple=a("strong"),u2o=o("prophetnet"),_2o=o(" \u2014 "),Vq=a("a"),b2o=o("ProphetNetModel"),v2o=o(" (ProphetNet model)"),F2o=l(),_u=a("li"),Ble=a("strong"),T2o=o("qdqbert"),M2o=o(" \u2014 "),Xq=a("a"),E2o=o("QDQBertModel"),C2o=o(" (QDQBert model)"),w2o=l(),bu=a("li"),Ile=a("strong"),A2o=o("reformer"),y2o=o(" \u2014 "),zq=a("a"),L2o=o("ReformerModel"),x2o=o(" (Reformer model)"),$2o=l(),vu=a("li"),qle=a("strong"),k2o=o("regnet"),S2o=o(" \u2014 "),Wq=a("a"),R2o=o("RegNetModel"),P2o=o(" (RegNet model)"),B2o=l(),Fu=a("li"),Nle=a("strong"),I2o=o("rembert"),q2o=o(" \u2014 "),Qq=a("a"),N2o=o("RemBertModel"),j2o=o(" (RemBERT model)"),D2o=l(),Tu=a("li"),jle=a("strong"),G2o=o("resnet"),O2o=o(" \u2014 "),Hq=a("a"),V2o=o("ResNetModel"),X2o=o(" (ResNet model)"),z2o=l(),Mu=a("li"),Dle=a("strong"),W2o=o("retribert"),Q2o=o(" \u2014 "),Uq=a("a"),H2o=o("RetriBertModel"),U2o=o(" (RetriBERT model)"),J2o=l(),Eu=a("li"),Gle=a("strong"),Y2o=o("roberta"),K2o=o(" \u2014 "),Jq=a("a"),Z2o=o("RobertaModel"),e4o=o(" (RoBERTa model)"),o4o=l(),Cu=a("li"),Ole=a("strong"),r4o=o("roformer"),t4o=o(" \u2014 "),Yq=a("a"),a4o=o("RoFormerModel"),n4o=o(" (RoFormer model)"),s4o=l(),wu=a("li"),Vle=a("strong"),l4o=o("segformer"),i4o=o(" \u2014 "),Kq=a("a"),d4o=o("SegformerModel"),c4o=o(" (SegFormer model)"),f4o=l(),Au=a("li"),Xle=a("strong"),m4o=o("sew"),g4o=o(" \u2014 "),Zq=a("a"),h4o=o("SEWModel"),p4o=o(" (SEW model)"),u4o=l(),yu=a("li"),zle=a("strong"),_4o=o("sew-d"),b4o=o(" \u2014 "),eN=a("a"),v4o=o("SEWDModel"),F4o=o(" (SEW-D model)"),T4o=l(),Lu=a("li"),Wle=a("strong"),M4o=o("speech_to_text"),E4o=o(" \u2014 "),oN=a("a"),C4o=o("Speech2TextModel"),w4o=o(" (Speech2Text model)"),A4o=l(),xu=a("li"),Qle=a("strong"),y4o=o("splinter"),L4o=o(" \u2014 "),rN=a("a"),x4o=o("SplinterModel"),$4o=o(" (Splinter model)"),k4o=l(),$u=a("li"),Hle=a("strong"),S4o=o("squeezebert"),R4o=o(" \u2014 "),tN=a("a"),P4o=o("SqueezeBertModel"),B4o=o(" (SqueezeBERT model)"),I4o=l(),ku=a("li"),Ule=a("strong"),q4o=o("swin"),N4o=o(" \u2014 "),aN=a("a"),j4o=o("SwinModel"),D4o=o(" (Swin model)"),G4o=l(),Su=a("li"),Jle=a("strong"),O4o=o("t5"),V4o=o(" \u2014 "),nN=a("a"),X4o=o("T5Model"),z4o=o(" (T5 model)"),W4o=l(),Ru=a("li"),Yle=a("strong"),Q4o=o("tapas"),H4o=o(" \u2014 "),sN=a("a"),U4o=o("TapasModel"),J4o=o(" (TAPAS model)"),Y4o=l(),Pu=a("li"),Kle=a("strong"),K4o=o("trajectory_transformer"),Z4o=o(" \u2014 "),lN=a("a"),evo=o("TrajectoryTransformerModel"),ovo=o(" (Trajectory Transformer model)"),rvo=l(),Bu=a("li"),Zle=a("strong"),tvo=o("transfo-xl"),avo=o(" \u2014 "),iN=a("a"),nvo=o("TransfoXLModel"),svo=o(" (Transformer-XL model)"),lvo=l(),Iu=a("li"),eie=a("strong"),ivo=o("unispeech"),dvo=o(" \u2014 "),dN=a("a"),cvo=o("UniSpeechModel"),fvo=o(" (UniSpeech model)"),mvo=l(),qu=a("li"),oie=a("strong"),gvo=o("unispeech-sat"),hvo=o(" \u2014 "),cN=a("a"),pvo=o("UniSpeechSatModel"),uvo=o(" (UniSpeechSat model)"),_vo=l(),Nu=a("li"),rie=a("strong"),bvo=o("van"),vvo=o(" \u2014 "),fN=a("a"),Fvo=o("VanModel"),Tvo=o(" (VAN model)"),Mvo=l(),ju=a("li"),tie=a("strong"),Evo=o("vilt"),Cvo=o(" \u2014 "),mN=a("a"),wvo=o("ViltModel"),Avo=o(" (ViLT model)"),yvo=l(),Du=a("li"),aie=a("strong"),Lvo=o("vision-text-dual-encoder"),xvo=o(" \u2014 "),gN=a("a"),$vo=o("VisionTextDualEncoderModel"),kvo=o(" (VisionTextDualEncoder model)"),Svo=l(),Gu=a("li"),nie=a("strong"),Rvo=o("visual_bert"),Pvo=o(" \u2014 "),hN=a("a"),Bvo=o("VisualBertModel"),Ivo=o(" (VisualBert model)"),qvo=l(),Ou=a("li"),sie=a("strong"),Nvo=o("vit"),jvo=o(" \u2014 "),pN=a("a"),Dvo=o("ViTModel"),Gvo=o(" (ViT model)"),Ovo=l(),Vu=a("li"),lie=a("strong"),Vvo=o("vit_mae"),Xvo=o(" \u2014 "),uN=a("a"),zvo=o("ViTMAEModel"),Wvo=o(" (ViTMAE model)"),Qvo=l(),Xu=a("li"),iie=a("strong"),Hvo=o("wav2vec2"),Uvo=o(" \u2014 "),_N=a("a"),Jvo=o("Wav2Vec2Model"),Yvo=o(" (Wav2Vec2 model)"),Kvo=l(),zu=a("li"),die=a("strong"),Zvo=o("wav2vec2-conformer"),eFo=o(" \u2014 "),bN=a("a"),oFo=o("Wav2Vec2ConformerModel"),rFo=o(" (Wav2Vec2-Conformer model)"),tFo=l(),Wu=a("li"),cie=a("strong"),aFo=o("wavlm"),nFo=o(" \u2014 "),vN=a("a"),sFo=o("WavLMModel"),lFo=o(" (WavLM model)"),iFo=l(),Qu=a("li"),fie=a("strong"),dFo=o("xglm"),cFo=o(" \u2014 "),FN=a("a"),fFo=o("XGLMModel"),mFo=o(" (XGLM model)"),gFo=l(),Hu=a("li"),mie=a("strong"),hFo=o("xlm"),pFo=o(" \u2014 "),TN=a("a"),uFo=o("XLMModel"),_Fo=o(" (XLM model)"),bFo=l(),Uu=a("li"),gie=a("strong"),vFo=o("xlm-prophetnet"),FFo=o(" \u2014 "),MN=a("a"),TFo=o("XLMProphetNetModel"),MFo=o(" (XLMProphetNet model)"),EFo=l(),Ju=a("li"),hie=a("strong"),CFo=o("xlm-roberta"),wFo=o(" \u2014 "),EN=a("a"),AFo=o("XLMRobertaModel"),yFo=o(" (XLM-RoBERTa model)"),LFo=l(),Yu=a("li"),pie=a("strong"),xFo=o("xlm-roberta-xl"),$Fo=o(" \u2014 "),CN=a("a"),kFo=o("XLMRobertaXLModel"),SFo=o(" (XLM-RoBERTa-XL model)"),RFo=l(),Ku=a("li"),uie=a("strong"),PFo=o("xlnet"),BFo=o(" \u2014 "),wN=a("a"),IFo=o("XLNetModel"),qFo=o(" (XLNet model)"),NFo=l(),Zu=a("li"),_ie=a("strong"),jFo=o("yolos"),DFo=o(" \u2014 "),AN=a("a"),GFo=o("YolosModel"),OFo=o(" (YOLOS model)"),VFo=l(),e_=a("li"),bie=a("strong"),XFo=o("yoso"),zFo=o(" \u2014 "),yN=a("a"),WFo=o("YosoModel"),QFo=o(" (YOSO model)"),HFo=l(),o_=a("p"),UFo=o("The model is set in evaluation mode by default using "),vie=a("code"),JFo=o("model.eval()"),YFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fie=a("code"),KFo=o("model.train()"),ZFo=l(),F(r_.$$.fragment),_Ne=l(),Li=a("h2"),t_=a("a"),Tie=a("span"),F(nA.$$.fragment),eTo=l(),Mie=a("span"),oTo=o("AutoModelForPreTraining"),bNe=l(),xo=a("div"),F(sA.$$.fragment),rTo=l(),xi=a("p"),tTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LN=a("a"),aTo=o("from_pretrained()"),nTo=o(" class method or the "),xN=a("a"),sTo=o("from_config()"),lTo=o(` class
method.`),iTo=l(),lA=a("p"),dTo=o("This class cannot be instantiated directly using "),Eie=a("code"),cTo=o("__init__()"),fTo=o(" (throws an error)."),mTo=l(),at=a("div"),F(iA.$$.fragment),gTo=l(),Cie=a("p"),hTo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pTo=l(),$i=a("p"),uTo=o(`Note:
Loading a model from its configuration file does `),wie=a("strong"),_To=o("not"),bTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$N=a("a"),vTo=o("from_pretrained()"),FTo=o(" to load the model weights."),TTo=l(),F(a_.$$.fragment),MTo=l(),Ye=a("div"),F(dA.$$.fragment),ETo=l(),Aie=a("p"),CTo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wTo=l(),xa=a("p"),ATo=o("The model class to instantiate is selected based on the "),yie=a("code"),yTo=o("model_type"),LTo=o(` property of the config object (either
passed as an argument or loaded from `),Lie=a("code"),xTo=o("pretrained_model_name_or_path"),$To=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xie=a("code"),kTo=o("pretrained_model_name_or_path"),STo=o(":"),RTo=l(),G=a("ul"),n_=a("li"),$ie=a("strong"),PTo=o("albert"),BTo=o(" \u2014 "),kN=a("a"),ITo=o("AlbertForPreTraining"),qTo=o(" (ALBERT model)"),NTo=l(),s_=a("li"),kie=a("strong"),jTo=o("bart"),DTo=o(" \u2014 "),SN=a("a"),GTo=o("BartForConditionalGeneration"),OTo=o(" (BART model)"),VTo=l(),l_=a("li"),Sie=a("strong"),XTo=o("bert"),zTo=o(" \u2014 "),RN=a("a"),WTo=o("BertForPreTraining"),QTo=o(" (BERT model)"),HTo=l(),i_=a("li"),Rie=a("strong"),UTo=o("big_bird"),JTo=o(" \u2014 "),PN=a("a"),YTo=o("BigBirdForPreTraining"),KTo=o(" (BigBird model)"),ZTo=l(),d_=a("li"),Pie=a("strong"),e7o=o("camembert"),o7o=o(" \u2014 "),BN=a("a"),r7o=o("CamembertForMaskedLM"),t7o=o(" (CamemBERT model)"),a7o=l(),c_=a("li"),Bie=a("strong"),n7o=o("ctrl"),s7o=o(" \u2014 "),IN=a("a"),l7o=o("CTRLLMHeadModel"),i7o=o(" (CTRL model)"),d7o=l(),f_=a("li"),Iie=a("strong"),c7o=o("data2vec-text"),f7o=o(" \u2014 "),qN=a("a"),m7o=o("Data2VecTextForMaskedLM"),g7o=o(" (Data2VecText model)"),h7o=l(),m_=a("li"),qie=a("strong"),p7o=o("deberta"),u7o=o(" \u2014 "),NN=a("a"),_7o=o("DebertaForMaskedLM"),b7o=o(" (DeBERTa model)"),v7o=l(),g_=a("li"),Nie=a("strong"),F7o=o("deberta-v2"),T7o=o(" \u2014 "),jN=a("a"),M7o=o("DebertaV2ForMaskedLM"),E7o=o(" (DeBERTa-v2 model)"),C7o=l(),h_=a("li"),jie=a("strong"),w7o=o("distilbert"),A7o=o(" \u2014 "),DN=a("a"),y7o=o("DistilBertForMaskedLM"),L7o=o(" (DistilBERT model)"),x7o=l(),p_=a("li"),Die=a("strong"),$7o=o("electra"),k7o=o(" \u2014 "),GN=a("a"),S7o=o("ElectraForPreTraining"),R7o=o(" (ELECTRA model)"),P7o=l(),u_=a("li"),Gie=a("strong"),B7o=o("flaubert"),I7o=o(" \u2014 "),ON=a("a"),q7o=o("FlaubertWithLMHeadModel"),N7o=o(" (FlauBERT model)"),j7o=l(),__=a("li"),Oie=a("strong"),D7o=o("flava"),G7o=o(" \u2014 "),VN=a("a"),O7o=o("FlavaForPreTraining"),V7o=o(" (Flava model)"),X7o=l(),b_=a("li"),Vie=a("strong"),z7o=o("fnet"),W7o=o(" \u2014 "),XN=a("a"),Q7o=o("FNetForPreTraining"),H7o=o(" (FNet model)"),U7o=l(),v_=a("li"),Xie=a("strong"),J7o=o("fsmt"),Y7o=o(" \u2014 "),zN=a("a"),K7o=o("FSMTForConditionalGeneration"),Z7o=o(" (FairSeq Machine-Translation model)"),eMo=l(),F_=a("li"),zie=a("strong"),oMo=o("funnel"),rMo=o(" \u2014 "),WN=a("a"),tMo=o("FunnelForPreTraining"),aMo=o(" (Funnel Transformer model)"),nMo=l(),T_=a("li"),Wie=a("strong"),sMo=o("gpt2"),lMo=o(" \u2014 "),QN=a("a"),iMo=o("GPT2LMHeadModel"),dMo=o(" (OpenAI GPT-2 model)"),cMo=l(),M_=a("li"),Qie=a("strong"),fMo=o("ibert"),mMo=o(" \u2014 "),HN=a("a"),gMo=o("IBertForMaskedLM"),hMo=o(" (I-BERT model)"),pMo=l(),E_=a("li"),Hie=a("strong"),uMo=o("layoutlm"),_Mo=o(" \u2014 "),UN=a("a"),bMo=o("LayoutLMForMaskedLM"),vMo=o(" (LayoutLM model)"),FMo=l(),C_=a("li"),Uie=a("strong"),TMo=o("longformer"),MMo=o(" \u2014 "),JN=a("a"),EMo=o("LongformerForMaskedLM"),CMo=o(" (Longformer model)"),wMo=l(),w_=a("li"),Jie=a("strong"),AMo=o("lxmert"),yMo=o(" \u2014 "),YN=a("a"),LMo=o("LxmertForPreTraining"),xMo=o(" (LXMERT model)"),$Mo=l(),A_=a("li"),Yie=a("strong"),kMo=o("megatron-bert"),SMo=o(" \u2014 "),KN=a("a"),RMo=o("MegatronBertForPreTraining"),PMo=o(" (MegatronBert model)"),BMo=l(),y_=a("li"),Kie=a("strong"),IMo=o("mobilebert"),qMo=o(" \u2014 "),ZN=a("a"),NMo=o("MobileBertForPreTraining"),jMo=o(" (MobileBERT model)"),DMo=l(),L_=a("li"),Zie=a("strong"),GMo=o("mpnet"),OMo=o(" \u2014 "),ej=a("a"),VMo=o("MPNetForMaskedLM"),XMo=o(" (MPNet model)"),zMo=l(),x_=a("li"),ede=a("strong"),WMo=o("openai-gpt"),QMo=o(" \u2014 "),oj=a("a"),HMo=o("OpenAIGPTLMHeadModel"),UMo=o(" (OpenAI GPT model)"),JMo=l(),$_=a("li"),ode=a("strong"),YMo=o("retribert"),KMo=o(" \u2014 "),rj=a("a"),ZMo=o("RetriBertModel"),eEo=o(" (RetriBERT model)"),oEo=l(),k_=a("li"),rde=a("strong"),rEo=o("roberta"),tEo=o(" \u2014 "),tj=a("a"),aEo=o("RobertaForMaskedLM"),nEo=o(" (RoBERTa model)"),sEo=l(),S_=a("li"),tde=a("strong"),lEo=o("splinter"),iEo=o(" \u2014 "),aj=a("a"),dEo=o("SplinterForPreTraining"),cEo=o(" (Splinter model)"),fEo=l(),R_=a("li"),ade=a("strong"),mEo=o("squeezebert"),gEo=o(" \u2014 "),nj=a("a"),hEo=o("SqueezeBertForMaskedLM"),pEo=o(" (SqueezeBERT model)"),uEo=l(),P_=a("li"),nde=a("strong"),_Eo=o("t5"),bEo=o(" \u2014 "),sj=a("a"),vEo=o("T5ForConditionalGeneration"),FEo=o(" (T5 model)"),TEo=l(),B_=a("li"),sde=a("strong"),MEo=o("tapas"),EEo=o(" \u2014 "),lj=a("a"),CEo=o("TapasForMaskedLM"),wEo=o(" (TAPAS model)"),AEo=l(),I_=a("li"),lde=a("strong"),yEo=o("transfo-xl"),LEo=o(" \u2014 "),ij=a("a"),xEo=o("TransfoXLLMHeadModel"),$Eo=o(" (Transformer-XL model)"),kEo=l(),q_=a("li"),ide=a("strong"),SEo=o("unispeech"),REo=o(" \u2014 "),dj=a("a"),PEo=o("UniSpeechForPreTraining"),BEo=o(" (UniSpeech model)"),IEo=l(),N_=a("li"),dde=a("strong"),qEo=o("unispeech-sat"),NEo=o(" \u2014 "),cj=a("a"),jEo=o("UniSpeechSatForPreTraining"),DEo=o(" (UniSpeechSat model)"),GEo=l(),j_=a("li"),cde=a("strong"),OEo=o("visual_bert"),VEo=o(" \u2014 "),fj=a("a"),XEo=o("VisualBertForPreTraining"),zEo=o(" (VisualBert model)"),WEo=l(),D_=a("li"),fde=a("strong"),QEo=o("vit_mae"),HEo=o(" \u2014 "),mj=a("a"),UEo=o("ViTMAEForPreTraining"),JEo=o(" (ViTMAE model)"),YEo=l(),G_=a("li"),mde=a("strong"),KEo=o("wav2vec2"),ZEo=o(" \u2014 "),gj=a("a"),eCo=o("Wav2Vec2ForPreTraining"),oCo=o(" (Wav2Vec2 model)"),rCo=l(),O_=a("li"),gde=a("strong"),tCo=o("wav2vec2-conformer"),aCo=o(" \u2014 "),hj=a("a"),nCo=o("Wav2Vec2ConformerForPreTraining"),sCo=o(" (Wav2Vec2-Conformer model)"),lCo=l(),V_=a("li"),hde=a("strong"),iCo=o("xlm"),dCo=o(" \u2014 "),pj=a("a"),cCo=o("XLMWithLMHeadModel"),fCo=o(" (XLM model)"),mCo=l(),X_=a("li"),pde=a("strong"),gCo=o("xlm-roberta"),hCo=o(" \u2014 "),uj=a("a"),pCo=o("XLMRobertaForMaskedLM"),uCo=o(" (XLM-RoBERTa model)"),_Co=l(),z_=a("li"),ude=a("strong"),bCo=o("xlm-roberta-xl"),vCo=o(" \u2014 "),_j=a("a"),FCo=o("XLMRobertaXLForMaskedLM"),TCo=o(" (XLM-RoBERTa-XL model)"),MCo=l(),W_=a("li"),_de=a("strong"),ECo=o("xlnet"),CCo=o(" \u2014 "),bj=a("a"),wCo=o("XLNetLMHeadModel"),ACo=o(" (XLNet model)"),yCo=l(),Q_=a("p"),LCo=o("The model is set in evaluation mode by default using "),bde=a("code"),xCo=o("model.eval()"),$Co=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vde=a("code"),kCo=o("model.train()"),SCo=l(),F(H_.$$.fragment),vNe=l(),ki=a("h2"),U_=a("a"),Fde=a("span"),F(cA.$$.fragment),RCo=l(),Tde=a("span"),PCo=o("AutoModelForCausalLM"),FNe=l(),$o=a("div"),F(fA.$$.fragment),BCo=l(),Si=a("p"),ICo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vj=a("a"),qCo=o("from_pretrained()"),NCo=o(" class method or the "),Fj=a("a"),jCo=o("from_config()"),DCo=o(` class
method.`),GCo=l(),mA=a("p"),OCo=o("This class cannot be instantiated directly using "),Mde=a("code"),VCo=o("__init__()"),XCo=o(" (throws an error)."),zCo=l(),nt=a("div"),F(gA.$$.fragment),WCo=l(),Ede=a("p"),QCo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),HCo=l(),Ri=a("p"),UCo=o(`Note:
Loading a model from its configuration file does `),Cde=a("strong"),JCo=o("not"),YCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tj=a("a"),KCo=o("from_pretrained()"),ZCo=o(" to load the model weights."),e5o=l(),F(J_.$$.fragment),o5o=l(),Ke=a("div"),F(hA.$$.fragment),r5o=l(),wde=a("p"),t5o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),a5o=l(),$a=a("p"),n5o=o("The model class to instantiate is selected based on the "),Ade=a("code"),s5o=o("model_type"),l5o=o(` property of the config object (either
passed as an argument or loaded from `),yde=a("code"),i5o=o("pretrained_model_name_or_path"),d5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lde=a("code"),c5o=o("pretrained_model_name_or_path"),f5o=o(":"),m5o=l(),z=a("ul"),Y_=a("li"),xde=a("strong"),g5o=o("bart"),h5o=o(" \u2014 "),Mj=a("a"),p5o=o("BartForCausalLM"),u5o=o(" (BART model)"),_5o=l(),K_=a("li"),$de=a("strong"),b5o=o("bert"),v5o=o(" \u2014 "),Ej=a("a"),F5o=o("BertLMHeadModel"),T5o=o(" (BERT model)"),M5o=l(),Z_=a("li"),kde=a("strong"),E5o=o("bert-generation"),C5o=o(" \u2014 "),Cj=a("a"),w5o=o("BertGenerationDecoder"),A5o=o(" (Bert Generation model)"),y5o=l(),e1=a("li"),Sde=a("strong"),L5o=o("big_bird"),x5o=o(" \u2014 "),wj=a("a"),$5o=o("BigBirdForCausalLM"),k5o=o(" (BigBird model)"),S5o=l(),o1=a("li"),Rde=a("strong"),R5o=o("bigbird_pegasus"),P5o=o(" \u2014 "),Aj=a("a"),B5o=o("BigBirdPegasusForCausalLM"),I5o=o(" (BigBirdPegasus model)"),q5o=l(),r1=a("li"),Pde=a("strong"),N5o=o("blenderbot"),j5o=o(" \u2014 "),yj=a("a"),D5o=o("BlenderbotForCausalLM"),G5o=o(" (Blenderbot model)"),O5o=l(),t1=a("li"),Bde=a("strong"),V5o=o("blenderbot-small"),X5o=o(" \u2014 "),Lj=a("a"),z5o=o("BlenderbotSmallForCausalLM"),W5o=o(" (BlenderbotSmall model)"),Q5o=l(),a1=a("li"),Ide=a("strong"),H5o=o("camembert"),U5o=o(" \u2014 "),xj=a("a"),J5o=o("CamembertForCausalLM"),Y5o=o(" (CamemBERT model)"),K5o=l(),n1=a("li"),qde=a("strong"),Z5o=o("ctrl"),e3o=o(" \u2014 "),$j=a("a"),o3o=o("CTRLLMHeadModel"),r3o=o(" (CTRL model)"),t3o=l(),s1=a("li"),Nde=a("strong"),a3o=o("data2vec-text"),n3o=o(" \u2014 "),kj=a("a"),s3o=o("Data2VecTextForCausalLM"),l3o=o(" (Data2VecText model)"),i3o=l(),l1=a("li"),jde=a("strong"),d3o=o("electra"),c3o=o(" \u2014 "),Sj=a("a"),f3o=o("ElectraForCausalLM"),m3o=o(" (ELECTRA model)"),g3o=l(),i1=a("li"),Dde=a("strong"),h3o=o("gpt2"),p3o=o(" \u2014 "),Rj=a("a"),u3o=o("GPT2LMHeadModel"),_3o=o(" (OpenAI GPT-2 model)"),b3o=l(),d1=a("li"),Gde=a("strong"),v3o=o("gpt_neo"),F3o=o(" \u2014 "),Pj=a("a"),T3o=o("GPTNeoForCausalLM"),M3o=o(" (GPT Neo model)"),E3o=l(),c1=a("li"),Ode=a("strong"),C3o=o("gpt_neox"),w3o=o(" \u2014 "),Bj=a("a"),A3o=o("GPTNeoXForCausalLM"),y3o=o(" (GPT NeoX model)"),L3o=l(),f1=a("li"),Vde=a("strong"),x3o=o("gptj"),$3o=o(" \u2014 "),Ij=a("a"),k3o=o("GPTJForCausalLM"),S3o=o(" (GPT-J model)"),R3o=l(),m1=a("li"),Xde=a("strong"),P3o=o("marian"),B3o=o(" \u2014 "),qj=a("a"),I3o=o("MarianForCausalLM"),q3o=o(" (Marian model)"),N3o=l(),g1=a("li"),zde=a("strong"),j3o=o("mbart"),D3o=o(" \u2014 "),Nj=a("a"),G3o=o("MBartForCausalLM"),O3o=o(" (mBART model)"),V3o=l(),h1=a("li"),Wde=a("strong"),X3o=o("megatron-bert"),z3o=o(" \u2014 "),jj=a("a"),W3o=o("MegatronBertForCausalLM"),Q3o=o(" (MegatronBert model)"),H3o=l(),p1=a("li"),Qde=a("strong"),U3o=o("openai-gpt"),J3o=o(" \u2014 "),Dj=a("a"),Y3o=o("OpenAIGPTLMHeadModel"),K3o=o(" (OpenAI GPT model)"),Z3o=l(),u1=a("li"),Hde=a("strong"),ewo=o("opt"),owo=o(" \u2014 "),Gj=a("a"),rwo=o("OPTForCausalLM"),two=o(" (OPT model)"),awo=l(),_1=a("li"),Ude=a("strong"),nwo=o("pegasus"),swo=o(" \u2014 "),Oj=a("a"),lwo=o("PegasusForCausalLM"),iwo=o(" (Pegasus model)"),dwo=l(),b1=a("li"),Jde=a("strong"),cwo=o("plbart"),fwo=o(" \u2014 "),Vj=a("a"),mwo=o("PLBartForCausalLM"),gwo=o(" (PLBart model)"),hwo=l(),v1=a("li"),Yde=a("strong"),pwo=o("prophetnet"),uwo=o(" \u2014 "),Xj=a("a"),_wo=o("ProphetNetForCausalLM"),bwo=o(" (ProphetNet model)"),vwo=l(),F1=a("li"),Kde=a("strong"),Fwo=o("qdqbert"),Two=o(" \u2014 "),zj=a("a"),Mwo=o("QDQBertLMHeadModel"),Ewo=o(" (QDQBert model)"),Cwo=l(),T1=a("li"),Zde=a("strong"),wwo=o("reformer"),Awo=o(" \u2014 "),Wj=a("a"),ywo=o("ReformerModelWithLMHead"),Lwo=o(" (Reformer model)"),xwo=l(),M1=a("li"),ece=a("strong"),$wo=o("rembert"),kwo=o(" \u2014 "),Qj=a("a"),Swo=o("RemBertForCausalLM"),Rwo=o(" (RemBERT model)"),Pwo=l(),E1=a("li"),oce=a("strong"),Bwo=o("roberta"),Iwo=o(" \u2014 "),Hj=a("a"),qwo=o("RobertaForCausalLM"),Nwo=o(" (RoBERTa model)"),jwo=l(),C1=a("li"),rce=a("strong"),Dwo=o("roformer"),Gwo=o(" \u2014 "),Uj=a("a"),Owo=o("RoFormerForCausalLM"),Vwo=o(" (RoFormer model)"),Xwo=l(),w1=a("li"),tce=a("strong"),zwo=o("speech_to_text_2"),Wwo=o(" \u2014 "),Jj=a("a"),Qwo=o("Speech2Text2ForCausalLM"),Hwo=o(" (Speech2Text2 model)"),Uwo=l(),A1=a("li"),ace=a("strong"),Jwo=o("transfo-xl"),Ywo=o(" \u2014 "),Yj=a("a"),Kwo=o("TransfoXLLMHeadModel"),Zwo=o(" (Transformer-XL model)"),e0o=l(),y1=a("li"),nce=a("strong"),o0o=o("trocr"),r0o=o(" \u2014 "),Kj=a("a"),t0o=o("TrOCRForCausalLM"),a0o=o(" (TrOCR model)"),n0o=l(),L1=a("li"),sce=a("strong"),s0o=o("xglm"),l0o=o(" \u2014 "),Zj=a("a"),i0o=o("XGLMForCausalLM"),d0o=o(" (XGLM model)"),c0o=l(),x1=a("li"),lce=a("strong"),f0o=o("xlm"),m0o=o(" \u2014 "),eD=a("a"),g0o=o("XLMWithLMHeadModel"),h0o=o(" (XLM model)"),p0o=l(),$1=a("li"),ice=a("strong"),u0o=o("xlm-prophetnet"),_0o=o(" \u2014 "),oD=a("a"),b0o=o("XLMProphetNetForCausalLM"),v0o=o(" (XLMProphetNet model)"),F0o=l(),k1=a("li"),dce=a("strong"),T0o=o("xlm-roberta"),M0o=o(" \u2014 "),rD=a("a"),E0o=o("XLMRobertaForCausalLM"),C0o=o(" (XLM-RoBERTa model)"),w0o=l(),S1=a("li"),cce=a("strong"),A0o=o("xlm-roberta-xl"),y0o=o(" \u2014 "),tD=a("a"),L0o=o("XLMRobertaXLForCausalLM"),x0o=o(" (XLM-RoBERTa-XL model)"),$0o=l(),R1=a("li"),fce=a("strong"),k0o=o("xlnet"),S0o=o(" \u2014 "),aD=a("a"),R0o=o("XLNetLMHeadModel"),P0o=o(" (XLNet model)"),B0o=l(),P1=a("p"),I0o=o("The model is set in evaluation mode by default using "),mce=a("code"),q0o=o("model.eval()"),N0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gce=a("code"),j0o=o("model.train()"),D0o=l(),F(B1.$$.fragment),TNe=l(),Pi=a("h2"),I1=a("a"),hce=a("span"),F(pA.$$.fragment),G0o=l(),pce=a("span"),O0o=o("AutoModelForMaskedLM"),MNe=l(),ko=a("div"),F(uA.$$.fragment),V0o=l(),Bi=a("p"),X0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nD=a("a"),z0o=o("from_pretrained()"),W0o=o(" class method or the "),sD=a("a"),Q0o=o("from_config()"),H0o=o(` class
method.`),U0o=l(),_A=a("p"),J0o=o("This class cannot be instantiated directly using "),uce=a("code"),Y0o=o("__init__()"),K0o=o(" (throws an error)."),Z0o=l(),st=a("div"),F(bA.$$.fragment),e6o=l(),_ce=a("p"),o6o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),r6o=l(),Ii=a("p"),t6o=o(`Note:
Loading a model from its configuration file does `),bce=a("strong"),a6o=o("not"),n6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lD=a("a"),s6o=o("from_pretrained()"),l6o=o(" to load the model weights."),i6o=l(),F(q1.$$.fragment),d6o=l(),Ze=a("div"),F(vA.$$.fragment),c6o=l(),vce=a("p"),f6o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),m6o=l(),ka=a("p"),g6o=o("The model class to instantiate is selected based on the "),Fce=a("code"),h6o=o("model_type"),p6o=o(` property of the config object (either
passed as an argument or loaded from `),Tce=a("code"),u6o=o("pretrained_model_name_or_path"),_6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mce=a("code"),b6o=o("pretrained_model_name_or_path"),v6o=o(":"),F6o=l(),W=a("ul"),N1=a("li"),Ece=a("strong"),T6o=o("albert"),M6o=o(" \u2014 "),iD=a("a"),E6o=o("AlbertForMaskedLM"),C6o=o(" (ALBERT model)"),w6o=l(),j1=a("li"),Cce=a("strong"),A6o=o("bart"),y6o=o(" \u2014 "),dD=a("a"),L6o=o("BartForConditionalGeneration"),x6o=o(" (BART model)"),$6o=l(),D1=a("li"),wce=a("strong"),k6o=o("bert"),S6o=o(" \u2014 "),cD=a("a"),R6o=o("BertForMaskedLM"),P6o=o(" (BERT model)"),B6o=l(),G1=a("li"),Ace=a("strong"),I6o=o("big_bird"),q6o=o(" \u2014 "),fD=a("a"),N6o=o("BigBirdForMaskedLM"),j6o=o(" (BigBird model)"),D6o=l(),O1=a("li"),yce=a("strong"),G6o=o("camembert"),O6o=o(" \u2014 "),mD=a("a"),V6o=o("CamembertForMaskedLM"),X6o=o(" (CamemBERT model)"),z6o=l(),V1=a("li"),Lce=a("strong"),W6o=o("convbert"),Q6o=o(" \u2014 "),gD=a("a"),H6o=o("ConvBertForMaskedLM"),U6o=o(" (ConvBERT model)"),J6o=l(),X1=a("li"),xce=a("strong"),Y6o=o("data2vec-text"),K6o=o(" \u2014 "),hD=a("a"),Z6o=o("Data2VecTextForMaskedLM"),eAo=o(" (Data2VecText model)"),oAo=l(),z1=a("li"),$ce=a("strong"),rAo=o("deberta"),tAo=o(" \u2014 "),pD=a("a"),aAo=o("DebertaForMaskedLM"),nAo=o(" (DeBERTa model)"),sAo=l(),W1=a("li"),kce=a("strong"),lAo=o("deberta-v2"),iAo=o(" \u2014 "),uD=a("a"),dAo=o("DebertaV2ForMaskedLM"),cAo=o(" (DeBERTa-v2 model)"),fAo=l(),Q1=a("li"),Sce=a("strong"),mAo=o("distilbert"),gAo=o(" \u2014 "),_D=a("a"),hAo=o("DistilBertForMaskedLM"),pAo=o(" (DistilBERT model)"),uAo=l(),H1=a("li"),Rce=a("strong"),_Ao=o("electra"),bAo=o(" \u2014 "),bD=a("a"),vAo=o("ElectraForMaskedLM"),FAo=o(" (ELECTRA model)"),TAo=l(),U1=a("li"),Pce=a("strong"),MAo=o("flaubert"),EAo=o(" \u2014 "),vD=a("a"),CAo=o("FlaubertWithLMHeadModel"),wAo=o(" (FlauBERT model)"),AAo=l(),J1=a("li"),Bce=a("strong"),yAo=o("fnet"),LAo=o(" \u2014 "),FD=a("a"),xAo=o("FNetForMaskedLM"),$Ao=o(" (FNet model)"),kAo=l(),Y1=a("li"),Ice=a("strong"),SAo=o("funnel"),RAo=o(" \u2014 "),TD=a("a"),PAo=o("FunnelForMaskedLM"),BAo=o(" (Funnel Transformer model)"),IAo=l(),K1=a("li"),qce=a("strong"),qAo=o("ibert"),NAo=o(" \u2014 "),MD=a("a"),jAo=o("IBertForMaskedLM"),DAo=o(" (I-BERT model)"),GAo=l(),Z1=a("li"),Nce=a("strong"),OAo=o("layoutlm"),VAo=o(" \u2014 "),ED=a("a"),XAo=o("LayoutLMForMaskedLM"),zAo=o(" (LayoutLM model)"),WAo=l(),e9=a("li"),jce=a("strong"),QAo=o("longformer"),HAo=o(" \u2014 "),CD=a("a"),UAo=o("LongformerForMaskedLM"),JAo=o(" (Longformer model)"),YAo=l(),o9=a("li"),Dce=a("strong"),KAo=o("luke"),ZAo=o(" \u2014 "),wD=a("a"),eyo=o("LukeForMaskedLM"),oyo=o(" (LUKE model)"),ryo=l(),r9=a("li"),Gce=a("strong"),tyo=o("mbart"),ayo=o(" \u2014 "),AD=a("a"),nyo=o("MBartForConditionalGeneration"),syo=o(" (mBART model)"),lyo=l(),t9=a("li"),Oce=a("strong"),iyo=o("megatron-bert"),dyo=o(" \u2014 "),yD=a("a"),cyo=o("MegatronBertForMaskedLM"),fyo=o(" (MegatronBert model)"),myo=l(),a9=a("li"),Vce=a("strong"),gyo=o("mobilebert"),hyo=o(" \u2014 "),LD=a("a"),pyo=o("MobileBertForMaskedLM"),uyo=o(" (MobileBERT model)"),_yo=l(),n9=a("li"),Xce=a("strong"),byo=o("mpnet"),vyo=o(" \u2014 "),xD=a("a"),Fyo=o("MPNetForMaskedLM"),Tyo=o(" (MPNet model)"),Myo=l(),s9=a("li"),zce=a("strong"),Eyo=o("nystromformer"),Cyo=o(" \u2014 "),$D=a("a"),wyo=o("NystromformerForMaskedLM"),Ayo=o(" (Nystromformer model)"),yyo=l(),l9=a("li"),Wce=a("strong"),Lyo=o("perceiver"),xyo=o(" \u2014 "),kD=a("a"),$yo=o("PerceiverForMaskedLM"),kyo=o(" (Perceiver model)"),Syo=l(),i9=a("li"),Qce=a("strong"),Ryo=o("qdqbert"),Pyo=o(" \u2014 "),SD=a("a"),Byo=o("QDQBertForMaskedLM"),Iyo=o(" (QDQBert model)"),qyo=l(),d9=a("li"),Hce=a("strong"),Nyo=o("reformer"),jyo=o(" \u2014 "),RD=a("a"),Dyo=o("ReformerForMaskedLM"),Gyo=o(" (Reformer model)"),Oyo=l(),c9=a("li"),Uce=a("strong"),Vyo=o("rembert"),Xyo=o(" \u2014 "),PD=a("a"),zyo=o("RemBertForMaskedLM"),Wyo=o(" (RemBERT model)"),Qyo=l(),f9=a("li"),Jce=a("strong"),Hyo=o("roberta"),Uyo=o(" \u2014 "),BD=a("a"),Jyo=o("RobertaForMaskedLM"),Yyo=o(" (RoBERTa model)"),Kyo=l(),m9=a("li"),Yce=a("strong"),Zyo=o("roformer"),eLo=o(" \u2014 "),ID=a("a"),oLo=o("RoFormerForMaskedLM"),rLo=o(" (RoFormer model)"),tLo=l(),g9=a("li"),Kce=a("strong"),aLo=o("squeezebert"),nLo=o(" \u2014 "),qD=a("a"),sLo=o("SqueezeBertForMaskedLM"),lLo=o(" (SqueezeBERT model)"),iLo=l(),h9=a("li"),Zce=a("strong"),dLo=o("tapas"),cLo=o(" \u2014 "),ND=a("a"),fLo=o("TapasForMaskedLM"),mLo=o(" (TAPAS model)"),gLo=l(),p9=a("li"),efe=a("strong"),hLo=o("wav2vec2"),pLo=o(" \u2014 "),ofe=a("code"),uLo=o("Wav2Vec2ForMaskedLM"),_Lo=o(" (Wav2Vec2 model)"),bLo=l(),u9=a("li"),rfe=a("strong"),vLo=o("xlm"),FLo=o(" \u2014 "),jD=a("a"),TLo=o("XLMWithLMHeadModel"),MLo=o(" (XLM model)"),ELo=l(),_9=a("li"),tfe=a("strong"),CLo=o("xlm-roberta"),wLo=o(" \u2014 "),DD=a("a"),ALo=o("XLMRobertaForMaskedLM"),yLo=o(" (XLM-RoBERTa model)"),LLo=l(),b9=a("li"),afe=a("strong"),xLo=o("xlm-roberta-xl"),$Lo=o(" \u2014 "),GD=a("a"),kLo=o("XLMRobertaXLForMaskedLM"),SLo=o(" (XLM-RoBERTa-XL model)"),RLo=l(),v9=a("li"),nfe=a("strong"),PLo=o("yoso"),BLo=o(" \u2014 "),OD=a("a"),ILo=o("YosoForMaskedLM"),qLo=o(" (YOSO model)"),NLo=l(),F9=a("p"),jLo=o("The model is set in evaluation mode by default using "),sfe=a("code"),DLo=o("model.eval()"),GLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lfe=a("code"),OLo=o("model.train()"),VLo=l(),F(T9.$$.fragment),ENe=l(),qi=a("h2"),M9=a("a"),ife=a("span"),F(FA.$$.fragment),XLo=l(),dfe=a("span"),zLo=o("AutoModelForSeq2SeqLM"),CNe=l(),So=a("div"),F(TA.$$.fragment),WLo=l(),Ni=a("p"),QLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VD=a("a"),HLo=o("from_pretrained()"),ULo=o(" class method or the "),XD=a("a"),JLo=o("from_config()"),YLo=o(` class
method.`),KLo=l(),MA=a("p"),ZLo=o("This class cannot be instantiated directly using "),cfe=a("code"),e8o=o("__init__()"),o8o=o(" (throws an error)."),r8o=l(),lt=a("div"),F(EA.$$.fragment),t8o=l(),ffe=a("p"),a8o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),n8o=l(),ji=a("p"),s8o=o(`Note:
Loading a model from its configuration file does `),mfe=a("strong"),l8o=o("not"),i8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=a("a"),d8o=o("from_pretrained()"),c8o=o(" to load the model weights."),f8o=l(),F(E9.$$.fragment),m8o=l(),eo=a("div"),F(CA.$$.fragment),g8o=l(),gfe=a("p"),h8o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),p8o=l(),Sa=a("p"),u8o=o("The model class to instantiate is selected based on the "),hfe=a("code"),_8o=o("model_type"),b8o=o(` property of the config object (either
passed as an argument or loaded from `),pfe=a("code"),v8o=o("pretrained_model_name_or_path"),F8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=a("code"),T8o=o("pretrained_model_name_or_path"),M8o=o(":"),E8o=l(),ue=a("ul"),C9=a("li"),_fe=a("strong"),C8o=o("bart"),w8o=o(" \u2014 "),WD=a("a"),A8o=o("BartForConditionalGeneration"),y8o=o(" (BART model)"),L8o=l(),w9=a("li"),bfe=a("strong"),x8o=o("bigbird_pegasus"),$8o=o(" \u2014 "),QD=a("a"),k8o=o("BigBirdPegasusForConditionalGeneration"),S8o=o(" (BigBirdPegasus model)"),R8o=l(),A9=a("li"),vfe=a("strong"),P8o=o("blenderbot"),B8o=o(" \u2014 "),HD=a("a"),I8o=o("BlenderbotForConditionalGeneration"),q8o=o(" (Blenderbot model)"),N8o=l(),y9=a("li"),Ffe=a("strong"),j8o=o("blenderbot-small"),D8o=o(" \u2014 "),UD=a("a"),G8o=o("BlenderbotSmallForConditionalGeneration"),O8o=o(" (BlenderbotSmall model)"),V8o=l(),L9=a("li"),Tfe=a("strong"),X8o=o("encoder-decoder"),z8o=o(" \u2014 "),JD=a("a"),W8o=o("EncoderDecoderModel"),Q8o=o(" (Encoder decoder model)"),H8o=l(),x9=a("li"),Mfe=a("strong"),U8o=o("fsmt"),J8o=o(" \u2014 "),YD=a("a"),Y8o=o("FSMTForConditionalGeneration"),K8o=o(" (FairSeq Machine-Translation model)"),Z8o=l(),$9=a("li"),Efe=a("strong"),exo=o("led"),oxo=o(" \u2014 "),KD=a("a"),rxo=o("LEDForConditionalGeneration"),txo=o(" (LED model)"),axo=l(),k9=a("li"),Cfe=a("strong"),nxo=o("m2m_100"),sxo=o(" \u2014 "),ZD=a("a"),lxo=o("M2M100ForConditionalGeneration"),ixo=o(" (M2M100 model)"),dxo=l(),S9=a("li"),wfe=a("strong"),cxo=o("marian"),fxo=o(" \u2014 "),eG=a("a"),mxo=o("MarianMTModel"),gxo=o(" (Marian model)"),hxo=l(),R9=a("li"),Afe=a("strong"),pxo=o("mbart"),uxo=o(" \u2014 "),oG=a("a"),_xo=o("MBartForConditionalGeneration"),bxo=o(" (mBART model)"),vxo=l(),P9=a("li"),yfe=a("strong"),Fxo=o("mt5"),Txo=o(" \u2014 "),rG=a("a"),Mxo=o("MT5ForConditionalGeneration"),Exo=o(" (mT5 model)"),Cxo=l(),B9=a("li"),Lfe=a("strong"),wxo=o("pegasus"),Axo=o(" \u2014 "),tG=a("a"),yxo=o("PegasusForConditionalGeneration"),Lxo=o(" (Pegasus model)"),xxo=l(),I9=a("li"),xfe=a("strong"),$xo=o("plbart"),kxo=o(" \u2014 "),aG=a("a"),Sxo=o("PLBartForConditionalGeneration"),Rxo=o(" (PLBart model)"),Pxo=l(),q9=a("li"),$fe=a("strong"),Bxo=o("prophetnet"),Ixo=o(" \u2014 "),nG=a("a"),qxo=o("ProphetNetForConditionalGeneration"),Nxo=o(" (ProphetNet model)"),jxo=l(),N9=a("li"),kfe=a("strong"),Dxo=o("t5"),Gxo=o(" \u2014 "),sG=a("a"),Oxo=o("T5ForConditionalGeneration"),Vxo=o(" (T5 model)"),Xxo=l(),j9=a("li"),Sfe=a("strong"),zxo=o("xlm-prophetnet"),Wxo=o(" \u2014 "),lG=a("a"),Qxo=o("XLMProphetNetForConditionalGeneration"),Hxo=o(" (XLMProphetNet model)"),Uxo=l(),D9=a("p"),Jxo=o("The model is set in evaluation mode by default using "),Rfe=a("code"),Yxo=o("model.eval()"),Kxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pfe=a("code"),Zxo=o("model.train()"),e$o=l(),F(G9.$$.fragment),wNe=l(),Di=a("h2"),O9=a("a"),Bfe=a("span"),F(wA.$$.fragment),o$o=l(),Ife=a("span"),r$o=o("AutoModelForSequenceClassification"),ANe=l(),Ro=a("div"),F(AA.$$.fragment),t$o=l(),Gi=a("p"),a$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iG=a("a"),n$o=o("from_pretrained()"),s$o=o(" class method or the "),dG=a("a"),l$o=o("from_config()"),i$o=o(` class
method.`),d$o=l(),yA=a("p"),c$o=o("This class cannot be instantiated directly using "),qfe=a("code"),f$o=o("__init__()"),m$o=o(" (throws an error)."),g$o=l(),it=a("div"),F(LA.$$.fragment),h$o=l(),Nfe=a("p"),p$o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),u$o=l(),Oi=a("p"),_$o=o(`Note:
Loading a model from its configuration file does `),jfe=a("strong"),b$o=o("not"),v$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=a("a"),F$o=o("from_pretrained()"),T$o=o(" to load the model weights."),M$o=l(),F(V9.$$.fragment),E$o=l(),oo=a("div"),F(xA.$$.fragment),C$o=l(),Dfe=a("p"),w$o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),A$o=l(),Ra=a("p"),y$o=o("The model class to instantiate is selected based on the "),Gfe=a("code"),L$o=o("model_type"),x$o=o(` property of the config object (either
passed as an argument or loaded from `),Ofe=a("code"),$$o=o("pretrained_model_name_or_path"),k$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vfe=a("code"),S$o=o("pretrained_model_name_or_path"),R$o=o(":"),P$o=l(),q=a("ul"),X9=a("li"),Xfe=a("strong"),B$o=o("albert"),I$o=o(" \u2014 "),fG=a("a"),q$o=o("AlbertForSequenceClassification"),N$o=o(" (ALBERT model)"),j$o=l(),z9=a("li"),zfe=a("strong"),D$o=o("bart"),G$o=o(" \u2014 "),mG=a("a"),O$o=o("BartForSequenceClassification"),V$o=o(" (BART model)"),X$o=l(),W9=a("li"),Wfe=a("strong"),z$o=o("bert"),W$o=o(" \u2014 "),gG=a("a"),Q$o=o("BertForSequenceClassification"),H$o=o(" (BERT model)"),U$o=l(),Q9=a("li"),Qfe=a("strong"),J$o=o("big_bird"),Y$o=o(" \u2014 "),hG=a("a"),K$o=o("BigBirdForSequenceClassification"),Z$o=o(" (BigBird model)"),eko=l(),H9=a("li"),Hfe=a("strong"),oko=o("bigbird_pegasus"),rko=o(" \u2014 "),pG=a("a"),tko=o("BigBirdPegasusForSequenceClassification"),ako=o(" (BigBirdPegasus model)"),nko=l(),U9=a("li"),Ufe=a("strong"),sko=o("camembert"),lko=o(" \u2014 "),uG=a("a"),iko=o("CamembertForSequenceClassification"),dko=o(" (CamemBERT model)"),cko=l(),J9=a("li"),Jfe=a("strong"),fko=o("canine"),mko=o(" \u2014 "),_G=a("a"),gko=o("CanineForSequenceClassification"),hko=o(" (Canine model)"),pko=l(),Y9=a("li"),Yfe=a("strong"),uko=o("convbert"),_ko=o(" \u2014 "),bG=a("a"),bko=o("ConvBertForSequenceClassification"),vko=o(" (ConvBERT model)"),Fko=l(),K9=a("li"),Kfe=a("strong"),Tko=o("ctrl"),Mko=o(" \u2014 "),vG=a("a"),Eko=o("CTRLForSequenceClassification"),Cko=o(" (CTRL model)"),wko=l(),Z9=a("li"),Zfe=a("strong"),Ako=o("data2vec-text"),yko=o(" \u2014 "),FG=a("a"),Lko=o("Data2VecTextForSequenceClassification"),xko=o(" (Data2VecText model)"),$ko=l(),eb=a("li"),eme=a("strong"),kko=o("deberta"),Sko=o(" \u2014 "),TG=a("a"),Rko=o("DebertaForSequenceClassification"),Pko=o(" (DeBERTa model)"),Bko=l(),ob=a("li"),ome=a("strong"),Iko=o("deberta-v2"),qko=o(" \u2014 "),MG=a("a"),Nko=o("DebertaV2ForSequenceClassification"),jko=o(" (DeBERTa-v2 model)"),Dko=l(),rb=a("li"),rme=a("strong"),Gko=o("distilbert"),Oko=o(" \u2014 "),EG=a("a"),Vko=o("DistilBertForSequenceClassification"),Xko=o(" (DistilBERT model)"),zko=l(),tb=a("li"),tme=a("strong"),Wko=o("electra"),Qko=o(" \u2014 "),CG=a("a"),Hko=o("ElectraForSequenceClassification"),Uko=o(" (ELECTRA model)"),Jko=l(),ab=a("li"),ame=a("strong"),Yko=o("flaubert"),Kko=o(" \u2014 "),wG=a("a"),Zko=o("FlaubertForSequenceClassification"),eSo=o(" (FlauBERT model)"),oSo=l(),nb=a("li"),nme=a("strong"),rSo=o("fnet"),tSo=o(" \u2014 "),AG=a("a"),aSo=o("FNetForSequenceClassification"),nSo=o(" (FNet model)"),sSo=l(),sb=a("li"),sme=a("strong"),lSo=o("funnel"),iSo=o(" \u2014 "),yG=a("a"),dSo=o("FunnelForSequenceClassification"),cSo=o(" (Funnel Transformer model)"),fSo=l(),lb=a("li"),lme=a("strong"),mSo=o("gpt2"),gSo=o(" \u2014 "),LG=a("a"),hSo=o("GPT2ForSequenceClassification"),pSo=o(" (OpenAI GPT-2 model)"),uSo=l(),ib=a("li"),ime=a("strong"),_So=o("gpt_neo"),bSo=o(" \u2014 "),xG=a("a"),vSo=o("GPTNeoForSequenceClassification"),FSo=o(" (GPT Neo model)"),TSo=l(),db=a("li"),dme=a("strong"),MSo=o("gptj"),ESo=o(" \u2014 "),$G=a("a"),CSo=o("GPTJForSequenceClassification"),wSo=o(" (GPT-J model)"),ASo=l(),cb=a("li"),cme=a("strong"),ySo=o("ibert"),LSo=o(" \u2014 "),kG=a("a"),xSo=o("IBertForSequenceClassification"),$So=o(" (I-BERT model)"),kSo=l(),fb=a("li"),fme=a("strong"),SSo=o("layoutlm"),RSo=o(" \u2014 "),SG=a("a"),PSo=o("LayoutLMForSequenceClassification"),BSo=o(" (LayoutLM model)"),ISo=l(),mb=a("li"),mme=a("strong"),qSo=o("layoutlmv2"),NSo=o(" \u2014 "),RG=a("a"),jSo=o("LayoutLMv2ForSequenceClassification"),DSo=o(" (LayoutLMv2 model)"),GSo=l(),gb=a("li"),gme=a("strong"),OSo=o("layoutlmv3"),VSo=o(" \u2014 "),PG=a("a"),XSo=o("LayoutLMv3ForSequenceClassification"),zSo=o(" (LayoutLMv3 model)"),WSo=l(),hb=a("li"),hme=a("strong"),QSo=o("led"),HSo=o(" \u2014 "),BG=a("a"),USo=o("LEDForSequenceClassification"),JSo=o(" (LED model)"),YSo=l(),pb=a("li"),pme=a("strong"),KSo=o("longformer"),ZSo=o(" \u2014 "),IG=a("a"),eRo=o("LongformerForSequenceClassification"),oRo=o(" (Longformer model)"),rRo=l(),ub=a("li"),ume=a("strong"),tRo=o("mbart"),aRo=o(" \u2014 "),qG=a("a"),nRo=o("MBartForSequenceClassification"),sRo=o(" (mBART model)"),lRo=l(),_b=a("li"),_me=a("strong"),iRo=o("megatron-bert"),dRo=o(" \u2014 "),NG=a("a"),cRo=o("MegatronBertForSequenceClassification"),fRo=o(" (MegatronBert model)"),mRo=l(),bb=a("li"),bme=a("strong"),gRo=o("mobilebert"),hRo=o(" \u2014 "),jG=a("a"),pRo=o("MobileBertForSequenceClassification"),uRo=o(" (MobileBERT model)"),_Ro=l(),vb=a("li"),vme=a("strong"),bRo=o("mpnet"),vRo=o(" \u2014 "),DG=a("a"),FRo=o("MPNetForSequenceClassification"),TRo=o(" (MPNet model)"),MRo=l(),Fb=a("li"),Fme=a("strong"),ERo=o("nystromformer"),CRo=o(" \u2014 "),GG=a("a"),wRo=o("NystromformerForSequenceClassification"),ARo=o(" (Nystromformer model)"),yRo=l(),Tb=a("li"),Tme=a("strong"),LRo=o("openai-gpt"),xRo=o(" \u2014 "),OG=a("a"),$Ro=o("OpenAIGPTForSequenceClassification"),kRo=o(" (OpenAI GPT model)"),SRo=l(),Mb=a("li"),Mme=a("strong"),RRo=o("perceiver"),PRo=o(" \u2014 "),VG=a("a"),BRo=o("PerceiverForSequenceClassification"),IRo=o(" (Perceiver model)"),qRo=l(),Eb=a("li"),Eme=a("strong"),NRo=o("plbart"),jRo=o(" \u2014 "),XG=a("a"),DRo=o("PLBartForSequenceClassification"),GRo=o(" (PLBart model)"),ORo=l(),Cb=a("li"),Cme=a("strong"),VRo=o("qdqbert"),XRo=o(" \u2014 "),zG=a("a"),zRo=o("QDQBertForSequenceClassification"),WRo=o(" (QDQBert model)"),QRo=l(),wb=a("li"),wme=a("strong"),HRo=o("reformer"),URo=o(" \u2014 "),WG=a("a"),JRo=o("ReformerForSequenceClassification"),YRo=o(" (Reformer model)"),KRo=l(),Ab=a("li"),Ame=a("strong"),ZRo=o("rembert"),ePo=o(" \u2014 "),QG=a("a"),oPo=o("RemBertForSequenceClassification"),rPo=o(" (RemBERT model)"),tPo=l(),yb=a("li"),yme=a("strong"),aPo=o("roberta"),nPo=o(" \u2014 "),HG=a("a"),sPo=o("RobertaForSequenceClassification"),lPo=o(" (RoBERTa model)"),iPo=l(),Lb=a("li"),Lme=a("strong"),dPo=o("roformer"),cPo=o(" \u2014 "),UG=a("a"),fPo=o("RoFormerForSequenceClassification"),mPo=o(" (RoFormer model)"),gPo=l(),xb=a("li"),xme=a("strong"),hPo=o("squeezebert"),pPo=o(" \u2014 "),JG=a("a"),uPo=o("SqueezeBertForSequenceClassification"),_Po=o(" (SqueezeBERT model)"),bPo=l(),$b=a("li"),$me=a("strong"),vPo=o("tapas"),FPo=o(" \u2014 "),YG=a("a"),TPo=o("TapasForSequenceClassification"),MPo=o(" (TAPAS model)"),EPo=l(),kb=a("li"),kme=a("strong"),CPo=o("transfo-xl"),wPo=o(" \u2014 "),KG=a("a"),APo=o("TransfoXLForSequenceClassification"),yPo=o(" (Transformer-XL model)"),LPo=l(),Sb=a("li"),Sme=a("strong"),xPo=o("xlm"),$Po=o(" \u2014 "),ZG=a("a"),kPo=o("XLMForSequenceClassification"),SPo=o(" (XLM model)"),RPo=l(),Rb=a("li"),Rme=a("strong"),PPo=o("xlm-roberta"),BPo=o(" \u2014 "),eO=a("a"),IPo=o("XLMRobertaForSequenceClassification"),qPo=o(" (XLM-RoBERTa model)"),NPo=l(),Pb=a("li"),Pme=a("strong"),jPo=o("xlm-roberta-xl"),DPo=o(" \u2014 "),oO=a("a"),GPo=o("XLMRobertaXLForSequenceClassification"),OPo=o(" (XLM-RoBERTa-XL model)"),VPo=l(),Bb=a("li"),Bme=a("strong"),XPo=o("xlnet"),zPo=o(" \u2014 "),rO=a("a"),WPo=o("XLNetForSequenceClassification"),QPo=o(" (XLNet model)"),HPo=l(),Ib=a("li"),Ime=a("strong"),UPo=o("yoso"),JPo=o(" \u2014 "),tO=a("a"),YPo=o("YosoForSequenceClassification"),KPo=o(" (YOSO model)"),ZPo=l(),qb=a("p"),eBo=o("The model is set in evaluation mode by default using "),qme=a("code"),oBo=o("model.eval()"),rBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nme=a("code"),tBo=o("model.train()"),aBo=l(),F(Nb.$$.fragment),yNe=l(),Vi=a("h2"),jb=a("a"),jme=a("span"),F($A.$$.fragment),nBo=l(),Dme=a("span"),sBo=o("AutoModelForMultipleChoice"),LNe=l(),Po=a("div"),F(kA.$$.fragment),lBo=l(),Xi=a("p"),iBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aO=a("a"),dBo=o("from_pretrained()"),cBo=o(" class method or the "),nO=a("a"),fBo=o("from_config()"),mBo=o(` class
method.`),gBo=l(),SA=a("p"),hBo=o("This class cannot be instantiated directly using "),Gme=a("code"),pBo=o("__init__()"),uBo=o(" (throws an error)."),_Bo=l(),dt=a("div"),F(RA.$$.fragment),bBo=l(),Ome=a("p"),vBo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),FBo=l(),zi=a("p"),TBo=o(`Note:
Loading a model from its configuration file does `),Vme=a("strong"),MBo=o("not"),EBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=a("a"),CBo=o("from_pretrained()"),wBo=o(" to load the model weights."),ABo=l(),F(Db.$$.fragment),yBo=l(),ro=a("div"),F(PA.$$.fragment),LBo=l(),Xme=a("p"),xBo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$Bo=l(),Pa=a("p"),kBo=o("The model class to instantiate is selected based on the "),zme=a("code"),SBo=o("model_type"),RBo=o(` property of the config object (either
passed as an argument or loaded from `),Wme=a("code"),PBo=o("pretrained_model_name_or_path"),BBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qme=a("code"),IBo=o("pretrained_model_name_or_path"),qBo=o(":"),NBo=l(),K=a("ul"),Gb=a("li"),Hme=a("strong"),jBo=o("albert"),DBo=o(" \u2014 "),lO=a("a"),GBo=o("AlbertForMultipleChoice"),OBo=o(" (ALBERT model)"),VBo=l(),Ob=a("li"),Ume=a("strong"),XBo=o("bert"),zBo=o(" \u2014 "),iO=a("a"),WBo=o("BertForMultipleChoice"),QBo=o(" (BERT model)"),HBo=l(),Vb=a("li"),Jme=a("strong"),UBo=o("big_bird"),JBo=o(" \u2014 "),dO=a("a"),YBo=o("BigBirdForMultipleChoice"),KBo=o(" (BigBird model)"),ZBo=l(),Xb=a("li"),Yme=a("strong"),eIo=o("camembert"),oIo=o(" \u2014 "),cO=a("a"),rIo=o("CamembertForMultipleChoice"),tIo=o(" (CamemBERT model)"),aIo=l(),zb=a("li"),Kme=a("strong"),nIo=o("canine"),sIo=o(" \u2014 "),fO=a("a"),lIo=o("CanineForMultipleChoice"),iIo=o(" (Canine model)"),dIo=l(),Wb=a("li"),Zme=a("strong"),cIo=o("convbert"),fIo=o(" \u2014 "),mO=a("a"),mIo=o("ConvBertForMultipleChoice"),gIo=o(" (ConvBERT model)"),hIo=l(),Qb=a("li"),ege=a("strong"),pIo=o("data2vec-text"),uIo=o(" \u2014 "),gO=a("a"),_Io=o("Data2VecTextForMultipleChoice"),bIo=o(" (Data2VecText model)"),vIo=l(),Hb=a("li"),oge=a("strong"),FIo=o("deberta-v2"),TIo=o(" \u2014 "),hO=a("a"),MIo=o("DebertaV2ForMultipleChoice"),EIo=o(" (DeBERTa-v2 model)"),CIo=l(),Ub=a("li"),rge=a("strong"),wIo=o("distilbert"),AIo=o(" \u2014 "),pO=a("a"),yIo=o("DistilBertForMultipleChoice"),LIo=o(" (DistilBERT model)"),xIo=l(),Jb=a("li"),tge=a("strong"),$Io=o("electra"),kIo=o(" \u2014 "),uO=a("a"),SIo=o("ElectraForMultipleChoice"),RIo=o(" (ELECTRA model)"),PIo=l(),Yb=a("li"),age=a("strong"),BIo=o("flaubert"),IIo=o(" \u2014 "),_O=a("a"),qIo=o("FlaubertForMultipleChoice"),NIo=o(" (FlauBERT model)"),jIo=l(),Kb=a("li"),nge=a("strong"),DIo=o("fnet"),GIo=o(" \u2014 "),bO=a("a"),OIo=o("FNetForMultipleChoice"),VIo=o(" (FNet model)"),XIo=l(),Zb=a("li"),sge=a("strong"),zIo=o("funnel"),WIo=o(" \u2014 "),vO=a("a"),QIo=o("FunnelForMultipleChoice"),HIo=o(" (Funnel Transformer model)"),UIo=l(),e2=a("li"),lge=a("strong"),JIo=o("ibert"),YIo=o(" \u2014 "),FO=a("a"),KIo=o("IBertForMultipleChoice"),ZIo=o(" (I-BERT model)"),eqo=l(),o2=a("li"),ige=a("strong"),oqo=o("longformer"),rqo=o(" \u2014 "),TO=a("a"),tqo=o("LongformerForMultipleChoice"),aqo=o(" (Longformer model)"),nqo=l(),r2=a("li"),dge=a("strong"),sqo=o("megatron-bert"),lqo=o(" \u2014 "),MO=a("a"),iqo=o("MegatronBertForMultipleChoice"),dqo=o(" (MegatronBert model)"),cqo=l(),t2=a("li"),cge=a("strong"),fqo=o("mobilebert"),mqo=o(" \u2014 "),EO=a("a"),gqo=o("MobileBertForMultipleChoice"),hqo=o(" (MobileBERT model)"),pqo=l(),a2=a("li"),fge=a("strong"),uqo=o("mpnet"),_qo=o(" \u2014 "),CO=a("a"),bqo=o("MPNetForMultipleChoice"),vqo=o(" (MPNet model)"),Fqo=l(),n2=a("li"),mge=a("strong"),Tqo=o("nystromformer"),Mqo=o(" \u2014 "),wO=a("a"),Eqo=o("NystromformerForMultipleChoice"),Cqo=o(" (Nystromformer model)"),wqo=l(),s2=a("li"),gge=a("strong"),Aqo=o("qdqbert"),yqo=o(" \u2014 "),AO=a("a"),Lqo=o("QDQBertForMultipleChoice"),xqo=o(" (QDQBert model)"),$qo=l(),l2=a("li"),hge=a("strong"),kqo=o("rembert"),Sqo=o(" \u2014 "),yO=a("a"),Rqo=o("RemBertForMultipleChoice"),Pqo=o(" (RemBERT model)"),Bqo=l(),i2=a("li"),pge=a("strong"),Iqo=o("roberta"),qqo=o(" \u2014 "),LO=a("a"),Nqo=o("RobertaForMultipleChoice"),jqo=o(" (RoBERTa model)"),Dqo=l(),d2=a("li"),uge=a("strong"),Gqo=o("roformer"),Oqo=o(" \u2014 "),xO=a("a"),Vqo=o("RoFormerForMultipleChoice"),Xqo=o(" (RoFormer model)"),zqo=l(),c2=a("li"),_ge=a("strong"),Wqo=o("squeezebert"),Qqo=o(" \u2014 "),$O=a("a"),Hqo=o("SqueezeBertForMultipleChoice"),Uqo=o(" (SqueezeBERT model)"),Jqo=l(),f2=a("li"),bge=a("strong"),Yqo=o("xlm"),Kqo=o(" \u2014 "),kO=a("a"),Zqo=o("XLMForMultipleChoice"),eNo=o(" (XLM model)"),oNo=l(),m2=a("li"),vge=a("strong"),rNo=o("xlm-roberta"),tNo=o(" \u2014 "),SO=a("a"),aNo=o("XLMRobertaForMultipleChoice"),nNo=o(" (XLM-RoBERTa model)"),sNo=l(),g2=a("li"),Fge=a("strong"),lNo=o("xlm-roberta-xl"),iNo=o(" \u2014 "),RO=a("a"),dNo=o("XLMRobertaXLForMultipleChoice"),cNo=o(" (XLM-RoBERTa-XL model)"),fNo=l(),h2=a("li"),Tge=a("strong"),mNo=o("xlnet"),gNo=o(" \u2014 "),PO=a("a"),hNo=o("XLNetForMultipleChoice"),pNo=o(" (XLNet model)"),uNo=l(),p2=a("li"),Mge=a("strong"),_No=o("yoso"),bNo=o(" \u2014 "),BO=a("a"),vNo=o("YosoForMultipleChoice"),FNo=o(" (YOSO model)"),TNo=l(),u2=a("p"),MNo=o("The model is set in evaluation mode by default using "),Ege=a("code"),ENo=o("model.eval()"),CNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cge=a("code"),wNo=o("model.train()"),ANo=l(),F(_2.$$.fragment),xNe=l(),Wi=a("h2"),b2=a("a"),wge=a("span"),F(BA.$$.fragment),yNo=l(),Age=a("span"),LNo=o("AutoModelForNextSentencePrediction"),$Ne=l(),Bo=a("div"),F(IA.$$.fragment),xNo=l(),Qi=a("p"),$No=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IO=a("a"),kNo=o("from_pretrained()"),SNo=o(" class method or the "),qO=a("a"),RNo=o("from_config()"),PNo=o(` class
method.`),BNo=l(),qA=a("p"),INo=o("This class cannot be instantiated directly using "),yge=a("code"),qNo=o("__init__()"),NNo=o(" (throws an error)."),jNo=l(),ct=a("div"),F(NA.$$.fragment),DNo=l(),Lge=a("p"),GNo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ONo=l(),Hi=a("p"),VNo=o(`Note:
Loading a model from its configuration file does `),xge=a("strong"),XNo=o("not"),zNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=a("a"),WNo=o("from_pretrained()"),QNo=o(" to load the model weights."),HNo=l(),F(v2.$$.fragment),UNo=l(),to=a("div"),F(jA.$$.fragment),JNo=l(),$ge=a("p"),YNo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),KNo=l(),Ba=a("p"),ZNo=o("The model class to instantiate is selected based on the "),kge=a("code"),ejo=o("model_type"),ojo=o(` property of the config object (either
passed as an argument or loaded from `),Sge=a("code"),rjo=o("pretrained_model_name_or_path"),tjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=a("code"),ajo=o("pretrained_model_name_or_path"),njo=o(":"),sjo=l(),Yr=a("ul"),F2=a("li"),Pge=a("strong"),ljo=o("bert"),ijo=o(" \u2014 "),jO=a("a"),djo=o("BertForNextSentencePrediction"),cjo=o(" (BERT model)"),fjo=l(),T2=a("li"),Bge=a("strong"),mjo=o("fnet"),gjo=o(" \u2014 "),DO=a("a"),hjo=o("FNetForNextSentencePrediction"),pjo=o(" (FNet model)"),ujo=l(),M2=a("li"),Ige=a("strong"),_jo=o("megatron-bert"),bjo=o(" \u2014 "),GO=a("a"),vjo=o("MegatronBertForNextSentencePrediction"),Fjo=o(" (MegatronBert model)"),Tjo=l(),E2=a("li"),qge=a("strong"),Mjo=o("mobilebert"),Ejo=o(" \u2014 "),OO=a("a"),Cjo=o("MobileBertForNextSentencePrediction"),wjo=o(" (MobileBERT model)"),Ajo=l(),C2=a("li"),Nge=a("strong"),yjo=o("qdqbert"),Ljo=o(" \u2014 "),VO=a("a"),xjo=o("QDQBertForNextSentencePrediction"),$jo=o(" (QDQBert model)"),kjo=l(),w2=a("p"),Sjo=o("The model is set in evaluation mode by default using "),jge=a("code"),Rjo=o("model.eval()"),Pjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dge=a("code"),Bjo=o("model.train()"),Ijo=l(),F(A2.$$.fragment),kNe=l(),Ui=a("h2"),y2=a("a"),Gge=a("span"),F(DA.$$.fragment),qjo=l(),Oge=a("span"),Njo=o("AutoModelForTokenClassification"),SNe=l(),Io=a("div"),F(GA.$$.fragment),jjo=l(),Ji=a("p"),Djo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XO=a("a"),Gjo=o("from_pretrained()"),Ojo=o(" class method or the "),zO=a("a"),Vjo=o("from_config()"),Xjo=o(` class
method.`),zjo=l(),OA=a("p"),Wjo=o("This class cannot be instantiated directly using "),Vge=a("code"),Qjo=o("__init__()"),Hjo=o(" (throws an error)."),Ujo=l(),ft=a("div"),F(VA.$$.fragment),Jjo=l(),Xge=a("p"),Yjo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Kjo=l(),Yi=a("p"),Zjo=o(`Note:
Loading a model from its configuration file does `),zge=a("strong"),eDo=o("not"),oDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=a("a"),rDo=o("from_pretrained()"),tDo=o(" to load the model weights."),aDo=l(),F(L2.$$.fragment),nDo=l(),ao=a("div"),F(XA.$$.fragment),sDo=l(),Wge=a("p"),lDo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),iDo=l(),Ia=a("p"),dDo=o("The model class to instantiate is selected based on the "),Qge=a("code"),cDo=o("model_type"),fDo=o(` property of the config object (either
passed as an argument or loaded from `),Hge=a("code"),mDo=o("pretrained_model_name_or_path"),gDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=a("code"),hDo=o("pretrained_model_name_or_path"),pDo=o(":"),uDo=l(),U=a("ul"),x2=a("li"),Jge=a("strong"),_Do=o("albert"),bDo=o(" \u2014 "),QO=a("a"),vDo=o("AlbertForTokenClassification"),FDo=o(" (ALBERT model)"),TDo=l(),$2=a("li"),Yge=a("strong"),MDo=o("bert"),EDo=o(" \u2014 "),HO=a("a"),CDo=o("BertForTokenClassification"),wDo=o(" (BERT model)"),ADo=l(),k2=a("li"),Kge=a("strong"),yDo=o("big_bird"),LDo=o(" \u2014 "),UO=a("a"),xDo=o("BigBirdForTokenClassification"),$Do=o(" (BigBird model)"),kDo=l(),S2=a("li"),Zge=a("strong"),SDo=o("camembert"),RDo=o(" \u2014 "),JO=a("a"),PDo=o("CamembertForTokenClassification"),BDo=o(" (CamemBERT model)"),IDo=l(),R2=a("li"),ehe=a("strong"),qDo=o("canine"),NDo=o(" \u2014 "),YO=a("a"),jDo=o("CanineForTokenClassification"),DDo=o(" (Canine model)"),GDo=l(),P2=a("li"),ohe=a("strong"),ODo=o("convbert"),VDo=o(" \u2014 "),KO=a("a"),XDo=o("ConvBertForTokenClassification"),zDo=o(" (ConvBERT model)"),WDo=l(),B2=a("li"),rhe=a("strong"),QDo=o("data2vec-text"),HDo=o(" \u2014 "),ZO=a("a"),UDo=o("Data2VecTextForTokenClassification"),JDo=o(" (Data2VecText model)"),YDo=l(),I2=a("li"),the=a("strong"),KDo=o("deberta"),ZDo=o(" \u2014 "),eV=a("a"),eGo=o("DebertaForTokenClassification"),oGo=o(" (DeBERTa model)"),rGo=l(),q2=a("li"),ahe=a("strong"),tGo=o("deberta-v2"),aGo=o(" \u2014 "),oV=a("a"),nGo=o("DebertaV2ForTokenClassification"),sGo=o(" (DeBERTa-v2 model)"),lGo=l(),N2=a("li"),nhe=a("strong"),iGo=o("distilbert"),dGo=o(" \u2014 "),rV=a("a"),cGo=o("DistilBertForTokenClassification"),fGo=o(" (DistilBERT model)"),mGo=l(),j2=a("li"),she=a("strong"),gGo=o("electra"),hGo=o(" \u2014 "),tV=a("a"),pGo=o("ElectraForTokenClassification"),uGo=o(" (ELECTRA model)"),_Go=l(),D2=a("li"),lhe=a("strong"),bGo=o("flaubert"),vGo=o(" \u2014 "),aV=a("a"),FGo=o("FlaubertForTokenClassification"),TGo=o(" (FlauBERT model)"),MGo=l(),G2=a("li"),ihe=a("strong"),EGo=o("fnet"),CGo=o(" \u2014 "),nV=a("a"),wGo=o("FNetForTokenClassification"),AGo=o(" (FNet model)"),yGo=l(),O2=a("li"),dhe=a("strong"),LGo=o("funnel"),xGo=o(" \u2014 "),sV=a("a"),$Go=o("FunnelForTokenClassification"),kGo=o(" (Funnel Transformer model)"),SGo=l(),V2=a("li"),che=a("strong"),RGo=o("gpt2"),PGo=o(" \u2014 "),lV=a("a"),BGo=o("GPT2ForTokenClassification"),IGo=o(" (OpenAI GPT-2 model)"),qGo=l(),X2=a("li"),fhe=a("strong"),NGo=o("ibert"),jGo=o(" \u2014 "),iV=a("a"),DGo=o("IBertForTokenClassification"),GGo=o(" (I-BERT model)"),OGo=l(),z2=a("li"),mhe=a("strong"),VGo=o("layoutlm"),XGo=o(" \u2014 "),dV=a("a"),zGo=o("LayoutLMForTokenClassification"),WGo=o(" (LayoutLM model)"),QGo=l(),W2=a("li"),ghe=a("strong"),HGo=o("layoutlmv2"),UGo=o(" \u2014 "),cV=a("a"),JGo=o("LayoutLMv2ForTokenClassification"),YGo=o(" (LayoutLMv2 model)"),KGo=l(),Q2=a("li"),hhe=a("strong"),ZGo=o("layoutlmv3"),eOo=o(" \u2014 "),fV=a("a"),oOo=o("LayoutLMv3ForTokenClassification"),rOo=o(" (LayoutLMv3 model)"),tOo=l(),H2=a("li"),phe=a("strong"),aOo=o("longformer"),nOo=o(" \u2014 "),mV=a("a"),sOo=o("LongformerForTokenClassification"),lOo=o(" (Longformer model)"),iOo=l(),U2=a("li"),uhe=a("strong"),dOo=o("megatron-bert"),cOo=o(" \u2014 "),gV=a("a"),fOo=o("MegatronBertForTokenClassification"),mOo=o(" (MegatronBert model)"),gOo=l(),J2=a("li"),_he=a("strong"),hOo=o("mobilebert"),pOo=o(" \u2014 "),hV=a("a"),uOo=o("MobileBertForTokenClassification"),_Oo=o(" (MobileBERT model)"),bOo=l(),Y2=a("li"),bhe=a("strong"),vOo=o("mpnet"),FOo=o(" \u2014 "),pV=a("a"),TOo=o("MPNetForTokenClassification"),MOo=o(" (MPNet model)"),EOo=l(),K2=a("li"),vhe=a("strong"),COo=o("nystromformer"),wOo=o(" \u2014 "),uV=a("a"),AOo=o("NystromformerForTokenClassification"),yOo=o(" (Nystromformer model)"),LOo=l(),Z2=a("li"),Fhe=a("strong"),xOo=o("qdqbert"),$Oo=o(" \u2014 "),_V=a("a"),kOo=o("QDQBertForTokenClassification"),SOo=o(" (QDQBert model)"),ROo=l(),e4=a("li"),The=a("strong"),POo=o("rembert"),BOo=o(" \u2014 "),bV=a("a"),IOo=o("RemBertForTokenClassification"),qOo=o(" (RemBERT model)"),NOo=l(),o4=a("li"),Mhe=a("strong"),jOo=o("roberta"),DOo=o(" \u2014 "),vV=a("a"),GOo=o("RobertaForTokenClassification"),OOo=o(" (RoBERTa model)"),VOo=l(),r4=a("li"),Ehe=a("strong"),XOo=o("roformer"),zOo=o(" \u2014 "),FV=a("a"),WOo=o("RoFormerForTokenClassification"),QOo=o(" (RoFormer model)"),HOo=l(),t4=a("li"),Che=a("strong"),UOo=o("squeezebert"),JOo=o(" \u2014 "),TV=a("a"),YOo=o("SqueezeBertForTokenClassification"),KOo=o(" (SqueezeBERT model)"),ZOo=l(),a4=a("li"),whe=a("strong"),eVo=o("xlm"),oVo=o(" \u2014 "),MV=a("a"),rVo=o("XLMForTokenClassification"),tVo=o(" (XLM model)"),aVo=l(),n4=a("li"),Ahe=a("strong"),nVo=o("xlm-roberta"),sVo=o(" \u2014 "),EV=a("a"),lVo=o("XLMRobertaForTokenClassification"),iVo=o(" (XLM-RoBERTa model)"),dVo=l(),s4=a("li"),yhe=a("strong"),cVo=o("xlm-roberta-xl"),fVo=o(" \u2014 "),CV=a("a"),mVo=o("XLMRobertaXLForTokenClassification"),gVo=o(" (XLM-RoBERTa-XL model)"),hVo=l(),l4=a("li"),Lhe=a("strong"),pVo=o("xlnet"),uVo=o(" \u2014 "),wV=a("a"),_Vo=o("XLNetForTokenClassification"),bVo=o(" (XLNet model)"),vVo=l(),i4=a("li"),xhe=a("strong"),FVo=o("yoso"),TVo=o(" \u2014 "),AV=a("a"),MVo=o("YosoForTokenClassification"),EVo=o(" (YOSO model)"),CVo=l(),d4=a("p"),wVo=o("The model is set in evaluation mode by default using "),$he=a("code"),AVo=o("model.eval()"),yVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=a("code"),LVo=o("model.train()"),xVo=l(),F(c4.$$.fragment),RNe=l(),Ki=a("h2"),f4=a("a"),She=a("span"),F(zA.$$.fragment),$Vo=l(),Rhe=a("span"),kVo=o("AutoModelForQuestionAnswering"),PNe=l(),qo=a("div"),F(WA.$$.fragment),SVo=l(),Zi=a("p"),RVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yV=a("a"),PVo=o("from_pretrained()"),BVo=o(" class method or the "),LV=a("a"),IVo=o("from_config()"),qVo=o(` class
method.`),NVo=l(),QA=a("p"),jVo=o("This class cannot be instantiated directly using "),Phe=a("code"),DVo=o("__init__()"),GVo=o(" (throws an error)."),OVo=l(),mt=a("div"),F(HA.$$.fragment),VVo=l(),Bhe=a("p"),XVo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zVo=l(),ed=a("p"),WVo=o(`Note:
Loading a model from its configuration file does `),Ihe=a("strong"),QVo=o("not"),HVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=a("a"),UVo=o("from_pretrained()"),JVo=o(" to load the model weights."),YVo=l(),F(m4.$$.fragment),KVo=l(),no=a("div"),F(UA.$$.fragment),ZVo=l(),qhe=a("p"),eXo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oXo=l(),qa=a("p"),rXo=o("The model class to instantiate is selected based on the "),Nhe=a("code"),tXo=o("model_type"),aXo=o(` property of the config object (either
passed as an argument or loaded from `),jhe=a("code"),nXo=o("pretrained_model_name_or_path"),sXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=a("code"),lXo=o("pretrained_model_name_or_path"),iXo=o(":"),dXo=l(),V=a("ul"),g4=a("li"),Ghe=a("strong"),cXo=o("albert"),fXo=o(" \u2014 "),$V=a("a"),mXo=o("AlbertForQuestionAnswering"),gXo=o(" (ALBERT model)"),hXo=l(),h4=a("li"),Ohe=a("strong"),pXo=o("bart"),uXo=o(" \u2014 "),kV=a("a"),_Xo=o("BartForQuestionAnswering"),bXo=o(" (BART model)"),vXo=l(),p4=a("li"),Vhe=a("strong"),FXo=o("bert"),TXo=o(" \u2014 "),SV=a("a"),MXo=o("BertForQuestionAnswering"),EXo=o(" (BERT model)"),CXo=l(),u4=a("li"),Xhe=a("strong"),wXo=o("big_bird"),AXo=o(" \u2014 "),RV=a("a"),yXo=o("BigBirdForQuestionAnswering"),LXo=o(" (BigBird model)"),xXo=l(),_4=a("li"),zhe=a("strong"),$Xo=o("bigbird_pegasus"),kXo=o(" \u2014 "),PV=a("a"),SXo=o("BigBirdPegasusForQuestionAnswering"),RXo=o(" (BigBirdPegasus model)"),PXo=l(),b4=a("li"),Whe=a("strong"),BXo=o("camembert"),IXo=o(" \u2014 "),BV=a("a"),qXo=o("CamembertForQuestionAnswering"),NXo=o(" (CamemBERT model)"),jXo=l(),v4=a("li"),Qhe=a("strong"),DXo=o("canine"),GXo=o(" \u2014 "),IV=a("a"),OXo=o("CanineForQuestionAnswering"),VXo=o(" (Canine model)"),XXo=l(),F4=a("li"),Hhe=a("strong"),zXo=o("convbert"),WXo=o(" \u2014 "),qV=a("a"),QXo=o("ConvBertForQuestionAnswering"),HXo=o(" (ConvBERT model)"),UXo=l(),T4=a("li"),Uhe=a("strong"),JXo=o("data2vec-text"),YXo=o(" \u2014 "),NV=a("a"),KXo=o("Data2VecTextForQuestionAnswering"),ZXo=o(" (Data2VecText model)"),ezo=l(),M4=a("li"),Jhe=a("strong"),ozo=o("deberta"),rzo=o(" \u2014 "),jV=a("a"),tzo=o("DebertaForQuestionAnswering"),azo=o(" (DeBERTa model)"),nzo=l(),E4=a("li"),Yhe=a("strong"),szo=o("deberta-v2"),lzo=o(" \u2014 "),DV=a("a"),izo=o("DebertaV2ForQuestionAnswering"),dzo=o(" (DeBERTa-v2 model)"),czo=l(),C4=a("li"),Khe=a("strong"),fzo=o("distilbert"),mzo=o(" \u2014 "),GV=a("a"),gzo=o("DistilBertForQuestionAnswering"),hzo=o(" (DistilBERT model)"),pzo=l(),w4=a("li"),Zhe=a("strong"),uzo=o("electra"),_zo=o(" \u2014 "),OV=a("a"),bzo=o("ElectraForQuestionAnswering"),vzo=o(" (ELECTRA model)"),Fzo=l(),A4=a("li"),epe=a("strong"),Tzo=o("flaubert"),Mzo=o(" \u2014 "),VV=a("a"),Ezo=o("FlaubertForQuestionAnsweringSimple"),Czo=o(" (FlauBERT model)"),wzo=l(),y4=a("li"),ope=a("strong"),Azo=o("fnet"),yzo=o(" \u2014 "),XV=a("a"),Lzo=o("FNetForQuestionAnswering"),xzo=o(" (FNet model)"),$zo=l(),L4=a("li"),rpe=a("strong"),kzo=o("funnel"),Szo=o(" \u2014 "),zV=a("a"),Rzo=o("FunnelForQuestionAnswering"),Pzo=o(" (Funnel Transformer model)"),Bzo=l(),x4=a("li"),tpe=a("strong"),Izo=o("gptj"),qzo=o(" \u2014 "),WV=a("a"),Nzo=o("GPTJForQuestionAnswering"),jzo=o(" (GPT-J model)"),Dzo=l(),$4=a("li"),ape=a("strong"),Gzo=o("ibert"),Ozo=o(" \u2014 "),QV=a("a"),Vzo=o("IBertForQuestionAnswering"),Xzo=o(" (I-BERT model)"),zzo=l(),k4=a("li"),npe=a("strong"),Wzo=o("layoutlmv2"),Qzo=o(" \u2014 "),HV=a("a"),Hzo=o("LayoutLMv2ForQuestionAnswering"),Uzo=o(" (LayoutLMv2 model)"),Jzo=l(),S4=a("li"),spe=a("strong"),Yzo=o("layoutlmv3"),Kzo=o(" \u2014 "),UV=a("a"),Zzo=o("LayoutLMv3ForQuestionAnswering"),eWo=o(" (LayoutLMv3 model)"),oWo=l(),R4=a("li"),lpe=a("strong"),rWo=o("led"),tWo=o(" \u2014 "),JV=a("a"),aWo=o("LEDForQuestionAnswering"),nWo=o(" (LED model)"),sWo=l(),P4=a("li"),ipe=a("strong"),lWo=o("longformer"),iWo=o(" \u2014 "),YV=a("a"),dWo=o("LongformerForQuestionAnswering"),cWo=o(" (Longformer model)"),fWo=l(),B4=a("li"),dpe=a("strong"),mWo=o("lxmert"),gWo=o(" \u2014 "),KV=a("a"),hWo=o("LxmertForQuestionAnswering"),pWo=o(" (LXMERT model)"),uWo=l(),I4=a("li"),cpe=a("strong"),_Wo=o("mbart"),bWo=o(" \u2014 "),ZV=a("a"),vWo=o("MBartForQuestionAnswering"),FWo=o(" (mBART model)"),TWo=l(),q4=a("li"),fpe=a("strong"),MWo=o("megatron-bert"),EWo=o(" \u2014 "),eX=a("a"),CWo=o("MegatronBertForQuestionAnswering"),wWo=o(" (MegatronBert model)"),AWo=l(),N4=a("li"),mpe=a("strong"),yWo=o("mobilebert"),LWo=o(" \u2014 "),oX=a("a"),xWo=o("MobileBertForQuestionAnswering"),$Wo=o(" (MobileBERT model)"),kWo=l(),j4=a("li"),gpe=a("strong"),SWo=o("mpnet"),RWo=o(" \u2014 "),rX=a("a"),PWo=o("MPNetForQuestionAnswering"),BWo=o(" (MPNet model)"),IWo=l(),D4=a("li"),hpe=a("strong"),qWo=o("nystromformer"),NWo=o(" \u2014 "),tX=a("a"),jWo=o("NystromformerForQuestionAnswering"),DWo=o(" (Nystromformer model)"),GWo=l(),G4=a("li"),ppe=a("strong"),OWo=o("qdqbert"),VWo=o(" \u2014 "),aX=a("a"),XWo=o("QDQBertForQuestionAnswering"),zWo=o(" (QDQBert model)"),WWo=l(),O4=a("li"),upe=a("strong"),QWo=o("reformer"),HWo=o(" \u2014 "),nX=a("a"),UWo=o("ReformerForQuestionAnswering"),JWo=o(" (Reformer model)"),YWo=l(),V4=a("li"),_pe=a("strong"),KWo=o("rembert"),ZWo=o(" \u2014 "),sX=a("a"),eQo=o("RemBertForQuestionAnswering"),oQo=o(" (RemBERT model)"),rQo=l(),X4=a("li"),bpe=a("strong"),tQo=o("roberta"),aQo=o(" \u2014 "),lX=a("a"),nQo=o("RobertaForQuestionAnswering"),sQo=o(" (RoBERTa model)"),lQo=l(),z4=a("li"),vpe=a("strong"),iQo=o("roformer"),dQo=o(" \u2014 "),iX=a("a"),cQo=o("RoFormerForQuestionAnswering"),fQo=o(" (RoFormer model)"),mQo=l(),W4=a("li"),Fpe=a("strong"),gQo=o("splinter"),hQo=o(" \u2014 "),dX=a("a"),pQo=o("SplinterForQuestionAnswering"),uQo=o(" (Splinter model)"),_Qo=l(),Q4=a("li"),Tpe=a("strong"),bQo=o("squeezebert"),vQo=o(" \u2014 "),cX=a("a"),FQo=o("SqueezeBertForQuestionAnswering"),TQo=o(" (SqueezeBERT model)"),MQo=l(),H4=a("li"),Mpe=a("strong"),EQo=o("xlm"),CQo=o(" \u2014 "),fX=a("a"),wQo=o("XLMForQuestionAnsweringSimple"),AQo=o(" (XLM model)"),yQo=l(),U4=a("li"),Epe=a("strong"),LQo=o("xlm-roberta"),xQo=o(" \u2014 "),mX=a("a"),$Qo=o("XLMRobertaForQuestionAnswering"),kQo=o(" (XLM-RoBERTa model)"),SQo=l(),J4=a("li"),Cpe=a("strong"),RQo=o("xlm-roberta-xl"),PQo=o(" \u2014 "),gX=a("a"),BQo=o("XLMRobertaXLForQuestionAnswering"),IQo=o(" (XLM-RoBERTa-XL model)"),qQo=l(),Y4=a("li"),wpe=a("strong"),NQo=o("xlnet"),jQo=o(" \u2014 "),hX=a("a"),DQo=o("XLNetForQuestionAnsweringSimple"),GQo=o(" (XLNet model)"),OQo=l(),K4=a("li"),Ape=a("strong"),VQo=o("yoso"),XQo=o(" \u2014 "),pX=a("a"),zQo=o("YosoForQuestionAnswering"),WQo=o(" (YOSO model)"),QQo=l(),Z4=a("p"),HQo=o("The model is set in evaluation mode by default using "),ype=a("code"),UQo=o("model.eval()"),JQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lpe=a("code"),YQo=o("model.train()"),KQo=l(),F(ev.$$.fragment),BNe=l(),od=a("h2"),ov=a("a"),xpe=a("span"),F(JA.$$.fragment),ZQo=l(),$pe=a("span"),eHo=o("AutoModelForTableQuestionAnswering"),INe=l(),No=a("div"),F(YA.$$.fragment),oHo=l(),rd=a("p"),rHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uX=a("a"),tHo=o("from_pretrained()"),aHo=o(" class method or the "),_X=a("a"),nHo=o("from_config()"),sHo=o(` class
method.`),lHo=l(),KA=a("p"),iHo=o("This class cannot be instantiated directly using "),kpe=a("code"),dHo=o("__init__()"),cHo=o(" (throws an error)."),fHo=l(),gt=a("div"),F(ZA.$$.fragment),mHo=l(),Spe=a("p"),gHo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hHo=l(),td=a("p"),pHo=o(`Note:
Loading a model from its configuration file does `),Rpe=a("strong"),uHo=o("not"),_Ho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=a("a"),bHo=o("from_pretrained()"),vHo=o(" to load the model weights."),FHo=l(),F(rv.$$.fragment),THo=l(),so=a("div"),F(ey.$$.fragment),MHo=l(),Ppe=a("p"),EHo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),CHo=l(),Na=a("p"),wHo=o("The model class to instantiate is selected based on the "),Bpe=a("code"),AHo=o("model_type"),yHo=o(` property of the config object (either
passed as an argument or loaded from `),Ipe=a("code"),LHo=o("pretrained_model_name_or_path"),xHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=a("code"),$Ho=o("pretrained_model_name_or_path"),kHo=o(":"),SHo=l(),Npe=a("ul"),tv=a("li"),jpe=a("strong"),RHo=o("tapas"),PHo=o(" \u2014 "),vX=a("a"),BHo=o("TapasForQuestionAnswering"),IHo=o(" (TAPAS model)"),qHo=l(),av=a("p"),NHo=o("The model is set in evaluation mode by default using "),Dpe=a("code"),jHo=o("model.eval()"),DHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=a("code"),GHo=o("model.train()"),OHo=l(),F(nv.$$.fragment),qNe=l(),ad=a("h2"),sv=a("a"),Ope=a("span"),F(oy.$$.fragment),VHo=l(),Vpe=a("span"),XHo=o("AutoModelForImageClassification"),NNe=l(),jo=a("div"),F(ry.$$.fragment),zHo=l(),nd=a("p"),WHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FX=a("a"),QHo=o("from_pretrained()"),HHo=o(" class method or the "),TX=a("a"),UHo=o("from_config()"),JHo=o(` class
method.`),YHo=l(),ty=a("p"),KHo=o("This class cannot be instantiated directly using "),Xpe=a("code"),ZHo=o("__init__()"),eUo=o(" (throws an error)."),oUo=l(),ht=a("div"),F(ay.$$.fragment),rUo=l(),zpe=a("p"),tUo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aUo=l(),sd=a("p"),nUo=o(`Note:
Loading a model from its configuration file does `),Wpe=a("strong"),sUo=o("not"),lUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),iUo=o("from_pretrained()"),dUo=o(" to load the model weights."),cUo=l(),F(lv.$$.fragment),fUo=l(),lo=a("div"),F(ny.$$.fragment),mUo=l(),Qpe=a("p"),gUo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hUo=l(),ja=a("p"),pUo=o("The model class to instantiate is selected based on the "),Hpe=a("code"),uUo=o("model_type"),_Uo=o(` property of the config object (either
passed as an argument or loaded from `),Upe=a("code"),bUo=o("pretrained_model_name_or_path"),vUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=a("code"),FUo=o("pretrained_model_name_or_path"),TUo=o(":"),MUo=l(),Fe=a("ul"),iv=a("li"),Ype=a("strong"),EUo=o("beit"),CUo=o(" \u2014 "),EX=a("a"),wUo=o("BeitForImageClassification"),AUo=o(" (BEiT model)"),yUo=l(),dv=a("li"),Kpe=a("strong"),LUo=o("convnext"),xUo=o(" \u2014 "),CX=a("a"),$Uo=o("ConvNextForImageClassification"),kUo=o(" (ConvNext model)"),SUo=l(),cv=a("li"),Zpe=a("strong"),RUo=o("cvt"),PUo=o(" \u2014 "),wX=a("a"),BUo=o("CvtForImageClassification"),IUo=o(" (CvT model)"),qUo=l(),fv=a("li"),eue=a("strong"),NUo=o("data2vec-vision"),jUo=o(" \u2014 "),AX=a("a"),DUo=o("Data2VecVisionForImageClassification"),GUo=o(" (Data2VecVision model)"),OUo=l(),Bs=a("li"),oue=a("strong"),VUo=o("deit"),XUo=o(" \u2014 "),yX=a("a"),zUo=o("DeiTForImageClassification"),WUo=o(" or "),LX=a("a"),QUo=o("DeiTForImageClassificationWithTeacher"),HUo=o(" (DeiT model)"),UUo=l(),mv=a("li"),rue=a("strong"),JUo=o("imagegpt"),YUo=o(" \u2014 "),xX=a("a"),KUo=o("ImageGPTForImageClassification"),ZUo=o(" (ImageGPT model)"),eJo=l(),pt=a("li"),tue=a("strong"),oJo=o("perceiver"),rJo=o(" \u2014 "),$X=a("a"),tJo=o("PerceiverForImageClassificationLearned"),aJo=o(" or "),kX=a("a"),nJo=o("PerceiverForImageClassificationFourier"),sJo=o(" or "),SX=a("a"),lJo=o("PerceiverForImageClassificationConvProcessing"),iJo=o(" (Perceiver model)"),dJo=l(),gv=a("li"),aue=a("strong"),cJo=o("poolformer"),fJo=o(" \u2014 "),RX=a("a"),mJo=o("PoolFormerForImageClassification"),gJo=o(" (PoolFormer model)"),hJo=l(),hv=a("li"),nue=a("strong"),pJo=o("regnet"),uJo=o(" \u2014 "),PX=a("a"),_Jo=o("RegNetForImageClassification"),bJo=o(" (RegNet model)"),vJo=l(),pv=a("li"),sue=a("strong"),FJo=o("resnet"),TJo=o(" \u2014 "),BX=a("a"),MJo=o("ResNetForImageClassification"),EJo=o(" (ResNet model)"),CJo=l(),uv=a("li"),lue=a("strong"),wJo=o("segformer"),AJo=o(" \u2014 "),IX=a("a"),yJo=o("SegformerForImageClassification"),LJo=o(" (SegFormer model)"),xJo=l(),_v=a("li"),iue=a("strong"),$Jo=o("swin"),kJo=o(" \u2014 "),qX=a("a"),SJo=o("SwinForImageClassification"),RJo=o(" (Swin model)"),PJo=l(),bv=a("li"),due=a("strong"),BJo=o("van"),IJo=o(" \u2014 "),NX=a("a"),qJo=o("VanForImageClassification"),NJo=o(" (VAN model)"),jJo=l(),vv=a("li"),cue=a("strong"),DJo=o("vit"),GJo=o(" \u2014 "),jX=a("a"),OJo=o("ViTForImageClassification"),VJo=o(" (ViT model)"),XJo=l(),Fv=a("p"),zJo=o("The model is set in evaluation mode by default using "),fue=a("code"),WJo=o("model.eval()"),QJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mue=a("code"),HJo=o("model.train()"),UJo=l(),F(Tv.$$.fragment),jNe=l(),ld=a("h2"),Mv=a("a"),gue=a("span"),F(sy.$$.fragment),JJo=l(),hue=a("span"),YJo=o("AutoModelForVision2Seq"),DNe=l(),Do=a("div"),F(ly.$$.fragment),KJo=l(),id=a("p"),ZJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DX=a("a"),eYo=o("from_pretrained()"),oYo=o(" class method or the "),GX=a("a"),rYo=o("from_config()"),tYo=o(` class
method.`),aYo=l(),iy=a("p"),nYo=o("This class cannot be instantiated directly using "),pue=a("code"),sYo=o("__init__()"),lYo=o(" (throws an error)."),iYo=l(),ut=a("div"),F(dy.$$.fragment),dYo=l(),uue=a("p"),cYo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fYo=l(),dd=a("p"),mYo=o(`Note:
Loading a model from its configuration file does `),_ue=a("strong"),gYo=o("not"),hYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),pYo=o("from_pretrained()"),uYo=o(" to load the model weights."),_Yo=l(),F(Ev.$$.fragment),bYo=l(),io=a("div"),F(cy.$$.fragment),vYo=l(),bue=a("p"),FYo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),TYo=l(),Da=a("p"),MYo=o("The model class to instantiate is selected based on the "),vue=a("code"),EYo=o("model_type"),CYo=o(` property of the config object (either
passed as an argument or loaded from `),Fue=a("code"),wYo=o("pretrained_model_name_or_path"),AYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=a("code"),yYo=o("pretrained_model_name_or_path"),LYo=o(":"),xYo=l(),Mue=a("ul"),Cv=a("li"),Eue=a("strong"),$Yo=o("vision-encoder-decoder"),kYo=o(" \u2014 "),VX=a("a"),SYo=o("VisionEncoderDecoderModel"),RYo=o(" (Vision Encoder decoder model)"),PYo=l(),wv=a("p"),BYo=o("The model is set in evaluation mode by default using "),Cue=a("code"),IYo=o("model.eval()"),qYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=a("code"),NYo=o("model.train()"),jYo=l(),F(Av.$$.fragment),GNe=l(),cd=a("h2"),yv=a("a"),Aue=a("span"),F(fy.$$.fragment),DYo=l(),yue=a("span"),GYo=o("AutoModelForAudioClassification"),ONe=l(),Go=a("div"),F(my.$$.fragment),OYo=l(),fd=a("p"),VYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),XX=a("a"),XYo=o("from_pretrained()"),zYo=o(" class method or the "),zX=a("a"),WYo=o("from_config()"),QYo=o(` class
method.`),HYo=l(),gy=a("p"),UYo=o("This class cannot be instantiated directly using "),Lue=a("code"),JYo=o("__init__()"),YYo=o(" (throws an error)."),KYo=l(),_t=a("div"),F(hy.$$.fragment),ZYo=l(),xue=a("p"),eKo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),oKo=l(),md=a("p"),rKo=o(`Note:
Loading a model from its configuration file does `),$ue=a("strong"),tKo=o("not"),aKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),nKo=o("from_pretrained()"),sKo=o(" to load the model weights."),lKo=l(),F(Lv.$$.fragment),iKo=l(),co=a("div"),F(py.$$.fragment),dKo=l(),kue=a("p"),cKo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),fKo=l(),Ga=a("p"),mKo=o("The model class to instantiate is selected based on the "),Sue=a("code"),gKo=o("model_type"),hKo=o(` property of the config object (either
passed as an argument or loaded from `),Rue=a("code"),pKo=o("pretrained_model_name_or_path"),uKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=a("code"),_Ko=o("pretrained_model_name_or_path"),bKo=o(":"),vKo=l(),ke=a("ul"),xv=a("li"),Bue=a("strong"),FKo=o("data2vec-audio"),TKo=o(" \u2014 "),QX=a("a"),MKo=o("Data2VecAudioForSequenceClassification"),EKo=o(" (Data2VecAudio model)"),CKo=l(),$v=a("li"),Iue=a("strong"),wKo=o("hubert"),AKo=o(" \u2014 "),HX=a("a"),yKo=o("HubertForSequenceClassification"),LKo=o(" (Hubert model)"),xKo=l(),kv=a("li"),que=a("strong"),$Ko=o("sew"),kKo=o(" \u2014 "),UX=a("a"),SKo=o("SEWForSequenceClassification"),RKo=o(" (SEW model)"),PKo=l(),Sv=a("li"),Nue=a("strong"),BKo=o("sew-d"),IKo=o(" \u2014 "),JX=a("a"),qKo=o("SEWDForSequenceClassification"),NKo=o(" (SEW-D model)"),jKo=l(),Rv=a("li"),jue=a("strong"),DKo=o("unispeech"),GKo=o(" \u2014 "),YX=a("a"),OKo=o("UniSpeechForSequenceClassification"),VKo=o(" (UniSpeech model)"),XKo=l(),Pv=a("li"),Due=a("strong"),zKo=o("unispeech-sat"),WKo=o(" \u2014 "),KX=a("a"),QKo=o("UniSpeechSatForSequenceClassification"),HKo=o(" (UniSpeechSat model)"),UKo=l(),Bv=a("li"),Gue=a("strong"),JKo=o("wav2vec2"),YKo=o(" \u2014 "),ZX=a("a"),KKo=o("Wav2Vec2ForSequenceClassification"),ZKo=o(" (Wav2Vec2 model)"),eZo=l(),Iv=a("li"),Oue=a("strong"),oZo=o("wav2vec2-conformer"),rZo=o(" \u2014 "),ez=a("a"),tZo=o("Wav2Vec2ConformerForSequenceClassification"),aZo=o(" (Wav2Vec2-Conformer model)"),nZo=l(),qv=a("li"),Vue=a("strong"),sZo=o("wavlm"),lZo=o(" \u2014 "),oz=a("a"),iZo=o("WavLMForSequenceClassification"),dZo=o(" (WavLM model)"),cZo=l(),Nv=a("p"),fZo=o("The model is set in evaluation mode by default using "),Xue=a("code"),mZo=o("model.eval()"),gZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=a("code"),hZo=o("model.train()"),pZo=l(),F(jv.$$.fragment),VNe=l(),gd=a("h2"),Dv=a("a"),Wue=a("span"),F(uy.$$.fragment),uZo=l(),Que=a("span"),_Zo=o("AutoModelForAudioFrameClassification"),XNe=l(),Oo=a("div"),F(_y.$$.fragment),bZo=l(),hd=a("p"),vZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rz=a("a"),FZo=o("from_pretrained()"),TZo=o(" class method or the "),tz=a("a"),MZo=o("from_config()"),EZo=o(` class
method.`),CZo=l(),by=a("p"),wZo=o("This class cannot be instantiated directly using "),Hue=a("code"),AZo=o("__init__()"),yZo=o(" (throws an error)."),LZo=l(),bt=a("div"),F(vy.$$.fragment),xZo=l(),Uue=a("p"),$Zo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),kZo=l(),pd=a("p"),SZo=o(`Note:
Loading a model from its configuration file does `),Jue=a("strong"),RZo=o("not"),PZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),az=a("a"),BZo=o("from_pretrained()"),IZo=o(" to load the model weights."),qZo=l(),F(Gv.$$.fragment),NZo=l(),fo=a("div"),F(Fy.$$.fragment),jZo=l(),Yue=a("p"),DZo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),GZo=l(),Oa=a("p"),OZo=o("The model class to instantiate is selected based on the "),Kue=a("code"),VZo=o("model_type"),XZo=o(` property of the config object (either
passed as an argument or loaded from `),Zue=a("code"),zZo=o("pretrained_model_name_or_path"),WZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=a("code"),QZo=o("pretrained_model_name_or_path"),HZo=o(":"),UZo=l(),Kr=a("ul"),Ov=a("li"),o_e=a("strong"),JZo=o("data2vec-audio"),YZo=o(" \u2014 "),nz=a("a"),KZo=o("Data2VecAudioForAudioFrameClassification"),ZZo=o(" (Data2VecAudio model)"),eer=l(),Vv=a("li"),r_e=a("strong"),oer=o("unispeech-sat"),rer=o(" \u2014 "),sz=a("a"),ter=o("UniSpeechSatForAudioFrameClassification"),aer=o(" (UniSpeechSat model)"),ner=l(),Xv=a("li"),t_e=a("strong"),ser=o("wav2vec2"),ler=o(" \u2014 "),lz=a("a"),ier=o("Wav2Vec2ForAudioFrameClassification"),der=o(" (Wav2Vec2 model)"),cer=l(),zv=a("li"),a_e=a("strong"),fer=o("wav2vec2-conformer"),mer=o(" \u2014 "),iz=a("a"),ger=o("Wav2Vec2ConformerForAudioFrameClassification"),her=o(" (Wav2Vec2-Conformer model)"),per=l(),Wv=a("li"),n_e=a("strong"),uer=o("wavlm"),_er=o(" \u2014 "),dz=a("a"),ber=o("WavLMForAudioFrameClassification"),ver=o(" (WavLM model)"),Fer=l(),Qv=a("p"),Ter=o("The model is set in evaluation mode by default using "),s_e=a("code"),Mer=o("model.eval()"),Eer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=a("code"),Cer=o("model.train()"),wer=l(),F(Hv.$$.fragment),zNe=l(),ud=a("h2"),Uv=a("a"),i_e=a("span"),F(Ty.$$.fragment),Aer=l(),d_e=a("span"),yer=o("AutoModelForCTC"),WNe=l(),Vo=a("div"),F(My.$$.fragment),Ler=l(),_d=a("p"),xer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cz=a("a"),$er=o("from_pretrained()"),ker=o(" class method or the "),fz=a("a"),Ser=o("from_config()"),Rer=o(` class
method.`),Per=l(),Ey=a("p"),Ber=o("This class cannot be instantiated directly using "),c_e=a("code"),Ier=o("__init__()"),qer=o(" (throws an error)."),Ner=l(),vt=a("div"),F(Cy.$$.fragment),jer=l(),f_e=a("p"),Der=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Ger=l(),bd=a("p"),Oer=o(`Note:
Loading a model from its configuration file does `),m_e=a("strong"),Ver=o("not"),Xer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=a("a"),zer=o("from_pretrained()"),Wer=o(" to load the model weights."),Qer=l(),F(Jv.$$.fragment),Her=l(),mo=a("div"),F(wy.$$.fragment),Uer=l(),g_e=a("p"),Jer=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Yer=l(),Va=a("p"),Ker=o("The model class to instantiate is selected based on the "),h_e=a("code"),Zer=o("model_type"),eor=o(` property of the config object (either
passed as an argument or loaded from `),p_e=a("code"),oor=o("pretrained_model_name_or_path"),ror=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=a("code"),tor=o("pretrained_model_name_or_path"),aor=o(":"),nor=l(),Se=a("ul"),Yv=a("li"),__e=a("strong"),sor=o("data2vec-audio"),lor=o(" \u2014 "),gz=a("a"),ior=o("Data2VecAudioForCTC"),dor=o(" (Data2VecAudio model)"),cor=l(),Kv=a("li"),b_e=a("strong"),mor=o("hubert"),gor=o(" \u2014 "),hz=a("a"),hor=o("HubertForCTC"),por=o(" (Hubert model)"),uor=l(),Zv=a("li"),v_e=a("strong"),_or=o("sew"),bor=o(" \u2014 "),pz=a("a"),vor=o("SEWForCTC"),For=o(" (SEW model)"),Tor=l(),eF=a("li"),F_e=a("strong"),Mor=o("sew-d"),Eor=o(" \u2014 "),uz=a("a"),Cor=o("SEWDForCTC"),wor=o(" (SEW-D model)"),Aor=l(),oF=a("li"),T_e=a("strong"),yor=o("unispeech"),Lor=o(" \u2014 "),_z=a("a"),xor=o("UniSpeechForCTC"),$or=o(" (UniSpeech model)"),kor=l(),rF=a("li"),M_e=a("strong"),Sor=o("unispeech-sat"),Ror=o(" \u2014 "),bz=a("a"),Por=o("UniSpeechSatForCTC"),Bor=o(" (UniSpeechSat model)"),Ior=l(),tF=a("li"),E_e=a("strong"),qor=o("wav2vec2"),Nor=o(" \u2014 "),vz=a("a"),jor=o("Wav2Vec2ForCTC"),Dor=o(" (Wav2Vec2 model)"),Gor=l(),aF=a("li"),C_e=a("strong"),Oor=o("wav2vec2-conformer"),Vor=o(" \u2014 "),Fz=a("a"),Xor=o("Wav2Vec2ConformerForCTC"),zor=o(" (Wav2Vec2-Conformer model)"),Wor=l(),nF=a("li"),w_e=a("strong"),Qor=o("wavlm"),Hor=o(" \u2014 "),Tz=a("a"),Uor=o("WavLMForCTC"),Jor=o(" (WavLM model)"),Yor=l(),sF=a("p"),Kor=o("The model is set in evaluation mode by default using "),A_e=a("code"),Zor=o("model.eval()"),err=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y_e=a("code"),orr=o("model.train()"),rrr=l(),F(lF.$$.fragment),QNe=l(),vd=a("h2"),iF=a("a"),L_e=a("span"),F(Ay.$$.fragment),trr=l(),x_e=a("span"),arr=o("AutoModelForSpeechSeq2Seq"),HNe=l(),Xo=a("div"),F(yy.$$.fragment),nrr=l(),Fd=a("p"),srr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Mz=a("a"),lrr=o("from_pretrained()"),irr=o(" class method or the "),Ez=a("a"),drr=o("from_config()"),crr=o(` class
method.`),frr=l(),Ly=a("p"),mrr=o("This class cannot be instantiated directly using "),$_e=a("code"),grr=o("__init__()"),hrr=o(" (throws an error)."),prr=l(),Ft=a("div"),F(xy.$$.fragment),urr=l(),k_e=a("p"),_rr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),brr=l(),Td=a("p"),vrr=o(`Note:
Loading a model from its configuration file does `),S_e=a("strong"),Frr=o("not"),Trr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=a("a"),Mrr=o("from_pretrained()"),Err=o(" to load the model weights."),Crr=l(),F(dF.$$.fragment),wrr=l(),go=a("div"),F($y.$$.fragment),Arr=l(),R_e=a("p"),yrr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Lrr=l(),Xa=a("p"),xrr=o("The model class to instantiate is selected based on the "),P_e=a("code"),$rr=o("model_type"),krr=o(` property of the config object (either
passed as an argument or loaded from `),B_e=a("code"),Srr=o("pretrained_model_name_or_path"),Rrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=a("code"),Prr=o("pretrained_model_name_or_path"),Brr=o(":"),Irr=l(),ky=a("ul"),cF=a("li"),q_e=a("strong"),qrr=o("speech-encoder-decoder"),Nrr=o(" \u2014 "),wz=a("a"),jrr=o("SpeechEncoderDecoderModel"),Drr=o(" (Speech Encoder decoder model)"),Grr=l(),fF=a("li"),N_e=a("strong"),Orr=o("speech_to_text"),Vrr=o(" \u2014 "),Az=a("a"),Xrr=o("Speech2TextForConditionalGeneration"),zrr=o(" (Speech2Text model)"),Wrr=l(),mF=a("p"),Qrr=o("The model is set in evaluation mode by default using "),j_e=a("code"),Hrr=o("model.eval()"),Urr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=a("code"),Jrr=o("model.train()"),Yrr=l(),F(gF.$$.fragment),UNe=l(),Md=a("h2"),hF=a("a"),G_e=a("span"),F(Sy.$$.fragment),Krr=l(),O_e=a("span"),Zrr=o("AutoModelForAudioXVector"),JNe=l(),zo=a("div"),F(Ry.$$.fragment),etr=l(),Ed=a("p"),otr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yz=a("a"),rtr=o("from_pretrained()"),ttr=o(" class method or the "),Lz=a("a"),atr=o("from_config()"),ntr=o(` class
method.`),str=l(),Py=a("p"),ltr=o("This class cannot be instantiated directly using "),V_e=a("code"),itr=o("__init__()"),dtr=o(" (throws an error)."),ctr=l(),Tt=a("div"),F(By.$$.fragment),ftr=l(),X_e=a("p"),mtr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),gtr=l(),Cd=a("p"),htr=o(`Note:
Loading a model from its configuration file does `),z_e=a("strong"),ptr=o("not"),utr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=a("a"),_tr=o("from_pretrained()"),btr=o(" to load the model weights."),vtr=l(),F(pF.$$.fragment),Ftr=l(),ho=a("div"),F(Iy.$$.fragment),Ttr=l(),W_e=a("p"),Mtr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Etr=l(),za=a("p"),Ctr=o("The model class to instantiate is selected based on the "),Q_e=a("code"),wtr=o("model_type"),Atr=o(` property of the config object (either
passed as an argument or loaded from `),H_e=a("code"),ytr=o("pretrained_model_name_or_path"),Ltr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=a("code"),xtr=o("pretrained_model_name_or_path"),$tr=o(":"),ktr=l(),Zr=a("ul"),uF=a("li"),J_e=a("strong"),Str=o("data2vec-audio"),Rtr=o(" \u2014 "),$z=a("a"),Ptr=o("Data2VecAudioForXVector"),Btr=o(" (Data2VecAudio model)"),Itr=l(),_F=a("li"),Y_e=a("strong"),qtr=o("unispeech-sat"),Ntr=o(" \u2014 "),kz=a("a"),jtr=o("UniSpeechSatForXVector"),Dtr=o(" (UniSpeechSat model)"),Gtr=l(),bF=a("li"),K_e=a("strong"),Otr=o("wav2vec2"),Vtr=o(" \u2014 "),Sz=a("a"),Xtr=o("Wav2Vec2ForXVector"),ztr=o(" (Wav2Vec2 model)"),Wtr=l(),vF=a("li"),Z_e=a("strong"),Qtr=o("wav2vec2-conformer"),Htr=o(" \u2014 "),Rz=a("a"),Utr=o("Wav2Vec2ConformerForXVector"),Jtr=o(" (Wav2Vec2-Conformer model)"),Ytr=l(),FF=a("li"),e1e=a("strong"),Ktr=o("wavlm"),Ztr=o(" \u2014 "),Pz=a("a"),ear=o("WavLMForXVector"),oar=o(" (WavLM model)"),rar=l(),TF=a("p"),tar=o("The model is set in evaluation mode by default using "),o1e=a("code"),aar=o("model.eval()"),nar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r1e=a("code"),sar=o("model.train()"),lar=l(),F(MF.$$.fragment),YNe=l(),wd=a("h2"),EF=a("a"),t1e=a("span"),F(qy.$$.fragment),iar=l(),a1e=a("span"),dar=o("AutoModelForMaskedImageModeling"),KNe=l(),Wo=a("div"),F(Ny.$$.fragment),car=l(),Ad=a("p"),far=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Bz=a("a"),mar=o("from_pretrained()"),gar=o(" class method or the "),Iz=a("a"),har=o("from_config()"),par=o(` class
method.`),uar=l(),jy=a("p"),_ar=o("This class cannot be instantiated directly using "),n1e=a("code"),bar=o("__init__()"),Far=o(" (throws an error)."),Tar=l(),Mt=a("div"),F(Dy.$$.fragment),Mar=l(),s1e=a("p"),Ear=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Car=l(),yd=a("p"),war=o(`Note:
Loading a model from its configuration file does `),l1e=a("strong"),Aar=o("not"),yar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=a("a"),Lar=o("from_pretrained()"),xar=o(" to load the model weights."),$ar=l(),F(CF.$$.fragment),kar=l(),po=a("div"),F(Gy.$$.fragment),Sar=l(),i1e=a("p"),Rar=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Par=l(),Wa=a("p"),Bar=o("The model class to instantiate is selected based on the "),d1e=a("code"),Iar=o("model_type"),qar=o(` property of the config object (either
passed as an argument or loaded from `),c1e=a("code"),Nar=o("pretrained_model_name_or_path"),jar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=a("code"),Dar=o("pretrained_model_name_or_path"),Gar=o(":"),Oar=l(),Ld=a("ul"),wF=a("li"),m1e=a("strong"),Var=o("deit"),Xar=o(" \u2014 "),Nz=a("a"),zar=o("DeiTForMaskedImageModeling"),War=o(" (DeiT model)"),Qar=l(),AF=a("li"),g1e=a("strong"),Har=o("swin"),Uar=o(" \u2014 "),jz=a("a"),Jar=o("SwinForMaskedImageModeling"),Yar=o(" (Swin model)"),Kar=l(),yF=a("li"),h1e=a("strong"),Zar=o("vit"),enr=o(" \u2014 "),Dz=a("a"),onr=o("ViTForMaskedImageModeling"),rnr=o(" (ViT model)"),tnr=l(),LF=a("p"),anr=o("The model is set in evaluation mode by default using "),p1e=a("code"),nnr=o("model.eval()"),snr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=a("code"),lnr=o("model.train()"),inr=l(),F(xF.$$.fragment),ZNe=l(),xd=a("h2"),$F=a("a"),_1e=a("span"),F(Oy.$$.fragment),dnr=l(),b1e=a("span"),cnr=o("AutoModelForObjectDetection"),eje=l(),Qo=a("div"),F(Vy.$$.fragment),fnr=l(),$d=a("p"),mnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Gz=a("a"),gnr=o("from_pretrained()"),hnr=o(" class method or the "),Oz=a("a"),pnr=o("from_config()"),unr=o(` class
method.`),_nr=l(),Xy=a("p"),bnr=o("This class cannot be instantiated directly using "),v1e=a("code"),vnr=o("__init__()"),Fnr=o(" (throws an error)."),Tnr=l(),Et=a("div"),F(zy.$$.fragment),Mnr=l(),F1e=a("p"),Enr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Cnr=l(),kd=a("p"),wnr=o(`Note:
Loading a model from its configuration file does `),T1e=a("strong"),Anr=o("not"),ynr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),Lnr=o("from_pretrained()"),xnr=o(" to load the model weights."),$nr=l(),F(kF.$$.fragment),knr=l(),uo=a("div"),F(Wy.$$.fragment),Snr=l(),M1e=a("p"),Rnr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Pnr=l(),Qa=a("p"),Bnr=o("The model class to instantiate is selected based on the "),E1e=a("code"),Inr=o("model_type"),qnr=o(` property of the config object (either
passed as an argument or loaded from `),C1e=a("code"),Nnr=o("pretrained_model_name_or_path"),jnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=a("code"),Dnr=o("pretrained_model_name_or_path"),Gnr=o(":"),Onr=l(),Qy=a("ul"),SF=a("li"),A1e=a("strong"),Vnr=o("detr"),Xnr=o(" \u2014 "),Xz=a("a"),znr=o("DetrForObjectDetection"),Wnr=o(" (DETR model)"),Qnr=l(),RF=a("li"),y1e=a("strong"),Hnr=o("yolos"),Unr=o(" \u2014 "),zz=a("a"),Jnr=o("YolosForObjectDetection"),Ynr=o(" (YOLOS model)"),Knr=l(),PF=a("p"),Znr=o("The model is set in evaluation mode by default using "),L1e=a("code"),esr=o("model.eval()"),osr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x1e=a("code"),rsr=o("model.train()"),tsr=l(),F(BF.$$.fragment),oje=l(),Sd=a("h2"),IF=a("a"),$1e=a("span"),F(Hy.$$.fragment),asr=l(),k1e=a("span"),nsr=o("AutoModelForImageSegmentation"),rje=l(),Ho=a("div"),F(Uy.$$.fragment),ssr=l(),Rd=a("p"),lsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Wz=a("a"),isr=o("from_pretrained()"),dsr=o(" class method or the "),Qz=a("a"),csr=o("from_config()"),fsr=o(` class
method.`),msr=l(),Jy=a("p"),gsr=o("This class cannot be instantiated directly using "),S1e=a("code"),hsr=o("__init__()"),psr=o(" (throws an error)."),usr=l(),Ct=a("div"),F(Yy.$$.fragment),_sr=l(),R1e=a("p"),bsr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),vsr=l(),Pd=a("p"),Fsr=o(`Note:
Loading a model from its configuration file does `),P1e=a("strong"),Tsr=o("not"),Msr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=a("a"),Esr=o("from_pretrained()"),Csr=o(" to load the model weights."),wsr=l(),F(qF.$$.fragment),Asr=l(),_o=a("div"),F(Ky.$$.fragment),ysr=l(),B1e=a("p"),Lsr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),xsr=l(),Ha=a("p"),$sr=o("The model class to instantiate is selected based on the "),I1e=a("code"),ksr=o("model_type"),Ssr=o(` property of the config object (either
passed as an argument or loaded from `),q1e=a("code"),Rsr=o("pretrained_model_name_or_path"),Psr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=a("code"),Bsr=o("pretrained_model_name_or_path"),Isr=o(":"),qsr=l(),j1e=a("ul"),NF=a("li"),D1e=a("strong"),Nsr=o("detr"),jsr=o(" \u2014 "),Uz=a("a"),Dsr=o("DetrForSegmentation"),Gsr=o(" (DETR model)"),Osr=l(),jF=a("p"),Vsr=o("The model is set in evaluation mode by default using "),G1e=a("code"),Xsr=o("model.eval()"),zsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O1e=a("code"),Wsr=o("model.train()"),Qsr=l(),F(DF.$$.fragment),tje=l(),Bd=a("h2"),GF=a("a"),V1e=a("span"),F(Zy.$$.fragment),Hsr=l(),X1e=a("span"),Usr=o("AutoModelForSemanticSegmentation"),aje=l(),Uo=a("div"),F(eL.$$.fragment),Jsr=l(),Id=a("p"),Ysr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Jz=a("a"),Ksr=o("from_pretrained()"),Zsr=o(" class method or the "),Yz=a("a"),elr=o("from_config()"),olr=o(` class
method.`),rlr=l(),oL=a("p"),tlr=o("This class cannot be instantiated directly using "),z1e=a("code"),alr=o("__init__()"),nlr=o(" (throws an error)."),slr=l(),wt=a("div"),F(rL.$$.fragment),llr=l(),W1e=a("p"),ilr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),dlr=l(),qd=a("p"),clr=o(`Note:
Loading a model from its configuration file does `),Q1e=a("strong"),flr=o("not"),mlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=a("a"),glr=o("from_pretrained()"),hlr=o(" to load the model weights."),plr=l(),F(OF.$$.fragment),ulr=l(),bo=a("div"),F(tL.$$.fragment),_lr=l(),H1e=a("p"),blr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),vlr=l(),Ua=a("p"),Flr=o("The model class to instantiate is selected based on the "),U1e=a("code"),Tlr=o("model_type"),Mlr=o(` property of the config object (either
passed as an argument or loaded from `),J1e=a("code"),Elr=o("pretrained_model_name_or_path"),Clr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=a("code"),wlr=o("pretrained_model_name_or_path"),Alr=o(":"),ylr=l(),Ja=a("ul"),VF=a("li"),K1e=a("strong"),Llr=o("beit"),xlr=o(" \u2014 "),Zz=a("a"),$lr=o("BeitForSemanticSegmentation"),klr=o(" (BEiT model)"),Slr=l(),XF=a("li"),Z1e=a("strong"),Rlr=o("data2vec-vision"),Plr=o(" \u2014 "),eW=a("a"),Blr=o("Data2VecVisionForSemanticSegmentation"),Ilr=o(" (Data2VecVision model)"),qlr=l(),zF=a("li"),e9e=a("strong"),Nlr=o("dpt"),jlr=o(" \u2014 "),oW=a("a"),Dlr=o("DPTForSemanticSegmentation"),Glr=o(" (DPT model)"),Olr=l(),WF=a("li"),o9e=a("strong"),Vlr=o("segformer"),Xlr=o(" \u2014 "),rW=a("a"),zlr=o("SegformerForSemanticSegmentation"),Wlr=o(" (SegFormer model)"),Qlr=l(),QF=a("p"),Hlr=o("The model is set in evaluation mode by default using "),r9e=a("code"),Ulr=o("model.eval()"),Jlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t9e=a("code"),Ylr=o("model.train()"),Klr=l(),F(HF.$$.fragment),nje=l(),Nd=a("h2"),UF=a("a"),a9e=a("span"),F(aL.$$.fragment),Zlr=l(),n9e=a("span"),eir=o("AutoModelForInstanceSegmentation"),sje=l(),Jo=a("div"),F(nL.$$.fragment),oir=l(),jd=a("p"),rir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),tW=a("a"),tir=o("from_pretrained()"),air=o(" class method or the "),aW=a("a"),nir=o("from_config()"),sir=o(` class
method.`),lir=l(),sL=a("p"),iir=o("This class cannot be instantiated directly using "),s9e=a("code"),dir=o("__init__()"),cir=o(" (throws an error)."),fir=l(),At=a("div"),F(lL.$$.fragment),mir=l(),l9e=a("p"),gir=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),hir=l(),Dd=a("p"),pir=o(`Note:
Loading a model from its configuration file does `),i9e=a("strong"),uir=o("not"),_ir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=a("a"),bir=o("from_pretrained()"),vir=o(" to load the model weights."),Fir=l(),F(JF.$$.fragment),Tir=l(),vo=a("div"),F(iL.$$.fragment),Mir=l(),d9e=a("p"),Eir=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Cir=l(),Ya=a("p"),wir=o("The model class to instantiate is selected based on the "),c9e=a("code"),Air=o("model_type"),yir=o(` property of the config object (either
passed as an argument or loaded from `),f9e=a("code"),Lir=o("pretrained_model_name_or_path"),xir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m9e=a("code"),$ir=o("pretrained_model_name_or_path"),kir=o(":"),Sir=l(),g9e=a("ul"),YF=a("li"),h9e=a("strong"),Rir=o("maskformer"),Pir=o(" \u2014 "),sW=a("a"),Bir=o("MaskFormerForInstanceSegmentation"),Iir=o(" (MaskFormer model)"),qir=l(),KF=a("p"),Nir=o("The model is set in evaluation mode by default using "),p9e=a("code"),jir=o("model.eval()"),Dir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u9e=a("code"),Gir=o("model.train()"),Oir=l(),F(ZF.$$.fragment),lje=l(),Gd=a("h2"),eT=a("a"),_9e=a("span"),F(dL.$$.fragment),Vir=l(),b9e=a("span"),Xir=o("TFAutoModel"),ije=l(),Yo=a("div"),F(cL.$$.fragment),zir=l(),Od=a("p"),Wir=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lW=a("a"),Qir=o("from_pretrained()"),Hir=o(" class method or the "),iW=a("a"),Uir=o("from_config()"),Jir=o(` class
method.`),Yir=l(),fL=a("p"),Kir=o("This class cannot be instantiated directly using "),v9e=a("code"),Zir=o("__init__()"),edr=o(" (throws an error)."),odr=l(),yt=a("div"),F(mL.$$.fragment),rdr=l(),F9e=a("p"),tdr=o("Instantiates one of the base model classes of the library from a configuration."),adr=l(),Vd=a("p"),ndr=o(`Note:
Loading a model from its configuration file does `),T9e=a("strong"),sdr=o("not"),ldr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),idr=o("from_pretrained()"),ddr=o(" to load the model weights."),cdr=l(),F(oT.$$.fragment),fdr=l(),wr=a("div"),F(gL.$$.fragment),mdr=l(),M9e=a("p"),gdr=o("Instantiate one of the base model classes of the library from a pretrained model."),hdr=l(),Ka=a("p"),pdr=o("The model class to instantiate is selected based on the "),E9e=a("code"),udr=o("model_type"),_dr=o(` property of the config object (either
passed as an argument or loaded from `),C9e=a("code"),bdr=o("pretrained_model_name_or_path"),vdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w9e=a("code"),Fdr=o("pretrained_model_name_or_path"),Tdr=o(":"),Mdr=l(),N=a("ul"),rT=a("li"),A9e=a("strong"),Edr=o("albert"),Cdr=o(" \u2014 "),cW=a("a"),wdr=o("TFAlbertModel"),Adr=o(" (ALBERT model)"),ydr=l(),tT=a("li"),y9e=a("strong"),Ldr=o("bart"),xdr=o(" \u2014 "),fW=a("a"),$dr=o("TFBartModel"),kdr=o(" (BART model)"),Sdr=l(),aT=a("li"),L9e=a("strong"),Rdr=o("bert"),Pdr=o(" \u2014 "),mW=a("a"),Bdr=o("TFBertModel"),Idr=o(" (BERT model)"),qdr=l(),nT=a("li"),x9e=a("strong"),Ndr=o("blenderbot"),jdr=o(" \u2014 "),gW=a("a"),Ddr=o("TFBlenderbotModel"),Gdr=o(" (Blenderbot model)"),Odr=l(),sT=a("li"),$9e=a("strong"),Vdr=o("blenderbot-small"),Xdr=o(" \u2014 "),hW=a("a"),zdr=o("TFBlenderbotSmallModel"),Wdr=o(" (BlenderbotSmall model)"),Qdr=l(),lT=a("li"),k9e=a("strong"),Hdr=o("camembert"),Udr=o(" \u2014 "),pW=a("a"),Jdr=o("TFCamembertModel"),Ydr=o(" (CamemBERT model)"),Kdr=l(),iT=a("li"),S9e=a("strong"),Zdr=o("clip"),ecr=o(" \u2014 "),uW=a("a"),ocr=o("TFCLIPModel"),rcr=o(" (CLIP model)"),tcr=l(),dT=a("li"),R9e=a("strong"),acr=o("convbert"),ncr=o(" \u2014 "),_W=a("a"),scr=o("TFConvBertModel"),lcr=o(" (ConvBERT model)"),icr=l(),cT=a("li"),P9e=a("strong"),dcr=o("convnext"),ccr=o(" \u2014 "),bW=a("a"),fcr=o("TFConvNextModel"),mcr=o(" (ConvNext model)"),gcr=l(),fT=a("li"),B9e=a("strong"),hcr=o("ctrl"),pcr=o(" \u2014 "),vW=a("a"),ucr=o("TFCTRLModel"),_cr=o(" (CTRL model)"),bcr=l(),mT=a("li"),I9e=a("strong"),vcr=o("data2vec-vision"),Fcr=o(" \u2014 "),FW=a("a"),Tcr=o("TFData2VecVisionModel"),Mcr=o(" (Data2VecVision model)"),Ecr=l(),gT=a("li"),q9e=a("strong"),Ccr=o("deberta"),wcr=o(" \u2014 "),TW=a("a"),Acr=o("TFDebertaModel"),ycr=o(" (DeBERTa model)"),Lcr=l(),hT=a("li"),N9e=a("strong"),xcr=o("deberta-v2"),$cr=o(" \u2014 "),MW=a("a"),kcr=o("TFDebertaV2Model"),Scr=o(" (DeBERTa-v2 model)"),Rcr=l(),pT=a("li"),j9e=a("strong"),Pcr=o("distilbert"),Bcr=o(" \u2014 "),EW=a("a"),Icr=o("TFDistilBertModel"),qcr=o(" (DistilBERT model)"),Ncr=l(),uT=a("li"),D9e=a("strong"),jcr=o("dpr"),Dcr=o(" \u2014 "),CW=a("a"),Gcr=o("TFDPRQuestionEncoder"),Ocr=o(" (DPR model)"),Vcr=l(),_T=a("li"),G9e=a("strong"),Xcr=o("electra"),zcr=o(" \u2014 "),wW=a("a"),Wcr=o("TFElectraModel"),Qcr=o(" (ELECTRA model)"),Hcr=l(),bT=a("li"),O9e=a("strong"),Ucr=o("flaubert"),Jcr=o(" \u2014 "),AW=a("a"),Ycr=o("TFFlaubertModel"),Kcr=o(" (FlauBERT model)"),Zcr=l(),Is=a("li"),V9e=a("strong"),efr=o("funnel"),ofr=o(" \u2014 "),yW=a("a"),rfr=o("TFFunnelModel"),tfr=o(" or "),LW=a("a"),afr=o("TFFunnelBaseModel"),nfr=o(" (Funnel Transformer model)"),sfr=l(),vT=a("li"),X9e=a("strong"),lfr=o("gpt2"),ifr=o(" \u2014 "),xW=a("a"),dfr=o("TFGPT2Model"),cfr=o(" (OpenAI GPT-2 model)"),ffr=l(),FT=a("li"),z9e=a("strong"),mfr=o("gptj"),gfr=o(" \u2014 "),$W=a("a"),hfr=o("TFGPTJModel"),pfr=o(" (GPT-J model)"),ufr=l(),TT=a("li"),W9e=a("strong"),_fr=o("hubert"),bfr=o(" \u2014 "),kW=a("a"),vfr=o("TFHubertModel"),Ffr=o(" (Hubert model)"),Tfr=l(),MT=a("li"),Q9e=a("strong"),Mfr=o("layoutlm"),Efr=o(" \u2014 "),SW=a("a"),Cfr=o("TFLayoutLMModel"),wfr=o(" (LayoutLM model)"),Afr=l(),ET=a("li"),H9e=a("strong"),yfr=o("led"),Lfr=o(" \u2014 "),RW=a("a"),xfr=o("TFLEDModel"),$fr=o(" (LED model)"),kfr=l(),CT=a("li"),U9e=a("strong"),Sfr=o("longformer"),Rfr=o(" \u2014 "),PW=a("a"),Pfr=o("TFLongformerModel"),Bfr=o(" (Longformer model)"),Ifr=l(),wT=a("li"),J9e=a("strong"),qfr=o("lxmert"),Nfr=o(" \u2014 "),BW=a("a"),jfr=o("TFLxmertModel"),Dfr=o(" (LXMERT model)"),Gfr=l(),AT=a("li"),Y9e=a("strong"),Ofr=o("marian"),Vfr=o(" \u2014 "),IW=a("a"),Xfr=o("TFMarianModel"),zfr=o(" (Marian model)"),Wfr=l(),yT=a("li"),K9e=a("strong"),Qfr=o("mbart"),Hfr=o(" \u2014 "),qW=a("a"),Ufr=o("TFMBartModel"),Jfr=o(" (mBART model)"),Yfr=l(),LT=a("li"),Z9e=a("strong"),Kfr=o("mobilebert"),Zfr=o(" \u2014 "),NW=a("a"),emr=o("TFMobileBertModel"),omr=o(" (MobileBERT model)"),rmr=l(),xT=a("li"),ebe=a("strong"),tmr=o("mpnet"),amr=o(" \u2014 "),jW=a("a"),nmr=o("TFMPNetModel"),smr=o(" (MPNet model)"),lmr=l(),$T=a("li"),obe=a("strong"),imr=o("mt5"),dmr=o(" \u2014 "),DW=a("a"),cmr=o("TFMT5Model"),fmr=o(" (mT5 model)"),mmr=l(),kT=a("li"),rbe=a("strong"),gmr=o("openai-gpt"),hmr=o(" \u2014 "),GW=a("a"),pmr=o("TFOpenAIGPTModel"),umr=o(" (OpenAI GPT model)"),_mr=l(),ST=a("li"),tbe=a("strong"),bmr=o("pegasus"),vmr=o(" \u2014 "),OW=a("a"),Fmr=o("TFPegasusModel"),Tmr=o(" (Pegasus model)"),Mmr=l(),RT=a("li"),abe=a("strong"),Emr=o("rembert"),Cmr=o(" \u2014 "),VW=a("a"),wmr=o("TFRemBertModel"),Amr=o(" (RemBERT model)"),ymr=l(),PT=a("li"),nbe=a("strong"),Lmr=o("roberta"),xmr=o(" \u2014 "),XW=a("a"),$mr=o("TFRobertaModel"),kmr=o(" (RoBERTa model)"),Smr=l(),BT=a("li"),sbe=a("strong"),Rmr=o("roformer"),Pmr=o(" \u2014 "),zW=a("a"),Bmr=o("TFRoFormerModel"),Imr=o(" (RoFormer model)"),qmr=l(),IT=a("li"),lbe=a("strong"),Nmr=o("speech_to_text"),jmr=o(" \u2014 "),WW=a("a"),Dmr=o("TFSpeech2TextModel"),Gmr=o(" (Speech2Text model)"),Omr=l(),qT=a("li"),ibe=a("strong"),Vmr=o("swin"),Xmr=o(" \u2014 "),QW=a("a"),zmr=o("TFSwinModel"),Wmr=o(" (Swin model)"),Qmr=l(),NT=a("li"),dbe=a("strong"),Hmr=o("t5"),Umr=o(" \u2014 "),HW=a("a"),Jmr=o("TFT5Model"),Ymr=o(" (T5 model)"),Kmr=l(),jT=a("li"),cbe=a("strong"),Zmr=o("tapas"),egr=o(" \u2014 "),UW=a("a"),ogr=o("TFTapasModel"),rgr=o(" (TAPAS model)"),tgr=l(),DT=a("li"),fbe=a("strong"),agr=o("transfo-xl"),ngr=o(" \u2014 "),JW=a("a"),sgr=o("TFTransfoXLModel"),lgr=o(" (Transformer-XL model)"),igr=l(),GT=a("li"),mbe=a("strong"),dgr=o("vit"),cgr=o(" \u2014 "),YW=a("a"),fgr=o("TFViTModel"),mgr=o(" (ViT model)"),ggr=l(),OT=a("li"),gbe=a("strong"),hgr=o("vit_mae"),pgr=o(" \u2014 "),KW=a("a"),ugr=o("TFViTMAEModel"),_gr=o(" (ViTMAE model)"),bgr=l(),VT=a("li"),hbe=a("strong"),vgr=o("wav2vec2"),Fgr=o(" \u2014 "),ZW=a("a"),Tgr=o("TFWav2Vec2Model"),Mgr=o(" (Wav2Vec2 model)"),Egr=l(),XT=a("li"),pbe=a("strong"),Cgr=o("xlm"),wgr=o(" \u2014 "),eQ=a("a"),Agr=o("TFXLMModel"),ygr=o(" (XLM model)"),Lgr=l(),zT=a("li"),ube=a("strong"),xgr=o("xlm-roberta"),$gr=o(" \u2014 "),oQ=a("a"),kgr=o("TFXLMRobertaModel"),Sgr=o(" (XLM-RoBERTa model)"),Rgr=l(),WT=a("li"),_be=a("strong"),Pgr=o("xlnet"),Bgr=o(" \u2014 "),rQ=a("a"),Igr=o("TFXLNetModel"),qgr=o(" (XLNet model)"),Ngr=l(),F(QT.$$.fragment),dje=l(),Xd=a("h2"),HT=a("a"),bbe=a("span"),F(hL.$$.fragment),jgr=l(),vbe=a("span"),Dgr=o("TFAutoModelForPreTraining"),cje=l(),Ko=a("div"),F(pL.$$.fragment),Ggr=l(),zd=a("p"),Ogr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tQ=a("a"),Vgr=o("from_pretrained()"),Xgr=o(" class method or the "),aQ=a("a"),zgr=o("from_config()"),Wgr=o(` class
method.`),Qgr=l(),uL=a("p"),Hgr=o("This class cannot be instantiated directly using "),Fbe=a("code"),Ugr=o("__init__()"),Jgr=o(" (throws an error)."),Ygr=l(),Lt=a("div"),F(_L.$$.fragment),Kgr=l(),Tbe=a("p"),Zgr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ehr=l(),Wd=a("p"),ohr=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),rhr=o("not"),thr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=a("a"),ahr=o("from_pretrained()"),nhr=o(" to load the model weights."),shr=l(),F(UT.$$.fragment),lhr=l(),Ar=a("div"),F(bL.$$.fragment),ihr=l(),Ebe=a("p"),dhr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),chr=l(),Za=a("p"),fhr=o("The model class to instantiate is selected based on the "),Cbe=a("code"),mhr=o("model_type"),ghr=o(` property of the config object (either
passed as an argument or loaded from `),wbe=a("code"),hhr=o("pretrained_model_name_or_path"),phr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=a("code"),uhr=o("pretrained_model_name_or_path"),_hr=o(":"),bhr=l(),se=a("ul"),JT=a("li"),ybe=a("strong"),vhr=o("albert"),Fhr=o(" \u2014 "),sQ=a("a"),Thr=o("TFAlbertForPreTraining"),Mhr=o(" (ALBERT model)"),Ehr=l(),YT=a("li"),Lbe=a("strong"),Chr=o("bart"),whr=o(" \u2014 "),lQ=a("a"),Ahr=o("TFBartForConditionalGeneration"),yhr=o(" (BART model)"),Lhr=l(),KT=a("li"),xbe=a("strong"),xhr=o("bert"),$hr=o(" \u2014 "),iQ=a("a"),khr=o("TFBertForPreTraining"),Shr=o(" (BERT model)"),Rhr=l(),ZT=a("li"),$be=a("strong"),Phr=o("camembert"),Bhr=o(" \u2014 "),dQ=a("a"),Ihr=o("TFCamembertForMaskedLM"),qhr=o(" (CamemBERT model)"),Nhr=l(),e7=a("li"),kbe=a("strong"),jhr=o("ctrl"),Dhr=o(" \u2014 "),cQ=a("a"),Ghr=o("TFCTRLLMHeadModel"),Ohr=o(" (CTRL model)"),Vhr=l(),o7=a("li"),Sbe=a("strong"),Xhr=o("distilbert"),zhr=o(" \u2014 "),fQ=a("a"),Whr=o("TFDistilBertForMaskedLM"),Qhr=o(" (DistilBERT model)"),Hhr=l(),r7=a("li"),Rbe=a("strong"),Uhr=o("electra"),Jhr=o(" \u2014 "),mQ=a("a"),Yhr=o("TFElectraForPreTraining"),Khr=o(" (ELECTRA model)"),Zhr=l(),t7=a("li"),Pbe=a("strong"),epr=o("flaubert"),opr=o(" \u2014 "),gQ=a("a"),rpr=o("TFFlaubertWithLMHeadModel"),tpr=o(" (FlauBERT model)"),apr=l(),a7=a("li"),Bbe=a("strong"),npr=o("funnel"),spr=o(" \u2014 "),hQ=a("a"),lpr=o("TFFunnelForPreTraining"),ipr=o(" (Funnel Transformer model)"),dpr=l(),n7=a("li"),Ibe=a("strong"),cpr=o("gpt2"),fpr=o(" \u2014 "),pQ=a("a"),mpr=o("TFGPT2LMHeadModel"),gpr=o(" (OpenAI GPT-2 model)"),hpr=l(),s7=a("li"),qbe=a("strong"),ppr=o("layoutlm"),upr=o(" \u2014 "),uQ=a("a"),_pr=o("TFLayoutLMForMaskedLM"),bpr=o(" (LayoutLM model)"),vpr=l(),l7=a("li"),Nbe=a("strong"),Fpr=o("lxmert"),Tpr=o(" \u2014 "),_Q=a("a"),Mpr=o("TFLxmertForPreTraining"),Epr=o(" (LXMERT model)"),Cpr=l(),i7=a("li"),jbe=a("strong"),wpr=o("mobilebert"),Apr=o(" \u2014 "),bQ=a("a"),ypr=o("TFMobileBertForPreTraining"),Lpr=o(" (MobileBERT model)"),xpr=l(),d7=a("li"),Dbe=a("strong"),$pr=o("mpnet"),kpr=o(" \u2014 "),vQ=a("a"),Spr=o("TFMPNetForMaskedLM"),Rpr=o(" (MPNet model)"),Ppr=l(),c7=a("li"),Gbe=a("strong"),Bpr=o("openai-gpt"),Ipr=o(" \u2014 "),FQ=a("a"),qpr=o("TFOpenAIGPTLMHeadModel"),Npr=o(" (OpenAI GPT model)"),jpr=l(),f7=a("li"),Obe=a("strong"),Dpr=o("roberta"),Gpr=o(" \u2014 "),TQ=a("a"),Opr=o("TFRobertaForMaskedLM"),Vpr=o(" (RoBERTa model)"),Xpr=l(),m7=a("li"),Vbe=a("strong"),zpr=o("t5"),Wpr=o(" \u2014 "),MQ=a("a"),Qpr=o("TFT5ForConditionalGeneration"),Hpr=o(" (T5 model)"),Upr=l(),g7=a("li"),Xbe=a("strong"),Jpr=o("tapas"),Ypr=o(" \u2014 "),EQ=a("a"),Kpr=o("TFTapasForMaskedLM"),Zpr=o(" (TAPAS model)"),eur=l(),h7=a("li"),zbe=a("strong"),our=o("transfo-xl"),rur=o(" \u2014 "),CQ=a("a"),tur=o("TFTransfoXLLMHeadModel"),aur=o(" (Transformer-XL model)"),nur=l(),p7=a("li"),Wbe=a("strong"),sur=o("vit_mae"),lur=o(" \u2014 "),wQ=a("a"),iur=o("TFViTMAEForPreTraining"),dur=o(" (ViTMAE model)"),cur=l(),u7=a("li"),Qbe=a("strong"),fur=o("xlm"),mur=o(" \u2014 "),AQ=a("a"),gur=o("TFXLMWithLMHeadModel"),hur=o(" (XLM model)"),pur=l(),_7=a("li"),Hbe=a("strong"),uur=o("xlm-roberta"),_ur=o(" \u2014 "),yQ=a("a"),bur=o("TFXLMRobertaForMaskedLM"),vur=o(" (XLM-RoBERTa model)"),Fur=l(),b7=a("li"),Ube=a("strong"),Tur=o("xlnet"),Mur=o(" \u2014 "),LQ=a("a"),Eur=o("TFXLNetLMHeadModel"),Cur=o(" (XLNet model)"),wur=l(),F(v7.$$.fragment),fje=l(),Qd=a("h2"),F7=a("a"),Jbe=a("span"),F(vL.$$.fragment),Aur=l(),Ybe=a("span"),yur=o("TFAutoModelForCausalLM"),mje=l(),Zo=a("div"),F(FL.$$.fragment),Lur=l(),Hd=a("p"),xur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xQ=a("a"),$ur=o("from_pretrained()"),kur=o(" class method or the "),$Q=a("a"),Sur=o("from_config()"),Rur=o(` class
method.`),Pur=l(),TL=a("p"),Bur=o("This class cannot be instantiated directly using "),Kbe=a("code"),Iur=o("__init__()"),qur=o(" (throws an error)."),Nur=l(),xt=a("div"),F(ML.$$.fragment),jur=l(),Zbe=a("p"),Dur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Gur=l(),Ud=a("p"),Our=o(`Note:
Loading a model from its configuration file does `),e2e=a("strong"),Vur=o("not"),Xur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=a("a"),zur=o("from_pretrained()"),Wur=o(" to load the model weights."),Qur=l(),F(T7.$$.fragment),Hur=l(),yr=a("div"),F(EL.$$.fragment),Uur=l(),o2e=a("p"),Jur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Yur=l(),en=a("p"),Kur=o("The model class to instantiate is selected based on the "),r2e=a("code"),Zur=o("model_type"),e_r=o(` property of the config object (either
passed as an argument or loaded from `),t2e=a("code"),o_r=o("pretrained_model_name_or_path"),r_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a2e=a("code"),t_r=o("pretrained_model_name_or_path"),a_r=o(":"),n_r=l(),Me=a("ul"),M7=a("li"),n2e=a("strong"),s_r=o("bert"),l_r=o(" \u2014 "),SQ=a("a"),i_r=o("TFBertLMHeadModel"),d_r=o(" (BERT model)"),c_r=l(),E7=a("li"),s2e=a("strong"),f_r=o("camembert"),m_r=o(" \u2014 "),RQ=a("a"),g_r=o("TFCamembertForCausalLM"),h_r=o(" (CamemBERT model)"),p_r=l(),C7=a("li"),l2e=a("strong"),u_r=o("ctrl"),__r=o(" \u2014 "),PQ=a("a"),b_r=o("TFCTRLLMHeadModel"),v_r=o(" (CTRL model)"),F_r=l(),w7=a("li"),i2e=a("strong"),T_r=o("gpt2"),M_r=o(" \u2014 "),BQ=a("a"),E_r=o("TFGPT2LMHeadModel"),C_r=o(" (OpenAI GPT-2 model)"),w_r=l(),A7=a("li"),d2e=a("strong"),A_r=o("gptj"),y_r=o(" \u2014 "),IQ=a("a"),L_r=o("TFGPTJForCausalLM"),x_r=o(" (GPT-J model)"),$_r=l(),y7=a("li"),c2e=a("strong"),k_r=o("openai-gpt"),S_r=o(" \u2014 "),qQ=a("a"),R_r=o("TFOpenAIGPTLMHeadModel"),P_r=o(" (OpenAI GPT model)"),B_r=l(),L7=a("li"),f2e=a("strong"),I_r=o("rembert"),q_r=o(" \u2014 "),NQ=a("a"),N_r=o("TFRemBertForCausalLM"),j_r=o(" (RemBERT model)"),D_r=l(),x7=a("li"),m2e=a("strong"),G_r=o("roberta"),O_r=o(" \u2014 "),jQ=a("a"),V_r=o("TFRobertaForCausalLM"),X_r=o(" (RoBERTa model)"),z_r=l(),$7=a("li"),g2e=a("strong"),W_r=o("roformer"),Q_r=o(" \u2014 "),DQ=a("a"),H_r=o("TFRoFormerForCausalLM"),U_r=o(" (RoFormer model)"),J_r=l(),k7=a("li"),h2e=a("strong"),Y_r=o("transfo-xl"),K_r=o(" \u2014 "),GQ=a("a"),Z_r=o("TFTransfoXLLMHeadModel"),e1r=o(" (Transformer-XL model)"),o1r=l(),S7=a("li"),p2e=a("strong"),r1r=o("xlm"),t1r=o(" \u2014 "),OQ=a("a"),a1r=o("TFXLMWithLMHeadModel"),n1r=o(" (XLM model)"),s1r=l(),R7=a("li"),u2e=a("strong"),l1r=o("xlnet"),i1r=o(" \u2014 "),VQ=a("a"),d1r=o("TFXLNetLMHeadModel"),c1r=o(" (XLNet model)"),f1r=l(),F(P7.$$.fragment),gje=l(),Jd=a("h2"),B7=a("a"),_2e=a("span"),F(CL.$$.fragment),m1r=l(),b2e=a("span"),g1r=o("TFAutoModelForImageClassification"),hje=l(),er=a("div"),F(wL.$$.fragment),h1r=l(),Yd=a("p"),p1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),XQ=a("a"),u1r=o("from_pretrained()"),_1r=o(" class method or the "),zQ=a("a"),b1r=o("from_config()"),v1r=o(` class
method.`),F1r=l(),AL=a("p"),T1r=o("This class cannot be instantiated directly using "),v2e=a("code"),M1r=o("__init__()"),E1r=o(" (throws an error)."),C1r=l(),$t=a("div"),F(yL.$$.fragment),w1r=l(),F2e=a("p"),A1r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),y1r=l(),Kd=a("p"),L1r=o(`Note:
Loading a model from its configuration file does `),T2e=a("strong"),x1r=o("not"),$1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=a("a"),k1r=o("from_pretrained()"),S1r=o(" to load the model weights."),R1r=l(),F(I7.$$.fragment),P1r=l(),Lr=a("div"),F(LL.$$.fragment),B1r=l(),M2e=a("p"),I1r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),q1r=l(),on=a("p"),N1r=o("The model class to instantiate is selected based on the "),E2e=a("code"),j1r=o("model_type"),D1r=o(` property of the config object (either
passed as an argument or loaded from `),C2e=a("code"),G1r=o("pretrained_model_name_or_path"),O1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=a("code"),V1r=o("pretrained_model_name_or_path"),X1r=o(":"),z1r=l(),rn=a("ul"),q7=a("li"),A2e=a("strong"),W1r=o("convnext"),Q1r=o(" \u2014 "),QQ=a("a"),H1r=o("TFConvNextForImageClassification"),U1r=o(" (ConvNext model)"),J1r=l(),N7=a("li"),y2e=a("strong"),Y1r=o("data2vec-vision"),K1r=o(" \u2014 "),HQ=a("a"),Z1r=o("TFData2VecVisionForImageClassification"),e9r=o(" (Data2VecVision model)"),o9r=l(),j7=a("li"),L2e=a("strong"),r9r=o("swin"),t9r=o(" \u2014 "),UQ=a("a"),a9r=o("TFSwinForImageClassification"),n9r=o(" (Swin model)"),s9r=l(),D7=a("li"),x2e=a("strong"),l9r=o("vit"),i9r=o(" \u2014 "),JQ=a("a"),d9r=o("TFViTForImageClassification"),c9r=o(" (ViT model)"),f9r=l(),F(G7.$$.fragment),pje=l(),Zd=a("h2"),O7=a("a"),$2e=a("span"),F(xL.$$.fragment),m9r=l(),k2e=a("span"),g9r=o("TFAutoModelForMaskedLM"),uje=l(),or=a("div"),F($L.$$.fragment),h9r=l(),ec=a("p"),p9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),YQ=a("a"),u9r=o("from_pretrained()"),_9r=o(" class method or the "),KQ=a("a"),b9r=o("from_config()"),v9r=o(` class
method.`),F9r=l(),kL=a("p"),T9r=o("This class cannot be instantiated directly using "),S2e=a("code"),M9r=o("__init__()"),E9r=o(" (throws an error)."),C9r=l(),kt=a("div"),F(SL.$$.fragment),w9r=l(),R2e=a("p"),A9r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),y9r=l(),oc=a("p"),L9r=o(`Note:
Loading a model from its configuration file does `),P2e=a("strong"),x9r=o("not"),$9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=a("a"),k9r=o("from_pretrained()"),S9r=o(" to load the model weights."),R9r=l(),F(V7.$$.fragment),P9r=l(),xr=a("div"),F(RL.$$.fragment),B9r=l(),B2e=a("p"),I9r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),q9r=l(),tn=a("p"),N9r=o("The model class to instantiate is selected based on the "),I2e=a("code"),j9r=o("model_type"),D9r=o(` property of the config object (either
passed as an argument or loaded from `),q2e=a("code"),G9r=o("pretrained_model_name_or_path"),O9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=a("code"),V9r=o("pretrained_model_name_or_path"),X9r=o(":"),z9r=l(),ie=a("ul"),X7=a("li"),j2e=a("strong"),W9r=o("albert"),Q9r=o(" \u2014 "),eH=a("a"),H9r=o("TFAlbertForMaskedLM"),U9r=o(" (ALBERT model)"),J9r=l(),z7=a("li"),D2e=a("strong"),Y9r=o("bert"),K9r=o(" \u2014 "),oH=a("a"),Z9r=o("TFBertForMaskedLM"),ebr=o(" (BERT model)"),obr=l(),W7=a("li"),G2e=a("strong"),rbr=o("camembert"),tbr=o(" \u2014 "),rH=a("a"),abr=o("TFCamembertForMaskedLM"),nbr=o(" (CamemBERT model)"),sbr=l(),Q7=a("li"),O2e=a("strong"),lbr=o("convbert"),ibr=o(" \u2014 "),tH=a("a"),dbr=o("TFConvBertForMaskedLM"),cbr=o(" (ConvBERT model)"),fbr=l(),H7=a("li"),V2e=a("strong"),mbr=o("deberta"),gbr=o(" \u2014 "),aH=a("a"),hbr=o("TFDebertaForMaskedLM"),pbr=o(" (DeBERTa model)"),ubr=l(),U7=a("li"),X2e=a("strong"),_br=o("deberta-v2"),bbr=o(" \u2014 "),nH=a("a"),vbr=o("TFDebertaV2ForMaskedLM"),Fbr=o(" (DeBERTa-v2 model)"),Tbr=l(),J7=a("li"),z2e=a("strong"),Mbr=o("distilbert"),Ebr=o(" \u2014 "),sH=a("a"),Cbr=o("TFDistilBertForMaskedLM"),wbr=o(" (DistilBERT model)"),Abr=l(),Y7=a("li"),W2e=a("strong"),ybr=o("electra"),Lbr=o(" \u2014 "),lH=a("a"),xbr=o("TFElectraForMaskedLM"),$br=o(" (ELECTRA model)"),kbr=l(),K7=a("li"),Q2e=a("strong"),Sbr=o("flaubert"),Rbr=o(" \u2014 "),iH=a("a"),Pbr=o("TFFlaubertWithLMHeadModel"),Bbr=o(" (FlauBERT model)"),Ibr=l(),Z7=a("li"),H2e=a("strong"),qbr=o("funnel"),Nbr=o(" \u2014 "),dH=a("a"),jbr=o("TFFunnelForMaskedLM"),Dbr=o(" (Funnel Transformer model)"),Gbr=l(),eM=a("li"),U2e=a("strong"),Obr=o("layoutlm"),Vbr=o(" \u2014 "),cH=a("a"),Xbr=o("TFLayoutLMForMaskedLM"),zbr=o(" (LayoutLM model)"),Wbr=l(),oM=a("li"),J2e=a("strong"),Qbr=o("longformer"),Hbr=o(" \u2014 "),fH=a("a"),Ubr=o("TFLongformerForMaskedLM"),Jbr=o(" (Longformer model)"),Ybr=l(),rM=a("li"),Y2e=a("strong"),Kbr=o("mobilebert"),Zbr=o(" \u2014 "),mH=a("a"),e2r=o("TFMobileBertForMaskedLM"),o2r=o(" (MobileBERT model)"),r2r=l(),tM=a("li"),K2e=a("strong"),t2r=o("mpnet"),a2r=o(" \u2014 "),gH=a("a"),n2r=o("TFMPNetForMaskedLM"),s2r=o(" (MPNet model)"),l2r=l(),aM=a("li"),Z2e=a("strong"),i2r=o("rembert"),d2r=o(" \u2014 "),hH=a("a"),c2r=o("TFRemBertForMaskedLM"),f2r=o(" (RemBERT model)"),m2r=l(),nM=a("li"),e4e=a("strong"),g2r=o("roberta"),h2r=o(" \u2014 "),pH=a("a"),p2r=o("TFRobertaForMaskedLM"),u2r=o(" (RoBERTa model)"),_2r=l(),sM=a("li"),o4e=a("strong"),b2r=o("roformer"),v2r=o(" \u2014 "),uH=a("a"),F2r=o("TFRoFormerForMaskedLM"),T2r=o(" (RoFormer model)"),M2r=l(),lM=a("li"),r4e=a("strong"),E2r=o("tapas"),C2r=o(" \u2014 "),_H=a("a"),w2r=o("TFTapasForMaskedLM"),A2r=o(" (TAPAS model)"),y2r=l(),iM=a("li"),t4e=a("strong"),L2r=o("xlm"),x2r=o(" \u2014 "),bH=a("a"),$2r=o("TFXLMWithLMHeadModel"),k2r=o(" (XLM model)"),S2r=l(),dM=a("li"),a4e=a("strong"),R2r=o("xlm-roberta"),P2r=o(" \u2014 "),vH=a("a"),B2r=o("TFXLMRobertaForMaskedLM"),I2r=o(" (XLM-RoBERTa model)"),q2r=l(),F(cM.$$.fragment),_je=l(),rc=a("h2"),fM=a("a"),n4e=a("span"),F(PL.$$.fragment),N2r=l(),s4e=a("span"),j2r=o("TFAutoModelForSeq2SeqLM"),bje=l(),rr=a("div"),F(BL.$$.fragment),D2r=l(),tc=a("p"),G2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FH=a("a"),O2r=o("from_pretrained()"),V2r=o(" class method or the "),TH=a("a"),X2r=o("from_config()"),z2r=o(` class
method.`),W2r=l(),IL=a("p"),Q2r=o("This class cannot be instantiated directly using "),l4e=a("code"),H2r=o("__init__()"),U2r=o(" (throws an error)."),J2r=l(),St=a("div"),F(qL.$$.fragment),Y2r=l(),i4e=a("p"),K2r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Z2r=l(),ac=a("p"),e4r=o(`Note:
Loading a model from its configuration file does `),d4e=a("strong"),o4r=o("not"),r4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),t4r=o("from_pretrained()"),a4r=o(" to load the model weights."),n4r=l(),F(mM.$$.fragment),s4r=l(),$r=a("div"),F(NL.$$.fragment),l4r=l(),c4e=a("p"),i4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),d4r=l(),an=a("p"),c4r=o("The model class to instantiate is selected based on the "),f4e=a("code"),f4r=o("model_type"),m4r=o(` property of the config object (either
passed as an argument or loaded from `),m4e=a("code"),g4r=o("pretrained_model_name_or_path"),h4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g4e=a("code"),p4r=o("pretrained_model_name_or_path"),u4r=o(":"),_4r=l(),ye=a("ul"),gM=a("li"),h4e=a("strong"),b4r=o("bart"),v4r=o(" \u2014 "),EH=a("a"),F4r=o("TFBartForConditionalGeneration"),T4r=o(" (BART model)"),M4r=l(),hM=a("li"),p4e=a("strong"),E4r=o("blenderbot"),C4r=o(" \u2014 "),CH=a("a"),w4r=o("TFBlenderbotForConditionalGeneration"),A4r=o(" (Blenderbot model)"),y4r=l(),pM=a("li"),u4e=a("strong"),L4r=o("blenderbot-small"),x4r=o(" \u2014 "),wH=a("a"),$4r=o("TFBlenderbotSmallForConditionalGeneration"),k4r=o(" (BlenderbotSmall model)"),S4r=l(),uM=a("li"),_4e=a("strong"),R4r=o("encoder-decoder"),P4r=o(" \u2014 "),AH=a("a"),B4r=o("TFEncoderDecoderModel"),I4r=o(" (Encoder decoder model)"),q4r=l(),_M=a("li"),b4e=a("strong"),N4r=o("led"),j4r=o(" \u2014 "),yH=a("a"),D4r=o("TFLEDForConditionalGeneration"),G4r=o(" (LED model)"),O4r=l(),bM=a("li"),v4e=a("strong"),V4r=o("marian"),X4r=o(" \u2014 "),LH=a("a"),z4r=o("TFMarianMTModel"),W4r=o(" (Marian model)"),Q4r=l(),vM=a("li"),F4e=a("strong"),H4r=o("mbart"),U4r=o(" \u2014 "),xH=a("a"),J4r=o("TFMBartForConditionalGeneration"),Y4r=o(" (mBART model)"),K4r=l(),FM=a("li"),T4e=a("strong"),Z4r=o("mt5"),evr=o(" \u2014 "),$H=a("a"),ovr=o("TFMT5ForConditionalGeneration"),rvr=o(" (mT5 model)"),tvr=l(),TM=a("li"),M4e=a("strong"),avr=o("pegasus"),nvr=o(" \u2014 "),kH=a("a"),svr=o("TFPegasusForConditionalGeneration"),lvr=o(" (Pegasus model)"),ivr=l(),MM=a("li"),E4e=a("strong"),dvr=o("t5"),cvr=o(" \u2014 "),SH=a("a"),fvr=o("TFT5ForConditionalGeneration"),mvr=o(" (T5 model)"),gvr=l(),F(EM.$$.fragment),vje=l(),nc=a("h2"),CM=a("a"),C4e=a("span"),F(jL.$$.fragment),hvr=l(),w4e=a("span"),pvr=o("TFAutoModelForSequenceClassification"),Fje=l(),tr=a("div"),F(DL.$$.fragment),uvr=l(),sc=a("p"),_vr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),RH=a("a"),bvr=o("from_pretrained()"),vvr=o(" class method or the "),PH=a("a"),Fvr=o("from_config()"),Tvr=o(` class
method.`),Mvr=l(),GL=a("p"),Evr=o("This class cannot be instantiated directly using "),A4e=a("code"),Cvr=o("__init__()"),wvr=o(" (throws an error)."),Avr=l(),Rt=a("div"),F(OL.$$.fragment),yvr=l(),y4e=a("p"),Lvr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),xvr=l(),lc=a("p"),$vr=o(`Note:
Loading a model from its configuration file does `),L4e=a("strong"),kvr=o("not"),Svr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),Rvr=o("from_pretrained()"),Pvr=o(" to load the model weights."),Bvr=l(),F(wM.$$.fragment),Ivr=l(),kr=a("div"),F(VL.$$.fragment),qvr=l(),x4e=a("p"),Nvr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jvr=l(),nn=a("p"),Dvr=o("The model class to instantiate is selected based on the "),$4e=a("code"),Gvr=o("model_type"),Ovr=o(` property of the config object (either
passed as an argument or loaded from `),k4e=a("code"),Vvr=o("pretrained_model_name_or_path"),Xvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=a("code"),zvr=o("pretrained_model_name_or_path"),Wvr=o(":"),Qvr=l(),oe=a("ul"),AM=a("li"),R4e=a("strong"),Hvr=o("albert"),Uvr=o(" \u2014 "),IH=a("a"),Jvr=o("TFAlbertForSequenceClassification"),Yvr=o(" (ALBERT model)"),Kvr=l(),yM=a("li"),P4e=a("strong"),Zvr=o("bert"),eFr=o(" \u2014 "),qH=a("a"),oFr=o("TFBertForSequenceClassification"),rFr=o(" (BERT model)"),tFr=l(),LM=a("li"),B4e=a("strong"),aFr=o("camembert"),nFr=o(" \u2014 "),NH=a("a"),sFr=o("TFCamembertForSequenceClassification"),lFr=o(" (CamemBERT model)"),iFr=l(),xM=a("li"),I4e=a("strong"),dFr=o("convbert"),cFr=o(" \u2014 "),jH=a("a"),fFr=o("TFConvBertForSequenceClassification"),mFr=o(" (ConvBERT model)"),gFr=l(),$M=a("li"),q4e=a("strong"),hFr=o("ctrl"),pFr=o(" \u2014 "),DH=a("a"),uFr=o("TFCTRLForSequenceClassification"),_Fr=o(" (CTRL model)"),bFr=l(),kM=a("li"),N4e=a("strong"),vFr=o("deberta"),FFr=o(" \u2014 "),GH=a("a"),TFr=o("TFDebertaForSequenceClassification"),MFr=o(" (DeBERTa model)"),EFr=l(),SM=a("li"),j4e=a("strong"),CFr=o("deberta-v2"),wFr=o(" \u2014 "),OH=a("a"),AFr=o("TFDebertaV2ForSequenceClassification"),yFr=o(" (DeBERTa-v2 model)"),LFr=l(),RM=a("li"),D4e=a("strong"),xFr=o("distilbert"),$Fr=o(" \u2014 "),VH=a("a"),kFr=o("TFDistilBertForSequenceClassification"),SFr=o(" (DistilBERT model)"),RFr=l(),PM=a("li"),G4e=a("strong"),PFr=o("electra"),BFr=o(" \u2014 "),XH=a("a"),IFr=o("TFElectraForSequenceClassification"),qFr=o(" (ELECTRA model)"),NFr=l(),BM=a("li"),O4e=a("strong"),jFr=o("flaubert"),DFr=o(" \u2014 "),zH=a("a"),GFr=o("TFFlaubertForSequenceClassification"),OFr=o(" (FlauBERT model)"),VFr=l(),IM=a("li"),V4e=a("strong"),XFr=o("funnel"),zFr=o(" \u2014 "),WH=a("a"),WFr=o("TFFunnelForSequenceClassification"),QFr=o(" (Funnel Transformer model)"),HFr=l(),qM=a("li"),X4e=a("strong"),UFr=o("gpt2"),JFr=o(" \u2014 "),QH=a("a"),YFr=o("TFGPT2ForSequenceClassification"),KFr=o(" (OpenAI GPT-2 model)"),ZFr=l(),NM=a("li"),z4e=a("strong"),eTr=o("gptj"),oTr=o(" \u2014 "),HH=a("a"),rTr=o("TFGPTJForSequenceClassification"),tTr=o(" (GPT-J model)"),aTr=l(),jM=a("li"),W4e=a("strong"),nTr=o("layoutlm"),sTr=o(" \u2014 "),UH=a("a"),lTr=o("TFLayoutLMForSequenceClassification"),iTr=o(" (LayoutLM model)"),dTr=l(),DM=a("li"),Q4e=a("strong"),cTr=o("longformer"),fTr=o(" \u2014 "),JH=a("a"),mTr=o("TFLongformerForSequenceClassification"),gTr=o(" (Longformer model)"),hTr=l(),GM=a("li"),H4e=a("strong"),pTr=o("mobilebert"),uTr=o(" \u2014 "),YH=a("a"),_Tr=o("TFMobileBertForSequenceClassification"),bTr=o(" (MobileBERT model)"),vTr=l(),OM=a("li"),U4e=a("strong"),FTr=o("mpnet"),TTr=o(" \u2014 "),KH=a("a"),MTr=o("TFMPNetForSequenceClassification"),ETr=o(" (MPNet model)"),CTr=l(),VM=a("li"),J4e=a("strong"),wTr=o("openai-gpt"),ATr=o(" \u2014 "),ZH=a("a"),yTr=o("TFOpenAIGPTForSequenceClassification"),LTr=o(" (OpenAI GPT model)"),xTr=l(),XM=a("li"),Y4e=a("strong"),$Tr=o("rembert"),kTr=o(" \u2014 "),eU=a("a"),STr=o("TFRemBertForSequenceClassification"),RTr=o(" (RemBERT model)"),PTr=l(),zM=a("li"),K4e=a("strong"),BTr=o("roberta"),ITr=o(" \u2014 "),oU=a("a"),qTr=o("TFRobertaForSequenceClassification"),NTr=o(" (RoBERTa model)"),jTr=l(),WM=a("li"),Z4e=a("strong"),DTr=o("roformer"),GTr=o(" \u2014 "),rU=a("a"),OTr=o("TFRoFormerForSequenceClassification"),VTr=o(" (RoFormer model)"),XTr=l(),QM=a("li"),eve=a("strong"),zTr=o("tapas"),WTr=o(" \u2014 "),tU=a("a"),QTr=o("TFTapasForSequenceClassification"),HTr=o(" (TAPAS model)"),UTr=l(),HM=a("li"),ove=a("strong"),JTr=o("transfo-xl"),YTr=o(" \u2014 "),aU=a("a"),KTr=o("TFTransfoXLForSequenceClassification"),ZTr=o(" (Transformer-XL model)"),e7r=l(),UM=a("li"),rve=a("strong"),o7r=o("xlm"),r7r=o(" \u2014 "),nU=a("a"),t7r=o("TFXLMForSequenceClassification"),a7r=o(" (XLM model)"),n7r=l(),JM=a("li"),tve=a("strong"),s7r=o("xlm-roberta"),l7r=o(" \u2014 "),sU=a("a"),i7r=o("TFXLMRobertaForSequenceClassification"),d7r=o(" (XLM-RoBERTa model)"),c7r=l(),YM=a("li"),ave=a("strong"),f7r=o("xlnet"),m7r=o(" \u2014 "),lU=a("a"),g7r=o("TFXLNetForSequenceClassification"),h7r=o(" (XLNet model)"),p7r=l(),F(KM.$$.fragment),Tje=l(),ic=a("h2"),ZM=a("a"),nve=a("span"),F(XL.$$.fragment),u7r=l(),sve=a("span"),_7r=o("TFAutoModelForMultipleChoice"),Mje=l(),ar=a("div"),F(zL.$$.fragment),b7r=l(),dc=a("p"),v7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iU=a("a"),F7r=o("from_pretrained()"),T7r=o(" class method or the "),dU=a("a"),M7r=o("from_config()"),E7r=o(` class
method.`),C7r=l(),WL=a("p"),w7r=o("This class cannot be instantiated directly using "),lve=a("code"),A7r=o("__init__()"),y7r=o(" (throws an error)."),L7r=l(),Pt=a("div"),F(QL.$$.fragment),x7r=l(),ive=a("p"),$7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),k7r=l(),cc=a("p"),S7r=o(`Note:
Loading a model from its configuration file does `),dve=a("strong"),R7r=o("not"),P7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=a("a"),B7r=o("from_pretrained()"),I7r=o(" to load the model weights."),q7r=l(),F(eE.$$.fragment),N7r=l(),Sr=a("div"),F(HL.$$.fragment),j7r=l(),cve=a("p"),D7r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),G7r=l(),sn=a("p"),O7r=o("The model class to instantiate is selected based on the "),fve=a("code"),V7r=o("model_type"),X7r=o(` property of the config object (either
passed as an argument or loaded from `),mve=a("code"),z7r=o("pretrained_model_name_or_path"),W7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=a("code"),Q7r=o("pretrained_model_name_or_path"),H7r=o(":"),U7r=l(),pe=a("ul"),oE=a("li"),hve=a("strong"),J7r=o("albert"),Y7r=o(" \u2014 "),fU=a("a"),K7r=o("TFAlbertForMultipleChoice"),Z7r=o(" (ALBERT model)"),eMr=l(),rE=a("li"),pve=a("strong"),oMr=o("bert"),rMr=o(" \u2014 "),mU=a("a"),tMr=o("TFBertForMultipleChoice"),aMr=o(" (BERT model)"),nMr=l(),tE=a("li"),uve=a("strong"),sMr=o("camembert"),lMr=o(" \u2014 "),gU=a("a"),iMr=o("TFCamembertForMultipleChoice"),dMr=o(" (CamemBERT model)"),cMr=l(),aE=a("li"),_ve=a("strong"),fMr=o("convbert"),mMr=o(" \u2014 "),hU=a("a"),gMr=o("TFConvBertForMultipleChoice"),hMr=o(" (ConvBERT model)"),pMr=l(),nE=a("li"),bve=a("strong"),uMr=o("distilbert"),_Mr=o(" \u2014 "),pU=a("a"),bMr=o("TFDistilBertForMultipleChoice"),vMr=o(" (DistilBERT model)"),FMr=l(),sE=a("li"),vve=a("strong"),TMr=o("electra"),MMr=o(" \u2014 "),uU=a("a"),EMr=o("TFElectraForMultipleChoice"),CMr=o(" (ELECTRA model)"),wMr=l(),lE=a("li"),Fve=a("strong"),AMr=o("flaubert"),yMr=o(" \u2014 "),_U=a("a"),LMr=o("TFFlaubertForMultipleChoice"),xMr=o(" (FlauBERT model)"),$Mr=l(),iE=a("li"),Tve=a("strong"),kMr=o("funnel"),SMr=o(" \u2014 "),bU=a("a"),RMr=o("TFFunnelForMultipleChoice"),PMr=o(" (Funnel Transformer model)"),BMr=l(),dE=a("li"),Mve=a("strong"),IMr=o("longformer"),qMr=o(" \u2014 "),vU=a("a"),NMr=o("TFLongformerForMultipleChoice"),jMr=o(" (Longformer model)"),DMr=l(),cE=a("li"),Eve=a("strong"),GMr=o("mobilebert"),OMr=o(" \u2014 "),FU=a("a"),VMr=o("TFMobileBertForMultipleChoice"),XMr=o(" (MobileBERT model)"),zMr=l(),fE=a("li"),Cve=a("strong"),WMr=o("mpnet"),QMr=o(" \u2014 "),TU=a("a"),HMr=o("TFMPNetForMultipleChoice"),UMr=o(" (MPNet model)"),JMr=l(),mE=a("li"),wve=a("strong"),YMr=o("rembert"),KMr=o(" \u2014 "),MU=a("a"),ZMr=o("TFRemBertForMultipleChoice"),eEr=o(" (RemBERT model)"),oEr=l(),gE=a("li"),Ave=a("strong"),rEr=o("roberta"),tEr=o(" \u2014 "),EU=a("a"),aEr=o("TFRobertaForMultipleChoice"),nEr=o(" (RoBERTa model)"),sEr=l(),hE=a("li"),yve=a("strong"),lEr=o("roformer"),iEr=o(" \u2014 "),CU=a("a"),dEr=o("TFRoFormerForMultipleChoice"),cEr=o(" (RoFormer model)"),fEr=l(),pE=a("li"),Lve=a("strong"),mEr=o("xlm"),gEr=o(" \u2014 "),wU=a("a"),hEr=o("TFXLMForMultipleChoice"),pEr=o(" (XLM model)"),uEr=l(),uE=a("li"),xve=a("strong"),_Er=o("xlm-roberta"),bEr=o(" \u2014 "),AU=a("a"),vEr=o("TFXLMRobertaForMultipleChoice"),FEr=o(" (XLM-RoBERTa model)"),TEr=l(),_E=a("li"),$ve=a("strong"),MEr=o("xlnet"),EEr=o(" \u2014 "),yU=a("a"),CEr=o("TFXLNetForMultipleChoice"),wEr=o(" (XLNet model)"),AEr=l(),F(bE.$$.fragment),Eje=l(),fc=a("h2"),vE=a("a"),kve=a("span"),F(UL.$$.fragment),yEr=l(),Sve=a("span"),LEr=o("TFAutoModelForNextSentencePrediction"),Cje=l(),nr=a("div"),F(JL.$$.fragment),xEr=l(),mc=a("p"),$Er=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),LU=a("a"),kEr=o("from_pretrained()"),SEr=o(" class method or the "),xU=a("a"),REr=o("from_config()"),PEr=o(` class
method.`),BEr=l(),YL=a("p"),IEr=o("This class cannot be instantiated directly using "),Rve=a("code"),qEr=o("__init__()"),NEr=o(" (throws an error)."),jEr=l(),Bt=a("div"),F(KL.$$.fragment),DEr=l(),Pve=a("p"),GEr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),OEr=l(),gc=a("p"),VEr=o(`Note:
Loading a model from its configuration file does `),Bve=a("strong"),XEr=o("not"),zEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=a("a"),WEr=o("from_pretrained()"),QEr=o(" to load the model weights."),HEr=l(),F(FE.$$.fragment),UEr=l(),Rr=a("div"),F(ZL.$$.fragment),JEr=l(),Ive=a("p"),YEr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),KEr=l(),ln=a("p"),ZEr=o("The model class to instantiate is selected based on the "),qve=a("code"),eCr=o("model_type"),oCr=o(` property of the config object (either
passed as an argument or loaded from `),Nve=a("code"),rCr=o("pretrained_model_name_or_path"),tCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=a("code"),aCr=o("pretrained_model_name_or_path"),nCr=o(":"),sCr=l(),e8=a("ul"),TE=a("li"),Dve=a("strong"),lCr=o("bert"),iCr=o(" \u2014 "),kU=a("a"),dCr=o("TFBertForNextSentencePrediction"),cCr=o(" (BERT model)"),fCr=l(),ME=a("li"),Gve=a("strong"),mCr=o("mobilebert"),gCr=o(" \u2014 "),SU=a("a"),hCr=o("TFMobileBertForNextSentencePrediction"),pCr=o(" (MobileBERT model)"),uCr=l(),F(EE.$$.fragment),wje=l(),hc=a("h2"),CE=a("a"),Ove=a("span"),F(o8.$$.fragment),_Cr=l(),Vve=a("span"),bCr=o("TFAutoModelForTableQuestionAnswering"),Aje=l(),sr=a("div"),F(r8.$$.fragment),vCr=l(),pc=a("p"),FCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),RU=a("a"),TCr=o("from_pretrained()"),MCr=o(" class method or the "),PU=a("a"),ECr=o("from_config()"),CCr=o(` class
method.`),wCr=l(),t8=a("p"),ACr=o("This class cannot be instantiated directly using "),Xve=a("code"),yCr=o("__init__()"),LCr=o(" (throws an error)."),xCr=l(),It=a("div"),F(a8.$$.fragment),$Cr=l(),zve=a("p"),kCr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),SCr=l(),uc=a("p"),RCr=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),PCr=o("not"),BCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=a("a"),ICr=o("from_pretrained()"),qCr=o(" to load the model weights."),NCr=l(),F(wE.$$.fragment),jCr=l(),Pr=a("div"),F(n8.$$.fragment),DCr=l(),Qve=a("p"),GCr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),OCr=l(),dn=a("p"),VCr=o("The model class to instantiate is selected based on the "),Hve=a("code"),XCr=o("model_type"),zCr=o(` property of the config object (either
passed as an argument or loaded from `),Uve=a("code"),WCr=o("pretrained_model_name_or_path"),QCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=a("code"),HCr=o("pretrained_model_name_or_path"),UCr=o(":"),JCr=l(),Yve=a("ul"),AE=a("li"),Kve=a("strong"),YCr=o("tapas"),KCr=o(" \u2014 "),IU=a("a"),ZCr=o("TFTapasForQuestionAnswering"),e5r=o(" (TAPAS model)"),o5r=l(),F(yE.$$.fragment),yje=l(),_c=a("h2"),LE=a("a"),Zve=a("span"),F(s8.$$.fragment),r5r=l(),eFe=a("span"),t5r=o("TFAutoModelForTokenClassification"),Lje=l(),lr=a("div"),F(l8.$$.fragment),a5r=l(),bc=a("p"),n5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),qU=a("a"),s5r=o("from_pretrained()"),l5r=o(" class method or the "),NU=a("a"),i5r=o("from_config()"),d5r=o(` class
method.`),c5r=l(),i8=a("p"),f5r=o("This class cannot be instantiated directly using "),oFe=a("code"),m5r=o("__init__()"),g5r=o(" (throws an error)."),h5r=l(),qt=a("div"),F(d8.$$.fragment),p5r=l(),rFe=a("p"),u5r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_5r=l(),vc=a("p"),b5r=o(`Note:
Loading a model from its configuration file does `),tFe=a("strong"),v5r=o("not"),F5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=a("a"),T5r=o("from_pretrained()"),M5r=o(" to load the model weights."),E5r=l(),F(xE.$$.fragment),C5r=l(),Br=a("div"),F(c8.$$.fragment),w5r=l(),aFe=a("p"),A5r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),y5r=l(),cn=a("p"),L5r=o("The model class to instantiate is selected based on the "),nFe=a("code"),x5r=o("model_type"),$5r=o(` property of the config object (either
passed as an argument or loaded from `),sFe=a("code"),k5r=o("pretrained_model_name_or_path"),S5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=a("code"),R5r=o("pretrained_model_name_or_path"),P5r=o(":"),B5r=l(),de=a("ul"),$E=a("li"),iFe=a("strong"),I5r=o("albert"),q5r=o(" \u2014 "),DU=a("a"),N5r=o("TFAlbertForTokenClassification"),j5r=o(" (ALBERT model)"),D5r=l(),kE=a("li"),dFe=a("strong"),G5r=o("bert"),O5r=o(" \u2014 "),GU=a("a"),V5r=o("TFBertForTokenClassification"),X5r=o(" (BERT model)"),z5r=l(),SE=a("li"),cFe=a("strong"),W5r=o("camembert"),Q5r=o(" \u2014 "),OU=a("a"),H5r=o("TFCamembertForTokenClassification"),U5r=o(" (CamemBERT model)"),J5r=l(),RE=a("li"),fFe=a("strong"),Y5r=o("convbert"),K5r=o(" \u2014 "),VU=a("a"),Z5r=o("TFConvBertForTokenClassification"),e3r=o(" (ConvBERT model)"),o3r=l(),PE=a("li"),mFe=a("strong"),r3r=o("deberta"),t3r=o(" \u2014 "),XU=a("a"),a3r=o("TFDebertaForTokenClassification"),n3r=o(" (DeBERTa model)"),s3r=l(),BE=a("li"),gFe=a("strong"),l3r=o("deberta-v2"),i3r=o(" \u2014 "),zU=a("a"),d3r=o("TFDebertaV2ForTokenClassification"),c3r=o(" (DeBERTa-v2 model)"),f3r=l(),IE=a("li"),hFe=a("strong"),m3r=o("distilbert"),g3r=o(" \u2014 "),WU=a("a"),h3r=o("TFDistilBertForTokenClassification"),p3r=o(" (DistilBERT model)"),u3r=l(),qE=a("li"),pFe=a("strong"),_3r=o("electra"),b3r=o(" \u2014 "),QU=a("a"),v3r=o("TFElectraForTokenClassification"),F3r=o(" (ELECTRA model)"),T3r=l(),NE=a("li"),uFe=a("strong"),M3r=o("flaubert"),E3r=o(" \u2014 "),HU=a("a"),C3r=o("TFFlaubertForTokenClassification"),w3r=o(" (FlauBERT model)"),A3r=l(),jE=a("li"),_Fe=a("strong"),y3r=o("funnel"),L3r=o(" \u2014 "),UU=a("a"),x3r=o("TFFunnelForTokenClassification"),$3r=o(" (Funnel Transformer model)"),k3r=l(),DE=a("li"),bFe=a("strong"),S3r=o("layoutlm"),R3r=o(" \u2014 "),JU=a("a"),P3r=o("TFLayoutLMForTokenClassification"),B3r=o(" (LayoutLM model)"),I3r=l(),GE=a("li"),vFe=a("strong"),q3r=o("longformer"),N3r=o(" \u2014 "),YU=a("a"),j3r=o("TFLongformerForTokenClassification"),D3r=o(" (Longformer model)"),G3r=l(),OE=a("li"),FFe=a("strong"),O3r=o("mobilebert"),V3r=o(" \u2014 "),KU=a("a"),X3r=o("TFMobileBertForTokenClassification"),z3r=o(" (MobileBERT model)"),W3r=l(),VE=a("li"),TFe=a("strong"),Q3r=o("mpnet"),H3r=o(" \u2014 "),ZU=a("a"),U3r=o("TFMPNetForTokenClassification"),J3r=o(" (MPNet model)"),Y3r=l(),XE=a("li"),MFe=a("strong"),K3r=o("rembert"),Z3r=o(" \u2014 "),eJ=a("a"),ewr=o("TFRemBertForTokenClassification"),owr=o(" (RemBERT model)"),rwr=l(),zE=a("li"),EFe=a("strong"),twr=o("roberta"),awr=o(" \u2014 "),oJ=a("a"),nwr=o("TFRobertaForTokenClassification"),swr=o(" (RoBERTa model)"),lwr=l(),WE=a("li"),CFe=a("strong"),iwr=o("roformer"),dwr=o(" \u2014 "),rJ=a("a"),cwr=o("TFRoFormerForTokenClassification"),fwr=o(" (RoFormer model)"),mwr=l(),QE=a("li"),wFe=a("strong"),gwr=o("xlm"),hwr=o(" \u2014 "),tJ=a("a"),pwr=o("TFXLMForTokenClassification"),uwr=o(" (XLM model)"),_wr=l(),HE=a("li"),AFe=a("strong"),bwr=o("xlm-roberta"),vwr=o(" \u2014 "),aJ=a("a"),Fwr=o("TFXLMRobertaForTokenClassification"),Twr=o(" (XLM-RoBERTa model)"),Mwr=l(),UE=a("li"),yFe=a("strong"),Ewr=o("xlnet"),Cwr=o(" \u2014 "),nJ=a("a"),wwr=o("TFXLNetForTokenClassification"),Awr=o(" (XLNet model)"),ywr=l(),F(JE.$$.fragment),xje=l(),Fc=a("h2"),YE=a("a"),LFe=a("span"),F(f8.$$.fragment),Lwr=l(),xFe=a("span"),xwr=o("TFAutoModelForQuestionAnswering"),$je=l(),ir=a("div"),F(m8.$$.fragment),$wr=l(),Tc=a("p"),kwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sJ=a("a"),Swr=o("from_pretrained()"),Rwr=o(" class method or the "),lJ=a("a"),Pwr=o("from_config()"),Bwr=o(` class
method.`),Iwr=l(),g8=a("p"),qwr=o("This class cannot be instantiated directly using "),$Fe=a("code"),Nwr=o("__init__()"),jwr=o(" (throws an error)."),Dwr=l(),Nt=a("div"),F(h8.$$.fragment),Gwr=l(),kFe=a("p"),Owr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Vwr=l(),Mc=a("p"),Xwr=o(`Note:
Loading a model from its configuration file does `),SFe=a("strong"),zwr=o("not"),Wwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=a("a"),Qwr=o("from_pretrained()"),Hwr=o(" to load the model weights."),Uwr=l(),F(KE.$$.fragment),Jwr=l(),Ir=a("div"),F(p8.$$.fragment),Ywr=l(),RFe=a("p"),Kwr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Zwr=l(),fn=a("p"),e0r=o("The model class to instantiate is selected based on the "),PFe=a("code"),o0r=o("model_type"),r0r=o(` property of the config object (either
passed as an argument or loaded from `),BFe=a("code"),t0r=o("pretrained_model_name_or_path"),a0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=a("code"),n0r=o("pretrained_model_name_or_path"),s0r=o(":"),l0r=l(),ce=a("ul"),ZE=a("li"),qFe=a("strong"),i0r=o("albert"),d0r=o(" \u2014 "),dJ=a("a"),c0r=o("TFAlbertForQuestionAnswering"),f0r=o(" (ALBERT model)"),m0r=l(),eC=a("li"),NFe=a("strong"),g0r=o("bert"),h0r=o(" \u2014 "),cJ=a("a"),p0r=o("TFBertForQuestionAnswering"),u0r=o(" (BERT model)"),_0r=l(),oC=a("li"),jFe=a("strong"),b0r=o("camembert"),v0r=o(" \u2014 "),fJ=a("a"),F0r=o("TFCamembertForQuestionAnswering"),T0r=o(" (CamemBERT model)"),M0r=l(),rC=a("li"),DFe=a("strong"),E0r=o("convbert"),C0r=o(" \u2014 "),mJ=a("a"),w0r=o("TFConvBertForQuestionAnswering"),A0r=o(" (ConvBERT model)"),y0r=l(),tC=a("li"),GFe=a("strong"),L0r=o("deberta"),x0r=o(" \u2014 "),gJ=a("a"),$0r=o("TFDebertaForQuestionAnswering"),k0r=o(" (DeBERTa model)"),S0r=l(),aC=a("li"),OFe=a("strong"),R0r=o("deberta-v2"),P0r=o(" \u2014 "),hJ=a("a"),B0r=o("TFDebertaV2ForQuestionAnswering"),I0r=o(" (DeBERTa-v2 model)"),q0r=l(),nC=a("li"),VFe=a("strong"),N0r=o("distilbert"),j0r=o(" \u2014 "),pJ=a("a"),D0r=o("TFDistilBertForQuestionAnswering"),G0r=o(" (DistilBERT model)"),O0r=l(),sC=a("li"),XFe=a("strong"),V0r=o("electra"),X0r=o(" \u2014 "),uJ=a("a"),z0r=o("TFElectraForQuestionAnswering"),W0r=o(" (ELECTRA model)"),Q0r=l(),lC=a("li"),zFe=a("strong"),H0r=o("flaubert"),U0r=o(" \u2014 "),_J=a("a"),J0r=o("TFFlaubertForQuestionAnsweringSimple"),Y0r=o(" (FlauBERT model)"),K0r=l(),iC=a("li"),WFe=a("strong"),Z0r=o("funnel"),e6r=o(" \u2014 "),bJ=a("a"),o6r=o("TFFunnelForQuestionAnswering"),r6r=o(" (Funnel Transformer model)"),t6r=l(),dC=a("li"),QFe=a("strong"),a6r=o("gptj"),n6r=o(" \u2014 "),vJ=a("a"),s6r=o("TFGPTJForQuestionAnswering"),l6r=o(" (GPT-J model)"),i6r=l(),cC=a("li"),HFe=a("strong"),d6r=o("longformer"),c6r=o(" \u2014 "),FJ=a("a"),f6r=o("TFLongformerForQuestionAnswering"),m6r=o(" (Longformer model)"),g6r=l(),fC=a("li"),UFe=a("strong"),h6r=o("mobilebert"),p6r=o(" \u2014 "),TJ=a("a"),u6r=o("TFMobileBertForQuestionAnswering"),_6r=o(" (MobileBERT model)"),b6r=l(),mC=a("li"),JFe=a("strong"),v6r=o("mpnet"),F6r=o(" \u2014 "),MJ=a("a"),T6r=o("TFMPNetForQuestionAnswering"),M6r=o(" (MPNet model)"),E6r=l(),gC=a("li"),YFe=a("strong"),C6r=o("rembert"),w6r=o(" \u2014 "),EJ=a("a"),A6r=o("TFRemBertForQuestionAnswering"),y6r=o(" (RemBERT model)"),L6r=l(),hC=a("li"),KFe=a("strong"),x6r=o("roberta"),$6r=o(" \u2014 "),CJ=a("a"),k6r=o("TFRobertaForQuestionAnswering"),S6r=o(" (RoBERTa model)"),R6r=l(),pC=a("li"),ZFe=a("strong"),P6r=o("roformer"),B6r=o(" \u2014 "),wJ=a("a"),I6r=o("TFRoFormerForQuestionAnswering"),q6r=o(" (RoFormer model)"),N6r=l(),uC=a("li"),eTe=a("strong"),j6r=o("xlm"),D6r=o(" \u2014 "),AJ=a("a"),G6r=o("TFXLMForQuestionAnsweringSimple"),O6r=o(" (XLM model)"),V6r=l(),_C=a("li"),oTe=a("strong"),X6r=o("xlm-roberta"),z6r=o(" \u2014 "),yJ=a("a"),W6r=o("TFXLMRobertaForQuestionAnswering"),Q6r=o(" (XLM-RoBERTa model)"),H6r=l(),bC=a("li"),rTe=a("strong"),U6r=o("xlnet"),J6r=o(" \u2014 "),LJ=a("a"),Y6r=o("TFXLNetForQuestionAnsweringSimple"),K6r=o(" (XLNet model)"),Z6r=l(),F(vC.$$.fragment),kje=l(),Ec=a("h2"),FC=a("a"),tTe=a("span"),F(u8.$$.fragment),eAr=l(),aTe=a("span"),oAr=o("TFAutoModelForVision2Seq"),Sje=l(),dr=a("div"),F(_8.$$.fragment),rAr=l(),Cc=a("p"),tAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xJ=a("a"),aAr=o("from_pretrained()"),nAr=o(" class method or the "),$J=a("a"),sAr=o("from_config()"),lAr=o(` class
method.`),iAr=l(),b8=a("p"),dAr=o("This class cannot be instantiated directly using "),nTe=a("code"),cAr=o("__init__()"),fAr=o(" (throws an error)."),mAr=l(),jt=a("div"),F(v8.$$.fragment),gAr=l(),sTe=a("p"),hAr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pAr=l(),wc=a("p"),uAr=o(`Note:
Loading a model from its configuration file does `),lTe=a("strong"),_Ar=o("not"),bAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=a("a"),vAr=o("from_pretrained()"),FAr=o(" to load the model weights."),TAr=l(),F(TC.$$.fragment),MAr=l(),qr=a("div"),F(F8.$$.fragment),EAr=l(),iTe=a("p"),CAr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wAr=l(),mn=a("p"),AAr=o("The model class to instantiate is selected based on the "),dTe=a("code"),yAr=o("model_type"),LAr=o(` property of the config object (either
passed as an argument or loaded from `),cTe=a("code"),xAr=o("pretrained_model_name_or_path"),$Ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=a("code"),kAr=o("pretrained_model_name_or_path"),SAr=o(":"),RAr=l(),mTe=a("ul"),MC=a("li"),gTe=a("strong"),PAr=o("vision-encoder-decoder"),BAr=o(" \u2014 "),SJ=a("a"),IAr=o("TFVisionEncoderDecoderModel"),qAr=o(" (Vision Encoder decoder model)"),NAr=l(),F(EC.$$.fragment),Rje=l(),Ac=a("h2"),CC=a("a"),hTe=a("span"),F(T8.$$.fragment),jAr=l(),pTe=a("span"),DAr=o("TFAutoModelForSpeechSeq2Seq"),Pje=l(),cr=a("div"),F(M8.$$.fragment),GAr=l(),yc=a("p"),OAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),RJ=a("a"),VAr=o("from_pretrained()"),XAr=o(" class method or the "),PJ=a("a"),zAr=o("from_config()"),WAr=o(` class
method.`),QAr=l(),E8=a("p"),HAr=o("This class cannot be instantiated directly using "),uTe=a("code"),UAr=o("__init__()"),JAr=o(" (throws an error)."),YAr=l(),Dt=a("div"),F(C8.$$.fragment),KAr=l(),_Te=a("p"),ZAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),eyr=l(),Lc=a("p"),oyr=o(`Note:
Loading a model from its configuration file does `),bTe=a("strong"),ryr=o("not"),tyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),ayr=o("from_pretrained()"),nyr=o(" to load the model weights."),syr=l(),F(wC.$$.fragment),lyr=l(),Nr=a("div"),F(w8.$$.fragment),iyr=l(),vTe=a("p"),dyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),cyr=l(),gn=a("p"),fyr=o("The model class to instantiate is selected based on the "),FTe=a("code"),myr=o("model_type"),gyr=o(` property of the config object (either
passed as an argument or loaded from `),TTe=a("code"),hyr=o("pretrained_model_name_or_path"),pyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MTe=a("code"),uyr=o("pretrained_model_name_or_path"),_yr=o(":"),byr=l(),ETe=a("ul"),AC=a("li"),CTe=a("strong"),vyr=o("speech_to_text"),Fyr=o(" \u2014 "),IJ=a("a"),Tyr=o("TFSpeech2TextForConditionalGeneration"),Myr=o(" (Speech2Text model)"),Eyr=l(),F(yC.$$.fragment),Bje=l(),xc=a("h2"),LC=a("a"),wTe=a("span"),F(A8.$$.fragment),Cyr=l(),ATe=a("span"),wyr=o("FlaxAutoModel"),Ije=l(),fr=a("div"),F(y8.$$.fragment),Ayr=l(),$c=a("p"),yyr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qJ=a("a"),Lyr=o("from_pretrained()"),xyr=o(" class method or the "),NJ=a("a"),$yr=o("from_config()"),kyr=o(` class
method.`),Syr=l(),L8=a("p"),Ryr=o("This class cannot be instantiated directly using "),yTe=a("code"),Pyr=o("__init__()"),Byr=o(" (throws an error)."),Iyr=l(),Gt=a("div"),F(x8.$$.fragment),qyr=l(),LTe=a("p"),Nyr=o("Instantiates one of the base model classes of the library from a configuration."),jyr=l(),kc=a("p"),Dyr=o(`Note:
Loading a model from its configuration file does `),xTe=a("strong"),Gyr=o("not"),Oyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),Vyr=o("from_pretrained()"),Xyr=o(" to load the model weights."),zyr=l(),F(xC.$$.fragment),Wyr=l(),jr=a("div"),F($8.$$.fragment),Qyr=l(),$Te=a("p"),Hyr=o("Instantiate one of the base model classes of the library from a pretrained model."),Uyr=l(),hn=a("p"),Jyr=o("The model class to instantiate is selected based on the "),kTe=a("code"),Yyr=o("model_type"),Kyr=o(` property of the config object (either
passed as an argument or loaded from `),STe=a("code"),Zyr=o("pretrained_model_name_or_path"),eLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=a("code"),oLr=o("pretrained_model_name_or_path"),rLr=o(":"),tLr=l(),te=a("ul"),$C=a("li"),PTe=a("strong"),aLr=o("albert"),nLr=o(" \u2014 "),DJ=a("a"),sLr=o("FlaxAlbertModel"),lLr=o(" (ALBERT model)"),iLr=l(),kC=a("li"),BTe=a("strong"),dLr=o("bart"),cLr=o(" \u2014 "),GJ=a("a"),fLr=o("FlaxBartModel"),mLr=o(" (BART model)"),gLr=l(),SC=a("li"),ITe=a("strong"),hLr=o("beit"),pLr=o(" \u2014 "),OJ=a("a"),uLr=o("FlaxBeitModel"),_Lr=o(" (BEiT model)"),bLr=l(),RC=a("li"),qTe=a("strong"),vLr=o("bert"),FLr=o(" \u2014 "),VJ=a("a"),TLr=o("FlaxBertModel"),MLr=o(" (BERT model)"),ELr=l(),PC=a("li"),NTe=a("strong"),CLr=o("big_bird"),wLr=o(" \u2014 "),XJ=a("a"),ALr=o("FlaxBigBirdModel"),yLr=o(" (BigBird model)"),LLr=l(),BC=a("li"),jTe=a("strong"),xLr=o("blenderbot"),$Lr=o(" \u2014 "),zJ=a("a"),kLr=o("FlaxBlenderbotModel"),SLr=o(" (Blenderbot model)"),RLr=l(),IC=a("li"),DTe=a("strong"),PLr=o("blenderbot-small"),BLr=o(" \u2014 "),WJ=a("a"),ILr=o("FlaxBlenderbotSmallModel"),qLr=o(" (BlenderbotSmall model)"),NLr=l(),qC=a("li"),GTe=a("strong"),jLr=o("clip"),DLr=o(" \u2014 "),QJ=a("a"),GLr=o("FlaxCLIPModel"),OLr=o(" (CLIP model)"),VLr=l(),NC=a("li"),OTe=a("strong"),XLr=o("distilbert"),zLr=o(" \u2014 "),HJ=a("a"),WLr=o("FlaxDistilBertModel"),QLr=o(" (DistilBERT model)"),HLr=l(),jC=a("li"),VTe=a("strong"),ULr=o("electra"),JLr=o(" \u2014 "),UJ=a("a"),YLr=o("FlaxElectraModel"),KLr=o(" (ELECTRA model)"),ZLr=l(),DC=a("li"),XTe=a("strong"),e8r=o("gpt2"),o8r=o(" \u2014 "),JJ=a("a"),r8r=o("FlaxGPT2Model"),t8r=o(" (OpenAI GPT-2 model)"),a8r=l(),GC=a("li"),zTe=a("strong"),n8r=o("gpt_neo"),s8r=o(" \u2014 "),YJ=a("a"),l8r=o("FlaxGPTNeoModel"),i8r=o(" (GPT Neo model)"),d8r=l(),OC=a("li"),WTe=a("strong"),c8r=o("gptj"),f8r=o(" \u2014 "),KJ=a("a"),m8r=o("FlaxGPTJModel"),g8r=o(" (GPT-J model)"),h8r=l(),VC=a("li"),QTe=a("strong"),p8r=o("marian"),u8r=o(" \u2014 "),ZJ=a("a"),_8r=o("FlaxMarianModel"),b8r=o(" (Marian model)"),v8r=l(),XC=a("li"),HTe=a("strong"),F8r=o("mbart"),T8r=o(" \u2014 "),eY=a("a"),M8r=o("FlaxMBartModel"),E8r=o(" (mBART model)"),C8r=l(),zC=a("li"),UTe=a("strong"),w8r=o("mt5"),A8r=o(" \u2014 "),oY=a("a"),y8r=o("FlaxMT5Model"),L8r=o(" (mT5 model)"),x8r=l(),WC=a("li"),JTe=a("strong"),$8r=o("pegasus"),k8r=o(" \u2014 "),rY=a("a"),S8r=o("FlaxPegasusModel"),R8r=o(" (Pegasus model)"),P8r=l(),QC=a("li"),YTe=a("strong"),B8r=o("roberta"),I8r=o(" \u2014 "),tY=a("a"),q8r=o("FlaxRobertaModel"),N8r=o(" (RoBERTa model)"),j8r=l(),HC=a("li"),KTe=a("strong"),D8r=o("roformer"),G8r=o(" \u2014 "),aY=a("a"),O8r=o("FlaxRoFormerModel"),V8r=o(" (RoFormer model)"),X8r=l(),UC=a("li"),ZTe=a("strong"),z8r=o("t5"),W8r=o(" \u2014 "),nY=a("a"),Q8r=o("FlaxT5Model"),H8r=o(" (T5 model)"),U8r=l(),JC=a("li"),e7e=a("strong"),J8r=o("vision-text-dual-encoder"),Y8r=o(" \u2014 "),sY=a("a"),K8r=o("FlaxVisionTextDualEncoderModel"),Z8r=o(" (VisionTextDualEncoder model)"),exr=l(),YC=a("li"),o7e=a("strong"),oxr=o("vit"),rxr=o(" \u2014 "),lY=a("a"),txr=o("FlaxViTModel"),axr=o(" (ViT model)"),nxr=l(),KC=a("li"),r7e=a("strong"),sxr=o("wav2vec2"),lxr=o(" \u2014 "),iY=a("a"),ixr=o("FlaxWav2Vec2Model"),dxr=o(" (Wav2Vec2 model)"),cxr=l(),ZC=a("li"),t7e=a("strong"),fxr=o("xglm"),mxr=o(" \u2014 "),dY=a("a"),gxr=o("FlaxXGLMModel"),hxr=o(" (XGLM model)"),pxr=l(),e5=a("li"),a7e=a("strong"),uxr=o("xlm-roberta"),_xr=o(" \u2014 "),cY=a("a"),bxr=o("FlaxXLMRobertaModel"),vxr=o(" (XLM-RoBERTa model)"),Fxr=l(),F(o5.$$.fragment),qje=l(),Sc=a("h2"),r5=a("a"),n7e=a("span"),F(k8.$$.fragment),Txr=l(),s7e=a("span"),Mxr=o("FlaxAutoModelForCausalLM"),Nje=l(),mr=a("div"),F(S8.$$.fragment),Exr=l(),Rc=a("p"),Cxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fY=a("a"),wxr=o("from_pretrained()"),Axr=o(" class method or the "),mY=a("a"),yxr=o("from_config()"),Lxr=o(` class
method.`),xxr=l(),R8=a("p"),$xr=o("This class cannot be instantiated directly using "),l7e=a("code"),kxr=o("__init__()"),Sxr=o(" (throws an error)."),Rxr=l(),Ot=a("div"),F(P8.$$.fragment),Pxr=l(),i7e=a("p"),Bxr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ixr=l(),Pc=a("p"),qxr=o(`Note:
Loading a model from its configuration file does `),d7e=a("strong"),Nxr=o("not"),jxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=a("a"),Dxr=o("from_pretrained()"),Gxr=o(" to load the model weights."),Oxr=l(),F(t5.$$.fragment),Vxr=l(),Dr=a("div"),F(B8.$$.fragment),Xxr=l(),c7e=a("p"),zxr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wxr=l(),pn=a("p"),Qxr=o("The model class to instantiate is selected based on the "),f7e=a("code"),Hxr=o("model_type"),Uxr=o(` property of the config object (either
passed as an argument or loaded from `),m7e=a("code"),Jxr=o("pretrained_model_name_or_path"),Yxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g7e=a("code"),Kxr=o("pretrained_model_name_or_path"),Zxr=o(":"),e$r=l(),Re=a("ul"),a5=a("li"),h7e=a("strong"),o$r=o("bart"),r$r=o(" \u2014 "),hY=a("a"),t$r=o("FlaxBartForCausalLM"),a$r=o(" (BART model)"),n$r=l(),n5=a("li"),p7e=a("strong"),s$r=o("bert"),l$r=o(" \u2014 "),pY=a("a"),i$r=o("FlaxBertForCausalLM"),d$r=o(" (BERT model)"),c$r=l(),s5=a("li"),u7e=a("strong"),f$r=o("big_bird"),m$r=o(" \u2014 "),uY=a("a"),g$r=o("FlaxBigBirdForCausalLM"),h$r=o(" (BigBird model)"),p$r=l(),l5=a("li"),_7e=a("strong"),u$r=o("electra"),_$r=o(" \u2014 "),_Y=a("a"),b$r=o("FlaxElectraForCausalLM"),v$r=o(" (ELECTRA model)"),F$r=l(),i5=a("li"),b7e=a("strong"),T$r=o("gpt2"),M$r=o(" \u2014 "),bY=a("a"),E$r=o("FlaxGPT2LMHeadModel"),C$r=o(" (OpenAI GPT-2 model)"),w$r=l(),d5=a("li"),v7e=a("strong"),A$r=o("gpt_neo"),y$r=o(" \u2014 "),vY=a("a"),L$r=o("FlaxGPTNeoForCausalLM"),x$r=o(" (GPT Neo model)"),$$r=l(),c5=a("li"),F7e=a("strong"),k$r=o("gptj"),S$r=o(" \u2014 "),FY=a("a"),R$r=o("FlaxGPTJForCausalLM"),P$r=o(" (GPT-J model)"),B$r=l(),f5=a("li"),T7e=a("strong"),I$r=o("roberta"),q$r=o(" \u2014 "),TY=a("a"),N$r=o("FlaxRobertaForCausalLM"),j$r=o(" (RoBERTa model)"),D$r=l(),m5=a("li"),M7e=a("strong"),G$r=o("xglm"),O$r=o(" \u2014 "),MY=a("a"),V$r=o("FlaxXGLMForCausalLM"),X$r=o(" (XGLM model)"),z$r=l(),F(g5.$$.fragment),jje=l(),Bc=a("h2"),h5=a("a"),E7e=a("span"),F(I8.$$.fragment),W$r=l(),C7e=a("span"),Q$r=o("FlaxAutoModelForPreTraining"),Dje=l(),gr=a("div"),F(q8.$$.fragment),H$r=l(),Ic=a("p"),U$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EY=a("a"),J$r=o("from_pretrained()"),Y$r=o(" class method or the "),CY=a("a"),K$r=o("from_config()"),Z$r=o(` class
method.`),ekr=l(),N8=a("p"),okr=o("This class cannot be instantiated directly using "),w7e=a("code"),rkr=o("__init__()"),tkr=o(" (throws an error)."),akr=l(),Vt=a("div"),F(j8.$$.fragment),nkr=l(),A7e=a("p"),skr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lkr=l(),qc=a("p"),ikr=o(`Note:
Loading a model from its configuration file does `),y7e=a("strong"),dkr=o("not"),ckr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),fkr=o("from_pretrained()"),mkr=o(" to load the model weights."),gkr=l(),F(p5.$$.fragment),hkr=l(),Gr=a("div"),F(D8.$$.fragment),pkr=l(),L7e=a("p"),ukr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_kr=l(),un=a("p"),bkr=o("The model class to instantiate is selected based on the "),x7e=a("code"),vkr=o("model_type"),Fkr=o(` property of the config object (either
passed as an argument or loaded from `),$7e=a("code"),Tkr=o("pretrained_model_name_or_path"),Mkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k7e=a("code"),Ekr=o("pretrained_model_name_or_path"),Ckr=o(":"),wkr=l(),Ee=a("ul"),u5=a("li"),S7e=a("strong"),Akr=o("albert"),ykr=o(" \u2014 "),AY=a("a"),Lkr=o("FlaxAlbertForPreTraining"),xkr=o(" (ALBERT model)"),$kr=l(),_5=a("li"),R7e=a("strong"),kkr=o("bart"),Skr=o(" \u2014 "),yY=a("a"),Rkr=o("FlaxBartForConditionalGeneration"),Pkr=o(" (BART model)"),Bkr=l(),b5=a("li"),P7e=a("strong"),Ikr=o("bert"),qkr=o(" \u2014 "),LY=a("a"),Nkr=o("FlaxBertForPreTraining"),jkr=o(" (BERT model)"),Dkr=l(),v5=a("li"),B7e=a("strong"),Gkr=o("big_bird"),Okr=o(" \u2014 "),xY=a("a"),Vkr=o("FlaxBigBirdForPreTraining"),Xkr=o(" (BigBird model)"),zkr=l(),F5=a("li"),I7e=a("strong"),Wkr=o("electra"),Qkr=o(" \u2014 "),$Y=a("a"),Hkr=o("FlaxElectraForPreTraining"),Ukr=o(" (ELECTRA model)"),Jkr=l(),T5=a("li"),q7e=a("strong"),Ykr=o("mbart"),Kkr=o(" \u2014 "),kY=a("a"),Zkr=o("FlaxMBartForConditionalGeneration"),eSr=o(" (mBART model)"),oSr=l(),M5=a("li"),N7e=a("strong"),rSr=o("mt5"),tSr=o(" \u2014 "),SY=a("a"),aSr=o("FlaxMT5ForConditionalGeneration"),nSr=o(" (mT5 model)"),sSr=l(),E5=a("li"),j7e=a("strong"),lSr=o("roberta"),iSr=o(" \u2014 "),RY=a("a"),dSr=o("FlaxRobertaForMaskedLM"),cSr=o(" (RoBERTa model)"),fSr=l(),C5=a("li"),D7e=a("strong"),mSr=o("roformer"),gSr=o(" \u2014 "),PY=a("a"),hSr=o("FlaxRoFormerForMaskedLM"),pSr=o(" (RoFormer model)"),uSr=l(),w5=a("li"),G7e=a("strong"),_Sr=o("t5"),bSr=o(" \u2014 "),BY=a("a"),vSr=o("FlaxT5ForConditionalGeneration"),FSr=o(" (T5 model)"),TSr=l(),A5=a("li"),O7e=a("strong"),MSr=o("wav2vec2"),ESr=o(" \u2014 "),IY=a("a"),CSr=o("FlaxWav2Vec2ForPreTraining"),wSr=o(" (Wav2Vec2 model)"),ASr=l(),y5=a("li"),V7e=a("strong"),ySr=o("xlm-roberta"),LSr=o(" \u2014 "),qY=a("a"),xSr=o("FlaxXLMRobertaForMaskedLM"),$Sr=o(" (XLM-RoBERTa model)"),kSr=l(),F(L5.$$.fragment),Gje=l(),Nc=a("h2"),x5=a("a"),X7e=a("span"),F(G8.$$.fragment),SSr=l(),z7e=a("span"),RSr=o("FlaxAutoModelForMaskedLM"),Oje=l(),hr=a("div"),F(O8.$$.fragment),PSr=l(),jc=a("p"),BSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NY=a("a"),ISr=o("from_pretrained()"),qSr=o(" class method or the "),jY=a("a"),NSr=o("from_config()"),jSr=o(` class
method.`),DSr=l(),V8=a("p"),GSr=o("This class cannot be instantiated directly using "),W7e=a("code"),OSr=o("__init__()"),VSr=o(" (throws an error)."),XSr=l(),Xt=a("div"),F(X8.$$.fragment),zSr=l(),Q7e=a("p"),WSr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),QSr=l(),Dc=a("p"),HSr=o(`Note:
Loading a model from its configuration file does `),H7e=a("strong"),USr=o("not"),JSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=a("a"),YSr=o("from_pretrained()"),KSr=o(" to load the model weights."),ZSr=l(),F($5.$$.fragment),eRr=l(),Or=a("div"),F(z8.$$.fragment),oRr=l(),U7e=a("p"),rRr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),tRr=l(),_n=a("p"),aRr=o("The model class to instantiate is selected based on the "),J7e=a("code"),nRr=o("model_type"),sRr=o(` property of the config object (either
passed as an argument or loaded from `),Y7e=a("code"),lRr=o("pretrained_model_name_or_path"),iRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=a("code"),dRr=o("pretrained_model_name_or_path"),cRr=o(":"),fRr=l(),Le=a("ul"),k5=a("li"),Z7e=a("strong"),mRr=o("albert"),gRr=o(" \u2014 "),GY=a("a"),hRr=o("FlaxAlbertForMaskedLM"),pRr=o(" (ALBERT model)"),uRr=l(),S5=a("li"),eMe=a("strong"),_Rr=o("bart"),bRr=o(" \u2014 "),OY=a("a"),vRr=o("FlaxBartForConditionalGeneration"),FRr=o(" (BART model)"),TRr=l(),R5=a("li"),oMe=a("strong"),MRr=o("bert"),ERr=o(" \u2014 "),VY=a("a"),CRr=o("FlaxBertForMaskedLM"),wRr=o(" (BERT model)"),ARr=l(),P5=a("li"),rMe=a("strong"),yRr=o("big_bird"),LRr=o(" \u2014 "),XY=a("a"),xRr=o("FlaxBigBirdForMaskedLM"),$Rr=o(" (BigBird model)"),kRr=l(),B5=a("li"),tMe=a("strong"),SRr=o("distilbert"),RRr=o(" \u2014 "),zY=a("a"),PRr=o("FlaxDistilBertForMaskedLM"),BRr=o(" (DistilBERT model)"),IRr=l(),I5=a("li"),aMe=a("strong"),qRr=o("electra"),NRr=o(" \u2014 "),WY=a("a"),jRr=o("FlaxElectraForMaskedLM"),DRr=o(" (ELECTRA model)"),GRr=l(),q5=a("li"),nMe=a("strong"),ORr=o("mbart"),VRr=o(" \u2014 "),QY=a("a"),XRr=o("FlaxMBartForConditionalGeneration"),zRr=o(" (mBART model)"),WRr=l(),N5=a("li"),sMe=a("strong"),QRr=o("roberta"),HRr=o(" \u2014 "),HY=a("a"),URr=o("FlaxRobertaForMaskedLM"),JRr=o(" (RoBERTa model)"),YRr=l(),j5=a("li"),lMe=a("strong"),KRr=o("roformer"),ZRr=o(" \u2014 "),UY=a("a"),ePr=o("FlaxRoFormerForMaskedLM"),oPr=o(" (RoFormer model)"),rPr=l(),D5=a("li"),iMe=a("strong"),tPr=o("xlm-roberta"),aPr=o(" \u2014 "),JY=a("a"),nPr=o("FlaxXLMRobertaForMaskedLM"),sPr=o(" (XLM-RoBERTa model)"),lPr=l(),F(G5.$$.fragment),Vje=l(),Gc=a("h2"),O5=a("a"),dMe=a("span"),F(W8.$$.fragment),iPr=l(),cMe=a("span"),dPr=o("FlaxAutoModelForSeq2SeqLM"),Xje=l(),pr=a("div"),F(Q8.$$.fragment),cPr=l(),Oc=a("p"),fPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YY=a("a"),mPr=o("from_pretrained()"),gPr=o(" class method or the "),KY=a("a"),hPr=o("from_config()"),pPr=o(` class
method.`),uPr=l(),H8=a("p"),_Pr=o("This class cannot be instantiated directly using "),fMe=a("code"),bPr=o("__init__()"),vPr=o(" (throws an error)."),FPr=l(),zt=a("div"),F(U8.$$.fragment),TPr=l(),mMe=a("p"),MPr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),EPr=l(),Vc=a("p"),CPr=o(`Note:
Loading a model from its configuration file does `),gMe=a("strong"),wPr=o("not"),APr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),yPr=o("from_pretrained()"),LPr=o(" to load the model weights."),xPr=l(),F(V5.$$.fragment),$Pr=l(),Vr=a("div"),F(J8.$$.fragment),kPr=l(),hMe=a("p"),SPr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),RPr=l(),bn=a("p"),PPr=o("The model class to instantiate is selected based on the "),pMe=a("code"),BPr=o("model_type"),IPr=o(` property of the config object (either
passed as an argument or loaded from `),uMe=a("code"),qPr=o("pretrained_model_name_or_path"),NPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=a("code"),jPr=o("pretrained_model_name_or_path"),DPr=o(":"),GPr=l(),Pe=a("ul"),X5=a("li"),bMe=a("strong"),OPr=o("bart"),VPr=o(" \u2014 "),eK=a("a"),XPr=o("FlaxBartForConditionalGeneration"),zPr=o(" (BART model)"),WPr=l(),z5=a("li"),vMe=a("strong"),QPr=o("blenderbot"),HPr=o(" \u2014 "),oK=a("a"),UPr=o("FlaxBlenderbotForConditionalGeneration"),JPr=o(" (Blenderbot model)"),YPr=l(),W5=a("li"),FMe=a("strong"),KPr=o("blenderbot-small"),ZPr=o(" \u2014 "),rK=a("a"),eBr=o("FlaxBlenderbotSmallForConditionalGeneration"),oBr=o(" (BlenderbotSmall model)"),rBr=l(),Q5=a("li"),TMe=a("strong"),tBr=o("encoder-decoder"),aBr=o(" \u2014 "),tK=a("a"),nBr=o("FlaxEncoderDecoderModel"),sBr=o(" (Encoder decoder model)"),lBr=l(),H5=a("li"),MMe=a("strong"),iBr=o("marian"),dBr=o(" \u2014 "),aK=a("a"),cBr=o("FlaxMarianMTModel"),fBr=o(" (Marian model)"),mBr=l(),U5=a("li"),EMe=a("strong"),gBr=o("mbart"),hBr=o(" \u2014 "),nK=a("a"),pBr=o("FlaxMBartForConditionalGeneration"),uBr=o(" (mBART model)"),_Br=l(),J5=a("li"),CMe=a("strong"),bBr=o("mt5"),vBr=o(" \u2014 "),sK=a("a"),FBr=o("FlaxMT5ForConditionalGeneration"),TBr=o(" (mT5 model)"),MBr=l(),Y5=a("li"),wMe=a("strong"),EBr=o("pegasus"),CBr=o(" \u2014 "),lK=a("a"),wBr=o("FlaxPegasusForConditionalGeneration"),ABr=o(" (Pegasus model)"),yBr=l(),K5=a("li"),AMe=a("strong"),LBr=o("t5"),xBr=o(" \u2014 "),iK=a("a"),$Br=o("FlaxT5ForConditionalGeneration"),kBr=o(" (T5 model)"),SBr=l(),F(Z5.$$.fragment),zje=l(),Xc=a("h2"),e3=a("a"),yMe=a("span"),F(Y8.$$.fragment),RBr=l(),LMe=a("span"),PBr=o("FlaxAutoModelForSequenceClassification"),Wje=l(),ur=a("div"),F(K8.$$.fragment),BBr=l(),zc=a("p"),IBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dK=a("a"),qBr=o("from_pretrained()"),NBr=o(" class method or the "),cK=a("a"),jBr=o("from_config()"),DBr=o(` class
method.`),GBr=l(),Z8=a("p"),OBr=o("This class cannot be instantiated directly using "),xMe=a("code"),VBr=o("__init__()"),XBr=o(" (throws an error)."),zBr=l(),Wt=a("div"),F(ex.$$.fragment),WBr=l(),$Me=a("p"),QBr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),HBr=l(),Wc=a("p"),UBr=o(`Note:
Loading a model from its configuration file does `),kMe=a("strong"),JBr=o("not"),YBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=a("a"),KBr=o("from_pretrained()"),ZBr=o(" to load the model weights."),eIr=l(),F(o3.$$.fragment),oIr=l(),Xr=a("div"),F(ox.$$.fragment),rIr=l(),SMe=a("p"),tIr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),aIr=l(),vn=a("p"),nIr=o("The model class to instantiate is selected based on the "),RMe=a("code"),sIr=o("model_type"),lIr=o(` property of the config object (either
passed as an argument or loaded from `),PMe=a("code"),iIr=o("pretrained_model_name_or_path"),dIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=a("code"),cIr=o("pretrained_model_name_or_path"),fIr=o(":"),mIr=l(),xe=a("ul"),r3=a("li"),IMe=a("strong"),gIr=o("albert"),hIr=o(" \u2014 "),mK=a("a"),pIr=o("FlaxAlbertForSequenceClassification"),uIr=o(" (ALBERT model)"),_Ir=l(),t3=a("li"),qMe=a("strong"),bIr=o("bart"),vIr=o(" \u2014 "),gK=a("a"),FIr=o("FlaxBartForSequenceClassification"),TIr=o(" (BART model)"),MIr=l(),a3=a("li"),NMe=a("strong"),EIr=o("bert"),CIr=o(" \u2014 "),hK=a("a"),wIr=o("FlaxBertForSequenceClassification"),AIr=o(" (BERT model)"),yIr=l(),n3=a("li"),jMe=a("strong"),LIr=o("big_bird"),xIr=o(" \u2014 "),pK=a("a"),$Ir=o("FlaxBigBirdForSequenceClassification"),kIr=o(" (BigBird model)"),SIr=l(),s3=a("li"),DMe=a("strong"),RIr=o("distilbert"),PIr=o(" \u2014 "),uK=a("a"),BIr=o("FlaxDistilBertForSequenceClassification"),IIr=o(" (DistilBERT model)"),qIr=l(),l3=a("li"),GMe=a("strong"),NIr=o("electra"),jIr=o(" \u2014 "),_K=a("a"),DIr=o("FlaxElectraForSequenceClassification"),GIr=o(" (ELECTRA model)"),OIr=l(),i3=a("li"),OMe=a("strong"),VIr=o("mbart"),XIr=o(" \u2014 "),bK=a("a"),zIr=o("FlaxMBartForSequenceClassification"),WIr=o(" (mBART model)"),QIr=l(),d3=a("li"),VMe=a("strong"),HIr=o("roberta"),UIr=o(" \u2014 "),vK=a("a"),JIr=o("FlaxRobertaForSequenceClassification"),YIr=o(" (RoBERTa model)"),KIr=l(),c3=a("li"),XMe=a("strong"),ZIr=o("roformer"),eqr=o(" \u2014 "),FK=a("a"),oqr=o("FlaxRoFormerForSequenceClassification"),rqr=o(" (RoFormer model)"),tqr=l(),f3=a("li"),zMe=a("strong"),aqr=o("xlm-roberta"),nqr=o(" \u2014 "),TK=a("a"),sqr=o("FlaxXLMRobertaForSequenceClassification"),lqr=o(" (XLM-RoBERTa model)"),iqr=l(),F(m3.$$.fragment),Qje=l(),Qc=a("h2"),g3=a("a"),WMe=a("span"),F(rx.$$.fragment),dqr=l(),QMe=a("span"),cqr=o("FlaxAutoModelForQuestionAnswering"),Hje=l(),_r=a("div"),F(tx.$$.fragment),fqr=l(),Hc=a("p"),mqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MK=a("a"),gqr=o("from_pretrained()"),hqr=o(" class method or the "),EK=a("a"),pqr=o("from_config()"),uqr=o(` class
method.`),_qr=l(),ax=a("p"),bqr=o("This class cannot be instantiated directly using "),HMe=a("code"),vqr=o("__init__()"),Fqr=o(" (throws an error)."),Tqr=l(),Qt=a("div"),F(nx.$$.fragment),Mqr=l(),UMe=a("p"),Eqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Cqr=l(),Uc=a("p"),wqr=o(`Note:
Loading a model from its configuration file does `),JMe=a("strong"),Aqr=o("not"),yqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=a("a"),Lqr=o("from_pretrained()"),xqr=o(" to load the model weights."),$qr=l(),F(h3.$$.fragment),kqr=l(),zr=a("div"),F(sx.$$.fragment),Sqr=l(),YMe=a("p"),Rqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Pqr=l(),Fn=a("p"),Bqr=o("The model class to instantiate is selected based on the "),KMe=a("code"),Iqr=o("model_type"),qqr=o(` property of the config object (either
passed as an argument or loaded from `),ZMe=a("code"),Nqr=o("pretrained_model_name_or_path"),jqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eEe=a("code"),Dqr=o("pretrained_model_name_or_path"),Gqr=o(":"),Oqr=l(),$e=a("ul"),p3=a("li"),oEe=a("strong"),Vqr=o("albert"),Xqr=o(" \u2014 "),wK=a("a"),zqr=o("FlaxAlbertForQuestionAnswering"),Wqr=o(" (ALBERT model)"),Qqr=l(),u3=a("li"),rEe=a("strong"),Hqr=o("bart"),Uqr=o(" \u2014 "),AK=a("a"),Jqr=o("FlaxBartForQuestionAnswering"),Yqr=o(" (BART model)"),Kqr=l(),_3=a("li"),tEe=a("strong"),Zqr=o("bert"),eNr=o(" \u2014 "),yK=a("a"),oNr=o("FlaxBertForQuestionAnswering"),rNr=o(" (BERT model)"),tNr=l(),b3=a("li"),aEe=a("strong"),aNr=o("big_bird"),nNr=o(" \u2014 "),LK=a("a"),sNr=o("FlaxBigBirdForQuestionAnswering"),lNr=o(" (BigBird model)"),iNr=l(),v3=a("li"),nEe=a("strong"),dNr=o("distilbert"),cNr=o(" \u2014 "),xK=a("a"),fNr=o("FlaxDistilBertForQuestionAnswering"),mNr=o(" (DistilBERT model)"),gNr=l(),F3=a("li"),sEe=a("strong"),hNr=o("electra"),pNr=o(" \u2014 "),$K=a("a"),uNr=o("FlaxElectraForQuestionAnswering"),_Nr=o(" (ELECTRA model)"),bNr=l(),T3=a("li"),lEe=a("strong"),vNr=o("mbart"),FNr=o(" \u2014 "),kK=a("a"),TNr=o("FlaxMBartForQuestionAnswering"),MNr=o(" (mBART model)"),ENr=l(),M3=a("li"),iEe=a("strong"),CNr=o("roberta"),wNr=o(" \u2014 "),SK=a("a"),ANr=o("FlaxRobertaForQuestionAnswering"),yNr=o(" (RoBERTa model)"),LNr=l(),E3=a("li"),dEe=a("strong"),xNr=o("roformer"),$Nr=o(" \u2014 "),RK=a("a"),kNr=o("FlaxRoFormerForQuestionAnswering"),SNr=o(" (RoFormer model)"),RNr=l(),C3=a("li"),cEe=a("strong"),PNr=o("xlm-roberta"),BNr=o(" \u2014 "),PK=a("a"),INr=o("FlaxXLMRobertaForQuestionAnswering"),qNr=o(" (XLM-RoBERTa model)"),NNr=l(),F(w3.$$.fragment),Uje=l(),Jc=a("h2"),A3=a("a"),fEe=a("span"),F(lx.$$.fragment),jNr=l(),mEe=a("span"),DNr=o("FlaxAutoModelForTokenClassification"),Jje=l(),br=a("div"),F(ix.$$.fragment),GNr=l(),Yc=a("p"),ONr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BK=a("a"),VNr=o("from_pretrained()"),XNr=o(" class method or the "),IK=a("a"),zNr=o("from_config()"),WNr=o(` class
method.`),QNr=l(),dx=a("p"),HNr=o("This class cannot be instantiated directly using "),gEe=a("code"),UNr=o("__init__()"),JNr=o(" (throws an error)."),YNr=l(),Ht=a("div"),F(cx.$$.fragment),KNr=l(),hEe=a("p"),ZNr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ejr=l(),Kc=a("p"),ojr=o(`Note:
Loading a model from its configuration file does `),pEe=a("strong"),rjr=o("not"),tjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=a("a"),ajr=o("from_pretrained()"),njr=o(" to load the model weights."),sjr=l(),F(y3.$$.fragment),ljr=l(),Wr=a("div"),F(fx.$$.fragment),ijr=l(),uEe=a("p"),djr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cjr=l(),Tn=a("p"),fjr=o("The model class to instantiate is selected based on the "),_Ee=a("code"),mjr=o("model_type"),gjr=o(` property of the config object (either
passed as an argument or loaded from `),bEe=a("code"),hjr=o("pretrained_model_name_or_path"),pjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=a("code"),ujr=o("pretrained_model_name_or_path"),_jr=o(":"),bjr=l(),De=a("ul"),L3=a("li"),FEe=a("strong"),vjr=o("albert"),Fjr=o(" \u2014 "),NK=a("a"),Tjr=o("FlaxAlbertForTokenClassification"),Mjr=o(" (ALBERT model)"),Ejr=l(),x3=a("li"),TEe=a("strong"),Cjr=o("bert"),wjr=o(" \u2014 "),jK=a("a"),Ajr=o("FlaxBertForTokenClassification"),yjr=o(" (BERT model)"),Ljr=l(),$3=a("li"),MEe=a("strong"),xjr=o("big_bird"),$jr=o(" \u2014 "),DK=a("a"),kjr=o("FlaxBigBirdForTokenClassification"),Sjr=o(" (BigBird model)"),Rjr=l(),k3=a("li"),EEe=a("strong"),Pjr=o("distilbert"),Bjr=o(" \u2014 "),GK=a("a"),Ijr=o("FlaxDistilBertForTokenClassification"),qjr=o(" (DistilBERT model)"),Njr=l(),S3=a("li"),CEe=a("strong"),jjr=o("electra"),Djr=o(" \u2014 "),OK=a("a"),Gjr=o("FlaxElectraForTokenClassification"),Ojr=o(" (ELECTRA model)"),Vjr=l(),R3=a("li"),wEe=a("strong"),Xjr=o("roberta"),zjr=o(" \u2014 "),VK=a("a"),Wjr=o("FlaxRobertaForTokenClassification"),Qjr=o(" (RoBERTa model)"),Hjr=l(),P3=a("li"),AEe=a("strong"),Ujr=o("roformer"),Jjr=o(" \u2014 "),XK=a("a"),Yjr=o("FlaxRoFormerForTokenClassification"),Kjr=o(" (RoFormer model)"),Zjr=l(),B3=a("li"),yEe=a("strong"),eDr=o("xlm-roberta"),oDr=o(" \u2014 "),zK=a("a"),rDr=o("FlaxXLMRobertaForTokenClassification"),tDr=o(" (XLM-RoBERTa model)"),aDr=l(),F(I3.$$.fragment),Yje=l(),Zc=a("h2"),q3=a("a"),LEe=a("span"),F(mx.$$.fragment),nDr=l(),xEe=a("span"),sDr=o("FlaxAutoModelForMultipleChoice"),Kje=l(),vr=a("div"),F(gx.$$.fragment),lDr=l(),ef=a("p"),iDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WK=a("a"),dDr=o("from_pretrained()"),cDr=o(" class method or the "),QK=a("a"),fDr=o("from_config()"),mDr=o(` class
method.`),gDr=l(),hx=a("p"),hDr=o("This class cannot be instantiated directly using "),$Ee=a("code"),pDr=o("__init__()"),uDr=o(" (throws an error)."),_Dr=l(),Ut=a("div"),F(px.$$.fragment),bDr=l(),kEe=a("p"),vDr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),FDr=l(),of=a("p"),TDr=o(`Note:
Loading a model from its configuration file does `),SEe=a("strong"),MDr=o("not"),EDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=a("a"),CDr=o("from_pretrained()"),wDr=o(" to load the model weights."),ADr=l(),F(N3.$$.fragment),yDr=l(),Qr=a("div"),F(ux.$$.fragment),LDr=l(),REe=a("p"),xDr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$Dr=l(),Mn=a("p"),kDr=o("The model class to instantiate is selected based on the "),PEe=a("code"),SDr=o("model_type"),RDr=o(` property of the config object (either
passed as an argument or loaded from `),BEe=a("code"),PDr=o("pretrained_model_name_or_path"),BDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IEe=a("code"),IDr=o("pretrained_model_name_or_path"),qDr=o(":"),NDr=l(),Ge=a("ul"),j3=a("li"),qEe=a("strong"),jDr=o("albert"),DDr=o(" \u2014 "),UK=a("a"),GDr=o("FlaxAlbertForMultipleChoice"),ODr=o(" (ALBERT model)"),VDr=l(),D3=a("li"),NEe=a("strong"),XDr=o("bert"),zDr=o(" \u2014 "),JK=a("a"),WDr=o("FlaxBertForMultipleChoice"),QDr=o(" (BERT model)"),HDr=l(),G3=a("li"),jEe=a("strong"),UDr=o("big_bird"),JDr=o(" \u2014 "),YK=a("a"),YDr=o("FlaxBigBirdForMultipleChoice"),KDr=o(" (BigBird model)"),ZDr=l(),O3=a("li"),DEe=a("strong"),eGr=o("distilbert"),oGr=o(" \u2014 "),KK=a("a"),rGr=o("FlaxDistilBertForMultipleChoice"),tGr=o(" (DistilBERT model)"),aGr=l(),V3=a("li"),GEe=a("strong"),nGr=o("electra"),sGr=o(" \u2014 "),ZK=a("a"),lGr=o("FlaxElectraForMultipleChoice"),iGr=o(" (ELECTRA model)"),dGr=l(),X3=a("li"),OEe=a("strong"),cGr=o("roberta"),fGr=o(" \u2014 "),eZ=a("a"),mGr=o("FlaxRobertaForMultipleChoice"),gGr=o(" (RoBERTa model)"),hGr=l(),z3=a("li"),VEe=a("strong"),pGr=o("roformer"),uGr=o(" \u2014 "),oZ=a("a"),_Gr=o("FlaxRoFormerForMultipleChoice"),bGr=o(" (RoFormer model)"),vGr=l(),W3=a("li"),XEe=a("strong"),FGr=o("xlm-roberta"),TGr=o(" \u2014 "),rZ=a("a"),MGr=o("FlaxXLMRobertaForMultipleChoice"),EGr=o(" (XLM-RoBERTa model)"),CGr=l(),F(Q3.$$.fragment),Zje=l(),rf=a("h2"),H3=a("a"),zEe=a("span"),F(_x.$$.fragment),wGr=l(),WEe=a("span"),AGr=o("FlaxAutoModelForNextSentencePrediction"),eDe=l(),Fr=a("div"),F(bx.$$.fragment),yGr=l(),tf=a("p"),LGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tZ=a("a"),xGr=o("from_pretrained()"),$Gr=o(" class method or the "),aZ=a("a"),kGr=o("from_config()"),SGr=o(` class
method.`),RGr=l(),vx=a("p"),PGr=o("This class cannot be instantiated directly using "),QEe=a("code"),BGr=o("__init__()"),IGr=o(" (throws an error)."),qGr=l(),Jt=a("div"),F(Fx.$$.fragment),NGr=l(),HEe=a("p"),jGr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DGr=l(),af=a("p"),GGr=o(`Note:
Loading a model from its configuration file does `),UEe=a("strong"),OGr=o("not"),VGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=a("a"),XGr=o("from_pretrained()"),zGr=o(" to load the model weights."),WGr=l(),F(U3.$$.fragment),QGr=l(),Hr=a("div"),F(Tx.$$.fragment),HGr=l(),JEe=a("p"),UGr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),JGr=l(),En=a("p"),YGr=o("The model class to instantiate is selected based on the "),YEe=a("code"),KGr=o("model_type"),ZGr=o(` property of the config object (either
passed as an argument or loaded from `),KEe=a("code"),eOr=o("pretrained_model_name_or_path"),oOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZEe=a("code"),rOr=o("pretrained_model_name_or_path"),tOr=o(":"),aOr=l(),eCe=a("ul"),J3=a("li"),oCe=a("strong"),nOr=o("bert"),sOr=o(" \u2014 "),sZ=a("a"),lOr=o("FlaxBertForNextSentencePrediction"),iOr=o(" (BERT model)"),dOr=l(),F(Y3.$$.fragment),oDe=l(),nf=a("h2"),K3=a("a"),rCe=a("span"),F(Mx.$$.fragment),cOr=l(),tCe=a("span"),fOr=o("FlaxAutoModelForImageClassification"),rDe=l(),Tr=a("div"),F(Ex.$$.fragment),mOr=l(),sf=a("p"),gOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lZ=a("a"),hOr=o("from_pretrained()"),pOr=o(" class method or the "),iZ=a("a"),uOr=o("from_config()"),_Or=o(` class
method.`),bOr=l(),Cx=a("p"),vOr=o("This class cannot be instantiated directly using "),aCe=a("code"),FOr=o("__init__()"),TOr=o(" (throws an error)."),MOr=l(),Yt=a("div"),F(wx.$$.fragment),EOr=l(),nCe=a("p"),COr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wOr=l(),lf=a("p"),AOr=o(`Note:
Loading a model from its configuration file does `),sCe=a("strong"),yOr=o("not"),LOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=a("a"),xOr=o("from_pretrained()"),$Or=o(" to load the model weights."),kOr=l(),F(Z3.$$.fragment),SOr=l(),Ur=a("div"),F(Ax.$$.fragment),ROr=l(),lCe=a("p"),POr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),BOr=l(),Cn=a("p"),IOr=o("The model class to instantiate is selected based on the "),iCe=a("code"),qOr=o("model_type"),NOr=o(` property of the config object (either
passed as an argument or loaded from `),dCe=a("code"),jOr=o("pretrained_model_name_or_path"),DOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cCe=a("code"),GOr=o("pretrained_model_name_or_path"),OOr=o(":"),VOr=l(),yx=a("ul"),ew=a("li"),fCe=a("strong"),XOr=o("beit"),zOr=o(" \u2014 "),cZ=a("a"),WOr=o("FlaxBeitForImageClassification"),QOr=o(" (BEiT model)"),HOr=l(),ow=a("li"),mCe=a("strong"),UOr=o("vit"),JOr=o(" \u2014 "),fZ=a("a"),YOr=o("FlaxViTForImageClassification"),KOr=o(" (ViT model)"),ZOr=l(),F(rw.$$.fragment),tDe=l(),df=a("h2"),tw=a("a"),gCe=a("span"),F(Lx.$$.fragment),eVr=l(),hCe=a("span"),oVr=o("FlaxAutoModelForVision2Seq"),aDe=l(),Mr=a("div"),F(xx.$$.fragment),rVr=l(),cf=a("p"),tVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mZ=a("a"),aVr=o("from_pretrained()"),nVr=o(" class method or the "),gZ=a("a"),sVr=o("from_config()"),lVr=o(` class
method.`),iVr=l(),$x=a("p"),dVr=o("This class cannot be instantiated directly using "),pCe=a("code"),cVr=o("__init__()"),fVr=o(" (throws an error)."),mVr=l(),Kt=a("div"),F(kx.$$.fragment),gVr=l(),uCe=a("p"),hVr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pVr=l(),ff=a("p"),uVr=o(`Note:
Loading a model from its configuration file does `),_Ce=a("strong"),_Vr=o("not"),bVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hZ=a("a"),vVr=o("from_pretrained()"),FVr=o(" to load the model weights."),TVr=l(),F(aw.$$.fragment),MVr=l(),Jr=a("div"),F(Sx.$$.fragment),EVr=l(),bCe=a("p"),CVr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wVr=l(),wn=a("p"),AVr=o("The model class to instantiate is selected based on the "),vCe=a("code"),yVr=o("model_type"),LVr=o(` property of the config object (either
passed as an argument or loaded from `),FCe=a("code"),xVr=o("pretrained_model_name_or_path"),$Vr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TCe=a("code"),kVr=o("pretrained_model_name_or_path"),SVr=o(":"),RVr=l(),MCe=a("ul"),nw=a("li"),ECe=a("strong"),PVr=o("vision-encoder-decoder"),BVr=o(" \u2014 "),pZ=a("a"),IVr=o("FlaxVisionEncoderDecoderModel"),qVr=o(" (Vision Encoder decoder model)"),NVr=l(),F(sw.$$.fragment),this.h()},l(f){const _=F$t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Rx=s(p);m=n(Rx,"A",{id:!0,class:!0,href:!0});var CCe=s(m);u=n(CCe,"SPAN",{});var wCe=s(u);T(d.$$.fragment,wCe),wCe.forEach(t),CCe.forEach(t),h=i(Rx),Mo=n(Rx,"SPAN",{});var ACe=s(Mo);fi=r(ACe,"Auto Classes"),ACe.forEach(t),Rx.forEach(t),pf=i(f),rt=n(f,"P",{});var Px=s(rt);mi=r(Px,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(Px,"CODE",{});var yCe=s(gi);C6=r(yCe,"from_pretrained()"),yCe.forEach(t),uf=r(Px,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Px.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var LCe=s(yn);w6=r(LCe,"AutoConfig"),LCe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var xCe=s(xn);A6=r(xCe,"AutoModel"),xCe.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var $Ce=s($n);y6=r($Ce,"AutoTokenizer"),$Ce.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Bx=s(Ae);W$=r(Bx,"will create a model that is an instance of "),_i=n(Bx,"A",{href:!0});var kCe=s(_i);Q$=r(kCe,"BertModel"),kCe.forEach(t),H$=r(Bx,"."),Bx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Ix=s(wa);U$=r(Ix,"There is one class of "),bf=n(Ix,"CODE",{});var SCe=s(bf);J$=r(SCe,"AutoModel"),SCe.forEach(t),gOe=r(Ix," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ix.forEach(t),rNe=i(f),bi=n(f,"H2",{class:!0});var qx=s(bi);vf=n(qx,"A",{id:!0,class:!0,href:!0});var RCe=s(vf);ioe=n(RCe,"SPAN",{});var PCe=s(ioe);T(L6.$$.fragment,PCe),PCe.forEach(t),RCe.forEach(t),hOe=i(qx),doe=n(qx,"SPAN",{});var BCe=s(doe);pOe=r(BCe,"Extending the Auto Classes"),BCe.forEach(t),qx.forEach(t),tNe=i(f),kn=n(f,"P",{});var mf=s(kn);uOe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),coe=n(mf,"CODE",{});var ICe=s(coe);_Oe=r(ICe,"NewModel"),ICe.forEach(t),bOe=r(mf,", make sure you have a "),foe=n(mf,"CODE",{});var qCe=s(foe);vOe=r(qCe,"NewModelConfig"),qCe.forEach(t),FOe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),aNe=i(f),T(x6.$$.fragment,f),nNe=i(f),Y$=n(f,"P",{});var NCe=s(Y$);TOe=r(NCe,"You will then be able to use the auto classes like you would usually do!"),NCe.forEach(t),sNe=i(f),T(Ff.$$.fragment,f),lNe=i(f),vi=n(f,"H2",{class:!0});var Nx=s(vi);Tf=n(Nx,"A",{id:!0,class:!0,href:!0});var jCe=s(Tf);moe=n(jCe,"SPAN",{});var DCe=s(moe);T($6.$$.fragment,DCe),DCe.forEach(t),jCe.forEach(t),MOe=i(Nx),goe=n(Nx,"SPAN",{});var GCe=s(goe);EOe=r(GCe,"AutoConfig"),GCe.forEach(t),Nx.forEach(t),iNe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(k6.$$.fragment,et),COe=i(et),S6=n(et,"P",{});var jx=s(S6);wOe=r(jx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),K$=n(jx,"A",{href:!0});var OCe=s(K$);AOe=r(OCe,"from_pretrained()"),OCe.forEach(t),yOe=r(jx," class method."),jx.forEach(t),LOe=i(et),R6=n(et,"P",{});var Dx=s(R6);xOe=r(Dx,"This class cannot be instantiated directly using "),hoe=n(Dx,"CODE",{});var VCe=s(hoe);$Oe=r(VCe,"__init__()"),VCe.forEach(t),kOe=r(Dx," (throws an error)."),Dx.forEach(t),SOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(P6.$$.fragment,ot),ROe=i(ot),poe=n(ot,"P",{});var XCe=s(poe);POe=r(XCe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),XCe.forEach(t),BOe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);IOe=r(gf,"The configuration class to instantiate is selected based on the "),uoe=n(gf,"CODE",{});var zCe=s(uoe);qOe=r(zCe,"model_type"),zCe.forEach(t),NOe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),_oe=n(gf,"CODE",{});var WCe=s(_oe);jOe=r(WCe,"pretrained_model_name_or_path"),WCe.forEach(t),DOe=r(gf,":"),gf.forEach(t),GOe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var lw=s(Mf);boe=n(lw,"STRONG",{});var QCe=s(boe);OOe=r(QCe,"albert"),QCe.forEach(t),VOe=r(lw," \u2014 "),Z$=n(lw,"A",{href:!0});var HCe=s(Z$);XOe=r(HCe,"AlbertConfig"),HCe.forEach(t),zOe=r(lw," (ALBERT model)"),lw.forEach(t),WOe=i(y),Ef=n(y,"LI",{});var iw=s(Ef);voe=n(iw,"STRONG",{});var UCe=s(voe);QOe=r(UCe,"bart"),UCe.forEach(t),HOe=r(iw," \u2014 "),ek=n(iw,"A",{href:!0});var JCe=s(ek);UOe=r(JCe,"BartConfig"),JCe.forEach(t),JOe=r(iw," (BART model)"),iw.forEach(t),YOe=i(y),Cf=n(y,"LI",{});var dw=s(Cf);Foe=n(dw,"STRONG",{});var YCe=s(Foe);KOe=r(YCe,"beit"),YCe.forEach(t),ZOe=r(dw," \u2014 "),ok=n(dw,"A",{href:!0});var KCe=s(ok);eVe=r(KCe,"BeitConfig"),KCe.forEach(t),oVe=r(dw," (BEiT model)"),dw.forEach(t),rVe=i(y),wf=n(y,"LI",{});var cw=s(wf);Toe=n(cw,"STRONG",{});var ZCe=s(Toe);tVe=r(ZCe,"bert"),ZCe.forEach(t),aVe=r(cw," \u2014 "),rk=n(cw,"A",{href:!0});var e5e=s(rk);nVe=r(e5e,"BertConfig"),e5e.forEach(t),sVe=r(cw," (BERT model)"),cw.forEach(t),lVe=i(y),Af=n(y,"LI",{});var fw=s(Af);Moe=n(fw,"STRONG",{});var o5e=s(Moe);iVe=r(o5e,"bert-generation"),o5e.forEach(t),dVe=r(fw," \u2014 "),tk=n(fw,"A",{href:!0});var r5e=s(tk);cVe=r(r5e,"BertGenerationConfig"),r5e.forEach(t),fVe=r(fw," (Bert Generation model)"),fw.forEach(t),mVe=i(y),yf=n(y,"LI",{});var mw=s(yf);Eoe=n(mw,"STRONG",{});var t5e=s(Eoe);gVe=r(t5e,"big_bird"),t5e.forEach(t),hVe=r(mw," \u2014 "),ak=n(mw,"A",{href:!0});var a5e=s(ak);pVe=r(a5e,"BigBirdConfig"),a5e.forEach(t),uVe=r(mw," (BigBird model)"),mw.forEach(t),_Ve=i(y),Lf=n(y,"LI",{});var gw=s(Lf);Coe=n(gw,"STRONG",{});var n5e=s(Coe);bVe=r(n5e,"bigbird_pegasus"),n5e.forEach(t),vVe=r(gw," \u2014 "),nk=n(gw,"A",{href:!0});var s5e=s(nk);FVe=r(s5e,"BigBirdPegasusConfig"),s5e.forEach(t),TVe=r(gw," (BigBirdPegasus model)"),gw.forEach(t),MVe=i(y),xf=n(y,"LI",{});var hw=s(xf);woe=n(hw,"STRONG",{});var l5e=s(woe);EVe=r(l5e,"blenderbot"),l5e.forEach(t),CVe=r(hw," \u2014 "),sk=n(hw,"A",{href:!0});var i5e=s(sk);wVe=r(i5e,"BlenderbotConfig"),i5e.forEach(t),AVe=r(hw," (Blenderbot model)"),hw.forEach(t),yVe=i(y),$f=n(y,"LI",{});var pw=s($f);Aoe=n(pw,"STRONG",{});var d5e=s(Aoe);LVe=r(d5e,"blenderbot-small"),d5e.forEach(t),xVe=r(pw," \u2014 "),lk=n(pw,"A",{href:!0});var c5e=s(lk);$Ve=r(c5e,"BlenderbotSmallConfig"),c5e.forEach(t),kVe=r(pw," (BlenderbotSmall model)"),pw.forEach(t),SVe=i(y),kf=n(y,"LI",{});var uw=s(kf);yoe=n(uw,"STRONG",{});var f5e=s(yoe);RVe=r(f5e,"camembert"),f5e.forEach(t),PVe=r(uw," \u2014 "),ik=n(uw,"A",{href:!0});var m5e=s(ik);BVe=r(m5e,"CamembertConfig"),m5e.forEach(t),IVe=r(uw," (CamemBERT model)"),uw.forEach(t),qVe=i(y),Sf=n(y,"LI",{});var _w=s(Sf);Loe=n(_w,"STRONG",{});var g5e=s(Loe);NVe=r(g5e,"canine"),g5e.forEach(t),jVe=r(_w," \u2014 "),dk=n(_w,"A",{href:!0});var h5e=s(dk);DVe=r(h5e,"CanineConfig"),h5e.forEach(t),GVe=r(_w," (Canine model)"),_w.forEach(t),OVe=i(y),Rf=n(y,"LI",{});var bw=s(Rf);xoe=n(bw,"STRONG",{});var p5e=s(xoe);VVe=r(p5e,"clip"),p5e.forEach(t),XVe=r(bw," \u2014 "),ck=n(bw,"A",{href:!0});var u5e=s(ck);zVe=r(u5e,"CLIPConfig"),u5e.forEach(t),WVe=r(bw," (CLIP model)"),bw.forEach(t),QVe=i(y),Pf=n(y,"LI",{});var vw=s(Pf);$oe=n(vw,"STRONG",{});var _5e=s($oe);HVe=r(_5e,"convbert"),_5e.forEach(t),UVe=r(vw," \u2014 "),fk=n(vw,"A",{href:!0});var b5e=s(fk);JVe=r(b5e,"ConvBertConfig"),b5e.forEach(t),YVe=r(vw," (ConvBERT model)"),vw.forEach(t),KVe=i(y),Bf=n(y,"LI",{});var Fw=s(Bf);koe=n(Fw,"STRONG",{});var v5e=s(koe);ZVe=r(v5e,"convnext"),v5e.forEach(t),eXe=r(Fw," \u2014 "),mk=n(Fw,"A",{href:!0});var F5e=s(mk);oXe=r(F5e,"ConvNextConfig"),F5e.forEach(t),rXe=r(Fw," (ConvNext model)"),Fw.forEach(t),tXe=i(y),If=n(y,"LI",{});var Tw=s(If);Soe=n(Tw,"STRONG",{});var T5e=s(Soe);aXe=r(T5e,"ctrl"),T5e.forEach(t),nXe=r(Tw," \u2014 "),gk=n(Tw,"A",{href:!0});var M5e=s(gk);sXe=r(M5e,"CTRLConfig"),M5e.forEach(t),lXe=r(Tw," (CTRL model)"),Tw.forEach(t),iXe=i(y),qf=n(y,"LI",{});var Mw=s(qf);Roe=n(Mw,"STRONG",{});var E5e=s(Roe);dXe=r(E5e,"cvt"),E5e.forEach(t),cXe=r(Mw," \u2014 "),hk=n(Mw,"A",{href:!0});var C5e=s(hk);fXe=r(C5e,"CvtConfig"),C5e.forEach(t),mXe=r(Mw," (CvT model)"),Mw.forEach(t),gXe=i(y),Nf=n(y,"LI",{});var Ew=s(Nf);Poe=n(Ew,"STRONG",{});var w5e=s(Poe);hXe=r(w5e,"data2vec-audio"),w5e.forEach(t),pXe=r(Ew," \u2014 "),pk=n(Ew,"A",{href:!0});var A5e=s(pk);uXe=r(A5e,"Data2VecAudioConfig"),A5e.forEach(t),_Xe=r(Ew," (Data2VecAudio model)"),Ew.forEach(t),bXe=i(y),jf=n(y,"LI",{});var Cw=s(jf);Boe=n(Cw,"STRONG",{});var y5e=s(Boe);vXe=r(y5e,"data2vec-text"),y5e.forEach(t),FXe=r(Cw," \u2014 "),uk=n(Cw,"A",{href:!0});var L5e=s(uk);TXe=r(L5e,"Data2VecTextConfig"),L5e.forEach(t),MXe=r(Cw," (Data2VecText model)"),Cw.forEach(t),EXe=i(y),Df=n(y,"LI",{});var ww=s(Df);Ioe=n(ww,"STRONG",{});var x5e=s(Ioe);CXe=r(x5e,"data2vec-vision"),x5e.forEach(t),wXe=r(ww," \u2014 "),_k=n(ww,"A",{href:!0});var $5e=s(_k);AXe=r($5e,"Data2VecVisionConfig"),$5e.forEach(t),yXe=r(ww," (Data2VecVision model)"),ww.forEach(t),LXe=i(y),Gf=n(y,"LI",{});var Aw=s(Gf);qoe=n(Aw,"STRONG",{});var k5e=s(qoe);xXe=r(k5e,"deberta"),k5e.forEach(t),$Xe=r(Aw," \u2014 "),bk=n(Aw,"A",{href:!0});var S5e=s(bk);kXe=r(S5e,"DebertaConfig"),S5e.forEach(t),SXe=r(Aw," (DeBERTa model)"),Aw.forEach(t),RXe=i(y),Of=n(y,"LI",{});var yw=s(Of);Noe=n(yw,"STRONG",{});var R5e=s(Noe);PXe=r(R5e,"deberta-v2"),R5e.forEach(t),BXe=r(yw," \u2014 "),vk=n(yw,"A",{href:!0});var P5e=s(vk);IXe=r(P5e,"DebertaV2Config"),P5e.forEach(t),qXe=r(yw," (DeBERTa-v2 model)"),yw.forEach(t),NXe=i(y),Vf=n(y,"LI",{});var Lw=s(Vf);joe=n(Lw,"STRONG",{});var B5e=s(joe);jXe=r(B5e,"decision_transformer"),B5e.forEach(t),DXe=r(Lw," \u2014 "),Fk=n(Lw,"A",{href:!0});var I5e=s(Fk);GXe=r(I5e,"DecisionTransformerConfig"),I5e.forEach(t),OXe=r(Lw," (Decision Transformer model)"),Lw.forEach(t),VXe=i(y),Xf=n(y,"LI",{});var xw=s(Xf);Doe=n(xw,"STRONG",{});var q5e=s(Doe);XXe=r(q5e,"deit"),q5e.forEach(t),zXe=r(xw," \u2014 "),Tk=n(xw,"A",{href:!0});var DVr=s(Tk);WXe=r(DVr,"DeiTConfig"),DVr.forEach(t),QXe=r(xw," (DeiT model)"),xw.forEach(t),HXe=i(y),zf=n(y,"LI",{});var N5e=s(zf);Goe=n(N5e,"STRONG",{});var GVr=s(Goe);UXe=r(GVr,"detr"),GVr.forEach(t),JXe=r(N5e," \u2014 "),Mk=n(N5e,"A",{href:!0});var OVr=s(Mk);YXe=r(OVr,"DetrConfig"),OVr.forEach(t),KXe=r(N5e," (DETR model)"),N5e.forEach(t),ZXe=i(y),Wf=n(y,"LI",{});var j5e=s(Wf);Ooe=n(j5e,"STRONG",{});var VVr=s(Ooe);eze=r(VVr,"distilbert"),VVr.forEach(t),oze=r(j5e," \u2014 "),Ek=n(j5e,"A",{href:!0});var XVr=s(Ek);rze=r(XVr,"DistilBertConfig"),XVr.forEach(t),tze=r(j5e," (DistilBERT model)"),j5e.forEach(t),aze=i(y),Qf=n(y,"LI",{});var D5e=s(Qf);Voe=n(D5e,"STRONG",{});var zVr=s(Voe);nze=r(zVr,"dpr"),zVr.forEach(t),sze=r(D5e," \u2014 "),Ck=n(D5e,"A",{href:!0});var WVr=s(Ck);lze=r(WVr,"DPRConfig"),WVr.forEach(t),ize=r(D5e," (DPR model)"),D5e.forEach(t),dze=i(y),Hf=n(y,"LI",{});var G5e=s(Hf);Xoe=n(G5e,"STRONG",{});var QVr=s(Xoe);cze=r(QVr,"dpt"),QVr.forEach(t),fze=r(G5e," \u2014 "),wk=n(G5e,"A",{href:!0});var HVr=s(wk);mze=r(HVr,"DPTConfig"),HVr.forEach(t),gze=r(G5e," (DPT model)"),G5e.forEach(t),hze=i(y),Uf=n(y,"LI",{});var O5e=s(Uf);zoe=n(O5e,"STRONG",{});var UVr=s(zoe);pze=r(UVr,"electra"),UVr.forEach(t),uze=r(O5e," \u2014 "),Ak=n(O5e,"A",{href:!0});var JVr=s(Ak);_ze=r(JVr,"ElectraConfig"),JVr.forEach(t),bze=r(O5e," (ELECTRA model)"),O5e.forEach(t),vze=i(y),Jf=n(y,"LI",{});var V5e=s(Jf);Woe=n(V5e,"STRONG",{});var YVr=s(Woe);Fze=r(YVr,"encoder-decoder"),YVr.forEach(t),Tze=r(V5e," \u2014 "),yk=n(V5e,"A",{href:!0});var KVr=s(yk);Mze=r(KVr,"EncoderDecoderConfig"),KVr.forEach(t),Eze=r(V5e," (Encoder decoder model)"),V5e.forEach(t),Cze=i(y),Yf=n(y,"LI",{});var X5e=s(Yf);Qoe=n(X5e,"STRONG",{});var ZVr=s(Qoe);wze=r(ZVr,"flaubert"),ZVr.forEach(t),Aze=r(X5e," \u2014 "),Lk=n(X5e,"A",{href:!0});var eXr=s(Lk);yze=r(eXr,"FlaubertConfig"),eXr.forEach(t),Lze=r(X5e," (FlauBERT model)"),X5e.forEach(t),xze=i(y),Kf=n(y,"LI",{});var z5e=s(Kf);Hoe=n(z5e,"STRONG",{});var oXr=s(Hoe);$ze=r(oXr,"flava"),oXr.forEach(t),kze=r(z5e," \u2014 "),xk=n(z5e,"A",{href:!0});var rXr=s(xk);Sze=r(rXr,"FlavaConfig"),rXr.forEach(t),Rze=r(z5e," (Flava model)"),z5e.forEach(t),Pze=i(y),Zf=n(y,"LI",{});var W5e=s(Zf);Uoe=n(W5e,"STRONG",{});var tXr=s(Uoe);Bze=r(tXr,"fnet"),tXr.forEach(t),Ize=r(W5e," \u2014 "),$k=n(W5e,"A",{href:!0});var aXr=s($k);qze=r(aXr,"FNetConfig"),aXr.forEach(t),Nze=r(W5e," (FNet model)"),W5e.forEach(t),jze=i(y),em=n(y,"LI",{});var Q5e=s(em);Joe=n(Q5e,"STRONG",{});var nXr=s(Joe);Dze=r(nXr,"fsmt"),nXr.forEach(t),Gze=r(Q5e," \u2014 "),kk=n(Q5e,"A",{href:!0});var sXr=s(kk);Oze=r(sXr,"FSMTConfig"),sXr.forEach(t),Vze=r(Q5e," (FairSeq Machine-Translation model)"),Q5e.forEach(t),Xze=i(y),om=n(y,"LI",{});var H5e=s(om);Yoe=n(H5e,"STRONG",{});var lXr=s(Yoe);zze=r(lXr,"funnel"),lXr.forEach(t),Wze=r(H5e," \u2014 "),Sk=n(H5e,"A",{href:!0});var iXr=s(Sk);Qze=r(iXr,"FunnelConfig"),iXr.forEach(t),Hze=r(H5e," (Funnel Transformer model)"),H5e.forEach(t),Uze=i(y),rm=n(y,"LI",{});var U5e=s(rm);Koe=n(U5e,"STRONG",{});var dXr=s(Koe);Jze=r(dXr,"glpn"),dXr.forEach(t),Yze=r(U5e," \u2014 "),Rk=n(U5e,"A",{href:!0});var cXr=s(Rk);Kze=r(cXr,"GLPNConfig"),cXr.forEach(t),Zze=r(U5e," (GLPN model)"),U5e.forEach(t),eWe=i(y),tm=n(y,"LI",{});var J5e=s(tm);Zoe=n(J5e,"STRONG",{});var fXr=s(Zoe);oWe=r(fXr,"gpt2"),fXr.forEach(t),rWe=r(J5e," \u2014 "),Pk=n(J5e,"A",{href:!0});var mXr=s(Pk);tWe=r(mXr,"GPT2Config"),mXr.forEach(t),aWe=r(J5e," (OpenAI GPT-2 model)"),J5e.forEach(t),nWe=i(y),am=n(y,"LI",{});var Y5e=s(am);ere=n(Y5e,"STRONG",{});var gXr=s(ere);sWe=r(gXr,"gpt_neo"),gXr.forEach(t),lWe=r(Y5e," \u2014 "),Bk=n(Y5e,"A",{href:!0});var hXr=s(Bk);iWe=r(hXr,"GPTNeoConfig"),hXr.forEach(t),dWe=r(Y5e," (GPT Neo model)"),Y5e.forEach(t),cWe=i(y),nm=n(y,"LI",{});var K5e=s(nm);ore=n(K5e,"STRONG",{});var pXr=s(ore);fWe=r(pXr,"gpt_neox"),pXr.forEach(t),mWe=r(K5e," \u2014 "),Ik=n(K5e,"A",{href:!0});var uXr=s(Ik);gWe=r(uXr,"GPTNeoXConfig"),uXr.forEach(t),hWe=r(K5e," (GPT NeoX model)"),K5e.forEach(t),pWe=i(y),sm=n(y,"LI",{});var Z5e=s(sm);rre=n(Z5e,"STRONG",{});var _Xr=s(rre);uWe=r(_Xr,"gptj"),_Xr.forEach(t),_We=r(Z5e," \u2014 "),qk=n(Z5e,"A",{href:!0});var bXr=s(qk);bWe=r(bXr,"GPTJConfig"),bXr.forEach(t),vWe=r(Z5e," (GPT-J model)"),Z5e.forEach(t),FWe=i(y),lm=n(y,"LI",{});var e3e=s(lm);tre=n(e3e,"STRONG",{});var vXr=s(tre);TWe=r(vXr,"hubert"),vXr.forEach(t),MWe=r(e3e," \u2014 "),Nk=n(e3e,"A",{href:!0});var FXr=s(Nk);EWe=r(FXr,"HubertConfig"),FXr.forEach(t),CWe=r(e3e," (Hubert model)"),e3e.forEach(t),wWe=i(y),im=n(y,"LI",{});var o3e=s(im);are=n(o3e,"STRONG",{});var TXr=s(are);AWe=r(TXr,"ibert"),TXr.forEach(t),yWe=r(o3e," \u2014 "),jk=n(o3e,"A",{href:!0});var MXr=s(jk);LWe=r(MXr,"IBertConfig"),MXr.forEach(t),xWe=r(o3e," (I-BERT model)"),o3e.forEach(t),$We=i(y),dm=n(y,"LI",{});var r3e=s(dm);nre=n(r3e,"STRONG",{});var EXr=s(nre);kWe=r(EXr,"imagegpt"),EXr.forEach(t),SWe=r(r3e," \u2014 "),Dk=n(r3e,"A",{href:!0});var CXr=s(Dk);RWe=r(CXr,"ImageGPTConfig"),CXr.forEach(t),PWe=r(r3e," (ImageGPT model)"),r3e.forEach(t),BWe=i(y),cm=n(y,"LI",{});var t3e=s(cm);sre=n(t3e,"STRONG",{});var wXr=s(sre);IWe=r(wXr,"layoutlm"),wXr.forEach(t),qWe=r(t3e," \u2014 "),Gk=n(t3e,"A",{href:!0});var AXr=s(Gk);NWe=r(AXr,"LayoutLMConfig"),AXr.forEach(t),jWe=r(t3e," (LayoutLM model)"),t3e.forEach(t),DWe=i(y),fm=n(y,"LI",{});var a3e=s(fm);lre=n(a3e,"STRONG",{});var yXr=s(lre);GWe=r(yXr,"layoutlmv2"),yXr.forEach(t),OWe=r(a3e," \u2014 "),Ok=n(a3e,"A",{href:!0});var LXr=s(Ok);VWe=r(LXr,"LayoutLMv2Config"),LXr.forEach(t),XWe=r(a3e," (LayoutLMv2 model)"),a3e.forEach(t),zWe=i(y),mm=n(y,"LI",{});var n3e=s(mm);ire=n(n3e,"STRONG",{});var xXr=s(ire);WWe=r(xXr,"layoutlmv3"),xXr.forEach(t),QWe=r(n3e," \u2014 "),Vk=n(n3e,"A",{href:!0});var $Xr=s(Vk);HWe=r($Xr,"LayoutLMv3Config"),$Xr.forEach(t),UWe=r(n3e," (LayoutLMv3 model)"),n3e.forEach(t),JWe=i(y),gm=n(y,"LI",{});var s3e=s(gm);dre=n(s3e,"STRONG",{});var kXr=s(dre);YWe=r(kXr,"led"),kXr.forEach(t),KWe=r(s3e," \u2014 "),Xk=n(s3e,"A",{href:!0});var SXr=s(Xk);ZWe=r(SXr,"LEDConfig"),SXr.forEach(t),eQe=r(s3e," (LED model)"),s3e.forEach(t),oQe=i(y),hm=n(y,"LI",{});var l3e=s(hm);cre=n(l3e,"STRONG",{});var RXr=s(cre);rQe=r(RXr,"longformer"),RXr.forEach(t),tQe=r(l3e," \u2014 "),zk=n(l3e,"A",{href:!0});var PXr=s(zk);aQe=r(PXr,"LongformerConfig"),PXr.forEach(t),nQe=r(l3e," (Longformer model)"),l3e.forEach(t),sQe=i(y),pm=n(y,"LI",{});var i3e=s(pm);fre=n(i3e,"STRONG",{});var BXr=s(fre);lQe=r(BXr,"luke"),BXr.forEach(t),iQe=r(i3e," \u2014 "),Wk=n(i3e,"A",{href:!0});var IXr=s(Wk);dQe=r(IXr,"LukeConfig"),IXr.forEach(t),cQe=r(i3e," (LUKE model)"),i3e.forEach(t),fQe=i(y),um=n(y,"LI",{});var d3e=s(um);mre=n(d3e,"STRONG",{});var qXr=s(mre);mQe=r(qXr,"lxmert"),qXr.forEach(t),gQe=r(d3e," \u2014 "),Qk=n(d3e,"A",{href:!0});var NXr=s(Qk);hQe=r(NXr,"LxmertConfig"),NXr.forEach(t),pQe=r(d3e," (LXMERT model)"),d3e.forEach(t),uQe=i(y),_m=n(y,"LI",{});var c3e=s(_m);gre=n(c3e,"STRONG",{});var jXr=s(gre);_Qe=r(jXr,"m2m_100"),jXr.forEach(t),bQe=r(c3e," \u2014 "),Hk=n(c3e,"A",{href:!0});var DXr=s(Hk);vQe=r(DXr,"M2M100Config"),DXr.forEach(t),FQe=r(c3e," (M2M100 model)"),c3e.forEach(t),TQe=i(y),bm=n(y,"LI",{});var f3e=s(bm);hre=n(f3e,"STRONG",{});var GXr=s(hre);MQe=r(GXr,"marian"),GXr.forEach(t),EQe=r(f3e," \u2014 "),Uk=n(f3e,"A",{href:!0});var OXr=s(Uk);CQe=r(OXr,"MarianConfig"),OXr.forEach(t),wQe=r(f3e," (Marian model)"),f3e.forEach(t),AQe=i(y),vm=n(y,"LI",{});var m3e=s(vm);pre=n(m3e,"STRONG",{});var VXr=s(pre);yQe=r(VXr,"maskformer"),VXr.forEach(t),LQe=r(m3e," \u2014 "),Jk=n(m3e,"A",{href:!0});var XXr=s(Jk);xQe=r(XXr,"MaskFormerConfig"),XXr.forEach(t),$Qe=r(m3e," (MaskFormer model)"),m3e.forEach(t),kQe=i(y),Fm=n(y,"LI",{});var g3e=s(Fm);ure=n(g3e,"STRONG",{});var zXr=s(ure);SQe=r(zXr,"mbart"),zXr.forEach(t),RQe=r(g3e," \u2014 "),Yk=n(g3e,"A",{href:!0});var WXr=s(Yk);PQe=r(WXr,"MBartConfig"),WXr.forEach(t),BQe=r(g3e," (mBART model)"),g3e.forEach(t),IQe=i(y),Tm=n(y,"LI",{});var h3e=s(Tm);_re=n(h3e,"STRONG",{});var QXr=s(_re);qQe=r(QXr,"megatron-bert"),QXr.forEach(t),NQe=r(h3e," \u2014 "),Kk=n(h3e,"A",{href:!0});var HXr=s(Kk);jQe=r(HXr,"MegatronBertConfig"),HXr.forEach(t),DQe=r(h3e," (MegatronBert model)"),h3e.forEach(t),GQe=i(y),Mm=n(y,"LI",{});var p3e=s(Mm);bre=n(p3e,"STRONG",{});var UXr=s(bre);OQe=r(UXr,"mobilebert"),UXr.forEach(t),VQe=r(p3e," \u2014 "),Zk=n(p3e,"A",{href:!0});var JXr=s(Zk);XQe=r(JXr,"MobileBertConfig"),JXr.forEach(t),zQe=r(p3e," (MobileBERT model)"),p3e.forEach(t),WQe=i(y),Em=n(y,"LI",{});var u3e=s(Em);vre=n(u3e,"STRONG",{});var YXr=s(vre);QQe=r(YXr,"mpnet"),YXr.forEach(t),HQe=r(u3e," \u2014 "),eS=n(u3e,"A",{href:!0});var KXr=s(eS);UQe=r(KXr,"MPNetConfig"),KXr.forEach(t),JQe=r(u3e," (MPNet model)"),u3e.forEach(t),YQe=i(y),Cm=n(y,"LI",{});var _3e=s(Cm);Fre=n(_3e,"STRONG",{});var ZXr=s(Fre);KQe=r(ZXr,"mt5"),ZXr.forEach(t),ZQe=r(_3e," \u2014 "),oS=n(_3e,"A",{href:!0});var ezr=s(oS);eHe=r(ezr,"MT5Config"),ezr.forEach(t),oHe=r(_3e," (mT5 model)"),_3e.forEach(t),rHe=i(y),wm=n(y,"LI",{});var b3e=s(wm);Tre=n(b3e,"STRONG",{});var ozr=s(Tre);tHe=r(ozr,"nystromformer"),ozr.forEach(t),aHe=r(b3e," \u2014 "),rS=n(b3e,"A",{href:!0});var rzr=s(rS);nHe=r(rzr,"NystromformerConfig"),rzr.forEach(t),sHe=r(b3e," (Nystromformer model)"),b3e.forEach(t),lHe=i(y),Am=n(y,"LI",{});var v3e=s(Am);Mre=n(v3e,"STRONG",{});var tzr=s(Mre);iHe=r(tzr,"openai-gpt"),tzr.forEach(t),dHe=r(v3e," \u2014 "),tS=n(v3e,"A",{href:!0});var azr=s(tS);cHe=r(azr,"OpenAIGPTConfig"),azr.forEach(t),fHe=r(v3e," (OpenAI GPT model)"),v3e.forEach(t),mHe=i(y),ym=n(y,"LI",{});var F3e=s(ym);Ere=n(F3e,"STRONG",{});var nzr=s(Ere);gHe=r(nzr,"opt"),nzr.forEach(t),hHe=r(F3e," \u2014 "),aS=n(F3e,"A",{href:!0});var szr=s(aS);pHe=r(szr,"OPTConfig"),szr.forEach(t),uHe=r(F3e," (OPT model)"),F3e.forEach(t),_He=i(y),Lm=n(y,"LI",{});var T3e=s(Lm);Cre=n(T3e,"STRONG",{});var lzr=s(Cre);bHe=r(lzr,"pegasus"),lzr.forEach(t),vHe=r(T3e," \u2014 "),nS=n(T3e,"A",{href:!0});var izr=s(nS);FHe=r(izr,"PegasusConfig"),izr.forEach(t),THe=r(T3e," (Pegasus model)"),T3e.forEach(t),MHe=i(y),xm=n(y,"LI",{});var M3e=s(xm);wre=n(M3e,"STRONG",{});var dzr=s(wre);EHe=r(dzr,"perceiver"),dzr.forEach(t),CHe=r(M3e," \u2014 "),sS=n(M3e,"A",{href:!0});var czr=s(sS);wHe=r(czr,"PerceiverConfig"),czr.forEach(t),AHe=r(M3e," (Perceiver model)"),M3e.forEach(t),yHe=i(y),$m=n(y,"LI",{});var E3e=s($m);Are=n(E3e,"STRONG",{});var fzr=s(Are);LHe=r(fzr,"plbart"),fzr.forEach(t),xHe=r(E3e," \u2014 "),lS=n(E3e,"A",{href:!0});var mzr=s(lS);$He=r(mzr,"PLBartConfig"),mzr.forEach(t),kHe=r(E3e," (PLBart model)"),E3e.forEach(t),SHe=i(y),km=n(y,"LI",{});var C3e=s(km);yre=n(C3e,"STRONG",{});var gzr=s(yre);RHe=r(gzr,"poolformer"),gzr.forEach(t),PHe=r(C3e," \u2014 "),iS=n(C3e,"A",{href:!0});var hzr=s(iS);BHe=r(hzr,"PoolFormerConfig"),hzr.forEach(t),IHe=r(C3e," (PoolFormer model)"),C3e.forEach(t),qHe=i(y),Sm=n(y,"LI",{});var w3e=s(Sm);Lre=n(w3e,"STRONG",{});var pzr=s(Lre);NHe=r(pzr,"prophetnet"),pzr.forEach(t),jHe=r(w3e," \u2014 "),dS=n(w3e,"A",{href:!0});var uzr=s(dS);DHe=r(uzr,"ProphetNetConfig"),uzr.forEach(t),GHe=r(w3e," (ProphetNet model)"),w3e.forEach(t),OHe=i(y),Rm=n(y,"LI",{});var A3e=s(Rm);xre=n(A3e,"STRONG",{});var _zr=s(xre);VHe=r(_zr,"qdqbert"),_zr.forEach(t),XHe=r(A3e," \u2014 "),cS=n(A3e,"A",{href:!0});var bzr=s(cS);zHe=r(bzr,"QDQBertConfig"),bzr.forEach(t),WHe=r(A3e," (QDQBert model)"),A3e.forEach(t),QHe=i(y),Pm=n(y,"LI",{});var y3e=s(Pm);$re=n(y3e,"STRONG",{});var vzr=s($re);HHe=r(vzr,"rag"),vzr.forEach(t),UHe=r(y3e," \u2014 "),fS=n(y3e,"A",{href:!0});var Fzr=s(fS);JHe=r(Fzr,"RagConfig"),Fzr.forEach(t),YHe=r(y3e," (RAG model)"),y3e.forEach(t),KHe=i(y),Bm=n(y,"LI",{});var L3e=s(Bm);kre=n(L3e,"STRONG",{});var Tzr=s(kre);ZHe=r(Tzr,"realm"),Tzr.forEach(t),eUe=r(L3e," \u2014 "),mS=n(L3e,"A",{href:!0});var Mzr=s(mS);oUe=r(Mzr,"RealmConfig"),Mzr.forEach(t),rUe=r(L3e," (Realm model)"),L3e.forEach(t),tUe=i(y),Im=n(y,"LI",{});var x3e=s(Im);Sre=n(x3e,"STRONG",{});var Ezr=s(Sre);aUe=r(Ezr,"reformer"),Ezr.forEach(t),nUe=r(x3e," \u2014 "),gS=n(x3e,"A",{href:!0});var Czr=s(gS);sUe=r(Czr,"ReformerConfig"),Czr.forEach(t),lUe=r(x3e," (Reformer model)"),x3e.forEach(t),iUe=i(y),qm=n(y,"LI",{});var $3e=s(qm);Rre=n($3e,"STRONG",{});var wzr=s(Rre);dUe=r(wzr,"regnet"),wzr.forEach(t),cUe=r($3e," \u2014 "),hS=n($3e,"A",{href:!0});var Azr=s(hS);fUe=r(Azr,"RegNetConfig"),Azr.forEach(t),mUe=r($3e," (RegNet model)"),$3e.forEach(t),gUe=i(y),Nm=n(y,"LI",{});var k3e=s(Nm);Pre=n(k3e,"STRONG",{});var yzr=s(Pre);hUe=r(yzr,"rembert"),yzr.forEach(t),pUe=r(k3e," \u2014 "),pS=n(k3e,"A",{href:!0});var Lzr=s(pS);uUe=r(Lzr,"RemBertConfig"),Lzr.forEach(t),_Ue=r(k3e," (RemBERT model)"),k3e.forEach(t),bUe=i(y),jm=n(y,"LI",{});var S3e=s(jm);Bre=n(S3e,"STRONG",{});var xzr=s(Bre);vUe=r(xzr,"resnet"),xzr.forEach(t),FUe=r(S3e," \u2014 "),uS=n(S3e,"A",{href:!0});var $zr=s(uS);TUe=r($zr,"ResNetConfig"),$zr.forEach(t),MUe=r(S3e," (ResNet model)"),S3e.forEach(t),EUe=i(y),Dm=n(y,"LI",{});var R3e=s(Dm);Ire=n(R3e,"STRONG",{});var kzr=s(Ire);CUe=r(kzr,"retribert"),kzr.forEach(t),wUe=r(R3e," \u2014 "),_S=n(R3e,"A",{href:!0});var Szr=s(_S);AUe=r(Szr,"RetriBertConfig"),Szr.forEach(t),yUe=r(R3e," (RetriBERT model)"),R3e.forEach(t),LUe=i(y),Gm=n(y,"LI",{});var P3e=s(Gm);qre=n(P3e,"STRONG",{});var Rzr=s(qre);xUe=r(Rzr,"roberta"),Rzr.forEach(t),$Ue=r(P3e," \u2014 "),bS=n(P3e,"A",{href:!0});var Pzr=s(bS);kUe=r(Pzr,"RobertaConfig"),Pzr.forEach(t),SUe=r(P3e," (RoBERTa model)"),P3e.forEach(t),RUe=i(y),Om=n(y,"LI",{});var B3e=s(Om);Nre=n(B3e,"STRONG",{});var Bzr=s(Nre);PUe=r(Bzr,"roformer"),Bzr.forEach(t),BUe=r(B3e," \u2014 "),vS=n(B3e,"A",{href:!0});var Izr=s(vS);IUe=r(Izr,"RoFormerConfig"),Izr.forEach(t),qUe=r(B3e," (RoFormer model)"),B3e.forEach(t),NUe=i(y),Vm=n(y,"LI",{});var I3e=s(Vm);jre=n(I3e,"STRONG",{});var qzr=s(jre);jUe=r(qzr,"segformer"),qzr.forEach(t),DUe=r(I3e," \u2014 "),FS=n(I3e,"A",{href:!0});var Nzr=s(FS);GUe=r(Nzr,"SegformerConfig"),Nzr.forEach(t),OUe=r(I3e," (SegFormer model)"),I3e.forEach(t),VUe=i(y),Xm=n(y,"LI",{});var q3e=s(Xm);Dre=n(q3e,"STRONG",{});var jzr=s(Dre);XUe=r(jzr,"sew"),jzr.forEach(t),zUe=r(q3e," \u2014 "),TS=n(q3e,"A",{href:!0});var Dzr=s(TS);WUe=r(Dzr,"SEWConfig"),Dzr.forEach(t),QUe=r(q3e," (SEW model)"),q3e.forEach(t),HUe=i(y),zm=n(y,"LI",{});var N3e=s(zm);Gre=n(N3e,"STRONG",{});var Gzr=s(Gre);UUe=r(Gzr,"sew-d"),Gzr.forEach(t),JUe=r(N3e," \u2014 "),MS=n(N3e,"A",{href:!0});var Ozr=s(MS);YUe=r(Ozr,"SEWDConfig"),Ozr.forEach(t),KUe=r(N3e," (SEW-D model)"),N3e.forEach(t),ZUe=i(y),Wm=n(y,"LI",{});var j3e=s(Wm);Ore=n(j3e,"STRONG",{});var Vzr=s(Ore);eJe=r(Vzr,"speech-encoder-decoder"),Vzr.forEach(t),oJe=r(j3e," \u2014 "),ES=n(j3e,"A",{href:!0});var Xzr=s(ES);rJe=r(Xzr,"SpeechEncoderDecoderConfig"),Xzr.forEach(t),tJe=r(j3e," (Speech Encoder decoder model)"),j3e.forEach(t),aJe=i(y),Qm=n(y,"LI",{});var D3e=s(Qm);Vre=n(D3e,"STRONG",{});var zzr=s(Vre);nJe=r(zzr,"speech_to_text"),zzr.forEach(t),sJe=r(D3e," \u2014 "),CS=n(D3e,"A",{href:!0});var Wzr=s(CS);lJe=r(Wzr,"Speech2TextConfig"),Wzr.forEach(t),iJe=r(D3e," (Speech2Text model)"),D3e.forEach(t),dJe=i(y),Hm=n(y,"LI",{});var G3e=s(Hm);Xre=n(G3e,"STRONG",{});var Qzr=s(Xre);cJe=r(Qzr,"speech_to_text_2"),Qzr.forEach(t),fJe=r(G3e," \u2014 "),wS=n(G3e,"A",{href:!0});var Hzr=s(wS);mJe=r(Hzr,"Speech2Text2Config"),Hzr.forEach(t),gJe=r(G3e," (Speech2Text2 model)"),G3e.forEach(t),hJe=i(y),Um=n(y,"LI",{});var O3e=s(Um);zre=n(O3e,"STRONG",{});var Uzr=s(zre);pJe=r(Uzr,"splinter"),Uzr.forEach(t),uJe=r(O3e," \u2014 "),AS=n(O3e,"A",{href:!0});var Jzr=s(AS);_Je=r(Jzr,"SplinterConfig"),Jzr.forEach(t),bJe=r(O3e," (Splinter model)"),O3e.forEach(t),vJe=i(y),Jm=n(y,"LI",{});var V3e=s(Jm);Wre=n(V3e,"STRONG",{});var Yzr=s(Wre);FJe=r(Yzr,"squeezebert"),Yzr.forEach(t),TJe=r(V3e," \u2014 "),yS=n(V3e,"A",{href:!0});var Kzr=s(yS);MJe=r(Kzr,"SqueezeBertConfig"),Kzr.forEach(t),EJe=r(V3e," (SqueezeBERT model)"),V3e.forEach(t),CJe=i(y),Ym=n(y,"LI",{});var X3e=s(Ym);Qre=n(X3e,"STRONG",{});var Zzr=s(Qre);wJe=r(Zzr,"swin"),Zzr.forEach(t),AJe=r(X3e," \u2014 "),LS=n(X3e,"A",{href:!0});var eWr=s(LS);yJe=r(eWr,"SwinConfig"),eWr.forEach(t),LJe=r(X3e," (Swin model)"),X3e.forEach(t),xJe=i(y),Km=n(y,"LI",{});var z3e=s(Km);Hre=n(z3e,"STRONG",{});var oWr=s(Hre);$Je=r(oWr,"t5"),oWr.forEach(t),kJe=r(z3e," \u2014 "),xS=n(z3e,"A",{href:!0});var rWr=s(xS);SJe=r(rWr,"T5Config"),rWr.forEach(t),RJe=r(z3e," (T5 model)"),z3e.forEach(t),PJe=i(y),Zm=n(y,"LI",{});var W3e=s(Zm);Ure=n(W3e,"STRONG",{});var tWr=s(Ure);BJe=r(tWr,"tapas"),tWr.forEach(t),IJe=r(W3e," \u2014 "),$S=n(W3e,"A",{href:!0});var aWr=s($S);qJe=r(aWr,"TapasConfig"),aWr.forEach(t),NJe=r(W3e," (TAPAS model)"),W3e.forEach(t),jJe=i(y),eg=n(y,"LI",{});var Q3e=s(eg);Jre=n(Q3e,"STRONG",{});var nWr=s(Jre);DJe=r(nWr,"trajectory_transformer"),nWr.forEach(t),GJe=r(Q3e," \u2014 "),kS=n(Q3e,"A",{href:!0});var sWr=s(kS);OJe=r(sWr,"TrajectoryTransformerConfig"),sWr.forEach(t),VJe=r(Q3e," (Trajectory Transformer model)"),Q3e.forEach(t),XJe=i(y),og=n(y,"LI",{});var H3e=s(og);Yre=n(H3e,"STRONG",{});var lWr=s(Yre);zJe=r(lWr,"transfo-xl"),lWr.forEach(t),WJe=r(H3e," \u2014 "),SS=n(H3e,"A",{href:!0});var iWr=s(SS);QJe=r(iWr,"TransfoXLConfig"),iWr.forEach(t),HJe=r(H3e," (Transformer-XL model)"),H3e.forEach(t),UJe=i(y),rg=n(y,"LI",{});var U3e=s(rg);Kre=n(U3e,"STRONG",{});var dWr=s(Kre);JJe=r(dWr,"trocr"),dWr.forEach(t),YJe=r(U3e," \u2014 "),RS=n(U3e,"A",{href:!0});var cWr=s(RS);KJe=r(cWr,"TrOCRConfig"),cWr.forEach(t),ZJe=r(U3e," (TrOCR model)"),U3e.forEach(t),eYe=i(y),tg=n(y,"LI",{});var J3e=s(tg);Zre=n(J3e,"STRONG",{});var fWr=s(Zre);oYe=r(fWr,"unispeech"),fWr.forEach(t),rYe=r(J3e," \u2014 "),PS=n(J3e,"A",{href:!0});var mWr=s(PS);tYe=r(mWr,"UniSpeechConfig"),mWr.forEach(t),aYe=r(J3e," (UniSpeech model)"),J3e.forEach(t),nYe=i(y),ag=n(y,"LI",{});var Y3e=s(ag);ete=n(Y3e,"STRONG",{});var gWr=s(ete);sYe=r(gWr,"unispeech-sat"),gWr.forEach(t),lYe=r(Y3e," \u2014 "),BS=n(Y3e,"A",{href:!0});var hWr=s(BS);iYe=r(hWr,"UniSpeechSatConfig"),hWr.forEach(t),dYe=r(Y3e," (UniSpeechSat model)"),Y3e.forEach(t),cYe=i(y),ng=n(y,"LI",{});var K3e=s(ng);ote=n(K3e,"STRONG",{});var pWr=s(ote);fYe=r(pWr,"van"),pWr.forEach(t),mYe=r(K3e," \u2014 "),IS=n(K3e,"A",{href:!0});var uWr=s(IS);gYe=r(uWr,"VanConfig"),uWr.forEach(t),hYe=r(K3e," (VAN model)"),K3e.forEach(t),pYe=i(y),sg=n(y,"LI",{});var Z3e=s(sg);rte=n(Z3e,"STRONG",{});var _Wr=s(rte);uYe=r(_Wr,"vilt"),_Wr.forEach(t),_Ye=r(Z3e," \u2014 "),qS=n(Z3e,"A",{href:!0});var bWr=s(qS);bYe=r(bWr,"ViltConfig"),bWr.forEach(t),vYe=r(Z3e," (ViLT model)"),Z3e.forEach(t),FYe=i(y),lg=n(y,"LI",{});var ewe=s(lg);tte=n(ewe,"STRONG",{});var vWr=s(tte);TYe=r(vWr,"vision-encoder-decoder"),vWr.forEach(t),MYe=r(ewe," \u2014 "),NS=n(ewe,"A",{href:!0});var FWr=s(NS);EYe=r(FWr,"VisionEncoderDecoderConfig"),FWr.forEach(t),CYe=r(ewe," (Vision Encoder decoder model)"),ewe.forEach(t),wYe=i(y),ig=n(y,"LI",{});var owe=s(ig);ate=n(owe,"STRONG",{});var TWr=s(ate);AYe=r(TWr,"vision-text-dual-encoder"),TWr.forEach(t),yYe=r(owe," \u2014 "),jS=n(owe,"A",{href:!0});var MWr=s(jS);LYe=r(MWr,"VisionTextDualEncoderConfig"),MWr.forEach(t),xYe=r(owe," (VisionTextDualEncoder model)"),owe.forEach(t),$Ye=i(y),dg=n(y,"LI",{});var rwe=s(dg);nte=n(rwe,"STRONG",{});var EWr=s(nte);kYe=r(EWr,"visual_bert"),EWr.forEach(t),SYe=r(rwe," \u2014 "),DS=n(rwe,"A",{href:!0});var CWr=s(DS);RYe=r(CWr,"VisualBertConfig"),CWr.forEach(t),PYe=r(rwe," (VisualBert model)"),rwe.forEach(t),BYe=i(y),cg=n(y,"LI",{});var twe=s(cg);ste=n(twe,"STRONG",{});var wWr=s(ste);IYe=r(wWr,"vit"),wWr.forEach(t),qYe=r(twe," \u2014 "),GS=n(twe,"A",{href:!0});var AWr=s(GS);NYe=r(AWr,"ViTConfig"),AWr.forEach(t),jYe=r(twe," (ViT model)"),twe.forEach(t),DYe=i(y),fg=n(y,"LI",{});var awe=s(fg);lte=n(awe,"STRONG",{});var yWr=s(lte);GYe=r(yWr,"vit_mae"),yWr.forEach(t),OYe=r(awe," \u2014 "),OS=n(awe,"A",{href:!0});var LWr=s(OS);VYe=r(LWr,"ViTMAEConfig"),LWr.forEach(t),XYe=r(awe," (ViTMAE model)"),awe.forEach(t),zYe=i(y),mg=n(y,"LI",{});var nwe=s(mg);ite=n(nwe,"STRONG",{});var xWr=s(ite);WYe=r(xWr,"wav2vec2"),xWr.forEach(t),QYe=r(nwe," \u2014 "),VS=n(nwe,"A",{href:!0});var $Wr=s(VS);HYe=r($Wr,"Wav2Vec2Config"),$Wr.forEach(t),UYe=r(nwe," (Wav2Vec2 model)"),nwe.forEach(t),JYe=i(y),gg=n(y,"LI",{});var swe=s(gg);dte=n(swe,"STRONG",{});var kWr=s(dte);YYe=r(kWr,"wav2vec2-conformer"),kWr.forEach(t),KYe=r(swe," \u2014 "),XS=n(swe,"A",{href:!0});var SWr=s(XS);ZYe=r(SWr,"Wav2Vec2ConformerConfig"),SWr.forEach(t),eKe=r(swe," (Wav2Vec2-Conformer model)"),swe.forEach(t),oKe=i(y),hg=n(y,"LI",{});var lwe=s(hg);cte=n(lwe,"STRONG",{});var RWr=s(cte);rKe=r(RWr,"wavlm"),RWr.forEach(t),tKe=r(lwe," \u2014 "),zS=n(lwe,"A",{href:!0});var PWr=s(zS);aKe=r(PWr,"WavLMConfig"),PWr.forEach(t),nKe=r(lwe," (WavLM model)"),lwe.forEach(t),sKe=i(y),pg=n(y,"LI",{});var iwe=s(pg);fte=n(iwe,"STRONG",{});var BWr=s(fte);lKe=r(BWr,"xglm"),BWr.forEach(t),iKe=r(iwe," \u2014 "),WS=n(iwe,"A",{href:!0});var IWr=s(WS);dKe=r(IWr,"XGLMConfig"),IWr.forEach(t),cKe=r(iwe," (XGLM model)"),iwe.forEach(t),fKe=i(y),ug=n(y,"LI",{});var dwe=s(ug);mte=n(dwe,"STRONG",{});var qWr=s(mte);mKe=r(qWr,"xlm"),qWr.forEach(t),gKe=r(dwe," \u2014 "),QS=n(dwe,"A",{href:!0});var NWr=s(QS);hKe=r(NWr,"XLMConfig"),NWr.forEach(t),pKe=r(dwe," (XLM model)"),dwe.forEach(t),uKe=i(y),_g=n(y,"LI",{});var cwe=s(_g);gte=n(cwe,"STRONG",{});var jWr=s(gte);_Ke=r(jWr,"xlm-prophetnet"),jWr.forEach(t),bKe=r(cwe," \u2014 "),HS=n(cwe,"A",{href:!0});var DWr=s(HS);vKe=r(DWr,"XLMProphetNetConfig"),DWr.forEach(t),FKe=r(cwe," (XLMProphetNet model)"),cwe.forEach(t),TKe=i(y),bg=n(y,"LI",{});var fwe=s(bg);hte=n(fwe,"STRONG",{});var GWr=s(hte);MKe=r(GWr,"xlm-roberta"),GWr.forEach(t),EKe=r(fwe," \u2014 "),US=n(fwe,"A",{href:!0});var OWr=s(US);CKe=r(OWr,"XLMRobertaConfig"),OWr.forEach(t),wKe=r(fwe," (XLM-RoBERTa model)"),fwe.forEach(t),AKe=i(y),vg=n(y,"LI",{});var mwe=s(vg);pte=n(mwe,"STRONG",{});var VWr=s(pte);yKe=r(VWr,"xlm-roberta-xl"),VWr.forEach(t),LKe=r(mwe," \u2014 "),JS=n(mwe,"A",{href:!0});var XWr=s(JS);xKe=r(XWr,"XLMRobertaXLConfig"),XWr.forEach(t),$Ke=r(mwe," (XLM-RoBERTa-XL model)"),mwe.forEach(t),kKe=i(y),Fg=n(y,"LI",{});var gwe=s(Fg);ute=n(gwe,"STRONG",{});var zWr=s(ute);SKe=r(zWr,"xlnet"),zWr.forEach(t),RKe=r(gwe," \u2014 "),YS=n(gwe,"A",{href:!0});var WWr=s(YS);PKe=r(WWr,"XLNetConfig"),WWr.forEach(t),BKe=r(gwe," (XLNet model)"),gwe.forEach(t),IKe=i(y),Tg=n(y,"LI",{});var hwe=s(Tg);_te=n(hwe,"STRONG",{});var QWr=s(_te);qKe=r(QWr,"yolos"),QWr.forEach(t),NKe=r(hwe," \u2014 "),KS=n(hwe,"A",{href:!0});var HWr=s(KS);jKe=r(HWr,"YolosConfig"),HWr.forEach(t),DKe=r(hwe," (YOLOS model)"),hwe.forEach(t),GKe=i(y),Mg=n(y,"LI",{});var pwe=s(Mg);bte=n(pwe,"STRONG",{});var UWr=s(bte);OKe=r(UWr,"yoso"),UWr.forEach(t),VKe=r(pwe," \u2014 "),ZS=n(pwe,"A",{href:!0});var JWr=s(ZS);XKe=r(JWr,"YosoConfig"),JWr.forEach(t),zKe=r(pwe," (YOSO model)"),pwe.forEach(t),y.forEach(t),WKe=i(ot),T(Eg.$$.fragment,ot),ot.forEach(t),QKe=i(et),Cg=n(et,"DIV",{class:!0});var sDe=s(Cg);T(B6.$$.fragment,sDe),HKe=i(sDe),vte=n(sDe,"P",{});var YWr=s(vte);UKe=r(YWr,"Register a new configuration for this class."),YWr.forEach(t),sDe.forEach(t),et.forEach(t),dNe=i(f),Ti=n(f,"H2",{class:!0});var lDe=s(Ti);wg=n(lDe,"A",{id:!0,class:!0,href:!0});var KWr=s(wg);Fte=n(KWr,"SPAN",{});var ZWr=s(Fte);T(I6.$$.fragment,ZWr),ZWr.forEach(t),KWr.forEach(t),JKe=i(lDe),Tte=n(lDe,"SPAN",{});var eQr=s(Tte);YKe=r(eQr,"AutoTokenizer"),eQr.forEach(t),lDe.forEach(t),cNe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(q6.$$.fragment,qs),KKe=i(qs),N6=n(qs,"P",{});var iDe=s(N6);ZKe=r(iDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),eR=n(iDe,"A",{href:!0});var oQr=s(eR);eZe=r(oQr,"AutoTokenizer.from_pretrained()"),oQr.forEach(t),oZe=r(iDe," class method."),iDe.forEach(t),rZe=i(qs),j6=n(qs,"P",{});var dDe=s(j6);tZe=r(dDe,"This class cannot be instantiated directly using "),Mte=n(dDe,"CODE",{});var rQr=s(Mte);aZe=r(rQr,"__init__()"),rQr.forEach(t),nZe=r(dDe," (throws an error)."),dDe.forEach(t),sZe=i(qs),Cr=n(qs,"DIV",{class:!0});var Ns=s(Cr);T(D6.$$.fragment,Ns),lZe=i(Ns),Ete=n(Ns,"P",{});var tQr=s(Ete);iZe=r(tQr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),tQr.forEach(t),dZe=i(Ns),Aa=n(Ns,"P",{});var $w=s(Aa);cZe=r($w,"The tokenizer class to instantiate is selected based on the "),Cte=n($w,"CODE",{});var aQr=s(Cte);fZe=r(aQr,"model_type"),aQr.forEach(t),mZe=r($w,` property of the config object (either
passed as an argument or loaded from `),wte=n($w,"CODE",{});var nQr=s(wte);gZe=r(nQr,"pretrained_model_name_or_path"),nQr.forEach(t),hZe=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ate=n($w,"CODE",{});var sQr=s(Ate);pZe=r(sQr,"pretrained_model_name_or_path"),sQr.forEach(t),uZe=r($w,":"),$w.forEach(t),_Ze=i(Ns),k=n(Ns,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Gx=s(Sn);yte=n(Gx,"STRONG",{});var lQr=s(yte);bZe=r(lQr,"albert"),lQr.forEach(t),vZe=r(Gx," \u2014 "),oR=n(Gx,"A",{href:!0});var iQr=s(oR);FZe=r(iQr,"AlbertTokenizer"),iQr.forEach(t),TZe=r(Gx," or "),rR=n(Gx,"A",{href:!0});var dQr=s(rR);MZe=r(dQr,"AlbertTokenizerFast"),dQr.forEach(t),EZe=r(Gx," (ALBERT model)"),Gx.forEach(t),CZe=i(S),Rn=n(S,"LI",{});var Ox=s(Rn);Lte=n(Ox,"STRONG",{});var cQr=s(Lte);wZe=r(cQr,"bart"),cQr.forEach(t),AZe=r(Ox," \u2014 "),tR=n(Ox,"A",{href:!0});var fQr=s(tR);yZe=r(fQr,"BartTokenizer"),fQr.forEach(t),LZe=r(Ox," or "),aR=n(Ox,"A",{href:!0});var mQr=s(aR);xZe=r(mQr,"BartTokenizerFast"),mQr.forEach(t),$Ze=r(Ox," (BART model)"),Ox.forEach(t),kZe=i(S),Pn=n(S,"LI",{});var Vx=s(Pn);xte=n(Vx,"STRONG",{});var gQr=s(xte);SZe=r(gQr,"barthez"),gQr.forEach(t),RZe=r(Vx," \u2014 "),nR=n(Vx,"A",{href:!0});var hQr=s(nR);PZe=r(hQr,"BarthezTokenizer"),hQr.forEach(t),BZe=r(Vx," or "),sR=n(Vx,"A",{href:!0});var pQr=s(sR);IZe=r(pQr,"BarthezTokenizerFast"),pQr.forEach(t),qZe=r(Vx," (BARThez model)"),Vx.forEach(t),NZe=i(S),Ag=n(S,"LI",{});var uwe=s(Ag);$te=n(uwe,"STRONG",{});var uQr=s($te);jZe=r(uQr,"bartpho"),uQr.forEach(t),DZe=r(uwe," \u2014 "),lR=n(uwe,"A",{href:!0});var _Qr=s(lR);GZe=r(_Qr,"BartphoTokenizer"),_Qr.forEach(t),OZe=r(uwe," (BARTpho model)"),uwe.forEach(t),VZe=i(S),Bn=n(S,"LI",{});var Xx=s(Bn);kte=n(Xx,"STRONG",{});var bQr=s(kte);XZe=r(bQr,"bert"),bQr.forEach(t),zZe=r(Xx," \u2014 "),iR=n(Xx,"A",{href:!0});var vQr=s(iR);WZe=r(vQr,"BertTokenizer"),vQr.forEach(t),QZe=r(Xx," or "),dR=n(Xx,"A",{href:!0});var FQr=s(dR);HZe=r(FQr,"BertTokenizerFast"),FQr.forEach(t),UZe=r(Xx," (BERT model)"),Xx.forEach(t),JZe=i(S),yg=n(S,"LI",{});var _we=s(yg);Ste=n(_we,"STRONG",{});var TQr=s(Ste);YZe=r(TQr,"bert-generation"),TQr.forEach(t),KZe=r(_we," \u2014 "),cR=n(_we,"A",{href:!0});var MQr=s(cR);ZZe=r(MQr,"BertGenerationTokenizer"),MQr.forEach(t),eeo=r(_we," (Bert Generation model)"),_we.forEach(t),oeo=i(S),Lg=n(S,"LI",{});var bwe=s(Lg);Rte=n(bwe,"STRONG",{});var EQr=s(Rte);reo=r(EQr,"bert-japanese"),EQr.forEach(t),teo=r(bwe," \u2014 "),fR=n(bwe,"A",{href:!0});var CQr=s(fR);aeo=r(CQr,"BertJapaneseTokenizer"),CQr.forEach(t),neo=r(bwe," (BertJapanese model)"),bwe.forEach(t),seo=i(S),xg=n(S,"LI",{});var vwe=s(xg);Pte=n(vwe,"STRONG",{});var wQr=s(Pte);leo=r(wQr,"bertweet"),wQr.forEach(t),ieo=r(vwe," \u2014 "),mR=n(vwe,"A",{href:!0});var AQr=s(mR);deo=r(AQr,"BertweetTokenizer"),AQr.forEach(t),ceo=r(vwe," (Bertweet model)"),vwe.forEach(t),feo=i(S),In=n(S,"LI",{});var zx=s(In);Bte=n(zx,"STRONG",{});var yQr=s(Bte);meo=r(yQr,"big_bird"),yQr.forEach(t),geo=r(zx," \u2014 "),gR=n(zx,"A",{href:!0});var LQr=s(gR);heo=r(LQr,"BigBirdTokenizer"),LQr.forEach(t),peo=r(zx," or "),hR=n(zx,"A",{href:!0});var xQr=s(hR);ueo=r(xQr,"BigBirdTokenizerFast"),xQr.forEach(t),_eo=r(zx," (BigBird model)"),zx.forEach(t),beo=i(S),qn=n(S,"LI",{});var Wx=s(qn);Ite=n(Wx,"STRONG",{});var $Qr=s(Ite);veo=r($Qr,"bigbird_pegasus"),$Qr.forEach(t),Feo=r(Wx," \u2014 "),pR=n(Wx,"A",{href:!0});var kQr=s(pR);Teo=r(kQr,"PegasusTokenizer"),kQr.forEach(t),Meo=r(Wx," or "),uR=n(Wx,"A",{href:!0});var SQr=s(uR);Eeo=r(SQr,"PegasusTokenizerFast"),SQr.forEach(t),Ceo=r(Wx," (BigBirdPegasus model)"),Wx.forEach(t),weo=i(S),Nn=n(S,"LI",{});var Qx=s(Nn);qte=n(Qx,"STRONG",{});var RQr=s(qte);Aeo=r(RQr,"blenderbot"),RQr.forEach(t),yeo=r(Qx," \u2014 "),_R=n(Qx,"A",{href:!0});var PQr=s(_R);Leo=r(PQr,"BlenderbotTokenizer"),PQr.forEach(t),xeo=r(Qx," or "),bR=n(Qx,"A",{href:!0});var BQr=s(bR);$eo=r(BQr,"BlenderbotTokenizerFast"),BQr.forEach(t),keo=r(Qx," (Blenderbot model)"),Qx.forEach(t),Seo=i(S),$g=n(S,"LI",{});var Fwe=s($g);Nte=n(Fwe,"STRONG",{});var IQr=s(Nte);Reo=r(IQr,"blenderbot-small"),IQr.forEach(t),Peo=r(Fwe," \u2014 "),vR=n(Fwe,"A",{href:!0});var qQr=s(vR);Beo=r(qQr,"BlenderbotSmallTokenizer"),qQr.forEach(t),Ieo=r(Fwe," (BlenderbotSmall model)"),Fwe.forEach(t),qeo=i(S),kg=n(S,"LI",{});var Twe=s(kg);jte=n(Twe,"STRONG",{});var NQr=s(jte);Neo=r(NQr,"byt5"),NQr.forEach(t),jeo=r(Twe," \u2014 "),FR=n(Twe,"A",{href:!0});var jQr=s(FR);Deo=r(jQr,"ByT5Tokenizer"),jQr.forEach(t),Geo=r(Twe," (ByT5 model)"),Twe.forEach(t),Oeo=i(S),jn=n(S,"LI",{});var Hx=s(jn);Dte=n(Hx,"STRONG",{});var DQr=s(Dte);Veo=r(DQr,"camembert"),DQr.forEach(t),Xeo=r(Hx," \u2014 "),TR=n(Hx,"A",{href:!0});var GQr=s(TR);zeo=r(GQr,"CamembertTokenizer"),GQr.forEach(t),Weo=r(Hx," or "),MR=n(Hx,"A",{href:!0});var OQr=s(MR);Qeo=r(OQr,"CamembertTokenizerFast"),OQr.forEach(t),Heo=r(Hx," (CamemBERT model)"),Hx.forEach(t),Ueo=i(S),Sg=n(S,"LI",{});var Mwe=s(Sg);Gte=n(Mwe,"STRONG",{});var VQr=s(Gte);Jeo=r(VQr,"canine"),VQr.forEach(t),Yeo=r(Mwe," \u2014 "),ER=n(Mwe,"A",{href:!0});var XQr=s(ER);Keo=r(XQr,"CanineTokenizer"),XQr.forEach(t),Zeo=r(Mwe," (Canine model)"),Mwe.forEach(t),eoo=i(S),Dn=n(S,"LI",{});var Ux=s(Dn);Ote=n(Ux,"STRONG",{});var zQr=s(Ote);ooo=r(zQr,"clip"),zQr.forEach(t),roo=r(Ux," \u2014 "),CR=n(Ux,"A",{href:!0});var WQr=s(CR);too=r(WQr,"CLIPTokenizer"),WQr.forEach(t),aoo=r(Ux," or "),wR=n(Ux,"A",{href:!0});var QQr=s(wR);noo=r(QQr,"CLIPTokenizerFast"),QQr.forEach(t),soo=r(Ux," (CLIP model)"),Ux.forEach(t),loo=i(S),Gn=n(S,"LI",{});var Jx=s(Gn);Vte=n(Jx,"STRONG",{});var HQr=s(Vte);ioo=r(HQr,"convbert"),HQr.forEach(t),doo=r(Jx," \u2014 "),AR=n(Jx,"A",{href:!0});var UQr=s(AR);coo=r(UQr,"ConvBertTokenizer"),UQr.forEach(t),foo=r(Jx," or "),yR=n(Jx,"A",{href:!0});var JQr=s(yR);moo=r(JQr,"ConvBertTokenizerFast"),JQr.forEach(t),goo=r(Jx," (ConvBERT model)"),Jx.forEach(t),hoo=i(S),On=n(S,"LI",{});var Yx=s(On);Xte=n(Yx,"STRONG",{});var YQr=s(Xte);poo=r(YQr,"cpm"),YQr.forEach(t),uoo=r(Yx," \u2014 "),LR=n(Yx,"A",{href:!0});var KQr=s(LR);_oo=r(KQr,"CpmTokenizer"),KQr.forEach(t),boo=r(Yx," or "),xR=n(Yx,"A",{href:!0});var ZQr=s(xR);voo=r(ZQr,"CpmTokenizerFast"),ZQr.forEach(t),Foo=r(Yx," (CPM model)"),Yx.forEach(t),Too=i(S),Rg=n(S,"LI",{});var Ewe=s(Rg);zte=n(Ewe,"STRONG",{});var eHr=s(zte);Moo=r(eHr,"ctrl"),eHr.forEach(t),Eoo=r(Ewe," \u2014 "),$R=n(Ewe,"A",{href:!0});var oHr=s($R);Coo=r(oHr,"CTRLTokenizer"),oHr.forEach(t),woo=r(Ewe," (CTRL model)"),Ewe.forEach(t),Aoo=i(S),Vn=n(S,"LI",{});var Kx=s(Vn);Wte=n(Kx,"STRONG",{});var rHr=s(Wte);yoo=r(rHr,"data2vec-text"),rHr.forEach(t),Loo=r(Kx," \u2014 "),kR=n(Kx,"A",{href:!0});var tHr=s(kR);xoo=r(tHr,"RobertaTokenizer"),tHr.forEach(t),$oo=r(Kx," or "),SR=n(Kx,"A",{href:!0});var aHr=s(SR);koo=r(aHr,"RobertaTokenizerFast"),aHr.forEach(t),Soo=r(Kx," (Data2VecText model)"),Kx.forEach(t),Roo=i(S),Xn=n(S,"LI",{});var Zx=s(Xn);Qte=n(Zx,"STRONG",{});var nHr=s(Qte);Poo=r(nHr,"deberta"),nHr.forEach(t),Boo=r(Zx," \u2014 "),RR=n(Zx,"A",{href:!0});var sHr=s(RR);Ioo=r(sHr,"DebertaTokenizer"),sHr.forEach(t),qoo=r(Zx," or "),PR=n(Zx,"A",{href:!0});var lHr=s(PR);Noo=r(lHr,"DebertaTokenizerFast"),lHr.forEach(t),joo=r(Zx," (DeBERTa model)"),Zx.forEach(t),Doo=i(S),zn=n(S,"LI",{});var e$=s(zn);Hte=n(e$,"STRONG",{});var iHr=s(Hte);Goo=r(iHr,"deberta-v2"),iHr.forEach(t),Ooo=r(e$," \u2014 "),BR=n(e$,"A",{href:!0});var dHr=s(BR);Voo=r(dHr,"DebertaV2Tokenizer"),dHr.forEach(t),Xoo=r(e$," or "),IR=n(e$,"A",{href:!0});var cHr=s(IR);zoo=r(cHr,"DebertaV2TokenizerFast"),cHr.forEach(t),Woo=r(e$," (DeBERTa-v2 model)"),e$.forEach(t),Qoo=i(S),Wn=n(S,"LI",{});var o$=s(Wn);Ute=n(o$,"STRONG",{});var fHr=s(Ute);Hoo=r(fHr,"distilbert"),fHr.forEach(t),Uoo=r(o$," \u2014 "),qR=n(o$,"A",{href:!0});var mHr=s(qR);Joo=r(mHr,"DistilBertTokenizer"),mHr.forEach(t),Yoo=r(o$," or "),NR=n(o$,"A",{href:!0});var gHr=s(NR);Koo=r(gHr,"DistilBertTokenizerFast"),gHr.forEach(t),Zoo=r(o$," (DistilBERT model)"),o$.forEach(t),ero=i(S),Qn=n(S,"LI",{});var r$=s(Qn);Jte=n(r$,"STRONG",{});var hHr=s(Jte);oro=r(hHr,"dpr"),hHr.forEach(t),rro=r(r$," \u2014 "),jR=n(r$,"A",{href:!0});var pHr=s(jR);tro=r(pHr,"DPRQuestionEncoderTokenizer"),pHr.forEach(t),aro=r(r$," or "),DR=n(r$,"A",{href:!0});var uHr=s(DR);nro=r(uHr,"DPRQuestionEncoderTokenizerFast"),uHr.forEach(t),sro=r(r$," (DPR model)"),r$.forEach(t),lro=i(S),Hn=n(S,"LI",{});var t$=s(Hn);Yte=n(t$,"STRONG",{});var _Hr=s(Yte);iro=r(_Hr,"electra"),_Hr.forEach(t),dro=r(t$," \u2014 "),GR=n(t$,"A",{href:!0});var bHr=s(GR);cro=r(bHr,"ElectraTokenizer"),bHr.forEach(t),fro=r(t$," or "),OR=n(t$,"A",{href:!0});var vHr=s(OR);mro=r(vHr,"ElectraTokenizerFast"),vHr.forEach(t),gro=r(t$," (ELECTRA model)"),t$.forEach(t),hro=i(S),Pg=n(S,"LI",{});var Cwe=s(Pg);Kte=n(Cwe,"STRONG",{});var FHr=s(Kte);pro=r(FHr,"flaubert"),FHr.forEach(t),uro=r(Cwe," \u2014 "),VR=n(Cwe,"A",{href:!0});var THr=s(VR);_ro=r(THr,"FlaubertTokenizer"),THr.forEach(t),bro=r(Cwe," (FlauBERT model)"),Cwe.forEach(t),vro=i(S),Un=n(S,"LI",{});var a$=s(Un);Zte=n(a$,"STRONG",{});var MHr=s(Zte);Fro=r(MHr,"fnet"),MHr.forEach(t),Tro=r(a$," \u2014 "),XR=n(a$,"A",{href:!0});var EHr=s(XR);Mro=r(EHr,"FNetTokenizer"),EHr.forEach(t),Ero=r(a$," or "),zR=n(a$,"A",{href:!0});var CHr=s(zR);Cro=r(CHr,"FNetTokenizerFast"),CHr.forEach(t),wro=r(a$," (FNet model)"),a$.forEach(t),Aro=i(S),Bg=n(S,"LI",{});var wwe=s(Bg);eae=n(wwe,"STRONG",{});var wHr=s(eae);yro=r(wHr,"fsmt"),wHr.forEach(t),Lro=r(wwe," \u2014 "),WR=n(wwe,"A",{href:!0});var AHr=s(WR);xro=r(AHr,"FSMTTokenizer"),AHr.forEach(t),$ro=r(wwe," (FairSeq Machine-Translation model)"),wwe.forEach(t),kro=i(S),Jn=n(S,"LI",{});var n$=s(Jn);oae=n(n$,"STRONG",{});var yHr=s(oae);Sro=r(yHr,"funnel"),yHr.forEach(t),Rro=r(n$," \u2014 "),QR=n(n$,"A",{href:!0});var LHr=s(QR);Pro=r(LHr,"FunnelTokenizer"),LHr.forEach(t),Bro=r(n$," or "),HR=n(n$,"A",{href:!0});var xHr=s(HR);Iro=r(xHr,"FunnelTokenizerFast"),xHr.forEach(t),qro=r(n$," (Funnel Transformer model)"),n$.forEach(t),Nro=i(S),Yn=n(S,"LI",{});var s$=s(Yn);rae=n(s$,"STRONG",{});var $Hr=s(rae);jro=r($Hr,"gpt2"),$Hr.forEach(t),Dro=r(s$," \u2014 "),UR=n(s$,"A",{href:!0});var kHr=s(UR);Gro=r(kHr,"GPT2Tokenizer"),kHr.forEach(t),Oro=r(s$," or "),JR=n(s$,"A",{href:!0});var SHr=s(JR);Vro=r(SHr,"GPT2TokenizerFast"),SHr.forEach(t),Xro=r(s$," (OpenAI GPT-2 model)"),s$.forEach(t),zro=i(S),Kn=n(S,"LI",{});var l$=s(Kn);tae=n(l$,"STRONG",{});var RHr=s(tae);Wro=r(RHr,"gpt_neo"),RHr.forEach(t),Qro=r(l$," \u2014 "),YR=n(l$,"A",{href:!0});var PHr=s(YR);Hro=r(PHr,"GPT2Tokenizer"),PHr.forEach(t),Uro=r(l$," or "),KR=n(l$,"A",{href:!0});var BHr=s(KR);Jro=r(BHr,"GPT2TokenizerFast"),BHr.forEach(t),Yro=r(l$," (GPT Neo model)"),l$.forEach(t),Kro=i(S),Ig=n(S,"LI",{});var Awe=s(Ig);aae=n(Awe,"STRONG",{});var IHr=s(aae);Zro=r(IHr,"gpt_neox"),IHr.forEach(t),eto=r(Awe," \u2014 "),ZR=n(Awe,"A",{href:!0});var qHr=s(ZR);oto=r(qHr,"GPTNeoXTokenizerFast"),qHr.forEach(t),rto=r(Awe," (GPT NeoX model)"),Awe.forEach(t),tto=i(S),Zn=n(S,"LI",{});var i$=s(Zn);nae=n(i$,"STRONG",{});var NHr=s(nae);ato=r(NHr,"gptj"),NHr.forEach(t),nto=r(i$," \u2014 "),eP=n(i$,"A",{href:!0});var jHr=s(eP);sto=r(jHr,"GPT2Tokenizer"),jHr.forEach(t),lto=r(i$," or "),oP=n(i$,"A",{href:!0});var DHr=s(oP);ito=r(DHr,"GPT2TokenizerFast"),DHr.forEach(t),dto=r(i$," (GPT-J model)"),i$.forEach(t),cto=i(S),es=n(S,"LI",{});var d$=s(es);sae=n(d$,"STRONG",{});var GHr=s(sae);fto=r(GHr,"herbert"),GHr.forEach(t),mto=r(d$," \u2014 "),rP=n(d$,"A",{href:!0});var OHr=s(rP);gto=r(OHr,"HerbertTokenizer"),OHr.forEach(t),hto=r(d$," or "),tP=n(d$,"A",{href:!0});var VHr=s(tP);pto=r(VHr,"HerbertTokenizerFast"),VHr.forEach(t),uto=r(d$," (HerBERT model)"),d$.forEach(t),_to=i(S),qg=n(S,"LI",{});var ywe=s(qg);lae=n(ywe,"STRONG",{});var XHr=s(lae);bto=r(XHr,"hubert"),XHr.forEach(t),vto=r(ywe," \u2014 "),aP=n(ywe,"A",{href:!0});var zHr=s(aP);Fto=r(zHr,"Wav2Vec2CTCTokenizer"),zHr.forEach(t),Tto=r(ywe," (Hubert model)"),ywe.forEach(t),Mto=i(S),os=n(S,"LI",{});var c$=s(os);iae=n(c$,"STRONG",{});var WHr=s(iae);Eto=r(WHr,"ibert"),WHr.forEach(t),Cto=r(c$," \u2014 "),nP=n(c$,"A",{href:!0});var QHr=s(nP);wto=r(QHr,"RobertaTokenizer"),QHr.forEach(t),Ato=r(c$," or "),sP=n(c$,"A",{href:!0});var HHr=s(sP);yto=r(HHr,"RobertaTokenizerFast"),HHr.forEach(t),Lto=r(c$," (I-BERT model)"),c$.forEach(t),xto=i(S),rs=n(S,"LI",{});var f$=s(rs);dae=n(f$,"STRONG",{});var UHr=s(dae);$to=r(UHr,"layoutlm"),UHr.forEach(t),kto=r(f$," \u2014 "),lP=n(f$,"A",{href:!0});var JHr=s(lP);Sto=r(JHr,"LayoutLMTokenizer"),JHr.forEach(t),Rto=r(f$," or "),iP=n(f$,"A",{href:!0});var YHr=s(iP);Pto=r(YHr,"LayoutLMTokenizerFast"),YHr.forEach(t),Bto=r(f$," (LayoutLM model)"),f$.forEach(t),Ito=i(S),ts=n(S,"LI",{});var m$=s(ts);cae=n(m$,"STRONG",{});var KHr=s(cae);qto=r(KHr,"layoutlmv2"),KHr.forEach(t),Nto=r(m$," \u2014 "),dP=n(m$,"A",{href:!0});var ZHr=s(dP);jto=r(ZHr,"LayoutLMv2Tokenizer"),ZHr.forEach(t),Dto=r(m$," or "),cP=n(m$,"A",{href:!0});var eUr=s(cP);Gto=r(eUr,"LayoutLMv2TokenizerFast"),eUr.forEach(t),Oto=r(m$," (LayoutLMv2 model)"),m$.forEach(t),Vto=i(S),as=n(S,"LI",{});var g$=s(as);fae=n(g$,"STRONG",{});var oUr=s(fae);Xto=r(oUr,"layoutlmv3"),oUr.forEach(t),zto=r(g$," \u2014 "),fP=n(g$,"A",{href:!0});var rUr=s(fP);Wto=r(rUr,"LayoutLMv3Tokenizer"),rUr.forEach(t),Qto=r(g$," or "),mP=n(g$,"A",{href:!0});var tUr=s(mP);Hto=r(tUr,"LayoutLMv3TokenizerFast"),tUr.forEach(t),Uto=r(g$," (LayoutLMv3 model)"),g$.forEach(t),Jto=i(S),ns=n(S,"LI",{});var h$=s(ns);mae=n(h$,"STRONG",{});var aUr=s(mae);Yto=r(aUr,"layoutxlm"),aUr.forEach(t),Kto=r(h$," \u2014 "),gP=n(h$,"A",{href:!0});var nUr=s(gP);Zto=r(nUr,"LayoutXLMTokenizer"),nUr.forEach(t),eao=r(h$," or "),hP=n(h$,"A",{href:!0});var sUr=s(hP);oao=r(sUr,"LayoutXLMTokenizerFast"),sUr.forEach(t),rao=r(h$," (LayoutXLM model)"),h$.forEach(t),tao=i(S),ss=n(S,"LI",{});var p$=s(ss);gae=n(p$,"STRONG",{});var lUr=s(gae);aao=r(lUr,"led"),lUr.forEach(t),nao=r(p$," \u2014 "),pP=n(p$,"A",{href:!0});var iUr=s(pP);sao=r(iUr,"LEDTokenizer"),iUr.forEach(t),lao=r(p$," or "),uP=n(p$,"A",{href:!0});var dUr=s(uP);iao=r(dUr,"LEDTokenizerFast"),dUr.forEach(t),dao=r(p$," (LED model)"),p$.forEach(t),cao=i(S),ls=n(S,"LI",{});var u$=s(ls);hae=n(u$,"STRONG",{});var cUr=s(hae);fao=r(cUr,"longformer"),cUr.forEach(t),mao=r(u$," \u2014 "),_P=n(u$,"A",{href:!0});var fUr=s(_P);gao=r(fUr,"LongformerTokenizer"),fUr.forEach(t),hao=r(u$," or "),bP=n(u$,"A",{href:!0});var mUr=s(bP);pao=r(mUr,"LongformerTokenizerFast"),mUr.forEach(t),uao=r(u$," (Longformer model)"),u$.forEach(t),_ao=i(S),Ng=n(S,"LI",{});var Lwe=s(Ng);pae=n(Lwe,"STRONG",{});var gUr=s(pae);bao=r(gUr,"luke"),gUr.forEach(t),vao=r(Lwe," \u2014 "),vP=n(Lwe,"A",{href:!0});var hUr=s(vP);Fao=r(hUr,"LukeTokenizer"),hUr.forEach(t),Tao=r(Lwe," (LUKE model)"),Lwe.forEach(t),Mao=i(S),is=n(S,"LI",{});var _$=s(is);uae=n(_$,"STRONG",{});var pUr=s(uae);Eao=r(pUr,"lxmert"),pUr.forEach(t),Cao=r(_$," \u2014 "),FP=n(_$,"A",{href:!0});var uUr=s(FP);wao=r(uUr,"LxmertTokenizer"),uUr.forEach(t),Aao=r(_$," or "),TP=n(_$,"A",{href:!0});var _Ur=s(TP);yao=r(_Ur,"LxmertTokenizerFast"),_Ur.forEach(t),Lao=r(_$," (LXMERT model)"),_$.forEach(t),xao=i(S),jg=n(S,"LI",{});var xwe=s(jg);_ae=n(xwe,"STRONG",{});var bUr=s(_ae);$ao=r(bUr,"m2m_100"),bUr.forEach(t),kao=r(xwe," \u2014 "),MP=n(xwe,"A",{href:!0});var vUr=s(MP);Sao=r(vUr,"M2M100Tokenizer"),vUr.forEach(t),Rao=r(xwe," (M2M100 model)"),xwe.forEach(t),Pao=i(S),Dg=n(S,"LI",{});var $we=s(Dg);bae=n($we,"STRONG",{});var FUr=s(bae);Bao=r(FUr,"marian"),FUr.forEach(t),Iao=r($we," \u2014 "),EP=n($we,"A",{href:!0});var TUr=s(EP);qao=r(TUr,"MarianTokenizer"),TUr.forEach(t),Nao=r($we," (Marian model)"),$we.forEach(t),jao=i(S),ds=n(S,"LI",{});var b$=s(ds);vae=n(b$,"STRONG",{});var MUr=s(vae);Dao=r(MUr,"mbart"),MUr.forEach(t),Gao=r(b$," \u2014 "),CP=n(b$,"A",{href:!0});var EUr=s(CP);Oao=r(EUr,"MBartTokenizer"),EUr.forEach(t),Vao=r(b$," or "),wP=n(b$,"A",{href:!0});var CUr=s(wP);Xao=r(CUr,"MBartTokenizerFast"),CUr.forEach(t),zao=r(b$," (mBART model)"),b$.forEach(t),Wao=i(S),cs=n(S,"LI",{});var v$=s(cs);Fae=n(v$,"STRONG",{});var wUr=s(Fae);Qao=r(wUr,"mbart50"),wUr.forEach(t),Hao=r(v$," \u2014 "),AP=n(v$,"A",{href:!0});var AUr=s(AP);Uao=r(AUr,"MBart50Tokenizer"),AUr.forEach(t),Jao=r(v$," or "),yP=n(v$,"A",{href:!0});var yUr=s(yP);Yao=r(yUr,"MBart50TokenizerFast"),yUr.forEach(t),Kao=r(v$," (mBART-50 model)"),v$.forEach(t),Zao=i(S),fs=n(S,"LI",{});var F$=s(fs);Tae=n(F$,"STRONG",{});var LUr=s(Tae);eno=r(LUr,"megatron-bert"),LUr.forEach(t),ono=r(F$," \u2014 "),LP=n(F$,"A",{href:!0});var xUr=s(LP);rno=r(xUr,"BertTokenizer"),xUr.forEach(t),tno=r(F$," or "),xP=n(F$,"A",{href:!0});var $Ur=s(xP);ano=r($Ur,"BertTokenizerFast"),$Ur.forEach(t),nno=r(F$," (MegatronBert model)"),F$.forEach(t),sno=i(S),Gg=n(S,"LI",{});var kwe=s(Gg);Mae=n(kwe,"STRONG",{});var kUr=s(Mae);lno=r(kUr,"mluke"),kUr.forEach(t),ino=r(kwe," \u2014 "),$P=n(kwe,"A",{href:!0});var SUr=s($P);dno=r(SUr,"MLukeTokenizer"),SUr.forEach(t),cno=r(kwe," (mLUKE model)"),kwe.forEach(t),fno=i(S),ms=n(S,"LI",{});var T$=s(ms);Eae=n(T$,"STRONG",{});var RUr=s(Eae);mno=r(RUr,"mobilebert"),RUr.forEach(t),gno=r(T$," \u2014 "),kP=n(T$,"A",{href:!0});var PUr=s(kP);hno=r(PUr,"MobileBertTokenizer"),PUr.forEach(t),pno=r(T$," or "),SP=n(T$,"A",{href:!0});var BUr=s(SP);uno=r(BUr,"MobileBertTokenizerFast"),BUr.forEach(t),_no=r(T$," (MobileBERT model)"),T$.forEach(t),bno=i(S),gs=n(S,"LI",{});var M$=s(gs);Cae=n(M$,"STRONG",{});var IUr=s(Cae);vno=r(IUr,"mpnet"),IUr.forEach(t),Fno=r(M$," \u2014 "),RP=n(M$,"A",{href:!0});var qUr=s(RP);Tno=r(qUr,"MPNetTokenizer"),qUr.forEach(t),Mno=r(M$," or "),PP=n(M$,"A",{href:!0});var NUr=s(PP);Eno=r(NUr,"MPNetTokenizerFast"),NUr.forEach(t),Cno=r(M$," (MPNet model)"),M$.forEach(t),wno=i(S),hs=n(S,"LI",{});var E$=s(hs);wae=n(E$,"STRONG",{});var jUr=s(wae);Ano=r(jUr,"mt5"),jUr.forEach(t),yno=r(E$," \u2014 "),BP=n(E$,"A",{href:!0});var DUr=s(BP);Lno=r(DUr,"MT5Tokenizer"),DUr.forEach(t),xno=r(E$," or "),IP=n(E$,"A",{href:!0});var GUr=s(IP);$no=r(GUr,"MT5TokenizerFast"),GUr.forEach(t),kno=r(E$," (mT5 model)"),E$.forEach(t),Sno=i(S),ps=n(S,"LI",{});var C$=s(ps);Aae=n(C$,"STRONG",{});var OUr=s(Aae);Rno=r(OUr,"nystromformer"),OUr.forEach(t),Pno=r(C$," \u2014 "),qP=n(C$,"A",{href:!0});var VUr=s(qP);Bno=r(VUr,"AlbertTokenizer"),VUr.forEach(t),Ino=r(C$," or "),NP=n(C$,"A",{href:!0});var XUr=s(NP);qno=r(XUr,"AlbertTokenizerFast"),XUr.forEach(t),Nno=r(C$," (Nystromformer model)"),C$.forEach(t),jno=i(S),us=n(S,"LI",{});var w$=s(us);yae=n(w$,"STRONG",{});var zUr=s(yae);Dno=r(zUr,"openai-gpt"),zUr.forEach(t),Gno=r(w$," \u2014 "),jP=n(w$,"A",{href:!0});var WUr=s(jP);Ono=r(WUr,"OpenAIGPTTokenizer"),WUr.forEach(t),Vno=r(w$," or "),DP=n(w$,"A",{href:!0});var QUr=s(DP);Xno=r(QUr,"OpenAIGPTTokenizerFast"),QUr.forEach(t),zno=r(w$," (OpenAI GPT model)"),w$.forEach(t),Wno=i(S),Og=n(S,"LI",{});var Swe=s(Og);Lae=n(Swe,"STRONG",{});var HUr=s(Lae);Qno=r(HUr,"opt"),HUr.forEach(t),Hno=r(Swe," \u2014 "),GP=n(Swe,"A",{href:!0});var UUr=s(GP);Uno=r(UUr,"GPT2Tokenizer"),UUr.forEach(t),Jno=r(Swe," (OPT model)"),Swe.forEach(t),Yno=i(S),_s=n(S,"LI",{});var A$=s(_s);xae=n(A$,"STRONG",{});var JUr=s(xae);Kno=r(JUr,"pegasus"),JUr.forEach(t),Zno=r(A$," \u2014 "),OP=n(A$,"A",{href:!0});var YUr=s(OP);eso=r(YUr,"PegasusTokenizer"),YUr.forEach(t),oso=r(A$," or "),VP=n(A$,"A",{href:!0});var KUr=s(VP);rso=r(KUr,"PegasusTokenizerFast"),KUr.forEach(t),tso=r(A$," (Pegasus model)"),A$.forEach(t),aso=i(S),Vg=n(S,"LI",{});var Rwe=s(Vg);$ae=n(Rwe,"STRONG",{});var ZUr=s($ae);nso=r(ZUr,"perceiver"),ZUr.forEach(t),sso=r(Rwe," \u2014 "),XP=n(Rwe,"A",{href:!0});var eJr=s(XP);lso=r(eJr,"PerceiverTokenizer"),eJr.forEach(t),iso=r(Rwe," (Perceiver model)"),Rwe.forEach(t),dso=i(S),Xg=n(S,"LI",{});var Pwe=s(Xg);kae=n(Pwe,"STRONG",{});var oJr=s(kae);cso=r(oJr,"phobert"),oJr.forEach(t),fso=r(Pwe," \u2014 "),zP=n(Pwe,"A",{href:!0});var rJr=s(zP);mso=r(rJr,"PhobertTokenizer"),rJr.forEach(t),gso=r(Pwe," (PhoBERT model)"),Pwe.forEach(t),hso=i(S),zg=n(S,"LI",{});var Bwe=s(zg);Sae=n(Bwe,"STRONG",{});var tJr=s(Sae);pso=r(tJr,"plbart"),tJr.forEach(t),uso=r(Bwe," \u2014 "),WP=n(Bwe,"A",{href:!0});var aJr=s(WP);_so=r(aJr,"PLBartTokenizer"),aJr.forEach(t),bso=r(Bwe," (PLBart model)"),Bwe.forEach(t),vso=i(S),Wg=n(S,"LI",{});var Iwe=s(Wg);Rae=n(Iwe,"STRONG",{});var nJr=s(Rae);Fso=r(nJr,"prophetnet"),nJr.forEach(t),Tso=r(Iwe," \u2014 "),QP=n(Iwe,"A",{href:!0});var sJr=s(QP);Mso=r(sJr,"ProphetNetTokenizer"),sJr.forEach(t),Eso=r(Iwe," (ProphetNet model)"),Iwe.forEach(t),Cso=i(S),bs=n(S,"LI",{});var y$=s(bs);Pae=n(y$,"STRONG",{});var lJr=s(Pae);wso=r(lJr,"qdqbert"),lJr.forEach(t),Aso=r(y$," \u2014 "),HP=n(y$,"A",{href:!0});var iJr=s(HP);yso=r(iJr,"BertTokenizer"),iJr.forEach(t),Lso=r(y$," or "),UP=n(y$,"A",{href:!0});var dJr=s(UP);xso=r(dJr,"BertTokenizerFast"),dJr.forEach(t),$so=r(y$," (QDQBert model)"),y$.forEach(t),kso=i(S),Qg=n(S,"LI",{});var qwe=s(Qg);Bae=n(qwe,"STRONG",{});var cJr=s(Bae);Sso=r(cJr,"rag"),cJr.forEach(t),Rso=r(qwe," \u2014 "),JP=n(qwe,"A",{href:!0});var fJr=s(JP);Pso=r(fJr,"RagTokenizer"),fJr.forEach(t),Bso=r(qwe," (RAG model)"),qwe.forEach(t),Iso=i(S),vs=n(S,"LI",{});var L$=s(vs);Iae=n(L$,"STRONG",{});var mJr=s(Iae);qso=r(mJr,"realm"),mJr.forEach(t),Nso=r(L$," \u2014 "),YP=n(L$,"A",{href:!0});var gJr=s(YP);jso=r(gJr,"RealmTokenizer"),gJr.forEach(t),Dso=r(L$," or "),KP=n(L$,"A",{href:!0});var hJr=s(KP);Gso=r(hJr,"RealmTokenizerFast"),hJr.forEach(t),Oso=r(L$," (Realm model)"),L$.forEach(t),Vso=i(S),Fs=n(S,"LI",{});var x$=s(Fs);qae=n(x$,"STRONG",{});var pJr=s(qae);Xso=r(pJr,"reformer"),pJr.forEach(t),zso=r(x$," \u2014 "),ZP=n(x$,"A",{href:!0});var uJr=s(ZP);Wso=r(uJr,"ReformerTokenizer"),uJr.forEach(t),Qso=r(x$," or "),eB=n(x$,"A",{href:!0});var _Jr=s(eB);Hso=r(_Jr,"ReformerTokenizerFast"),_Jr.forEach(t),Uso=r(x$," (Reformer model)"),x$.forEach(t),Jso=i(S),Ts=n(S,"LI",{});var $$=s(Ts);Nae=n($$,"STRONG",{});var bJr=s(Nae);Yso=r(bJr,"rembert"),bJr.forEach(t),Kso=r($$," \u2014 "),oB=n($$,"A",{href:!0});var vJr=s(oB);Zso=r(vJr,"RemBertTokenizer"),vJr.forEach(t),elo=r($$," or "),rB=n($$,"A",{href:!0});var FJr=s(rB);olo=r(FJr,"RemBertTokenizerFast"),FJr.forEach(t),rlo=r($$," (RemBERT model)"),$$.forEach(t),tlo=i(S),Ms=n(S,"LI",{});var k$=s(Ms);jae=n(k$,"STRONG",{});var TJr=s(jae);alo=r(TJr,"retribert"),TJr.forEach(t),nlo=r(k$," \u2014 "),tB=n(k$,"A",{href:!0});var MJr=s(tB);slo=r(MJr,"RetriBertTokenizer"),MJr.forEach(t),llo=r(k$," or "),aB=n(k$,"A",{href:!0});var EJr=s(aB);ilo=r(EJr,"RetriBertTokenizerFast"),EJr.forEach(t),dlo=r(k$," (RetriBERT model)"),k$.forEach(t),clo=i(S),Es=n(S,"LI",{});var S$=s(Es);Dae=n(S$,"STRONG",{});var CJr=s(Dae);flo=r(CJr,"roberta"),CJr.forEach(t),mlo=r(S$," \u2014 "),nB=n(S$,"A",{href:!0});var wJr=s(nB);glo=r(wJr,"RobertaTokenizer"),wJr.forEach(t),hlo=r(S$," or "),sB=n(S$,"A",{href:!0});var AJr=s(sB);plo=r(AJr,"RobertaTokenizerFast"),AJr.forEach(t),ulo=r(S$," (RoBERTa model)"),S$.forEach(t),_lo=i(S),Cs=n(S,"LI",{});var R$=s(Cs);Gae=n(R$,"STRONG",{});var yJr=s(Gae);blo=r(yJr,"roformer"),yJr.forEach(t),vlo=r(R$," \u2014 "),lB=n(R$,"A",{href:!0});var LJr=s(lB);Flo=r(LJr,"RoFormerTokenizer"),LJr.forEach(t),Tlo=r(R$," or "),iB=n(R$,"A",{href:!0});var xJr=s(iB);Mlo=r(xJr,"RoFormerTokenizerFast"),xJr.forEach(t),Elo=r(R$," (RoFormer model)"),R$.forEach(t),Clo=i(S),Hg=n(S,"LI",{});var Nwe=s(Hg);Oae=n(Nwe,"STRONG",{});var $Jr=s(Oae);wlo=r($Jr,"speech_to_text"),$Jr.forEach(t),Alo=r(Nwe," \u2014 "),dB=n(Nwe,"A",{href:!0});var kJr=s(dB);ylo=r(kJr,"Speech2TextTokenizer"),kJr.forEach(t),Llo=r(Nwe," (Speech2Text model)"),Nwe.forEach(t),xlo=i(S),Ug=n(S,"LI",{});var jwe=s(Ug);Vae=n(jwe,"STRONG",{});var SJr=s(Vae);$lo=r(SJr,"speech_to_text_2"),SJr.forEach(t),klo=r(jwe," \u2014 "),cB=n(jwe,"A",{href:!0});var RJr=s(cB);Slo=r(RJr,"Speech2Text2Tokenizer"),RJr.forEach(t),Rlo=r(jwe," (Speech2Text2 model)"),jwe.forEach(t),Plo=i(S),ws=n(S,"LI",{});var P$=s(ws);Xae=n(P$,"STRONG",{});var PJr=s(Xae);Blo=r(PJr,"splinter"),PJr.forEach(t),Ilo=r(P$," \u2014 "),fB=n(P$,"A",{href:!0});var BJr=s(fB);qlo=r(BJr,"SplinterTokenizer"),BJr.forEach(t),Nlo=r(P$," or "),mB=n(P$,"A",{href:!0});var IJr=s(mB);jlo=r(IJr,"SplinterTokenizerFast"),IJr.forEach(t),Dlo=r(P$," (Splinter model)"),P$.forEach(t),Glo=i(S),As=n(S,"LI",{});var B$=s(As);zae=n(B$,"STRONG",{});var qJr=s(zae);Olo=r(qJr,"squeezebert"),qJr.forEach(t),Vlo=r(B$," \u2014 "),gB=n(B$,"A",{href:!0});var NJr=s(gB);Xlo=r(NJr,"SqueezeBertTokenizer"),NJr.forEach(t),zlo=r(B$," or "),hB=n(B$,"A",{href:!0});var jJr=s(hB);Wlo=r(jJr,"SqueezeBertTokenizerFast"),jJr.forEach(t),Qlo=r(B$," (SqueezeBERT model)"),B$.forEach(t),Hlo=i(S),ys=n(S,"LI",{});var I$=s(ys);Wae=n(I$,"STRONG",{});var DJr=s(Wae);Ulo=r(DJr,"t5"),DJr.forEach(t),Jlo=r(I$," \u2014 "),pB=n(I$,"A",{href:!0});var GJr=s(pB);Ylo=r(GJr,"T5Tokenizer"),GJr.forEach(t),Klo=r(I$," or "),uB=n(I$,"A",{href:!0});var OJr=s(uB);Zlo=r(OJr,"T5TokenizerFast"),OJr.forEach(t),eio=r(I$," (T5 model)"),I$.forEach(t),oio=i(S),Jg=n(S,"LI",{});var Dwe=s(Jg);Qae=n(Dwe,"STRONG",{});var VJr=s(Qae);rio=r(VJr,"tapas"),VJr.forEach(t),tio=r(Dwe," \u2014 "),_B=n(Dwe,"A",{href:!0});var XJr=s(_B);aio=r(XJr,"TapasTokenizer"),XJr.forEach(t),nio=r(Dwe," (TAPAS model)"),Dwe.forEach(t),sio=i(S),Yg=n(S,"LI",{});var Gwe=s(Yg);Hae=n(Gwe,"STRONG",{});var zJr=s(Hae);lio=r(zJr,"tapex"),zJr.forEach(t),iio=r(Gwe," \u2014 "),bB=n(Gwe,"A",{href:!0});var WJr=s(bB);dio=r(WJr,"TapexTokenizer"),WJr.forEach(t),cio=r(Gwe," (TAPEX model)"),Gwe.forEach(t),fio=i(S),Kg=n(S,"LI",{});var Owe=s(Kg);Uae=n(Owe,"STRONG",{});var QJr=s(Uae);mio=r(QJr,"transfo-xl"),QJr.forEach(t),gio=r(Owe," \u2014 "),vB=n(Owe,"A",{href:!0});var HJr=s(vB);hio=r(HJr,"TransfoXLTokenizer"),HJr.forEach(t),pio=r(Owe," (Transformer-XL model)"),Owe.forEach(t),uio=i(S),Ls=n(S,"LI",{});var q$=s(Ls);Jae=n(q$,"STRONG",{});var UJr=s(Jae);_io=r(UJr,"visual_bert"),UJr.forEach(t),bio=r(q$," \u2014 "),FB=n(q$,"A",{href:!0});var JJr=s(FB);vio=r(JJr,"BertTokenizer"),JJr.forEach(t),Fio=r(q$," or "),TB=n(q$,"A",{href:!0});var YJr=s(TB);Tio=r(YJr,"BertTokenizerFast"),YJr.forEach(t),Mio=r(q$," (VisualBert model)"),q$.forEach(t),Eio=i(S),Zg=n(S,"LI",{});var Vwe=s(Zg);Yae=n(Vwe,"STRONG",{});var KJr=s(Yae);Cio=r(KJr,"wav2vec2"),KJr.forEach(t),wio=r(Vwe," \u2014 "),MB=n(Vwe,"A",{href:!0});var ZJr=s(MB);Aio=r(ZJr,"Wav2Vec2CTCTokenizer"),ZJr.forEach(t),yio=r(Vwe," (Wav2Vec2 model)"),Vwe.forEach(t),Lio=i(S),eh=n(S,"LI",{});var Xwe=s(eh);Kae=n(Xwe,"STRONG",{});var eYr=s(Kae);xio=r(eYr,"wav2vec2-conformer"),eYr.forEach(t),$io=r(Xwe," \u2014 "),EB=n(Xwe,"A",{href:!0});var oYr=s(EB);kio=r(oYr,"Wav2Vec2CTCTokenizer"),oYr.forEach(t),Sio=r(Xwe," (Wav2Vec2-Conformer model)"),Xwe.forEach(t),Rio=i(S),oh=n(S,"LI",{});var zwe=s(oh);Zae=n(zwe,"STRONG",{});var rYr=s(Zae);Pio=r(rYr,"wav2vec2_phoneme"),rYr.forEach(t),Bio=r(zwe," \u2014 "),CB=n(zwe,"A",{href:!0});var tYr=s(CB);Iio=r(tYr,"Wav2Vec2PhonemeCTCTokenizer"),tYr.forEach(t),qio=r(zwe," (Wav2Vec2Phoneme model)"),zwe.forEach(t),Nio=i(S),xs=n(S,"LI",{});var N$=s(xs);ene=n(N$,"STRONG",{});var aYr=s(ene);jio=r(aYr,"xglm"),aYr.forEach(t),Dio=r(N$," \u2014 "),wB=n(N$,"A",{href:!0});var nYr=s(wB);Gio=r(nYr,"XGLMTokenizer"),nYr.forEach(t),Oio=r(N$," or "),AB=n(N$,"A",{href:!0});var sYr=s(AB);Vio=r(sYr,"XGLMTokenizerFast"),sYr.forEach(t),Xio=r(N$," (XGLM model)"),N$.forEach(t),zio=i(S),rh=n(S,"LI",{});var Wwe=s(rh);one=n(Wwe,"STRONG",{});var lYr=s(one);Wio=r(lYr,"xlm"),lYr.forEach(t),Qio=r(Wwe," \u2014 "),yB=n(Wwe,"A",{href:!0});var iYr=s(yB);Hio=r(iYr,"XLMTokenizer"),iYr.forEach(t),Uio=r(Wwe," (XLM model)"),Wwe.forEach(t),Jio=i(S),th=n(S,"LI",{});var Qwe=s(th);rne=n(Qwe,"STRONG",{});var dYr=s(rne);Yio=r(dYr,"xlm-prophetnet"),dYr.forEach(t),Kio=r(Qwe," \u2014 "),LB=n(Qwe,"A",{href:!0});var cYr=s(LB);Zio=r(cYr,"XLMProphetNetTokenizer"),cYr.forEach(t),edo=r(Qwe," (XLMProphetNet model)"),Qwe.forEach(t),odo=i(S),$s=n(S,"LI",{});var j$=s($s);tne=n(j$,"STRONG",{});var fYr=s(tne);rdo=r(fYr,"xlm-roberta"),fYr.forEach(t),tdo=r(j$," \u2014 "),xB=n(j$,"A",{href:!0});var mYr=s(xB);ado=r(mYr,"XLMRobertaTokenizer"),mYr.forEach(t),ndo=r(j$," or "),$B=n(j$,"A",{href:!0});var gYr=s($B);sdo=r(gYr,"XLMRobertaTokenizerFast"),gYr.forEach(t),ldo=r(j$," (XLM-RoBERTa model)"),j$.forEach(t),ido=i(S),ks=n(S,"LI",{});var D$=s(ks);ane=n(D$,"STRONG",{});var hYr=s(ane);ddo=r(hYr,"xlm-roberta-xl"),hYr.forEach(t),cdo=r(D$," \u2014 "),kB=n(D$,"A",{href:!0});var pYr=s(kB);fdo=r(pYr,"RobertaTokenizer"),pYr.forEach(t),mdo=r(D$," or "),SB=n(D$,"A",{href:!0});var uYr=s(SB);gdo=r(uYr,"RobertaTokenizerFast"),uYr.forEach(t),hdo=r(D$," (XLM-RoBERTa-XL model)"),D$.forEach(t),pdo=i(S),Ss=n(S,"LI",{});var G$=s(Ss);nne=n(G$,"STRONG",{});var _Yr=s(nne);udo=r(_Yr,"xlnet"),_Yr.forEach(t),_do=r(G$," \u2014 "),RB=n(G$,"A",{href:!0});var bYr=s(RB);bdo=r(bYr,"XLNetTokenizer"),bYr.forEach(t),vdo=r(G$," or "),PB=n(G$,"A",{href:!0});var vYr=s(PB);Fdo=r(vYr,"XLNetTokenizerFast"),vYr.forEach(t),Tdo=r(G$," (XLNet model)"),G$.forEach(t),Mdo=i(S),Rs=n(S,"LI",{});var O$=s(Rs);sne=n(O$,"STRONG",{});var FYr=s(sne);Edo=r(FYr,"yoso"),FYr.forEach(t),Cdo=r(O$," \u2014 "),BB=n(O$,"A",{href:!0});var TYr=s(BB);wdo=r(TYr,"AlbertTokenizer"),TYr.forEach(t),Ado=r(O$," or "),IB=n(O$,"A",{href:!0});var MYr=s(IB);ydo=r(MYr,"AlbertTokenizerFast"),MYr.forEach(t),Ldo=r(O$," (YOSO model)"),O$.forEach(t),S.forEach(t),xdo=i(Ns),T(ah.$$.fragment,Ns),Ns.forEach(t),$do=i(qs),nh=n(qs,"DIV",{class:!0});var cDe=s(nh);T(G6.$$.fragment,cDe),kdo=i(cDe),lne=n(cDe,"P",{});var EYr=s(lne);Sdo=r(EYr,"Register a new tokenizer in this mapping."),EYr.forEach(t),cDe.forEach(t),qs.forEach(t),fNe=i(f),Mi=n(f,"H2",{class:!0});var fDe=s(Mi);sh=n(fDe,"A",{id:!0,class:!0,href:!0});var CYr=s(sh);ine=n(CYr,"SPAN",{});var wYr=s(ine);T(O6.$$.fragment,wYr),wYr.forEach(t),CYr.forEach(t),Rdo=i(fDe),dne=n(fDe,"SPAN",{});var AYr=s(dne);Pdo=r(AYr,"AutoFeatureExtractor"),AYr.forEach(t),fDe.forEach(t),mNe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(V6.$$.fragment,js),Bdo=i(js),X6=n(js,"P",{});var mDe=s(X6);Ido=r(mDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),qB=n(mDe,"A",{href:!0});var yYr=s(qB);qdo=r(yYr,"AutoFeatureExtractor.from_pretrained()"),yYr.forEach(t),Ndo=r(mDe," class method."),mDe.forEach(t),jdo=i(js),z6=n(js,"P",{});var gDe=s(z6);Ddo=r(gDe,"This class cannot be instantiated directly using "),cne=n(gDe,"CODE",{});var LYr=s(cne);Gdo=r(LYr,"__init__()"),LYr.forEach(t),Odo=r(gDe," (throws an error)."),gDe.forEach(t),Vdo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(W6.$$.fragment,Zt),Xdo=i(Zt),fne=n(Zt,"P",{});var xYr=s(fne);zdo=r(xYr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),xYr.forEach(t),Wdo=i(Zt),ya=n(Zt,"P",{});var kw=s(ya);Qdo=r(kw,"The feature extractor class to instantiate is selected based on the "),mne=n(kw,"CODE",{});var $Yr=s(mne);Hdo=r($Yr,"model_type"),$Yr.forEach(t),Udo=r(kw,` property of the config object
(either passed as an argument or loaded from `),gne=n(kw,"CODE",{});var kYr=s(gne);Jdo=r(kYr,"pretrained_model_name_or_path"),kYr.forEach(t),Ydo=r(kw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),hne=n(kw,"CODE",{});var SYr=s(hne);Kdo=r(SYr,"pretrained_model_name_or_path"),SYr.forEach(t),Zdo=r(kw,":"),kw.forEach(t),eco=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);lh=n(Z,"LI",{});var Hwe=s(lh);pne=n(Hwe,"STRONG",{});var RYr=s(pne);oco=r(RYr,"beit"),RYr.forEach(t),rco=r(Hwe," \u2014 "),NB=n(Hwe,"A",{href:!0});var PYr=s(NB);tco=r(PYr,"BeitFeatureExtractor"),PYr.forEach(t),aco=r(Hwe," (BEiT model)"),Hwe.forEach(t),nco=i(Z),ih=n(Z,"LI",{});var Uwe=s(ih);une=n(Uwe,"STRONG",{});var BYr=s(une);sco=r(BYr,"clip"),BYr.forEach(t),lco=r(Uwe," \u2014 "),jB=n(Uwe,"A",{href:!0});var IYr=s(jB);ico=r(IYr,"CLIPFeatureExtractor"),IYr.forEach(t),dco=r(Uwe," (CLIP model)"),Uwe.forEach(t),cco=i(Z),dh=n(Z,"LI",{});var Jwe=s(dh);_ne=n(Jwe,"STRONG",{});var qYr=s(_ne);fco=r(qYr,"convnext"),qYr.forEach(t),mco=r(Jwe," \u2014 "),DB=n(Jwe,"A",{href:!0});var NYr=s(DB);gco=r(NYr,"ConvNextFeatureExtractor"),NYr.forEach(t),hco=r(Jwe," (ConvNext model)"),Jwe.forEach(t),pco=i(Z),ch=n(Z,"LI",{});var Ywe=s(ch);bne=n(Ywe,"STRONG",{});var jYr=s(bne);uco=r(jYr,"cvt"),jYr.forEach(t),_co=r(Ywe," \u2014 "),GB=n(Ywe,"A",{href:!0});var DYr=s(GB);bco=r(DYr,"ConvNextFeatureExtractor"),DYr.forEach(t),vco=r(Ywe," (CvT model)"),Ywe.forEach(t),Fco=i(Z),fh=n(Z,"LI",{});var Kwe=s(fh);vne=n(Kwe,"STRONG",{});var GYr=s(vne);Tco=r(GYr,"data2vec-audio"),GYr.forEach(t),Mco=r(Kwe," \u2014 "),OB=n(Kwe,"A",{href:!0});var OYr=s(OB);Eco=r(OYr,"Wav2Vec2FeatureExtractor"),OYr.forEach(t),Cco=r(Kwe," (Data2VecAudio model)"),Kwe.forEach(t),wco=i(Z),mh=n(Z,"LI",{});var Zwe=s(mh);Fne=n(Zwe,"STRONG",{});var VYr=s(Fne);Aco=r(VYr,"data2vec-vision"),VYr.forEach(t),yco=r(Zwe," \u2014 "),VB=n(Zwe,"A",{href:!0});var XYr=s(VB);Lco=r(XYr,"BeitFeatureExtractor"),XYr.forEach(t),xco=r(Zwe," (Data2VecVision model)"),Zwe.forEach(t),$co=i(Z),gh=n(Z,"LI",{});var e0e=s(gh);Tne=n(e0e,"STRONG",{});var zYr=s(Tne);kco=r(zYr,"deit"),zYr.forEach(t),Sco=r(e0e," \u2014 "),XB=n(e0e,"A",{href:!0});var WYr=s(XB);Rco=r(WYr,"DeiTFeatureExtractor"),WYr.forEach(t),Pco=r(e0e," (DeiT model)"),e0e.forEach(t),Bco=i(Z),hh=n(Z,"LI",{});var o0e=s(hh);Mne=n(o0e,"STRONG",{});var QYr=s(Mne);Ico=r(QYr,"detr"),QYr.forEach(t),qco=r(o0e," \u2014 "),zB=n(o0e,"A",{href:!0});var HYr=s(zB);Nco=r(HYr,"DetrFeatureExtractor"),HYr.forEach(t),jco=r(o0e," (DETR model)"),o0e.forEach(t),Dco=i(Z),ph=n(Z,"LI",{});var r0e=s(ph);Ene=n(r0e,"STRONG",{});var UYr=s(Ene);Gco=r(UYr,"dpt"),UYr.forEach(t),Oco=r(r0e," \u2014 "),WB=n(r0e,"A",{href:!0});var JYr=s(WB);Vco=r(JYr,"DPTFeatureExtractor"),JYr.forEach(t),Xco=r(r0e," (DPT model)"),r0e.forEach(t),zco=i(Z),uh=n(Z,"LI",{});var t0e=s(uh);Cne=n(t0e,"STRONG",{});var YYr=s(Cne);Wco=r(YYr,"flava"),YYr.forEach(t),Qco=r(t0e," \u2014 "),QB=n(t0e,"A",{href:!0});var KYr=s(QB);Hco=r(KYr,"FlavaFeatureExtractor"),KYr.forEach(t),Uco=r(t0e," (Flava model)"),t0e.forEach(t),Jco=i(Z),_h=n(Z,"LI",{});var a0e=s(_h);wne=n(a0e,"STRONG",{});var ZYr=s(wne);Yco=r(ZYr,"glpn"),ZYr.forEach(t),Kco=r(a0e," \u2014 "),HB=n(a0e,"A",{href:!0});var eKr=s(HB);Zco=r(eKr,"GLPNFeatureExtractor"),eKr.forEach(t),efo=r(a0e," (GLPN model)"),a0e.forEach(t),ofo=i(Z),bh=n(Z,"LI",{});var n0e=s(bh);Ane=n(n0e,"STRONG",{});var oKr=s(Ane);rfo=r(oKr,"hubert"),oKr.forEach(t),tfo=r(n0e," \u2014 "),UB=n(n0e,"A",{href:!0});var rKr=s(UB);afo=r(rKr,"Wav2Vec2FeatureExtractor"),rKr.forEach(t),nfo=r(n0e," (Hubert model)"),n0e.forEach(t),sfo=i(Z),vh=n(Z,"LI",{});var s0e=s(vh);yne=n(s0e,"STRONG",{});var tKr=s(yne);lfo=r(tKr,"imagegpt"),tKr.forEach(t),ifo=r(s0e," \u2014 "),JB=n(s0e,"A",{href:!0});var aKr=s(JB);dfo=r(aKr,"ImageGPTFeatureExtractor"),aKr.forEach(t),cfo=r(s0e," (ImageGPT model)"),s0e.forEach(t),ffo=i(Z),Fh=n(Z,"LI",{});var l0e=s(Fh);Lne=n(l0e,"STRONG",{});var nKr=s(Lne);mfo=r(nKr,"layoutlmv2"),nKr.forEach(t),gfo=r(l0e," \u2014 "),YB=n(l0e,"A",{href:!0});var sKr=s(YB);hfo=r(sKr,"LayoutLMv2FeatureExtractor"),sKr.forEach(t),pfo=r(l0e," (LayoutLMv2 model)"),l0e.forEach(t),ufo=i(Z),Th=n(Z,"LI",{});var i0e=s(Th);xne=n(i0e,"STRONG",{});var lKr=s(xne);_fo=r(lKr,"layoutlmv3"),lKr.forEach(t),bfo=r(i0e," \u2014 "),KB=n(i0e,"A",{href:!0});var iKr=s(KB);vfo=r(iKr,"LayoutLMv3FeatureExtractor"),iKr.forEach(t),Ffo=r(i0e," (LayoutLMv3 model)"),i0e.forEach(t),Tfo=i(Z),Mh=n(Z,"LI",{});var d0e=s(Mh);$ne=n(d0e,"STRONG",{});var dKr=s($ne);Mfo=r(dKr,"maskformer"),dKr.forEach(t),Efo=r(d0e," \u2014 "),ZB=n(d0e,"A",{href:!0});var cKr=s(ZB);Cfo=r(cKr,"MaskFormerFeatureExtractor"),cKr.forEach(t),wfo=r(d0e," (MaskFormer model)"),d0e.forEach(t),Afo=i(Z),Eh=n(Z,"LI",{});var c0e=s(Eh);kne=n(c0e,"STRONG",{});var fKr=s(kne);yfo=r(fKr,"perceiver"),fKr.forEach(t),Lfo=r(c0e," \u2014 "),eI=n(c0e,"A",{href:!0});var mKr=s(eI);xfo=r(mKr,"PerceiverFeatureExtractor"),mKr.forEach(t),$fo=r(c0e," (Perceiver model)"),c0e.forEach(t),kfo=i(Z),Ch=n(Z,"LI",{});var f0e=s(Ch);Sne=n(f0e,"STRONG",{});var gKr=s(Sne);Sfo=r(gKr,"poolformer"),gKr.forEach(t),Rfo=r(f0e," \u2014 "),oI=n(f0e,"A",{href:!0});var hKr=s(oI);Pfo=r(hKr,"PoolFormerFeatureExtractor"),hKr.forEach(t),Bfo=r(f0e," (PoolFormer model)"),f0e.forEach(t),Ifo=i(Z),wh=n(Z,"LI",{});var m0e=s(wh);Rne=n(m0e,"STRONG",{});var pKr=s(Rne);qfo=r(pKr,"regnet"),pKr.forEach(t),Nfo=r(m0e," \u2014 "),rI=n(m0e,"A",{href:!0});var uKr=s(rI);jfo=r(uKr,"ConvNextFeatureExtractor"),uKr.forEach(t),Dfo=r(m0e," (RegNet model)"),m0e.forEach(t),Gfo=i(Z),Ah=n(Z,"LI",{});var g0e=s(Ah);Pne=n(g0e,"STRONG",{});var _Kr=s(Pne);Ofo=r(_Kr,"resnet"),_Kr.forEach(t),Vfo=r(g0e," \u2014 "),tI=n(g0e,"A",{href:!0});var bKr=s(tI);Xfo=r(bKr,"ConvNextFeatureExtractor"),bKr.forEach(t),zfo=r(g0e," (ResNet model)"),g0e.forEach(t),Wfo=i(Z),yh=n(Z,"LI",{});var h0e=s(yh);Bne=n(h0e,"STRONG",{});var vKr=s(Bne);Qfo=r(vKr,"segformer"),vKr.forEach(t),Hfo=r(h0e," \u2014 "),aI=n(h0e,"A",{href:!0});var FKr=s(aI);Ufo=r(FKr,"SegformerFeatureExtractor"),FKr.forEach(t),Jfo=r(h0e," (SegFormer model)"),h0e.forEach(t),Yfo=i(Z),Lh=n(Z,"LI",{});var p0e=s(Lh);Ine=n(p0e,"STRONG",{});var TKr=s(Ine);Kfo=r(TKr,"speech_to_text"),TKr.forEach(t),Zfo=r(p0e," \u2014 "),nI=n(p0e,"A",{href:!0});var MKr=s(nI);emo=r(MKr,"Speech2TextFeatureExtractor"),MKr.forEach(t),omo=r(p0e," (Speech2Text model)"),p0e.forEach(t),rmo=i(Z),xh=n(Z,"LI",{});var u0e=s(xh);qne=n(u0e,"STRONG",{});var EKr=s(qne);tmo=r(EKr,"swin"),EKr.forEach(t),amo=r(u0e," \u2014 "),sI=n(u0e,"A",{href:!0});var CKr=s(sI);nmo=r(CKr,"ViTFeatureExtractor"),CKr.forEach(t),smo=r(u0e," (Swin model)"),u0e.forEach(t),lmo=i(Z),$h=n(Z,"LI",{});var _0e=s($h);Nne=n(_0e,"STRONG",{});var wKr=s(Nne);imo=r(wKr,"van"),wKr.forEach(t),dmo=r(_0e," \u2014 "),lI=n(_0e,"A",{href:!0});var AKr=s(lI);cmo=r(AKr,"ConvNextFeatureExtractor"),AKr.forEach(t),fmo=r(_0e," (VAN model)"),_0e.forEach(t),mmo=i(Z),kh=n(Z,"LI",{});var b0e=s(kh);jne=n(b0e,"STRONG",{});var yKr=s(jne);gmo=r(yKr,"vit"),yKr.forEach(t),hmo=r(b0e," \u2014 "),iI=n(b0e,"A",{href:!0});var LKr=s(iI);pmo=r(LKr,"ViTFeatureExtractor"),LKr.forEach(t),umo=r(b0e," (ViT model)"),b0e.forEach(t),_mo=i(Z),Sh=n(Z,"LI",{});var v0e=s(Sh);Dne=n(v0e,"STRONG",{});var xKr=s(Dne);bmo=r(xKr,"vit_mae"),xKr.forEach(t),vmo=r(v0e," \u2014 "),dI=n(v0e,"A",{href:!0});var $Kr=s(dI);Fmo=r($Kr,"ViTFeatureExtractor"),$Kr.forEach(t),Tmo=r(v0e," (ViTMAE model)"),v0e.forEach(t),Mmo=i(Z),Rh=n(Z,"LI",{});var F0e=s(Rh);Gne=n(F0e,"STRONG",{});var kKr=s(Gne);Emo=r(kKr,"wav2vec2"),kKr.forEach(t),Cmo=r(F0e," \u2014 "),cI=n(F0e,"A",{href:!0});var SKr=s(cI);wmo=r(SKr,"Wav2Vec2FeatureExtractor"),SKr.forEach(t),Amo=r(F0e," (Wav2Vec2 model)"),F0e.forEach(t),ymo=i(Z),Ph=n(Z,"LI",{});var T0e=s(Ph);One=n(T0e,"STRONG",{});var RKr=s(One);Lmo=r(RKr,"wav2vec2-conformer"),RKr.forEach(t),xmo=r(T0e," \u2014 "),fI=n(T0e,"A",{href:!0});var PKr=s(fI);$mo=r(PKr,"Wav2Vec2FeatureExtractor"),PKr.forEach(t),kmo=r(T0e," (Wav2Vec2-Conformer model)"),T0e.forEach(t),Smo=i(Z),Bh=n(Z,"LI",{});var M0e=s(Bh);Vne=n(M0e,"STRONG",{});var BKr=s(Vne);Rmo=r(BKr,"yolos"),BKr.forEach(t),Pmo=r(M0e," \u2014 "),mI=n(M0e,"A",{href:!0});var IKr=s(mI);Bmo=r(IKr,"YolosFeatureExtractor"),IKr.forEach(t),Imo=r(M0e," (YOLOS model)"),M0e.forEach(t),Z.forEach(t),qmo=i(Zt),T(Ih.$$.fragment,Zt),Nmo=i(Zt),T(qh.$$.fragment,Zt),Zt.forEach(t),jmo=i(js),Nh=n(js,"DIV",{class:!0});var hDe=s(Nh);T(Q6.$$.fragment,hDe),Dmo=i(hDe),Xne=n(hDe,"P",{});var qKr=s(Xne);Gmo=r(qKr,"Register a new feature extractor for this class."),qKr.forEach(t),hDe.forEach(t),js.forEach(t),gNe=i(f),Ei=n(f,"H2",{class:!0});var pDe=s(Ei);jh=n(pDe,"A",{id:!0,class:!0,href:!0});var NKr=s(jh);zne=n(NKr,"SPAN",{});var jKr=s(zne);T(H6.$$.fragment,jKr),jKr.forEach(t),NKr.forEach(t),Omo=i(pDe),Wne=n(pDe,"SPAN",{});var DKr=s(Wne);Vmo=r(DKr,"AutoProcessor"),DKr.forEach(t),pDe.forEach(t),hNe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(U6.$$.fragment,Ds),Xmo=i(Ds),J6=n(Ds,"P",{});var uDe=s(J6);zmo=r(uDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),gI=n(uDe,"A",{href:!0});var GKr=s(gI);Wmo=r(GKr,"AutoProcessor.from_pretrained()"),GKr.forEach(t),Qmo=r(uDe," class method."),uDe.forEach(t),Hmo=i(Ds),Y6=n(Ds,"P",{});var _De=s(Y6);Umo=r(_De,"This class cannot be instantiated directly using "),Qne=n(_De,"CODE",{});var OKr=s(Qne);Jmo=r(OKr,"__init__()"),OKr.forEach(t),Ymo=r(_De," (throws an error)."),_De.forEach(t),Kmo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(K6.$$.fragment,ea),Zmo=i(ea),Hne=n(ea,"P",{});var VKr=s(Hne);ego=r(VKr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),VKr.forEach(t),ogo=i(ea),Ci=n(ea,"P",{});var uZ=s(Ci);rgo=r(uZ,"The processor class to instantiate is selected based on the "),Une=n(uZ,"CODE",{});var XKr=s(Une);tgo=r(XKr,"model_type"),XKr.forEach(t),ago=r(uZ,` property of the config object (either
passed as an argument or loaded from `),Jne=n(uZ,"CODE",{});var zKr=s(Jne);ngo=r(zKr,"pretrained_model_name_or_path"),zKr.forEach(t),sgo=r(uZ," if possible):"),uZ.forEach(t),lgo=i(ea),he=n(ea,"UL",{});var _e=s(he);Dh=n(_e,"LI",{});var E0e=s(Dh);Yne=n(E0e,"STRONG",{});var WKr=s(Yne);igo=r(WKr,"clip"),WKr.forEach(t),dgo=r(E0e," \u2014 "),hI=n(E0e,"A",{href:!0});var QKr=s(hI);cgo=r(QKr,"CLIPProcessor"),QKr.forEach(t),fgo=r(E0e," (CLIP model)"),E0e.forEach(t),mgo=i(_e),Gh=n(_e,"LI",{});var C0e=s(Gh);Kne=n(C0e,"STRONG",{});var HKr=s(Kne);ggo=r(HKr,"flava"),HKr.forEach(t),hgo=r(C0e," \u2014 "),Zne=n(C0e,"CODE",{});var UKr=s(Zne);pgo=r(UKr,"FLAVAProcessor"),UKr.forEach(t),ugo=r(C0e," (Flava model)"),C0e.forEach(t),_go=i(_e),Oh=n(_e,"LI",{});var w0e=s(Oh);ese=n(w0e,"STRONG",{});var JKr=s(ese);bgo=r(JKr,"layoutlmv2"),JKr.forEach(t),vgo=r(w0e," \u2014 "),pI=n(w0e,"A",{href:!0});var YKr=s(pI);Fgo=r(YKr,"LayoutLMv2Processor"),YKr.forEach(t),Tgo=r(w0e," (LayoutLMv2 model)"),w0e.forEach(t),Mgo=i(_e),Vh=n(_e,"LI",{});var A0e=s(Vh);ose=n(A0e,"STRONG",{});var KKr=s(ose);Ego=r(KKr,"layoutlmv3"),KKr.forEach(t),Cgo=r(A0e," \u2014 "),uI=n(A0e,"A",{href:!0});var ZKr=s(uI);wgo=r(ZKr,"LayoutLMv3Processor"),ZKr.forEach(t),Ago=r(A0e," (LayoutLMv3 model)"),A0e.forEach(t),ygo=i(_e),Xh=n(_e,"LI",{});var y0e=s(Xh);rse=n(y0e,"STRONG",{});var eZr=s(rse);Lgo=r(eZr,"layoutxlm"),eZr.forEach(t),xgo=r(y0e," \u2014 "),_I=n(y0e,"A",{href:!0});var oZr=s(_I);$go=r(oZr,"LayoutXLMProcessor"),oZr.forEach(t),kgo=r(y0e," (LayoutXLM model)"),y0e.forEach(t),Sgo=i(_e),zh=n(_e,"LI",{});var L0e=s(zh);tse=n(L0e,"STRONG",{});var rZr=s(tse);Rgo=r(rZr,"sew"),rZr.forEach(t),Pgo=r(L0e," \u2014 "),bI=n(L0e,"A",{href:!0});var tZr=s(bI);Bgo=r(tZr,"Wav2Vec2Processor"),tZr.forEach(t),Igo=r(L0e," (SEW model)"),L0e.forEach(t),qgo=i(_e),Wh=n(_e,"LI",{});var x0e=s(Wh);ase=n(x0e,"STRONG",{});var aZr=s(ase);Ngo=r(aZr,"sew-d"),aZr.forEach(t),jgo=r(x0e," \u2014 "),vI=n(x0e,"A",{href:!0});var nZr=s(vI);Dgo=r(nZr,"Wav2Vec2Processor"),nZr.forEach(t),Ggo=r(x0e," (SEW-D model)"),x0e.forEach(t),Ogo=i(_e),Qh=n(_e,"LI",{});var $0e=s(Qh);nse=n($0e,"STRONG",{});var sZr=s(nse);Vgo=r(sZr,"speech_to_text"),sZr.forEach(t),Xgo=r($0e," \u2014 "),FI=n($0e,"A",{href:!0});var lZr=s(FI);zgo=r(lZr,"Speech2TextProcessor"),lZr.forEach(t),Wgo=r($0e," (Speech2Text model)"),$0e.forEach(t),Qgo=i(_e),Hh=n(_e,"LI",{});var k0e=s(Hh);sse=n(k0e,"STRONG",{});var iZr=s(sse);Hgo=r(iZr,"speech_to_text_2"),iZr.forEach(t),Ugo=r(k0e," \u2014 "),TI=n(k0e,"A",{href:!0});var dZr=s(TI);Jgo=r(dZr,"Speech2Text2Processor"),dZr.forEach(t),Ygo=r(k0e," (Speech2Text2 model)"),k0e.forEach(t),Kgo=i(_e),Uh=n(_e,"LI",{});var S0e=s(Uh);lse=n(S0e,"STRONG",{});var cZr=s(lse);Zgo=r(cZr,"trocr"),cZr.forEach(t),eho=r(S0e," \u2014 "),MI=n(S0e,"A",{href:!0});var fZr=s(MI);oho=r(fZr,"TrOCRProcessor"),fZr.forEach(t),rho=r(S0e," (TrOCR model)"),S0e.forEach(t),tho=i(_e),Jh=n(_e,"LI",{});var R0e=s(Jh);ise=n(R0e,"STRONG",{});var mZr=s(ise);aho=r(mZr,"unispeech"),mZr.forEach(t),nho=r(R0e," \u2014 "),EI=n(R0e,"A",{href:!0});var gZr=s(EI);sho=r(gZr,"Wav2Vec2Processor"),gZr.forEach(t),lho=r(R0e," (UniSpeech model)"),R0e.forEach(t),iho=i(_e),Yh=n(_e,"LI",{});var P0e=s(Yh);dse=n(P0e,"STRONG",{});var hZr=s(dse);dho=r(hZr,"unispeech-sat"),hZr.forEach(t),cho=r(P0e," \u2014 "),CI=n(P0e,"A",{href:!0});var pZr=s(CI);fho=r(pZr,"Wav2Vec2Processor"),pZr.forEach(t),mho=r(P0e," (UniSpeechSat model)"),P0e.forEach(t),gho=i(_e),Kh=n(_e,"LI",{});var B0e=s(Kh);cse=n(B0e,"STRONG",{});var uZr=s(cse);hho=r(uZr,"vilt"),uZr.forEach(t),pho=r(B0e," \u2014 "),wI=n(B0e,"A",{href:!0});var _Zr=s(wI);uho=r(_Zr,"ViltProcessor"),_Zr.forEach(t),_ho=r(B0e," (ViLT model)"),B0e.forEach(t),bho=i(_e),Zh=n(_e,"LI",{});var I0e=s(Zh);fse=n(I0e,"STRONG",{});var bZr=s(fse);vho=r(bZr,"vision-text-dual-encoder"),bZr.forEach(t),Fho=r(I0e," \u2014 "),AI=n(I0e,"A",{href:!0});var vZr=s(AI);Tho=r(vZr,"VisionTextDualEncoderProcessor"),vZr.forEach(t),Mho=r(I0e," (VisionTextDualEncoder model)"),I0e.forEach(t),Eho=i(_e),ep=n(_e,"LI",{});var q0e=s(ep);mse=n(q0e,"STRONG",{});var FZr=s(mse);Cho=r(FZr,"wav2vec2"),FZr.forEach(t),who=r(q0e," \u2014 "),yI=n(q0e,"A",{href:!0});var TZr=s(yI);Aho=r(TZr,"Wav2Vec2Processor"),TZr.forEach(t),yho=r(q0e," (Wav2Vec2 model)"),q0e.forEach(t),Lho=i(_e),op=n(_e,"LI",{});var N0e=s(op);gse=n(N0e,"STRONG",{});var MZr=s(gse);xho=r(MZr,"wav2vec2-conformer"),MZr.forEach(t),$ho=r(N0e," \u2014 "),LI=n(N0e,"A",{href:!0});var EZr=s(LI);kho=r(EZr,"Wav2Vec2Processor"),EZr.forEach(t),Sho=r(N0e," (Wav2Vec2-Conformer model)"),N0e.forEach(t),Rho=i(_e),rp=n(_e,"LI",{});var j0e=s(rp);hse=n(j0e,"STRONG",{});var CZr=s(hse);Pho=r(CZr,"wavlm"),CZr.forEach(t),Bho=r(j0e," \u2014 "),xI=n(j0e,"A",{href:!0});var wZr=s(xI);Iho=r(wZr,"Wav2Vec2Processor"),wZr.forEach(t),qho=r(j0e," (WavLM model)"),j0e.forEach(t),_e.forEach(t),Nho=i(ea),T(tp.$$.fragment,ea),jho=i(ea),T(ap.$$.fragment,ea),ea.forEach(t),Dho=i(Ds),np=n(Ds,"DIV",{class:!0});var bDe=s(np);T(Z6.$$.fragment,bDe),Gho=i(bDe),pse=n(bDe,"P",{});var AZr=s(pse);Oho=r(AZr,"Register a new processor for this class."),AZr.forEach(t),bDe.forEach(t),Ds.forEach(t),pNe=i(f),wi=n(f,"H2",{class:!0});var vDe=s(wi);sp=n(vDe,"A",{id:!0,class:!0,href:!0});var yZr=s(sp);use=n(yZr,"SPAN",{});var LZr=s(use);T(eA.$$.fragment,LZr),LZr.forEach(t),yZr.forEach(t),Vho=i(vDe),_se=n(vDe,"SPAN",{});var xZr=s(_se);Xho=r(xZr,"AutoModel"),xZr.forEach(t),vDe.forEach(t),uNe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(oA.$$.fragment,Gs),zho=i(Gs),Ai=n(Gs,"P",{});var _Z=s(Ai);Who=r(_Z,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$I=n(_Z,"A",{href:!0});var $Zr=s($I);Qho=r($Zr,"from_pretrained()"),$Zr.forEach(t),Hho=r(_Z," class method or the "),kI=n(_Z,"A",{href:!0});var kZr=s(kI);Uho=r(kZr,"from_config()"),kZr.forEach(t),Jho=r(_Z,` class
method.`),_Z.forEach(t),Yho=i(Gs),rA=n(Gs,"P",{});var FDe=s(rA);Kho=r(FDe,"This class cannot be instantiated directly using "),bse=n(FDe,"CODE",{});var SZr=s(bse);Zho=r(SZr,"__init__()"),SZr.forEach(t),epo=r(FDe," (throws an error)."),FDe.forEach(t),opo=i(Gs),tt=n(Gs,"DIV",{class:!0});var Sw=s(tt);T(tA.$$.fragment,Sw),rpo=i(Sw),vse=n(Sw,"P",{});var RZr=s(vse);tpo=r(RZr,"Instantiates one of the base model classes of the library from a configuration."),RZr.forEach(t),apo=i(Sw),yi=n(Sw,"P",{});var bZ=s(yi);npo=r(bZ,`Note:
Loading a model from its configuration file does `),Fse=n(bZ,"STRONG",{});var PZr=s(Fse);spo=r(PZr,"not"),PZr.forEach(t),lpo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SI=n(bZ,"A",{href:!0});var BZr=s(SI);ipo=r(BZr,"from_pretrained()"),BZr.forEach(t),dpo=r(bZ," to load the model weights."),bZ.forEach(t),cpo=i(Sw),T(lp.$$.fragment,Sw),Sw.forEach(t),fpo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(aA.$$.fragment,oa),mpo=i(oa),Tse=n(oa,"P",{});var IZr=s(Tse);gpo=r(IZr,"Instantiate one of the base model classes of the library from a pretrained model."),IZr.forEach(t),hpo=i(oa),La=n(oa,"P",{});var Rw=s(La);ppo=r(Rw,"The model class to instantiate is selected based on the "),Mse=n(Rw,"CODE",{});var qZr=s(Mse);upo=r(qZr,"model_type"),qZr.forEach(t),_po=r(Rw,` property of the config object (either
passed as an argument or loaded from `),Ese=n(Rw,"CODE",{});var NZr=s(Ese);bpo=r(NZr,"pretrained_model_name_or_path"),NZr.forEach(t),vpo=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cse=n(Rw,"CODE",{});var jZr=s(Cse);Fpo=r(jZr,"pretrained_model_name_or_path"),jZr.forEach(t),Tpo=r(Rw,":"),Rw.forEach(t),Mpo=i(oa),x=n(oa,"UL",{});var $=s(x);ip=n($,"LI",{});var D0e=s(ip);wse=n(D0e,"STRONG",{});var DZr=s(wse);Epo=r(DZr,"albert"),DZr.forEach(t),Cpo=r(D0e," \u2014 "),RI=n(D0e,"A",{href:!0});var GZr=s(RI);wpo=r(GZr,"AlbertModel"),GZr.forEach(t),Apo=r(D0e," (ALBERT model)"),D0e.forEach(t),ypo=i($),dp=n($,"LI",{});var G0e=s(dp);Ase=n(G0e,"STRONG",{});var OZr=s(Ase);Lpo=r(OZr,"bart"),OZr.forEach(t),xpo=r(G0e," \u2014 "),PI=n(G0e,"A",{href:!0});var VZr=s(PI);$po=r(VZr,"BartModel"),VZr.forEach(t),kpo=r(G0e," (BART model)"),G0e.forEach(t),Spo=i($),cp=n($,"LI",{});var O0e=s(cp);yse=n(O0e,"STRONG",{});var XZr=s(yse);Rpo=r(XZr,"beit"),XZr.forEach(t),Ppo=r(O0e," \u2014 "),BI=n(O0e,"A",{href:!0});var zZr=s(BI);Bpo=r(zZr,"BeitModel"),zZr.forEach(t),Ipo=r(O0e," (BEiT model)"),O0e.forEach(t),qpo=i($),fp=n($,"LI",{});var V0e=s(fp);Lse=n(V0e,"STRONG",{});var WZr=s(Lse);Npo=r(WZr,"bert"),WZr.forEach(t),jpo=r(V0e," \u2014 "),II=n(V0e,"A",{href:!0});var QZr=s(II);Dpo=r(QZr,"BertModel"),QZr.forEach(t),Gpo=r(V0e," (BERT model)"),V0e.forEach(t),Opo=i($),mp=n($,"LI",{});var X0e=s(mp);xse=n(X0e,"STRONG",{});var HZr=s(xse);Vpo=r(HZr,"bert-generation"),HZr.forEach(t),Xpo=r(X0e," \u2014 "),qI=n(X0e,"A",{href:!0});var UZr=s(qI);zpo=r(UZr,"BertGenerationEncoder"),UZr.forEach(t),Wpo=r(X0e," (Bert Generation model)"),X0e.forEach(t),Qpo=i($),gp=n($,"LI",{});var z0e=s(gp);$se=n(z0e,"STRONG",{});var JZr=s($se);Hpo=r(JZr,"big_bird"),JZr.forEach(t),Upo=r(z0e," \u2014 "),NI=n(z0e,"A",{href:!0});var YZr=s(NI);Jpo=r(YZr,"BigBirdModel"),YZr.forEach(t),Ypo=r(z0e," (BigBird model)"),z0e.forEach(t),Kpo=i($),hp=n($,"LI",{});var W0e=s(hp);kse=n(W0e,"STRONG",{});var KZr=s(kse);Zpo=r(KZr,"bigbird_pegasus"),KZr.forEach(t),euo=r(W0e," \u2014 "),jI=n(W0e,"A",{href:!0});var ZZr=s(jI);ouo=r(ZZr,"BigBirdPegasusModel"),ZZr.forEach(t),ruo=r(W0e," (BigBirdPegasus model)"),W0e.forEach(t),tuo=i($),pp=n($,"LI",{});var Q0e=s(pp);Sse=n(Q0e,"STRONG",{});var eet=s(Sse);auo=r(eet,"blenderbot"),eet.forEach(t),nuo=r(Q0e," \u2014 "),DI=n(Q0e,"A",{href:!0});var oet=s(DI);suo=r(oet,"BlenderbotModel"),oet.forEach(t),luo=r(Q0e," (Blenderbot model)"),Q0e.forEach(t),iuo=i($),up=n($,"LI",{});var H0e=s(up);Rse=n(H0e,"STRONG",{});var ret=s(Rse);duo=r(ret,"blenderbot-small"),ret.forEach(t),cuo=r(H0e," \u2014 "),GI=n(H0e,"A",{href:!0});var tet=s(GI);fuo=r(tet,"BlenderbotSmallModel"),tet.forEach(t),muo=r(H0e," (BlenderbotSmall model)"),H0e.forEach(t),guo=i($),_p=n($,"LI",{});var U0e=s(_p);Pse=n(U0e,"STRONG",{});var aet=s(Pse);huo=r(aet,"camembert"),aet.forEach(t),puo=r(U0e," \u2014 "),OI=n(U0e,"A",{href:!0});var net=s(OI);uuo=r(net,"CamembertModel"),net.forEach(t),_uo=r(U0e," (CamemBERT model)"),U0e.forEach(t),buo=i($),bp=n($,"LI",{});var J0e=s(bp);Bse=n(J0e,"STRONG",{});var set=s(Bse);vuo=r(set,"canine"),set.forEach(t),Fuo=r(J0e," \u2014 "),VI=n(J0e,"A",{href:!0});var iet=s(VI);Tuo=r(iet,"CanineModel"),iet.forEach(t),Muo=r(J0e," (Canine model)"),J0e.forEach(t),Euo=i($),vp=n($,"LI",{});var Y0e=s(vp);Ise=n(Y0e,"STRONG",{});var det=s(Ise);Cuo=r(det,"clip"),det.forEach(t),wuo=r(Y0e," \u2014 "),XI=n(Y0e,"A",{href:!0});var cet=s(XI);Auo=r(cet,"CLIPModel"),cet.forEach(t),yuo=r(Y0e," (CLIP model)"),Y0e.forEach(t),Luo=i($),Fp=n($,"LI",{});var K0e=s(Fp);qse=n(K0e,"STRONG",{});var fet=s(qse);xuo=r(fet,"convbert"),fet.forEach(t),$uo=r(K0e," \u2014 "),zI=n(K0e,"A",{href:!0});var met=s(zI);kuo=r(met,"ConvBertModel"),met.forEach(t),Suo=r(K0e," (ConvBERT model)"),K0e.forEach(t),Ruo=i($),Tp=n($,"LI",{});var Z0e=s(Tp);Nse=n(Z0e,"STRONG",{});var get=s(Nse);Puo=r(get,"convnext"),get.forEach(t),Buo=r(Z0e," \u2014 "),WI=n(Z0e,"A",{href:!0});var het=s(WI);Iuo=r(het,"ConvNextModel"),het.forEach(t),quo=r(Z0e," (ConvNext model)"),Z0e.forEach(t),Nuo=i($),Mp=n($,"LI",{});var e6e=s(Mp);jse=n(e6e,"STRONG",{});var pet=s(jse);juo=r(pet,"ctrl"),pet.forEach(t),Duo=r(e6e," \u2014 "),QI=n(e6e,"A",{href:!0});var uet=s(QI);Guo=r(uet,"CTRLModel"),uet.forEach(t),Ouo=r(e6e," (CTRL model)"),e6e.forEach(t),Vuo=i($),Ep=n($,"LI",{});var o6e=s(Ep);Dse=n(o6e,"STRONG",{});var _et=s(Dse);Xuo=r(_et,"cvt"),_et.forEach(t),zuo=r(o6e," \u2014 "),HI=n(o6e,"A",{href:!0});var bet=s(HI);Wuo=r(bet,"CvtModel"),bet.forEach(t),Quo=r(o6e," (CvT model)"),o6e.forEach(t),Huo=i($),Cp=n($,"LI",{});var r6e=s(Cp);Gse=n(r6e,"STRONG",{});var vet=s(Gse);Uuo=r(vet,"data2vec-audio"),vet.forEach(t),Juo=r(r6e," \u2014 "),UI=n(r6e,"A",{href:!0});var Fet=s(UI);Yuo=r(Fet,"Data2VecAudioModel"),Fet.forEach(t),Kuo=r(r6e," (Data2VecAudio model)"),r6e.forEach(t),Zuo=i($),wp=n($,"LI",{});var t6e=s(wp);Ose=n(t6e,"STRONG",{});var Tet=s(Ose);e_o=r(Tet,"data2vec-text"),Tet.forEach(t),o_o=r(t6e," \u2014 "),JI=n(t6e,"A",{href:!0});var Met=s(JI);r_o=r(Met,"Data2VecTextModel"),Met.forEach(t),t_o=r(t6e," (Data2VecText model)"),t6e.forEach(t),a_o=i($),Ap=n($,"LI",{});var a6e=s(Ap);Vse=n(a6e,"STRONG",{});var Eet=s(Vse);n_o=r(Eet,"data2vec-vision"),Eet.forEach(t),s_o=r(a6e," \u2014 "),YI=n(a6e,"A",{href:!0});var Cet=s(YI);l_o=r(Cet,"Data2VecVisionModel"),Cet.forEach(t),i_o=r(a6e," (Data2VecVision model)"),a6e.forEach(t),d_o=i($),yp=n($,"LI",{});var n6e=s(yp);Xse=n(n6e,"STRONG",{});var wet=s(Xse);c_o=r(wet,"deberta"),wet.forEach(t),f_o=r(n6e," \u2014 "),KI=n(n6e,"A",{href:!0});var Aet=s(KI);m_o=r(Aet,"DebertaModel"),Aet.forEach(t),g_o=r(n6e," (DeBERTa model)"),n6e.forEach(t),h_o=i($),Lp=n($,"LI",{});var s6e=s(Lp);zse=n(s6e,"STRONG",{});var yet=s(zse);p_o=r(yet,"deberta-v2"),yet.forEach(t),u_o=r(s6e," \u2014 "),ZI=n(s6e,"A",{href:!0});var Let=s(ZI);__o=r(Let,"DebertaV2Model"),Let.forEach(t),b_o=r(s6e," (DeBERTa-v2 model)"),s6e.forEach(t),v_o=i($),xp=n($,"LI",{});var l6e=s(xp);Wse=n(l6e,"STRONG",{});var xet=s(Wse);F_o=r(xet,"decision_transformer"),xet.forEach(t),T_o=r(l6e," \u2014 "),eq=n(l6e,"A",{href:!0});var $et=s(eq);M_o=r($et,"DecisionTransformerModel"),$et.forEach(t),E_o=r(l6e," (Decision Transformer model)"),l6e.forEach(t),C_o=i($),$p=n($,"LI",{});var i6e=s($p);Qse=n(i6e,"STRONG",{});var ket=s(Qse);w_o=r(ket,"deit"),ket.forEach(t),A_o=r(i6e," \u2014 "),oq=n(i6e,"A",{href:!0});var Set=s(oq);y_o=r(Set,"DeiTModel"),Set.forEach(t),L_o=r(i6e," (DeiT model)"),i6e.forEach(t),x_o=i($),kp=n($,"LI",{});var d6e=s(kp);Hse=n(d6e,"STRONG",{});var Ret=s(Hse);$_o=r(Ret,"detr"),Ret.forEach(t),k_o=r(d6e," \u2014 "),rq=n(d6e,"A",{href:!0});var Pet=s(rq);S_o=r(Pet,"DetrModel"),Pet.forEach(t),R_o=r(d6e," (DETR model)"),d6e.forEach(t),P_o=i($),Sp=n($,"LI",{});var c6e=s(Sp);Use=n(c6e,"STRONG",{});var Bet=s(Use);B_o=r(Bet,"distilbert"),Bet.forEach(t),I_o=r(c6e," \u2014 "),tq=n(c6e,"A",{href:!0});var Iet=s(tq);q_o=r(Iet,"DistilBertModel"),Iet.forEach(t),N_o=r(c6e," (DistilBERT model)"),c6e.forEach(t),j_o=i($),Rp=n($,"LI",{});var f6e=s(Rp);Jse=n(f6e,"STRONG",{});var qet=s(Jse);D_o=r(qet,"dpr"),qet.forEach(t),G_o=r(f6e," \u2014 "),aq=n(f6e,"A",{href:!0});var Net=s(aq);O_o=r(Net,"DPRQuestionEncoder"),Net.forEach(t),V_o=r(f6e," (DPR model)"),f6e.forEach(t),X_o=i($),Pp=n($,"LI",{});var m6e=s(Pp);Yse=n(m6e,"STRONG",{});var jet=s(Yse);z_o=r(jet,"dpt"),jet.forEach(t),W_o=r(m6e," \u2014 "),nq=n(m6e,"A",{href:!0});var Det=s(nq);Q_o=r(Det,"DPTModel"),Det.forEach(t),H_o=r(m6e," (DPT model)"),m6e.forEach(t),U_o=i($),Bp=n($,"LI",{});var g6e=s(Bp);Kse=n(g6e,"STRONG",{});var Get=s(Kse);J_o=r(Get,"electra"),Get.forEach(t),Y_o=r(g6e," \u2014 "),sq=n(g6e,"A",{href:!0});var Oet=s(sq);K_o=r(Oet,"ElectraModel"),Oet.forEach(t),Z_o=r(g6e," (ELECTRA model)"),g6e.forEach(t),e1o=i($),Ip=n($,"LI",{});var h6e=s(Ip);Zse=n(h6e,"STRONG",{});var Vet=s(Zse);o1o=r(Vet,"flaubert"),Vet.forEach(t),r1o=r(h6e," \u2014 "),lq=n(h6e,"A",{href:!0});var Xet=s(lq);t1o=r(Xet,"FlaubertModel"),Xet.forEach(t),a1o=r(h6e," (FlauBERT model)"),h6e.forEach(t),n1o=i($),qp=n($,"LI",{});var p6e=s(qp);ele=n(p6e,"STRONG",{});var zet=s(ele);s1o=r(zet,"flava"),zet.forEach(t),l1o=r(p6e," \u2014 "),iq=n(p6e,"A",{href:!0});var Wet=s(iq);i1o=r(Wet,"FlavaModel"),Wet.forEach(t),d1o=r(p6e," (Flava model)"),p6e.forEach(t),c1o=i($),Np=n($,"LI",{});var u6e=s(Np);ole=n(u6e,"STRONG",{});var Qet=s(ole);f1o=r(Qet,"fnet"),Qet.forEach(t),m1o=r(u6e," \u2014 "),dq=n(u6e,"A",{href:!0});var Het=s(dq);g1o=r(Het,"FNetModel"),Het.forEach(t),h1o=r(u6e," (FNet model)"),u6e.forEach(t),p1o=i($),jp=n($,"LI",{});var _6e=s(jp);rle=n(_6e,"STRONG",{});var Uet=s(rle);u1o=r(Uet,"fsmt"),Uet.forEach(t),_1o=r(_6e," \u2014 "),cq=n(_6e,"A",{href:!0});var Jet=s(cq);b1o=r(Jet,"FSMTModel"),Jet.forEach(t),v1o=r(_6e," (FairSeq Machine-Translation model)"),_6e.forEach(t),F1o=i($),Ps=n($,"LI",{});var V$=s(Ps);tle=n(V$,"STRONG",{});var Yet=s(tle);T1o=r(Yet,"funnel"),Yet.forEach(t),M1o=r(V$," \u2014 "),fq=n(V$,"A",{href:!0});var Ket=s(fq);E1o=r(Ket,"FunnelModel"),Ket.forEach(t),C1o=r(V$," or "),mq=n(V$,"A",{href:!0});var Zet=s(mq);w1o=r(Zet,"FunnelBaseModel"),Zet.forEach(t),A1o=r(V$," (Funnel Transformer model)"),V$.forEach(t),y1o=i($),Dp=n($,"LI",{});var b6e=s(Dp);ale=n(b6e,"STRONG",{});var eot=s(ale);L1o=r(eot,"glpn"),eot.forEach(t),x1o=r(b6e," \u2014 "),gq=n(b6e,"A",{href:!0});var oot=s(gq);$1o=r(oot,"GLPNModel"),oot.forEach(t),k1o=r(b6e," (GLPN model)"),b6e.forEach(t),S1o=i($),Gp=n($,"LI",{});var v6e=s(Gp);nle=n(v6e,"STRONG",{});var rot=s(nle);R1o=r(rot,"gpt2"),rot.forEach(t),P1o=r(v6e," \u2014 "),hq=n(v6e,"A",{href:!0});var tot=s(hq);B1o=r(tot,"GPT2Model"),tot.forEach(t),I1o=r(v6e," (OpenAI GPT-2 model)"),v6e.forEach(t),q1o=i($),Op=n($,"LI",{});var F6e=s(Op);sle=n(F6e,"STRONG",{});var aot=s(sle);N1o=r(aot,"gpt_neo"),aot.forEach(t),j1o=r(F6e," \u2014 "),pq=n(F6e,"A",{href:!0});var not=s(pq);D1o=r(not,"GPTNeoModel"),not.forEach(t),G1o=r(F6e," (GPT Neo model)"),F6e.forEach(t),O1o=i($),Vp=n($,"LI",{});var T6e=s(Vp);lle=n(T6e,"STRONG",{});var sot=s(lle);V1o=r(sot,"gpt_neox"),sot.forEach(t),X1o=r(T6e," \u2014 "),uq=n(T6e,"A",{href:!0});var lot=s(uq);z1o=r(lot,"GPTNeoXModel"),lot.forEach(t),W1o=r(T6e," (GPT NeoX model)"),T6e.forEach(t),Q1o=i($),Xp=n($,"LI",{});var M6e=s(Xp);ile=n(M6e,"STRONG",{});var iot=s(ile);H1o=r(iot,"gptj"),iot.forEach(t),U1o=r(M6e," \u2014 "),_q=n(M6e,"A",{href:!0});var dot=s(_q);J1o=r(dot,"GPTJModel"),dot.forEach(t),Y1o=r(M6e," (GPT-J model)"),M6e.forEach(t),K1o=i($),zp=n($,"LI",{});var E6e=s(zp);dle=n(E6e,"STRONG",{});var cot=s(dle);Z1o=r(cot,"hubert"),cot.forEach(t),e9o=r(E6e," \u2014 "),bq=n(E6e,"A",{href:!0});var fot=s(bq);o9o=r(fot,"HubertModel"),fot.forEach(t),r9o=r(E6e," (Hubert model)"),E6e.forEach(t),t9o=i($),Wp=n($,"LI",{});var C6e=s(Wp);cle=n(C6e,"STRONG",{});var mot=s(cle);a9o=r(mot,"ibert"),mot.forEach(t),n9o=r(C6e," \u2014 "),vq=n(C6e,"A",{href:!0});var got=s(vq);s9o=r(got,"IBertModel"),got.forEach(t),l9o=r(C6e," (I-BERT model)"),C6e.forEach(t),i9o=i($),Qp=n($,"LI",{});var w6e=s(Qp);fle=n(w6e,"STRONG",{});var hot=s(fle);d9o=r(hot,"imagegpt"),hot.forEach(t),c9o=r(w6e," \u2014 "),Fq=n(w6e,"A",{href:!0});var pot=s(Fq);f9o=r(pot,"ImageGPTModel"),pot.forEach(t),m9o=r(w6e," (ImageGPT model)"),w6e.forEach(t),g9o=i($),Hp=n($,"LI",{});var A6e=s(Hp);mle=n(A6e,"STRONG",{});var uot=s(mle);h9o=r(uot,"layoutlm"),uot.forEach(t),p9o=r(A6e," \u2014 "),Tq=n(A6e,"A",{href:!0});var _ot=s(Tq);u9o=r(_ot,"LayoutLMModel"),_ot.forEach(t),_9o=r(A6e," (LayoutLM model)"),A6e.forEach(t),b9o=i($),Up=n($,"LI",{});var y6e=s(Up);gle=n(y6e,"STRONG",{});var bot=s(gle);v9o=r(bot,"layoutlmv2"),bot.forEach(t),F9o=r(y6e," \u2014 "),Mq=n(y6e,"A",{href:!0});var vot=s(Mq);T9o=r(vot,"LayoutLMv2Model"),vot.forEach(t),M9o=r(y6e," (LayoutLMv2 model)"),y6e.forEach(t),E9o=i($),Jp=n($,"LI",{});var L6e=s(Jp);hle=n(L6e,"STRONG",{});var Fot=s(hle);C9o=r(Fot,"layoutlmv3"),Fot.forEach(t),w9o=r(L6e," \u2014 "),Eq=n(L6e,"A",{href:!0});var Tot=s(Eq);A9o=r(Tot,"LayoutLMv3Model"),Tot.forEach(t),y9o=r(L6e," (LayoutLMv3 model)"),L6e.forEach(t),L9o=i($),Yp=n($,"LI",{});var x6e=s(Yp);ple=n(x6e,"STRONG",{});var Mot=s(ple);x9o=r(Mot,"led"),Mot.forEach(t),$9o=r(x6e," \u2014 "),Cq=n(x6e,"A",{href:!0});var Eot=s(Cq);k9o=r(Eot,"LEDModel"),Eot.forEach(t),S9o=r(x6e," (LED model)"),x6e.forEach(t),R9o=i($),Kp=n($,"LI",{});var $6e=s(Kp);ule=n($6e,"STRONG",{});var Cot=s(ule);P9o=r(Cot,"longformer"),Cot.forEach(t),B9o=r($6e," \u2014 "),wq=n($6e,"A",{href:!0});var wot=s(wq);I9o=r(wot,"LongformerModel"),wot.forEach(t),q9o=r($6e," (Longformer model)"),$6e.forEach(t),N9o=i($),Zp=n($,"LI",{});var k6e=s(Zp);_le=n(k6e,"STRONG",{});var Aot=s(_le);j9o=r(Aot,"luke"),Aot.forEach(t),D9o=r(k6e," \u2014 "),Aq=n(k6e,"A",{href:!0});var yot=s(Aq);G9o=r(yot,"LukeModel"),yot.forEach(t),O9o=r(k6e," (LUKE model)"),k6e.forEach(t),V9o=i($),eu=n($,"LI",{});var S6e=s(eu);ble=n(S6e,"STRONG",{});var Lot=s(ble);X9o=r(Lot,"lxmert"),Lot.forEach(t),z9o=r(S6e," \u2014 "),yq=n(S6e,"A",{href:!0});var xot=s(yq);W9o=r(xot,"LxmertModel"),xot.forEach(t),Q9o=r(S6e," (LXMERT model)"),S6e.forEach(t),H9o=i($),ou=n($,"LI",{});var R6e=s(ou);vle=n(R6e,"STRONG",{});var $ot=s(vle);U9o=r($ot,"m2m_100"),$ot.forEach(t),J9o=r(R6e," \u2014 "),Lq=n(R6e,"A",{href:!0});var kot=s(Lq);Y9o=r(kot,"M2M100Model"),kot.forEach(t),K9o=r(R6e," (M2M100 model)"),R6e.forEach(t),Z9o=i($),ru=n($,"LI",{});var P6e=s(ru);Fle=n(P6e,"STRONG",{});var Sot=s(Fle);ebo=r(Sot,"marian"),Sot.forEach(t),obo=r(P6e," \u2014 "),xq=n(P6e,"A",{href:!0});var Rot=s(xq);rbo=r(Rot,"MarianModel"),Rot.forEach(t),tbo=r(P6e," (Marian model)"),P6e.forEach(t),abo=i($),tu=n($,"LI",{});var B6e=s(tu);Tle=n(B6e,"STRONG",{});var Pot=s(Tle);nbo=r(Pot,"maskformer"),Pot.forEach(t),sbo=r(B6e," \u2014 "),$q=n(B6e,"A",{href:!0});var Bot=s($q);lbo=r(Bot,"MaskFormerModel"),Bot.forEach(t),ibo=r(B6e," (MaskFormer model)"),B6e.forEach(t),dbo=i($),au=n($,"LI",{});var I6e=s(au);Mle=n(I6e,"STRONG",{});var Iot=s(Mle);cbo=r(Iot,"mbart"),Iot.forEach(t),fbo=r(I6e," \u2014 "),kq=n(I6e,"A",{href:!0});var qot=s(kq);mbo=r(qot,"MBartModel"),qot.forEach(t),gbo=r(I6e," (mBART model)"),I6e.forEach(t),hbo=i($),nu=n($,"LI",{});var q6e=s(nu);Ele=n(q6e,"STRONG",{});var Not=s(Ele);pbo=r(Not,"megatron-bert"),Not.forEach(t),ubo=r(q6e," \u2014 "),Sq=n(q6e,"A",{href:!0});var jot=s(Sq);_bo=r(jot,"MegatronBertModel"),jot.forEach(t),bbo=r(q6e," (MegatronBert model)"),q6e.forEach(t),vbo=i($),su=n($,"LI",{});var N6e=s(su);Cle=n(N6e,"STRONG",{});var Dot=s(Cle);Fbo=r(Dot,"mobilebert"),Dot.forEach(t),Tbo=r(N6e," \u2014 "),Rq=n(N6e,"A",{href:!0});var Got=s(Rq);Mbo=r(Got,"MobileBertModel"),Got.forEach(t),Ebo=r(N6e," (MobileBERT model)"),N6e.forEach(t),Cbo=i($),lu=n($,"LI",{});var j6e=s(lu);wle=n(j6e,"STRONG",{});var Oot=s(wle);wbo=r(Oot,"mpnet"),Oot.forEach(t),Abo=r(j6e," \u2014 "),Pq=n(j6e,"A",{href:!0});var Vot=s(Pq);ybo=r(Vot,"MPNetModel"),Vot.forEach(t),Lbo=r(j6e," (MPNet model)"),j6e.forEach(t),xbo=i($),iu=n($,"LI",{});var D6e=s(iu);Ale=n(D6e,"STRONG",{});var Xot=s(Ale);$bo=r(Xot,"mt5"),Xot.forEach(t),kbo=r(D6e," \u2014 "),Bq=n(D6e,"A",{href:!0});var zot=s(Bq);Sbo=r(zot,"MT5Model"),zot.forEach(t),Rbo=r(D6e," (mT5 model)"),D6e.forEach(t),Pbo=i($),du=n($,"LI",{});var G6e=s(du);yle=n(G6e,"STRONG",{});var Wot=s(yle);Bbo=r(Wot,"nystromformer"),Wot.forEach(t),Ibo=r(G6e," \u2014 "),Iq=n(G6e,"A",{href:!0});var Qot=s(Iq);qbo=r(Qot,"NystromformerModel"),Qot.forEach(t),Nbo=r(G6e," (Nystromformer model)"),G6e.forEach(t),jbo=i($),cu=n($,"LI",{});var O6e=s(cu);Lle=n(O6e,"STRONG",{});var Hot=s(Lle);Dbo=r(Hot,"openai-gpt"),Hot.forEach(t),Gbo=r(O6e," \u2014 "),qq=n(O6e,"A",{href:!0});var Uot=s(qq);Obo=r(Uot,"OpenAIGPTModel"),Uot.forEach(t),Vbo=r(O6e," (OpenAI GPT model)"),O6e.forEach(t),Xbo=i($),fu=n($,"LI",{});var V6e=s(fu);xle=n(V6e,"STRONG",{});var Jot=s(xle);zbo=r(Jot,"opt"),Jot.forEach(t),Wbo=r(V6e," \u2014 "),Nq=n(V6e,"A",{href:!0});var Yot=s(Nq);Qbo=r(Yot,"OPTModel"),Yot.forEach(t),Hbo=r(V6e," (OPT model)"),V6e.forEach(t),Ubo=i($),mu=n($,"LI",{});var X6e=s(mu);$le=n(X6e,"STRONG",{});var Kot=s($le);Jbo=r(Kot,"pegasus"),Kot.forEach(t),Ybo=r(X6e," \u2014 "),jq=n(X6e,"A",{href:!0});var Zot=s(jq);Kbo=r(Zot,"PegasusModel"),Zot.forEach(t),Zbo=r(X6e," (Pegasus model)"),X6e.forEach(t),e2o=i($),gu=n($,"LI",{});var z6e=s(gu);kle=n(z6e,"STRONG",{});var ert=s(kle);o2o=r(ert,"perceiver"),ert.forEach(t),r2o=r(z6e," \u2014 "),Dq=n(z6e,"A",{href:!0});var ort=s(Dq);t2o=r(ort,"PerceiverModel"),ort.forEach(t),a2o=r(z6e," (Perceiver model)"),z6e.forEach(t),n2o=i($),hu=n($,"LI",{});var W6e=s(hu);Sle=n(W6e,"STRONG",{});var rrt=s(Sle);s2o=r(rrt,"plbart"),rrt.forEach(t),l2o=r(W6e," \u2014 "),Gq=n(W6e,"A",{href:!0});var trt=s(Gq);i2o=r(trt,"PLBartModel"),trt.forEach(t),d2o=r(W6e," (PLBart model)"),W6e.forEach(t),c2o=i($),pu=n($,"LI",{});var Q6e=s(pu);Rle=n(Q6e,"STRONG",{});var art=s(Rle);f2o=r(art,"poolformer"),art.forEach(t),m2o=r(Q6e," \u2014 "),Oq=n(Q6e,"A",{href:!0});var nrt=s(Oq);g2o=r(nrt,"PoolFormerModel"),nrt.forEach(t),h2o=r(Q6e," (PoolFormer model)"),Q6e.forEach(t),p2o=i($),uu=n($,"LI",{});var H6e=s(uu);Ple=n(H6e,"STRONG",{});var srt=s(Ple);u2o=r(srt,"prophetnet"),srt.forEach(t),_2o=r(H6e," \u2014 "),Vq=n(H6e,"A",{href:!0});var lrt=s(Vq);b2o=r(lrt,"ProphetNetModel"),lrt.forEach(t),v2o=r(H6e," (ProphetNet model)"),H6e.forEach(t),F2o=i($),_u=n($,"LI",{});var U6e=s(_u);Ble=n(U6e,"STRONG",{});var irt=s(Ble);T2o=r(irt,"qdqbert"),irt.forEach(t),M2o=r(U6e," \u2014 "),Xq=n(U6e,"A",{href:!0});var drt=s(Xq);E2o=r(drt,"QDQBertModel"),drt.forEach(t),C2o=r(U6e," (QDQBert model)"),U6e.forEach(t),w2o=i($),bu=n($,"LI",{});var J6e=s(bu);Ile=n(J6e,"STRONG",{});var crt=s(Ile);A2o=r(crt,"reformer"),crt.forEach(t),y2o=r(J6e," \u2014 "),zq=n(J6e,"A",{href:!0});var frt=s(zq);L2o=r(frt,"ReformerModel"),frt.forEach(t),x2o=r(J6e," (Reformer model)"),J6e.forEach(t),$2o=i($),vu=n($,"LI",{});var Y6e=s(vu);qle=n(Y6e,"STRONG",{});var mrt=s(qle);k2o=r(mrt,"regnet"),mrt.forEach(t),S2o=r(Y6e," \u2014 "),Wq=n(Y6e,"A",{href:!0});var grt=s(Wq);R2o=r(grt,"RegNetModel"),grt.forEach(t),P2o=r(Y6e," (RegNet model)"),Y6e.forEach(t),B2o=i($),Fu=n($,"LI",{});var K6e=s(Fu);Nle=n(K6e,"STRONG",{});var hrt=s(Nle);I2o=r(hrt,"rembert"),hrt.forEach(t),q2o=r(K6e," \u2014 "),Qq=n(K6e,"A",{href:!0});var prt=s(Qq);N2o=r(prt,"RemBertModel"),prt.forEach(t),j2o=r(K6e," (RemBERT model)"),K6e.forEach(t),D2o=i($),Tu=n($,"LI",{});var Z6e=s(Tu);jle=n(Z6e,"STRONG",{});var urt=s(jle);G2o=r(urt,"resnet"),urt.forEach(t),O2o=r(Z6e," \u2014 "),Hq=n(Z6e,"A",{href:!0});var _rt=s(Hq);V2o=r(_rt,"ResNetModel"),_rt.forEach(t),X2o=r(Z6e," (ResNet model)"),Z6e.forEach(t),z2o=i($),Mu=n($,"LI",{});var eAe=s(Mu);Dle=n(eAe,"STRONG",{});var brt=s(Dle);W2o=r(brt,"retribert"),brt.forEach(t),Q2o=r(eAe," \u2014 "),Uq=n(eAe,"A",{href:!0});var vrt=s(Uq);H2o=r(vrt,"RetriBertModel"),vrt.forEach(t),U2o=r(eAe," (RetriBERT model)"),eAe.forEach(t),J2o=i($),Eu=n($,"LI",{});var oAe=s(Eu);Gle=n(oAe,"STRONG",{});var Frt=s(Gle);Y2o=r(Frt,"roberta"),Frt.forEach(t),K2o=r(oAe," \u2014 "),Jq=n(oAe,"A",{href:!0});var Trt=s(Jq);Z2o=r(Trt,"RobertaModel"),Trt.forEach(t),e4o=r(oAe," (RoBERTa model)"),oAe.forEach(t),o4o=i($),Cu=n($,"LI",{});var rAe=s(Cu);Ole=n(rAe,"STRONG",{});var Mrt=s(Ole);r4o=r(Mrt,"roformer"),Mrt.forEach(t),t4o=r(rAe," \u2014 "),Yq=n(rAe,"A",{href:!0});var Ert=s(Yq);a4o=r(Ert,"RoFormerModel"),Ert.forEach(t),n4o=r(rAe," (RoFormer model)"),rAe.forEach(t),s4o=i($),wu=n($,"LI",{});var tAe=s(wu);Vle=n(tAe,"STRONG",{});var Crt=s(Vle);l4o=r(Crt,"segformer"),Crt.forEach(t),i4o=r(tAe," \u2014 "),Kq=n(tAe,"A",{href:!0});var wrt=s(Kq);d4o=r(wrt,"SegformerModel"),wrt.forEach(t),c4o=r(tAe," (SegFormer model)"),tAe.forEach(t),f4o=i($),Au=n($,"LI",{});var aAe=s(Au);Xle=n(aAe,"STRONG",{});var Art=s(Xle);m4o=r(Art,"sew"),Art.forEach(t),g4o=r(aAe," \u2014 "),Zq=n(aAe,"A",{href:!0});var yrt=s(Zq);h4o=r(yrt,"SEWModel"),yrt.forEach(t),p4o=r(aAe," (SEW model)"),aAe.forEach(t),u4o=i($),yu=n($,"LI",{});var nAe=s(yu);zle=n(nAe,"STRONG",{});var Lrt=s(zle);_4o=r(Lrt,"sew-d"),Lrt.forEach(t),b4o=r(nAe," \u2014 "),eN=n(nAe,"A",{href:!0});var xrt=s(eN);v4o=r(xrt,"SEWDModel"),xrt.forEach(t),F4o=r(nAe," (SEW-D model)"),nAe.forEach(t),T4o=i($),Lu=n($,"LI",{});var sAe=s(Lu);Wle=n(sAe,"STRONG",{});var $rt=s(Wle);M4o=r($rt,"speech_to_text"),$rt.forEach(t),E4o=r(sAe," \u2014 "),oN=n(sAe,"A",{href:!0});var krt=s(oN);C4o=r(krt,"Speech2TextModel"),krt.forEach(t),w4o=r(sAe," (Speech2Text model)"),sAe.forEach(t),A4o=i($),xu=n($,"LI",{});var lAe=s(xu);Qle=n(lAe,"STRONG",{});var Srt=s(Qle);y4o=r(Srt,"splinter"),Srt.forEach(t),L4o=r(lAe," \u2014 "),rN=n(lAe,"A",{href:!0});var Rrt=s(rN);x4o=r(Rrt,"SplinterModel"),Rrt.forEach(t),$4o=r(lAe," (Splinter model)"),lAe.forEach(t),k4o=i($),$u=n($,"LI",{});var iAe=s($u);Hle=n(iAe,"STRONG",{});var Prt=s(Hle);S4o=r(Prt,"squeezebert"),Prt.forEach(t),R4o=r(iAe," \u2014 "),tN=n(iAe,"A",{href:!0});var Brt=s(tN);P4o=r(Brt,"SqueezeBertModel"),Brt.forEach(t),B4o=r(iAe," (SqueezeBERT model)"),iAe.forEach(t),I4o=i($),ku=n($,"LI",{});var dAe=s(ku);Ule=n(dAe,"STRONG",{});var Irt=s(Ule);q4o=r(Irt,"swin"),Irt.forEach(t),N4o=r(dAe," \u2014 "),aN=n(dAe,"A",{href:!0});var qrt=s(aN);j4o=r(qrt,"SwinModel"),qrt.forEach(t),D4o=r(dAe," (Swin model)"),dAe.forEach(t),G4o=i($),Su=n($,"LI",{});var cAe=s(Su);Jle=n(cAe,"STRONG",{});var Nrt=s(Jle);O4o=r(Nrt,"t5"),Nrt.forEach(t),V4o=r(cAe," \u2014 "),nN=n(cAe,"A",{href:!0});var jrt=s(nN);X4o=r(jrt,"T5Model"),jrt.forEach(t),z4o=r(cAe," (T5 model)"),cAe.forEach(t),W4o=i($),Ru=n($,"LI",{});var fAe=s(Ru);Yle=n(fAe,"STRONG",{});var Drt=s(Yle);Q4o=r(Drt,"tapas"),Drt.forEach(t),H4o=r(fAe," \u2014 "),sN=n(fAe,"A",{href:!0});var Grt=s(sN);U4o=r(Grt,"TapasModel"),Grt.forEach(t),J4o=r(fAe," (TAPAS model)"),fAe.forEach(t),Y4o=i($),Pu=n($,"LI",{});var mAe=s(Pu);Kle=n(mAe,"STRONG",{});var Ort=s(Kle);K4o=r(Ort,"trajectory_transformer"),Ort.forEach(t),Z4o=r(mAe," \u2014 "),lN=n(mAe,"A",{href:!0});var Vrt=s(lN);evo=r(Vrt,"TrajectoryTransformerModel"),Vrt.forEach(t),ovo=r(mAe," (Trajectory Transformer model)"),mAe.forEach(t),rvo=i($),Bu=n($,"LI",{});var gAe=s(Bu);Zle=n(gAe,"STRONG",{});var Xrt=s(Zle);tvo=r(Xrt,"transfo-xl"),Xrt.forEach(t),avo=r(gAe," \u2014 "),iN=n(gAe,"A",{href:!0});var zrt=s(iN);nvo=r(zrt,"TransfoXLModel"),zrt.forEach(t),svo=r(gAe," (Transformer-XL model)"),gAe.forEach(t),lvo=i($),Iu=n($,"LI",{});var hAe=s(Iu);eie=n(hAe,"STRONG",{});var Wrt=s(eie);ivo=r(Wrt,"unispeech"),Wrt.forEach(t),dvo=r(hAe," \u2014 "),dN=n(hAe,"A",{href:!0});var Qrt=s(dN);cvo=r(Qrt,"UniSpeechModel"),Qrt.forEach(t),fvo=r(hAe," (UniSpeech model)"),hAe.forEach(t),mvo=i($),qu=n($,"LI",{});var pAe=s(qu);oie=n(pAe,"STRONG",{});var Hrt=s(oie);gvo=r(Hrt,"unispeech-sat"),Hrt.forEach(t),hvo=r(pAe," \u2014 "),cN=n(pAe,"A",{href:!0});var Urt=s(cN);pvo=r(Urt,"UniSpeechSatModel"),Urt.forEach(t),uvo=r(pAe," (UniSpeechSat model)"),pAe.forEach(t),_vo=i($),Nu=n($,"LI",{});var uAe=s(Nu);rie=n(uAe,"STRONG",{});var Jrt=s(rie);bvo=r(Jrt,"van"),Jrt.forEach(t),vvo=r(uAe," \u2014 "),fN=n(uAe,"A",{href:!0});var Yrt=s(fN);Fvo=r(Yrt,"VanModel"),Yrt.forEach(t),Tvo=r(uAe," (VAN model)"),uAe.forEach(t),Mvo=i($),ju=n($,"LI",{});var _Ae=s(ju);tie=n(_Ae,"STRONG",{});var Krt=s(tie);Evo=r(Krt,"vilt"),Krt.forEach(t),Cvo=r(_Ae," \u2014 "),mN=n(_Ae,"A",{href:!0});var Zrt=s(mN);wvo=r(Zrt,"ViltModel"),Zrt.forEach(t),Avo=r(_Ae," (ViLT model)"),_Ae.forEach(t),yvo=i($),Du=n($,"LI",{});var bAe=s(Du);aie=n(bAe,"STRONG",{});var ett=s(aie);Lvo=r(ett,"vision-text-dual-encoder"),ett.forEach(t),xvo=r(bAe," \u2014 "),gN=n(bAe,"A",{href:!0});var ott=s(gN);$vo=r(ott,"VisionTextDualEncoderModel"),ott.forEach(t),kvo=r(bAe," (VisionTextDualEncoder model)"),bAe.forEach(t),Svo=i($),Gu=n($,"LI",{});var vAe=s(Gu);nie=n(vAe,"STRONG",{});var rtt=s(nie);Rvo=r(rtt,"visual_bert"),rtt.forEach(t),Pvo=r(vAe," \u2014 "),hN=n(vAe,"A",{href:!0});var ttt=s(hN);Bvo=r(ttt,"VisualBertModel"),ttt.forEach(t),Ivo=r(vAe," (VisualBert model)"),vAe.forEach(t),qvo=i($),Ou=n($,"LI",{});var FAe=s(Ou);sie=n(FAe,"STRONG",{});var att=s(sie);Nvo=r(att,"vit"),att.forEach(t),jvo=r(FAe," \u2014 "),pN=n(FAe,"A",{href:!0});var ntt=s(pN);Dvo=r(ntt,"ViTModel"),ntt.forEach(t),Gvo=r(FAe," (ViT model)"),FAe.forEach(t),Ovo=i($),Vu=n($,"LI",{});var TAe=s(Vu);lie=n(TAe,"STRONG",{});var stt=s(lie);Vvo=r(stt,"vit_mae"),stt.forEach(t),Xvo=r(TAe," \u2014 "),uN=n(TAe,"A",{href:!0});var ltt=s(uN);zvo=r(ltt,"ViTMAEModel"),ltt.forEach(t),Wvo=r(TAe," (ViTMAE model)"),TAe.forEach(t),Qvo=i($),Xu=n($,"LI",{});var MAe=s(Xu);iie=n(MAe,"STRONG",{});var itt=s(iie);Hvo=r(itt,"wav2vec2"),itt.forEach(t),Uvo=r(MAe," \u2014 "),_N=n(MAe,"A",{href:!0});var dtt=s(_N);Jvo=r(dtt,"Wav2Vec2Model"),dtt.forEach(t),Yvo=r(MAe," (Wav2Vec2 model)"),MAe.forEach(t),Kvo=i($),zu=n($,"LI",{});var EAe=s(zu);die=n(EAe,"STRONG",{});var ctt=s(die);Zvo=r(ctt,"wav2vec2-conformer"),ctt.forEach(t),eFo=r(EAe," \u2014 "),bN=n(EAe,"A",{href:!0});var ftt=s(bN);oFo=r(ftt,"Wav2Vec2ConformerModel"),ftt.forEach(t),rFo=r(EAe," (Wav2Vec2-Conformer model)"),EAe.forEach(t),tFo=i($),Wu=n($,"LI",{});var CAe=s(Wu);cie=n(CAe,"STRONG",{});var mtt=s(cie);aFo=r(mtt,"wavlm"),mtt.forEach(t),nFo=r(CAe," \u2014 "),vN=n(CAe,"A",{href:!0});var gtt=s(vN);sFo=r(gtt,"WavLMModel"),gtt.forEach(t),lFo=r(CAe," (WavLM model)"),CAe.forEach(t),iFo=i($),Qu=n($,"LI",{});var wAe=s(Qu);fie=n(wAe,"STRONG",{});var htt=s(fie);dFo=r(htt,"xglm"),htt.forEach(t),cFo=r(wAe," \u2014 "),FN=n(wAe,"A",{href:!0});var ptt=s(FN);fFo=r(ptt,"XGLMModel"),ptt.forEach(t),mFo=r(wAe," (XGLM model)"),wAe.forEach(t),gFo=i($),Hu=n($,"LI",{});var AAe=s(Hu);mie=n(AAe,"STRONG",{});var utt=s(mie);hFo=r(utt,"xlm"),utt.forEach(t),pFo=r(AAe," \u2014 "),TN=n(AAe,"A",{href:!0});var _tt=s(TN);uFo=r(_tt,"XLMModel"),_tt.forEach(t),_Fo=r(AAe," (XLM model)"),AAe.forEach(t),bFo=i($),Uu=n($,"LI",{});var yAe=s(Uu);gie=n(yAe,"STRONG",{});var btt=s(gie);vFo=r(btt,"xlm-prophetnet"),btt.forEach(t),FFo=r(yAe," \u2014 "),MN=n(yAe,"A",{href:!0});var vtt=s(MN);TFo=r(vtt,"XLMProphetNetModel"),vtt.forEach(t),MFo=r(yAe," (XLMProphetNet model)"),yAe.forEach(t),EFo=i($),Ju=n($,"LI",{});var LAe=s(Ju);hie=n(LAe,"STRONG",{});var Ftt=s(hie);CFo=r(Ftt,"xlm-roberta"),Ftt.forEach(t),wFo=r(LAe," \u2014 "),EN=n(LAe,"A",{href:!0});var Ttt=s(EN);AFo=r(Ttt,"XLMRobertaModel"),Ttt.forEach(t),yFo=r(LAe," (XLM-RoBERTa model)"),LAe.forEach(t),LFo=i($),Yu=n($,"LI",{});var xAe=s(Yu);pie=n(xAe,"STRONG",{});var Mtt=s(pie);xFo=r(Mtt,"xlm-roberta-xl"),Mtt.forEach(t),$Fo=r(xAe," \u2014 "),CN=n(xAe,"A",{href:!0});var Ett=s(CN);kFo=r(Ett,"XLMRobertaXLModel"),Ett.forEach(t),SFo=r(xAe," (XLM-RoBERTa-XL model)"),xAe.forEach(t),RFo=i($),Ku=n($,"LI",{});var $Ae=s(Ku);uie=n($Ae,"STRONG",{});var Ctt=s(uie);PFo=r(Ctt,"xlnet"),Ctt.forEach(t),BFo=r($Ae," \u2014 "),wN=n($Ae,"A",{href:!0});var wtt=s(wN);IFo=r(wtt,"XLNetModel"),wtt.forEach(t),qFo=r($Ae," (XLNet model)"),$Ae.forEach(t),NFo=i($),Zu=n($,"LI",{});var kAe=s(Zu);_ie=n(kAe,"STRONG",{});var Att=s(_ie);jFo=r(Att,"yolos"),Att.forEach(t),DFo=r(kAe," \u2014 "),AN=n(kAe,"A",{href:!0});var ytt=s(AN);GFo=r(ytt,"YolosModel"),ytt.forEach(t),OFo=r(kAe," (YOLOS model)"),kAe.forEach(t),VFo=i($),e_=n($,"LI",{});var SAe=s(e_);bie=n(SAe,"STRONG",{});var Ltt=s(bie);XFo=r(Ltt,"yoso"),Ltt.forEach(t),zFo=r(SAe," \u2014 "),yN=n(SAe,"A",{href:!0});var xtt=s(yN);WFo=r(xtt,"YosoModel"),xtt.forEach(t),QFo=r(SAe," (YOSO model)"),SAe.forEach(t),$.forEach(t),HFo=i(oa),o_=n(oa,"P",{});var RAe=s(o_);UFo=r(RAe,"The model is set in evaluation mode by default using "),vie=n(RAe,"CODE",{});var $tt=s(vie);JFo=r($tt,"model.eval()"),$tt.forEach(t),YFo=r(RAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fie=n(RAe,"CODE",{});var ktt=s(Fie);KFo=r(ktt,"model.train()"),ktt.forEach(t),RAe.forEach(t),ZFo=i(oa),T(r_.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),_Ne=i(f),Li=n(f,"H2",{class:!0});var TDe=s(Li);t_=n(TDe,"A",{id:!0,class:!0,href:!0});var Stt=s(t_);Tie=n(Stt,"SPAN",{});var Rtt=s(Tie);T(nA.$$.fragment,Rtt),Rtt.forEach(t),Stt.forEach(t),eTo=i(TDe),Mie=n(TDe,"SPAN",{});var Ptt=s(Mie);oTo=r(Ptt,"AutoModelForPreTraining"),Ptt.forEach(t),TDe.forEach(t),bNe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(sA.$$.fragment,Os),rTo=i(Os),xi=n(Os,"P",{});var vZ=s(xi);tTo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LN=n(vZ,"A",{href:!0});var Btt=s(LN);aTo=r(Btt,"from_pretrained()"),Btt.forEach(t),nTo=r(vZ," class method or the "),xN=n(vZ,"A",{href:!0});var Itt=s(xN);sTo=r(Itt,"from_config()"),Itt.forEach(t),lTo=r(vZ,` class
method.`),vZ.forEach(t),iTo=i(Os),lA=n(Os,"P",{});var MDe=s(lA);dTo=r(MDe,"This class cannot be instantiated directly using "),Eie=n(MDe,"CODE",{});var qtt=s(Eie);cTo=r(qtt,"__init__()"),qtt.forEach(t),fTo=r(MDe," (throws an error)."),MDe.forEach(t),mTo=i(Os),at=n(Os,"DIV",{class:!0});var Pw=s(at);T(iA.$$.fragment,Pw),gTo=i(Pw),Cie=n(Pw,"P",{});var Ntt=s(Cie);hTo=r(Ntt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ntt.forEach(t),pTo=i(Pw),$i=n(Pw,"P",{});var FZ=s($i);uTo=r(FZ,`Note:
Loading a model from its configuration file does `),wie=n(FZ,"STRONG",{});var jtt=s(wie);_To=r(jtt,"not"),jtt.forEach(t),bTo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$N=n(FZ,"A",{href:!0});var Dtt=s($N);vTo=r(Dtt,"from_pretrained()"),Dtt.forEach(t),FTo=r(FZ," to load the model weights."),FZ.forEach(t),TTo=i(Pw),T(a_.$$.fragment,Pw),Pw.forEach(t),MTo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(dA.$$.fragment,ra),ETo=i(ra),Aie=n(ra,"P",{});var Gtt=s(Aie);CTo=r(Gtt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Gtt.forEach(t),wTo=i(ra),xa=n(ra,"P",{});var Bw=s(xa);ATo=r(Bw,"The model class to instantiate is selected based on the "),yie=n(Bw,"CODE",{});var Ott=s(yie);yTo=r(Ott,"model_type"),Ott.forEach(t),LTo=r(Bw,` property of the config object (either
passed as an argument or loaded from `),Lie=n(Bw,"CODE",{});var Vtt=s(Lie);xTo=r(Vtt,"pretrained_model_name_or_path"),Vtt.forEach(t),$To=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xie=n(Bw,"CODE",{});var Xtt=s(xie);kTo=r(Xtt,"pretrained_model_name_or_path"),Xtt.forEach(t),STo=r(Bw,":"),Bw.forEach(t),RTo=i(ra),G=n(ra,"UL",{});var O=s(G);n_=n(O,"LI",{});var PAe=s(n_);$ie=n(PAe,"STRONG",{});var ztt=s($ie);PTo=r(ztt,"albert"),ztt.forEach(t),BTo=r(PAe," \u2014 "),kN=n(PAe,"A",{href:!0});var Wtt=s(kN);ITo=r(Wtt,"AlbertForPreTraining"),Wtt.forEach(t),qTo=r(PAe," (ALBERT model)"),PAe.forEach(t),NTo=i(O),s_=n(O,"LI",{});var BAe=s(s_);kie=n(BAe,"STRONG",{});var Qtt=s(kie);jTo=r(Qtt,"bart"),Qtt.forEach(t),DTo=r(BAe," \u2014 "),SN=n(BAe,"A",{href:!0});var Htt=s(SN);GTo=r(Htt,"BartForConditionalGeneration"),Htt.forEach(t),OTo=r(BAe," (BART model)"),BAe.forEach(t),VTo=i(O),l_=n(O,"LI",{});var IAe=s(l_);Sie=n(IAe,"STRONG",{});var Utt=s(Sie);XTo=r(Utt,"bert"),Utt.forEach(t),zTo=r(IAe," \u2014 "),RN=n(IAe,"A",{href:!0});var Jtt=s(RN);WTo=r(Jtt,"BertForPreTraining"),Jtt.forEach(t),QTo=r(IAe," (BERT model)"),IAe.forEach(t),HTo=i(O),i_=n(O,"LI",{});var qAe=s(i_);Rie=n(qAe,"STRONG",{});var Ytt=s(Rie);UTo=r(Ytt,"big_bird"),Ytt.forEach(t),JTo=r(qAe," \u2014 "),PN=n(qAe,"A",{href:!0});var Ktt=s(PN);YTo=r(Ktt,"BigBirdForPreTraining"),Ktt.forEach(t),KTo=r(qAe," (BigBird model)"),qAe.forEach(t),ZTo=i(O),d_=n(O,"LI",{});var NAe=s(d_);Pie=n(NAe,"STRONG",{});var Ztt=s(Pie);e7o=r(Ztt,"camembert"),Ztt.forEach(t),o7o=r(NAe," \u2014 "),BN=n(NAe,"A",{href:!0});var eat=s(BN);r7o=r(eat,"CamembertForMaskedLM"),eat.forEach(t),t7o=r(NAe," (CamemBERT model)"),NAe.forEach(t),a7o=i(O),c_=n(O,"LI",{});var jAe=s(c_);Bie=n(jAe,"STRONG",{});var oat=s(Bie);n7o=r(oat,"ctrl"),oat.forEach(t),s7o=r(jAe," \u2014 "),IN=n(jAe,"A",{href:!0});var rat=s(IN);l7o=r(rat,"CTRLLMHeadModel"),rat.forEach(t),i7o=r(jAe," (CTRL model)"),jAe.forEach(t),d7o=i(O),f_=n(O,"LI",{});var DAe=s(f_);Iie=n(DAe,"STRONG",{});var tat=s(Iie);c7o=r(tat,"data2vec-text"),tat.forEach(t),f7o=r(DAe," \u2014 "),qN=n(DAe,"A",{href:!0});var aat=s(qN);m7o=r(aat,"Data2VecTextForMaskedLM"),aat.forEach(t),g7o=r(DAe," (Data2VecText model)"),DAe.forEach(t),h7o=i(O),m_=n(O,"LI",{});var GAe=s(m_);qie=n(GAe,"STRONG",{});var nat=s(qie);p7o=r(nat,"deberta"),nat.forEach(t),u7o=r(GAe," \u2014 "),NN=n(GAe,"A",{href:!0});var sat=s(NN);_7o=r(sat,"DebertaForMaskedLM"),sat.forEach(t),b7o=r(GAe," (DeBERTa model)"),GAe.forEach(t),v7o=i(O),g_=n(O,"LI",{});var OAe=s(g_);Nie=n(OAe,"STRONG",{});var lat=s(Nie);F7o=r(lat,"deberta-v2"),lat.forEach(t),T7o=r(OAe," \u2014 "),jN=n(OAe,"A",{href:!0});var iat=s(jN);M7o=r(iat,"DebertaV2ForMaskedLM"),iat.forEach(t),E7o=r(OAe," (DeBERTa-v2 model)"),OAe.forEach(t),C7o=i(O),h_=n(O,"LI",{});var VAe=s(h_);jie=n(VAe,"STRONG",{});var dat=s(jie);w7o=r(dat,"distilbert"),dat.forEach(t),A7o=r(VAe," \u2014 "),DN=n(VAe,"A",{href:!0});var cat=s(DN);y7o=r(cat,"DistilBertForMaskedLM"),cat.forEach(t),L7o=r(VAe," (DistilBERT model)"),VAe.forEach(t),x7o=i(O),p_=n(O,"LI",{});var XAe=s(p_);Die=n(XAe,"STRONG",{});var fat=s(Die);$7o=r(fat,"electra"),fat.forEach(t),k7o=r(XAe," \u2014 "),GN=n(XAe,"A",{href:!0});var mat=s(GN);S7o=r(mat,"ElectraForPreTraining"),mat.forEach(t),R7o=r(XAe," (ELECTRA model)"),XAe.forEach(t),P7o=i(O),u_=n(O,"LI",{});var zAe=s(u_);Gie=n(zAe,"STRONG",{});var gat=s(Gie);B7o=r(gat,"flaubert"),gat.forEach(t),I7o=r(zAe," \u2014 "),ON=n(zAe,"A",{href:!0});var hat=s(ON);q7o=r(hat,"FlaubertWithLMHeadModel"),hat.forEach(t),N7o=r(zAe," (FlauBERT model)"),zAe.forEach(t),j7o=i(O),__=n(O,"LI",{});var WAe=s(__);Oie=n(WAe,"STRONG",{});var pat=s(Oie);D7o=r(pat,"flava"),pat.forEach(t),G7o=r(WAe," \u2014 "),VN=n(WAe,"A",{href:!0});var uat=s(VN);O7o=r(uat,"FlavaForPreTraining"),uat.forEach(t),V7o=r(WAe," (Flava model)"),WAe.forEach(t),X7o=i(O),b_=n(O,"LI",{});var QAe=s(b_);Vie=n(QAe,"STRONG",{});var _at=s(Vie);z7o=r(_at,"fnet"),_at.forEach(t),W7o=r(QAe," \u2014 "),XN=n(QAe,"A",{href:!0});var bat=s(XN);Q7o=r(bat,"FNetForPreTraining"),bat.forEach(t),H7o=r(QAe," (FNet model)"),QAe.forEach(t),U7o=i(O),v_=n(O,"LI",{});var HAe=s(v_);Xie=n(HAe,"STRONG",{});var vat=s(Xie);J7o=r(vat,"fsmt"),vat.forEach(t),Y7o=r(HAe," \u2014 "),zN=n(HAe,"A",{href:!0});var Fat=s(zN);K7o=r(Fat,"FSMTForConditionalGeneration"),Fat.forEach(t),Z7o=r(HAe," (FairSeq Machine-Translation model)"),HAe.forEach(t),eMo=i(O),F_=n(O,"LI",{});var UAe=s(F_);zie=n(UAe,"STRONG",{});var Tat=s(zie);oMo=r(Tat,"funnel"),Tat.forEach(t),rMo=r(UAe," \u2014 "),WN=n(UAe,"A",{href:!0});var Mat=s(WN);tMo=r(Mat,"FunnelForPreTraining"),Mat.forEach(t),aMo=r(UAe," (Funnel Transformer model)"),UAe.forEach(t),nMo=i(O),T_=n(O,"LI",{});var JAe=s(T_);Wie=n(JAe,"STRONG",{});var Eat=s(Wie);sMo=r(Eat,"gpt2"),Eat.forEach(t),lMo=r(JAe," \u2014 "),QN=n(JAe,"A",{href:!0});var Cat=s(QN);iMo=r(Cat,"GPT2LMHeadModel"),Cat.forEach(t),dMo=r(JAe," (OpenAI GPT-2 model)"),JAe.forEach(t),cMo=i(O),M_=n(O,"LI",{});var YAe=s(M_);Qie=n(YAe,"STRONG",{});var wat=s(Qie);fMo=r(wat,"ibert"),wat.forEach(t),mMo=r(YAe," \u2014 "),HN=n(YAe,"A",{href:!0});var Aat=s(HN);gMo=r(Aat,"IBertForMaskedLM"),Aat.forEach(t),hMo=r(YAe," (I-BERT model)"),YAe.forEach(t),pMo=i(O),E_=n(O,"LI",{});var KAe=s(E_);Hie=n(KAe,"STRONG",{});var yat=s(Hie);uMo=r(yat,"layoutlm"),yat.forEach(t),_Mo=r(KAe," \u2014 "),UN=n(KAe,"A",{href:!0});var Lat=s(UN);bMo=r(Lat,"LayoutLMForMaskedLM"),Lat.forEach(t),vMo=r(KAe," (LayoutLM model)"),KAe.forEach(t),FMo=i(O),C_=n(O,"LI",{});var ZAe=s(C_);Uie=n(ZAe,"STRONG",{});var xat=s(Uie);TMo=r(xat,"longformer"),xat.forEach(t),MMo=r(ZAe," \u2014 "),JN=n(ZAe,"A",{href:!0});var $at=s(JN);EMo=r($at,"LongformerForMaskedLM"),$at.forEach(t),CMo=r(ZAe," (Longformer model)"),ZAe.forEach(t),wMo=i(O),w_=n(O,"LI",{});var eye=s(w_);Jie=n(eye,"STRONG",{});var kat=s(Jie);AMo=r(kat,"lxmert"),kat.forEach(t),yMo=r(eye," \u2014 "),YN=n(eye,"A",{href:!0});var Sat=s(YN);LMo=r(Sat,"LxmertForPreTraining"),Sat.forEach(t),xMo=r(eye," (LXMERT model)"),eye.forEach(t),$Mo=i(O),A_=n(O,"LI",{});var oye=s(A_);Yie=n(oye,"STRONG",{});var Rat=s(Yie);kMo=r(Rat,"megatron-bert"),Rat.forEach(t),SMo=r(oye," \u2014 "),KN=n(oye,"A",{href:!0});var Pat=s(KN);RMo=r(Pat,"MegatronBertForPreTraining"),Pat.forEach(t),PMo=r(oye," (MegatronBert model)"),oye.forEach(t),BMo=i(O),y_=n(O,"LI",{});var rye=s(y_);Kie=n(rye,"STRONG",{});var Bat=s(Kie);IMo=r(Bat,"mobilebert"),Bat.forEach(t),qMo=r(rye," \u2014 "),ZN=n(rye,"A",{href:!0});var Iat=s(ZN);NMo=r(Iat,"MobileBertForPreTraining"),Iat.forEach(t),jMo=r(rye," (MobileBERT model)"),rye.forEach(t),DMo=i(O),L_=n(O,"LI",{});var tye=s(L_);Zie=n(tye,"STRONG",{});var qat=s(Zie);GMo=r(qat,"mpnet"),qat.forEach(t),OMo=r(tye," \u2014 "),ej=n(tye,"A",{href:!0});var Nat=s(ej);VMo=r(Nat,"MPNetForMaskedLM"),Nat.forEach(t),XMo=r(tye," (MPNet model)"),tye.forEach(t),zMo=i(O),x_=n(O,"LI",{});var aye=s(x_);ede=n(aye,"STRONG",{});var jat=s(ede);WMo=r(jat,"openai-gpt"),jat.forEach(t),QMo=r(aye," \u2014 "),oj=n(aye,"A",{href:!0});var Dat=s(oj);HMo=r(Dat,"OpenAIGPTLMHeadModel"),Dat.forEach(t),UMo=r(aye," (OpenAI GPT model)"),aye.forEach(t),JMo=i(O),$_=n(O,"LI",{});var nye=s($_);ode=n(nye,"STRONG",{});var Gat=s(ode);YMo=r(Gat,"retribert"),Gat.forEach(t),KMo=r(nye," \u2014 "),rj=n(nye,"A",{href:!0});var Oat=s(rj);ZMo=r(Oat,"RetriBertModel"),Oat.forEach(t),eEo=r(nye," (RetriBERT model)"),nye.forEach(t),oEo=i(O),k_=n(O,"LI",{});var sye=s(k_);rde=n(sye,"STRONG",{});var Vat=s(rde);rEo=r(Vat,"roberta"),Vat.forEach(t),tEo=r(sye," \u2014 "),tj=n(sye,"A",{href:!0});var Xat=s(tj);aEo=r(Xat,"RobertaForMaskedLM"),Xat.forEach(t),nEo=r(sye," (RoBERTa model)"),sye.forEach(t),sEo=i(O),S_=n(O,"LI",{});var lye=s(S_);tde=n(lye,"STRONG",{});var zat=s(tde);lEo=r(zat,"splinter"),zat.forEach(t),iEo=r(lye," \u2014 "),aj=n(lye,"A",{href:!0});var Wat=s(aj);dEo=r(Wat,"SplinterForPreTraining"),Wat.forEach(t),cEo=r(lye," (Splinter model)"),lye.forEach(t),fEo=i(O),R_=n(O,"LI",{});var iye=s(R_);ade=n(iye,"STRONG",{});var Qat=s(ade);mEo=r(Qat,"squeezebert"),Qat.forEach(t),gEo=r(iye," \u2014 "),nj=n(iye,"A",{href:!0});var Hat=s(nj);hEo=r(Hat,"SqueezeBertForMaskedLM"),Hat.forEach(t),pEo=r(iye," (SqueezeBERT model)"),iye.forEach(t),uEo=i(O),P_=n(O,"LI",{});var dye=s(P_);nde=n(dye,"STRONG",{});var Uat=s(nde);_Eo=r(Uat,"t5"),Uat.forEach(t),bEo=r(dye," \u2014 "),sj=n(dye,"A",{href:!0});var Jat=s(sj);vEo=r(Jat,"T5ForConditionalGeneration"),Jat.forEach(t),FEo=r(dye," (T5 model)"),dye.forEach(t),TEo=i(O),B_=n(O,"LI",{});var cye=s(B_);sde=n(cye,"STRONG",{});var Yat=s(sde);MEo=r(Yat,"tapas"),Yat.forEach(t),EEo=r(cye," \u2014 "),lj=n(cye,"A",{href:!0});var Kat=s(lj);CEo=r(Kat,"TapasForMaskedLM"),Kat.forEach(t),wEo=r(cye," (TAPAS model)"),cye.forEach(t),AEo=i(O),I_=n(O,"LI",{});var fye=s(I_);lde=n(fye,"STRONG",{});var Zat=s(lde);yEo=r(Zat,"transfo-xl"),Zat.forEach(t),LEo=r(fye," \u2014 "),ij=n(fye,"A",{href:!0});var ent=s(ij);xEo=r(ent,"TransfoXLLMHeadModel"),ent.forEach(t),$Eo=r(fye," (Transformer-XL model)"),fye.forEach(t),kEo=i(O),q_=n(O,"LI",{});var mye=s(q_);ide=n(mye,"STRONG",{});var ont=s(ide);SEo=r(ont,"unispeech"),ont.forEach(t),REo=r(mye," \u2014 "),dj=n(mye,"A",{href:!0});var rnt=s(dj);PEo=r(rnt,"UniSpeechForPreTraining"),rnt.forEach(t),BEo=r(mye," (UniSpeech model)"),mye.forEach(t),IEo=i(O),N_=n(O,"LI",{});var gye=s(N_);dde=n(gye,"STRONG",{});var tnt=s(dde);qEo=r(tnt,"unispeech-sat"),tnt.forEach(t),NEo=r(gye," \u2014 "),cj=n(gye,"A",{href:!0});var ant=s(cj);jEo=r(ant,"UniSpeechSatForPreTraining"),ant.forEach(t),DEo=r(gye," (UniSpeechSat model)"),gye.forEach(t),GEo=i(O),j_=n(O,"LI",{});var hye=s(j_);cde=n(hye,"STRONG",{});var nnt=s(cde);OEo=r(nnt,"visual_bert"),nnt.forEach(t),VEo=r(hye," \u2014 "),fj=n(hye,"A",{href:!0});var snt=s(fj);XEo=r(snt,"VisualBertForPreTraining"),snt.forEach(t),zEo=r(hye," (VisualBert model)"),hye.forEach(t),WEo=i(O),D_=n(O,"LI",{});var pye=s(D_);fde=n(pye,"STRONG",{});var lnt=s(fde);QEo=r(lnt,"vit_mae"),lnt.forEach(t),HEo=r(pye," \u2014 "),mj=n(pye,"A",{href:!0});var int=s(mj);UEo=r(int,"ViTMAEForPreTraining"),int.forEach(t),JEo=r(pye," (ViTMAE model)"),pye.forEach(t),YEo=i(O),G_=n(O,"LI",{});var uye=s(G_);mde=n(uye,"STRONG",{});var dnt=s(mde);KEo=r(dnt,"wav2vec2"),dnt.forEach(t),ZEo=r(uye," \u2014 "),gj=n(uye,"A",{href:!0});var cnt=s(gj);eCo=r(cnt,"Wav2Vec2ForPreTraining"),cnt.forEach(t),oCo=r(uye," (Wav2Vec2 model)"),uye.forEach(t),rCo=i(O),O_=n(O,"LI",{});var _ye=s(O_);gde=n(_ye,"STRONG",{});var fnt=s(gde);tCo=r(fnt,"wav2vec2-conformer"),fnt.forEach(t),aCo=r(_ye," \u2014 "),hj=n(_ye,"A",{href:!0});var mnt=s(hj);nCo=r(mnt,"Wav2Vec2ConformerForPreTraining"),mnt.forEach(t),sCo=r(_ye," (Wav2Vec2-Conformer model)"),_ye.forEach(t),lCo=i(O),V_=n(O,"LI",{});var bye=s(V_);hde=n(bye,"STRONG",{});var gnt=s(hde);iCo=r(gnt,"xlm"),gnt.forEach(t),dCo=r(bye," \u2014 "),pj=n(bye,"A",{href:!0});var hnt=s(pj);cCo=r(hnt,"XLMWithLMHeadModel"),hnt.forEach(t),fCo=r(bye," (XLM model)"),bye.forEach(t),mCo=i(O),X_=n(O,"LI",{});var vye=s(X_);pde=n(vye,"STRONG",{});var pnt=s(pde);gCo=r(pnt,"xlm-roberta"),pnt.forEach(t),hCo=r(vye," \u2014 "),uj=n(vye,"A",{href:!0});var unt=s(uj);pCo=r(unt,"XLMRobertaForMaskedLM"),unt.forEach(t),uCo=r(vye," (XLM-RoBERTa model)"),vye.forEach(t),_Co=i(O),z_=n(O,"LI",{});var Fye=s(z_);ude=n(Fye,"STRONG",{});var _nt=s(ude);bCo=r(_nt,"xlm-roberta-xl"),_nt.forEach(t),vCo=r(Fye," \u2014 "),_j=n(Fye,"A",{href:!0});var bnt=s(_j);FCo=r(bnt,"XLMRobertaXLForMaskedLM"),bnt.forEach(t),TCo=r(Fye," (XLM-RoBERTa-XL model)"),Fye.forEach(t),MCo=i(O),W_=n(O,"LI",{});var Tye=s(W_);_de=n(Tye,"STRONG",{});var vnt=s(_de);ECo=r(vnt,"xlnet"),vnt.forEach(t),CCo=r(Tye," \u2014 "),bj=n(Tye,"A",{href:!0});var Fnt=s(bj);wCo=r(Fnt,"XLNetLMHeadModel"),Fnt.forEach(t),ACo=r(Tye," (XLNet model)"),Tye.forEach(t),O.forEach(t),yCo=i(ra),Q_=n(ra,"P",{});var Mye=s(Q_);LCo=r(Mye,"The model is set in evaluation mode by default using "),bde=n(Mye,"CODE",{});var Tnt=s(bde);xCo=r(Tnt,"model.eval()"),Tnt.forEach(t),$Co=r(Mye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vde=n(Mye,"CODE",{});var Mnt=s(vde);kCo=r(Mnt,"model.train()"),Mnt.forEach(t),Mye.forEach(t),SCo=i(ra),T(H_.$$.fragment,ra),ra.forEach(t),Os.forEach(t),vNe=i(f),ki=n(f,"H2",{class:!0});var EDe=s(ki);U_=n(EDe,"A",{id:!0,class:!0,href:!0});var Ent=s(U_);Fde=n(Ent,"SPAN",{});var Cnt=s(Fde);T(cA.$$.fragment,Cnt),Cnt.forEach(t),Ent.forEach(t),RCo=i(EDe),Tde=n(EDe,"SPAN",{});var wnt=s(Tde);PCo=r(wnt,"AutoModelForCausalLM"),wnt.forEach(t),EDe.forEach(t),FNe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(fA.$$.fragment,Vs),BCo=i(Vs),Si=n(Vs,"P",{});var TZ=s(Si);ICo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vj=n(TZ,"A",{href:!0});var Ant=s(vj);qCo=r(Ant,"from_pretrained()"),Ant.forEach(t),NCo=r(TZ," class method or the "),Fj=n(TZ,"A",{href:!0});var ynt=s(Fj);jCo=r(ynt,"from_config()"),ynt.forEach(t),DCo=r(TZ,` class
method.`),TZ.forEach(t),GCo=i(Vs),mA=n(Vs,"P",{});var CDe=s(mA);OCo=r(CDe,"This class cannot be instantiated directly using "),Mde=n(CDe,"CODE",{});var Lnt=s(Mde);VCo=r(Lnt,"__init__()"),Lnt.forEach(t),XCo=r(CDe," (throws an error)."),CDe.forEach(t),zCo=i(Vs),nt=n(Vs,"DIV",{class:!0});var Iw=s(nt);T(gA.$$.fragment,Iw),WCo=i(Iw),Ede=n(Iw,"P",{});var xnt=s(Ede);QCo=r(xnt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xnt.forEach(t),HCo=i(Iw),Ri=n(Iw,"P",{});var MZ=s(Ri);UCo=r(MZ,`Note:
Loading a model from its configuration file does `),Cde=n(MZ,"STRONG",{});var $nt=s(Cde);JCo=r($nt,"not"),$nt.forEach(t),YCo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tj=n(MZ,"A",{href:!0});var knt=s(Tj);KCo=r(knt,"from_pretrained()"),knt.forEach(t),ZCo=r(MZ," to load the model weights."),MZ.forEach(t),e5o=i(Iw),T(J_.$$.fragment,Iw),Iw.forEach(t),o5o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(hA.$$.fragment,ta),r5o=i(ta),wde=n(ta,"P",{});var Snt=s(wde);t5o=r(Snt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Snt.forEach(t),a5o=i(ta),$a=n(ta,"P",{});var qw=s($a);n5o=r(qw,"The model class to instantiate is selected based on the "),Ade=n(qw,"CODE",{});var Rnt=s(Ade);s5o=r(Rnt,"model_type"),Rnt.forEach(t),l5o=r(qw,` property of the config object (either
passed as an argument or loaded from `),yde=n(qw,"CODE",{});var Pnt=s(yde);i5o=r(Pnt,"pretrained_model_name_or_path"),Pnt.forEach(t),d5o=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lde=n(qw,"CODE",{});var Bnt=s(Lde);c5o=r(Bnt,"pretrained_model_name_or_path"),Bnt.forEach(t),f5o=r(qw,":"),qw.forEach(t),m5o=i(ta),z=n(ta,"UL",{});var Q=s(z);Y_=n(Q,"LI",{});var Eye=s(Y_);xde=n(Eye,"STRONG",{});var Int=s(xde);g5o=r(Int,"bart"),Int.forEach(t),h5o=r(Eye," \u2014 "),Mj=n(Eye,"A",{href:!0});var qnt=s(Mj);p5o=r(qnt,"BartForCausalLM"),qnt.forEach(t),u5o=r(Eye," (BART model)"),Eye.forEach(t),_5o=i(Q),K_=n(Q,"LI",{});var Cye=s(K_);$de=n(Cye,"STRONG",{});var Nnt=s($de);b5o=r(Nnt,"bert"),Nnt.forEach(t),v5o=r(Cye," \u2014 "),Ej=n(Cye,"A",{href:!0});var jnt=s(Ej);F5o=r(jnt,"BertLMHeadModel"),jnt.forEach(t),T5o=r(Cye," (BERT model)"),Cye.forEach(t),M5o=i(Q),Z_=n(Q,"LI",{});var wye=s(Z_);kde=n(wye,"STRONG",{});var Dnt=s(kde);E5o=r(Dnt,"bert-generation"),Dnt.forEach(t),C5o=r(wye," \u2014 "),Cj=n(wye,"A",{href:!0});var Gnt=s(Cj);w5o=r(Gnt,"BertGenerationDecoder"),Gnt.forEach(t),A5o=r(wye," (Bert Generation model)"),wye.forEach(t),y5o=i(Q),e1=n(Q,"LI",{});var Aye=s(e1);Sde=n(Aye,"STRONG",{});var Ont=s(Sde);L5o=r(Ont,"big_bird"),Ont.forEach(t),x5o=r(Aye," \u2014 "),wj=n(Aye,"A",{href:!0});var Vnt=s(wj);$5o=r(Vnt,"BigBirdForCausalLM"),Vnt.forEach(t),k5o=r(Aye," (BigBird model)"),Aye.forEach(t),S5o=i(Q),o1=n(Q,"LI",{});var yye=s(o1);Rde=n(yye,"STRONG",{});var Xnt=s(Rde);R5o=r(Xnt,"bigbird_pegasus"),Xnt.forEach(t),P5o=r(yye," \u2014 "),Aj=n(yye,"A",{href:!0});var znt=s(Aj);B5o=r(znt,"BigBirdPegasusForCausalLM"),znt.forEach(t),I5o=r(yye," (BigBirdPegasus model)"),yye.forEach(t),q5o=i(Q),r1=n(Q,"LI",{});var Lye=s(r1);Pde=n(Lye,"STRONG",{});var Wnt=s(Pde);N5o=r(Wnt,"blenderbot"),Wnt.forEach(t),j5o=r(Lye," \u2014 "),yj=n(Lye,"A",{href:!0});var Qnt=s(yj);D5o=r(Qnt,"BlenderbotForCausalLM"),Qnt.forEach(t),G5o=r(Lye," (Blenderbot model)"),Lye.forEach(t),O5o=i(Q),t1=n(Q,"LI",{});var xye=s(t1);Bde=n(xye,"STRONG",{});var Hnt=s(Bde);V5o=r(Hnt,"blenderbot-small"),Hnt.forEach(t),X5o=r(xye," \u2014 "),Lj=n(xye,"A",{href:!0});var Unt=s(Lj);z5o=r(Unt,"BlenderbotSmallForCausalLM"),Unt.forEach(t),W5o=r(xye," (BlenderbotSmall model)"),xye.forEach(t),Q5o=i(Q),a1=n(Q,"LI",{});var $ye=s(a1);Ide=n($ye,"STRONG",{});var Jnt=s(Ide);H5o=r(Jnt,"camembert"),Jnt.forEach(t),U5o=r($ye," \u2014 "),xj=n($ye,"A",{href:!0});var Ynt=s(xj);J5o=r(Ynt,"CamembertForCausalLM"),Ynt.forEach(t),Y5o=r($ye," (CamemBERT model)"),$ye.forEach(t),K5o=i(Q),n1=n(Q,"LI",{});var kye=s(n1);qde=n(kye,"STRONG",{});var Knt=s(qde);Z5o=r(Knt,"ctrl"),Knt.forEach(t),e3o=r(kye," \u2014 "),$j=n(kye,"A",{href:!0});var Znt=s($j);o3o=r(Znt,"CTRLLMHeadModel"),Znt.forEach(t),r3o=r(kye," (CTRL model)"),kye.forEach(t),t3o=i(Q),s1=n(Q,"LI",{});var Sye=s(s1);Nde=n(Sye,"STRONG",{});var est=s(Nde);a3o=r(est,"data2vec-text"),est.forEach(t),n3o=r(Sye," \u2014 "),kj=n(Sye,"A",{href:!0});var ost=s(kj);s3o=r(ost,"Data2VecTextForCausalLM"),ost.forEach(t),l3o=r(Sye," (Data2VecText model)"),Sye.forEach(t),i3o=i(Q),l1=n(Q,"LI",{});var Rye=s(l1);jde=n(Rye,"STRONG",{});var rst=s(jde);d3o=r(rst,"electra"),rst.forEach(t),c3o=r(Rye," \u2014 "),Sj=n(Rye,"A",{href:!0});var tst=s(Sj);f3o=r(tst,"ElectraForCausalLM"),tst.forEach(t),m3o=r(Rye," (ELECTRA model)"),Rye.forEach(t),g3o=i(Q),i1=n(Q,"LI",{});var Pye=s(i1);Dde=n(Pye,"STRONG",{});var ast=s(Dde);h3o=r(ast,"gpt2"),ast.forEach(t),p3o=r(Pye," \u2014 "),Rj=n(Pye,"A",{href:!0});var nst=s(Rj);u3o=r(nst,"GPT2LMHeadModel"),nst.forEach(t),_3o=r(Pye," (OpenAI GPT-2 model)"),Pye.forEach(t),b3o=i(Q),d1=n(Q,"LI",{});var Bye=s(d1);Gde=n(Bye,"STRONG",{});var sst=s(Gde);v3o=r(sst,"gpt_neo"),sst.forEach(t),F3o=r(Bye," \u2014 "),Pj=n(Bye,"A",{href:!0});var lst=s(Pj);T3o=r(lst,"GPTNeoForCausalLM"),lst.forEach(t),M3o=r(Bye," (GPT Neo model)"),Bye.forEach(t),E3o=i(Q),c1=n(Q,"LI",{});var Iye=s(c1);Ode=n(Iye,"STRONG",{});var ist=s(Ode);C3o=r(ist,"gpt_neox"),ist.forEach(t),w3o=r(Iye," \u2014 "),Bj=n(Iye,"A",{href:!0});var dst=s(Bj);A3o=r(dst,"GPTNeoXForCausalLM"),dst.forEach(t),y3o=r(Iye," (GPT NeoX model)"),Iye.forEach(t),L3o=i(Q),f1=n(Q,"LI",{});var qye=s(f1);Vde=n(qye,"STRONG",{});var cst=s(Vde);x3o=r(cst,"gptj"),cst.forEach(t),$3o=r(qye," \u2014 "),Ij=n(qye,"A",{href:!0});var fst=s(Ij);k3o=r(fst,"GPTJForCausalLM"),fst.forEach(t),S3o=r(qye," (GPT-J model)"),qye.forEach(t),R3o=i(Q),m1=n(Q,"LI",{});var Nye=s(m1);Xde=n(Nye,"STRONG",{});var mst=s(Xde);P3o=r(mst,"marian"),mst.forEach(t),B3o=r(Nye," \u2014 "),qj=n(Nye,"A",{href:!0});var gst=s(qj);I3o=r(gst,"MarianForCausalLM"),gst.forEach(t),q3o=r(Nye," (Marian model)"),Nye.forEach(t),N3o=i(Q),g1=n(Q,"LI",{});var jye=s(g1);zde=n(jye,"STRONG",{});var hst=s(zde);j3o=r(hst,"mbart"),hst.forEach(t),D3o=r(jye," \u2014 "),Nj=n(jye,"A",{href:!0});var pst=s(Nj);G3o=r(pst,"MBartForCausalLM"),pst.forEach(t),O3o=r(jye," (mBART model)"),jye.forEach(t),V3o=i(Q),h1=n(Q,"LI",{});var Dye=s(h1);Wde=n(Dye,"STRONG",{});var ust=s(Wde);X3o=r(ust,"megatron-bert"),ust.forEach(t),z3o=r(Dye," \u2014 "),jj=n(Dye,"A",{href:!0});var _st=s(jj);W3o=r(_st,"MegatronBertForCausalLM"),_st.forEach(t),Q3o=r(Dye," (MegatronBert model)"),Dye.forEach(t),H3o=i(Q),p1=n(Q,"LI",{});var Gye=s(p1);Qde=n(Gye,"STRONG",{});var bst=s(Qde);U3o=r(bst,"openai-gpt"),bst.forEach(t),J3o=r(Gye," \u2014 "),Dj=n(Gye,"A",{href:!0});var vst=s(Dj);Y3o=r(vst,"OpenAIGPTLMHeadModel"),vst.forEach(t),K3o=r(Gye," (OpenAI GPT model)"),Gye.forEach(t),Z3o=i(Q),u1=n(Q,"LI",{});var Oye=s(u1);Hde=n(Oye,"STRONG",{});var Fst=s(Hde);ewo=r(Fst,"opt"),Fst.forEach(t),owo=r(Oye," \u2014 "),Gj=n(Oye,"A",{href:!0});var Tst=s(Gj);rwo=r(Tst,"OPTForCausalLM"),Tst.forEach(t),two=r(Oye," (OPT model)"),Oye.forEach(t),awo=i(Q),_1=n(Q,"LI",{});var Vye=s(_1);Ude=n(Vye,"STRONG",{});var Mst=s(Ude);nwo=r(Mst,"pegasus"),Mst.forEach(t),swo=r(Vye," \u2014 "),Oj=n(Vye,"A",{href:!0});var Est=s(Oj);lwo=r(Est,"PegasusForCausalLM"),Est.forEach(t),iwo=r(Vye," (Pegasus model)"),Vye.forEach(t),dwo=i(Q),b1=n(Q,"LI",{});var Xye=s(b1);Jde=n(Xye,"STRONG",{});var Cst=s(Jde);cwo=r(Cst,"plbart"),Cst.forEach(t),fwo=r(Xye," \u2014 "),Vj=n(Xye,"A",{href:!0});var wst=s(Vj);mwo=r(wst,"PLBartForCausalLM"),wst.forEach(t),gwo=r(Xye," (PLBart model)"),Xye.forEach(t),hwo=i(Q),v1=n(Q,"LI",{});var zye=s(v1);Yde=n(zye,"STRONG",{});var Ast=s(Yde);pwo=r(Ast,"prophetnet"),Ast.forEach(t),uwo=r(zye," \u2014 "),Xj=n(zye,"A",{href:!0});var yst=s(Xj);_wo=r(yst,"ProphetNetForCausalLM"),yst.forEach(t),bwo=r(zye," (ProphetNet model)"),zye.forEach(t),vwo=i(Q),F1=n(Q,"LI",{});var Wye=s(F1);Kde=n(Wye,"STRONG",{});var Lst=s(Kde);Fwo=r(Lst,"qdqbert"),Lst.forEach(t),Two=r(Wye," \u2014 "),zj=n(Wye,"A",{href:!0});var xst=s(zj);Mwo=r(xst,"QDQBertLMHeadModel"),xst.forEach(t),Ewo=r(Wye," (QDQBert model)"),Wye.forEach(t),Cwo=i(Q),T1=n(Q,"LI",{});var Qye=s(T1);Zde=n(Qye,"STRONG",{});var $st=s(Zde);wwo=r($st,"reformer"),$st.forEach(t),Awo=r(Qye," \u2014 "),Wj=n(Qye,"A",{href:!0});var kst=s(Wj);ywo=r(kst,"ReformerModelWithLMHead"),kst.forEach(t),Lwo=r(Qye," (Reformer model)"),Qye.forEach(t),xwo=i(Q),M1=n(Q,"LI",{});var Hye=s(M1);ece=n(Hye,"STRONG",{});var Sst=s(ece);$wo=r(Sst,"rembert"),Sst.forEach(t),kwo=r(Hye," \u2014 "),Qj=n(Hye,"A",{href:!0});var Rst=s(Qj);Swo=r(Rst,"RemBertForCausalLM"),Rst.forEach(t),Rwo=r(Hye," (RemBERT model)"),Hye.forEach(t),Pwo=i(Q),E1=n(Q,"LI",{});var Uye=s(E1);oce=n(Uye,"STRONG",{});var Pst=s(oce);Bwo=r(Pst,"roberta"),Pst.forEach(t),Iwo=r(Uye," \u2014 "),Hj=n(Uye,"A",{href:!0});var Bst=s(Hj);qwo=r(Bst,"RobertaForCausalLM"),Bst.forEach(t),Nwo=r(Uye," (RoBERTa model)"),Uye.forEach(t),jwo=i(Q),C1=n(Q,"LI",{});var Jye=s(C1);rce=n(Jye,"STRONG",{});var Ist=s(rce);Dwo=r(Ist,"roformer"),Ist.forEach(t),Gwo=r(Jye," \u2014 "),Uj=n(Jye,"A",{href:!0});var qst=s(Uj);Owo=r(qst,"RoFormerForCausalLM"),qst.forEach(t),Vwo=r(Jye," (RoFormer model)"),Jye.forEach(t),Xwo=i(Q),w1=n(Q,"LI",{});var Yye=s(w1);tce=n(Yye,"STRONG",{});var Nst=s(tce);zwo=r(Nst,"speech_to_text_2"),Nst.forEach(t),Wwo=r(Yye," \u2014 "),Jj=n(Yye,"A",{href:!0});var jst=s(Jj);Qwo=r(jst,"Speech2Text2ForCausalLM"),jst.forEach(t),Hwo=r(Yye," (Speech2Text2 model)"),Yye.forEach(t),Uwo=i(Q),A1=n(Q,"LI",{});var Kye=s(A1);ace=n(Kye,"STRONG",{});var Dst=s(ace);Jwo=r(Dst,"transfo-xl"),Dst.forEach(t),Ywo=r(Kye," \u2014 "),Yj=n(Kye,"A",{href:!0});var Gst=s(Yj);Kwo=r(Gst,"TransfoXLLMHeadModel"),Gst.forEach(t),Zwo=r(Kye," (Transformer-XL model)"),Kye.forEach(t),e0o=i(Q),y1=n(Q,"LI",{});var Zye=s(y1);nce=n(Zye,"STRONG",{});var Ost=s(nce);o0o=r(Ost,"trocr"),Ost.forEach(t),r0o=r(Zye," \u2014 "),Kj=n(Zye,"A",{href:!0});var Vst=s(Kj);t0o=r(Vst,"TrOCRForCausalLM"),Vst.forEach(t),a0o=r(Zye," (TrOCR model)"),Zye.forEach(t),n0o=i(Q),L1=n(Q,"LI",{});var eLe=s(L1);sce=n(eLe,"STRONG",{});var Xst=s(sce);s0o=r(Xst,"xglm"),Xst.forEach(t),l0o=r(eLe," \u2014 "),Zj=n(eLe,"A",{href:!0});var zst=s(Zj);i0o=r(zst,"XGLMForCausalLM"),zst.forEach(t),d0o=r(eLe," (XGLM model)"),eLe.forEach(t),c0o=i(Q),x1=n(Q,"LI",{});var oLe=s(x1);lce=n(oLe,"STRONG",{});var Wst=s(lce);f0o=r(Wst,"xlm"),Wst.forEach(t),m0o=r(oLe," \u2014 "),eD=n(oLe,"A",{href:!0});var Qst=s(eD);g0o=r(Qst,"XLMWithLMHeadModel"),Qst.forEach(t),h0o=r(oLe," (XLM model)"),oLe.forEach(t),p0o=i(Q),$1=n(Q,"LI",{});var rLe=s($1);ice=n(rLe,"STRONG",{});var Hst=s(ice);u0o=r(Hst,"xlm-prophetnet"),Hst.forEach(t),_0o=r(rLe," \u2014 "),oD=n(rLe,"A",{href:!0});var Ust=s(oD);b0o=r(Ust,"XLMProphetNetForCausalLM"),Ust.forEach(t),v0o=r(rLe," (XLMProphetNet model)"),rLe.forEach(t),F0o=i(Q),k1=n(Q,"LI",{});var tLe=s(k1);dce=n(tLe,"STRONG",{});var Jst=s(dce);T0o=r(Jst,"xlm-roberta"),Jst.forEach(t),M0o=r(tLe," \u2014 "),rD=n(tLe,"A",{href:!0});var Yst=s(rD);E0o=r(Yst,"XLMRobertaForCausalLM"),Yst.forEach(t),C0o=r(tLe," (XLM-RoBERTa model)"),tLe.forEach(t),w0o=i(Q),S1=n(Q,"LI",{});var aLe=s(S1);cce=n(aLe,"STRONG",{});var Kst=s(cce);A0o=r(Kst,"xlm-roberta-xl"),Kst.forEach(t),y0o=r(aLe," \u2014 "),tD=n(aLe,"A",{href:!0});var Zst=s(tD);L0o=r(Zst,"XLMRobertaXLForCausalLM"),Zst.forEach(t),x0o=r(aLe," (XLM-RoBERTa-XL model)"),aLe.forEach(t),$0o=i(Q),R1=n(Q,"LI",{});var nLe=s(R1);fce=n(nLe,"STRONG",{});var elt=s(fce);k0o=r(elt,"xlnet"),elt.forEach(t),S0o=r(nLe," \u2014 "),aD=n(nLe,"A",{href:!0});var olt=s(aD);R0o=r(olt,"XLNetLMHeadModel"),olt.forEach(t),P0o=r(nLe," (XLNet model)"),nLe.forEach(t),Q.forEach(t),B0o=i(ta),P1=n(ta,"P",{});var sLe=s(P1);I0o=r(sLe,"The model is set in evaluation mode by default using "),mce=n(sLe,"CODE",{});var rlt=s(mce);q0o=r(rlt,"model.eval()"),rlt.forEach(t),N0o=r(sLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gce=n(sLe,"CODE",{});var tlt=s(gce);j0o=r(tlt,"model.train()"),tlt.forEach(t),sLe.forEach(t),D0o=i(ta),T(B1.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),TNe=i(f),Pi=n(f,"H2",{class:!0});var wDe=s(Pi);I1=n(wDe,"A",{id:!0,class:!0,href:!0});var alt=s(I1);hce=n(alt,"SPAN",{});var nlt=s(hce);T(pA.$$.fragment,nlt),nlt.forEach(t),alt.forEach(t),G0o=i(wDe),pce=n(wDe,"SPAN",{});var slt=s(pce);O0o=r(slt,"AutoModelForMaskedLM"),slt.forEach(t),wDe.forEach(t),MNe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(uA.$$.fragment,Xs),V0o=i(Xs),Bi=n(Xs,"P",{});var EZ=s(Bi);X0o=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nD=n(EZ,"A",{href:!0});var llt=s(nD);z0o=r(llt,"from_pretrained()"),llt.forEach(t),W0o=r(EZ," class method or the "),sD=n(EZ,"A",{href:!0});var ilt=s(sD);Q0o=r(ilt,"from_config()"),ilt.forEach(t),H0o=r(EZ,` class
method.`),EZ.forEach(t),U0o=i(Xs),_A=n(Xs,"P",{});var ADe=s(_A);J0o=r(ADe,"This class cannot be instantiated directly using "),uce=n(ADe,"CODE",{});var dlt=s(uce);Y0o=r(dlt,"__init__()"),dlt.forEach(t),K0o=r(ADe," (throws an error)."),ADe.forEach(t),Z0o=i(Xs),st=n(Xs,"DIV",{class:!0});var Nw=s(st);T(bA.$$.fragment,Nw),e6o=i(Nw),_ce=n(Nw,"P",{});var clt=s(_ce);o6o=r(clt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),clt.forEach(t),r6o=i(Nw),Ii=n(Nw,"P",{});var CZ=s(Ii);t6o=r(CZ,`Note:
Loading a model from its configuration file does `),bce=n(CZ,"STRONG",{});var flt=s(bce);a6o=r(flt,"not"),flt.forEach(t),n6o=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lD=n(CZ,"A",{href:!0});var mlt=s(lD);s6o=r(mlt,"from_pretrained()"),mlt.forEach(t),l6o=r(CZ," to load the model weights."),CZ.forEach(t),i6o=i(Nw),T(q1.$$.fragment,Nw),Nw.forEach(t),d6o=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(vA.$$.fragment,aa),c6o=i(aa),vce=n(aa,"P",{});var glt=s(vce);f6o=r(glt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),glt.forEach(t),m6o=i(aa),ka=n(aa,"P",{});var jw=s(ka);g6o=r(jw,"The model class to instantiate is selected based on the "),Fce=n(jw,"CODE",{});var hlt=s(Fce);h6o=r(hlt,"model_type"),hlt.forEach(t),p6o=r(jw,` property of the config object (either
passed as an argument or loaded from `),Tce=n(jw,"CODE",{});var plt=s(Tce);u6o=r(plt,"pretrained_model_name_or_path"),plt.forEach(t),_6o=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mce=n(jw,"CODE",{});var ult=s(Mce);b6o=r(ult,"pretrained_model_name_or_path"),ult.forEach(t),v6o=r(jw,":"),jw.forEach(t),F6o=i(aa),W=n(aa,"UL",{});var H=s(W);N1=n(H,"LI",{});var lLe=s(N1);Ece=n(lLe,"STRONG",{});var _lt=s(Ece);T6o=r(_lt,"albert"),_lt.forEach(t),M6o=r(lLe," \u2014 "),iD=n(lLe,"A",{href:!0});var blt=s(iD);E6o=r(blt,"AlbertForMaskedLM"),blt.forEach(t),C6o=r(lLe," (ALBERT model)"),lLe.forEach(t),w6o=i(H),j1=n(H,"LI",{});var iLe=s(j1);Cce=n(iLe,"STRONG",{});var vlt=s(Cce);A6o=r(vlt,"bart"),vlt.forEach(t),y6o=r(iLe," \u2014 "),dD=n(iLe,"A",{href:!0});var Flt=s(dD);L6o=r(Flt,"BartForConditionalGeneration"),Flt.forEach(t),x6o=r(iLe," (BART model)"),iLe.forEach(t),$6o=i(H),D1=n(H,"LI",{});var dLe=s(D1);wce=n(dLe,"STRONG",{});var Tlt=s(wce);k6o=r(Tlt,"bert"),Tlt.forEach(t),S6o=r(dLe," \u2014 "),cD=n(dLe,"A",{href:!0});var Mlt=s(cD);R6o=r(Mlt,"BertForMaskedLM"),Mlt.forEach(t),P6o=r(dLe," (BERT model)"),dLe.forEach(t),B6o=i(H),G1=n(H,"LI",{});var cLe=s(G1);Ace=n(cLe,"STRONG",{});var Elt=s(Ace);I6o=r(Elt,"big_bird"),Elt.forEach(t),q6o=r(cLe," \u2014 "),fD=n(cLe,"A",{href:!0});var Clt=s(fD);N6o=r(Clt,"BigBirdForMaskedLM"),Clt.forEach(t),j6o=r(cLe," (BigBird model)"),cLe.forEach(t),D6o=i(H),O1=n(H,"LI",{});var fLe=s(O1);yce=n(fLe,"STRONG",{});var wlt=s(yce);G6o=r(wlt,"camembert"),wlt.forEach(t),O6o=r(fLe," \u2014 "),mD=n(fLe,"A",{href:!0});var Alt=s(mD);V6o=r(Alt,"CamembertForMaskedLM"),Alt.forEach(t),X6o=r(fLe," (CamemBERT model)"),fLe.forEach(t),z6o=i(H),V1=n(H,"LI",{});var mLe=s(V1);Lce=n(mLe,"STRONG",{});var ylt=s(Lce);W6o=r(ylt,"convbert"),ylt.forEach(t),Q6o=r(mLe," \u2014 "),gD=n(mLe,"A",{href:!0});var Llt=s(gD);H6o=r(Llt,"ConvBertForMaskedLM"),Llt.forEach(t),U6o=r(mLe," (ConvBERT model)"),mLe.forEach(t),J6o=i(H),X1=n(H,"LI",{});var gLe=s(X1);xce=n(gLe,"STRONG",{});var xlt=s(xce);Y6o=r(xlt,"data2vec-text"),xlt.forEach(t),K6o=r(gLe," \u2014 "),hD=n(gLe,"A",{href:!0});var $lt=s(hD);Z6o=r($lt,"Data2VecTextForMaskedLM"),$lt.forEach(t),eAo=r(gLe," (Data2VecText model)"),gLe.forEach(t),oAo=i(H),z1=n(H,"LI",{});var hLe=s(z1);$ce=n(hLe,"STRONG",{});var klt=s($ce);rAo=r(klt,"deberta"),klt.forEach(t),tAo=r(hLe," \u2014 "),pD=n(hLe,"A",{href:!0});var Slt=s(pD);aAo=r(Slt,"DebertaForMaskedLM"),Slt.forEach(t),nAo=r(hLe," (DeBERTa model)"),hLe.forEach(t),sAo=i(H),W1=n(H,"LI",{});var pLe=s(W1);kce=n(pLe,"STRONG",{});var Rlt=s(kce);lAo=r(Rlt,"deberta-v2"),Rlt.forEach(t),iAo=r(pLe," \u2014 "),uD=n(pLe,"A",{href:!0});var Plt=s(uD);dAo=r(Plt,"DebertaV2ForMaskedLM"),Plt.forEach(t),cAo=r(pLe," (DeBERTa-v2 model)"),pLe.forEach(t),fAo=i(H),Q1=n(H,"LI",{});var uLe=s(Q1);Sce=n(uLe,"STRONG",{});var Blt=s(Sce);mAo=r(Blt,"distilbert"),Blt.forEach(t),gAo=r(uLe," \u2014 "),_D=n(uLe,"A",{href:!0});var Ilt=s(_D);hAo=r(Ilt,"DistilBertForMaskedLM"),Ilt.forEach(t),pAo=r(uLe," (DistilBERT model)"),uLe.forEach(t),uAo=i(H),H1=n(H,"LI",{});var _Le=s(H1);Rce=n(_Le,"STRONG",{});var qlt=s(Rce);_Ao=r(qlt,"electra"),qlt.forEach(t),bAo=r(_Le," \u2014 "),bD=n(_Le,"A",{href:!0});var Nlt=s(bD);vAo=r(Nlt,"ElectraForMaskedLM"),Nlt.forEach(t),FAo=r(_Le," (ELECTRA model)"),_Le.forEach(t),TAo=i(H),U1=n(H,"LI",{});var bLe=s(U1);Pce=n(bLe,"STRONG",{});var jlt=s(Pce);MAo=r(jlt,"flaubert"),jlt.forEach(t),EAo=r(bLe," \u2014 "),vD=n(bLe,"A",{href:!0});var Dlt=s(vD);CAo=r(Dlt,"FlaubertWithLMHeadModel"),Dlt.forEach(t),wAo=r(bLe," (FlauBERT model)"),bLe.forEach(t),AAo=i(H),J1=n(H,"LI",{});var vLe=s(J1);Bce=n(vLe,"STRONG",{});var Glt=s(Bce);yAo=r(Glt,"fnet"),Glt.forEach(t),LAo=r(vLe," \u2014 "),FD=n(vLe,"A",{href:!0});var Olt=s(FD);xAo=r(Olt,"FNetForMaskedLM"),Olt.forEach(t),$Ao=r(vLe," (FNet model)"),vLe.forEach(t),kAo=i(H),Y1=n(H,"LI",{});var FLe=s(Y1);Ice=n(FLe,"STRONG",{});var Vlt=s(Ice);SAo=r(Vlt,"funnel"),Vlt.forEach(t),RAo=r(FLe," \u2014 "),TD=n(FLe,"A",{href:!0});var Xlt=s(TD);PAo=r(Xlt,"FunnelForMaskedLM"),Xlt.forEach(t),BAo=r(FLe," (Funnel Transformer model)"),FLe.forEach(t),IAo=i(H),K1=n(H,"LI",{});var TLe=s(K1);qce=n(TLe,"STRONG",{});var zlt=s(qce);qAo=r(zlt,"ibert"),zlt.forEach(t),NAo=r(TLe," \u2014 "),MD=n(TLe,"A",{href:!0});var Wlt=s(MD);jAo=r(Wlt,"IBertForMaskedLM"),Wlt.forEach(t),DAo=r(TLe," (I-BERT model)"),TLe.forEach(t),GAo=i(H),Z1=n(H,"LI",{});var MLe=s(Z1);Nce=n(MLe,"STRONG",{});var Qlt=s(Nce);OAo=r(Qlt,"layoutlm"),Qlt.forEach(t),VAo=r(MLe," \u2014 "),ED=n(MLe,"A",{href:!0});var Hlt=s(ED);XAo=r(Hlt,"LayoutLMForMaskedLM"),Hlt.forEach(t),zAo=r(MLe," (LayoutLM model)"),MLe.forEach(t),WAo=i(H),e9=n(H,"LI",{});var ELe=s(e9);jce=n(ELe,"STRONG",{});var Ult=s(jce);QAo=r(Ult,"longformer"),Ult.forEach(t),HAo=r(ELe," \u2014 "),CD=n(ELe,"A",{href:!0});var Jlt=s(CD);UAo=r(Jlt,"LongformerForMaskedLM"),Jlt.forEach(t),JAo=r(ELe," (Longformer model)"),ELe.forEach(t),YAo=i(H),o9=n(H,"LI",{});var CLe=s(o9);Dce=n(CLe,"STRONG",{});var Ylt=s(Dce);KAo=r(Ylt,"luke"),Ylt.forEach(t),ZAo=r(CLe," \u2014 "),wD=n(CLe,"A",{href:!0});var Klt=s(wD);eyo=r(Klt,"LukeForMaskedLM"),Klt.forEach(t),oyo=r(CLe," (LUKE model)"),CLe.forEach(t),ryo=i(H),r9=n(H,"LI",{});var wLe=s(r9);Gce=n(wLe,"STRONG",{});var Zlt=s(Gce);tyo=r(Zlt,"mbart"),Zlt.forEach(t),ayo=r(wLe," \u2014 "),AD=n(wLe,"A",{href:!0});var eit=s(AD);nyo=r(eit,"MBartForConditionalGeneration"),eit.forEach(t),syo=r(wLe," (mBART model)"),wLe.forEach(t),lyo=i(H),t9=n(H,"LI",{});var ALe=s(t9);Oce=n(ALe,"STRONG",{});var oit=s(Oce);iyo=r(oit,"megatron-bert"),oit.forEach(t),dyo=r(ALe," \u2014 "),yD=n(ALe,"A",{href:!0});var rit=s(yD);cyo=r(rit,"MegatronBertForMaskedLM"),rit.forEach(t),fyo=r(ALe," (MegatronBert model)"),ALe.forEach(t),myo=i(H),a9=n(H,"LI",{});var yLe=s(a9);Vce=n(yLe,"STRONG",{});var tit=s(Vce);gyo=r(tit,"mobilebert"),tit.forEach(t),hyo=r(yLe," \u2014 "),LD=n(yLe,"A",{href:!0});var ait=s(LD);pyo=r(ait,"MobileBertForMaskedLM"),ait.forEach(t),uyo=r(yLe," (MobileBERT model)"),yLe.forEach(t),_yo=i(H),n9=n(H,"LI",{});var LLe=s(n9);Xce=n(LLe,"STRONG",{});var nit=s(Xce);byo=r(nit,"mpnet"),nit.forEach(t),vyo=r(LLe," \u2014 "),xD=n(LLe,"A",{href:!0});var sit=s(xD);Fyo=r(sit,"MPNetForMaskedLM"),sit.forEach(t),Tyo=r(LLe," (MPNet model)"),LLe.forEach(t),Myo=i(H),s9=n(H,"LI",{});var xLe=s(s9);zce=n(xLe,"STRONG",{});var lit=s(zce);Eyo=r(lit,"nystromformer"),lit.forEach(t),Cyo=r(xLe," \u2014 "),$D=n(xLe,"A",{href:!0});var iit=s($D);wyo=r(iit,"NystromformerForMaskedLM"),iit.forEach(t),Ayo=r(xLe," (Nystromformer model)"),xLe.forEach(t),yyo=i(H),l9=n(H,"LI",{});var $Le=s(l9);Wce=n($Le,"STRONG",{});var dit=s(Wce);Lyo=r(dit,"perceiver"),dit.forEach(t),xyo=r($Le," \u2014 "),kD=n($Le,"A",{href:!0});var cit=s(kD);$yo=r(cit,"PerceiverForMaskedLM"),cit.forEach(t),kyo=r($Le," (Perceiver model)"),$Le.forEach(t),Syo=i(H),i9=n(H,"LI",{});var kLe=s(i9);Qce=n(kLe,"STRONG",{});var fit=s(Qce);Ryo=r(fit,"qdqbert"),fit.forEach(t),Pyo=r(kLe," \u2014 "),SD=n(kLe,"A",{href:!0});var mit=s(SD);Byo=r(mit,"QDQBertForMaskedLM"),mit.forEach(t),Iyo=r(kLe," (QDQBert model)"),kLe.forEach(t),qyo=i(H),d9=n(H,"LI",{});var SLe=s(d9);Hce=n(SLe,"STRONG",{});var git=s(Hce);Nyo=r(git,"reformer"),git.forEach(t),jyo=r(SLe," \u2014 "),RD=n(SLe,"A",{href:!0});var hit=s(RD);Dyo=r(hit,"ReformerForMaskedLM"),hit.forEach(t),Gyo=r(SLe," (Reformer model)"),SLe.forEach(t),Oyo=i(H),c9=n(H,"LI",{});var RLe=s(c9);Uce=n(RLe,"STRONG",{});var pit=s(Uce);Vyo=r(pit,"rembert"),pit.forEach(t),Xyo=r(RLe," \u2014 "),PD=n(RLe,"A",{href:!0});var uit=s(PD);zyo=r(uit,"RemBertForMaskedLM"),uit.forEach(t),Wyo=r(RLe," (RemBERT model)"),RLe.forEach(t),Qyo=i(H),f9=n(H,"LI",{});var PLe=s(f9);Jce=n(PLe,"STRONG",{});var _it=s(Jce);Hyo=r(_it,"roberta"),_it.forEach(t),Uyo=r(PLe," \u2014 "),BD=n(PLe,"A",{href:!0});var bit=s(BD);Jyo=r(bit,"RobertaForMaskedLM"),bit.forEach(t),Yyo=r(PLe," (RoBERTa model)"),PLe.forEach(t),Kyo=i(H),m9=n(H,"LI",{});var BLe=s(m9);Yce=n(BLe,"STRONG",{});var vit=s(Yce);Zyo=r(vit,"roformer"),vit.forEach(t),eLo=r(BLe," \u2014 "),ID=n(BLe,"A",{href:!0});var Fit=s(ID);oLo=r(Fit,"RoFormerForMaskedLM"),Fit.forEach(t),rLo=r(BLe," (RoFormer model)"),BLe.forEach(t),tLo=i(H),g9=n(H,"LI",{});var ILe=s(g9);Kce=n(ILe,"STRONG",{});var Tit=s(Kce);aLo=r(Tit,"squeezebert"),Tit.forEach(t),nLo=r(ILe," \u2014 "),qD=n(ILe,"A",{href:!0});var Mit=s(qD);sLo=r(Mit,"SqueezeBertForMaskedLM"),Mit.forEach(t),lLo=r(ILe," (SqueezeBERT model)"),ILe.forEach(t),iLo=i(H),h9=n(H,"LI",{});var qLe=s(h9);Zce=n(qLe,"STRONG",{});var Eit=s(Zce);dLo=r(Eit,"tapas"),Eit.forEach(t),cLo=r(qLe," \u2014 "),ND=n(qLe,"A",{href:!0});var Cit=s(ND);fLo=r(Cit,"TapasForMaskedLM"),Cit.forEach(t),mLo=r(qLe," (TAPAS model)"),qLe.forEach(t),gLo=i(H),p9=n(H,"LI",{});var NLe=s(p9);efe=n(NLe,"STRONG",{});var wit=s(efe);hLo=r(wit,"wav2vec2"),wit.forEach(t),pLo=r(NLe," \u2014 "),ofe=n(NLe,"CODE",{});var Ait=s(ofe);uLo=r(Ait,"Wav2Vec2ForMaskedLM"),Ait.forEach(t),_Lo=r(NLe," (Wav2Vec2 model)"),NLe.forEach(t),bLo=i(H),u9=n(H,"LI",{});var jLe=s(u9);rfe=n(jLe,"STRONG",{});var yit=s(rfe);vLo=r(yit,"xlm"),yit.forEach(t),FLo=r(jLe," \u2014 "),jD=n(jLe,"A",{href:!0});var Lit=s(jD);TLo=r(Lit,"XLMWithLMHeadModel"),Lit.forEach(t),MLo=r(jLe," (XLM model)"),jLe.forEach(t),ELo=i(H),_9=n(H,"LI",{});var DLe=s(_9);tfe=n(DLe,"STRONG",{});var xit=s(tfe);CLo=r(xit,"xlm-roberta"),xit.forEach(t),wLo=r(DLe," \u2014 "),DD=n(DLe,"A",{href:!0});var $it=s(DD);ALo=r($it,"XLMRobertaForMaskedLM"),$it.forEach(t),yLo=r(DLe," (XLM-RoBERTa model)"),DLe.forEach(t),LLo=i(H),b9=n(H,"LI",{});var GLe=s(b9);afe=n(GLe,"STRONG",{});var kit=s(afe);xLo=r(kit,"xlm-roberta-xl"),kit.forEach(t),$Lo=r(GLe," \u2014 "),GD=n(GLe,"A",{href:!0});var Sit=s(GD);kLo=r(Sit,"XLMRobertaXLForMaskedLM"),Sit.forEach(t),SLo=r(GLe," (XLM-RoBERTa-XL model)"),GLe.forEach(t),RLo=i(H),v9=n(H,"LI",{});var OLe=s(v9);nfe=n(OLe,"STRONG",{});var Rit=s(nfe);PLo=r(Rit,"yoso"),Rit.forEach(t),BLo=r(OLe," \u2014 "),OD=n(OLe,"A",{href:!0});var Pit=s(OD);ILo=r(Pit,"YosoForMaskedLM"),Pit.forEach(t),qLo=r(OLe," (YOSO model)"),OLe.forEach(t),H.forEach(t),NLo=i(aa),F9=n(aa,"P",{});var VLe=s(F9);jLo=r(VLe,"The model is set in evaluation mode by default using "),sfe=n(VLe,"CODE",{});var Bit=s(sfe);DLo=r(Bit,"model.eval()"),Bit.forEach(t),GLo=r(VLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lfe=n(VLe,"CODE",{});var Iit=s(lfe);OLo=r(Iit,"model.train()"),Iit.forEach(t),VLe.forEach(t),VLo=i(aa),T(T9.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),ENe=i(f),qi=n(f,"H2",{class:!0});var yDe=s(qi);M9=n(yDe,"A",{id:!0,class:!0,href:!0});var qit=s(M9);ife=n(qit,"SPAN",{});var Nit=s(ife);T(FA.$$.fragment,Nit),Nit.forEach(t),qit.forEach(t),XLo=i(yDe),dfe=n(yDe,"SPAN",{});var jit=s(dfe);zLo=r(jit,"AutoModelForSeq2SeqLM"),jit.forEach(t),yDe.forEach(t),CNe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(TA.$$.fragment,zs),WLo=i(zs),Ni=n(zs,"P",{});var wZ=s(Ni);QLo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VD=n(wZ,"A",{href:!0});var Dit=s(VD);HLo=r(Dit,"from_pretrained()"),Dit.forEach(t),ULo=r(wZ," class method or the "),XD=n(wZ,"A",{href:!0});var Git=s(XD);JLo=r(Git,"from_config()"),Git.forEach(t),YLo=r(wZ,` class
method.`),wZ.forEach(t),KLo=i(zs),MA=n(zs,"P",{});var LDe=s(MA);ZLo=r(LDe,"This class cannot be instantiated directly using "),cfe=n(LDe,"CODE",{});var Oit=s(cfe);e8o=r(Oit,"__init__()"),Oit.forEach(t),o8o=r(LDe," (throws an error)."),LDe.forEach(t),r8o=i(zs),lt=n(zs,"DIV",{class:!0});var Dw=s(lt);T(EA.$$.fragment,Dw),t8o=i(Dw),ffe=n(Dw,"P",{});var Vit=s(ffe);a8o=r(Vit,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Vit.forEach(t),n8o=i(Dw),ji=n(Dw,"P",{});var AZ=s(ji);s8o=r(AZ,`Note:
Loading a model from its configuration file does `),mfe=n(AZ,"STRONG",{});var Xit=s(mfe);l8o=r(Xit,"not"),Xit.forEach(t),i8o=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=n(AZ,"A",{href:!0});var zit=s(zD);d8o=r(zit,"from_pretrained()"),zit.forEach(t),c8o=r(AZ," to load the model weights."),AZ.forEach(t),f8o=i(Dw),T(E9.$$.fragment,Dw),Dw.forEach(t),m8o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(CA.$$.fragment,na),g8o=i(na),gfe=n(na,"P",{});var Wit=s(gfe);h8o=r(Wit,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Wit.forEach(t),p8o=i(na),Sa=n(na,"P",{});var Gw=s(Sa);u8o=r(Gw,"The model class to instantiate is selected based on the "),hfe=n(Gw,"CODE",{});var Qit=s(hfe);_8o=r(Qit,"model_type"),Qit.forEach(t),b8o=r(Gw,` property of the config object (either
passed as an argument or loaded from `),pfe=n(Gw,"CODE",{});var Hit=s(pfe);v8o=r(Hit,"pretrained_model_name_or_path"),Hit.forEach(t),F8o=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=n(Gw,"CODE",{});var Uit=s(ufe);T8o=r(Uit,"pretrained_model_name_or_path"),Uit.forEach(t),M8o=r(Gw,":"),Gw.forEach(t),E8o=i(na),ue=n(na,"UL",{});var ve=s(ue);C9=n(ve,"LI",{});var XLe=s(C9);_fe=n(XLe,"STRONG",{});var Jit=s(_fe);C8o=r(Jit,"bart"),Jit.forEach(t),w8o=r(XLe," \u2014 "),WD=n(XLe,"A",{href:!0});var Yit=s(WD);A8o=r(Yit,"BartForConditionalGeneration"),Yit.forEach(t),y8o=r(XLe," (BART model)"),XLe.forEach(t),L8o=i(ve),w9=n(ve,"LI",{});var zLe=s(w9);bfe=n(zLe,"STRONG",{});var Kit=s(bfe);x8o=r(Kit,"bigbird_pegasus"),Kit.forEach(t),$8o=r(zLe," \u2014 "),QD=n(zLe,"A",{href:!0});var Zit=s(QD);k8o=r(Zit,"BigBirdPegasusForConditionalGeneration"),Zit.forEach(t),S8o=r(zLe," (BigBirdPegasus model)"),zLe.forEach(t),R8o=i(ve),A9=n(ve,"LI",{});var WLe=s(A9);vfe=n(WLe,"STRONG",{});var edt=s(vfe);P8o=r(edt,"blenderbot"),edt.forEach(t),B8o=r(WLe," \u2014 "),HD=n(WLe,"A",{href:!0});var odt=s(HD);I8o=r(odt,"BlenderbotForConditionalGeneration"),odt.forEach(t),q8o=r(WLe," (Blenderbot model)"),WLe.forEach(t),N8o=i(ve),y9=n(ve,"LI",{});var QLe=s(y9);Ffe=n(QLe,"STRONG",{});var rdt=s(Ffe);j8o=r(rdt,"blenderbot-small"),rdt.forEach(t),D8o=r(QLe," \u2014 "),UD=n(QLe,"A",{href:!0});var tdt=s(UD);G8o=r(tdt,"BlenderbotSmallForConditionalGeneration"),tdt.forEach(t),O8o=r(QLe," (BlenderbotSmall model)"),QLe.forEach(t),V8o=i(ve),L9=n(ve,"LI",{});var HLe=s(L9);Tfe=n(HLe,"STRONG",{});var adt=s(Tfe);X8o=r(adt,"encoder-decoder"),adt.forEach(t),z8o=r(HLe," \u2014 "),JD=n(HLe,"A",{href:!0});var ndt=s(JD);W8o=r(ndt,"EncoderDecoderModel"),ndt.forEach(t),Q8o=r(HLe," (Encoder decoder model)"),HLe.forEach(t),H8o=i(ve),x9=n(ve,"LI",{});var ULe=s(x9);Mfe=n(ULe,"STRONG",{});var sdt=s(Mfe);U8o=r(sdt,"fsmt"),sdt.forEach(t),J8o=r(ULe," \u2014 "),YD=n(ULe,"A",{href:!0});var ldt=s(YD);Y8o=r(ldt,"FSMTForConditionalGeneration"),ldt.forEach(t),K8o=r(ULe," (FairSeq Machine-Translation model)"),ULe.forEach(t),Z8o=i(ve),$9=n(ve,"LI",{});var JLe=s($9);Efe=n(JLe,"STRONG",{});var idt=s(Efe);exo=r(idt,"led"),idt.forEach(t),oxo=r(JLe," \u2014 "),KD=n(JLe,"A",{href:!0});var ddt=s(KD);rxo=r(ddt,"LEDForConditionalGeneration"),ddt.forEach(t),txo=r(JLe," (LED model)"),JLe.forEach(t),axo=i(ve),k9=n(ve,"LI",{});var YLe=s(k9);Cfe=n(YLe,"STRONG",{});var cdt=s(Cfe);nxo=r(cdt,"m2m_100"),cdt.forEach(t),sxo=r(YLe," \u2014 "),ZD=n(YLe,"A",{href:!0});var fdt=s(ZD);lxo=r(fdt,"M2M100ForConditionalGeneration"),fdt.forEach(t),ixo=r(YLe," (M2M100 model)"),YLe.forEach(t),dxo=i(ve),S9=n(ve,"LI",{});var KLe=s(S9);wfe=n(KLe,"STRONG",{});var mdt=s(wfe);cxo=r(mdt,"marian"),mdt.forEach(t),fxo=r(KLe," \u2014 "),eG=n(KLe,"A",{href:!0});var gdt=s(eG);mxo=r(gdt,"MarianMTModel"),gdt.forEach(t),gxo=r(KLe," (Marian model)"),KLe.forEach(t),hxo=i(ve),R9=n(ve,"LI",{});var ZLe=s(R9);Afe=n(ZLe,"STRONG",{});var hdt=s(Afe);pxo=r(hdt,"mbart"),hdt.forEach(t),uxo=r(ZLe," \u2014 "),oG=n(ZLe,"A",{href:!0});var pdt=s(oG);_xo=r(pdt,"MBartForConditionalGeneration"),pdt.forEach(t),bxo=r(ZLe," (mBART model)"),ZLe.forEach(t),vxo=i(ve),P9=n(ve,"LI",{});var e8e=s(P9);yfe=n(e8e,"STRONG",{});var udt=s(yfe);Fxo=r(udt,"mt5"),udt.forEach(t),Txo=r(e8e," \u2014 "),rG=n(e8e,"A",{href:!0});var _dt=s(rG);Mxo=r(_dt,"MT5ForConditionalGeneration"),_dt.forEach(t),Exo=r(e8e," (mT5 model)"),e8e.forEach(t),Cxo=i(ve),B9=n(ve,"LI",{});var o8e=s(B9);Lfe=n(o8e,"STRONG",{});var bdt=s(Lfe);wxo=r(bdt,"pegasus"),bdt.forEach(t),Axo=r(o8e," \u2014 "),tG=n(o8e,"A",{href:!0});var vdt=s(tG);yxo=r(vdt,"PegasusForConditionalGeneration"),vdt.forEach(t),Lxo=r(o8e," (Pegasus model)"),o8e.forEach(t),xxo=i(ve),I9=n(ve,"LI",{});var r8e=s(I9);xfe=n(r8e,"STRONG",{});var Fdt=s(xfe);$xo=r(Fdt,"plbart"),Fdt.forEach(t),kxo=r(r8e," \u2014 "),aG=n(r8e,"A",{href:!0});var Tdt=s(aG);Sxo=r(Tdt,"PLBartForConditionalGeneration"),Tdt.forEach(t),Rxo=r(r8e," (PLBart model)"),r8e.forEach(t),Pxo=i(ve),q9=n(ve,"LI",{});var t8e=s(q9);$fe=n(t8e,"STRONG",{});var Mdt=s($fe);Bxo=r(Mdt,"prophetnet"),Mdt.forEach(t),Ixo=r(t8e," \u2014 "),nG=n(t8e,"A",{href:!0});var Edt=s(nG);qxo=r(Edt,"ProphetNetForConditionalGeneration"),Edt.forEach(t),Nxo=r(t8e," (ProphetNet model)"),t8e.forEach(t),jxo=i(ve),N9=n(ve,"LI",{});var a8e=s(N9);kfe=n(a8e,"STRONG",{});var Cdt=s(kfe);Dxo=r(Cdt,"t5"),Cdt.forEach(t),Gxo=r(a8e," \u2014 "),sG=n(a8e,"A",{href:!0});var wdt=s(sG);Oxo=r(wdt,"T5ForConditionalGeneration"),wdt.forEach(t),Vxo=r(a8e," (T5 model)"),a8e.forEach(t),Xxo=i(ve),j9=n(ve,"LI",{});var n8e=s(j9);Sfe=n(n8e,"STRONG",{});var Adt=s(Sfe);zxo=r(Adt,"xlm-prophetnet"),Adt.forEach(t),Wxo=r(n8e," \u2014 "),lG=n(n8e,"A",{href:!0});var ydt=s(lG);Qxo=r(ydt,"XLMProphetNetForConditionalGeneration"),ydt.forEach(t),Hxo=r(n8e," (XLMProphetNet model)"),n8e.forEach(t),ve.forEach(t),Uxo=i(na),D9=n(na,"P",{});var s8e=s(D9);Jxo=r(s8e,"The model is set in evaluation mode by default using "),Rfe=n(s8e,"CODE",{});var Ldt=s(Rfe);Yxo=r(Ldt,"model.eval()"),Ldt.forEach(t),Kxo=r(s8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pfe=n(s8e,"CODE",{});var xdt=s(Pfe);Zxo=r(xdt,"model.train()"),xdt.forEach(t),s8e.forEach(t),e$o=i(na),T(G9.$$.fragment,na),na.forEach(t),zs.forEach(t),wNe=i(f),Di=n(f,"H2",{class:!0});var xDe=s(Di);O9=n(xDe,"A",{id:!0,class:!0,href:!0});var $dt=s(O9);Bfe=n($dt,"SPAN",{});var kdt=s(Bfe);T(wA.$$.fragment,kdt),kdt.forEach(t),$dt.forEach(t),o$o=i(xDe),Ife=n(xDe,"SPAN",{});var Sdt=s(Ife);r$o=r(Sdt,"AutoModelForSequenceClassification"),Sdt.forEach(t),xDe.forEach(t),ANe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(AA.$$.fragment,Ws),t$o=i(Ws),Gi=n(Ws,"P",{});var yZ=s(Gi);a$o=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iG=n(yZ,"A",{href:!0});var Rdt=s(iG);n$o=r(Rdt,"from_pretrained()"),Rdt.forEach(t),s$o=r(yZ," class method or the "),dG=n(yZ,"A",{href:!0});var Pdt=s(dG);l$o=r(Pdt,"from_config()"),Pdt.forEach(t),i$o=r(yZ,` class
method.`),yZ.forEach(t),d$o=i(Ws),yA=n(Ws,"P",{});var $De=s(yA);c$o=r($De,"This class cannot be instantiated directly using "),qfe=n($De,"CODE",{});var Bdt=s(qfe);f$o=r(Bdt,"__init__()"),Bdt.forEach(t),m$o=r($De," (throws an error)."),$De.forEach(t),g$o=i(Ws),it=n(Ws,"DIV",{class:!0});var Ow=s(it);T(LA.$$.fragment,Ow),h$o=i(Ow),Nfe=n(Ow,"P",{});var Idt=s(Nfe);p$o=r(Idt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Idt.forEach(t),u$o=i(Ow),Oi=n(Ow,"P",{});var LZ=s(Oi);_$o=r(LZ,`Note:
Loading a model from its configuration file does `),jfe=n(LZ,"STRONG",{});var qdt=s(jfe);b$o=r(qdt,"not"),qdt.forEach(t),v$o=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=n(LZ,"A",{href:!0});var Ndt=s(cG);F$o=r(Ndt,"from_pretrained()"),Ndt.forEach(t),T$o=r(LZ," to load the model weights."),LZ.forEach(t),M$o=i(Ow),T(V9.$$.fragment,Ow),Ow.forEach(t),E$o=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(xA.$$.fragment,sa),C$o=i(sa),Dfe=n(sa,"P",{});var jdt=s(Dfe);w$o=r(jdt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jdt.forEach(t),A$o=i(sa),Ra=n(sa,"P",{});var Vw=s(Ra);y$o=r(Vw,"The model class to instantiate is selected based on the "),Gfe=n(Vw,"CODE",{});var Ddt=s(Gfe);L$o=r(Ddt,"model_type"),Ddt.forEach(t),x$o=r(Vw,` property of the config object (either
passed as an argument or loaded from `),Ofe=n(Vw,"CODE",{});var Gdt=s(Ofe);$$o=r(Gdt,"pretrained_model_name_or_path"),Gdt.forEach(t),k$o=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vfe=n(Vw,"CODE",{});var Odt=s(Vfe);S$o=r(Odt,"pretrained_model_name_or_path"),Odt.forEach(t),R$o=r(Vw,":"),Vw.forEach(t),P$o=i(sa),q=n(sa,"UL",{});var j=s(q);X9=n(j,"LI",{});var l8e=s(X9);Xfe=n(l8e,"STRONG",{});var Vdt=s(Xfe);B$o=r(Vdt,"albert"),Vdt.forEach(t),I$o=r(l8e," \u2014 "),fG=n(l8e,"A",{href:!0});var Xdt=s(fG);q$o=r(Xdt,"AlbertForSequenceClassification"),Xdt.forEach(t),N$o=r(l8e," (ALBERT model)"),l8e.forEach(t),j$o=i(j),z9=n(j,"LI",{});var i8e=s(z9);zfe=n(i8e,"STRONG",{});var zdt=s(zfe);D$o=r(zdt,"bart"),zdt.forEach(t),G$o=r(i8e," \u2014 "),mG=n(i8e,"A",{href:!0});var Wdt=s(mG);O$o=r(Wdt,"BartForSequenceClassification"),Wdt.forEach(t),V$o=r(i8e," (BART model)"),i8e.forEach(t),X$o=i(j),W9=n(j,"LI",{});var d8e=s(W9);Wfe=n(d8e,"STRONG",{});var Qdt=s(Wfe);z$o=r(Qdt,"bert"),Qdt.forEach(t),W$o=r(d8e," \u2014 "),gG=n(d8e,"A",{href:!0});var Hdt=s(gG);Q$o=r(Hdt,"BertForSequenceClassification"),Hdt.forEach(t),H$o=r(d8e," (BERT model)"),d8e.forEach(t),U$o=i(j),Q9=n(j,"LI",{});var c8e=s(Q9);Qfe=n(c8e,"STRONG",{});var Udt=s(Qfe);J$o=r(Udt,"big_bird"),Udt.forEach(t),Y$o=r(c8e," \u2014 "),hG=n(c8e,"A",{href:!0});var Jdt=s(hG);K$o=r(Jdt,"BigBirdForSequenceClassification"),Jdt.forEach(t),Z$o=r(c8e," (BigBird model)"),c8e.forEach(t),eko=i(j),H9=n(j,"LI",{});var f8e=s(H9);Hfe=n(f8e,"STRONG",{});var Ydt=s(Hfe);oko=r(Ydt,"bigbird_pegasus"),Ydt.forEach(t),rko=r(f8e," \u2014 "),pG=n(f8e,"A",{href:!0});var Kdt=s(pG);tko=r(Kdt,"BigBirdPegasusForSequenceClassification"),Kdt.forEach(t),ako=r(f8e," (BigBirdPegasus model)"),f8e.forEach(t),nko=i(j),U9=n(j,"LI",{});var m8e=s(U9);Ufe=n(m8e,"STRONG",{});var Zdt=s(Ufe);sko=r(Zdt,"camembert"),Zdt.forEach(t),lko=r(m8e," \u2014 "),uG=n(m8e,"A",{href:!0});var ect=s(uG);iko=r(ect,"CamembertForSequenceClassification"),ect.forEach(t),dko=r(m8e," (CamemBERT model)"),m8e.forEach(t),cko=i(j),J9=n(j,"LI",{});var g8e=s(J9);Jfe=n(g8e,"STRONG",{});var oct=s(Jfe);fko=r(oct,"canine"),oct.forEach(t),mko=r(g8e," \u2014 "),_G=n(g8e,"A",{href:!0});var rct=s(_G);gko=r(rct,"CanineForSequenceClassification"),rct.forEach(t),hko=r(g8e," (Canine model)"),g8e.forEach(t),pko=i(j),Y9=n(j,"LI",{});var h8e=s(Y9);Yfe=n(h8e,"STRONG",{});var tct=s(Yfe);uko=r(tct,"convbert"),tct.forEach(t),_ko=r(h8e," \u2014 "),bG=n(h8e,"A",{href:!0});var act=s(bG);bko=r(act,"ConvBertForSequenceClassification"),act.forEach(t),vko=r(h8e," (ConvBERT model)"),h8e.forEach(t),Fko=i(j),K9=n(j,"LI",{});var p8e=s(K9);Kfe=n(p8e,"STRONG",{});var nct=s(Kfe);Tko=r(nct,"ctrl"),nct.forEach(t),Mko=r(p8e," \u2014 "),vG=n(p8e,"A",{href:!0});var sct=s(vG);Eko=r(sct,"CTRLForSequenceClassification"),sct.forEach(t),Cko=r(p8e," (CTRL model)"),p8e.forEach(t),wko=i(j),Z9=n(j,"LI",{});var u8e=s(Z9);Zfe=n(u8e,"STRONG",{});var lct=s(Zfe);Ako=r(lct,"data2vec-text"),lct.forEach(t),yko=r(u8e," \u2014 "),FG=n(u8e,"A",{href:!0});var ict=s(FG);Lko=r(ict,"Data2VecTextForSequenceClassification"),ict.forEach(t),xko=r(u8e," (Data2VecText model)"),u8e.forEach(t),$ko=i(j),eb=n(j,"LI",{});var _8e=s(eb);eme=n(_8e,"STRONG",{});var dct=s(eme);kko=r(dct,"deberta"),dct.forEach(t),Sko=r(_8e," \u2014 "),TG=n(_8e,"A",{href:!0});var cct=s(TG);Rko=r(cct,"DebertaForSequenceClassification"),cct.forEach(t),Pko=r(_8e," (DeBERTa model)"),_8e.forEach(t),Bko=i(j),ob=n(j,"LI",{});var b8e=s(ob);ome=n(b8e,"STRONG",{});var fct=s(ome);Iko=r(fct,"deberta-v2"),fct.forEach(t),qko=r(b8e," \u2014 "),MG=n(b8e,"A",{href:!0});var mct=s(MG);Nko=r(mct,"DebertaV2ForSequenceClassification"),mct.forEach(t),jko=r(b8e," (DeBERTa-v2 model)"),b8e.forEach(t),Dko=i(j),rb=n(j,"LI",{});var v8e=s(rb);rme=n(v8e,"STRONG",{});var gct=s(rme);Gko=r(gct,"distilbert"),gct.forEach(t),Oko=r(v8e," \u2014 "),EG=n(v8e,"A",{href:!0});var hct=s(EG);Vko=r(hct,"DistilBertForSequenceClassification"),hct.forEach(t),Xko=r(v8e," (DistilBERT model)"),v8e.forEach(t),zko=i(j),tb=n(j,"LI",{});var F8e=s(tb);tme=n(F8e,"STRONG",{});var pct=s(tme);Wko=r(pct,"electra"),pct.forEach(t),Qko=r(F8e," \u2014 "),CG=n(F8e,"A",{href:!0});var uct=s(CG);Hko=r(uct,"ElectraForSequenceClassification"),uct.forEach(t),Uko=r(F8e," (ELECTRA model)"),F8e.forEach(t),Jko=i(j),ab=n(j,"LI",{});var T8e=s(ab);ame=n(T8e,"STRONG",{});var _ct=s(ame);Yko=r(_ct,"flaubert"),_ct.forEach(t),Kko=r(T8e," \u2014 "),wG=n(T8e,"A",{href:!0});var bct=s(wG);Zko=r(bct,"FlaubertForSequenceClassification"),bct.forEach(t),eSo=r(T8e," (FlauBERT model)"),T8e.forEach(t),oSo=i(j),nb=n(j,"LI",{});var M8e=s(nb);nme=n(M8e,"STRONG",{});var vct=s(nme);rSo=r(vct,"fnet"),vct.forEach(t),tSo=r(M8e," \u2014 "),AG=n(M8e,"A",{href:!0});var Fct=s(AG);aSo=r(Fct,"FNetForSequenceClassification"),Fct.forEach(t),nSo=r(M8e," (FNet model)"),M8e.forEach(t),sSo=i(j),sb=n(j,"LI",{});var E8e=s(sb);sme=n(E8e,"STRONG",{});var Tct=s(sme);lSo=r(Tct,"funnel"),Tct.forEach(t),iSo=r(E8e," \u2014 "),yG=n(E8e,"A",{href:!0});var Mct=s(yG);dSo=r(Mct,"FunnelForSequenceClassification"),Mct.forEach(t),cSo=r(E8e," (Funnel Transformer model)"),E8e.forEach(t),fSo=i(j),lb=n(j,"LI",{});var C8e=s(lb);lme=n(C8e,"STRONG",{});var Ect=s(lme);mSo=r(Ect,"gpt2"),Ect.forEach(t),gSo=r(C8e," \u2014 "),LG=n(C8e,"A",{href:!0});var Cct=s(LG);hSo=r(Cct,"GPT2ForSequenceClassification"),Cct.forEach(t),pSo=r(C8e," (OpenAI GPT-2 model)"),C8e.forEach(t),uSo=i(j),ib=n(j,"LI",{});var w8e=s(ib);ime=n(w8e,"STRONG",{});var wct=s(ime);_So=r(wct,"gpt_neo"),wct.forEach(t),bSo=r(w8e," \u2014 "),xG=n(w8e,"A",{href:!0});var Act=s(xG);vSo=r(Act,"GPTNeoForSequenceClassification"),Act.forEach(t),FSo=r(w8e," (GPT Neo model)"),w8e.forEach(t),TSo=i(j),db=n(j,"LI",{});var A8e=s(db);dme=n(A8e,"STRONG",{});var yct=s(dme);MSo=r(yct,"gptj"),yct.forEach(t),ESo=r(A8e," \u2014 "),$G=n(A8e,"A",{href:!0});var Lct=s($G);CSo=r(Lct,"GPTJForSequenceClassification"),Lct.forEach(t),wSo=r(A8e," (GPT-J model)"),A8e.forEach(t),ASo=i(j),cb=n(j,"LI",{});var y8e=s(cb);cme=n(y8e,"STRONG",{});var xct=s(cme);ySo=r(xct,"ibert"),xct.forEach(t),LSo=r(y8e," \u2014 "),kG=n(y8e,"A",{href:!0});var $ct=s(kG);xSo=r($ct,"IBertForSequenceClassification"),$ct.forEach(t),$So=r(y8e," (I-BERT model)"),y8e.forEach(t),kSo=i(j),fb=n(j,"LI",{});var L8e=s(fb);fme=n(L8e,"STRONG",{});var kct=s(fme);SSo=r(kct,"layoutlm"),kct.forEach(t),RSo=r(L8e," \u2014 "),SG=n(L8e,"A",{href:!0});var Sct=s(SG);PSo=r(Sct,"LayoutLMForSequenceClassification"),Sct.forEach(t),BSo=r(L8e," (LayoutLM model)"),L8e.forEach(t),ISo=i(j),mb=n(j,"LI",{});var x8e=s(mb);mme=n(x8e,"STRONG",{});var Rct=s(mme);qSo=r(Rct,"layoutlmv2"),Rct.forEach(t),NSo=r(x8e," \u2014 "),RG=n(x8e,"A",{href:!0});var Pct=s(RG);jSo=r(Pct,"LayoutLMv2ForSequenceClassification"),Pct.forEach(t),DSo=r(x8e," (LayoutLMv2 model)"),x8e.forEach(t),GSo=i(j),gb=n(j,"LI",{});var $8e=s(gb);gme=n($8e,"STRONG",{});var Bct=s(gme);OSo=r(Bct,"layoutlmv3"),Bct.forEach(t),VSo=r($8e," \u2014 "),PG=n($8e,"A",{href:!0});var Ict=s(PG);XSo=r(Ict,"LayoutLMv3ForSequenceClassification"),Ict.forEach(t),zSo=r($8e," (LayoutLMv3 model)"),$8e.forEach(t),WSo=i(j),hb=n(j,"LI",{});var k8e=s(hb);hme=n(k8e,"STRONG",{});var qct=s(hme);QSo=r(qct,"led"),qct.forEach(t),HSo=r(k8e," \u2014 "),BG=n(k8e,"A",{href:!0});var Nct=s(BG);USo=r(Nct,"LEDForSequenceClassification"),Nct.forEach(t),JSo=r(k8e," (LED model)"),k8e.forEach(t),YSo=i(j),pb=n(j,"LI",{});var S8e=s(pb);pme=n(S8e,"STRONG",{});var jct=s(pme);KSo=r(jct,"longformer"),jct.forEach(t),ZSo=r(S8e," \u2014 "),IG=n(S8e,"A",{href:!0});var Dct=s(IG);eRo=r(Dct,"LongformerForSequenceClassification"),Dct.forEach(t),oRo=r(S8e," (Longformer model)"),S8e.forEach(t),rRo=i(j),ub=n(j,"LI",{});var R8e=s(ub);ume=n(R8e,"STRONG",{});var Gct=s(ume);tRo=r(Gct,"mbart"),Gct.forEach(t),aRo=r(R8e," \u2014 "),qG=n(R8e,"A",{href:!0});var Oct=s(qG);nRo=r(Oct,"MBartForSequenceClassification"),Oct.forEach(t),sRo=r(R8e," (mBART model)"),R8e.forEach(t),lRo=i(j),_b=n(j,"LI",{});var P8e=s(_b);_me=n(P8e,"STRONG",{});var Vct=s(_me);iRo=r(Vct,"megatron-bert"),Vct.forEach(t),dRo=r(P8e," \u2014 "),NG=n(P8e,"A",{href:!0});var Xct=s(NG);cRo=r(Xct,"MegatronBertForSequenceClassification"),Xct.forEach(t),fRo=r(P8e," (MegatronBert model)"),P8e.forEach(t),mRo=i(j),bb=n(j,"LI",{});var B8e=s(bb);bme=n(B8e,"STRONG",{});var zct=s(bme);gRo=r(zct,"mobilebert"),zct.forEach(t),hRo=r(B8e," \u2014 "),jG=n(B8e,"A",{href:!0});var Wct=s(jG);pRo=r(Wct,"MobileBertForSequenceClassification"),Wct.forEach(t),uRo=r(B8e," (MobileBERT model)"),B8e.forEach(t),_Ro=i(j),vb=n(j,"LI",{});var I8e=s(vb);vme=n(I8e,"STRONG",{});var Qct=s(vme);bRo=r(Qct,"mpnet"),Qct.forEach(t),vRo=r(I8e," \u2014 "),DG=n(I8e,"A",{href:!0});var Hct=s(DG);FRo=r(Hct,"MPNetForSequenceClassification"),Hct.forEach(t),TRo=r(I8e," (MPNet model)"),I8e.forEach(t),MRo=i(j),Fb=n(j,"LI",{});var q8e=s(Fb);Fme=n(q8e,"STRONG",{});var Uct=s(Fme);ERo=r(Uct,"nystromformer"),Uct.forEach(t),CRo=r(q8e," \u2014 "),GG=n(q8e,"A",{href:!0});var Jct=s(GG);wRo=r(Jct,"NystromformerForSequenceClassification"),Jct.forEach(t),ARo=r(q8e," (Nystromformer model)"),q8e.forEach(t),yRo=i(j),Tb=n(j,"LI",{});var N8e=s(Tb);Tme=n(N8e,"STRONG",{});var Yct=s(Tme);LRo=r(Yct,"openai-gpt"),Yct.forEach(t),xRo=r(N8e," \u2014 "),OG=n(N8e,"A",{href:!0});var Kct=s(OG);$Ro=r(Kct,"OpenAIGPTForSequenceClassification"),Kct.forEach(t),kRo=r(N8e," (OpenAI GPT model)"),N8e.forEach(t),SRo=i(j),Mb=n(j,"LI",{});var j8e=s(Mb);Mme=n(j8e,"STRONG",{});var Zct=s(Mme);RRo=r(Zct,"perceiver"),Zct.forEach(t),PRo=r(j8e," \u2014 "),VG=n(j8e,"A",{href:!0});var eft=s(VG);BRo=r(eft,"PerceiverForSequenceClassification"),eft.forEach(t),IRo=r(j8e," (Perceiver model)"),j8e.forEach(t),qRo=i(j),Eb=n(j,"LI",{});var D8e=s(Eb);Eme=n(D8e,"STRONG",{});var oft=s(Eme);NRo=r(oft,"plbart"),oft.forEach(t),jRo=r(D8e," \u2014 "),XG=n(D8e,"A",{href:!0});var rft=s(XG);DRo=r(rft,"PLBartForSequenceClassification"),rft.forEach(t),GRo=r(D8e," (PLBart model)"),D8e.forEach(t),ORo=i(j),Cb=n(j,"LI",{});var G8e=s(Cb);Cme=n(G8e,"STRONG",{});var tft=s(Cme);VRo=r(tft,"qdqbert"),tft.forEach(t),XRo=r(G8e," \u2014 "),zG=n(G8e,"A",{href:!0});var aft=s(zG);zRo=r(aft,"QDQBertForSequenceClassification"),aft.forEach(t),WRo=r(G8e," (QDQBert model)"),G8e.forEach(t),QRo=i(j),wb=n(j,"LI",{});var O8e=s(wb);wme=n(O8e,"STRONG",{});var nft=s(wme);HRo=r(nft,"reformer"),nft.forEach(t),URo=r(O8e," \u2014 "),WG=n(O8e,"A",{href:!0});var sft=s(WG);JRo=r(sft,"ReformerForSequenceClassification"),sft.forEach(t),YRo=r(O8e," (Reformer model)"),O8e.forEach(t),KRo=i(j),Ab=n(j,"LI",{});var V8e=s(Ab);Ame=n(V8e,"STRONG",{});var lft=s(Ame);ZRo=r(lft,"rembert"),lft.forEach(t),ePo=r(V8e," \u2014 "),QG=n(V8e,"A",{href:!0});var ift=s(QG);oPo=r(ift,"RemBertForSequenceClassification"),ift.forEach(t),rPo=r(V8e," (RemBERT model)"),V8e.forEach(t),tPo=i(j),yb=n(j,"LI",{});var X8e=s(yb);yme=n(X8e,"STRONG",{});var dft=s(yme);aPo=r(dft,"roberta"),dft.forEach(t),nPo=r(X8e," \u2014 "),HG=n(X8e,"A",{href:!0});var cft=s(HG);sPo=r(cft,"RobertaForSequenceClassification"),cft.forEach(t),lPo=r(X8e," (RoBERTa model)"),X8e.forEach(t),iPo=i(j),Lb=n(j,"LI",{});var z8e=s(Lb);Lme=n(z8e,"STRONG",{});var fft=s(Lme);dPo=r(fft,"roformer"),fft.forEach(t),cPo=r(z8e," \u2014 "),UG=n(z8e,"A",{href:!0});var mft=s(UG);fPo=r(mft,"RoFormerForSequenceClassification"),mft.forEach(t),mPo=r(z8e," (RoFormer model)"),z8e.forEach(t),gPo=i(j),xb=n(j,"LI",{});var W8e=s(xb);xme=n(W8e,"STRONG",{});var gft=s(xme);hPo=r(gft,"squeezebert"),gft.forEach(t),pPo=r(W8e," \u2014 "),JG=n(W8e,"A",{href:!0});var hft=s(JG);uPo=r(hft,"SqueezeBertForSequenceClassification"),hft.forEach(t),_Po=r(W8e," (SqueezeBERT model)"),W8e.forEach(t),bPo=i(j),$b=n(j,"LI",{});var Q8e=s($b);$me=n(Q8e,"STRONG",{});var pft=s($me);vPo=r(pft,"tapas"),pft.forEach(t),FPo=r(Q8e," \u2014 "),YG=n(Q8e,"A",{href:!0});var uft=s(YG);TPo=r(uft,"TapasForSequenceClassification"),uft.forEach(t),MPo=r(Q8e," (TAPAS model)"),Q8e.forEach(t),EPo=i(j),kb=n(j,"LI",{});var H8e=s(kb);kme=n(H8e,"STRONG",{});var _ft=s(kme);CPo=r(_ft,"transfo-xl"),_ft.forEach(t),wPo=r(H8e," \u2014 "),KG=n(H8e,"A",{href:!0});var bft=s(KG);APo=r(bft,"TransfoXLForSequenceClassification"),bft.forEach(t),yPo=r(H8e," (Transformer-XL model)"),H8e.forEach(t),LPo=i(j),Sb=n(j,"LI",{});var U8e=s(Sb);Sme=n(U8e,"STRONG",{});var vft=s(Sme);xPo=r(vft,"xlm"),vft.forEach(t),$Po=r(U8e," \u2014 "),ZG=n(U8e,"A",{href:!0});var Fft=s(ZG);kPo=r(Fft,"XLMForSequenceClassification"),Fft.forEach(t),SPo=r(U8e," (XLM model)"),U8e.forEach(t),RPo=i(j),Rb=n(j,"LI",{});var J8e=s(Rb);Rme=n(J8e,"STRONG",{});var Tft=s(Rme);PPo=r(Tft,"xlm-roberta"),Tft.forEach(t),BPo=r(J8e," \u2014 "),eO=n(J8e,"A",{href:!0});var Mft=s(eO);IPo=r(Mft,"XLMRobertaForSequenceClassification"),Mft.forEach(t),qPo=r(J8e," (XLM-RoBERTa model)"),J8e.forEach(t),NPo=i(j),Pb=n(j,"LI",{});var Y8e=s(Pb);Pme=n(Y8e,"STRONG",{});var Eft=s(Pme);jPo=r(Eft,"xlm-roberta-xl"),Eft.forEach(t),DPo=r(Y8e," \u2014 "),oO=n(Y8e,"A",{href:!0});var Cft=s(oO);GPo=r(Cft,"XLMRobertaXLForSequenceClassification"),Cft.forEach(t),OPo=r(Y8e," (XLM-RoBERTa-XL model)"),Y8e.forEach(t),VPo=i(j),Bb=n(j,"LI",{});var K8e=s(Bb);Bme=n(K8e,"STRONG",{});var wft=s(Bme);XPo=r(wft,"xlnet"),wft.forEach(t),zPo=r(K8e," \u2014 "),rO=n(K8e,"A",{href:!0});var Aft=s(rO);WPo=r(Aft,"XLNetForSequenceClassification"),Aft.forEach(t),QPo=r(K8e," (XLNet model)"),K8e.forEach(t),HPo=i(j),Ib=n(j,"LI",{});var Z8e=s(Ib);Ime=n(Z8e,"STRONG",{});var yft=s(Ime);UPo=r(yft,"yoso"),yft.forEach(t),JPo=r(Z8e," \u2014 "),tO=n(Z8e,"A",{href:!0});var Lft=s(tO);YPo=r(Lft,"YosoForSequenceClassification"),Lft.forEach(t),KPo=r(Z8e," (YOSO model)"),Z8e.forEach(t),j.forEach(t),ZPo=i(sa),qb=n(sa,"P",{});var exe=s(qb);eBo=r(exe,"The model is set in evaluation mode by default using "),qme=n(exe,"CODE",{});var xft=s(qme);oBo=r(xft,"model.eval()"),xft.forEach(t),rBo=r(exe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nme=n(exe,"CODE",{});var $ft=s(Nme);tBo=r($ft,"model.train()"),$ft.forEach(t),exe.forEach(t),aBo=i(sa),T(Nb.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),yNe=i(f),Vi=n(f,"H2",{class:!0});var kDe=s(Vi);jb=n(kDe,"A",{id:!0,class:!0,href:!0});var kft=s(jb);jme=n(kft,"SPAN",{});var Sft=s(jme);T($A.$$.fragment,Sft),Sft.forEach(t),kft.forEach(t),nBo=i(kDe),Dme=n(kDe,"SPAN",{});var Rft=s(Dme);sBo=r(Rft,"AutoModelForMultipleChoice"),Rft.forEach(t),kDe.forEach(t),LNe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(kA.$$.fragment,Qs),lBo=i(Qs),Xi=n(Qs,"P",{});var xZ=s(Xi);iBo=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aO=n(xZ,"A",{href:!0});var Pft=s(aO);dBo=r(Pft,"from_pretrained()"),Pft.forEach(t),cBo=r(xZ," class method or the "),nO=n(xZ,"A",{href:!0});var Bft=s(nO);fBo=r(Bft,"from_config()"),Bft.forEach(t),mBo=r(xZ,` class
method.`),xZ.forEach(t),gBo=i(Qs),SA=n(Qs,"P",{});var SDe=s(SA);hBo=r(SDe,"This class cannot be instantiated directly using "),Gme=n(SDe,"CODE",{});var Ift=s(Gme);pBo=r(Ift,"__init__()"),Ift.forEach(t),uBo=r(SDe," (throws an error)."),SDe.forEach(t),_Bo=i(Qs),dt=n(Qs,"DIV",{class:!0});var Xw=s(dt);T(RA.$$.fragment,Xw),bBo=i(Xw),Ome=n(Xw,"P",{});var qft=s(Ome);vBo=r(qft,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qft.forEach(t),FBo=i(Xw),zi=n(Xw,"P",{});var $Z=s(zi);TBo=r($Z,`Note:
Loading a model from its configuration file does `),Vme=n($Z,"STRONG",{});var Nft=s(Vme);MBo=r(Nft,"not"),Nft.forEach(t),EBo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=n($Z,"A",{href:!0});var jft=s(sO);CBo=r(jft,"from_pretrained()"),jft.forEach(t),wBo=r($Z," to load the model weights."),$Z.forEach(t),ABo=i(Xw),T(Db.$$.fragment,Xw),Xw.forEach(t),yBo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(PA.$$.fragment,la),LBo=i(la),Xme=n(la,"P",{});var Dft=s(Xme);xBo=r(Dft,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Dft.forEach(t),$Bo=i(la),Pa=n(la,"P",{});var zw=s(Pa);kBo=r(zw,"The model class to instantiate is selected based on the "),zme=n(zw,"CODE",{});var Gft=s(zme);SBo=r(Gft,"model_type"),Gft.forEach(t),RBo=r(zw,` property of the config object (either
passed as an argument or loaded from `),Wme=n(zw,"CODE",{});var Oft=s(Wme);PBo=r(Oft,"pretrained_model_name_or_path"),Oft.forEach(t),BBo=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qme=n(zw,"CODE",{});var Vft=s(Qme);IBo=r(Vft,"pretrained_model_name_or_path"),Vft.forEach(t),qBo=r(zw,":"),zw.forEach(t),NBo=i(la),K=n(la,"UL",{});var ee=s(K);Gb=n(ee,"LI",{});var oxe=s(Gb);Hme=n(oxe,"STRONG",{});var Xft=s(Hme);jBo=r(Xft,"albert"),Xft.forEach(t),DBo=r(oxe," \u2014 "),lO=n(oxe,"A",{href:!0});var zft=s(lO);GBo=r(zft,"AlbertForMultipleChoice"),zft.forEach(t),OBo=r(oxe," (ALBERT model)"),oxe.forEach(t),VBo=i(ee),Ob=n(ee,"LI",{});var rxe=s(Ob);Ume=n(rxe,"STRONG",{});var Wft=s(Ume);XBo=r(Wft,"bert"),Wft.forEach(t),zBo=r(rxe," \u2014 "),iO=n(rxe,"A",{href:!0});var Qft=s(iO);WBo=r(Qft,"BertForMultipleChoice"),Qft.forEach(t),QBo=r(rxe," (BERT model)"),rxe.forEach(t),HBo=i(ee),Vb=n(ee,"LI",{});var txe=s(Vb);Jme=n(txe,"STRONG",{});var Hft=s(Jme);UBo=r(Hft,"big_bird"),Hft.forEach(t),JBo=r(txe," \u2014 "),dO=n(txe,"A",{href:!0});var Uft=s(dO);YBo=r(Uft,"BigBirdForMultipleChoice"),Uft.forEach(t),KBo=r(txe," (BigBird model)"),txe.forEach(t),ZBo=i(ee),Xb=n(ee,"LI",{});var axe=s(Xb);Yme=n(axe,"STRONG",{});var Jft=s(Yme);eIo=r(Jft,"camembert"),Jft.forEach(t),oIo=r(axe," \u2014 "),cO=n(axe,"A",{href:!0});var Yft=s(cO);rIo=r(Yft,"CamembertForMultipleChoice"),Yft.forEach(t),tIo=r(axe," (CamemBERT model)"),axe.forEach(t),aIo=i(ee),zb=n(ee,"LI",{});var nxe=s(zb);Kme=n(nxe,"STRONG",{});var Kft=s(Kme);nIo=r(Kft,"canine"),Kft.forEach(t),sIo=r(nxe," \u2014 "),fO=n(nxe,"A",{href:!0});var Zft=s(fO);lIo=r(Zft,"CanineForMultipleChoice"),Zft.forEach(t),iIo=r(nxe," (Canine model)"),nxe.forEach(t),dIo=i(ee),Wb=n(ee,"LI",{});var sxe=s(Wb);Zme=n(sxe,"STRONG",{});var emt=s(Zme);cIo=r(emt,"convbert"),emt.forEach(t),fIo=r(sxe," \u2014 "),mO=n(sxe,"A",{href:!0});var omt=s(mO);mIo=r(omt,"ConvBertForMultipleChoice"),omt.forEach(t),gIo=r(sxe," (ConvBERT model)"),sxe.forEach(t),hIo=i(ee),Qb=n(ee,"LI",{});var lxe=s(Qb);ege=n(lxe,"STRONG",{});var rmt=s(ege);pIo=r(rmt,"data2vec-text"),rmt.forEach(t),uIo=r(lxe," \u2014 "),gO=n(lxe,"A",{href:!0});var tmt=s(gO);_Io=r(tmt,"Data2VecTextForMultipleChoice"),tmt.forEach(t),bIo=r(lxe," (Data2VecText model)"),lxe.forEach(t),vIo=i(ee),Hb=n(ee,"LI",{});var ixe=s(Hb);oge=n(ixe,"STRONG",{});var amt=s(oge);FIo=r(amt,"deberta-v2"),amt.forEach(t),TIo=r(ixe," \u2014 "),hO=n(ixe,"A",{href:!0});var nmt=s(hO);MIo=r(nmt,"DebertaV2ForMultipleChoice"),nmt.forEach(t),EIo=r(ixe," (DeBERTa-v2 model)"),ixe.forEach(t),CIo=i(ee),Ub=n(ee,"LI",{});var dxe=s(Ub);rge=n(dxe,"STRONG",{});var smt=s(rge);wIo=r(smt,"distilbert"),smt.forEach(t),AIo=r(dxe," \u2014 "),pO=n(dxe,"A",{href:!0});var lmt=s(pO);yIo=r(lmt,"DistilBertForMultipleChoice"),lmt.forEach(t),LIo=r(dxe," (DistilBERT model)"),dxe.forEach(t),xIo=i(ee),Jb=n(ee,"LI",{});var cxe=s(Jb);tge=n(cxe,"STRONG",{});var imt=s(tge);$Io=r(imt,"electra"),imt.forEach(t),kIo=r(cxe," \u2014 "),uO=n(cxe,"A",{href:!0});var dmt=s(uO);SIo=r(dmt,"ElectraForMultipleChoice"),dmt.forEach(t),RIo=r(cxe," (ELECTRA model)"),cxe.forEach(t),PIo=i(ee),Yb=n(ee,"LI",{});var fxe=s(Yb);age=n(fxe,"STRONG",{});var cmt=s(age);BIo=r(cmt,"flaubert"),cmt.forEach(t),IIo=r(fxe," \u2014 "),_O=n(fxe,"A",{href:!0});var fmt=s(_O);qIo=r(fmt,"FlaubertForMultipleChoice"),fmt.forEach(t),NIo=r(fxe," (FlauBERT model)"),fxe.forEach(t),jIo=i(ee),Kb=n(ee,"LI",{});var mxe=s(Kb);nge=n(mxe,"STRONG",{});var mmt=s(nge);DIo=r(mmt,"fnet"),mmt.forEach(t),GIo=r(mxe," \u2014 "),bO=n(mxe,"A",{href:!0});var gmt=s(bO);OIo=r(gmt,"FNetForMultipleChoice"),gmt.forEach(t),VIo=r(mxe," (FNet model)"),mxe.forEach(t),XIo=i(ee),Zb=n(ee,"LI",{});var gxe=s(Zb);sge=n(gxe,"STRONG",{});var hmt=s(sge);zIo=r(hmt,"funnel"),hmt.forEach(t),WIo=r(gxe," \u2014 "),vO=n(gxe,"A",{href:!0});var pmt=s(vO);QIo=r(pmt,"FunnelForMultipleChoice"),pmt.forEach(t),HIo=r(gxe," (Funnel Transformer model)"),gxe.forEach(t),UIo=i(ee),e2=n(ee,"LI",{});var hxe=s(e2);lge=n(hxe,"STRONG",{});var umt=s(lge);JIo=r(umt,"ibert"),umt.forEach(t),YIo=r(hxe," \u2014 "),FO=n(hxe,"A",{href:!0});var _mt=s(FO);KIo=r(_mt,"IBertForMultipleChoice"),_mt.forEach(t),ZIo=r(hxe," (I-BERT model)"),hxe.forEach(t),eqo=i(ee),o2=n(ee,"LI",{});var pxe=s(o2);ige=n(pxe,"STRONG",{});var bmt=s(ige);oqo=r(bmt,"longformer"),bmt.forEach(t),rqo=r(pxe," \u2014 "),TO=n(pxe,"A",{href:!0});var vmt=s(TO);tqo=r(vmt,"LongformerForMultipleChoice"),vmt.forEach(t),aqo=r(pxe," (Longformer model)"),pxe.forEach(t),nqo=i(ee),r2=n(ee,"LI",{});var uxe=s(r2);dge=n(uxe,"STRONG",{});var Fmt=s(dge);sqo=r(Fmt,"megatron-bert"),Fmt.forEach(t),lqo=r(uxe," \u2014 "),MO=n(uxe,"A",{href:!0});var Tmt=s(MO);iqo=r(Tmt,"MegatronBertForMultipleChoice"),Tmt.forEach(t),dqo=r(uxe," (MegatronBert model)"),uxe.forEach(t),cqo=i(ee),t2=n(ee,"LI",{});var _xe=s(t2);cge=n(_xe,"STRONG",{});var Mmt=s(cge);fqo=r(Mmt,"mobilebert"),Mmt.forEach(t),mqo=r(_xe," \u2014 "),EO=n(_xe,"A",{href:!0});var Emt=s(EO);gqo=r(Emt,"MobileBertForMultipleChoice"),Emt.forEach(t),hqo=r(_xe," (MobileBERT model)"),_xe.forEach(t),pqo=i(ee),a2=n(ee,"LI",{});var bxe=s(a2);fge=n(bxe,"STRONG",{});var Cmt=s(fge);uqo=r(Cmt,"mpnet"),Cmt.forEach(t),_qo=r(bxe," \u2014 "),CO=n(bxe,"A",{href:!0});var wmt=s(CO);bqo=r(wmt,"MPNetForMultipleChoice"),wmt.forEach(t),vqo=r(bxe," (MPNet model)"),bxe.forEach(t),Fqo=i(ee),n2=n(ee,"LI",{});var vxe=s(n2);mge=n(vxe,"STRONG",{});var Amt=s(mge);Tqo=r(Amt,"nystromformer"),Amt.forEach(t),Mqo=r(vxe," \u2014 "),wO=n(vxe,"A",{href:!0});var ymt=s(wO);Eqo=r(ymt,"NystromformerForMultipleChoice"),ymt.forEach(t),Cqo=r(vxe," (Nystromformer model)"),vxe.forEach(t),wqo=i(ee),s2=n(ee,"LI",{});var Fxe=s(s2);gge=n(Fxe,"STRONG",{});var Lmt=s(gge);Aqo=r(Lmt,"qdqbert"),Lmt.forEach(t),yqo=r(Fxe," \u2014 "),AO=n(Fxe,"A",{href:!0});var xmt=s(AO);Lqo=r(xmt,"QDQBertForMultipleChoice"),xmt.forEach(t),xqo=r(Fxe," (QDQBert model)"),Fxe.forEach(t),$qo=i(ee),l2=n(ee,"LI",{});var Txe=s(l2);hge=n(Txe,"STRONG",{});var $mt=s(hge);kqo=r($mt,"rembert"),$mt.forEach(t),Sqo=r(Txe," \u2014 "),yO=n(Txe,"A",{href:!0});var kmt=s(yO);Rqo=r(kmt,"RemBertForMultipleChoice"),kmt.forEach(t),Pqo=r(Txe," (RemBERT model)"),Txe.forEach(t),Bqo=i(ee),i2=n(ee,"LI",{});var Mxe=s(i2);pge=n(Mxe,"STRONG",{});var Smt=s(pge);Iqo=r(Smt,"roberta"),Smt.forEach(t),qqo=r(Mxe," \u2014 "),LO=n(Mxe,"A",{href:!0});var Rmt=s(LO);Nqo=r(Rmt,"RobertaForMultipleChoice"),Rmt.forEach(t),jqo=r(Mxe," (RoBERTa model)"),Mxe.forEach(t),Dqo=i(ee),d2=n(ee,"LI",{});var Exe=s(d2);uge=n(Exe,"STRONG",{});var Pmt=s(uge);Gqo=r(Pmt,"roformer"),Pmt.forEach(t),Oqo=r(Exe," \u2014 "),xO=n(Exe,"A",{href:!0});var Bmt=s(xO);Vqo=r(Bmt,"RoFormerForMultipleChoice"),Bmt.forEach(t),Xqo=r(Exe," (RoFormer model)"),Exe.forEach(t),zqo=i(ee),c2=n(ee,"LI",{});var Cxe=s(c2);_ge=n(Cxe,"STRONG",{});var Imt=s(_ge);Wqo=r(Imt,"squeezebert"),Imt.forEach(t),Qqo=r(Cxe," \u2014 "),$O=n(Cxe,"A",{href:!0});var qmt=s($O);Hqo=r(qmt,"SqueezeBertForMultipleChoice"),qmt.forEach(t),Uqo=r(Cxe," (SqueezeBERT model)"),Cxe.forEach(t),Jqo=i(ee),f2=n(ee,"LI",{});var wxe=s(f2);bge=n(wxe,"STRONG",{});var Nmt=s(bge);Yqo=r(Nmt,"xlm"),Nmt.forEach(t),Kqo=r(wxe," \u2014 "),kO=n(wxe,"A",{href:!0});var jmt=s(kO);Zqo=r(jmt,"XLMForMultipleChoice"),jmt.forEach(t),eNo=r(wxe," (XLM model)"),wxe.forEach(t),oNo=i(ee),m2=n(ee,"LI",{});var Axe=s(m2);vge=n(Axe,"STRONG",{});var Dmt=s(vge);rNo=r(Dmt,"xlm-roberta"),Dmt.forEach(t),tNo=r(Axe," \u2014 "),SO=n(Axe,"A",{href:!0});var Gmt=s(SO);aNo=r(Gmt,"XLMRobertaForMultipleChoice"),Gmt.forEach(t),nNo=r(Axe," (XLM-RoBERTa model)"),Axe.forEach(t),sNo=i(ee),g2=n(ee,"LI",{});var yxe=s(g2);Fge=n(yxe,"STRONG",{});var Omt=s(Fge);lNo=r(Omt,"xlm-roberta-xl"),Omt.forEach(t),iNo=r(yxe," \u2014 "),RO=n(yxe,"A",{href:!0});var Vmt=s(RO);dNo=r(Vmt,"XLMRobertaXLForMultipleChoice"),Vmt.forEach(t),cNo=r(yxe," (XLM-RoBERTa-XL model)"),yxe.forEach(t),fNo=i(ee),h2=n(ee,"LI",{});var Lxe=s(h2);Tge=n(Lxe,"STRONG",{});var Xmt=s(Tge);mNo=r(Xmt,"xlnet"),Xmt.forEach(t),gNo=r(Lxe," \u2014 "),PO=n(Lxe,"A",{href:!0});var zmt=s(PO);hNo=r(zmt,"XLNetForMultipleChoice"),zmt.forEach(t),pNo=r(Lxe," (XLNet model)"),Lxe.forEach(t),uNo=i(ee),p2=n(ee,"LI",{});var xxe=s(p2);Mge=n(xxe,"STRONG",{});var Wmt=s(Mge);_No=r(Wmt,"yoso"),Wmt.forEach(t),bNo=r(xxe," \u2014 "),BO=n(xxe,"A",{href:!0});var Qmt=s(BO);vNo=r(Qmt,"YosoForMultipleChoice"),Qmt.forEach(t),FNo=r(xxe," (YOSO model)"),xxe.forEach(t),ee.forEach(t),TNo=i(la),u2=n(la,"P",{});var $xe=s(u2);MNo=r($xe,"The model is set in evaluation mode by default using "),Ege=n($xe,"CODE",{});var Hmt=s(Ege);ENo=r(Hmt,"model.eval()"),Hmt.forEach(t),CNo=r($xe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cge=n($xe,"CODE",{});var Umt=s(Cge);wNo=r(Umt,"model.train()"),Umt.forEach(t),$xe.forEach(t),ANo=i(la),T(_2.$$.fragment,la),la.forEach(t),Qs.forEach(t),xNe=i(f),Wi=n(f,"H2",{class:!0});var RDe=s(Wi);b2=n(RDe,"A",{id:!0,class:!0,href:!0});var Jmt=s(b2);wge=n(Jmt,"SPAN",{});var Ymt=s(wge);T(BA.$$.fragment,Ymt),Ymt.forEach(t),Jmt.forEach(t),yNo=i(RDe),Age=n(RDe,"SPAN",{});var Kmt=s(Age);LNo=r(Kmt,"AutoModelForNextSentencePrediction"),Kmt.forEach(t),RDe.forEach(t),$Ne=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(IA.$$.fragment,Hs),xNo=i(Hs),Qi=n(Hs,"P",{});var kZ=s(Qi);$No=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IO=n(kZ,"A",{href:!0});var Zmt=s(IO);kNo=r(Zmt,"from_pretrained()"),Zmt.forEach(t),SNo=r(kZ," class method or the "),qO=n(kZ,"A",{href:!0});var egt=s(qO);RNo=r(egt,"from_config()"),egt.forEach(t),PNo=r(kZ,` class
method.`),kZ.forEach(t),BNo=i(Hs),qA=n(Hs,"P",{});var PDe=s(qA);INo=r(PDe,"This class cannot be instantiated directly using "),yge=n(PDe,"CODE",{});var ogt=s(yge);qNo=r(ogt,"__init__()"),ogt.forEach(t),NNo=r(PDe," (throws an error)."),PDe.forEach(t),jNo=i(Hs),ct=n(Hs,"DIV",{class:!0});var Ww=s(ct);T(NA.$$.fragment,Ww),DNo=i(Ww),Lge=n(Ww,"P",{});var rgt=s(Lge);GNo=r(rgt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),rgt.forEach(t),ONo=i(Ww),Hi=n(Ww,"P",{});var SZ=s(Hi);VNo=r(SZ,`Note:
Loading a model from its configuration file does `),xge=n(SZ,"STRONG",{});var tgt=s(xge);XNo=r(tgt,"not"),tgt.forEach(t),zNo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=n(SZ,"A",{href:!0});var agt=s(NO);WNo=r(agt,"from_pretrained()"),agt.forEach(t),QNo=r(SZ," to load the model weights."),SZ.forEach(t),HNo=i(Ww),T(v2.$$.fragment,Ww),Ww.forEach(t),UNo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(jA.$$.fragment,ia),JNo=i(ia),$ge=n(ia,"P",{});var ngt=s($ge);YNo=r(ngt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ngt.forEach(t),KNo=i(ia),Ba=n(ia,"P",{});var Qw=s(Ba);ZNo=r(Qw,"The model class to instantiate is selected based on the "),kge=n(Qw,"CODE",{});var sgt=s(kge);ejo=r(sgt,"model_type"),sgt.forEach(t),ojo=r(Qw,` property of the config object (either
passed as an argument or loaded from `),Sge=n(Qw,"CODE",{});var lgt=s(Sge);rjo=r(lgt,"pretrained_model_name_or_path"),lgt.forEach(t),tjo=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=n(Qw,"CODE",{});var igt=s(Rge);ajo=r(igt,"pretrained_model_name_or_path"),igt.forEach(t),njo=r(Qw,":"),Qw.forEach(t),sjo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);F2=n(Us,"LI",{});var kxe=s(F2);Pge=n(kxe,"STRONG",{});var dgt=s(Pge);ljo=r(dgt,"bert"),dgt.forEach(t),ijo=r(kxe," \u2014 "),jO=n(kxe,"A",{href:!0});var cgt=s(jO);djo=r(cgt,"BertForNextSentencePrediction"),cgt.forEach(t),cjo=r(kxe," (BERT model)"),kxe.forEach(t),fjo=i(Us),T2=n(Us,"LI",{});var Sxe=s(T2);Bge=n(Sxe,"STRONG",{});var fgt=s(Bge);mjo=r(fgt,"fnet"),fgt.forEach(t),gjo=r(Sxe," \u2014 "),DO=n(Sxe,"A",{href:!0});var mgt=s(DO);hjo=r(mgt,"FNetForNextSentencePrediction"),mgt.forEach(t),pjo=r(Sxe," (FNet model)"),Sxe.forEach(t),ujo=i(Us),M2=n(Us,"LI",{});var Rxe=s(M2);Ige=n(Rxe,"STRONG",{});var ggt=s(Ige);_jo=r(ggt,"megatron-bert"),ggt.forEach(t),bjo=r(Rxe," \u2014 "),GO=n(Rxe,"A",{href:!0});var hgt=s(GO);vjo=r(hgt,"MegatronBertForNextSentencePrediction"),hgt.forEach(t),Fjo=r(Rxe," (MegatronBert model)"),Rxe.forEach(t),Tjo=i(Us),E2=n(Us,"LI",{});var Pxe=s(E2);qge=n(Pxe,"STRONG",{});var pgt=s(qge);Mjo=r(pgt,"mobilebert"),pgt.forEach(t),Ejo=r(Pxe," \u2014 "),OO=n(Pxe,"A",{href:!0});var ugt=s(OO);Cjo=r(ugt,"MobileBertForNextSentencePrediction"),ugt.forEach(t),wjo=r(Pxe," (MobileBERT model)"),Pxe.forEach(t),Ajo=i(Us),C2=n(Us,"LI",{});var Bxe=s(C2);Nge=n(Bxe,"STRONG",{});var _gt=s(Nge);yjo=r(_gt,"qdqbert"),_gt.forEach(t),Ljo=r(Bxe," \u2014 "),VO=n(Bxe,"A",{href:!0});var bgt=s(VO);xjo=r(bgt,"QDQBertForNextSentencePrediction"),bgt.forEach(t),$jo=r(Bxe," (QDQBert model)"),Bxe.forEach(t),Us.forEach(t),kjo=i(ia),w2=n(ia,"P",{});var Ixe=s(w2);Sjo=r(Ixe,"The model is set in evaluation mode by default using "),jge=n(Ixe,"CODE",{});var vgt=s(jge);Rjo=r(vgt,"model.eval()"),vgt.forEach(t),Pjo=r(Ixe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dge=n(Ixe,"CODE",{});var Fgt=s(Dge);Bjo=r(Fgt,"model.train()"),Fgt.forEach(t),Ixe.forEach(t),Ijo=i(ia),T(A2.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),kNe=i(f),Ui=n(f,"H2",{class:!0});var BDe=s(Ui);y2=n(BDe,"A",{id:!0,class:!0,href:!0});var Tgt=s(y2);Gge=n(Tgt,"SPAN",{});var Mgt=s(Gge);T(DA.$$.fragment,Mgt),Mgt.forEach(t),Tgt.forEach(t),qjo=i(BDe),Oge=n(BDe,"SPAN",{});var Egt=s(Oge);Njo=r(Egt,"AutoModelForTokenClassification"),Egt.forEach(t),BDe.forEach(t),SNe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(GA.$$.fragment,Js),jjo=i(Js),Ji=n(Js,"P",{});var RZ=s(Ji);Djo=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XO=n(RZ,"A",{href:!0});var Cgt=s(XO);Gjo=r(Cgt,"from_pretrained()"),Cgt.forEach(t),Ojo=r(RZ," class method or the "),zO=n(RZ,"A",{href:!0});var wgt=s(zO);Vjo=r(wgt,"from_config()"),wgt.forEach(t),Xjo=r(RZ,` class
method.`),RZ.forEach(t),zjo=i(Js),OA=n(Js,"P",{});var IDe=s(OA);Wjo=r(IDe,"This class cannot be instantiated directly using "),Vge=n(IDe,"CODE",{});var Agt=s(Vge);Qjo=r(Agt,"__init__()"),Agt.forEach(t),Hjo=r(IDe," (throws an error)."),IDe.forEach(t),Ujo=i(Js),ft=n(Js,"DIV",{class:!0});var Hw=s(ft);T(VA.$$.fragment,Hw),Jjo=i(Hw),Xge=n(Hw,"P",{});var ygt=s(Xge);Yjo=r(ygt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ygt.forEach(t),Kjo=i(Hw),Yi=n(Hw,"P",{});var PZ=s(Yi);Zjo=r(PZ,`Note:
Loading a model from its configuration file does `),zge=n(PZ,"STRONG",{});var Lgt=s(zge);eDo=r(Lgt,"not"),Lgt.forEach(t),oDo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=n(PZ,"A",{href:!0});var xgt=s(WO);rDo=r(xgt,"from_pretrained()"),xgt.forEach(t),tDo=r(PZ," to load the model weights."),PZ.forEach(t),aDo=i(Hw),T(L2.$$.fragment,Hw),Hw.forEach(t),nDo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(XA.$$.fragment,da),sDo=i(da),Wge=n(da,"P",{});var $gt=s(Wge);lDo=r($gt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$gt.forEach(t),iDo=i(da),Ia=n(da,"P",{});var Uw=s(Ia);dDo=r(Uw,"The model class to instantiate is selected based on the "),Qge=n(Uw,"CODE",{});var kgt=s(Qge);cDo=r(kgt,"model_type"),kgt.forEach(t),fDo=r(Uw,` property of the config object (either
passed as an argument or loaded from `),Hge=n(Uw,"CODE",{});var Sgt=s(Hge);mDo=r(Sgt,"pretrained_model_name_or_path"),Sgt.forEach(t),gDo=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=n(Uw,"CODE",{});var Rgt=s(Uge);hDo=r(Rgt,"pretrained_model_name_or_path"),Rgt.forEach(t),pDo=r(Uw,":"),Uw.forEach(t),uDo=i(da),U=n(da,"UL",{});var J=s(U);x2=n(J,"LI",{});var qxe=s(x2);Jge=n(qxe,"STRONG",{});var Pgt=s(Jge);_Do=r(Pgt,"albert"),Pgt.forEach(t),bDo=r(qxe," \u2014 "),QO=n(qxe,"A",{href:!0});var Bgt=s(QO);vDo=r(Bgt,"AlbertForTokenClassification"),Bgt.forEach(t),FDo=r(qxe," (ALBERT model)"),qxe.forEach(t),TDo=i(J),$2=n(J,"LI",{});var Nxe=s($2);Yge=n(Nxe,"STRONG",{});var Igt=s(Yge);MDo=r(Igt,"bert"),Igt.forEach(t),EDo=r(Nxe," \u2014 "),HO=n(Nxe,"A",{href:!0});var qgt=s(HO);CDo=r(qgt,"BertForTokenClassification"),qgt.forEach(t),wDo=r(Nxe," (BERT model)"),Nxe.forEach(t),ADo=i(J),k2=n(J,"LI",{});var jxe=s(k2);Kge=n(jxe,"STRONG",{});var Ngt=s(Kge);yDo=r(Ngt,"big_bird"),Ngt.forEach(t),LDo=r(jxe," \u2014 "),UO=n(jxe,"A",{href:!0});var jgt=s(UO);xDo=r(jgt,"BigBirdForTokenClassification"),jgt.forEach(t),$Do=r(jxe," (BigBird model)"),jxe.forEach(t),kDo=i(J),S2=n(J,"LI",{});var Dxe=s(S2);Zge=n(Dxe,"STRONG",{});var Dgt=s(Zge);SDo=r(Dgt,"camembert"),Dgt.forEach(t),RDo=r(Dxe," \u2014 "),JO=n(Dxe,"A",{href:!0});var Ggt=s(JO);PDo=r(Ggt,"CamembertForTokenClassification"),Ggt.forEach(t),BDo=r(Dxe," (CamemBERT model)"),Dxe.forEach(t),IDo=i(J),R2=n(J,"LI",{});var Gxe=s(R2);ehe=n(Gxe,"STRONG",{});var Ogt=s(ehe);qDo=r(Ogt,"canine"),Ogt.forEach(t),NDo=r(Gxe," \u2014 "),YO=n(Gxe,"A",{href:!0});var Vgt=s(YO);jDo=r(Vgt,"CanineForTokenClassification"),Vgt.forEach(t),DDo=r(Gxe," (Canine model)"),Gxe.forEach(t),GDo=i(J),P2=n(J,"LI",{});var Oxe=s(P2);ohe=n(Oxe,"STRONG",{});var Xgt=s(ohe);ODo=r(Xgt,"convbert"),Xgt.forEach(t),VDo=r(Oxe," \u2014 "),KO=n(Oxe,"A",{href:!0});var zgt=s(KO);XDo=r(zgt,"ConvBertForTokenClassification"),zgt.forEach(t),zDo=r(Oxe," (ConvBERT model)"),Oxe.forEach(t),WDo=i(J),B2=n(J,"LI",{});var Vxe=s(B2);rhe=n(Vxe,"STRONG",{});var Wgt=s(rhe);QDo=r(Wgt,"data2vec-text"),Wgt.forEach(t),HDo=r(Vxe," \u2014 "),ZO=n(Vxe,"A",{href:!0});var Qgt=s(ZO);UDo=r(Qgt,"Data2VecTextForTokenClassification"),Qgt.forEach(t),JDo=r(Vxe," (Data2VecText model)"),Vxe.forEach(t),YDo=i(J),I2=n(J,"LI",{});var Xxe=s(I2);the=n(Xxe,"STRONG",{});var Hgt=s(the);KDo=r(Hgt,"deberta"),Hgt.forEach(t),ZDo=r(Xxe," \u2014 "),eV=n(Xxe,"A",{href:!0});var Ugt=s(eV);eGo=r(Ugt,"DebertaForTokenClassification"),Ugt.forEach(t),oGo=r(Xxe," (DeBERTa model)"),Xxe.forEach(t),rGo=i(J),q2=n(J,"LI",{});var zxe=s(q2);ahe=n(zxe,"STRONG",{});var Jgt=s(ahe);tGo=r(Jgt,"deberta-v2"),Jgt.forEach(t),aGo=r(zxe," \u2014 "),oV=n(zxe,"A",{href:!0});var Ygt=s(oV);nGo=r(Ygt,"DebertaV2ForTokenClassification"),Ygt.forEach(t),sGo=r(zxe," (DeBERTa-v2 model)"),zxe.forEach(t),lGo=i(J),N2=n(J,"LI",{});var Wxe=s(N2);nhe=n(Wxe,"STRONG",{});var Kgt=s(nhe);iGo=r(Kgt,"distilbert"),Kgt.forEach(t),dGo=r(Wxe," \u2014 "),rV=n(Wxe,"A",{href:!0});var Zgt=s(rV);cGo=r(Zgt,"DistilBertForTokenClassification"),Zgt.forEach(t),fGo=r(Wxe," (DistilBERT model)"),Wxe.forEach(t),mGo=i(J),j2=n(J,"LI",{});var Qxe=s(j2);she=n(Qxe,"STRONG",{});var eht=s(she);gGo=r(eht,"electra"),eht.forEach(t),hGo=r(Qxe," \u2014 "),tV=n(Qxe,"A",{href:!0});var oht=s(tV);pGo=r(oht,"ElectraForTokenClassification"),oht.forEach(t),uGo=r(Qxe," (ELECTRA model)"),Qxe.forEach(t),_Go=i(J),D2=n(J,"LI",{});var Hxe=s(D2);lhe=n(Hxe,"STRONG",{});var rht=s(lhe);bGo=r(rht,"flaubert"),rht.forEach(t),vGo=r(Hxe," \u2014 "),aV=n(Hxe,"A",{href:!0});var tht=s(aV);FGo=r(tht,"FlaubertForTokenClassification"),tht.forEach(t),TGo=r(Hxe," (FlauBERT model)"),Hxe.forEach(t),MGo=i(J),G2=n(J,"LI",{});var Uxe=s(G2);ihe=n(Uxe,"STRONG",{});var aht=s(ihe);EGo=r(aht,"fnet"),aht.forEach(t),CGo=r(Uxe," \u2014 "),nV=n(Uxe,"A",{href:!0});var nht=s(nV);wGo=r(nht,"FNetForTokenClassification"),nht.forEach(t),AGo=r(Uxe," (FNet model)"),Uxe.forEach(t),yGo=i(J),O2=n(J,"LI",{});var Jxe=s(O2);dhe=n(Jxe,"STRONG",{});var sht=s(dhe);LGo=r(sht,"funnel"),sht.forEach(t),xGo=r(Jxe," \u2014 "),sV=n(Jxe,"A",{href:!0});var lht=s(sV);$Go=r(lht,"FunnelForTokenClassification"),lht.forEach(t),kGo=r(Jxe," (Funnel Transformer model)"),Jxe.forEach(t),SGo=i(J),V2=n(J,"LI",{});var Yxe=s(V2);che=n(Yxe,"STRONG",{});var iht=s(che);RGo=r(iht,"gpt2"),iht.forEach(t),PGo=r(Yxe," \u2014 "),lV=n(Yxe,"A",{href:!0});var dht=s(lV);BGo=r(dht,"GPT2ForTokenClassification"),dht.forEach(t),IGo=r(Yxe," (OpenAI GPT-2 model)"),Yxe.forEach(t),qGo=i(J),X2=n(J,"LI",{});var Kxe=s(X2);fhe=n(Kxe,"STRONG",{});var cht=s(fhe);NGo=r(cht,"ibert"),cht.forEach(t),jGo=r(Kxe," \u2014 "),iV=n(Kxe,"A",{href:!0});var fht=s(iV);DGo=r(fht,"IBertForTokenClassification"),fht.forEach(t),GGo=r(Kxe," (I-BERT model)"),Kxe.forEach(t),OGo=i(J),z2=n(J,"LI",{});var Zxe=s(z2);mhe=n(Zxe,"STRONG",{});var mht=s(mhe);VGo=r(mht,"layoutlm"),mht.forEach(t),XGo=r(Zxe," \u2014 "),dV=n(Zxe,"A",{href:!0});var ght=s(dV);zGo=r(ght,"LayoutLMForTokenClassification"),ght.forEach(t),WGo=r(Zxe," (LayoutLM model)"),Zxe.forEach(t),QGo=i(J),W2=n(J,"LI",{});var e$e=s(W2);ghe=n(e$e,"STRONG",{});var hht=s(ghe);HGo=r(hht,"layoutlmv2"),hht.forEach(t),UGo=r(e$e," \u2014 "),cV=n(e$e,"A",{href:!0});var pht=s(cV);JGo=r(pht,"LayoutLMv2ForTokenClassification"),pht.forEach(t),YGo=r(e$e," (LayoutLMv2 model)"),e$e.forEach(t),KGo=i(J),Q2=n(J,"LI",{});var o$e=s(Q2);hhe=n(o$e,"STRONG",{});var uht=s(hhe);ZGo=r(uht,"layoutlmv3"),uht.forEach(t),eOo=r(o$e," \u2014 "),fV=n(o$e,"A",{href:!0});var _ht=s(fV);oOo=r(_ht,"LayoutLMv3ForTokenClassification"),_ht.forEach(t),rOo=r(o$e," (LayoutLMv3 model)"),o$e.forEach(t),tOo=i(J),H2=n(J,"LI",{});var r$e=s(H2);phe=n(r$e,"STRONG",{});var bht=s(phe);aOo=r(bht,"longformer"),bht.forEach(t),nOo=r(r$e," \u2014 "),mV=n(r$e,"A",{href:!0});var vht=s(mV);sOo=r(vht,"LongformerForTokenClassification"),vht.forEach(t),lOo=r(r$e," (Longformer model)"),r$e.forEach(t),iOo=i(J),U2=n(J,"LI",{});var t$e=s(U2);uhe=n(t$e,"STRONG",{});var Fht=s(uhe);dOo=r(Fht,"megatron-bert"),Fht.forEach(t),cOo=r(t$e," \u2014 "),gV=n(t$e,"A",{href:!0});var Tht=s(gV);fOo=r(Tht,"MegatronBertForTokenClassification"),Tht.forEach(t),mOo=r(t$e," (MegatronBert model)"),t$e.forEach(t),gOo=i(J),J2=n(J,"LI",{});var a$e=s(J2);_he=n(a$e,"STRONG",{});var Mht=s(_he);hOo=r(Mht,"mobilebert"),Mht.forEach(t),pOo=r(a$e," \u2014 "),hV=n(a$e,"A",{href:!0});var Eht=s(hV);uOo=r(Eht,"MobileBertForTokenClassification"),Eht.forEach(t),_Oo=r(a$e," (MobileBERT model)"),a$e.forEach(t),bOo=i(J),Y2=n(J,"LI",{});var n$e=s(Y2);bhe=n(n$e,"STRONG",{});var Cht=s(bhe);vOo=r(Cht,"mpnet"),Cht.forEach(t),FOo=r(n$e," \u2014 "),pV=n(n$e,"A",{href:!0});var wht=s(pV);TOo=r(wht,"MPNetForTokenClassification"),wht.forEach(t),MOo=r(n$e," (MPNet model)"),n$e.forEach(t),EOo=i(J),K2=n(J,"LI",{});var s$e=s(K2);vhe=n(s$e,"STRONG",{});var Aht=s(vhe);COo=r(Aht,"nystromformer"),Aht.forEach(t),wOo=r(s$e," \u2014 "),uV=n(s$e,"A",{href:!0});var yht=s(uV);AOo=r(yht,"NystromformerForTokenClassification"),yht.forEach(t),yOo=r(s$e," (Nystromformer model)"),s$e.forEach(t),LOo=i(J),Z2=n(J,"LI",{});var l$e=s(Z2);Fhe=n(l$e,"STRONG",{});var Lht=s(Fhe);xOo=r(Lht,"qdqbert"),Lht.forEach(t),$Oo=r(l$e," \u2014 "),_V=n(l$e,"A",{href:!0});var xht=s(_V);kOo=r(xht,"QDQBertForTokenClassification"),xht.forEach(t),SOo=r(l$e," (QDQBert model)"),l$e.forEach(t),ROo=i(J),e4=n(J,"LI",{});var i$e=s(e4);The=n(i$e,"STRONG",{});var $ht=s(The);POo=r($ht,"rembert"),$ht.forEach(t),BOo=r(i$e," \u2014 "),bV=n(i$e,"A",{href:!0});var kht=s(bV);IOo=r(kht,"RemBertForTokenClassification"),kht.forEach(t),qOo=r(i$e," (RemBERT model)"),i$e.forEach(t),NOo=i(J),o4=n(J,"LI",{});var d$e=s(o4);Mhe=n(d$e,"STRONG",{});var Sht=s(Mhe);jOo=r(Sht,"roberta"),Sht.forEach(t),DOo=r(d$e," \u2014 "),vV=n(d$e,"A",{href:!0});var Rht=s(vV);GOo=r(Rht,"RobertaForTokenClassification"),Rht.forEach(t),OOo=r(d$e," (RoBERTa model)"),d$e.forEach(t),VOo=i(J),r4=n(J,"LI",{});var c$e=s(r4);Ehe=n(c$e,"STRONG",{});var Pht=s(Ehe);XOo=r(Pht,"roformer"),Pht.forEach(t),zOo=r(c$e," \u2014 "),FV=n(c$e,"A",{href:!0});var Bht=s(FV);WOo=r(Bht,"RoFormerForTokenClassification"),Bht.forEach(t),QOo=r(c$e," (RoFormer model)"),c$e.forEach(t),HOo=i(J),t4=n(J,"LI",{});var f$e=s(t4);Che=n(f$e,"STRONG",{});var Iht=s(Che);UOo=r(Iht,"squeezebert"),Iht.forEach(t),JOo=r(f$e," \u2014 "),TV=n(f$e,"A",{href:!0});var qht=s(TV);YOo=r(qht,"SqueezeBertForTokenClassification"),qht.forEach(t),KOo=r(f$e," (SqueezeBERT model)"),f$e.forEach(t),ZOo=i(J),a4=n(J,"LI",{});var m$e=s(a4);whe=n(m$e,"STRONG",{});var Nht=s(whe);eVo=r(Nht,"xlm"),Nht.forEach(t),oVo=r(m$e," \u2014 "),MV=n(m$e,"A",{href:!0});var jht=s(MV);rVo=r(jht,"XLMForTokenClassification"),jht.forEach(t),tVo=r(m$e," (XLM model)"),m$e.forEach(t),aVo=i(J),n4=n(J,"LI",{});var g$e=s(n4);Ahe=n(g$e,"STRONG",{});var Dht=s(Ahe);nVo=r(Dht,"xlm-roberta"),Dht.forEach(t),sVo=r(g$e," \u2014 "),EV=n(g$e,"A",{href:!0});var Ght=s(EV);lVo=r(Ght,"XLMRobertaForTokenClassification"),Ght.forEach(t),iVo=r(g$e," (XLM-RoBERTa model)"),g$e.forEach(t),dVo=i(J),s4=n(J,"LI",{});var h$e=s(s4);yhe=n(h$e,"STRONG",{});var Oht=s(yhe);cVo=r(Oht,"xlm-roberta-xl"),Oht.forEach(t),fVo=r(h$e," \u2014 "),CV=n(h$e,"A",{href:!0});var Vht=s(CV);mVo=r(Vht,"XLMRobertaXLForTokenClassification"),Vht.forEach(t),gVo=r(h$e," (XLM-RoBERTa-XL model)"),h$e.forEach(t),hVo=i(J),l4=n(J,"LI",{});var p$e=s(l4);Lhe=n(p$e,"STRONG",{});var Xht=s(Lhe);pVo=r(Xht,"xlnet"),Xht.forEach(t),uVo=r(p$e," \u2014 "),wV=n(p$e,"A",{href:!0});var zht=s(wV);_Vo=r(zht,"XLNetForTokenClassification"),zht.forEach(t),bVo=r(p$e," (XLNet model)"),p$e.forEach(t),vVo=i(J),i4=n(J,"LI",{});var u$e=s(i4);xhe=n(u$e,"STRONG",{});var Wht=s(xhe);FVo=r(Wht,"yoso"),Wht.forEach(t),TVo=r(u$e," \u2014 "),AV=n(u$e,"A",{href:!0});var Qht=s(AV);MVo=r(Qht,"YosoForTokenClassification"),Qht.forEach(t),EVo=r(u$e," (YOSO model)"),u$e.forEach(t),J.forEach(t),CVo=i(da),d4=n(da,"P",{});var _$e=s(d4);wVo=r(_$e,"The model is set in evaluation mode by default using "),$he=n(_$e,"CODE",{});var Hht=s($he);AVo=r(Hht,"model.eval()"),Hht.forEach(t),yVo=r(_$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=n(_$e,"CODE",{});var Uht=s(khe);LVo=r(Uht,"model.train()"),Uht.forEach(t),_$e.forEach(t),xVo=i(da),T(c4.$$.fragment,da),da.forEach(t),Js.forEach(t),RNe=i(f),Ki=n(f,"H2",{class:!0});var qDe=s(Ki);f4=n(qDe,"A",{id:!0,class:!0,href:!0});var Jht=s(f4);She=n(Jht,"SPAN",{});var Yht=s(She);T(zA.$$.fragment,Yht),Yht.forEach(t),Jht.forEach(t),$Vo=i(qDe),Rhe=n(qDe,"SPAN",{});var Kht=s(Rhe);kVo=r(Kht,"AutoModelForQuestionAnswering"),Kht.forEach(t),qDe.forEach(t),PNe=i(f),qo=n(f,"DIV",{class:!0});var Ys=s(qo);T(WA.$$.fragment,Ys),SVo=i(Ys),Zi=n(Ys,"P",{});var BZ=s(Zi);RVo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yV=n(BZ,"A",{href:!0});var Zht=s(yV);PVo=r(Zht,"from_pretrained()"),Zht.forEach(t),BVo=r(BZ," class method or the "),LV=n(BZ,"A",{href:!0});var ept=s(LV);IVo=r(ept,"from_config()"),ept.forEach(t),qVo=r(BZ,` class
method.`),BZ.forEach(t),NVo=i(Ys),QA=n(Ys,"P",{});var NDe=s(QA);jVo=r(NDe,"This class cannot be instantiated directly using "),Phe=n(NDe,"CODE",{});var opt=s(Phe);DVo=r(opt,"__init__()"),opt.forEach(t),GVo=r(NDe," (throws an error)."),NDe.forEach(t),OVo=i(Ys),mt=n(Ys,"DIV",{class:!0});var Jw=s(mt);T(HA.$$.fragment,Jw),VVo=i(Jw),Bhe=n(Jw,"P",{});var rpt=s(Bhe);XVo=r(rpt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rpt.forEach(t),zVo=i(Jw),ed=n(Jw,"P",{});var IZ=s(ed);WVo=r(IZ,`Note:
Loading a model from its configuration file does `),Ihe=n(IZ,"STRONG",{});var tpt=s(Ihe);QVo=r(tpt,"not"),tpt.forEach(t),HVo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=n(IZ,"A",{href:!0});var apt=s(xV);UVo=r(apt,"from_pretrained()"),apt.forEach(t),JVo=r(IZ," to load the model weights."),IZ.forEach(t),YVo=i(Jw),T(m4.$$.fragment,Jw),Jw.forEach(t),KVo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(UA.$$.fragment,ca),ZVo=i(ca),qhe=n(ca,"P",{});var npt=s(qhe);eXo=r(npt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),npt.forEach(t),oXo=i(ca),qa=n(ca,"P",{});var Yw=s(qa);rXo=r(Yw,"The model class to instantiate is selected based on the "),Nhe=n(Yw,"CODE",{});var spt=s(Nhe);tXo=r(spt,"model_type"),spt.forEach(t),aXo=r(Yw,` property of the config object (either
passed as an argument or loaded from `),jhe=n(Yw,"CODE",{});var lpt=s(jhe);nXo=r(lpt,"pretrained_model_name_or_path"),lpt.forEach(t),sXo=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=n(Yw,"CODE",{});var ipt=s(Dhe);lXo=r(ipt,"pretrained_model_name_or_path"),ipt.forEach(t),iXo=r(Yw,":"),Yw.forEach(t),dXo=i(ca),V=n(ca,"UL",{});var X=s(V);g4=n(X,"LI",{});var b$e=s(g4);Ghe=n(b$e,"STRONG",{});var dpt=s(Ghe);cXo=r(dpt,"albert"),dpt.forEach(t),fXo=r(b$e," \u2014 "),$V=n(b$e,"A",{href:!0});var cpt=s($V);mXo=r(cpt,"AlbertForQuestionAnswering"),cpt.forEach(t),gXo=r(b$e," (ALBERT model)"),b$e.forEach(t),hXo=i(X),h4=n(X,"LI",{});var v$e=s(h4);Ohe=n(v$e,"STRONG",{});var fpt=s(Ohe);pXo=r(fpt,"bart"),fpt.forEach(t),uXo=r(v$e," \u2014 "),kV=n(v$e,"A",{href:!0});var mpt=s(kV);_Xo=r(mpt,"BartForQuestionAnswering"),mpt.forEach(t),bXo=r(v$e," (BART model)"),v$e.forEach(t),vXo=i(X),p4=n(X,"LI",{});var F$e=s(p4);Vhe=n(F$e,"STRONG",{});var gpt=s(Vhe);FXo=r(gpt,"bert"),gpt.forEach(t),TXo=r(F$e," \u2014 "),SV=n(F$e,"A",{href:!0});var hpt=s(SV);MXo=r(hpt,"BertForQuestionAnswering"),hpt.forEach(t),EXo=r(F$e," (BERT model)"),F$e.forEach(t),CXo=i(X),u4=n(X,"LI",{});var T$e=s(u4);Xhe=n(T$e,"STRONG",{});var ppt=s(Xhe);wXo=r(ppt,"big_bird"),ppt.forEach(t),AXo=r(T$e," \u2014 "),RV=n(T$e,"A",{href:!0});var upt=s(RV);yXo=r(upt,"BigBirdForQuestionAnswering"),upt.forEach(t),LXo=r(T$e," (BigBird model)"),T$e.forEach(t),xXo=i(X),_4=n(X,"LI",{});var M$e=s(_4);zhe=n(M$e,"STRONG",{});var _pt=s(zhe);$Xo=r(_pt,"bigbird_pegasus"),_pt.forEach(t),kXo=r(M$e," \u2014 "),PV=n(M$e,"A",{href:!0});var bpt=s(PV);SXo=r(bpt,"BigBirdPegasusForQuestionAnswering"),bpt.forEach(t),RXo=r(M$e," (BigBirdPegasus model)"),M$e.forEach(t),PXo=i(X),b4=n(X,"LI",{});var E$e=s(b4);Whe=n(E$e,"STRONG",{});var vpt=s(Whe);BXo=r(vpt,"camembert"),vpt.forEach(t),IXo=r(E$e," \u2014 "),BV=n(E$e,"A",{href:!0});var Fpt=s(BV);qXo=r(Fpt,"CamembertForQuestionAnswering"),Fpt.forEach(t),NXo=r(E$e," (CamemBERT model)"),E$e.forEach(t),jXo=i(X),v4=n(X,"LI",{});var C$e=s(v4);Qhe=n(C$e,"STRONG",{});var Tpt=s(Qhe);DXo=r(Tpt,"canine"),Tpt.forEach(t),GXo=r(C$e," \u2014 "),IV=n(C$e,"A",{href:!0});var Mpt=s(IV);OXo=r(Mpt,"CanineForQuestionAnswering"),Mpt.forEach(t),VXo=r(C$e," (Canine model)"),C$e.forEach(t),XXo=i(X),F4=n(X,"LI",{});var w$e=s(F4);Hhe=n(w$e,"STRONG",{});var Ept=s(Hhe);zXo=r(Ept,"convbert"),Ept.forEach(t),WXo=r(w$e," \u2014 "),qV=n(w$e,"A",{href:!0});var Cpt=s(qV);QXo=r(Cpt,"ConvBertForQuestionAnswering"),Cpt.forEach(t),HXo=r(w$e," (ConvBERT model)"),w$e.forEach(t),UXo=i(X),T4=n(X,"LI",{});var A$e=s(T4);Uhe=n(A$e,"STRONG",{});var wpt=s(Uhe);JXo=r(wpt,"data2vec-text"),wpt.forEach(t),YXo=r(A$e," \u2014 "),NV=n(A$e,"A",{href:!0});var Apt=s(NV);KXo=r(Apt,"Data2VecTextForQuestionAnswering"),Apt.forEach(t),ZXo=r(A$e," (Data2VecText model)"),A$e.forEach(t),ezo=i(X),M4=n(X,"LI",{});var y$e=s(M4);Jhe=n(y$e,"STRONG",{});var ypt=s(Jhe);ozo=r(ypt,"deberta"),ypt.forEach(t),rzo=r(y$e," \u2014 "),jV=n(y$e,"A",{href:!0});var Lpt=s(jV);tzo=r(Lpt,"DebertaForQuestionAnswering"),Lpt.forEach(t),azo=r(y$e," (DeBERTa model)"),y$e.forEach(t),nzo=i(X),E4=n(X,"LI",{});var L$e=s(E4);Yhe=n(L$e,"STRONG",{});var xpt=s(Yhe);szo=r(xpt,"deberta-v2"),xpt.forEach(t),lzo=r(L$e," \u2014 "),DV=n(L$e,"A",{href:!0});var $pt=s(DV);izo=r($pt,"DebertaV2ForQuestionAnswering"),$pt.forEach(t),dzo=r(L$e," (DeBERTa-v2 model)"),L$e.forEach(t),czo=i(X),C4=n(X,"LI",{});var x$e=s(C4);Khe=n(x$e,"STRONG",{});var kpt=s(Khe);fzo=r(kpt,"distilbert"),kpt.forEach(t),mzo=r(x$e," \u2014 "),GV=n(x$e,"A",{href:!0});var Spt=s(GV);gzo=r(Spt,"DistilBertForQuestionAnswering"),Spt.forEach(t),hzo=r(x$e," (DistilBERT model)"),x$e.forEach(t),pzo=i(X),w4=n(X,"LI",{});var $$e=s(w4);Zhe=n($$e,"STRONG",{});var Rpt=s(Zhe);uzo=r(Rpt,"electra"),Rpt.forEach(t),_zo=r($$e," \u2014 "),OV=n($$e,"A",{href:!0});var Ppt=s(OV);bzo=r(Ppt,"ElectraForQuestionAnswering"),Ppt.forEach(t),vzo=r($$e," (ELECTRA model)"),$$e.forEach(t),Fzo=i(X),A4=n(X,"LI",{});var k$e=s(A4);epe=n(k$e,"STRONG",{});var Bpt=s(epe);Tzo=r(Bpt,"flaubert"),Bpt.forEach(t),Mzo=r(k$e," \u2014 "),VV=n(k$e,"A",{href:!0});var Ipt=s(VV);Ezo=r(Ipt,"FlaubertForQuestionAnsweringSimple"),Ipt.forEach(t),Czo=r(k$e," (FlauBERT model)"),k$e.forEach(t),wzo=i(X),y4=n(X,"LI",{});var S$e=s(y4);ope=n(S$e,"STRONG",{});var qpt=s(ope);Azo=r(qpt,"fnet"),qpt.forEach(t),yzo=r(S$e," \u2014 "),XV=n(S$e,"A",{href:!0});var Npt=s(XV);Lzo=r(Npt,"FNetForQuestionAnswering"),Npt.forEach(t),xzo=r(S$e," (FNet model)"),S$e.forEach(t),$zo=i(X),L4=n(X,"LI",{});var R$e=s(L4);rpe=n(R$e,"STRONG",{});var jpt=s(rpe);kzo=r(jpt,"funnel"),jpt.forEach(t),Szo=r(R$e," \u2014 "),zV=n(R$e,"A",{href:!0});var Dpt=s(zV);Rzo=r(Dpt,"FunnelForQuestionAnswering"),Dpt.forEach(t),Pzo=r(R$e," (Funnel Transformer model)"),R$e.forEach(t),Bzo=i(X),x4=n(X,"LI",{});var P$e=s(x4);tpe=n(P$e,"STRONG",{});var Gpt=s(tpe);Izo=r(Gpt,"gptj"),Gpt.forEach(t),qzo=r(P$e," \u2014 "),WV=n(P$e,"A",{href:!0});var Opt=s(WV);Nzo=r(Opt,"GPTJForQuestionAnswering"),Opt.forEach(t),jzo=r(P$e," (GPT-J model)"),P$e.forEach(t),Dzo=i(X),$4=n(X,"LI",{});var B$e=s($4);ape=n(B$e,"STRONG",{});var Vpt=s(ape);Gzo=r(Vpt,"ibert"),Vpt.forEach(t),Ozo=r(B$e," \u2014 "),QV=n(B$e,"A",{href:!0});var Xpt=s(QV);Vzo=r(Xpt,"IBertForQuestionAnswering"),Xpt.forEach(t),Xzo=r(B$e," (I-BERT model)"),B$e.forEach(t),zzo=i(X),k4=n(X,"LI",{});var I$e=s(k4);npe=n(I$e,"STRONG",{});var zpt=s(npe);Wzo=r(zpt,"layoutlmv2"),zpt.forEach(t),Qzo=r(I$e," \u2014 "),HV=n(I$e,"A",{href:!0});var Wpt=s(HV);Hzo=r(Wpt,"LayoutLMv2ForQuestionAnswering"),Wpt.forEach(t),Uzo=r(I$e," (LayoutLMv2 model)"),I$e.forEach(t),Jzo=i(X),S4=n(X,"LI",{});var q$e=s(S4);spe=n(q$e,"STRONG",{});var Qpt=s(spe);Yzo=r(Qpt,"layoutlmv3"),Qpt.forEach(t),Kzo=r(q$e," \u2014 "),UV=n(q$e,"A",{href:!0});var Hpt=s(UV);Zzo=r(Hpt,"LayoutLMv3ForQuestionAnswering"),Hpt.forEach(t),eWo=r(q$e," (LayoutLMv3 model)"),q$e.forEach(t),oWo=i(X),R4=n(X,"LI",{});var N$e=s(R4);lpe=n(N$e,"STRONG",{});var Upt=s(lpe);rWo=r(Upt,"led"),Upt.forEach(t),tWo=r(N$e," \u2014 "),JV=n(N$e,"A",{href:!0});var Jpt=s(JV);aWo=r(Jpt,"LEDForQuestionAnswering"),Jpt.forEach(t),nWo=r(N$e," (LED model)"),N$e.forEach(t),sWo=i(X),P4=n(X,"LI",{});var j$e=s(P4);ipe=n(j$e,"STRONG",{});var Ypt=s(ipe);lWo=r(Ypt,"longformer"),Ypt.forEach(t),iWo=r(j$e," \u2014 "),YV=n(j$e,"A",{href:!0});var Kpt=s(YV);dWo=r(Kpt,"LongformerForQuestionAnswering"),Kpt.forEach(t),cWo=r(j$e," (Longformer model)"),j$e.forEach(t),fWo=i(X),B4=n(X,"LI",{});var D$e=s(B4);dpe=n(D$e,"STRONG",{});var Zpt=s(dpe);mWo=r(Zpt,"lxmert"),Zpt.forEach(t),gWo=r(D$e," \u2014 "),KV=n(D$e,"A",{href:!0});var eut=s(KV);hWo=r(eut,"LxmertForQuestionAnswering"),eut.forEach(t),pWo=r(D$e," (LXMERT model)"),D$e.forEach(t),uWo=i(X),I4=n(X,"LI",{});var G$e=s(I4);cpe=n(G$e,"STRONG",{});var out=s(cpe);_Wo=r(out,"mbart"),out.forEach(t),bWo=r(G$e," \u2014 "),ZV=n(G$e,"A",{href:!0});var rut=s(ZV);vWo=r(rut,"MBartForQuestionAnswering"),rut.forEach(t),FWo=r(G$e," (mBART model)"),G$e.forEach(t),TWo=i(X),q4=n(X,"LI",{});var O$e=s(q4);fpe=n(O$e,"STRONG",{});var tut=s(fpe);MWo=r(tut,"megatron-bert"),tut.forEach(t),EWo=r(O$e," \u2014 "),eX=n(O$e,"A",{href:!0});var aut=s(eX);CWo=r(aut,"MegatronBertForQuestionAnswering"),aut.forEach(t),wWo=r(O$e," (MegatronBert model)"),O$e.forEach(t),AWo=i(X),N4=n(X,"LI",{});var V$e=s(N4);mpe=n(V$e,"STRONG",{});var nut=s(mpe);yWo=r(nut,"mobilebert"),nut.forEach(t),LWo=r(V$e," \u2014 "),oX=n(V$e,"A",{href:!0});var sut=s(oX);xWo=r(sut,"MobileBertForQuestionAnswering"),sut.forEach(t),$Wo=r(V$e," (MobileBERT model)"),V$e.forEach(t),kWo=i(X),j4=n(X,"LI",{});var X$e=s(j4);gpe=n(X$e,"STRONG",{});var lut=s(gpe);SWo=r(lut,"mpnet"),lut.forEach(t),RWo=r(X$e," \u2014 "),rX=n(X$e,"A",{href:!0});var iut=s(rX);PWo=r(iut,"MPNetForQuestionAnswering"),iut.forEach(t),BWo=r(X$e," (MPNet model)"),X$e.forEach(t),IWo=i(X),D4=n(X,"LI",{});var z$e=s(D4);hpe=n(z$e,"STRONG",{});var dut=s(hpe);qWo=r(dut,"nystromformer"),dut.forEach(t),NWo=r(z$e," \u2014 "),tX=n(z$e,"A",{href:!0});var cut=s(tX);jWo=r(cut,"NystromformerForQuestionAnswering"),cut.forEach(t),DWo=r(z$e," (Nystromformer model)"),z$e.forEach(t),GWo=i(X),G4=n(X,"LI",{});var W$e=s(G4);ppe=n(W$e,"STRONG",{});var fut=s(ppe);OWo=r(fut,"qdqbert"),fut.forEach(t),VWo=r(W$e," \u2014 "),aX=n(W$e,"A",{href:!0});var mut=s(aX);XWo=r(mut,"QDQBertForQuestionAnswering"),mut.forEach(t),zWo=r(W$e," (QDQBert model)"),W$e.forEach(t),WWo=i(X),O4=n(X,"LI",{});var Q$e=s(O4);upe=n(Q$e,"STRONG",{});var gut=s(upe);QWo=r(gut,"reformer"),gut.forEach(t),HWo=r(Q$e," \u2014 "),nX=n(Q$e,"A",{href:!0});var hut=s(nX);UWo=r(hut,"ReformerForQuestionAnswering"),hut.forEach(t),JWo=r(Q$e," (Reformer model)"),Q$e.forEach(t),YWo=i(X),V4=n(X,"LI",{});var H$e=s(V4);_pe=n(H$e,"STRONG",{});var put=s(_pe);KWo=r(put,"rembert"),put.forEach(t),ZWo=r(H$e," \u2014 "),sX=n(H$e,"A",{href:!0});var uut=s(sX);eQo=r(uut,"RemBertForQuestionAnswering"),uut.forEach(t),oQo=r(H$e," (RemBERT model)"),H$e.forEach(t),rQo=i(X),X4=n(X,"LI",{});var U$e=s(X4);bpe=n(U$e,"STRONG",{});var _ut=s(bpe);tQo=r(_ut,"roberta"),_ut.forEach(t),aQo=r(U$e," \u2014 "),lX=n(U$e,"A",{href:!0});var but=s(lX);nQo=r(but,"RobertaForQuestionAnswering"),but.forEach(t),sQo=r(U$e," (RoBERTa model)"),U$e.forEach(t),lQo=i(X),z4=n(X,"LI",{});var J$e=s(z4);vpe=n(J$e,"STRONG",{});var vut=s(vpe);iQo=r(vut,"roformer"),vut.forEach(t),dQo=r(J$e," \u2014 "),iX=n(J$e,"A",{href:!0});var Fut=s(iX);cQo=r(Fut,"RoFormerForQuestionAnswering"),Fut.forEach(t),fQo=r(J$e," (RoFormer model)"),J$e.forEach(t),mQo=i(X),W4=n(X,"LI",{});var Y$e=s(W4);Fpe=n(Y$e,"STRONG",{});var Tut=s(Fpe);gQo=r(Tut,"splinter"),Tut.forEach(t),hQo=r(Y$e," \u2014 "),dX=n(Y$e,"A",{href:!0});var Mut=s(dX);pQo=r(Mut,"SplinterForQuestionAnswering"),Mut.forEach(t),uQo=r(Y$e," (Splinter model)"),Y$e.forEach(t),_Qo=i(X),Q4=n(X,"LI",{});var K$e=s(Q4);Tpe=n(K$e,"STRONG",{});var Eut=s(Tpe);bQo=r(Eut,"squeezebert"),Eut.forEach(t),vQo=r(K$e," \u2014 "),cX=n(K$e,"A",{href:!0});var Cut=s(cX);FQo=r(Cut,"SqueezeBertForQuestionAnswering"),Cut.forEach(t),TQo=r(K$e," (SqueezeBERT model)"),K$e.forEach(t),MQo=i(X),H4=n(X,"LI",{});var Z$e=s(H4);Mpe=n(Z$e,"STRONG",{});var wut=s(Mpe);EQo=r(wut,"xlm"),wut.forEach(t),CQo=r(Z$e," \u2014 "),fX=n(Z$e,"A",{href:!0});var Aut=s(fX);wQo=r(Aut,"XLMForQuestionAnsweringSimple"),Aut.forEach(t),AQo=r(Z$e," (XLM model)"),Z$e.forEach(t),yQo=i(X),U4=n(X,"LI",{});var eke=s(U4);Epe=n(eke,"STRONG",{});var yut=s(Epe);LQo=r(yut,"xlm-roberta"),yut.forEach(t),xQo=r(eke," \u2014 "),mX=n(eke,"A",{href:!0});var Lut=s(mX);$Qo=r(Lut,"XLMRobertaForQuestionAnswering"),Lut.forEach(t),kQo=r(eke," (XLM-RoBERTa model)"),eke.forEach(t),SQo=i(X),J4=n(X,"LI",{});var oke=s(J4);Cpe=n(oke,"STRONG",{});var xut=s(Cpe);RQo=r(xut,"xlm-roberta-xl"),xut.forEach(t),PQo=r(oke," \u2014 "),gX=n(oke,"A",{href:!0});var $ut=s(gX);BQo=r($ut,"XLMRobertaXLForQuestionAnswering"),$ut.forEach(t),IQo=r(oke," (XLM-RoBERTa-XL model)"),oke.forEach(t),qQo=i(X),Y4=n(X,"LI",{});var rke=s(Y4);wpe=n(rke,"STRONG",{});var kut=s(wpe);NQo=r(kut,"xlnet"),kut.forEach(t),jQo=r(rke," \u2014 "),hX=n(rke,"A",{href:!0});var Sut=s(hX);DQo=r(Sut,"XLNetForQuestionAnsweringSimple"),Sut.forEach(t),GQo=r(rke," (XLNet model)"),rke.forEach(t),OQo=i(X),K4=n(X,"LI",{});var tke=s(K4);Ape=n(tke,"STRONG",{});var Rut=s(Ape);VQo=r(Rut,"yoso"),Rut.forEach(t),XQo=r(tke," \u2014 "),pX=n(tke,"A",{href:!0});var Put=s(pX);zQo=r(Put,"YosoForQuestionAnswering"),Put.forEach(t),WQo=r(tke," (YOSO model)"),tke.forEach(t),X.forEach(t),QQo=i(ca),Z4=n(ca,"P",{});var ake=s(Z4);HQo=r(ake,"The model is set in evaluation mode by default using "),ype=n(ake,"CODE",{});var But=s(ype);UQo=r(But,"model.eval()"),But.forEach(t),JQo=r(ake,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lpe=n(ake,"CODE",{});var Iut=s(Lpe);YQo=r(Iut,"model.train()"),Iut.forEach(t),ake.forEach(t),KQo=i(ca),T(ev.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),BNe=i(f),od=n(f,"H2",{class:!0});var jDe=s(od);ov=n(jDe,"A",{id:!0,class:!0,href:!0});var qut=s(ov);xpe=n(qut,"SPAN",{});var Nut=s(xpe);T(JA.$$.fragment,Nut),Nut.forEach(t),qut.forEach(t),ZQo=i(jDe),$pe=n(jDe,"SPAN",{});var jut=s($pe);eHo=r(jut,"AutoModelForTableQuestionAnswering"),jut.forEach(t),jDe.forEach(t),INe=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(YA.$$.fragment,Ks),oHo=i(Ks),rd=n(Ks,"P",{});var qZ=s(rd);rHo=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uX=n(qZ,"A",{href:!0});var Dut=s(uX);tHo=r(Dut,"from_pretrained()"),Dut.forEach(t),aHo=r(qZ," class method or the "),_X=n(qZ,"A",{href:!0});var Gut=s(_X);nHo=r(Gut,"from_config()"),Gut.forEach(t),sHo=r(qZ,` class
method.`),qZ.forEach(t),lHo=i(Ks),KA=n(Ks,"P",{});var DDe=s(KA);iHo=r(DDe,"This class cannot be instantiated directly using "),kpe=n(DDe,"CODE",{});var Out=s(kpe);dHo=r(Out,"__init__()"),Out.forEach(t),cHo=r(DDe," (throws an error)."),DDe.forEach(t),fHo=i(Ks),gt=n(Ks,"DIV",{class:!0});var Kw=s(gt);T(ZA.$$.fragment,Kw),mHo=i(Kw),Spe=n(Kw,"P",{});var Vut=s(Spe);gHo=r(Vut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Vut.forEach(t),hHo=i(Kw),td=n(Kw,"P",{});var NZ=s(td);pHo=r(NZ,`Note:
Loading a model from its configuration file does `),Rpe=n(NZ,"STRONG",{});var Xut=s(Rpe);uHo=r(Xut,"not"),Xut.forEach(t),_Ho=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=n(NZ,"A",{href:!0});var zut=s(bX);bHo=r(zut,"from_pretrained()"),zut.forEach(t),vHo=r(NZ," to load the model weights."),NZ.forEach(t),FHo=i(Kw),T(rv.$$.fragment,Kw),Kw.forEach(t),THo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(ey.$$.fragment,fa),MHo=i(fa),Ppe=n(fa,"P",{});var Wut=s(Ppe);EHo=r(Wut,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Wut.forEach(t),CHo=i(fa),Na=n(fa,"P",{});var Zw=s(Na);wHo=r(Zw,"The model class to instantiate is selected based on the "),Bpe=n(Zw,"CODE",{});var Qut=s(Bpe);AHo=r(Qut,"model_type"),Qut.forEach(t),yHo=r(Zw,` property of the config object (either
passed as an argument or loaded from `),Ipe=n(Zw,"CODE",{});var Hut=s(Ipe);LHo=r(Hut,"pretrained_model_name_or_path"),Hut.forEach(t),xHo=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=n(Zw,"CODE",{});var Uut=s(qpe);$Ho=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),kHo=r(Zw,":"),Zw.forEach(t),SHo=i(fa),Npe=n(fa,"UL",{});var Jut=s(Npe);tv=n(Jut,"LI",{});var nke=s(tv);jpe=n(nke,"STRONG",{});var Yut=s(jpe);RHo=r(Yut,"tapas"),Yut.forEach(t),PHo=r(nke," \u2014 "),vX=n(nke,"A",{href:!0});var Kut=s(vX);BHo=r(Kut,"TapasForQuestionAnswering"),Kut.forEach(t),IHo=r(nke," (TAPAS model)"),nke.forEach(t),Jut.forEach(t),qHo=i(fa),av=n(fa,"P",{});var ske=s(av);NHo=r(ske,"The model is set in evaluation mode by default using "),Dpe=n(ske,"CODE",{});var Zut=s(Dpe);jHo=r(Zut,"model.eval()"),Zut.forEach(t),DHo=r(ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=n(ske,"CODE",{});var e_t=s(Gpe);GHo=r(e_t,"model.train()"),e_t.forEach(t),ske.forEach(t),OHo=i(fa),T(nv.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),qNe=i(f),ad=n(f,"H2",{class:!0});var GDe=s(ad);sv=n(GDe,"A",{id:!0,class:!0,href:!0});var o_t=s(sv);Ope=n(o_t,"SPAN",{});var r_t=s(Ope);T(oy.$$.fragment,r_t),r_t.forEach(t),o_t.forEach(t),VHo=i(GDe),Vpe=n(GDe,"SPAN",{});var t_t=s(Vpe);XHo=r(t_t,"AutoModelForImageClassification"),t_t.forEach(t),GDe.forEach(t),NNe=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(ry.$$.fragment,Zs),zHo=i(Zs),nd=n(Zs,"P",{});var jZ=s(nd);WHo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FX=n(jZ,"A",{href:!0});var a_t=s(FX);QHo=r(a_t,"from_pretrained()"),a_t.forEach(t),HHo=r(jZ," class method or the "),TX=n(jZ,"A",{href:!0});var n_t=s(TX);UHo=r(n_t,"from_config()"),n_t.forEach(t),JHo=r(jZ,` class
method.`),jZ.forEach(t),YHo=i(Zs),ty=n(Zs,"P",{});var ODe=s(ty);KHo=r(ODe,"This class cannot be instantiated directly using "),Xpe=n(ODe,"CODE",{});var s_t=s(Xpe);ZHo=r(s_t,"__init__()"),s_t.forEach(t),eUo=r(ODe," (throws an error)."),ODe.forEach(t),oUo=i(Zs),ht=n(Zs,"DIV",{class:!0});var e0=s(ht);T(ay.$$.fragment,e0),rUo=i(e0),zpe=n(e0,"P",{});var l_t=s(zpe);tUo=r(l_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),l_t.forEach(t),aUo=i(e0),sd=n(e0,"P",{});var DZ=s(sd);nUo=r(DZ,`Note:
Loading a model from its configuration file does `),Wpe=n(DZ,"STRONG",{});var i_t=s(Wpe);sUo=r(i_t,"not"),i_t.forEach(t),lUo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(DZ,"A",{href:!0});var d_t=s(MX);iUo=r(d_t,"from_pretrained()"),d_t.forEach(t),dUo=r(DZ," to load the model weights."),DZ.forEach(t),cUo=i(e0),T(lv.$$.fragment,e0),e0.forEach(t),fUo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(ny.$$.fragment,ma),mUo=i(ma),Qpe=n(ma,"P",{});var c_t=s(Qpe);gUo=r(c_t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),c_t.forEach(t),hUo=i(ma),ja=n(ma,"P",{});var o0=s(ja);pUo=r(o0,"The model class to instantiate is selected based on the "),Hpe=n(o0,"CODE",{});var f_t=s(Hpe);uUo=r(f_t,"model_type"),f_t.forEach(t),_Uo=r(o0,` property of the config object (either
passed as an argument or loaded from `),Upe=n(o0,"CODE",{});var m_t=s(Upe);bUo=r(m_t,"pretrained_model_name_or_path"),m_t.forEach(t),vUo=r(o0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=n(o0,"CODE",{});var g_t=s(Jpe);FUo=r(g_t,"pretrained_model_name_or_path"),g_t.forEach(t),TUo=r(o0,":"),o0.forEach(t),MUo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);iv=n(Te,"LI",{});var lke=s(iv);Ype=n(lke,"STRONG",{});var h_t=s(Ype);EUo=r(h_t,"beit"),h_t.forEach(t),CUo=r(lke," \u2014 "),EX=n(lke,"A",{href:!0});var p_t=s(EX);wUo=r(p_t,"BeitForImageClassification"),p_t.forEach(t),AUo=r(lke," (BEiT model)"),lke.forEach(t),yUo=i(Te),dv=n(Te,"LI",{});var ike=s(dv);Kpe=n(ike,"STRONG",{});var u_t=s(Kpe);LUo=r(u_t,"convnext"),u_t.forEach(t),xUo=r(ike," \u2014 "),CX=n(ike,"A",{href:!0});var __t=s(CX);$Uo=r(__t,"ConvNextForImageClassification"),__t.forEach(t),kUo=r(ike," (ConvNext model)"),ike.forEach(t),SUo=i(Te),cv=n(Te,"LI",{});var dke=s(cv);Zpe=n(dke,"STRONG",{});var b_t=s(Zpe);RUo=r(b_t,"cvt"),b_t.forEach(t),PUo=r(dke," \u2014 "),wX=n(dke,"A",{href:!0});var v_t=s(wX);BUo=r(v_t,"CvtForImageClassification"),v_t.forEach(t),IUo=r(dke," (CvT model)"),dke.forEach(t),qUo=i(Te),fv=n(Te,"LI",{});var cke=s(fv);eue=n(cke,"STRONG",{});var F_t=s(eue);NUo=r(F_t,"data2vec-vision"),F_t.forEach(t),jUo=r(cke," \u2014 "),AX=n(cke,"A",{href:!0});var T_t=s(AX);DUo=r(T_t,"Data2VecVisionForImageClassification"),T_t.forEach(t),GUo=r(cke," (Data2VecVision model)"),cke.forEach(t),OUo=i(Te),Bs=n(Te,"LI",{});var X$=s(Bs);oue=n(X$,"STRONG",{});var M_t=s(oue);VUo=r(M_t,"deit"),M_t.forEach(t),XUo=r(X$," \u2014 "),yX=n(X$,"A",{href:!0});var E_t=s(yX);zUo=r(E_t,"DeiTForImageClassification"),E_t.forEach(t),WUo=r(X$," or "),LX=n(X$,"A",{href:!0});var C_t=s(LX);QUo=r(C_t,"DeiTForImageClassificationWithTeacher"),C_t.forEach(t),HUo=r(X$," (DeiT model)"),X$.forEach(t),UUo=i(Te),mv=n(Te,"LI",{});var fke=s(mv);rue=n(fke,"STRONG",{});var w_t=s(rue);JUo=r(w_t,"imagegpt"),w_t.forEach(t),YUo=r(fke," \u2014 "),xX=n(fke,"A",{href:!0});var A_t=s(xX);KUo=r(A_t,"ImageGPTForImageClassification"),A_t.forEach(t),ZUo=r(fke," (ImageGPT model)"),fke.forEach(t),eJo=i(Te),pt=n(Te,"LI",{});var hf=s(pt);tue=n(hf,"STRONG",{});var y_t=s(tue);oJo=r(y_t,"perceiver"),y_t.forEach(t),rJo=r(hf," \u2014 "),$X=n(hf,"A",{href:!0});var L_t=s($X);tJo=r(L_t,"PerceiverForImageClassificationLearned"),L_t.forEach(t),aJo=r(hf," or "),kX=n(hf,"A",{href:!0});var x_t=s(kX);nJo=r(x_t,"PerceiverForImageClassificationFourier"),x_t.forEach(t),sJo=r(hf," or "),SX=n(hf,"A",{href:!0});var $_t=s(SX);lJo=r($_t,"PerceiverForImageClassificationConvProcessing"),$_t.forEach(t),iJo=r(hf," (Perceiver model)"),hf.forEach(t),dJo=i(Te),gv=n(Te,"LI",{});var mke=s(gv);aue=n(mke,"STRONG",{});var k_t=s(aue);cJo=r(k_t,"poolformer"),k_t.forEach(t),fJo=r(mke," \u2014 "),RX=n(mke,"A",{href:!0});var S_t=s(RX);mJo=r(S_t,"PoolFormerForImageClassification"),S_t.forEach(t),gJo=r(mke," (PoolFormer model)"),mke.forEach(t),hJo=i(Te),hv=n(Te,"LI",{});var gke=s(hv);nue=n(gke,"STRONG",{});var R_t=s(nue);pJo=r(R_t,"regnet"),R_t.forEach(t),uJo=r(gke," \u2014 "),PX=n(gke,"A",{href:!0});var P_t=s(PX);_Jo=r(P_t,"RegNetForImageClassification"),P_t.forEach(t),bJo=r(gke," (RegNet model)"),gke.forEach(t),vJo=i(Te),pv=n(Te,"LI",{});var hke=s(pv);sue=n(hke,"STRONG",{});var B_t=s(sue);FJo=r(B_t,"resnet"),B_t.forEach(t),TJo=r(hke," \u2014 "),BX=n(hke,"A",{href:!0});var I_t=s(BX);MJo=r(I_t,"ResNetForImageClassification"),I_t.forEach(t),EJo=r(hke," (ResNet model)"),hke.forEach(t),CJo=i(Te),uv=n(Te,"LI",{});var pke=s(uv);lue=n(pke,"STRONG",{});var q_t=s(lue);wJo=r(q_t,"segformer"),q_t.forEach(t),AJo=r(pke," \u2014 "),IX=n(pke,"A",{href:!0});var N_t=s(IX);yJo=r(N_t,"SegformerForImageClassification"),N_t.forEach(t),LJo=r(pke," (SegFormer model)"),pke.forEach(t),xJo=i(Te),_v=n(Te,"LI",{});var uke=s(_v);iue=n(uke,"STRONG",{});var j_t=s(iue);$Jo=r(j_t,"swin"),j_t.forEach(t),kJo=r(uke," \u2014 "),qX=n(uke,"A",{href:!0});var D_t=s(qX);SJo=r(D_t,"SwinForImageClassification"),D_t.forEach(t),RJo=r(uke," (Swin model)"),uke.forEach(t),PJo=i(Te),bv=n(Te,"LI",{});var _ke=s(bv);due=n(_ke,"STRONG",{});var G_t=s(due);BJo=r(G_t,"van"),G_t.forEach(t),IJo=r(_ke," \u2014 "),NX=n(_ke,"A",{href:!0});var O_t=s(NX);qJo=r(O_t,"VanForImageClassification"),O_t.forEach(t),NJo=r(_ke," (VAN model)"),_ke.forEach(t),jJo=i(Te),vv=n(Te,"LI",{});var bke=s(vv);cue=n(bke,"STRONG",{});var V_t=s(cue);DJo=r(V_t,"vit"),V_t.forEach(t),GJo=r(bke," \u2014 "),jX=n(bke,"A",{href:!0});var X_t=s(jX);OJo=r(X_t,"ViTForImageClassification"),X_t.forEach(t),VJo=r(bke," (ViT model)"),bke.forEach(t),Te.forEach(t),XJo=i(ma),Fv=n(ma,"P",{});var vke=s(Fv);zJo=r(vke,"The model is set in evaluation mode by default using "),fue=n(vke,"CODE",{});var z_t=s(fue);WJo=r(z_t,"model.eval()"),z_t.forEach(t),QJo=r(vke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mue=n(vke,"CODE",{});var W_t=s(mue);HJo=r(W_t,"model.train()"),W_t.forEach(t),vke.forEach(t),UJo=i(ma),T(Tv.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),jNe=i(f),ld=n(f,"H2",{class:!0});var VDe=s(ld);Mv=n(VDe,"A",{id:!0,class:!0,href:!0});var Q_t=s(Mv);gue=n(Q_t,"SPAN",{});var H_t=s(gue);T(sy.$$.fragment,H_t),H_t.forEach(t),Q_t.forEach(t),JJo=i(VDe),hue=n(VDe,"SPAN",{});var U_t=s(hue);YJo=r(U_t,"AutoModelForVision2Seq"),U_t.forEach(t),VDe.forEach(t),DNe=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(ly.$$.fragment,el),KJo=i(el),id=n(el,"P",{});var GZ=s(id);ZJo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DX=n(GZ,"A",{href:!0});var J_t=s(DX);eYo=r(J_t,"from_pretrained()"),J_t.forEach(t),oYo=r(GZ," class method or the "),GX=n(GZ,"A",{href:!0});var Y_t=s(GX);rYo=r(Y_t,"from_config()"),Y_t.forEach(t),tYo=r(GZ,` class
method.`),GZ.forEach(t),aYo=i(el),iy=n(el,"P",{});var XDe=s(iy);nYo=r(XDe,"This class cannot be instantiated directly using "),pue=n(XDe,"CODE",{});var K_t=s(pue);sYo=r(K_t,"__init__()"),K_t.forEach(t),lYo=r(XDe," (throws an error)."),XDe.forEach(t),iYo=i(el),ut=n(el,"DIV",{class:!0});var r0=s(ut);T(dy.$$.fragment,r0),dYo=i(r0),uue=n(r0,"P",{});var Z_t=s(uue);cYo=r(Z_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Z_t.forEach(t),fYo=i(r0),dd=n(r0,"P",{});var OZ=s(dd);mYo=r(OZ,`Note:
Loading a model from its configuration file does `),_ue=n(OZ,"STRONG",{});var e1t=s(_ue);gYo=r(e1t,"not"),e1t.forEach(t),hYo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(OZ,"A",{href:!0});var o1t=s(OX);pYo=r(o1t,"from_pretrained()"),o1t.forEach(t),uYo=r(OZ," to load the model weights."),OZ.forEach(t),_Yo=i(r0),T(Ev.$$.fragment,r0),r0.forEach(t),bYo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(cy.$$.fragment,ga),vYo=i(ga),bue=n(ga,"P",{});var r1t=s(bue);FYo=r(r1t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),r1t.forEach(t),TYo=i(ga),Da=n(ga,"P",{});var t0=s(Da);MYo=r(t0,"The model class to instantiate is selected based on the "),vue=n(t0,"CODE",{});var t1t=s(vue);EYo=r(t1t,"model_type"),t1t.forEach(t),CYo=r(t0,` property of the config object (either
passed as an argument or loaded from `),Fue=n(t0,"CODE",{});var a1t=s(Fue);wYo=r(a1t,"pretrained_model_name_or_path"),a1t.forEach(t),AYo=r(t0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=n(t0,"CODE",{});var n1t=s(Tue);yYo=r(n1t,"pretrained_model_name_or_path"),n1t.forEach(t),LYo=r(t0,":"),t0.forEach(t),xYo=i(ga),Mue=n(ga,"UL",{});var s1t=s(Mue);Cv=n(s1t,"LI",{});var Fke=s(Cv);Eue=n(Fke,"STRONG",{});var l1t=s(Eue);$Yo=r(l1t,"vision-encoder-decoder"),l1t.forEach(t),kYo=r(Fke," \u2014 "),VX=n(Fke,"A",{href:!0});var i1t=s(VX);SYo=r(i1t,"VisionEncoderDecoderModel"),i1t.forEach(t),RYo=r(Fke," (Vision Encoder decoder model)"),Fke.forEach(t),s1t.forEach(t),PYo=i(ga),wv=n(ga,"P",{});var Tke=s(wv);BYo=r(Tke,"The model is set in evaluation mode by default using "),Cue=n(Tke,"CODE",{});var d1t=s(Cue);IYo=r(d1t,"model.eval()"),d1t.forEach(t),qYo=r(Tke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=n(Tke,"CODE",{});var c1t=s(wue);NYo=r(c1t,"model.train()"),c1t.forEach(t),Tke.forEach(t),jYo=i(ga),T(Av.$$.fragment,ga),ga.forEach(t),el.forEach(t),GNe=i(f),cd=n(f,"H2",{class:!0});var zDe=s(cd);yv=n(zDe,"A",{id:!0,class:!0,href:!0});var f1t=s(yv);Aue=n(f1t,"SPAN",{});var m1t=s(Aue);T(fy.$$.fragment,m1t),m1t.forEach(t),f1t.forEach(t),DYo=i(zDe),yue=n(zDe,"SPAN",{});var g1t=s(yue);GYo=r(g1t,"AutoModelForAudioClassification"),g1t.forEach(t),zDe.forEach(t),ONe=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(my.$$.fragment,ol),OYo=i(ol),fd=n(ol,"P",{});var VZ=s(fd);VYo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),XX=n(VZ,"A",{href:!0});var h1t=s(XX);XYo=r(h1t,"from_pretrained()"),h1t.forEach(t),zYo=r(VZ," class method or the "),zX=n(VZ,"A",{href:!0});var p1t=s(zX);WYo=r(p1t,"from_config()"),p1t.forEach(t),QYo=r(VZ,` class
method.`),VZ.forEach(t),HYo=i(ol),gy=n(ol,"P",{});var WDe=s(gy);UYo=r(WDe,"This class cannot be instantiated directly using "),Lue=n(WDe,"CODE",{});var u1t=s(Lue);JYo=r(u1t,"__init__()"),u1t.forEach(t),YYo=r(WDe," (throws an error)."),WDe.forEach(t),KYo=i(ol),_t=n(ol,"DIV",{class:!0});var a0=s(_t);T(hy.$$.fragment,a0),ZYo=i(a0),xue=n(a0,"P",{});var _1t=s(xue);eKo=r(_1t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),_1t.forEach(t),oKo=i(a0),md=n(a0,"P",{});var XZ=s(md);rKo=r(XZ,`Note:
Loading a model from its configuration file does `),$ue=n(XZ,"STRONG",{});var b1t=s($ue);tKo=r(b1t,"not"),b1t.forEach(t),aKo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(XZ,"A",{href:!0});var v1t=s(WX);nKo=r(v1t,"from_pretrained()"),v1t.forEach(t),sKo=r(XZ," to load the model weights."),XZ.forEach(t),lKo=i(a0),T(Lv.$$.fragment,a0),a0.forEach(t),iKo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(py.$$.fragment,ha),dKo=i(ha),kue=n(ha,"P",{});var F1t=s(kue);cKo=r(F1t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),F1t.forEach(t),fKo=i(ha),Ga=n(ha,"P",{});var n0=s(Ga);mKo=r(n0,"The model class to instantiate is selected based on the "),Sue=n(n0,"CODE",{});var T1t=s(Sue);gKo=r(T1t,"model_type"),T1t.forEach(t),hKo=r(n0,` property of the config object (either
passed as an argument or loaded from `),Rue=n(n0,"CODE",{});var M1t=s(Rue);pKo=r(M1t,"pretrained_model_name_or_path"),M1t.forEach(t),uKo=r(n0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=n(n0,"CODE",{});var E1t=s(Pue);_Ko=r(E1t,"pretrained_model_name_or_path"),E1t.forEach(t),bKo=r(n0,":"),n0.forEach(t),vKo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);xv=n(Oe,"LI",{});var Mke=s(xv);Bue=n(Mke,"STRONG",{});var C1t=s(Bue);FKo=r(C1t,"data2vec-audio"),C1t.forEach(t),TKo=r(Mke," \u2014 "),QX=n(Mke,"A",{href:!0});var w1t=s(QX);MKo=r(w1t,"Data2VecAudioForSequenceClassification"),w1t.forEach(t),EKo=r(Mke," (Data2VecAudio model)"),Mke.forEach(t),CKo=i(Oe),$v=n(Oe,"LI",{});var Eke=s($v);Iue=n(Eke,"STRONG",{});var A1t=s(Iue);wKo=r(A1t,"hubert"),A1t.forEach(t),AKo=r(Eke," \u2014 "),HX=n(Eke,"A",{href:!0});var y1t=s(HX);yKo=r(y1t,"HubertForSequenceClassification"),y1t.forEach(t),LKo=r(Eke," (Hubert model)"),Eke.forEach(t),xKo=i(Oe),kv=n(Oe,"LI",{});var Cke=s(kv);que=n(Cke,"STRONG",{});var L1t=s(que);$Ko=r(L1t,"sew"),L1t.forEach(t),kKo=r(Cke," \u2014 "),UX=n(Cke,"A",{href:!0});var x1t=s(UX);SKo=r(x1t,"SEWForSequenceClassification"),x1t.forEach(t),RKo=r(Cke," (SEW model)"),Cke.forEach(t),PKo=i(Oe),Sv=n(Oe,"LI",{});var wke=s(Sv);Nue=n(wke,"STRONG",{});var $1t=s(Nue);BKo=r($1t,"sew-d"),$1t.forEach(t),IKo=r(wke," \u2014 "),JX=n(wke,"A",{href:!0});var k1t=s(JX);qKo=r(k1t,"SEWDForSequenceClassification"),k1t.forEach(t),NKo=r(wke," (SEW-D model)"),wke.forEach(t),jKo=i(Oe),Rv=n(Oe,"LI",{});var Ake=s(Rv);jue=n(Ake,"STRONG",{});var S1t=s(jue);DKo=r(S1t,"unispeech"),S1t.forEach(t),GKo=r(Ake," \u2014 "),YX=n(Ake,"A",{href:!0});var R1t=s(YX);OKo=r(R1t,"UniSpeechForSequenceClassification"),R1t.forEach(t),VKo=r(Ake," (UniSpeech model)"),Ake.forEach(t),XKo=i(Oe),Pv=n(Oe,"LI",{});var yke=s(Pv);Due=n(yke,"STRONG",{});var P1t=s(Due);zKo=r(P1t,"unispeech-sat"),P1t.forEach(t),WKo=r(yke," \u2014 "),KX=n(yke,"A",{href:!0});var B1t=s(KX);QKo=r(B1t,"UniSpeechSatForSequenceClassification"),B1t.forEach(t),HKo=r(yke," (UniSpeechSat model)"),yke.forEach(t),UKo=i(Oe),Bv=n(Oe,"LI",{});var Lke=s(Bv);Gue=n(Lke,"STRONG",{});var I1t=s(Gue);JKo=r(I1t,"wav2vec2"),I1t.forEach(t),YKo=r(Lke," \u2014 "),ZX=n(Lke,"A",{href:!0});var q1t=s(ZX);KKo=r(q1t,"Wav2Vec2ForSequenceClassification"),q1t.forEach(t),ZKo=r(Lke," (Wav2Vec2 model)"),Lke.forEach(t),eZo=i(Oe),Iv=n(Oe,"LI",{});var xke=s(Iv);Oue=n(xke,"STRONG",{});var N1t=s(Oue);oZo=r(N1t,"wav2vec2-conformer"),N1t.forEach(t),rZo=r(xke," \u2014 "),ez=n(xke,"A",{href:!0});var j1t=s(ez);tZo=r(j1t,"Wav2Vec2ConformerForSequenceClassification"),j1t.forEach(t),aZo=r(xke," (Wav2Vec2-Conformer model)"),xke.forEach(t),nZo=i(Oe),qv=n(Oe,"LI",{});var $ke=s(qv);Vue=n($ke,"STRONG",{});var D1t=s(Vue);sZo=r(D1t,"wavlm"),D1t.forEach(t),lZo=r($ke," \u2014 "),oz=n($ke,"A",{href:!0});var G1t=s(oz);iZo=r(G1t,"WavLMForSequenceClassification"),G1t.forEach(t),dZo=r($ke," (WavLM model)"),$ke.forEach(t),Oe.forEach(t),cZo=i(ha),Nv=n(ha,"P",{});var kke=s(Nv);fZo=r(kke,"The model is set in evaluation mode by default using "),Xue=n(kke,"CODE",{});var O1t=s(Xue);mZo=r(O1t,"model.eval()"),O1t.forEach(t),gZo=r(kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=n(kke,"CODE",{});var V1t=s(zue);hZo=r(V1t,"model.train()"),V1t.forEach(t),kke.forEach(t),pZo=i(ha),T(jv.$$.fragment,ha),ha.forEach(t),ol.forEach(t),VNe=i(f),gd=n(f,"H2",{class:!0});var QDe=s(gd);Dv=n(QDe,"A",{id:!0,class:!0,href:!0});var X1t=s(Dv);Wue=n(X1t,"SPAN",{});var z1t=s(Wue);T(uy.$$.fragment,z1t),z1t.forEach(t),X1t.forEach(t),uZo=i(QDe),Que=n(QDe,"SPAN",{});var W1t=s(Que);_Zo=r(W1t,"AutoModelForAudioFrameClassification"),W1t.forEach(t),QDe.forEach(t),XNe=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(_y.$$.fragment,rl),bZo=i(rl),hd=n(rl,"P",{});var zZ=s(hd);vZo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rz=n(zZ,"A",{href:!0});var Q1t=s(rz);FZo=r(Q1t,"from_pretrained()"),Q1t.forEach(t),TZo=r(zZ," class method or the "),tz=n(zZ,"A",{href:!0});var H1t=s(tz);MZo=r(H1t,"from_config()"),H1t.forEach(t),EZo=r(zZ,` class
method.`),zZ.forEach(t),CZo=i(rl),by=n(rl,"P",{});var HDe=s(by);wZo=r(HDe,"This class cannot be instantiated directly using "),Hue=n(HDe,"CODE",{});var U1t=s(Hue);AZo=r(U1t,"__init__()"),U1t.forEach(t),yZo=r(HDe," (throws an error)."),HDe.forEach(t),LZo=i(rl),bt=n(rl,"DIV",{class:!0});var s0=s(bt);T(vy.$$.fragment,s0),xZo=i(s0),Uue=n(s0,"P",{});var J1t=s(Uue);$Zo=r(J1t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),J1t.forEach(t),kZo=i(s0),pd=n(s0,"P",{});var WZ=s(pd);SZo=r(WZ,`Note:
Loading a model from its configuration file does `),Jue=n(WZ,"STRONG",{});var Y1t=s(Jue);RZo=r(Y1t,"not"),Y1t.forEach(t),PZo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),az=n(WZ,"A",{href:!0});var K1t=s(az);BZo=r(K1t,"from_pretrained()"),K1t.forEach(t),IZo=r(WZ," to load the model weights."),WZ.forEach(t),qZo=i(s0),T(Gv.$$.fragment,s0),s0.forEach(t),NZo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(Fy.$$.fragment,pa),jZo=i(pa),Yue=n(pa,"P",{});var Z1t=s(Yue);DZo=r(Z1t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Z1t.forEach(t),GZo=i(pa),Oa=n(pa,"P",{});var l0=s(Oa);OZo=r(l0,"The model class to instantiate is selected based on the "),Kue=n(l0,"CODE",{});var e9t=s(Kue);VZo=r(e9t,"model_type"),e9t.forEach(t),XZo=r(l0,` property of the config object (either
passed as an argument or loaded from `),Zue=n(l0,"CODE",{});var o9t=s(Zue);zZo=r(o9t,"pretrained_model_name_or_path"),o9t.forEach(t),WZo=r(l0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=n(l0,"CODE",{});var r9t=s(e_e);QZo=r(r9t,"pretrained_model_name_or_path"),r9t.forEach(t),HZo=r(l0,":"),l0.forEach(t),UZo=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);Ov=n(tl,"LI",{});var Ske=s(Ov);o_e=n(Ske,"STRONG",{});var t9t=s(o_e);JZo=r(t9t,"data2vec-audio"),t9t.forEach(t),YZo=r(Ske," \u2014 "),nz=n(Ske,"A",{href:!0});var a9t=s(nz);KZo=r(a9t,"Data2VecAudioForAudioFrameClassification"),a9t.forEach(t),ZZo=r(Ske," (Data2VecAudio model)"),Ske.forEach(t),eer=i(tl),Vv=n(tl,"LI",{});var Rke=s(Vv);r_e=n(Rke,"STRONG",{});var n9t=s(r_e);oer=r(n9t,"unispeech-sat"),n9t.forEach(t),rer=r(Rke," \u2014 "),sz=n(Rke,"A",{href:!0});var s9t=s(sz);ter=r(s9t,"UniSpeechSatForAudioFrameClassification"),s9t.forEach(t),aer=r(Rke," (UniSpeechSat model)"),Rke.forEach(t),ner=i(tl),Xv=n(tl,"LI",{});var Pke=s(Xv);t_e=n(Pke,"STRONG",{});var l9t=s(t_e);ser=r(l9t,"wav2vec2"),l9t.forEach(t),ler=r(Pke," \u2014 "),lz=n(Pke,"A",{href:!0});var i9t=s(lz);ier=r(i9t,"Wav2Vec2ForAudioFrameClassification"),i9t.forEach(t),der=r(Pke," (Wav2Vec2 model)"),Pke.forEach(t),cer=i(tl),zv=n(tl,"LI",{});var Bke=s(zv);a_e=n(Bke,"STRONG",{});var d9t=s(a_e);fer=r(d9t,"wav2vec2-conformer"),d9t.forEach(t),mer=r(Bke," \u2014 "),iz=n(Bke,"A",{href:!0});var c9t=s(iz);ger=r(c9t,"Wav2Vec2ConformerForAudioFrameClassification"),c9t.forEach(t),her=r(Bke," (Wav2Vec2-Conformer model)"),Bke.forEach(t),per=i(tl),Wv=n(tl,"LI",{});var Ike=s(Wv);n_e=n(Ike,"STRONG",{});var f9t=s(n_e);uer=r(f9t,"wavlm"),f9t.forEach(t),_er=r(Ike," \u2014 "),dz=n(Ike,"A",{href:!0});var m9t=s(dz);ber=r(m9t,"WavLMForAudioFrameClassification"),m9t.forEach(t),ver=r(Ike," (WavLM model)"),Ike.forEach(t),tl.forEach(t),Fer=i(pa),Qv=n(pa,"P",{});var qke=s(Qv);Ter=r(qke,"The model is set in evaluation mode by default using "),s_e=n(qke,"CODE",{});var g9t=s(s_e);Mer=r(g9t,"model.eval()"),g9t.forEach(t),Eer=r(qke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=n(qke,"CODE",{});var h9t=s(l_e);Cer=r(h9t,"model.train()"),h9t.forEach(t),qke.forEach(t),wer=i(pa),T(Hv.$$.fragment,pa),pa.forEach(t),rl.forEach(t),zNe=i(f),ud=n(f,"H2",{class:!0});var UDe=s(ud);Uv=n(UDe,"A",{id:!0,class:!0,href:!0});var p9t=s(Uv);i_e=n(p9t,"SPAN",{});var u9t=s(i_e);T(Ty.$$.fragment,u9t),u9t.forEach(t),p9t.forEach(t),Aer=i(UDe),d_e=n(UDe,"SPAN",{});var _9t=s(d_e);yer=r(_9t,"AutoModelForCTC"),_9t.forEach(t),UDe.forEach(t),WNe=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(My.$$.fragment,al),Ler=i(al),_d=n(al,"P",{});var QZ=s(_d);xer=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cz=n(QZ,"A",{href:!0});var b9t=s(cz);$er=r(b9t,"from_pretrained()"),b9t.forEach(t),ker=r(QZ," class method or the "),fz=n(QZ,"A",{href:!0});var v9t=s(fz);Ser=r(v9t,"from_config()"),v9t.forEach(t),Rer=r(QZ,` class
method.`),QZ.forEach(t),Per=i(al),Ey=n(al,"P",{});var JDe=s(Ey);Ber=r(JDe,"This class cannot be instantiated directly using "),c_e=n(JDe,"CODE",{});var F9t=s(c_e);Ier=r(F9t,"__init__()"),F9t.forEach(t),qer=r(JDe," (throws an error)."),JDe.forEach(t),Ner=i(al),vt=n(al,"DIV",{class:!0});var i0=s(vt);T(Cy.$$.fragment,i0),jer=i(i0),f_e=n(i0,"P",{});var T9t=s(f_e);Der=r(T9t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),T9t.forEach(t),Ger=i(i0),bd=n(i0,"P",{});var HZ=s(bd);Oer=r(HZ,`Note:
Loading a model from its configuration file does `),m_e=n(HZ,"STRONG",{});var M9t=s(m_e);Ver=r(M9t,"not"),M9t.forEach(t),Xer=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=n(HZ,"A",{href:!0});var E9t=s(mz);zer=r(E9t,"from_pretrained()"),E9t.forEach(t),Wer=r(HZ," to load the model weights."),HZ.forEach(t),Qer=i(i0),T(Jv.$$.fragment,i0),i0.forEach(t),Her=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(wy.$$.fragment,ua),Uer=i(ua),g_e=n(ua,"P",{});var C9t=s(g_e);Jer=r(C9t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),C9t.forEach(t),Yer=i(ua),Va=n(ua,"P",{});var d0=s(Va);Ker=r(d0,"The model class to instantiate is selected based on the "),h_e=n(d0,"CODE",{});var w9t=s(h_e);Zer=r(w9t,"model_type"),w9t.forEach(t),eor=r(d0,` property of the config object (either
passed as an argument or loaded from `),p_e=n(d0,"CODE",{});var A9t=s(p_e);oor=r(A9t,"pretrained_model_name_or_path"),A9t.forEach(t),ror=r(d0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=n(d0,"CODE",{});var y9t=s(u_e);tor=r(y9t,"pretrained_model_name_or_path"),y9t.forEach(t),aor=r(d0,":"),d0.forEach(t),nor=i(ua),Se=n(ua,"UL",{});var Ve=s(Se);Yv=n(Ve,"LI",{});var Nke=s(Yv);__e=n(Nke,"STRONG",{});var L9t=s(__e);sor=r(L9t,"data2vec-audio"),L9t.forEach(t),lor=r(Nke," \u2014 "),gz=n(Nke,"A",{href:!0});var x9t=s(gz);ior=r(x9t,"Data2VecAudioForCTC"),x9t.forEach(t),dor=r(Nke," (Data2VecAudio model)"),Nke.forEach(t),cor=i(Ve),Kv=n(Ve,"LI",{});var jke=s(Kv);b_e=n(jke,"STRONG",{});var $9t=s(b_e);mor=r($9t,"hubert"),$9t.forEach(t),gor=r(jke," \u2014 "),hz=n(jke,"A",{href:!0});var k9t=s(hz);hor=r(k9t,"HubertForCTC"),k9t.forEach(t),por=r(jke," (Hubert model)"),jke.forEach(t),uor=i(Ve),Zv=n(Ve,"LI",{});var Dke=s(Zv);v_e=n(Dke,"STRONG",{});var S9t=s(v_e);_or=r(S9t,"sew"),S9t.forEach(t),bor=r(Dke," \u2014 "),pz=n(Dke,"A",{href:!0});var R9t=s(pz);vor=r(R9t,"SEWForCTC"),R9t.forEach(t),For=r(Dke," (SEW model)"),Dke.forEach(t),Tor=i(Ve),eF=n(Ve,"LI",{});var Gke=s(eF);F_e=n(Gke,"STRONG",{});var P9t=s(F_e);Mor=r(P9t,"sew-d"),P9t.forEach(t),Eor=r(Gke," \u2014 "),uz=n(Gke,"A",{href:!0});var B9t=s(uz);Cor=r(B9t,"SEWDForCTC"),B9t.forEach(t),wor=r(Gke," (SEW-D model)"),Gke.forEach(t),Aor=i(Ve),oF=n(Ve,"LI",{});var Oke=s(oF);T_e=n(Oke,"STRONG",{});var I9t=s(T_e);yor=r(I9t,"unispeech"),I9t.forEach(t),Lor=r(Oke," \u2014 "),_z=n(Oke,"A",{href:!0});var q9t=s(_z);xor=r(q9t,"UniSpeechForCTC"),q9t.forEach(t),$or=r(Oke," (UniSpeech model)"),Oke.forEach(t),kor=i(Ve),rF=n(Ve,"LI",{});var Vke=s(rF);M_e=n(Vke,"STRONG",{});var N9t=s(M_e);Sor=r(N9t,"unispeech-sat"),N9t.forEach(t),Ror=r(Vke," \u2014 "),bz=n(Vke,"A",{href:!0});var j9t=s(bz);Por=r(j9t,"UniSpeechSatForCTC"),j9t.forEach(t),Bor=r(Vke," (UniSpeechSat model)"),Vke.forEach(t),Ior=i(Ve),tF=n(Ve,"LI",{});var Xke=s(tF);E_e=n(Xke,"STRONG",{});var D9t=s(E_e);qor=r(D9t,"wav2vec2"),D9t.forEach(t),Nor=r(Xke," \u2014 "),vz=n(Xke,"A",{href:!0});var G9t=s(vz);jor=r(G9t,"Wav2Vec2ForCTC"),G9t.forEach(t),Dor=r(Xke," (Wav2Vec2 model)"),Xke.forEach(t),Gor=i(Ve),aF=n(Ve,"LI",{});var zke=s(aF);C_e=n(zke,"STRONG",{});var O9t=s(C_e);Oor=r(O9t,"wav2vec2-conformer"),O9t.forEach(t),Vor=r(zke," \u2014 "),Fz=n(zke,"A",{href:!0});var V9t=s(Fz);Xor=r(V9t,"Wav2Vec2ConformerForCTC"),V9t.forEach(t),zor=r(zke," (Wav2Vec2-Conformer model)"),zke.forEach(t),Wor=i(Ve),nF=n(Ve,"LI",{});var Wke=s(nF);w_e=n(Wke,"STRONG",{});var X9t=s(w_e);Qor=r(X9t,"wavlm"),X9t.forEach(t),Hor=r(Wke," \u2014 "),Tz=n(Wke,"A",{href:!0});var z9t=s(Tz);Uor=r(z9t,"WavLMForCTC"),z9t.forEach(t),Jor=r(Wke," (WavLM model)"),Wke.forEach(t),Ve.forEach(t),Yor=i(ua),sF=n(ua,"P",{});var Qke=s(sF);Kor=r(Qke,"The model is set in evaluation mode by default using "),A_e=n(Qke,"CODE",{});var W9t=s(A_e);Zor=r(W9t,"model.eval()"),W9t.forEach(t),err=r(Qke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y_e=n(Qke,"CODE",{});var Q9t=s(y_e);orr=r(Q9t,"model.train()"),Q9t.forEach(t),Qke.forEach(t),rrr=i(ua),T(lF.$$.fragment,ua),ua.forEach(t),al.forEach(t),QNe=i(f),vd=n(f,"H2",{class:!0});var YDe=s(vd);iF=n(YDe,"A",{id:!0,class:!0,href:!0});var H9t=s(iF);L_e=n(H9t,"SPAN",{});var U9t=s(L_e);T(Ay.$$.fragment,U9t),U9t.forEach(t),H9t.forEach(t),trr=i(YDe),x_e=n(YDe,"SPAN",{});var J9t=s(x_e);arr=r(J9t,"AutoModelForSpeechSeq2Seq"),J9t.forEach(t),YDe.forEach(t),HNe=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(yy.$$.fragment,nl),nrr=i(nl),Fd=n(nl,"P",{});var UZ=s(Fd);srr=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Mz=n(UZ,"A",{href:!0});var Y9t=s(Mz);lrr=r(Y9t,"from_pretrained()"),Y9t.forEach(t),irr=r(UZ," class method or the "),Ez=n(UZ,"A",{href:!0});var K9t=s(Ez);drr=r(K9t,"from_config()"),K9t.forEach(t),crr=r(UZ,` class
method.`),UZ.forEach(t),frr=i(nl),Ly=n(nl,"P",{});var KDe=s(Ly);mrr=r(KDe,"This class cannot be instantiated directly using "),$_e=n(KDe,"CODE",{});var Z9t=s($_e);grr=r(Z9t,"__init__()"),Z9t.forEach(t),hrr=r(KDe," (throws an error)."),KDe.forEach(t),prr=i(nl),Ft=n(nl,"DIV",{class:!0});var c0=s(Ft);T(xy.$$.fragment,c0),urr=i(c0),k_e=n(c0,"P",{});var ebt=s(k_e);_rr=r(ebt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ebt.forEach(t),brr=i(c0),Td=n(c0,"P",{});var JZ=s(Td);vrr=r(JZ,`Note:
Loading a model from its configuration file does `),S_e=n(JZ,"STRONG",{});var obt=s(S_e);Frr=r(obt,"not"),obt.forEach(t),Trr=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=n(JZ,"A",{href:!0});var rbt=s(Cz);Mrr=r(rbt,"from_pretrained()"),rbt.forEach(t),Err=r(JZ," to load the model weights."),JZ.forEach(t),Crr=i(c0),T(dF.$$.fragment,c0),c0.forEach(t),wrr=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T($y.$$.fragment,_a),Arr=i(_a),R_e=n(_a,"P",{});var tbt=s(R_e);yrr=r(tbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tbt.forEach(t),Lrr=i(_a),Xa=n(_a,"P",{});var f0=s(Xa);xrr=r(f0,"The model class to instantiate is selected based on the "),P_e=n(f0,"CODE",{});var abt=s(P_e);$rr=r(abt,"model_type"),abt.forEach(t),krr=r(f0,` property of the config object (either
passed as an argument or loaded from `),B_e=n(f0,"CODE",{});var nbt=s(B_e);Srr=r(nbt,"pretrained_model_name_or_path"),nbt.forEach(t),Rrr=r(f0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=n(f0,"CODE",{});var sbt=s(I_e);Prr=r(sbt,"pretrained_model_name_or_path"),sbt.forEach(t),Brr=r(f0,":"),f0.forEach(t),Irr=i(_a),ky=n(_a,"UL",{});var ZDe=s(ky);cF=n(ZDe,"LI",{});var Hke=s(cF);q_e=n(Hke,"STRONG",{});var lbt=s(q_e);qrr=r(lbt,"speech-encoder-decoder"),lbt.forEach(t),Nrr=r(Hke," \u2014 "),wz=n(Hke,"A",{href:!0});var ibt=s(wz);jrr=r(ibt,"SpeechEncoderDecoderModel"),ibt.forEach(t),Drr=r(Hke," (Speech Encoder decoder model)"),Hke.forEach(t),Grr=i(ZDe),fF=n(ZDe,"LI",{});var Uke=s(fF);N_e=n(Uke,"STRONG",{});var dbt=s(N_e);Orr=r(dbt,"speech_to_text"),dbt.forEach(t),Vrr=r(Uke," \u2014 "),Az=n(Uke,"A",{href:!0});var cbt=s(Az);Xrr=r(cbt,"Speech2TextForConditionalGeneration"),cbt.forEach(t),zrr=r(Uke," (Speech2Text model)"),Uke.forEach(t),ZDe.forEach(t),Wrr=i(_a),mF=n(_a,"P",{});var Jke=s(mF);Qrr=r(Jke,"The model is set in evaluation mode by default using "),j_e=n(Jke,"CODE",{});var fbt=s(j_e);Hrr=r(fbt,"model.eval()"),fbt.forEach(t),Urr=r(Jke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=n(Jke,"CODE",{});var mbt=s(D_e);Jrr=r(mbt,"model.train()"),mbt.forEach(t),Jke.forEach(t),Yrr=i(_a),T(gF.$$.fragment,_a),_a.forEach(t),nl.forEach(t),UNe=i(f),Md=n(f,"H2",{class:!0});var eGe=s(Md);hF=n(eGe,"A",{id:!0,class:!0,href:!0});var gbt=s(hF);G_e=n(gbt,"SPAN",{});var hbt=s(G_e);T(Sy.$$.fragment,hbt),hbt.forEach(t),gbt.forEach(t),Krr=i(eGe),O_e=n(eGe,"SPAN",{});var pbt=s(O_e);Zrr=r(pbt,"AutoModelForAudioXVector"),pbt.forEach(t),eGe.forEach(t),JNe=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(Ry.$$.fragment,sl),etr=i(sl),Ed=n(sl,"P",{});var YZ=s(Ed);otr=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yz=n(YZ,"A",{href:!0});var ubt=s(yz);rtr=r(ubt,"from_pretrained()"),ubt.forEach(t),ttr=r(YZ," class method or the "),Lz=n(YZ,"A",{href:!0});var _bt=s(Lz);atr=r(_bt,"from_config()"),_bt.forEach(t),ntr=r(YZ,` class
method.`),YZ.forEach(t),str=i(sl),Py=n(sl,"P",{});var oGe=s(Py);ltr=r(oGe,"This class cannot be instantiated directly using "),V_e=n(oGe,"CODE",{});var bbt=s(V_e);itr=r(bbt,"__init__()"),bbt.forEach(t),dtr=r(oGe," (throws an error)."),oGe.forEach(t),ctr=i(sl),Tt=n(sl,"DIV",{class:!0});var m0=s(Tt);T(By.$$.fragment,m0),ftr=i(m0),X_e=n(m0,"P",{});var vbt=s(X_e);mtr=r(vbt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),vbt.forEach(t),gtr=i(m0),Cd=n(m0,"P",{});var KZ=s(Cd);htr=r(KZ,`Note:
Loading a model from its configuration file does `),z_e=n(KZ,"STRONG",{});var Fbt=s(z_e);ptr=r(Fbt,"not"),Fbt.forEach(t),utr=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=n(KZ,"A",{href:!0});var Tbt=s(xz);_tr=r(Tbt,"from_pretrained()"),Tbt.forEach(t),btr=r(KZ," to load the model weights."),KZ.forEach(t),vtr=i(m0),T(pF.$$.fragment,m0),m0.forEach(t),Ftr=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(Iy.$$.fragment,ba),Ttr=i(ba),W_e=n(ba,"P",{});var Mbt=s(W_e);Mtr=r(Mbt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Mbt.forEach(t),Etr=i(ba),za=n(ba,"P",{});var g0=s(za);Ctr=r(g0,"The model class to instantiate is selected based on the "),Q_e=n(g0,"CODE",{});var Ebt=s(Q_e);wtr=r(Ebt,"model_type"),Ebt.forEach(t),Atr=r(g0,` property of the config object (either
passed as an argument or loaded from `),H_e=n(g0,"CODE",{});var Cbt=s(H_e);ytr=r(Cbt,"pretrained_model_name_or_path"),Cbt.forEach(t),Ltr=r(g0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=n(g0,"CODE",{});var wbt=s(U_e);xtr=r(wbt,"pretrained_model_name_or_path"),wbt.forEach(t),$tr=r(g0,":"),g0.forEach(t),ktr=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);uF=n(ll,"LI",{});var Yke=s(uF);J_e=n(Yke,"STRONG",{});var Abt=s(J_e);Str=r(Abt,"data2vec-audio"),Abt.forEach(t),Rtr=r(Yke," \u2014 "),$z=n(Yke,"A",{href:!0});var ybt=s($z);Ptr=r(ybt,"Data2VecAudioForXVector"),ybt.forEach(t),Btr=r(Yke," (Data2VecAudio model)"),Yke.forEach(t),Itr=i(ll),_F=n(ll,"LI",{});var Kke=s(_F);Y_e=n(Kke,"STRONG",{});var Lbt=s(Y_e);qtr=r(Lbt,"unispeech-sat"),Lbt.forEach(t),Ntr=r(Kke," \u2014 "),kz=n(Kke,"A",{href:!0});var xbt=s(kz);jtr=r(xbt,"UniSpeechSatForXVector"),xbt.forEach(t),Dtr=r(Kke," (UniSpeechSat model)"),Kke.forEach(t),Gtr=i(ll),bF=n(ll,"LI",{});var Zke=s(bF);K_e=n(Zke,"STRONG",{});var $bt=s(K_e);Otr=r($bt,"wav2vec2"),$bt.forEach(t),Vtr=r(Zke," \u2014 "),Sz=n(Zke,"A",{href:!0});var kbt=s(Sz);Xtr=r(kbt,"Wav2Vec2ForXVector"),kbt.forEach(t),ztr=r(Zke," (Wav2Vec2 model)"),Zke.forEach(t),Wtr=i(ll),vF=n(ll,"LI",{});var eSe=s(vF);Z_e=n(eSe,"STRONG",{});var Sbt=s(Z_e);Qtr=r(Sbt,"wav2vec2-conformer"),Sbt.forEach(t),Htr=r(eSe," \u2014 "),Rz=n(eSe,"A",{href:!0});var Rbt=s(Rz);Utr=r(Rbt,"Wav2Vec2ConformerForXVector"),Rbt.forEach(t),Jtr=r(eSe," (Wav2Vec2-Conformer model)"),eSe.forEach(t),Ytr=i(ll),FF=n(ll,"LI",{});var oSe=s(FF);e1e=n(oSe,"STRONG",{});var Pbt=s(e1e);Ktr=r(Pbt,"wavlm"),Pbt.forEach(t),Ztr=r(oSe," \u2014 "),Pz=n(oSe,"A",{href:!0});var Bbt=s(Pz);ear=r(Bbt,"WavLMForXVector"),Bbt.forEach(t),oar=r(oSe," (WavLM model)"),oSe.forEach(t),ll.forEach(t),rar=i(ba),TF=n(ba,"P",{});var rSe=s(TF);tar=r(rSe,"The model is set in evaluation mode by default using "),o1e=n(rSe,"CODE",{});var Ibt=s(o1e);aar=r(Ibt,"model.eval()"),Ibt.forEach(t),nar=r(rSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r1e=n(rSe,"CODE",{});var qbt=s(r1e);sar=r(qbt,"model.train()"),qbt.forEach(t),rSe.forEach(t),lar=i(ba),T(MF.$$.fragment,ba),ba.forEach(t),sl.forEach(t),YNe=i(f),wd=n(f,"H2",{class:!0});var rGe=s(wd);EF=n(rGe,"A",{id:!0,class:!0,href:!0});var Nbt=s(EF);t1e=n(Nbt,"SPAN",{});var jbt=s(t1e);T(qy.$$.fragment,jbt),jbt.forEach(t),Nbt.forEach(t),iar=i(rGe),a1e=n(rGe,"SPAN",{});var Dbt=s(a1e);dar=r(Dbt,"AutoModelForMaskedImageModeling"),Dbt.forEach(t),rGe.forEach(t),KNe=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(Ny.$$.fragment,il),car=i(il),Ad=n(il,"P",{});var ZZ=s(Ad);far=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Bz=n(ZZ,"A",{href:!0});var Gbt=s(Bz);mar=r(Gbt,"from_pretrained()"),Gbt.forEach(t),gar=r(ZZ," class method or the "),Iz=n(ZZ,"A",{href:!0});var Obt=s(Iz);har=r(Obt,"from_config()"),Obt.forEach(t),par=r(ZZ,` class
method.`),ZZ.forEach(t),uar=i(il),jy=n(il,"P",{});var tGe=s(jy);_ar=r(tGe,"This class cannot be instantiated directly using "),n1e=n(tGe,"CODE",{});var Vbt=s(n1e);bar=r(Vbt,"__init__()"),Vbt.forEach(t),Far=r(tGe," (throws an error)."),tGe.forEach(t),Tar=i(il),Mt=n(il,"DIV",{class:!0});var h0=s(Mt);T(Dy.$$.fragment,h0),Mar=i(h0),s1e=n(h0,"P",{});var Xbt=s(s1e);Ear=r(Xbt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Xbt.forEach(t),Car=i(h0),yd=n(h0,"P",{});var eee=s(yd);war=r(eee,`Note:
Loading a model from its configuration file does `),l1e=n(eee,"STRONG",{});var zbt=s(l1e);Aar=r(zbt,"not"),zbt.forEach(t),yar=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=n(eee,"A",{href:!0});var Wbt=s(qz);Lar=r(Wbt,"from_pretrained()"),Wbt.forEach(t),xar=r(eee," to load the model weights."),eee.forEach(t),$ar=i(h0),T(CF.$$.fragment,h0),h0.forEach(t),kar=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(Gy.$$.fragment,va),Sar=i(va),i1e=n(va,"P",{});var Qbt=s(i1e);Rar=r(Qbt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Qbt.forEach(t),Par=i(va),Wa=n(va,"P",{});var p0=s(Wa);Bar=r(p0,"The model class to instantiate is selected based on the "),d1e=n(p0,"CODE",{});var Hbt=s(d1e);Iar=r(Hbt,"model_type"),Hbt.forEach(t),qar=r(p0,` property of the config object (either
passed as an argument or loaded from `),c1e=n(p0,"CODE",{});var Ubt=s(c1e);Nar=r(Ubt,"pretrained_model_name_or_path"),Ubt.forEach(t),jar=r(p0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=n(p0,"CODE",{});var Jbt=s(f1e);Dar=r(Jbt,"pretrained_model_name_or_path"),Jbt.forEach(t),Gar=r(p0,":"),p0.forEach(t),Oar=i(va),Ld=n(va,"UL",{});var oee=s(Ld);wF=n(oee,"LI",{});var tSe=s(wF);m1e=n(tSe,"STRONG",{});var Ybt=s(m1e);Var=r(Ybt,"deit"),Ybt.forEach(t),Xar=r(tSe," \u2014 "),Nz=n(tSe,"A",{href:!0});var Kbt=s(Nz);zar=r(Kbt,"DeiTForMaskedImageModeling"),Kbt.forEach(t),War=r(tSe," (DeiT model)"),tSe.forEach(t),Qar=i(oee),AF=n(oee,"LI",{});var aSe=s(AF);g1e=n(aSe,"STRONG",{});var Zbt=s(g1e);Har=r(Zbt,"swin"),Zbt.forEach(t),Uar=r(aSe," \u2014 "),jz=n(aSe,"A",{href:!0});var e2t=s(jz);Jar=r(e2t,"SwinForMaskedImageModeling"),e2t.forEach(t),Yar=r(aSe," (Swin model)"),aSe.forEach(t),Kar=i(oee),yF=n(oee,"LI",{});var nSe=s(yF);h1e=n(nSe,"STRONG",{});var o2t=s(h1e);Zar=r(o2t,"vit"),o2t.forEach(t),enr=r(nSe," \u2014 "),Dz=n(nSe,"A",{href:!0});var r2t=s(Dz);onr=r(r2t,"ViTForMaskedImageModeling"),r2t.forEach(t),rnr=r(nSe," (ViT model)"),nSe.forEach(t),oee.forEach(t),tnr=i(va),LF=n(va,"P",{});var sSe=s(LF);anr=r(sSe,"The model is set in evaluation mode by default using "),p1e=n(sSe,"CODE",{});var t2t=s(p1e);nnr=r(t2t,"model.eval()"),t2t.forEach(t),snr=r(sSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=n(sSe,"CODE",{});var a2t=s(u1e);lnr=r(a2t,"model.train()"),a2t.forEach(t),sSe.forEach(t),inr=i(va),T(xF.$$.fragment,va),va.forEach(t),il.forEach(t),ZNe=i(f),xd=n(f,"H2",{class:!0});var aGe=s(xd);$F=n(aGe,"A",{id:!0,class:!0,href:!0});var n2t=s($F);_1e=n(n2t,"SPAN",{});var s2t=s(_1e);T(Oy.$$.fragment,s2t),s2t.forEach(t),n2t.forEach(t),dnr=i(aGe),b1e=n(aGe,"SPAN",{});var l2t=s(b1e);cnr=r(l2t,"AutoModelForObjectDetection"),l2t.forEach(t),aGe.forEach(t),eje=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(Vy.$$.fragment,dl),fnr=i(dl),$d=n(dl,"P",{});var ree=s($d);mnr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Gz=n(ree,"A",{href:!0});var i2t=s(Gz);gnr=r(i2t,"from_pretrained()"),i2t.forEach(t),hnr=r(ree," class method or the "),Oz=n(ree,"A",{href:!0});var d2t=s(Oz);pnr=r(d2t,"from_config()"),d2t.forEach(t),unr=r(ree,` class
method.`),ree.forEach(t),_nr=i(dl),Xy=n(dl,"P",{});var nGe=s(Xy);bnr=r(nGe,"This class cannot be instantiated directly using "),v1e=n(nGe,"CODE",{});var c2t=s(v1e);vnr=r(c2t,"__init__()"),c2t.forEach(t),Fnr=r(nGe," (throws an error)."),nGe.forEach(t),Tnr=i(dl),Et=n(dl,"DIV",{class:!0});var u0=s(Et);T(zy.$$.fragment,u0),Mnr=i(u0),F1e=n(u0,"P",{});var f2t=s(F1e);Enr=r(f2t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),f2t.forEach(t),Cnr=i(u0),kd=n(u0,"P",{});var tee=s(kd);wnr=r(tee,`Note:
Loading a model from its configuration file does `),T1e=n(tee,"STRONG",{});var m2t=s(T1e);Anr=r(m2t,"not"),m2t.forEach(t),ynr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(tee,"A",{href:!0});var g2t=s(Vz);Lnr=r(g2t,"from_pretrained()"),g2t.forEach(t),xnr=r(tee," to load the model weights."),tee.forEach(t),$nr=i(u0),T(kF.$$.fragment,u0),u0.forEach(t),knr=i(dl),uo=n(dl,"DIV",{class:!0});var Fa=s(uo);T(Wy.$$.fragment,Fa),Snr=i(Fa),M1e=n(Fa,"P",{});var h2t=s(M1e);Rnr=r(h2t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),h2t.forEach(t),Pnr=i(Fa),Qa=n(Fa,"P",{});var _0=s(Qa);Bnr=r(_0,"The model class to instantiate is selected based on the "),E1e=n(_0,"CODE",{});var p2t=s(E1e);Inr=r(p2t,"model_type"),p2t.forEach(t),qnr=r(_0,` property of the config object (either
passed as an argument or loaded from `),C1e=n(_0,"CODE",{});var u2t=s(C1e);Nnr=r(u2t,"pretrained_model_name_or_path"),u2t.forEach(t),jnr=r(_0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=n(_0,"CODE",{});var _2t=s(w1e);Dnr=r(_2t,"pretrained_model_name_or_path"),_2t.forEach(t),Gnr=r(_0,":"),_0.forEach(t),Onr=i(Fa),Qy=n(Fa,"UL",{});var sGe=s(Qy);SF=n(sGe,"LI",{});var lSe=s(SF);A1e=n(lSe,"STRONG",{});var b2t=s(A1e);Vnr=r(b2t,"detr"),b2t.forEach(t),Xnr=r(lSe," \u2014 "),Xz=n(lSe,"A",{href:!0});var v2t=s(Xz);znr=r(v2t,"DetrForObjectDetection"),v2t.forEach(t),Wnr=r(lSe," (DETR model)"),lSe.forEach(t),Qnr=i(sGe),RF=n(sGe,"LI",{});var iSe=s(RF);y1e=n(iSe,"STRONG",{});var F2t=s(y1e);Hnr=r(F2t,"yolos"),F2t.forEach(t),Unr=r(iSe," \u2014 "),zz=n(iSe,"A",{href:!0});var T2t=s(zz);Jnr=r(T2t,"YolosForObjectDetection"),T2t.forEach(t),Ynr=r(iSe," (YOLOS model)"),iSe.forEach(t),sGe.forEach(t),Knr=i(Fa),PF=n(Fa,"P",{});var dSe=s(PF);Znr=r(dSe,"The model is set in evaluation mode by default using "),L1e=n(dSe,"CODE",{});var M2t=s(L1e);esr=r(M2t,"model.eval()"),M2t.forEach(t),osr=r(dSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x1e=n(dSe,"CODE",{});var E2t=s(x1e);rsr=r(E2t,"model.train()"),E2t.forEach(t),dSe.forEach(t),tsr=i(Fa),T(BF.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),oje=i(f),Sd=n(f,"H2",{class:!0});var lGe=s(Sd);IF=n(lGe,"A",{id:!0,class:!0,href:!0});var C2t=s(IF);$1e=n(C2t,"SPAN",{});var w2t=s($1e);T(Hy.$$.fragment,w2t),w2t.forEach(t),C2t.forEach(t),asr=i(lGe),k1e=n(lGe,"SPAN",{});var A2t=s(k1e);nsr=r(A2t,"AutoModelForImageSegmentation"),A2t.forEach(t),lGe.forEach(t),rje=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(Uy.$$.fragment,cl),ssr=i(cl),Rd=n(cl,"P",{});var aee=s(Rd);lsr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Wz=n(aee,"A",{href:!0});var y2t=s(Wz);isr=r(y2t,"from_pretrained()"),y2t.forEach(t),dsr=r(aee," class method or the "),Qz=n(aee,"A",{href:!0});var L2t=s(Qz);csr=r(L2t,"from_config()"),L2t.forEach(t),fsr=r(aee,` class
method.`),aee.forEach(t),msr=i(cl),Jy=n(cl,"P",{});var iGe=s(Jy);gsr=r(iGe,"This class cannot be instantiated directly using "),S1e=n(iGe,"CODE",{});var x2t=s(S1e);hsr=r(x2t,"__init__()"),x2t.forEach(t),psr=r(iGe," (throws an error)."),iGe.forEach(t),usr=i(cl),Ct=n(cl,"DIV",{class:!0});var b0=s(Ct);T(Yy.$$.fragment,b0),_sr=i(b0),R1e=n(b0,"P",{});var $2t=s(R1e);bsr=r($2t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),$2t.forEach(t),vsr=i(b0),Pd=n(b0,"P",{});var nee=s(Pd);Fsr=r(nee,`Note:
Loading a model from its configuration file does `),P1e=n(nee,"STRONG",{});var k2t=s(P1e);Tsr=r(k2t,"not"),k2t.forEach(t),Msr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=n(nee,"A",{href:!0});var S2t=s(Hz);Esr=r(S2t,"from_pretrained()"),S2t.forEach(t),Csr=r(nee," to load the model weights."),nee.forEach(t),wsr=i(b0),T(qF.$$.fragment,b0),b0.forEach(t),Asr=i(cl),_o=n(cl,"DIV",{class:!0});var Ta=s(_o);T(Ky.$$.fragment,Ta),ysr=i(Ta),B1e=n(Ta,"P",{});var R2t=s(B1e);Lsr=r(R2t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),R2t.forEach(t),xsr=i(Ta),Ha=n(Ta,"P",{});var v0=s(Ha);$sr=r(v0,"The model class to instantiate is selected based on the "),I1e=n(v0,"CODE",{});var P2t=s(I1e);ksr=r(P2t,"model_type"),P2t.forEach(t),Ssr=r(v0,` property of the config object (either
passed as an argument or loaded from `),q1e=n(v0,"CODE",{});var B2t=s(q1e);Rsr=r(B2t,"pretrained_model_name_or_path"),B2t.forEach(t),Psr=r(v0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=n(v0,"CODE",{});var I2t=s(N1e);Bsr=r(I2t,"pretrained_model_name_or_path"),I2t.forEach(t),Isr=r(v0,":"),v0.forEach(t),qsr=i(Ta),j1e=n(Ta,"UL",{});var q2t=s(j1e);NF=n(q2t,"LI",{});var cSe=s(NF);D1e=n(cSe,"STRONG",{});var N2t=s(D1e);Nsr=r(N2t,"detr"),N2t.forEach(t),jsr=r(cSe," \u2014 "),Uz=n(cSe,"A",{href:!0});var j2t=s(Uz);Dsr=r(j2t,"DetrForSegmentation"),j2t.forEach(t),Gsr=r(cSe," (DETR model)"),cSe.forEach(t),q2t.forEach(t),Osr=i(Ta),jF=n(Ta,"P",{});var fSe=s(jF);Vsr=r(fSe,"The model is set in evaluation mode by default using "),G1e=n(fSe,"CODE",{});var D2t=s(G1e);Xsr=r(D2t,"model.eval()"),D2t.forEach(t),zsr=r(fSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O1e=n(fSe,"CODE",{});var G2t=s(O1e);Wsr=r(G2t,"model.train()"),G2t.forEach(t),fSe.forEach(t),Qsr=i(Ta),T(DF.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),tje=i(f),Bd=n(f,"H2",{class:!0});var dGe=s(Bd);GF=n(dGe,"A",{id:!0,class:!0,href:!0});var O2t=s(GF);V1e=n(O2t,"SPAN",{});var V2t=s(V1e);T(Zy.$$.fragment,V2t),V2t.forEach(t),O2t.forEach(t),Hsr=i(dGe),X1e=n(dGe,"SPAN",{});var X2t=s(X1e);Usr=r(X2t,"AutoModelForSemanticSegmentation"),X2t.forEach(t),dGe.forEach(t),aje=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(eL.$$.fragment,fl),Jsr=i(fl),Id=n(fl,"P",{});var see=s(Id);Ysr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Jz=n(see,"A",{href:!0});var z2t=s(Jz);Ksr=r(z2t,"from_pretrained()"),z2t.forEach(t),Zsr=r(see," class method or the "),Yz=n(see,"A",{href:!0});var W2t=s(Yz);elr=r(W2t,"from_config()"),W2t.forEach(t),olr=r(see,` class
method.`),see.forEach(t),rlr=i(fl),oL=n(fl,"P",{});var cGe=s(oL);tlr=r(cGe,"This class cannot be instantiated directly using "),z1e=n(cGe,"CODE",{});var Q2t=s(z1e);alr=r(Q2t,"__init__()"),Q2t.forEach(t),nlr=r(cGe," (throws an error)."),cGe.forEach(t),slr=i(fl),wt=n(fl,"DIV",{class:!0});var F0=s(wt);T(rL.$$.fragment,F0),llr=i(F0),W1e=n(F0,"P",{});var H2t=s(W1e);ilr=r(H2t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),H2t.forEach(t),dlr=i(F0),qd=n(F0,"P",{});var lee=s(qd);clr=r(lee,`Note:
Loading a model from its configuration file does `),Q1e=n(lee,"STRONG",{});var U2t=s(Q1e);flr=r(U2t,"not"),U2t.forEach(t),mlr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=n(lee,"A",{href:!0});var J2t=s(Kz);glr=r(J2t,"from_pretrained()"),J2t.forEach(t),hlr=r(lee," to load the model weights."),lee.forEach(t),plr=i(F0),T(OF.$$.fragment,F0),F0.forEach(t),ulr=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(tL.$$.fragment,Ma),_lr=i(Ma),H1e=n(Ma,"P",{});var Y2t=s(H1e);blr=r(Y2t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Y2t.forEach(t),vlr=i(Ma),Ua=n(Ma,"P",{});var T0=s(Ua);Flr=r(T0,"The model class to instantiate is selected based on the "),U1e=n(T0,"CODE",{});var K2t=s(U1e);Tlr=r(K2t,"model_type"),K2t.forEach(t),Mlr=r(T0,` property of the config object (either
passed as an argument or loaded from `),J1e=n(T0,"CODE",{});var Z2t=s(J1e);Elr=r(Z2t,"pretrained_model_name_or_path"),Z2t.forEach(t),Clr=r(T0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=n(T0,"CODE",{});var e4t=s(Y1e);wlr=r(e4t,"pretrained_model_name_or_path"),e4t.forEach(t),Alr=r(T0,":"),T0.forEach(t),ylr=i(Ma),Ja=n(Ma,"UL",{});var M0=s(Ja);VF=n(M0,"LI",{});var mSe=s(VF);K1e=n(mSe,"STRONG",{});var o4t=s(K1e);Llr=r(o4t,"beit"),o4t.forEach(t),xlr=r(mSe," \u2014 "),Zz=n(mSe,"A",{href:!0});var r4t=s(Zz);$lr=r(r4t,"BeitForSemanticSegmentation"),r4t.forEach(t),klr=r(mSe," (BEiT model)"),mSe.forEach(t),Slr=i(M0),XF=n(M0,"LI",{});var gSe=s(XF);Z1e=n(gSe,"STRONG",{});var t4t=s(Z1e);Rlr=r(t4t,"data2vec-vision"),t4t.forEach(t),Plr=r(gSe," \u2014 "),eW=n(gSe,"A",{href:!0});var a4t=s(eW);Blr=r(a4t,"Data2VecVisionForSemanticSegmentation"),a4t.forEach(t),Ilr=r(gSe," (Data2VecVision model)"),gSe.forEach(t),qlr=i(M0),zF=n(M0,"LI",{});var hSe=s(zF);e9e=n(hSe,"STRONG",{});var n4t=s(e9e);Nlr=r(n4t,"dpt"),n4t.forEach(t),jlr=r(hSe," \u2014 "),oW=n(hSe,"A",{href:!0});var s4t=s(oW);Dlr=r(s4t,"DPTForSemanticSegmentation"),s4t.forEach(t),Glr=r(hSe," (DPT model)"),hSe.forEach(t),Olr=i(M0),WF=n(M0,"LI",{});var pSe=s(WF);o9e=n(pSe,"STRONG",{});var l4t=s(o9e);Vlr=r(l4t,"segformer"),l4t.forEach(t),Xlr=r(pSe," \u2014 "),rW=n(pSe,"A",{href:!0});var i4t=s(rW);zlr=r(i4t,"SegformerForSemanticSegmentation"),i4t.forEach(t),Wlr=r(pSe," (SegFormer model)"),pSe.forEach(t),M0.forEach(t),Qlr=i(Ma),QF=n(Ma,"P",{});var uSe=s(QF);Hlr=r(uSe,"The model is set in evaluation mode by default using "),r9e=n(uSe,"CODE",{});var d4t=s(r9e);Ulr=r(d4t,"model.eval()"),d4t.forEach(t),Jlr=r(uSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t9e=n(uSe,"CODE",{});var c4t=s(t9e);Ylr=r(c4t,"model.train()"),c4t.forEach(t),uSe.forEach(t),Klr=i(Ma),T(HF.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),nje=i(f),Nd=n(f,"H2",{class:!0});var fGe=s(Nd);UF=n(fGe,"A",{id:!0,class:!0,href:!0});var f4t=s(UF);a9e=n(f4t,"SPAN",{});var m4t=s(a9e);T(aL.$$.fragment,m4t),m4t.forEach(t),f4t.forEach(t),Zlr=i(fGe),n9e=n(fGe,"SPAN",{});var g4t=s(n9e);eir=r(g4t,"AutoModelForInstanceSegmentation"),g4t.forEach(t),fGe.forEach(t),sje=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(nL.$$.fragment,ml),oir=i(ml),jd=n(ml,"P",{});var iee=s(jd);rir=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),tW=n(iee,"A",{href:!0});var h4t=s(tW);tir=r(h4t,"from_pretrained()"),h4t.forEach(t),air=r(iee," class method or the "),aW=n(iee,"A",{href:!0});var p4t=s(aW);nir=r(p4t,"from_config()"),p4t.forEach(t),sir=r(iee,` class
method.`),iee.forEach(t),lir=i(ml),sL=n(ml,"P",{});var mGe=s(sL);iir=r(mGe,"This class cannot be instantiated directly using "),s9e=n(mGe,"CODE",{});var u4t=s(s9e);dir=r(u4t,"__init__()"),u4t.forEach(t),cir=r(mGe," (throws an error)."),mGe.forEach(t),fir=i(ml),At=n(ml,"DIV",{class:!0});var E0=s(At);T(lL.$$.fragment,E0),mir=i(E0),l9e=n(E0,"P",{});var _4t=s(l9e);gir=r(_4t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),_4t.forEach(t),hir=i(E0),Dd=n(E0,"P",{});var dee=s(Dd);pir=r(dee,`Note:
Loading a model from its configuration file does `),i9e=n(dee,"STRONG",{});var b4t=s(i9e);uir=r(b4t,"not"),b4t.forEach(t),_ir=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=n(dee,"A",{href:!0});var v4t=s(nW);bir=r(v4t,"from_pretrained()"),v4t.forEach(t),vir=r(dee," to load the model weights."),dee.forEach(t),Fir=i(E0),T(JF.$$.fragment,E0),E0.forEach(t),Tir=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(iL.$$.fragment,Ea),Mir=i(Ea),d9e=n(Ea,"P",{});var F4t=s(d9e);Eir=r(F4t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),F4t.forEach(t),Cir=i(Ea),Ya=n(Ea,"P",{});var C0=s(Ya);wir=r(C0,"The model class to instantiate is selected based on the "),c9e=n(C0,"CODE",{});var T4t=s(c9e);Air=r(T4t,"model_type"),T4t.forEach(t),yir=r(C0,` property of the config object (either
passed as an argument or loaded from `),f9e=n(C0,"CODE",{});var M4t=s(f9e);Lir=r(M4t,"pretrained_model_name_or_path"),M4t.forEach(t),xir=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m9e=n(C0,"CODE",{});var E4t=s(m9e);$ir=r(E4t,"pretrained_model_name_or_path"),E4t.forEach(t),kir=r(C0,":"),C0.forEach(t),Sir=i(Ea),g9e=n(Ea,"UL",{});var C4t=s(g9e);YF=n(C4t,"LI",{});var _Se=s(YF);h9e=n(_Se,"STRONG",{});var w4t=s(h9e);Rir=r(w4t,"maskformer"),w4t.forEach(t),Pir=r(_Se," \u2014 "),sW=n(_Se,"A",{href:!0});var A4t=s(sW);Bir=r(A4t,"MaskFormerForInstanceSegmentation"),A4t.forEach(t),Iir=r(_Se," (MaskFormer model)"),_Se.forEach(t),C4t.forEach(t),qir=i(Ea),KF=n(Ea,"P",{});var bSe=s(KF);Nir=r(bSe,"The model is set in evaluation mode by default using "),p9e=n(bSe,"CODE",{});var y4t=s(p9e);jir=r(y4t,"model.eval()"),y4t.forEach(t),Dir=r(bSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u9e=n(bSe,"CODE",{});var L4t=s(u9e);Gir=r(L4t,"model.train()"),L4t.forEach(t),bSe.forEach(t),Oir=i(Ea),T(ZF.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),lje=i(f),Gd=n(f,"H2",{class:!0});var gGe=s(Gd);eT=n(gGe,"A",{id:!0,class:!0,href:!0});var x4t=s(eT);_9e=n(x4t,"SPAN",{});var $4t=s(_9e);T(dL.$$.fragment,$4t),$4t.forEach(t),x4t.forEach(t),Vir=i(gGe),b9e=n(gGe,"SPAN",{});var k4t=s(b9e);Xir=r(k4t,"TFAutoModel"),k4t.forEach(t),gGe.forEach(t),ije=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(cL.$$.fragment,gl),zir=i(gl),Od=n(gl,"P",{});var cee=s(Od);Wir=r(cee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lW=n(cee,"A",{href:!0});var S4t=s(lW);Qir=r(S4t,"from_pretrained()"),S4t.forEach(t),Hir=r(cee," class method or the "),iW=n(cee,"A",{href:!0});var R4t=s(iW);Uir=r(R4t,"from_config()"),R4t.forEach(t),Jir=r(cee,` class
method.`),cee.forEach(t),Yir=i(gl),fL=n(gl,"P",{});var hGe=s(fL);Kir=r(hGe,"This class cannot be instantiated directly using "),v9e=n(hGe,"CODE",{});var P4t=s(v9e);Zir=r(P4t,"__init__()"),P4t.forEach(t),edr=r(hGe," (throws an error)."),hGe.forEach(t),odr=i(gl),yt=n(gl,"DIV",{class:!0});var w0=s(yt);T(mL.$$.fragment,w0),rdr=i(w0),F9e=n(w0,"P",{});var B4t=s(F9e);tdr=r(B4t,"Instantiates one of the base model classes of the library from a configuration."),B4t.forEach(t),adr=i(w0),Vd=n(w0,"P",{});var fee=s(Vd);ndr=r(fee,`Note:
Loading a model from its configuration file does `),T9e=n(fee,"STRONG",{});var I4t=s(T9e);sdr=r(I4t,"not"),I4t.forEach(t),ldr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(fee,"A",{href:!0});var q4t=s(dW);idr=r(q4t,"from_pretrained()"),q4t.forEach(t),ddr=r(fee," to load the model weights."),fee.forEach(t),cdr=i(w0),T(oT.$$.fragment,w0),w0.forEach(t),fdr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(gL.$$.fragment,hl),mdr=i(hl),M9e=n(hl,"P",{});var N4t=s(M9e);gdr=r(N4t,"Instantiate one of the base model classes of the library from a pretrained model."),N4t.forEach(t),hdr=i(hl),Ka=n(hl,"P",{});var A0=s(Ka);pdr=r(A0,"The model class to instantiate is selected based on the "),E9e=n(A0,"CODE",{});var j4t=s(E9e);udr=r(j4t,"model_type"),j4t.forEach(t),_dr=r(A0,` property of the config object (either
passed as an argument or loaded from `),C9e=n(A0,"CODE",{});var D4t=s(C9e);bdr=r(D4t,"pretrained_model_name_or_path"),D4t.forEach(t),vdr=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w9e=n(A0,"CODE",{});var G4t=s(w9e);Fdr=r(G4t,"pretrained_model_name_or_path"),G4t.forEach(t),Tdr=r(A0,":"),A0.forEach(t),Mdr=i(hl),N=n(hl,"UL",{});var D=s(N);rT=n(D,"LI",{});var vSe=s(rT);A9e=n(vSe,"STRONG",{});var O4t=s(A9e);Edr=r(O4t,"albert"),O4t.forEach(t),Cdr=r(vSe," \u2014 "),cW=n(vSe,"A",{href:!0});var V4t=s(cW);wdr=r(V4t,"TFAlbertModel"),V4t.forEach(t),Adr=r(vSe," (ALBERT model)"),vSe.forEach(t),ydr=i(D),tT=n(D,"LI",{});var FSe=s(tT);y9e=n(FSe,"STRONG",{});var X4t=s(y9e);Ldr=r(X4t,"bart"),X4t.forEach(t),xdr=r(FSe," \u2014 "),fW=n(FSe,"A",{href:!0});var z4t=s(fW);$dr=r(z4t,"TFBartModel"),z4t.forEach(t),kdr=r(FSe," (BART model)"),FSe.forEach(t),Sdr=i(D),aT=n(D,"LI",{});var TSe=s(aT);L9e=n(TSe,"STRONG",{});var W4t=s(L9e);Rdr=r(W4t,"bert"),W4t.forEach(t),Pdr=r(TSe," \u2014 "),mW=n(TSe,"A",{href:!0});var Q4t=s(mW);Bdr=r(Q4t,"TFBertModel"),Q4t.forEach(t),Idr=r(TSe," (BERT model)"),TSe.forEach(t),qdr=i(D),nT=n(D,"LI",{});var MSe=s(nT);x9e=n(MSe,"STRONG",{});var H4t=s(x9e);Ndr=r(H4t,"blenderbot"),H4t.forEach(t),jdr=r(MSe," \u2014 "),gW=n(MSe,"A",{href:!0});var U4t=s(gW);Ddr=r(U4t,"TFBlenderbotModel"),U4t.forEach(t),Gdr=r(MSe," (Blenderbot model)"),MSe.forEach(t),Odr=i(D),sT=n(D,"LI",{});var ESe=s(sT);$9e=n(ESe,"STRONG",{});var J4t=s($9e);Vdr=r(J4t,"blenderbot-small"),J4t.forEach(t),Xdr=r(ESe," \u2014 "),hW=n(ESe,"A",{href:!0});var Y4t=s(hW);zdr=r(Y4t,"TFBlenderbotSmallModel"),Y4t.forEach(t),Wdr=r(ESe," (BlenderbotSmall model)"),ESe.forEach(t),Qdr=i(D),lT=n(D,"LI",{});var CSe=s(lT);k9e=n(CSe,"STRONG",{});var K4t=s(k9e);Hdr=r(K4t,"camembert"),K4t.forEach(t),Udr=r(CSe," \u2014 "),pW=n(CSe,"A",{href:!0});var Z4t=s(pW);Jdr=r(Z4t,"TFCamembertModel"),Z4t.forEach(t),Ydr=r(CSe," (CamemBERT model)"),CSe.forEach(t),Kdr=i(D),iT=n(D,"LI",{});var wSe=s(iT);S9e=n(wSe,"STRONG",{});var evt=s(S9e);Zdr=r(evt,"clip"),evt.forEach(t),ecr=r(wSe," \u2014 "),uW=n(wSe,"A",{href:!0});var ovt=s(uW);ocr=r(ovt,"TFCLIPModel"),ovt.forEach(t),rcr=r(wSe," (CLIP model)"),wSe.forEach(t),tcr=i(D),dT=n(D,"LI",{});var ASe=s(dT);R9e=n(ASe,"STRONG",{});var rvt=s(R9e);acr=r(rvt,"convbert"),rvt.forEach(t),ncr=r(ASe," \u2014 "),_W=n(ASe,"A",{href:!0});var tvt=s(_W);scr=r(tvt,"TFConvBertModel"),tvt.forEach(t),lcr=r(ASe," (ConvBERT model)"),ASe.forEach(t),icr=i(D),cT=n(D,"LI",{});var ySe=s(cT);P9e=n(ySe,"STRONG",{});var avt=s(P9e);dcr=r(avt,"convnext"),avt.forEach(t),ccr=r(ySe," \u2014 "),bW=n(ySe,"A",{href:!0});var nvt=s(bW);fcr=r(nvt,"TFConvNextModel"),nvt.forEach(t),mcr=r(ySe," (ConvNext model)"),ySe.forEach(t),gcr=i(D),fT=n(D,"LI",{});var LSe=s(fT);B9e=n(LSe,"STRONG",{});var svt=s(B9e);hcr=r(svt,"ctrl"),svt.forEach(t),pcr=r(LSe," \u2014 "),vW=n(LSe,"A",{href:!0});var lvt=s(vW);ucr=r(lvt,"TFCTRLModel"),lvt.forEach(t),_cr=r(LSe," (CTRL model)"),LSe.forEach(t),bcr=i(D),mT=n(D,"LI",{});var xSe=s(mT);I9e=n(xSe,"STRONG",{});var ivt=s(I9e);vcr=r(ivt,"data2vec-vision"),ivt.forEach(t),Fcr=r(xSe," \u2014 "),FW=n(xSe,"A",{href:!0});var dvt=s(FW);Tcr=r(dvt,"TFData2VecVisionModel"),dvt.forEach(t),Mcr=r(xSe," (Data2VecVision model)"),xSe.forEach(t),Ecr=i(D),gT=n(D,"LI",{});var $Se=s(gT);q9e=n($Se,"STRONG",{});var cvt=s(q9e);Ccr=r(cvt,"deberta"),cvt.forEach(t),wcr=r($Se," \u2014 "),TW=n($Se,"A",{href:!0});var fvt=s(TW);Acr=r(fvt,"TFDebertaModel"),fvt.forEach(t),ycr=r($Se," (DeBERTa model)"),$Se.forEach(t),Lcr=i(D),hT=n(D,"LI",{});var kSe=s(hT);N9e=n(kSe,"STRONG",{});var mvt=s(N9e);xcr=r(mvt,"deberta-v2"),mvt.forEach(t),$cr=r(kSe," \u2014 "),MW=n(kSe,"A",{href:!0});var gvt=s(MW);kcr=r(gvt,"TFDebertaV2Model"),gvt.forEach(t),Scr=r(kSe," (DeBERTa-v2 model)"),kSe.forEach(t),Rcr=i(D),pT=n(D,"LI",{});var SSe=s(pT);j9e=n(SSe,"STRONG",{});var hvt=s(j9e);Pcr=r(hvt,"distilbert"),hvt.forEach(t),Bcr=r(SSe," \u2014 "),EW=n(SSe,"A",{href:!0});var pvt=s(EW);Icr=r(pvt,"TFDistilBertModel"),pvt.forEach(t),qcr=r(SSe," (DistilBERT model)"),SSe.forEach(t),Ncr=i(D),uT=n(D,"LI",{});var RSe=s(uT);D9e=n(RSe,"STRONG",{});var uvt=s(D9e);jcr=r(uvt,"dpr"),uvt.forEach(t),Dcr=r(RSe," \u2014 "),CW=n(RSe,"A",{href:!0});var _vt=s(CW);Gcr=r(_vt,"TFDPRQuestionEncoder"),_vt.forEach(t),Ocr=r(RSe," (DPR model)"),RSe.forEach(t),Vcr=i(D),_T=n(D,"LI",{});var PSe=s(_T);G9e=n(PSe,"STRONG",{});var bvt=s(G9e);Xcr=r(bvt,"electra"),bvt.forEach(t),zcr=r(PSe," \u2014 "),wW=n(PSe,"A",{href:!0});var vvt=s(wW);Wcr=r(vvt,"TFElectraModel"),vvt.forEach(t),Qcr=r(PSe," (ELECTRA model)"),PSe.forEach(t),Hcr=i(D),bT=n(D,"LI",{});var BSe=s(bT);O9e=n(BSe,"STRONG",{});var Fvt=s(O9e);Ucr=r(Fvt,"flaubert"),Fvt.forEach(t),Jcr=r(BSe," \u2014 "),AW=n(BSe,"A",{href:!0});var Tvt=s(AW);Ycr=r(Tvt,"TFFlaubertModel"),Tvt.forEach(t),Kcr=r(BSe," (FlauBERT model)"),BSe.forEach(t),Zcr=i(D),Is=n(D,"LI",{});var z$=s(Is);V9e=n(z$,"STRONG",{});var Mvt=s(V9e);efr=r(Mvt,"funnel"),Mvt.forEach(t),ofr=r(z$," \u2014 "),yW=n(z$,"A",{href:!0});var Evt=s(yW);rfr=r(Evt,"TFFunnelModel"),Evt.forEach(t),tfr=r(z$," or "),LW=n(z$,"A",{href:!0});var Cvt=s(LW);afr=r(Cvt,"TFFunnelBaseModel"),Cvt.forEach(t),nfr=r(z$," (Funnel Transformer model)"),z$.forEach(t),sfr=i(D),vT=n(D,"LI",{});var ISe=s(vT);X9e=n(ISe,"STRONG",{});var wvt=s(X9e);lfr=r(wvt,"gpt2"),wvt.forEach(t),ifr=r(ISe," \u2014 "),xW=n(ISe,"A",{href:!0});var Avt=s(xW);dfr=r(Avt,"TFGPT2Model"),Avt.forEach(t),cfr=r(ISe," (OpenAI GPT-2 model)"),ISe.forEach(t),ffr=i(D),FT=n(D,"LI",{});var qSe=s(FT);z9e=n(qSe,"STRONG",{});var yvt=s(z9e);mfr=r(yvt,"gptj"),yvt.forEach(t),gfr=r(qSe," \u2014 "),$W=n(qSe,"A",{href:!0});var Lvt=s($W);hfr=r(Lvt,"TFGPTJModel"),Lvt.forEach(t),pfr=r(qSe," (GPT-J model)"),qSe.forEach(t),ufr=i(D),TT=n(D,"LI",{});var NSe=s(TT);W9e=n(NSe,"STRONG",{});var xvt=s(W9e);_fr=r(xvt,"hubert"),xvt.forEach(t),bfr=r(NSe," \u2014 "),kW=n(NSe,"A",{href:!0});var $vt=s(kW);vfr=r($vt,"TFHubertModel"),$vt.forEach(t),Ffr=r(NSe," (Hubert model)"),NSe.forEach(t),Tfr=i(D),MT=n(D,"LI",{});var jSe=s(MT);Q9e=n(jSe,"STRONG",{});var kvt=s(Q9e);Mfr=r(kvt,"layoutlm"),kvt.forEach(t),Efr=r(jSe," \u2014 "),SW=n(jSe,"A",{href:!0});var Svt=s(SW);Cfr=r(Svt,"TFLayoutLMModel"),Svt.forEach(t),wfr=r(jSe," (LayoutLM model)"),jSe.forEach(t),Afr=i(D),ET=n(D,"LI",{});var DSe=s(ET);H9e=n(DSe,"STRONG",{});var Rvt=s(H9e);yfr=r(Rvt,"led"),Rvt.forEach(t),Lfr=r(DSe," \u2014 "),RW=n(DSe,"A",{href:!0});var Pvt=s(RW);xfr=r(Pvt,"TFLEDModel"),Pvt.forEach(t),$fr=r(DSe," (LED model)"),DSe.forEach(t),kfr=i(D),CT=n(D,"LI",{});var GSe=s(CT);U9e=n(GSe,"STRONG",{});var Bvt=s(U9e);Sfr=r(Bvt,"longformer"),Bvt.forEach(t),Rfr=r(GSe," \u2014 "),PW=n(GSe,"A",{href:!0});var Ivt=s(PW);Pfr=r(Ivt,"TFLongformerModel"),Ivt.forEach(t),Bfr=r(GSe," (Longformer model)"),GSe.forEach(t),Ifr=i(D),wT=n(D,"LI",{});var OSe=s(wT);J9e=n(OSe,"STRONG",{});var qvt=s(J9e);qfr=r(qvt,"lxmert"),qvt.forEach(t),Nfr=r(OSe," \u2014 "),BW=n(OSe,"A",{href:!0});var Nvt=s(BW);jfr=r(Nvt,"TFLxmertModel"),Nvt.forEach(t),Dfr=r(OSe," (LXMERT model)"),OSe.forEach(t),Gfr=i(D),AT=n(D,"LI",{});var VSe=s(AT);Y9e=n(VSe,"STRONG",{});var jvt=s(Y9e);Ofr=r(jvt,"marian"),jvt.forEach(t),Vfr=r(VSe," \u2014 "),IW=n(VSe,"A",{href:!0});var Dvt=s(IW);Xfr=r(Dvt,"TFMarianModel"),Dvt.forEach(t),zfr=r(VSe," (Marian model)"),VSe.forEach(t),Wfr=i(D),yT=n(D,"LI",{});var XSe=s(yT);K9e=n(XSe,"STRONG",{});var Gvt=s(K9e);Qfr=r(Gvt,"mbart"),Gvt.forEach(t),Hfr=r(XSe," \u2014 "),qW=n(XSe,"A",{href:!0});var Ovt=s(qW);Ufr=r(Ovt,"TFMBartModel"),Ovt.forEach(t),Jfr=r(XSe," (mBART model)"),XSe.forEach(t),Yfr=i(D),LT=n(D,"LI",{});var zSe=s(LT);Z9e=n(zSe,"STRONG",{});var Vvt=s(Z9e);Kfr=r(Vvt,"mobilebert"),Vvt.forEach(t),Zfr=r(zSe," \u2014 "),NW=n(zSe,"A",{href:!0});var Xvt=s(NW);emr=r(Xvt,"TFMobileBertModel"),Xvt.forEach(t),omr=r(zSe," (MobileBERT model)"),zSe.forEach(t),rmr=i(D),xT=n(D,"LI",{});var WSe=s(xT);ebe=n(WSe,"STRONG",{});var zvt=s(ebe);tmr=r(zvt,"mpnet"),zvt.forEach(t),amr=r(WSe," \u2014 "),jW=n(WSe,"A",{href:!0});var Wvt=s(jW);nmr=r(Wvt,"TFMPNetModel"),Wvt.forEach(t),smr=r(WSe," (MPNet model)"),WSe.forEach(t),lmr=i(D),$T=n(D,"LI",{});var QSe=s($T);obe=n(QSe,"STRONG",{});var Qvt=s(obe);imr=r(Qvt,"mt5"),Qvt.forEach(t),dmr=r(QSe," \u2014 "),DW=n(QSe,"A",{href:!0});var Hvt=s(DW);cmr=r(Hvt,"TFMT5Model"),Hvt.forEach(t),fmr=r(QSe," (mT5 model)"),QSe.forEach(t),mmr=i(D),kT=n(D,"LI",{});var HSe=s(kT);rbe=n(HSe,"STRONG",{});var Uvt=s(rbe);gmr=r(Uvt,"openai-gpt"),Uvt.forEach(t),hmr=r(HSe," \u2014 "),GW=n(HSe,"A",{href:!0});var Jvt=s(GW);pmr=r(Jvt,"TFOpenAIGPTModel"),Jvt.forEach(t),umr=r(HSe," (OpenAI GPT model)"),HSe.forEach(t),_mr=i(D),ST=n(D,"LI",{});var USe=s(ST);tbe=n(USe,"STRONG",{});var Yvt=s(tbe);bmr=r(Yvt,"pegasus"),Yvt.forEach(t),vmr=r(USe," \u2014 "),OW=n(USe,"A",{href:!0});var Kvt=s(OW);Fmr=r(Kvt,"TFPegasusModel"),Kvt.forEach(t),Tmr=r(USe," (Pegasus model)"),USe.forEach(t),Mmr=i(D),RT=n(D,"LI",{});var JSe=s(RT);abe=n(JSe,"STRONG",{});var Zvt=s(abe);Emr=r(Zvt,"rembert"),Zvt.forEach(t),Cmr=r(JSe," \u2014 "),VW=n(JSe,"A",{href:!0});var eFt=s(VW);wmr=r(eFt,"TFRemBertModel"),eFt.forEach(t),Amr=r(JSe," (RemBERT model)"),JSe.forEach(t),ymr=i(D),PT=n(D,"LI",{});var YSe=s(PT);nbe=n(YSe,"STRONG",{});var oFt=s(nbe);Lmr=r(oFt,"roberta"),oFt.forEach(t),xmr=r(YSe," \u2014 "),XW=n(YSe,"A",{href:!0});var rFt=s(XW);$mr=r(rFt,"TFRobertaModel"),rFt.forEach(t),kmr=r(YSe," (RoBERTa model)"),YSe.forEach(t),Smr=i(D),BT=n(D,"LI",{});var KSe=s(BT);sbe=n(KSe,"STRONG",{});var tFt=s(sbe);Rmr=r(tFt,"roformer"),tFt.forEach(t),Pmr=r(KSe," \u2014 "),zW=n(KSe,"A",{href:!0});var aFt=s(zW);Bmr=r(aFt,"TFRoFormerModel"),aFt.forEach(t),Imr=r(KSe," (RoFormer model)"),KSe.forEach(t),qmr=i(D),IT=n(D,"LI",{});var ZSe=s(IT);lbe=n(ZSe,"STRONG",{});var nFt=s(lbe);Nmr=r(nFt,"speech_to_text"),nFt.forEach(t),jmr=r(ZSe," \u2014 "),WW=n(ZSe,"A",{href:!0});var sFt=s(WW);Dmr=r(sFt,"TFSpeech2TextModel"),sFt.forEach(t),Gmr=r(ZSe," (Speech2Text model)"),ZSe.forEach(t),Omr=i(D),qT=n(D,"LI",{});var eRe=s(qT);ibe=n(eRe,"STRONG",{});var lFt=s(ibe);Vmr=r(lFt,"swin"),lFt.forEach(t),Xmr=r(eRe," \u2014 "),QW=n(eRe,"A",{href:!0});var iFt=s(QW);zmr=r(iFt,"TFSwinModel"),iFt.forEach(t),Wmr=r(eRe," (Swin model)"),eRe.forEach(t),Qmr=i(D),NT=n(D,"LI",{});var oRe=s(NT);dbe=n(oRe,"STRONG",{});var dFt=s(dbe);Hmr=r(dFt,"t5"),dFt.forEach(t),Umr=r(oRe," \u2014 "),HW=n(oRe,"A",{href:!0});var cFt=s(HW);Jmr=r(cFt,"TFT5Model"),cFt.forEach(t),Ymr=r(oRe," (T5 model)"),oRe.forEach(t),Kmr=i(D),jT=n(D,"LI",{});var rRe=s(jT);cbe=n(rRe,"STRONG",{});var fFt=s(cbe);Zmr=r(fFt,"tapas"),fFt.forEach(t),egr=r(rRe," \u2014 "),UW=n(rRe,"A",{href:!0});var mFt=s(UW);ogr=r(mFt,"TFTapasModel"),mFt.forEach(t),rgr=r(rRe," (TAPAS model)"),rRe.forEach(t),tgr=i(D),DT=n(D,"LI",{});var tRe=s(DT);fbe=n(tRe,"STRONG",{});var gFt=s(fbe);agr=r(gFt,"transfo-xl"),gFt.forEach(t),ngr=r(tRe," \u2014 "),JW=n(tRe,"A",{href:!0});var hFt=s(JW);sgr=r(hFt,"TFTransfoXLModel"),hFt.forEach(t),lgr=r(tRe," (Transformer-XL model)"),tRe.forEach(t),igr=i(D),GT=n(D,"LI",{});var aRe=s(GT);mbe=n(aRe,"STRONG",{});var pFt=s(mbe);dgr=r(pFt,"vit"),pFt.forEach(t),cgr=r(aRe," \u2014 "),YW=n(aRe,"A",{href:!0});var uFt=s(YW);fgr=r(uFt,"TFViTModel"),uFt.forEach(t),mgr=r(aRe," (ViT model)"),aRe.forEach(t),ggr=i(D),OT=n(D,"LI",{});var nRe=s(OT);gbe=n(nRe,"STRONG",{});var _Ft=s(gbe);hgr=r(_Ft,"vit_mae"),_Ft.forEach(t),pgr=r(nRe," \u2014 "),KW=n(nRe,"A",{href:!0});var bFt=s(KW);ugr=r(bFt,"TFViTMAEModel"),bFt.forEach(t),_gr=r(nRe," (ViTMAE model)"),nRe.forEach(t),bgr=i(D),VT=n(D,"LI",{});var sRe=s(VT);hbe=n(sRe,"STRONG",{});var vFt=s(hbe);vgr=r(vFt,"wav2vec2"),vFt.forEach(t),Fgr=r(sRe," \u2014 "),ZW=n(sRe,"A",{href:!0});var FFt=s(ZW);Tgr=r(FFt,"TFWav2Vec2Model"),FFt.forEach(t),Mgr=r(sRe," (Wav2Vec2 model)"),sRe.forEach(t),Egr=i(D),XT=n(D,"LI",{});var lRe=s(XT);pbe=n(lRe,"STRONG",{});var TFt=s(pbe);Cgr=r(TFt,"xlm"),TFt.forEach(t),wgr=r(lRe," \u2014 "),eQ=n(lRe,"A",{href:!0});var MFt=s(eQ);Agr=r(MFt,"TFXLMModel"),MFt.forEach(t),ygr=r(lRe," (XLM model)"),lRe.forEach(t),Lgr=i(D),zT=n(D,"LI",{});var iRe=s(zT);ube=n(iRe,"STRONG",{});var EFt=s(ube);xgr=r(EFt,"xlm-roberta"),EFt.forEach(t),$gr=r(iRe," \u2014 "),oQ=n(iRe,"A",{href:!0});var CFt=s(oQ);kgr=r(CFt,"TFXLMRobertaModel"),CFt.forEach(t),Sgr=r(iRe," (XLM-RoBERTa model)"),iRe.forEach(t),Rgr=i(D),WT=n(D,"LI",{});var dRe=s(WT);_be=n(dRe,"STRONG",{});var wFt=s(_be);Pgr=r(wFt,"xlnet"),wFt.forEach(t),Bgr=r(dRe," \u2014 "),rQ=n(dRe,"A",{href:!0});var AFt=s(rQ);Igr=r(AFt,"TFXLNetModel"),AFt.forEach(t),qgr=r(dRe," (XLNet model)"),dRe.forEach(t),D.forEach(t),Ngr=i(hl),T(QT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),dje=i(f),Xd=n(f,"H2",{class:!0});var pGe=s(Xd);HT=n(pGe,"A",{id:!0,class:!0,href:!0});var yFt=s(HT);bbe=n(yFt,"SPAN",{});var LFt=s(bbe);T(hL.$$.fragment,LFt),LFt.forEach(t),yFt.forEach(t),jgr=i(pGe),vbe=n(pGe,"SPAN",{});var xFt=s(vbe);Dgr=r(xFt,"TFAutoModelForPreTraining"),xFt.forEach(t),pGe.forEach(t),cje=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(pL.$$.fragment,pl),Ggr=i(pl),zd=n(pl,"P",{});var mee=s(zd);Ogr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tQ=n(mee,"A",{href:!0});var $Ft=s(tQ);Vgr=r($Ft,"from_pretrained()"),$Ft.forEach(t),Xgr=r(mee," class method or the "),aQ=n(mee,"A",{href:!0});var kFt=s(aQ);zgr=r(kFt,"from_config()"),kFt.forEach(t),Wgr=r(mee,` class
method.`),mee.forEach(t),Qgr=i(pl),uL=n(pl,"P",{});var uGe=s(uL);Hgr=r(uGe,"This class cannot be instantiated directly using "),Fbe=n(uGe,"CODE",{});var SFt=s(Fbe);Ugr=r(SFt,"__init__()"),SFt.forEach(t),Jgr=r(uGe," (throws an error)."),uGe.forEach(t),Ygr=i(pl),Lt=n(pl,"DIV",{class:!0});var y0=s(Lt);T(_L.$$.fragment,y0),Kgr=i(y0),Tbe=n(y0,"P",{});var RFt=s(Tbe);Zgr=r(RFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),RFt.forEach(t),ehr=i(y0),Wd=n(y0,"P",{});var gee=s(Wd);ohr=r(gee,`Note:
Loading a model from its configuration file does `),Mbe=n(gee,"STRONG",{});var PFt=s(Mbe);rhr=r(PFt,"not"),PFt.forEach(t),thr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=n(gee,"A",{href:!0});var BFt=s(nQ);ahr=r(BFt,"from_pretrained()"),BFt.forEach(t),nhr=r(gee," to load the model weights."),gee.forEach(t),shr=i(y0),T(UT.$$.fragment,y0),y0.forEach(t),lhr=i(pl),Ar=n(pl,"DIV",{class:!0});var ul=s(Ar);T(bL.$$.fragment,ul),ihr=i(ul),Ebe=n(ul,"P",{});var IFt=s(Ebe);dhr=r(IFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),IFt.forEach(t),chr=i(ul),Za=n(ul,"P",{});var L0=s(Za);fhr=r(L0,"The model class to instantiate is selected based on the "),Cbe=n(L0,"CODE",{});var qFt=s(Cbe);mhr=r(qFt,"model_type"),qFt.forEach(t),ghr=r(L0,` property of the config object (either
passed as an argument or loaded from `),wbe=n(L0,"CODE",{});var NFt=s(wbe);hhr=r(NFt,"pretrained_model_name_or_path"),NFt.forEach(t),phr=r(L0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=n(L0,"CODE",{});var jFt=s(Abe);uhr=r(jFt,"pretrained_model_name_or_path"),jFt.forEach(t),_hr=r(L0,":"),L0.forEach(t),bhr=i(ul),se=n(ul,"UL",{});var le=s(se);JT=n(le,"LI",{});var cRe=s(JT);ybe=n(cRe,"STRONG",{});var DFt=s(ybe);vhr=r(DFt,"albert"),DFt.forEach(t),Fhr=r(cRe," \u2014 "),sQ=n(cRe,"A",{href:!0});var GFt=s(sQ);Thr=r(GFt,"TFAlbertForPreTraining"),GFt.forEach(t),Mhr=r(cRe," (ALBERT model)"),cRe.forEach(t),Ehr=i(le),YT=n(le,"LI",{});var fRe=s(YT);Lbe=n(fRe,"STRONG",{});var OFt=s(Lbe);Chr=r(OFt,"bart"),OFt.forEach(t),whr=r(fRe," \u2014 "),lQ=n(fRe,"A",{href:!0});var VFt=s(lQ);Ahr=r(VFt,"TFBartForConditionalGeneration"),VFt.forEach(t),yhr=r(fRe," (BART model)"),fRe.forEach(t),Lhr=i(le),KT=n(le,"LI",{});var mRe=s(KT);xbe=n(mRe,"STRONG",{});var XFt=s(xbe);xhr=r(XFt,"bert"),XFt.forEach(t),$hr=r(mRe," \u2014 "),iQ=n(mRe,"A",{href:!0});var zFt=s(iQ);khr=r(zFt,"TFBertForPreTraining"),zFt.forEach(t),Shr=r(mRe," (BERT model)"),mRe.forEach(t),Rhr=i(le),ZT=n(le,"LI",{});var gRe=s(ZT);$be=n(gRe,"STRONG",{});var WFt=s($be);Phr=r(WFt,"camembert"),WFt.forEach(t),Bhr=r(gRe," \u2014 "),dQ=n(gRe,"A",{href:!0});var QFt=s(dQ);Ihr=r(QFt,"TFCamembertForMaskedLM"),QFt.forEach(t),qhr=r(gRe," (CamemBERT model)"),gRe.forEach(t),Nhr=i(le),e7=n(le,"LI",{});var hRe=s(e7);kbe=n(hRe,"STRONG",{});var HFt=s(kbe);jhr=r(HFt,"ctrl"),HFt.forEach(t),Dhr=r(hRe," \u2014 "),cQ=n(hRe,"A",{href:!0});var UFt=s(cQ);Ghr=r(UFt,"TFCTRLLMHeadModel"),UFt.forEach(t),Ohr=r(hRe," (CTRL model)"),hRe.forEach(t),Vhr=i(le),o7=n(le,"LI",{});var pRe=s(o7);Sbe=n(pRe,"STRONG",{});var JFt=s(Sbe);Xhr=r(JFt,"distilbert"),JFt.forEach(t),zhr=r(pRe," \u2014 "),fQ=n(pRe,"A",{href:!0});var YFt=s(fQ);Whr=r(YFt,"TFDistilBertForMaskedLM"),YFt.forEach(t),Qhr=r(pRe," (DistilBERT model)"),pRe.forEach(t),Hhr=i(le),r7=n(le,"LI",{});var uRe=s(r7);Rbe=n(uRe,"STRONG",{});var KFt=s(Rbe);Uhr=r(KFt,"electra"),KFt.forEach(t),Jhr=r(uRe," \u2014 "),mQ=n(uRe,"A",{href:!0});var ZFt=s(mQ);Yhr=r(ZFt,"TFElectraForPreTraining"),ZFt.forEach(t),Khr=r(uRe," (ELECTRA model)"),uRe.forEach(t),Zhr=i(le),t7=n(le,"LI",{});var _Re=s(t7);Pbe=n(_Re,"STRONG",{});var eTt=s(Pbe);epr=r(eTt,"flaubert"),eTt.forEach(t),opr=r(_Re," \u2014 "),gQ=n(_Re,"A",{href:!0});var oTt=s(gQ);rpr=r(oTt,"TFFlaubertWithLMHeadModel"),oTt.forEach(t),tpr=r(_Re," (FlauBERT model)"),_Re.forEach(t),apr=i(le),a7=n(le,"LI",{});var bRe=s(a7);Bbe=n(bRe,"STRONG",{});var rTt=s(Bbe);npr=r(rTt,"funnel"),rTt.forEach(t),spr=r(bRe," \u2014 "),hQ=n(bRe,"A",{href:!0});var tTt=s(hQ);lpr=r(tTt,"TFFunnelForPreTraining"),tTt.forEach(t),ipr=r(bRe," (Funnel Transformer model)"),bRe.forEach(t),dpr=i(le),n7=n(le,"LI",{});var vRe=s(n7);Ibe=n(vRe,"STRONG",{});var aTt=s(Ibe);cpr=r(aTt,"gpt2"),aTt.forEach(t),fpr=r(vRe," \u2014 "),pQ=n(vRe,"A",{href:!0});var nTt=s(pQ);mpr=r(nTt,"TFGPT2LMHeadModel"),nTt.forEach(t),gpr=r(vRe," (OpenAI GPT-2 model)"),vRe.forEach(t),hpr=i(le),s7=n(le,"LI",{});var FRe=s(s7);qbe=n(FRe,"STRONG",{});var sTt=s(qbe);ppr=r(sTt,"layoutlm"),sTt.forEach(t),upr=r(FRe," \u2014 "),uQ=n(FRe,"A",{href:!0});var lTt=s(uQ);_pr=r(lTt,"TFLayoutLMForMaskedLM"),lTt.forEach(t),bpr=r(FRe," (LayoutLM model)"),FRe.forEach(t),vpr=i(le),l7=n(le,"LI",{});var TRe=s(l7);Nbe=n(TRe,"STRONG",{});var iTt=s(Nbe);Fpr=r(iTt,"lxmert"),iTt.forEach(t),Tpr=r(TRe," \u2014 "),_Q=n(TRe,"A",{href:!0});var dTt=s(_Q);Mpr=r(dTt,"TFLxmertForPreTraining"),dTt.forEach(t),Epr=r(TRe," (LXMERT model)"),TRe.forEach(t),Cpr=i(le),i7=n(le,"LI",{});var MRe=s(i7);jbe=n(MRe,"STRONG",{});var cTt=s(jbe);wpr=r(cTt,"mobilebert"),cTt.forEach(t),Apr=r(MRe," \u2014 "),bQ=n(MRe,"A",{href:!0});var fTt=s(bQ);ypr=r(fTt,"TFMobileBertForPreTraining"),fTt.forEach(t),Lpr=r(MRe," (MobileBERT model)"),MRe.forEach(t),xpr=i(le),d7=n(le,"LI",{});var ERe=s(d7);Dbe=n(ERe,"STRONG",{});var mTt=s(Dbe);$pr=r(mTt,"mpnet"),mTt.forEach(t),kpr=r(ERe," \u2014 "),vQ=n(ERe,"A",{href:!0});var gTt=s(vQ);Spr=r(gTt,"TFMPNetForMaskedLM"),gTt.forEach(t),Rpr=r(ERe," (MPNet model)"),ERe.forEach(t),Ppr=i(le),c7=n(le,"LI",{});var CRe=s(c7);Gbe=n(CRe,"STRONG",{});var hTt=s(Gbe);Bpr=r(hTt,"openai-gpt"),hTt.forEach(t),Ipr=r(CRe," \u2014 "),FQ=n(CRe,"A",{href:!0});var pTt=s(FQ);qpr=r(pTt,"TFOpenAIGPTLMHeadModel"),pTt.forEach(t),Npr=r(CRe," (OpenAI GPT model)"),CRe.forEach(t),jpr=i(le),f7=n(le,"LI",{});var wRe=s(f7);Obe=n(wRe,"STRONG",{});var uTt=s(Obe);Dpr=r(uTt,"roberta"),uTt.forEach(t),Gpr=r(wRe," \u2014 "),TQ=n(wRe,"A",{href:!0});var _Tt=s(TQ);Opr=r(_Tt,"TFRobertaForMaskedLM"),_Tt.forEach(t),Vpr=r(wRe," (RoBERTa model)"),wRe.forEach(t),Xpr=i(le),m7=n(le,"LI",{});var ARe=s(m7);Vbe=n(ARe,"STRONG",{});var bTt=s(Vbe);zpr=r(bTt,"t5"),bTt.forEach(t),Wpr=r(ARe," \u2014 "),MQ=n(ARe,"A",{href:!0});var vTt=s(MQ);Qpr=r(vTt,"TFT5ForConditionalGeneration"),vTt.forEach(t),Hpr=r(ARe," (T5 model)"),ARe.forEach(t),Upr=i(le),g7=n(le,"LI",{});var yRe=s(g7);Xbe=n(yRe,"STRONG",{});var FTt=s(Xbe);Jpr=r(FTt,"tapas"),FTt.forEach(t),Ypr=r(yRe," \u2014 "),EQ=n(yRe,"A",{href:!0});var TTt=s(EQ);Kpr=r(TTt,"TFTapasForMaskedLM"),TTt.forEach(t),Zpr=r(yRe," (TAPAS model)"),yRe.forEach(t),eur=i(le),h7=n(le,"LI",{});var LRe=s(h7);zbe=n(LRe,"STRONG",{});var MTt=s(zbe);our=r(MTt,"transfo-xl"),MTt.forEach(t),rur=r(LRe," \u2014 "),CQ=n(LRe,"A",{href:!0});var ETt=s(CQ);tur=r(ETt,"TFTransfoXLLMHeadModel"),ETt.forEach(t),aur=r(LRe," (Transformer-XL model)"),LRe.forEach(t),nur=i(le),p7=n(le,"LI",{});var xRe=s(p7);Wbe=n(xRe,"STRONG",{});var CTt=s(Wbe);sur=r(CTt,"vit_mae"),CTt.forEach(t),lur=r(xRe," \u2014 "),wQ=n(xRe,"A",{href:!0});var wTt=s(wQ);iur=r(wTt,"TFViTMAEForPreTraining"),wTt.forEach(t),dur=r(xRe," (ViTMAE model)"),xRe.forEach(t),cur=i(le),u7=n(le,"LI",{});var $Re=s(u7);Qbe=n($Re,"STRONG",{});var ATt=s(Qbe);fur=r(ATt,"xlm"),ATt.forEach(t),mur=r($Re," \u2014 "),AQ=n($Re,"A",{href:!0});var yTt=s(AQ);gur=r(yTt,"TFXLMWithLMHeadModel"),yTt.forEach(t),hur=r($Re," (XLM model)"),$Re.forEach(t),pur=i(le),_7=n(le,"LI",{});var kRe=s(_7);Hbe=n(kRe,"STRONG",{});var LTt=s(Hbe);uur=r(LTt,"xlm-roberta"),LTt.forEach(t),_ur=r(kRe," \u2014 "),yQ=n(kRe,"A",{href:!0});var xTt=s(yQ);bur=r(xTt,"TFXLMRobertaForMaskedLM"),xTt.forEach(t),vur=r(kRe," (XLM-RoBERTa model)"),kRe.forEach(t),Fur=i(le),b7=n(le,"LI",{});var SRe=s(b7);Ube=n(SRe,"STRONG",{});var $Tt=s(Ube);Tur=r($Tt,"xlnet"),$Tt.forEach(t),Mur=r(SRe," \u2014 "),LQ=n(SRe,"A",{href:!0});var kTt=s(LQ);Eur=r(kTt,"TFXLNetLMHeadModel"),kTt.forEach(t),Cur=r(SRe," (XLNet model)"),SRe.forEach(t),le.forEach(t),wur=i(ul),T(v7.$$.fragment,ul),ul.forEach(t),pl.forEach(t),fje=i(f),Qd=n(f,"H2",{class:!0});var _Ge=s(Qd);F7=n(_Ge,"A",{id:!0,class:!0,href:!0});var STt=s(F7);Jbe=n(STt,"SPAN",{});var RTt=s(Jbe);T(vL.$$.fragment,RTt),RTt.forEach(t),STt.forEach(t),Aur=i(_Ge),Ybe=n(_Ge,"SPAN",{});var PTt=s(Ybe);yur=r(PTt,"TFAutoModelForCausalLM"),PTt.forEach(t),_Ge.forEach(t),mje=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(FL.$$.fragment,_l),Lur=i(_l),Hd=n(_l,"P",{});var hee=s(Hd);xur=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xQ=n(hee,"A",{href:!0});var BTt=s(xQ);$ur=r(BTt,"from_pretrained()"),BTt.forEach(t),kur=r(hee," class method or the "),$Q=n(hee,"A",{href:!0});var ITt=s($Q);Sur=r(ITt,"from_config()"),ITt.forEach(t),Rur=r(hee,` class
method.`),hee.forEach(t),Pur=i(_l),TL=n(_l,"P",{});var bGe=s(TL);Bur=r(bGe,"This class cannot be instantiated directly using "),Kbe=n(bGe,"CODE",{});var qTt=s(Kbe);Iur=r(qTt,"__init__()"),qTt.forEach(t),qur=r(bGe," (throws an error)."),bGe.forEach(t),Nur=i(_l),xt=n(_l,"DIV",{class:!0});var x0=s(xt);T(ML.$$.fragment,x0),jur=i(x0),Zbe=n(x0,"P",{});var NTt=s(Zbe);Dur=r(NTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),NTt.forEach(t),Gur=i(x0),Ud=n(x0,"P",{});var pee=s(Ud);Our=r(pee,`Note:
Loading a model from its configuration file does `),e2e=n(pee,"STRONG",{});var jTt=s(e2e);Vur=r(jTt,"not"),jTt.forEach(t),Xur=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=n(pee,"A",{href:!0});var DTt=s(kQ);zur=r(DTt,"from_pretrained()"),DTt.forEach(t),Wur=r(pee," to load the model weights."),pee.forEach(t),Qur=i(x0),T(T7.$$.fragment,x0),x0.forEach(t),Hur=i(_l),yr=n(_l,"DIV",{class:!0});var bl=s(yr);T(EL.$$.fragment,bl),Uur=i(bl),o2e=n(bl,"P",{});var GTt=s(o2e);Jur=r(GTt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),GTt.forEach(t),Yur=i(bl),en=n(bl,"P",{});var $0=s(en);Kur=r($0,"The model class to instantiate is selected based on the "),r2e=n($0,"CODE",{});var OTt=s(r2e);Zur=r(OTt,"model_type"),OTt.forEach(t),e_r=r($0,` property of the config object (either
passed as an argument or loaded from `),t2e=n($0,"CODE",{});var VTt=s(t2e);o_r=r(VTt,"pretrained_model_name_or_path"),VTt.forEach(t),r_r=r($0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a2e=n($0,"CODE",{});var XTt=s(a2e);t_r=r(XTt,"pretrained_model_name_or_path"),XTt.forEach(t),a_r=r($0,":"),$0.forEach(t),n_r=i(bl),Me=n(bl,"UL",{});var Ce=s(Me);M7=n(Ce,"LI",{});var RRe=s(M7);n2e=n(RRe,"STRONG",{});var zTt=s(n2e);s_r=r(zTt,"bert"),zTt.forEach(t),l_r=r(RRe," \u2014 "),SQ=n(RRe,"A",{href:!0});var WTt=s(SQ);i_r=r(WTt,"TFBertLMHeadModel"),WTt.forEach(t),d_r=r(RRe," (BERT model)"),RRe.forEach(t),c_r=i(Ce),E7=n(Ce,"LI",{});var PRe=s(E7);s2e=n(PRe,"STRONG",{});var QTt=s(s2e);f_r=r(QTt,"camembert"),QTt.forEach(t),m_r=r(PRe," \u2014 "),RQ=n(PRe,"A",{href:!0});var HTt=s(RQ);g_r=r(HTt,"TFCamembertForCausalLM"),HTt.forEach(t),h_r=r(PRe," (CamemBERT model)"),PRe.forEach(t),p_r=i(Ce),C7=n(Ce,"LI",{});var BRe=s(C7);l2e=n(BRe,"STRONG",{});var UTt=s(l2e);u_r=r(UTt,"ctrl"),UTt.forEach(t),__r=r(BRe," \u2014 "),PQ=n(BRe,"A",{href:!0});var JTt=s(PQ);b_r=r(JTt,"TFCTRLLMHeadModel"),JTt.forEach(t),v_r=r(BRe," (CTRL model)"),BRe.forEach(t),F_r=i(Ce),w7=n(Ce,"LI",{});var IRe=s(w7);i2e=n(IRe,"STRONG",{});var YTt=s(i2e);T_r=r(YTt,"gpt2"),YTt.forEach(t),M_r=r(IRe," \u2014 "),BQ=n(IRe,"A",{href:!0});var KTt=s(BQ);E_r=r(KTt,"TFGPT2LMHeadModel"),KTt.forEach(t),C_r=r(IRe," (OpenAI GPT-2 model)"),IRe.forEach(t),w_r=i(Ce),A7=n(Ce,"LI",{});var qRe=s(A7);d2e=n(qRe,"STRONG",{});var ZTt=s(d2e);A_r=r(ZTt,"gptj"),ZTt.forEach(t),y_r=r(qRe," \u2014 "),IQ=n(qRe,"A",{href:!0});var e7t=s(IQ);L_r=r(e7t,"TFGPTJForCausalLM"),e7t.forEach(t),x_r=r(qRe," (GPT-J model)"),qRe.forEach(t),$_r=i(Ce),y7=n(Ce,"LI",{});var NRe=s(y7);c2e=n(NRe,"STRONG",{});var o7t=s(c2e);k_r=r(o7t,"openai-gpt"),o7t.forEach(t),S_r=r(NRe," \u2014 "),qQ=n(NRe,"A",{href:!0});var r7t=s(qQ);R_r=r(r7t,"TFOpenAIGPTLMHeadModel"),r7t.forEach(t),P_r=r(NRe," (OpenAI GPT model)"),NRe.forEach(t),B_r=i(Ce),L7=n(Ce,"LI",{});var jRe=s(L7);f2e=n(jRe,"STRONG",{});var t7t=s(f2e);I_r=r(t7t,"rembert"),t7t.forEach(t),q_r=r(jRe," \u2014 "),NQ=n(jRe,"A",{href:!0});var a7t=s(NQ);N_r=r(a7t,"TFRemBertForCausalLM"),a7t.forEach(t),j_r=r(jRe," (RemBERT model)"),jRe.forEach(t),D_r=i(Ce),x7=n(Ce,"LI",{});var DRe=s(x7);m2e=n(DRe,"STRONG",{});var n7t=s(m2e);G_r=r(n7t,"roberta"),n7t.forEach(t),O_r=r(DRe," \u2014 "),jQ=n(DRe,"A",{href:!0});var s7t=s(jQ);V_r=r(s7t,"TFRobertaForCausalLM"),s7t.forEach(t),X_r=r(DRe," (RoBERTa model)"),DRe.forEach(t),z_r=i(Ce),$7=n(Ce,"LI",{});var GRe=s($7);g2e=n(GRe,"STRONG",{});var l7t=s(g2e);W_r=r(l7t,"roformer"),l7t.forEach(t),Q_r=r(GRe," \u2014 "),DQ=n(GRe,"A",{href:!0});var i7t=s(DQ);H_r=r(i7t,"TFRoFormerForCausalLM"),i7t.forEach(t),U_r=r(GRe," (RoFormer model)"),GRe.forEach(t),J_r=i(Ce),k7=n(Ce,"LI",{});var ORe=s(k7);h2e=n(ORe,"STRONG",{});var d7t=s(h2e);Y_r=r(d7t,"transfo-xl"),d7t.forEach(t),K_r=r(ORe," \u2014 "),GQ=n(ORe,"A",{href:!0});var c7t=s(GQ);Z_r=r(c7t,"TFTransfoXLLMHeadModel"),c7t.forEach(t),e1r=r(ORe," (Transformer-XL model)"),ORe.forEach(t),o1r=i(Ce),S7=n(Ce,"LI",{});var VRe=s(S7);p2e=n(VRe,"STRONG",{});var f7t=s(p2e);r1r=r(f7t,"xlm"),f7t.forEach(t),t1r=r(VRe," \u2014 "),OQ=n(VRe,"A",{href:!0});var m7t=s(OQ);a1r=r(m7t,"TFXLMWithLMHeadModel"),m7t.forEach(t),n1r=r(VRe," (XLM model)"),VRe.forEach(t),s1r=i(Ce),R7=n(Ce,"LI",{});var XRe=s(R7);u2e=n(XRe,"STRONG",{});var g7t=s(u2e);l1r=r(g7t,"xlnet"),g7t.forEach(t),i1r=r(XRe," \u2014 "),VQ=n(XRe,"A",{href:!0});var h7t=s(VQ);d1r=r(h7t,"TFXLNetLMHeadModel"),h7t.forEach(t),c1r=r(XRe," (XLNet model)"),XRe.forEach(t),Ce.forEach(t),f1r=i(bl),T(P7.$$.fragment,bl),bl.forEach(t),_l.forEach(t),gje=i(f),Jd=n(f,"H2",{class:!0});var vGe=s(Jd);B7=n(vGe,"A",{id:!0,class:!0,href:!0});var p7t=s(B7);_2e=n(p7t,"SPAN",{});var u7t=s(_2e);T(CL.$$.fragment,u7t),u7t.forEach(t),p7t.forEach(t),m1r=i(vGe),b2e=n(vGe,"SPAN",{});var _7t=s(b2e);g1r=r(_7t,"TFAutoModelForImageClassification"),_7t.forEach(t),vGe.forEach(t),hje=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(wL.$$.fragment,vl),h1r=i(vl),Yd=n(vl,"P",{});var uee=s(Yd);p1r=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),XQ=n(uee,"A",{href:!0});var b7t=s(XQ);u1r=r(b7t,"from_pretrained()"),b7t.forEach(t),_1r=r(uee," class method or the "),zQ=n(uee,"A",{href:!0});var v7t=s(zQ);b1r=r(v7t,"from_config()"),v7t.forEach(t),v1r=r(uee,` class
method.`),uee.forEach(t),F1r=i(vl),AL=n(vl,"P",{});var FGe=s(AL);T1r=r(FGe,"This class cannot be instantiated directly using "),v2e=n(FGe,"CODE",{});var F7t=s(v2e);M1r=r(F7t,"__init__()"),F7t.forEach(t),E1r=r(FGe," (throws an error)."),FGe.forEach(t),C1r=i(vl),$t=n(vl,"DIV",{class:!0});var k0=s($t);T(yL.$$.fragment,k0),w1r=i(k0),F2e=n(k0,"P",{});var T7t=s(F2e);A1r=r(T7t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),T7t.forEach(t),y1r=i(k0),Kd=n(k0,"P",{});var _ee=s(Kd);L1r=r(_ee,`Note:
Loading a model from its configuration file does `),T2e=n(_ee,"STRONG",{});var M7t=s(T2e);x1r=r(M7t,"not"),M7t.forEach(t),$1r=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=n(_ee,"A",{href:!0});var E7t=s(WQ);k1r=r(E7t,"from_pretrained()"),E7t.forEach(t),S1r=r(_ee," to load the model weights."),_ee.forEach(t),R1r=i(k0),T(I7.$$.fragment,k0),k0.forEach(t),P1r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(LL.$$.fragment,Fl),B1r=i(Fl),M2e=n(Fl,"P",{});var C7t=s(M2e);I1r=r(C7t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),C7t.forEach(t),q1r=i(Fl),on=n(Fl,"P",{});var S0=s(on);N1r=r(S0,"The model class to instantiate is selected based on the "),E2e=n(S0,"CODE",{});var w7t=s(E2e);j1r=r(w7t,"model_type"),w7t.forEach(t),D1r=r(S0,` property of the config object (either
passed as an argument or loaded from `),C2e=n(S0,"CODE",{});var A7t=s(C2e);G1r=r(A7t,"pretrained_model_name_or_path"),A7t.forEach(t),O1r=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=n(S0,"CODE",{});var y7t=s(w2e);V1r=r(y7t,"pretrained_model_name_or_path"),y7t.forEach(t),X1r=r(S0,":"),S0.forEach(t),z1r=i(Fl),rn=n(Fl,"UL",{});var R0=s(rn);q7=n(R0,"LI",{});var zRe=s(q7);A2e=n(zRe,"STRONG",{});var L7t=s(A2e);W1r=r(L7t,"convnext"),L7t.forEach(t),Q1r=r(zRe," \u2014 "),QQ=n(zRe,"A",{href:!0});var x7t=s(QQ);H1r=r(x7t,"TFConvNextForImageClassification"),x7t.forEach(t),U1r=r(zRe," (ConvNext model)"),zRe.forEach(t),J1r=i(R0),N7=n(R0,"LI",{});var WRe=s(N7);y2e=n(WRe,"STRONG",{});var $7t=s(y2e);Y1r=r($7t,"data2vec-vision"),$7t.forEach(t),K1r=r(WRe," \u2014 "),HQ=n(WRe,"A",{href:!0});var k7t=s(HQ);Z1r=r(k7t,"TFData2VecVisionForImageClassification"),k7t.forEach(t),e9r=r(WRe," (Data2VecVision model)"),WRe.forEach(t),o9r=i(R0),j7=n(R0,"LI",{});var QRe=s(j7);L2e=n(QRe,"STRONG",{});var S7t=s(L2e);r9r=r(S7t,"swin"),S7t.forEach(t),t9r=r(QRe," \u2014 "),UQ=n(QRe,"A",{href:!0});var R7t=s(UQ);a9r=r(R7t,"TFSwinForImageClassification"),R7t.forEach(t),n9r=r(QRe," (Swin model)"),QRe.forEach(t),s9r=i(R0),D7=n(R0,"LI",{});var HRe=s(D7);x2e=n(HRe,"STRONG",{});var P7t=s(x2e);l9r=r(P7t,"vit"),P7t.forEach(t),i9r=r(HRe," \u2014 "),JQ=n(HRe,"A",{href:!0});var B7t=s(JQ);d9r=r(B7t,"TFViTForImageClassification"),B7t.forEach(t),c9r=r(HRe," (ViT model)"),HRe.forEach(t),R0.forEach(t),f9r=i(Fl),T(G7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),pje=i(f),Zd=n(f,"H2",{class:!0});var TGe=s(Zd);O7=n(TGe,"A",{id:!0,class:!0,href:!0});var I7t=s(O7);$2e=n(I7t,"SPAN",{});var q7t=s($2e);T(xL.$$.fragment,q7t),q7t.forEach(t),I7t.forEach(t),m9r=i(TGe),k2e=n(TGe,"SPAN",{});var N7t=s(k2e);g9r=r(N7t,"TFAutoModelForMaskedLM"),N7t.forEach(t),TGe.forEach(t),uje=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T($L.$$.fragment,Tl),h9r=i(Tl),ec=n(Tl,"P",{});var bee=s(ec);p9r=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),YQ=n(bee,"A",{href:!0});var j7t=s(YQ);u9r=r(j7t,"from_pretrained()"),j7t.forEach(t),_9r=r(bee," class method or the "),KQ=n(bee,"A",{href:!0});var D7t=s(KQ);b9r=r(D7t,"from_config()"),D7t.forEach(t),v9r=r(bee,` class
method.`),bee.forEach(t),F9r=i(Tl),kL=n(Tl,"P",{});var MGe=s(kL);T9r=r(MGe,"This class cannot be instantiated directly using "),S2e=n(MGe,"CODE",{});var G7t=s(S2e);M9r=r(G7t,"__init__()"),G7t.forEach(t),E9r=r(MGe," (throws an error)."),MGe.forEach(t),C9r=i(Tl),kt=n(Tl,"DIV",{class:!0});var P0=s(kt);T(SL.$$.fragment,P0),w9r=i(P0),R2e=n(P0,"P",{});var O7t=s(R2e);A9r=r(O7t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),O7t.forEach(t),y9r=i(P0),oc=n(P0,"P",{});var vee=s(oc);L9r=r(vee,`Note:
Loading a model from its configuration file does `),P2e=n(vee,"STRONG",{});var V7t=s(P2e);x9r=r(V7t,"not"),V7t.forEach(t),$9r=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=n(vee,"A",{href:!0});var X7t=s(ZQ);k9r=r(X7t,"from_pretrained()"),X7t.forEach(t),S9r=r(vee," to load the model weights."),vee.forEach(t),R9r=i(P0),T(V7.$$.fragment,P0),P0.forEach(t),P9r=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(RL.$$.fragment,Ml),B9r=i(Ml),B2e=n(Ml,"P",{});var z7t=s(B2e);I9r=r(z7t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),z7t.forEach(t),q9r=i(Ml),tn=n(Ml,"P",{});var B0=s(tn);N9r=r(B0,"The model class to instantiate is selected based on the "),I2e=n(B0,"CODE",{});var W7t=s(I2e);j9r=r(W7t,"model_type"),W7t.forEach(t),D9r=r(B0,` property of the config object (either
passed as an argument or loaded from `),q2e=n(B0,"CODE",{});var Q7t=s(q2e);G9r=r(Q7t,"pretrained_model_name_or_path"),Q7t.forEach(t),O9r=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=n(B0,"CODE",{});var H7t=s(N2e);V9r=r(H7t,"pretrained_model_name_or_path"),H7t.forEach(t),X9r=r(B0,":"),B0.forEach(t),z9r=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);X7=n(fe,"LI",{});var URe=s(X7);j2e=n(URe,"STRONG",{});var U7t=s(j2e);W9r=r(U7t,"albert"),U7t.forEach(t),Q9r=r(URe," \u2014 "),eH=n(URe,"A",{href:!0});var J7t=s(eH);H9r=r(J7t,"TFAlbertForMaskedLM"),J7t.forEach(t),U9r=r(URe," (ALBERT model)"),URe.forEach(t),J9r=i(fe),z7=n(fe,"LI",{});var JRe=s(z7);D2e=n(JRe,"STRONG",{});var Y7t=s(D2e);Y9r=r(Y7t,"bert"),Y7t.forEach(t),K9r=r(JRe," \u2014 "),oH=n(JRe,"A",{href:!0});var K7t=s(oH);Z9r=r(K7t,"TFBertForMaskedLM"),K7t.forEach(t),ebr=r(JRe," (BERT model)"),JRe.forEach(t),obr=i(fe),W7=n(fe,"LI",{});var YRe=s(W7);G2e=n(YRe,"STRONG",{});var Z7t=s(G2e);rbr=r(Z7t,"camembert"),Z7t.forEach(t),tbr=r(YRe," \u2014 "),rH=n(YRe,"A",{href:!0});var eMt=s(rH);abr=r(eMt,"TFCamembertForMaskedLM"),eMt.forEach(t),nbr=r(YRe," (CamemBERT model)"),YRe.forEach(t),sbr=i(fe),Q7=n(fe,"LI",{});var KRe=s(Q7);O2e=n(KRe,"STRONG",{});var oMt=s(O2e);lbr=r(oMt,"convbert"),oMt.forEach(t),ibr=r(KRe," \u2014 "),tH=n(KRe,"A",{href:!0});var rMt=s(tH);dbr=r(rMt,"TFConvBertForMaskedLM"),rMt.forEach(t),cbr=r(KRe," (ConvBERT model)"),KRe.forEach(t),fbr=i(fe),H7=n(fe,"LI",{});var ZRe=s(H7);V2e=n(ZRe,"STRONG",{});var tMt=s(V2e);mbr=r(tMt,"deberta"),tMt.forEach(t),gbr=r(ZRe," \u2014 "),aH=n(ZRe,"A",{href:!0});var aMt=s(aH);hbr=r(aMt,"TFDebertaForMaskedLM"),aMt.forEach(t),pbr=r(ZRe," (DeBERTa model)"),ZRe.forEach(t),ubr=i(fe),U7=n(fe,"LI",{});var ePe=s(U7);X2e=n(ePe,"STRONG",{});var nMt=s(X2e);_br=r(nMt,"deberta-v2"),nMt.forEach(t),bbr=r(ePe," \u2014 "),nH=n(ePe,"A",{href:!0});var sMt=s(nH);vbr=r(sMt,"TFDebertaV2ForMaskedLM"),sMt.forEach(t),Fbr=r(ePe," (DeBERTa-v2 model)"),ePe.forEach(t),Tbr=i(fe),J7=n(fe,"LI",{});var oPe=s(J7);z2e=n(oPe,"STRONG",{});var lMt=s(z2e);Mbr=r(lMt,"distilbert"),lMt.forEach(t),Ebr=r(oPe," \u2014 "),sH=n(oPe,"A",{href:!0});var iMt=s(sH);Cbr=r(iMt,"TFDistilBertForMaskedLM"),iMt.forEach(t),wbr=r(oPe," (DistilBERT model)"),oPe.forEach(t),Abr=i(fe),Y7=n(fe,"LI",{});var rPe=s(Y7);W2e=n(rPe,"STRONG",{});var dMt=s(W2e);ybr=r(dMt,"electra"),dMt.forEach(t),Lbr=r(rPe," \u2014 "),lH=n(rPe,"A",{href:!0});var cMt=s(lH);xbr=r(cMt,"TFElectraForMaskedLM"),cMt.forEach(t),$br=r(rPe," (ELECTRA model)"),rPe.forEach(t),kbr=i(fe),K7=n(fe,"LI",{});var tPe=s(K7);Q2e=n(tPe,"STRONG",{});var fMt=s(Q2e);Sbr=r(fMt,"flaubert"),fMt.forEach(t),Rbr=r(tPe," \u2014 "),iH=n(tPe,"A",{href:!0});var mMt=s(iH);Pbr=r(mMt,"TFFlaubertWithLMHeadModel"),mMt.forEach(t),Bbr=r(tPe," (FlauBERT model)"),tPe.forEach(t),Ibr=i(fe),Z7=n(fe,"LI",{});var aPe=s(Z7);H2e=n(aPe,"STRONG",{});var gMt=s(H2e);qbr=r(gMt,"funnel"),gMt.forEach(t),Nbr=r(aPe," \u2014 "),dH=n(aPe,"A",{href:!0});var hMt=s(dH);jbr=r(hMt,"TFFunnelForMaskedLM"),hMt.forEach(t),Dbr=r(aPe," (Funnel Transformer model)"),aPe.forEach(t),Gbr=i(fe),eM=n(fe,"LI",{});var nPe=s(eM);U2e=n(nPe,"STRONG",{});var pMt=s(U2e);Obr=r(pMt,"layoutlm"),pMt.forEach(t),Vbr=r(nPe," \u2014 "),cH=n(nPe,"A",{href:!0});var uMt=s(cH);Xbr=r(uMt,"TFLayoutLMForMaskedLM"),uMt.forEach(t),zbr=r(nPe," (LayoutLM model)"),nPe.forEach(t),Wbr=i(fe),oM=n(fe,"LI",{});var sPe=s(oM);J2e=n(sPe,"STRONG",{});var _Mt=s(J2e);Qbr=r(_Mt,"longformer"),_Mt.forEach(t),Hbr=r(sPe," \u2014 "),fH=n(sPe,"A",{href:!0});var bMt=s(fH);Ubr=r(bMt,"TFLongformerForMaskedLM"),bMt.forEach(t),Jbr=r(sPe," (Longformer model)"),sPe.forEach(t),Ybr=i(fe),rM=n(fe,"LI",{});var lPe=s(rM);Y2e=n(lPe,"STRONG",{});var vMt=s(Y2e);Kbr=r(vMt,"mobilebert"),vMt.forEach(t),Zbr=r(lPe," \u2014 "),mH=n(lPe,"A",{href:!0});var FMt=s(mH);e2r=r(FMt,"TFMobileBertForMaskedLM"),FMt.forEach(t),o2r=r(lPe," (MobileBERT model)"),lPe.forEach(t),r2r=i(fe),tM=n(fe,"LI",{});var iPe=s(tM);K2e=n(iPe,"STRONG",{});var TMt=s(K2e);t2r=r(TMt,"mpnet"),TMt.forEach(t),a2r=r(iPe," \u2014 "),gH=n(iPe,"A",{href:!0});var MMt=s(gH);n2r=r(MMt,"TFMPNetForMaskedLM"),MMt.forEach(t),s2r=r(iPe," (MPNet model)"),iPe.forEach(t),l2r=i(fe),aM=n(fe,"LI",{});var dPe=s(aM);Z2e=n(dPe,"STRONG",{});var EMt=s(Z2e);i2r=r(EMt,"rembert"),EMt.forEach(t),d2r=r(dPe," \u2014 "),hH=n(dPe,"A",{href:!0});var CMt=s(hH);c2r=r(CMt,"TFRemBertForMaskedLM"),CMt.forEach(t),f2r=r(dPe," (RemBERT model)"),dPe.forEach(t),m2r=i(fe),nM=n(fe,"LI",{});var cPe=s(nM);e4e=n(cPe,"STRONG",{});var wMt=s(e4e);g2r=r(wMt,"roberta"),wMt.forEach(t),h2r=r(cPe," \u2014 "),pH=n(cPe,"A",{href:!0});var AMt=s(pH);p2r=r(AMt,"TFRobertaForMaskedLM"),AMt.forEach(t),u2r=r(cPe," (RoBERTa model)"),cPe.forEach(t),_2r=i(fe),sM=n(fe,"LI",{});var fPe=s(sM);o4e=n(fPe,"STRONG",{});var yMt=s(o4e);b2r=r(yMt,"roformer"),yMt.forEach(t),v2r=r(fPe," \u2014 "),uH=n(fPe,"A",{href:!0});var LMt=s(uH);F2r=r(LMt,"TFRoFormerForMaskedLM"),LMt.forEach(t),T2r=r(fPe," (RoFormer model)"),fPe.forEach(t),M2r=i(fe),lM=n(fe,"LI",{});var mPe=s(lM);r4e=n(mPe,"STRONG",{});var xMt=s(r4e);E2r=r(xMt,"tapas"),xMt.forEach(t),C2r=r(mPe," \u2014 "),_H=n(mPe,"A",{href:!0});var $Mt=s(_H);w2r=r($Mt,"TFTapasForMaskedLM"),$Mt.forEach(t),A2r=r(mPe," (TAPAS model)"),mPe.forEach(t),y2r=i(fe),iM=n(fe,"LI",{});var gPe=s(iM);t4e=n(gPe,"STRONG",{});var kMt=s(t4e);L2r=r(kMt,"xlm"),kMt.forEach(t),x2r=r(gPe," \u2014 "),bH=n(gPe,"A",{href:!0});var SMt=s(bH);$2r=r(SMt,"TFXLMWithLMHeadModel"),SMt.forEach(t),k2r=r(gPe," (XLM model)"),gPe.forEach(t),S2r=i(fe),dM=n(fe,"LI",{});var hPe=s(dM);a4e=n(hPe,"STRONG",{});var RMt=s(a4e);R2r=r(RMt,"xlm-roberta"),RMt.forEach(t),P2r=r(hPe," \u2014 "),vH=n(hPe,"A",{href:!0});var PMt=s(vH);B2r=r(PMt,"TFXLMRobertaForMaskedLM"),PMt.forEach(t),I2r=r(hPe," (XLM-RoBERTa model)"),hPe.forEach(t),fe.forEach(t),q2r=i(Ml),T(cM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),_je=i(f),rc=n(f,"H2",{class:!0});var EGe=s(rc);fM=n(EGe,"A",{id:!0,class:!0,href:!0});var BMt=s(fM);n4e=n(BMt,"SPAN",{});var IMt=s(n4e);T(PL.$$.fragment,IMt),IMt.forEach(t),BMt.forEach(t),N2r=i(EGe),s4e=n(EGe,"SPAN",{});var qMt=s(s4e);j2r=r(qMt,"TFAutoModelForSeq2SeqLM"),qMt.forEach(t),EGe.forEach(t),bje=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(BL.$$.fragment,El),D2r=i(El),tc=n(El,"P",{});var Fee=s(tc);G2r=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FH=n(Fee,"A",{href:!0});var NMt=s(FH);O2r=r(NMt,"from_pretrained()"),NMt.forEach(t),V2r=r(Fee," class method or the "),TH=n(Fee,"A",{href:!0});var jMt=s(TH);X2r=r(jMt,"from_config()"),jMt.forEach(t),z2r=r(Fee,` class
method.`),Fee.forEach(t),W2r=i(El),IL=n(El,"P",{});var CGe=s(IL);Q2r=r(CGe,"This class cannot be instantiated directly using "),l4e=n(CGe,"CODE",{});var DMt=s(l4e);H2r=r(DMt,"__init__()"),DMt.forEach(t),U2r=r(CGe," (throws an error)."),CGe.forEach(t),J2r=i(El),St=n(El,"DIV",{class:!0});var I0=s(St);T(qL.$$.fragment,I0),Y2r=i(I0),i4e=n(I0,"P",{});var GMt=s(i4e);K2r=r(GMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),GMt.forEach(t),Z2r=i(I0),ac=n(I0,"P",{});var Tee=s(ac);e4r=r(Tee,`Note:
Loading a model from its configuration file does `),d4e=n(Tee,"STRONG",{});var OMt=s(d4e);o4r=r(OMt,"not"),OMt.forEach(t),r4r=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(Tee,"A",{href:!0});var VMt=s(MH);t4r=r(VMt,"from_pretrained()"),VMt.forEach(t),a4r=r(Tee," to load the model weights."),Tee.forEach(t),n4r=i(I0),T(mM.$$.fragment,I0),I0.forEach(t),s4r=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(NL.$$.fragment,Cl),l4r=i(Cl),c4e=n(Cl,"P",{});var XMt=s(c4e);i4r=r(XMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),XMt.forEach(t),d4r=i(Cl),an=n(Cl,"P",{});var q0=s(an);c4r=r(q0,"The model class to instantiate is selected based on the "),f4e=n(q0,"CODE",{});var zMt=s(f4e);f4r=r(zMt,"model_type"),zMt.forEach(t),m4r=r(q0,` property of the config object (either
passed as an argument or loaded from `),m4e=n(q0,"CODE",{});var WMt=s(m4e);g4r=r(WMt,"pretrained_model_name_or_path"),WMt.forEach(t),h4r=r(q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g4e=n(q0,"CODE",{});var QMt=s(g4e);p4r=r(QMt,"pretrained_model_name_or_path"),QMt.forEach(t),u4r=r(q0,":"),q0.forEach(t),_4r=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);gM=n(Be,"LI",{});var pPe=s(gM);h4e=n(pPe,"STRONG",{});var HMt=s(h4e);b4r=r(HMt,"bart"),HMt.forEach(t),v4r=r(pPe," \u2014 "),EH=n(pPe,"A",{href:!0});var UMt=s(EH);F4r=r(UMt,"TFBartForConditionalGeneration"),UMt.forEach(t),T4r=r(pPe," (BART model)"),pPe.forEach(t),M4r=i(Be),hM=n(Be,"LI",{});var uPe=s(hM);p4e=n(uPe,"STRONG",{});var JMt=s(p4e);E4r=r(JMt,"blenderbot"),JMt.forEach(t),C4r=r(uPe," \u2014 "),CH=n(uPe,"A",{href:!0});var YMt=s(CH);w4r=r(YMt,"TFBlenderbotForConditionalGeneration"),YMt.forEach(t),A4r=r(uPe," (Blenderbot model)"),uPe.forEach(t),y4r=i(Be),pM=n(Be,"LI",{});var _Pe=s(pM);u4e=n(_Pe,"STRONG",{});var KMt=s(u4e);L4r=r(KMt,"blenderbot-small"),KMt.forEach(t),x4r=r(_Pe," \u2014 "),wH=n(_Pe,"A",{href:!0});var ZMt=s(wH);$4r=r(ZMt,"TFBlenderbotSmallForConditionalGeneration"),ZMt.forEach(t),k4r=r(_Pe," (BlenderbotSmall model)"),_Pe.forEach(t),S4r=i(Be),uM=n(Be,"LI",{});var bPe=s(uM);_4e=n(bPe,"STRONG",{});var eEt=s(_4e);R4r=r(eEt,"encoder-decoder"),eEt.forEach(t),P4r=r(bPe," \u2014 "),AH=n(bPe,"A",{href:!0});var oEt=s(AH);B4r=r(oEt,"TFEncoderDecoderModel"),oEt.forEach(t),I4r=r(bPe," (Encoder decoder model)"),bPe.forEach(t),q4r=i(Be),_M=n(Be,"LI",{});var vPe=s(_M);b4e=n(vPe,"STRONG",{});var rEt=s(b4e);N4r=r(rEt,"led"),rEt.forEach(t),j4r=r(vPe," \u2014 "),yH=n(vPe,"A",{href:!0});var tEt=s(yH);D4r=r(tEt,"TFLEDForConditionalGeneration"),tEt.forEach(t),G4r=r(vPe," (LED model)"),vPe.forEach(t),O4r=i(Be),bM=n(Be,"LI",{});var FPe=s(bM);v4e=n(FPe,"STRONG",{});var aEt=s(v4e);V4r=r(aEt,"marian"),aEt.forEach(t),X4r=r(FPe," \u2014 "),LH=n(FPe,"A",{href:!0});var nEt=s(LH);z4r=r(nEt,"TFMarianMTModel"),nEt.forEach(t),W4r=r(FPe," (Marian model)"),FPe.forEach(t),Q4r=i(Be),vM=n(Be,"LI",{});var TPe=s(vM);F4e=n(TPe,"STRONG",{});var sEt=s(F4e);H4r=r(sEt,"mbart"),sEt.forEach(t),U4r=r(TPe," \u2014 "),xH=n(TPe,"A",{href:!0});var lEt=s(xH);J4r=r(lEt,"TFMBartForConditionalGeneration"),lEt.forEach(t),Y4r=r(TPe," (mBART model)"),TPe.forEach(t),K4r=i(Be),FM=n(Be,"LI",{});var MPe=s(FM);T4e=n(MPe,"STRONG",{});var iEt=s(T4e);Z4r=r(iEt,"mt5"),iEt.forEach(t),evr=r(MPe," \u2014 "),$H=n(MPe,"A",{href:!0});var dEt=s($H);ovr=r(dEt,"TFMT5ForConditionalGeneration"),dEt.forEach(t),rvr=r(MPe," (mT5 model)"),MPe.forEach(t),tvr=i(Be),TM=n(Be,"LI",{});var EPe=s(TM);M4e=n(EPe,"STRONG",{});var cEt=s(M4e);avr=r(cEt,"pegasus"),cEt.forEach(t),nvr=r(EPe," \u2014 "),kH=n(EPe,"A",{href:!0});var fEt=s(kH);svr=r(fEt,"TFPegasusForConditionalGeneration"),fEt.forEach(t),lvr=r(EPe," (Pegasus model)"),EPe.forEach(t),ivr=i(Be),MM=n(Be,"LI",{});var CPe=s(MM);E4e=n(CPe,"STRONG",{});var mEt=s(E4e);dvr=r(mEt,"t5"),mEt.forEach(t),cvr=r(CPe," \u2014 "),SH=n(CPe,"A",{href:!0});var gEt=s(SH);fvr=r(gEt,"TFT5ForConditionalGeneration"),gEt.forEach(t),mvr=r(CPe," (T5 model)"),CPe.forEach(t),Be.forEach(t),gvr=i(Cl),T(EM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),vje=i(f),nc=n(f,"H2",{class:!0});var wGe=s(nc);CM=n(wGe,"A",{id:!0,class:!0,href:!0});var hEt=s(CM);C4e=n(hEt,"SPAN",{});var pEt=s(C4e);T(jL.$$.fragment,pEt),pEt.forEach(t),hEt.forEach(t),hvr=i(wGe),w4e=n(wGe,"SPAN",{});var uEt=s(w4e);pvr=r(uEt,"TFAutoModelForSequenceClassification"),uEt.forEach(t),wGe.forEach(t),Fje=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(DL.$$.fragment,wl),uvr=i(wl),sc=n(wl,"P",{});var Mee=s(sc);_vr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),RH=n(Mee,"A",{href:!0});var _Et=s(RH);bvr=r(_Et,"from_pretrained()"),_Et.forEach(t),vvr=r(Mee," class method or the "),PH=n(Mee,"A",{href:!0});var bEt=s(PH);Fvr=r(bEt,"from_config()"),bEt.forEach(t),Tvr=r(Mee,` class
method.`),Mee.forEach(t),Mvr=i(wl),GL=n(wl,"P",{});var AGe=s(GL);Evr=r(AGe,"This class cannot be instantiated directly using "),A4e=n(AGe,"CODE",{});var vEt=s(A4e);Cvr=r(vEt,"__init__()"),vEt.forEach(t),wvr=r(AGe," (throws an error)."),AGe.forEach(t),Avr=i(wl),Rt=n(wl,"DIV",{class:!0});var N0=s(Rt);T(OL.$$.fragment,N0),yvr=i(N0),y4e=n(N0,"P",{});var FEt=s(y4e);Lvr=r(FEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),FEt.forEach(t),xvr=i(N0),lc=n(N0,"P",{});var Eee=s(lc);$vr=r(Eee,`Note:
Loading a model from its configuration file does `),L4e=n(Eee,"STRONG",{});var TEt=s(L4e);kvr=r(TEt,"not"),TEt.forEach(t),Svr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(Eee,"A",{href:!0});var MEt=s(BH);Rvr=r(MEt,"from_pretrained()"),MEt.forEach(t),Pvr=r(Eee," to load the model weights."),Eee.forEach(t),Bvr=i(N0),T(wM.$$.fragment,N0),N0.forEach(t),Ivr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(VL.$$.fragment,Al),qvr=i(Al),x4e=n(Al,"P",{});var EEt=s(x4e);Nvr=r(EEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),EEt.forEach(t),jvr=i(Al),nn=n(Al,"P",{});var j0=s(nn);Dvr=r(j0,"The model class to instantiate is selected based on the "),$4e=n(j0,"CODE",{});var CEt=s($4e);Gvr=r(CEt,"model_type"),CEt.forEach(t),Ovr=r(j0,` property of the config object (either
passed as an argument or loaded from `),k4e=n(j0,"CODE",{});var wEt=s(k4e);Vvr=r(wEt,"pretrained_model_name_or_path"),wEt.forEach(t),Xvr=r(j0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=n(j0,"CODE",{});var AEt=s(S4e);zvr=r(AEt,"pretrained_model_name_or_path"),AEt.forEach(t),Wvr=r(j0,":"),j0.forEach(t),Qvr=i(Al),oe=n(Al,"UL",{});var ae=s(oe);AM=n(ae,"LI",{});var wPe=s(AM);R4e=n(wPe,"STRONG",{});var yEt=s(R4e);Hvr=r(yEt,"albert"),yEt.forEach(t),Uvr=r(wPe," \u2014 "),IH=n(wPe,"A",{href:!0});var LEt=s(IH);Jvr=r(LEt,"TFAlbertForSequenceClassification"),LEt.forEach(t),Yvr=r(wPe," (ALBERT model)"),wPe.forEach(t),Kvr=i(ae),yM=n(ae,"LI",{});var APe=s(yM);P4e=n(APe,"STRONG",{});var xEt=s(P4e);Zvr=r(xEt,"bert"),xEt.forEach(t),eFr=r(APe," \u2014 "),qH=n(APe,"A",{href:!0});var $Et=s(qH);oFr=r($Et,"TFBertForSequenceClassification"),$Et.forEach(t),rFr=r(APe," (BERT model)"),APe.forEach(t),tFr=i(ae),LM=n(ae,"LI",{});var yPe=s(LM);B4e=n(yPe,"STRONG",{});var kEt=s(B4e);aFr=r(kEt,"camembert"),kEt.forEach(t),nFr=r(yPe," \u2014 "),NH=n(yPe,"A",{href:!0});var SEt=s(NH);sFr=r(SEt,"TFCamembertForSequenceClassification"),SEt.forEach(t),lFr=r(yPe," (CamemBERT model)"),yPe.forEach(t),iFr=i(ae),xM=n(ae,"LI",{});var LPe=s(xM);I4e=n(LPe,"STRONG",{});var REt=s(I4e);dFr=r(REt,"convbert"),REt.forEach(t),cFr=r(LPe," \u2014 "),jH=n(LPe,"A",{href:!0});var PEt=s(jH);fFr=r(PEt,"TFConvBertForSequenceClassification"),PEt.forEach(t),mFr=r(LPe," (ConvBERT model)"),LPe.forEach(t),gFr=i(ae),$M=n(ae,"LI",{});var xPe=s($M);q4e=n(xPe,"STRONG",{});var BEt=s(q4e);hFr=r(BEt,"ctrl"),BEt.forEach(t),pFr=r(xPe," \u2014 "),DH=n(xPe,"A",{href:!0});var IEt=s(DH);uFr=r(IEt,"TFCTRLForSequenceClassification"),IEt.forEach(t),_Fr=r(xPe," (CTRL model)"),xPe.forEach(t),bFr=i(ae),kM=n(ae,"LI",{});var $Pe=s(kM);N4e=n($Pe,"STRONG",{});var qEt=s(N4e);vFr=r(qEt,"deberta"),qEt.forEach(t),FFr=r($Pe," \u2014 "),GH=n($Pe,"A",{href:!0});var NEt=s(GH);TFr=r(NEt,"TFDebertaForSequenceClassification"),NEt.forEach(t),MFr=r($Pe," (DeBERTa model)"),$Pe.forEach(t),EFr=i(ae),SM=n(ae,"LI",{});var kPe=s(SM);j4e=n(kPe,"STRONG",{});var jEt=s(j4e);CFr=r(jEt,"deberta-v2"),jEt.forEach(t),wFr=r(kPe," \u2014 "),OH=n(kPe,"A",{href:!0});var DEt=s(OH);AFr=r(DEt,"TFDebertaV2ForSequenceClassification"),DEt.forEach(t),yFr=r(kPe," (DeBERTa-v2 model)"),kPe.forEach(t),LFr=i(ae),RM=n(ae,"LI",{});var SPe=s(RM);D4e=n(SPe,"STRONG",{});var GEt=s(D4e);xFr=r(GEt,"distilbert"),GEt.forEach(t),$Fr=r(SPe," \u2014 "),VH=n(SPe,"A",{href:!0});var OEt=s(VH);kFr=r(OEt,"TFDistilBertForSequenceClassification"),OEt.forEach(t),SFr=r(SPe," (DistilBERT model)"),SPe.forEach(t),RFr=i(ae),PM=n(ae,"LI",{});var RPe=s(PM);G4e=n(RPe,"STRONG",{});var VEt=s(G4e);PFr=r(VEt,"electra"),VEt.forEach(t),BFr=r(RPe," \u2014 "),XH=n(RPe,"A",{href:!0});var XEt=s(XH);IFr=r(XEt,"TFElectraForSequenceClassification"),XEt.forEach(t),qFr=r(RPe," (ELECTRA model)"),RPe.forEach(t),NFr=i(ae),BM=n(ae,"LI",{});var PPe=s(BM);O4e=n(PPe,"STRONG",{});var zEt=s(O4e);jFr=r(zEt,"flaubert"),zEt.forEach(t),DFr=r(PPe," \u2014 "),zH=n(PPe,"A",{href:!0});var WEt=s(zH);GFr=r(WEt,"TFFlaubertForSequenceClassification"),WEt.forEach(t),OFr=r(PPe," (FlauBERT model)"),PPe.forEach(t),VFr=i(ae),IM=n(ae,"LI",{});var BPe=s(IM);V4e=n(BPe,"STRONG",{});var QEt=s(V4e);XFr=r(QEt,"funnel"),QEt.forEach(t),zFr=r(BPe," \u2014 "),WH=n(BPe,"A",{href:!0});var HEt=s(WH);WFr=r(HEt,"TFFunnelForSequenceClassification"),HEt.forEach(t),QFr=r(BPe," (Funnel Transformer model)"),BPe.forEach(t),HFr=i(ae),qM=n(ae,"LI",{});var IPe=s(qM);X4e=n(IPe,"STRONG",{});var UEt=s(X4e);UFr=r(UEt,"gpt2"),UEt.forEach(t),JFr=r(IPe," \u2014 "),QH=n(IPe,"A",{href:!0});var JEt=s(QH);YFr=r(JEt,"TFGPT2ForSequenceClassification"),JEt.forEach(t),KFr=r(IPe," (OpenAI GPT-2 model)"),IPe.forEach(t),ZFr=i(ae),NM=n(ae,"LI",{});var qPe=s(NM);z4e=n(qPe,"STRONG",{});var YEt=s(z4e);eTr=r(YEt,"gptj"),YEt.forEach(t),oTr=r(qPe," \u2014 "),HH=n(qPe,"A",{href:!0});var KEt=s(HH);rTr=r(KEt,"TFGPTJForSequenceClassification"),KEt.forEach(t),tTr=r(qPe," (GPT-J model)"),qPe.forEach(t),aTr=i(ae),jM=n(ae,"LI",{});var NPe=s(jM);W4e=n(NPe,"STRONG",{});var ZEt=s(W4e);nTr=r(ZEt,"layoutlm"),ZEt.forEach(t),sTr=r(NPe," \u2014 "),UH=n(NPe,"A",{href:!0});var eCt=s(UH);lTr=r(eCt,"TFLayoutLMForSequenceClassification"),eCt.forEach(t),iTr=r(NPe," (LayoutLM model)"),NPe.forEach(t),dTr=i(ae),DM=n(ae,"LI",{});var jPe=s(DM);Q4e=n(jPe,"STRONG",{});var oCt=s(Q4e);cTr=r(oCt,"longformer"),oCt.forEach(t),fTr=r(jPe," \u2014 "),JH=n(jPe,"A",{href:!0});var rCt=s(JH);mTr=r(rCt,"TFLongformerForSequenceClassification"),rCt.forEach(t),gTr=r(jPe," (Longformer model)"),jPe.forEach(t),hTr=i(ae),GM=n(ae,"LI",{});var DPe=s(GM);H4e=n(DPe,"STRONG",{});var tCt=s(H4e);pTr=r(tCt,"mobilebert"),tCt.forEach(t),uTr=r(DPe," \u2014 "),YH=n(DPe,"A",{href:!0});var aCt=s(YH);_Tr=r(aCt,"TFMobileBertForSequenceClassification"),aCt.forEach(t),bTr=r(DPe," (MobileBERT model)"),DPe.forEach(t),vTr=i(ae),OM=n(ae,"LI",{});var GPe=s(OM);U4e=n(GPe,"STRONG",{});var nCt=s(U4e);FTr=r(nCt,"mpnet"),nCt.forEach(t),TTr=r(GPe," \u2014 "),KH=n(GPe,"A",{href:!0});var sCt=s(KH);MTr=r(sCt,"TFMPNetForSequenceClassification"),sCt.forEach(t),ETr=r(GPe," (MPNet model)"),GPe.forEach(t),CTr=i(ae),VM=n(ae,"LI",{});var OPe=s(VM);J4e=n(OPe,"STRONG",{});var lCt=s(J4e);wTr=r(lCt,"openai-gpt"),lCt.forEach(t),ATr=r(OPe," \u2014 "),ZH=n(OPe,"A",{href:!0});var iCt=s(ZH);yTr=r(iCt,"TFOpenAIGPTForSequenceClassification"),iCt.forEach(t),LTr=r(OPe," (OpenAI GPT model)"),OPe.forEach(t),xTr=i(ae),XM=n(ae,"LI",{});var VPe=s(XM);Y4e=n(VPe,"STRONG",{});var dCt=s(Y4e);$Tr=r(dCt,"rembert"),dCt.forEach(t),kTr=r(VPe," \u2014 "),eU=n(VPe,"A",{href:!0});var cCt=s(eU);STr=r(cCt,"TFRemBertForSequenceClassification"),cCt.forEach(t),RTr=r(VPe," (RemBERT model)"),VPe.forEach(t),PTr=i(ae),zM=n(ae,"LI",{});var XPe=s(zM);K4e=n(XPe,"STRONG",{});var fCt=s(K4e);BTr=r(fCt,"roberta"),fCt.forEach(t),ITr=r(XPe," \u2014 "),oU=n(XPe,"A",{href:!0});var mCt=s(oU);qTr=r(mCt,"TFRobertaForSequenceClassification"),mCt.forEach(t),NTr=r(XPe," (RoBERTa model)"),XPe.forEach(t),jTr=i(ae),WM=n(ae,"LI",{});var zPe=s(WM);Z4e=n(zPe,"STRONG",{});var gCt=s(Z4e);DTr=r(gCt,"roformer"),gCt.forEach(t),GTr=r(zPe," \u2014 "),rU=n(zPe,"A",{href:!0});var hCt=s(rU);OTr=r(hCt,"TFRoFormerForSequenceClassification"),hCt.forEach(t),VTr=r(zPe," (RoFormer model)"),zPe.forEach(t),XTr=i(ae),QM=n(ae,"LI",{});var WPe=s(QM);eve=n(WPe,"STRONG",{});var pCt=s(eve);zTr=r(pCt,"tapas"),pCt.forEach(t),WTr=r(WPe," \u2014 "),tU=n(WPe,"A",{href:!0});var uCt=s(tU);QTr=r(uCt,"TFTapasForSequenceClassification"),uCt.forEach(t),HTr=r(WPe," (TAPAS model)"),WPe.forEach(t),UTr=i(ae),HM=n(ae,"LI",{});var QPe=s(HM);ove=n(QPe,"STRONG",{});var _Ct=s(ove);JTr=r(_Ct,"transfo-xl"),_Ct.forEach(t),YTr=r(QPe," \u2014 "),aU=n(QPe,"A",{href:!0});var bCt=s(aU);KTr=r(bCt,"TFTransfoXLForSequenceClassification"),bCt.forEach(t),ZTr=r(QPe," (Transformer-XL model)"),QPe.forEach(t),e7r=i(ae),UM=n(ae,"LI",{});var HPe=s(UM);rve=n(HPe,"STRONG",{});var vCt=s(rve);o7r=r(vCt,"xlm"),vCt.forEach(t),r7r=r(HPe," \u2014 "),nU=n(HPe,"A",{href:!0});var FCt=s(nU);t7r=r(FCt,"TFXLMForSequenceClassification"),FCt.forEach(t),a7r=r(HPe," (XLM model)"),HPe.forEach(t),n7r=i(ae),JM=n(ae,"LI",{});var UPe=s(JM);tve=n(UPe,"STRONG",{});var TCt=s(tve);s7r=r(TCt,"xlm-roberta"),TCt.forEach(t),l7r=r(UPe," \u2014 "),sU=n(UPe,"A",{href:!0});var MCt=s(sU);i7r=r(MCt,"TFXLMRobertaForSequenceClassification"),MCt.forEach(t),d7r=r(UPe," (XLM-RoBERTa model)"),UPe.forEach(t),c7r=i(ae),YM=n(ae,"LI",{});var JPe=s(YM);ave=n(JPe,"STRONG",{});var ECt=s(ave);f7r=r(ECt,"xlnet"),ECt.forEach(t),m7r=r(JPe," \u2014 "),lU=n(JPe,"A",{href:!0});var CCt=s(lU);g7r=r(CCt,"TFXLNetForSequenceClassification"),CCt.forEach(t),h7r=r(JPe," (XLNet model)"),JPe.forEach(t),ae.forEach(t),p7r=i(Al),T(KM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),Tje=i(f),ic=n(f,"H2",{class:!0});var yGe=s(ic);ZM=n(yGe,"A",{id:!0,class:!0,href:!0});var wCt=s(ZM);nve=n(wCt,"SPAN",{});var ACt=s(nve);T(XL.$$.fragment,ACt),ACt.forEach(t),wCt.forEach(t),u7r=i(yGe),sve=n(yGe,"SPAN",{});var yCt=s(sve);_7r=r(yCt,"TFAutoModelForMultipleChoice"),yCt.forEach(t),yGe.forEach(t),Mje=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(zL.$$.fragment,yl),b7r=i(yl),dc=n(yl,"P",{});var Cee=s(dc);v7r=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iU=n(Cee,"A",{href:!0});var LCt=s(iU);F7r=r(LCt,"from_pretrained()"),LCt.forEach(t),T7r=r(Cee," class method or the "),dU=n(Cee,"A",{href:!0});var xCt=s(dU);M7r=r(xCt,"from_config()"),xCt.forEach(t),E7r=r(Cee,` class
method.`),Cee.forEach(t),C7r=i(yl),WL=n(yl,"P",{});var LGe=s(WL);w7r=r(LGe,"This class cannot be instantiated directly using "),lve=n(LGe,"CODE",{});var $Ct=s(lve);A7r=r($Ct,"__init__()"),$Ct.forEach(t),y7r=r(LGe," (throws an error)."),LGe.forEach(t),L7r=i(yl),Pt=n(yl,"DIV",{class:!0});var D0=s(Pt);T(QL.$$.fragment,D0),x7r=i(D0),ive=n(D0,"P",{});var kCt=s(ive);$7r=r(kCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),kCt.forEach(t),k7r=i(D0),cc=n(D0,"P",{});var wee=s(cc);S7r=r(wee,`Note:
Loading a model from its configuration file does `),dve=n(wee,"STRONG",{});var SCt=s(dve);R7r=r(SCt,"not"),SCt.forEach(t),P7r=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=n(wee,"A",{href:!0});var RCt=s(cU);B7r=r(RCt,"from_pretrained()"),RCt.forEach(t),I7r=r(wee," to load the model weights."),wee.forEach(t),q7r=i(D0),T(eE.$$.fragment,D0),D0.forEach(t),N7r=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(HL.$$.fragment,Ll),j7r=i(Ll),cve=n(Ll,"P",{});var PCt=s(cve);D7r=r(PCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),PCt.forEach(t),G7r=i(Ll),sn=n(Ll,"P",{});var G0=s(sn);O7r=r(G0,"The model class to instantiate is selected based on the "),fve=n(G0,"CODE",{});var BCt=s(fve);V7r=r(BCt,"model_type"),BCt.forEach(t),X7r=r(G0,` property of the config object (either
passed as an argument or loaded from `),mve=n(G0,"CODE",{});var ICt=s(mve);z7r=r(ICt,"pretrained_model_name_or_path"),ICt.forEach(t),W7r=r(G0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=n(G0,"CODE",{});var qCt=s(gve);Q7r=r(qCt,"pretrained_model_name_or_path"),qCt.forEach(t),H7r=r(G0,":"),G0.forEach(t),U7r=i(Ll),pe=n(Ll,"UL",{});var be=s(pe);oE=n(be,"LI",{});var YPe=s(oE);hve=n(YPe,"STRONG",{});var NCt=s(hve);J7r=r(NCt,"albert"),NCt.forEach(t),Y7r=r(YPe," \u2014 "),fU=n(YPe,"A",{href:!0});var jCt=s(fU);K7r=r(jCt,"TFAlbertForMultipleChoice"),jCt.forEach(t),Z7r=r(YPe," (ALBERT model)"),YPe.forEach(t),eMr=i(be),rE=n(be,"LI",{});var KPe=s(rE);pve=n(KPe,"STRONG",{});var DCt=s(pve);oMr=r(DCt,"bert"),DCt.forEach(t),rMr=r(KPe," \u2014 "),mU=n(KPe,"A",{href:!0});var GCt=s(mU);tMr=r(GCt,"TFBertForMultipleChoice"),GCt.forEach(t),aMr=r(KPe," (BERT model)"),KPe.forEach(t),nMr=i(be),tE=n(be,"LI",{});var ZPe=s(tE);uve=n(ZPe,"STRONG",{});var OCt=s(uve);sMr=r(OCt,"camembert"),OCt.forEach(t),lMr=r(ZPe," \u2014 "),gU=n(ZPe,"A",{href:!0});var VCt=s(gU);iMr=r(VCt,"TFCamembertForMultipleChoice"),VCt.forEach(t),dMr=r(ZPe," (CamemBERT model)"),ZPe.forEach(t),cMr=i(be),aE=n(be,"LI",{});var eBe=s(aE);_ve=n(eBe,"STRONG",{});var XCt=s(_ve);fMr=r(XCt,"convbert"),XCt.forEach(t),mMr=r(eBe," \u2014 "),hU=n(eBe,"A",{href:!0});var zCt=s(hU);gMr=r(zCt,"TFConvBertForMultipleChoice"),zCt.forEach(t),hMr=r(eBe," (ConvBERT model)"),eBe.forEach(t),pMr=i(be),nE=n(be,"LI",{});var oBe=s(nE);bve=n(oBe,"STRONG",{});var WCt=s(bve);uMr=r(WCt,"distilbert"),WCt.forEach(t),_Mr=r(oBe," \u2014 "),pU=n(oBe,"A",{href:!0});var QCt=s(pU);bMr=r(QCt,"TFDistilBertForMultipleChoice"),QCt.forEach(t),vMr=r(oBe," (DistilBERT model)"),oBe.forEach(t),FMr=i(be),sE=n(be,"LI",{});var rBe=s(sE);vve=n(rBe,"STRONG",{});var HCt=s(vve);TMr=r(HCt,"electra"),HCt.forEach(t),MMr=r(rBe," \u2014 "),uU=n(rBe,"A",{href:!0});var UCt=s(uU);EMr=r(UCt,"TFElectraForMultipleChoice"),UCt.forEach(t),CMr=r(rBe," (ELECTRA model)"),rBe.forEach(t),wMr=i(be),lE=n(be,"LI",{});var tBe=s(lE);Fve=n(tBe,"STRONG",{});var JCt=s(Fve);AMr=r(JCt,"flaubert"),JCt.forEach(t),yMr=r(tBe," \u2014 "),_U=n(tBe,"A",{href:!0});var YCt=s(_U);LMr=r(YCt,"TFFlaubertForMultipleChoice"),YCt.forEach(t),xMr=r(tBe," (FlauBERT model)"),tBe.forEach(t),$Mr=i(be),iE=n(be,"LI",{});var aBe=s(iE);Tve=n(aBe,"STRONG",{});var KCt=s(Tve);kMr=r(KCt,"funnel"),KCt.forEach(t),SMr=r(aBe," \u2014 "),bU=n(aBe,"A",{href:!0});var ZCt=s(bU);RMr=r(ZCt,"TFFunnelForMultipleChoice"),ZCt.forEach(t),PMr=r(aBe," (Funnel Transformer model)"),aBe.forEach(t),BMr=i(be),dE=n(be,"LI",{});var nBe=s(dE);Mve=n(nBe,"STRONG",{});var e5t=s(Mve);IMr=r(e5t,"longformer"),e5t.forEach(t),qMr=r(nBe," \u2014 "),vU=n(nBe,"A",{href:!0});var o5t=s(vU);NMr=r(o5t,"TFLongformerForMultipleChoice"),o5t.forEach(t),jMr=r(nBe," (Longformer model)"),nBe.forEach(t),DMr=i(be),cE=n(be,"LI",{});var sBe=s(cE);Eve=n(sBe,"STRONG",{});var r5t=s(Eve);GMr=r(r5t,"mobilebert"),r5t.forEach(t),OMr=r(sBe," \u2014 "),FU=n(sBe,"A",{href:!0});var t5t=s(FU);VMr=r(t5t,"TFMobileBertForMultipleChoice"),t5t.forEach(t),XMr=r(sBe," (MobileBERT model)"),sBe.forEach(t),zMr=i(be),fE=n(be,"LI",{});var lBe=s(fE);Cve=n(lBe,"STRONG",{});var a5t=s(Cve);WMr=r(a5t,"mpnet"),a5t.forEach(t),QMr=r(lBe," \u2014 "),TU=n(lBe,"A",{href:!0});var n5t=s(TU);HMr=r(n5t,"TFMPNetForMultipleChoice"),n5t.forEach(t),UMr=r(lBe," (MPNet model)"),lBe.forEach(t),JMr=i(be),mE=n(be,"LI",{});var iBe=s(mE);wve=n(iBe,"STRONG",{});var s5t=s(wve);YMr=r(s5t,"rembert"),s5t.forEach(t),KMr=r(iBe," \u2014 "),MU=n(iBe,"A",{href:!0});var l5t=s(MU);ZMr=r(l5t,"TFRemBertForMultipleChoice"),l5t.forEach(t),eEr=r(iBe," (RemBERT model)"),iBe.forEach(t),oEr=i(be),gE=n(be,"LI",{});var dBe=s(gE);Ave=n(dBe,"STRONG",{});var i5t=s(Ave);rEr=r(i5t,"roberta"),i5t.forEach(t),tEr=r(dBe," \u2014 "),EU=n(dBe,"A",{href:!0});var d5t=s(EU);aEr=r(d5t,"TFRobertaForMultipleChoice"),d5t.forEach(t),nEr=r(dBe," (RoBERTa model)"),dBe.forEach(t),sEr=i(be),hE=n(be,"LI",{});var cBe=s(hE);yve=n(cBe,"STRONG",{});var c5t=s(yve);lEr=r(c5t,"roformer"),c5t.forEach(t),iEr=r(cBe," \u2014 "),CU=n(cBe,"A",{href:!0});var f5t=s(CU);dEr=r(f5t,"TFRoFormerForMultipleChoice"),f5t.forEach(t),cEr=r(cBe," (RoFormer model)"),cBe.forEach(t),fEr=i(be),pE=n(be,"LI",{});var fBe=s(pE);Lve=n(fBe,"STRONG",{});var m5t=s(Lve);mEr=r(m5t,"xlm"),m5t.forEach(t),gEr=r(fBe," \u2014 "),wU=n(fBe,"A",{href:!0});var g5t=s(wU);hEr=r(g5t,"TFXLMForMultipleChoice"),g5t.forEach(t),pEr=r(fBe," (XLM model)"),fBe.forEach(t),uEr=i(be),uE=n(be,"LI",{});var mBe=s(uE);xve=n(mBe,"STRONG",{});var h5t=s(xve);_Er=r(h5t,"xlm-roberta"),h5t.forEach(t),bEr=r(mBe," \u2014 "),AU=n(mBe,"A",{href:!0});var p5t=s(AU);vEr=r(p5t,"TFXLMRobertaForMultipleChoice"),p5t.forEach(t),FEr=r(mBe," (XLM-RoBERTa model)"),mBe.forEach(t),TEr=i(be),_E=n(be,"LI",{});var gBe=s(_E);$ve=n(gBe,"STRONG",{});var u5t=s($ve);MEr=r(u5t,"xlnet"),u5t.forEach(t),EEr=r(gBe," \u2014 "),yU=n(gBe,"A",{href:!0});var _5t=s(yU);CEr=r(_5t,"TFXLNetForMultipleChoice"),_5t.forEach(t),wEr=r(gBe," (XLNet model)"),gBe.forEach(t),be.forEach(t),AEr=i(Ll),T(bE.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),Eje=i(f),fc=n(f,"H2",{class:!0});var xGe=s(fc);vE=n(xGe,"A",{id:!0,class:!0,href:!0});var b5t=s(vE);kve=n(b5t,"SPAN",{});var v5t=s(kve);T(UL.$$.fragment,v5t),v5t.forEach(t),b5t.forEach(t),yEr=i(xGe),Sve=n(xGe,"SPAN",{});var F5t=s(Sve);LEr=r(F5t,"TFAutoModelForNextSentencePrediction"),F5t.forEach(t),xGe.forEach(t),Cje=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(JL.$$.fragment,xl),xEr=i(xl),mc=n(xl,"P",{});var Aee=s(mc);$Er=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),LU=n(Aee,"A",{href:!0});var T5t=s(LU);kEr=r(T5t,"from_pretrained()"),T5t.forEach(t),SEr=r(Aee," class method or the "),xU=n(Aee,"A",{href:!0});var M5t=s(xU);REr=r(M5t,"from_config()"),M5t.forEach(t),PEr=r(Aee,` class
method.`),Aee.forEach(t),BEr=i(xl),YL=n(xl,"P",{});var $Ge=s(YL);IEr=r($Ge,"This class cannot be instantiated directly using "),Rve=n($Ge,"CODE",{});var E5t=s(Rve);qEr=r(E5t,"__init__()"),E5t.forEach(t),NEr=r($Ge," (throws an error)."),$Ge.forEach(t),jEr=i(xl),Bt=n(xl,"DIV",{class:!0});var O0=s(Bt);T(KL.$$.fragment,O0),DEr=i(O0),Pve=n(O0,"P",{});var C5t=s(Pve);GEr=r(C5t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),C5t.forEach(t),OEr=i(O0),gc=n(O0,"P",{});var yee=s(gc);VEr=r(yee,`Note:
Loading a model from its configuration file does `),Bve=n(yee,"STRONG",{});var w5t=s(Bve);XEr=r(w5t,"not"),w5t.forEach(t),zEr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=n(yee,"A",{href:!0});var A5t=s($U);WEr=r(A5t,"from_pretrained()"),A5t.forEach(t),QEr=r(yee," to load the model weights."),yee.forEach(t),HEr=i(O0),T(FE.$$.fragment,O0),O0.forEach(t),UEr=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(ZL.$$.fragment,$l),JEr=i($l),Ive=n($l,"P",{});var y5t=s(Ive);YEr=r(y5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),y5t.forEach(t),KEr=i($l),ln=n($l,"P",{});var V0=s(ln);ZEr=r(V0,"The model class to instantiate is selected based on the "),qve=n(V0,"CODE",{});var L5t=s(qve);eCr=r(L5t,"model_type"),L5t.forEach(t),oCr=r(V0,` property of the config object (either
passed as an argument or loaded from `),Nve=n(V0,"CODE",{});var x5t=s(Nve);rCr=r(x5t,"pretrained_model_name_or_path"),x5t.forEach(t),tCr=r(V0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=n(V0,"CODE",{});var $5t=s(jve);aCr=r($5t,"pretrained_model_name_or_path"),$5t.forEach(t),nCr=r(V0,":"),V0.forEach(t),sCr=i($l),e8=n($l,"UL",{});var kGe=s(e8);TE=n(kGe,"LI",{});var hBe=s(TE);Dve=n(hBe,"STRONG",{});var k5t=s(Dve);lCr=r(k5t,"bert"),k5t.forEach(t),iCr=r(hBe," \u2014 "),kU=n(hBe,"A",{href:!0});var S5t=s(kU);dCr=r(S5t,"TFBertForNextSentencePrediction"),S5t.forEach(t),cCr=r(hBe," (BERT model)"),hBe.forEach(t),fCr=i(kGe),ME=n(kGe,"LI",{});var pBe=s(ME);Gve=n(pBe,"STRONG",{});var R5t=s(Gve);mCr=r(R5t,"mobilebert"),R5t.forEach(t),gCr=r(pBe," \u2014 "),SU=n(pBe,"A",{href:!0});var P5t=s(SU);hCr=r(P5t,"TFMobileBertForNextSentencePrediction"),P5t.forEach(t),pCr=r(pBe," (MobileBERT model)"),pBe.forEach(t),kGe.forEach(t),uCr=i($l),T(EE.$$.fragment,$l),$l.forEach(t),xl.forEach(t),wje=i(f),hc=n(f,"H2",{class:!0});var SGe=s(hc);CE=n(SGe,"A",{id:!0,class:!0,href:!0});var B5t=s(CE);Ove=n(B5t,"SPAN",{});var I5t=s(Ove);T(o8.$$.fragment,I5t),I5t.forEach(t),B5t.forEach(t),_Cr=i(SGe),Vve=n(SGe,"SPAN",{});var q5t=s(Vve);bCr=r(q5t,"TFAutoModelForTableQuestionAnswering"),q5t.forEach(t),SGe.forEach(t),Aje=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(r8.$$.fragment,kl),vCr=i(kl),pc=n(kl,"P",{});var Lee=s(pc);FCr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),RU=n(Lee,"A",{href:!0});var N5t=s(RU);TCr=r(N5t,"from_pretrained()"),N5t.forEach(t),MCr=r(Lee," class method or the "),PU=n(Lee,"A",{href:!0});var j5t=s(PU);ECr=r(j5t,"from_config()"),j5t.forEach(t),CCr=r(Lee,` class
method.`),Lee.forEach(t),wCr=i(kl),t8=n(kl,"P",{});var RGe=s(t8);ACr=r(RGe,"This class cannot be instantiated directly using "),Xve=n(RGe,"CODE",{});var D5t=s(Xve);yCr=r(D5t,"__init__()"),D5t.forEach(t),LCr=r(RGe," (throws an error)."),RGe.forEach(t),xCr=i(kl),It=n(kl,"DIV",{class:!0});var X0=s(It);T(a8.$$.fragment,X0),$Cr=i(X0),zve=n(X0,"P",{});var G5t=s(zve);kCr=r(G5t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),G5t.forEach(t),SCr=i(X0),uc=n(X0,"P",{});var xee=s(uc);RCr=r(xee,`Note:
Loading a model from its configuration file does `),Wve=n(xee,"STRONG",{});var O5t=s(Wve);PCr=r(O5t,"not"),O5t.forEach(t),BCr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=n(xee,"A",{href:!0});var V5t=s(BU);ICr=r(V5t,"from_pretrained()"),V5t.forEach(t),qCr=r(xee," to load the model weights."),xee.forEach(t),NCr=i(X0),T(wE.$$.fragment,X0),X0.forEach(t),jCr=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(n8.$$.fragment,Sl),DCr=i(Sl),Qve=n(Sl,"P",{});var X5t=s(Qve);GCr=r(X5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),X5t.forEach(t),OCr=i(Sl),dn=n(Sl,"P",{});var z0=s(dn);VCr=r(z0,"The model class to instantiate is selected based on the "),Hve=n(z0,"CODE",{});var z5t=s(Hve);XCr=r(z5t,"model_type"),z5t.forEach(t),zCr=r(z0,` property of the config object (either
passed as an argument or loaded from `),Uve=n(z0,"CODE",{});var W5t=s(Uve);WCr=r(W5t,"pretrained_model_name_or_path"),W5t.forEach(t),QCr=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=n(z0,"CODE",{});var Q5t=s(Jve);HCr=r(Q5t,"pretrained_model_name_or_path"),Q5t.forEach(t),UCr=r(z0,":"),z0.forEach(t),JCr=i(Sl),Yve=n(Sl,"UL",{});var H5t=s(Yve);AE=n(H5t,"LI",{});var uBe=s(AE);Kve=n(uBe,"STRONG",{});var U5t=s(Kve);YCr=r(U5t,"tapas"),U5t.forEach(t),KCr=r(uBe," \u2014 "),IU=n(uBe,"A",{href:!0});var J5t=s(IU);ZCr=r(J5t,"TFTapasForQuestionAnswering"),J5t.forEach(t),e5r=r(uBe," (TAPAS model)"),uBe.forEach(t),H5t.forEach(t),o5r=i(Sl),T(yE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),yje=i(f),_c=n(f,"H2",{class:!0});var PGe=s(_c);LE=n(PGe,"A",{id:!0,class:!0,href:!0});var Y5t=s(LE);Zve=n(Y5t,"SPAN",{});var K5t=s(Zve);T(s8.$$.fragment,K5t),K5t.forEach(t),Y5t.forEach(t),r5r=i(PGe),eFe=n(PGe,"SPAN",{});var Z5t=s(eFe);t5r=r(Z5t,"TFAutoModelForTokenClassification"),Z5t.forEach(t),PGe.forEach(t),Lje=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(l8.$$.fragment,Rl),a5r=i(Rl),bc=n(Rl,"P",{});var $ee=s(bc);n5r=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),qU=n($ee,"A",{href:!0});var e3t=s(qU);s5r=r(e3t,"from_pretrained()"),e3t.forEach(t),l5r=r($ee," class method or the "),NU=n($ee,"A",{href:!0});var o3t=s(NU);i5r=r(o3t,"from_config()"),o3t.forEach(t),d5r=r($ee,` class
method.`),$ee.forEach(t),c5r=i(Rl),i8=n(Rl,"P",{});var BGe=s(i8);f5r=r(BGe,"This class cannot be instantiated directly using "),oFe=n(BGe,"CODE",{});var r3t=s(oFe);m5r=r(r3t,"__init__()"),r3t.forEach(t),g5r=r(BGe," (throws an error)."),BGe.forEach(t),h5r=i(Rl),qt=n(Rl,"DIV",{class:!0});var W0=s(qt);T(d8.$$.fragment,W0),p5r=i(W0),rFe=n(W0,"P",{});var t3t=s(rFe);u5r=r(t3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),t3t.forEach(t),_5r=i(W0),vc=n(W0,"P",{});var kee=s(vc);b5r=r(kee,`Note:
Loading a model from its configuration file does `),tFe=n(kee,"STRONG",{});var a3t=s(tFe);v5r=r(a3t,"not"),a3t.forEach(t),F5r=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=n(kee,"A",{href:!0});var n3t=s(jU);T5r=r(n3t,"from_pretrained()"),n3t.forEach(t),M5r=r(kee," to load the model weights."),kee.forEach(t),E5r=i(W0),T(xE.$$.fragment,W0),W0.forEach(t),C5r=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(c8.$$.fragment,Pl),w5r=i(Pl),aFe=n(Pl,"P",{});var s3t=s(aFe);A5r=r(s3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),s3t.forEach(t),y5r=i(Pl),cn=n(Pl,"P",{});var Q0=s(cn);L5r=r(Q0,"The model class to instantiate is selected based on the "),nFe=n(Q0,"CODE",{});var l3t=s(nFe);x5r=r(l3t,"model_type"),l3t.forEach(t),$5r=r(Q0,` property of the config object (either
passed as an argument or loaded from `),sFe=n(Q0,"CODE",{});var i3t=s(sFe);k5r=r(i3t,"pretrained_model_name_or_path"),i3t.forEach(t),S5r=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=n(Q0,"CODE",{});var d3t=s(lFe);R5r=r(d3t,"pretrained_model_name_or_path"),d3t.forEach(t),P5r=r(Q0,":"),Q0.forEach(t),B5r=i(Pl),de=n(Pl,"UL",{});var me=s(de);$E=n(me,"LI",{});var _Be=s($E);iFe=n(_Be,"STRONG",{});var c3t=s(iFe);I5r=r(c3t,"albert"),c3t.forEach(t),q5r=r(_Be," \u2014 "),DU=n(_Be,"A",{href:!0});var f3t=s(DU);N5r=r(f3t,"TFAlbertForTokenClassification"),f3t.forEach(t),j5r=r(_Be," (ALBERT model)"),_Be.forEach(t),D5r=i(me),kE=n(me,"LI",{});var bBe=s(kE);dFe=n(bBe,"STRONG",{});var m3t=s(dFe);G5r=r(m3t,"bert"),m3t.forEach(t),O5r=r(bBe," \u2014 "),GU=n(bBe,"A",{href:!0});var g3t=s(GU);V5r=r(g3t,"TFBertForTokenClassification"),g3t.forEach(t),X5r=r(bBe," (BERT model)"),bBe.forEach(t),z5r=i(me),SE=n(me,"LI",{});var vBe=s(SE);cFe=n(vBe,"STRONG",{});var h3t=s(cFe);W5r=r(h3t,"camembert"),h3t.forEach(t),Q5r=r(vBe," \u2014 "),OU=n(vBe,"A",{href:!0});var p3t=s(OU);H5r=r(p3t,"TFCamembertForTokenClassification"),p3t.forEach(t),U5r=r(vBe," (CamemBERT model)"),vBe.forEach(t),J5r=i(me),RE=n(me,"LI",{});var FBe=s(RE);fFe=n(FBe,"STRONG",{});var u3t=s(fFe);Y5r=r(u3t,"convbert"),u3t.forEach(t),K5r=r(FBe," \u2014 "),VU=n(FBe,"A",{href:!0});var _3t=s(VU);Z5r=r(_3t,"TFConvBertForTokenClassification"),_3t.forEach(t),e3r=r(FBe," (ConvBERT model)"),FBe.forEach(t),o3r=i(me),PE=n(me,"LI",{});var TBe=s(PE);mFe=n(TBe,"STRONG",{});var b3t=s(mFe);r3r=r(b3t,"deberta"),b3t.forEach(t),t3r=r(TBe," \u2014 "),XU=n(TBe,"A",{href:!0});var v3t=s(XU);a3r=r(v3t,"TFDebertaForTokenClassification"),v3t.forEach(t),n3r=r(TBe," (DeBERTa model)"),TBe.forEach(t),s3r=i(me),BE=n(me,"LI",{});var MBe=s(BE);gFe=n(MBe,"STRONG",{});var F3t=s(gFe);l3r=r(F3t,"deberta-v2"),F3t.forEach(t),i3r=r(MBe," \u2014 "),zU=n(MBe,"A",{href:!0});var T3t=s(zU);d3r=r(T3t,"TFDebertaV2ForTokenClassification"),T3t.forEach(t),c3r=r(MBe," (DeBERTa-v2 model)"),MBe.forEach(t),f3r=i(me),IE=n(me,"LI",{});var EBe=s(IE);hFe=n(EBe,"STRONG",{});var M3t=s(hFe);m3r=r(M3t,"distilbert"),M3t.forEach(t),g3r=r(EBe," \u2014 "),WU=n(EBe,"A",{href:!0});var E3t=s(WU);h3r=r(E3t,"TFDistilBertForTokenClassification"),E3t.forEach(t),p3r=r(EBe," (DistilBERT model)"),EBe.forEach(t),u3r=i(me),qE=n(me,"LI",{});var CBe=s(qE);pFe=n(CBe,"STRONG",{});var C3t=s(pFe);_3r=r(C3t,"electra"),C3t.forEach(t),b3r=r(CBe," \u2014 "),QU=n(CBe,"A",{href:!0});var w3t=s(QU);v3r=r(w3t,"TFElectraForTokenClassification"),w3t.forEach(t),F3r=r(CBe," (ELECTRA model)"),CBe.forEach(t),T3r=i(me),NE=n(me,"LI",{});var wBe=s(NE);uFe=n(wBe,"STRONG",{});var A3t=s(uFe);M3r=r(A3t,"flaubert"),A3t.forEach(t),E3r=r(wBe," \u2014 "),HU=n(wBe,"A",{href:!0});var y3t=s(HU);C3r=r(y3t,"TFFlaubertForTokenClassification"),y3t.forEach(t),w3r=r(wBe," (FlauBERT model)"),wBe.forEach(t),A3r=i(me),jE=n(me,"LI",{});var ABe=s(jE);_Fe=n(ABe,"STRONG",{});var L3t=s(_Fe);y3r=r(L3t,"funnel"),L3t.forEach(t),L3r=r(ABe," \u2014 "),UU=n(ABe,"A",{href:!0});var x3t=s(UU);x3r=r(x3t,"TFFunnelForTokenClassification"),x3t.forEach(t),$3r=r(ABe," (Funnel Transformer model)"),ABe.forEach(t),k3r=i(me),DE=n(me,"LI",{});var yBe=s(DE);bFe=n(yBe,"STRONG",{});var $3t=s(bFe);S3r=r($3t,"layoutlm"),$3t.forEach(t),R3r=r(yBe," \u2014 "),JU=n(yBe,"A",{href:!0});var k3t=s(JU);P3r=r(k3t,"TFLayoutLMForTokenClassification"),k3t.forEach(t),B3r=r(yBe," (LayoutLM model)"),yBe.forEach(t),I3r=i(me),GE=n(me,"LI",{});var LBe=s(GE);vFe=n(LBe,"STRONG",{});var S3t=s(vFe);q3r=r(S3t,"longformer"),S3t.forEach(t),N3r=r(LBe," \u2014 "),YU=n(LBe,"A",{href:!0});var R3t=s(YU);j3r=r(R3t,"TFLongformerForTokenClassification"),R3t.forEach(t),D3r=r(LBe," (Longformer model)"),LBe.forEach(t),G3r=i(me),OE=n(me,"LI",{});var xBe=s(OE);FFe=n(xBe,"STRONG",{});var P3t=s(FFe);O3r=r(P3t,"mobilebert"),P3t.forEach(t),V3r=r(xBe," \u2014 "),KU=n(xBe,"A",{href:!0});var B3t=s(KU);X3r=r(B3t,"TFMobileBertForTokenClassification"),B3t.forEach(t),z3r=r(xBe," (MobileBERT model)"),xBe.forEach(t),W3r=i(me),VE=n(me,"LI",{});var $Be=s(VE);TFe=n($Be,"STRONG",{});var I3t=s(TFe);Q3r=r(I3t,"mpnet"),I3t.forEach(t),H3r=r($Be," \u2014 "),ZU=n($Be,"A",{href:!0});var q3t=s(ZU);U3r=r(q3t,"TFMPNetForTokenClassification"),q3t.forEach(t),J3r=r($Be," (MPNet model)"),$Be.forEach(t),Y3r=i(me),XE=n(me,"LI",{});var kBe=s(XE);MFe=n(kBe,"STRONG",{});var N3t=s(MFe);K3r=r(N3t,"rembert"),N3t.forEach(t),Z3r=r(kBe," \u2014 "),eJ=n(kBe,"A",{href:!0});var j3t=s(eJ);ewr=r(j3t,"TFRemBertForTokenClassification"),j3t.forEach(t),owr=r(kBe," (RemBERT model)"),kBe.forEach(t),rwr=i(me),zE=n(me,"LI",{});var SBe=s(zE);EFe=n(SBe,"STRONG",{});var D3t=s(EFe);twr=r(D3t,"roberta"),D3t.forEach(t),awr=r(SBe," \u2014 "),oJ=n(SBe,"A",{href:!0});var G3t=s(oJ);nwr=r(G3t,"TFRobertaForTokenClassification"),G3t.forEach(t),swr=r(SBe," (RoBERTa model)"),SBe.forEach(t),lwr=i(me),WE=n(me,"LI",{});var RBe=s(WE);CFe=n(RBe,"STRONG",{});var O3t=s(CFe);iwr=r(O3t,"roformer"),O3t.forEach(t),dwr=r(RBe," \u2014 "),rJ=n(RBe,"A",{href:!0});var V3t=s(rJ);cwr=r(V3t,"TFRoFormerForTokenClassification"),V3t.forEach(t),fwr=r(RBe," (RoFormer model)"),RBe.forEach(t),mwr=i(me),QE=n(me,"LI",{});var PBe=s(QE);wFe=n(PBe,"STRONG",{});var X3t=s(wFe);gwr=r(X3t,"xlm"),X3t.forEach(t),hwr=r(PBe," \u2014 "),tJ=n(PBe,"A",{href:!0});var z3t=s(tJ);pwr=r(z3t,"TFXLMForTokenClassification"),z3t.forEach(t),uwr=r(PBe," (XLM model)"),PBe.forEach(t),_wr=i(me),HE=n(me,"LI",{});var BBe=s(HE);AFe=n(BBe,"STRONG",{});var W3t=s(AFe);bwr=r(W3t,"xlm-roberta"),W3t.forEach(t),vwr=r(BBe," \u2014 "),aJ=n(BBe,"A",{href:!0});var Q3t=s(aJ);Fwr=r(Q3t,"TFXLMRobertaForTokenClassification"),Q3t.forEach(t),Twr=r(BBe," (XLM-RoBERTa model)"),BBe.forEach(t),Mwr=i(me),UE=n(me,"LI",{});var IBe=s(UE);yFe=n(IBe,"STRONG",{});var H3t=s(yFe);Ewr=r(H3t,"xlnet"),H3t.forEach(t),Cwr=r(IBe," \u2014 "),nJ=n(IBe,"A",{href:!0});var U3t=s(nJ);wwr=r(U3t,"TFXLNetForTokenClassification"),U3t.forEach(t),Awr=r(IBe," (XLNet model)"),IBe.forEach(t),me.forEach(t),ywr=i(Pl),T(JE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),xje=i(f),Fc=n(f,"H2",{class:!0});var IGe=s(Fc);YE=n(IGe,"A",{id:!0,class:!0,href:!0});var J3t=s(YE);LFe=n(J3t,"SPAN",{});var Y3t=s(LFe);T(f8.$$.fragment,Y3t),Y3t.forEach(t),J3t.forEach(t),Lwr=i(IGe),xFe=n(IGe,"SPAN",{});var K3t=s(xFe);xwr=r(K3t,"TFAutoModelForQuestionAnswering"),K3t.forEach(t),IGe.forEach(t),$je=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(m8.$$.fragment,Bl),$wr=i(Bl),Tc=n(Bl,"P",{});var See=s(Tc);kwr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sJ=n(See,"A",{href:!0});var Z3t=s(sJ);Swr=r(Z3t,"from_pretrained()"),Z3t.forEach(t),Rwr=r(See," class method or the "),lJ=n(See,"A",{href:!0});var ewt=s(lJ);Pwr=r(ewt,"from_config()"),ewt.forEach(t),Bwr=r(See,` class
method.`),See.forEach(t),Iwr=i(Bl),g8=n(Bl,"P",{});var qGe=s(g8);qwr=r(qGe,"This class cannot be instantiated directly using "),$Fe=n(qGe,"CODE",{});var owt=s($Fe);Nwr=r(owt,"__init__()"),owt.forEach(t),jwr=r(qGe," (throws an error)."),qGe.forEach(t),Dwr=i(Bl),Nt=n(Bl,"DIV",{class:!0});var H0=s(Nt);T(h8.$$.fragment,H0),Gwr=i(H0),kFe=n(H0,"P",{});var rwt=s(kFe);Owr=r(rwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rwt.forEach(t),Vwr=i(H0),Mc=n(H0,"P",{});var Ree=s(Mc);Xwr=r(Ree,`Note:
Loading a model from its configuration file does `),SFe=n(Ree,"STRONG",{});var twt=s(SFe);zwr=r(twt,"not"),twt.forEach(t),Wwr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=n(Ree,"A",{href:!0});var awt=s(iJ);Qwr=r(awt,"from_pretrained()"),awt.forEach(t),Hwr=r(Ree," to load the model weights."),Ree.forEach(t),Uwr=i(H0),T(KE.$$.fragment,H0),H0.forEach(t),Jwr=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(p8.$$.fragment,Il),Ywr=i(Il),RFe=n(Il,"P",{});var nwt=s(RFe);Kwr=r(nwt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nwt.forEach(t),Zwr=i(Il),fn=n(Il,"P",{});var U0=s(fn);e0r=r(U0,"The model class to instantiate is selected based on the "),PFe=n(U0,"CODE",{});var swt=s(PFe);o0r=r(swt,"model_type"),swt.forEach(t),r0r=r(U0,` property of the config object (either
passed as an argument or loaded from `),BFe=n(U0,"CODE",{});var lwt=s(BFe);t0r=r(lwt,"pretrained_model_name_or_path"),lwt.forEach(t),a0r=r(U0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=n(U0,"CODE",{});var iwt=s(IFe);n0r=r(iwt,"pretrained_model_name_or_path"),iwt.forEach(t),s0r=r(U0,":"),U0.forEach(t),l0r=i(Il),ce=n(Il,"UL",{});var ge=s(ce);ZE=n(ge,"LI",{});var qBe=s(ZE);qFe=n(qBe,"STRONG",{});var dwt=s(qFe);i0r=r(dwt,"albert"),dwt.forEach(t),d0r=r(qBe," \u2014 "),dJ=n(qBe,"A",{href:!0});var cwt=s(dJ);c0r=r(cwt,"TFAlbertForQuestionAnswering"),cwt.forEach(t),f0r=r(qBe," (ALBERT model)"),qBe.forEach(t),m0r=i(ge),eC=n(ge,"LI",{});var NBe=s(eC);NFe=n(NBe,"STRONG",{});var fwt=s(NFe);g0r=r(fwt,"bert"),fwt.forEach(t),h0r=r(NBe," \u2014 "),cJ=n(NBe,"A",{href:!0});var mwt=s(cJ);p0r=r(mwt,"TFBertForQuestionAnswering"),mwt.forEach(t),u0r=r(NBe," (BERT model)"),NBe.forEach(t),_0r=i(ge),oC=n(ge,"LI",{});var jBe=s(oC);jFe=n(jBe,"STRONG",{});var gwt=s(jFe);b0r=r(gwt,"camembert"),gwt.forEach(t),v0r=r(jBe," \u2014 "),fJ=n(jBe,"A",{href:!0});var hwt=s(fJ);F0r=r(hwt,"TFCamembertForQuestionAnswering"),hwt.forEach(t),T0r=r(jBe," (CamemBERT model)"),jBe.forEach(t),M0r=i(ge),rC=n(ge,"LI",{});var DBe=s(rC);DFe=n(DBe,"STRONG",{});var pwt=s(DFe);E0r=r(pwt,"convbert"),pwt.forEach(t),C0r=r(DBe," \u2014 "),mJ=n(DBe,"A",{href:!0});var uwt=s(mJ);w0r=r(uwt,"TFConvBertForQuestionAnswering"),uwt.forEach(t),A0r=r(DBe," (ConvBERT model)"),DBe.forEach(t),y0r=i(ge),tC=n(ge,"LI",{});var GBe=s(tC);GFe=n(GBe,"STRONG",{});var _wt=s(GFe);L0r=r(_wt,"deberta"),_wt.forEach(t),x0r=r(GBe," \u2014 "),gJ=n(GBe,"A",{href:!0});var bwt=s(gJ);$0r=r(bwt,"TFDebertaForQuestionAnswering"),bwt.forEach(t),k0r=r(GBe," (DeBERTa model)"),GBe.forEach(t),S0r=i(ge),aC=n(ge,"LI",{});var OBe=s(aC);OFe=n(OBe,"STRONG",{});var vwt=s(OFe);R0r=r(vwt,"deberta-v2"),vwt.forEach(t),P0r=r(OBe," \u2014 "),hJ=n(OBe,"A",{href:!0});var Fwt=s(hJ);B0r=r(Fwt,"TFDebertaV2ForQuestionAnswering"),Fwt.forEach(t),I0r=r(OBe," (DeBERTa-v2 model)"),OBe.forEach(t),q0r=i(ge),nC=n(ge,"LI",{});var VBe=s(nC);VFe=n(VBe,"STRONG",{});var Twt=s(VFe);N0r=r(Twt,"distilbert"),Twt.forEach(t),j0r=r(VBe," \u2014 "),pJ=n(VBe,"A",{href:!0});var Mwt=s(pJ);D0r=r(Mwt,"TFDistilBertForQuestionAnswering"),Mwt.forEach(t),G0r=r(VBe," (DistilBERT model)"),VBe.forEach(t),O0r=i(ge),sC=n(ge,"LI",{});var XBe=s(sC);XFe=n(XBe,"STRONG",{});var Ewt=s(XFe);V0r=r(Ewt,"electra"),Ewt.forEach(t),X0r=r(XBe," \u2014 "),uJ=n(XBe,"A",{href:!0});var Cwt=s(uJ);z0r=r(Cwt,"TFElectraForQuestionAnswering"),Cwt.forEach(t),W0r=r(XBe," (ELECTRA model)"),XBe.forEach(t),Q0r=i(ge),lC=n(ge,"LI",{});var zBe=s(lC);zFe=n(zBe,"STRONG",{});var wwt=s(zFe);H0r=r(wwt,"flaubert"),wwt.forEach(t),U0r=r(zBe," \u2014 "),_J=n(zBe,"A",{href:!0});var Awt=s(_J);J0r=r(Awt,"TFFlaubertForQuestionAnsweringSimple"),Awt.forEach(t),Y0r=r(zBe," (FlauBERT model)"),zBe.forEach(t),K0r=i(ge),iC=n(ge,"LI",{});var WBe=s(iC);WFe=n(WBe,"STRONG",{});var ywt=s(WFe);Z0r=r(ywt,"funnel"),ywt.forEach(t),e6r=r(WBe," \u2014 "),bJ=n(WBe,"A",{href:!0});var Lwt=s(bJ);o6r=r(Lwt,"TFFunnelForQuestionAnswering"),Lwt.forEach(t),r6r=r(WBe," (Funnel Transformer model)"),WBe.forEach(t),t6r=i(ge),dC=n(ge,"LI",{});var QBe=s(dC);QFe=n(QBe,"STRONG",{});var xwt=s(QFe);a6r=r(xwt,"gptj"),xwt.forEach(t),n6r=r(QBe," \u2014 "),vJ=n(QBe,"A",{href:!0});var $wt=s(vJ);s6r=r($wt,"TFGPTJForQuestionAnswering"),$wt.forEach(t),l6r=r(QBe," (GPT-J model)"),QBe.forEach(t),i6r=i(ge),cC=n(ge,"LI",{});var HBe=s(cC);HFe=n(HBe,"STRONG",{});var kwt=s(HFe);d6r=r(kwt,"longformer"),kwt.forEach(t),c6r=r(HBe," \u2014 "),FJ=n(HBe,"A",{href:!0});var Swt=s(FJ);f6r=r(Swt,"TFLongformerForQuestionAnswering"),Swt.forEach(t),m6r=r(HBe," (Longformer model)"),HBe.forEach(t),g6r=i(ge),fC=n(ge,"LI",{});var UBe=s(fC);UFe=n(UBe,"STRONG",{});var Rwt=s(UFe);h6r=r(Rwt,"mobilebert"),Rwt.forEach(t),p6r=r(UBe," \u2014 "),TJ=n(UBe,"A",{href:!0});var Pwt=s(TJ);u6r=r(Pwt,"TFMobileBertForQuestionAnswering"),Pwt.forEach(t),_6r=r(UBe," (MobileBERT model)"),UBe.forEach(t),b6r=i(ge),mC=n(ge,"LI",{});var JBe=s(mC);JFe=n(JBe,"STRONG",{});var Bwt=s(JFe);v6r=r(Bwt,"mpnet"),Bwt.forEach(t),F6r=r(JBe," \u2014 "),MJ=n(JBe,"A",{href:!0});var Iwt=s(MJ);T6r=r(Iwt,"TFMPNetForQuestionAnswering"),Iwt.forEach(t),M6r=r(JBe," (MPNet model)"),JBe.forEach(t),E6r=i(ge),gC=n(ge,"LI",{});var YBe=s(gC);YFe=n(YBe,"STRONG",{});var qwt=s(YFe);C6r=r(qwt,"rembert"),qwt.forEach(t),w6r=r(YBe," \u2014 "),EJ=n(YBe,"A",{href:!0});var Nwt=s(EJ);A6r=r(Nwt,"TFRemBertForQuestionAnswering"),Nwt.forEach(t),y6r=r(YBe," (RemBERT model)"),YBe.forEach(t),L6r=i(ge),hC=n(ge,"LI",{});var KBe=s(hC);KFe=n(KBe,"STRONG",{});var jwt=s(KFe);x6r=r(jwt,"roberta"),jwt.forEach(t),$6r=r(KBe," \u2014 "),CJ=n(KBe,"A",{href:!0});var Dwt=s(CJ);k6r=r(Dwt,"TFRobertaForQuestionAnswering"),Dwt.forEach(t),S6r=r(KBe," (RoBERTa model)"),KBe.forEach(t),R6r=i(ge),pC=n(ge,"LI",{});var ZBe=s(pC);ZFe=n(ZBe,"STRONG",{});var Gwt=s(ZFe);P6r=r(Gwt,"roformer"),Gwt.forEach(t),B6r=r(ZBe," \u2014 "),wJ=n(ZBe,"A",{href:!0});var Owt=s(wJ);I6r=r(Owt,"TFRoFormerForQuestionAnswering"),Owt.forEach(t),q6r=r(ZBe," (RoFormer model)"),ZBe.forEach(t),N6r=i(ge),uC=n(ge,"LI",{});var eIe=s(uC);eTe=n(eIe,"STRONG",{});var Vwt=s(eTe);j6r=r(Vwt,"xlm"),Vwt.forEach(t),D6r=r(eIe," \u2014 "),AJ=n(eIe,"A",{href:!0});var Xwt=s(AJ);G6r=r(Xwt,"TFXLMForQuestionAnsweringSimple"),Xwt.forEach(t),O6r=r(eIe," (XLM model)"),eIe.forEach(t),V6r=i(ge),_C=n(ge,"LI",{});var oIe=s(_C);oTe=n(oIe,"STRONG",{});var zwt=s(oTe);X6r=r(zwt,"xlm-roberta"),zwt.forEach(t),z6r=r(oIe," \u2014 "),yJ=n(oIe,"A",{href:!0});var Wwt=s(yJ);W6r=r(Wwt,"TFXLMRobertaForQuestionAnswering"),Wwt.forEach(t),Q6r=r(oIe," (XLM-RoBERTa model)"),oIe.forEach(t),H6r=i(ge),bC=n(ge,"LI",{});var rIe=s(bC);rTe=n(rIe,"STRONG",{});var Qwt=s(rTe);U6r=r(Qwt,"xlnet"),Qwt.forEach(t),J6r=r(rIe," \u2014 "),LJ=n(rIe,"A",{href:!0});var Hwt=s(LJ);Y6r=r(Hwt,"TFXLNetForQuestionAnsweringSimple"),Hwt.forEach(t),K6r=r(rIe," (XLNet model)"),rIe.forEach(t),ge.forEach(t),Z6r=i(Il),T(vC.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),kje=i(f),Ec=n(f,"H2",{class:!0});var NGe=s(Ec);FC=n(NGe,"A",{id:!0,class:!0,href:!0});var Uwt=s(FC);tTe=n(Uwt,"SPAN",{});var Jwt=s(tTe);T(u8.$$.fragment,Jwt),Jwt.forEach(t),Uwt.forEach(t),eAr=i(NGe),aTe=n(NGe,"SPAN",{});var Ywt=s(aTe);oAr=r(Ywt,"TFAutoModelForVision2Seq"),Ywt.forEach(t),NGe.forEach(t),Sje=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(_8.$$.fragment,ql),rAr=i(ql),Cc=n(ql,"P",{});var Pee=s(Cc);tAr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xJ=n(Pee,"A",{href:!0});var Kwt=s(xJ);aAr=r(Kwt,"from_pretrained()"),Kwt.forEach(t),nAr=r(Pee," class method or the "),$J=n(Pee,"A",{href:!0});var Zwt=s($J);sAr=r(Zwt,"from_config()"),Zwt.forEach(t),lAr=r(Pee,` class
method.`),Pee.forEach(t),iAr=i(ql),b8=n(ql,"P",{});var jGe=s(b8);dAr=r(jGe,"This class cannot be instantiated directly using "),nTe=n(jGe,"CODE",{});var e0t=s(nTe);cAr=r(e0t,"__init__()"),e0t.forEach(t),fAr=r(jGe," (throws an error)."),jGe.forEach(t),mAr=i(ql),jt=n(ql,"DIV",{class:!0});var J0=s(jt);T(v8.$$.fragment,J0),gAr=i(J0),sTe=n(J0,"P",{});var o0t=s(sTe);hAr=r(o0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),o0t.forEach(t),pAr=i(J0),wc=n(J0,"P",{});var Bee=s(wc);uAr=r(Bee,`Note:
Loading a model from its configuration file does `),lTe=n(Bee,"STRONG",{});var r0t=s(lTe);_Ar=r(r0t,"not"),r0t.forEach(t),bAr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=n(Bee,"A",{href:!0});var t0t=s(kJ);vAr=r(t0t,"from_pretrained()"),t0t.forEach(t),FAr=r(Bee," to load the model weights."),Bee.forEach(t),TAr=i(J0),T(TC.$$.fragment,J0),J0.forEach(t),MAr=i(ql),qr=n(ql,"DIV",{class:!0});var Nl=s(qr);T(F8.$$.fragment,Nl),EAr=i(Nl),iTe=n(Nl,"P",{});var a0t=s(iTe);CAr=r(a0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),a0t.forEach(t),wAr=i(Nl),mn=n(Nl,"P",{});var Y0=s(mn);AAr=r(Y0,"The model class to instantiate is selected based on the "),dTe=n(Y0,"CODE",{});var n0t=s(dTe);yAr=r(n0t,"model_type"),n0t.forEach(t),LAr=r(Y0,` property of the config object (either
passed as an argument or loaded from `),cTe=n(Y0,"CODE",{});var s0t=s(cTe);xAr=r(s0t,"pretrained_model_name_or_path"),s0t.forEach(t),$Ar=r(Y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=n(Y0,"CODE",{});var l0t=s(fTe);kAr=r(l0t,"pretrained_model_name_or_path"),l0t.forEach(t),SAr=r(Y0,":"),Y0.forEach(t),RAr=i(Nl),mTe=n(Nl,"UL",{});var i0t=s(mTe);MC=n(i0t,"LI",{});var tIe=s(MC);gTe=n(tIe,"STRONG",{});var d0t=s(gTe);PAr=r(d0t,"vision-encoder-decoder"),d0t.forEach(t),BAr=r(tIe," \u2014 "),SJ=n(tIe,"A",{href:!0});var c0t=s(SJ);IAr=r(c0t,"TFVisionEncoderDecoderModel"),c0t.forEach(t),qAr=r(tIe," (Vision Encoder decoder model)"),tIe.forEach(t),i0t.forEach(t),NAr=i(Nl),T(EC.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),Rje=i(f),Ac=n(f,"H2",{class:!0});var DGe=s(Ac);CC=n(DGe,"A",{id:!0,class:!0,href:!0});var f0t=s(CC);hTe=n(f0t,"SPAN",{});var m0t=s(hTe);T(T8.$$.fragment,m0t),m0t.forEach(t),f0t.forEach(t),jAr=i(DGe),pTe=n(DGe,"SPAN",{});var g0t=s(pTe);DAr=r(g0t,"TFAutoModelForSpeechSeq2Seq"),g0t.forEach(t),DGe.forEach(t),Pje=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(M8.$$.fragment,jl),GAr=i(jl),yc=n(jl,"P",{});var Iee=s(yc);OAr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),RJ=n(Iee,"A",{href:!0});var h0t=s(RJ);VAr=r(h0t,"from_pretrained()"),h0t.forEach(t),XAr=r(Iee," class method or the "),PJ=n(Iee,"A",{href:!0});var p0t=s(PJ);zAr=r(p0t,"from_config()"),p0t.forEach(t),WAr=r(Iee,` class
method.`),Iee.forEach(t),QAr=i(jl),E8=n(jl,"P",{});var GGe=s(E8);HAr=r(GGe,"This class cannot be instantiated directly using "),uTe=n(GGe,"CODE",{});var u0t=s(uTe);UAr=r(u0t,"__init__()"),u0t.forEach(t),JAr=r(GGe," (throws an error)."),GGe.forEach(t),YAr=i(jl),Dt=n(jl,"DIV",{class:!0});var K0=s(Dt);T(C8.$$.fragment,K0),KAr=i(K0),_Te=n(K0,"P",{});var _0t=s(_Te);ZAr=r(_0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_0t.forEach(t),eyr=i(K0),Lc=n(K0,"P",{});var qee=s(Lc);oyr=r(qee,`Note:
Loading a model from its configuration file does `),bTe=n(qee,"STRONG",{});var b0t=s(bTe);ryr=r(b0t,"not"),b0t.forEach(t),tyr=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(qee,"A",{href:!0});var v0t=s(BJ);ayr=r(v0t,"from_pretrained()"),v0t.forEach(t),nyr=r(qee," to load the model weights."),qee.forEach(t),syr=i(K0),T(wC.$$.fragment,K0),K0.forEach(t),lyr=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(w8.$$.fragment,Dl),iyr=i(Dl),vTe=n(Dl,"P",{});var F0t=s(vTe);dyr=r(F0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),F0t.forEach(t),cyr=i(Dl),gn=n(Dl,"P",{});var Z0=s(gn);fyr=r(Z0,"The model class to instantiate is selected based on the "),FTe=n(Z0,"CODE",{});var T0t=s(FTe);myr=r(T0t,"model_type"),T0t.forEach(t),gyr=r(Z0,` property of the config object (either
passed as an argument or loaded from `),TTe=n(Z0,"CODE",{});var M0t=s(TTe);hyr=r(M0t,"pretrained_model_name_or_path"),M0t.forEach(t),pyr=r(Z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MTe=n(Z0,"CODE",{});var E0t=s(MTe);uyr=r(E0t,"pretrained_model_name_or_path"),E0t.forEach(t),_yr=r(Z0,":"),Z0.forEach(t),byr=i(Dl),ETe=n(Dl,"UL",{});var C0t=s(ETe);AC=n(C0t,"LI",{});var aIe=s(AC);CTe=n(aIe,"STRONG",{});var w0t=s(CTe);vyr=r(w0t,"speech_to_text"),w0t.forEach(t),Fyr=r(aIe," \u2014 "),IJ=n(aIe,"A",{href:!0});var A0t=s(IJ);Tyr=r(A0t,"TFSpeech2TextForConditionalGeneration"),A0t.forEach(t),Myr=r(aIe," (Speech2Text model)"),aIe.forEach(t),C0t.forEach(t),Eyr=i(Dl),T(yC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Bje=i(f),xc=n(f,"H2",{class:!0});var OGe=s(xc);LC=n(OGe,"A",{id:!0,class:!0,href:!0});var y0t=s(LC);wTe=n(y0t,"SPAN",{});var L0t=s(wTe);T(A8.$$.fragment,L0t),L0t.forEach(t),y0t.forEach(t),Cyr=i(OGe),ATe=n(OGe,"SPAN",{});var x0t=s(ATe);wyr=r(x0t,"FlaxAutoModel"),x0t.forEach(t),OGe.forEach(t),Ije=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(y8.$$.fragment,Gl),Ayr=i(Gl),$c=n(Gl,"P",{});var Nee=s($c);yyr=r(Nee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qJ=n(Nee,"A",{href:!0});var $0t=s(qJ);Lyr=r($0t,"from_pretrained()"),$0t.forEach(t),xyr=r(Nee," class method or the "),NJ=n(Nee,"A",{href:!0});var k0t=s(NJ);$yr=r(k0t,"from_config()"),k0t.forEach(t),kyr=r(Nee,` class
method.`),Nee.forEach(t),Syr=i(Gl),L8=n(Gl,"P",{});var VGe=s(L8);Ryr=r(VGe,"This class cannot be instantiated directly using "),yTe=n(VGe,"CODE",{});var S0t=s(yTe);Pyr=r(S0t,"__init__()"),S0t.forEach(t),Byr=r(VGe," (throws an error)."),VGe.forEach(t),Iyr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var e6=s(Gt);T(x8.$$.fragment,e6),qyr=i(e6),LTe=n(e6,"P",{});var R0t=s(LTe);Nyr=r(R0t,"Instantiates one of the base model classes of the library from a configuration."),R0t.forEach(t),jyr=i(e6),kc=n(e6,"P",{});var jee=s(kc);Dyr=r(jee,`Note:
Loading a model from its configuration file does `),xTe=n(jee,"STRONG",{});var P0t=s(xTe);Gyr=r(P0t,"not"),P0t.forEach(t),Oyr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(jee,"A",{href:!0});var B0t=s(jJ);Vyr=r(B0t,"from_pretrained()"),B0t.forEach(t),Xyr=r(jee," to load the model weights."),jee.forEach(t),zyr=i(e6),T(xC.$$.fragment,e6),e6.forEach(t),Wyr=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T($8.$$.fragment,Ol),Qyr=i(Ol),$Te=n(Ol,"P",{});var I0t=s($Te);Hyr=r(I0t,"Instantiate one of the base model classes of the library from a pretrained model."),I0t.forEach(t),Uyr=i(Ol),hn=n(Ol,"P",{});var o6=s(hn);Jyr=r(o6,"The model class to instantiate is selected based on the "),kTe=n(o6,"CODE",{});var q0t=s(kTe);Yyr=r(q0t,"model_type"),q0t.forEach(t),Kyr=r(o6,` property of the config object (either
passed as an argument or loaded from `),STe=n(o6,"CODE",{});var N0t=s(STe);Zyr=r(N0t,"pretrained_model_name_or_path"),N0t.forEach(t),eLr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=n(o6,"CODE",{});var j0t=s(RTe);oLr=r(j0t,"pretrained_model_name_or_path"),j0t.forEach(t),rLr=r(o6,":"),o6.forEach(t),tLr=i(Ol),te=n(Ol,"UL",{});var ne=s(te);$C=n(ne,"LI",{});var nIe=s($C);PTe=n(nIe,"STRONG",{});var D0t=s(PTe);aLr=r(D0t,"albert"),D0t.forEach(t),nLr=r(nIe," \u2014 "),DJ=n(nIe,"A",{href:!0});var G0t=s(DJ);sLr=r(G0t,"FlaxAlbertModel"),G0t.forEach(t),lLr=r(nIe," (ALBERT model)"),nIe.forEach(t),iLr=i(ne),kC=n(ne,"LI",{});var sIe=s(kC);BTe=n(sIe,"STRONG",{});var O0t=s(BTe);dLr=r(O0t,"bart"),O0t.forEach(t),cLr=r(sIe," \u2014 "),GJ=n(sIe,"A",{href:!0});var V0t=s(GJ);fLr=r(V0t,"FlaxBartModel"),V0t.forEach(t),mLr=r(sIe," (BART model)"),sIe.forEach(t),gLr=i(ne),SC=n(ne,"LI",{});var lIe=s(SC);ITe=n(lIe,"STRONG",{});var X0t=s(ITe);hLr=r(X0t,"beit"),X0t.forEach(t),pLr=r(lIe," \u2014 "),OJ=n(lIe,"A",{href:!0});var z0t=s(OJ);uLr=r(z0t,"FlaxBeitModel"),z0t.forEach(t),_Lr=r(lIe," (BEiT model)"),lIe.forEach(t),bLr=i(ne),RC=n(ne,"LI",{});var iIe=s(RC);qTe=n(iIe,"STRONG",{});var W0t=s(qTe);vLr=r(W0t,"bert"),W0t.forEach(t),FLr=r(iIe," \u2014 "),VJ=n(iIe,"A",{href:!0});var Q0t=s(VJ);TLr=r(Q0t,"FlaxBertModel"),Q0t.forEach(t),MLr=r(iIe," (BERT model)"),iIe.forEach(t),ELr=i(ne),PC=n(ne,"LI",{});var dIe=s(PC);NTe=n(dIe,"STRONG",{});var H0t=s(NTe);CLr=r(H0t,"big_bird"),H0t.forEach(t),wLr=r(dIe," \u2014 "),XJ=n(dIe,"A",{href:!0});var U0t=s(XJ);ALr=r(U0t,"FlaxBigBirdModel"),U0t.forEach(t),yLr=r(dIe," (BigBird model)"),dIe.forEach(t),LLr=i(ne),BC=n(ne,"LI",{});var cIe=s(BC);jTe=n(cIe,"STRONG",{});var J0t=s(jTe);xLr=r(J0t,"blenderbot"),J0t.forEach(t),$Lr=r(cIe," \u2014 "),zJ=n(cIe,"A",{href:!0});var Y0t=s(zJ);kLr=r(Y0t,"FlaxBlenderbotModel"),Y0t.forEach(t),SLr=r(cIe," (Blenderbot model)"),cIe.forEach(t),RLr=i(ne),IC=n(ne,"LI",{});var fIe=s(IC);DTe=n(fIe,"STRONG",{});var K0t=s(DTe);PLr=r(K0t,"blenderbot-small"),K0t.forEach(t),BLr=r(fIe," \u2014 "),WJ=n(fIe,"A",{href:!0});var Z0t=s(WJ);ILr=r(Z0t,"FlaxBlenderbotSmallModel"),Z0t.forEach(t),qLr=r(fIe," (BlenderbotSmall model)"),fIe.forEach(t),NLr=i(ne),qC=n(ne,"LI",{});var mIe=s(qC);GTe=n(mIe,"STRONG",{});var e6t=s(GTe);jLr=r(e6t,"clip"),e6t.forEach(t),DLr=r(mIe," \u2014 "),QJ=n(mIe,"A",{href:!0});var o6t=s(QJ);GLr=r(o6t,"FlaxCLIPModel"),o6t.forEach(t),OLr=r(mIe," (CLIP model)"),mIe.forEach(t),VLr=i(ne),NC=n(ne,"LI",{});var gIe=s(NC);OTe=n(gIe,"STRONG",{});var r6t=s(OTe);XLr=r(r6t,"distilbert"),r6t.forEach(t),zLr=r(gIe," \u2014 "),HJ=n(gIe,"A",{href:!0});var t6t=s(HJ);WLr=r(t6t,"FlaxDistilBertModel"),t6t.forEach(t),QLr=r(gIe," (DistilBERT model)"),gIe.forEach(t),HLr=i(ne),jC=n(ne,"LI",{});var hIe=s(jC);VTe=n(hIe,"STRONG",{});var a6t=s(VTe);ULr=r(a6t,"electra"),a6t.forEach(t),JLr=r(hIe," \u2014 "),UJ=n(hIe,"A",{href:!0});var n6t=s(UJ);YLr=r(n6t,"FlaxElectraModel"),n6t.forEach(t),KLr=r(hIe," (ELECTRA model)"),hIe.forEach(t),ZLr=i(ne),DC=n(ne,"LI",{});var pIe=s(DC);XTe=n(pIe,"STRONG",{});var s6t=s(XTe);e8r=r(s6t,"gpt2"),s6t.forEach(t),o8r=r(pIe," \u2014 "),JJ=n(pIe,"A",{href:!0});var l6t=s(JJ);r8r=r(l6t,"FlaxGPT2Model"),l6t.forEach(t),t8r=r(pIe," (OpenAI GPT-2 model)"),pIe.forEach(t),a8r=i(ne),GC=n(ne,"LI",{});var uIe=s(GC);zTe=n(uIe,"STRONG",{});var i6t=s(zTe);n8r=r(i6t,"gpt_neo"),i6t.forEach(t),s8r=r(uIe," \u2014 "),YJ=n(uIe,"A",{href:!0});var d6t=s(YJ);l8r=r(d6t,"FlaxGPTNeoModel"),d6t.forEach(t),i8r=r(uIe," (GPT Neo model)"),uIe.forEach(t),d8r=i(ne),OC=n(ne,"LI",{});var _Ie=s(OC);WTe=n(_Ie,"STRONG",{});var c6t=s(WTe);c8r=r(c6t,"gptj"),c6t.forEach(t),f8r=r(_Ie," \u2014 "),KJ=n(_Ie,"A",{href:!0});var f6t=s(KJ);m8r=r(f6t,"FlaxGPTJModel"),f6t.forEach(t),g8r=r(_Ie," (GPT-J model)"),_Ie.forEach(t),h8r=i(ne),VC=n(ne,"LI",{});var bIe=s(VC);QTe=n(bIe,"STRONG",{});var m6t=s(QTe);p8r=r(m6t,"marian"),m6t.forEach(t),u8r=r(bIe," \u2014 "),ZJ=n(bIe,"A",{href:!0});var g6t=s(ZJ);_8r=r(g6t,"FlaxMarianModel"),g6t.forEach(t),b8r=r(bIe," (Marian model)"),bIe.forEach(t),v8r=i(ne),XC=n(ne,"LI",{});var vIe=s(XC);HTe=n(vIe,"STRONG",{});var h6t=s(HTe);F8r=r(h6t,"mbart"),h6t.forEach(t),T8r=r(vIe," \u2014 "),eY=n(vIe,"A",{href:!0});var p6t=s(eY);M8r=r(p6t,"FlaxMBartModel"),p6t.forEach(t),E8r=r(vIe," (mBART model)"),vIe.forEach(t),C8r=i(ne),zC=n(ne,"LI",{});var FIe=s(zC);UTe=n(FIe,"STRONG",{});var u6t=s(UTe);w8r=r(u6t,"mt5"),u6t.forEach(t),A8r=r(FIe," \u2014 "),oY=n(FIe,"A",{href:!0});var _6t=s(oY);y8r=r(_6t,"FlaxMT5Model"),_6t.forEach(t),L8r=r(FIe," (mT5 model)"),FIe.forEach(t),x8r=i(ne),WC=n(ne,"LI",{});var TIe=s(WC);JTe=n(TIe,"STRONG",{});var b6t=s(JTe);$8r=r(b6t,"pegasus"),b6t.forEach(t),k8r=r(TIe," \u2014 "),rY=n(TIe,"A",{href:!0});var v6t=s(rY);S8r=r(v6t,"FlaxPegasusModel"),v6t.forEach(t),R8r=r(TIe," (Pegasus model)"),TIe.forEach(t),P8r=i(ne),QC=n(ne,"LI",{});var MIe=s(QC);YTe=n(MIe,"STRONG",{});var F6t=s(YTe);B8r=r(F6t,"roberta"),F6t.forEach(t),I8r=r(MIe," \u2014 "),tY=n(MIe,"A",{href:!0});var T6t=s(tY);q8r=r(T6t,"FlaxRobertaModel"),T6t.forEach(t),N8r=r(MIe," (RoBERTa model)"),MIe.forEach(t),j8r=i(ne),HC=n(ne,"LI",{});var EIe=s(HC);KTe=n(EIe,"STRONG",{});var M6t=s(KTe);D8r=r(M6t,"roformer"),M6t.forEach(t),G8r=r(EIe," \u2014 "),aY=n(EIe,"A",{href:!0});var E6t=s(aY);O8r=r(E6t,"FlaxRoFormerModel"),E6t.forEach(t),V8r=r(EIe," (RoFormer model)"),EIe.forEach(t),X8r=i(ne),UC=n(ne,"LI",{});var CIe=s(UC);ZTe=n(CIe,"STRONG",{});var C6t=s(ZTe);z8r=r(C6t,"t5"),C6t.forEach(t),W8r=r(CIe," \u2014 "),nY=n(CIe,"A",{href:!0});var w6t=s(nY);Q8r=r(w6t,"FlaxT5Model"),w6t.forEach(t),H8r=r(CIe," (T5 model)"),CIe.forEach(t),U8r=i(ne),JC=n(ne,"LI",{});var wIe=s(JC);e7e=n(wIe,"STRONG",{});var A6t=s(e7e);J8r=r(A6t,"vision-text-dual-encoder"),A6t.forEach(t),Y8r=r(wIe," \u2014 "),sY=n(wIe,"A",{href:!0});var y6t=s(sY);K8r=r(y6t,"FlaxVisionTextDualEncoderModel"),y6t.forEach(t),Z8r=r(wIe," (VisionTextDualEncoder model)"),wIe.forEach(t),exr=i(ne),YC=n(ne,"LI",{});var AIe=s(YC);o7e=n(AIe,"STRONG",{});var L6t=s(o7e);oxr=r(L6t,"vit"),L6t.forEach(t),rxr=r(AIe," \u2014 "),lY=n(AIe,"A",{href:!0});var x6t=s(lY);txr=r(x6t,"FlaxViTModel"),x6t.forEach(t),axr=r(AIe," (ViT model)"),AIe.forEach(t),nxr=i(ne),KC=n(ne,"LI",{});var yIe=s(KC);r7e=n(yIe,"STRONG",{});var $6t=s(r7e);sxr=r($6t,"wav2vec2"),$6t.forEach(t),lxr=r(yIe," \u2014 "),iY=n(yIe,"A",{href:!0});var k6t=s(iY);ixr=r(k6t,"FlaxWav2Vec2Model"),k6t.forEach(t),dxr=r(yIe," (Wav2Vec2 model)"),yIe.forEach(t),cxr=i(ne),ZC=n(ne,"LI",{});var LIe=s(ZC);t7e=n(LIe,"STRONG",{});var S6t=s(t7e);fxr=r(S6t,"xglm"),S6t.forEach(t),mxr=r(LIe," \u2014 "),dY=n(LIe,"A",{href:!0});var R6t=s(dY);gxr=r(R6t,"FlaxXGLMModel"),R6t.forEach(t),hxr=r(LIe," (XGLM model)"),LIe.forEach(t),pxr=i(ne),e5=n(ne,"LI",{});var xIe=s(e5);a7e=n(xIe,"STRONG",{});var P6t=s(a7e);uxr=r(P6t,"xlm-roberta"),P6t.forEach(t),_xr=r(xIe," \u2014 "),cY=n(xIe,"A",{href:!0});var B6t=s(cY);bxr=r(B6t,"FlaxXLMRobertaModel"),B6t.forEach(t),vxr=r(xIe," (XLM-RoBERTa model)"),xIe.forEach(t),ne.forEach(t),Fxr=i(Ol),T(o5.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),qje=i(f),Sc=n(f,"H2",{class:!0});var XGe=s(Sc);r5=n(XGe,"A",{id:!0,class:!0,href:!0});var I6t=s(r5);n7e=n(I6t,"SPAN",{});var q6t=s(n7e);T(k8.$$.fragment,q6t),q6t.forEach(t),I6t.forEach(t),Txr=i(XGe),s7e=n(XGe,"SPAN",{});var N6t=s(s7e);Mxr=r(N6t,"FlaxAutoModelForCausalLM"),N6t.forEach(t),XGe.forEach(t),Nje=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(S8.$$.fragment,Vl),Exr=i(Vl),Rc=n(Vl,"P",{});var Dee=s(Rc);Cxr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fY=n(Dee,"A",{href:!0});var j6t=s(fY);wxr=r(j6t,"from_pretrained()"),j6t.forEach(t),Axr=r(Dee," class method or the "),mY=n(Dee,"A",{href:!0});var D6t=s(mY);yxr=r(D6t,"from_config()"),D6t.forEach(t),Lxr=r(Dee,` class
method.`),Dee.forEach(t),xxr=i(Vl),R8=n(Vl,"P",{});var zGe=s(R8);$xr=r(zGe,"This class cannot be instantiated directly using "),l7e=n(zGe,"CODE",{});var G6t=s(l7e);kxr=r(G6t,"__init__()"),G6t.forEach(t),Sxr=r(zGe," (throws an error)."),zGe.forEach(t),Rxr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var r6=s(Ot);T(P8.$$.fragment,r6),Pxr=i(r6),i7e=n(r6,"P",{});var O6t=s(i7e);Bxr=r(O6t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),O6t.forEach(t),Ixr=i(r6),Pc=n(r6,"P",{});var Gee=s(Pc);qxr=r(Gee,`Note:
Loading a model from its configuration file does `),d7e=n(Gee,"STRONG",{});var V6t=s(d7e);Nxr=r(V6t,"not"),V6t.forEach(t),jxr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=n(Gee,"A",{href:!0});var X6t=s(gY);Dxr=r(X6t,"from_pretrained()"),X6t.forEach(t),Gxr=r(Gee," to load the model weights."),Gee.forEach(t),Oxr=i(r6),T(t5.$$.fragment,r6),r6.forEach(t),Vxr=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(B8.$$.fragment,Xl),Xxr=i(Xl),c7e=n(Xl,"P",{});var z6t=s(c7e);zxr=r(z6t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),z6t.forEach(t),Wxr=i(Xl),pn=n(Xl,"P",{});var t6=s(pn);Qxr=r(t6,"The model class to instantiate is selected based on the "),f7e=n(t6,"CODE",{});var W6t=s(f7e);Hxr=r(W6t,"model_type"),W6t.forEach(t),Uxr=r(t6,` property of the config object (either
passed as an argument or loaded from `),m7e=n(t6,"CODE",{});var Q6t=s(m7e);Jxr=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),Yxr=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g7e=n(t6,"CODE",{});var H6t=s(g7e);Kxr=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),Zxr=r(t6,":"),t6.forEach(t),e$r=i(Xl),Re=n(Xl,"UL",{});var Xe=s(Re);a5=n(Xe,"LI",{});var $Ie=s(a5);h7e=n($Ie,"STRONG",{});var U6t=s(h7e);o$r=r(U6t,"bart"),U6t.forEach(t),r$r=r($Ie," \u2014 "),hY=n($Ie,"A",{href:!0});var J6t=s(hY);t$r=r(J6t,"FlaxBartForCausalLM"),J6t.forEach(t),a$r=r($Ie," (BART model)"),$Ie.forEach(t),n$r=i(Xe),n5=n(Xe,"LI",{});var kIe=s(n5);p7e=n(kIe,"STRONG",{});var Y6t=s(p7e);s$r=r(Y6t,"bert"),Y6t.forEach(t),l$r=r(kIe," \u2014 "),pY=n(kIe,"A",{href:!0});var K6t=s(pY);i$r=r(K6t,"FlaxBertForCausalLM"),K6t.forEach(t),d$r=r(kIe," (BERT model)"),kIe.forEach(t),c$r=i(Xe),s5=n(Xe,"LI",{});var SIe=s(s5);u7e=n(SIe,"STRONG",{});var Z6t=s(u7e);f$r=r(Z6t,"big_bird"),Z6t.forEach(t),m$r=r(SIe," \u2014 "),uY=n(SIe,"A",{href:!0});var eAt=s(uY);g$r=r(eAt,"FlaxBigBirdForCausalLM"),eAt.forEach(t),h$r=r(SIe," (BigBird model)"),SIe.forEach(t),p$r=i(Xe),l5=n(Xe,"LI",{});var RIe=s(l5);_7e=n(RIe,"STRONG",{});var oAt=s(_7e);u$r=r(oAt,"electra"),oAt.forEach(t),_$r=r(RIe," \u2014 "),_Y=n(RIe,"A",{href:!0});var rAt=s(_Y);b$r=r(rAt,"FlaxElectraForCausalLM"),rAt.forEach(t),v$r=r(RIe," (ELECTRA model)"),RIe.forEach(t),F$r=i(Xe),i5=n(Xe,"LI",{});var PIe=s(i5);b7e=n(PIe,"STRONG",{});var tAt=s(b7e);T$r=r(tAt,"gpt2"),tAt.forEach(t),M$r=r(PIe," \u2014 "),bY=n(PIe,"A",{href:!0});var aAt=s(bY);E$r=r(aAt,"FlaxGPT2LMHeadModel"),aAt.forEach(t),C$r=r(PIe," (OpenAI GPT-2 model)"),PIe.forEach(t),w$r=i(Xe),d5=n(Xe,"LI",{});var BIe=s(d5);v7e=n(BIe,"STRONG",{});var nAt=s(v7e);A$r=r(nAt,"gpt_neo"),nAt.forEach(t),y$r=r(BIe," \u2014 "),vY=n(BIe,"A",{href:!0});var sAt=s(vY);L$r=r(sAt,"FlaxGPTNeoForCausalLM"),sAt.forEach(t),x$r=r(BIe," (GPT Neo model)"),BIe.forEach(t),$$r=i(Xe),c5=n(Xe,"LI",{});var IIe=s(c5);F7e=n(IIe,"STRONG",{});var lAt=s(F7e);k$r=r(lAt,"gptj"),lAt.forEach(t),S$r=r(IIe," \u2014 "),FY=n(IIe,"A",{href:!0});var iAt=s(FY);R$r=r(iAt,"FlaxGPTJForCausalLM"),iAt.forEach(t),P$r=r(IIe," (GPT-J model)"),IIe.forEach(t),B$r=i(Xe),f5=n(Xe,"LI",{});var qIe=s(f5);T7e=n(qIe,"STRONG",{});var dAt=s(T7e);I$r=r(dAt,"roberta"),dAt.forEach(t),q$r=r(qIe," \u2014 "),TY=n(qIe,"A",{href:!0});var cAt=s(TY);N$r=r(cAt,"FlaxRobertaForCausalLM"),cAt.forEach(t),j$r=r(qIe," (RoBERTa model)"),qIe.forEach(t),D$r=i(Xe),m5=n(Xe,"LI",{});var NIe=s(m5);M7e=n(NIe,"STRONG",{});var fAt=s(M7e);G$r=r(fAt,"xglm"),fAt.forEach(t),O$r=r(NIe," \u2014 "),MY=n(NIe,"A",{href:!0});var mAt=s(MY);V$r=r(mAt,"FlaxXGLMForCausalLM"),mAt.forEach(t),X$r=r(NIe," (XGLM model)"),NIe.forEach(t),Xe.forEach(t),z$r=i(Xl),T(g5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),jje=i(f),Bc=n(f,"H2",{class:!0});var WGe=s(Bc);h5=n(WGe,"A",{id:!0,class:!0,href:!0});var gAt=s(h5);E7e=n(gAt,"SPAN",{});var hAt=s(E7e);T(I8.$$.fragment,hAt),hAt.forEach(t),gAt.forEach(t),W$r=i(WGe),C7e=n(WGe,"SPAN",{});var pAt=s(C7e);Q$r=r(pAt,"FlaxAutoModelForPreTraining"),pAt.forEach(t),WGe.forEach(t),Dje=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(q8.$$.fragment,zl),H$r=i(zl),Ic=n(zl,"P",{});var Oee=s(Ic);U$r=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EY=n(Oee,"A",{href:!0});var uAt=s(EY);J$r=r(uAt,"from_pretrained()"),uAt.forEach(t),Y$r=r(Oee," class method or the "),CY=n(Oee,"A",{href:!0});var _At=s(CY);K$r=r(_At,"from_config()"),_At.forEach(t),Z$r=r(Oee,` class
method.`),Oee.forEach(t),ekr=i(zl),N8=n(zl,"P",{});var QGe=s(N8);okr=r(QGe,"This class cannot be instantiated directly using "),w7e=n(QGe,"CODE",{});var bAt=s(w7e);rkr=r(bAt,"__init__()"),bAt.forEach(t),tkr=r(QGe," (throws an error)."),QGe.forEach(t),akr=i(zl),Vt=n(zl,"DIV",{class:!0});var a6=s(Vt);T(j8.$$.fragment,a6),nkr=i(a6),A7e=n(a6,"P",{});var vAt=s(A7e);skr=r(vAt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vAt.forEach(t),lkr=i(a6),qc=n(a6,"P",{});var Vee=s(qc);ikr=r(Vee,`Note:
Loading a model from its configuration file does `),y7e=n(Vee,"STRONG",{});var FAt=s(y7e);dkr=r(FAt,"not"),FAt.forEach(t),ckr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(Vee,"A",{href:!0});var TAt=s(wY);fkr=r(TAt,"from_pretrained()"),TAt.forEach(t),mkr=r(Vee," to load the model weights."),Vee.forEach(t),gkr=i(a6),T(p5.$$.fragment,a6),a6.forEach(t),hkr=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(D8.$$.fragment,Wl),pkr=i(Wl),L7e=n(Wl,"P",{});var MAt=s(L7e);ukr=r(MAt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),MAt.forEach(t),_kr=i(Wl),un=n(Wl,"P",{});var n6=s(un);bkr=r(n6,"The model class to instantiate is selected based on the "),x7e=n(n6,"CODE",{});var EAt=s(x7e);vkr=r(EAt,"model_type"),EAt.forEach(t),Fkr=r(n6,` property of the config object (either
passed as an argument or loaded from `),$7e=n(n6,"CODE",{});var CAt=s($7e);Tkr=r(CAt,"pretrained_model_name_or_path"),CAt.forEach(t),Mkr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k7e=n(n6,"CODE",{});var wAt=s(k7e);Ekr=r(wAt,"pretrained_model_name_or_path"),wAt.forEach(t),Ckr=r(n6,":"),n6.forEach(t),wkr=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);u5=n(we,"LI",{});var jIe=s(u5);S7e=n(jIe,"STRONG",{});var AAt=s(S7e);Akr=r(AAt,"albert"),AAt.forEach(t),ykr=r(jIe," \u2014 "),AY=n(jIe,"A",{href:!0});var yAt=s(AY);Lkr=r(yAt,"FlaxAlbertForPreTraining"),yAt.forEach(t),xkr=r(jIe," (ALBERT model)"),jIe.forEach(t),$kr=i(we),_5=n(we,"LI",{});var DIe=s(_5);R7e=n(DIe,"STRONG",{});var LAt=s(R7e);kkr=r(LAt,"bart"),LAt.forEach(t),Skr=r(DIe," \u2014 "),yY=n(DIe,"A",{href:!0});var xAt=s(yY);Rkr=r(xAt,"FlaxBartForConditionalGeneration"),xAt.forEach(t),Pkr=r(DIe," (BART model)"),DIe.forEach(t),Bkr=i(we),b5=n(we,"LI",{});var GIe=s(b5);P7e=n(GIe,"STRONG",{});var $At=s(P7e);Ikr=r($At,"bert"),$At.forEach(t),qkr=r(GIe," \u2014 "),LY=n(GIe,"A",{href:!0});var kAt=s(LY);Nkr=r(kAt,"FlaxBertForPreTraining"),kAt.forEach(t),jkr=r(GIe," (BERT model)"),GIe.forEach(t),Dkr=i(we),v5=n(we,"LI",{});var OIe=s(v5);B7e=n(OIe,"STRONG",{});var SAt=s(B7e);Gkr=r(SAt,"big_bird"),SAt.forEach(t),Okr=r(OIe," \u2014 "),xY=n(OIe,"A",{href:!0});var RAt=s(xY);Vkr=r(RAt,"FlaxBigBirdForPreTraining"),RAt.forEach(t),Xkr=r(OIe," (BigBird model)"),OIe.forEach(t),zkr=i(we),F5=n(we,"LI",{});var VIe=s(F5);I7e=n(VIe,"STRONG",{});var PAt=s(I7e);Wkr=r(PAt,"electra"),PAt.forEach(t),Qkr=r(VIe," \u2014 "),$Y=n(VIe,"A",{href:!0});var BAt=s($Y);Hkr=r(BAt,"FlaxElectraForPreTraining"),BAt.forEach(t),Ukr=r(VIe," (ELECTRA model)"),VIe.forEach(t),Jkr=i(we),T5=n(we,"LI",{});var XIe=s(T5);q7e=n(XIe,"STRONG",{});var IAt=s(q7e);Ykr=r(IAt,"mbart"),IAt.forEach(t),Kkr=r(XIe," \u2014 "),kY=n(XIe,"A",{href:!0});var qAt=s(kY);Zkr=r(qAt,"FlaxMBartForConditionalGeneration"),qAt.forEach(t),eSr=r(XIe," (mBART model)"),XIe.forEach(t),oSr=i(we),M5=n(we,"LI",{});var zIe=s(M5);N7e=n(zIe,"STRONG",{});var NAt=s(N7e);rSr=r(NAt,"mt5"),NAt.forEach(t),tSr=r(zIe," \u2014 "),SY=n(zIe,"A",{href:!0});var jAt=s(SY);aSr=r(jAt,"FlaxMT5ForConditionalGeneration"),jAt.forEach(t),nSr=r(zIe," (mT5 model)"),zIe.forEach(t),sSr=i(we),E5=n(we,"LI",{});var WIe=s(E5);j7e=n(WIe,"STRONG",{});var DAt=s(j7e);lSr=r(DAt,"roberta"),DAt.forEach(t),iSr=r(WIe," \u2014 "),RY=n(WIe,"A",{href:!0});var GAt=s(RY);dSr=r(GAt,"FlaxRobertaForMaskedLM"),GAt.forEach(t),cSr=r(WIe," (RoBERTa model)"),WIe.forEach(t),fSr=i(we),C5=n(we,"LI",{});var QIe=s(C5);D7e=n(QIe,"STRONG",{});var OAt=s(D7e);mSr=r(OAt,"roformer"),OAt.forEach(t),gSr=r(QIe," \u2014 "),PY=n(QIe,"A",{href:!0});var VAt=s(PY);hSr=r(VAt,"FlaxRoFormerForMaskedLM"),VAt.forEach(t),pSr=r(QIe," (RoFormer model)"),QIe.forEach(t),uSr=i(we),w5=n(we,"LI",{});var HIe=s(w5);G7e=n(HIe,"STRONG",{});var XAt=s(G7e);_Sr=r(XAt,"t5"),XAt.forEach(t),bSr=r(HIe," \u2014 "),BY=n(HIe,"A",{href:!0});var zAt=s(BY);vSr=r(zAt,"FlaxT5ForConditionalGeneration"),zAt.forEach(t),FSr=r(HIe," (T5 model)"),HIe.forEach(t),TSr=i(we),A5=n(we,"LI",{});var UIe=s(A5);O7e=n(UIe,"STRONG",{});var WAt=s(O7e);MSr=r(WAt,"wav2vec2"),WAt.forEach(t),ESr=r(UIe," \u2014 "),IY=n(UIe,"A",{href:!0});var QAt=s(IY);CSr=r(QAt,"FlaxWav2Vec2ForPreTraining"),QAt.forEach(t),wSr=r(UIe," (Wav2Vec2 model)"),UIe.forEach(t),ASr=i(we),y5=n(we,"LI",{});var JIe=s(y5);V7e=n(JIe,"STRONG",{});var HAt=s(V7e);ySr=r(HAt,"xlm-roberta"),HAt.forEach(t),LSr=r(JIe," \u2014 "),qY=n(JIe,"A",{href:!0});var UAt=s(qY);xSr=r(UAt,"FlaxXLMRobertaForMaskedLM"),UAt.forEach(t),$Sr=r(JIe," (XLM-RoBERTa model)"),JIe.forEach(t),we.forEach(t),kSr=i(Wl),T(L5.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),Gje=i(f),Nc=n(f,"H2",{class:!0});var HGe=s(Nc);x5=n(HGe,"A",{id:!0,class:!0,href:!0});var JAt=s(x5);X7e=n(JAt,"SPAN",{});var YAt=s(X7e);T(G8.$$.fragment,YAt),YAt.forEach(t),JAt.forEach(t),SSr=i(HGe),z7e=n(HGe,"SPAN",{});var KAt=s(z7e);RSr=r(KAt,"FlaxAutoModelForMaskedLM"),KAt.forEach(t),HGe.forEach(t),Oje=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(O8.$$.fragment,Ql),PSr=i(Ql),jc=n(Ql,"P",{});var Xee=s(jc);BSr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NY=n(Xee,"A",{href:!0});var ZAt=s(NY);ISr=r(ZAt,"from_pretrained()"),ZAt.forEach(t),qSr=r(Xee," class method or the "),jY=n(Xee,"A",{href:!0});var eyt=s(jY);NSr=r(eyt,"from_config()"),eyt.forEach(t),jSr=r(Xee,` class
method.`),Xee.forEach(t),DSr=i(Ql),V8=n(Ql,"P",{});var UGe=s(V8);GSr=r(UGe,"This class cannot be instantiated directly using "),W7e=n(UGe,"CODE",{});var oyt=s(W7e);OSr=r(oyt,"__init__()"),oyt.forEach(t),VSr=r(UGe," (throws an error)."),UGe.forEach(t),XSr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var s6=s(Xt);T(X8.$$.fragment,s6),zSr=i(s6),Q7e=n(s6,"P",{});var ryt=s(Q7e);WSr=r(ryt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ryt.forEach(t),QSr=i(s6),Dc=n(s6,"P",{});var zee=s(Dc);HSr=r(zee,`Note:
Loading a model from its configuration file does `),H7e=n(zee,"STRONG",{});var tyt=s(H7e);USr=r(tyt,"not"),tyt.forEach(t),JSr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=n(zee,"A",{href:!0});var ayt=s(DY);YSr=r(ayt,"from_pretrained()"),ayt.forEach(t),KSr=r(zee," to load the model weights."),zee.forEach(t),ZSr=i(s6),T($5.$$.fragment,s6),s6.forEach(t),eRr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(z8.$$.fragment,Hl),oRr=i(Hl),U7e=n(Hl,"P",{});var nyt=s(U7e);rRr=r(nyt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nyt.forEach(t),tRr=i(Hl),_n=n(Hl,"P",{});var l6=s(_n);aRr=r(l6,"The model class to instantiate is selected based on the "),J7e=n(l6,"CODE",{});var syt=s(J7e);nRr=r(syt,"model_type"),syt.forEach(t),sRr=r(l6,` property of the config object (either
passed as an argument or loaded from `),Y7e=n(l6,"CODE",{});var lyt=s(Y7e);lRr=r(lyt,"pretrained_model_name_or_path"),lyt.forEach(t),iRr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=n(l6,"CODE",{});var iyt=s(K7e);dRr=r(iyt,"pretrained_model_name_or_path"),iyt.forEach(t),cRr=r(l6,":"),l6.forEach(t),fRr=i(Hl),Le=n(Hl,"UL",{});var Ie=s(Le);k5=n(Ie,"LI",{});var YIe=s(k5);Z7e=n(YIe,"STRONG",{});var dyt=s(Z7e);mRr=r(dyt,"albert"),dyt.forEach(t),gRr=r(YIe," \u2014 "),GY=n(YIe,"A",{href:!0});var cyt=s(GY);hRr=r(cyt,"FlaxAlbertForMaskedLM"),cyt.forEach(t),pRr=r(YIe," (ALBERT model)"),YIe.forEach(t),uRr=i(Ie),S5=n(Ie,"LI",{});var KIe=s(S5);eMe=n(KIe,"STRONG",{});var fyt=s(eMe);_Rr=r(fyt,"bart"),fyt.forEach(t),bRr=r(KIe," \u2014 "),OY=n(KIe,"A",{href:!0});var myt=s(OY);vRr=r(myt,"FlaxBartForConditionalGeneration"),myt.forEach(t),FRr=r(KIe," (BART model)"),KIe.forEach(t),TRr=i(Ie),R5=n(Ie,"LI",{});var ZIe=s(R5);oMe=n(ZIe,"STRONG",{});var gyt=s(oMe);MRr=r(gyt,"bert"),gyt.forEach(t),ERr=r(ZIe," \u2014 "),VY=n(ZIe,"A",{href:!0});var hyt=s(VY);CRr=r(hyt,"FlaxBertForMaskedLM"),hyt.forEach(t),wRr=r(ZIe," (BERT model)"),ZIe.forEach(t),ARr=i(Ie),P5=n(Ie,"LI",{});var eqe=s(P5);rMe=n(eqe,"STRONG",{});var pyt=s(rMe);yRr=r(pyt,"big_bird"),pyt.forEach(t),LRr=r(eqe," \u2014 "),XY=n(eqe,"A",{href:!0});var uyt=s(XY);xRr=r(uyt,"FlaxBigBirdForMaskedLM"),uyt.forEach(t),$Rr=r(eqe," (BigBird model)"),eqe.forEach(t),kRr=i(Ie),B5=n(Ie,"LI",{});var oqe=s(B5);tMe=n(oqe,"STRONG",{});var _yt=s(tMe);SRr=r(_yt,"distilbert"),_yt.forEach(t),RRr=r(oqe," \u2014 "),zY=n(oqe,"A",{href:!0});var byt=s(zY);PRr=r(byt,"FlaxDistilBertForMaskedLM"),byt.forEach(t),BRr=r(oqe," (DistilBERT model)"),oqe.forEach(t),IRr=i(Ie),I5=n(Ie,"LI",{});var rqe=s(I5);aMe=n(rqe,"STRONG",{});var vyt=s(aMe);qRr=r(vyt,"electra"),vyt.forEach(t),NRr=r(rqe," \u2014 "),WY=n(rqe,"A",{href:!0});var Fyt=s(WY);jRr=r(Fyt,"FlaxElectraForMaskedLM"),Fyt.forEach(t),DRr=r(rqe," (ELECTRA model)"),rqe.forEach(t),GRr=i(Ie),q5=n(Ie,"LI",{});var tqe=s(q5);nMe=n(tqe,"STRONG",{});var Tyt=s(nMe);ORr=r(Tyt,"mbart"),Tyt.forEach(t),VRr=r(tqe," \u2014 "),QY=n(tqe,"A",{href:!0});var Myt=s(QY);XRr=r(Myt,"FlaxMBartForConditionalGeneration"),Myt.forEach(t),zRr=r(tqe," (mBART model)"),tqe.forEach(t),WRr=i(Ie),N5=n(Ie,"LI",{});var aqe=s(N5);sMe=n(aqe,"STRONG",{});var Eyt=s(sMe);QRr=r(Eyt,"roberta"),Eyt.forEach(t),HRr=r(aqe," \u2014 "),HY=n(aqe,"A",{href:!0});var Cyt=s(HY);URr=r(Cyt,"FlaxRobertaForMaskedLM"),Cyt.forEach(t),JRr=r(aqe," (RoBERTa model)"),aqe.forEach(t),YRr=i(Ie),j5=n(Ie,"LI",{});var nqe=s(j5);lMe=n(nqe,"STRONG",{});var wyt=s(lMe);KRr=r(wyt,"roformer"),wyt.forEach(t),ZRr=r(nqe," \u2014 "),UY=n(nqe,"A",{href:!0});var Ayt=s(UY);ePr=r(Ayt,"FlaxRoFormerForMaskedLM"),Ayt.forEach(t),oPr=r(nqe," (RoFormer model)"),nqe.forEach(t),rPr=i(Ie),D5=n(Ie,"LI",{});var sqe=s(D5);iMe=n(sqe,"STRONG",{});var yyt=s(iMe);tPr=r(yyt,"xlm-roberta"),yyt.forEach(t),aPr=r(sqe," \u2014 "),JY=n(sqe,"A",{href:!0});var Lyt=s(JY);nPr=r(Lyt,"FlaxXLMRobertaForMaskedLM"),Lyt.forEach(t),sPr=r(sqe," (XLM-RoBERTa model)"),sqe.forEach(t),Ie.forEach(t),lPr=i(Hl),T(G5.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),Vje=i(f),Gc=n(f,"H2",{class:!0});var JGe=s(Gc);O5=n(JGe,"A",{id:!0,class:!0,href:!0});var xyt=s(O5);dMe=n(xyt,"SPAN",{});var $yt=s(dMe);T(W8.$$.fragment,$yt),$yt.forEach(t),xyt.forEach(t),iPr=i(JGe),cMe=n(JGe,"SPAN",{});var kyt=s(cMe);dPr=r(kyt,"FlaxAutoModelForSeq2SeqLM"),kyt.forEach(t),JGe.forEach(t),Xje=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(Q8.$$.fragment,Ul),cPr=i(Ul),Oc=n(Ul,"P",{});var Wee=s(Oc);fPr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YY=n(Wee,"A",{href:!0});var Syt=s(YY);mPr=r(Syt,"from_pretrained()"),Syt.forEach(t),gPr=r(Wee," class method or the "),KY=n(Wee,"A",{href:!0});var Ryt=s(KY);hPr=r(Ryt,"from_config()"),Ryt.forEach(t),pPr=r(Wee,` class
method.`),Wee.forEach(t),uPr=i(Ul),H8=n(Ul,"P",{});var YGe=s(H8);_Pr=r(YGe,"This class cannot be instantiated directly using "),fMe=n(YGe,"CODE",{});var Pyt=s(fMe);bPr=r(Pyt,"__init__()"),Pyt.forEach(t),vPr=r(YGe," (throws an error)."),YGe.forEach(t),FPr=i(Ul),zt=n(Ul,"DIV",{class:!0});var i6=s(zt);T(U8.$$.fragment,i6),TPr=i(i6),mMe=n(i6,"P",{});var Byt=s(mMe);MPr=r(Byt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Byt.forEach(t),EPr=i(i6),Vc=n(i6,"P",{});var Qee=s(Vc);CPr=r(Qee,`Note:
Loading a model from its configuration file does `),gMe=n(Qee,"STRONG",{});var Iyt=s(gMe);wPr=r(Iyt,"not"),Iyt.forEach(t),APr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(Qee,"A",{href:!0});var qyt=s(ZY);yPr=r(qyt,"from_pretrained()"),qyt.forEach(t),LPr=r(Qee," to load the model weights."),Qee.forEach(t),xPr=i(i6),T(V5.$$.fragment,i6),i6.forEach(t),$Pr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(J8.$$.fragment,Jl),kPr=i(Jl),hMe=n(Jl,"P",{});var Nyt=s(hMe);SPr=r(Nyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Nyt.forEach(t),RPr=i(Jl),bn=n(Jl,"P",{});var d6=s(bn);PPr=r(d6,"The model class to instantiate is selected based on the "),pMe=n(d6,"CODE",{});var jyt=s(pMe);BPr=r(jyt,"model_type"),jyt.forEach(t),IPr=r(d6,` property of the config object (either
passed as an argument or loaded from `),uMe=n(d6,"CODE",{});var Dyt=s(uMe);qPr=r(Dyt,"pretrained_model_name_or_path"),Dyt.forEach(t),NPr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=n(d6,"CODE",{});var Gyt=s(_Me);jPr=r(Gyt,"pretrained_model_name_or_path"),Gyt.forEach(t),DPr=r(d6,":"),d6.forEach(t),GPr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);X5=n(ze,"LI",{});var lqe=s(X5);bMe=n(lqe,"STRONG",{});var Oyt=s(bMe);OPr=r(Oyt,"bart"),Oyt.forEach(t),VPr=r(lqe," \u2014 "),eK=n(lqe,"A",{href:!0});var Vyt=s(eK);XPr=r(Vyt,"FlaxBartForConditionalGeneration"),Vyt.forEach(t),zPr=r(lqe," (BART model)"),lqe.forEach(t),WPr=i(ze),z5=n(ze,"LI",{});var iqe=s(z5);vMe=n(iqe,"STRONG",{});var Xyt=s(vMe);QPr=r(Xyt,"blenderbot"),Xyt.forEach(t),HPr=r(iqe," \u2014 "),oK=n(iqe,"A",{href:!0});var zyt=s(oK);UPr=r(zyt,"FlaxBlenderbotForConditionalGeneration"),zyt.forEach(t),JPr=r(iqe," (Blenderbot model)"),iqe.forEach(t),YPr=i(ze),W5=n(ze,"LI",{});var dqe=s(W5);FMe=n(dqe,"STRONG",{});var Wyt=s(FMe);KPr=r(Wyt,"blenderbot-small"),Wyt.forEach(t),ZPr=r(dqe," \u2014 "),rK=n(dqe,"A",{href:!0});var Qyt=s(rK);eBr=r(Qyt,"FlaxBlenderbotSmallForConditionalGeneration"),Qyt.forEach(t),oBr=r(dqe," (BlenderbotSmall model)"),dqe.forEach(t),rBr=i(ze),Q5=n(ze,"LI",{});var cqe=s(Q5);TMe=n(cqe,"STRONG",{});var Hyt=s(TMe);tBr=r(Hyt,"encoder-decoder"),Hyt.forEach(t),aBr=r(cqe," \u2014 "),tK=n(cqe,"A",{href:!0});var Uyt=s(tK);nBr=r(Uyt,"FlaxEncoderDecoderModel"),Uyt.forEach(t),sBr=r(cqe," (Encoder decoder model)"),cqe.forEach(t),lBr=i(ze),H5=n(ze,"LI",{});var fqe=s(H5);MMe=n(fqe,"STRONG",{});var Jyt=s(MMe);iBr=r(Jyt,"marian"),Jyt.forEach(t),dBr=r(fqe," \u2014 "),aK=n(fqe,"A",{href:!0});var Yyt=s(aK);cBr=r(Yyt,"FlaxMarianMTModel"),Yyt.forEach(t),fBr=r(fqe," (Marian model)"),fqe.forEach(t),mBr=i(ze),U5=n(ze,"LI",{});var mqe=s(U5);EMe=n(mqe,"STRONG",{});var Kyt=s(EMe);gBr=r(Kyt,"mbart"),Kyt.forEach(t),hBr=r(mqe," \u2014 "),nK=n(mqe,"A",{href:!0});var Zyt=s(nK);pBr=r(Zyt,"FlaxMBartForConditionalGeneration"),Zyt.forEach(t),uBr=r(mqe," (mBART model)"),mqe.forEach(t),_Br=i(ze),J5=n(ze,"LI",{});var gqe=s(J5);CMe=n(gqe,"STRONG",{});var eLt=s(CMe);bBr=r(eLt,"mt5"),eLt.forEach(t),vBr=r(gqe," \u2014 "),sK=n(gqe,"A",{href:!0});var oLt=s(sK);FBr=r(oLt,"FlaxMT5ForConditionalGeneration"),oLt.forEach(t),TBr=r(gqe," (mT5 model)"),gqe.forEach(t),MBr=i(ze),Y5=n(ze,"LI",{});var hqe=s(Y5);wMe=n(hqe,"STRONG",{});var rLt=s(wMe);EBr=r(rLt,"pegasus"),rLt.forEach(t),CBr=r(hqe," \u2014 "),lK=n(hqe,"A",{href:!0});var tLt=s(lK);wBr=r(tLt,"FlaxPegasusForConditionalGeneration"),tLt.forEach(t),ABr=r(hqe," (Pegasus model)"),hqe.forEach(t),yBr=i(ze),K5=n(ze,"LI",{});var pqe=s(K5);AMe=n(pqe,"STRONG",{});var aLt=s(AMe);LBr=r(aLt,"t5"),aLt.forEach(t),xBr=r(pqe," \u2014 "),iK=n(pqe,"A",{href:!0});var nLt=s(iK);$Br=r(nLt,"FlaxT5ForConditionalGeneration"),nLt.forEach(t),kBr=r(pqe," (T5 model)"),pqe.forEach(t),ze.forEach(t),SBr=i(Jl),T(Z5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),zje=i(f),Xc=n(f,"H2",{class:!0});var KGe=s(Xc);e3=n(KGe,"A",{id:!0,class:!0,href:!0});var sLt=s(e3);yMe=n(sLt,"SPAN",{});var lLt=s(yMe);T(Y8.$$.fragment,lLt),lLt.forEach(t),sLt.forEach(t),RBr=i(KGe),LMe=n(KGe,"SPAN",{});var iLt=s(LMe);PBr=r(iLt,"FlaxAutoModelForSequenceClassification"),iLt.forEach(t),KGe.forEach(t),Wje=i(f),ur=n(f,"DIV",{class:!0});var Yl=s(ur);T(K8.$$.fragment,Yl),BBr=i(Yl),zc=n(Yl,"P",{});var Hee=s(zc);IBr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dK=n(Hee,"A",{href:!0});var dLt=s(dK);qBr=r(dLt,"from_pretrained()"),dLt.forEach(t),NBr=r(Hee," class method or the "),cK=n(Hee,"A",{href:!0});var cLt=s(cK);jBr=r(cLt,"from_config()"),cLt.forEach(t),DBr=r(Hee,` class
method.`),Hee.forEach(t),GBr=i(Yl),Z8=n(Yl,"P",{});var ZGe=s(Z8);OBr=r(ZGe,"This class cannot be instantiated directly using "),xMe=n(ZGe,"CODE",{});var fLt=s(xMe);VBr=r(fLt,"__init__()"),fLt.forEach(t),XBr=r(ZGe," (throws an error)."),ZGe.forEach(t),zBr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var c6=s(Wt);T(ex.$$.fragment,c6),WBr=i(c6),$Me=n(c6,"P",{});var mLt=s($Me);QBr=r(mLt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),mLt.forEach(t),HBr=i(c6),Wc=n(c6,"P",{});var Uee=s(Wc);UBr=r(Uee,`Note:
Loading a model from its configuration file does `),kMe=n(Uee,"STRONG",{});var gLt=s(kMe);JBr=r(gLt,"not"),gLt.forEach(t),YBr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=n(Uee,"A",{href:!0});var hLt=s(fK);KBr=r(hLt,"from_pretrained()"),hLt.forEach(t),ZBr=r(Uee," to load the model weights."),Uee.forEach(t),eIr=i(c6),T(o3.$$.fragment,c6),c6.forEach(t),oIr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(ox.$$.fragment,Kl),rIr=i(Kl),SMe=n(Kl,"P",{});var pLt=s(SMe);tIr=r(pLt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pLt.forEach(t),aIr=i(Kl),vn=n(Kl,"P",{});var f6=s(vn);nIr=r(f6,"The model class to instantiate is selected based on the "),RMe=n(f6,"CODE",{});var uLt=s(RMe);sIr=r(uLt,"model_type"),uLt.forEach(t),lIr=r(f6,` property of the config object (either
passed as an argument or loaded from `),PMe=n(f6,"CODE",{});var _Lt=s(PMe);iIr=r(_Lt,"pretrained_model_name_or_path"),_Lt.forEach(t),dIr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=n(f6,"CODE",{});var bLt=s(BMe);cIr=r(bLt,"pretrained_model_name_or_path"),bLt.forEach(t),fIr=r(f6,":"),f6.forEach(t),mIr=i(Kl),xe=n(Kl,"UL",{});var qe=s(xe);r3=n(qe,"LI",{});var uqe=s(r3);IMe=n(uqe,"STRONG",{});var vLt=s(IMe);gIr=r(vLt,"albert"),vLt.forEach(t),hIr=r(uqe," \u2014 "),mK=n(uqe,"A",{href:!0});var FLt=s(mK);pIr=r(FLt,"FlaxAlbertForSequenceClassification"),FLt.forEach(t),uIr=r(uqe," (ALBERT model)"),uqe.forEach(t),_Ir=i(qe),t3=n(qe,"LI",{});var _qe=s(t3);qMe=n(_qe,"STRONG",{});var TLt=s(qMe);bIr=r(TLt,"bart"),TLt.forEach(t),vIr=r(_qe," \u2014 "),gK=n(_qe,"A",{href:!0});var MLt=s(gK);FIr=r(MLt,"FlaxBartForSequenceClassification"),MLt.forEach(t),TIr=r(_qe," (BART model)"),_qe.forEach(t),MIr=i(qe),a3=n(qe,"LI",{});var bqe=s(a3);NMe=n(bqe,"STRONG",{});var ELt=s(NMe);EIr=r(ELt,"bert"),ELt.forEach(t),CIr=r(bqe," \u2014 "),hK=n(bqe,"A",{href:!0});var CLt=s(hK);wIr=r(CLt,"FlaxBertForSequenceClassification"),CLt.forEach(t),AIr=r(bqe," (BERT model)"),bqe.forEach(t),yIr=i(qe),n3=n(qe,"LI",{});var vqe=s(n3);jMe=n(vqe,"STRONG",{});var wLt=s(jMe);LIr=r(wLt,"big_bird"),wLt.forEach(t),xIr=r(vqe," \u2014 "),pK=n(vqe,"A",{href:!0});var ALt=s(pK);$Ir=r(ALt,"FlaxBigBirdForSequenceClassification"),ALt.forEach(t),kIr=r(vqe," (BigBird model)"),vqe.forEach(t),SIr=i(qe),s3=n(qe,"LI",{});var Fqe=s(s3);DMe=n(Fqe,"STRONG",{});var yLt=s(DMe);RIr=r(yLt,"distilbert"),yLt.forEach(t),PIr=r(Fqe," \u2014 "),uK=n(Fqe,"A",{href:!0});var LLt=s(uK);BIr=r(LLt,"FlaxDistilBertForSequenceClassification"),LLt.forEach(t),IIr=r(Fqe," (DistilBERT model)"),Fqe.forEach(t),qIr=i(qe),l3=n(qe,"LI",{});var Tqe=s(l3);GMe=n(Tqe,"STRONG",{});var xLt=s(GMe);NIr=r(xLt,"electra"),xLt.forEach(t),jIr=r(Tqe," \u2014 "),_K=n(Tqe,"A",{href:!0});var $Lt=s(_K);DIr=r($Lt,"FlaxElectraForSequenceClassification"),$Lt.forEach(t),GIr=r(Tqe," (ELECTRA model)"),Tqe.forEach(t),OIr=i(qe),i3=n(qe,"LI",{});var Mqe=s(i3);OMe=n(Mqe,"STRONG",{});var kLt=s(OMe);VIr=r(kLt,"mbart"),kLt.forEach(t),XIr=r(Mqe," \u2014 "),bK=n(Mqe,"A",{href:!0});var SLt=s(bK);zIr=r(SLt,"FlaxMBartForSequenceClassification"),SLt.forEach(t),WIr=r(Mqe," (mBART model)"),Mqe.forEach(t),QIr=i(qe),d3=n(qe,"LI",{});var Eqe=s(d3);VMe=n(Eqe,"STRONG",{});var RLt=s(VMe);HIr=r(RLt,"roberta"),RLt.forEach(t),UIr=r(Eqe," \u2014 "),vK=n(Eqe,"A",{href:!0});var PLt=s(vK);JIr=r(PLt,"FlaxRobertaForSequenceClassification"),PLt.forEach(t),YIr=r(Eqe," (RoBERTa model)"),Eqe.forEach(t),KIr=i(qe),c3=n(qe,"LI",{});var Cqe=s(c3);XMe=n(Cqe,"STRONG",{});var BLt=s(XMe);ZIr=r(BLt,"roformer"),BLt.forEach(t),eqr=r(Cqe," \u2014 "),FK=n(Cqe,"A",{href:!0});var ILt=s(FK);oqr=r(ILt,"FlaxRoFormerForSequenceClassification"),ILt.forEach(t),rqr=r(Cqe," (RoFormer model)"),Cqe.forEach(t),tqr=i(qe),f3=n(qe,"LI",{});var wqe=s(f3);zMe=n(wqe,"STRONG",{});var qLt=s(zMe);aqr=r(qLt,"xlm-roberta"),qLt.forEach(t),nqr=r(wqe," \u2014 "),TK=n(wqe,"A",{href:!0});var NLt=s(TK);sqr=r(NLt,"FlaxXLMRobertaForSequenceClassification"),NLt.forEach(t),lqr=r(wqe," (XLM-RoBERTa model)"),wqe.forEach(t),qe.forEach(t),iqr=i(Kl),T(m3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Qje=i(f),Qc=n(f,"H2",{class:!0});var eOe=s(Qc);g3=n(eOe,"A",{id:!0,class:!0,href:!0});var jLt=s(g3);WMe=n(jLt,"SPAN",{});var DLt=s(WMe);T(rx.$$.fragment,DLt),DLt.forEach(t),jLt.forEach(t),dqr=i(eOe),QMe=n(eOe,"SPAN",{});var GLt=s(QMe);cqr=r(GLt,"FlaxAutoModelForQuestionAnswering"),GLt.forEach(t),eOe.forEach(t),Hje=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(tx.$$.fragment,Zl),fqr=i(Zl),Hc=n(Zl,"P",{});var Jee=s(Hc);mqr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MK=n(Jee,"A",{href:!0});var OLt=s(MK);gqr=r(OLt,"from_pretrained()"),OLt.forEach(t),hqr=r(Jee," class method or the "),EK=n(Jee,"A",{href:!0});var VLt=s(EK);pqr=r(VLt,"from_config()"),VLt.forEach(t),uqr=r(Jee,` class
method.`),Jee.forEach(t),_qr=i(Zl),ax=n(Zl,"P",{});var oOe=s(ax);bqr=r(oOe,"This class cannot be instantiated directly using "),HMe=n(oOe,"CODE",{});var XLt=s(HMe);vqr=r(XLt,"__init__()"),XLt.forEach(t),Fqr=r(oOe," (throws an error)."),oOe.forEach(t),Tqr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var m6=s(Qt);T(nx.$$.fragment,m6),Mqr=i(m6),UMe=n(m6,"P",{});var zLt=s(UMe);Eqr=r(zLt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zLt.forEach(t),Cqr=i(m6),Uc=n(m6,"P",{});var Yee=s(Uc);wqr=r(Yee,`Note:
Loading a model from its configuration file does `),JMe=n(Yee,"STRONG",{});var WLt=s(JMe);Aqr=r(WLt,"not"),WLt.forEach(t),yqr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=n(Yee,"A",{href:!0});var QLt=s(CK);Lqr=r(QLt,"from_pretrained()"),QLt.forEach(t),xqr=r(Yee," to load the model weights."),Yee.forEach(t),$qr=i(m6),T(h3.$$.fragment,m6),m6.forEach(t),kqr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(sx.$$.fragment,ei),Sqr=i(ei),YMe=n(ei,"P",{});var HLt=s(YMe);Rqr=r(HLt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),HLt.forEach(t),Pqr=i(ei),Fn=n(ei,"P",{});var g6=s(Fn);Bqr=r(g6,"The model class to instantiate is selected based on the "),KMe=n(g6,"CODE",{});var ULt=s(KMe);Iqr=r(ULt,"model_type"),ULt.forEach(t),qqr=r(g6,` property of the config object (either
passed as an argument or loaded from `),ZMe=n(g6,"CODE",{});var JLt=s(ZMe);Nqr=r(JLt,"pretrained_model_name_or_path"),JLt.forEach(t),jqr=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eEe=n(g6,"CODE",{});var YLt=s(eEe);Dqr=r(YLt,"pretrained_model_name_or_path"),YLt.forEach(t),Gqr=r(g6,":"),g6.forEach(t),Oqr=i(ei),$e=n(ei,"UL",{});var Ne=s($e);p3=n(Ne,"LI",{});var Aqe=s(p3);oEe=n(Aqe,"STRONG",{});var KLt=s(oEe);Vqr=r(KLt,"albert"),KLt.forEach(t),Xqr=r(Aqe," \u2014 "),wK=n(Aqe,"A",{href:!0});var ZLt=s(wK);zqr=r(ZLt,"FlaxAlbertForQuestionAnswering"),ZLt.forEach(t),Wqr=r(Aqe," (ALBERT model)"),Aqe.forEach(t),Qqr=i(Ne),u3=n(Ne,"LI",{});var yqe=s(u3);rEe=n(yqe,"STRONG",{});var e8t=s(rEe);Hqr=r(e8t,"bart"),e8t.forEach(t),Uqr=r(yqe," \u2014 "),AK=n(yqe,"A",{href:!0});var o8t=s(AK);Jqr=r(o8t,"FlaxBartForQuestionAnswering"),o8t.forEach(t),Yqr=r(yqe," (BART model)"),yqe.forEach(t),Kqr=i(Ne),_3=n(Ne,"LI",{});var Lqe=s(_3);tEe=n(Lqe,"STRONG",{});var r8t=s(tEe);Zqr=r(r8t,"bert"),r8t.forEach(t),eNr=r(Lqe," \u2014 "),yK=n(Lqe,"A",{href:!0});var t8t=s(yK);oNr=r(t8t,"FlaxBertForQuestionAnswering"),t8t.forEach(t),rNr=r(Lqe," (BERT model)"),Lqe.forEach(t),tNr=i(Ne),b3=n(Ne,"LI",{});var xqe=s(b3);aEe=n(xqe,"STRONG",{});var a8t=s(aEe);aNr=r(a8t,"big_bird"),a8t.forEach(t),nNr=r(xqe," \u2014 "),LK=n(xqe,"A",{href:!0});var n8t=s(LK);sNr=r(n8t,"FlaxBigBirdForQuestionAnswering"),n8t.forEach(t),lNr=r(xqe," (BigBird model)"),xqe.forEach(t),iNr=i(Ne),v3=n(Ne,"LI",{});var $qe=s(v3);nEe=n($qe,"STRONG",{});var s8t=s(nEe);dNr=r(s8t,"distilbert"),s8t.forEach(t),cNr=r($qe," \u2014 "),xK=n($qe,"A",{href:!0});var l8t=s(xK);fNr=r(l8t,"FlaxDistilBertForQuestionAnswering"),l8t.forEach(t),mNr=r($qe," (DistilBERT model)"),$qe.forEach(t),gNr=i(Ne),F3=n(Ne,"LI",{});var kqe=s(F3);sEe=n(kqe,"STRONG",{});var i8t=s(sEe);hNr=r(i8t,"electra"),i8t.forEach(t),pNr=r(kqe," \u2014 "),$K=n(kqe,"A",{href:!0});var d8t=s($K);uNr=r(d8t,"FlaxElectraForQuestionAnswering"),d8t.forEach(t),_Nr=r(kqe," (ELECTRA model)"),kqe.forEach(t),bNr=i(Ne),T3=n(Ne,"LI",{});var Sqe=s(T3);lEe=n(Sqe,"STRONG",{});var c8t=s(lEe);vNr=r(c8t,"mbart"),c8t.forEach(t),FNr=r(Sqe," \u2014 "),kK=n(Sqe,"A",{href:!0});var f8t=s(kK);TNr=r(f8t,"FlaxMBartForQuestionAnswering"),f8t.forEach(t),MNr=r(Sqe," (mBART model)"),Sqe.forEach(t),ENr=i(Ne),M3=n(Ne,"LI",{});var Rqe=s(M3);iEe=n(Rqe,"STRONG",{});var m8t=s(iEe);CNr=r(m8t,"roberta"),m8t.forEach(t),wNr=r(Rqe," \u2014 "),SK=n(Rqe,"A",{href:!0});var g8t=s(SK);ANr=r(g8t,"FlaxRobertaForQuestionAnswering"),g8t.forEach(t),yNr=r(Rqe," (RoBERTa model)"),Rqe.forEach(t),LNr=i(Ne),E3=n(Ne,"LI",{});var Pqe=s(E3);dEe=n(Pqe,"STRONG",{});var h8t=s(dEe);xNr=r(h8t,"roformer"),h8t.forEach(t),$Nr=r(Pqe," \u2014 "),RK=n(Pqe,"A",{href:!0});var p8t=s(RK);kNr=r(p8t,"FlaxRoFormerForQuestionAnswering"),p8t.forEach(t),SNr=r(Pqe," (RoFormer model)"),Pqe.forEach(t),RNr=i(Ne),C3=n(Ne,"LI",{});var Bqe=s(C3);cEe=n(Bqe,"STRONG",{});var u8t=s(cEe);PNr=r(u8t,"xlm-roberta"),u8t.forEach(t),BNr=r(Bqe," \u2014 "),PK=n(Bqe,"A",{href:!0});var _8t=s(PK);INr=r(_8t,"FlaxXLMRobertaForQuestionAnswering"),_8t.forEach(t),qNr=r(Bqe," (XLM-RoBERTa model)"),Bqe.forEach(t),Ne.forEach(t),NNr=i(ei),T(w3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),Uje=i(f),Jc=n(f,"H2",{class:!0});var rOe=s(Jc);A3=n(rOe,"A",{id:!0,class:!0,href:!0});var b8t=s(A3);fEe=n(b8t,"SPAN",{});var v8t=s(fEe);T(lx.$$.fragment,v8t),v8t.forEach(t),b8t.forEach(t),jNr=i(rOe),mEe=n(rOe,"SPAN",{});var F8t=s(mEe);DNr=r(F8t,"FlaxAutoModelForTokenClassification"),F8t.forEach(t),rOe.forEach(t),Jje=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(ix.$$.fragment,oi),GNr=i(oi),Yc=n(oi,"P",{});var Kee=s(Yc);ONr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BK=n(Kee,"A",{href:!0});var T8t=s(BK);VNr=r(T8t,"from_pretrained()"),T8t.forEach(t),XNr=r(Kee," class method or the "),IK=n(Kee,"A",{href:!0});var M8t=s(IK);zNr=r(M8t,"from_config()"),M8t.forEach(t),WNr=r(Kee,` class
method.`),Kee.forEach(t),QNr=i(oi),dx=n(oi,"P",{});var tOe=s(dx);HNr=r(tOe,"This class cannot be instantiated directly using "),gEe=n(tOe,"CODE",{});var E8t=s(gEe);UNr=r(E8t,"__init__()"),E8t.forEach(t),JNr=r(tOe," (throws an error)."),tOe.forEach(t),YNr=i(oi),Ht=n(oi,"DIV",{class:!0});var h6=s(Ht);T(cx.$$.fragment,h6),KNr=i(h6),hEe=n(h6,"P",{});var C8t=s(hEe);ZNr=r(C8t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),C8t.forEach(t),ejr=i(h6),Kc=n(h6,"P",{});var Zee=s(Kc);ojr=r(Zee,`Note:
Loading a model from its configuration file does `),pEe=n(Zee,"STRONG",{});var w8t=s(pEe);rjr=r(w8t,"not"),w8t.forEach(t),tjr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=n(Zee,"A",{href:!0});var A8t=s(qK);ajr=r(A8t,"from_pretrained()"),A8t.forEach(t),njr=r(Zee," to load the model weights."),Zee.forEach(t),sjr=i(h6),T(y3.$$.fragment,h6),h6.forEach(t),ljr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(fx.$$.fragment,ri),ijr=i(ri),uEe=n(ri,"P",{});var y8t=s(uEe);djr=r(y8t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),y8t.forEach(t),cjr=i(ri),Tn=n(ri,"P",{});var p6=s(Tn);fjr=r(p6,"The model class to instantiate is selected based on the "),_Ee=n(p6,"CODE",{});var L8t=s(_Ee);mjr=r(L8t,"model_type"),L8t.forEach(t),gjr=r(p6,` property of the config object (either
passed as an argument or loaded from `),bEe=n(p6,"CODE",{});var x8t=s(bEe);hjr=r(x8t,"pretrained_model_name_or_path"),x8t.forEach(t),pjr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=n(p6,"CODE",{});var $8t=s(vEe);ujr=r($8t,"pretrained_model_name_or_path"),$8t.forEach(t),_jr=r(p6,":"),p6.forEach(t),bjr=i(ri),De=n(ri,"UL",{});var Fo=s(De);L3=n(Fo,"LI",{});var Iqe=s(L3);FEe=n(Iqe,"STRONG",{});var k8t=s(FEe);vjr=r(k8t,"albert"),k8t.forEach(t),Fjr=r(Iqe," \u2014 "),NK=n(Iqe,"A",{href:!0});var S8t=s(NK);Tjr=r(S8t,"FlaxAlbertForTokenClassification"),S8t.forEach(t),Mjr=r(Iqe," (ALBERT model)"),Iqe.forEach(t),Ejr=i(Fo),x3=n(Fo,"LI",{});var qqe=s(x3);TEe=n(qqe,"STRONG",{});var R8t=s(TEe);Cjr=r(R8t,"bert"),R8t.forEach(t),wjr=r(qqe," \u2014 "),jK=n(qqe,"A",{href:!0});var P8t=s(jK);Ajr=r(P8t,"FlaxBertForTokenClassification"),P8t.forEach(t),yjr=r(qqe," (BERT model)"),qqe.forEach(t),Ljr=i(Fo),$3=n(Fo,"LI",{});var Nqe=s($3);MEe=n(Nqe,"STRONG",{});var B8t=s(MEe);xjr=r(B8t,"big_bird"),B8t.forEach(t),$jr=r(Nqe," \u2014 "),DK=n(Nqe,"A",{href:!0});var I8t=s(DK);kjr=r(I8t,"FlaxBigBirdForTokenClassification"),I8t.forEach(t),Sjr=r(Nqe," (BigBird model)"),Nqe.forEach(t),Rjr=i(Fo),k3=n(Fo,"LI",{});var jqe=s(k3);EEe=n(jqe,"STRONG",{});var q8t=s(EEe);Pjr=r(q8t,"distilbert"),q8t.forEach(t),Bjr=r(jqe," \u2014 "),GK=n(jqe,"A",{href:!0});var N8t=s(GK);Ijr=r(N8t,"FlaxDistilBertForTokenClassification"),N8t.forEach(t),qjr=r(jqe," (DistilBERT model)"),jqe.forEach(t),Njr=i(Fo),S3=n(Fo,"LI",{});var Dqe=s(S3);CEe=n(Dqe,"STRONG",{});var j8t=s(CEe);jjr=r(j8t,"electra"),j8t.forEach(t),Djr=r(Dqe," \u2014 "),OK=n(Dqe,"A",{href:!0});var D8t=s(OK);Gjr=r(D8t,"FlaxElectraForTokenClassification"),D8t.forEach(t),Ojr=r(Dqe," (ELECTRA model)"),Dqe.forEach(t),Vjr=i(Fo),R3=n(Fo,"LI",{});var Gqe=s(R3);wEe=n(Gqe,"STRONG",{});var G8t=s(wEe);Xjr=r(G8t,"roberta"),G8t.forEach(t),zjr=r(Gqe," \u2014 "),VK=n(Gqe,"A",{href:!0});var O8t=s(VK);Wjr=r(O8t,"FlaxRobertaForTokenClassification"),O8t.forEach(t),Qjr=r(Gqe," (RoBERTa model)"),Gqe.forEach(t),Hjr=i(Fo),P3=n(Fo,"LI",{});var Oqe=s(P3);AEe=n(Oqe,"STRONG",{});var V8t=s(AEe);Ujr=r(V8t,"roformer"),V8t.forEach(t),Jjr=r(Oqe," \u2014 "),XK=n(Oqe,"A",{href:!0});var X8t=s(XK);Yjr=r(X8t,"FlaxRoFormerForTokenClassification"),X8t.forEach(t),Kjr=r(Oqe," (RoFormer model)"),Oqe.forEach(t),Zjr=i(Fo),B3=n(Fo,"LI",{});var Vqe=s(B3);yEe=n(Vqe,"STRONG",{});var z8t=s(yEe);eDr=r(z8t,"xlm-roberta"),z8t.forEach(t),oDr=r(Vqe," \u2014 "),zK=n(Vqe,"A",{href:!0});var W8t=s(zK);rDr=r(W8t,"FlaxXLMRobertaForTokenClassification"),W8t.forEach(t),tDr=r(Vqe," (XLM-RoBERTa model)"),Vqe.forEach(t),Fo.forEach(t),aDr=i(ri),T(I3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Yje=i(f),Zc=n(f,"H2",{class:!0});var aOe=s(Zc);q3=n(aOe,"A",{id:!0,class:!0,href:!0});var Q8t=s(q3);LEe=n(Q8t,"SPAN",{});var H8t=s(LEe);T(mx.$$.fragment,H8t),H8t.forEach(t),Q8t.forEach(t),nDr=i(aOe),xEe=n(aOe,"SPAN",{});var U8t=s(xEe);sDr=r(U8t,"FlaxAutoModelForMultipleChoice"),U8t.forEach(t),aOe.forEach(t),Kje=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(gx.$$.fragment,ti),lDr=i(ti),ef=n(ti,"P",{});var eoe=s(ef);iDr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WK=n(eoe,"A",{href:!0});var J8t=s(WK);dDr=r(J8t,"from_pretrained()"),J8t.forEach(t),cDr=r(eoe," class method or the "),QK=n(eoe,"A",{href:!0});var Y8t=s(QK);fDr=r(Y8t,"from_config()"),Y8t.forEach(t),mDr=r(eoe,` class
method.`),eoe.forEach(t),gDr=i(ti),hx=n(ti,"P",{});var nOe=s(hx);hDr=r(nOe,"This class cannot be instantiated directly using "),$Ee=n(nOe,"CODE",{});var K8t=s($Ee);pDr=r(K8t,"__init__()"),K8t.forEach(t),uDr=r(nOe," (throws an error)."),nOe.forEach(t),_Dr=i(ti),Ut=n(ti,"DIV",{class:!0});var u6=s(Ut);T(px.$$.fragment,u6),bDr=i(u6),kEe=n(u6,"P",{});var Z8t=s(kEe);vDr=r(Z8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Z8t.forEach(t),FDr=i(u6),of=n(u6,"P",{});var ooe=s(of);TDr=r(ooe,`Note:
Loading a model from its configuration file does `),SEe=n(ooe,"STRONG",{});var ext=s(SEe);MDr=r(ext,"not"),ext.forEach(t),EDr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=n(ooe,"A",{href:!0});var oxt=s(HK);CDr=r(oxt,"from_pretrained()"),oxt.forEach(t),wDr=r(ooe," to load the model weights."),ooe.forEach(t),ADr=i(u6),T(N3.$$.fragment,u6),u6.forEach(t),yDr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(ux.$$.fragment,ai),LDr=i(ai),REe=n(ai,"P",{});var rxt=s(REe);xDr=r(rxt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rxt.forEach(t),$Dr=i(ai),Mn=n(ai,"P",{});var _6=s(Mn);kDr=r(_6,"The model class to instantiate is selected based on the "),PEe=n(_6,"CODE",{});var txt=s(PEe);SDr=r(txt,"model_type"),txt.forEach(t),RDr=r(_6,` property of the config object (either
passed as an argument or loaded from `),BEe=n(_6,"CODE",{});var axt=s(BEe);PDr=r(axt,"pretrained_model_name_or_path"),axt.forEach(t),BDr=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IEe=n(_6,"CODE",{});var nxt=s(IEe);IDr=r(nxt,"pretrained_model_name_or_path"),nxt.forEach(t),qDr=r(_6,":"),_6.forEach(t),NDr=i(ai),Ge=n(ai,"UL",{});var To=s(Ge);j3=n(To,"LI",{});var Xqe=s(j3);qEe=n(Xqe,"STRONG",{});var sxt=s(qEe);jDr=r(sxt,"albert"),sxt.forEach(t),DDr=r(Xqe," \u2014 "),UK=n(Xqe,"A",{href:!0});var lxt=s(UK);GDr=r(lxt,"FlaxAlbertForMultipleChoice"),lxt.forEach(t),ODr=r(Xqe," (ALBERT model)"),Xqe.forEach(t),VDr=i(To),D3=n(To,"LI",{});var zqe=s(D3);NEe=n(zqe,"STRONG",{});var ixt=s(NEe);XDr=r(ixt,"bert"),ixt.forEach(t),zDr=r(zqe," \u2014 "),JK=n(zqe,"A",{href:!0});var dxt=s(JK);WDr=r(dxt,"FlaxBertForMultipleChoice"),dxt.forEach(t),QDr=r(zqe," (BERT model)"),zqe.forEach(t),HDr=i(To),G3=n(To,"LI",{});var Wqe=s(G3);jEe=n(Wqe,"STRONG",{});var cxt=s(jEe);UDr=r(cxt,"big_bird"),cxt.forEach(t),JDr=r(Wqe," \u2014 "),YK=n(Wqe,"A",{href:!0});var fxt=s(YK);YDr=r(fxt,"FlaxBigBirdForMultipleChoice"),fxt.forEach(t),KDr=r(Wqe," (BigBird model)"),Wqe.forEach(t),ZDr=i(To),O3=n(To,"LI",{});var Qqe=s(O3);DEe=n(Qqe,"STRONG",{});var mxt=s(DEe);eGr=r(mxt,"distilbert"),mxt.forEach(t),oGr=r(Qqe," \u2014 "),KK=n(Qqe,"A",{href:!0});var gxt=s(KK);rGr=r(gxt,"FlaxDistilBertForMultipleChoice"),gxt.forEach(t),tGr=r(Qqe," (DistilBERT model)"),Qqe.forEach(t),aGr=i(To),V3=n(To,"LI",{});var Hqe=s(V3);GEe=n(Hqe,"STRONG",{});var hxt=s(GEe);nGr=r(hxt,"electra"),hxt.forEach(t),sGr=r(Hqe," \u2014 "),ZK=n(Hqe,"A",{href:!0});var pxt=s(ZK);lGr=r(pxt,"FlaxElectraForMultipleChoice"),pxt.forEach(t),iGr=r(Hqe," (ELECTRA model)"),Hqe.forEach(t),dGr=i(To),X3=n(To,"LI",{});var Uqe=s(X3);OEe=n(Uqe,"STRONG",{});var uxt=s(OEe);cGr=r(uxt,"roberta"),uxt.forEach(t),fGr=r(Uqe," \u2014 "),eZ=n(Uqe,"A",{href:!0});var _xt=s(eZ);mGr=r(_xt,"FlaxRobertaForMultipleChoice"),_xt.forEach(t),gGr=r(Uqe," (RoBERTa model)"),Uqe.forEach(t),hGr=i(To),z3=n(To,"LI",{});var Jqe=s(z3);VEe=n(Jqe,"STRONG",{});var bxt=s(VEe);pGr=r(bxt,"roformer"),bxt.forEach(t),uGr=r(Jqe," \u2014 "),oZ=n(Jqe,"A",{href:!0});var vxt=s(oZ);_Gr=r(vxt,"FlaxRoFormerForMultipleChoice"),vxt.forEach(t),bGr=r(Jqe," (RoFormer model)"),Jqe.forEach(t),vGr=i(To),W3=n(To,"LI",{});var Yqe=s(W3);XEe=n(Yqe,"STRONG",{});var Fxt=s(XEe);FGr=r(Fxt,"xlm-roberta"),Fxt.forEach(t),TGr=r(Yqe," \u2014 "),rZ=n(Yqe,"A",{href:!0});var Txt=s(rZ);MGr=r(Txt,"FlaxXLMRobertaForMultipleChoice"),Txt.forEach(t),EGr=r(Yqe," (XLM-RoBERTa model)"),Yqe.forEach(t),To.forEach(t),CGr=i(ai),T(Q3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Zje=i(f),rf=n(f,"H2",{class:!0});var sOe=s(rf);H3=n(sOe,"A",{id:!0,class:!0,href:!0});var Mxt=s(H3);zEe=n(Mxt,"SPAN",{});var Ext=s(zEe);T(_x.$$.fragment,Ext),Ext.forEach(t),Mxt.forEach(t),wGr=i(sOe),WEe=n(sOe,"SPAN",{});var Cxt=s(WEe);AGr=r(Cxt,"FlaxAutoModelForNextSentencePrediction"),Cxt.forEach(t),sOe.forEach(t),eDe=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(bx.$$.fragment,ni),yGr=i(ni),tf=n(ni,"P",{});var roe=s(tf);LGr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tZ=n(roe,"A",{href:!0});var wxt=s(tZ);xGr=r(wxt,"from_pretrained()"),wxt.forEach(t),$Gr=r(roe," class method or the "),aZ=n(roe,"A",{href:!0});var Axt=s(aZ);kGr=r(Axt,"from_config()"),Axt.forEach(t),SGr=r(roe,` class
method.`),roe.forEach(t),RGr=i(ni),vx=n(ni,"P",{});var lOe=s(vx);PGr=r(lOe,"This class cannot be instantiated directly using "),QEe=n(lOe,"CODE",{});var yxt=s(QEe);BGr=r(yxt,"__init__()"),yxt.forEach(t),IGr=r(lOe," (throws an error)."),lOe.forEach(t),qGr=i(ni),Jt=n(ni,"DIV",{class:!0});var b6=s(Jt);T(Fx.$$.fragment,b6),NGr=i(b6),HEe=n(b6,"P",{});var Lxt=s(HEe);jGr=r(Lxt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Lxt.forEach(t),DGr=i(b6),af=n(b6,"P",{});var toe=s(af);GGr=r(toe,`Note:
Loading a model from its configuration file does `),UEe=n(toe,"STRONG",{});var xxt=s(UEe);OGr=r(xxt,"not"),xxt.forEach(t),VGr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=n(toe,"A",{href:!0});var $xt=s(nZ);XGr=r($xt,"from_pretrained()"),$xt.forEach(t),zGr=r(toe," to load the model weights."),toe.forEach(t),WGr=i(b6),T(U3.$$.fragment,b6),b6.forEach(t),QGr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(Tx.$$.fragment,si),HGr=i(si),JEe=n(si,"P",{});var kxt=s(JEe);UGr=r(kxt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kxt.forEach(t),JGr=i(si),En=n(si,"P",{});var v6=s(En);YGr=r(v6,"The model class to instantiate is selected based on the "),YEe=n(v6,"CODE",{});var Sxt=s(YEe);KGr=r(Sxt,"model_type"),Sxt.forEach(t),ZGr=r(v6,` property of the config object (either
passed as an argument or loaded from `),KEe=n(v6,"CODE",{});var Rxt=s(KEe);eOr=r(Rxt,"pretrained_model_name_or_path"),Rxt.forEach(t),oOr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZEe=n(v6,"CODE",{});var Pxt=s(ZEe);rOr=r(Pxt,"pretrained_model_name_or_path"),Pxt.forEach(t),tOr=r(v6,":"),v6.forEach(t),aOr=i(si),eCe=n(si,"UL",{});var Bxt=s(eCe);J3=n(Bxt,"LI",{});var Kqe=s(J3);oCe=n(Kqe,"STRONG",{});var Ixt=s(oCe);nOr=r(Ixt,"bert"),Ixt.forEach(t),sOr=r(Kqe," \u2014 "),sZ=n(Kqe,"A",{href:!0});var qxt=s(sZ);lOr=r(qxt,"FlaxBertForNextSentencePrediction"),qxt.forEach(t),iOr=r(Kqe," (BERT model)"),Kqe.forEach(t),Bxt.forEach(t),dOr=i(si),T(Y3.$$.fragment,si),si.forEach(t),ni.forEach(t),oDe=i(f),nf=n(f,"H2",{class:!0});var iOe=s(nf);K3=n(iOe,"A",{id:!0,class:!0,href:!0});var Nxt=s(K3);rCe=n(Nxt,"SPAN",{});var jxt=s(rCe);T(Mx.$$.fragment,jxt),jxt.forEach(t),Nxt.forEach(t),cOr=i(iOe),tCe=n(iOe,"SPAN",{});var Dxt=s(tCe);fOr=r(Dxt,"FlaxAutoModelForImageClassification"),Dxt.forEach(t),iOe.forEach(t),rDe=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(Ex.$$.fragment,li),mOr=i(li),sf=n(li,"P",{});var aoe=s(sf);gOr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lZ=n(aoe,"A",{href:!0});var Gxt=s(lZ);hOr=r(Gxt,"from_pretrained()"),Gxt.forEach(t),pOr=r(aoe," class method or the "),iZ=n(aoe,"A",{href:!0});var Oxt=s(iZ);uOr=r(Oxt,"from_config()"),Oxt.forEach(t),_Or=r(aoe,` class
method.`),aoe.forEach(t),bOr=i(li),Cx=n(li,"P",{});var dOe=s(Cx);vOr=r(dOe,"This class cannot be instantiated directly using "),aCe=n(dOe,"CODE",{});var Vxt=s(aCe);FOr=r(Vxt,"__init__()"),Vxt.forEach(t),TOr=r(dOe," (throws an error)."),dOe.forEach(t),MOr=i(li),Yt=n(li,"DIV",{class:!0});var F6=s(Yt);T(wx.$$.fragment,F6),EOr=i(F6),nCe=n(F6,"P",{});var Xxt=s(nCe);COr=r(Xxt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Xxt.forEach(t),wOr=i(F6),lf=n(F6,"P",{});var noe=s(lf);AOr=r(noe,`Note:
Loading a model from its configuration file does `),sCe=n(noe,"STRONG",{});var zxt=s(sCe);yOr=r(zxt,"not"),zxt.forEach(t),LOr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=n(noe,"A",{href:!0});var Wxt=s(dZ);xOr=r(Wxt,"from_pretrained()"),Wxt.forEach(t),$Or=r(noe," to load the model weights."),noe.forEach(t),kOr=i(F6),T(Z3.$$.fragment,F6),F6.forEach(t),SOr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(Ax.$$.fragment,ii),ROr=i(ii),lCe=n(ii,"P",{});var Qxt=s(lCe);POr=r(Qxt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Qxt.forEach(t),BOr=i(ii),Cn=n(ii,"P",{});var T6=s(Cn);IOr=r(T6,"The model class to instantiate is selected based on the "),iCe=n(T6,"CODE",{});var Hxt=s(iCe);qOr=r(Hxt,"model_type"),Hxt.forEach(t),NOr=r(T6,` property of the config object (either
passed as an argument or loaded from `),dCe=n(T6,"CODE",{});var Uxt=s(dCe);jOr=r(Uxt,"pretrained_model_name_or_path"),Uxt.forEach(t),DOr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cCe=n(T6,"CODE",{});var Jxt=s(cCe);GOr=r(Jxt,"pretrained_model_name_or_path"),Jxt.forEach(t),OOr=r(T6,":"),T6.forEach(t),VOr=i(ii),yx=n(ii,"UL",{});var cOe=s(yx);ew=n(cOe,"LI",{});var Zqe=s(ew);fCe=n(Zqe,"STRONG",{});var Yxt=s(fCe);XOr=r(Yxt,"beit"),Yxt.forEach(t),zOr=r(Zqe," \u2014 "),cZ=n(Zqe,"A",{href:!0});var Kxt=s(cZ);WOr=r(Kxt,"FlaxBeitForImageClassification"),Kxt.forEach(t),QOr=r(Zqe," (BEiT model)"),Zqe.forEach(t),HOr=i(cOe),ow=n(cOe,"LI",{});var eNe=s(ow);mCe=n(eNe,"STRONG",{});var Zxt=s(mCe);UOr=r(Zxt,"vit"),Zxt.forEach(t),JOr=r(eNe," \u2014 "),fZ=n(eNe,"A",{href:!0});var e$t=s(fZ);YOr=r(e$t,"FlaxViTForImageClassification"),e$t.forEach(t),KOr=r(eNe," (ViT model)"),eNe.forEach(t),cOe.forEach(t),ZOr=i(ii),T(rw.$$.fragment,ii),ii.forEach(t),li.forEach(t),tDe=i(f),df=n(f,"H2",{class:!0});var fOe=s(df);tw=n(fOe,"A",{id:!0,class:!0,href:!0});var o$t=s(tw);gCe=n(o$t,"SPAN",{});var r$t=s(gCe);T(Lx.$$.fragment,r$t),r$t.forEach(t),o$t.forEach(t),eVr=i(fOe),hCe=n(fOe,"SPAN",{});var t$t=s(hCe);oVr=r(t$t,"FlaxAutoModelForVision2Seq"),t$t.forEach(t),fOe.forEach(t),aDe=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(xx.$$.fragment,di),rVr=i(di),cf=n(di,"P",{});var soe=s(cf);tVr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mZ=n(soe,"A",{href:!0});var a$t=s(mZ);aVr=r(a$t,"from_pretrained()"),a$t.forEach(t),nVr=r(soe," class method or the "),gZ=n(soe,"A",{href:!0});var n$t=s(gZ);sVr=r(n$t,"from_config()"),n$t.forEach(t),lVr=r(soe,` class
method.`),soe.forEach(t),iVr=i(di),$x=n(di,"P",{});var mOe=s($x);dVr=r(mOe,"This class cannot be instantiated directly using "),pCe=n(mOe,"CODE",{});var s$t=s(pCe);cVr=r(s$t,"__init__()"),s$t.forEach(t),fVr=r(mOe," (throws an error)."),mOe.forEach(t),mVr=i(di),Kt=n(di,"DIV",{class:!0});var M6=s(Kt);T(kx.$$.fragment,M6),gVr=i(M6),uCe=n(M6,"P",{});var l$t=s(uCe);hVr=r(l$t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),l$t.forEach(t),pVr=i(M6),ff=n(M6,"P",{});var loe=s(ff);uVr=r(loe,`Note:
Loading a model from its configuration file does `),_Ce=n(loe,"STRONG",{});var i$t=s(_Ce);_Vr=r(i$t,"not"),i$t.forEach(t),bVr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hZ=n(loe,"A",{href:!0});var d$t=s(hZ);vVr=r(d$t,"from_pretrained()"),d$t.forEach(t),FVr=r(loe," to load the model weights."),loe.forEach(t),TVr=i(M6),T(aw.$$.fragment,M6),M6.forEach(t),MVr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(Sx.$$.fragment,ci),EVr=i(ci),bCe=n(ci,"P",{});var c$t=s(bCe);CVr=r(c$t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),c$t.forEach(t),wVr=i(ci),wn=n(ci,"P",{});var E6=s(wn);AVr=r(E6,"The model class to instantiate is selected based on the "),vCe=n(E6,"CODE",{});var f$t=s(vCe);yVr=r(f$t,"model_type"),f$t.forEach(t),LVr=r(E6,` property of the config object (either
passed as an argument or loaded from `),FCe=n(E6,"CODE",{});var m$t=s(FCe);xVr=r(m$t,"pretrained_model_name_or_path"),m$t.forEach(t),$Vr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TCe=n(E6,"CODE",{});var g$t=s(TCe);kVr=r(g$t,"pretrained_model_name_or_path"),g$t.forEach(t),SVr=r(E6,":"),E6.forEach(t),RVr=i(ci),MCe=n(ci,"UL",{});var h$t=s(MCe);nw=n(h$t,"LI",{});var oNe=s(nw);ECe=n(oNe,"STRONG",{});var p$t=s(ECe);PVr=r(p$t,"vision-encoder-decoder"),p$t.forEach(t),BVr=r(oNe," \u2014 "),pZ=n(oNe,"A",{href:!0});var u$t=s(pZ);IVr=r(u$t,"FlaxVisionEncoderDecoderModel"),u$t.forEach(t),qVr=r(oNe," (Vision Encoder decoder model)"),oNe.forEach(t),h$t.forEach(t),NVr=i(ci),T(sw.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(FSt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(K$,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Z$,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertConfig"),c(ek,"href","/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartConfig"),c(ok,"href","/docs/transformers/pr_17499/en/model_doc/beit#transformers.BeitConfig"),c(rk,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertConfig"),c(tk,"href","/docs/transformers/pr_17499/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(ak,"href","/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdConfig"),c(nk,"href","/docs/transformers/pr_17499/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(sk,"href","/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(lk,"href","/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(ik,"href","/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertConfig"),c(dk,"href","/docs/transformers/pr_17499/en/model_doc/canine#transformers.CanineConfig"),c(ck,"href","/docs/transformers/pr_17499/en/model_doc/clip#transformers.CLIPConfig"),c(fk,"href","/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertConfig"),c(mk,"href","/docs/transformers/pr_17499/en/model_doc/convnext#transformers.ConvNextConfig"),c(gk,"href","/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.CTRLConfig"),c(hk,"href","/docs/transformers/pr_17499/en/model_doc/cvt#transformers.CvtConfig"),c(pk,"href","/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(uk,"href","/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(_k,"href","/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(bk,"href","/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaConfig"),c(vk,"href","/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Fk,"href","/docs/transformers/pr_17499/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Tk,"href","/docs/transformers/pr_17499/en/model_doc/deit#transformers.DeiTConfig"),c(Mk,"href","/docs/transformers/pr_17499/en/model_doc/detr#transformers.DetrConfig"),c(Ek,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Ck,"href","/docs/transformers/pr_17499/en/model_doc/dpr#transformers.DPRConfig"),c(wk,"href","/docs/transformers/pr_17499/en/model_doc/dpt#transformers.DPTConfig"),c(Ak,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraConfig"),c(yk,"href","/docs/transformers/pr_17499/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Lk,"href","/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertConfig"),c(xk,"href","/docs/transformers/pr_17499/en/model_doc/flava#transformers.FlavaConfig"),c($k,"href","/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetConfig"),c(kk,"href","/docs/transformers/pr_17499/en/model_doc/fsmt#transformers.FSMTConfig"),c(Sk,"href","/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelConfig"),c(Rk,"href","/docs/transformers/pr_17499/en/model_doc/glpn#transformers.GLPNConfig"),c(Pk,"href","/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2Config"),c(Bk,"href","/docs/transformers/pr_17499/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Ik,"href","/docs/transformers/pr_17499/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(qk,"href","/docs/transformers/pr_17499/en/model_doc/gptj#transformers.GPTJConfig"),c(Nk,"href","/docs/transformers/pr_17499/en/model_doc/hubert#transformers.HubertConfig"),c(jk,"href","/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertConfig"),c(Dk,"href","/docs/transformers/pr_17499/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Gk,"href","/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Ok,"href","/docs/transformers/pr_17499/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Vk,"href","/docs/transformers/pr_17499/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Xk,"href","/docs/transformers/pr_17499/en/model_doc/led#transformers.LEDConfig"),c(zk,"href","/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerConfig"),c(Wk,"href","/docs/transformers/pr_17499/en/model_doc/luke#transformers.LukeConfig"),c(Qk,"href","/docs/transformers/pr_17499/en/model_doc/lxmert#transformers.LxmertConfig"),c(Hk,"href","/docs/transformers/pr_17499/en/model_doc/m2m_100#transformers.M2M100Config"),c(Uk,"href","/docs/transformers/pr_17499/en/model_doc/marian#transformers.MarianConfig"),c(Jk,"href","/docs/transformers/pr_17499/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Yk,"href","/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartConfig"),c(Kk,"href","/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Zk,"href","/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(eS,"href","/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetConfig"),c(oS,"href","/docs/transformers/pr_17499/en/model_doc/mt5#transformers.MT5Config"),c(rS,"href","/docs/transformers/pr_17499/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(tS,"href","/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(aS,"href","/docs/transformers/pr_17499/en/model_doc/opt#transformers.OPTConfig"),c(nS,"href","/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.PegasusConfig"),c(sS,"href","/docs/transformers/pr_17499/en/model_doc/perceiver#transformers.PerceiverConfig"),c(lS,"href","/docs/transformers/pr_17499/en/model_doc/plbart#transformers.PLBartConfig"),c(iS,"href","/docs/transformers/pr_17499/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(dS,"href","/docs/transformers/pr_17499/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(cS,"href","/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(fS,"href","/docs/transformers/pr_17499/en/model_doc/rag#transformers.RagConfig"),c(mS,"href","/docs/transformers/pr_17499/en/model_doc/realm#transformers.RealmConfig"),c(gS,"href","/docs/transformers/pr_17499/en/model_doc/reformer#transformers.ReformerConfig"),c(hS,"href","/docs/transformers/pr_17499/en/model_doc/regnet#transformers.RegNetConfig"),c(pS,"href","/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertConfig"),c(uS,"href","/docs/transformers/pr_17499/en/model_doc/resnet#transformers.ResNetConfig"),c(_S,"href","/docs/transformers/pr_17499/en/model_doc/retribert#transformers.RetriBertConfig"),c(bS,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaConfig"),c(vS,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerConfig"),c(FS,"href","/docs/transformers/pr_17499/en/model_doc/segformer#transformers.SegformerConfig"),c(TS,"href","/docs/transformers/pr_17499/en/model_doc/sew#transformers.SEWConfig"),c(MS,"href","/docs/transformers/pr_17499/en/model_doc/sew-d#transformers.SEWDConfig"),c(ES,"href","/docs/transformers/pr_17499/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(CS,"href","/docs/transformers/pr_17499/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(wS,"href","/docs/transformers/pr_17499/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(AS,"href","/docs/transformers/pr_17499/en/model_doc/splinter#transformers.SplinterConfig"),c(yS,"href","/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(LS,"href","/docs/transformers/pr_17499/en/model_doc/swin#transformers.SwinConfig"),c(xS,"href","/docs/transformers/pr_17499/en/model_doc/t5#transformers.T5Config"),c($S,"href","/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasConfig"),c(kS,"href","/docs/transformers/pr_17499/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(SS,"href","/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(RS,"href","/docs/transformers/pr_17499/en/model_doc/trocr#transformers.TrOCRConfig"),c(PS,"href","/docs/transformers/pr_17499/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(BS,"href","/docs/transformers/pr_17499/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(IS,"href","/docs/transformers/pr_17499/en/model_doc/van#transformers.VanConfig"),c(qS,"href","/docs/transformers/pr_17499/en/model_doc/vilt#transformers.ViltConfig"),c(NS,"href","/docs/transformers/pr_17499/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(jS,"href","/docs/transformers/pr_17499/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(DS,"href","/docs/transformers/pr_17499/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(GS,"href","/docs/transformers/pr_17499/en/model_doc/vit#transformers.ViTConfig"),c(OS,"href","/docs/transformers/pr_17499/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(VS,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(XS,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(zS,"href","/docs/transformers/pr_17499/en/model_doc/wavlm#transformers.WavLMConfig"),c(WS,"href","/docs/transformers/pr_17499/en/model_doc/xglm#transformers.XGLMConfig"),c(QS,"href","/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMConfig"),c(HS,"href","/docs/transformers/pr_17499/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(US,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(JS,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(YS,"href","/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetConfig"),c(KS,"href","/docs/transformers/pr_17499/en/model_doc/yolos#transformers.YolosConfig"),c(ZS,"href","/docs/transformers/pr_17499/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wg,"id","transformers.AutoTokenizer"),c(wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(eR,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(oR,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertTokenizer"),c(rR,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(tR,"href","/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartTokenizer"),c(aR,"href","/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartTokenizerFast"),c(nR,"href","/docs/transformers/pr_17499/en/model_doc/barthez#transformers.BarthezTokenizer"),c(sR,"href","/docs/transformers/pr_17499/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(lR,"href","/docs/transformers/pr_17499/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(iR,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertTokenizer"),c(dR,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertTokenizerFast"),c(cR,"href","/docs/transformers/pr_17499/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(fR,"href","/docs/transformers/pr_17499/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(mR,"href","/docs/transformers/pr_17499/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(gR,"href","/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(hR,"href","/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(pR,"href","/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(uR,"href","/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(_R,"href","/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(bR,"href","/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(vR,"href","/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(FR,"href","/docs/transformers/pr_17499/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(TR,"href","/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertTokenizer"),c(MR,"href","/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(ER,"href","/docs/transformers/pr_17499/en/model_doc/canine#transformers.CanineTokenizer"),c(CR,"href","/docs/transformers/pr_17499/en/model_doc/clip#transformers.CLIPTokenizer"),c(wR,"href","/docs/transformers/pr_17499/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(AR,"href","/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(yR,"href","/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(LR,"href","/docs/transformers/pr_17499/en/model_doc/cpm#transformers.CpmTokenizer"),c(xR,"href","/docs/transformers/pr_17499/en/model_doc/cpm#transformers.CpmTokenizerFast"),c($R,"href","/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(kR,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaTokenizer"),c(SR,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(RR,"href","/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaTokenizer"),c(PR,"href","/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(BR,"href","/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(IR,"href","/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(qR,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(NR,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(jR,"href","/docs/transformers/pr_17499/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(DR,"href","/docs/transformers/pr_17499/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(GR,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraTokenizer"),c(OR,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(VR,"href","/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(XR,"href","/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetTokenizer"),c(zR,"href","/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(WR,"href","/docs/transformers/pr_17499/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(QR,"href","/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelTokenizer"),c(HR,"href","/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(UR,"href","/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(JR,"href","/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(YR,"href","/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(KR,"href","/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ZR,"href","/docs/transformers/pr_17499/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(eP,"href","/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(oP,"href","/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(rP,"href","/docs/transformers/pr_17499/en/model_doc/herbert#transformers.HerbertTokenizer"),c(tP,"href","/docs/transformers/pr_17499/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(aP,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(nP,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaTokenizer"),c(sP,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(lP,"href","/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(iP,"href","/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(dP,"href","/docs/transformers/pr_17499/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(cP,"href","/docs/transformers/pr_17499/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(fP,"href","/docs/transformers/pr_17499/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(mP,"href","/docs/transformers/pr_17499/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(gP,"href","/docs/transformers/pr_17499/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(hP,"href","/docs/transformers/pr_17499/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(pP,"href","/docs/transformers/pr_17499/en/model_doc/led#transformers.LEDTokenizer"),c(uP,"href","/docs/transformers/pr_17499/en/model_doc/led#transformers.LEDTokenizerFast"),c(_P,"href","/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerTokenizer"),c(bP,"href","/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(vP,"href","/docs/transformers/pr_17499/en/model_doc/luke#transformers.LukeTokenizer"),c(FP,"href","/docs/transformers/pr_17499/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(TP,"href","/docs/transformers/pr_17499/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(MP,"href","/docs/transformers/pr_17499/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(EP,"href","/docs/transformers/pr_17499/en/model_doc/marian#transformers.MarianTokenizer"),c(CP,"href","/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartTokenizer"),c(wP,"href","/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(AP,"href","/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(yP,"href","/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(LP,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertTokenizer"),c(xP,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertTokenizerFast"),c($P,"href","/docs/transformers/pr_17499/en/model_doc/mluke#transformers.MLukeTokenizer"),c(kP,"href","/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(SP,"href","/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(RP,"href","/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(PP,"href","/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(BP,"href","/docs/transformers/pr_17499/en/model_doc/t5#transformers.T5Tokenizer"),c(IP,"href","/docs/transformers/pr_17499/en/model_doc/t5#transformers.T5TokenizerFast"),c(qP,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertTokenizer"),c(NP,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(jP,"href","/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(DP,"href","/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(GP,"href","/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(OP,"href","/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(VP,"href","/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(XP,"href","/docs/transformers/pr_17499/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(zP,"href","/docs/transformers/pr_17499/en/model_doc/phobert#transformers.PhobertTokenizer"),c(WP,"href","/docs/transformers/pr_17499/en/model_doc/plbart#transformers.PLBartTokenizer"),c(QP,"href","/docs/transformers/pr_17499/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(HP,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertTokenizer"),c(UP,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertTokenizerFast"),c(JP,"href","/docs/transformers/pr_17499/en/model_doc/rag#transformers.RagTokenizer"),c(YP,"href","/docs/transformers/pr_17499/en/model_doc/realm#transformers.RealmTokenizer"),c(KP,"href","/docs/transformers/pr_17499/en/model_doc/realm#transformers.RealmTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17499/en/model_doc/reformer#transformers.ReformerTokenizer"),c(eB,"href","/docs/transformers/pr_17499/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(oB,"href","/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertTokenizer"),c(rB,"href","/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(tB,"href","/docs/transformers/pr_17499/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(aB,"href","/docs/transformers/pr_17499/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(nB,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaTokenizer"),c(sB,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(lB,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(iB,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(dB,"href","/docs/transformers/pr_17499/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(cB,"href","/docs/transformers/pr_17499/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(fB,"href","/docs/transformers/pr_17499/en/model_doc/splinter#transformers.SplinterTokenizer"),c(mB,"href","/docs/transformers/pr_17499/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(gB,"href","/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(hB,"href","/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(pB,"href","/docs/transformers/pr_17499/en/model_doc/t5#transformers.T5Tokenizer"),c(uB,"href","/docs/transformers/pr_17499/en/model_doc/t5#transformers.T5TokenizerFast"),c(_B,"href","/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasTokenizer"),c(bB,"href","/docs/transformers/pr_17499/en/model_doc/tapex#transformers.TapexTokenizer"),c(vB,"href","/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(FB,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertTokenizer"),c(TB,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertTokenizerFast"),c(MB,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(EB,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(CB,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(wB,"href","/docs/transformers/pr_17499/en/model_doc/xglm#transformers.XGLMTokenizer"),c(AB,"href","/docs/transformers/pr_17499/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(yB,"href","/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMTokenizer"),c(LB,"href","/docs/transformers/pr_17499/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(xB,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c($B,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(kB,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaTokenizer"),c(SB,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(RB,"href","/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(PB,"href","/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(BB,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertTokenizer"),c(IB,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sh,"id","transformers.AutoFeatureExtractor"),c(sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sh,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(qB,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(NB,"href","/docs/transformers/pr_17499/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(jB,"href","/docs/transformers/pr_17499/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(DB,"href","/docs/transformers/pr_17499/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17499/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(VB,"href","/docs/transformers/pr_17499/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17499/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17499/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17499/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17499/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17499/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(JB,"href","/docs/transformers/pr_17499/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17499/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(KB,"href","/docs/transformers/pr_17499/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17499/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(eI,"href","/docs/transformers/pr_17499/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17499/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17499/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17499/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17499/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17499/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(sI,"href","/docs/transformers/pr_17499/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17499/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(iI,"href","/docs/transformers/pr_17499/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17499/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(fI,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(mI,"href","/docs/transformers/pr_17499/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jh,"id","transformers.AutoProcessor"),c(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jh,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(gI,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(hI,"href","/docs/transformers/pr_17499/en/model_doc/clip#transformers.CLIPProcessor"),c(pI,"href","/docs/transformers/pr_17499/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(uI,"href","/docs/transformers/pr_17499/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(_I,"href","/docs/transformers/pr_17499/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(bI,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vI,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(FI,"href","/docs/transformers/pr_17499/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(TI,"href","/docs/transformers/pr_17499/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(MI,"href","/docs/transformers/pr_17499/en/model_doc/trocr#transformers.TrOCRProcessor"),c(EI,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CI,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wI,"href","/docs/transformers/pr_17499/en/model_doc/vilt#transformers.ViltProcessor"),c(AI,"href","/docs/transformers/pr_17499/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(yI,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LI,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xI,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sp,"id","transformers.AutoModel"),c(sp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sp,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c($I,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kI,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SI,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RI,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertModel"),c(PI,"href","/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartModel"),c(BI,"href","/docs/transformers/pr_17499/en/model_doc/beit#transformers.BeitModel"),c(II,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertModel"),c(qI,"href","/docs/transformers/pr_17499/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(NI,"href","/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdModel"),c(jI,"href","/docs/transformers/pr_17499/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(DI,"href","/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(GI,"href","/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(OI,"href","/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertModel"),c(VI,"href","/docs/transformers/pr_17499/en/model_doc/canine#transformers.CanineModel"),c(XI,"href","/docs/transformers/pr_17499/en/model_doc/clip#transformers.CLIPModel"),c(zI,"href","/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertModel"),c(WI,"href","/docs/transformers/pr_17499/en/model_doc/convnext#transformers.ConvNextModel"),c(QI,"href","/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.CTRLModel"),c(HI,"href","/docs/transformers/pr_17499/en/model_doc/cvt#transformers.CvtModel"),c(UI,"href","/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(JI,"href","/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(YI,"href","/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(KI,"href","/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaModel"),c(ZI,"href","/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(eq,"href","/docs/transformers/pr_17499/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(oq,"href","/docs/transformers/pr_17499/en/model_doc/deit#transformers.DeiTModel"),c(rq,"href","/docs/transformers/pr_17499/en/model_doc/detr#transformers.DetrModel"),c(tq,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertModel"),c(aq,"href","/docs/transformers/pr_17499/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(nq,"href","/docs/transformers/pr_17499/en/model_doc/dpt#transformers.DPTModel"),c(sq,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraModel"),c(lq,"href","/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertModel"),c(iq,"href","/docs/transformers/pr_17499/en/model_doc/flava#transformers.FlavaModel"),c(dq,"href","/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetModel"),c(cq,"href","/docs/transformers/pr_17499/en/model_doc/fsmt#transformers.FSMTModel"),c(fq,"href","/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelModel"),c(mq,"href","/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelBaseModel"),c(gq,"href","/docs/transformers/pr_17499/en/model_doc/glpn#transformers.GLPNModel"),c(hq,"href","/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2Model"),c(pq,"href","/docs/transformers/pr_17499/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(uq,"href","/docs/transformers/pr_17499/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(_q,"href","/docs/transformers/pr_17499/en/model_doc/gptj#transformers.GPTJModel"),c(bq,"href","/docs/transformers/pr_17499/en/model_doc/hubert#transformers.HubertModel"),c(vq,"href","/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertModel"),c(Fq,"href","/docs/transformers/pr_17499/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Tq,"href","/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Mq,"href","/docs/transformers/pr_17499/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Eq,"href","/docs/transformers/pr_17499/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Cq,"href","/docs/transformers/pr_17499/en/model_doc/led#transformers.LEDModel"),c(wq,"href","/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerModel"),c(Aq,"href","/docs/transformers/pr_17499/en/model_doc/luke#transformers.LukeModel"),c(yq,"href","/docs/transformers/pr_17499/en/model_doc/lxmert#transformers.LxmertModel"),c(Lq,"href","/docs/transformers/pr_17499/en/model_doc/m2m_100#transformers.M2M100Model"),c(xq,"href","/docs/transformers/pr_17499/en/model_doc/marian#transformers.MarianModel"),c($q,"href","/docs/transformers/pr_17499/en/model_doc/maskformer#transformers.MaskFormerModel"),c(kq,"href","/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartModel"),c(Sq,"href","/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Rq,"href","/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Pq,"href","/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetModel"),c(Bq,"href","/docs/transformers/pr_17499/en/model_doc/mt5#transformers.MT5Model"),c(Iq,"href","/docs/transformers/pr_17499/en/model_doc/nystromformer#transformers.NystromformerModel"),c(qq,"href","/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Nq,"href","/docs/transformers/pr_17499/en/model_doc/opt#transformers.OPTModel"),c(jq,"href","/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.PegasusModel"),c(Dq,"href","/docs/transformers/pr_17499/en/model_doc/perceiver#transformers.PerceiverModel"),c(Gq,"href","/docs/transformers/pr_17499/en/model_doc/plbart#transformers.PLBartModel"),c(Oq,"href","/docs/transformers/pr_17499/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Vq,"href","/docs/transformers/pr_17499/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Xq,"href","/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertModel"),c(zq,"href","/docs/transformers/pr_17499/en/model_doc/reformer#transformers.ReformerModel"),c(Wq,"href","/docs/transformers/pr_17499/en/model_doc/regnet#transformers.RegNetModel"),c(Qq,"href","/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertModel"),c(Hq,"href","/docs/transformers/pr_17499/en/model_doc/resnet#transformers.ResNetModel"),c(Uq,"href","/docs/transformers/pr_17499/en/model_doc/retribert#transformers.RetriBertModel"),c(Jq,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaModel"),c(Yq,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerModel"),c(Kq,"href","/docs/transformers/pr_17499/en/model_doc/segformer#transformers.SegformerModel"),c(Zq,"href","/docs/transformers/pr_17499/en/model_doc/sew#transformers.SEWModel"),c(eN,"href","/docs/transformers/pr_17499/en/model_doc/sew-d#transformers.SEWDModel"),c(oN,"href","/docs/transformers/pr_17499/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(rN,"href","/docs/transformers/pr_17499/en/model_doc/splinter#transformers.SplinterModel"),c(tN,"href","/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(aN,"href","/docs/transformers/pr_17499/en/model_doc/swin#transformers.SwinModel"),c(nN,"href","/docs/transformers/pr_17499/en/model_doc/t5#transformers.T5Model"),c(sN,"href","/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasModel"),c(lN,"href","/docs/transformers/pr_17499/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(iN,"href","/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(dN,"href","/docs/transformers/pr_17499/en/model_doc/unispeech#transformers.UniSpeechModel"),c(cN,"href","/docs/transformers/pr_17499/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(fN,"href","/docs/transformers/pr_17499/en/model_doc/van#transformers.VanModel"),c(mN,"href","/docs/transformers/pr_17499/en/model_doc/vilt#transformers.ViltModel"),c(gN,"href","/docs/transformers/pr_17499/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(hN,"href","/docs/transformers/pr_17499/en/model_doc/visual_bert#transformers.VisualBertModel"),c(pN,"href","/docs/transformers/pr_17499/en/model_doc/vit#transformers.ViTModel"),c(uN,"href","/docs/transformers/pr_17499/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(_N,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(bN,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(vN,"href","/docs/transformers/pr_17499/en/model_doc/wavlm#transformers.WavLMModel"),c(FN,"href","/docs/transformers/pr_17499/en/model_doc/xglm#transformers.XGLMModel"),c(TN,"href","/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMModel"),c(MN,"href","/docs/transformers/pr_17499/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(EN,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(CN,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(wN,"href","/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetModel"),c(AN,"href","/docs/transformers/pr_17499/en/model_doc/yolos#transformers.YolosModel"),c(yN,"href","/docs/transformers/pr_17499/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t_,"id","transformers.AutoModelForPreTraining"),c(t_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t_,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(LN,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xN,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($N,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kN,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertForPreTraining"),c(SN,"href","/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(RN,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertForPreTraining"),c(PN,"href","/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(BN,"href","/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(IN,"href","/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(qN,"href","/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(NN,"href","/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(jN,"href","/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(DN,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(GN,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraForPreTraining"),c(ON,"href","/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(VN,"href","/docs/transformers/pr_17499/en/model_doc/flava#transformers.FlavaForPreTraining"),c(XN,"href","/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetForPreTraining"),c(zN,"href","/docs/transformers/pr_17499/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(WN,"href","/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(QN,"href","/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(HN,"href","/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(UN,"href","/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(JN,"href","/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(YN,"href","/docs/transformers/pr_17499/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(KN,"href","/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(ZN,"href","/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(ej,"href","/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(oj,"href","/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(rj,"href","/docs/transformers/pr_17499/en/model_doc/retribert#transformers.RetriBertModel"),c(tj,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(aj,"href","/docs/transformers/pr_17499/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(nj,"href","/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(sj,"href","/docs/transformers/pr_17499/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(lj,"href","/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(ij,"href","/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(dj,"href","/docs/transformers/pr_17499/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(cj,"href","/docs/transformers/pr_17499/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(fj,"href","/docs/transformers/pr_17499/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(mj,"href","/docs/transformers/pr_17499/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(gj,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(hj,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(pj,"href","/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uj,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(_j,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(bj,"href","/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U_,"id","transformers.AutoModelForCausalLM"),c(U_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U_,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(vj,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fj,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tj,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mj,"href","/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartForCausalLM"),c(Ej,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertLMHeadModel"),c(Cj,"href","/docs/transformers/pr_17499/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(wj,"href","/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Aj,"href","/docs/transformers/pr_17499/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(yj,"href","/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Lj,"href","/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(xj,"href","/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertForCausalLM"),c($j,"href","/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(kj,"href","/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Sj,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Rj,"href","/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Pj,"href","/docs/transformers/pr_17499/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Bj,"href","/docs/transformers/pr_17499/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Ij,"href","/docs/transformers/pr_17499/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(qj,"href","/docs/transformers/pr_17499/en/model_doc/marian#transformers.MarianForCausalLM"),c(Nj,"href","/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartForCausalLM"),c(jj,"href","/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Dj,"href","/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Gj,"href","/docs/transformers/pr_17499/en/model_doc/opt#transformers.OPTForCausalLM"),c(Oj,"href","/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Vj,"href","/docs/transformers/pr_17499/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Xj,"href","/docs/transformers/pr_17499/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(zj,"href","/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Wj,"href","/docs/transformers/pr_17499/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Qj,"href","/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Hj,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Uj,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Jj,"href","/docs/transformers/pr_17499/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Yj,"href","/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Kj,"href","/docs/transformers/pr_17499/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Zj,"href","/docs/transformers/pr_17499/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(eD,"href","/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(oD,"href","/docs/transformers/pr_17499/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(rD,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(tD,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(aD,"href","/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I1,"id","transformers.AutoModelForMaskedLM"),c(I1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I1,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(nD,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sD,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lD,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iD,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(dD,"href","/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(cD,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertForMaskedLM"),c(fD,"href","/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(mD,"href","/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(gD,"href","/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(hD,"href","/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(pD,"href","/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(uD,"href","/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(_D,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(bD,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(vD,"href","/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(FD,"href","/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(TD,"href","/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(MD,"href","/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(ED,"href","/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(CD,"href","/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(wD,"href","/docs/transformers/pr_17499/en/model_doc/luke#transformers.LukeForMaskedLM"),c(AD,"href","/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(yD,"href","/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(LD,"href","/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(xD,"href","/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c($D,"href","/docs/transformers/pr_17499/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(kD,"href","/docs/transformers/pr_17499/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(SD,"href","/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(RD,"href","/docs/transformers/pr_17499/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(PD,"href","/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(BD,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(ID,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(qD,"href","/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(ND,"href","/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(jD,"href","/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(DD,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(GD,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(OD,"href","/docs/transformers/pr_17499/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M9,"id","transformers.AutoModelForSeq2SeqLM"),c(M9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M9,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(VD,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XD,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zD,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WD,"href","/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(QD,"href","/docs/transformers/pr_17499/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(HD,"href","/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(UD,"href","/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(JD,"href","/docs/transformers/pr_17499/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(YD,"href","/docs/transformers/pr_17499/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(KD,"href","/docs/transformers/pr_17499/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(ZD,"href","/docs/transformers/pr_17499/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(eG,"href","/docs/transformers/pr_17499/en/model_doc/marian#transformers.MarianMTModel"),c(oG,"href","/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(rG,"href","/docs/transformers/pr_17499/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(tG,"href","/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_17499/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_17499/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_17499/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_17499/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O9,"id","transformers.AutoModelForSequenceClassification"),c(O9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O9,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(iG,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dG,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cG,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fG,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17499/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17499/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17499/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c($G,"href","/docs/transformers/pr_17499/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17499/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17499/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17499/en/model_doc/led#transformers.LEDForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17499/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17499/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17499/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17499/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17499/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jb,"id","transformers.AutoModelForMultipleChoice"),c(jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jb,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(aO,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nO,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sO,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lO,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(iO,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertForMultipleChoice"),c(dO,"href","/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(cO,"href","/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(fO,"href","/docs/transformers/pr_17499/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(mO,"href","/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(gO,"href","/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(hO,"href","/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(pO,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(uO,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(_O,"href","/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(bO,"href","/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(vO,"href","/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17499/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(LO,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c($O,"href","/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17499/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b2,"id","transformers.AutoModelForNextSentencePrediction"),c(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b2,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(IO,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qO,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NO,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jO,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(DO,"href","/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(GO,"href","/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(OO,"href","/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(VO,"href","/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y2,"id","transformers.AutoModelForTokenClassification"),c(y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y2,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(XO,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zO,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WO,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QO,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(HO,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertForTokenClassification"),c(UO,"href","/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(JO,"href","/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(YO,"href","/docs/transformers/pr_17499/en/model_doc/canine#transformers.CanineForTokenClassification"),c(KO,"href","/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(eV,"href","/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(oV,"href","/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(rV,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(tV,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(aV,"href","/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(nV,"href","/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(sV,"href","/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(lV,"href","/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(iV,"href","/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(dV,"href","/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(cV,"href","/docs/transformers/pr_17499/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(fV,"href","/docs/transformers/pr_17499/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(mV,"href","/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(gV,"href","/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(hV,"href","/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(pV,"href","/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(uV,"href","/docs/transformers/pr_17499/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(_V,"href","/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(bV,"href","/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(vV,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(FV,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(TV,"href","/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(MV,"href","/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(EV,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(CV,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(wV,"href","/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(AV,"href","/docs/transformers/pr_17499/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f4,"id","transformers.AutoModelForQuestionAnswering"),c(f4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f4,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(yV,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LV,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xV,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($V,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17499/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17499/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17499/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17499/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17499/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17499/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(XV,"href","/docs/transformers/pr_17499/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17499/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17499/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17499/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17499/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17499/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17499/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17499/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17499/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17499/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17499/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17499/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17499/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17499/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17499/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17499/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17499/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17499/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(mX,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(pX,"href","/docs/transformers/pr_17499/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ov,"id","transformers.AutoModelForTableQuestionAnswering"),c(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ov,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(uX,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_X,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bX,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vX,"href","/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sv,"id","transformers.AutoModelForImageClassification"),c(sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sv,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(FX,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_17499/en/model_doc/beit#transformers.BeitForImageClassification"),c(CX,"href","/docs/transformers/pr_17499/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(wX,"href","/docs/transformers/pr_17499/en/model_doc/cvt#transformers.CvtForImageClassification"),c(AX,"href","/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(yX,"href","/docs/transformers/pr_17499/en/model_doc/deit#transformers.DeiTForImageClassification"),c(LX,"href","/docs/transformers/pr_17499/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(xX,"href","/docs/transformers/pr_17499/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c($X,"href","/docs/transformers/pr_17499/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(kX,"href","/docs/transformers/pr_17499/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(SX,"href","/docs/transformers/pr_17499/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(RX,"href","/docs/transformers/pr_17499/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(PX,"href","/docs/transformers/pr_17499/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(BX,"href","/docs/transformers/pr_17499/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(IX,"href","/docs/transformers/pr_17499/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(qX,"href","/docs/transformers/pr_17499/en/model_doc/swin#transformers.SwinForImageClassification"),c(NX,"href","/docs/transformers/pr_17499/en/model_doc/van#transformers.VanForImageClassification"),c(jX,"href","/docs/transformers/pr_17499/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mv,"id","transformers.AutoModelForVision2Seq"),c(Mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mv,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(DX,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/pr_17499/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yv,"id","transformers.AutoModelForAudioClassification"),c(yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yv,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(XX,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WX,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(HX,"href","/docs/transformers/pr_17499/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(UX,"href","/docs/transformers/pr_17499/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(JX,"href","/docs/transformers/pr_17499/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(YX,"href","/docs/transformers/pr_17499/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(KX,"href","/docs/transformers/pr_17499/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(ZX,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(ez,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(oz,"href","/docs/transformers/pr_17499/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dv,"id","transformers.AutoModelForAudioFrameClassification"),c(Dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dv,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(rz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(az,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nz,"href","/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(sz,"href","/docs/transformers/pr_17499/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(lz,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(iz,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(dz,"href","/docs/transformers/pr_17499/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uv,"id","transformers.AutoModelForCTC"),c(Uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uv,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(cz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gz,"href","/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(hz,"href","/docs/transformers/pr_17499/en/model_doc/hubert#transformers.HubertForCTC"),c(pz,"href","/docs/transformers/pr_17499/en/model_doc/sew#transformers.SEWForCTC"),c(uz,"href","/docs/transformers/pr_17499/en/model_doc/sew-d#transformers.SEWDForCTC"),c(_z,"href","/docs/transformers/pr_17499/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(bz,"href","/docs/transformers/pr_17499/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(vz,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Fz,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Tz,"href","/docs/transformers/pr_17499/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(iF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(Mz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ez,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wz,"href","/docs/transformers/pr_17499/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Az,"href","/docs/transformers/pr_17499/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hF,"id","transformers.AutoModelForAudioXVector"),c(hF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hF,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(yz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($z,"href","/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(kz,"href","/docs/transformers/pr_17499/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Sz,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Rz,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Pz,"href","/docs/transformers/pr_17499/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EF,"id","transformers.AutoModelForMaskedImageModeling"),c(EF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EF,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(Bz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nz,"href","/docs/transformers/pr_17499/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(jz,"href","/docs/transformers/pr_17499/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Dz,"href","/docs/transformers/pr_17499/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($F,"id","transformers.AutoModelForObjectDetection"),c($F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($F,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(Gz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_17499/en/model_doc/detr#transformers.DetrForObjectDetection"),c(zz,"href","/docs/transformers/pr_17499/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IF,"id","transformers.AutoModelForImageSegmentation"),c(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IF,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(Wz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uz,"href","/docs/transformers/pr_17499/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GF,"id","transformers.AutoModelForSemanticSegmentation"),c(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(Jz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kz,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zz,"href","/docs/transformers/pr_17499/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(eW,"href","/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(oW,"href","/docs/transformers/pr_17499/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(rW,"href","/docs/transformers/pr_17499/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForInstanceSegmentation"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForInstanceSegmentation"),c(Nd,"class","relative group"),c(tW,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aW,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nW,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sW,"href","/docs/transformers/pr_17499/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.TFAutoModel"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(lW,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.TFAlbertModel"),c(fW,"href","/docs/transformers/pr_17499/en/model_doc/bart#transformers.TFBartModel"),c(mW,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.TFBertModel"),c(gW,"href","/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(hW,"href","/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(pW,"href","/docs/transformers/pr_17499/en/model_doc/camembert#transformers.TFCamembertModel"),c(uW,"href","/docs/transformers/pr_17499/en/model_doc/clip#transformers.TFCLIPModel"),c(_W,"href","/docs/transformers/pr_17499/en/model_doc/convbert#transformers.TFConvBertModel"),c(bW,"href","/docs/transformers/pr_17499/en/model_doc/convnext#transformers.TFConvNextModel"),c(vW,"href","/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.TFCTRLModel"),c(FW,"href","/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(TW,"href","/docs/transformers/pr_17499/en/model_doc/deberta#transformers.TFDebertaModel"),c(MW,"href","/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(EW,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(CW,"href","/docs/transformers/pr_17499/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(wW,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.TFElectraModel"),c(AW,"href","/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(yW,"href","/docs/transformers/pr_17499/en/model_doc/funnel#transformers.TFFunnelModel"),c(LW,"href","/docs/transformers/pr_17499/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(xW,"href","/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.TFGPT2Model"),c($W,"href","/docs/transformers/pr_17499/en/model_doc/gptj#transformers.TFGPTJModel"),c(kW,"href","/docs/transformers/pr_17499/en/model_doc/hubert#transformers.TFHubertModel"),c(SW,"href","/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(RW,"href","/docs/transformers/pr_17499/en/model_doc/led#transformers.TFLEDModel"),c(PW,"href","/docs/transformers/pr_17499/en/model_doc/longformer#transformers.TFLongformerModel"),c(BW,"href","/docs/transformers/pr_17499/en/model_doc/lxmert#transformers.TFLxmertModel"),c(IW,"href","/docs/transformers/pr_17499/en/model_doc/marian#transformers.TFMarianModel"),c(qW,"href","/docs/transformers/pr_17499/en/model_doc/mbart#transformers.TFMBartModel"),c(NW,"href","/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(jW,"href","/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.TFMPNetModel"),c(DW,"href","/docs/transformers/pr_17499/en/model_doc/mt5#transformers.TFMT5Model"),c(GW,"href","/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(OW,"href","/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.TFPegasusModel"),c(VW,"href","/docs/transformers/pr_17499/en/model_doc/rembert#transformers.TFRemBertModel"),c(XW,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.TFRobertaModel"),c(zW,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.TFRoFormerModel"),c(WW,"href","/docs/transformers/pr_17499/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(QW,"href","/docs/transformers/pr_17499/en/model_doc/swin#transformers.TFSwinModel"),c(HW,"href","/docs/transformers/pr_17499/en/model_doc/t5#transformers.TFT5Model"),c(UW,"href","/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TFTapasModel"),c(JW,"href","/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(YW,"href","/docs/transformers/pr_17499/en/model_doc/vit#transformers.TFViTModel"),c(KW,"href","/docs/transformers/pr_17499/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(ZW,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(eQ,"href","/docs/transformers/pr_17499/en/model_doc/xlm#transformers.TFXLMModel"),c(oQ,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(rQ,"href","/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HT,"id","transformers.TFAutoModelForPreTraining"),c(HT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HT,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(tQ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aQ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nQ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sQ,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(lQ,"href","/docs/transformers/pr_17499/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(iQ,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.TFBertForPreTraining"),c(dQ,"href","/docs/transformers/pr_17499/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(cQ,"href","/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(fQ,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(gQ,"href","/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(hQ,"href","/docs/transformers/pr_17499/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(pQ,"href","/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(uQ,"href","/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(_Q,"href","/docs/transformers/pr_17499/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(bQ,"href","/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(vQ,"href","/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(TQ,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17499/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(EQ,"href","/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(wQ,"href","/docs/transformers/pr_17499/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(AQ,"href","/docs/transformers/pr_17499/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(yQ,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F7,"id","transformers.TFAutoModelForCausalLM"),c(F7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F7,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(xQ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Q,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kQ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SQ,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(RQ,"href","/docs/transformers/pr_17499/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(PQ,"href","/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(BQ,"href","/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(IQ,"href","/docs/transformers/pr_17499/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(qQ,"href","/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(NQ,"href","/docs/transformers/pr_17499/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(jQ,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(DQ,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(GQ,"href","/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(OQ,"href","/docs/transformers/pr_17499/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(VQ,"href","/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B7,"id","transformers.TFAutoModelForImageClassification"),c(B7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B7,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(XQ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zQ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WQ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QQ,"href","/docs/transformers/pr_17499/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(HQ,"href","/docs/transformers/pr_17499/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(UQ,"href","/docs/transformers/pr_17499/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(JQ,"href","/docs/transformers/pr_17499/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O7,"id","transformers.TFAutoModelForMaskedLM"),c(O7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O7,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(YQ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KQ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZQ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eH,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(oH,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(rH,"href","/docs/transformers/pr_17499/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(tH,"href","/docs/transformers/pr_17499/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(aH,"href","/docs/transformers/pr_17499/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(nH,"href","/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(sH,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(lH,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(iH,"href","/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(dH,"href","/docs/transformers/pr_17499/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(cH,"href","/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(fH,"href","/docs/transformers/pr_17499/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(mH,"href","/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(gH,"href","/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(hH,"href","/docs/transformers/pr_17499/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(pH,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(uH,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(_H,"href","/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(bH,"href","/docs/transformers/pr_17499/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(vH,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(FH,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TH,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MH,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EH,"href","/docs/transformers/pr_17499/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(CH,"href","/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(wH,"href","/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(AH,"href","/docs/transformers/pr_17499/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(yH,"href","/docs/transformers/pr_17499/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(LH,"href","/docs/transformers/pr_17499/en/model_doc/marian#transformers.TFMarianMTModel"),c(xH,"href","/docs/transformers/pr_17499/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c($H,"href","/docs/transformers/pr_17499/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(kH,"href","/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(SH,"href","/docs/transformers/pr_17499/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CM,"id","transformers.TFAutoModelForSequenceClassification"),c(CM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CM,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(RH,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PH,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BH,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IH,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(qH,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(NH,"href","/docs/transformers/pr_17499/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(jH,"href","/docs/transformers/pr_17499/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(DH,"href","/docs/transformers/pr_17499/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(GH,"href","/docs/transformers/pr_17499/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(OH,"href","/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(VH,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(XH,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(zH,"href","/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(WH,"href","/docs/transformers/pr_17499/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(QH,"href","/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(HH,"href","/docs/transformers/pr_17499/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(UH,"href","/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(JH,"href","/docs/transformers/pr_17499/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(YH,"href","/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(KH,"href","/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17499/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(eU,"href","/docs/transformers/pr_17499/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(oU,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(rU,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(tU,"href","/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(aU,"href","/docs/transformers/pr_17499/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(nU,"href","/docs/transformers/pr_17499/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(sU,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(lU,"href","/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZM,"id","transformers.TFAutoModelForMultipleChoice"),c(ZM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZM,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(iU,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dU,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cU,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fU,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(mU,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(gU,"href","/docs/transformers/pr_17499/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(hU,"href","/docs/transformers/pr_17499/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(pU,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(uU,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(_U,"href","/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(bU,"href","/docs/transformers/pr_17499/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(vU,"href","/docs/transformers/pr_17499/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(FU,"href","/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(TU,"href","/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(MU,"href","/docs/transformers/pr_17499/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(EU,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(CU,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(wU,"href","/docs/transformers/pr_17499/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(AU,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(yU,"href","/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(LU,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xU,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($U,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kU,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(SU,"href","/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(RU,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PU,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BU,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IU,"href","/docs/transformers/pr_17499/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LE,"id","transformers.TFAutoModelForTokenClassification"),c(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LE,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(qU,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NU,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jU,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DU,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(GU,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(OU,"href","/docs/transformers/pr_17499/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(VU,"href","/docs/transformers/pr_17499/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(XU,"href","/docs/transformers/pr_17499/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(zU,"href","/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(WU,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(QU,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(HU,"href","/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(UU,"href","/docs/transformers/pr_17499/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(JU,"href","/docs/transformers/pr_17499/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(YU,"href","/docs/transformers/pr_17499/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(KU,"href","/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(ZU,"href","/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(eJ,"href","/docs/transformers/pr_17499/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(oJ,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(rJ,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(tJ,"href","/docs/transformers/pr_17499/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(aJ,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(nJ,"href","/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.TFAutoModelForQuestionAnswering"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(sJ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lJ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iJ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dJ,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(cJ,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(fJ,"href","/docs/transformers/pr_17499/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(mJ,"href","/docs/transformers/pr_17499/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(gJ,"href","/docs/transformers/pr_17499/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(hJ,"href","/docs/transformers/pr_17499/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(pJ,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(uJ,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(_J,"href","/docs/transformers/pr_17499/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(bJ,"href","/docs/transformers/pr_17499/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(vJ,"href","/docs/transformers/pr_17499/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(FJ,"href","/docs/transformers/pr_17499/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(TJ,"href","/docs/transformers/pr_17499/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(MJ,"href","/docs/transformers/pr_17499/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(EJ,"href","/docs/transformers/pr_17499/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_17499/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(yJ,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_17499/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FC,"id","transformers.TFAutoModelForVision2Seq"),c(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FC,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(xJ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($J,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kJ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SJ,"href","/docs/transformers/pr_17499/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(RJ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PJ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BJ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IJ,"href","/docs/transformers/pr_17499/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LC,"id","transformers.FlaxAutoModel"),c(LC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LC,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(qJ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NJ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.FlaxAlbertModel"),c(GJ,"href","/docs/transformers/pr_17499/en/model_doc/bart#transformers.FlaxBartModel"),c(OJ,"href","/docs/transformers/pr_17499/en/model_doc/beit#transformers.FlaxBeitModel"),c(VJ,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.FlaxBertModel"),c(XJ,"href","/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(zJ,"href","/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(WJ,"href","/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(QJ,"href","/docs/transformers/pr_17499/en/model_doc/clip#transformers.FlaxCLIPModel"),c(HJ,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(UJ,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.FlaxElectraModel"),c(JJ,"href","/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(YJ,"href","/docs/transformers/pr_17499/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(KJ,"href","/docs/transformers/pr_17499/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(ZJ,"href","/docs/transformers/pr_17499/en/model_doc/marian#transformers.FlaxMarianModel"),c(eY,"href","/docs/transformers/pr_17499/en/model_doc/mbart#transformers.FlaxMBartModel"),c(oY,"href","/docs/transformers/pr_17499/en/model_doc/mt5#transformers.FlaxMT5Model"),c(rY,"href","/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(tY,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(aY,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(nY,"href","/docs/transformers/pr_17499/en/model_doc/t5#transformers.FlaxT5Model"),c(sY,"href","/docs/transformers/pr_17499/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(lY,"href","/docs/transformers/pr_17499/en/model_doc/vit#transformers.FlaxViTModel"),c(iY,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(dY,"href","/docs/transformers/pr_17499/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(cY,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r5,"id","transformers.FlaxAutoModelForCausalLM"),c(r5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(fY,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mY,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gY,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hY,"href","/docs/transformers/pr_17499/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(pY,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(uY,"href","/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(_Y,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(bY,"href","/docs/transformers/pr_17499/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(vY,"href","/docs/transformers/pr_17499/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(FY,"href","/docs/transformers/pr_17499/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(TY,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(MY,"href","/docs/transformers/pr_17499/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h5,"id","transformers.FlaxAutoModelForPreTraining"),c(h5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(EY,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(yY,"href","/docs/transformers/pr_17499/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(LY,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(xY,"href","/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c($Y,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(kY,"href","/docs/transformers/pr_17499/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(SY,"href","/docs/transformers/pr_17499/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(RY,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(PY,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(BY,"href","/docs/transformers/pr_17499/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(IY,"href","/docs/transformers/pr_17499/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(qY,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x5,"id","transformers.FlaxAutoModelForMaskedLM"),c(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Nc,"class","relative group"),c(NY,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jY,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DY,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GY,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(OY,"href","/docs/transformers/pr_17499/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(VY,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(XY,"href","/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(zY,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(WY,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(QY,"href","/docs/transformers/pr_17499/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(HY,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(UY,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(JY,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(YY,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_17499/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(oK,"href","/docs/transformers/pr_17499/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(rK,"href","/docs/transformers/pr_17499/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(tK,"href","/docs/transformers/pr_17499/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(aK,"href","/docs/transformers/pr_17499/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(nK,"href","/docs/transformers/pr_17499/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(sK,"href","/docs/transformers/pr_17499/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(lK,"href","/docs/transformers/pr_17499/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(iK,"href","/docs/transformers/pr_17499/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(dK,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cK,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fK,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mK,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(gK,"href","/docs/transformers/pr_17499/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(hK,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(pK,"href","/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(uK,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(_K,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(bK,"href","/docs/transformers/pr_17499/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(vK,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(FK,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(TK,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(g3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(MK,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EK,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CK,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wK,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(AK,"href","/docs/transformers/pr_17499/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(yK,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(LK,"href","/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(xK,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c($K,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(kK,"href","/docs/transformers/pr_17499/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(SK,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(RK,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A3,"id","transformers.FlaxAutoModelForTokenClassification"),c(A3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(BK,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IK,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qK,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NK,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(jK,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(DK,"href","/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(GK,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(OK,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(VK,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(XK,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(zK,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(WK,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QK,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HK,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UK,"href","/docs/transformers/pr_17499/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(JK,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(YK,"href","/docs/transformers/pr_17499/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(KK,"href","/docs/transformers/pr_17499/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(ZK,"href","/docs/transformers/pr_17499/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(eZ,"href","/docs/transformers/pr_17499/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(oZ,"href","/docs/transformers/pr_17499/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(rZ,"href","/docs/transformers/pr_17499/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(H3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(tZ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aZ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nZ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sZ,"href","/docs/transformers/pr_17499/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K3,"id","transformers.FlaxAutoModelForImageClassification"),c(K3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K3,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(lZ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iZ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dZ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cZ,"href","/docs/transformers/pr_17499/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(fZ,"href","/docs/transformers/pr_17499/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tw,"id","transformers.FlaxAutoModelForVision2Seq"),c(tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(mZ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gZ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hZ,"href","/docs/transformers/pr_17499/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pZ,"href","/docs/transformers/pr_17499/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,_),b(f,rt,_),e(rt,mi),e(rt,gi),e(gi,C6),e(rt,uf),b(f,je,_),b(f,We,_),e(We,hi),e(We,yn),e(yn,w6),e(We,Ln),e(We,xn),e(xn,A6),e(We,pi),e(We,$n),e($n,y6),e(We,ui),b(f,_f,_),M(Ca,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,W$),e(Ae,_i),e(_i,Q$),e(Ae,H$),b(f,Eo,_),b(f,wa,_),e(wa,U$),e(wa,bf),e(bf,J$),e(wa,gOe),b(f,rNe,_),b(f,bi,_),e(bi,vf),e(vf,ioe),M(L6,ioe,null),e(bi,hOe),e(bi,doe),e(doe,pOe),b(f,tNe,_),b(f,kn,_),e(kn,uOe),e(kn,coe),e(coe,_Oe),e(kn,bOe),e(kn,foe),e(foe,vOe),e(kn,FOe),b(f,aNe,_),M(x6,f,_),b(f,nNe,_),b(f,Y$,_),e(Y$,TOe),b(f,sNe,_),M(Ff,f,_),b(f,lNe,_),b(f,vi,_),e(vi,Tf),e(Tf,moe),M($6,moe,null),e(vi,MOe),e(vi,goe),e(goe,EOe),b(f,iNe,_),b(f,Co,_),M(k6,Co,null),e(Co,COe),e(Co,S6),e(S6,wOe),e(S6,K$),e(K$,AOe),e(S6,yOe),e(Co,LOe),e(Co,R6),e(R6,xOe),e(R6,hoe),e(hoe,$Oe),e(R6,kOe),e(Co,SOe),e(Co,Er),M(P6,Er,null),e(Er,ROe),e(Er,poe),e(poe,POe),e(Er,BOe),e(Er,Fi),e(Fi,IOe),e(Fi,uoe),e(uoe,qOe),e(Fi,NOe),e(Fi,_oe),e(_oe,jOe),e(Fi,DOe),e(Er,GOe),e(Er,A),e(A,Mf),e(Mf,boe),e(boe,OOe),e(Mf,VOe),e(Mf,Z$),e(Z$,XOe),e(Mf,zOe),e(A,WOe),e(A,Ef),e(Ef,voe),e(voe,QOe),e(Ef,HOe),e(Ef,ek),e(ek,UOe),e(Ef,JOe),e(A,YOe),e(A,Cf),e(Cf,Foe),e(Foe,KOe),e(Cf,ZOe),e(Cf,ok),e(ok,eVe),e(Cf,oVe),e(A,rVe),e(A,wf),e(wf,Toe),e(Toe,tVe),e(wf,aVe),e(wf,rk),e(rk,nVe),e(wf,sVe),e(A,lVe),e(A,Af),e(Af,Moe),e(Moe,iVe),e(Af,dVe),e(Af,tk),e(tk,cVe),e(Af,fVe),e(A,mVe),e(A,yf),e(yf,Eoe),e(Eoe,gVe),e(yf,hVe),e(yf,ak),e(ak,pVe),e(yf,uVe),e(A,_Ve),e(A,Lf),e(Lf,Coe),e(Coe,bVe),e(Lf,vVe),e(Lf,nk),e(nk,FVe),e(Lf,TVe),e(A,MVe),e(A,xf),e(xf,woe),e(woe,EVe),e(xf,CVe),e(xf,sk),e(sk,wVe),e(xf,AVe),e(A,yVe),e(A,$f),e($f,Aoe),e(Aoe,LVe),e($f,xVe),e($f,lk),e(lk,$Ve),e($f,kVe),e(A,SVe),e(A,kf),e(kf,yoe),e(yoe,RVe),e(kf,PVe),e(kf,ik),e(ik,BVe),e(kf,IVe),e(A,qVe),e(A,Sf),e(Sf,Loe),e(Loe,NVe),e(Sf,jVe),e(Sf,dk),e(dk,DVe),e(Sf,GVe),e(A,OVe),e(A,Rf),e(Rf,xoe),e(xoe,VVe),e(Rf,XVe),e(Rf,ck),e(ck,zVe),e(Rf,WVe),e(A,QVe),e(A,Pf),e(Pf,$oe),e($oe,HVe),e(Pf,UVe),e(Pf,fk),e(fk,JVe),e(Pf,YVe),e(A,KVe),e(A,Bf),e(Bf,koe),e(koe,ZVe),e(Bf,eXe),e(Bf,mk),e(mk,oXe),e(Bf,rXe),e(A,tXe),e(A,If),e(If,Soe),e(Soe,aXe),e(If,nXe),e(If,gk),e(gk,sXe),e(If,lXe),e(A,iXe),e(A,qf),e(qf,Roe),e(Roe,dXe),e(qf,cXe),e(qf,hk),e(hk,fXe),e(qf,mXe),e(A,gXe),e(A,Nf),e(Nf,Poe),e(Poe,hXe),e(Nf,pXe),e(Nf,pk),e(pk,uXe),e(Nf,_Xe),e(A,bXe),e(A,jf),e(jf,Boe),e(Boe,vXe),e(jf,FXe),e(jf,uk),e(uk,TXe),e(jf,MXe),e(A,EXe),e(A,Df),e(Df,Ioe),e(Ioe,CXe),e(Df,wXe),e(Df,_k),e(_k,AXe),e(Df,yXe),e(A,LXe),e(A,Gf),e(Gf,qoe),e(qoe,xXe),e(Gf,$Xe),e(Gf,bk),e(bk,kXe),e(Gf,SXe),e(A,RXe),e(A,Of),e(Of,Noe),e(Noe,PXe),e(Of,BXe),e(Of,vk),e(vk,IXe),e(Of,qXe),e(A,NXe),e(A,Vf),e(Vf,joe),e(joe,jXe),e(Vf,DXe),e(Vf,Fk),e(Fk,GXe),e(Vf,OXe),e(A,VXe),e(A,Xf),e(Xf,Doe),e(Doe,XXe),e(Xf,zXe),e(Xf,Tk),e(Tk,WXe),e(Xf,QXe),e(A,HXe),e(A,zf),e(zf,Goe),e(Goe,UXe),e(zf,JXe),e(zf,Mk),e(Mk,YXe),e(zf,KXe),e(A,ZXe),e(A,Wf),e(Wf,Ooe),e(Ooe,eze),e(Wf,oze),e(Wf,Ek),e(Ek,rze),e(Wf,tze),e(A,aze),e(A,Qf),e(Qf,Voe),e(Voe,nze),e(Qf,sze),e(Qf,Ck),e(Ck,lze),e(Qf,ize),e(A,dze),e(A,Hf),e(Hf,Xoe),e(Xoe,cze),e(Hf,fze),e(Hf,wk),e(wk,mze),e(Hf,gze),e(A,hze),e(A,Uf),e(Uf,zoe),e(zoe,pze),e(Uf,uze),e(Uf,Ak),e(Ak,_ze),e(Uf,bze),e(A,vze),e(A,Jf),e(Jf,Woe),e(Woe,Fze),e(Jf,Tze),e(Jf,yk),e(yk,Mze),e(Jf,Eze),e(A,Cze),e(A,Yf),e(Yf,Qoe),e(Qoe,wze),e(Yf,Aze),e(Yf,Lk),e(Lk,yze),e(Yf,Lze),e(A,xze),e(A,Kf),e(Kf,Hoe),e(Hoe,$ze),e(Kf,kze),e(Kf,xk),e(xk,Sze),e(Kf,Rze),e(A,Pze),e(A,Zf),e(Zf,Uoe),e(Uoe,Bze),e(Zf,Ize),e(Zf,$k),e($k,qze),e(Zf,Nze),e(A,jze),e(A,em),e(em,Joe),e(Joe,Dze),e(em,Gze),e(em,kk),e(kk,Oze),e(em,Vze),e(A,Xze),e(A,om),e(om,Yoe),e(Yoe,zze),e(om,Wze),e(om,Sk),e(Sk,Qze),e(om,Hze),e(A,Uze),e(A,rm),e(rm,Koe),e(Koe,Jze),e(rm,Yze),e(rm,Rk),e(Rk,Kze),e(rm,Zze),e(A,eWe),e(A,tm),e(tm,Zoe),e(Zoe,oWe),e(tm,rWe),e(tm,Pk),e(Pk,tWe),e(tm,aWe),e(A,nWe),e(A,am),e(am,ere),e(ere,sWe),e(am,lWe),e(am,Bk),e(Bk,iWe),e(am,dWe),e(A,cWe),e(A,nm),e(nm,ore),e(ore,fWe),e(nm,mWe),e(nm,Ik),e(Ik,gWe),e(nm,hWe),e(A,pWe),e(A,sm),e(sm,rre),e(rre,uWe),e(sm,_We),e(sm,qk),e(qk,bWe),e(sm,vWe),e(A,FWe),e(A,lm),e(lm,tre),e(tre,TWe),e(lm,MWe),e(lm,Nk),e(Nk,EWe),e(lm,CWe),e(A,wWe),e(A,im),e(im,are),e(are,AWe),e(im,yWe),e(im,jk),e(jk,LWe),e(im,xWe),e(A,$We),e(A,dm),e(dm,nre),e(nre,kWe),e(dm,SWe),e(dm,Dk),e(Dk,RWe),e(dm,PWe),e(A,BWe),e(A,cm),e(cm,sre),e(sre,IWe),e(cm,qWe),e(cm,Gk),e(Gk,NWe),e(cm,jWe),e(A,DWe),e(A,fm),e(fm,lre),e(lre,GWe),e(fm,OWe),e(fm,Ok),e(Ok,VWe),e(fm,XWe),e(A,zWe),e(A,mm),e(mm,ire),e(ire,WWe),e(mm,QWe),e(mm,Vk),e(Vk,HWe),e(mm,UWe),e(A,JWe),e(A,gm),e(gm,dre),e(dre,YWe),e(gm,KWe),e(gm,Xk),e(Xk,ZWe),e(gm,eQe),e(A,oQe),e(A,hm),e(hm,cre),e(cre,rQe),e(hm,tQe),e(hm,zk),e(zk,aQe),e(hm,nQe),e(A,sQe),e(A,pm),e(pm,fre),e(fre,lQe),e(pm,iQe),e(pm,Wk),e(Wk,dQe),e(pm,cQe),e(A,fQe),e(A,um),e(um,mre),e(mre,mQe),e(um,gQe),e(um,Qk),e(Qk,hQe),e(um,pQe),e(A,uQe),e(A,_m),e(_m,gre),e(gre,_Qe),e(_m,bQe),e(_m,Hk),e(Hk,vQe),e(_m,FQe),e(A,TQe),e(A,bm),e(bm,hre),e(hre,MQe),e(bm,EQe),e(bm,Uk),e(Uk,CQe),e(bm,wQe),e(A,AQe),e(A,vm),e(vm,pre),e(pre,yQe),e(vm,LQe),e(vm,Jk),e(Jk,xQe),e(vm,$Qe),e(A,kQe),e(A,Fm),e(Fm,ure),e(ure,SQe),e(Fm,RQe),e(Fm,Yk),e(Yk,PQe),e(Fm,BQe),e(A,IQe),e(A,Tm),e(Tm,_re),e(_re,qQe),e(Tm,NQe),e(Tm,Kk),e(Kk,jQe),e(Tm,DQe),e(A,GQe),e(A,Mm),e(Mm,bre),e(bre,OQe),e(Mm,VQe),e(Mm,Zk),e(Zk,XQe),e(Mm,zQe),e(A,WQe),e(A,Em),e(Em,vre),e(vre,QQe),e(Em,HQe),e(Em,eS),e(eS,UQe),e(Em,JQe),e(A,YQe),e(A,Cm),e(Cm,Fre),e(Fre,KQe),e(Cm,ZQe),e(Cm,oS),e(oS,eHe),e(Cm,oHe),e(A,rHe),e(A,wm),e(wm,Tre),e(Tre,tHe),e(wm,aHe),e(wm,rS),e(rS,nHe),e(wm,sHe),e(A,lHe),e(A,Am),e(Am,Mre),e(Mre,iHe),e(Am,dHe),e(Am,tS),e(tS,cHe),e(Am,fHe),e(A,mHe),e(A,ym),e(ym,Ere),e(Ere,gHe),e(ym,hHe),e(ym,aS),e(aS,pHe),e(ym,uHe),e(A,_He),e(A,Lm),e(Lm,Cre),e(Cre,bHe),e(Lm,vHe),e(Lm,nS),e(nS,FHe),e(Lm,THe),e(A,MHe),e(A,xm),e(xm,wre),e(wre,EHe),e(xm,CHe),e(xm,sS),e(sS,wHe),e(xm,AHe),e(A,yHe),e(A,$m),e($m,Are),e(Are,LHe),e($m,xHe),e($m,lS),e(lS,$He),e($m,kHe),e(A,SHe),e(A,km),e(km,yre),e(yre,RHe),e(km,PHe),e(km,iS),e(iS,BHe),e(km,IHe),e(A,qHe),e(A,Sm),e(Sm,Lre),e(Lre,NHe),e(Sm,jHe),e(Sm,dS),e(dS,DHe),e(Sm,GHe),e(A,OHe),e(A,Rm),e(Rm,xre),e(xre,VHe),e(Rm,XHe),e(Rm,cS),e(cS,zHe),e(Rm,WHe),e(A,QHe),e(A,Pm),e(Pm,$re),e($re,HHe),e(Pm,UHe),e(Pm,fS),e(fS,JHe),e(Pm,YHe),e(A,KHe),e(A,Bm),e(Bm,kre),e(kre,ZHe),e(Bm,eUe),e(Bm,mS),e(mS,oUe),e(Bm,rUe),e(A,tUe),e(A,Im),e(Im,Sre),e(Sre,aUe),e(Im,nUe),e(Im,gS),e(gS,sUe),e(Im,lUe),e(A,iUe),e(A,qm),e(qm,Rre),e(Rre,dUe),e(qm,cUe),e(qm,hS),e(hS,fUe),e(qm,mUe),e(A,gUe),e(A,Nm),e(Nm,Pre),e(Pre,hUe),e(Nm,pUe),e(Nm,pS),e(pS,uUe),e(Nm,_Ue),e(A,bUe),e(A,jm),e(jm,Bre),e(Bre,vUe),e(jm,FUe),e(jm,uS),e(uS,TUe),e(jm,MUe),e(A,EUe),e(A,Dm),e(Dm,Ire),e(Ire,CUe),e(Dm,wUe),e(Dm,_S),e(_S,AUe),e(Dm,yUe),e(A,LUe),e(A,Gm),e(Gm,qre),e(qre,xUe),e(Gm,$Ue),e(Gm,bS),e(bS,kUe),e(Gm,SUe),e(A,RUe),e(A,Om),e(Om,Nre),e(Nre,PUe),e(Om,BUe),e(Om,vS),e(vS,IUe),e(Om,qUe),e(A,NUe),e(A,Vm),e(Vm,jre),e(jre,jUe),e(Vm,DUe),e(Vm,FS),e(FS,GUe),e(Vm,OUe),e(A,VUe),e(A,Xm),e(Xm,Dre),e(Dre,XUe),e(Xm,zUe),e(Xm,TS),e(TS,WUe),e(Xm,QUe),e(A,HUe),e(A,zm),e(zm,Gre),e(Gre,UUe),e(zm,JUe),e(zm,MS),e(MS,YUe),e(zm,KUe),e(A,ZUe),e(A,Wm),e(Wm,Ore),e(Ore,eJe),e(Wm,oJe),e(Wm,ES),e(ES,rJe),e(Wm,tJe),e(A,aJe),e(A,Qm),e(Qm,Vre),e(Vre,nJe),e(Qm,sJe),e(Qm,CS),e(CS,lJe),e(Qm,iJe),e(A,dJe),e(A,Hm),e(Hm,Xre),e(Xre,cJe),e(Hm,fJe),e(Hm,wS),e(wS,mJe),e(Hm,gJe),e(A,hJe),e(A,Um),e(Um,zre),e(zre,pJe),e(Um,uJe),e(Um,AS),e(AS,_Je),e(Um,bJe),e(A,vJe),e(A,Jm),e(Jm,Wre),e(Wre,FJe),e(Jm,TJe),e(Jm,yS),e(yS,MJe),e(Jm,EJe),e(A,CJe),e(A,Ym),e(Ym,Qre),e(Qre,wJe),e(Ym,AJe),e(Ym,LS),e(LS,yJe),e(Ym,LJe),e(A,xJe),e(A,Km),e(Km,Hre),e(Hre,$Je),e(Km,kJe),e(Km,xS),e(xS,SJe),e(Km,RJe),e(A,PJe),e(A,Zm),e(Zm,Ure),e(Ure,BJe),e(Zm,IJe),e(Zm,$S),e($S,qJe),e(Zm,NJe),e(A,jJe),e(A,eg),e(eg,Jre),e(Jre,DJe),e(eg,GJe),e(eg,kS),e(kS,OJe),e(eg,VJe),e(A,XJe),e(A,og),e(og,Yre),e(Yre,zJe),e(og,WJe),e(og,SS),e(SS,QJe),e(og,HJe),e(A,UJe),e(A,rg),e(rg,Kre),e(Kre,JJe),e(rg,YJe),e(rg,RS),e(RS,KJe),e(rg,ZJe),e(A,eYe),e(A,tg),e(tg,Zre),e(Zre,oYe),e(tg,rYe),e(tg,PS),e(PS,tYe),e(tg,aYe),e(A,nYe),e(A,ag),e(ag,ete),e(ete,sYe),e(ag,lYe),e(ag,BS),e(BS,iYe),e(ag,dYe),e(A,cYe),e(A,ng),e(ng,ote),e(ote,fYe),e(ng,mYe),e(ng,IS),e(IS,gYe),e(ng,hYe),e(A,pYe),e(A,sg),e(sg,rte),e(rte,uYe),e(sg,_Ye),e(sg,qS),e(qS,bYe),e(sg,vYe),e(A,FYe),e(A,lg),e(lg,tte),e(tte,TYe),e(lg,MYe),e(lg,NS),e(NS,EYe),e(lg,CYe),e(A,wYe),e(A,ig),e(ig,ate),e(ate,AYe),e(ig,yYe),e(ig,jS),e(jS,LYe),e(ig,xYe),e(A,$Ye),e(A,dg),e(dg,nte),e(nte,kYe),e(dg,SYe),e(dg,DS),e(DS,RYe),e(dg,PYe),e(A,BYe),e(A,cg),e(cg,ste),e(ste,IYe),e(cg,qYe),e(cg,GS),e(GS,NYe),e(cg,jYe),e(A,DYe),e(A,fg),e(fg,lte),e(lte,GYe),e(fg,OYe),e(fg,OS),e(OS,VYe),e(fg,XYe),e(A,zYe),e(A,mg),e(mg,ite),e(ite,WYe),e(mg,QYe),e(mg,VS),e(VS,HYe),e(mg,UYe),e(A,JYe),e(A,gg),e(gg,dte),e(dte,YYe),e(gg,KYe),e(gg,XS),e(XS,ZYe),e(gg,eKe),e(A,oKe),e(A,hg),e(hg,cte),e(cte,rKe),e(hg,tKe),e(hg,zS),e(zS,aKe),e(hg,nKe),e(A,sKe),e(A,pg),e(pg,fte),e(fte,lKe),e(pg,iKe),e(pg,WS),e(WS,dKe),e(pg,cKe),e(A,fKe),e(A,ug),e(ug,mte),e(mte,mKe),e(ug,gKe),e(ug,QS),e(QS,hKe),e(ug,pKe),e(A,uKe),e(A,_g),e(_g,gte),e(gte,_Ke),e(_g,bKe),e(_g,HS),e(HS,vKe),e(_g,FKe),e(A,TKe),e(A,bg),e(bg,hte),e(hte,MKe),e(bg,EKe),e(bg,US),e(US,CKe),e(bg,wKe),e(A,AKe),e(A,vg),e(vg,pte),e(pte,yKe),e(vg,LKe),e(vg,JS),e(JS,xKe),e(vg,$Ke),e(A,kKe),e(A,Fg),e(Fg,ute),e(ute,SKe),e(Fg,RKe),e(Fg,YS),e(YS,PKe),e(Fg,BKe),e(A,IKe),e(A,Tg),e(Tg,_te),e(_te,qKe),e(Tg,NKe),e(Tg,KS),e(KS,jKe),e(Tg,DKe),e(A,GKe),e(A,Mg),e(Mg,bte),e(bte,OKe),e(Mg,VKe),e(Mg,ZS),e(ZS,XKe),e(Mg,zKe),e(Er,WKe),M(Eg,Er,null),e(Co,QKe),e(Co,Cg),M(B6,Cg,null),e(Cg,HKe),e(Cg,vte),e(vte,UKe),b(f,dNe,_),b(f,Ti,_),e(Ti,wg),e(wg,Fte),M(I6,Fte,null),e(Ti,JKe),e(Ti,Tte),e(Tte,YKe),b(f,cNe,_),b(f,wo,_),M(q6,wo,null),e(wo,KKe),e(wo,N6),e(N6,ZKe),e(N6,eR),e(eR,eZe),e(N6,oZe),e(wo,rZe),e(wo,j6),e(j6,tZe),e(j6,Mte),e(Mte,aZe),e(j6,nZe),e(wo,sZe),e(wo,Cr),M(D6,Cr,null),e(Cr,lZe),e(Cr,Ete),e(Ete,iZe),e(Cr,dZe),e(Cr,Aa),e(Aa,cZe),e(Aa,Cte),e(Cte,fZe),e(Aa,mZe),e(Aa,wte),e(wte,gZe),e(Aa,hZe),e(Aa,Ate),e(Ate,pZe),e(Aa,uZe),e(Cr,_Ze),e(Cr,k),e(k,Sn),e(Sn,yte),e(yte,bZe),e(Sn,vZe),e(Sn,oR),e(oR,FZe),e(Sn,TZe),e(Sn,rR),e(rR,MZe),e(Sn,EZe),e(k,CZe),e(k,Rn),e(Rn,Lte),e(Lte,wZe),e(Rn,AZe),e(Rn,tR),e(tR,yZe),e(Rn,LZe),e(Rn,aR),e(aR,xZe),e(Rn,$Ze),e(k,kZe),e(k,Pn),e(Pn,xte),e(xte,SZe),e(Pn,RZe),e(Pn,nR),e(nR,PZe),e(Pn,BZe),e(Pn,sR),e(sR,IZe),e(Pn,qZe),e(k,NZe),e(k,Ag),e(Ag,$te),e($te,jZe),e(Ag,DZe),e(Ag,lR),e(lR,GZe),e(Ag,OZe),e(k,VZe),e(k,Bn),e(Bn,kte),e(kte,XZe),e(Bn,zZe),e(Bn,iR),e(iR,WZe),e(Bn,QZe),e(Bn,dR),e(dR,HZe),e(Bn,UZe),e(k,JZe),e(k,yg),e(yg,Ste),e(Ste,YZe),e(yg,KZe),e(yg,cR),e(cR,ZZe),e(yg,eeo),e(k,oeo),e(k,Lg),e(Lg,Rte),e(Rte,reo),e(Lg,teo),e(Lg,fR),e(fR,aeo),e(Lg,neo),e(k,seo),e(k,xg),e(xg,Pte),e(Pte,leo),e(xg,ieo),e(xg,mR),e(mR,deo),e(xg,ceo),e(k,feo),e(k,In),e(In,Bte),e(Bte,meo),e(In,geo),e(In,gR),e(gR,heo),e(In,peo),e(In,hR),e(hR,ueo),e(In,_eo),e(k,beo),e(k,qn),e(qn,Ite),e(Ite,veo),e(qn,Feo),e(qn,pR),e(pR,Teo),e(qn,Meo),e(qn,uR),e(uR,Eeo),e(qn,Ceo),e(k,weo),e(k,Nn),e(Nn,qte),e(qte,Aeo),e(Nn,yeo),e(Nn,_R),e(_R,Leo),e(Nn,xeo),e(Nn,bR),e(bR,$eo),e(Nn,keo),e(k,Seo),e(k,$g),e($g,Nte),e(Nte,Reo),e($g,Peo),e($g,vR),e(vR,Beo),e($g,Ieo),e(k,qeo),e(k,kg),e(kg,jte),e(jte,Neo),e(kg,jeo),e(kg,FR),e(FR,Deo),e(kg,Geo),e(k,Oeo),e(k,jn),e(jn,Dte),e(Dte,Veo),e(jn,Xeo),e(jn,TR),e(TR,zeo),e(jn,Weo),e(jn,MR),e(MR,Qeo),e(jn,Heo),e(k,Ueo),e(k,Sg),e(Sg,Gte),e(Gte,Jeo),e(Sg,Yeo),e(Sg,ER),e(ER,Keo),e(Sg,Zeo),e(k,eoo),e(k,Dn),e(Dn,Ote),e(Ote,ooo),e(Dn,roo),e(Dn,CR),e(CR,too),e(Dn,aoo),e(Dn,wR),e(wR,noo),e(Dn,soo),e(k,loo),e(k,Gn),e(Gn,Vte),e(Vte,ioo),e(Gn,doo),e(Gn,AR),e(AR,coo),e(Gn,foo),e(Gn,yR),e(yR,moo),e(Gn,goo),e(k,hoo),e(k,On),e(On,Xte),e(Xte,poo),e(On,uoo),e(On,LR),e(LR,_oo),e(On,boo),e(On,xR),e(xR,voo),e(On,Foo),e(k,Too),e(k,Rg),e(Rg,zte),e(zte,Moo),e(Rg,Eoo),e(Rg,$R),e($R,Coo),e(Rg,woo),e(k,Aoo),e(k,Vn),e(Vn,Wte),e(Wte,yoo),e(Vn,Loo),e(Vn,kR),e(kR,xoo),e(Vn,$oo),e(Vn,SR),e(SR,koo),e(Vn,Soo),e(k,Roo),e(k,Xn),e(Xn,Qte),e(Qte,Poo),e(Xn,Boo),e(Xn,RR),e(RR,Ioo),e(Xn,qoo),e(Xn,PR),e(PR,Noo),e(Xn,joo),e(k,Doo),e(k,zn),e(zn,Hte),e(Hte,Goo),e(zn,Ooo),e(zn,BR),e(BR,Voo),e(zn,Xoo),e(zn,IR),e(IR,zoo),e(zn,Woo),e(k,Qoo),e(k,Wn),e(Wn,Ute),e(Ute,Hoo),e(Wn,Uoo),e(Wn,qR),e(qR,Joo),e(Wn,Yoo),e(Wn,NR),e(NR,Koo),e(Wn,Zoo),e(k,ero),e(k,Qn),e(Qn,Jte),e(Jte,oro),e(Qn,rro),e(Qn,jR),e(jR,tro),e(Qn,aro),e(Qn,DR),e(DR,nro),e(Qn,sro),e(k,lro),e(k,Hn),e(Hn,Yte),e(Yte,iro),e(Hn,dro),e(Hn,GR),e(GR,cro),e(Hn,fro),e(Hn,OR),e(OR,mro),e(Hn,gro),e(k,hro),e(k,Pg),e(Pg,Kte),e(Kte,pro),e(Pg,uro),e(Pg,VR),e(VR,_ro),e(Pg,bro),e(k,vro),e(k,Un),e(Un,Zte),e(Zte,Fro),e(Un,Tro),e(Un,XR),e(XR,Mro),e(Un,Ero),e(Un,zR),e(zR,Cro),e(Un,wro),e(k,Aro),e(k,Bg),e(Bg,eae),e(eae,yro),e(Bg,Lro),e(Bg,WR),e(WR,xro),e(Bg,$ro),e(k,kro),e(k,Jn),e(Jn,oae),e(oae,Sro),e(Jn,Rro),e(Jn,QR),e(QR,Pro),e(Jn,Bro),e(Jn,HR),e(HR,Iro),e(Jn,qro),e(k,Nro),e(k,Yn),e(Yn,rae),e(rae,jro),e(Yn,Dro),e(Yn,UR),e(UR,Gro),e(Yn,Oro),e(Yn,JR),e(JR,Vro),e(Yn,Xro),e(k,zro),e(k,Kn),e(Kn,tae),e(tae,Wro),e(Kn,Qro),e(Kn,YR),e(YR,Hro),e(Kn,Uro),e(Kn,KR),e(KR,Jro),e(Kn,Yro),e(k,Kro),e(k,Ig),e(Ig,aae),e(aae,Zro),e(Ig,eto),e(Ig,ZR),e(ZR,oto),e(Ig,rto),e(k,tto),e(k,Zn),e(Zn,nae),e(nae,ato),e(Zn,nto),e(Zn,eP),e(eP,sto),e(Zn,lto),e(Zn,oP),e(oP,ito),e(Zn,dto),e(k,cto),e(k,es),e(es,sae),e(sae,fto),e(es,mto),e(es,rP),e(rP,gto),e(es,hto),e(es,tP),e(tP,pto),e(es,uto),e(k,_to),e(k,qg),e(qg,lae),e(lae,bto),e(qg,vto),e(qg,aP),e(aP,Fto),e(qg,Tto),e(k,Mto),e(k,os),e(os,iae),e(iae,Eto),e(os,Cto),e(os,nP),e(nP,wto),e(os,Ato),e(os,sP),e(sP,yto),e(os,Lto),e(k,xto),e(k,rs),e(rs,dae),e(dae,$to),e(rs,kto),e(rs,lP),e(lP,Sto),e(rs,Rto),e(rs,iP),e(iP,Pto),e(rs,Bto),e(k,Ito),e(k,ts),e(ts,cae),e(cae,qto),e(ts,Nto),e(ts,dP),e(dP,jto),e(ts,Dto),e(ts,cP),e(cP,Gto),e(ts,Oto),e(k,Vto),e(k,as),e(as,fae),e(fae,Xto),e(as,zto),e(as,fP),e(fP,Wto),e(as,Qto),e(as,mP),e(mP,Hto),e(as,Uto),e(k,Jto),e(k,ns),e(ns,mae),e(mae,Yto),e(ns,Kto),e(ns,gP),e(gP,Zto),e(ns,eao),e(ns,hP),e(hP,oao),e(ns,rao),e(k,tao),e(k,ss),e(ss,gae),e(gae,aao),e(ss,nao),e(ss,pP),e(pP,sao),e(ss,lao),e(ss,uP),e(uP,iao),e(ss,dao),e(k,cao),e(k,ls),e(ls,hae),e(hae,fao),e(ls,mao),e(ls,_P),e(_P,gao),e(ls,hao),e(ls,bP),e(bP,pao),e(ls,uao),e(k,_ao),e(k,Ng),e(Ng,pae),e(pae,bao),e(Ng,vao),e(Ng,vP),e(vP,Fao),e(Ng,Tao),e(k,Mao),e(k,is),e(is,uae),e(uae,Eao),e(is,Cao),e(is,FP),e(FP,wao),e(is,Aao),e(is,TP),e(TP,yao),e(is,Lao),e(k,xao),e(k,jg),e(jg,_ae),e(_ae,$ao),e(jg,kao),e(jg,MP),e(MP,Sao),e(jg,Rao),e(k,Pao),e(k,Dg),e(Dg,bae),e(bae,Bao),e(Dg,Iao),e(Dg,EP),e(EP,qao),e(Dg,Nao),e(k,jao),e(k,ds),e(ds,vae),e(vae,Dao),e(ds,Gao),e(ds,CP),e(CP,Oao),e(ds,Vao),e(ds,wP),e(wP,Xao),e(ds,zao),e(k,Wao),e(k,cs),e(cs,Fae),e(Fae,Qao),e(cs,Hao),e(cs,AP),e(AP,Uao),e(cs,Jao),e(cs,yP),e(yP,Yao),e(cs,Kao),e(k,Zao),e(k,fs),e(fs,Tae),e(Tae,eno),e(fs,ono),e(fs,LP),e(LP,rno),e(fs,tno),e(fs,xP),e(xP,ano),e(fs,nno),e(k,sno),e(k,Gg),e(Gg,Mae),e(Mae,lno),e(Gg,ino),e(Gg,$P),e($P,dno),e(Gg,cno),e(k,fno),e(k,ms),e(ms,Eae),e(Eae,mno),e(ms,gno),e(ms,kP),e(kP,hno),e(ms,pno),e(ms,SP),e(SP,uno),e(ms,_no),e(k,bno),e(k,gs),e(gs,Cae),e(Cae,vno),e(gs,Fno),e(gs,RP),e(RP,Tno),e(gs,Mno),e(gs,PP),e(PP,Eno),e(gs,Cno),e(k,wno),e(k,hs),e(hs,wae),e(wae,Ano),e(hs,yno),e(hs,BP),e(BP,Lno),e(hs,xno),e(hs,IP),e(IP,$no),e(hs,kno),e(k,Sno),e(k,ps),e(ps,Aae),e(Aae,Rno),e(ps,Pno),e(ps,qP),e(qP,Bno),e(ps,Ino),e(ps,NP),e(NP,qno),e(ps,Nno),e(k,jno),e(k,us),e(us,yae),e(yae,Dno),e(us,Gno),e(us,jP),e(jP,Ono),e(us,Vno),e(us,DP),e(DP,Xno),e(us,zno),e(k,Wno),e(k,Og),e(Og,Lae),e(Lae,Qno),e(Og,Hno),e(Og,GP),e(GP,Uno),e(Og,Jno),e(k,Yno),e(k,_s),e(_s,xae),e(xae,Kno),e(_s,Zno),e(_s,OP),e(OP,eso),e(_s,oso),e(_s,VP),e(VP,rso),e(_s,tso),e(k,aso),e(k,Vg),e(Vg,$ae),e($ae,nso),e(Vg,sso),e(Vg,XP),e(XP,lso),e(Vg,iso),e(k,dso),e(k,Xg),e(Xg,kae),e(kae,cso),e(Xg,fso),e(Xg,zP),e(zP,mso),e(Xg,gso),e(k,hso),e(k,zg),e(zg,Sae),e(Sae,pso),e(zg,uso),e(zg,WP),e(WP,_so),e(zg,bso),e(k,vso),e(k,Wg),e(Wg,Rae),e(Rae,Fso),e(Wg,Tso),e(Wg,QP),e(QP,Mso),e(Wg,Eso),e(k,Cso),e(k,bs),e(bs,Pae),e(Pae,wso),e(bs,Aso),e(bs,HP),e(HP,yso),e(bs,Lso),e(bs,UP),e(UP,xso),e(bs,$so),e(k,kso),e(k,Qg),e(Qg,Bae),e(Bae,Sso),e(Qg,Rso),e(Qg,JP),e(JP,Pso),e(Qg,Bso),e(k,Iso),e(k,vs),e(vs,Iae),e(Iae,qso),e(vs,Nso),e(vs,YP),e(YP,jso),e(vs,Dso),e(vs,KP),e(KP,Gso),e(vs,Oso),e(k,Vso),e(k,Fs),e(Fs,qae),e(qae,Xso),e(Fs,zso),e(Fs,ZP),e(ZP,Wso),e(Fs,Qso),e(Fs,eB),e(eB,Hso),e(Fs,Uso),e(k,Jso),e(k,Ts),e(Ts,Nae),e(Nae,Yso),e(Ts,Kso),e(Ts,oB),e(oB,Zso),e(Ts,elo),e(Ts,rB),e(rB,olo),e(Ts,rlo),e(k,tlo),e(k,Ms),e(Ms,jae),e(jae,alo),e(Ms,nlo),e(Ms,tB),e(tB,slo),e(Ms,llo),e(Ms,aB),e(aB,ilo),e(Ms,dlo),e(k,clo),e(k,Es),e(Es,Dae),e(Dae,flo),e(Es,mlo),e(Es,nB),e(nB,glo),e(Es,hlo),e(Es,sB),e(sB,plo),e(Es,ulo),e(k,_lo),e(k,Cs),e(Cs,Gae),e(Gae,blo),e(Cs,vlo),e(Cs,lB),e(lB,Flo),e(Cs,Tlo),e(Cs,iB),e(iB,Mlo),e(Cs,Elo),e(k,Clo),e(k,Hg),e(Hg,Oae),e(Oae,wlo),e(Hg,Alo),e(Hg,dB),e(dB,ylo),e(Hg,Llo),e(k,xlo),e(k,Ug),e(Ug,Vae),e(Vae,$lo),e(Ug,klo),e(Ug,cB),e(cB,Slo),e(Ug,Rlo),e(k,Plo),e(k,ws),e(ws,Xae),e(Xae,Blo),e(ws,Ilo),e(ws,fB),e(fB,qlo),e(ws,Nlo),e(ws,mB),e(mB,jlo),e(ws,Dlo),e(k,Glo),e(k,As),e(As,zae),e(zae,Olo),e(As,Vlo),e(As,gB),e(gB,Xlo),e(As,zlo),e(As,hB),e(hB,Wlo),e(As,Qlo),e(k,Hlo),e(k,ys),e(ys,Wae),e(Wae,Ulo),e(ys,Jlo),e(ys,pB),e(pB,Ylo),e(ys,Klo),e(ys,uB),e(uB,Zlo),e(ys,eio),e(k,oio),e(k,Jg),e(Jg,Qae),e(Qae,rio),e(Jg,tio),e(Jg,_B),e(_B,aio),e(Jg,nio),e(k,sio),e(k,Yg),e(Yg,Hae),e(Hae,lio),e(Yg,iio),e(Yg,bB),e(bB,dio),e(Yg,cio),e(k,fio),e(k,Kg),e(Kg,Uae),e(Uae,mio),e(Kg,gio),e(Kg,vB),e(vB,hio),e(Kg,pio),e(k,uio),e(k,Ls),e(Ls,Jae),e(Jae,_io),e(Ls,bio),e(Ls,FB),e(FB,vio),e(Ls,Fio),e(Ls,TB),e(TB,Tio),e(Ls,Mio),e(k,Eio),e(k,Zg),e(Zg,Yae),e(Yae,Cio),e(Zg,wio),e(Zg,MB),e(MB,Aio),e(Zg,yio),e(k,Lio),e(k,eh),e(eh,Kae),e(Kae,xio),e(eh,$io),e(eh,EB),e(EB,kio),e(eh,Sio),e(k,Rio),e(k,oh),e(oh,Zae),e(Zae,Pio),e(oh,Bio),e(oh,CB),e(CB,Iio),e(oh,qio),e(k,Nio),e(k,xs),e(xs,ene),e(ene,jio),e(xs,Dio),e(xs,wB),e(wB,Gio),e(xs,Oio),e(xs,AB),e(AB,Vio),e(xs,Xio),e(k,zio),e(k,rh),e(rh,one),e(one,Wio),e(rh,Qio),e(rh,yB),e(yB,Hio),e(rh,Uio),e(k,Jio),e(k,th),e(th,rne),e(rne,Yio),e(th,Kio),e(th,LB),e(LB,Zio),e(th,edo),e(k,odo),e(k,$s),e($s,tne),e(tne,rdo),e($s,tdo),e($s,xB),e(xB,ado),e($s,ndo),e($s,$B),e($B,sdo),e($s,ldo),e(k,ido),e(k,ks),e(ks,ane),e(ane,ddo),e(ks,cdo),e(ks,kB),e(kB,fdo),e(ks,mdo),e(ks,SB),e(SB,gdo),e(ks,hdo),e(k,pdo),e(k,Ss),e(Ss,nne),e(nne,udo),e(Ss,_do),e(Ss,RB),e(RB,bdo),e(Ss,vdo),e(Ss,PB),e(PB,Fdo),e(Ss,Tdo),e(k,Mdo),e(k,Rs),e(Rs,sne),e(sne,Edo),e(Rs,Cdo),e(Rs,BB),e(BB,wdo),e(Rs,Ado),e(Rs,IB),e(IB,ydo),e(Rs,Ldo),e(Cr,xdo),M(ah,Cr,null),e(wo,$do),e(wo,nh),M(G6,nh,null),e(nh,kdo),e(nh,lne),e(lne,Sdo),b(f,fNe,_),b(f,Mi,_),e(Mi,sh),e(sh,ine),M(O6,ine,null),e(Mi,Rdo),e(Mi,dne),e(dne,Pdo),b(f,mNe,_),b(f,Ao,_),M(V6,Ao,null),e(Ao,Bdo),e(Ao,X6),e(X6,Ido),e(X6,qB),e(qB,qdo),e(X6,Ndo),e(Ao,jdo),e(Ao,z6),e(z6,Ddo),e(z6,cne),e(cne,Gdo),e(z6,Odo),e(Ao,Vdo),e(Ao,He),M(W6,He,null),e(He,Xdo),e(He,fne),e(fne,zdo),e(He,Wdo),e(He,ya),e(ya,Qdo),e(ya,mne),e(mne,Hdo),e(ya,Udo),e(ya,gne),e(gne,Jdo),e(ya,Ydo),e(ya,hne),e(hne,Kdo),e(ya,Zdo),e(He,eco),e(He,Y),e(Y,lh),e(lh,pne),e(pne,oco),e(lh,rco),e(lh,NB),e(NB,tco),e(lh,aco),e(Y,nco),e(Y,ih),e(ih,une),e(une,sco),e(ih,lco),e(ih,jB),e(jB,ico),e(ih,dco),e(Y,cco),e(Y,dh),e(dh,_ne),e(_ne,fco),e(dh,mco),e(dh,DB),e(DB,gco),e(dh,hco),e(Y,pco),e(Y,ch),e(ch,bne),e(bne,uco),e(ch,_co),e(ch,GB),e(GB,bco),e(ch,vco),e(Y,Fco),e(Y,fh),e(fh,vne),e(vne,Tco),e(fh,Mco),e(fh,OB),e(OB,Eco),e(fh,Cco),e(Y,wco),e(Y,mh),e(mh,Fne),e(Fne,Aco),e(mh,yco),e(mh,VB),e(VB,Lco),e(mh,xco),e(Y,$co),e(Y,gh),e(gh,Tne),e(Tne,kco),e(gh,Sco),e(gh,XB),e(XB,Rco),e(gh,Pco),e(Y,Bco),e(Y,hh),e(hh,Mne),e(Mne,Ico),e(hh,qco),e(hh,zB),e(zB,Nco),e(hh,jco),e(Y,Dco),e(Y,ph),e(ph,Ene),e(Ene,Gco),e(ph,Oco),e(ph,WB),e(WB,Vco),e(ph,Xco),e(Y,zco),e(Y,uh),e(uh,Cne),e(Cne,Wco),e(uh,Qco),e(uh,QB),e(QB,Hco),e(uh,Uco),e(Y,Jco),e(Y,_h),e(_h,wne),e(wne,Yco),e(_h,Kco),e(_h,HB),e(HB,Zco),e(_h,efo),e(Y,ofo),e(Y,bh),e(bh,Ane),e(Ane,rfo),e(bh,tfo),e(bh,UB),e(UB,afo),e(bh,nfo),e(Y,sfo),e(Y,vh),e(vh,yne),e(yne,lfo),e(vh,ifo),e(vh,JB),e(JB,dfo),e(vh,cfo),e(Y,ffo),e(Y,Fh),e(Fh,Lne),e(Lne,mfo),e(Fh,gfo),e(Fh,YB),e(YB,hfo),e(Fh,pfo),e(Y,ufo),e(Y,Th),e(Th,xne),e(xne,_fo),e(Th,bfo),e(Th,KB),e(KB,vfo),e(Th,Ffo),e(Y,Tfo),e(Y,Mh),e(Mh,$ne),e($ne,Mfo),e(Mh,Efo),e(Mh,ZB),e(ZB,Cfo),e(Mh,wfo),e(Y,Afo),e(Y,Eh),e(Eh,kne),e(kne,yfo),e(Eh,Lfo),e(Eh,eI),e(eI,xfo),e(Eh,$fo),e(Y,kfo),e(Y,Ch),e(Ch,Sne),e(Sne,Sfo),e(Ch,Rfo),e(Ch,oI),e(oI,Pfo),e(Ch,Bfo),e(Y,Ifo),e(Y,wh),e(wh,Rne),e(Rne,qfo),e(wh,Nfo),e(wh,rI),e(rI,jfo),e(wh,Dfo),e(Y,Gfo),e(Y,Ah),e(Ah,Pne),e(Pne,Ofo),e(Ah,Vfo),e(Ah,tI),e(tI,Xfo),e(Ah,zfo),e(Y,Wfo),e(Y,yh),e(yh,Bne),e(Bne,Qfo),e(yh,Hfo),e(yh,aI),e(aI,Ufo),e(yh,Jfo),e(Y,Yfo),e(Y,Lh),e(Lh,Ine),e(Ine,Kfo),e(Lh,Zfo),e(Lh,nI),e(nI,emo),e(Lh,omo),e(Y,rmo),e(Y,xh),e(xh,qne),e(qne,tmo),e(xh,amo),e(xh,sI),e(sI,nmo),e(xh,smo),e(Y,lmo),e(Y,$h),e($h,Nne),e(Nne,imo),e($h,dmo),e($h,lI),e(lI,cmo),e($h,fmo),e(Y,mmo),e(Y,kh),e(kh,jne),e(jne,gmo),e(kh,hmo),e(kh,iI),e(iI,pmo),e(kh,umo),e(Y,_mo),e(Y,Sh),e(Sh,Dne),e(Dne,bmo),e(Sh,vmo),e(Sh,dI),e(dI,Fmo),e(Sh,Tmo),e(Y,Mmo),e(Y,Rh),e(Rh,Gne),e(Gne,Emo),e(Rh,Cmo),e(Rh,cI),e(cI,wmo),e(Rh,Amo),e(Y,ymo),e(Y,Ph),e(Ph,One),e(One,Lmo),e(Ph,xmo),e(Ph,fI),e(fI,$mo),e(Ph,kmo),e(Y,Smo),e(Y,Bh),e(Bh,Vne),e(Vne,Rmo),e(Bh,Pmo),e(Bh,mI),e(mI,Bmo),e(Bh,Imo),e(He,qmo),M(Ih,He,null),e(He,Nmo),M(qh,He,null),e(Ao,jmo),e(Ao,Nh),M(Q6,Nh,null),e(Nh,Dmo),e(Nh,Xne),e(Xne,Gmo),b(f,gNe,_),b(f,Ei,_),e(Ei,jh),e(jh,zne),M(H6,zne,null),e(Ei,Omo),e(Ei,Wne),e(Wne,Vmo),b(f,hNe,_),b(f,yo,_),M(U6,yo,null),e(yo,Xmo),e(yo,J6),e(J6,zmo),e(J6,gI),e(gI,Wmo),e(J6,Qmo),e(yo,Hmo),e(yo,Y6),e(Y6,Umo),e(Y6,Qne),e(Qne,Jmo),e(Y6,Ymo),e(yo,Kmo),e(yo,Ue),M(K6,Ue,null),e(Ue,Zmo),e(Ue,Hne),e(Hne,ego),e(Ue,ogo),e(Ue,Ci),e(Ci,rgo),e(Ci,Une),e(Une,tgo),e(Ci,ago),e(Ci,Jne),e(Jne,ngo),e(Ci,sgo),e(Ue,lgo),e(Ue,he),e(he,Dh),e(Dh,Yne),e(Yne,igo),e(Dh,dgo),e(Dh,hI),e(hI,cgo),e(Dh,fgo),e(he,mgo),e(he,Gh),e(Gh,Kne),e(Kne,ggo),e(Gh,hgo),e(Gh,Zne),e(Zne,pgo),e(Gh,ugo),e(he,_go),e(he,Oh),e(Oh,ese),e(ese,bgo),e(Oh,vgo),e(Oh,pI),e(pI,Fgo),e(Oh,Tgo),e(he,Mgo),e(he,Vh),e(Vh,ose),e(ose,Ego),e(Vh,Cgo),e(Vh,uI),e(uI,wgo),e(Vh,Ago),e(he,ygo),e(he,Xh),e(Xh,rse),e(rse,Lgo),e(Xh,xgo),e(Xh,_I),e(_I,$go),e(Xh,kgo),e(he,Sgo),e(he,zh),e(zh,tse),e(tse,Rgo),e(zh,Pgo),e(zh,bI),e(bI,Bgo),e(zh,Igo),e(he,qgo),e(he,Wh),e(Wh,ase),e(ase,Ngo),e(Wh,jgo),e(Wh,vI),e(vI,Dgo),e(Wh,Ggo),e(he,Ogo),e(he,Qh),e(Qh,nse),e(nse,Vgo),e(Qh,Xgo),e(Qh,FI),e(FI,zgo),e(Qh,Wgo),e(he,Qgo),e(he,Hh),e(Hh,sse),e(sse,Hgo),e(Hh,Ugo),e(Hh,TI),e(TI,Jgo),e(Hh,Ygo),e(he,Kgo),e(he,Uh),e(Uh,lse),e(lse,Zgo),e(Uh,eho),e(Uh,MI),e(MI,oho),e(Uh,rho),e(he,tho),e(he,Jh),e(Jh,ise),e(ise,aho),e(Jh,nho),e(Jh,EI),e(EI,sho),e(Jh,lho),e(he,iho),e(he,Yh),e(Yh,dse),e(dse,dho),e(Yh,cho),e(Yh,CI),e(CI,fho),e(Yh,mho),e(he,gho),e(he,Kh),e(Kh,cse),e(cse,hho),e(Kh,pho),e(Kh,wI),e(wI,uho),e(Kh,_ho),e(he,bho),e(he,Zh),e(Zh,fse),e(fse,vho),e(Zh,Fho),e(Zh,AI),e(AI,Tho),e(Zh,Mho),e(he,Eho),e(he,ep),e(ep,mse),e(mse,Cho),e(ep,who),e(ep,yI),e(yI,Aho),e(ep,yho),e(he,Lho),e(he,op),e(op,gse),e(gse,xho),e(op,$ho),e(op,LI),e(LI,kho),e(op,Sho),e(he,Rho),e(he,rp),e(rp,hse),e(hse,Pho),e(rp,Bho),e(rp,xI),e(xI,Iho),e(rp,qho),e(Ue,Nho),M(tp,Ue,null),e(Ue,jho),M(ap,Ue,null),e(yo,Dho),e(yo,np),M(Z6,np,null),e(np,Gho),e(np,pse),e(pse,Oho),b(f,pNe,_),b(f,wi,_),e(wi,sp),e(sp,use),M(eA,use,null),e(wi,Vho),e(wi,_se),e(_se,Xho),b(f,uNe,_),b(f,Lo,_),M(oA,Lo,null),e(Lo,zho),e(Lo,Ai),e(Ai,Who),e(Ai,$I),e($I,Qho),e(Ai,Hho),e(Ai,kI),e(kI,Uho),e(Ai,Jho),e(Lo,Yho),e(Lo,rA),e(rA,Kho),e(rA,bse),e(bse,Zho),e(rA,epo),e(Lo,opo),e(Lo,tt),M(tA,tt,null),e(tt,rpo),e(tt,vse),e(vse,tpo),e(tt,apo),e(tt,yi),e(yi,npo),e(yi,Fse),e(Fse,spo),e(yi,lpo),e(yi,SI),e(SI,ipo),e(yi,dpo),e(tt,cpo),M(lp,tt,null),e(Lo,fpo),e(Lo,Je),M(aA,Je,null),e(Je,mpo),e(Je,Tse),e(Tse,gpo),e(Je,hpo),e(Je,La),e(La,ppo),e(La,Mse),e(Mse,upo),e(La,_po),e(La,Ese),e(Ese,bpo),e(La,vpo),e(La,Cse),e(Cse,Fpo),e(La,Tpo),e(Je,Mpo),e(Je,x),e(x,ip),e(ip,wse),e(wse,Epo),e(ip,Cpo),e(ip,RI),e(RI,wpo),e(ip,Apo),e(x,ypo),e(x,dp),e(dp,Ase),e(Ase,Lpo),e(dp,xpo),e(dp,PI),e(PI,$po),e(dp,kpo),e(x,Spo),e(x,cp),e(cp,yse),e(yse,Rpo),e(cp,Ppo),e(cp,BI),e(BI,Bpo),e(cp,Ipo),e(x,qpo),e(x,fp),e(fp,Lse),e(Lse,Npo),e(fp,jpo),e(fp,II),e(II,Dpo),e(fp,Gpo),e(x,Opo),e(x,mp),e(mp,xse),e(xse,Vpo),e(mp,Xpo),e(mp,qI),e(qI,zpo),e(mp,Wpo),e(x,Qpo),e(x,gp),e(gp,$se),e($se,Hpo),e(gp,Upo),e(gp,NI),e(NI,Jpo),e(gp,Ypo),e(x,Kpo),e(x,hp),e(hp,kse),e(kse,Zpo),e(hp,euo),e(hp,jI),e(jI,ouo),e(hp,ruo),e(x,tuo),e(x,pp),e(pp,Sse),e(Sse,auo),e(pp,nuo),e(pp,DI),e(DI,suo),e(pp,luo),e(x,iuo),e(x,up),e(up,Rse),e(Rse,duo),e(up,cuo),e(up,GI),e(GI,fuo),e(up,muo),e(x,guo),e(x,_p),e(_p,Pse),e(Pse,huo),e(_p,puo),e(_p,OI),e(OI,uuo),e(_p,_uo),e(x,buo),e(x,bp),e(bp,Bse),e(Bse,vuo),e(bp,Fuo),e(bp,VI),e(VI,Tuo),e(bp,Muo),e(x,Euo),e(x,vp),e(vp,Ise),e(Ise,Cuo),e(vp,wuo),e(vp,XI),e(XI,Auo),e(vp,yuo),e(x,Luo),e(x,Fp),e(Fp,qse),e(qse,xuo),e(Fp,$uo),e(Fp,zI),e(zI,kuo),e(Fp,Suo),e(x,Ruo),e(x,Tp),e(Tp,Nse),e(Nse,Puo),e(Tp,Buo),e(Tp,WI),e(WI,Iuo),e(Tp,quo),e(x,Nuo),e(x,Mp),e(Mp,jse),e(jse,juo),e(Mp,Duo),e(Mp,QI),e(QI,Guo),e(Mp,Ouo),e(x,Vuo),e(x,Ep),e(Ep,Dse),e(Dse,Xuo),e(Ep,zuo),e(Ep,HI),e(HI,Wuo),e(Ep,Quo),e(x,Huo),e(x,Cp),e(Cp,Gse),e(Gse,Uuo),e(Cp,Juo),e(Cp,UI),e(UI,Yuo),e(Cp,Kuo),e(x,Zuo),e(x,wp),e(wp,Ose),e(Ose,e_o),e(wp,o_o),e(wp,JI),e(JI,r_o),e(wp,t_o),e(x,a_o),e(x,Ap),e(Ap,Vse),e(Vse,n_o),e(Ap,s_o),e(Ap,YI),e(YI,l_o),e(Ap,i_o),e(x,d_o),e(x,yp),e(yp,Xse),e(Xse,c_o),e(yp,f_o),e(yp,KI),e(KI,m_o),e(yp,g_o),e(x,h_o),e(x,Lp),e(Lp,zse),e(zse,p_o),e(Lp,u_o),e(Lp,ZI),e(ZI,__o),e(Lp,b_o),e(x,v_o),e(x,xp),e(xp,Wse),e(Wse,F_o),e(xp,T_o),e(xp,eq),e(eq,M_o),e(xp,E_o),e(x,C_o),e(x,$p),e($p,Qse),e(Qse,w_o),e($p,A_o),e($p,oq),e(oq,y_o),e($p,L_o),e(x,x_o),e(x,kp),e(kp,Hse),e(Hse,$_o),e(kp,k_o),e(kp,rq),e(rq,S_o),e(kp,R_o),e(x,P_o),e(x,Sp),e(Sp,Use),e(Use,B_o),e(Sp,I_o),e(Sp,tq),e(tq,q_o),e(Sp,N_o),e(x,j_o),e(x,Rp),e(Rp,Jse),e(Jse,D_o),e(Rp,G_o),e(Rp,aq),e(aq,O_o),e(Rp,V_o),e(x,X_o),e(x,Pp),e(Pp,Yse),e(Yse,z_o),e(Pp,W_o),e(Pp,nq),e(nq,Q_o),e(Pp,H_o),e(x,U_o),e(x,Bp),e(Bp,Kse),e(Kse,J_o),e(Bp,Y_o),e(Bp,sq),e(sq,K_o),e(Bp,Z_o),e(x,e1o),e(x,Ip),e(Ip,Zse),e(Zse,o1o),e(Ip,r1o),e(Ip,lq),e(lq,t1o),e(Ip,a1o),e(x,n1o),e(x,qp),e(qp,ele),e(ele,s1o),e(qp,l1o),e(qp,iq),e(iq,i1o),e(qp,d1o),e(x,c1o),e(x,Np),e(Np,ole),e(ole,f1o),e(Np,m1o),e(Np,dq),e(dq,g1o),e(Np,h1o),e(x,p1o),e(x,jp),e(jp,rle),e(rle,u1o),e(jp,_1o),e(jp,cq),e(cq,b1o),e(jp,v1o),e(x,F1o),e(x,Ps),e(Ps,tle),e(tle,T1o),e(Ps,M1o),e(Ps,fq),e(fq,E1o),e(Ps,C1o),e(Ps,mq),e(mq,w1o),e(Ps,A1o),e(x,y1o),e(x,Dp),e(Dp,ale),e(ale,L1o),e(Dp,x1o),e(Dp,gq),e(gq,$1o),e(Dp,k1o),e(x,S1o),e(x,Gp),e(Gp,nle),e(nle,R1o),e(Gp,P1o),e(Gp,hq),e(hq,B1o),e(Gp,I1o),e(x,q1o),e(x,Op),e(Op,sle),e(sle,N1o),e(Op,j1o),e(Op,pq),e(pq,D1o),e(Op,G1o),e(x,O1o),e(x,Vp),e(Vp,lle),e(lle,V1o),e(Vp,X1o),e(Vp,uq),e(uq,z1o),e(Vp,W1o),e(x,Q1o),e(x,Xp),e(Xp,ile),e(ile,H1o),e(Xp,U1o),e(Xp,_q),e(_q,J1o),e(Xp,Y1o),e(x,K1o),e(x,zp),e(zp,dle),e(dle,Z1o),e(zp,e9o),e(zp,bq),e(bq,o9o),e(zp,r9o),e(x,t9o),e(x,Wp),e(Wp,cle),e(cle,a9o),e(Wp,n9o),e(Wp,vq),e(vq,s9o),e(Wp,l9o),e(x,i9o),e(x,Qp),e(Qp,fle),e(fle,d9o),e(Qp,c9o),e(Qp,Fq),e(Fq,f9o),e(Qp,m9o),e(x,g9o),e(x,Hp),e(Hp,mle),e(mle,h9o),e(Hp,p9o),e(Hp,Tq),e(Tq,u9o),e(Hp,_9o),e(x,b9o),e(x,Up),e(Up,gle),e(gle,v9o),e(Up,F9o),e(Up,Mq),e(Mq,T9o),e(Up,M9o),e(x,E9o),e(x,Jp),e(Jp,hle),e(hle,C9o),e(Jp,w9o),e(Jp,Eq),e(Eq,A9o),e(Jp,y9o),e(x,L9o),e(x,Yp),e(Yp,ple),e(ple,x9o),e(Yp,$9o),e(Yp,Cq),e(Cq,k9o),e(Yp,S9o),e(x,R9o),e(x,Kp),e(Kp,ule),e(ule,P9o),e(Kp,B9o),e(Kp,wq),e(wq,I9o),e(Kp,q9o),e(x,N9o),e(x,Zp),e(Zp,_le),e(_le,j9o),e(Zp,D9o),e(Zp,Aq),e(Aq,G9o),e(Zp,O9o),e(x,V9o),e(x,eu),e(eu,ble),e(ble,X9o),e(eu,z9o),e(eu,yq),e(yq,W9o),e(eu,Q9o),e(x,H9o),e(x,ou),e(ou,vle),e(vle,U9o),e(ou,J9o),e(ou,Lq),e(Lq,Y9o),e(ou,K9o),e(x,Z9o),e(x,ru),e(ru,Fle),e(Fle,ebo),e(ru,obo),e(ru,xq),e(xq,rbo),e(ru,tbo),e(x,abo),e(x,tu),e(tu,Tle),e(Tle,nbo),e(tu,sbo),e(tu,$q),e($q,lbo),e(tu,ibo),e(x,dbo),e(x,au),e(au,Mle),e(Mle,cbo),e(au,fbo),e(au,kq),e(kq,mbo),e(au,gbo),e(x,hbo),e(x,nu),e(nu,Ele),e(Ele,pbo),e(nu,ubo),e(nu,Sq),e(Sq,_bo),e(nu,bbo),e(x,vbo),e(x,su),e(su,Cle),e(Cle,Fbo),e(su,Tbo),e(su,Rq),e(Rq,Mbo),e(su,Ebo),e(x,Cbo),e(x,lu),e(lu,wle),e(wle,wbo),e(lu,Abo),e(lu,Pq),e(Pq,ybo),e(lu,Lbo),e(x,xbo),e(x,iu),e(iu,Ale),e(Ale,$bo),e(iu,kbo),e(iu,Bq),e(Bq,Sbo),e(iu,Rbo),e(x,Pbo),e(x,du),e(du,yle),e(yle,Bbo),e(du,Ibo),e(du,Iq),e(Iq,qbo),e(du,Nbo),e(x,jbo),e(x,cu),e(cu,Lle),e(Lle,Dbo),e(cu,Gbo),e(cu,qq),e(qq,Obo),e(cu,Vbo),e(x,Xbo),e(x,fu),e(fu,xle),e(xle,zbo),e(fu,Wbo),e(fu,Nq),e(Nq,Qbo),e(fu,Hbo),e(x,Ubo),e(x,mu),e(mu,$le),e($le,Jbo),e(mu,Ybo),e(mu,jq),e(jq,Kbo),e(mu,Zbo),e(x,e2o),e(x,gu),e(gu,kle),e(kle,o2o),e(gu,r2o),e(gu,Dq),e(Dq,t2o),e(gu,a2o),e(x,n2o),e(x,hu),e(hu,Sle),e(Sle,s2o),e(hu,l2o),e(hu,Gq),e(Gq,i2o),e(hu,d2o),e(x,c2o),e(x,pu),e(pu,Rle),e(Rle,f2o),e(pu,m2o),e(pu,Oq),e(Oq,g2o),e(pu,h2o),e(x,p2o),e(x,uu),e(uu,Ple),e(Ple,u2o),e(uu,_2o),e(uu,Vq),e(Vq,b2o),e(uu,v2o),e(x,F2o),e(x,_u),e(_u,Ble),e(Ble,T2o),e(_u,M2o),e(_u,Xq),e(Xq,E2o),e(_u,C2o),e(x,w2o),e(x,bu),e(bu,Ile),e(Ile,A2o),e(bu,y2o),e(bu,zq),e(zq,L2o),e(bu,x2o),e(x,$2o),e(x,vu),e(vu,qle),e(qle,k2o),e(vu,S2o),e(vu,Wq),e(Wq,R2o),e(vu,P2o),e(x,B2o),e(x,Fu),e(Fu,Nle),e(Nle,I2o),e(Fu,q2o),e(Fu,Qq),e(Qq,N2o),e(Fu,j2o),e(x,D2o),e(x,Tu),e(Tu,jle),e(jle,G2o),e(Tu,O2o),e(Tu,Hq),e(Hq,V2o),e(Tu,X2o),e(x,z2o),e(x,Mu),e(Mu,Dle),e(Dle,W2o),e(Mu,Q2o),e(Mu,Uq),e(Uq,H2o),e(Mu,U2o),e(x,J2o),e(x,Eu),e(Eu,Gle),e(Gle,Y2o),e(Eu,K2o),e(Eu,Jq),e(Jq,Z2o),e(Eu,e4o),e(x,o4o),e(x,Cu),e(Cu,Ole),e(Ole,r4o),e(Cu,t4o),e(Cu,Yq),e(Yq,a4o),e(Cu,n4o),e(x,s4o),e(x,wu),e(wu,Vle),e(Vle,l4o),e(wu,i4o),e(wu,Kq),e(Kq,d4o),e(wu,c4o),e(x,f4o),e(x,Au),e(Au,Xle),e(Xle,m4o),e(Au,g4o),e(Au,Zq),e(Zq,h4o),e(Au,p4o),e(x,u4o),e(x,yu),e(yu,zle),e(zle,_4o),e(yu,b4o),e(yu,eN),e(eN,v4o),e(yu,F4o),e(x,T4o),e(x,Lu),e(Lu,Wle),e(Wle,M4o),e(Lu,E4o),e(Lu,oN),e(oN,C4o),e(Lu,w4o),e(x,A4o),e(x,xu),e(xu,Qle),e(Qle,y4o),e(xu,L4o),e(xu,rN),e(rN,x4o),e(xu,$4o),e(x,k4o),e(x,$u),e($u,Hle),e(Hle,S4o),e($u,R4o),e($u,tN),e(tN,P4o),e($u,B4o),e(x,I4o),e(x,ku),e(ku,Ule),e(Ule,q4o),e(ku,N4o),e(ku,aN),e(aN,j4o),e(ku,D4o),e(x,G4o),e(x,Su),e(Su,Jle),e(Jle,O4o),e(Su,V4o),e(Su,nN),e(nN,X4o),e(Su,z4o),e(x,W4o),e(x,Ru),e(Ru,Yle),e(Yle,Q4o),e(Ru,H4o),e(Ru,sN),e(sN,U4o),e(Ru,J4o),e(x,Y4o),e(x,Pu),e(Pu,Kle),e(Kle,K4o),e(Pu,Z4o),e(Pu,lN),e(lN,evo),e(Pu,ovo),e(x,rvo),e(x,Bu),e(Bu,Zle),e(Zle,tvo),e(Bu,avo),e(Bu,iN),e(iN,nvo),e(Bu,svo),e(x,lvo),e(x,Iu),e(Iu,eie),e(eie,ivo),e(Iu,dvo),e(Iu,dN),e(dN,cvo),e(Iu,fvo),e(x,mvo),e(x,qu),e(qu,oie),e(oie,gvo),e(qu,hvo),e(qu,cN),e(cN,pvo),e(qu,uvo),e(x,_vo),e(x,Nu),e(Nu,rie),e(rie,bvo),e(Nu,vvo),e(Nu,fN),e(fN,Fvo),e(Nu,Tvo),e(x,Mvo),e(x,ju),e(ju,tie),e(tie,Evo),e(ju,Cvo),e(ju,mN),e(mN,wvo),e(ju,Avo),e(x,yvo),e(x,Du),e(Du,aie),e(aie,Lvo),e(Du,xvo),e(Du,gN),e(gN,$vo),e(Du,kvo),e(x,Svo),e(x,Gu),e(Gu,nie),e(nie,Rvo),e(Gu,Pvo),e(Gu,hN),e(hN,Bvo),e(Gu,Ivo),e(x,qvo),e(x,Ou),e(Ou,sie),e(sie,Nvo),e(Ou,jvo),e(Ou,pN),e(pN,Dvo),e(Ou,Gvo),e(x,Ovo),e(x,Vu),e(Vu,lie),e(lie,Vvo),e(Vu,Xvo),e(Vu,uN),e(uN,zvo),e(Vu,Wvo),e(x,Qvo),e(x,Xu),e(Xu,iie),e(iie,Hvo),e(Xu,Uvo),e(Xu,_N),e(_N,Jvo),e(Xu,Yvo),e(x,Kvo),e(x,zu),e(zu,die),e(die,Zvo),e(zu,eFo),e(zu,bN),e(bN,oFo),e(zu,rFo),e(x,tFo),e(x,Wu),e(Wu,cie),e(cie,aFo),e(Wu,nFo),e(Wu,vN),e(vN,sFo),e(Wu,lFo),e(x,iFo),e(x,Qu),e(Qu,fie),e(fie,dFo),e(Qu,cFo),e(Qu,FN),e(FN,fFo),e(Qu,mFo),e(x,gFo),e(x,Hu),e(Hu,mie),e(mie,hFo),e(Hu,pFo),e(Hu,TN),e(TN,uFo),e(Hu,_Fo),e(x,bFo),e(x,Uu),e(Uu,gie),e(gie,vFo),e(Uu,FFo),e(Uu,MN),e(MN,TFo),e(Uu,MFo),e(x,EFo),e(x,Ju),e(Ju,hie),e(hie,CFo),e(Ju,wFo),e(Ju,EN),e(EN,AFo),e(Ju,yFo),e(x,LFo),e(x,Yu),e(Yu,pie),e(pie,xFo),e(Yu,$Fo),e(Yu,CN),e(CN,kFo),e(Yu,SFo),e(x,RFo),e(x,Ku),e(Ku,uie),e(uie,PFo),e(Ku,BFo),e(Ku,wN),e(wN,IFo),e(Ku,qFo),e(x,NFo),e(x,Zu),e(Zu,_ie),e(_ie,jFo),e(Zu,DFo),e(Zu,AN),e(AN,GFo),e(Zu,OFo),e(x,VFo),e(x,e_),e(e_,bie),e(bie,XFo),e(e_,zFo),e(e_,yN),e(yN,WFo),e(e_,QFo),e(Je,HFo),e(Je,o_),e(o_,UFo),e(o_,vie),e(vie,JFo),e(o_,YFo),e(o_,Fie),e(Fie,KFo),e(Je,ZFo),M(r_,Je,null),b(f,_Ne,_),b(f,Li,_),e(Li,t_),e(t_,Tie),M(nA,Tie,null),e(Li,eTo),e(Li,Mie),e(Mie,oTo),b(f,bNe,_),b(f,xo,_),M(sA,xo,null),e(xo,rTo),e(xo,xi),e(xi,tTo),e(xi,LN),e(LN,aTo),e(xi,nTo),e(xi,xN),e(xN,sTo),e(xi,lTo),e(xo,iTo),e(xo,lA),e(lA,dTo),e(lA,Eie),e(Eie,cTo),e(lA,fTo),e(xo,mTo),e(xo,at),M(iA,at,null),e(at,gTo),e(at,Cie),e(Cie,hTo),e(at,pTo),e(at,$i),e($i,uTo),e($i,wie),e(wie,_To),e($i,bTo),e($i,$N),e($N,vTo),e($i,FTo),e(at,TTo),M(a_,at,null),e(xo,MTo),e(xo,Ye),M(dA,Ye,null),e(Ye,ETo),e(Ye,Aie),e(Aie,CTo),e(Ye,wTo),e(Ye,xa),e(xa,ATo),e(xa,yie),e(yie,yTo),e(xa,LTo),e(xa,Lie),e(Lie,xTo),e(xa,$To),e(xa,xie),e(xie,kTo),e(xa,STo),e(Ye,RTo),e(Ye,G),e(G,n_),e(n_,$ie),e($ie,PTo),e(n_,BTo),e(n_,kN),e(kN,ITo),e(n_,qTo),e(G,NTo),e(G,s_),e(s_,kie),e(kie,jTo),e(s_,DTo),e(s_,SN),e(SN,GTo),e(s_,OTo),e(G,VTo),e(G,l_),e(l_,Sie),e(Sie,XTo),e(l_,zTo),e(l_,RN),e(RN,WTo),e(l_,QTo),e(G,HTo),e(G,i_),e(i_,Rie),e(Rie,UTo),e(i_,JTo),e(i_,PN),e(PN,YTo),e(i_,KTo),e(G,ZTo),e(G,d_),e(d_,Pie),e(Pie,e7o),e(d_,o7o),e(d_,BN),e(BN,r7o),e(d_,t7o),e(G,a7o),e(G,c_),e(c_,Bie),e(Bie,n7o),e(c_,s7o),e(c_,IN),e(IN,l7o),e(c_,i7o),e(G,d7o),e(G,f_),e(f_,Iie),e(Iie,c7o),e(f_,f7o),e(f_,qN),e(qN,m7o),e(f_,g7o),e(G,h7o),e(G,m_),e(m_,qie),e(qie,p7o),e(m_,u7o),e(m_,NN),e(NN,_7o),e(m_,b7o),e(G,v7o),e(G,g_),e(g_,Nie),e(Nie,F7o),e(g_,T7o),e(g_,jN),e(jN,M7o),e(g_,E7o),e(G,C7o),e(G,h_),e(h_,jie),e(jie,w7o),e(h_,A7o),e(h_,DN),e(DN,y7o),e(h_,L7o),e(G,x7o),e(G,p_),e(p_,Die),e(Die,$7o),e(p_,k7o),e(p_,GN),e(GN,S7o),e(p_,R7o),e(G,P7o),e(G,u_),e(u_,Gie),e(Gie,B7o),e(u_,I7o),e(u_,ON),e(ON,q7o),e(u_,N7o),e(G,j7o),e(G,__),e(__,Oie),e(Oie,D7o),e(__,G7o),e(__,VN),e(VN,O7o),e(__,V7o),e(G,X7o),e(G,b_),e(b_,Vie),e(Vie,z7o),e(b_,W7o),e(b_,XN),e(XN,Q7o),e(b_,H7o),e(G,U7o),e(G,v_),e(v_,Xie),e(Xie,J7o),e(v_,Y7o),e(v_,zN),e(zN,K7o),e(v_,Z7o),e(G,eMo),e(G,F_),e(F_,zie),e(zie,oMo),e(F_,rMo),e(F_,WN),e(WN,tMo),e(F_,aMo),e(G,nMo),e(G,T_),e(T_,Wie),e(Wie,sMo),e(T_,lMo),e(T_,QN),e(QN,iMo),e(T_,dMo),e(G,cMo),e(G,M_),e(M_,Qie),e(Qie,fMo),e(M_,mMo),e(M_,HN),e(HN,gMo),e(M_,hMo),e(G,pMo),e(G,E_),e(E_,Hie),e(Hie,uMo),e(E_,_Mo),e(E_,UN),e(UN,bMo),e(E_,vMo),e(G,FMo),e(G,C_),e(C_,Uie),e(Uie,TMo),e(C_,MMo),e(C_,JN),e(JN,EMo),e(C_,CMo),e(G,wMo),e(G,w_),e(w_,Jie),e(Jie,AMo),e(w_,yMo),e(w_,YN),e(YN,LMo),e(w_,xMo),e(G,$Mo),e(G,A_),e(A_,Yie),e(Yie,kMo),e(A_,SMo),e(A_,KN),e(KN,RMo),e(A_,PMo),e(G,BMo),e(G,y_),e(y_,Kie),e(Kie,IMo),e(y_,qMo),e(y_,ZN),e(ZN,NMo),e(y_,jMo),e(G,DMo),e(G,L_),e(L_,Zie),e(Zie,GMo),e(L_,OMo),e(L_,ej),e(ej,VMo),e(L_,XMo),e(G,zMo),e(G,x_),e(x_,ede),e(ede,WMo),e(x_,QMo),e(x_,oj),e(oj,HMo),e(x_,UMo),e(G,JMo),e(G,$_),e($_,ode),e(ode,YMo),e($_,KMo),e($_,rj),e(rj,ZMo),e($_,eEo),e(G,oEo),e(G,k_),e(k_,rde),e(rde,rEo),e(k_,tEo),e(k_,tj),e(tj,aEo),e(k_,nEo),e(G,sEo),e(G,S_),e(S_,tde),e(tde,lEo),e(S_,iEo),e(S_,aj),e(aj,dEo),e(S_,cEo),e(G,fEo),e(G,R_),e(R_,ade),e(ade,mEo),e(R_,gEo),e(R_,nj),e(nj,hEo),e(R_,pEo),e(G,uEo),e(G,P_),e(P_,nde),e(nde,_Eo),e(P_,bEo),e(P_,sj),e(sj,vEo),e(P_,FEo),e(G,TEo),e(G,B_),e(B_,sde),e(sde,MEo),e(B_,EEo),e(B_,lj),e(lj,CEo),e(B_,wEo),e(G,AEo),e(G,I_),e(I_,lde),e(lde,yEo),e(I_,LEo),e(I_,ij),e(ij,xEo),e(I_,$Eo),e(G,kEo),e(G,q_),e(q_,ide),e(ide,SEo),e(q_,REo),e(q_,dj),e(dj,PEo),e(q_,BEo),e(G,IEo),e(G,N_),e(N_,dde),e(dde,qEo),e(N_,NEo),e(N_,cj),e(cj,jEo),e(N_,DEo),e(G,GEo),e(G,j_),e(j_,cde),e(cde,OEo),e(j_,VEo),e(j_,fj),e(fj,XEo),e(j_,zEo),e(G,WEo),e(G,D_),e(D_,fde),e(fde,QEo),e(D_,HEo),e(D_,mj),e(mj,UEo),e(D_,JEo),e(G,YEo),e(G,G_),e(G_,mde),e(mde,KEo),e(G_,ZEo),e(G_,gj),e(gj,eCo),e(G_,oCo),e(G,rCo),e(G,O_),e(O_,gde),e(gde,tCo),e(O_,aCo),e(O_,hj),e(hj,nCo),e(O_,sCo),e(G,lCo),e(G,V_),e(V_,hde),e(hde,iCo),e(V_,dCo),e(V_,pj),e(pj,cCo),e(V_,fCo),e(G,mCo),e(G,X_),e(X_,pde),e(pde,gCo),e(X_,hCo),e(X_,uj),e(uj,pCo),e(X_,uCo),e(G,_Co),e(G,z_),e(z_,ude),e(ude,bCo),e(z_,vCo),e(z_,_j),e(_j,FCo),e(z_,TCo),e(G,MCo),e(G,W_),e(W_,_de),e(_de,ECo),e(W_,CCo),e(W_,bj),e(bj,wCo),e(W_,ACo),e(Ye,yCo),e(Ye,Q_),e(Q_,LCo),e(Q_,bde),e(bde,xCo),e(Q_,$Co),e(Q_,vde),e(vde,kCo),e(Ye,SCo),M(H_,Ye,null),b(f,vNe,_),b(f,ki,_),e(ki,U_),e(U_,Fde),M(cA,Fde,null),e(ki,RCo),e(ki,Tde),e(Tde,PCo),b(f,FNe,_),b(f,$o,_),M(fA,$o,null),e($o,BCo),e($o,Si),e(Si,ICo),e(Si,vj),e(vj,qCo),e(Si,NCo),e(Si,Fj),e(Fj,jCo),e(Si,DCo),e($o,GCo),e($o,mA),e(mA,OCo),e(mA,Mde),e(Mde,VCo),e(mA,XCo),e($o,zCo),e($o,nt),M(gA,nt,null),e(nt,WCo),e(nt,Ede),e(Ede,QCo),e(nt,HCo),e(nt,Ri),e(Ri,UCo),e(Ri,Cde),e(Cde,JCo),e(Ri,YCo),e(Ri,Tj),e(Tj,KCo),e(Ri,ZCo),e(nt,e5o),M(J_,nt,null),e($o,o5o),e($o,Ke),M(hA,Ke,null),e(Ke,r5o),e(Ke,wde),e(wde,t5o),e(Ke,a5o),e(Ke,$a),e($a,n5o),e($a,Ade),e(Ade,s5o),e($a,l5o),e($a,yde),e(yde,i5o),e($a,d5o),e($a,Lde),e(Lde,c5o),e($a,f5o),e(Ke,m5o),e(Ke,z),e(z,Y_),e(Y_,xde),e(xde,g5o),e(Y_,h5o),e(Y_,Mj),e(Mj,p5o),e(Y_,u5o),e(z,_5o),e(z,K_),e(K_,$de),e($de,b5o),e(K_,v5o),e(K_,Ej),e(Ej,F5o),e(K_,T5o),e(z,M5o),e(z,Z_),e(Z_,kde),e(kde,E5o),e(Z_,C5o),e(Z_,Cj),e(Cj,w5o),e(Z_,A5o),e(z,y5o),e(z,e1),e(e1,Sde),e(Sde,L5o),e(e1,x5o),e(e1,wj),e(wj,$5o),e(e1,k5o),e(z,S5o),e(z,o1),e(o1,Rde),e(Rde,R5o),e(o1,P5o),e(o1,Aj),e(Aj,B5o),e(o1,I5o),e(z,q5o),e(z,r1),e(r1,Pde),e(Pde,N5o),e(r1,j5o),e(r1,yj),e(yj,D5o),e(r1,G5o),e(z,O5o),e(z,t1),e(t1,Bde),e(Bde,V5o),e(t1,X5o),e(t1,Lj),e(Lj,z5o),e(t1,W5o),e(z,Q5o),e(z,a1),e(a1,Ide),e(Ide,H5o),e(a1,U5o),e(a1,xj),e(xj,J5o),e(a1,Y5o),e(z,K5o),e(z,n1),e(n1,qde),e(qde,Z5o),e(n1,e3o),e(n1,$j),e($j,o3o),e(n1,r3o),e(z,t3o),e(z,s1),e(s1,Nde),e(Nde,a3o),e(s1,n3o),e(s1,kj),e(kj,s3o),e(s1,l3o),e(z,i3o),e(z,l1),e(l1,jde),e(jde,d3o),e(l1,c3o),e(l1,Sj),e(Sj,f3o),e(l1,m3o),e(z,g3o),e(z,i1),e(i1,Dde),e(Dde,h3o),e(i1,p3o),e(i1,Rj),e(Rj,u3o),e(i1,_3o),e(z,b3o),e(z,d1),e(d1,Gde),e(Gde,v3o),e(d1,F3o),e(d1,Pj),e(Pj,T3o),e(d1,M3o),e(z,E3o),e(z,c1),e(c1,Ode),e(Ode,C3o),e(c1,w3o),e(c1,Bj),e(Bj,A3o),e(c1,y3o),e(z,L3o),e(z,f1),e(f1,Vde),e(Vde,x3o),e(f1,$3o),e(f1,Ij),e(Ij,k3o),e(f1,S3o),e(z,R3o),e(z,m1),e(m1,Xde),e(Xde,P3o),e(m1,B3o),e(m1,qj),e(qj,I3o),e(m1,q3o),e(z,N3o),e(z,g1),e(g1,zde),e(zde,j3o),e(g1,D3o),e(g1,Nj),e(Nj,G3o),e(g1,O3o),e(z,V3o),e(z,h1),e(h1,Wde),e(Wde,X3o),e(h1,z3o),e(h1,jj),e(jj,W3o),e(h1,Q3o),e(z,H3o),e(z,p1),e(p1,Qde),e(Qde,U3o),e(p1,J3o),e(p1,Dj),e(Dj,Y3o),e(p1,K3o),e(z,Z3o),e(z,u1),e(u1,Hde),e(Hde,ewo),e(u1,owo),e(u1,Gj),e(Gj,rwo),e(u1,two),e(z,awo),e(z,_1),e(_1,Ude),e(Ude,nwo),e(_1,swo),e(_1,Oj),e(Oj,lwo),e(_1,iwo),e(z,dwo),e(z,b1),e(b1,Jde),e(Jde,cwo),e(b1,fwo),e(b1,Vj),e(Vj,mwo),e(b1,gwo),e(z,hwo),e(z,v1),e(v1,Yde),e(Yde,pwo),e(v1,uwo),e(v1,Xj),e(Xj,_wo),e(v1,bwo),e(z,vwo),e(z,F1),e(F1,Kde),e(Kde,Fwo),e(F1,Two),e(F1,zj),e(zj,Mwo),e(F1,Ewo),e(z,Cwo),e(z,T1),e(T1,Zde),e(Zde,wwo),e(T1,Awo),e(T1,Wj),e(Wj,ywo),e(T1,Lwo),e(z,xwo),e(z,M1),e(M1,ece),e(ece,$wo),e(M1,kwo),e(M1,Qj),e(Qj,Swo),e(M1,Rwo),e(z,Pwo),e(z,E1),e(E1,oce),e(oce,Bwo),e(E1,Iwo),e(E1,Hj),e(Hj,qwo),e(E1,Nwo),e(z,jwo),e(z,C1),e(C1,rce),e(rce,Dwo),e(C1,Gwo),e(C1,Uj),e(Uj,Owo),e(C1,Vwo),e(z,Xwo),e(z,w1),e(w1,tce),e(tce,zwo),e(w1,Wwo),e(w1,Jj),e(Jj,Qwo),e(w1,Hwo),e(z,Uwo),e(z,A1),e(A1,ace),e(ace,Jwo),e(A1,Ywo),e(A1,Yj),e(Yj,Kwo),e(A1,Zwo),e(z,e0o),e(z,y1),e(y1,nce),e(nce,o0o),e(y1,r0o),e(y1,Kj),e(Kj,t0o),e(y1,a0o),e(z,n0o),e(z,L1),e(L1,sce),e(sce,s0o),e(L1,l0o),e(L1,Zj),e(Zj,i0o),e(L1,d0o),e(z,c0o),e(z,x1),e(x1,lce),e(lce,f0o),e(x1,m0o),e(x1,eD),e(eD,g0o),e(x1,h0o),e(z,p0o),e(z,$1),e($1,ice),e(ice,u0o),e($1,_0o),e($1,oD),e(oD,b0o),e($1,v0o),e(z,F0o),e(z,k1),e(k1,dce),e(dce,T0o),e(k1,M0o),e(k1,rD),e(rD,E0o),e(k1,C0o),e(z,w0o),e(z,S1),e(S1,cce),e(cce,A0o),e(S1,y0o),e(S1,tD),e(tD,L0o),e(S1,x0o),e(z,$0o),e(z,R1),e(R1,fce),e(fce,k0o),e(R1,S0o),e(R1,aD),e(aD,R0o),e(R1,P0o),e(Ke,B0o),e(Ke,P1),e(P1,I0o),e(P1,mce),e(mce,q0o),e(P1,N0o),e(P1,gce),e(gce,j0o),e(Ke,D0o),M(B1,Ke,null),b(f,TNe,_),b(f,Pi,_),e(Pi,I1),e(I1,hce),M(pA,hce,null),e(Pi,G0o),e(Pi,pce),e(pce,O0o),b(f,MNe,_),b(f,ko,_),M(uA,ko,null),e(ko,V0o),e(ko,Bi),e(Bi,X0o),e(Bi,nD),e(nD,z0o),e(Bi,W0o),e(Bi,sD),e(sD,Q0o),e(Bi,H0o),e(ko,U0o),e(ko,_A),e(_A,J0o),e(_A,uce),e(uce,Y0o),e(_A,K0o),e(ko,Z0o),e(ko,st),M(bA,st,null),e(st,e6o),e(st,_ce),e(_ce,o6o),e(st,r6o),e(st,Ii),e(Ii,t6o),e(Ii,bce),e(bce,a6o),e(Ii,n6o),e(Ii,lD),e(lD,s6o),e(Ii,l6o),e(st,i6o),M(q1,st,null),e(ko,d6o),e(ko,Ze),M(vA,Ze,null),e(Ze,c6o),e(Ze,vce),e(vce,f6o),e(Ze,m6o),e(Ze,ka),e(ka,g6o),e(ka,Fce),e(Fce,h6o),e(ka,p6o),e(ka,Tce),e(Tce,u6o),e(ka,_6o),e(ka,Mce),e(Mce,b6o),e(ka,v6o),e(Ze,F6o),e(Ze,W),e(W,N1),e(N1,Ece),e(Ece,T6o),e(N1,M6o),e(N1,iD),e(iD,E6o),e(N1,C6o),e(W,w6o),e(W,j1),e(j1,Cce),e(Cce,A6o),e(j1,y6o),e(j1,dD),e(dD,L6o),e(j1,x6o),e(W,$6o),e(W,D1),e(D1,wce),e(wce,k6o),e(D1,S6o),e(D1,cD),e(cD,R6o),e(D1,P6o),e(W,B6o),e(W,G1),e(G1,Ace),e(Ace,I6o),e(G1,q6o),e(G1,fD),e(fD,N6o),e(G1,j6o),e(W,D6o),e(W,O1),e(O1,yce),e(yce,G6o),e(O1,O6o),e(O1,mD),e(mD,V6o),e(O1,X6o),e(W,z6o),e(W,V1),e(V1,Lce),e(Lce,W6o),e(V1,Q6o),e(V1,gD),e(gD,H6o),e(V1,U6o),e(W,J6o),e(W,X1),e(X1,xce),e(xce,Y6o),e(X1,K6o),e(X1,hD),e(hD,Z6o),e(X1,eAo),e(W,oAo),e(W,z1),e(z1,$ce),e($ce,rAo),e(z1,tAo),e(z1,pD),e(pD,aAo),e(z1,nAo),e(W,sAo),e(W,W1),e(W1,kce),e(kce,lAo),e(W1,iAo),e(W1,uD),e(uD,dAo),e(W1,cAo),e(W,fAo),e(W,Q1),e(Q1,Sce),e(Sce,mAo),e(Q1,gAo),e(Q1,_D),e(_D,hAo),e(Q1,pAo),e(W,uAo),e(W,H1),e(H1,Rce),e(Rce,_Ao),e(H1,bAo),e(H1,bD),e(bD,vAo),e(H1,FAo),e(W,TAo),e(W,U1),e(U1,Pce),e(Pce,MAo),e(U1,EAo),e(U1,vD),e(vD,CAo),e(U1,wAo),e(W,AAo),e(W,J1),e(J1,Bce),e(Bce,yAo),e(J1,LAo),e(J1,FD),e(FD,xAo),e(J1,$Ao),e(W,kAo),e(W,Y1),e(Y1,Ice),e(Ice,SAo),e(Y1,RAo),e(Y1,TD),e(TD,PAo),e(Y1,BAo),e(W,IAo),e(W,K1),e(K1,qce),e(qce,qAo),e(K1,NAo),e(K1,MD),e(MD,jAo),e(K1,DAo),e(W,GAo),e(W,Z1),e(Z1,Nce),e(Nce,OAo),e(Z1,VAo),e(Z1,ED),e(ED,XAo),e(Z1,zAo),e(W,WAo),e(W,e9),e(e9,jce),e(jce,QAo),e(e9,HAo),e(e9,CD),e(CD,UAo),e(e9,JAo),e(W,YAo),e(W,o9),e(o9,Dce),e(Dce,KAo),e(o9,ZAo),e(o9,wD),e(wD,eyo),e(o9,oyo),e(W,ryo),e(W,r9),e(r9,Gce),e(Gce,tyo),e(r9,ayo),e(r9,AD),e(AD,nyo),e(r9,syo),e(W,lyo),e(W,t9),e(t9,Oce),e(Oce,iyo),e(t9,dyo),e(t9,yD),e(yD,cyo),e(t9,fyo),e(W,myo),e(W,a9),e(a9,Vce),e(Vce,gyo),e(a9,hyo),e(a9,LD),e(LD,pyo),e(a9,uyo),e(W,_yo),e(W,n9),e(n9,Xce),e(Xce,byo),e(n9,vyo),e(n9,xD),e(xD,Fyo),e(n9,Tyo),e(W,Myo),e(W,s9),e(s9,zce),e(zce,Eyo),e(s9,Cyo),e(s9,$D),e($D,wyo),e(s9,Ayo),e(W,yyo),e(W,l9),e(l9,Wce),e(Wce,Lyo),e(l9,xyo),e(l9,kD),e(kD,$yo),e(l9,kyo),e(W,Syo),e(W,i9),e(i9,Qce),e(Qce,Ryo),e(i9,Pyo),e(i9,SD),e(SD,Byo),e(i9,Iyo),e(W,qyo),e(W,d9),e(d9,Hce),e(Hce,Nyo),e(d9,jyo),e(d9,RD),e(RD,Dyo),e(d9,Gyo),e(W,Oyo),e(W,c9),e(c9,Uce),e(Uce,Vyo),e(c9,Xyo),e(c9,PD),e(PD,zyo),e(c9,Wyo),e(W,Qyo),e(W,f9),e(f9,Jce),e(Jce,Hyo),e(f9,Uyo),e(f9,BD),e(BD,Jyo),e(f9,Yyo),e(W,Kyo),e(W,m9),e(m9,Yce),e(Yce,Zyo),e(m9,eLo),e(m9,ID),e(ID,oLo),e(m9,rLo),e(W,tLo),e(W,g9),e(g9,Kce),e(Kce,aLo),e(g9,nLo),e(g9,qD),e(qD,sLo),e(g9,lLo),e(W,iLo),e(W,h9),e(h9,Zce),e(Zce,dLo),e(h9,cLo),e(h9,ND),e(ND,fLo),e(h9,mLo),e(W,gLo),e(W,p9),e(p9,efe),e(efe,hLo),e(p9,pLo),e(p9,ofe),e(ofe,uLo),e(p9,_Lo),e(W,bLo),e(W,u9),e(u9,rfe),e(rfe,vLo),e(u9,FLo),e(u9,jD),e(jD,TLo),e(u9,MLo),e(W,ELo),e(W,_9),e(_9,tfe),e(tfe,CLo),e(_9,wLo),e(_9,DD),e(DD,ALo),e(_9,yLo),e(W,LLo),e(W,b9),e(b9,afe),e(afe,xLo),e(b9,$Lo),e(b9,GD),e(GD,kLo),e(b9,SLo),e(W,RLo),e(W,v9),e(v9,nfe),e(nfe,PLo),e(v9,BLo),e(v9,OD),e(OD,ILo),e(v9,qLo),e(Ze,NLo),e(Ze,F9),e(F9,jLo),e(F9,sfe),e(sfe,DLo),e(F9,GLo),e(F9,lfe),e(lfe,OLo),e(Ze,VLo),M(T9,Ze,null),b(f,ENe,_),b(f,qi,_),e(qi,M9),e(M9,ife),M(FA,ife,null),e(qi,XLo),e(qi,dfe),e(dfe,zLo),b(f,CNe,_),b(f,So,_),M(TA,So,null),e(So,WLo),e(So,Ni),e(Ni,QLo),e(Ni,VD),e(VD,HLo),e(Ni,ULo),e(Ni,XD),e(XD,JLo),e(Ni,YLo),e(So,KLo),e(So,MA),e(MA,ZLo),e(MA,cfe),e(cfe,e8o),e(MA,o8o),e(So,r8o),e(So,lt),M(EA,lt,null),e(lt,t8o),e(lt,ffe),e(ffe,a8o),e(lt,n8o),e(lt,ji),e(ji,s8o),e(ji,mfe),e(mfe,l8o),e(ji,i8o),e(ji,zD),e(zD,d8o),e(ji,c8o),e(lt,f8o),M(E9,lt,null),e(So,m8o),e(So,eo),M(CA,eo,null),e(eo,g8o),e(eo,gfe),e(gfe,h8o),e(eo,p8o),e(eo,Sa),e(Sa,u8o),e(Sa,hfe),e(hfe,_8o),e(Sa,b8o),e(Sa,pfe),e(pfe,v8o),e(Sa,F8o),e(Sa,ufe),e(ufe,T8o),e(Sa,M8o),e(eo,E8o),e(eo,ue),e(ue,C9),e(C9,_fe),e(_fe,C8o),e(C9,w8o),e(C9,WD),e(WD,A8o),e(C9,y8o),e(ue,L8o),e(ue,w9),e(w9,bfe),e(bfe,x8o),e(w9,$8o),e(w9,QD),e(QD,k8o),e(w9,S8o),e(ue,R8o),e(ue,A9),e(A9,vfe),e(vfe,P8o),e(A9,B8o),e(A9,HD),e(HD,I8o),e(A9,q8o),e(ue,N8o),e(ue,y9),e(y9,Ffe),e(Ffe,j8o),e(y9,D8o),e(y9,UD),e(UD,G8o),e(y9,O8o),e(ue,V8o),e(ue,L9),e(L9,Tfe),e(Tfe,X8o),e(L9,z8o),e(L9,JD),e(JD,W8o),e(L9,Q8o),e(ue,H8o),e(ue,x9),e(x9,Mfe),e(Mfe,U8o),e(x9,J8o),e(x9,YD),e(YD,Y8o),e(x9,K8o),e(ue,Z8o),e(ue,$9),e($9,Efe),e(Efe,exo),e($9,oxo),e($9,KD),e(KD,rxo),e($9,txo),e(ue,axo),e(ue,k9),e(k9,Cfe),e(Cfe,nxo),e(k9,sxo),e(k9,ZD),e(ZD,lxo),e(k9,ixo),e(ue,dxo),e(ue,S9),e(S9,wfe),e(wfe,cxo),e(S9,fxo),e(S9,eG),e(eG,mxo),e(S9,gxo),e(ue,hxo),e(ue,R9),e(R9,Afe),e(Afe,pxo),e(R9,uxo),e(R9,oG),e(oG,_xo),e(R9,bxo),e(ue,vxo),e(ue,P9),e(P9,yfe),e(yfe,Fxo),e(P9,Txo),e(P9,rG),e(rG,Mxo),e(P9,Exo),e(ue,Cxo),e(ue,B9),e(B9,Lfe),e(Lfe,wxo),e(B9,Axo),e(B9,tG),e(tG,yxo),e(B9,Lxo),e(ue,xxo),e(ue,I9),e(I9,xfe),e(xfe,$xo),e(I9,kxo),e(I9,aG),e(aG,Sxo),e(I9,Rxo),e(ue,Pxo),e(ue,q9),e(q9,$fe),e($fe,Bxo),e(q9,Ixo),e(q9,nG),e(nG,qxo),e(q9,Nxo),e(ue,jxo),e(ue,N9),e(N9,kfe),e(kfe,Dxo),e(N9,Gxo),e(N9,sG),e(sG,Oxo),e(N9,Vxo),e(ue,Xxo),e(ue,j9),e(j9,Sfe),e(Sfe,zxo),e(j9,Wxo),e(j9,lG),e(lG,Qxo),e(j9,Hxo),e(eo,Uxo),e(eo,D9),e(D9,Jxo),e(D9,Rfe),e(Rfe,Yxo),e(D9,Kxo),e(D9,Pfe),e(Pfe,Zxo),e(eo,e$o),M(G9,eo,null),b(f,wNe,_),b(f,Di,_),e(Di,O9),e(O9,Bfe),M(wA,Bfe,null),e(Di,o$o),e(Di,Ife),e(Ife,r$o),b(f,ANe,_),b(f,Ro,_),M(AA,Ro,null),e(Ro,t$o),e(Ro,Gi),e(Gi,a$o),e(Gi,iG),e(iG,n$o),e(Gi,s$o),e(Gi,dG),e(dG,l$o),e(Gi,i$o),e(Ro,d$o),e(Ro,yA),e(yA,c$o),e(yA,qfe),e(qfe,f$o),e(yA,m$o),e(Ro,g$o),e(Ro,it),M(LA,it,null),e(it,h$o),e(it,Nfe),e(Nfe,p$o),e(it,u$o),e(it,Oi),e(Oi,_$o),e(Oi,jfe),e(jfe,b$o),e(Oi,v$o),e(Oi,cG),e(cG,F$o),e(Oi,T$o),e(it,M$o),M(V9,it,null),e(Ro,E$o),e(Ro,oo),M(xA,oo,null),e(oo,C$o),e(oo,Dfe),e(Dfe,w$o),e(oo,A$o),e(oo,Ra),e(Ra,y$o),e(Ra,Gfe),e(Gfe,L$o),e(Ra,x$o),e(Ra,Ofe),e(Ofe,$$o),e(Ra,k$o),e(Ra,Vfe),e(Vfe,S$o),e(Ra,R$o),e(oo,P$o),e(oo,q),e(q,X9),e(X9,Xfe),e(Xfe,B$o),e(X9,I$o),e(X9,fG),e(fG,q$o),e(X9,N$o),e(q,j$o),e(q,z9),e(z9,zfe),e(zfe,D$o),e(z9,G$o),e(z9,mG),e(mG,O$o),e(z9,V$o),e(q,X$o),e(q,W9),e(W9,Wfe),e(Wfe,z$o),e(W9,W$o),e(W9,gG),e(gG,Q$o),e(W9,H$o),e(q,U$o),e(q,Q9),e(Q9,Qfe),e(Qfe,J$o),e(Q9,Y$o),e(Q9,hG),e(hG,K$o),e(Q9,Z$o),e(q,eko),e(q,H9),e(H9,Hfe),e(Hfe,oko),e(H9,rko),e(H9,pG),e(pG,tko),e(H9,ako),e(q,nko),e(q,U9),e(U9,Ufe),e(Ufe,sko),e(U9,lko),e(U9,uG),e(uG,iko),e(U9,dko),e(q,cko),e(q,J9),e(J9,Jfe),e(Jfe,fko),e(J9,mko),e(J9,_G),e(_G,gko),e(J9,hko),e(q,pko),e(q,Y9),e(Y9,Yfe),e(Yfe,uko),e(Y9,_ko),e(Y9,bG),e(bG,bko),e(Y9,vko),e(q,Fko),e(q,K9),e(K9,Kfe),e(Kfe,Tko),e(K9,Mko),e(K9,vG),e(vG,Eko),e(K9,Cko),e(q,wko),e(q,Z9),e(Z9,Zfe),e(Zfe,Ako),e(Z9,yko),e(Z9,FG),e(FG,Lko),e(Z9,xko),e(q,$ko),e(q,eb),e(eb,eme),e(eme,kko),e(eb,Sko),e(eb,TG),e(TG,Rko),e(eb,Pko),e(q,Bko),e(q,ob),e(ob,ome),e(ome,Iko),e(ob,qko),e(ob,MG),e(MG,Nko),e(ob,jko),e(q,Dko),e(q,rb),e(rb,rme),e(rme,Gko),e(rb,Oko),e(rb,EG),e(EG,Vko),e(rb,Xko),e(q,zko),e(q,tb),e(tb,tme),e(tme,Wko),e(tb,Qko),e(tb,CG),e(CG,Hko),e(tb,Uko),e(q,Jko),e(q,ab),e(ab,ame),e(ame,Yko),e(ab,Kko),e(ab,wG),e(wG,Zko),e(ab,eSo),e(q,oSo),e(q,nb),e(nb,nme),e(nme,rSo),e(nb,tSo),e(nb,AG),e(AG,aSo),e(nb,nSo),e(q,sSo),e(q,sb),e(sb,sme),e(sme,lSo),e(sb,iSo),e(sb,yG),e(yG,dSo),e(sb,cSo),e(q,fSo),e(q,lb),e(lb,lme),e(lme,mSo),e(lb,gSo),e(lb,LG),e(LG,hSo),e(lb,pSo),e(q,uSo),e(q,ib),e(ib,ime),e(ime,_So),e(ib,bSo),e(ib,xG),e(xG,vSo),e(ib,FSo),e(q,TSo),e(q,db),e(db,dme),e(dme,MSo),e(db,ESo),e(db,$G),e($G,CSo),e(db,wSo),e(q,ASo),e(q,cb),e(cb,cme),e(cme,ySo),e(cb,LSo),e(cb,kG),e(kG,xSo),e(cb,$So),e(q,kSo),e(q,fb),e(fb,fme),e(fme,SSo),e(fb,RSo),e(fb,SG),e(SG,PSo),e(fb,BSo),e(q,ISo),e(q,mb),e(mb,mme),e(mme,qSo),e(mb,NSo),e(mb,RG),e(RG,jSo),e(mb,DSo),e(q,GSo),e(q,gb),e(gb,gme),e(gme,OSo),e(gb,VSo),e(gb,PG),e(PG,XSo),e(gb,zSo),e(q,WSo),e(q,hb),e(hb,hme),e(hme,QSo),e(hb,HSo),e(hb,BG),e(BG,USo),e(hb,JSo),e(q,YSo),e(q,pb),e(pb,pme),e(pme,KSo),e(pb,ZSo),e(pb,IG),e(IG,eRo),e(pb,oRo),e(q,rRo),e(q,ub),e(ub,ume),e(ume,tRo),e(ub,aRo),e(ub,qG),e(qG,nRo),e(ub,sRo),e(q,lRo),e(q,_b),e(_b,_me),e(_me,iRo),e(_b,dRo),e(_b,NG),e(NG,cRo),e(_b,fRo),e(q,mRo),e(q,bb),e(bb,bme),e(bme,gRo),e(bb,hRo),e(bb,jG),e(jG,pRo),e(bb,uRo),e(q,_Ro),e(q,vb),e(vb,vme),e(vme,bRo),e(vb,vRo),e(vb,DG),e(DG,FRo),e(vb,TRo),e(q,MRo),e(q,Fb),e(Fb,Fme),e(Fme,ERo),e(Fb,CRo),e(Fb,GG),e(GG,wRo),e(Fb,ARo),e(q,yRo),e(q,Tb),e(Tb,Tme),e(Tme,LRo),e(Tb,xRo),e(Tb,OG),e(OG,$Ro),e(Tb,kRo),e(q,SRo),e(q,Mb),e(Mb,Mme),e(Mme,RRo),e(Mb,PRo),e(Mb,VG),e(VG,BRo),e(Mb,IRo),e(q,qRo),e(q,Eb),e(Eb,Eme),e(Eme,NRo),e(Eb,jRo),e(Eb,XG),e(XG,DRo),e(Eb,GRo),e(q,ORo),e(q,Cb),e(Cb,Cme),e(Cme,VRo),e(Cb,XRo),e(Cb,zG),e(zG,zRo),e(Cb,WRo),e(q,QRo),e(q,wb),e(wb,wme),e(wme,HRo),e(wb,URo),e(wb,WG),e(WG,JRo),e(wb,YRo),e(q,KRo),e(q,Ab),e(Ab,Ame),e(Ame,ZRo),e(Ab,ePo),e(Ab,QG),e(QG,oPo),e(Ab,rPo),e(q,tPo),e(q,yb),e(yb,yme),e(yme,aPo),e(yb,nPo),e(yb,HG),e(HG,sPo),e(yb,lPo),e(q,iPo),e(q,Lb),e(Lb,Lme),e(Lme,dPo),e(Lb,cPo),e(Lb,UG),e(UG,fPo),e(Lb,mPo),e(q,gPo),e(q,xb),e(xb,xme),e(xme,hPo),e(xb,pPo),e(xb,JG),e(JG,uPo),e(xb,_Po),e(q,bPo),e(q,$b),e($b,$me),e($me,vPo),e($b,FPo),e($b,YG),e(YG,TPo),e($b,MPo),e(q,EPo),e(q,kb),e(kb,kme),e(kme,CPo),e(kb,wPo),e(kb,KG),e(KG,APo),e(kb,yPo),e(q,LPo),e(q,Sb),e(Sb,Sme),e(Sme,xPo),e(Sb,$Po),e(Sb,ZG),e(ZG,kPo),e(Sb,SPo),e(q,RPo),e(q,Rb),e(Rb,Rme),e(Rme,PPo),e(Rb,BPo),e(Rb,eO),e(eO,IPo),e(Rb,qPo),e(q,NPo),e(q,Pb),e(Pb,Pme),e(Pme,jPo),e(Pb,DPo),e(Pb,oO),e(oO,GPo),e(Pb,OPo),e(q,VPo),e(q,Bb),e(Bb,Bme),e(Bme,XPo),e(Bb,zPo),e(Bb,rO),e(rO,WPo),e(Bb,QPo),e(q,HPo),e(q,Ib),e(Ib,Ime),e(Ime,UPo),e(Ib,JPo),e(Ib,tO),e(tO,YPo),e(Ib,KPo),e(oo,ZPo),e(oo,qb),e(qb,eBo),e(qb,qme),e(qme,oBo),e(qb,rBo),e(qb,Nme),e(Nme,tBo),e(oo,aBo),M(Nb,oo,null),b(f,yNe,_),b(f,Vi,_),e(Vi,jb),e(jb,jme),M($A,jme,null),e(Vi,nBo),e(Vi,Dme),e(Dme,sBo),b(f,LNe,_),b(f,Po,_),M(kA,Po,null),e(Po,lBo),e(Po,Xi),e(Xi,iBo),e(Xi,aO),e(aO,dBo),e(Xi,cBo),e(Xi,nO),e(nO,fBo),e(Xi,mBo),e(Po,gBo),e(Po,SA),e(SA,hBo),e(SA,Gme),e(Gme,pBo),e(SA,uBo),e(Po,_Bo),e(Po,dt),M(RA,dt,null),e(dt,bBo),e(dt,Ome),e(Ome,vBo),e(dt,FBo),e(dt,zi),e(zi,TBo),e(zi,Vme),e(Vme,MBo),e(zi,EBo),e(zi,sO),e(sO,CBo),e(zi,wBo),e(dt,ABo),M(Db,dt,null),e(Po,yBo),e(Po,ro),M(PA,ro,null),e(ro,LBo),e(ro,Xme),e(Xme,xBo),e(ro,$Bo),e(ro,Pa),e(Pa,kBo),e(Pa,zme),e(zme,SBo),e(Pa,RBo),e(Pa,Wme),e(Wme,PBo),e(Pa,BBo),e(Pa,Qme),e(Qme,IBo),e(Pa,qBo),e(ro,NBo),e(ro,K),e(K,Gb),e(Gb,Hme),e(Hme,jBo),e(Gb,DBo),e(Gb,lO),e(lO,GBo),e(Gb,OBo),e(K,VBo),e(K,Ob),e(Ob,Ume),e(Ume,XBo),e(Ob,zBo),e(Ob,iO),e(iO,WBo),e(Ob,QBo),e(K,HBo),e(K,Vb),e(Vb,Jme),e(Jme,UBo),e(Vb,JBo),e(Vb,dO),e(dO,YBo),e(Vb,KBo),e(K,ZBo),e(K,Xb),e(Xb,Yme),e(Yme,eIo),e(Xb,oIo),e(Xb,cO),e(cO,rIo),e(Xb,tIo),e(K,aIo),e(K,zb),e(zb,Kme),e(Kme,nIo),e(zb,sIo),e(zb,fO),e(fO,lIo),e(zb,iIo),e(K,dIo),e(K,Wb),e(Wb,Zme),e(Zme,cIo),e(Wb,fIo),e(Wb,mO),e(mO,mIo),e(Wb,gIo),e(K,hIo),e(K,Qb),e(Qb,ege),e(ege,pIo),e(Qb,uIo),e(Qb,gO),e(gO,_Io),e(Qb,bIo),e(K,vIo),e(K,Hb),e(Hb,oge),e(oge,FIo),e(Hb,TIo),e(Hb,hO),e(hO,MIo),e(Hb,EIo),e(K,CIo),e(K,Ub),e(Ub,rge),e(rge,wIo),e(Ub,AIo),e(Ub,pO),e(pO,yIo),e(Ub,LIo),e(K,xIo),e(K,Jb),e(Jb,tge),e(tge,$Io),e(Jb,kIo),e(Jb,uO),e(uO,SIo),e(Jb,RIo),e(K,PIo),e(K,Yb),e(Yb,age),e(age,BIo),e(Yb,IIo),e(Yb,_O),e(_O,qIo),e(Yb,NIo),e(K,jIo),e(K,Kb),e(Kb,nge),e(nge,DIo),e(Kb,GIo),e(Kb,bO),e(bO,OIo),e(Kb,VIo),e(K,XIo),e(K,Zb),e(Zb,sge),e(sge,zIo),e(Zb,WIo),e(Zb,vO),e(vO,QIo),e(Zb,HIo),e(K,UIo),e(K,e2),e(e2,lge),e(lge,JIo),e(e2,YIo),e(e2,FO),e(FO,KIo),e(e2,ZIo),e(K,eqo),e(K,o2),e(o2,ige),e(ige,oqo),e(o2,rqo),e(o2,TO),e(TO,tqo),e(o2,aqo),e(K,nqo),e(K,r2),e(r2,dge),e(dge,sqo),e(r2,lqo),e(r2,MO),e(MO,iqo),e(r2,dqo),e(K,cqo),e(K,t2),e(t2,cge),e(cge,fqo),e(t2,mqo),e(t2,EO),e(EO,gqo),e(t2,hqo),e(K,pqo),e(K,a2),e(a2,fge),e(fge,uqo),e(a2,_qo),e(a2,CO),e(CO,bqo),e(a2,vqo),e(K,Fqo),e(K,n2),e(n2,mge),e(mge,Tqo),e(n2,Mqo),e(n2,wO),e(wO,Eqo),e(n2,Cqo),e(K,wqo),e(K,s2),e(s2,gge),e(gge,Aqo),e(s2,yqo),e(s2,AO),e(AO,Lqo),e(s2,xqo),e(K,$qo),e(K,l2),e(l2,hge),e(hge,kqo),e(l2,Sqo),e(l2,yO),e(yO,Rqo),e(l2,Pqo),e(K,Bqo),e(K,i2),e(i2,pge),e(pge,Iqo),e(i2,qqo),e(i2,LO),e(LO,Nqo),e(i2,jqo),e(K,Dqo),e(K,d2),e(d2,uge),e(uge,Gqo),e(d2,Oqo),e(d2,xO),e(xO,Vqo),e(d2,Xqo),e(K,zqo),e(K,c2),e(c2,_ge),e(_ge,Wqo),e(c2,Qqo),e(c2,$O),e($O,Hqo),e(c2,Uqo),e(K,Jqo),e(K,f2),e(f2,bge),e(bge,Yqo),e(f2,Kqo),e(f2,kO),e(kO,Zqo),e(f2,eNo),e(K,oNo),e(K,m2),e(m2,vge),e(vge,rNo),e(m2,tNo),e(m2,SO),e(SO,aNo),e(m2,nNo),e(K,sNo),e(K,g2),e(g2,Fge),e(Fge,lNo),e(g2,iNo),e(g2,RO),e(RO,dNo),e(g2,cNo),e(K,fNo),e(K,h2),e(h2,Tge),e(Tge,mNo),e(h2,gNo),e(h2,PO),e(PO,hNo),e(h2,pNo),e(K,uNo),e(K,p2),e(p2,Mge),e(Mge,_No),e(p2,bNo),e(p2,BO),e(BO,vNo),e(p2,FNo),e(ro,TNo),e(ro,u2),e(u2,MNo),e(u2,Ege),e(Ege,ENo),e(u2,CNo),e(u2,Cge),e(Cge,wNo),e(ro,ANo),M(_2,ro,null),b(f,xNe,_),b(f,Wi,_),e(Wi,b2),e(b2,wge),M(BA,wge,null),e(Wi,yNo),e(Wi,Age),e(Age,LNo),b(f,$Ne,_),b(f,Bo,_),M(IA,Bo,null),e(Bo,xNo),e(Bo,Qi),e(Qi,$No),e(Qi,IO),e(IO,kNo),e(Qi,SNo),e(Qi,qO),e(qO,RNo),e(Qi,PNo),e(Bo,BNo),e(Bo,qA),e(qA,INo),e(qA,yge),e(yge,qNo),e(qA,NNo),e(Bo,jNo),e(Bo,ct),M(NA,ct,null),e(ct,DNo),e(ct,Lge),e(Lge,GNo),e(ct,ONo),e(ct,Hi),e(Hi,VNo),e(Hi,xge),e(xge,XNo),e(Hi,zNo),e(Hi,NO),e(NO,WNo),e(Hi,QNo),e(ct,HNo),M(v2,ct,null),e(Bo,UNo),e(Bo,to),M(jA,to,null),e(to,JNo),e(to,$ge),e($ge,YNo),e(to,KNo),e(to,Ba),e(Ba,ZNo),e(Ba,kge),e(kge,ejo),e(Ba,ojo),e(Ba,Sge),e(Sge,rjo),e(Ba,tjo),e(Ba,Rge),e(Rge,ajo),e(Ba,njo),e(to,sjo),e(to,Yr),e(Yr,F2),e(F2,Pge),e(Pge,ljo),e(F2,ijo),e(F2,jO),e(jO,djo),e(F2,cjo),e(Yr,fjo),e(Yr,T2),e(T2,Bge),e(Bge,mjo),e(T2,gjo),e(T2,DO),e(DO,hjo),e(T2,pjo),e(Yr,ujo),e(Yr,M2),e(M2,Ige),e(Ige,_jo),e(M2,bjo),e(M2,GO),e(GO,vjo),e(M2,Fjo),e(Yr,Tjo),e(Yr,E2),e(E2,qge),e(qge,Mjo),e(E2,Ejo),e(E2,OO),e(OO,Cjo),e(E2,wjo),e(Yr,Ajo),e(Yr,C2),e(C2,Nge),e(Nge,yjo),e(C2,Ljo),e(C2,VO),e(VO,xjo),e(C2,$jo),e(to,kjo),e(to,w2),e(w2,Sjo),e(w2,jge),e(jge,Rjo),e(w2,Pjo),e(w2,Dge),e(Dge,Bjo),e(to,Ijo),M(A2,to,null),b(f,kNe,_),b(f,Ui,_),e(Ui,y2),e(y2,Gge),M(DA,Gge,null),e(Ui,qjo),e(Ui,Oge),e(Oge,Njo),b(f,SNe,_),b(f,Io,_),M(GA,Io,null),e(Io,jjo),e(Io,Ji),e(Ji,Djo),e(Ji,XO),e(XO,Gjo),e(Ji,Ojo),e(Ji,zO),e(zO,Vjo),e(Ji,Xjo),e(Io,zjo),e(Io,OA),e(OA,Wjo),e(OA,Vge),e(Vge,Qjo),e(OA,Hjo),e(Io,Ujo),e(Io,ft),M(VA,ft,null),e(ft,Jjo),e(ft,Xge),e(Xge,Yjo),e(ft,Kjo),e(ft,Yi),e(Yi,Zjo),e(Yi,zge),e(zge,eDo),e(Yi,oDo),e(Yi,WO),e(WO,rDo),e(Yi,tDo),e(ft,aDo),M(L2,ft,null),e(Io,nDo),e(Io,ao),M(XA,ao,null),e(ao,sDo),e(ao,Wge),e(Wge,lDo),e(ao,iDo),e(ao,Ia),e(Ia,dDo),e(Ia,Qge),e(Qge,cDo),e(Ia,fDo),e(Ia,Hge),e(Hge,mDo),e(Ia,gDo),e(Ia,Uge),e(Uge,hDo),e(Ia,pDo),e(ao,uDo),e(ao,U),e(U,x2),e(x2,Jge),e(Jge,_Do),e(x2,bDo),e(x2,QO),e(QO,vDo),e(x2,FDo),e(U,TDo),e(U,$2),e($2,Yge),e(Yge,MDo),e($2,EDo),e($2,HO),e(HO,CDo),e($2,wDo),e(U,ADo),e(U,k2),e(k2,Kge),e(Kge,yDo),e(k2,LDo),e(k2,UO),e(UO,xDo),e(k2,$Do),e(U,kDo),e(U,S2),e(S2,Zge),e(Zge,SDo),e(S2,RDo),e(S2,JO),e(JO,PDo),e(S2,BDo),e(U,IDo),e(U,R2),e(R2,ehe),e(ehe,qDo),e(R2,NDo),e(R2,YO),e(YO,jDo),e(R2,DDo),e(U,GDo),e(U,P2),e(P2,ohe),e(ohe,ODo),e(P2,VDo),e(P2,KO),e(KO,XDo),e(P2,zDo),e(U,WDo),e(U,B2),e(B2,rhe),e(rhe,QDo),e(B2,HDo),e(B2,ZO),e(ZO,UDo),e(B2,JDo),e(U,YDo),e(U,I2),e(I2,the),e(the,KDo),e(I2,ZDo),e(I2,eV),e(eV,eGo),e(I2,oGo),e(U,rGo),e(U,q2),e(q2,ahe),e(ahe,tGo),e(q2,aGo),e(q2,oV),e(oV,nGo),e(q2,sGo),e(U,lGo),e(U,N2),e(N2,nhe),e(nhe,iGo),e(N2,dGo),e(N2,rV),e(rV,cGo),e(N2,fGo),e(U,mGo),e(U,j2),e(j2,she),e(she,gGo),e(j2,hGo),e(j2,tV),e(tV,pGo),e(j2,uGo),e(U,_Go),e(U,D2),e(D2,lhe),e(lhe,bGo),e(D2,vGo),e(D2,aV),e(aV,FGo),e(D2,TGo),e(U,MGo),e(U,G2),e(G2,ihe),e(ihe,EGo),e(G2,CGo),e(G2,nV),e(nV,wGo),e(G2,AGo),e(U,yGo),e(U,O2),e(O2,dhe),e(dhe,LGo),e(O2,xGo),e(O2,sV),e(sV,$Go),e(O2,kGo),e(U,SGo),e(U,V2),e(V2,che),e(che,RGo),e(V2,PGo),e(V2,lV),e(lV,BGo),e(V2,IGo),e(U,qGo),e(U,X2),e(X2,fhe),e(fhe,NGo),e(X2,jGo),e(X2,iV),e(iV,DGo),e(X2,GGo),e(U,OGo),e(U,z2),e(z2,mhe),e(mhe,VGo),e(z2,XGo),e(z2,dV),e(dV,zGo),e(z2,WGo),e(U,QGo),e(U,W2),e(W2,ghe),e(ghe,HGo),e(W2,UGo),e(W2,cV),e(cV,JGo),e(W2,YGo),e(U,KGo),e(U,Q2),e(Q2,hhe),e(hhe,ZGo),e(Q2,eOo),e(Q2,fV),e(fV,oOo),e(Q2,rOo),e(U,tOo),e(U,H2),e(H2,phe),e(phe,aOo),e(H2,nOo),e(H2,mV),e(mV,sOo),e(H2,lOo),e(U,iOo),e(U,U2),e(U2,uhe),e(uhe,dOo),e(U2,cOo),e(U2,gV),e(gV,fOo),e(U2,mOo),e(U,gOo),e(U,J2),e(J2,_he),e(_he,hOo),e(J2,pOo),e(J2,hV),e(hV,uOo),e(J2,_Oo),e(U,bOo),e(U,Y2),e(Y2,bhe),e(bhe,vOo),e(Y2,FOo),e(Y2,pV),e(pV,TOo),e(Y2,MOo),e(U,EOo),e(U,K2),e(K2,vhe),e(vhe,COo),e(K2,wOo),e(K2,uV),e(uV,AOo),e(K2,yOo),e(U,LOo),e(U,Z2),e(Z2,Fhe),e(Fhe,xOo),e(Z2,$Oo),e(Z2,_V),e(_V,kOo),e(Z2,SOo),e(U,ROo),e(U,e4),e(e4,The),e(The,POo),e(e4,BOo),e(e4,bV),e(bV,IOo),e(e4,qOo),e(U,NOo),e(U,o4),e(o4,Mhe),e(Mhe,jOo),e(o4,DOo),e(o4,vV),e(vV,GOo),e(o4,OOo),e(U,VOo),e(U,r4),e(r4,Ehe),e(Ehe,XOo),e(r4,zOo),e(r4,FV),e(FV,WOo),e(r4,QOo),e(U,HOo),e(U,t4),e(t4,Che),e(Che,UOo),e(t4,JOo),e(t4,TV),e(TV,YOo),e(t4,KOo),e(U,ZOo),e(U,a4),e(a4,whe),e(whe,eVo),e(a4,oVo),e(a4,MV),e(MV,rVo),e(a4,tVo),e(U,aVo),e(U,n4),e(n4,Ahe),e(Ahe,nVo),e(n4,sVo),e(n4,EV),e(EV,lVo),e(n4,iVo),e(U,dVo),e(U,s4),e(s4,yhe),e(yhe,cVo),e(s4,fVo),e(s4,CV),e(CV,mVo),e(s4,gVo),e(U,hVo),e(U,l4),e(l4,Lhe),e(Lhe,pVo),e(l4,uVo),e(l4,wV),e(wV,_Vo),e(l4,bVo),e(U,vVo),e(U,i4),e(i4,xhe),e(xhe,FVo),e(i4,TVo),e(i4,AV),e(AV,MVo),e(i4,EVo),e(ao,CVo),e(ao,d4),e(d4,wVo),e(d4,$he),e($he,AVo),e(d4,yVo),e(d4,khe),e(khe,LVo),e(ao,xVo),M(c4,ao,null),b(f,RNe,_),b(f,Ki,_),e(Ki,f4),e(f4,She),M(zA,She,null),e(Ki,$Vo),e(Ki,Rhe),e(Rhe,kVo),b(f,PNe,_),b(f,qo,_),M(WA,qo,null),e(qo,SVo),e(qo,Zi),e(Zi,RVo),e(Zi,yV),e(yV,PVo),e(Zi,BVo),e(Zi,LV),e(LV,IVo),e(Zi,qVo),e(qo,NVo),e(qo,QA),e(QA,jVo),e(QA,Phe),e(Phe,DVo),e(QA,GVo),e(qo,OVo),e(qo,mt),M(HA,mt,null),e(mt,VVo),e(mt,Bhe),e(Bhe,XVo),e(mt,zVo),e(mt,ed),e(ed,WVo),e(ed,Ihe),e(Ihe,QVo),e(ed,HVo),e(ed,xV),e(xV,UVo),e(ed,JVo),e(mt,YVo),M(m4,mt,null),e(qo,KVo),e(qo,no),M(UA,no,null),e(no,ZVo),e(no,qhe),e(qhe,eXo),e(no,oXo),e(no,qa),e(qa,rXo),e(qa,Nhe),e(Nhe,tXo),e(qa,aXo),e(qa,jhe),e(jhe,nXo),e(qa,sXo),e(qa,Dhe),e(Dhe,lXo),e(qa,iXo),e(no,dXo),e(no,V),e(V,g4),e(g4,Ghe),e(Ghe,cXo),e(g4,fXo),e(g4,$V),e($V,mXo),e(g4,gXo),e(V,hXo),e(V,h4),e(h4,Ohe),e(Ohe,pXo),e(h4,uXo),e(h4,kV),e(kV,_Xo),e(h4,bXo),e(V,vXo),e(V,p4),e(p4,Vhe),e(Vhe,FXo),e(p4,TXo),e(p4,SV),e(SV,MXo),e(p4,EXo),e(V,CXo),e(V,u4),e(u4,Xhe),e(Xhe,wXo),e(u4,AXo),e(u4,RV),e(RV,yXo),e(u4,LXo),e(V,xXo),e(V,_4),e(_4,zhe),e(zhe,$Xo),e(_4,kXo),e(_4,PV),e(PV,SXo),e(_4,RXo),e(V,PXo),e(V,b4),e(b4,Whe),e(Whe,BXo),e(b4,IXo),e(b4,BV),e(BV,qXo),e(b4,NXo),e(V,jXo),e(V,v4),e(v4,Qhe),e(Qhe,DXo),e(v4,GXo),e(v4,IV),e(IV,OXo),e(v4,VXo),e(V,XXo),e(V,F4),e(F4,Hhe),e(Hhe,zXo),e(F4,WXo),e(F4,qV),e(qV,QXo),e(F4,HXo),e(V,UXo),e(V,T4),e(T4,Uhe),e(Uhe,JXo),e(T4,YXo),e(T4,NV),e(NV,KXo),e(T4,ZXo),e(V,ezo),e(V,M4),e(M4,Jhe),e(Jhe,ozo),e(M4,rzo),e(M4,jV),e(jV,tzo),e(M4,azo),e(V,nzo),e(V,E4),e(E4,Yhe),e(Yhe,szo),e(E4,lzo),e(E4,DV),e(DV,izo),e(E4,dzo),e(V,czo),e(V,C4),e(C4,Khe),e(Khe,fzo),e(C4,mzo),e(C4,GV),e(GV,gzo),e(C4,hzo),e(V,pzo),e(V,w4),e(w4,Zhe),e(Zhe,uzo),e(w4,_zo),e(w4,OV),e(OV,bzo),e(w4,vzo),e(V,Fzo),e(V,A4),e(A4,epe),e(epe,Tzo),e(A4,Mzo),e(A4,VV),e(VV,Ezo),e(A4,Czo),e(V,wzo),e(V,y4),e(y4,ope),e(ope,Azo),e(y4,yzo),e(y4,XV),e(XV,Lzo),e(y4,xzo),e(V,$zo),e(V,L4),e(L4,rpe),e(rpe,kzo),e(L4,Szo),e(L4,zV),e(zV,Rzo),e(L4,Pzo),e(V,Bzo),e(V,x4),e(x4,tpe),e(tpe,Izo),e(x4,qzo),e(x4,WV),e(WV,Nzo),e(x4,jzo),e(V,Dzo),e(V,$4),e($4,ape),e(ape,Gzo),e($4,Ozo),e($4,QV),e(QV,Vzo),e($4,Xzo),e(V,zzo),e(V,k4),e(k4,npe),e(npe,Wzo),e(k4,Qzo),e(k4,HV),e(HV,Hzo),e(k4,Uzo),e(V,Jzo),e(V,S4),e(S4,spe),e(spe,Yzo),e(S4,Kzo),e(S4,UV),e(UV,Zzo),e(S4,eWo),e(V,oWo),e(V,R4),e(R4,lpe),e(lpe,rWo),e(R4,tWo),e(R4,JV),e(JV,aWo),e(R4,nWo),e(V,sWo),e(V,P4),e(P4,ipe),e(ipe,lWo),e(P4,iWo),e(P4,YV),e(YV,dWo),e(P4,cWo),e(V,fWo),e(V,B4),e(B4,dpe),e(dpe,mWo),e(B4,gWo),e(B4,KV),e(KV,hWo),e(B4,pWo),e(V,uWo),e(V,I4),e(I4,cpe),e(cpe,_Wo),e(I4,bWo),e(I4,ZV),e(ZV,vWo),e(I4,FWo),e(V,TWo),e(V,q4),e(q4,fpe),e(fpe,MWo),e(q4,EWo),e(q4,eX),e(eX,CWo),e(q4,wWo),e(V,AWo),e(V,N4),e(N4,mpe),e(mpe,yWo),e(N4,LWo),e(N4,oX),e(oX,xWo),e(N4,$Wo),e(V,kWo),e(V,j4),e(j4,gpe),e(gpe,SWo),e(j4,RWo),e(j4,rX),e(rX,PWo),e(j4,BWo),e(V,IWo),e(V,D4),e(D4,hpe),e(hpe,qWo),e(D4,NWo),e(D4,tX),e(tX,jWo),e(D4,DWo),e(V,GWo),e(V,G4),e(G4,ppe),e(ppe,OWo),e(G4,VWo),e(G4,aX),e(aX,XWo),e(G4,zWo),e(V,WWo),e(V,O4),e(O4,upe),e(upe,QWo),e(O4,HWo),e(O4,nX),e(nX,UWo),e(O4,JWo),e(V,YWo),e(V,V4),e(V4,_pe),e(_pe,KWo),e(V4,ZWo),e(V4,sX),e(sX,eQo),e(V4,oQo),e(V,rQo),e(V,X4),e(X4,bpe),e(bpe,tQo),e(X4,aQo),e(X4,lX),e(lX,nQo),e(X4,sQo),e(V,lQo),e(V,z4),e(z4,vpe),e(vpe,iQo),e(z4,dQo),e(z4,iX),e(iX,cQo),e(z4,fQo),e(V,mQo),e(V,W4),e(W4,Fpe),e(Fpe,gQo),e(W4,hQo),e(W4,dX),e(dX,pQo),e(W4,uQo),e(V,_Qo),e(V,Q4),e(Q4,Tpe),e(Tpe,bQo),e(Q4,vQo),e(Q4,cX),e(cX,FQo),e(Q4,TQo),e(V,MQo),e(V,H4),e(H4,Mpe),e(Mpe,EQo),e(H4,CQo),e(H4,fX),e(fX,wQo),e(H4,AQo),e(V,yQo),e(V,U4),e(U4,Epe),e(Epe,LQo),e(U4,xQo),e(U4,mX),e(mX,$Qo),e(U4,kQo),e(V,SQo),e(V,J4),e(J4,Cpe),e(Cpe,RQo),e(J4,PQo),e(J4,gX),e(gX,BQo),e(J4,IQo),e(V,qQo),e(V,Y4),e(Y4,wpe),e(wpe,NQo),e(Y4,jQo),e(Y4,hX),e(hX,DQo),e(Y4,GQo),e(V,OQo),e(V,K4),e(K4,Ape),e(Ape,VQo),e(K4,XQo),e(K4,pX),e(pX,zQo),e(K4,WQo),e(no,QQo),e(no,Z4),e(Z4,HQo),e(Z4,ype),e(ype,UQo),e(Z4,JQo),e(Z4,Lpe),e(Lpe,YQo),e(no,KQo),M(ev,no,null),b(f,BNe,_),b(f,od,_),e(od,ov),e(ov,xpe),M(JA,xpe,null),e(od,ZQo),e(od,$pe),e($pe,eHo),b(f,INe,_),b(f,No,_),M(YA,No,null),e(No,oHo),e(No,rd),e(rd,rHo),e(rd,uX),e(uX,tHo),e(rd,aHo),e(rd,_X),e(_X,nHo),e(rd,sHo),e(No,lHo),e(No,KA),e(KA,iHo),e(KA,kpe),e(kpe,dHo),e(KA,cHo),e(No,fHo),e(No,gt),M(ZA,gt,null),e(gt,mHo),e(gt,Spe),e(Spe,gHo),e(gt,hHo),e(gt,td),e(td,pHo),e(td,Rpe),e(Rpe,uHo),e(td,_Ho),e(td,bX),e(bX,bHo),e(td,vHo),e(gt,FHo),M(rv,gt,null),e(No,THo),e(No,so),M(ey,so,null),e(so,MHo),e(so,Ppe),e(Ppe,EHo),e(so,CHo),e(so,Na),e(Na,wHo),e(Na,Bpe),e(Bpe,AHo),e(Na,yHo),e(Na,Ipe),e(Ipe,LHo),e(Na,xHo),e(Na,qpe),e(qpe,$Ho),e(Na,kHo),e(so,SHo),e(so,Npe),e(Npe,tv),e(tv,jpe),e(jpe,RHo),e(tv,PHo),e(tv,vX),e(vX,BHo),e(tv,IHo),e(so,qHo),e(so,av),e(av,NHo),e(av,Dpe),e(Dpe,jHo),e(av,DHo),e(av,Gpe),e(Gpe,GHo),e(so,OHo),M(nv,so,null),b(f,qNe,_),b(f,ad,_),e(ad,sv),e(sv,Ope),M(oy,Ope,null),e(ad,VHo),e(ad,Vpe),e(Vpe,XHo),b(f,NNe,_),b(f,jo,_),M(ry,jo,null),e(jo,zHo),e(jo,nd),e(nd,WHo),e(nd,FX),e(FX,QHo),e(nd,HHo),e(nd,TX),e(TX,UHo),e(nd,JHo),e(jo,YHo),e(jo,ty),e(ty,KHo),e(ty,Xpe),e(Xpe,ZHo),e(ty,eUo),e(jo,oUo),e(jo,ht),M(ay,ht,null),e(ht,rUo),e(ht,zpe),e(zpe,tUo),e(ht,aUo),e(ht,sd),e(sd,nUo),e(sd,Wpe),e(Wpe,sUo),e(sd,lUo),e(sd,MX),e(MX,iUo),e(sd,dUo),e(ht,cUo),M(lv,ht,null),e(jo,fUo),e(jo,lo),M(ny,lo,null),e(lo,mUo),e(lo,Qpe),e(Qpe,gUo),e(lo,hUo),e(lo,ja),e(ja,pUo),e(ja,Hpe),e(Hpe,uUo),e(ja,_Uo),e(ja,Upe),e(Upe,bUo),e(ja,vUo),e(ja,Jpe),e(Jpe,FUo),e(ja,TUo),e(lo,MUo),e(lo,Fe),e(Fe,iv),e(iv,Ype),e(Ype,EUo),e(iv,CUo),e(iv,EX),e(EX,wUo),e(iv,AUo),e(Fe,yUo),e(Fe,dv),e(dv,Kpe),e(Kpe,LUo),e(dv,xUo),e(dv,CX),e(CX,$Uo),e(dv,kUo),e(Fe,SUo),e(Fe,cv),e(cv,Zpe),e(Zpe,RUo),e(cv,PUo),e(cv,wX),e(wX,BUo),e(cv,IUo),e(Fe,qUo),e(Fe,fv),e(fv,eue),e(eue,NUo),e(fv,jUo),e(fv,AX),e(AX,DUo),e(fv,GUo),e(Fe,OUo),e(Fe,Bs),e(Bs,oue),e(oue,VUo),e(Bs,XUo),e(Bs,yX),e(yX,zUo),e(Bs,WUo),e(Bs,LX),e(LX,QUo),e(Bs,HUo),e(Fe,UUo),e(Fe,mv),e(mv,rue),e(rue,JUo),e(mv,YUo),e(mv,xX),e(xX,KUo),e(mv,ZUo),e(Fe,eJo),e(Fe,pt),e(pt,tue),e(tue,oJo),e(pt,rJo),e(pt,$X),e($X,tJo),e(pt,aJo),e(pt,kX),e(kX,nJo),e(pt,sJo),e(pt,SX),e(SX,lJo),e(pt,iJo),e(Fe,dJo),e(Fe,gv),e(gv,aue),e(aue,cJo),e(gv,fJo),e(gv,RX),e(RX,mJo),e(gv,gJo),e(Fe,hJo),e(Fe,hv),e(hv,nue),e(nue,pJo),e(hv,uJo),e(hv,PX),e(PX,_Jo),e(hv,bJo),e(Fe,vJo),e(Fe,pv),e(pv,sue),e(sue,FJo),e(pv,TJo),e(pv,BX),e(BX,MJo),e(pv,EJo),e(Fe,CJo),e(Fe,uv),e(uv,lue),e(lue,wJo),e(uv,AJo),e(uv,IX),e(IX,yJo),e(uv,LJo),e(Fe,xJo),e(Fe,_v),e(_v,iue),e(iue,$Jo),e(_v,kJo),e(_v,qX),e(qX,SJo),e(_v,RJo),e(Fe,PJo),e(Fe,bv),e(bv,due),e(due,BJo),e(bv,IJo),e(bv,NX),e(NX,qJo),e(bv,NJo),e(Fe,jJo),e(Fe,vv),e(vv,cue),e(cue,DJo),e(vv,GJo),e(vv,jX),e(jX,OJo),e(vv,VJo),e(lo,XJo),e(lo,Fv),e(Fv,zJo),e(Fv,fue),e(fue,WJo),e(Fv,QJo),e(Fv,mue),e(mue,HJo),e(lo,UJo),M(Tv,lo,null),b(f,jNe,_),b(f,ld,_),e(ld,Mv),e(Mv,gue),M(sy,gue,null),e(ld,JJo),e(ld,hue),e(hue,YJo),b(f,DNe,_),b(f,Do,_),M(ly,Do,null),e(Do,KJo),e(Do,id),e(id,ZJo),e(id,DX),e(DX,eYo),e(id,oYo),e(id,GX),e(GX,rYo),e(id,tYo),e(Do,aYo),e(Do,iy),e(iy,nYo),e(iy,pue),e(pue,sYo),e(iy,lYo),e(Do,iYo),e(Do,ut),M(dy,ut,null),e(ut,dYo),e(ut,uue),e(uue,cYo),e(ut,fYo),e(ut,dd),e(dd,mYo),e(dd,_ue),e(_ue,gYo),e(dd,hYo),e(dd,OX),e(OX,pYo),e(dd,uYo),e(ut,_Yo),M(Ev,ut,null),e(Do,bYo),e(Do,io),M(cy,io,null),e(io,vYo),e(io,bue),e(bue,FYo),e(io,TYo),e(io,Da),e(Da,MYo),e(Da,vue),e(vue,EYo),e(Da,CYo),e(Da,Fue),e(Fue,wYo),e(Da,AYo),e(Da,Tue),e(Tue,yYo),e(Da,LYo),e(io,xYo),e(io,Mue),e(Mue,Cv),e(Cv,Eue),e(Eue,$Yo),e(Cv,kYo),e(Cv,VX),e(VX,SYo),e(Cv,RYo),e(io,PYo),e(io,wv),e(wv,BYo),e(wv,Cue),e(Cue,IYo),e(wv,qYo),e(wv,wue),e(wue,NYo),e(io,jYo),M(Av,io,null),b(f,GNe,_),b(f,cd,_),e(cd,yv),e(yv,Aue),M(fy,Aue,null),e(cd,DYo),e(cd,yue),e(yue,GYo),b(f,ONe,_),b(f,Go,_),M(my,Go,null),e(Go,OYo),e(Go,fd),e(fd,VYo),e(fd,XX),e(XX,XYo),e(fd,zYo),e(fd,zX),e(zX,WYo),e(fd,QYo),e(Go,HYo),e(Go,gy),e(gy,UYo),e(gy,Lue),e(Lue,JYo),e(gy,YYo),e(Go,KYo),e(Go,_t),M(hy,_t,null),e(_t,ZYo),e(_t,xue),e(xue,eKo),e(_t,oKo),e(_t,md),e(md,rKo),e(md,$ue),e($ue,tKo),e(md,aKo),e(md,WX),e(WX,nKo),e(md,sKo),e(_t,lKo),M(Lv,_t,null),e(Go,iKo),e(Go,co),M(py,co,null),e(co,dKo),e(co,kue),e(kue,cKo),e(co,fKo),e(co,Ga),e(Ga,mKo),e(Ga,Sue),e(Sue,gKo),e(Ga,hKo),e(Ga,Rue),e(Rue,pKo),e(Ga,uKo),e(Ga,Pue),e(Pue,_Ko),e(Ga,bKo),e(co,vKo),e(co,ke),e(ke,xv),e(xv,Bue),e(Bue,FKo),e(xv,TKo),e(xv,QX),e(QX,MKo),e(xv,EKo),e(ke,CKo),e(ke,$v),e($v,Iue),e(Iue,wKo),e($v,AKo),e($v,HX),e(HX,yKo),e($v,LKo),e(ke,xKo),e(ke,kv),e(kv,que),e(que,$Ko),e(kv,kKo),e(kv,UX),e(UX,SKo),e(kv,RKo),e(ke,PKo),e(ke,Sv),e(Sv,Nue),e(Nue,BKo),e(Sv,IKo),e(Sv,JX),e(JX,qKo),e(Sv,NKo),e(ke,jKo),e(ke,Rv),e(Rv,jue),e(jue,DKo),e(Rv,GKo),e(Rv,YX),e(YX,OKo),e(Rv,VKo),e(ke,XKo),e(ke,Pv),e(Pv,Due),e(Due,zKo),e(Pv,WKo),e(Pv,KX),e(KX,QKo),e(Pv,HKo),e(ke,UKo),e(ke,Bv),e(Bv,Gue),e(Gue,JKo),e(Bv,YKo),e(Bv,ZX),e(ZX,KKo),e(Bv,ZKo),e(ke,eZo),e(ke,Iv),e(Iv,Oue),e(Oue,oZo),e(Iv,rZo),e(Iv,ez),e(ez,tZo),e(Iv,aZo),e(ke,nZo),e(ke,qv),e(qv,Vue),e(Vue,sZo),e(qv,lZo),e(qv,oz),e(oz,iZo),e(qv,dZo),e(co,cZo),e(co,Nv),e(Nv,fZo),e(Nv,Xue),e(Xue,mZo),e(Nv,gZo),e(Nv,zue),e(zue,hZo),e(co,pZo),M(jv,co,null),b(f,VNe,_),b(f,gd,_),e(gd,Dv),e(Dv,Wue),M(uy,Wue,null),e(gd,uZo),e(gd,Que),e(Que,_Zo),b(f,XNe,_),b(f,Oo,_),M(_y,Oo,null),e(Oo,bZo),e(Oo,hd),e(hd,vZo),e(hd,rz),e(rz,FZo),e(hd,TZo),e(hd,tz),e(tz,MZo),e(hd,EZo),e(Oo,CZo),e(Oo,by),e(by,wZo),e(by,Hue),e(Hue,AZo),e(by,yZo),e(Oo,LZo),e(Oo,bt),M(vy,bt,null),e(bt,xZo),e(bt,Uue),e(Uue,$Zo),e(bt,kZo),e(bt,pd),e(pd,SZo),e(pd,Jue),e(Jue,RZo),e(pd,PZo),e(pd,az),e(az,BZo),e(pd,IZo),e(bt,qZo),M(Gv,bt,null),e(Oo,NZo),e(Oo,fo),M(Fy,fo,null),e(fo,jZo),e(fo,Yue),e(Yue,DZo),e(fo,GZo),e(fo,Oa),e(Oa,OZo),e(Oa,Kue),e(Kue,VZo),e(Oa,XZo),e(Oa,Zue),e(Zue,zZo),e(Oa,WZo),e(Oa,e_e),e(e_e,QZo),e(Oa,HZo),e(fo,UZo),e(fo,Kr),e(Kr,Ov),e(Ov,o_e),e(o_e,JZo),e(Ov,YZo),e(Ov,nz),e(nz,KZo),e(Ov,ZZo),e(Kr,eer),e(Kr,Vv),e(Vv,r_e),e(r_e,oer),e(Vv,rer),e(Vv,sz),e(sz,ter),e(Vv,aer),e(Kr,ner),e(Kr,Xv),e(Xv,t_e),e(t_e,ser),e(Xv,ler),e(Xv,lz),e(lz,ier),e(Xv,der),e(Kr,cer),e(Kr,zv),e(zv,a_e),e(a_e,fer),e(zv,mer),e(zv,iz),e(iz,ger),e(zv,her),e(Kr,per),e(Kr,Wv),e(Wv,n_e),e(n_e,uer),e(Wv,_er),e(Wv,dz),e(dz,ber),e(Wv,ver),e(fo,Fer),e(fo,Qv),e(Qv,Ter),e(Qv,s_e),e(s_e,Mer),e(Qv,Eer),e(Qv,l_e),e(l_e,Cer),e(fo,wer),M(Hv,fo,null),b(f,zNe,_),b(f,ud,_),e(ud,Uv),e(Uv,i_e),M(Ty,i_e,null),e(ud,Aer),e(ud,d_e),e(d_e,yer),b(f,WNe,_),b(f,Vo,_),M(My,Vo,null),e(Vo,Ler),e(Vo,_d),e(_d,xer),e(_d,cz),e(cz,$er),e(_d,ker),e(_d,fz),e(fz,Ser),e(_d,Rer),e(Vo,Per),e(Vo,Ey),e(Ey,Ber),e(Ey,c_e),e(c_e,Ier),e(Ey,qer),e(Vo,Ner),e(Vo,vt),M(Cy,vt,null),e(vt,jer),e(vt,f_e),e(f_e,Der),e(vt,Ger),e(vt,bd),e(bd,Oer),e(bd,m_e),e(m_e,Ver),e(bd,Xer),e(bd,mz),e(mz,zer),e(bd,Wer),e(vt,Qer),M(Jv,vt,null),e(Vo,Her),e(Vo,mo),M(wy,mo,null),e(mo,Uer),e(mo,g_e),e(g_e,Jer),e(mo,Yer),e(mo,Va),e(Va,Ker),e(Va,h_e),e(h_e,Zer),e(Va,eor),e(Va,p_e),e(p_e,oor),e(Va,ror),e(Va,u_e),e(u_e,tor),e(Va,aor),e(mo,nor),e(mo,Se),e(Se,Yv),e(Yv,__e),e(__e,sor),e(Yv,lor),e(Yv,gz),e(gz,ior),e(Yv,dor),e(Se,cor),e(Se,Kv),e(Kv,b_e),e(b_e,mor),e(Kv,gor),e(Kv,hz),e(hz,hor),e(Kv,por),e(Se,uor),e(Se,Zv),e(Zv,v_e),e(v_e,_or),e(Zv,bor),e(Zv,pz),e(pz,vor),e(Zv,For),e(Se,Tor),e(Se,eF),e(eF,F_e),e(F_e,Mor),e(eF,Eor),e(eF,uz),e(uz,Cor),e(eF,wor),e(Se,Aor),e(Se,oF),e(oF,T_e),e(T_e,yor),e(oF,Lor),e(oF,_z),e(_z,xor),e(oF,$or),e(Se,kor),e(Se,rF),e(rF,M_e),e(M_e,Sor),e(rF,Ror),e(rF,bz),e(bz,Por),e(rF,Bor),e(Se,Ior),e(Se,tF),e(tF,E_e),e(E_e,qor),e(tF,Nor),e(tF,vz),e(vz,jor),e(tF,Dor),e(Se,Gor),e(Se,aF),e(aF,C_e),e(C_e,Oor),e(aF,Vor),e(aF,Fz),e(Fz,Xor),e(aF,zor),e(Se,Wor),e(Se,nF),e(nF,w_e),e(w_e,Qor),e(nF,Hor),e(nF,Tz),e(Tz,Uor),e(nF,Jor),e(mo,Yor),e(mo,sF),e(sF,Kor),e(sF,A_e),e(A_e,Zor),e(sF,err),e(sF,y_e),e(y_e,orr),e(mo,rrr),M(lF,mo,null),b(f,QNe,_),b(f,vd,_),e(vd,iF),e(iF,L_e),M(Ay,L_e,null),e(vd,trr),e(vd,x_e),e(x_e,arr),b(f,HNe,_),b(f,Xo,_),M(yy,Xo,null),e(Xo,nrr),e(Xo,Fd),e(Fd,srr),e(Fd,Mz),e(Mz,lrr),e(Fd,irr),e(Fd,Ez),e(Ez,drr),e(Fd,crr),e(Xo,frr),e(Xo,Ly),e(Ly,mrr),e(Ly,$_e),e($_e,grr),e(Ly,hrr),e(Xo,prr),e(Xo,Ft),M(xy,Ft,null),e(Ft,urr),e(Ft,k_e),e(k_e,_rr),e(Ft,brr),e(Ft,Td),e(Td,vrr),e(Td,S_e),e(S_e,Frr),e(Td,Trr),e(Td,Cz),e(Cz,Mrr),e(Td,Err),e(Ft,Crr),M(dF,Ft,null),e(Xo,wrr),e(Xo,go),M($y,go,null),e(go,Arr),e(go,R_e),e(R_e,yrr),e(go,Lrr),e(go,Xa),e(Xa,xrr),e(Xa,P_e),e(P_e,$rr),e(Xa,krr),e(Xa,B_e),e(B_e,Srr),e(Xa,Rrr),e(Xa,I_e),e(I_e,Prr),e(Xa,Brr),e(go,Irr),e(go,ky),e(ky,cF),e(cF,q_e),e(q_e,qrr),e(cF,Nrr),e(cF,wz),e(wz,jrr),e(cF,Drr),e(ky,Grr),e(ky,fF),e(fF,N_e),e(N_e,Orr),e(fF,Vrr),e(fF,Az),e(Az,Xrr),e(fF,zrr),e(go,Wrr),e(go,mF),e(mF,Qrr),e(mF,j_e),e(j_e,Hrr),e(mF,Urr),e(mF,D_e),e(D_e,Jrr),e(go,Yrr),M(gF,go,null),b(f,UNe,_),b(f,Md,_),e(Md,hF),e(hF,G_e),M(Sy,G_e,null),e(Md,Krr),e(Md,O_e),e(O_e,Zrr),b(f,JNe,_),b(f,zo,_),M(Ry,zo,null),e(zo,etr),e(zo,Ed),e(Ed,otr),e(Ed,yz),e(yz,rtr),e(Ed,ttr),e(Ed,Lz),e(Lz,atr),e(Ed,ntr),e(zo,str),e(zo,Py),e(Py,ltr),e(Py,V_e),e(V_e,itr),e(Py,dtr),e(zo,ctr),e(zo,Tt),M(By,Tt,null),e(Tt,ftr),e(Tt,X_e),e(X_e,mtr),e(Tt,gtr),e(Tt,Cd),e(Cd,htr),e(Cd,z_e),e(z_e,ptr),e(Cd,utr),e(Cd,xz),e(xz,_tr),e(Cd,btr),e(Tt,vtr),M(pF,Tt,null),e(zo,Ftr),e(zo,ho),M(Iy,ho,null),e(ho,Ttr),e(ho,W_e),e(W_e,Mtr),e(ho,Etr),e(ho,za),e(za,Ctr),e(za,Q_e),e(Q_e,wtr),e(za,Atr),e(za,H_e),e(H_e,ytr),e(za,Ltr),e(za,U_e),e(U_e,xtr),e(za,$tr),e(ho,ktr),e(ho,Zr),e(Zr,uF),e(uF,J_e),e(J_e,Str),e(uF,Rtr),e(uF,$z),e($z,Ptr),e(uF,Btr),e(Zr,Itr),e(Zr,_F),e(_F,Y_e),e(Y_e,qtr),e(_F,Ntr),e(_F,kz),e(kz,jtr),e(_F,Dtr),e(Zr,Gtr),e(Zr,bF),e(bF,K_e),e(K_e,Otr),e(bF,Vtr),e(bF,Sz),e(Sz,Xtr),e(bF,ztr),e(Zr,Wtr),e(Zr,vF),e(vF,Z_e),e(Z_e,Qtr),e(vF,Htr),e(vF,Rz),e(Rz,Utr),e(vF,Jtr),e(Zr,Ytr),e(Zr,FF),e(FF,e1e),e(e1e,Ktr),e(FF,Ztr),e(FF,Pz),e(Pz,ear),e(FF,oar),e(ho,rar),e(ho,TF),e(TF,tar),e(TF,o1e),e(o1e,aar),e(TF,nar),e(TF,r1e),e(r1e,sar),e(ho,lar),M(MF,ho,null),b(f,YNe,_),b(f,wd,_),e(wd,EF),e(EF,t1e),M(qy,t1e,null),e(wd,iar),e(wd,a1e),e(a1e,dar),b(f,KNe,_),b(f,Wo,_),M(Ny,Wo,null),e(Wo,car),e(Wo,Ad),e(Ad,far),e(Ad,Bz),e(Bz,mar),e(Ad,gar),e(Ad,Iz),e(Iz,har),e(Ad,par),e(Wo,uar),e(Wo,jy),e(jy,_ar),e(jy,n1e),e(n1e,bar),e(jy,Far),e(Wo,Tar),e(Wo,Mt),M(Dy,Mt,null),e(Mt,Mar),e(Mt,s1e),e(s1e,Ear),e(Mt,Car),e(Mt,yd),e(yd,war),e(yd,l1e),e(l1e,Aar),e(yd,yar),e(yd,qz),e(qz,Lar),e(yd,xar),e(Mt,$ar),M(CF,Mt,null),e(Wo,kar),e(Wo,po),M(Gy,po,null),e(po,Sar),e(po,i1e),e(i1e,Rar),e(po,Par),e(po,Wa),e(Wa,Bar),e(Wa,d1e),e(d1e,Iar),e(Wa,qar),e(Wa,c1e),e(c1e,Nar),e(Wa,jar),e(Wa,f1e),e(f1e,Dar),e(Wa,Gar),e(po,Oar),e(po,Ld),e(Ld,wF),e(wF,m1e),e(m1e,Var),e(wF,Xar),e(wF,Nz),e(Nz,zar),e(wF,War),e(Ld,Qar),e(Ld,AF),e(AF,g1e),e(g1e,Har),e(AF,Uar),e(AF,jz),e(jz,Jar),e(AF,Yar),e(Ld,Kar),e(Ld,yF),e(yF,h1e),e(h1e,Zar),e(yF,enr),e(yF,Dz),e(Dz,onr),e(yF,rnr),e(po,tnr),e(po,LF),e(LF,anr),e(LF,p1e),e(p1e,nnr),e(LF,snr),e(LF,u1e),e(u1e,lnr),e(po,inr),M(xF,po,null),b(f,ZNe,_),b(f,xd,_),e(xd,$F),e($F,_1e),M(Oy,_1e,null),e(xd,dnr),e(xd,b1e),e(b1e,cnr),b(f,eje,_),b(f,Qo,_),M(Vy,Qo,null),e(Qo,fnr),e(Qo,$d),e($d,mnr),e($d,Gz),e(Gz,gnr),e($d,hnr),e($d,Oz),e(Oz,pnr),e($d,unr),e(Qo,_nr),e(Qo,Xy),e(Xy,bnr),e(Xy,v1e),e(v1e,vnr),e(Xy,Fnr),e(Qo,Tnr),e(Qo,Et),M(zy,Et,null),e(Et,Mnr),e(Et,F1e),e(F1e,Enr),e(Et,Cnr),e(Et,kd),e(kd,wnr),e(kd,T1e),e(T1e,Anr),e(kd,ynr),e(kd,Vz),e(Vz,Lnr),e(kd,xnr),e(Et,$nr),M(kF,Et,null),e(Qo,knr),e(Qo,uo),M(Wy,uo,null),e(uo,Snr),e(uo,M1e),e(M1e,Rnr),e(uo,Pnr),e(uo,Qa),e(Qa,Bnr),e(Qa,E1e),e(E1e,Inr),e(Qa,qnr),e(Qa,C1e),e(C1e,Nnr),e(Qa,jnr),e(Qa,w1e),e(w1e,Dnr),e(Qa,Gnr),e(uo,Onr),e(uo,Qy),e(Qy,SF),e(SF,A1e),e(A1e,Vnr),e(SF,Xnr),e(SF,Xz),e(Xz,znr),e(SF,Wnr),e(Qy,Qnr),e(Qy,RF),e(RF,y1e),e(y1e,Hnr),e(RF,Unr),e(RF,zz),e(zz,Jnr),e(RF,Ynr),e(uo,Knr),e(uo,PF),e(PF,Znr),e(PF,L1e),e(L1e,esr),e(PF,osr),e(PF,x1e),e(x1e,rsr),e(uo,tsr),M(BF,uo,null),b(f,oje,_),b(f,Sd,_),e(Sd,IF),e(IF,$1e),M(Hy,$1e,null),e(Sd,asr),e(Sd,k1e),e(k1e,nsr),b(f,rje,_),b(f,Ho,_),M(Uy,Ho,null),e(Ho,ssr),e(Ho,Rd),e(Rd,lsr),e(Rd,Wz),e(Wz,isr),e(Rd,dsr),e(Rd,Qz),e(Qz,csr),e(Rd,fsr),e(Ho,msr),e(Ho,Jy),e(Jy,gsr),e(Jy,S1e),e(S1e,hsr),e(Jy,psr),e(Ho,usr),e(Ho,Ct),M(Yy,Ct,null),e(Ct,_sr),e(Ct,R1e),e(R1e,bsr),e(Ct,vsr),e(Ct,Pd),e(Pd,Fsr),e(Pd,P1e),e(P1e,Tsr),e(Pd,Msr),e(Pd,Hz),e(Hz,Esr),e(Pd,Csr),e(Ct,wsr),M(qF,Ct,null),e(Ho,Asr),e(Ho,_o),M(Ky,_o,null),e(_o,ysr),e(_o,B1e),e(B1e,Lsr),e(_o,xsr),e(_o,Ha),e(Ha,$sr),e(Ha,I1e),e(I1e,ksr),e(Ha,Ssr),e(Ha,q1e),e(q1e,Rsr),e(Ha,Psr),e(Ha,N1e),e(N1e,Bsr),e(Ha,Isr),e(_o,qsr),e(_o,j1e),e(j1e,NF),e(NF,D1e),e(D1e,Nsr),e(NF,jsr),e(NF,Uz),e(Uz,Dsr),e(NF,Gsr),e(_o,Osr),e(_o,jF),e(jF,Vsr),e(jF,G1e),e(G1e,Xsr),e(jF,zsr),e(jF,O1e),e(O1e,Wsr),e(_o,Qsr),M(DF,_o,null),b(f,tje,_),b(f,Bd,_),e(Bd,GF),e(GF,V1e),M(Zy,V1e,null),e(Bd,Hsr),e(Bd,X1e),e(X1e,Usr),b(f,aje,_),b(f,Uo,_),M(eL,Uo,null),e(Uo,Jsr),e(Uo,Id),e(Id,Ysr),e(Id,Jz),e(Jz,Ksr),e(Id,Zsr),e(Id,Yz),e(Yz,elr),e(Id,olr),e(Uo,rlr),e(Uo,oL),e(oL,tlr),e(oL,z1e),e(z1e,alr),e(oL,nlr),e(Uo,slr),e(Uo,wt),M(rL,wt,null),e(wt,llr),e(wt,W1e),e(W1e,ilr),e(wt,dlr),e(wt,qd),e(qd,clr),e(qd,Q1e),e(Q1e,flr),e(qd,mlr),e(qd,Kz),e(Kz,glr),e(qd,hlr),e(wt,plr),M(OF,wt,null),e(Uo,ulr),e(Uo,bo),M(tL,bo,null),e(bo,_lr),e(bo,H1e),e(H1e,blr),e(bo,vlr),e(bo,Ua),e(Ua,Flr),e(Ua,U1e),e(U1e,Tlr),e(Ua,Mlr),e(Ua,J1e),e(J1e,Elr),e(Ua,Clr),e(Ua,Y1e),e(Y1e,wlr),e(Ua,Alr),e(bo,ylr),e(bo,Ja),e(Ja,VF),e(VF,K1e),e(K1e,Llr),e(VF,xlr),e(VF,Zz),e(Zz,$lr),e(VF,klr),e(Ja,Slr),e(Ja,XF),e(XF,Z1e),e(Z1e,Rlr),e(XF,Plr),e(XF,eW),e(eW,Blr),e(XF,Ilr),e(Ja,qlr),e(Ja,zF),e(zF,e9e),e(e9e,Nlr),e(zF,jlr),e(zF,oW),e(oW,Dlr),e(zF,Glr),e(Ja,Olr),e(Ja,WF),e(WF,o9e),e(o9e,Vlr),e(WF,Xlr),e(WF,rW),e(rW,zlr),e(WF,Wlr),e(bo,Qlr),e(bo,QF),e(QF,Hlr),e(QF,r9e),e(r9e,Ulr),e(QF,Jlr),e(QF,t9e),e(t9e,Ylr),e(bo,Klr),M(HF,bo,null),b(f,nje,_),b(f,Nd,_),e(Nd,UF),e(UF,a9e),M(aL,a9e,null),e(Nd,Zlr),e(Nd,n9e),e(n9e,eir),b(f,sje,_),b(f,Jo,_),M(nL,Jo,null),e(Jo,oir),e(Jo,jd),e(jd,rir),e(jd,tW),e(tW,tir),e(jd,air),e(jd,aW),e(aW,nir),e(jd,sir),e(Jo,lir),e(Jo,sL),e(sL,iir),e(sL,s9e),e(s9e,dir),e(sL,cir),e(Jo,fir),e(Jo,At),M(lL,At,null),e(At,mir),e(At,l9e),e(l9e,gir),e(At,hir),e(At,Dd),e(Dd,pir),e(Dd,i9e),e(i9e,uir),e(Dd,_ir),e(Dd,nW),e(nW,bir),e(Dd,vir),e(At,Fir),M(JF,At,null),e(Jo,Tir),e(Jo,vo),M(iL,vo,null),e(vo,Mir),e(vo,d9e),e(d9e,Eir),e(vo,Cir),e(vo,Ya),e(Ya,wir),e(Ya,c9e),e(c9e,Air),e(Ya,yir),e(Ya,f9e),e(f9e,Lir),e(Ya,xir),e(Ya,m9e),e(m9e,$ir),e(Ya,kir),e(vo,Sir),e(vo,g9e),e(g9e,YF),e(YF,h9e),e(h9e,Rir),e(YF,Pir),e(YF,sW),e(sW,Bir),e(YF,Iir),e(vo,qir),e(vo,KF),e(KF,Nir),e(KF,p9e),e(p9e,jir),e(KF,Dir),e(KF,u9e),e(u9e,Gir),e(vo,Oir),M(ZF,vo,null),b(f,lje,_),b(f,Gd,_),e(Gd,eT),e(eT,_9e),M(dL,_9e,null),e(Gd,Vir),e(Gd,b9e),e(b9e,Xir),b(f,ije,_),b(f,Yo,_),M(cL,Yo,null),e(Yo,zir),e(Yo,Od),e(Od,Wir),e(Od,lW),e(lW,Qir),e(Od,Hir),e(Od,iW),e(iW,Uir),e(Od,Jir),e(Yo,Yir),e(Yo,fL),e(fL,Kir),e(fL,v9e),e(v9e,Zir),e(fL,edr),e(Yo,odr),e(Yo,yt),M(mL,yt,null),e(yt,rdr),e(yt,F9e),e(F9e,tdr),e(yt,adr),e(yt,Vd),e(Vd,ndr),e(Vd,T9e),e(T9e,sdr),e(Vd,ldr),e(Vd,dW),e(dW,idr),e(Vd,ddr),e(yt,cdr),M(oT,yt,null),e(Yo,fdr),e(Yo,wr),M(gL,wr,null),e(wr,mdr),e(wr,M9e),e(M9e,gdr),e(wr,hdr),e(wr,Ka),e(Ka,pdr),e(Ka,E9e),e(E9e,udr),e(Ka,_dr),e(Ka,C9e),e(C9e,bdr),e(Ka,vdr),e(Ka,w9e),e(w9e,Fdr),e(Ka,Tdr),e(wr,Mdr),e(wr,N),e(N,rT),e(rT,A9e),e(A9e,Edr),e(rT,Cdr),e(rT,cW),e(cW,wdr),e(rT,Adr),e(N,ydr),e(N,tT),e(tT,y9e),e(y9e,Ldr),e(tT,xdr),e(tT,fW),e(fW,$dr),e(tT,kdr),e(N,Sdr),e(N,aT),e(aT,L9e),e(L9e,Rdr),e(aT,Pdr),e(aT,mW),e(mW,Bdr),e(aT,Idr),e(N,qdr),e(N,nT),e(nT,x9e),e(x9e,Ndr),e(nT,jdr),e(nT,gW),e(gW,Ddr),e(nT,Gdr),e(N,Odr),e(N,sT),e(sT,$9e),e($9e,Vdr),e(sT,Xdr),e(sT,hW),e(hW,zdr),e(sT,Wdr),e(N,Qdr),e(N,lT),e(lT,k9e),e(k9e,Hdr),e(lT,Udr),e(lT,pW),e(pW,Jdr),e(lT,Ydr),e(N,Kdr),e(N,iT),e(iT,S9e),e(S9e,Zdr),e(iT,ecr),e(iT,uW),e(uW,ocr),e(iT,rcr),e(N,tcr),e(N,dT),e(dT,R9e),e(R9e,acr),e(dT,ncr),e(dT,_W),e(_W,scr),e(dT,lcr),e(N,icr),e(N,cT),e(cT,P9e),e(P9e,dcr),e(cT,ccr),e(cT,bW),e(bW,fcr),e(cT,mcr),e(N,gcr),e(N,fT),e(fT,B9e),e(B9e,hcr),e(fT,pcr),e(fT,vW),e(vW,ucr),e(fT,_cr),e(N,bcr),e(N,mT),e(mT,I9e),e(I9e,vcr),e(mT,Fcr),e(mT,FW),e(FW,Tcr),e(mT,Mcr),e(N,Ecr),e(N,gT),e(gT,q9e),e(q9e,Ccr),e(gT,wcr),e(gT,TW),e(TW,Acr),e(gT,ycr),e(N,Lcr),e(N,hT),e(hT,N9e),e(N9e,xcr),e(hT,$cr),e(hT,MW),e(MW,kcr),e(hT,Scr),e(N,Rcr),e(N,pT),e(pT,j9e),e(j9e,Pcr),e(pT,Bcr),e(pT,EW),e(EW,Icr),e(pT,qcr),e(N,Ncr),e(N,uT),e(uT,D9e),e(D9e,jcr),e(uT,Dcr),e(uT,CW),e(CW,Gcr),e(uT,Ocr),e(N,Vcr),e(N,_T),e(_T,G9e),e(G9e,Xcr),e(_T,zcr),e(_T,wW),e(wW,Wcr),e(_T,Qcr),e(N,Hcr),e(N,bT),e(bT,O9e),e(O9e,Ucr),e(bT,Jcr),e(bT,AW),e(AW,Ycr),e(bT,Kcr),e(N,Zcr),e(N,Is),e(Is,V9e),e(V9e,efr),e(Is,ofr),e(Is,yW),e(yW,rfr),e(Is,tfr),e(Is,LW),e(LW,afr),e(Is,nfr),e(N,sfr),e(N,vT),e(vT,X9e),e(X9e,lfr),e(vT,ifr),e(vT,xW),e(xW,dfr),e(vT,cfr),e(N,ffr),e(N,FT),e(FT,z9e),e(z9e,mfr),e(FT,gfr),e(FT,$W),e($W,hfr),e(FT,pfr),e(N,ufr),e(N,TT),e(TT,W9e),e(W9e,_fr),e(TT,bfr),e(TT,kW),e(kW,vfr),e(TT,Ffr),e(N,Tfr),e(N,MT),e(MT,Q9e),e(Q9e,Mfr),e(MT,Efr),e(MT,SW),e(SW,Cfr),e(MT,wfr),e(N,Afr),e(N,ET),e(ET,H9e),e(H9e,yfr),e(ET,Lfr),e(ET,RW),e(RW,xfr),e(ET,$fr),e(N,kfr),e(N,CT),e(CT,U9e),e(U9e,Sfr),e(CT,Rfr),e(CT,PW),e(PW,Pfr),e(CT,Bfr),e(N,Ifr),e(N,wT),e(wT,J9e),e(J9e,qfr),e(wT,Nfr),e(wT,BW),e(BW,jfr),e(wT,Dfr),e(N,Gfr),e(N,AT),e(AT,Y9e),e(Y9e,Ofr),e(AT,Vfr),e(AT,IW),e(IW,Xfr),e(AT,zfr),e(N,Wfr),e(N,yT),e(yT,K9e),e(K9e,Qfr),e(yT,Hfr),e(yT,qW),e(qW,Ufr),e(yT,Jfr),e(N,Yfr),e(N,LT),e(LT,Z9e),e(Z9e,Kfr),e(LT,Zfr),e(LT,NW),e(NW,emr),e(LT,omr),e(N,rmr),e(N,xT),e(xT,ebe),e(ebe,tmr),e(xT,amr),e(xT,jW),e(jW,nmr),e(xT,smr),e(N,lmr),e(N,$T),e($T,obe),e(obe,imr),e($T,dmr),e($T,DW),e(DW,cmr),e($T,fmr),e(N,mmr),e(N,kT),e(kT,rbe),e(rbe,gmr),e(kT,hmr),e(kT,GW),e(GW,pmr),e(kT,umr),e(N,_mr),e(N,ST),e(ST,tbe),e(tbe,bmr),e(ST,vmr),e(ST,OW),e(OW,Fmr),e(ST,Tmr),e(N,Mmr),e(N,RT),e(RT,abe),e(abe,Emr),e(RT,Cmr),e(RT,VW),e(VW,wmr),e(RT,Amr),e(N,ymr),e(N,PT),e(PT,nbe),e(nbe,Lmr),e(PT,xmr),e(PT,XW),e(XW,$mr),e(PT,kmr),e(N,Smr),e(N,BT),e(BT,sbe),e(sbe,Rmr),e(BT,Pmr),e(BT,zW),e(zW,Bmr),e(BT,Imr),e(N,qmr),e(N,IT),e(IT,lbe),e(lbe,Nmr),e(IT,jmr),e(IT,WW),e(WW,Dmr),e(IT,Gmr),e(N,Omr),e(N,qT),e(qT,ibe),e(ibe,Vmr),e(qT,Xmr),e(qT,QW),e(QW,zmr),e(qT,Wmr),e(N,Qmr),e(N,NT),e(NT,dbe),e(dbe,Hmr),e(NT,Umr),e(NT,HW),e(HW,Jmr),e(NT,Ymr),e(N,Kmr),e(N,jT),e(jT,cbe),e(cbe,Zmr),e(jT,egr),e(jT,UW),e(UW,ogr),e(jT,rgr),e(N,tgr),e(N,DT),e(DT,fbe),e(fbe,agr),e(DT,ngr),e(DT,JW),e(JW,sgr),e(DT,lgr),e(N,igr),e(N,GT),e(GT,mbe),e(mbe,dgr),e(GT,cgr),e(GT,YW),e(YW,fgr),e(GT,mgr),e(N,ggr),e(N,OT),e(OT,gbe),e(gbe,hgr),e(OT,pgr),e(OT,KW),e(KW,ugr),e(OT,_gr),e(N,bgr),e(N,VT),e(VT,hbe),e(hbe,vgr),e(VT,Fgr),e(VT,ZW),e(ZW,Tgr),e(VT,Mgr),e(N,Egr),e(N,XT),e(XT,pbe),e(pbe,Cgr),e(XT,wgr),e(XT,eQ),e(eQ,Agr),e(XT,ygr),e(N,Lgr),e(N,zT),e(zT,ube),e(ube,xgr),e(zT,$gr),e(zT,oQ),e(oQ,kgr),e(zT,Sgr),e(N,Rgr),e(N,WT),e(WT,_be),e(_be,Pgr),e(WT,Bgr),e(WT,rQ),e(rQ,Igr),e(WT,qgr),e(wr,Ngr),M(QT,wr,null),b(f,dje,_),b(f,Xd,_),e(Xd,HT),e(HT,bbe),M(hL,bbe,null),e(Xd,jgr),e(Xd,vbe),e(vbe,Dgr),b(f,cje,_),b(f,Ko,_),M(pL,Ko,null),e(Ko,Ggr),e(Ko,zd),e(zd,Ogr),e(zd,tQ),e(tQ,Vgr),e(zd,Xgr),e(zd,aQ),e(aQ,zgr),e(zd,Wgr),e(Ko,Qgr),e(Ko,uL),e(uL,Hgr),e(uL,Fbe),e(Fbe,Ugr),e(uL,Jgr),e(Ko,Ygr),e(Ko,Lt),M(_L,Lt,null),e(Lt,Kgr),e(Lt,Tbe),e(Tbe,Zgr),e(Lt,ehr),e(Lt,Wd),e(Wd,ohr),e(Wd,Mbe),e(Mbe,rhr),e(Wd,thr),e(Wd,nQ),e(nQ,ahr),e(Wd,nhr),e(Lt,shr),M(UT,Lt,null),e(Ko,lhr),e(Ko,Ar),M(bL,Ar,null),e(Ar,ihr),e(Ar,Ebe),e(Ebe,dhr),e(Ar,chr),e(Ar,Za),e(Za,fhr),e(Za,Cbe),e(Cbe,mhr),e(Za,ghr),e(Za,wbe),e(wbe,hhr),e(Za,phr),e(Za,Abe),e(Abe,uhr),e(Za,_hr),e(Ar,bhr),e(Ar,se),e(se,JT),e(JT,ybe),e(ybe,vhr),e(JT,Fhr),e(JT,sQ),e(sQ,Thr),e(JT,Mhr),e(se,Ehr),e(se,YT),e(YT,Lbe),e(Lbe,Chr),e(YT,whr),e(YT,lQ),e(lQ,Ahr),e(YT,yhr),e(se,Lhr),e(se,KT),e(KT,xbe),e(xbe,xhr),e(KT,$hr),e(KT,iQ),e(iQ,khr),e(KT,Shr),e(se,Rhr),e(se,ZT),e(ZT,$be),e($be,Phr),e(ZT,Bhr),e(ZT,dQ),e(dQ,Ihr),e(ZT,qhr),e(se,Nhr),e(se,e7),e(e7,kbe),e(kbe,jhr),e(e7,Dhr),e(e7,cQ),e(cQ,Ghr),e(e7,Ohr),e(se,Vhr),e(se,o7),e(o7,Sbe),e(Sbe,Xhr),e(o7,zhr),e(o7,fQ),e(fQ,Whr),e(o7,Qhr),e(se,Hhr),e(se,r7),e(r7,Rbe),e(Rbe,Uhr),e(r7,Jhr),e(r7,mQ),e(mQ,Yhr),e(r7,Khr),e(se,Zhr),e(se,t7),e(t7,Pbe),e(Pbe,epr),e(t7,opr),e(t7,gQ),e(gQ,rpr),e(t7,tpr),e(se,apr),e(se,a7),e(a7,Bbe),e(Bbe,npr),e(a7,spr),e(a7,hQ),e(hQ,lpr),e(a7,ipr),e(se,dpr),e(se,n7),e(n7,Ibe),e(Ibe,cpr),e(n7,fpr),e(n7,pQ),e(pQ,mpr),e(n7,gpr),e(se,hpr),e(se,s7),e(s7,qbe),e(qbe,ppr),e(s7,upr),e(s7,uQ),e(uQ,_pr),e(s7,bpr),e(se,vpr),e(se,l7),e(l7,Nbe),e(Nbe,Fpr),e(l7,Tpr),e(l7,_Q),e(_Q,Mpr),e(l7,Epr),e(se,Cpr),e(se,i7),e(i7,jbe),e(jbe,wpr),e(i7,Apr),e(i7,bQ),e(bQ,ypr),e(i7,Lpr),e(se,xpr),e(se,d7),e(d7,Dbe),e(Dbe,$pr),e(d7,kpr),e(d7,vQ),e(vQ,Spr),e(d7,Rpr),e(se,Ppr),e(se,c7),e(c7,Gbe),e(Gbe,Bpr),e(c7,Ipr),e(c7,FQ),e(FQ,qpr),e(c7,Npr),e(se,jpr),e(se,f7),e(f7,Obe),e(Obe,Dpr),e(f7,Gpr),e(f7,TQ),e(TQ,Opr),e(f7,Vpr),e(se,Xpr),e(se,m7),e(m7,Vbe),e(Vbe,zpr),e(m7,Wpr),e(m7,MQ),e(MQ,Qpr),e(m7,Hpr),e(se,Upr),e(se,g7),e(g7,Xbe),e(Xbe,Jpr),e(g7,Ypr),e(g7,EQ),e(EQ,Kpr),e(g7,Zpr),e(se,eur),e(se,h7),e(h7,zbe),e(zbe,our),e(h7,rur),e(h7,CQ),e(CQ,tur),e(h7,aur),e(se,nur),e(se,p7),e(p7,Wbe),e(Wbe,sur),e(p7,lur),e(p7,wQ),e(wQ,iur),e(p7,dur),e(se,cur),e(se,u7),e(u7,Qbe),e(Qbe,fur),e(u7,mur),e(u7,AQ),e(AQ,gur),e(u7,hur),e(se,pur),e(se,_7),e(_7,Hbe),e(Hbe,uur),e(_7,_ur),e(_7,yQ),e(yQ,bur),e(_7,vur),e(se,Fur),e(se,b7),e(b7,Ube),e(Ube,Tur),e(b7,Mur),e(b7,LQ),e(LQ,Eur),e(b7,Cur),e(Ar,wur),M(v7,Ar,null),b(f,fje,_),b(f,Qd,_),e(Qd,F7),e(F7,Jbe),M(vL,Jbe,null),e(Qd,Aur),e(Qd,Ybe),e(Ybe,yur),b(f,mje,_),b(f,Zo,_),M(FL,Zo,null),e(Zo,Lur),e(Zo,Hd),e(Hd,xur),e(Hd,xQ),e(xQ,$ur),e(Hd,kur),e(Hd,$Q),e($Q,Sur),e(Hd,Rur),e(Zo,Pur),e(Zo,TL),e(TL,Bur),e(TL,Kbe),e(Kbe,Iur),e(TL,qur),e(Zo,Nur),e(Zo,xt),M(ML,xt,null),e(xt,jur),e(xt,Zbe),e(Zbe,Dur),e(xt,Gur),e(xt,Ud),e(Ud,Our),e(Ud,e2e),e(e2e,Vur),e(Ud,Xur),e(Ud,kQ),e(kQ,zur),e(Ud,Wur),e(xt,Qur),M(T7,xt,null),e(Zo,Hur),e(Zo,yr),M(EL,yr,null),e(yr,Uur),e(yr,o2e),e(o2e,Jur),e(yr,Yur),e(yr,en),e(en,Kur),e(en,r2e),e(r2e,Zur),e(en,e_r),e(en,t2e),e(t2e,o_r),e(en,r_r),e(en,a2e),e(a2e,t_r),e(en,a_r),e(yr,n_r),e(yr,Me),e(Me,M7),e(M7,n2e),e(n2e,s_r),e(M7,l_r),e(M7,SQ),e(SQ,i_r),e(M7,d_r),e(Me,c_r),e(Me,E7),e(E7,s2e),e(s2e,f_r),e(E7,m_r),e(E7,RQ),e(RQ,g_r),e(E7,h_r),e(Me,p_r),e(Me,C7),e(C7,l2e),e(l2e,u_r),e(C7,__r),e(C7,PQ),e(PQ,b_r),e(C7,v_r),e(Me,F_r),e(Me,w7),e(w7,i2e),e(i2e,T_r),e(w7,M_r),e(w7,BQ),e(BQ,E_r),e(w7,C_r),e(Me,w_r),e(Me,A7),e(A7,d2e),e(d2e,A_r),e(A7,y_r),e(A7,IQ),e(IQ,L_r),e(A7,x_r),e(Me,$_r),e(Me,y7),e(y7,c2e),e(c2e,k_r),e(y7,S_r),e(y7,qQ),e(qQ,R_r),e(y7,P_r),e(Me,B_r),e(Me,L7),e(L7,f2e),e(f2e,I_r),e(L7,q_r),e(L7,NQ),e(NQ,N_r),e(L7,j_r),e(Me,D_r),e(Me,x7),e(x7,m2e),e(m2e,G_r),e(x7,O_r),e(x7,jQ),e(jQ,V_r),e(x7,X_r),e(Me,z_r),e(Me,$7),e($7,g2e),e(g2e,W_r),e($7,Q_r),e($7,DQ),e(DQ,H_r),e($7,U_r),e(Me,J_r),e(Me,k7),e(k7,h2e),e(h2e,Y_r),e(k7,K_r),e(k7,GQ),e(GQ,Z_r),e(k7,e1r),e(Me,o1r),e(Me,S7),e(S7,p2e),e(p2e,r1r),e(S7,t1r),e(S7,OQ),e(OQ,a1r),e(S7,n1r),e(Me,s1r),e(Me,R7),e(R7,u2e),e(u2e,l1r),e(R7,i1r),e(R7,VQ),e(VQ,d1r),e(R7,c1r),e(yr,f1r),M(P7,yr,null),b(f,gje,_),b(f,Jd,_),e(Jd,B7),e(B7,_2e),M(CL,_2e,null),e(Jd,m1r),e(Jd,b2e),e(b2e,g1r),b(f,hje,_),b(f,er,_),M(wL,er,null),e(er,h1r),e(er,Yd),e(Yd,p1r),e(Yd,XQ),e(XQ,u1r),e(Yd,_1r),e(Yd,zQ),e(zQ,b1r),e(Yd,v1r),e(er,F1r),e(er,AL),e(AL,T1r),e(AL,v2e),e(v2e,M1r),e(AL,E1r),e(er,C1r),e(er,$t),M(yL,$t,null),e($t,w1r),e($t,F2e),e(F2e,A1r),e($t,y1r),e($t,Kd),e(Kd,L1r),e(Kd,T2e),e(T2e,x1r),e(Kd,$1r),e(Kd,WQ),e(WQ,k1r),e(Kd,S1r),e($t,R1r),M(I7,$t,null),e(er,P1r),e(er,Lr),M(LL,Lr,null),e(Lr,B1r),e(Lr,M2e),e(M2e,I1r),e(Lr,q1r),e(Lr,on),e(on,N1r),e(on,E2e),e(E2e,j1r),e(on,D1r),e(on,C2e),e(C2e,G1r),e(on,O1r),e(on,w2e),e(w2e,V1r),e(on,X1r),e(Lr,z1r),e(Lr,rn),e(rn,q7),e(q7,A2e),e(A2e,W1r),e(q7,Q1r),e(q7,QQ),e(QQ,H1r),e(q7,U1r),e(rn,J1r),e(rn,N7),e(N7,y2e),e(y2e,Y1r),e(N7,K1r),e(N7,HQ),e(HQ,Z1r),e(N7,e9r),e(rn,o9r),e(rn,j7),e(j7,L2e),e(L2e,r9r),e(j7,t9r),e(j7,UQ),e(UQ,a9r),e(j7,n9r),e(rn,s9r),e(rn,D7),e(D7,x2e),e(x2e,l9r),e(D7,i9r),e(D7,JQ),e(JQ,d9r),e(D7,c9r),e(Lr,f9r),M(G7,Lr,null),b(f,pje,_),b(f,Zd,_),e(Zd,O7),e(O7,$2e),M(xL,$2e,null),e(Zd,m9r),e(Zd,k2e),e(k2e,g9r),b(f,uje,_),b(f,or,_),M($L,or,null),e(or,h9r),e(or,ec),e(ec,p9r),e(ec,YQ),e(YQ,u9r),e(ec,_9r),e(ec,KQ),e(KQ,b9r),e(ec,v9r),e(or,F9r),e(or,kL),e(kL,T9r),e(kL,S2e),e(S2e,M9r),e(kL,E9r),e(or,C9r),e(or,kt),M(SL,kt,null),e(kt,w9r),e(kt,R2e),e(R2e,A9r),e(kt,y9r),e(kt,oc),e(oc,L9r),e(oc,P2e),e(P2e,x9r),e(oc,$9r),e(oc,ZQ),e(ZQ,k9r),e(oc,S9r),e(kt,R9r),M(V7,kt,null),e(or,P9r),e(or,xr),M(RL,xr,null),e(xr,B9r),e(xr,B2e),e(B2e,I9r),e(xr,q9r),e(xr,tn),e(tn,N9r),e(tn,I2e),e(I2e,j9r),e(tn,D9r),e(tn,q2e),e(q2e,G9r),e(tn,O9r),e(tn,N2e),e(N2e,V9r),e(tn,X9r),e(xr,z9r),e(xr,ie),e(ie,X7),e(X7,j2e),e(j2e,W9r),e(X7,Q9r),e(X7,eH),e(eH,H9r),e(X7,U9r),e(ie,J9r),e(ie,z7),e(z7,D2e),e(D2e,Y9r),e(z7,K9r),e(z7,oH),e(oH,Z9r),e(z7,ebr),e(ie,obr),e(ie,W7),e(W7,G2e),e(G2e,rbr),e(W7,tbr),e(W7,rH),e(rH,abr),e(W7,nbr),e(ie,sbr),e(ie,Q7),e(Q7,O2e),e(O2e,lbr),e(Q7,ibr),e(Q7,tH),e(tH,dbr),e(Q7,cbr),e(ie,fbr),e(ie,H7),e(H7,V2e),e(V2e,mbr),e(H7,gbr),e(H7,aH),e(aH,hbr),e(H7,pbr),e(ie,ubr),e(ie,U7),e(U7,X2e),e(X2e,_br),e(U7,bbr),e(U7,nH),e(nH,vbr),e(U7,Fbr),e(ie,Tbr),e(ie,J7),e(J7,z2e),e(z2e,Mbr),e(J7,Ebr),e(J7,sH),e(sH,Cbr),e(J7,wbr),e(ie,Abr),e(ie,Y7),e(Y7,W2e),e(W2e,ybr),e(Y7,Lbr),e(Y7,lH),e(lH,xbr),e(Y7,$br),e(ie,kbr),e(ie,K7),e(K7,Q2e),e(Q2e,Sbr),e(K7,Rbr),e(K7,iH),e(iH,Pbr),e(K7,Bbr),e(ie,Ibr),e(ie,Z7),e(Z7,H2e),e(H2e,qbr),e(Z7,Nbr),e(Z7,dH),e(dH,jbr),e(Z7,Dbr),e(ie,Gbr),e(ie,eM),e(eM,U2e),e(U2e,Obr),e(eM,Vbr),e(eM,cH),e(cH,Xbr),e(eM,zbr),e(ie,Wbr),e(ie,oM),e(oM,J2e),e(J2e,Qbr),e(oM,Hbr),e(oM,fH),e(fH,Ubr),e(oM,Jbr),e(ie,Ybr),e(ie,rM),e(rM,Y2e),e(Y2e,Kbr),e(rM,Zbr),e(rM,mH),e(mH,e2r),e(rM,o2r),e(ie,r2r),e(ie,tM),e(tM,K2e),e(K2e,t2r),e(tM,a2r),e(tM,gH),e(gH,n2r),e(tM,s2r),e(ie,l2r),e(ie,aM),e(aM,Z2e),e(Z2e,i2r),e(aM,d2r),e(aM,hH),e(hH,c2r),e(aM,f2r),e(ie,m2r),e(ie,nM),e(nM,e4e),e(e4e,g2r),e(nM,h2r),e(nM,pH),e(pH,p2r),e(nM,u2r),e(ie,_2r),e(ie,sM),e(sM,o4e),e(o4e,b2r),e(sM,v2r),e(sM,uH),e(uH,F2r),e(sM,T2r),e(ie,M2r),e(ie,lM),e(lM,r4e),e(r4e,E2r),e(lM,C2r),e(lM,_H),e(_H,w2r),e(lM,A2r),e(ie,y2r),e(ie,iM),e(iM,t4e),e(t4e,L2r),e(iM,x2r),e(iM,bH),e(bH,$2r),e(iM,k2r),e(ie,S2r),e(ie,dM),e(dM,a4e),e(a4e,R2r),e(dM,P2r),e(dM,vH),e(vH,B2r),e(dM,I2r),e(xr,q2r),M(cM,xr,null),b(f,_je,_),b(f,rc,_),e(rc,fM),e(fM,n4e),M(PL,n4e,null),e(rc,N2r),e(rc,s4e),e(s4e,j2r),b(f,bje,_),b(f,rr,_),M(BL,rr,null),e(rr,D2r),e(rr,tc),e(tc,G2r),e(tc,FH),e(FH,O2r),e(tc,V2r),e(tc,TH),e(TH,X2r),e(tc,z2r),e(rr,W2r),e(rr,IL),e(IL,Q2r),e(IL,l4e),e(l4e,H2r),e(IL,U2r),e(rr,J2r),e(rr,St),M(qL,St,null),e(St,Y2r),e(St,i4e),e(i4e,K2r),e(St,Z2r),e(St,ac),e(ac,e4r),e(ac,d4e),e(d4e,o4r),e(ac,r4r),e(ac,MH),e(MH,t4r),e(ac,a4r),e(St,n4r),M(mM,St,null),e(rr,s4r),e(rr,$r),M(NL,$r,null),e($r,l4r),e($r,c4e),e(c4e,i4r),e($r,d4r),e($r,an),e(an,c4r),e(an,f4e),e(f4e,f4r),e(an,m4r),e(an,m4e),e(m4e,g4r),e(an,h4r),e(an,g4e),e(g4e,p4r),e(an,u4r),e($r,_4r),e($r,ye),e(ye,gM),e(gM,h4e),e(h4e,b4r),e(gM,v4r),e(gM,EH),e(EH,F4r),e(gM,T4r),e(ye,M4r),e(ye,hM),e(hM,p4e),e(p4e,E4r),e(hM,C4r),e(hM,CH),e(CH,w4r),e(hM,A4r),e(ye,y4r),e(ye,pM),e(pM,u4e),e(u4e,L4r),e(pM,x4r),e(pM,wH),e(wH,$4r),e(pM,k4r),e(ye,S4r),e(ye,uM),e(uM,_4e),e(_4e,R4r),e(uM,P4r),e(uM,AH),e(AH,B4r),e(uM,I4r),e(ye,q4r),e(ye,_M),e(_M,b4e),e(b4e,N4r),e(_M,j4r),e(_M,yH),e(yH,D4r),e(_M,G4r),e(ye,O4r),e(ye,bM),e(bM,v4e),e(v4e,V4r),e(bM,X4r),e(bM,LH),e(LH,z4r),e(bM,W4r),e(ye,Q4r),e(ye,vM),e(vM,F4e),e(F4e,H4r),e(vM,U4r),e(vM,xH),e(xH,J4r),e(vM,Y4r),e(ye,K4r),e(ye,FM),e(FM,T4e),e(T4e,Z4r),e(FM,evr),e(FM,$H),e($H,ovr),e(FM,rvr),e(ye,tvr),e(ye,TM),e(TM,M4e),e(M4e,avr),e(TM,nvr),e(TM,kH),e(kH,svr),e(TM,lvr),e(ye,ivr),e(ye,MM),e(MM,E4e),e(E4e,dvr),e(MM,cvr),e(MM,SH),e(SH,fvr),e(MM,mvr),e($r,gvr),M(EM,$r,null),b(f,vje,_),b(f,nc,_),e(nc,CM),e(CM,C4e),M(jL,C4e,null),e(nc,hvr),e(nc,w4e),e(w4e,pvr),b(f,Fje,_),b(f,tr,_),M(DL,tr,null),e(tr,uvr),e(tr,sc),e(sc,_vr),e(sc,RH),e(RH,bvr),e(sc,vvr),e(sc,PH),e(PH,Fvr),e(sc,Tvr),e(tr,Mvr),e(tr,GL),e(GL,Evr),e(GL,A4e),e(A4e,Cvr),e(GL,wvr),e(tr,Avr),e(tr,Rt),M(OL,Rt,null),e(Rt,yvr),e(Rt,y4e),e(y4e,Lvr),e(Rt,xvr),e(Rt,lc),e(lc,$vr),e(lc,L4e),e(L4e,kvr),e(lc,Svr),e(lc,BH),e(BH,Rvr),e(lc,Pvr),e(Rt,Bvr),M(wM,Rt,null),e(tr,Ivr),e(tr,kr),M(VL,kr,null),e(kr,qvr),e(kr,x4e),e(x4e,Nvr),e(kr,jvr),e(kr,nn),e(nn,Dvr),e(nn,$4e),e($4e,Gvr),e(nn,Ovr),e(nn,k4e),e(k4e,Vvr),e(nn,Xvr),e(nn,S4e),e(S4e,zvr),e(nn,Wvr),e(kr,Qvr),e(kr,oe),e(oe,AM),e(AM,R4e),e(R4e,Hvr),e(AM,Uvr),e(AM,IH),e(IH,Jvr),e(AM,Yvr),e(oe,Kvr),e(oe,yM),e(yM,P4e),e(P4e,Zvr),e(yM,eFr),e(yM,qH),e(qH,oFr),e(yM,rFr),e(oe,tFr),e(oe,LM),e(LM,B4e),e(B4e,aFr),e(LM,nFr),e(LM,NH),e(NH,sFr),e(LM,lFr),e(oe,iFr),e(oe,xM),e(xM,I4e),e(I4e,dFr),e(xM,cFr),e(xM,jH),e(jH,fFr),e(xM,mFr),e(oe,gFr),e(oe,$M),e($M,q4e),e(q4e,hFr),e($M,pFr),e($M,DH),e(DH,uFr),e($M,_Fr),e(oe,bFr),e(oe,kM),e(kM,N4e),e(N4e,vFr),e(kM,FFr),e(kM,GH),e(GH,TFr),e(kM,MFr),e(oe,EFr),e(oe,SM),e(SM,j4e),e(j4e,CFr),e(SM,wFr),e(SM,OH),e(OH,AFr),e(SM,yFr),e(oe,LFr),e(oe,RM),e(RM,D4e),e(D4e,xFr),e(RM,$Fr),e(RM,VH),e(VH,kFr),e(RM,SFr),e(oe,RFr),e(oe,PM),e(PM,G4e),e(G4e,PFr),e(PM,BFr),e(PM,XH),e(XH,IFr),e(PM,qFr),e(oe,NFr),e(oe,BM),e(BM,O4e),e(O4e,jFr),e(BM,DFr),e(BM,zH),e(zH,GFr),e(BM,OFr),e(oe,VFr),e(oe,IM),e(IM,V4e),e(V4e,XFr),e(IM,zFr),e(IM,WH),e(WH,WFr),e(IM,QFr),e(oe,HFr),e(oe,qM),e(qM,X4e),e(X4e,UFr),e(qM,JFr),e(qM,QH),e(QH,YFr),e(qM,KFr),e(oe,ZFr),e(oe,NM),e(NM,z4e),e(z4e,eTr),e(NM,oTr),e(NM,HH),e(HH,rTr),e(NM,tTr),e(oe,aTr),e(oe,jM),e(jM,W4e),e(W4e,nTr),e(jM,sTr),e(jM,UH),e(UH,lTr),e(jM,iTr),e(oe,dTr),e(oe,DM),e(DM,Q4e),e(Q4e,cTr),e(DM,fTr),e(DM,JH),e(JH,mTr),e(DM,gTr),e(oe,hTr),e(oe,GM),e(GM,H4e),e(H4e,pTr),e(GM,uTr),e(GM,YH),e(YH,_Tr),e(GM,bTr),e(oe,vTr),e(oe,OM),e(OM,U4e),e(U4e,FTr),e(OM,TTr),e(OM,KH),e(KH,MTr),e(OM,ETr),e(oe,CTr),e(oe,VM),e(VM,J4e),e(J4e,wTr),e(VM,ATr),e(VM,ZH),e(ZH,yTr),e(VM,LTr),e(oe,xTr),e(oe,XM),e(XM,Y4e),e(Y4e,$Tr),e(XM,kTr),e(XM,eU),e(eU,STr),e(XM,RTr),e(oe,PTr),e(oe,zM),e(zM,K4e),e(K4e,BTr),e(zM,ITr),e(zM,oU),e(oU,qTr),e(zM,NTr),e(oe,jTr),e(oe,WM),e(WM,Z4e),e(Z4e,DTr),e(WM,GTr),e(WM,rU),e(rU,OTr),e(WM,VTr),e(oe,XTr),e(oe,QM),e(QM,eve),e(eve,zTr),e(QM,WTr),e(QM,tU),e(tU,QTr),e(QM,HTr),e(oe,UTr),e(oe,HM),e(HM,ove),e(ove,JTr),e(HM,YTr),e(HM,aU),e(aU,KTr),e(HM,ZTr),e(oe,e7r),e(oe,UM),e(UM,rve),e(rve,o7r),e(UM,r7r),e(UM,nU),e(nU,t7r),e(UM,a7r),e(oe,n7r),e(oe,JM),e(JM,tve),e(tve,s7r),e(JM,l7r),e(JM,sU),e(sU,i7r),e(JM,d7r),e(oe,c7r),e(oe,YM),e(YM,ave),e(ave,f7r),e(YM,m7r),e(YM,lU),e(lU,g7r),e(YM,h7r),e(kr,p7r),M(KM,kr,null),b(f,Tje,_),b(f,ic,_),e(ic,ZM),e(ZM,nve),M(XL,nve,null),e(ic,u7r),e(ic,sve),e(sve,_7r),b(f,Mje,_),b(f,ar,_),M(zL,ar,null),e(ar,b7r),e(ar,dc),e(dc,v7r),e(dc,iU),e(iU,F7r),e(dc,T7r),e(dc,dU),e(dU,M7r),e(dc,E7r),e(ar,C7r),e(ar,WL),e(WL,w7r),e(WL,lve),e(lve,A7r),e(WL,y7r),e(ar,L7r),e(ar,Pt),M(QL,Pt,null),e(Pt,x7r),e(Pt,ive),e(ive,$7r),e(Pt,k7r),e(Pt,cc),e(cc,S7r),e(cc,dve),e(dve,R7r),e(cc,P7r),e(cc,cU),e(cU,B7r),e(cc,I7r),e(Pt,q7r),M(eE,Pt,null),e(ar,N7r),e(ar,Sr),M(HL,Sr,null),e(Sr,j7r),e(Sr,cve),e(cve,D7r),e(Sr,G7r),e(Sr,sn),e(sn,O7r),e(sn,fve),e(fve,V7r),e(sn,X7r),e(sn,mve),e(mve,z7r),e(sn,W7r),e(sn,gve),e(gve,Q7r),e(sn,H7r),e(Sr,U7r),e(Sr,pe),e(pe,oE),e(oE,hve),e(hve,J7r),e(oE,Y7r),e(oE,fU),e(fU,K7r),e(oE,Z7r),e(pe,eMr),e(pe,rE),e(rE,pve),e(pve,oMr),e(rE,rMr),e(rE,mU),e(mU,tMr),e(rE,aMr),e(pe,nMr),e(pe,tE),e(tE,uve),e(uve,sMr),e(tE,lMr),e(tE,gU),e(gU,iMr),e(tE,dMr),e(pe,cMr),e(pe,aE),e(aE,_ve),e(_ve,fMr),e(aE,mMr),e(aE,hU),e(hU,gMr),e(aE,hMr),e(pe,pMr),e(pe,nE),e(nE,bve),e(bve,uMr),e(nE,_Mr),e(nE,pU),e(pU,bMr),e(nE,vMr),e(pe,FMr),e(pe,sE),e(sE,vve),e(vve,TMr),e(sE,MMr),e(sE,uU),e(uU,EMr),e(sE,CMr),e(pe,wMr),e(pe,lE),e(lE,Fve),e(Fve,AMr),e(lE,yMr),e(lE,_U),e(_U,LMr),e(lE,xMr),e(pe,$Mr),e(pe,iE),e(iE,Tve),e(Tve,kMr),e(iE,SMr),e(iE,bU),e(bU,RMr),e(iE,PMr),e(pe,BMr),e(pe,dE),e(dE,Mve),e(Mve,IMr),e(dE,qMr),e(dE,vU),e(vU,NMr),e(dE,jMr),e(pe,DMr),e(pe,cE),e(cE,Eve),e(Eve,GMr),e(cE,OMr),e(cE,FU),e(FU,VMr),e(cE,XMr),e(pe,zMr),e(pe,fE),e(fE,Cve),e(Cve,WMr),e(fE,QMr),e(fE,TU),e(TU,HMr),e(fE,UMr),e(pe,JMr),e(pe,mE),e(mE,wve),e(wve,YMr),e(mE,KMr),e(mE,MU),e(MU,ZMr),e(mE,eEr),e(pe,oEr),e(pe,gE),e(gE,Ave),e(Ave,rEr),e(gE,tEr),e(gE,EU),e(EU,aEr),e(gE,nEr),e(pe,sEr),e(pe,hE),e(hE,yve),e(yve,lEr),e(hE,iEr),e(hE,CU),e(CU,dEr),e(hE,cEr),e(pe,fEr),e(pe,pE),e(pE,Lve),e(Lve,mEr),e(pE,gEr),e(pE,wU),e(wU,hEr),e(pE,pEr),e(pe,uEr),e(pe,uE),e(uE,xve),e(xve,_Er),e(uE,bEr),e(uE,AU),e(AU,vEr),e(uE,FEr),e(pe,TEr),e(pe,_E),e(_E,$ve),e($ve,MEr),e(_E,EEr),e(_E,yU),e(yU,CEr),e(_E,wEr),e(Sr,AEr),M(bE,Sr,null),b(f,Eje,_),b(f,fc,_),e(fc,vE),e(vE,kve),M(UL,kve,null),e(fc,yEr),e(fc,Sve),e(Sve,LEr),b(f,Cje,_),b(f,nr,_),M(JL,nr,null),e(nr,xEr),e(nr,mc),e(mc,$Er),e(mc,LU),e(LU,kEr),e(mc,SEr),e(mc,xU),e(xU,REr),e(mc,PEr),e(nr,BEr),e(nr,YL),e(YL,IEr),e(YL,Rve),e(Rve,qEr),e(YL,NEr),e(nr,jEr),e(nr,Bt),M(KL,Bt,null),e(Bt,DEr),e(Bt,Pve),e(Pve,GEr),e(Bt,OEr),e(Bt,gc),e(gc,VEr),e(gc,Bve),e(Bve,XEr),e(gc,zEr),e(gc,$U),e($U,WEr),e(gc,QEr),e(Bt,HEr),M(FE,Bt,null),e(nr,UEr),e(nr,Rr),M(ZL,Rr,null),e(Rr,JEr),e(Rr,Ive),e(Ive,YEr),e(Rr,KEr),e(Rr,ln),e(ln,ZEr),e(ln,qve),e(qve,eCr),e(ln,oCr),e(ln,Nve),e(Nve,rCr),e(ln,tCr),e(ln,jve),e(jve,aCr),e(ln,nCr),e(Rr,sCr),e(Rr,e8),e(e8,TE),e(TE,Dve),e(Dve,lCr),e(TE,iCr),e(TE,kU),e(kU,dCr),e(TE,cCr),e(e8,fCr),e(e8,ME),e(ME,Gve),e(Gve,mCr),e(ME,gCr),e(ME,SU),e(SU,hCr),e(ME,pCr),e(Rr,uCr),M(EE,Rr,null),b(f,wje,_),b(f,hc,_),e(hc,CE),e(CE,Ove),M(o8,Ove,null),e(hc,_Cr),e(hc,Vve),e(Vve,bCr),b(f,Aje,_),b(f,sr,_),M(r8,sr,null),e(sr,vCr),e(sr,pc),e(pc,FCr),e(pc,RU),e(RU,TCr),e(pc,MCr),e(pc,PU),e(PU,ECr),e(pc,CCr),e(sr,wCr),e(sr,t8),e(t8,ACr),e(t8,Xve),e(Xve,yCr),e(t8,LCr),e(sr,xCr),e(sr,It),M(a8,It,null),e(It,$Cr),e(It,zve),e(zve,kCr),e(It,SCr),e(It,uc),e(uc,RCr),e(uc,Wve),e(Wve,PCr),e(uc,BCr),e(uc,BU),e(BU,ICr),e(uc,qCr),e(It,NCr),M(wE,It,null),e(sr,jCr),e(sr,Pr),M(n8,Pr,null),e(Pr,DCr),e(Pr,Qve),e(Qve,GCr),e(Pr,OCr),e(Pr,dn),e(dn,VCr),e(dn,Hve),e(Hve,XCr),e(dn,zCr),e(dn,Uve),e(Uve,WCr),e(dn,QCr),e(dn,Jve),e(Jve,HCr),e(dn,UCr),e(Pr,JCr),e(Pr,Yve),e(Yve,AE),e(AE,Kve),e(Kve,YCr),e(AE,KCr),e(AE,IU),e(IU,ZCr),e(AE,e5r),e(Pr,o5r),M(yE,Pr,null),b(f,yje,_),b(f,_c,_),e(_c,LE),e(LE,Zve),M(s8,Zve,null),e(_c,r5r),e(_c,eFe),e(eFe,t5r),b(f,Lje,_),b(f,lr,_),M(l8,lr,null),e(lr,a5r),e(lr,bc),e(bc,n5r),e(bc,qU),e(qU,s5r),e(bc,l5r),e(bc,NU),e(NU,i5r),e(bc,d5r),e(lr,c5r),e(lr,i8),e(i8,f5r),e(i8,oFe),e(oFe,m5r),e(i8,g5r),e(lr,h5r),e(lr,qt),M(d8,qt,null),e(qt,p5r),e(qt,rFe),e(rFe,u5r),e(qt,_5r),e(qt,vc),e(vc,b5r),e(vc,tFe),e(tFe,v5r),e(vc,F5r),e(vc,jU),e(jU,T5r),e(vc,M5r),e(qt,E5r),M(xE,qt,null),e(lr,C5r),e(lr,Br),M(c8,Br,null),e(Br,w5r),e(Br,aFe),e(aFe,A5r),e(Br,y5r),e(Br,cn),e(cn,L5r),e(cn,nFe),e(nFe,x5r),e(cn,$5r),e(cn,sFe),e(sFe,k5r),e(cn,S5r),e(cn,lFe),e(lFe,R5r),e(cn,P5r),e(Br,B5r),e(Br,de),e(de,$E),e($E,iFe),e(iFe,I5r),e($E,q5r),e($E,DU),e(DU,N5r),e($E,j5r),e(de,D5r),e(de,kE),e(kE,dFe),e(dFe,G5r),e(kE,O5r),e(kE,GU),e(GU,V5r),e(kE,X5r),e(de,z5r),e(de,SE),e(SE,cFe),e(cFe,W5r),e(SE,Q5r),e(SE,OU),e(OU,H5r),e(SE,U5r),e(de,J5r),e(de,RE),e(RE,fFe),e(fFe,Y5r),e(RE,K5r),e(RE,VU),e(VU,Z5r),e(RE,e3r),e(de,o3r),e(de,PE),e(PE,mFe),e(mFe,r3r),e(PE,t3r),e(PE,XU),e(XU,a3r),e(PE,n3r),e(de,s3r),e(de,BE),e(BE,gFe),e(gFe,l3r),e(BE,i3r),e(BE,zU),e(zU,d3r),e(BE,c3r),e(de,f3r),e(de,IE),e(IE,hFe),e(hFe,m3r),e(IE,g3r),e(IE,WU),e(WU,h3r),e(IE,p3r),e(de,u3r),e(de,qE),e(qE,pFe),e(pFe,_3r),e(qE,b3r),e(qE,QU),e(QU,v3r),e(qE,F3r),e(de,T3r),e(de,NE),e(NE,uFe),e(uFe,M3r),e(NE,E3r),e(NE,HU),e(HU,C3r),e(NE,w3r),e(de,A3r),e(de,jE),e(jE,_Fe),e(_Fe,y3r),e(jE,L3r),e(jE,UU),e(UU,x3r),e(jE,$3r),e(de,k3r),e(de,DE),e(DE,bFe),e(bFe,S3r),e(DE,R3r),e(DE,JU),e(JU,P3r),e(DE,B3r),e(de,I3r),e(de,GE),e(GE,vFe),e(vFe,q3r),e(GE,N3r),e(GE,YU),e(YU,j3r),e(GE,D3r),e(de,G3r),e(de,OE),e(OE,FFe),e(FFe,O3r),e(OE,V3r),e(OE,KU),e(KU,X3r),e(OE,z3r),e(de,W3r),e(de,VE),e(VE,TFe),e(TFe,Q3r),e(VE,H3r),e(VE,ZU),e(ZU,U3r),e(VE,J3r),e(de,Y3r),e(de,XE),e(XE,MFe),e(MFe,K3r),e(XE,Z3r),e(XE,eJ),e(eJ,ewr),e(XE,owr),e(de,rwr),e(de,zE),e(zE,EFe),e(EFe,twr),e(zE,awr),e(zE,oJ),e(oJ,nwr),e(zE,swr),e(de,lwr),e(de,WE),e(WE,CFe),e(CFe,iwr),e(WE,dwr),e(WE,rJ),e(rJ,cwr),e(WE,fwr),e(de,mwr),e(de,QE),e(QE,wFe),e(wFe,gwr),e(QE,hwr),e(QE,tJ),e(tJ,pwr),e(QE,uwr),e(de,_wr),e(de,HE),e(HE,AFe),e(AFe,bwr),e(HE,vwr),e(HE,aJ),e(aJ,Fwr),e(HE,Twr),e(de,Mwr),e(de,UE),e(UE,yFe),e(yFe,Ewr),e(UE,Cwr),e(UE,nJ),e(nJ,wwr),e(UE,Awr),e(Br,ywr),M(JE,Br,null),b(f,xje,_),b(f,Fc,_),e(Fc,YE),e(YE,LFe),M(f8,LFe,null),e(Fc,Lwr),e(Fc,xFe),e(xFe,xwr),b(f,$je,_),b(f,ir,_),M(m8,ir,null),e(ir,$wr),e(ir,Tc),e(Tc,kwr),e(Tc,sJ),e(sJ,Swr),e(Tc,Rwr),e(Tc,lJ),e(lJ,Pwr),e(Tc,Bwr),e(ir,Iwr),e(ir,g8),e(g8,qwr),e(g8,$Fe),e($Fe,Nwr),e(g8,jwr),e(ir,Dwr),e(ir,Nt),M(h8,Nt,null),e(Nt,Gwr),e(Nt,kFe),e(kFe,Owr),e(Nt,Vwr),e(Nt,Mc),e(Mc,Xwr),e(Mc,SFe),e(SFe,zwr),e(Mc,Wwr),e(Mc,iJ),e(iJ,Qwr),e(Mc,Hwr),e(Nt,Uwr),M(KE,Nt,null),e(ir,Jwr),e(ir,Ir),M(p8,Ir,null),e(Ir,Ywr),e(Ir,RFe),e(RFe,Kwr),e(Ir,Zwr),e(Ir,fn),e(fn,e0r),e(fn,PFe),e(PFe,o0r),e(fn,r0r),e(fn,BFe),e(BFe,t0r),e(fn,a0r),e(fn,IFe),e(IFe,n0r),e(fn,s0r),e(Ir,l0r),e(Ir,ce),e(ce,ZE),e(ZE,qFe),e(qFe,i0r),e(ZE,d0r),e(ZE,dJ),e(dJ,c0r),e(ZE,f0r),e(ce,m0r),e(ce,eC),e(eC,NFe),e(NFe,g0r),e(eC,h0r),e(eC,cJ),e(cJ,p0r),e(eC,u0r),e(ce,_0r),e(ce,oC),e(oC,jFe),e(jFe,b0r),e(oC,v0r),e(oC,fJ),e(fJ,F0r),e(oC,T0r),e(ce,M0r),e(ce,rC),e(rC,DFe),e(DFe,E0r),e(rC,C0r),e(rC,mJ),e(mJ,w0r),e(rC,A0r),e(ce,y0r),e(ce,tC),e(tC,GFe),e(GFe,L0r),e(tC,x0r),e(tC,gJ),e(gJ,$0r),e(tC,k0r),e(ce,S0r),e(ce,aC),e(aC,OFe),e(OFe,R0r),e(aC,P0r),e(aC,hJ),e(hJ,B0r),e(aC,I0r),e(ce,q0r),e(ce,nC),e(nC,VFe),e(VFe,N0r),e(nC,j0r),e(nC,pJ),e(pJ,D0r),e(nC,G0r),e(ce,O0r),e(ce,sC),e(sC,XFe),e(XFe,V0r),e(sC,X0r),e(sC,uJ),e(uJ,z0r),e(sC,W0r),e(ce,Q0r),e(ce,lC),e(lC,zFe),e(zFe,H0r),e(lC,U0r),e(lC,_J),e(_J,J0r),e(lC,Y0r),e(ce,K0r),e(ce,iC),e(iC,WFe),e(WFe,Z0r),e(iC,e6r),e(iC,bJ),e(bJ,o6r),e(iC,r6r),e(ce,t6r),e(ce,dC),e(dC,QFe),e(QFe,a6r),e(dC,n6r),e(dC,vJ),e(vJ,s6r),e(dC,l6r),e(ce,i6r),e(ce,cC),e(cC,HFe),e(HFe,d6r),e(cC,c6r),e(cC,FJ),e(FJ,f6r),e(cC,m6r),e(ce,g6r),e(ce,fC),e(fC,UFe),e(UFe,h6r),e(fC,p6r),e(fC,TJ),e(TJ,u6r),e(fC,_6r),e(ce,b6r),e(ce,mC),e(mC,JFe),e(JFe,v6r),e(mC,F6r),e(mC,MJ),e(MJ,T6r),e(mC,M6r),e(ce,E6r),e(ce,gC),e(gC,YFe),e(YFe,C6r),e(gC,w6r),e(gC,EJ),e(EJ,A6r),e(gC,y6r),e(ce,L6r),e(ce,hC),e(hC,KFe),e(KFe,x6r),e(hC,$6r),e(hC,CJ),e(CJ,k6r),e(hC,S6r),e(ce,R6r),e(ce,pC),e(pC,ZFe),e(ZFe,P6r),e(pC,B6r),e(pC,wJ),e(wJ,I6r),e(pC,q6r),e(ce,N6r),e(ce,uC),e(uC,eTe),e(eTe,j6r),e(uC,D6r),e(uC,AJ),e(AJ,G6r),e(uC,O6r),e(ce,V6r),e(ce,_C),e(_C,oTe),e(oTe,X6r),e(_C,z6r),e(_C,yJ),e(yJ,W6r),e(_C,Q6r),e(ce,H6r),e(ce,bC),e(bC,rTe),e(rTe,U6r),e(bC,J6r),e(bC,LJ),e(LJ,Y6r),e(bC,K6r),e(Ir,Z6r),M(vC,Ir,null),b(f,kje,_),b(f,Ec,_),e(Ec,FC),e(FC,tTe),M(u8,tTe,null),e(Ec,eAr),e(Ec,aTe),e(aTe,oAr),b(f,Sje,_),b(f,dr,_),M(_8,dr,null),e(dr,rAr),e(dr,Cc),e(Cc,tAr),e(Cc,xJ),e(xJ,aAr),e(Cc,nAr),e(Cc,$J),e($J,sAr),e(Cc,lAr),e(dr,iAr),e(dr,b8),e(b8,dAr),e(b8,nTe),e(nTe,cAr),e(b8,fAr),e(dr,mAr),e(dr,jt),M(v8,jt,null),e(jt,gAr),e(jt,sTe),e(sTe,hAr),e(jt,pAr),e(jt,wc),e(wc,uAr),e(wc,lTe),e(lTe,_Ar),e(wc,bAr),e(wc,kJ),e(kJ,vAr),e(wc,FAr),e(jt,TAr),M(TC,jt,null),e(dr,MAr),e(dr,qr),M(F8,qr,null),e(qr,EAr),e(qr,iTe),e(iTe,CAr),e(qr,wAr),e(qr,mn),e(mn,AAr),e(mn,dTe),e(dTe,yAr),e(mn,LAr),e(mn,cTe),e(cTe,xAr),e(mn,$Ar),e(mn,fTe),e(fTe,kAr),e(mn,SAr),e(qr,RAr),e(qr,mTe),e(mTe,MC),e(MC,gTe),e(gTe,PAr),e(MC,BAr),e(MC,SJ),e(SJ,IAr),e(MC,qAr),e(qr,NAr),M(EC,qr,null),b(f,Rje,_),b(f,Ac,_),e(Ac,CC),e(CC,hTe),M(T8,hTe,null),e(Ac,jAr),e(Ac,pTe),e(pTe,DAr),b(f,Pje,_),b(f,cr,_),M(M8,cr,null),e(cr,GAr),e(cr,yc),e(yc,OAr),e(yc,RJ),e(RJ,VAr),e(yc,XAr),e(yc,PJ),e(PJ,zAr),e(yc,WAr),e(cr,QAr),e(cr,E8),e(E8,HAr),e(E8,uTe),e(uTe,UAr),e(E8,JAr),e(cr,YAr),e(cr,Dt),M(C8,Dt,null),e(Dt,KAr),e(Dt,_Te),e(_Te,ZAr),e(Dt,eyr),e(Dt,Lc),e(Lc,oyr),e(Lc,bTe),e(bTe,ryr),e(Lc,tyr),e(Lc,BJ),e(BJ,ayr),e(Lc,nyr),e(Dt,syr),M(wC,Dt,null),e(cr,lyr),e(cr,Nr),M(w8,Nr,null),e(Nr,iyr),e(Nr,vTe),e(vTe,dyr),e(Nr,cyr),e(Nr,gn),e(gn,fyr),e(gn,FTe),e(FTe,myr),e(gn,gyr),e(gn,TTe),e(TTe,hyr),e(gn,pyr),e(gn,MTe),e(MTe,uyr),e(gn,_yr),e(Nr,byr),e(Nr,ETe),e(ETe,AC),e(AC,CTe),e(CTe,vyr),e(AC,Fyr),e(AC,IJ),e(IJ,Tyr),e(AC,Myr),e(Nr,Eyr),M(yC,Nr,null),b(f,Bje,_),b(f,xc,_),e(xc,LC),e(LC,wTe),M(A8,wTe,null),e(xc,Cyr),e(xc,ATe),e(ATe,wyr),b(f,Ije,_),b(f,fr,_),M(y8,fr,null),e(fr,Ayr),e(fr,$c),e($c,yyr),e($c,qJ),e(qJ,Lyr),e($c,xyr),e($c,NJ),e(NJ,$yr),e($c,kyr),e(fr,Syr),e(fr,L8),e(L8,Ryr),e(L8,yTe),e(yTe,Pyr),e(L8,Byr),e(fr,Iyr),e(fr,Gt),M(x8,Gt,null),e(Gt,qyr),e(Gt,LTe),e(LTe,Nyr),e(Gt,jyr),e(Gt,kc),e(kc,Dyr),e(kc,xTe),e(xTe,Gyr),e(kc,Oyr),e(kc,jJ),e(jJ,Vyr),e(kc,Xyr),e(Gt,zyr),M(xC,Gt,null),e(fr,Wyr),e(fr,jr),M($8,jr,null),e(jr,Qyr),e(jr,$Te),e($Te,Hyr),e(jr,Uyr),e(jr,hn),e(hn,Jyr),e(hn,kTe),e(kTe,Yyr),e(hn,Kyr),e(hn,STe),e(STe,Zyr),e(hn,eLr),e(hn,RTe),e(RTe,oLr),e(hn,rLr),e(jr,tLr),e(jr,te),e(te,$C),e($C,PTe),e(PTe,aLr),e($C,nLr),e($C,DJ),e(DJ,sLr),e($C,lLr),e(te,iLr),e(te,kC),e(kC,BTe),e(BTe,dLr),e(kC,cLr),e(kC,GJ),e(GJ,fLr),e(kC,mLr),e(te,gLr),e(te,SC),e(SC,ITe),e(ITe,hLr),e(SC,pLr),e(SC,OJ),e(OJ,uLr),e(SC,_Lr),e(te,bLr),e(te,RC),e(RC,qTe),e(qTe,vLr),e(RC,FLr),e(RC,VJ),e(VJ,TLr),e(RC,MLr),e(te,ELr),e(te,PC),e(PC,NTe),e(NTe,CLr),e(PC,wLr),e(PC,XJ),e(XJ,ALr),e(PC,yLr),e(te,LLr),e(te,BC),e(BC,jTe),e(jTe,xLr),e(BC,$Lr),e(BC,zJ),e(zJ,kLr),e(BC,SLr),e(te,RLr),e(te,IC),e(IC,DTe),e(DTe,PLr),e(IC,BLr),e(IC,WJ),e(WJ,ILr),e(IC,qLr),e(te,NLr),e(te,qC),e(qC,GTe),e(GTe,jLr),e(qC,DLr),e(qC,QJ),e(QJ,GLr),e(qC,OLr),e(te,VLr),e(te,NC),e(NC,OTe),e(OTe,XLr),e(NC,zLr),e(NC,HJ),e(HJ,WLr),e(NC,QLr),e(te,HLr),e(te,jC),e(jC,VTe),e(VTe,ULr),e(jC,JLr),e(jC,UJ),e(UJ,YLr),e(jC,KLr),e(te,ZLr),e(te,DC),e(DC,XTe),e(XTe,e8r),e(DC,o8r),e(DC,JJ),e(JJ,r8r),e(DC,t8r),e(te,a8r),e(te,GC),e(GC,zTe),e(zTe,n8r),e(GC,s8r),e(GC,YJ),e(YJ,l8r),e(GC,i8r),e(te,d8r),e(te,OC),e(OC,WTe),e(WTe,c8r),e(OC,f8r),e(OC,KJ),e(KJ,m8r),e(OC,g8r),e(te,h8r),e(te,VC),e(VC,QTe),e(QTe,p8r),e(VC,u8r),e(VC,ZJ),e(ZJ,_8r),e(VC,b8r),e(te,v8r),e(te,XC),e(XC,HTe),e(HTe,F8r),e(XC,T8r),e(XC,eY),e(eY,M8r),e(XC,E8r),e(te,C8r),e(te,zC),e(zC,UTe),e(UTe,w8r),e(zC,A8r),e(zC,oY),e(oY,y8r),e(zC,L8r),e(te,x8r),e(te,WC),e(WC,JTe),e(JTe,$8r),e(WC,k8r),e(WC,rY),e(rY,S8r),e(WC,R8r),e(te,P8r),e(te,QC),e(QC,YTe),e(YTe,B8r),e(QC,I8r),e(QC,tY),e(tY,q8r),e(QC,N8r),e(te,j8r),e(te,HC),e(HC,KTe),e(KTe,D8r),e(HC,G8r),e(HC,aY),e(aY,O8r),e(HC,V8r),e(te,X8r),e(te,UC),e(UC,ZTe),e(ZTe,z8r),e(UC,W8r),e(UC,nY),e(nY,Q8r),e(UC,H8r),e(te,U8r),e(te,JC),e(JC,e7e),e(e7e,J8r),e(JC,Y8r),e(JC,sY),e(sY,K8r),e(JC,Z8r),e(te,exr),e(te,YC),e(YC,o7e),e(o7e,oxr),e(YC,rxr),e(YC,lY),e(lY,txr),e(YC,axr),e(te,nxr),e(te,KC),e(KC,r7e),e(r7e,sxr),e(KC,lxr),e(KC,iY),e(iY,ixr),e(KC,dxr),e(te,cxr),e(te,ZC),e(ZC,t7e),e(t7e,fxr),e(ZC,mxr),e(ZC,dY),e(dY,gxr),e(ZC,hxr),e(te,pxr),e(te,e5),e(e5,a7e),e(a7e,uxr),e(e5,_xr),e(e5,cY),e(cY,bxr),e(e5,vxr),e(jr,Fxr),M(o5,jr,null),b(f,qje,_),b(f,Sc,_),e(Sc,r5),e(r5,n7e),M(k8,n7e,null),e(Sc,Txr),e(Sc,s7e),e(s7e,Mxr),b(f,Nje,_),b(f,mr,_),M(S8,mr,null),e(mr,Exr),e(mr,Rc),e(Rc,Cxr),e(Rc,fY),e(fY,wxr),e(Rc,Axr),e(Rc,mY),e(mY,yxr),e(Rc,Lxr),e(mr,xxr),e(mr,R8),e(R8,$xr),e(R8,l7e),e(l7e,kxr),e(R8,Sxr),e(mr,Rxr),e(mr,Ot),M(P8,Ot,null),e(Ot,Pxr),e(Ot,i7e),e(i7e,Bxr),e(Ot,Ixr),e(Ot,Pc),e(Pc,qxr),e(Pc,d7e),e(d7e,Nxr),e(Pc,jxr),e(Pc,gY),e(gY,Dxr),e(Pc,Gxr),e(Ot,Oxr),M(t5,Ot,null),e(mr,Vxr),e(mr,Dr),M(B8,Dr,null),e(Dr,Xxr),e(Dr,c7e),e(c7e,zxr),e(Dr,Wxr),e(Dr,pn),e(pn,Qxr),e(pn,f7e),e(f7e,Hxr),e(pn,Uxr),e(pn,m7e),e(m7e,Jxr),e(pn,Yxr),e(pn,g7e),e(g7e,Kxr),e(pn,Zxr),e(Dr,e$r),e(Dr,Re),e(Re,a5),e(a5,h7e),e(h7e,o$r),e(a5,r$r),e(a5,hY),e(hY,t$r),e(a5,a$r),e(Re,n$r),e(Re,n5),e(n5,p7e),e(p7e,s$r),e(n5,l$r),e(n5,pY),e(pY,i$r),e(n5,d$r),e(Re,c$r),e(Re,s5),e(s5,u7e),e(u7e,f$r),e(s5,m$r),e(s5,uY),e(uY,g$r),e(s5,h$r),e(Re,p$r),e(Re,l5),e(l5,_7e),e(_7e,u$r),e(l5,_$r),e(l5,_Y),e(_Y,b$r),e(l5,v$r),e(Re,F$r),e(Re,i5),e(i5,b7e),e(b7e,T$r),e(i5,M$r),e(i5,bY),e(bY,E$r),e(i5,C$r),e(Re,w$r),e(Re,d5),e(d5,v7e),e(v7e,A$r),e(d5,y$r),e(d5,vY),e(vY,L$r),e(d5,x$r),e(Re,$$r),e(Re,c5),e(c5,F7e),e(F7e,k$r),e(c5,S$r),e(c5,FY),e(FY,R$r),e(c5,P$r),e(Re,B$r),e(Re,f5),e(f5,T7e),e(T7e,I$r),e(f5,q$r),e(f5,TY),e(TY,N$r),e(f5,j$r),e(Re,D$r),e(Re,m5),e(m5,M7e),e(M7e,G$r),e(m5,O$r),e(m5,MY),e(MY,V$r),e(m5,X$r),e(Dr,z$r),M(g5,Dr,null),b(f,jje,_),b(f,Bc,_),e(Bc,h5),e(h5,E7e),M(I8,E7e,null),e(Bc,W$r),e(Bc,C7e),e(C7e,Q$r),b(f,Dje,_),b(f,gr,_),M(q8,gr,null),e(gr,H$r),e(gr,Ic),e(Ic,U$r),e(Ic,EY),e(EY,J$r),e(Ic,Y$r),e(Ic,CY),e(CY,K$r),e(Ic,Z$r),e(gr,ekr),e(gr,N8),e(N8,okr),e(N8,w7e),e(w7e,rkr),e(N8,tkr),e(gr,akr),e(gr,Vt),M(j8,Vt,null),e(Vt,nkr),e(Vt,A7e),e(A7e,skr),e(Vt,lkr),e(Vt,qc),e(qc,ikr),e(qc,y7e),e(y7e,dkr),e(qc,ckr),e(qc,wY),e(wY,fkr),e(qc,mkr),e(Vt,gkr),M(p5,Vt,null),e(gr,hkr),e(gr,Gr),M(D8,Gr,null),e(Gr,pkr),e(Gr,L7e),e(L7e,ukr),e(Gr,_kr),e(Gr,un),e(un,bkr),e(un,x7e),e(x7e,vkr),e(un,Fkr),e(un,$7e),e($7e,Tkr),e(un,Mkr),e(un,k7e),e(k7e,Ekr),e(un,Ckr),e(Gr,wkr),e(Gr,Ee),e(Ee,u5),e(u5,S7e),e(S7e,Akr),e(u5,ykr),e(u5,AY),e(AY,Lkr),e(u5,xkr),e(Ee,$kr),e(Ee,_5),e(_5,R7e),e(R7e,kkr),e(_5,Skr),e(_5,yY),e(yY,Rkr),e(_5,Pkr),e(Ee,Bkr),e(Ee,b5),e(b5,P7e),e(P7e,Ikr),e(b5,qkr),e(b5,LY),e(LY,Nkr),e(b5,jkr),e(Ee,Dkr),e(Ee,v5),e(v5,B7e),e(B7e,Gkr),e(v5,Okr),e(v5,xY),e(xY,Vkr),e(v5,Xkr),e(Ee,zkr),e(Ee,F5),e(F5,I7e),e(I7e,Wkr),e(F5,Qkr),e(F5,$Y),e($Y,Hkr),e(F5,Ukr),e(Ee,Jkr),e(Ee,T5),e(T5,q7e),e(q7e,Ykr),e(T5,Kkr),e(T5,kY),e(kY,Zkr),e(T5,eSr),e(Ee,oSr),e(Ee,M5),e(M5,N7e),e(N7e,rSr),e(M5,tSr),e(M5,SY),e(SY,aSr),e(M5,nSr),e(Ee,sSr),e(Ee,E5),e(E5,j7e),e(j7e,lSr),e(E5,iSr),e(E5,RY),e(RY,dSr),e(E5,cSr),e(Ee,fSr),e(Ee,C5),e(C5,D7e),e(D7e,mSr),e(C5,gSr),e(C5,PY),e(PY,hSr),e(C5,pSr),e(Ee,uSr),e(Ee,w5),e(w5,G7e),e(G7e,_Sr),e(w5,bSr),e(w5,BY),e(BY,vSr),e(w5,FSr),e(Ee,TSr),e(Ee,A5),e(A5,O7e),e(O7e,MSr),e(A5,ESr),e(A5,IY),e(IY,CSr),e(A5,wSr),e(Ee,ASr),e(Ee,y5),e(y5,V7e),e(V7e,ySr),e(y5,LSr),e(y5,qY),e(qY,xSr),e(y5,$Sr),e(Gr,kSr),M(L5,Gr,null),b(f,Gje,_),b(f,Nc,_),e(Nc,x5),e(x5,X7e),M(G8,X7e,null),e(Nc,SSr),e(Nc,z7e),e(z7e,RSr),b(f,Oje,_),b(f,hr,_),M(O8,hr,null),e(hr,PSr),e(hr,jc),e(jc,BSr),e(jc,NY),e(NY,ISr),e(jc,qSr),e(jc,jY),e(jY,NSr),e(jc,jSr),e(hr,DSr),e(hr,V8),e(V8,GSr),e(V8,W7e),e(W7e,OSr),e(V8,VSr),e(hr,XSr),e(hr,Xt),M(X8,Xt,null),e(Xt,zSr),e(Xt,Q7e),e(Q7e,WSr),e(Xt,QSr),e(Xt,Dc),e(Dc,HSr),e(Dc,H7e),e(H7e,USr),e(Dc,JSr),e(Dc,DY),e(DY,YSr),e(Dc,KSr),e(Xt,ZSr),M($5,Xt,null),e(hr,eRr),e(hr,Or),M(z8,Or,null),e(Or,oRr),e(Or,U7e),e(U7e,rRr),e(Or,tRr),e(Or,_n),e(_n,aRr),e(_n,J7e),e(J7e,nRr),e(_n,sRr),e(_n,Y7e),e(Y7e,lRr),e(_n,iRr),e(_n,K7e),e(K7e,dRr),e(_n,cRr),e(Or,fRr),e(Or,Le),e(Le,k5),e(k5,Z7e),e(Z7e,mRr),e(k5,gRr),e(k5,GY),e(GY,hRr),e(k5,pRr),e(Le,uRr),e(Le,S5),e(S5,eMe),e(eMe,_Rr),e(S5,bRr),e(S5,OY),e(OY,vRr),e(S5,FRr),e(Le,TRr),e(Le,R5),e(R5,oMe),e(oMe,MRr),e(R5,ERr),e(R5,VY),e(VY,CRr),e(R5,wRr),e(Le,ARr),e(Le,P5),e(P5,rMe),e(rMe,yRr),e(P5,LRr),e(P5,XY),e(XY,xRr),e(P5,$Rr),e(Le,kRr),e(Le,B5),e(B5,tMe),e(tMe,SRr),e(B5,RRr),e(B5,zY),e(zY,PRr),e(B5,BRr),e(Le,IRr),e(Le,I5),e(I5,aMe),e(aMe,qRr),e(I5,NRr),e(I5,WY),e(WY,jRr),e(I5,DRr),e(Le,GRr),e(Le,q5),e(q5,nMe),e(nMe,ORr),e(q5,VRr),e(q5,QY),e(QY,XRr),e(q5,zRr),e(Le,WRr),e(Le,N5),e(N5,sMe),e(sMe,QRr),e(N5,HRr),e(N5,HY),e(HY,URr),e(N5,JRr),e(Le,YRr),e(Le,j5),e(j5,lMe),e(lMe,KRr),e(j5,ZRr),e(j5,UY),e(UY,ePr),e(j5,oPr),e(Le,rPr),e(Le,D5),e(D5,iMe),e(iMe,tPr),e(D5,aPr),e(D5,JY),e(JY,nPr),e(D5,sPr),e(Or,lPr),M(G5,Or,null),b(f,Vje,_),b(f,Gc,_),e(Gc,O5),e(O5,dMe),M(W8,dMe,null),e(Gc,iPr),e(Gc,cMe),e(cMe,dPr),b(f,Xje,_),b(f,pr,_),M(Q8,pr,null),e(pr,cPr),e(pr,Oc),e(Oc,fPr),e(Oc,YY),e(YY,mPr),e(Oc,gPr),e(Oc,KY),e(KY,hPr),e(Oc,pPr),e(pr,uPr),e(pr,H8),e(H8,_Pr),e(H8,fMe),e(fMe,bPr),e(H8,vPr),e(pr,FPr),e(pr,zt),M(U8,zt,null),e(zt,TPr),e(zt,mMe),e(mMe,MPr),e(zt,EPr),e(zt,Vc),e(Vc,CPr),e(Vc,gMe),e(gMe,wPr),e(Vc,APr),e(Vc,ZY),e(ZY,yPr),e(Vc,LPr),e(zt,xPr),M(V5,zt,null),e(pr,$Pr),e(pr,Vr),M(J8,Vr,null),e(Vr,kPr),e(Vr,hMe),e(hMe,SPr),e(Vr,RPr),e(Vr,bn),e(bn,PPr),e(bn,pMe),e(pMe,BPr),e(bn,IPr),e(bn,uMe),e(uMe,qPr),e(bn,NPr),e(bn,_Me),e(_Me,jPr),e(bn,DPr),e(Vr,GPr),e(Vr,Pe),e(Pe,X5),e(X5,bMe),e(bMe,OPr),e(X5,VPr),e(X5,eK),e(eK,XPr),e(X5,zPr),e(Pe,WPr),e(Pe,z5),e(z5,vMe),e(vMe,QPr),e(z5,HPr),e(z5,oK),e(oK,UPr),e(z5,JPr),e(Pe,YPr),e(Pe,W5),e(W5,FMe),e(FMe,KPr),e(W5,ZPr),e(W5,rK),e(rK,eBr),e(W5,oBr),e(Pe,rBr),e(Pe,Q5),e(Q5,TMe),e(TMe,tBr),e(Q5,aBr),e(Q5,tK),e(tK,nBr),e(Q5,sBr),e(Pe,lBr),e(Pe,H5),e(H5,MMe),e(MMe,iBr),e(H5,dBr),e(H5,aK),e(aK,cBr),e(H5,fBr),e(Pe,mBr),e(Pe,U5),e(U5,EMe),e(EMe,gBr),e(U5,hBr),e(U5,nK),e(nK,pBr),e(U5,uBr),e(Pe,_Br),e(Pe,J5),e(J5,CMe),e(CMe,bBr),e(J5,vBr),e(J5,sK),e(sK,FBr),e(J5,TBr),e(Pe,MBr),e(Pe,Y5),e(Y5,wMe),e(wMe,EBr),e(Y5,CBr),e(Y5,lK),e(lK,wBr),e(Y5,ABr),e(Pe,yBr),e(Pe,K5),e(K5,AMe),e(AMe,LBr),e(K5,xBr),e(K5,iK),e(iK,$Br),e(K5,kBr),e(Vr,SBr),M(Z5,Vr,null),b(f,zje,_),b(f,Xc,_),e(Xc,e3),e(e3,yMe),M(Y8,yMe,null),e(Xc,RBr),e(Xc,LMe),e(LMe,PBr),b(f,Wje,_),b(f,ur,_),M(K8,ur,null),e(ur,BBr),e(ur,zc),e(zc,IBr),e(zc,dK),e(dK,qBr),e(zc,NBr),e(zc,cK),e(cK,jBr),e(zc,DBr),e(ur,GBr),e(ur,Z8),e(Z8,OBr),e(Z8,xMe),e(xMe,VBr),e(Z8,XBr),e(ur,zBr),e(ur,Wt),M(ex,Wt,null),e(Wt,WBr),e(Wt,$Me),e($Me,QBr),e(Wt,HBr),e(Wt,Wc),e(Wc,UBr),e(Wc,kMe),e(kMe,JBr),e(Wc,YBr),e(Wc,fK),e(fK,KBr),e(Wc,ZBr),e(Wt,eIr),M(o3,Wt,null),e(ur,oIr),e(ur,Xr),M(ox,Xr,null),e(Xr,rIr),e(Xr,SMe),e(SMe,tIr),e(Xr,aIr),e(Xr,vn),e(vn,nIr),e(vn,RMe),e(RMe,sIr),e(vn,lIr),e(vn,PMe),e(PMe,iIr),e(vn,dIr),e(vn,BMe),e(BMe,cIr),e(vn,fIr),e(Xr,mIr),e(Xr,xe),e(xe,r3),e(r3,IMe),e(IMe,gIr),e(r3,hIr),e(r3,mK),e(mK,pIr),e(r3,uIr),e(xe,_Ir),e(xe,t3),e(t3,qMe),e(qMe,bIr),e(t3,vIr),e(t3,gK),e(gK,FIr),e(t3,TIr),e(xe,MIr),e(xe,a3),e(a3,NMe),e(NMe,EIr),e(a3,CIr),e(a3,hK),e(hK,wIr),e(a3,AIr),e(xe,yIr),e(xe,n3),e(n3,jMe),e(jMe,LIr),e(n3,xIr),e(n3,pK),e(pK,$Ir),e(n3,kIr),e(xe,SIr),e(xe,s3),e(s3,DMe),e(DMe,RIr),e(s3,PIr),e(s3,uK),e(uK,BIr),e(s3,IIr),e(xe,qIr),e(xe,l3),e(l3,GMe),e(GMe,NIr),e(l3,jIr),e(l3,_K),e(_K,DIr),e(l3,GIr),e(xe,OIr),e(xe,i3),e(i3,OMe),e(OMe,VIr),e(i3,XIr),e(i3,bK),e(bK,zIr),e(i3,WIr),e(xe,QIr),e(xe,d3),e(d3,VMe),e(VMe,HIr),e(d3,UIr),e(d3,vK),e(vK,JIr),e(d3,YIr),e(xe,KIr),e(xe,c3),e(c3,XMe),e(XMe,ZIr),e(c3,eqr),e(c3,FK),e(FK,oqr),e(c3,rqr),e(xe,tqr),e(xe,f3),e(f3,zMe),e(zMe,aqr),e(f3,nqr),e(f3,TK),e(TK,sqr),e(f3,lqr),e(Xr,iqr),M(m3,Xr,null),b(f,Qje,_),b(f,Qc,_),e(Qc,g3),e(g3,WMe),M(rx,WMe,null),e(Qc,dqr),e(Qc,QMe),e(QMe,cqr),b(f,Hje,_),b(f,_r,_),M(tx,_r,null),e(_r,fqr),e(_r,Hc),e(Hc,mqr),e(Hc,MK),e(MK,gqr),e(Hc,hqr),e(Hc,EK),e(EK,pqr),e(Hc,uqr),e(_r,_qr),e(_r,ax),e(ax,bqr),e(ax,HMe),e(HMe,vqr),e(ax,Fqr),e(_r,Tqr),e(_r,Qt),M(nx,Qt,null),e(Qt,Mqr),e(Qt,UMe),e(UMe,Eqr),e(Qt,Cqr),e(Qt,Uc),e(Uc,wqr),e(Uc,JMe),e(JMe,Aqr),e(Uc,yqr),e(Uc,CK),e(CK,Lqr),e(Uc,xqr),e(Qt,$qr),M(h3,Qt,null),e(_r,kqr),e(_r,zr),M(sx,zr,null),e(zr,Sqr),e(zr,YMe),e(YMe,Rqr),e(zr,Pqr),e(zr,Fn),e(Fn,Bqr),e(Fn,KMe),e(KMe,Iqr),e(Fn,qqr),e(Fn,ZMe),e(ZMe,Nqr),e(Fn,jqr),e(Fn,eEe),e(eEe,Dqr),e(Fn,Gqr),e(zr,Oqr),e(zr,$e),e($e,p3),e(p3,oEe),e(oEe,Vqr),e(p3,Xqr),e(p3,wK),e(wK,zqr),e(p3,Wqr),e($e,Qqr),e($e,u3),e(u3,rEe),e(rEe,Hqr),e(u3,Uqr),e(u3,AK),e(AK,Jqr),e(u3,Yqr),e($e,Kqr),e($e,_3),e(_3,tEe),e(tEe,Zqr),e(_3,eNr),e(_3,yK),e(yK,oNr),e(_3,rNr),e($e,tNr),e($e,b3),e(b3,aEe),e(aEe,aNr),e(b3,nNr),e(b3,LK),e(LK,sNr),e(b3,lNr),e($e,iNr),e($e,v3),e(v3,nEe),e(nEe,dNr),e(v3,cNr),e(v3,xK),e(xK,fNr),e(v3,mNr),e($e,gNr),e($e,F3),e(F3,sEe),e(sEe,hNr),e(F3,pNr),e(F3,$K),e($K,uNr),e(F3,_Nr),e($e,bNr),e($e,T3),e(T3,lEe),e(lEe,vNr),e(T3,FNr),e(T3,kK),e(kK,TNr),e(T3,MNr),e($e,ENr),e($e,M3),e(M3,iEe),e(iEe,CNr),e(M3,wNr),e(M3,SK),e(SK,ANr),e(M3,yNr),e($e,LNr),e($e,E3),e(E3,dEe),e(dEe,xNr),e(E3,$Nr),e(E3,RK),e(RK,kNr),e(E3,SNr),e($e,RNr),e($e,C3),e(C3,cEe),e(cEe,PNr),e(C3,BNr),e(C3,PK),e(PK,INr),e(C3,qNr),e(zr,NNr),M(w3,zr,null),b(f,Uje,_),b(f,Jc,_),e(Jc,A3),e(A3,fEe),M(lx,fEe,null),e(Jc,jNr),e(Jc,mEe),e(mEe,DNr),b(f,Jje,_),b(f,br,_),M(ix,br,null),e(br,GNr),e(br,Yc),e(Yc,ONr),e(Yc,BK),e(BK,VNr),e(Yc,XNr),e(Yc,IK),e(IK,zNr),e(Yc,WNr),e(br,QNr),e(br,dx),e(dx,HNr),e(dx,gEe),e(gEe,UNr),e(dx,JNr),e(br,YNr),e(br,Ht),M(cx,Ht,null),e(Ht,KNr),e(Ht,hEe),e(hEe,ZNr),e(Ht,ejr),e(Ht,Kc),e(Kc,ojr),e(Kc,pEe),e(pEe,rjr),e(Kc,tjr),e(Kc,qK),e(qK,ajr),e(Kc,njr),e(Ht,sjr),M(y3,Ht,null),e(br,ljr),e(br,Wr),M(fx,Wr,null),e(Wr,ijr),e(Wr,uEe),e(uEe,djr),e(Wr,cjr),e(Wr,Tn),e(Tn,fjr),e(Tn,_Ee),e(_Ee,mjr),e(Tn,gjr),e(Tn,bEe),e(bEe,hjr),e(Tn,pjr),e(Tn,vEe),e(vEe,ujr),e(Tn,_jr),e(Wr,bjr),e(Wr,De),e(De,L3),e(L3,FEe),e(FEe,vjr),e(L3,Fjr),e(L3,NK),e(NK,Tjr),e(L3,Mjr),e(De,Ejr),e(De,x3),e(x3,TEe),e(TEe,Cjr),e(x3,wjr),e(x3,jK),e(jK,Ajr),e(x3,yjr),e(De,Ljr),e(De,$3),e($3,MEe),e(MEe,xjr),e($3,$jr),e($3,DK),e(DK,kjr),e($3,Sjr),e(De,Rjr),e(De,k3),e(k3,EEe),e(EEe,Pjr),e(k3,Bjr),e(k3,GK),e(GK,Ijr),e(k3,qjr),e(De,Njr),e(De,S3),e(S3,CEe),e(CEe,jjr),e(S3,Djr),e(S3,OK),e(OK,Gjr),e(S3,Ojr),e(De,Vjr),e(De,R3),e(R3,wEe),e(wEe,Xjr),e(R3,zjr),e(R3,VK),e(VK,Wjr),e(R3,Qjr),e(De,Hjr),e(De,P3),e(P3,AEe),e(AEe,Ujr),e(P3,Jjr),e(P3,XK),e(XK,Yjr),e(P3,Kjr),e(De,Zjr),e(De,B3),e(B3,yEe),e(yEe,eDr),e(B3,oDr),e(B3,zK),e(zK,rDr),e(B3,tDr),e(Wr,aDr),M(I3,Wr,null),b(f,Yje,_),b(f,Zc,_),e(Zc,q3),e(q3,LEe),M(mx,LEe,null),e(Zc,nDr),e(Zc,xEe),e(xEe,sDr),b(f,Kje,_),b(f,vr,_),M(gx,vr,null),e(vr,lDr),e(vr,ef),e(ef,iDr),e(ef,WK),e(WK,dDr),e(ef,cDr),e(ef,QK),e(QK,fDr),e(ef,mDr),e(vr,gDr),e(vr,hx),e(hx,hDr),e(hx,$Ee),e($Ee,pDr),e(hx,uDr),e(vr,_Dr),e(vr,Ut),M(px,Ut,null),e(Ut,bDr),e(Ut,kEe),e(kEe,vDr),e(Ut,FDr),e(Ut,of),e(of,TDr),e(of,SEe),e(SEe,MDr),e(of,EDr),e(of,HK),e(HK,CDr),e(of,wDr),e(Ut,ADr),M(N3,Ut,null),e(vr,yDr),e(vr,Qr),M(ux,Qr,null),e(Qr,LDr),e(Qr,REe),e(REe,xDr),e(Qr,$Dr),e(Qr,Mn),e(Mn,kDr),e(Mn,PEe),e(PEe,SDr),e(Mn,RDr),e(Mn,BEe),e(BEe,PDr),e(Mn,BDr),e(Mn,IEe),e(IEe,IDr),e(Mn,qDr),e(Qr,NDr),e(Qr,Ge),e(Ge,j3),e(j3,qEe),e(qEe,jDr),e(j3,DDr),e(j3,UK),e(UK,GDr),e(j3,ODr),e(Ge,VDr),e(Ge,D3),e(D3,NEe),e(NEe,XDr),e(D3,zDr),e(D3,JK),e(JK,WDr),e(D3,QDr),e(Ge,HDr),e(Ge,G3),e(G3,jEe),e(jEe,UDr),e(G3,JDr),e(G3,YK),e(YK,YDr),e(G3,KDr),e(Ge,ZDr),e(Ge,O3),e(O3,DEe),e(DEe,eGr),e(O3,oGr),e(O3,KK),e(KK,rGr),e(O3,tGr),e(Ge,aGr),e(Ge,V3),e(V3,GEe),e(GEe,nGr),e(V3,sGr),e(V3,ZK),e(ZK,lGr),e(V3,iGr),e(Ge,dGr),e(Ge,X3),e(X3,OEe),e(OEe,cGr),e(X3,fGr),e(X3,eZ),e(eZ,mGr),e(X3,gGr),e(Ge,hGr),e(Ge,z3),e(z3,VEe),e(VEe,pGr),e(z3,uGr),e(z3,oZ),e(oZ,_Gr),e(z3,bGr),e(Ge,vGr),e(Ge,W3),e(W3,XEe),e(XEe,FGr),e(W3,TGr),e(W3,rZ),e(rZ,MGr),e(W3,EGr),e(Qr,CGr),M(Q3,Qr,null),b(f,Zje,_),b(f,rf,_),e(rf,H3),e(H3,zEe),M(_x,zEe,null),e(rf,wGr),e(rf,WEe),e(WEe,AGr),b(f,eDe,_),b(f,Fr,_),M(bx,Fr,null),e(Fr,yGr),e(Fr,tf),e(tf,LGr),e(tf,tZ),e(tZ,xGr),e(tf,$Gr),e(tf,aZ),e(aZ,kGr),e(tf,SGr),e(Fr,RGr),e(Fr,vx),e(vx,PGr),e(vx,QEe),e(QEe,BGr),e(vx,IGr),e(Fr,qGr),e(Fr,Jt),M(Fx,Jt,null),e(Jt,NGr),e(Jt,HEe),e(HEe,jGr),e(Jt,DGr),e(Jt,af),e(af,GGr),e(af,UEe),e(UEe,OGr),e(af,VGr),e(af,nZ),e(nZ,XGr),e(af,zGr),e(Jt,WGr),M(U3,Jt,null),e(Fr,QGr),e(Fr,Hr),M(Tx,Hr,null),e(Hr,HGr),e(Hr,JEe),e(JEe,UGr),e(Hr,JGr),e(Hr,En),e(En,YGr),e(En,YEe),e(YEe,KGr),e(En,ZGr),e(En,KEe),e(KEe,eOr),e(En,oOr),e(En,ZEe),e(ZEe,rOr),e(En,tOr),e(Hr,aOr),e(Hr,eCe),e(eCe,J3),e(J3,oCe),e(oCe,nOr),e(J3,sOr),e(J3,sZ),e(sZ,lOr),e(J3,iOr),e(Hr,dOr),M(Y3,Hr,null),b(f,oDe,_),b(f,nf,_),e(nf,K3),e(K3,rCe),M(Mx,rCe,null),e(nf,cOr),e(nf,tCe),e(tCe,fOr),b(f,rDe,_),b(f,Tr,_),M(Ex,Tr,null),e(Tr,mOr),e(Tr,sf),e(sf,gOr),e(sf,lZ),e(lZ,hOr),e(sf,pOr),e(sf,iZ),e(iZ,uOr),e(sf,_Or),e(Tr,bOr),e(Tr,Cx),e(Cx,vOr),e(Cx,aCe),e(aCe,FOr),e(Cx,TOr),e(Tr,MOr),e(Tr,Yt),M(wx,Yt,null),e(Yt,EOr),e(Yt,nCe),e(nCe,COr),e(Yt,wOr),e(Yt,lf),e(lf,AOr),e(lf,sCe),e(sCe,yOr),e(lf,LOr),e(lf,dZ),e(dZ,xOr),e(lf,$Or),e(Yt,kOr),M(Z3,Yt,null),e(Tr,SOr),e(Tr,Ur),M(Ax,Ur,null),e(Ur,ROr),e(Ur,lCe),e(lCe,POr),e(Ur,BOr),e(Ur,Cn),e(Cn,IOr),e(Cn,iCe),e(iCe,qOr),e(Cn,NOr),e(Cn,dCe),e(dCe,jOr),e(Cn,DOr),e(Cn,cCe),e(cCe,GOr),e(Cn,OOr),e(Ur,VOr),e(Ur,yx),e(yx,ew),e(ew,fCe),e(fCe,XOr),e(ew,zOr),e(ew,cZ),e(cZ,WOr),e(ew,QOr),e(yx,HOr),e(yx,ow),e(ow,mCe),e(mCe,UOr),e(ow,JOr),e(ow,fZ),e(fZ,YOr),e(ow,KOr),e(Ur,ZOr),M(rw,Ur,null),b(f,tDe,_),b(f,df,_),e(df,tw),e(tw,gCe),M(Lx,gCe,null),e(df,eVr),e(df,hCe),e(hCe,oVr),b(f,aDe,_),b(f,Mr,_),M(xx,Mr,null),e(Mr,rVr),e(Mr,cf),e(cf,tVr),e(cf,mZ),e(mZ,aVr),e(cf,nVr),e(cf,gZ),e(gZ,sVr),e(cf,lVr),e(Mr,iVr),e(Mr,$x),e($x,dVr),e($x,pCe),e(pCe,cVr),e($x,fVr),e(Mr,mVr),e(Mr,Kt),M(kx,Kt,null),e(Kt,gVr),e(Kt,uCe),e(uCe,hVr),e(Kt,pVr),e(Kt,ff),e(ff,uVr),e(ff,_Ce),e(_Ce,_Vr),e(ff,bVr),e(ff,hZ),e(hZ,vVr),e(ff,FVr),e(Kt,TVr),M(aw,Kt,null),e(Mr,MVr),e(Mr,Jr),M(Sx,Jr,null),e(Jr,EVr),e(Jr,bCe),e(bCe,CVr),e(Jr,wVr),e(Jr,wn),e(wn,AVr),e(wn,vCe),e(vCe,yVr),e(wn,LVr),e(wn,FCe),e(FCe,xVr),e(wn,$Vr),e(wn,TCe),e(TCe,kVr),e(wn,SVr),e(Jr,RVr),e(Jr,MCe),e(MCe,nw),e(nw,ECe),e(ECe,PVr),e(nw,BVr),e(nw,pZ),e(pZ,IVr),e(nw,qVr),e(Jr,NVr),M(sw,Jr,null),nDe=!0},p(f,[_]){const Rx={};_&2&&(Rx.$$scope={dirty:_,ctx:f}),Ff.$set(Rx);const CCe={};_&2&&(CCe.$$scope={dirty:_,ctx:f}),Eg.$set(CCe);const wCe={};_&2&&(wCe.$$scope={dirty:_,ctx:f}),ah.$set(wCe);const ACe={};_&2&&(ACe.$$scope={dirty:_,ctx:f}),Ih.$set(ACe);const Px={};_&2&&(Px.$$scope={dirty:_,ctx:f}),qh.$set(Px);const yCe={};_&2&&(yCe.$$scope={dirty:_,ctx:f}),tp.$set(yCe);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),ap.$set(An);const LCe={};_&2&&(LCe.$$scope={dirty:_,ctx:f}),lp.$set(LCe);const xCe={};_&2&&(xCe.$$scope={dirty:_,ctx:f}),r_.$set(xCe);const $Ce={};_&2&&($Ce.$$scope={dirty:_,ctx:f}),a_.$set($Ce);const Bx={};_&2&&(Bx.$$scope={dirty:_,ctx:f}),H_.$set(Bx);const kCe={};_&2&&(kCe.$$scope={dirty:_,ctx:f}),J_.$set(kCe);const Ix={};_&2&&(Ix.$$scope={dirty:_,ctx:f}),B1.$set(Ix);const SCe={};_&2&&(SCe.$$scope={dirty:_,ctx:f}),q1.$set(SCe);const qx={};_&2&&(qx.$$scope={dirty:_,ctx:f}),T9.$set(qx);const RCe={};_&2&&(RCe.$$scope={dirty:_,ctx:f}),E9.$set(RCe);const PCe={};_&2&&(PCe.$$scope={dirty:_,ctx:f}),G9.$set(PCe);const BCe={};_&2&&(BCe.$$scope={dirty:_,ctx:f}),V9.$set(BCe);const mf={};_&2&&(mf.$$scope={dirty:_,ctx:f}),Nb.$set(mf);const ICe={};_&2&&(ICe.$$scope={dirty:_,ctx:f}),Db.$set(ICe);const qCe={};_&2&&(qCe.$$scope={dirty:_,ctx:f}),_2.$set(qCe);const NCe={};_&2&&(NCe.$$scope={dirty:_,ctx:f}),v2.$set(NCe);const Nx={};_&2&&(Nx.$$scope={dirty:_,ctx:f}),A2.$set(Nx);const jCe={};_&2&&(jCe.$$scope={dirty:_,ctx:f}),L2.$set(jCe);const DCe={};_&2&&(DCe.$$scope={dirty:_,ctx:f}),c4.$set(DCe);const GCe={};_&2&&(GCe.$$scope={dirty:_,ctx:f}),m4.$set(GCe);const et={};_&2&&(et.$$scope={dirty:_,ctx:f}),ev.$set(et);const jx={};_&2&&(jx.$$scope={dirty:_,ctx:f}),rv.$set(jx);const OCe={};_&2&&(OCe.$$scope={dirty:_,ctx:f}),nv.$set(OCe);const Dx={};_&2&&(Dx.$$scope={dirty:_,ctx:f}),lv.$set(Dx);const VCe={};_&2&&(VCe.$$scope={dirty:_,ctx:f}),Tv.$set(VCe);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:f}),Ev.$set(ot);const XCe={};_&2&&(XCe.$$scope={dirty:_,ctx:f}),Av.$set(XCe);const gf={};_&2&&(gf.$$scope={dirty:_,ctx:f}),Lv.$set(gf);const zCe={};_&2&&(zCe.$$scope={dirty:_,ctx:f}),jv.$set(zCe);const WCe={};_&2&&(WCe.$$scope={dirty:_,ctx:f}),Gv.$set(WCe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),Hv.$set(y);const lw={};_&2&&(lw.$$scope={dirty:_,ctx:f}),Jv.$set(lw);const QCe={};_&2&&(QCe.$$scope={dirty:_,ctx:f}),lF.$set(QCe);const HCe={};_&2&&(HCe.$$scope={dirty:_,ctx:f}),dF.$set(HCe);const iw={};_&2&&(iw.$$scope={dirty:_,ctx:f}),gF.$set(iw);const UCe={};_&2&&(UCe.$$scope={dirty:_,ctx:f}),pF.$set(UCe);const JCe={};_&2&&(JCe.$$scope={dirty:_,ctx:f}),MF.$set(JCe);const dw={};_&2&&(dw.$$scope={dirty:_,ctx:f}),CF.$set(dw);const YCe={};_&2&&(YCe.$$scope={dirty:_,ctx:f}),xF.$set(YCe);const KCe={};_&2&&(KCe.$$scope={dirty:_,ctx:f}),kF.$set(KCe);const cw={};_&2&&(cw.$$scope={dirty:_,ctx:f}),BF.$set(cw);const ZCe={};_&2&&(ZCe.$$scope={dirty:_,ctx:f}),qF.$set(ZCe);const e5e={};_&2&&(e5e.$$scope={dirty:_,ctx:f}),DF.$set(e5e);const fw={};_&2&&(fw.$$scope={dirty:_,ctx:f}),OF.$set(fw);const o5e={};_&2&&(o5e.$$scope={dirty:_,ctx:f}),HF.$set(o5e);const r5e={};_&2&&(r5e.$$scope={dirty:_,ctx:f}),JF.$set(r5e);const mw={};_&2&&(mw.$$scope={dirty:_,ctx:f}),ZF.$set(mw);const t5e={};_&2&&(t5e.$$scope={dirty:_,ctx:f}),oT.$set(t5e);const a5e={};_&2&&(a5e.$$scope={dirty:_,ctx:f}),QT.$set(a5e);const gw={};_&2&&(gw.$$scope={dirty:_,ctx:f}),UT.$set(gw);const n5e={};_&2&&(n5e.$$scope={dirty:_,ctx:f}),v7.$set(n5e);const s5e={};_&2&&(s5e.$$scope={dirty:_,ctx:f}),T7.$set(s5e);const hw={};_&2&&(hw.$$scope={dirty:_,ctx:f}),P7.$set(hw);const l5e={};_&2&&(l5e.$$scope={dirty:_,ctx:f}),I7.$set(l5e);const i5e={};_&2&&(i5e.$$scope={dirty:_,ctx:f}),G7.$set(i5e);const pw={};_&2&&(pw.$$scope={dirty:_,ctx:f}),V7.$set(pw);const d5e={};_&2&&(d5e.$$scope={dirty:_,ctx:f}),cM.$set(d5e);const c5e={};_&2&&(c5e.$$scope={dirty:_,ctx:f}),mM.$set(c5e);const uw={};_&2&&(uw.$$scope={dirty:_,ctx:f}),EM.$set(uw);const f5e={};_&2&&(f5e.$$scope={dirty:_,ctx:f}),wM.$set(f5e);const m5e={};_&2&&(m5e.$$scope={dirty:_,ctx:f}),KM.$set(m5e);const _w={};_&2&&(_w.$$scope={dirty:_,ctx:f}),eE.$set(_w);const g5e={};_&2&&(g5e.$$scope={dirty:_,ctx:f}),bE.$set(g5e);const h5e={};_&2&&(h5e.$$scope={dirty:_,ctx:f}),FE.$set(h5e);const bw={};_&2&&(bw.$$scope={dirty:_,ctx:f}),EE.$set(bw);const p5e={};_&2&&(p5e.$$scope={dirty:_,ctx:f}),wE.$set(p5e);const u5e={};_&2&&(u5e.$$scope={dirty:_,ctx:f}),yE.$set(u5e);const vw={};_&2&&(vw.$$scope={dirty:_,ctx:f}),xE.$set(vw);const _5e={};_&2&&(_5e.$$scope={dirty:_,ctx:f}),JE.$set(_5e);const b5e={};_&2&&(b5e.$$scope={dirty:_,ctx:f}),KE.$set(b5e);const Fw={};_&2&&(Fw.$$scope={dirty:_,ctx:f}),vC.$set(Fw);const v5e={};_&2&&(v5e.$$scope={dirty:_,ctx:f}),TC.$set(v5e);const F5e={};_&2&&(F5e.$$scope={dirty:_,ctx:f}),EC.$set(F5e);const Tw={};_&2&&(Tw.$$scope={dirty:_,ctx:f}),wC.$set(Tw);const T5e={};_&2&&(T5e.$$scope={dirty:_,ctx:f}),yC.$set(T5e);const M5e={};_&2&&(M5e.$$scope={dirty:_,ctx:f}),xC.$set(M5e);const Mw={};_&2&&(Mw.$$scope={dirty:_,ctx:f}),o5.$set(Mw);const E5e={};_&2&&(E5e.$$scope={dirty:_,ctx:f}),t5.$set(E5e);const C5e={};_&2&&(C5e.$$scope={dirty:_,ctx:f}),g5.$set(C5e);const Ew={};_&2&&(Ew.$$scope={dirty:_,ctx:f}),p5.$set(Ew);const w5e={};_&2&&(w5e.$$scope={dirty:_,ctx:f}),L5.$set(w5e);const A5e={};_&2&&(A5e.$$scope={dirty:_,ctx:f}),$5.$set(A5e);const Cw={};_&2&&(Cw.$$scope={dirty:_,ctx:f}),G5.$set(Cw);const y5e={};_&2&&(y5e.$$scope={dirty:_,ctx:f}),V5.$set(y5e);const L5e={};_&2&&(L5e.$$scope={dirty:_,ctx:f}),Z5.$set(L5e);const ww={};_&2&&(ww.$$scope={dirty:_,ctx:f}),o3.$set(ww);const x5e={};_&2&&(x5e.$$scope={dirty:_,ctx:f}),m3.$set(x5e);const $5e={};_&2&&($5e.$$scope={dirty:_,ctx:f}),h3.$set($5e);const Aw={};_&2&&(Aw.$$scope={dirty:_,ctx:f}),w3.$set(Aw);const k5e={};_&2&&(k5e.$$scope={dirty:_,ctx:f}),y3.$set(k5e);const S5e={};_&2&&(S5e.$$scope={dirty:_,ctx:f}),I3.$set(S5e);const yw={};_&2&&(yw.$$scope={dirty:_,ctx:f}),N3.$set(yw);const R5e={};_&2&&(R5e.$$scope={dirty:_,ctx:f}),Q3.$set(R5e);const P5e={};_&2&&(P5e.$$scope={dirty:_,ctx:f}),U3.$set(P5e);const Lw={};_&2&&(Lw.$$scope={dirty:_,ctx:f}),Y3.$set(Lw);const B5e={};_&2&&(B5e.$$scope={dirty:_,ctx:f}),Z3.$set(B5e);const I5e={};_&2&&(I5e.$$scope={dirty:_,ctx:f}),rw.$set(I5e);const xw={};_&2&&(xw.$$scope={dirty:_,ctx:f}),aw.$set(xw);const q5e={};_&2&&(q5e.$$scope={dirty:_,ctx:f}),sw.$set(q5e)},i(f){nDe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(L6.$$.fragment,f),E(x6.$$.fragment,f),E(Ff.$$.fragment,f),E($6.$$.fragment,f),E(k6.$$.fragment,f),E(P6.$$.fragment,f),E(Eg.$$.fragment,f),E(B6.$$.fragment,f),E(I6.$$.fragment,f),E(q6.$$.fragment,f),E(D6.$$.fragment,f),E(ah.$$.fragment,f),E(G6.$$.fragment,f),E(O6.$$.fragment,f),E(V6.$$.fragment,f),E(W6.$$.fragment,f),E(Ih.$$.fragment,f),E(qh.$$.fragment,f),E(Q6.$$.fragment,f),E(H6.$$.fragment,f),E(U6.$$.fragment,f),E(K6.$$.fragment,f),E(tp.$$.fragment,f),E(ap.$$.fragment,f),E(Z6.$$.fragment,f),E(eA.$$.fragment,f),E(oA.$$.fragment,f),E(tA.$$.fragment,f),E(lp.$$.fragment,f),E(aA.$$.fragment,f),E(r_.$$.fragment,f),E(nA.$$.fragment,f),E(sA.$$.fragment,f),E(iA.$$.fragment,f),E(a_.$$.fragment,f),E(dA.$$.fragment,f),E(H_.$$.fragment,f),E(cA.$$.fragment,f),E(fA.$$.fragment,f),E(gA.$$.fragment,f),E(J_.$$.fragment,f),E(hA.$$.fragment,f),E(B1.$$.fragment,f),E(pA.$$.fragment,f),E(uA.$$.fragment,f),E(bA.$$.fragment,f),E(q1.$$.fragment,f),E(vA.$$.fragment,f),E(T9.$$.fragment,f),E(FA.$$.fragment,f),E(TA.$$.fragment,f),E(EA.$$.fragment,f),E(E9.$$.fragment,f),E(CA.$$.fragment,f),E(G9.$$.fragment,f),E(wA.$$.fragment,f),E(AA.$$.fragment,f),E(LA.$$.fragment,f),E(V9.$$.fragment,f),E(xA.$$.fragment,f),E(Nb.$$.fragment,f),E($A.$$.fragment,f),E(kA.$$.fragment,f),E(RA.$$.fragment,f),E(Db.$$.fragment,f),E(PA.$$.fragment,f),E(_2.$$.fragment,f),E(BA.$$.fragment,f),E(IA.$$.fragment,f),E(NA.$$.fragment,f),E(v2.$$.fragment,f),E(jA.$$.fragment,f),E(A2.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(VA.$$.fragment,f),E(L2.$$.fragment,f),E(XA.$$.fragment,f),E(c4.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(HA.$$.fragment,f),E(m4.$$.fragment,f),E(UA.$$.fragment,f),E(ev.$$.fragment,f),E(JA.$$.fragment,f),E(YA.$$.fragment,f),E(ZA.$$.fragment,f),E(rv.$$.fragment,f),E(ey.$$.fragment,f),E(nv.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(lv.$$.fragment,f),E(ny.$$.fragment,f),E(Tv.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(Ev.$$.fragment,f),E(cy.$$.fragment,f),E(Av.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(Lv.$$.fragment,f),E(py.$$.fragment,f),E(jv.$$.fragment,f),E(uy.$$.fragment,f),E(_y.$$.fragment,f),E(vy.$$.fragment,f),E(Gv.$$.fragment,f),E(Fy.$$.fragment,f),E(Hv.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(Jv.$$.fragment,f),E(wy.$$.fragment,f),E(lF.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(dF.$$.fragment,f),E($y.$$.fragment,f),E(gF.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(pF.$$.fragment,f),E(Iy.$$.fragment,f),E(MF.$$.fragment,f),E(qy.$$.fragment,f),E(Ny.$$.fragment,f),E(Dy.$$.fragment,f),E(CF.$$.fragment,f),E(Gy.$$.fragment,f),E(xF.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(kF.$$.fragment,f),E(Wy.$$.fragment,f),E(BF.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(qF.$$.fragment,f),E(Ky.$$.fragment,f),E(DF.$$.fragment,f),E(Zy.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(OF.$$.fragment,f),E(tL.$$.fragment,f),E(HF.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(JF.$$.fragment,f),E(iL.$$.fragment,f),E(ZF.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(oT.$$.fragment,f),E(gL.$$.fragment,f),E(QT.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(UT.$$.fragment,f),E(bL.$$.fragment,f),E(v7.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(T7.$$.fragment,f),E(EL.$$.fragment,f),E(P7.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(I7.$$.fragment,f),E(LL.$$.fragment,f),E(G7.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(V7.$$.fragment,f),E(RL.$$.fragment,f),E(cM.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(qL.$$.fragment,f),E(mM.$$.fragment,f),E(NL.$$.fragment,f),E(EM.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(wM.$$.fragment,f),E(VL.$$.fragment,f),E(KM.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(eE.$$.fragment,f),E(HL.$$.fragment,f),E(bE.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(FE.$$.fragment,f),E(ZL.$$.fragment,f),E(EE.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(wE.$$.fragment,f),E(n8.$$.fragment,f),E(yE.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(xE.$$.fragment,f),E(c8.$$.fragment,f),E(JE.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(KE.$$.fragment,f),E(p8.$$.fragment,f),E(vC.$$.fragment,f),E(u8.$$.fragment,f),E(_8.$$.fragment,f),E(v8.$$.fragment,f),E(TC.$$.fragment,f),E(F8.$$.fragment,f),E(EC.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(wC.$$.fragment,f),E(w8.$$.fragment,f),E(yC.$$.fragment,f),E(A8.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(xC.$$.fragment,f),E($8.$$.fragment,f),E(o5.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(P8.$$.fragment,f),E(t5.$$.fragment,f),E(B8.$$.fragment,f),E(g5.$$.fragment,f),E(I8.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(p5.$$.fragment,f),E(D8.$$.fragment,f),E(L5.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E($5.$$.fragment,f),E(z8.$$.fragment,f),E(G5.$$.fragment,f),E(W8.$$.fragment,f),E(Q8.$$.fragment,f),E(U8.$$.fragment,f),E(V5.$$.fragment,f),E(J8.$$.fragment,f),E(Z5.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(ex.$$.fragment,f),E(o3.$$.fragment,f),E(ox.$$.fragment,f),E(m3.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(h3.$$.fragment,f),E(sx.$$.fragment,f),E(w3.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(y3.$$.fragment,f),E(fx.$$.fragment,f),E(I3.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(N3.$$.fragment,f),E(ux.$$.fragment,f),E(Q3.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(U3.$$.fragment,f),E(Tx.$$.fragment,f),E(Y3.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(Z3.$$.fragment,f),E(Ax.$$.fragment,f),E(rw.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(aw.$$.fragment,f),E(Sx.$$.fragment,f),E(sw.$$.fragment,f),nDe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(L6.$$.fragment,f),C(x6.$$.fragment,f),C(Ff.$$.fragment,f),C($6.$$.fragment,f),C(k6.$$.fragment,f),C(P6.$$.fragment,f),C(Eg.$$.fragment,f),C(B6.$$.fragment,f),C(I6.$$.fragment,f),C(q6.$$.fragment,f),C(D6.$$.fragment,f),C(ah.$$.fragment,f),C(G6.$$.fragment,f),C(O6.$$.fragment,f),C(V6.$$.fragment,f),C(W6.$$.fragment,f),C(Ih.$$.fragment,f),C(qh.$$.fragment,f),C(Q6.$$.fragment,f),C(H6.$$.fragment,f),C(U6.$$.fragment,f),C(K6.$$.fragment,f),C(tp.$$.fragment,f),C(ap.$$.fragment,f),C(Z6.$$.fragment,f),C(eA.$$.fragment,f),C(oA.$$.fragment,f),C(tA.$$.fragment,f),C(lp.$$.fragment,f),C(aA.$$.fragment,f),C(r_.$$.fragment,f),C(nA.$$.fragment,f),C(sA.$$.fragment,f),C(iA.$$.fragment,f),C(a_.$$.fragment,f),C(dA.$$.fragment,f),C(H_.$$.fragment,f),C(cA.$$.fragment,f),C(fA.$$.fragment,f),C(gA.$$.fragment,f),C(J_.$$.fragment,f),C(hA.$$.fragment,f),C(B1.$$.fragment,f),C(pA.$$.fragment,f),C(uA.$$.fragment,f),C(bA.$$.fragment,f),C(q1.$$.fragment,f),C(vA.$$.fragment,f),C(T9.$$.fragment,f),C(FA.$$.fragment,f),C(TA.$$.fragment,f),C(EA.$$.fragment,f),C(E9.$$.fragment,f),C(CA.$$.fragment,f),C(G9.$$.fragment,f),C(wA.$$.fragment,f),C(AA.$$.fragment,f),C(LA.$$.fragment,f),C(V9.$$.fragment,f),C(xA.$$.fragment,f),C(Nb.$$.fragment,f),C($A.$$.fragment,f),C(kA.$$.fragment,f),C(RA.$$.fragment,f),C(Db.$$.fragment,f),C(PA.$$.fragment,f),C(_2.$$.fragment,f),C(BA.$$.fragment,f),C(IA.$$.fragment,f),C(NA.$$.fragment,f),C(v2.$$.fragment,f),C(jA.$$.fragment,f),C(A2.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(VA.$$.fragment,f),C(L2.$$.fragment,f),C(XA.$$.fragment,f),C(c4.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(HA.$$.fragment,f),C(m4.$$.fragment,f),C(UA.$$.fragment,f),C(ev.$$.fragment,f),C(JA.$$.fragment,f),C(YA.$$.fragment,f),C(ZA.$$.fragment,f),C(rv.$$.fragment,f),C(ey.$$.fragment,f),C(nv.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(lv.$$.fragment,f),C(ny.$$.fragment,f),C(Tv.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(Ev.$$.fragment,f),C(cy.$$.fragment,f),C(Av.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(Lv.$$.fragment,f),C(py.$$.fragment,f),C(jv.$$.fragment,f),C(uy.$$.fragment,f),C(_y.$$.fragment,f),C(vy.$$.fragment,f),C(Gv.$$.fragment,f),C(Fy.$$.fragment,f),C(Hv.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(Jv.$$.fragment,f),C(wy.$$.fragment,f),C(lF.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(dF.$$.fragment,f),C($y.$$.fragment,f),C(gF.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(pF.$$.fragment,f),C(Iy.$$.fragment,f),C(MF.$$.fragment,f),C(qy.$$.fragment,f),C(Ny.$$.fragment,f),C(Dy.$$.fragment,f),C(CF.$$.fragment,f),C(Gy.$$.fragment,f),C(xF.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(kF.$$.fragment,f),C(Wy.$$.fragment,f),C(BF.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(qF.$$.fragment,f),C(Ky.$$.fragment,f),C(DF.$$.fragment,f),C(Zy.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(OF.$$.fragment,f),C(tL.$$.fragment,f),C(HF.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(JF.$$.fragment,f),C(iL.$$.fragment,f),C(ZF.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(oT.$$.fragment,f),C(gL.$$.fragment,f),C(QT.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(UT.$$.fragment,f),C(bL.$$.fragment,f),C(v7.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(T7.$$.fragment,f),C(EL.$$.fragment,f),C(P7.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(I7.$$.fragment,f),C(LL.$$.fragment,f),C(G7.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(V7.$$.fragment,f),C(RL.$$.fragment,f),C(cM.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(qL.$$.fragment,f),C(mM.$$.fragment,f),C(NL.$$.fragment,f),C(EM.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(wM.$$.fragment,f),C(VL.$$.fragment,f),C(KM.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(eE.$$.fragment,f),C(HL.$$.fragment,f),C(bE.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(FE.$$.fragment,f),C(ZL.$$.fragment,f),C(EE.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(wE.$$.fragment,f),C(n8.$$.fragment,f),C(yE.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(xE.$$.fragment,f),C(c8.$$.fragment,f),C(JE.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(KE.$$.fragment,f),C(p8.$$.fragment,f),C(vC.$$.fragment,f),C(u8.$$.fragment,f),C(_8.$$.fragment,f),C(v8.$$.fragment,f),C(TC.$$.fragment,f),C(F8.$$.fragment,f),C(EC.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(wC.$$.fragment,f),C(w8.$$.fragment,f),C(yC.$$.fragment,f),C(A8.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(xC.$$.fragment,f),C($8.$$.fragment,f),C(o5.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(P8.$$.fragment,f),C(t5.$$.fragment,f),C(B8.$$.fragment,f),C(g5.$$.fragment,f),C(I8.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(p5.$$.fragment,f),C(D8.$$.fragment,f),C(L5.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C($5.$$.fragment,f),C(z8.$$.fragment,f),C(G5.$$.fragment,f),C(W8.$$.fragment,f),C(Q8.$$.fragment,f),C(U8.$$.fragment,f),C(V5.$$.fragment,f),C(J8.$$.fragment,f),C(Z5.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(ex.$$.fragment,f),C(o3.$$.fragment,f),C(ox.$$.fragment,f),C(m3.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(h3.$$.fragment,f),C(sx.$$.fragment,f),C(w3.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(y3.$$.fragment,f),C(fx.$$.fragment,f),C(I3.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(N3.$$.fragment,f),C(ux.$$.fragment,f),C(Q3.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(U3.$$.fragment,f),C(Tx.$$.fragment,f),C(Y3.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(Z3.$$.fragment,f),C(Ax.$$.fragment,f),C(rw.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(aw.$$.fragment,f),C(Sx.$$.fragment,f),C(sw.$$.fragment,f),nDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(je),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(rNe),f&&t(bi),w(L6),f&&t(tNe),f&&t(kn),f&&t(aNe),w(x6,f),f&&t(nNe),f&&t(Y$),f&&t(sNe),w(Ff,f),f&&t(lNe),f&&t(vi),w($6),f&&t(iNe),f&&t(Co),w(k6),w(P6),w(Eg),w(B6),f&&t(dNe),f&&t(Ti),w(I6),f&&t(cNe),f&&t(wo),w(q6),w(D6),w(ah),w(G6),f&&t(fNe),f&&t(Mi),w(O6),f&&t(mNe),f&&t(Ao),w(V6),w(W6),w(Ih),w(qh),w(Q6),f&&t(gNe),f&&t(Ei),w(H6),f&&t(hNe),f&&t(yo),w(U6),w(K6),w(tp),w(ap),w(Z6),f&&t(pNe),f&&t(wi),w(eA),f&&t(uNe),f&&t(Lo),w(oA),w(tA),w(lp),w(aA),w(r_),f&&t(_Ne),f&&t(Li),w(nA),f&&t(bNe),f&&t(xo),w(sA),w(iA),w(a_),w(dA),w(H_),f&&t(vNe),f&&t(ki),w(cA),f&&t(FNe),f&&t($o),w(fA),w(gA),w(J_),w(hA),w(B1),f&&t(TNe),f&&t(Pi),w(pA),f&&t(MNe),f&&t(ko),w(uA),w(bA),w(q1),w(vA),w(T9),f&&t(ENe),f&&t(qi),w(FA),f&&t(CNe),f&&t(So),w(TA),w(EA),w(E9),w(CA),w(G9),f&&t(wNe),f&&t(Di),w(wA),f&&t(ANe),f&&t(Ro),w(AA),w(LA),w(V9),w(xA),w(Nb),f&&t(yNe),f&&t(Vi),w($A),f&&t(LNe),f&&t(Po),w(kA),w(RA),w(Db),w(PA),w(_2),f&&t(xNe),f&&t(Wi),w(BA),f&&t($Ne),f&&t(Bo),w(IA),w(NA),w(v2),w(jA),w(A2),f&&t(kNe),f&&t(Ui),w(DA),f&&t(SNe),f&&t(Io),w(GA),w(VA),w(L2),w(XA),w(c4),f&&t(RNe),f&&t(Ki),w(zA),f&&t(PNe),f&&t(qo),w(WA),w(HA),w(m4),w(UA),w(ev),f&&t(BNe),f&&t(od),w(JA),f&&t(INe),f&&t(No),w(YA),w(ZA),w(rv),w(ey),w(nv),f&&t(qNe),f&&t(ad),w(oy),f&&t(NNe),f&&t(jo),w(ry),w(ay),w(lv),w(ny),w(Tv),f&&t(jNe),f&&t(ld),w(sy),f&&t(DNe),f&&t(Do),w(ly),w(dy),w(Ev),w(cy),w(Av),f&&t(GNe),f&&t(cd),w(fy),f&&t(ONe),f&&t(Go),w(my),w(hy),w(Lv),w(py),w(jv),f&&t(VNe),f&&t(gd),w(uy),f&&t(XNe),f&&t(Oo),w(_y),w(vy),w(Gv),w(Fy),w(Hv),f&&t(zNe),f&&t(ud),w(Ty),f&&t(WNe),f&&t(Vo),w(My),w(Cy),w(Jv),w(wy),w(lF),f&&t(QNe),f&&t(vd),w(Ay),f&&t(HNe),f&&t(Xo),w(yy),w(xy),w(dF),w($y),w(gF),f&&t(UNe),f&&t(Md),w(Sy),f&&t(JNe),f&&t(zo),w(Ry),w(By),w(pF),w(Iy),w(MF),f&&t(YNe),f&&t(wd),w(qy),f&&t(KNe),f&&t(Wo),w(Ny),w(Dy),w(CF),w(Gy),w(xF),f&&t(ZNe),f&&t(xd),w(Oy),f&&t(eje),f&&t(Qo),w(Vy),w(zy),w(kF),w(Wy),w(BF),f&&t(oje),f&&t(Sd),w(Hy),f&&t(rje),f&&t(Ho),w(Uy),w(Yy),w(qF),w(Ky),w(DF),f&&t(tje),f&&t(Bd),w(Zy),f&&t(aje),f&&t(Uo),w(eL),w(rL),w(OF),w(tL),w(HF),f&&t(nje),f&&t(Nd),w(aL),f&&t(sje),f&&t(Jo),w(nL),w(lL),w(JF),w(iL),w(ZF),f&&t(lje),f&&t(Gd),w(dL),f&&t(ije),f&&t(Yo),w(cL),w(mL),w(oT),w(gL),w(QT),f&&t(dje),f&&t(Xd),w(hL),f&&t(cje),f&&t(Ko),w(pL),w(_L),w(UT),w(bL),w(v7),f&&t(fje),f&&t(Qd),w(vL),f&&t(mje),f&&t(Zo),w(FL),w(ML),w(T7),w(EL),w(P7),f&&t(gje),f&&t(Jd),w(CL),f&&t(hje),f&&t(er),w(wL),w(yL),w(I7),w(LL),w(G7),f&&t(pje),f&&t(Zd),w(xL),f&&t(uje),f&&t(or),w($L),w(SL),w(V7),w(RL),w(cM),f&&t(_je),f&&t(rc),w(PL),f&&t(bje),f&&t(rr),w(BL),w(qL),w(mM),w(NL),w(EM),f&&t(vje),f&&t(nc),w(jL),f&&t(Fje),f&&t(tr),w(DL),w(OL),w(wM),w(VL),w(KM),f&&t(Tje),f&&t(ic),w(XL),f&&t(Mje),f&&t(ar),w(zL),w(QL),w(eE),w(HL),w(bE),f&&t(Eje),f&&t(fc),w(UL),f&&t(Cje),f&&t(nr),w(JL),w(KL),w(FE),w(ZL),w(EE),f&&t(wje),f&&t(hc),w(o8),f&&t(Aje),f&&t(sr),w(r8),w(a8),w(wE),w(n8),w(yE),f&&t(yje),f&&t(_c),w(s8),f&&t(Lje),f&&t(lr),w(l8),w(d8),w(xE),w(c8),w(JE),f&&t(xje),f&&t(Fc),w(f8),f&&t($je),f&&t(ir),w(m8),w(h8),w(KE),w(p8),w(vC),f&&t(kje),f&&t(Ec),w(u8),f&&t(Sje),f&&t(dr),w(_8),w(v8),w(TC),w(F8),w(EC),f&&t(Rje),f&&t(Ac),w(T8),f&&t(Pje),f&&t(cr),w(M8),w(C8),w(wC),w(w8),w(yC),f&&t(Bje),f&&t(xc),w(A8),f&&t(Ije),f&&t(fr),w(y8),w(x8),w(xC),w($8),w(o5),f&&t(qje),f&&t(Sc),w(k8),f&&t(Nje),f&&t(mr),w(S8),w(P8),w(t5),w(B8),w(g5),f&&t(jje),f&&t(Bc),w(I8),f&&t(Dje),f&&t(gr),w(q8),w(j8),w(p5),w(D8),w(L5),f&&t(Gje),f&&t(Nc),w(G8),f&&t(Oje),f&&t(hr),w(O8),w(X8),w($5),w(z8),w(G5),f&&t(Vje),f&&t(Gc),w(W8),f&&t(Xje),f&&t(pr),w(Q8),w(U8),w(V5),w(J8),w(Z5),f&&t(zje),f&&t(Xc),w(Y8),f&&t(Wje),f&&t(ur),w(K8),w(ex),w(o3),w(ox),w(m3),f&&t(Qje),f&&t(Qc),w(rx),f&&t(Hje),f&&t(_r),w(tx),w(nx),w(h3),w(sx),w(w3),f&&t(Uje),f&&t(Jc),w(lx),f&&t(Jje),f&&t(br),w(ix),w(cx),w(y3),w(fx),w(I3),f&&t(Yje),f&&t(Zc),w(mx),f&&t(Kje),f&&t(vr),w(gx),w(px),w(N3),w(ux),w(Q3),f&&t(Zje),f&&t(rf),w(_x),f&&t(eDe),f&&t(Fr),w(bx),w(Fx),w(U3),w(Tx),w(Y3),f&&t(oDe),f&&t(nf),w(Mx),f&&t(rDe),f&&t(Tr),w(Ex),w(wx),w(Z3),w(Ax),w(rw),f&&t(tDe),f&&t(df),w(Lx),f&&t(aDe),f&&t(Mr),w(xx),w(kx),w(aw),w(Sx),w(sw)}}}const FSt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function TSt(L){return T$t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class LSt extends _$t{constructor(g){super();b$t(this,g,TSt,vSt,v$t,{})}}export{LSt as default,FSt as metadata};
