import{S as Fp,i as Wp,s as Np,e as o,k as c,w as _,t as r,M as jp,c as s,d as t,m as d,a as l,x as b,h as a,b as i,G as e,g as m,y as v,q as E,o as $,B as k,v as zp,L as Bp}from"../../chunks/vendor-hf-doc-builder.js";import{T as Rp}from"../../chunks/Tip-hf-doc-builder.js";import{D as w}from"../../chunks/Docstring-hf-doc-builder.js";import{C as im}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Wn}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Vp}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Up(lr){let A,z,D,O,W;return O=new im({props:{code:`class PrinterCallback(TrainerCallback):
    def on_log(self, args, state, control, logs=None, **kwargs):
        _ = logs.pop("total_flos", None)
        if state.is_local_process_zero:
            print(logs)`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">PrinterCallback</span>(<span class="hljs-title class_ inherited__">TrainerCallback</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on_log</span>(<span class="hljs-params">self, args, state, control, logs=<span class="hljs-literal">None</span>, **kwargs</span>):
        _ = logs.pop(<span class="hljs-string">&quot;total_flos&quot;</span>, <span class="hljs-literal">None</span>)
        <span class="hljs-keyword">if</span> state.is_local_process_zero:
            <span class="hljs-built_in">print</span>(logs)`}}),{c(){A=o("p"),z=r("Example:"),D=c(),_(O.$$.fragment)},l(y){A=s(y,"P",{});var N=l(A);z=a(N,"Example:"),N.forEach(t),D=d(y),b(O.$$.fragment,y)},m(y,N){m(y,A,N),e(A,z),m(y,D,N),v(O,y,N),W=!0},p:Bp,i(y){W||(E(O.$$.fragment,y),W=!0)},o(y){$(O.$$.fragment,y),W=!1},d(y){y&&t(A),y&&t(D),k(O,y)}}}function qp(lr){let A,z,D,O,W,y,N,ee;return{c(){A=o("p"),z=r(`In all this class, one step is to be understood as one update step. When using gradient accumulation, one update
step may require several forward and backward passes: if you use `),D=o("code"),O=r("gradient_accumulation_steps=n"),W=r(`, then one update
step requires going through `),y=o("em"),N=r("n"),ee=r(" batches.")},l(te){A=s(te,"P",{});var j=l(A);z=a(j,`In all this class, one step is to be understood as one update step. When using gradient accumulation, one update
step may require several forward and backward passes: if you use `),D=s(j,"CODE",{});var G=l(D);O=a(G,"gradient_accumulation_steps=n"),G.forEach(t),W=a(j,`, then one update
step requires going through `),y=s(j,"EM",{});var ir=l(y);N=a(ir,"n"),ir.forEach(t),ee=a(j," batches."),j.forEach(t)},m(te,j){m(te,A,j),e(A,z),e(A,D),e(D,O),e(A,W),e(A,y),e(y,N),e(A,ee)},d(te){te&&t(A)}}}function Gp(lr){let A,z,D,O,W,y,N,ee,te,j,G,ir,cr,ts,rs,Nn,B,as,dr,ns,os,fr,ss,ls,mr,is,cs,jn,Ee,ds,hr,fs,ms,zn,x,pr,gr,hs,ps,gs,K,ur,us,_s,_r,bs,vs,br,Es,$s,ks,vr,Er,Ts,Cs,ws,$e,$r,ys,As,Ze,Ls,Ds,Os,ke,kr,xs,Ms,et,Ss,Is,Ps,Te,Tr,Fs,Ws,tt,Ns,js,zs,Ce,Cr,Bs,Rs,rt,Vs,Us,qs,we,wr,Gs,Hs,at,Js,Ys,Bn,S,Xs,yr,Ks,Qs,Ar,Zs,el,Lr,tl,rl,Dr,al,nl,Or,ol,sl,Rn,re,ye,oa,nt,ll,sa,il,Vn,Ae,cl,xr,dl,fl,Un,H,ot,ml,ae,hl,Mr,pl,gl,st,ul,_l,bl,R,lt,vl,la,El,$l,L,kl,ia,Tl,Cl,ca,wl,yl,da,Al,Ll,fa,Dl,Ol,ma,xl,Ml,ha,Sl,Il,pa,Pl,Fl,ga,Wl,Nl,ua,jl,zl,Bl,it,Rl,ct,Vl,Ul,qn,ne,dt,ql,ft,Gl,Sr,Hl,Jl,Gn,oe,mt,Yl,ht,Xl,Ir,Kl,Ql,Hn,se,pt,Zl,gt,ei,Pr,ti,ri,Jn,le,ut,ai,_t,ni,Fr,oi,si,Yn,ie,bt,li,ce,ii,Wr,ci,di,vt,fi,mi,Xn,J,Et,hi,de,pi,Nr,gi,ui,$t,_i,bi,vi,V,kt,Ei,Tt,$i,_a,ki,Ti,Ci,Ct,wi,wt,yi,Ai,Li,h,Di,ba,Oi,xi,va,Mi,Si,Ea,Ii,Pi,$a,Fi,Wi,ka,Ni,ji,Ta,zi,Bi,Ca,Ri,Vi,wa,Ui,qi,ya,Gi,Hi,Aa,Ji,Yi,La,Xi,Ki,Da,Qi,Zi,Oa,ec,tc,xa,rc,ac,Ma,nc,oc,Sa,sc,lc,Ia,ic,cc,Pa,dc,fc,Fa,mc,hc,Kn,Y,yt,pc,X,gc,jr,uc,_c,At,bc,vc,Wa,Ec,$c,kc,Q,Lt,Tc,Na,Cc,wc,p,yc,ja,Ac,Lc,za,Dc,Oc,Ba,xc,Mc,Ra,Sc,Ic,zr,Pc,Fc,Va,Wc,Nc,Ua,jc,zc,qa,Bc,Rc,Ga,Vc,Uc,Ha,qc,Gc,Ja,Hc,Jc,Ya,Yc,Xc,Xa,Kc,Qc,Ka,Zc,ed,Qa,td,rd,Za,ad,nd,en,od,sd,tn,ld,id,rn,cd,dd,Qn,fe,Dt,fd,me,md,Br,hd,pd,Ot,gd,ud,Zn,he,xt,_d,Mt,bd,Rr,vd,Ed,eo,pe,Le,an,St,$d,nn,kd,to,T,It,Td,on,Cd,wd,Pt,yd,sn,Ad,Ld,Dd,P,Od,ln,xd,Md,cn,Sd,Id,dn,Pd,Fd,fn,Wd,Nd,mn,jd,zd,Bd,De,Rd,Oe,Ft,Vd,hn,Ud,qd,xe,Wt,Gd,pn,Hd,Jd,Me,Nt,Yd,gn,Xd,Kd,Se,jt,Qd,zt,Zd,Vr,ef,tf,rf,Ie,Bt,af,un,nf,of,Pe,Rt,sf,_n,lf,cf,Fe,Vt,df,bn,ff,mf,We,Ut,hf,vn,pf,gf,Ne,qt,uf,En,_f,bf,je,Gt,vf,$n,Ef,$f,ze,Ht,kf,kn,Tf,Cf,Be,Jt,wf,Tn,yf,ro,Re,Af,Ur,Lf,Df,ao,Yt,no,Ve,Of,Cn,xf,Mf,oo,Xt,so,ge,Ue,wn,Kt,Sf,yn,If,lo,F,Qt,Pf,ue,Ff,qr,Wf,Nf,Gr,jf,zf,Bf,qe,Rf,Ge,Zt,Vf,er,Uf,An,qf,Gf,Hf,He,tr,Jf,rr,Yf,Ln,Xf,Kf,io,_e,Je,Dn,ar,Qf,On,Zf,co,be,nr,em,ve,tm,Hr,rm,am,Jr,nm,om,fo;return y=new Wn({}),nt=new Wn({}),ot=new w({props:{name:"class transformers.integrations.CometCallback",anchor:"transformers.integrations.CometCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/integrations.py#L664"}}),lt=new w({props:{name:"setup",anchor:"transformers.integrations.CometCallback.setup",parameters:[{name:"args",val:""},{name:"state",val:""},{name:"model",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/integrations.py#L675"}}),dt=new w({props:{name:"class transformers.DefaultFlowCallback",anchor:"transformers.DefaultFlowCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/trainer_callback.py#L407"}}),mt=new w({props:{name:"class transformers.PrinterCallback",anchor:"transformers.PrinterCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/trainer_callback.py#L499"}}),pt=new w({props:{name:"class transformers.ProgressCallback",anchor:"transformers.ProgressCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/trainer_callback.py#L457"}}),ut=new w({props:{name:"class transformers.EarlyStoppingCallback",anchor:"transformers.EarlyStoppingCallback",parameters:[{name:"early_stopping_patience",val:": int = 1"},{name:"early_stopping_threshold",val:": typing.Optional[float] = 0.0"}],parametersDescription:[{anchor:"transformers.EarlyStoppingCallback.early_stopping_patience",description:`<strong>early_stopping_patience</strong> (<code>int</code>) &#x2014;
Use with <code>metric_for_best_model</code> to stop training when the specified metric worsens for
<code>early_stopping_patience</code> evaluation calls.`,name:"early_stopping_patience"},{anchor:"transformers.EarlyStoppingCallback.early_stopping_threshold(float,",description:`<strong>early_stopping_threshold(<code>float</code>,</strong> <em>optional</em>) &#x2014;
Use with TrainingArguments <code>metric_for_best_model</code> and <code>early_stopping_patience</code> to denote how much the
specified metric must improve to satisfy early stopping conditions.`,name:"early_stopping_threshold(float,"}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/trainer_callback.py#L510"}}),bt=new w({props:{name:"class transformers.integrations.TensorBoardCallback",anchor:"transformers.integrations.TensorBoardCallback",parameters:[{name:"tb_writer",val:" = None"}],parametersDescription:[{anchor:"transformers.integrations.TensorBoardCallback.tb_writer",description:`<strong>tb_writer</strong> (<code>SummaryWriter</code>, <em>optional</em>) &#x2014;
The writer to use. Will instantiate one if not set.`,name:"tb_writer"}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/integrations.py#L449"}}),Et=new w({props:{name:"class transformers.integrations.WandbCallback",anchor:"transformers.integrations.WandbCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/integrations.py#L538"}}),kt=new w({props:{name:"setup",anchor:"transformers.integrations.WandbCallback.setup",parameters:[{name:"args",val:""},{name:"state",val:""},{name:"model",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/integrations.py#L555"}}),yt=new w({props:{name:"class transformers.integrations.MLflowCallback",anchor:"transformers.integrations.MLflowCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/integrations.py#L764"}}),Lt=new w({props:{name:"setup",anchor:"transformers.integrations.MLflowCallback.setup",parameters:[{name:"args",val:""},{name:"state",val:""},{name:"model",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/integrations.py#L783"}}),Dt=new w({props:{name:"class transformers.integrations.AzureMLCallback",anchor:"transformers.integrations.AzureMLCallback",parameters:[{name:"azureml_run",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/integrations.py#L741"}}),xt=new w({props:{name:"class transformers.integrations.CodeCarbonCallback",anchor:"transformers.integrations.CodeCarbonCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/integrations.py#L971"}}),St=new Wn({}),It=new w({props:{name:"class transformers.TrainerCallback",anchor:"transformers.TrainerCallback",parameters:[],parametersDescription:[{anchor:"transformers.TrainerCallback.args",description:`<strong>args</strong> (<a href="/docs/transformers/pr_18056/en/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a>) &#x2014;
The training arguments used to instantiate the <a href="/docs/transformers/pr_18056/en/main_classes/trainer#transformers.Trainer">Trainer</a>.`,name:"args"},{anchor:"transformers.TrainerCallback.state",description:`<strong>state</strong> (<a href="/docs/transformers/pr_18056/en/main_classes/callback#transformers.TrainerState">TrainerState</a>) &#x2014;
The current state of the <a href="/docs/transformers/pr_18056/en/main_classes/trainer#transformers.Trainer">Trainer</a>.`,name:"state"},{anchor:"transformers.TrainerCallback.control",description:`<strong>control</strong> (<a href="/docs/transformers/pr_18056/en/main_classes/callback#transformers.TrainerControl">TrainerControl</a>) &#x2014;
The object that is returned to the <a href="/docs/transformers/pr_18056/en/main_classes/trainer#transformers.Trainer">Trainer</a> and can be used to make some decisions.`,name:"control"},{anchor:"transformers.TrainerCallback.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_18056/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <code>torch.nn.Module</code>) &#x2014;
The model being trained.`,name:"model"},{anchor:"transformers.TrainerCallback.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_18056/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer used for encoding the data.`,name:"tokenizer"},{anchor:"transformers.TrainerCallback.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.Optimizer</code>) &#x2014;
The optimizer used for the training steps.`,name:"optimizer"},{anchor:"transformers.TrainerCallback.lr_scheduler",description:`<strong>lr_scheduler</strong> (<code>torch.optim.lr_scheduler.LambdaLR</code>) &#x2014;
The scheduler used for setting the learning rate.`,name:"lr_scheduler"},{anchor:"transformers.TrainerCallback.train_dataloader",description:`<strong>train_dataloader</strong> (<code>torch.utils.data.DataLoader</code>, <em>optional</em>) &#x2014;
The current dataloader used for training.`,name:"train_dataloader"},{anchor:"transformers.TrainerCallback.eval_dataloader",description:`<strong>eval_dataloader</strong> (<code>torch.utils.data.DataLoader</code>, <em>optional</em>) &#x2014;
The current dataloader used for training.`,name:"eval_dataloader"},{anchor:"transformers.TrainerCallback.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics computed by the last evaluation phase.</p>
<p>Those are only accessible in the event <code>on_evaluate</code>.`,name:"metrics"},{anchor:"transformers.TrainerCallback.logs",description:`<strong>logs</strong>  (<code>Dict[str, float]</code>) &#x2014;
The values to log.</p>
<p>Those are only accessible in the event <code>on_log</code>.`,name:"logs"}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/trainer_callback.py#L160"}}),De=new Vp({props:{anchor:"transformers.TrainerCallback.example",$$slots:{default:[Up]},$$scope:{ctx:lr}}}),Ft=new w({props:{name:"on_epoch_begin",anchor:"transformers.TrainerCallback.on_epoch_begin",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/trainer_callback.py#L228"}}),Wt=new w({props:{name:"on_epoch_end",anchor:"transformers.TrainerCallback.on_epoch_end",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/trainer_callback.py#L234"}}),Nt=new w({props:{name:"on_evaluate",anchor:"transformers.TrainerCallback.on_evaluate",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/trainer_callback.py#L260"}}),jt=new w({props:{name:"on_init_end",anchor:"transformers.TrainerCallback.on_init_end",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/trainer_callback.py#L210"}}),Bt=new w({props:{name:"on_log",anchor:"transformers.TrainerCallback.on_log",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/trainer_callback.py#L272"}}),Rt=new w({props:{name:"on_prediction_step",anchor:"transformers.TrainerCallback.on_prediction_step",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/trainer_callback.py#L278"}}),Vt=new w({props:{name:"on_save",anchor:"transformers.TrainerCallback.on_save",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/trainer_callback.py#L266"}}),Ut=new w({props:{name:"on_step_begin",anchor:"transformers.TrainerCallback.on_step_begin",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/trainer_callback.py#L240"}}),qt=new w({props:{name:"on_step_end",anchor:"transformers.TrainerCallback.on_step_end",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/trainer_callback.py#L253"}}),Gt=new w({props:{name:"on_substep_end",anchor:"transformers.TrainerCallback.on_substep_end",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/trainer_callback.py#L247"}}),Ht=new w({props:{name:"on_train_begin",anchor:"transformers.TrainerCallback.on_train_begin",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/trainer_callback.py#L216"}}),Jt=new w({props:{name:"on_train_end",anchor:"transformers.TrainerCallback.on_train_end",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/trainer_callback.py#L222"}}),Yt=new im({props:{code:`

`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallback</span>(<span class="hljs-title class_ inherited__">TrainerCallback</span>):
    <span class="hljs-string">&quot;A callback that prints a message at the beginning of training&quot;</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on_train_begin</span>(<span class="hljs-params">self, args, state, control, **kwargs</span>):
        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Starting training&quot;</span>)


trainer = Trainer(
    model,
    args,
    train_dataset=train_dataset,
    eval_dataset=eval_dataset,
    callbacks=[MyCallback],  <span class="hljs-comment"># We can either pass the callback class this way or an instance of it (MyCallback())</span>
)`}}),Xt=new im({props:{code:`trainer = Trainer(...)
trainer.add_callback(MyCallback)
# Alternatively, we can pass an instance of the callback class
trainer.add_callback(MyCallback())`,highlighted:`trainer = Trainer(...)
trainer.add_callback(MyCallback)
<span class="hljs-comment"># Alternatively, we can pass an instance of the callback class</span>
trainer.add_callback(MyCallback())`}}),Kt=new Wn({}),Qt=new w({props:{name:"class transformers.TrainerState",anchor:"transformers.TrainerState",parameters:[{name:"epoch",val:": typing.Optional[float] = None"},{name:"global_step",val:": int = 0"},{name:"max_steps",val:": int = 0"},{name:"num_train_epochs",val:": int = 0"},{name:"total_flos",val:": float = 0"},{name:"log_history",val:": typing.List[typing.Dict[str, float]] = None"},{name:"best_metric",val:": typing.Optional[float] = None"},{name:"best_metric_checkpoint",val:": typing.Optional[float] = None"},{name:"best_model_checkpoint",val:": typing.Optional[str] = None"},{name:"is_local_process_zero",val:": bool = True"},{name:"is_world_process_zero",val:": bool = True"},{name:"is_hyper_param_search",val:": bool = False"},{name:"trial_name",val:": str = None"},{name:"trial_params",val:": typing.Dict[str, typing.Union[str, float, int, bool]] = None"}],parametersDescription:[{anchor:"transformers.TrainerState.epoch",description:`<strong>epoch</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Only set during training, will represent the epoch the training is at (the decimal part being the
percentage of the current epoch completed).`,name:"epoch"},{anchor:"transformers.TrainerState.global_step",description:`<strong>global_step</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
During training, represents the number of update steps completed.`,name:"global_step"},{anchor:"transformers.TrainerState.max_steps",description:`<strong>max_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The number of update steps to do during the current training.`,name:"max_steps"},{anchor:"transformers.TrainerState.total_flos",description:`<strong>total_flos</strong> (<code>float</code>, <em>optional</em>, defaults to 0) &#x2014;
The total number of floating operations done by the model since the beginning of training (stored as floats
to avoid overflow).`,name:"total_flos"},{anchor:"transformers.TrainerState.log_history",description:`<strong>log_history</strong> (<code>List[Dict[str, float]]</code>, <em>optional</em>) &#x2014;
The list of logs done since the beginning of training.`,name:"log_history"},{anchor:"transformers.TrainerState.best_metric",description:`<strong>best_metric</strong> (<code>float</code>, <em>optional</em>) &#x2014;
When tracking the best model, the value of the best metric encountered so far.`,name:"best_metric"},{anchor:"transformers.TrainerState.best_model_checkpoint",description:`<strong>best_model_checkpoint</strong> (<code>str</code>, <em>optional</em>) &#x2014;
When tracking the best model, the value of the name of the checkpoint for the best model encountered so
far.`,name:"best_model_checkpoint"},{anchor:"transformers.TrainerState.is_local_process_zero",description:`<strong>is_local_process_zero</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not this process is the local (e.g., on one machine if training in a distributed fashion on
several machines) main process.`,name:"is_local_process_zero"},{anchor:"transformers.TrainerState.is_world_process_zero",description:`<strong>is_world_process_zero</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not this process is the global main process (when training in a distributed fashion on several
machines, this is only going to be <code>True</code> for one process).`,name:"is_world_process_zero"},{anchor:"transformers.TrainerState.is_hyper_param_search",description:`<strong>is_hyper_param_search</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether we are in the process of a hyper parameter search using Trainer.hyperparameter_search. This will
impact the way data will be logged in TensorBoard.`,name:"is_hyper_param_search"}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/trainer_callback.py#L35"}}),qe=new Rp({props:{$$slots:{default:[qp]},$$scope:{ctx:lr}}}),Zt=new w({props:{name:"load_from_json",anchor:"transformers.TrainerState.load_from_json",parameters:[{name:"json_path",val:": str"}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/trainer_callback.py#L102"}}),tr=new w({props:{name:"save_to_json",anchor:"transformers.TrainerState.save_to_json",parameters:[{name:"json_path",val:": str"}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/trainer_callback.py#L96"}}),ar=new Wn({}),nr=new w({props:{name:"class transformers.TrainerControl",anchor:"transformers.TrainerControl",parameters:[{name:"should_training_stop",val:": bool = False"},{name:"should_epoch_stop",val:": bool = False"},{name:"should_save",val:": bool = False"},{name:"should_evaluate",val:": bool = False"},{name:"should_log",val:": bool = False"}],parametersDescription:[{anchor:"transformers.TrainerControl.should_training_stop",description:`<strong>should_training_stop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the training should be interrupted.</p>
<p>If <code>True</code>, this variable will not be set back to <code>False</code>. The training will just stop.`,name:"should_training_stop"},{anchor:"transformers.TrainerControl.should_epoch_stop",description:`<strong>should_epoch_stop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the current epoch should be interrupted.</p>
<p>If <code>True</code>, this variable will be set back to <code>False</code> at the beginning of the next epoch.`,name:"should_epoch_stop"},{anchor:"transformers.TrainerControl.should_save",description:`<strong>should_save</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the model should be saved at this step.</p>
<p>If <code>True</code>, this variable will be set back to <code>False</code> at the beginning of the next step.`,name:"should_save"},{anchor:"transformers.TrainerControl.should_evaluate",description:`<strong>should_evaluate</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the model should be evaluated at this step.</p>
<p>If <code>True</code>, this variable will be set back to <code>False</code> at the beginning of the next step.`,name:"should_evaluate"},{anchor:"transformers.TrainerControl.should_log",description:`<strong>should_log</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the logs should be reported at this step.</p>
<p>If <code>True</code>, this variable will be set back to <code>False</code> at the beginning of the next step.`,name:"should_log"}],source:"https://github.com/huggingface/transformers/blob/vr_18056/src/transformers/trainer_callback.py#L111"}}),{c(){A=o("meta"),z=c(),D=o("h1"),O=o("a"),W=o("span"),_(y.$$.fragment),N=c(),ee=o("span"),te=r("Callbacks"),j=c(),G=o("p"),ir=r(`Callbacks are objects that can customize the behavior of the training loop in the PyTorch
`),cr=o("a"),ts=r("Trainer"),rs=r(` (this feature is not yet implemented in TensorFlow) that can inspect the training loop
state (for progress reporting, logging on TensorBoard or other ML platforms\u2026) and take decisions (like early
stopping).`),Nn=c(),B=o("p"),as=r("Callbacks are \u201Cread only\u201D pieces of code, apart from the "),dr=o("a"),ns=r("TrainerControl"),os=r(` object they return, they
cannot change anything in the training loop. For customizations that require changes in the training loop, you should
subclass `),fr=o("a"),ss=r("Trainer"),ls=r(" and override the methods you need (see "),mr=o("a"),is=r("trainer"),cs=r(" for examples)."),jn=c(),Ee=o("p"),ds=r("By default a "),hr=o("a"),fs=r("Trainer"),ms=r(" will use the following callbacks:"),zn=c(),x=o("ul"),pr=o("li"),gr=o("a"),hs=r("DefaultFlowCallback"),ps=r(" which handles the default behavior for logging, saving and evaluation."),gs=c(),K=o("li"),ur=o("a"),us=r("PrinterCallback"),_s=r(" or "),_r=o("a"),bs=r("ProgressCallback"),vs=r(` to display progress and print the
logs (the first one is used if you deactivate tqdm through the `),br=o("a"),Es=r("TrainingArguments"),$s=r(`, otherwise
it\u2019s the second one).`),ks=c(),vr=o("li"),Er=o("a"),Ts=r("TensorBoardCallback"),Cs=r(` if tensorboard is accessible (either through PyTorch >= 1.4
or tensorboardX).`),ws=c(),$e=o("li"),$r=o("a"),ys=r("WandbCallback"),As=r(" if "),Ze=o("a"),Ls=r("wandb"),Ds=r(" is installed."),Os=c(),ke=o("li"),kr=o("a"),xs=r("CometCallback"),Ms=r(" if "),et=o("a"),Ss=r("comet_ml"),Is=r(" is installed."),Ps=c(),Te=o("li"),Tr=o("a"),Fs=r("MLflowCallback"),Ws=r(" if "),tt=o("a"),Ns=r("mlflow"),js=r(" is installed."),zs=c(),Ce=o("li"),Cr=o("a"),Bs=r("AzureMLCallback"),Rs=r(" if "),rt=o("a"),Vs=r("azureml-sdk"),Us=r(` is
installed.`),qs=c(),we=o("li"),wr=o("a"),Gs=r("CodeCarbonCallback"),Hs=r(" if "),at=o("a"),Js=r("codecarbon"),Ys=r(` is
installed.`),Bn=c(),S=o("p"),Xs=r("The main class that implements callbacks is "),yr=o("a"),Ks=r("TrainerCallback"),Qs=r(`. It gets the
`),Ar=o("a"),Zs=r("TrainingArguments"),el=r(" used to instantiate the "),Lr=o("a"),tl=r("Trainer"),rl=r(`, can access that
Trainer\u2019s internal state via `),Dr=o("a"),al=r("TrainerState"),nl=r(`, and can take some actions on the training loop via
`),Or=o("a"),ol=r("TrainerControl"),sl=r("."),Rn=c(),re=o("h2"),ye=o("a"),oa=o("span"),_(nt.$$.fragment),ll=c(),sa=o("span"),il=r("Available Callbacks"),Vn=c(),Ae=o("p"),cl=r("Here is the list of the available "),xr=o("a"),dl=r("TrainerCallback"),fl=r(" in the library:"),Un=c(),H=o("div"),_(ot.$$.fragment),ml=c(),ae=o("p"),hl=r("A "),Mr=o("a"),pl=r("TrainerCallback"),gl=r(" that sends the logs to "),st=o("a"),ul=r("Comet ML"),_l=r("."),bl=c(),R=o("div"),_(lt.$$.fragment),vl=c(),la=o("p"),El=r("Setup the optional Comet.ml integration."),$l=c(),L=o("p"),kl=r(`Environment:
COMET_MODE (`),ia=o("code"),Tl=r("str"),Cl=r(", "),ca=o("em"),wl=r("optional"),yl=r(`):
Whether to create an online, offline experiment or disable Comet logging. Can be \u201COFFLINE\u201D, \u201CONLINE\u201D,
or \u201CDISABLED\u201D. Defaults to \u201CONLINE\u201D.
COMET_PROJECT_NAME (`),da=o("code"),Al=r("str"),Ll=r(", "),fa=o("em"),Dl=r("optional"),Ol=r(`):
Comet project name for experiments
COMET_OFFLINE_DIRECTORY (`),ma=o("code"),xl=r("str"),Ml=r(", "),ha=o("em"),Sl=r("optional"),Il=r(`):
Folder to use for saving offline experiments when `),pa=o("code"),Pl=r("COMET_MODE"),Fl=r(` is \u201COFFLINE\u201D
COMET_LOG_ASSETS (`),ga=o("code"),Wl=r("str"),Nl=r(", "),ua=o("em"),jl=r("optional"),zl=r(`):
Whether or not to log training assets (tf event logs, checkpoints, etc), to Comet. Can be \u201CTRUE\u201D, or
\u201CFALSE\u201D. Defaults to \u201CTRUE\u201D.`),Bl=c(),it=o("p"),Rl=r(`For a number of configurable items in the environment, see
`),ct=o("a"),Vl=r("here"),Ul=r("."),qn=c(),ne=o("div"),_(dt.$$.fragment),ql=c(),ft=o("p"),Gl=r("A "),Sr=o("a"),Hl=r("TrainerCallback"),Jl=r(" that handles the default flow of the training loop for logs, evaluation and checkpoints."),Gn=c(),oe=o("div"),_(mt.$$.fragment),Yl=c(),ht=o("p"),Xl=r("A bare "),Ir=o("a"),Kl=r("TrainerCallback"),Ql=r(" that just prints the logs."),Hn=c(),se=o("div"),_(pt.$$.fragment),Zl=c(),gt=o("p"),ei=r("A "),Pr=o("a"),ti=r("TrainerCallback"),ri=r(" that displays the progress of training or evaluation."),Jn=c(),le=o("div"),_(ut.$$.fragment),ai=c(),_t=o("p"),ni=r("A "),Fr=o("a"),oi=r("TrainerCallback"),si=r(" that handles early stopping."),Yn=c(),ie=o("div"),_(bt.$$.fragment),li=c(),ce=o("p"),ii=r("A "),Wr=o("a"),ci=r("TrainerCallback"),di=r(" that sends the logs to "),vt=o("a"),fi=r("TensorBoard"),mi=r("."),Xn=c(),J=o("div"),_(Et.$$.fragment),hi=c(),de=o("p"),pi=r("A "),Nr=o("a"),gi=r("TrainerCallback"),ui=r(" that sends the logs to "),$t=o("a"),_i=r("Weight and Biases"),bi=r("."),vi=c(),V=o("div"),_(kt.$$.fragment),Ei=c(),Tt=o("p"),$i=r("Setup the optional Weights & Biases ("),_a=o("em"),ki=r("wandb"),Ti=r(") integration."),Ci=c(),Ct=o("p"),wi=r(`One can subclass and override this method to customize the setup if needed. Find more information
`),wt=o("a"),yi=r("here"),Ai=r(`. You can also override the following environment
variables:`),Li=c(),h=o("p"),Di=r(`Environment:
WANDB_LOG_MODEL (`),ba=o("code"),Oi=r("bool"),xi=r(", "),va=o("em"),Mi=r("optional"),Si=r(", defaults to "),Ea=o("code"),Ii=r("False"),Pi=r(`):
Whether or not to log model as artifact at the end of training. Use along with
`),$a=o("em"),Fi=r("TrainingArguments.load_best_model_at_end"),Wi=r(` to upload best model.
WANDB_WATCH (`),ka=o("code"),Ni=r("str"),ji=r(", "),Ta=o("em"),zi=r("optional"),Bi=r(" defaults to "),Ca=o("code"),Ri=r('"gradients"'),Vi=r(`):
Can be `),wa=o("code"),Ui=r('"gradients"'),qi=r(", "),ya=o("code"),Gi=r('"all"'),Hi=r(" or "),Aa=o("code"),Ji=r('"false"'),Yi=r(". Set to "),La=o("code"),Xi=r('"false"'),Ki=r(" to disable gradient logging or "),Da=o("code"),Qi=r('"all"'),Zi=r(` to
log gradients and parameters.
WANDB_PROJECT (`),Oa=o("code"),ec=r("str"),tc=r(", "),xa=o("em"),rc=r("optional"),ac=r(", defaults to "),Ma=o("code"),nc=r('"huggingface"'),oc=r(`):
Set this to a custom string to store results in a different project.
WANDB_DISABLED (`),Sa=o("code"),sc=r("bool"),lc=r(", "),Ia=o("em"),ic=r("optional"),cc=r(", defaults to "),Pa=o("code"),dc=r("False"),fc=r(`):
Whether or not to disable wandb entirely. Set `),Fa=o("em"),mc=r("WANDB_DISABLED=true"),hc=r(" to disable."),Kn=c(),Y=o("div"),_(yt.$$.fragment),pc=c(),X=o("p"),gc=r("A "),jr=o("a"),uc=r("TrainerCallback"),_c=r(" that sends the logs to "),At=o("a"),bc=r("MLflow"),vc=r(`. Can be disabled by setting
environment variable `),Wa=o("code"),Ec=r("DISABLE_MLFLOW_INTEGRATION = TRUE"),$c=r("."),kc=c(),Q=o("div"),_(Lt.$$.fragment),Tc=c(),Na=o("p"),Cc=r("Setup the optional MLflow integration."),wc=c(),p=o("p"),yc=r(`Environment:
HF_MLFLOW_LOG_ARTIFACTS (`),ja=o("code"),Ac=r("str"),Lc=r(", "),za=o("em"),Dc=r("optional"),Oc=r(`):
Whether to use MLflow .log_artifact() facility to log artifacts. This only makes sense if logging to a
remote server, e.g. s3 or GCS. If set to `),Ba=o("code"),xc=r("True"),Mc=r(" or "),Ra=o("em"),Sc=r("1"),Ic=r(`, will copy each saved checkpoint on each save in
`),zr=o("a"),Pc=r("TrainingArguments"),Fc=r("\u2019s "),Va=o("code"),Wc=r("output_dir"),Nc=r(` to the local or remote artifact storage. Using it without a remote
storage will just copy the files to your artifact location.
MLFLOW_EXPERIMENT_NAME (`),Ua=o("code"),jc=r("str"),zc=r(", "),qa=o("em"),Bc=r("optional"),Rc=r(`):
Whether to use an MLflow experiment_name under which to launch the run. Default to \u201CNone\u201D which will
point to the \u201CDefault\u201D experiment in MLflow. Otherwise, it is a case sensitive name of the experiment
to be activated. If an experiment with this name does not exist, a new experiment with this name is
created.
MLFLOW_TAGS (`),Ga=o("code"),Vc=r("str"),Uc=r(", "),Ha=o("em"),qc=r("optional"),Gc=r(`):
A string dump of a dictionary of key/value pair to be added to the MLflow run as tags. Example:
os.environ[\u2018MLFLOW_TAGS\u2019]=\u2019{\u201Crelease.candidate\u201D: \u201CRC1\u201D, \u201Crelease.version\u201D: \u201C2.2.0\u201D}\u2019
MLFLOW_NESTED_RUN (`),Ja=o("code"),Hc=r("str"),Jc=r(", "),Ya=o("em"),Yc=r("optional"),Xc=r(`):
Whether to use MLflow nested runs. If set to `),Xa=o("code"),Kc=r("True"),Qc=r(" or "),Ka=o("em"),Zc=r("1"),ed=r(`, will create a nested run inside the current
run.
MLFLOW_RUN_ID (`),Qa=o("code"),td=r("str"),rd=r(", "),Za=o("em"),ad=r("optional"),nd=r(`):
Allow to reattach to an existing run which can be usefull when resuming training from a checkpoint.
When MLFLOW_RUN_ID environment variable is set, start_run attempts to resume a run with the specified
run ID and other parameters are ignored.
MLFLOW_FLATTEN_PARAMS (`),en=o("code"),od=r("str"),sd=r(", "),tn=o("em"),ld=r("optional"),id=r(`):
Whether to flatten the parameters dictionary before logging. Default to `),rn=o("code"),cd=r("False"),dd=r("."),Qn=c(),fe=o("div"),_(Dt.$$.fragment),fd=c(),me=o("p"),md=r("A "),Br=o("a"),hd=r("TrainerCallback"),pd=r(" that sends the logs to "),Ot=o("a"),gd=r("AzureML"),ud=r("."),Zn=c(),he=o("div"),_(xt.$$.fragment),_d=c(),Mt=o("p"),bd=r("A "),Rr=o("a"),vd=r("TrainerCallback"),Ed=r(" that tracks the CO2 emission of training."),eo=c(),pe=o("h2"),Le=o("a"),an=o("span"),_(St.$$.fragment),$d=c(),nn=o("span"),kd=r("TrainerCallback"),to=c(),T=o("div"),_(It.$$.fragment),Td=c(),on=o("p"),Cd=r(`A class for objects that will inspect the state of the training loop at some events and take some decisions. At
each of those events the following arguments are available:`),wd=c(),Pt=o("p"),yd=r("The "),sn=o("code"),Ad=r("control"),Ld=r(` object is the only one that can be changed by the callback, in which case the event that changes it
should return the modified version.`),Dd=c(),P=o("p"),Od=r("The argument "),ln=o("code"),xd=r("args"),Md=r(", "),cn=o("code"),Sd=r("state"),Id=r(" and "),dn=o("code"),Pd=r("control"),Fd=r(" are positionals for all events, all the others are grouped in "),fn=o("code"),Wd=r("kwargs"),Nd=r(`.
You can unpack the ones you need in the signature of the event using them. As an example, see the code of the
simple `),mn=o("code"),jd=r("PrinterCallback"),zd=r("."),Bd=c(),_(De.$$.fragment),Rd=c(),Oe=o("div"),_(Ft.$$.fragment),Vd=c(),hn=o("p"),Ud=r("Event called at the beginning of an epoch."),qd=c(),xe=o("div"),_(Wt.$$.fragment),Gd=c(),pn=o("p"),Hd=r("Event called at the end of an epoch."),Jd=c(),Me=o("div"),_(Nt.$$.fragment),Yd=c(),gn=o("p"),Xd=r("Event called after an evaluation phase."),Kd=c(),Se=o("div"),_(jt.$$.fragment),Qd=c(),zt=o("p"),Zd=r("Event called at the end of the initialization of the "),Vr=o("a"),ef=r("Trainer"),tf=r("."),rf=c(),Ie=o("div"),_(Bt.$$.fragment),af=c(),un=o("p"),nf=r("Event called after logging the last logs."),of=c(),Pe=o("div"),_(Rt.$$.fragment),sf=c(),_n=o("p"),lf=r("Event called after a prediction step."),cf=c(),Fe=o("div"),_(Vt.$$.fragment),df=c(),bn=o("p"),ff=r("Event called after a checkpoint save."),mf=c(),We=o("div"),_(Ut.$$.fragment),hf=c(),vn=o("p"),pf=r(`Event called at the beginning of a training step. If using gradient accumulation, one training step might take
several inputs.`),gf=c(),Ne=o("div"),_(qt.$$.fragment),uf=c(),En=o("p"),_f=r(`Event called at the end of a training step. If using gradient accumulation, one training step might take
several inputs.`),bf=c(),je=o("div"),_(Gt.$$.fragment),vf=c(),$n=o("p"),Ef=r("Event called at the end of an substep during gradient accumulation."),$f=c(),ze=o("div"),_(Ht.$$.fragment),kf=c(),kn=o("p"),Tf=r("Event called at the beginning of training."),Cf=c(),Be=o("div"),_(Jt.$$.fragment),wf=c(),Tn=o("p"),yf=r("Event called at the end of training."),ro=c(),Re=o("p"),Af=r("Here is an example of how to register a custom callback with the PyTorch "),Ur=o("a"),Lf=r("Trainer"),Df=r(":"),ao=c(),_(Yt.$$.fragment),no=c(),Ve=o("p"),Of=r("Another way to register a callback is to call "),Cn=o("code"),xf=r("trainer.add_callback()"),Mf=r(" as follows:"),oo=c(),_(Xt.$$.fragment),so=c(),ge=o("h2"),Ue=o("a"),wn=o("span"),_(Kt.$$.fragment),Sf=c(),yn=o("span"),If=r("TrainerState"),lo=c(),F=o("div"),_(Qt.$$.fragment),Pf=c(),ue=o("p"),Ff=r("A class containing the "),qr=o("a"),Wf=r("Trainer"),Nf=r(` inner state that will be saved along the model and optimizer when checkpointing
and passed to the `),Gr=o("a"),jf=r("TrainerCallback"),zf=r("."),Bf=c(),_(qe.$$.fragment),Rf=c(),Ge=o("div"),_(Zt.$$.fragment),Vf=c(),er=o("p"),Uf=r("Create an instance from the content of "),An=o("code"),qf=r("json_path"),Gf=r("."),Hf=c(),He=o("div"),_(tr.$$.fragment),Jf=c(),rr=o("p"),Yf=r("Save the content of this instance in JSON format inside "),Ln=o("code"),Xf=r("json_path"),Kf=r("."),io=c(),_e=o("h2"),Je=o("a"),Dn=o("span"),_(ar.$$.fragment),Qf=c(),On=o("span"),Zf=r("TrainerControl"),co=c(),be=o("div"),_(nr.$$.fragment),em=c(),ve=o("p"),tm=r("A class that handles the "),Hr=o("a"),rm=r("Trainer"),am=r(" control flow. This class is used by the "),Jr=o("a"),nm=r("TrainerCallback"),om=r(` to activate some
switches in the training loop.`),this.h()},l(n){const f=jp('[data-svelte="svelte-1phssyn"]',document.head);A=s(f,"META",{name:!0,content:!0}),f.forEach(t),z=d(n),D=s(n,"H1",{class:!0});var or=l(D);O=s(or,"A",{id:!0,class:!0,href:!0});var xn=l(O);W=s(xn,"SPAN",{});var cm=l(W);b(y.$$.fragment,cm),cm.forEach(t),xn.forEach(t),N=d(or),ee=s(or,"SPAN",{});var dm=l(ee);te=a(dm,"Callbacks"),dm.forEach(t),or.forEach(t),j=d(n),G=s(n,"P",{});var mo=l(G);ir=a(mo,`Callbacks are objects that can customize the behavior of the training loop in the PyTorch
`),cr=s(mo,"A",{href:!0});var fm=l(cr);ts=a(fm,"Trainer"),fm.forEach(t),rs=a(mo,` (this feature is not yet implemented in TensorFlow) that can inspect the training loop
state (for progress reporting, logging on TensorBoard or other ML platforms\u2026) and take decisions (like early
stopping).`),mo.forEach(t),Nn=d(n),B=s(n,"P",{});var Ye=l(B);as=a(Ye,"Callbacks are \u201Cread only\u201D pieces of code, apart from the "),dr=s(Ye,"A",{href:!0});var mm=l(dr);ns=a(mm,"TrainerControl"),mm.forEach(t),os=a(Ye,` object they return, they
cannot change anything in the training loop. For customizations that require changes in the training loop, you should
subclass `),fr=s(Ye,"A",{href:!0});var hm=l(fr);ss=a(hm,"Trainer"),hm.forEach(t),ls=a(Ye," and override the methods you need (see "),mr=s(Ye,"A",{href:!0});var pm=l(mr);is=a(pm,"trainer"),pm.forEach(t),cs=a(Ye," for examples)."),Ye.forEach(t),jn=d(n),Ee=s(n,"P",{});var ho=l(Ee);ds=a(ho,"By default a "),hr=s(ho,"A",{href:!0});var gm=l(hr);fs=a(gm,"Trainer"),gm.forEach(t),ms=a(ho," will use the following callbacks:"),ho.forEach(t),zn=d(n),x=s(n,"UL",{});var I=l(x);pr=s(I,"LI",{});var sm=l(pr);gr=s(sm,"A",{href:!0});var um=l(gr);hs=a(um,"DefaultFlowCallback"),um.forEach(t),ps=a(sm," which handles the default behavior for logging, saving and evaluation."),sm.forEach(t),gs=d(I),K=s(I,"LI",{});var sr=l(K);ur=s(sr,"A",{href:!0});var _m=l(ur);us=a(_m,"PrinterCallback"),_m.forEach(t),_s=a(sr," or "),_r=s(sr,"A",{href:!0});var bm=l(_r);bs=a(bm,"ProgressCallback"),bm.forEach(t),vs=a(sr,` to display progress and print the
logs (the first one is used if you deactivate tqdm through the `),br=s(sr,"A",{href:!0});var vm=l(br);Es=a(vm,"TrainingArguments"),vm.forEach(t),$s=a(sr,`, otherwise
it\u2019s the second one).`),sr.forEach(t),ks=d(I),vr=s(I,"LI",{});var lm=l(vr);Er=s(lm,"A",{href:!0});var Em=l(Er);Ts=a(Em,"TensorBoardCallback"),Em.forEach(t),Cs=a(lm,` if tensorboard is accessible (either through PyTorch >= 1.4
or tensorboardX).`),lm.forEach(t),ws=d(I),$e=s(I,"LI",{});var Mn=l($e);$r=s(Mn,"A",{href:!0});var $m=l($r);ys=a($m,"WandbCallback"),$m.forEach(t),As=a(Mn," if "),Ze=s(Mn,"A",{href:!0,rel:!0});var km=l(Ze);Ls=a(km,"wandb"),km.forEach(t),Ds=a(Mn," is installed."),Mn.forEach(t),Os=d(I),ke=s(I,"LI",{});var Sn=l(ke);kr=s(Sn,"A",{href:!0});var Tm=l(kr);xs=a(Tm,"CometCallback"),Tm.forEach(t),Ms=a(Sn," if "),et=s(Sn,"A",{href:!0,rel:!0});var Cm=l(et);Ss=a(Cm,"comet_ml"),Cm.forEach(t),Is=a(Sn," is installed."),Sn.forEach(t),Ps=d(I),Te=s(I,"LI",{});var In=l(Te);Tr=s(In,"A",{href:!0});var wm=l(Tr);Fs=a(wm,"MLflowCallback"),wm.forEach(t),Ws=a(In," if "),tt=s(In,"A",{href:!0,rel:!0});var ym=l(tt);Ns=a(ym,"mlflow"),ym.forEach(t),js=a(In," is installed."),In.forEach(t),zs=d(I),Ce=s(I,"LI",{});var Pn=l(Ce);Cr=s(Pn,"A",{href:!0});var Am=l(Cr);Bs=a(Am,"AzureMLCallback"),Am.forEach(t),Rs=a(Pn," if "),rt=s(Pn,"A",{href:!0,rel:!0});var Lm=l(rt);Vs=a(Lm,"azureml-sdk"),Lm.forEach(t),Us=a(Pn,` is
installed.`),Pn.forEach(t),qs=d(I),we=s(I,"LI",{});var Fn=l(we);wr=s(Fn,"A",{href:!0});var Dm=l(wr);Gs=a(Dm,"CodeCarbonCallback"),Dm.forEach(t),Hs=a(Fn," if "),at=s(Fn,"A",{href:!0,rel:!0});var Om=l(at);Js=a(Om,"codecarbon"),Om.forEach(t),Ys=a(Fn,` is
installed.`),Fn.forEach(t),I.forEach(t),Bn=d(n),S=s(n,"P",{});var U=l(S);Xs=a(U,"The main class that implements callbacks is "),yr=s(U,"A",{href:!0});var xm=l(yr);Ks=a(xm,"TrainerCallback"),xm.forEach(t),Qs=a(U,`. It gets the
`),Ar=s(U,"A",{href:!0});var Mm=l(Ar);Zs=a(Mm,"TrainingArguments"),Mm.forEach(t),el=a(U," used to instantiate the "),Lr=s(U,"A",{href:!0});var Sm=l(Lr);tl=a(Sm,"Trainer"),Sm.forEach(t),rl=a(U,`, can access that
Trainer\u2019s internal state via `),Dr=s(U,"A",{href:!0});var Im=l(Dr);al=a(Im,"TrainerState"),Im.forEach(t),nl=a(U,`, and can take some actions on the training loop via
`),Or=s(U,"A",{href:!0});var Pm=l(Or);ol=a(Pm,"TrainerControl"),Pm.forEach(t),sl=a(U,"."),U.forEach(t),Rn=d(n),re=s(n,"H2",{class:!0});var po=l(re);ye=s(po,"A",{id:!0,class:!0,href:!0});var Fm=l(ye);oa=s(Fm,"SPAN",{});var Wm=l(oa);b(nt.$$.fragment,Wm),Wm.forEach(t),Fm.forEach(t),ll=d(po),sa=s(po,"SPAN",{});var Nm=l(sa);il=a(Nm,"Available Callbacks"),Nm.forEach(t),po.forEach(t),Vn=d(n),Ae=s(n,"P",{});var go=l(Ae);cl=a(go,"Here is the list of the available "),xr=s(go,"A",{href:!0});var jm=l(xr);dl=a(jm,"TrainerCallback"),jm.forEach(t),fl=a(go," in the library:"),go.forEach(t),Un=d(n),H=s(n,"DIV",{class:!0});var Yr=l(H);b(ot.$$.fragment,Yr),ml=d(Yr),ae=s(Yr,"P",{});var Xr=l(ae);hl=a(Xr,"A "),Mr=s(Xr,"A",{href:!0});var zm=l(Mr);pl=a(zm,"TrainerCallback"),zm.forEach(t),gl=a(Xr," that sends the logs to "),st=s(Xr,"A",{href:!0,rel:!0});var Bm=l(st);ul=a(Bm,"Comet ML"),Bm.forEach(t),_l=a(Xr,"."),Xr.forEach(t),bl=d(Yr),R=s(Yr,"DIV",{class:!0});var Xe=l(R);b(lt.$$.fragment,Xe),vl=d(Xe),la=s(Xe,"P",{});var Rm=l(la);El=a(Rm,"Setup the optional Comet.ml integration."),Rm.forEach(t),$l=d(Xe),L=s(Xe,"P",{});var M=l(L);kl=a(M,`Environment:
COMET_MODE (`),ia=s(M,"CODE",{});var Vm=l(ia);Tl=a(Vm,"str"),Vm.forEach(t),Cl=a(M,", "),ca=s(M,"EM",{});var Um=l(ca);wl=a(Um,"optional"),Um.forEach(t),yl=a(M,`):
Whether to create an online, offline experiment or disable Comet logging. Can be \u201COFFLINE\u201D, \u201CONLINE\u201D,
or \u201CDISABLED\u201D. Defaults to \u201CONLINE\u201D.
COMET_PROJECT_NAME (`),da=s(M,"CODE",{});var qm=l(da);Al=a(qm,"str"),qm.forEach(t),Ll=a(M,", "),fa=s(M,"EM",{});var Gm=l(fa);Dl=a(Gm,"optional"),Gm.forEach(t),Ol=a(M,`):
Comet project name for experiments
COMET_OFFLINE_DIRECTORY (`),ma=s(M,"CODE",{});var Hm=l(ma);xl=a(Hm,"str"),Hm.forEach(t),Ml=a(M,", "),ha=s(M,"EM",{});var Jm=l(ha);Sl=a(Jm,"optional"),Jm.forEach(t),Il=a(M,`):
Folder to use for saving offline experiments when `),pa=s(M,"CODE",{});var Ym=l(pa);Pl=a(Ym,"COMET_MODE"),Ym.forEach(t),Fl=a(M,` is \u201COFFLINE\u201D
COMET_LOG_ASSETS (`),ga=s(M,"CODE",{});var Xm=l(ga);Wl=a(Xm,"str"),Xm.forEach(t),Nl=a(M,", "),ua=s(M,"EM",{});var Km=l(ua);jl=a(Km,"optional"),Km.forEach(t),zl=a(M,`):
Whether or not to log training assets (tf event logs, checkpoints, etc), to Comet. Can be \u201CTRUE\u201D, or
\u201CFALSE\u201D. Defaults to \u201CTRUE\u201D.`),M.forEach(t),Bl=d(Xe),it=s(Xe,"P",{});var uo=l(it);Rl=a(uo,`For a number of configurable items in the environment, see
`),ct=s(uo,"A",{href:!0,rel:!0});var Qm=l(ct);Vl=a(Qm,"here"),Qm.forEach(t),Ul=a(uo,"."),uo.forEach(t),Xe.forEach(t),Yr.forEach(t),qn=d(n),ne=s(n,"DIV",{class:!0});var _o=l(ne);b(dt.$$.fragment,_o),ql=d(_o),ft=s(_o,"P",{});var bo=l(ft);Gl=a(bo,"A "),Sr=s(bo,"A",{href:!0});var Zm=l(Sr);Hl=a(Zm,"TrainerCallback"),Zm.forEach(t),Jl=a(bo," that handles the default flow of the training loop for logs, evaluation and checkpoints."),bo.forEach(t),_o.forEach(t),Gn=d(n),oe=s(n,"DIV",{class:!0});var vo=l(oe);b(mt.$$.fragment,vo),Yl=d(vo),ht=s(vo,"P",{});var Eo=l(ht);Xl=a(Eo,"A bare "),Ir=s(Eo,"A",{href:!0});var eh=l(Ir);Kl=a(eh,"TrainerCallback"),eh.forEach(t),Ql=a(Eo," that just prints the logs."),Eo.forEach(t),vo.forEach(t),Hn=d(n),se=s(n,"DIV",{class:!0});var $o=l(se);b(pt.$$.fragment,$o),Zl=d($o),gt=s($o,"P",{});var ko=l(gt);ei=a(ko,"A "),Pr=s(ko,"A",{href:!0});var th=l(Pr);ti=a(th,"TrainerCallback"),th.forEach(t),ri=a(ko," that displays the progress of training or evaluation."),ko.forEach(t),$o.forEach(t),Jn=d(n),le=s(n,"DIV",{class:!0});var To=l(le);b(ut.$$.fragment,To),ai=d(To),_t=s(To,"P",{});var Co=l(_t);ni=a(Co,"A "),Fr=s(Co,"A",{href:!0});var rh=l(Fr);oi=a(rh,"TrainerCallback"),rh.forEach(t),si=a(Co," that handles early stopping."),Co.forEach(t),To.forEach(t),Yn=d(n),ie=s(n,"DIV",{class:!0});var wo=l(ie);b(bt.$$.fragment,wo),li=d(wo),ce=s(wo,"P",{});var Kr=l(ce);ii=a(Kr,"A "),Wr=s(Kr,"A",{href:!0});var ah=l(Wr);ci=a(ah,"TrainerCallback"),ah.forEach(t),di=a(Kr," that sends the logs to "),vt=s(Kr,"A",{href:!0,rel:!0});var nh=l(vt);fi=a(nh,"TensorBoard"),nh.forEach(t),mi=a(Kr,"."),Kr.forEach(t),wo.forEach(t),Xn=d(n),J=s(n,"DIV",{class:!0});var Qr=l(J);b(Et.$$.fragment,Qr),hi=d(Qr),de=s(Qr,"P",{});var Zr=l(de);pi=a(Zr,"A "),Nr=s(Zr,"A",{href:!0});var oh=l(Nr);gi=a(oh,"TrainerCallback"),oh.forEach(t),ui=a(Zr," that sends the logs to "),$t=s(Zr,"A",{href:!0,rel:!0});var sh=l($t);_i=a(sh,"Weight and Biases"),sh.forEach(t),bi=a(Zr,"."),Zr.forEach(t),vi=d(Qr),V=s(Qr,"DIV",{class:!0});var Ke=l(V);b(kt.$$.fragment,Ke),Ei=d(Ke),Tt=s(Ke,"P",{});var yo=l(Tt);$i=a(yo,"Setup the optional Weights & Biases ("),_a=s(yo,"EM",{});var lh=l(_a);ki=a(lh,"wandb"),lh.forEach(t),Ti=a(yo,") integration."),yo.forEach(t),Ci=d(Ke),Ct=s(Ke,"P",{});var Ao=l(Ct);wi=a(Ao,`One can subclass and override this method to customize the setup if needed. Find more information
`),wt=s(Ao,"A",{href:!0,rel:!0});var ih=l(wt);yi=a(ih,"here"),ih.forEach(t),Ai=a(Ao,`. You can also override the following environment
variables:`),Ao.forEach(t),Li=d(Ke),h=s(Ke,"P",{});var g=l(h);Di=a(g,`Environment:
WANDB_LOG_MODEL (`),ba=s(g,"CODE",{});var ch=l(ba);Oi=a(ch,"bool"),ch.forEach(t),xi=a(g,", "),va=s(g,"EM",{});var dh=l(va);Mi=a(dh,"optional"),dh.forEach(t),Si=a(g,", defaults to "),Ea=s(g,"CODE",{});var fh=l(Ea);Ii=a(fh,"False"),fh.forEach(t),Pi=a(g,`):
Whether or not to log model as artifact at the end of training. Use along with
`),$a=s(g,"EM",{});var mh=l($a);Fi=a(mh,"TrainingArguments.load_best_model_at_end"),mh.forEach(t),Wi=a(g,` to upload best model.
WANDB_WATCH (`),ka=s(g,"CODE",{});var hh=l(ka);Ni=a(hh,"str"),hh.forEach(t),ji=a(g,", "),Ta=s(g,"EM",{});var ph=l(Ta);zi=a(ph,"optional"),ph.forEach(t),Bi=a(g," defaults to "),Ca=s(g,"CODE",{});var gh=l(Ca);Ri=a(gh,'"gradients"'),gh.forEach(t),Vi=a(g,`):
Can be `),wa=s(g,"CODE",{});var uh=l(wa);Ui=a(uh,'"gradients"'),uh.forEach(t),qi=a(g,", "),ya=s(g,"CODE",{});var _h=l(ya);Gi=a(_h,'"all"'),_h.forEach(t),Hi=a(g," or "),Aa=s(g,"CODE",{});var bh=l(Aa);Ji=a(bh,'"false"'),bh.forEach(t),Yi=a(g,". Set to "),La=s(g,"CODE",{});var vh=l(La);Xi=a(vh,'"false"'),vh.forEach(t),Ki=a(g," to disable gradient logging or "),Da=s(g,"CODE",{});var Eh=l(Da);Qi=a(Eh,'"all"'),Eh.forEach(t),Zi=a(g,` to
log gradients and parameters.
WANDB_PROJECT (`),Oa=s(g,"CODE",{});var $h=l(Oa);ec=a($h,"str"),$h.forEach(t),tc=a(g,", "),xa=s(g,"EM",{});var kh=l(xa);rc=a(kh,"optional"),kh.forEach(t),ac=a(g,", defaults to "),Ma=s(g,"CODE",{});var Th=l(Ma);nc=a(Th,'"huggingface"'),Th.forEach(t),oc=a(g,`):
Set this to a custom string to store results in a different project.
WANDB_DISABLED (`),Sa=s(g,"CODE",{});var Ch=l(Sa);sc=a(Ch,"bool"),Ch.forEach(t),lc=a(g,", "),Ia=s(g,"EM",{});var wh=l(Ia);ic=a(wh,"optional"),wh.forEach(t),cc=a(g,", defaults to "),Pa=s(g,"CODE",{});var yh=l(Pa);dc=a(yh,"False"),yh.forEach(t),fc=a(g,`):
Whether or not to disable wandb entirely. Set `),Fa=s(g,"EM",{});var Ah=l(Fa);mc=a(Ah,"WANDB_DISABLED=true"),Ah.forEach(t),hc=a(g," to disable."),g.forEach(t),Ke.forEach(t),Qr.forEach(t),Kn=d(n),Y=s(n,"DIV",{class:!0});var ea=l(Y);b(yt.$$.fragment,ea),pc=d(ea),X=s(ea,"P",{});var Qe=l(X);gc=a(Qe,"A "),jr=s(Qe,"A",{href:!0});var Lh=l(jr);uc=a(Lh,"TrainerCallback"),Lh.forEach(t),_c=a(Qe," that sends the logs to "),At=s(Qe,"A",{href:!0,rel:!0});var Dh=l(At);bc=a(Dh,"MLflow"),Dh.forEach(t),vc=a(Qe,`. Can be disabled by setting
environment variable `),Wa=s(Qe,"CODE",{});var Oh=l(Wa);Ec=a(Oh,"DISABLE_MLFLOW_INTEGRATION = TRUE"),Oh.forEach(t),$c=a(Qe,"."),Qe.forEach(t),kc=d(ea),Q=s(ea,"DIV",{class:!0});var ta=l(Q);b(Lt.$$.fragment,ta),Tc=d(ta),Na=s(ta,"P",{});var xh=l(Na);Cc=a(xh,"Setup the optional MLflow integration."),xh.forEach(t),wc=d(ta),p=s(ta,"P",{});var u=l(p);yc=a(u,`Environment:
HF_MLFLOW_LOG_ARTIFACTS (`),ja=s(u,"CODE",{});var Mh=l(ja);Ac=a(Mh,"str"),Mh.forEach(t),Lc=a(u,", "),za=s(u,"EM",{});var Sh=l(za);Dc=a(Sh,"optional"),Sh.forEach(t),Oc=a(u,`):
Whether to use MLflow .log_artifact() facility to log artifacts. This only makes sense if logging to a
remote server, e.g. s3 or GCS. If set to `),Ba=s(u,"CODE",{});var Ih=l(Ba);xc=a(Ih,"True"),Ih.forEach(t),Mc=a(u," or "),Ra=s(u,"EM",{});var Ph=l(Ra);Sc=a(Ph,"1"),Ph.forEach(t),Ic=a(u,`, will copy each saved checkpoint on each save in
`),zr=s(u,"A",{href:!0});var Fh=l(zr);Pc=a(Fh,"TrainingArguments"),Fh.forEach(t),Fc=a(u,"\u2019s "),Va=s(u,"CODE",{});var Wh=l(Va);Wc=a(Wh,"output_dir"),Wh.forEach(t),Nc=a(u,` to the local or remote artifact storage. Using it without a remote
storage will just copy the files to your artifact location.
MLFLOW_EXPERIMENT_NAME (`),Ua=s(u,"CODE",{});var Nh=l(Ua);jc=a(Nh,"str"),Nh.forEach(t),zc=a(u,", "),qa=s(u,"EM",{});var jh=l(qa);Bc=a(jh,"optional"),jh.forEach(t),Rc=a(u,`):
Whether to use an MLflow experiment_name under which to launch the run. Default to \u201CNone\u201D which will
point to the \u201CDefault\u201D experiment in MLflow. Otherwise, it is a case sensitive name of the experiment
to be activated. If an experiment with this name does not exist, a new experiment with this name is
created.
MLFLOW_TAGS (`),Ga=s(u,"CODE",{});var zh=l(Ga);Vc=a(zh,"str"),zh.forEach(t),Uc=a(u,", "),Ha=s(u,"EM",{});var Bh=l(Ha);qc=a(Bh,"optional"),Bh.forEach(t),Gc=a(u,`):
A string dump of a dictionary of key/value pair to be added to the MLflow run as tags. Example:
os.environ[\u2018MLFLOW_TAGS\u2019]=\u2019{\u201Crelease.candidate\u201D: \u201CRC1\u201D, \u201Crelease.version\u201D: \u201C2.2.0\u201D}\u2019
MLFLOW_NESTED_RUN (`),Ja=s(u,"CODE",{});var Rh=l(Ja);Hc=a(Rh,"str"),Rh.forEach(t),Jc=a(u,", "),Ya=s(u,"EM",{});var Vh=l(Ya);Yc=a(Vh,"optional"),Vh.forEach(t),Xc=a(u,`):
Whether to use MLflow nested runs. If set to `),Xa=s(u,"CODE",{});var Uh=l(Xa);Kc=a(Uh,"True"),Uh.forEach(t),Qc=a(u," or "),Ka=s(u,"EM",{});var qh=l(Ka);Zc=a(qh,"1"),qh.forEach(t),ed=a(u,`, will create a nested run inside the current
run.
MLFLOW_RUN_ID (`),Qa=s(u,"CODE",{});var Gh=l(Qa);td=a(Gh,"str"),Gh.forEach(t),rd=a(u,", "),Za=s(u,"EM",{});var Hh=l(Za);ad=a(Hh,"optional"),Hh.forEach(t),nd=a(u,`):
Allow to reattach to an existing run which can be usefull when resuming training from a checkpoint.
When MLFLOW_RUN_ID environment variable is set, start_run attempts to resume a run with the specified
run ID and other parameters are ignored.
MLFLOW_FLATTEN_PARAMS (`),en=s(u,"CODE",{});var Jh=l(en);od=a(Jh,"str"),Jh.forEach(t),sd=a(u,", "),tn=s(u,"EM",{});var Yh=l(tn);ld=a(Yh,"optional"),Yh.forEach(t),id=a(u,`):
Whether to flatten the parameters dictionary before logging. Default to `),rn=s(u,"CODE",{});var Xh=l(rn);cd=a(Xh,"False"),Xh.forEach(t),dd=a(u,"."),u.forEach(t),ta.forEach(t),ea.forEach(t),Qn=d(n),fe=s(n,"DIV",{class:!0});var Lo=l(fe);b(Dt.$$.fragment,Lo),fd=d(Lo),me=s(Lo,"P",{});var ra=l(me);md=a(ra,"A "),Br=s(ra,"A",{href:!0});var Kh=l(Br);hd=a(Kh,"TrainerCallback"),Kh.forEach(t),pd=a(ra," that sends the logs to "),Ot=s(ra,"A",{href:!0,rel:!0});var Qh=l(Ot);gd=a(Qh,"AzureML"),Qh.forEach(t),ud=a(ra,"."),ra.forEach(t),Lo.forEach(t),Zn=d(n),he=s(n,"DIV",{class:!0});var Do=l(he);b(xt.$$.fragment,Do),_d=d(Do),Mt=s(Do,"P",{});var Oo=l(Mt);bd=a(Oo,"A "),Rr=s(Oo,"A",{href:!0});var Zh=l(Rr);vd=a(Zh,"TrainerCallback"),Zh.forEach(t),Ed=a(Oo," that tracks the CO2 emission of training."),Oo.forEach(t),Do.forEach(t),eo=d(n),pe=s(n,"H2",{class:!0});var xo=l(pe);Le=s(xo,"A",{id:!0,class:!0,href:!0});var ep=l(Le);an=s(ep,"SPAN",{});var tp=l(an);b(St.$$.fragment,tp),tp.forEach(t),ep.forEach(t),$d=d(xo),nn=s(xo,"SPAN",{});var rp=l(nn);kd=a(rp,"TrainerCallback"),rp.forEach(t),xo.forEach(t),to=d(n),T=s(n,"DIV",{class:!0});var C=l(T);b(It.$$.fragment,C),Td=d(C),on=s(C,"P",{});var ap=l(on);Cd=a(ap,`A class for objects that will inspect the state of the training loop at some events and take some decisions. At
each of those events the following arguments are available:`),ap.forEach(t),wd=d(C),Pt=s(C,"P",{});var Mo=l(Pt);yd=a(Mo,"The "),sn=s(Mo,"CODE",{});var np=l(sn);Ad=a(np,"control"),np.forEach(t),Ld=a(Mo,` object is the only one that can be changed by the callback, in which case the event that changes it
should return the modified version.`),Mo.forEach(t),Dd=d(C),P=s(C,"P",{});var q=l(P);Od=a(q,"The argument "),ln=s(q,"CODE",{});var op=l(ln);xd=a(op,"args"),op.forEach(t),Md=a(q,", "),cn=s(q,"CODE",{});var sp=l(cn);Sd=a(sp,"state"),sp.forEach(t),Id=a(q," and "),dn=s(q,"CODE",{});var lp=l(dn);Pd=a(lp,"control"),lp.forEach(t),Fd=a(q," are positionals for all events, all the others are grouped in "),fn=s(q,"CODE",{});var ip=l(fn);Wd=a(ip,"kwargs"),ip.forEach(t),Nd=a(q,`.
You can unpack the ones you need in the signature of the event using them. As an example, see the code of the
simple `),mn=s(q,"CODE",{});var cp=l(mn);jd=a(cp,"PrinterCallback"),cp.forEach(t),zd=a(q,"."),q.forEach(t),Bd=d(C),b(De.$$.fragment,C),Rd=d(C),Oe=s(C,"DIV",{class:!0});var So=l(Oe);b(Ft.$$.fragment,So),Vd=d(So),hn=s(So,"P",{});var dp=l(hn);Ud=a(dp,"Event called at the beginning of an epoch."),dp.forEach(t),So.forEach(t),qd=d(C),xe=s(C,"DIV",{class:!0});var Io=l(xe);b(Wt.$$.fragment,Io),Gd=d(Io),pn=s(Io,"P",{});var fp=l(pn);Hd=a(fp,"Event called at the end of an epoch."),fp.forEach(t),Io.forEach(t),Jd=d(C),Me=s(C,"DIV",{class:!0});var Po=l(Me);b(Nt.$$.fragment,Po),Yd=d(Po),gn=s(Po,"P",{});var mp=l(gn);Xd=a(mp,"Event called after an evaluation phase."),mp.forEach(t),Po.forEach(t),Kd=d(C),Se=s(C,"DIV",{class:!0});var Fo=l(Se);b(jt.$$.fragment,Fo),Qd=d(Fo),zt=s(Fo,"P",{});var Wo=l(zt);Zd=a(Wo,"Event called at the end of the initialization of the "),Vr=s(Wo,"A",{href:!0});var hp=l(Vr);ef=a(hp,"Trainer"),hp.forEach(t),tf=a(Wo,"."),Wo.forEach(t),Fo.forEach(t),rf=d(C),Ie=s(C,"DIV",{class:!0});var No=l(Ie);b(Bt.$$.fragment,No),af=d(No),un=s(No,"P",{});var pp=l(un);nf=a(pp,"Event called after logging the last logs."),pp.forEach(t),No.forEach(t),of=d(C),Pe=s(C,"DIV",{class:!0});var jo=l(Pe);b(Rt.$$.fragment,jo),sf=d(jo),_n=s(jo,"P",{});var gp=l(_n);lf=a(gp,"Event called after a prediction step."),gp.forEach(t),jo.forEach(t),cf=d(C),Fe=s(C,"DIV",{class:!0});var zo=l(Fe);b(Vt.$$.fragment,zo),df=d(zo),bn=s(zo,"P",{});var up=l(bn);ff=a(up,"Event called after a checkpoint save."),up.forEach(t),zo.forEach(t),mf=d(C),We=s(C,"DIV",{class:!0});var Bo=l(We);b(Ut.$$.fragment,Bo),hf=d(Bo),vn=s(Bo,"P",{});var _p=l(vn);pf=a(_p,`Event called at the beginning of a training step. If using gradient accumulation, one training step might take
several inputs.`),_p.forEach(t),Bo.forEach(t),gf=d(C),Ne=s(C,"DIV",{class:!0});var Ro=l(Ne);b(qt.$$.fragment,Ro),uf=d(Ro),En=s(Ro,"P",{});var bp=l(En);_f=a(bp,`Event called at the end of a training step. If using gradient accumulation, one training step might take
several inputs.`),bp.forEach(t),Ro.forEach(t),bf=d(C),je=s(C,"DIV",{class:!0});var Vo=l(je);b(Gt.$$.fragment,Vo),vf=d(Vo),$n=s(Vo,"P",{});var vp=l($n);Ef=a(vp,"Event called at the end of an substep during gradient accumulation."),vp.forEach(t),Vo.forEach(t),$f=d(C),ze=s(C,"DIV",{class:!0});var Uo=l(ze);b(Ht.$$.fragment,Uo),kf=d(Uo),kn=s(Uo,"P",{});var Ep=l(kn);Tf=a(Ep,"Event called at the beginning of training."),Ep.forEach(t),Uo.forEach(t),Cf=d(C),Be=s(C,"DIV",{class:!0});var qo=l(Be);b(Jt.$$.fragment,qo),wf=d(qo),Tn=s(qo,"P",{});var $p=l(Tn);yf=a($p,"Event called at the end of training."),$p.forEach(t),qo.forEach(t),C.forEach(t),ro=d(n),Re=s(n,"P",{});var Go=l(Re);Af=a(Go,"Here is an example of how to register a custom callback with the PyTorch "),Ur=s(Go,"A",{href:!0});var kp=l(Ur);Lf=a(kp,"Trainer"),kp.forEach(t),Df=a(Go,":"),Go.forEach(t),ao=d(n),b(Yt.$$.fragment,n),no=d(n),Ve=s(n,"P",{});var Ho=l(Ve);Of=a(Ho,"Another way to register a callback is to call "),Cn=s(Ho,"CODE",{});var Tp=l(Cn);xf=a(Tp,"trainer.add_callback()"),Tp.forEach(t),Mf=a(Ho," as follows:"),Ho.forEach(t),oo=d(n),b(Xt.$$.fragment,n),so=d(n),ge=s(n,"H2",{class:!0});var Jo=l(ge);Ue=s(Jo,"A",{id:!0,class:!0,href:!0});var Cp=l(Ue);wn=s(Cp,"SPAN",{});var wp=l(wn);b(Kt.$$.fragment,wp),wp.forEach(t),Cp.forEach(t),Sf=d(Jo),yn=s(Jo,"SPAN",{});var yp=l(yn);If=a(yp,"TrainerState"),yp.forEach(t),Jo.forEach(t),lo=d(n),F=s(n,"DIV",{class:!0});var Z=l(F);b(Qt.$$.fragment,Z),Pf=d(Z),ue=s(Z,"P",{});var aa=l(ue);Ff=a(aa,"A class containing the "),qr=s(aa,"A",{href:!0});var Ap=l(qr);Wf=a(Ap,"Trainer"),Ap.forEach(t),Nf=a(aa,` inner state that will be saved along the model and optimizer when checkpointing
and passed to the `),Gr=s(aa,"A",{href:!0});var Lp=l(Gr);jf=a(Lp,"TrainerCallback"),Lp.forEach(t),zf=a(aa,"."),aa.forEach(t),Bf=d(Z),b(qe.$$.fragment,Z),Rf=d(Z),Ge=s(Z,"DIV",{class:!0});var Yo=l(Ge);b(Zt.$$.fragment,Yo),Vf=d(Yo),er=s(Yo,"P",{});var Xo=l(er);Uf=a(Xo,"Create an instance from the content of "),An=s(Xo,"CODE",{});var Dp=l(An);qf=a(Dp,"json_path"),Dp.forEach(t),Gf=a(Xo,"."),Xo.forEach(t),Yo.forEach(t),Hf=d(Z),He=s(Z,"DIV",{class:!0});var Ko=l(He);b(tr.$$.fragment,Ko),Jf=d(Ko),rr=s(Ko,"P",{});var Qo=l(rr);Yf=a(Qo,"Save the content of this instance in JSON format inside "),Ln=s(Qo,"CODE",{});var Op=l(Ln);Xf=a(Op,"json_path"),Op.forEach(t),Kf=a(Qo,"."),Qo.forEach(t),Ko.forEach(t),Z.forEach(t),io=d(n),_e=s(n,"H2",{class:!0});var Zo=l(_e);Je=s(Zo,"A",{id:!0,class:!0,href:!0});var xp=l(Je);Dn=s(xp,"SPAN",{});var Mp=l(Dn);b(ar.$$.fragment,Mp),Mp.forEach(t),xp.forEach(t),Qf=d(Zo),On=s(Zo,"SPAN",{});var Sp=l(On);Zf=a(Sp,"TrainerControl"),Sp.forEach(t),Zo.forEach(t),co=d(n),be=s(n,"DIV",{class:!0});var es=l(be);b(nr.$$.fragment,es),em=d(es),ve=s(es,"P",{});var na=l(ve);tm=a(na,"A class that handles the "),Hr=s(na,"A",{href:!0});var Ip=l(Hr);rm=a(Ip,"Trainer"),Ip.forEach(t),am=a(na," control flow. This class is used by the "),Jr=s(na,"A",{href:!0});var Pp=l(Jr);nm=a(Pp,"TrainerCallback"),Pp.forEach(t),om=a(na,` to activate some
switches in the training loop.`),na.forEach(t),es.forEach(t),this.h()},h(){i(A,"name","hf:doc:metadata"),i(A,"content",JSON.stringify(Hp)),i(O,"id","callbacks"),i(O,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(O,"href","#callbacks"),i(D,"class","relative group"),i(cr,"href","/docs/transformers/pr_18056/en/main_classes/trainer#transformers.Trainer"),i(dr,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.TrainerControl"),i(fr,"href","/docs/transformers/pr_18056/en/main_classes/trainer#transformers.Trainer"),i(mr,"href","trainer"),i(hr,"href","/docs/transformers/pr_18056/en/main_classes/trainer#transformers.Trainer"),i(gr,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.DefaultFlowCallback"),i(ur,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.PrinterCallback"),i(_r,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.ProgressCallback"),i(br,"href","/docs/transformers/pr_18056/en/main_classes/trainer#transformers.TrainingArguments"),i(Er,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.integrations.TensorBoardCallback"),i($r,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.integrations.WandbCallback"),i(Ze,"href","https://www.wandb.com/"),i(Ze,"rel","nofollow"),i(kr,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.integrations.CometCallback"),i(et,"href","https://www.comet.ml/site/"),i(et,"rel","nofollow"),i(Tr,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.integrations.MLflowCallback"),i(tt,"href","https://www.mlflow.org/"),i(tt,"rel","nofollow"),i(Cr,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.integrations.AzureMLCallback"),i(rt,"href","https://pypi.org/project/azureml-sdk/"),i(rt,"rel","nofollow"),i(wr,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.integrations.CodeCarbonCallback"),i(at,"href","https://pypi.org/project/codecarbon/"),i(at,"rel","nofollow"),i(yr,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.TrainerCallback"),i(Ar,"href","/docs/transformers/pr_18056/en/main_classes/trainer#transformers.TrainingArguments"),i(Lr,"href","/docs/transformers/pr_18056/en/main_classes/trainer#transformers.Trainer"),i(Dr,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.TrainerState"),i(Or,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.TrainerControl"),i(ye,"id","transformers.integrations.CometCallback"),i(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(ye,"href","#transformers.integrations.CometCallback"),i(re,"class","relative group"),i(xr,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.TrainerCallback"),i(Mr,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.TrainerCallback"),i(st,"href","https://www.comet.ml/site/"),i(st,"rel","nofollow"),i(ct,"href","https://www.comet.ml/docs/python-sdk/advanced/#comet-configuration-variables"),i(ct,"rel","nofollow"),i(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Sr,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.TrainerCallback"),i(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ir,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.TrainerCallback"),i(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Pr,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.TrainerCallback"),i(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Fr,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.TrainerCallback"),i(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Wr,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.TrainerCallback"),i(vt,"href","https://www.tensorflow.org/tensorboard"),i(vt,"rel","nofollow"),i(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Nr,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.TrainerCallback"),i($t,"href","https://www.wandb.com/"),i($t,"rel","nofollow"),i(wt,"href","https://docs.wandb.ai/integrations/huggingface"),i(wt,"rel","nofollow"),i(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(jr,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.TrainerCallback"),i(At,"href","https://www.mlflow.org/"),i(At,"rel","nofollow"),i(zr,"href","/docs/transformers/pr_18056/en/main_classes/trainer#transformers.TrainingArguments"),i(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Br,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.TrainerCallback"),i(Ot,"href","https://pypi.org/project/azureml-sdk/"),i(Ot,"rel","nofollow"),i(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Rr,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.TrainerCallback"),i(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Le,"id","transformers.TrainerCallback"),i(Le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Le,"href","#transformers.TrainerCallback"),i(pe,"class","relative group"),i(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Vr,"href","/docs/transformers/pr_18056/en/main_classes/trainer#transformers.Trainer"),i(Se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ur,"href","/docs/transformers/pr_18056/en/main_classes/trainer#transformers.Trainer"),i(Ue,"id","transformers.TrainerState"),i(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Ue,"href","#transformers.TrainerState"),i(ge,"class","relative group"),i(qr,"href","/docs/transformers/pr_18056/en/main_classes/trainer#transformers.Trainer"),i(Gr,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.TrainerCallback"),i(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Je,"id","transformers.TrainerControl"),i(Je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Je,"href","#transformers.TrainerControl"),i(_e,"class","relative group"),i(Hr,"href","/docs/transformers/pr_18056/en/main_classes/trainer#transformers.Trainer"),i(Jr,"href","/docs/transformers/pr_18056/en/main_classes/callback#transformers.TrainerCallback"),i(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(n,f){e(document.head,A),m(n,z,f),m(n,D,f),e(D,O),e(O,W),v(y,W,null),e(D,N),e(D,ee),e(ee,te),m(n,j,f),m(n,G,f),e(G,ir),e(G,cr),e(cr,ts),e(G,rs),m(n,Nn,f),m(n,B,f),e(B,as),e(B,dr),e(dr,ns),e(B,os),e(B,fr),e(fr,ss),e(B,ls),e(B,mr),e(mr,is),e(B,cs),m(n,jn,f),m(n,Ee,f),e(Ee,ds),e(Ee,hr),e(hr,fs),e(Ee,ms),m(n,zn,f),m(n,x,f),e(x,pr),e(pr,gr),e(gr,hs),e(pr,ps),e(x,gs),e(x,K),e(K,ur),e(ur,us),e(K,_s),e(K,_r),e(_r,bs),e(K,vs),e(K,br),e(br,Es),e(K,$s),e(x,ks),e(x,vr),e(vr,Er),e(Er,Ts),e(vr,Cs),e(x,ws),e(x,$e),e($e,$r),e($r,ys),e($e,As),e($e,Ze),e(Ze,Ls),e($e,Ds),e(x,Os),e(x,ke),e(ke,kr),e(kr,xs),e(ke,Ms),e(ke,et),e(et,Ss),e(ke,Is),e(x,Ps),e(x,Te),e(Te,Tr),e(Tr,Fs),e(Te,Ws),e(Te,tt),e(tt,Ns),e(Te,js),e(x,zs),e(x,Ce),e(Ce,Cr),e(Cr,Bs),e(Ce,Rs),e(Ce,rt),e(rt,Vs),e(Ce,Us),e(x,qs),e(x,we),e(we,wr),e(wr,Gs),e(we,Hs),e(we,at),e(at,Js),e(we,Ys),m(n,Bn,f),m(n,S,f),e(S,Xs),e(S,yr),e(yr,Ks),e(S,Qs),e(S,Ar),e(Ar,Zs),e(S,el),e(S,Lr),e(Lr,tl),e(S,rl),e(S,Dr),e(Dr,al),e(S,nl),e(S,Or),e(Or,ol),e(S,sl),m(n,Rn,f),m(n,re,f),e(re,ye),e(ye,oa),v(nt,oa,null),e(re,ll),e(re,sa),e(sa,il),m(n,Vn,f),m(n,Ae,f),e(Ae,cl),e(Ae,xr),e(xr,dl),e(Ae,fl),m(n,Un,f),m(n,H,f),v(ot,H,null),e(H,ml),e(H,ae),e(ae,hl),e(ae,Mr),e(Mr,pl),e(ae,gl),e(ae,st),e(st,ul),e(ae,_l),e(H,bl),e(H,R),v(lt,R,null),e(R,vl),e(R,la),e(la,El),e(R,$l),e(R,L),e(L,kl),e(L,ia),e(ia,Tl),e(L,Cl),e(L,ca),e(ca,wl),e(L,yl),e(L,da),e(da,Al),e(L,Ll),e(L,fa),e(fa,Dl),e(L,Ol),e(L,ma),e(ma,xl),e(L,Ml),e(L,ha),e(ha,Sl),e(L,Il),e(L,pa),e(pa,Pl),e(L,Fl),e(L,ga),e(ga,Wl),e(L,Nl),e(L,ua),e(ua,jl),e(L,zl),e(R,Bl),e(R,it),e(it,Rl),e(it,ct),e(ct,Vl),e(it,Ul),m(n,qn,f),m(n,ne,f),v(dt,ne,null),e(ne,ql),e(ne,ft),e(ft,Gl),e(ft,Sr),e(Sr,Hl),e(ft,Jl),m(n,Gn,f),m(n,oe,f),v(mt,oe,null),e(oe,Yl),e(oe,ht),e(ht,Xl),e(ht,Ir),e(Ir,Kl),e(ht,Ql),m(n,Hn,f),m(n,se,f),v(pt,se,null),e(se,Zl),e(se,gt),e(gt,ei),e(gt,Pr),e(Pr,ti),e(gt,ri),m(n,Jn,f),m(n,le,f),v(ut,le,null),e(le,ai),e(le,_t),e(_t,ni),e(_t,Fr),e(Fr,oi),e(_t,si),m(n,Yn,f),m(n,ie,f),v(bt,ie,null),e(ie,li),e(ie,ce),e(ce,ii),e(ce,Wr),e(Wr,ci),e(ce,di),e(ce,vt),e(vt,fi),e(ce,mi),m(n,Xn,f),m(n,J,f),v(Et,J,null),e(J,hi),e(J,de),e(de,pi),e(de,Nr),e(Nr,gi),e(de,ui),e(de,$t),e($t,_i),e(de,bi),e(J,vi),e(J,V),v(kt,V,null),e(V,Ei),e(V,Tt),e(Tt,$i),e(Tt,_a),e(_a,ki),e(Tt,Ti),e(V,Ci),e(V,Ct),e(Ct,wi),e(Ct,wt),e(wt,yi),e(Ct,Ai),e(V,Li),e(V,h),e(h,Di),e(h,ba),e(ba,Oi),e(h,xi),e(h,va),e(va,Mi),e(h,Si),e(h,Ea),e(Ea,Ii),e(h,Pi),e(h,$a),e($a,Fi),e(h,Wi),e(h,ka),e(ka,Ni),e(h,ji),e(h,Ta),e(Ta,zi),e(h,Bi),e(h,Ca),e(Ca,Ri),e(h,Vi),e(h,wa),e(wa,Ui),e(h,qi),e(h,ya),e(ya,Gi),e(h,Hi),e(h,Aa),e(Aa,Ji),e(h,Yi),e(h,La),e(La,Xi),e(h,Ki),e(h,Da),e(Da,Qi),e(h,Zi),e(h,Oa),e(Oa,ec),e(h,tc),e(h,xa),e(xa,rc),e(h,ac),e(h,Ma),e(Ma,nc),e(h,oc),e(h,Sa),e(Sa,sc),e(h,lc),e(h,Ia),e(Ia,ic),e(h,cc),e(h,Pa),e(Pa,dc),e(h,fc),e(h,Fa),e(Fa,mc),e(h,hc),m(n,Kn,f),m(n,Y,f),v(yt,Y,null),e(Y,pc),e(Y,X),e(X,gc),e(X,jr),e(jr,uc),e(X,_c),e(X,At),e(At,bc),e(X,vc),e(X,Wa),e(Wa,Ec),e(X,$c),e(Y,kc),e(Y,Q),v(Lt,Q,null),e(Q,Tc),e(Q,Na),e(Na,Cc),e(Q,wc),e(Q,p),e(p,yc),e(p,ja),e(ja,Ac),e(p,Lc),e(p,za),e(za,Dc),e(p,Oc),e(p,Ba),e(Ba,xc),e(p,Mc),e(p,Ra),e(Ra,Sc),e(p,Ic),e(p,zr),e(zr,Pc),e(p,Fc),e(p,Va),e(Va,Wc),e(p,Nc),e(p,Ua),e(Ua,jc),e(p,zc),e(p,qa),e(qa,Bc),e(p,Rc),e(p,Ga),e(Ga,Vc),e(p,Uc),e(p,Ha),e(Ha,qc),e(p,Gc),e(p,Ja),e(Ja,Hc),e(p,Jc),e(p,Ya),e(Ya,Yc),e(p,Xc),e(p,Xa),e(Xa,Kc),e(p,Qc),e(p,Ka),e(Ka,Zc),e(p,ed),e(p,Qa),e(Qa,td),e(p,rd),e(p,Za),e(Za,ad),e(p,nd),e(p,en),e(en,od),e(p,sd),e(p,tn),e(tn,ld),e(p,id),e(p,rn),e(rn,cd),e(p,dd),m(n,Qn,f),m(n,fe,f),v(Dt,fe,null),e(fe,fd),e(fe,me),e(me,md),e(me,Br),e(Br,hd),e(me,pd),e(me,Ot),e(Ot,gd),e(me,ud),m(n,Zn,f),m(n,he,f),v(xt,he,null),e(he,_d),e(he,Mt),e(Mt,bd),e(Mt,Rr),e(Rr,vd),e(Mt,Ed),m(n,eo,f),m(n,pe,f),e(pe,Le),e(Le,an),v(St,an,null),e(pe,$d),e(pe,nn),e(nn,kd),m(n,to,f),m(n,T,f),v(It,T,null),e(T,Td),e(T,on),e(on,Cd),e(T,wd),e(T,Pt),e(Pt,yd),e(Pt,sn),e(sn,Ad),e(Pt,Ld),e(T,Dd),e(T,P),e(P,Od),e(P,ln),e(ln,xd),e(P,Md),e(P,cn),e(cn,Sd),e(P,Id),e(P,dn),e(dn,Pd),e(P,Fd),e(P,fn),e(fn,Wd),e(P,Nd),e(P,mn),e(mn,jd),e(P,zd),e(T,Bd),v(De,T,null),e(T,Rd),e(T,Oe),v(Ft,Oe,null),e(Oe,Vd),e(Oe,hn),e(hn,Ud),e(T,qd),e(T,xe),v(Wt,xe,null),e(xe,Gd),e(xe,pn),e(pn,Hd),e(T,Jd),e(T,Me),v(Nt,Me,null),e(Me,Yd),e(Me,gn),e(gn,Xd),e(T,Kd),e(T,Se),v(jt,Se,null),e(Se,Qd),e(Se,zt),e(zt,Zd),e(zt,Vr),e(Vr,ef),e(zt,tf),e(T,rf),e(T,Ie),v(Bt,Ie,null),e(Ie,af),e(Ie,un),e(un,nf),e(T,of),e(T,Pe),v(Rt,Pe,null),e(Pe,sf),e(Pe,_n),e(_n,lf),e(T,cf),e(T,Fe),v(Vt,Fe,null),e(Fe,df),e(Fe,bn),e(bn,ff),e(T,mf),e(T,We),v(Ut,We,null),e(We,hf),e(We,vn),e(vn,pf),e(T,gf),e(T,Ne),v(qt,Ne,null),e(Ne,uf),e(Ne,En),e(En,_f),e(T,bf),e(T,je),v(Gt,je,null),e(je,vf),e(je,$n),e($n,Ef),e(T,$f),e(T,ze),v(Ht,ze,null),e(ze,kf),e(ze,kn),e(kn,Tf),e(T,Cf),e(T,Be),v(Jt,Be,null),e(Be,wf),e(Be,Tn),e(Tn,yf),m(n,ro,f),m(n,Re,f),e(Re,Af),e(Re,Ur),e(Ur,Lf),e(Re,Df),m(n,ao,f),v(Yt,n,f),m(n,no,f),m(n,Ve,f),e(Ve,Of),e(Ve,Cn),e(Cn,xf),e(Ve,Mf),m(n,oo,f),v(Xt,n,f),m(n,so,f),m(n,ge,f),e(ge,Ue),e(Ue,wn),v(Kt,wn,null),e(ge,Sf),e(ge,yn),e(yn,If),m(n,lo,f),m(n,F,f),v(Qt,F,null),e(F,Pf),e(F,ue),e(ue,Ff),e(ue,qr),e(qr,Wf),e(ue,Nf),e(ue,Gr),e(Gr,jf),e(ue,zf),e(F,Bf),v(qe,F,null),e(F,Rf),e(F,Ge),v(Zt,Ge,null),e(Ge,Vf),e(Ge,er),e(er,Uf),e(er,An),e(An,qf),e(er,Gf),e(F,Hf),e(F,He),v(tr,He,null),e(He,Jf),e(He,rr),e(rr,Yf),e(rr,Ln),e(Ln,Xf),e(rr,Kf),m(n,io,f),m(n,_e,f),e(_e,Je),e(Je,Dn),v(ar,Dn,null),e(_e,Qf),e(_e,On),e(On,Zf),m(n,co,f),m(n,be,f),v(nr,be,null),e(be,em),e(be,ve),e(ve,tm),e(ve,Hr),e(Hr,rm),e(ve,am),e(ve,Jr),e(Jr,nm),e(ve,om),fo=!0},p(n,[f]){const or={};f&2&&(or.$$scope={dirty:f,ctx:n}),De.$set(or);const xn={};f&2&&(xn.$$scope={dirty:f,ctx:n}),qe.$set(xn)},i(n){fo||(E(y.$$.fragment,n),E(nt.$$.fragment,n),E(ot.$$.fragment,n),E(lt.$$.fragment,n),E(dt.$$.fragment,n),E(mt.$$.fragment,n),E(pt.$$.fragment,n),E(ut.$$.fragment,n),E(bt.$$.fragment,n),E(Et.$$.fragment,n),E(kt.$$.fragment,n),E(yt.$$.fragment,n),E(Lt.$$.fragment,n),E(Dt.$$.fragment,n),E(xt.$$.fragment,n),E(St.$$.fragment,n),E(It.$$.fragment,n),E(De.$$.fragment,n),E(Ft.$$.fragment,n),E(Wt.$$.fragment,n),E(Nt.$$.fragment,n),E(jt.$$.fragment,n),E(Bt.$$.fragment,n),E(Rt.$$.fragment,n),E(Vt.$$.fragment,n),E(Ut.$$.fragment,n),E(qt.$$.fragment,n),E(Gt.$$.fragment,n),E(Ht.$$.fragment,n),E(Jt.$$.fragment,n),E(Yt.$$.fragment,n),E(Xt.$$.fragment,n),E(Kt.$$.fragment,n),E(Qt.$$.fragment,n),E(qe.$$.fragment,n),E(Zt.$$.fragment,n),E(tr.$$.fragment,n),E(ar.$$.fragment,n),E(nr.$$.fragment,n),fo=!0)},o(n){$(y.$$.fragment,n),$(nt.$$.fragment,n),$(ot.$$.fragment,n),$(lt.$$.fragment,n),$(dt.$$.fragment,n),$(mt.$$.fragment,n),$(pt.$$.fragment,n),$(ut.$$.fragment,n),$(bt.$$.fragment,n),$(Et.$$.fragment,n),$(kt.$$.fragment,n),$(yt.$$.fragment,n),$(Lt.$$.fragment,n),$(Dt.$$.fragment,n),$(xt.$$.fragment,n),$(St.$$.fragment,n),$(It.$$.fragment,n),$(De.$$.fragment,n),$(Ft.$$.fragment,n),$(Wt.$$.fragment,n),$(Nt.$$.fragment,n),$(jt.$$.fragment,n),$(Bt.$$.fragment,n),$(Rt.$$.fragment,n),$(Vt.$$.fragment,n),$(Ut.$$.fragment,n),$(qt.$$.fragment,n),$(Gt.$$.fragment,n),$(Ht.$$.fragment,n),$(Jt.$$.fragment,n),$(Yt.$$.fragment,n),$(Xt.$$.fragment,n),$(Kt.$$.fragment,n),$(Qt.$$.fragment,n),$(qe.$$.fragment,n),$(Zt.$$.fragment,n),$(tr.$$.fragment,n),$(ar.$$.fragment,n),$(nr.$$.fragment,n),fo=!1},d(n){t(A),n&&t(z),n&&t(D),k(y),n&&t(j),n&&t(G),n&&t(Nn),n&&t(B),n&&t(jn),n&&t(Ee),n&&t(zn),n&&t(x),n&&t(Bn),n&&t(S),n&&t(Rn),n&&t(re),k(nt),n&&t(Vn),n&&t(Ae),n&&t(Un),n&&t(H),k(ot),k(lt),n&&t(qn),n&&t(ne),k(dt),n&&t(Gn),n&&t(oe),k(mt),n&&t(Hn),n&&t(se),k(pt),n&&t(Jn),n&&t(le),k(ut),n&&t(Yn),n&&t(ie),k(bt),n&&t(Xn),n&&t(J),k(Et),k(kt),n&&t(Kn),n&&t(Y),k(yt),k(Lt),n&&t(Qn),n&&t(fe),k(Dt),n&&t(Zn),n&&t(he),k(xt),n&&t(eo),n&&t(pe),k(St),n&&t(to),n&&t(T),k(It),k(De),k(Ft),k(Wt),k(Nt),k(jt),k(Bt),k(Rt),k(Vt),k(Ut),k(qt),k(Gt),k(Ht),k(Jt),n&&t(ro),n&&t(Re),n&&t(ao),k(Yt,n),n&&t(no),n&&t(Ve),n&&t(oo),k(Xt,n),n&&t(so),n&&t(ge),k(Kt),n&&t(lo),n&&t(F),k(Qt),k(qe),k(Zt),k(tr),n&&t(io),n&&t(_e),k(ar),n&&t(co),n&&t(be),k(nr)}}}const Hp={local:"callbacks",sections:[{local:"transformers.integrations.CometCallback",title:"Available Callbacks"},{local:"transformers.TrainerCallback",title:"TrainerCallback"},{local:"transformers.TrainerState",title:"TrainerState"},{local:"transformers.TrainerControl",title:"TrainerControl"}],title:"Callbacks"};function Jp(lr){return zp(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class tg extends Fp{constructor(A){super();Wp(this,A,Jp,Gp,Np,{})}}export{tg as default,Hp as metadata};
